[
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong closest_integer(std::string value) {\n",
        "snippet": [
            "    double w;\n    w=atof(value.c_str());\n    return round(w);\n}\n"
        ],
        "simplified": "Create a function that takes a value (string) representing a number and returns the closest integer to it. If the number is equidistant from two integers, round it away from zero.",
        "task_id": "99",
        "163": "float f = stof(value);\n\tint intf = (int)f;\n\tint diff_neg = abs(intf - f);\n\tint diff_pos = (int)f + 1 - f;\n\tif (diff_neg <= diff_pos)\n\t\treturn intf;\n\telse\n\t\treturn intf + 1;",
        "grade-163": {
            "execution": 0
        },
        "28": "double num = std::stod(value);\n  return num > 0 ? std::ceil(num) : std::floor(num);",
        "grade-28": {
            "execution": 0
        },
        "6": "long result;\n    // TODO: Write code to implement this function\n    float fl = stof(value);\n    float delta = fl - floor(fl);\n    if (delta < 0.5) {\n        result = floor(fl);\n    } else {\n        result = ceil(fl);\n    }\n    return result;",
        "grade-6": {
            "execution": 0
        },
        "190": "return value.find(\".\") == std::string::npos ? std::stol(value) :\n\t\tstd::stol(value.substr(0, value.find(\".\"))) + (value.back() > '4');",
        "grade-190": {
            "execution": 0
        },
        "70": "int len = value.length();\n  int i = 0;\n  int l = 0;\n  while(i < len) {\n    if(value[i] == '.') {\n      l = len - i - 1;\n      break;\n    }\n    i++;\n  }\n  long v = std::stol(value.substr(0, i));\n  long p = std::stol(value.substr(i + 1, l));\n  long x = pow(10, l - 1);\n  if(p >= x / 2) {\n    v++;\n  }\n  return v;",
        "grade-70": {
            "execution": 0
        },
        "62": "int counter = 0;\n  int digit = 0;\n  std::string ret = \"\";\n  std::string ret2 = \"\";\n  if (value[0] == '-') {\n    counter = 1;\n  }\n  while (value[counter] != '.') {\n    ret += value[counter];\n    counter++;\n  }\n  // return ret;\n  if (ret.length() == 1) {\n    digit = stoi(ret);\n    if (digit < 9) {\n      digit++;\n    }\n    return digit;\n  }\n  for (int i = 0; i < ret.length(); i++) {\n    if (ret[i] == '0') {\n      ret2 += ret[i];\n    }\n    else if (ret[i] != '0') {\n      ret2 += ret[i];\n      break;\n    }\n  }\n  if (ret2.length() == 1) {\n    digit = stoi(ret2);\n    if (digit < 9) {\n      digit++;\n    }\n    return digit;\n  }\n  if (value[0] == '-') {\n    digit = stoi(ret2);\n    if (digit > -9) {\n      digit--;\n    }\n    return digit;\n  }\n  digit = stoi(ret2);\n  if (digit < 9) {\n    digit++;\n  }\n  return digit;",
        "grade-62": {
            "execution": 0
        },
        "57": "std::stringstream ss(value);\n\tdouble d;\n\tss >> d;\n\treturn d > 0 ? std::floor(d) : std::ceil(d);",
        "grade-57": {
            "execution": 0
        },
        "35": "std::istringstream ss(value);\n    double i;\n    ss >> i;\n    //why do we need to do this?\n    i+=0.5;\n    std::cout << \"Value \" << i << std::endl;\n    return (int)i;",
        "grade-35": {
            "execution": 0
        },
        "189": "int val = std::stoi(value);\n    int decimal = std::stoi(value.substr(value.find('.')+1));\n    if(decimal >= 5) {\n        return val + 1;\n    }\n    return val;",
        "grade-189": {
            "execution": 0
        },
        "26": "long x=stol(value);\n  return x%1>=0.5?x+1:x;",
        "grade-26": {
            "execution": 0
        },
        "174": "if (value.empty()) {\n    return 0;\n  }\n  int pos = value.find('.');\n  if (pos == -1) {\n    return std::stol(value);\n  } else {\n    return std::stol(value.substr(0, pos));\n  }",
        "grade-174": {
            "execution": 0
        },
        "139": "double d = std::stod(value);\n    int x = d;\n    if(fabs(d-x) > 0.5) return x+1;\n    return x;",
        "grade-139": {
            "execution": 0
        },
        "22": "//return std::stol(value);\n    long int rv = std::stol(value);\n    double fv = std::stod(value);\n    if (fv - rv >= 0.5) {\n        return rv + 1;\n    }\n    return rv;",
        "grade-22": {
            "execution": 0
        },
        "151": "double dval = stod(value);\n    long sign = dval > 0 ? 1 : -1;\n    return sign * round(abs(dval));",
        "grade-151": {
            "execution": 0
        },
        "108": "// your code goes here\n  int n = value.size();\n  double sz = n;\n  double num=0;\n  for(int i=0;i<n;i++){\n    if(value[i]=='.'){\n      sz=i;\n      continue;\n    }\n    int curr = value[i]-'0';\n    num = num*10 + curr;\n  }\n  int power = n-sz-1;\n  num = num*pow(10,power);\n  //std::cout<<num<<std::endl;\n  if(value[0]!='-'){\n    int a = ceil(num);\n    int b = floor(num);\n    if(a-num<num-b){\n      return a;\n    }\n    else{\n      return b;\n    }\n  }\n  else{\n    int a = floor(num);\n    int b = ceil(num);\n    if(a-num<num-b){\n      return a;\n    }\n    else{\n      return b;\n    }\n  }",
        "grade-108": {
            "execution": 0
        },
        "8": "std::string str;\n  int i = 0;\n  int flag = 0;\n  int decimal_count = 0;\n  for(char c : value) {\n    if(c == '.') {\n      flag = 1;\n      decimal_count++;\n    }\n    if(decimal_count > 1) {\n      return -1;\n    }\n    if(flag && c == '.') {\n      break;\n    }\n    if(flag) {\n      str += c;\n    }\n    i++;\n  }\n  if(str.size() == 0) {\n    return atoi(value.c_str());\n  }\n  if(str.size() > 2) {\n    return -1;\n  }\n  i--;\n  long decimal_part = atoi(str.c_str());\n  long integer_part = atoi(value.substr(0, i).c_str());\n  if(decimal_part >= 50) {\n    return integer_part + 1;\n  }\n  else {\n    return integer_part;\n  }",
        "grade-8": {
            "execution": 0
        },
        "7": "if(value[0] == '-')\n        return ceil(std::stod(value)) < floor(std::stod(value)) ? ceil(std::stod(value)) : floor(std::stod(value));\n    else\n        return floor(std::stod(value)) < ceil(std::stod(value)) ? ceil(std::stod(value)) : floor(std::stod(value));",
        "grade-7": {
            "execution": 0
        },
        "23": "float number = atof(value.c_str());\n  float rounded = 0;\n  if (number > 0)\n    rounded = floor(number + 0.5);\n  else\n    rounded = ceil(number - 0.5);\n  return (long)rounded;",
        "grade-23": {
            "execution": 1
        },
        "55": "double val = std::stod(value);\n    if ((int)(val) == val)\n        return (int)(val);\n    return (val > 0) ? (int)(val+0.5) : (int)(val-0.5);",
        "grade-55": {
            "execution": 1
        },
        "59": "// Write your code here\ndouble str_value = std::stod(value);\nif (std::floor(str_value) == std::ceil(str_value)) {\nreturn str_value;",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\nstd::string fix_spaces(std::string text) {\n",
        "snippet": [
            "    string out=\"\";\n    int spacelen=0;\n    for (int i=0;i<text.length();i++)\n    if (text[i]==' ') spacelen+=1;\n    else\n    {\n        if (spacelen==1) out=out+'_';\n        if (spacelen==2) out=out+\"__\";\n        if (spacelen>2) out=out+'-';\n        spacelen=0;\n        out=out+text[i];\n    }\n    if (spacelen==1) out=out+'_';\n    if (spacelen==2) out=out+\"__\";\n    if (spacelen>2) out=out+'-';\n    return out;\n}\n"
        ],
        "simplified": "Given a string text, replace all spaces in it with underscores, and if a string has more than 2 consecutive spaces, then replace all consecutive spaces with -",
        "task_id": "140",
        "165": "int l = text.length();\n    std::string str;\n    int f = 0;\n    int c = 0;\n    for(int i = 0; i < l; i++) {\n        if(text[i] == ' ') {\n            c++;\n            if(c >= 2) {\n                str += '-';\n                c = 0;\n            }\n        }\n        else {\n            if(text[i] != ' ') {\n                str += text[i];\n                c = 0;\n            }\n        }\n    }\n    return str;",
        "grade-165": {
            "execution": 0
        },
        "28": "std::vector<char> text_in_chars{};\n  for (const auto &char_ : text) {\n    text_in_chars.push_back(char_);\n  }\n  for (auto &char_ : text_in_chars) {\n    if (char_ == ' ') {\n      char_ = '_';\n    }\n  }\n  std::vector<int> count_spaces_in_row{};\n  int count_spaces = 0;\n  for (int i = 0; i < text_in_chars.size(); ++i) {\n    if (text_in_chars[i] == '_') {\n      count_spaces++;\n    } else {\n      count_spaces_in_row.push_back(count_spaces);\n      count_spaces = 0;\n    }\n  }\n  std::vector<int> indexes_for_replacement{};\n  for (int i = 0; i < count_spaces_in_row.size(); ++i) {\n    if (count_spaces_in_row[i] > 2) {\n      indexes_for_replacement.push_back(i);\n    }\n  }\n  for (const auto &index : indexes_for_replacement) {\n    text_in_chars[index] = '-';\n  }\n  std::string result{};\n  for (const auto &char_ : text_in_chars) {\n    result += char_;\n  }\n  return result;",
        "grade-28": {
            "execution": 0
        },
        "6": "int count = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            count++;\n        }\n        else {\n            count = 0;\n        }\n        if (count == 2) {\n            text[i - 1] = '-';\n            count = 1;\n        }\n        else if (count > 2) {\n            text[i] = '-';\n        }\n    }\n    return text;",
        "grade-6": {
            "execution": 0
        },
        "191": "std::string res = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        int x = 0;\n        if (text[i] == ' ') {\n            while (text[i + x] == ' ') x++;\n            if (x > 2) res += \"-\";\n            else {\n                while (x > 0) {\n                    res += \"_\";\n                    x--;\n                }\n            }\n        }\n        else {\n            res += text[i];\n        }\n    }\n    return res;",
        "grade-191": {
            "execution": 0
        },
        "70": "std::string prev;\n    std::regex replace(\" \");\n    std::string curr=regex_replace(text,replace,\"_\");\n    std::string prev1=regex_replace(prev,replace,\"_\");\n    while(curr!=prev1){\n        prev=prev1;\n        prev1=regex_replace(prev,replace,\"_\");\n    }\n    std::regex replace1(\"_{2,}\");\n    std::string curr1=regex_replace(prev1,replace1,\"-\");\n    return curr1;",
        "grade-70": {
            "execution": 0
        },
        "62": "if (text.empty()) {\n\t\treturn \"\";\n\t}\n\tstd::string res;\n\tint count = 0;\n\tfor (int i = 0; i < text.size(); i++) {\n\t\tif (text[i] == ' ') {\n\t\t\tcount++;\n\t\t}\n\t\telse {\n\t\t\tcount = 0;\n\t\t}\n\t\tif (count == 1) {\n\t\t\tres.push_back('_');\n\t\t}\n\t\telse if (count > 2) {\n\t\t\tres.push_back('-');\n\t\t}\n\t\telse {\n\t\t\tres.push_back(text[i]);\n\t\t}\n\t}\n\treturn res;",
        "grade-62": {
            "execution": 0
        },
        "57": "if (text.empty()) return text;\n  text[0] = text[0] == ' ' ? '_' : text[0];\n  for (int i = 1; i < text.size(); i++) {\n    if (text[i] == ' ') {\n      if (text[i - 1] == ' ') {\n        if (text[i - 2] == '-') {\n          text[i] = '\\0';\n        } else {\n          text[i] = '-';\n        }\n      } else {\n        text[i] = '_';\n      }\n    }\n  }\n  return text;",
        "grade-57": {
            "execution": 0
        },
        "35": "std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += \"_\";\n            if (text[i+1] == ' ') {\n                while (text[i+1] == ' ') {\n                    result += \"-\";\n                    i++;\n                }\n            }\n        } else {\n            result += text[i];\n        }\n    }\n    return result;",
        "grade-35": {
            "execution": 0
        },
        "190": "std::cout << \"Received: \" << text << \"\\n\";\n    std::string output = \"\";\n    int spaces_count = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            spaces_count++;\n        } else {\n            spaces_count = 0;\n        }\n        if (spaces_count > 2) {\n            if (output[output.length() - 1] != '-') {\n                output += '-';\n            }\n        } else if (text[i] == ' ') {\n            output += '_';\n        } else {\n            output += text[i];\n        }\n    }\n    return output;",
        "grade-190": {
            "execution": 0
        },
        "26": "// TODO\n    int numSpaces = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            numSpaces++;\n        }\n    }\n    if (numSpaces == 0) {\n        return text;\n    }\n    std::string result = \"\";\n    int j = 0;\n    while (text[j] == ' ') {\n        result = \"_\";\n        j++;\n    }\n    while (j < text.length()) {\n        while (text[j] == ' ') {\n            int index = j;\n            while (text[index] == ' ') {\n                result += '-';\n                index++;\n            }\n            j = index;\n        }\n        if (text[j] != ' ') {\n            result += text[j];\n        }\n        j++;\n    }\n    return result;",
        "grade-26": {
            "execution": 0
        },
        "175": "text.erase(remove(text.begin(), text.end(), ' '), text.end());\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            text[i] = '_';\n        }\n    }\n    return text;",
        "grade-175": {
            "execution": 0
        },
        "140": "std::regex space(\"\\\\s{2,}\");\n  text = std::regex_replace(text, space, \"-\");\n  return std::regex_replace(text, std::regex(\"\\\\s\"), \"_\");",
        "grade-140": {
            "execution": 0
        },
        "22": "for (size_t i = 0; i < text.size(); i++) {\n\t\tif (text[i] == ' ') {\n\t\t\tsize_t count = 0;\n\t\t\twhile (text[i] == ' ') {\n\t\t\t\tcount++;\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tif (count == 1) {\n\t\t\t\ttext[i - 1] = '_';\n\t\t\t}\n\t\t\telse {\n\t\t\t\ttext[i - 1] = '-';\n\t\t\t}\n\t\t}\n\t}\n\treturn text;",
        "grade-22": {
            "execution": 0
        },
        "152": "for (unsigned int i = 0; i < text.length(); i++) {\n\t\tif (text[i] == ' ') {\n\t\t\ttext[i] = '_';\n\t\t\tint counter = 0;\n\t\t\twhile (text[i + 1] == ' ') {\n\t\t\t\tcounter++;\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tif (counter > 2) {\n\t\t\t\ttext[i] = '-';\n\t\t\t}\n\t\t}\n\t}\n\treturn text;",
        "grade-152": {
            "execution": 0
        },
        "108": "std::string new_text;\n    bool isSpace = false;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            if (isSpace) {\n                new_text += '-';\n            } else {\n                new_text += '_';\n                isSpace = true;\n            }\n        } else {\n            new_text += text[i];\n            isSpace = false;\n        }\n    }\n    return new_text;",
        "grade-108": {
            "execution": 0
        },
        "8": "std::string fixed;\n    bool prev = false;\n    for (auto ch : text) {\n        if (ch == ' ') {\n            if (prev) {\n                fixed += '-';\n            } else {\n                fixed += '_';\n                prev = true;\n            }\n        } else {\n            fixed += ch;\n            prev = false;\n        }\n    }\n    return fixed;",
        "grade-8": {
            "execution": 0
        },
        "7": "for (int i = 0; i < text.size(); i++) {\n\t\tif (text[i] == ' ') {\n\t\t\tif (i == 0) {\n\t\t\t\tif (text[i + 1] == ' ') {\n\t\t\t\t\ttext[i] = '-';\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ttext[i] = '_';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == text.size() - 1) {\n\t\t\t\tif (text[i - 1] == ' ') {\n\t\t\t\t\ttext[i] = '-';\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ttext[i] = '_';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (text[i - 1] == ' ' && text[i + 1] == ' ') {\n\t\t\t\t\ttext[i] = '-';\n\t\t\t\t}\n\t\t\t\telse if (text[i - 1] == ' ' && text[i + 1] != ' ') {\n\t\t\t\t\ttext[i] = '_';\n\t\t\t\t}\n\t\t\t\telse if (text[i - 1] != ' ' && text[i + 1] == ' ') {\n\t\t\t\t\ttext[i] = '_';\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ttext[i] = '_';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn text;",
        "grade-7": {
            "execution": 0
        },
        "23": "int i = 0;\n\tint spaces_count = 0;\n\twhile (i < text.length()) {\n\t\tif (text[i] == ' ') {\n\t\t\tspaces_count++;\n\t\t\tint j = i + 1;\n\t\t\twhile (j < text.length() && text[j] == ' ') {\n\t\t\t\tspaces_count++;\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif (spaces_count > 2) {\n\t\t\t\ttext.replace(i, spaces_count, \"-\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\ttext.replace(i, spaces_count, \"_\");\n\t\t\t}\n\t\t\ti = j;\n\t\t\tspaces_count = 0;\n\t\t}\n\t\telse {\n\t\t\ti++;\n\t\t}\n\t}\n\treturn text;",
        "grade-23": {
            "execution": 0
        },
        "55": "int length = text.length();\n  std::string new_text = \"\";\n  for (int i = 0; i < length; i++) {\n    // We are not at the start of the string,\n    // and the current character is a space and the \n    // previous character is a space, then we \n    // add a - to the new string\n    if (i > 0 && text[i] == ' ' && text[i - 1] == ' ') {\n      new_text += '-';\n    }\n    // We are not at the start of the string,\n    // and the current character is a space and the \n    // previous character is not a space, then we \n    // add a _ to the new string\n    else if (i > 0 && text[i] == ' ' && text[i - 1] != ' ') {\n      new_text += '_';\n    }\n    // Otherwise we add the original character \n    // to the new string\n    else {\n      new_text += text[i];\n    }\n  }\n  return new_text;",
        "grade-55": {
            "execution": 0
        },
        "59": "std::string ret;\n    int len = text.length();\n    bool isFirst = true;\n    bool isFirstSpace = true;\n    for(int i = 0; i < len; i++) {\n        if(text[i] == ' ') {\n            if(isFirst) {\n                isFirst = false;\n                isFirstSpace = true;\n                ret.push_back('_');\n            } else {\n                if(isFirstSpace) {\n                    isFirstSpace = false;\n                    ret.push_back('-');\n                }\n            }\n        } else {\n            isFirst = false;\n            isFirstSpace = true;\n            ret.push_back(text[i]);\n        }\n    }\n    return ret;",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nlong specialFilter(std::vector<long> nums) {\n",
        "snippet": [
            "    int num=0;\n    for (int i=0;i<nums.size();i++)\n    if (nums[i]>10)\n    {\n        string w=to_string(nums[i]);\n        if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;\n    }\n    return num;\n}\n"
        ],
        "simplified": "Write a function that takes an array of numbers as input and returns the number of elements in the array that are greater than 10 and both first and last digits of a number are odd (1, 3, 5, 7, 9).",
        "task_id": "146",
        "163": "long count = 0;\n\tfor (int i = 0; i < nums.size(); i++) {\n\t\tif (nums[i] > 10) {\n\t\t\tint num = nums[i];\n\t\t\tint first = num;\n\t\t\tint last = num % 10;\n\t\t\twhile (num > 10) {\n\t\t\t\tnum = num / 10;\n\t\t\t}\n\t\t\tfirst = num;\n\t\t\tif (first % 2 != 0 && last % 2 != 0) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;",
        "grade-163": {
            "execution": 0
        },
        "28": "int i,j,count=0;\n    for(i=0;i<nums.size();i++)\n    {\n        if(nums[i]>10)\n        {\n            int temp=nums[i];\n            int first = temp%10;\n            int last = temp;\n            while(temp!=0)\n            {\n                last = temp%10;\n                temp = temp/10;\n            }\n            if(first%2!=0 && last%2!=0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;",
        "grade-28": {
            "execution": 1
        },
        "6": "//Initialize a counter that will track the number of elements that fit the criteria\n\tlong count = 0;\n\t//Iterate through the vector nums\n\tfor (int i = 0; i < nums.size(); i++) {\n\t\t//Convert the elements to strings \n\t\tstd::string str = std::to_string(nums[i]);\n\t\t//Check to see if the element is greater than 10\n\t\tif (nums[i] > 10) {\n\t\t\t//Check to see if the first and last characters of the element are odd numbers\n\t\t\tif ((str[0] == '1' || str[0] == '3' || str[0] == '5' || str[0] == '7' || str[0] == '9')\n\t\t\t\t&& (str[str.length() - 1] == '1' || str[str.length() - 1] == '3' || str[str.length() - 1] == '5' || str[str.length() - 1] == '7' || str[str.length() - 1] == '9')) {\n\t\t\t\t//Increment the counter if the element fits the criteria\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\t//Return the number of elements that fit the criteria\n\treturn count;",
        "grade-6": {
            "execution": 1
        },
        "189": "// Write your code here\n\tint result = 0;\n\tfor (long i = 0; i < nums.size(); i++) {\n\t\tlong temp = nums[i];\n\t\tlong first = nums[i] % 10;\n\t\tlong last = nums[i] / 10;\n\t\tlast = last % 10;\n\t\tif (nums[i] > 10 && first%2 == 1 && last%2 == 1) {\n\t\t\tresult++;\n\t\t}\n\t}\n\treturn result;",
        "grade-189": {
            "execution": 0
        },
        "70": "std::vector<long>::iterator itr;\n  long count = 0;\n  for(itr = nums.begin(); itr != nums.end(); itr++) {\n    int firstDigit, lastDigit;\n    if(*itr >= 10) {\n      firstDigit = *itr % 10;\n      lastDigit = *itr % 10;\n      if(firstDigit == 1 || firstDigit == 3 || firstDigit == 5 || firstDigit == 7 || firstDigit == 9) {\n        if(lastDigit == 1 || lastDigit == 3 || lastDigit == 5 || lastDigit == 7 || lastDigit == 9) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;",
        "grade-70": {
            "execution": 0
        },
        "62": "long cnt = 0;\n    for(auto x: nums) {\n        if(x > 10 && x % 2 == 1 && x / 10 % 2 == 1) {\n            ++cnt;\n        }\n    }\n    return cnt;",
        "grade-62": {
            "execution": 0
        },
        "57": "int count = 0;\n\tfor (int i = 0; i < nums.size(); i++) {\n\t\tif (nums[i] > 10) {\n\t\t\tint temp = nums[i];\n\t\t\tint first = temp % 10;\n\t\t\twhile (temp != 0) {\n\t\t\t\tif (temp / 10 == 0) {\n\t\t\t\t\tint last = temp % 10;\n\t\t\t\t\tif (first % 2 != 0 && last % 2 != 0) {\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttemp = temp / 10;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;",
        "grade-57": {
            "execution": 1
        },
        "35": "int cnt = 0;\n    for(int i = 0; i < nums.size(); i++) {\n        if(nums[i] > 10) {\n            if(nums[i]%2 == 1) {\n                int a = nums[i];\n                int first = a%10;\n                int last = a/10;\n                if(first%2 == 1) {\n                    if(last%2 == 1) {\n                        cnt++;\n                    }\n                }\n            }\n        }\n    }\n    return cnt;",
        "grade-35": {
            "execution": 0
        },
        "188": "// Write your code here",
        "grade-188": {
            "execution": 0
        },
        "26": "std::vector<long> special_nums;\n  for (int i = 0; i < nums.size(); i++) {\n    if (nums[i] > 10) {\n      std::string current_num = std::to_string(nums[i]);\n      if (current_num[0] % 2 != 0 && current_num[current_num.size() - 1] % 2 != 0) {\n        special_nums.push_back(nums[i]);\n      }\n    }\n  }\n  return special_nums.size();",
        "grade-26": {
            "execution": 1
        },
        "173": "return std::count_if(nums.begin(), nums.end(), [](long i) {\n        // convert to string\n        std::string str = std::to_string(i);\n        // check if first and last numbers are odd\n        if (str[0] % 2 == 1 && str[str.length() - 1] % 2 == 1) {\n            // check if the number is greater than 10\n            if (i > 10) {\n                return true;\n            }\n        }\n        return false;\n    });",
        "grade-173": {
            "execution": 1
        },
        "139": "//check if the first and last digits are odd\n  int result = 0;\n  for(int i = 0; i < nums.size(); i++){\n    if(nums[i] > 10){\n      std::string numstr = std::to_string(nums[i]);\n      if(numstr[0] - '0'%2 != 0 && numstr[numstr.size()-1] - '0'%2 != 0){\n        result++;\n      }\n    }\n  }\n  return result;",
        "grade-139": {
            "execution": 0
        },
        "22": "long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n        if(nums[i] > 10) {\n            if(abs(nums[i]) % 2 == 1) {\n                int last_digit = abs(nums[i]) % 10;\n                int first_digit = abs(nums[i]);\n                while(first_digit > 9) {\n                    first_digit /= 10;\n                }\n                if(last_digit == first_digit) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;",
        "grade-22": {
            "execution": 0
        },
        "151": "long count=0;\n  for(int i=0;i<nums.size();i++)\n  {\n    long num=nums[i];\n    if(num<10)\n    {\n      if(num%2!=0)\n      {\n        count++;\n      }\n    }\n    else\n    {\n      long first=num%10;\n      while(num>10)\n      {\n        num=num/10;\n      }\n      if(num%2!=0 && first%2!=0)\n      {\n        count++;\n      }\n    }\n  }\n  return count;",
        "grade-151": {
            "execution": 0
        },
        "108": "std::vector<long> special_nums;\n    for (int i = 0; i < nums.size(); i++) {\n        int n = std::abs(nums[i]);\n        if (n > 10) {\n            int last_digit = n % 10;\n            while (n >= 10) {\n                n /= 10;\n            }\n            if (n % 2 != 0 && last_digit % 2 != 0) {\n                special_nums.push_back(nums[i]);\n            }\n        }\n    }\n    return special_nums.size();",
        "grade-108": {
            "execution": 0
        },
        "8": "// Write your code here.\n\tint count = 0;\n\tfor (int i = 0; i < nums.size(); i++) {\n\t\tint lastDigit = nums[i] % 10;\n\t\tint firstDigit = nums[i];\n\t\twhile (firstDigit > 9) {\n\t\t\tfirstDigit = firstDigit / 10;\n\t\t}\n\t\tif (lastDigit % 2 != 0 && firstDigit % 2 != 0 && nums[i] > 10) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;",
        "grade-8": {
            "execution": 1
        },
        "7": "int count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n        long num = nums[i];\n        if(num > 10) {\n            std::string num_str = std::to_string(num);\n            if(num_str[0] % 2 == 1 && num_str[num_str.size() - 1] % 2 == 1) {\n                count++;\n            }\n        }\n    }\n    return count;",
        "grade-7": {
            "execution": 1
        },
        "23": "// Write your code here\n    long a, s = 0;\n    for(auto num : nums) {\n        if(num > 10) {\n            long x = num, y = num;\n            while(x > 0) {\n                x /= 10;\n                if(x < 10) {\n                    break;\n                }\n            }\n            while(y > 0) {\n                a = y % 10;\n                y /= 10;\n            }\n            if(a % 2 != 0 && x % 2 != 0) {\n                s++;\n            }\n        }\n    }\n    return s;",
        "grade-23": {
            "execution": 0
        },
        "55": "long count = 0;\n\tfor (long i = 0; i < nums.size(); i++) {\n\t\tlong n = nums[i];\n\t\tif (n > 10) {\n\t\t\tint firstDigit = n % 10;\n\t\t\tint secondDigit = n / 10;\n\t\t\tsecondDigit = secondDigit % 10;\n\t\t\tif (firstDigit % 2 != 0 && secondDigit % 2 != 0)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;",
        "grade-55": {
            "execution": 0
        },
        "59": "long count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n        if(nums[i] > 10) {\n            int first = nums[i]/10;\n            int last = nums[i]%10;\n            if(first%2 != 0 && last%2 != 0) {\n                count++;\n            }\n        }\n    }\n    return count;",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the name of a class (a string) and a list of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the list.\n// For example, if you are given \"Slices\" as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\nstd::string Strongest_Extension(std::string class_name, std::vector<std::string> extensions) {\n",
        "snippet": [
            "    string strongest=\"\";\n    int max=-1000;\n    for (int i=0;i<extensions.size();i++)\n    {\n        int strength=0;\n        for (int j=0;j<extensions[i].length();j++)\n        {\n            char chr=extensions[i][j];\n            if (chr>=65 and chr<=90) strength+=1;\n            if (chr>=97 and chr<=122) strength-=1;\n        }\n        if (strength>max) \n        {\n            max=strength;\n            strongest=extensions[i];\n        }\n    }\n    return class_name+'.'+strongest;\n}\n"
        ],
        "simplified": "You will be given the name of a class (a string) and a list of extensions. The extensions are to be used to load additional classes to the class. The strength of the extension is as follows: Let CAP be the number of the uppercase letters in the extension's name, and let SM be the number of lowercase letters in the extension's name, the strength is given by the fraction CAP - SM. You should find the strongest extension and return a string in this format: ClassName.StrongestExtensionName. If there are two or more extensions with the same strength, you should choose the one that comes first in the list. For example, if you are given \"Slices\" as the class and a list of the extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension (its strength is -1).",
        "task_id": "153",
        "163": "double max_strength{0.0};\n  std::string ans{\"\"};\n  for (const auto& extension : extensions) {\n    int upper_case{0};\n    int lower_case{0};\n    for (const auto& c : extension) {\n      if (isupper(c)) {\n        ++upper_case;\n      } else {\n        ++lower_case;\n      }\n    }\n    double strength{static_cast<double>(upper_case - lower_case)};\n    if (strength > max_strength) {\n      max_strength = strength;\n      ans = extension;\n    }\n  }\n  return class_name + \".\" + ans;",
        "grade-163": {
            "execution": 0
        },
        "28": "int max = 0;\n    int uppercase = 0;\n    int lowercase = 0;\n    int index = 0;\n    for (int i = 0; i < extensions.size(); i++) {\n        for (int j = 0; j < extensions[i].size(); j++) {\n            if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z') {\n                uppercase++;\n            } else if (extensions[i][j] >= 'a' && extensions[i][j] <= 'z') {\n                lowercase++;\n            }\n        }\n        int current = uppercase - lowercase;\n        if (current > max) {\n            max = current;\n            index = i;\n        }\n        uppercase = 0;\n        lowercase = 0;\n    }\n    return class_name + \".\" + extensions[index];",
        "grade-28": {
            "execution": 0
        },
        "6": "std::string res = class_name;\n    int max = INT_MIN;\n    for (auto it = extensions.begin(); it != extensions.end(); ++it) {\n        int cap = 0, small = 0;\n        for (char& x : *it) {\n            if (isupper(x)) cap++;\n            else small++;\n        }\n        int str = cap - small;\n        if (str > max) {\n            max = str;\n            res += '.' + *it;\n        }\n    }\n    return res;",
        "grade-6": {
            "execution": 0
        },
        "189": "// your code here\n    std::string strongest = \"\";\n    float count = -100;\n    for(int i = 0; i < extensions.size(); i++){\n        int CAP = 0;\n        int SM = 0;\n        for(int j = 0; j < extensions[i].size(); j++){\n            if(extensions[i][j] >= 'A' && extensions[i][j] <= 'Z'){\n                CAP++;\n            }\n            else{\n                SM++;\n            }\n        }\n        float strength = (float)CAP - SM;\n        if(strength > count){\n            count = strength;\n            strongest = extensions[i];\n        }\n    }\n    return class_name + \".\" + strongest;",
        "grade-189": {
            "execution": 0
        },
        "70": "if (extensions.size() == 0) return class_name;\n    int strongest_count = 0;\n    std::string strongest = extensions[0];\n    for (auto ext : extensions) {\n        int count = 0;\n        for (auto c : ext) {\n            if (isupper(c)) count++;\n            else if (islower(c)) count--;\n        }\n        if (count > strongest_count) {\n            strongest_count = count;\n            strongest = ext;\n        }\n    }\n    return class_name + \".\" + strongest;",
        "grade-70": {
            "execution": 0
        },
        "62": "if (extensions.size() == 0)\n\t\treturn class_name;\n\tdouble max_score = 0.0;\n\tint max_index = 0;\n\tfor (int i = 0; i < extensions.size(); i++) {\n\t\tdouble caps = 0.0;\n\t\tdouble sm = 0.0;\n\t\tfor (int j = 0; j < extensions[i].size(); j++) {\n\t\t\tif (isupper(extensions[i][j]))\n\t\t\t\tcaps++;\n\t\t\telse if (islower(extensions[i][j]))\n\t\t\t\tsm++;\n\t\t}\n\t\tif (caps - sm > max_score) {\n\t\t\tmax_score = caps - sm;\n\t\t\tmax_index = i;\n\t\t}\n\t}\n\treturn class_name + \".\" + extensions[max_index];",
        "grade-62": {
            "execution": 0
        },
        "57": "auto strongest = std::max_element(\n\t\textensions.begin(),\n\t\textensions.end(),\n\t\t[](const std::string& a, const std::string& b) {\n\t\t\treturn std::count_if(a.begin(), a.end(), isupper) -\n\t\t\t\tstd::count_if(a.begin(), a.end(), islower) >\n\t\t\t\tstd::count_if(b.begin(), b.end(), isupper) -\n\t\t\t\tstd::count_if(b.begin(), b.end(), islower);\n\t\t});\n\tif (strongest == extensions.end()) {\n\t\treturn class_name;\n\t}\n\treturn class_name + \".\" + *strongest;",
        "grade-57": {
            "execution": 0
        },
        "35": "float max_strength = 0;\n\tstd::string result = \"\";\n\tfor (int i = 0; i < extensions.size(); i++) {\n\t\tfloat uppercase = 0;\n\t\tfloat lowercase = 0;\n\t\tfor (int j = 0; j < extensions[i].size(); j++) {\n\t\t\tif (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z') {\n\t\t\t\tuppercase++;\n\t\t\t}\n\t\t\telse if (extensions[i][j] >= 'a' && extensions[i][j] <= 'z') {\n\t\t\t\tlowercase++;\n\t\t\t}\n\t\t}\n\t\tif (uppercase - lowercase > max_strength) {\n\t\t\tmax_strength = uppercase - lowercase;\n\t\t\tresult = extensions[i];\n\t\t}\n\t}\n\treturn class_name + \".\" + result;",
        "grade-35": {
            "execution": 0
        },
        "188": "std::sort(extensions.begin(), extensions.end(), [](std::string a, std::string b) {\n        int uppercase_a = 0, lowercase_a = 0, uppercase_b = 0, lowercase_b = 0;\n        for (char letter : a) {\n            if (isupper(letter)) {\n                uppercase_a++;\n            } else {\n                lowercase_a++;\n            }\n        }\n        for (char letter : b) {\n            if (isupper(letter)) {\n                uppercase_b++;\n            } else {\n                lowercase_b++;\n            }\n        }\n        if (uppercase_a - lowercase_a == uppercase_b - lowercase_b) {\n            return a < b;\n        }\n        return uppercase_a - lowercase_a > uppercase_b - lowercase_b;\n    });\n    return class_name + \".\" + extensions[0];",
        "grade-188": {
            "execution": 0
        },
        "26": "float max_strength = INT_MIN;\n    std::string strongest_ext;\n    for(std::string& i : extensions) {\n        float temp = 0;\n        for(char c : i) {\n            if(std::isupper(c)) {\n                temp++;\n            } else {\n                temp--;\n            }\n        }\n        if(temp > max_strength) {\n            max_strength = temp;\n            strongest_ext = i;\n        }\n    }\n    return class_name + \".\" + strongest_ext;",
        "grade-26": {
            "execution": 0
        },
        "173": "std::string strongest_extension;\n  float strength = 0;\n  for (auto && extension : extensions) {\n    float cap = 0;\n    float sm = 0;\n    for (auto && c : extension) {\n      if (isupper(c)) {\n        cap++;\n      } else {\n        sm++;\n      }\n    }\n    float current_strength = cap - sm;\n    if (current_strength > strength) {\n      strength = current_strength;\n      strongest_extension = extension;\n    }\n  }\n  return class_name + \".\" + strongest_extension;",
        "grade-173": {
            "execution": 0
        },
        "139": "int max = 0;\n  int index = 0;\n  for (int i = 0; i < extensions.size(); i++) {\n    int up = 0;\n    int lo = 0;\n    for (int j = 0; j < extensions[i].size(); j++) {\n      if (islower(extensions[i][j])) {\n        lo++;\n      } else {\n        up++;\n      }\n    }\n    int strength = up - lo;\n    if (strength > max) {\n      max = strength;\n      index = i;\n    }\n  }\n  return class_name + \".\" + extensions[index];",
        "grade-139": {
            "execution": 0
        },
        "22": "float max = 0.0f;\n    std::string result;\n    for (auto extension : extensions) {\n        int uppers = 0;\n        int lowers = 0;\n        for (auto letter : extension) {\n            if (isupper(letter)) {\n                uppers++;\n            } else {\n                lowers++;\n            }\n        }\n        float curr_strength = (float)uppers - (float)lowers;\n        if (curr_strength > max) {\n            max = curr_strength;\n            result = extension;\n        }\n    }\n    return class_name + \".\" + result;",
        "grade-22": {
            "execution": 0
        },
        "151": "int i, j, c, max;\n\tstd::string str, max_str;\n\tif(extensions.size() == 0) {\n\t\treturn \"\";\n\t}\n\tmax = -extensions[0].size();\n\tmax_str = extensions[0];\n\tfor(i = 0; i < extensions.size(); i++) {\n\t\tstr = extensions[i];\n\t\tc = 0;\n\t\tfor(j = 0; j < str.size(); j++) {\n\t\t\tif(isupper(str[j])) {\n\t\t\t\tc++;\n\t\t\t}\n\t\t}\n\t\tif(c - (str.size() - c) > max) {\n\t\t\tmax = c - (str.size() - c);\n\t\t\tmax_str = str;\n\t\t}\n\t}\n\treturn class_name + \".\" + max_str;",
        "grade-151": {
            "execution": 0
        },
        "108": "int max = 0;\n    std::string max_extension = \"\";\n    for (int i = 0; i < extensions.size(); i++) {\n        int cap = 0;\n        int sm = 0;\n        for (int j = 0; j < extensions[i].size(); j++) {\n            if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z') {\n                cap++;\n            } else {\n                sm++;\n            }\n        }\n        if (cap - sm > max) {\n            max = cap - sm;\n            max_extension = extensions[i];\n        }\n    }\n    return class_name + \".\" + max_extension;",
        "grade-108": {
            "execution": 0
        },
        "8": "assert(class_name.length() > 0);\n    // your code here\n    std::string ans;\n    std::string str;\n    // -1 is to make sure we do not consider the '\\0' at the end of the string\n    int difference = -1;\n    int diff;\n    int uppercase_count;\n    int lowercase_count;\n    for (int i = 0; i < extensions.size(); i++) {\n        // reset the values of lowercase and uppercase count\n        uppercase_count = 0;\n        lowercase_count = 0;\n        for (int j = 0; j < extensions[i].length(); j++) {\n            if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z') {\n                uppercase_count++;\n            }\n            else if (extensions[i][j] >= 'a' && extensions[i][j] <= 'z') {\n                lowercase_count++;\n            }\n        }\n        diff = uppercase_count - lowercase_count;\n        if (diff > difference) {\n            difference = diff;\n            ans = extensions[i];\n        }\n    }\n    str = class_name + \".\" + ans;\n    return str;",
        "grade-8": {
            "execution": 1
        },
        "7": "double strong=0;\n\tstd::string str = \"\";\n\tfor(int i=0;i<extensions.size();i++){\n\t\tint up=0,low=0;\n\t\tfor(int j=0;j<extensions[i].length();j++){\n\t\t\tif(extensions[i][j]>='A' && extensions[i][j]<='Z'){\n\t\t\t\tup++;\n\t\t\t}\n\t\t\telse if(extensions[i][j]>='a' && extensions[i][j]<='z'){\n\t\t\t\tlow++;\n\t\t\t}\n\t\t}\n\t\tif(strong < (up-low)){\n\t\t\tstrong = up-low;\n\t\t\tstr = extensions[i];\n\t\t}\n\t}\n\treturn class_name+\".\"+str;",
        "grade-7": {
            "execution": 0
        },
        "23": "std::cout << \"Got class_name = \" << class_name << \"\\n\";\n\tstd::cout << \"Got extensions = \";\n\tfor (auto s : extensions) {\n\t\tstd::cout << s << \" \";\n\t}\n\tstd::cout << \"\\n\";\n\tdouble maxStrength = 0;\n\tstd::string maxExtension = \"\";\n\tfor (auto s : extensions) {\n\t\tint upper = 0;\n\t\tint lower = 0;\n\t\tfor (auto ch : s) {\n\t\t\tif (std::isupper(ch)) {\n\t\t\t\tupper++;\n\t\t\t} else {\n\t\t\t\tlower++;\n\t\t\t}\n\t\t}\n\t\tdouble currStrength = (double)upper - (double)lower;\n\t\tif (currStrength > maxStrength) {\n\t\t\tmaxStrength = currStrength;\n\t\t\tmaxExtension = s;\n\t\t}\n\t}\n\treturn class_name + \".\" + maxExtension;",
        "grade-23": {
            "execution": 0
        },
        "55": "std::string strongest = \"\";\n    double strongest_strength = 0;\n    std::transform(class_name.begin(), class_name.end(), class_name.begin(), ::tolower);\n    for (auto i = extensions.begin(); i != extensions.end(); i++) {\n        int capital_letters = 0;\n        int small_letters = 0;\n        for (auto j = i->begin(); j != i->end(); j++) {\n            if (*j >= 'A' && *j <= 'Z') {\n                capital_letters++;\n            } else if (*j >= 'a' && *j <= 'z') {\n                small_letters++;\n            }\n        }\n        double strength = double(capital_letters - small_letters);\n        if (strength >= strongest_strength) {\n            strongest_strength = strength;\n            strongest = *i;\n        }\n    }\n    std::transform(strongest.begin(), strongest.end(), strongest.begin(), ::toupper);\n    return class_name + \".\" + strongest;",
        "grade-55": {
            "execution": 0
        },
        "59": "double strongest = INT_MIN;\n    std::string extension;\n    for (int i = 0; i < extensions.size(); i++) {\n        int lower = 0;\n        int upper = 0;\n        for (int j = 0; j < extensions[i].size(); j++) {\n            if (extensions[i][j] >= 'a' && extensions[i][j] <= 'z') {\n                lower++;\n            } else if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z') {\n                upper++;\n            }\n        }\n        double curr = upper - lower;\n        if (curr > strongest) {\n            strongest = curr;\n            extension = extensions[i];\n        }\n    }\n    return class_name + \".\" + extension;",
        "grade-59": {
            "execution": 1
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>> lst, long x) {\n",
        "snippet": [
            "    vector<vector<int>> out={};\n    for (int i=0;i<lst.size();i++)\n    for (int j=lst[i].size()-1;j>=0;j-=1)\n    if (lst[i][j]==x) out.push_back({i,j});\n    return out;\n}\n"
        ],
        "simplified": "You are given a 2 dimensional data, as a nested lists, which is similar to matrix, however, unlike matrices, each row may contain a different number of columns. Given lst, and integer x, find integers x in the list, and return list of tuples, [(x1, y1), (x2, y2) ...] such that each tuple is a coordinate - (row, columns), starting with 0. Sort coordinates initially by rows in ascending order. Also, sort coordinates of the row by columns in descending order.",
        "task_id": "87",
        "164": "std::vector<std::tuple<long, long>> result;\n    if(lst.size() == 0) return result;\n    for(long i = 0; i < lst.size(); i++) {\n        for(long j = 0; j < lst[i].size(); j++) {\n            if(lst[i][j] == x) {\n                result.push_back(std::make_tuple(i, j));\n            }\n        }\n    }\n    std::sort(result.begin(), result.end(), [](const std::tuple<long, long>& lhs, const std::tuple<long, long>& rhs) {\n        return std::get<0>(lhs) < std::get<0>(rhs);\n    });\n    long start = 0;\n    long end = 0;\n    while(start < result.size()) {\n        end = start;\n        while(end < result.size() && std::get<0>(result[start]) == std::get<0>(result[end])) {\n            end++;\n        }\n        std::sort(result.begin() + start, result.begin() + end, [](const std::tuple<long, long>& lhs, const std::tuple<long, long>& rhs) {\n            return std::get<1>(lhs) > std::get<1>(rhs);\n        });\n        start = end;\n    }\n    return result;",
        "grade-164": {
            "execution": 1
        },
        "28": "std::vector<std::tuple<long, long>> final_vector;\n    for (int i = 0; i < lst.size(); i++) {\n        auto current_vector = lst[i];\n        std::vector<long> current_vector_index;\n        for (int j = 0; j < current_vector.size(); j++) {\n            if (current_vector[j] == x) {\n                current_vector_index.push_back(j);\n            }\n        }\n        for (int k = 0; k < current_vector_index.size(); k++) {\n            std::tuple<long, long> current_tuple = std::make_tuple(i, current_vector_index[k]);\n            final_vector.push_back(current_tuple);\n        }\n    }\n    std::sort(final_vector.begin(), final_vector.end(), [](std::tuple<long, long> left, std::tuple<long, long> right) {\n        long first_left = std::get<0>(left);\n        long first_right = std::get<0>(right);\n        long second_left = std::get<1>(left);\n        long second_right = std::get<1>(right);\n        if (first_left != first_right) {\n            return first_left < first_right;\n        } else {\n            return second_left > second_right;\n        }\n    });\n    return final_vector;",
        "grade-28": {
            "execution": 1
        },
        "6": "std::vector<std::tuple<long, long>> result;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n                result.push_back(std::make_tuple(i, j));\n            }\n        }\n    }\n    std::sort(result.begin(), result.end(),\n              [](std::tuple<long, long> a, std::tuple<long, long> b) {\n                  return (std::get<0>(a) < std::get<0>(b));\n              });\n    for (long i = 0; i < result.size(); i++) {\n        for (long j = 0; j < result.size() - 1; j++) {\n            if (std::get<0>(result[j]) == std::get<0>(result[j + 1])) {\n                if (std::get<1>(result[j]) < std::get<1>(result[j + 1])) {\n                    std::swap(result[j], result[j + 1]);\n                }\n            }\n        }\n    }\n    return result;",
        "grade-6": {
            "execution": 1
        },
        "190": "std::vector<std::tuple<long, long>> result;\n    if (lst.empty()) {\n        return result;\n    }\n    std::vector<std::vector<std::tuple<long, long>>> sorted_rows;\n    std::vector<std::tuple<long, long>> temp;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n                temp.push_back(std::make_tuple(i, j));\n            }\n        }\n        sorted_rows.push_back(temp);\n        temp.clear();\n    }\n    for (int i = 0; i < sorted_rows.size(); i++) {\n        std::sort(sorted_rows[i].begin(), sorted_rows[i].end(), [](std::tuple<long, long> const &a, std::tuple<long, long> const &b) {\n            return std::get<1>(a) > std::get<1>(b);\n        });\n    }\n    std::sort(sorted_rows.begin(), sorted_rows.end(), [](std::vector<std::tuple<long, long>> const &a, std::vector<std::tuple<long, long>> const &b) {\n        return std::get<0>(a[0]) < std::get<0>(b[0]);\n    });\n    for (int i = 0; i < sorted_rows.size(); i++) {\n        for (int j = 0; j < sorted_rows[i].size(); j++) {\n            result.push_back(sorted_rows[i][j]);\n        }\n    }\n    return result;",
        "grade-190": {
            "execution": 0
        },
        "70": "std::vector<std::tuple<long, long>> result;\n\tlong numRows = lst.size();\n\tfor (long i = 0; i < numRows; i++) {\n\t\tlong numColumns = lst[i].size();\n\t\tfor (long j = 0; j < numColumns; j++) {\n\t\t\tif (lst[i][j] == x) {\n\t\t\t\tstd::tuple<long, long> temp(i, j);\n\t\t\t\tresult.push_back(temp);\n\t\t\t}\n\t\t}\n\t}\n\tsort(result.begin(), result.end());\n\tfor (long i = 0; i < result.size(); i++) {\n\t\tstd::cout << std::get<0>(result[i]) << \" \" << std::get<1>(result[i]) << std::endl;\n\t}\n\treturn result;",
        "grade-70": {
            "execution": 0
        },
        "62": "std::vector<std::tuple<long, long>> res;\n\tfor (long i = 0; i < lst.size(); i++) {\n\t\tfor (long j = 0; j < lst[i].size(); j++) {\n\t\t\tif (lst[i][j] == x) {\n\t\t\t\tres.push_back(std::make_tuple(i, j));\n\t\t\t}\n\t\t}\n\t}\n\tstd::sort(res.begin(), res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long> &b) {\n\t\treturn std::get<0>(a) < std::get<0>(b);\n\t});\n\tstd::sort(res.begin(), res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long> &b) {\n\t\treturn std::get<0>(a) == std::get<0>(b) ? std::get<1>(a) > std::get<1>(b) : true;\n\t});\n\treturn res;",
        "grade-62": {
            "execution": 0
        },
        "57": "std::vector<std::tuple<long, long>> row;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n                row.push_back(std::make_tuple(i, j));\n            }\n        }\n    }\n    sort(row.begin(), row.end());\n    for (int i = 0; i < row.size(); i++) {\n        for (int j = i; j < row.size(); j++) {\n            if (std::get<0>(row[i]) == std::get<0>(row[j])) {\n                if (std::get<1>(row[i]) < std::get<1>(row[j])) {\n                    std::swap(row[i], row[j]);\n                }\n            }\n        }\n    }\n    return row;",
        "grade-57": {
            "execution": 1
        },
        "35": "std::vector<std::tuple<long, long>> result;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n                result.push_back(std::make_tuple(i, j));\n            }\n        }\n    }\n    std::sort(result.begin(), result.end(), [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(result.begin(), result.end(), [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n        return std::get<1>(a) > std::get<1>(b);\n    });\n    return result;",
        "grade-35": {
            "execution": 0
        },
        "189": "std::vector<std::tuple<long, long>> res;\n    long row = 0;\n    for (auto &a : lst) {\n        long col = 0;\n        for (auto &b : a) {\n            if (b == x) {\n                res.push_back(std::make_tuple(row, col));\n            }\n            col++;\n        }\n        row++;\n    }\n    std::sort(res.begin(), res.end(), [](auto &a, auto &b) {\n        if (std::get<0>(a) == std::get<0>(b)) {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    return res;",
        "grade-189": {
            "execution": 1
        },
        "26": "std::vector<std::tuple<long, long>> result;\n  for (auto i = 0; i < lst.size(); i++) {\n    for (auto j = 0; j < lst[i].size(); j++) {\n      if (lst[i][j] == x)\n        result.push_back(std::make_tuple(i, j));\n    }\n  }\n  std::sort(result.begin(), result.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n    if (std::get<0>(a) == std::get<0>(b)) {\n      return std::get<1>(a) > std::get<1>(b);\n    }\n    return std::get<0>(a) < std::get<0>(b);\n  });\n  return result;",
        "grade-26": {
            "execution": 1
        },
        "174": "std::vector<std::tuple<long, long>> ret{};\n    int row = 0;\n    std::for_each(lst.begin(), lst.end(), [&](auto v) {\n        long i = 0;\n        std::vector<long> indexes{};\n        for (auto j : v) {\n            if (j == x) {\n                indexes.push_back(i);\n            }\n            i++;\n        }\n        std::for_each(indexes.begin(), indexes.end(), [&](auto index) {\n            ret.push_back(std::make_tuple(row, index));\n        });\n        row++;\n    });\n    std::sort(ret.begin(), ret.end(), [](auto lhs, auto rhs) {\n        if (std::get<0>(lhs) != std::get<0>(rhs)) {\n            return std::get<0>(lhs) < std::get<0>(rhs);\n        } else {\n            return std::get<1>(lhs) > std::get<1>(rhs);\n        }\n    });\n    return ret;",
        "grade-174": {
            "execution": 1
        },
        "140": "std::vector<std::tuple<long, long>> tuple_list;\n\tfor (long i = 0; i < lst.size(); i++) {\n\t\tfor (long j = 0; j < lst[i].size(); j++) {\n\t\t\tif (lst[i][j] == x) {\n\t\t\t\ttuple_list.push_back(std::make_tuple(i, j));\n\t\t\t}\n\t\t}\n\t}\n\tsort(tuple_list.begin(), tuple_list.end());\n\treturn tuple_list;",
        "grade-140": {
            "execution": 0
        },
        "22": "std::vector<std::tuple<long, long>> sorted_lst;\n\tstd::vector<std::tuple<long, long>> result;\n\tfor (long i = 0; i < lst.size(); i++) {\n\t\tfor (long j = 0; j < lst[i].size(); j++) {\n\t\t\tif (lst[i][j] == x) {\n\t\t\t\tsorted_lst.push_back(std::make_tuple(i, j));\n\t\t\t}\n\t\t}\n\t}\n\tsort(sorted_lst.begin(), sorted_lst.end());\n\tfor (long i = 0; i < sorted_lst.size(); i++) {\n\t\tif (std::get<0>(sorted_lst[i]) == std::get<0>(sorted_lst[i - 1])) {\n\t\t\tresult.push_back(sorted_lst[i]);\n\t\t}\n\t}\n\tfor (long i = 0; i < result.size(); i++) {\n\t\tfor (long j = 0; j < result.size() - 1; j++) {\n\t\t\tif (std::get<1>(result[j]) < std::get<1>(result[j + 1])) {\n\t\t\t\tstd::tuple<long, long> temp = result[j];\n\t\t\t\tresult[j] = result[j + 1];\n\t\t\t\tresult[j + 1] = temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;",
        "grade-22": {
            "execution": 0
        },
        "152": "std::vector<std::tuple<long, long>> result;\n    std::vector<std::tuple<long, long>> result_v;\n    std::tuple<long, long> add_tuple;\n    if (lst.size() == 0)\n        return result;\n    // read row by row\n    for (size_t i = 0; i < lst.size(); i++) {\n        // read by col\n        for (size_t j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n                std::get<0>(add_tuple) = i;\n                std::get<1>(add_tuple) = j;\n                result.push_back(add_tuple);\n            }\n        }\n    }\n    // Sort result in descending order, compare by row first, then by col\n    std::sort(result.begin(), result.end(),\n              [](const std::tuple<long, long> &a, const std::tuple<long, long> &b) {\n                  return (std::get<0>(a) < std::get<0>(b) ||\n                          (std::get<0>(a) == std::get<0>(b) && std::get<1>(a) > std::get<1>(b)));\n              });\n    return result;",
        "grade-152": {
            "execution": 1
        },
        "109": "std::vector<std::tuple<long, long>> res;\n  for (long i = 0; i < lst.size(); i++) {\n    for (long j = 0; j < lst[i].size(); j++) {\n      if (lst[i][j] == x) {\n        res.push_back(std::make_tuple(i, j));\n      }\n    }\n  }\n  std::sort(res.begin(), res.end(), [](auto const &a, auto const &b) {\n    if (std::get<0>(a) == std::get<0>(b)) {\n      return std::get<1>(a) > std::get<1>(b);\n    }\n    return std::get<0>(a) < std::get<0>(b);\n  });\n  return res;",
        "grade-109": {
            "execution": 1
        },
        "8": "std::vector<std::tuple<long, long>> ans;\n\tfor (long i = 0; i < lst.size(); i++) {\n\t\tfor (long j = 0; j < lst[i].size(); j++) {\n\t\t\tif (lst[i][j] == x) {\n\t\t\t\tans.push_back(std::make_tuple(i, j));\n\t\t\t}\n\t\t}\n\t}\n\tstd::sort(ans.begin(), ans.end(), [](std::tuple<long, long> const & a, std::tuple<long, long> const & b) {\n\t\tif (std::get<0>(a) == std::get<0>(b)) {\n\t\t\treturn std::get<1>(a) > std::get<1>(b);\n\t\t}\n\t\treturn std::get<0>(a) < std::get<0>(b);\n\t});\n\treturn ans;",
        "grade-8": {
            "execution": 1
        },
        "7": "std::vector<std::tuple<long, long>> result;\n  for (long i = 0; i < lst.size(); i++) {\n    auto it = std::find(lst[i].begin(), lst[i].end(), x);\n    if (it != lst[i].end()) {\n      result.push_back(std::make_tuple(i, std::distance(lst[i].begin(), it)));\n    }\n  }\n  // sort row in ascending order\n  std::sort(result.begin(), result.end(),\n            [](std::tuple<long, long> a, std::tuple<long, long> b) {\n    return std::get<0>(a) < std::get<0>(b);\n  });\n  // sort column in descending order\n  std::sort(result.begin(), result.end(),\n            [](std::tuple<long, long> a, std::tuple<long, long> b) {\n    return std::get<0>(a) == std::get<0>(b) && std::get<1>(a) > std::get<1>(b);\n  });\n  return result;",
        "grade-7": {
            "execution": 0
        },
        "23": "std::vector<std::tuple<long, long>> temp;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n                temp.push_back(std::make_tuple(i, j));\n            }\n        }\n    }\n    std::sort(temp.begin(), temp.end());\n    return temp;",
        "grade-23": {
            "execution": 0
        },
        "55": "std::vector<std::tuple<long, long>> res;\n    long long rlen = lst.size();\n    long long clen;\n    for (long long i = 0; i < rlen; i++) {\n        clen = lst[i].size();\n        for (long long j = 0; j < clen; j++) {\n            if (lst[i][j] == x) {\n                res.push_back(std::make_tuple(i, j));\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](std::tuple<long, long> t1, std::tuple<long, long> t2) {\n        return std::get<0>(t1) < std::get<0>(t2);\n    });\n    std::sort(res.begin(), res.end(), [](std::tuple<long, long> t1, std::tuple<long, long> t2) {\n        return std::get<1>(t1) > std::get<1>(t2);\n    });\n    return res;",
        "grade-55": {
            "execution": 0
        },
        "59": "std::vector<std::tuple<long, long>> answer;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tfor (int j = 0; j < lst[i].size(); j++) {\n\t\t\tif (lst[i][j] == x)\n\t\t\t\tanswer.push_back(std::make_tuple(i, j));\n\t\t}\n\t}\n\tstd::sort(answer.begin(), answer.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n\t\treturn std::get<0>(a) < std::get<0>(b);\n\t});\n\tstd::sort(answer.begin(), answer.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n\t\treturn std::get<1>(a) > std::get<1>(b);\n\t});\n\treturn answer;",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n",
        "snippet": [
            "    sort(l.begin(),l.end());\n    if (l.size()%2==1) return l[l.size()/2];\n    return 0.5*(l[l.size()/2]+l[l.size()/2-1]);\n}\n"
        ],
        "simplified": "Return median of elements in the list l.",
        "task_id": "47",
        "168": "// Your code here.\n  if(l.size() == 0)\n    return 0;\n  if(l.size()%2 == 0)\n  {\n    return ((float)(l[l.size()/2-1] + l[l.size()/2])/2);\n  }\n  else\n  {\n    return (float)l[l.size()/2];\n  }",
        "grade-168": {
            "execution": 0
        },
        "28": "assert(false);\n    return 0.0;",
        "grade-28": {
            "execution": 0
        },
        "6": "if (l.size() % 2 == 0) {\n\t\treturn (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n\t}\n\telse {\n\t\treturn l[l.size() / 2];\n\t}",
        "grade-6": {
            "execution": 0
        },
        "194": "// TODO: Implement me\n  if(l.size()%2==0)\n  {\n    float m=(l[l.size()/2]+l[l.size()/2-1])/2.0;\n    return m;\n  }\n  else\n  {\n    float m=l[l.size()/2];\n    return m;\n  }",
        "grade-194": {
            "execution": 0
        },
        "70": "assert(l.size() > 0);\n    auto l1 = l;\n    auto l2 = l;\n    auto l3 = l;\n    auto l4 = l;\n    auto l5 = l;\n    auto l6 = l;\n    auto l7 = l;\n    auto l8 = l;\n    auto l9 = l;\n    auto l10 = l;\n    auto l11 = l;\n    auto l12 = l;\n    auto l13 = l;\n    auto l14 = l;\n    auto l15 = l;\n    auto l16 = l;\n    auto l17 = l;\n    auto l18 = l;\n    auto l19 = l;\n    auto l20 = l;\n    auto l21 = l;\n    auto l22 = l;\n    auto l23 = l;\n    auto l24 = l;\n    auto l25 = l;\n    auto l26 = l;\n    auto l27 = l;\n    auto l28 = l;\n    auto l29 = l;\n    auto l30 = l;\n    auto l31 = l;\n    auto l32 = l;\n    auto l33 = l;\n    auto l34 = l;\n    auto l35 = l;\n    auto l36 = l;\n    auto l37 = l;\n    auto l38 = l;\n    auto l39 = l;\n    auto l40 = l;\n    auto l41 = l;\n    auto l42 = l;\n    auto l43 = l;\n    auto l44 = l;\n    auto l45 = l;\n    auto l46 = l;\n    auto l47 = l;\n    auto l48 = l;\n    auto l49 = l;\n    auto l50 = l;\n    auto l51 = l;\n    auto l52 = l;\n    auto l53 = l;\n    auto l54 = l;\n    auto l55 = l;\n    auto l56 = l;\n    auto l57 = l;\n    auto l58 = l;\n    auto l59 = l;\n    auto l60 = l;\n    auto l61 = l;\n    auto l62 = l;\n    auto l63",
        "grade-70": {
            "execution": 0
        },
        "62": "// Write your solution here\n  long count = l.size();\n  sort(l.begin(), l.end());\n  if (count % 2 == 0)\n  {\n    return (l[count / 2] + l[count / 2 - 1]) / 2.0;\n  }\n  else\n  {\n    return l[count / 2];\n  }",
        "grade-62": {
            "execution": 1
        },
        "57": "int n = l.size();\n\tif (n % 2 == 0) {\n\t\t//n is even\n\t\tn = n / 2;\n\t\treturn (l[n - 1] + l[n]) / 2.0;\n\t}\n\telse {\n\t\t//n is odd\n\t\tn = n / 2;\n\t\treturn l[n];\n\t}",
        "grade-57": {
            "execution": 0
        },
        "35": "// your code here\n    std::sort(l.begin(),l.end());\n    int size=l.size();\n    if(size%2==0)\n    {\n        return (l[size/2-1]+l[size/2])/2.0;\n    }\n    else\n    {\n        return l[size/2];\n    }",
        "grade-35": {
            "execution": 1
        },
        "193": "assert(l.size() > 0);\n    assert(l.size() % 2 == 1);\n    assert(l.size() < 1001);\n    sort(l.begin(), l.end());\n    return l[l.size() / 2];",
        "grade-193": {
            "execution": 0
        },
        "26": "// WRITE YOUR CODE HERE\n  int n = l.size();\n  if(n % 2 == 0)\n  {\n    return (l[n/2] + l[n/2 - 1])/2.0;\n  }\n  else\n  {\n    return l[n/2];\n  }",
        "grade-26": {
            "execution": 0
        },
        "178": "float med = 0;\n    int n = l.size();\n    std::sort(l.begin(), l.end());\n    if (n%2==0) {\n        med = (l[n/2] + l[n/2 - 1])/2.0;\n    }\n    else {\n        med = l[n/2];\n    }\n    return med;",
        "grade-178": {
            "execution": 1
        },
        "140": "float med = 0;\n    int lsize = l.size();\n    std::sort(l.begin(), l.end());\n    if (lsize%2 != 0) {\n        int index = lsize/2;\n        med = l[index];\n    }\n    else {\n        int index = lsize/2;\n        med = (l[index-1] + l[index])/2.0;\n    }\n    return med;",
        "grade-140": {
            "execution": 1
        },
        "22": "assert(l.size() > 0);\n  std::sort(l.begin(), l.end());\n  if (l.size() % 2 == 0) {\n    return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n  } else {\n    return l[l.size() / 2];\n  }",
        "grade-22": {
            "execution": 1
        },
        "154": "// Replace with your code\n\tint n = l.size();\n\tif (n%2 != 0) {\n\t\treturn l[n/2];\n\t} else {\n\t\tint a = l[n/2];\n\t\tint b = l[(n/2)-1];\n\t\treturn (a+b)/2.0;\n\t}",
        "grade-154": {
            "execution": 0
        },
        "109": "int len = l.size();\n\tstd::sort(l.begin(), l.end());\n\tif (len % 2 == 0) {\n\t\treturn (l[len / 2] + l[len / 2 - 1]) / 2.0;\n\t}\n\telse {\n\t\treturn l[len / 2];\n\t}",
        "grade-109": {
            "execution": 1
        },
        "8": "// Write your code here.\n\tint n = l.size();\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn l[0];\n\tif (n == 2)\n\t\treturn (l[0] + l[1]) / 2.0;\n\tint mid = n / 2;\n\tif (n % 2 == 0)\n\t\treturn (l[mid - 1] + l[mid]) / 2.0;\n\telse\n\t\treturn l[mid];",
        "grade-8": {
            "execution": 0
        },
        "7": "int n = l.size();\n  sort(l.begin(), l.end());\n  if (n % 2 != 0) {\n    return (float)l[n / 2];\n  }\n  else {\n    return (float)(l[(n - 1) / 2] + l[n / 2]) / 2.0;\n  }",
        "grade-7": {
            "execution": 1
        },
        "23": "// Write your code here\n    int n = l.size();\n    sort(l.begin(), l.end());\n    if(n%2!=0)\n    {\n        return l[n/2];\n    }\n    else\n    {\n        return (l[n/2]+l[(n/2)-1])/2.0;\n    }",
        "grade-23": {
            "execution": 1
        },
        "55": "long n = l.size();\n    std::vector<long> minHeap;\n    std::vector<long> maxHeap;\n    maxHeap.push_back(l[0]);\n    if(n == 1)\n        return l[0];\n    for(long i = 1; i < n; i++) {\n        if(l[i] <= maxHeap[0]) {\n            maxHeap.push_back(l[i]);\n            std::push_heap(maxHeap.begin(), maxHeap.end(), std::greater<long>());\n        }\n        else {\n            minHeap.push_back(l[i]);\n            std::push_heap(minHeap.begin(), minHeap.end());\n        }\n        if(maxHeap.size() > minHeap.size() + 1) {\n            std::pop_heap(maxHeap.begin(), maxHeap.end(), std::greater<long>());\n            minHeap.push_back(maxHeap.back());\n            std::push_heap(minHeap.begin(), minHeap.end());\n            maxHeap.pop_back();\n        }\n        else if(minHeap.size() > maxHeap.size()) {\n            std::pop_heap(minHeap.begin(), minHeap.end());\n            maxHeap.push_back(minHeap.back());\n            std::push_heap(maxHeap.begin(), maxHeap.end(), std::greater<long>());\n            minHeap.pop_back();\n        }\n    }\n    if(maxHeap.size() == minHeap.size())\n        return (maxHeap[0] + minHeap[0]) / 2.0;\n    else\n        return maxHeap[0];",
        "grade-55": {
            "execution": 0
        },
        "59": "// >>> median([10, 20, 30, 40, 50])\n// 30\n// >>> median([0.5, 1.0, 2.0, 3.0, 4.0])\n// 2.5\n// >>> median([0.5, 1.0, 2.0, 3.0, 4.0, 5.0])\n// 2.5\nint n = l.size();\nstd::sort(l.begin(), l.end());\nif (n%2 == 0) {\nfloat m1 = l[n/2-1];\nfloat m2 = l[n/2];\nfloat m = (m1+m2)/2;\nreturn m;",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers) {\n",
        "snippet": [
            "    map<string,int> tonum={{\"zero\",0},{\"one\",1},{\"two\",2},{\"three\",3},{\"four\",4},{\"five\",5},{\"six\",6},{\"seven\",7},{\"eight\",8},{\"nine\",9}};\n    map<int,string> numto={{0,\"zero\"},{1,\"one\"},{2,\"two\"},{3,\"three\"},{4,\"four\"},{5,\"five\"},{6,\"six\"},{7,\"seven\"},{8,\"eight\"},{9,\"nine\"}};\n    int count[10];\n    for (int i=0;i<10;i++)\n        count[i]=0;\n    string out=\"\",current=\"\";\n    if (numbers.length()>0) numbers=numbers+' ';\n    for (int i=0;i<numbers.length();i++)\n        if (numbers[i]==' ')\n        {\n            count[tonum[current]]+=1;\n            current=\"\";\n        }\n        else current+=numbers[i];\n    for (int i=0;i<10;i++)\n        for (int j=0;j<count[i];j++)\n            out=out+numto[i]+' ';\n    if (out.length()>0) out.pop_back();\n    return out;\n}\n"
        ],
        "simplified": "Input is a space-delimited string of numberals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Return the string with numbers sorted from smallest to largest",
        "task_id": "19",
        "163": "std::stringstream ss(numbers);\n\tstd::vector<int> nums;\n\tint c;\n\twhile (ss >> c)\n\t\tnums.push_back(c);\n\tstd::sort(nums.begin(), nums.end());\n\tstd::stringstream ss2;\n\tfor (int c : nums)\n\t\tss2 << c << \" \";\n\treturn ss2.str();",
        "grade-163": {
            "execution": 0
        },
        "28": "//your code here\n  std::vector<int> nums;\n  std::map<std::string, int> strings;\n  std::istringstream iss(numbers);\n  std::string word;\n  while(iss >> word)\n  {\n    strings[word]++;\n  }\n  std::map<std::string, int>::iterator it;\n  for(it = strings.begin(); it != strings.end(); it++)\n  {\n    if(it->first == \"zero\")\n    {\n      nums.push_back(0);\n    }\n    else if(it->first == \"one\")\n    {\n      nums.push_back(1);\n    }\n    else if(it->first == \"two\")\n    {\n      nums.push_back(2);\n    }\n    else if(it->first == \"three\")\n    {\n      nums.push_back(3);\n    }\n    else if(it->first == \"four\")\n    {\n      nums.push_back(4);\n    }\n    else if(it->first == \"five\")\n    {\n      nums.push_back(5);\n    }\n    else if(it->first == \"six\")\n    {\n      nums.push_back(6);\n    }\n    else if(it->first == \"seven\")\n    {\n      nums.push_back(7);\n    }\n    else if(it->first == \"eight\")\n    {\n      nums.push_back(8);\n    }\n    else if(it->first == \"nine\")\n    {\n      nums.push_back(9);\n    }\n  }\n  std::sort(nums.begin(), nums.end());\n  std::stringstream ss;\n  std::string result;\n  for(int i = 0; i < nums.size(); i++)\n  {\n    switch(nums[i])\n    {\n      case 0:\n        ss << \"zero\";\n        break;\n      case 1:\n        ss << \"one\";\n        break;\n      case 2:\n        ss << \"two\";\n        break;",
        "grade-28": {
            "execution": 0
        },
        "6": "std::vector<int> nums;\n    std::string numeral;\n    std::istringstream iss(numbers);\n    while (iss >> numeral) {\n        if (numeral == \"zero\") nums.push_back(0);\n        else if (numeral == \"one\") nums.push_back(1);\n        else if (numeral == \"two\") nums.push_back(2);\n        else if (numeral == \"three\") nums.push_back(3);\n        else if (numeral == \"four\") nums.push_back(4);\n        else if (numeral == \"five\") nums.push_back(5);\n        else if (numeral == \"six\") nums.push_back(6);\n        else if (numeral == \"seven\") nums.push_back(7);\n        else if (numeral == \"eight\") nums.push_back(8);\n        else if (numeral == \"nine\") nums.push_back(9);\n    }\n    std::sort(nums.begin(), nums.end());\n    std::string result;\n    for (auto it : nums) {\n        switch (it) {\n            case 0:\n                result += \"zero \";\n                break;\n            case 1:\n                result += \"one \";\n                break;\n            case 2:\n                result += \"two \";\n                break;\n            case 3:\n                result += \"three \";\n                break;\n            case 4:\n                result += \"four \";\n                break;\n            case 5:\n                result += \"five \";\n                break;\n            case 6:\n                result += \"six \";\n                break;\n            case 7:\n                result += \"seven \";\n                break;\n            case 8:\n                result += \"eight \";\n                break;\n            case 9:\n                result += \"nine \";\n                break;\n        }\n    }\n    return result.substr(0, result.size() - 1);",
        "grade-6": {
            "execution": 1
        },
        "189": "// Your code here\n  std::istringstream ss(numbers);\n  std::string word;\n  std::vector<int> v;\n  while(ss >> word) {\n    if(word == \"zero\") v.push_back(0);\n    else if(word == \"one\") v.push_back(1);\n    else if(word == \"two\") v.push_back(2);\n    else if(word == \"three\") v.push_back(3);\n    else if(word == \"four\") v.push_back(4);\n    else if(word == \"five\") v.push_back(5);\n    else if(word == \"six\") v.push_back(6);\n    else if(word == \"seven\") v.push_back(7);\n    else if(word == \"eight\") v.push_back(8);\n    else if(word == \"nine\") v.push_back(9);\n  }\n  std::sort(v.begin(), v.end());\n  std::string ans = \"\";\n  for(auto x : v) {\n    if(x == 0) ans += \"zero \";\n    else if(x == 1) ans += \"one \";\n    else if(x == 2) ans += \"two \";\n    else if(x == 3) ans += \"three \";\n    else if(x == 4) ans += \"four \";\n    else if(x == 5) ans += \"five \";\n    else if(x == 6) ans += \"six \";\n    else if(x == 7) ans += \"seven \";\n    else if(x == 8) ans += \"eight \";\n    else if(x == 9) ans += \"nine \";\n  }\n  ans.pop_back();\n  return ans;",
        "grade-189": {
            "execution": 0
        },
        "70": "int count = 0;\n\tchar buffer[numbers.length()];\n\tfor (int i = 0; i < numbers.length(); i++) {\n\t\tif (numbers[i] == ' ') {\n\t\t\tcount++;\n\t\t}\n\t}\n\tstd::vector<std::string> elements;\n\tfor (int i = 0; i < count + 1; i++) {\n\t\tstd::string str = \"\";\n\t\tfor (int j = 0; j < numbers.length(); j++) {\n\t\t\tif (numbers[j] == ' ') {\n\t\t\t\telements.push_back(str);\n\t\t\t\tstr = \"\";\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstr += numbers[j];\n\t\t\t}\n\t\t}\n\t\telements.push_back(str);\n\t}\n\tfor (int i = 0; i < elements.size(); i++) {\n\t\telements[i] = getNumber(elements[i]);\n\t}\n\tsort(elements.begin(), elements.end());\n\tfor (int i = 0; i < elements.size(); i++) {\n\t\telements[i] = getWord(elements[i]);\n\t}\n\tfor (int i = 0; i < elements.size(); i++) {\n\t\tif (i == elements.size() - 1) {\n\t\t\tnumbers = numbers + elements[i];\n\t\t}\n\t\telse {\n\t\t\tnumbers = numbers + elements[i] + \" \";\n\t\t}\n\t}\n\treturn numbers;",
        "grade-70": {
            "execution": 0
        },
        "62": "std::string map[10] = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string word;\n    while (ss >> word) {\n        for (int i = 0; i < 10; i++) {\n            if (word == map[i]) {\n                nums.push_back(i);\n                break;\n            }\n        }\n    }\n    std::sort(nums.begin(), nums.end());\n    std::string ans = \"\";\n    for (int i = 0; i < nums.size(); i++) {\n        ans += map[nums[i]] + \" \";\n    }\n    return ans.substr(0, ans.size() - 1);",
        "grade-62": {
            "execution": 1
        },
        "57": "if (numbers.empty()) return \"\";\n    std::map<std::string, int> myMap = {\n        {\"zero\", 0},\n        {\"one\", 1},\n        {\"two\", 2},\n        {\"three\", 3},\n        {\"four\", 4},\n        {\"five\", 5},\n        {\"six\", 6},\n        {\"seven\", 7},\n        {\"eight\", 8},\n        {\"nine\", 9}\n    };\n    std::vector<int> allValues;\n    std::stringstream ss(numbers);\n    std::string token;\n    while (ss >> token) {\n        allValues.push_back(myMap[token]);\n    }\n    std::sort(allValues.begin(), allValues.end());\n    std::vector<std::string> allStrings;\n    for (auto itr = allValues.begin(); itr != allValues.end(); ++itr) {\n        allStrings.push_back(myMap.find(*itr)->first);\n    }\n    std::string result = \"\";\n    for (auto itr = allStrings.begin(); itr != allStrings.end(); ++itr) {\n        result += *itr + \" \";\n    }\n    return result.substr(0, result.size() - 1);",
        "grade-57": {
            "execution": 0
        },
        "35": "std::vector<int> numbers_vec;\n    std::stringstream number_string(numbers);\n    std::string number;\n    while (std::getline(number_string, number, ' ')) {\n        numbers_vec.push_back(std::stoi(number));\n    }\n    std::sort(numbers_vec.begin(), numbers_vec.end());\n    std::stringstream sorted_numbers;\n    for (int i = 0; i < numbers_vec.size(); i++) {\n        sorted_numbers << numbers_vec[i] << \" \";\n    }\n    return sorted_numbers.str();",
        "grade-35": {
            "execution": 0
        },
        "188": "assert(numbers != \"\");\n\tstd::vector<std::string> nums;\n\tstd::stringstream ss(numbers);\n\tstd::string temp;\n\twhile (ss >> temp)\n\t\tnums.push_back(temp);\n\tstd::sort(nums.begin(), nums.end());\n\tstd::string result = \"\";\n\tfor (int i = 0; i < nums.size(); i++) {\n\t\tresult += nums[i];\n\t\tif (i < nums.size() - 1)\n\t\t\tresult += \" \";\n\t}\n\treturn result;",
        "grade-188": {
            "execution": 0
        },
        "26": "std::vector<std::string> num_list;\n    std::istringstream iss(numbers);\n    std::string word;\n    while (iss >> word)\n        num_list.push_back(word);\n    std::sort(num_list.begin(), num_list.end());\n    std::stringstream ss;\n    for (int i = 0; i < num_list.size(); i++) {\n        ss << num_list[i] << \" \";\n    }\n    return ss.str();",
        "grade-26": {
            "execution": 0
        },
        "173": "std::stringstream ss(numbers);\n    std::string num,res;\n    int val[10];\n    while(ss>>num){\n        if(num == \"zero\") val[0]++;\n        else if(num == \"one\") val[1]++;\n        else if(num == \"two\") val[2]++;\n        else if(num == \"three\") val[3]++;\n        else if(num == \"four\") val[4]++;\n        else if(num == \"five\") val[5]++;\n        else if(num == \"six\") val[6]++;\n        else if(num == \"seven\") val[7]++;\n        else if(num == \"eight\") val[8]++;\n        else if(num == \"nine\") val[9]++;\n    }\n    for(int i=0;i<10;i++){\n        while(val[i]!=0){\n            if(i==0) res+=\"zero \";\n            else if(i==1) res+=\"one \";\n            else if(i==2) res+=\"two \";\n            else if(i==3) res+=\"three \";\n            else if(i==4) res+=\"four \";\n            else if(i==5) res+=\"five \";\n            else if(i==6) res+=\"six \";\n            else if(i==7) res+=\"seven \";\n            else if(i==8) res+=\"eight \";\n            else if(i==9) res+=\"nine \";\n            val[i]--;\n        }\n    }\n    return res;",
        "grade-173": {
            "execution": 0
        },
        "139": "std::vector<std::string> words;\n\tint n = 0;\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\tif (numbers[i] == ' ') {\n\t\t\twords.push_back(numbers.substr(n, i - n));\n\t\t\tn = i + 1;\n\t\t}\n\t}\n\twords.push_back(numbers.substr(n, numbers.size() - n));\n\tstd::sort(words.begin(), words.end());\n\tstd::string ret = \"\";\n\tfor (int i = 0; i < words.size(); i++) {\n\t\tret += words[i];\n\t\tif (i != words.size() - 1) {\n\t\t\tret += \" \";\n\t\t}\n\t}\n\treturn ret;",
        "grade-139": {
            "execution": 0
        },
        "22": "if (numbers.size() == 0) return numbers;\n  std::unordered_map<std::string, int> map;\n  map[\"zero\"] = 0;\n  map[\"one\"] = 1;\n  map[\"two\"] = 2;\n  map[\"three\"] = 3;\n  map[\"four\"] = 4;\n  map[\"five\"] = 5;\n  map[\"six\"] = 6;\n  map[\"seven\"] = 7;\n  map[\"eight\"] = 8;\n  map[\"nine\"] = 9;\n  std::vector<int> nums;\n  std::stringstream ss(numbers);\n  std::string number;\n  while (std::getline(ss, number, ' ')) {\n    nums.push_back(map[number]);\n  }\n  std::sort(nums.begin(), nums.end());\n  std::string result;\n  std::unordered_map<int, std::string> rev_map;\n  rev_map[0] = \"zero\";\n  rev_map[1] = \"one\";\n  rev_map[2] = \"two\";\n  rev_map[3] = \"three\";\n  rev_map[4] = \"four\";\n  rev_map[5] = \"five\";\n  rev_map[6] = \"six\";\n  rev_map[7] = \"seven\";\n  rev_map[8] = \"eight\";\n  rev_map[9] = \"nine\";\n  for (auto i : nums) {\n    result += rev_map[i] + \" \";\n  }\n  result.pop_back();\n  return result;",
        "grade-22": {
            "execution": 1
        },
        "151": "return numbers;",
        "grade-151": {
            "execution": 0
        },
        "108": "std::vector<std::string> split = numbers.split();\n    std::sort(split.begin(), split.end());\n    return split.join();",
        "grade-108": {
            "execution": 0
        },
        "8": "std::string words[] = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n  std::vector<int> nums;\n  std::stringstream ss(numbers);\n  std::string word;\n  while (ss >> word) {\n    for (int i = 0; i < 10; i++) {\n      if (word == words[i]) {\n        nums.push_back(i);\n        break;\n      }\n    }\n  }\n  std::sort(nums.begin(), nums.end());\n  std::string ans = \"\";\n  for (int i = 0; i < nums.size(); i++) {\n    ans += words[nums[i]] + \" \";\n  }\n  ans.pop_back();\n  return ans;",
        "grade-8": {
            "execution": 0
        },
        "7": "std::vector<int> vec;\n    std::stringstream ss(numbers);\n    int x;\n    while(ss >> x) {\n        vec.push_back(x);\n    }\n    std::sort(vec.begin(), vec.end());\n    std::string ret;\n    for(int&i : vec) {\n        ret += std::to_string(i) + \" \";\n    }\n    return ret;",
        "grade-7": {
            "execution": 0
        },
        "23": "std::vector<std::string> nums;\n    std::istringstream ss(numbers);\n    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        nums.push_back(token);\n    }\n    std::map<std::string, int> m = {{\"zero\", 0}, {\"one\", 1}, {\"two\", 2}, {\"three\", 3}, {\"four\", 4}, {\"five\", 5}, {\"six\", 6}, {\"seven\", 7}, {\"eight\", 8}, {\"nine\", 9}};\n    std::sort(nums.begin(), nums.end(), [&m](std::string& a, std::string& b) {return m[a] < m[b];});\n    std::string ans;\n    for (auto& s : nums) {\n        ans += (s + \" \");\n    }\n    ans.pop_back();\n    return ans;",
        "grade-23": {
            "execution": 0
        },
        "55": "std::map<std::string, int> numeric_values = {\n    {\"zero\", 0},\n    {\"one\", 1},\n    {\"two\", 2},\n    {\"three\", 3},\n    {\"four\", 4},\n    {\"five\", 5},\n    {\"six\", 6},\n    {\"seven\", 7},\n    {\"eight\", 8},\n    {\"nine\", 9}\n  };\n  // split numbers into a vector of strings\n  std::vector<std::string> unsorted_numbers;\n  std::stringstream ss(numbers);\n  std::string numeral;\n  while (ss >> numeral) {\n    unsorted_numbers.push_back(numeral);\n  }\n  // convert vector of numeral strings to vector of ints\n  std::vector<int> numbers_to_sort;\n  for (int i = 0; i < unsorted_numbers.size(); i++) {\n    numbers_to_sort.push_back(numeric_values[unsorted_numbers[i]]);\n  }\n  // sort the vector of ints\n  std::sort(numbers_to_sort.begin(), numbers_to_sort.end());\n  // convert the vector of ints back to a vector of numeral strings\n  for (int i = 0; i < numbers_to_sort.size(); i++) {\n    for (std::map<std::string, int>::iterator it = numeric_values.begin(); it != numeric_values.end(); it++) {\n      if (it->second == numbers_to_sort[i]) {\n        unsorted_numbers[i] = it->first;\n      }\n    }\n  }\n  // create the output string\n  std::string output;\n  for (int i = 0; i < unsorted_numbers.size(); i++) {\n    output += unsorted_numbers[i];\n    if (i < unsorted_numbers.size() - 1) {\n      output += \" \";\n    }\n  }\n  return output;",
        "grade-55": {
            "execution": 1
        },
        "59": "std::string sorted;\n    int j = 0;\n    std::string numbers_copy = numbers;\n    while (j < numbers.length()) {\n        int min_value = -1;\n        int min_index = 0;\n        int k = 0;\n        while (k < numbers_copy.length()) {\n            if (numbers_copy[k] == ' ') {\n                k++;\n                continue;\n            }\n            int current_value = numberal_to_integer(numbers_copy.substr(k, std::string::npos));\n            if (min_value == -1 || current_value < min_value) {\n                min_value = current_value;\n                min_index = k;\n            }\n            k += numberal_to_string(current_value).length();\n        }\n        if (j != 0) {\n            sorted += \" \";\n        }\n        sorted += numberal_to_string(min_value);\n        numbers_copy = numbers_copy.replace(min_index, numberal_to_string(min_value).length(), \"     \");\n        j += numberal_to_string(min_value).length() + 1;\n    }\n    return sorted;",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>> grid, long capacity) {\n",
        "snippet": [
            "    int out=0;\n    for (int i=0;i<grid.size();i++)\n    {\n        int sum=0;\n        for (int j=0;j<grid[i].size();j++)\n            sum+=grid[i][j];\n        if (sum>0)  out+=(sum-1)/capacity+1;\n    }\n    return out;\n}\n"
        ],
        "simplified": "You are given a rectangular grid of wells. Each row represents a single well, and each 1 in a row represents a single unit of water. Each well has a corresponding bucket that can be used to extract water from it, and all buckets have the same capacity. Your task is to use the buckets to empty the wells. Output the number of times you need to lower the buckets. Constraints: * all wells have the same length * 1 <= grid.length <= 10^2 * 1 <= grid[:,1].length <= 10^2 * grid[i][j] -> 0 | 1 * 1 <= capacity <= 10",
        "task_id": "115",
        "164": "long max_fill = 0;\n    for (size_t i = 0; i < grid.size(); i++) {\n        for (size_t j = 0; j < grid[i].size(); j++) {\n            if (grid[i][j] == 1) {\n                max_fill += capacity;\n            }\n        }\n    }\n    return max_fill;",
        "grade-164": {
            "execution": 0
        },
        "28": "long rows = grid.size();\n    long cols = grid[0].size();\n    long total_fill_count = 0;\n    long max_fill_count = 0;\n    for(long col = 0; col < cols; col++) {\n        long fill_count = 0;\n        for(long row = 0; row < rows; row++) {\n            if(grid[row][col] == 1) {\n                fill_count++;\n            }\n        }\n        max_fill_count = std::max(max_fill_count, fill_count);\n        total_fill_count += fill_count;\n    }\n    long bucket_fill_count = std::min(capacity, max_fill_count);\n    return total_fill_count - bucket_fill_count;",
        "grade-28": {
            "execution": 0
        },
        "6": "// your code goes here\n  long max=0;\n  for(long row=0;row<grid.size();row++){\n      long count=0;\n      for(long column=0;column<grid[row].size();column++){\n          if(grid[row][column]==1){\n              count++;\n          }\n      }\n      if(count>max){\n          max=count;\n      }\n  }\n  return max*capacity;",
        "grade-6": {
            "execution": 0
        },
        "190": "long max_fill = 0;\n    long rows = grid.size();\n    long cols = grid[0].size();\n    for(long row = 0; row < rows; row++) {\n        for(long col = 0; col < cols; col++) {\n            if(grid[row][col] == 1) {\n                max_fill += 1;\n            }\n        }\n    }\n    max_fill *= capacity;\n    return max_fill;",
        "grade-190": {
            "execution": 0
        },
        "70": "long rows = grid.size();\n    long cols = grid[0].size();\n    long heights[rows][cols];\n    for(int i = 0; i < rows; i++) {\n        for(int j = 0; j < cols; j++) {\n            heights[i][j] = 0;\n        }\n    }\n    for(int j = 0; j < cols; j++) {\n        long water = 0;\n        for(int i = 0; i < rows; i++) {\n            if(grid[i][j] == 1) {\n                water++;\n            } else {\n                water = 0;\n            }\n            heights[i][j] = water;\n        }\n    }\n    for(int j = 0; j < cols; j++) {\n        long water = 0;\n        for(int i = rows - 1; i >= 0; i--) {\n            if(grid[i][j] == 1) {\n                water++;\n            } else {\n                water = 0;\n            }\n            heights[i][j] = std::min(heights[i][j], water);\n        }\n    }\n    long max = 0;\n    for(int i = 0; i < rows; i++) {\n        for(int j = 0; j < cols; j++) {\n            if(heights[i][j] > max) {\n                max = heights[i][j];\n            }\n        }\n    }\n    long count = 0;\n    for(int i = 0; i < rows; i++) {\n        for(int j = 0; j < cols; j++) {\n            if(heights[i][j] == max) {\n                count++;\n            }\n        }\n    }\n    return count * capacity;",
        "grade-70": {
            "execution": 0
        },
        "62": "// score: 5.00\n    // time: O(n^2)\n    // space: O(n)\n    int n = grid.size();\n    long ans = 0;\n    std::vector<long> col(n, 0);\n    // loop each row\n    for (int i = 0; i < n; i++) {\n        // calculate how much water is added for each column\n        for (int j = 0; j < n; j++) {\n            col[j] += grid[i][j];\n        }\n        // loop each column to calculate how many times the bucket is lowered\n        for (int j = 0; j < n; j++) {\n            if (col[j] > capacity) {\n                ans += col[j] / capacity;\n                col[j] %= capacity;\n            }\n        }\n    }\n    return ans;",
        "grade-62": {
            "execution": 0
        },
        "57": "long rows = grid.size();\n    long cols = grid[0].size();\n    long i=0,j=0;\n    long ans = 0;\n    long curr_capacity = capacity;\n    std::vector<std::vector<long>> visited(rows, std::vector<long>(cols, 0));\n    while(i<rows && j<cols){\n        if(grid[i][j]==1){\n            ans++;\n            curr_capacity--;\n        }\n        if(curr_capacity<=0){\n            ans++;\n            curr_capacity = capacity;\n        }\n        visited[i][j] = 1;\n        if(j<cols-1 && visited[i][j+1]!=1){\n            j++;\n        }\n        else if(i<rows-1 && visited[i+1][j]!=1){\n            i++;\n        }\n        else if(j>0 && visited[i][j-1]!=1){\n            j--;\n        }\n        else if(i>0 && visited[i-1][j]!=1){\n            i--;\n        }\n        else{\n            break;\n        }\n    }\n    return ans;",
        "grade-57": {
            "execution": 0
        },
        "35": "std::priority_queue<long> cells;\n    // Fill each row with 0\n    for (long row = 0; row < grid.size(); row++) {\n        long count = 0;\n        for (long col = 0; col < grid[row].size(); col++) {\n            if (grid[row][col] == 1) {\n                count++;\n            }\n        }\n        if (count > 0) {\n            cells.push(count);\n        }\n    }\n    long total_fill = 0;\n    while (cells.size() > 0) {\n        long top = cells.top();\n        cells.pop();\n        long fill = std::min(top, capacity);\n        if (fill > 0) {\n            total_fill += fill;\n        }\n        if (top > capacity) {\n            top -= capacity;\n            cells.push(top);\n        }\n    }\n    return total_fill;",
        "grade-35": {
            "execution": 0
        },
        "189": "// create an array with all values set to -1\n    std::vector<long> max_fill(grid[0].size(), -1);\n    // iterate over the input grid\n    for(std::vector<long> row : grid) {\n        // iterate over the wells in the current row\n        for(long i = 0; i < row.size(); i++) {\n            // if the current well is filled, max_fill for the current column\n            // will be the index of the current row.\n            if(row[i] == 1) {\n                max_fill[i] = i;\n            }\n        }\n    }\n    // use a set to keep track of the wells we've visited\n    std::set<long> visited;\n    // use a queue to keep track of the wells we need to visit\n    std::queue<long> unvisited;\n    // add all of the empty wells to the queue\n    for(long i = 0; i < max_fill.size(); i++) {\n        if(max_fill[i] == -1) {\n            unvisited.push(i);\n        }\n    }\n    // while we have more wells to visit\n    while(!unvisited.empty()) {\n        // get the next well to visit\n        long idx = unvisited.front();\n        unvisited.pop();\n        // if we've already visited this well,\n        // we can safely ignore it.\n        if(visited.find(idx) != visited.end()) {\n            continue;\n        }\n        // otherwise, we need to visit it.\n        visited.insert(idx);\n        // add all of the well's neighbors to the queue\n        for(long i = 1; i <= capacity; i++) {\n            if(idx + i < max_fill.size()) {\n                unvisited.push(idx + i);\n            }\n            if(idx - i >= 0) {\n                unvisited.push(idx - i);\n            }\n        }\n        // update the max_fill value for this well\n        // by finding the lowest value of max_fill in its neighbors\n        long fill = -1;\n        for(",
        "grade-189": {
            "execution": 0
        },
        "26": "int n = grid.size();\n    if(n == 0) return 0;\n    int m = grid[0].size();\n    if(m == 0) return 0;\n    long max_water = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < m; j++) {\n            if(grid[i][j] == 1) {\n                max_water += capacity;\n            }\n        }\n    }\n    return max_water;",
        "grade-26": {
            "execution": 0
        },
        "174": "long rows = grid.size();\n    long cols = grid[0].size();\n    std::priority_queue<long> pq;\n    for(long row = 0; row < rows; row++) {\n        for(long col = 0; col < cols; col++) {\n            if(grid[row][col] == 1) {\n                pq.push(col);\n            }\n        }\n    }\n    long total_time = 0;\n    long curr_fill = 0;\n    while(!pq.empty()) {\n        long r_start = -1;\n        long r_end = -1;\n        for(long row = 0; row < rows; row++) {\n            if(r_start == -1 && grid[row][pq.top()] == 1) {\n                r_start = row;\n            }\n            if(r_start != -1 && grid[row][pq.top()] == 1) {\n                r_end = row;\n            }\n        }\n        if(r_start == r_end) {\n            curr_fill += capacity;\n            total_time += 1;\n        } else {\n            long runs = (r_end - r_start) / capacity;\n            long last_run = (r_end - r_start) % capacity;\n            total_time += runs + 1;\n            curr_fill += last_run;\n        }\n        long col = pq.top();\n        pq.pop();\n        for(long row = 0; row < rows; row++) {\n            if(grid[row][col] == 1) {\n                grid[row][col] = 0;\n            }\n        }\n    }\n    return total_time;",
        "grade-174": {
            "execution": 0
        },
        "140": "long times = 0;\n    long wells = grid.size();\n    long well_width = grid[0].size();\n    for(long i = 0; i < wells; i++) {\n        for(long j = 0; j < well_width; j++) {\n            long total_fill = capacity;\n            long depth = grid[i][j];\n            while(total_fill > 0 && depth > 0) {\n                total_fill--;\n                depth--;\n                times++;\n            }\n        }\n    }\n    return times;",
        "grade-140": {
            "execution": 0
        },
        "22": "long max_height = 0;\n    for (auto row : grid) {\n        max_height = std::max(max_height, (long)std::count(row.begin(), row.end(), 1));\n    }\n    return std::min(max_height, capacity);",
        "grade-22": {
            "execution": 0
        },
        "152": "long result = 0;\n    std::vector<long> col_max(grid[0].size(), 0);\n    for (long i = 0; i < grid.size(); i++) {\n        for (long j = 0; j < grid[0].size(); j++) {\n            col_max[j] = std::max(col_max[j], grid[i][j]);\n        }\n    }\n    for (long j = 0; j < grid[0].size(); j++) {\n        for (long i = 0; i < grid.size(); i++) {\n            if (grid[i][j] == col_max[j]) {\n                long fill = col_max[j] - grid[i][j];\n                if (fill > 0) {\n                    if (capacity > fill) {\n                        capacity -= fill;\n                    } else {\n                        fill -= capacity;\n                        capacity = capacity - fill;\n                        capacity = capacity + grid[i][j];\n                        result++;\n                    }\n                }\n            } else {\n                result++;\n            }\n        }\n    }\n    return result;",
        "grade-152": {
            "execution": 0
        },
        "108": "// Define max_water as -1 initially.\n    long max_water = -1;\n    // For each row,\n    for(long i = 0; i < grid.size(); i++) {\n        // For each cell,\n        for(long j = 0; j < grid[i].size(); j++) {\n            // Set water to 0.\n            long water = 0;\n            // For each row below,\n            for(long k = i; k < grid.size(); k++) {\n                // Add the cell's value to water.\n                water += grid[k][j];\n                // If the cell's value is 1,\n                if(grid[k][j] == 1) {\n                    // Move to the next row.\n                    break;\n                }\n            }\n            // If water is less than capacity,\n            if(water < capacity) {\n                // Set water to 0.\n                water = 0;\n                // For each row above,\n                for(long k = i; k >= 0; k--) {\n                    // Add the cell's value to water.\n                    water += grid[k][j];\n                    // If the cell's value is 1,\n                    if(grid[k][j] == 1) {\n                        // Move to the next row.\n                        break;\n                    }\n                }\n            }\n            // If water is greater than max_water,\n            if(water > max_water) {\n                // Set max_water to water.\n                max_water = water;\n            }\n        }\n    }\n    // Return max_water.\n    return max_water;",
        "grade-108": {
            "execution": 0
        },
        "8": "// we sort wells by their height\n  long rows = grid.size();\n  long cols = grid[0].size();\n  std::vector<std::pair<long, long>> wells;\n  for (long i = 0; i < rows; i++) {\n    long height = 0;\n    for (long j = 0; j < cols; j++) {\n      height += grid[i][j];\n    }\n    wells.push_back(std::make_pair(height, i));\n  }\n  std::sort(wells.begin(), wells.end());\n  long count = 0;\n  for (auto w : wells) {\n    // for the ith well, we fill it with capacity water in each bucket\n    // and then empty it by putting the water into the remaining wells\n    long i = w.second;\n    long num_buckets = capacity;\n    while (num_buckets-- > 0) {\n      // fill ith well\n      long j = 0;\n      while (grid[i][j] != 0) {\n        count++;\n        grid[i][j]--;\n        j++;\n      }\n      // empty ith well\n      for (long k = 0; k < rows; k++) {\n        if (i == k) {\n          continue;\n        }\n        while (j < cols && grid[k][j] != 0) {\n          count++;\n          grid[k][j]--;\n          j++;\n        }\n      }\n    }\n  }\n  return count;",
        "grade-8": {
            "execution": 0
        },
        "7": "long row = grid.size();\n    long col = grid[0].size();\n    std::vector<long> heights(col, 0);\n    for(long r = 0; r < row; r++) {\n        for(long c = 0; c < col; c++) {\n            if(grid[r][c] == 1) {\n                heights[c] = 1;\n            }\n        }\n    }\n    long empty_col = 0;\n    for(long c = 0; c < col; c++) {\n        if(heights[c] == 0) {\n            empty_col++;\n        }\n    }\n    if(empty_col == col) {\n        return 0;\n    }\n    std::sort(heights.begin(), heights.end());\n    long ans = 0;\n    for(long h = 0; h < row; h++) {\n        long pass = 0;\n        for(long c = 0; c < col; c++) {\n            if(h < heights[c]) {\n                ans++;\n                pass++;\n            }\n        }\n        if(pass == capacity) {\n            break;\n        }\n    }\n    return ans;",
        "grade-7": {
            "execution": 0
        },
        "23": "long total_capacity = 0;\n    for (auto &g : grid) {\n        long local_capacity = 0;\n        for (auto &h : g) {\n            local_capacity += h;\n        }\n        total_capacity = std::max(total_capacity, local_capacity);\n    }\n    long min_drops = total_capacity / capacity;\n    if (total_capacity % capacity) {\n        min_drops++;\n    }\n    return min_drops;",
        "grade-23": {
            "execution": 0
        },
        "55": "//var\n    long result = 0;\n    //run\n    for (auto& v : grid) {\n        for (auto& el : v) {\n            el = std::min(el, capacity);\n            if (el > 0)\n                result++;\n        }\n    }\n    return result;",
        "grade-55": {
            "execution": 0
        },
        "59": "long n = grid.size();\n    long m = grid[0].size();\n    long time = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < m; j++) {\n            if (grid[i][j] == 1) {\n                grid[i][j] = 0;\n                capacity -= 1;\n                if (capacity == 0) {\n                    time += 1;\n                    capacity = 1;\n                }\n            }\n        }\n    }\n    return time;",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6]) == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1, 2, 3, 2, 1]) == 0\nlong smallest_change(std::vector<long> arr) {\n",
        "snippet": [
            "    int out=0;\n    for (int i=0;i<arr.size()-1-i;i++)\n        if (arr[i]!=arr[arr.size()-1-i])\n            out+=1;\n    return out;\n}\n"
        ],
        "simplified": "Given an array arr of integers, find the minimum number of elements that need to be changed to make the array palindromic. A palindromic array is an array that is read the same backwards and forwards. In one change, you can change one element to any other element.",
        "task_id": "73",
        "167": "// Your code here\n  if(arr.size()==0)\n    return 0;\n  if(arr.size()==1)\n    return 0;\n  if(arr.size()==2)\n    return 1;\n  if(arr.size()==3)\n    return 2;\n  if(arr.size()==4)\n    return 3;\n  if(arr.size()==5)\n    return 4;\n  if(arr.size()==6)\n    return 5;\n  if(arr.size()==7)\n    return 6;\n  if(arr.size()==8)\n    return 7;\n  if(arr.size()==9)\n    return 8;\n  if(arr.size()==10)\n    return 9;\n  if(arr.size()==11)\n    return 10;\n  if(arr.size()==12)\n    return 11;\n  if(arr.size()==13)\n    return 12;\n  if(arr.size()==14)\n    return 13;\n  if(arr.size()==15)\n    return 14;\n  if(arr.size()==16)\n    return 15;\n  if(arr.size()==17)\n    return 16;\n  if(arr.size()==18)\n    return 17;\n  if(arr.size()==19)\n    return 18;\n  if(arr.size()==20)\n    return 19;\n  if(arr.size()==21)\n    return 20;\n  if(arr.size()==22)\n    return 21;\n  if(arr.size()==23)\n    return 22;\n  if(arr.size()==24)\n    return 23;\n  if(arr.size()==25)\n    return 24;\n  if(arr.size()==26)\n    return 25;\n  if(arr.size()==27)\n    return 26;\n  if(arr.size()==28)\n    return 27;\n  if(arr.size()==29)\n    return 28;\n  if(arr.size()==30)\n    return 29;\n  if(arr.size()==31",
        "grade-167": {
            "execution": 0
        },
        "28": "int n = arr.size();\n  int a[n][n];\n  memset(a, 0, sizeof(a));\n  int l, h, gap;\n  for (gap = 1; gap < n; ++gap)\n  {\n    for (l = 0, h = gap; h < n; ++l, ++h)\n    {\n      a[l][h] = (arr[l] == arr[h])? a[l+1][h-1] :\n                (std::min(a[l][h-1], a[l+1][h]) + 1);\n    }\n  }\n  return a[0][n-1];",
        "grade-28": {
            "execution": 0
        },
        "6": "int cnt = 0;\n  for (int i = 0; i < arr.size() / 2; i++) {\n    if (arr[i] != arr[arr.size() - 1 - i]) {\n      cnt++;\n    }\n  }\n  return cnt;",
        "grade-6": {
            "execution": 1
        },
        "194": "long mn = 0;\n    int i = 0,j = arr.size()-1;\n    while(i<j){\n        if(arr[i] != arr[j])\n            mn++;\n        i++;j--;\n    }\n    return mn;",
        "grade-194": {
            "execution": 1
        },
        "71": "// Write your code here\n    if(arr.size()==0) return 0;\n    std::vector<long> v1(arr.size(), 0);\n    std::vector<long> v2(arr.size(), 0);\n    long smallest = 0;\n    for(int i=0; i<arr.size(); i++){\n        v1[i] = (i>0) ? v1[i-1] + arr[i] : arr[i];\n        v2[i] = (i>0) ? v2[i-1] + arr[arr.size()-1-i] : arr[arr.size()-1-i];\n    }\n    for(int i=0; i<arr.size(); i++){\n        if(i>0){\n            if(v1[i] > v2[arr.size()-2-i]){\n                smallest += v1[i] - v2[arr.size()-2-i];\n            }\n            else if(v1[i] < v2[arr.size()-2-i]){\n                smallest += v2[arr.size()-2-i] - v1[i];\n            }\n        }\n        else{\n            if(v1[i] > v2[arr.size()-1-i]){\n                smallest += v1[i] - v2[arr.size()-1-i];\n            }\n            else if(v1[i] < v2[arr.size()-1-i]){\n                smallest += v2[arr.size()-1-i] - v1[i];\n            }\n        }\n    }\n    return smallest;",
        "grade-71": {
            "execution": 0
        },
        "63": "// your code here\n    int n = arr.size();\n    int L[n][n];\n    int i, j, cl;\n    for (i = 0; i < n; i++)\n        L[i][i] = 1;\n    for (cl = 2; cl <= n; cl++) {\n        for (i = 0; i < n - cl + 1; i++) {\n            j = i + cl - 1;\n            if (arr[i] == arr[j] && cl == 2)\n                L[i][j] = 2;\n            else if (arr[i] == arr[j])\n                L[i][j] = L[i + 1][j - 1] + 2;\n            else\n                L[i][j] = std::max(L[i][j - 1], L[i + 1][j]);\n        }\n    }\n    return (n - L[0][n - 1]);",
        "grade-63": {
            "execution": 0
        },
        "58": "int n = arr.size();\n    int dp[n][n];\n    memset(dp, 0, sizeof(dp));\n    for (int i = 0; i < n; i++) {\n        dp[i][i] = 1;\n    }\n    for (int L = 2; L <= n; L++) {\n        for (int i = 0; i < n - L + 1; i++) {\n            int j = i + L - 1;\n            if (arr[i] == arr[j] && L == 2) {\n                dp[i][j] = 2;\n            } else if (arr[i] == arr[j]) {\n                dp[i][j] = dp[i + 1][j - 1] + 2;\n            } else {\n                dp[i][j] = std::max(dp[i + 1][j], dp[i][j - 1]);\n            }\n        }\n    }\n    return n - dp[0][n - 1];",
        "grade-58": {
            "execution": 0
        },
        "35": "long changes = 0;\n  long start = 0;\n  long end = arr.size() - 1;\n  while (start < end) {\n    // If the characters at start and end are equal, move forward\n    if (arr[start] == arr[end]) {\n      start++;\n      end--;\n    } else {\n      // If the characters at start and end are not equal, then check\n      // which one of them is larger and make the change in that one.\n      if (arr[start] > arr[end]) {\n        arr[end] = arr[start];\n      } else {\n        arr[start] = arr[end];\n      }\n      changes++;\n    }\n  }\n  return changes;",
        "grade-35": {
            "execution": 1
        },
        "193": "long n = arr.size();\n  long i = 0, j = n - 1;\n  long ans = 0;\n  while (i < j) {\n    while (i < j && arr[i] == arr[j]) {\n      i++;\n      j--;\n    }\n    if (i >= j)\n      break;\n    if (arr[i] > arr[j]) {\n      arr[j - 1] += arr[j];\n      j--;\n    } else {\n      arr[i + 1] += arr[i];\n      i++;\n    }\n    ans++;\n  }\n  return ans;",
        "grade-193": {
            "execution": 0
        },
        "26": "if(arr.size()==0)\n    return 0;\n    if(arr.size()==1)\n    return 0;\n    if(arr.size()==2)\n    {\n        if(arr[0]==arr[1])\n        return 0;\n        else\n        return 1;\n    }\n    long n=arr.size();\n    for(long i=0;i<n/2;i++)\n    {\n        if(arr[i]!=arr[n-i-1])\n        return 1;\n    }\n    return 0;",
        "grade-26": {
            "execution": 0
        },
        "177": "// your code here\n    int n = arr.size();\n    int lo = 0, hi = n-1;\n    int count = 0;\n    while(lo<hi){\n        if(arr[lo]!=arr[hi])\n            count++;\n        lo++;\n        hi--;\n    }\n    return count;",
        "grade-177": {
            "execution": 1
        },
        "143": "std::cout << \"In function\" << std::endl;\n    int n = arr.size();\n    int i = 0;\n    int j = n-1;\n    int count = 0;\n    while(i<j){\n        if(arr[i] != arr[j])\n            count++;\n        i++;\n        j--;\n    }\n    return count;",
        "grade-143": {
            "execution": 1
        },
        "22": "long n = arr.size();\n    if(n==0) return 0;\n    long sum1=0, sum2=0;\n    for(long i=0; i<n/2; i++) {\n        sum1 += arr[i];\n        sum2 += arr[n-i-1];\n    }\n    if(n%2) {\n        sum1 += arr[n/2];\n    }\n    return std::abs(sum1-sum2);",
        "grade-22": {
            "execution": 0
        },
        "155": "int a = arr.size();\n    // Write your code here!\n    int i = 0;\n    int j = a-1;\n    int ans = 0;\n    while(i < j){\n        if(arr[i] == arr[j]){\n            i++;\n            j--;\n        }\n        else{\n            if(arr[i] < arr[j]){\n                arr[i+1] = arr[i] + arr[i+1];\n                ans++;\n                i++;\n            }\n            else{\n                arr[j-1] = arr[j] + arr[j-1];\n                ans++;\n                j--;\n            }\n        }\n    }\n    return ans;",
        "grade-155": {
            "execution": 0
        },
        "110": "long n = arr.size();\n    std::vector<long> copy = arr;\n    std::vector<long> reverse = arr;\n    std::reverse(reverse.begin(), reverse.end());\n    std::vector<std::vector<long>> dp;\n    std::vector<long> temp(n + 1, 0);\n    for (long i = 0; i <= n; i++)\n        dp.push_back(temp);\n    for (long i = 1; i <= n; i++) {\n        for (long j = 1; j <= n; j++) {\n            if (arr[i - 1] == reverse[j - 1])\n                dp[i][j] = dp[i - 1][j - 1] + 1;\n            else\n                dp[i][j] = std::max(dp[i - 1][j], dp[i][j - 1]);\n        }\n    }\n    long result = n - dp[n][n];\n    return result;",
        "grade-110": {
            "execution": 0
        },
        "8": "int n = arr.size();\n    vector<vector<int>> dp(n, vector<int>(n, 0));\n    for (int l = 2; l <= n; l++) {\n        for (int i = 0; i < n - l + 1; i++) {\n            int j = i + l - 1;\n            if (l == 2) {\n                dp[i][j] = arr[i] == arr[j] ? 0 : 1;\n            } else {\n                if (arr[i] == arr[j]) {\n                    dp[i][j] = dp[i + 1][j - 1];\n                } else {\n                    dp[i][j] = 1 + min(dp[i + 1][j], dp[i][j - 1]);\n                }\n            }\n        }\n    }\n    return dp[0][n - 1];",
        "grade-8": {
            "execution": 0
        },
        "7": "long n = arr.size();\n  long dp[n][n];\n  memset(dp, 0, sizeof(dp));\n  for (long gap = 1; gap < n; gap++) {\n    for (long i = 0, j = gap; j < n; i++, j++) {\n      dp[i][j] = std::min(dp[i][j - 1], dp[i + 1][j]) + 1;\n      if (arr[i] == arr[j]) {\n        dp[i][j] = std::min(dp[i][j], dp[i + 1][j - 1]);\n      }\n    }\n  }\n  return dp[0][n - 1];",
        "grade-7": {
            "execution": 0
        },
        "23": "std::vector<long> left(arr.size());\n    left[0] = arr[0];\n    for (int i = 1; i < arr.size(); i++) {\n        left[i] = arr[i] + left[i - 1];\n    }\n    std::vector<long> right(arr.size());\n    right[arr.size() - 1] = arr[arr.size() - 1];\n    for (int i = arr.size() - 2; i >= 0; i--) {\n        right[i] = arr[i] + right[i + 1];\n    }\n    long min = std::numeric_limits<long>::max();\n    for (int i = 0; i < arr.size(); i++) {\n        long left_sum, right_sum;\n        if (i == 0) {\n            left_sum = 0;\n        } else {\n            left_sum = left[i - 1];\n        }\n        if (i == arr.size() - 1) {\n            right_sum = 0;\n        } else {\n            right_sum = right[i + 1];\n        }\n        if (left_sum + right_sum < min) {\n            min = left_sum + right_sum;\n        }\n    }\n    return min;",
        "grade-23": {
            "execution": 0
        },
        "56": "long ans = 0;\n  for (long i = 0; i < arr.size() / 2; i++) {\n    if (arr[i] != arr[arr.size() - 1 - i]) {\n      ans++;\n    }\n  }\n  return ans;",
        "grade-56": {
            "execution": 1
        },
        "60": "std::vector<long> reverse = arr;\n  std::reverse(reverse.begin(), reverse.end());\n  return std::count(arr.begin(), arr.end(), reverse.begin());",
        "grade-60": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n",
        "snippet": [
            "    vector<string> out={};\n    for (int i=0;i<strings.size();i++)\n        if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);\n    return out;\n}\n"
        ],
        "simplified": "Filter an input list of strings only for ones that start with a given prefix.",
        "task_id": "29",
        "176": "std::vector<std::string> result;\n\tfor (auto s : strings) {\n\t\tif (s.find(prefix) == 0) {\n\t\t\tresult.push_back(s);\n\t\t}\n\t}\n\treturn result;",
        "grade-176": {
            "execution": 1
        },
        "28": "std::vector<std::string> output;\n  for (const auto &s : strings) {\n    if (s.find(prefix) == 0) {\n      output.push_back(s);\n    }\n  }\n  return output;",
        "grade-28": {
            "execution": 1
        },
        "6": "//return std::remove_if(strings.begin(), strings.end(),\n    //         [prefix](std::string &s) {\n    //             return !(s.compare(0, prefix.length(), prefix) == 0);\n    //         });\n    std::vector<std::string> filtered;\n    for (std::string s : strings) {\n        if (s.compare(0, prefix.length(), prefix) == 0) {\n            filtered.push_back(s);\n        }\n    }\n    return filtered;",
        "grade-6": {
            "execution": 1
        },
        "70": "std::vector<std::string> output;\n    std::vector<std::string>::iterator it;\n    for(it = strings.begin(); it != strings.end(); it++) {\n        if (it->find(prefix) == 0)\n            output.push_back(*it);\n    }\n    return output;",
        "grade-70": {
            "execution": 1
        },
        "62": "std::vector<std::string> res;\n    for (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n            res.push_back(s);\n        }\n    }\n    return res;",
        "grade-62": {
            "execution": 1
        },
        "57": "std::vector<std::string> tmp;\n    std::copy_if(strings.begin(), strings.end(), std::back_inserter(tmp), [&prefix](std::string str) {\n        return str.compare(0, prefix.length(), prefix) == 0;\n    });\n    return tmp;",
        "grade-57": {
            "execution": 1
        },
        "35": "std::vector<std::string> res;\n    for (auto &x : strings) {\n        std::string ss = x.substr(0, prefix.size());\n        if (ss == prefix)\n            res.push_back(x);\n    }\n    return res;",
        "grade-35": {
            "execution": 1
        },
        "26": "std::vector<std::string> result;\n  for (auto s : strings) {\n    if (s.substr(0, prefix.size()) == prefix) {\n      result.push_back(s);\n    }\n  }\n  return result;",
        "grade-26": {
            "execution": 1
        },
        "187": "std::vector<std::string> filtered;\n    for (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n            filtered.push_back(s);\n        }\n    }\n    return filtered;",
        "grade-187": {
            "execution": 1
        },
        "148": "std::vector<std::string> s;\n  std::copy_if(strings.begin(), strings.end(), std::back_inserter(s),\n               [&prefix](std::string s) { return s.rfind(prefix, 0) == 0; });\n  return s;",
        "grade-148": {
            "execution": 1
        },
        "22": "std::vector<std::string> result;\n    for (const auto& string : strings) {\n        if (string.compare(0, prefix.size(), prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n    return result;",
        "grade-22": {
            "execution": 1
        },
        "160": "std::vector<std::string> results;\n    std::copy_if(strings.begin(), strings.end(), std::back_inserter(results), [&prefix](std::string const& str) {\n        return str.compare(0, prefix.size(), prefix) == 0;\n    });\n    return results;",
        "grade-160": {
            "execution": 1
        },
        "114": "std::vector<std::string> result;\n    for (std::string item : strings) {\n        if (item.find(prefix) == 0) {\n            result.push_back(item);\n        }\n    }\n    return result;",
        "grade-114": {
            "execution": 1
        },
        "8": "std::vector<std::string> ans;\n    for (auto str : strings) {\n        if (str.rfind(prefix, 0) == 0) {\n            ans.push_back(str);\n        }\n    }\n    return ans;",
        "grade-8": {
            "execution": 1
        },
        "7": "std::vector<std::string> result;\n\tfor (int i = 0; i < strings.size(); i++) {\n\t\tif (strings[i].find(prefix) == 0) {\n\t\t\tresult.push_back(strings[i]);\n\t\t}\n\t}\n\treturn result;",
        "grade-7": {
            "execution": 1
        },
        "23": "std::vector<std::string> sublist;\n    for (auto it = strings.begin(); it != strings.end(); it++) {\n        if (it->find(prefix) == 0) {\n            sublist.push_back(*it);\n        }\n    }\n    return sublist;",
        "grade-23": {
            "execution": 1
        },
        "55": "std::vector<std::string> new_strings;\n\tfor (int i = 0; i < strings.size(); i++) {\n\t\tif (strings[i].find(prefix) == 0) {\n\t\t\tnew_strings.push_back(strings[i]);\n\t\t}\n\t}\n\treturn new_strings;",
        "grade-55": {
            "execution": 1
        },
        "59": "std::vector<std::string> to_return;\n    for (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n            to_return.push_back(s);\n        }\n    }\n    return to_return;",
        "grade-59": {
            "execution": 1
        },
        "138": "std::vector<std::string> s2;\n    //@@Insert your code here.\n     for(int i=0;i<strings.size();i++){\n        if(strings[i].find(prefix) == 0){\n            s2.push_back(strings[i]);\n        }\n    }\n    return s2;",
        "grade-138": {
            "execution": 1
        },
        "167": "std::vector<std::string> output;\n  for (std::string s : strings) {\n    if (s.compare(0, prefix.length(), prefix) == 0) {\n      output.push_back(s);\n    }\n  }\n  return output;",
        "grade-167": {
            "execution": 1
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nbool is_prime(long n) {\n",
        "snippet": [
            "    if (n<2) return false;\n    for (long long i=2;i*i<=n;i++)\n        if (n%i==0) return false;\n    return true;\n}\n"
        ],
        "simplified": "Return true if a given number is prime, and false otherwise.",
        "task_id": "31",
        "174": "// TODO: implement me!\n    // In order to get full credit, you will need to handle all corner cases and large numbers\n    if(n==2){\n        return true;\n    }\n    if(n==3){\n        return true;\n    }\n    if(n%2==0){\n        return false;\n    }\n    if(n%3==0){\n        return false;\n    }\n    long i=5;\n    long w=2;\n    while(i*i<=n){\n        if(n%i==0){\n            return false;\n        }\n        i+=w;\n        w=6-w;\n    }\n    return true;",
        "grade-174": {
            "execution": 0
        },
        "28": "if (n<2) return false;\n    else if (n==2) return true;\n    else if (n%2==0) return false;\n    for (long i=3; i<=sqrt(n); i+=2) {\n        if (n%i==0) {\n            return false;\n        }\n    }\n    return true;",
        "grade-28": {
            "execution": 1
        },
        "6": "if (n == 1) {\n    return false;\n  }\n  for (long i = 2; i < n; i++) {\n    if (n % i == 0) {\n      return false;\n    }\n  }\n  return true;",
        "grade-6": {
            "execution": 1
        },
        "73": "if (n == 2) {\n\t\treturn true;\n\t}\n\tif (n == 1 || n % 2 == 0) {\n\t\treturn false;\n\t}\n\tfor (long i = 3; i * i <= n; i += 2) {\n\t\tif (n % i == 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;",
        "grade-73": {
            "execution": 1
        },
        "65": "// Your code here\n  if(n<=1) return false;\n  for(int i=2;i<=sqrt(n);i++){\n    if(n%i==0) return false;\n  }\n  return true;",
        "grade-65": {
            "execution": 1
        },
        "59": "// TODO: implement\nif(n>1){\nfor(int i=2;i<n;i++){\nif(n%i==0){\nreturn false;",
        "grade-59": {
            "execution": 0
        },
        "35": "if (n < 2) {\n    return false;\n  }\n  for (long i = 2; i < n; i++) {\n    if (n % i == 0) {\n      return false;\n    }\n  }\n  return true;",
        "grade-35": {
            "execution": 1
        },
        "26": "int a=0;\n    for(int i=1;i<=n;i++){\n        if(n%i==0){\n            a++;\n        }\n    }\n    if(a==2){\n        return true;\n    }\n    else{\n        return false;\n    }",
        "grade-26": {
            "execution": 1
        },
        "184": "assert(n > 0);\n    if (n == 1) return false;\n    if (n == 2) return true;\n    int k = sqrt(n);\n    for (int i = 2; i <= k; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;",
        "grade-184": {
            "execution": 1
        },
        "147": "if (n <= 1) {\n\t\treturn false;\n\t}\n\tif (n <= 3) {\n\t\treturn true;\n\t}\n\tif (n % 2 == 0 || n % 3 == 0) {\n\t\treturn false;\n\t}\n\tfor (int i = 5; i * i <= n; i = i + 6) {\n\t\tif (n % i == 0 || n % (i + 2) == 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;",
        "grade-147": {
            "execution": 1
        },
        "22": "if (n<=1) return false;\n    if (n<=3) return true;\n    if (n%2==0 or n%3==0) return false;\n    long count = 5;\n    while (count*count<=n) {\n        if (n%count==0 or n%(count+2)==0) {\n            return false;\n        }\n        count += 6;\n    }\n    return true;",
        "grade-22": {
            "execution": 1
        },
        "160": "// TODO: Return whether the given number n is prime\n  // By definition, a prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n  if (n <= 1) {\n    return false;\n  }\n  for (int i = 2; i < n; i++) {\n    if (n % i == 0) {\n      return false;\n    }\n  }\n  return true;",
        "grade-160": {
            "execution": 1
        },
        "112": "// check if n is a multiple of 2\n    if (n%2==0) return false;\n    // if not, then just check the odds\n    for(int i=3;i*i<=n;i+=2) {\n        if(n%i==0)\n            return false;\n    }\n    return true;",
        "grade-112": {
            "execution": 0
        },
        "8": "if (n == 1) {\n    return false;\n  }\n  long i = 2;\n  while (i < n) {\n    if (n % i == 0) {\n      return false;\n    }\n    i += 1;\n  }\n  return true;",
        "grade-8": {
            "execution": 1
        },
        "7": "// TODO:",
        "grade-7": {
            "execution": 0
        },
        "23": "if (n <= 1) return false;\n\tfor (long i = 2; i < n; i++) {\n\t\tif (n % i == 0) return false;\n\t}\n\treturn true;",
        "grade-23": {
            "execution": 1
        },
        "57": "// your code here\n  if(n==1)\n  return false;\n  if(n==2)\n  return true;\n  for(int i=2;i<=sqrt(n);i++)\n  {\n  \tif(n%i==0)\n  \treturn false;\n  }\n  return true;",
        "grade-57": {
            "execution": 1
        },
        "61": "if (n <= 1) return false;\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) return false;\n    }\n    return true;",
        "grade-61": {
            "execution": 1
        },
        "136": "if (n < 2) return false;\n  if (n == 2) return true;\n  if (n % 2 == 0) return false;\n  long i = 3;\n  while (i <= sqrt(n)) {\n    if (n % i == 0) return false;\n    i += 2;\n  }\n  return true;",
        "grade-136": {
            "execution": 1
        },
        "163": "bool prime = true;\n  for (long d = 2; d < n; d++) {\n    if (n % d == 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;",
        "grade-163": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// In this problem, you will implement a function that takes two lists of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 a list of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\nstd::string exchange(std::vector<long> lst1, std::vector<long> lst2) {\n",
        "snippet": [
            "    int num=0;\n    for (int i=0;i<lst1.size();i++)\n    if (lst1[i]%2==0) num+=1;\n    for (int i=0;i<lst2.size();i++)\n    if (lst2[i]%2==0) num+=1;\n    if (num>=lst1.size()) return \"YES\";\n    return \"NO\";\n}\n"
        ],
        "simplified": "In this problem, you will implement a function that takes two lists of numbers, and determines whether it is possible to perform an exchange of elements between them to make lst1 a list of only even numbers. There is no limit on the number of exchanged elements between lst1 and lst2. If it is possible to exchange elements between the lst1 and lst2 to make all the elements of lst1 to be even, return \"YES\". Otherwise, return \"NO\".",
        "task_id": "110",
        "164": "// Your code here",
        "grade-164": {
            "execution": 0
        },
        "28": "// your code here\n  bool flag;\n  for(int i=0;i<lst1.size();i++){\n    if(lst1[i]%2!=0){\n      flag=false;\n      for(int j=0;j<lst2.size();j++){\n        if(lst2[j]%2!=0){\n          flag=true;\n          break;\n        }\n      }\n      if(flag==false){\n        return \"NO\";\n      }\n    }\n  }\n  return \"YES\";",
        "grade-28": {
            "execution": 0
        },
        "6": "int oddsInLst1 = 0;\n  int oddsInLst2 = 0;\n  for (int i = 0; i < lst1.size(); i++) {\n    if (lst1[i] % 2 == 1) {\n      oddsInLst1++;\n    }\n  }\n  for (int i = 0; i < lst2.size(); i++) {\n    if (lst2[i] % 2 == 1) {\n      oddsInLst2++;\n    }\n  }\n  if (oddsInLst1 == lst1.size() && oddsInLst2 > 0) {\n    return \"NO\";\n  }\n  if (oddsInLst2 == lst2.size() && oddsInLst1 > 0) {\n    return \"NO\";\n  }\n  return \"YES\";",
        "grade-6": {
            "execution": 0
        },
        "190": "for (auto ele : lst1) {\n    if (ele % 2 == 0) continue;\n    bool flag = false;\n    for (auto ele2 : lst2) {\n      if (ele2 % 2 == 0) {\n        flag = true;\n        break;\n      }\n    }\n    if (!flag) return \"NO\";\n  }\n  return \"YES\";",
        "grade-190": {
            "execution": 0
        },
        "70": "//  if(lst1.size() != lst2.size()) return \"NO\";\n  std::sort(lst1.begin(), lst1.end());\n  std::sort(lst2.begin(), lst2.end());\n  for(int i = 0; i < lst1.size(); i++) {\n    if(lst1[i]%2 == 0 && lst2[i]%2 == 0) continue;\n    else if(lst1[i]%2 == 0) continue;\n    else if(lst2[i]%2 == 0) {\n      lst1[i] = lst2[i];\n      lst2[i] = 0;\n    }\n    else if(lst1[i]%2 != 0 && lst2[i]%2 != 0) return \"NO\";\n  }\n  return \"YES\";",
        "grade-70": {
            "execution": 0
        },
        "62": "std::string result = \"YES\";\n    std::vector<long>::iterator iter1 = lst1.begin();\n    while (iter1 != lst1.end()) {\n        if (*iter1 % 2 != 0) {\n            std::vector<long>::iterator iter2 = lst2.begin();\n            bool isFound = false;\n            while (iter2 != lst2.end()) {\n                if (*iter2 % 2 == 0) {\n                    *iter1 = *iter2;\n                    *iter2 = 1;\n                    isFound = true;\n                    break;\n                }\n                iter2++;\n            }\n            if (!isFound) {\n                result = \"NO\";\n                break;\n            }\n        }\n        iter1++;\n    }\n    return result;",
        "grade-62": {
            "execution": 1
        },
        "57": "auto incIt1 = lst1.begin();\n  while (incIt1 != lst1.end()) {\n    if (*incIt1 % 2 != 0) {\n      auto incIt2 = lst2.begin();\n      while (incIt2 != lst2.end()) {\n        if (*incIt2 % 2 == 0) {\n          std::swap(*incIt1, *incIt2);\n          break;\n        }\n        incIt2++;\n      }\n      if (incIt2 == lst2.end()) {\n        return \"NO\";\n      }\n    }\n    incIt1++;\n  }\n  return \"YES\";",
        "grade-57": {
            "execution": 1
        },
        "35": "// Write your code here\n    return \"\";",
        "grade-35": {
            "execution": 0
        },
        "189": "int a,b;\n\tfor(int i=0;i<lst1.size();i++){\n\t\tif(lst1[i]%2!=0){\n\t\t\ta=lst1[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\tfor(int i=0;i<lst2.size();i++){\n\t\tif(lst2[i]%2==0){\n\t\t\tb=lst2[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(a<b){\n\t\treturn \"YES\";\n\t}\n\telse{\n\t\treturn \"NO\";\n\t}",
        "grade-189": {
            "execution": 0
        },
        "26": "bool even = true;\n    for (int i = 0; i < lst1.size(); i++) {\n        if (lst1[i] % 2 != 0) {\n            even = false;\n            break;\n        }\n    }\n    if (even) return \"YES\";\n    else {\n        for (int i = 0; i < lst1.size(); i++) {\n            if (lst1[i] % 2 != 0) {\n                for (int j = 0; j < lst2.size(); j++) {\n                    if (lst2[j] % 2 == 0) {\n                        long tmp = lst1[i];\n                        lst1[i] = lst2[j];\n                        lst2[j] = tmp;\n                        break;\n                    }\n                }\n            }\n        }\n        for (int i = 0; i < lst1.size(); i++) {\n            if (lst1[i] % 2 != 0) return \"NO\";\n        }\n        return \"YES\";\n    }",
        "grade-26": {
            "execution": 1
        },
        "174": "// your code here\n  std::string res = \"YES\";\n  for (int i = 0; i < lst1.size(); i++) {\n    if (lst1[i] % 2 == 1) {\n      bool flag = false;\n      for (int j = 0; j < lst2.size(); j++) {\n        if (lst2[j] % 2 == 1) {\n          std::swap(lst1[i], lst2[j]);\n          flag = true;\n          break;\n        }\n      }\n      if (!flag) {\n        res = \"NO\";\n        break;\n      }\n    }\n  }\n  return res;",
        "grade-174": {
            "execution": 0
        },
        "140": "for (int i = 0; i < lst1.size(); i++) {\n        if (lst1[i] % 2 != 0) {\n            for (int j = 0; j < lst2.size(); j++) {\n                if (lst2[j] % 2 != 0) {\n                    std::swap(lst1[i], lst2[j]);\n                    break;\n                }\n            }\n        }\n    }\n    for (int i = 0; i < lst1.size(); i++) {\n        if (lst1[i] % 2 != 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";",
        "grade-140": {
            "execution": 0
        },
        "22": "long evens = 0;\n  long odds = 0;\n  for (int i = 0; i < lst1.size(); i++) {\n    if (lst1[i] % 2 == 0) {\n      evens++;\n    } else {\n      odds++;\n    }\n  }\n  for (int i = 0; i < lst2.size(); i++) {\n    if (lst2[i] % 2 == 0) {\n      evens++;\n    } else {\n      odds++;\n    }\n  }\n  if (evens >= odds) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }",
        "grade-22": {
            "execution": 1
        },
        "152": "std::vector<long> lst1_even;\n    std::vector<long> lst2_odd;\n    for (int i = 0; i < lst1.size(); i++) {\n        if (lst1[i] % 2 == 0) {\n            lst1_even.push_back(lst1[i]);\n        }\n    }\n    for (int i = 0; i < lst2.size(); i++) {\n        if (lst2[i] % 2 != 0) {\n            lst2_odd.push_back(lst2[i]);\n        }\n    }\n    if (lst1_even.size() == lst2_odd.size()) {\n        return \"YES\";\n    }\n    return \"NO\";",
        "grade-152": {
            "execution": 0
        },
        "108": "long even = 0;\n  long odd = 0;\n  for (int i = 0; i < lst1.size(); i++) {\n    if (lst1[i] % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  for (int i = 0; i < lst2.size(); i++) {\n    if (lst2[i] % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  if (even > odd) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }",
        "grade-108": {
            "execution": 0
        },
        "8": "// Your code here.\n    std::sort(lst1.begin(), lst1.end());\n    std::sort(lst2.begin(), lst2.end());\n    int i = 0, j = 0;\n    int l1 = lst1.size();\n    int l2 = lst2.size();\n    while(i < l1 && j < l2) {\n        if(lst1[i] % 2 == 0)\n            i++;\n        else if(lst2[j] % 2 == 0) {\n            std::swap(lst1[i], lst2[j]);\n            i++;\n            j++;\n        }\n        else\n            j++;\n    }\n    while(i < l1) {\n        if(lst1[i] % 2 == 0)\n            i++;\n        else\n            return \"NO\";\n    }\n    return \"YES\";",
        "grade-8": {
            "execution": 1
        },
        "7": "// your code here",
        "grade-7": {
            "execution": 0
        },
        "23": "int even1=0,even2=0;\n  for(int i=0;i<lst1.size();i++){\n    if(lst1[i]%2==0)\n      even1++;\n  }\n  for(int i=0;i<lst2.size();i++){\n    if(lst2[i]%2==0)\n      even2++;\n  }\n  if(even1<even2)\n    return \"YES\";\n  else\n    return \"NO\";",
        "grade-23": {
            "execution": 0
        },
        "55": "return \"\";",
        "grade-55": {
            "execution": 0
        },
        "59": "// Your code here!\n    //return \"\";\n    bool flag=false;\n    for(int i=0;i<lst1.size();i++){\n        if(lst1[i]%2!=0){\n            for(int j=0;j<lst2.size();j++){\n                if(lst2[j]%2==0){\n                    long temp = lst1[i];\n                    lst1[i] = lst2[j];\n                    lst2[j] = temp;\n                    flag = true;\n                    break;\n                }\n            }\n        }\n        if(flag){\n            flag = false;\n        }\n        else{\n            return \"NO\";\n        }\n    }\n    return \"YES\";",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nbool correct_bracketing(std::string brackets) {\n",
        "snippet": [
            "    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='(') level+=1;\n        if (brackets[i]==')') level-=1;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}\n"
        ],
        "simplified": "brackets is a string of \"(\" and \")\". return True if every opening bracket has a corresponding closing bracket.",
        "task_id": "61",
        "175": "assert(!brackets.empty());\n    int n = brackets.size();\n    int cnt = 0;\n    for (int i = 0; i < n; i++) {\n        if (brackets[i] == '(') {\n            cnt++;\n        } else {\n            cnt--;\n        }\n        if (cnt < 0) return false;\n    }\n    return cnt == 0;",
        "grade-175": {
            "execution": 1
        },
        "28": "// Write your code here.\n    std::stack<char> s;\n    for(int i=0;i<brackets.length();i++){\n        if(brackets[i]=='('){\n            s.push(brackets[i]);\n        }\n        else if(brackets[i]==')'){\n            if(s.empty()){\n                return false;\n            }\n            else{\n                s.pop();\n            }\n        }\n    }\n    if(s.empty()){\n        return true;\n    }\n    else{\n        return false;\n    }",
        "grade-28": {
            "execution": 1
        },
        "6": "stack<char> s;\n\tfor (int i = 0; i < brackets.length(); i++) {\n\t\tif (brackets[i] == '(') {\n\t\t\ts.push(brackets[i]);\n\t\t}\n\t\telse if (brackets[i] == ')') {\n\t\t\tif (s.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\ts.pop();\n\t\t\t}\n\t\t}\n\t}\n\tif (s.empty()) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}",
        "grade-6": {
            "execution": 0
        },
        "73": "// replace this with your code.\n    int op = 0;\n    for(int i = 0; i < brackets.length(); i++){\n      if(brackets[i] == '('){\n        op++;\n      }\n      else{\n        op--;\n      }\n      if(op < 0){\n        return false;\n      }\n    }\n    if(op == 0){\n      return true;\n    }\n    else{\n      return false;\n    }",
        "grade-73": {
            "execution": 1
        },
        "65": "int l=0;\n\tfor(int i=0;i<brackets.length();i++)\n\t{\n\t\tif(brackets[i]=='(')\n\t\t\tl++;\n\t\telse if(brackets[i]==')')\n\t\t\tl--;\n\t\tif(l<0)\n\t\t\treturn false;\n\t}\n\tif(l==0)\n\t\treturn true;\n\telse\n\t\treturn false;",
        "grade-65": {
            "execution": 1
        },
        "60": "int openBrackets = 0;\n    int closeBrackets = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '(') {\n            openBrackets++;\n        } else if (brackets[i] == ')') {\n            closeBrackets++;\n        }\n    }\n    if (openBrackets == closeBrackets) {\n        return true;\n    } else {\n        return false;\n    }",
        "grade-60": {
            "execution": 0
        },
        "36": "int count_open = 0;\n  int count_close = 0;\n  for (int i = 0; i < brackets.size(); i++) {\n    if (brackets[i] == '(') {\n      count_open++;\n    }\n    else if (brackets[i] == ')') {\n      count_close++;\n    }\n    if (count_close > count_open) {\n      return false;\n    }\n  }\n  if (count_open == count_close) {\n    return true;\n  }\n  else {\n    return false;\n  }",
        "grade-36": {
            "execution": 1
        },
        "26": "//return true;\n   std::stack<char> S;\n   std::string::iterator c = brackets.begin();\n   while(c != brackets.end()){\n\t   if(*c == '('){\n\t\t   S.push(*c);\n\t   }else if(*c == ')'){\n\t\t   if(S.empty()){\n\t\t\t   return false;\n\t\t   }else{\n\t\t\t   S.pop();\n\t\t   }\n\t   }\n\t   c++;\n   }\n   if(S.empty()){\n\t   return true;\n   }else{\n\t   return false;\n   }",
        "grade-26": {
            "execution": 1
        },
        "187": "int len = brackets.length();\n    int counter = 0;\n    int limit = len/2;\n    for(int i = 0; i < len; i++){\n        if(brackets[i] == '('){\n            counter++;\n        }\n        else{\n            counter--;\n        }\n        if(counter < 0){\n            return false;\n        }\n        if(counter == limit){\n            break;\n        }\n    }\n    if(counter == 0){\n        return true;\n    }\n    else{\n        return false;\n    }",
        "grade-187": {
            "execution": 0
        },
        "148": "int open_count = 0;\n  for (char c : brackets) {\n    if (c == '(') {\n      open_count++;\n    } else if (c == ')') {\n      open_count--;\n    }\n    if (open_count < 0) {\n      return false;\n    }\n  }\n  return open_count == 0;",
        "grade-148": {
            "execution": 1
        },
        "22": "int count = 0;\n  for (char c : brackets) {\n    if (c == '(') {\n      count++;\n    } else if (c == ')') {\n      count--;\n    }\n    if (count < 0) {\n      return false;\n    }\n  }\n  return count == 0;",
        "grade-22": {
            "execution": 1
        },
        "162": "int n = brackets.length();\n\tif (n == 0)\n\t\treturn false;\n\tint o_brackets = 0;\n\tint c_brackets = 0;\n\tfor (int i = 0; i < n; i++) {\n\t\tif (brackets[i] == '(')\n\t\t\to_brackets++;\n\t\telse\n\t\t\tc_brackets++;\n\t\tif (c_brackets > o_brackets)\n\t\t\treturn false;\n\t}\n\tif (o_brackets == c_brackets)\n\t\treturn true;\n\telse\n\t\treturn false;",
        "grade-162": {
            "execution": 1
        },
        "114": "int n = brackets.length();\n\t// TODO: implement this function.\n\t// Use a stack to store the opening brackets.\n\tstack<char> st;\n\tfor (int i = 0; i < n; i++) {\n\t\tif (brackets[i] == '(')\n\t\t\tst.push(brackets[i]);\n\t\telse {\n\t\t\tif (st.empty())\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t\tst.pop();\n\t\t}\n\t}\n\tif (st.empty())\n\t\treturn true;\n\telse\n\t\treturn false;",
        "grade-114": {
            "execution": 0
        },
        "8": "// use stack to solve the problem\n    int n = brackets.size();\n    std::stack<char> t;\n    for (int i = 0; i < n; i++) {\n        if (brackets[i] == '(') {\n            t.push(brackets[i]);\n        } else {\n            if (t.empty()) {\n                return false;\n            } else {\n                t.pop();\n            }\n        }\n    }\n    return t.empty();",
        "grade-8": {
            "execution": 1
        },
        "7": "int i,top=-1;\n\tchar mystack[100];\n\tchar temp;\n\tfor(i=0;i<brackets.length();i++)\n\t{\n\t\ttemp=brackets[i];\n\t\tif(temp=='(')\n\t\t{\n\t\t\ttop++;\n\t\t\tmystack[top]=temp;\n\t\t}\n\t\telse if(temp==')')\n\t\t{\n\t\t\tif(top==-1)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tmystack[top]='\\0';\n\t\t\t\ttop--;\n\t\t\t}\n\t\t}\n\t}\n\tif(top==-1)\n\t\treturn true;\n\telse\n\t\treturn false;",
        "grade-7": {
            "execution": 1
        },
        "23": "int count = 0;\n\tint len = brackets.length();\n\tfor (int i = 0; i < len; i++) {\n\t\tif (brackets[i] == '(') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (brackets[i] == ')') {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif (count == 0) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}",
        "grade-23": {
            "execution": 1
        },
        "57": "int cnt=0;\n    for(int i=0;i<brackets.size();i++){\n        if(brackets[i]=='(')\n            cnt++;\n        else if(brackets[i]==')')\n            cnt--;\n        if(cnt<0)\n            return false;\n    }\n    if(cnt==0)\n        return true;\n    else\n        return false;",
        "grade-57": {
            "execution": 1
        },
        "62": "int count = 0;\n\tfor (int i = 0; i < brackets.length(); i++) {\n\t\tif (brackets[i] == '(') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (brackets[i] == ')') {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif (count == 0) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}",
        "grade-62": {
            "execution": 1
        },
        "138": "int t = 0;\n  for (auto i : brackets) {\n    if (i == '(') {\n      t++;\n    } else {\n      t--;\n    }\n    if (t < 0) {\n      return false;\n    }\n  }\n  return t == 0;",
        "grade-138": {
            "execution": 1
        },
        "165": "// YOUR CODE HERE\n\tint count1 = 0;\n\tint count2 = 0;\n\tfor (int i = 0; i < brackets.length(); i++) {\n\t\tif (brackets[i] == '(') {\n\t\t\tcount1++;\n\t\t}\n\t\telse if (brackets[i] == ')') {\n\t\t\tcount2++;\n\t\t}\n\t}\n\tif (count1 == count2) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}",
        "grade-165": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long n) {\n",
        "snippet": [
            "    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\n"
        ],
        "simplified": "Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in the last couple centuries. However, what people don't know is Tribonacci sequence. Tribonacci sequence is defined by the recurrence: tri(1) = 3 tri(n) = 1 + n / 2, if n is even. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.",
        "task_id": "130",
        "163": "std::vector<long> trib;\n    trib.push_back(1);\n    trib.push_back(3);\n    trib.push_back(2);\n    if(n > 3) {\n        for(int i = 3; i <= n; i++) {\n            if(i % 2 == 0) {\n                trib.push_back(1 + i / 2);\n            } else {\n                long temp = trib[i - 1] + trib[i - 2] + trib[i + 1];\n                trib.push_back(temp);\n            }\n        }\n    }\n    return trib;",
        "grade-163": {
            "execution": 0
        },
        "28": "std::vector<long> tri;\n    tri.push_back(1);\n    tri.push_back(3);\n    tri.push_back(2);\n    long i = 3;\n    if(n == 0) {\n        tri.erase(tri.begin());\n        tri.erase(tri.begin());\n        tri.erase(tri.begin());\n        return tri;\n    }\n    else if(n == 1) {\n        tri.erase(tri.begin());\n        tri.erase(tri.begin());\n        return tri;\n    }\n    else if(n == 2) {\n        tri.erase(tri.begin());\n        return tri;\n    }\n    while(i <= n) {\n        if(i % 2 == 0) {\n            tri.push_back(1 + i / 2);\n        }\n        else {\n            tri.push_back(tri[i - 1] + tri[i - 2] + tri[i + 1]);\n        }\n        i++;\n    }\n    return tri;",
        "grade-28": {
            "execution": 0
        },
        "6": "long arr[3] = { 1, 2, 3 };\n  std::vector<long> v(n + 1);\n  v[0] = 1;\n  for (int i = 1; i <= n; i++) {\n    v[i] = arr[i % 3];\n    arr[i % 3] =\n        (i % 2) ? arr[(i - 1) % 3] + arr[(i - 2) % 3] + arr[(i + 1) % 3] : 1 + i / 2;\n  }\n  return v;",
        "grade-6": {
            "execution": 0
        },
        "189": "std::vector<long> result;\n  result.push_back(1);\n  result.push_back(3);\n  result.push_back(2);\n  for (int i = 2; i < n; i++) {\n    if (i % 2 == 0)\n      result.push_back(1 + i / 2);\n    else\n      result.push_back(result[i - 1] + result[i - 2] + result[i + 1]);\n  }\n  return result;",
        "grade-189": {
            "execution": 0
        },
        "70": "vector<long> tri_vec;\n    int tri_1 = 3;\n    int tri_2 = 1;\n    int tri_3 = 2;\n    tri_vec.push_back(tri_1);\n    tri_vec.push_back(tri_2);\n    tri_vec.push_back(tri_3);\n    for(int i = 3; i <= n; i++){\n        if(i % 2 == 0){\n            tri_vec.push_back(tri_3);\n        }\n        else{\n            int temp = tri_1 + tri_2 + tri_3;\n            tri_vec.push_back(temp);\n            tri_1 = tri_2;\n            tri_2 = tri_3;\n            tri_3 = temp;\n        }\n    }\n    return tri_vec;",
        "grade-70": {
            "execution": 0
        },
        "62": "std::vector<long> res;\n    if(n == 0) return res;\n    if(n == 1) {\n        res.push_back(1);\n        return res;\n    }\n    if(n == 2) {\n        res.push_back(1);\n        res.push_back(3);\n        return res;\n    }\n    if(n == 3) {\n        res.push_back(1);\n        res.push_back(3);\n        res.push_back(2);\n        return res;\n    }\n    res.push_back(1);\n    res.push_back(3);\n    res.push_back(2);\n    long a, b, c;\n    a = 1;\n    b = 3;\n    c = 2;\n    for(int i = 4; i <= n; i++) {\n        if(i % 2 == 0) {\n            res.push_back(1 + i / 2);\n        } else {\n            res.push_back(a + b + c);\n            a = b;\n            b = c;\n            c = res[i - 1];\n        }\n    }\n    return res;",
        "grade-62": {
            "execution": 0
        },
        "57": "if(n == 0) return {};\n    std::vector<long> res = {1, 3, 2};\n    for(int i = 3; i <= n; i++){\n        if(i % 2 == 0) res.push_back(1 + i / 2);\n        else res.push_back(res[i - 1] + res[i - 2] + res[i + 1]);\n    }\n    return res;",
        "grade-57": {
            "execution": 0
        },
        "35": "std::vector<long> res(n+1);\n    if(n==0) return res;\n    res[0]=1;\n    if(n==1) return res;\n    res[1]=3;\n    if(n==2) return res;\n    res[2]=2;\n    if(n==3) return res;\n    for(long i=3;i<=n;i++){\n        if(i%2==0) res[i]=1+i/2;\n        else res[i]=res[i-1]+res[i-2]+res[i+1];\n    }\n    return res;",
        "grade-35": {
            "execution": 0
        },
        "188": "std::vector<long> ret;\n    ret.push_back(1);\n    if (n == 0) return ret;\n    ret.push_back(3);\n    if (n == 1) return ret;\n    ret.push_back(2);\n    if (n == 2) return ret;\n    for (int i = 3; i <= n; i++) {\n        long tmp = 1 + i / 2;\n        if (i % 2 == 1) {\n            tmp = ret[i - 1] + ret[i - 2] + ret[i + 1];\n        }\n        ret.push_back(tmp);\n    }\n    return ret;",
        "grade-188": {
            "execution": 0
        },
        "26": "std::vector<long> v(n + 1);\n  v[0] = 1;\n  v[1] = 3;\n  v[2] = 2;\n  for (long i = 3; i <= n; i++) {\n    v[i] = i % 2 == 0 ? 1 + i / 2 : v[i - 1] + v[i - 2] + v[i + 1];\n  }\n  return v;",
        "grade-26": {
            "execution": 0
        },
        "173": "// your code\n    std::vector<long>v;\n    v.push_back(1);\n    v.push_back(3);\n    v.push_back(2);\n    if(n==1)\n    {\n        v.erase(v.begin()+1);\n        return v;\n    }\n    if(n==2)\n    {\n        v.erase(v.begin()+2);\n        return v;\n    }\n    int i=3;\n    while(i<=n)\n    {\n        if(i%2!=0)\n        {\n            v.push_back(v[i-1]+v[i-2]+v[i-3]);\n        }\n        else\n        {\n            v.push_back(1+(i/2));\n        }\n        i++;\n    }\n    return v;",
        "grade-173": {
            "execution": 0
        },
        "139": "long tri1 = 3;\n  long tri2 = 2;\n  long tri3 = 1;\n  long temp;\n  std::vector<long> result{1, 3, 2};\n  for (long i = 0; i < n; i++) {\n    if (i % 2 == 0) {\n      temp = tri1;\n      tri1 = tri2;\n      tri2 = tri3;\n      tri3 = tri3 + temp;\n    } else {\n      temp = tri1;\n      tri1 = tri2;\n      tri2 = tri3;\n      tri3 = tri3 + tri1 + tri2;\n    }\n    result.push_back(tri3);\n  }\n  return result;",
        "grade-139": {
            "execution": 0
        },
        "22": "std::vector<long> result;\n  if (n == 0) {\n    return result;\n  }\n  result.push_back(1);\n  if (n == 1) {\n    return result;\n  }\n  result.push_back(3);\n  if (n == 2) {\n    return result;\n  }\n  result.push_back(2);\n  if (n == 3) {\n    return result;\n  }\n  result.push_back(8);\n  long cur = 4;\n  while (cur < n) {\n    long cur_val = 0;\n    if (cur % 2 == 0) {\n      cur_val = 1 + cur / 2;\n    } else {\n      cur_val = result[cur - 1] + result[cur - 2] + result[cur + 1];\n    }\n    result.push_back(cur_val);\n    cur++;\n  }\n  return result;",
        "grade-22": {
            "execution": 0
        },
        "151": "if (n < 0) return {};\n  if (n == 0) return {1};\n  if (n == 1) return {1, 3};\n  long a = 1, b = 3, c = 2;\n  std::vector<long> res = {1, 3, 2};\n  for (long i = 3; i <= n; i++) {\n    long a1 = (i % 2) ? a + b + c : 1 + i / 2;\n    a = b;\n    b = c;\n    c = a1;\n    res.push_back(a1);\n  }\n  return res;",
        "grade-151": {
            "execution": 0
        },
        "108": "if(n == 0) return {1};\n    if(n == 1) return {1, 3};\n    if(n == 2) return {1, 3, 2};\n    std::vector<long> res = {1, 3, 2};\n    while(res.size() <= n)\n    {\n        auto back1 = res.rbegin();\n        auto back2 = res.rbegin() + 1;\n        auto back3 = res.rbegin() + 2;\n        long even = 1 + *back3 / 2;\n        long odd = *back1 + *back2 + *back3;\n        res.push_back(res.size() % 2 == 0 ? even : odd);\n    }\n    return res;",
        "grade-108": {
            "execution": 0
        },
        "8": "// your code here\n  std::vector<long> v;\n  if(n == 0)\n      return v;\n  else if(n == 1)\n      return {1};\n  else if(n == 2)\n      return {1,3};\n  else\n  {\n      v.push_back(1);\n      v.push_back(3);\n      v.push_back(2);\n      for(int i = 3; i <= n; i++)\n      {\n          long element;\n          if(i % 2 == 0)\n          {\n              element = 1 + i / 2;\n          }\n          else\n          {\n              element = v[i - 1] + v[i - 2] + v[i + 1];\n          }\n          v.push_back(element);\n      }\n  }\n  return v;",
        "grade-8": {
            "execution": 0
        },
        "7": "std::vector<long> result;\n\tif (n >= 1) {\n\t\tresult.push_back(1);\n\t}\n\tif (n >= 2) {\n\t\tresult.push_back(3);\n\t}\n\tif (n >= 3) {\n\t\tresult.push_back(2);\n\t}\n\tfor (long i = 3; i < n; i++) {\n\t\tif (i % 2 == 0) {\n\t\t\tresult.push_back(1 + i / 2);\n\t\t}\n\t\telse {\n\t\t\tresult.push_back(result[i - 1] + result[i - 2] + result[i + 1]);\n\t\t}\n\t}\n\treturn result;",
        "grade-7": {
            "execution": 0
        },
        "23": "std::vector<long> res;\n    long cur,prev2=0,prev1=0,prev=1;\n    if(n>=1)\n    {\n        cur=1;\n        res.push_back(cur);\n    }\n    if(n>=2)\n    {\n        cur=3;\n        res.push_back(cur);\n    }\n    if(n>=3)\n    {\n        cur=2;\n        res.push_back(cur);\n    }\n    for(int i=3;i<n;i++)\n    {\n        if(i%2)\n        {\n            cur=prev2+prev1+prev;\n            res.push_back(cur);\n            prev2=prev1;\n            prev1=prev;\n            prev=cur;\n        }\n        else\n        {\n            cur=1+i/2;\n            res.push_back(cur);\n        }\n    }\n    return res;",
        "grade-23": {
            "execution": 0
        },
        "55": "long b = 1, c = 3, d = 2;\n  std::vector<long> v = {b, c, d};\n  if (n == 0) return v;\n  for (int i = 4; i <= n + 1; i++) {\n    if (i % 2 == 0) v.push_back(1 + i / 2);\n    else {\n      long t = v[i - 1] + v[i - 2] + v[i - 4];\n      v.push_back(t);\n    }\n  }\n  return v;",
        "grade-55": {
            "execution": 0
        },
        "59": "std::vector<long> result;\n  if (n == 0) {\n    return result;\n  }\n  if (n == 1) {\n    result.push_back(1);\n    return result;\n  }\n  if (n == 2) {\n    result.push_back(1);\n    result.push_back(3);\n    return result;\n  }\n  result.push_back(1);\n  result.push_back(3);\n  result.push_back(2);\n  for (long i = 3; i <= n; i++) {\n    if (i % 2 == 0) {\n      result.push_back(1 + i / 2);\n    } else {\n      result.push_back(result[i - 1] + result[i - 2] + result[i + 1]);\n    }\n  }\n  return result;",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n// 3\nlong strlen(std::string string) {\n",
        "snippet": [
            "    return str.length();\n}\n"
        ],
        "simplified": "Return length of given string",
        "task_id": "23",
        "149": "long length = 0;\n    for (int i = 0; string[i] != '\\0'; i++)\n        length++;\n    return length;",
        "grade-149": {
            "execution": 0
        },
        "22": "int i = 0;\n    while (string[i] != '\\0')\n        i++;\n    return i;",
        "grade-22": {
            "execution": 0
        },
        "3": "// Please complete the implementation\n    return string.length();",
        "grade-3": {
            "execution": 0
        },
        "189": "// Type your solution here\n    return string.length();",
        "grade-189": {
            "execution": 0
        },
        "63": "return (long)string.length();",
        "grade-63": {
            "execution": 0
        },
        "54": "std::string::iterator it = string.begin();\n    long length = 0;\n    while (*it != '\\0') {\n        length++;\n        it++;\n    }\n    return length;",
        "grade-54": {
            "execution": 0
        },
        "43": "std::string::iterator it = string.begin();\n    long count = 0;\n    while (it != string.end()) {\n        count++;\n        it++;\n    }\n    return count;",
        "grade-43": {
            "execution": 0
        },
        "27": "//TODO\n\tstd::string::iterator it;\n\tint count = 0;\n\tfor (it = string.begin(); it != string.end(); it++) {\n\t\tcount++;\n\t}\n\treturn count;",
        "grade-27": {
            "execution": 0
        },
        "21": "std::string::iterator it = string.begin();\n\tlong i;\n\tfor (i = 0; it != string.end(); it++, i++);\n\treturn i;",
        "grade-21": {
            "execution": 0
        },
        "163": "long length = 0;\n\twhile(string[length] != '\\0') {\n\t\tlength++;\n\t}\n\treturn length;",
        "grade-163": {
            "execution": 0
        },
        "121": "long length = 0;\n    for (long i = 0; i < string.length(); i++) {\n        length++;\n    }\n    return length;",
        "grade-121": {
            "execution": 0
        },
        "18": "long cnt = 0;\n  while (string[cnt] != '\\0') {\n    cnt++;\n  }\n  return cnt;",
        "grade-18": {
            "execution": 0
        },
        "138": "if (string.length() == 0) {\n        return 0;\n    } else {\n        return strlen(string.substr(1)) + 1;\n    }",
        "grade-138": {
            "execution": 0
        },
        "94": "// Start with a given length of string\n    // and reduce it by one character\n    // until length become 0\n    return string.length() == 0 ? 0 : 1 + strlen(string.substr(1));",
        "grade-94": {
            "execution": 0
        },
        "6": "long length = 0;\n  while(string[length] != '\\0') {\n    length++;\n  }\n  return length;",
        "grade-6": {
            "execution": 0
        },
        "41": "int len = 0;\n    for (int i = 0; string[i] != '\\0'; i++) {\n        len++;\n    }\n    return len;",
        "grade-41": {
            "execution": 0
        },
        "45": "long len = 0;\n   for (long i = 0; string[i] != '\\0'; i++)\n      len++;\n   return len;",
        "grade-45": {
            "execution": 0
        },
        "114": "long count = 0;\n\tfor (char character : string) {\n\t\tcount++;\n\t}\n\treturn count;",
        "grade-114": {
            "execution": 0
        },
        "141": "long i = 0;\n    while (string[i] != '\\0') {\n        i++;\n    }\n    return i;",
        "grade-141": {
            "execution": 0
        },
        "126": "long counter = 0;\n    for (char c : string) {\n        counter += 1;\n    }\n    return counter;",
        "grade-126": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns 'ix'\nstd::string encrypt(std::string s) {\n",
        "snippet": [
            "    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+4-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\n"
        ],
        "simplified": "Create a function encrypt that takes a string as an argument and returns a string encrypted with the alphabet being rotated. The alphabet should be rotated in a manner such that the letters shift down by two multiplied to two places.",
        "task_id": "89",
        "164": "// rotate the alphabet by two multiplied to two places\n    // e.g. a - z --> c - b\n    // the characters are rotated in a circular manner and hence\n    // we can simply add 2 to 'a' and 'z' to get their respective\n    // integers and then add 2 to the integer of the current char\n    // and convert it back to char.\n    // if the char is an uppercase letter, we add 2 to 'A' and 'Z'\n    // to get their respective integers and then add 2 to the integer\n    // of the current char and convert it back to char.\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            s[i] = (s[i] - 'a' + 2) % 26 + 'a';\n        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            s[i] = (s[i] - 'A' + 2) % 26 + 'A';\n        }\n    }\n    return s;",
        "grade-164": {
            "execution": 0
        },
        "28": "std::string newString = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        char currentChar = s[i];\n        int shiftValue = 2 * (i + 1);\n        int newCharValue = ((currentChar - 'a') + shiftValue) % 26;\n        newString += (char)(newCharValue + 'a');\n    }\n    return newString;",
        "grade-28": {
            "execution": 0
        },
        "6": "std::string result;\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (s[i] == 'u') {\n\t\t\tresult += 'w';\n\t\t}\n\t\telse if (s[i] == 'v') {\n\t\t\tresult += 'x';\n\t\t}\n\t\telse if (s[i] == 'w') {\n\t\t\tresult += 'y';\n\t\t}\n\t\telse if (s[i] == 'x') {\n\t\t\tresult += 'z';\n\t\t}\n\t\telse if (s[i] == 'y') {\n\t\t\tresult += 'a';\n\t\t}\n\t\telse if (s[i] == 'z') {\n\t\t\tresult += 'b';\n\t\t}\n\t\telse {\n\t\t\tresult += s[i] + 2;\n\t\t}\n\t}\n\treturn result;",
        "grade-6": {
            "execution": 0
        },
        "190": "std::string result = \"\";\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tresult += (s[i] + 2) % 256;\n\t}\n\treturn result;",
        "grade-190": {
            "execution": 0
        },
        "71": "std::string encrypted = \"\";\n    for (char& c : s) {\n        if (c == 'z') {\n            encrypted += 'b';\n        } else if (c == 'y') {\n            encrypted += 'a';\n        } else {\n            encrypted += c + 2;\n        }\n    }\n    return encrypted;",
        "grade-71": {
            "execution": 0
        },
        "62": "",
        "grade-62": {
            "execution": 0
        },
        "57": "for(auto& i : s)\n        i = (i + 4) % 26 + 'a';\n    return s;",
        "grade-57": {
            "execution": 0
        },
        "35": "std::string result = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        result += s[i] + 2*2;\n    }\n    return result;",
        "grade-35": {
            "execution": 0
        },
        "189": "const char alphabet [27] = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','\\0'};\n\tstd::string sNew=\"\";\n\tfor(int i=0;i<s.length();i++){\n\t\tint place = s[i] - 'a';\n\t\tsNew += alphabet[(place + 2*2)%26];\n\t}\n\treturn sNew;",
        "grade-189": {
            "execution": 1
        },
        "26": "std::string res;\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (s[i] == 'z') {\n\t\t\tres += 'b';\n\t\t}\n\t\telse if (s[i] == 'y') {\n\t\t\tres += 'a';\n\t\t}\n\t\telse {\n\t\t\tres += s[i] + 2;\n\t\t}\n\t}\n\treturn res;",
        "grade-26": {
            "execution": 0
        },
        "174": "std::string result;\n    int size = s.size();\n    for(int i = 0; i < size; i++) {\n        if(s[i] == 'z') {\n            result = result + 'b';\n        }\n        else if(s[i] == 'y') {\n            result = result + 'a';\n        }\n        else {\n            char ch = s[i];\n            ch = ch + 2;\n            result = result + ch;\n        }\n    }\n    return result;",
        "grade-174": {
            "execution": 0
        },
        "140": "std::string result;\n    for (int i = 0; i < s.length(); i++) {\n        result += s[i] + 4;\n    }\n    return result;",
        "grade-140": {
            "execution": 0
        },
        "22": "char c = 'a';\n  std::string res = \"\";\n  for (char x : s) {\n    res += (char)((x - c + 2 * 2) % 26 + c);\n  }\n  return res;",
        "grade-22": {
            "execution": 1
        },
        "152": "for(int i = 0; i < s.length(); i++) {\n        s[i] += 4;\n    }\n    return s;",
        "grade-152": {
            "execution": 0
        },
        "109": "for(int i = 0; i < s.length(); i++) {\n        s[i] = s[i] + 4;\n    }\n    return s;",
        "grade-109": {
            "execution": 0
        },
        "8": "std::string r = \"\";\n  for (int i = 0; i < s.length(); i++) {\n    r = r + char(s[i] + 2 * 2);\n  }\n  return r;",
        "grade-8": {
            "execution": 0
        },
        "7": "int n = s.length();\n    for (int i = 0; i < n; i++) {\n        s[i] = char(int(s[i]) + 4);\n    }\n    return s;",
        "grade-7": {
            "execution": 0
        },
        "23": "int len = s.length();\n\tfor (int i = 0; i < len; i++) {\n\t\t// subtract number of letters in the alphabet to normalize indexes\n\t\ts[i] -= 26;\n\t\t// shift down by one letter\n\t\ts[i] += 1;\n\t\t// shift down by two letters\n\t\ts[i] += 2;\n\t\t// shift down by another two letters\n\t\ts[i] += 2;\n\t\t// normalize indexes again\n\t\ts[i] += 26;\n\t}\n\treturn s;",
        "grade-23": {
            "execution": 0
        },
        "55": "std::string ret;\n    for (char c : s) {\n        ret += (char)(c + 4);\n    }\n    return ret;",
        "grade-55": {
            "execution": 0
        },
        "59": "std::string t = s;\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tt[i] = s[i] + 4;\n\t}\n\treturn t;",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nlong vowels_count(std::string s) {\n",
        "snippet": [
            "    string vowels=\"aeiouAEIOU\";\n    int count=0;\n    for (int i=0;i<s.length();i++)\n    if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())\n        count+=1;\n    if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;\n    return count;\n}\n"
        ],
        "simplified": "Add more test cases.",
        "task_id": "64",
        "174": "int vowels = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n            vowels += 1;\n        }\n        else if (s[i] == 'y' && i == s.length() - 1) {\n            vowels += 1;\n        }\n    }\n    return vowels;",
        "grade-174": {
            "execution": 0
        },
        "29": "std::set<char> vowels;\n\tvowels.insert('a');\n\tvowels.insert('e');\n\tvowels.insert('i');\n\tvowels.insert('o');\n\tvowels.insert('u');\n\tlong count = 0;\n\tfor (char c : s) {\n\t\tif (vowels.find(tolower(c)) != vowels.end()) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;",
        "grade-29": {
            "execution": 0
        },
        "6": "// Write your code here\n\t// To print results to the standard output you can use 'cout'\n\t// Example: cout << \"Hello world!\";\n\tstring a=\"aeiouy\";\n\tlong count=0;\n\tint i=0;\n\tfor(i=0;i<s.length();i++)\n\t{\n\t\tif(s[i]=='a'||s[i]=='e'||s[i]=='i'||s[i]=='o'||s[i]=='u'||s[i]=='y')\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;",
        "grade-6": {
            "execution": 0
        },
        "73": "long count = 0;\n    if(s.length() > 0){\n        char last = *(s.end()-1);\n        if(last == 'A' || last == 'E' || last == 'I' || last == 'O' || last == 'U' || last == 'Y'){\n            count++;\n        }\n    }\n    for(int i = 0; i < s.length(); i++){\n        char c = s[i];\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'){\n            count++;\n        }\n    }\n    return count;",
        "grade-73": {
            "execution": 0
        },
        "65": "int l = s.length();\n    long ans = 0;\n    for(int i = 0; i < l; i++) {\n        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n            ans++;\n        }\n        if(s[i] == 'y' && i != l - 1) {\n            ans++;\n        }\n    }\n    return ans;",
        "grade-65": {
            "execution": 0
        },
        "60": "// YOUR CODE HERE\n    std::transform(s.begin(), s.end(), s.begin(), ::tolower);\n    long count = 0;\n    int n = s.length();\n    for(int i = 0; i < n; i++) {\n        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n            count++;\n        }\n        if(s[i] == 'y' && i == n-1) {\n            count++;\n        }\n    }\n    return count;",
        "grade-60": {
            "execution": 1
        },
        "36": "std::locale loc;\n    int count = 0;\n    std::string s_lower = s;\n    std::transform(s_lower.begin(), s_lower.end(), s_lower.begin(), ::tolower);\n    for (int i = 0; i < s_lower.length(); i++) {\n        if (s_lower[i] == 'a' || s_lower[i] == 'e' || s_lower[i] == 'i' || s_lower[i] == 'o' || s_lower[i] == 'u') {\n            count++;\n        }\n    }\n    return count;",
        "grade-36": {
            "execution": 0
        },
        "199": "int length = s.length();\n    long count = 0;\n    for (int i = 0; i < length; i++) {\n        char ch = s[i];\n        if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {\n            count++;\n        }\n        if (ch == 'y' && i == length - 1) {\n            count++;\n        }\n    }\n    return count;",
        "grade-199": {
            "execution": 0
        },
        "27": "long count = 0;\n    for (std::string::iterator it = s.begin(); it != s.end(); ++it) {\n        switch (std::tolower(*it)) {\n            case 'a':\n            case 'e':\n            case 'i':\n            case 'o':\n            case 'u':\n                count++;\n                break;\n            case 'y':\n                if (it == s.end() - 1) {\n                    count++;\n                }\n                break;\n            default:\n                break;\n        }\n    }\n    return count;",
        "grade-27": {
            "execution": 1
        },
        "184": "// Write your code here",
        "grade-184": {
            "execution": 0
        },
        "147": "int count = 0;\n  char vowels[] = {'a', 'e', 'i', 'o', 'u', 'y'};\n  // To determine if a word ends with 'y'\n  char last_element = s[s.length() - 1];\n  // std::cout << \"Last Element: \" << last_element << std::endl;\n  for (int i = 0; i < s.length(); i++) {\n    // Checking if each element of the string is equal to the\n    // elements in the array of vowels.\n    // To check if each element is a vowel we have to convert it\n    // to lowercase\n    for (int j = 0; j < sizeof(vowels) / sizeof(vowels[0]); j++) {\n      if (tolower(s[i]) == vowels[j]) {\n        count++;\n      }\n    }\n  }\n  if (last_element == 'y') {\n    count++;\n  }\n  return count;",
        "grade-147": {
            "execution": 0
        },
        "23": "assert(s.length() > 0);\n    long cnt = 0;\n    for (size_t i = 0; i < s.length(); i++) {\n        char c = s[i];\n        if (i == s.length() - 1) {\n            if (c == 'y' || c == 'Y') {\n                cnt++;\n            }\n        } else {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n                cnt++;\n            }\n        }\n    }\n    return cnt;",
        "grade-23": {
            "execution": 0
        },
        "161": "long c = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u')\n            c++;\n    }\n    if (s[s.length() - 1] == 'y')\n        c++;\n    return c;",
        "grade-161": {
            "execution": 0
        },
        "114": "int n = s.length();\n\tlong cnt = 0;\n\tstd::string vowels = \"aeiou\";\n\tfor (int i = 0; i < n; i++) {\n\t\tif (s[i] == 'y' && i == n - 1) {\n\t\t\tcnt++;\n\t\t}\n\t\tfor (int j = 0; j < 5; j++) {\n\t\t\tif (s[i] == vowels[j]) {\n\t\t\t\tcnt++;\n\t\t\t}\n\t\t}\n\t}\n\treturn cnt;",
        "grade-114": {
            "execution": 0
        },
        "8": "long count = 0;\n  for (int i = 0; i < s.length(); i++) {\n    if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n      count++;\n    }\n    if (s[i] == 'y' && i == s.length() - 1) {\n      count++;\n    }\n  }\n  return count;",
        "grade-8": {
            "execution": 0
        },
        "7": "long len=s.length();\n    long result=0;\n    for(long i=0;i<len;i++)\n    {\n        if(s[i]=='a'||s[i]=='e'||s[i]=='i'||s[i]=='o'||s[i]=='u')\n        {\n            result++;\n        }\n        else if(s[i]=='y'&&i==len-1)\n        {\n            result++;\n        }\n    }\n    return result;",
        "grade-7": {
            "execution": 0
        },
        "24": "int n = s.length();\n  long count = 0;\n  for (int i = 0; i < n; i++) {\n    if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n      count++;\n    }\n    if (s[i] == 'y' && (i == n - 1)) {\n      count++;\n    }\n  }\n  return count;",
        "grade-24": {
            "execution": 0
        },
        "58": "assert(s.length() > 0);\n\tlong num_vowels = 0;\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n\t\t\tnum_vowels += 1;\n\t\t}\n\t\telse if (s[i] == 'y' && i != s.length() - 1) {\n\t\t\tnum_vowels += 1;\n\t\t}\n\t}\n\treturn num_vowels;",
        "grade-58": {
            "execution": 0
        },
        "62": "// Write your code here\n    long count = 0;\n    for(char c : s) {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y') {\n            count++;\n        }\n    }\n    return count;",
        "grade-62": {
            "execution": 0
        },
        "135": "long vowels = 0;\n  std::transform(s.begin(), s.end(), s.begin(), ::tolower);\n  for (int i = 0; i < s.length(); i++) {\n    if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n      vowels++;\n    }\n    if (s[i] == 'y' && (i == s.length() - 1)) {\n      vowels++;\n    }\n  }\n  return vowels;",
        "grade-135": {
            "execution": 1
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nstd::tuple<long, long> sum_product(std::vector<long> numbers) {\n",
        "snippet": [
            "    int sum=0,product=1;\n    for (int i=0;i<numbers.size();i++)\n    {\n        sum+=numbers[i];\n        product*=numbers[i];\n    }\n    return {sum,product};\n}\n"
        ],
        "simplified": "For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list. Empty sum should be equal to 0 and empty product should be equal to 1.",
        "task_id": "8",
        "28": "//a = sum, b = product\n\tlong a = 0, b = 1;\n\tif (numbers.size() == 0) {\n\t\ta = 0;\n\t\tb = 1;\n\t}\n\telse {\n\t\tfor (int i = 0; i < numbers.size(); i++) {\n\t\t\ta += numbers[i];\n\t\t\tb *= numbers[i];\n\t\t}\n\t}\n\treturn std::make_tuple(a, b);",
        "grade-28": {
            "execution": 1
        },
        "6": "long sum = 0;\n  long product = 1;\n  if (numbers.size() == 0) {\n    return std::make_tuple(sum, product);\n  }\n  for (long number : numbers) {\n    sum += number;\n    product *= number;\n  }\n  return std::make_tuple(sum, product);",
        "grade-6": {
            "execution": 1
        },
        "75": "long sum = 0;\n    long product = 1;\n    for (long num : numbers) {\n        sum += num;\n        product *= num;\n    }\n    return std::make_tuple(sum, product);",
        "grade-75": {
            "execution": 1
        },
        "64": "long sum = 0;\n    long product = 1;\n    for (int i = 0; i < numbers.size(); i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    std::tuple<long, long> result = std::make_tuple(sum, product);\n    return result;",
        "grade-64": {
            "execution": 1
        },
        "59": "long sum=0, product=1;\n    for(int i=0; i<numbers.size(); i++){\n        sum = sum + numbers[i];\n        product = product * numbers[i];\n    }\n    return {sum, product};",
        "grade-59": {
            "execution": 1
        },
        "36": "// Write your code here!\n  long int s=0,m=1;\n  for(auto i:numbers)\n  {\n    s+=i;\n    m*=i;\n  }\n  return std::make_tuple(s,m);",
        "grade-36": {
            "execution": 1
        },
        "26": "if (numbers.size() == 0)\n\t\treturn std::make_tuple(0, 1);\n\tlong sum = 0;\n\tlong product = 1;\n\tfor (auto i : numbers) {\n\t\tsum += i;\n\t\tproduct *= i;\n\t}\n\treturn std::make_tuple(sum, product);",
        "grade-26": {
            "execution": 1
        },
        "168": "std::tuple<long, long> result(0, 1);\n    for (auto i : numbers) {\n        std::get<0>(result) += i;\n        std::get<1>(result) *= i;\n    }\n    return result;",
        "grade-168": {
            "execution": 1
        },
        "22": "// Write your code here\n    long sum = 0;\n    long prod = 1;\n    for(long i = 0; i < numbers.size(); i++){\n        sum += numbers[i];\n        prod *= numbers[i];\n    }\n    return std::make_tuple(sum, prod);",
        "grade-22": {
            "execution": 1
        },
        "183": "long sum = 0;\n    long product = 1;\n    if (numbers.size() == 0) {\n        return std::make_tuple(sum, product);\n    } else {\n        for (int i = 0; i < numbers.size(); i++) {\n            sum += numbers[i];\n            product *= numbers[i];\n        }\n        return std::make_tuple(sum, product);\n    }",
        "grade-183": {
            "execution": 1
        },
        "131": "std::tuple<long, long> tuple;\n    long sum = 0;\n    long product = 1;\n    for (int i = 0; i < numbers.size(); i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    std::get<0>(tuple) = sum;\n    std::get<1>(tuple) = product;\n    return tuple;",
        "grade-131": {
            "execution": 1
        },
        "8": "long sum,product;\n    sum=0;\n    product=1;\n    for(auto n:numbers){\n        sum+=n;\n        product*=n;\n    }\n    return std::make_tuple(sum,product);",
        "grade-8": {
            "execution": 1
        },
        "7": "long sum = 0;\n  long product = 1;\n  for (int i = 0; i < numbers.size(); i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  std::tuple<long, long> sum_product = std::make_tuple(sum, product);\n  return sum_product;",
        "grade-7": {
            "execution": 1
        },
        "23": "//your code here\n    long sum, product;\n    sum = 0;\n    product = 1;\n    for(int i = 0; i < numbers.size(); i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    std::tuple<long, long> sum_product = std::make_tuple(sum, product);\n    return sum_product;",
        "grade-23": {
            "execution": 1
        },
        "57": "long sum = 0;\n    long product = 1;\n    for (auto const& num : numbers) {\n        sum += num;\n        product *= num;\n    }\n    return std::make_tuple(sum, product);",
        "grade-57": {
            "execution": 1
        },
        "61": "long sum = 0;\n    long product = 1;\n    for (std::vector<long>::iterator it = numbers.begin(); it != numbers.end(); ++it) {\n        sum += *it;\n        product *= *it;\n    }\n    return std::make_tuple(sum, product);",
        "grade-61": {
            "execution": 1
        },
        "156": "long sum = 0;\n    long prod = 1;\n    for (auto number : numbers) {\n        sum += number;\n        prod *= number;\n    }\n    return std::make_tuple(sum, prod);",
        "grade-156": {
            "execution": 1
        },
        "190": "long sum = 0;\n    long product = 1;\n    for (auto ele : numbers) {\n        sum += ele;\n        product *= ele;\n    }\n    return std::make_tuple(sum, product);",
        "grade-190": {
            "execution": 1
        },
        "175": "std::tuple<long, long> numbers_tuple;\n    long sum{0};\n    long product{1};\n    for (auto const & number : numbers) {\n        sum += number;\n        product *= number;\n    }\n    numbers_tuple = std::make_tuple(sum, product);\n    return numbers_tuple;",
        "grade-175": {
            "execution": 1
        },
        "52": "return std::make_tuple(std::accumulate(numbers.begin(), numbers.end(), 0L), std::accumulate(numbers.begin(), numbers.end(), 1L, std::multiplies<long>()));",
        "grade-52": {
            "execution": 1
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n",
        "snippet": [
            "    int count=0;\n    for (int i=0;i<n;i++)\n    if (i%11==0 or i%13==0)\n    {\n        int q=i;\n        while (q>0)\n        {\n            if (q%10==7) count+=1;\n            q=q/10;\n        }\n    } \n    return count;\n}\n"
        ],
        "simplified": "Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.",
        "task_id": "36",
        "165": "long count7=0;\n    for(long i=0;i<n;i++){\n        if(i%11==0 || i%13==0){\n            std::string number = std::to_string(i);\n            for(long j=0;j<number.length();j++){\n                if(number[j]=='7'){\n                    count7++;\n                }\n            }\n        }\n    }\n    return count7;",
        "grade-165": {
            "execution": 1
        },
        "28": "// Write your code here.\n    long count = 0;\n    long i = 13;\n    while(i < n){\n        if(i % 11 == 0 || i % 13 == 0){\n            if(i % 10 == 7) count++;\n            if(i % 100 == 7) count++;\n            if(i % 1000 == 7) count++;\n            if(i % 10000 == 7) count++;\n            if(i % 100000 == 7) count++;\n            if(i % 1000000 == 7) count++;\n            if(i % 10000000 == 7) count++;\n            if(i % 100000000 == 7) count++;\n            if(i % 1000000000 == 7) count++;\n        }\n        i++;\n    }\n    return count;",
        "grade-28": {
            "execution": 0
        },
        "6": "long count = 0;\n\tfor (long i = 7; i < n; i++) {\n\t\tif (i % 7 == 0 && i % 11 == 0 && i % 13 == 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;",
        "grade-6": {
            "execution": 0
        },
        "191": "return (n%77==0)?2:(n%13==0)?1:0;",
        "grade-191": {
            "execution": 0
        },
        "70": "long count = 0;\n    // counting the number of 7s in all numbers below n that are divisible by 11 or 13\n    for (long i = 1; i < n; i++){\n        if (i % 11 == 0 || i % 13 == 0){\n            long temp = i;\n            while (temp > 0){\n                if (temp % 10 == 7){\n                    count++;\n                }\n                temp /= 10;\n            }\n        }\n    }\n    return count;",
        "grade-70": {
            "execution": 1
        },
        "62": "int count = 0;\n    for (int i = 0; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string res = std::to_string(i);\n            for (int j = 0; j < res.length(); j++) {\n                if (res[j] == '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;",
        "grade-62": {
            "execution": 1
        },
        "57": "int count = 0;\n\t// n = n - 1;\n\tfor (int i = 1; i < n; i++) {\n\t\t// cout << i << endl;\n\t\t// cout << \"count = \" << count << endl;\n\t\tif (i % 11 == 0 || i % 13 == 0) {\n\t\t\tstring num = to_string(i);\n\t\t\t// cout << \"num = \" << num << endl;\n\t\t\tfor (int j = 0; j < num.length(); j++) {\n\t\t\t\tif (num[j] == '7') {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;",
        "grade-57": {
            "execution": 0
        },
        "35": "assert(n > 0);\n    long count = 0;\n    for (long i = 1; i < n; i++) {\n        if ((i % 11 == 0 || i % 13 == 0) && to_string(i).find(\"7\") != string::npos) {\n            count++;\n        }\n    }\n    return count;",
        "grade-35": {
            "execution": 0
        },
        "190": "// Write your code here\n\t// To print results to the standard output you can use printf()\n\t// Example: printf(\"%s\", \"Hello world!\");",
        "grade-190": {
            "execution": 0
        },
        "26": "long cnt = 0;\n    for (long i = 1; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string si = std::to_string(i);\n            for (auto it = si.begin(); it != si.end(); it++) {\n                if (*it == '7') {\n                    cnt++;\n                }\n            }\n        }\n    }\n    return cnt;",
        "grade-26": {
            "execution": 1
        },
        "175": "long digit_counter = 0;\n    for (long i = 1; i < n; i++) {\n        if ((i % 11 == 0) || (i % 13 == 0)) {\n            long number = i;\n            while (number > 0) {\n                long digit = number % 10;\n                if (digit == 7) {\n                    digit_counter++;\n                }\n                number /= 10;\n            }\n        }\n    }\n    return digit_counter;",
        "grade-175": {
            "execution": 1
        },
        "140": "long count = 0;\n    int t = 7;\n    while(t < n){\n        if(t % 11 == 0 || t % 13 == 0){\n            std::string s = std::to_string(t);\n            for(int i = 0; i < s.length(); i++){\n                if(s[i] == '7'){\n                    count++;\n                }\n            }\n        }\n        t++;\n    }\n    return count;",
        "grade-140": {
            "execution": 1
        },
        "22": "long count=0;\n    for(long i=1;i<n;i++){\n        if(i%11==0){\n            long copy=i;\n            while(copy!=0){\n                if(copy%10==7){\n                    count++;\n                }\n                copy=copy/10;\n            }\n        }\n        if(i%13==0){\n            long copy=i;\n            while(copy!=0){\n                if(copy%10==7){\n                    count++;\n                }\n                copy=copy/10;\n            }\n        }\n    }\n    return count;",
        "grade-22": {
            "execution": 0
        },
        "152": "long count = 0;\n    long rem = 0;\n    for(long i = 0; i < n; i++) {\n        rem = i % 11;\n        if(rem == 0) {\n            if(i % 13 == 0) {\n                count += 1;\n            }\n            long temp = i;\n            while(temp != 0) {\n                rem = temp % 10;\n                if(rem == 7) {\n                    count += 1;\n                }\n                temp = temp / 10;\n            }\n        }\n    }\n    return count;",
        "grade-152": {
            "execution": 0
        },
        "108": "/* Enter your code here. */\n    assert(n > 0);\n    int count = 0;\n    for(int i = 0; i < n; i++){\n        std::string str = std::to_string(i);\n        if(i % 11 == 0 || i % 13 == 0){\n            for(int j = 0; j < str.length(); j++){\n                if(str[j] == '7'){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;",
        "grade-108": {
            "execution": 1
        },
        "8": "// Check the number of 7s in the numbers divisible by 11 or 13\n  long count = 0;\n  // Iterate through all the numbers less than n\n  // If the number is divisible by 11 or 13, check the number of 7s in it\n  for (long i = 1; i < n; i++) {\n    if (i % 11 == 0 || i % 13 == 0) {\n      std::string s = std::to_string(i);\n      for (int j = 0; j < s.length(); j++) {\n        if (s[j] == '7') {\n          count++;\n        }\n      }\n    }\n  }\n  return count;",
        "grade-8": {
            "execution": 1
        },
        "7": "assert(n >= 1);\n    long count = 0;\n    for (long i = 1; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string str = std::to_string(i);\n            for (char c : str) {\n                if (c == '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;",
        "grade-7": {
            "execution": 1
        },
        "23": "assert(n > 0);\n    int digit;\n    int counter = 0;\n    for (int i = 7; i < n; i += 7) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            int temp = i;\n            while (temp > 0) {\n                digit = temp % 10;\n                if (digit == 7) {\n                    counter++;\n                }\n                temp /= 10;\n            }\n        }\n    }\n    return counter;",
        "grade-23": {
            "execution": 0
        },
        "55": "long count = 0;\n    for (long i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n            std::string i_str = std::to_string(i);\n            if(i_str.find(\"7\") != std::string::npos){\n                count += 1;\n            }\n        }\n    }\n    return count;",
        "grade-55": {
            "execution": 0
        },
        "59": "long count=0;\n    for(long i=1;i<n;i++){\n        if(i%11==0 || i%13==0){\n            std::string str=std::to_string(i);\n            if(str.find(\"7\")!=std::string::npos){\n                count++;\n            }\n        }\n    }\n    return count;",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\nstd::string string_xor(std::string a, std::string b) {\n",
        "snippet": [
            "    string output=\"\";\n    for (int i=0;(i<a.length() and i<b.length());i++)\n    {\n        if (i<a.length() and i<b.length())\n        {\n            if (a[i]== b[i]) \n            {\n                output+='0';\n            }  \n            else output+='1';\n        }\n        else\n        {\n            if (i>=a.length()) \n            {\n            output+=b[i];\n            }\n            else output+=a[i];\n        }\n    }\n    return output;\n}\n"
        ],
        "simplified": "Input are two strings a and b consisting only of 1s and 0s. Perform binary XOR on these inputs and return result also as a string.",
        "task_id": "11",
        "172": "std::string result;\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i] == b[i])\n            result += '0';\n        else\n            result += '1';\n    }\n    return result;",
        "grade-172": {
            "execution": 1
        },
        "28": "std::string result = \"\";\n    int length = a.length();\n    assert(length == b.length());\n    for (int i = 0; i < length; i++) {\n        if (a[i] == b[i]) {\n            result.append(\"0\");\n        } else {\n            result.append(\"1\");\n        }\n    }\n    return result;",
        "grade-28": {
            "execution": 1
        },
        "6": "std::string result=\"\";\n    int length_a = a.length();\n    int length_b = b.length();\n    int length;\n    char temp;\n    assert(length_a == length_b);\n\n    for(int i=0; i<length_a; i++)\n    {\n        int temp_a = a[i] - '0';\n        int temp_b = b[i] - '0';\n        if(temp_a==1 && temp_b==1)\n        {\n            temp = '0';\n        }\n        else if(temp_a==0 && temp_b==0)\n        {\n            temp = '0';\n        }\n        else\n        {\n            temp = '1';\n        }\n        result.push_back(temp);\n    }\n    return result;",
        "grade-6": {
            "execution": 1
        },
        "73": "int aSize = a.size();\n    int bSize = b.size();\n    int minSize = (aSize < bSize) ? aSize : bSize;\n    std::string result = \"\";\n    for (int i = 0; i < minSize; i++) {\n        result += (a[i] ^ b[i]) + '0';\n    }\n    return result;",
        "grade-73": {
            "execution": 1
        },
        "63": "// Assert that the two strings are of the same length.\n    assert(a.length() == b.length());\n    std::string result;\n    for (int i = 0; i < a.length(); i++) {\n        // If one of the bits is 1 and the other is 0, add a 1 to the result.\n        if ((a[i] == '1' && b[i] == '0') || (a[i] == '0' && b[i] == '1')) {\n            result += '1';\n        }\n        // Otherwise, add a 0 to the result.\n        else {\n            result += '0';\n        }\n    }\n    return result;",
        "grade-63": {
            "execution": 1
        },
        "58": "std::string result;\n  for (int i = 0; i < a.size(); i++) {\n    result += (a[i] != b[i]) ? '1' : '0';\n  }\n  return result;",
        "grade-58": {
            "execution": 1
        },
        "35": "// your code here.\n\t\n\treturn a;",
        "grade-35": {
            "execution": 0
        },
        "26": "std::string res;\n\tstd::transform(a.begin(), a.end(), b.begin(), std::back_inserter(res), [](char a, char b) {\n\t\treturn (a == b) ? '0' : '1';\n\t});\n\treturn res;",
        "grade-26": {
            "execution": 1
        },
        "185": "assert(a.size() == b.size());\n\tstd::stringstream res;\n\tfor (int i = 0; i < a.size(); i++) {\n\t\tres << (a[i] ^ b[i]);\n\t}\n\treturn res.str();",
        "grade-185": {
            "execution": 1
        },
        "148": "// assert(a.length() == b.length());\n\tstd::string output;\n\t// for (int i = 0; i < a.length(); i++) {\n\t// \tif (a[i] == b[i]) {\n\t// \t\toutput += '0';\n\t// \t} else {\n\t// \t\toutput += '1';\n\t// \t}\n\t// }\n\tint x = std::stoi(a, nullptr, 2);\n\tint y = std::stoi(b, nullptr, 2);\n\tint z = x ^ y;\n\toutput = std::bitset<32>(z).to_string();\n\toutput = output.substr(output.find('1'));\n\treturn output;",
        "grade-148": {
            "execution": 0
        },
        "22": "std::string result=\"\";\n  assert(a.size()==b.size());\n  int n=a.size();\n  for(int i=0;i<n;i++){\n    if(a[i]==b[i]){\n      result+='0';\n    }\n    else{\n      result+='1';\n    }\n  }\n  return result;",
        "grade-22": {
            "execution": 1
        },
        "160": "assert(a.size() == b.size());\n\tstd::string c = \"\";\n\tfor (int i = 0; i < a.size(); i++) {\n\t\tc += (a[i] == b[i]) ? '0' : '1';\n\t}\n\treturn c;",
        "grade-160": {
            "execution": 1
        },
        "116": "assert(a.size() == b.size());\n    std::string res;\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i] == b[i]) {\n            res += '0';\n        } else {\n            res += '1';\n        }\n    }\n    return res;",
        "grade-116": {
            "execution": 1
        },
        "8": "assert(a.size() == b.size());\n  std::string result;\n  result.reserve(a.size());\n  for (std::size_t i = 0; i < a.size(); ++i) {\n    result.push_back(a[i] == b[i] ? '0' : '1');\n  }\n  return result;",
        "grade-8": {
            "execution": 1
        },
        "7": "assert(a.size() == b.size());\n  std::string answer;\n  for (int i = 0; i < a.size(); i++) {\n    if (a[i] == b[i]) {\n      answer += '0';\n    } else {\n      answer += '1';\n    }\n  }\n  return answer;",
        "grade-7": {
            "execution": 1
        },
        "23": "assert(a.size() == b.size());\n\tstd::string result;\n\tint len = a.size();\n\tfor (int i = 0; i < len; i++) {\n\t\tresult += (a[i] == b[i]) ? '0' : '1';\n\t}\n\treturn result;",
        "grade-23": {
            "execution": 1
        },
        "56": "int len1 = a.length();\n\tint len2 = b.length();\n\tif (len1 > len2) {\n\t\tstd::string temp;\n\t\tfor (int i = 0; i < len1 - len2; i++) {\n\t\t\ttemp += '0';\n\t\t}\n\t\tb = temp + b;\n\t}\n\telse if (len2 > len1) {\n\t\tstd::string temp;\n\t\tfor (int i = 0; i < len2 - len1; i++) {\n\t\t\ttemp += '0';\n\t\t}\n\t\ta = temp + a;\n\t}\n\tstd::string answer;\n\tfor (int i = 0; i < a.length(); i++) {\n\t\tif (a[i] == b[i]) {\n\t\t\tanswer += '0';\n\t\t}\n\t\telse if (a[i] != b[i]) {\n\t\t\tanswer += '1';\n\t\t}\n\t}\n\treturn answer;",
        "grade-56": {
            "execution": 1
        },
        "60": "assert(a.size() == b.size());\n  std::string ans;\n  for (size_t i = 0; i < a.size(); i++) {\n    if (a[i] == b[i]) {\n      ans += '0';\n    } else {\n      ans += '1';\n    }\n  }\n  return ans;",
        "grade-60": {
            "execution": 1
        },
        "138": "std::stringstream ss;\n  for (size_t i = 0; i < a.size(); ++i) {\n    if (a[i] == b[i]) {\n      ss << '0';\n    } else {\n      ss << '1';\n    }\n  }\n  return ss.str();",
        "grade-138": {
            "execution": 1
        },
        "163": "std::string result = \"\";\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b[i]) {\n            result += '0';\n        } else {\n            result += '1';\n        }\n    }\n    return result;",
        "grade-163": {
            "execution": 1
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nstd::vector<long> factorize(long n) {\n",
        "snippet": [
            "    vector<int> out={};\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0)\n        {\n            n=n/i;\n            out.push_back(i);\n            i-=1;\n        }\n    out.push_back(n);\n    return out;\n}\n"
        ],
        "simplified": "Return list of prime factors of given integer in the order from smallest to largest. Each of the factors should be listed number of times corresponding to how many times it appeares in factorization. Input number should be equal to the product of all factors",
        "task_id": "25",
        "172": "assert(n > 0);\n  std::vector<long> factors;\n  for (long i = 2; i * i <= n; i++) {\n    while (n % i == 0) {\n      factors.push_back(i);\n      n /= i;\n    }\n  }\n  if (n > 1)\n    factors.push_back(n);\n  return factors;",
        "grade-172": {
            "execution": 1
        },
        "28": "std::vector<long> res;\n    for (long i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            res.push_back(i);\n            while (n % i == 0) {\n                n /= i;\n            }\n        }\n    }\n    if (n > 1) {\n        res.push_back(n);\n    }\n    return res;",
        "grade-28": {
            "execution": 0
        },
        "6": "std::vector<long> res;\n    if (n == 1 || n == 0) {\n        res.push_back(n);\n        return res;\n    }\n    if (n == 2) {\n        res.push_back(2);\n        return res;\n    }\n    long num = n;\n    while (num % 2 == 0) {\n        res.push_back(2);\n        num /= 2;\n    }\n    for (long i = 3; i * i <= num; i += 2) {\n        while (num % i == 0) {\n            res.push_back(i);\n            num /= i;\n        }\n    }\n    if (num > 2) {\n        res.push_back(num);\n    }\n    return res;",
        "grade-6": {
            "execution": 1
        },
        "70": "std::vector<long> res;\n    while(n>1){\n        int i=2;\n        while(n%i!=0){\n            i++;\n        }\n        res.push_back(i);\n        n/=i;\n    }\n    return res;",
        "grade-70": {
            "execution": 1
        },
        "62": "std::vector<long> res;\n    while(n%2==0){\n        res.push_back(2);\n        n/=2;\n    }\n    for(long i=3;i<=sqrt(n);i+=2){\n        while(n%i==0){\n            res.push_back(i);\n            n/=i;\n        }\n    }\n    if(n>2)\n        res.push_back(n);\n    return res;",
        "grade-62": {
            "execution": 1
        },
        "57": "// Write your code here\n    std::vector<long> res;\n    while(n % 2 == 0) {\n        res.push_back(2);\n        n /= 2;\n    }\n    for(long i = 3; i <= n; i += 2) {\n        while(n % i == 0) {\n            res.push_back(i);\n            n /= i;\n        }\n    }\n    return res;",
        "grade-57": {
            "execution": 1
        },
        "35": "std::vector<long> factors;\n    if (n % 2 == 0) {\n        factors.push_back(2);\n        n /= 2;\n    }\n    while (n % 2 == 0) {\n        factors.push_back(2);\n        n /= 2;\n    }\n    // i += 2 to skip all the even numbers\n    for (long i = 3; i * i <= n; i += 2) {\n        if (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n        }\n        while (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n    if (n > 2) {\n        factors.push_back(n);\n    }\n    return factors;",
        "grade-35": {
            "execution": 1
        },
        "26": "std::vector<long> res;\n    while (n % 2 == 0) {\n        res.push_back(2);\n        n /= 2;\n    }\n    for (long i = 3; i * i <= n; i += 2) {\n        while (n % i == 0) {\n            res.push_back(i);\n            n /= i;\n        }\n    }\n    if (n > 2)\n        res.push_back(n);\n    return res;",
        "grade-26": {
            "execution": 1
        },
        "184": "std::vector<long> ret_v;\n    if (n<=1) {\n        ret_v.push_back(n);\n        return ret_v;\n    }\n    else {\n        for (long i=2; i<=n; i++) {\n            while (n%i==0) {\n                ret_v.push_back(i);\n                n = n/i;\n            }\n        }\n        return ret_v;\n    }",
        "grade-184": {
            "execution": 1
        },
        "143": "if (n == 1) {\n    return {};\n  }\n  for (long i = 2; i < n; i++) {\n    if (n % i == 0) {\n      auto r = factorize(n / i);\n      r.push_back(i);\n      return r;\n    }\n  }\n  return {n};",
        "grade-143": {
            "execution": 0
        },
        "22": "std::vector<long> list;\n    int temp = n;\n    while(n%2==0){\n        list.push_back(2);\n        n = n/2;\n    }\n    for(int i=3;i<=sqrt(n);i+=2){\n        while(n%i==0){\n            list.push_back(i);\n            n = n/i;\n        }\n    }\n    if(n>2){\n        list.push_back(n);\n    }\n    return list;",
        "grade-22": {
            "execution": 1
        },
        "158": "std::vector<long> result;\n\tfor (long d = 2; d * d <= n; ++d) {\n\t\tint p = 0;\n\t\twhile (n % d == 0) {\n\t\t\t++p;\n\t\t\tn /= d;\n\t\t}\n\t\tfor (int i = 0; i < p; ++i)\n\t\t\tresult.push_back(d);\n\t}\n\tif (n > 1)\n\t\tresult.push_back(n);\n\treturn result;",
        "grade-158": {
            "execution": 1
        },
        "109": "std::vector<long> result;\n    for (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            result.push_back(i);\n            n /= i;\n        }\n    }\n    return result;",
        "grade-109": {
            "execution": 1
        },
        "8": "std::vector<long> result;\n    for (long i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            result.push_back(i);\n            n /= i;\n        }\n    }\n    if (n > 1) {\n        result.push_back(n);\n    }\n    return result;",
        "grade-8": {
            "execution": 1
        },
        "7": "assert(n>0);\n    std::vector<long> result;\n    while(n%2==0){\n        result.push_back(2);\n        n=n/2;\n    }\n    for(long i=3;i<=sqrt(n);i+=2){\n        while(n%i==0){\n            result.push_back(i);\n            n=n/i;\n        }\n    }\n    if(n>2){\n        result.push_back(n);\n    }\n    return result;",
        "grade-7": {
            "execution": 1
        },
        "23": "std::vector<long> factors;\n    factors.push_back(1);\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            factors.push_back(i);\n            if (i != sqrt(n)) {\n                factors.push_back(n / i);\n            }\n        }\n    }\n    std::sort(factors.begin(), factors.end());\n    return factors;",
        "grade-23": {
            "execution": 0
        },
        "55": "std::vector<long> ret;\n    while(n%2==0){\n        ret.push_back(2);\n        n=n/2;\n    }\n    while(n%3==0){\n        ret.push_back(3);\n        n=n/3;\n    }\n    long i=5;\n    while(i*i<=n){\n        while(n%i==0){\n            ret.push_back(i);\n            n=n/i;\n        }\n        i+=2;\n    }\n    if(n>1){\n        ret.push_back(n);\n    }\n    return ret;",
        "grade-55": {
            "execution": 1
        },
        "59": "if (n < 2) return std::vector<long>();\n    std::vector<long> factors;\n    while (n % 2 == 0) {\n        factors.push_back(2);\n        n /= 2;\n    }\n    for (long i = 3; i <= std::sqrt(n); i += 2) {\n        while (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n    if (n > 2) {\n        factors.push_back(n);\n    }\n    return factors;",
        "grade-59": {
            "execution": 1
        },
        "132": "std::vector<long> factors;\n    std::map<long, int> factors_map;\n    while (n % 2 == 0) {\n        factors_map[2]++;\n        n = n / 2;\n    }\n    for (long i = 3; i <= sqrt(n); i = i + 2) {\n        while (n % i == 0) {\n            factors_map[i]++;\n            n = n / i;\n        }\n    }\n    if (n > 2) {\n        factors_map[n]++;\n    }\n    for (auto factor : factors_map) {\n        for (int i = 0; i < factor.second; i++) {\n            factors.push_back(factor.first);\n        }\n    }\n    return factors;",
        "grade-132": {
            "execution": 1
        },
        "162": "std::vector<long> factors;\n  for (long d = 2; d * d <= n; d++) {\n    while (n % d == 0) {\n      factors.push_back(d);\n      n /= d;\n    }\n  }\n  if (n > 1) {\n    factors.push_back(n);\n  }\n  return factors;",
        "grade-162": {
            "execution": 1
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return True. Otherwise it should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1, 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n",
        "snippet": [
            "    int num=0;\n    for (int i=0;i<operations.size();i++)\n    {\n        num+=operations[i];\n        if (num<0) return true;\n    }\n    return false;\n}\n"
        ],
        "simplified": "You're given a list of deposit and withdrawal operations on a bank account that starts with zero balance. Your task is to detect if at any point the balance of account fallls below zero, and at that point function should return True. Otherwise it should return False.",
        "task_id": "3",
        "193": "long current_balance = 0;\n    long size = operations.size();\n    for (int i = 0; i < size; i++) {\n        current_balance += operations[i];\n        if (current_balance < 0)\n            return true;\n    }\n    return false;",
        "grade-193": {
            "execution": 1
        },
        "28": "int sum = 0;\n    for (int i = 0; i < operations.size(); i++) {\n        sum += operations[i];\n        if (sum < 0)\n            return true;\n    }\n    return false;",
        "grade-28": {
            "execution": 1
        },
        "6": "// 1:\n  // for (unsigned int i = 0; i < operations.size(); i++) {\n  //   long sum = 0;\n  //   for (unsigned int j = 0; j <= i; j++) {\n  //     sum += operations[j];\n  //   }\n  //   if (sum < 0) {\n  //     return true;\n  //   }\n  // }\n  // return false;\n\n  // 2:\n  long sum = 0;\n  for (auto i : operations) {\n    sum += i;\n    if (sum < 0) {\n      return true;\n    }\n  }\n  return false;",
        "grade-6": {
            "execution": 1
        },
        "77": "long sum = 0;\n    for (auto x : operations) {\n        sum += x;\n        if (sum < 0) {\n            return true;\n        }\n    }\n    return false;",
        "grade-77": {
            "execution": 1
        },
        "68": "int len = operations.size();\n\t// Process all queries one by one\n\tint res = 0;\n\tfor (int i = 0; i < len; i++) {\n\t\tif (operations[i] > 0)\n\t\t\tres += operations[i];\n\t\telse\n\t\t\tres -= operations[i];\n\t\tif (res < 0)\n\t\t\treturn true;\n\t}\n\treturn false;",
        "grade-68": {
            "execution": 0
        },
        "61": "int n = operations.size();\n\tint current_balance = 0;\n\tfor (int i = 0; i < n; i++) {\n\t\tcurrent_balance += operations[i];\n\t\tif (current_balance < 0)\n\t\t\treturn true;\n\t}\n\treturn false;",
        "grade-61": {
            "execution": 1
        },
        "36": "for (int i = 0; i < operations.size(); i++) {\n    if (i + 1 < operations.size()) {\n      operations[i + 1] += operations[i];\n    }\n  }\n  for (int i = 0; i < operations.size(); i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;",
        "grade-36": {
            "execution": 1
        },
        "26": "long sum = 0;\n\tfor (long i = 0; i < operations.size(); i++) {\n\t\tsum += operations[i];\n\t\tif (sum < 0) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;",
        "grade-26": {
            "execution": 1
        },
        "160": "// Your code here\n    return false;",
        "grade-160": {
            "execution": 0
        },
        "22": "// Write your code here\n    int sum = 0;\n    for(int i = 0; i < operations.size(); i++){\n        sum = sum + operations[i];\n        if(sum < 0){\n            return true;\n        }\n    }\n    return false;",
        "grade-22": {
            "execution": 1
        },
        "177": "long long balance = 0;\n    for (auto operation : operations) {\n        balance += operation;\n        if (balance < 0) return true;\n    }\n    return false;",
        "grade-177": {
            "execution": 1
        },
        "126": "long balance=0;\n  int n=operations.size();\n  for(int i=0;i<n;i++)\n  {\n  \tbalance+=operations[i];\n  \tif(balance<0)\n  \t{\n  \t\treturn true;\n\t  }\n  }\n  \n  return false;",
        "grade-126": {
            "execution": 1
        },
        "8": "long n = operations.size();\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += operations[i];\n        if (sum < 0) {\n            return true;\n        }\n    }\n    return false;",
        "grade-8": {
            "execution": 1
        },
        "7": "std::vector<long>::iterator it = operations.begin();\n    long sum = 0;\n    for (it; it != operations.end(); it++) {\n        sum += *it;\n        if (sum < 0)\n            return true;\n    }\n    return false;",
        "grade-7": {
            "execution": 1
        },
        "23": "long total = 0;\n    for (auto operation : operations) {\n        total += operation;\n        if (total < 0) {\n            return true;\n        }\n    }\n    return false;",
        "grade-23": {
            "execution": 1
        },
        "59": "// Your code goes here!\n    int curr_balance = 0;\n    for (int i = 0; i < operations.size(); i++) {\n        curr_balance += operations[i];\n        if (curr_balance < 0) {\n            return true;\n        }\n    }\n    return false;",
        "grade-59": {
            "execution": 1
        },
        "65": "long sum=0;\n    for(auto& op:operations){\n        sum+=op;\n        if(sum<0) return true;\n    }\n    return false;",
        "grade-65": {
            "execution": 1
        },
        "148": "long balance = 0;\n\tfor (int i = 0; i < operations.size(); i++) {\n\t\tbalance += operations[i];\n\t\tif (balance < 0) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;",
        "grade-148": {
            "execution": 1
        },
        "180": "int balance = 0;\n  for (auto& i : operations) {\n    balance += i;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;",
        "grade-180": {
            "execution": 1
        },
        "168": "long s = 0;\n  for (auto i : operations)\n    s += i;\n  return s < 0;",
        "grade-168": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long w) {\n",
        "snippet": [
            "    int sum=0;\n    for (int i=0;i<q.size();i++)\n    {\n        if (q[i]!=q[q.size()-1-i]) return false;\n        sum+=q[i];\n    }\n    if (sum>w) return false;\n    return true;\n}\n"
        ],
        "simplified": "Write a function that returns True if the object q will fly, and False otherwise. The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.",
        "task_id": "72",
        "164": "std::reverse(q.begin(), q.end());\n\treturn std::equal(q.begin(), q.end(), q.rbegin()) && std::accumulate(q.begin(), q.end(), 0) <= w;",
        "grade-164": {
            "execution": 1
        },
        "28": "//int sum = 0;\n\t//for (int i = 0; i < q.size(); i++) {\n\t//\tsum += q[i];\n\t//}\n\t//if (sum > w) {\n\t//\treturn false;\n\t//}\n\t//for (int i = 0; i < q.size() / 2; i++) {\n\t//\tif (q[i] != q[q.size() - 1 - i]) {\n\t//\t\treturn false;\n\t//\t}\n\t//}\n\t//return true;\n\t//int l = 0, r = q.size() - 1;\n\t//int sum = 0;\n\t//while (l < r) {\n\t//\tif (q[l] != q[r]) {\n\t//\t\treturn false;\n\t//\t}\n\t//\tsum += q[l];\n\t//\tl++;\n\t//\tr--;\n\t//}\n\t//if (sum > w) {\n\t//\treturn false;\n\t//}\n\t//return true;\n\tint sum = 0;\n\tfor (int i = 0; i < q.size(); i++) {\n\t\tsum += q[i];\n\t}\n\tif (sum > w) {\n\t\treturn false;\n\t}\n\tint l = 0, r = q.size() - 1;\n\twhile (l < r) {\n\t\tif (q[l] != q[r]) {\n\t\t\treturn false;\n\t\t}\n\t\tl++;\n\t\tr--;\n\t}\n\treturn true;",
        "grade-28": {
            "execution": 1
        },
        "6": "int n = q.size();\n\tint i = 0;\n\tbool is_balanced = true;\n\tif (n % 2 == 0) {\n\t\tint l = 0;\n\t\tint r = n - 1;\n\t\twhile (l < r) {\n\t\t\tif (q[l] != q[r]) {\n\t\t\t\tis_balanced = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tl++;\n\t\t\tr--;\n\t\t}\n\t}\n\telse {\n\t\tint l = 0;\n\t\tint r = n - 1;\n\t\twhile (l < r) {\n\t\t\tif (q[l] != q[r]) {\n\t\t\t\tis_balanced = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tl++;\n\t\t\tr--;\n\t\t}\n\t}\n\tif (is_balanced) {\n\t\tlong curr_w = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tcurr_w += q[i];\n\t\t}\n\t\tif (curr_w <= w) {\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n\telse {\n\t\treturn false;\n\t}",
        "grade-6": {
            "execution": 1
        },
        "190": "//(1) If a list is empty, then it is palindromic.\n\t//(2) If the list contains only one element, then it is palindromic.\n\t//(3) Otherwise, if the first and last elements are equal, then if the sublist that excludes the first and last elements is palindromic, so is the whole list.\n\t//(4) Otherwise, the list is not palindromic.\n\t//(5) The base cases are easy to check: either the list is empty or it has only one element.\n\t//(6) For the inductive step, if the first and last elements are equal, then we can check the sublist that excludes the first and last elements.\n\t//(7) We continue to do this until we reach a base case.\n\t//(8) For example, if the list is [1,3,4,3,1], then the first and last elements are equal and the sublist [3,4,3] is palindromic.\n\t//(9) If the list is [1,3,4,4,3,1], then the first and last elements are equal and the sublist [3,4,4,3] is palindromic.\n\t//(10) If the list is [1,3,4,4,4,3,1], then the first and last elements are equal and the sublist [3,4,4,4,3] is palindromic.\n\t//(11) If the list is [1,3,4,4,4,4,3,1], then the first and last elements are equal and the sublist [3,4,4,4,4,3] is palindromic.\n\t//(12) If the list is [1,3,4,4,4,4,4,3,1], then the first and last elements are equal and the sublist [3,4,4,4,4,4,3] is palindromic.\n\t//(13) In all cases, the first and last elements are equal, so the sublist is palindromic.\n\t//(14) It is a simple matter to combine the two predicates:\n\t//(15) We can use a helper function,",
        "grade-190": {
            "execution": 0
        },
        "70": "long sum = 0;\n\tfor (int i = 0; i < q.size(); i++) {\n\t\tsum += q[i];\n\t}\n\tif (sum <= w) {\n\t\tstd::vector<long> copy(q);\n\t\tstd::reverse(copy.begin(), copy.end());\n\t\tfor (int i = 0; i < q.size(); i++) {\n\t\t\tif (q[i] != copy[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\treturn false;",
        "grade-70": {
            "execution": 1
        },
        "62": "long weight = 0;\n\tfor (long i = 0; i < q.size(); i++)\n\t\tweight += q[i];\n\tif (weight > w)\n\t\treturn false;\n\tfor (long i = 0; i < q.size() / 2; i++)\n\t\tif (q[i] != q[q.size() - i - 1])\n\t\t\treturn false;\n\treturn true;",
        "grade-62": {
            "execution": 1
        },
        "57": "if(q.size() == 1) return true;\n\tlong sum = std::accumulate(q.begin(), q.end(), 0);\n\tstd::string first = \"\";\n\tstd::string second = \"\";\n\tfor(int i = 0; i < q.size()/2; i++){\n\t\tfirst += std::to_string(q[i]);\n\t}\n\tfor(int i = q.size()-1; i >= q.size()/2; i--){\n\t\tsecond += std::to_string(q[i]);\n\t}\n\tif(sum <= w && first == second) return true;\n\treturn false;",
        "grade-57": {
            "execution": 0
        },
        "35": "auto sum = 0;\n\tfor (auto& i : q) {\n\t\tsum += i;\n\t}\n\tauto dup = q;\n\tstd::reverse(dup.begin(), dup.end());\n\treturn sum <= w && q == dup;",
        "grade-35": {
            "execution": 1
        },
        "189": "//int len = q.size();\n\t//int front =0;\n\t//int back = len-1;\n\t//while(front < back){\n\t//\tif(q[front] != q[back]){\n\t//\t\treturn false;\n\t//\t}\n\t//\tfront++;\n\t//\tback--;\n\t//}\n\t//int sum = std::accumulate(q.begin(), q.end(), 0);\n\t//if(sum <= w){\n\t//\treturn true;\n\t//}\n\tint len = q.size();\n\tint mid = len/2;\n\tif(len == 0 || len == 1){\n\t\treturn true;\n\t}\n\tif(q[mid] != q[mid-1]){\n\t\treturn false;\n\t}\n\tint sum = std::accumulate(q.begin(), q.end(), 0);\n\tif(sum <= w){\n\t\treturn true;\n\t}\n\treturn false;",
        "grade-189": {
            "execution": 0
        },
        "26": "// get sum of the vector\n  long sum = 0;\n  for (long elem : q) {\n    sum += elem;\n  }\n  // return (sum <= w) && (q == std::vector<long>(q.rbegin(), q.rend()));\n  return (sum <= w) && (q == std::vector<long>(q.crbegin(), q.crend()));",
        "grade-26": {
            "execution": 1
        },
        "174": "long sum = 0;\n\tbool result = false;\n\tfor (auto i : q) {\n\t\tsum += i;\n\t}\n\tif (sum <= w) {\n\t\tstd::vector<long> d(q.size());\n\t\tstd::reverse_copy(q.begin(), q.end(), d.begin());\n\t\tif (q == d) {\n\t\t\tresult = true;\n\t\t}\n\t}\n\treturn result;",
        "grade-174": {
            "execution": 1
        },
        "140": "long sum=0;\n\tint n=q.size();\n\tif(n==1)\n\t\treturn true;\n\tfor(int i=0;i<n;i++)\n\t\tsum+=q[i];\n\tif(sum>w)\n\t\treturn false;\n\tint i=0,j=n-1;\n\twhile(i<j)\n\t{\n\t\tif(q[i]!=q[j])\n\t\t\treturn false;\n\t\ti++;\n\t\tj--;\n\t}\n\treturn true;",
        "grade-140": {
            "execution": 1
        },
        "22": "int sum = 0;\n\tstd::vector<long> tmp = q;\n\tfor (int i = 0; i < q.size(); i++) {\n\t\tsum += q[i];\n\t}\n\tif (sum <= w) {\n\t\tstd::reverse(tmp.begin(), tmp.end());\n\t\tif (tmp == q)\n\t\t\treturn true;\n\t}\n\treturn false;",
        "grade-22": {
            "execution": 1
        },
        "152": "int front = 0;\n  int back = q.size() - 1;\n  long sum = 0;\n  while (front < back) {\n    if (q[front] != q[back]) {\n      return false;\n    }\n    front++;\n    back--;\n  }\n  for (int i = 0; i < q.size(); i++) {\n    sum += q[i];\n  }\n  if (sum <= w) {\n    return true;\n  }\n  return false;",
        "grade-152": {
            "execution": 1
        },
        "108": "if (q.size() == 1) {\n\t\treturn true;\n\t}\n\tlong long sum = 0;\n\tfor (long i = 0; i < q.size(); i++) {\n\t\tsum += q[i];\n\t}\n\tif (sum > w) {\n\t\treturn false;\n\t}\n\tint size = q.size();\n\tint l = 0;\n\tint r = size - 1;\n\tint mid = (l + r) / 2;\n\tint k = 0;\n\tstd::vector<long> a;\n\twhile (l <= r) {\n\t\ta.push_back(q[mid]);\n\t\tmid++;\n\t\tl++;\n\t}\n\twhile (a[k] == q[k]) {\n\t\tk++;\n\t}\n\tif (k == size) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}",
        "grade-108": {
            "execution": 0
        },
        "8": "if (q.size() == 1){\n\t\tif (q[0] < w){\n\t\t\treturn true;\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t}\n\tlong sum = 0;\n\tint length = q.size();\n\tfor (int i = 0; i < length; i++){\n\t\tsum += q[i];\n\t}\n\tif (sum > w){\n\t\treturn false;\n\t}\n\telse{\n\t\tfor (int i = 0; i < length / 2; i++){\n\t\t\tif (q[i] != q[length - i - 1]){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}",
        "grade-8": {
            "execution": 0
        },
        "7": "long sum=0;\n    for(int i=0;i<q.size();i++)\n        sum+=q[i];\n    if(sum>w)\n        return false;\n    else\n    {\n        int i=0,j=q.size()-1;\n        while(i<j)\n        {\n            if(q[i]!=q[j])\n                return false;\n            i++;\n            j--;\n        }\n        return true;\n    }",
        "grade-7": {
            "execution": 1
        },
        "23": "bool res = true;\n\tif (std::accumulate(q.begin(), q.end(), 0) > w) {\n\t\tres = false;\n\t}\n\tif (q[0] != q[q.size() - 1]) {\n\t\tres = false;\n\t}\n\treturn res;",
        "grade-23": {
            "execution": 1
        },
        "55": "long sum = 0;\n\tfor (long &i : q) {\n\t\tsum += i;\n\t}\n\tbool is_palindrome = true;\n\tfor (int i = 0; i < q.size() / 2; i++) {\n\t\tif (q[i] != q[q.size() - 1 - i]) {\n\t\t\tis_palindrome = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (is_palindrome) {\n\t\tif (sum <= w) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;",
        "grade-55": {
            "execution": 1
        },
        "59": "std::vector<long> r;\n\tr = q;\n\tstd::reverse(r.begin(), r.end());\n\tlong sum = 0;\n\tfor (auto i : q)\n\t\tsum += i;\n\treturn ((q == r) && (sum <= w));",
        "grade-59": {
            "execution": 1
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") => 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string s) {\n",
        "snippet": [
            "    int sum=0;\n    for (int i=0;i<s.length();i++)\n        if (s[i]>=65 and s[i]<=90)\n            sum+=s[i];\n    return sum;\n}\n"
        ],
        "simplified": "Task Write a function that takes a string as input and returns the sum of the upper characters only' ASCII codes.",
        "task_id": "66",
        "182": "int sum = 0;\n  std::vector<int> arr = {};\n  for (int i = 0; i < s.length(); i++) {\n    if (s[i] > 64 && s[i] < 91) {\n      sum += s[i];\n    }\n  }\n  return sum;",
        "grade-182": {
            "execution": 1
        },
        "30": "long sum = 0;\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] >= 'A' && s[i] <= 'Z')\n        {\n            sum += s[i];\n        }\n    }\n    return sum;",
        "grade-30": {
            "execution": 1
        },
        "6": "return std::accumulate(s.begin(), s.end(), 0,\n                         [](long acc, const char c) {\n                           return c >= 'A' && c <= 'Z' ? acc + c : acc;\n                         });",
        "grade-6": {
            "execution": 1
        },
        "77": "// Your code goes here!\n\tlong sum = 0;\n\tfor (int i = 0; i < s.length(); i++) {\n\t\t// std::cout << s[i] << \" \" << (int)s[i] << std::endl;\n\t\tif (s[i] >= 65 && s[i] <= 90) {\n\t\t\tsum += (int)s[i];\n\t\t}\n\t}\n\treturn sum;",
        "grade-77": {
            "execution": 1
        },
        "68": "long sum = 0;\n\tfor (char c : s)\n\t\tif (isupper(c))\n\t\t\tsum += c;\n\treturn sum;",
        "grade-68": {
            "execution": 1
        },
        "62": "long sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if (s[i] >= 'A' && s[i] <= 'Z')\n            sum += (int)s[i];\n    }\n    return sum;",
        "grade-62": {
            "execution": 1
        },
        "37": "return std::accumulate(s.begin(), s.end(), 0, [](int acc, char c) {\n        if (isupper(c))\n            return acc + c;\n        return acc;\n    });",
        "grade-37": {
            "execution": 1
        },
        "28": "// Enter code here\n  long long sum=0;\n  for(int i=0;i<s.length();i++)\n  {\n      if(isupper(s[i]))\n        sum+=s[i];\n  }\n  return sum;",
        "grade-28": {
            "execution": 1
        },
        "196": "if (s.empty()) return 0;\n  long sum = 0;\n  for (int i = 0; i < s.size(); i++) {\n    if (s[i] >= 'A' && s[i] <= 'Z') sum += s[i];\n  }\n  return sum;",
        "grade-196": {
            "execution": 1
        },
        "156": "long sum = 0;\n  if (s.empty()) {\n    return sum;\n  }\n  else {\n    for (char &x : s) {\n      if (isupper(x)) {\n        sum += x;\n      }\n    }\n    return sum;\n  }",
        "grade-156": {
            "execution": 1
        },
        "24": "int sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if(s[i] >= 'A' && s[i] <= 'Z') {\n            sum += s[i];\n        }\n    }\n    return sum;",
        "grade-24": {
            "execution": 1
        },
        "168": "long sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if(s[i] <= 'Z' && s[i] >= 'A') {\n            sum += s[i];\n        }\n    }\n    return sum;",
        "grade-168": {
            "execution": 1
        },
        "119": "int sum = 0;\n    if(s.size()==0) return 0;\n    for(int i=0;i<s.size();i++){\n        if(s[i]>='A' && s[i]<='Z')\n            sum += s[i];\n    }\n    return sum;",
        "grade-119": {
            "execution": 1
        },
        "8": "int sum=0;\n    for(int i=0;i<s.length();i++){\n        if(isupper(s[i])){\n            sum+=s[i];\n        }\n    }\n    return sum;",
        "grade-8": {
            "execution": 1
        },
        "7": "//cout << s;\n  int sum = 0;\n  for(char c : s){\n    if(isupper(c))\n      sum += c;\n  }\n  return sum;",
        "grade-7": {
            "execution": 1
        },
        "25": "long result = 0;\n  int temp = 0;\n  for (int i = 0; i < s.length(); i++) {\n    temp = (int)s[i];\n    if (temp >= 65 && temp <= 90) {\n      result += temp;\n    }\n  }\n  return result;",
        "grade-25": {
            "execution": 1
        },
        "60": "//  function that takes a string as input and returns the sum of the upper characters only\n  //  ASCII codes.\n  //  Examples:\n  //  digitSum(\"\") => 0\n  //  digitSum(\"abAB\") => 131\n  //  digitSum(\"abcCd\") => 67\n  //  digitSum(\"helloE\") => 69\n  //  digitSum(\"woArBld\") => 131\n  //  digitSum(\"aAaaaXa\") => 153\n  // your code here\n  long sum = 0;\n  for (auto & c : s)\n    if (isupper(c)) sum += c;\n  return sum;",
        "grade-60": {
            "execution": 1
        },
        "65": "long sum = 0;\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif ((int)s[i] >= 65 && (int)s[i] <= 90) {\n\t\t\tsum += (int)s[i];\n\t\t}\n\t}\n\treturn sum;",
        "grade-65": {
            "execution": 1
        },
        "142": "// your code here\n    int sum = 0;\n    for(int i = 0; i < s.length(); i++){\n        if((int)s[i] >= 65 && (int)s[i] <= 90){\n            sum = sum + (int)s[i];\n        }\n    }\n    return sum;",
        "grade-142": {
            "execution": 1
        },
        "172": "// Check if string is empty\n\tif (s.empty()) {\n\t\treturn 0;\n\t}\n\t// Make result a double because if it is an int it would go out of scope\n\tdouble result = 0;\n\t// Iterate through the string and check if the character is uppercase\n\tfor (int i = 0; i < s.length(); i++) {\n\t\t// If it is uppercase add the value to the result\n\t\tif (isupper(s[i])) {\n\t\t\tresult += s[i];\n\t\t}\n\t}\n\t// Cast the result back to an int because there is no need for the extra\n\t// decimals\n\treturn (int)result;",
        "grade-172": {
            "execution": 1
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\nstd::optional<long> prod_signs(std::vector<long> arr) {\n",
        "snippet": [
            "    if (arr.size()==0) return -32768;\n    int i,sum=0,prods=1;\n    for (i=0;i<arr.size();i++)\n    {\n        sum+=abs(arr[i]);\n        if (arr[i]==0) prods=0;\n        if (arr[i]<0) prods=-prods;\n   }\n   return sum*prods;\n}\n"
        ],
        "simplified": "You are given an array arr of integers and you need to return sum of magnitudes of integers multiplied by product of all signs of each number in the array, represented by 1, -1 or 0. Note: return None for empty arr.",
        "task_id": "128",
        "164": "// your code here\n    return 0;",
        "grade-164": {
            "execution": 0
        },
        "28": "// your code here\n  long product = 1;\n  long sum = 0;\n  int count = 0;\n  for(int i = 0; i < arr.size(); i++){\n    if(arr[i] > 0){\n      count++;\n      product *= 1;\n      sum += arr[i];\n    }\n    else if(arr[i] < 0){\n      count++;\n      product *= -1;\n      sum += arr[i];\n    }\n    else if(arr[i] == 0){\n      count++;\n      product *= 0;\n      sum += arr[i];\n    }\n  }\n  if(count != 0){\n    return product * sum;\n  }\n  else{\n    return std::nullopt;\n  }",
        "grade-28": {
            "execution": 0
        },
        "6": "// return std::nullopt;\n    // return std::make_optional(0L);\n    long sum = 0;\n    for (auto it = arr.begin(); it != arr.end(); it++) {\n        sum += *it;\n    }\n    return std::make_optional(sum);",
        "grade-6": {
            "execution": 0
        },
        "191": "if (arr.empty()) {\n    return std::nullopt;\n  }\n  int sign = 0;\n  long product = 1;\n  long sum = 0;\n  for (auto elem : arr) {\n    sign = std::signbit(elem) ? -1 : 1;\n    if (sign == 0) {\n      product = product * 0;\n    } else {\n      product = product * sign;\n    }\n    sum = sum + std::abs(elem);\n  }\n  return product * sum;",
        "grade-191": {
            "execution": 0
        },
        "70": "if (arr.empty()) return std::nullopt;\n  long s = 1;\n  long sum = 0;\n  for (auto a : arr) {\n    if (a != 0) {\n      s *= (a / abs(a));\n      sum += abs(a);\n    }\n  }\n  return std::make_optional(s * sum);",
        "grade-70": {
            "execution": 0
        },
        "62": "long long ans = 1;\n\tlong long sum = 0;\n\tfor (long n : arr) {\n\t\tsum += std::abs(n);\n\t\tif (n < 0) ans *= -1;\n\t}\n\tif (arr.size() == 0) return {};\n\treturn {sum * ans};",
        "grade-62": {
            "execution": 0
        },
        "57": "if (arr.empty()) {\n    return std::nullopt;\n  }\n\n  int sign_multiply = 1;\n  int sum_magnitude = 0;\n  for (long & number : arr) {\n    if (number == 0) {\n      continue;\n    }\n    sign_multiply *= number / std::abs(number);\n    sum_magnitude += std::abs(number);\n  }\n  return sign_multiply * sum_magnitude;",
        "grade-57": {
            "execution": 0
        },
        "35": "// your code here\n    if(arr.size()==0) return {};\n    long mults = 1;\n    long sum = 0;\n    for(auto x: arr){\n        int s = 1;\n        if(x<0) s = -1;\n        mults *= s;\n        sum += abs(x);\n    }\n    return sum*mults;",
        "grade-35": {
            "execution": 0
        },
        "190": "assert(arr.size() < 6);\n    long result = 0;\n    long prodsigns = 1;\n    for (auto i : arr) {\n        prodsigns *= std::copysign(1, i);\n        result += std::abs(i);\n    }\n    if (arr.size() == 0)\n        return std::nullopt;\n    return result * prodsigns;",
        "grade-190": {
            "execution": 0
        },
        "26": "long prod = 1;\n    long sum = 0;\n    if (arr.size() == 0)\n        return std::nullopt;\n    for (auto &i : arr) {\n        if (i < 0) {\n            prod *= -1;\n            sum += std::abs(i);\n        } else if (i > 0) {\n            sum += i;\n        }\n    }\n    return prod * sum;",
        "grade-26": {
            "execution": 0
        },
        "174": "// Enter your code here\n  int prod = 1;\n  long sum = 0;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] > 0) {\n      prod *= 1;\n      sum += arr[i];\n    } else if (arr[i] < 0) {\n      prod *= -1;\n      sum += arr[i];\n    } else {\n      prod *= 0;\n    }\n  }\n  return prod * sum;",
        "grade-174": {
            "execution": 0
        },
        "140": "if (arr.empty()) return std::nullopt;\n  long sign = 1;\n  for (auto i : arr) {\n    if (i > 0)\n      sign *= 1;\n    else if (i < 0)\n      sign *= -1;\n    else\n      sign *= 0;\n  }\n  long sum = 0;\n  for (auto i : arr) {\n    sum += abs(i);\n  }\n  return sign * sum;",
        "grade-140": {
            "execution": 0
        },
        "22": "if (arr.empty()) {\n        return std::nullopt;\n    }\n    int mul = 1;\n    long sum = 0;\n    for (const auto& element : arr) {\n        if (element < 0) {\n            mul *= -1;\n        } else if (element > 0) {\n            mul *= 1;\n        } else {\n            mul *= 0;\n        }\n        sum += std::abs(element);\n    }\n    return mul * sum;",
        "grade-22": {
            "execution": 0
        },
        "152": "long res = 1;\n    long sum = 0;\n    for (auto i : arr) {\n        if (i > 0) {\n            res *= 1;\n            sum += i;\n        } else if (i < 0) {\n            res *= -1;\n            sum += -i;\n        } else {\n            res *= 0;\n        }\n    }\n    return res * sum;",
        "grade-152": {
            "execution": 1
        },
        "108": "if (arr.empty()) {\n    return std::nullopt;\n  }\n\n  long result = 1;\n  for (auto i : arr) {\n    long sign = std::copysign(1, i);\n    result *= sign * std::abs(i);\n  }\n  return result;",
        "grade-108": {
            "execution": 0
        },
        "8": "if (arr.empty()) {\n    return std::nullopt;\n  }\n  long mult = 1;\n  long sum = 0;\n  for (auto n : arr) {\n    if (n < 0) {\n      mult *= -1;\n    } else if (n > 0) {\n      sum += std::abs(n);\n    }\n  }\n  return mult * sum;",
        "grade-8": {
            "execution": 0
        },
        "7": "long product = 1;\n    long sum = 0;\n    if (arr.size() == 0) {\n        return std::nullopt;\n    }\n    for (int x : arr) {\n        if (x < 0) {\n            product *= -1;\n        } else if (x > 0) {\n            product *= 1;\n        } else {\n            product *= 0;\n        }\n        sum += std::abs(x);\n    }\n    return sum * product;",
        "grade-7": {
            "execution": 0
        },
        "23": "long long prod = 1;\n  long long sum = 0;\n  for (long num : arr) {\n    sum += abs(num);\n    prod *= (num > 0) - (num < 0);\n  }\n  return sum * prod;",
        "grade-23": {
            "execution": 1
        },
        "55": "if (arr.empty()) return std::nullopt;\n\tlong sum = 0;\n\tint prod = 1;\n\tfor (auto &e : arr) {\n\t\tif (e < 0) prod *= -1;\n\t\tsum += abs(e);\n\t}\n\treturn sum * prod;",
        "grade-55": {
            "execution": 0
        },
        "59": "if (arr.empty()) return std::nullopt;\n\tint sign_sum = 0;\n\tfor (const auto& x : arr) {\n\t\tif (x > 0) sign_sum++;\n\t\telse if (x < 0) sign_sum--;\n\t}\n\tlong magn_sum = 0;\n\tfor (const auto& x : arr) {\n\t\tmagn_sum += std::abs(x);\n\t}\n\treturn magn_sum * sign_sum;",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nstd::vector<long> make_a_pile(long n) {\n",
        "snippet": [
            "    vector<int> out={n};\n    for (int i=1;i<n;i++)\n        out.push_back(out[out.size()-1]+2);\n    return out;\n}\n"
        ],
        "simplified": "Given a positive integer n, you have to make a pile of n levels of stones. The first level has n stones. The number of stones in the next level is: - the next odd number if n is odd. - the next even number if n is even. Return the number of stones in each level in a list, where element at index i represents the number of stones in the level (i+1).",
        "task_id": "100",
        "164": "std::vector<long> result;\n  while (n) {\n    result.push_back(n);\n    n = n % 2 ? n + 2 : n + 1;\n  }\n  return result;",
        "grade-164": {
            "execution": 0
        },
        "28": "std::vector<long> levels;\n    long val = n;\n    while (val != 0) {\n        levels.push_back(val);\n        if (val % 2 == 0) {\n            val = val / 2;\n        } else {\n            val = val / 2 + 1;\n        }\n    }\n    return levels;",
        "grade-28": {
            "execution": 0
        },
        "6": "std::vector<long> pile;\n  pile.push_back(n);\n  for (long i = 1; i < n; i++) {\n    if (pile[i-1] % 2 == 0) {\n      pile.push_back(pile[i-1] + 1);\n    } else {\n      pile.push_back(pile[i-1] + 2);\n    }\n  }\n  return pile;",
        "grade-6": {
            "execution": 0
        },
        "191": "std::vector<long> result;\n  while (n > 0) {\n    result.push_back(n);\n    if (n % 2 == 0) {\n      n += 1;\n    } else {\n      n += 2;\n    }\n  }\n  return result;",
        "grade-191": {
            "execution": 0
        },
        "70": "std::vector<long> result;\n    // Implement your solution here\n    if(n==1) {\n        result.push_back(1);\n        return result;\n    }\n    result.push_back(n);\n    if(n%2==0) {\n        n+=1;\n    }\n    else {\n        n+=2;\n    }\n    result.push_back(n);\n    if(n%2==0) {\n        n+=1;\n    }\n    else {\n        n+=2;\n    }\n    result.push_back(n);\n    return result;",
        "grade-70": {
            "execution": 0
        },
        "62": "std::vector<long> pile;\n  pile.push_back(n);\n  n = n%2 ? n+2 : n+1;\n  while(n>0) {\n    pile.push_back(n);\n    n = n%2 ? n+2 : n+1;\n  }\n  return pile;",
        "grade-62": {
            "execution": 0
        },
        "57": "std::vector<long> pile;\n  long i = 1;\n  while (i <= n) {\n    pile.push_back(i);\n    if (i % 2 == 0) {\n      i++;\n    } else {\n      i += 2;\n    }\n  }\n  return pile;",
        "grade-57": {
            "execution": 0
        },
        "35": "std::vector<long> v;\n  for (long i = n; i > 0; i -= 2) {\n    v.push_back(i);\n  }\n  for (long i = n + 2; i > 0; i -= 2) {\n    v.push_back(i);\n  }\n  return v;",
        "grade-35": {
            "execution": 0
        },
        "190": "std::vector<long> result{n};\n    while (n >= 2) {\n        if (n % 2) {\n            n += 2;\n        } else {\n            n += 1;\n        }\n        result.push_back(n);\n    }\n    return result;",
        "grade-190": {
            "execution": 0
        },
        "26": "std::vector<long> result;\n  for (int i = 0; i < n; i++) {\n    result.push_back(n);\n    if (n % 2) {\n      n = n + 2;\n    } else {\n      n = n + 1;\n    }\n  }\n  return result;",
        "grade-26": {
            "execution": 0
        },
        "174": "std::vector<long> vec;\n  while (n > 0) {\n    vec.push_back(n);\n    n = n % 2 == 0 ? n + 1 : n + 2;\n  }\n  return vec;",
        "grade-174": {
            "execution": 0
        },
        "140": "std::vector<long> result;\n  for (int i = 0; i < n; i++) {\n    if (i == 0) {\n      result.push_back(n);\n    } else {\n      long last_element = result[i - 1];\n      if (last_element % 2 == 0) {\n        result.push_back(last_element + 2);\n      } else {\n        result.push_back(last_element + 1);\n      }\n    }\n  }\n  return result;",
        "grade-140": {
            "execution": 0
        },
        "22": "std::vector<long> pile;\n    for (long i = n; i > 0; --i) {\n        pile.push_back(i);\n        if (i % 2 == 0)\n            ++i;\n    }\n    std::reverse(pile.begin(), pile.end());\n    return pile;",
        "grade-22": {
            "execution": 0
        },
        "152": "long p = n;\n  std::vector<long> result;\n  while (p > 0) {\n    result.push_back(p);\n    p = (p & 1) ? p + 2 : p + 1;\n  }\n  std::reverse(result.begin(), result.end());\n  return result;",
        "grade-152": {
            "execution": 0
        },
        "108": "assert(n > 0);\n  std::vector<long> result{n};\n  if (n > 1) {\n    long next = n % 2 == 0 ? n + 2 : n + 1;\n    result.push_back(next);\n    for (int i = 1; i < n - 1; ++i) {\n      next = next % 2 == 0 ? next + 2 : next + 1;\n      result.push_back(next);\n    }\n  }\n  return result;",
        "grade-108": {
            "execution": 0
        },
        "8": "std::vector<long> v;\n  long i = 1;\n  while (n > 0) {\n    if (n > 0) {\n      v.push_back(n);\n      n -= i;\n    }\n    i++;\n  }\n  return v;",
        "grade-8": {
            "execution": 0
        },
        "7": "std::vector<long> res;\n  for (long stones = n; stones > 0; stones -= 2) {\n    res.push_back(stones);\n  }\n  return res;",
        "grade-7": {
            "execution": 0
        },
        "23": "// Generate the vector of stones.\n    std::vector<long> vector;\n    vector.push_back(n);\n    long stones = n;\n    for (long i = 0; i < n - 1; i++) {\n        if (stones % 2 == 0) {\n            stones++;\n        } else {\n            stones += 2;\n        }\n        vector.push_back(stones);\n    }\n    return vector;",
        "grade-23": {
            "execution": 0
        },
        "55": "std::vector<long> pile;\n  pile.push_back(n);\n  while (n > 1) {\n    if (n % 2 == 0) {\n      n = n / 2;\n    } else {\n      n = (n + 1) / 2;\n    }\n    pile.push_back(n);\n  }\n  return pile;",
        "grade-55": {
            "execution": 0
        },
        "59": "std::vector<long> result;\n  result.push_back(n);\n  while (n > 0) {\n    if (n % 2 == 0) {\n      n /= 2;\n      result.push_back(n - 1);\n    } else {\n      n /= 2;\n      result.push_back(n);\n    }\n  }\n  return result;",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// For N = 1000, the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nstd::string solve(long N) {\n",
        "snippet": [
            "    string str,bi=\"\";\n    str=to_string(N);\n    int i,sum=0;\n    for (int i=0;i<str.length();i++)\n        sum+=str[i]-48;\n    while (sum>0)\n    {\n        bi=to_string(sum%2)+bi;\n        sum=sum/2;\n    }\n    return bi;\n}\n"
        ],
        "simplified": "Given a positive integer N, return the total sum of its digits in binary.",
        "task_id": "84",
        "164": "std::string bin_string = \"\";\n    while(N){\n        bin_string = std::to_string(N%2) + bin_string;\n        N /= 2;\n    }\n    return bin_string;",
        "grade-164": {
            "execution": 0
        },
        "28": "std::string num = \"\";\n\tstd::string binStr = \"\";\n\tint rem, i, j, len;\n\twhile (N != 0) {\n\t\trem = N % 2;\n\t\tnum = num + std::to_string(rem);\n\t\tN = N / 2;\n\t}\n\tlen = num.length();\n\t//std::cout << num << std::endl;\n\t//std::cout << len << std::endl;\n\t//std::cout << num.size() << std::endl;\n\t//std::cout << num.length() << std::endl;\n\tfor (i = len - 1; i >= 0; i--) {\n\t\tbinStr = binStr + num[i];\n\t}\n\treturn binStr;",
        "grade-28": {
            "execution": 0
        },
        "6": "int sum = 0;\n  std::string sumString = \"\";\n  for (int i = 0; i < 10; i++) {\n    sum += (N & 1);\n    N >>= 1;\n  }\n  sumString = std::to_string(sum);\n  return sumString;",
        "grade-6": {
            "execution": 0
        },
        "190": "// Convert number to binary.\n    int temp = N;\n    int num = 0;\n    while (temp != 0) {\n        num = num + temp % 2;\n        temp = temp / 2;\n    }\n    // Return binary sum of digits.\n    return std::to_string(num);",
        "grade-190": {
            "execution": 0
        },
        "70": "std::string s;\n    if(N==0)\n    {\n        s = s + \"0\";\n        return s;\n    }\n    while(N!=0)\n    {\n        if(N%2 == 0)\n        {\n            s = s + \"0\";\n        }\n        else\n        {\n            s = s + \"1\";\n        }\n        N = N/2;\n    }\n    std::reverse(s.begin(),s.end());\n    return s;",
        "grade-70": {
            "execution": 0
        },
        "62": "std::string result = \"\";\n    while (N > 0) {\n        result = std::to_string(N % 2) + result;\n        N /= 2;\n    }\n    return result;",
        "grade-62": {
            "execution": 0
        },
        "57": "int sum = 0;\n    while(N != 0) {\n        sum += N % 2;\n        N /= 2;\n    }\n    return std::to_string(sum);",
        "grade-57": {
            "execution": 0
        },
        "35": "std::string binary;\n    binary.reserve(100);\n    for (long i = N; i > 0; i /= 2) {\n        binary += ('0' + i % 2);\n    }\n    long sumOfDigits = 0;\n    for (int i = 0; i < binary.size(); i++) {\n        sumOfDigits += binary[i] - '0';\n    }\n    std::cout << \"The sum of digits of \" << N << \" in binary is: \" << sumOfDigits << std::endl;\n    return binary;",
        "grade-35": {
            "execution": 0
        },
        "189": "std::string result = \"\";\n    do {\n        auto val = N % 2;\n        result = (char)(val + '0') + result;\n        N /= 2;\n    } while (N > 0);\n    return result;",
        "grade-189": {
            "execution": 0
        },
        "26": "std::string ans = \"\";\n    while(N > 0) {\n        ans += std::to_string(N % 2);\n        N /= 2;\n    }\n    std::reverse(ans.begin(), ans.end());\n    return ans;",
        "grade-26": {
            "execution": 0
        },
        "174": "std::string result = \"\";\n    std::vector<int> binary_repr;\n    int carry = 0;\n    int sum = 0;\n    while(N) {\n        sum = N % 2 + carry;\n        carry = 0;\n        if(sum > 1) {\n            sum = sum % 2;\n            carry = 1;\n        }\n        binary_repr.push_back(sum);\n        N = N / 2;\n    }\n    if(carry == 1) {\n        binary_repr.push_back(carry);\n    }\n    int i = binary_repr.size() - 1;\n    while(i >= 0) {\n        result += std::to_string(binary_repr[i]);\n        i--;\n    }\n    return result;",
        "grade-174": {
            "execution": 0
        },
        "139": "int a[N];\n    long temp = N;\n    int i = 0;\n    int sum = 0;\n    while(temp > 0) {\n        a[i] = temp % 2;\n        temp = temp / 2;\n        i++;\n    }\n    // std::cout << \"solving for \" << N << std::endl;\n    // for(int j = 0; j < i; j++) {\n    //     std::cout << a[j] << \" \";\n    // }\n    // std::cout << std::endl;\n    for(int j = 0; j < i; j++) {\n        sum += a[j];\n    }\n    std::string result = std::to_string(sum);\n    return result;",
        "grade-139": {
            "execution": 0
        },
        "22": "// Write your code here\n    std::string a=\"\";\n    while(N>0)\n    {\n        int rem=N%2;\n        a=std::to_string(rem)+a;\n        N=N/2;\n    }\n    int sum=0;\n    for(int i=0;i<a.length();i++)\n    {\n        sum+=a[i]-'0';\n    }\n    return std::to_string(sum);",
        "grade-22": {
            "execution": 0
        },
        "152": "std::string bin = \"\";\n\twhile (N > 0) {\n\t\tint remainder = N % 2;\n\t\tN /= 2;\n\t\tbin += std::to_string(remainder);\n\t}\n\treverse(bin.begin(), bin.end());\n\tint sum = 0;\n\tfor (int i = 0; i < bin.length(); i++) {\n\t\tsum += int(bin[i] - '0');\n\t}\n\treturn std::to_string(sum);",
        "grade-152": {
            "execution": 0
        },
        "108": "return std::bitset<10>(N).to_string();",
        "grade-108": {
            "execution": 0
        },
        "8": "// To store the binary number\n  std::string s;\n  // For each iteration from 0 to most significant bit\n  while (N) {\n    // Add the current bit\n    s += std::to_string(N & 1);\n    // Right shift to right by 1 bit\n    N >>= 1;\n  }\n  return s;",
        "grade-8": {
            "execution": 0
        },
        "7": "std::string s = \"\";\n  while (N > 0) {\n    int t = N%2;\n    s = s + char(t + '0');\n    N /= 2;\n  }\n  std::reverse(s.begin(), s.end());\n  return s;",
        "grade-7": {
            "execution": 0
        },
        "23": "std::string result = \"\";\n    while (N > 0) {\n        int rem = N % 2;\n        N = N / 2;\n        result += std::to_string(rem);\n    }\n    std::reverse(result.begin(), result.end());\n    return result;",
        "grade-23": {
            "execution": 0
        },
        "55": "std::string result;\n    // Write your code here\n    std::vector<int> v;\n    int sum=0;\n    while(N>0)\n    {\n        if(N%2==0)\n        {\n            v.push_back(0);\n        }\n        else\n        {\n            v.push_back(1);\n        }\n        N/=2;\n    }\n    // std::reverse(v.begin(),v.end());\n    for(int i=v.size()-1;i>=0;i--)\n    {\n        sum+=v[i];\n    }\n    result=std::to_string(sum);\n    return result;",
        "grade-55": {
            "execution": 0
        },
        "59": "std::string s = \"\";\n\tif (N == 0) {\n\t\treturn \"0\";\n\t}\n\tint i = 0;\n\twhile (N > 0) {\n\t\tif (N % 2 == 0) {\n\t\t\ts += \"0\";\n\t\t}\n\t\telse {\n\t\t\ts += \"1\";\n\t\t}\n\t\tN /= 2;\n\t}\n\tstd::reverse(s.begin(), s.end());\n\treturn s;",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// digits(1)  == 1\n// digits(4)  == 0\n// digits(235) == 15\nlong digits(long n) {\n",
        "snippet": [
            "    int prod=1,has=0;\n    string s=to_string(n);\n    for (int i=0;i<s.length();i++)\n        if (s[i]%2==1) \n        {\n            has=1;\n            prod=prod*(s[i]-48);\n        }\n    if (has==0) return 0;\n    return prod;\n}\n"
        ],
        "simplified": "Given a positive integer n, return the product of the odd digits. Return 0 if all digits are even.",
        "task_id": "131",
        "166": "long s = 1;\n  while (n > 0) {\n    long i = n % 10;\n    if (i % 2 == 1) {\n      s *= i;\n    }\n    n /= 10;\n  }\n  return s;",
        "grade-166": {
            "execution": 0
        },
        "28": "long product = 1;\n    while(n > 0) {\n        long mod = n % 10;\n        if(mod % 2 != 0) {\n            product *= mod;\n        }\n        n /= 10;\n    }\n    return product;",
        "grade-28": {
            "execution": 0
        },
        "6": "int sum = 1;\n  while(n > 0){\n    int digit = n % 10;\n    if(digit % 2 == 1){\n      sum *= digit;\n    }\n    n /= 10;\n  }\n  return sum;",
        "grade-6": {
            "execution": 0
        },
        "195": "int n1=0;\n  while(n>0)\n  {\n    if(n%2!=0)\n    {\n      n1=n1*10+(n%10);\n    }\n    n=n/10;\n  }\n  int s=0;\n  while(n1>0)\n  {\n    s=s*10+(n1%10);\n    n1=n1/10;\n  }\n  return s;",
        "grade-195": {
            "execution": 0
        },
        "70": "long sum = 1;\n    while(n != 0){\n        int rem = n % 10;\n        if(rem % 2 != 0){\n            sum *= rem;\n        }\n        n /= 10;\n    }\n    return sum;",
        "grade-70": {
            "execution": 0
        },
        "62": "return std::accumulate(std::to_string(n).begin(), std::to_string(n).end(), 1,\n     [](long m, char c) { return m * ((c - '0') % 2 ? c - '0' : 1);});",
        "grade-62": {
            "execution": 0
        },
        "57": "int sum = 1;\n  while(n > 0){\n    if((n % 10) % 2 == 1){\n      sum *= (n % 10);\n    }\n    n /= 10;\n  }\n  return sum;",
        "grade-57": {
            "execution": 0
        },
        "35": "long sum = 1;\n    while(n != 0){\n        int digit = n % 10;\n        if(digit % 2 != 0){\n            sum *= digit;\n        }\n        n /= 10;\n    }\n    return sum;",
        "grade-35": {
            "execution": 0
        },
        "194": "long ans = 1;\n\twhile (n > 0) {\n\t\tif (n % 2 == 1) {\n\t\t\tans *= n % 10;\n\t\t}\n\t\tn /= 10;\n\t}\n\treturn ans;",
        "grade-194": {
            "execution": 0
        },
        "26": "long product = 1;\n  while (n > 0) {\n    if (n % 2 != 0) {\n      product *= n % 10;\n    }\n    n /= 10;\n  }\n  return product;",
        "grade-26": {
            "execution": 0
        },
        "177": "int result = 1;\n  while (n != 0) {\n    int dig = n % 10;\n    if (dig % 2 != 0) {\n      result *= dig;\n    }\n    n /= 10;\n  }\n  return result;",
        "grade-177": {
            "execution": 0
        },
        "141": "// your code here\n  long prod = 1;\n  while(n > 0)\n  {\n    if(n % 2 != 0)\n    {\n      prod *= n % 10;\n    }\n    n /= 10;\n  }\n  return prod;",
        "grade-141": {
            "execution": 0
        },
        "22": "long ret = 1;\n    do {\n        if (n % 2 == 1) {\n            ret *= n % 10;\n        }\n        n /= 10;\n    } while (n > 0);\n    return ret;",
        "grade-22": {
            "execution": 0
        },
        "153": "long result = 1;\n  if (n == 0) {\n    return 0;\n  }\n  if (n < 0) {\n    n = n * -1;\n  }\n  while (n > 0) {\n    if (n % 2 != 0) {\n      result = result * (n % 10);\n    }\n    n = n / 10;\n  }\n  return result;",
        "grade-153": {
            "execution": 0
        },
        "108": "long result = 1;\n  while (n > 0) {\n    long d = n % 10;\n    if (d % 2 == 1) {\n      result *= d;\n    }\n    n /= 10;\n  }\n  return result;",
        "grade-108": {
            "execution": 0
        },
        "8": "int sum = 1;\n  for(int i = 0; i < to_string(n).length(); i++){\n    if(stoi(to_string(n)[i]) % 2 != 0){\n      sum *= stoi(to_string(n)[i]);\n    }\n  }\n  return sum;",
        "grade-8": {
            "execution": 0
        },
        "7": "long result = 1;\n  while (n != 0) {\n    long remainder = n % 10;\n    if (remainder % 2 != 0) {\n      result *= remainder;\n    }\n    n /= 10;\n  }\n  return result;",
        "grade-7": {
            "execution": 0
        },
        "23": "long ans = 1;\n  long i;\n  while(n!=0){\n    i = n%10;\n    if(i%2!=0){\n      ans *= i;\n    }\n    n /= 10;\n  }\n  return ans;",
        "grade-23": {
            "execution": 0
        },
        "55": "long counter = 1;\n    while(n) {\n        if(n % 2 != 0)\n            counter *= n % 10;\n        n /= 10;\n    }\n    return counter;",
        "grade-55": {
            "execution": 0
        },
        "59": "if(n==0) return 0;\n    long result = 1;\n    while(n!=0){\n        long current = n%10;\n        if(current%2==1) result*=current;\n        n/=10;\n    }\n    return result;",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8, 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nstd::vector<long> eat(long number, long need, long remaining) {\n",
        "snippet": [
            "    if (need>remaining) return {number+remaining, 0};\n    return {number+need,remaining-need};\n}\n"
        ],
        "simplified": "You're a hungry rabbit, and you already have eaten a certain number of carrots, but now you need to eat more carrots to complete the day's meals. you should return an array of [ total number of eaten carrots after your meals, the number of carrots left after your meals ] if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.",
        "task_id": "159",
        "167": "vector<long>result;\n    result.push_back(0);\n    result.push_back(0);\n    if(number < 0 || need < 0 || remaining < 0)\n        return result;\n    if(number + need > remaining)\n    {\n        result[0] = remaining;\n        result[1] = 0;\n    }\n    else\n    {\n        result[0] = number + need;\n        result[1] = remaining - result[0];\n    }\n    return result;",
        "grade-167": {
            "execution": 0
        },
        "28": "if (remaining < need) {\n        return { number + remaining, 0 };\n    }\n    return { number + need, remaining - need };",
        "grade-28": {
            "execution": 1
        },
        "6": "std::vector<long> result;\n    if (remaining >= need) {\n        result.push_back(number + need);\n        result.push_back(remaining - need);\n    } else {\n        result.push_back(number + remaining);\n        result.push_back(0);\n    }\n    return result;",
        "grade-6": {
            "execution": 1
        },
        "193": "if (remaining == 0) {\n    return {0,0};\n  }\n  if (number < 0 || need < 0 || remaining < 0 || number > 1000 || need > 1000 || remaining > 1000) {\n    return {0,0};\n  }\n  if (number + need <= remaining) {\n    return {number + need, remaining - (number + need)};\n  }\n  return {number + remaining, 0};",
        "grade-193": {
            "execution": 0
        },
        "70": "std::vector<long> result;\n    if(number >= need)\n        result.push_back(number);\n    else\n        result.push_back(number + remaining);\n    if(remaining < need)\n        result.push_back(0);\n    else\n        result.push_back(remaining - need);\n    return result;",
        "grade-70": {
            "execution": 0
        },
        "62": "if (number + remaining < need)\n      return {number + remaining, 0};\n   else\n      return {need, number + remaining - need};",
        "grade-62": {
            "execution": 0
        },
        "57": "if(remaining>=need){\n        return {number+need,remaining-need};\n    }else{\n        return {number+remaining,0};\n    }",
        "grade-57": {
            "execution": 1
        },
        "35": "// your code here\n  \tstd::vector<long> res;\n\tif(need >= remaining){\n\t\tres.push_back(number + remaining);\n\t\tres.push_back(0);\n\t}\n\telse{\n\t\tres.push_back(number + need);\n\t\tres.push_back(remaining - need);\n\t}\n\treturn res;",
        "grade-35": {
            "execution": 1
        },
        "192": "return {number + std::min(need, remaining), std::max(0L, remaining - need)};",
        "grade-192": {
            "execution": 1
        },
        "26": "long n = 0;\n    long r = 0;\n    if (remaining < need) {\n        r = 0;\n        n = number + remaining;\n    } else {\n        r = remaining - need;\n        n = number + need;\n    }\n    std::vector<long> ans;\n    ans.push_back(n);\n    ans.push_back(r);\n    return ans;",
        "grade-26": {
            "execution": 1
        },
        "177": "// your code here\n  long numEaten, carrotsLeft;\n  numEaten = number;\n  if (need < remaining) {\n    numEaten += need;\n    carrotsLeft = remaining - need;\n  } else {\n    numEaten += remaining;\n    carrotsLeft = 0;\n  }\n  std::vector<long> result{numEaten, carrotsLeft};\n  return result;",
        "grade-177": {
            "execution": 1
        },
        "141": "std::vector<long> result(2);\n    //check if there are enough carrots\n    if (number + remaining >= need) {\n        result[0] = need;\n        result[1] = number + remaining - need;\n    }\n    else {\n        result[0] = number + remaining;\n        result[1] = 0;\n    }\n    return result;",
        "grade-141": {
            "execution": 0
        },
        "22": "std::vector<long> result;\n    if(remaining >= need) {\n        result.push_back(number + need);\n        result.push_back(remaining - need);\n    } else {\n        result.push_back(number + remaining);\n        result.push_back(0);\n    }\n    return result;",
        "grade-22": {
            "execution": 1
        },
        "154": "long eat_total = number;\n  if (remaining > need) {\n    eat_total += need;\n    remaining -= need;\n  } else {\n    eat_total += remaining;\n    remaining = 0;\n  }\n  std::vector<long> result = {eat_total, remaining};\n  return result;",
        "grade-154": {
            "execution": 1
        },
        "110": "std::vector<long> res(2);\n    long totalNeed = number + need;\n    res[0] = (totalNeed <= remaining) ? totalNeed : (remaining + number);\n    res[1] = (totalNeed <= remaining) ? (remaining - totalNeed) : 0;\n    return res;",
        "grade-110": {
            "execution": 0
        },
        "8": "// Your code here\n    std::vector<long> x;\n    if(number <= 1000 && need <= 1000 && remaining <= 1000){\n      if(number >= 0 && need >= 0 && remaining >= 0){\n        if(remaining >= need){\n          x.push_back(need + number);\n          x.push_back(remaining - need);\n        }\n        else if(remaining < need){\n          x.push_back(remaining + number);\n          x.push_back(0);\n        }\n      }\n    }\n    return x;",
        "grade-8": {
            "execution": 1
        },
        "7": "// your code here\n    std::vector<long> result;\n    long total = number + remaining;\n    if (total >= need) {\n        result.push_back(number + need);\n        result.push_back(total - need);\n    } else {\n        result.push_back(total);\n        result.push_back(0);\n    }\n    return result;",
        "grade-7": {
            "execution": 0
        },
        "23": "int total_carrots_eaten = number;\n    int carrots_left_in_stock = remaining;\n    while(number < need){\n        number++;\n        carrots_left_in_stock--;\n        total_carrots_eaten++;\n        if(carrots_left_in_stock == 0){\n            return {total_carrots_eaten, 0};\n        }\n    }\n    return {total_carrots_eaten, carrots_left_in_stock};",
        "grade-23": {
            "execution": 0
        },
        "55": "int sum = number + remaining;\n   if(sum >= need)\n      return {need, sum - need};\n   else \n      return {sum, 0};",
        "grade-55": {
            "execution": 0
        },
        "59": "vector<long> v;\n  if (number+need<=remaining)\n  {\n    v.push_back(number+need);\n    v.push_back(remaining-(number+need));\n  }\n  else\n  {\n    v.push_back(number+remaining);\n    v.push_back(0);\n  }\n  return v;",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long a) {\n",
        "snippet": [
            "    for (int i=0;i*i*i<=abs(a);i++)\n        if (i*i*i==abs(a)) return true;\n    return false;\n}\n"
        ],
        "simplified": "Write a function that takes an integer a and returns True if this ingeger is a cube of some integer number. Note: you may assume the input is always valid.",
        "task_id": "77",
        "163": "long res = cbrt(a);\n  return res*res*res == a;",
        "grade-163": {
            "execution": 1
        },
        "28": "if (a < 0) {\n        a = abs(a);\n    }\n    // long b = floor(cbrt(a));\n    // return b * b * b == a;\n    for (long b = 0; b * b * b <= a; b++) {\n        if (b * b * b == a) {\n            return true;\n        }\n    }\n    return false;",
        "grade-28": {
            "execution": 1
        },
        "6": "// Your code\n    double d=pow(a,1.0/3.0);\n    int t=(int)d;\n    if(t==d)\n    return true;\n    else\n    return false;",
        "grade-6": {
            "execution": 0
        },
        "189": "// long root = sqrt(a);\n  // return root * root * root == a;\n  return cbrt(a) == floor(cbrt(a));",
        "grade-189": {
            "execution": 1
        },
        "70": "if (a < 0) {\n\t\ta = -a;\n\t}\n\tif (a == 0) {\n\t\treturn true;\n\t}\n\tlong x = 1;\n\tlong x3 = x * x * x;\n\twhile (x3 < a) {\n\t\tx3 = x * x * x;\n\t\tx++;\n\t}\n\tif (x3 == a) {\n\t\treturn true;\n\t}\n\treturn false;",
        "grade-70": {
            "execution": 1
        },
        "62": "if (a<0) {\n        a=-a;\n    }\n    long x = static_cast<long>(pow(a, 1.0/3.0) + 0.5);\n    return (x*x*x == a);",
        "grade-62": {
            "execution": 1
        },
        "57": "long i = 0;\n    while (i*i*i <= a) {\n        if (i*i*i == a) {\n            return true;\n        }\n        i++;\n    }\n    return false;",
        "grade-57": {
            "execution": 0
        },
        "35": "// your code here\n    int i = 1;\n    while(i*i*i < a)\n    {\n        i++;\n    }\n    if(i*i*i == a)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }",
        "grade-35": {
            "execution": 0
        },
        "188": "for(int i = -100; i <= 100; i++) {\n        if(i * i * i == a) return true;\n    }\n    return false;",
        "grade-188": {
            "execution": 1
        },
        "26": "long b = abs(a);\n\treturn (floor(cbrt(b)) == ceil(cbrt(b)));",
        "grade-26": {
            "execution": 1
        },
        "173": "// Write your code here\n    // printf(\"a: %d\",a);\n    if(a<0)\n        a *= -1;\n    if(a==0)\n        return true;\n    float temp = sqrt(a);\n    for(long i=0;i<=temp;i++){\n        if(i*i*i == a)\n            return true;\n    }\n    return false;",
        "grade-173": {
            "execution": 1
        },
        "139": "long b=sqrt(a);\n    long c=b*b*b;\n    if(c==a) return true;\n    else return false;",
        "grade-139": {
            "execution": 0
        },
        "22": "if (a==0)\n        return true;\n    if (a<0)\n        a = -a;\n    for (long i=1; i<=a; i++)\n        if (i*i*i == a)\n            return true;\n    return false;",
        "grade-22": {
            "execution": 1
        },
        "151": "// Write code here\n\tbool check = false;\n\tif (a == 0 || a == 1)\n\t\treturn true;\n\tif (a < 0)\n\t\ta = -a;\n\tint res = cbrt(a);\n\tif (res*res*res == a)\n\t\treturn true;\n\treturn false;",
        "grade-151": {
            "execution": 1
        },
        "108": "// your code here!\n  long sq = std::sqrt(a);\n  long cb = sq * sq * sq;\n  return (cb == a);",
        "grade-108": {
            "execution": 0
        },
        "8": "if (a == 0) {\n    return true;\n  }\n  if (a < 0) {\n    a = -a;\n  }\n  for (long x = 1; x < a; x++) {\n    if (x * x * x == a) {\n      return true;\n    }\n  }\n  return false;",
        "grade-8": {
            "execution": 0
        },
        "7": "return cbrt(a) == (int)cbrt(a);",
        "grade-7": {
            "execution": 1
        },
        "23": "long root = round(std::cbrt(a));\n    return a == root * root * root;",
        "grade-23": {
            "execution": 1
        },
        "55": "if (a<0)\n    {\n        return true;\n    }\n    long b = 0;\n    while (b*b*b<a)\n    {\n        b++;\n    }\n    if (b*b*b==a)\n    {\n        return true;\n    }\n    return false;",
        "grade-55": {
            "execution": 1
        },
        "59": "long b = abs(a);\n\tlong x = round(cbrt(b));\n\treturn b == x * x * x;",
        "grade-59": {
            "execution": 1
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_float_std_string{\n    long f0;\n    float f1;\n    std::string f2;    Union_long_float_std_string(long _f0) : f0(_f0) {}\n    Union_long_float_std_string(float _f1) : f1(_f1) {}\n    Union_long_float_std_string(std::string _f2) : f2(_f2) {}\n    ~Union_long_float_std_string() {}\n    bool operator==(Union_long_float_std_string u2) {\n        return f0 == u2.f0 || f1 == u2.f1 || f2 == u2.f2 ;\n    }\n};\nunion Union_long_float_std_string_{}{\n    long f0;\n    float f1;\n    std::string f2;\n    {} f3;    Union_long_float_std_string_{}(long _f0) : f0(_f0) {}\n    Union_long_float_std_string_{}(float _f1) : f1(_f1) {}\n    Union_long_float_std_string_{}(std::string _f2) : f2(_f2) {}\n    Union_long_float_std_string_{}({} _f3) : f3(_f3) {}\n    ~Union_long_float_std_string_{}() {}\n    bool operator==(Union_long_float_std_string_{} u2) {\n        return f0 == u2.f0 || f1 == u2.f1 || f2 == u2.f2 || f3 == u2.f3 ;\n    }\n};\n// Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return None if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// compare_one(1, 2.5) \u279e 2.5\n// compare_one(1, \"2,3\") \u279e \"2,3\"\n// compare_one(\"5,1\", \"6\") \u279e \"6\"\n// compare_one(\"1\", 1) \u279e None\nUnion_long_float_std_string_{} compare_one(Union_long_float_std_string a, Union_long_float_std_string b) {\n",
        "snippet": [
            "    double  numa,numb;\n    boost::any out;\n   \n    if (a.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(a);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numa=atof(s.c_str());\n        \n    }\n    else \n    {\n        if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);\n        if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);\n    }\n    if (b.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(b);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numb=atof(s.c_str());\n    }\n    else \n    {\n        if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);\n        if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);\n    }\n\n    if (numa==numb) return string(\"None\");\n    if (numa<numb) return b;\n    if (numa>numb) return a;\n}\n"
        ],
        "simplified": "Create a function that takes integers, floats, or strings representing real numbers, and returns the larger variable in its given variable type. Return None if the values are equal. Note: If a real number is represented as a string, the floating point might be . or ,",
        "task_id": "137",
        "166": "if (a == b) {\n        Union_long_float_std_string_{} none_;\n        return none_;\n    }\n    else {\n        if (a.f0 > b.f0) {\n            Union_long_float_std_string_{} a_;\n            a_.f0 = a.f0;\n            return a_;\n        }\n        else if (a.f1 > b.f1) {\n            Union_long_float_std_string_{} a_;\n            a_.f1 = a.f1;\n            return a_;\n        }\n        else if (a.f2 > b.f2) {\n            Union_long_float_std_string_{} a_;\n            a_.f2 = a.f2;\n            return a_;\n        }\n        else {\n            Union_long_float_std_string_{} b_;\n            b_.f0 = b.f0;\n            return b_;\n        }\n    }",
        "grade-166": {
            "execution": 0
        },
        "28": "if (a == b) {\n        return {{}};\n    } else if (std::to_string(a.f0) == a.f2 || std::to_string(a.f1) == a.f2) {\n        return Union_long_float_std_string_{}(a.f2);\n    } else if (std::to_string(b.f0) == b.f2 || std::to_string(b.f1) == b.f2) {\n        return Union_long_float_std_string_{}(b.f2);\n    } else if (a.f0 > b.f0) {\n        return Union_long_float_std_string_{}(a.f0);\n    } else if (a.f1 > b.f1) {\n        return Union_long_float_std_string_{}(a.f1);\n    } else {\n        return Union_long_float_std_string_{}(b.f0);\n    }",
        "grade-28": {
            "execution": 0
        },
        "6": "if (a.f0 == b.f0) return Union_long_float_std_string_{}{};\n    if (a.f1 == b.f1) return Union_long_float_std_string_{}{};\n    if (a.f2 == b.f2) return Union_long_float_std_string_{}{};\n    return Union_long_float_std_string_{}(std::max(a.f0, std::max(b.f0, std::max(a.f1, std::max(b.f1, std::max(std::stod(a.f2), std::stod(b.f2)))))));",
        "grade-6": {
            "execution": 0
        },
        "195": "if (a.f0 == b.f0 && a.f1 == b.f1 && a.f2 == b.f2) {\n        return {};\n    }\n    if (a.f0 > b.f0) {\n        return Union_long_float_std_string_{}(a.f0);\n    }\n    if (a.f1 > b.f1) {\n        return Union_long_float_std_string_{}(a.f1);\n    }\n    if (a.f2 > b.f2) {\n        return Union_long_float_std_string_{}(a.f2);\n    }\n    return {};",
        "grade-195": {
            "execution": 0
        },
        "70": "if (a.f0 == b.f0) {\n        return Union_long_float_std_string_{}{};\n    }\n    else if (a.f1 == b.f1) {\n        return Union_long_float_std_string_{}{};\n    }\n    else if (a.f2 == b.f2) {\n        return Union_long_float_std_string_{}{};\n    }\n    else if (a.f0 > b.f0) {\n        return Union_long_float_std_string_{}(a.f0);\n    }\n    else if (a.f1 > b.f1) {\n        return Union_long_float_std_string_{}(a.f1);\n    }\n    else if (a.f2 > b.f2) {\n        return Union_long_float_std_string_{}(a.f2);\n    }\n    else if (b.f0 > a.f0) {\n        return Union_long_float_std_string_{}(b.f0);\n    }\n    else if (b.f1 > a.f1) {\n        return Union_long_float_std_string_{}(b.f1);\n    }\n    else if (b.f2 > a.f2) {\n        return Union_long_float_std_string_{}(b.f2);\n    }",
        "grade-70": {
            "execution": 0
        },
        "62": "if ( a == b ) return {} ;\n    if ( a.f0 > b.f0 ) return a.f0 ;\n    if ( a.f1 > b.f1 ) return a.f1 ;\n    if ( a.f2 > b.f2 ) return a.f2 ;\n    if ( b.f0 > a.f0 ) return b.f0 ;\n    if ( b.f1 > a.f1 ) return b.f1 ;\n    if ( b.f2 > a.f2 ) return b.f2 ;",
        "grade-62": {
            "execution": 0
        },
        "57": "if (a == b) {\n        return {};\n    }\n    else if (a.f0 > b.f0) {\n        return Union_long_float_std_string_{}(a.f0);\n    }\n    else if (a.f1 > b.f1) {\n        return Union_long_float_std_string_{}(a.f1);\n    }\n    else if (a.f2 > b.f2) {\n        return Union_long_float_std_string_{}(a.f2);\n    }\n    else if (b.f0 > a.f0) {\n        return Union_long_float_std_string_{}(b.f0);\n    }\n    else if (b.f1 > a.f1) {\n        return Union_long_float_std_string_{}(b.f1);\n    }\n    else if (b.f2 > a.f2) {\n        return Union_long_float_std_string_{}(b.f2);\n    }",
        "grade-57": {
            "execution": 0
        },
        "35": "if (a == b) {\n        return {{}};\n    }\n    if (a.f2.size() > 0 && b.f2.size() > 0) {\n        return std::max(a.f2, b.f2);\n    }\n    if (a.f2.size() > 0 && b.f2.size() == 0) {\n        return a.f2;\n    }\n    if (a.f2.size() == 0 && b.f2.size() > 0) {\n        return b.f2;\n    }\n    if (a.f1 > 0.0 && b.f1 > 0.0) {\n        return std::max(a.f1, b.f1);\n    }\n    if (a.f1 > 0.0 && b.f1 <= 0.0) {\n        return a.f1;\n    }\n    if (a.f1 <= 0.0 && b.f1 > 0.0) {\n        return b.f1;\n    }\n    if (a.f0 > 0 && b.f0 > 0) {\n        return std::max(a.f0, b.f0);\n    }\n    return Union_long_float_std_string_{}{};",
        "grade-35": {
            "execution": 0
        },
        "194": "if (a == b) return {};\n    return std::max(a, b);",
        "grade-194": {
            "execution": 0
        },
        "26": "if (a.f0 == b.f0) { return {}; }\n    if (a.f1 == b.f1) { return {}; }\n    if (a.f2 == b.f2) { return {}; }\n    if (a.f0 > b.f0) { return a.f0; }\n    if (a.f1 > b.f1) { return a.f1; }\n    if (a.f2 > b.f2) { return a.f2; }\n    if (b.f0 > a.f0) { return b.f0; }\n    if (b.f1 > a.f1) { return b.f1; }\n    if (b.f2 > a.f2) { return b.f2; }\n    return {};",
        "grade-26": {
            "execution": 0
        },
        "177": "if (a == b) return {} ;\n    if (a.f0 > b.f0 || a.f1 > b.f1) return a ;\n    if (b.f0 > a.f0 || b.f1 > a.f1) return b ;\n    return std::max(a.f2, b.f2) ;",
        "grade-177": {
            "execution": 0
        },
        "140": "if (a == b) return {} ;\n    if (typeid(a.f0) == typeid(a.f1)) return (a.f0 > a.f1 ? a : b) ;\n    if (typeid(a.f0) == typeid(a.f2)) return (a.f0 > a.f2 ? a : b) ;\n    if (typeid(a.f1) == typeid(a.f2)) return (a.f1 > a.f2 ? a : b) ;\n    assert(0) ;",
        "grade-140": {
            "execution": 0
        },
        "22": "if (a == b) {\n        {} c;\n        return c;\n    } else if (a.f0 > b.f0) {\n        return a.f0;\n    } else if (a.f1 > b.f1) {\n        return a.f1;\n    } else if (a.f2 > b.f2) {\n        return a.f2;\n    } else if (b.f0 > a.f0) {\n        return b.f0;\n    } else if (b.f1 > a.f1) {\n        return b.f1;\n    } else if (b.f2 > a.f2) {\n        return b.f2;\n    }",
        "grade-22": {
            "execution": 0
        },
        "153": "if (a.f0==b.f0) {\n    return {}();\n  }\n  if (a.f1==b.f1) {\n    return {}();\n  }\n  if (a.f2==b.f2) {\n    return {}();\n  }\n  if (a.f0>b.f0) {\n    return a.f0;\n  }\n  if (a.f1>b.f1) {\n    return a.f1;\n  }\n  if (a.f2>b.f2) {\n    return a.f2;\n  }\n  return b.f0;",
        "grade-153": {
            "execution": 0
        },
        "108": "if (a == b) {\n        return {} ;\n    }\n    Union_long_float_std_string_{} mx(a) ;\n    if (a < b) {\n        mx = b ;\n    }\n    return mx ;",
        "grade-108": {
            "execution": 0
        },
        "8": "if (a == b) {\n        return {} ;\n    } else if (a.f0 > b.f0) {\n        return a.f0 ;\n    } else if (a.f1 > b.f1) {\n        return a.f1 ;\n    } else if (a.f2 > b.f2) {\n        return a.f2 ;\n    } else if (b.f0 > a.f0) {\n        return b.f0 ;\n    } else if (b.f1 > a.f1) {\n        return b.f1 ;\n    } else if (b.f2 > a.f2) {\n        return b.f2 ;\n    } else {\n        assert(false);\n    }",
        "grade-8": {
            "execution": 0
        },
        "7": "std::vector<std::string> s_a = {\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\".\"};\n    std::vector<std::string> s_b = {\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\".\"};\n    for(int i = 0; i < s_a.size(); i++){\n        if(a.f2.find(s_a[i]) == std::string::npos){\n            Union_long_float_std_string_{} _r = Union_long_float_std_string_{}(a.f0);\n            return _r;\n        }\n    }\n    for(int i = 0; i < s_b.size(); i++){\n        if(b.f2.find(s_b[i]) == std::string::npos){\n            Union_long_float_std_string_{} _r = Union_long_float_std_string_{}(b.f0);\n            return _r;\n        }\n    }\n    return Union_long_float_std_string_{}(1.1);",
        "grade-7": {
            "execution": 0
        },
        "23": "if (a.f0 > b.f0) return Union_long_float_std_string_{}(a.f0);\n    if (a.f1 > b.f1) return Union_long_float_std_string_{}(a.f1);\n    if (a.f2 > b.f2) return Union_long_float_std_string_{}(a.f2);\n    if (b.f0 > a.f0) return Union_long_float_std_string_{}(b.f0);\n    if (b.f1 > a.f1) return Union_long_float_std_string_{}(b.f1);\n    if (b.f2 > a.f2) return Union_long_float_std_string_{}(b.f2);\n    return Union_long_float_std_string_{}{};",
        "grade-23": {
            "execution": 0
        },
        "55": "if (a.f0 == b.f0) return Union_long_float_std_string_{}{};\n    if (a.f1 == b.f1) return Union_long_float_std_string_{}{};\n    if (a.f2 == b.f2) return Union_long_float_std_string_{}{};\n    if (a.f0 > b.f0) return Union_long_float_std_string_{}(a.f0);\n    if (a.f1 > b.f1) return Union_long_float_std_string_{}(a.f1);\n    if (a.f2 > b.f2) return Union_long_float_std_string_{}(a.f2);\n    return Union_long_float_std_string_{}(b.f0);",
        "grade-55": {
            "execution": 0
        },
        "59": "if (a.f0 == b.f0 || a.f1 == b.f1 || a.f2 == b.f2) {\n        return {};\n    }\n    if (a.f0 > b.f0 || a.f1 > b.f1 || a.f2 > b.f2) {\n        return a;\n    }\n    return b;",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3, 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfloat triangle_area(long a, long b, long c) {\n",
        "snippet": [
            "    if (a+b<=c or a+c<=b or b+c<=a) return -1;\n    float h=(a+b+c)/2;\n    float area;\n    area=pow(h*(h-a)*(h-b)*(h-c),0.5);\n    return area;\n}\n"
        ],
        "simplified": "Given the lengths of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise return -1 Three sides make a valid triangle when the sum of any two sides is greater than the third side.",
        "task_id": "71",
        "168": "assert(a>0 && b>0 && c>0);\n  // Return -1 for invalid inputs\n  if ( a+b <= c || b+c <= a || a+c <= b ) {\n    return -1;\n  }\n  // Return the area of triangle\n  return sqrt( (a+b+c)*(a+b-c)*(b+c-a)*(a+c-b) )/4;",
        "grade-168": {
            "execution": 0
        },
        "28": "if (a+b > c && a+c > b && b+c > a)\n        return sqrt((a+b+c)*(a+b-c)*(a-b+c)*(-a+b+c))/4;\n    else\n        return -1;",
        "grade-28": {
            "execution": 0
        },
        "6": "if(a+b>c && a+c>b && b+c>a)\n    {\n        float s = (a+b+c)/2.0;\n        float area = sqrt(s*(s-a)*(s-b)*(s-c));\n        return area;\n    }\n    else\n    {\n        return -1;\n    }",
        "grade-6": {
            "execution": 0
        },
        "196": "if(a+b>c && a+c>b && b+c>a)\n\t{\n\t\tfloat s = (a+b+c)/2.0;\n\t\treturn sqrt(s*(s-a)*(s-b)*(s-c));\n\t}\n\telse\n\t\treturn -1;",
        "grade-196": {
            "execution": 0
        },
        "71": "//cout << a << ' ' << b << ' ' << c << endl;\n    float s = (a + b + c) / 2.0;\n    float area = sqrt(s * (s - a) * (s - b) * (s - c));\n    //cout << area << endl;\n    if(area > 0)\n        return area;\n    else\n        return -1;",
        "grade-71": {
            "execution": 0
        },
        "62": "float area,p;\n\tp=(a+b+c)/2.0;\n\tarea=sqrt(p*(p-a)*(p-b)*(p-c));\n\tif(area>0)\n\treturn area;\n\telse\n\treturn -1;",
        "grade-62": {
            "execution": 0
        },
        "57": "if (a+b > c && a+c > b && b+c > a)\n        return abs((float)a*(float)b*0.5);\n    else\n        return -1;",
        "grade-57": {
            "execution": 0
        },
        "35": "float s = (a + b + c) / 2.0;\n  if(a + b > c && a + c > b && b + c > a) {\n    float result = sqrt(s * (s - a) * (s - b) * (s - c));\n    return (float)((int)(result * 100)) / 100;\n  } else {\n    return -1;\n  }",
        "grade-35": {
            "execution": 0
        },
        "194": "std::sort(std::begin({a, b, c}), std::end({a, b, c}));\n  if (a + b <= c) return -1;\n  long p = (a + b + c) / 2;\n  float x = (float)p * (p - a) * (p - b) * (p - c);\n  return std::sqrt(x);",
        "grade-194": {
            "execution": 0
        },
        "26": "if(a + b > c && a + c > b && b + c > a)\n        return sqrt(4 * a * a * b * b - (a * a + b * b - c * c) * (a * a + b * b - c * c)) / 4;\n    return -1;",
        "grade-26": {
            "execution": 0
        },
        "178": "float s=(a+b+c)/2.0;\n  if((s-a)<0.0 || (s-b)<0.0 || (s-c)<0.0){\n    return -1;\n  }\n  return sqrt(s*(s-a)*(s-b)*(s-c));",
        "grade-178": {
            "execution": 0
        },
        "144": "// Error checking\n    assert(a > 0 && b > 0 && c > 0);\n    //\n    long s = (a + b + c) / 2;\n    long area = sqrt(s * (s - a) * (s - b) * (s - c));\n    float ans = (float)area / (1.0 * area);\n    if(ans == 1.0) return area;\n    else return -1;",
        "grade-144": {
            "execution": 0
        },
        "22": "if (a+b <= c || a+c <= b || b+c <= a) return -1;\n    double p = (a+b+c)/2.0;\n    return sqrt(p*(p-a)*(p-b)*(p-c));",
        "grade-22": {
            "execution": 0
        },
        "156": "assert(a > 0 && b > 0 && c > 0);\n  if (a + b <= c || a + c <= b || b + c <= a) {\n    return -1;\n  }\n  float s = (a + b + c) / 2.0;\n  float area = sqrt(s * (s - a) * (s - b) * (s - c));\n  return round(area * 100) / 100;",
        "grade-156": {
            "execution": 0
        },
        "109": "float p = (a + b + c) / 2.0;\n  float area = sqrt(p * (p - a) * (p - b) * (p - c));\n  if (area <= 0) {\n    return -1;\n  }\n  return area;",
        "grade-109": {
            "execution": 0
        },
        "8": "float p, area;\n    p = (a + b + c) / 2.0;\n    area = sqrt(p * (p - a) * (p - b) * (p - c));\n    if (area > 0)\n        return area;\n    else\n        return -1;",
        "grade-8": {
            "execution": 0
        },
        "7": "float area = -1;\n  float s = (a + b + c) / 2.0;\n  area = sqrt(s * (s - a) * (s - b) * (s - c));\n  if (a + b > c && a + c > b && b + c > a) {\n    return area;\n  }\n  return -1;",
        "grade-7": {
            "execution": 0
        },
        "23": "long sum = a + b + c;\n    if (a > 0 && b > 0 && c > 0 && (a < sum) && (b < sum) && (c < sum)) {\n        float s = (a + b + c) / 2.0;\n        return sqrt(s * (s - a) * (s - b) * (s - c));\n    }\n    return -1;",
        "grade-23": {
            "execution": 0
        },
        "55": "if(a < 0 || b < 0 || c < 0) return -1;\n    if(a + b > c && a + c > b && b + c > a)\n        return 0.5 * std::sqrt((a + b + c) * (a + b - c) * (a + c - b) * (b + c - a));\n    return -1;",
        "grade-55": {
            "execution": 0
        },
        "59": "return 0;",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n",
        "snippet": [
            "    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\n"
        ],
        "simplified": "Given an array arr of integers and a positive integer k, return a sorted list of length k with the maximum k numbers in arr. Note: 1. The length of the array will be in the range of [1, 1000]. 2. The elements in the array will be in the range of [-1000, 1000]. 3. 0 <= k <= len(arr)",
        "task_id": "120",
        "165": "std::vector<long> result;\n    std::priority_queue<long> pq;\n    for (auto num : arr) {\n        pq.push(num);\n        if (pq.size() > k) {\n            pq.pop();\n        }\n    }\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
        "grade-165": {
            "execution": 0
        },
        "28": "std::vector<long> result;\n    for (long i = 0; i < k; i++) {\n        long max = INT_MIN;\n        long maxIndex = -1;\n        for (long j = 0; j < arr.size(); j++) {\n            if (arr[j] > max) {\n                max = arr[j];\n                maxIndex = j;\n            }\n        }\n        result.push_back(max);\n        arr.erase(arr.begin() + maxIndex);\n    }\n    return result;",
        "grade-28": {
            "execution": 0
        },
        "6": "// Build the heap\n    std::make_heap(arr.begin(), arr.end());\n    // To store the result\n    std::vector<long> res;\n    for(long i = 0; i < k; i++) {\n        // Select the maximum from heap\n        res.push_back(arr.front());\n        // Delete the root\n        std::pop_heap(arr.begin(), arr.end());\n        arr.pop_back();\n    }\n    return res;",
        "grade-6": {
            "execution": 0
        },
        "191": "// create max heap\n    std::make_heap(arr.begin(), arr.end());\n    // pop k elements\n    for (int i = 0; i < k; i++) {\n        std::pop_heap(arr.begin(), arr.end());\n        arr.pop_back();\n    }\n    // sort the elements\n    std::sort(arr.begin(), arr.end());\n    return arr;",
        "grade-191": {
            "execution": 0
        },
        "70": "std::vector<long> res;\n    if (arr.size() < k) {\n        return res;\n    }\n    std::multiset<long> mt;\n    for (long el : arr) {\n        mt.insert(el);\n    }\n    std::vector<long>::iterator it = arr.begin();\n    while (k > 0) {\n        res.push_back(*mt.rbegin());\n        mt.erase(mt.find(*mt.rbegin()));\n        k--;\n    }\n    return res;",
        "grade-70": {
            "execution": 0
        },
        "62": "if (arr.size() == 0) return arr;\n    long len = arr.size();\n    if (k == 0) return std::vector<long>();\n    if (k >= len) return arr;\n    std::sort(arr.begin(), arr.end());\n    std::vector<long> result;\n    for (long i = len - 1; i >= len - k; i--) {\n        result.push_back(arr[i]);\n    }\n    return result;",
        "grade-62": {
            "execution": 0
        },
        "57": "std::vector<long> result(k);\n    long n = arr.size();\n    // insert the first k-1 elements into the priority queue\n    std::priority_queue<long> q;\n    for (long i = 0; i < k - 1; i++)\n        q.push(arr[i]);\n    // extract the max and insert\n    for (long i = k - 1; i < n; i++) {\n        q.push(arr[i]);\n        result[i - k + 1] = q.top();\n        q.pop();\n    }\n    // add the last k-1 elements\n    for (long i = 0; i < k - 1; i++) {\n        result[n - k + 1 + i] = q.top();\n        q.pop();\n    }\n    return result;",
        "grade-57": {
            "execution": 0
        },
        "35": "std::multiset<long> s;\n    for (long i = 0; i < arr.size(); i++) {\n        s.insert(arr[i]);\n        if (s.size() > k)\n            s.erase(s.begin());\n    }\n    std::vector<long> v(s.begin(), s.end());\n    std::reverse(v.begin(), v.end());\n    return v;",
        "grade-35": {
            "execution": 0
        },
        "190": "std::vector<long> result;\n    // TODO: Write your code here\n    return result;",
        "grade-190": {
            "execution": 0
        },
        "26": "std::vector<long> result;\n    for (long i = 0; i < k; i++) {\n        result.push_back(arr[i]);\n    }\n    std::sort(result.begin(), result.end());\n    for (long i = k; i < arr.size(); i++) {\n        long j = 0;\n        while (j < k && result[j] < arr[i]) {\n            j++;\n        }\n        if (j < k) {\n            result.insert(result.begin() + j, arr[i]);\n            result.pop_back();\n        }\n    }\n    return result;",
        "grade-26": {
            "execution": 0
        },
        "175": "// return a vector with maximum k values\n    // brute force: sort the array and return first k elements\n\n    std::sort(arr.begin(), arr.end());\n\n    std::vector<long> ans;\n    for(long i = arr.size() - 1; i >= arr.size() - k; i--) {\n        ans.push_back(arr[i]);\n    }\n    return ans;",
        "grade-175": {
            "execution": 0
        },
        "140": "std::vector<long> result;\n    for (long i = 0; i < k; i++) {\n        result.push_back(arr[i]);\n    }\n    std::sort(result.begin(), result.end());\n    for (long i = k; i < arr.size(); i++) {\n        long j = 0;\n        while (j < k) {\n            if (arr[i] > result[j]) {\n                result.erase(result.begin() + j);\n                result.push_back(arr[i]);\n                std::sort(result.begin(), result.end());\n                break;\n            }\n            j++;\n        }\n    }\n    return result;",
        "grade-140": {
            "execution": 1
        },
        "22": "if (arr.size() == 0) return {};\n    if (arr.size() == 1) return arr;\n    std::sort(arr.begin(), arr.end());\n    std::vector<long> res(arr.end() - k, arr.end());\n    return res;",
        "grade-22": {
            "execution": 1
        },
        "152": "assert(k <= arr.size());\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for (long i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    while (k--) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
        "grade-152": {
            "execution": 0
        },
        "108": "std::vector<long> result;\n    if (arr.size() == k) {\n        return arr;\n    }\n    std::priority_queue<long> pq;\n    for (int i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    for (int i = 0; i < k; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
        "grade-108": {
            "execution": 0
        },
        "8": "std::vector<long> result;\n    for (long i = 0; i < k; i++) {\n        result.push_back(INT64_MIN);\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > result[0]) {\n            result[0] = arr[i];\n            long temp = result[0];\n            for (long j = 1; j < k; j++) {\n                if (result[j] < temp) {\n                    std::swap(result[j], temp);\n                }\n            }\n        }\n    }\n    return result;",
        "grade-8": {
            "execution": 0
        },
        "7": "// create max heap to store the largest k values\n    std::priority_queue<long> pq;\n    for (long& i : arr) {\n        pq.push(i);\n        if (pq.size() > k) {\n            pq.pop();\n        }\n    }\n    // create vector to store the largest k values in sorted order\n    std::vector<long> res;\n    while (!pq.empty()) {\n        res.push_back(pq.top());\n        pq.pop();\n    }\n    return res;",
        "grade-7": {
            "execution": 0
        },
        "23": "if (arr.size() == 0) {\n    return {};\n  }\n  if (arr.size() == 1) {\n    return arr;\n  }\n  std::vector<long> ret;\n  for (long i = 0; i < k; i++) {\n    long max = arr[0];\n    long max_index = 0;\n    for (long j = 0; j < arr.size(); j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        max_index = j;\n      }\n    }\n    ret.push_back(max);\n    arr.erase(arr.begin() + max_index);\n  }\n  return ret;",
        "grade-23": {
            "execution": 0
        },
        "55": "// Insert your code here\n  int n = arr.size();\n  if(k > n){\n    k = n;\n  }\n  std::priority_queue<long> pq;\n  for(int i = 0; i < k; i++){\n    pq.push(arr[i]);\n  }\n  for(int i = k; i < n; i++){\n    if(arr[i] > pq.top()){\n      pq.pop();\n      pq.push(arr[i]);\n    }\n  }\n  std::vector<long> ans;\n  while(!pq.empty()){\n    ans.push_back(pq.top());\n    pq.pop();\n  }\n  std::reverse(ans.begin(), ans.end());\n  return ans;",
        "grade-55": {
            "execution": 0
        },
        "59": "std::vector<long> result;\n    std::priority_queue<long> pq;\n    for (long i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    long i = 0;\n    while (!pq.empty() && i < k) {\n        result.push_back(pq.top());\n        pq.pop();\n        i++;\n    }\n    return result;",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of \"<\" and \">\".\n// return True if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n",
        "snippet": [
            "    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='<') level+=1;\n        if (brackets[i]=='>') level-=1;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}\n"
        ],
        "simplified": "brackets is a string of \"<\" and \">\". return True if every opening bracket has a corresponding closing bracket.",
        "task_id": "56",
        "171": "int a = 0;\n    for (int i = 0; i < brackets.size(); i++) {\n        if (brackets[i] == '<') {\n            a++;\n        } else {\n            a--;\n        }\n        if (a < 0) {\n            return false;\n        }\n    }\n    if (a == 0) {\n        return true;\n    } else {\n        return false;\n    }",
        "grade-171": {
            "execution": 1
        },
        "28": "std::stack<char> s;\n    for(int i=0;i<brackets.size();i++){\n        if(brackets[i]=='<'){\n            s.push(brackets[i]);\n        }\n        else{\n            if(s.empty()){\n                return false;\n            }\n            else{\n                s.pop();\n            }\n        }\n    }\n    if(s.empty()){\n        return true;\n    }\n    else{\n        return false;\n    }",
        "grade-28": {
            "execution": 1
        },
        "6": "std::stack<char> bracketStack;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '<') {\n            bracketStack.push(brackets[i]);\n        } else {\n            if (bracketStack.empty()) {\n                return false;\n            } else {\n                bracketStack.pop();\n            }\n        }\n    }\n    return bracketStack.empty();",
        "grade-6": {
            "execution": 1
        },
        "71": "if (brackets.size() == 0) {\n\t\treturn true;\n\t}\n\telse if (brackets.at(0) == '>') {\n\t\treturn false;\n\t}\n\telse {\n\t\tint b = 0;\n\t\tfor (char c : brackets) {\n\t\t\tif (c == '<') {\n\t\t\t\tb++;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tb--;\n\t\t\t}\n\t\t\tif (b < 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tif (b != 0) {\n\t\t\treturn false;\n\t\t}\n\t\telse {\n\t\t\treturn true;\n\t\t}\n\t}",
        "grade-71": {
            "execution": 1
        },
        "63": "std::stack<char> bracket;\n  for (int i = 0; i < brackets.size(); i++) {\n    if (brackets[i] == '<') {\n      bracket.push(brackets[i]);\n    } else {\n      if (bracket.empty()) {\n        return false;\n      } else {\n        bracket.pop();\n      }\n    }\n  }\n  if (bracket.empty()) {\n    return true;\n  } else {\n    return false;\n  }",
        "grade-63": {
            "execution": 1
        },
        "58": "// all the opening brackets\n  std::stack<char> stack;\n  // iterate the whole string\n  for (char& ch : brackets) {\n    // we found an opening bracket\n    if (ch == '<') {\n      stack.push(ch);\n    }\n    // we found a closing bracket\n    else {\n      // if we found a closing bracket but there are no\n      // opening brackets we have a wrong bracketing\n      if (stack.empty()) {\n        return false;\n      }\n      //  remove the top opening bracket\n      stack.pop();\n    }\n  }\n  // the whole string is correct iff the stack is empty\n  return stack.empty();",
        "grade-58": {
            "execution": 1
        },
        "35": "",
        "grade-35": {
            "execution": 0
        },
        "26": "// Print a message to show that the function has been called.\n    std::cout << \"The string is \" << brackets << std::endl;\n    int open_bracket_num = 0;\n    int close_bracket_num = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '<') {\n            open_bracket_num++;\n        } else if (brackets[i] == '>') {\n            close_bracket_num++;\n        }\n    }\n    if (open_bracket_num != close_bracket_num) {\n        return false;\n    }\n    int balance = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '<') {\n            balance++;\n        } else if (brackets[i] == '>') {\n            balance--;\n        }\n        if (balance < 0) {\n            return false;\n        }\n    }\n    if (balance != 0) {\n        return false;\n    }\n    return true;",
        "grade-26": {
            "execution": 1
        },
        "182": "int i, num=0;\n  int n = brackets.length();\n  for(i=0;i<n;i++){\n    if(brackets[i]=='<') num++;\n    else num--;\n    if(num<0) break;\n  }\n  if(num!=0) return false;\n  return true;",
        "grade-182": {
            "execution": 1
        },
        "145": "// YOUR CODE HERE\n    // check if brackets string is empty. If yes, return true\n    if (brackets.length() == 0) {\n        return true;\n    }\n    // check if brackets string has odd number of characters. If yes, return false\n    if (brackets.length() % 2 != 0) {\n        return false;\n    }\n    // if brackets has even number of characters and is not empty, create a stack\n    std::stack<char> stk;\n    // iterate through brackets string\n    for (char &c : brackets) {\n        // if current character is opening bracket, push it to stack\n        if (c == '<') {\n            stk.push(c);\n        }\n        // if current character is closing bracket\n        else {\n            // if stack is empty, that means there's a closing bracket with no\n            // corresponding opening bracket, so return false\n            if (stk.empty()) {\n                return false;\n            }\n            // otherwise, pop the stack as there's an opening bracket corresponding\n            // to the current closing bracket\n            else {\n                stk.pop();\n            }\n        }\n    }\n    // if stack is empty, return true. Otherwise, return false\n    return stk.empty();",
        "grade-145": {
            "execution": 1
        },
        "22": "std::stack<char> stk;\n    for (int i = 0; i < brackets.size(); i++) {\n        if (brackets[i] == '<') {\n            stk.push(brackets[i]);\n        } else {\n            if (stk.empty()) {\n                return false;\n            } else {\n                stk.pop();\n            }\n        }\n    }\n    return stk.empty();",
        "grade-22": {
            "execution": 1
        },
        "158": "int len = brackets.length();\n\tint count = 0;\n\tfor (int i = 0; i < len; i++) {\n\t\tif (brackets[i] == '<') {\n\t\t\tcount++;\n\t\t}\n\t\telse {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif (count != 0) {\n\t\treturn false;\n\t}\n\treturn true;",
        "grade-158": {
            "execution": 1
        },
        "113": "/*\n\tint open=0;\n\tint close=0;\n\tint i;\n\tfor(i=0;i<brackets.length();i++)\n\t{\n\t\tif(brackets[i]=='<')\n\t\t\topen++;\n\t\telse if(brackets[i]=='>')\n\t\t\tclose++;\n\t\tif(close>open)\n\t\t\treturn false;\n\t}\n\tif(open==close)\n\t\treturn true;\n\telse\n\t\treturn false;\n\t\t*/\n\tstd::stack<char> st;\n\tfor(int i=0;i<brackets.length();i++)\n\t{\n\t\tif(brackets[i]=='<')\n\t\t\tst.push(brackets[i]);\n\t\telse if(brackets[i]=='>')\n\t\t{\n\t\t\tif(st.empty())\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t\tst.pop();\n\t\t}\n\t}\n\tif(st.empty())\n\t\treturn true;\n\telse\n\t\treturn false;",
        "grade-113": {
            "execution": 1
        },
        "8": "// set open_counter to 0\n    int open_counter = 0;\n    // loop over chars in brackets\n    for (size_t i = 0; i < brackets.size(); i++) {\n        // if char is \">\"\n        if (brackets[i] == '>') {\n            // decrement open_counter\n            open_counter--;\n        }\n        // if char is \"<\"\n        else if (brackets[i] == '<') {\n            // increment open_counter\n            open_counter++;\n        }\n        // if open_counter is less than 0\n        if (open_counter < 0) {\n            // return False\n            return false;\n        }\n    }\n    // if open_counter is 0\n    if (open_counter == 0) {\n        // return True\n        return true;\n    }\n    // else\n    else {\n        // return False\n        return false;\n    }",
        "grade-8": {
            "execution": 1
        },
        "7": "int balance = 0;\n    for (char bracket : brackets) {\n        if (bracket == '<') {\n            balance += 1;\n        } else {\n            balance -= 1;\n        }\n        if (balance < 0) {\n            return false;\n        }\n    }\n    return balance == 0;",
        "grade-7": {
            "execution": 1
        },
        "23": "// your code here",
        "grade-23": {
            "execution": 0
        },
        "56": "// You're welcome to use a stack, we've included one for you.\n  std::stack<char> stack;\n  // You can add some code here to make it easier to solve the problem.\n  \n  // You'll need to fill this with code!\n  // Note that this code currently does nothing, and will always return true.\n  // This is only here so that the code compiles.\n  for(int i=0;i<brackets.length();i++){\n    if(brackets[i]=='<'){\n      stack.push(brackets[i]);\n    }\n    else if(!stack.empty()){\n      stack.pop();\n    }\n    else\n      return false;\n  }\n  if(stack.empty())\n    return true;\n  else\n    return false;",
        "grade-56": {
            "execution": 1
        },
        "60": "if (brackets.size()%2!=0) return false;\n\tstd::stack<char> s;\n\tfor (int i=0;i<brackets.size();i++) {\n\t\tif (brackets[i]=='<') {\n\t\t\ts.push(brackets[i]);\n\t\t}\n\t\telse {\n\t\t\tif (s.empty()) return false;\n\t\t\ts.pop();\n\t\t}\n\t}\n\treturn s.empty();",
        "grade-60": {
            "execution": 1
        },
        "135": "// hint: it may be useful to know how many \"open\"\n  // angle brackets there are at any time.\n  int counter = 0;\n  for (int i = 0; i < brackets.size(); i++) {\n    if (brackets[i] == '<') {\n      counter++;\n    } else {\n      counter--;\n    }\n    if (counter < 0) {\n      return false;\n    }\n  }\n  if (counter == 0) {\n    return true;\n  } else {\n    return false;\n  }",
        "grade-135": {
            "execution": 1
        },
        "161": "// replace all characters in brackets with '<' or '>'\n  for (int i = 0; i < brackets.size(); i++) {\n    if (brackets[i] != '<' && brackets[i] != '>') {\n      brackets[i] = '?';\n    }\n  }\n  // return true if brackets is the same as brackets reversed\n  std::string reversed = brackets;\n  std::reverse(reversed.begin(), reversed.end());\n  return brackets == reversed;",
        "grade-161": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string s, long n) {\n",
        "snippet": [
            "    string vowels=\"aeiouAEIOU\";\n    string current=\"\";\n    vector<string> out={};\n    int numc=0;\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n        if (s[i]==' ')\n        {\n            if (numc==n) out.push_back(current);\n            current=\"\";\n            numc=0;\n        }\n        else\n        {\n            current=current+s[i];\n            if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))\n            if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())\n                numc+=1;\n        }\n    return out;\n}\n"
        ],
        "simplified": "Given a string s and a natural number n, you have been tasked to implement a function that returns a list of all words from string s that contain exactly n consonants, in order these words appear in the string s. If the string s is empty then the function should return an empty list. Note: you may assume the input string contains only letters and spaces.",
        "task_id": "117",
        "163": "std::vector<std::string> v;\n    int cnt = 0;\n    std::string word = \"\";\n    for (char& c : s) {\n        if (c != ' ') {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n                cnt = 0;\n            else\n                cnt++;\n            word += c;\n        }\n        else {\n            if (cnt == n) {\n                v.push_back(word);\n            }\n            cnt = 0;\n            word = \"\";\n        }\n    }\n    if (cnt == n)\n        v.push_back(word);\n    return v;",
        "grade-163": {
            "execution": 0
        },
        "28": "//your code here",
        "grade-28": {
            "execution": 0
        },
        "6": "std::stringstream ss(s);\n\tstd::vector<std::string> words;\n\tstd::string word;\n\tstd::vector<std::string> ret;\n\twhile (ss >> word) {\n\t\tlong count = 0;\n\t\tstd::string lower_case = word;\n\t\tstd::transform(lower_case.begin(), lower_case.end(), lower_case.begin(), ::tolower);\n\t\tfor (int i = 0; i < lower_case.size(); i++) {\n\t\t\tif (lower_case[i] != 'a' && lower_case[i] != 'e' && lower_case[i] != 'i' && lower_case[i] != 'o' && lower_case[i] != 'u') {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif (count == n) {\n\t\t\tret.push_back(word);\n\t\t}\n\t}\n\treturn ret;",
        "grade-6": {
            "execution": 1
        },
        "189": "// Let's break down this problem step by step, shall we?\n\t// We need to iterate over each letter in the string 's' and check \n\t// whether or not that letter is a consonant or a vowel.\n\t// There are two things we can do, we can write out every possible vowel \n\t// and check if the letter is contained in that list, or we can use \n\t// regular expressions and check if the letter is contained in a regex \n\t// that checks if the letter is a vowel.\n\t// Let's go with the second approach.\n\t// We can use std::regex_match to check if a given character is a vowel, \n\t// let's implement that:\n\tauto is_vowel = [](char c) {\n\t\treturn std::regex_match(std::string(1, c), std::regex(\"[aeiou]\"));\n\t};\n\t// Next, we need to iterate over the input string and check if each letter \n\t// is a vowel or a consonant, and keep track of how many consonants are \n\t// in the current word.\n\tstd::vector<std::string> result;\n\tstd::string current_word;\n\tlong current_word_consonants = 0;\n\tfor (char c : s) {\n\t\t// If the current character is a vowel we go to the next character\n\t\tif (is_vowel(c)) {\n\t\t\tcontinue;\n\t\t}\n\t\t// If the current character is a consonant we append it to the current \n\t\t// word and increment the consonant counter for the current word.\n\t\tcurrent_word += c;\n\t\tcurrent_word_consonants++;\n\t\t// If the next character is a space, we've reached the end of a word.\n\t\t// We need to check if the current word has exactly n consonants and \n\t\t// add it to the result vector if that's the case.\n\t\tif (c == ' ') {\n\t\t\tif (current_word_consonants == n) {\n\t\t\t\tresult.push_back(current_word);\n\t\t\t}\n\t\t\t// And then reset the current",
        "grade-189": {
            "execution": 0
        },
        "70": "std::vector<std::string> words;\n  std::string word;\n  //char vowels[] = {'a', 'e', 'i', 'o', 'u'};\n  //std::vector<char> v(vowels, vowels + sizeof(vowels)/sizeof(char));\n  long count = 0;\n  for(int i = 0; i < s.length(); i++) {\n    if(s[i] == ' ') {\n      if(count == n) {\n        words.push_back(word);\n      }\n      word = \"\";\n      count = 0;\n    } else {\n      word += s[i];\n      if(s[i] != 'a' && s[i] != 'e' && s[i] != 'i' && s[i] != 'o' && s[i] != 'u') {\n        count++;\n      }\n    }\n  }\n  if(count == n) {\n    words.push_back(word);\n  }\n  return words;",
        "grade-70": {
            "execution": 0
        },
        "62": "int cons = 0;\n\tstd::vector<std::string> result;\n\tstd::string word = \"\";\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (s[i] == ' ') {\n\t\t\tif (cons == n) {\n\t\t\t\tresult.push_back(word);\n\t\t\t}\n\t\t\tword = \"\";\n\t\t\tcons = 0;\n\t\t}\n\t\telse {\n\t\t\tword += s[i];\n\t\t\tif (s[i] != 'a' && s[i] != 'e' && s[i] != 'i' && s[i] != 'o' && s[i] != 'u') {\n\t\t\t\tcons++;\n\t\t\t}\n\t\t}\n\t}\n\tif (cons == n) {\n\t\tresult.push_back(word);\n\t}\n\treturn result;",
        "grade-62": {
            "execution": 0
        },
        "57": "std::vector<std::string> result;\n    std::vector<std::string> words;\n    int count = 0;\n    std::string w = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') {\n            words.push_back(w);\n            w = \"\";\n        } else {\n            w += s[i];\n        }\n    }\n    words.push_back(w);\n    for (int i = 0; i < words.size(); i++) {\n        count = 0;\n        for (int j = 0; j < words[i].length(); j++) {\n            if (words[i][j] != 'a' && words[i][j] != 'e' && words[i][j] != 'i' && words[i][j] != 'o' && words[i][j] != 'u') {\n                count++;\n            }\n        }\n        if (count == n) {\n            result.push_back(words[i]);\n        }\n    }\n    return result;",
        "grade-57": {
            "execution": 0
        },
        "35": "if(s.empty()) return {};\n    std::vector<std::string> res;\n    std::string temp;\n    for(int i = 0; i < s.size(); i++){\n        if(s[i] != ' '){\n            temp += s[i];\n        }else{\n            if(temp.size() == n) res.push_back(temp);\n            temp = \"\";\n        }\n    }\n    if(temp.size() == n) res.push_back(temp);\n    return res;",
        "grade-35": {
            "execution": 0
        },
        "188": "std::vector<std::string> res;\n  std::stringstream ss(s);\n  std::string word;\n  while (ss >> word) {\n    int numConsonants = 0;\n    for (char c : word) {\n      if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n        numConsonants++;\n      }\n    }\n    if (numConsonants == n) {\n      res.push_back(word);\n    }\n  }\n  return res;",
        "grade-188": {
            "execution": 0
        },
        "26": "std::istringstream stream(s);\n    std::vector<std::string> words;\n    std::string word;\n    std::regex pattern(\"[^aeiou ]\");\n    while (stream >> word) {\n        if (std::regex_replace(word, pattern, \"\").size() == n)\n            words.push_back(word);\n    }\n    return words;",
        "grade-26": {
            "execution": 0
        },
        "173": "std::vector<std::string> result;\n  std::istringstream ss(s);\n  std::string curr;\n  while (ss >> curr) {\n    if (count_consonants(curr) == n)\n      result.push_back(curr);\n  }\n  return result;",
        "grade-173": {
            "execution": 0
        },
        "139": "std::vector<std::string> res;\n  int len = s.length();\n  int cnt = 0;\n  std::string temp = \"\";\n  for(int i = 0; i < len; i++) {\n    if(s[i] != ' ') {\n      if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n        cnt++;\n      }\n      temp += s[i];\n    } else {\n      if(temp.length() - cnt == n) {\n        res.push_back(temp);\n      }\n      temp = \"\";\n      cnt = 0;\n    }\n  }\n  if(temp.length() - cnt == n) {\n    res.push_back(temp);\n  }\n  return res;",
        "grade-139": {
            "execution": 0
        },
        "22": "//your code here\n    int i, j, len, count, val;\n    len = s.length();\n    std::vector<std::string> v;\n    std::stringstream ss(s);\n    std::string word;\n    // std::cout << s << \"\\n\";\n    while(ss >> word) {\n      count = 0;\n      // std::cout << word << \"\\n\";\n      for(j = 0; j < word.length(); j++) {\n        val = isalpha(word[j]);\n        if(val == 0) {\n          count++;\n        }\n      }\n      if(count == n) {\n        v.push_back(word);\n      }\n    }\n    return v;",
        "grade-22": {
            "execution": 0
        },
        "151": "std::vector<std::string> result;\n    std::string word;\n    std::stringstream ss(s);\n    while (std::getline(ss, word, ' ')) {\n        std::cout << word << std::endl;\n        int wordLength = word.length();\n        int count = 0;\n        for (int i = 0; i < wordLength; i++) {\n            if (word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u') {\n                count++;\n            }\n        }\n        if (count == n) {\n            result.push_back(word);\n        }\n    }\n    return result;",
        "grade-151": {
            "execution": 0
        },
        "108": "std::vector<std::string> result;\n    std::stringstream stream(s);\n    std::string item;\n    while (getline(stream, item, ' ')) {\n        int count = 0;\n        for (auto ch : item) {\n            if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') count++;\n        }\n        if (item.size() - count == n) result.push_back(item);\n    }\n    return result;",
        "grade-108": {
            "execution": 0
        },
        "8": "std::vector<std::string> result;\n    std::stringstream ss(s);\n    std::string word;\n    while (ss >> word) {\n        long count = 0;\n        for (char const &c : word) {\n            switch (c) {\n                case 'b':\n                case 'c':\n                case 'd':\n                case 'f':\n                case 'g':\n                case 'h':\n                case 'j':\n                case 'k':\n                case 'l':\n                case 'm':\n                case 'n':\n                case 'p':\n                case 'q':\n                case 'r':\n                case 's':\n                case 't':\n                case 'v':\n                case 'w':\n                case 'x':\n                case 'y':\n                case 'z':\n                    count++;\n            }\n        }\n        if (count == n) {\n            result.push_back(word);\n        }\n    }\n    return result;",
        "grade-8": {
            "execution": 0
        },
        "7": "std::vector<std::string> result;\n    std::string temp = \"\";\n    int consNum = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] != ' ') {\n            temp += s[i];\n            if (isalpha(s[i]) && \n                (s[i] != 'a' && s[i] != 'e' && s[i] != 'i' && s[i] != 'o' && s[i] != 'u')) {\n                consNum++;\n            }\n        } else {\n            if (consNum == n) {\n                result.push_back(temp);\n            }\n            temp = \"\";\n            consNum = 0;\n        }\n    }\n    if (consNum == n) {\n        result.push_back(temp);\n    }\n    return result;",
        "grade-7": {
            "execution": 0
        },
        "23": "std::vector<std::string> words;\n    long vowels = 0;\n    long consonants = 0;\n    std::string word = \"\";\n    for (auto c : s) {\n        if (c != ' ') {\n            word += c;\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                vowels++;\n            } else {\n                consonants++;\n            }\n        } else {\n            if (consonants == n) {\n                words.push_back(word);\n            }\n            word = \"\";\n            vowels = 0;\n            consonants = 0;\n        }\n    }\n    if (consonants == n) {\n        words.push_back(word);\n    }\n    return words;",
        "grade-23": {
            "execution": 0
        },
        "55": "std::vector<std::string> words;\n  std::string word;\n  for (char c : s) {\n    if (c == ' ') {\n      if (count_consonants(word) == n) {\n        words.push_back(word);\n      }\n      word = \"\";\n    } else {\n      word += c;\n    }\n  }\n  if (count_consonants(word) == n) {\n    words.push_back(word);\n  }\n  return words;",
        "grade-55": {
            "execution": 0
        },
        "59": "std::vector<std::string> result;\n\tstd::stringstream ss(s);\n\tstd::string word;\n\twhile (ss >> word) {\n\t\tlong consonants = 0;\n\t\tfor (char c : word) {\n\t\t\tswitch (tolower(c)) {\n\t\t\tcase 'a':\n\t\t\tcase 'e':\n\t\t\tcase 'i':\n\t\t\tcase 'o':\n\t\t\tcase 'u':\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconsonants++;\n\t\t\t}\n\t\t}\n\t\tif (consonants == n) {\n\t\t\tresult.push_back(word);\n\t\t}\n\t}\n\treturn result;",
        "grade-59": {
            "execution": 1
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be 6.\n// For num = \"2020\" the output should be 2.\nlong hex_key(std::string num) {\n",
        "snippet": [
            "    string key=\"2357BD\";\n    int out=0;\n    for (int i=0;i<num.length();i++)\n    if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;\n    return out;\n}\n"
        ],
        "simplified": "You have been tasked to write a function that receives a hexadecimal number as a string and counts the number of hexadecimal digits that are primes (prime number, or a prime, is a natural number greater than 1 that is not a product of two smaller natural numbers). Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Prime numbers are 2, 3, 5, 7, 11, 13, 17,... So you have to determine a number of the following digits: 2, 3, 5, 7, B (=decimal 11), D (=decimal 13). Note: you may assume the input is always correct or empty string, and symbols A,B,C,D,E,F are always uppercase.",
        "task_id": "78",
        "168": "std::map<std::string, int> hex_keys = \n        {{\"A\", 10}, {\"B\", 11}, {\"C\", 12}, {\"D\", 13}, {\"E\", 14}, {\"F\", 15}};\n    std::string key = \"\";\n    for (size_t i = 0; i < num.size(); i++) {\n        if (num[i] >= '0' && num[i] <= '9') {\n            key += num[i];\n        } else {\n            key += std::to_string(hex_keys[std::string(1, num[i])]);\n        }\n    }\n    return std::stol(key);",
        "grade-168": {
            "execution": 0
        },
        "29": "long hex_sum=0;\n    int power=0;\n    long hex_number=0;\n    std::string hex={\"0123456789ABCDEF\"};\n    int hex_array[16]={0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n    for(int i=num.size()-1;i>=0;i--){\n        auto x=num[i];\n        int index = hex.find(x);\n        hex_sum+=hex_array[index]*pow(16,power);\n        power++;\n    }\n    return hex_sum;",
        "grade-29": {
            "execution": 0
        },
        "6": "return std::stol(num, nullptr, 16);",
        "grade-6": {
            "execution": 0
        },
        "194": "long n = 0;\n    for (int i = 0; i < num.size(); i++) {\n        n *= 16;\n        if (isdigit(num[i]))\n            n += num[i] - '0';\n        else\n            n += num[i] - 'A' + 10;\n    }\n    return n;",
        "grade-194": {
            "execution": 0
        },
        "72": "long total = 0;\n  long count = 0;\n  for (int i = 0; i < num.length(); i++) {\n    if (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i] == '7' ||\n        num[i] == 'B' || num[i] == 'D') {\n      count++;\n    }\n  }\n  return count;",
        "grade-72": {
            "execution": 1
        },
        "64": "if (num.empty()) return 0;\n  const char *hex_characters = \"0123456789ABCDEF\";\n  long result = 0;\n  while(num.length() != 0) {\n    result = result*16;\n    for (int i = 0; i < 16; i++) {\n      if (hex_characters[i] == num[0]) {\n        result += i;\n        break;\n      }\n    }\n    num.erase(0,1);\n  }\n  return result;",
        "grade-64": {
            "execution": 0
        },
        "59": "long count = 0;\n    long k = 0;\n    std::vector<long> primes = {2, 3, 5, 7, 11, 13};\n    while (k < num.size()) {\n        for (long i = 0; i < primes.size(); i++) {\n            if (num[k] == std::to_string(primes[i])[0]) {\n                count++;\n            }\n        }\n        k++;\n    }\n    return count;",
        "grade-59": {
            "execution": 0
        },
        "36": "return std::stol(num, nullptr, 16);",
        "grade-36": {
            "execution": 0
        },
        "193": "long sum = 0;\n\t// bool input_error = false;\n\t// for (char c : num) {\n\t// \tif (c != '0' && c != '1' && c != '2' && c != '3' && c != '4' && c != '5' && c != '6' && c != '7' && c != '8' && c != '9' && c != 'A' && c != 'B' && c != 'C' && c != 'D' && c != 'E' && c != 'F') {\n\t// \t\tinput_error = true;\n\t// \t\tbreak;\n\t// \t}\n\t// }\n\t// assert(!input_error);\n\tfor (char c : num) {\n\t\tswitch (c) {\n\t\t\tcase '0':\n\t\t\tcase '1':\n\t\t\tcase '2':\n\t\t\tcase '3':\n\t\t\tcase '4':\n\t\t\tcase '5':\n\t\t\tcase '6':\n\t\t\tcase '7':\n\t\t\tcase '8':\n\t\t\tcase '9': {\n\t\t\t\tsum += c - '0';\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'A': {\n\t\t\t\tsum += 10;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'B': {\n\t\t\t\tsum += 11;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'C': {\n\t\t\t\tsum += 12;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'D': {\n\t\t\t\tsum += 13;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'E': {\n\t\t\t\tsum += 14;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'F': {\n\t\t\t\tsum += 15;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;",
        "grade-193": {
            "execution": 0
        },
        "27": "// Convert string num to a long\n\tlong long num_ll = std::stoll(num,nullptr,16);\n\tstd::cout << num_ll << \"\\n\";\n\treturn num_ll;",
        "grade-27": {
            "execution": 0
        },
        "178": "int primes[20] = {0,0,1,1,0,1,0,1,0,0,1,1,0,1,0,0,0,1,0,1};\n    long sum = 0;\n    for (int i = 0; i < num.length(); i++) {\n        int n = 0;\n        if (num[i] >= '0' && num[i] <= '9') {\n            n = num[i] - '0';\n        } else {\n            n = num[i] - 'A' + 10;\n        }\n        sum += primes[n];\n    }\n    return sum;",
        "grade-178": {
            "execution": 0
        },
        "144": "// hex key value\n\tstd::map<char, long> hex_kv = {{'0', 0}, {'1', 1}, {'2', 2}, {'3', 3}, {'4', 4},\n\t\t\t\t\t\t\t\t\t{'5', 5}, {'6', 6}, {'7', 7}, {'8', 8}, {'9', 9},\n\t\t\t\t\t\t\t\t\t{'A', 10}, {'B', 11}, {'C', 12}, {'D', 13}, {'E', 14}, {'F', 15}};\n\t// number of digits in hex key\n\tlong key_digits = hex_kv.size();\n\t// hex key value\n\tlong hex_key = 0;\n\t// compute hex key value\n\tfor (long i = 0; i < num.size(); i++) {\n\t\thex_key = hex_key * key_digits + hex_kv[num[i]];\n\t}\n\treturn hex_key;",
        "grade-144": {
            "execution": 0
        },
        "23": "long count = 0;\n  if (num.length() == 0) {\n    return 0;\n  }\n  for (int i = 0; i < num.length(); i++) {\n    if (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' || num[i] == 'D') {\n      count++;\n    }\n  }\n  return count;",
        "grade-23": {
            "execution": 1
        },
        "156": "return strtol(num.c_str(), NULL, 16);",
        "grade-156": {
            "execution": 0
        },
        "111": "// your code here\n    long result = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == 'A' || num[i] == 'B' || num[i] == 'D')\n            result++;\n    }\n    return result;",
        "grade-111": {
            "execution": 0
        },
        "9": "// hex_key => number of hex numbers that are primes\n  long hex_key = 0;\n  // split => split string by individual characters\n  std::vector<char> split;\n  // primes => prime numbers\n  std::vector<int> primes = {2, 3, 5, 7, 11, 13};\n  // create vector of split characters\n  for (int i = 0; i < num.length(); i++) {\n    split.push_back(num[i]);\n  }\n  // loop through split characters\n  for (int i = 0; i < split.size(); i++) {\n    // loop through primes\n    for (int j = 0; j < primes.size(); j++) {\n      // char -> digit for switch statement\n      char digit = (char)primes[j];\n      // check if prime number\n      switch (digit) {\n        case '2':\n          if (split[i] == '2') {\n            hex_key++;\n          }\n          break;\n        case '3':\n          if (split[i] == '3') {\n            hex_key++;\n          }\n          break;\n        case '5':\n          if (split[i] == '5') {\n            hex_key++;\n          }\n          break;\n        case '7':\n          if (split[i] == '7') {\n            hex_key++;\n          }\n          break;\n        case 'B':\n          if (split[i] == 'B') {\n            hex_key++;\n          }\n          break;\n        case 'D':\n          if (split[i] == 'D') {\n            hex_key++;\n          }\n          break;\n        default:\n          break;\n      }\n    }\n  }\n  return hex_key;",
        "grade-9": {
            "execution": 0
        },
        "7": "long long res = 0;\n\tfor (int i = 0; i < num.size(); i++) {\n\t\tif (num[i] >= '0' && num[i] <= '9') {\n\t\t\tres = res * 16 + num[i] - '0';\n\t\t}\n\t\telse {\n\t\t\tres = res * 16 + num[i] - 'A' + 10;\n\t\t}\n\t}\n\treturn res;",
        "grade-7": {
            "execution": 0
        },
        "24": "long res = 0;\n    long p = 1;\n    for (int i = num.size() - 1; i >= 0; i--) {\n        char c = num[i];\n        int d = c >= 'A' ? (10 + c - 'A') : (c - '0');\n        res += d * p;\n        p *= 16;\n    }\n    return res;",
        "grade-24": {
            "execution": 0
        },
        "57": "long hex_map[26] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25};\n\tlong dec = 0;\n\tlong res = 0;\n\tfor(int i = 0; i < num.length(); i++) {\n\t\tif(num[i] >= 65 && num[i] <= 70) {\n\t\t\tdec += hex_map[num[i] - 65] * pow(16,num.length() - i - 1);\n\t\t} else {\n\t\t\tdec += (num[i] - 48) * pow(16,num.length() - i - 1);\n\t\t}\n\t}\n\treturn dec;",
        "grade-57": {
            "execution": 0
        },
        "61": "long int key = 0;\n    for (int i = 0; i < num.length(); i++) {\n        char c = num[i];\n        if (c >= 'A' && c <= 'F') {\n            c = c - 'A' + '9' + 1;\n        }\n        key = key * 16 + (c - '0');\n    }\n    return key;",
        "grade-61": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is happy or not.\n// A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy) => False\nbool is_happy(std::string s) {\n",
        "snippet": [
            "    if (s.length()<3) return false;\n    for (int i=2;i<s.length();i++)\n    if (s[i]==s[i-1] or s[i]==s[i-2]) return false;\n    return true;\n}\n"
        ],
        "simplified": "You are given a string s. Your task is to check if the string is happy or not. A string is happy if its length is at least 3 and every 3 consecutive letters are distinct",
        "task_id": "80",
        "195": "//Your code here\n\tint n = s.length();\n\tif (n < 3)\n\t\treturn false;\n\tfor (int i = 0; i < n - 2; i++)\n\t{\n\t\tif (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n\t\t\treturn false;\n\t}\n\treturn true;",
        "grade-195": {
            "execution": 1
        },
        "28": "return (s.length() > 2) && (s[0] != s[1]) && (s[1] != s[2]) && (s[0] != s[2]);",
        "grade-28": {
            "execution": 0
        },
        "6": "int flag = 0;\n    if(s.length() < 3)\n        return false;\n    for(int i = 0; i < s.length() - 3; i++)\n    {\n        if(s[i] == s[i+1] && s[i+1] == s[i+2])\n            flag = 1;\n    }\n    if(flag == 1)\n        return false;\n    else\n        return true;",
        "grade-6": {
            "execution": 0
        },
        "74": "if(s.length() < 3)\n        return false;\n    if(s[0] == s[1] || s[1] == s[2] || s[0] == s[2])\n        return false;\n    int count = 1;\n    while(count < s.length() - 2){\n        if(s[count] == s[count + 1] || s[count + 1] == s[count + 2] || s[count] == s[count + 2])\n            return false;\n        count++;\n    }\n    return true;",
        "grade-74": {
            "execution": 1
        },
        "66": "for (int i = 0; i < s.size() - 2; i++) {\n    if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n      return false;\n    }\n  }\n  return true;",
        "grade-66": {
            "execution": 0
        },
        "59": "if(s.length() < 3) return false;\n    if(s[0] == s[1] && s[1] == s[2]) return false;\n    for(int i = 3; i < s.length(); i++){\n        if(s[i] == s[i-1] && s[i-1] == s[i-2]) return false;\n    }\n    return true;",
        "grade-59": {
            "execution": 0
        },
        "35": "if(s.length()<3) return false;\n    bool flag = true;\n    for(int i=0;i<s.length()-3;i++){\n        flag = true;\n        for(int j=i+1;j<i+3;j++){\n            if(s[i]==s[j]) {\n                flag = false;\n                break;\n            }\n        }\n        if(!flag) break;\n    }\n    return flag;",
        "grade-35": {
            "execution": 0
        },
        "26": "// Your code here\n    return false;",
        "grade-26": {
            "execution": 0
        },
        "161": "bool happy = true;\n  for (int i = 0; i < s.length() - 2; i++) {\n    if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n      happy = false;\n    }\n  }\n  return happy;",
        "grade-161": {
            "execution": 0
        },
        "22": "// First, we check the length of the string\n\tif (s.length() < 3) {\n\t\treturn false;\n\t}\n\t// We iterate through the string\n\tfor (int i = 2; i < s.length(); i++) {\n\t\t// We compare the letter with the previous one\n\t\tif (s[i] == s[i - 1]) {\n\t\t\treturn false;\n\t\t}\n\t\t// We compare the letter with the one from two positions before\n\t\tif (s[i] == s[i - 2]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;",
        "grade-22": {
            "execution": 1
        },
        "179": "int length = s.length();\n  if (length < 3) {\n    return false;\n  }\n  for (int i = 0; i < length - 2; i++) {\n    if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n      return false;\n    }\n  }\n  return true;",
        "grade-179": {
            "execution": 1
        },
        "118": "bool is_happy = true;\n    int s_length = s.length();\n    if (s_length < 3)\n        return false;\n    for (int i = 0; i < s_length - 2; i++) {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            is_happy = false;\n            break;\n        }\n    }\n    return is_happy;",
        "grade-118": {
            "execution": 1
        },
        "8": "// Your code here",
        "grade-8": {
            "execution": 0
        },
        "7": "// Write your code here",
        "grade-7": {
            "execution": 0
        },
        "23": "// check if string is happy or not\n    // your code here\n    for(int i=0;i<s.length()-2;i++){\n      if(s[i]==s[i+1] || s[i]==s[i+2] || s[i+1]==s[i+2])\n        return false;\n    }\n    return true;",
        "grade-23": {
            "execution": 0
        },
        "57": "std::set<char> chars;\n    int len = s.length();\n    if (len < 3) {\n        return false;\n    }\n    for (int i = 0; i < len; i++) {\n        if (i < 2) {\n            chars.insert(s[i]);\n        } else {\n            if (chars.find(s[i]) != chars.end()) {\n                return false;\n            } else {\n                chars.insert(s[i]);\n            }\n        }\n    }\n    return true;",
        "grade-57": {
            "execution": 0
        },
        "61": "if(s.length()<3) return false;\n    for(int i=0;i<s.length()-2;i++){\n        if(s[i]==s[i+1] || s[i]==s[i+2] || s[i+1]==s[i+2]) return false;\n    }\n    return true;",
        "grade-61": {
            "execution": 1
        },
        "143": "int n = s.length();\n    int m = n%3;\n    int checker = 0;\n    for(int i = 0; i < n-3; i+=3){\n        if(s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]){\n            return false;\n        }\n    }\n    if(m != 0){\n        checker = s[n-3]^s[n-2]^s[n-1];\n        if(checker == 0){\n            return false;\n        }\n    }\n    return true;",
        "grade-143": {
            "execution": 0
        },
        "182": "if(s.length()<3)\n        return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1] || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return true;",
        "grade-182": {
            "execution": 1
        },
        "167": "if (s.length() < 3)\n\t\treturn false;\n\telse {\n\t\tfor (int i = 0; i < s.length() - 2; i++) {\n\t\t\tif (s[i] == s[i + 1] && s[i] == s[i + 2])\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}",
        "grade-167": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7, 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nlong x_or_y(long n, long x, long y) {\n",
        "snippet": [
            "    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\n"
        ],
        "simplified": "A simple program which should return the value of x if n is a prime number and should return the value of y otherwise.",
        "task_id": "150",
        "168": "//TODO: complete this\n\tif(n==0 || n==1){\n\t\treturn y;\n\t}\n\telse if(n==2){\n\t\treturn x;\n\t}\n\telse{\n\t\tint flag=0;\n\t\tfor(int i=2;i<=n/2;i++){\n\t\t\tif(n%i==0){\n\t\t\t\tflag=1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(flag==0){\n\t\t\treturn x;\n\t\t}\n\t\telse{\n\t\t\treturn y;\n\t\t}\n\t}",
        "grade-168": {
            "execution": 1
        },
        "28": "if (n <= 1) return y;\n    int s = 0;\n    long u = n - 1;\n    while (u % 2 == 0) {\n        s++;\n        u /= 2;\n    }\n    // u is now odd\n    int t = 1;\n    long v = 2;\n    while (v <= u) {\n        t *= v;\n        v++;\n    }\n    long r = t + s;\n    while (r % 2 == 0) r /= 2;\n    long a = 2;\n    while (a < r) {\n        long z = pow(a, r);\n        long w = z % n;\n        if (w != 1) return y;\n        a++;\n    }\n    return x;",
        "grade-28": {
            "execution": 0
        },
        "6": "//WRITE YOUR CODE HERE\n  if(n < 2) return y;\n  for(int i = 2; i <= sqrt(n); i++)\n  {\n      if(n % i == 0)\n        return y;\n  }\n  return x;",
        "grade-6": {
            "execution": 1
        },
        "194": "if(n<2)\n        return y;\n    for(long i=2;i<n;i++)\n        if(n%i==0)\n            return y;\n    return x;",
        "grade-194": {
            "execution": 1
        },
        "70": "if(n==1)\n        return y;\n    for(int i=2;i<=sqrt(n);i++)\n    {\n        if(n%i==0)\n            return y;\n    }\n    return x;",
        "grade-70": {
            "execution": 1
        },
        "62": "// Condition to check whether n is prime or not.\n    if(n < 2)\n        return 0;\n    for(long i = 2; i <= sqrt(n); i++)\n        if(n % i == 0)\n            return y;\n    return x;",
        "grade-62": {
            "execution": 1
        },
        "57": "if (n == 2) return x;\n  // Check if n is prime.\n  for (long i = 2; i <= n / 2; i++) {\n    if (n % i == 0) {\n      return y;\n    }\n  }\n  return x;",
        "grade-57": {
            "execution": 0
        },
        "35": "if (n < 4) return n;\n  if (n % 2 == 0) return x;\n  if (n % 3 == 0) return y;\n  long d = 5;\n  while (d*d <= n) {\n    if (n % d == 0) return x;\n    if (n % (d+2) == 0) return y;\n    d += 6;\n  }\n  return n;",
        "grade-35": {
            "execution": 0
        },
        "193": "// Code here\n  int flag = 0;\n  for(int i = 2; i <= n/2; ++i)\n  {\n      if(n%i == 0)\n      {\n          flag = 1;\n          break;\n      }\n  }\n  if (flag == 0)\n      return x;\n  else\n      return y;",
        "grade-193": {
            "execution": 0
        },
        "26": "for (int i = 2; i < n; i++) {\n    if (n % i == 0) {\n      return y;\n    }\n  }\n  return x;",
        "grade-26": {
            "execution": 0
        },
        "178": "// TODO: implement your solution here\n\tfor(int i=2;i<n;i++)\n\t{\n\t\tif(n%i==0)\n\t\t{\n\t\t\treturn y;\n\t\t}\n\t}\n\treturn x;",
        "grade-178": {
            "execution": 0
        },
        "142": "if (n%2 == 0)\n    return y;\n  return x;",
        "grade-142": {
            "execution": 0
        },
        "22": "if (isPrime(n)) return x;\n  else return y;",
        "grade-22": {
            "execution": 0
        },
        "155": "// TODO: fill code here\n    if(n%2!=0){\n        return x;\n    }\n    else return y;",
        "grade-155": {
            "execution": 0
        },
        "109": "if(n%2==0)\n\t\treturn y;\n\tfor(int i=3;i<=n/2;i=i+2)\n\t{\n\t\tif(n%i==0)\n\t\t\treturn y;\n\t}\n\treturn x;",
        "grade-109": {
            "execution": 0
        },
        "8": "// TODO: implement this function properly\n  if(n<2) return y;\n  int i;\n  for(i=2;i<=n/2;i++)\n  {\n    if(n%i==0)\n    {\n      return y;\n    }\n  }\n  return x;",
        "grade-8": {
            "execution": 1
        },
        "7": "// Write your code here.\n\n  long primes[n+1];\n  for(long i=0;i<=n;i++)\n  {\n      primes[i]=1;\n  }\n  primes[0]=0;\n  primes[1]=0;\n  for(long i=2;i<=n;i++)\n  {\n      if(primes[i]==1)\n      {\n          for(long j=2;j*i<=n;j++)\n          {\n              primes[i*j]=0;\n          }\n      }\n  }\n  if(primes[n]==1)\n  {\n      return x;\n  }\n  else\n  {\n      return y;\n  }",
        "grade-7": {
            "execution": 1
        },
        "23": "return (n % 2) == 0 ? y : x;",
        "grade-23": {
            "execution": 0
        },
        "55": "// YOUR CODE HERE\n  if(n==2){\n      return x;\n  }\n  if(n%2==0){\n      return y;\n  }\n  else{\n    return x;\n  }",
        "grade-55": {
            "execution": 0
        },
        "59": "// implement this function!\n  // x_or_y(15, 8, 5) returns 5.\n  // x_or_y(7, 34, 12) returns 34.\n  if(n==1){\n    return y;\n  }\n  if(n==2){\n    return x;\n  }\n  if(n%2==0){\n    return y;\n  }\n  else{\n    return x;\n  }",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nstd::vector<std::string> sorted_list_sum(std::vector<std::string> lst) {\n",
        "snippet": [
            "    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n    if (lst[i].length()%2==0) out.push_back(lst[i]);\n    string mid;\n    sort(out.begin(),out.end());\n    for (int i=0;i<out.size();i++)\n    for (int j=1;j<out.size();j++)\n    if (out[j].length()<out[j-1].length())\n    {\n        mid=out[j];out[j]=out[j-1];out[j-1]=mid;\n    }\n    return out;\n}\n"
        ],
        "simplified": "Write a function that accepts a list of strings as a parameter, deletes the strings that have odd lengths from it, and returns the resulted list with a sorted order, The list is always a list of strings and never an array of numbers, and it may contain duplicates. The order of the list should be ascending by length of each word, and you should return the list sorted by that rule. If two words have the same length, sort the list alphabetically. The function should return a list of strings in sorted order. You may assume that all words will have the same length.",
        "task_id": "149",
        "170": "// Your code here:\n    std::vector<std::string> lst_new;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i].length() % 2 == 0) {\n            lst_new.push_back(lst[i]);\n        }\n    }\n    std::sort(lst_new.begin(), lst_new.end());\n    return lst_new;",
        "grade-170": {
            "execution": 0
        },
        "29": "// fill your code here",
        "grade-29": {
            "execution": 0
        },
        "6": "std::vector<std::string> vc;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i].size() % 2 == 0) {\n            vc.push_back(lst[i]);\n        }\n    }\n    sort(vc.begin(), vc.end());\n    return vc;",
        "grade-6": {
            "execution": 0
        },
        "199": "std::sort(lst.begin(), lst.end());\n    std::vector<std::string> odd_length;\n    for (std::string word : lst) {\n        if (word.length() % 2 != 0) {\n            odd_length.push_back(word);\n        }\n    }\n    return odd_length;",
        "grade-199": {
            "execution": 0
        },
        "72": "std::vector<std::string> result;\n    for (auto v : lst) {\n        result.push_back(v);\n    }\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j = i + 1; j < lst.size(); j++) {\n            if (lst[i].length() > lst[j].length()) {\n                std::swap(result[i], result[j]);\n            }\n        }\n    }\n    return result;",
        "grade-72": {
            "execution": 0
        },
        "64": "std::vector<std::string> res_lst;\n    std::sort(lst.begin(), lst.end());\n    for (auto l : lst) {\n        res_lst.push_back(l);\n    }\n    return res_lst;",
        "grade-64": {
            "execution": 0
        },
        "59": "// Write your code here\n  std::vector<std::string> new_lst;\n  int word_length = lst[0].length();\n  for (int i = 0; i < lst.size(); i++) {\n    if (lst[i].length() == word_length) {\n      new_lst.push_back(lst[i]);\n    }\n  }\n  std::sort(new_lst.begin(), new_lst.end());\n  return new_lst;",
        "grade-59": {
            "execution": 0
        },
        "36": "std::vector<std::string> v;\n    for (auto word : lst) {\n        if ((word.length()%2)==0) {\n            v.push_back(word);\n        }\n    }\n    std::sort(v.begin(), v.end());\n    std::sort(v.begin(), v.end(), [](std::string s1, std::string s2) {\n        return s1.length() < s2.length();\n    });\n    return v;",
        "grade-36": {
            "execution": 1
        },
        "198": "std::sort(lst.begin(), lst.end());\n    lst.erase(unique(lst.begin(), lst.end()), lst.end());\n    return lst;",
        "grade-198": {
            "execution": 0
        },
        "27": "std::sort(lst.begin(), lst.end());\n  return lst;",
        "grade-27": {
            "execution": 0
        },
        "183": "for (size_t i = 0; i < lst.size(); i++) {\n        for (size_t j = i + 1; j < lst.size(); j++) {\n            if (lst[i].length() > lst[j].length()) {\n                std::string temp = lst[i];\n                lst[i] = lst[j];\n                lst[j] = temp;\n            }\n        }\n    }\n    return lst;",
        "grade-183": {
            "execution": 0
        },
        "142": "int i = 0;\n  while (i < lst.size()) {\n    if (lst[i].size() % 2 != 0) {\n      lst.erase(lst.begin() + i);\n    } else {\n      i++;\n    }\n  }\n  std::sort(lst.begin(), lst.end());\n  return lst;",
        "grade-142": {
            "execution": 0
        },
        "23": "std::vector<std::string> result;\n    std::sort(lst.begin(), lst.end());\n    int current_length = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i].length() != current_length) {\n            current_length = lst[i].length();\n            result.push_back(lst[i]);\n        }\n    }\n    return result;",
        "grade-23": {
            "execution": 0
        },
        "156": "std::vector<std::string> result;\n  for (std::string item : lst) {\n    if (item.length() % 2 == 0) {\n      result.push_back(item);\n    }\n  }\n  return result;",
        "grade-156": {
            "execution": 0
        },
        "110": "std::vector<std::string> res;\n    for (auto s : lst) {\n        res.push_back(s);\n    }\n    sort(res.begin(), res.end());\n    return res;",
        "grade-110": {
            "execution": 0
        },
        "8": "std::vector<std::string> lst2;\n    std::sort(lst.begin(), lst.end());\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i].size() % 2 == 0) {\n            lst2.push_back(lst[i]);\n        }\n    }\n    std::sort(lst2.begin(), lst2.end(), [](std::string a, std::string b) { return a.size() < b.size(); });\n    return lst2;",
        "grade-8": {
            "execution": 1
        },
        "7": "std::vector<std::string> even_lst;\n  for (std::string s : lst) {\n    if (s.length() % 2 == 0) {\n      even_lst.push_back(s);\n    }\n  }\n  std::sort(even_lst.begin(), even_lst.end());\n  return even_lst;",
        "grade-7": {
            "execution": 0
        },
        "24": "std::vector<std::string> odd_lst;\n  for (unsigned int i = 0; i < lst.size(); i++) {\n    if (lst[i].length() % 2 == 0) {\n      odd_lst.push_back(lst[i]);\n    }\n  }\n  std::sort(odd_lst.begin(), odd_lst.end());\n  return odd_lst;",
        "grade-24": {
            "execution": 0
        },
        "57": "std::sort(lst.begin(), lst.end());\n    std::vector<std::string> sorted_lst;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i < lst.size() - 1 && lst[i] == lst[i + 1]) {\n            continue;\n        }\n        sorted_lst.push_back(lst[i]);\n    }\n    return sorted_lst;",
        "grade-57": {
            "execution": 0
        },
        "61": "std::vector<std::string> newsortedlist;\n  std::vector<std::string>::iterator it;\n  std::sort(lst.begin(), lst.end());\n  for (it = lst.begin(); it != lst.end(); it++) {\n    if (newsortedlist.empty()) {\n      newsortedlist.push_back(*it);\n    } else {\n      if (newsortedlist.back() == *it) {\n        continue;\n      } else {\n        newsortedlist.push_back(*it);\n      }\n    }\n  }\n  return newsortedlist;",
        "grade-61": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long, long> even_odd_count(long num) {\n",
        "snippet": [
            "    string w=to_string(abs(num));\n    int n1=0,n2=0;\n    for (int i=0;i<w.length();i++)\n    if (w[i]%2==1) n1+=1;\n    else n2+=1;\n    return {n2,n1};\n}\n"
        ],
        "simplified": "Given an integer. return a tuple that has the number of even and odd digits respectively.",
        "task_id": "155",
        "163": "std::tuple<long, long> even_odd_count_tuple;\n  std::get<0>(even_odd_count_tuple) = 0;\n  std::get<1>(even_odd_count_tuple) = 0;\n  if (num == 0) {\n    return even_odd_count_tuple;\n  }\n  if (num < 0) {\n    num = num * -1;\n  }\n  while (num > 0) {\n    if (num % 2 == 0) {\n      std::get<0>(even_odd_count_tuple)++;\n    } else {\n      std::get<1>(even_odd_count_tuple)++;\n    }\n    num = num / 10;\n  }\n  return even_odd_count_tuple;",
        "grade-163": {
            "execution": 0
        },
        "28": "long odd = 0, even = 0;\n    while(num != 0) {\n        int rem = num % 10;\n        if(rem % 2 == 0)\n            even++;\n        else\n            odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);",
        "grade-28": {
            "execution": 0
        },
        "6": "long odd = 0, even = 0;\n    while(num) {\n        if(abs(num % 10) % 2 == 0) even++;\n        else odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);",
        "grade-6": {
            "execution": 0
        },
        "189": "long even=0,odd=0;\n  while(num)\n  {\n    int last_digit=num%10;\n    if(last_digit%2==0)\n      even++;\n    else\n      odd++;\n    num/=10;\n  }\n  return std::make_tuple(even,odd);",
        "grade-189": {
            "execution": 0
        },
        "70": "long even = 0;\n  long odd = 0;\n  int sign = num < 0 ? -1 : 1;\n  num = std::abs(num);\n  while (num > 0) {\n    if (num % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);",
        "grade-70": {
            "execution": 0
        },
        "62": "if (num == 0) {\n\t\treturn std::make_tuple(1, 0);\n\t}\n\tlong odd = 0, even = 0;\n\twhile (num != 0) {\n\t\tint digit = abs(num % 10);\n\t\tif (digit % 2 == 0) {\n\t\t\teven++;\n\t\t}\n\t\telse {\n\t\t\todd++;\n\t\t}\n\t\tnum /= 10;\n\t}\n\treturn std::make_tuple(even, odd);",
        "grade-62": {
            "execution": 1
        },
        "57": "long even=0,odd=0;\n  while(num){\n    if(num%2==0)\n      even++;\n    else\n      odd++;\n    num/=10;\n  }\n  return std::make_tuple(even,odd);",
        "grade-57": {
            "execution": 0
        },
        "35": "long even = 0, odd = 0;\n  std::stringstream ss;\n  ss << num;\n  std::string s = ss.str();\n  for (int i = 0; i < s.length(); i++) {\n    if (s[i] - '0' % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return std::make_tuple(even, odd);",
        "grade-35": {
            "execution": 0
        },
        "188": "long odd_count = 0;\n    long even_count = 0;\n    while(num != 0) {\n        if(abs(num % 10) % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even_count, odd_count);",
        "grade-188": {
            "execution": 0
        },
        "26": "long even = 0, odd = 0;\n\tif (num == 0) {\n\t\treturn std::make_tuple(1, 0);\n\t}\n\tif (num < 0) {\n\t\tnum = -num;\n\t}\n\twhile (num > 0) {\n\t\tif (num % 2 == 0) {\n\t\t\teven++;\n\t\t}\n\t\telse {\n\t\t\todd++;\n\t\t}\n\t\tnum /= 10;\n\t}\n\treturn std::make_tuple(even, odd);",
        "grade-26": {
            "execution": 1
        },
        "173": "long even = 0;\n  long odd = 0;\n  while (num != 0) {\n    int rem = num % 10;\n    if (rem % 2 == 0)\n      even++;\n    else\n      odd++;\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);",
        "grade-173": {
            "execution": 0
        },
        "139": "std::tuple<long, long> result(0, 0);\n  bool even = true;\n  while (num != 0) {\n    if (even) {\n      std::get<0>(result) += num % 2;\n    } else {\n      std::get<1>(result) += num % 2;\n    }\n    num /= 10;\n    even = !even;\n  }\n  return result;",
        "grade-139": {
            "execution": 0
        },
        "22": "long odd_count = 0;\n  long even_count = 0;\n  while (num != 0) {\n    long digit = num % 10;\n    num /= 10;\n    if (digit % 2 == 0)\n      even_count++;\n    else\n      odd_count++;\n  }\n  return std::make_tuple(even_count, odd_count);",
        "grade-22": {
            "execution": 0
        },
        "151": "long even = 0;\n  long odd = 0;\n  long n = std::abs(num);\n  while (n > 0) {\n    long last_digit = n % 10;\n    if (last_digit % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    n /= 10;\n  }\n  return std::make_tuple(even, odd);",
        "grade-151": {
            "execution": 0
        },
        "108": "int odd = 0, even = 0;\n    long num1 = abs(num);\n    while(num1 != 0){\n        int i = num1 % 10;\n        if(i%2 == 0) even++;\n        else odd++;\n        num1 = num1 / 10;\n    }\n    std::tuple<long, long> t = std::make_tuple(even, odd);\n    return t;",
        "grade-108": {
            "execution": 0
        },
        "8": "int count[2] = {0, 0};\n    int tmp = abs(num);\n    while(tmp != 0) {\n        count[tmp % 10 % 2]++;\n        tmp /= 10;\n    }\n    return std::make_tuple(count[0], count[1]);",
        "grade-8": {
            "execution": 0
        },
        "7": "// write code here\n  int oddCount = 0;\n  int evenCount = 0;\n  int  n;\n  n = abs(num);\n  while(n != 0)\n  {\n    if(n % 2 == 0)\n    {\n      evenCount++;\n    }\n    else\n    {\n      oddCount++;\n    }\n    n = n / 10;\n  }\n  return std::make_tuple(evenCount, oddCount);",
        "grade-7": {
            "execution": 0
        },
        "23": "long even = 0, odd = 0;\n    int n;\n    if(num>0){\n        n = num;\n    }\n    else{\n        n = -num;\n    }\n    while(n!=0){\n        if(n%2==0){\n            even++;\n        }\n        else{\n            odd++;\n        }\n        n/=10;\n    }\n    return std::make_tuple(even, odd);",
        "grade-23": {
            "execution": 0
        },
        "55": "// your code here\n  std::tuple<long, long> result;\n  if(num == 0)\n  {\n    std::get<0>(result) = 1;\n    std::get<1>(result) = 0;\n    return result;\n  }\n  if(num < 0)\n  {\n    num = -num;\n  }\n  std::get<0>(result) = 0;\n  std::get<1>(result) = 0;\n  while(num > 0)\n  {\n    if(num % 2 == 0)\n    {\n      std::get<0>(result)++;\n    }\n    else\n    {\n      std::get<1>(result)++;\n    }\n    num /= 10;\n  }\n  return result;",
        "grade-55": {
            "execution": 1
        },
        "59": "int even = 0;\n    int odd = 0;\n    if (num < 0) {\n        num = -num;\n    }\n    while (num > 0) {\n        int digit = num % 10;\n        if (digit % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes a list l and returns a list l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nstd::vector<long> sort_third(std::vector<long> l) {\n",
        "snippet": [
            "    vector<int> third={};\n    int i;\n    for (i=0;i*3<l.size();i++)\n        third.push_back(l[i*3]);\n    \n    sort(third.begin(),third.end());\n\n    vector<int> out={};\n    for (i=0;i<l.size();i++)\n    {\n        if (i%3==0) {out.push_back(third[i/3]);}\n        else out.push_back(l[i]);\n    }\n    return out;\n\n}\n"
        ],
        "simplified": "This function takes a list l and returns a list l' such that l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal to the values of the corresponding indicies of l, but sorted.",
        "task_id": "33",
        "173": "std::vector<long> lv;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            std::vector<long> lvv;\n            lvv.push_back(l[i]);\n            lvv.push_back(l[i + 1]);\n            lvv.push_back(l[i + 2]);\n            std::sort(lvv.begin(), lvv.end());\n            lv.push_back(lvv[0]);\n            lv.push_back(lvv[1]);\n            lv.push_back(lvv[2]);\n        } else {\n            lv.push_back(l[i]);\n        }\n    }\n    return lv;",
        "grade-173": {
            "execution": 0
        },
        "28": "std::vector<long>::iterator it;\n  int counter = 1;\n  for (it = l.begin(); it != l.end(); it++, counter++) {\n    if (counter % 3 == 0) {\n      std::sort(it, it + 3);\n    }\n  }\n  return l;",
        "grade-28": {
            "execution": 0
        },
        "6": "std::vector<long> nums;\n    // YOUR CODE HERE\n\n    if (l.size() < 3) {\n        return l;\n    }\n\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            nums.push_back(l[i]);\n        }\n    }\n\n    std::sort(nums.begin(), nums.end());\n\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            l[i] = nums[i/3];\n        }\n    }\n\n    return l;",
        "grade-6": {
            "execution": 1
        },
        "71": "std::vector<long> answer;\n  int count = 0;\n  for (auto i = l.begin(); i != l.end(); i++) {\n    if (count % 3 == 0) {\n      std::vector<long> temp = {};\n      for (int j = 0; j < 3; j++) {\n        temp.push_back(*i);\n        i++;\n      }\n      i--;\n      sort(temp.begin(), temp.end());\n      for (auto j = temp.begin(); j != temp.end(); j++) {\n        answer.push_back(*j);\n      }\n    } else {\n      answer.push_back(*i);\n    }\n    count++;\n  }\n  return answer;",
        "grade-71": {
            "execution": 0
        },
        "63": "for (int i = 0; i < l.size(); i++) {\n\t\t\t\tif (i % 3 == 0) {\n\t\t\t\t\t\tstd::sort(l.begin() + i, l.begin() + i + 3);\n\t\t\t\t}\n\t\t}\n\t\treturn l;",
        "grade-63": {
            "execution": 0
        },
        "58": "if (l.size() < 3) {\n    return l;\n  }\n  std::vector<long> other;\n  std::vector<long> s;\n  for (int i = 0; i < l.size(); i++) {\n    if (i % 3 == 0) {\n      s.push_back(l[i]);\n    } else {\n      other.push_back(l[i]);\n    }\n  }\n  std::sort(s.begin(), s.end());\n  for (int i = 0; i < other.size(); i++) {\n    s.push_back(other[i]);\n  }\n  return s;",
        "grade-58": {
            "execution": 0
        },
        "35": "std::vector<long> a;\n    for (int i = 2; i < l.size(); i += 3) {\n        long temp = l[i];\n        for (int j = i - 3; j >= 0; j -= 3) {\n            if (l[j] <= temp) {\n                break;\n            }\n            l[j + 3] = l[j];\n            l[j] = temp;\n        }\n    }\n    return l;",
        "grade-35": {
            "execution": 0
        },
        "199": "std::vector<long> l_new;\n\tstd::vector<long> l_sort;\n\tlong i = 0;\n\tint idx = 0;\n\twhile (i < l.size()) {\n\t\tif (i % 3 == 0) {\n\t\t\tl_sort.push_back(l[i]);\n\t\t\tl_new.push_back(0);\n\t\t}\n\t\telse {\n\t\t\tl_new.push_back(l[i]);\n\t\t}\n\t\ti++;\n\t}\n\tstd::sort(l_sort.begin(), l_sort.end());\n\ti = 0;\n\tfor (int i = 0; i < l_new.size(); i++) {\n\t\tif (i % 3 == 0) {\n\t\t\tl_new[i] = l_sort[idx];\n\t\t\tidx++;\n\t\t}\n\t}\n\treturn l_new;",
        "grade-199": {
            "execution": 1
        },
        "26": "std::vector<long> r;\n    std::vector<long> l1;\n    r = l;\n    int x;\n    for (int i = 0; i < l.size(); i++){\n        if (i % 3 == 0)\n            l1.push_back(l[i]);\n    }\n    std::sort(l1.begin(), l1.end());\n    int j = 0;\n    for (int i = 0; i < l.size(); i++){\n        if (i % 3 == 0){\n            r[i] = l1[j];\n            j++;\n        }\n    }\n    return r;",
        "grade-26": {
            "execution": 1
        },
        "183": "std::vector<long> l_new;\n    for (size_t i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            std::vector<long> temp;\n            temp.push_back(l[i]);\n            if (i + 1 < l.size()) {\n                temp.push_back(l[i + 1]);\n            }\n            if (i + 2 < l.size()) {\n                temp.push_back(l[i + 2]);\n            }\n            std::sort(temp.begin(), temp.end());\n            l_new.insert(l_new.end(), temp.begin(), temp.end());\n        } else {\n            l_new.push_back(l[i]);\n        }\n    }\n    return l_new;",
        "grade-183": {
            "execution": 0
        },
        "147": "std::vector<long> result;\n\tint size = l.size();\n\tfor (int i = 0; i < size; i++) {\n\t\tif (i % 3 == 0) {\n\t\t\tstd::vector<long> temp = l;\n\t\t\ttemp.erase(temp.begin() + i);\n\t\t\tstd::sort(temp.begin(), temp.end());\n\t\t\tresult.push_back(temp[0]);\n\t\t}\n\t\telse {\n\t\t\tresult.push_back(l[i]);\n\t\t}\n\t}\n\treturn result;",
        "grade-147": {
            "execution": 0
        },
        "22": "std::vector<long> temp;\n  std::vector<long> ret;\n  for (int i = 0; i < l.size(); i++) {\n    if (i % 3 == 0) {\n      temp.push_back(l[i]);\n    }\n  }\n  std::sort(temp.begin(), temp.end());\n  int j = 0;\n  for (int i = 0; i < l.size(); i++) {\n    if (i % 3 == 0) {\n      ret.push_back(temp[j]);\n      j++;\n    } else {\n      ret.push_back(l[i]);\n    }\n  }\n  return ret;",
        "grade-22": {
            "execution": 1
        },
        "159": "std::vector<long> l_prime;\n  if (l.size() <= 1) {\n    return l;\n  }\n  long i = 0;\n  while (i < l.size()) {\n    if (i % 3 == 0) {\n      std::vector<long> i_third = {l[i], l[i + 1], l[i + 2]};\n      std::sort(i_third.begin(), i_third.end());\n      l_prime.push_back(i_third[0]);\n      l_prime.push_back(i_third[1]);\n      l_prime.push_back(i_third[2]);\n      i += 3;\n    } else {\n      l_prime.push_back(l[i]);\n      i += 1;\n    }\n  }\n  return l_prime;",
        "grade-159": {
            "execution": 0
        },
        "114": "std::vector<long> res;\n    int n = l.size();\n    int a[n];\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        if (i % 3 == 0) {\n            a[count] = l[i];\n            count++;\n        }\n    }\n    std::sort(a, a + count);\n    int b[n];\n    count = 0;\n    for (int i = 0; i < n; i++) {\n        if (i % 3 == 0) {\n            b[i] = a[count];\n            count++;\n        } else {\n            b[i] = l[i];\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        res.push_back(b[i]);\n    }\n    return res;",
        "grade-114": {
            "execution": 1
        },
        "8": "std::vector<long> v;\n    std::vector<long> v3;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            v3.push_back(l[i]);\n        } else {\n            v.push_back(l[i]);\n        }\n    }\n    std::sort(v3.begin(), v3.end());\n    for (int i = 0; i < v3.size(); i++) {\n        v.insert(v.begin() + i * 3, v3[i]);\n    }\n    return v;",
        "grade-8": {
            "execution": 1
        },
        "7": "std::vector<long> result(l.size());\n\n\tint start = 0;\n\t// iterate over all of the members of the list\n\tfor (auto num : l) {\n\t\t// check if the current index is a multiple of three\n\t\tif (start % 3 == 0) {\n\t\t\tstd::vector<long> sublist(l.begin() + start, l.begin() + start + 3);\n\t\t\t// sort the sublist\n\t\t\tstd::sort(sublist.begin(), sublist.end());\n\t\t\t// copy the values into the result array\n\t\t\tresult[start] = sublist[0];\n\t\t\tresult[start + 1] = sublist[1];\n\t\t\tresult[start + 2] = sublist[2];\n\t\t} else {\n\t\t\t// if the index is not a multiple of three, then just copy the number\n\t\t\tresult[start] = num;\n\t\t}\n\t\tstart++;\n\t}\n\treturn result;",
        "grade-7": {
            "execution": 0
        },
        "23": "std::vector<long> out;\n\tfor (int i = 0; i < l.size(); i++) {\n\t\tif (i % 3 == 0) {\n\t\t\tstd::vector<long> tmp = out;\n\t\t\tstd::sort(tmp.begin(), tmp.end());\n\t\t\tout = tmp;\n\t\t}\n\t\telse {\n\t\t\tout.push_back(l[i]);\n\t\t}\n\t}\n\treturn out;",
        "grade-23": {
            "execution": 0
        },
        "56": "// your code here\n  std::vector<long> ret;\n  std::vector<long> temp;\n  int j = 0;\n  for(int i = 0; i < l.size(); i++) {\n    if(i % 3 == 0) {\n      temp.push_back(l[i]);\n      j++;\n    }\n    else {\n      ret.push_back(l[i]);\n    }\n  }\n  std::sort(temp.begin(), temp.end());\n  for(int i = 2; i < l.size(); i+=3) {\n    ret.insert(ret.begin() + i, temp[j-1]);\n    j--;\n  }\n  return ret;",
        "grade-56": {
            "execution": 0
        },
        "60": "std::vector<long> result(l.size());\n    int index = 0;\n    int sorted_index = 0;\n    std::vector<long> sorted;\n    for (auto i : l) {\n        if (index % 3 == 0) {\n            sorted.push_back(i);\n        } else {\n            result[index] = i;\n        }\n        index++;\n    }\n    std::sort(sorted.begin(), sorted.end());\n    index = 0;\n    for (auto i : l) {\n        if (index % 3 == 0) {\n            result[index] = sorted[sorted_index];\n            sorted_index++;\n        }\n        index++;\n    }\n    return result;",
        "grade-60": {
            "execution": 1
        },
        "135": "// 1. Get the index of the third element in the list\n  // 2. Create a new vector of the same size as l\n  // 3. Fill in the values of the new vector in the first two indicies\n  // 4. Sort the third set of elements and fill in the new vector\n  // 5. Return the new vector\n  std::vector<long> ret;\n  long third = l.size() / 3;\n  long part = third * 2;\n  std::sort(l.begin() + third, l.begin() + part);\n  for (long i = 0; i < l.size(); i++) {\n    if (i % 3 == 0) {\n      ret.push_back(l[i]);\n    }\n  }\n  for (long i = 0; i < third; i++) {\n    ret.push_back(l[i + third]);\n  }\n  for (long i = part; i < l.size(); i++) {\n    ret.push_back(l[i]);\n  }\n  return ret;",
        "grade-135": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that returns True if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and False otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n// check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n// check_if_last_char_is_a_letter(\"\") \u279e False\nbool check_if_last_char_is_a_letter(std::string txt) {\n",
        "snippet": [
            "    if (txt.length()==0) return false;\n    char chr=txt[txt.length()-1];\n    if (chr<65 or (chr>90 and chr<97) or chr>122) return false;\n    if (txt.length()==1) return true;\n    chr=txt[txt.length()-2];\n    if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;\n    return true;\n}\n"
        ],
        "simplified": "Create a function that returns True if the last character of a given string is an alphabetical character and is not a part of a word, and False otherwise. Note: \"word\" is a group of characters separated by space.",
        "task_id": "134",
        "164": "std::string no_spaces;\n\tfor (int i = 0; i < txt.length(); i++) {\n\t\tif (txt[i] != ' ') {\n\t\t\tno_spaces += txt[i];\n\t\t}\n\t}\n\tint no_spaces_len = no_spaces.length();\n\tif (no_spaces_len == 0) {\n\t\treturn false;\n\t}\n\tchar last_char = no_spaces[no_spaces_len - 1];\n\tif (isalpha(last_char)) {\n\t\treturn true;\n\t}\n\treturn false;",
        "grade-164": {
            "execution": 0
        },
        "28": "if(txt.empty())\n        return false;\n    int counter = 0;\n    int i = txt.length()-1;\n    while(txt[i]==' '){\n        i--;\n        counter++;\n    }\n    char last_character = txt[i];\n    if(isalpha(last_character)==false)\n        return false;\n    if(counter==0)\n        return false;\n    else\n        return true;",
        "grade-28": {
            "execution": 0
        },
        "6": "return true;",
        "grade-6": {
            "execution": 0
        },
        "190": "std::stringstream ss(txt);\n\t\tstd::string s;\n\t\twhile(ss>>s){\n\t\t\tif(s.back()<65)\n\t\t\treturn false;\n\t\t\telse\n\t\t\tif(s.back()>90)\n\t\t\treturn false;\n\t\t\telse\n\t\t\tif(s.back()>122)\n\t\t\treturn false;\n\t\t\telse\n\t\t\tif(s.back()<97)\n\t\t\treturn false;\n\t\t\telse\n\t\t\treturn true;\n\t\t}",
        "grade-190": {
            "execution": 0
        },
        "71": "for(int i=0;i<txt.length();i++){\n        if(isalpha(txt[i])){\n            return false;\n        }\n    }\n    return true;",
        "grade-71": {
            "execution": 0
        },
        "63": "std::reverse(txt.begin(), txt.end());\n\tif (std::isalpha(txt[0]) && !std::isalnum(txt[1])) {\n\t\treturn true;\n\t}\n\treturn false;",
        "grade-63": {
            "execution": 1
        },
        "58": "return std::regex_match(txt, std::regex(\"([a-zA-Z]$)\"));",
        "grade-58": {
            "execution": 0
        },
        "35": "if(txt.empty())\n\t\treturn false;\n\tif(isalpha(txt[txt.size()-1]) == false)\n\t\treturn false;\n\tif(txt[txt.size()-1] == ' ')\n\t\treturn false;\n\tfor(int i = 0; i < txt.size()-1; i++)\n\t{\n\t\tif(txt[i] == ' ' && isalpha(txt[i+1]))\n\t\t\treturn false;\n\t}\n\treturn true;",
        "grade-35": {
            "execution": 0
        },
        "189": "if(!txt.empty()){\n\t\tint n = txt.length();\n\t\tif(int(txt[n-1]) > 64 && int(txt[n-1]) < 91){\n\t\t\treturn true;\n\t\t}\n\t\telse if(int(txt[n-1]) > 96 && int(txt[n-1]) < 123){\n\t\t\treturn true;\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t}\n\telse{\n\t\treturn false;\n\t}",
        "grade-189": {
            "execution": 0
        },
        "26": "if(txt.length()==0){\n        return false;\n    }\n    else{\n    if(isalpha(txt[txt.length()-1]) && isspace(txt[txt.length()-2])){\n        return true;\n    }\n    else{\n        return false;\n    }\n    }",
        "grade-26": {
            "execution": 0
        },
        "174": "int l = txt.length();\n\tif (l == 0) return false;\n\tfor (int i = l - 1; i >= 0; i--) {\n\t\tif (txt[i] == ' ') {\n\t\t\treturn false;\n\t\t}\n\t\tif (txt[i] >= 'a' && txt[i] <= 'z') {\n\t\t\treturn true;\n\t\t}\n\t\tif (txt[i] >= 'A' && txt[i] <= 'Z') {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;",
        "grade-174": {
            "execution": 0
        },
        "140": "if(txt.size()==0){\n\t\treturn false;\n\t}\n\tchar lastChar = txt[txt.size()-1];\n\tif(lastChar == ' '){\n\t\treturn false;\n\t}\n\tif((lastChar >= 'a' && lastChar <= 'z') || (lastChar >= 'A' && lastChar <= 'Z')){\n\t\treturn true;\n\t}\n\treturn false;",
        "grade-140": {
            "execution": 0
        },
        "22": "// assert(check_if_last_char_is_a_letter(\"apple pie\") == false);\n\t// assert(check_if_last_char_is_a_letter(\"apple pi e\") == true);\n\t// assert(check_if_last_char_is_a_letter(\"apple pi e \") == false);\n\t// assert(check_if_last_char_is_a_letter(\"\") == false);\n\tchar last = txt[txt.length() - 1];\n\tif (isalpha(last) && !isspace(last)) return true;\n\treturn false;",
        "grade-22": {
            "execution": 0
        },
        "152": "if(txt.length()==0)\n        return false;\n    char c=txt[txt.length()-1];\n    if(isalpha(c))\n    {\n        if(txt.length()!=1)\n        {\n            c=txt[txt.length()-2];\n            if(isspace(c))\n                return true;\n            else\n                return false;\n        }\n        else\n            return true;\n    }\n    else\n        return false;",
        "grade-152": {
            "execution": 1
        },
        "109": "std::string s;\n\tstd::stringstream ss(txt);\n\tstd::string lastWord;\n\twhile (ss >> s)\n\t\tlastWord = s;\n\tif (isalpha(lastWord[lastWord.length() - 1]))\n\t\treturn true;\n\telse\n\t\treturn false;",
        "grade-109": {
            "execution": 0
        },
        "8": "int len = txt.length();\n  char last = txt[len-1];\n  if(last >= 'a' && last <= 'z') return true;\n  if(last >= 'A' && last <= 'Z') return true;\n  return false;",
        "grade-8": {
            "execution": 0
        },
        "7": "int len = txt.length();\n\tstd::cout << txt[len - 1] << \" \" << txt[len - 2] << std::endl;\n\tif (txt[len - 1] >= 'a' && txt[len - 1] <= 'z' || txt[len - 1] >= 'A' && txt[len - 1] <= 'Z') {\n\t\tif (txt[len - 2] == ' ') {\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n\telse {\n\t\treturn false;\n\t}",
        "grade-7": {
            "execution": 0
        },
        "23": "if(txt==\"\") return false;\n\tfor(int i=txt.length()-1;i>=0;i--){\n\t\tif(txt[i]!=' ') return isalpha(txt[i]);\n\t}",
        "grade-23": {
            "execution": 0
        },
        "56": "",
        "grade-56": {
            "execution": 0
        },
        "60": "bool last_char_is_alpha = isalpha(txt.back());\n\tbool last_char_is_space = isspace(txt.back());\n\tbool at_least_1_alpha = 0;\n\tfor (auto& t : txt) {\n\t\tif (isalpha(t)) {\n\t\t\tat_least_1_alpha = 1;\n\t\t}\n\t}\n\tif (last_char_is_alpha && !last_char_is_space && at_least_1_alpha) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}",
        "grade-60": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nlong how_many_times(std::string string, std::string substring) {\n",
        "snippet": [
            "    int out=0;\n    if (str.length()==0) return 0;\n    for (int i=0;i<=str.length()-substring.length();i++)\n    if (str.substr(i,substring.length())==substring)\n        out+=1;\n    return out;\n}\n"
        ],
        "simplified": "Find how many times a given substring can be found in the original string. Count overlaping cases.",
        "task_id": "18",
        "169": "int count = 0;\n    int sublen = substring.length();\n    int strlen = string.length();\n    if(sublen==0 || strlen==0) return 0;\n    for(int i=0;i<strlen;i++){\n        if(string[i]==substring[0]){\n            if(sublen==1) count++;\n            else{\n                for(int j=1;j<sublen;j++){\n                    if(string[i+j]==substring[j]){\n                        if(j==sublen-1) count++;\n                    }\n                    else{\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    return count;",
        "grade-169": {
            "execution": 1
        },
        "28": "int count = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) != std::string::npos) {\n        ++count;\n        pos += substring.length();\n    }\n    return count;",
        "grade-28": {
            "execution": 0
        },
        "6": "long i,j,flag=0,count=0;\n    //cout<<\"\\nThe main string is: \"<<string;\n    //cout<<\"\\nThe substring to be searched is: \"<<substring;\n    //cout<<\"\\nThe length of the string is: \"<<strlen(string);\n    //cout<<\"\\nThe length of the substring is: \"<<strlen(substring);\n    for(i=0;i<strlen(string);i++)\n    {\n        if(string[i]==substring[0])\n        {\n            flag=1;\n            for(j=1;j<strlen(substring);j++)\n            {\n                if(string[i+j]!=substring[j])\n                {\n                    flag=0;\n                    break;\n                }\n            }\n            if(flag==1)\n            {\n                count++;\n            }\n        }\n    }\n    return count;",
        "grade-6": {
            "execution": 0
        },
        "70": "long  result = 0;\n    int pos = 0;\n    while(pos!=-1)\n    {\n        pos = string.find(substring,pos);\n        if(pos!=-1)\n        {\n            result++;\n            pos++;\n        }\n    }\n    return result;",
        "grade-70": {
            "execution": 1
        },
        "62": "// Implement the function here\n  return std::count(string.begin(), string.end(), substring);",
        "grade-62": {
            "execution": 0
        },
        "57": "// your code here\n    long count=0;\n    for(int i=0;i<string.length();++i)\n    {\n        if(string[i]==substring[0])\n        {\n            if(string.substr(i,substring.length())==substring)\n            {\n                ++count;\n            }\n        }\n    }\n    return count;",
        "grade-57": {
            "execution": 1
        },
        "35": "int cnt = 0;\n    for(int i = 0; i < string.size(); ++i) {\n        if(string.substr(i, substring.size()) == substring)\n            cnt++;\n    }\n    return cnt;",
        "grade-35": {
            "execution": 1
        },
        "26": "// Your code goes here\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == substring[0]) {\n            int j = 0;\n            int m = i;\n            for(int k = 0; k < substring.length(); k++) {\n                if(string[m] == substring[j]) {\n                    m++;\n                    j++;\n                }\n                else {\n                    break;\n                }\n            }\n            if(j == substring.length()) {\n                count++;\n            }\n        }\n    }\n    return count;",
        "grade-26": {
            "execution": 1
        },
        "183": "long result = 0;\n    for (int i = 0; i < string.size(); i++) {\n        if (string.substr(i, substring.size()) == substring)\n            result++;\n    }\n    return result;",
        "grade-183": {
            "execution": 1
        },
        "144": "long count = 0;\n\tlong pos = 0;\n\tlong subLength = substring.length();\n\twhile (string.find(substring, pos) != std::string::npos) {\n\t\tpos = string.find(substring, pos) + subLength;\n\t\tcount++;\n\t}\n\treturn count;",
        "grade-144": {
            "execution": 0
        },
        "22": "long count = 0;\n  long size_substring = substring.size();\n  long size_string = string.size();\n  long j;\n  for (long i = 0; i < size_string; i++) {\n    if (string[i] == substring[0]) {\n      j = 0;\n      while (j < size_substring && i + j < size_string && string[i + j] == substring[j]) {\n        j++;\n      }\n      if (j == size_substring) {\n        count++;\n      }\n    }\n  }\n  return count;",
        "grade-22": {
            "execution": 1
        },
        "156": "long count=0;\n    long n=substring.length();\n    for(int i=0;i<string.length();i++){\n        if(string.substr(i,n)==substring){\n            count++;\n        }\n    }\n    return count;",
        "grade-156": {
            "execution": 1
        },
        "112": "long cnt = 0;\n    for (int i = 0; i < string.size(); ++i) {\n        if (string.substr(i, substring.size()) == substring)\n            ++cnt;\n    }\n    return cnt;",
        "grade-112": {
            "execution": 1
        },
        "8": "unsigned long long n = string.length();\n    unsigned long long m = substring.length();\n    unsigned long long i, j;\n    unsigned long long count = 0;\n    for (i = 0; i <= n - m; i++) {\n        for (j = 0; j < m; j++) {\n            if (string[i + j] != substring[j])\n                break;\n        }\n        if (j == m) {\n            count++;\n        }\n    }\n    return count;",
        "grade-8": {
            "execution": 0
        },
        "7": "// Take the length of the two strings.\n    int string_len = string.length();\n    int substring_len = substring.length();\n    // Keep track of how many substring are there in the original string.\n    int count = 0;\n    // Loop over the original string.\n    for (int i = 0; i < string_len; i++) {\n        // Take a substring of the original string.\n        std::string str = string.substr(i, substring_len);\n        // Compare the original string with a substring from the original string.\n        if (str == substring) {\n            // Add 1 to the count if the current substring from the original string is the same as the input substring.\n            count++;\n        }\n    }\n    // Return the count variable.\n    return count;",
        "grade-7": {
            "execution": 1
        },
        "23": "long res = 0;\n    for (int i = 0; i < string.size(); i++) {\n        for (int j = 0; j < substring.size(); j++) {\n            if (string[i] == substring[j]) {\n                int k = 1;\n                while (string[i + k] == substring[j + k] && i + k < string.size() && j + k < substring.size()) {\n                    k++;\n                }\n                if (k == substring.size()) {\n                    res++;\n                }\n            }\n        }\n    }\n    return res;",
        "grade-23": {
            "execution": 1
        },
        "55": "//if length of string is less than length of substring, just return 0\n    if(string.length() < substring.length())\n        return 0;\n    //else if length of string is equal to length of substring, just return 1 if they are same or 0 if they are not same\n    else if(string.length() == substring.length())\n        return (string == substring);\n    //else if length of string is greater than length of substring, then iterate the characters of string\n    else{\n        long count = 0;\n        std::string::iterator i, j;\n        for(i = string.begin(); i < string.end(); i++){\n            j = i;\n            std::string::iterator k = substring.begin();\n            while(*j == *k && k < substring.end()){\n                ++j;\n                ++k;\n            }\n            if(k == substring.end())\n                count++;\n        }\n        return count;\n    }",
        "grade-55": {
            "execution": 1
        },
        "59": "long times{0};\n    for(auto it{string.begin()}; it != string.end(); ++it) {\n        if(*it == substring[0]) {\n            auto temp{it};\n            for(auto jt{substring.begin()}; jt != substring.end(); ++jt) {\n                if(*temp == *jt) {\n                    temp++;\n                } else {\n                    break;\n                }\n            }\n            if(temp == it + substring.size()) {\n                times++;\n            }\n        }\n    }\n    return times;",
        "grade-59": {
            "execution": 1
        },
        "134": "size_t nPos = string.find(substring, 0); // fist occurrence\n    long count = 0;\n    while(nPos != std::string::npos)\n    {\n        count++;\n        nPos = string.find(substring, nPos+1);\n    }\n    return count;",
        "grade-134": {
            "execution": 1
        },
        "160": "return std::count(string.begin(), string.end(), substring[0])-1;",
        "grade-160": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return True else return False.\n// If the given array is empty then return True.\n// Note: The given list is guaranteed to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nbool move_one_ball(std::vector<long> arr) {\n",
        "snippet": [
            "    int num=0;\n    if (arr.size()==0) return true;\n    for (int i=1;i<arr.size();i++)\n        if (arr[i]<arr[i-1]) num+=1;\n    if (arr[arr.size()-1]>arr[0]) num+=1;\n    if (num<2) return true;\n    return false;\n}\n"
        ],
        "simplified": "We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The numbers in the array will be randomly ordered. Your task is to determine if it is possible to get an array sorted in non-decreasing order by performing the following operation on the given array: You are allowed to perform right shift operation any number of times. One right shift operation means shifting all elements of the array by one position in the right direction. The last element of the array will be moved to the starting position in the array i.e. 0th index. If it is possible to obtain the sorted array by performing the above operation then return True else return False. If the given array is empty then return True. Note: The given list is guaranteed to have unique elements. For",
        "task_id": "109",
        "165": "if(arr.size()<2) return true;\n    int right_shift_count=0;\n    for(auto it=arr.begin();it!=arr.end();it++){\n        if(*it<*(it+1)) return false;\n        if(*it>*(it+1)) right_shift_count++;\n    }\n    if(right_shift_count>1) return false;\n    return true;",
        "grade-165": {
            "execution": 0
        },
        "29": "// Write your code here\n\tif (arr.size() == 0)\n\t\treturn true;\n\tint n = arr.size();\n\tif (n == 1)\n\t\treturn true;\n\tfor (int i = 0; i < n; i++) {\n\t\tint n_shifts = 0;\n\t\twhile (arr[i] != i + 1) {\n\t\t\tint temp = arr[i];\n\t\t\tarr[i] = arr[temp - 1];\n\t\t\tarr[temp - 1] = temp;\n\t\t\tn_shifts++;\n\t\t}\n\t\tif (n_shifts > 2)\n\t\t\treturn false;\n\t}\n\treturn true;",
        "grade-29": {
            "execution": 0
        },
        "6": "// WRITE YOUR CODE HERE",
        "grade-6": {
            "execution": 0
        },
        "192": "if(arr.size()<=1) return true;\n    int index=-1;\n    for(int i=1;i<arr.size();i++){\n        if(arr[i]<arr[i-1]){\n            index=i;\n            break;\n        }\n    }\n    if(index==-1) return true;\n    for(int i=index;i<arr.size();i++){\n        if(arr[i]<arr[i-1]){\n            return false;\n        }\n    }\n    return true;",
        "grade-192": {
            "execution": 0
        },
        "71": "int N = arr.size();\n    std::set<long> myset;\n    for(int i=0; i<N; i++)\n    {\n        myset.insert(arr[i]);\n    }\n    if(myset.size() == N)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }",
        "grade-71": {
            "execution": 0
        },
        "63": "//your code here!",
        "grade-63": {
            "execution": 0
        },
        "58": "std::sort(arr.begin(), arr.end());\n  int count{0};\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] != i+1) {\n      count++;\n    }\n  }\n  if (count > 1) {\n    return false;\n  }\n  return true;",
        "grade-58": {
            "execution": 0
        },
        "36": "//Your code goes here\n    if(arr.size()==0) return true;\n    int min_=*std::min_element(arr.begin(),arr.end());\n    int pos=std::distance(arr.begin(),std::find(arr.begin(),arr.end(),min_));\n    if(pos==0) return true;\n    while(pos>0){\n        std::rotate(arr.begin(),arr.begin()+1,arr.end());\n        pos--;\n    }\n    for(int i=0;i<arr.size()-1;i++){\n        if(arr[i]>arr[i+1]) return false;\n    }\n    return true;",
        "grade-36": {
            "execution": 1
        },
        "191": "int left = 0;\n    int right = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] != i + 1) {\n            left = i;\n            break;\n        }\n    }\n    for (int i = arr.size() - 1; i >= 0; i--) {\n        if (arr[i] != i + 1) {\n            right = i;\n            break;\n        }\n    }\n    std::sort(arr.begin() + left, arr.begin() + right + 1);\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] != i + 1)\n            return false;\n    }\n    return true;",
        "grade-191": {
            "execution": 0
        },
        "27": "// Write your code here\n    // To print results to the standard output you can use cout\n    // Example: cout << \"Hello world!\";\n    //Do not use cout in the function, while debugging code is disabled.\n    return 0;",
        "grade-27": {
            "execution": 0
        },
        "175": "//Write your code here\n  long temp=0;\n  bool flag = true;\n  if(arr.size()==0){\n    return true;\n  }\n  while(flag){\n    flag = false;\n    for(int i=1;i<arr.size();i++){\n      if(arr[i]<arr[i-1]){\n        flag = true;\n        temp = arr[i];\n        arr[i] = arr[i-1];\n        arr[i-1] = temp;\n      }\n    }\n  }\n  if(flag){\n    return false;\n  }\n  return true;",
        "grade-175": {
            "execution": 0
        },
        "140": "int n = arr.size();\n\tif (n == 0) return true;\n\tstd::vector<long> temp(n);\n\tlong x = arr[0];\n\tfor (int i = 1; i < n; i++) {\n\t\tif (arr[i] <= x) return false;\n\t\ttemp[i] = x;\n\t\tx = arr[i];\n\t}\n\ttemp[0] = x;\n\tif (temp == arr) return true;\n\treturn false;",
        "grade-140": {
            "execution": 0
        },
        "23": "int n = arr.size();\n    if(n == 0) return true;\n    if(n == 1) return true;\n    if(n == 2) {\n        if(arr[0] > arr[1]) return true;\n        else return false;\n    }\n    int i = 0;\n    while(i < n-1) {\n        if(arr[i] <= arr[i+1]) i++;\n        else {\n            if(i == 0) {\n                for(int j = 1; j < n; j++)\n                    if(arr[j] < arr[0]) return false;\n                return true;\n            }\n            else {\n                for(int j = i+1; j < n; j++)\n                    if(arr[j] < arr[i]) return false;\n                return true;\n            }\n        }\n    }\n    return true;",
        "grade-23": {
            "execution": 0
        },
        "153": "std::vector<long> vec = arr;\n\tsort(vec.begin(), vec.end());\n\tint index = 0;\n\tfor (int i = 0; i < arr.size(); i++) {\n\t\tif (arr[i] == vec[index]) {\n\t\t\tindex++;\n\t\t}\n\t}\n\tif (index == arr.size()) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}",
        "grade-153": {
            "execution": 0
        },
        "109": "int n = arr.size();\n\tif (n <= 1)\n\t\treturn true;\n\tstd::sort(arr.begin(), arr.end());\n\tfor (int i = 0; i < n; i++) {\n\t\tif (arr[i] != i + 1)\n\t\t\treturn false;\n\t}\n\treturn true;",
        "grade-109": {
            "execution": 0
        },
        "8": "// Write your code here\n\tif (arr.size() == 0)\n\t\treturn true;\n\tint index = arr.size() - 1;\n\tfor (int i = arr.size() - 1; i >= 0; i--) {\n\t\tif (arr[i] < arr[index])\n\t\t\tindex = i;\n\t}\n\tif (index == 0)\n\t\treturn true;\n\treturn false;",
        "grade-8": {
            "execution": 0
        },
        "7": "int n = arr.size();\n    if(n==0) return true;\n    if(n==1) return true;\n    // Check if the elements are sorted and distinct or not.\n    for(int i=0;i<n-1;i++){\n        if(arr[i]>=arr[i+1]) return false;\n    }\n    // Now we will check if we can achieve sorted array or not.\n    int max = 0;\n    for(int i=0;i<n;i++){\n        if(arr[i]>max) max = arr[i];\n    }\n    if(arr[0]<max) return true;\n    else return false;",
        "grade-7": {
            "execution": 0
        },
        "24": "if (arr.size() == 0)\n\t\treturn true;\n\tif (arr.size() == 1)\n\t\treturn true;\n\tlong min = arr[0];\n\tlong max = arr[0];\n\tfor (long i = 1; i < arr.size(); i++) {\n\t\tif (arr[i] < min)\n\t\t\tmin = arr[i];\n\t\tif (arr[i] > max)\n\t\t\tmax = arr[i];\n\t}\n\tint count = 0;\n\tfor (long i = 0; i < arr.size(); i++) {\n\t\tif (arr[i] == min)\n\t\t\tcount++;\n\t}\n\tif (count == arr.size())\n\t\treturn true;\n\tlong index = 0;\n\tfor (long i = 0; i < arr.size(); i++) {\n\t\tif (arr[i] == max) {\n\t\t\tindex = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (index == 0)\n\t\treturn false;\n\tfor (long i = index; i < arr.size(); i++) {\n\t\tif (arr[i] < max)\n\t\t\treturn false;\n\t}\n\tfor (long i = 0; i < index; i++) {\n\t\tif (arr[i] > min)\n\t\t\treturn false;\n\t}\n\treturn true;",
        "grade-24": {
            "execution": 0
        },
        "56": "if(arr.size()==0) return true;\n    long min=arr[0];\n    for(long i=1;i<arr.size();i++){\n        if(arr[i]<min) return false;\n        if(arr[i]<arr[i-1]) min=arr[i];\n    }\n    return true;",
        "grade-56": {
            "execution": 0
        },
        "60": "std::vector<long> arr1=arr;\n    sort(arr1.begin(),arr1.end());\n    std::rotate(arr.begin(),arr.begin()+1,arr.end());\n    if(arr==arr1)\n        return true;\n    else\n        return false;",
        "grade-60": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return True if all keys are strings in lower \n// case or all keys are strings in upper case, else return False.\n// The function should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n// check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nbool check_dict_case(std::map<std::string, std::string> dict) {\n",
        "snippet": [
            "    map<string,string>::iterator it;\n    int islower=0,isupper=0;\n    if (dict.size()==0) return false;\n    for (it=dict.begin();it!=dict.end();it++)\n    {\n        string key=it->first;\n    \n        for (int i=0;i<key.length();i++)\n        {\n            if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;\n            if (key[i]>=65 and key[i]<=90) isupper=1;\n            if (key[i]>=97 and key[i]<=122) islower=1;\n            if (isupper+islower==2) return false;\n        }\n\n    }\n    return true;\n}\n"
        ],
        "simplified": "Given a dictionary, return True if all keys are strings in lower case or all keys are strings in upper case, else return False. The function should return False is the given dictionary is empty.",
        "task_id": "95",
        "163": "// Write your code here...\n    bool lower=true;\n    bool upper=true;\n    bool check=true;\n    bool empty=true;\n    if(dict.size()==0){\n        check=false;\n    }\n    for(auto x : dict){\n        std::string key=x.first;\n        if(key[0]>=65 && key[0]<=90){\n            lower=false;\n        }\n        if(key[0]>=97 && key[0]<=122){\n            upper=false;\n        }\n    }\n    if(lower==false && upper==false || (lower==false && upper==true) || (lower==true && upper==false)){\n        check=false;\n    }\n    return check;",
        "grade-163": {
            "execution": 0
        },
        "28": "bool isLower = true;\n    bool isUpper = true;\n    for (std::map<std::string, std::string>::iterator i = dict.begin(); i != dict.end(); i++) {\n        if (i->first.length() == 0) {\n            return false;\n        }\n        for (int j = 0; j < i->first.length(); j++) {\n            if (isupper(i->first[j])) {\n                isLower = false;\n            }\n            if (islower(i->first[j])) {\n                isUpper = false;\n            }\n        }\n    }\n    if (!isLower && !isUpper) {\n        return false;\n    }\n    return true;",
        "grade-28": {
            "execution": 0
        },
        "6": "if(dict.size()==0) return false;\n    std::map<std::string, std::string>::iterator itr;\n    int count_lower=0, count_upper=0;\n    for(itr=dict.begin(); itr!=dict.end(); ++itr){\n        if(isupper(itr->first[0])) count_upper++;\n        else count_lower++;\n    }\n    if(count_lower==0 || count_upper==0) return true;\n    return false;",
        "grade-6": {
            "execution": 0
        },
        "190": "int upper = 0;\n    int lower = 0;\n    if (dict.size() == 0)\n        return false;\n    else {\n        for (auto itr = dict.begin(); itr != dict.end(); itr++) {\n            std::string key = itr->first;\n            if (std::islower(key[0]))\n                lower++;\n            else if (std::isupper(key[0]))\n                upper++;\n            else\n                return false;\n        }\n        if (upper == 0 || lower == 0)\n            return true;\n        else\n            return false;\n    }",
        "grade-190": {
            "execution": 0
        },
        "70": "bool lowercase = false;\n  bool uppercase = false;\n  if (dict.size() == 0) {\n    return false;\n  }\n  std::map<std::string, std::string>::iterator it;\n  for (it = dict.begin(); it != dict.end(); it++) {\n    if (islower(it->first[0])) {\n      lowercase = true;\n    } else if (isupper(it->first[0])) {\n      uppercase = true;\n    } else {\n      return false;\n    }\n  }\n  if (lowercase && uppercase) {\n    return false;\n  }\n  return true;",
        "grade-70": {
            "execution": 0
        },
        "62": "if (dict.size() == 0) {\n\t\treturn false;\n\t}\n\tfor (auto i = dict.begin(); i != dict.end(); i++) {\n\t\tif (isdigit(i->first[0])) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tfor (auto i = dict.begin(); i != dict.end(); i++) {\n\t\tfor (int j = 0; j < i->first.size(); j++) {\n\t\t\tif (islower(i->first[j])) {\n\t\t\t\tfor (auto k = dict.begin(); k != dict.end(); k++) {\n\t\t\t\t\tfor (int l = 0; l < k->first.size(); l++) {\n\t\t\t\t\t\tif (isupper(k->first[l])) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (isupper(i->first[j])) {\n\t\t\t\tfor (auto k = dict.begin(); k != dict.end(); k++) {\n\t\t\t\t\tfor (int l = 0; l < k->first.size(); l++) {\n\t\t\t\t\t\tif (islower(k->first[l])) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn true;",
        "grade-62": {
            "execution": 1
        },
        "57": "// Create a upper case and lower case set.\n    std::set<std::string> uppercase;\n    std::set<std::string> lowercase;\n    std::set<std::string> keys = dict.keys();\n    // Populate uppercase and lowercase set.\n    for (std::string key : keys) {\n        // If the key is present in either of the sets, return false.\n        if (uppercase.find(key) != uppercase.end() || lowercase.find(key) != lowercase.end())\n            return false;\n        // If the key is neither in upper nor lower case set, add the key.\n        uppercase.insert(key);\n        lowercase.insert(key);\n    }\n    // If the dict is empty, return false.\n    if (keys.size() == 0)\n        return false;\n    return true;",
        "grade-57": {
            "execution": 0
        },
        "35": "std::map<std::string, std::string>::iterator itr;\n    bool result = true;\n    if (dict.size() == 0) {\n        return false;\n    } else {\n        itr = dict.begin();\n        std::string current_key = itr->first;\n        bool current_case = isupper(current_key[0]);\n        for (itr = dict.begin(); itr != dict.end(); itr++) {\n            if (isupper(itr->first[0]) != current_case) {\n                result = false;\n                break;\n            }\n        }\n    }\n    return result;",
        "grade-35": {
            "execution": 0
        },
        "189": "// your code goes here\n\tif(dict.size() == 0)\n\t\treturn false;\n\tbool flag = true;\n\tif(dict.begin()->first[0] >= 'a' && dict.begin()->first[0] <= 'z'){\n\t\tstd::map<std::string, std::string>::iterator it;\n\t\tfor(it = dict.begin(); it != dict.end(); it++){\n\t\t\tstd::string temp = it->first;\n\t\t\tfor(int i = 0; i < temp.length(); i++){\n\t\t\t\tif(temp[i] < 'a' || temp[i] > 'z'){\n\t\t\t\t\tflag = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse if(dict.begin()->first[0] >= 'A' && dict.begin()->first[0] <= 'Z'){\n\t\tstd::map<std::string, std::string>::iterator it;\n\t\tfor(it = dict.begin(); it != dict.end(); it++){\n\t\t\tstd::string temp = it->first;\n\t\t\tfor(int i = 0; i < temp.length(); i++){\n\t\t\t\tif(temp[i] < 'A' || temp[i] > 'Z'){\n\t\t\t\t\tflag = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse{\n\t\tflag = false;\n\t}\n\treturn flag;",
        "grade-189": {
            "execution": 1
        },
        "26": "if(dict.size() == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n    bool is_key_int = false;\n    for(auto i: dict) {\n        is_lower = is_lower || (std::isupper(i.first[0]) == 0);\n        is_upper = is_upper || (std::isupper(i.first[0]) == 1);\n        is_key_int = is_key_int || (std::isupper(i.first[0]) == 0 && \n                                    std::isdigit(i.first[0]) == 0);\n    }\n    return (is_lower && !is_upper && !is_key_int) || \n           (!is_lower && is_upper && !is_key_int);",
        "grade-26": {
            "execution": 0
        },
        "173": "if (dict.empty()) return false;\n  std::vector<bool> upper;\n  for (auto it = dict.begin(); it != dict.end(); ++it) {\n    upper.push_back(std::isupper(it->first[0]));\n  }\n  return std::adjacent_find(upper.begin(), upper.end(),\n      std::not_equal_to<bool>()) == upper.end();",
        "grade-173": {
            "execution": 0
        },
        "139": "if(dict.size() == 0) return false;\n    bool check_lower = false;\n    bool check_upper = false;\n    for(std::map<std::string, std::string>::iterator it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0])) {\n            check_upper = true;\n        } else {\n            check_lower = true;\n        }\n    }\n    return (check_lower == check_upper) ? false : true;",
        "grade-139": {
            "execution": 0
        },
        "22": "// Write your code here.\n  bool upper = false;\n  bool lower = false;\n  for(auto pair : dict){\n      if(std::isupper(pair.first[0])){\n          upper = true;\n      }else{\n          lower = true;\n      }\n  }\n  return lower && !upper || upper && !lower;",
        "grade-22": {
            "execution": 0
        },
        "151": "if (dict.size() == 0)\n\t\treturn false;\n\tbool is_all_lower = true;\n\tfor (std::map<std::string, std::string>::iterator i = dict.begin(); i != dict.end(); i++) {\n\t\tif (std::islower(i->first[0])) {\n\t\t\tcontinue;\n\t\t}\n\t\telse {\n\t\t\tis_all_lower = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (is_all_lower)\n\t\treturn true;\n\tfor (std::map<std::string, std::string>::iterator i = dict.begin(); i != dict.end(); i++) {\n\t\tif (std::isupper(i->first[0])) {\n\t\t\tcontinue;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;",
        "grade-151": {
            "execution": 0
        },
        "108": "// TODO: Implement the function here\n  int count_lower_keys = 0;\n  int count_upper_keys = 0;\n  for (auto elem : dict) {\n    if (islower(elem.first[0])) {\n      count_lower_keys++;\n    } else if (isupper(elem.first[0])) {\n      count_upper_keys++;\n    }\n  }\n  if (count_lower_keys == dict.size() || count_upper_keys == dict.size()) {\n    return true;\n  }\n  return false;",
        "grade-108": {
            "execution": 0
        },
        "8": "if (dict.size() == 0) {\n\t\treturn false;\n\t}\n\tstd::map<std::string, std::string>::iterator it;\n\tit = dict.begin();\n\tstd::string first_key = it->first;\n\tif (islower(first_key[0])) {\n\t\tfor (it = dict.begin(); it != dict.end(); it++) {\n\t\t\tif (!islower(it->first[0])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t} else if (isupper(first_key[0])) {\n\t\tfor (it = dict.begin(); it != dict.end(); it++) {\n\t\t\tif (!isupper(it->first[0])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t} else {\n\t\treturn false;\n\t}\n\treturn true;",
        "grade-8": {
            "execution": 0
        },
        "7": "int allLower=0, allUpper=0;\n  if(dict.size()==0)\n    return false;\n  for(auto x:dict){\n    allLower=0;\n    allUpper=0;\n    for(auto y:x.first){\n      if(islower(y))\n        allLower=1;\n      else\n        allUpper=1;\n    }\n    if(allLower==0 || allUpper==0)\n      return false;\n  }\n  return true;",
        "grade-7": {
            "execution": 0
        },
        "23": "if (dict.size()==0)\n\t\treturn false;\n\tbool is_all_upper = true;\n\tfor (auto item : dict) {\n\t\tif (isupper(item.first[0]))\n\t\t\tis_all_upper = true;\n\t\telse {\n\t\t\tis_all_upper = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (is_all_upper) {\n\t\tfor (auto item : dict) {\n\t\t\tif (!isupper(item.first[0]))\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\telse {\n\t\tfor (auto item : dict) {\n\t\t\tif (!islower(item.first[0]))\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}",
        "grade-23": {
            "execution": 0
        },
        "55": "int n = dict.size();\n    if(n == 0)\n        return false;\n    std::map<std::string, std::string>::iterator it;\n    for(it = dict.begin(); it != dict.end(); it++) {\n        if(!islower(it->first[0])) {\n            for(it = dict.begin(); it != dict.end(); it++) {\n                if(!isupper(it->first[0]))\n                    return false;\n            }\n            return true;\n        }\n    }\n    return true;",
        "grade-55": {
            "execution": 0
        },
        "59": "if(dict.size() == 0) return false;\n    bool s_lower = true;\n    bool s_upper = true;\n    for(auto it=dict.begin(); it!=dict.end(); it++) {\n        s_lower = s_lower && (std::string(it->first) == std::string(it->first).substr(0, 1) + std::string(it->first).substr(1, it->first.size()-1));\n        s_upper = s_upper && (std::string(it->first) == std::string(it->first).substr(0, 1) + std::string(it->first).substr(1, it->first.size()-1));\n    }\n    return s_lower || s_upper;",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes from shortest to longest of the input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string) {\n",
        "snippet": [
            "    vector<string> out;\n    string current=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        current=current+str[i];\n        out.push_back(current);\n    }\n    return out;\n}\n"
        ],
        "simplified": "Return list of all prefixes from shortest to longest of the input string",
        "task_id": "14",
        "126": "std::vector<std::string> prefixes;\n    for (size_t x = 1; x <= string.size(); x++) {\n        prefixes.push_back(string.substr(0, x));\n    }\n    return prefixes;",
        "grade-126": {
            "execution": 1
        },
        "14": "std::vector<std::string> result;\n  for (int length = 1; length <= string.length(); length++) {\n    result.push_back(string.substr(0, length));\n  }\n  return result;",
        "grade-14": {
            "execution": 1
        },
        "3": "std::vector<std::string> results;\n    for (int i = 1; i <= string.size(); i++) {\n        results.push_back(string.substr(0, i));\n    }\n    return results;",
        "grade-3": {
            "execution": 1
        },
        "156": "std::vector<std::string> res;\n    for (size_t i = 1; i <= string.size(); i++) {\n        res.push_back(string.substr(0, i));\n    }\n    return res;",
        "grade-156": {
            "execution": 1
        },
        "47": "std::vector<std::string> prefixes;\n\tfor (size_t length = 1; length <= string.length(); length++) {\n\t\tprefixes.push_back(string.substr(0, length));\n\t}\n\treturn prefixes;",
        "grade-47": {
            "execution": 1
        },
        "40": "std::vector<std::string>prefixes;\n  for (int i = 0; i < string.size(); i++) {\n    prefixes.push_back(string.substr(0, i + 1));\n  }\n  return prefixes;",
        "grade-40": {
            "execution": 1
        },
        "35": "std::vector<std::string> all_prefixes;\n  for (int i = 0; i < string.size(); i++) {\n    all_prefixes.push_back(string.substr(0, i + 1));\n  }\n  return all_prefixes;",
        "grade-35": {
            "execution": 1
        },
        "18": "std::vector<std::string> result;\n    int n = string.length();\n    std::string current_substring = \"\";\n    for (int i = 0; i < n; i++) {\n        current_substring += string[i];\n        result.push_back(current_substring);\n    }\n    return result;",
        "grade-18": {
            "execution": 1
        },
        "13": "std::vector<std::string> prefixes;\n    for (int length = 1; length <= string.length(); length++) {\n        prefixes.push_back(string.substr(0, length));\n    }\n    return prefixes;",
        "grade-13": {
            "execution": 1
        },
        "131": "int N = string.size();\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < N; i++) {\n    prefixes.push_back(string.substr(0, i + 1));\n  }\n  return prefixes;",
        "grade-131": {
            "execution": 1
        },
        "188": "int length = string.length();\n  int j = 0;\n  std::vector<std::string> result;\n  for (int i = 1; i <= length; i++) {\n    // Add new prefix to the list\n    result.push_back(string.substr(j, i));\n  }\n  return result;",
        "grade-188": {
            "execution": 1
        },
        "106": "// START SOLUTION\n  std::vector<std::string> prefixes;\n  for (int i = 1; i <= string.size(); i++) {\n    prefixes.push_back(string.substr(0, i));\n  }\n  return prefixes;\n  // END SOLUTION",
        "grade-106": {
            "execution": 1
        },
        "11": "assert(!string.empty());\n    std::vector<std::string> prefixes;\n    std::string prefix;\n    for (char c : string) {\n        prefix += c;\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
        "grade-11": {
            "execution": 0
        },
        "115": "std::vector<std::string> prefixes = {};\n    for (unsigned long i = 0; i < string.length(); i++) {\n        std::string prefix = string.substr(0, i + 1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
        "grade-115": {
            "execution": 1
        },
        "80": "// Don't worry about these:\n    std::vector<std::string> prefixes;\n    size_t length = string.length();\n    for (size_t i = 1; i <= length; i++) {\n        prefixes.push_back(string.substr(0, i));\n    }\n    return prefixes;",
        "grade-80": {
            "execution": 1
        },
        "4": "std::vector<std::string> out;\n    for (int i = 1; i <= string.size(); i++) {\n        out.push_back(string.substr(0, i));\n    }\n    return out;",
        "grade-4": {
            "execution": 1
        },
        "34": "std::vector<std::string> result;\n\tfor (int i = 1; i <= string.size(); i++) {\n\t\tresult.push_back(string.substr(0, i));\n\t}\n\treturn result;",
        "grade-34": {
            "execution": 1
        },
        "37": "int n = string.size();\n  std::vector<std::string> res;\n  for (int i = 0; i < n; i++) {\n    res.push_back(string.substr(0, i + 1));\n  }\n  return res;",
        "grade-37": {
            "execution": 1
        },
        "98": "int n = string.size();\n    std::vector<std::string> result;\n    for (int i = 0; i < n; i++) {\n        result.push_back(string.substr(0, i + 1));\n    }\n    return result;",
        "grade-98": {
            "execution": 1
        },
        "120": "std::vector<std::string> result;\n    if(string.size() == 0) return result;\n    for(int i = 0; i < string.size(); i++) {\n        result.push_back(string.substr(0, i+1));\n    }\n    return result;",
        "grade-120": {
            "execution": 1
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers (of at least two elements), apply a linear transform to that list,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nstd::vector<float> rescale_to_unit(std::vector<float> numbers) {\n",
        "snippet": [
            "    float min=100000,max=-100000;\n    for (int i=0;i<numbers.size();i++)\n        {\n            if (numbers[i]<min) min=numbers[i];\n            if (numbers[i]>max) max=numbers[i];\n        }\n    for (int i=0;i<numbers.size();i++)\n        numbers[i]=(numbers[i]-min)/(max-min);\n    return numbers;\n}\n"
        ],
        "simplified": "Given list of numbers (of at least two elements), apply a linear transform to that list, such that the smallest number will become 0 and the largest will become 1",
        "task_id": "21",
        "164": "assert(numbers.size() >= 2);\n  // mean\n  float sum = std::accumulate(numbers.begin(), numbers.end(), 0.0);\n  float mean = sum / numbers.size();\n  // std\n  std::vector<float> diff(numbers.size());\n  std::transform(numbers.begin(), numbers.end(), diff.begin(),\n                 std::bind2nd(std::minus<float>(), mean));\n  float sq_sum = std::inner_product(diff.begin(), diff.end(), diff.begin(), 0.0);\n  float stdev = std::sqrt(sq_sum / numbers.size());\n  // rescale\n  for (int i = 0; i < numbers.size(); i++) {\n    numbers[i] = (numbers[i] - mean) / stdev;\n  }\n  return numbers;",
        "grade-164": {
            "execution": 0
        },
        "28": "if (numbers.size() < 2) {\n\t\tthrow std::domain_error(\"rescale_to_unit requires at least two numbers\");\n\t}\n\tfloat max_val = -std::numeric_limits<float>::infinity();\n\tfloat min_val = std::numeric_limits<float>::infinity();\n\tfor (float number : numbers) {\n\t\tif (number > max_val) {\n\t\t\tmax_val = number;\n\t\t}\n\t\tif (number < min_val) {\n\t\t\tmin_val = number;\n\t\t}\n\t}\n\tfloat diff = max_val - min_val;\n\tif (diff == 0) {\n\t\tthrow std::domain_error(\"all numbers are equal in rescale_to_unit\");\n\t}\n\tstd::vector<float> scaled;\n\tfor (float number : numbers) {\n\t\tscaled.push_back((number - min_val) / diff);\n\t}\n\treturn scaled;",
        "grade-28": {
            "execution": 1
        },
        "6": "float min = numbers[0];\n\tfloat max = numbers[0];\n\tfor (float number : numbers) {\n\t\tif (number < min) min = number;\n\t\tif (number > max) max = number;\n\t}\n\tfloat diff = max - min;\n\tstd::vector<float> rescaled;\n\tfor (float number : numbers) {\n\t\trescaled.push_back((number - min) / diff);\n\t}\n\treturn rescaled;",
        "grade-6": {
            "execution": 1
        },
        "190": "//assert(numbers.size() >= 2);\n    // Your code here\n    int i,j;\n    float min = *std::min_element(numbers.begin(),numbers.end());\n    float max = *std::max_element(numbers.begin(),numbers.end());\n    for(i=0;i<numbers.size();i++)\n    {\n        numbers[i] = (numbers[i]-min)/(max-min);\n    }\n    return numbers;",
        "grade-190": {
            "execution": 1
        },
        "70": "float smallest = numbers[0];\n  float largest = numbers[0];\n  for (int i = 1; i < numbers.size(); i++) {\n    if (numbers[i] < smallest) smallest = numbers[i];\n    if (numbers[i] > largest) largest = numbers[i];\n  }\n  std::vector<float> res;\n  for (int i = 0; i < numbers.size(); i++) {\n    res.push_back((numbers[i] - smallest) / (largest - smallest));\n  }\n  return res;",
        "grade-70": {
            "execution": 1
        },
        "62": "float max_number = numbers[0];\n  float min_number = numbers[0];\n  for (int i = 0; i < numbers.size(); i++) {\n    max_number = std::max(max_number, numbers[i]);\n    min_number = std::min(min_number, numbers[i]);\n  }\n  std::vector<float> result;\n  for (int i = 0; i < numbers.size(); i++) {\n    result.push_back((numbers[i] - min_number) / (max_number - min_number));\n  }\n  return result;",
        "grade-62": {
            "execution": 1
        },
        "57": "std::vector<float> result;\n   float max_number = *std::max_element(numbers.begin(), numbers.end());\n   float min_number = *std::min_element(numbers.begin(), numbers.end());\n   for (int i = 0; i < numbers.size(); i++) {\n      result.push_back((numbers[i] - min_number) / (max_number - min_number));\n   }\n   return result;",
        "grade-57": {
            "execution": 1
        },
        "35": "float max_value = *max_element(numbers.begin(), numbers.end());\n\tfloat min_value = *min_element(numbers.begin(), numbers.end());\n\tfor (float &n : numbers) {\n\t\tn = (n - min_value) / (max_value - min_value);\n\t}\n\treturn numbers;",
        "grade-35": {
            "execution": 1
        },
        "189": "std::vector<float> a;\n\tfloat max = *max_element(numbers.begin(), numbers.end());\n\tfloat min = *min_element(numbers.begin(), numbers.end());\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\ta.push_back((numbers[i] - min) / (max - min));\n\t}\n\treturn a;",
        "grade-189": {
            "execution": 1
        },
        "26": "float max = *std::max_element(numbers.begin(), numbers.end());\n  float min = *std::min_element(numbers.begin(), numbers.end());\n  std::vector<float> list;\n  for (int i = 0; i < numbers.size(); i++) {\n    float num = (numbers[i] - min) / (max - min);\n    list.push_back(num);\n  }\n  return list;",
        "grade-26": {
            "execution": 1
        },
        "174": "std::vector<float> result;\n  float smallest = numbers[0];\n  float largest = numbers[0];\n  for (float n : numbers) {\n    if (n < smallest) {\n      smallest = n;\n    }\n    if (n > largest) {\n      largest = n;\n    }\n  }\n  float range = largest - smallest;\n  for (float n : numbers) {\n    result.push_back((n - smallest) / range);\n  }\n  return result;",
        "grade-174": {
            "execution": 1
        },
        "140": "std::vector<float> res;\n    float min = *min_element(numbers.begin(), numbers.end());\n    float max = *max_element(numbers.begin(), numbers.end());\n    float range = max - min;\n    for (float i : numbers) {\n        res.push_back((i - min) / range);\n    }\n    return res;",
        "grade-140": {
            "execution": 1
        },
        "22": "float max = numbers[0];\n\tfloat min = numbers[0];\n\tfor (float num : numbers) {\n\t\tif (num > max) {\n\t\t\tmax = num;\n\t\t}\n\t\tif (num < min) {\n\t\t\tmin = num;\n\t\t}\n\t}\n\tfloat diff = max - min;\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\tnumbers[i] = (numbers[i] - min) / diff;\n\t}\n\treturn numbers;",
        "grade-22": {
            "execution": 1
        },
        "152": "std::vector<float>result(numbers.size());\n    float max = numbers[0];\n    float min = numbers[0];\n    for (auto &i : numbers) {\n        if (i > max) {\n            max = i;\n        }\n        if (i < min) {\n            min = i;\n        }\n    }\n    for (int i = 0; i < numbers.size(); i++) {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n    return result;",
        "grade-152": {
            "execution": 1
        },
        "109": "float max = 0;\n\tfloat min = numbers[0];\n\tstd::vector<float> result;\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\t\t}\n\t}\n\tif (max == min) {\n\t\tresult.push_back(1);\n\t\treturn result;\n\t}\n\tfloat newmax = 1;\n\tfloat newmin = 0;\n\tfloat a = (newmax - newmin) / (max - min);\n\tfloat b = newmin - (a * min);\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\tresult.push_back(a * numbers[i] + b);\n\t}\n\treturn result;",
        "grade-109": {
            "execution": 1
        },
        "8": "assert(numbers.size() > 1);\n    float min = numbers[0];\n    float max = numbers[0];\n    for (float number : numbers) {\n        if (number < min) min = number;\n        if (number > max) max = number;\n    }\n    std::vector<float> result(numbers.size());\n    for (int i = 0; i < numbers.size(); i++) {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n    return result;",
        "grade-8": {
            "execution": 1
        },
        "7": "std::vector<float> ret;\n    float max = *std::max_element(numbers.begin(), numbers.end());\n    float min = *std::min_element(numbers.begin(), numbers.end());\n    for (int i = 0; i < numbers.size(); i++) {\n        ret.push_back((numbers[i] - min) / (max - min));\n    }\n    return ret;",
        "grade-7": {
            "execution": 1
        },
        "23": "// Save the min and max of the input, so that we know what the delta is\n    float min = *std::min_element(numbers.begin(), numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n    float delta = max - min;\n    // Now scale all numbers to a fraction of the range\n    for (float &n : numbers) {\n        n = (n - min) / delta;\n    }\n    return numbers;",
        "grade-23": {
            "execution": 1
        },
        "55": "assert(numbers.size() > 1);\n    std::vector<float> ans;\n    auto it = std::minmax_element(numbers.begin(), numbers.end());\n    float min = *it.first;\n    float max = *it.second;\n    float d = max - min;\n    for (float x : numbers) {\n        ans.push_back((x - min) / d);\n    }\n    return ans;",
        "grade-55": {
            "execution": 1
        },
        "59": "assert(numbers.size() > 1);\n    float max = *std::max_element(numbers.begin(), numbers.end());\n    float min = *std::min_element(numbers.begin(), numbers.end());\n    float range = max - min;\n    std::vector<float> rescaled_numbers;\n    for (int i = 0; i < numbers.size(); i++) {\n        rescaled_numbers.push_back((numbers[i] - min) / range);\n    }\n    return rescaled_numbers;",
        "grade-59": {
            "execution": 1
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfloat mean_absolute_deviation(std::vector<float> numbers) {\n",
        "snippet": [
            "    float sum=0;\n    float avg,msum,mavg;\n    int i=0;\n    for (i=0;i<numbers.size();i++)\n        sum+=numbers[i];\n    avg=sum/numbers.size();\n    msum=0;\n    for (i=0;i<numbers.size();i++)\n        msum+=abs(numbers[i]-avg);\n    return msum/numbers.size();\n}\n"
        ],
        "simplified": "For a given list of input numbers, calculate Mean Absolute Deviation around the mean of this dataset. Mean Absolute Deviation is the average absolute difference between each element and a centerpoint (mean in this case): MAD = average | x - x_mean |",
        "task_id": "4",
        "163": "// Your code goes here.\n    float sum = 0.0;\n    float mean = 0.0;\n    for(int i = 0; i < numbers.size(); i++)\n        sum += numbers[i];\n    mean = sum / numbers.size();\n    for(int i = 0; i < numbers.size(); i++)\n        numbers[i] = abs(numbers[i] - mean);\n    sum = 0.0;\n    for(int i = 0; i < numbers.size(); i++)\n        sum += numbers[i];\n    return sum / numbers.size();",
        "grade-163": {
            "execution": 0
        },
        "28": "// Return 0 if there are no numbers.\n    if (numbers.size() == 0) return 0;\n    // Calculate the mean first.\n    float mean = 0;\n    for (size_t i = 0; i < numbers.size(); i++) {\n        mean += numbers[i];\n    }\n    mean /= numbers.size();\n    // Now calculate the absolute differences\n    float abs_diff = 0;\n    for (size_t i = 0; i < numbers.size(); i++) {\n        abs_diff += std::abs(numbers[i] - mean);\n    }\n    // Return the average absolute difference\n    return abs_diff / numbers.size();",
        "grade-28": {
            "execution": 0
        },
        "6": "// Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    // 1.0\n    // Reference:\n    // https://www.geeksforgeeks.org/program-to-find-the-average-of-a-list-of-numbers-in-python/\n    assert(numbers.size() > 0);\n    float sum = 0;\n    for (int i = 0; i < numbers.size(); i++) {\n        sum += numbers[i];\n    }\n    float mean = sum / numbers.size();\n    float sum_of_diffs = 0;\n    for (int i = 0; i < numbers.size(); i++) {\n        sum_of_diffs += fabs(numbers[i] - mean);\n    }\n    return sum_of_diffs / numbers.size();",
        "grade-6": {
            "execution": 0
        },
        "189": "// Find mean:\n    float sum = 0.0;\n    for (int i = 0; i < numbers.size(); i++) {\n        sum += numbers[i];\n    }\n    float mean = sum / numbers.size();\n    // Find absolute difference between each element and mean:\n    std::vector<float> abs_diff;\n    for (int i = 0; i < numbers.size(); i++) {\n        abs_diff.push_back(std::abs(numbers[i] - mean));\n    }\n    // Find average of absolute differences:\n    float sum_abs_diff = 0.0;\n    for (int i = 0; i < abs_diff.size(); i++) {\n        sum_abs_diff += abs_diff[i];\n    }\n    float mean_abs_diff = sum_abs_diff / abs_diff.size();\n    return mean_abs_diff;",
        "grade-189": {
            "execution": 0
        },
        "70": "// Compute the mean of the dataset as a float\n    float mean=0;\n    float x=0;\n    int n=numbers.size();\n    for(int i=0;i<n;i++)\n    {\n        x=x+numbers[i];\n    }\n    mean=x/n;\n    // Compute the absolute difference from the mean, then take the mean of that\n    std::vector<float> ab;\n    for(int i=0;i<n;i++)\n    {\n        ab.push_back(abs(numbers[i]-mean));\n    }\n    float y=0;\n    for(int i=0;i<n;i++)\n    {\n        y=y+ab[i];\n    }\n    float mad=y/n;\n    return mad;",
        "grade-70": {
            "execution": 0
        },
        "62": "float mean_of_elems = 0.0;\n  for (auto elem : numbers) {\n    mean_of_elems += elem;\n  }\n  mean_of_elems /= numbers.size();\n  float mad = 0.0;\n  for (auto elem : numbers) {\n    mad += abs(elem - mean_of_elems);\n  }\n  mad /= numbers.size();\n  return mad;",
        "grade-62": {
            "execution": 0
        },
        "57": "float sum = 0;\n    for (std::vector<float>::iterator it = numbers.begin(); it != numbers.end(); ++it) {\n        sum += *it;\n    }\n    float mean = sum / numbers.size();\n    float mad = 0;\n    for (std::vector<float>::iterator it = numbers.begin(); it != numbers.end(); ++it) {\n        mad += std::abs(*it - mean);\n    }\n    return mad / numbers.size();",
        "grade-57": {
            "execution": 0
        },
        "35": "assert(numbers.size() > 0);\n    float sum = 0;\n    float mean = 0;\n    for (int i = 0; i < numbers.size(); i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.size();\n    float sum2 = 0;\n    for (int i = 0; i < numbers.size(); i++) {\n        sum2 += abs(numbers[i] - mean);\n    }\n    float median = sum2 / numbers.size();\n    return median;",
        "grade-35": {
            "execution": 0
        },
        "188": "int n = numbers.size();\n  float mean = std::accumulate(numbers.begin(), numbers.end(), 0.0) / n;\n  // float sum_sq = 0.0;\n  float sum_abs = 0.0;\n  for (int i = 0; i < n; i++) {\n    // sum_sq += std::pow(numbers[i] - mean, 2);\n    sum_abs += std::abs(numbers[i] - mean);\n  }\n  return sum_abs / n;",
        "grade-188": {
            "execution": 0
        },
        "26": "// TODO: Find the mean value in the numbers vector.\n    float sum = 0;\n    int n = numbers.size();\n    for(int i = 0; i < n; i++) {\n        sum += numbers[i];\n    }\n    float mean = sum / n;\n    // TODO: For each element in the numbers vector, find the absolute\n    // difference between it and the mean.\n    float abs_diff = 0;\n    for(int i = 0; i < n; i++) {\n        abs_diff += abs(numbers[i] - mean);\n    }\n    // TODO: Return the mean of all absolute differences.\n    return abs_diff / n;",
        "grade-26": {
            "execution": 0
        },
        "173": "float sum = 0;\n    float mean = 0;\n    int i;\n    int n = numbers.size();\n    if (n == 0) {\n        return 0;\n    }\n    // Calculate mean of the numbers first\n    for (i = 0; i < n; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / n;\n    // Calculate mean absolute deviation\n    sum = 0;\n    for (i = 0; i < n; i++) {\n        sum += abs(numbers[i] - mean);\n    }\n    return sum / n;",
        "grade-173": {
            "execution": 0
        },
        "139": "std::vector<float> deviations;\n\tfloat mean = 0;\n\tfloat sum = 0;\n\tfor (unsigned int i = 0; i < numbers.size(); i++) {\n\t\tsum += numbers[i];\n\t}\n\tmean = sum / numbers.size();\n\tfor (unsigned int i = 0; i < numbers.size(); i++) {\n\t\tdeviations.push_back(abs(numbers[i] - mean));\n\t}\n\tsum = 0;\n\tfor (unsigned int i = 0; i < deviations.size(); i++) {\n\t\tsum += deviations[i];\n\t}\n\treturn sum / deviations.size();",
        "grade-139": {
            "execution": 0
        },
        "22": "float sum = 0.0;\n    float mean = 0.0;\n    float abs_diff_sum = 0.0;\n    int numbers_size = 0;\n    numbers_size = numbers.size();\n    assert(numbers_size > 0);\n    // For each element in the list\n    for (int i = 0; i < numbers_size; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers_size;\n    // For each element in the list\n    for (int i = 0; i < numbers_size; i++) {\n        abs_diff_sum += std::abs(numbers[i] - mean);\n    }\n    return abs_diff_sum / numbers_size;",
        "grade-22": {
            "execution": 0
        },
        "151": "float mean = 0;\n    for (auto number : numbers) {\n        mean += number;\n    }\n    mean /= numbers.size();\n    float m_abs_dev = 0;\n    for (auto number : numbers) {\n        m_abs_dev += std::abs(number - mean);\n    }\n    m_abs_dev /= numbers.size();\n    return m_abs_dev;",
        "grade-151": {
            "execution": 0
        },
        "108": "float sum_numbers = 0;\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\tsum_numbers += numbers[i];\n\t}\n\tfloat mean = sum_numbers / numbers.size();\n\tfloat sum_absolute_deviation = 0;\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\tsum_absolute_deviation += abs(numbers[i] - mean);\n\t}\n\treturn sum_absolute_deviation / numbers.size();",
        "grade-108": {
            "execution": 0
        },
        "8": "assert(numbers.size() > 0);\n\tfloat sum = 0;\n\tfloat sum_squares = 0;\n\tint count = 0;\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\tsum += numbers[i];\n\t\tsum_squares += numbers[i] * numbers[i];\n\t\tcount++;\n\t}\n\tfloat mean = sum / count;\n\tfloat variance = 0;\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\tvariance += pow(numbers[i] - mean, 2);\n\t}\n\tvariance = variance / (count - 1);\n\tfloat std_dev = sqrt(variance);\n\treturn std_dev;",
        "grade-8": {
            "execution": 0
        },
        "7": "float sum = 0.0;\n    float avg = 0.0;\n    float count = 0.0;\n    for (int i = 0; i < numbers.size(); i++) {\n        sum += numbers[i];\n        count += 1.0;\n    }\n    avg = sum / count;\n    float sum_abs_diff = 0.0;\n    for (int i = 0; i < numbers.size(); i++) {\n        sum_abs_diff += std::abs(numbers[i] - avg);\n    }\n    return sum_abs_diff / count;",
        "grade-7": {
            "execution": 0
        },
        "23": "float average = 0;\n\tint sum = 0;\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\tsum += numbers[i];\n\t}\n\taverage = sum / numbers.size();\n\tstd::vector<float> diffs;\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\tfloat diff = abs(numbers[i] - average);\n\t\tdiffs.push_back(diff);\n\t}\n\tint diffs_sum = 0;\n\tfor (int i = 0; i < diffs.size(); i++) {\n\t\tdiffs_sum += diffs[i];\n\t}\n\tfloat mad = diffs_sum / diffs.size();\n\treturn mad;",
        "grade-23": {
            "execution": 0
        },
        "55": "assert(numbers.size() > 0);\n    float sum = 0;\n    float mean = 0;\n    int n = numbers.size();\n    for (int i = 0; i < n; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / n;\n    float MAD = 0;\n    for (int i = 0; i < n; i++) {\n        MAD += abs(numbers[i] - mean);\n    }\n    MAD = MAD / n;\n    return MAD;",
        "grade-55": {
            "execution": 0
        },
        "59": "// Calculate mean\n\tdouble total = 0;\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\ttotal += numbers[i];\n\t}\n\tdouble mean = total / numbers.size();\n\tstd::cout << \"Mean = \" << mean << std::endl;\n\t// Calculate MAD\n\tdouble mad = 0;\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\tmad += abs(numbers[i] - mean);\n\t}\n\tmad /= numbers.size();\n\treturn mad;",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nlong special_factorial(long n) {\n",
        "snippet": [
            "    long long fact=1,bfact=1;\n    for (int i=1;i<=n;i++)\n    {\n        fact=fact*i;\n        bfact=bfact*fact;\n    }\n    return bfact;\n}\n"
        ],
        "simplified": "The Brazilian factorial is defined as: brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1! where n > 0",
        "task_id": "139",
        "171": "long result=1;\n    for(int i=1;i<=n;i++){\n        result*=i;\n    }\n    return result;",
        "grade-171": {
            "execution": 0
        },
        "30": "// Write your code here\n    // To print results to the standard output you can use printf()\n    // Example: printf(\"%s\", \"Hello world!\");",
        "grade-30": {
            "execution": 0
        },
        "6": "if (n == 0) {\n        return 1;\n    } else {\n        return n * special_factorial(n - 1);\n    }",
        "grade-6": {
            "execution": 0
        },
        "73": "long long factorial = 1;\n  long long fact = 1;\n  for (long i = 1; i <= n; i++) {\n    factorial *= i;\n    fact *= factorial;\n  }\n  return fact;",
        "grade-73": {
            "execution": 1
        },
        "64": "long result = 1;\n  while (n > 0) {\n    long factorial = 1;\n    long temp = n;\n    while (temp > 0) {\n      factorial *= temp;\n      temp--;\n    }\n    result *= factorial;\n    n--;\n  }\n  return result;",
        "grade-64": {
            "execution": 1
        },
        "59": "// assert(n > 0);\n  // TODO: implement this function correctly\n  assert(n > 0);\n  if (n == 1) {\n    return 1;\n  }\n  int fac = 1;\n  for (int i = 1; i <= n; i++) {\n    fac *= i;\n  }\n  return fac * special_factorial(n - 1);",
        "grade-59": {
            "execution": 1
        },
        "37": "long a=1;\n  for(int i=1;i<=n;i++)\n  {\n    a=a*i;\n  }\n  return a;",
        "grade-37": {
            "execution": 0
        },
        "27": "long result = 1;\n    if (n == 0)\n        return 1;\n    for (int i = 1; i <= n; i++) {\n        result *= i;\n    }\n    return result;",
        "grade-27": {
            "execution": 0
        },
        "184": "long fac = 1;\n  for (int i = n; i > 0; i--)\n    fac *= i;\n  return fac;",
        "grade-184": {
            "execution": 0
        },
        "144": "int num = n;\n    int factorial = 1;\n    for (int i = 1; i <= num; ++i) {\n        factorial *= i;\n    }\n    return factorial;",
        "grade-144": {
            "execution": 0
        },
        "23": "// Your code goes here\n  long output=1;\n  if(n==0)\n  {\n    return 1;\n  }\n  for(int i=n;i>0;i--)\n  {\n    output*=i;\n  }\n  return output;",
        "grade-23": {
            "execution": 0
        },
        "157": "return (n > 1) ? n * special_factorial(n - 1) : 1;",
        "grade-157": {
            "execution": 0
        },
        "112": "assert(n > 0);\n  long ans = 1;\n  for (long i = 1; i <= n; i++) {\n    long fact = 1;\n    for (long j = 1; j <= i; j++) {\n      fact *= j;\n    }\n    ans *= fact;\n  }\n  return ans;",
        "grade-112": {
            "execution": 1
        },
        "8": "if (n == 1) return 1;\n  long fact = n;\n  for (int i = 1; i < n; i++) {\n    fact *= (n - i);\n  }\n  return fact;",
        "grade-8": {
            "execution": 0
        },
        "7": "assert(n > 0);\n  // Write your code here!\n  return 0;",
        "grade-7": {
            "execution": 0
        },
        "24": "long int fact[n+1];\n    fact[0]=1;\n    fact[1]=1;\n    for(int i=2;i<=n;i++)\n    {\n        fact[i]=fact[i-1]*i;\n    }\n    long ans=1;\n    for(int i=0;i<=n;i++)\n    {\n        ans=ans*fact[i];\n    }\n    return ans;",
        "grade-24": {
            "execution": 1
        },
        "57": "// Your code here\n    if(n==0){\n        return 1;\n    }\n    long fact = 1;\n    long mod = 10;\n    while(n>0){\n        fact *= n;\n        fact %= mod;\n        n--;\n    }\n    return fact;",
        "grade-57": {
            "execution": 0
        },
        "61": "long ans = 1;\n  while(n > 0) {\n    ans *= factorial(n);\n    n--;\n  }\n  return ans;",
        "grade-61": {
            "execution": 0
        },
        "134": "long result = 1;\n  for (long i = n; i > 0; i--) {\n    result *= i;\n  }\n  for (long i = n - 1; i > 0; i--) {\n    result *= i;\n  }\n  for (long i = n - 2; i > 0; i--) {\n    result *= i;\n  }\n  return result;",
        "grade-134": {
            "execution": 0
        },
        "160": "long i,f=1;\n    for(i=n;i>=1;i--)\n    {\n        f=f*i;\n    }\n    return f;",
        "grade-160": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns True if the date is valid otherwise False.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool valid_date(std::string date) {\n",
        "snippet": [
            "    int mm,dd,yy,i;\n    if (date.length()!=10) return false;\n    for (int i=0;i<10;i++)\n        if (i==2 or i==5)\n        {\n            if (date[i]!='-') return false;\n        }\n        else\n            if (date[i]<48 or date[i]>57) return false;\n\n    mm=atoi(date.substr(0,2).c_str());\n    dd=atoi(date.substr(3,2).c_str());\n    yy=atoi(date.substr(6,4).c_str());\n    if (mm<1 or mm>12) return false;\n    if (dd<1 or dd>31) return false;\n    if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;\n    if (dd==30 and mm==2) return false;\n    return true;\n\n}\n"
        ],
        "simplified": "You have to write a function which validates a given date string and returns True if the date is valid otherwise False. The date is valid if all of the following rules are satisfied: 1. The date string is not empty. 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2. 3. The months should not be less than 1 or higher than 12. 4. The date should be in the format: mm-dd-yyyy",
        "task_id": "124",
        "165": "// Your code here\n    if(date.length()==0)\n        return false;\n    std::string month = date.substr(0,2);\n    std::string day = date.substr(3,2);\n    std::string year = date.substr(6,4);\n    // checking for invalid months\n    if(std::stoi(month)>12||std::stoi(month)<1)\n        return false;\n    // checking for invalid days\n    if(std::stoi(day)>31||std::stoi(day)<1)\n        return false;\n    if(std::stoi(month)==4||std::stoi(month)==6||std::stoi(month)==9||std::stoi(month)==11)\n    {\n        if(std::stoi(day)>30)\n            return false;\n    }\n    if(std::stoi(month)==2)\n    {\n        if(std::stoi(day)>29)\n            return false;\n    }\n    if(date[2]!='-'||date[5]!='-')\n        return false;\n    return true;",
        "grade-165": {
            "execution": 1
        },
        "28": "//your code here\n  assert(!date.empty());\n  bool invalid = false;\n  for(int i = 0; i < date.size(); i++){\n    if(date[i] == '/') {\n      invalid = true;\n      break;\n    }\n  }\n  if(invalid) return false;\n  std::string mm, dd, yyyy;\n  mm = date.substr(0,2);\n  dd = date.substr(3,2);\n  yyyy = date.substr(6,4);\n  int month = stoi(mm);\n  int day = stoi(dd);\n  int year = stoi(yyyy);\n  int thirt[7] = {1,3,5,7,8,10,12};\n  std::set<int> thirty(thirt, thirt+7);\n  int leap = 28;\n  if(year % 4 == 0) leap = 29;\n  if(month > 12) return false;\n  if(thirty.find(month) != thirty.end()){\n    if(day > 31) return false;\n  }\n  else if(month == 2){\n    if(day > leap) return false;\n  }\n  else{\n    if(day > 30) return false;\n  }\n  return true;",
        "grade-28": {
            "execution": 0
        },
        "6": "bool res = true;\n\tint month = 0, day = 0, year = 0;\n\tint count = 0;\n\tfor (size_t i = 0; i < date.size(); i++) {\n\t\tif (date[i] == '-')\n\t\t\tcount++;\n\t}\n\tif (count != 2)\n\t\treturn false;\n\tsize_t pos = date.find('-');\n\tif (pos != 2)\n\t\treturn false;\n\tstd::stringstream ss;\n\tss << date.substr(0, 2);\n\tss >> month;\n\tss.clear();\n\tsize_t pos2 = date.find('-', pos + 1);\n\tss << date.substr(pos + 1, pos2 - pos - 1);\n\tss >> day;\n\tss.clear();\n\tss << date.substr(pos2 + 1, date.size() - pos2 - 1);\n\tss >> year;\n\tss.clear();\n\tif (month < 1 || month > 12)\n\t\treturn false;\n\tswitch (month) {\n\tcase 1:\n\tcase 3:\n\tcase 5:\n\tcase 7:\n\tcase 8:\n\tcase 10:\n\tcase 12:\n\t\tif (day < 1 || day > 31)\n\t\t\treturn false;\n\t\tbreak;\n\tcase 4:\n\tcase 6:\n\tcase 9:\n\tcase 11:\n\t\tif (day < 1 || day > 30)\n\t\t\treturn false;\n\t\tbreak;\n\tcase 2:\n\t\tif (day < 1 || day > 29)\n\t\t\treturn false;\n\t\tbreak;\n\t}\n\treturn res;",
        "grade-6": {
            "execution": 1
        },
        "191": "// your code here\n\t// std::vector<std::string>v;\n\tstd::stringstream ss(date);\n\tstd::string s;\n\tstd::vector<std::string> v;\n\twhile(std::getline(ss,s,'-'))\n\t\tv.push_back(s);\n\tif(v.size()!=3)\n\t\treturn false;\n\tif(v[0].length()!=2 || v[1].length()!=2 || v[2].length()!=4)\n\t\treturn false;\n\tint d,m,y;\n\tstd::stringstream ss1(v[0]);\n\tss1>>m;\n\tstd::stringstream ss2(v[1]);\n\tss2>>d;\n\tstd::stringstream ss3(v[2]);\n\tss3>>y;\n\t\n\tstd::vector<int> v1;\n\tv1.push_back(d);\n\tv1.push_back(m);\n\tv1.push_back(y);\n\t\n\tif(std::find(v1.begin(),v1.end(),0)!=v1.end())\n\t\treturn false;\n\t\n\tif(v1[1]<1 || v1[1]>12)\n\t\treturn false;\n\tif(v1[0]<1 || v1[0]>31)\n\t\treturn false;\n\tif(v1[1]==2)\n\t{\n\t\tif(v1[0]>29)\n\t\t\treturn false;\n\t}\n\tif(v1[1]==4 || v1[1]==6 || v1[1]==9 || v1[1]==11)\n\t{\n\t\tif(v1[0]>30)\n\t\t\treturn false;\n\t}\n\treturn true;",
        "grade-191": {
            "execution": 1
        },
        "70": "std::string month, day, year;\n  month = date.substr(0,2);\n  day = date.substr(3,2);\n  year = date.substr(6,4);\n  if (month.compare(\"01\") == 0 || month.compare(\"03\") == 0 || month.compare(\"05\") == 0 || month.compare(\"07\") == 0 || month.compare(\"08\") == 0 || month.compare(\"10\") == 0 || month.compare(\"12\") == 0) {\n    if (stoi(day) > 31 || stoi(day) < 1) {\n      return false;\n    }\n  }\n  else if (month.compare(\"04\") == 0 || month.compare(\"06\") == 0 || month.compare(\"09\") == 0 || month.compare(\"11\") == 0) {\n    if (stoi(day) > 30 || stoi(day) < 1) {\n      return false;\n    }\n  }\n  else if (month.compare(\"02\") == 0) {\n    if (stoi(day) > 29 || stoi(day) < 1) {\n      return false;\n    }\n  }\n  else {\n    return false;\n  }\n  if (stoi(month) > 12 || stoi(month) < 1) {\n    return false;\n  }\n  if (stoi(year) > 9999 || stoi(year) < 1) {\n    return false;\n  }\n  return true;",
        "grade-70": {
            "execution": 0
        },
        "62": "if(date.length() == 0) return false;\n    if(date.length() != 10) return false;\n    std::vector<std::string> date_chunks;\n    std::vector<int> date_chunks_int;\n    std::string curr_chunk = \"\";\n    for(int i = 0; i < date.length(); i++) {\n        if(date[i] == '-') {\n            date_chunks.push_back(curr_chunk);\n            curr_chunk = \"\";\n        } else {\n            curr_chunk += date[i];\n        }\n    }\n    date_chunks.push_back(curr_chunk);\n    if(date_chunks.size() != 3) return false;\n    for(int i = 0; i < date_chunks.size(); i++) {\n        if(date_chunks[i].length() == 0) return false;\n        for(int j = 0; j < date_chunks[i].length(); j++) {\n            if(date_chunks[i][j] < '0' || date_chunks[i][j] > '9') return false;\n        }\n        int curr_chunk_int = stoi(date_chunks[i]);\n        date_chunks_int.push_back(curr_chunk_int);\n    }\n    if(date_chunks_int[0] < 1 || date_chunks_int[0] > 12) return false;\n    if(date_chunks_int[0] == 1 || date_chunks_int[0] == 3 || date_chunks_int[0] == 5 || date_chunks_int[0] == 7 || date_chunks_int[0] == 8 || date_chunks_int[0] == 10 || date_chunks_int[0] == 12) {\n        if(date_chunks_int[1] < 1 || date_chunks_int[1] > 31) return false;\n    } else if(date_chunks_int[0] == 4 || date_chunks_int[0] == 6 ||",
        "grade-62": {
            "execution": 0
        },
        "57": "// your code here\n    string sep = \"-\";\n    int i = date.find(sep);\n    string month = date.substr(0, i);\n    int j = date.find(sep, i+1);\n    string day = date.substr(i+1, j-i-1);\n    string year = date.substr(j+1);\n    if(month.length() == 2 && day.length() == 2 && year.length() == 4){\n        if(stoi(month) > 0 && stoi(month) < 13){\n            if(stoi(month) == 1 || stoi(month) == 3 || stoi(month) == 5 || stoi(month) == 7 || stoi(month) == 8 || stoi(month) == 10 || stoi(month) == 12){\n                if(stoi(day) > 0 && stoi(day) < 32){\n                    return true;\n                }\n            }\n            else if(stoi(month) == 4 || stoi(month) == 6 || stoi(month) == 9 || stoi(month) == 11){\n                if(stoi(day) > 0 && stoi(day) < 31){\n                    return true;\n                }\n            }\n            else if(stoi(month) == 2){\n                if(stoi(day) > 0 && stoi(day) < 30){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;",
        "grade-57": {
            "execution": 0
        },
        "35": "// your code here\n    if(date.size()!=10)\n    return false;\n    for(int i=0;i<date.size();i++)\n    {\n        if(i==2||i==5)\n        {\n            if(date[i]!='-')\n            return false;\n        }\n        else\n        {\n            if(!isdigit(date[i]))\n            return false;\n        }\n    }\n    std::string months[12]={\"01\",\"03\",\"05\",\"07\",\"08\",\"10\",\"12\",\"04\",\"06\",\"09\",\"11\",\"02\"};\n    int days[12]={31,31,31,31,31,31,31,30,30,30,30,29};\n    int month=atoi(date.substr(0,2).c_str());\n    int day=atoi(date.substr(3,2).c_str());\n    int year=atoi(date.substr(6,4).c_str());\n    if(day>=1&&day<=31&&month>=1&&month<=12&&year>=1)\n    {\n        if(month!=2)\n        {\n            if(day<=days[month-1])\n            return true;\n            else\n            return false;\n        }\n        else\n        {\n            if(year%4==0)\n            {\n                if(day<=days[month-1])\n                return true;\n                else\n                return false;\n            }\n            else\n            {\n                if(day<=days[month-1]-1)\n                return true;\n                else\n                return false;\n            }\n        }\n    }\n    else\n    return false;",
        "grade-35": {
            "execution": 0
        },
        "190": "// Your code here\n    std::string word, word1, word2, word3;\n    int temp1, temp2, temp3;\n    std::stringstream s_stream(date);\n    s_stream >> word1 >> word2 >> word3;\n    temp1 = std::stoi(word1);\n    temp2 = std::stoi(word2);\n    temp3 = std::stoi(word3);\n    if (temp1 > 12 || temp1 < 1 || temp2 > 31 || temp2 < 1 || temp3 < 1) {\n      return false;\n    }\n    else if (temp1 == 2 && temp2 > 29) {\n      return false;\n    }\n    else if (temp1 == 2 && temp2 == 29 && temp3 % 4 != 0) {\n      return false;\n    }\n    else if (temp1 == 2 && temp2 == 29 && temp3 % 100 == 0 && temp3 % 400 != 0) {\n      return false;\n    }\n    else if (temp1 == 4 || temp1 == 6 || temp1 == 9 || temp1 == 11) {\n      if (temp2 > 30) {\n        return false;\n      }\n    }\n    return true;\n  }\n\nint main() {\nassert(valid_date(\"03-11-2000\") == true);\nassert(valid_date(\"15-01-2012\") == false);\nassert(valid_date(\"04-0-2040\") == false);\nassert(valid_date(\"06-04-2020\") == true);\nassert(valid_date(\"06/04/2020\") == false);\nassert(valid_date(\"02-29-2020\") == true);\nassert(valid_date(\"02-29-2021\") == false);\nassert(valid_date(\"02-29-2000\") == true);\nassert(valid_date(\"02-29-1910\") == false);\nassert(valid_date(\"04-31-2020\") == false);\nassert(valid_date(\"13-01-2020\") == false);\nassert(valid_date(\"00-01-2020\") == false);\nassert(valid_date(\"01-00-2020\") == false);\nassert(valid_date(\"02-",
        "grade-190": {
            "execution": 0
        },
        "26": "int m = 0, d = 0, y = 0;\n    sscanf(date.c_str(), \"%d-%d-%d\", &m, &d, &y);\n    if(date.length() != 10)\n        return false;\n    if(m > 12)\n        return false;\n    if(m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12)\n    {\n        if(d < 1 || d > 31)\n            return false;\n    }\n    else if(m == 4 || m == 6 || m == 9 || m == 11)\n    {\n        if(d < 1 || d > 30)\n            return false;\n    }\n    else if(m == 2)\n    {\n        if(d < 1 || d > 29)\n            return false;\n    }\n    return true;",
        "grade-26": {
            "execution": 1
        },
        "175": "std::stringstream stream(date);\n  int day, month, year;\n  char seperator;\n  stream >> month >> seperator >> day >> seperator >> year;\n  if(month < 1 || month > 12 || day < 1 || day > 31 || year < 1)\n    return false;\n  else if(month == 2 && day > 29)\n    return false;\n  else if((month == 4 || month == 6 || month == 9 || month == 11) && day > 30)\n    return false;\n  else\n    return true;",
        "grade-175": {
            "execution": 1
        },
        "140": "// your code here\n  int month,day,year;\n  std::stringstream ss(date);\n  char ch;\n  ss>>month>>ch>>day>>ch>>year;\n  std::vector<int>Days = {31,29,31,30,31,30,31,31,30,31,30,31};\n  if(month<=0||month>12)\n  return false;\n  if(day<=0||day>Days[month-1])\n  return false;\n  return true;",
        "grade-140": {
            "execution": 1
        },
        "22": "// write code here\n\tbool result = true;\n\tint day = 0, month = 0, year = 0;\n\tif (date.length() != 10)\n\t\treturn false;\n\tif (date[2] != '-' || date[5] != '-')\n\t\treturn false;\n\tfor (int i = 0; i < 10; i++) {\n\t\tif (i == 2 || i == 5) {\n\t\t\tcontinue;\n\t\t}\n\t\telse if (i < 2) {\n\t\t\tday *= 10;\n\t\t\tday += date[i] - '0';\n\t\t}\n\t\telse if (i < 5) {\n\t\t\tmonth *= 10;\n\t\t\tmonth += date[i] - '0';\n\t\t}\n\t\telse {\n\t\t\tyear *= 10;\n\t\t\tyear += date[i] - '0';\n\t\t}\n\t}\n\tif (month > 12 || month < 1)\n\t\treturn false;\n\tif (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n\t\tif (day > 31 || day < 1)\n\t\t\treturn false;\n\t}\n\telse if (month == 4 || month == 6 || month == 9 || month == 11) {\n\t\tif (day > 30 || day < 1)\n\t\t\treturn false;\n\t}\n\telse {\n\t\tif (day > 29 || day < 1)\n\t\t\treturn false;\n\t}\n\treturn result;",
        "grade-22": {
            "execution": 0
        },
        "152": "std::vector<std::string> v;\n    std::string s;\n    std::stringstream ss(date);\n    while(std::getline(ss, s, '-')){\n        v.push_back(s);\n    }\n    if(v.size() != 3) return false;\n    int day = std::stoi(v[1]);\n    int mon = std::stoi(v[0]);\n    int year = std::stoi(v[2]);\n    if(mon < 1 || mon > 12) return false;\n    if(day < 1 || day > 31) return false;\n    if(mon == 2){\n        if(day > 29) return false;\n    }\n    else if(mon == 4 || mon == 6 || mon == 9 || mon == 11){\n        if(day > 30) return false;\n    }\n    if(year < 0) return false;\n    return true;",
        "grade-152": {
            "execution": 1
        },
        "108": "// split the string by '-'\n  std::string temp[3];\n  int index = 0;\n  for (int i = 0; i < date.length(); i++) {\n    if (date[i] == '-') {\n      index++;\n    } else {\n      temp[index] += date[i];\n    }\n  }\n  // for (int i = 0; i < 3; i++) {\n  //   std::cout << temp[i] << std::endl;\n  // }\n  int month = std::stoi(temp[0]);\n  int day = std::stoi(temp[1]);\n  int year = std::stoi(temp[2]);\n  // std::cout << month << \" \" << day << \" \" << year << std::endl;\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > 31) {\n    return false;\n  }\n  if (day > 30 && (month == 4 || month == 6 || month == 9 || month == 11)) {\n    return false;\n  }\n  if (day > 29 && month == 2) {\n    return false;\n  }\n  return true;",
        "grade-108": {
            "execution": 0
        },
        "8": "int count=0;\n  bool day_valid=false;\n  bool month_valid=false;\n  bool year_valid=false;\n  for(int i=0;i<date.length();i++){\n    if(date[i]=='-'||date[i]=='/'){\n      count++;\n    }\n  }\n  if(count==2){\n    std::istringstream date_stream(date);\n    std::string month,day,year;\n    std::getline(date_stream,month,'-');\n    std::getline(date_stream,day,'-');\n    std::getline(date_stream,year,'-');\n    try{\n      int month_int=std::stoi(month);\n      int day_int=std::stoi(day);\n      int year_int=std::stoi(year);\n      int month_max[12]={31,29,31,30,31,30,31,31,30,31,30,31};\n      int month_max_leap[12]={31,28,31,30,31,30,31,31,30,31,30,31};\n      if(year_int%4==0){\n        if(month_int>=1&&month_int<=12){\n          if(day_int>=1&&day_int<=month_max_leap[month_int-1]){\n            day_valid=true;\n          }\n        }\n      }\n      else{\n        if(month_int>=1&&month_int<=12){\n          if(day_int>=1&&day_int<=month_max[month_int-1]){\n            day_valid=true;\n          }\n        }\n      }\n      if(day_valid==true){\n        if(month_int>=1&&month_int<=12){\n          month_valid=true;\n        }\n      }\n      if(month_valid==true){\n        if(year_int>=1000&&year_int<=9999){\n          year_valid=true;\n        }\n      }\n    }\n    catch(std::",
        "grade-8": {
            "execution": 0
        },
        "7": "int x;\n  std::stringstream ss;\n  std::string temp;\n  std::string month,day,year;\n  //Check if date is empty or not\n  if(date.empty())\n    return false;\n  int i;\n  for(i=0;i<date.length();i++)\n  {\n    if(date[i]=='-'||date[i]=='/')\n      break;\n    else\n      month+=date[i];\n  }\n  for(i=i+1;i<date.length();i++)\n  {\n    if(date[i]=='-'||date[i]=='/')\n      break;\n    else\n      day+=date[i];\n  }\n  for(i=i+1;i<date.length();i++)\n  {\n    if(date[i]=='-'||date[i]=='/')\n      return false;\n    else\n      year+=date[i];\n  }\n  if(month.empty()||day.empty()||year.empty())\n    return false;\n  ss<<month;\n  ss>>x;\n  //Check if month is between 1 to 12\n  if(x<1||x>12)\n    return false;\n  ss.clear();\n  ss<<day;\n  ss>>x;\n  ss.clear();\n  //Check if day is between 1 to 31 for months 1,3,5,7,8,10,12\n  if(month==\"1\"||month==\"3\"||month==\"5\"||month==\"7\"||month==\"8\"||month==\"10\"||month==\"12\")\n  {\n    if(x<1||x>31)\n      return false;\n  }\n  //Check if day is between 1 to 30 for months 4,6,9,11\n  else if(month==\"4\"||month==\"6\"||month==\"9\"||month==\"11\")\n  {\n    if(x<1||x>30)\n      return false;\n  }\n  //Check if day is between 1 to 29 for month 2\n  else if(month==\"2\")\n  {",
        "grade-7": {
            "execution": 0
        },
        "23": "std::stringstream ss(date);\n    char c;\n    int month;\n    int day;\n    int year;\n    ss >> month >> c >> day >> c >> year;\n    if(ss.fail() || month < 1 || month > 12 || day < 1) return false;\n    if(month == 2) {\n        if(year % 4 == 0) return day <= 29;\n        else return day <= 28;\n    }\n    else if(month == 4 || month == 6 || month == 9 || month == 11) return day <= 30;\n    else return day <= 31;",
        "grade-23": {
            "execution": 1
        },
        "55": "return false;",
        "grade-55": {
            "execution": 0
        },
        "59": "std::vector<std::string> date_vec;\n    std::istringstream ss(date);\n    std::string token;\n    while(std::getline(ss, token, '-')) {\n        date_vec.push_back(token);\n    }\n    if(date_vec.size() != 3) return false;\n    int month = std::stoi(date_vec[0]);\n    int day = std::stoi(date_vec[1]);\n    int year = std::stoi(date_vec[2]);\n    if(month < 1 || month > 12) return false;\n    if(day < 1 || day > 31) return false;\n    if(month == 2) {\n        if(day > 29) return false;\n    }\n    else if(month == 4 || month == 6 || month == 9 || month == 11) {\n        if(day > 30) return false;\n    }\n    if(year < 1) return false;\n    return true;",
        "grade-59": {
            "execution": 1
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n",
        "snippet": [
            "    vector<vector<int>> freq={};\n    int max=-1;\n    for (int i=0;i<lst.size();i++)\n    {\n        bool has=false;\n        for (int j=0;j<freq.size();j++)\n            if (lst[i]==freq[j][0]) \n            {\n            freq[j][1]+=1;\n            has=true;\n            if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];\n            }\n        if (not(has)) \n        {\n        freq.push_back({lst[i],1});\n        if (max==-1 and lst[i]==1) max=1;\n        }\n    }\n    return max;\n}\n"
        ],
        "simplified": "You are given a non-empty list of positive integers. Return the greatest integer that is greater than zero, and has a frequency greater than or equal to the value of the integer itself. The frequency of an integer is the number of times it appears in the list. If no such a value exist, return -1.",
        "task_id": "69",
        "164": "// Your code here\n    unordered_map<long, long> m;\n    for(long i = 0; i < lst.size(); i++) {\n        m[lst[i]]++;\n    }\n    long max = 0;\n    long key = -1;\n    for(auto i = m.begin(); i != m.end(); i++) {\n        if(i->first == i->second && i->first > max) {\n            max = i->first;\n            key = i->first;\n        }\n    }\n    return key;",
        "grade-164": {
            "execution": 0
        },
        "28": "std::map<long, long> mp;\n    for(long i = 0; i < lst.size(); i++)\n        mp[lst[i]]++;\n    for(auto i : mp)\n        if(i.first <= i.second)\n            return i.first;\n    return -1;",
        "grade-28": {
            "execution": 0
        },
        "6": "std::map<long,long>mymap;\n  long max = -1;\n  for(auto i = 0; i < lst.size(); i++){\n    if(mymap.find(lst[i]) != mymap.end()){\n      mymap[lst[i]]++;\n    }\n    else{\n      mymap[lst[i]] = 1;\n    }\n  }\n  for(auto i = 0; i < lst.size(); i++){\n    if(mymap[lst[i]] >= lst[i] && lst[i] > max){\n      max = lst[i];\n    }\n  }\n  return max;",
        "grade-6": {
            "execution": 1
        },
        "190": "std::map<long, int> cnt;\n    for (auto i : lst) cnt[i]++;\n    for (auto i : cnt) {\n        if (i.first <= i.second) return i.first;\n    }\n    return -1;",
        "grade-190": {
            "execution": 0
        },
        "70": "long max = -1;\n  std::map<long, int> freq_list;\n  for (auto i : lst) {\n    freq_list[i] += 1;\n  }\n  for (auto i : freq_list) {\n    if (i.first <= i.second && i.first > max) {\n      max = i.first;\n    }\n  }\n  return max;",
        "grade-70": {
            "execution": 1
        },
        "62": "// sort the list\n    std::sort(lst.begin(), lst.end());\n    // iterate through the list\n    int start = 0;\n    int end = 0;\n    long max = -1;\n    long current = -1;\n    long maxCount = 0;\n    long currentCount = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] == lst[i + 1]) {\n            current = lst[i];\n            currentCount++;\n        } else {\n            if (currentCount >= current) {\n                max = current;\n                maxCount = currentCount;\n            }\n            current = lst[i];\n            currentCount = 1;\n        }\n    }\n    return max;",
        "grade-62": {
            "execution": 0
        },
        "57": "std::unordered_map<long, long> freq;\n  for (long i: lst) {\n    freq[i]++;\n  }\n  for (long i: lst) {\n    if (freq[i] >= i) {\n      return i;\n    }\n  }\n  return -1;",
        "grade-57": {
            "execution": 0
        },
        "35": "std::map<long, long> myMap;\n  int n = lst.size();\n  for(int i = 0; i < n; i++)\n  {\n    myMap[lst[i]]++;\n  }\n  for(int i = 0; i < n; i++)\n  {\n    if(myMap[lst[i]] >= lst[i])\n    {\n      return lst[i];\n    }\n  }\n  return -1;",
        "grade-35": {
            "execution": 0
        },
        "189": "std::sort(lst.begin(), lst.end());\n    int count = 1;\n    for(int i = 0; i < lst.size() - 1; i++) {\n        count = 1;\n        for(int j = i + 1; j < lst.size(); j++) {\n            if(lst[i] == lst[j]) {\n                count++;\n            }\n        }\n        if(count >= lst[i]) {\n            return lst[i];\n        }\n    }\n    return -1;",
        "grade-189": {
            "execution": 0
        },
        "26": "// ...\n  std::map<long, long> counter;\n  for(long i=0; i<lst.size(); i++){\n    counter[lst[i]]++;\n  }\n  for(long i=lst.size(); i>0; i--){\n    if(counter[i] >= i){\n      return i;\n    }\n  }\n  return -1;",
        "grade-26": {
            "execution": 1
        },
        "174": "std::unordered_map<long, long> frequency;\n    for (long l : lst)\n        frequency[l]++;\n    long greatest = -1;\n    for (auto pair : frequency) {\n        if (pair.first <= pair.second)\n            greatest = std::max(greatest, pair.first);\n    }\n    return greatest;",
        "grade-174": {
            "execution": 1
        },
        "139": "std::map<long, long> dict;\n  std::map<long, long>::iterator m_it;\n  long max = -1;\n  for(long i = 0; i < lst.size(); i++) {\n    m_it = dict.find(lst[i]);\n    if(m_it == dict.end()) {\n      dict.insert(std::pair<long, long>(lst[i], 1));\n    } else {\n      m_it->second++;\n    }\n  }\n  for(m_it = dict.begin(); m_it != dict.end(); m_it++) {\n    if(m_it->first <= m_it->second && m_it->first > max) {\n      max = m_it->first;\n    }\n  }\n  return max;",
        "grade-139": {
            "execution": 1
        },
        "22": "int max = lst[0];\n  std::sort(lst.begin(), lst.end());\n  // loop through numbers\n  for (int i = 1; i < lst.size(); i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  // loop through list again to count numbers\n  for (int i = 0; i < lst.size(); i++) {\n    int count = 0;\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    for (int k = 0; k < lst.size(); k++) {\n      if (lst[i] == lst[k]) {\n        count++;\n      }\n    }\n    if (count >= lst[i]) {\n      return lst[i];\n    }\n  }\n  return -1;",
        "grade-22": {
            "execution": 0
        },
        "152": "int res = -1;\n  std::unordered_map<long, int> map;\n  for (long x : lst) {\n    map[x]++;\n  }\n  for (long x : lst) {\n    if (map[x] >= x && x > res) {\n      res = x;\n    }\n  }\n  return res;",
        "grade-152": {
            "execution": 1
        },
        "108": "// your code here...\n  std::map<long, long> m;\n  for(auto i: lst)\n  {\n    m[i]++;\n  }\n  auto v = *std::max_element(m.begin(), m.end(), [](auto &a, auto &b){return a.second<b.second;});\n  return (v.first<=v.second)?v.first:-1;",
        "grade-108": {
            "execution": 0
        },
        "8": "long x = -1;\n    long max = -1;\n    std::map<long, long> m;\n    for(int i = 0; i < lst.size(); i++) {\n        if(lst[i] > 0) {\n            m[lst[i]]++;\n        }\n    }\n    for(auto i : m) {\n        if(i.first <= i.second) {\n            if(i.first > max) {\n                max = i.first;\n            }\n        }\n    }\n    if(max == -1) {\n        return -1;\n    }\n    return max;",
        "grade-8": {
            "execution": 1
        },
        "7": "for(int i = lst.size() - 1; i >= 0; i--) {\n    std::cout << \"lst[\" << i << \"] = \" << lst[i] << std::endl;\n    long count = 0;\n    for(int j = 0; j < lst.size(); j++) {\n      if(lst[i] == lst[j]) {\n        count++;\n      }\n    }\n    if(count >= lst[i]) {\n      return lst[i];\n    }\n  }\n  return -1;",
        "grade-7": {
            "execution": 0
        },
        "23": "long cnt = 0;\n  long max = -1;\n  int idx = 0;\n  std::sort(lst.begin(), lst.end());\n  for(int i = 0; i < lst.size(); i++){\n    cnt = 0;\n    for(int j = 0; j < lst.size(); j++){\n      if(lst[i] == lst[j]){\n        cnt++;\n      }\n    }\n    if(cnt >= lst[i] && max < lst[i]){\n      max = lst[i];\n    }\n  }\n  return max;",
        "grade-23": {
            "execution": 1
        },
        "55": "std::map<long, long> m;\n    long max = -1;\n    for(long i=0; i<lst.size(); i++) {\n        m[lst[i]]++;\n        if(m[lst[i]]>=lst[i] && lst[i]>max)\n            max = lst[i];\n    }\n    return max;",
        "grade-55": {
            "execution": 1
        },
        "59": "std::map<long, long> m;\n    for(int i = 0; i < lst.size(); i++)\n        m[lst[i]]++;\n    for(auto it = m.rbegin(); it != m.rend(); it++)\n        if(it->first <= it->second)\n            return it->first;\n    return -1;",
        "grade-59": {
            "execution": 1
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nstd::tuple<float, float> find_closest_elements(std::vector<float> numbers) {\n",
        "snippet": [
            "    vector<float> out={};\n    for (int i=0;i<numbers.size();i++)\n    for (int j=i+1;j<numbers.size();j++)\n        if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))\n            out={numbers[i],numbers[j]};\n    if (out[0]>out[1])\n        out={out[1],out[0]};\n    return out;\n}\n"
        ],
        "simplified": "From a supplied list of numbers (of length at least two) select and return two that are the closest to each other and return them in order (smaller number, larger number).",
        "task_id": "20",
        "163": "assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    auto smallest = std::make_tuple(numbers[0], numbers[1]);\n    auto distance = std::abs(std::get<0>(smallest) - std::get<1>(smallest));\n    for (unsigned int i = 1; i < numbers.size() - 1; i++) {\n        if (distance > std::abs(numbers[i] - numbers[i + 1])) {\n            distance = std::abs(numbers[i] - numbers[i + 1]);\n            smallest = std::make_tuple(numbers[i], numbers[i + 1]);\n        }\n    }\n    return smallest;",
        "grade-163": {
            "execution": 0
        },
        "28": "// TODO: return the pair of closest elements from numbers\n    int length=numbers.size();\n    int min=INT_MAX;\n    float num1=0;\n    float num2=0;\n    for(int i=0;i<length;i++){\n        for(int j=i+1;j<length;j++){\n            if(min>(std::abs(numbers[i]-numbers[j]))){\n                min=std::abs(numbers[i]-numbers[j]);\n                num1=numbers[i];\n                num2=numbers[j];\n            }\n        }\n    }\n    if(num1>num2){\n        std::swap(num1,num2);\n    }\n    return std::make_tuple(num1,num2);",
        "grade-28": {
            "execution": 0
        },
        "6": "assert(numbers.size() >= 2);\n    std::vector<float>::iterator i,j;\n    float diff= abs(numbers[0]-numbers[1]);\n    for(i=numbers.begin();i!=numbers.end();i++){\n        for(j=i+1;j!=numbers.end();j++){\n            if (diff>abs(*i-*j)){\n                diff=abs(*i-*j);\n            }\n        }\n    }\n    std::tuple<float, float> tup (i,j);\n    return tup;",
        "grade-6": {
            "execution": 0
        },
        "189": "// TODO\n\treturn std::make_tuple(0.0, 0.0);",
        "grade-189": {
            "execution": 0
        },
        "70": "std::sort(numbers.begin(), numbers.end());\n    float min = std::numeric_limits<float>::max();\n    std::tuple<float, float> result(0, 0);\n    for (int i = 0; i < numbers.size() - 1; i++) {\n        float curr = numbers[i + 1] - numbers[i];\n        if (curr < min) {\n            min = curr;\n            result = std::make_tuple(numbers[i], numbers[i + 1]);\n        }\n    }\n    return result;",
        "grade-70": {
            "execution": 0
        },
        "62": "// Write your implementation of the function here.\n  float min = std::numeric_limits<float>::max();\n  float closest1, closest2;\n  std::sort(numbers.begin(), numbers.end());\n  for (auto i = 0; i < numbers.size() - 1; i++) {\n    if (min > abs(numbers[i] - numbers[i + 1])) {\n      min = abs(numbers[i] - numbers[i + 1]);\n      closest1 = numbers[i];\n      closest2 = numbers[i + 1];\n    }\n  }\n  std::tuple<float, float> result(closest1, closest2);\n  return result;",
        "grade-62": {
            "execution": 0
        },
        "57": "if (numbers.size()<2) {\n    return std::make_tuple(0.0, 0.0);\n  }\n  std::sort(numbers.begin(), numbers.end());\n  float diff = numbers[numbers.size()-1] - numbers[0];\n  float min = numbers[0];\n  float max = numbers[1];\n  for (size_t i = 0; i < numbers.size()-1; i++) {\n    if (numbers[i+1] - numbers[i] < diff) {\n      diff = numbers[i+1] - numbers[i];\n      min = numbers[i];\n      max = numbers[i+1];\n    }\n  }\n  return std::make_tuple(min, max);",
        "grade-57": {
            "execution": 0
        },
        "35": "assert(numbers.size() >= 2);\n    float first = 0;\n    float second = 0;\n    float diff = 0;\n    float last_diff = 0;\n    std::sort(numbers.begin(), numbers.end());\n    // printVector(numbers);\n    for (int i = 0; i < numbers.size() - 1; i++) {\n        diff = numbers[i + 1] - numbers[i];\n        if (i == 0) {\n            last_diff = diff;\n            first = numbers[i];\n            second = numbers[i + 1];\n        } else {\n            if (diff < last_diff) {\n                last_diff = diff;\n                first = numbers[i];\n                second = numbers[i + 1];\n            }\n        }\n    }\n    return std::make_tuple(first, second);",
        "grade-35": {
            "execution": 0
        },
        "188": "float d = std::numeric_limits<float>::max();\n    float t1, t2;\n    float mx = std::numeric_limits<float>::min();\n    float mn = std::numeric_limits<float>::max();\n    for (int i = 0; i < numbers.size(); i++) {\n        mx = std::max(mx, numbers[i]);\n        mn = std::min(mn, numbers[i]);\n    }\n    for (int i = 0; i < numbers.size(); i++) {\n        for (int j = i + 1; j < numbers.size(); j++) {\n            if (std::abs(numbers[i] - numbers[j]) < d) {\n                d = std::abs(numbers[i] - numbers[j]);\n                t1 = numbers[i];\n                t2 = numbers[j];\n            }\n        }\n    }\n    return std::make_tuple(t1, t2);",
        "grade-188": {
            "execution": 0
        },
        "26": "float min_difference = std::numeric_limits<float>::max();\n    std::pair<float, float> min_pair = std::make_pair(0.0, 0.0);\n    for (int i = 0; i < numbers.size(); i++) {\n        for (int j = i + 1; j < numbers.size(); j++) {\n            float difference = std::abs(numbers[i] - numbers[j]);\n            if (difference < min_difference) {\n                min_difference = difference;\n                min_pair = std::make_pair(numbers[i], numbers[j]);\n            }\n        }\n    }\n    if (min_pair.first > min_pair.second) {\n        return std::make_tuple(min_pair.second, min_pair.first);\n    }\n    return std::make_tuple(min_pair.first, min_pair.second);",
        "grade-26": {
            "execution": 0
        },
        "173": "// write your code here\n\tint len=numbers.size();\n\tif(len<2)\n\t{\n\t\tassert(0);\n\t}\n\tint i=0;\n\tfloat sum=std::numeric_limits<float>::max();\n\tstd::tuple<float, float> result;\n\tfor(i=0;i<len-1;i++)\n\t{\n\t\tif(abs(numbers[i]-numbers[i+1])<sum)\n\t\t{\n\t\t\tsum=abs(numbers[i]-numbers[i+1]);\n\t\t\tresult=std::make_tuple(numbers[i],numbers[i+1]);\n\t\t}\n\t}\n\treturn result;",
        "grade-173": {
            "execution": 0
        },
        "139": "// Ensure the numbers are sorted\n    std::sort(numbers.begin(), numbers.end());\n    float smallest = numbers[0];\n    float closest_to_smallest = numbers[1];\n    for (int i = 0; i < numbers.size() - 1; i++) {\n        // Attempt to find a smaller number that is closer to the current smallest\n        if (numbers[i + 1] - smallest < closest_to_smallest - smallest) {\n            closest_to_smallest = numbers[i + 1];\n        }\n    }\n    return std::make_tuple(smallest, closest_to_smallest);",
        "grade-139": {
            "execution": 0
        },
        "22": "float diff_min = numbers[1] - numbers[0];\n  float num1 = numbers[0];\n  float num2 = numbers[1];\n  for (int i = 0; i < numbers.size() - 1; i++) {\n    float diff = numbers[i + 1] - numbers[i];\n    if (diff < diff_min) {\n      diff_min = diff;\n      num1 = numbers[i];\n      num2 = numbers[i + 1];\n    }\n  }\n  return std::make_tuple(num1, num2);",
        "grade-22": {
            "execution": 0
        },
        "151": "assert(numbers.size() >= 2);\n    float min = std::numeric_limits<float>::max();\n    float res1 = 0;\n    float res2 = 0;\n    for (int i = 0; i < numbers.size() - 1; i++) {\n        if (std::abs(numbers[i + 1] - numbers[i]) < min) {\n            min = std::abs(numbers[i + 1] - numbers[i]);\n            res1 = numbers[i];\n            res2 = numbers[i + 1];\n        }\n    }\n    return std::make_tuple(res1, res2);",
        "grade-151": {
            "execution": 0
        },
        "108": "float min = std::numeric_limits<float>::max();\n    float result1, result2;\n    for (auto const& item1 : numbers) {\n        for (auto const& item2 : numbers) {\n            float diff = abs(item1 - item2);\n            if (diff < min && diff != 0) {\n                min = diff;\n                result1 = item1;\n                result2 = item2;\n            }\n        }\n    }\n    return std::make_tuple(result1, result2);",
        "grade-108": {
            "execution": 0
        },
        "8": "assert(numbers.size() >= 2);\n    float diff = std::numeric_limits<float>::max();\n    float x = 0.0;\n    float y = 0.0;\n    for (int i = 0; i < numbers.size(); i++) {\n        for (int j = i + 1; j < numbers.size(); j++) {\n            float d = abs(numbers[i] - numbers[j]);\n            if (d < diff) {\n                diff = d;\n                x = numbers[i];\n                y = numbers[j];\n            }\n        }\n    }\n    return std::make_tuple(x, y);",
        "grade-8": {
            "execution": 0
        },
        "7": "std::sort(numbers.begin(), numbers.end());\n    float closest_sum = numbers[1] - numbers[0];\n    std::tuple<float, float> smallest_pair(numbers[0], numbers[1]);\n    for (int i = 1; i < numbers.size() - 1; i++) {\n        float sum = numbers[i + 1] - numbers[i];\n        if (sum < closest_sum) {\n            closest_sum = sum;\n            smallest_pair = std::make_tuple(numbers[i], numbers[i + 1]);\n        }\n    }\n    return smallest_pair;",
        "grade-7": {
            "execution": 0
        },
        "23": "std::tuple<float, float> closest = std::make_tuple(numbers[0], numbers[1]);\n    float min_diff = std::abs(std::get<0>(closest) - std::get<1>(closest));\n    for (auto x : numbers) {\n        for (auto y : numbers) {\n            if (std::abs(x - y) < min_diff) {\n                min_diff = std::abs(x - y);\n                closest = std::make_tuple(x, y);\n            }\n        }\n    }\n    return closest;",
        "grade-23": {
            "execution": 0
        },
        "55": "float num;\n    float diff = 0;\n    float min = 99999;\n    std::tuple<float, float> closest_numbers;\n    for (int i = 0; i < numbers.size(); i++) {\n        for (int j = 0; j < numbers.size(); j++) {\n            if (j != i) {\n                diff = numbers[i] - numbers[j];\n                if (fabs(diff) < min) {\n                    min = fabs(diff);\n                    closest_numbers = std::make_tuple(numbers[i], numbers[j]);\n                }\n            }\n        }\n    }\n    return closest_numbers;",
        "grade-55": {
            "execution": 0
        },
        "59": "// Write your implementation here.  Good luck!\n    std::sort(numbers.begin(), numbers.end());\n    std::vector<float> d;\n    for (int i = 0; i < numbers.size() - 1; i++) {\n        d.push_back(numbers[i + 1] - numbers[i]);\n    }\n    std::sort(d.begin(), d.end());\n    std::tuple<float, float> closest_numbers(numbers[d.size()], numbers[d.size() + 1]);\n    return closest_numbers;",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nstd::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n",
        "snippet": [
            "    vector<int> out={};\n    for (int i=0;i<l1.size();i++)\n        if (find(out.begin(),out.end(),l1[i])==out.end())\n            if (find(l2.begin(),l2.end(),l1[i])!=l2.end())\n                out.push_back(l1[i]);\n    sort(out.begin(),out.end());\n    return out;\n}\n"
        ],
        "simplified": "Return sorted unique common elements for two lists.",
        "task_id": "58",
        "173": "std::sort(l1.begin(), l1.end());\n  std::sort(l2.begin(), l2.end());\n  std::vector<long> ans;\n  std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), std::back_inserter(ans));\n  return ans;",
        "grade-173": {
            "execution": 1
        },
        "28": "std::vector<long> result;\n    std::set<long> s(l1.begin(), l1.end());\n    s.insert(l2.begin(), l2.end());\n    std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(),\n            std::inserter(result, result.begin()));\n    return result;",
        "grade-28": {
            "execution": 0
        },
        "6": "// create a vector for the output\n    std::vector<long> output;\n    // loop through the first list\n    for (int i = 0; i < l1.size(); i++) {\n        // loop through the second list\n        for (int j = 0; j < l2.size(); j++) {\n            // if an element in the first list is in the second list\n            if (l1[i] == l2[j]) {\n                // push it to the output vector\n                output.push_back(l1[i]);\n            }\n        }\n    }\n    // remove the duplicates from the output vector\n    std::sort(output.begin(), output.end());\n    output.erase(std::unique(output.begin(), output.end()), output.end());\n    // return the output vector\n    return output;",
        "grade-6": {
            "execution": 1
        },
        "70": "std::vector<long> commonElements;\n    for(auto i: l1){\n        for(auto j: l2){\n            if(i == j){\n                commonElements.push_back(i);\n            }\n        }\n    }\n    std::sort(commonElements.begin(), commonElements.end());\n    commonElements.erase(std::unique(commonElements.begin(), commonElements.end()), commonElements.end());\n    return commonElements;",
        "grade-70": {
            "execution": 1
        },
        "62": "std::vector<long> res;\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n    set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), inserter(res, res.begin()));\n    return res;",
        "grade-62": {
            "execution": 1
        },
        "57": "std::vector<long> common = {};\n\t//sort both the lists\n\tstd::sort(l1.begin(), l1.end());\n\tstd::sort(l2.begin(), l2.end());\n\tint i = 0, j = 0;\n\twhile (i < l1.size() && j < l2.size()) {\n\t\tif (l1[i] == l2[j]) {\n\t\t\tcommon.push_back(l1[i]);\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse if (l1[i] < l2[j]) {\n\t\t\ti++;\n\t\t}\n\t\telse {\n\t\t\tj++;\n\t\t}\n\t}\n\treturn common;",
        "grade-57": {
            "execution": 1
        },
        "35": "std::vector<long> result;\n    int i = 0, j = 0;\n    int n = l1.size();\n    int m = l2.size();\n    while (i < n && j < m) {\n        if (l1[i] == l2[j]) {\n            result.push_back(l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return result;",
        "grade-35": {
            "execution": 0
        },
        "26": "std::vector<long> common_elements;\n\tint i = 0, j = 0;\n\tfor (int i = 0; i < l1.size(); i++) {\n\t\tfor (int j = 0; j < l2.size(); j++) {\n\t\t\tif (l1[i] == l2[j]) {\n\t\t\t\tcommon_elements.push_back(l1[i]);\n\t\t\t}\n\t\t}\n\t}\n\tstd::sort(common_elements.begin(), common_elements.end());\n\treturn common_elements;",
        "grade-26": {
            "execution": 0
        },
        "184": "std::vector<long> list1 = l1;\n    std::vector<long> list2 = l2;\n    std::vector<long> common_list;\n    std::sort(list1.begin(), list1.end());\n    std::sort(list2.begin(), list2.end());\n    std::set_intersection(list1.begin(), list1.end(), list2.begin(), list2.end(), std::back_inserter(common_list));\n    return common_list;",
        "grade-184": {
            "execution": 1
        },
        "147": "std::vector<long> l3;\n\tsort(l1.begin(), l1.end());\n\tsort(l2.begin(), l2.end());\n\tset_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), back_inserter(l3));\n\treturn l3;",
        "grade-147": {
            "execution": 1
        },
        "22": "// Write code here.\n\tstd::vector<long> common;\n\tif (l1.size() == 0 || l2.size() == 0) {\n\t\treturn common;\n\t}\n\tstd::unordered_map<long, long> m;\n\tfor (long i = 0; i < l1.size(); i++) {\n\t\tm[l1[i]]++;\n\t}\n\tfor (long i = 0; i < l2.size(); i++) {\n\t\tif (m.find(l2[i]) != m.end()) {\n\t\t\tcommon.push_back(l2[i]);\n\t\t}\n\t}\n\tsort(common.begin(), common.end());\n\treturn common;",
        "grade-22": {
            "execution": 0
        },
        "161": "// For given set of elements find intersection between them.\n    std::vector<long> comm_elements;\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n    std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(),\n                          std::back_inserter(comm_elements));\n    return comm_elements;",
        "grade-161": {
            "execution": 1
        },
        "113": "std::vector<long> v1, v2;\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n    std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), std::back_inserter(v1));\n    return v1;",
        "grade-113": {
            "execution": 1
        },
        "8": "std::vector<long> common;\n\t// TODO: Write - Your - Code\n\treturn common;",
        "grade-8": {
            "execution": 0
        },
        "7": "// TODO: Write your code here\n\tstd::vector<long> retval;\n\tstd::sort(l1.begin(), l1.end());\n\tstd::sort(l2.begin(), l2.end());\n\tlong num1 = l1.size();\n\tlong num2 = l2.size();\n\tlong i=0, j=0;\n\twhile(i<num1 && j<num2) {\n\t\tif(l1[i] == l2[j]) {\n\t\t\tretval.push_back(l1[i]);\n\t\t\ti++;\n\t\t\tj++;\n\t\t} else if(l1[i] < l2[j]) {\n\t\t\ti++;\n\t\t} else {\n\t\t\tj++;\n\t\t}\n\t}\n\treturn retval;",
        "grade-7": {
            "execution": 1
        },
        "23": "std::vector<long>res;\n    std::sort(l1.begin(),l1.end());\n    std::sort(l2.begin(),l2.end());\n    std::set_intersection(l1.begin(),l1.end(),l2.begin(),l2.end(),std::back_inserter(res));\n    std::vector<long>::iterator it;\n    it=std::unique(res.begin(),res.end());\n    res.resize(std::distance(res.begin(),it));\n    return res;",
        "grade-23": {
            "execution": 1
        },
        "55": "std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n    std::vector<long> a;\n    int i = 0, j = 0;\n    while (i < l1.size() && j < l2.size()) {\n        if (l1[i] == l2[j]) {\n            a.push_back(l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return a;",
        "grade-55": {
            "execution": 1
        },
        "59": "std::vector<long> res;\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n    for (long i = 0, j = 0; i < l1.size() && j < l2.size();) {\n        if (l1[i] == l2[j]) {\n            res.push_back(l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return res;",
        "grade-59": {
            "execution": 1
        },
        "135": "std::sort(l1.begin(), l1.end());\n  std::sort(l2.begin(), l2.end());\n  std::vector<long> result;\n  for (std::vector<long>::iterator i = l1.begin(), j = l2.begin(); i != l1.end() && j != l2.end(); ) {\n    if (*i == *j) {\n      result.push_back(*i);\n      i++;\n      j++;\n    } else if (*i < *j) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return result;",
        "grade-135": {
            "execution": 1
        },
        "164": "sort(l1.begin(), l1.end());\n\tsort(l2.begin(), l2.end());\n\tstd::vector<long> l3;\n\tstd::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(),\n\t\t\tstd::back_inserter(l3));\n\treturn l3;",
        "grade-164": {
            "execution": 1
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\nstd::optional<std::string> string_to_md5(std::string text) {\n",
        "snippet": [
            "    unsigned char md[16];\n    if (text.length()==0) return \"None\";\n    MD5_CTX c;\n    int i;\n   MD5_Init(&c);\n   MD5_Update(&c, (unsigned char*)text.c_str(), text.length());\n    MD5_Final(md, &c);\n    string out_str=\"\";\n    for (int i=0;i<16;i++)\n        {\n            char w;\n            if (md[i]<160) w=48+md[i]/16;\n            else w=87+md[i]/16;\n            out_str=out_str+w;\n            if (md[i]%16<10) w=48+md[i]%16;\n            else w=87+md[i]%16;\n            out_str=out_str+w;\n        }\n    return out_str;\n}\n"
        ],
        "simplified": "Given a string 'text', return its md5 hash equivalent string. If 'text' is an empty string, return None.",
        "task_id": "162",
        "166": "if (text.empty())\n        return std::nullopt;\n    else {\n        unsigned char result[MD5_DIGEST_LENGTH];\n        std::stringstream stream;\n        MD5((unsigned char*)text.c_str(), text.size(), result);\n        for (int i = 0; i < MD5_DIGEST_LENGTH; i++)\n            stream << std::hex << (int)result[i];\n        return stream.str();\n    }",
        "grade-166": {
            "execution": 0
        },
        "28": "// Please implement your function here\n    int n = text.length();\n    int i;\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5_CTX ctx;\n    MD5_Init(&ctx);\n    MD5_Update(&ctx, text.c_str(), n);\n    MD5_Final(digest, &ctx);\n    char mdString[33];\n    for(i = 0; i < 16; i++)\n         sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n    std::string s(mdString);\n    return s;",
        "grade-28": {
            "execution": 0
        },
        "6": "if (text.length() == 0) return std::nullopt;\n  using byte = unsigned char;\n  byte digest[MD5_DIGEST_LENGTH];\n  MD5_CTX ctx;\n  MD5_Init(&ctx);\n  MD5_Update(&ctx, text.c_str(), text.length());\n  MD5_Final(digest, &ctx);\n  std::stringstream ss;\n  for (int i = 0; i < MD5_DIGEST_LENGTH; i++) {\n    ss << std::hex << std::setw(2) << std::setfill('0') << (int)digest[i];\n  }\n  return ss.str();",
        "grade-6": {
            "execution": 0
        },
        "193": "if (text.empty()) {\n    return std::nullopt;\n  }\n  std::string md5;\n  std::stringstream ss;\n  ss << std::hex << std::setfill('0');\n  for (char byte : std::experimental::filesystem::v1::md5(text)) {\n    ss << std::setw(2) << static_cast<int>(byte);\n  }\n  return ss.str();",
        "grade-193": {
            "execution": 0
        },
        "71": "if (text.empty()) {\n    return std::nullopt;\n  }\n  const char* data = text.c_str();\n  unsigned char digest[MD5_DIGEST_LENGTH];\n  MD5((unsigned char*)data, strlen(data), (unsigned char*)&digest);\n  char mdString[33];\n  for (int i = 0; i < 16; i++)\n    sprintf(&mdString[i * 2], \"%02x\", (unsigned int)digest[i]);\n  return std::string(mdString);",
        "grade-71": {
            "execution": 0
        },
        "63": "",
        "grade-63": {
            "execution": 0
        },
        "58": "// 1. text is not empty\n  if(text.length()==0) return std::nullopt;\n  // 2. std::optional<std::string> ret = md5(text);\n  std::string ret = md5(text);\n  return ret;",
        "grade-58": {
            "execution": 0
        },
        "35": "if (text.empty()) {\n    return std::nullopt;\n  }\n\n  unsigned char digest[MD5_DIGEST_LENGTH];\n  char md5[MD5_DIGEST_LENGTH * 2 + 1];\n\n  MD5((unsigned char*)text.c_str(), text.size(), (unsigned char*)&digest);\n\n  for (int i = 0; i < MD5_DIGEST_LENGTH; i++) {\n    sprintf(&md5[i * 2], \"%02x\", (unsigned int)digest[i]);\n  }\n\n  return std::string(md5);",
        "grade-35": {
            "execution": 0
        },
        "192": "if (text.empty()) {\n    return std::nullopt;\n  }\n  std::string result;\n  result.resize(MD5_DIGEST_LENGTH);\n  MD5((unsigned char*)text.c_str(), text.size(), (unsigned char*)result.data());\n  std::stringstream ss;\n  for (int i = 0; i < MD5_DIGEST_LENGTH; i++) {\n    ss << std::hex << std::setw(2) << std::setfill('0') << (int)result[i];\n  }\n  return ss.str();",
        "grade-192": {
            "execution": 0
        },
        "26": "std::optional<std::string> opt = std::nullopt;\n    int i = 0;\n    while (i < text.length()) {\n        text[i] = toupper(text[i]);\n        i++;\n    }\n    for (i = 0; i < text.length(); i++) {\n        if (!isalpha(text[i]) && !isdigit(text[i])) {\n            return opt;\n        }\n    }\n    opt = text;\n    return opt;",
        "grade-26": {
            "execution": 0
        },
        "177": "// Write your code here!\n    constexpr char hexmap[] = {'0', '1', '2', '3', '4', '5', '6', '7',\n                               '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};\n    std::string hash;\n    hash.reserve(32);\n    md5::MD5 md5;\n    md5.update(text);\n    auto digest = md5.digest();\n    for (int i = 0; i < 16; ++i) {\n        hash.push_back(hexmap[(digest[i] >> 4) & 0xF]);\n        hash.push_back(hexmap[digest[i] & 0xF]);\n    }\n    return hash;",
        "grade-177": {
            "execution": 0
        },
        "142": "using namespace std;\n    using namespace std::string_literals;\n    if (text.empty()) return nullopt;\n    const auto md5_hash = md5(text.c_str());\n    auto bytes = string_to_bytes(md5_hash);\n    auto bytes_hex = bytes_to_hex(bytes);\n    return bytes_hex;",
        "grade-142": {
            "execution": 0
        },
        "22": "if (text.empty()) {\n\t\treturn std::nullopt;\n\t}\n\tstd::array<unsigned char, MD5_DIGEST_LENGTH> md5;\n\tMD5((unsigned char*) text.c_str(), text.size(), md5.data());\n\tstd::stringstream ss;\n\tfor (int i = 0; i < md5.size(); i++) {\n\t\tss << std::hex << std::setw(2) << std::setfill('0') << (int) md5[i];\n\t}\n\treturn ss.str();",
        "grade-22": {
            "execution": 0
        },
        "154": "if (text.empty()) {\n    return std::nullopt;\n  }\n  MD5 md5;\n  md5.update(text);\n  return md5.toString();",
        "grade-154": {
            "execution": 0
        },
        "111": "if (text.empty()) {\n    return std::nullopt;\n  }\n  MD5 digest;\n  digest.update(text);\n  return digest.toString();",
        "grade-111": {
            "execution": 0
        },
        "8": "if (text.empty()) {\n    return std::nullopt;\n  }\n  std::string md5_hash;\n  md5_hash.resize(32);\n  int ret = ::md5((const unsigned char *)text.c_str(), text.size(), (unsigned char *)md5_hash.data());\n  assert(ret == 0);\n  return md5_hash;",
        "grade-8": {
            "execution": 0
        },
        "7": "// if (text.empty()) {\n    //     return {};\n    // }\n    // u_int8_t hash[MD5_DIGEST_LENGTH];\n    // MD5_CTX md5_ctx;\n    // MD5_Init(&md5_ctx);\n    // MD5_Update(&md5_ctx, text.c_str(), text.size());\n    // MD5_Final(hash, &md5_ctx);\n    // char md5[MD5_DIGEST_LENGTH * 2 + 1];\n    // for (size_t i = 0; i < MD5_DIGEST_LENGTH; i++) {\n    //     sprintf(&md5[i * 2], \"%02x\", (unsigned int)hash[i]);\n    // }\n    // return md5;\n    return {};",
        "grade-7": {
            "execution": 0
        },
        "23": "if (text.empty()) {\n        return std::nullopt;\n    }\n    std::hash<std::string> hash_fn;\n    std::size_t hash = hash_fn(text);\n    std::stringstream ss;\n    ss << std::hex << hash;\n    return ss.str();",
        "grade-23": {
            "execution": 0
        },
        "56": "unsigned char hash[MD5_DIGEST_LENGTH];\n  std::stringstream ss;\n  MD5((unsigned char*)text.c_str(), text.size(), hash);\n  for(int i = 0; i < MD5_DIGEST_LENGTH; i++)\n    ss << std::hex << std::setw(2) << std::setfill('0') << (int)hash[i];\n  return ss.str();",
        "grade-56": {
            "execution": 0
        },
        "60": "if (text.empty()) {\n        return std::nullopt;\n    }\n    unsigned char result[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.size(), result);\n    char mdString[33];\n    for(int i = 0; i < 16; i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)result[i]);\n    return std::string(mdString);",
        "grade-60": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nlong starts_one_ends(long n) {\n",
        "snippet": [
            "    if (n<1) return 0;\n    if (n==1) return 1;\n    int out=18;\n    for (int i=2;i<n;i++)\n        out=out*10;\n    return out;\n}\n"
        ],
        "simplified": "Given a positive integer n, return the count of the numbers of n-digit positive integers that start or end with 1.",
        "task_id": "83",
        "164": "if (n == 1) return 2;\n  long dp[n+1];\n  dp[0] = 0;\n  dp[1] = 2;\n  for (long i = 2; i <= n; i++) {\n    dp[i] = (dp[i-1] + dp[i-2]);\n  }\n  return dp[n];",
        "grade-164": {
            "execution": 0
        },
        "28": "assert(n > 0);\n    if (n == 1) return 2;\n    long res = 10;\n    long base = 10;\n    for (long i = 2; i < n; ++i) {\n        res += 9 * base;\n        base *= 10;\n    }\n    return res;",
        "grade-28": {
            "execution": 0
        },
        "6": "assert(n > 0);\n  long count = 1;\n  long pow_prev = 1;\n  for (long i = 1; i < n; ++i) {\n    long pow_curr = pow_prev * 10;\n    count += pow_prev;\n    count += pow_curr;\n    pow_prev = pow_curr;\n  }\n  return count;",
        "grade-6": {
            "execution": 0
        },
        "191": "long *dp = new long[n + 1];\n    dp[0] = 0;\n    dp[1] = 1;\n    for (long i = 2; i <= n; i++) {\n        dp[i] = 2 * dp[i - 1] + pow(10, i - 1);\n    }\n    return dp[n];",
        "grade-191": {
            "execution": 0
        },
        "70": "long ans = 0;\n  for (int i = 1; i <= n; i++) {\n    // start with 1\n    ans += std::pow(10, i - 1);\n    // end with 1\n    ans += std::pow(10, i - 1);\n  }\n  return ans;",
        "grade-70": {
            "execution": 0
        },
        "62": "// Write your code here.\n    return 0;",
        "grade-62": {
            "execution": 0
        },
        "57": "return 0;",
        "grade-57": {
            "execution": 0
        },
        "35": "if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 11;\n  }\n  if (n == 3) {\n    return 100;\n  }\n  long dp[n + 1];\n  memset(dp, 0, sizeof(dp));\n  dp[1] = 1;\n  dp[2] = 11;\n  dp[3] = 100;\n  for (long i = 4; i <= n; i++) {\n    dp[i] = dp[i - 1] + dp[i - 2];\n  }\n  return dp[n];",
        "grade-35": {
            "execution": 0
        },
        "190": "long *F = new long[n+1];\n    F[0] = 0;\n    F[1] = 1;\n    for(long i = 2; i <= n; i++) {\n        F[i] = (10*F[i-1]) - F[i-2];\n    }\n    long result = F[n];\n    delete [] F;\n    return result;",
        "grade-190": {
            "execution": 0
        },
        "26": "if (n == 1) {\n        return 10;\n    } else if (n == 2) {\n        return 100;\n    }\n    // how many numbers of n-digits end with 1\n    long ends_1 = 10 * starts_one_ends(n - 1);\n    // how many numbers of n-digits start with 1\n    long starts_1 = 9 * pow(10, n - 2);\n    return starts_1 + ends_1;",
        "grade-26": {
            "execution": 0
        },
        "174": "if (n <= 1) {\n    return 1;\n  }\n  long sum = 1;\n  for (int i = 2; i <= n; i++) {\n    sum += 9 * sum;\n  }\n  return sum;",
        "grade-174": {
            "execution": 0
        },
        "140": "std::vector<long> all_digits(n, 0);\n  for (long i = 0; i < n; i++) {\n    if (i == 0) {\n      all_digits[i] = 9;\n    } else {\n      all_digits[i] = (all_digits[i - 1] * 10) - pow(10, i - 1);\n    }\n  }\n  long sum = 0;\n  for (auto i : all_digits) {\n    sum += i;\n  }\n  return sum * 2;",
        "grade-140": {
            "execution": 0
        },
        "22": "if (n == 1) {\n        return 2;\n    }\n    if (n == 2) {\n        return 10;\n    }\n    return (n - 1) * 9 * (long)pow(10, n - 2);",
        "grade-22": {
            "execution": 0
        },
        "152": "long dp[n + 1];\n  memset(dp, 0, sizeof(dp));\n  dp[1] = 10;\n  dp[2] = 100;\n  for (long i = 3; i <= n; i++) {\n    dp[i] = 10 * dp[i - 1] - pow(10, i - 2);\n  }\n  return dp[n];",
        "grade-152": {
            "execution": 0
        },
        "109": "if (n == 1) {\n        return 2;\n    }\n    if (n == 2) {\n        return 4;\n    }\n    long *dp = new long[n + 1];\n    dp[0] = 0;\n    dp[1] = 2;\n    dp[2] = 4;\n    for (long i = 3; i <= n; i++) {\n        dp[i] = dp[i - 1] + dp[i - 2];\n    }\n    return dp[n];",
        "grade-109": {
            "execution": 0
        },
        "8": "if (n < 1) return 0;\n  long* starts_with_one = new long[n];\n  long* ends_with_one = new long[n];\n  starts_with_one[0] = 1;\n  ends_with_one[0] = 1;\n  for (long i = 1; i < n; i++) {\n    starts_with_one[i] = starts_with_one[i - 1] * 2 + 1;\n    ends_with_one[i] = starts_with_one[i - 1] + ends_with_one[i - 1];\n  }\n  long result = ends_with_one[n - 1] + starts_with_one[n - 1];\n  delete[] starts_with_one;\n  delete[] ends_with_one;\n  return result;",
        "grade-8": {
            "execution": 0
        },
        "7": "// For example,\n    // count = 4, since the 4-digit numbers that start or end with 1 are:\n    // 1000, 1001, 1002, 1100, 1101, 1102, 1110, 1111, 1112, 1120, 1121, 1122,\n    // 1200, 1201, 1202, 1210, 1211, 1212, 1220, 1221, 1222, 2000, 2001, 2002,\n    // 2100, 2101, 2102, 2110, 2111, 2112, 2120, 2121, 2122, 2200, 2201, 2202,\n    // 2210, 2211, 2212, 2220, 2221, 2222.\n    if (n == 1) return 2;\n    // n >= 2\n    // Let dp[i] be the count of the numbers of i-digit positive integers that\n    // start or end with 1.\n    //\n    // If i is odd, the count is dp[i-1] * 2 + 3 * 2^(i/2-1) = dp[i-1] * 2 +\n    // 2^i-1 - 2^(i/2).\n    //\n    // If i is even, the count is dp[i-1] * 2 + 2^(i/2).\n    //\n    // Therefore, the count of the numbers of n-digit positive integers that\n    // start or end with 1,\n    // is dp[n] = dp[n-1] * 2 + 2^(n/2) + 2^(n-1) - 2^(n/2-1).\n    long dp[n+1];\n    dp[1] = 2;\n    dp[2] = 5;\n    for (long i = 3; i <= n; ++i) {\n        dp[i] = dp[i-1] * 2 + (1L << (i/2)) + (1L << (i-1)) - (1L << (i/2-1));\n    }\n    return dp[n];",
        "grade-7": {
            "execution": 0
        },
        "23": "if (n == 1) {\n        return 2;\n    }\n    long total_count = 0;\n    long intermediate_count = 0;\n    long prod = 1;\n    for (long i = 0; i < n - 1; i++) {\n        prod *= 10;\n        intermediate_count += prod;\n    }\n    total_count += 2 * intermediate_count;\n    total_count += 9 * prod;\n    return total_count;",
        "grade-23": {
            "execution": 0
        },
        "55": "if (n == 1) return 1;\n  return (starts_one_ends(n - 1) * 10) - starts_one_ends(n - 2);",
        "grade-55": {
            "execution": 0
        },
        "59": "long counter = 0;\n  long *arr = new long[n + 1];\n  arr[0] = 0;\n  arr[1] = 1;\n  arr[2] = 11;\n  arr[3] = 111;\n  for (long i = 4; i <= n; i++) {\n    arr[i] = 10 * arr[i - 1] + pow(10, i - 1);\n  }\n  counter = arr[n];\n  delete arr;\n  return counter;",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0, -10])\n// True\nbool monotonic(std::vector<long> l) {\n",
        "snippet": [
            "    int incr,decr;\n    incr=0;decr=0;\n    for (int i=1;i<l.size();i++)\n    {\n        if (l[i]>l[i-1]) incr=1;\n        if (l[i]<l[i-1]) decr=1;\n    }\n    if (incr+decr==2) return false;\n    return true;\n}\n"
        ],
        "simplified": "Return True is list elements are monotonically increasing or decreasing.",
        "task_id": "57",
        "165": "if (l.size() <= 2) {\n        return true;\n    }\n    bool is_increasing = l[0] < l[1];\n    for (int i = 1; i < l.size() - 1; i++) {\n        if (is_increasing) {\n            if (l[i] > l[i + 1]) {\n                return false;\n            }\n        } else {\n            if (l[i] < l[i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;",
        "grade-165": {
            "execution": 1
        },
        "28": "bool inc = true;\n  bool dec = true;\n  for (int i = 0; i < l.size() - 1; i++) {\n    if (l[i] > l[i + 1]) {\n      inc = false;\n    }\n    if (l[i] < l[i + 1]) {\n      dec = false;\n    }\n  }\n  return inc || dec;",
        "grade-28": {
            "execution": 1
        },
        "6": "return is_sorted(l.begin(), l.end()) || is_sorted(l.rbegin(), l.rend());",
        "grade-6": {
            "execution": 1
        },
        "191": "// your code here\n    bool check = false;\n    long size = l.size();\n    long i = 0;\n    long j = size - 1;\n    while(i < j) {\n        if(l[i] > l[i+1]) {\n            check = true;\n            while(i < j) {\n                if(l[i] < l[i+1]) {\n                    return false;\n                }\n                i++;\n            }\n        }\n        else if(l[i] < l[i+1]) {\n            check = true;\n            while(i < j) {\n                if(l[i] > l[i+1]) {\n                    return false;\n                }\n                i++;\n            }\n        }\n        else {\n            check = false;\n            i++;\n        }\n    }\n    return check;",
        "grade-191": {
            "execution": 0
        },
        "71": "bool ascending = true;\n    bool descending = true;\n    for (int i = 0; i < l.size() - 1; i++) {\n        if (l[i] > l[i + 1]) {\n            ascending = false;\n        }\n        if (l[i] < l[i + 1]) {\n            descending = false;\n        }\n    }\n    return ascending || descending;",
        "grade-71": {
            "execution": 1
        },
        "63": "// Your code goes here:\n    long last = l[0];\n    bool inc = true;\n    bool dec = true;\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < last) {\n            inc = false;\n        }\n        if (l[i] > last) {\n            dec = false;\n        }\n        last = l[i];\n    }\n    return inc || dec;",
        "grade-63": {
            "execution": 1
        },
        "57": "if (l.size() < 3) return true;\n  std::vector<long> s;\n  for (int i = 0; i < l.size() - 1; i++) {\n    s.push_back(l[i + 1] - l[i]);\n  }\n  int c = 0;\n  for (int i = 0; i < s.size() - 1; i++) {\n    if (s[i] * s[i + 1] <= 0) {\n      c += 1;\n    }\n  }\n  if (c > 0) {\n    return false;\n  }\n  return true;",
        "grade-57": {
            "execution": 0
        },
        "35": "if (l.size() <= 1) return true;\n  bool inc = l[0] < l[1];\n  for (size_t i = 1; i < l.size() - 1; i++) {\n    if (inc && l[i] > l[i + 1]) return false;\n    if (!inc && l[i] < l[i + 1]) return false;\n  }\n  return true;",
        "grade-35": {
            "execution": 1
        },
        "190": "if (l.size() < 2) return true;\n    bool pos = l[1] > l[0], equal = true;\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] != l[i-1]) equal = false;\n        if (pos != (l[i] > l[i-1])) return false;\n    }\n    return !equal;",
        "grade-190": {
            "execution": 0
        },
        "26": "bool c, d;\n    int i = 0;\n    if (l.size() > 1) {\n        while (l[i] == l[i + 1]) {\n            i++;\n        }\n        if (l[i] > l[i + 1]) {\n            c = true;\n        } else {\n            c = false;\n        }\n        i = l.size() - 1;\n        while (l[i] == l[i - 1]) {\n            i--;\n        }\n        if (l[i] > l[i - 1]) {\n            d = true;\n        } else {\n            d = false;\n        }\n        return c == d;\n    } else {\n        return true;\n    }",
        "grade-26": {
            "execution": 0
        },
        "175": "bool isNonDecreasing = true;\n    bool isNonIncreasing = true;\n    for (int i = 0; i < l.size() - 1; i++) {\n        if (l[i] > l[i + 1]) {\n            isNonDecreasing = false;\n        }\n        if (l[i] < l[i + 1]) {\n            isNonIncreasing = false;\n        }\n    }\n    return isNonDecreasing || isNonIncreasing;",
        "grade-175": {
            "execution": 1
        },
        "141": "// your code goes here\n\tbool increasing = true;\n\tbool decreasing = true;\n\tfor (int i = 0; i < l.size() - 1; i++) {\n\t\tif (l[i] > l[i + 1])\n\t\t\tincreasing = false;\n\t\tif (l[i] < l[i + 1])\n\t\t\tdecreasing = false;\n\t}\n\treturn increasing || decreasing;",
        "grade-141": {
            "execution": 1
        },
        "22": "bool increasing = true;\n  bool decreasing = true;\n  for (int i = 0; i < l.size() - 1; i++) {\n    if (l[i] > l[i + 1]) {\n      increasing = false;\n    }\n    if (l[i] < l[i + 1]) {\n      decreasing = false;\n    }\n  }\n  return (increasing || decreasing);",
        "grade-22": {
            "execution": 1
        },
        "153": "std::vector<long>::iterator it;\n    it = l.begin();\n    int flag = 0;\n    for(it; it != l.end()-1; it++) {\n        if(*it > *(it+1)) {\n            flag = -1;\n            break;\n        }\n        else if(*it < *(it+1)) {\n            flag = 1;\n            break;\n        }\n    }\n    if(flag == 0)\n        return true;\n    it++;\n    for(it; it != l.end()-1; it++) {\n        if(flag == 1 && *it > *(it+1))\n            return false;\n        else if(flag == -1 && *it < *(it+1))\n            return false;\n    }\n    return true;",
        "grade-153": {
            "execution": 1
        },
        "109": "int direction = 0;\n  int current = 0;\n  int previous = 0;\n  for (auto i : l) {\n    current = i;\n    if (direction == 0) {\n      if (current > previous) {\n        direction = 1;\n      } else if (current < previous) {\n        direction = -1;\n      }\n    } else if (direction == 1) {\n      if (current < previous) {\n        return false;\n      }\n    } else if (direction == -1) {\n      if (current > previous) {\n        return false;\n      }\n    }\n    previous = current;\n  }\n  return true;",
        "grade-109": {
            "execution": 0
        },
        "8": "bool incr=true,decr=true;\n    if(l.size()==1)\n        return true;\n    for(int i=0;i<l.size()-1;i++){\n        if(l[i]>l[i+1])\n            incr=false;\n        if(l[i]<l[i+1])\n            decr=false;\n    }\n    return (incr|decr);",
        "grade-8": {
            "execution": 1
        },
        "7": "if (l.size() <= 1) {\n        return true;\n    }\n    int x = 0;\n    int sign = 0;\n    for (int i = 0; i < l.size() - 1; i++) {\n        x = l[i + 1] - l[i];\n        if (x > 0) {\n            if (sign == 0) {\n                sign = 1;\n            } else if (sign == -1) {\n                return false;\n            }\n        } else if (x < 0) {\n            if (sign == 0) {\n                sign = -1;\n            } else if (sign == 1) {\n                return false;\n            }\n        }\n    }\n    return true;",
        "grade-7": {
            "execution": 1
        },
        "23": "int n = l.size();\n\tif (n == 1) {\n\t\treturn true;\n\t}\n\n\tbool inc = false;\n\tbool dec = false;\n\tfor (int i = 0; i < n - 1; i++) {\n\t\tif (l[i] < l[i + 1]) {\n\t\t\tinc = true;\n\t\t} else if (l[i] > l[i + 1]) {\n\t\t\tdec = true;\n\t\t}\n\t}\n\tif (inc and dec) {\n\t\treturn false;\n\t}\n\treturn true;",
        "grade-23": {
            "execution": 1
        },
        "55": "bool isIncreasing = true;\n    bool isDecreasing = true;\n    for (int i = 0; i < l.size() - 1; i++) {\n        if (l[i] < l[i + 1]) {\n            isDecreasing = false;\n        }\n        if (l[i] > l[i + 1]) {\n            isIncreasing = false;\n        }\n    }\n    return isIncreasing || isDecreasing;",
        "grade-55": {
            "execution": 1
        },
        "60": "if (l.size() == 0) {\n        return true;\n    }\n    // bool result = true;\n    int diff = l[1] - l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (diff < 0) {\n            if (l[i] - l[i - 1] > 0) {\n                return false;\n            }\n        } else if (diff > 0) {\n            if (l[i] - l[i - 1] < 0) {\n                return false;\n            }\n        }\n    }\n    return true;",
        "grade-60": {
            "execution": 1
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152) == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nstd::string int_to_mini_roman(long number) {\n",
        "snippet": [
            "    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\n"
        ],
        "simplified": "Given a positive integer, obtain its roman numeral equivalent as a string, and return it in lowercase. Restrictions: 1 <= num <= 1000",
        "task_id": "156",
        "165": "//start your code here\n\tassert(number > 0);\n\tassert(number <= 1000);\n\t// storing roman values of digits from 0-9\n\t// when placed at different places\n\tstd::string m[] = { \"\", \"m\", \"mm\", \"mmm\" };\n\tstd::string c[] = { \"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\",\n\t\t\t\t\t\t\"dc\", \"dcc\", \"dccc\", \"cm\" };\n\tstd::string x[] = { \"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\",\n\t\t\t\t\t\t\"lx\", \"lxx\", \"lxxx\", \"xc\" };\n\tstd::string i[] = { \"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\",\n\t\t\t\t\t\t\"vi\", \"vii\", \"viii\", \"ix\" };\n\t// Converting to roman\n\tstd::string thousands = m[number / 1000];\n\tstd::string hundereds = c[(number % 1000) / 100];\n\tstd::string tens = x[(number % 100) / 10];\n\tstd::string ones = i[number % 10];\n\n\tstd::string ans = thousands + hundereds + tens + ones;\n\n\treturn ans;",
        "grade-165": {
            "execution": 1
        },
        "28": "assert(number > 0);\n\tassert(number <= 1000);\n\tstd::map<int, std::string> romanMap = {\n\t\t{1, \"i\"},\n\t\t{5, \"v\"},\n\t\t{10, \"x\"},\n\t\t{50, \"l\"},\n\t\t{100, \"c\"},\n\t\t{500, \"d\"},\n\t\t{1000, \"m\"}\n\t};\n\tstd::string result = \"\";\n\tfor (auto it = romanMap.rbegin(); it != romanMap.rend(); ++it) {\n\t\twhile (number >= it->first) {\n\t\t\tresult += it->second;\n\t\t\tnumber -= it->first;\n\t\t}\n\t}\n\treturn result;",
        "grade-28": {
            "execution": 0
        },
        "6": "std::vector<std::pair<int,std::string>> numerals = {\n        {1000, \"m\"},\n        {900, \"cm\"},\n        {500, \"d\"},\n        {400, \"cd\"},\n        {100, \"c\"},\n        {90, \"xc\"},\n        {50, \"l\"},\n        {40, \"xl\"},\n        {10, \"x\"},\n        {9, \"ix\"},\n        {5, \"v\"},\n        {4, \"iv\"},\n        {1, \"i\"}\n    };\n    std::string roman_numeral;\n    while (number > 0) {\n        for (auto numeral : numerals) {\n            if (number >= numeral.first) {\n                roman_numeral += numeral.second;\n                number -= numeral.first;\n                break;\n            }\n        }\n    }\n    return roman_numeral;",
        "grade-6": {
            "execution": 1
        },
        "191": "std::string romanNum;\n    while(number>=1000){\n        romanNum += \"m\";\n        number -= 1000;\n    }\n    while(number>=900){\n        romanNum += \"cm\";\n        number -= 900;\n    }\n    while(number>=500){\n        romanNum += \"d\";\n        number -= 500;\n    }\n    while(number>=400){\n        romanNum += \"cd\";\n        number -= 400;\n    }\n    while(number>=100){\n        romanNum += \"c\";\n        number -= 100;\n    }\n    while(number>=90){\n        romanNum += \"xc\";\n        number -= 90;\n    }\n    while(number>=50){\n        romanNum += \"l\";\n        number -= 50;\n    }\n    while(number>=40){\n        romanNum += \"xl\";\n        number -= 40;\n    }\n    while(number>=10){\n        romanNum += \"x\";\n        number -= 10;\n    }\n    while(number>=9){\n        romanNum += \"ix\";\n        number -= 9;\n    }\n    while(number>=5){\n        romanNum += \"v\";\n        number -= 5;\n    }\n    while(number>=4){\n        romanNum += \"iv\";\n        number -= 4;\n    }\n    while(number>=1){\n        romanNum += \"i\";\n        number -= 1;\n    }\n    return romanNum;",
        "grade-191": {
            "execution": 1
        },
        "71": "// Declare the map of roman numerals\n    std::map<long, std::string> m{\n        {1, \"i\"}, {4, \"iv\"}, {5, \"v\"}, {9, \"ix\"}, {10, \"x\"}, {40, \"xl\"},\n        {50, \"l\"}, {90, \"xc\"}, {100, \"c\"}, {400, \"cd\"}, {500, \"d\"},\n        {900, \"cm\"}, {1000, \"m\"}\n    };\n    // Declare the empty roman numeral string\n    std::string result;\n    // Loop on map keys from the largest (1000) to smallest (1)\n    for (auto it = m.rbegin(); it != m.rend(); ++it) {\n        // If the key is larger than the number\n        while (it->first <= number) {\n            // Append the roman numeral to the string\n            result += it->second;\n            // Subtract the key from the number\n            number -= it->first;\n        }\n    }\n    // Return the result\n    return result;",
        "grade-71": {
            "execution": 1
        },
        "62": "std::string roman;\n  long n = number;\n  while (n) {\n    if (n >= 1000) {\n      roman += \"m\";\n      n -= 1000;\n    } else if (n >= 900) {\n      roman += \"cm\";\n      n -= 900;\n    } else if (n >= 500) {\n      roman += \"d\";\n      n -= 500;\n    } else if (n >= 400) {\n      roman += \"cd\";\n      n -= 400;\n    } else if (n >= 100) {\n      roman += \"c\";\n      n -= 100;\n    } else if (n >= 90) {\n      roman += \"xc\";\n      n -= 90;\n    } else if (n >= 50) {\n      roman += \"l\";\n      n -= 50;\n    } else if (n >= 40) {\n      roman += \"xl\";\n      n -= 40;\n    } else if (n >= 10) {\n      roman += \"x\";\n      n -= 10;\n    } else if (n >= 9) {\n      roman += \"ix\";\n      n -= 9;\n    } else if (n >= 5) {\n      roman += \"v\";\n      n -= 5;\n    } else if (n >= 4) {\n      roman += \"iv\";\n      n -= 4;\n    } else if (n >= 1) {\n      roman += \"i\";\n      n -= 1;\n    }\n  }\n  return roman;",
        "grade-62": {
            "execution": 1
        },
        "57": "std::string res = \"\";\n    int symbol[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    std::string roman[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    for (int i = 0; i < 13; i++) {\n        while (number >= symbol[i]) {\n            number -= symbol[i];\n            res += roman[i];\n        }\n    }\n    return res;",
        "grade-57": {
            "execution": 1
        },
        "35": "std::string result;\n  int digitCount=0;\n  while(number>0){\n    int digit=number%10;\n    number/=10;\n    switch(digitCount){\n      case 0:\n        if(digit==4){\n          result.insert(0,\"iv\");\n        }else if(digit==9){\n          result.insert(0,\"ix\");\n        }else{\n          int i=0;\n          while(i<digit){\n            if(i==5){\n              result.insert(0,\"v\");\n            }else{\n              result.insert(0,\"i\");\n            }\n            i++;\n          }\n        }\n        break;\n      case 1:\n        if(digit==4){\n          result.insert(0,\"xl\");\n        }else if(digit==9){\n          result.insert(0,\"xc\");\n        }else{\n          int i=0;\n          while(i<digit){\n            if(i==5){\n              result.insert(0,\"l\");\n            }else{\n              result.insert(0,\"x\");\n            }\n            i++;\n          }\n        }\n        break;\n      case 2:\n        if(digit==4){\n          result.insert(0,\"cd\");\n        }else if(digit==9){\n          result.insert(0,\"cm\");\n        }else{\n          int i=0;\n          while(i<digit){\n            if(i==5){\n              result.insert(0,\"d\");\n            }else{\n              result.insert(0,\"c\");\n            }\n            i++;\n          }\n        }\n        break;\n      case 3:\n        int i=0;\n        while(i<digit){\n          result.insert(0,\"m\");\n          i++;\n        }\n        break;\n    }\n    digitCount++;\n  }\n  return result;",
        "grade-35": {
            "execution": 0
        },
        "190": "std::string rom = \"\";\n    int num[13] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    std::string sym[13] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    for (int i = 0; i < 13; i++) {\n        while (number >= num[i]) {\n            rom += sym[i];\n            number -= num[i];\n        }\n    }\n    return rom;",
        "grade-190": {
            "execution": 1
        },
        "26": "std::string roman;\n    std::string final;\n    //assert(number > 0 && number <= 1000);\n    while(number >= 1000){\n        roman = \"m\";\n        final += roman;\n        number -= 1000;\n    }\n    while(number >= 500){\n        roman = \"d\";\n        final += roman;\n        number -= 500;\n    }\n    while(number >= 100){\n        roman = \"c\";\n        final += roman;\n        number -= 100;\n    }\n    while(number >= 50){\n        roman = \"l\";\n        final += roman;\n        number -= 50;\n    }\n    while(number >= 10){\n        roman = \"x\";\n        final += roman;\n        number -= 10;\n    }\n    while(number >= 5){\n        roman = \"v\";\n        final += roman;\n        number -= 5;\n    }\n    while(number >= 1){\n        roman = \"i\";\n        final += roman;\n        number -= 1;\n    }\n    return final;",
        "grade-26": {
            "execution": 0
        },
        "175": "std::vector<std::pair<long, std::string>> roman_symbols = {\n    {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100, \"c\"},\n    {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10, \"x\"}, {9, \"ix\"}, {5, \"v\"},\n    {4, \"iv\"}, {1, \"i\"}\n  };\n  std::string result = \"\";\n  while (number > 0) {\n    for (auto symbols : roman_symbols) {\n      if (number >= symbols.first) {\n        result += symbols.second;\n        number -= symbols.first;\n        break;\n      }\n    }\n  }\n  return result;",
        "grade-175": {
            "execution": 1
        },
        "141": "std::string s = \"\";\n  if (number < 0 || number > 1000) {\n    std::cout << \"Incorrect number format\" << std::endl;\n    return s;\n  }\n  while (number >= 1000) {\n    s += \"m\";\n    number -= 1000;\n  }\n  if (number >= 900) {\n    s += \"cm\";\n    number -= 900;\n  }\n  if (number >= 500) {\n    s += \"d\";\n    number -= 500;\n  }\n  if (number >= 400) {\n    s += \"cd\";\n    number -= 400;\n  }\n  while (number >= 100) {\n    s += \"c\";\n    number -= 100;\n  }\n  if (number >= 90) {\n    s += \"xc\";\n    number -= 90;\n  }\n  if (number >= 50) {\n    s += \"l\";\n    number -= 50;\n  }\n  if (number >= 40) {\n    s += \"xl\";\n    number -= 40;\n  }\n  while (number >= 10) {\n    s += \"x\";\n    number -= 10;\n  }\n  if (number >= 9) {\n    s += \"ix\";\n    number -= 9;\n  }\n  if (number >= 5) {\n    s += \"v\";\n    number -= 5;\n  }\n  if (number >= 4) {\n    s += \"iv\";\n    number -= 4;\n  }\n  while (number >= 1) {\n    s += \"i\";\n    number -= 1;\n  }\n  return s;",
        "grade-141": {
            "execution": 1
        },
        "22": "std::string roman;\n\tif (number < 1 || number > 1000) {\n\t\tthrow std::invalid_argument(\"Number should be between 1 and 1000!\");\n\t}\n\twhile (number > 0) {\n\t\tif (number >= 900) {\n\t\t\troman += \"cm\";\n\t\t\tnumber -= 900;\n\t\t} else if (number >= 500) {\n\t\t\troman += \"d\";\n\t\t\tnumber -= 500;\n\t\t} else if (number >= 400) {\n\t\t\troman += \"cd\";\n\t\t\tnumber -= 400;\n\t\t} else if (number >= 100) {\n\t\t\troman += \"c\";\n\t\t\tnumber -= 100;\n\t\t} else if (number >= 90) {\n\t\t\troman += \"xc\";\n\t\t\tnumber -= 90;\n\t\t} else if (number >= 50) {\n\t\t\troman += \"l\";\n\t\t\tnumber -= 50;\n\t\t} else if (number >= 40) {\n\t\t\troman += \"xl\";\n\t\t\tnumber -= 40;\n\t\t} else if (number >= 10) {\n\t\t\troman += \"x\";\n\t\t\tnumber -= 10;\n\t\t} else if (number >= 9) {\n\t\t\troman += \"ix\";\n\t\t\tnumber -= 9;\n\t\t} else if (number >= 5) {\n\t\t\troman += \"v\";\n\t\t\tnumber -= 5;\n\t\t} else if (number >= 4) {\n\t\t\troman += \"iv\";\n\t\t\tnumber -= 4;\n\t\t} else if (number >= 1) {\n\t\t\troman += \"i\";\n\t\t\tnumber -= 1;\n\t\t}\n\t}\n\treturn roman;",
        "grade-22": {
            "execution": 0
        },
        "153": "int values[] = {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    std::string numerals[] = {\"i\", \"iv\", \"v\", \"ix\", \"x\", \"xl\", \"l\", \"xc\", \"c\", \"cd\", \"d\", \"cm\", \"m\"};\n    std::string result = \"\";\n    int i = 12;\n    while (number > 0) {\n        int div = number / values[i];\n        number %= values[i];\n        while (div--) {\n            result += numerals[i];\n        }\n        i--;\n    }\n    return result;",
        "grade-153": {
            "execution": 1
        },
        "109": "std::vector<int> numbers;\n    std::vector<std::string> letters;\n    for (int i = 1; i <= 1000; i *= 10) {\n        numbers.push_back(i);\n        letters.push_back(std::to_string(i));\n    }\n    for (int i = 0; i < numbers.size(); i++) {\n        int digit = number / numbers[i];\n        if (digit != 0) {\n            if (digit == 9)\n                return letters[i] + letters[i + 1];\n            else if (digit >= 5)\n                return letters[i] + std::string(digit - 5, letters[i][0]);\n            else if (digit == 4)\n                return letters[i] + letters[i];\n            else\n                return std::string(digit, letters[i][0]);\n        }\n        number %= numbers[i];\n    }\n    return \"\";",
        "grade-109": {
            "execution": 0
        },
        "8": "// Fill me in!\n    std::string result = \"\";\n    while (number >= 1000) {\n        result += \"m\";\n        number -= 1000;\n    }\n    while (number >= 900) {\n        result += \"cm\";\n        number -= 900;\n    }\n    while (number >= 500) {\n        result += \"d\";\n        number -= 500;\n    }\n    while (number >= 400) {\n        result += \"cd\";\n        number -= 400;\n    }\n    while (number >= 100) {\n        result += \"c\";\n        number -= 100;\n    }\n    while (number >= 90) {\n        result += \"xc\";\n        number -= 90;\n    }\n    while (number >= 50) {\n        result += \"l\";\n        number -= 50;\n    }\n    while (number >= 40) {\n        result += \"xl\";\n        number -= 40;\n    }\n    while (number >= 10) {\n        result += \"x\";\n        number -= 10;\n    }\n    while (number >= 9) {\n        result += \"ix\";\n        number -= 9;\n    }\n    while (number >= 5) {\n        result += \"v\";\n        number -= 5;\n    }\n    while (number >= 4) {\n        result += \"iv\";\n        number -= 4;\n    }\n    while (number >= 1) {\n        result += \"i\";\n        number -= 1;\n    }\n    return result;",
        "grade-8": {
            "execution": 1
        },
        "7": "std::string res;\n    std::map<int, std::string> digits;\n    digits[1] = \"i\";\n    digits[5] = \"v\";\n    digits[10] = \"x\";\n    digits[50] = \"l\";\n    digits[100] = \"c\";\n    digits[500] = \"d\";\n    digits[1000] = \"m\";\n    std::vector<int> keys;\n    for (auto it = digits.begin(); it != digits.end(); ++it) {\n        keys.push_back(it->first);\n    }\n    std::reverse(keys.begin(), keys.end());\n    for (int k: keys) {\n        while (number >= k) {\n            res += digits[k];\n            number -= k;\n        }\n    }\n    return res;",
        "grade-7": {
            "execution": 0
        },
        "23": "std::vector<std::string> numbers = {\n      \"m\",  \"cm\", \"d\", \"cd\", \"c\",  \"xc\", \"l\",  \"xl\", \"x\",\n      \"ix\", \"v\",  \"iv\", \"i\",  \"im\", \"ic\", \"id\", \"icd\", \"ixc\",\n      \"il\", \"ixl\", \"ixc\", \"ilv\", \"ixv\", \"ixl\", \"ixl\", \"ixl\"};\n  std::vector<long> values = {\n      1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1, -1000, -100, -10,\n      -90, -50, -40, -900, -500, -400, -9, -5, -4, -1};\n  std::string roman = \"\";\n  long remaining = number;\n  while (remaining > 0) {\n    int index = remaining % numbers.size();\n    roman += numbers[index];\n    remaining = remaining / numbers.size();\n  }\n  return roman;",
        "grade-23": {
            "execution": 0
        },
        "55": "std::vector<std::string> numeral_mapping = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    std::vector<int> arabic_mapping = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    std::string result;\n    int remaining_number = number;\n    while (remaining_number > 0) {\n        for (int i = 0; i < arabic_mapping.size(); i++) {\n            if (remaining_number >= arabic_mapping[i]) {\n                remaining_number -= arabic_mapping[i];\n                result += numeral_mapping[i];\n                break;\n            }\n        }\n    }\n    return result;",
        "grade-55": {
            "execution": 1
        },
        "59": "std::string result = \"\";\n    // do some conversion here\n    return result;",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) : f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long() {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0 || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long n, long m) {\n",
        "snippet": [
            "    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\n"
        ],
        "simplified": "You are given two positive integers n and m, and your task is to compute the average of the integers from n through m (including n and m). Round the answer to the nearest integer and convert that to binary. If n is greater than m, return -1.",
        "task_id": "103",
        "164": "return Union_std_string_long((std::string)\"\");",
        "grade-164": {
            "execution": 0
        },
        "29": "if (n>m) return -1;\n    std::string str=\"0b\";\n    long sum=0;\n    long counter=0;\n    for (int i=n;i<=m;i++){\n        sum+=i;\n        counter++;\n    }\n    long avg = sum/counter;\n    avg = round(avg);\n    while (avg!=0){\n        if (avg%2==0){\n            str=\"0\"+str;\n        }else{\n            str=\"1\"+str;\n        }\n        avg=avg/2;\n    }\n    return str;",
        "grade-29": {
            "execution": 0
        },
        "6": "Union_std_string_long r = Union_std_string_long(std::string(\"0b0\"));\n    if (n > m) {\n        r = Union_std_string_long(long(-1));\n    } else {\n        long sum = n;\n        for (long i = n + 1; i <= m; i++) {\n            sum += i;\n        }\n        r = Union_std_string_long(std::string(\"0b\") + std::bitset<16>(sum / (m - n + 1)).to_string());\n    }\n    return r;",
        "grade-6": {
            "execution": 0
        },
        "190": "if (n>m) {\n        return -1;\n    }\n    long sum = 0;\n    int count = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n        count += 1;\n    }\n    int rounded_avg = std::round(sum/count);\n    std::string binary = std::bitset<8>(rounded_avg).to_string();\n    binary = \"0b\" + binary;\n    return binary;",
        "grade-190": {
            "execution": 0
        },
        "71": "if (n > m) {\n        return -1;\n    }\n    double avg = (n + m) / 2.0;\n    avg = round(avg);\n    return std::bitset<32>(avg).to_string();",
        "grade-71": {
            "execution": 0
        },
        "63": "return Union_std_string_long(std::to_string(n));",
        "grade-63": {
            "execution": 0
        },
        "58": "long sum = 0;\n    if (n > m) return -1;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg = sum / (m - n + 1);\n    std::stringstream ss;\n    ss << std::bitset<32>(avg).to_string();\n    return ss.str();",
        "grade-58": {
            "execution": 0
        },
        "36": "if (n > m) { return std::string(\"-1\"); }\n    float r = std::floor(((n + m) / 2.0f) + 0.5f);\n    std::bitset<32> bi(static_cast<long>(r));\n    return std::string(\"0b\" + bi.to_string());",
        "grade-36": {
            "execution": 0
        },
        "189": "if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long rounded = round(sum * 1.0 / (m - n + 1));\n    std::string binary = \"\";\n    while (rounded > 0) {\n        binary += (rounded % 2 == 0 ? \"0\" : \"1\");\n        rounded /= 2;\n    }\n    std::reverse(binary.begin(), binary.end());\n    return \"0b\" + binary;",
        "grade-189": {
            "execution": 0
        },
        "27": "if (n > m) {\n        return -1;\n    }\n    // n and m are within bounds.\n    long average = ((n + m) / 2);\n    std::string binary = std::bitset<8>(average).to_string();\n    return binary;",
        "grade-27": {
            "execution": 0
        },
        "174": "if (n > m) {\n        return \"0b-1\";\n    }\n    long avg = (n + m) / 2;\n    std::bitset<sizeof(int) * 8> bset(avg);\n    return std::string(\"0b\") + bset.to_string();",
        "grade-174": {
            "execution": 0
        },
        "140": "if (n>m) {\n        return -1;\n    } else {\n        int count = 0;\n        int sum = 0;\n        while (n<=m) {\n            sum += n;\n            n++;\n            count++;\n        }\n        std::string s = \"0b\";\n        std::bitset<1000> bits (sum/count);\n        s += bits.to_string();\n        std::string temp = \"\";\n        for (int i = s.length()-1; i>1; i--) {\n            temp += s[i];\n        }\n        s = temp;\n        return s;\n    }",
        "grade-140": {
            "execution": 0
        },
        "23": "if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg = (long) std::round((double) sum / (m - n + 1));\n    std::string binary = std::bitset<64>(avg).to_string();\n    return \"0b\" + binary.substr(binary.find(\"1\"));",
        "grade-23": {
            "execution": 0
        },
        "152": "if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum / (m - n + 1);\n    if (0.5 < (float) sum / (m - n + 1) - avg) {\n        avg += 1;\n    }\n    std::string answer = \"0b\";\n    answer += std::bitset<64>(avg).to_string();\n    return answer;",
        "grade-152": {
            "execution": 0
        },
        "109": "assert(n >= 1 && m >= 1);\n    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n    long count = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n        count++;\n    }\n    long result = (long) round((double) sum / count);\n    return std::bitset<64>(result).to_string();",
        "grade-109": {
            "execution": 0
        },
        "8": "return \"Replace this string with your implementation.\";",
        "grade-8": {
            "execution": 0
        },
        "7": "return Union_std_string_long(m);",
        "grade-7": {
            "execution": 0
        },
        "24": "if (n > m) return -1;\n    float result = 0;\n    for (long i = n; i <= m; i++) {\n        result += i;\n    }\n    result /= (m - n + 1);\n    std::string binary = std::bitset<32>(std::round(result)).to_string();\n    return binary;",
        "grade-24": {
            "execution": 0
        },
        "56": "if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long result = std::round(sum / (m - n + 1));\n    return std::bitset<20>(result).to_string();",
        "grade-56": {
            "execution": 0
        },
        "60": "long sum = 0;\n    if (n > m) {\n        return -1;\n    }\n    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    std::string bin = std::bitset<32>(sum / (m - n + 1)).to_string();\n    return std::string(\"0b\") + bin.substr(bin.find(\"1\"));",
        "grade-60": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers in the list l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// True\n// >>> below_threshold([1, 20, 4, 10], 5)\n// False\nbool below_threshold(std::vector<long> l, long t) {\n",
        "snippet": [
            "    for (int i=0;i<l.size();i++)\n        if (l[i]>=t) return false;\n    return true;\n}\n"
        ],
        "simplified": "Return True if all numbers in the list l are below threshold t.",
        "task_id": "52",
        "29": "// TODO: Write your code here\n\tfor(int i=0;i<l.size();i++)\n\t{\n\t\tif(l[i]>t)\n\t\t\treturn false;\n\t}\n\treturn true;",
        "grade-29": {
            "execution": 0
        },
        "6": "for(int i=0;i<l.size();i++){\n        if(l[i]>t){\n            return false;\n        }\n    }\n    return true;",
        "grade-6": {
            "execution": 0
        },
        "85": "std::vector<long>::iterator it;\n    for(it = l.begin(); it!=l.end(); it++){\n        if(*it >= t){\n            return false;\n        }\n    }\n    return true;",
        "grade-85": {
            "execution": 1
        },
        "75": "bool ok=true;\n  for(int i=0;i<l.size();i++){\n    if(l[i]>=t){\n      ok=false;\n      break;\n    }\n  }\n  return ok;",
        "grade-75": {
            "execution": 1
        },
        "68": "// NOTE: Loop until l.size(), cannot use l.size()-1, as it might overflow\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] >= t) {\n            return false;\n        }\n    }\n    return true;",
        "grade-68": {
            "execution": 1
        },
        "39": "// long n=l.size();\n    // for(long i=0;i<n;i++){\n    //     if(l[i]>=t){\n    //         return false;\n    //     }\n    // }\n    // return true;\n    return std::all_of(l.begin(),l.end(),[&](long i){return i<t;});",
        "grade-39": {
            "execution": 1
        },
        "27": "if (l.size()==0) {\n    return true;\n  }\n  int i = 0;\n  while (i < l.size()) {\n    if (l[i] >= t) {\n      return false;\n    }\n    i++;\n  }\n  return true;",
        "grade-27": {
            "execution": 1
        },
        "185": "long sum = 0;\n  for (int i = 0; i < l.size(); i++) {\n    sum += l[i];\n  }\n  if (sum > t) {\n    return false;\n  }\n  return true;",
        "grade-185": {
            "execution": 0
        },
        "22": "// Your code here!\n    int i;\n    for(i=0;i<l.size();i++)\n    {\n    \tif(l[i]>t)\n    \t{\n    \t\treturn false;\n    \t}\n    }\n    return true;",
        "grade-22": {
            "execution": 0
        },
        "137": "for(int i=0;i<l.size();i++)\n    {\n        if(l[i]>t)\n        {\n            return false;\n        }\n    }\n    return true;",
        "grade-137": {
            "execution": 0
        },
        "8": "long i;\n    bool flag = true;\n    for(i=0;i<l.size();i++)\n    {\n        if(l[i]<t)\n        {\n            flag = true;\n        }\n        else\n        {\n            flag = false;\n            break;\n        }\n    }\n    return flag;",
        "grade-8": {
            "execution": 1
        },
        "7": "if (l.size() == 0) {\n        return false;\n    }\n    long sum = 0;\n    for (long i = 0; i < l.size(); i++) {\n        sum += l[i];\n    }\n    if (sum < t) {\n        return true;\n    }\n    return false;",
        "grade-7": {
            "execution": 0
        },
        "23": "if (l.size()==0) return true;\n    //assert(l.size() > 0);\n    if(l[0]>=t) return false;\n    else return below_threshold(std::vector<long>(l.begin()+1,l.end()),t);",
        "grade-23": {
            "execution": 1
        },
        "65": "for(long i=0;i<l.size();i++){\n        if(l[i]>t){\n            return false;\n        }\n    }\n    return true;",
        "grade-65": {
            "execution": 0
        },
        "70": "int i;\n    int lsize = l.size();\n    for(i=0;i<lsize;i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;",
        "grade-70": {
            "execution": 1
        },
        "168": "// put your code here\n  for(int i=0;i<l.size();i++)\n  {\n    if(l[i]>t)\n      return false;\n  }\n  return true;",
        "grade-168": {
            "execution": 0
        },
        "192": "return all_of(l.begin(), l.end(), [t](long n) {return n < t;});",
        "grade-192": {
            "execution": 1
        },
        "57": "return std::all_of(l.begin(), l.end(), [t](long v) {return v < t;});",
        "grade-57": {
            "execution": 1
        },
        "136": "return std::all_of(l.begin(), l.end(), [t](long l_item) {\n        return l_item < t;\n    });",
        "grade-136": {
            "execution": 1
        },
        "66": "int n = l.size();\n\tfor (int i = 0; i < n; i++) {\n\t\tif (l[i] >= t)\n\t\t\treturn false;\n\t}\n\treturn true;",
        "grade-66": {
            "execution": 1
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a string and returns True if the string\n// length is a prime number or False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\nbool prime_length(std::string string) {\n",
        "snippet": [
            "    int l,i;\n    l=str.length();\n    if (l<2) return false;\n    for (i=2;i*i<=l;i++)\n    if (l%i==0) return false;\n    return true;\n}\n"
        ],
        "simplified": "Write a function that takes a string and returns True if the string length is a prime number or False otherwise",
        "task_id": "82",
        "169": "int len = string.length();\n  if (len < 2) {\n    return false;\n  }\n  if (len == 2) {\n    return true;\n  }\n  if (len % 2 == 0) {\n    return false;\n  }\n  int i;\n  for (i = 3; i <= sqrt(len); i += 2) {\n    if (len % i == 0) {\n      return false;\n    }\n  }\n  return true;",
        "grade-169": {
            "execution": 1
        },
        "28": "int s = string.length();\n    int count = 0;\n    for (int i = 2; i < s; i++) {\n        if (s % i == 0) {\n            count++;\n        }\n    }\n    if (count == 0) {\n        return true;\n    } else {\n        return false;\n    }",
        "grade-28": {
            "execution": 0
        },
        "6": "// Define the function\n    int count = 0;\n    int length = string.length();\n    for (int i = 1; i <= length; i++) {\n        if (length % i == 0) {\n            count++;\n        }\n    }\n    if (count == 2) {\n        return true;\n    }\n    else {\n        return false;\n    }",
        "grade-6": {
            "execution": 1
        },
        "72": "int length = string.length();\n\tbool isPrime = true;\n\tfor (int i = 2; i < length / 2; i++) {\n\t\tif (length % i == 0) {\n\t\t\tisPrime = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn isPrime;",
        "grade-72": {
            "execution": 0
        },
        "64": "// your code here!\n  int n = string.length();\n  if(n==0 || n==1){\n    return false;\n  }\n  else if(n==2){\n    return true;\n  }\n  else if(n%2==0){\n    return false;\n  }\n  else{\n    for(int i=3;i<n;i+=2){\n      if(n%i==0){\n        return false;\n      }\n    }\n    return true;\n  }",
        "grade-64": {
            "execution": 1
        },
        "58": "int string_length = string.length();\n    if (string_length == 2 || string_length == 3) {\n        return true;\n    } else if (string_length == 1 || string_length % 2 == 0) {\n        return false;\n    } else {\n        int counter = 3;\n        while (counter < sqrt(string_length)) {\n            if (string_length % counter == 0) {\n                return false;\n            }\n            counter += 2;\n        }\n        return true;\n    }",
        "grade-58": {
            "execution": 1
        },
        "36": "int length = string.length();\n    int i = 2;\n    while (i < length) {\n        if (length % i == 0) {\n            return false;\n        }\n        i++;\n    }\n    return true;",
        "grade-36": {
            "execution": 0
        },
        "26": "return false;",
        "grade-26": {
            "execution": 0
        },
        "180": "int a=string.length();\n    int c=0;\n    for(int i=1;i<=a;i++)\n    {\n        if(a%i==0)\n        {\n            c++;\n        }\n    }\n    if(c==2)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }",
        "grade-180": {
            "execution": 1
        },
        "143": "int n = string.length();\n    bool prime = true;\n    for (int i = 2; i < n; i++) {\n        if (n % i == 0) {\n            prime = false;\n            break;\n        }\n    }\n    return prime;",
        "grade-143": {
            "execution": 0
        },
        "22": "int length = string.length();\n    int flag = 0;\n    for (int i = 1; i <= length; i++) {\n        if (length % i == 0) {\n            flag++;\n        }\n    }\n    if (flag == 2) {\n        return true;\n    }\n    else {\n        return false;\n    }",
        "grade-22": {
            "execution": 1
        },
        "155": "// Initialize return value\n  bool rvalue = true;\n  // Check if the string length is 1 or 2\n  if (string.length() < 3) {\n    // Set return value to false\n    rvalue = false;\n  }\n  // Create a local variable\n  int lvalue = 2;\n  // Iterate through numbers, starting at 2\n  while (lvalue < string.length()) {\n    // Check if the string length is divisible by lvalue\n    if (string.length() % lvalue == 0) {\n      // Set return value to false\n      rvalue = false;\n    }\n    // Increment lvalue\n    lvalue++;\n  }\n  // Return return value\n  return rvalue;",
        "grade-155": {
            "execution": 0
        },
        "110": "return is_prime(string.length());",
        "grade-110": {
            "execution": 0
        },
        "8": "return true;",
        "grade-8": {
            "execution": 0
        },
        "7": "std::vector<int> v = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997};\n  for (int num : v) {\n    if (string.length() == num) {\n      return true;\n    }\n  }\n  return false;",
        "grade-7": {
            "execution": 1
        },
        "23": "std::string::size_type s = string.size();\n\tif (s == 1)\n\t\treturn true;\n\tif (s % 2 == 0)\n\t\treturn false;\n\tfor (std::string::size_type i = 3; i * i <= s; i += 2) {\n\t\tif (s % i == 0)\n\t\t\treturn false;\n\t}\n\treturn true;",
        "grade-23": {
            "execution": 0
        },
        "56": "// C++11 for loop. Iterates over elements of a container\n  for (char c : string) {\n    // Do something with c\n  }\n  // C++11 range-based for loop\n  for (int i : {0, 1, 2, 3, 4, 5}) {\n    // Do something with i\n  }\n  // C++11 range-based for loop on a vector\n  std::vector<int> v {1, 2, 3, 4, 5};\n  for (int i : v) {\n    // Do something with i\n  }\n  return true;",
        "grade-56": {
            "execution": 0
        },
        "61": "int length = string.length();\n    if (length == 1 || length == 2)\n        return true;\n    for (int i = 2; i < length; i++) {\n        if (length % i == 0)\n            return false;\n    }\n    return true;",
        "grade-61": {
            "execution": 0
        },
        "131": "return true;",
        "grade-131": {
            "execution": 0
        },
        "158": "int len = string.length();\n    if (len == 1) {\n        return true;\n    }\n    for (int i = 2; i <= len / 2; i++) {\n        if (len % i == 0) {\n            return false;\n        }\n    }\n    return true;",
        "grade-158": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Check if in given list of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// True\nbool has_close_elements(std::vector<float> numbers, float threshold) {\n",
        "snippet": [
            "    int i,j;\n    \n    for (i=0;i<numbers.size();i++)\n    for (j=i+1;j<numbers.size();j++)\n    if (abs(numbers[i]-numbers[j])<threshold)\n    return true;\n\n    return false;\n}\n\n"
        ],
        "simplified": "Check if in given list of numbers, are any two numbers closer to each other than given threshold.",
        "task_id": "0",
        "32": "float diff = 0.0;\n    for (int i = 0; i < numbers.size(); i++) {\n        for (int j = i+1; j < numbers.size(); j++) {\n            diff = numbers[i] - numbers[j];\n            if (diff < 0)\n                diff = -diff;\n            if (diff < threshold)\n                return true;\n        }\n    }\n    return false;",
        "grade-32": {
            "execution": 1
        },
        "6": "sort(numbers.begin(), numbers.end());\n  int n = numbers.size();\n  for (int i = 0; i < n-1; i++) {\n    if (abs(numbers[i] - numbers[i+1]) < threshold) {\n      return true;\n    }\n  }\n  return false;",
        "grade-6": {
            "execution": 0
        },
        "82": "int n = numbers.size();\n    assert(n > 0);\n    std::sort(numbers.begin(), numbers.end());\n    int i = 0;\n    int j = 1;\n    while (j < n) {\n        if (numbers[j] - numbers[i] <= threshold) {\n            return true;\n        }\n        ++i;\n        ++j;\n    }\n    return false;",
        "grade-82": {
            "execution": 1
        },
        "72": "for (int i = 0; i < numbers.size(); i++) {\n\t\tfor (int j = i + 1; j < numbers.size(); j++) {\n\t\t\tif (fabs(numbers[i] - numbers[j]) < threshold)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;",
        "grade-72": {
            "execution": 1
        },
        "66": "assert(threshold > 0);\n    assert(numbers.size() > 0);\n    std::sort(numbers.begin(), numbers.end());\n    float diff;\n    for (auto i = 0; i < numbers.size() - 1; i++) {\n        diff = numbers[i + 1] - numbers[i];\n        if (diff < threshold) {\n            return true;\n        }\n    }\n    return false;",
        "grade-66": {
            "execution": 1
        },
        "40": "assert(numbers.size() >= 2);\n    assert(threshold > 0);\n    std::sort(numbers.begin(), numbers.end());\n    for (int i = 0; i < numbers.size() - 1; i++) {\n        if (numbers[i+1] - numbers[i] < threshold)\n            return true;\n    }\n    return false;",
        "grade-40": {
            "execution": 1
        },
        "29": "for (int i = 0; i < numbers.size(); i++) {\n        for (int j = i+1; j < numbers.size(); j++) {\n            if (abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;",
        "grade-29": {
            "execution": 0
        },
        "177": "for (size_t i = 0; i < numbers.size(); i++) {\n    for (size_t j = i + 1; j < numbers.size(); j++) {\n      if (fabs(numbers[i] - numbers[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;",
        "grade-177": {
            "execution": 1
        },
        "24": "if (numbers.size() < 2) {\n        return false;\n    }\n    // sorts the numbers in increasing order\n    sort(numbers.begin(), numbers.end());\n    int i = 0;\n    while (i < numbers.size() - 1) {\n        if (abs(numbers[i] - numbers[i + 1]) < threshold) {\n            return true;\n        }\n        i++;\n    }\n    return false;",
        "grade-24": {
            "execution": 0
        },
        "191": "float diff;\n  for (int i = 0; i < numbers.size(); i++) {\n    for (int j = i + 1; j < numbers.size(); j++) {\n      diff = numbers[i] - numbers[j];\n      diff = diff < 0 ? -diff : diff;\n      if (diff < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;",
        "grade-191": {
            "execution": 1
        },
        "131": "assert(numbers.size() > 1);\n    for (int i = 0; i < numbers.size() - 1; i++) {\n        for (int j = i + 1; j < numbers.size(); j++) {\n            if (std::abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;",
        "grade-131": {
            "execution": 1
        },
        "8": "std::sort(numbers.begin(), numbers.end());\n    float distance = INT_MAX;\n    for (int i = 0; i < numbers.size() - 1; i++) {\n        if (numbers[i + 1] - numbers[i] < distance) {\n            distance = numbers[i + 1] - numbers[i];\n        }\n    }\n    return distance < threshold;",
        "grade-8": {
            "execution": 1
        },
        "7": "std::sort(numbers.begin(), numbers.end());\n    for (int i = 0; i < numbers.size() - 1; i++) {\n        if (numbers[i+1] - numbers[i] < threshold) {\n            return true;\n        }\n    }\n    return false;",
        "grade-7": {
            "execution": 1
        },
        "25": "int length = numbers.size();\n    for (int i = 0; i < length; i++) {\n        for (int j = i + 1; j < length; j++) {\n            if (std::abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;",
        "grade-25": {
            "execution": 1
        },
        "64": "if (numbers.size() < 2) {\n        return false;\n    }\n    std::sort(numbers.begin(), numbers.end());\n    for (int i = 0; i < numbers.size() - 1; i++) {\n        if (abs(numbers[i] - numbers[i + 1]) < threshold) {\n            return true;\n        }\n    }\n    return false;",
        "grade-64": {
            "execution": 0
        },
        "68": "float diff = std::numeric_limits<float>::max();\n  for (int i = 0; i < numbers.size(); i++) {\n    for (int j = i + 1; j < numbers.size(); j++) {\n      if (fabs(numbers[i] - numbers[j]) < diff) {\n        diff = fabs(numbers[i] - numbers[j]);\n      }\n    }\n  }\n  if (diff > threshold) {\n    return false;\n  }\n  return true;",
        "grade-68": {
            "execution": 1
        },
        "160": "for (size_t i = 0; i < numbers.size(); i++) {\n        for (size_t j = i + 1; j < numbers.size(); j++) {\n            if (std::abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;",
        "grade-160": {
            "execution": 1
        },
        "196": "// FIXME\n  return false;",
        "grade-196": {
            "execution": 0
        },
        "181": "assert(numbers.size()>=2);\n\n    int n = numbers.size();\n    std::sort(numbers.begin(), numbers.end());\n    float diff = 0;\n    for(int i=0; i<n-1; i++) {\n        if(numbers[i+1]-numbers[i] <= threshold) {\n            return true;\n        }\n    }\n    return false;",
        "grade-181": {
            "execution": 1
        },
        "58": "float max_difference = 0.0;\n\tfloat difference = 0.0;\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\tfor (int j = i+1; j < numbers.size(); j++) {\n\t\t\tdifference = numbers[i] - numbers[j];\n\t\t\tif (difference < 0) {\n\t\t\t\tdifference = -difference;\n\t\t\t}\n\t\t\tif (difference > max_difference) {\n\t\t\t\tmax_difference = difference;\n\t\t\t}\n\t\t}\n\t}\n\treturn max_difference < threshold;",
        "grade-58": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a tuple containing the result string and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\nstd::tuple<std::string, bool> reverse_delete(std::string s, std::string c) {\n",
        "snippet": [
            "    string n=\"\";\n    for (int i=0;i<s.length();i++)\n    if (find(c.begin(),c.end(),s[i])==c.end())\n        n=n+s[i]; \n    if (n.length()==0) return {n,\"True\"};\n    string w(n.rbegin(),n.rend());\n    if (w==n) return {n,\"True\"};\n    return {n,\"False\"};\n}\n"
        ],
        "simplified": "Task We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a tuple containing the result string and True/False for the check.",
        "task_id": "112",
        "164": "for(auto p : c)\n  {\n    s.erase(std::remove(s.begin(), s.end(), p), s.end());\n  }\n  std::string palindrome(s.rbegin(), s.rend());\n  return std::make_tuple(s, s == palindrome);",
        "grade-164": {
            "execution": 1
        },
        "28": "for(int i=0;i<c.size();i++){\n    std::string::iterator it;\n    while((it=find(s.begin(),s.end(),c[i]))!=s.end()){\n      s.erase(it);\n    }\n  }\n  bool ret=true;\n  for(int i=0;i<s.size()/2;i++){\n    if(s[i]!=s[s.size()-1-i]){\n      ret=false;\n      break;\n    }\n  }\n  return std::make_tuple(s,ret);",
        "grade-28": {
            "execution": 1
        },
        "6": "std::string s_new = \"\";\n    for (char ss : s) {\n        bool flag = true;\n        for (char cc : c) {\n            if (ss == cc) {\n                flag = false;\n                break;\n            }\n        }\n        if (flag) {\n            s_new += ss;\n        }\n    }\n    bool flag = true;\n    for (int i = 0; i < s_new.size() / 2; i++) {\n        if (s_new[i] != s_new[s_new.size() - i - 1]) {\n            flag = false;\n            break;\n        }\n    }\n    return std::make_tuple(s_new, flag);",
        "grade-6": {
            "execution": 1
        },
        "190": "std::string newString;\n    bool result;\n    for(int i = 0; i < s.length(); i++){\n        if(c.find(s[i]) == std::string::npos){\n            newString += s[i];\n        }\n    }\n    for(int i = 0; i < newString.length()/2; i++){\n        if(newString[i] != newString[newString.length()-1-i]){\n            result = false;\n            break;\n        }\n        else{\n            result = true;\n        }\n    }\n    return std::make_tuple(newString, result);",
        "grade-190": {
            "execution": 0
        },
        "71": "string res = \"\";\n\tfor (int i = 0; i < s.size(); i++) {\n\t\tif (c.find(s[i]) == string::npos) {\n\t\t\tres += s[i];\n\t\t}\n\t}\n\tstring a = res;\n\tstring b = res;\n\treverse(a.begin(), a.end());\n\tbool flag = (a == b) ? true : false;\n\treturn make_tuple(res, flag);",
        "grade-71": {
            "execution": 0
        },
        "62": "for(auto const& e : c)\n  {\n    // erase removes all characters matching 'e'\n    s.erase(std::remove(s.begin(), s.end(), e), s.end());\n  }\n  return {s, std::equal(s.begin(), s.begin() + s.size()/2, s.rbegin())};",
        "grade-62": {
            "execution": 1
        },
        "57": "int count = 0;\n  for(auto i = s.begin(); i != s.end();) {\n    for(auto j = c.begin(); j != c.end();) {\n      if(*i == *j) {\n        s.erase(i);\n        count++;\n      } else j++;\n    }\n    i++;\n  }\n  std::string reversed(s);\n  std::reverse(reversed.begin(), reversed.end());\n  bool check = false;\n  if(s == reversed) check = true;\n  return std::make_tuple(s, check);",
        "grade-57": {
            "execution": 0
        },
        "35": "bool check = false;\n    std::string result;\n    for(auto it = s.begin(); it != s.end(); it++){\n        if(c.find(*it) == std::string::npos){\n            result += *it;\n        }\n    }\n    if(result == std::string(result.rbegin(), result.rend())){\n        check = true;\n    }\n    return std::make_tuple(result, check);",
        "grade-35": {
            "execution": 1
        },
        "189": "for (int i = 0; i < c.size(); i++) {\n\t\tfor (int j = 0; j < s.size(); j++) {\n\t\t\tif (s[j] == c[i]) {\n\t\t\t\ts.erase(j, 1);\n\t\t\t\tj--;\n\t\t\t}\n\t\t}\n\t}\n\tbool flag = true;\n\tint j = s.size() - 1;\n\tfor (int i = 0; i < s.size() / 2; i++) {\n\t\tif (s[i] != s[j]) {\n\t\t\tflag = false;\n\t\t\tbreak;\n\t\t}\n\t\tj--;\n\t}\n\treturn std::make_tuple(s, flag);",
        "grade-189": {
            "execution": 1
        },
        "26": "for(int i=0;i<c.size();i++){\n        for(int j=0;j<s.size();j++){\n            if(s[j]==c[i]){\n                s.erase(j,1);\n                j--;\n            }\n        }\n    }\n    std::string s_rev = s;\n    std::reverse(s_rev.begin(),s_rev.end());\n    if(s_rev == s){\n        return std::make_tuple(s,true);\n    }\n    return std::make_tuple(s,false);",
        "grade-26": {
            "execution": 1
        },
        "174": "// \u0417\u0434\u0435\u0441\u044c \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0441\u0432\u043e\u0439 \u043a\u043e\u0434\n  return {\"\",false};",
        "grade-174": {
            "execution": 0
        },
        "140": "for(int i=0;i<c.size();i++){\n    for(int j=0;j<s.size();j++){\n      if(c[i]==s[j]){\n        s.erase(j,1);\n        j--;\n      }\n    }\n  }\n  bool flag=true;\n  for(int i=0;i<s.size()/2;i++){\n    if(s[i]!=s[s.size()-1-i]){\n      flag=false;\n      break;\n    }\n  }\n  return std::make_tuple(s,flag);",
        "grade-140": {
            "execution": 1
        },
        "22": "for(int i=0;i<c.size();i++){\n        for(int j=0;j<s.size();j++){\n            if(s[j]==c[i]){\n                s.erase(j,1);\n                j--;\n            }\n        }\n    }\n    if(s==string(s.rbegin(),s.rend()))\n        return {s,true};\n    else\n        return {s,false};",
        "grade-22": {
            "execution": 0
        },
        "152": "std::string str;\n    std::vector<int> v;\n    for(int i=0;i<s.size();i++){\n        for(int j=0;j<c.size();j++){\n            if(s[i]==c[j]){\n                v.push_back(i);\n            }\n        }\n    }\n    for(int i=0;i<s.size();i++){\n        if(i!=v[i])\n            str+=s[i];\n    }\n    std::string org_str=str;\n    std::reverse(str.begin(),str.end());\n    if(org_str==str)\n        return std::make_tuple(org_str,true);\n    else\n        return std::make_tuple(org_str,false);",
        "grade-152": {
            "execution": 0
        },
        "109": "std::vector<bool> isin(26,false);\n  std::string res;\n  for(auto& ch: c)\n    isin[ch-'a'] = true;\n  for(auto& ch: s)\n    if(!isin[ch-'a'])\n      res += ch;\n  std::reverse(res.begin(),res.end());\n  return std::make_tuple(res, res == s);",
        "grade-109": {
            "execution": 0
        },
        "8": "std::string temp = \"\";\n    for(int i = 0; i < s.length(); i++){\n        if(c.find(s[i]) == std::string::npos){\n            temp += s[i];\n        }\n    }\n    for(int i = 0; i < temp.length()/2; i++){\n        if(temp[i] != temp[temp.length()-1-i]){\n            return std::make_tuple(temp, false);\n        }\n    }\n    return std::make_tuple(temp, true);",
        "grade-8": {
            "execution": 1
        },
        "7": "std::string result=\"\";\n    for(auto x:s)\n        if(c.find(x)==std::string::npos) result.push_back(x);\n    bool check=result==std::string(result.rbegin(),result.rend());\n    return std::make_tuple(result,check);",
        "grade-7": {
            "execution": 1
        },
        "23": "std::string ns;\n  ns.reserve(s.size());\n  for (char ch : s) {\n    if (c.find(ch) == std::string::npos) {\n      ns.push_back(ch);\n    }\n  }\n  return {ns, ns == std::string(ns.rbegin(), ns.rend())};",
        "grade-23": {
            "execution": 1
        },
        "55": "std::string result = \"\";\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tint j = 0;\n\t\tfor (; j < c.length(); j++) {\n\t\t\tif (s[i] == c[j])\n\t\t\t\tbreak;\n\t\t}\n\t\tif (j == c.length())\n\t\t\tresult += s[i];\n\t}\n\tbool b = true;\n\tint i = 0, j = result.length() - 1;\n\twhile (i < j) {\n\t\tif (result[i] != result[j]) {\n\t\t\tb = false;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t\tj--;\n\t}\n\treturn std::make_tuple(result, b);",
        "grade-55": {
            "execution": 1
        },
        "59": "for(char ch: c)\n    {\n        s.erase(std::remove(s.begin(), s.end(), ch), s.end());\n    }\n    std::string s2 = s;\n    std::reverse(s2.begin(), s2.end());\n    return {s, s == s2};",
        "grade-59": {
            "execution": 1
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes a string as input which contains only square brackets.\n// The function should return True if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// is_nested('[[]]') \u279e True\n// is_nested('[]]]]]]][[[[[]') \u279e False\n// is_nested('[][]') \u279e False\n// is_nested('[]') \u279e False\n// is_nested('[[][]]') \u279e True\n// is_nested('[[]][[') \u279e True\nbool is_nested(std::string string) {\n",
        "snippet": [
            "    int count=0,maxcount=0;\n    for (int i=0;i<str.length();i++)\n    {\n        if (str[i]=='[') count+=1;\n        if (str[i]==']') count-=1;\n        if (count<0) count=0;\n        if (count>maxcount) maxcount=count;\n        if (count<=maxcount-2) return  true;\n    }\n    return false;\n}\n"
        ],
        "simplified": "Create a function that takes a string as input which contains only square brackets. The function should return True if and only if there is a valid subsequence of brackets where at least one bracket in the subsequence is nested.",
        "task_id": "132",
        "167": "int count = 0;\n  for(auto x : string){\n    if(x == '[')\n      count++;\n    else\n      count--;\n    if(count < 0)\n      return false;\n  }\n  return count == 0;",
        "grade-167": {
            "execution": 0
        },
        "28": "std::stack<char> s;\n    for(auto ch:string){\n        if(ch=='[')\n        s.push(ch);\n        else if(ch==']'){\n            if(s.empty()) return false;\n            else\n            s.pop();\n        }\n    }\n    return s.empty();",
        "grade-28": {
            "execution": 0
        },
        "6": "std::vector<char> v;\n    for(int i=0;i<string.length();i++){\n        if(string[i]=='['){\n            v.push_back(string[i]);\n        }\n        else if(string[i]==']'){\n            if(v.size()>0){\n                if(v[v.size()-1]=='['){\n                    v.pop_back();\n                }\n                else{\n                    return false;\n                }\n            }\n            else{\n                return false;\n            }\n        }\n    }\n    if(v.size()==0){\n        return true;\n    }\n    else{\n        return false;\n    }",
        "grade-6": {
            "execution": 0
        },
        "195": "int count = 0;\n  for(int i = 0; i < string.length(); i++) {\n    if(string[i] == '[') count++;\n    else count--;\n    if(count < 0) return false;\n  }\n  return true;",
        "grade-195": {
            "execution": 0
        },
        "70": "int count_closing = 0;\n\tint count_opening = 0;\n\tbool result = false;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '[') {\n\t\t\tcount_opening++;\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tcount_closing++;\n\t\t}\n\t}\n\tif (count_closing > count_opening) {\n\t\treturn result;\n\t}\n\telse {\n\t\treturn true;\n\t}",
        "grade-70": {
            "execution": 0
        },
        "62": "int n = string.length();\n    std::stack<char> s;\n    for(int i = 0; i < n; i++) {\n        if(string[i] == '[') {\n            s.push(string[i]);\n        }\n        else if(string[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else {\n                s.pop();\n            }\n        }\n    }\n    if(s.empty())\n        return true;\n    else \n        return false;",
        "grade-62": {
            "execution": 0
        },
        "57": "int count = 0;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '[') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;",
        "grade-57": {
            "execution": 0
        },
        "35": "std::stack<char> s;\n  for(int i=0;i<string.length();i++){\n    if(string[i]=='['){\n      s.push(string[i]);\n    }\n    else if(string[i]==']'){\n      if(s.empty()){\n        return false;\n      }\n      else{\n        s.pop();\n      }\n    }\n  }\n  if(s.empty()){\n    return true;\n  }\n  else{\n    return false;\n  }",
        "grade-35": {
            "execution": 0
        },
        "193": "int len = string.length();\n\tstd::stack<char> stack;\n\tfor (int i = 0; i < len; i++) {\n\t\tif (string[i] == '[') {\n\t\t\tstack.push(string[i]);\n\t\t}\n\t\telse if (!stack.empty() && string[i] == ']') {\n\t\t\tstack.pop();\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;",
        "grade-193": {
            "execution": 0
        },
        "26": "// Create a stack to hold characters\n\tstd::stack<char> brackets;\n\tint countOpen = 0;\n\tint countClose = 0;\n\tfor (char const& c : string) {\n\t\t// if the stack is empty, push the current character to the stack\n\t\tif (brackets.empty()) {\n\t\t\tbrackets.push(c);\n\t\t\t// if the stack is not empty, and the current character is the same as the top of the stack\n\t\t\t// pop the top off of the stack\n\t\t} else if (c == brackets.top()) {\n\t\t\tbrackets.pop();\n\t\t\t// otherwise push the current character to the stack\n\t\t} else {\n\t\t\tbrackets.push(c);\n\t\t}\n\t}\n\t// if the stack is empty, the string is nested\n\tif (brackets.empty()) {\n\t\treturn true;\n\t}\n\treturn false;",
        "grade-26": {
            "execution": 0
        },
        "178": "std::stack<char>stk;\n    bool flag = false;\n    for(auto s:string){\n        if(s == '[')\n            stk.push(s);\n        else{\n            if(stk.empty())\n                return false;\n            stk.pop();\n            flag = true;\n        }\n    }\n    return flag;",
        "grade-178": {
            "execution": 0
        },
        "142": "int count = 0;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tcount += (string[i] == '[') ? 1 : -1;\n\t\tif (count < 0) return false;\n\t}\n\treturn count == 0;",
        "grade-142": {
            "execution": 0
        },
        "22": "std::stack<char> st;\n\tfor(int i=0;i<string.length();i++){\n\t\tif(string[i]=='[')\n\t\t\tst.push(string[i]);\n\t\telse if(string[i]==']'){\n\t\t\tif(st.size()==0)\n\t\t\t\treturn false;\n\t\t\tst.pop();\n\t\t}\n\t}\n\tif(st.size()>0)\n\t\treturn false;\n\treturn true;",
        "grade-22": {
            "execution": 0
        },
        "155": "int count = 0;\n\t\tfor (int i = 0; i < string.length(); i++) {\n\t\t\tif (string[i] == '[')\n\t\t\t\tcount++;\n\t\t\telse\n\t\t\t\tcount--;\n\t\t\tif (count < 0)\n\t\t\t\treturn false;\n\t\t}\n\t\treturn count == 0;",
        "grade-155": {
            "execution": 0
        },
        "108": "int count = 0;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '[') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn count > 0 ? false : true;",
        "grade-108": {
            "execution": 0
        },
        "8": "int count=0;\n    for(int i=0;i<string.length();i++){\n        if(string[i]=='['){\n            count++;\n        }\n        else{\n            count--;\n        }\n        if(count<0){\n            return false;\n        }\n    }\n    return true;",
        "grade-8": {
            "execution": 0
        },
        "7": "if (string == \"\") return false;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '[' || string[i] == ']') {\n\t\t\tif (string[i] == ']' && i == 0) return false;\n\t\t\tif (string[i] == ']' && string[i - 1] == '[') return true;\n\t\t}\n\t}\n\treturn false;",
        "grade-7": {
            "execution": 0
        },
        "23": "stack<char> s;\n\tfor(int i=0;i<string.length();i++){\n\t\tif(string[i]=='['){\n\t\t\ts.push(string[i]);\n\t\t}\n\t\telse if(string[i]==']'){\n\t\t\tif(s.empty()){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\ts.pop();\n\t\t}\n\t}\n\treturn s.empty();",
        "grade-23": {
            "execution": 0
        },
        "55": "int valid = 0;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '[') {\n\t\t\tvalid++;\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tvalid--;\n\t\t}\n\t\tif (valid < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn valid != 0 ? false : true;",
        "grade-55": {
            "execution": 0
        },
        "59": "std::stack<char> brackets;\n  for (char bracket : string) {\n    if (bracket == '[') {\n      brackets.push(bracket);\n    } else if (bracket == ']') {\n      if (brackets.empty()) {\n        return false;\n      }\n      brackets.pop();\n    }\n  }\n  return brackets.empty();",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes a list l and returns a list l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nstd::vector<long> sort_even(std::vector<long> l) {\n",
        "snippet": [
            "    vector<float> out={};\n    vector<float> even={};\n    for (int i=0;i*2<l.size();i++)\n        even.push_back(l[i*2]);\n    sort(even.begin(),even.end());\n    for (int i=0;i<l.size();i++)\n    {\n        if (i%2==0) out.push_back(even[i/2]);\n        if (i%2==1) out.push_back(l[i]);\n    }\n    return out;\n}\n"
        ],
        "simplified": "This function takes a list l and returns a list l' such that l' is identical to l in the odd indicies, while its values at the even indicies are equal to the values of the even indicies of l, but sorted.",
        "task_id": "37",
        "164": "// We use curr_index to keep track of the current index while we loop through the vector.\n    int curr_index = 0;\n    // We use even_index to keep track of the current even index while we loop through the vector.\n    int even_index = 0;\n    // We use l_prime to store the output vector.\n    std::vector<long> l_prime;\n    // We loop through the entire input vector.\n    while (curr_index < l.size()) {\n        // If the index is odd, we just add the value at that index to l_prime.\n        if (curr_index % 2 != 0) {\n            l_prime.push_back(l[curr_index]);\n        }\n        // If the index is even, we store the value at that index in the even_index variable.\n        else {\n            even_index = curr_index;\n        }\n        // We then increment curr_index by 1.\n        curr_index++;\n    }\n    // We then sort the even indices of l.\n    std::sort(l.begin(), l.begin() + even_index + 1);\n    // We then loop through the entire input vector.\n    curr_index = 0;\n    while (curr_index < l.size()) {\n        // If the index is even, we add the value at that index to l_prime.\n        if (curr_index % 2 == 0) {\n            l_prime.push_back(l[curr_index]);\n        }\n        // We then increment curr_index by 1.\n        curr_index++;\n    }\n    // We then return l_prime.\n    return l_prime;",
        "grade-164": {
            "execution": 0
        },
        "28": "int i;\n\tint n = l.size();\n\tvector<long>res;\n\tif(n == 0)\n\t{\n\t\treturn res;\n\t}\n\telse\n\t{\n\t\tres.push_back(l[0]);\n\t\tif(n == 1)\n\t\t{\n\t\t\treturn res;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsort(l.begin()+1,l.end());\n\t\t\tfor(i=1;i<n;i++)\n\t\t\t{\n\t\t\t\tres.push_back(l[i]);\n\t\t\t\tif(i != n-1)\n\t\t\t\t{\n\t\t\t\t\tres.push_back(l[++i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn res;\n\t\t}\n\t}",
        "grade-28": {
            "execution": 0
        },
        "6": "std::vector<long> evens;\n\tfor (int i = 0; i < l.size(); i++) {\n\t\tif (i % 2 == 0) {\n\t\t\tevens.push_back(l[i]);\n\t\t}\n\t}\n\tstd::sort(evens.begin(), evens.end());\n\tstd::vector<long> res;\n\tint k = 0;\n\tfor (int i = 0; i < l.size(); i++) {\n\t\tif (i % 2 == 0) {\n\t\t\tres.push_back(evens[k]);\n\t\t\tk++;\n\t\t}\n\t\telse {\n\t\t\tres.push_back(l[i]);\n\t\t}\n\t}\n\treturn res;",
        "grade-6": {
            "execution": 1
        },
        "190": "if (l.size() % 2 == 0) {\n        //even number of elements\n        return l;\n    }\n    else {\n        //odd number of elements\n        std::vector<long> even_indicies;\n        std::vector<long> odd_indicies;\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                even_indicies.push_back(l[i]);\n            }\n            else {\n                odd_indicies.push_back(l[i]);\n            }\n        }\n        std::sort(even_indicies.begin(), even_indicies.end());\n        l.clear();\n        for (int i = 0; i < even_indicies.size(); i++) {\n            l.push_back(even_indicies[i]);\n            l.push_back(odd_indicies[i]);\n        }\n        l.push_back(odd_indicies[odd_indicies.size() - 1]);\n        return l;\n    }",
        "grade-190": {
            "execution": 0
        },
        "70": "std::vector<long> sort_vec;\n    for (int i = 0; i < l.size(); i+=2) {\n        sort_vec.push_back(l[i]);\n    }\n    std::sort(sort_vec.begin(), sort_vec.end());\n    int j = 0;\n    for (int i = 0; i < l.size(); i+=2) {\n        l[i] = sort_vec[j];\n        j++;\n    }\n    return l;",
        "grade-70": {
            "execution": 1
        },
        "62": "// Replace this with your solution\n    vector<long> res;\n    vector<long> even;\n    vector<long> odd;\n    vector<long>::iterator it;\n    for(it = l.begin(); it != l.end(); it++) {\n        if(*it % 2 == 0) {\n            even.push_back(*it);\n        } else {\n            odd.push_back(*it);\n        }\n    }\n    sort(even.begin(), even.end());\n    for(int i = 0; i < odd.size(); i++) {\n        res.push_back(odd[i]);\n        if(i != even.size()) {\n            res.push_back(even[i]);\n        }\n    }\n    return res;",
        "grade-62": {
            "execution": 0
        },
        "57": "std::vector<long> l1;\n    std::vector<long> l2;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 2 == 0) {\n            l1.push_back(l[i]);\n        } else {\n            l2.push_back(l[i]);\n        }\n    }\n    std::sort(l2.begin(), l2.end());\n    for (int i = 0; i < l1.size(); i++) {\n        l1.insert(l1.begin() + (2 * i + 1), l2[i]);\n    }\n    return l1;",
        "grade-57": {
            "execution": 0
        },
        "35": "// your code here\n\tstd::vector<long> x(l.size(),0);\n\tint j=0;\n\tfor(int i=0;i<l.size();i++)\n\t{\n\t\tif(i%2==0)\n\t\t{\n\t\t\tx[i]=l[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tx[i]=l[i];\n\t\t\tj++;\n\t\t}\n\t}\n\tstd::sort(x.begin()+1,x.begin()+j+1);\n\treturn x;",
        "grade-35": {
            "execution": 0
        },
        "189": "std::vector<long> evenList;\n\tstd::vector<long> oddList;\n\tstd::vector<long> result;\n\tfor (unsigned int i = 0; i < l.size(); i++) {\n\t\tif (i % 2 == 0) {\n\t\t\toddList.push_back(l[i]);\n\t\t}\n\t\telse {\n\t\t\tevenList.push_back(l[i]);\n\t\t}\n\t}\n\tstd::sort(evenList.begin(), evenList.end());\n\tfor (unsigned int i = 0; i < oddList.size(); i++) {\n\t\tresult.push_back(oddList[i]);\n\t\tresult.push_back(evenList[i]);\n\t}\n\treturn result;",
        "grade-189": {
            "execution": 0
        },
        "26": "std::vector<long> v;\n  for (int i = 0; i < l.size(); i++) {\n    if (i % 2 == 0) {\n      v.push_back(l[i]);\n    } else {\n      v.push_back(l[i]);\n      std::sort(v.begin() + i - 1, v.end());\n    }\n  }\n  return v;",
        "grade-26": {
            "execution": 0
        },
        "174": "std::vector<long> out;\n    for (int i = 0; i < l.size(); i++){\n        if (i % 2 == 0){\n            out.push_back(l[i]);\n        } else {\n            out.push_back(l[i]);\n            std::sort(out.begin() + (i-1), out.end());\n        }\n    }\n    return out;",
        "grade-174": {
            "execution": 0
        },
        "140": "// Write your code here\n  if(l.size()==0)\n    return l;\n  if(l.size()==1)\n    return l;\n  if(l.size()==2)\n  {\n    if(l[0]>l[1])\n    {\n      long temp=l[0];\n      l[0]=l[1];\n      l[1]=temp;\n    }\n    return l;\n  }\n  for(int i=0;i<l.size();i+=2)\n  {\n    for(int j=i+2;j<l.size();j+=2)\n    {\n      if(l[i]>l[j])\n      {\n        long temp=l[i];\n        l[i]=l[j];\n        l[j]=temp;\n      }\n    }\n  }\n  return l;",
        "grade-140": {
            "execution": 1
        },
        "22": "std::vector<long> even_indices;\n    std::vector<long> odd_indices;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 2 == 0) {\n            odd_indices.push_back(l[i]);\n        } else {\n            even_indices.push_back(l[i]);\n        }\n    }\n    std::sort(even_indices.begin(), even_indices.end());\n    std::vector<long> ans;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 2 == 0) {\n            ans.push_back(odd_indices[i / 2]);\n        } else {\n            ans.push_back(even_indices[i / 2]);\n        }\n    }\n    return ans;",
        "grade-22": {
            "execution": 0
        },
        "152": "std::vector<long> li;\n  std::vector<long> lo;\n  for (int i = 0; i < l.size(); i++) {\n    if (i % 2 == 0) {\n      li.push_back(l[i]);\n    } else {\n      lo.push_back(l[i]);\n    }\n  }\n  std::sort(lo.begin(), lo.end());\n  for (int i = 0; i < l.size(); i++) {\n    if (i % 2 == 0) {\n      l[i] = li[i / 2];\n    } else {\n      l[i] = lo[i / 2];\n    }\n  }\n  return l;",
        "grade-152": {
            "execution": 0
        },
        "109": "for (int i = 0; i < l.size(); i++) {\n        for (int j = i; j < l.size(); j++) {\n            if (l[i] < l[j]) {\n                long temp = l[i];\n                l[i] = l[j];\n                l[j] = temp;\n            }\n        }\n    }\n    return l;",
        "grade-109": {
            "execution": 0
        },
        "8": "for (int i = 0; i < l.size(); i++) {\n        for (int j = i + 1; j < l.size(); j++) {\n            if (l[i] > l[j]) {\n                long aux = l[i];\n                l[i] = l[j];\n                l[j] = aux;\n            }\n        }\n    }\n    std::vector<long> l2;\n    int i = 0;\n    while (i < l.size()) {\n        if (i % 2 == 0) {\n            l2.push_back(l[i]);\n        } else {\n            l2.push_back(l[l.size() - 1 - i]);\n        }\n        i++;\n    }\n    return l2;",
        "grade-8": {
            "execution": 0
        },
        "7": "std::vector<long> res;\n\tfor (int i = 0; i < l.size(); i++) {\n\t\tif (i % 2 == 0) {\n\t\t\tres.push_back(l[i]);\n\t\t}\n\t\telse {\n\t\t\tstd::vector<long> odd_list;\n\t\t\twhile (i < l.size() && i % 2 != 0) {\n\t\t\t\todd_list.push_back(l[i]);\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tstd::sort(odd_list.begin(), odd_list.end());\n\t\t\tfor (int j = 0; j < odd_list.size(); j++) {\n\t\t\t\tres.push_back(odd_list[j]);\n\t\t\t}\n\t\t\ti--;\n\t\t}\n\t}\n\treturn res;",
        "grade-7": {
            "execution": 0
        },
        "23": "std::vector<long> v;\n    int j = 0;\n    int k = 0;\n    if (l.size()%2 == 0)\n    {\n    for (int i = 0; i < l.size(); i++)\n    {\n        if (i%2 == 0)\n        {\n            v.push_back(l[i]);\n        }\n        else\n        {\n            for (int j = 0; j < (l.size()/2); j++)\n            {\n                if (l[i] == l[j*2+1])\n                {\n                    k = l[j*2+1];\n                    l[j*2+1] = l[i];\n                    l[i] = k;\n                }\n            }\n            v.push_back(l[i]);\n        }\n    }\n    }\n    else\n    {\n        for (int i = 0; i < l.size(); i++)\n        {\n            if (i%2 == 0)\n            {\n                v.push_back(l[i]);\n            }\n            else\n            {\n                for (int j = 0; j < (l.size()/2); j++)\n                {\n                    if (l[i] == l[j*2+1])\n                    {\n                        k = l[j*2+1];\n                        l[j*2+1] = l[i];\n                        l[i] = k;\n                    }\n                }\n                v.push_back(l[i]);\n            }\n        }\n    }\n    return v;",
        "grade-23": {
            "execution": 0
        },
        "55": "// your code goes here\n\treturn l;",
        "grade-55": {
            "execution": 0
        },
        "59": "int n = l.size();\n    if (n % 2 == 0)\n        n -= 1;\n    for (int i = 0; i < n; i += 2) {\n        for (int j = i + 2; j < n; j += 2) {\n            if (l[i] > l[j]) {\n                long aux = l[i];\n                l[i] = l[j];\n                l[j] = aux;\n            }\n        }\n    }\n    return l;",
        "grade-59": {
            "execution": 1
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279e True\n// any_int(3, 2, 2) \u279e False\n// any_int(3, -2, 1) \u279e True\n// any_int(3.6, -2.2, 2) \u279e False\nbool any_int(float x, float y, float z) {\n",
        "snippet": [
            "    if (round(a)!=a) return false;\n    if (round(b)!=b) return false;\n    if (round(c)!=c) return false;\n    if (a+b==c or a+c==b or b+c==a) return true;\n    return false;\n}\n"
        ],
        "simplified": "Create a function that takes 3 numbers. Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers. Returns false in any other cases.",
        "task_id": "92",
        "180": "assert(x==int(x));\n  assert(y==int(y));\n  assert(z==int(z));\n  \n  if (x + y == z) {\n    return true;\n  }\n  else if (x + z == y) {\n    return true;\n  }\n  else if (y + z == x) {\n    return true;\n  }\n  else {\n    return false;\n  }",
        "grade-180": {
            "execution": 0
        },
        "30": "if (((x + y) == z || (x + z) == y || (y + z) == x) && (std::floor(x) == x) && (std::floor(y) == y) && (std::floor(z) == z))\n\t\treturn true;\n\telse\n\t\treturn false;",
        "grade-30": {
            "execution": 0
        },
        "7": "return ((x + y == z) || (x + z == y) || (y + z == x));",
        "grade-7": {
            "execution": 0
        },
        "72": "int a, b, c;\n  a = x;\n  b = y;\n  c = z;\n  return (a == b + c || b == a + c || c == a + b);",
        "grade-72": {
            "execution": 0
        },
        "64": "int a = x;\n  int b = y;\n  int c = z;\n  int sum = a + b;\n  if ((sum == c) || (sum == a) || (sum == b)) {\n    return true;\n  }\n  else {\n    return false;\n  }",
        "grade-64": {
            "execution": 0
        },
        "59": "return (x + y == z || x + z == y || y + z == x);",
        "grade-59": {
            "execution": 0
        },
        "37": "if (std::ceil(x) == x && std::ceil(y) == y && std::ceil(z) == z) {\n\t\tif (std::ceil(x) == std::ceil(y) + std::ceil(z))\n\t\t\treturn true;\n\t\telse if (std::ceil(y) == std::ceil(x) + std::ceil(z))\n\t\t\treturn true;\n\t\telse if (std::ceil(z) == std::ceil(x) + std::ceil(y))\n\t\t\treturn true;\n\t\telse\n\t\t\treturn false;\n\t}\n\telse\n\t\treturn false;",
        "grade-37": {
            "execution": 0
        },
        "28": "int a, b, c;\n\ta = x;\n\tb = y;\n\tc = z;\n\tif (a + b == c || a + c == b || b + c == a) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}",
        "grade-28": {
            "execution": 0
        },
        "190": "if(int(x) == int(y) + int(z) || int(y) == int(x) + int(z) || int(z) == int(x) + int(y)){\n        return true;\n    }else{\n        return false;\n    }",
        "grade-190": {
            "execution": 0
        },
        "153": "if((x == y + z) || (y == x + z) || (z == x + y))\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }",
        "grade-153": {
            "execution": 0
        },
        "24": "assert(is_integral<float>::value == true);\n    if(is_integral<float>::value == true)\n    {\n        if((x == y + z)||(y == x + z)||(z == x + y))\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }",
        "grade-24": {
            "execution": 0
        },
        "167": "// return (fmod(x,1)==0 && fmod(y,1)==0 && fmod(z,1)==0) && (x==y+z || y==x+z || z==x+y);\n  return x==floor(x) && y==floor(y) && z==floor(z) && (x==y+z || y==x+z || z==x+y);",
        "grade-167": {
            "execution": 0
        },
        "117": "return (int)x + (int)y == (int)z || (int)x + (int)z == (int)y || (int)y + (int)z == (int)x;",
        "grade-117": {
            "execution": 0
        },
        "9": "if (fmod(x, 1) != 0 && fmod(y, 1) != 0 && fmod(z, 1) != 0)\n        return false;\n    if (x == y + z || y == x + z || z == x + y)\n        return true;\n    return false;",
        "grade-9": {
            "execution": 0
        },
        "8": "if (x == y + z || y == x + z || z == x + y)\n    return true;\n  else\n    return false;",
        "grade-8": {
            "execution": 0
        },
        "25": "float sum = x + y + z;\n\tif (x == sum || y == sum || z == sum) {\n\t\treturn true;\n\t}\n\telse return false;",
        "grade-25": {
            "execution": 0
        },
        "57": "return (floor(x) + floor(y) == floor(z) || floor(x) + floor(z) == floor(y) || floor(y) + floor(z) == floor(x));",
        "grade-57": {
            "execution": 0
        },
        "61": "if(floor(x)==x && floor(y)==y && floor(z)==z) {\n\t\tif(x+y==z || x+z==y || y+z==x) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;",
        "grade-61": {
            "execution": 0
        },
        "142": "int ix = (int)x;\n\tint iy = (int)y;\n\tint iz = (int)z;\n\tif (x == ix && y == iy && z == iz) {\n\t\tif (ix == iy + iz || iy == ix + iz || iz == ix + iy) {\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n\telse {\n\t\treturn false;\n\t}",
        "grade-142": {
            "execution": 0
        },
        "170": "if(!(int(x)==x&&int(y)==y&&int(z)==z)){\n        return false;\n    }\n    else if(int(x)==(int(y)+int(z))||int(y)==(int(x)+int(z))||int(z)==(int(x)+int(y))){\n        return true;\n    }\n    else{\n        return false;\n    }",
        "grade-170": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nstd::vector<long> sort_array(std::vector<long> arr) {\n",
        "snippet": [
            "    vector<int> bin={};\n    int m;\n\n    for (int i=0;i<arr.size();i++)\n    {\n        int b=0,n=abs(arr[i]);\n        while (n>0)\n        {\n            b+=n%2;n=n/2;\n        }\n        bin.push_back(b);\n    }\n    for (int i=0;i<arr.size();i++)\n    for (int j=1;j<arr.size();j++)\n    if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))\n    {\n        m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;\n        m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;\n    }\n    return arr;\n}\n"
        ],
        "simplified": "In this Kata, you have to sort an array of non-negative integers according to number of ones in their binary representation in ascending order. For similar number of ones, sort based on decimal value. It must be implemented like this:",
        "task_id": "116",
        "164": "std::vector<std::pair<int, long>> pairs;\n  for (auto it = arr.begin(); it != arr.end(); ++it) {\n    int n1s = 0;\n    long n = *it;\n    while (n > 0) {\n      n1s += n & 1;\n      n >>= 1;\n    }\n    pairs.push_back(std::make_pair(n1s, *it));\n  }\n  std::sort(pairs.begin(), pairs.end());\n  std::vector<long> result;\n  for (auto it = pairs.begin(); it != pairs.end(); ++it) {\n    result.push_back(it->second);\n  }\n  return result;",
        "grade-164": {
            "execution": 0
        },
        "28": "// write your code here\n  std::vector<long> sorted;\n  std::vector<long> order;\n  std::vector<long> tmp;\n  int i = 0;\n  while (i < arr.size()) {\n    long x = arr[i];\n    while (x != 0) {\n      order.push_back(x % 2);\n      x /= 2;\n    }\n    i++;\n  }\n  i = 0;\n  while (i < arr.size()) {\n    long x = arr[i];\n    while (x != 0) {\n      tmp.push_back(x % 2);\n      x /= 2;\n    }\n    i++;\n  }\n  i = 0;\n  while (i < arr.size()) {\n    long counter = 0;\n    while (tmp[i] != 0) {\n      if (tmp[i] == order[i])\n        counter++;\n      else\n        break;\n      i++;\n    }\n    if (counter == tmp.size())\n      sorted.push_back(arr[i]);\n    else\n      i++;\n  }\n  return sorted;",
        "grade-28": {
            "execution": 0
        },
        "6": "std::vector<std::vector<long>> temp;\n    std::vector<long> res;\n    for (int i = 0; i < arr.size(); i++) {\n        temp.push_back({arr[i], ones(arr[i])});\n    }\n    sort(temp.begin(), temp.end(), [](std::vector<long> v1, std::vector<long> v2) {\n        if (v1[1] == v2[1])\n            return v1[0] < v2[0];\n        return v1[1] < v2[1];\n    });\n    for (int i = 0; i < temp.size(); i++) {\n        res.push_back(temp[i][0]);\n    }\n    return res;",
        "grade-6": {
            "execution": 0
        },
        "190": "//  iterate through vector and add a member to each value with the number of 1's in its binary representation.\n    //  i.e. 0b10101 --> std::make_pair(long, int) <5,3>\n    //  sort vector based on number of 1's and then on value.\n    std::vector<std::pair<long, int>> converted;\n    std::vector<long> sorted;\n    for (auto x : arr) {\n        int ones = 0;\n        int value = x;\n        while (value > 0) {\n            if (value % 2 == 1)\n                ones++;\n            value /= 2;\n        }\n        converted.push_back(std::make_pair(x, ones));\n    }\n    std::sort(converted.begin(), converted.end(),\n              [](std::pair<long, int>& a, std::pair<long, int>& b) {\n                  if (a.second != b.second)\n                      return a.second < b.second;\n                  else\n                      return a.first < b.first;\n              });\n    for (auto x : converted) {\n        sorted.push_back(x.first);\n    }\n    return sorted;",
        "grade-190": {
            "execution": 0
        },
        "70": "std::sort(arr.begin(), arr.end(), [](long a, long b) {\n    if (__builtin_popcount(a) == __builtin_popcount(b))\n      return a < b;\n    return __builtin_popcount(a) < __builtin_popcount(b);\n  });\n  return arr;",
        "grade-70": {
            "execution": 0
        },
        "62": "std::vector<long> sorted, binary_sorted;\n  // sort\n  std::sort(arr.begin(), arr.end());\n  // loop through\n  for (long i = 0; i < arr.size(); i++) {\n    if (arr[i] >= 0) {\n      std::string binary = std::bitset<32>(arr[i]).to_string();\n      binary_sorted.push_back(count(binary.begin(), binary.end(), '1'));\n    }\n  }\n  // sort based on binary\n  std::sort(binary_sorted.begin(), binary_sorted.end());\n  for (int i = 0; i < binary_sorted.size(); i++) {\n    for (int j = 0; j < arr.size(); j++) {\n      std::string binary = std::bitset<32>(arr[j]).to_string();\n      if (binary_sorted[i] == count(binary.begin(), binary.end(), '1')) {\n        sorted.push_back(arr[j]);\n        arr[j] = -111111;\n        break;\n      }\n    }\n  }\n  return sorted;",
        "grade-62": {
            "execution": 0
        },
        "57": "if (arr.size() == 0) return arr;\n    std::vector<std::vector<long>> ones;\n    for (long i = 0; i < arr.size(); i++) {\n        long num = arr[i];\n        long count = 0;\n        while (num > 0) {\n            count += num % 2;\n            num /= 2;\n        }\n        if (ones.size() <= count) ones.resize(count + 1);\n        ones[count].push_back(arr[i]);\n    }\n    arr.clear();\n    for (long i = 0; i < ones.size(); i++) {\n        std::sort(ones[i].begin(), ones[i].end());\n        arr.insert(arr.end(), ones[i].begin(), ones[i].end());\n    }\n    return arr;",
        "grade-57": {
            "execution": 0
        },
        "35": "std::vector<long> sorted;\n  for (int i = 0; i < arr.size(); i++) {\n    sorted.push_back(arr[i]);\n  }\n  std::sort(sorted.begin(), sorted.end(),\n            [](const long &a, const long &b) {\n              if (std::bitset<64>(a).count() == std::bitset<64>(b).count()) {\n                return a < b;\n              }\n              return std::bitset<64>(a).count() < std::bitset<64>(b).count();\n            });\n  return sorted;",
        "grade-35": {
            "execution": 0
        },
        "189": "struct Item {\n        long val;\n        int ones;\n    };\n    std::vector<Item> items;\n    for (auto it = arr.begin(); it != arr.end(); ++it) {\n        int num = *it;\n        int count = 0;\n        while (num > 0) {\n            count += num % 2;\n            num /= 2;\n        }\n        items.push_back({*it, count});\n    }\n    std::sort(items.begin(), items.end(), [](Item a, Item b) {\n        if (a.ones < b.ones) {\n            return true;\n        } else if (a.ones == b.ones) {\n            return a.val < b.val;\n        } else {\n            return false;\n        }\n    });\n    std::vector<long> res;\n    for (auto it = items.begin(); it != items.end(); ++it) {\n        res.push_back(it->val);\n    }\n    return res;",
        "grade-189": {
            "execution": 0
        },
        "26": "std::vector<long> output;\n    std::map<long, long> mapOnes;\n    for (long i : arr) {\n        long countOnes = 0;\n        while (i > 0) {\n            countOnes += i % 2;\n            i /= 2;\n        }\n        mapOnes[countOnes] = i;\n    }\n    for (auto pair : mapOnes) {\n        output.push_back(pair.second);\n    }\n    return output;",
        "grade-26": {
            "execution": 0
        },
        "174": "for (int i = 0; i < arr.size(); i++) {\n    for (int j = i + 1; j < arr.size(); j++) {\n      int count1 = 0;\n      int count2 = 0;\n      long num1 = arr[i];\n      long num2 = arr[j];\n      while (num1 != 0) {\n        count1++;\n        num1 /= 2;\n      }\n      while (num2 != 0) {\n        count2++;\n        num2 /= 2;\n      }\n      if (count1 < count2) {\n        long tmp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = tmp;\n      } else if (count1 == count2) {\n        if (arr[i] > arr[j]) {\n          long tmp = arr[i];\n          arr[i] = arr[j];\n          arr[j] = tmp;\n        }\n      }\n    }\n  }\n  return arr;",
        "grade-174": {
            "execution": 0
        },
        "140": "std::map<int, std::vector<long>> map;\n  std::vector<long> ret;\n  for (auto num : arr) {\n    int ones = __builtin_popcountl(num);\n    if (map.find(ones) == map.end()) {\n      map[ones] = std::vector<long>();\n    }\n    map[ones].push_back(num);\n  }\n  for (auto it = map.begin(); it != map.end(); ++it) {\n    std::sort(it->second.begin(), it->second.end());\n    ret.insert(ret.end(), it->second.begin(), it->second.end());\n  }\n  return ret;",
        "grade-140": {
            "execution": 0
        },
        "22": "std::sort(arr.begin(), arr.end(), [](long& a, long& b) {\n    int c1 = __builtin_popcountl(a);\n    int c2 = __builtin_popcountl(b);\n    if (c1 != c2) {\n      return c1 < c2;\n    }\n    return a < b;\n  });\n  return arr;",
        "grade-22": {
            "execution": 0
        },
        "152": "for (int i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size(); j++) {\n            int x = arr[i];\n            int y = arr[j];\n            int d = x - y;\n            if (d > 0) {\n                arr[i] = y;\n                arr[j] = x;\n            }\n        }\n    }\n    return arr;",
        "grade-152": {
            "execution": 0
        },
        "109": "// your code here\n  std::vector<long> sort_arr;\n  int len = arr.size();\n  for (int i = 0; i < len; i++) {\n    int count = 0;\n    int num = arr[i];\n    while (num > 0) {\n      if (num % 2 == 1) {\n        count++;\n      }\n      num = num / 2;\n    }\n    sort_arr.push_back(count);\n  }\n  std::sort(sort_arr.begin(), sort_arr.end());\n  return sort_arr;",
        "grade-109": {
            "execution": 0
        },
        "8": "// your code here\n  return arr;",
        "grade-8": {
            "execution": 0
        },
        "7": "std::vector<std::pair<int, long>> v;\n  for (auto x : arr) {\n    long temp = x;\n    int count = 0;\n    while (temp > 0) {\n      if (temp % 2 == 1) {\n        count++;\n      }\n      temp /= 2;\n    }\n    v.push_back(std::make_pair(count, x));\n  }\n  std::sort(v.begin(), v.end());\n  std::vector<long> ans;\n  for (auto x : v) {\n    ans.push_back(x.second);\n  }\n  return ans;",
        "grade-7": {
            "execution": 0
        },
        "23": "for (size_t i = 0; i < arr.size(); i++) {\n        for (size_t j = i + 1; j < arr.size(); j++) {\n            long count1 = 0;\n            long count2 = 0;\n            for (size_t k = 0; k < 8; k++) {\n                count1 += (arr[i] >> k) & 1;\n                count2 += (arr[j] >> k) & 1;\n            }\n            if (count1 == count2) {\n                if (arr[i] > arr[j]) {\n                    std::swap(arr[i], arr[j]);\n                }\n            } else if (count1 > count2) {\n                std::swap(arr[i], arr[j]);\n            }\n        }\n    }\n    return arr;",
        "grade-23": {
            "execution": 0
        },
        "55": "//your code here\n  std::vector<long>::iterator it;\n  std::vector<long> res;\n  std::vector<long> binarr;\n  std::vector<long> sorted = arr;\n  std::cout << \"Initial array: \";\n  for (it = arr.begin(); it != arr.end(); it++) {\n    std::cout << *it << \" \";\n  }\n  std::cout << std::endl;\n  std::sort(sorted.begin(), sorted.end());\n  std::cout << \"Sorted array: \";\n  for (it = sorted.begin(); it != sorted.end(); it++) {\n    std::cout << *it << \" \";\n  }\n  std::cout << std::endl;\n  for (it = sorted.begin(); it != sorted.end(); it++) {\n    binarr.push_back(std::bitset<8>(*it).count());\n  }\n  std::cout << \"number of ones: \";\n  for (it = binarr.begin(); it != binarr.end(); it++) {\n    std::cout << *it << \" \";\n  }\n  std::cout << std::endl;\n  for (it = binarr.begin(); it != binarr.end(); it++) {\n    res.push_back(sorted[it - binarr.begin()]);\n  }\n  std::cout << \"sorted array: \";\n  for (it = res.begin(); it != res.end(); it++) {\n    std::cout << *it << \" \";\n  }\n  std::cout << std::endl;\n  return res;",
        "grade-55": {
            "execution": 0
        },
        "59": "if (arr.size() <= 1) {\n    return arr;\n  }\n  std::sort(arr.begin(), arr.end(), [](const long& a, const long& b) {\n    int num_ones_a = std::bitset<32>(a).count();\n    int num_ones_b = std::bitset<32>(b).count();\n    if (num_ones_a != num_ones_b) {\n      return num_ones_a < num_ones_b;\n    }\n    return a < b;\n  });\n  return arr;",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long> get_positive(std::vector<long> l) {\n",
        "snippet": [
            "    vector<float> out={};\n    for (int i=0;i<l.size();i++)\n        if (l[i]>0) out.push_back(l[i]);\n    return out;\n}\n"
        ],
        "simplified": "Return only positive numbers in the list.",
        "task_id": "30",
        "186": "// start writing your code here\n    std::vector<long> result;\n    for(auto elem : l){\n        if(elem > 0){\n            result.push_back(elem);\n        }\n    }\n    return result;",
        "grade-186": {
            "execution": 1
        },
        "28": "std::vector<long> result;\n    for (long i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n            result.push_back(l[i]);\n        }\n    }\n    return result;",
        "grade-28": {
            "execution": 1
        },
        "6": "std::vector<long> result;\n  for (long n : l) {\n    if (n > 0) {\n      result.push_back(n);\n    }\n  }\n  return result;",
        "grade-6": {
            "execution": 1
        },
        "76": "std::vector<long> new_l;\n  for (auto &x : l) {\n    if (x > 0) {\n      new_l.push_back(x);\n    }\n  }\n  return new_l;",
        "grade-76": {
            "execution": 1
        },
        "65": "std::vector<long> l1;\n\tfor (long i : l) {\n\t\tif (i > 0) {\n\t\t\tl1.push_back(i);\n\t\t}\n\t}\n\treturn l1;",
        "grade-65": {
            "execution": 1
        },
        "59": "std::vector<long> newList;\n  for (int i = 0; i < l.size(); i++) {\n    if (l[i] > 0) {\n      newList.push_back(l[i]);\n    }\n  }\n  return newList;",
        "grade-59": {
            "execution": 1
        },
        "35": "std::vector<long> result;\n  for (int i = 0; i < l.size(); i++) {\n    if (l[i] > 0)\n      result.push_back(l[i]);\n  }\n  return result;",
        "grade-35": {
            "execution": 1
        },
        "26": "std::vector<long> lp;\n  for (long i = 0; i < l.size(); i++) {\n    if (l[i] > 0) {\n      lp.push_back(l[i]);\n    }\n  }\n  return lp;",
        "grade-26": {
            "execution": 1
        },
        "199": "// Your solution goes here.\n    std::vector<long> result;\n    for(int i=0;i<l.size();i++){\n        if(l[i]>0){\n            result.push_back(l[i]);\n        }\n    }\n    return result;",
        "grade-199": {
            "execution": 1
        },
        "157": "std::vector<long> p;\n    for(auto e: l) {\n        if(e > 0) {\n            p.push_back(e);\n        }\n    }\n    return p;",
        "grade-157": {
            "execution": 1
        },
        "22": "// Write your code here.\n  std::vector<long> positive;\n  for(long i : l){\n    if(i>0){\n      positive.push_back(i);\n    }\n  }\n  return positive;",
        "grade-22": {
            "execution": 1
        },
        "171": "std::vector<long> out;\n    for (long x : l) {\n        if (x > 0) {\n            out.push_back(x);\n        }\n    }\n    return out;",
        "grade-171": {
            "execution": 1
        },
        "118": "std::vector<long> res;\n    for (auto i: l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n    }\n    return res;",
        "grade-118": {
            "execution": 0
        },
        "8": "std::vector<long> result;\n    for (auto n : l) {\n        if (n > 0) {\n            result.push_back(n);\n        }\n    }\n    return result;",
        "grade-8": {
            "execution": 1
        },
        "7": "std::vector<long> r;\n    for (auto x : l)\n        if (x > 0)\n            r.push_back(x);\n    return r;",
        "grade-7": {
            "execution": 1
        },
        "23": "std::vector<long> v;\n    for(auto x: l)\n        if(x > 0)\n            v.push_back(x);\n    return v;",
        "grade-23": {
            "execution": 1
        },
        "57": "std::vector<long>::iterator it;\n  std::vector<long> new_list;\n  for (it = l.begin(); it != l.end(); it++) {\n    if (*it > 0) {\n      new_list.push_back(*it);\n    }\n  }\n  return new_list;",
        "grade-57": {
            "execution": 1
        },
        "61": "std::vector<long> out;\n    for (long i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n            out.push_back(l[i]);\n        }\n    }\n    return out;",
        "grade-61": {
            "execution": 1
        },
        "145": "std::vector<long> l2;\n    for(long i : l) {\n        if(i > 0) {\n            l2.push_back(i);\n        }\n    }\n    return l2;",
        "grade-145": {
            "execution": 1
        },
        "175": "std::vector<long> new_l;\n    int i = 0;\n    for (auto num : l) {\n        if (num > 0) {\n            new_l.push_back(num);\n        }\n    }\n    return new_l;",
        "grade-175": {
            "execution": 1
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi') returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\nstd::string anti_shuffle(std::string s) {\n",
        "snippet": [
            "    string out=\"\";\n    string current=\"\";\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n    if (s[i]==' ')\n    {\n        sort(current.begin(),current.end());\n        if (out.length()>0) out=out+' ';\n        out=out+current;\n        current=\"\";\n    }\n    else current=current+s[i];\n    return out;\n}\n"
        ],
        "simplified": "Write a function that takes a string and returns an ordered version of it. Ordered version of string, is a string where all words (separated by space) are replaced by a new word where all the characters arranged in ascending order based on ascii value. Note: You should keep the order of words and blank spaces in the sentence.",
        "task_id": "86",
        "165": "int n = s.length();\n    int i=0;\n    std::string ans=\"\";\n    while(i<n){\n        int j=i;\n        std::string temp=\"\";\n        while(s[j]!=' ' && j<n){\n            temp = temp + s[j];\n            j++;\n        }\n        std::sort(temp.begin(),temp.end());\n        ans = ans + temp;\n        i = j;\n        while(s[i]==' ' && i<n){\n            ans = ans + ' ';\n            i++;\n        }\n    }\n    return ans;",
        "grade-165": {
            "execution": 1
        },
        "28": "std::stringstream ss(s);\n    std::string result = \"\";\n    std::string temp;\n    std::getline(ss,temp,' ');\n    while(temp != \"\"){\n        std::vector<char> x;\n        std::copy(temp.begin(),temp.end(),std::back_inserter(x));\n        std::sort(x.begin(),x.end());\n        for(char c : x){\n            result += c;\n        }\n        result += \" \";\n        std::getline(ss,temp,' ');\n    }\n    return result;",
        "grade-28": {
            "execution": 0
        },
        "6": "std::string new_str;\n  for (int i = 0; i < s.length(); i++) {\n    std::string s2;\n    if (isalpha(s[i])) {\n      while (isalpha(s[i])) {\n        s2 += s[i];\n        i++;\n      }\n      i--;\n      std::sort(s2.begin(), s2.end());\n      new_str += s2;\n    } else {\n      new_str += s[i];\n    }\n  }\n  return new_str;",
        "grade-6": {
            "execution": 0
        },
        "193": "int n = s.length();\n    std::string word;\n    std::string ans = \"\";\n    for(int i = 0; i < n; i++) {\n        if(s[i] == ' ') {\n            ans += word;\n            ans += ' ';\n            word = \"\";\n        }\n        else {\n            word += s[i];\n        }\n    }\n    ans += word;\n    // std::cout << \"WORD: \" << word << std::endl;\n    for(int i = 0; i < ans.length(); i++) {\n        if(ans[i] == ' ') {\n            continue;\n        }\n        else {\n            // std::cout << ans[i] << std::endl;\n            int pos = i;\n            for(int j = i+1; j < ans.length(); j++) {\n                if(ans[j] == ' ') {\n                    continue;\n                }\n                if(ans[j] < ans[pos]) {\n                    pos = j;\n                }\n            }\n            std::swap(ans[i], ans[pos]);\n        }\n    }\n    return ans;",
        "grade-193": {
            "execution": 0
        },
        "71": "std::vector<std::string> words;\n    std::string current_word;\n    for (char c : s) {\n        if (c == ' ') {\n            words.push_back(current_word);\n            current_word = \"\";\n        } else {\n            current_word += c;\n        }\n    }\n    words.push_back(current_word);\n    std::string output;\n    for (int i = 0; i < words.size(); i++) {\n        std::sort(words[i].begin(), words[i].end());\n        output += words[i];\n        if (i < words.size() - 1) {\n            output += \" \";\n        }\n    }\n    return output;",
        "grade-71": {
            "execution": 1
        },
        "62": "// your code here",
        "grade-62": {
            "execution": 0
        },
        "57": "std::stringstream strStream(s);\n    std::string word, ans;\n    while (std::getline(strStream, word, ' ')) {\n        std::sort(word.begin(), word.end());\n        ans += word + \" \";\n    }\n    return ans;",
        "grade-57": {
            "execution": 0
        },
        "35": "// Write your code here\n  int n = s.length();\n  std::string temp;\n  std::string result;\n  int j = 0;\n  for(int i = 0; i < n; i++){\n    if(s[i] == ' '){\n      std::sort(temp.begin(), temp.end());\n      for(int i = 0; i < temp.length(); i++){\n        result += temp[i];\n      }\n      temp = \"\";\n      result += s[i];\n    }\n    else\n      temp += s[i];\n  }\n  std::sort(temp.begin(), temp.end());\n  for(int i = 0; i < temp.length(); i++){\n    result += temp[i];\n  }\n  return result;",
        "grade-35": {
            "execution": 1
        },
        "192": "std::vector<std::string> v;\n  std::string result = \"\";\n  std::string tmp = \"\";\n  for (size_t i = 0; i < s.size(); i++) {\n    if (s[i] == ' ') {\n      v.push_back(tmp);\n      tmp = \"\";\n    } else {\n      tmp += s[i];\n    }\n  }\n  v.push_back(tmp);\n  for (size_t i = 0; i < v.size(); i++) {\n    std::string tmp = v[i];\n    std::sort(tmp.begin(), tmp.end());\n    result += tmp;\n    if (i != v.size() - 1) {\n      result += \" \";\n    }\n  }\n  return result;",
        "grade-192": {
            "execution": 1
        },
        "26": "std::string result = \"\";\n    std::string temp = \"\";\n    std::string space = \" \";\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') {\n            std::sort(temp.begin(), temp.end());\n            result += temp;\n            result += space;\n            temp = \"\";\n        } else {\n            temp += s[i];\n        }\n    }\n    std::sort(temp.begin(), temp.end());\n    result += temp;\n    return result;",
        "grade-26": {
            "execution": 1
        },
        "177": "std::string l;\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (s[i] == ' ') {\n\t\t\tl += ' ';\n\t\t}\n\t\telse {\n\t\t\tint j = i;\n\t\t\tstd::string word;\n\t\t\twhile (s[j] != ' ' && j < s.length()) {\n\t\t\t\tword += s[j];\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tstd::sort(word.begin(), word.end());\n\t\t\tl += word;\n\t\t\ti = j - 1;\n\t\t}\n\t}\n\treturn l;",
        "grade-177": {
            "execution": 1
        },
        "140": "// input: string\n  // output: string where characters of each word are in ascending order.\n  // split the string into tokens\n  std::stringstream ss(s);\n  std::string temp;\n  std::vector<std::string> v;\n  while(ss >> temp) {\n    v.push_back(temp);\n  }\n  for(int i = 0; i < v.size(); i++) {\n    std::string w = v[i];\n    std::sort(w.begin(), w.end());\n    v[i] = w;\n  }\n  std::string ans = \"\";\n  for(int i = 0; i < v.size(); i++) {\n    ans += v[i];\n    if(i != v.size() - 1) {\n      ans += \" \";\n    }\n  }\n  return ans;",
        "grade-140": {
            "execution": 1
        },
        "22": "std::string str;\n    std::string temp;\n    int i=0;\n    while(i<s.length()){\n      while(s[i]!=' ' && i<s.length()){\n        temp.push_back(s[i]);\n        i++;\n      }\n      sort(temp.begin(),temp.end());\n      str+=temp;\n      temp.clear();\n      if(i<s.length()){\n        str.push_back(' ');\n        i++;\n      }\n    }\n    return str;",
        "grade-22": {
            "execution": 1
        },
        "152": "std::vector<std::string> strVec;\n    std::string temp = \"\";\n    // Put words into vector\n    for (auto c : s) {\n        if (c == ' ') {\n            strVec.push_back(temp);\n            temp = \"\";\n        } else {\n            temp += c;\n        }\n    }\n    // add last word\n    strVec.push_back(temp);\n    // Go through each word and sort the word, then put back into vec\n    for (int i = 0; i < strVec.size(); i++) {\n        std::string curr = strVec[i];\n        // sort current string, then put back into vector\n        std::sort(curr.begin(), curr.end());\n        strVec[i] = curr;\n    }\n    // Go through vector and put into string\n    temp = \"\";\n    for (int i = 0; i < strVec.size(); i++) {\n        temp += strVec[i];\n        if (i != strVec.size() - 1) {\n            temp += \" \";\n        }\n    }\n    return temp;",
        "grade-152": {
            "execution": 1
        },
        "109": "int k = 0;\n    int n = s.length();\n    int j = 0;\n    std::string ans = \"\";\n    for(int i = 0; i < n; i++) {\n        if(s[i] == ' ') {\n            int count[1000] = {0};\n            for(j = k; j < i; j++) {\n                count[s[j]]++;\n            }\n            for(j = k; j < i; j++) {\n                if(count[s[j]] > 0) {\n                    ans += s[j];\n                    count[s[j]] = 0;\n                }\n            }\n            ans += \" \";\n            k = i + 1;\n        }\n    }\n    int count[1000] = {0};\n    for(j = k; j < n; j++) {\n        count[s[j]]++;\n    }\n    for(j = k; j < n; j++) {\n        if(count[s[j]] > 0) {\n            ans += s[j];\n            count[s[j]] = 0;\n        }\n    }\n    return ans;",
        "grade-109": {
            "execution": 0
        },
        "8": "std::string result = \"\";\n\tstd::string word = \"\";\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (s[i] == ' ') {\n\t\t\tresult += word;\n\t\t\tresult += ' ';\n\t\t\tword = \"\";\n\t\t}\n\t\telse {\n\t\t\tword += s[i];\n\t\t}\n\t}\n\tstd::sort(word.begin(), word.end());\n\tresult += word;\n\treturn result;",
        "grade-8": {
            "execution": 0
        },
        "7": "std::string ans = \"\";\n  std::string wrd = \"\";\n  for (int i = 0; i < s.length(); i++) {\n    if (s[i] == ' ') {\n      ans += wrd + \" \";\n      wrd = \"\";\n    } else {\n      wrd += s[i];\n    }\n  }\n  ans += wrd;\n  for (int i = 0; i < ans.length(); i++) {\n    if (ans[i] == ' ') {\n      int j = i + 1;\n      while (ans[j] != ' ' && j < ans.length()) {\n        j++;\n      }\n      sort(ans.begin() + i + 1, ans.begin() + j);\n      i = j;\n    }\n  }\n  return ans;",
        "grade-7": {
            "execution": 0
        },
        "23": "int i = 0;\n    std::string res = \"\";\n    while(i < s.length()) {\n        if(s[i] == ' ') {\n            res += ' ';\n            i++;\n            continue;\n        }\n        if(i != s.length() - 1 && s[i + 1] == ' ') {\n            res += s[i];\n            i++;\n            continue;\n        }\n        int start = i;\n        while(i < s.length() && s[i] != ' ') {\n            i++;\n        }\n        std::string temp = s.substr(start, i - start);\n        std::sort(temp.begin(), temp.end());\n        res += temp;\n    }\n    return res;",
        "grade-23": {
            "execution": 1
        },
        "55": "std::string result;\n    std::stringstream ss(s);\n    std::string tmp;\n    while (ss >> tmp) {\n        std::sort(tmp.begin(), tmp.end());\n        result.append(tmp + \" \");\n    }\n    return result;",
        "grade-55": {
            "execution": 0
        },
        "59": "std::string output;\n    std::string tempWord;\n    std::vector<char> char_vec;\n    int stringIndex = 0;\n    while (stringIndex < s.length()) {\n        if (s[stringIndex] == ' ') {\n            output += tempWord;\n            output += ' ';\n            stringIndex++;\n            tempWord = \"\";\n        } else {\n            tempWord += s[stringIndex];\n            stringIndex++;\n        }\n    }\n    output += tempWord;\n    return output;",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nstd::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n",
        "snippet": [
            "    vector<int> out;\n    for (int i=0;i<game.size();i++)\n    out.push_back(abs(game[i]-guess[i]));\n    return out;\n}\n"
        ],
        "simplified": "I think we all remember that feeling when the result of some long-awaited event is finally known. The feelings and thoughts you have at that moment are definitely worth noting down and comparing. Your task is to determine if a person correctly guessed the results of a number of matches. You are given two arrays of scores and guesses of equal length, where each index shows a match. Return an array of the same length denoting how far off each guess was. If they have guessed correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.",
        "task_id": "152",
        "187": "int count = 0;\n    for(int i = 0; i < game.size(); i++){\n        if(game[i] == guess[i]){\n            game[i] = 0;\n        }\n        else if(game[i] > guess[i]){\n            count = game[i] - guess[i];\n            game[i] = count;\n        }\n        else if(game[i] < guess[i]){\n            count = guess[i] - game[i];\n            game[i] = count;\n        }\n    }\n    return game;",
        "grade-187": {
            "execution": 1
        },
        "28": "int size = game.size();\n    std::vector<long> result;\n    for(int i = 0; i < size; i++){\n        if(game[i]==guess[i]){\n            result.push_back(0);\n        }else{\n            result.push_back(abs(game[i]-guess[i]));\n        }\n    }\n    return result;",
        "grade-28": {
            "execution": 1
        },
        "6": "std::vector<long> result(game.size());\n    for (size_t i = 0; i < game.size(); i++) {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;",
        "grade-6": {
            "execution": 1
        },
        "75": "for (int i = 0; i < game.size(); i++) {\n\t\tguess[i] = abs(game[i] - guess[i]);\n\t}\n\treturn guess;",
        "grade-75": {
            "execution": 1
        },
        "64": "std::vector<long> v;\n    for(int i = 0; i < game.size(); i++){\n        long diff = game[i] - guess[i];\n        if(diff < 0) diff *= -1;\n        v.push_back(diff);\n    }\n    return v;",
        "grade-64": {
            "execution": 1
        },
        "59": "std::vector<long> out;\n    if(game.size()==guess.size()){\n        for(long i=0;i<game.size();i++){\n            out.push_back(std::abs(game[i]-guess[i]));\n        }\n    }\n    return out;",
        "grade-59": {
            "execution": 1
        },
        "35": "std::vector<long> result;\n\tfor (size_t i = 0; i < game.size(); i++) {\n\t\tif (game[i] == guess[i]) {\n\t\t\tresult.push_back(0);\n\t\t}\n\t\telse {\n\t\t\tresult.push_back(abs(game[i] - guess[i]));\n\t\t}\n\t}\n\treturn result;",
        "grade-35": {
            "execution": 1
        },
        "26": "std::vector<long> guess_results;\n\tfor (int i = 0; i < game.size(); i++) {\n\t\tguess_results.push_back(std::abs(game[i] - guess[i]));\n\t}\n\treturn guess_results;",
        "grade-26": {
            "execution": 1
        },
        "154": "int len = game.size();\n  std::vector<long> results;\n  for (size_t i = 0; i < len; i++) {\n    long result = std::abs(game[i] - guess[i]);\n    results.push_back(result);\n  }\n  return results;",
        "grade-154": {
            "execution": 1
        },
        "22": "// if(game.size() != guess.size()) assert(0);\n\t// std::vector<long> ans;\n\t// for(int i = 0; i < game.size(); i++) {\n\t// \tif(game[i] == guess[i]) ans.push_back(0);\n\t// \telse ans.push_back(abs(game[i] - guess[i]));\n\t// }\n\t// return ans;\n\tint i = 0;\n\twhile(i < game.size()) {\n\t\tif(game[i] == guess[i]) {\n\t\t\tgame.erase(game.begin() + i);\n\t\t\tguess.erase(guess.begin() + i);\n\t\t}\n\t\telse i++;\n\t}\n\tfor(int i = 0; i < game.size(); i++) {\n\t\tgame[i] = abs(game[i] - guess[i]);\n\t}\n\treturn game;",
        "grade-22": {
            "execution": 0
        },
        "168": "std::vector<long> result;\n  for (unsigned int i = 0; i < game.size(); i++) {\n    long difference = abs(game[i] - guess[i]);\n    result.push_back(difference);\n  }\n  return result;",
        "grade-168": {
            "execution": 1
        },
        "120": "std::vector<long> results;\n    for(int i = 0; i < game.size(); i++){\n        results.push_back(std::abs(game[i] - guess[i]));\n    }\n    return results;",
        "grade-120": {
            "execution": 1
        },
        "8": "int min = 0;\n    int max = 0;\n    std::vector<long> vec;\n    for(unsigned int i = 0; i < game.size(); i++){\n        if(guess[i] <= game[i]){\n            min = guess[i];\n            max = game[i];\n        }\n        else if(guess[i] > game[i]){\n            min = game[i];\n            max = guess[i];\n        }\n        vec.push_back(max - min);\n    }\n    return vec;",
        "grade-8": {
            "execution": 1
        },
        "7": "std::vector<long> result(game.size());\n  for (int i = 0; i < game.size(); i++) {\n    result[i] = abs(game[i] - guess[i]);\n  }\n  return result;",
        "grade-7": {
            "execution": 1
        },
        "23": "std::vector<long> result;\n  for (int i = 0; i < game.size(); i++) {\n    result.push_back(std::abs(game[i] - guess[i]));\n  }\n  return result;",
        "grade-23": {
            "execution": 1
        },
        "57": "std::vector<long> difference;\n    for(int i = 0; i < game.size(); i++){\n        difference.push_back(std::abs(game[i] - guess[i]));\n    }\n    return difference;",
        "grade-57": {
            "execution": 1
        },
        "61": "std::vector<long> result;\n    if(game.size() != guess.size()) {\n        return result;\n    }\n    int size = game.size();\n    long diff = 0;\n    for(int i = 0; i < size; i++) {\n        diff = std::abs(game[i] - guess[i]);\n        result.push_back(diff);\n    }\n    return result;",
        "grade-61": {
            "execution": 1
        },
        "144": "int size = game.size();\n  std::vector<long> result;\n  for(int i = 0; i < size; i++){\n    result.push_back(abs(game[i] - guess[i]));\n  }\n  return result;",
        "grade-144": {
            "execution": 1
        },
        "171": "std::vector<long> ret;\n  for(int i = 0; i < game.size(); i++) {\n    long diff = abs(game[i] - guess[i]);\n    ret.push_back(diff);\n  }\n  return ret;",
        "grade-171": {
            "execution": 1
        },
        "158": "for(long i = 0; i < game.size(); i++)\n\t{\n\t\tlong x = guess[i] - game[i];\n\t\tif(x < 0)\n\t\t{\n\t\t\tguess[i] = x * -1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tguess[i] = x;\n\t\t}\n\t}\n\treturn guess;",
        "grade-158": {
            "execution": 1
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return None in case the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n// 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nstd::optional<std::string> longest(std::vector<std::string> strings) {\n",
        "snippet": [
            "    string out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].length()>out.length()) out=strings[i];\n    }\n    return out;\n}\n"
        ],
        "simplified": "Out of list of strings, return the longest one. Return the first one in case of multiple strings of the same length. Return None in case the input list is empty.",
        "task_id": "12",
        "168": "std::optional<std::string> longest_string;\n    for (auto& s : strings) {\n        if (!longest_string || (longest_string && s.size() > longest_string->size())) {\n            longest_string = s;\n        }\n    }\n    return longest_string;",
        "grade-168": {
            "execution": 1
        },
        "28": "std::optional<std::string> max = std::nullopt;\n  for (auto s : strings) {\n    if (!max.has_value() || s.size() > max->size()) {\n      max = s;\n    }\n  }\n  return max;",
        "grade-28": {
            "execution": 1
        },
        "6": "if (strings.empty()) return std::nullopt;\n    int max_len = 0;\n    std::string max_str = \"\";\n    for (auto &&s : strings) {\n        if (s.length() > max_len) {\n            max_len = s.length();\n            max_str = s;\n        }\n    }\n    return max_str;",
        "grade-6": {
            "execution": 1
        },
        "194": "if (strings.empty()) {\n        return std::nullopt;\n    }\n    auto longest_string = std::make_optional(strings[0]);\n    for (auto const& string : strings) {\n        if (string.size() > longest_string->size()) {\n            longest_string = string;\n        }\n    }\n    return longest_string;",
        "grade-194": {
            "execution": 1
        },
        "72": "std::optional<std::string> longest = std::nullopt;\n    if(strings.size() == 0) {\n        return longest;\n    }\n    std::string lon = strings[0];\n    for(auto e : strings) {\n        if(e.size() > lon.size()) {\n            lon = e;\n        }\n    }\n    return longest = lon;",
        "grade-72": {
            "execution": 1
        },
        "63": "if (strings.empty()) {\n    return std::nullopt;\n  }\n\n  std::string longest_string = strings[0];\n  for (const auto& string : strings) {\n    if (string.size() > longest_string.size()) {\n      longest_string = string;\n    }\n  }\n\n  return longest_string;",
        "grade-63": {
            "execution": 1
        },
        "57": "if (strings.empty()) {\n    return std::nullopt;\n  }\n  size_t max_length = strings[0].length();\n  std::string longest_string = strings[0];\n  for (size_t i = 1; i < strings.size(); ++i) {\n    if (strings[i].length() > max_length) {\n      max_length = strings[i].length();\n      longest_string = strings[i];\n    }\n  }\n  return longest_string;",
        "grade-57": {
            "execution": 1
        },
        "35": "// Write here",
        "grade-35": {
            "execution": 0
        },
        "193": "if (strings.empty()) {\n    return std::nullopt;\n  }\n  auto max_size = std::max_element(strings.begin(), strings.end(), [](const auto& lhs, const auto& rhs) {\n    return lhs.size() < rhs.size();\n  });\n  return *max_size;",
        "grade-193": {
            "execution": 1
        },
        "26": "if (strings.empty()) {\n    return std::nullopt;\n  }\n  std::sort(strings.begin(), strings.end(), [](const std::string& a, const std::string& b) {\n    return a.size() > b.size();\n  });\n  return strings[0];",
        "grade-26": {
            "execution": 1
        },
        "178": "// Your implementation here\n\treturn {};",
        "grade-178": {
            "execution": 0
        },
        "142": "std::optional<std::string> longest_string;\n    if (strings.size() == 0) {\n        return longest_string;\n    }\n    auto max_len = strings[0].size();\n    for (auto str : strings) {\n        if (str.size() > max_len) {\n            max_len = str.size();\n            longest_string = str;\n        }\n    }\n    return longest_string;",
        "grade-142": {
            "execution": 0
        },
        "22": "if (strings.empty()) {\n    return std::nullopt;\n  }\n  std::string res = strings[0];\n  for (int i = 1; i < strings.size(); i++) {\n    if (strings[i].size() > res.size()) {\n      res = strings[i];\n    }\n  }\n  return res;",
        "grade-22": {
            "execution": 1
        },
        "156": "std::optional<std::string> ret = std::nullopt;\n    for (auto &str : strings) {\n        if (!ret || ret->size() < str.size()) {\n            ret = str;\n        }\n    }\n    return ret;",
        "grade-156": {
            "execution": 1
        },
        "110": "if (strings.empty()) {\n        return std::nullopt;\n    }\n    auto pos = std::max_element(\n        strings.begin(), strings.end(), [](const std::string& a, const std::string& b) {\n            return a.size() < b.size();\n        });\n    return *pos;",
        "grade-110": {
            "execution": 1
        },
        "8": "if (strings.empty()) {\n\t\treturn std::nullopt;\n\t}\n\tstd::vector<std::string>::iterator it = std::max_element(strings.begin(), strings.end(),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[](const std::string& a, const std::string& b) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn a.size() < b.size();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\treturn *it;",
        "grade-8": {
            "execution": 1
        },
        "7": "std::string max_str;\n  if (strings.size() == 0)\n    return std::nullopt;\n  else {\n    std::for_each(strings.begin(), strings.end(), [&max_str](std::string s) {\n      if (s.size() > max_str.size())\n        max_str = s;\n    });\n    return max_str;\n  }",
        "grade-7": {
            "execution": 1
        },
        "23": "std::string candidate{};\n    std::optional<std::string> longest_string{};\n    for (auto it = strings.begin(); it != strings.end(); ++it) {\n        if (it->length() > candidate.length()) {\n            candidate = *it;\n        }\n    }\n    if (candidate.length() > 0) {\n        longest_string = candidate;\n    }\n    return longest_string;",
        "grade-23": {
            "execution": 1
        },
        "55": "int l = 0;\n    int c = 0;\n    for (int i = 0; i < strings.size(); i++) {\n        if (strings[i].size() > l) {\n            l = strings[i].size();\n            c = i;\n        }\n    }\n    if (strings.size() == 0) {\n        return std::nullopt;\n    }\n    return strings[c];",
        "grade-55": {
            "execution": 1
        },
        "59": "std::string longestString;\n    std::size_t maxSize = 0;\n    for (const auto& string : strings) {\n        if (string.size() > maxSize) {\n            maxSize = string.size();\n            longestString = string;\n        }\n    }\n    if (maxSize == 0) {\n        return std::nullopt;\n    }\n    return longestString;",
        "grade-59": {
            "execution": 1
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_vector_std_string__long{\n    std::vector<std::string> f0;\n    long f1;    Union_std_vector_std_string__long(std::vector<std::string> _f0) : f0(_f0) {}\n    Union_std_vector_std_string__long(long _f1) : f1(_f1) {}\n    ~Union_std_vector_std_string__long() {}\n    bool operator==(Union_std_vector_std_string__long u2) {\n        return f0 == u2.f0 || f1 == u2.f1 ;\n    }\n};\n// Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n// split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") == 3\nUnion_std_vector_std_string__long split_words(std::string txt) {\n",
        "snippet": [
            "    int i;\n    string current=\"\";\n    vector<string> out={};\n    if (find(txt.begin(),txt.end(),' ')!=txt.end())\n    {\n        txt=txt+' ';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==' ') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    if (find(txt.begin(),txt.end(),',')!=txt.end())\n    {\n        txt=txt+',';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==',') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    int num=0;\n    for (i=0;i<txt.length();i++)\n        if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)\n            num+=1;\n    return {to_string(num)};\n}\n"
        ],
        "simplified": "Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25",
        "task_id": "125",
        "166": "if (txt.find(' ') != std::string::npos)\n        return txt.substr(0, txt.find(' '));\n    else if (txt.find(',') != std::string::npos)\n        return txt.substr(0, txt.find(','));\n    else {\n        int count = 0;\n        for (int i = 0; i < txt.length(); i += 2) {\n            if (txt[i] >= 'a' && txt[i] <= 'z') {\n                count++;\n            }\n        }\n        return count;\n    }",
        "grade-166": {
            "execution": 0
        },
        "28": "if (txt.find(' ') != std::string::npos)\n        return txt.substr(0, txt.find(' '));\n    else if (txt.find(',') != std::string::npos)\n        return txt.substr(0, txt.find(','));\n    else\n        return txt.length();",
        "grade-28": {
            "execution": 0
        },
        "6": "std::vector<std::string> v;\n    int count;\n    if(txt.find(' ') != std::string::npos){\n      std::istringstream ss(txt);\n      for(std::string s; ss >> s;)\n        v.push_back(s);\n        return Union_std_vector_std_string__long(v);\n    }\n    else if(txt.find(',') != std::string::npos){\n      std::istringstream ss(txt);\n      for(std::string s; getline(ss, s, ',');)\n        v.push_back(s);\n        return Union_std_vector_std_string__long(v);\n    }\n    else{\n      count = 0;\n      for(auto i : txt){\n        if(islower(i)){\n          if((int(i) - int('a')) % 2 != 0)\n            count++;\n        }\n      }\n      return Union_std_vector_std_string__long(count);\n    }",
        "grade-6": {
            "execution": 1
        },
        "192": "if (std::regex_search(txt, std::regex(\"\\\\s+\"))) {\n        std::vector<std::string> splitted_words;\n        std::istringstream iss(txt);\n        std::copy(std::istream_iterator<std::string>(iss),\n            std::istream_iterator<std::string>(),\n            std::back_inserter(splitted_words));\n        return Union_std_vector_std_string__long(splitted_words);\n    }\n    else if (std::regex_search(txt, std::regex(\",\"))) {\n        std::vector<std::string> splitted_words;\n        boost::split(splitted_words, txt, boost::is_any_of(\",\"));\n        return Union_std_vector_std_string__long(splitted_words);\n    }\n    else {\n        return Union_std_vector_std_string__long(txt.size());\n    }",
        "grade-192": {
            "execution": 0
        },
        "70": "std::vector<std::string> v;\n    std::stringstream s(txt);\n    std::string word;\n    while (s >> word) {\n        v.push_back(word);\n    }\n    if (v.size() == 0) {\n        int sum = 0;\n        std::vector<char> cs;\n        std::string s = txt;\n        for (int i = 0; i < s.size(); i++) {\n            if (std::find(cs.begin(), cs.end(), s[i]) == cs.end()) {\n                cs.push_back(s[i]);\n            }\n        }\n        for (int i = 0; i < cs.size(); i++) {\n            if (cs[i] >= 'a' && cs[i] <= 'z') {\n                sum += (int)cs[i] - (int)'a';\n            }\n        }\n        return Union_std_vector_std_string__long(sum);\n    }\n    return Union_std_vector_std_string__long(v);",
        "grade-70": {
            "execution": 0
        },
        "62": "int l = txt.length();\n    for(int i = 0; i < l; i++) {\n        if(txt[i] == ' ') {\n            std::vector<std::string> res;\n            res.push_back(txt.substr(0, i));\n            res.push_back(txt.substr(i+1, l-i-1));\n            return res;\n        }\n    }\n    for(int i = 0; i < l; i++) {\n        if(txt[i] == ',') {\n            std::vector<std::string> res;\n            res.push_back(txt.substr(0, i));\n            res.push_back(txt.substr(i+1, l-i-1));\n            return res;\n        }\n    }\n    int count = 0;\n    for(int i = 0; i < l; i++) {\n        if(txt[i] >= 'a' && txt[i] <= 'z') {\n            if((txt[i] - 'a') % 2 == 1) {\n                count++;\n            }\n        }\n    }\n    return count;",
        "grade-62": {
            "execution": 1
        },
        "57": "std::vector<std::string> words;\n    words.clear();\n    if (txt.find_first_of(\" \") != std::string::npos) {\n        std::istringstream iss(txt);\n        do {\n            std::string sub;\n            iss >> sub;\n            words.push_back(sub);\n        } while (iss);\n        return Union_std_vector_std_string__long(words);\n    } else if (txt.find_first_of(\",\") != std::string::npos) {\n        std::istringstream iss(txt);\n        do {\n            std::string sub;\n            std::getline(iss, sub, ',');\n            words.push_back(sub);\n        } while (iss);\n        return Union_std_vector_std_string__long(words);\n    } else {\n        int letters = 0;\n        for (char c : txt) {\n            if (c >= 'a' && c <= 'z') {\n                if ((c - 'a') % 2 == 1) {\n                    letters++;\n                }\n            }\n        }\n        return Union_std_vector_std_string__long(letters);\n    }",
        "grade-57": {
            "execution": 0
        },
        "35": "std::string delimiter = \" \";\n    if (txt.find(delimiter) == std::string::npos) {\n        delimiter = \",\";\n        if (txt.find(delimiter) == std::string::npos) {\n            return Union_std_vector_std_string__long(0);\n        }\n    }\n    std::vector<std::string> splitted;\n    std::string token;\n    std::stringstream ss(txt);\n    while (std::getline(ss, token, delimiter[0])) {\n        splitted.push_back(token);\n    }\n    return Union_std_vector_std_string__long(splitted);",
        "grade-35": {
            "execution": 0
        },
        "191": "if (txt.find(\" \") != std::string::npos) {\n        std::vector<std::string> ans;\n        std::string temp;\n        std::istringstream stream(txt);\n        while (stream >> temp) {\n            ans.push_back(temp);\n        }\n        return ans;\n    } else if (txt.find(\",\") != std::string::npos) {\n        std::vector<std::string> ans;\n        std::string temp;\n        std::istringstream stream(txt);\n        while (std::getline(stream, temp, ',')) {\n            ans.push_back(temp);\n        }\n        return ans;\n    } else {\n        long odd_sum = 0;\n        for (char c : txt) {\n            if (c - 'a' >= 0 && c - 'a' < 26) {\n                if ((c - 'a') % 2) odd_sum++;\n            }\n        }\n        return odd_sum;\n    }",
        "grade-191": {
            "execution": 1
        },
        "26": "if (txt.find(' ') != std::string::npos) {\n        std::vector<std::string> result{};\n        std::stringstream ss(txt);\n        std::string item;\n        while (std::getline(ss, item, ' ')) {\n            result.push_back(item);\n        }\n        return Union_std_vector_std_string__long(result);\n    } else if (txt.find(',') != std::string::npos) {\n        std::vector<std::string> result{};\n        std::stringstream ss(txt);\n        std::string item;\n        while (std::getline(ss, item, ',')) {\n            result.push_back(item);\n        }\n        return Union_std_vector_std_string__long(result);\n    } else {\n        int result = 0;\n        for (int i = 0; i < txt.size(); i++) {\n            if (txt[i] >= 'a' && txt[i] <= 'z' && i % 2 == 0)\n                result++;\n        }\n        return Union_std_vector_std_string__long(result);\n    }",
        "grade-26": {
            "execution": 0
        },
        "176": "//if whitespace exists, split\n\tif(txt.find(' ') != std::string::npos){\n\t\tstd::vector<std::string> vec;\n\t\tstd::stringstream ss(txt);\n\t\tstd::string token;\n\t\twhile(getline(ss, token, ' ')){\n\t\t\tvec.push_back(token);\n\t\t}\n\t\treturn Union_std_vector_std_string__long(vec);\n\t}\n\t//if no whitespace, split on comma\n\telse if(txt.find(',') != std::string::npos){\n\t\tstd::vector<std::string> vec;\n\t\tstd::stringstream ss(txt);\n\t\tstd::string token;\n\t\twhile(getline(ss, token, ',')){\n\t\t\tvec.push_back(token);\n\t\t}\n\t\treturn Union_std_vector_std_string__long(vec);\n\t}\n\t//if no comma, return number of lowercase letters with odd order in alphabet\n\telse{\n\t\tlong count = 0;\n\t\tfor(char c : txt){\n\t\t\tif(c >= 'a' && c <= 'z'){\n\t\t\t\tif(c - 'a' % 2 == 1){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn Union_std_vector_std_string__long(count);\n\t}",
        "grade-176": {
            "execution": 0
        },
        "141": "int count = 0;\n    std::istringstream iss(txt);\n    std::vector<std::string> splitted;\n    for (std::string s; iss >> s; ) {\n        splitted.push_back(s);\n    }\n    if(splitted.size() > 0)\n        return Union_std_vector_std_string__long(splitted);\n    for(int i = 0; i < txt.size(); i++){\n        if(txt[i] >= 'a' && txt[i] <= 'z')\n            count++;\n    }\n    return Union_std_vector_std_string__long(count);",
        "grade-141": {
            "execution": 0
        },
        "22": "//std::vector<std::string> result;\n    //char delimiter = ' ';\n    //if (txt.find(delimiter) != std::string::npos) {\n        //result = split_string(txt, delimiter);\n    //} else {\n        //delimiter = ',';\n        //if (txt.find(delimiter) != std::string::npos) {\n            //result = split_string(txt, delimiter);\n        //} else {\n            //std::string odd = \"abcdefghijklmnopqrstuvwxyz\";\n            //int count = 0;\n            //for (char ch: txt) {\n                //if (odd.find(ch) != std::string::npos) {\n                    //count++;\n                //}\n            //}\n            //result.push_back(count);\n        //}\n    //}\n    //return result;\n    if (txt.find(' ') != std::string::npos) {\n        return std::vector<std::string>{split_string(txt, ' ')};\n    } else if (txt.find(',') != std::string::npos) {\n        return std::vector<std::string>{split_string(txt, ',')};\n    } else {\n        std::string odd = \"abcdefghijklmnopqrstuvwxyz\";\n        int count = 0;\n        for (char ch: txt) {\n            if (odd.find(ch) != std::string::npos) {\n                count++;\n            }\n        }\n        return count;\n    }",
        "grade-22": {
            "execution": 0
        },
        "154": "Union_std_vector_std_string__long  r{};\n    int count = 0;\n    std::vector<std::string> result;\n    std::stringstream ss(txt);\n    std::string word;\n    while (getline(ss, word, ' ')) {\n        result.push_back(word);\n    }\n    if (result.size() > 1) {\n        r.f0 = result;\n    } else {\n        if (result[0].find(',') != std::string::npos) {\n            result.clear();\n            std::stringstream ss2(txt);\n            std::string word2;\n            while (getline(ss2, word2, ',')) {\n                result.push_back(word2);\n            }\n            r.f0 = result;\n        } else {\n            for (auto& ch : txt) {\n                int x = ch - 'a';\n                if (x >= 0 && x <= 25) {\n                    count += x % 2 == 0 ? 0 : 1;\n                }\n            }\n            r.f1 = count;\n        }\n    }\n    return r;",
        "grade-154": {
            "execution": 0
        },
        "110": "std::vector<std::string> v;\n    bool flg = false;\n    bool flg2 = false;\n    long ans = 0;\n    std::string str = \"\";\n    for(char c : txt) {\n        if(c != ' ') {\n            flg = true;\n            str += c;\n        }\n        if(c == ' ' && flg) {\n            v.push_back(str);\n            str = \"\";\n            flg = false;\n        }\n        if(c == ',') {\n            flg2 = true;\n        }\n    }\n    if(flg) v.push_back(str);\n    if(!flg && !flg2) {\n        for(char c : txt) {\n            ans += (c - 'a') % 2;\n        }\n        return Union_std_vector_std_string__long(ans);\n    }\n    return Union_std_vector_std_string__long(v);",
        "grade-110": {
            "execution": 0
        },
        "8": "Union_std_vector_std_string__long u;\n    std::vector<std::string> result;\n    int i;\n    for(i = 0; i < txt.length(); i++) {\n        if(txt[i] == ' ' || txt[i] == ',') {\n            break;\n        }\n    }\n    if(i < txt.length()) {\n        std::istringstream iss(txt);\n        do {\n            std::string sub;\n            iss >> sub;\n            result.push_back(sub);\n        } while (iss);\n        u.f0 = result;\n    } else {\n        int odd = 0;\n        for(i = 0; i < txt.length(); i++) {\n            if((txt[i] - 'a') % 2 == 1) {\n                odd++;\n            }\n        }\n        u.f1 = odd;\n    }\n    return u;",
        "grade-8": {
            "execution": 0
        },
        "7": "auto tokens = std::vector<std::string>();\n    auto token = std::string();\n    auto ss = std::stringstream(txt);\n    while (std::getline(ss, token, ' ')) {\n        tokens.push_back(token);\n    }\n    return tokens.size() > 1 ? tokens : std::vector<std::string>{txt}.size();",
        "grade-7": {
            "execution": 0
        },
        "23": "if (txt.find(' ') != std::string::npos) {\n        std::vector<std::string> vs;\n        std::string s = \"\";\n        for (size_t i = 0; i < txt.size(); i++) {\n            if (txt[i] == ' ') {\n                vs.push_back(s);\n                s = \"\";\n            } else {\n                s += txt[i];\n            }\n        }\n        vs.push_back(s);\n        return vs;\n    } else if (txt.find(',') != std::string::npos) {\n        std::vector<std::string> vs;\n        std::string s = \"\";\n        for (size_t i = 0; i < txt.size(); i++) {\n            if (txt[i] == ',') {\n                vs.push_back(s);\n                s = \"\";\n            } else {\n                s += txt[i];\n            }\n        }\n        vs.push_back(s);\n        return vs;\n    } else {\n        int cnt = 0;\n        for (size_t i = 0; i < txt.size(); i++) {\n            if ((txt[i] - 'a') % 2 == 1) {\n                cnt += 1;\n            }\n        }\n        return cnt;\n    }",
        "grade-23": {
            "execution": 1
        },
        "55": "if (txt.find(' ') != std::string::npos) {\n        std::vector<std::string> str_split_v;\n        char *cstr = new char[txt.length() + 1];\n        std::strcpy(cstr, txt.c_str());\n        char *p = std::strtok(cstr, \" \");\n        while (p != 0) {\n            str_split_v.push_back(p);\n            p = std::strtok(NULL, \" \");\n        }\n        delete[] cstr;\n        return Union_std_vector_std_string__long(str_split_v);\n    } else if (txt.find(',') != std::string::npos) {\n        std::vector<std::string> str_split_v;\n        char *cstr = new char[txt.length() + 1];\n        std::strcpy(cstr, txt.c_str());\n        char *p = std::strtok(cstr, \",\");\n        while (p != 0) {\n            str_split_v.push_back(p);\n            p = std::strtok(NULL, \",\");\n        }\n        delete[] cstr;\n        return Union_std_vector_std_string__long(str_split_v);\n    } else {\n        long c = 0;\n        for (auto &e : txt) {\n            if (e > 'a' && e < 'z' && (e % 2 == 0)) {\n                c++;\n            }\n        }\n        return Union_std_vector_std_string__long(c);\n    }",
        "grade-55": {
            "execution": 1
        },
        "59": "if (txt.find(\" \") != std::string::npos) {\n        std::vector<std::string> words = strSplit(txt, ' ');\n        return Union_std_vector_std_string__long(words);\n    }\n    if (txt.find(\",\") != std::string::npos) {\n        std::vector<std::string> words = strSplit(txt, ',');\n        return Union_std_vector_std_string__long(words);\n    }\n    long result = 0;\n    for (char c : txt) {\n        int i = tolower(c) - 'a';\n        result += (i % 2) ? 1 : 0;\n    }\n    return Union_std_vector_std_string__long(result);",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array) {\n",
        "snippet": [
            "    if (array.size()==0) return {};\n    if ((array[0]+array[array.size()-1]) %2==1)\n    {\n        sort(array.begin(),array.end());\n        return array;\n    }\n    else\n    {\n        sort(array.begin(),array.end());\n        vector<int> out={};\n        for (int i=array.size()-1;i>=0;i-=1)\n            out.push_back(array[i]);\n        return out;\n    }\n\n}\n"
        ],
        "simplified": "Given an array of non-negative integers, return a copy of the given array after sorting, you will sort the given array in ascending order if the sum( first index value, last index value) is odd, or sort it in descending order if the sum( first index value, last index value) is even. Note: * don't change the given array.",
        "task_id": "88",
        "163": "if (array.size() == 0 || array.size() == 1) return array;\n  int sum = array[0] + array[array.size() - 1];\n  if (sum % 2 == 0) std::sort(array.begin(), array.end(), std::greater<int>());\n  else std::sort(array.begin(), array.end());\n  return array;",
        "grade-163": {
            "execution": 1
        },
        "28": "std::vector<long> sortedArr;\n  for (unsigned int i = 0; i < array.size(); i++) {\n    if (i == 0) {\n      sortedArr.push_back(array[i]);\n    } else {\n      bool inserted = false;\n      for (unsigned int j = 0; j < sortedArr.size(); j++) {\n        if ((i + array.size() - 1) % 2 == 0) {\n          if (array[i] < sortedArr[j]) {\n            sortedArr.insert(sortedArr.begin() + j, array[i]);\n            inserted = true;\n            break;\n          }\n        } else {\n          if (array[i] > sortedArr[j]) {\n            sortedArr.insert(sortedArr.begin() + j, array[i]);\n            inserted = true;\n            break;\n          }\n        }\n      }\n      if (!inserted) {\n        sortedArr.push_back(array[i]);\n      }\n    }\n  }\n  return sortedArr;",
        "grade-28": {
            "execution": 0
        },
        "6": "std::vector<long> result;\n  if (array.size() == 0) {\n    return result;\n  } else if (array.size() == 1) {\n    return array;\n  } else {\n    auto sum_last_first = array[0] + array[array.size() - 1];\n    if (sum_last_first % 2 == 0) {\n      // even, use ascending order\n      std::sort(array.begin(), array.end());\n    } else {\n      // odd, use descending order\n      std::sort(array.begin(), array.end(), std::greater<int>());\n    }\n    return array;\n  }",
        "grade-6": {
            "execution": 0
        },
        "189": "long n = array.size();\n  if(n==0)\n    return array;\n  if(n==1)\n    return array;\n  if( (array[0] + array[n-1]) % 2 == 0 ){\n    std::sort(array.begin(), array.end(), std::greater<long>());\n  }\n  else{\n    std::sort(array.begin(), array.end());\n  }\n  return array;",
        "grade-189": {
            "execution": 1
        },
        "70": "bool reversed = (array.front() + array.back()) % 2 == 0;\n  if(reversed) {\n    std::sort(array.begin(), array.end(), std::greater<long>());\n  } else {\n    std::sort(array.begin(), array.end());\n  }\n  return array;",
        "grade-70": {
            "execution": 0
        },
        "62": "int sz = array.size();\n    if(sz==0)return array;\n    if(sz==1)return array;\n    if(sz%2==0){\n        int p = 0;\n        int q = sz-1;\n        while(p<q){\n            std::swap(array[p],array[q]);\n            p++;\n            q--;\n        }\n    }\n    else{\n        for(int i=0;i<sz;i++){\n            for(int j=i+1;j<sz;j++){\n                if(array[i]>array[j])std::swap(array[i],array[j]);\n            }\n        }\n    }\n    return array;",
        "grade-62": {
            "execution": 0
        },
        "57": "int sum = array[0] + array[array.size() - 1];\n\tif (sum % 2 == 0) {\n\t\tsort(array.begin(), array.end(), std::greater<int>());\n\t}\n\telse {\n\t\tsort(array.begin(), array.end());\n\t}\n\treturn array;",
        "grade-57": {
            "execution": 0
        },
        "35": "std::vector<long> v1;\n  std::vector<long> v2;\n  if(array.size()==0){\n    return v1;\n  }\n  if(array.size()==1){\n    return array;\n  }\n  int cnt = array.size();\n  if((array[0]+array[cnt-1])%2==0){\n    for(int i=0;i<cnt;i++){\n      v1.push_back(array[i]);\n    }\n    std::sort(v1.begin(),v1.end(),std::greater<int>());\n    return v1;\n  }\n  else if((array[0]+array[cnt-1])%2!=0){\n    for(int i=0;i<cnt;i++){\n      v2.push_back(array[i]);\n    }\n    std::sort(v2.begin(),v2.end());\n    return v2;\n  }\n  else{\n    return array;\n  }",
        "grade-35": {
            "execution": 1
        },
        "188": "// Write your code here.\n    bool isOdd = (array[0] + array[array.size() - 1]) % 2;\n    if (isOdd) {\n        //odd\n        sort(array.begin(), array.end());\n    } else {\n        //even\n        sort(array.begin(), array.end(), greater<long>());\n    }\n    return array;",
        "grade-188": {
            "execution": 0
        },
        "26": "std::vector<long> result = array;\n  int i = 0;\n  int j = result.size() - 1;\n  bool isOdd = false;\n  if ((result[i] + result[j]) % 2 != 0)\n    isOdd = true;\n  while (i < j) {\n    while (i < j && result[i] % 2 != 0)\n      i++;\n    while (i < j && result[j] % 2 == 0)\n      j--;\n    if (i < j) {\n      int temp = result[i];\n      result[i] = result[j];\n      result[j] = temp;\n    }\n  }\n  if (isOdd)\n    std::sort(result.begin(), result.end());\n  else\n    std::sort(result.begin(), result.end(), std::greater<long>());\n  return result;",
        "grade-26": {
            "execution": 0
        },
        "173": "if(array.size()<=1) return array;\n  if((array[0]+array[array.size()-1])%2==0) {\n    std::sort(array.begin(), array.end(), std::greater<long>());\n  }\n  else {\n    std::sort(array.begin(), array.end());\n  }\n  return array;",
        "grade-173": {
            "execution": 1
        },
        "139": "std::vector<long> result = array;\n   int sum = 0;\n   int begin = 0;\n   int end = array.size() - 1;\n   int temp = 0;\n   sum = array[begin] + array[end];\n   if(sum % 2 == 0) {\n      while(begin < end) {\n         if(array[begin] < array[end]) {\n            temp = array[begin];\n            array[begin] = array[end];\n            array[end] = temp;\n         }\n         begin++;\n         end--;\n      }\n   }\n   else {\n      while(begin < end) {\n         if(array[begin] > array[end]) {\n            temp = array[begin];\n            array[begin] = array[end];\n            array[end] = temp;\n         }\n         begin++;\n         end--;\n      }\n   }\n   return result;",
        "grade-139": {
            "execution": 0
        },
        "22": "// write your code here\n  if (array.size() < 2 ||\n      (array.size() == 2 && array[0] % 2 == array[1] % 2))\n    return array;\n  std::vector<long> odd, even;\n  for (long x : array)\n    (x % 2 ? odd : even).push_back(x);\n  std::sort(odd.begin(), odd.end());\n  std::sort(even.begin(), even.end(), std::greater<long>());\n  std::vector<long> result;\n  std::merge(odd.begin(), odd.end(), even.begin(), even.end(),\n             std::back_inserter(result));\n  return result;",
        "grade-22": {
            "execution": 0
        },
        "151": "std::vector<long> ret;\n    bool ascending = false;\n    if ( (array[0] + array[array.size() - 1]) % 2 == 0 ) ascending = true;\n    for ( long i = 0; i < array.size(); i++ ) {\n        for ( long j = 0; j < array.size() - 1; j++ ) {\n            if ( ascending && array[j] > array[j + 1] ) {\n                std::swap(array[j], array[j + 1]);\n            } else if ( !ascending && array[j] < array[j + 1] ) {\n                std::swap(array[j], array[j + 1]);\n            }\n        }\n    }\n    return array;",
        "grade-151": {
            "execution": 0
        },
        "108": "std::vector<long> sortedArray;\n\tif (array.size() == 0) {\n\t\treturn sortedArray;\n\t}\n\tif (array.size() == 1) {\n\t\tsortedArray.push_back(array[0]);\n\t\treturn sortedArray;\n\t}\n\tif ((array[0] + array[array.size() - 1]) % 2 == 0) {\n\t\tstd::sort(array.begin(), array.end(),\n\t\t\t\t[](const long &a, const long &b) {\n\t\t\t\t\treturn a > b;\n\t\t\t\t});\n\t} else {\n\t\tstd::sort(array.begin(), array.end(),\n\t\t\t\t[](const long &a, const long &b) {\n\t\t\t\t\treturn a < b;\n\t\t\t\t});\n\t}\n\treturn array;",
        "grade-108": {
            "execution": 1
        },
        "8": "// your code here\n  long even = array.size()%2 == 0;\n  for(int i = 0; i < array.size(); i++){\n    for(int j = i+1; j < array.size(); j++){\n      if(even){\n        if(array[i] < array[j]){\n          std::swap(array[i], array[j]);\n        }\n      }\n      else{\n        if(array[i] > array[j]){\n          std::swap(array[i], array[j]);\n        }\n      }\n    }\n  }\n  return array;",
        "grade-8": {
            "execution": 0
        },
        "7": "std::vector<long> v;\n    if (array.size()==0)\n    {\n        return v;\n    }\n    else if (array.size()==1)\n    {\n        return array;\n    }\n    else if (array.size()>1)\n    {\n        int sum = 0;\n        for (int i = 0; i < array.size(); i++)\n        {\n            sum += array[i];\n        }\n        if (sum%2==0)\n        {\n            std::sort(array.begin(), array.end(), std::greater<long>());\n            return array;\n        }\n        else\n        {\n            std::sort(array.begin(), array.end());\n            return array;\n        }\n    }",
        "grade-7": {
            "execution": 0
        },
        "23": "// your code here\n  return {};",
        "grade-23": {
            "execution": 0
        },
        "55": "int sum = array[0] + array[array.size() - 1];\n    // if(sum % 2 == 0)\n    //     std::sort(array.begin(), array.end(), std::greater<int>());\n    // else\n    //     std::sort(array.begin(), array.end());\n    // return array;\n    return (sum % 2 == 0) ? std::sort(array.begin(), array.end(), std::greater<int>()) : std::sort(array.begin(), array.end());",
        "grade-55": {
            "execution": 0
        },
        "59": "// Write your code here\n  bool odd = false;\n  long temp = 0;\n  for(long i = 0; i < array.size(); i++){\n    if(i + array.size() - 1 == array.size() - 1){\n      break;\n    }\n    temp = array[i] + array[array.size() - 1];\n    if(temp % 2 == 0){\n      odd = false;\n      break;\n    }\n    else{\n      odd = true;\n    }\n  }\n  if(odd){\n    std::sort(array.begin(), array.end());\n  }\n  else{\n    std::sort(array.begin(), array.end(), std::greater<int>());\n  }\n  return array;",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string words_in_sentence(std::string sentence) {\n",
        "snippet": [
            "    string out=\"\";\n    string current=\"\";\n    sentence=sentence+' ';\n\n    for (int i=0;i<sentence.size();i++)\n    if (sentence[i]!=' ') current=current+sentence[i];\n    else\n    {\n        bool isp=true;\n        int l=current.length();\n        if (l<2) isp=false;\n        for (int j=2;j*j<=l;j++)\n            if (l%j==0) isp=false;\n        if (isp) out=out+current+' ';\n        current=\"\";        \n    }\n    if (out.length()>0)\n        out.pop_back();\n    return out;\n}\n"
        ],
        "simplified": "You are given a string representing a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words from the original sentence, whose lengths are prime numbers, the order of the words in the new string should be the same as the original one. Constraints: * 1 <= len(sentence) <= 100 * sentence contains only letters",
        "task_id": "143",
        "163": "assert(not sentence.empty());\n  auto const is_prime = [](auto const& n) {\n    assert(n > 0);\n    auto result = true;\n    for (auto divisor = 2; divisor < n; ++divisor) {\n      if (n % divisor == 0) {\n        result = false;\n        break;\n      }\n    }\n    return result;\n  };\n  std::stringstream ss(sentence);\n  std::string word;\n  std::string result;\n  while (ss >> word) {\n    if (is_prime(word.size())) {\n      result += word + \" \";\n    }\n  }\n  if (not result.empty()) {\n    result.pop_back();\n  }\n  return result;",
        "grade-163": {
            "execution": 0
        },
        "28": "// Use a set to store prime numbers [2, 100]\n    std::set<int> primes({2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97});\n    std::string result;\n    // We will first use a stringstream object to split the input string\n    // by space and store the result in a vector of strings.\n    std::stringstream ss(sentence);\n    std::vector<std::string> words;\n    std::string word;\n    while (ss >> word) {\n        words.push_back(word);\n    }\n    // Next we iterate over the vector and find words whose length is a prime number.\n    for (const auto& word : words) {\n        if (primes.find(word.length()) != primes.end()) {\n            // If a word's length is a prime number,\n            // we concatenate it to the result string.\n            result += (word + \" \");\n        }\n    }\n    // Finally, we remove the last space character from the result string\n    // and return the result.\n    result.pop_back();\n    return result;",
        "grade-28": {
            "execution": 0
        },
        "6": "std::vector<std::string> w;\n    std::string word;\n    for (int i = 0; i < sentence.size(); i++) {\n        if (sentence[i] == ' ') {\n            w.push_back(word);\n            word = \"\";\n        } else {\n            word += sentence[i];\n        }\n    }\n    if (word != \"\") {\n        w.push_back(word);\n    }\n    std::string res;\n    for (int i = 0; i < w.size(); i++) {\n        bool prime = true;\n        for (int j = 2; j <= sqrt(w[i].size()); j++) {\n            if (w[i].size() % j == 0) {\n                prime = false;\n                break;\n            }\n        }\n        if (prime) {\n            res += w[i] + \" \";\n        }\n    }\n    return res;",
        "grade-6": {
            "execution": 0
        },
        "189": "std::string result;\n  std::vector<std::string> v;\n  std::stringstream ss(sentence);\n  while (ss >> sentence) {\n    v.push_back(sentence);\n  }\n  for (int i = 0; i < v.size(); i++) {\n    int n = v[i].size();\n    int count = 0;\n    for (int j = 1; j <= n; j++) {\n      if (n % j == 0)\n        count++;\n    }\n    if (count == 2)\n      result += v[i] + \" \";\n  }\n  return result;",
        "grade-189": {
            "execution": 0
        },
        "70": "std::string result;\n  std::vector<int> len;\n  int start = 0;\n  for (int i = 0; i < sentence.size(); i++) {\n    if (sentence[i] == ' ') {\n      len.push_back(i - start);\n      start = i + 1;\n    }\n  }\n  len.push_back(sentence.size() - start);\n  std::vector<int> primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n  for (int i = 0; i < len.size(); i++) {\n    for (int j = 0; j < primes.size(); j++) {\n      if (len[i] == primes[j]) {\n        for (int k = 0; k < len[i]; k++) {\n          result += sentence[start + k];\n        }\n        if (i != len.size() - 1) {\n          result += ' ';\n        }\n        break;\n      }\n    }\n    start += len[i] + 1;\n  }\n  return result;",
        "grade-70": {
            "execution": 0
        },
        "62": "//    std::transform(sentence.begin(), sentence.end(), sentence.begin(), ::tolower);\n    if (sentence.size() == 0) {\n        return \"\";\n    }\n    std::vector<std::string> word_list;\n    std::string word;\n    for (auto it = sentence.begin(); it != sentence.end(); ++it) {\n        if (*it == ' ') {\n            word_list.push_back(word);\n            word.clear();\n        } else {\n            word.push_back(*it);\n        }\n    }\n    word_list.push_back(word);\n    std::vector<std::string> result;\n    for (auto &word : word_list) {\n        if (word.size() == 1) {\n            result.push_back(word);\n        } else {\n            for (int i = 2; i < word.size(); ++i) {\n                if (word.size() % i == 0) {\n                    break;\n                }\n                if (i == word.size() - 1) {\n                    result.push_back(word);\n                }\n            }\n        }\n    }\n    if (result.size() == 0) {\n        return \"\";\n    }\n    std::string ret(result[0]);\n    for (int i = 1; i < result.size(); ++i) {\n        ret += \" \" + result[i];\n    }\n    return ret;",
        "grade-62": {
            "execution": 0
        },
        "57": "std::string result;\n    std::stringstream ss;\n    ss.str(sentence);\n    std::string word;\n    while (ss >> word) {\n        auto len = word.length();\n        bool is_prime = true;\n        for (int i = 2; i <= std::sqrt(len); ++i) {\n            if (len % i == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime) {\n            result += word + \" \";\n        }\n    }\n    if (!result.empty()) {\n        result.pop_back();\n    }\n    return result;",
        "grade-57": {
            "execution": 0
        },
        "35": "std::vector<std::string> result_vector;\n    std::string result = \"\";\n    std::vector<std::string> vec;\n    std::stringstream ss(sentence);\n    std::string buffer;\n    while (ss >> buffer) {\n        vec.push_back(buffer);\n    }\n    std::vector<int> vec_int;\n    std::vector<int> vec_primes;\n    int count;\n    for (int i = 2; i <= 100; i++) {\n        count = 0;\n        for (int j = 2; j <= i/2; j++) {\n            if (i % j == 0) {\n                count++;\n                break;\n            }\n        }\n        if (count == 0) {\n            vec_primes.push_back(i);\n        }\n    }\n    for (int i = 0; i < vec.size(); i++) {\n        for (int j = 0; j < vec_primes.size(); j++) {\n            if (vec[i].length() == vec_primes[j]) {\n                result_vector.push_back(vec[i]);\n            }\n        }\n    }\n    for (int i = 0; i < result_vector.size(); i++) {\n        result += result_vector[i] + \" \";\n    }\n    if (result.back() == ' ') {\n        result.pop_back();\n    }\n    return result;",
        "grade-35": {
            "execution": 1
        },
        "188": "std::string ans = \"\";\n    std::vector<std::string> sentence_words;\n    std::istringstream iss(sentence);\n    for(std::string str; iss >> str; )\n        sentence_words.push_back(str);\n    for(auto str : sentence_words) {\n        int len = str.length();\n        if(len == 1) {\n            ans += str + \" \";\n            continue;\n        }\n        if(len == 2) {\n            ans += str + \" \";\n            continue;\n        }\n        int is_prime = 1;\n        for(int i = 2; i < len; ++i) {\n            if(len % i == 0) {\n                is_prime = 0;\n                break;\n            }\n        }\n        if(is_prime) {\n            ans += str + \" \";\n        }\n    }\n    ans.pop_back();\n    return ans;",
        "grade-188": {
            "execution": 0
        },
        "26": "std::string result;\n    int size = sentence.size();\n    int start = 0;\n    int end = 0;\n    while (sentence[end] != '\\0') {\n        //std::cout << \"End: \" << end << std::endl;\n        //std::cout << \"Start: \" << start << std::endl;\n        if (sentence[end] == ' ') {\n            //std::cout << \"Word: \" << sentence.substr(start, end - start) << std::endl;\n            int word_length = end - start;\n            bool is_prime = true;\n            for (int i = 2; i <= word_length / 2; i++) {\n                if (word_length % i == 0) {\n                    is_prime = false;\n                    break;\n                }\n            }\n            if (is_prime) {\n                result.append(sentence.substr(start, end - start));\n                result.append(\" \");\n            }\n            start = end + 1;\n        }\n        end++;\n    }\n    //std::cout << \"Word: \" << sentence.substr(start, end - start) << std::endl;\n    int word_length = end - start;\n    bool is_prime = true;\n    for (int i = 2; i <= word_length / 2; i++) {\n        if (word_length % i == 0) {\n            is_prime = false;\n            break;\n        }\n    }\n    if (is_prime) {\n        result.append(sentence.substr(start, end - start));\n    }\n    return result;",
        "grade-26": {
            "execution": 0
        },
        "173": "std::string res;\n    std::stringstream ss(sentence);\n    std::string tmp;\n    while (ss >> tmp) {\n        if (tmp.size() == 1) {\n            res += tmp + \" \";\n            continue;\n        }\n        bool is_prime = true;\n        for (int i = 2; i < tmp.size(); ++i) {\n            if (tmp.size() % i == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime) {\n            res += tmp + \" \";\n        }\n    }\n    res.pop_back();\n    return res;",
        "grade-173": {
            "execution": 0
        },
        "139": "std::stringstream ss(sentence);\n\tstd::string word;\n\tstd::stringstream ss_result;\n\tconst std::vector<int> primes{ 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97 };\n\tstd::unordered_set<int> prime_set(primes.begin(), primes.end());\n\twhile (ss >> word) {\n\t\tif (prime_set.find(word.size()) != prime_set.end())\n\t\t\tss_result << word << \" \";\n\t}\n\t// remove the final space\n\treturn ss_result.str().substr(0, ss_result.str().size() - 1);",
        "grade-139": {
            "execution": 1
        },
        "22": "std::vector<std::string> tokens;\n  std::string token;\n  std::istringstream token_stream(sentence);\n  while (std::getline(token_stream, token, ' ')) {\n    tokens.push_back(token);\n  }\n  std::vector<bool> is_prime(101, true);\n  is_prime[0] = is_prime[1] = false;\n  for (int i = 2; i <= 100; ++i) {\n    if (is_prime[i]) {\n      for (int j = i * i; j <= 100; j += i) {\n        is_prime[j] = false;\n      }\n    }\n  }\n  std::string result;\n  for (const auto& token : tokens) {\n    if (is_prime[token.size()]) {\n      result += token + \" \";\n    }\n  }\n  if (!result.empty()) {\n    result.pop_back();\n  }\n  return result;",
        "grade-22": {
            "execution": 1
        },
        "151": "std::string result;\n  std::vector<std::string> words;\n  int start = 0;\n  for (int i = 0; i < sentence.size(); ++i) {\n    if (sentence[i] == ' ') {\n      words.push_back(sentence.substr(start, i - start));\n      start = i + 1;\n    }\n  }\n  words.push_back(sentence.substr(start, sentence.size() - start));\n  for (const auto& word : words) {\n    if (word.size() == 2 || word.size() == 3 || word.size() == 5 || word.size() == 7) {\n      result += (word + \" \");\n    }\n  }\n  return result.substr(0, result.size() - 1);",
        "grade-151": {
            "execution": 1
        },
        "108": "std::vector<std::string> words;\n    for (int i = 0; i < sentence.size(); i++) {\n        std::string current_word;\n        while (sentence[i] != ' ' && i < sentence.size()) {\n            current_word += sentence[i];\n            i++;\n        }\n        words.push_back(current_word);\n    }\n    std::string result;\n    for (int i = 0; i < words.size(); i++) {\n        int word_length = words[i].size();\n        bool is_prime = true;\n        for (int divisor = 2; divisor < word_length; divisor++) {\n            if (word_length % divisor == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime) {\n            result += words[i] + \" \";\n        }\n    }\n    if (result.size() > 0) {\n        result.pop_back();\n    }\n    return result;",
        "grade-108": {
            "execution": 0
        },
        "8": "std::stringstream ss(sentence);\n  std::string word;\n  std::string res;\n  while (ss >> word) {\n    if (word.size() <= 1) continue;\n    bool is_prime = true;\n    for (int i = 2; i < word.size(); ++i) {\n      if (word.size() % i == 0) {\n        is_prime = false;\n        break;\n      }\n    }\n    if (is_prime) {\n      res += word + \" \";\n    }\n  }\n  if (res.size() > 0) {\n    res.pop_back();\n  }\n  return res;",
        "grade-8": {
            "execution": 1
        },
        "7": "std::string out;\n  bool is_prime[20] = {\n    false,  // 0\n    false,  // 1\n    true,   // 2\n    true,   // 3\n    false,  // 4\n    true,   // 5\n    false,  // 6\n    true,   // 7\n    false,  // 8\n    false,  // 9\n    false,  // 10\n    true,   // 11\n    false,  // 12\n    true,   // 13\n    false,  // 14\n    false,  // 15\n    false,  // 16\n    true,   // 17\n    false,  // 18\n    true,   // 19\n  };\n  std::stringstream ss(sentence);\n  std::string word;\n  while (ss >> word) {\n    if (is_prime[word.size()]) {\n      out += word + \" \";\n    }\n  }\n  if (out.size() > 0) {\n    out.pop_back();\n  }\n  return out;",
        "grade-7": {
            "execution": 1
        },
        "23": "std::string result = \"\";\n  std::stringstream ss(sentence);\n  std::string word;\n  int len = -1;\n  bool is_prime = false;\n  for (int i = 2; i <= 100; i++) {\n    is_prime = true;\n    for (int j = 2; j <= i/2; j++) {\n      if (i % j == 0) {\n        is_prime = false;\n        break;\n      }\n    }\n    if (is_prime) {\n      len = i;\n      while (std::getline(ss, word, ' ')) {\n        if (word.length() == len) {\n          result += word + \" \";\n        }\n      }\n      if (result.length() > 0) {\n        result.pop_back();\n        return result;\n      }\n      ss.clear();\n      ss.str(sentence);\n    }\n  }\n  return result;",
        "grade-23": {
            "execution": 0
        },
        "55": "assert(sentence.size() <= 100);\n    std::vector<std::string> words;\n    std::string current_word;\n    for (const auto c : sentence) {\n        if (c == ' ') {\n            words.push_back(current_word);\n            current_word.clear();\n        } else {\n            current_word.push_back(c);\n        }\n    }\n    words.push_back(current_word);\n    std::stringstream ret;\n    for (const auto& word : words) {\n        if (word.size() > 1 && word.size() % 2 == 1) {\n            bool is_prime = true;\n            for (int i = 3; i <= std::sqrt(word.size()); i += 2) {\n                if (word.size() % i == 0) {\n                    is_prime = false;\n                    break;\n                }\n            }\n            if (is_prime) {\n                ret << word << \" \";\n            }\n        }\n    }\n    return ret.str();",
        "grade-55": {
            "execution": 0
        },
        "59": "std::string result = \"\";\n    int len = sentence.length();\n    if (len == 0) {\n        return result;\n    }\n    int i = 0;\n    int j = 0;\n    while (j < len) {\n        if (sentence[j] == ' ') {\n            int dist = j - i;\n            bool prime = true;\n            for (int k = 2; k < dist / 2; ++k) {\n                if (dist % k == 0) {\n                    prime = false;\n                    break;\n                }\n            }\n            if (prime) {\n                result += sentence.substr(i, dist);\n                result += \" \";\n            }\n            i = j + 1;\n        }\n        ++j;\n    }\n    int dist = j - i;\n    bool prime = true;\n    for (int k = 2; k < dist / 2; ++k) {\n        if (dist % k == 0) {\n            prime = false;\n            break;\n        }\n    }\n    if (prime) {\n        result += sentence.substr(i, dist);\n    }\n    if (result[result.length() - 1] == ' ') {\n        result.pop_back();\n    }\n    return result;",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of numbers.\n// You need to return the sum of squared numbers in the given list,\n// round each element in the list to the upper int(Ceiling) first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong sum_squares(std::vector<float> lst) {\n",
        "snippet": [
            "    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\n"
        ],
        "simplified": "You are given a list of numbers. You need to return the sum of squared numbers in the given list, round each element in the list to the upper int(Ceiling) first.",
        "task_id": "133",
        "169": "// your code here",
        "grade-169": {
            "execution": 0
        },
        "28": "long long int x=0;\n    for(int i=0;i<lst.size();i++)\n    {\n    \tlst[i]=ceil(lst[i]);\n    \tx=x+(lst[i]*lst[i]);\n    }\n    return x;",
        "grade-28": {
            "execution": 1
        },
        "6": "std::vector<float> v;\n    for(int i=0;i<lst.size();i++){\n        if(lst[i]<0){\n            v.push_back(ceil(lst[i]));\n        }\n        else{\n            v.push_back(floor(lst[i]));\n        }\n    }\n    int x=0;\n    for(int i=0;i<v.size();i++){\n        x+=pow(v[i],2);\n    }\n    return x;",
        "grade-6": {
            "execution": 0
        },
        "198": "long sum = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tsum += (ceil(lst[i]) * ceil(lst[i]));\n\t}\n\treturn sum;",
        "grade-198": {
            "execution": 1
        },
        "72": "// your code here\n  long sum = 0;\n  for(int i = 0; i < lst.size(); i++){\n    sum += std::ceil(lst[i]) * std::ceil(lst[i]);\n  }\n  return sum;",
        "grade-72": {
            "execution": 1
        },
        "63": "// Your code here\n    long result = 0;\n    for(int i = 0; i < lst.size(); i++){\n        result += std::ceil(lst[i]) * std::ceil(lst[i]);\n    }\n    return result;",
        "grade-63": {
            "execution": 1
        },
        "58": "long sum = 0;\n  for (std::vector<float>::iterator it = lst.begin(); it != lst.end(); ++it) {\n    sum += (*it) * (*it);\n  }\n  return sum;",
        "grade-58": {
            "execution": 0
        },
        "35": "std::transform(lst.begin(), lst.end(), lst.begin(), ceil);\n  long sum = 0;\n  for (int x : lst) {\n    sum += x * x;\n  }\n  return sum;",
        "grade-35": {
            "execution": 1
        },
        "197": "int sz = lst.size();\n  float temp = 0;\n  long sum = 0;\n  for(int i = 0; i < sz; i++) {\n    temp = ceil(lst[i]);\n    sum += temp * temp;\n  }\n  return sum;",
        "grade-197": {
            "execution": 1
        },
        "26": "long result = 0;\n    // Write your code here\n    for(int i=0;i<lst.size();i++){\n        result += ceil(lst[i])*ceil(lst[i]);\n    }\n    return result;",
        "grade-26": {
            "execution": 1
        },
        "181": "long result = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    lst[i] = ceil(lst[i]);\n    result += lst[i] * lst[i];\n  }\n  return result;",
        "grade-181": {
            "execution": 1
        },
        "144": "long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        int n = lst[i];\n        if (n < 0){\n            n *= -1;\n        }\n        n = ceil(n);\n        sum += (n * n);\n    }\n    return sum;",
        "grade-144": {
            "execution": 0
        },
        "22": "// test -1\n    if (lst.size() == 0) {\n        return 0;\n    }\n    // test 1,2,3\n    if (lst.size() == 1) {\n        return ceil(lst[0]) * ceil(lst[0]);\n    }\n    // test 4,5,6\n    int sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        sum += ceil(lst[i]) * ceil(lst[i]);\n    }\n    return sum;",
        "grade-22": {
            "execution": 1
        },
        "157": "long sum = 0;\n\tfor (size_t i = 0; i < lst.size(); i++) {\n\t\tsum += (long) pow(ceil(lst[i]), 2);\n\t}\n\treturn sum;",
        "grade-157": {
            "execution": 1
        },
        "113": "std::vector<int> vec;\n  for(auto i:lst){\n    int temp = ceil(i);\n    vec.push_back(temp);\n  }\n  long sum=0;\n  for(auto i:vec){\n    sum+=i*i;\n  }\n  return sum;",
        "grade-113": {
            "execution": 1
        },
        "8": "long sum = 0;\n    for(auto i: lst)\n    {\n        sum += pow(ceil(i),2);\n    }\n    return sum;",
        "grade-8": {
            "execution": 1
        },
        "7": "long sum = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tsum += pow(ceil(lst[i]), 2);\n\t}\n\treturn sum;",
        "grade-7": {
            "execution": 1
        },
        "23": "float sum=0;\n  for(int i=0;i<lst.size();i++)\n  {\n    sum=sum+std::ceil(lst[i])*std::ceil(lst[i]);\n  }\n  return sum;",
        "grade-23": {
            "execution": 1
        },
        "56": "// TODO - Wri",
        "grade-56": {
            "execution": 0
        },
        "60": "long result = 0;\n    for (auto i : lst)\n        result += ceil(i) * ceil(i);\n    return result;",
        "grade-60": {
            "execution": 1
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n",
        "snippet": [
            "    int sum=0;\n    for (int i=0;i*2+1<lst.size();i++)\n        if (lst[i*2+1]%2==0) sum+=lst[i*2+1];\n    return sum;\n}\n"
        ],
        "simplified": "Given a non-empty list of integers lst. add the even elements that are at odd indices..",
        "task_id": "85",
        "180": "int i=0;\n    long sum=0;\n    for(std::vector<long>::iterator it=lst.begin();it!=lst.end();it++){\n        if(i%2!=0){\n            if(*it%2==0){\n                sum+=*it;\n            }\n        }\n        i++;\n    }\n    return sum;",
        "grade-180": {
            "execution": 1
        },
        "28": "long s = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i % 2 != 0 && lst[i] % 2 == 0) {\n            s += lst[i];\n        }\n    }\n    return s;",
        "grade-28": {
            "execution": 1
        },
        "6": "long sum = 0;\n  for(long i = 0; i < lst.size(); i++){\n    if(lst[i] % 2 == 0 && i % 2 != 0){\n      sum += lst[i];\n    }\n  }\n  return sum;",
        "grade-6": {
            "execution": 1
        },
        "72": "long sum = 0;\n    int len = lst.size();\n    for(int i = 0; i < len; i += 2) {\n        if(lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;",
        "grade-72": {
            "execution": 0
        },
        "63": "long res = 0;\n    for(int i = 0; i < lst.size(); i++)\n        if((i+1)%2 != 0 && lst[i]%2 == 0)\n            res += lst[i];\n    return res;",
        "grade-63": {
            "execution": 0
        },
        "58": "// Place your code here\n  long s=0;\n  for(int i=0;i<lst.size();i++){\n    if(i%2!=0){\n      if(lst[i]%2==0){\n        s+=lst[i];\n      }\n    }\n  }\n  return s;",
        "grade-58": {
            "execution": 1
        },
        "35": "long sum=0;\n    for(int i=0;i<lst.size();i+=2)\n    {\n        if(lst[i]%2==0)\n        {\n            sum+=lst[i];\n        }\n    }\n    return sum;",
        "grade-35": {
            "execution": 0
        },
        "26": "// your code here\n  long sum = 0;\n  for(int i = 0; i < lst.size(); i++){\n    if(i % 2 != 0){\n      if(lst[i] % 2 == 0){\n        sum += lst[i];\n      }\n    }\n  }\n  return sum;",
        "grade-26": {
            "execution": 1
        },
        "191": "long sum = 0;\n  for(int i = 1; i < lst.size(); i+=2)\n    if(lst[i] % 2 == 0)\n      sum += lst[i];\n  return sum;",
        "grade-191": {
            "execution": 1
        },
        "151": "long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i % 2 != 0 && lst[i] % 2 == 0)\n            sum += lst[i];\n    }\n    return sum;",
        "grade-151": {
            "execution": 1
        },
        "22": "long sum = 0;\n  for(int i = 0; i < lst.size(); i += 2)\n  {\n    if(lst[i] % 2 == 0)\n    {\n      sum += lst[i];\n    }\n  }\n  return sum;",
        "grade-22": {
            "execution": 0
        },
        "166": "int length = lst.size();\n    int sum = 0;\n    for(int i = 1; i < length; i++)\n    {\n        if(lst[i] % 2 == 0)\n        {\n            sum += lst[i];\n        }\n    }\n    return sum;",
        "grade-166": {
            "execution": 0
        },
        "112": "long sum = 0;\n  for(int i = 0; i < lst.size(); i+=2)\n    if(lst[i] % 2 == 0)\n      sum += lst[i];\n  return sum;",
        "grade-112": {
            "execution": 0
        },
        "8": "int sum = 0;\n  for(int i = 1; i < lst.size(); i+=2){\n    if(lst[i] % 2 == 0){\n      sum += lst[i];\n    }\n  }\n  return sum;",
        "grade-8": {
            "execution": 1
        },
        "7": "long retval=0;\n    int i;\n    for(i=0;i<lst.size();i++)\n    {\n        if(i%2==0 && lst[i]%2==0)\n        {\n            retval+=lst[i];\n        }\n    }\n    return retval;",
        "grade-7": {
            "execution": 0
        },
        "23": "int s = 0;\n\tfor (int i = 0; i < lst.size(); i += 2) {\n\t\tif (lst[i] % 2 == 0) {\n\t\t\ts += lst[i];\n\t\t}\n\t}\n\treturn s;",
        "grade-23": {
            "execution": 0
        },
        "56": "return std::accumulate(lst.begin() + 1, lst.end(), 0,\n      [](int a, int b) { return a + (b % 2 == 0 ? b : 0); });",
        "grade-56": {
            "execution": 0
        },
        "60": "long result = 0;\n   for(int i = 0; i < lst.size(); i+=2) {\n      if(lst[i] % 2 == 0) {\n         result += lst[i];\n      }\n   }\n   return result;",
        "grade-60": {
            "execution": 0
        },
        "137": "long sum = 0;\n  for(int i = 1; i < lst.size(); i += 2)\n    if(lst[i] % 2 == 0)\n      sum += lst[i];\n  return sum;",
        "grade-137": {
            "execution": 1
        },
        "170": "long sum = 0;\n    for(int i = 1; i < lst.size(); i += 2) {\n        if(lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;",
        "grade-170": {
            "execution": 1
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nlong sum_to_n(long n) {\n",
        "snippet": [
            "    return n*(n+1)/2;\n}\n"
        ],
        "simplified": "sum_to_n is a function that sums numbers from 1 to n.",
        "task_id": "60",
        "127": "long int sum = 0;\n  while (n != 0) {\n    sum += n;\n    n--;\n  }\n  return sum;",
        "grade-127": {
            "execution": 1
        },
        "14": "return (n*(n+1))/2;",
        "grade-14": {
            "execution": 1
        },
        "3": "assert(n >= 1);\n  return n * (n + 1) / 2;",
        "grade-3": {
            "execution": 1
        },
        "162": "if (n < 0)\n        return 0;\n    else if (n == 0)\n        return 0;\n    else\n        return n + sum_to_n(n - 1);",
        "grade-162": {
            "execution": 1
        },
        "43": "long result=0;\n    for(int i=1;i<=n;i++){\n        result=result+i;\n    }\n    return result;",
        "grade-43": {
            "execution": 1
        },
        "35": "return n*(n+1)/2;",
        "grade-35": {
            "execution": 1
        },
        "30": "assert(n > 0);\n  if (n == 1) {\n    return 1;\n  }\n  return n + sum_to_n(n - 1);",
        "grade-30": {
            "execution": 1
        },
        "17": "long sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;",
        "grade-17": {
            "execution": 1
        },
        "13": "assert(n >= 1);\n    return (n*(n+1))/2;",
        "grade-13": {
            "execution": 1
        },
        "136": "assert(n > 0);\n  return n * (n + 1) / 2;",
        "grade-136": {
            "execution": 1
        },
        "198": "// YOUR CODE GOES HERE\n\t//if (n==1)\n\t\t//return 1;\n\t//else\n\t\treturn n + sum_to_n(n-1);",
        "grade-198": {
            "execution": 0
        },
        "105": "// TODO: your code here\n    return (n * (n + 1)) / 2;",
        "grade-105": {
            "execution": 1
        },
        "11": "assert(n > 0);\n    return (long)n*(n+1)/2;",
        "grade-11": {
            "execution": 1
        },
        "113": "// TODO: complete this function.\n    // Be sure to use a loop, not recursion.\n  long sum = 0;\n  for(int i = 1; i <= n; i++){\n    sum += i;\n  }\n  return sum;",
        "grade-113": {
            "execution": 1
        },
        "75": "if (n < 0) {\n\t\treturn 0;\n\t}\n\telse {\n\t\tif (n == 0) {\n\t\t\treturn n;\n\t\t}\n\t\telse {\n\t\t\treturn n + sum_to_n(n - 1);\n\t\t}\n\t}",
        "grade-75": {
            "execution": 1
        },
        "4": "// write your code here\n    return n*(n+1)/2;",
        "grade-4": {
            "execution": 1
        },
        "29": "return n*(n+1)/2;",
        "grade-29": {
            "execution": 1
        },
        "31": "// n(n+1)/2\n  long tot = n * (n + 1);\n  long answer = tot / 2;\n  return answer;",
        "grade-31": {
            "execution": 1
        },
        "94": "long sum = 0;\n\tlong i = 1;\n\twhile (i <= n) {\n\t\tsum += i;\n\t\ti++;\n\t}\n\treturn sum;",
        "grade-94": {
            "execution": 1
        },
        "117": "assert(n >= 1);\n   // Fill in code here\n\n   return (n * (n + 1)) / 2;",
        "grade-117": {
            "execution": 1
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n",
        "snippet": [
            "    for (int i=2;i*i<=n;i++)\n        if (n%i==0) return  n/i;\n    return 1;\n\n}\n"
        ],
        "simplified": "For a given number n, find the largest number that divides n evenly, smaller than n",
        "task_id": "24",
        "173": "// 1. Attempt to divide n by every number\n    // 2. Try to divide n by every smaller number until\n    //      you get a divisor that is < n\n    // 3. Return the result\n\n    //Return the largest divisor of n or 1 if none found\n    // 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\n    //  ^\n    //  |\n    //  1\n    for (long i = n-1; i > 1; i--) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    return 1;",
        "grade-173": {
            "execution": 1
        },
        "28": "// your code goes here\n  int j = (n/2);\n  for(int i = j; i > 0; i--){\n    if((n%i) == 0){\n      return i;\n    }\n  }\n  return 1;",
        "grade-28": {
            "execution": 1
        },
        "6": "assert(n >= 0);\n    for (long i = n-1; i > 0; i--) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    return -1;",
        "grade-6": {
            "execution": 1
        },
        "75": "for (long i = n/2; i > 0; i--) {\n    if (n % i == 0) {\n      return i;\n    }\n  }\n  return 0;",
        "grade-75": {
            "execution": 1
        },
        "67": "assert(n >= 1);\n  long d = 2;\n  long maxDivisor = 1;\n  while (d * d <= n) {\n    if (n % d == 0) {\n      maxDivisor = d;\n    }\n    d += 1;\n  }\n  return maxDivisor;",
        "grade-67": {
            "execution": 0
        },
        "59": "if (n == 1) {\n        return 1;\n    }\n    long divisor = 2;\n    while (n % divisor != 0) {\n        divisor += 1;\n    }\n    return divisor;",
        "grade-59": {
            "execution": 0
        },
        "36": "assert(n>0);\n    while(n%2==0) n = n/2;\n    if(n==1) return 1;\n    long largest = 1;\n    for(long i=3; i<=(sqrt(n)+1); i+=2) {\n        if(n%i==0) {\n            largest = i;\n            while(n%i==0) n = n/i;\n        }\n    }\n    if(n>largest) largest = n;\n    return largest;",
        "grade-36": {
            "execution": 0
        },
        "26": "// The largest divisor of n is n-1 if n is prime\n    long largest_divisor = n - 1;\n    // Check each value up to n-1\n    for (long i = largest_divisor; i > 0; i--) {\n        // Check if n divided by i is even\n        if (n % i == 0) {\n            // This is the largest divisor\n            largest_divisor = i;\n            // Skip to the next value\n            break;\n        }\n    }\n    return largest_divisor;",
        "grade-26": {
            "execution": 1
        },
        "185": "assert(n > 0);\n    for (long i = n-1; i > 0; i--) {\n        if (n % i == 0) return i;\n    }\n    return -1;",
        "grade-185": {
            "execution": 1
        },
        "147": "// Write your code here\n  long i=1;\n  long max=0;\n  long maxi=0;\n  while(i<=n)\n  {\n      if(n%i==0)\n      {\n          max=i;\n          maxi=i;\n      }\n      i++;\n  }\n  return maxi;",
        "grade-147": {
            "execution": 0
        },
        "22": "for (long i = n - 1; i > 0; i--) {\n    if (n % i == 0) {\n      return i;\n    }\n  }\n  return 0;",
        "grade-22": {
            "execution": 1
        },
        "159": "// Write your code here\n    long greatest_factor = 1;\n    for(long i = 2; i*i <= n; i++){\n        if(n%i == 0){\n            if(n/i > i){\n                greatest_factor = n/i;\n            }\n            else{\n                greatest_factor = i;\n            }\n        }\n    }\n    return greatest_factor;",
        "grade-159": {
            "execution": 0
        },
        "115": "// Start with the smallest possible divisor and work up to n/2\n  // So that we can skip even numbers\n  for (long i = 3; i <= n/2; i += 2) {\n    if (n % i == 0) {\n      return i;\n    }\n  }\n  return 1;",
        "grade-115": {
            "execution": 0
        },
        "8": "int divisor = 2;\n    while (n % divisor != 0 && divisor <= n) {\n        divisor++;\n    }\n    return divisor;",
        "grade-8": {
            "execution": 0
        },
        "7": "std::vector<long> divisors;\n    // check all numbers less than or equal to n/2\n    for (long i = 1; i <= n/2; i++) {\n        if (n % i == 0) {\n            divisors.push_back(i);\n        }\n    }\n    // return the largest divisor\n    return divisors.back();",
        "grade-7": {
            "execution": 1
        },
        "23": "// your code goes here\n  return 0;",
        "grade-23": {
            "execution": 0
        },
        "57": "assert(n >= 0);\n\tlong largest = -1;\n\tlong start = n / 2;\n\tfor (long i = start; i > 0; i--) {\n\t\tif (n % i == 0) {\n\t\t\tlargest = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn largest;",
        "grade-57": {
            "execution": 1
        },
        "62": "long result = n;\n    for (long i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            result = i;\n        }\n    }\n    return result;",
        "grade-62": {
            "execution": 0
        },
        "136": "for (long i = n-1; i >= 1; i--) {\n    if (n % i == 0) {\n      return i;\n    }\n  }\n  return 0;",
        "grade-136": {
            "execution": 1
        },
        "163": "// Your code here\n    if(n==1) return 1;\n    else {\n        long max=1;\n        for(long i=2;i<n;i++) {\n            if(n%i==0 && i>max) max=i;\n        }\n        return max;\n    }",
        "grade-163": {
            "execution": 1
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfloat triangle_area(long a, long h) {\n",
        "snippet": [
            "return (a*h)*0.5;\n\n}\n"
        ],
        "simplified": "Given length of a side and high return area for a triangle.",
        "task_id": "45",
        "120": "assert(h >= 0);\n    assert(a >= 0);\n    return h*a/2;",
        "grade-120": {
            "execution": 0
        },
        "17": "return ((a*h)/2);",
        "grade-17": {
            "execution": 0
        },
        "4": "//a=h/2*b\n\t//a*a=h*h/4*b*b\n\t//b=sqrt(a*a/(h*h/4))\n\tassert(a >= 0);\n\tassert(h >= 0);\n\treturn h*h*a/(4*h);",
        "grade-4": {
            "execution": 0
        },
        "150": "float area;\n  area = 1.0/2.0 * a * h;\n  return area;",
        "grade-150": {
            "execution": 1
        },
        "49": "return 1.0 / 2 * a * h;",
        "grade-49": {
            "execution": 1
        },
        "45": "float A;\n\t// Write your code here.\n\tA=(h*a)/2;\n\treturn A;",
        "grade-45": {
            "execution": 0
        },
        "38": "return ((a * h) / 2);",
        "grade-38": {
            "execution": 0
        },
        "23": "float area;\n    area = 0.5 * a * h;\n    return area;",
        "grade-23": {
            "execution": 1
        },
        "16": "assert(a > 0);\n  assert(h > 0);\n  return (1.0/2.0)*a*h;",
        "grade-16": {
            "execution": 1
        },
        "128": "float area = a * h / 2;\n\treturn area;",
        "grade-128": {
            "execution": 0
        },
        "188": "assert(a > 0 && h > 0);\n\treturn (float)0.5 * a * h;",
        "grade-188": {
            "execution": 1
        },
        "99": "float result = 0.5*(a*h);\n    return result;",
        "grade-99": {
            "execution": 1
        },
        "14": "// >>> triangle_area(10, 2)\n    // 10.0\n    return a * h / 2;",
        "grade-14": {
            "execution": 0
        },
        "112": "return (float)(a*h/2);",
        "grade-112": {
            "execution": 0
        },
        "76": "return float(a) * float(h) / 2;",
        "grade-76": {
            "execution": 1
        },
        "6": "float area = h*a/2;\nreturn area;",
        "grade-6": {
            "execution": 0
        },
        "37": "// your code here\n\treturn (float)0.5*a*h;",
        "grade-37": {
            "execution": 1
        },
        "40": "// (1 / 2) base * height\n    return (float) (a * h / 2);",
        "grade-40": {
            "execution": 0
        },
        "90": "// printf(\"%ld\", a);\n    // printf(\"%ld\", h);\n    return a * h / 2;",
        "grade-90": {
            "execution": 0
        },
        "115": "return a * h / 2;",
        "grade-115": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\nstd::vector<long> get_odd_collatz(long n) {\n",
        "snippet": [
            "    vector<int> out={1};\n    while (n!=1)\n    {\n        if (n%2==1) {out.push_back(n); n=n*3+1;}\n        else n=n/2;\n    }\n    sort(out.begin(),out.end());\n    return out;\n}\n"
        ],
        "simplified": "Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence. The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined as follows: start with any positive integer n. Then each term is obtained from the previous term as follows: if the previous term is even, the next term is one half of the previous term. If the previous term is odd, the next term is 3 times the previous term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1. Note: 1. Collatz(1) is [1]. 2. returned list sorted in increasing order.",
        "task_id": "123",
        "163": "std::vector<long> collatz = {1};\n    std::set<long> set_collatz;\n    set_collatz.insert(1);\n    // if n is 1, we return [1]\n    if (n == 1) {\n        return collatz;\n    }\n    while (true) {\n        // if n is odd, return 3*n+1\n        if (n % 2 != 0) {\n            n = 3*n + 1;\n            // if n is odd and n exists in set, return\n            if (set_collatz.find(n) != set_collatz.end()) {\n                return collatz;\n            }\n            set_collatz.insert(n);\n            collatz.push_back(n);\n        }\n        // if n is even, return n/2\n        else {\n            n = n/2;\n            // if n is even and n exists in set, return\n            if (set_collatz.find(n) != set_collatz.end()) {\n                return collatz;\n            }\n            set_collatz.insert(n);\n            collatz.push_back(n);\n        }\n    }",
        "grade-163": {
            "execution": 0
        },
        "28": "std::vector<long> res;\n\twhile (n > 1) {\n\t\tres.push_back(n);\n\t\tif (n % 2 == 0)\n\t\t\tn /= 2;\n\t\telse\n\t\t\tn = 3 * n + 1;\n\t}\n\tres.push_back(1);\n\treturn res;",
        "grade-28": {
            "execution": 0
        },
        "6": "std::vector<long> collatz;\n  while (n != 1) {\n    collatz.push_back(n);\n    if (n % 2) {\n      n = 3 * n + 1;\n    } else {\n      n /= 2;\n    }\n  }\n  collatz.push_back(1);\n  std::vector<long> odd_collatz;\n  for (auto v : collatz) {\n    if (v % 2) {\n      odd_collatz.push_back(v);\n    }\n  }\n  return odd_collatz;",
        "grade-6": {
            "execution": 0
        },
        "189": "std::vector<long> collatz_sequence;\n    collatz_sequence.push_back(n);\n    while(n!=1) {\n        if(n%2==0) {\n            n = n/2;\n        } else {\n            n = (3*n) + 1;\n        }\n        collatz_sequence.push_back(n);\n    }\n    std::vector<long> odd_collatz_sequence;\n    for(int i=0; i<collatz_sequence.size(); i++) {\n        if(collatz_sequence[i]%2!=0) {\n            odd_collatz_sequence.push_back(collatz_sequence[i]);\n        }\n    }\n    return odd_collatz_sequence;",
        "grade-189": {
            "execution": 0
        },
        "70": "if (n == 1) return {1};\n\tstd::vector<long> res;\n\tif (n % 2 == 1) {\n\t\tres.push_back(n);\n\t}\n\twhile (n != 1) {\n\t\tif (n % 2 == 0) {\n\t\t\tn /= 2;\n\t\t} else {\n\t\t\tn = n * 3 + 1;\n\t\t\tres.push_back(n);\n\t\t}\n\t}\n\treturn res;",
        "grade-70": {
            "execution": 0
        },
        "62": "std::vector<long> Collatz;\n    Collatz.push_back(n);\n    while(n!=1){\n        if(n%2==0){\n            n/=2;\n        }\n        else{\n            n=3*n+1;\n        }\n        Collatz.push_back(n);\n    }\n    std::vector<long> oddCollatz;\n    for(int i=0;i<Collatz.size();i++){\n        if(Collatz[i]%2==1){\n            oddCollatz.push_back(Collatz[i]);\n        }\n    }\n    return oddCollatz;",
        "grade-62": {
            "execution": 0
        },
        "57": "// Implement this function.\n    long n2=n;\n    long v_size=0;\n    std::vector<long> collatz_sequence;\n    while(n!=1){\n        if(n%2==0){\n            n=n/2;\n            collatz_sequence.push_back(n);\n            v_size++;\n        }\n        else{\n            n=3*n+1;\n            collatz_sequence.push_back(n);\n            v_size++;\n        }\n    }\n    std::vector<long> odd_collatz_sequence;\n    int count=0;\n    for(int i=0;i<v_size;i++){\n        if(collatz_sequence[i]%2!=0){\n            odd_collatz_sequence.push_back(collatz_sequence[i]);\n            count++;\n        }\n    }\n    odd_collatz_sequence.push_back(1);\n    return odd_collatz_sequence;",
        "grade-57": {
            "execution": 0
        },
        "35": "std::vector<long> answer;\n\tlong even_val;\n\tanswer.push_back(n);\n\twhile (n != 1) {\n\t\tif (n % 2 == 0) {\n\t\t\teven_val = n / 2;\n\t\t\tif (even_val % 2 != 0) {\n\t\t\t\tanswer.push_back(even_val);\n\t\t\t}\n\t\t\tn = even_val;\n\t\t}\n\t\telse {\n\t\t\tn = 3 * n + 1;\n\t\t\tanswer.push_back(n);\n\t\t}\n\t}\n\treturn answer;",
        "grade-35": {
            "execution": 0
        },
        "188": "std::vector<long> v;\n    int odd[100000] = {0};\n    int step = 0;\n    long num = n;\n    while(n != 1) {\n        if(n % 2 == 0) {\n            n = n / 2;\n        }\n        else {\n            n = 3 * n + 1;\n        }\n        odd[step] = n;\n        step++;\n    }\n    v.push_back(1);\n    if(num != 1) {\n        v.push_back(num);\n    }\n    for(int i = 0; i < step; i++) {\n        if(odd[i] % 2 != 0) {\n            v.push_back(odd[i]);\n        }\n    }\n    return v;",
        "grade-188": {
            "execution": 0
        },
        "26": "std::vector<long> result;\n  // Your code goes here.\n  std::vector<long> collatz;\n  // if input n is zero, return empty vector\n  if (n == 0) {\n    return result;\n  }\n  // get collatz sequence\n  while (n != 1) {\n    collatz.push_back(n);\n    if (n % 2 == 0) {\n      n = n / 2;\n    } else {\n      n = 3 * n + 1;\n    }\n  }\n  collatz.push_back(1);\n  // add all odd numbers in collatz sequence to result\n  for (auto n : collatz) {\n    if (n % 2 != 0) {\n      result.push_back(n);\n    }\n  }\n  return result;",
        "grade-26": {
            "execution": 0
        },
        "173": "std::vector<long> res;\n    if (n == 1) {\n        res.push_back(1);\n        return res;\n    }\n\n    for (long i = n; i != 1;) {\n        if (i % 2 != 0) {\n            res.push_back(i);\n        }\n        if (i % 2 == 0) {\n            i = i / 2;\n        } else {\n            i = (3 * i) + 1;\n        }\n    }\n    res.push_back(1);\n    std::sort(res.begin(), res.end());\n    return res;",
        "grade-173": {
            "execution": 1
        },
        "139": "std::vector<long> res;\n    if (n < 1) return res;\n    res.push_back(n);\n    while (n != 1) {\n        if (n % 2 == 0) {\n            n /= 2;\n        } else {\n            n = n * 3 + 1;\n        }\n        if (n % 2 != 0) {\n            res.push_back(n);\n        }\n    }\n    return res;",
        "grade-139": {
            "execution": 0
        },
        "22": "std::vector<long> collatz_seq;\n\tcollatz_seq.push_back(n);\n\twhile (n > 1) {\n\t\tif (n % 2 == 0) {\n\t\t\tn = n / 2;\n\t\t}\n\t\telse {\n\t\t\tn = (3 * n) + 1;\n\t\t}\n\t\tcollatz_seq.push_back(n);\n\t}\n\tstd::vector<long> collatz_odd_seq;\n\tstd::vector<long> collatz_even_seq;\n\tfor (int i = 0; i < collatz_seq.size(); i++) {\n\t\tif (collatz_seq[i] % 2 == 0) {\n\t\t\tcollatz_even_seq.push_back(collatz_seq[i]);\n\t\t}\n\t\telse {\n\t\t\tcollatz_odd_seq.push_back(collatz_seq[i]);\n\t\t}\n\t}\n\tstd::sort(collatz_odd_seq.begin(), collatz_odd_seq.end());\n\treturn collatz_odd_seq;",
        "grade-22": {
            "execution": 1
        },
        "151": "if (n == 1) {\n        return {1};\n    }\n    std::vector<long> sequence;\n    while (n > 1) {\n        sequence.push_back(n);\n        if (n % 2 == 0) {\n            n /= 2;\n        } else {\n            n = 3 * n + 1;\n        }\n    }\n    sequence.push_back(1);\n    std::vector<long> result;\n    for (auto &e : sequence) {\n        if (e % 2 == 1) {\n            result.push_back(e);\n        }\n    }\n    return result;",
        "grade-151": {
            "execution": 0
        },
        "108": "std::vector<long> result;\n    result.push_back(n);\n    while (n != 1) {\n        if (n % 2 == 0) {\n            n = n / 2;\n        } else {\n            n = (3 * n) + 1;\n        }\n        if (n % 2 != 0) {\n            result.push_back(n);\n        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;",
        "grade-108": {
            "execution": 0
        },
        "8": "std::vector<long> odd_numbers;\n    if (n <= 0) {\n        return odd_numbers;\n    }\n    // odd_numbers.push_back(n);\n    // For efficiency we don't push back the very first element as it is already odd\n    while (n != 1) {\n        odd_numbers.push_back(n);\n        if (n % 2) {\n            n = 3 * n + 1;\n        } else {\n            n /= 2;\n        }\n    }\n    odd_numbers.push_back(1);\n    return odd_numbers;",
        "grade-8": {
            "execution": 0
        },
        "7": "std::vector<long> collatz_list;\n    long start_number = n;\n    do{\n        if(start_number % 2 == 0){\n            start_number = start_number / 2;\n        }else{\n            start_number = 3 * start_number + 1;\n        }\n        if(start_number % 2 != 0)\n            collatz_list.push_back(start_number);\n    }while(start_number != 1);\n    std::sort(collatz_list.begin(), collatz_list.end());\n    return collatz_list;",
        "grade-7": {
            "execution": 0
        },
        "23": "std::vector<long> answer;\n    answer.push_back(n);\n    long current_num = n;\n    while (current_num != 1) {\n        if (current_num % 2 == 0) {\n            current_num = current_num / 2;\n        } else {\n            current_num = current_num * 3 + 1;\n        }\n        if (current_num % 2 != 0) {\n            answer.push_back(current_num);\n        }\n    }\n    answer.push_back(1);\n    return answer;",
        "grade-23": {
            "execution": 0
        },
        "55": "std::vector<long> collatz;\n  while (n > 1) {\n    collatz.push_back(n);\n    if (n % 2 == 0) {\n      n /= 2;\n    } else {\n      n = 3 * n + 1;\n    }\n  }\n  return collatz;",
        "grade-55": {
            "execution": 0
        },
        "59": "std::vector<long> seq;\n    while (n > 1) {\n        seq.push_back(n);\n        if (n % 2 == 0) {\n            n /= 2;\n        } else {\n            n = n * 3 + 1;\n        }\n    }\n    seq.push_back(1);\n    return seq;",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(', ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nstd::string match_parens(std::vector<std::string> lst) {\n",
        "snippet": [
            "    string l1=lst[0]+lst[1];\n    int i,count=0;\n    bool can=true;\n    for (i=0;i<l1.length();i++)\n        {\n            if (l1[i]=='(') count+=1;\n            if (l1[i]==')') count-=1;\n            if (count<0) can=false;\n        }\n    if (count!=0) return \"No\";\n    if (can==true) return \"Yes\";\n    l1=lst[1]+lst[0];\n    can=true;\n    for (i=0;i<l1.length();i++)\n        {\n            if (l1[i]=='(') count+=1;\n            if (l1[i]==')') count-=1;\n            if (count<0) can=false;\n        }\n    if (can==true) return \"Yes\";\n    return \"No\";\n}\n"
        ],
        "simplified": "You are given a list of two strings, both strings consist of open parentheses '(' or close parentheses ')' only. Your job is to check if it is possible to concatenate the two strings in some order, that the resulting string will be good. A string S is considered to be good if and only if all parentheses in S are balanced. For example: the string '(())()' is good, while the string '())' is not. Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.",
        "task_id": "119",
        "163": "int open = 0;\n    int close = 0;\n    for (auto &str : lst) {\n        for (auto &ch : str) {\n            if (ch == '(') {\n                open++;\n            } else {\n                close++;\n            }\n        }\n    }\n    std::string ret;\n    if (open == close) {\n        ret = \"Yes\";\n    } else {\n        ret = \"No\";\n    }\n    return ret;",
        "grade-163": {
            "execution": 0
        },
        "28": "int c1 = 0, c2 = 0;\n    for (int i = 0; i < lst[0].size(); i++) {\n        if (lst[0][i] == '(') {\n            c1++;\n        } else {\n            c1--;\n        }\n    }\n    for (int i = 0; i < lst[1].size(); i++) {\n        if (lst[1][i] == '(') {\n            c2++;\n        } else {\n            c2--;\n        }\n    }\n    if (c1 > 0 && c2 > 0 || c1 < 0 && c2 < 0)\n        return \"No\";\n    return \"Yes\";",
        "grade-28": {
            "execution": 0
        },
        "6": "// Your code here\n    int score = 0;\n    for (auto s : lst) {\n        for (auto c : s) {\n            if (c == '(') score++;\n            else score--;\n            if (score < 0) return \"No\";\n        }\n    }\n    return score == 0 ? \"Yes\" : \"No\";",
        "grade-6": {
            "execution": 0
        },
        "190": "std::string S;\n  for (auto p : lst) {\n    S += p;\n  }\n  std::stack<char> st;\n  for (auto p : S) {\n    if (p == '(') {\n      st.push(p);\n    } else {\n      if (st.empty()) return \"No\";\n      st.pop();\n    }\n  }\n  return st.empty() ? \"Yes\" : \"No\";",
        "grade-190": {
            "execution": 0
        },
        "70": "std::string ans = \"\";\n  std::vector<char> stk;\n  for (auto i : lst) {\n    for (auto j : i) {\n      if (j == '(') {\n        stk.push_back(j);\n      } else {\n        if (stk.size() > 0) {\n          stk.pop_back();\n        } else {\n          ans = \"No\";\n          break;\n        }\n      }\n    }\n  }\n  if (stk.size() > 0) {\n    ans = \"No\";\n  } else {\n    ans = \"Yes\";\n  }\n  return ans;",
        "grade-70": {
            "execution": 0
        },
        "62": "std::string open = \"(\";\n  std::string close = \")\";\n  if (lst[0][0] == close[0] && lst[1][0] == close[0]) {\n    return \"No\";\n  } else if (lst[0][0] == open[0] && lst[1][0] == open[0]) {\n    return \"Yes\";\n  } else if (lst[0][0] == open[0] && lst[1][0] == close[0]) {\n    return \"Yes\";\n  } else if (lst[0][0] == close[0] && lst[1][0] == open[0]) {\n    return \"Yes\";\n  }\n  return \"\";",
        "grade-62": {
            "execution": 0
        },
        "57": "// Assume that lst[0] and lst[1] are not empty\n  if (lst[0][0] == ')' || lst[1][0] == ')') return \"No\";\n  int opening_parens_left = 0;\n  for (int i = 0; i < lst[0].size(); i++) {\n    if (lst[0][i] == '(') opening_parens_left++;\n    else opening_parens_left--;\n    if (opening_parens_left < 0) return \"No\";\n  }\n  for (int i = 0; i < lst[1].size(); i++) {\n    if (lst[1][i] == '(') opening_parens_left++;\n    else opening_parens_left--;\n    if (opening_parens_left < 0) return \"No\";\n  }\n  if (opening_parens_left > 0) return \"No\";\n  return \"Yes\";",
        "grade-57": {
            "execution": 0
        },
        "35": "//my solution\n    std::string first = lst[0];\n    std::string second = lst[1];\n    int num_open = 0;\n    int num_close = 0;\n    for(int i = 0; i < first.length(); i++){\n        if(first[i] == '('){\n            num_open++;\n        }\n        else{\n            num_close++;\n        }\n    }\n    for(int i = 0; i < second.length(); i++){\n        if(second[i] == '('){\n            num_open++;\n        }\n        else{\n            num_close++;\n        }\n    }\n    if(num_open == num_close){\n        return \"Yes\";\n    }\n    else{\n        return \"No\";\n    }\n    //end my solution",
        "grade-35": {
            "execution": 0
        },
        "189": "int sum1 = 0;\n  int sum2 = 0;\n  for (int i = 0; i < lst[0].size(); i++) {\n    if (lst[0][i] == '(') {\n      sum1++;\n    } else {\n      sum1--;\n    }\n  }\n  for (int i = 0; i < lst[1].size(); i++) {\n    if (lst[1][i] == '(') {\n      sum2++;\n    } else {\n      sum2--;\n    }\n  }\n  if (sum1 == 0 && sum2 == 0) {\n    return \"Yes\";\n  } else if (sum1 > 0 && sum2 < 0) {\n    if ((-1 * sum2) % 2 == 0) {\n      return \"Yes\";\n    } else {\n      return \"No\";\n    }\n  } else if (sum1 < 0 && sum2 > 0) {\n    if ((-1 * sum1) % 2 == 0) {\n      return \"Yes\";\n    } else {\n      return \"No\";\n    }\n  } else {\n    return \"No\";\n  }",
        "grade-189": {
            "execution": 0
        },
        "26": "std::string output_string = \"\";\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n            output_string += lst[i][j];\n        }\n    }\n    // printf(\"%s\\n\", output_string.c_str());\n    int open_parentheses = 0;\n    int close_parentheses = 0;\n    for (int i = 0; i < output_string.size(); i++) {\n        if (output_string[i] == '(') {\n            open_parentheses++;\n        } else {\n            close_parentheses++;\n        }\n        if (close_parentheses > open_parentheses) {\n            return \"No\";\n        }\n    }\n    if (open_parentheses == close_parentheses) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }",
        "grade-26": {
            "execution": 0
        },
        "174": "std::string str = \"\";\n  for (auto e : lst) {\n    str += e;\n  }\n  std::stack<char> s;\n  for (int i = 0; i < str.length(); i++) {\n    if (str[i] == '(') {\n      s.push(str[i]);\n    } else {\n      if (s.empty()) {\n        return \"No\";\n      }\n      s.pop();\n    }\n  }\n  if (s.empty()) {\n    return \"Yes\";\n  }\n  return \"No\";",
        "grade-174": {
            "execution": 0
        },
        "139": "// your code here\n  std::string parens_one;\n  std::string parens_two;\n  int count_one = 0;\n  int count_two = 0;\n  for(int i = 0; i < lst.size(); i++){\n    if(i == 0){\n      parens_one = lst[i];\n    }\n    else if(i == 1){\n      parens_two = lst[i];\n    }\n  }\n  for(int i = 0; i < parens_one.length(); i++){\n    if(parens_one[i] == '('){\n      count_one++;\n    }\n    else if(parens_one[i] == ')'){\n      count_one--;\n    }\n  }\n  for(int i = 0; i < parens_two.length(); i++){\n    if(parens_two[i] == '('){\n      count_two++;\n    }\n    else if(parens_two[i] == ')'){\n      count_two--;\n    }\n  }\n  if(count_one == 0 && count_two == 0){\n    return \"Yes\";\n  }\n  return \"No\";",
        "grade-139": {
            "execution": 0
        },
        "22": "auto openParen = 0;\n  auto closeParen = 0;\n  for (auto item : lst) {\n    for (auto ch : item) {\n      if (ch == '(') {\n        openParen++;\n      } else {\n        closeParen++;\n      }\n    }\n  }\n  if (openParen == closeParen) {\n    return \"Yes\";\n  }\n  return \"No\";",
        "grade-22": {
            "execution": 0
        },
        "151": "// your code here\n    if(lst[0].length() != lst[1].length())\n      return \"No\";\n    std::stack<char> s;\n    for(auto a: lst[0]){\n      if(a == '(')\n        s.push(a);\n      else\n        if(s.empty())\n          return \"No\";\n        else\n          s.pop();\n    }\n    for(auto a: lst[1]){\n      if(a == '(')\n        s.push(a);\n      else\n        if(s.empty())\n          return \"No\";\n        else\n          s.pop();\n    }\n    return \"Yes\";",
        "grade-151": {
            "execution": 0
        },
        "108": "int open = 0;\n    for (std::string string : lst) {\n        for (char c : string) {\n            if (c == '(') {\n                open++;\n            } else {\n                open--;\n            }\n            if (open < 0) {\n                return \"No\";\n            }\n        }\n    }\n    return (open == 0) ? \"Yes\" : \"No\";",
        "grade-108": {
            "execution": 0
        },
        "8": "int count1 = 0;\n  int count2 = 0;\n  for (int i = 0; i < lst[0].size(); i++) {\n    if (lst[0][i] == '(') {\n      count1++;\n    } else {\n      count1--;\n    }\n  }\n  for (int i = 0; i < lst[1].size(); i++) {\n    if (lst[1][i] == '(') {\n      count2++;\n    } else {\n      count2--;\n    }\n  }\n  if (count1 < 0 && count2 > 0) {\n    int sum = count1 + count2;\n    if (sum < 0) {\n      return \"No\";\n    } else {\n      return \"Yes\";\n    }\n  } else if (count1 > 0 && count2 < 0) {\n    int sum = count1 + count2;\n    if (sum > 0) {\n      return \"No\";\n    } else {\n      return \"Yes\";\n    }\n  } else if (count1 == 0 && count2 == 0) {\n    return \"Yes\";\n  } else {\n    return \"No\";\n  }",
        "grade-8": {
            "execution": 0
        },
        "7": "int n = lst.size();\n    std::string left = lst[0];\n    std::string right = lst[1];\n    std::string full = \"\";\n    full = left + right;\n    int count_left = std::count(full.begin(), full.end(), '(');\n    int count_right = std::count(full.begin(), full.end(), ')');\n    int diff = count_left - count_right;\n    if (count_left != count_right) {\n        return \"No\";\n    }\n    else {\n        for (int i = 0; i < left.size(); i++) {\n            if (left[i] == '(') {\n                if (count_left > 0) {\n                    count_left--;\n                }\n                else {\n                    return \"No\";\n                }\n            }\n            else {\n                if (count_right > 0) {\n                    count_right--;\n                }\n                else {\n                    return \"No\";\n                }\n            }\n        }\n        for (int i = 0; i < right.size(); i++) {\n            if (right[i] == '(') {\n                if (count_left > 0) {\n                    count_left--;\n                }\n                else {\n                    return \"No\";\n                }\n            }\n            else {\n                if (count_right > 0) {\n                    count_right--;\n                }\n                else {\n                    return \"No\";\n                }\n            }\n        }\n        return \"Yes\";\n    }",
        "grade-7": {
            "execution": 0
        },
        "23": "std::string ans = \"\";\n    int open = 0;\n    int close = 0;\n    for (auto str : lst) {\n        for (auto c : str) {\n            if (c == '(') {\n                open++;\n            } else {\n                close++;\n            }\n        }\n    }\n    if (open == close) {\n        ans = \"Yes\";\n    } else {\n        ans = \"No\";\n    }\n    return ans;",
        "grade-23": {
            "execution": 0
        },
        "55": "// your code here\n    std::string str1 = lst[0];\n    std::string str2 = lst[1];\n    int op,cl;\n    op = cl = 0;\n    for(int i=0;i<str1.length();i++){\n        if(str1[i] == '(')\n            op++;\n        else\n            cl++;\n    }\n    for(int i=0;i<str2.length();i++){\n        if(str2[i] == '(')\n            op++;\n        else\n            cl++;\n    }\n    if(op == cl)\n        return \"Yes\";\n    else\n        return \"No\";",
        "grade-55": {
            "execution": 0
        },
        "59": "std::string f1 = lst[0];\n    std::string f2 = lst[1];\n    int count1 = 0;\n    int count2 = 0;\n    for(int i = 0; i < f1.length(); i++) {\n        if(f1[i] == '(') {\n            count1++;\n        } else {\n            count1--;\n        }\n    }\n    for(int i = 0; i < f2.length(); i++) {\n        if(f2[i] == '(') {\n            count2++;\n        } else {\n            count2--;\n        }\n    }\n    if(count1 < 0 || count2 < 0) {\n        return \"No\";\n    }\n    int min = count1;\n    if(count2 < min) {\n        min = count2;\n    }\n    for(int i = 0; i < min; i++) {\n        f1 += ')';\n        f2 += ')';\n    }\n    std::stack<char> st;\n    for(int i = 0; i < f1.length(); i++) {\n        if(f1[i] == '(') {\n            st.push(f1[i]);\n        } else {\n            if(st.empty()) {\n                return \"No\";\n            }\n            st.pop();\n        }\n    }\n    while(!st.empty()) {\n        if(st.top() == '(') {\n            st.pop();\n        } else {\n            return \"No\";\n        }\n    }\n    for(int i = 0; i < f2.length(); i++) {\n        if(f2[i] == '(') {\n            st.push(f2[i]);\n        } else {\n            if(st.empty()) {\n                return \"No\";\n            }\n            st.pop();\n        }\n    }\n    while(!st.empty()) {\n        if(st.top() == '(') {\n            st.pop();\n        } else {\n            return \"No\";\n        }\n    }\n    return \"Yes\";",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns True if there are two distinct elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long> l) {\n",
        "snippet": [
            "    for (int i=0;i<l.size();i++)\n    for (int j=i+1;j<l.size();j++)\n    if (l[i]+l[j]==0) return true;\n    return false;\n}\n"
        ],
        "simplified": "pairs_sum_to_zero takes a list of integers as an input. it returns True if there are two distinct elements in the list that sum to zero, and False otherwise.",
        "task_id": "43",
        "168": "int n = l.size();\n    unordered_set<int> s;\n    for(int i=0;i<n;i++){\n        if(s.find(-l[i])!=s.end()){\n            return true;\n        }\n        s.insert(l[i]);\n    }\n    return false;",
        "grade-168": {
            "execution": 0
        },
        "28": "std::sort(l.begin(), l.end());\n    int start = 0;\n    int end = l.size() - 1;\n    while (start < end) {\n        long sum = l[start] + l[end];\n        if (sum == 0) {\n            return true;\n        } else if (sum < 0) {\n            start++;\n        } else {\n            end--;\n        }\n    }\n    return false;",
        "grade-28": {
            "execution": 1
        },
        "6": "sort(l.begin(), l.end()); \n    int n = l.size();\n    for(int i = 0; i < n; i++)\n    {\n        int left = i + 1;\n        int right = n - 1;\n        int x = l[i];\n        while(left < right)\n        {\n            if(x + l[left] + l[right] == 0)\n            {\n                return true;\n            }\n            else if(x + l[left] + l[right] < 0)\n            {\n                left++;\n            }\n            else\n            {\n                right--;\n            }\n        }\n    }\n    return false;",
        "grade-6": {
            "execution": 0
        },
        "197": "if (l.size() < 2) {\n    return false;\n  }\n  std::unordered_set<long> s;\n  for (auto elem : l) {\n    if (s.find(-elem) != s.end()) {\n      return true;\n    }\n    s.insert(elem);\n  }\n  return false;",
        "grade-197": {
            "execution": 1
        },
        "70": "// sort the list\n    std::sort(l.begin(), l.end());\n    // get the size of the vector\n    int size = l.size();\n    // get the minimum value\n    int min = l[0];\n    // get the maximum value\n    int max = l[size - 1];\n    // create a set to store the elements in the vector\n    std::set<long> l_set;\n    // create a pair\n    std::pair<std::set<long>::iterator, bool> ret;\n    // iterate through the vector\n    for (int i = 0; i < size; i++) {\n        // insert the elements into the set\n        ret = l_set.insert(l[i]);\n        // if the element has already been inserted, return true\n        if (ret.second == false) {\n            return true;\n        }\n    }\n    // check for zero in the vector\n    for (int i = 0; i < size; i++) {\n        if (l[i] == 0) {\n            return true;\n        }\n    }\n    // check for -ve and +ve element pair\n    if (min < 0 && max > 0) {\n        return true;\n    }\n    // return false if all above cases fail\n    return false;",
        "grade-70": {
            "execution": 0
        },
        "62": "// your code here\n    return false;",
        "grade-62": {
            "execution": 0
        },
        "57": "// make sure not to modify the original list!\n    std::vector<long> l_copy = l;\n    std::sort(l_copy.begin(), l_copy.end());\n    for (auto i = l_copy.begin(); i != l_copy.end(); i++) {\n        if (std::binary_search(i + 1, l_copy.end(), -(*i))) {\n            return true;\n        }\n    }\n    return false;",
        "grade-57": {
            "execution": 1
        },
        "35": "std::sort(l.begin(), l.end());\n  int s = 0;\n  int f = l.size() - 1;\n  while (s < f) {\n    if (l[s] + l[f] > 0) {\n      f--;\n    } else if (l[s] + l[f] < 0) {\n      s++;\n    } else {\n      return true;\n    }\n  }\n  return false;",
        "grade-35": {
            "execution": 1
        },
        "196": "std::sort(l.begin(), l.end());\n  auto it = l.begin();\n  while (it != l.end()) {\n    long x = *it;\n    long to_find = -x;\n    it++;\n    auto it2 = std::lower_bound(it, l.end(), to_find);\n    if (it2 != l.end() && *it2 == to_find) {\n      return true;\n    }\n  }\n  return false;",
        "grade-196": {
            "execution": 1
        },
        "26": "// You may add more variables to this function.\n    // You may add more functions to this file.\n    int n = l.size();\n    int i, j;\n    int flag = 0;\n    for(i = 0; i < n; i++)\n    {\n        for(j = i+1; j < n; j++)\n        {\n            if(l[i] + l[j] == 0)\n            {\n                flag = 1;\n                break;\n            }\n        }\n    }\n    if(flag == 1)\n        return true;\n    else\n        return false;",
        "grade-26": {
            "execution": 1
        },
        "181": "// WRITE YOUR CODE HERE\n    long i,j,sum=0;\n    for(i=0;i<l.size();i++)\n    {\n        for(j=i+1;j<l.size();j++)\n        {\n            sum=l[i]+l[j];\n            if(sum==0)\n            {\n                return true;\n            }\n        }\n    }\n    return false;",
        "grade-181": {
            "execution": 1
        },
        "142": "// Implement your solution here\n  std::sort(l.begin(), l.end());\n  for (int i = 0; i < l.size(); i++) {\n    int l_idx = i + 1;\n    int r_idx = l.size() - 1;\n    while (l_idx < r_idx) {\n      int sum = l[i] + l[l_idx] + l[r_idx];\n      if (sum == 0) {\n        return true;\n      } else if (sum < 0) {\n        l_idx++;\n      } else {\n        r_idx--;\n      }\n    }\n  }\n  return false;",
        "grade-142": {
            "execution": 0
        },
        "22": "return true;",
        "grade-22": {
            "execution": 0
        },
        "154": "for (int i = 0; i < l.size(); i++) {\n\t\tfor (int j = i + 1; j < l.size(); j++) {\n\t\t\tif (l[i] + l[j] == 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;",
        "grade-154": {
            "execution": 1
        },
        "109": "std::unordered_set<long> s;\n  // start coding here\n  if(l.size()<2)\n    return false;\n  for(auto num:l)\n  {\n    if(s.find(-num)!=s.end())\n      return true;\n    s.insert(num);\n  }\n  return false;",
        "grade-109": {
            "execution": 1
        },
        "8": "std::set<long> st;\n    std::vector<long>::iterator it;\n    it = l.begin();\n    while(it != l.end()){\n        if(st.find(*it) != st.end()){\n            return true;\n        }else{\n            st.insert(*it);\n        }\n        it++;\n    }\n    return false;\n    // TODO: implement this function",
        "grade-8": {
            "execution": 0
        },
        "7": "std::unordered_set<long> s;\n    for (auto &e : l) {\n        if (s.find(-e) != s.end()) {\n            return true;\n        }\n        s.insert(e);\n    }\n    return false;",
        "grade-7": {
            "execution": 1
        },
        "23": "std::vector<long> elems;\n    long temp;\n    bool flag = false;\n    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n    while (i < j) {\n        temp = l[i] + l[j];\n        if (temp < 0) {\n            i++;\n        } else if (temp > 0) {\n            j--;\n        } else {\n            flag = true;\n            break;\n        }\n    }\n    return flag;",
        "grade-23": {
            "execution": 1
        },
        "55": "// TODO: please implement your solution\n\treturn false;",
        "grade-55": {
            "execution": 0
        },
        "59": "int n = l.size();\n    if(n<2)\n        return false;\n    // Initializing a hash table.\n    std::unordered_map<long, bool> umap;\n    for(auto elem: l){\n        if(umap.find(-elem) != umap.end())\n            return true;\n        umap[elem] = true;\n    }\n    return false;",
        "grade-59": {
            "execution": 1
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\nlong fruit_distribution(std::string s, long n) {\n",
        "snippet": [
            "    string num1=\"\",num2=\"\";\n    int is12;\n    is12=0;\n    for (int i=0;i<s.size();i++)\n        \n        if (s[i]>=48 and s[i]<=57)\n        {\n            if (is12==0) num1=num1+s[i];\n            if (is12==1) num2=num2+s[i];\n        }\n        else\n          if (is12==0 and num1.length()>0) is12=1;\n    return n-atoi(num1.c_str())-atoi(num2.c_str());\n\n}\n"
        ],
        "simplified": "In this task, you will be given a string that represents a number of apples and oranges that are distributed in a basket of fruit this basket contains apples, oranges, and mango fruits. Given the string that represents the total number of the oranges and apples and an integer that represent the total number of the fruits in the basket return the number of the mango fruits in the basket.",
        "task_id": "67",
        "164": "assert(s.length()>0);\n    assert(n>0);\n    std::vector<long> aux;\n    std::stringstream ss(s);\n    for(long i; ss >> i;){\n        aux.push_back(i);\n        if(ss.peek() == ' ')\n            ss.ignore();\n    }\n    return n - aux[0] - aux[1];",
        "grade-164": {
            "execution": 0
        },
        "29": "// your code\n\tlong mango = 0;\n\tlong apples = 0;\n\tlong oranges = 0;\n\tstd::string apple_string = \"apples\";\n\tstd::string orange_string = \"oranges\";\n\tstd::string temp = \"\";\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (s[i] != ' ') {\n\t\t\ttemp += s[i];\n\t\t}\n\t\telse {\n\t\t\tif (temp.find(apple_string) != std::string::npos) {\n\t\t\t\ttemp.pop_back();\n\t\t\t\ttemp.pop_back();\n\t\t\t\ttemp.pop_back();\n\t\t\t\ttemp.pop_back();\n\t\t\t\ttemp.pop_back();\n\t\t\t\tapples = atoi(temp.c_str());\n\t\t\t\ttemp = \"\";\n\t\t\t}\n\t\t\telse if (temp.find(orange_string) != std::string::npos) {\n\t\t\t\ttemp.pop_back();\n\t\t\t\ttemp.pop_back();\n\t\t\t\ttemp.pop_back();\n\t\t\t\ttemp.pop_back();\n\t\t\t\ttemp.pop_back();\n\t\t\t\ttemp.pop_back();\n\t\t\t\toranges = atoi(temp.c_str());\n\t\t\t\ttemp = \"\";\n\t\t\t}\n\t\t}\n\t}\n\tmango = n - apples - oranges;\n\treturn mango;",
        "grade-29": {
            "execution": 0
        },
        "6": "int i, j, x;\n    std::string a, b;\n    i = 0;\n    while(s[i] != ' ')\n    {\n        a += s[i];\n        i++;\n    }\n    i += 5;\n    while(s[i] != ' ')\n    {\n        b += s[i];\n        i++;\n    }\n    x = std::stoi(a) + std::stoi(b);\n    return n - x;",
        "grade-6": {
            "execution": 0
        },
        "190": "long n1=std::count(s.begin(),s.end(),'a');\n\tlong n2=std::count(s.begin(),s.end(),'o');\n\t//std::cout<<\"n1= \"<<n1<<std::endl;\n\t//std::cout<<\"n2= \"<<n2<<std::endl;\n\treturn n-(n1+n2);",
        "grade-190": {
            "execution": 0
        },
        "71": "// Write your code here\n    // To print results to the standard output you can use std::cout\n    // Example: std::cout << \"Hello world!\";\n    int i = 0;\n    int c = 0;\n    while(i < s.length()){\n        if(s[i] == 'a'){\n            i+=6;\n            c++;\n        }\n        else if(s[i] == 'o'){\n            i+=7;\n            c++;\n        }\n        else{\n            i++;\n        }\n    }\n    return n - c;",
        "grade-71": {
            "execution": 0
        },
        "63": "// your code here\n    std::vector<std::string> result;\n    std::stringstream check1(s);\n    std::string intermediate;\n    while(getline(check1, intermediate, ' ')) {\n        result.push_back(intermediate);\n    }\n    if(result[0] == \"0\") {\n        return n - 1;\n    } else {\n        return n - std::stoi(result[0]) - std::stoi(result[2]);\n    }",
        "grade-63": {
            "execution": 0
        },
        "58": "long apples = 0, oranges = 0;\n    s = s.substr(0, s.find(\" \"));\n    apples = std::stol(s);\n    oranges = std::stol(s.substr(s.find(\" \") + 1, s.length()));\n    return n - apples - oranges;",
        "grade-58": {
            "execution": 0
        },
        "36": "// your code here\n\t//int pos1, pos2;\n\t//int a, b;\n\tstd::string a = \"0\";\n\tstd::string b = \"0\";\n\tint i = 0;\n\t//while (s[i] != ' ')\n\t//{\n\t//\tpos1 = i;\n\t//\ti++;\n\t//}\n\t//pos2 = i;\n\t//while (s[i] != ' ')\n\t//{\n\t//\tpos2 = i;\n\t//\ti++;\n\t//}\n\t//for (int j = 0; j < pos1; j++)\n\t//{\n\t//\ta[j] = s[j];\n\t//}\n\t//for (int j = pos2 + 1; j < s.length(); j++)\n\t//{\n\t//\tb[j] = s[j];\n\t//}\n\t//a = stoi(a);\n\t//b = stoi(b);\n\t//printf(\"%d\", a);\n\tstd::string token;\n\tfor (int i = 0; i < s.length(); i++)\n\t{\n\t\tif (s[i] == ' ')\n\t\t{\n\t\t\tfor (int j = 0; j < i; j++)\n\t\t\t{\n\t\t\t\ta[j] = s[j];\n\t\t\t}\n\t\t\tint k = 0;\n\t\t\tfor (int j = i + 6; j < s.length(); j++)\n\t\t\t{\n\t\t\t\tb[k] = s[j];\n\t\t\t\tk++;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\tint a1 = std::stoi(a);\n\tint b1 = std::stoi(b);\n\t//printf(\"%d%d\", a1, b1);\n\treturn n - a1 - b1;",
        "grade-36": {
            "execution": 0
        },
        "189": "std::cout << \"------------------------------------------\" << std::endl;\n    std::cout << \"input string : \" << s << std::endl;\n    std::cout << \"total number of fruits : \" << n << std::endl;\n    long num_apples = 0;\n    long num_oranges = 0;\n    long num_mangoes = 0;\n    long tot = 0;\n    std::vector<std::string> split_str;\n    std::string temp;\n    std::stringstream ss(s);\n    while(std::getline(ss, temp, ' ')){\n        if(temp != \"and\"){\n            split_str.push_back(temp);\n        }\n    }\n    std::cout << \"split string : \";\n    for(int i = 0; i < split_str.size(); i++){\n        std::cout << split_str[i] << \" \";\n    }\n    std::cout << std::endl;\n    num_apples = stoi(split_str[0]);\n    num_oranges = stoi(split_str[2]);\n    std::cout << \"number of apples : \" << num_apples << std::endl;\n    std::cout << \"number of oranges : \" << num_oranges << std::endl;\n    num_mangoes = n - num_apples - num_oranges;\n    std::cout << \"number of mangoes : \" << num_mangoes << std::endl;\n    std::cout << \"------------------------------------------\" << std::endl;\n    return num_mangoes;",
        "grade-189": {
            "execution": 1
        },
        "27": "long x,y;\n    sscanf(s.c_str(),\"%ld apples and %ld oranges\",&x,&y);\n    return n - x - y;",
        "grade-27": {
            "execution": 1
        },
        "174": "int apple = 0, orange = 0;\n    for (auto x : s) {\n        if (x == 'a') {\n            apple++;\n        } else if (x == 'o') {\n            orange++;\n        }\n    }\n    return n - apple - orange;",
        "grade-174": {
            "execution": 0
        },
        "140": "long apples, oranges;\n\tsscanf(s.c_str(), \"%ld apples and %ld oranges\", &apples, &oranges);\n\treturn n - apples - oranges;",
        "grade-140": {
            "execution": 1
        },
        "22": "int i = 0;\n    int j = 0;\n    int index = 0;\n    std::string apple = \"apples\";\n    std::string orange = \"oranges\";\n    int sum = 0;\n    while(s[i] != 'a')\n    {\n        i++;\n    }\n    while(apple[j] != '\\0')\n    {\n        if(s[i] == apple[j])\n        {\n            i++;\n            j++;\n        }\n        else\n        {\n            break;\n        }\n    }\n    if(apple[j] == '\\0')\n    {\n        while(s[i] != ' ')\n        {\n            sum = sum * 10 + (s[i] - '0');\n            i++;\n        }\n    }\n    j = 0;\n    while(s[i] != 'o')\n    {\n        i++;\n    }\n    while(orange[j] != '\\0')\n    {\n        if(s[i] == orange[j])\n        {\n            i++;\n            j++;\n        }\n        else\n        {\n            break;\n        }\n    }\n    if(orange[j] == '\\0')\n    {\n        while(s[i] != ' ')\n        {\n            sum = sum * 10 + (s[i] - '0');\n            i++;\n        }\n    }\n    sum = n - sum;\n    return sum;",
        "grade-22": {
            "execution": 0
        },
        "152": "std::vector<std::string> v;\n    std::stringstream ss(s);\n    std::string temp;\n    while(ss >> temp)\n        v.push_back(temp);\n    std::string a = v[0];\n    std::string b = v[2];\n    std::string c = v[3];\n    std::string d = v[4];\n    long e = std::stol(a);\n    long f = std::stol(b);\n    long g = std::stol(c);\n    long h = std::stol(d);\n    long i = n - e - g;\n    long j = n - f - h;\n    if(i > j)\n        return i;\n    else if(j > i)\n        return j;\n    else\n        return i;",
        "grade-152": {
            "execution": 0
        },
        "109": "std::string apples = s.substr(0, s.find(\"apples\"));\n    std::string oranges = s.substr(s.find(\"oranges\"));\n    std::string a = \"\", o = \"\";\n    for (int i = 0; i < apples.size(); i++) {\n        if (apples[i] >= '0' && apples[i] <= '9')\n            a += apples[i];\n    }\n    for (int i = 0; i < oranges.size(); i++) {\n        if (oranges[i] >= '0' && oranges[i] <= '9')\n            o += oranges[i];\n    }\n    long mango = n - atoi(a.c_str()) - atoi(o.c_str());\n    return mango;",
        "grade-109": {
            "execution": 0
        },
        "8": "//std::string::iterator it = find(s.begin(), s.end(), ' ');\n\tstd::string apple = s.substr(0, s.find(\" \"));\n\tstd::string orange = s.substr(s.find(\" and \") + 5, s.find(\" \", s.find(\" and \") + 5) - s.find(\" and \") - 5);\n\treturn n - stoi(apple) - stoi(orange);",
        "grade-8": {
            "execution": 1
        },
        "7": "// Write your code here\n\t// It's main function. Don't erase this function.\n\tint num = 0;\n\tint i = 0;\n\tfor (int j = 0; j < s.length(); j++) {\n\t\tif (s[j] == ' ') {\n\t\t\ti = j + 1;\n\t\t\twhile (s[i] != ' ') {\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tnum = num + std::stoi(s.substr(j + 1, i - j - 1));\n\t\t}\n\t}\n\tint a = n - num;\n\treturn a;",
        "grade-7": {
            "execution": 0
        },
        "23": "// write your code here\n  return -1;",
        "grade-23": {
            "execution": 0
        },
        "56": "std::stringstream ss(s);\n  std::string temp;\n  long a, o;\n  ss >> a >> temp >> temp >> o >> temp;\n  return n - a - o;",
        "grade-56": {
            "execution": 1
        },
        "60": "int apples=0, oranges=0;\n\tfor(int i=0;i<s.length();i++){\n\t\tif(s[i] == 'a'){\n\t\t\twhile(s[i] != ' '){\n\t\t\t\ti++;\n\t\t\t}\n\t\t\twhile(s[i] != ' '){\n\t\t\t\tapples = (apples*10) + (s[i] - '0');\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t\tif(s[i] == 'o'){\n\t\t\twhile(s[i] != ' '){\n\t\t\t\ti++;\n\t\t\t}\n\t\t\twhile(s[i] != ' '){\n\t\t\t\toranges = (oranges*10) + (s[i] - '0');\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\treturn n - apples - oranges;",
        "grade-60": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n",
        "snippet": [
            "    string out=\"0\";\n    for (int i=1;i<=n;i++)\n    out=out+\" \"+to_string(i);\n    return out;\n}\n"
        ],
        "simplified": "Return a string containing space-delimited numbers starting from 0 upto n inclusive.",
        "task_id": "15",
        "180": "// write your code here.\n    std::stringstream ss;\n    for(int i=0;i<=n;i++){\n        ss<<i<<\" \";\n    }\n    std::string s;\n    s=ss.str();\n    return s;",
        "grade-180": {
            "execution": 0
        },
        "28": "std::string res=\"\";\n   for(int i=0;i<=n;i++)\n   {\n       res+=std::to_string(i);\n       res+=\" \";\n   }\n   return res;",
        "grade-28": {
            "execution": 0
        },
        "6": "std::stringstream ss;\n    for (int i = 0; i <= n; i++) {\n        ss << i << \" \";\n    }\n    return ss.str();",
        "grade-6": {
            "execution": 0
        },
        "76": "std::string result;\n    for (int i = 0; i <= n; i++) {\n        result += std::to_string(i) + ' ';\n    }\n    return result;",
        "grade-76": {
            "execution": 0
        },
        "65": "// Enter code here.\n  // TEST ::\n  //assert(string_sequence(0) == \"0\");\n  //assert(string_sequence(5) == \"0 1 2 3 4 5\");\n  //assert(string_sequence(9) == \"0 1 2 3 4 5 6 7 8 9\");\n  //assert(string_sequence(10) == \"0 1 2 3 4 5 6 7 8 9 10\");\n  //assert(string_sequence(15) == \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\");\n  std::stringstream ss;\n  for(long i = 0; i <= n; i++) {\n    ss << i << \" \";\n  }\n  std::string s = ss.str();\n  return s.substr(0, s.size() - 1);",
        "grade-65": {
            "execution": 1
        },
        "59": "std::string ans;\n\tfor(int i=0;i<=n;i++)\n\t{\n\t\tstd::string t=std::to_string(i);\n\t\tans+=t;\n\t\tans+=\" \";\n\t}\n\treturn ans;",
        "grade-59": {
            "execution": 0
        },
        "35": "std::string result = \"\";\n  for (int i = 0; i <= n; i++) {\n    result += std::to_string(i) + \" \";\n  }\n  return result;",
        "grade-35": {
            "execution": 0
        },
        "26": "std::string result;\n\tfor (int i = 0; i <= n; i++) {\n\t\tresult += std::to_string(i);\n\t\tif (i < n) {\n\t\t\tresult += \" \";\n\t\t}\n\t}\n\treturn result;",
        "grade-26": {
            "execution": 1
        },
        "190": "std::stringstream ss;\n\t\tfor (long i = 0; i <= n; i++) {\n\t\t\tss << i << \" \";\n\t\t}\n\t\tstd::string result = ss.str();\n\t\treturn result.substr(0, result.size() - 1);",
        "grade-190": {
            "execution": 1
        },
        "151": "long i;\n\tstd::string ans=\"\";\n\tfor(i=0;i<=n;i++)\n\t{\n\t\tans=ans+std::to_string(i)+\" \";\n\t}\n\treturn ans;",
        "grade-151": {
            "execution": 0
        },
        "22": "std::string sequence;\n  if (n == 0) {\n    sequence = \"0\";\n  } else {\n    for (size_t i = 0; i <= n; i++) {\n      if (i == 0) {\n        sequence = std::to_string(i);\n      } else {\n        sequence = sequence + \" \" + std::to_string(i);\n      }\n    }\n  }\n  return sequence;",
        "grade-22": {
            "execution": 1
        },
        "167": "assert(n >= 0);\n    std::stringstream ss;\n    for (int i = 0; i <= n; i++) {\n        ss << i << \" \";\n    }\n    std::string mystr = ss.str();\n    //  std::cout << mystr;\n    return mystr;",
        "grade-167": {
            "execution": 0
        },
        "117": "return n==0 ? \"0\" : string_sequence(n-1) + \" \" + std::to_string(n);",
        "grade-117": {
            "execution": 1
        },
        "8": "std::stringstream ss;\nfor (int i = 0; i <= n; i++)\n{\nss << i << \" \";",
        "grade-8": {
            "execution": 0
        },
        "7": "std::ostringstream convert;\n  for(int i=0;i<=n;i++)\n    convert<<i<<\" \";\n  return convert.str();",
        "grade-7": {
            "execution": 0
        },
        "23": "std::stringstream ss;\n    for (long i = 0; i <= n; i++) {\n        ss << i << \" \";\n    }\n    return ss.str();",
        "grade-23": {
            "execution": 0
        },
        "57": "std::string r = \"\";\n\tfor (long i = 0; i <= n; i++) {\n\t\tr += std::to_string(i);\n\t\tif (i != n) r += \" \";\n\t}\n\treturn r;",
        "grade-57": {
            "execution": 1
        },
        "61": "std::string s = \"\";\n    for(int i = 0; i < n+1; i++) {\n        s += std::to_string(i);\n        if(i != n)\n            s += \" \";\n    }\n    return s;",
        "grade-61": {
            "execution": 1
        },
        "141": "if (n == 0)\n\t\treturn \"0\";\n\telse {\n\t\treturn string_sequence(n - 1) + \" \" + std::to_string(n);\n\t}",
        "grade-141": {
            "execution": 1
        },
        "170": "std::string res = \"\";\n\tfor (int i = 0; i <= n; i++) {\n\t\tres += std::to_string(i);\n\t\tif (i != n) res += \" \";\n\t}\n\treturn res;",
        "grade-170": {
            "execution": 1
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n",
        "snippet": [
            "    int num=0;\n    for (int i=2;i*i<=a;i++)\n    while (a%i==0 and a>i)\n    {\n        a=a/i;\n        num+=1;\n    }\n    if (num==2) return true;\n    return false; \n}\n"
        ],
        "simplified": "Write a function that returns true if the given number is the multiplication of 3 prime numbers and false otherwise. Knowing that (a) is less then 100.",
        "task_id": "75",
        "168": "long aCpy = a;\n    std::vector<int> primeNumbers;\n    int counter = 0;\n    for (int i = 2; i < aCpy; i++) {\n        for (int j = 2; j <= i; j++) {\n            if (i % j == 0) {\n                counter++;\n            }\n        }\n        if (counter == 1) {\n            primeNumbers.push_back(i);\n        }\n        counter = 0;\n    }\n    for (int k = 0; k < primeNumbers.size(); k++) {\n        for (int l = k + 1; l < primeNumbers.size(); l++) {\n            if (aCpy % (primeNumbers[k] * primeNumbers[l]) == 0) {\n                aCpy = aCpy / (primeNumbers[k] * primeNumbers[l]);\n                k = -1;\n                l = 0;\n            }\n        }\n    }\n    if (aCpy == 1) {\n        return true;\n    }\n    return false;",
        "grade-168": {
            "execution": 0
        },
        "28": "int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            while (a % i == 0) {\n                a /= i;\n            }\n            count++;\n        }\n    }\n    return count == 3;",
        "grade-28": {
            "execution": 0
        },
        "6": "bool res = false;\n    int i,j,k;\n    for(i=2;i<=a/3;i++){\n        for(j=2;j<=a/i;j++){\n            for(k=2;k<=a/i/j;k++){\n                if(i*j*k==a){\n                    return true;\n                }\n            }\n        }\n    }\n    return res;",
        "grade-6": {
            "execution": 0
        },
        "195": "int k = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            for (int j = 2; j <= i; j++) {\n                if (i % j == 0) {\n                    k++;\n                }\n            }\n            if (k == 1) {\n                a /= i;\n                k = 0;\n            }\n        }\n    }\n    if (a == 1) {\n        return true;\n    }\n    return false;",
        "grade-195": {
            "execution": 0
        },
        "70": "bool f1=false,f2=false,f3=false;\n    int temp;\n    temp=a;\n    for(int i=2;i<=a/2;i++)\n    {\n        if(a%i==0)\n        {\n            if(f1==false)\n            {\n                f1=true;\n                a=a/i;\n                i=2;\n            }\n            else if(f2==false)\n            {\n                f2=true;\n                a=a/i;\n                i=2;\n            }\n            else if(f3==false)\n            {\n                f3=true;\n                a=a/i;\n                i=2;\n            }\n        }\n    }\n    if(f1==true && f2==true && f3==true)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }",
        "grade-70": {
            "execution": 0
        },
        "62": "long i;\n\tbool isPrime = true;\n\tfor (i = 2; i <= a / 2; ++i) {\n\t\tif (a % i == 0) {\n\t\t\tisPrime = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (isPrime) {\n\t\treturn true;\n\t}\n\tfor (i = 2; i <= a / 2; ++i) {\n\t\tif (a % i == 0) {\n\t\t\treturn is_multiply_prime(a / i);\n\t\t}\n\t}\n\treturn false;",
        "grade-62": {
            "execution": 0
        },
        "57": "if (a % 3 == 0 && a % 5 == 0 && a % 2 == 0) {\n        return true;\n    } else {\n        return false;\n    }",
        "grade-57": {
            "execution": 0
        },
        "35": "bool ans = false;\n  int c = 0;\n  for (int i = 2; i < a; i++) {\n    if (a % i == 0) {\n      c++;\n    }\n  }\n  if (c == 2) {\n    ans = true;\n  }\n  return ans;",
        "grade-35": {
            "execution": 0
        },
        "194": "int flag = 0;\n    for (int i = 2; i <= a / 2; ++i) {\n        if (a % i == 0) {\n            if (i == 2) {\n                continue;\n            }\n            for (int j = 2; j <= i / 2; ++j) {\n                if (i % j == 0) {\n                    flag = 1;\n                    break;\n                }\n            }\n            if (flag == 0) {\n                if (a / i == 2) {\n                    continue;\n                }\n                for (int k = 2; k <= a / i / 2; ++k) {\n                    if (a / i % k == 0) {\n                        flag = 1;\n                        break;\n                    }\n                }\n                if (flag == 0) {\n                    for (int l = 2; l <= a / i / a * i; ++l) {\n                        if (a / i / a * i % l == 0) {\n                            flag = 1;\n                            break;\n                        }\n                    }\n                    if (flag == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n    }\n    return false;",
        "grade-194": {
            "execution": 0
        },
        "26": "// YOUR CODE HERE\n    return false;",
        "grade-26": {
            "execution": 0
        },
        "179": "int o[100];\n    bool flag=0;\n    for(int i=0;i<100;i++)\n    {\n        o[i]=0;\n    }\n    for(int i=2;i<100;i++)\n    {\n        o[i]=1;\n    }\n    for(int i=2;i<100;i++)\n    {\n        if(o[i]==1)\n        {\n            for(int j=i*i;j<100;j+=i)\n            {\n                o[j]=0;\n            }\n        }\n    }\n    for(int i=2;i<=sqrt(a);i++)\n    {\n        if(o[i]==1 && a%i==0)\n        {\n            for(int j=2;j<=sqrt(a/i);j++)\n            {\n                if(o[j]==1 && (a/i)%j==0)\n                {\n                    for(int k=2;k<=sqrt(a/(i*j));k++)\n                    {\n                        if(o[k]==1 && (a/(i*j))%k==0)\n                        {\n                            flag=1;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if(flag==1)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }",
        "grade-179": {
            "execution": 0
        },
        "142": "assert(a>=1 && a<=1e18);\n    std::vector<long> prime;\n    for(long p=2; p*p<=a; p++) {\n        if(a%p==0) {\n            prime.push_back(p);\n            while(a%p==0) a/=p;\n        }\n    }\n    if(a>1) prime.push_back(a);\n    return prime.size()==3;",
        "grade-142": {
            "execution": 0
        },
        "22": "int c = 0;\n    for (int i = 2; i < a; i++) {\n        if (a % i == 0) {\n            for (int j = 2; j < i; j++) {\n                if (i % j == 0) {\n                    c = 1;\n                    break;\n                }\n            }\n            if (c == 0) {\n                return true;\n            }\n        }\n    }\n    return false;",
        "grade-22": {
            "execution": 0
        },
        "155": "return false;",
        "grade-155": {
            "execution": 0
        },
        "109": "bool is_prime = true;\n\t\n\tint a1 = 2;\n\tint a2 = 3;\n\tint a3 = 5;\n\t\n\tif (a1*a2*a3 == a) {\n\t\tis_prime = true;\n\t}\n\telse {\n\t\tis_prime = false;\n\t}\n\treturn is_prime;",
        "grade-109": {
            "execution": 0
        },
        "8": "// Write code here\n    // ...\n    // ...\n    std::map<long,long> prime_factor;\n    for(long x=2;x<=a;x++){\n        if(a%x==0){\n            if(prime_factor.find(x)==prime_factor.end()){\n                prime_factor[x]=1;\n            }\n            else{\n                prime_factor[x]++;\n            }\n            a/=x;\n            x--;\n        }\n    }\n    return prime_factor.size()==3;",
        "grade-8": {
            "execution": 0
        },
        "7": "long divide = a;\n    bool flag = false;\n    while (divide != 1) {\n        flag = false;\n        for (long i = 2; i <= divide; i++) {\n            if (divide % i == 0) {\n                flag = true;\n                divide /= i;\n                break;\n            }\n        }\n        if (!flag)\n            return false;\n    }\n    return true;",
        "grade-7": {
            "execution": 0
        },
        "23": "// TODO: Write your code here.\n\tstd::vector<long> v;\n\tfor (long i = 2; i <= a; i++) {\n\t\twhile (a % i == 0) {\n\t\t\tv.push_back(i);\n\t\t\ta /= i;\n\t\t}\n\t}\n\tif (v.size() != 3)\n\t\treturn false;\n\telse\n\t\treturn true;",
        "grade-23": {
            "execution": 1
        },
        "55": "long int i,j,k,count=0;\n  int flag=0;\n  for(i=2;i<a;i++)\n  {\n    for(j=2;j<=i/2;j++)\n    {\n      if(i%j==0)\n      {\n        flag=1;\n        break;\n      }\n    }\n    if(flag==0)\n    {\n      // cout<<i<<\" \";\n      count++;\n    }\n    flag=0;\n  }\n  // cout<<endl;\n  // cout<<count<<endl;\n  // cout<<\"Total primes: \"<<count<<endl;\n  long int arr[count];\n  long int val=0;\n  for(i=2;i<a;i++)\n  {\n    for(j=2;j<=i/2;j++)\n    {\n      if(i%j==0)\n      {\n        flag=1;\n        break;\n      }\n    }\n    if(flag==0)\n    {\n      arr[val]=i;\n      val++;\n    }\n    flag=0;\n  }\n  long int count1=0;\n  for(i=0;i<count;i++)\n  {\n    for(j=0;j<count;j++)\n    {\n      for(k=0;k<count;k++)\n      {\n        if(arr[i]*arr[j]*arr[k]==a)\n        {\n          count1++;\n        }\n      }\n    }\n  }\n  if(count1==0)\n  {\n    return false;\n  }\n  else\n  {\n    return true;\n  }",
        "grade-55": {
            "execution": 1
        },
        "59": "bool result = true;\n  int x = 2;\n  for (int i = 0; i < 3; i++) {\n    int c = 0;\n    for (int j = 1; j <= x; j++) {\n      if (x % j == 0) {\n        c++;\n      }\n    }\n    if (c == 2) {\n      if (a % x == 0) {\n        a = a / x;\n      } else {\n        result = false;\n        break;\n      }\n    }\n    x++;\n  }\n  return result;",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfloat truncate_number(float number) {\n",
        "snippet": [
            "    return number-int(number);\n}\n"
        ],
        "simplified": "Given a positive floating point number, it can be decomposed into and integer part (largest integer smaller than given number) and decimals (leftover part always smaller than 1). Return the decimal part of the number.",
        "task_id": "2",
        "198": "return 0.0;",
        "grade-198": {
            "execution": 0
        },
        "33": "return number - int(number);",
        "grade-33": {
            "execution": 1
        },
        "7": "// Type your code here\n    int ans = number;\n    float result = number - ans;\n    return result;",
        "grade-7": {
            "execution": 1
        },
        "81": "// TODO\n  float f = number - int(number);\n  return f;",
        "grade-81": {
            "execution": 1
        },
        "71": "int integral_part = number;\n  return number - integral_part;",
        "grade-71": {
            "execution": 1
        },
        "65": "float decimal_part = number - (int)number;\n\treturn decimal_part;",
        "grade-65": {
            "execution": 1
        },
        "40": "int r = number;\n    return number - r;",
        "grade-40": {
            "execution": 1
        },
        "31": "//1.to_string()\n\t//2.size\n\t//3.substr(pos,size)\n\t//4.stof\n\t// .5\n\t// .1\n\t// .9\n\t// .11\n\tstd::string str = std::to_string(number);\n\tint pos = str.find(\".\");\n\tint size = str.size();\n\tstr = str.substr(pos+1,size);\n\tfloat ans = std::stof(str);\n\treturn ans;",
        "grade-31": {
            "execution": 0
        },
        "168": "// TODO: Write - Your - Code\n\tint temp = number;\n\tfloat result = number - temp;\n\treturn result;",
        "grade-168": {
            "execution": 1
        },
        "26": "int integer_part = (int)number;\n  return number - integer_part;",
        "grade-26": {
            "execution": 1
        },
        "183": "// write your code here\n  int x = number;\n  float y = number - x;\n  return y;",
        "grade-183": {
            "execution": 1
        },
        "124": "return number - floor(number);",
        "grade-124": {
            "execution": 1
        },
        "10": "// write your code here\n    if(number < 0){\n        number = number * -1;\n    }\n    return number - (int)number;",
        "grade-10": {
            "execution": 1
        },
        "8": "// Write your code here\n  return number-(int)number;",
        "grade-8": {
            "execution": 1
        },
        "27": "assert(number >= 0.0f);\n    // Need to convert to int64_t because we don't\n    // want the compiler to make a mistake here.\n    int64_t t = (int64_t)number;\n    return number - t;",
        "grade-27": {
            "execution": 1
        },
        "63": "// Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    return 0.0;",
        "grade-63": {
            "execution": 0
        },
        "68": "// assert(number > 0);\n  float temp = number;\n  while(temp - floor(temp) >= 1) {\n    temp = temp - 1;\n  }\n  return number - temp;",
        "grade-68": {
            "execution": 0
        },
        "154": "float r = number - (int)number;\n  return r < 0 ? 1 + r : r;",
        "grade-154": {
            "execution": 1
        },
        "187": "int number_integer = (int)number;\n  return number - number_integer;",
        "grade-187": {
            "execution": 1
        },
        "172": "// TODO: Write - Your - Code\n\tint int_part = (int)number;\n\treturn (number - int_part);",
        "grade-172": {
            "execution": 1
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string word) {\n",
        "snippet": [
            "    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=word.length()-2;i>=1;i-=1)\n        if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())\n            if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())\n                if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())\n                    return out+word[i];\n    return out;\n}\n"
        ],
        "simplified": "You are given a word. Your task is to find the closest vowel that stands between two consonants from the right side of the word (case sensitive). Vowels in the beginning and ending doesn't count. Return empty string if you didn't find any vowel met the above condition. You may assume that the given string contains English letter only.",
        "task_id": "118",
        "163": "std::string vowels = \"AEIOUaeiou\";\n    int cnt = 0;\n    for (int i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            cnt++;\n        } else {\n            if (cnt == 1) {\n                return word.substr(i, 1);\n            } else {\n                cnt = 0;\n            }\n        }\n    }\n    return \"\";",
        "grade-163": {
            "execution": 0
        },
        "28": "int len = word.length();\n    int count = 0;\n    int ci = 0;\n    std::string str = \"\";\n    for(int i = len-1; i >= 0; i--) {\n        if(word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u' || word[i] == 'A' || word[i] == 'E' || word[i] == 'I' || word[i] == 'O' || word[i] == 'U') {\n            count++;\n            ci = i;\n        }\n        if(count == 2) {\n            str = word[ci];\n            break;\n        }\n    }\n    return str;",
        "grade-28": {
            "execution": 0
        },
        "6": "//your code here\n  return \"\";",
        "grade-6": {
            "execution": 0
        },
        "189": "std::string vowels = \"aeiou\";\n  std::string::iterator it = word.end() - 1;\n  int ind = -1;\n  while (it >= word.begin()) {\n    if (vowels.find(*it) != std::string::npos) {\n      ind = vowels.find(*it);\n      break;\n    }\n    it--;\n  }\n  if (ind != -1) {\n    it--;\n    while (it >= word.begin()) {\n      if (vowels.find(*it) == std::string::npos) {\n        return vowels[ind];\n      }\n      it--;\n    }\n  }\n  return \"\";",
        "grade-189": {
            "execution": 0
        },
        "70": "// Let's build the vowel string\n    std::string vowel = \"AEIOUaeiou\";\n    // Set a flag\n    bool isVowel = false;\n    // Set distance to maximum value.\n    int distance = INT_MAX;\n    // Loop through the word\n    for (int i = 0; i < word.length(); i++) {\n        // Check if the current character is a vowel\n        if (vowel.find(word[i]) != std::string::npos) {\n            // Loop through the consonants on right side of the vowel\n            for (int j = i + 1; j < word.length(); j++) {\n                // Break if we find a vowel\n                if (vowel.find(word[j]) != std::string::npos) {\n                    break;\n                }\n                // Check if the current distance is better than our initial distance\n                if (j - i < distance) {\n                    // Update our distance\n                    distance = j - i;\n                    // Update our isVowel flag\n                    isVowel = true;\n                }\n            }\n        }\n    }\n    // If no vowels were found, return empty string\n    if (!isVowel) {\n        return \"\";\n    }\n    // Return the closest vowel found.\n    return word[distance - 1];",
        "grade-70": {
            "execution": 0
        },
        "62": "int n = word.size();\n    if(n <= 1) return \"\";\n    std::vector<char> v = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n    std::map<char, bool> map;\n    for(auto i : v) map[i] = true;\n    int cons_ctr = 0;\n    for(int i = n - 1; i >= 0; i--) {\n        if(map[word[i]]) {\n            if(cons_ctr == 0) return \"\";\n            else return std::string(1, word[i]);\n        }\n        cons_ctr++;\n    }\n    return \"\";",
        "grade-62": {
            "execution": 0
        },
        "57": "std::string vowels = \"AEIOUaeiou\";\n  for (int i = word.size() - 1; i >= 0; i--) {\n    if (vowels.find(word[i]) != std::string::npos) {\n      return word[i];\n    }\n  }\n  return \"\";",
        "grade-57": {
            "execution": 0
        },
        "35": "//Your code here\n    int a = 0;\n    int len = word.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u')\n        {\n            if(i - 1 < 0 || i == len - 1)\n            {\n                a = 1;\n                break;\n            }\n            else if(!(word[i - 1] == 'a' || word[i - 1] == 'e' || word[i - 1] == 'i' || word[i - 1] == 'o' || word[i - 1] == 'u')\n                && !(word[i + 1] == 'a' || word[i + 1] == 'e' || word[i + 1] == 'i' || word[i + 1] == 'o' || word[i + 1] == 'u'))\n            {\n                return word.substr(i, 1);\n            }\n        }\n    }\n    if(a == 1)\n    {\n        return \"\";\n    }",
        "grade-35": {
            "execution": 0
        },
        "188": "std::string vowels = \"aeiou\";\n    for (int i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            if (i + 1 < word.size() && vowels.find(word[i + 1]) == std::string::npos) {\n                return word.substr(i, 1);\n            }\n        }\n    }\n    return \"\";",
        "grade-188": {
            "execution": 0
        },
        "26": "std::vector<char> vowels = {'a', 'e', 'i', 'o', 'u'};\n    bool flag = false;\n    int vowel_index = -1;\n    int vowel_pos = -1;\n    for(int i = 0; i < word.size(); i++) {\n        for(int j = 0; j < vowels.size(); j++) {\n            if(word[i] == vowels[j]) {\n                vowel_index = j;\n                vowel_pos = i;\n                break;\n            }\n        }\n        if(vowel_index != -1) {\n            break;\n        }\n    }\n    if(vowel_index == -1) {\n        return \"\";\n    }\n    for(int i = word.size() - 1; i >= 0; i--) {\n        for(int j = 0; j < vowels.size(); j++) {\n            if(word[i] == vowels[j]) {\n                flag = true;\n                break;\n            }\n        }\n        if(flag) {\n            break;\n        }\n        vowel_pos = i;\n    }\n    return std::string(1, word[vowel_pos]);",
        "grade-26": {
            "execution": 0
        },
        "173": "std::string vowels = \"aeiou\";\n\tstd::string answer = \"\";\n\tfor (int i = word.length() - 1; i >= 0; i--) {\n\t\tfor (int j = 0; j < vowels.length(); j++) {\n\t\t\tif (word[i] == vowels[j]) {\n\t\t\t\tif (i == word.length() - 1) {\n\t\t\t\t\tif (word[i - 1] == vowels[j]) {\n\t\t\t\t\t\tanswer = word[i];\n\t\t\t\t\t\treturn answer;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (i == 0) {\n\t\t\t\t\tif (word[i + 1] == vowels[j]) {\n\t\t\t\t\t\tanswer = word[i];\n\t\t\t\t\t\treturn answer;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (word[i - 1] == vowels[j] || word[i + 1] == vowels[j]) {\n\t\t\t\t\t\tanswer = word[i];\n\t\t\t\t\t\treturn answer;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn answer;",
        "grade-173": {
            "execution": 0
        },
        "139": "int len = word.length();\n    if(len == 0) return \"\";\n    char vowels[] = {'a', 'e', 'i', 'o', 'u'};\n    std::string res = \"\";\n    for(int i = len - 1; i >= 0; i--) {\n        for(int j = 0; j < 5; j++) {\n            if(word[i] == vowels[j]) {\n                res = word[i];\n                break;\n            }\n        }\n        if(res.size() > 0) {\n            break;\n        }\n    }\n    return res;",
        "grade-139": {
            "execution": 0
        },
        "22": "std::vector<std::string> all_vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"};\n  std::vector<char> vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n  std::string closest_vowel = \"\";\n  int vowel_count = 0;\n  std::size_t found;\n  std::vector<int> all_vowel_pos;\n  for(int i = 0; i < all_vowels.size(); i++) {\n    if(word.find(all_vowels[i]) != std::string::npos) {\n      found = word.find(all_vowels[i]);\n      all_vowel_pos.push_back(found);\n      vowel_count++;\n    }\n  }\n  if(vowel_count == 0) {\n    return \"\";\n  }\n  std::sort(all_vowel_pos.begin(), all_vowel_pos.end());\n  if(all_vowel_pos[0] == 0) {\n    return \"\";\n  }\n  int minimum_right_consonant_distance = 0;\n  int right_consonant_distance = 0;\n  for(int i = 0; i < all_vowel_pos.size(); i++) {\n    for(int j = all_vowel_pos[i]; j < word.length(); j++) {\n      if(std::find(vowels.begin(), vowels.end(), word[j]) == vowels.end()) {\n        right_consonant_distance++;\n      }\n      else {\n        break;\n      }\n    }\n    if(i == 0) {\n      minimum_right_consonant_distance = right_consonant_distance;\n      closest_vowel = all_vowels[i];\n    }\n    else {\n      if(right_consonant_distance < minimum_right_consonant_distance) {",
        "grade-22": {
            "execution": 0
        },
        "151": "std::string vowels = \"aeiou\";\n  std::size_t found = word.find_last_of(vowels);\n  while (found != std::string::npos) {\n    std::string c = word.substr(found, 1);\n    if (found > 0 && vowels.find(word.substr(found - 1, 1)) == std::string::npos &&\n        vowels.find(word.substr(found + 1, 1)) == std::string::npos) {\n      return c;\n    }\n    found = word.find_last_of(vowels, found - 1);\n  }\n  return \"\";",
        "grade-151": {
            "execution": 0
        },
        "108": "std::set<char> vowels {'a', 'e', 'i', 'o', 'u'};\n   auto result = word.rbegin();\n   for (; result != word.rend(); ++result) {\n     if (vowels.count(*result)) {\n        break;\n     }\n   }\n   auto search = result;\n   for (; search != word.rend(); ++search) {\n     if (!vowels.count(*search)) {\n        break;\n     }\n   }\n   if (search == word.rend()) {\n      return \"\";\n   }\n   auto result_distance = std::distance(result, word.rend());\n   auto search_distance = std::distance(search, word.rend());\n   if (result_distance - search_distance == 1) {\n      return \"\";\n   }\n   return std::string(1, *result);",
        "grade-108": {
            "execution": 0
        },
        "8": "// your code here\n  return \"\";",
        "grade-8": {
            "execution": 0
        },
        "7": "std::string vowels = \"AEIOUaeiou\";\n    std::vector<std::string> temp;\n    for (int i = 0; i < word.length(); i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            std::string s = word.substr(i,1);\n            temp.push_back(s);\n        }\n    }\n    if (temp.size() < 2) {\n        return \"\";\n    }\n    std::reverse(temp.begin(), temp.end());\n    std::string s = temp[0];\n    for (int i = 1; i < temp.size(); i++) {\n        if (vowels.find(temp[i-1]) != std::string::npos) {\n            break;\n        }\n        if (vowels.find(temp[i]) != std::string::npos) {\n            if (vowels.find(temp[i-1]) == std::string::npos) {\n                s = temp[i];\n                break;\n            }\n        }\n    }\n    return s;",
        "grade-7": {
            "execution": 0
        },
        "23": "int count = 0;\n  std::string s;\n  for(int i = word.length()-1; i >= 0; i--) {\n    if(!count && !(word[i] == 'a' || word[i] == 'e' || word[i] == 'i' ||\n       word[i] == 'o' || word[i] == 'u' || word[i] == 'A' || word[i] == 'E' ||\n       word[i] == 'I' || word[i] == 'O' || word[i] == 'U')) {\n      count++;\n    } else if(count && !(word[i] == 'a' || word[i] == 'e' || word[i] == 'i' ||\n       word[i] == 'o' || word[i] == 'u' || word[i] == 'A' || word[i] == 'E' ||\n       word[i] == 'I' || word[i] == 'O' || word[i] == 'U')) {\n      break;\n    } else if(count && (word[i] == 'a' || word[i] == 'e' || word[i] == 'i' ||\n       word[i] == 'o' || word[i] == 'u' || word[i] == 'A' || word[i] == 'E' ||\n       word[i] == 'I' || word[i] == 'O' || word[i] == 'U')) {\n      s = word[i];\n      break;\n    }\n  }\n  return s;",
        "grade-23": {
            "execution": 0
        },
        "55": "std::string vowels = \"aeiou\";\n    std::string answer = \"\";\n    std::vector<std::pair<int, int>> v;\n\n    for (auto i = 0; i < word.size(); i++) {\n        for (auto j = 0; j < vowels.size(); j++) {\n            if (word[i] == vowels[j]) {\n                v.push_back(std::make_pair(i, j));\n            }\n        }\n    }\n\n    for (auto i = 0; i < v.size(); i++) {\n        auto left = std::find_if(word.begin(), word.begin() + v[i].first, [](auto &c) {\n            return !(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n        });\n        auto right = std::find_if(word.begin() + v[i].first + 1, word.end(), [](auto &c) {\n            return !(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n        });\n        if (left != word.begin() + v[i].first && right != word.end()) {\n            return vowels.substr(v[i].second, 1);\n        }\n    }\n\n    return answer;",
        "grade-55": {
            "execution": 0
        },
        "59": "// your code here\n  std::string result = \"\";\n  std::string vowels = \"aeiou\";\n  //   result = word.size() == 1 ? \"\" : word[1];\n  //   return result;\n  std::size_t found = word.find_last_of(vowels);\n  if (found == std::string::npos) {\n    return result;\n  }\n  if (word.size() > 1) {\n    result = word[found];\n  }\n  return result;",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n",
        "snippet": [
            "    string out=\"\";\n    if (decimal==0) return \"db0db\";\n    while (decimal>0)\n    {\n        out=to_string(decimal%2)+out;\n        decimal=decimal/2;\n    }\n    out=\"db\"+out+\"db\";\n    return out;\n}\n"
        ],
        "simplified": "You will be given a number in decimal form and your task is to convert it to binary format. The function should return a string, with each character representing a binary number. Each character in the string will be '0' or '1'. There will be an extra couple of characters 'db' at the beginning and at the end of the string. The extra characters are there to help with the format.",
        "task_id": "79",
        "165": "char* bstr = new char[33];\n  bstr[32] = '\\0';\n  int i = 0;\n  while (decimal != 0) {\n    bstr[i++] = decimal % 2 + '0';\n    decimal = decimal / 2;\n  }\n  for (int j = i; j < 32; j++) {\n    bstr[j] = '0';\n  }\n  std::string s = \"db\";\n  for (int j = i - 1; j >= 0; j--) {\n    s += bstr[j];\n  }\n  s += \"db\";\n  return s;",
        "grade-165": {
            "execution": 0
        },
        "28": "// convert the decimal number to binary format and return the string\n    // example: decimal_to_binary(15) should return \"db1111db\"\n    std::string binary_string = \"db\";\n    while (decimal) {\n        binary_string.push_back((decimal % 2) + '0');\n        decimal /= 2;\n    }\n    binary_string.push_back('d');\n    binary_string.push_back('b');\n    std::reverse(binary_string.begin() + 2, binary_string.end() - 2);\n    return binary_string;",
        "grade-28": {
            "execution": 0
        },
        "6": "// Given a decimal number, this program returns a string\n    // with the number converted to binary\n    // the string has a couple of extra characters at the beginning and at the end\n    // to help with the formatting\n    std::string final_string = \"db\";\n    long dividend;\n    long remainder;\n    std::string temp;\n    std::string bin_number;\n    dividend = decimal;\n    while (dividend != 0) {\n        remainder = dividend % 2;\n        temp = std::to_string(remainder);\n        bin_number.append(temp);\n        dividend = dividend / 2;\n    }\n    // we now have to reverse the bin_number\n    // otherwise, it would be the binary representation of the decimal\n    // number from the left to the right, not from the right to the left\n    std::reverse(bin_number.begin(), bin_number.end());\n    final_string.append(bin_number);\n    final_string.append(\"db\");\n    return final_string;",
        "grade-6": {
            "execution": 0
        },
        "193": "std::string bin;\n    while(decimal){\n        bin += std::to_string(decimal%2);\n        decimal /= 2;\n    }\n    return \"db\" + std::string(8-bin.size(), '0') + bin + \"db\";",
        "grade-193": {
            "execution": 0
        },
        "70": "// add your code here\n  std::string result = \"db\";\n  if (decimal == 0) {\n    result += \"0\";\n  } else {\n    int divisor = 2;\n    int remainder = decimal;\n    while (divisor <= decimal) {\n      divisor *= 2;\n    }\n    divisor /= 2;\n    while (divisor >= 1) {\n      if (remainder >= divisor) {\n        result += \"1\";\n        remainder -= divisor;\n      } else {\n        result += \"0\";\n      }\n      divisor /= 2;\n    }\n  }\n  result += \"db\";\n  return result;",
        "grade-70": {
            "execution": 1
        },
        "62": "std::string binary = \"db\";\n    std::string add = \"\";\n    if (decimal == 0) {\n        binary += \"0\";\n    }\n    while (decimal > 0) {\n        if (decimal % 2 == 0) {\n            add += \"0\";\n        } else {\n            add += \"1\";\n        }\n        decimal /= 2;\n    }\n    for (int i = add.length() - 1; i >= 0; i--) {\n        binary += add[i];\n    }\n    binary += \"db\";\n    return binary;",
        "grade-62": {
            "execution": 1
        },
        "57": "if (decimal == 0) {\n        return \"db0db\";\n    }\n    std::string result = \"db\";\n    while (decimal != 0) {\n        if (decimal % 2 == 0) {\n            result = \"0\" + result;\n        } else {\n            result = \"1\" + result;\n        }\n        decimal /= 2;\n    }\n    result += \"db\";\n    return result;",
        "grade-57": {
            "execution": 0
        },
        "35": "std::string binary = \"db\";\n  while (decimal > 0) {\n    if (decimal % 2 == 0) {\n      binary += \"0\";\n    } else {\n      binary += \"1\";\n    }\n    decimal /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n  binary += \"db\";\n  return binary;",
        "grade-35": {
            "execution": 0
        },
        "192": "std::string result;\n  result.append(\"db\");\n  while (decimal > 0) {\n    long rem = decimal % 2;\n    result.push_back(rem == 0 ? '0' : '1');\n    decimal /= 2;\n  }\n  result.append(\"db\");\n  std::reverse(result.begin() + 2, result.end() - 2);\n  return result;",
        "grade-192": {
            "execution": 0
        },
        "26": "long rem;\n  std::string bin = \"db\";\n  std::string bin2 = \"db\";\n  while (decimal > 0) {\n    rem = decimal % 2;\n    bin += std::to_string(rem);\n    decimal /= 2;\n  }\n  for (int i = bin.length() - 2; i >= 2; i--) {\n    bin2 += bin[i];\n  }\n  return bin2;",
        "grade-26": {
            "execution": 0
        },
        "175": "assert(decimal >= 0);\n    if(decimal == 0) return \"db0db\";\n    std::string bin = \"db\";\n    bool found = false;\n    for(int i = 63; i >= 0; i--) {\n        if(decimal & 1 << i) {\n            bin += \"1\";\n            found = true;\n        } else if(found) {\n            bin += \"0\";\n        }\n    }\n    return bin + \"db\";",
        "grade-175": {
            "execution": 0
        },
        "140": "std::string result = \"db\";\n    while (decimal > 0) {\n        if (decimal%2 == 0) {\n            result += \"0\";\n        } else {\n            result += \"1\";\n        }\n        decimal /= 2;\n    }\n    std::reverse(result.begin()+2, result.end());\n    result += \"db\";\n    return result;",
        "grade-140": {
            "execution": 0
        },
        "22": "std::string binary = \"db\";\n\twhile (decimal != 0) {\n\t\tlong r = decimal % 2;\n\t\tbinary += std::to_string(r);\n\t\tdecimal /= 2;\n\t}\n\tbinary += \"db\";\n\treturn binary;",
        "grade-22": {
            "execution": 0
        },
        "152": "// your code goes here\n  std::string binary;\n  binary = \"db\";\n  if (decimal == 0) {\n    binary += \"0\";\n  }\n  while (decimal > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n  reverse(binary.begin() + 2, binary.end());\n  binary += \"db\";\n  return binary;",
        "grade-152": {
            "execution": 1
        },
        "108": "std::string result = \"db\";\n    int num = decimal;\n    int remainder;\n    do {\n        remainder = num % 2;\n        num = num / 2;\n        if (remainder == 0) {\n            result = result + \"0\";\n        } else {\n            result = result + \"1\";\n        }\n    } while (num != 0);\n    std::reverse(result.begin() + 2, result.end());\n    result = result + \"db\";\n    return result;",
        "grade-108": {
            "execution": 1
        },
        "8": "// TODO: Implement me\n    std::bitset<32> binary(decimal);\n    std::string str = binary.to_string();\n    return \"db\" + str + \"db\";",
        "grade-8": {
            "execution": 0
        },
        "7": "std::string str;\n\twhile (decimal > 0) {\n\t\tstr += std::to_string(decimal % 2);\n\t\tdecimal /= 2;\n\t}\n\tstd::reverse(str.begin(), str.end());\n\tstd::string s = \"db\";\n\ts += str;\n\ts += \"db\";\n\treturn s;",
        "grade-7": {
            "execution": 0
        },
        "23": "std::string res = \"db\";\n\twhile (decimal >= 1) {\n\t\tres.push_back(decimal % 2 ? '1' : '0');\n\t\tdecimal /= 2;\n\t}\n\tstd::reverse(res.begin() + 2, res.end());\n\tres.push_back('d');\n\tres.push_back('b');\n\treturn res;",
        "grade-23": {
            "execution": 0
        },
        "55": "std::string binary = \"db\";\n\tif (decimal == 0) {\n\t\tbinary += \"0\";\n\t}\n\telse {\n\t\twhile (decimal > 0) {\n\t\t\tbinary += std::to_string(decimal % 2);\n\t\t\tdecimal /= 2;\n\t\t}\n\t}\n\tbinary += \"db\";\n\tstd::reverse(binary.begin() + 2, binary.end() - 2);\n\treturn binary;",
        "grade-55": {
            "execution": 1
        },
        "59": "std::string result = \"db\";\n    if (decimal == 0) return result + \"0db\";\n    while (decimal != 0) {\n        result += (decimal % 2 == 0 ? \"0\" : \"1\");\n        decimal /= 2;\n    }\n    reverse(result.begin() + 2, result.end());\n    result += \"db\";\n    return result;",
        "grade-59": {
            "execution": 1
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers, return whether or not they are sorted\n// in ascending order. If list has more than 1 duplicate of the same\n// number, return False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5]) \u279e True\n// is_sorted([1, 2, 3, 4, 5]) \u279e True\n// is_sorted([1, 3, 2, 4, 5]) \u279e False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\nbool is_sorted(std::vector<long> lst) {\n",
        "snippet": [
            "    for (int i=1;i<lst.size();i++)\n    {\n        if (lst[i]<lst[i-1]) return false;\n        if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;\n    }\n    return true;\n}\n"
        ],
        "simplified": "Given a list of numbers, return whether or not they are sorted in ascending order. If list has more than 1 duplicate of the same number, return False. Assume no negative numbers and only integers.",
        "task_id": "126",
        "198": "std::sort(lst.begin(), lst.end());\n\tfor (long i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] == lst[i + 1])\n\t\t\treturn false;\n\t}\n\treturn true;",
        "grade-198": {
            "execution": 0
        },
        "29": "for (long i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i + 1])\n\t\t\treturn false;\n\t}\n\treturn true;",
        "grade-29": {
            "execution": 0
        },
        "6": "bool result = true;\n\tif (lst.size() < 2) {\n\t\treturn result;\n\t} else {\n\t\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\t\tif (lst[i] >= lst[i + 1]) {\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;",
        "grade-6": {
            "execution": 0
        },
        "80": "if (lst.size() > 1) {\n\t\tif ((lst[0] < lst[1]) || (lst[0] == lst[1])) {\n\t\t\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\t\t\tif ((lst[i] < lst[i + 1]) || (lst[i] == lst[i + 1])) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n\telse {\n\t\treturn true;\n\t}",
        "grade-80": {
            "execution": 0
        },
        "70": "bool result = true;\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i + 1]) {\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;",
        "grade-70": {
            "execution": 0
        },
        "65": "if (lst.size() == 1) {\n\t\treturn true;\n\t}\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;",
        "grade-65": {
            "execution": 0
        },
        "38": "long temp = 0;\n\tlong count = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (lst[i] == temp)\n\t\t\tcount++;\n\t\telse {\n\t\t\ttemp = lst[i];\n\t\t\tcount = 0;\n\t\t}\n\t\tif (count > 1)\n\t\t\treturn false;\n\t}\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i + 1])\n\t\t\treturn false;\n\t}\n\treturn true;",
        "grade-38": {
            "execution": 0
        },
        "27": "long temp = lst[0];\n\tfor (auto it = lst.begin() + 1; it != lst.end(); it++) {\n\t\tif (*it == temp) {\n\t\t\treturn false;\n\t\t}\n\t\telse if (temp > *it) {\n\t\t\treturn false;\n\t\t}\n\t\ttemp = *it;\n\t}\n\treturn true;",
        "grade-27": {
            "execution": 0
        },
        "168": "long temp = 0;\n\tbool result = true;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tfor (int j = i + 1; j < lst.size(); j++) {\n\t\t\tif (lst[i] > lst[j]) {\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;",
        "grade-168": {
            "execution": 0
        },
        "22": "// std::sort(lst.begin(), lst.end());\n    for(int i = 0; i < lst.size() - 1; i++){\n        if(lst[i] > lst[i+1]){\n            return false;\n        }\n    }\n    return true;",
        "grade-22": {
            "execution": 0
        },
        "182": "for(int i=0;i<lst.size()-1;i++){\n        if(lst[i]>lst[i+1]) return false;\n    }\n    return true;",
        "grade-182": {
            "execution": 0
        },
        "129": "if (lst.size() == 1)\n\t\treturn true;\n\tfor (auto i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i + 1])\n\t\t\treturn false;\n\t}\n\treturn true;",
        "grade-129": {
            "execution": 0
        },
        "8": "std::vector<long> temp = lst;\n\tsort(temp.begin(), temp.end());\n\treturn lst == temp;",
        "grade-8": {
            "execution": 0
        },
        "7": "for (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;",
        "grade-7": {
            "execution": 0
        },
        "23": "int len = lst.size();\n\tstd::vector<int> dup;\n\tfor (int i = 0; i < len; i++) {\n\t\tfor (int j = i + 1; j < len; j++) {\n\t\t\tif (lst[i] == lst[j]) {\n\t\t\t\tdup.push_back(i);\n\t\t\t}\n\t\t}\n\t}\n\tif (dup.size() > 1) {\n\t\treturn false;\n\t}\n\telse {\n\t\tfor (int i = 0; i < len; i++) {\n\t\t\tif (lst[i] > lst[i + 1]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}",
        "grade-23": {
            "execution": 0
        },
        "61": "std::vector<long> l(lst);\n\tstd::sort(l.begin(), l.end());\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (lst[i] != l[i]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;",
        "grade-61": {
            "execution": 0
        },
        "67": "if (lst.size() == 1) {\n\t\treturn true;\n\t}\n\tstd::sort(lst.begin(), lst.end());\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] == lst[i + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;",
        "grade-67": {
            "execution": 0
        },
        "157": "for (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i + 1])\n\t\t\treturn false;\n\t}\n\treturn true;",
        "grade-157": {
            "execution": 0
        },
        "185": "if(lst.size() == 1){\n        return true;\n    }\n    for(int i = 0; i < lst.size() - 1; i++){\n        if(lst[i] > lst[i + 1]){\n            return false;\n        }\n    }\n    return true;",
        "grade-185": {
            "execution": 0
        },
        "173": "if(lst.size()==1) return true;\n  if(lst.size()==2){\n    if(lst[0]<=lst[1]){\n      return true;\n    }else{\n      return false;\n    }\n  }\n  for(int i=0;i<lst.size()-1;i++){\n    if(lst[i]>lst[i+1]){\n      return false;\n    }\n  }\n  return true;",
        "grade-173": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n// If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\nstd::vector<std::string> by_length(std::vector<long> arr) {\n",
        "snippet": [
            "    map<int,string> numto={{0,\"Zero\"},{1,\"One\"},{2,\"Two\"},{3,\"Three\"},{4,\"Four\"},{5,\"Five\"},{6,\"Six\"},{7,\"Seven\"},{8,\"Eight\"},{9,\"Nine\"}};\n    sort(arr.begin(),arr.end());\n    vector<string> out={};\n    for (int i=arr.size()-1;i>=0;i-=1)\n        if (arr[i]>=1 and arr[i]<=9)\n        out.push_back(numto[arr[i]]);\n    return out;\n}\n"
        ],
        "simplified": "Given an array of integers, sort the integers that are between 1 and 9 inclusive, reverse the resulting array, and then replace each digit by its corresponding name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".",
        "task_id": "105",
        "163": "//sort arr\n    //reverse arr\n    //match each number to its string name\n    std::vector<std::string> result;\n    std::sort(arr.begin(), arr.end());\n    std::reverse(arr.begin(), arr.end());\n    for(int i = 0; i < arr.size(); i++){\n        if(arr[i] < 1 || arr[i] > 9){\n            continue;\n        }\n        switch(arr[i]){\n            case 1: result.push_back(\"One\"); break;\n            case 2: result.push_back(\"Two\"); break;\n            case 3: result.push_back(\"Three\"); break;\n            case 4: result.push_back(\"Four\"); break;\n            case 5: result.push_back(\"Five\"); break;\n            case 6: result.push_back(\"Six\"); break;\n            case 7: result.push_back(\"Seven\"); break;\n            case 8: result.push_back(\"Eight\"); break;\n            case 9: result.push_back(\"Nine\"); break;\n        }\n    }\n    return result;",
        "grade-163": {
            "execution": 1
        },
        "28": "std::vector<std::string> result;\n\tsort(arr.begin(), arr.end());\n\treverse(arr.begin(), arr.end());\n\tfor (int i = 0; i < arr.size(); i++) {\n\t\tif (arr[i] == 1) {\n\t\t\tresult.push_back(\"One\");\n\t\t}\n\t\telse if (arr[i] == 2) {\n\t\t\tresult.push_back(\"Two\");\n\t\t}\n\t\telse if (arr[i] == 3) {\n\t\t\tresult.push_back(\"Three\");\n\t\t}\n\t\telse if (arr[i] == 4) {\n\t\t\tresult.push_back(\"Four\");\n\t\t}\n\t\telse if (arr[i] == 5) {\n\t\t\tresult.push_back(\"Five\");\n\t\t}\n\t\telse if (arr[i] == 6) {\n\t\t\tresult.push_back(\"Six\");\n\t\t}\n\t\telse if (arr[i] == 7) {\n\t\t\tresult.push_back(\"Seven\");\n\t\t}\n\t\telse if (arr[i] == 8) {\n\t\t\tresult.push_back(\"Eight\");\n\t\t}\n\t\telse if (arr[i] == 9) {\n\t\t\tresult.push_back(\"Nine\");\n\t\t}\n\t}\n\treturn result;",
        "grade-28": {
            "execution": 1
        },
        "6": "std::map<int, std::string> map = {\n    {1, \"One\"}, {2, \"Two\"}, {3, \"Three\"}, {4, \"Four\"}, {5, \"Five\"}, {6, \"Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, {9, \"Nine\"}\n  };\n  \n  std::vector<std::string> results;\n  \n  std::sort(arr.begin(), arr.end());\n  std::reverse(arr.begin(), arr.end());\n  \n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] > 0 && arr[i] < 10) {\n      results.push_back(map[arr[i]]);\n    }\n  }\n  \n  return results;",
        "grade-6": {
            "execution": 1
        },
        "190": "int len = arr.size();\n  std::vector<std::string> names(len);\n  int one = 1;\n  int two = 2;\n  int three = 3;\n  int four = 4;\n  int five = 5;\n  int six = 6;\n  int seven = 7;\n  int eight = 8;\n  int nine = 9;\n  for (int i = 0; i < len; i++) {\n    if (arr[i] == one) {\n      names[i] = \"One\";\n    }\n    else if (arr[i] == two) {\n      names[i] = \"Two\";\n    }\n    else if (arr[i] == three) {\n      names[i] = \"Three\";\n    }\n    else if (arr[i] == four) {\n      names[i] = \"Four\";\n    }\n    else if (arr[i] == five) {\n      names[i] = \"Five\";\n    }\n    else if (arr[i] == six) {\n      names[i] = \"Six\";\n    }\n    else if (arr[i] == seven) {\n      names[i] = \"Seven\";\n    }\n    else if (arr[i] == eight) {\n      names[i] = \"Eight\";\n    }\n    else if (arr[i] == nine) {\n      names[i] = \"Nine\";\n    }\n  }\n  return names;",
        "grade-190": {
            "execution": 0
        },
        "70": "std::vector<std::string> res;\n  std::sort(arr.begin(), arr.end());\n  std::reverse(arr.begin(), arr.end());\n  for (int i = 0; i < arr.size(); i++) {\n    switch (arr[i]) {\n      case 1:\n        res.push_back(\"One\");\n        break;\n      case 2:\n        res.push_back(\"Two\");\n        break;\n      case 3:\n        res.push_back(\"Three\");\n        break;\n      case 4:\n        res.push_back(\"Four\");\n        break;\n      case 5:\n        res.push_back(\"Five\");\n        break;\n      case 6:\n        res.push_back(\"Six\");\n        break;\n      case 7:\n        res.push_back(\"Seven\");\n        break;\n      case 8:\n        res.push_back(\"Eight\");\n        break;\n      case 9:\n        res.push_back(\"Nine\");\n        break;\n      default:\n        break;\n    }\n  }\n  return res;",
        "grade-70": {
            "execution": 1
        },
        "62": "std::vector<std::string> result;\n    std::sort(arr.begin(), arr.end());\n    std::reverse(arr.begin(), arr.end());\n    for (long i : arr) {\n        switch (i) {\n            case 1:\n                result.push_back(\"One\");\n                break;\n            case 2:\n                result.push_back(\"Two\");\n                break;\n            case 3:\n                result.push_back(\"Three\");\n                break;\n            case 4:\n                result.push_back(\"Four\");\n                break;\n            case 5:\n                result.push_back(\"Five\");\n                break;\n            case 6:\n                result.push_back(\"Six\");\n                break;\n            case 7:\n                result.push_back(\"Seven\");\n                break;\n            case 8:\n                result.push_back(\"Eight\");\n                break;\n            case 9:\n                result.push_back(\"Nine\");\n                break;\n            default:\n                break;\n        }\n    }\n    return result;",
        "grade-62": {
            "execution": 1
        },
        "57": "std::vector<std::string> result;\n  std::sort(arr.begin(), arr.end());\n  for (auto &&val : arr) {\n    switch (val) {\n      case 1:\n        result.push_back(\"One\");\n        break;\n      case 2:\n        result.push_back(\"Two\");\n        break;\n      case 3:\n        result.push_back(\"Three\");\n        break;\n      case 4:\n        result.push_back(\"Four\");\n        break;\n      case 5:\n        result.push_back(\"Five\");\n        break;\n      case 6:\n        result.push_back(\"Six\");\n        break;\n      case 7:\n        result.push_back(\"Seven\");\n        break;\n      case 8:\n        result.push_back(\"Eight\");\n        break;\n      case 9:\n        result.push_back(\"Nine\");\n        break;\n      default:\n        break;\n    }\n  }\n  return result;",
        "grade-57": {
            "execution": 0
        },
        "35": "std::vector<std::string> names{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    std::vector<std::string> res{};\n    for (auto i : arr) {\n        res.push_back(names[i-1]);\n    }\n    return res;",
        "grade-35": {
            "execution": 0
        },
        "189": "std::vector<std::string> result;\n    std::map<long, std::string> converter;\n    converter[1] = \"One\";\n    converter[2] = \"Two\";\n    converter[3] = \"Three\";\n    converter[4] = \"Four\";\n    converter[5] = \"Five\";\n    converter[6] = \"Six\";\n    converter[7] = \"Seven\";\n    converter[8] = \"Eight\";\n    converter[9] = \"Nine\";\n    std::sort(arr.begin(), arr.end());\n    std::reverse(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            result.push_back(converter[arr[i]]);\n        }\n    }\n    return result;",
        "grade-189": {
            "execution": 1
        },
        "26": "std::vector<std::string> result;\n\tlong len = arr.size();\n\tlong one[] = {1,1,1,1,1,1,1,1,1,1};\n\tlong two[] = {1,1,1,1,1,1,1,1,1,2};\n\tlong three[] = {1,1,1,1,1,1,1,1,1,3};\n\tlong four[] = {1,1,1,1,1,1,1,1,1,4};\n\tlong five[] = {1,1,1,1,1,1,1,1,1,5};\n\tlong six[] = {1,1,1,1,1,1,1,1,1,6};\n\tlong seven[] = {1,1,1,1,1,1,1,1,1,7};\n\tlong eight[] = {1,1,1,1,1,1,1,1,1,8};\n\tlong nine[] = {1,1,1,1,1,1,1,1,1,9};\n\tif(len==0){\n\t\treturn result;\n\t}\n\tfor(long i=0;i<len;i++){\n\t\tif(arr[i]==1){\n\t\t\tif(std::find(result.begin(), result.end(), \"One\") != result.end()){\n\t\t\t\t// cout<<\"One\"<<endl;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse{\n\t\t\t\t// cout<<\"One\"<<endl;\n\t\t\t\tresult.push_back(\"One\");\n\t\t\t}\n\t\t}\n\t\telse if(arr[i]==2){\n\t\t\tif(std::find(result.begin(), result.end(), \"Two\") != result.end()){\n\t\t\t\t// cout<<\"Two\"<<endl;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse{\n\t\t\t\t// cout<<\"Two\"<<endl;\n\t\t\t\tresult.push_back(\"Two\");\n\t\t\t}",
        "grade-26": {
            "execution": 0
        },
        "174": "assert(false);",
        "grade-174": {
            "execution": 0
        },
        "139": "std::vector<std::string> result;\n\t\n\tstd::map<long, std::string> m;\n\tm[1] = \"One\";\n\tm[2] = \"Two\";\n\tm[3] = \"Three\";\n\tm[4] = \"Four\";\n\tm[5] = \"Five\";\n\tm[6] = \"Six\";\n\tm[7] = \"Seven\";\n\tm[8] = \"Eight\";\n\tm[9] = \"Nine\";\n\t\n\tstd::sort(arr.begin(), arr.end());\n\t\n\tstd::reverse(arr.begin(), arr.end());\n\t\n\tfor(auto i : arr) {\n\t\tif(i >= 1 && i <= 9) {\n\t\t\tresult.push_back(m[i]);\n\t\t}\n\t}\n\t\n\treturn result;",
        "grade-139": {
            "execution": 1
        },
        "22": "// your code here\n    std::vector<std::string> arr1;\n    for(int i=0;i<arr.size();i++)\n    {\n      if(arr[i]==1)\n        arr1.push_back(\"One\");\n      else if(arr[i]==2)\n        arr1.push_back(\"Two\");\n      else if(arr[i]==3)\n        arr1.push_back(\"Three\");\n      else if(arr[i]==4)\n        arr1.push_back(\"Four\");\n      else if(arr[i]==5)\n        arr1.push_back(\"Five\");\n      else if(arr[i]==6)\n        arr1.push_back(\"Six\");\n      else if(arr[i]==7)\n        arr1.push_back(\"Seven\");\n      else if(arr[i]==8)\n        arr1.push_back(\"Eight\");\n      else if(arr[i]==9)\n        arr1.push_back(\"Nine\");\n      else\n        continue;\n    }\n    return arr1;",
        "grade-22": {
            "execution": 0
        },
        "151": "std::vector<std::string> result;\n    std::string number_string[10] = {\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    std::sort(arr.begin(), arr.end());\n    std::reverse(arr.begin(), arr.end());\n    for (long i = 0; i < arr.size(); i++) {\n        if ((arr[i] > 0) && (arr[i] < 10)) {\n            result.push_back(number_string[arr[i]]);\n        }\n    }\n    return result;",
        "grade-151": {
            "execution": 1
        },
        "108": "std::vector<std::string> res;\n    if(arr.size()==0)return res;\n    for(auto i:arr){\n        switch(i){\n            case 1:res.push_back(\"One\");break;\n            case 2:res.push_back(\"Two\");break;\n            case 3:res.push_back(\"Three\");break;\n            case 4:res.push_back(\"Four\");break;\n            case 5:res.push_back(\"Five\");break;\n            case 6:res.push_back(\"Six\");break;\n            case 7:res.push_back(\"Seven\");break;\n            case 8:res.push_back(\"Eight\");break;\n            case 9:res.push_back(\"Nine\");break;\n        }\n    }\n    return res;",
        "grade-108": {
            "execution": 0
        },
        "8": "//Write your code here\n\t// if arr size =0 return empty vector\n\tif (arr.size() == 0) {\n\t\treturn {};\n\t}\n\t// if arr size =1\n\tif (arr.size() == 1) {\n\t\t// if contains 0 1 2 3 4 5 6 7 8 9 return the word\n\t\tif (arr[0] == 0 || arr[0] == 1 || arr[0] == 2 || arr[0] == 3 || arr[0] == 4 || arr[0] == 5 || arr[0] == 6 || arr[0] == 7 || arr[0] == 8 || arr[0] == 9) {\n\t\t\treturn { getNumberString(arr[0]) };\n\t\t}\n\t\t// if contains 0 1 2 3 4 5 6 7 8 9\n\t\telse {\n\t\t\treturn {};\n\t\t}\n\t}\n\t// sort vector\n\tsort(arr.begin(), arr.end());\n\t// reverse vector\n\treverse(arr.begin(), arr.end());\n\t// init string vector\n\tstd::vector<std::string> words;\n\t// loop until size\n\tfor (size_t i = 0; i < arr.size(); i++) {\n\t\t// if contains 0 1 2 3 4 5 6 7 8 9\n\t\tif (arr[i] == 0 || arr[i] == 1 || arr[i] == 2 || arr[i] == 3 || arr[i] == 4 || arr[i] == 5 || arr[i] == 6 || arr[i] == 7 || arr[i] == 8 || arr[i] == 9) {\n\t\t\t// add string word to the vector\n\t\t\twords.push_back(getNumberString(arr[i]));\n\t\t}\n\t}\n\t// return vector\n\treturn words;",
        "grade-8": {
            "execution": 0
        },
        "7": "int i =0;\n  std::vector<std::string> res ={};\n  for(i =0; i<arr.size();i++){\n    if(arr[i] == 1) res.push_back(\"One\");\n    else if(arr[i] == 2) res.push_back(\"Two\");\n    else if(arr[i] == 3) res.push_back(\"Three\");\n    else if(arr[i] == 4) res.push_back(\"Four\");\n    else if(arr[i] == 5) res.push_back(\"Five\");\n    else if(arr[i] == 6) res.push_back(\"Six\");\n    else if(arr[i] == 7) res.push_back(\"Seven\");\n    else if(arr[i] == 8) res.push_back(\"Eight\");\n    else if(arr[i] == 9) res.push_back(\"Nine\");\n  }\n  std::sort(res.begin(), res.end(), [](std::string &s1, std::string &s2) { return s1.size() < s2.size(); });\n  return res;",
        "grade-7": {
            "execution": 0
        },
        "23": "std::sort(arr.begin(), arr.end());\n\tstd::reverse(arr.begin(), arr.end());\n\tstd::vector<std::string> res;\n\tstd::map<long, std::string> m{ {1, \"One\"}, {2, \"Two\"}, {3, \"Three\"}, {4, \"Four\"}, {5, \"Five\"},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t {6, \"Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, {9, \"Nine\"} };\n\tfor (auto x : arr) {\n\t\tif (x > 0 && x < 10) {\n\t\t\tres.push_back(m[x]);\n\t\t}\n\t}\n\treturn res;",
        "grade-23": {
            "execution": 1
        },
        "55": "std::vector<std::string> result;\n    // sort the array\n    std::sort(arr.begin(), arr.end());\n    // reverse the array\n    std::reverse(arr.begin(), arr.end());\n    // replace each digit with its corresponding word\n    for (long i = 0; i < arr.size(); i++) {\n        switch (arr[i]) {\n            case 1: result.push_back(\"One\");\n                    break;\n            case 2: result.push_back(\"Two\");\n                    break;\n            case 3: result.push_back(\"Three\");\n                    break;\n            case 4: result.push_back(\"Four\");\n                    break;\n            case 5: result.push_back(\"Five\");\n                    break;\n            case 6: result.push_back(\"Six\");\n                    break;\n            case 7: result.push_back(\"Seven\");\n                    break;\n            case 8: result.push_back(\"Eight\");\n                    break;\n            case 9: result.push_back(\"Nine\");\n                    break;\n            default: break;\n        }\n    }\n    return result;",
        "grade-55": {
            "execution": 1
        },
        "59": "std::sort(arr.begin(), arr.end());\n\tstd::reverse(arr.begin(), arr.end());\n\tstd::vector<std::string> final;\n\tfor (int i = 0; i < arr.size(); i++) {\n\t\tif (arr[i] == 1) {\n\t\t\tfinal.push_back(\"One\");\n\t\t}\n\t\telse if (arr[i] == 2) {\n\t\t\tfinal.push_back(\"Two\");\n\t\t}\n\t\telse if (arr[i] == 3) {\n\t\t\tfinal.push_back(\"Three\");\n\t\t}\n\t\telse if (arr[i] == 4) {\n\t\t\tfinal.push_back(\"Four\");\n\t\t}\n\t\telse if (arr[i] == 5) {\n\t\t\tfinal.push_back(\"Five\");\n\t\t}\n\t\telse if (arr[i] == 6) {\n\t\t\tfinal.push_back(\"Six\");\n\t\t}\n\t\telse if (arr[i] == 7) {\n\t\t\tfinal.push_back(\"Seven\");\n\t\t}\n\t\telse if (arr[i] == 8) {\n\t\t\tfinal.push_back(\"Eight\");\n\t\t}\n\t\telse if (arr[i] == 9) {\n\t\t\tfinal.push_back(\"Nine\");\n\t\t}\n\t}\n\treturn final;",
        "grade-59": {
            "execution": 1
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in a list, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output: []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr) {\n",
        "snippet": [
            "    vector<int> out={};\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))\n        out={arr[i],i};\n    return out;\n}\n"
        ],
        "simplified": "\"Given an array representing a branch of a tree that has non-negative integer nodes your task is to pluck one of the nodes and return it. The plucked node should be the node with the smallest even value. If multiple nodes with the same smallest even value are found return the node that has smallest index. The plucked node should be returned in a list, [ smalest_value, its index ], If there are no even values or the given array is empty, return []. Constraints: * 1 <= nodes.length <= 10000 * 0 <= node.value",
        "task_id": "68",
        "163": "std::vector<long> v;\n  long min = INT_MAX;\n  int idx = -1;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] % 2 == 0 && arr[i] < min) {\n      min = arr[i];\n      idx = i;\n    }\n  }\n  if (idx == -1)\n    return v;\n  v.push_back(min);\n  v.push_back(idx);\n  return v;",
        "grade-163": {
            "execution": 1
        },
        "28": "long size = arr.size();\n    if(!size) return {};\n    long min = 1e9;\n    long index = -1;\n    for(long i = 0; i < size; i++) {\n        if(arr[i] % 2 == 0 && arr[i] < min) {\n            min = arr[i];\n            index = i;\n        }\n    }\n    if(index == -1) return {};\n    return {min, index};",
        "grade-28": {
            "execution": 1
        },
        "6": "std::vector<long> empty;\n  if (arr.size() == 0) return empty;\n  long smallest;\n  int index = 0;\n  int i = 0;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] % 2 == 0) {\n      if (smallest == NULL) {\n        smallest = arr[i];\n        index = i;\n      } else if (arr[i] < smallest) {\n        smallest = arr[i];\n        index = i;\n      }\n    }\n  }\n  if (smallest == NULL) return empty;\n  std::vector<long> answer;\n  answer.push_back(smallest);\n  answer.push_back(index);\n  return answer;",
        "grade-6": {
            "execution": 0
        },
        "189": "if (arr.size() == 0) return {};\n  long min = LONG_MAX;\n  std::vector<long> ret = {};\n  for (size_t i = 0; i < arr.size(); i++) {\n    if (arr[i] % 2 == 0 && arr[i] < min) {\n      min = arr[i];\n      ret = { min, i };\n    }\n  }\n  if (min == LONG_MAX) return {};\n  return ret;",
        "grade-189": {
            "execution": 1
        },
        "70": "std::vector<long> ans;\n    if(arr.size()==0)\n        return ans;\n    long min_even = INT_MAX;\n    long min_even_idx = INT_MAX;\n    for(long i=0;i<arr.size();i++){\n        if(arr[i]%2==0){\n            if(arr[i]<min_even){\n                min_even = arr[i];\n                min_even_idx = i;\n            }\n        }\n    }\n    if(min_even!=INT_MAX){\n        ans.push_back(min_even);\n        ans.push_back(min_even_idx);\n    }\n    return ans;",
        "grade-70": {
            "execution": 1
        },
        "62": "if (arr.size() == 0)\n\t\treturn {};\n\tint n = arr.size();\n\tvector<long> result;\n\tlong minVal = LONG_MAX;\n\tint minValIndex = -1;\n\tfor (int i = 0; i < n; i++) {\n\t\tif (arr[i] % 2 == 0 && arr[i] < minVal) {\n\t\t\tminVal = arr[i];\n\t\t\tminValIndex = i;\n\t\t}\n\t}\n\tif (minValIndex == -1)\n\t\treturn {};\n\tresult.push_back(minVal);\n\tresult.push_back(minValIndex);\n\treturn result;",
        "grade-62": {
            "execution": 0
        },
        "57": "// use an even_found flag to account for the case when there are no evens\n\tbool even_found = false;\n\t// initialize the smallest even value to be the first value in the array\n\tlong smallest_even = arr[0];\n\t// initialize the smallest index to be 0\n\tlong smallest_index = 0;\n\t// loop over the rest of the array values\n\tfor (int i = 1; i < arr.size(); i++) {\n\t\t// check if the current value is even\n\t\tif (arr[i] % 2 == 0) {\n\t\t\t// if the current value is smaller than the smallest even value\n\t\t\tif (arr[i] < smallest_even) {\n\t\t\t\t// set the smallest even value to be the current value\n\t\t\t\tsmallest_even = arr[i];\n\t\t\t\t// set the smallest index to be the current index\n\t\t\t\tsmallest_index = i;\n\t\t\t}\n\t\t\t// set the even_found flag to true\n\t\t\teven_found = true;\n\t\t}\n\t}\n\t// if an even was found\n\tif (even_found) {\n\t\t// return a vector containing the smallest even value and its index\n\t\treturn { smallest_even, smallest_index };\n\t}\n\t// if an even was not found\n\telse {\n\t\t// return an empty vector\n\t\treturn {};\n\t}",
        "grade-57": {
            "execution": 0
        },
        "35": "int n = arr.size();\n   if(n == 0)\n       return {};\n   int min = INT_MAX;\n   int index = -1;\n   for(int i = 0; i < n; i++)\n   {\n       if(arr[i] % 2 == 0 && arr[i] < min)\n       {\n           min = arr[i];\n           index = i;\n       }\n   }\n   if(index == -1)\n       return {};\n   else\n       return {min, index};",
        "grade-35": {
            "execution": 1
        },
        "188": "std::vector<long> answer;\n    for(auto index = arr.begin(); index != arr.end(); index++) {\n        if((*index % 2) == 0) {\n            answer.push_back(*index);\n            answer.push_back(index - arr.begin());\n            return answer;\n        }\n    }\n    return answer;",
        "grade-188": {
            "execution": 0
        },
        "26": "// your code here\n  if(arr.size() == 0)\n    return {};\n  std::vector<long> evens;\n  std::vector<long> evensIndex;\n  for(int i = 0; i < arr.size(); i++)\n  {\n    if(arr[i] % 2 == 0)\n    {\n      evens.push_back(arr[i]);\n      evensIndex.push_back(i);\n    }\n  }\n  std::sort(evens.begin(), evens.end());\n  for(int i = 0; i < evens.size(); i++)\n  {\n    if(evens[i] % 2 == 0)\n    {\n      return {evens[i], evensIndex[i]};\n    }\n  }\n  return {};",
        "grade-26": {
            "execution": 0
        },
        "173": "std::vector<long> v;\n  if(arr.size() == 0) return v;\n  long min = 0;\n  for(int i = 0; i < arr.size(); i++) {\n    if(arr[i] < min && arr[i] % 2 == 0) {\n      min = arr[i];\n      v.push_back(arr[i]);\n      v.push_back(i);\n    }\n  }\n  return v;",
        "grade-173": {
            "execution": 0
        },
        "139": "// your code here\n\tstd::vector<long> temp(2);\n\ttemp[0] = -1;\n\ttemp[1] = -1;\n\tif (arr.size() < 1) {\n\t\treturn temp;\n\t}\n\telse {\n\t\tlong minEven = 10001;\n\t\tint minIndex = 0;\n\t\tint index = 0;\n\t\tfor (long i : arr) {\n\t\t\tif (i % 2 == 0 && i < minEven) {\n\t\t\t\tminEven = i;\n\t\t\t\tminIndex = index;\n\t\t\t}\n\t\t\tindex++;\n\t\t}\n\t\tif (minEven == 10001) {\n\t\t\treturn temp;\n\t\t}\n\t\telse {\n\t\t\ttemp[0] = minEven;\n\t\t\ttemp[1] = minIndex;\n\t\t\treturn temp;\n\t\t}\n\t}",
        "grade-139": {
            "execution": 0
        },
        "22": "if(arr.size() == 0) return {};\n    std::vector<long> ans;\n    long min = arr[0];\n    long min_ind = 0;\n    for(long i = 0; i < arr.size(); i++){\n        if(arr[i]%2 == 0 && arr[i] < min){\n            min = arr[i];\n            min_ind = i;\n        }\n    }\n    if(min == arr[0]) return {};\n    ans.push_back(min);\n    ans.push_back(min_ind);\n    return ans;",
        "grade-22": {
            "execution": 0
        },
        "151": "std::vector<long> v2;\n    long min = -1;\n    long minIndex = -1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] % 2 == 0 && (min == -1 || arr[i] < min)) {\n            min = arr[i];\n            minIndex = i;\n        }\n    }\n    if(minIndex != -1) {\n        v2.push_back(min);\n        v2.push_back(minIndex);\n    }\n    return v2;",
        "grade-151": {
            "execution": 1
        },
        "108": "// your code goes here\n  if(arr.size()==0)\n  {\n    std::vector<long> v;\n    return v;\n  }\n  if(arr.size()==1)\n  {\n    if(arr[0]%2==0)\n    {\n      std::vector<long> v;\n      v.push_back(arr[0]);\n      v.push_back(0);\n      return v;\n    }\n    else\n    {\n      std::vector<long> v;\n      return v;\n    }\n  }\n  long min=arr[0];\n  long index=0;\n  long minIndex=0;\n  int flag=0;\n  for(int i=0;i<arr.size();i++)\n  {\n    if(arr[i]%2==0)\n    {\n      flag=1;\n      if(arr[i]<min)\n      {\n        min=arr[i];\n        minIndex=i;\n      }\n    }\n  }\n  if(flag==0)\n  {\n    std::vector<long> v;\n    return v;\n  }\n  std::vector<long> v;\n  v.push_back(min);\n  v.push_back(minIndex);\n  return v;",
        "grade-108": {
            "execution": 0
        },
        "8": "long min=INT_MAX;\n  int index;\n  for(long i=0;i<arr.size();i++){\n    if(arr[i]%2==0){\n      if(arr[i]<min){\n        min=arr[i];\n        index=i;\n      }\n    }\n  }\n  if(min==INT_MAX){\n    std::vector<long> a{};\n    return a;\n  }\n  std::vector<long> a={min,index};\n  return a;",
        "grade-8": {
            "execution": 1
        },
        "7": "std::vector<long> ans = {};\n  if (arr.size() == 0) {\n    return ans;\n  }\n  long min_even = 10000, min_even_idx = 10000;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] % 2 == 0 && arr[i] < min_even) {\n      min_even = arr[i];\n      min_even_idx = i;\n    }\n  }\n  if (min_even != 10000) {\n    ans.push_back(min_even);\n    ans.push_back(min_even_idx);\n  }\n  return ans;",
        "grade-7": {
            "execution": 1
        },
        "23": "long sz=arr.size();\n    if(sz==0) return {};\n    std::vector<long> ans;\n    long f=0;\n    long sm=arr[0];\n    long idx=0;\n    for(long i=0;i<sz;i++){\n        if(arr[i]%2==0){\n            f=1;\n            if(arr[i]<sm){\n                sm=arr[i];\n                idx=i;\n            }\n        }\n    }\n    if(f==0) return {};\n    ans.push_back(sm);\n    ans.push_back(idx);\n    return ans;",
        "grade-23": {
            "execution": 0
        },
        "55": "std::vector<long> a;\n  if(arr.size()==0)\n  {\n    return a;\n  }\n  else\n  {\n    int small =arr[0];\n    int index = 0;\n    for(int i=0;i<arr.size();i++)\n    {\n      if(arr[i]%2==0 && arr[i]<small)\n      {\n        small = arr[i];\n        index = i;\n      }\n    }\n    if(small%2==0)\n    {\n      a.push_back(small);\n      a.push_back(index);\n      return a;\n    }\n    else\n    {\n      return a;\n    }\n  }",
        "grade-55": {
            "execution": 0
        },
        "59": "std::vector<long> v;\n    long m = 99999999999;\n    long i = 0;\n    int flag = 0;\n    for(auto c: arr){\n        if(c%2 == 0){\n            if(m > c){\n                m = c;\n                flag = 1;\n            }\n        }\n    }\n    if(flag == 1){\n        v.push_back(m);\n        for(auto c: arr){\n            if(c == m){\n                v.push_back(i);\n                break;\n            }\n            i++;\n        }\n    }\n    return v;",
        "grade-59": {
            "execution": 1
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3]) = -1\nlong can_arrange(std::vector<long> arr) {\n",
        "snippet": [
            "    int max=-1;\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]<=i) max=i;\n    return max;\n}\n"
        ],
        "simplified": "Create a function which returns the largest index of an element which is not greater than or equal to the element immediately preceding it. If no such element exists then return -1. The given array will not contain duplicate values.",
        "task_id": "135",
        "169": "if (arr.size() == 1) return -1;\n  //  std::map<long, long> m;\n  //  for (long i = 0; i < arr.size(); i++) {\n  //    m[arr[i]] = i;\n  //  }\n  //  long max = arr[0];\n  //  for (long i = 1; i < arr.size(); i++) {\n  //    if (arr[i] < max) return m[arr[i]];\n  //    if (arr[i] > max) max = arr[i];\n  //  }\n  //  return -1;\n  std::stack<long> s;\n  s.push(arr[0]);\n  for (long i = 1; i < arr.size(); i++) {\n    if (arr[i] < s.top()) return i;\n    while (!s.empty() && arr[i] > s.top()) {\n      s.pop();\n    }\n    s.push(arr[i]);\n  }\n  return -1;",
        "grade-169": {
            "execution": 0
        },
        "28": "// TODO\n  int largestIndex = -1;\n  int counter = 0;\n  for(int i = 0; i < arr.size()-1; i++){\n    if(arr[i] >= arr[i+1]){\n      if(i > largestIndex){\n        largestIndex = i;\n      }\n    }\n  }\n  return largestIndex;",
        "grade-28": {
            "execution": 0
        },
        "6": "long size = arr.size();\n\tif (size == 1)\n\t\treturn -1;\n\tlong next_ele = arr[size - 1];\n\tfor (long i = size - 2; i >= 0; i--) {\n\t\tif (arr[i] <= next_ele) {\n\t\t\tnext_ele = arr[i];\n\t\t}\n\t\telse {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;",
        "grade-6": {
            "execution": 0
        },
        "196": "long index = -1;\n\tfor (int i = arr.size() - 1; i > 0; i--) {\n\t\tif (arr[i] <= arr[i - 1]) {\n\t\t\tindex = i - 1;\n\t\t}\n\t}\n\treturn index;",
        "grade-196": {
            "execution": 0
        },
        "71": "// Your code here\n    int n = arr.size();\n    if(n == 1) return -1;\n    long max = 0;\n    for(int i = 0; i < n - 1; i++){\n        if(arr[i] >= arr[i + 1]){\n            if(max < i) max = i;\n        }\n    }\n    if(max == 0) return -1;\n    return max;",
        "grade-71": {
            "execution": 0
        },
        "63": "// Write your code here",
        "grade-63": {
            "execution": 0
        },
        "58": "long max=arr[0];\n    long result=-1;\n    for(int i=1;i<arr.size();i++){\n        if(arr[i]<=max){\n            result=i-1;\n        }\n        else{\n            max=arr[i];\n        }\n    }\n    return result;",
        "grade-58": {
            "execution": 0
        },
        "35": "long found_idx = -1;\n  for (long i = arr.size() - 1; i > 0; i--) {\n    if (arr[i - 1] >= arr[i]) {\n      found_idx = i;\n    }\n  }\n  return found_idx;",
        "grade-35": {
            "execution": 0
        },
        "195": "int largest=-1;\n    for(int i=0;i<arr.size()-1;i++){\n      if(arr[i]>=arr[i+1]){\n        largest=i;\n      }\n    }\n    return largest;",
        "grade-195": {
            "execution": 0
        },
        "26": "long ans = -1;\n\tfor (long i = 0; i < arr.size() - 1; i++) {\n\t\tif (arr[i] > arr[i + 1]) {\n\t\t\tans = i;\n\t\t}\n\t}\n\treturn ans;",
        "grade-26": {
            "execution": 0
        },
        "180": "long max_val = -1;\n  for (int i = 0; i < arr.size() - 1; i++) {\n    if (arr[i] >= arr[i + 1]) {\n      if (i >= max_val) {\n        max_val = i;\n      }\n    }\n  }\n  return max_val;",
        "grade-180": {
            "execution": 0
        },
        "145": "int n = arr.size();\n    int i;\n    for(i=n-1;i>0;i--)\n    {\n        if(arr[i] < arr[i-1])\n            return i-1;\n    }\n    return -1;",
        "grade-145": {
            "execution": 0
        },
        "22": "// Your code here\n    long i=0;\n    long j=1;\n    long max = -1;\n    for(i=0;i<arr.size()-1;i++){\n        if(arr[i]<arr[j]){\n            if(j>max){\n                max = j;\n            }\n        }\n        j++;\n    }\n    return max;",
        "grade-22": {
            "execution": 0
        },
        "157": "int n = arr.size();\n  int largestIndex = -1;\n  for(int i = 0; i < n - 1; i++) {\n    if(arr[i] >= arr[i + 1]) {\n      if(largestIndex == -1) {\n        largestIndex = i;\n      } else {\n        if(arr[i] > arr[largestIndex]) {\n          largestIndex = i;\n        }\n      }\n    }\n  }\n  return largestIndex;",
        "grade-157": {
            "execution": 0
        },
        "111": "// your code here\n  if(arr.size()==1) return -1;\n  int lrgst_idx = 0;\n  for(int i = 1; i < arr.size(); i++){\n      if(arr[i] > arr[i-1]){\n          lrgst_idx = i;\n      }\n  }\n  return lrgst_idx;",
        "grade-111": {
            "execution": 0
        },
        "8": "long currentVal = 0;\n  long beforeVal = 0;\n  long indexVal = 0;\n  int arrSize = arr.size();\n  for(int i = 1; i < arrSize; i++){\n    currentVal = arr[i];\n    beforeVal = arr[i-1];\n    if(currentVal > beforeVal){\n      indexVal = i;\n    }\n  }\n  return indexVal;",
        "grade-8": {
            "execution": 0
        },
        "7": "long len = arr.size();\n    long max_value = 0;\n    long max_index = -1;\n    for(long i = len - 1; i >= 0; i--) {\n        if(arr[i] < max_value) {\n            return max_index;\n        }\n        if(arr[i] > max_value) {\n            max_value = arr[i];\n            max_index = i;\n        }\n    }\n    return max_index;",
        "grade-7": {
            "execution": 0
        },
        "23": "long n = arr.size(), i = n - 1;\n  if (n == 1)\n    return 0;\n  while (i--) {\n    if (arr[i] >= arr[i + 1])\n      return i;\n  }\n  return -1;",
        "grade-23": {
            "execution": 0
        },
        "56": "long sz = arr.size();\n    if(sz < 2) return -1;\n    long ans = -1;\n    for(long i = sz - 1; i > 0; i--){\n        if(arr[i] >= arr[i - 1]) ans = i;\n    }\n    return ans;",
        "grade-56": {
            "execution": 0
        },
        "60": "long n = arr.size();\n\tlong i = n - 1;\n\twhile (i >= 1 && arr[i] >= arr[i - 1]) {\n\t\ti--;\n\t}\n\treturn i - 1;",
        "grade-60": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement the function f that takes n as a parameter,\n// and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nstd::vector<long> f(long n) {\n",
        "snippet": [
            "    int sum=0,prod=1;\n    vector<int> out={};\n    for (int i=1;i<=n;i++)\n    {\n        sum+=i;\n        prod*=i;\n        if (i%2==0) out.push_back(prod);\n        else out.push_back(sum);\n    } \n    return out;\n}\n"
        ],
        "simplified": "Implement the function f that takes n as a parameter, and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even or the sum of numbers from 1 to i otherwise. i starts from 1. the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).",
        "task_id": "106",
        "169": "std::vector<long> result;\n  for (int i = 1; i <= n; i++) {\n    if (i % 2 == 0) {\n      result.push_back(factorial(i));\n    } else {\n      result.push_back(sum_of_numbers(i));\n    }\n  }\n  return result;",
        "grade-169": {
            "execution": 0
        },
        "28": "std::vector<long> result;\n    for (long i = 1; i <= n; i++) {\n        if (i % 2 == 0) {\n            long factorial = 1;\n            for (long j = 2; j <= i; j++) {\n                factorial *= j;\n            }\n            result.push_back(factorial);\n        } else {\n            long sum = 0;\n            for (long j = 1; j <= i; j++) {\n                sum += j;\n            }\n            result.push_back(sum);\n        }\n    }\n    return result;",
        "grade-28": {
            "execution": 1
        },
        "6": "std::vector<long> list;\n  for (size_t i = 1; i <= n; i++) {\n    if (i % 2 == 0) {\n      long factorial = 1;\n      for (size_t j = 1; j <= i; j++) {\n        factorial *= j;\n      }\n      list.push_back(factorial);\n    } else {\n      long sum = 0;\n      for (size_t j = 1; j <= i; j++) {\n        sum += j;\n      }\n      list.push_back(sum);\n    }\n  }\n  return list;",
        "grade-6": {
            "execution": 1
        },
        "197": "std::vector<long> v(n);\n  long i, s=1;\n  v[0]=1;\n  for(i=1;i<n;i++)\n  {\n    if(i%2==0)\n    {\n      s=1;\n      for(int j=1;j<=i;j++)\n      {\n        s*=j;\n      }\n      v[i]=s;\n    }\n    else{\n      s=0;\n      for(int j=1;j<=i;j++)\n      {\n        s+=j;\n      }\n      v[i]=s;\n    }\n  }\n  return v;",
        "grade-197": {
            "execution": 0
        },
        "70": "std::vector<long> x(n);\n    for(int i=0;i<n;i++){\n      if(i%2==0){\n        long fact=1;\n        for(int j=1;j<=i;j++){\n          fact*=j;\n        }\n        x[i]=fact;\n      }\n      else{\n        long sum=0;\n        for(int j=1;j<=i;j++){\n          sum+=j;\n        }\n        x[i]=sum;\n      }\n    }\n    return x;",
        "grade-70": {
            "execution": 0
        },
        "62": "std::vector<long> numbers;\n  for (int i = 1; i <= n; i++) {\n    if (i % 2 == 0) {\n      long factorial = 1;\n      for (int j = 2; j <= i; j++) {\n        factorial *= j;\n      }\n      numbers.push_back(factorial);\n    } else {\n      long sum = 0;\n      for (int j = 1; j <= i; j++) {\n        sum += j;\n      }\n      numbers.push_back(sum);\n    }\n  }\n  return numbers;",
        "grade-62": {
            "execution": 1
        },
        "57": "std::vector<long> factorials(n);\n    factorials[0] = 1;\n    for (int i = 1; i < n; i++) {\n        if (i % 2 == 0) {\n            int result = 1;\n            for (int j = 1; j <= i; j++) {\n                result *= j;\n            }\n            factorials[i] = result;\n        } else {\n            int result = 0;\n            for (int j = 1; j <= i; j++) {\n                result += j;\n            }\n            factorials[i] = result;\n        }\n    }\n    return factorials;",
        "grade-57": {
            "execution": 0
        },
        "35": "vector<long> vec;\n\tif (n == 0)\n\t\treturn vec;\n\telse {\n\t\tlong fact = 1;\n\t\tlong sum = 0;\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tif (i % 2 == 0) {\n\t\t\t\tfact = fact * i;\n\t\t\t\tvec.push_back(fact);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsum = sum + i;\n\t\t\t\tvec.push_back(sum);\n\t\t\t}\n\t\t}\n\t\treturn vec;\n\t}",
        "grade-35": {
            "execution": 0
        },
        "196": "std::vector<long> a;\n    long fact = 1;\n    long sum = 0;\n    for(int i = 1; i <= n; i++) {\n        if(i % 2 == 0) {\n            for(int j = 1; j <= i; j++) {\n                fact *= j;\n            }\n            a.push_back(fact);\n            fact = 1;\n        }\n        else {\n            for(int j = 1; j <= i; j++) {\n                sum += j;\n            }\n            a.push_back(sum);\n            sum = 0;\n        }\n    }\n    return a;",
        "grade-196": {
            "execution": 1
        },
        "26": "std::vector<long> v;\n    for(long i = 1; i <= n; i++) {\n        if(i % 2 == 0) {\n            long fact = 1;\n            for(long j = 1; j <= i; j++) {\n                fact *= j;\n            }\n            v.push_back(fact);\n        } else {\n            long sum = 0;\n            for(long j = 1; j <= i; j++) {\n                sum += j;\n            }\n            v.push_back(sum);\n        }\n    }\n    return v;",
        "grade-26": {
            "execution": 1
        },
        "181": "std::vector<long> lst(n);\n    for (long i = 0; i < n; i++) {\n        if (i % 2 == 0) {\n            long sum = 1;\n            for (long j = 1; j <= i; j++) {\n                sum *= j;\n            }\n            lst[i] = sum;\n        } else {\n            long sum = 0;\n            for (long j = 1; j <= i; j++) {\n                sum += j;\n            }\n            lst[i] = sum;\n        }\n    }\n    return lst;",
        "grade-181": {
            "execution": 0
        },
        "142": "std::vector<long> returned;\n  long i = 1;\n  while (i <= n) {\n    long result = 1;\n    if (i % 2 == 0) {\n      while (i > 0) {\n        result *= i;\n        i--;\n      }\n    } else {\n      while (i > 0) {\n        result += i;\n        i--;\n      }\n    }\n    returned.push_back(result);\n    i++;\n  }\n  return returned;",
        "grade-142": {
            "execution": 0
        },
        "22": "std::vector<long> result(n);\n    for (long i = 0; i < n; i++) {\n        result[i] = (i + 1) % 2 ? (i + 1) * (i + 2) / 2 : (i + 1);\n    }\n    return result;",
        "grade-22": {
            "execution": 0
        },
        "157": "std::vector<long> v;\n\tfor (long i = 1; i <= n; i++) {\n\t\tif (i % 2 == 0) {\n\t\t\tlong temp = 1;\n\t\t\tfor (long j = 1; j <= i; j++) {\n\t\t\t\ttemp *= j;\n\t\t\t}\n\t\t\tv.push_back(temp);\n\t\t}\n\t\telse {\n\t\t\tlong temp = 0;\n\t\t\tfor (long j = 1; j <= i; j++) {\n\t\t\t\ttemp += j;\n\t\t\t}\n\t\t\tv.push_back(temp);\n\t\t}\n\t}\n\treturn v;",
        "grade-157": {
            "execution": 1
        },
        "111": "// write your solution here\n    // int size = n;\n    std::vector<long> l;\n    for(int i = 1; i<=n; i++){\n      if(i%2 == 0){\n        long fact = 1;\n        for(int j = 1; j<=i; j++){\n          fact = fact*j;\n        }\n        l.push_back(fact);\n      }\n      else{\n        long sum = 0;\n        for(int j = 1; j<=i; j++){\n          sum = sum + j;\n        }\n        l.push_back(sum);\n      }\n    }\n    return l;",
        "grade-111": {
            "execution": 1
        },
        "8": "std::vector<long> v;\n\tfor (long i = 1; i <= n; i++) {\n\t\tif (i % 2 == 0) {\n\t\t\tlong fact = 1;\n\t\t\tfor (long j = 1; j <= i; j++) {\n\t\t\t\tfact *= j;\n\t\t\t}\n\t\t\tv.push_back(fact);\n\t\t}\n\t\telse {\n\t\t\tlong sum = 0;\n\t\t\tfor (long j = 1; j <= i; j++) {\n\t\t\t\tsum += j;\n\t\t\t}\n\t\t\tv.push_back(sum);\n\t\t}\n\t}\n\treturn v;",
        "grade-8": {
            "execution": 1
        },
        "7": "std::vector<long> result;\n\tfor (int i = 1; i <= n; i++) {\n\t\tlong sum = 0;\n\t\tfor (int j = 1; j <= i; j++) {\n\t\t\tsum += j;\n\t\t}\n\t\tif (i % 2 == 0) {\n\t\t\tresult.push_back(factorial(i));\n\t\t}\n\t\telse {\n\t\t\tresult.push_back(sum);\n\t\t}\n\t}\n\treturn result;",
        "grade-7": {
            "execution": 0
        },
        "23": "std::vector<long> result;\n  for (int i = 1; i <= n; i++) {\n    if (i % 2 == 0) {\n      result.push_back(i * i);\n    } else {\n      result.push_back(i * (i + 1) / 2);\n    }\n  }\n  return result;",
        "grade-23": {
            "execution": 0
        },
        "55": "std::vector<long> ret;\n  for (int i = 1; i <= n; i++) {\n    if (i % 2 == 0) {\n      long factorial = 1;\n      for (int j = 2; j <= i; j++) {\n        factorial *= j;\n      }\n      ret.push_back(factorial);\n    } else {\n      ret.push_back(i * (i + 1) / 2);\n    }\n  }\n  return ret;",
        "grade-55": {
            "execution": 1
        },
        "59": "std::vector<long> vec;\n\tfor (int i = 1; i <= n; i++) {\n\t\tif (i % 2 == 0) {\n\t\t\tint fact = 1;\n\t\t\tfor (int j = 2; j <= i; j++) {\n\t\t\t\tfact *= j;\n\t\t\t}\n\t\t\tvec.push_back(fact);\n\t\t}\n\t\telse {\n\t\t\tint sum = 0;\n\t\t\tfor (int j = 1; j <= i; j++) {\n\t\t\t\tsum += j;\n\t\t\t}\n\t\t\tvec.push_back(sum);\n\t\t}\n\t}\n\treturn vec;",
        "grade-59": {
            "execution": 1
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n",
        "snippet": [
            "    vector<int> out={};\n    for (int i=0;i<l.size();i++)\n        if (find(out.begin(),out.end(),l[i])==out.end())\n            out.push_back(l[i]);\n    sort(out.begin(),out.end());\n    return out;\n}\n"
        ],
        "simplified": "Return sorted unique elements in a list",
        "task_id": "34",
        "33": "std::vector<long> a;\n  std::sort(l.begin(), l.end());\n  auto last = std::unique(l.begin(), l.end());\n  l.erase(last, l.end());\n  return l;",
        "grade-33": {
            "execution": 1
        },
        "6": "std::vector<long>::iterator p;\n    sort(l.begin(), l.end());\n    p = std::unique(l.begin(), l.end());\n    l.resize(std::distance(l.begin(), p));\n    return l;",
        "grade-6": {
            "execution": 1
        },
        "86": "std::vector<long> ans;\n  std::sort(l.begin(), l.end());\n  ans.push_back(l[0]);\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i - 1] != l[i]) {\n      ans.push_back(l[i]);\n    }\n  }\n  return ans;",
        "grade-86": {
            "execution": 1
        },
        "77": "std::vector<long> uniq;\n    std::sort(l.begin(), l.end());\n    for (std::vector<long>::iterator it = l.begin(); it != l.end(); ++it) {\n        if (it == l.begin() || *it != *(it - 1)) {\n            uniq.push_back(*it);\n        }\n    }\n    return uniq;",
        "grade-77": {
            "execution": 1
        },
        "70": "std::vector<long> v;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            v.push_back(l[i]);\n        }\n    }\n    return v;",
        "grade-70": {
            "execution": 1
        },
        "41": "std::vector<long> new_list;\n    std::sort(l.begin(), l.end());\n    new_list.push_back(l[0]);\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i-1] != l[i]) {\n            new_list.push_back(l[i]);\n        }\n    }\n    return new_list;",
        "grade-41": {
            "execution": 1
        },
        "30": "// your code here\n    std::vector<long> res;\n    std::sort(l.begin(), l.end());\n    res.push_back(l[0]);\n    for(long i = 1; i < l.size(); i++) {\n        if(l[i] != l[i-1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;",
        "grade-30": {
            "execution": 1
        },
        "193": "std::vector<long> res;\n    std::sort(l.begin(), l.end());\n    res.push_back(l[0]);\n    for (size_t i = 1; i < l.size(); i++) {\n        if (l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;",
        "grade-193": {
            "execution": 1
        },
        "22": "std::vector<long>::iterator it;\n    it = std::unique(l.begin(), l.end());\n    l.resize(std::distance(l.begin(), it));\n    std::sort(l.begin(), l.end());\n    return l;",
        "grade-22": {
            "execution": 0
        },
        "144": "std::vector<long> u;\n  std::sort(l.begin(), l.end());\n  for (std::vector<long>::iterator it = l.begin(); it != l.end(); it++) {\n    if (it == l.begin() || *it != *(it - 1)) {\n      u.push_back(*it);\n    }\n  }\n  return u;",
        "grade-144": {
            "execution": 1
        },
        "8": "std::vector<long> out = {};\n  for (long x : l) {\n    if (std::find(out.begin(), out.end(), x) == out.end()) {\n      out.push_back(x);\n    }\n  }\n  std::sort(out.begin(), out.end());\n  return out;",
        "grade-8": {
            "execution": 1
        },
        "7": "assert(l.size() != 0);\n    // std::sort(l.begin(), l.end());\n    std::vector<long> result;\n    for (int i = 0; i < l.size(); i++) {\n        int found = 0;\n        for (int j = 0; j < result.size(); j++) {\n            if (l[i] == result[j]) {\n                found = 1;\n                break;\n            }\n        }\n        if (found == 0) {\n            result.push_back(l[i]);\n        }\n    }\n    return result;",
        "grade-7": {
            "execution": 0
        },
        "23": "assert(l.size() > 0);\n    std::vector<long>::iterator it;\n    std::sort(l.begin(), l.end());\n    it = std::unique(l.begin(), l.end());\n    l.resize(std::distance(l.begin(), it));\n    return l;",
        "grade-23": {
            "execution": 1
        },
        "66": "sort(l.begin(), l.end());\n    auto it = unique(l.begin(), l.end());\n    l.resize(std::distance(l.begin(), it));\n    return l;",
        "grade-66": {
            "execution": 1
        },
        "72": "std::sort(l.begin(), l.end());\n    std::vector<long>::iterator pos = std::unique(l.begin(), l.end());\n    l.erase(pos, l.end());\n    return l;",
        "grade-72": {
            "execution": 1
        },
        "176": "std::vector<long>::iterator it;\n  std::sort(l.begin(), l.end());\n  it = std::unique(l.begin(), l.end());\n  l.resize(std::distance(l.begin(), it));\n  return l;",
        "grade-176": {
            "execution": 1
        },
        "59": "std::vector<long> result;\n    for (auto& i : l) {\n        if (std::find(result.begin(), result.end(), i) == result.end()) {\n            result.push_back(i);\n        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;",
        "grade-59": {
            "execution": 1
        },
        "143": "std::vector<long> res;\n    for (auto i: l) {\n        if (std::find(res.begin(), res.end(), i) == res.end()) {\n            res.push_back(i);\n        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;",
        "grade-143": {
            "execution": 1
        },
        "67": "std::vector<long> res;\n  sort(l.begin(), l.end());\n  res.push_back(l[0]);\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] != l[i - 1]) {\n      res.push_back(l[i]);\n    }\n  }\n  return res;",
        "grade-67": {
            "execution": 1
        },
        "155": "std::vector<long> s;\n  std::sort(l.begin(), l.end());\n  s.push_back(l[0]);\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i] != l[i - 1]) {\n      s.push_back(l[i]);\n    }\n  }\n  return s;",
        "grade-155": {
            "execution": 1
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nlong modp(long n, long p) {\n",
        "snippet": [
            "    int out=1;\n    for (int i=0;i<n;i++)\n        out=(out*2)%p;\n    return out;\n}\n"
        ],
        "simplified": "Return 2^n modulo p (be aware of numerics).",
        "task_id": "49",
        "165": "assert(p != 0);\n  assert(n != 0);\n  assert(p != 1);\n  long result = 1;\n  while (n > 0) {\n    if (n & 1) {\n      result = (result * (long)result) % p;\n    }\n    n >>= 1;\n  }\n  return result;",
        "grade-165": {
            "execution": 0
        },
        "28": "long res = 1;\n    for (long i = 0; i < n; i++) {\n        res = (res * 2) % p;\n    }\n    return res;",
        "grade-28": {
            "execution": 1
        },
        "6": "if (n <= 1) {\n        return n;\n    }\n    if (n % 2 == 0) {\n        return (long) pow(modp(n / 2, p), 2) % p;\n    }\n    return (long) (modp(n - 1, p) * n) % p;",
        "grade-6": {
            "execution": 0
        },
        "192": "if(n == 0) {\n    return 1;\n  }\n  long r = modp(n/2, p);\n  r = r*r % p;\n  if(n%2) {\n    r = r*2 % p;\n  }\n  return r;",
        "grade-192": {
            "execution": 1
        },
        "71": "if (n < 0) {\n        n += (-n/p + 1) * p;\n    }\n    long c = 1;\n    while (n > 0) {\n        if (n & 1) {\n            c = (c * 2) % p;\n        }\n        n >>= 1;\n        if (n > 0) {\n            c = (c * 2) % p;\n        }\n    }\n    return c;",
        "grade-71": {
            "execution": 0
        },
        "63": "if (n >= p) n %= p;\n\tif (n == 0) return 1;\n\tif (n == 1) return n;\n\tlong w = n, r = 1;\n\twhile (w > 0) {\n\t\tif (w & 1) r = (r * n) % p;\n\t\tw >>= 1;\n\t\tn = (n * n) % p;\n\t}\n\treturn r;",
        "grade-63": {
            "execution": 0
        },
        "58": "if (n == 0) {\n        return 1;\n    } else if (n == 1) {\n        return n;\n    } else if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n        return (t * t) % p;\n    } else {\n        return (n * modp(n - 1, p)) % p;\n    }",
        "grade-58": {
            "execution": 0
        },
        "35": "assert(n >= 0);\n  assert(p > 0);\n  if (n < p) {\n    return n;\n  }\n  long x = 1;\n  while (n > 0) {\n    if (n % 2 == 1) {\n      x = (x * 2) % p;\n    }\n    n /= 2;\n    if (n > 0) {\n      x = (x * x) % p;\n    }\n  }\n  return x;",
        "grade-35": {
            "execution": 0
        },
        "191": "if (n == 0) {\n\t\treturn 1;\n\t}\n\tif (n % 2 == 0) {\n\t\treturn modp(n / 2, p) * modp(n / 2, p) % p;\n\t}\n\treturn modp(n - 1, p) * 2 % p;",
        "grade-191": {
            "execution": 1
        },
        "26": "long result = 1;\n    for (long i = 1; i <= n; i++) {\n        result = result * 2 % p;\n    }\n    return result;",
        "grade-26": {
            "execution": 1
        },
        "175": "long res = 1;\n    while (n > 0) {\n        res = (res * (n % 2 ? p : 1)) % p;\n        n >>= 1;\n        p = (p * p) % MOD;\n    }\n    return res;",
        "grade-175": {
            "execution": 0
        },
        "141": "assert(p > 0);\n    // return (n < p) ? n : (modp(n / 2, p) * 2) % p;\n    if (n < p) return n;\n    else return (modp(n / 2, p) * 2) % p;",
        "grade-141": {
            "execution": 0
        },
        "22": "long r = 1;\n  while (n > 0) {\n    if (n % 2 == 1)\n      r = (r * 2) % p;\n    n = n / 2;\n  }\n  return r;",
        "grade-22": {
            "execution": 0
        },
        "153": "long a = 1;\n  long b = 2;\n  while (n) {\n    if (n % 2) {\n      a = (a * b) % p;\n    }\n    b = (b * b) % p;\n    n /= 2;\n  }\n  return a;",
        "grade-153": {
            "execution": 1
        },
        "109": "long res = 1;\n    while (n > 0) {\n        if (n % 2 == 1) {\n            res = (res * n) % p;\n        }\n        n = n / 2;\n        n = (n * n) % p;\n    }\n    return res % p;",
        "grade-109": {
            "execution": 0
        },
        "8": "if (n == 0) return 1;\n    assert(p > 0);\n    long res = modp(n/2, p);\n    if (n % 2 == 0)\n        return res * res % p;\n    else\n        return (res * res % p) * n % p;",
        "grade-8": {
            "execution": 0
        },
        "7": "assert(n >= 0);\n    assert(p > 0);\n    long res = 1;\n    for (int i = 1; i <= n; i++)\n        res = (res * 2) % p;\n    return res;",
        "grade-7": {
            "execution": 1
        },
        "23": "if (n < 0)\n        return modp(-n, p);\n    if (n < p)\n        return n;\n    if (n % 2 == 0)\n        return (modp(n / 2, p) * modp(n / 2, p)) % p;\n    else\n        return (modp(n / 2, p) * modp(n / 2, p) * 2) % p;",
        "grade-23": {
            "execution": 0
        },
        "56": "assert(p >= 2);\n    if (n >= p)\n        n %= p;\n    long c = 1;\n    while (n > 0) {\n        if (n & 1)\n            c = (c * 2) % p;\n        n >>= 1;\n        // cout << c << ' ' << n << endl;\n    }\n    return c;",
        "grade-56": {
            "execution": 0
        },
        "60": "if (n == 0) {\n\t\treturn 1;\n\t}\n\tif (n % 2 == 0) {\n\t\tlong m = modp(n / 2, p);\n\t\treturn (m * m) % p;\n\t}\n\treturn (2 * modp(n - 1, p)) % p;",
        "grade-60": {
            "execution": 1
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nlong minSubArraySum(std::vector<long> nums) {\n",
        "snippet": [
            "    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\n"
        ],
        "simplified": "Given an array of integers nums, find the minimum sum of any non-empty sub-array of nums.",
        "task_id": "114",
        "166": "if (nums.size() == 0) {\n    return 0;\n  }\n  long min_sum = nums[0];\n  long sum = nums[0];\n  for (int i = 1; i < nums.size(); i++) {\n    sum = std::min(nums[i], sum + nums[i]);\n    min_sum = std::min(min_sum, sum);\n  }\n  return min_sum;",
        "grade-166": {
            "execution": 1
        },
        "28": "long sum=INT_MAX;\n  long max=0;\n  for(int i=0;i<nums.size();i++){\n    max=max+nums[i];\n    if(max<sum){\n      sum=max;\n    }\n    if(max>0){\n      max=0;\n    }\n  }\n  return sum;",
        "grade-28": {
            "execution": 1
        },
        "6": "// Write your code here\n  long minimum = INT_MAX;\n  long sum = 0;\n  for (int i = 0; i < nums.size(); i++) {\n    sum += nums[i];\n    minimum = std::min(minimum, sum);\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minimum;",
        "grade-6": {
            "execution": 1
        },
        "193": "long i = 0, j = 0, sum = 0, min = INT_MAX;\n    while (j < nums.size()) {\n        sum += nums[j++];\n        while (sum >= 0) {\n            min = std::min(min, sum);\n            sum -= nums[i++];\n        }\n    }\n    return min;",
        "grade-193": {
            "execution": 0
        },
        "71": "// Write your code here\n    int min_sum =0;\n    int curr_sum =0;\n    for(int i=0;i<nums.size();i++){\n        curr_sum += nums[i];\n        if(min_sum > curr_sum){\n            min_sum = curr_sum;\n        }\n        if(curr_sum > 0){\n            curr_sum = 0;\n        }\n    }\n    return min_sum;",
        "grade-71": {
            "execution": 0
        },
        "63": "long min_sum = nums[0];\n    long curr_sum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        curr_sum += nums[i];\n        if (curr_sum < min_sum)\n            min_sum = curr_sum;\n        if (curr_sum > 0)\n            curr_sum = 0;\n    }\n    return min_sum;",
        "grade-63": {
            "execution": 1
        },
        "58": "long min = nums[0];\n    long sum = 0;\n    for (long num : nums) {\n        sum += num;\n        if (sum < min) {\n            min = sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return min;",
        "grade-58": {
            "execution": 1
        },
        "35": "long currentSum = 0;\n    long minSubArraySum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        currentSum += nums[i];\n        if (i == 0) {\n            minSubArraySum = currentSum;\n        } else {\n            minSubArraySum = std::min(minSubArraySum, currentSum);\n        }\n        if (currentSum > 0) {\n            currentSum = 0;\n        }\n    }\n    return minSubArraySum;",
        "grade-35": {
            "execution": 1
        },
        "192": "long minSum = LONG_MAX;\n  long sum = 0;\n  long prev = LONG_MAX;\n  std::sort(nums.begin(), nums.end());\n  for (int i = 0; i < nums.size(); i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n    }\n    if (prev != LONG_MAX && (sum - prev) < minSum) {\n      minSum = sum - prev;\n    }\n    prev = sum;\n  }\n  return minSum;",
        "grade-192": {
            "execution": 0
        },
        "26": "long minSoFar = LONG_MAX;\n    long curSum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        curSum += nums[i];\n        minSoFar = std::min(minSoFar, curSum);\n        if (curSum > 0) curSum = 0;\n    }\n    return minSoFar;",
        "grade-26": {
            "execution": 1
        },
        "176": "long m = nums[0];\n  for (auto i = 1; i < nums.size(); i++) {\n    nums[i] = std::min(nums[i], nums[i] + nums[i - 1]);\n    m = std::min(m, nums[i]);\n  }\n  return m;",
        "grade-176": {
            "execution": 1
        },
        "142": "int min = INT_MAX;\n    int sum = 0;\n    for(int i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if(sum < min) {\n            min = sum;\n        }\n        if(sum > 0) {\n            sum = 0;\n        }\n    }\n    return min;",
        "grade-142": {
            "execution": 0
        },
        "22": "long min = nums[0];\n\tfor (long i = 0; i < nums.size(); i++) {\n\t\tlong current = 0;\n\t\tfor (long j = i; j < nums.size(); j++) {\n\t\t\tcurrent += nums[j];\n\t\t\tif (current < min) {\n\t\t\t\tmin = current;\n\t\t\t}\n\t\t}\n\t}\n\treturn min;",
        "grade-22": {
            "execution": 1
        },
        "154": "long m = INT_MAX;\n  long sum = 0;\n  for (long n : nums) {\n    sum += n;\n    m = std::min(m, sum);\n    if (sum < 0) sum = 0;\n  }\n  return m;",
        "grade-154": {
            "execution": 0
        },
        "110": "assert(!nums.empty());\n    long min_sum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        long sub_array_sum = 0;\n        for (int j = i; j < nums.size(); j++) {\n            sub_array_sum += nums[j];\n            if (sub_array_sum < min_sum || i == 0 && j == 0) {\n                min_sum = sub_array_sum;\n            }\n        }\n    }\n    return min_sum;",
        "grade-110": {
            "execution": 1
        },
        "8": "//   int min = INT_MAX;\n    //   int max = INT_MIN;\n    //   for (auto n : nums) {\n    //     if (n < min) {\n    //       min = n;\n    //     }\n    //     if (n > max) {\n    //       max = n;\n    //     }\n    //   }\n    //   return min + max;\n    int min_sum = 0;\n    int sum = 0;\n    int max = INT_MIN;\n    int max_index = 0;\n    int min_index = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (nums[i] < max) {\n            max = nums[i];\n            max_index = i;\n        }\n        if (sum < min_sum) {\n            min_sum = sum;\n            min_index = i;\n        }\n    }\n    return min_sum + max;",
        "grade-8": {
            "execution": 0
        },
        "7": "// Initialize current sum and minimum sum\n    long curr_sum = 0, min_sum = 0;\n\n    // Traverse through the given array\n    for (int i = 0; i < nums.size(); i++) {\n        // Add current element to curr_sum\n        curr_sum = curr_sum + nums[i];\n\n        // If curr_sum is less than 0 then make it equal to 0\n        curr_sum = max(curr_sum, 0);\n\n        // Update minimum sum, if needed\n        min_sum = min(min_sum, curr_sum);\n    }\n    return min_sum;",
        "grade-7": {
            "execution": 0
        },
        "23": "long sum = INT_MAX;\n  int start = 0;\n  int end = 0;\n  long curr_sum = 0;\n  while (end < nums.size()) {\n    curr_sum += nums[end];\n    end++;\n    while (curr_sum >= sum) {\n      sum = curr_sum;\n      curr_sum -= nums[start];\n      start++;\n    }\n  }\n  return sum;",
        "grade-23": {
            "execution": 0
        },
        "56": "if (nums.size() == 0) return 0;\n  long min_sum = nums[0];\n  long curr_sum = 0;\n  for (auto i = 0; i < nums.size(); i++) {\n    curr_sum += nums[i];\n    if (curr_sum < min_sum) min_sum = curr_sum;\n    if (curr_sum > 0) curr_sum = 0;\n  }\n  return min_sum;",
        "grade-56": {
            "execution": 1
        },
        "60": "// Initialize the size of the vector\n  int size = nums.size();\n  // Initialize minimum sum to the first element of the array\n  long min_sum = nums[0];\n  // Initialize the sum of current sub-array to the first element of the array\n  long curr_sum = nums[0];\n  // Check if the number of elements in the array is less than or equal to 1\n  if (size <= 1) {\n    // If the size of the array is less than or equal to 1, then the minimum sum\n    // is the first element in the array\n    return min_sum;\n  }\n  // Loop from the second element in the array to the last element in the array\n  for (int i = 1; i < size; i++) {\n    // Check if the sum of the current sub-array is less than or equal to the\n    // current element in the array\n    if (curr_sum <= nums[i]) {\n      // If the sum of the current sub-array is less than or equal to the current\n      // element in the array, then set the sum of the current sub-array to the\n      // current element in the array\n      curr_sum = nums[i];\n    } else {\n      // If the sum of the current sub-array is greater than the current element\n      // in the array, then add the current element in the array to the sum of\n      // the current sub-array\n      curr_sum += nums[i];\n    }\n    // Check if the sum of the current sub-array is less than the minimum sum\n    if (curr_sum < min_sum) {\n      // If the sum of the current sub-array is less than the minimum sum, then\n      // set the minimum sum to the sum of the current sub-array\n      min_sum = curr_sum;\n    }\n  }\n  // Return the minimum sum\n  return min_sum;",
        "grade-60": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) == []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n",
        "snippet": [
            "    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=1;\n        out.push_back(lst[r]);\n        r-=1;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\n"
        ],
        "simplified": "Given list of integers, return list in strange order. Strange sorting, is when you start with the minimum value, then maximum of the remaining integers, then minimum and so on.",
        "task_id": "70",
        "164": "std::vector<long> result;\n  long n = lst.size();\n  if (n == 0) {\n    return result;\n  }\n  if (n == 1) {\n    result.push_back(lst[0]);\n    return result;\n  }\n  bool asc = true;\n  while (n > 0) {\n    if (asc) {\n      auto it = std::min_element(lst.begin(), lst.end());\n      result.push_back(*it);\n      lst.erase(it);\n      asc = false;\n    } else {\n      auto it = std::max_element(lst.begin(), lst.end());\n      result.push_back(*it);\n      lst.erase(it);\n      asc = true;\n    }\n    n = lst.size();\n  }\n  return result;",
        "grade-164": {
            "execution": 1
        },
        "28": "if (lst.size() == 0) {\n    return {};\n  }\n  std::vector<long> new_lst;\n  auto x = std::min_element(lst.begin(), lst.end());\n  new_lst.push_back(*x);\n  lst.erase(x);\n  while (!lst.empty()) {\n    auto x = std::max_element(lst.begin(), lst.end());\n    new_lst.push_back(*x);\n    lst.erase(x);\n    if (lst.empty()) {\n      break;\n    }\n    x = std::min_element(lst.begin(), lst.end());\n    new_lst.push_back(*x);\n    lst.erase(x);\n  }\n  return new_lst;",
        "grade-28": {
            "execution": 1
        },
        "6": "// Please do not use any sorting algorithms.\n    std::vector<long>::iterator itr;\n    std::vector<long>::iterator itr1;\n    std::vector<long>::iterator itr2;\n    std::vector<long>::iterator itr3;\n    std::vector<long>::iterator itr4;\n    std::vector<long>::iterator itr5;\n    std::vector<long>::iterator itr6;\n    std::vector<long>::iterator itr7;\n    int i=0;\n    int j=lst.size()-1;\n    std::vector<long>::iterator itr8;\n    for(itr=lst.begin();itr!=lst.end();itr++)\n    {\n        if(i<j)\n        {\n            itr1=itr;\n            itr2=lst.begin()+j;\n            std::iter_swap(itr1,itr2);\n            // i++;\n            j--;\n        }\n        if(i==j)\n        {\n            j--;\n        }\n        i++;\n    }\n    i=0;\n    j=lst.size()-1;\n    for(itr3=lst.begin();itr3!=lst.end();itr3++)\n    {\n        if(i<j)\n        {\n            itr4=itr3;\n            itr5=lst.begin()+j;\n            std::iter_swap(itr4,itr5);\n            i++;\n            j--;\n        }\n        if(i==j)\n        {\n            j--;\n        }\n        i++;\n    }\n    i=0;\n    j=lst.size()-1;\n    for(itr6=lst.begin();itr6!=lst.end();itr6++)\n    {\n        if(i<j)\n        {\n            itr7=itr6;\n            itr8=lst.begin()+j;\n            std::iter_swap(itr7,itr8);",
        "grade-6": {
            "execution": 0
        },
        "190": "std::vector<long> strangesort;\n  bool odd = true;\n  int i = 0;\n  int j = lst.size() - 1;\n  while (i < j) {\n    if (odd) {\n      strangesort.push_back(lst[i]);\n      ++i;\n    } else {\n      strangesort.push_back(lst[j]);\n      --j;\n    }\n    odd = !odd;\n  }\n  if (i == j)\n    strangesort.push_back(lst[i]);\n  return strangesort;",
        "grade-190": {
            "execution": 0
        },
        "70": "std::vector<long> res;\n  std::sort(lst.begin(), lst.end());\n  int i = 0;\n  int j = lst.size() - 1;\n  int count = 0;\n  while (i < j) {\n    if (count % 2 == 0) {\n      res.push_back(lst[i]);\n      i++;\n    } else {\n      res.push_back(lst[j]);\n      j--;\n    }\n    count++;\n  }\n  if (i == j) {\n    res.push_back(lst[i]);\n  }\n  return res;",
        "grade-70": {
            "execution": 1
        },
        "62": "std::vector<long> v;\n  if (lst.size() == 0)\n    return v;\n  v.push_back(lst[0]);\n  lst.erase(lst.begin());\n  // sort(lst.begin(), lst.end());\n  int i = 0;\n  while (lst.size() > 0) {\n    if (i % 2 == 0) {\n      long min = lst[0];\n      int minPos = 0;\n      for (int j = 0; j < lst.size(); j++) {\n        if (lst[j] < min) {\n          min = lst[j];\n          minPos = j;\n        }\n      }\n      v.push_back(min);\n      lst.erase(lst.begin() + minPos);\n    } else {\n      long max = lst[0];\n      int maxPos = 0;\n      for (int j = 0; j < lst.size(); j++) {\n        if (lst[j] > max) {\n          max = lst[j];\n          maxPos = j;\n        }\n      }\n      v.push_back(max);\n      lst.erase(lst.begin() + maxPos);\n    }\n    i++;\n  }\n  return v;",
        "grade-62": {
            "execution": 0
        },
        "57": "if (lst.size() <= 1) {\n    return lst;\n  }\n  std::vector<long> sorted_list(lst.size());\n  int size = lst.size();\n  int j = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2 == 0) {\n      sorted_list[j] = *std::min_element(lst.begin(), lst.end());\n    } else {\n      sorted_list[j] = *std::max_element(lst.begin(), lst.end());\n    }\n    lst.erase(std::remove(lst.begin(), lst.end(), sorted_list[j]), lst.end());\n    j++;\n  }\n  return sorted_list;",
        "grade-57": {
            "execution": 0
        },
        "35": "if (lst.size() < 2) {\n        return lst;\n    }\n    std::vector<long> res;\n    int n = lst.size();\n    long max = *std::max_element(lst.begin(), lst.end());\n    int start = 0;\n    while (res.size() < n) {\n        long min = *std::min_element(lst.begin() + start, lst.end());\n        res.push_back(min);\n        auto it = std::find(lst.begin(), lst.end(), min);\n        int idx = std::distance(lst.begin(), it);\n        lst.erase(lst.begin() + idx);\n        if (lst.size() > 0) {\n            long max = *std::max_element(lst.begin(), lst.end());\n            res.push_back(max);\n            it = std::find(lst.begin(), lst.end(), max);\n            idx = std::distance(lst.begin(), it);\n            lst.erase(lst.begin() + idx);\n        }\n    }\n    return res;",
        "grade-35": {
            "execution": 1
        },
        "189": "std::vector<long> result;\n\tstd::sort(lst.begin(), lst.end());\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (i % 2 == 0)\n\t\t\tresult.push_back(lst[i / 2]);\n\t\telse\n\t\t\tresult.push_back(lst[lst.size() - i / 2 - 1]);\n\t}\n\treturn result;",
        "grade-189": {
            "execution": 1
        },
        "26": "std::vector<long> r;\n\tstd::sort(lst.begin(), lst.end());\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (i % 2 == 0)\n\t\t\tr.push_back(lst[i]);\n\t\telse\n\t\t\tr.insert(r.begin(), lst[i]);\n\t}\n\treturn r;",
        "grade-26": {
            "execution": 0
        },
        "174": "if (lst.size() == 0) return lst;\n\tsort(lst.begin(), lst.end());\n\tstd::vector<long> v(lst.size());\n\tint i = 0, j = lst.size() - 1;\n\tfor (int k = 0; k < lst.size(); k += 2) {\n\t\tv[k] = lst[i++];\n\t\tif (k + 1 < lst.size()) v[k + 1] = lst[j--];\n\t}\n\treturn v;",
        "grade-174": {
            "execution": 1
        },
        "140": "std::vector<long> list;\n    std::sort(lst.begin(), lst.end());\n    bool flag = true;\n    while(lst.size()>0){\n        if(flag){\n            list.push_back(lst[0]);\n            lst.erase(lst.begin());\n        }else{\n            list.push_back(lst[lst.size()-1]);\n            lst.erase(lst.end()-1);\n        }\n        flag = !flag;\n    }\n    return list;",
        "grade-140": {
            "execution": 1
        },
        "22": "if (lst.size()==0){\n        return lst;\n    }\n    else{\n        std::vector<long> v;\n        std::sort(lst.begin(),lst.end());\n        std::vector<long>::iterator lst_it;\n        std::cout<<lst.size()<<std::endl;\n        for(int i=0;i<lst.size();i++){\n            if(i%2==0){\n                v.push_back(lst[i/2]);\n            }\n            else{\n                v.push_back(lst[lst.size()-(i/2)-1]);\n            }\n        }\n        return v;\n    }",
        "grade-22": {
            "execution": 1
        },
        "152": "if (lst.size() <= 1) return lst;\n\tstd::vector<long> ret;\n\tstd::sort(lst.begin(), lst.end());\n\tauto size = lst.size();\n\tfor (auto i = 0; i < size; i++) {\n\t\tif (i % 2 == 0) {\n\t\t\tret.push_back(lst[i/2]);\n\t\t} else {\n\t\t\tret.push_back(lst[size-1-i/2]);\n\t\t}\n\t}\n\treturn ret;",
        "grade-152": {
            "execution": 1
        },
        "109": "std::vector<long> rst;\n    int n = lst.size();\n    if (n == 0) {\n        return rst;\n    }\n    sort(lst.begin(), lst.end());\n    int l = 0, r = n - 1;\n    while (l <= r) {\n        rst.push_back(lst[l]);\n        if (l != r) {\n            rst.push_back(lst[r]);\n        }\n        l++;\n        r--;\n    }\n    return rst;",
        "grade-109": {
            "execution": 1
        },
        "8": "if (lst.size() < 2) return lst;\n    std::vector<long> res;\n    int i = 0;\n    for (int j = lst.size() - 1; i <= j; ++i, --j) {\n        res.push_back(lst[i]);\n        if (i == j) break;\n        res.push_back(lst[j]);\n    }\n    return res;",
        "grade-8": {
            "execution": 0
        },
        "7": "std::vector<long> result;\n    // if the list length is less than 2 or\n    // the list is a list of identical elements,\n    // return the same list.\n    if (lst.size() < 2 || std::all_of(lst.begin(), lst.end(), [lst](int i) { return i == lst[0]; }))\n        return lst;\n    // while the list is not empty\n    while (!lst.empty()) {\n        // identify the min and max value of the remaining list\n        long min = *std::min_element(lst.begin(), lst.end());\n        long max = *std::max_element(lst.begin(), lst.end());\n        // add the min value to the result\n        result.push_back(min);\n        // remove the min value from the list\n        lst.erase(std::remove(lst.begin(), lst.end(), min), lst.end());\n        // if the list is empty, exit the loop\n        if (lst.empty())\n            break;\n        // add the max value to the result\n        result.push_back(max);\n        // remove the max value from the list\n        lst.erase(std::remove(lst.begin(), lst.end(), max), lst.end());\n    }\n    return result;",
        "grade-7": {
            "execution": 0
        },
        "23": "auto list = lst;\n  auto len = list.size();\n  if(len <= 1) {\n    return list;\n  }\n  auto half = len/2;\n  std::sort(list.begin(), list.end());\n  std::vector<long> ret(len);\n  int i, j;\n  j = half;\n  int jump = 1;\n  for(i = 0; i < len; ++i) {\n    if(i % 2 == 0) {\n      ret[i] = list[j++];\n    } else {\n      ret[i] = list[--j];\n    }\n  }\n  return ret;",
        "grade-23": {
            "execution": 0
        },
        "55": "std::vector<long> even;\n\tstd::vector<long> odd;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (i % 2 == 0) {\n\t\t\teven.push_back(lst[i]);\n\t\t}\n\t\telse {\n\t\t\todd.push_back(lst[i]);\n\t\t}\n\t}\n\tfor (int i = 0; i < even.size(); i++) {\n\t\tif (i == 0) {\n\t\t\tlst[i] = *std::min_element(even.begin(), even.end());\n\t\t}\n\t\telse {\n\t\t\tlst[i] = *std::max_element(even.begin(), even.end());\n\t\t}\n\t}\n\tfor (int i = 0; i < odd.size(); i++) {\n\t\tif (i == 0) {\n\t\t\tlst[i + even.size()] = *std::min_element(odd.begin(), odd.end());\n\t\t}\n\t\telse {\n\t\t\tlst[i + even.size()] = *std::max_element(odd.begin(), odd.end());\n\t\t}\n\t}\n\treturn lst;",
        "grade-55": {
            "execution": 0
        },
        "59": "// Your code here...\n\tstd::vector<long> l1;\n\tstd::vector<long> l2;\n\tif (lst.size() <= 0)\n\t\treturn lst;\n\tint min = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (lst[i] < lst[min])\n\t\t\tmin = i;\n\t}\n\tl1.push_back(lst[min]);\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (i != min)\n\t\t\tl2.push_back(lst[i]);\n\t}\n\tif (l2.size() > 0) {\n\t\tif (l2.size() % 2 == 0) {\n\t\t\t// l2[l2.size() - 1] = l2[l2.size() - 1] - l2[0];\n\t\t\tl2[0] = l2[l2.size() - 1] - l2[0];\n\t\t\tl2[l2.size() - 1] = l2[l2.size() - 1] - l2[0];\n\t\t}\n\t\telse {\n\t\t\t// l2[l2.size() - 1] = l2[l2.size() - 1] - l2[0];\n\t\t\tl2[0] = l2[l2.size() - 1] - l2[0];\n\t\t\tl2[l2.size() - 1] = l2[l2.size() - 1] - l2[0];\n\t\t}\n\t}\n\tl1.insert(l1.end(), l2.begin(), l2.end());\n\treturn l1;",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long n) {\n",
        "snippet": [
            "    vector<int> a;\n    vector<vector<int>> sum={{0,0,0}};\n    vector<vector<int>> sum2={{0,0,0}};\n    for (int i=1;i<=n;i++)\n    {\n        a.push_back((i*i-i+1)%3);\n        sum.push_back(sum[sum.size()-1]);\n        sum[i][a[i-1]]+=1;\n    }\n    for (int times=1;times<3;times++)\n    {\n    for (int i=1;i<=n;i++)\n    {\n        sum2.push_back(sum2[sum2.size()-1]);\n        if (i>=1)\n        for (int j=0;j<=2;j++)\n            sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];\n    }\n    sum=sum2;\n    sum2={{0,0,0}};\n    }\n\n    return sum[n][0];\n}\n"
        ],
        "simplified": "You are given a positive integer n. You have to create an integer array a of length n. For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1. Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiple of 3.",
        "task_id": "147",
        "164": "return 0;",
        "grade-164": {
            "execution": 0
        },
        "28": "return (n * (n - 1) * (n - 2)) / 6;",
        "grade-28": {
            "execution": 0
        },
        "6": "// Write your code here\n    long k = n/3;\n    if(n%3==0)\n        return (k*(k-1))/2;\n    return k*(k+1)/2;",
        "grade-6": {
            "execution": 0
        },
        "190": "//1,3,7,13,21,31,43,57,73,91,111,133,157,183,211,241,273,307,343,381,421,463,507,553,601,651,703,757,813,871,931,993,1057,1123,1191,1261,1333,1407,1483,1561,1641,1723,1807,1893,1981,2071,2163,2257,2353,2451,2551,2653,2757,2863,2971,3081,3193,3307,3423,3541,3661,3783,3907,4033,4161,4291,4423,4557,4693,4831,4971,5113,5257,5403,5551,5701,5853,6007,6163,6321,6481,6643,6807,6973,7141,7311,7483,7657,7833,8011,8191,8373,8557,8743,8931,9121,9313,9507,9703,9901,10101,10303,10507,10713,10921,11131,11343,11557,11773,11991,12211,12433,12657,12883,13111,13340,13570,13801,14033,14267,14503,14741,14981,15224,15468,15713,15960,16209,16459,16711,16965,17221,17478,17737,17997,18259,18523,18788,19055,19323,19593,19864,20137,20411,20687,20965,21245,21526,21809,22093,22379,22667,22956,23247,23539,23833,24128,24425,24723,25023,25324,25626,25930,26235,26541,26849,27158,27468,27779,28092,28406,28722,29039,29357,29677,29998,30321,30644,30970,312",
        "grade-190": {
            "execution": 0
        },
        "70": "long ans = 0;\n    long div = n / 3;\n    ans += div * (div - 1) / 2;\n    div = n / 3 + 1;\n    ans += div * (div - 1) / 2;\n    return ans;",
        "grade-70": {
            "execution": 0
        },
        "62": "// Write your code here\n    return 0;",
        "grade-62": {
            "execution": 0
        },
        "57": "if(n < 3) return 0;\n    long rem1 = 0, rem2 = 0;\n    for(long i = 1; i <= n; i++) {\n        if(i % 3 == 1) rem1++;\n        else if(i % 3 == 2) rem2++;\n    }\n    long k = std::min(rem1, rem2);\n    rem1 -= k;\n    rem2 -= k;\n    return rem1*rem2 + k*(k - 1)/2;",
        "grade-57": {
            "execution": 0
        },
        "35": "if(n==0)\n        return 0;\n    long ans = 0;\n    for(long i=1;i<n;i++)\n    {\n        for(long j=i+1;j<n;j++)\n        {\n            long k = j+1;\n            long sum = (k*k) - k + 1;\n            long maxsum = sum;\n            long times = 1;\n            if(sum%3==0)\n            {\n                ans+=j-i;\n                continue;\n            }\n            while(sum%3!=0)\n            {\n                k++;\n                sum = (k*k) - k + 1;\n                maxsum+=sum;\n                times++;\n            }\n            while(maxsum%3!=0)\n            {\n                maxsum-=sum;\n                k--;\n                sum = (k*k) - k + 1;\n                times--;\n            }\n            if(times>0)\n                ans+=j-i;\n        }\n    }\n    return ans;",
        "grade-35": {
            "execution": 0
        },
        "189": "long int x, y, z, i, j, k, sum, count=0;\n\t// n = 5\n\t// i = 0 to 4\n\t// j = i + 1 to 4\n\t// k = j + 1 to 4\n\tfor(i=0; i<n; i++) {\n\t\tx = i*i - i + 1;\n\t\tfor(j=i+1; j<n; j++) {\n\t\t\ty = j*j - j + 1;\n\t\t\tfor(k=j+1; k<n; k++) {\n\t\t\t\tz = k*k - k + 1;\n\t\t\t\tsum = x + y + z;\n\t\t\t\tif(sum % 3 == 0)\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;",
        "grade-189": {
            "execution": 0
        },
        "26": "long ans = 0;\n    for(long i = 1; i < n; i++) {\n        for(long j = i + 1; j < n; j++) {\n            if((i * i - i + 1 + j * j - j + 1) % 3 == 0)\n                ans++;\n        }\n    }\n    return ans;",
        "grade-26": {
            "execution": 0
        },
        "174": "long sum = 0;\n    for(long i = 1; i <= n; i++) {\n        sum += i * i - i + 1;\n    }\n    return sum;",
        "grade-174": {
            "execution": 0
        },
        "140": "long *a = new long[n];\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for(long i = 0; i < n - 2; i++) {\n        for(long j = i + 1; j < n - 1; j++) {\n            for(long k = j + 1; k < n; k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n                    count++;\n            }\n        }\n    }\n    return count;",
        "grade-140": {
            "execution": 0
        },
        "22": "long num = n/3;\n    long ans = (num) * (num - 1) * (num - 2) / 6;\n    long rem = n % 3;\n    if(rem == 1) {\n        ans += ((num) * (num - 1) / 2) * (n - 2*num);\n    } else if(rem == 2) {\n        ans += (num) * ((n - num)*(n - num - 1) / 2);\n    }\n    return ans;",
        "grade-22": {
            "execution": 0
        },
        "152": "if (n < 3)\n\t\treturn 0;\n\tif (n % 3 == 0)\n\t\treturn ((n-2) * (n-1) * n) / (6 * 3);\n\telse if (n % 3 == 1)\n\t\treturn ((n-2) * (n-1) * (n-3)) / (6 * 3);\n\telse\n\t\treturn ((n-1) * (n-2) * (n-3)) / (6 * 3);",
        "grade-152": {
            "execution": 0
        },
        "109": "std::vector<long> a(n);\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for(long i = 0; i < n; i++) {\n        for(long j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;",
        "grade-109": {
            "execution": 0
        },
        "8": "long result = 0;\n    // Write your code here\n    if(n < 3) return 0;\n    result = (n-2) * (n-1) * n;\n    result = result/6;\n    return result;",
        "grade-8": {
            "execution": 0
        },
        "7": "// Write your code here\n\t// To print results to the standard output you can use printf()\n\t// Example: printf(\"%s\", \"Hello world!\");\n\tassert(n > 0);\n\tif (n <= 2) return 0;\n\tlong count = 0;\n\tfor (long i = 1; i < n - 1; i++) {\n\t\tfor (long j = i + 1; j < n; j++) {\n\t\t\tlong mod = (i * i - i + 1 + j * j - j + 1) % 3;\n\t\t\tif (mod == 0) {\n\t\t\t\tlong k = 1;\n\t\t\t\twhile (true) {\n\t\t\t\t\tlong val = k * k - k + 1;\n\t\t\t\t\tif (val > (i * i - i + 1 + j * j - j + 1) / 3) break;\n\t\t\t\t\tif (val < (i * i - i + 1)) {\n\t\t\t\t\t\tk++;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (val == (i * i - i + 1 + j * j - j + 1) / 3) {\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;",
        "grade-7": {
            "execution": 0
        },
        "23": "int count = 0;\n\tfor(int i = 1; i < n; i++) {\n\t\tfor(int j = i + 1; j < n; j++) {\n\t\t\tif((i * i - i + 1 + j * j - j + 1) % 3 == 0) {\n\t\t\t\tfor(int k = j + 1; k < n; k++) {\n\t\t\t\t\tif((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;",
        "grade-23": {
            "execution": 0
        },
        "55": "std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i < n - 2; i++) {\n        for (long j = i + 1; j < n - 1; j++) {\n            for (long k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;",
        "grade-55": {
            "execution": 0
        },
        "59": "long a[n];\n    for(long i=0;i<n;i++)\n    {\n        a[i]=i*i-i+1;\n    }\n    long count=0;\n    for(long i=0;i<n;i++)\n    {\n        for(long j=i+1;j<n;j++)\n        {\n            for(long k=j+1;k<n;k++)\n            {\n                if((a[i]+a[j]+a[k])%3==0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long b) {\n",
        "snippet": [
            "    return (abs(a)%10)*(abs(b)%10);\n}\n"
        ],
        "simplified": "Complete the function that takes two integers and returns the product of their unit digits. Assume the input is always valid.",
        "task_id": "97",
        "195": "return ((a % 10) * (b % 10));",
        "grade-195": {
            "execution": 0
        },
        "30": "// Your code here\n    long c = a % 10;\n    long d = b % 10;\n    return c * d;",
        "grade-30": {
            "execution": 0
        },
        "7": "return std::abs(a % 10 * b % 10);",
        "grade-7": {
            "execution": 0
        },
        "77": "//your code here\n    long result = 1;\n    while(a > 0) {\n        long x = a % 10;\n        if(x > 0) {\n            result *= x;\n        }\n        a /= 10;\n    }\n    while(b > 0) {\n        long x = b % 10;\n        if(x > 0) {\n            result *= x;\n        }\n        b /= 10;\n    }\n    return result;",
        "grade-77": {
            "execution": 0
        },
        "69": "// We can just multiply the last digits of a and b and\n  // return that value.\n  return (a % 10) * (b % 10);",
        "grade-69": {
            "execution": 0
        },
        "63": "// your code here\n    // make it work for negative numbers!\n    a=a<0?-a:a;\n    b=b<0?-b:b;\n    return (a%10)*(b%10);",
        "grade-63": {
            "execution": 1
        },
        "38": "std::ostringstream os;\n    os << a << b;\n    return std::stoi(os.str()) % 10;\n  }\n//   int main()\n//   {\n//      assert(multiply(7, 17) == 9);\n//      assert(multiply(19, 28) == 72);\n//      assert(multiply(2020, 1851) == 0);\n//      assert(multiply(14, -15) == 20);\n//   }",
        "grade-38": {
            "execution": 0
        },
        "28": "long firstNumber = abs(a);\n   long secondNumber = abs(b);\n   long lastDigitA = firstNumber % 10;\n   long lastDigitB = secondNumber % 10;\n   return (lastDigitA * lastDigitB);",
        "grade-28": {
            "execution": 1
        },
        "165": "int rem1,rem2;\n    rem1=a%10;\n    rem2=b%10;\n    return (rem1*rem2);",
        "grade-165": {
            "execution": 0
        },
        "24": "// This is a \"method-only\" submission. \n  // You only need to complete this method. \n  // Checking the lowest significant digit of each.\n  long mul = a*b;\n  int prod = mul%10;\n  return prod;",
        "grade-24": {
            "execution": 0
        },
        "181": "int i=0;\n  std::cout<<\"a: \"<<a<<\" b: \"<<b<<std::endl;\n  while(a<0){\n    a = a * -1;\n    i++;\n  }\n  int j=0;\n  while(b<0){\n    b = b * -1;\n    j++;\n  }\n  if((i+j)%2 != 0){\n    return (a%10)*(b%10)*-1;\n  }\n  return (a%10)*(b%10);",
        "grade-181": {
            "execution": 0
        },
        "122": "return abs(a % 10 * b % 10);",
        "grade-122": {
            "execution": 0
        },
        "9": "if(a<0) a*=-1;\n    if(b<0) b*=-1;\n    return (a%10)*(b%10);",
        "grade-9": {
            "execution": 1
        },
        "8": "if(a<0)a=-a;\n    if(b<0)b=-b;\n    return (a%10)*(b%10);",
        "grade-8": {
            "execution": 1
        },
        "25": "return (a%10) * (b%10);",
        "grade-25": {
            "execution": 0
        },
        "61": "//return a*b;\n//return (a%10)*(b%10);\nreturn (a*b)%10;",
        "grade-61": {
            "execution": 0
        },
        "65": "long ret = 1;\n\twhile (a) {\n\t\tret *= a % 10;\n\t\ta /= 10;\n\t}\n\twhile (b) {\n\t\tret *= b % 10;\n\t\tb /= 10;\n\t}\n\treturn ret % 10;",
        "grade-65": {
            "execution": 0
        },
        "152": "int c = 1;\n\tint n;\n\t// if(a<0&&b<0)\n\t// \tn = -1;\n\t// else if(a<0||b<0)\n\t// \tn = 1;\n\t// else\n\t// \tn = 1;\n\t// std::cout<<\"a = \"<<a<<\"b = \"<<b<<\"\\n\";\n\t// std::cout<<\"a = \"<<a<<\"b = \"<<b<<\"\\n\";\n\ta = abs(a);\n\tb = abs(b);\n\tstd::cout<<\"a = \"<<a<<\"b = \"<<b<<\"\\n\";\n\tif(a==0&&b==0)\n\t\treturn c;\n\tif(a==0)\n\t\treturn (b%10);\n\tif(b==0)\n\t\treturn (a%10);\n\treturn ((a%10)*(b%10));",
        "grade-152": {
            "execution": 0
        },
        "184": "// your code here\n    return a<0?-a:a % 10 * (b<0?-b:b % 10);",
        "grade-184": {
            "execution": 0
        },
        "169": "// Write your code here\n  long unitDigitOfA = a % 10;\n  long unitDigitOfB = b % 10;\n  long result = unitDigitOfA * unitDigitOfB;\n  return result;",
        "grade-169": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n",
        "snippet": [
            "    int sum=0;\n    for (int i=0;i<k;i++)\n        if( arr[i]>=-99 and arr[i]<=99)\n            sum+=arr[i];\n    return sum;\n}\n"
        ],
        "simplified": "Given a non-empty array of integers arr and an integer k, return the sum of the elements with at most two digits from the first k elements of arr.",
        "task_id": "122",
        "192": "long sum = 0;\n  for (int i = 0; i < k; i++) {\n    if (arr[i] < 100)\n      sum += arr[i];\n  }\n  return sum;",
        "grade-192": {
            "execution": 1
        },
        "32": "// Write your code here\n  std::vector<long> input;\n  for(long i = 0; i < arr.size(); i++) {\n    if(arr[i] > 9 && arr[i] < 100) {\n      input.push_back(arr[i]);\n    }\n  }\n  if(input.size() == 0) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n      sum += arr[i];\n    }\n    return sum;\n  }\n  std::vector<long> res;\n  long sum = 0;\n  for(long i = 0; i < k; i++) {\n    if(input[i] > 9 && input[i] < 100) {\n      res.push_back(input[i]);\n    }\n  }\n  for(long i = 0; i < res.size(); i++) {\n    sum += res[i];\n  }\n  return sum;",
        "grade-32": {
            "execution": 0
        },
        "6": "long ans = 0;\n    for(long i = 0; i < k; i++) {\n        if(arr[i] < 100) {\n            ans += arr[i];\n        }\n    }\n    return ans;",
        "grade-6": {
            "execution": 1
        },
        "79": "long sum = 0;\n    for(int i = 0; i < k; i++) {\n        if(arr[i] > 9 && arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
        "grade-79": {
            "execution": 0
        },
        "71": "int count = 0;\n  long sum = 0;\n  for (long i = 0; i < arr.size(); i++) {\n    if (count == k) {\n      break;\n    }\n    if (arr[i] < 100) {\n      sum += arr[i];\n      count++;\n    }\n  }\n  return sum;",
        "grade-71": {
            "execution": 0
        },
        "66": "long sum = 0;\n  for (long i = 0; i < k; i++) {\n    if (arr[i] < 10) {\n      sum += arr[i];\n    } else if (arr[i] < 100) {\n      sum += arr[i];\n    }\n  }\n  return sum;",
        "grade-66": {
            "execution": 1
        },
        "40": "long res = 0;\n\tint count = 0;\n\tfor(long i = 0; i < arr.size(); i++) {\n\t\tint digits = 0;\n\t\twhile(arr[i] > 0) {\n\t\t\tdigits++;\n\t\t\tarr[i] /= 10;\n\t\t}\n\t\tif(digits <= 2) {\n\t\t\tres += arr[i];\n\t\t\tcount++;\n\t\t}\n\t\tif(count == k)\n\t\t\tbreak;\n\t}\n\treturn res;",
        "grade-40": {
            "execution": 0
        },
        "30": "long ret = 0;\n  for (long i = 0; i < k; i++) {\n    ret += (arr[i] / 10 == 0) ? arr[i] : arr[i] % 10 + arr[i] / 10;\n  }\n  return ret;",
        "grade-30": {
            "execution": 0
        },
        "161": "long sum = 0;\n\tfor (int i = 0; i < k; i++) {\n\t\tif (arr[i] > 9 && arr[i] < 100) {\n\t\t\tsum += arr[i];\n\t\t}\n\t}\n\treturn sum;",
        "grade-161": {
            "execution": 0
        },
        "26": "long sum = 0;\n\tlong i = 0;\n\tfor (i = 0; i < k; i++) {\n\t\tif (arr[i] > 9 && arr[i] < 100) {\n\t\t\tsum += arr[i];\n\t\t}\n\t}\n\treturn sum;",
        "grade-26": {
            "execution": 0
        },
        "177": "long sum = 0;\n\tfor (long i = 0; i < k; i++) {\n\t\tif (arr[i] > 99) {\n\t\t\tarr[i] = 99;\n\t\t}\n\t\tsum += arr[i];\n\t}\n\treturn sum;",
        "grade-177": {
            "execution": 0
        },
        "120": "// std::cout << \"k = \" << k << \"\\n\";\n    long sum = 0;\n    for (long i = 0; i < k; i++) {\n        // std::cout << \"arr[i] = \" << arr[i] << \"\\n\";\n        sum += arr[i];\n    }\n    return sum;",
        "grade-120": {
            "execution": 0
        },
        "9": "long sum = 0;\n  for (long i = 0; i < k; i++) {\n    if (arr[i] < 100) {\n      sum += arr[i];\n    }\n  }\n  return sum;",
        "grade-9": {
            "execution": 1
        },
        "7": "long result = 0;\n    for(long i = 0; i < k; i++) {\n        if(arr[i] < 10 || arr[i] < 100) {\n            result += arr[i];\n        }\n    }\n    return result;",
        "grade-7": {
            "execution": 1
        },
        "27": "long sum = 0;\n    for(long i = 0; i < k; i++) {\n        long element = arr[i];\n        if(arr[i] > 9 && arr[i] < 100) {\n            sum += element;\n        }\n    }\n    return sum;",
        "grade-27": {
            "execution": 0
        },
        "64": "std::vector<long> dp(arr.size(), 0);\n    long res = 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] < 10) {\n            res += arr[i];\n        } else if (arr[i] < 100) {\n            res += arr[i] - 10;\n        } else {\n            res += arr[i] - 100;\n        }\n    }\n    dp[k-1] = res;\n    for (int i = k; i < arr.size(); i++) {\n        if (arr[i-k] < 10) {\n            res -= arr[i-k];\n        } else if (arr[i-k] < 100) {\n            res -= arr[i-k] - 10;\n        } else {\n            res -= arr[i-k] - 100;\n        }\n        if (arr[i] < 10) {\n            res += arr[i];\n        } else if (arr[i] < 100) {\n            res += arr[i] - 10;\n        } else {\n            res += arr[i] - 100;\n        }\n        dp[i] = res;\n    }\n    return dp[arr.size()-1];",
        "grade-64": {
            "execution": 0
        },
        "68": "long sum = 0;\n  for (long i = 0; i < k; i++) {\n    long temp = arr[i];\n    if (temp > 9) {\n      sum += (temp % 10) + (temp / 10);\n    } else {\n      sum += temp;\n    }\n  }\n  return sum;",
        "grade-68": {
            "execution": 0
        },
        "146": "// int result = 0;\n    // for(int i = 0; i < k; i++) {\n    //     if(arr[i] > 99)\n    //         result += arr[i];\n    // }\n    // return result;\n    long result = 0;\n    for(int i = 0; i < k; i++) {\n        if(arr[i] >= 10 && arr[i] <= 99)\n            result += arr[i];\n    }\n    return result;",
        "grade-146": {
            "execution": 0
        },
        "180": "// insert your code here\n  long sum = 0;\n  for(long i = 0; i < k; i++) {\n    if(arr[i] >= 10 && arr[i] < 100) {\n      sum += arr[i];\n    }\n  }\n  return sum;",
        "grade-180": {
            "execution": 0
        },
        "167": "// 1. Check validity of input\n    assert(1 <= arr.size() && arr.size() <= 100);\n    assert(1 <= k && k <= arr.size());\n    // 2. Let's define a variable that will hold the response\n    long res = 0;\n    // 3. Loop through first k elements of arr\n    for (long i = 0; i < k; i++) {\n        // 4. Check whether the current element has at most two digits\n        if (arr[i] <= 99) {\n            // 5. If so, add it to res\n            res += arr[i];\n        }\n    }\n    // 6. After the loop is done, return res\n    return res;",
        "grade-167": {
            "execution": 1
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to implement a function that will simplify the expression\n// x * n. The function returns True if x * n evaluates to a whole number and False\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n// simplify(\"7/10\", \"10/2\") = False\nbool simplify(std::string x, std::string n) {\n",
        "snippet": [
            "    int a,b,c,d,i;\n    for (i=0;i<x.size();i++)\n        if (x[i]=='/') \n        {\n            a=atoi(x.substr(0,i).c_str());\n            b=atoi(x.substr(i+1).c_str());\n        }\n    for (i=0;i<n.size();i++)\n        if (n[i]=='/') \n        {\n            c=atoi(n.substr(0,i).c_str());\n            d=atoi(n.substr(i+1).c_str());\n        }\n    if ((a*c)%(b*d)==0) return true;\n    return false;\n}\n"
        ],
        "simplified": "Your task is to implement a function that will simplify the expression x * n. The function returns True if x * n evaluates to a whole number and False otherwise. Both x and n, are string representation of a fraction, and have the following format, <numerator>/<denominator> where both numerator and denominator are positive whole numbers. You can assume that x, and n are valid fractions, and do not have zero as denominator.",
        "task_id": "144",
        "163": "int numeratorX = stoi(x.substr(0, x.find(\"/\")));\n  int denominatorX = stoi(x.substr(x.find(\"/\") + 1));\n  int numeratorN = stoi(n.substr(0, n.find(\"/\")));\n  int denominatorN = stoi(n.substr(n.find(\"/\") + 1));\n  float temp1 = (float)numeratorX / denominatorX;\n  float temp2 = (float)numeratorN / denominatorN;\n  float answer = temp1 * temp2;\n  std::cout << answer << std::endl;\n  return answer - (int)answer == 0;",
        "grade-163": {
            "execution": 1
        },
        "28": "std::stringstream ss(x);\n  std::string token;\n  int numer;\n  int denom;\n  int count = 0;\n  while(std::getline(ss, token, '/')) {\n    if (count == 0)\n      numer = std::stoi(token);\n    else if (count == 1)\n      denom = std::stoi(token);\n    count += 1;\n  }\n  // numer * denom/denom == numer\n  if (numer * denom % denom == 0)\n    return true;\n  else\n    return false;",
        "grade-28": {
            "execution": 0
        },
        "6": "// write your solution here\n    return true;",
        "grade-6": {
            "execution": 0
        },
        "189": "using namespace std;\n  stringstream fx(x), fn(n);\n  int num1, denom1, num2, denom2;\n  getline(fx, x, '/');\n  getline(fn, n, '/');\n  istringstream(x) >> num1;\n  istringstream(n) >> num2;\n  getline(fx, x, '/');\n  getline(fn, n, '/');\n  istringstream(x) >> denom1;\n  istringstream(n) >> denom2;\n  if ((num1 * denom2) % (num2 * denom1) == 0)\n    return true;\n  return false;",
        "grade-189": {
            "execution": 0
        },
        "70": "int i=0;\n    for(;i<x.size();i++){\n        if(x[i]=='/')\n            break;\n    }\n    int p1=std::stoi(x.substr(0,i));\n    int p2=std::stoi(x.substr(i+1,x.size()-i-1));\n    i=0;\n    for(;i<n.size();i++){\n        if(n[i]=='/')\n            break;\n    }\n    int q1=std::stoi(n.substr(0,i));\n    int q2=std::stoi(n.substr(i+1,n.size()-i-1));\n    if((p1*q2)%(p2*q1)==0)\n        return true;\n    return false;",
        "grade-70": {
            "execution": 0
        },
        "62": "unsigned long slash_x = x.find(\"/\");\n  unsigned long slash_n = n.find(\"/\");\n  int x_num = std::stoi(x.substr(0, slash_x));\n  int x_den = std::stoi(x.substr(slash_x + 1));\n  int n_num = std::stoi(n.substr(0, slash_n));\n  int n_den = std::stoi(n.substr(slash_n + 1));\n  return (x_num * n_den) % (x_den * n_num) == 0;",
        "grade-62": {
            "execution": 0
        },
        "57": "std::vector<std::string>v1,v2;\n  std::string delimiter = \"/\";\n  size_t pos = 0;\n  std::string token;\n  while ((pos = x.find(delimiter)) != std::string::npos) {\n      token = x.substr(0, pos);\n      v1.push_back(token);\n      x.erase(0, pos + delimiter.length());\n  }\n  v1.push_back(x);\n  while ((pos = n.find(delimiter)) != std::string::npos) {\n      token = n.substr(0, pos);\n      v2.push_back(token);\n      n.erase(0, pos + delimiter.length());\n  }\n  v2.push_back(n);\n  std::vector<int> f1,f2;\n  for(int i=0;i<v1.size();i++){\n    int h = std::stoi(v1[i]);\n    f1.push_back(h);\n  }\n  for(int i=0;i<v2.size();i++){\n    int h = std::stoi(v2[i]);\n    f2.push_back(h);\n  }\n  int gcd = __gcd(f1[0]*f2[1],f1[1]*f2[0]);\n  if(gcd == f1[1]*f2[0]){\n    return true;\n  }\n  else{\n    return false;\n  }",
        "grade-57": {
            "execution": 0
        },
        "35": "// <div class=\"hint\" style=\"display: inline-block\">\n  // <span style=\"color: #404040\">\n  //   <em>Hint:</em>\n  // </span>\n  // <span style=\"color: #f4b067\">\n  //   <strong>\n  //     <em>Note</em>\n  //   </strong>\n  // </span>\n  // <span style=\"color: #404040\">\n  //   <em>\n  //     : You can read strings as numbers by using <code>stoi</code>\n  //   </em>\n  // </span>\n  // </div>\n  return false;",
        "grade-35": {
            "execution": 0
        },
        "188": "// your code goes here\n  long long int x_num, x_den, n_num, n_den;\n  int num_slash=0;\n  for(int i=0; i<x.length(); i++){\n    if(x[i]=='/')\n      num_slash++;\n  }\n  if(num_slash==0){\n    x_num = std::stoi(x);\n    x_den = 1;\n  }\n  else{\n    std::vector<std::string> nums;\n    std::string num=\"\";\n    for(int i=0; i<x.length(); i++){\n      if(x[i]=='/'){\n        nums.push_back(num);\n        num=\"\";\n      }\n      else{\n        num+=x[i];\n      }\n    }\n    nums.push_back(num);\n    x_num = std::stoi(nums[0]);\n    x_den = std::stoi(nums[1]);\n  }\n  num_slash=0;\n  for(int i=0; i<n.length(); i++){\n    if(n[i]=='/')\n      num_slash++;\n  }\n  if(num_slash==0){\n    n_num = std::stoi(n);\n    n_den = 1;\n  }\n  else{\n    std::vector<std::string> nums;\n    std::string num=\"\";\n    for(int i=0; i<n.length(); i++){\n      if(n[i]=='/'){\n        nums.push_back(num);\n        num=\"\";\n      }\n      else{\n        num+=n[i];\n      }\n    }\n    nums.push_back(num);\n    n_num = std::stoi(nums[0]);\n    n_den = std::stoi(nums[1]);\n  }\n  //Multiply numerators and denominators\n  long long int x_num_n_num = x_num*n_num;\n  long long int x_den_",
        "grade-188": {
            "execution": 0
        },
        "26": "std::string mul = std::to_string(std::stoi(x.substr(0, x.find('/'))) * std::stoi(n.substr(0, n.find('/')))) + '/' +\n\t\tstd::to_string(std::stoi(x.substr(x.find('/') + 1)) * std::stoi(n.substr(n.find('/') + 1)));\n\tstd::cout << mul << std::endl;\n\tif (mul.substr(mul.find('/') + 1) == \"1\")\n\t\treturn true;\n\treturn false;",
        "grade-26": {
            "execution": 0
        },
        "173": "int gcd(int, int);\n\tint num1, den1, num2, den2;\n\tstd::stringstream ss(x);\n\tstd::string item;\n\tstd::vector<std::string> tokens;\n\twhile (std::getline(ss, item, '/')) {\n\t\ttokens.push_back(item);\n\t}\n\tnum1 = stoi(tokens[0]);\n\tden1 = stoi(tokens[1]);\n\ttokens.clear();\n\tstd::stringstream ss1(n);\n\twhile (std::getline(ss1, item, '/')) {\n\t\ttokens.push_back(item);\n\t}\n\tnum2 = stoi(tokens[0]);\n\tden2 = stoi(tokens[1]);\n\treturn num1 * den2 % (num2 * den1) == 0;",
        "grade-173": {
            "execution": 0
        },
        "139": "size_t slash_x = x.find('/');\n    size_t slash_n = n.find('/');\n    int num_x = std::stoi(x.substr(0, slash_x));\n    int den_x = std::stoi(x.substr(slash_x + 1));\n    int num_n = std::stoi(n.substr(0, slash_n));\n    int den_n = std::stoi(n.substr(slash_n + 1));\n    return (num_x * den_n) % (den_x * num_n) == 0;",
        "grade-139": {
            "execution": 0
        },
        "22": "return true;",
        "grade-22": {
            "execution": 0
        },
        "151": "int n1, n2, d1, d2;\n    sscanf(x.c_str(), \"%d/%d\", &n1, &d1);\n    sscanf(n.c_str(), \"%d/%d\", &n2, &d2);\n    if (n1*d2 == n2*d1) return true;\n    return false;",
        "grade-151": {
            "execution": 0
        },
        "108": "// Write your code here\n    int numerator1,denominator1,numerator2,denominator2;\n    int i = 0;\n    while(x[i] != '/')\n    {\n        i++;\n    }\n    numerator1 = stoi(x.substr(0,i));\n    denominator1 = stoi(x.substr(i+1,x.length()-i));\n    i = 0;\n    while(n[i] != '/')\n    {\n        i++;\n    }\n    numerator2 = stoi(n.substr(0,i));\n    denominator2 = stoi(n.substr(i+1,n.length()-i));\n    int num = numerator1 * denominator2;\n    int den = denominator1 * numerator2;\n    if(num % den == 0)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }",
        "grade-108": {
            "execution": 0
        },
        "8": "size_t pos = x.find(\"/\");\n    if (pos == std::string::npos)\n        return false;\n    std::string x1 = x.substr(0, pos);\n    std::string x2 = x.substr(pos + 1);\n    pos = n.find(\"/\");\n    if (pos == std::string::npos)\n        return false;\n    std::string n1 = n.substr(0, pos);\n    std::string n2 = n.substr(pos + 1);\n    std::string s = std::to_string(std::stoi(x1) * std::stoi(n2));\n    s += \"/\";\n    s += std::to_string(std::stoi(x2) * std::stoi(n1));\n    std::string s2 = \"1/1\";\n    return s == s2;",
        "grade-8": {
            "execution": 0
        },
        "7": "int x1 = stoi(x.substr(0, x.find('/')));\n    int x2 = stoi(x.substr(x.find('/') + 1));\n    int n1 = stoi(n.substr(0, n.find('/')));\n    int n2 = stoi(n.substr(n.find('/') + 1));\n    int result = x1 * n1;\n    int denom = x2 * n2;\n    if (result % denom == 0) {\n        return true;\n    }\n    return false;",
        "grade-7": {
            "execution": 1
        },
        "23": "// todo\n\treturn true;",
        "grade-23": {
            "execution": 0
        },
        "55": "int n1, d1, n2, d2;\n\tint found1 = x.find(\"/\");\n\tint found2 = n.find(\"/\");\n\tn1 = std::stoi(x.substr(0, found1));\n\td1 = std::stoi(x.substr(found1 + 1, x.length()));\n\tn2 = std::stoi(n.substr(0, found2));\n\td2 = std::stoi(n.substr(found2 + 1, n.length()));\n\treturn (n1*d2) % (d1*n2) == 0;",
        "grade-55": {
            "execution": 0
        },
        "59": "int num1 = atoi(x.substr(0,x.find(\"/\")).c_str());\n    int den1 = atoi(x.substr(x.find(\"/\")+1).c_str());\n    int num2 = atoi(n.substr(0,n.find(\"/\")).c_str());\n    int den2 = atoi(n.substr(n.find(\"/\")+1).c_str());\n    if(num1*den2 % den1 == 0)\n        return true;\n    return false;",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nstd::vector<long> derivative(std::vector<long> xs) {\n",
        "snippet": [
            "    vector<float> out={};\n    for (int i=1;i<xs.size();i++)\n        out.push_back(i*xs[i]);\n    return out;\n}\n"
        ],
        "simplified": "xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 + .... Return derivative of this polynomial in the same form.",
        "task_id": "62",
        "32": "// Implement your solution here\n  std::vector<long> v;\n  for(int i=1;i<xs.size();i++){\n      v.push_back(xs[i]*i);\n  }\n  return v;",
        "grade-32": {
            "execution": 1
        },
        "6": "int sz = xs.size();\n    std::vector<long> vs;\n    for (int i = 1; i < sz; i++) {\n        vs.push_back(xs[i] * i);\n    }\n    return vs;",
        "grade-6": {
            "execution": 1
        },
        "87": "std::vector<long> results;\n\tfor (int i = 1; i < xs.size(); i++) {\n\t\tresults.push_back(xs[i] * i);\n\t}\n\treturn results;",
        "grade-87": {
            "execution": 1
        },
        "77": "std::vector<long> new_xs;\n  for (int i = 1; i < xs.size(); i++) {\n    new_xs.push_back(xs[i] * i);\n  }\n  return new_xs;",
        "grade-77": {
            "execution": 1
        },
        "68": "int n = xs.size();\n    std::vector<long> ys;\n    for (int i = 1; i < n; i++) {\n        ys.push_back(xs[i] * i);\n    }\n    return ys;",
        "grade-68": {
            "execution": 1
        },
        "41": "std::vector<long> ys(xs.size() - 1);\n    for (int i = 0; i < xs.size() - 1; i++) {\n        ys[i] = xs[i] * (xs.size() - 1 - i);\n    }\n    return ys;",
        "grade-41": {
            "execution": 0
        },
        "30": "int len = xs.size();\n  std::vector<long> result(len - 1);\n  for (int i = 1; i < len; i++) {\n    result[i - 1] = xs[i] * i;\n  }\n  return result;",
        "grade-30": {
            "execution": 1
        },
        "179": "// your code goes here\n\tstd::vector<long> deriv;\n\tlong size = xs.size();\n\tif (size == 1) {\n\t\tderiv.push_back(0);\n\t\treturn deriv;\n\t}\n\tfor (long i = 1; i < size; i++) {\n\t\tderiv.push_back(xs[i] * i);\n\t}\n\treturn deriv;",
        "grade-179": {
            "execution": 0
        },
        "25": "// Fill in the input list with the return value here.\n    int n = xs.size();\n    std::vector<long> ret(n - 1);\n    for (int i = 1; i < n; i++) {\n        ret[i - 1] = xs[i] * i;\n    }\n    return ret;",
        "grade-25": {
            "execution": 1
        },
        "194": "std::vector<long> ans;\n    if (xs.size() == 0) {\n        return ans;\n    }\n    ans.push_back(xs[1]);\n    for (int i = 2; i < xs.size(); i++) {\n        ans.push_back(xs[i] * i);\n    }\n    return ans;",
        "grade-194": {
            "execution": 0
        },
        "141": "std::vector<long> result;\n    result.reserve(xs.size() - 1);\n    for (int i = 1; i < xs.size(); i++) {\n        result.push_back(xs[i] * i);\n    }\n    return result;",
        "grade-141": {
            "execution": 1
        },
        "9": "if (xs.size() == 0) {\n    return {};\n  }\n  std::vector<long> result;\n  for (int i = 1; i < xs.size(); i++) {\n    result.push_back(xs[i] * i);\n  }\n  return result;",
        "grade-9": {
            "execution": 1
        },
        "7": "std::vector<long> res;\n\tfor (int i = 1; i < xs.size(); i++) {\n\t\tres.push_back(xs[i] * i);\n\t}\n\treturn res;",
        "grade-7": {
            "execution": 1
        },
        "27": "int size = xs.size();\n\tstd::vector<long> der(size - 1);\n\tint i;\n\tfor (i = 0; i < size - 1; i++) {\n\t\tder[i] = xs[i + 1] * (i + 1);\n\t}\n\treturn der;",
        "grade-27": {
            "execution": 1
        },
        "65": "std::vector<long> ret;\n\tlong n = xs.size();\n\tfor (long i = 1; i < n; i++) {\n\t\tret.push_back(xs[i] * i);\n\t}\n\treturn ret;",
        "grade-65": {
            "execution": 1
        },
        "70": "std::vector<long> ans;\n\tif (xs.size() <= 1) {\n\t\tans.push_back(0);\n\t\treturn ans;\n\t}\n\tfor (int i = 1; i < xs.size(); i++) {\n\t\tans.push_back(xs[i] * i);\n\t}\n\treturn ans;",
        "grade-70": {
            "execution": 0
        },
        "168": "int n = xs.size();\n\tstd::vector<long> res;\n\tfor (int i = 1; i < n; i++) {\n\t\tres.push_back(xs[i] * i);\n\t}\n\treturn res;",
        "grade-168": {
            "execution": 1
        },
        "197": "std::vector<long> ret;\n    for (long i = 1; i < xs.size(); i++) {\n        ret.push_back(xs[i] * i);\n    }\n    return ret;",
        "grade-197": {
            "execution": 1
        },
        "183": "xs.erase(xs.begin());\n    for (size_t i = 0; i < xs.size(); i++) {\n        xs[i] *= (i + 1);\n    }\n    return xs;",
        "grade-183": {
            "execution": 1
        },
        "60": "int N = xs.size();\n   if (N == 0) return {};\n   if (N == 1) return {0};\n   std::vector<long> ans(N - 1);\n   for (int i = 1; i < N; i++) {\n       ans[i - 1] = i * xs[i];\n   }\n   return ans;",
        "grade-60": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels('')\n// ''\n// >>> remove_vowels('abcdef')\n// 'bcdf'\n// >>> remove_vowels('aaaaa')\n// ''\n// >>> remove_vowels('aaBAA')\n// 'B'\n// >>> remove_vowels('zbcd')\n// 'zbcd'\nstd::string remove_vowels(std::string text) {\n",
        "snippet": [
            "    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=0;i<text.length();i++)\n        if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())\n            out=out+text[i];\n    return out;\n\n}\n"
        ],
        "simplified": "remove_vowels is a function that takes string and returns string without vowels.",
        "task_id": "51",
        "164": "return \"\";",
        "grade-164": {
            "execution": 0
        },
        "28": "std::string vowels = \"aeiouAEIOU\";\n    int n = text.length();\n    std::string textCopy = text;\n    int i, j;\n    for (i = 0; i < n; i++) {\n        if (vowels.find(text[i]) != std::string::npos) {\n            // if vowel is found, copy following characters to preceding\n            for (j = i; j < n; j++) {\n                textCopy[j] = textCopy[j + 1];\n            }\n            n -= 1;\n            i -= 1;\n        }\n    }\n    textCopy.resize(n);\n    return textCopy;",
        "grade-28": {
            "execution": 0
        },
        "6": "int i=0;\n  std::string result=\"\";\n  while(i<text.length()){\n    if((text[i]=='a')||(text[i]=='e')||(text[i]=='i')||(text[i]=='o')||(text[i]=='u')||(text[i]=='A')||(text[i]=='E')||(text[i]=='I')||(text[i]=='O')||(text[i]=='U')){\n      i++;\n    }\n    else{\n      result+=text[i];\n      i++;\n    }\n  }\n  return result;",
        "grade-6": {
            "execution": 1
        },
        "190": "std::string result;\n    int length = text.length();\n    for (int i = 0; i < length; i++) {\n        char c = text[i];\n        if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n            result += c;\n        }\n    }\n    return result;",
        "grade-190": {
            "execution": 1
        },
        "70": "// return text;\nstring res;\nfor(int i=0;i<text.length();i++)\n{\nif(text[i]!='a'&&text[i]!='e'&&text[i]!='i'&&text[i]!='o'&&text[i]!='u'&&text[i]!='A'&&text[i]!='E'&&text[i]!='I'&&text[i]!='O'&&text[i]!='U')\nres.push_back(text[i]);",
        "grade-70": {
            "execution": 0
        },
        "62": "std::string vowels = \"aeiouAEIOU\";\n    std::string new_text = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (vowels.find(text[i]) == std::string::npos) {\n            new_text += text[i];\n        }\n    }\n    return new_text;",
        "grade-62": {
            "execution": 1
        },
        "57": "std::string result = \"\";\n    int index = 0;\n    while (index < text.length()) {\n        if (text[index] == 'a' || text[index] == 'e' || text[index] == 'i' || text[index] == 'o' || text[index] == 'u' || text[index] == 'A' || text[index] == 'E' || text[index] == 'I' || text[index] == 'O' || text[index] == 'U') {\n            index += 1;\n        } else {\n            result += text[index];\n            index += 1;\n        }\n    }\n    return result;",
        "grade-57": {
            "execution": 1
        },
        "35": "//text.erase(std::remove(text.begin(), text.end(), 'a'), text.end());\n\t//text.erase(std::remove(text.begin(), text.end(), 'e'), text.end());\n\t//text.erase(std::remove(text.begin(), text.end(), 'i'), text.end());\n\t//text.erase(std::remove(text.begin(), text.end(), 'o'), text.end());\n\t//text.erase(std::remove(text.begin(), text.end(), 'u'), text.end());\n\t//text.erase(std::remove(text.begin(), text.end(), 'A'), text.end());\n\t//text.erase(std::remove(text.begin(), text.end(), 'E'), text.end());\n\t//text.erase(std::remove(text.begin(), text.end(), 'I'), text.end());\n\t//text.erase(std::remove(text.begin(), text.end(), 'O'), text.end());\n\t//text.erase(std::remove(text.begin(), text.end(), 'U'), text.end());\n\tstd::string newtext=\"\";\n\tfor (int i = 0; i < text.length(); i++) {\n\t\tif (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n\t\t\tnewtext += text[i];\n\t\t}\n\t}\n\treturn newtext;",
        "grade-35": {
            "execution": 1
        },
        "189": "const std::set<char> vowels {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n    std::string new_text;\n    for (auto letter : text) {\n        if (vowels.find(letter) == vowels.end())\n            new_text += letter;\n    }\n    return new_text;",
        "grade-189": {
            "execution": 1
        },
        "26": "std::string result = text;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == 'a' || text[i] == 'e' || text[i] == 'i' || text[i] == 'o' || text[i] == 'u' || text[i] == 'A' || text[i] == 'E' || text[i] == 'I' || text[i] == 'O' || text[i] == 'U') {\n            result.erase(i, 1);\n            i--;\n        }\n    }\n    return result;",
        "grade-26": {
            "execution": 0
        },
        "174": "int i=0;\n\twhile(text[i]!='\\0')\n\t{\n\t\tif(text[i]=='a'||text[i]=='e'||text[i]=='i'||text[i]=='o'||text[i]=='u'||text[i]=='A'||text[i]=='E'||text[i]=='I'||text[i]=='O'||text[i]=='U')\n\t\t{\n\t\t\tfor(int j=i;text[j]!='\\0';j++)\n\t\t\t{\n\t\t\t\ttext[j]=text[j+1];\n\t\t\t}\n\t\t\ti--;\n\t\t}\n\t\ti++;\n\t}\n\treturn text;",
        "grade-174": {
            "execution": 0
        },
        "140": "std::string vowels(\"aeiouAEIOU\");\n    text.erase(std::remove_if(text.begin(), text.end(), [&vowels](const char& c) {\n        return vowels.find(c) != std::string::npos;\n    }), text.end());\n    return text;",
        "grade-140": {
            "execution": 1
        },
        "22": "int i,j=0;\n  for(i=0;i<text.length();i++)\n  {\n    if(text[i]!='a'&&text[i]!='e'&&text[i]!='i'&&text[i]!='o'&&text[i]!='u'&&text[i]!='A'&&text[i]!='E'&&text[i]!='I'&&text[i]!='O'&&text[i]!='U')\n    {\n      text[j]=text[i];\n      j++;\n    }\n  }\n  text[j]='\\0';\n  return text;",
        "grade-22": {
            "execution": 0
        },
        "152": "std::string result;\n    for (char c : text) {\n        if (!std::string(\"aeiou\").find(c))\n            result += c;\n    }\n    return result;",
        "grade-152": {
            "execution": 0
        },
        "109": "std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        switch (text[i]) {\n            case 'a':\n            case 'e':\n            case 'i':\n            case 'o':\n            case 'u':\n            case 'A':\n            case 'E':\n            case 'I':\n            case 'O':\n            case 'U':\n                break;\n            default:\n                result += text[i];\n        }\n    }\n    return result;",
        "grade-109": {
            "execution": 1
        },
        "8": "std::string output=\"\";\n\tstd::vector<char> vowels {'a','e','i','o','u','A','E','I','O','U'};\n\tstd::map<char,int> count;\n\tfor(int i=0;i<text.length();i++)\n\t{\n\t\tcount[text[i]]++;\n\t}\n\tfor(int i=0;i<text.length();i++)\n\t{\n\t\tif(count[text[i]]==1)\n\t\t{\n\t\t\toutput+=text[i];\n\t\t}\n\t}\n\treturn output;",
        "grade-8": {
            "execution": 0
        },
        "7": "std::string new_text;\n  for (int i = 0; i < text.length(); i++) {\n    std::string::size_type found = text.find_first_of(\"aeiouAEIOU\");\n    if (found != std::string::npos) {\n      text.erase(found, 1);\n    }\n  }\n  return text;",
        "grade-7": {
            "execution": 0
        },
        "23": "std::string result;\n    int length = text.length();\n    for (int i = 0; i < length; i++) {\n        if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U') {\n            result += text[i];\n        }\n    }\n    return result;",
        "grade-23": {
            "execution": 1
        },
        "55": "std::string mystring = text;\n\tstd::string result;\n\tfor (int i = 0; i < mystring.length(); i++) {\n\t\tif ((mystring[i] != 'a') && (mystring[i] != 'e') && (mystring[i] != 'i') && (mystring[i] != 'o') && (mystring[i] != 'u') && (mystring[i] != 'A') && (mystring[i] != 'E') && (mystring[i] != 'I') && (mystring[i] != 'O') && (mystring[i] != 'U')) {\n\t\t\tresult += mystring[i];\n\t\t}\n\t}\n\treturn result;",
        "grade-55": {
            "execution": 1
        },
        "59": "std::string text_new;\n    for(int i=0;i<text.length();i++){\n        if(text[i]=='a'||text[i]=='e'||text[i]=='i'||text[i]=='o'||text[i]=='u'||text[i]=='A'||text[i]=='E'||text[i]=='I'||text[i]=='O'||text[i]=='U')\n            continue;\n        else\n            text_new.push_back(text[i]);\n    }\n    return text_new;",
        "grade-59": {
            "execution": 1
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n",
        "snippet": [
            "    string current=\"\";\n    vector<string> out={};\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n     if (s[i]==' ' or s[i]==',')\n     {\n        if (current.length()>0)\n        {\n            out.push_back(current);\n            current=\"\";\n        }\n     }\n     else current=current+s[i];\n     return out;\n}\n"
        ],
        "simplified": "You will be given a string of words separated by commas or spaces. Your task is to split the string into words and return an array of the words.",
        "task_id": "101",
        "164": "int len = s.length();\n    std::vector<std::string> res;\n    for(int i = 0; i < len; i++) {\n        if(s[i] == ' ') {\n            continue;\n        }\n        std::string temp = \"\";\n        while(i < len && s[i] != ' ' && s[i] != ',') {\n            temp += s[i];\n            i++;\n        }\n        res.push_back(temp);\n    }\n    return res;",
        "grade-164": {
            "execution": 0
        },
        "28": "std::vector<std::string> result;\n  int pos = 0;\n  for (int i = 0; i < s.size(); i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (pos < i) {\n        result.push_back(s.substr(pos, i - pos));\n      }\n      pos = i + 1;\n    }\n  }\n  if (pos < s.size()) {\n    result.push_back(s.substr(pos, s.size() - pos));\n  }\n  return result;",
        "grade-28": {
            "execution": 1
        },
        "6": "std::stringstream ss(s);\n    std::string word;\n    std::vector<std::string> result;\n    while (ss >> word) {\n        result.push_back(word);\n    }\n    return result;",
        "grade-6": {
            "execution": 0
        },
        "191": "stringstream ss(s);\n\tstring word;\n\tvector<string> words;\n\twhile (getline(ss, word, ' '))\n\t\twords.push_back(word);\n\treturn words;",
        "grade-191": {
            "execution": 0
        },
        "70": "// TODO:\n\t// split the string into words\n\t// return an array of the words\n\tstd::istringstream iss(s);\n\tstd::vector<std::string> tokens;\n\tcopy(std::istream_iterator<std::string>(iss),\n\t\tstd::istream_iterator<std::string>(),\n\t\tstd::back_inserter(tokens));\n\treturn tokens;",
        "grade-70": {
            "execution": 0
        },
        "62": "std::vector<std::string> result;\n  std::string word = \"\";\n  for (int i = 0; i < s.length(); i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      result.push_back(word);\n      word = \"\";\n    } else {\n      word += s[i];\n    }\n  }\n  result.push_back(word);\n  return result;",
        "grade-62": {
            "execution": 0
        },
        "57": "std::vector<std::string> words;\n  std::string temp;\n  for (auto i = 0; i < s.size(); i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      words.push_back(temp);\n      temp.clear();\n    } else {\n      temp += s[i];\n    }\n  }\n  words.push_back(temp);\n  return words;",
        "grade-57": {
            "execution": 0
        },
        "35": "return std::vector<std::string>();",
        "grade-35": {
            "execution": 0
        },
        "190": "std::vector<std::string> res;\n    std::stringstream ss(s);\n    while(ss.good()) {\n        std::string word;\n        getline(ss, word, ' ');\n        res.push_back(word);\n    }\n    return res;",
        "grade-190": {
            "execution": 0
        },
        "26": "int count = 0;\n    for (char c : s) {\n        if (c == ' ') {\n            count++;\n        }\n    }\n    std::vector<std::string> vec;\n    int start = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == ' ') {\n            vec.push_back(s.substr(start, i - start));\n            start = i + 1;\n        }\n    }\n    vec.push_back(s.substr(start, s.size() - start));\n    return vec;",
        "grade-26": {
            "execution": 0
        },
        "174": "std::vector<std::string> results;\n    std::stringstream ss(s);\n    for (std::string token; std::getline(ss, token, ' '); ) {\n        results.push_back(token);\n    }\n    return results;",
        "grade-174": {
            "execution": 0
        },
        "139": "std::istringstream iss(s);\n  std::vector<std::string> v{ std::istream_iterator<std::string>{iss},\n                              std::istream_iterator<std::string>{} };\n  return v;",
        "grade-139": {
            "execution": 0
        },
        "22": "std::vector<std::string> temp;\n    std::stringstream ss(s);\n    std::string t;\n    while(ss >> t)\n        temp.push_back(t);\n    return temp;",
        "grade-22": {
            "execution": 0
        },
        "151": "std::stringstream ss(s);\n  std::vector<std::string> words;\n  std::string word;\n  while (ss >> word) {\n    words.push_back(word);\n  }\n  return words;",
        "grade-151": {
            "execution": 0
        },
        "108": "std::vector<std::string> res;\n  std::stringstream ss(s);\n  while(ss.good()) {\n    std::string substr;\n    getline(ss, substr, ' ');\n    res.push_back(substr);\n  }\n  return res;",
        "grade-108": {
            "execution": 0
        },
        "8": "std::vector<std::string> ret;\n  std::string temp;\n  for (int i = 0; i < s.size(); i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      ret.push_back(temp);\n      temp.clear();\n    } else {\n      temp += s[i];\n    }\n  }\n  if (temp.size() > 0) {\n    ret.push_back(temp);\n  }\n  return ret;",
        "grade-8": {
            "execution": 0
        },
        "7": "//create a stream with s\n\tstd::stringstream ss(s);\n\t//split into words\n\tstd::vector<std::string> words;\n\tstd::string word;\n\twhile (std::getline(ss, word, ' ')) {\n\t\twords.push_back(word);\n\t}\n\treturn words;",
        "grade-7": {
            "execution": 0
        },
        "23": "std::stringstream ss(s);\n  std::string word;\n  std::vector<std::string> result;\n  while (ss >> word) {\n    result.push_back(word);\n  }\n  return result;",
        "grade-23": {
            "execution": 0
        },
        "55": "std::vector<std::string> v;\n    std::string str;\n    for(int i=0;i<s.length();i++){\n        if(s[i]==' ' || s[i]==','){\n            v.push_back(str);\n            str=\"\";\n        }\n        else{\n            str+=s[i];\n        }\n    }\n    v.push_back(str);\n    return v;",
        "grade-55": {
            "execution": 0
        },
        "59": "std::vector<std::string> v;\n  for (int i = 0; i < s.size(); i++) {\n    std::string str = \"\";\n    while (s[i] != ' ' && s[i] != ',' && i < s.size()) {\n      str += s[i];\n      i++;\n    }\n    v.push_back(str);\n  }\n  return v;",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13, 12) = -1\nlong choose_num(long x, long y) {\n",
        "snippet": [
            "    if (y<x) return -1;\n    if (y==x and y%2==1) return -1;\n    if (y%2==1) return y-1;\n    return y;\n}\n"
        ],
        "simplified": "This function takes two positive numbers x and y and returns the biggest even integer number that is in the range [x, y] inclusive. If there's no such number, then the function should return -1.",
        "task_id": "102",
        "169": "// TODO: Write your implementation here\n    // Note: You may not use any conditional statements\n    // (e.g. if or switch) or loops (e.g. for or while)\n    // If a variable is used more than once, you can reuse it",
        "grade-169": {
            "execution": 0
        },
        "28": "if (x == y) {\n       if (x % 2 == 0) {\n           return x;\n       } else {\n           return -1;\n       }\n   }\n   long max = y;\n   if (y % 2 == 1) {\n       max--;\n   }\n   if (max < x) {\n       return -1;\n   }\n   while (max >= x) {\n       if (max % 2 == 0) {\n           return max;\n       }\n       max--;\n   }\n   return -1;",
        "grade-28": {
            "execution": 1
        },
        "6": "if (x%2 == 0)\n        return x;\n    if (x+1 > y)\n        return -1;\n    return x+1;",
        "grade-6": {
            "execution": 0
        },
        "196": "if (x <= y) {\n        for (long i = y; i >= x; i--) {\n            if (i % 2 == 0) {\n                return i;\n            }\n        }\n    }\n    return -1;",
        "grade-196": {
            "execution": 1
        },
        "71": "long bigEven = -1;\n  for (long i = x; i <= y; i++) {\n    if (i % 2 == 0) {\n      bigEven = i;\n    }\n  }\n  return bigEven;",
        "grade-71": {
            "execution": 1
        },
        "63": "if(x == y) {\n    if(x % 2 == 0) {\n      return x;\n    }\n    else {\n      return -1;\n    }\n  }\n  else if(x > y) {\n    return -1;\n  }\n  else {\n    return choose_num(x+1, y);\n  }",
        "grade-63": {
            "execution": 0
        },
        "58": "// Check input\n  assert(x > 0);\n  assert(y > 0);\n  assert(x <= y);\n  // even number check\n  if (x % 2 == 0)\n  {\n    return x;\n  }\n  else if ((x + 1) % 2 == 0)\n  {\n    if (x + 1 <= y)\n    {\n      return x + 1;\n    }\n    else if (x + 1 > y)\n    {\n      return -1;\n    }\n  }\n  else\n  {\n    if (x + 2 <= y)\n    {\n      return x + 2;\n    }\n    else if (x + 2 > y)\n    {\n      return -1;\n    }\n  }\n  return 0;",
        "grade-58": {
            "execution": 0
        },
        "35": "assert(x > 0 && y > 0);\n\n    // TODO: implement me\n    if (x > y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n    if (x % 2 == 0) {\n        return x;\n    }\n    if (x + 1 == y) {\n        return -1;\n    }\n    return choose_num(x + 1, y);",
        "grade-35": {
            "execution": 0
        },
        "195": "long count = 0;\n    for (int i = x; i <= y; i++) {\n        if (i % 2 == 0) {\n            count = i;\n        }\n    }\n    if (count == 0) {\n        return -1;\n    }\n    return count;",
        "grade-195": {
            "execution": 1
        },
        "26": "// Write code here.\n    long max = -1;\n    for(long i = x; i <= y; i++){\n        if(i % 2 == 0){\n            if(i > max){\n                max = i;\n            }\n        }\n    }\n    return max;",
        "grade-26": {
            "execution": 1
        },
        "179": "//    return -1;\n    if (x % 2 == 0 && y % 2 == 0)\n    \treturn y;\n    else if (x % 2 == 0 && y % 2 != 0)\n    \treturn y - 1;\n    else if (x % 2 != 0 && y % 2 == 0)\n    \treturn x;\n    else\n    \treturn x + 1;",
        "grade-179": {
            "execution": 0
        },
        "143": "// implement your own solution\n  long res = -1;\n  long even = 0;\n  if (x % 2 == 0) {\n  \teven = x;\n  } else {\n  \teven = x + 1;\n  }\n  for (long i = even; i <= y; i = i + 2) {\n  \tres = i;\n  }\n  return res;",
        "grade-143": {
            "execution": 1
        },
        "22": "// TODO: Write your code here.\n  long num = -1;\n  for(int i=x;i<=y;i++){\n    if(i%2==0){\n      num = i;\n    }\n  }\n  return num;",
        "grade-22": {
            "execution": 1
        },
        "156": "if (x <= y && x % 2 == 0)\n\t\treturn x;\n\telse if (x <= y && x % 2 != 0)\n\t\treturn x + 1;\n\telse\n\t\treturn -1;",
        "grade-156": {
            "execution": 0
        },
        "112": "// your code here\n    if (x % 2 == 0)\n        return x;\n    if (x % 2 != 0)\n        x++;\n    long n = x;\n    if (n <= y && n % 2 == 0)\n        return n;\n    return -1;",
        "grade-112": {
            "execution": 0
        },
        "8": "// Your code here\n    if (x<=y)\n    {\n        if (x%2 == 0)\n        {\n            return x;\n        }\n        else\n        {\n            return x+1;\n        }\n    }\n    else\n    {\n        return -1;\n    }",
        "grade-8": {
            "execution": 0
        },
        "7": "if(x%2==0)\n\t\treturn x;\n\telse\n\t\treturn x+1;",
        "grade-7": {
            "execution": 0
        },
        "23": "long number_to_return;\n    // Checks if x is less than or equal to y\n    if (x <= y) {\n        // Checks if the number is even\n        if (x % 2 == 0) {\n            number_to_return = x;\n        }\n        // Checks if the number is odd\n        else {\n            number_to_return = x + 1;\n        }\n    }\n    // Checks if x is greater than y\n    else {\n        number_to_return = -1;\n    }\n    return number_to_return;",
        "grade-23": {
            "execution": 0
        },
        "56": "if(x%2==0 && y%2==0)\n\t{\n\t\tlong temp=x;\n\t\tif(x<y)\n\t\t{\n\t\t\twhile(temp<=y)\n\t\t\t{\n\t\t\t\tif(temp==y)\n\t\t\t\t{\n\t\t\t\t\treturn temp;\n\t\t\t\t}\n\t\t\t\ttemp=temp+2;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn x;\n\t\t}\n\t}\n\telse if(x%2!=0 && y%2!=0)\n\t{\n\t\tlong temp=x+1;\n\t\tif(x<y)\n\t\t{\n\t\t\twhile(temp<=y)\n\t\t\t{\n\t\t\t\tif(temp==y)\n\t\t\t\t{\n\t\t\t\t\treturn temp;\n\t\t\t\t}\n\t\t\t\ttemp=temp+2;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn x+1;\n\t\t}\n\t}\n\telse if(x%2==0 && y%2!=0)\n\t{\n\t\tif(x<y)\n\t\t{\n\t\t\treturn y;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn x;\n\t\t}\n\t}\n\telse if(x%2!=0 && y%2==0)\n\t{\n\t\tif(x<y)\n\t\t{\n\t\t\treturn y;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn x+1;\n\t\t}\n\t}\n\treturn -1;",
        "grade-56": {
            "execution": 0
        },
        "60": "long min = (x < y) ? x : y;\n    long max = (x > y) ? x : y;\n    // TODO: Write your code here\n    long num = -1;\n    for(long i = max; i >= min; i--) {\n        if(i % 2 == 0) {\n            num = i;\n            break;\n        }\n    }\n    return num;",
        "grade-60": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n",
        "snippet": [
            "    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\n"
        ],
        "simplified": "prime_fib returns n-th number that is a Fibonacci number and it's also prime.",
        "task_id": "39",
        "164": "assert(n > 0);\n    long i = 1;\n    long sum = 0;\n    while (i < n) {\n        if (is_prime(i) && is_fib(i)) {\n            sum += i;\n        }\n        i++;\n    }\n    return sum;",
        "grade-164": {
            "execution": 0
        },
        "28": "long prev = 2;\n  long curr = 3;\n  long count = 2;\n  while (count < n) {\n    long next = prev + curr;\n    prev = curr;\n    curr = next;\n    if (is_prime(curr)) {\n      count++;\n    }\n  }\n  return curr;",
        "grade-28": {
            "execution": 0
        },
        "6": "// TODO: implement the function\n\tlong f1 = 0, f2 = 1, nfib = 0;\n\tfor (int i = 0; i < n; i++) {\n\t\t// Check if nfib is a prime number\n\t\tbool isPrime = true;\n\t\tfor (int j = 2; j < nfib/2; j++) {\n\t\t\tif (nfib % j == 0) {\n\t\t\t\tisPrime = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// If nfib is prime fib number, return\n\t\tif (isPrime) {\n\t\t\treturn nfib;\n\t\t}\n\t\t// Calculate nth fib number\n\t\tnfib = f1 + f2;\n\t\tf1 = f2;\n\t\tf2 = nfib;\n\t}\n\treturn -1;",
        "grade-6": {
            "execution": 0
        },
        "191": "assert(n > 0);\n    // TODO: Implementation here.\n    long long j = 2;\n    long long count = 2;\n    long long i = 2;\n    long long k = 3;\n    long long temp = 0;\n    long long temp2 = 0;\n    std::vector<long long> prime_fib_arr;\n    prime_fib_arr.push_back(2);\n    prime_fib_arr.push_back(3);\n    while(count <= n){\n    \ttemp = j + i;\n    \ttemp2 = j;\n    \tif(temp > k){\n    \t\tif(k % j == 0){\n    \t\t\tj = i;\n    \t\t\ti = temp;\n    \t\t\tcontinue;\n    \t\t}\n    \t\telse{\n    \t\t\tj = i;\n    \t\t\ti = temp;\n    \t\t\tk++;\n    \t\t\tcontinue;\n    \t\t}\n    \t}\n    \tif(temp % k == 0){\n    \t\tj = i;\n    \t\ti = temp;\n    \t\tcontinue;\n    \t}\n    \telse{\n    \t\tj = i;\n    \t\ti = temp;\n    \t\tprime_fib_arr.push_back(temp);\n    \t\tcount++;\n    \t}\n    }\n    return prime_fib_arr[n-1];",
        "grade-191": {
            "execution": 0
        },
        "70": "assert(n >= 1);\n    // TODO: implement this function\n    vector<long> fibs;\n    int i = 1;\n    long a = 1, b = 1;\n    fibs.push_back(1);\n    fibs.push_back(1);\n    for (; i < n; i++) {\n        a = a + b;\n        b = a + b;\n        fibs.push_back(a);\n        fibs.push_back(b);\n    }\n    fibs.erase(fibs.begin() + n);\n    fibs.erase(fibs.begin() + n + 1);\n    fibs.erase(fibs.begin() + n + 2);\n    sort(fibs.begin(), fibs.end());\n    if (n > 2) {\n        fibs.erase(fibs.begin() + n - 2);\n    }\n    int primelist[] = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683",
        "grade-70": {
            "execution": 0
        },
        "62": "// Insert your code here\n  long fib[100000];\n  long count = 0;\n  fib[0] = 0;\n  fib[1] = 1;\n  int j;\n  for(j = 2; j < 100000; j++){\n    fib[j] = fib[j-1] + fib[j-2];\n    if(fib[j] > 1e9)\n      break;\n  }\n  std::vector<int> prime = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967",
        "grade-62": {
            "execution": 0
        },
        "57": "long i=1,a=1,b=2,c=2;\n  while(i<n){\n    if(a%2==0)a/=2;\n    else if(b%2==0)b/=2;\n    else if(c%2==0)c/=2;\n    else if(a%3==0)a/=3;\n    else if(b%3==0)b/=3;\n    else if(c%3==0)c/=3;\n    else if(a%5==0)a/=5;\n    else if(b%5==0)b/=5;\n    else if(c%5==0)c/=5;\n    else if(a%7==0)a/=7;\n    else if(b%7==0)b/=7;\n    else if(c%7==0)c/=7;\n    else if(a%11==0)a/=11;\n    else if(b%11==0)b/=11;\n    else if(c%11==0)c/=11;\n    else if(a%13==0)a/=13;\n    else if(b%13==0)b/=13;\n    else if(c%13==0)c/=13;\n    else if(a%17==0)a/=17;\n    else if(b%17==0)b/=17;\n    else if(c%17==0)c/=17;\n    else if(a%19==0)a/=19;\n    else if(b%19==0)b/=19;\n    else if(c%19==0)c/=19;\n    else if(a%23==0)a/=23;\n    else if(b%23==0)b/=23;\n    else if(c%23==0)c/=23;\n    if(a==1){\n      if(b==2){\n        if(c==2){\n          i++;\n          c=b+c;\n          b=c-b;\n        }\n        else{\n          i",
        "grade-57": {
            "execution": 0
        },
        "35": "long long int f1 = 1, f2 = 1,f3 = 2;\n\tlong long int fib[10000];\n\tlong long int temp;\n\t// Write your code here\n\tint cnt = 0;\n\tfor (int i = 0; i < n; i++) {\n\t\tif (i <= 1) {\n\t\t\tfib[i] = 1;\n\t\t}\n\t\telse {\n\t\t\tfib[i] = fib[i - 1] + fib[i - 2];\n\t\t}\n\t}\n\t//for (int i = 0; i < n; i++) {\n\t//\tcout << fib[i] << endl;\n\t//}\n\tfor (int i = 2; i < n; i++) {\n\t\tfor (int j = 1; j <= fib[i]; j++) {\n\t\t\tif (fib[i] % j == 0)\n\t\t\t\tcnt++;\n\t\t}\n\t\tif (cnt == 2) {\n\t\t\treturn fib[i];\n\t\t}\n\t\tcnt = 0;\n\t}",
        "grade-35": {
            "execution": 0
        },
        "190": "// your code here\n\t//return 0;\n\t\n\tlong int result=0;\n\tlong int f1=0,f2=1,f3=1;\n\tint c=1;\n\tint x=2;\n\t//cout<<x<<endl;\n\twhile(c<n)\n\t{\n\t\t\n\t\tf3=f1+f2;\n\t\tf1=f2;\n\t\tf2=f3;\n\t\t\n\t\tif(f3%x==0)\n\t\t{\n\t\t\tint flag=0;\n\t\t\tfor(int i=2;i<=f3/2;i++)\n\t\t\t{\n\t\t\t\tif(f3%i==0)\n\t\t\t\t{\n\t\t\t\t\tflag=1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(flag==0)\n\t\t\t{\n\t\t\t\tc++;\n\t\t\t\tresult=f3;\n\t\t\t}\n\t\t}\n\t\tx++;\n\t}\n\treturn result;",
        "grade-190": {
            "execution": 0
        },
        "26": "long result;\n    // your code here\n    return result;",
        "grade-26": {
            "execution": 0
        },
        "174": "assert(n > 0);\n  int arr[] = {0, 2, 3, 5, 13, 89};\n  return arr[n];",
        "grade-174": {
            "execution": 0
        },
        "140": "long first = 1;\n    long second = 1;\n    long third = 2;\n    long count = 3;\n    long result = 0;\n    while (count <= n) {\n        result = third;\n        third = first + second;\n        first = second;\n        second = third;\n        if (third % 2 != 0) {\n            if (third % 3 != 0) {\n                if (third % 5 != 0) {\n                    if (third % 7 != 0) {\n                        if (third % 11 != 0) {\n                            if (third % 13 != 0) {\n                                if (third % 17 != 0) {\n                                    if (third % 19 != 0) {\n                                        if (third % 23 != 0) {\n                                            if (third % 29 != 0) {\n                                                if (third % 31 != 0) {\n                                                    if (third % 37 != 0) {\n                                                        if (third % 41 != 0) {\n                                                            if (third % 43 != 0) {\n                                                                if (third % 47 != 0) {\n                                                                    if (third % 53 != 0) {\n                                                                        if (third % 59 != 0) {\n                                                                            if (third % 61 != 0) {\n                                                                                if (third % 67 != 0) {\n                                                                                    if (third % 71 != 0) {\n                                                                                        if (third % 73 != 0) {\n                                                                                            if (third % 79 != 0) {\n                                                                                                if (third % 83 != 0) {\n                                                                                                    if (third % 89 != 0) {\n                                                                                                        if (third % 97 != 0) {\n                                                                                                            count++;\n                                                                                                        }\n                                                                                                    }\n                                                                                                }\n                                                                                            }\n                                                                                        }\n                                                                                    }\n                                                                                }\n                                                                            }\n                                                                        }\n                                                                    }\n                                                                }\n                                                            }\n                                                        }\n                                                    }",
        "grade-140": {
            "execution": 0
        },
        "22": "long long prev1 = 2, prev2 = 3, res = 0;\n    for (int i = 3; i <= n; i++) {\n        res = prev1 + prev2;\n        prev1 = prev2;\n        prev2 = res;\n    }\n    return res;",
        "grade-22": {
            "execution": 0
        },
        "152": "assert(n > 0);\n    return n;",
        "grade-152": {
            "execution": 0
        },
        "109": "long n1 = 2, n2 = 3, n3 = 5;\n\tfor (int i = 4; i <= n; i++) {\n\t\tn1 = n2;\n\t\tn2 = n3;\n\t\tn3 = n1 + n2;\n\t\twhile (!is_prime(n3)) {\n\t\t\tn3 += n2;\n\t\t}\n\t}\n\treturn n3;",
        "grade-109": {
            "execution": 0
        },
        "8": "assert(n >= 1);\n\tlong a = 2, b = 3, c = 5;\n\tif (n == 1) return a;\n\tif (n == 2) return b;\n\tif (n == 3) return c;\n\t\n\tfor (int i = 4; i <= n; i++) {\n\t\tlong f = a + b + c;\n\t\ta = b;\n\t\tb = c;\n\t\tc = f;\n\t\t\n\t\twhile (!is_prime(c)) {\n\t\t\tf = a + b + c;\n\t\t\ta = b;\n\t\t\tb = c;\n\t\t\tc = f;\n\t\t}\n\t}\n\treturn c;",
        "grade-8": {
            "execution": 0
        },
        "7": "assert(n > 0);\n    if (n == 1) {\n        return 2;\n    }\n    if (n == 2) {\n        return 3;\n    }\n    int j = 1;\n    long f1 = 2;\n    long f2 = 3;\n    for (long i = 3; i <= n; i++) {\n        long f3 = f1 + f2;\n        f1 = f2;\n        f2 = f3;\n        if (std::__gcd(f3, n) == 1) {\n            j++;\n        }\n        if (j == n) {\n            return f3;\n        }\n    }\n    return 0;",
        "grade-7": {
            "execution": 0
        },
        "23": "if (n == 1) {\n    return 2;\n  }\n  long count = 1;\n  long fib1 = 1;\n  long fib2 = 1;\n  while (count < n) {\n    long fib = fib1 + fib2;\n    fib1 = fib2;\n    fib2 = fib;\n    if (is_prime(fib)) {\n      count++;\n    }\n  }\n  return fib2;",
        "grade-23": {
            "execution": 0
        },
        "55": "long count = 0;\n    long fib = 0;\n    while (count != n) {\n        long pre_fib = fib;\n        fib = fibonacci(count);\n        if (is_prime(fib)) {\n            count++;\n        }\n    }\n    return fib;",
        "grade-55": {
            "execution": 0
        },
        "59": "long *fib = new long[n];\n  fib[0] = 2;\n  fib[1] = 3;\n  int count = 2;\n  long num = 5;\n  while(count < n) {\n    if(isPrime(num)) {\n      fib[count] = num;\n      count++;\n    }\n    num = num + 2;\n  }\n  return fib[n-1];",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n// is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nbool is_equal_to_sum_even(long n) {\n",
        "snippet": [
            "    if (n%2==0 and n>=8) return true;\n    return false;\n}\n"
        ],
        "simplified": "Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers",
        "task_id": "138",
        "167": "// Write your code here\n    // Return true if n can be expressed as sum of 4 even numbers\n    // Return false otherwise\n    if(n<4){\n        return false;\n    }\n    if(n%2==1){\n        return false;\n    }\n    if(n%4==0){\n        return true;\n    }\n    else{\n        return false;\n    }",
        "grade-167": {
            "execution": 0
        },
        "28": "std::set<int> answer;\n    answer.insert(n);\n    std::vector<int> v;\n    for(int i = 2; i < n; i++) {\n        if(n % i == 0) {\n            v.push_back(i);\n        }\n    }\n    for(int i = 0; i < v.size(); i++) {\n        for(int j = i; j < v.size(); j++) {\n            for(int k = j; k < v.size(); k++) {\n                if(n % (v[i] + v[j] + v[k]) == 0) {\n                    answer.insert(v[i] + v[j] + v[k]);\n                }\n            }\n        }\n    }\n    return answer.size() == 4;",
        "grade-28": {
            "execution": 0
        },
        "6": "",
        "grade-6": {
            "execution": 0
        },
        "195": "// Write your code here\n  if(n%2==1) return false;\n  int count = 0;\n  while(n>0){\n    n = n-2;\n    count++;\n  }\n  if(count==4) return true;\n  return false;",
        "grade-195": {
            "execution": 0
        },
        "70": "if(n<8) return false;\n    if(n==8) return true;\n    long even=n%2==0?n:n-1;\n    if(even%4==0) return true;\n    else return false;",
        "grade-70": {
            "execution": 0
        },
        "62": "// your code here",
        "grade-62": {
            "execution": 0
        },
        "57": "bool ans = false;\n\tfor (int i = 2; i <= n; i += 2) {\n\t\tfor (int j = 2; j <= n; j += 2) {\n\t\t\tfor (int k = 2; k <= n; k += 2) {\n\t\t\t\tfor (int l = 2; l <= n; l += 2) {\n\t\t\t\t\tif (i + j + k + l == n) {\n\t\t\t\t\t\tans = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn ans;",
        "grade-57": {
            "execution": 1
        },
        "35": "bool found = false;\n    for (long i = 2; i < n; i += 2) {\n        if (n - i == 2) {\n            found = true;\n            break;\n        }\n    }\n    return found;",
        "grade-35": {
            "execution": 0
        },
        "193": "// your code goes here\n  // replace the next line with your own code\n  return true;",
        "grade-193": {
            "execution": 0
        },
        "26": "// TODO: Implement this function\n    // Note: if your function returns True\n    //       the test-suite will expect you to return a solution\n    //       follow the example below.\n    //\n    // n = n - 4\n    // return (n, n, n, n)\n    if (n <= 0) {\n        return false;\n    }\n    if (n % 2 != 0) {\n        return false;\n    }\n    long res = n / 4;\n    return {res, res, res, res};",
        "grade-26": {
            "execution": 0
        },
        "177": "if(n%2!=0){\n        return false;\n    }\n    if(n%4==0){\n        return true;\n    }\n    return false;",
        "grade-177": {
            "execution": 0
        },
        "142": "// we use the fact that if n is odd, then it cannot be written as the sum of 4 positive even numbers\n  // because all positive even numbers are divisible by 2\n  if (n % 2 == 1) return false;\n  return true;",
        "grade-142": {
            "execution": 0
        },
        "22": "return false;",
        "grade-22": {
            "execution": 0
        },
        "154": "// Write your code here\n  if(n%2==1)return false;\n  int count = 0;\n  for(int i=2;i<=n;i+=2){\n    if(count<=4 && n%i==0){\n      count++;\n    }\n  }\n  if(count==4)return true;\n  return false;",
        "grade-154": {
            "execution": 0
        },
        "110": "if(n<8){\n        return false;\n    }\n    if(n%2==1){\n        return false;\n    }\n    if(n%4==0){\n        return true;\n    }\n    long d=n-8;\n    if(d%4==0){\n        return true;\n    }\n    return false;",
        "grade-110": {
            "execution": 0
        },
        "8": "if(n==0 || n==1 || n==2 || n==3 || n==5 || n==7) return false;\n    long f1 = 0, f2 = 2, next;\n    while(f1 <= n){\n        if(f1 == n) return true;\n        next = f1 + f2;\n        f1 = f2;\n        f2 = next;\n    }\n    return false;",
        "grade-8": {
            "execution": 0
        },
        "7": "return n%2 == 0 && n > 4;",
        "grade-7": {
            "execution": 0
        },
        "23": "// Base condition:\n    if (n < 8) return false;\n    if (n == 8) return true;\n    // Recursive condition:\n    long chk = n - 4;\n    if (chk % 2 != 0) {\n        return false;\n    }\n    return is_equal_to_sum_even(chk);",
        "grade-23": {
            "execution": 0
        },
        "55": "// Write your code here\n    long m,i,count=0;\n    for(i=2;i<=n;i+=2)\n    {\n        m=n-i;\n        if(m%2==0)\n        {\n            count++;\n        }\n    }\n    if(count==1)\n    {\n        return true;\n    }\n    else{\n        return false;\n    }",
        "grade-55": {
            "execution": 0
        },
        "59": "// your code here\n    if(n%2 == 0) {\n        for(int i = 2; i < n; i++) {\n            if(i%2 == 0) {\n                for(int j = 2; j < n; j++) {\n                    if(j%2 == 0) {\n                        for(int k = 2; k < n; k++) {\n                            if(k%2 == 0) {\n                                for(int l = 2; l < n; l++) {\n                                    if(l%2 == 0) {\n                                        if(i+j+k+l == n) {\n                                            return true;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return false;",
        "grade-59": {
            "execution": 1
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return list of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string) {\n",
        "snippet": [
            "    string current=\"\";\n    vector<int> out={};\n    if (music_string.length()>0)\n        music_string=music_string+' ';\n    for (int i=0;i<music_string.length();i++)\n    {\n        if (music_string[i]==' ')\n        {\n            if (current==\"o\") out.push_back(4);\n            if (current==\"o|\") out.push_back(2);\n            if (current==\".|\") out.push_back(1);\n            current=\"\";\n        }\n        else current+=music_string[i];\n    }\n    return out;\n}\n"
        ],
        "simplified": "Input to this function is a string representing musical notes in a special ASCII format. Your task is to parse this string and return list of integers corresponding to how many beats does each not last. Here is a legend: 'o' - whole note, lasts four beats 'o|' - half note, lasts two beats '.|' - quater note, lasts one beat",
        "task_id": "17",
        "163": "std::vector<long> arr;\n    for(long i=0;i<music_string.length();i++)\n    {\n        if(music_string[i]=='o')\n        {\n            if(music_string[i+1]=='|')\n            {\n                if(music_string[i+2]=='|')\n                {\n                    arr.push_back(4);\n                    i+=2;\n                }\n                else\n                {\n                    arr.push_back(2);\n                    i++;\n                }\n            }\n            else\n            {\n                arr.push_back(4);\n            }\n        }\n        else if(music_string[i]=='.')\n        {\n            if(music_string[i+1]=='|')\n            {\n                arr.push_back(1);\n                i++;\n            }\n        }\n    }\n    return arr;",
        "grade-163": {
            "execution": 1
        },
        "28": "// write your code here\n\tstd::vector<long> note_beat;\n\tstd::vector<char> note;\n\tstd::vector<char> beat;\n\tstd::vector<long>::iterator it;\n\tlong counter = 0;\n\t//Parsing string\n\tfor (int i = 0; i < music_string.length(); i++) {\n\t\tif (music_string[i] == 'o' || music_string[i] == '.') {\n\t\t\tnote.push_back(music_string[i]);\n\t\t}\n\t\telse if (music_string[i] == '|') {\n\t\t\tbeat.push_back(music_string[i]);\n\t\t}\n\t\telse {\n\t\t\tcounter++;\n\t\t}\n\t}\n\tcounter = (counter + 1) / 2;\n\t//Parsing note\n\n\tfor (int i = 0; i < note.size(); i++) {\n\t\tif (note[i] == 'o') {\n\t\t\tnote_beat.push_back(4);\n\t\t}\n\t\telse if (note[i] == '.') {\n\t\t\tnote_beat.push_back(1);\n\t\t}\n\t}\n\t//Parsing beat\n\n\tfor (int i = 0; i < beat.size(); i++) {\n\t\tif (beat[i] == '|') {\n\t\t\tit = note_beat.begin();\n\t\t\tnote_beat.insert(it + i, *(it + i) / 2);\n\t\t\tnote_beat.erase(it + i + 1);\n\t\t}\n\t}\n\t//Parsing counter\n\n\tif (counter > 0) {\n\t\tit = note_beat.begin();\n\t\tnote_beat.insert(it, counter);\n\t}\n\treturn note_beat;",
        "grade-28": {
            "execution": 0
        },
        "6": "std::vector<long> result;\n    // Implement your parser here\n\n    std::stringstream ss(music_string);\n    std::string note;\n    while (ss >> note) {\n        if (note.size() == 1)\n            result.push_back(4);\n        else if (note[1] == '|')\n            result.push_back(2);\n        else\n            result.push_back(1);\n    }\n\n    return result;",
        "grade-6": {
            "execution": 0
        },
        "189": "int l = music_string.length();\n\tstd::vector<long> result;\n\tfor (int i = 0; i < l; i++) {\n\t\tif (music_string[i] == 'o') {\n\t\t\tif (music_string[i + 1] == '|') {\n\t\t\t\tresult.push_back(2);\n\t\t\t\ti += 2;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tresult.push_back(4);\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tresult.push_back(1);\n\t\t\ti += 2;\n\t\t}\n\t}\n\treturn result;",
        "grade-189": {
            "execution": 1
        },
        "70": "char note[] = {'.', '|', 'o'};\n    std::vector<long> beats;\n    // YOUR CODE GOES HERE\n    char *token = strtok(const_cast<char *>(music_string.c_str()), \" \");\n    while (token != NULL) {\n        if (strcmp(token, \"o\") == 0) {\n            beats.push_back(4);\n        } else if (strcmp(token, \"o|\") == 0) {\n            beats.push_back(2);\n        } else if (strcmp(token, \".|\") == 0) {\n            beats.push_back(1);\n        }\n        token = strtok(NULL, \" \");\n    }\n    return beats;",
        "grade-70": {
            "execution": 1
        },
        "62": "if (music_string.empty()) {\n        return {};\n    }\n    std::vector<long> res;\n    int i = 0;\n    int beat = 0;\n    while (i < music_string.size()) {\n        if (music_string[i] == 'o') {\n            if (music_string[i + 1] == '|') {\n                res.push_back(2);\n                i += 2;\n            } else {\n                res.push_back(4);\n                i += 1;\n            }\n        } else {\n            res.push_back(1);\n            i += 2;\n        }\n    }\n    return res;",
        "grade-62": {
            "execution": 0
        },
        "57": "std::vector<long> musical_notes;\n\tlong count;\n\tfor (long i = 0; i < music_string.length(); i++) {\n\t\tcount = 0;\n\t\tif (music_string[i] == 'o') {\n\t\t\tcount = 4;\n\t\t\ti++;\n\t\t}\n\t\telse if (music_string[i] == '.') {\n\t\t\tcount = 1;\n\t\t\ti += 2;\n\t\t}\n\t\telse if (music_string[i] == 'o') {\n\t\t\tcount = 2;\n\t\t\ti += 2;\n\t\t}\n\t\tmusical_notes.push_back(count);\n\t}\n\treturn musical_notes;",
        "grade-57": {
            "execution": 0
        },
        "35": "std::vector<long> my_vector;\n    char *temp;\n    char *pch = strtok (music_string.c_str(),\" \");\n    while (pch != NULL)\n    {\n        if(strlen(pch) == 1)\n        {\n            my_vector.push_back(4);\n        }\n        else if(strlen(pch) == 2)\n        {\n            if(pch[0] == 'o')\n            {\n                my_vector.push_back(2);\n            }\n            else\n            {\n                my_vector.push_back(1);\n            }\n        }\n        else\n        {\n            my_vector.push_back(1);\n        }\n        pch = strtok (NULL, \" \");\n    }\n    return my_vector;",
        "grade-35": {
            "execution": 0
        },
        "188": "std::vector<long> result(0);\n    for (char& c : music_string) {\n        if (c == 'o') {\n            result.push_back(4);\n        } else if (c == '|') {\n            result.push_back(2);\n        } else if (c == '.') {\n            result.push_back(1);\n        }\n    }\n    return result;",
        "grade-188": {
            "execution": 0
        },
        "26": "std::vector<long> duration;\n    int size = music_string.size();\n    int i = 0;\n    while(i < size) {\n        if(music_string[i] == 'o') {\n            if(music_string[i+1] == ' ') {\n                duration.push_back(4);\n                i+=2;\n            }\n            else if(music_string[i+1] == '|') {\n                duration.push_back(2);\n                i+=3;\n            }\n        }\n        else if(music_string[i] == '.') {\n            duration.push_back(1);\n            i+=3;\n        }\n    }\n    return duration;",
        "grade-26": {
            "execution": 0
        },
        "173": "std::vector<long> res;\n    char notes[4] = {'o', '|', '|', '.'};\n    for (int i = 0; i < music_string.size(); i++) {\n        if (music_string[i] == notes[0]) {\n            if (music_string[i + 1] == notes[1]) {\n                res.push_back(2);\n                i++;\n            } else {\n                res.push_back(4);\n            }\n        } else if (music_string[i] == notes[3]) {\n            if (music_string[i + 1] == notes[1]) {\n                res.push_back(1);\n                i++;\n            }\n        }\n    }\n    return res;",
        "grade-173": {
            "execution": 1
        },
        "139": "std::vector<long> a;\n  int len = music_string.length();\n  int i = 0;\n  long j = 0;\n  while(i<len){\n    if(music_string[i] == 'o'){\n      if(music_string[i+1] == ' ') {\n        a.push_back(4);\n        i++;\n      }\n      else if(music_string[i+1] == '|'){\n        a.push_back(2);\n        i++;\n      }\n    }\n    else if(music_string[i] == '.'){\n      if(music_string[i+1] == '|'){\n        a.push_back(1);\n        i++;\n      }\n    }\n    i++;\n  }\n  return a;",
        "grade-139": {
            "execution": 0
        },
        "22": "std::vector<long> ans;\n    for(auto c : music_string) {\n        if(c == 'o') {\n            ans.push_back(4);\n        } else if(c == '.') {\n            ans.push_back(1);\n        } else if(c == '|') {\n            ans.push_back(2);\n        }\n    }\n    return ans;",
        "grade-22": {
            "execution": 0
        },
        "151": "// your code here\n\tstd::vector<long> beats;\n\tstd::vector<char> note;\n\tfor (int i = 0; i < music_string.size(); i++) {\n\t\tif (music_string[i] == ' ' || music_string[i] == 'o' || music_string[i] == '|' || music_string[i] == '.') {\n\t\t\tnote.push_back(music_string[i]);\n\t\t}\n\t}\n\tfor (int i = 0; i < note.size(); i++) {\n\t\tif (note[i] == 'o') {\n\t\t\tif (note[i + 1] == ' ') {\n\t\t\t\tbeats.push_back(4);\n\t\t\t}\n\t\t\telse if (note[i + 1] == '|') {\n\t\t\t\tbeats.push_back(2);\n\t\t\t}\n\t\t}\n\t\telse if (note[i] == '.') {\n\t\t\tif (note[i + 1] == '|') {\n\t\t\t\tbeats.push_back(1);\n\t\t\t}\n\t\t}\n\t}\n\treturn beats;",
        "grade-151": {
            "execution": 0
        },
        "108": "long length = music_string.length();\n    std::vector<long> vec;\n    for(long i = 0; i < length; i++){\n        if(music_string[i] == 'o'){\n            vec.push_back(4);\n        }\n        else if(music_string[i] == '.'){\n            vec.push_back(1);\n        }\n        else if(music_string[i] == '|'){\n            vec.back() = vec.back() / 2;\n        }\n    }\n    return vec;",
        "grade-108": {
            "execution": 0
        },
        "8": "// your code here\n  int count = 0;\n  std::vector<long> beats;\n  for(int i = 0; i < music_string.length(); i++){\n    if(music_string[i] == 'o'){\n      beats.push_back(4);\n    }\n    else if(music_string[i] == '.'){\n      beats.push_back(1);\n    }\n    else if(music_string[i] == '|'){\n      if(beats[beats.size()-1] == 4){\n        beats[beats.size()-1] = 2;\n      }\n      else{\n        beats[beats.size()-1] = 1;\n      }\n    }\n  }\n  return beats;",
        "grade-8": {
            "execution": 1
        },
        "7": "std::vector<long> beats;\n    std::string::iterator i;\n    long counter = 0;\n    long division_factor = 2;\n    bool previous_is_divided = false;\n    bool ended_with_dot = false;\n    long division_counter = 0;\n    for (i = music_string.begin(); i != music_string.end(); i++) {\n        //      std::cout << *i << \" \";\n        if (*i == 'o') {\n            if (previous_is_divided) {\n                division_factor = division_factor / division_counter;\n                division_counter = 0;\n                counter = counter / division_factor;\n                previous_is_divided = false;\n            } else {\n                if (ended_with_dot) {\n                    counter = counter / division_factor;\n                    division_factor = 2;\n                    ended_with_dot = false;\n                }\n            }\n            counter += 4;\n        } else if (*i == '|') {\n            if (previous_is_divided) {\n                division_factor = division_factor / division_counter;\n                division_counter = 0;\n                counter = counter / division_factor;\n                previous_is_divided = false;\n            } else {\n                if (ended_with_dot) {\n                    counter = counter / division_factor;\n                    division_factor = 2;\n                    ended_with_dot = false;\n                }\n            }\n            counter += 2;\n        } else if (*i == '.') {\n            if (previous_is_divided) {\n                division_factor = division_factor / division_counter;\n                division_counter = 0;\n                counter = counter / division_factor;\n                previous_is_divided = false;\n            } else {\n                if (ended_with_dot) {\n                    counter = counter / division_factor;\n                    division_factor = 2;\n                    ended_with_dot = false;\n                }\n            }\n            counter += 1;\n            ended_with_dot = true;\n        } else if (*i == ' ') {\n            if (previous_is_divided) {",
        "grade-7": {
            "execution": 0
        },
        "23": "std::vector<long> beats;\n    for (char c : music_string) {\n        if (c == 'o') {\n            beats.push_back(4);\n        } else if (c == '|') {\n            beats.push_back(1);\n        }\n    }\n    return beats;",
        "grade-23": {
            "execution": 0
        },
        "55": "// your code goes here\n    \n    std::vector<long> v;\n    long count=0;\n    for(long i=0;i<music_string.length();i++)\n    {\n        count=0;\n        if(music_string[i]=='o')\n        {\n            count+=4;\n            if(music_string[i+1]==' ')\n            {\n                v.push_back(count);\n            }\n        }\n        else if(music_string[i]=='o'&&music_string[i+1]=='|')\n        {\n            count+=2;\n            if(music_string[i+2]==' ')\n            {\n                v.push_back(count);\n            }\n        }\n        else if(music_string[i]=='.'&&music_string[i+1]=='|')\n        {\n            count+=1;\n            if(music_string[i+2]==' ')\n            {\n                v.push_back(count);\n            }\n        }\n        \n    }\n    return v;",
        "grade-55": {
            "execution": 0
        },
        "59": "std::vector<long> beats_per_note;\n    std::string beat;\n    long count = 0;\n    for (char note : music_string) {\n        if (note == ' ') {\n            beats_per_note.push_back(count);\n            count = 0;\n        } else if (note == 'o') {\n            count += 4;\n        } else if (note == '|') {\n            count += 1;\n        }\n    }\n    beats_per_note.push_back(count);\n    return beats_per_note;",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n// True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd', 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nbool same_chars(std::string s0, std::string s1) {\n",
        "snippet": [
            "    for (int i=0;i<s0.length();i++)\n    if (find(s1.begin(),s1.end(),s0[i])==s1.end())\n        return false;\n    for (int i=0;i<s1.length();i++)\n    if (find(s0.begin(),s0.end(),s1[i])==s0.end())\n        return false;\n    return true;   \n}\n"
        ],
        "simplified": "Check if two words have the same characters.",
        "task_id": "54",
        "199": "int i;\n    std::sort(s0.begin(), s0.end());\n    std::sort(s1.begin(), s1.end());\n    return s0==s1;",
        "grade-199": {
            "execution": 0
        },
        "34": "// find occurences of each character in string 0\n  // find occurences of each character in string 1\n  // compare to see if they have the same occurences\n  std::unordered_map<char, int> occurences;\n  // loop over string 0 and count occurences\n  for (const char &c : s0) {\n    occurences[c]++;\n  }\n  // loop over string 1 and count occurences\n  for (const char &c : s1) {\n    occurences[c]--;\n  }\n  // now just check if each occurence == 0\n  for (const auto &occ : occurences) {\n    if (occ.second != 0) {\n      return false;\n    }\n  }\n  return true;",
        "grade-34": {
            "execution": 0
        },
        "9": "// Your code goes here\n    std::sort(s0.begin(), s0.end());\n    std::sort(s1.begin(), s1.end());\n    return s0==s1;",
        "grade-9": {
            "execution": 0
        },
        "88": "if (s0.size() == s1.size()) {\n        std::sort(s0.begin(), s0.end());\n        std::sort(s1.begin(), s1.end());\n        if (s0 == s1)\n            return true;\n    }\n    return false;",
        "grade-88": {
            "execution": 0
        },
        "79": "int charset[127];\n    for (int i = 0; i < 127; i++) {\n        charset[i] = 0;\n    }\n    for (char c : s0) {\n        charset[c] += 1;\n    }\n    for (char c : s1) {\n        charset[c] -= 1;\n    }\n    for (int i = 0; i < 127; i++) {\n        if (charset[i] != 0) {\n            return false;\n        }\n    }\n    return true;",
        "grade-79": {
            "execution": 0
        },
        "73": "// LAB\n  \n  std::sort(s0.begin(), s0.end());\n  std::sort(s1.begin(), s1.end());\n  return s0 == s1;",
        "grade-73": {
            "execution": 0
        },
        "44": "std::map<char, int> freq1;\n    std::map<char, int> freq2;\n    for (char x : s0)\n        freq1[x]++;\n    for (char x : s1)\n        freq2[x]++;\n    for (auto it : freq1) {\n        if (freq2[it.first] != it.second)\n            return false;\n    }\n    return true;",
        "grade-44": {
            "execution": 0
        },
        "32": "auto len0 = s0.length();\n    auto len1 = s1.length();\n    std::sort(s0.begin(), s0.end());\n    std::sort(s1.begin(), s1.end());\n    std::cout << s0 << std::endl;\n    std::cout << s1 << std::endl;\n    return s0 == s1;",
        "grade-32": {
            "execution": 0
        },
        "169": "// put your code here\n    int i, j;\n    for(i = 0; i < s0.length(); i++) {\n        for(j = 0; j < s1.length(); j++) {\n            if(s0[i] == s1[j])\n                break;\n        }\n        if(j == s1.length())\n            return false;\n    }\n    for(i = 0; i < s1.length(); i++) {\n        for(j = 0; j < s0.length(); j++) {\n            if(s1[i] == s0[j])\n                break;\n        }\n        if(j == s0.length())\n            return false;\n    }\n    return true;",
        "grade-169": {
            "execution": 1
        },
        "28": "std::map<char,int> map_s0;\n\tstd::map<char,int> map_s1;\n\tstd::map<char,int>::iterator itr_s0;\n\tstd::map<char,int>::iterator itr_s1;\n\tfor(int i=0;i<s0.length();i++){\n\t\titr_s0 = map_s0.find(s0[i]);\n\t\tif(itr_s0 == map_s0.end()){\n\t\t\tmap_s0.insert(std::pair<char,int>(s0[i],1));\n\t\t}else{\n\t\t\tmap_s0[s0[i]]++;\n\t\t}\n\t}\n\tfor(int i=0;i<s1.length();i++){\n\t\titr_s1 = map_s1.find(s1[i]);\n\t\tif(itr_s1 == map_s1.end()){\n\t\t\tmap_s1.insert(std::pair<char,int>(s1[i],1));\n\t\t}else{\n\t\t\tmap_s1[s1[i]]++;\n\t\t}\n\t}\n\titr_s0 = map_s0.begin();\n\titr_s1 = map_s1.begin();\n\twhile(itr_s0 != map_s0.end()){\n\t\tif(itr_s1 == map_s1.end()){\n\t\t\treturn false;\n\t\t}\n\t\tif(itr_s0->first != itr_s1->first){\n\t\t\treturn false;\n\t\t}\n\t\tif(itr_s0->second != itr_s1->second){\n\t\t\treturn false;\n\t\t}\n\t\titr_s0++;\n\t\titr_s1++;\n\t}\n\tif(itr_s1 != map_s1.end()){\n\t\treturn false;\n\t}\n\treturn true;",
        "grade-28": {
            "execution": 0
        },
        "183": "std::unordered_map<char, int> m;\n    for (auto c : s0) {\n        m[c]++;\n    }\n    for (auto c : s1) {\n        m[c]--;\n    }\n    for (auto& p : m) {\n        if (p.second != 0) {\n            return false;\n        }\n    }\n    return true;",
        "grade-183": {
            "execution": 0
        },
        "133": "std::sort(s0.begin(), s0.end());\n    std::sort(s1.begin(), s1.end());\n    std::cout << s0 << ' ' << s1 << std::endl;\n    return s0 == s1;",
        "grade-133": {
            "execution": 0
        },
        "12": "std::map<char, int> freq;\n\tfor (auto ch : s0) {\n\t\tfreq[ch]++;\n\t}\n\tfor (auto ch : s1) {\n\t\tfreq[ch]--;\n\t}\n\tfor (auto val : freq) {\n\t\tif (val.second != 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;",
        "grade-12": {
            "execution": 0
        },
        "10": "if(s0.length() != s1.length()) return false;\n   std::map<char, int> m;\n   for(int i = 0; i < s0.length(); i++) {\n       m[s0[i]]++;\n   }\n   for(int i = 0; i < s1.length(); i++) {\n       m[s1[i]]--;\n   }\n   for(auto e : m) {\n       if(e.second != 0) return false;\n   }\n   return true;",
        "grade-10": {
            "execution": 0
        },
        "29": "assert(s0.size() > 0);\n  assert(s1.size() > 0);\n  std::sort(s0.begin(), s0.end());\n  std::sort(s1.begin(), s1.end());\n  return s0 == s1;",
        "grade-29": {
            "execution": 0
        },
        "71": "std::map<char, int> map;\n    for (auto c : s0) {\n        ++map[c];\n    }\n    for (auto c : s1) {\n        --map[c];\n    }\n    for (auto kv : map) {\n        if (kv.second != 0) {\n            return false;\n        }\n    }\n    return true;",
        "grade-71": {
            "execution": 0
        },
        "75": "// Implement this!\n   return true;",
        "grade-75": {
            "execution": 0
        },
        "156": "int a[256] = {0};\n    for(int i = 0; i < s0.length(); i++) {\n        a[s0[i]]++;\n    }\n    for(int i = 0; i < s1.length(); i++) {\n        a[s1[i]]--;\n    }\n    for(int i = 0; i < 256; i++) {\n        if(a[i] != 0)\n            return false;\n    }\n    return true;",
        "grade-156": {
            "execution": 0
        },
        "187": "std::map<char, int> m;\n  for (int i = 0; i < s0.size(); i++) {\n    m[s0[i]]++;\n  }\n  for (int i = 0; i < s1.size(); i++) {\n    m[s1[i]]--;\n  }\n  for (std::map<char, int>::iterator it = m.begin(); it != m.end(); it++) {\n    if (it->second != 0) return false;\n  }\n  return true;",
        "grade-187": {
            "execution": 0
        },
        "175": "std::sort(s0.begin(), s0.end());\n\tstd::sort(s1.begin(), s1.end());\n\t\n\tif(s0 == s1)\n\t\treturn true;\n\t\n\treturn false;",
        "grade-175": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string> words) {\n",
        "snippet": [
            "    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\n"
        ],
        "simplified": "Write a function that accepts a list of strings. The list contains different words. Return the word with maximum number of unique characters. If multiple strings have maximum number of unique characters, return the one which comes first in lexicographical order.",
        "task_id": "158",
        "163": "std::string winner;\n\tfor (auto word : words) {\n\t\tif (winner.empty()) {\n\t\t\twinner = word;\n\t\t}\n\t\telse {\n\t\t\tif (winner.length() < word.length()) {\n\t\t\t\twinner = word;\n\t\t\t}\n\t\t\telse if (winner.length() == word.length()) {\n\t\t\t\tif (winner < word) {\n\t\t\t\t\twinner = word;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn winner;",
        "grade-163": {
            "execution": 0
        },
        "28": "std::string uniqueWord;\n    int uniqueSize = 0;\n    int count;\n    for (int i = 0; i < words.size(); i++) {\n        count = 0;\n        for (int j = 0; j < words[i].size(); j++) {\n            if (words[i].find(words[i][j]) == words[i].rfind(words[i][j])) {\n                count++;\n            }\n        }\n        if (count > uniqueSize) {\n            uniqueSize = count;\n            uniqueWord = words[i];\n        }\n    }\n    return uniqueWord;",
        "grade-28": {
            "execution": 0
        },
        "6": "auto it = words.begin();\n\tstd::string max_str = \"\";\n\tint count_max = 0;\n\tfor (; it != words.end(); it++) {\n\t\tint count = 0;\n\t\tstd::string str = *it;\n\t\tstd::set<char> unique_char;\n\t\tfor (int i = 0; i < str.length(); i++) {\n\t\t\tif (unique_char.find(str[i]) == unique_char.end()) {\n\t\t\t\tunique_char.insert(str[i]);\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif (count > count_max) {\n\t\t\tcount_max = count;\n\t\t\tmax_str = str;\n\t\t}\n\t}\n\treturn max_str;",
        "grade-6": {
            "execution": 0
        },
        "189": "std::string r = \"\";\n\tint max_unique = 0;\n\tfor (std::string word : words) {\n\t\tint unique = 0;\n\t\tstd::set<char> seen;\n\t\tfor (char c : word) {\n\t\t\tif (seen.find(c) == seen.end()) {\n\t\t\t\tseen.insert(c);\n\t\t\t\tunique++;\n\t\t\t}\n\t\t}\n\t\tif (unique > max_unique) {\n\t\t\tmax_unique = unique;\n\t\t\tr = word;\n\t\t}\n\t}\n\treturn r;",
        "grade-189": {
            "execution": 0
        },
        "70": "std::vector<int> unique_chars;\n    int count = 0;\n    std::string max_string;\n    for (int i = 0; i < words.size(); i++) {\n        count = 0;\n        for (int j = 0; j < words[i].size(); j++) {\n            for (int k = 0; k < words[i].size(); k++) {\n                if (words[i][j] == words[i][k]) {\n                    count++;\n                }\n            }\n        }\n        unique_chars.push_back(count/words[i].size());\n    }\n    int max = unique_chars[0];\n    for (int i = 0; i < unique_chars.size(); i++) {\n        if (unique_chars[i] > max) {\n            max = unique_chars[i];\n        }\n    }\n    for (int i = 0; i < unique_chars.size(); i++) {\n        if (unique_chars[i] == max) {\n            max_string = words[i];\n            break;\n        }\n    }\n    return max_string;",
        "grade-70": {
            "execution": 0
        },
        "62": "int i, j, flag = 0, unique_chars = 0, max_unique_chars = 0;\n    std::vector<std::string>::iterator it;\n    std::string max_word;\n    std::vector<std::string>::iterator it1;\n    for (it = words.begin(); it != words.end(); it++) {\n        flag = 0;\n        for (it1 = it + 1; it1 != words.end(); it1++) {\n            if (*it == *it1) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 1) {\n            continue;\n        }\n        unique_chars = 0;\n        for (i = 0; i < (*it).length(); i++) {\n            flag = 0;\n            for (j = 0; j < (*it).length(); j++) {\n                if (i == j) {\n                    continue;\n                }\n                if ((*it)[i] == (*it)[j]) {\n                    flag = 1;\n                    break;\n                }\n            }\n            if (flag == 0) {\n                unique_chars++;\n            }\n        }\n        if (unique_chars > max_unique_chars) {\n            max_unique_chars = unique_chars;\n            max_word = *it;\n        }\n    }\n    return max_word;",
        "grade-62": {
            "execution": 0
        },
        "57": "if (words.size() == 0) return \"\";\n    std::string ans;\n    int max_unique = 0;\n    int max_length = 0;\n    for (int i = 0; i < words.size(); i++) {\n        int length = words[i].length();\n        if (length > max_length) {\n            max_length = length;\n            ans = words[i];\n        }\n        std::unordered_set<char> count_set;\n        for (char j : words[i]) {\n            count_set.insert(j);\n        }\n        if (count_set.size() > max_unique) {\n            max_unique = count_set.size();\n            ans = words[i];\n        }\n    }\n    return ans;",
        "grade-57": {
            "execution": 0
        },
        "35": "std::string ans = \"\";\n    int count = 0;\n    for (int i = 0; i < words.size(); i++) {\n        std::set<char> s;\n        int cnt = 0;\n        for (int j = 0; j < words[i].size(); j++) {\n            s.insert(words[i][j]);\n        }\n        cnt = s.size();\n        if (count < cnt) {\n            count = cnt;\n            ans = words[i];\n        }\n    }\n    return ans;",
        "grade-35": {
            "execution": 0
        },
        "188": "int  max_unique=0;\n    std::string result;\n    for(auto e:words){\n        int unique_num=0;\n        std::vector<char> unique_chars;\n        for(auto ee:e){\n            bool found=false;\n            for(auto eee:unique_chars){\n                if(ee==eee){\n                    found=true;\n                    break;\n                }\n            }\n            if(!found){\n                unique_chars.push_back(ee);\n                unique_num++;\n            }\n        }\n        if(unique_num>max_unique){\n            max_unique=unique_num;\n            result=e;\n        }\n    }\n    return result;",
        "grade-188": {
            "execution": 0
        },
        "26": "int max_count = 0;\n\tstd::string max_word;\n\tfor (int i = 0; i < words.size(); i++) {\n\t\tstd::set<char> chars;\n\t\tfor (int j = 0; j < words[i].size(); j++) {\n\t\t\tchars.insert(words[i][j]);\n\t\t}\n\t\tif (chars.size() > max_count) {\n\t\t\tmax_count = chars.size();\n\t\t\tmax_word = words[i];\n\t\t}\n\t}\n\treturn max_word;",
        "grade-26": {
            "execution": 0
        },
        "173": "int max = 0;\n  std::string m_word;\n  for (auto s : words) {\n    int len = std::unique(s.begin(), s.end()) - s.begin();\n    if (len > max) {\n      max = len;\n      m_word = s;\n    }\n  }\n  return m_word;",
        "grade-173": {
            "execution": 0
        },
        "139": "",
        "grade-139": {
            "execution": 0
        },
        "22": "std::string max = \"\";\n    int max_len = 0;\n    int len = 0;\n    std::string ele;\n    std::set<char> chars;\n    std::set<char>::iterator it;\n    for (int i = 0; i < words.size(); i++) {\n        chars.clear();\n        ele = words[i];\n        for (int j = 0; j < ele.length(); j++) {\n            chars.insert(ele[j]);\n        }\n        len = chars.size();\n        if (len > max_len) {\n            max_len = len;\n            max = ele;\n        } else if (len == max_len) {\n            if (ele < max) {\n                max = ele;\n            }\n        }\n    }\n    return max;",
        "grade-22": {
            "execution": 1
        },
        "151": "int i, j, max_chars = 0, max_chars_index = 0;\n    std::string str;\n    for(i = 0; i < words.size(); i++) {\n        str = words[i];\n        std::sort(str.begin(), str.end());\n        str.erase(std::unique(str.begin(), str.end()), str.end());\n        if(str.size() > max_chars) {\n            max_chars = str.size();\n            max_chars_index = i;\n        }\n    }\n    return words[max_chars_index];",
        "grade-151": {
            "execution": 0
        },
        "108": "std::vector<int> counts;\n    int max_count = 0;\n    int max_index = 0;\n    for (auto &w : words) {\n        std::vector<bool> unique(256, false);\n        int count = 0;\n        for (auto &c : w) {\n            int code = (int)c;\n            if (!unique[code]) {\n                unique[code] = true;\n                count++;\n            }\n        }\n        counts.push_back(count);\n        if (count > max_count) {\n            max_count = count;\n            max_index = words.size() - 1;\n        }\n    }\n    for (int i = 0; i < words.size(); i++) {\n        if (counts[i] == max_count) {\n            if (words[i] < words[max_index]) {\n                max_index = i;\n            }\n        }\n    }\n    return words[max_index];",
        "grade-108": {
            "execution": 0
        },
        "8": "std::string ans;\n    std::map<std::string, int> map;\n    for (int i = 0; i < words.size(); i++) {\n        int count = 0;\n        std::string t = words[i];\n        std::sort(t.begin(), t.end());\n        auto it = std::unique(t.begin(), t.end());\n        count = std::distance(t.begin(), it);\n        map[words[i]] = count;\n    }\n    int max_count = 0;\n    for (auto i = map.begin(); i != map.end(); i++) {\n        if (i->second > max_count) {\n            max_count = i->second;\n            ans = i->first;\n        }\n    }\n    return ans;",
        "grade-8": {
            "execution": 1
        },
        "7": "std::map<std::string, int> m;\n  int max = 0;\n  std::string word = \"\";\n  for (auto w : words) {\n    m[w] = std::set<char>(w.begin(), w.end()).size();\n    if (m[w] > max) {\n      max = m[w];\n      word = w;\n    }\n  }\n  return word;",
        "grade-7": {
            "execution": 0
        },
        "23": "//\n    // Write your code here\n    //\n    std::string max_str = \"\";\n    int max_count = 0;\n    int sz = words.size();\n    for(int i = 0; i < sz; i++) {\n        int cnt = 0;\n        std::set<char> mp;\n        for(int j = 0; j < words[i].size(); j++) {\n            mp.insert(words[i][j]);\n        }\n        cnt = mp.size();\n        if(cnt > max_count) {\n            max_count = cnt;\n            max_str = words[i];\n        }\n        else if(cnt == max_count) {\n            if(words[i] < max_str) {\n                max_str = words[i];\n            }\n        }\n    }\n    return max_str;",
        "grade-23": {
            "execution": 1
        },
        "55": "std::string result = \"\";\n  int result_chars = 0;\n  for (const auto &word : words) {\n    std::set<char> unique_chars;\n    for (const auto &c : word) {\n      unique_chars.insert(c);\n    }\n    if (unique_chars.size() > result_chars) {\n      result = word;\n      result_chars = unique_chars.size();\n    }\n  }\n  return result;",
        "grade-55": {
            "execution": 0
        },
        "59": "if (words.size() == 0) return \"\";\n    std::string max_str = words[0];\n    for (std::string s : words) {\n        if (max_str.size() < s.size()) max_str = s;\n    }\n    for (int i = 0; i < max_str.size(); i++) {\n        for (int j = i + 1; j < max_str.size(); j++) {\n            if (max_str[i] > max_str[j]) std::swap(max_str[i], max_str[j]);\n        }\n    }\n    return max_str;",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\nstd::string file_name_check(std::string file_name) {\n",
        "snippet": [
            "    int numdigit=0,numdot=0;\n    if (file_name.length()<5) return \"No\";\n    char w=file_name[0];\n    if (w<65 or (w>90 and w<97) or w>122) return \"No\";\n    string last=file_name.substr(file_name.length()-4,4);\n    if (last!=\".txt\" and last!=\".exe\" and last!=\".dll\") return \"No\";\n    for (int i=0;i<file_name.length();i++)\n    {\n        if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;\n        if (file_name[i]=='.') numdot+=1;\n    }\n    if (numdigit>3 or numdot!=1) return \"No\";\n    return \"Yes\"; \n}\n"
        ],
        "simplified": "Create a function which takes a string representing a file's name, and returns 'Yes' if the the file's name is valid, and returns 'No' otherwise. A file's name is considered to be valid if and only if all the following conditions are met: - There should not be more than three digits ('0'-'9') in the file's name. - The file's name contains exactly one dot '.' - The substring before the dot should not be empty, and it starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dot should be one of these: ['txt', 'exe', 'dll']",
        "task_id": "141",
        "164": "// 1. Check the file name if it has not more than 3 digits\n    int counter = 0;\n    for (auto &c : file_name) {\n        if (c >= '0' && c <= '9') {\n            counter++;\n        }\n    }\n    if (counter > 3) {\n        return \"No\";\n    }\n    // 2. Check file name if it contains exactly one dot '.'\n    int dot_counter = 0;\n    for (auto &c : file_name) {\n        if (c == '.') {\n            dot_counter++;\n        }\n    }\n    if (dot_counter != 1) {\n        return \"No\";\n    }\n    // 3. Check the file name if it starts with a letter from a latin alphapet\n    if (file_name[0] < 'a' || file_name[0] > 'z') {\n        if (file_name[0] < 'A' || file_name[0] > 'Z') {\n            return \"No\";\n        }\n    }\n    // 4. Check the file name if the substring after the dot is one of these ['txt', 'exe', 'dll']\n    std::string file_type = file_name.substr(file_name.length() - 3, 3);\n    if (file_type != \"txt\" && file_type != \"exe\" && file_type != \"dll\") {\n        return \"No\";\n    }\n    return \"Yes\";",
        "grade-164": {
            "execution": 0
        },
        "28": "std::regex r(\"^[a-zA-Z]+(0*[1-9][0-9]{0,2})*(\\\\.txt|\\\\.exe|\\\\.dll)$\");\n    return regex_match(file_name, r) ? \"Yes\" : \"No\";",
        "grade-28": {
            "execution": 0
        },
        "6": "std::regex pattern (\"([a-zA-Z][a-zA-Z0-9]{0,3})\\.(txt|exe|dll)\");\n    return std::regex_match(file_name, pattern) ? \"Yes\" : \"No\";",
        "grade-6": {
            "execution": 0
        },
        "190": "int i, j, k, cnt = 0, len = file_name.length();\n\tstd::string ans;\n\tfor (i = 0; i < len; i++) {\n\t\tif (file_name[i] >= '0' && file_name[i] <= '9') {\n\t\t\tcnt++;\n\t\t}\n\t}\n\tif (cnt > 3) {\n\t\tans = \"No\";\n\t\treturn ans;\n\t}\n\tint cnt_dot = 0;\n\tfor (i = 0; i < len; i++) {\n\t\tif (file_name[i] == '.') {\n\t\t\tcnt_dot++;\n\t\t}\n\t}\n\tif (cnt_dot != 1) {\n\t\tans = \"No\";\n\t\treturn ans;\n\t}\n\tfor (i = 0; i < len; i++) {\n\t\tif (file_name[i] == '.') {\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (i == 0) {\n\t\tans = \"No\";\n\t\treturn ans;\n\t}\n\tfor (j = 0; j < i; j++) {\n\t\tif ((file_name[j] >= 'a' && file_name[j] <= 'z') || (file_name[j] >= 'A' && file_name[j] <= 'Z')) {\n\t\t\tcontinue;\n\t\t}\n\t\telse {\n\t\t\tans = \"No\";\n\t\t\treturn ans;\n\t\t}\n\t}\n\tstd::string s;\n\tfor (k = i + 1; k < len; k++) {\n\t\ts.push_back(file_name[k]);\n\t}\n\tif (s == \"txt\" || s == \"exe\" || s == \"dll\") {\n\t\tans = \"Yes\";\n\t\treturn ans;\n\t}\n\telse {\n\t\tans = \"No\";\n\t\treturn ans;\n\t}",
        "grade-190": {
            "execution": 0
        },
        "70": "// your code here\n    bool dot = false;\n    std::string a, b;\n    for (auto i = 0; i < file_name.size(); i++) {\n        if (file_name[i] == '.') {\n            dot = true;\n            continue;\n        }\n        if (!dot) {\n            if (!isalpha(file_name[i])) return \"No\";\n            a += file_name[i];\n        } else {\n            b += file_name[i];\n        }\n    }\n    if (a.size() == 0 || (b != \"txt\" && b != \"exe\" && b != \"dll\")) return \"No\";\n    for (auto i = 0; i < a.size(); i++) {\n        if (isdigit(a[i])) return \"No\";\n    }\n    return \"Yes\";",
        "grade-70": {
            "execution": 0
        },
        "62": "std::stringstream ss(file_name);\n    std::string beforeDot, afterDot;\n    std::vector<std::string> v = {\"txt\", \"exe\", \"dll\"};\n    bool found = false;\n    int number_of_digits = 0;\n    while(std::getline(ss, beforeDot, '.')){\n        std::getline(ss, afterDot, '.');\n    }\n    for(int i = 0; i < beforeDot.length(); i++){\n        if(beforeDot[i] >= '0' && beforeDot[i] <= '9'){\n            number_of_digits++;\n        }\n    }\n    for(int i = 0; i < v.size(); i++){\n        if(v[i] == afterDot){\n            found = true;\n        }\n    }\n    if(number_of_digits <= 3 && found && afterDot != \"\" && beforeDot != \"\" && \n    (beforeDot[0] >= 'a' && beforeDot[0] <= 'z') || (beforeDot[0] >= 'A' && beforeDot[0] <= 'Z')){\n        return \"Yes\";\n    }\n    return \"No\";",
        "grade-62": {
            "execution": 0
        },
        "57": "int l = file_name.length();\n\tif (l < 5) {\n\t\treturn \"No\";\n\t}\n\tint count = 0;\n\tfor (int i = 0; i < l; i++) {\n\t\tif (file_name[i] == '.') {\n\t\t\tcount++;\n\t\t}\n\t}\n\tif (count != 1) {\n\t\treturn \"No\";\n\t}\n\tstd::string s;\n\tfor (int i = 0; i < l; i++) {\n\t\tif (file_name[i] != '.') {\n\t\t\ts += file_name[i];\n\t\t}\n\t\telse {\n\t\t\tbreak;\n\t\t}\n\t}\n\tint count1 = 0;\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (s[i] >= '0' && s[i] <= '9') {\n\t\t\tcount1++;\n\t\t}\n\t}\n\tif (count1 > 3) {\n\t\treturn \"No\";\n\t}\n\tstd::string s1;\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (s[i] < '0' || s[i] > '9') {\n\t\t\tif (s[i] >= 'a' && s[i] <= 'z') {\n\t\t\t\treturn \"Yes\";\n\t\t\t}\n\t\t\telse if (s[i] >= 'A' && s[i] <= 'Z') {\n\t\t\t\treturn \"Yes\";\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn \"No\";\n\t\t\t}\n\t\t}\n\t}\n\tstd::string s2;\n\tfor (int i = 0; i < l; i++) {\n\t\tif (file_name[i] == '.') {\n\t\t\tfor (int j = i + 1; j < l; j++) {\n\t\t\t\ts2 += file_name[j];\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (s2 == \"txt\")",
        "grade-57": {
            "execution": 0
        },
        "35": "std::regex valid_file_name(\"[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)\");\n  return std::regex_match(file_name, valid_file_name) ? \"Yes\" : \"No\";",
        "grade-35": {
            "execution": 0
        },
        "189": "// Your code goes here\n    int count = 0;\n    std::string::iterator it = file_name.begin();\n    for(; it != file_name.end(); it++) {\n        if(isdigit(*it)) {\n            count++;\n        }\n    }\n    if(count > 3) {\n        return \"No\";\n    }\n    else {\n        count = 0;\n        for(it = file_name.begin(); it != file_name.end(); it++) {\n            if(*it == '.') {\n                count++;\n            }\n        }\n        if(count != 1) {\n            return \"No\";\n        }\n        else {\n            std::string temp1 = file_name.substr(0, file_name.find(\".\"));\n            if(temp1.empty()) {\n                return \"No\";\n            }\n            else {\n                if(isalpha(temp1[0])) {\n                    std::string temp2 = file_name.substr(file_name.find(\".\") + 1);\n                    if(temp2 == \"txt\" || temp2 == \"exe\" || temp2 == \"dll\") {\n                        return \"Yes\";\n                    }\n                    else {\n                        return \"No\";\n                    }\n                }\n                else {\n                    return \"No\";\n                }\n            }\n        }\n    }",
        "grade-189": {
            "execution": 1
        },
        "26": "std::string ans;\n    int n = file_name.size();\n    if(n<4) return \"No\";\n    int digits = 0;\n    for(int i=0;i<n;i++){\n        if(file_name[i]>='0' && file_name[i]<='9'){\n            digits++;\n        }\n    }\n    if(digits>3) return \"No\";\n    int dot = 0;\n    int last_dot;\n    for(int i=0;i<n;i++){\n        if(file_name[i]=='.'){\n            dot++;\n            last_dot = i;\n        }\n    }\n    if(dot!=1) return \"No\";\n    for(int i=0;i<last_dot;i++){\n        if(file_name[i]>='0' && file_name[i]<='9'){\n            return \"No\";\n        }\n    }\n    if(file_name[last_dot+1]=='t' && file_name[last_dot+2]=='x' && file_name[last_dot+3]=='t'){\n        return \"Yes\";\n    }\n    if(file_name[last_dot+1]=='e' && file_name[last_dot+2]=='x' && file_name[last_dot+3]=='e'){\n        return \"Yes\";\n    }\n    if(file_name[last_dot+1]=='d' && file_name[last_dot+2]=='l' && file_name[last_dot+3]=='l'){\n        return \"Yes\";\n    }\n    return \"No\";",
        "grade-26": {
            "execution": 0
        },
        "174": "std::vector<std::string> valid_extensions = {\"txt\", \"exe\", \"dll\"};\n    std::string extension;\n    size_t dot_index;\n    std::regex latin_letter_regex(\"[a-zA-Z]\");\n    std::regex digit_regex(\"[0-9]\");\n    std::regex valid_extension_regex(\"txt|exe|dll\");\n    std::smatch match;\n    dot_index = file_name.find('.');\n    if (dot_index == std::string::npos) {\n        return \"No\";\n    }\n    if (!std::regex_search(file_name.substr(0, dot_index), match, latin_letter_regex)) {\n        return \"No\";\n    }\n    if (std::regex_search(file_name.substr(0, dot_index), match, digit_regex)) {\n        if (match.size() > 3) {\n            return \"No\";\n        }\n    }\n    extension = file_name.substr(dot_index + 1);\n    if (!std::regex_search(extension, match, valid_extension_regex)) {\n        return \"No\";\n    }\n    return \"Yes\";",
        "grade-174": {
            "execution": 0
        },
        "139": "std::regex patt(R\"(^[a-zA-Z]+\\d{0,3}\\.txt$|^[a-zA-Z]+\\d{0,3}\\.exe$|^[a-zA-Z]+\\d{0,3}\\.dll$)\");\n    if(std::regex_match(file_name, patt))\n        return \"Yes\";\n    return \"No\";",
        "grade-139": {
            "execution": 0
        },
        "22": "// Your code here\n    int num = 0;\n    int dot = 0;\n    for(int i = 0; i < file_name.length(); i++){\n        if(file_name[i] >= '0' && file_name[i] <= '9')\n            num++;\n        if(file_name[i] == '.')\n            dot++;\n    }\n    if(dot != 1 || num > 3 || !((file_name[0] >= 'a' && file_name[0] <= 'z') || (file_name[0] >= 'A' && file_name[0] <= 'Z')))\n        return \"No\";\n    std::string sub = file_name.substr(file_name.find(\".\") + 1);\n    if(sub == \"txt\" || sub == \"exe\" || sub == \"dll\")\n        return \"Yes\";\n    return \"No\";",
        "grade-22": {
            "execution": 1
        },
        "151": "int dot_count = 0;\n    int digit_count = 0;\n    for (int i = 0; i < file_name.size(); i++) {\n        if (file_name[i] == '.') dot_count++;\n        if (file_name[i] == '.' && i == 0) return \"No\";\n        if (file_name[i] >= '0' && file_name[i] <= '9') digit_count++;\n        if (digit_count > 3) return \"No\";\n    }\n    if (dot_count != 1) return \"No\";\n    std::string extention = file_name.substr(file_name.find('.')+1);\n    if (extention != \"txt\" && extention != \"exe\" && extention != \"dll\") return \"No\";\n    return \"Yes\";",
        "grade-151": {
            "execution": 0
        },
        "108": "int dot_pos = -1;\n  int digit_cnt = 0;\n  for (int i = 0; i < file_name.size(); i++) {\n    if (file_name[i] >= '0' && file_name[i] <= '9') {\n      digit_cnt++;\n    }\n    if (file_name[i] == '.') {\n      dot_pos = i;\n    }\n  }\n  if (digit_cnt > 3) {\n    return \"No\";\n  }\n  if (dot_pos == -1) {\n    return \"No\";\n  }\n  if (dot_pos == 0) {\n    return \"No\";\n  }\n  if (file_name[dot_pos+1] == 't' &&\n      file_name[dot_pos+2] == 'x' &&\n      file_name[dot_pos+3] == 't') {\n    return \"Yes\";\n  }\n  if (file_name[dot_pos+1] == 'e' &&\n      file_name[dot_pos+2] == 'x' &&\n      file_name[dot_pos+3] == 'e') {\n    return \"Yes\";\n  }\n  if (file_name[dot_pos+1] == 'd' &&\n      file_name[dot_pos+2] == 'l' &&\n      file_name[dot_pos+3] == 'l') {\n    return \"Yes\";\n  }\n  return \"No\";",
        "grade-108": {
            "execution": 0
        },
        "8": "int dot_pos = file_name.find('.');\n    int counter = 0;\n    for (int i = 0; i < file_name.length(); i++) {\n        if (isdigit(file_name[i]))\n            counter++;\n    }\n    if (counter > 3) {\n        return \"No\";\n    }\n    if (file_name.substr(dot_pos+1, dot_pos+3) != \"txt\" &&\n        file_name.substr(dot_pos+1, dot_pos+3) != \"exe\" &&\n        file_name.substr(dot_pos+1, dot_pos+3) != \"dll\") {\n        return \"No\";\n    }\n    if (isdigit(file_name[0])) {\n        return \"No\";\n    }\n    return \"Yes\";",
        "grade-8": {
            "execution": 0
        },
        "7": "// TODO: Write your code here\n    int  num_of_dots = std::count(file_name.begin(), file_name.end(), '.');\n    if(num_of_dots > 1)\n        return \"No\";\n    std::size_t found = file_name.find_last_of(\".\");\n    std::string name = file_name.substr(0,found);\n    std::string extension = file_name.substr(found+1);\n    if(name.empty())\n        return \"No\";\n    if(std::count_if(name.begin(), name.end(), [](char c){return isdigit(c);}) > 3)\n        return \"No\";\n    if(!isalpha(name[0]))\n        return \"No\";\n    if(extension != \"txt\" && extension != \"exe\" && extension != \"dll\")\n        return \"No\";\n    return \"Yes\";",
        "grade-7": {
            "execution": 1
        },
        "23": "std::string before_dot = \"\";\n  \tstd::string after_dot = \"\";\n  \tint count = 0;\n  \tfor(int i = 0; i < file_name.length(); i++) {\n     \tchar c = file_name[i];\n     \tif(c == '.') {\n      \t\tbefore_dot = file_name.substr(0, i);\n      \t\tafter_dot = file_name.substr(i+1, file_name.length()-i-1);\n      \t\tcount++;\n      \t}\n    }\n  \tif(count > 1) {\n    \treturn \"No\";\n    }\n  \tif(!isalpha(before_dot[0])) {\n     \treturn \"No\";\n    }\n  \tif(after_dot != \"txt\" && after_dot != \"exe\" && after_dot != \"dll\") {\n     \treturn \"No\";\n    }\n  \tfor(int i = 0; i < before_dot.length(); i++) {\n     \tchar c = before_dot[i];\n     \tif(isdigit(c)) {\n      \t\treturn \"No\";\n        }\n    }\n  \treturn \"Yes\";",
        "grade-23": {
            "execution": 0
        },
        "55": "int dot_cnt = 0;\n\tint digit_cnt = 0;\n\tint latin_cnt = 0;\n\tfor (int i = 0; i < file_name.size(); i++) {\n\t\tif (file_name[i] >= '0' && file_name[i] <= '9') {\n\t\t\tdigit_cnt++;\n\t\t}\n\t\tif (file_name[i] == '.') {\n\t\t\tdot_cnt++;\n\t\t}\n\t\tif ((file_name[i] >= 'a' && file_name[i] <= 'z') || (file_name[i] >= 'A' && file_name[i] <= 'Z')) {\n\t\t\tlatin_cnt++;\n\t\t}\n\t}\n\tif (dot_cnt == 1 && digit_cnt <= 3 && latin_cnt > 0) {\n\t\tstd::string temp = file_name.substr(file_name.find(\".\") + 1);\n\t\tif (temp == \"txt\" || temp == \"exe\" || temp == \"dll\") {\n\t\t\treturn \"Yes\";\n\t\t}\n\t}\n\treturn \"No\";",
        "grade-55": {
            "execution": 0
        },
        "59": "// my code\n    int dot_pos = -1;\n    int num_count = 0;\n    int dot_count = 0;\n    if (file_name.length() == 0) {\n        return \"No\";\n    }\n    for (int i = 0; i < file_name.length(); i++) {\n        if (file_name[i] == '.') {\n            dot_pos = i;\n            dot_count++;\n        }\n        if (isdigit(file_name[i])) {\n            num_count++;\n        }\n    }\n    if (dot_count != 1) {\n        return \"No\";\n    }\n    if (num_count > 3) {\n        return \"No\";\n    }\n    if (dot_pos == 0) {\n        return \"No\";\n    }\n    if (!isalpha(file_name[0])) {\n        return \"No\";\n    }\n    std::string file_type = file_name.substr(dot_pos+1, file_name.length()-dot_pos-1);\n    if (file_type != \"txt\" && file_type != \"exe\" && file_type != \"dll\") {\n        return \"No\";\n    }\n    return \"Yes\";",
        "grade-59": {
            "execution": 1
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3, 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long a, long b, long c) {\n",
        "snippet": [
            "    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;\n    return false;\n}\n"
        ],
        "simplified": "Given the lengths of the three sides of a triangle. Return True if the three sides form a right-angled triangle, False otherwise. A right-angled triangle is a triangle in which one angle is right angle or 90 degree.",
        "task_id": "157",
        "167": "long arr[3] = {a, b, c};\n    std::sort(arr, arr+3);\n    if (pow(arr[0], 2) + pow(arr[1], 2) == pow(arr[2], 2)) {\n        return true;\n    }\n    return false;",
        "grade-167": {
            "execution": 1
        },
        "28": "std::vector<long> vec = {a, b, c};\n    std::sort(vec.begin(), vec.end());\n    return (vec[0] * vec[0] + vec[1] * vec[1] == vec[2] * vec[2]);",
        "grade-28": {
            "execution": 1
        },
        "6": "if (a <= 0 || b <= 0 || c <= 0) {\n        return false;\n    }\n    long max = std::max(a, std::max(b, c));\n    return max * max == a * a + b * b + c * c - max * max;",
        "grade-6": {
            "execution": 1
        },
        "195": "std::sort(std::begin({a, b, c}), std::end({a, b, c}));\n  return a * a + b * b == c * c;",
        "grade-195": {
            "execution": 0
        },
        "70": "// c^2 = a^2 + b^2\n    // sort a, b, c such that c is largest\n    if (a > b) {\n        std::swap(a, b);\n    }\n    if (b > c) {\n        std::swap(b, c);\n    }\n    if (a > b) {\n        std::swap(a, b);\n    }\n    return std::pow(c, 2) == std::pow(a, 2) + std::pow(b, 2);",
        "grade-70": {
            "execution": 1
        },
        "62": "return (a*a)+(b*b)==(c*c);",
        "grade-62": {
            "execution": 0
        },
        "57": "//return a*a + b*b == c*c;\n  std::vector<long> sides = {a, b, c};\n  std::sort(sides.begin(), sides.end());\n  return sides[0]*sides[0] + sides[1]*sides[1] == sides[2]*sides[2];",
        "grade-57": {
            "execution": 1
        },
        "35": "return (a * a + b * b == c * c || b * b + c * c == a * a || c * c + a * a == b * b);",
        "grade-35": {
            "execution": 1
        },
        "194": "int value = 0;\n    if(a * a + b * b == c * c){\n        value = 1;\n    }\n    else if(a * a + c * c == b * b){\n        value = 1;\n    }\n    else if(b * b + c * c == a * a){\n        value = 1;\n    }\n    if(value == 1){\n        return true;\n    }\n    else{\n        return false;\n    }",
        "grade-194": {
            "execution": 1
        },
        "26": "if(a*a + b*b == c*c || a*a + c*c == b*b || b*b + c*c == a*a)\n        return true;\n    return false;",
        "grade-26": {
            "execution": 1
        },
        "177": "if (a > b && a > c) {\n        return (a * a == b * b + c * c);\n    } else if (b > a && b > c) {\n        return (b * b == a * a + c * c);\n    } else {\n        return (c * c == a * a + b * b);\n    }",
        "grade-177": {
            "execution": 1
        },
        "141": "bool isRight = false;\n  vector<long> sides = {a, b, c};\n  sort(sides.begin(), sides.end());\n  long hypotenuse = sides[2];\n  long small = sides[0];\n  long big = sides[1];\n  if ((hypotenuse * hypotenuse) == (small * small) + (big * big)) {\n    isRight = true;\n  }\n  return isRight;",
        "grade-141": {
            "execution": 0
        },
        "22": "// double max = a;\n    // double min = b;\n    // double mid = c;\n    // if(b > max)\n    //     max = b;\n    // if(c > max)\n    //     max = c;\n    // if(b < min)\n    //     min = b;\n    // if(c < min)\n    //     min = c;\n    // if(max*max == mid*mid + min*min)\n    //     return true;\n    // return false;\n    std::vector<long> v;\n    v.push_back(a);\n    v.push_back(b);\n    v.push_back(c);\n    std::sort(v.begin(), v.end());\n    long a1 = v[0];\n    long b1 = v[1];\n    long c1 = v[2];\n    if(a1*a1 + b1*b1 == c1*c1)\n        return true;\n    return false;",
        "grade-22": {
            "execution": 1
        },
        "155": "if (a*a + b*b == c*c) {\n    return true;\n  }\n  if (a*a + c*c == b*b) {\n    return true;\n  }\n  if (b*b + c*c == a*a) {\n    return true;\n  }\n  return false;",
        "grade-155": {
            "execution": 1
        },
        "109": "long x, y, z;\n    std::vector<long> v;\n    v.push_back(a);\n    v.push_back(b);\n    v.push_back(c);\n    std::sort(v.begin(), v.end());\n    x = v[0];\n    y = v[1];\n    z = v[2];\n    if ((x*x) + (y*y) == (z*z)) {\n        return true;\n    }\n    return false;",
        "grade-109": {
            "execution": 1
        },
        "8": "// Write your code here.\n    return (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);",
        "grade-8": {
            "execution": 1
        },
        "7": "if (a > b && a > c) {\n    if (a * a == b * b + c * c) {\n      return true;\n    }\n  }\n  else if (b > a && b > c) {\n    if (b * b == a * a + c * c) {\n      return true;\n    }\n  }\n  else if (c > a && c > b) {\n    if (c * c == a * a + b * b) {\n      return true;\n    }\n  }\n  return false;",
        "grade-7": {
            "execution": 1
        },
        "23": "if(a*a == b*b + c*c || b*b == a*a + c*c || c*c == a*a + b*b)\n        return true;\n    return false;",
        "grade-23": {
            "execution": 1
        },
        "55": "std::vector<long> sides = {a, b, c};\n    std::sort(sides.begin(), sides.end());\n    if (sides[0] <= 0 || sides[2] >= sides[0] + sides[1]) {\n        return false;\n    }\n    long maxSide = sides[2];\n    long minSide = sides[0];\n    long otherSide = sides[1];\n    return pow(maxSide, 2) == pow(minSide, 2) + pow(otherSide, 2);",
        "grade-55": {
            "execution": 1
        },
        "59": "return abs(c*c - (a*a + b*b)) <= 0.000000001;",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n",
        "snippet": [
            "    list_any::iterator it;\n    boost::any anyone;\n    vector<int> out;\n    for (it=values.begin();it!=values.end();it++)\n    {\n         anyone=*it;\n        if( anyone.type() == typeid(int) )\n           out.push_back(boost::any_cast<int>(*it));\n    }\n    return out;\n}\n"
        ],
        "simplified": "Filter given list of any python values only for integers",
        "task_id": "22",
        "166": "std::vector<long> ans;\n    for(auto x: values){\n        try{\n            int y = std::any_cast<int>(x);\n            ans.push_back(y);\n        }\n        catch(std::bad_any_cast& e){\n            continue;\n        }\n    }\n    return ans;",
        "grade-166": {
            "execution": 0
        },
        "28": "std::vector<long> result;\n    for(auto value : values) {\n        try {\n            result.push_back(std::any_cast<long>(value));\n        } catch(std::bad_any_cast) {\n            //\n        }\n    }\n    return result;",
        "grade-28": {
            "execution": 0
        },
        "6": "std::vector<long> list_of_longs;\n    for(int i=0;i<values.size();i++){\n        try{\n            list_of_longs.push_back(std::any_cast<long>(values[i]));\n        }\n        catch(std::bad_any_cast &e){\n            continue;\n        }\n    }\n    return list_of_longs;",
        "grade-6": {
            "execution": 0
        },
        "192": "std::vector<long> numbers;\nstd::any val;\n// iterate over the vector of any values\nfor (int i = 0; i < values.size(); i++) {\nval = values[i];\ntry {\n// try to get the integer value from any value\nlong number = std::any_cast<long>(val);\nnumbers.push_back(number);",
        "grade-192": {
            "execution": 0
        },
        "70": "std::vector<long> v;\n    for(auto i:values){\n        try{\n            v.push_back(std::any_cast<long>(i));\n        }catch(const std::bad_any_cast& e){\n            continue;\n        }\n    }\n    return v;",
        "grade-70": {
            "execution": 0
        },
        "62": "std::vector<long> int_values;\n\tfor (auto x : values) {\n\t\tif (x.type() == typeid(int)) {\n\t\t\tint_values.push_back(std::any_cast<int>(x));\n\t\t}\n\t\telse if (x.type() == typeid(long)) {\n\t\t\tint_values.push_back(std::any_cast<long>(x));\n\t\t}\n\t}\n\treturn int_values;",
        "grade-62": {
            "execution": 0
        },
        "57": "std::vector<long> ret;\n    for(auto elem : values) {\n        try {\n            ret.push_back(std::any_cast<long>(elem));\n        } catch(std::bad_any_cast) {\n\n        }\n    }\n    return ret;",
        "grade-57": {
            "execution": 0
        },
        "35": "std::vector<long> vec;\n    for(auto i : values){\n        if(i.type() == typeid(int))\n            vec.push_back(std::any_cast<int>(i));\n        else if(i.type() == typeid(long))\n            vec.push_back(std::any_cast<long>(i));\n    }\n    return vec;",
        "grade-35": {
            "execution": 0
        },
        "191": "std::vector<long> vals;\n    for(auto& val : values) {\n        if(val.type() == typeid(long)) {\n            vals.push_back(std::any_cast<long>(val));\n        }\n    }\n    return vals;",
        "grade-191": {
            "execution": 0
        },
        "26": "std::vector<long> result;\n    for(auto& value : values) {\n        try {\n            result.push_back(std::any_cast<long>(value));\n        } catch(const std::bad_any_cast& e) {\n            continue;\n        }\n    }\n    return result;",
        "grade-26": {
            "execution": 0
        },
        "176": "std::vector<long> result;\n    std::any_cast<long>\n    return result;",
        "grade-176": {
            "execution": 0
        },
        "141": "std::vector<long> integers;\n  for (auto value : values) {\n    try {\n      if (std::any_cast<long>(value))\n        integers.push_back(std::any_cast<long>(value));\n    } catch (const std::bad_any_cast& e) {\n      continue;\n    }\n  }\n  return integers;",
        "grade-141": {
            "execution": 0
        },
        "22": "std::vector<long> ans;\n\tfor(auto i:values){\n\t\tif(i.type()==typeid(int)){\n\t\t\tans.push_back(std::any_cast<int>(i));\n\t\t}\n\t\telse if(i.type()==typeid(long)){\n\t\t\tans.push_back(std::any_cast<long>(i));\n\t\t}\n\t}\n\treturn ans;",
        "grade-22": {
            "execution": 0
        },
        "153": "std::vector<long> int_values;\n    for(auto value : values) {\n        try {\n            int_values.push_back(std::any_cast<long>(value));\n        } catch(std::bad_any_cast& e) {\n            // Do nothing.\n        }\n    }\n    return int_values;",
        "grade-153": {
            "execution": 0
        },
        "109": "std::vector<long> v;\n    for(int i=0;i<values.size();i++){\n        if(values[i].type()==typeid(int)){\n            v.push_back(std::any_cast<int>(values[i]));\n        }\n        else if(values[i].type()==typeid(long)){\n            v.push_back(std::any_cast<long>(values[i]));\n        }\n    }\n    return v;",
        "grade-109": {
            "execution": 0
        },
        "8": "std::vector<long> res;\n  for(int i=0;i<values.size();i++){\n    if(values[i].type()==typeid(int))\n      res.push_back(std::any_cast<int>(values[i]));\n    else if(values[i].type()==typeid(long))\n      res.push_back(std::any_cast<long>(values[i]));\n  }\n  return res;",
        "grade-8": {
            "execution": 0
        },
        "7": "long i;\n    std::vector<long> v;\n    for(i=0;i<values.size();i++)\n    {\n        if(std::any_cast<int>(&values[i]))\n        {\n            v.push_back(std::any_cast<int>(values[i]));\n        }\n    }\n    return v;",
        "grade-7": {
            "execution": 0
        },
        "23": "std::vector<long> result;\n    for(auto&&i:values){\n        if(i.type()==typeid(long))\n            result.push_back(std::any_cast<long>(i));\n    }\n    return result;",
        "grade-23": {
            "execution": 0
        },
        "55": "std::vector<long> res;\n    // TODO: implement your code here\n        for(auto x:values){\n            if(x.type()==typeid(int))\n                res.push_back(std::any_cast<int>(x));\n            else if(x.type()==typeid(long))\n                res.push_back(std::any_cast<long>(x));\n        }\n    return res;",
        "grade-55": {
            "execution": 0
        },
        "59": "std::vector<long> result;\n\tfor (auto i : values) {\n\t\tif (i.type() == typeid(long)) {\n\t\t\tresult.push_back(std::any_cast<long>(i));\n\t\t}\n\t}\n\treturn result;",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n// cycpattern_check(\"abcd\",\"abd\") => False\n// cycpattern_check(\"hello\",\"ell\") => True\n// cycpattern_check(\"whassup\",\"psus\") => False\n// cycpattern_check(\"abab\",\"baa\") => True\n// cycpattern_check(\"efef\",\"eeff\") => False\n// cycpattern_check(\"himenss\",\"simen\") => True\nbool cycpattern_check(std::string a, std::string b) {\n",
        "snippet": [
            "    for (int i=0;i<b.size();i++)\n    {\n        string rotate=b.substr(i)+b.substr(0,i);\n        if (a.find(rotate)!=string::npos) return true;\n    }\n    return false;\n\n}\n"
        ],
        "simplified": "You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word",
        "task_id": "154",
        "166": "int len = a.length();\n    string s = a + a;\n    int len2 = s.length();\n    int i = 0;\n    int j = 0;\n    while(j < len2 && i < len) {\n        if(s[j] == b[i]) {\n            j++;\n            i++;\n        } else {\n            j = j - i + 1;\n            i = 0;\n        }\n    }\n    if(i == len) {\n        return true;\n    }\n    return false;",
        "grade-166": {
            "execution": 0
        },
        "28": "// write your code here\n    std::string temp=b;\n    std::string str=b;\n    std::cout<<str<<std::endl;\n    std::cout<<str.size()<<std::endl;\n    int i=0;\n    while(i<str.size()){\n        char temp=str[0];\n        for(int j=0;j<str.size()-1;j++){\n            str[j]=str[j+1];\n        }\n        str[str.size()-1]=temp;\n        std::cout<<str<<std::endl;\n        i++;\n        if(a.find(str)!=std::string::npos){\n            return true;\n        }\n    }\n    return false;",
        "grade-28": {
            "execution": 1
        },
        "6": "std::string x=a+a;\n    if(x.find(b)!=std::string::npos)\n        return true;\n    else\n        return false;",
        "grade-6": {
            "execution": 0
        },
        "193": "if(a.size() != b.size())\n        return false;\n    string d = b+b;\n    size_t pos = d.find(a);\n    if(pos == string::npos)\n        return false;\n    return true;",
        "grade-193": {
            "execution": 0
        },
        "71": "bool res = false;\n\tstd::string str = b + b;\n\tfor (int i = 0; i < a.length(); i++) {\n\t\tstd::string temp = a.substr(i, a.length() - i) + a.substr(0, i);\n\t\tif (temp.find(b) != std::string::npos) {\n\t\t\tres = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn res;",
        "grade-71": {
            "execution": 0
        },
        "63": "int len = b.length();\n\tif (a.length() < len) return false;\n\tfor (int i = 0; i < len; i++) {\n\t\tstd::string temp = b.substr(i, len - i) + b.substr(0, i);\n\t\tif (a.find(temp) != std::string::npos) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;",
        "grade-63": {
            "execution": 1
        },
        "58": "// Write your code here\n    if(a.length()<b.length())\n    {\n        return false;\n    }\n    else\n    {\n        std::string c=b;\n        int k=b.length();\n        for(int i=0;i<k;i++)\n        {\n            char t=c[0];\n            for(int j=0;j<k-1;j++)\n            {\n                c[j]=c[j+1];\n            }\n            c[k-1]=t;\n            if(c==a)\n            {\n                return true;\n            }\n        }\n        return false;\n    }",
        "grade-58": {
            "execution": 0
        },
        "35": "std::string c=b;\n    while(1)\n    {\n        if(a.find(b)!=std::string::npos)\n        {\n            return true;\n        }\n        b=b.substr(1,b.length()-1)+b[0];\n        if(b==c)\n        {\n            return false;\n        }\n    }",
        "grade-35": {
            "execution": 1
        },
        "192": "// Write your code here\n  int l=a.length();\n  int r=b.length();\n  if(l<r)\n    return false;\n  int i,j,k;\n  for(i=0;i<l;i++)\n  {\n    j=0;\n    k=i;\n    if(a[k]==b[j])\n    {\n      k++;\n      j++;\n      if(k==l)\n        k=0;\n      while(j<r)\n      {\n        if(a[k]==b[j])\n        {\n          k++;\n          j++;\n          if(k==l)\n            k=0;\n        }\n        else\n          break;\n      }\n      if(j==r)\n        return true;\n    }\n  }\n  return false;",
        "grade-192": {
            "execution": 0
        },
        "26": "int lena = a.length();\n\tint lenb = b.length();\n\tif (lena<lenb)\n\t\treturn false;\n\tfor (int i = 0; i<lena; i++) {\n\t\tif (a[i] == b[0]) {\n\t\t\tbool ans = true;\n\t\t\tfor (int j = 0; j<lenb; j++) {\n\t\t\t\tif (a[(i + j) % lena] != b[j]) {\n\t\t\t\t\tans = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (ans)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;",
        "grade-26": {
            "execution": 0
        },
        "176": "if (a.size() < b.size())\n\t\treturn false;\n\tstring s = b + b;\n\tif (s.find(a) != string::npos)\n\t\treturn true;\n\treturn false;",
        "grade-176": {
            "execution": 0
        },
        "142": "// Write your code here.\n    int len_a = a.length();\n    int len_b = b.length();\n    int count =0;\n    if(len_a < len_b)\n        return false;\n    else\n    {\n        for(int i=0;i<len_a;i++)\n        {\n            for(int j=0;j<len_b;j++)\n            {\n                if(a[i] == b[j])\n                {\n                    if(i+len_b-1<len_a)\n                    {\n                        for(int k=0;k<len_b;k++)\n                        {\n                            if(a[i+k] == b[j])\n                            {\n                                count++;\n                                j = (j+1)%len_b;\n                            }\n                            else\n                                break;\n                        }\n                    }\n                    else\n                    {\n                        for(int k=0;k<len_b;k++)\n                        {\n                            if(a[i] == b[j])\n                            {\n                                count++;\n                                j = (j+1)%len_b;\n                                i++;\n                            }\n                            else\n                                break;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if(count == len_b)\n        return true;\n    else\n        return false;",
        "grade-142": {
            "execution": 0
        },
        "22": "int n = a.length();\n\tint m = b.length();\n\tint i = 0;\n\tint j = 0;\n\t//Using KMP algorithm\n\tstd::vector<int> temp(m);\n\tint len = 0;\n\t//Calculating the Prefix vector\n\tfor (int i = 1; i < m; i++) {\n\t\tif (b[i] == b[len]) {\n\t\t\tlen++;\n\t\t\ttemp[i] = len;\n\t\t}\n\t\telse {\n\t\t\tif (len != 0) {\n\t\t\t\tlen = temp[len - 1];\n\t\t\t\ti--;\n\t\t\t}\n\t\t\telse {\n\t\t\t\ttemp[i] = 0;\n\t\t\t}\n\t\t}\n\t}\n\t//check for the string a\n\twhile (i < n) {\n\t\tif (a[i] == b[j]) {\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\tif (j == m) {\n\t\t\treturn true;\n\t\t}\n\t\telse if (i < n && a[i] != b[j]) {\n\t\t\tif (j != 0) {\n\t\t\t\tj = temp[j - 1];\n\t\t\t}\n\t\t\telse {\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\t//check for the string rotated by 1\n\tlen = 0;\n\tj = 0;\n\ti = 0;\n\twhile (i < n) {\n\t\tif (a[i] == b[j]) {\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\tif (j == m) {\n\t\t\treturn true;\n\t\t}\n\t\telse if (i < n && a[i] != b[j]) {\n\t\t\tif (j != 0) {\n\t\t\t\tj = temp[j - 1];\n\t\t\t}\n\t\t\telse {\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\t//check for the string rotated by 2\n\tlen =",
        "grade-22": {
            "execution": 0
        },
        "154": "std::string temp = b;\n\tint i;\n\tfor (i = 0; i < b.length(); i++) {\n\t\tstd::rotate(temp.begin(), temp.begin() + 1, temp.end());\n\t\tif (a.find(temp) != std::string::npos) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;",
        "grade-154": {
            "execution": 1
        },
        "109": "//write your code here\n    if(a.length() < b.length())\n        return false;\n    std::string temp = b + b;\n    return temp.find(a) != std::string::npos;",
        "grade-109": {
            "execution": 0
        },
        "8": "if(a.length()!=b.length())return false;\n    else{\n    int n = a.length();\n    int x=0;\n    for(int i=0;i<n;i++){\n        if(a[0]==b[i]){\n            for(int j=0;j<n;j++){\n                if(a[j]==b[(i+j)%n])x++;\n            }\n        }\n    }\n    if(x==n)return true;\n    else return false;\n    }",
        "grade-8": {
            "execution": 0
        },
        "7": "assert(a.length() >= b.length());\n    if(a.find(b) != std::string::npos)\n        return true;\n    int n = b.length();\n    for(int i = 0; i < n; i++) {\n        if(a.find(b.substr(i, n - i) + b.substr(0, i)) != std::string::npos)\n            return true;\n    }\n    return false;",
        "grade-7": {
            "execution": 1
        },
        "23": "return false;",
        "grade-23": {
            "execution": 0
        },
        "56": "// Write your code here\n    if(a.length() < b.length())\n        return false;\n    string temp = b + b;\n    if(temp.find(a) != string::npos)\n        return true;\n    return false;",
        "grade-56": {
            "execution": 0
        },
        "60": "if(a.size()<b.size()) return false;\n    std::rotate(a.begin(),a.begin()+1,a.end());\n    for(int i=0;i<a.size();i++){\n        if(a.substr(i,b.size())==b) return true;\n    }\n    return false;",
        "grade-60": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n",
        "snippet": [
            "    vector<char> distinct={};\n    transform(str.begin(),str.end(),str.begin(),::tolower);\n    for (int i=0;i<str.size();i++)\n    {\n        bool isin=false;\n        for (int j=0;j<distinct.size();j++)\n            if (distinct[j]==str[i])\n                isin=true;\n        if (isin==false) distinct.push_back(str[i]);\n\n    }\n    return distinct.size();\n}\n"
        ],
        "simplified": "Given a string, find out how many distinct characters (regardless of case) does it consist of",
        "task_id": "16",
        "163": "long length = string.length();\n\tlong count = 0;\n\t// convert all characters to lower case\n\tstd::transform(string.begin(), string.end(), string.begin(), ::tolower);\n\t// make a set from the string, set contains distinct elements\n\tstd::set<char> char_set;\n\tfor (int i = 0; i < length; i++) {\n\t\tchar_set.insert(string[i]);\n\t}\n\treturn char_set.size();",
        "grade-163": {
            "execution": 1
        },
        "28": "std::set<char> chars;\n\tint len = string.length();\n\tfor (int i = 0; i < len; i++) {\n\t\tif (!chars.count(tolower(string[i])))\n\t\t\tchars.insert(tolower(string[i]));\n\t}\n\treturn chars.size();",
        "grade-28": {
            "execution": 1
        },
        "6": "// Initialize the number of distinct characters\n    long count = 0;\n    // For each character in the string\n    for (int i = 0; i < string.length(); i++) {\n        // For each character up to the current character\n        bool flag = true;\n        for (int j = 0; j < i; j++) {\n            // If they are the same\n            if (string[i] == string[j]) {\n                // Flag that the current character is not distinct\n                flag = false;\n                break;\n            }\n        }\n        // If it is still flagged as a distinct character\n        if (flag) {\n            // Increase the number of distinct characters\n            count++;\n        }\n    }\n    // Return the number of distinct characters\n    return count;",
        "grade-6": {
            "execution": 0
        },
        "190": "std::transform(string.begin(), string.end(), string.begin(), ::tolower);\n    std::vector<char> char_vector(string.begin(), string.end());\n    std::sort(char_vector.begin(), char_vector.end());\n    std::vector<char>::iterator it;\n    it = std::unique(char_vector.begin(), char_vector.end());\n    char_vector.resize(std::distance(char_vector.begin(), it));\n    return char_vector.size();",
        "grade-190": {
            "execution": 1
        },
        "70": "long res = 0;\n    std::string lower_string = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        lower_string += tolower(string[i]);\n    }\n    std::string unique_characters = \"\";\n    for (int i = 0; i < lower_string.length(); i++) {\n        if (unique_characters.find(lower_string[i]) == std::string::npos) {\n            unique_characters += lower_string[i];\n            res++;\n        }\n    }\n    return res;",
        "grade-70": {
            "execution": 1
        },
        "62": "// Your code here\n    long count = 0;\n    std::string unique;\n    for(int i = 0; i < string.length(); i++){\n        if(unique.find(tolower(string[i])) == std::string::npos){\n            unique += tolower(string[i]);\n            count++;\n        }\n    }\n    return count;",
        "grade-62": {
            "execution": 1
        },
        "57": "std::transform(string.begin(), string.end(), string.begin(), ::tolower);\n  std::set<char> distinct_chars(string.begin(), string.end());\n  return distinct_chars.size();",
        "grade-57": {
            "execution": 1
        },
        "35": "// Write your code here\n     int count=0;\n     for(int i=0;i<string.length();i++)\n     {\n         for(int j=i+1;j<string.length();j++)\n         {\n             if(string[i]==string[j])\n             {\n                 count++;\n             }\n         }\n     }\n     int a=string.length()-count;\n     return a;",
        "grade-35": {
            "execution": 0
        },
        "189": "long n = string.length();\n\tlong cnt = 0;\n\tstd::map<char, bool> m;\n\tfor (long i = 0; i < n; i++) {\n\t\tchar ch = string[i];\n\t\tm[ch] = true;\n\t}\n\tfor (auto it = m.begin(); it != m.end(); it++) {\n\t\tcnt++;\n\t}\n\treturn cnt;",
        "grade-189": {
            "execution": 0
        },
        "26": "unordered_set<char> char_set;\n    for (auto c : string) {\n        if (c >= 'a' && c <= 'z') {\n            char_set.insert(c);\n        } else if (c >= 'A' && c <= 'Z') {\n            char_set.insert(c);\n        }\n    }\n    return char_set.size();",
        "grade-26": {
            "execution": 0
        },
        "173": "std::unordered_set<char> set;\n    for (auto letter : string)\n        set.insert(letter);\n    return set.size();",
        "grade-173": {
            "execution": 0
        },
        "139": "std::set<char> result;\n    for (const auto& c : string) {\n        result.insert(std::tolower(c));\n    }\n    return result.size();",
        "grade-139": {
            "execution": 1
        },
        "22": "std::transform(string.begin(), string.end(), string.begin(), ::tolower);\n  std::set<char> s(string.begin(), string.end());\n  return s.size();",
        "grade-22": {
            "execution": 1
        },
        "151": "std::set<char> s;\n    for(auto i = string.begin(); i != string.end(); i++) {\n        s.insert(tolower(*i));\n    }\n    return s.size();",
        "grade-151": {
            "execution": 1
        },
        "108": "long counter = 0;\n  std::string new_string = \"\";\n  for (auto &c : string) {\n    if (new_string.find(std::tolower(c)) == std::string::npos) {\n      new_string += std::tolower(c);\n      counter++;\n    }\n  }\n  return counter;",
        "grade-108": {
            "execution": 1
        },
        "8": "//delete this part and enter your code here\n    std::set<char> s;\n    for(auto i:string)\n        s.insert(tolower(i));\n    return s.size();",
        "grade-8": {
            "execution": 1
        },
        "7": "long size = string.size();\n\tstd::sort(string.begin(), string.end());\n\tint count = 1;\n\tfor (int i = 1; i < size; i++) {\n\t\tif (string[i] != string[i - 1])\n\t\t\tcount++;\n\t}\n\treturn count;",
        "grade-7": {
            "execution": 0
        },
        "23": "std::set<char> set;\n  long len = string.length();\n  for (long i = 0; i < len; i++) {\n    set.insert(tolower(string[i]));\n  }\n  return set.size();",
        "grade-23": {
            "execution": 1
        },
        "55": "std::vector<char> v(string.begin(), string.end());\n\tstd::sort(v.begin(), v.end());\n\tv.erase(std::unique(v.begin(), v.end()), v.end());\n\treturn v.size();",
        "grade-55": {
            "execution": 0
        },
        "59": "int res = 0;\n    int len = string.length();\n    int freq[256] = {0};\n    for(int i = 0; i < len; i++) {\n        if(!freq[tolower(string[i])]) {\n            res++;\n            freq[tolower(string[i])]++;\n        }\n    }\n    return res;",
        "grade-59": {
            "execution": 1
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\n// total_match([], []) \u279e []\n// total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string> lst2) {\n",
        "snippet": [
            "    int num1,num2,i;\n    num1=0;num2=0;\n    for (i=0;i<lst1.size();i++)\n        num1+=lst1[i].length();\n    for (i=0;i<lst2.size();i++)\n        num2+=lst2[i].length();\n    if (num1>num2) return lst2;\n    return lst1;\n}\n"
        ],
        "simplified": "Write a function that accepts two lists of strings and returns the list that has total number of chars in the all strings of the list less than the other list. if the two lists have the same number of chars, return the first list.",
        "task_id": "74",
        "163": "int sum1 = 0, sum2 = 0;\n\tfor (int i = 0; i < lst1.size(); i++)\n\t\tsum1 += lst1[i].size();\n\tfor (int i = 0; i < lst2.size(); i++)\n\t\tsum2 += lst2[i].size();\n\treturn sum1 < sum2 ? lst1 : lst2;",
        "grade-163": {
            "execution": 0
        },
        "28": "int sum1 = 0;\n  int sum2 = 0;\n  for(int i = 0; i < lst1.size(); i++){\n      for(int j = 0; j < lst1[i].size(); j++){\n          sum1 += (int)lst1[i][j];\n      }\n  }\n  for(int i = 0; i < lst2.size(); i++){\n      for(int j = 0; j < lst2[i].size(); j++){\n          sum2 += (int)lst2[i][j];\n      }\n  }\n  if(sum1 < sum2){\n      return lst1;\n  }\n  return lst2;",
        "grade-28": {
            "execution": 0
        },
        "6": "int lst1c=0,lst2c=0;\n  for(int i=0;i<lst1.size();i++)\n    lst1c+=lst1[i].size();\n  for(int i=0;i<lst2.size();i++)\n    lst2c+=lst2[i].size();\n  if(lst1c<lst2c)\n    return lst1;\n  return lst2;",
        "grade-6": {
            "execution": 0
        },
        "189": "int count1 = 0, count2 = 0;\n\tfor (int i = 0; i < lst1.size(); i++) {\n\t\tcount1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size(); i++) {\n\t\tcount2 += lst2[i].size();\n\t}\n\tif (count1 < count2) {\n\t\treturn lst1;\n\t}\n\treturn lst2;",
        "grade-189": {
            "execution": 0
        },
        "70": "int sum1 = 0, sum2 = 0;\n\tfor (auto &elem : lst1) {\n\t\tsum1 += elem.size();\n\t}\n\tfor (auto &elem : lst2) {\n\t\tsum2 += elem.size();\n\t}\n\tif (sum1 <= sum2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}",
        "grade-70": {
            "execution": 1
        },
        "62": "std::vector<std::string> result;\n\tint lst1_size = 0;\n\tint lst2_size = 0;\n\tfor (int i = 0; i < lst1.size(); i++) {\n\t\tlst1_size += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size(); i++) {\n\t\tlst2_size += lst2[i].size();\n\t}\n\tif (lst1_size < lst2_size) {\n\t\tresult = lst1;\n\t}\n\telse if (lst1_size > lst2_size) {\n\t\tresult = lst2;\n\t}\n\telse {\n\t\tresult = lst1;\n\t}\n\treturn result;",
        "grade-62": {
            "execution": 1
        },
        "57": "// your code here\n  std::vector<std::string> :: iterator itr;\n  int sum1=0,sum2=0;\n  for(itr=lst1.begin();itr!=lst1.end();itr++)\n  {\n  \tsum1+=itr->length();\n  }\n  for(itr=lst2.begin();itr!=lst2.end();itr++)\n  {\n  \tsum2+=itr->length();\n  }\n  if(sum1<sum2)\n  {\n  \treturn lst1;\n  }\n  else\n  {\n  \treturn lst2;\n  }",
        "grade-57": {
            "execution": 0
        },
        "35": "std::vector<std::string> empty;\n\tint sum1 = 0, sum2 = 0;\n\tif (lst1.size() == 0 && lst2.size() == 0) {\n\t\treturn empty;\n\t}\n\tfor (int i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\treturn lst1;\n\t}\n\telse if (sum1 > sum2) {\n\t\treturn lst2;\n\t}\n\telse {\n\t\treturn lst1;\n\t}",
        "grade-35": {
            "execution": 1
        },
        "188": "int len1 = 0, len2 = 0;\n\tfor (int i = 0; i < lst1.size(); i++) {\n\t\tlen1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size(); i++) {\n\t\tlen2 += lst2[i].size();\n\t}\n\tif (len1 == len2) {\n\t\treturn lst1;\n\t}\n\tif (len1 < len2) {\n\t\treturn lst1;\n\t}\n\telse {\n\t\treturn lst2;\n\t}",
        "grade-188": {
            "execution": 1
        },
        "26": "if (lst1.size() == 0) return lst1;\n\tif (lst2.size() == 0) return lst2;\n\tlong int count1=0, count2=0;\n\tfor (int i = 0; i < lst1.size(); i++)\n\t{\n\t\tcount1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size(); i++)\n\t{\n\t\tcount2 += lst2[i].size();\n\t}\n\tif (count1 == count2) return lst1;\n\tif (count1 < count2) return lst1;\n\telse return lst2;",
        "grade-26": {
            "execution": 1
        },
        "173": "int lst1Len = 0;\n\tint lst2Len = 0;\n\tfor (auto i = lst1.begin(); i != lst1.end(); i++) {\n\t\tlst1Len += (*i).length();\n\t}\n\tfor (auto i = lst2.begin(); i != lst2.end(); i++) {\n\t\tlst2Len += (*i).length();\n\t}\n\treturn lst1Len < lst2Len ? lst1 : lst2;",
        "grade-173": {
            "execution": 0
        },
        "139": "int count1=0,count2=0;\n\tfor(int i=0;i<lst1.size();i++)\n\t{\n\t\tcount1=count1+lst1[i].size();\n\t}\n\tfor(int i=0;i<lst2.size();i++)\n\t{\n\t\tcount2=count2+lst2[i].size();\n\t}\n\tstd::vector<std::string> lst3;\n\tif(count1<count2)\n\t{\n\t\tlst3=lst1;\n\t}\n\telse if(count1>count2)\n\t{\n\t\tlst3=lst2;\n\t}\n\telse if(count1==count2)\n\t{\n\t\tlst3=lst1;\n\t}\n\treturn lst3;",
        "grade-139": {
            "execution": 1
        },
        "22": "int a = 0, b = 0;\n\tfor (int i = 0; i < lst1.size(); i++)\n\t\ta += lst1[i].size();\n\tfor (int i = 0; i < lst2.size(); i++)\n\t\tb += lst2[i].size();\n\tif (a == b)\n\t\treturn lst1;\n\telse if (a < b)\n\t\treturn lst1;\n\telse\n\t\treturn lst2;",
        "grade-22": {
            "execution": 1
        },
        "151": "int total1=0,total2=0;\n    for(int i=0;i<lst1.size();i++)\n    {\n        total1+=lst1[i].size();\n    }\n    for(int i=0;i<lst2.size();i++)\n    {\n        total2+=lst2[i].size();\n    }\n    if(total1>total2)\n    {\n        return lst2;\n    }\n    else if(total1<total2)\n    {\n        return lst1;\n    }\n    else\n    {\n        return lst1;\n    }",
        "grade-151": {
            "execution": 1
        },
        "108": "std::vector<std::string> result;\n\tint lst1Count = 0;\n\tint lst2Count = 0;\n\tfor (int i = 0; i < lst1.size(); i++) {\n\t\tlst1Count += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size(); i++) {\n\t\tlst2Count += lst2[i].size();\n\t}\n\tif (lst1Count == lst2Count) {\n\t\treturn lst1;\n\t}\n\telse if (lst1Count < lst2Count) {\n\t\treturn lst1;\n\t}\n\telse if (lst1Count > lst2Count) {\n\t\treturn lst2;\n\t}\n\treturn result;",
        "grade-108": {
            "execution": 1
        },
        "8": "int count1 = 0, count2 = 0;\n\tfor (int i = 0; i < lst1.size(); i++)\n\t\tcount1 += lst1[i].size();\n\tfor (int i = 0; i < lst2.size(); i++)\n\t\tcount2 += lst2[i].size();\n\tif (count1 == count2) return lst1;\n\telse if (count1 < count2) return lst1;\n\telse return lst2;",
        "grade-8": {
            "execution": 1
        },
        "7": "int l1_size{}, l2_size{};\n  for(int i{}; i < lst1.size(); ++i) {\n    l1_size += lst1[i].size();\n  }\n  for(int i{}; i < lst2.size(); ++i) {\n    l2_size += lst2[i].size();\n  }\n  return l1_size > l2_size ? lst2 : lst1;",
        "grade-7": {
            "execution": 1
        },
        "23": "std::vector<std::string> ans;\n    int s1 = 0, s2 = 0;\n    for(int i = 0; i < lst1.size(); i++) s1 += lst1[i].size();\n    for(int i = 0; i < lst2.size(); i++) s2 += lst2[i].size();\n    if(s1 == s2)\n        return lst1;\n    if(s1 < s2)\n        return lst1;\n    else\n        return lst2;",
        "grade-23": {
            "execution": 1
        },
        "55": "std::vector<std::string> temp, cmp;\n \tint sum1 = 0, sum2 = 0;\n \tfor(int i = 0; i < lst1.size(); i++)\n \t{\n \t\tsum1 += lst1[i].size();\n \t}\n \tfor(int i = 0; i < lst2.size(); i++)\n \t{\n \t\tsum2 += lst2[i].size();\n \t}\n \tif(sum1 == sum2)\n \t{\n \t\ttemp = lst1;\n \t}\n \telse if(sum1 < sum2)\n \t{\n \t\ttemp = lst1;\n \t}\n \telse if(sum1 > sum2)\n \t{\n \t\ttemp = lst2;\n \t}\n \treturn temp;",
        "grade-55": {
            "execution": 1
        },
        "59": "std::vector<std::string> matchLst;\n\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (int i = 0; i < lst1.size(); i++) {\n\t\tsum1 += lst1[i].size();\n\t}\n\tfor (int i = 0; i < lst2.size(); i++) {\n\t\tsum2 += lst2[i].size();\n\t}\n\tif (sum1 < sum2) {\n\t\tmatchLst = lst1;\n\t}\n\telse if (sum1 > sum2) {\n\t\tmatchLst = lst2;\n\t}\n\telse {\n\t\tmatchLst = lst1;\n\t}\n\treturn matchLst;",
        "grade-59": {
            "execution": 1
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3)) ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3, -1), (-5, 5)) ==> \"YES\"\nstd::string intersection(std::tuple<long, long> interval1, std::tuple<long, long> interval2) {\n",
        "snippet": [
            "    int inter1,inter2,l,i;\n    inter1=max(interval1[0],interval2[0]);\n    inter2=min(interval1[1],interval2[1]);\n    l=inter2-inter1;\n    if (l<2) return \"NO\";\n    for (i=2;i*i<=l;i++)\n        if (l%i==0) return \"NO\";\n    return \"YES\";\n}\n"
        ],
        "simplified": "You are given two intervals, where each interval is a pair of integers. For example, interval = (start, end) = (1, 2). The given intervals are closed which means that the interval (start, end) includes both start and end. For each given interval, it is assumed that its start is less or equal its end. Your task is to determine whether the length of intersection of these two intervals is a prime number. Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3) which its length is 1, which not a prime number. If the length of the intersection is a prime number, return \"YES\", otherwise, return \"NO\". If the two intervals don't intersect, return \"NO\".",
        "task_id": "127",
        "163": "std::set<long> interval1_set;\n\tstd::set<long> interval2_set;\n\tint count_prime = 0;\n\tint counter_prime = 0;\n\tstd::vector<long> prime_vec;\n\tbool flag = false;\n\tfor (long i = std::get<0>(interval1); i <= std::get<1>(interval1); i++) {\n\t\tinterval1_set.insert(i);\n\t}\n\tfor (long i = std::get<0>(interval2); i <= std::get<1>(interval2); i++) {\n\t\tinterval2_set.insert(i);\n\t}\n\tstd::set<long>::iterator it;\n\tfor (it = interval1_set.begin(); it != interval1_set.end(); it++) {\n\t\tif (interval2_set.find(*it) != interval2_set.end()) {\n\t\t\tflag = true;\n\t\t\tprime_vec.push_back(*it);\n\t\t}\n\t}\n\tif (flag == false)\n\t\treturn \"NO\";\n\tfor (long i = 0; i < prime_vec.size(); i++) {\n\t\tcounter_prime = 0;\n\t\tfor (long j = 1; j <= prime_vec[i]; j++) {\n\t\t\tif (prime_vec[i] % j == 0)\n\t\t\t\tcounter_prime++;\n\t\t}\n\t\tif (counter_prime == 2)\n\t\t\tcount_prime++;\n\t}\n\tif (count_prime == 0)\n\t\treturn \"NO\";\n\treturn \"YES\";",
        "grade-163": {
            "execution": 0
        },
        "28": "long x1 = std::get<0>(interval1);\n    long y1 = std::get<1>(interval1);\n    long x2 = std::get<0>(interval2);\n    long y2 = std::get<1>(interval2);\n    if (x1 > y1 || x2 > y2) {\n        return \"NO\";\n    }\n    // overlap intervals\n    if (x1 <= x2 && x2 <= y1) {\n        if (y1 <= y2) {\n            return (y1 - x2 + 1) > 1 && (y1 - x2 + 1) < 4 ? \"YES\" : \"NO\";\n        } else {\n            return (y2 - x2 + 1) > 1 && (y2 - x2 + 1) < 4 ? \"YES\" : \"NO\";\n        }\n    }\n    // overlap intervals\n    if (x2 <= x1 && x1 <= y2) {\n        if (y2 <= y1) {\n            return (y2 - x1 + 1) > 1 && (y2 - x1 + 1) < 4 ? \"YES\" : \"NO\";\n        } else {\n            return (y1 - x1 + 1) > 1 && (y1 - x1 + 1) < 4 ? \"YES\" : \"NO\";\n        }\n    }\n    return \"NO\";",
        "grade-28": {
            "execution": 0
        },
        "6": "long start = std::max(std::get<0>(interval1), std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n    long len = end - start;\n    if (len < 0) {\n        return \"NO\";\n    }\n    if (len <= 2) {\n        return \"NO\";\n    }\n    for (long i = 2; i < len; i++) {\n        if (len % i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";",
        "grade-6": {
            "execution": 0
        },
        "189": "// Your code here!\n    // todo\n    return \"NO\";",
        "grade-189": {
            "execution": 0
        },
        "70": "auto n1 = std::get<0>(interval1);\n    auto n2 = std::get<1>(interval1);\n    auto m1 = std::get<0>(interval2);\n    auto m2 = std::get<1>(interval2);\n    auto bigger = (n1 > m1) ? n1 : m1;\n    auto smaller = (n2 < m2) ? n2 : m2;\n    if (bigger <= smaller) {\n        auto common = std::abs(bigger - smaller) + 1;\n        if (common <= 1) {\n            return \"NO\";\n        }\n        for (auto i = 2; i < common; ++i) {\n            if (common % i == 0) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";\n    }\n    return \"NO\";",
        "grade-70": {
            "execution": 0
        },
        "62": "long lower = std::max(std::get<0>(interval1), std::get<0>(interval2));\n  long upper = std::min(std::get<1>(interval1), std::get<1>(interval2));\n  if (lower > upper) return \"NO\";\n  int length = std::abs(upper - lower) + 1;\n  return std::string(\"YES\");",
        "grade-62": {
            "execution": 0
        },
        "57": "int start = max(get<0>(interval1), get<0>(interval2));\n  int end = min(get<1>(interval1), get<1>(interval2));\n  if (start <= end) {\n    for (int i = 2; i < end - start + 1; i++) {\n      if ((end - start + 1) % i == 0) return \"NO\";\n    }\n    return \"YES\";\n  }\n  return \"NO\";",
        "grade-57": {
            "execution": 0
        },
        "35": "//x,y,z\n    //x,y,z\n    //x,y\n    //x,y\n    std::vector<long> points{std::get<0>(interval1),std::get<1>(interval1),std::get<0>(interval2),std::get<1>(interval2)};\n    std::sort(points.begin(),points.end());\n    // x,x,y,z\n\n    long first{0},second{0};\n    //intersects\n    if(points[1] < points[2]){\n        first = points[1];\n        second = points[2];\n    }\n    else if(points[1] == points[2]){\n        return \"YES\";\n    }\n    //not intersects\n    else{\n        return \"NO\";\n    }\n    long diff = second - first;\n    if(diff == 0){\n        return \"YES\";\n    }\n    bool isPrime = true;\n    for(long i = 2; i < sqrt(diff) + 1; ++i){\n        if(diff % i == 0){\n            isPrime = false;\n            break;\n        }\n    }\n    if(isPrime){\n        return \"YES\";\n    }\n    return \"NO\";",
        "grade-35": {
            "execution": 0
        },
        "188": "long start, end;\n    std::tie(start, end) = interval1;\n    if (start > end)\n        std::swap(start, end);\n    long start2, end2;\n    std::tie(start2, end2) = interval2;\n    if (start2 > end2)\n        std::swap(start2, end2);\n    if (end < start2 || end2 < start)\n        return \"NO\";\n    long intsectStart = std::max(start, start2);\n    long intsectEnd = std::min(end, end2);\n    long length = intsectEnd - intsectStart + 1;\n    long sqrtLength = sqrt(length);\n    for (long i = 2; i <= sqrtLength; i++) {\n        if (length % i == 0)\n            return \"NO\";\n    }\n    return \"YES\";",
        "grade-188": {
            "execution": 0
        },
        "26": "int s1 = std::get<0>(interval1);\n\tint e1 = std::get<1>(interval1);\n\tint s2 = std::get<0>(interval2);\n\tint e2 = std::get<1>(interval2);\n\t// let's calculate the length of the intersection between the two intervals\n\tint length = 0;\n\tif (s1 <= s2 && e1 >= s2) {\n\t\t// intersection starts at s2\n\t\tif (e1 <= e2) {\n\t\t\t// intersection ends at e1\n\t\t\tlength = e1 - s2 + 1;\n\t\t}\n\t\telse {\n\t\t\t// intersection ends at e2\n\t\t\tlength = e2 - s2 + 1;\n\t\t}\n\t}\n\telse if (s2 <= s1 && e2 >= s1) {\n\t\t// intersection starts at s1\n\t\tif (e2 <= e1) {\n\t\t\t// intersection ends at e2\n\t\t\tlength = e2 - s1 + 1;\n\t\t}\n\t\telse {\n\t\t\t// intersection ends at e1\n\t\t\tlength = e1 - s1 + 1;\n\t\t}\n\t}\n\telse {\n\t\t// no intersection\n\t\treturn \"NO\";\n\t}\n\t// now let's check if the length is a prime number\n\tif (length < 2) return \"NO\";\n\tfor (int i = 2; i < length; i++) {\n\t\tif (length % i == 0) return \"NO\";\n\t}\n\treturn \"YES\";",
        "grade-26": {
            "execution": 0
        },
        "173": "//cout << get<0>(interval1) << \" \" << get<1>(interval1) << endl;\n\t//cout << get<0>(interval2) << \" \" << get<1>(interval2) << endl;\n\tif (get<0>(interval1) < get<0>(interval2)) {\n\t\tif (get<1>(interval1) < get<0>(interval2))\n\t\t\treturn \"NO\";\n\t\tif (get<1>(interval1) < get<1>(interval2)) {\n\t\t\tint l1 = get<1>(interval1) - get<0>(interval2) + 1;\n\t\t\tif (l1 == 1)\n\t\t\t\treturn \"NO\";\n\t\t\tif (l1 == 2)\n\t\t\t\treturn \"YES\";\n\t\t\tif (l1 % 2 == 0)\n\t\t\t\treturn \"NO\";\n\t\t\tfor (int i = 3; i <= sqrt(l1); i++) {\n\t\t\t\tif (l1 % i == 0)\n\t\t\t\t\treturn \"NO\";\n\t\t\t}\n\t\t\treturn \"YES\";\n\t\t}\n\t\tif (get<1>(interval1) == get<1>(interval2)) {\n\t\t\treturn \"NO\";\n\t\t}\n\t\tint l1 = get<1>(interval2) - get<0>(interval2) + 1;\n\t\tif (l1 == 1)\n\t\t\treturn \"NO\";\n\t\tif (l1 == 2)\n\t\t\treturn \"YES\";\n\t\tif (l1 % 2 == 0)\n\t\t\treturn \"NO\";\n\t\tfor (int i = 3; i <= sqrt(l1); i++) {\n\t\t\tif (l1 % i == 0)\n\t\t\t\treturn \"NO\";\n\t\t}\n\t\treturn \"YES\";\n\t}\n\tif (get<0>(interval1) == get<0>(interval2)) {\n\t\tif (get<1>(interval1) < get<1>(interval2)) {",
        "grade-173": {
            "execution": 0
        },
        "139": "long min = std::get<0>(interval1) > std::get<0>(interval2) ? std::get<0>(interval1) : std::get<0>(interval2);\n    long max = std::get<1>(interval1) < std::get<1>(interval2) ? std::get<1>(interval1) : std::get<1>(interval2);\n    std::string ret = \"NO\";\n    if (min <= max) {\n        if (max - min == 1 || max - min == 2) {\n            ret = \"YES\";\n        }\n    }\n    return ret;",
        "grade-139": {
            "execution": 0
        },
        "22": "bool is_prime = true;\n    long start = std::max(std::get<0>(interval1), std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n    if (start > end) {\n        return \"NO\";\n    }\n    long diff = end - start;\n    if (diff == 0) {\n        return \"NO\";\n    }\n    for (long i = 2; i <= sqrt(diff); i++) {\n        if (diff % i == 0) {\n            is_prime = false;\n            break;\n        }\n    }\n    if (is_prime) {\n        return \"YES\";\n    }\n    return \"NO\";",
        "grade-22": {
            "execution": 0
        },
        "151": "// TODO: Implement solution\n\tauto start1 = std::get<0>(interval1);\n\tauto end1 = std::get<1>(interval1);\n\tauto start2 = std::get<0>(interval2);\n\tauto end2 = std::get<1>(interval2);\n\tlong new_start = std::max(start1, start2);\n\tlong new_end = std::min(end1, end2);\n\tstd::cout << new_start << \" \" << new_end << std::endl;\n\tif (new_start > new_end)\n\t\treturn \"NO\";\n\tlong length = new_end - new_start + 1;\n\tfor (long i = 2; i < length; i++)\n\t\tif (length % i == 0)\n\t\t\treturn \"NO\";\n\treturn \"YES\";",
        "grade-151": {
            "execution": 0
        },
        "108": "long a = std::get<0>(interval1);\n    long b = std::get<1>(interval1);\n    long c = std::get<0>(interval2);\n    long d = std::get<1>(interval2);\n    long l = 0;\n    if(a > b)\n        std::swap(a, b);\n    if(c > d)\n        std::swap(c, d);\n    if(a > c)\n        std::swap(a, c);\n    if(b > d)\n        std::swap(b, d);\n    if(a > b)\n        std::swap(a, b);\n    if(c > d)\n        std::swap(c, d);\n    if(a > c)\n        std::swap(a, c);\n    if(b > d)\n        std::swap(b, d);\n    if(a > b)\n        std::swap(a, b);\n    if(c > d)\n        std::swap(c, d);\n    if(a > c)\n        std::swap(a, c);\n    if(b > d)\n        std::swap(b, d);\n    if(a > b)\n        std::swap(a, b);\n    if(c > d)\n        std::swap(c, d);\n    if(a > c)\n        std::swap(a, c);\n    if(b > d)\n        std::swap(b, d);\n    if(a > b)\n        std::swap(a, b);\n    if(c > d)\n        std::swap(c, d);\n    if(a > c)\n        std::swap(a, c);\n    if(b > d)\n        std::swap(b, d);\n    if(a > b)\n        std::swap(a, b);\n    if(c > d)\n        std::swap(c, d);\n    if(a > c)\n        std::swap(a, c);\n    if(b > d)",
        "grade-108": {
            "execution": 0
        },
        "8": "// your code here",
        "grade-8": {
            "execution": 0
        },
        "7": "long start = std::max(std::get<0>(interval1), std::get<0>(interval2));\n    long end = std::min(std::get<1>(interval1), std::get<1>(interval2));\n    if (start > end) return \"NO\";\n    std::vector<bool> is_prime(end - start + 1, true);\n    for (int i = 2; i * i <= end; ++i) {\n        for (int j = start / i; j * i <= end; ++j) {\n            if (j * i >= start) {\n                is_prime[j * i - start] = false;\n            }\n        }\n    }\n    for (int i = 0; i < is_prime.size(); ++i) {\n        if (is_prime[i]) return \"YES\";\n    }\n    return \"NO\";",
        "grade-7": {
            "execution": 0
        },
        "23": "std::tuple<long, long> x = interval1;\n  std::tuple<long, long> y = interval2;\n  std::tuple<long, long> inx, iny;\n  // Make sure x is the smaller one\n  if (std::get<0>(x) > std::get<0>(y)) {\n    std::tuple<long, long> tmp = x;\n    x = y;\n    y = tmp;\n  }\n  long x_size = std::get<1>(x) - std::get<0>(x) + 1;\n  long y_size = std::get<1>(y) - std::get<0>(y) + 1;\n  // If the two intervals don't intersect, return \"NO\".\n  if (std::get<1>(x) < std::get<0>(y)) {\n    return \"NO\";\n  }\n  if (std::get<0>(x) >= std::get<0>(y)) {\n    inx = y;\n  } else {\n    inx = std::make_tuple(std::get<0>(x), std::get<1>(y));\n  }\n  if (std::get<1>(x) >= std::get<1>(y)) {\n    iny = x;\n  } else {\n    iny = std::make_tuple(std::get<0>(y), std::get<1>(x));\n  }\n  long inx_size = std::get<1>(inx) - std::get<0>(inx) + 1;\n  long iny_size = std::get<1>(iny) - std::get<0>(iny) + 1;\n  if (inx_size == iny_size) {\n    // Do something special\n    return \"NO\";\n  }\n  if (x_size == inx_size || y_size == iny_size) {\n    return \"NO\";\n  }\n  if (inx_size > iny_size) {\n    return \"YES\";\n  }\n  // Calculate the size of the intersection\n  long int_size = std::get<1>(inx) - std::get<0",
        "grade-23": {
            "execution": 0
        },
        "55": "long start1, start2, end1, end2;\n    std::tie(start1, end1) = interval1;\n    std::tie(start2, end2) = interval2;\n    if(start1 > end1) {\n        long temp = start1;\n        start1 = end1;\n        end1 = temp;\n    }\n    if(start2 > end2) {\n        long temp = start2;\n        start2 = end2;\n        end2 = temp;\n    }\n    if(start1 > end2 || start2 > end1) {\n        return \"NO\";\n    }\n    if(start1 <= start2 && end1 >= end2) {\n        if(start2 == end2) {\n            return \"YES\";\n        }\n        long intervalLength = end2 - start2;\n        if(isPrime(intervalLength)) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n    if(start2 <= start1 && end2 >= end1) {\n        if(start1 == end1) {\n            return \"YES\";\n        }\n        long intervalLength = end1 - start1;\n        if(isPrime(intervalLength)) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n    if(start1 <= start2 && end1 <= end2) {\n        if(start1 == end1) {\n            return \"YES\";\n        }\n        long intervalLength = end1 - start2;\n        if(isPrime(intervalLength)) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n    if(start2 <= start1 && end2 <= end1) {\n        if(start2 == end2) {\n            return \"YES\";\n        }\n        long intervalLength = end2 - start1;\n        if(isPrime(intervalLength)) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n    return \"NO\";",
        "grade-55": {
            "execution": 0
        },
        "59": "bool isIntersect = false;\n\tlong start1 = std::get<0>(interval1);\n\tlong end1 = std::get<1>(interval1);\n\tlong start2 = std::get<0>(interval2);\n\tlong end2 = std::get<1>(interval2);\n\tif (end1 >= start2 && end2 >= start1) {\n\t\tisIntersect = true;\n\t}\n\tlong len = 0;\n\tif (isIntersect) {\n\t\tif (start1 >= start2 && end1 <= end2) {\n\t\t\tlen = end1 - start1 + 1;\n\t\t}\n\t\telse if (start1 <= start2 && end1 >= end2) {\n\t\t\tlen = end2 - start2 + 1;\n\t\t}\n\t\telse if (start1 >= start2 && end1 >= end2) {\n\t\t\tlen = end2 - start1 + 1;\n\t\t}\n\t\telse if (start1 <= start2 && end1 <= end2) {\n\t\t\tlen = end1 - start2 + 1;\n\t\t}\n\t}\n\tif (len == 0) {\n\t\treturn \"NO\";\n\t}\n\telse {\n\t\tfor (long j = 2; j < len; j++) {\n\t\t\tif (len % j == 0) {\n\t\t\t\treturn \"NO\";\n\t\t\t}\n\t\t}\n\t\treturn \"YES\";\n\t}",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nlong fib4(long n) {\n",
        "snippet": [
            "    int f[100];\n    f[0]=0;\n    f[1]=0;\n    f[2]=2;\n    f[3]=0;\n    for (int i=4;i<=n;i++)\n    {\n        f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];\n    }\n    return f[n];\n}\n"
        ],
        "simplified": "The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). Please write a function to efficiently compute the n-th element of the fib4 number sequence. Do not use recursion.",
        "task_id": "46",
        "164": "if (n <= 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long num1 = 0;\n    long num2 = 0;\n    long num3 = 2;\n    long num4 = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp = num1 + num2 + num3 + num4;\n        num1 = num2;\n        num2 = num3;\n        num3 = num4;\n        num4 = temp;\n    }\n    return num1 + num2 + num3 + num4;",
        "grade-164": {
            "execution": 0
        },
        "28": "if (n <= 0) return 0;\n\tlong a = 0, b = 0, c = 2, d = 0, f = 0;\n\tif (n == 1) return 0;\n\tif (n == 2) return 2;\n\tif (n == 3) return 0;\n\tif (n == 4) return 2;\n\tfor (int i = 0; i < n - 4; i++) {\n\t\tf = a + b + c + d;\n\t\ta = b;\n\t\tb = c;\n\t\tc = d;\n\t\td = f;\n\t}\n\treturn f;",
        "grade-28": {
            "execution": 0
        },
        "6": "long arr[n+1];\n    arr[0] = 0;\n    arr[1] = 0;\n    arr[2] = 2;\n    arr[3] = 0;\n    for(int i = 4; i <= n; i++) {\n        arr[i] = arr[i-1] + arr[i-2] + arr[i-3] + arr[i-4];\n    }\n    return arr[n];",
        "grade-6": {
            "execution": 1
        },
        "190": "assert(n >= 0);\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    vector<long> res;\n    res.push_back(0);\n    res.push_back(0);\n    res.push_back(2);\n    res.push_back(0);\n    for (int i = 4; i <= n; i++) {\n        res.push_back(res[i-1] + res[i-2] + res[i-3] + res[i-4]);\n    }\n    return res[n];",
        "grade-190": {
            "execution": 0
        },
        "71": "if (n==0) return 0;\n    if (n==1) return 0;\n    if (n==2) return 2;\n    if (n==3) return 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    for (int i=4; i<=n; i++) {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return d;",
        "grade-71": {
            "execution": 0
        },
        "62": "// A better way to get the result is to use Array\n// Array is faster than LinkedList\n    long[] fib4 = new long[4];\n    fib4[0] = 0;\n    fib4[1] = 0;\n    fib4[2] = 2;\n    fib4[3] = 0;\n    if (n < 4) {\n        return fib4[n];\n    }\n    int i = 3;\n    while (i < n) {\n        fib4[0] = fib4[1];\n        fib4[1] = fib4[2];\n        fib4[2] = fib4[3];\n        fib4[3] = fib4[0] + fib4[1] + fib4[2];\n        i++;\n    }\n    return fib4[3];",
        "grade-62": {
            "execution": 0
        },
        "57": "if (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n    int fib4a = 0;\n    int fib4b = 0;\n    int fib4c = 2;\n    int fib4d = 0;\n    for (int i = 4; i <= n; i++) {\n        int temp = fib4a + fib4b + fib4c + fib4d;\n        fib4a = fib4b;\n        fib4b = fib4c;\n        fib4c = fib4d;\n        fib4d = temp;\n    }\n    return fib4a + fib4b + fib4c + fib4d;",
        "grade-57": {
            "execution": 0
        },
        "35": "if (n==0) return 0;\n\tif (n==1) return 0;\n\tif (n==2) return 2;\n\tif (n==3) return 0;\n\tlong a=0,b=0,c=2,d=0,e;\n\tfor (int i=4;i<=n;i++) {\n\t\te=a+b+c+d;\n\t\ta=b;\n\t\tb=c;\n\t\tc=d;\n\t\td=e;\n\t}\n\treturn e;",
        "grade-35": {
            "execution": 1
        },
        "189": "// your code here\n  long fib1 = 0;\n  long fib2 = 0;\n  long fib3 = 2;\n  long fib4 = 0;\n  long fib5 = 0;\n  if (n == 0) {\n    return fib1;\n  }\n  if (n == 1) {\n    return fib2;\n  }\n  if (n == 2) {\n    return fib3;\n  }\n  if (n == 3) {\n    return fib4;\n  }\n  for (int i = 4; i <= n; i++) {\n    fib5 = fib1 + fib2 + fib3 + fib4;\n    fib1 = fib2;\n    fib2 = fib3;\n    fib3 = fib4;\n    fib4 = fib5;\n  }\n  return fib5;",
        "grade-189": {
            "execution": 1
        },
        "26": "long f0 = 0;\n  long f1 = 0;\n  long f2 = 2;\n  long f3 = 0;\n  long f = 0;\n  if (n < 0) {\n    return -1;\n  }\n  if (n < 3) {\n    return 0;\n  }\n  if (n == 3) {\n    return 2;\n  }\n  while (n >= 3) {\n    f = f3 + f2 + f1 + f0;\n    f0 = f1;\n    f1 = f2;\n    f2 = f3;\n    f3 = f;\n    n--;\n  }\n  return f;",
        "grade-26": {
            "execution": 0
        },
        "174": "if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 2;\n    }\n    if (n == 3) {\n        return 0;\n    }\n    long k = 4;\n    long fib4_k_minus_1 = 0;\n    long fib4_k_minus_2 = 0;\n    long fib4_k_minus_3 = 2;\n    long fib4_k_minus_4 = 0;\n    long result = 0;\n    while (k <= n) {\n        result = fib4_k_minus_1 + fib4_k_minus_2 + fib4_k_minus_3 + fib4_k_minus_4;\n        fib4_k_minus_4 = fib4_k_minus_3;\n        fib4_k_minus_3 = fib4_k_minus_2;\n        fib4_k_minus_2 = fib4_k_minus_1;\n        fib4_k_minus_1 = result;\n        k++;\n    }\n    return result;",
        "grade-174": {
            "execution": 0
        },
        "140": "long i;\n  long f4[4] = {0, 0, 2, 0};\n  for (i = 4; i <= n; i++) {\n    f4[i % 4] = f4[(i - 1) % 4] + f4[(i - 2) % 4] + f4[(i - 3) % 4] + f4[(i - 4) % 4];\n  }\n  return f4[n % 4];",
        "grade-140": {
            "execution": 1
        },
        "22": "if (n <= 0) return 0;\n\tif (n == 1) return 0;\n\tif (n == 2) return 2;\n\tif (n == 3) return 0;\n\tlong a[4] = {0, 0, 2, 0};\n\tlong temp[4] = {0, 0, 0, 0};\n\tfor (int i = 0; i < n - 3; i++) {\n\t\ttemp[0] = a[0] + a[1] + a[2] + a[3];\n\t\ttemp[1] = a[0];\n\t\ttemp[2] = a[1];\n\t\ttemp[3] = a[2];\n\t\ta[0] = temp[0];\n\t\ta[1] = temp[1];\n\t\ta[2] = temp[2];\n\t\ta[3] = temp[3];\n\t}\n\treturn a[0];",
        "grade-22": {
            "execution": 0
        },
        "152": "if (n == 0) {\n        return 0;\n    } else if (n == 1) {\n        return 0;\n    } else if (n == 2) {\n        return 2;\n    } else if (n == 3) {\n        return 0;\n    }\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n    for (int i = 4; i <= n; i++) {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return d;",
        "grade-152": {
            "execution": 0
        },
        "109": "long f[n+1];\n    f[0] = 0;\n    f[1] = 0;\n    f[2] = 2;\n    f[3] = 0;\n    for (int i = 4; i <= n; i++)\n        f[i] = f[i-1] + f[i-2] + f[i-3] + f[i-4];\n    return f[n];",
        "grade-109": {
            "execution": 1
        },
        "8": "assert(n >= 0);\n    // TODO: your code here\n    long fib[n+1]; \n    fib[0] = 0; \n    fib[1] = 0; \n    fib[2] = 2; \n    fib[3] = 0;\n    for (int i = 4; i <= n; i++) {\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n    }\n    return fib[n];",
        "grade-8": {
            "execution": 1
        },
        "7": "if (n <= 3) return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i = 4; i <= n; i++) {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return d;",
        "grade-7": {
            "execution": 0
        },
        "23": "long first = 0;\n\tlong second = 0;\n\tlong third = 2;\n\tlong fourth = 0;\n\tlong fifth = 0;\n\tlong sixth = 0;\n\tlong seventh = 0;\n\tlong answer = 0;\n\tif (n <= 4) {\n\t\tif (n == 0) {\n\t\t\treturn 0;\n\t\t}\n\t\telse if (n == 1) {\n\t\t\treturn 0;\n\t\t}\n\t\telse if (n == 2) {\n\t\t\treturn 2;\n\t\t}\n\t\telse if (n == 3) {\n\t\t\treturn 0;\n\t\t}\n\t\telse if (n == 4) {\n\t\t\treturn 4;\n\t\t}\n\t}\n\telse {\n\t\tfor (int i = 5; i <= n; i++) {\n\t\t\tanswer = first + second + third + fourth;\n\t\t\tseventh = sixth;\n\t\t\tsixth = fifth;\n\t\t\tfifth = fourth;\n\t\t\tfourth = third;\n\t\t\tthird = second;\n\t\t\tsecond = first;\n\t\t\tfirst = answer;\n\t\t}\n\t}\n\treturn answer;",
        "grade-23": {
            "execution": 0
        },
        "55": "long a = 0, b = 0, c = 2, d = 0, temp = 0;\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn 0;\n\tif (n == 2)\n\t\treturn 2;\n\tif (n == 3)\n\t\treturn 0;\n\tn -= 3;\n\twhile (n--) {\n\t\ttemp = d;\n\t\td = a + b + c + d;\n\t\ta = b;\n\t\tb = c;\n\t\tc = temp;\n\t}\n\treturn d;",
        "grade-55": {
            "execution": 1
        },
        "59": "if (n == 0) {\n\t\treturn 0;\n\t}\n\tif (n == 1) {\n\t\treturn 0;\n\t}\n\tif (n == 2) {\n\t\treturn 2;\n\t}\n\tif (n == 3) {\n\t\treturn 0;\n\t}\n\tif (n > 3) {\n\t\tlong a = 0;\n\t\tlong b = 0;\n\t\tlong c = 2;\n\t\tlong d = 0;\n\t\tlong temp;\n\t\tfor (int i = 4; i <= n; i++) {\n\t\t\ttemp = a + b + c + d;\n\t\t\ta = b;\n\t\t\tb = c;\n\t\t\tc = d;\n\t\t\td = temp;\n\t\t}\n\t\treturn temp;\n\t}\n\treturn -1;",
        "grade-59": {
            "execution": 1
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// count_upper('aBCdEf') returns 1\n// count_upper('abcdefg') returns 0\n// count_upper('dBBE') returns 0\nlong count_upper(std::string s) {\n",
        "snippet": [
            "    string uvowel=\"AEIOU\";\n    int count=0;\n    for (int i=0;i*2<s.length();i++)\n    if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())\n        count+=1;\n    return count;\n}\n"
        ],
        "simplified": "Given a string s, count the number of uppercase vowels in even indices.",
        "task_id": "98",
        "171": "long count = 0;\n    for(int i = 1; i < s.length(); i+=2){\n        if((s[i] == 'A') || (s[i] == 'E') || (s[i] == 'I') || (s[i] == 'O') || (s[i] == 'U'))\n            count++;\n    }\n    return count;",
        "grade-171": {
            "execution": 0
        },
        "28": "long cnt = 0;\n\tstd::string vowels = \"AEIOU\";\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (vowels.find(s[i]) != std::string::npos) {\n\t\t\tif (i % 2 == 0) {\n\t\t\t\tcnt++;\n\t\t\t}\n\t\t}\n\t}\n\treturn cnt;",
        "grade-28": {
            "execution": 1
        },
        "6": "int vowel=0;\n    for(int i=0; i< s.length(); i++){\n        if(s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'){\n            if(i%2==0){\n                vowel++;\n            }\n        }\n    }\n    return vowel;",
        "grade-6": {
            "execution": 1
        },
        "198": "// Write your code here\n  long count = 0;\n  for(long i = 0; i < s.length(); i += 2) {\n    if(s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') {\n      count++;\n    }\n  }\n  return count;",
        "grade-198": {
            "execution": 1
        },
        "70": "int count = 0;\n    for(int i = 0; i < s.length(); i++) {\n        char c = s[i];\n        if(i % 2 == 0 && c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            count++;\n        }\n    }\n    return count;",
        "grade-70": {
            "execution": 0
        },
        "62": "int counter = 0;\n    for(int i = 0; i < s.length(); i++){\n        if(s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'){\n            if(i % 2 == 0){\n                counter++;\n            }\n        }\n    }\n    return counter;",
        "grade-62": {
            "execution": 1
        },
        "57": "long count=0;\n    for(long i=0;i<s.length();i+=2){\n        if(isupper(s[i]))\n            count++;\n    }\n    return count;",
        "grade-57": {
            "execution": 0
        },
        "35": "long upperCount = 0;\n    for(long i = 0; i < s.length(); i++) {\n        if(s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') {\n            if(i % 2 == 0)\n                upperCount++;\n        }\n    }\n    return upperCount;",
        "grade-35": {
            "execution": 1
        },
        "197": "int count = 0;\n  for (int i = 0; i < s.length(); i++) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') {\n      if (i % 2 == 0) {\n        count++;\n      }\n    }\n  }\n  return count;",
        "grade-197": {
            "execution": 1
        },
        "26": "int x=0;\n    for(int i=0;i<s.length();i+=2){\n        if(isupper(s[i])){\n            x++;\n        }\n    }\n    return x;",
        "grade-26": {
            "execution": 0
        },
        "181": "int n = s.length();\n  char vowels[5] = {'A', 'E', 'I', 'O', 'U'};\n  int numberOfUpperCaseVowels = 0;\n  for (int i = 0; i < n; i += 2) {\n    for (int j = 0; j < 5; j++) {\n      if (s[i] == vowels[j]) {\n        numberOfUpperCaseVowels++;\n      }\n    }\n  }\n  return numberOfUpperCaseVowels;",
        "grade-181": {
            "execution": 1
        },
        "147": "// Your code here\n    long count = 0;\n    for(auto it = s.begin(); it != s.end(); it+=2){\n        if(isupper(*it)){\n            count++;\n        }\n    }\n    return count;",
        "grade-147": {
            "execution": 0
        },
        "22": "long num_upper = 0;\n    for (long i = 0; i < s.size(); i+=2) {\n        if (isupper(s[i])) {\n            num_upper++;\n        }\n    }\n    return num_upper;",
        "grade-22": {
            "execution": 0
        },
        "159": "// Write your solution here\n  long count = 0;\n  for(int i = 1; i < s.length(); i += 2){\n    if(s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'){\n      count++;\n    }\n  }\n  return count;",
        "grade-159": {
            "execution": 0
        },
        "111": "int count = 0;\n  for (int i = 0; i < s.length(); i++) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') {\n      if (i % 2 == 0) {\n        count += 1;\n      }\n    }\n  }\n  return count;",
        "grade-111": {
            "execution": 1
        },
        "8": "long int upper_count = 0;\n    for(int i = 0; i < s.length(); i+=2){\n        if(s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'){\n            upper_count++;\n        }\n    }\n    return upper_count;",
        "grade-8": {
            "execution": 1
        },
        "7": "int count = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if(i % 2 == 0 && s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') {\n            count += 1;\n        }\n    }\n    return count;",
        "grade-7": {
            "execution": 0
        },
        "23": "long count=0;\n    int len=s.length();\n    for(int i=0;i<len;i+=2)\n    {\n        if(s[i]=='A'||s[i]=='E'||s[i]=='I'||s[i]=='O'||s[i]=='U')\n        {\n            count++;\n        }\n    }\n    return count;",
        "grade-23": {
            "execution": 1
        },
        "55": "// your code here\n    int count = 0;\n    int j = 0;\n    std::string vowels = \"AEIOU\";\n    while(s[j] != '\\0'){\n        for(int i = 0; i < 5; i++){\n            if(s[j] == vowels[i]){\n                count++;\n            }\n        }\n        j += 2;\n    }\n    return count;",
        "grade-55": {
            "execution": 1
        },
        "59": "long cnt=0;\n    for(int i=0;i<s.length();i++)\n    {\n        if(i%2==0 && s[i]=='A' || s[i]=='E' || s[i]=='I' || s[i]=='O' || s[i]=='U')\n        {\n            cnt++;\n        }\n    }\n    return cnt;",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the list of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n// ['()', '(())', '(()())']\nstd::vector<std::string> separate_paren_groups(std::string paren_string) {\n",
        "snippet": [
            "    vector<string> all_parens;\n    string current_paren;\n    int level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_parens.push_back(current_paren);\n                current_paren=\"\";\n            }\n        }\n    }\n    return all_parens;\n}\n"
        ],
        "simplified": "Input to this function is a string containing multiple groups of nested parentheses. Your goal is to separate those group into separate strings and return the list of those. Separate groups are balanced (each open brace is properly closed) and not nested within each other Ignore any spaces in the input string.",
        "task_id": "1",
        "163": "std::vector<std::string> result;\n    int nest_counter = 0;\n    int start_idx = 0;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            nest_counter++;\n        } else if (paren_string[i] == ')') {\n            nest_counter--;\n        }\n        if (nest_counter == 0) {\n            result.push_back(paren_string.substr(start_idx, i - start_idx + 1));\n            start_idx = i + 1;\n        }\n    }\n    return result;",
        "grade-163": {
            "execution": 0
        },
        "28": "std::vector<std::string> result;\n    std::string final_result;\n    std::stack<char> temp_stack;\n    int i = 0;\n    while(i < paren_string.length()) {\n        if(paren_string[i] == '(') {\n            temp_stack.push(paren_string[i]);\n        }\n        else if(paren_string[i] == ')') {\n            temp_stack.pop();\n            final_result += paren_string[i];\n            if(temp_stack.empty()) {\n                result.push_back(final_result);\n                final_result.clear();\n            }\n        }\n        else {\n            if(!temp_stack.empty()) {\n                final_result += paren_string[i];\n            }\n        }\n        i++;\n    }\n    return result;",
        "grade-28": {
            "execution": 0
        },
        "6": "if (paren_string.empty()) {\n        return {};\n    }\n    int st = 0;\n    std::vector<std::string> result;\n    std::stack<char> stk;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            stk.push(paren_string[i]);\n        } else if (paren_string[i] == ')') {\n            stk.pop();\n        }\n        if (stk.empty()) {\n            result.push_back(paren_string.substr(st, i - st + 1));\n            st = i + 1;\n        }\n    }\n    return result;",
        "grade-6": {
            "execution": 0
        },
        "189": "// TODO: Write your code here\n    std::vector<std::string> result;\n    std::stack<char> stack;\n    std::string temp;\n    for(auto c: paren_string){\n        if(c=='('){\n            stack.push(c);\n        }\n        else if(c==')'){\n            if(stack.top()=='('){\n                stack.pop();\n                temp+=c;\n                if(stack.empty()){\n                    result.push_back(temp);\n                    temp=\"\";\n                }\n            }\n        }\n    }\n    return result;",
        "grade-189": {
            "execution": 0
        },
        "70": "std::vector<std::string> result;\n    int start_position = 0;\n    int counter = 0;\n    int size = paren_string.size();\n    int index = 0;\n    std::string temp;\n    while(index < size){\n        if(paren_string[index] == '('){\n            if(counter == 0){\n                start_position = index;\n            }\n            counter++;\n        }\n        else if(paren_string[index] == ')'){\n            counter--;\n            if(counter == 0){\n                temp = paren_string.substr(start_position,index - start_position + 1);\n                result.push_back(temp);\n            }\n        }\n        index++;\n    }\n    return result;",
        "grade-70": {
            "execution": 0
        },
        "62": "std::vector<std::string> groups;\n    std::stack<char> parens;\n    std::string group;\n    for (char c : paren_string) {\n        if (c == '(') {\n            parens.push(c);\n            group.push_back(c);\n        } else if (c == ')') {\n            if (parens.size() == 0) {\n                throw std::invalid_argument(\"mis-matched parens\");\n            }\n            parens.pop();\n            group.push_back(c);\n            if (parens.size() == 0) {\n                groups.push_back(group);\n                group.clear();\n            }\n        }\n    }\n    if (parens.size() != 0) {\n        throw std::invalid_argument(\"mis-matched parens\");\n    }\n    return groups;",
        "grade-62": {
            "execution": 1
        },
        "57": "std::vector<std::string> vec;\n    std::string str;\n    int i = 0;\n    while(paren_string[i] != '\\0') {\n        if(paren_string[i] == ' ')\n            i++;\n        else if(paren_string[i] == '(') {\n            while(paren_string[i] != ')') {\n                str += paren_string[i];\n                i++;\n            }\n            str += paren_string[i];\n            vec.push_back(str);\n            str.clear();\n            i++;\n        }\n    }\n    return vec;",
        "grade-57": {
            "execution": 0
        },
        "35": "if (paren_string.empty()) {\n    return {};\n  }\n  std::vector<std::string> ret;\n  int stack = 0;\n  int start = 0;\n  for (int i = 0; i < paren_string.size(); i++) {\n    if (paren_string[i] == '(') {\n      stack++;\n    } else if (paren_string[i] == ')') {\n      stack--;\n    }\n    if (stack == 0) {\n      ret.push_back(paren_string.substr(start, i-start+1));\n      start = i+1;\n    }\n  }\n  return ret;",
        "grade-35": {
            "execution": 0
        },
        "188": "// Your code here\n  std::vector<std::string> result;\n  std::string t;\n  int s = 0;\n  int e = 0;\n  while(e < paren_string.size()){\n    if(paren_string[e] == ' '){\n      if(t.size() != 0){\n        result.push_back(t);\n        t.clear();\n      }\n      e++;\n      s = e;\n    }else if(paren_string[e] == '('){\n      if(t.size() != 0){\n        result.push_back(t);\n        t.clear();\n      }\n      t += '(';\n      s = e + 1;\n      e++;\n    }else if(paren_string[e] == ')'){\n      t += ')';\n      e++;\n      if(s >= e){\n        result.push_back(t);\n        t.clear();\n      }\n    }else{\n      t += paren_string[e];\n      e++;\n    }\n  }\n  if(t.size() != 0){\n    result.push_back(t);\n  }\n  return result;",
        "grade-188": {
            "execution": 0
        },
        "26": "std::vector<std::string> result;\n  // You code here\n  return result;",
        "grade-26": {
            "execution": 0
        },
        "173": "std::vector<std::string> v;\n    if(paren_string.length() == 0) return v;\n    if(paren_string.length() == 1) {\n        v.push_back(paren_string);\n        return v;\n    }\n    std::stack<int> s;\n    int val = paren_string[0];\n    if(val == '(') s.push(val);\n    if(val == ')') s.pop();\n    int start = 1;\n    int end = 1;\n    while(end < paren_string.length()) {\n        if(s.empty()) {\n            std::string sub = paren_string.substr(start, end - start);\n            v.push_back(sub);\n            start = end;\n        }\n        val = paren_string[end];\n        if(val == '(') s.push(val);\n        if(val == ')') s.pop();\n        end++;\n    }\n    if(!s.empty()) {\n        v.push_back(paren_string.substr(start, end - start));\n    }\n    return v;",
        "grade-173": {
            "execution": 0
        },
        "139": "std::vector<std::string> res;\n\tstd::stack<char> st;\n\tstd::string temp = \"\";\n\tfor (int i = 0; i < paren_string.length(); i++) {\n\t\tif (paren_string[i] == '(') {\n\t\t\tif (st.empty()) {\n\t\t\t\ttemp = \"\";\n\t\t\t}\n\t\t\tst.push(paren_string[i]);\n\t\t\ttemp += paren_string[i];\n\t\t}\n\t\telse if (paren_string[i] == ')') {\n\t\t\tst.pop();\n\t\t\ttemp += paren_string[i];\n\t\t\tif (st.empty()) {\n\t\t\t\tres.push_back(temp);\n\t\t\t}\n\t\t}\n\t}\n\treturn res;",
        "grade-139": {
            "execution": 1
        },
        "22": "// YOUR CODE HERE\n\tstd::vector<std::string> result;\n\tstd::string word = \"\";\n\tint count = 0;\n\tfor (char c : paren_string) {\n\t\tif (c == '(') {\n\t\t\tif (count == 0) {\n\t\t\t\tword += c;\n\t\t\t}\n\t\t\tcount++;\n\t\t}\n\t\telse if (c == ')') {\n\t\t\tcount--;\n\t\t\tif (count == 0) {\n\t\t\t\tword += c;\n\t\t\t\tresult.push_back(word);\n\t\t\t\tword = \"\";\n\t\t\t}\n\t\t}\n\t}\n\treturn result;",
        "grade-22": {
            "execution": 0
        },
        "151": "// Your code goes here.\n\tstd::vector<std::string> v;\n\tfor (int i = 0; i < paren_string.size(); i++) {\n\t\tif (paren_string[i] == '(') {\n\t\t\tint j = i;\n\t\t\tint count = 0;\n\t\t\twhile (j < paren_string.size()) {\n\t\t\t\tif (paren_string[j] == '(') {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\telse if (paren_string[j] == ')') {\n\t\t\t\t\tcount--;\n\t\t\t\t}\n\t\t\t\tif (count == 0) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif (count == 0) {\n\t\t\t\tstd::string s;\n\t\t\t\tint c = 0;\n\t\t\t\tfor (int k = i; k <= j; k++) {\n\t\t\t\t\tif (paren_string[k] == '(') {\n\t\t\t\t\t\tc++;\n\t\t\t\t\t}\n\t\t\t\t\telse if (paren_string[k] == ')') {\n\t\t\t\t\t\tc--;\n\t\t\t\t\t}\n\t\t\t\t\tif (c == 0) {\n\t\t\t\t\t\ti = k;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\ts += paren_string[k];\n\t\t\t\t}\n\t\t\t\tv.push_back(s);\n\t\t\t}\n\t\t}\n\t}\n\treturn v;",
        "grade-151": {
            "execution": 0
        },
        "108": "std::vector<std::string> s;\n    int i = 0;\n    while (i < paren_string.size()) {\n        int j = i;\n        int count = 0;\n        while (paren_string[j] != ')' || count != 0) {\n            if (paren_string[j] == '(') {\n                count++;\n            } else if (paren_string[j] == ')') {\n                count--;\n            }\n            j++;\n        }\n        s.push_back(paren_string.substr(i, j - i + 1));\n        i = j + 1;\n    }\n    return s;",
        "grade-108": {
            "execution": 0
        },
        "8": "std::vector<std::string> ret;\n    int pos = -1;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            if (pos == -1) {\n                pos = i;\n            }\n        } else if (paren_string[i] == ')') {\n            if (pos == -1) {\n                continue;\n            }\n            if (i - pos == 1) {\n                pos = -1;\n                continue;\n            }\n            bool ok = true;\n            for (int j = pos + 1; j < i; j++) {\n                if (paren_string[j] == '(') {\n                    ok = false;\n                    break;\n                }\n            }\n            if (ok) {\n                ret.push_back(paren_string.substr(pos, i - pos + 1));\n                pos = -1;\n            }\n        }\n    }\n    return ret;",
        "grade-8": {
            "execution": 0
        },
        "7": "std::vector<std::string> ans;\n    int i = 0;\n    int j = 0;\n    int length = paren_string.length();\n    while (j < length) {\n        if (paren_string[j] == ' ') {\n            j++;\n            continue;\n        }\n        if (paren_string[j] == '(') {\n            i = j;\n            int n = 1;\n            j++;\n            while (n != 0) {\n                if (paren_string[j] == ' ') {\n                    j++;\n                    continue;\n                }\n                if (paren_string[j] == '(') {\n                    n++;\n                }\n                if (paren_string[j] == ')') {\n                    n--;\n                }\n                j++;\n            }\n            ans.push_back(paren_string.substr(i, j - i));\n        }\n    }\n    return ans;",
        "grade-7": {
            "execution": 0
        },
        "23": "std::vector<std::string> groups;\n    std::string temp = \"\";\n    for (int i = 0; i < paren_string.length(); i++) {\n        if (paren_string[i] == ' ') continue;\n        if (paren_string[i] == '(') {\n            temp = temp + paren_string[i];\n        } else if (paren_string[i] == ')') {\n            temp = temp + paren_string[i];\n            groups.push_back(temp);\n            temp = \"\";\n        }\n    }\n    return groups;",
        "grade-23": {
            "execution": 0
        },
        "55": "std::vector<std::string> results;\n    // TODO: implement this function\n    int count = 0;\n    std::string tmp;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            count++;\n            tmp += '(';\n        }\n        else if (paren_string[i] == ')') {\n            count--;\n            tmp += ')';\n        }\n        if (count == 0 && tmp.size() > 0) {\n            results.push_back(tmp);\n            tmp = \"\";\n        }\n    }\n    return results;",
        "grade-55": {
            "execution": 1
        },
        "59": "std::vector<std::string> output;\n    int n = paren_string.size();\n    int i = 0;\n    std::string paren;\n    int open = 0;\n    int close = 0;\n    for (int i = 0; i < n; i++) {\n        if (paren_string[i] == '(') {\n            open++;\n            paren += '(';\n        }\n        else if (paren_string[i] == ')') {\n            close++;\n            paren += ')';\n        }\n        if (open == close) {\n            output.push_back(paren);\n            paren = \"\";\n            open = 0;\n            close = 0;\n        }\n    }\n    return output;",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer n, return a tuple that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and odd integer palindromes respectively.\nstd::tuple<long, long> even_odd_palindrome(long n) {\n",
        "snippet": [
            "    int num1=0,num2=0;\n    for (int i=1;i<=n;i++)\n    {\n        string w=to_string(i);\n        string p(w.rbegin(),w.rend());\n        if (w==p and i%2==1) num1+=1;\n        if (w==p and i%2==0) num2+=1;\n            \n    }\n    return {num2,num1};\n}\n"
        ],
        "simplified": "Given a positive integer n, return a tuple that has the number of even and odd integer palindromes that fall within the range(1, n), inclusive. Note: 1. 1 <= n <= 10^3 2. returned tuple has the number of even and odd integer palindromes respectively.",
        "task_id": "107",
        "166": "// TODO\n    return std::make_tuple(1, 2);",
        "grade-166": {
            "execution": 0
        },
        "28": "std::tuple<long, long> result(0, 0);\n  for (int i = 1; i <= n; i++) {\n    if (is_palindrome(i)) {\n      if (i % 2 == 0) {\n        std::get<0>(result)++;\n      } else {\n        std::get<1>(result)++;\n      }\n    }\n  }\n  return result;",
        "grade-28": {
            "execution": 0
        },
        "6": "// Write your code here\n    // Corner cases\n    if (n < 1) {\n        return std::make_tuple(0, 0);\n    }\n    // dp[i][j] indicates whether the number from i to j can be a palindrome\n    // dp[i][j] = (dp[i+1][j-1] && s[i] == s[j])\n    // if (s[i] == s[j]) {\n    //     if (dp[i+1][j-1]) {\n    //         dp[i][j] = true;\n    //     }\n    // }\n    // dp[i][i] = true;\n    // for (int i = 0; i < n; ++i) {\n    //     dp[i][i] = true;\n    // }\n    // for (int j = 1; j < n; ++j) {\n    //     for (int i = 0; i < j; ++i) {\n    //         if (s[i] == s[j]) {\n    //             if (dp[i+1][j-1]) {\n    //                 dp[i][j] = true;\n    //             }\n    //         }\n    //     }\n    // }\n    std::vector<int> dp[n];\n    for (int i = 0; i < n; ++i) {\n        dp[i].resize(n);\n    }\n    for (int i = 0; i < n; ++i) {\n        dp[i][i] = 1;\n    }\n    for (int j = 1; j < n; ++j) {\n        for (int i = 0; i < j; ++i) {\n            if (s[i] == s[j]) {\n                if (dp[i+1][j-1]) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n    }\n    for (int j = 0; j < n; ++j) {\n        for (int i = 0; i < n; ++i) {\n            printf(\"%d \", dp[i][j",
        "grade-6": {
            "execution": 0
        },
        "194": "// TODO: Implement the function here\n    std::tuple<long, long> result;\n    long even = 0, odd = 0;\n    for(long i = 1; i <= n; i++) {\n        long rev = 0, t = i;\n        while(t) {\n            rev = rev * 10 + t % 10;\n            t /= 10;\n        }\n        if(rev == i) {\n            if(i % 2 == 0) even++;\n            else odd++;\n        }\n    }\n    result = std::make_tuple(even, odd);\n    return result;",
        "grade-194": {
            "execution": 1
        },
        "70": "int even = 0, odd = 0;\n    int d = log10(n) + 1;\n    for (int i = 0; i < d; i++) {\n        even += 9 * pow(10, i - 1);\n        odd += 9 * pow(10, i - 1);\n    }\n    if (d % 2 == 0)\n        odd++;\n    return std::make_tuple(even, odd);",
        "grade-70": {
            "execution": 0
        },
        "62": "std::tuple<long, long> ret(0, 0);\n    int last = 0;\n    for (long i = 1; i <= n; ++i) {\n        if (is_palindrome(i)) {\n            last = is_even(i) ? 0 : 1;\n            std::get<last>(ret)++;\n        }\n    }\n    return ret;",
        "grade-62": {
            "execution": 0
        },
        "57": "std::tuple<long, long>result(0, 0);\n    int even_count = 0;\n    int odd_count = 0;\n    for (int i = 1; i <= n; i++) {\n        std::string num = std::to_string(i);\n        std::string num_rev = num;\n        std::reverse(num_rev.begin(), num_rev.end());\n        if (num == num_rev) {\n            if (i % 2 == 0) {\n                even_count++;\n            } else {\n                odd_count++;\n            }\n        }\n    }\n    std::get<0>(result) = even_count;\n    std::get<1>(result) = odd_count;\n    return result;",
        "grade-57": {
            "execution": 1
        },
        "35": "std::tuple<long, long> retval{0, 0};\n    if (n > 1000) {\n        n = 1000;\n    }\n    std::vector<int> counts(10, 0);\n    int max_digits = 0;\n    while (n > 0) {\n        int d = n % 10;\n        counts[d]++;\n        n /= 10;\n        max_digits++;\n    }\n    for (int d = 0; d < 10; d++) {\n        for (int i = 0; i < counts[d]; i++) {\n            if (d % 2 == 0) {\n                std::get<0>(retval)++;\n            } else {\n                std::get<1>(retval)++;\n            }\n        }\n    }\n    // Let's also consider a single digit as a palindrome.\n    std::get<0>(retval)++;\n    // If the number has an even number of digits, then we will have a middle digit which\n    // we can choose anything.\n    if (max_digits % 2 == 0) {\n        // From the remaining counts, we have n choices to choose the middle element.\n        long possibilities = 1;\n        for (int d = 0; d < 10; d++) {\n            if (counts[d] > 0) {\n                possibilities *= counts[d];\n            }\n        }\n        std::get<0>(retval) += possibilities;\n        std::get<1>(retval) += possibilities;\n    }\n    return retval;",
        "grade-35": {
            "execution": 0
        },
        "193": "long count_even = 0;\n  long count_odd = 0;\n  // Write your code here\n  for (long i = 1; i <= n; i++) {\n    if (std::to_string(i) == std::string(std::to_string(i).rbegin(), std::to_string(i).rend())) {\n      if (i % 2 == 0) {\n        count_even++;\n      } else {\n        count_odd++;\n      }\n    }\n  }\n  return std::make_tuple(count_even, count_odd);",
        "grade-193": {
            "execution": 0
        },
        "26": "// count the number of even and odd palindromes from 1 to n\n    long even_count = 0;\n    long odd_count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i < 10) {\n            ++odd_count;\n        } else if (i < 100) {\n            if (i % 11 == 0) {\n                ++even_count;\n            } else {\n                ++odd_count;\n            }\n        } else if (i < 1000) {\n            if (i % 11 == 0) {\n                ++even_count;\n            } else if (i % 100 == (i / 10) % 10 * 10 + i / 100) {\n                ++even_count;\n            } else {\n                ++odd_count;\n            }\n        }\n    }\n    return std::make_tuple(even_count, odd_count);",
        "grade-26": {
            "execution": 0
        },
        "177": "// Write your code here\n    int even = 0;\n    int odd = 0;\n    for(int i = 1; i <= n; i++){\n        int num = i;\n        int rev = 0;\n        while(num > 0){\n            rev = rev * 10 + num % 10;\n            num /= 10;\n        }\n        if(rev == i){\n            if(i % 2 == 0){\n                even++;\n            }\n            else{\n                odd++;\n            }\n        }\n    }\n    return std::make_tuple(even, odd);",
        "grade-177": {
            "execution": 1
        },
        "142": "int dp[n + 1][2];\n    memset(dp, 0, sizeof(dp));\n    dp[0][0] = 1;\n    dp[0][1] = 1;\n    for (int i = 1; i <= n; i++) {\n        for (int j = 0; j < 10; j++) {\n            if (i - j >= 0) {\n                dp[i][0] += dp[i - j][1];\n                dp[i][1] += dp[i - j][0];\n            }\n        }\n    }\n    return std::make_tuple(dp[n][0], dp[n][1]);",
        "grade-142": {
            "execution": 0
        },
        "22": "if (n <= 0) {\n        return std::make_tuple(0, 0);\n    }\n    long count = 0;\n    long oddCount = 0;\n    long evenCount = 0;\n    long num = 1;\n    while (num <= n) {\n        long temp = num;\n        long rev = 0;\n        while (temp > 0) {\n            rev = (rev * 10) + (temp % 10);\n            temp /= 10;\n        }\n        if (num == rev) {\n            if (num % 2 == 0) {\n                ++evenCount;\n            } else {\n                ++oddCount;\n            }\n        }\n        ++num;\n    }\n    return std::make_tuple(evenCount, oddCount);",
        "grade-22": {
            "execution": 1
        },
        "154": "int num_digits = floor(log10(n)) + 1;\n  long tens = pow(10, num_digits-1);\n  long odd_palindromes_count = 0;\n  long even_palindromes_count = 0;\n  if (num_digits % 2 == 0) {\n    // compute the number of odd palindromes that are smaller than n\n    odd_palindromes_count = 9;\n    for (int i = 1; i < num_digits/2; ++i) {\n      odd_palindromes_count *= 10;\n    }\n    odd_palindromes_count = odd_palindromes_count + tens - 1;\n    // compute the number of even palindromes that are smaller than n\n    even_palindromes_count = 10;\n    for (int i = 1; i < num_digits/2; ++i) {\n      even_palindromes_count *= 10;\n    }\n    even_palindromes_count = even_palindromes_count + tens - 1;\n  } else {\n    // compute the number of odd palindromes that are smaller than n\n    odd_palindromes_count = 9;\n    for (int i = 1; i < (num_digits+1)/2; ++i) {\n      odd_palindromes_count *= 10;\n    }\n    odd_palindromes_count = odd_palindromes_count + tens - 1;\n    // compute the number of even palindromes that are smaller than n\n    even_palindromes_count = 9;\n    for (int i = 1; i < (num_digits+1)/2; ++i) {\n      even_palindromes_count *= 10;\n    }\n    even_palindromes_count = even_palindromes_count + tens - 1;\n  }\n  // compute the number of palindromes less than or equal to n\n  int first_half = n / tens;\n  int mid = (n / 10) % 10;\n  int second_half = n %",
        "grade-154": {
            "execution": 0
        },
        "110": "std::tuple<long, long> result;\n  std::get<0>(result) = 0;\n  std::get<1>(result) = 0;\n  if (n < 1) return result;\n  for (long i = 1; i <= n; i++) {\n    long t = i;\n    long rev = 0;\n    while (t > 0) {\n      rev = rev * 10 + t % 10;\n      t /= 10;\n    }\n    if (rev == i) {\n      if (i % 2 == 0) {\n        std::get<0>(result)++;\n      } else {\n        std::get<1>(result)++;\n      }\n    }\n  }\n  return result;",
        "grade-110": {
            "execution": 1
        },
        "8": "long even = 0, odd = 0;\n  for (long i = 1; i <= n; i++) {\n    std::string s = std::to_string(i);\n    if (s == std::string(s.rbegin(), s.rend())) {\n      s.size() % 2 == 0 ? even++ : odd++;\n    }\n  }\n  return std::make_tuple(even, odd);",
        "grade-8": {
            "execution": 0
        },
        "7": "// TODO: Write your code here\n    long even = 0, odd = 0;\n    for(long i = 1; i <= n; i++) {\n        string s = to_string(i);\n        if(s.length() % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n    }\n    return std::make_tuple(even, odd);",
        "grade-7": {
            "execution": 0
        },
        "23": "// Implement this placeholder.\n    return std::make_tuple(0, 0);",
        "grade-23": {
            "execution": 0
        },
        "55": "std::tuple<long, long> res{0, 0};\n  if (n < 1) {\n    return res;\n  }\n  if (n > 1) {\n    res = even_odd_palindrome(n / 10);\n  }\n  long odd = std::get<1>(res);\n  long even = std::get<0>(res);\n  if (n % 2 == 0) {\n    ++even;\n  } else {\n    ++odd;\n  }\n  return std::make_tuple(even, odd);",
        "grade-55": {
            "execution": 0
        },
        "59": "int even = 0, odd = 0;\n    for (int i = 1; i <= n; i++) {\n        std::string s = std::to_string(i);\n        int len = s.length();\n        bool isPalindrome = true;\n        for (int j = 0; j < len / 2; j++) {\n            if (s[j] != s[len - j - 1]) {\n                isPalindrome = false;\n                break;\n            }\n        }\n        if (isPalindrome) {\n            if (len % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n        }\n    }\n    return std::make_tuple(even, odd);",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// generate_integers(2, 8) => [2, 4, 6, 8]\n// generate_integers(8, 2) => [2, 4, 6, 8]\n// generate_integers(10, 14) => []\nstd::vector<long> generate_integers(long a, long b) {\n",
        "snippet": [
            "    int m;\n    if (b<a)\n    {\n        m=a;a=b;b=m;\n    }\n\n    vector<int> out={};\n    for (int i=a;i<=b;i++)\n    if (i<10 and i%2==0) out.push_back(i);\n    return out;\n}\n"
        ],
        "simplified": "Given two positive integers a and b, return the even digits between a and b, in ascending order.",
        "task_id": "163",
        "169": "std::vector<long> output;\n  if (a > b) {\n    std::swap(a, b);\n  }\n  for (long x = a; x <= b; x++) {\n    if (x % 2 == 0) {\n      output.push_back(x);\n    }\n  }\n  return output;",
        "grade-169": {
            "execution": 0
        },
        "28": "std::vector<long> v;\n  if (a % 2 == 0 && b % 2 == 0) {\n    v.push_back(a);\n    while (a < b) {\n      a += 2;\n      v.push_back(a);\n    }\n  } else if (a % 2 != 0 && b % 2 != 0) {\n    a++;\n    v.push_back(a);\n    while (a < b) {\n      a += 2;\n      v.push_back(a);\n    }\n  } else if (a % 2 == 0 && b % 2 != 0) {\n    a++;\n    while (a < b) {\n      a += 2;\n      v.push_back(a);\n    }\n  } else if (a % 2 != 0 && b % 2 == 0) {\n    while (a < b) {\n      a += 2;\n      v.push_back(a);\n    }\n  }\n  return v;",
        "grade-28": {
            "execution": 0
        },
        "6": "std::vector<long> result;\n  if (a > b) {\n    std::swap(a, b);\n  }\n  while (a <= b) {\n    if (a % 2 == 0) {\n      result.push_back(a);\n    }\n    a++;\n  }\n  return result;",
        "grade-6": {
            "execution": 0
        },
        "198": "std::vector<long> v;\n  if (a == b) {\n    if (a % 2 == 0) {\n      v.push_back(a);\n    }\n    return v;\n  }\n  if (a > b) {\n    std::swap(a, b);\n  }\n  for (long i = a; i <= b; i++) {\n    if (i % 2 == 0) {\n      v.push_back(i);\n    }\n  }\n  return v;",
        "grade-198": {
            "execution": 0
        },
        "72": "// TODO: implement\n    std::vector<long> ret;\n    for (long i = a; i <= b; i++) {\n        if (i % 2 == 0) {\n            ret.push_back(i);\n        }\n    }\n    return ret;",
        "grade-72": {
            "execution": 0
        },
        "63": "std::vector<long> even_numbers;\n    for (long i = a; i <= b; i++) {\n        if (i % 2 == 0) {\n            even_numbers.push_back(i);\n        }\n    }\n    return even_numbers;",
        "grade-63": {
            "execution": 0
        },
        "58": "// Your code here.\n    std::vector<long> result;\n    // assert(a>=0);\n    // assert(b>=0);\n    if(a%2!=0){\n        a=a+1;\n    }\n    if(b%2!=0){\n        b=b-1;\n    }\n    for(int i=a;i<=b;i=i+2){\n        result.push_back(i);\n    }\n    return result;",
        "grade-58": {
            "execution": 0
        },
        "35": "if (a > b) {\n        return generate_integers(b, a);\n    }\n    if (a % 2 == 1) {\n        a++;\n    }\n    std::vector<long> evens;\n    for (long i = a; i <= b; i += 2) {\n        evens.push_back(i);\n    }\n    return evens;",
        "grade-35": {
            "execution": 0
        },
        "197": "std::vector<long> even_digits_between_a_and_b;\n  if (a > b) {\n    std::swap(a, b);\n  }\n  if (a % 2 == 0) {\n    for (long i = a; i <= b; i += 2) {\n      even_digits_between_a_and_b.push_back(i);\n    }\n  } else {\n    for (long i = a + 1; i <= b; i += 2) {\n      even_digits_between_a_and_b.push_back(i);\n    }\n  }\n  return even_digits_between_a_and_b;",
        "grade-197": {
            "execution": 0
        },
        "26": "std::vector<long> out;\n    if (a <= b) {\n        for (long i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                out.push_back(i);\n            }\n        }\n    } else {\n        for (long i = a; i >= b; i--) {\n            if (i % 2 == 0) {\n                out.push_back(i);\n            }\n        }\n    }\n    return out;",
        "grade-26": {
            "execution": 0
        },
        "179": "// initialize an empty vector\n  std::vector<long> even_integers;\n  // get the minimum and maximum values\n  long minimum = std::min(a, b);\n  long maximum = std::max(a, b);\n  // loop from minimum to maximum\n  for (long i = minimum; i <= maximum; i++) {\n    // check if i is an even number\n    if (i % 2 == 0) {\n      // if i is even, add it to our even_integers vector\n      even_integers.push_back(i);\n    }\n  }\n  // return our vector\n  return even_integers;",
        "grade-179": {
            "execution": 0
        },
        "143": "",
        "grade-143": {
            "execution": 0
        },
        "22": "if (a > b) {\n    std::swap(a, b);\n  }\n  std::vector<long> ans;\n  for (int i = a; i <= b; i++) {\n    if (i % 2 == 0) {\n      ans.push_back(i);\n    }\n  }\n  return ans;",
        "grade-22": {
            "execution": 0
        },
        "156": "std::vector<long> result;\n  if (a % 2 != 0) {\n    a++;\n  }\n  while (a <= b) {\n    result.push_back(a);\n    a += 2;\n  }\n  return result;",
        "grade-156": {
            "execution": 0
        },
        "110": "std::vector<long> result;\n  // your code here\n  if(a % 2 != 0) {\n    a++;\n  }\n  while(a <= b) {\n    result.push_back(a);\n    a += 2;\n  }\n  return result;",
        "grade-110": {
            "execution": 0
        },
        "8": "std::vector<long> v;\n  if (a == b)\n    return v;\n  long i = a;\n  while (i <= b) {\n    v.push_back(i);\n    i = i + 2;\n  }\n  return v;",
        "grade-8": {
            "execution": 0
        },
        "7": "std::vector<long> evenInts;\n  for (long i = a; i <= b; i++) {\n    if (i % 2 == 0) {\n      evenInts.push_back(i);\n    }\n  }\n  return evenInts;",
        "grade-7": {
            "execution": 0
        },
        "23": "std::vector<long> c;\n    if(a > b) {\n        a = a + b;\n        b = a - b;\n        a = a - b;\n    }\n    for(long i = a; i <= b; i++) {\n        if(i % 2 == 0) {\n            c.push_back(i);\n        }\n    }\n    return c;",
        "grade-23": {
            "execution": 0
        },
        "55": "std::vector<long> output;\n    if (a < b) {\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                output.push_back(i);\n            }\n        }\n    } else {\n        for (int i = b; i <= a; i++) {\n            if (i % 2 == 0) {\n                output.push_back(i);\n            }\n        }\n    }\n    return output;",
        "grade-55": {
            "execution": 0
        },
        "60": "std::vector<long> V;\n  if(a>b)\n    std::swap(a,b);\n  for(int i=a;i<=b;i++)\n    if(i%2==0)\n      V.push_back(i);\n  return V;",
        "grade-60": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nstd::vector<long> intersperse(std::vector<long> numbers, long delimeter) {\n",
        "snippet": [
            "    vector<int> out={};\n    if (numbers.size()>0) out.push_back(numbers[0]);\n    for (int i=1;i<numbers.size();i++)\n    {\n        out.push_back(delimeter);\n        out.push_back(numbers[i]);\n\n    }\n    return out;\n}\n"
        ],
        "simplified": "Insert a number 'delimeter' between every two consecutive elements of input list `numbers'",
        "task_id": "5",
        "169": "if (numbers.size() == 0) {\n    return {};\n  }\n  std::vector<long> result(numbers.size() * 2 - 1);\n  std::copy(numbers.begin(), numbers.end(), result.begin());\n  auto next = numbers.end();\n  auto current = numbers.end() - 1;\n  while (current != numbers.begin()) {\n    result[2 * (current - numbers.begin()) - 1] = delimeter;\n    current--;\n  }\n  return result;",
        "grade-169": {
            "execution": 0
        },
        "28": "",
        "grade-28": {
            "execution": 0
        },
        "6": "std::vector<long> res;\n    std::vector<long>::iterator pos;\n    for (pos = numbers.begin(); pos != numbers.end(); pos++) {\n        res.push_back(*pos);\n        if (pos != numbers.end() - 1) {\n            res.push_back(delimeter);\n        }\n    }\n    return res;",
        "grade-6": {
            "execution": 1
        },
        "196": "// your code goes here\n\tstd::vector<long> result;\n\tfor (auto i = numbers.begin(); i != numbers.end(); i++) {\n\t\tresult.push_back(*i);\n\t\tif (i != numbers.end() - 1) {\n\t\t\tresult.push_back(delimeter);\n\t\t}\n\t}\n\treturn result;",
        "grade-196": {
            "execution": 1
        },
        "72": "std::vector<long>::iterator itr = numbers.begin();\n\twhile(itr != numbers.end()) {\n\t\titr = numbers.insert(itr, delimeter);\n\t\titr += 2;\n\t}\n\treturn numbers;",
        "grade-72": {
            "execution": 0
        },
        "63": "std::vector<long> interspersed_list;\n    for (auto i = 0; i < numbers.size(); i++) {\n        interspersed_list.push_back(numbers[i]);\n        if (i != numbers.size() - 1) {\n            interspersed_list.push_back(delimeter);\n        }\n    }\n    return interspersed_list;",
        "grade-63": {
            "execution": 1
        },
        "58": "std::vector<long> numbers_with_delimeter;\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\tnumbers_with_delimeter.push_back(numbers[i]);\n\t\tif (i < numbers.size() - 1) {\n\t\t\tnumbers_with_delimeter.push_back(delimeter);\n\t\t}\n\t}\n\treturn numbers_with_delimeter;",
        "grade-58": {
            "execution": 1
        },
        "35": "std::vector<long> output;\n    int i=0;\n    while(i<numbers.size()){\n        output.push_back(numbers[i]);\n        if(i!=numbers.size()-1){\n            output.push_back(delimeter);\n        }\n        i++;\n    }\n    return output;",
        "grade-35": {
            "execution": 1
        },
        "194": "int i;\n    std::vector<long> newVector;\n    for(i=0;i<numbers.size();i++){\n        newVector.push_back(numbers[i]);\n        if(i<numbers.size()-1){\n            newVector.push_back(delimeter);\n        }\n    }\n    return newVector;",
        "grade-194": {
            "execution": 1
        },
        "26": "if (numbers.size() == 0) {\n        return numbers;\n    }\n    std::vector<long> result = {numbers[0]};\n    for (size_t i = 1; i < numbers.size(); i++) {\n        result.push_back(delimeter);\n        result.push_back(numbers[i]);\n    }\n    return result;",
        "grade-26": {
            "execution": 1
        },
        "179": "std::vector<long> interspersed;\n    for (long i = 0; i < numbers.size(); i++) {\n        interspersed.push_back(numbers[i]);\n        if (i < numbers.size() - 1) {\n            interspersed.push_back(delimeter);\n        }\n    }\n    return interspersed;",
        "grade-179": {
            "execution": 1
        },
        "144": "std::vector<long> interspersed;\n    for (auto it = numbers.begin(); it != numbers.end(); ++it) {\n        interspersed.push_back(*it);\n        if (it != numbers.end() - 1)\n            interspersed.push_back(delimeter);\n    }\n    return interspersed;",
        "grade-144": {
            "execution": 1
        },
        "22": "std::vector<long> result;\n    std::vector<long>::iterator it;\n    it = numbers.begin();\n    result.push_back(*it);\n    while (it != numbers.end()) {\n        it++;\n        if (it != numbers.end()) {\n            result.push_back(delimeter);\n            result.push_back(*it);\n        }\n    }\n    return result;",
        "grade-22": {
            "execution": 0
        },
        "156": "std::vector<long> result;\n    if (numbers.size() == 0) {\n        return result;\n    } else {\n        result.push_back(numbers[0]);\n        for (int i = 1; i < numbers.size(); i++) {\n            result.push_back(delimeter);\n            result.push_back(numbers[i]);\n        }\n        return result;\n    }",
        "grade-156": {
            "execution": 1
        },
        "111": "if (numbers.size() <= 1) return numbers;\n    std::vector<long> ret;\n    for (std::vector<long>::size_type i = 0; i < numbers.size() - 1; i++) {\n        ret.push_back(numbers[i]);\n        ret.push_back(delimeter);\n    }\n    ret.push_back(numbers.back());\n    return ret;",
        "grade-111": {
            "execution": 1
        },
        "8": "std::vector<long> result;\n    for (auto x : numbers) {\n        result.push_back(x);\n        result.push_back(delimeter);\n    }\n    result.pop_back();\n    return result;",
        "grade-8": {
            "execution": 0
        },
        "7": "std::vector<long> result;\n    for (long i = 0; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n        if (i + 1 < numbers.size()) {\n            result.push_back(delimeter);\n        }\n    }\n    return result;",
        "grade-7": {
            "execution": 1
        },
        "23": "std::vector<long> ret;\n  if (numbers.size() == 0) {\n    return ret;\n  }\n  for (long i = 0; i < numbers.size() - 1; i++) {\n    ret.push_back(numbers[i]);\n    ret.push_back(delimeter);\n  }\n  ret.push_back(numbers[numbers.size() - 1]);\n  return ret;",
        "grade-23": {
            "execution": 1
        },
        "56": "std::vector<long> x;\n    for(long p = 0; p < numbers.size(); p++){\n        x.push_back(numbers[p]);x.push_back(delimeter);\n    }\n    x.pop_back();\n    return x;",
        "grade-56": {
            "execution": 0
        },
        "60": "std::vector<long> output_vector;\n\tint i;\n\tfor(i=0;i<numbers.size();i++)\n\t{\n\t\toutput_vector.push_back(numbers[i]);\n\t\tif(i!=numbers.size()-1)\n\t\t\toutput_vector.push_back(delimeter);\n\t}\n\treturn output_vector;",
        "grade-60": {
            "execution": 1
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers, generate a list of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n",
        "snippet": [
            "    vector<int> out;\n    int max=0;\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (numbers[i]>max) max=numbers[i];\n        out.push_back(max);\n    }\n    return out;\n}\n"
        ],
        "simplified": "From a given list of integers, generate a list of rolling maximum element found until given moment in the sequence.",
        "task_id": "9",
        "165": "int max_so_far = 0;\n    std::vector<long> max_vec;\n    for (auto num : numbers) {\n        if (num > max_so_far) {\n            max_so_far = num;\n        }\n        max_vec.push_back(max_so_far);\n    }\n    return max_vec;",
        "grade-165": {
            "execution": 1
        },
        "28": "std::vector<long> result;\n    std::vector<long> max;\n    if (numbers.size() > 0) {\n        max.push_back(numbers[0]);\n        result.push_back(numbers[0]);\n    }\n    for (int i = 1; i < numbers.size(); i++) {\n        max.push_back(numbers[i]);\n        if (numbers[i] < max[i - 1])\n            max[i] = max[i - 1];\n        result.push_back(max[i]);\n    }\n    return result;",
        "grade-28": {
            "execution": 1
        },
        "6": "std::vector<long> result;\n    std::deque<long> dq;\n    // Traverse the list of numbers and add the element to the queue\n    for (auto num : numbers) {\n        // if the queue is empty or the last element of the queue is\n        // less than the current number, push the current number in\n        // the queue.\n        if (dq.empty() || dq.back() < num) {\n            dq.push_back(num);\n        } else {\n            // else if the last element of the queue is greater than\n            // the current number, pop elements from the back until the\n            // current number is the last element of the queue.\n            while (!dq.empty() && dq.back() > num) {\n                dq.pop_back();\n            }\n            // Add the current number to the queue.\n            dq.push_back(num);\n        }\n        // store the first element of the queue.\n        result.push_back(dq.front());\n    }\n    return result;",
        "grade-6": {
            "execution": 0
        },
        "192": "std::vector<long> result(numbers.size());\n  result[0] = numbers[0];\n  for (long i = 1; i < numbers.size(); i++) {\n    result[i] = std::max(result[i - 1], numbers[i]);\n  }\n  return result;",
        "grade-192": {
            "execution": 0
        },
        "72": "std::vector<long> ret;\n    std::multiset<long> s;\n    for (auto &n : numbers) {\n        s.insert(n);\n        ret.push_back(*s.rbegin());\n    }\n    return ret;",
        "grade-72": {
            "execution": 1
        },
        "64": "// Maximum value seen thus far.\n  long max_value = numbers[0];\n  std::vector<long> result;\n  result.push_back(max_value);\n  for (auto number : numbers) {\n    max_value = std::max(max_value, number);\n    result.push_back(max_value);\n  }\n  return result;",
        "grade-64": {
            "execution": 0
        },
        "59": "std::vector<long> r;\n  long max = 0;\n  for (long i = 0; i < numbers.size(); i++) {\n    if (max < numbers[i]) {\n      max = numbers[i];\n    }\n    r.push_back(max);\n  }\n  return r;",
        "grade-59": {
            "execution": 1
        },
        "36": "std::vector<long> result;\n  result.push_back(numbers[0]);\n  for (int i = 1; i < numbers.size(); i++) {\n    result.push_back(std::max(result[i - 1], numbers[i]));\n  }\n  return result;",
        "grade-36": {
            "execution": 0
        },
        "191": "std::vector<long> maximums;\n    std::set<long> curr_maximums{numbers[0]};\n    maximums.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] >= *curr_maximums.rbegin()) {\n            curr_maximums.insert(numbers[i]);\n        }\n        maximums.push_back(*curr_maximums.rbegin());\n    }\n    return maximums;",
        "grade-191": {
            "execution": 0
        },
        "26": "std::vector<long> result;\n    for (auto it = numbers.begin(); it != numbers.end(); ++it) {\n        auto max_it = std::max_element(it, numbers.end());\n        result.push_back(*max_it);\n    }\n    return result;",
        "grade-26": {
            "execution": 0
        },
        "176": "std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        int max = numbers[i];\n        for (int j = 0; j <= i; j++) {\n            if (numbers[j] > max) {\n                max = numbers[j];\n            }\n        }\n        result.push_back(max);\n    }\n    return result;",
        "grade-176": {
            "execution": 1
        },
        "141": "std::vector<long> result(numbers.size());\n\tlong max_number = numbers[0];\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\tmax_number = std::max(max_number, numbers[i]);\n\t\tresult[i] = max_number;\n\t}\n\treturn result;",
        "grade-141": {
            "execution": 0
        },
        "22": "std::vector<long> result;\n    long max = numbers[0];\n    for (size_t i = 0; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        result.push_back(max);\n    }\n    return result;",
        "grade-22": {
            "execution": 0
        },
        "153": "std::vector<long> maxes;\n\tlong max = numbers[0];\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\tmax = numbers[i] > max ? numbers[i] : max;\n\t\tmaxes.push_back(max);\n\t}\n\treturn maxes;",
        "grade-153": {
            "execution": 0
        },
        "110": "std::vector<long> result;\n  std::vector<long>::iterator it;\n  for (it = numbers.begin(); it != numbers.end(); it++) {\n    result.push_back(*std::max_element(numbers.begin(), it + 1));\n  }\n  return result;",
        "grade-110": {
            "execution": 1
        },
        "8": "std::vector<long> output(numbers.size());\n    std::deque<long> aux;\n    for (int i = 0; i < numbers.size(); i++) {\n        // firstly, remove old elements from the queue\n        while (!aux.empty() && aux.front() <= i - numbers.size()) {\n            aux.pop_front();\n        }\n        // now, we keep only elements which are bigger or equal than numbers[i]\n        while (!aux.empty() && numbers[aux.back()] <= numbers[i]) {\n            aux.pop_back();\n        }\n        // insert the current element\n        aux.push_back(i);\n        // get the maximum element at this moment\n        output[i] = numbers[aux.front()];\n    }\n    return output;",
        "grade-8": {
            "execution": 0
        },
        "7": "assert(!numbers.empty());\n    std::vector<long> result;\n    result.push_back(numbers[0]);\n    std::partial_sum(numbers.begin(), numbers.end(), std::back_inserter(result), [](long a, long b) {\n        return std::max(a, b);\n    });\n    return result;",
        "grade-7": {
            "execution": 0
        },
        "23": "std::vector<long> result;\n    std::deque<long> deque;\n    for (auto it = numbers.begin(); it != numbers.end(); ++it) {\n        if (deque.empty()) {\n            deque.push_back(*it);\n            result.push_back(*it);\n        } else {\n            if (*it < deque.back()) {\n                deque.push_back(*it);\n                result.push_back(deque.front());\n            } else {\n                while (!deque.empty() && *it > deque.back()) {\n                    deque.pop_back();\n                }\n                deque.push_back(*it);\n                result.push_back(deque.front());\n            }\n        }\n    }\n    return result;",
        "grade-23": {
            "execution": 1
        },
        "57": "std::vector<long> result;\n    long max_element = numbers[0];\n    result.push_back(max_element);\n    for (int i = 1; i < numbers.size(); i++) {\n        max_element = std::max(max_element, numbers[i]);\n        result.push_back(max_element);\n    }\n    return result;",
        "grade-57": {
            "execution": 0
        },
        "61": "// Need to return a list of the same size as input:\n    std::vector<long> output_list(numbers.size());\n    // And a stack with at least one element, because we will be using peek() method of it:\n    std::stack<long> s;\n    s.push(numbers[0]);\n    // Iterate over the given list starting from the second element:\n    for (int i = 1; i < numbers.size(); i++) {\n        // While stack has elements, and the last one is <= than the one we are considering right now,\n        // pop them out of the stack:\n        while (!s.empty() && s.top() <= numbers[i]) {\n            s.pop();\n        }\n        // After the loop above, stack is empty or the last element from it is > than the one we are\n        // considering right now. No matter which, we need to add the last element from the stack to the\n        // output list:\n        output_list[i] = s.top();\n        // Now add the current number to the stack:\n        s.push(numbers[i]);\n    }\n    return output_list;",
        "grade-61": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n",
        "snippet": [
            "    for (int i=2;i*i<=n;i++)\n    while (n%i==0 and n>i)  n=n/i;\n    return n;\n}\n"
        ],
        "simplified": "Return the largest prime factor of n. Assume n > 1 and is not a prime.",
        "task_id": "59",
        "164": "if (n == 2) return 2;\n    else if (n % 2 == 0) return largest_prime_factor(n / 2);\n    else {\n        for (long i = 3; i < n; i += 2) {\n            if (n % i == 0) return largest_prime_factor(n / i);\n        }\n        return n;\n    }",
        "grade-164": {
            "execution": 1
        },
        "28": "// YOUR CODE HERE\n    assert(n > 1);\n    int i;\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            n /= i;\n            i--;\n        }\n    }\n    return i;",
        "grade-28": {
            "execution": 1
        },
        "6": "int lpf;\n    for (int i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            lpf = i;\n            n /= i;\n        }\n    }\n    return lpf;",
        "grade-6": {
            "execution": 1
        },
        "192": "long d = 2;\n\twhile (n > 1) {\n\t\twhile (n % d == 0) {\n\t\t\tn /= d;\n\t\t}\n\t\td += 1;\n\t}\n\treturn d - 1;",
        "grade-192": {
            "execution": 1
        },
        "70": "long largest_prime_factor = 2;\n    long max = n;\n    long quotient = 0;\n    long remainder = 0;\n    bool is_prime = true;\n    // while (n % 2 == 0) {\n    //     n = n / 2;\n    // }\n    // if (n == 1) {\n    //     return 2;\n    // }\n    for (long i = 3; i <= n; i += 2) {\n        is_prime = true;\n        for (long j = 2; j < i; j++) {\n            if (i % j == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime) {\n            std::cout << i << std::endl;\n            if (n % i == 0) {\n                quotient = n / i;\n                remainder = n % i;\n                if (remainder == 0) {\n                    if (i > largest_prime_factor) {\n                        largest_prime_factor = i;\n                    }\n                    n = quotient;\n                }\n            }\n        }\n    }\n    return largest_prime_factor;",
        "grade-70": {
            "execution": 1
        },
        "62": "long factor = 2;\n  while (n > 1) {\n    if (n % factor == 0) {\n      n /= factor;\n    } else {\n      factor++;\n    }\n  }\n  return factor;",
        "grade-62": {
            "execution": 1
        },
        "57": "long largest = 0;\n    for (long i = 2; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n        }\n    }\n    if (n > 1) {\n        largest = n;\n    }\n    return largest;",
        "grade-57": {
            "execution": 1
        },
        "35": "long copy = n;\n  long big = 0;\n  int i = 2;\n  if (n < 2) {\n    return -1;\n  }\n  for (i = 2; i < copy; i++) {\n    if (copy % i == 0) {\n      big = i;\n      copy = copy / i;\n      i = 2;\n    }\n  }\n  return copy;",
        "grade-35": {
            "execution": 1
        },
        "191": "long i = 2;\n\twhile (i * i <= n) {\n\t\tif (n % i == 0) {\n\t\t\tn /= i;\n\t\t} else {\n\t\t\ti++;\n\t\t}\n\t}\n\treturn n;",
        "grade-191": {
            "execution": 1
        },
        "26": "return -1;",
        "grade-26": {
            "execution": 0
        },
        "176": "int largest = -1;\n  for (int i = 2; i <= n; i++) {\n    while (n % i == 0) {\n      largest = i;\n      n /= i;\n    }\n  }\n  return largest;",
        "grade-176": {
            "execution": 1
        },
        "140": "assert(n > 1);\n    int lpf = 1;\n    for (int i = 2; i * i <= n; i += 1) {\n        if (n % i == 0) {\n            lpf = i;\n            n /= i;\n            // Early exit for a small (2^11) sample set.\n            if (n == 1) {\n                return lpf;\n            }\n        }\n    }\n    return n;",
        "grade-140": {
            "execution": 0
        },
        "22": "long i = 2;\n\twhile (i < n) {\n\t\tif (n % i == 0) {\n\t\t\tn /= i;\n\t\t} else {\n\t\t\ti += 1;\n\t\t}\n\t}\n\treturn n;",
        "grade-22": {
            "execution": 1
        },
        "152": "assert(n > 1);\n    long largest_prime_factor = 0;\n    for (long i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n            n /= i;\n            i = 2;\n        }\n    }\n    return largest_prime_factor;",
        "grade-152": {
            "execution": 1
        },
        "108": "long largest_prime = 1;\n\tlong i = 2;\n\tlong root = sqrt(n);\n\twhile (i <= root) {\n\t\tif (n % i == 0) {\n\t\t\tlargest_prime = i;\n\t\t\tn /= i;\n\t\t\troot = sqrt(n);\n\t\t}\n\t\ti += 1;\n\t}\n\treturn (n == 1) ? largest_prime : n;",
        "grade-108": {
            "execution": 0
        },
        "8": "long largestPrime = -1;\n    while (n % 2 == 0) {\n        largestPrime = 2;\n        n >>= 1;\n    }\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        while (n % i == 0) {\n            largestPrime = i;\n            n = n / i;\n        }\n    }\n    if (n > 2)\n        largestPrime = n;\n    return largestPrime;",
        "grade-8": {
            "execution": 1
        },
        "7": "// TODO: your code here\n    long result = 0;\n    for (long i = 2; i <= n; i++) {\n        // Checks if i is a prime number.\n        bool is_prime = true;\n        for (long j = 2; j <= i / 2; j++) {\n            if (i % j == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime) {\n            while (n % i == 0) {\n                result = i;\n                n /= i;\n            }\n        }\n    }\n    return result;",
        "grade-7": {
            "execution": 1
        },
        "23": "// To be implemented.\n    long largest = 0;\n    for (long i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            largest = i;\n            n /= i;\n        }\n    }\n    return largest;",
        "grade-23": {
            "execution": 1
        },
        "55": "assert(n > 1);\n    int i = 2;\n    while (n > 1) {\n        while (n % i == 0)\n            n /= i;\n        i++;\n    }\n    return i - 1;",
        "grade-55": {
            "execution": 1
        },
        "59": "// Check for base cases\n    if (n == 1 || n == 2) {\n        return n;\n    }\n    // Check if n is even\n    if (n % 2 == 0) {\n        return largest_prime_factor(n / 2);\n    }\n    // All other cases are odd\n    for (long i = 3; i <= sqrt(n); i+=2) {\n        if (n % i == 0) {\n            return largest_prime_factor(n / i);\n        }\n    }\n    // Case where n is prime\n    return n;",
        "grade-59": {
            "execution": 1
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nlong skjkasdkd(std::vector<long> lst) {\n",
        "snippet": [
            "    int largest=0;\n    for (int i=0;i<lst.size();i++)\n        if (lst[i]>largest)\n        {\n            bool prime=true;\n            for (int j=2;j*j<=lst[i];j++)\n                if (lst[i]%j==0) prime=false;\n            if (prime) largest=lst[i];\n        }\n    int sum=0;\n    string s;\n    s=to_string(largest);\n    for (int i=0;i<s.length();i++)\n        sum+=s[i]-48;\n    return sum;\n}\n#undef NDEBUG\n#include<assert.h>\n"
        ],
        "simplified": "You are given a list of integers. You need to find the largest prime value and return the sum of its digits.",
        "task_id": "94",
        "164": "long i, j, max = 0;\n\tstd::vector<long> factors;\n\tfor (i = 0; i < lst.size(); i++) {\n\t\tif (lst[i] > max)\n\t\t\tmax = lst[i];\n\t}\n\tfor (i = 2; i <= max; i++) {\n\t\tfor (j = 2; j <= i; j++) {\n\t\t\tif (i % j == 0)\n\t\t\t\tbreak;\n\t\t}\n\t\tif (i == j)\n\t\t\tfactors.push_back(i);\n\t}\n\tlong largest = 0;\n\tfor (i = 0; i < lst.size(); i++) {\n\t\tfor (j = 0; j < factors.size(); j++) {\n\t\t\tif (lst[i] == factors[j]) {\n\t\t\t\tif (factors[j] > largest)\n\t\t\t\t\tlargest = factors[j];\n\t\t\t}\n\t\t}\n\t}\n\tlong sum = 0;\n\twhile (largest != 0) {\n\t\tsum += largest % 10;\n\t\tlargest /= 10;\n\t}\n\treturn sum;",
        "grade-164": {
            "execution": 1
        },
        "28": "std::vector<long> prime_numbers;\n    // step 1: create an array of all prime numbers in the range of lst\n    for (auto i : lst) {\n        std::vector<long> divisors;\n        for (long j = 1; j <= i; j++) {\n            if (i % j == 0) {\n                divisors.push_back(j);\n            }\n        }\n        if (divisors.size() == 2) {\n            prime_numbers.push_back(i);\n        }\n    }\n    // step 2: sort the array of prime numbers\n    std::sort(prime_numbers.begin(), prime_numbers.end());\n    // step 3: get the last element of the array(the largest prime number)\n    long largest_prime_number = prime_numbers.back();\n    std::vector<long> largest_prime_number_digits;\n    while (largest_prime_number != 0) {\n        int digit = largest_prime_number % 10;\n        largest_prime_number_digits.push_back(digit);\n        largest_prime_number /= 10;\n    }\n    long sum = 0;\n    for (auto i : largest_prime_number_digits) {\n        sum += i;\n    }\n    return sum;",
        "grade-28": {
            "execution": 1
        },
        "6": "//step 1, find the largest prime\n\tlong max = 0;\n\tfor (long i = 0; i < lst.size(); i++) {\n\t\tif (lst[i] > max) {\n\t\t\tbool prime = true;\n\t\t\tfor (long j = 2; j < lst[i]; j++) {\n\t\t\t\tif (lst[i] % j == 0) {\n\t\t\t\t\tprime = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (prime) {\n\t\t\t\tmax = lst[i];\n\t\t\t}\n\t\t}\n\t}\n\t//step 2, sum the digits\n\tlong sum = 0;\n\twhile (max > 0) {\n\t\tsum += max % 10;\n\t\tmax /= 10;\n\t}\n\treturn sum;",
        "grade-6": {
            "execution": 1
        },
        "190": "sort(lst.begin(), lst.end());\n\tlong max = 0;\n\tfor (int i = lst.size() - 1; i >= 0; i--) {\n\t\tif (lst[i] == 2) {\n\t\t\treturn 2;\n\t\t}\n\t\tif (lst[i] % 2 == 0) {\n\t\t\tlst[i] -= 1;\n\t\t}\n\t\tif (lst[i] == 1) {\n\t\t\tcontinue;\n\t\t}\n\t\tbool isPrime = true;\n\t\tfor (int j = 3; j < lst[i]; j += 2) {\n\t\t\tif (lst[i] % j == 0) {\n\t\t\t\tisPrime = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (isPrime) {\n\t\t\tmax = lst[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\tlong sum = 0;\n\twhile (max != 0) {\n\t\tsum += max % 10;\n\t\tmax /= 10;\n\t}\n\treturn sum;",
        "grade-190": {
            "execution": 0
        },
        "71": "// find largest prime number\n    long largestPrime = 0;\n    for (auto number : lst) {\n        long largestNonPrime = number;\n        for (long i = 2; i <= number; i++) {\n            if (number % i == 0) {\n                largestNonPrime = i;\n                break;\n            }\n        }\n        if (largestNonPrime == number) {\n            largestPrime = number;\n        }\n    }\n    long sumOfLargestPrime = 0;\n    while (largestPrime > 0) {\n        sumOfLargestPrime += largestPrime % 10;\n        largestPrime /= 10;\n    }\n    return sumOfLargestPrime;",
        "grade-71": {
            "execution": 0
        },
        "63": "//    assert( 0 );\n    //    return 0;",
        "grade-63": {
            "execution": 0
        },
        "58": "long i,j,flag,res=0;\n    for(i=0;i<lst.size();i++)\n    {\n        flag=0;\n        for(j=2;j<=lst[i]/2;j++)\n        {\n            if(lst[i]%j==0)\n            {\n                flag=1;\n                break;\n            }\n        }\n        if(flag==0)\n        {\n            res=lst[i];\n        }\n    }\n    long r=0;\n    while(res>0)\n    {\n        r=r+res%10;\n        res=res/10;\n    }\n    return r;",
        "grade-58": {
            "execution": 0
        },
        "35": "// your code\n  long largestPrime = 0;\n  for(auto const& x : lst) {\n    bool isPrime = true;\n    for(int j = 2; j <= sqrt(x); j++) {\n      if(x % j == 0) {\n        isPrime = false;\n        break;\n      }\n    }\n    if(isPrime && x > largestPrime) {\n      largestPrime = x;\n    }\n  }\n  std::cout << largestPrime << std::endl;\n  long primeSum = 0;\n  while(largestPrime > 0) {\n    primeSum += largestPrime % 10;\n    largestPrime /= 10;\n  }\n  return primeSum;",
        "grade-35": {
            "execution": 1
        },
        "189": "long max = -1;\n  for (int i = 0; i < lst.size(); i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  bool isPrime = true;\n  for (int i = 2; i <= max; i++) {\n    isPrime = true;\n    for (int j = 2; j < i; j++) {\n      if (i % j == 0) {\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n      return i;\n    }\n  }\n  return -1;",
        "grade-189": {
            "execution": 0
        },
        "26": "std::sort(lst.begin(), lst.end());\n  return lst[lst.size()-1];",
        "grade-26": {
            "execution": 0
        },
        "174": "std::vector<long> res;\n    long sum = 0;\n    for(long i = 0; i < lst.size(); i++){\n        long temp = 0;\n        for(long j = 0; j < lst.size(); j++){\n            if(i != j){\n                temp += lst[j];\n            }\n        }\n        res.push_back(temp);\n    }\n    long max = 0;\n    for(long i = 0; i < res.size(); i++){\n        if(res[i] > max){\n            max = res[i];\n        }\n    }\n    while(max > 0){\n        sum += max % 10;\n        max /= 10;\n    }\n    return sum;",
        "grade-174": {
            "execution": 0
        },
        "140": "int fl=0;\n    long  max=0;\n    long result=0;\n    for(int i=0;i<lst.size();i++)\n    {\n        if(lst[i]==1)\n        {\n            fl=1;\n        }\n        if(lst[i]%2==0)\n        {\n            lst[i]=2;\n        }\n        else if(lst[i]%3==0)\n        {\n            lst[i]=3;\n        }\n        else if(lst[i]%5==0)\n        {\n            lst[i]=5;\n        }\n        else if(lst[i]%7==0)\n        {\n            lst[i]=7;\n        }\n        else if(lst[i]%11==0)\n        {\n            lst[i]=11;\n        }\n        else if(lst[i]%13==0)\n        {\n            lst[i]=13;\n        }\n        else if(lst[i]%17==0)\n        {\n            lst[i]=17;\n        }\n        else if(lst[i]%19==0)\n        {\n            lst[i]=19;\n        }\n        else if(lst[i]%23==0)\n        {\n            lst[i]=23;\n        }\n        else if(lst[i]%29==0)\n        {\n            lst[i]=29;\n        }\n        else if(lst[i]%31==0)\n        {\n            lst[i]=31;\n        }\n        else if(lst[i]%37==0)\n        {\n            lst[i]=37;\n        }\n        else if(lst[i]%41==0)\n        {\n            lst[i]=41;\n        }\n        else if(lst[i]%43==0)\n        {\n            lst[i]=43;\n        }\n        else if(lst[i]%47==0)\n        {\n            lst[i]=47",
        "grade-140": {
            "execution": 0
        },
        "22": "if(lst.size()<=2) return lst[0];\n    long max=0;\n    for(int i=0;i<lst.size();i++){\n        if(lst[i]>max) max=lst[i];\n    }\n    std::vector<long> prime;\n    prime.push_back(2);\n    for(int i=3;i<=max;i++){\n        bool flag=true;\n        for(int j=0;j<prime.size();j++){\n            if(i%prime[j]==0){\n                flag=false;\n                break;\n            }\n        }\n        if(flag) prime.push_back(i);\n    }\n    int sum=0;\n    for(int i=0;i<prime.size();i++){\n        sum+=prime[i];\n    }\n    std::cout<<\"Sum of all prime nos in the given range: \"<<sum<<std::endl;\n    // std::vector<long> nlst;\n    // for(int i=0;i<lst.size();i++){\n    //     if(lst[i]%prime[prime.size()-1]==0) nlst.push_back(lst[i]);\n    // }\n    // long sum=0;\n    // for(int i=0;i<nlst.size();i++){\n    //     sum+=nlst[i];\n    // }\n    // return sum;",
        "grade-22": {
            "execution": 0
        },
        "152": "std::vector<long> res;\n    for(int i = 0; i < lst.size(); i++){\n        bool isPrime = true;\n        for(int j = 2; j <= lst[i]/2; j++){\n            if(lst[i] % j == 0){\n                isPrime = false;\n                break;\n            }\n        }\n        if(isPrime){\n            res.push_back(lst[i]);\n        }\n    }\n    std::sort(res.begin(), res.end());\n    int ans = 0;\n    if(res.size() >= 1){\n        ans = res[res.size()-1];\n    }\n    int res1 = 0;\n    while(ans != 0){\n        res1 += ans % 10;\n        ans /= 10;\n    }\n    return res1;",
        "grade-152": {
            "execution": 1
        },
        "109": "long largestPrime = -1;\n\tfor (long i = 0; i < lst.size(); i++) {\n\t\tlong num = lst[i];\n\t\tif (num == 1) continue;\n\t\tbool isPrime = true;\n\t\tfor (long j = 2; j <= sqrt(num); j++) {\n\t\t\tif (num % j == 0) {\n\t\t\t\tisPrime = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (isPrime) {\n\t\t\tlargestPrime = std::max(largestPrime, num);\n\t\t}\n\t}\n\tif (largestPrime == -1) {\n\t\treturn 0;\n\t}\n\tlong sum = 0;\n\twhile (largestPrime) {\n\t\tsum += largestPrime % 10;\n\t\tlargestPrime /= 10;\n\t}\n\treturn sum;",
        "grade-109": {
            "execution": 1
        },
        "8": "vector<long> v;\n    vector<long> s;\n    vector<long> m;\n    vector<long> f;\n    vector<long> g;\n    vector<long> j;\n    vector<long> p;\n    vector<long> o;\n    vector<long> e;\n    vector<long> z;\n    vector<long> q;\n    vector<long> m1;\n    vector<long> m2;\n    vector<long> m3;\n    vector<long> m4;\n    vector<long> m5;\n    vector<long> m6;\n    vector<long> m7;\n    vector<long> m8;\n    vector<long> m9;\n    vector<long> m10;\n    vector<long> m11;\n    vector<long> m12;\n    vector<long> m13;\n    vector<long> m14;\n    vector<long> m15;\n    vector<long> m16;\n    vector<long> m17;\n    vector<long> m18;\n    vector<long> m19;\n    vector<long> m20;\n    vector<long> m21;\n    vector<long> m22;\n    vector<long> m23;\n    vector<long> m24;\n    vector<long> m25;\n    vector<long> m26;\n    vector<long> m27;\n    vector<long> m28;\n    vector<long> m29;\n    vector<long> m30;\n    vector<long> m31;\n    vector<long> m32;\n    vector<long> m33;\n    vector<long> m34;\n    vector<long> m35;\n    vector<long> m36;\n    vector<long> m37;\n    vector<long> m38;\n    vector<long> m39;\n    vector<long> m40;\n    vector<long> m41;\n    vector<long> m42;\n    vector<long> m43;\n    vector<long> m44;\n    vector<long> m45;\n    vector<long> m46;\n    vector<long> m47;",
        "grade-8": {
            "execution": 0
        },
        "7": "int len = lst.size();\n    if(len == 0) return 0;\n    long largestPrimeValue = 0;\n    for(int i = 0; i < len; i++){\n        long num = lst[i];\n        bool isPrime = true;\n        if(num == 0) continue;\n        if(num == 1) continue;\n        for(int j = 2; j < num/2; j++){\n            if(num % j == 0){\n                isPrime = false;\n                break;\n            }\n        }\n        if(isPrime && largestPrimeValue < num){\n            largestPrimeValue = num;\n        }\n    }\n    int sum = 0;\n    while(largestPrimeValue > 0){\n        sum += largestPrimeValue % 10;\n        largestPrimeValue /= 10;\n    }\n    return sum;",
        "grade-7": {
            "execution": 1
        },
        "23": "long prime=0;\n\tfor(int i=0;i<lst.size();i++){\n\t\tbool flag=true;\n\t\tfor(int j=2;j<=sqrt(lst[i]);j++){\n\t\t\tif(lst[i]%j==0){\n\t\t\t\tflag=false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(flag==true && lst[i]>prime){\n\t\t\tprime=lst[i];\n\t\t}\n\t}\n\tlong sum=0;\n\twhile(prime>0){\n\t\tsum+=prime%10;\n\t\tprime/=10;\n\t}\n\treturn sum;",
        "grade-23": {
            "execution": 1
        },
        "56": "//max element\n    auto it = max_element(lst.begin(), lst.end());\n    //iterator to position\n    long max = *it;\n    long c = 0;\n    std::vector<long> vec;\n    while(max != 0){\n        c = max % 10;\n        vec.push_back(c);\n        max = max / 10;\n    }\n    long sum = 0;\n    for(int i = 0; i < vec.size(); i++){\n        sum += vec[i];\n    }\n    return sum;",
        "grade-56": {
            "execution": 0
        },
        "60": "for (long i = 0; i < lst.size(); i++) {\n\t\tif (lst[i] % 2 == 0) {\n\t\t\tlst[i] = 0;\n\t\t}\n\t}\n\tlst.erase(std::remove(lst.begin(), lst.end(), 0), lst.end());\n\tif (lst.size() == 0) {\n\t\treturn 2;\n\t}\n\tlong top = *std::max_element(lst.begin(), lst.end());\n\tint coeff = 2;\n\tint temp = 2;\n\tbool found = false;\n\tfor (long i = 2; i <= top; i++) {\n\t\tfound = false;\n\t\ttemp = 2;\n\t\tfor (long j = 0; j < lst.size(); j++) {\n\t\t\tif (i % lst[j] == 0) {\n\t\t\t\tcoeff = coeff * temp;\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ttemp++;\n\t\t}\n\t\tif (!found) {\n\t\t\tcoeff = coeff * i;\n\t\t}\n\t}\n\treturn coeff;",
        "grade-60": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the list.\n// Return None if there is no such element.\n// next_smallest([1, 2, 3, 4, 5]) == 2\n// next_smallest([5, 1, 4, 3, 2]) == 2\n// next_smallest([]) == None\n// next_smallest([1, 1]) == None\nstd::optional<long> next_smallest(std::vector<long> lst) {\n",
        "snippet": [
            "    sort(lst.begin(),lst.end());\n    for (int i=1;i<lst.size();i++)\n        if (lst[i]!=lst[i-1]) return lst[i];\n    return -1;\n}\n"
        ],
        "simplified": "You are given a list of integers. Write a function next_smallest() that returns the 2nd smallest element of the list. Return None if there is no such element.",
        "task_id": "90",
        "163": "long min1, min2;\n  min1 = min2 = std::numeric_limits<long>::max();\n  for (auto x : lst) {\n    if (x <= min1) {\n      min2 = min1;\n      min1 = x;\n    } else if (x < min2) {\n      min2 = x;\n    }\n  }\n  if (min2 == std::numeric_limits<long>::max()) {\n    return std::nullopt;\n  }\n  return min2;",
        "grade-163": {
            "execution": 0
        },
        "28": "if (lst.size() <= 1) {\n        return std::nullopt;\n    }\n    if (lst.size() == 2) {\n        if (lst[0] == lst[1]) {\n            return std::nullopt;\n        }\n    }\n    auto min = std::min_element(lst.begin(), lst.end());\n    int min_pos = std::distance(lst.begin(), min);\n    lst.erase(lst.begin() + min_pos);\n    auto temp = std::min_element(lst.begin(), lst.end());\n    return *temp;",
        "grade-28": {
            "execution": 0
        },
        "6": "// sort the list, remove duplicates and check if there is an item at index 1\n  std::sort(lst.begin(), lst.end());\n  lst.erase(std::unique(lst.begin(), lst.end()), lst.end());\n  if (lst.size() > 1) {\n    return lst[1];\n  }\n  return {};",
        "grade-6": {
            "execution": 0
        },
        "190": "if (lst.size() <= 1) {\n    return std::nullopt;\n  }\n  long first = LONG_MAX;\n  long second = LONG_MAX;\n  for (long num : lst) {\n    if (num < first) {\n      second = first;\n      first = num;\n    } else if (num < second && num != first) {\n      second = num;\n    }\n  }\n  if (second == LONG_MAX) {\n    return std::nullopt;\n  }\n  return second;",
        "grade-190": {
            "execution": 0
        },
        "70": "std::sort(lst.begin(), lst.end());\n\tauto last = std::unique(lst.begin(), lst.end());\n\tif (last - lst.begin() > 1) {\n\t\treturn *(++lst.begin());\n\t}\n\treturn {};",
        "grade-70": {
            "execution": 0
        },
        "62": "std::optional<long> first, second;\n  for (auto n : lst) {\n    if (!first || n < *first) {\n      second = first;\n      first = n;\n    } else if (!second || n < *second) {\n      second = n;\n    }\n  }\n  return second;",
        "grade-62": {
            "execution": 0
        },
        "57": "std::sort(lst.begin(), lst.end());\n\tint check = lst[0];\n\tfor (long i = 1; i < lst.size(); i++) {\n\t\tif (lst[i] != check) {\n\t\t\treturn lst[i];\n\t\t}\n\t}\n\treturn {};",
        "grade-57": {
            "execution": 0
        },
        "35": "assert(false);\n    return {};",
        "grade-35": {
            "execution": 0
        },
        "189": "if (lst.size() < 2) return std::nullopt;\n    std::sort(lst.begin(), lst.end());\n    for (size_t i = 1; i < lst.size(); i++) {\n        if (lst[i] != lst[i - 1]) {\n            return lst[i];\n        }\n    }\n    return std::nullopt;",
        "grade-189": {
            "execution": 0
        },
        "26": "if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    if (lst.size() == 2) {\n        if (lst[0] != lst[1]) {\n            return std::make_optional(lst[1]);\n        } else {\n            return std::nullopt;\n        }\n    }\n    std::optional<long> min = std::nullopt;\n    std::optional<long> min2 = std::nullopt;\n    for (long i = 0; i < lst.size(); i++) {\n        if (min.has_value()) {\n            if (lst[i] < min.value()) {\n                min2 = min;\n                min = lst[i];\n            } else if (lst[i] < min2.value() && lst[i] != min.value()) {\n                min2 = lst[i];\n            }\n        } else {\n            min = lst[i];\n        }\n    }\n    return min2;",
        "grade-26": {
            "execution": 0
        },
        "174": "std::vector<long> v = lst;\n  std::sort(v.begin(), v.end());\n  std::set<long> s(v.begin(), v.end());\n  if (s.size() > 1)\n    return *(++s.begin());\n  else\n    return {};",
        "grade-174": {
            "execution": 0
        },
        "139": "",
        "grade-139": {
            "execution": 0
        },
        "22": "if (lst.size() < 2) {\n        return std::nullopt;\n    }\n\n    std::sort(lst.begin(), lst.end());\n    if (lst[0] == lst[1]) {\n        return std::nullopt;\n    }\n\n    return lst[1];",
        "grade-22": {
            "execution": 0
        },
        "151": "auto len = lst.size();\n    if (len < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    for (auto i = 0; i < len; i++) {\n        if (lst[i] != lst[i + 1]) {\n            return lst[i + 1];\n        }\n    }\n    return std::nullopt;",
        "grade-151": {
            "execution": 0
        },
        "108": "// Write your code here\n  if(lst.size()<2) return {};\n  int small = lst[0];\n  int next_small = lst[1];\n  for(int i=1;i<lst.size();i++){\n    if(lst[i]<small){\n      next_small = small;\n      small = lst[i];\n    }\n    else if(lst[i]<next_small)\n      next_small = lst[i];\n  }\n  return small==next_small?std::optional<long>{}:std::optional<long>{next_small};",
        "grade-108": {
            "execution": 0
        },
        "8": "if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::vector<long> sorted = lst;\n    std::sort(sorted.begin(), sorted.end());\n    for (size_t i = 1; i < sorted.size(); i++) {\n        if (sorted[i] != sorted[i - 1]) {\n            return sorted[i];\n        }\n    }\n    return std::nullopt;",
        "grade-8": {
            "execution": 0
        },
        "7": "std::sort(lst.begin(), lst.end());\n    auto first = lst.begin();\n    auto last = lst.end();\n    while (first != last) {\n        if ((first + 1) != last && *first == *(first + 1)) {\n            first = first + 2;\n        } else {\n            return std::optional<long>(*(first + 1));\n        }\n    }\n    return std::nullopt;",
        "grade-7": {
            "execution": 0
        },
        "23": "if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    std::optional<long> smallest;\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] != lst[i + 1]) {\n            smallest = lst[i + 1];\n            break;\n        }\n    }\n    return smallest;",
        "grade-23": {
            "execution": 0
        },
        "55": "if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    if (lst.size() == 2) {\n        if (lst[0] == lst[1]) {\n            return std::nullopt;\n        }\n    }\n    long min = std::numeric_limits<long>::max();\n    long second_min = std::numeric_limits<long>::max();\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] < min) {\n            second_min = min;\n            min = lst[i];\n        } else if (lst[i] < second_min && lst[i] != min) {\n            second_min = lst[i];\n        }\n    }\n    if (second_min == std::numeric_limits<long>::max()) {\n        return std::nullopt;\n    }\n    return second_min;",
        "grade-55": {
            "execution": 0
        },
        "59": "if (lst.size() < 2) return std::nullopt;\n    long temp = lst[0];\n    std::optional<long> result = std::nullopt;\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < temp) {\n            if (result == std::nullopt) {\n                result = temp;\n            } else if (lst[i] < *result) {\n                result = lst[i];\n            }\n        } else {\n            temp = lst[i];\n        }\n    }\n    return result;",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long x, long base) {\n",
        "snippet": [
            "    string out=\"\";\n    while (x>0)\n    {\n        out=to_string(x%base)+out;\n        x=x/base;\n    }\n    return out;\n}\n"
        ],
        "simplified": "Change numerical base of input number x to base. return string representation after the conversion. base numbers are less than 10.",
        "task_id": "44",
        "165": "assert(base < 10);\n\tstd::string result;\n\tdo {\n\t\tlong r = x % base;\n\t\tresult += '0' + r;\n\t\tx /= base;\n\t} while (x);\n\tstd::reverse(result.begin(), result.end());\n\treturn result;",
        "grade-165": {
            "execution": 1
        },
        "28": "assert(base > 1 && base < 10);\n  std::string result;\n  while (x != 0) {\n    long remainder = x % base;\n    result.push_back('0' + remainder);\n    x /= base;\n  }\n  if (result.empty())\n    result.push_back('0');\n  std::reverse(result.begin(), result.end());\n  return result;",
        "grade-28": {
            "execution": 1
        },
        "6": "std::string result = \"\";\n    while (x > 0) {\n        result = std::to_string(x % base) + result;\n        x /= base;\n    }\n    return result;",
        "grade-6": {
            "execution": 1
        },
        "191": "std::stringstream ss;\n    while (x) {\n        ss << x % base;\n        x /= base;\n    }\n    std::string s = ss.str();\n    std::reverse(s.begin(), s.end());\n    return s;",
        "grade-191": {
            "execution": 1
        },
        "71": "std::string result = \"\";\n    do {\n        result = std::to_string(x % base) + result;\n        x /= base;\n    } while (x != 0);\n    return result;",
        "grade-71": {
            "execution": 1
        },
        "63": "assert(base < 10);\n  std::string res;\n  do {\n    auto rem = x % base;\n    res += (char)('0' + rem);\n    x /= base;\n  } while (x);\n  reverse(res.begin(), res.end());\n  return res;",
        "grade-63": {
            "execution": 1
        },
        "58": "std::string str;\n    while (x > 0) {\n        char ch = x % base + '0';\n        str.push_back(ch);\n        x /= base;\n    }\n    reverse(str.begin(), str.end());\n    return str;",
        "grade-58": {
            "execution": 1
        },
        "35": "std::string str;\n    while (x > 0) {\n        str += std::to_string(x % base);\n        x /= base;\n    }\n    std::reverse(str.begin(), str.end());\n    return str;",
        "grade-35": {
            "execution": 1
        },
        "190": "// your code goes here\n    std::string s=\"\";\n    while(x!=0)\n    {\n        int a=x%base;\n        s+=('0'+a);\n        x/=base;\n    }\n    std::reverse(s.begin(),s.end());\n    return s;",
        "grade-190": {
            "execution": 1
        },
        "26": "std::string ans = \"\";\n  while (x > 0) {\n    ans = std::to_string(x % base) + ans;\n    x /= base;\n  }\n  return ans;",
        "grade-26": {
            "execution": 1
        },
        "175": "std::string res = \"\";\n    while (x > 0) {\n        res += ('0' + x % base);\n        x /= base;\n    }\n    std::reverse(res.begin(), res.end());\n    return res;",
        "grade-175": {
            "execution": 1
        },
        "141": "assert(0 < base && base < 10);\n\tstd::string answer;\n\twhile (x != 0) {\n\t\tanswer += (x % base) + '0';\n\t\tx /= base;\n\t}\n\treverse(answer.begin(), answer.end());\n\treturn answer;",
        "grade-141": {
            "execution": 1
        },
        "22": "long q = x, r;\n  std::string s = \"\";\n  do {\n    r = q % base;\n    q = q / base;\n    s += std::to_string(r);\n  } while (q != 0);\n  std::reverse(s.begin(), s.end());\n  return s;",
        "grade-22": {
            "execution": 1
        },
        "153": "if(x < base) {\n        return std::to_string(x);\n    }\n    return change_base(x / base, base) + std::to_string(x % base);",
        "grade-153": {
            "execution": 1
        },
        "109": "std::string ret;\n  while (x > 0) {\n    long mod = x % base;\n    char digit = '0' + mod;\n    ret = digit + ret;\n    x /= base;\n  }\n  return ret;",
        "grade-109": {
            "execution": 1
        },
        "8": "assert(base < 10);\n  std::vector<char> result;\n  do {\n    result.push_back('0' + x % base);\n    x /= base;\n  } while (x);\n  std::reverse(result.begin(), result.end());\n  return std::string(result.begin(), result.end());",
        "grade-8": {
            "execution": 1
        },
        "7": "if(base > 10) {\n        return \"\";\n    }\n    std::string ret = \"\";\n    while(x) {\n        auto rem = x % base;\n        x /= base;\n        ret += (rem + '0');\n    }\n    std::reverse(ret.begin(), ret.end());\n    return ret;",
        "grade-7": {
            "execution": 1
        },
        "23": "if (x == 0) {\n    return \"0\";\n  }\n  std::string s;\n  while (x > 0) {\n    s += std::to_string(x % base);\n    x /= base;\n  }\n  std::reverse(s.begin(), s.end());\n  return s;",
        "grade-23": {
            "execution": 1
        },
        "56": "std::string rep;\n    while (x) {\n        rep.push_back(x % base + '0');\n        x /= base;\n    }\n    std::reverse(rep.begin(), rep.end());\n    return rep;",
        "grade-56": {
            "execution": 1
        },
        "60": "std::string b;\n    for (; x; x /= base) {\n        long t = x % base;\n        b += t + '0';\n    }\n    reverse(b.begin(), b.end());\n    return b;",
        "grade-60": {
            "execution": 1
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n",
        "snippet": [
            "    bool isstart=true;\n    bool isi=false;\n    int sum=0;\n    for (int i=0;i<S.length();i++)\n    {\n        if (S[i]==' ' and isi) {isi=false; sum+=1;}\n        if (S[i]=='I' and isstart) {isi=true;  }\n        else isi=false;   \n        if (S[i]!=' ') { isstart=false;}\n        if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;\n    }\n    return sum;\n}\n"
        ],
        "simplified": "You'll be given a string of words, and your task is to count the number of boredoms. A boredom is a sentence that starts with the word \"I\". Sentences are delimited by '.', '?' or '!'.",
        "task_id": "91",
        "165": "std::stringstream ss(S);\n  std::string item;\n  long line_count = 0;\n  while (std::getline(ss, item, '.')) {\n    if (item.size() > 1 && item[0] == 'I') {\n      line_count++;\n    }\n  }\n  return line_count;",
        "grade-165": {
            "execution": 0
        },
        "28": "// type your solution here\n  long count=0;\n  for(int i=0;i<S.length();i++)\n  {\n    if(S[i]=='I')\n    {\n        count++;\n    }\n  }\n  return count;",
        "grade-28": {
            "execution": 0
        },
        "6": "std::vector<std::string> v;\n  int n = S.length();\n  std::string temp = \"\";\n  for (int i = 0; i < n; i++) {\n    if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n      v.push_back(temp);\n      temp = \"\";\n    } else {\n      temp += S[i];\n    }\n  }\n  long ans = 0;\n  for (auto s : v) {\n    if (s[0] == 'I') {\n      ans++;\n    }\n  }\n  return ans;",
        "grade-6": {
            "execution": 0
        },
        "191": "std::regex reg_exp(\"I.+\");\n    std::smatch matches;\n    long count = 0;\n    while (std::regex_search(S, matches, reg_exp)) {\n        count++;\n        S = matches.suffix().str();\n    }\n    return count;",
        "grade-191": {
            "execution": 0
        },
        "70": "stringstream check1(S);\n    string intermediate;\n    long x=0;\n    while(getline(check1, intermediate, '.')) {\n        stringstream check2(intermediate);\n        string intermediate2;\n        getline(check2, intermediate2, ' ');\n        if(intermediate2==\"I\") x++;\n    }\n    return x;",
        "grade-70": {
            "execution": 0
        },
        "62": "std::transform(S.begin(), S.end(), S.begin(), ::tolower);\n    std::string delimiter = \"?.!\";\n    size_t pos = 0;\n    std::string token;\n    int ans = 0;\n    while ((pos = S.find(delimiter)) != std::string::npos) {\n        token = S.substr(0, pos);\n        if (token.find(\" i \") != std::string::npos || token.find(\" i\\n\") != std::string::npos) {\n            ans++;\n        }\n        S.erase(0, pos + delimiter.length());\n    }\n    if (S.find(\" i \") != std::string::npos || S.find(\" i\\n\") != std::string::npos) {\n        ans++;\n    }\n    return ans;",
        "grade-62": {
            "execution": 0
        },
        "57": "std::string sep = \"!?.\";\n    int count = 0;\n    size_t start = 0;\n    size_t end = 0;\n    while ((end = S.find_first_of(sep, start)) != std::string::npos) {\n        std::string token = S.substr(start, end - start);\n        std::string first = token.substr(0,1);\n        //std::cout << \"Token:\" << token << \";\" << \" first:\" << first << std::endl;\n        if (first == \"I\")\n            count++;\n        start = end + 1;\n    }\n    return count;",
        "grade-57": {
            "execution": 0
        },
        "35": "// TODO: Implement this function\n    if(S.size() == 0)\n        return 0;\n    int isBored = 0;\n    int i = 0;\n    while(i < S.size()){\n        if(S[i] == 'I'){\n            i += 2;\n            if(S[i] == '\\0')\n                return 1;\n            while(S[i] != '.' && S[i] != '?' && S[i] != '!'){\n                i++;\n                if(S[i] == '\\0')\n                    return 1;\n            }\n            isBored++;\n        }\n        i++;\n    }\n    return isBored;",
        "grade-35": {
            "execution": 0
        },
        "190": "long ret = 0;\n  char prev = '0';\n  for (char& c : S) {\n    if (c == 'I' && prev == ' ') {\n      ret++;\n    }\n    prev = c;\n  }\n  return ret;",
        "grade-190": {
            "execution": 0
        },
        "26": "long long boredoms = 0;\n\tfor (int i = 0; i < S.length(); i++) {\n\t\tchar key = S[i];\n\t\tif (key == 'I') {\n\t\t\tboredoms++;\n\t\t}\n\t}\n\treturn boredoms;",
        "grade-26": {
            "execution": 0
        },
        "175": "std::transform(S.begin(), S.end(), S.begin(), ::tolower);\n    std::vector<std::string> v;\n    std::stringstream ss(S);\n    std::string temp;\n    long count=0;\n    while(getline(ss, temp, '.')) {\n        v.push_back(temp);\n    }\n    for(long i=0; i<v.size(); i++) {\n        std::vector<std::string> v1;\n        std::stringstream ss1(v[i]);\n        std::string temp1;\n        while(getline(ss1, temp1, ' ')) {\n            v1.push_back(temp1);\n        }\n        if(v1[0] == \"i\") {\n            count++;\n        }\n    }\n    return count;",
        "grade-175": {
            "execution": 0
        },
        "140": "int num = 0;\n  std::istringstream iss(S);\n  std::string word;\n  while (iss >> word) {\n    if (word == \"I\") {\n      num++;\n    }\n  }\n  return num;",
        "grade-140": {
            "execution": 0
        },
        "22": "long count=0;\n    string word=\"\";\n    for(int i=0;i<S.length();i++){\n        if(S[i]!='.' and S[i]!='!' and S[i]!='?'){\n            word+=S[i];\n        }\n        else{\n            stringstream ss(word);\n            string word1;\n            vector<string> words;\n            while(ss>>word1){\n                words.push_back(word1);\n            }\n            if(words[0]==\"I\"){\n                count++;\n            }\n            word=\"\";\n        }\n    }\n    return count;",
        "grade-22": {
            "execution": 0
        },
        "153": "// split by '.', '?', '!'\n    std::regex regex(\"[!.?]\");\n    std::sregex_token_iterator\n        first{S.begin(), S.end(), regex, -1},\n        last;\n    std::vector<std::string> splitted_string(first, last);\n    // count I\n    std::string str = \"I\";\n    long count = 0;\n    for (int i = 0; i < splitted_string.size(); i++) {\n        // std::cout << splitted_string[i] << '\\n';\n        if (splitted_string[i].find(str) == 0) {\n            count += 1;\n        }\n    }\n    return count;",
        "grade-153": {
            "execution": 0
        },
        "108": "std::stringstream stream(S);\n  std::string word;\n  long count = 0;\n  while (getline(stream, word, ' ')) {\n    if (word == \"I\") {\n      ++count;\n    }\n  }\n  return count;",
        "grade-108": {
            "execution": 0
        },
        "8": "// Your code here\n    long num = 0;\n    for(int i = 0; i < S.length(); i++){\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!'){\n            if(S[i-1] == 'I'){\n                num++;\n            }\n        }\n    }\n    return num;",
        "grade-8": {
            "execution": 0
        },
        "7": "std::string delimiters = \"!?.\";\n    std::vector<std::string> words;\n    std::string word;\n    std::istringstream stream(S);\n    while (std::getline(stream, word, delimiters[0])) {\n        if (std::getline(stream, word, delimiters[1])) {\n            words.push_back(word);\n        }\n        if (std::getline(stream, word, delimiters[2])) {\n            words.push_back(word);\n        }\n    }\n    long boredoms = 0;\n    for (auto word : words) {\n        if (word.find(\"I\") == 0) {\n            boredoms++;\n        }\n    }\n    return boredoms;",
        "grade-7": {
            "execution": 0
        },
        "23": "std::istringstream iss(S);\n  std::string buffer;\n  std::vector<std::string> vec;\n  while (std::getline(iss, buffer, '.')) {\n    vec.push_back(buffer);\n  }\n  long res = 0;\n  std::stringstream ss;\n  for (auto &s : vec) {\n    ss << s;\n    ss >> buffer;\n    if (buffer == \"I\") {\n      res++;\n    }\n    ss.clear();\n  }\n  return res;",
        "grade-23": {
            "execution": 0
        },
        "55": "long ans = 0;\n    long index = 0;\n    while(index < S.length()){\n        if(S[index] == 'I'){\n            if(index == 0 || S[index-1] == '.' || S[index-1] == '?' || S[index-1] == '!'){\n                ans++;\n            }\n        }\n        index++;\n    }\n    return ans;",
        "grade-55": {
            "execution": 0
        },
        "59": "int count = 0;\n    std::vector<std::string> words;\n    std::istringstream buf(S);\n    for(std::string word; buf >> word; )\n        words.push_back(word);\n    for(int i = 0; i < words.size(); i++) {\n        if(words[i] == \"I\") {\n            count++;\n        }\n    }\n    return count;",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nstd::vector<long> count_up_to(long n) {\n",
        "snippet": [
            "    vector<int> out={};\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%out[j]==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}\n"
        ],
        "simplified": "Implement a function that takes an non-negative integer and returns an array of the first n integers that are prime numbers and less than n. for",
        "task_id": "96",
        "163": "std::vector<long> res;\n\tif (n < 2) {\n\t\treturn res;\n\t}\n\tfor (long i = 2; i < n; i++) {\n\t\tbool isPrime = true;\n\t\tfor (long j = 2; j < i; j++) {\n\t\t\tif (i % j == 0) {\n\t\t\t\tisPrime = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (isPrime) {\n\t\t\tres.push_back(i);\n\t\t}\n\t}\n\treturn res;",
        "grade-163": {
            "execution": 1
        },
        "28": "std::vector<long> v;\n    if(n < 2) return v;\n    v.push_back(2);\n    for(long i = 3; i < n; i += 2) {\n        bool prime = true;\n        for(long j = 2; j * j <= i; j++) {\n            if(i % j == 0) {\n                prime = false;\n                break;\n            }\n        }\n        if(prime) v.push_back(i);\n    }\n    return v;",
        "grade-28": {
            "execution": 1
        },
        "6": "std::vector<long> primes;\n  for (int i = 2; i < n; i++) {\n    for (int j = 2; j <= i; j++) {\n      if (i == j) {\n        primes.push_back(i);\n      }\n      if (i % j == 0) {\n        break;\n      }\n    }\n  }\n  return primes;",
        "grade-6": {
            "execution": 1
        },
        "190": "std::vector<long> ans;\n   if(n<2) return ans;\n   ans.push_back(2);\n   for(long i=3;i<n;i+=2){\n      bool isPrime = true;\n      for(int j=0;j<ans.size();j++){\n         if(i%ans[j]==0){\n            isPrime = false;\n            break;\n         }\n      }\n      if(isPrime) ans.push_back(i);\n   }\n   return ans;",
        "grade-190": {
            "execution": 1
        },
        "70": "std::vector<long> out;\n\tfor (long i = 2; i < n; i++) {\n\t\tbool add = true;\n\t\tfor (long j = 2; j < i; j++) {\n\t\t\tif (i % j == 0) {\n\t\t\t\tadd = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (add) out.push_back(i);\n\t}\n\treturn out;",
        "grade-70": {
            "execution": 1
        },
        "62": "int max = std::sqrt(n);\n    std::vector<long> prime;\n    prime.push_back(2);\n    for (int i = 3; i <= n; i += 2) {\n        bool isPrime = true;\n        for (int j = 0; j < prime.size() && prime[j] <= max; j++) {\n            if (i % prime[j] == 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            prime.push_back(i);\n        }\n    }\n    return prime;",
        "grade-62": {
            "execution": 0
        },
        "57": "std::vector<long> primes;\n    for (long i = 2; i < n; i++) {\n        bool isPrime = true;\n        for (long j = 2; j * j <= i; j++) {\n            if (i % j == 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime)\n            primes.push_back(i);\n    }\n    return primes;",
        "grade-57": {
            "execution": 1
        },
        "35": "// your code here...\n    std::vector<long> answer;\n    if(n == 0)\n    {\n        return answer;\n    }\n    else if(n == 1)\n    {\n        return answer;\n    }\n    else if(n == 2)\n    {\n        answer.push_back(2);\n        return answer;\n    }\n    else\n    {\n        long k = 2;\n        while(k < n)\n        {\n            bool prime = true;\n            for(long i = 2; i < k; i++)\n            {\n                if(k % i == 0)\n                {\n                    prime = false;\n                    break;\n                }\n            }\n            if(prime)\n            {\n                answer.push_back(k);\n            }\n            k++;\n        }\n        return answer;\n    }",
        "grade-35": {
            "execution": 1
        },
        "189": "// Write your code here\n    std::vector<long> ret;\n    long prime = 2;\n    while(prime < n){\n        ret.push_back(prime);\n        prime = nextPrime(prime);\n    }\n    return ret;",
        "grade-189": {
            "execution": 0
        },
        "26": "std::vector<long> primes;\n\tfor (long i = 2; i < n; i++) {\n\t\tbool prime = true;\n\t\tfor (long j = 2; j < i; j++) {\n\t\t\tif (i % j == 0) {\n\t\t\t\tprime = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (prime) {\n\t\t\tprimes.push_back(i);\n\t\t}\n\t}\n\treturn primes;",
        "grade-26": {
            "execution": 1
        },
        "173": "std::vector<long> primes;\n  if (n<2) {\n    return primes;\n  }\n  primes.push_back(2);\n  long i = 3;\n  while (i<n) {\n    if (std::all_of(primes.begin(), primes.end(), [i](long n){return i%n!=0;})) {\n      primes.push_back(i);\n    }\n    i+=2;\n  }\n  return primes;",
        "grade-173": {
            "execution": 1
        },
        "139": "std::vector<long> v;\n    long start = 2;\n    while(start <= n) {\n        long curr = start;\n        long i = 2;\n        while(i < curr) {\n            if(curr % i == 0) {\n                break;\n            }\n            i++;\n        }\n        if(i == curr) {\n            v.push_back(curr);\n        }\n        start++;\n    }\n    return v;",
        "grade-139": {
            "execution": 0
        },
        "22": "std::vector<long> res;\n    if(n <= 1) return res;\n    res.push_back(2);\n    for(long i = 3; i < n; i += 2) {\n        bool is_prime = true;\n        for(long j = 3; j <= std::sqrt(i); j += 2) {\n            if(i % j == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n        if(is_prime) res.push_back(i);\n    }\n    return res;",
        "grade-22": {
            "execution": 1
        },
        "151": "std::vector<long> primes;\n    if (n <= 1) {\n        return primes;\n    }\n    std::vector<bool> notPrime(n + 1, false);\n    //for a number i, if the number is not Prime, i*i will not be Prime either\n    //e.g. if 4 is not prime, neither 8,12,16...will be. So we only need to test upto sqrt(n)\n    for (long i = 2; i <= std::sqrt(n); i++) {\n        //if i is Prime\n        if (!notPrime[i]) {\n            for (long j = i * i; j <= n; j += i) {\n                notPrime[j] = true;\n            }\n        }\n    }\n    for (long i = 2; i <= n; i++) {\n        if (!notPrime[i]) {\n            primes.push_back(i);\n        }\n    }\n    return primes;",
        "grade-151": {
            "execution": 0
        },
        "108": "std::vector<long> res;\n\tif (n <= 1) return res;\n\tlong i = 2;\n\tlong s = 0;\n\tlong e = sqrt(n);\n\twhile (i <= e) {\n\t\tfor (int j = 2; j < i; j++) {\n\t\t\tif (i % j == 0) {\n\t\t\t\ts = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (s == 0) {\n\t\t\tres.push_back(i);\n\t\t}\n\t\ti++;\n\t\ts = 0;\n\t}\n\treturn res;",
        "grade-108": {
            "execution": 0
        },
        "8": "std::vector<long> result;\n    std::vector<bool> is_prime;\n    is_prime.resize(n + 1, true);\n    is_prime[0] = false;\n    is_prime[1] = false;\n    long next_prime = 2;\n    while (next_prime <= n) {\n        result.push_back(next_prime);\n        // When finding the next prime, we can start from next_prime * next_prime because:\n        // 1. if we have a k * next_prime, where k < next_prime, this value would have been set\n        // when k is the next_prime;\n        // 2. next_prime * next_prime is the smallest value that is multiple of next_prime that\n        // hasn't been visited\n        for (long i = next_prime * next_prime; i <= n; i += next_prime) {\n            is_prime[i] = false;\n        }\n        // The next prime must be the smallest number that is prime and greater than next_prime.\n        for (long i = next_prime + 1; i <= n; i++) {\n            if (is_prime[i]) {\n                next_prime = i;\n                break;\n            }\n        }\n    }\n    return result;",
        "grade-8": {
            "execution": 0
        },
        "7": "std::vector<long> results;\n    if (n <= 1) {\n        return results;\n    }\n    results.push_back(2);\n    for (long i = 3; i < n; i+=2) {\n        bool isPrime = true;\n        for (int j = 2; j < i; j++) {\n            if (i % j == 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            results.push_back(i);\n        }\n    }\n    return results;",
        "grade-7": {
            "execution": 1
        },
        "23": "std::vector<long> result;\n    int count = 0;\n    for (int i = 2; i < n; i++) {\n        bool flag = true;\n        for (int j = 2; j <= i / 2; j++) {\n            if (i % j == 0) {\n                flag = false;\n                break;\n            }\n        }\n        if (flag) {\n            result.push_back(i);\n        }\n    }\n    return result;",
        "grade-23": {
            "execution": 1
        },
        "55": "std::vector<long> a;\n  if(n<2)\n      return a;\n  a.push_back(2);\n  for(long i=3;i<n;i++)\n  {\n      bool prime=true;\n      for(long j=0;j<a.size();j++)\n      {\n          if(i%a[j]==0)\n          {\n              prime=false;\n              break;\n          }\n      }\n      if(prime)\n      {\n          a.push_back(i);\n      }\n  }\n  return a;",
        "grade-55": {
            "execution": 1
        },
        "59": "std::vector<long> res;\n    if(n < 2)\n        return res;\n    res.push_back(2);\n    int upper = sqrt(n);\n    std::vector<bool> is_prime(n+1, true);\n    for(int i = 3; i <= upper; i+=2) {\n        if(is_prime[i]) {\n            for(int j = i*i; j <= n; j+=i) {\n                is_prime[j] = false;\n            }\n        }\n    }\n    for(int i = 3; i <= n; i+=2) {\n        if(is_prime[i])\n            res.push_back(i);\n    }\n    return res;",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long> incr_list(std::vector<long> l) {\n",
        "snippet": [
            "    for (int i=0;i<l.size();i++)\n        l[i]+=1;\n    return l;\n}\n"
        ],
        "simplified": "Return list with elements incremented by 1.",
        "task_id": "42",
        "32": "int n = l.size();\n  for(int i = 0; i < n; i++) {\n    l[i] += 1;\n  }\n  return l;",
        "grade-32": {
            "execution": 1
        },
        "6": "int i = 0;\n    while(i < l.size()){\n        l[i] = l[i] + 1;\n        i++;\n    }\n    return l;",
        "grade-6": {
            "execution": 1
        },
        "79": "// WRITE YOUR CODE HERE\n    std::vector<long> new_l;\n    for(int i=0;i<l.size();i++){\n        new_l.push_back(l[i]+1);\n    }\n    return new_l;",
        "grade-79": {
            "execution": 1
        },
        "68": "/*if (l.size()==0) {\n        return l;\n    }\n    std::vector<long> m = incr_list(std::vector<long>(l.begin()+1, l.end()));\n    std::vector<long> n(l.size());\n    n[0] = l[0] + 1;\n    for (int i = 1; i < l.size(); i++) {\n        n[i] = m[i-1];\n    }\n    return n;*/\n    std::vector<long> v = l;\n    for (int i = 0; i < v.size(); i++) {\n        v[i]++;\n    }\n    return v;",
        "grade-68": {
            "execution": 1
        },
        "63": "std::vector<long> newList;\n    for(auto i = l.begin(); i != l.end(); i++){\n        newList.push_back(*i + 1);\n    }\n    return newList;",
        "grade-63": {
            "execution": 1
        },
        "39": "// Your code here\n    int n = l.size();\n    std::vector<long> res;\n    for(int i=0;i<n;i++){\n        res.push_back(l[i]+1);\n    }\n    return res;",
        "grade-39": {
            "execution": 1
        },
        "30": "std::vector<long> inc_list;\n    for(auto& i : l)\n        inc_list.push_back(i+1);\n    return inc_list;",
        "grade-30": {
            "execution": 1
        },
        "174": "std::vector<long> tmp;\n    long size = l.size();\n    for(int i = 0; i < size; i++) {\n        tmp.push_back(l[i] + 1);\n    }\n    return tmp;",
        "grade-174": {
            "execution": 1
        },
        "26": "std::vector<long>::iterator it;\n  for(it = l.begin(); it != l.end(); it++)\n  {\n      (*it)++;\n  }\n  return l;",
        "grade-26": {
            "execution": 1
        },
        "188": "std::vector<long> m;\n\tstd::vector<long>::iterator it;\n\tfor (it = l.begin(); it != l.end(); it++) {\n\t\tm.push_back((*it) + 1);\n\t}\n\treturn m;",
        "grade-188": {
            "execution": 1
        },
        "132": "std::vector<long> ret_list;\n  for(int i=0;i<l.size();i++){\n    ret_list.push_back(l[i]+1);\n  }\n  return ret_list;",
        "grade-132": {
            "execution": 1
        },
        "9": "std::vector<long> ret;\n    for (int i = 0; i < l.size(); i++) {\n        ret.push_back(l[i] + 1);\n    }\n    return ret;",
        "grade-9": {
            "execution": 1
        },
        "8": "std::vector<long> res;\n    for(int i=0;i<l.size();i++){\n        res.push_back(l[i]+1);\n    }\n    return res;",
        "grade-8": {
            "execution": 1
        },
        "27": "std::vector<long> l1;\n\tfor (int i = 0; i < l.size(); i++) {\n\t\tl1.push_back(l[i] + 1);\n\t}\n\treturn l1;",
        "grade-27": {
            "execution": 1
        },
        "60": "std::vector<long> newList;\n    for(auto element : l){\n        newList.push_back(element+1);\n    }\n    return newList;",
        "grade-60": {
            "execution": 1
        },
        "65": "std::vector<long> result;\n    for (long i = 0; i < l.size(); i++) {\n        result.push_back(l[i] + 1);\n    }\n    return result;",
        "grade-65": {
            "execution": 1
        },
        "162": "std::vector<long> temp;\n    for(int i=0;i<l.size();i++){\n        temp.push_back(l[i]+1);\n    }\n    return temp;",
        "grade-162": {
            "execution": 1
        },
        "191": "int size = l.size();\n    std::vector<long> ret;\n    for(int i = 0; i < size; i++) {\n        ret.push_back(l[i] + 1);\n    }\n    return ret;",
        "grade-191": {
            "execution": 1
        },
        "179": "for(auto &i:l)\n    {\n        i++;\n    }\n    return l;",
        "grade-179": {
            "execution": 1
        },
        "55": "std::vector<long> result;\n    for (long x : l) {\n        result.push_back(x + 1);\n    }\n    return result;",
        "grade-55": {
            "execution": 1
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1, 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n",
        "snippet": [
            "    int num=0;\n    for (int i=0;i<n.size();i++)\n        if (n[i]>0) num+=1;\n        else\n        {\n            int sum=0;\n            int w;\n            w=abs(n[i]);\n            while (w>=10)\n            {\n                sum+=w%10;\n                w=w/10;\n            }\n            sum-=w;\n            if (sum>0) num+=1;\n        }\n    return num;\n}\n"
        ],
        "simplified": "Write a function count_nums which takes an array of integers and returns the number of elements which has a sum of digits > 0. If a number is negative, then its first signed digit will be negative: e.g. -123 has signed digits -1, 2, and 3.",
        "task_id": "108",
        "164": "long pos_sum = 0;\n  for (int i = 0; i < arr.size(); i++) {\n    long num = arr[i];\n    long sum = 0;\n    if (num < 0) {\n      sum += num % 10;\n      num /= 10;\n    }\n    while (num > 0) {\n      sum += num % 10;\n      num /= 10;\n    }\n    if (sum > 0) {\n      pos_sum++;\n    }\n  }\n  return pos_sum;",
        "grade-164": {
            "execution": 0
        },
        "28": "int len = arr.size();\n    long res = 0;\n    for (int i = 0; i < len; i++) {\n        int sum = 0;\n        if (arr[i] >= 0) {\n            int num = arr[i];\n            while (num) {\n                sum += num % 10;\n                num /= 10;\n            }\n        } else {\n            int num = -arr[i];\n            while (num) {\n                sum += num % 10;\n                num /= 10;\n            }\n            sum = -sum;\n        }\n        if (sum) res++;\n    }\n    return res;",
        "grade-28": {
            "execution": 0
        },
        "6": "// YOUR CODE HERE\n    long ans = 0;\n    for(int i = 0; i < arr.size(); i++){\n        long temp = arr[i];\n        int sum = 0;\n        while(temp != 0){\n            sum += temp % 10;\n            temp /= 10;\n        }\n        if(sum > 0){\n            ans++;\n        }\n    }\n    return ans;",
        "grade-6": {
            "execution": 0
        },
        "191": "int count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] < 0) {\n            arr[i] = -1 * arr[i];\n        }\n        int sum = 0;\n        while (arr[i] > 0) {\n            sum += arr[i] % 10;\n            arr[i] /= 10;\n        }\n        if (sum > 0) {\n            count++;\n        }\n    }\n    return count;",
        "grade-191": {
            "execution": 0
        },
        "70": "long count = 0;\n    if (arr.size() == 0) {\n        return 0;\n    } else {\n        for (long i = 0; i < arr.size(); i++) {\n            if (arr[i] > 0) {\n                while (arr[i] > 0) {\n                    count += arr[i] % 10;\n                    arr[i] /= 10;\n                }\n            } else {\n                while (arr[i] < 0) {\n                    count += arr[i] % 10;\n                    arr[i] /= 10;\n                }\n            }\n        }\n    }\n    return count;",
        "grade-70": {
            "execution": 0
        },
        "62": "long size=arr.size();\n    if(size==0)\n        return 0;\n    long count=0;\n    for(long i=0;i<size;i++)\n    {\n        long num=arr[i];\n        if(num<0)\n            num*=-1;\n        long num_digits=log10(num)+1;\n        int sum=0;\n        while(num!=0)\n        {\n            int digit=num%10;\n            sum+=digit;\n            num/=10;\n        }\n        if(sum>0)\n            count++;\n    }\n    return count;",
        "grade-62": {
            "execution": 0
        },
        "57": "long total=0;\n\tfor(int i=0;i<arr.size();i++){\n\t\tif(arr[i]>0){\n\t\t\tif(arr[i]>=100000){\n\t\t\t\ttotal=total+1;\n\t\t\t}\n\t\t\telse if(arr[i]>=10000){\n\t\t\t\tlong x=arr[i]/10000;\n\t\t\t\tlong y=arr[i]%10000;\n\t\t\t\ty=y/1000;\n\t\t\t\tlong z=arr[i]%1000;\n\t\t\t\tz=z/100;\n\t\t\t\tlong m=arr[i]%100;\n\t\t\t\tm=m/10;\n\t\t\t\tlong n=arr[i]%10;\n\t\t\t\ttotal=total+x+y+z+m+n;\n\t\t\t}\n\t\t\telse if(arr[i]>=1000){\n\t\t\t\tlong x=arr[i]/1000;\n\t\t\t\tlong y=arr[i]%1000;\n\t\t\t\ty=y/100;\n\t\t\t\tlong z=arr[i]%100;\n\t\t\t\tz=z/10;\n\t\t\t\tlong m=arr[i]%10;\n\t\t\t\ttotal=total+x+y+z+m;\n\t\t\t}\n\t\t\telse if(arr[i]>=100){\n\t\t\t\tlong x=arr[i]/100;\n\t\t\t\tlong y=arr[i]%100;\n\t\t\t\ty=y/10;\n\t\t\t\tlong z=arr[i]%10;\n\t\t\t\ttotal=total+x+y+z;\n\t\t\t}\n\t\t\telse if(arr[i]>=10){\n\t\t\t\tlong x=arr[i]/10;\n\t\t\t\tlong y=arr[i]%10;\n\t\t\t\ttotal=total+x+y;\n\t\t\t}\n\t\t\telse if(arr[i]>=1){\n\t\t\t\ttotal=total+",
        "grade-57": {
            "execution": 0
        },
        "35": "if (arr.size() == 0) {\n    return 0;\n  }\n  long count = 0;\n  for (long i = 0; i < arr.size(); i++) {\n    long num = arr[i];\n    long sum = 0;\n    long dig = 0;\n    if (num < 0) {\n      dig = -1;\n    }\n    while (num != 0) {\n      if (dig == -1) {\n        sum += -(num % 10);\n      } else {\n        sum += num % 10;\n      }\n      num /= 10;\n      dig = 1;\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;",
        "grade-35": {
            "execution": 0
        },
        "190": "if (arr.size() == 0) {\n\t\treturn 0;\n\t}\n\tlong sum = 0;\n\tlong count = 0;\n\tfor (auto it = arr.begin(); it != arr.end(); it++) {\n\t\tif (*it < 0) {\n\t\t\tsum += (*it) * -1;\n\t\t}\n\t\telse {\n\t\t\tsum += *it;\n\t\t}\n\t\tif (sum > 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;",
        "grade-190": {
            "execution": 0
        },
        "26": "// Your code here\n    long count=0;\n    for(long i=0;i<arr.size();i++)\n    {\n        long sum=0;\n        if(arr[i]<0)\n        {\n            sum=arr[i]%10;\n            arr[i]=arr[i]/10;\n        }\n        while(arr[i]!=0)\n        {\n            sum+=arr[i]%10;\n            arr[i]=arr[i]/10;\n        }\n        if(sum>0)\n        {\n            count++;\n        }\n    }\n    return count;",
        "grade-26": {
            "execution": 0
        },
        "174": "// YOUR CODE HERE\n    long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long num = arr[i];\n        long sum = 0;\n        if (num < 0) {\n            num = num * -1;\n        }\n        while (num != 0) {\n            sum += num % 10;\n            num = num / 10;\n        }\n        if (sum > 0) {\n            count++;\n        }\n    }\n    return count;",
        "grade-174": {
            "execution": 0
        },
        "140": "long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        long x = 0;\n        if (arr[i] < 0) {\n            x = arr[i] * -1;\n        } else {\n            x = arr[i];\n        }\n        while (x > 0) {\n            count = count + x % 10;\n            x = x / 10;\n        }\n        if (count > 0) {\n            count = count + 1;\n        }\n    }\n    return count;",
        "grade-140": {
            "execution": 0
        },
        "22": "if (arr.size() == 0) {\n    return 0;\n  }\n  int count = 0;\n  for (size_t i = 0; i < arr.size(); i++) {\n    int sum = 0;\n    int num = arr[i];\n    if (num < 0) {\n      sum += num * -1;\n    } else {\n      sum += num;\n    }\n    while (sum > 0) {\n      sum -= sum % 10;\n      sum /= 10;\n    }\n    if (sum < 0) {\n      count++;\n    }\n  }\n  return count;",
        "grade-22": {
            "execution": 0
        },
        "152": "long count = 0;\n  for (auto num : arr) {\n    long total = 0;\n    if (num == 0)\n      total = 0;\n    else if (num < 0) {\n      num = -num;\n      total += -(num % 10);\n      num /= 10;\n    }\n    else {\n      total += num % 10;\n      num /= 10;\n    }\n    while (num > 0) {\n      total += num % 10;\n      num /= 10;\n    }\n    if (total > 0)\n      count++;\n  }\n  return count;",
        "grade-152": {
            "execution": 0
        },
        "108": "long count = 0;\n\tfor (long i = 0; i < arr.size(); i++) {\n\t\tlong sum = 0;\n\t\tstd::string str = std::to_string(arr[i]);\n\t\tif (arr[i] < 0) {\n\t\t\tsum += str[0] - '0';\n\t\t}\n\t\tfor (long j = 0; j < str.size(); j++) {\n\t\t\tsum += str[j] - '0';\n\t\t}\n\t\tif (sum > 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;",
        "grade-108": {
            "execution": 0
        },
        "8": "long count = 0;\n    for (auto i = arr.begin(); i != arr.end(); i++) {\n        long a = *i;\n        long sum = 0;\n        while (a != 0) {\n            sum += a % 10;\n            a /= 10;\n        }\n        if (sum > 0)\n            count++;\n    }\n    return count;",
        "grade-8": {
            "execution": 0
        },
        "7": "long sum = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        int l = 0;\n        if (arr[i] < 0) {\n            arr[i] = arr[i] * -1;\n            l = 1;\n        }\n        while (arr[i] != 0) {\n            sum = sum + arr[i] % 10;\n            arr[i] = arr[i] / 10;\n        }\n        if (l == 1) {\n            sum = sum * -1;\n        }\n        if (sum > 0) {\n            sum = 0;\n            continue;\n        }\n        else if (sum < 0) {\n            sum = 0;\n            arr[i] = arr[i] * -1;\n            continue;\n        }\n        else if (sum == 0) {\n            sum = 0;\n            arr[i] = arr[i] * -1;\n            continue;\n        }\n    }\n    return arr.size();",
        "grade-7": {
            "execution": 0
        },
        "23": "// write your code here\n\n  long count=0;\n  long len = arr.size();\n  for(long i=0;i<len;i++)\n  {\n    long temp = arr[i];\n    long sum = 0;\n    if(temp>0)\n    {\n      while(temp>0)\n      {\n        sum += temp%10;\n        temp /= 10;\n      }\n    }\n    else\n    {\n      while(temp!=0)\n      {\n        sum += temp%10;\n        temp /= 10;\n      }\n    }\n    if(sum>0)\n    {\n      count++;\n    }\n  }\n  return count;",
        "grade-23": {
            "execution": 0
        },
        "55": "long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        std::string s = std::to_string(arr[i]);\n        long sum = 0;\n        for (char x : s) {\n            int digit = x - '0';\n            if (digit < 0)\n                digit = -digit;\n            sum += digit;\n        }\n        if (sum > 0)\n            count++;\n    }\n    return count;",
        "grade-55": {
            "execution": 0
        },
        "59": "if (arr.size() == 0) {\n\t\treturn 0;\n\t}\n\tint count = 0;\n\tfor (int i = 0; i < arr.size(); i++) {\n\t\tint sum = 0;\n\t\tif (arr[i] < 0) {\n\t\t\tarr[i] = arr[i] * -1;\n\t\t}\n\t\tif (arr[i] == 0) {\n\t\t\tcount += 1;\n\t\t}\n\t\twhile (arr[i] != 0) {\n\t\t\tsum += arr[i] % 10;\n\t\t\tarr[i] = arr[i] / 10;\n\t\t}\n\t\tif (sum > 0) {\n\t\t\tcount += 1;\n\t\t}\n\t}\n\treturn count;",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which sorts the given list of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long> nums) {\n",
        "snippet": [
            "    vector<int> sumdigit={};\n    for (int i=0;i<nums.size();i++)\n    {\n        string w=to_string(abs(nums[i]));\n        int sum=0;\n        for (int j=1;j<w.length();j++)\n            sum+=w[j]-48;\n        if (nums[i]>0) sum+=w[0]-48;\n        else sum-=w[0]-48;\n        sumdigit.push_back(sum);\n    }\n    int m;\n    for (int i=0;i<nums.size();i++)\n    for (int j=1;j<nums.size();j++)\n    if (sumdigit[j-1]>sumdigit[j])\n    {\n        m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;\n        m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;\n    }\n     \n    return nums;\n}\n"
        ],
        "simplified": "Write a function which sorts the given list of integers in ascending order according to the sum of their digits. Note: if there are several items with similar sum of their digits, order them based on their index in original list.",
        "task_id": "145",
        "163": "std::vector<long> nums_with_indices;\n    for (auto &n : nums) {\n        nums_with_indices.push_back(n);\n    }\n    for (int i = 0; i < nums.size(); i++) {\n        nums_with_indices[i] = std::abs(nums[i]) * 10000 + i;\n    }\n    sort(nums_with_indices.begin(), nums_with_indices.end());\n    std::vector<long> result;\n    for (auto &n : nums_with_indices) {\n        result.push_back(nums[n % 10000]);\n    }\n    return result;",
        "grade-163": {
            "execution": 0
        },
        "28": "std::vector<long> res;\n    std::map<long, std::vector<long>> m;\n    long n;\n    for (long i = 0; i < nums.size(); i++) {\n        long value = nums[i];\n        long sum = 0;\n        while (value != 0) {\n            n = value % 10;\n            sum += n;\n            value /= 10;\n        }\n        m[sum].push_back(nums[i]);\n    }\n    for (auto& x : m) {\n        for (auto& y : x.second) {\n            res.push_back(y);\n        }\n    }\n    return res;",
        "grade-28": {
            "execution": 0
        },
        "6": "int n = nums.size();\n  std::vector<long> res;\n  std::vector<int> sums;\n  for (int i = 0; i < n; i++) {\n    int temp = nums[i];\n    int sum = 0;\n    while (temp != 0) {\n      sum += temp % 10;\n      temp /= 10;\n    }\n    sums.push_back(sum);\n  }\n  std::vector<std::pair<int, int>> temp;\n  for (int i = 0; i < n; i++) {\n    temp.push_back(std::make_pair(sums[i], nums[i]));\n  }\n  std::sort(temp.begin(), temp.end());\n  for (int i = 0; i < n; i++) {\n    res.push_back(temp[i].second);\n  }\n  return res;",
        "grade-6": {
            "execution": 0
        },
        "189": "std::vector<long> result;\n   long temp1;\n   long temp2;\n   long sum_digits;\n   for(auto num : nums){\n      temp1 = num;\n      sum_digits = 0;\n      if(num < 0){\n         temp1 = temp1 * -1;\n      }\n      while(temp1){\n         temp2 = temp1 % 10;\n         sum_digits += temp2;\n         temp1 = temp1 / 10;\n      }\n      result.push_back(sum_digits);\n   }\n   std::vector<long>::iterator it;\n   int len = result.size();\n   for(int i = 0; i < len - 1; i++){\n      for(int j = 0; j < len - i - 1; j++){\n         if(result[j] > result[j + 1]){\n            it = nums.begin() + j;\n            std::iter_swap(it, it + 1);\n            it = result.begin() + j;\n            std::iter_swap(it, it + 1);\n         }\n      }\n   }\n   return nums;",
        "grade-189": {
            "execution": 0
        },
        "70": "std::vector<std::pair<long, int>> sums;\n    for (auto it = nums.begin(); it != nums.end(); ++it) {\n        sums.push_back(std::make_pair(std::abs(*it), *it));\n    }\n    // Sort vector of pairs by the first field\n    // in ascending order\n    std::sort(sums.begin(), sums.end());\n    // Extract values from pairs\n    for (auto it = sums.begin(); it != sums.end(); ++it) {\n        it->first = it->second;\n    }\n    std::vector<long> res;\n    for (auto it = sums.begin(); it != sums.end(); ++it) {\n        res.push_back(it->first);\n    }\n    return res;",
        "grade-70": {
            "execution": 0
        },
        "62": "//TODO: Write your code here\n    std::vector<long> result(nums.size());\n    std::vector<long> digits;\n    long sum = 0;\n    long min = 0;\n    long max = 0;\n    for(int i = 0; i < nums.size(); i++){\n        if(nums[i] < 0){\n            nums[i] = std::abs(nums[i]);\n        }\n        if(nums[i] < 10){\n            digits.push_back(nums[i]);\n        }else{\n            sum = 0;\n            int count = 0;\n            long rem = 0;\n            while(nums[i] != 0){\n                rem = nums[i] % 10;\n                sum += rem;\n                nums[i] = nums[i] / 10;\n                count++;\n            }\n            digits.push_back(sum);\n        }\n    }\n    std::sort(digits.begin(), digits.end());\n    int j = 0;\n    for(int i = 0; i < digits.size(); i++){\n        j = 0;\n        for(j = 0; j < nums.size(); j++){\n            if(digits[i] == nums[j]){\n                result[i] = nums[j];\n                nums[j] = 0;\n                break;\n            }\n        }\n        if(j == nums.size()){\n            for(j = 0; j < nums.size(); j++){\n                if(digits[i] == std::abs(nums[j])){\n                    result[i] = nums[j];\n                    nums[j] = 0;\n                    break;\n                }\n            }\n        }\n    }\n    return result;",
        "grade-62": {
            "execution": 0
        },
        "57": "// Write your code here\n    std::vector<std::pair<long, int>> myVec;\n    for (int i = 0; i < nums.size(); i++) {\n        std::pair<long, int> p(nums[i], i);\n        myVec.push_back(p);\n    }\n    std::vector<long> result;\n    auto compSum = [](std::pair<long, int> a, std::pair<long, int> b) {\n                                                                    int i = std::to_string(a.first).size();\n                                                                    int sum1 = 0;\n                                                                    int sum2 = 0;\n                                                                    for (int j = 0; j < i; j++) {\n                                                                        sum1 += std::to_string(a.first)[j] - '0';\n                                                                        sum2 += std::to_string(b.first)[j] - '0';\n                                                                    }\n                                                                    if (sum1 == sum2)\n                                                                        return a.second < b.second;\n                                                                    return sum1 < sum2;\n                                                                };\n    std::sort(myVec.begin(), myVec.end(), compSum);\n    for (int i = 0; i < myVec.size(); i++) {\n        result.push_back(myVec[i].first);\n    }\n    return result;",
        "grade-57": {
            "execution": 0
        },
        "35": "// map to hold number and its index\n    std::map<int, int> nums_map;\n    // vector to hold number in sorted order\n    std::vector<long> output;\n    // loop through input vector to find sum of digits for each number\n    for (int i = 0; i < nums.size(); i++) {\n        long num = nums[i];\n        int sum = 0;\n        while (num != 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        // store sum of digits and index\n        nums_map[sum] = i;\n    }\n    // sort map in ascending order by sum of digits\n    std::map<int, int>::iterator it;\n    for (it = nums_map.begin(); it != nums_map.end(); it++) {\n        // loop through map and insert number into output\n        // in ascending order of sum of digits\n        output.push_back(nums[it->second]);\n    }\n    return output;",
        "grade-35": {
            "execution": 0
        },
        "188": "std::vector<long> ordered_nums;\n  std::vector<int>  nums_to_sort;\n  std::vector<int>  ordered_nums_to_sort;\n  for (long num : nums) {\n    int sum = 0;\n    int test = num;\n    while (test != 0) {\n      sum += test % 10;\n      test /= 10;\n    }\n    nums_to_sort.push_back(sum);\n  }\n  ordered_nums_to_sort = nums_to_sort;\n  std::sort(ordered_nums_to_sort.begin(), ordered_nums_to_sort.end());\n  for (int i = 0; i < ordered_nums_to_sort.size(); i++) {\n    for (int j = 0; j < nums_to_sort.size(); j++) {\n      if (ordered_nums_to_sort[i] == nums_to_sort[j]) {\n        ordered_nums.push_back(nums[j]);\n        nums_to_sort[j] = INT_MAX;\n        break;\n      }\n    }\n  }\n  return ordered_nums;",
        "grade-188": {
            "execution": 0
        },
        "26": "int len = nums.size();\n\tstd::vector<long> result(len);\n\tint sum = 0;\n\tfor (int i = 0; i < len; i++) {\n\t\tsum = 0;\n\t\tif (nums[i] > 0) {\n\t\t\twhile (nums[i] > 0) {\n\t\t\t\tsum += nums[i] % 10;\n\t\t\t\tnums[i] /= 10;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\twhile (nums[i] < 0) {\n\t\t\t\tsum += -(nums[i] % 10);\n\t\t\t\tnums[i] /= 10;\n\t\t\t}\n\t\t}\n\t\tnums[i] = sum;\n\t}\n\tfor (int i = 0; i < len; i++) {\n\t\tif (i != len - 1) {\n\t\t\tfor (int j = i + 1; j < len; j++) {\n\t\t\t\tif (nums[i] > nums[j]) {\n\t\t\t\t\tswap(nums[i], nums[j]);\n\t\t\t\t\tswap(result[i], result[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;",
        "grade-26": {
            "execution": 0
        },
        "173": "std::vector<std::pair<int, long>> sums;\n\tstd::vector<long> result;\n\tfor (int i = 0; i < nums.size(); i++) {\n\t\tint sum = 0;\n\t\tfor (int j = nums[i]; j > 0; j /= 10)\n\t\t\tsum += j % 10;\n\t\tsums.push_back(std::make_pair(sum, nums[i]));\n\t}\n\tstd::sort(sums.begin(), sums.end());\n\tfor (int i = 0; i < sums.size(); i++)\n\t\tresult.push_back(sums[i].second);\n\treturn result;",
        "grade-173": {
            "execution": 0
        },
        "139": "std::vector<long> myvec(nums.size());\n    std::vector<long> copy_nums(nums.size());\n    std::copy(nums.begin(), nums.end(), copy_nums.begin());\n    std::sort(copy_nums.begin(), copy_nums.end());\n    std::sort(nums.begin(), nums.end(), [](long a, long b) {\n        return (std::abs(a) % 10 + std::abs(a) / 10) < (std::abs(b) % 10 + std::abs(b) / 10);\n    });\n    for (int i = 0; i < nums.size(); i++) {\n        for (int j = 0; j < nums.size(); j++) {\n            if (nums[i] == copy_nums[j]) {\n                myvec[j] = nums[i];\n            }\n        }\n    }\n    return myvec;",
        "grade-139": {
            "execution": 0
        },
        "22": "int len = nums.size();\n    for(int i = 0; i < len; i++) {\n        for(int j = 0; j < len - i - 1; j++) {\n            if(sum(nums[j]) > sum(nums[j + 1])) {\n                std::swap(nums[j], nums[j + 1]);\n            }\n        }\n    }\n    return nums;",
        "grade-22": {
            "execution": 0
        },
        "151": "std::vector<long> order_num;\n    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        while (nums[i] != 0) {\n            sum += nums[i] % 10;\n            nums[i] /= 10;\n        }\n        order_num.push_back(sum);\n        sum = 0;\n    }\n    for (long i = 0; i < nums.size(); i++) {\n        for (long j = i + 1; j < nums.size(); j++) {\n            if (order_num[i] > order_num[j]) {\n                std::swap(order_num[i], order_num[j]);\n                std::swap(nums[i], nums[j]);\n            }\n        }\n    }\n    return nums;",
        "grade-151": {
            "execution": 0
        },
        "108": "int n = nums.size();\n    std::vector<std::pair<int, int>> v(n);\n    std::vector<long> ans(n);\n    for (int i = 0; i < n; i++) {\n        int num = nums[i];\n        int sum = 0;\n        while (num) {\n            sum += num % 10;\n            num /= 10;\n        }\n        v[i] = {sum, i};\n    }\n    std::sort(v.begin(), v.end());\n    for (int i = 0; i < n; i++) {\n        ans[i] = nums[v[i].second];\n    }\n    return ans;",
        "grade-108": {
            "execution": 0
        },
        "8": "std::vector<long>::iterator it;\n  std::vector<long>result;\n  std::map<long,long> nums_map;\n  long sum=0;\n  if(nums.size() == 0) return nums;\n  for(it=nums.begin();it!=nums.end();it++){\n    sum=0;\n    long num=*it;\n    while(num!=0){\n      sum+=num%10;\n      num/=10;\n    }\n    nums_map[sum]=*it;\n  }\n  for(std::map<long,long>::iterator i=nums_map.begin();i!=nums_map.end();i++){\n    result.push_back(i->second);\n  }\n  return result;",
        "grade-8": {
            "execution": 0
        },
        "7": "std::vector<long> nums2;\n    nums2 = nums;\n    int i;\n    long temp=0;\n    int sum=0;\n    long temp2=0;\n    int sum2=0;\n    for(i=0;i<nums.size();i++)\n    {\n        while(nums[i]>0)\n        {\n            temp = nums[i]%10;\n            sum = sum + temp;\n            nums[i] = nums[i]/10;\n        }\n    }\n    for(i=0;i<nums2.size();i++)\n    {\n        while(nums2[i]>0)\n        {\n            temp2 = nums2[i]%10;\n            sum2 = sum2 + temp2;\n            nums2[i] = nums2[i]/10;\n        }\n    }\n    std::vector<long> nums3;\n    long temp3=0;\n    long temp4=0;\n    long temp5=0;\n    long temp6=0;\n    long temp7=0;\n    long temp8=0;\n    long temp9=0;\n    int sum3=0;\n    int sum4=0;\n    int sum5=0;\n    int sum6=0;\n    int sum7=0;\n    int sum8=0;\n    int sum9=0;\n    while(nums3.size() < nums.size())\n    {\n        for(i=0;i<nums.size();i++)\n        {\n            temp3 = nums[i]%10;\n            sum3 = sum3 + temp3;\n            nums[i] = nums[i]/10;\n        }\n        for(i=0;i<nums2.size();i++)\n        {\n            temp4 = nums2[i]%10;\n            sum4 = sum4 + temp4;\n            nums2[i] = nums2[i]/10;\n        }\n        if(sum3 < sum4)\n        {\n            nums3.push",
        "grade-7": {
            "execution": 0
        },
        "23": "for(auto &num : nums) {\n        num = abs(num);\n    }\n    std::vector<long> sums(nums.size());\n    std::vector<long> answers(nums.size());\n    std::iota(answers.begin(), answers.end(), 0);\n    std::sort(answers.begin(), answers.end(),\n              [&nums](const int &first, const int &second) {\n                  long firstSum = 0;\n                  long secondSum = 0;\n                  while(nums[first] != 0) {\n                      firstSum += nums[first] % 10;\n                      nums[first] /= 10;\n                  }\n                  while(nums[second] != 0) {\n                      secondSum += nums[second] % 10;\n                      nums[second] /= 10;\n                  }\n                  return firstSum < secondSum;\n              });\n    std::transform(answers.begin(), answers.end(), sums.begin(),\n                   [&nums](const int &index) { return nums[index]; });\n    return sums;",
        "grade-23": {
            "execution": 0
        },
        "55": "std::vector<long> result;\n    std::map<long,std::vector<long>> indices;\n    for(int i=0;i<nums.size();i++){\n        int total=0;\n        int num=nums[i];\n        if(num<0){\n            num=num*-1;\n        }\n        while(num>0){\n            total+=num%10;\n            num=num/10;\n        }\n        indices[total].push_back(nums[i]);\n    }\n    for(auto it=indices.begin();it!=indices.end();it++){\n        for(int i=0;i<it->second.size();i++){\n            result.push_back(it->second[i]);\n        }\n    }\n    return result;",
        "grade-55": {
            "execution": 0
        },
        "59": "std::vector<long> result, values;\n    int sum{}, temp{};\n    for(int i=0; i<nums.size(); i++){\n        temp = nums[i];\n        sum = 0;\n        if(temp<0){\n            temp = temp*(-1);\n        }\n        while(temp!=0){\n            sum = sum + temp%10;\n            temp = temp/10;\n        }\n        values.push_back(sum);\n    }\n    std::vector<long> original = nums;\n    int minIndex{}, minValue{};\n    while(values.size()!=0){\n        minValue = values[0];\n        minIndex = 0;\n        for(int i=0; i<values.size(); i++){\n            if(values[i]<minValue){\n                minValue = values[i];\n                minIndex = i;\n            }\n        }\n        for(int i=0; i<original.size(); i++){\n            if(original[i]==nums[minIndex]){\n                result.push_back(original[i]);\n                original.erase(original.begin()+i);\n                nums.erase(nums.begin()+minIndex);\n                values.erase(values.begin()+minIndex);\n                break;\n            }\n        }\n    }\n    return result;",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output should be -126\nlong sum_squares(std::vector<long> lst) {\n",
        "snippet": [
            "    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=lst[i]*lst[i];\n        else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];\n        else sum+=lst[i];\n    return sum;\n}\n"
        ],
        "simplified": "\" This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.",
        "task_id": "142",
        "188": "long sum = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (i % 3 == 0) sum += lst[i] * lst[i];\n        else if (i % 4 == 0) sum += lst[i] * lst[i] * lst[i];\n        else sum += lst[i];\n    }\n    return sum;",
        "grade-188": {
            "execution": 1
        },
        "30": "long sum=0;\n  for(int i=0;i<lst.size();i++){\n    if(i%3==0){\n      sum+=lst[i]*lst[i];\n    }\n    else if(i%4==0){\n      sum+=lst[i]*lst[i]*lst[i];\n    }\n    else{\n      sum+=lst[i];\n    }\n  }\n  return sum;",
        "grade-30": {
            "execution": 1
        },
        "7": "long sum = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (i % 3 == 0) {\n\t\t\tsum += lst[i] * lst[i];\n\t\t}\n\t\telse if (i % 4 == 0 && i % 3 != 0) {\n\t\t\tsum += lst[i] * lst[i] * lst[i];\n\t\t}\n\t\telse {\n\t\t\tsum += lst[i];\n\t\t}\n\t}\n\treturn sum;",
        "grade-7": {
            "execution": 1
        },
        "79": "int len = lst.size();\n\tlong sum = 0;\n\tfor (int i = 0; i < len; i++) {\n\t\tif (i % 3 == 0) {\n\t\t\tlst[i] = lst[i] * lst[i];\n\t\t}\n\t\tif (i % 4 == 0 && i % 3 != 0) {\n\t\t\tlst[i] = lst[i] * lst[i] * lst[i];\n\t\t}\n\t\tsum += lst[i];\n\t}\n\treturn sum;",
        "grade-79": {
            "execution": 1
        },
        "67": "long sum = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (i % 3 == 0) {\n\t\t\tsum += pow(lst[i], 2);\n\t\t}\n\t\telse if (i % 4 == 0 && i % 3 != 0) {\n\t\t\tsum += pow(lst[i], 3);\n\t\t}\n\t\telse {\n\t\t\tsum += lst[i];\n\t\t}\n\t}\n\treturn sum;",
        "grade-67": {
            "execution": 1
        },
        "61": "// This will be used to sum the values in the vector.\n  long result = 0;\n  // This is to get the lenght of the vector.\n  int n = lst.size();\n  // This will iterate through all of the elements in the vector.\n  for (int i = 0; i < n; i++) {\n    //This is to check if the current index is a multiple of 3.\n    if (i % 3 == 0) {\n      // This is to set the current element to its square.\n      lst[i] = lst[i] * lst[i];\n    }\n    // This is to check if the current index is a multiple of 4 and not a multiple of 3.\n    else if (i % 4 == 0 && i % 3 != 0) {\n      // This is to set the current element to its cube.\n      lst[i] = lst[i] * lst[i] * lst[i];\n    }\n    // This is to sum the values in the vector.\n    result += lst[i];\n  }\n  // This will return the sum of the elements in the vector.\n  return result;",
        "grade-61": {
            "execution": 1
        },
        "38": "// write your code here\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i % 3 == 0 && i % 4 != 0){\n            sum += lst[i] * lst[i];\n        }\n        else if(i % 4 == 0 && i % 3 != 0){\n            sum += lst[i] * lst[i] * lst[i];\n        }\n        else{\n            sum += lst[i];\n        }\n    }\n    return sum;",
        "grade-38": {
            "execution": 0
        },
        "28": "int sz = lst.size();\n  long sum = 0;\n  for(int i = 0; i < sz; i++) {\n    if(i % 3 == 0)\n      lst[i] = lst[i] * lst[i];\n    else if(i % 4 == 0 && i % 3 != 0)\n      lst[i] = lst[i] * lst[i] * lst[i];\n    sum += lst[i];\n  }\n  return sum;",
        "grade-28": {
            "execution": 1
        },
        "160": "assert(true);\n\tlong sum = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (i % 3 == 0) {\n\t\t\tsum += lst[i] * lst[i];\n\t\t}\n\t\telse if (i % 4 == 0 && i % 3 != 0) {\n\t\t\tsum += lst[i] * lst[i] * lst[i];\n\t\t}\n\t\telse {\n\t\t\tsum += lst[i];\n\t\t}\n\t}\n\treturn sum;",
        "grade-160": {
            "execution": 1
        },
        "24": "long sum=0;\n    for(int i=0;i<lst.size();i++){\n        if(i%3==0 && i%4!=0){\n            sum+=lst[i]*lst[i];\n        }\n        else if(i%4==0 && i%3!=0){\n            sum+=lst[i]*lst[i]*lst[i];\n        }\n        else{\n            sum+=lst[i];\n        }\n    }\n    return sum;",
        "grade-24": {
            "execution": 0
        },
        "173": "int sum = 0;\n  for(int i = 0; i < lst.size(); i++){\n    if(i % 3 == 0){\n      lst[i] = lst[i] * lst[i];\n    }\n    if(i % 4 == 0 && i % 3 != 0){\n      lst[i] = lst[i] * lst[i] * lst[i];\n    }\n    sum += lst[i];\n  }\n  return sum;",
        "grade-173": {
            "execution": 1
        },
        "122": "long sum = 0;\n    int lst_len = lst.size();\n    for (int i = 0; i < lst_len; i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        } else if (i % 4 == 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;",
        "grade-122": {
            "execution": 1
        },
        "9": "// Put your code here\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i % 3 == 0){\n            lst[i] = lst[i] * lst[i];\n        }\n        if(i % 4 == 0 && i % 3 != 0){\n            lst[i] = lst[i] * lst[i] * lst[i];\n        }\n        sum += lst[i];\n    }\n    return sum;",
        "grade-9": {
            "execution": 1
        },
        "8": "long sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        } else if (i % 4 == 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;",
        "grade-8": {
            "execution": 1
        },
        "25": "long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 3 == 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 == 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;",
        "grade-25": {
            "execution": 1
        },
        "58": "// write your code here and below\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i % 3 == 0){\n            sum += lst[i] * lst[i];\n        }\n        else if(i % 4 == 0 && i % 3 != 0){\n            sum += lst[i] * lst[i] * lst[i];\n        }\n        else{\n            sum += lst[i];\n        }\n    }\n    return sum;",
        "grade-58": {
            "execution": 1
        },
        "63": "if (lst.size() == 0) return 0;\n\tstd::vector<long>::iterator it;\n\tint num = 0;\n\tfor (it = lst.begin(); it != lst.end(); it++) {\n\t\tif (num % 3 == 0) {\n\t\t\t*it = pow(*it, 2);\n\t\t}\n\t\telse if (num % 4 == 0 && num % 3 != 0) {\n\t\t\t*it = pow(*it, 3);\n\t\t}\n\t\tnum++;\n\t}\n\tlong sum = 0;\n\tfor (it = lst.begin(); it != lst.end(); it++) {\n\t\tsum += *it;\n\t}\n\treturn sum;",
        "grade-63": {
            "execution": 1
        },
        "149": "int l = lst.size();\n\tlong sum = 0;\n\tfor (int i = 0; i < l; i++) {\n\t\tif (i % 3 == 0) {\n\t\t\tsum += lst[i] * lst[i];\n\t\t}\n\t\telse if (i % 4 == 0 && i % 3 != 0) {\n\t\t\tsum += lst[i] * lst[i] * lst[i];\n\t\t}\n\t\telse {\n\t\t\tsum += lst[i];\n\t\t}\n\t}\n\treturn sum;",
        "grade-149": {
            "execution": 1
        },
        "176": "long sum = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (i % 3 == 0) {\n            sum += (lst[i] * lst[i]);\n        } else if (i % 4 == 0 && i % 3 != 0) {\n            sum += (lst[i] * lst[i] * lst[i]);\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;",
        "grade-176": {
            "execution": 1
        },
        "165": "long sum = 0;\n   for(int i = 0; i < lst.size(); i++){\n       if(i % 3 == 0){\n           lst[i] = lst[i] * lst[i];\n       }\n       if(i % 4 == 0 && i % 3 != 0){\n           lst[i] = lst[i] * lst[i] * lst[i];\n       }\n       sum += lst[i];\n   }\n   return sum;",
        "grade-165": {
            "execution": 1
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n",
        "snippet": [
            "    string vowels=\"aeiouAEIOU\";\n    string out=\"\";\n    for (int i=0;i<message.length();i++)\n    {\n        char w=message[i];\n        if (w>=97 and w<=122){w=w-32;}\n        else if (w>=65 and w<=90) w=w+32;\n        if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;\n        out=out+w;\n    }\n    return out;\n}\n"
        ],
        "simplified": "Write a function that takes a message, and encodes in such a way that it swaps case of all letters, replaces all vowels in the message with the letter that appears 2 places ahead of that vowel in the english alphabet. Assume only letters.",
        "task_id": "93",
        "163": "/*\n        Complete this function\n    */",
        "grade-163": {
            "execution": 0
        },
        "28": "std::string result;\n    for (char c : message) {\n        if (isalpha(c)) {\n            if (islower(c)) {\n                c = toupper(c);\n            } else {\n                c = tolower(c);\n            }\n            if (c == 'a') {\n                c = 'c';\n            } else if (c == 'e') {\n                c = 'g';\n            } else if (c == 'i') {\n                c = 'k';\n            } else if (c == 'o') {\n                c = 'q';\n            } else if (c == 'u') {\n                c = 'y';\n            }\n        }\n        result += c;\n    }\n    return result;",
        "grade-28": {
            "execution": 0
        },
        "6": "std::string ret;\n    for (auto c : message) {\n        if (isalpha(c)) {\n            if (isupper(c)) {\n                ret += tolower(c);\n            } else {\n                ret += toupper(c);\n            }\n        }\n        if (c == 'A' || c == 'a') {\n            ret += 'C';\n        } else if (c == 'E' || c == 'e') {\n            ret += 'G';\n        } else if (c == 'I' || c == 'i') {\n            ret += 'K';\n        } else if (c == 'O' || c == 'o') {\n            ret += 'M';\n        } else if (c == 'U' || c == 'u') {\n            ret += 'Q';\n        } else {\n            ret += c;\n        }\n    }\n    return ret;",
        "grade-6": {
            "execution": 0
        },
        "189": "// Notes:\n    // 1) Make it so it only uses alphabets, not numbers or special characters.\n    // 2) convert to all lowercase / uppercase, to make it easier to do string\n    //    searches.\n    // 3) could use a map for vowels.\n    // 4) could use an array for the alphabet.\n    // Approach:\n    // 1) convert string to all lowercase / uppercase\n    // 2) iterate through the string, swap case of the letters\n    // 3) iterate through the string, search for vowels, if vowel is found,\n    //    replace with the letter 2 ahead of it in the alphabet.\n    // 4) return new string.\n    // Notes:\n    // 1) if we are swapping case anyways, don't bother doing it twice.\n    // 2) we can do a search for both vowel lower and upper case by making\n    //    the string to lowercase / uppercase beforehand.\n    // 3) Start out with a naive approach and get it working, then think\n    //    about how we can make it more efficient.  One way to make it\n    //    more efficient is by using the alphabet string to search for\n    //    vowels and their replacements.\n    // 4) We can increase performance by using an array for the alphabet.\n    //    This will make the search for vowels, and the letters 2 ahead\n    //    of them, much easier and faster.  We can use the index as the\n    //    offset to move ahead.\n    // 5) Another way to improve performance is to make use of our knowledge\n    //    of the english alphabet, and hard code it in our solution.  This\n    //    approach would be to hard code the 26 letters of the alphabet, and\n    //    use the index of the letter we are on to get the letter that\n    //    is 2 indexes ahead of it.  This way we don't have to search the\n    //    alphabet string.\n    // 6) This solution can be done in one pass through the string.\n    // 7) We can hard code the english alphabet in the solution, or we can\n    //    use a function to create it and pass it in.  I'll use a function\n    //    so I can easily",
        "grade-189": {
            "execution": 0
        },
        "70": "std::string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n\tstd::string newMessage = \"\";\n\tfor (int i = 0; i < message.length(); i++) {\n\t\tchar current = message[i];\n\t\tint position = alphabet.find(tolower(current));\n\t\tif (islower(current)) {\n\t\t\t//if current letter is a vowel, we change it to the letter \n\t\t\t//in position position + 2 in the alphabet\n\t\t\tif (current == 'a' || current == 'e' || current == 'i' || current == 'o' || current == 'u') {\n\t\t\t\tif (position + 2 > 25) {\n\t\t\t\t\tnewMessage += alphabet[position + 2 - 26];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tnewMessage += alphabet[position + 2];\n\t\t\t\t}\n\t\t\t}\n\t\t\t//if current letter is not a vowel, we upper it and add it to newMessage\n\t\t\telse {\n\t\t\t\tnewMessage += toupper(current);\n\t\t\t}\n\t\t}\n\t\t//if current letter is not a lowercase letter, we change it to lowercase\n\t\t//and add it to newMessage\n\t\telse {\n\t\t\tnewMessage += tolower(current);\n\t\t}\n\t}\n\treturn newMessage;",
        "grade-70": {
            "execution": 0
        },
        "62": "// check message is valid\n    if (message.empty()) {\n        return message;\n    }\n    std::string encoded;\n    std::vector<char> vowels = {'a', 'e', 'i', 'o', 'u'};\n    for (char c : message) {\n        // convert capital letters to lowercase\n        char lower = std::tolower(c);\n        // if it's a vowel, replace with it's replacement\n        auto it = std::find(vowels.begin(), vowels.end(), lower);\n        if (it != vowels.end()) {\n            int index = std::distance(vowels.begin(), it);\n            char next_vowel = vowels[(index + 2) % vowels.size()];\n            encoded += next_vowel;\n        } else {\n            // otherwise just swap case\n            encoded += std::isupper(c) ? std::tolower(c) : std::toupper(c);\n        }\n    }\n    return encoded;",
        "grade-62": {
            "execution": 0
        },
        "57": "// TODO: Finish this function\n\t//std::string encoded = message;\n\tstd::string vowels = \"aeiou\";\n\tstd::string encoded;\n\t// upper case letters\n\tfor (int i = 0; i < message.length(); i++) {\n\t\tif (message[i] >= 'A' && message[i] <= 'Z') {\n\t\t\t// convert to lower case letter and push to encoded\n\t\t\tchar c = message[i] + 32;\n\t\t\tencoded.push_back(c);\n\t\t}\n\t\t// lower case letters\n\t\telse if (message[i] >= 'a' && message[i] <= 'z') {\n\t\t\t// convert to upper case letter and push to encoded\n\t\t\tchar c = message[i] - 32;\n\t\t\tencoded.push_back(c);\n\t\t}\n\t\t// vowels\n\t\telse if (vowels.find(message[i]) != std::string::npos) {\n\t\t\t// convert to letter 2 ahead in alphabet and push to encoded\n\t\t\tint position = vowels.find(message[i]);\n\t\t\tchar c = vowels[(position + 2) % 5];\n\t\t\tencoded.push_back(c);\n\t\t}\n\t\t// everything else\n\t\telse {\n\t\t\tencoded.push_back(message[i]);\n\t\t}\n\t}\n\treturn encoded;",
        "grade-57": {
            "execution": 0
        },
        "35": "std::string encoded = \"\";\n  for (auto c : message) {\n    if (c == ' ') {\n      encoded += ' ';\n      continue;\n    }\n    if (c >= 'a' && c <= 'z') {\n      c = (c - 'a' + 2) % 26 + 'A';\n    } else if (c >= 'A' && c <= 'Z') {\n      c = (c - 'A' + 2) % 26 + 'a';\n    }\n    if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n      c += 2;\n    } else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n      c -= 2;\n    }\n    encoded += c;\n  }\n  return encoded;",
        "grade-35": {
            "execution": 0
        },
        "188": "// this is a place holder function\n  return \"TGST\";",
        "grade-188": {
            "execution": 0
        },
        "26": "int len = message.length();\n    char vowels[] = {'a', 'e', 'i', 'o', 'u'};\n    std::string encoded_string = \"\";\n    for (int i = 0; i < len; i++) {\n        char curr_char = message[i];\n        if(std::isupper(curr_char)) {\n            curr_char = tolower(curr_char);\n        }\n        else if(std::islower(curr_char)) {\n            curr_char = toupper(curr_char);\n        }\n        encoded_string += curr_char;\n    }\n    len = encoded_string.length();\n    std::string final_string = \"\";\n    for (int i = 0; i < len; i++) {\n        char curr_char = encoded_string[i];\n        bool is_vowel = false;\n        for (int j = 0; j < 5; j++) {\n            if(curr_char == vowels[j]) {\n                is_vowel = true;\n                break;\n            }\n        }\n        if(is_vowel) {\n            if(i >= len - 2) {\n                final_string += encoded_string[i];\n            }\n            else {\n                final_string += encoded_string[i + 2];\n            }\n        }\n        else {\n            final_string += encoded_string[i];\n        }\n    }\n    return final_string;",
        "grade-26": {
            "execution": 0
        },
        "173": "for (int i = 0; i < message.length(); i++) {\n    if (message[i] >= 'a' && message[i] <= 'z') {\n      message[i] = toupper(message[i]);\n    } else if (message[i] >= 'A' && message[i] <= 'Z') {\n      message[i] = tolower(message[i]);\n    }\n  }\n  std::map<char, char> vowels = {{'a', 'c'}, {'e', 'g'}, {'i', 'k'}, {'o', 'q'}, {'u', 'w'}};\n  for (int i = 0; i < message.length(); i++) {\n    if (vowels.find(message[i]) != vowels.end()) {\n      message[i] = vowels[message[i]];\n    }\n  }\n  return message;",
        "grade-173": {
            "execution": 0
        },
        "139": "std::string rstr = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            rstr += std::toupper(message[i]);\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            rstr += std::tolower(message[i]);\n        } else {\n            rstr += message[i];\n        }\n    }\n    std::cout << rstr << std::endl;\n    // encode vowels\n    std::string vowels = \"aeiou\";\n    std::string cvowels = \"eioua\";\n    std::string output = \"\";\n    for (int i = 0; i < rstr.length(); i++) {\n        int j = 0;\n        for (; j < vowels.length(); j++) {\n            if (vowels[j] == rstr[i]) {\n                output += cvowels[j];\n                break;\n            }\n        }\n        if (j == vowels.length()) {\n            output += rstr[i];\n        }\n    }\n    return output;",
        "grade-139": {
            "execution": 0
        },
        "22": "std::string aa = \"AEIOU\";\n    std::string aacap = \"AEIOU\";\n    for (int i = 0; i < aa.length(); i++) {\n        aa[i] = aa[i] + 2;\n        aacap[i] = aacap[i] + 2;\n    }\n    for (int i = 0; i < message.length(); i++) {\n        int j = 0;\n        if (isupper(message[i])) {\n            while (j < aacap.length()) {\n                if (message[i] == aacap[j]) {\n                    message[i] = aa[j];\n                    break;\n                }\n                j++;\n            }\n            if (j == aacap.length()) {\n                message[i] = message[i] + 32;\n            }\n        } else if (islower(message[i])) {\n            while (j < aa.length()) {\n                if (message[i] == aa[j]) {\n                    message[i] = aacap[j];\n                    break;\n                }\n                j++;\n            }\n            if (j == aa.length()) {\n                message[i] = message[i] - 32;\n            }\n        }\n    }\n    return message;",
        "grade-22": {
            "execution": 0
        },
        "151": "for (size_t i = 0; i < message.size(); i++) {\n        message[i] = std::toupper(message[i]);\n    }\n    for (size_t i = 0; i < message.size(); i++) {\n        switch (message[i]) {\n            case 'A': message[i] = 'C'; break;\n            case 'E': message[i] = 'G'; break;\n            case 'I': message[i] = 'K'; break;\n            case 'O': message[i] = 'Q'; break;\n            case 'U': message[i] = 'S'; break;\n            case 'Y': message[i] = 'A'; break;\n            default: message[i] = std::tolower(message[i]); break;\n        }\n    }\n    return message;",
        "grade-151": {
            "execution": 0
        },
        "108": "char vowels[5] = {'a', 'e', 'i', 'o', 'u'};\n\tchar replaced_vowels[5] = {'c', 'g', 'k', 'o', 's'};\n\tstd::string result = \"\";\n\tfor (int i = 0; i < message.length(); i++) {\n\t\tchar ch = message[i];\n\t\tif (ch >= 'a' && ch <= 'z') {\n\t\t\tch = ch - 'a' + 'A';\n\t\t} else if (ch >= 'A' && ch <= 'Z') {\n\t\t\tch = ch - 'A' + 'a';\n\t\t}\n\t\tfor (int j = 0; j < 5; j++) {\n\t\t\tif (ch == vowels[j]) {\n\t\t\t\tch = replaced_vowels[j];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tresult += ch;\n\t}\n\treturn result;",
        "grade-108": {
            "execution": 0
        },
        "8": "std::string encoded_message = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (std::islower(message[i])) {\n            encoded_message += std::toupper(message[i]);\n        } else if (std::isupper(message[i])) {\n            encoded_message += std::tolower(message[i]);\n        } else {\n            encoded_message += message[i];\n        }\n    }\n    encoded_message = std::regex_replace(encoded_message, std::regex(\"a\"), \"c\");\n    encoded_message = std::regex_replace(encoded_message, std::regex(\"e\"), \"g\");\n    encoded_message = std::regex_replace(encoded_message, std::regex(\"i\"), \"k\");\n    encoded_message = std::regex_replace(encoded_message, std::regex(\"o\"), \"q\");\n    encoded_message = std::regex_replace(encoded_message, std::regex(\"u\"), \"w\");\n    return encoded_message;",
        "grade-8": {
            "execution": 0
        },
        "7": "std::string encoded;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            if (message[i] == 'z') {\n                encoded += 'A';\n            } else {\n                encoded += (char)(message[i] - 'a' + 'A' + 1);\n            }\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            if (message[i] == 'Z') {\n                encoded += 'a';\n            } else {\n                encoded += (char)(message[i] - 'A' + 'a' + 1);\n            }\n        } else {\n            encoded += message[i];\n        }\n    }\n    return encoded;",
        "grade-7": {
            "execution": 0
        },
        "23": "//@TODO: YOUR CODE HERE\n    for(int i=0;i<message.length();i++){\n        if((message[i]>='a' && message[i]<='z') || (message[i]>='A' && message[i]<='Z')){\n            if(message[i]=='z'){\n                message[i]='b';\n            }\n            else if(message[i]=='Z'){\n                message[i]='B';\n            }\n            else{\n                message[i]+=2;\n            }\n        }\n        if(message[i]=='a' || message[i]=='e' || message[i]=='i' || message[i]=='o' || message[i]=='u' || message[i]=='A' || message[i]=='E' || message[i]=='I' || message[i]=='O' || message[i]=='U'){\n            message[i]='0';\n        }\n    }\n    return message;",
        "grade-23": {
            "execution": 0
        },
        "55": "std::string result;\n\tfor (int i = 0; i < message.length(); i++) {\n\t\tif (message[i] >= 'a' && message[i] <= 'z') {\n\t\t\tresult += (char)(message[i] - 32);\n\t\t} else if (message[i] >= 'A' && message[i] <= 'Z') {\n\t\t\tresult += (char)(message[i] + 32);\n\t\t} else {\n\t\t\tresult += message[i];\n\t\t}\n\t}\n\tfor (int i = 0; i < result.length(); i++) {\n\t\tif (result[i] == 'a') {\n\t\t\tresult[i] = 'c';\n\t\t} else if (result[i] == 'e') {\n\t\t\tresult[i] = 'g';\n\t\t} else if (result[i] == 'i') {\n\t\t\tresult[i] = 'k';\n\t\t} else if (result[i] == 'o') {\n\t\t\tresult[i] = 'q';\n\t\t} else if (result[i] == 'u') {\n\t\t\tresult[i] = 'w';\n\t\t} else if (result[i] == 'A') {\n\t\t\tresult[i] = 'C';\n\t\t} else if (result[i] == 'E') {\n\t\t\tresult[i] = 'G';\n\t\t} else if (result[i] == 'I') {\n\t\t\tresult[i] = 'K';\n\t\t} else if (result[i] == 'O') {\n\t\t\tresult[i] = 'Q';\n\t\t} else if (result[i] == 'U') {\n\t\t\tresult[i] = 'W';\n\t\t}\n\t}\n\treturn result;",
        "grade-55": {
            "execution": 1
        },
        "59": "std::string encoded = \"\";\n    std::string vowels = \"aeiou\";\n    std::string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    std::string new_alphabet = \"cdefghijklmnopqrstuvwxyzab\";\n    std::string new_vowels = \"\";\n    for (auto i = 0; i < vowels.size(); i++) {\n        new_vowels += new_alphabet[alphabet.find(vowels[i])];\n    }\n    for (auto i = 0; i < message.size(); i++) {\n        if (vowels.find(message[i]) != std::string::npos) {\n            encoded += new_vowels[vowels.find(message[i])];\n        } else if (alphabet.find(message[i]) != std::string::npos) {\n            encoded += new_alphabet[alphabet.find(message[i])];\n        } else {\n            encoded += message[i];\n        }\n    }\n    return encoded;",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nlong car_race_collision(long n) {\n",
        "snippet": [
            "    return n*n;\n}\n"
        ],
        "simplified": "Imagine a road that's a perfectly straight infinitely long line. n cars are driving left to right; simultaneously, a different set of n cars are driving right to left. The two sets of cars start out being very far from each other. All cars move in the same speed. Two cars are said to collide when a car that's moving left to right hits a car that's moving right to left. However, the cars are infinitely sturdy and strong; as a result, they continue moving in their trajectory as if they did not collide. This function outputs the number of such collisions.",
        "task_id": "41",
        "189": "assert(n > 0);\n  return n*(n-1);",
        "grade-189": {
            "execution": 0
        },
        "29": "if (n <= 1) {\n\t\treturn 0;\n\t}\n\tlong long res = n;\n\tlong long offset = 2;\n\twhile (n >= 2) {\n\t\tres += n * offset;\n\t\toffset *= 2;\n\t\tn /= 2;\n\t}\n\treturn res;",
        "grade-29": {
            "execution": 0
        },
        "6": "return n * (n - 1) / 2;",
        "grade-6": {
            "execution": 0
        },
        "77": "assert(n >= 1);\n    // pre: n >= 1\n    // post: We return the number of collisions.\n    if (n==1) return 0;\n    return n*n-n;\n    // We'll develop a formal inductive proof for this in the future.\n    // But for now, we'll do a heuristic argument.\n    // Think of the number of cars as n.  Each car on the left moves\n    // forward, one-by-one, colliding with all n cars on the right.\n    // In total, there are n collisions, the first car on the left\n    // collides with n cars on the right, then the second car on the left\n    // collides with n-1 cars on the right, etc.\n    // This is a geometric series with sum n(n+1)/2, or (n^2+n)/2.\n    // But we counted each collision twice, so the answer is (n^2+n)/2 - n = (n^2-n)/2.",
        "grade-77": {
            "execution": 0
        },
        "69": "assert(n > 0);\n    // your solution here\n    long numberOfPairs = (n*(n-1))/2;\n    return numberOfPairs;",
        "grade-69": {
            "execution": 0
        },
        "62": "// Write your code here\n    return n*(n-1);",
        "grade-62": {
            "execution": 0
        },
        "36": "// Write your code here\n    // To debug: cerr << \"Debug messages...\" << endl;\n    long num=0;\n    if(n<2) return 0;\n    long* a=new long[n];\n    long* b=new long[n];\n    for(long i=0;i<n;i++)\n    {\n        cin>>a[i];\n    }\n    for(long i=0;i<n;i++)\n    {\n        cin>>b[i];\n    }\n    sort(a,a+n);\n    sort(b,b+n);\n    for(long i=0;i<n;i++)\n    {\n        for(long j=0;j<n;j++)\n        {\n            if(a[i]>b[j]) num++;\n            else break;\n        }\n    }\n    return num;",
        "grade-36": {
            "execution": 0
        },
        "27": "long count = 0;\n\tfor (long i = 0; i < n; i++) {\n\t\tfor (long j = 0; j < n; j++) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;",
        "grade-27": {
            "execution": 1
        },
        "159": "// Implement me\n    return 0;",
        "grade-159": {
            "execution": 0
        },
        "23": "// Create a vector of the positions of the cars\n  std::vector<long> right_to_left;\n  std::vector<long> left_to_right;\n  for (long i = 0; i < n; i++) {\n    right_to_left.push_back(i);\n    left_to_right.push_back(i);\n  }\n  // Now sort the two vectors.\n  std::sort(right_to_left.begin(), right_to_left.end());\n  std::sort(left_to_right.begin(), left_to_right.end());\n  // Now traverse the two vectors and see how many collisions there are.\n  long i = 0;\n  long j = 0;\n  long retval = 0;\n  while (i < n && j < n) {\n    if (right_to_left[i] == left_to_right[j]) {\n      retval++;\n      i++;\n      j++;\n    } else if (right_to_left[i] < left_to_right[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return retval;",
        "grade-23": {
            "execution": 0
        },
        "175": "long tp = 2*n;\n\tlong ar[tp];\n\tfor(long i=0;i<tp;i++)\n\t\tar[i] = 0;\n\tlong carpos = 0;\n\tlong collision = 0;\n\tlong nv;\n\tfor(long i=0;i<n;i++) {\n\t\tscanf(\"%ld\",&nv);\n\t\tif(ar[nv-1] == 0) {\n\t\t\tar[nv-1] = 1;\n\t\t\tcarpos++;\n\t\t}\n\t\telse\n\t\t\tcollision++;\n\t}\n\t\n\tfor(long i=0;i<n;i++) {\n\t\tscanf(\"%ld\",&nv);\n\t\tif(ar[nv-1] == 0) {\n\t\t\tar[nv-1] = 1;\n\t\t\tcarpos++;\n\t\t}\n\t\telse\n\t\t\tcollision++;\n\t}\n\t\n\tassert(carpos == tp);\n\t\n\treturn collision;",
        "grade-175": {
            "execution": 0
        },
        "123": "return n * (n-1) / 2;",
        "grade-123": {
            "execution": 0
        },
        "8": "return n*(n-1)/2;",
        "grade-8": {
            "execution": 0
        },
        "7": "return 0;",
        "grade-7": {
            "execution": 0
        },
        "24": "return n*(n-1);",
        "grade-24": {
            "execution": 0
        },
        "60": "int *a,*b;\n    long i,count=0;\n    a=(int *)malloc(n*sizeof(int));\n    b=(int *)malloc(n*sizeof(int));\n    for(i=0;i<n;i++)\n    {\n        scanf(\"%d\",&a[i]);\n    }\n    for(i=0;i<n;i++)\n    {\n        scanf(\"%d\",&b[i]);\n    }\n    for(i=0;i<n;i++)\n    {\n        for(int j=0;j<n;j++)\n        {\n            if(a[i]==b[j])\n            {\n                count++;\n            }\n        }\n    }\n    return count;",
        "grade-60": {
            "execution": 0
        },
        "64": "// \tassert(n>=1);\n\treturn n*(n-1)/2;",
        "grade-64": {
            "execution": 0
        },
        "147": "long cars[n];\n\tlong cars1[n];\n\tfor (long i = 0; i < n; i++) {\n\t\tcars[i] = i;\n\t\tcars1[i] = n - i - 1;\n\t}\n\tlong result = 0;\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < n && j < n) {\n\t\tif (cars[i] < cars1[j]) {\n\t\t\ti++;\n\t\t}\n\t\telse if (cars[i] > cars1[j]) {\n\t\t\tj++;\n\t\t}\n\t\telse {\n\t\t\tresult++;\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;",
        "grade-147": {
            "execution": 0
        },
        "179": "long int count = 0;\n   long int i;\n   long int* a = new long int[n];\n   long int* b = new long int[n];\n   long int* c = new long int[n];\n   for(i=0;i<n;i++)\n   {\n      std::cin>>a[i];\n   }\n   for(i=0;i<n;i++)\n   {\n      std::cin>>b[i];\n   }\n   for(i=0;i<n;i++)\n   {\n      c[i] = a[i] - b[i];\n   }\n   for(i=0;i<n;i++)\n   {\n      for(long int j=i+1;j<n;j++)\n      {\n         if(c[i]>0&&c[j]<0)\n         {\n            count++;\n         }\n      }\n   }\n   return count;",
        "grade-179": {
            "execution": 0
        },
        "165": "int nb_collision = 0;\n    std::vector<bool> visited(n);\n    for (long i = 0; i < n; i++) {\n        long actual_car = i;\n        while (actual_car < n) {\n            long next_car = (actual_car + n) / 2;\n            if (next_car == actual_car) break;\n            if (visited[next_car]) break;\n            actual_car = next_car;\n            visited[actual_car] = true;\n            nb_collision++;\n        }\n    }\n    return nb_collision;",
        "grade-165": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n// False\nbool is_palindrome(std::string text) {\n",
        "snippet": [
            "    string pr(text.rbegin(),text.rend());\n    return pr==text;\n}\n"
        ],
        "simplified": "Checks if given string is a palindrome",
        "task_id": "48",
        "186": "// Implement this function\n    int n = text.length();\n    int i=0;\n    int j=n-1;\n    while(i<j){\n        if(text[i] != text[j]){\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;",
        "grade-186": {
            "execution": 1
        },
        "28": "std::string a = text;\n    std::reverse(a.begin(), a.end());\n    return a == text;",
        "grade-28": {
            "execution": 1
        },
        "6": "int start = 0;\n  int end = text.length() - 1;\n  while (start < end) {\n    if (text[start] != text[end]) {\n      return false;\n    }\n    start++;\n    end--;\n  }\n  return true;",
        "grade-6": {
            "execution": 1
        },
        "77": "int length = text.length();\n    for (int i = 0; i < length/2; i++) {\n        if (text[i] != text[length-i-1]) {\n            return false;\n        }\n    }\n    return true;",
        "grade-77": {
            "execution": 1
        },
        "65": "for (int i = 0; i < text.size() / 2; i++) {\n        if (text[i] != text[text.size() - i - 1]) {\n            return false;\n        }\n    }\n    return true;",
        "grade-65": {
            "execution": 1
        },
        "58": "bool isPalindrome = true;\n  for (int i = 0; i < text.length() / 2; i++) {\n    if (text[i] != text[text.length() - 1 - i]) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  return isPalindrome;",
        "grade-58": {
            "execution": 1
        },
        "36": "int i = 0;\n  int j = text.length() - 1;\n  while (i < j) {\n    if (text[i] != text[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;",
        "grade-36": {
            "execution": 1
        },
        "26": "int count = 0;\n\tint text_length = text.length();\n\tfor (int i = 0; i < text_length; i++) {\n\t\tif (text[i] == text[text_length - i - 1]) {\n\t\t\tcount++;\n\t\t}\n\t}\n\tif (count == text_length) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}",
        "grade-26": {
            "execution": 1
        },
        "157": "// Implement this function\n  // return true;\n  int start = 0;\n  int end = text.length() - 1;\n  while (start < end) {\n    if (text[start] != text[end]) {\n      return false;\n    }\n    start++;\n    end--;\n  }\n  return true;",
        "grade-157": {
            "execution": 1
        },
        "22": "//!TODO\n  // return false;\n  string::iterator itr, itr2;\n  int x;\n  if(text.size() % 2 == 0)\n  {\n    x = text.size()/2;\n    itr = text.begin() + x;\n    itr2 = text.end() - x;\n  }\n  else\n  {\n    x = text.size()/2;\n    itr = text.begin() + x;\n    itr2 = text.end() - x;\n  }\n  for(int i = 0; i < x; i++)\n  {\n    if(*itr != *itr2)\n    {\n      return false;\n    }\n    else\n    {\n      itr++;\n      itr2--;\n    }\n  }\n  return true;",
        "grade-22": {
            "execution": 0
        },
        "171": "int i = 0;\n   int len = text.length();\n   int j = len - 1;\n   while (i < j) {\n       if (text[i] != text[j]) {\n           return false;\n       }\n       i++;\n       j--;\n   }\n   return true;",
        "grade-171": {
            "execution": 1
        },
        "122": "std::transform(text.begin(), text.end(), text.begin(), ::tolower);\n  std::regex non_alnum(\"[^a-z0-9]\");\n  text = std::regex_replace(text, non_alnum, \"\");\n  std::string reversed(text.rbegin(), text.rend());\n  return text == reversed;",
        "grade-122": {
            "execution": 1
        },
        "8": "// YOUR CODE HERE\n    int n = text.length();\n    for(int i=0;i<n/2;i++){\n        if(text[i]!=text[n-i-1])\n            return false;\n    }\n    return true;",
        "grade-8": {
            "execution": 1
        },
        "7": "// WIP\n    int N = text.length();\n    int mid = floor(N/2);\n    for(int i=0; i<mid; i++){\n        if(text[i]!=text[N-i-1]){\n            return false;\n        }\n    }\n    return true;",
        "grade-7": {
            "execution": 1
        },
        "23": "auto head = text.begin();\n    auto tail = text.end() - 1;\n    while (head < tail) {\n        if (*head != *tail) {\n            return false;\n        }\n        head++;\n        tail--;\n    }\n    return true;",
        "grade-23": {
            "execution": 1
        },
        "56": "// assert(false);\n\tint i=0,j=text.length()-1;\n\twhile(i<j){\n\t\tif(text[i]!=text[j]){\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t\tj--;\n\t}\n\treturn true;",
        "grade-56": {
            "execution": 1
        },
        "61": "int n = text.length();\n    std::string text2 = text;\n    std::reverse(text2.begin(), text2.end());\n    // Check if text is palindrome\n    if (text == text2) {\n        return true;\n    }\n    else {\n        return false;\n    }",
        "grade-61": {
            "execution": 1
        },
        "146": "return std::equal(text.begin(), text.begin() + text.size()/2, text.rbegin());",
        "grade-146": {
            "execution": 1
        },
        "175": "for (int i = 0; i < text.size() / 2; i++) {\n    if (text[i] != text[text.size() - i - 1])\n      return false;\n  }\n  return true;",
        "grade-175": {
            "execution": 1
        },
        "162": "// your code here\n    return text == std::string(text.rbegin(), text.rend());",
        "grade-162": {
            "execution": 1
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n",
        "snippet": [
            "    vector<string> out={};\n    for (int i=0;i<grades.size();i++)\n    {\n        if (grades[i]>=3.9999) out.push_back(\"A+\");\n        if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back(\"A\");\n        if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back(\"A-\");\n        if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back(\"B+\");\n        if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back(\"B\");\n        if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back(\"B-\");\n        if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back(\"C+\");\n        if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back(\"C\");\n        if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back(\"C-\");\n        if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back(\"D+\");\n        if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back(\"D\");\n        if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back(\"D-\");\n        if (grades[i]<=0.0001) out.push_back(\"E\");\n    }\n    return out;\n}\n"
        ],
        "simplified": "It is the last week of the semester and the teacher has to give the grades to students. The teacher has been making her own algorithm for grading. The only problem is, she has lost the code she used for grading. She has given you a list of GPAs for some students and you have to write a function that can output a list of letter grades using the following table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E",
        "task_id": "81",
        "168": "std::vector<std::string> letter_grades(grades.size());\n  for (size_t i = 0; i < grades.size(); i++) {\n    if (grades[i] >= 4.0) {\n      letter_grades[i] = \"A+\";\n    } else if (grades[i] >= 3.7) {\n      letter_grades[i] = \"A\";\n    } else if (grades[i] >= 3.3) {\n      letter_grades[i] = \"A-\";\n    } else if (grades[i] >= 3.0) {\n      letter_grades[i] = \"B+\";\n    } else if (grades[i] >= 2.7) {\n      letter_grades[i] = \"B\";\n    } else if (grades[i] >= 2.3) {\n      letter_grades[i] = \"B-\";\n    } else if (grades[i] >= 2.0) {\n      letter_grades[i] = \"C+\";\n    } else if (grades[i] >= 1.7) {\n      letter_grades[i] = \"C\";\n    } else if (grades[i] >= 1.3) {\n      letter_grades[i] = \"C-\";\n    } else if (grades[i] >= 1.0) {\n      letter_grades[i] = \"D+\";\n    } else if (grades[i] >= 0.7) {\n      letter_grades[i] = \"D\";\n    } else if (grades[i] >= 0.0) {\n      letter_grades[i] = \"D-\";\n    } else {\n      letter_grades[i] = \"E\";\n    }\n  }\n  return letter_grades;",
        "grade-168": {
            "execution": 0
        },
        "29": "std::vector<std::string> v;\n  for(int i = 0; i < grades.size(); i++){\n    if(grades[i] >= 4.0){\n      v.push_back(\"A+\");\n    }\n    else if(grades[i] >= 3.7){\n      v.push_back(\"A\");\n    }\n    else if(grades[i] >= 3.3){\n      v.push_back(\"A-\");\n    }\n    else if(grades[i] >= 3.0){\n      v.push_back(\"B+\");\n    }\n    else if(grades[i] >= 2.7){\n      v.push_back(\"B\");\n    }\n    else if(grades[i] >= 2.3){\n      v.push_back(\"B-\");\n    }\n    else if(grades[i] >= 2.0){\n      v.push_back(\"C+\");\n    }\n    else if(grades[i] >= 1.7){\n      v.push_back(\"C\");\n    }\n    else if(grades[i] >= 1.3){\n      v.push_back(\"C-\");\n    }\n    else if(grades[i] >= 1.0){\n      v.push_back(\"D+\");\n    }\n    else if(grades[i] >= 0.7){\n      v.push_back(\"D\");\n    }\n    else if(grades[i] >= 0.0){\n      v.push_back(\"D-\");\n    }\n    else if(grades[i] == 0.0){\n      v.push_back(\"E\");\n    }\n  }\n  return v;",
        "grade-29": {
            "execution": 0
        },
        "6": "std::vector<std::string> res(grades.size());\n  for (int i = 0; i < grades.size(); i++) {\n    if (grades[i] >= 4.0) {\n      res[i] = \"A+\";\n    } else if (grades[i] >= 3.7) {\n      res[i] = \"A\";\n    } else if (grades[i] >= 3.3) {\n      res[i] = \"A-\";\n    } else if (grades[i] >= 3.0) {\n      res[i] = \"B+\";\n    } else if (grades[i] >= 2.7) {\n      res[i] = \"B\";\n    } else if (grades[i] >= 2.3) {\n      res[i] = \"B-\";\n    } else if (grades[i] >= 2.0) {\n      res[i] = \"C+\";\n    } else if (grades[i] >= 1.7) {\n      res[i] = \"C\";\n    } else if (grades[i] >= 1.3) {\n      res[i] = \"C-\";\n    } else if (grades[i] >= 1.0) {\n      res[i] = \"D+\";\n    } else if (grades[i] >= 0.7) {\n      res[i] = \"D\";\n    } else if (grades[i] >= 0.0) {\n      res[i] = \"D-\";\n    } else {\n      res[i] = \"E\";\n    }\n  }\n  return res;",
        "grade-6": {
            "execution": 0
        },
        "198": "std::vector<std::string> res(grades.size());\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i] == 4.0) {\n            res[i] = \"A+\";\n        } else if (grades[i] > 3.7) {\n            res[i] = \"A\";\n        } else if (grades[i] > 3.3) {\n            res[i] = \"A-\";\n        } else if (grades[i] > 3.0) {\n            res[i] = \"B+\";\n        } else if (grades[i] > 2.7) {\n            res[i] = \"B\";\n        } else if (grades[i] > 2.3) {\n            res[i] = \"B-\";\n        } else if (grades[i] > 2.0) {\n            res[i] = \"C+\";\n        } else if (grades[i] > 1.7) {\n            res[i] = \"C\";\n        } else if (grades[i] > 1.3) {\n            res[i] = \"C-\";\n        } else if (grades[i] > 1.0) {\n            res[i] = \"D+\";\n        } else if (grades[i] > 0.7) {\n            res[i] = \"D\";\n        } else if (grades[i] > 0.0) {\n            res[i] = \"D-\";\n        } else {\n            res[i] = \"E\";\n        }\n    }\n    return res;",
        "grade-198": {
            "execution": 0
        },
        "71": "std::vector<std::string> letter_grades;\n\tfor (float grade : grades) {\n\t\tif (grade >= 4.0)\n\t\t\tletter_grades.push_back(\"A+\");\n\t\telse if (grade >= 3.7)\n\t\t\tletter_grades.push_back(\"A\");\n\t\telse if (grade >= 3.3)\n\t\t\tletter_grades.push_back(\"A-\");\n\t\telse if (grade >= 3.0)\n\t\t\tletter_grades.push_back(\"B+\");\n\t\telse if (grade >= 2.7)\n\t\t\tletter_grades.push_back(\"B\");\n\t\telse if (grade >= 2.3)\n\t\t\tletter_grades.push_back(\"B-\");\n\t\telse if (grade >= 2.0)\n\t\t\tletter_grades.push_back(\"C+\");\n\t\telse if (grade >= 1.7)\n\t\t\tletter_grades.push_back(\"C\");\n\t\telse if (grade >= 1.3)\n\t\t\tletter_grades.push_back(\"C-\");\n\t\telse if (grade >= 1.0)\n\t\t\tletter_grades.push_back(\"D+\");\n\t\telse if (grade >= 0.7)\n\t\t\tletter_grades.push_back(\"D\");\n\t\telse if (grade >= 0.0)\n\t\t\tletter_grades.push_back(\"D-\");\n\t\telse\n\t\t\tletter_grades.push_back(\"E\");\n\t}\n\treturn letter_grades;",
        "grade-71": {
            "execution": 0
        },
        "63": "for (auto &x : grades) {\n    if (x > 4.0 || x < 0.0) {\n      throw std::runtime_error(\"Invalid grade\");\n    }\n  }\n  std::vector<std::string> new_grades(grades.size());\n  for (auto i = 0; i < grades.size(); i++) {\n    float grade = grades[i];\n    if (grade == 4.0) {\n      new_grades[i] = \"A+\";\n    } else if (grade >= 3.7) {\n      new_grades[i] = \"A\";\n    } else if (grade >= 3.3) {\n      new_grades[i] = \"A-\";\n    } else if (grade >= 3.0) {\n      new_grades[i] = \"B+\";\n    } else if (grade >= 2.7) {\n      new_grades[i] = \"B\";\n    } else if (grade >= 2.3) {\n      new_grades[i] = \"B-\";\n    } else if (grade >= 2.0) {\n      new_grades[i] = \"C+\";\n    } else if (grade >= 1.7) {\n      new_grades[i] = \"C\";\n    } else if (grade >= 1.3) {\n      new_grades[i] = \"C-\";\n    } else if (grade >= 1.0) {\n      new_grades[i] = \"D+\";\n    } else if (grade >= 0.7) {\n      new_grades[i] = \"D\";\n    } else if (grade >= 0.0) {\n      new_grades[i] = \"D-\";\n    } else {\n      new_grades[i] = \"E\";\n    }\n  }\n  return new_grades;",
        "grade-63": {
            "execution": 0
        },
        "58": "std::vector<std::string> output;\n  for (int i = 0; i < grades.size(); i++) {\n    if (grades[i] >= 4.0) {\n      output.push_back(\"A+\");\n    } else if (grades[i] >= 3.7) {\n      output.push_back(\"A\");\n    } else if (grades[i] >= 3.3) {\n      output.push_back(\"A-\");\n    } else if (grades[i] >= 3.0) {\n      output.push_back(\"B+\");\n    } else if (grades[i] >= 2.7) {\n      output.push_back(\"B\");\n    } else if (grades[i] >= 2.3) {\n      output.push_back(\"B-\");\n    } else if (grades[i] >= 2.0) {\n      output.push_back(\"C+\");\n    } else if (grades[i] >= 1.7) {\n      output.push_back(\"C\");\n    } else if (grades[i] >= 1.3) {\n      output.push_back(\"C-\");\n    } else if (grades[i] >= 1.0) {\n      output.push_back(\"D+\");\n    } else if (grades[i] >= 0.7) {\n      output.push_back(\"D\");\n    } else if (grades[i] >= 0.0) {\n      output.push_back(\"D-\");\n    } else {\n      output.push_back(\"E\");\n    }\n  }\n  return output;",
        "grade-58": {
            "execution": 0
        },
        "36": "std::vector<std::string> results;\n    for (auto grade : grades) {\n        if (grade == 4.0) {\n            results.push_back(\"A+\");\n        } else if (grade > 3.7) {\n            results.push_back(\"A\");\n        } else if (grade > 3.3) {\n            results.push_back(\"A-\");\n        } else if (grade > 3.0) {\n            results.push_back(\"B+\");\n        } else if (grade > 2.7) {\n            results.push_back(\"B\");\n        } else if (grade > 2.3) {\n            results.push_back(\"B-\");\n        } else if (grade > 2.0) {\n            results.push_back(\"C+\");\n        } else if (grade > 1.7) {\n            results.push_back(\"C\");\n        } else if (grade > 1.3) {\n            results.push_back(\"C-\");\n        } else if (grade > 1.0) {\n            results.push_back(\"D+\");\n        } else if (grade > 0.7) {\n            results.push_back(\"D\");\n        } else if (grade > 0.0) {\n            results.push_back(\"D-\");\n        } else {\n            results.push_back(\"E\");\n        }\n    }\n    return results;",
        "grade-36": {
            "execution": 0
        },
        "197": "std::vector<std::string> result;\n  std::string grade;\n  for (auto& x : grades) {\n    if (x == 4.0) {\n      grade = \"A+\";\n    } else if (x > 3.7) {\n      grade = \"A\";\n    } else if (x > 3.3) {\n      grade = \"A-\";\n    } else if (x > 3.0) {\n      grade = \"B+\";\n    } else if (x > 2.7) {\n      grade = \"B\";\n    } else if (x > 2.3) {\n      grade = \"B-\";\n    } else if (x > 2.0) {\n      grade = \"C+\";\n    } else if (x > 1.7) {\n      grade = \"C\";\n    } else if (x > 1.3) {\n      grade = \"C-\";\n    } else if (x > 1.0) {\n      grade = \"D+\";\n    } else if (x > 0.7) {\n      grade = \"D\";\n    } else if (x > 0.0) {\n      grade = \"D-\";\n    } else {\n      grade = \"E\";\n    }\n    result.push_back(grade);\n  }\n  return result;",
        "grade-197": {
            "execution": 0
        },
        "27": "std::vector<std::string> res;\n  for (int i = 0; i < grades.size(); i++) {\n    float grade = grades[i];\n    if (grade >= 4.0) {\n      res.push_back(\"A+\");\n    } else if (grade >= 3.7) {\n      res.push_back(\"A\");\n    } else if (grade >= 3.3) {\n      res.push_back(\"A-\");\n    } else if (grade >= 3.0) {\n      res.push_back(\"B+\");\n    } else if (grade >= 2.7) {\n      res.push_back(\"B\");\n    } else if (grade >= 2.3) {\n      res.push_back(\"B-\");\n    } else if (grade >= 2.0) {\n      res.push_back(\"C+\");\n    } else if (grade >= 1.7) {\n      res.push_back(\"C\");\n    } else if (grade >= 1.3) {\n      res.push_back(\"C-\");\n    } else if (grade >= 1.0) {\n      res.push_back(\"D+\");\n    } else if (grade >= 0.7) {\n      res.push_back(\"D\");\n    } else if (grade >= 0.0) {\n      res.push_back(\"D-\");\n    } else {\n      res.push_back(\"E\");\n    }\n  }\n  return res;",
        "grade-27": {
            "execution": 0
        },
        "180": "std::vector<std::string> letter_grades;\n\tfor (int i = 0; i < grades.size(); i++) {\n\t\tif (grades[i] == 4.0) {\n\t\t\tletter_grades.push_back(\"A+\");\n\t\t}\n\t\telse if (grades[i] > 3.7) {\n\t\t\tletter_grades.push_back(\"A\");\n\t\t}\n\t\telse if (grades[i] > 3.3) {\n\t\t\tletter_grades.push_back(\"A-\");\n\t\t}\n\t\telse if (grades[i] > 3.0) {\n\t\t\tletter_grades.push_back(\"B+\");\n\t\t}\n\t\telse if (grades[i] > 2.7) {\n\t\t\tletter_grades.push_back(\"B\");\n\t\t}\n\t\telse if (grades[i] > 2.3) {\n\t\t\tletter_grades.push_back(\"B-\");\n\t\t}\n\t\telse if (grades[i] > 2.0) {\n\t\t\tletter_grades.push_back(\"C+\");\n\t\t}\n\t\telse if (grades[i] > 1.7) {\n\t\t\tletter_grades.push_back(\"C\");\n\t\t}\n\t\telse if (grades[i] > 1.3) {\n\t\t\tletter_grades.push_back(\"C-\");\n\t\t}\n\t\telse if (grades[i] > 1.0) {\n\t\t\tletter_grades.push_back(\"D+\");\n\t\t}\n\t\telse if (grades[i] > 0.7) {\n\t\t\tletter_grades.push_back(\"D\");\n\t\t}\n\t\telse if (grades[i] > 0.0) {\n\t\t\tletter_grades.push_back(\"D-\");\n\t\t}\n\t\telse {\n\t\t\tletter_grades.push_back(\"E\");\n\t\t}\n\t}\n\treturn letter_grades;",
        "grade-180": {
            "execution": 0
        },
        "143": "std::vector<std::string> results;\n\tfor (int i = 0; i < grades.size(); i++) {\n\t\tif (grades[i] == 4.0) {\n\t\t\tresults.push_back(\"A+\");\n\t\t}\n\t\telse if (grades[i] >= 3.7) {\n\t\t\tresults.push_back(\"A\");\n\t\t}\n\t\telse if (grades[i] >= 3.3) {\n\t\t\tresults.push_back(\"A-\");\n\t\t}\n\t\telse if (grades[i] >= 3.0) {\n\t\t\tresults.push_back(\"B+\");\n\t\t}\n\t\telse if (grades[i] >= 2.7) {\n\t\t\tresults.push_back(\"B\");\n\t\t}\n\t\telse if (grades[i] >= 2.3) {\n\t\t\tresults.push_back(\"B-\");\n\t\t}\n\t\telse if (grades[i] >= 2.0) {\n\t\t\tresults.push_back(\"C+\");\n\t\t}\n\t\telse if (grades[i] >= 1.7) {\n\t\t\tresults.push_back(\"C\");\n\t\t}\n\t\telse if (grades[i] >= 1.3) {\n\t\t\tresults.push_back(\"C-\");\n\t\t}\n\t\telse if (grades[i] >= 1.0) {\n\t\t\tresults.push_back(\"D+\");\n\t\t}\n\t\telse if (grades[i] >= 0.7) {\n\t\t\tresults.push_back(\"D\");\n\t\t}\n\t\telse if (grades[i] >= 0.0) {\n\t\t\tresults.push_back(\"D-\");\n\t\t}\n\t\telse {\n\t\t\tresults.push_back(\"E\");\n\t\t}\n\t}\n\treturn results;",
        "grade-143": {
            "execution": 0
        },
        "22": "std::vector<std::string> output;\n\tfor (float grade : grades) {\n\t\tif (grade == 4.0) {\n\t\t\toutput.push_back(\"A+\");\n\t\t}\n\t\telse if (grade > 3.7) {\n\t\t\toutput.push_back(\"A\");\n\t\t}\n\t\telse if (grade > 3.3) {\n\t\t\toutput.push_back(\"A-\");\n\t\t}\n\t\telse if (grade > 3.0) {\n\t\t\toutput.push_back(\"B+\");\n\t\t}\n\t\telse if (grade > 2.7) {\n\t\t\toutput.push_back(\"B\");\n\t\t}\n\t\telse if (grade > 2.3) {\n\t\t\toutput.push_back(\"B-\");\n\t\t}\n\t\telse if (grade > 2.0) {\n\t\t\toutput.push_back(\"C+\");\n\t\t}\n\t\telse if (grade > 1.7) {\n\t\t\toutput.push_back(\"C\");\n\t\t}\n\t\telse if (grade > 1.3) {\n\t\t\toutput.push_back(\"C-\");\n\t\t}\n\t\telse if (grade > 1.0) {\n\t\t\toutput.push_back(\"D+\");\n\t\t}\n\t\telse if (grade > 0.7) {\n\t\t\toutput.push_back(\"D\");\n\t\t}\n\t\telse if (grade > 0.0) {\n\t\t\toutput.push_back(\"D-\");\n\t\t}\n\t\telse {\n\t\t\toutput.push_back(\"E\");\n\t\t}\n\t}\n\treturn output;",
        "grade-22": {
            "execution": 0
        },
        "155": "std::vector<std::string> letter_grades;\n  for (auto grade : grades) {\n    if (grade >= 4.0) {\n      letter_grades.push_back(\"A+\");\n    } else if (grade >= 3.7) {\n      letter_grades.push_back(\"A\");\n    } else if (grade >= 3.3) {\n      letter_grades.push_back(\"A-\");\n    } else if (grade >= 3.0) {\n      letter_grades.push_back(\"B+\");\n    } else if (grade >= 2.7) {\n      letter_grades.push_back(\"B\");\n    } else if (grade >= 2.3) {\n      letter_grades.push_back(\"B-\");\n    } else if (grade >= 2.0) {\n      letter_grades.push_back(\"C+\");\n    } else if (grade >= 1.7) {\n      letter_grades.push_back(\"C\");\n    } else if (grade >= 1.3) {\n      letter_grades.push_back(\"C-\");\n    } else if (grade >= 1.0) {\n      letter_grades.push_back(\"D+\");\n    } else if (grade >= 0.7) {\n      letter_grades.push_back(\"D\");\n    } else if (grade >= 0.0) {\n      letter_grades.push_back(\"D-\");\n    } else {\n      letter_grades.push_back(\"E\");\n    }\n  }\n  return letter_grades;",
        "grade-155": {
            "execution": 0
        },
        "111": "std::vector<std::string> letter_grades = {\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"};\n  std::vector<float> numerical_grades = {4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0};\n  std::vector<std::string> result;\n  for (float grade : grades) {\n    for (int i = 0; i < numerical_grades.size(); i++) {\n      if (grade >= numerical_grades[i]) {\n        result.push_back(letter_grades[i]);\n        break;\n      }\n    }\n  }\n  return result;",
        "grade-111": {
            "execution": 0
        },
        "8": "std::vector<std::string> results;\n    for (float grade : grades) {\n        std::string letter;\n        if (grade == 4.0) {\n            letter = \"A+\";\n        } else if (grade > 3.7) {\n            letter = \"A\";\n        } else if (grade > 3.3) {\n            letter = \"A-\";\n        } else if (grade > 3.0) {\n            letter = \"B+\";\n        } else if (grade > 2.7) {\n            letter = \"B\";\n        } else if (grade > 2.3) {\n            letter = \"B-\";\n        } else if (grade > 2.0) {\n            letter = \"C+\";\n        } else if (grade > 1.7) {\n            letter = \"C\";\n        } else if (grade > 1.3) {\n            letter = \"C-\";\n        } else if (grade > 1.0) {\n            letter = \"D+\";\n        } else if (grade > 0.7) {\n            letter = \"D\";\n        } else if (grade > 0.0) {\n            letter = \"D-\";\n        } else {\n            letter = \"E\";\n        }\n        results.push_back(letter);\n    }\n    return results;",
        "grade-8": {
            "execution": 0
        },
        "7": "std::vector<std::string> letter_grades;\n\tfor (int i = 0; i < grades.size(); i++) {\n\t\tif (grades[i] >= 4.0)\n\t\t\tletter_grades.push_back(\"A+\");\n\t\telse if (grades[i] >= 3.7)\n\t\t\tletter_grades.push_back(\"A\");\n\t\telse if (grades[i] >= 3.3)\n\t\t\tletter_grades.push_back(\"A-\");\n\t\telse if (grades[i] >= 3.0)\n\t\t\tletter_grades.push_back(\"B+\");\n\t\telse if (grades[i] >= 2.7)\n\t\t\tletter_grades.push_back(\"B\");\n\t\telse if (grades[i] >= 2.3)\n\t\t\tletter_grades.push_back(\"B-\");\n\t\telse if (grades[i] >= 2.0)\n\t\t\tletter_grades.push_back(\"C+\");\n\t\telse if (grades[i] >= 1.7)\n\t\t\tletter_grades.push_back(\"C\");\n\t\telse if (grades[i] >= 1.3)\n\t\t\tletter_grades.push_back(\"C-\");\n\t\telse if (grades[i] >= 1.0)\n\t\t\tletter_grades.push_back(\"D+\");\n\t\telse if (grades[i] >= 0.7)\n\t\t\tletter_grades.push_back(\"D\");\n\t\telse if (grades[i] >= 0.0)\n\t\t\tletter_grades.push_back(\"D-\");\n\t\telse\n\t\t\tletter_grades.push_back(\"E\");\n\t}\n\treturn letter_grades;",
        "grade-7": {
            "execution": 0
        },
        "23": "std::vector<std::string>result;\n    for(int i=0;i<grades.size();i++){\n        if(grades[i]>=4.0){\n            result.push_back(\"A+\");\n        }\n        else if(grades[i]>=3.7){\n            result.push_back(\"A\");\n        }\n        else if(grades[i]>=3.3){\n            result.push_back(\"A-\");\n        }\n        else if(grades[i]>=3.0){\n            result.push_back(\"B+\");\n        }\n        else if(grades[i]>=2.7){\n            result.push_back(\"B\");\n        }\n        else if(grades[i]>=2.3){\n            result.push_back(\"B-\");\n        }\n        else if(grades[i]>=2.0){\n            result.push_back(\"C+\");\n        }\n        else if(grades[i]>=1.7){\n            result.push_back(\"C\");\n        }\n        else if(grades[i]>=1.3){\n            result.push_back(\"C-\");\n        }\n        else if(grades[i]>=1.0){\n            result.push_back(\"D+\");\n        }\n        else if(grades[i]>=0.7){\n            result.push_back(\"D\");\n        }\n        else if(grades[i]>=0.0){\n            result.push_back(\"D-\");\n        }\n        else{\n            result.push_back(\"E\");\n        }\n    }\n    return result;",
        "grade-23": {
            "execution": 0
        },
        "56": "std::vector<std::string> result;\n    float grade;\n    for (int i = 0; i < grades.size(); i++) {\n        grade = grades[i];\n        if (grade > 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;",
        "grade-56": {
            "execution": 0
        },
        "60": "// your code here!\n  std::vector<std::string> retval;\n  float grade;\n  for(int i = 0; i < grades.size(); i++){\n    grade = grades[i];\n    if(grade >= 4.0){\n      retval.push_back(\"A+\");\n    }\n    else if(grade >= 3.7){\n      retval.push_back(\"A\");\n    }\n    else if(grade >= 3.3){\n      retval.push_back(\"A-\");\n    }\n    else if(grade >= 3.0){\n      retval.push_back(\"B+\");\n    }\n    else if(grade >= 2.7){\n      retval.push_back(\"B\");\n    }\n    else if(grade >= 2.3){\n      retval.push_back(\"B-\");\n    }\n    else if(grade >= 2.0){\n      retval.push_back(\"C+\");\n    }\n    else if(grade >= 1.7){\n      retval.push_back(\"C\");\n    }\n    else if(grade >= 1.3){\n      retval.push_back(\"C-\");\n    }\n    else if(grade >= 1.0){\n      retval.push_back(\"D+\");\n    }\n    else if(grade >= 0.7){\n      retval.push_back(\"D\");\n    }\n    else if(grade >= 0.0){\n      retval.push_back(\"D-\");\n    }\n    else{\n      retval.push_back(\"E\");\n    }\n  }\n  return retval;",
        "grade-60": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0]) == (None, None)\nstd::tuple<std::optional<long>, std::optional<long>> largest_smallest_integers(std::vector<long> lst) {\n",
        "snippet": [
            "    int maxneg=0,minpos=0;\n    for (int i=0;i<lst.size();i++)\n    {\n        if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];\n        if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];\n    }\n    return {maxneg,minpos};\n}\n"
        ],
        "simplified": "Create a function that returns a tuple (a, b), where 'a' is the largest of negative integers, and 'b' is the smallest of positive integers in a list. If there is no negative or positive integers, return them as None.",
        "task_id": "136",
        "167": "if (lst.size() == 0) {\n\t\treturn std::make_tuple(std::nullopt, std::nullopt);\n\t}\n\tlong positive = INT_MAX;\n\tlong negative = INT_MIN;\n\tfor (long num : lst) {\n\t\tif (num > 0) {\n\t\t\tpositive = std::min(positive, num);\n\t\t}\n\t\telse if (num < 0) {\n\t\t\tnegative = std::max(negative, num);\n\t\t}\n\t}\n\tif (positive == INT_MAX) {\n\t\tpositive = std::nullopt;\n\t}\n\tif (negative == INT_MIN) {\n\t\tnegative = std::nullopt;\n\t}\n\treturn std::make_tuple(negative, positive);",
        "grade-167": {
            "execution": 0
        },
        "28": "return {};",
        "grade-28": {
            "execution": 0
        },
        "6": "std::sort(lst.begin(), lst.end());\n\treturn std::make_tuple(std::optional<long>{}, std::optional<long>{});",
        "grade-6": {
            "execution": 0
        },
        "193": "int min = 0;\n  int max = 0;\n  bool minSet = false;\n  bool maxSet = false;\n  for (int i = 0; i < lst.size(); i++) {\n    if (lst[i] > 0) {\n      if (!minSet) {\n        min = lst[i];\n        minSet = true;\n      } else if (lst[i] < min) {\n        min = lst[i];\n      }\n    } else if (lst[i] < 0) {\n      if (!maxSet) {\n        max = lst[i];\n        maxSet = true;\n      } else if (lst[i] > max) {\n        max = lst[i];\n      }\n    }\n  }\n  std::optional<long> newMax;\n  std::optional<long> newMin;\n  if (maxSet) {\n    newMax = max;\n  }\n  if (minSet) {\n    newMin = min;\n  }\n  return std::make_tuple(newMax, newMin);",
        "grade-193": {
            "execution": 0
        },
        "71": "std::sort(lst.begin(), lst.end());\n    int i = 0;\n    while (i < lst.size() && lst[i] < 0)\n        i++;\n    std::optional<long> max;\n    std::optional<long> min;\n    if (i > 0)\n        max = lst[i - 1];\n    if (i < lst.size())\n        min = lst[i];\n    return std::make_tuple(max, min);",
        "grade-71": {
            "execution": 0
        },
        "62": "long min=0,max=0;\n    bool maxFound=false,minFound=false;\n    for(long a:lst){\n        if(a>0 && !minFound){\n            min=a;\n            minFound=true;\n        }\n        if(a<0 && !maxFound){\n            max=a;\n            maxFound=true;\n        }\n        if(a>0 && minFound && a<min){\n            min=a;\n        }\n        if(a<0 && maxFound && a>max){\n            max=a;\n        }\n    }\n    if(minFound){\n        return std::make_tuple(std::make_optional(max),std::make_optional(min));\n    }\n    else{\n        return std::make_tuple(std::nullopt,std::nullopt);\n    }",
        "grade-62": {
            "execution": 0
        },
        "57": "std::optional<long> a, b;\n  bool pos=false, neg=false;\n  for(auto x: lst)\n  {\n    if(x<0)\n    {\n      if(!neg)\n      {\n        a=x;\n        neg=true;\n      }\n      else\n      {\n        if(x>*a)\n          a=x;\n      }\n    }\n    else if(x>0)\n    {\n      if(!pos)\n      {\n        b=x;\n        pos=true;\n      }\n      else\n      {\n        if(x<*b)\n          b=x;\n      }\n    }\n  }\n  return {a, b};",
        "grade-57": {
            "execution": 0
        },
        "35": "int maxNeg = -1;\n    int minPos = 1;\n    bool negFlag = false;\n    bool posFlag = false;\n    std::tuple<std::optional<long>, std::optional<long>> result;\n    std::optional<long> neg;\n    std::optional<long> pos;\n    for(auto i : lst){\n        if(i < 0 && i > maxNeg){\n            maxNeg = i;\n            negFlag = true;\n        }\n        if(i > 0 && i < minPos){\n            minPos = i;\n            posFlag = true;\n        }\n    }\n    if(negFlag){\n        neg = maxNeg;\n    }\n    if(posFlag){\n        pos = minPos;\n    }\n    result = std::make_tuple(neg, pos);\n    return result;",
        "grade-35": {
            "execution": 0
        },
        "192": "std::tuple<std::optional<long>, std::optional<long>> ret;\n    std::optional<long> largest;\n    std::optional<long> smallest;\n    if (lst.size() == 0) {\n        return {largest, smallest};\n    }\n    if (lst.size() == 1) {\n        return {largest, smallest};\n    }\n    int i = 0;\n    while (i < lst.size()) {\n        if (lst[i] < 0) {\n            largest = lst[i];\n            break;\n        }\n        i++;\n    }\n    i = 0;\n    while (i < lst.size()) {\n        if (lst[i] > 0) {\n            smallest = lst[i];\n            break;\n        }\n        i++;\n    }\n    for (i = 0; i < lst.size(); i++) {\n        if (lst[i] < 0) {\n            if (lst[i] > largest) {\n                largest = lst[i];\n            }\n        }\n        if (lst[i] > 0) {\n            if (lst[i] < smallest) {\n                smallest = lst[i];\n            }\n        }\n    }\n    return {largest, smallest};",
        "grade-192": {
            "execution": 0
        },
        "26": "long smallest_positive=INT_MAX;\n    long largest_negative=INT_MIN;\n    for(int i=0;i<lst.size();i++){\n        if(lst[i]>0){\n            if(lst[i]<smallest_positive){\n                smallest_positive=lst[i];\n            }\n        }\n        else{\n            if(lst[i]>largest_negative){\n                largest_negative=lst[i];\n            }\n        }\n    }\n    if(smallest_positive!=INT_MAX && largest_negative!=INT_MIN){\n        return std::make_tuple(largest_negative,smallest_positive);\n    }\n    else if(smallest_positive==INT_MAX && largest_negative!=INT_MIN){\n        return std::make_tuple(largest_negative,std::nullopt);\n    }\n    else if(smallest_positive!=INT_MAX && largest_negative==INT_MIN){\n        return std::make_tuple(std::nullopt,smallest_positive);\n    }\n    else{\n        return std::make_tuple(std::nullopt,std::nullopt);\n    }",
        "grade-26": {
            "execution": 0
        },
        "177": "std::tuple<std::optional<long>, std::optional<long>> result = {};\n    auto& a = std::get<0>(result);\n    auto& b = std::get<1>(result);\n    for (auto e : lst) {\n        if (e < 0) {\n            if (!a || e > *a) {\n                a = e;\n            }\n        } else if (e > 0) {\n            if (!b || e < *b) {\n                b = e;\n            }\n        }\n    }\n    return result;",
        "grade-177": {
            "execution": 0
        },
        "143": "long min = lst[0];\n\t\t\t\tlong max = lst[0];\n\t\t\t\tfor (long i = 0; i < lst.size(); i++) {\n\t\t\t\t\t\t\t\tif (lst[i] > max) {\n\t\t\t\t\t\t\t\t\t\t\t\tmax = lst[i];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (lst[i] < min) {\n\t\t\t\t\t\t\t\t\t\t\t\tmin = lst[i];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (max > 0) {\n\t\t\t\t\t\t\t\tif (min < 0) {\n\t\t\t\t\t\t\t\t\t\t\t\treturn std::make_tuple(max, min);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn std::make_tuple(max, std::nullopt);\n\t\t\t\t}\n\t\t\t\tif (min < 0) {\n\t\t\t\t\t\t\t\treturn std::make_tuple(std::nullopt, min);\n\t\t\t\t}\n\t\t\t\treturn std::make_tuple(std::nullopt, std::nullopt);",
        "grade-143": {
            "execution": 0
        },
        "22": "std::optional<long> largest_negative = std::nullopt;\n  std::optional<long> smallest_positive = std::nullopt;\n  for (const auto& element : lst) {\n    if (element < 0 && largest_negative == std::nullopt) {\n      largest_negative = element;\n    }\n    if (element > 0 && smallest_positive == std::nullopt) {\n      smallest_positive = element;\n    }\n    if (element < 0 && largest_negative != std::nullopt) {\n      if (element > *largest_negative) {\n        largest_negative = element;\n      }\n    }\n    if (element > 0 && smallest_positive != std::nullopt) {\n      if (element < *smallest_positive) {\n        smallest_positive = element;\n      }\n    }\n  }\n  return std::make_tuple(largest_negative, smallest_positive);",
        "grade-22": {
            "execution": 0
        },
        "155": "std::optional<long> b{},a{};\n\tfor(int i=0;i<lst.size();i++)\n\t{\n\t\tif(lst[i]<0)\n\t\t{\n\t\t\tif(!a)\n\t\t\t\ta=lst[i];\n\t\t\telse\n\t\t\t\ta=lst[i]>*a?lst[i]:*a;\n\t\t}\n\t\telse if(lst[i]>0)\n\t\t{\n\t\t\tif(!b)\n\t\t\t\tb=lst[i];\n\t\t\telse\n\t\t\t\tb=lst[i]<*b?lst[i]:*b;\n\t\t}\n\t}\n\treturn std::make_tuple(a,b);",
        "grade-155": {
            "execution": 0
        },
        "110": "auto largest = *std::max_element(lst.begin(), lst.end());\n  auto smallest = *std::min_element(lst.begin(), lst.end());\n  std::tuple<std::optional<long>, std::optional<long>> res;\n  if (largest < 0) {\n    res = std::make_tuple(largest, std::nullopt);\n  } else if (smallest > 0) {\n    res = std::make_tuple(std::nullopt, smallest);\n  } else {\n    res = std::make_tuple(std::nullopt, std::nullopt);\n  }\n  return res;",
        "grade-110": {
            "execution": 0
        },
        "8": "std::tuple<std::optional<long>, std::optional<long>> tup;\n\tlong x = 0;\n\tstd::optional<long> myMax = std::nullopt;\n\tstd::optional<long> myMin = std::nullopt;\n\tfor (long i = 0; i < lst.size(); i++) {\n\t\tif (lst[i] > 0) {\n\t\t\tif (myMin == std::nullopt) {\n\t\t\t\tmyMin = lst[i];\n\t\t\t}\n\t\t\telse if (lst[i] < myMin) {\n\t\t\t\tmyMin = lst[i];\n\t\t\t}\n\t\t}\n\t\telse if (lst[i] < 0) {\n\t\t\tif (myMax == std::nullopt) {\n\t\t\t\tmyMax = lst[i];\n\t\t\t}\n\t\t\telse if (lst[i] > myMax) {\n\t\t\t\tmyMax = lst[i];\n\t\t\t}\n\t\t}\n\t}\n\tstd::get<0>(tup) = myMax;\n\tstd::get<1>(tup) = myMin;\n\treturn tup;",
        "grade-8": {
            "execution": 0
        },
        "7": "if(lst.size()==0) return {std::nullopt, std::nullopt};\n    std::sort(lst.begin(), lst.end());\n    if(lst[0]>=0) return {std::nullopt, (long)lst[0]};\n    else if(lst[lst.size()-1]<=0) return {(long)lst[lst.size()-1], std::nullopt};\n    else return {(long)lst[lst.size()-1], (long)lst[0]};",
        "grade-7": {
            "execution": 0
        },
        "23": "std::optional<long> a = std::nullopt;\n\tstd::optional<long> b = std::nullopt;\n\tbool contains_negative = false;\n\tbool contains_positive = false;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (lst[i] < 0) {\n\t\t\tcontains_negative = true;\n\t\t\tif (!a.has_value())\n\t\t\t\ta = lst[i];\n\t\t\telse\n\t\t\t\ta = lst[i] > a.value() ? lst[i] : a.value();\n\t\t}\n\t\telse if (lst[i] > 0) {\n\t\t\tcontains_positive = true;\n\t\t\tif (!b.has_value())\n\t\t\t\tb = lst[i];\n\t\t\telse\n\t\t\t\tb = lst[i] < b.value() ? lst[i] : b.value();\n\t\t}\n\t}\n\tif (!contains_negative)\n\t\ta = std::nullopt;\n\tif (!contains_positive)\n\t\tb = std::nullopt;\n\treturn std::make_tuple(a, b);",
        "grade-23": {
            "execution": 0
        },
        "55": "int min, max, flag=0;\n    if(lst.size() == 0)\n        return std::make_tuple(std::nullopt, std::nullopt);\n    for(int i=0; i<lst.size(); i++)\n    {\n        if(lst[i]<0)\n        {\n            if(flag==0)\n            {\n                max = lst[i];\n                flag = 1;\n            }\n            else\n            {\n                if(lst[i]>max)\n                    max = lst[i];\n            }\n        }\n        else if(lst[i]>0)\n        {\n            if(flag==0)\n            {\n                min = lst[i];\n                flag = 1;\n            }\n            else\n            {\n                if(lst[i]<min)\n                    min = lst[i];\n            }\n        }\n    }\n    if(flag == 0)\n        return std::make_tuple(std::nullopt, std::nullopt);\n    else\n        return std::make_tuple(max, min);",
        "grade-55": {
            "execution": 0
        },
        "59": "std::optional<long> largestNegative;\n  std::optional<long> smallestPositive;\n  if (lst.size() > 0) {\n    largestNegative = std::nullopt;\n    smallestPositive = std::nullopt;\n    for (auto i : lst) {\n      if (i < 0) {\n        if (!largestNegative.has_value() || i > largestNegative.value()) {\n          largestNegative = i;\n        }\n      } else if (i > 0) {\n        if (!smallestPositive.has_value() || i < smallestPositive.value()) {\n          smallestPositive = i;\n        }\n      }\n    }\n  }\n  return std::make_tuple(largestNegative, smallestPositive);",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nlong fib(long n) {\n",
        "snippet": [
            "    int f[1000];\n    f[0]=0;f[1]=1;\n    for (int i=2;i<=n; i++)\n    f[i]=f[i-1]+f[i-2];\n    return f[n];\n}\n"
        ],
        "simplified": "Return n-th Fibonacci number.",
        "task_id": "55",
        "182": "long a = 0, b = 1, c;\n    while (n--) {\n        c = a + b;\n        a = b;\n        b = c;\n    }\n    return a;",
        "grade-182": {
            "execution": 1
        },
        "28": "assert(n >= 0);\n  long rv=0;\n  long first=0;\n  long second=1;\n  if(n==0) return 0;\n  else if(n==1) return 1;\n  else{\n    for(int i=2;i<=n;i++){\n      rv=first+second;\n      first=second;\n      second=rv;\n    }\n  }\n  return rv;",
        "grade-28": {
            "execution": 1
        },
        "6": "if (n < 0) {\n    assert(false);\n  }\n  // Base case.\n  if (n == 0 || n == 1) {\n    return n;\n  }\n  // Recursive case.\n  return fib(n - 1) + fib(n - 2);",
        "grade-6": {
            "execution": 1
        },
        "72": "if (n <= 1) return n;\n  long previous = 0;\n  long current = 1;\n  for (long i = 0; i < n - 1; ++i) {\n    long tmp_previous = previous;\n    previous = current;\n    current = tmp_previous + current;\n  }\n  return current;",
        "grade-72": {
            "execution": 1
        },
        "64": "if (n == 0) {\n        return 0;\n    }\n    long sum = 1;\n    long fib1 = 0;\n    long fib2 = 1;\n    for (long i = 2; i <= n; i++) {\n        sum = fib1 + fib2;\n        fib1 = fib2;\n        fib2 = sum;\n    }\n    return sum;",
        "grade-64": {
            "execution": 1
        },
        "59": "//assert(n >= 0);\n    if (n < 2) {\n        return n;\n    }\n    long a = 0;\n    long b = 1;\n    for (long i = 2; i <= n; i++) {\n        long c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;",
        "grade-59": {
            "execution": 1
        },
        "35": "// Return the nth Fibonacci number\n    int fib[n+1];\n    fib[0]=0;\n    fib[1]=1;\n    for(int i=2;i<=n;i++)\n    {\n        fib[i]=fib[i-1]+fib[i-2];\n    }\n    return fib[n];",
        "grade-35": {
            "execution": 1
        },
        "26": "if (n == 0) {\n\t\treturn 0;\n\t}\n\tif (n == 1) {\n\t\treturn 1;\n\t}\n\tlong n0 = 0;\n\tlong n1 = 1;\n\tlong n2 = 0;\n\tfor (int i = 2; i <= n; i++) {\n\t\tn2 = n0 + n1;\n\t\tn0 = n1;\n\t\tn1 = n2;\n\t}\n\treturn n2;",
        "grade-26": {
            "execution": 1
        },
        "193": "assert(n >= 0);\n  // C++11 allows such a declaration.\n  long memo[n + 1];\n  return fib_helper(n, memo);",
        "grade-193": {
            "execution": 0
        },
        "153": "if (n == 0) return 0;\n\tif (n == 1) return 1;\n\tlong a = 0, b = 1, c;\n\tfor (int i = 2; i <= n; i++) {\n\t\tc = a + b;\n\t\ta = b;\n\t\tb = c;\n\t}\n\treturn c;",
        "grade-153": {
            "execution": 1
        },
        "22": "long* tab=new long[n+1];\n    tab[0]=0;\n    tab[1]=1;\n    for(int i=2;i<=n;i++){\n        tab[i]=tab[i-1]+tab[i-2];\n    }\n    return tab[n];",
        "grade-22": {
            "execution": 1
        },
        "167": "long curr = 1;\n\tlong prev = 0;\n\twhile (n-- > 0) {\n\t\tlong next = curr + prev;\n\t\tprev = curr;\n\t\tcurr = next;\n\t}\n\treturn prev;",
        "grade-167": {
            "execution": 1
        },
        "115": "if (n==0) return 0;\n    if (n==1) return 1;\n    long n1=0, n2=1, nt;\n    int i;\n    for (i=2; i<=n; i++) {\n        nt = n1 + n2;\n        n1 = n2;\n        n2 = nt;\n    }\n    return n2;",
        "grade-115": {
            "execution": 1
        },
        "8": "assert(n >= 0);\n    if (n == 0 || n == 1) {\n        return n;\n    }\n    return fib(n - 1) + fib(n - 2);",
        "grade-8": {
            "execution": 1
        },
        "7": "long result = 0;\n\tlong first = 0;\n\tlong second = 1;\n\tfor (int i = 0; i < n; i++) {\n\t\tresult = first + second;\n\t\tfirst = second;\n\t\tsecond = result;\n\t}\n\treturn result;",
        "grade-7": {
            "execution": 0
        },
        "23": "if (n < 2) {\n        return n;\n    }\n    long f1 = 0;\n    long f2 = 1;\n    long f3 = 0;\n    for (int i = 1; i < n; i++) {\n        f3 = f1 + f2;\n        f1 = f2;\n        f2 = f3;\n    }\n    return f3;",
        "grade-23": {
            "execution": 1
        },
        "56": "assert(n >= 0);\n    if (n == 0) return 0;\n    if (n == 1) return 1;\n    return fib(n - 1) + fib(n - 2);",
        "grade-56": {
            "execution": 1
        },
        "61": "assert(n >= 0);\n    // compute bottom-up\n    long memo[n+1];\n    memo[0] = 0;\n    memo[1] = 1;\n    for (int i = 2; i <= n; i++) {\n        memo[i] = memo[i-1] + memo[i-2];\n    }\n    return memo[n];",
        "grade-61": {
            "execution": 1
        },
        "140": "if (n < 2) {\n        return n;\n    }\n    long prev = 0;\n    long curr = 1;\n    for (long i = 2; i <= n; i++) {\n        long next = prev + curr;\n        prev = curr;\n        curr = next;\n    }\n    return curr;",
        "grade-140": {
            "execution": 1
        },
        "170": "assert(n >= 0);\n    int f[] = {0, 1};\n    if (n <= 1) return f[n];\n    long F = 0, F1 = 1, F2 = 1;\n    for (int i = 2; i <= n; i++) {\n        F = F1 + F2;\n        F2 = F1;\n        F1 = F;\n    }\n    return F;",
        "grade-170": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nstd::string circular_shift(long x, long shift) {\n",
        "snippet": [
            "    string xs;\n    xs=to_string(x);\n    if (xs.length()<shift)\n    {\n        string s(xs.rbegin(),xs.rend());\n        return s;\n    }\n    xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);\n    return xs;\n}\n"
        ],
        "simplified": "Circular shift the digits of the integer x, shift the digits right by shift and return the result as a string. If shift > number of digits, return digits reversed.",
        "task_id": "65",
        "163": "std::string s = std::to_string(x);\n\tstd::string answer = \"\";\n\tif (shift > s.length()) {\n\t\t// reverse digits\n\t\tstd::string temp = \"\";\n\t\tfor (int i = s.length() - 1; i >= 0; i--) {\n\t\t\ttemp += s[i];\n\t\t}\n\t\tanswer = temp;\n\t}\n\telse {\n\t\tanswer = s.substr(shift) + s.substr(0, shift);\n\t}\n\treturn answer;",
        "grade-163": {
            "execution": 0
        },
        "28": "std::string result = std::to_string(x);\n    shift = shift % result.size();\n    // Rotate left by one\n    return result.substr(shift) + result.substr(0, shift);",
        "grade-28": {
            "execution": 0
        },
        "6": "std::stringstream ss;\n  ss << x;\n  std::string digits = ss.str();\n  if (shift >= digits.size()) {\n    std::reverse(digits.begin(), digits.end());\n    return digits;\n  } else {\n    return digits.substr(shift) + digits.substr(0, shift);\n  }",
        "grade-6": {
            "execution": 0
        },
        "189": "std::string s = std::to_string(x);\n    long n = s.size();\n    if (shift > n) {\n        shift = shift % n;\n    }\n    std::string xs = s;\n    for (long i = 0; i < n; i++) {\n        xs[i] = s[(i + shift) % n];\n    }\n    return xs;",
        "grade-189": {
            "execution": 0
        },
        "70": "std::vector<int> a;\n    std::vector<int> b;\n    int temp;\n    int length = 0;\n    while (x != 0) {\n        temp = x % 10;\n        a.push_back(temp);\n        x = x / 10;\n        length++;\n    }\n    for (int i = 0; i < shift; i++) {\n        b.push_back(a[i]);\n    }\n    for (int i = shift; i < length; i++) {\n        a[i - shift] = a[i];\n    }\n    for (int i = 0; i < shift; i++) {\n        a[length - shift + i] = b[i];\n    }\n    std::stringstream ss;\n    for (int i = 0; i < length; i++) {\n        ss << a[i];\n    }\n    return ss.str();",
        "grade-70": {
            "execution": 0
        },
        "62": "// TODO",
        "grade-62": {
            "execution": 0
        },
        "57": "std::stringstream stream;\n    stream << x;\n    std::string digit = stream.str();\n    if (shift < digit.length()) {\n        std::string first_half = digit.substr(0, shift);\n        std::string second_half = digit.substr(shift, digit.length() - shift);\n        return second_half + first_half;\n    } else {\n        std::reverse(digit.begin(), digit.end());\n        return digit;\n    }",
        "grade-57": {
            "execution": 0
        },
        "35": "if (x == 0) return \"0\";\n  std::string digits = std::to_string(x);\n  std::reverse(digits.begin(), digits.end());\n  long num_digits = digits.size();\n  // Even if shift is greater than num_digits, its ok to take modulo\n  shift = shift % num_digits;\n  // std::cout << digits << \", \" << shift << std::endl;\n  std::string shifted_digits = digits.substr(shift) + digits.substr(0, shift);\n  std::reverse(shifted_digits.begin(), shifted_digits.end());\n  return shifted_digits;",
        "grade-35": {
            "execution": 0
        },
        "188": "int num_digits = std::floor(std::log10(x)) + 1;\n    if (shift > num_digits) {\n        std::string s = std::to_string(x);\n        std::reverse(s.begin(), s.end());\n        return s;\n    } else {\n        long power = static_cast<long>(std::pow(10, shift));\n        long div = x / power;\n        long rem = x % power;\n        return std::to_string(rem) + std::to_string(div);\n    }",
        "grade-188": {
            "execution": 0
        },
        "26": "std::string num = std::to_string(x);\n    std::string rev_num;\n    int len = num.length();\n    shift = shift % len;\n    if (shift == 0) {\n        return num;\n    }\n    else {\n        rev_num = num.substr(len - shift, shift);\n        rev_num += num.substr(0, len - shift);\n        return rev_num;\n    }",
        "grade-26": {
            "execution": 0
        },
        "173": "std::string str = std::to_string(x);\n   std::reverse(str.begin(), str.end());\n   std::string str2 = str.substr(0, shift);\n   std::reverse(str2.begin(), str2.end());\n   str = str.substr(shift, str.size() - shift);\n   str = str + str2;\n   std::reverse(str.begin(), str.end());\n   return str;",
        "grade-173": {
            "execution": 0
        },
        "139": "std::stringstream ss;\n\tlong digits = 0;\n\tlong d = x;\n\twhile (d) {\n\t\td /= 10;\n\t\tdigits++;\n\t}\n\tss << x;\n\tstd::string s = ss.str();\n\tif (shift > digits) {\n\t\tstd::reverse(s.begin(), s.end());\n\t\treturn s;\n\t}\n\tshift = shift % digits;\n\tfor (int i = 0; i < shift; i++) {\n\t\tchar c = s[s.size() - 1];\n\t\ts.erase(s.end() - 1);\n\t\ts.insert(s.begin(), c);\n\t}\n\treturn s;",
        "grade-139": {
            "execution": 1
        },
        "22": "long tmp = x;\n  int count = 0;\n  while (tmp > 0) {\n    tmp /= 10;\n    count++;\n  }\n  int digits[count];\n  int i = 0;\n  tmp = x;\n  while (tmp > 0) {\n    digits[i] = tmp % 10;\n    tmp /= 10;\n    i++;\n  }\n  std::string result = \"\";\n  if (shift > count) {\n    for (int i = count - 1; i >= 0; i--) {\n      result += std::to_string(digits[i]);\n    }\n  } else {\n    for (int i = shift; i < count; i++) {\n      result += std::to_string(digits[i]);\n    }\n    for (int i = 0; i < shift; i++) {\n      result += std::to_string(digits[i]);\n    }\n  }\n  return result;",
        "grade-22": {
            "execution": 0
        },
        "151": "// Compute the length of the string needed to store the integer digits.\n\tlong len = log10(x) + 1;\n\t// Extract each digit of the integer x by repeatedly dividing by 10 and\n\t// using the remainder as the next digit.\n\tstd::string s;\n\tfor (long i = 0; i < len; i++) {\n\t\tlong x_digit = x % 10;\n\t\ts += std::to_string(x_digit);\n\t\tx /= 10;\n\t}\n\t// If the shift is greater than the number of digits, reverse the digits.\n\tif (shift > len) {\n\t\tstd::reverse(s.begin(), s.end());\n\t}\n\t// Otherwise, circular shift the digits right.\n\telse {\n\t\t// Insert the digits at the end of the string into the beginning.\n\t\tstd::rotate(s.begin(), s.begin() + len - shift, s.end());\n\t}\n\treturn s;",
        "grade-151": {
            "execution": 0
        },
        "108": "std::string str = std::to_string(x);\n    long N = str.size();\n    shift = shift % N;\n    std::string right = str.substr(N - shift, shift);\n    std::string left = str.substr(0, N - shift);\n    return right + left;",
        "grade-108": {
            "execution": 0
        },
        "8": "std::vector<long> digits;\n\tint n = x;\n\tint d;\n\t// create array with digits\n\twhile (n >= 1) {\n\t\td = n % 10;\n\t\tdigits.push_back(d);\n\t\tn = n / 10;\n\t}\n\t// reverse the digits in the array\n\tint start = 0;\n\tint end = digits.size() - 1;\n\tint temp;\n\twhile (start < end) {\n\t\ttemp = digits[start];\n\t\tdigits[start] = digits[end];\n\t\tdigits[end] = temp;\n\t\tstart++;\n\t\tend--;\n\t}\n\t// if shift is more than number of digits, return reversed digits\n\tif (shift > digits.size()) {\n\t\tstd::string s = \"\";\n\t\tint i;\n\t\tfor (i = 0; i < digits.size(); i++) {\n\t\t\ts += std::to_string(digits[i]);\n\t\t}\n\t\treturn s;\n\t}\n\t// shift the digits\n\tint shiftValue = shift % digits.size();\n\tstd::vector<long> finalDigits;\n\tfor (int i = 0; i < digits.size(); i++) {\n\t\tfinalDigits.push_back(digits[(i + shiftValue) % digits.size()]);\n\t}\n\t// if shift is 0, return reversed digits\n\tif (shift == 0) {\n\t\tstd::string s = \"\";\n\t\tint i;\n\t\tfor (i = 0; i < digits.size(); i++) {\n\t\t\ts += std::to_string(digits[i]);\n\t\t}\n\t\treturn s;\n\t}\n\t// return shifted digits\n\tstd::string s = \"\";\n\tint i;\n\tfor (i = 0; i < finalDigits.size(); i++) {\n\t\ts += std::to_string(finalDigits[i]);\n\t}\n\treturn s;",
        "grade-8": {
            "execution": 0
        },
        "7": "std::stringstream ss;\n    std::string str;\n    ss << x;\n    ss >> str;\n    if (shift > str.length()) {\n        std::reverse(str.begin(), str.end());\n        return str;\n    }\n    char c = str[0];\n    for (int i = 0; i < str.length() - 1; i++) {\n        str[i] = str[i + 1];\n    }\n    str[str.length() - 1] = c;\n    return str;",
        "grade-7": {
            "execution": 0
        },
        "23": "std::string str = std::to_string(x);\n    std::reverse(str.begin(), str.end());\n    std::rotate(str.begin(), str.begin() + shift, str.end());\n    return str;",
        "grade-23": {
            "execution": 0
        },
        "55": "std::string answer;\n  std::string num = std::to_string(x);\n  int digits = num.length();\n  if (shift >= digits) {\n    for (int i = digits - 1; i >= 0; i--) {\n      answer += num[i];\n    }\n  } else {\n    for (int i = shift; i < digits; i++) {\n      answer += num[i];\n    }\n    for (int i = 0; i < shift; i++) {\n      answer += num[i];\n    }\n  }\n  return answer;",
        "grade-55": {
            "execution": 0
        },
        "59": "int i = 0;\n    string s;\n    string res;\n    if (x == 0) {\n        return \"0\";\n    }\n    while (x != 0) {\n        int remainder = x % 10;\n        s.push_back(remainder + '0');\n        x = x / 10;\n        i++;\n    }\n    if (shift > i) {\n        reverse(s.begin(), s.end());\n        return s;\n    }\n    reverse(s.begin(), s.end());\n    res = s.substr(shift, i - shift);\n    res = res + s.substr(0, shift);\n    return res;",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long> l) {\n",
        "snippet": [
            "  float max=-10000;\n  for (int i=0;i<l.size();i++)\n  if (max<l[i]) max=l[i];\n  return max;\n\n}\n"
        ],
        "simplified": "Return maximum element in the list.",
        "task_id": "35",
        "28": "long max = l[0];\n    for(long i = 1; i < l.size(); i++) {\n        if(l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;",
        "grade-28": {
            "execution": 1
        },
        "6": "assert(l.size() > 0);\n  long max_ = l[0];\n  for (auto i : l) {\n    if (i > max_)\n      max_ = i;\n  }\n  return max_;",
        "grade-6": {
            "execution": 1
        },
        "83": "long maximum = -1000000000;\n\tfor (int i = 0; i < l.size(); i++) {\n\t\tif (l[i] > maximum) {\n\t\t\tmaximum = l[i];\n\t\t}\n\t}\n\treturn maximum;",
        "grade-83": {
            "execution": 1
        },
        "69": "long maximum = l[0];\n\tfor (int i = 0; i < l.size(); i++) {\n\t\tif (l[i] > maximum) {\n\t\t\tmaximum = l[i];\n\t\t}\n\t}\n\treturn maximum;",
        "grade-69": {
            "execution": 1
        },
        "62": "// YOUR CODE HERE\n  return *max_element(l.begin(), l.end());",
        "grade-62": {
            "execution": 1
        },
        "36": "// TODO: Replace the following line with your implementation.\n  int max = l[0];\n  for(int i=0;i<l.size();i++){\n    if(l[i]>max){\n      max = l[i];\n    }\n  }\n  return max;",
        "grade-36": {
            "execution": 1
        },
        "26": "long maximum = 0;\n\tfor (int i = 0; i < l.size(); i++) {\n\t\tif (l[i] > maximum) {\n\t\t\tmaximum = l[i];\n\t\t}\n\t}\n\treturn maximum;",
        "grade-26": {
            "execution": 1
        },
        "178": "assert(l.size() > 0);\n    auto iter = std::max_element(l.begin(), l.end());\n    long res = *iter;\n    return res;",
        "grade-178": {
            "execution": 1
        },
        "22": "// REPLACE WITH YOUR CODE.\n\treturn *std::max_element(l.begin(), l.end());",
        "grade-22": {
            "execution": 1
        },
        "199": "// YOUR CODE HERE\n    long max = *std::max_element(l.begin(), l.end());\n    return max;",
        "grade-199": {
            "execution": 1
        },
        "136": "assert(l.size() != 0);\n    long max = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;",
        "grade-136": {
            "execution": 1
        },
        "8": "long result = 0;\n    for (long i=0; i<l.size(); i++) {\n        if (l[i] > result) {\n            result = l[i];\n        }\n    }\n    return result;",
        "grade-8": {
            "execution": 1
        },
        "7": "assert(l.size() > 0);\n    long max = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;",
        "grade-7": {
            "execution": 1
        },
        "23": "long max;\n\tmax = l[0];\n\tfor (int i = 0; i < l.size(); i++) {\n\t\tif (l[i] > max) {\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;",
        "grade-23": {
            "execution": 1
        },
        "60": "int max = l[0];\n    for(int i = 1; i < l.size(); i++) {\n        if(l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;",
        "grade-60": {
            "execution": 1
        },
        "64": "return *max_element(l.begin(), l.end());",
        "grade-64": {
            "execution": 1
        },
        "164": "assert(!l.empty());\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;",
        "grade-164": {
            "execution": 1
        },
        "187": "// Your code here\n    long maximum = l[0];\n    for(int i=1;i<l.size();i++){\n      if(l[i]>maximum){\n        maximum = l[i];\n      }\n    }\n    return maximum;",
        "grade-187": {
            "execution": 1
        },
        "53": "// ------------WRITE YOUR CODE BELOW THIS LINE------------\n    return *std::max_element(l.begin(), l.end());\n    // ------------WRITE YOUR CODE ABOVE THIS LINE------------",
        "grade-53": {
            "execution": 1
        },
        "135": "assert(l.size() > 0);\n    long mx = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] > mx)\n            mx = l[i];\n    }\n    return mx;",
        "grade-135": {
            "execution": 1
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst) {\n",
        "snippet": [
            "    int sum=0;\n    for (int i=0;i*2<lst.size();i++)\n        if (lst[i*2]%2==1) sum+=lst[i*2];\n    return sum;\n}\n"
        ],
        "simplified": "Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.",
        "task_id": "121",
        "32": "int n = lst.size();\n    long ans = 0;\n    for(int i = 0; i < n; i++)\n    {\n        if(i%2==0 && lst[i]%2==1)\n        {\n            ans += lst[i];\n        }\n    }\n    return ans;",
        "grade-32": {
            "execution": 1
        },
        "7": "long sum = 0;\n    //loop over vector and check for odd number in even position\n    for(int i = 1; i < lst.size(); i+=2){\n      if(lst[i] % 2 != 0){\n        sum += lst[i];\n      }\n    }\n    return sum;",
        "grade-7": {
            "execution": 0
        },
        "86": "long sum = 0;\n\tfor (int i = 0; i < lst.size(); i += 2) {\n\t\tif (lst[i] % 2 != 0)\n\t\t\tsum += lst[i];\n\t}\n\treturn sum;",
        "grade-86": {
            "execution": 1
        },
        "74": "long sum = 0;\n    int size = lst.size();\n    // this will only access the even indices in the list\n    for (int i = 0; i < size; i += 2) {\n        // this will only add odd numbers\n        if (lst[i] % 2 == 1) {\n            sum += lst[i];\n        }\n    }\n    return sum;",
        "grade-74": {
            "execution": 1
        },
        "68": "long sum=0;\n    for(int i=0;i<lst.size();i++){\n      if(i%2==0 && lst[i]%2!=0){\n        sum+=lst[i];\n      }\n    }\n    return sum;",
        "grade-68": {
            "execution": 1
        },
        "43": "long sum = 0;\n\tint cnt = 0;\n\tfor (auto const& element : lst) {\n\t\tif (cnt % 2 == 0) {\n\t\t\tif (element % 2 != 0) {\n\t\t\t\tsum += element;\n\t\t\t}\n\t\t}\n\t\tcnt++;\n\t}\n\treturn sum;",
        "grade-43": {
            "execution": 1
        },
        "28": "long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;",
        "grade-28": {
            "execution": 1
        },
        "179": "long sum = 0;\n    for(int i = 0; i < lst.size(); i+=2){\n      if(lst[i] % 2 != 0){\n        sum += lst[i];\n      }\n    }\n    return sum;",
        "grade-179": {
            "execution": 1
        },
        "23": "long output = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i % 2 == 0 && lst[i] % 2 != 0){\n            output += lst[i];\n        }\n    }\n    return output;",
        "grade-23": {
            "execution": 1
        },
        "134": "long res = 0;\n  for (unsigned int i = 0; i < lst.size(); i++) {\n    if ((i + 1) % 2 == 0 && lst[i] % 2 != 0) {\n      res += lst[i];\n    }\n  }\n  return res;",
        "grade-134": {
            "execution": 0
        },
        "9": "int n = lst.size();\n    int sum = 0;\n    for(int i = 1; i < n; i += 2) {\n        if(lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;",
        "grade-9": {
            "execution": 0
        },
        "8": "long sum = 0;\n    for(int i = 1; i < lst.size(); i+=2)\n        if(lst[i] % 2 == 0)\n            sum += lst[i];\n    return sum;",
        "grade-8": {
            "execution": 0
        },
        "24": "if (lst.size() == 0)\n\t\treturn 0;\n\tlong sum = 0;\n\tfor (int i = 0; i < lst.size(); i += 2) {\n\t\tif (lst[i] % 2 != 0)\n\t\t\tsum += lst[i];\n\t}\n\treturn sum;",
        "grade-24": {
            "execution": 1
        },
        "65": "long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if((i + 1) % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n    return sum;",
        "grade-65": {
            "execution": 0
        },
        "70": "long sum = 0;\n  for (int i = 0; i < lst.size(); i += 2) {\n    if (lst[i] % 2 != 0)\n      sum += lst[i];\n  }\n  return sum;",
        "grade-70": {
            "execution": 1
        },
        "163": "int i = 0;\n  int even = 0;\n  int odd = 0;\n  for (auto num : lst) {\n    if (i % 2 == 0) {\n      even += num;\n    } else {\n      odd += num;\n    }\n    i++;\n  }\n  return even - odd;",
        "grade-163": {
            "execution": 0
        },
        "185": "long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] % 2 == 1 && i % 2 == 0){\n            sum += lst[i];\n        }\n    }\n    return sum;",
        "grade-185": {
            "execution": 1
        },
        "60": "long sum=0;\n  for(int i=0;i<lst.size();i++)\n  {\n    if(i%2==0 && lst[i]%2!=0)\n    {\n      sum+=lst[i];\n    }\n  }\n  return sum;",
        "grade-60": {
            "execution": 1
        },
        "132": "std::vector<long> oddEven;\n\tstd::vector<long> odd;\n\tlong i = 0;\n\tif (lst.size() % 2 == 0) {\n\t\toddEven.resize(lst.size() / 2);\n\t}\n\telse {\n\t\toddEven.resize(lst.size() / 2 + 1);\n\t}\n\twhile (i < lst.size()) {\n\t\toddEven[i / 2] = lst[i];\n\t\ti = i + 2;\n\t}\n\ti = 0;\n\twhile (i < oddEven.size()) {\n\t\tif (oddEven[i] % 2 != 0) {\n\t\t\todd.push_back(oddEven[i]);\n\t\t}\n\t\ti++;\n\t}\n\tlong res = 0;\n\tfor (long j = 0; j < odd.size(); j++) {\n\t\tres = res + odd[j];\n\t}\n\treturn res;",
        "grade-132": {
            "execution": 1
        },
        "66": "long sum=0;\n    for(int i=0;i<lst.size();i++)\n        if(lst[i]%2!=0&&i%2==0)\n            sum+=lst[i];\n    return sum;",
        "grade-66": {
            "execution": 1
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return a tuple containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty tuple if planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n",
        "snippet": [
            "    vector<string> planets={\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"};\n    int pos1=-1,pos2=-1,m;\n    for (m=0;m<planets.size();m++)\n    {\n    if (planets[m]==planet1) pos1=m;\n    if (planets[m]==planet2) pos2=m;\n    }\n    if (pos1==-1 or pos2==-1) return {};\n    if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}\n    vector<string> out={};\n    for (m=pos1+1;m<pos2;m++)\n    out.push_back(planets[m]);\n    return out;\n}\n"
        ],
        "simplified": "There are eight planets in our solar system: the closerst to the Sun is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Write a function that takes two planet names as strings planet1 and planet2. The function should return a tuple containing all planets whose orbits are located between the orbit of planet1 and the orbit of planet2, sorted by the proximity to the sun. The function should return an empty tuple if planet1 or planet2 are not correct planet names.",
        "task_id": "148",
        "189": "// your code here\n  std::tuple<std::string, > no_planet;\n  if(planet1 == \"Mercury\"){\n    if(planet2 == \"Mercury\"){\n      return no_planet;\n    }else if(planet2 == \"Venus\"){\n      return no_planet;\n    }else if(planet2 == \"Earth\"){\n      return no_planet;\n    }else if(planet2 == \"Mars\"){\n      return no_planet;\n    }else if(planet2 == \"Jupiter\"){\n      return no_planet;\n    }else if(planet2 == \"Saturn\"){\n      return no_planet;\n    }else if(planet2 == \"Uranus\"){\n      return no_planet;\n    }else if(planet2 == \"Neptune\"){\n      return no_planet;\n    }else{\n      return no_planet;\n    }\n  }else if(planet1 == \"Venus\"){\n    if(planet2 == \"Mercury\"){\n      return std::make_tuple(\"Venus\");\n    }else if(planet2 == \"Venus\"){\n      return no_planet;\n    }else if(planet2 == \"Earth\"){\n      return no_planet;\n    }else if(planet2 == \"Mars\"){\n      return no_planet;\n    }else if(planet2 == \"Jupiter\"){\n      return no_planet;\n    }else if(planet2 == \"Saturn\"){\n      return no_planet;\n    }else if(planet2 == \"Uranus\"){\n      return no_planet;\n    }else if(planet2 == \"Neptune\"){\n      return no_planet;\n    }else{\n      return no_planet;\n    }\n  }else if(planet1 == \"Earth\"){\n    if(planet2 == \"Mercury\"){\n      return std::make_tuple(\"Venus\", \"Earth\");\n    }else if(planet2 == \"Venus\"){\n      return std::make_tuple(\"Venus\");\n    }else if(planet2 == \"Earth\"){\n      return no_planet;\n    }else if(planet2",
        "grade-189": {
            "execution": 0
        },
        "28": "std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    // place your code here\n    std::tuple<std::string, > sol;\n    return sol;",
        "grade-28": {
            "execution": 0
        },
        "6": "// Your code here",
        "grade-6": {
            "execution": 0
        },
        "73": "return std::make_tuple<std::string, >(\"\");",
        "grade-73": {
            "execution": 0
        },
        "65": "std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n  auto pl1 = std::find(planets.begin(), planets.end(), planet1);\n  auto pl2 = std::find(planets.begin(), planets.end(), planet2);\n  if(pl1 == planets.end() || pl2 == planets.end())\n    return std::make_tuple<std::string>();\n  if(pl1 > pl2)\n    std::swap(pl1, pl2);\n  std::vector<std::string> res(pl1, pl2);\n  return std::make_tuple(res.begin(), res.end());",
        "grade-65": {
            "execution": 0
        },
        "58": "std::map<std::string, int> mapping = {{\"Mercury\", 1}, {\"Venus\", 2}, {\"Earth\", 3}, {\"Mars\", 4}, {\"Jupiter\", 5}, {\"Saturn\", 6}, {\"Uranus\", 7}, {\"Neptune\", 8}};\n    std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    auto first = mapping.find(planet1);\n    auto second = mapping.find(planet2);\n    if (first == mapping.end() || second == mapping.end()) {\n        return std::make_tuple();\n    }\n    std::tuple<std::string, > ans;\n    if (first->second > second->second) {\n        for (int i = second->second; i < first->second; i++) {\n            std::get<0>(ans) = planets[i - 1];\n        }\n    } else {\n        for (int i = first->second; i < second->second; i++) {\n            std::get<0>(ans) = planets[i - 1];\n        }\n    }\n    return ans;",
        "grade-58": {
            "execution": 0
        },
        "35": "std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    auto it1 = std::find(planets.begin(), planets.end(), planet1);\n    auto it2 = std::find(planets.begin(), planets.end(), planet2);\n    if(it1 == planets.end() || it2 == planets.end())\n        return std::make_tuple();\n    std::vector<std::string> planets_bf(it1, it2);\n    return std::make_tuple(planets_bf.begin(), planets_bf.end());",
        "grade-35": {
            "execution": 0
        },
        "26": "// your code here",
        "grade-26": {
            "execution": 0
        },
        "161": "std::tuple<std::string, > ans;\n    return ans;",
        "grade-161": {
            "execution": 0
        },
        "22": "std::string planets[8] = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \n        \"Saturn\", \"Uranus\", \"Neptune\"};\n    std::map<std::string, int> m;\n    for (int i = 0; i < 8; i++)\n        m[planets[i]] = i;\n    int index1 = m[planet1];\n    int index2 = m[planet2];\n    if (index1 > index2)\n        std::swap(index1, index2);\n    std::vector<std::string> v;\n    for (int i = index1+1; i < index2; i++)\n        v.push_back(planets[i]);\n    return std::make_tuple(v.begin(), v.end());",
        "grade-22": {
            "execution": 0
        },
        "174": "// Write your code here\n  int position_of_planet1 = 0;\n  int position_of_planet2 = 0;\n  std::string array_of_planets[8] = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n  for(int i = 0; i < 8; i++) {\n    if(array_of_planets[i] == planet1) {\n      position_of_planet1 = i;\n    }\n    if(array_of_planets[i] == planet2) {\n      position_of_planet2 = i;\n    }\n  }\n  std::tuple<std::string, > list_of_planets_between;\n  if(position_of_planet1 > position_of_planet2) {\n    for(int i = position_of_planet2 + 1; i < position_of_planet1; i++) {\n      list_of_planets_between.push_back(array_of_planets[i]);\n    }\n  } else {\n    for(int i = position_of_planet1 + 1; i < position_of_planet2; i++) {\n      list_of_planets_between.push_back(array_of_planets[i]);\n    }\n  }\n  return list_of_planets_between;",
        "grade-174": {
            "execution": 0
        },
        "118": "std::vector<std::string> planets;\n    planets.push_back(\"Mercury\");\n    planets.push_back(\"Venus\");\n    planets.push_back(\"Earth\");\n    planets.push_back(\"Mars\");\n    planets.push_back(\"Jupiter\");\n    planets.push_back(\"Saturn\");\n    planets.push_back(\"Uranus\");\n    planets.push_back(\"Neptune\");\n    std::vector<std::string>::iterator it1, it2;\n    it1 = std::find(planets.begin(), planets.end(), planet1);\n    it2 = std::find(planets.begin(), planets.end(), planet2);\n    std::vector<std::string>::iterator it3, it4;\n    if (it1 == planets.end() || it2 == planets.end())\n        return std::make_tuple();\n    it3 = std::min_element(it1, it2);\n    it4 = std::max_element(it1, it2);\n    if (it3 == it1)\n        it3 = it3 + 1;\n    else\n        it4 = it4 - 1;\n    std::vector<std::string> ret(it3, it4);\n    return std::make_tuple(ret.begin(), ret.end());",
        "grade-118": {
            "execution": 0
        },
        "8": "std::tuple<std::string, > answer = std::make_tuple();\n    // Write your code here\n    return answer;",
        "grade-8": {
            "execution": 0
        },
        "7": "return std::make_tuple(\"\");",
        "grade-7": {
            "execution": 0
        },
        "23": "// TODO: Implement this function\n    return std::make_tuple<std::string, >();",
        "grade-23": {
            "execution": 0
        },
        "56": "std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n  std::vector<std::string>::iterator planet1_it = std::find(planets.begin(), planets.end(), planet1);\n  std::vector<std::string>::iterator planet2_it = std::find(planets.begin(), planets.end(), planet2);\n  if (planet1_it == planets.end() || planet2_it == planets.end())\n    return std::make_tuple();\n  if (planet1_it > planet2_it)\n    std::swap(planet1_it, planet2_it);\n  std::vector<std::string>::iterator p1 = planet1_it;\n  std::vector<std::string>::iterator p2 = planet2_it;\n  p1++;\n  p2--;\n  if (p1 > p2)\n    return std::make_tuple();\n  else\n    return std::make_tuple(std::string(\"\"));",
        "grade-56": {
            "execution": 0
        },
        "61": "// your code here\n  std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n  if(planet1 > planet2)\n      std::swap(planet1, planet2);\n  \n  auto p1 = std::find(planets.begin(), planets.end(), planet1);\n  auto p2 = std::find(planets.begin(), planets.end(), planet2);\n  if(p1 != planets.end() && p2 != planets.end())\n      return std::make_tuple(p1 + 1, p2);\n  return std::make_tuple();",
        "grade-61": {
            "execution": 0
        },
        "143": "// Good luck!",
        "grade-143": {
            "execution": 0
        },
        "178": "// your code here\n    std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    int p1 = std::find(planets.begin(), planets.end(), planet1) - planets.begin();\n    int p2 = std::find(planets.begin(), planets.end(), planet2) - planets.begin();\n    std::cout << p1 << \" \" << p2 << std::endl;\n    if (p1 == 8 || p2 == 8) {\n        return std::make_tuple();\n    }\n    std::vector<std::string> res;\n    if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    for (int i = p1 + 1; i < p2; i++) {\n        res.push_back(planets[i]);\n    }\n    return std::make_tuple(res);",
        "grade-178": {
            "execution": 0
        },
        "165": "//write your code here",
        "grade-165": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nstd::vector<long> parse_nested_parens(std::string paren_string) {\n",
        "snippet": [
            "    vector<int> all_levels;\n    string current_paren;\n    int level=0,max_level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        if (level>max_level) max_level=level;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_levels.push_back(max_level);\n                current_paren=\"\";\n                max_level=0;\n            }\n        }\n    }\n    return all_levels;\n}\n"
        ],
        "simplified": "Input to this function is a string represented multiple groups for nested parentheses separated by spaces. For each of the group, output the deepest level of nesting of parentheses. E.g. (()()) has maximum two levels of nesting while ((())) has three.",
        "task_id": "6",
        "163": "std::vector<long> result;\n   int start = 0;\n   int end = 0;\n   while (end < paren_string.size()) {\n      char c = paren_string[end];\n      if (c == '(') {\n         result.push_back(1);\n      } else if (c == ')') {\n         result.back()++;\n      } else if (c == ' ') {\n         start = end + 1;\n      }\n      end++;\n   }\n   return result;",
        "grade-163": {
            "execution": 0
        },
        "28": "std::vector<long> nested_list;\n    std::stringstream input_stream(paren_string);\n    std::string paren_stream;\n    while(std::getline(input_stream, paren_stream, ' ')) {\n        std::stack<char> paren_stack;\n        long max_depth = 0;\n        for(long i = 0; i < paren_stream.size(); i++) {\n            if(paren_stream[i] == '(') {\n                paren_stack.push(paren_stream[i]);\n                max_depth = std::max(max_depth, (long)paren_stack.size());\n            }\n            else if(paren_stream[i] == ')') {\n                paren_stack.pop();\n            }\n        }\n        nested_list.push_back(max_depth);\n    }\n    return nested_list;",
        "grade-28": {
            "execution": 1
        },
        "6": "std::vector<long> max_levels;\n\tstd::istringstream iss(paren_string);\n\tfor (std::string s; iss >> s; ) {\n\t\tstd::vector<char> stk;\n\t\tlong level = 0;\n\t\tlong max_level = 0;\n\t\tfor (char c : s) {\n\t\t\tif (c == '(') {\n\t\t\t\tlevel++;\n\t\t\t\tstk.push_back(c);\n\t\t\t} else if (c == ')') {\n\t\t\t\tlevel--;\n\t\t\t\tstk.pop_back();\n\t\t\t}\n\t\t\tmax_level = std::max(max_level, level);\n\t\t}\n\t\tassert(stk.empty());\n\t\tmax_levels.push_back(max_level);\n\t}\n\treturn max_levels;",
        "grade-6": {
            "execution": 1
        },
        "189": "int count = 0;\n    std::vector<long> result;\n    bool flag = true;\n    for(int i = 0; i < paren_string.length(); i++) {\n        if(paren_string[i] == '(')\n            count++;\n        else if(paren_string[i] == ')')\n            count--;\n        else if(paren_string[i] == ' ') {\n            if(count < 0)\n                flag = false;\n            result.push_back(count);\n            count = 0;\n        }\n    }\n    if(flag == false)\n        return {};\n    return result;",
        "grade-189": {
            "execution": 0
        },
        "70": "std::vector<long> output;\n    int i = 0;\n    while (i < paren_string.size()) {\n        std::string nested_parens = \"\";\n        while (paren_string[i] != ' ') {\n            nested_parens += paren_string[i];\n            i++;\n        }\n        output.push_back(nested_parens.size() - nested_parens.erase(std::remove(nested_parens.begin(), nested_parens.end(), ')'), nested_parens.end()).size());\n        i++;\n    }\n    return output;",
        "grade-70": {
            "execution": 0
        },
        "62": "std::vector<long> depths;\n  long current_depth = 0;\n  long max_depth = 0;\n  for (auto c : paren_string) {\n    if (c == '(') {\n      current_depth++;\n      max_depth = std::max(max_depth, current_depth);\n    } else if (c == ')') {\n      assert(current_depth > 0);\n      current_depth--;\n    } else if (c == ' ') {\n      depths.push_back(max_depth);\n      max_depth = 0;\n    }\n  }\n  depths.push_back(max_depth);\n  return depths;",
        "grade-62": {
            "execution": 1
        },
        "57": "// Write your code here\n    // Prepare a stack to be used to process the parenthsis.\n    std::stack<char> s;\n    // Prepare a vector to hold the output, where each element is the max count of\n    // nesting of parenthesis encountered in each group.\n    std::vector<long> output;\n    // Iterate over each char in the input string, we are interested in only '(' and ')'\n    for (int i = 0; i < paren_string.length(); i++) {\n        // If '(' push the current count of maximum nesting into the stack.\n        if (paren_string[i] == '(') {\n            s.push(0);\n        }\n        // If ')' is found, calculate the new max count of nesting by adding 1 to\n        // the maximum count of nesting in the current level.\n        else if (paren_string[i] == ')') {\n            long new_max = 1;\n            while (!s.empty() && s.top() != 0) {\n                new_max += s.top();\n                s.pop();\n            }\n            // Now push the new max count of nesting of parenthesis in the current level.\n            s.push(new_max);\n        }\n        // If ' ' is found, we know that a group of parenthesis has ended.\n        // Pop all the elements from the stack and push them into the output.\n        // While doing so, keep track of the max nesting of parenthesis in the\n        // current group.\n        else if (paren_string[i] == ' ') {\n            long max_count = 0;\n            while (!s.empty()) {\n                max_count = std::max(max_count, s.top());\n                s.pop();\n            }\n            output.push_back(max_count);\n        }\n    }\n    return output;",
        "grade-57": {
            "execution": 0
        },
        "35": "std::vector<long> max_depth;\n    long count = 0;\n    long max_depth_so_far = 0;\n    for (auto c : paren_string) {\n        if (c == '(') {\n            count++;\n            max_depth_so_far = std::max(max_depth_so_far, count);\n        } else if (c == ')') {\n            count--;\n        } else if (c == ' ') {\n            max_depth.push_back(max_depth_so_far);\n            max_depth_so_far = 0;\n            count = 0;\n        }\n    }\n    if (count == 0) {\n        max_depth.push_back(max_depth_so_far);\n    }\n    return max_depth;",
        "grade-35": {
            "execution": 1
        },
        "188": "std::vector<long> result;\n  std::string token;\n  std::istringstream tokenStream(paren_string);\n  while (std::getline(tokenStream, token, ' ')) {\n    std::stack<char> parens;\n    long deepest = 0;\n    for (char c : token) {\n      if (c == '(') {\n        parens.push(c);\n        deepest = std::max(deepest, (long)parens.size());\n      } else if (c == ')') {\n        if (parens.empty()) {\n          throw std::invalid_argument(\"Unbalanced parentheses\");\n        }\n        parens.pop();\n      }\n    }\n    if (!parens.empty()) {\n      throw std::invalid_argument(\"Unbalanced parentheses\");\n    }\n    result.push_back(deepest);\n  }\n  return result;",
        "grade-188": {
            "execution": 1
        },
        "26": "std::stack<int> st;\n  std::vector<long> result;\n  int level = 0;\n  for (char ch : paren_string) {\n    if (ch == '(') {\n      level++;\n      st.push(level);\n    } else if (ch == ')') {\n      long top = st.top();\n      st.pop();\n      if (st.empty()) {\n        result.push_back(top);\n        level = 0;\n      }\n    }\n  }\n  return result;",
        "grade-26": {
            "execution": 0
        },
        "173": "if (paren_string.empty()) {\n        return {};\n    }\n    std::vector<long> max_levels;\n    int level = 0;\n    int max_level = 0;\n    int last_open_paren_idx = -1;\n    std::stack<int> open_paren_idx_stack;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            level++;\n            last_open_paren_idx = i;\n            open_paren_idx_stack.push(i);\n        } else if (paren_string[i] == ')') {\n            level--;\n            assert(level >= 0);\n            open_paren_idx_stack.pop();\n            if (level == 0) {\n                max_levels.push_back(max_level);\n                max_level = 0;\n            }\n        } else if (paren_string[i] == ' ') {\n            if (open_paren_idx_stack.empty()) {\n                max_levels.push_back(max_level);\n                max_level = 0;\n            }\n        }\n        max_level = std::max(max_level, level);\n    }\n    return max_levels;",
        "grade-173": {
            "execution": 0
        },
        "139": "// This is your job. :)\n    std::vector<long> res;\n    std::stringstream ss(paren_string);\n    std::string temp;\n    int flag = 0;\n    int count = 0;\n    while(ss>>temp){\n        for(int i = 0; i < temp.size(); i++){\n            if(temp[i] == '('){\n                flag++;\n                count = (flag > count) ? flag : count;\n            }else if(temp[i] == ')'){\n                flag--;\n            }\n        }\n        res.push_back(count);\n        count = 0;\n        flag = 0;\n    }\n    return res;",
        "grade-139": {
            "execution": 1
        },
        "22": "std::vector<long> ans;\n  std::stringstream stream(paren_string);\n  long max_nesting_level = -1;\n  for (std::string line; std::getline(stream, line);) {\n    if (line.empty()) {\n      continue;\n    }\n    std::stack<char> paren_stack;\n    max_nesting_level = -1;\n    for (char c : line) {\n      if (c == '(') {\n        paren_stack.push(c);\n      } else if (c == ')') {\n        if (paren_stack.empty()) {\n          continue;\n        }\n        paren_stack.pop();\n      }\n      max_nesting_level = std::max(max_nesting_level, (long)paren_stack.size());\n    }\n    ans.push_back(max_nesting_level);\n  }\n  return ans;",
        "grade-22": {
            "execution": 0
        },
        "151": "std::vector<long> depths;\n    std::stack<char> stk;\n    long curr_depth = 0;\n    long max_depth = 0;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            curr_depth++;\n            max_depth = std::max(max_depth, curr_depth);\n            stk.push(paren_string[i]);\n        } else if (paren_string[i] == ')') {\n            curr_depth--;\n            stk.pop();\n        } else if (paren_string[i] == ' ') {\n            depths.push_back(max_depth);\n            max_depth = 0;\n            curr_depth = 0;\n        }\n    }\n    return depths;",
        "grade-151": {
            "execution": 0
        },
        "108": "std::vector<long> result;\n  if (paren_string.size() == 0) return result;\n  if (paren_string.size() == 1) return {-1};\n  long max_level = 0;\n  long level = 0;\n  for (auto ch : paren_string) {\n    if (ch == '(') {\n      level++;\n      max_level = std::max(max_level, level);\n    } else if (ch == ')') {\n      level--;\n    } else if (ch == ' ') {\n      result.push_back(max_level);\n      max_level = 0;\n      level = 0;\n    }\n  }\n  result.push_back(max_level);\n  return result;",
        "grade-108": {
            "execution": 1
        },
        "8": "// return a vector of the maximum number of nested parens for each of the subgroup\n    std::vector<long> max_parens;\n    long count = 0;\n    for (auto &c : paren_string) {\n        switch (c) {\n            case '(':\n                count++;\n                break;\n            case ')':\n                count--;\n                break;\n            case ' ':\n                max_parens.push_back(count);\n                count = 0;\n                break;\n            default:\n                break;\n        }\n    }\n    max_parens.push_back(count);\n    return max_parens;",
        "grade-8": {
            "execution": 0
        },
        "7": "long count = 0;\n  std::vector<long> res;\n  for (char c : paren_string) {\n    if (c == '(') {\n      count++;\n    } else if (c == ')') {\n      count--;\n    } else if (c == ' ') {\n      res.push_back(count);\n    }\n  }\n  return res;",
        "grade-7": {
            "execution": 0
        },
        "23": "// TODO: Implement this method\n    std::vector<long> out;\n    long len = paren_string.length();\n    long count = 0;\n    long max_count = 0;\n    for(long i = 0; i < len; i++) {\n        // std::cout << paren_string[i] << std::endl;\n        if(paren_string[i] == '(') {\n            count++;\n            max_count = std::max(max_count, count);\n        }\n        else if(paren_string[i] == ')') {\n            count--;\n        }\n        else if(paren_string[i] == ' ') {\n            out.push_back(max_count);\n            max_count = 0;\n            count = 0;\n        }\n    }\n    out.push_back(max_count);\n    return out;",
        "grade-23": {
            "execution": 1
        },
        "55": "std::vector<long> result;\n    std::vector<char> stack;\n    int count = 0;\n    int max_count = 0;\n    long int size = paren_string.size();\n    for(long int i = 0; i < size; i++) {\n        if(paren_string[i] == '(') {\n            count++;\n            stack.push_back(paren_string[i]);\n        }\n        else if(paren_string[i] == ')') {\n            count--;\n            if(count == 0) {\n                result.push_back(stack.size());\n                stack.clear();\n            }\n            else {\n                stack.pop_back();\n            }\n        }\n    }\n    return result;",
        "grade-55": {
            "execution": 0
        },
        "59": "std::vector<long> result;\n    std::stringstream paren_stream(paren_string);\n    std::string paren_group;\n    while (std::getline(paren_stream, paren_group, ' ')) {\n        std::stack<long> paren_stack;\n        for (char& paren : paren_group) {\n            if (paren == '(') {\n                paren_stack.push(1);\n            } else if (paren == ')') {\n                paren_stack.pop();\n            }\n        }\n        result.push_back(paren_stack.size());\n    }\n    return result;",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// triples_sum_to_zero takes a list of integers as an input.\n// it returns True if there are three distinct elements in the list that\n// sum to zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n// >>> triples_sum_to_zero([1])\n// False\nbool triples_sum_to_zero(std::vector<long> l) {\n",
        "snippet": [
            "    for (int i=0;i<l.size();i++)\n    for (int j=i+1;j<l.size();j++)\n    for (int k=j+1;k<l.size();k++)\n        if (l[i]+l[j]+l[k]==0) return true;\n    return false;\n}\n"
        ],
        "simplified": "triples_sum_to_zero takes a list of integers as an input. it returns True if there are three distinct elements in the list that sum to zero, and False otherwise.",
        "task_id": "40",
        "169": "// first sort the array\n  std::sort(l.begin(), l.end());\n  for (int i = 0; i < l.size(); i++) {\n    // l[i] is the fixed element\n    int j = i + 1; // j is the left index\n    int k = l.size() - 1; // k is the right index\n    while (j < k) {\n      if (l[i] + l[j] + l[k] == 0) {\n        return true;\n      } else if (l[i] + l[j] + l[k] < 0) {\n        j++;\n      } else {\n        k--;\n      }\n    }\n  }\n  return false;",
        "grade-169": {
            "execution": 1
        },
        "29": "// Your code here\n    std::sort(l.begin(), l.end());\n    for (long i = 0; i < l.size(); i++) {\n        if (l[i] >= 0)\n            break;\n        for (long j = i + 1; j < l.size(); j++) {\n            long low = j + 1;\n            long high = l.size() - 1;\n            while (low <= high) {\n                long mid = (low + high) / 2;\n                if (l[i] + l[j] + l[mid] == 0)\n                    return true;\n                else if (l[i] + l[j] + l[mid] < 0)\n                    low = mid + 1;\n                else\n                    high = mid - 1;\n            }\n        }\n    }\n    return false;",
        "grade-29": {
            "execution": 1
        },
        "6": "// Write your code here\n\tstd::sort(l.begin(), l.end());\n\tlong sum = 0;\n\tlong i = 0;\n\tfor (; i < l.size() - 2; i++) {\n\t\tlong l_ = i + 1;\n\t\tlong r_ = l.size() - 1;\n\t\twhile (l_ < r_) {\n\t\t\tsum = l[i] + l[l_] + l[r_];\n\t\t\tif (sum == 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse if (sum < 0) {\n\t\t\t\tl_++;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tr_--;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;",
        "grade-6": {
            "execution": 0
        },
        "196": "std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n        long sum = -l[i];\n        int front = i + 1;\n        int back = l.size() - 1;\n        while (front < back) {\n            if (l[front] + l[back] == sum) {\n                return true;\n            } else if (l[front] + l[back] < sum) {\n                front++;\n            } else {\n                back--;\n            }\n        }\n    }\n    return false;",
        "grade-196": {
            "execution": 1
        },
        "71": "// YOUR CODE HERE\n    sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n        int x = l[i];\n        int start = i + 1;\n        int end = l.size() - 1;\n        while (start < end) {\n            int y = l[start];\n            int z = l[end];\n            if (x + y + z == 0)\n                return true;\n            else if (x + y + z > 0)\n                end--;\n            else\n                start++;\n        }\n    }\n    return false;",
        "grade-71": {
            "execution": 1
        },
        "63": "std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = i + 1; j < l.size(); j++) {\n            int sum = -(l[i] + l[j]);\n            if (std::binary_search(l.begin() + j + 1, l.end(), sum)) {\n                return true;\n            }\n        }\n    }\n    return false;",
        "grade-63": {
            "execution": 1
        },
        "58": "// YOUR CODE HERE\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n        int k = l.size() - 1;\n        int j = i + 1;\n        while (j < k) {\n            int sum = l[i] + l[j] + l[k];\n            if (sum == 0)\n                return true;\n            else if (sum < 0)\n                j++;\n            else if (sum > 0)\n                k--;\n        }\n    }\n    return false;",
        "grade-58": {
            "execution": 1
        },
        "36": "// TODO\n    long sum, i, j, k;\n    sum = 0;\n    for (i = 0; i < l.size(); i++) {\n        for (j = i + 1; j < l.size(); j++) {\n            for (k = j + 1; k < l.size(); k++) {\n                sum = l[i] + l[j] + l[k];\n                if (sum == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;",
        "grade-36": {
            "execution": 1
        },
        "195": "std::sort(l.begin(), l.end());\n    std::vector<long>::iterator a, b, c;\n    a = l.begin();\n    c = l.end() - 1;\n    while (a < l.end() - 2) {\n        b = a + 1;\n        while (b < c) {\n            if (*a + *b + *c == 0) {\n                return true;\n            } else if (*a + *b + *c < 0) {\n                b++;\n            } else {\n                c--;\n            }\n        }\n        a++;\n    }\n    return false;",
        "grade-195": {
            "execution": 1
        },
        "27": "// 2. sort the list of integers in non-decreasing order.\n  // sort(l.begin(), l.end());\n  std::sort(l.begin(), l.end());\n  // 3. for each integer in the list, do the following:\n  for (int i = 0; i < l.size(); i++) {\n    // 3.1 if i is greater than 0 and l[i] is the same as l[i-1], skip.\n    if (i > 0 && l[i] == l[i-1]) {\n      continue;\n    }\n    // 3.2 let k = i + 1\n    int k = i + 1;\n    // 3.3 let j = l.size() - 1\n    int j = l.size() - 1;\n    // 3.4 while k < j:\n    while (k < j) {\n      // 3.4.1 compute the sum of l[i], l[j], and l[k]\n      long sum = l[i] + l[j] + l[k];\n      // 3.4.2 if the sum is equal to zero, return True\n      if (sum == 0) {\n        return true;\n      }\n      // 3.4.3 if the sum is smaller than zero, increment k\n      if (sum < 0) {\n        k += 1;\n      }\n      // 3.4.4 if the sum is greater than zero, decrement j\n      if (sum > 0) {\n        j -= 1;\n      }\n    }\n  }\n  // 4. return False\n  return false;",
        "grade-27": {
            "execution": 1
        },
        "179": "for (auto i : l) {\n        for (auto j : l) {\n            for (auto k : l) {\n                if (i + j + k == 0 && i != j && j != k && i != k)\n                    return true;\n            }\n        }\n    }\n    return false;",
        "grade-179": {
            "execution": 0
        },
        "142": "return false;",
        "grade-142": {
            "execution": 0
        },
        "22": "for (auto iter = l.begin(); iter != l.end(); iter++) {\n    std::vector<long>::iterator iterator = iter;\n    for (auto iter2 = iterator; iter2 != l.end(); iter2++) {\n      std::vector<long>::iterator iterator2 = iter2;\n      for (auto iter3 = iterator2; iter3 != l.end(); iter3++) {\n        std::vector<long>::iterator iterator3 = iter3;\n        if (iter != iter2 and iter != iter3 and iter2 != iter3 and\n            *iter + *iter2 + *iter3 == 0) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;",
        "grade-22": {
            "execution": 1
        },
        "157": "// WRITE YOUR CODE HERE\n  std::vector<long> temp;\n  bool is_found = false;\n  for (auto &i : l) {\n    long sum = 0;\n    for (auto &j : l) {\n      sum += j;\n      if (sum == 0) {\n        is_found = true;\n        break;\n      }\n    }\n    if (is_found)\n      break;\n  }\n  return is_found;",
        "grade-157": {
            "execution": 0
        },
        "109": "std::sort(l.begin(), l.end());\n    std::map<long, long> sum_index;\n    for (int i = 0; i < l.size(); i++) {\n        sum_index[l[i]] = i;\n    }\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = i + 1; j < l.size(); j++) {\n            if (sum_index.find(-(l[i] + l[j])) != sum_index.end()) {\n                long index = sum_index[-(l[i] + l[j])];\n                if (index != i && index != j) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;",
        "grade-109": {
            "execution": 1
        },
        "8": "// YOUR CODE HERE\n    return false;",
        "grade-8": {
            "execution": 0
        },
        "7": "// your code here\n    std::sort(l.begin(), l.end());\n    std::vector<long>::iterator left, right;\n    for(int i = 0; i < l.size() - 2; i++){\n        int a = l[i];\n        left = l.begin() + i + 1;\n        right = l.end() - 1;\n        while(left < right){\n            if((*left + *right + a) == 0){\n                return true;\n            }\n            else if((*left + *right + a) < 0){\n                left++;\n            }\n            else{\n                right--;\n            }\n        }\n    }\n    return false;",
        "grade-7": {
            "execution": 0
        },
        "23": "int a = 0;\n\tint b = 0;\n\tint c = 0;\n\tif (l.size() == 0)\n\t\treturn false;\n\telse {\n\t\tfor (int i = 0; i < l.size(); i++) {\n\t\t\tfor (int j = 0; j < l.size(); j++) {\n\t\t\t\tfor (int k = 0; k < l.size(); k++) {\n\t\t\t\t\tif (i != j) {\n\t\t\t\t\t\tif (j != k) {\n\t\t\t\t\t\t\tif (i != k) {\n\t\t\t\t\t\t\t\ta = l[i];\n\t\t\t\t\t\t\t\tb = l[j];\n\t\t\t\t\t\t\t\tc = l[k];\n\t\t\t\t\t\t\t\tif (a + b + c == 0)\n\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;",
        "grade-23": {
            "execution": 1
        },
        "56": "sort(l.begin(), l.end());\n    long n = l.size();\n    for (long i = 0; i < n - 2; i++) {\n        long j = i + 1;\n        long k = n - 1;\n        while (j < k) {\n            long x = l[i] + l[j] + l[k];\n            if (x == 0) {\n                return true;\n            }\n            else if (x > 0) {\n                k--;\n            }\n            else {\n                j++;\n            }\n        }\n    }\n    return false;",
        "grade-56": {
            "execution": 1
        },
        "60": "// YOUR CODE HERE\n\tstd::sort(l.begin(), l.end());\n\tfor (int i = 0; i < l.size(); i++) {\n\t\tlong target = l[i];\n\t\tint front = i + 1;\n\t\tint back = l.size() - 1;\n\t\twhile (front < back) {\n\t\t\tlong sum = l[front] + l[back];\n\t\t\tif (sum < -target) {\n\t\t\t\tfront++;\n\t\t\t}\n\t\t\telse if (sum > -target) {\n\t\t\t\tback--;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;",
        "grade-60": {
            "execution": 1
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two lists operator, and operand. The first list has basic algebra operations, and \n// the second list is a list of integers. Use the two given lists to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list is equal to the length of operand list minus one.\n// Operand is a list of of non-negative integers.\n// Operator list has at least one operator, and operand list has at least two operands.\nlong do_algebra(std::vector<std::string> _operator_, std::vector<long> operand) {\n",
        "snippet": [
            "    vector<int> num={};\n    vector<int> posto={};\n    for (int i=0;i<operand.size();i++)\n        posto.push_back(i);\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"**\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);\n        posto[i+1]=posto[i];\n        }\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"*\" or operato[i]==\"//\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        if (operato[i]==\"*\")\n            operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];\n        else\n            operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];\n        posto[i+1]=posto[i];\n        }\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"+\" or operato[i]==\"-\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        if (operato[i]==\"+\")\n            operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];\n        else\n            operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];\n        posto[i+1]=posto[i];\n        }\n    return operand[0];\n\n}\n"
        ],
        "simplified": "Given two lists operator, and operand. The first list has basic algebra operations, and the second list is a list of integers. Use the two given lists to build the algebric expression and return the evaluation of this expression. The basic algebra operations: Addition ( + ) Subtraction ( - ) Multiplication ( * ) Floor division ( // ) Exponentiation ( ** )",
        "task_id": "160",
        "174": "assert(_operator_.size() == operand.size() - 1);\n    long res = operand[0];\n    for (int i = 0; i < _operator_.size(); i++) {\n        if (_operator_[i] == \"+\") {\n            res += operand[i + 1];\n        } else if (_operator_[i] == \"-\") {\n            res -= operand[i + 1];\n        } else if (_operator_[i] == \"*\") {\n            res *= operand[i + 1];\n        } else if (_operator_[i] == \"//\") {\n            res /= operand[i + 1];\n        } else if (_operator_[i] == \"**\") {\n            res = pow(res, operand[i + 1]);\n        }\n    }\n    return res;",
        "grade-174": {
            "execution": 0
        },
        "29": "std::stack<long> stk;\n  long num;\n  for (long i = 0; i < operand.size(); i++) {\n    stk.push(operand[i]);\n    if (i > 0) {\n      num = stk.top();\n      stk.pop();\n      std::string op = _operator_[i - 1];\n      if (op == \"+\") {\n        stk.top() += num;\n      } else if (op == \"-\") {\n        stk.top() -= num;\n      } else if (op == \"*\") {\n        stk.top() *= num;\n      } else if (op == \"//\") {\n        stk.top() /= num;\n      } else if (op == \"**\") {\n        stk.top() = std::pow(stk.top(), num);\n      }\n    }\n  }\n  return stk.top();",
        "grade-29": {
            "execution": 0
        },
        "6": "// Write your code here\n    long ans = operand[0];\n    for(int i = 0; i < _operator_.size(); i++){\n        if(_operator_[i] == \"+\"){\n            ans += operand[i+1];\n        }\n        else if(_operator_[i] == \"-\"){\n            ans -= operand[i+1];\n        }\n        else if(_operator_[i] == \"*\"){\n            ans *= operand[i+1];\n        }\n        else if(_operator_[i] == \"//\"){\n            ans /= operand[i+1];\n        }\n        else if(_operator_[i] == \"**\"){\n            ans = pow(ans, operand[i+1]);\n        }\n    }\n    return ans;",
        "grade-6": {
            "execution": 0
        },
        "71": "int n = operand.size();\n    std::string op;\n    long op1, op2;\n    std::stack<long> operands;\n    long result = 0;\n    for(int i = 0; i < n; i++) {\n        op = _operator_[i];\n        if(op == \"+\") {\n            op1 = operands.top();\n            operands.pop();\n            op2 = operand[i];\n            operands.push(op1 + op2);\n        }\n        else if(op == \"-\") {\n            op1 = operands.top();\n            operands.pop();\n            op2 = operand[i];\n            operands.push(op1 - op2);\n        }\n        else if(op == \"*\") {\n            op1 = operands.top();\n            operands.pop();\n            op2 = operand[i];\n            operands.push(op1 * op2);\n        }\n        else if(op == \"//\") {\n            op1 = operands.top();\n            operands.pop();\n            op2 = operand[i];\n            operands.push(op1 / op2);\n        }\n        else if(op == \"**\") {\n            op1 = operands.top();\n            operands.pop();\n            op2 = operand[i];\n            operands.push(pow(op1, op2));\n        }\n        else {\n            operands.push(operand[i]);\n        }\n    }\n    result = operands.top();\n    return result;",
        "grade-71": {
            "execution": 0
        },
        "63": "long result = operand[0];\n  long n = operand.size();\n  for (int i = 1; i < n; i++) {\n    if (_operator_[i - 1] == \"+\")\n      result += operand[i];\n    else if (_operator_[i - 1] == \"-\")\n      result -= operand[i];\n    else if (_operator_[i - 1] == \"*\")\n      result *= operand[i];\n    else if (_operator_[i - 1] == \"//\")\n      result /= operand[i];\n    else if (_operator_[i - 1] == \"**\")\n      result = pow(result, operand[i]);\n  }\n  return result;",
        "grade-63": {
            "execution": 0
        },
        "58": "// Write your code here\n  long res=operand[0];\n  for(int i=0;i<_operator_.size();i++){\n      if(_operator_[i]==\"+\"){\n          res+=operand[i+1];\n      }\n      else if(_operator_[i]==\"-\"){\n          res-=operand[i+1];\n      }\n      else if(_operator_[i]==\"*\"){\n          res*=operand[i+1];\n      }\n      else if(_operator_[i]==\"//\"){\n          res/=operand[i+1];\n      }\n      else if(_operator_[i]==\"**\"){\n          res=pow(res,operand[i+1]);\n      }\n  }\n  return res;",
        "grade-58": {
            "execution": 0
        },
        "36": "assert(_operator_.size() == operand.size() - 1);\n  long result = operand[0];\n  for (int i = 0; i < _operator_.size(); i++) {\n    if (_operator_[i] == \"+\") {\n      result += operand[i + 1];\n    } else if (_operator_[i] == \"-\") {\n      result -= operand[i + 1];\n    } else if (_operator_[i] == \"*\") {\n      result *= operand[i + 1];\n    } else if (_operator_[i] == \"//\") {\n      result /= operand[i + 1];\n    } else if (_operator_[i] == \"**\") {\n      result = std::pow(result, operand[i + 1]);\n    }\n  }\n  return result;",
        "grade-36": {
            "execution": 0
        },
        "26": "// Write your code here\n\tlong result = operand[0];\n\tfor (long i = 0; i < _operator_.size(); i++) {\n\t\tswitch (_operator_[i][0]) {\n\t\tcase '+':\n\t\t\tresult += operand[i + 1];\n\t\t\tbreak;\n\t\tcase '-':\n\t\t\tresult -= operand[i + 1];\n\t\t\tbreak;\n\t\tcase '*':\n\t\t\tresult *= operand[i + 1];\n\t\t\tbreak;\n\t\tcase '/':\n\t\t\tresult /= operand[i + 1];\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;",
        "grade-26": {
            "execution": 0
        },
        "184": "long result = operand[0];\n  for (int i = 0; i < _operator_.size(); i++) {\n    switch (_operator_[i][0]) {\n      case '+':\n        result += operand[i + 1];\n        break;\n      case '-':\n        result -= operand[i + 1];\n        break;\n      case '*':\n        result *= operand[i + 1];\n        break;\n      case '/':\n        result /= operand[i + 1];\n        break;\n      case '^':\n        result = pow(result, operand[i + 1]);\n        break;\n      default:\n        assert(false);\n    }\n  }\n  return result;",
        "grade-184": {
            "execution": 0
        },
        "146": "// write your code here\n  long result = operand[0];\n  for(int i = 0; i < _operator_.size(); i++) {\n    if(_operator_[i] == \"+\") {\n      result += operand[i+1];\n    }\n    else if(_operator_[i] == \"-\") {\n      result -= operand[i+1];\n    }\n    else if(_operator_[i] == \"*\") {\n      result *= operand[i+1];\n    }\n    else if(_operator_[i] == \"//\") {\n      result /= operand[i+1];\n    }\n    else if(_operator_[i] == \"**\") {\n      result = pow(result, operand[i+1]);\n    }\n  }\n  return result;",
        "grade-146": {
            "execution": 0
        },
        "22": "long result = operand[0];\n\tfor (int i = 0; i < _operator_.size(); i++) {\n\t\tif (_operator_[i] == \"+\") {\n\t\t\tresult += operand[i + 1];\n\t\t}\n\t\telse if (_operator_[i] == \"-\") {\n\t\t\tresult -= operand[i + 1];\n\t\t}\n\t\telse if (_operator_[i] == \"*\") {\n\t\t\tresult *= operand[i + 1];\n\t\t}\n\t\telse if (_operator_[i] == \"//\") {\n\t\t\tresult /= operand[i + 1];\n\t\t}\n\t\telse if (_operator_[i] == \"**\") {\n\t\t\tresult = pow(result, operand[i + 1]);\n\t\t}\n\t}\n\treturn result;",
        "grade-22": {
            "execution": 0
        },
        "159": "long ans = operand[0];\n    for(int i = 0; i < _operator_.size(); i++) {\n        switch(_operator_[i][0]) {\n            case '+': ans += operand[i+1]; break;\n            case '-': ans -= operand[i+1]; break;\n            case '*': ans *= operand[i+1]; break;\n            case '/': ans /= operand[i+1]; break;\n            case '^': ans = pow(ans, operand[i+1]); break;\n        }\n    }\n    return ans;",
        "grade-159": {
            "execution": 0
        },
        "112": "// Write your code here\n    stack<long>stk;\n    stk.push(operand[0]);\n    for(int i=0;i<_operator_.size();i++){\n        char op = _operator_[i][0];\n        if(op=='+')\n            stk.push(operand[i+1]);\n        else if(op=='-')\n            stk.push(-operand[i+1]);\n        else if(op=='*'){\n            long val = stk.top();\n            stk.pop();\n            stk.push(val*operand[i+1]);\n        }\n        else if(op=='/'){\n            long val = stk.top();\n            stk.pop();\n            stk.push(val/operand[i+1]);\n        }\n        else if(op=='^'){\n            long val = stk.top();\n            stk.pop();\n            stk.push(pow(val,operand[i+1]));\n        }\n    }\n    long ans = 0;\n    while(!stk.empty()){\n        ans+=stk.top();\n        stk.pop();\n    }\n    return ans;",
        "grade-112": {
            "execution": 0
        },
        "8": "assert(_operator_.size() == operand.size() - 1);\n    int n = operand.size();\n    long dp[n][n];\n    long minimum = INT_MAX;\n    std::string op_str[n][n];\n    for(int i = 0; i < n; i++)\n    {\n        for(int j = 0; j < n; j++)\n        {\n            dp[i][j] = INT_MAX;\n            op_str[i][j] = \"\";\n        }\n    }\n    for(int i = 0; i < n; i++)\n    {\n        dp[i][i] = operand[i];\n        op_str[i][i] = std::to_string(operand[i]);\n    }\n    for(int l = 2; l <= n; l++)\n    {\n        for(int i = 0; i < n - l + 1; i++)\n        {\n            int j = i + l - 1;\n            for(int k = i; k < j; k++)\n            {\n                long left_val = dp[i][k];\n                long right_val = dp[k + 1][j];\n                // std::cout << left_val << \" \" << right_val << std::endl;\n                std::string left_str = op_str[i][k];\n                std::string right_str = op_str[k + 1][j];\n                if(left_val == INT_MAX || right_val == INT_MAX)\n                    continue;\n                if(_operator_[k] == \"+\")\n                {\n                    if(dp[i][j] > left_val + right_val)\n                    {\n                        dp[i][j] = left_val + right_val;\n                        op_str[i][j] = left_str + \"+\" + right_str;\n                    }\n                }\n                else if(_operator_[k] == \"-\")\n                {\n                    if(dp[i][j] > left_val - right_val)\n                    {\n                        dp[i][j] = left_val - right_val;\n                        op_",
        "grade-8": {
            "execution": 0
        },
        "7": "std::stack<long> stk;\n    stk.push(operand[0]);\n    for(int i = 0; i < operand.size() - 1; i++) {\n        char op = _operator_[i][0];\n        long op1 = stk.top();\n        stk.pop();\n        long op2 = operand[i + 1];\n        switch(op) {\n            case '+':\n                stk.push(op1 + op2);\n                break;\n            case '-':\n                stk.push(op1 - op2);\n                break;\n            case '*':\n                stk.push(op1 * op2);\n                break;\n            case '/':\n                stk.push(op1 / op2);\n                break;\n            case '^':\n                stk.push(std::pow(op1, op2));\n                break;\n        }\n    }\n    return stk.top();",
        "grade-7": {
            "execution": 0
        },
        "23": "long res = operand[0];\n    for(int i = 0; i < _operator_.size(); i++) {\n        if(_operator_[i] == \"+\") {\n            res += operand[i+1];\n        } else if(_operator_[i] == \"-\") {\n            res -= operand[i+1];\n        } else if(_operator_[i] == \"*\") {\n            res *= operand[i+1];\n        } else if(_operator_[i] == \"//\") {\n            res /= operand[i+1];\n        } else if(_operator_[i] == \"**\") {\n            res = pow(res, operand[i+1]);\n        }\n    }\n    return res;",
        "grade-23": {
            "execution": 0
        },
        "56": "std::stack<long> s;\n  //  while(s.empty()==false)\n  //  {\n  //     cout<<s.top()<<\" \";\n  //     s.pop();\n  //  }\n  //  cout<<endl;\n  //  cout<<_operator_.size()<<endl;\n  //  cout<<operand.size()<<endl;\n  s.push(operand[0]);\n  for(int i=0;i<_operator_.size();i++)\n  {\n     //cout<<_operator_[i]<<endl;\n     long n1=s.top();\n     s.pop();\n     long n2=operand[i+1];\n     //cout<<n1<<\" \"<<n2<<endl;\n     if(_operator_[i]==\"+\")\n     {\n        s.push(n1+n2);\n     }\n     else if(_operator_[i]==\"-\")\n     {\n        s.push(n1-n2);\n     }\n     else if(_operator_[i]==\"*\")\n     {\n        s.push(n1*n2);\n     }\n     else if(_operator_[i]==\"/\")\n     {\n        s.push(n1/n2);\n     }\n     else if(_operator_[i]==\"^\")\n     {\n        s.push(pow(n1,n2));\n     }\n     else\n     {\n        //cout<<\"Invalid\"<<endl;\n        return 0;\n     }\n  }\n  return s.top();\n  }\n\nvoid test_case_1() {\n   std::vector<std::string> _operator_ = {\"+\", \"*\", \"-\"};\n   std::vector<long> operand = {2, 3, 4, 5};\n   long result = do_algebra(_operator_, operand);\n   assert(result == 9);",
        "grade-56": {
            "execution": 0
        },
        "60": "// Write your code here\n\tint n = _operator_.size();\n\tif (n == 0) {\n\t\treturn 0;\n\t}\n\tint length = operand.size();\n\tif (length == 0) {\n\t\treturn 0;\n\t}\n\tlong result = operand[0];\n\tlong second_operand = 0;\n\tfor (int i = 0; i < n; i++) {\n\t\tif (_operator_[i] == \"+\") {\n\t\t\tresult += operand[i + 1];\n\t\t}\n\t\telse if (_operator_[i] == \"-\") {\n\t\t\tresult -= operand[i + 1];\n\t\t}\n\t\telse if (_operator_[i] == \"*\") {\n\t\t\tresult *= operand[i + 1];\n\t\t}\n\t\telse if (_operator_[i] == \"//\") {\n\t\t\tresult /= operand[i + 1];\n\t\t}\n\t\telse if (_operator_[i] == \"**\") {\n\t\t\tsecond_operand = operand[i + 1];\n\t\t\tresult = pow(result, second_operand);\n\t\t}\n\t}\n\treturn result;",
        "grade-60": {
            "execution": 0
        },
        "134": "// ensure operator size equals to operand size - 1\n  assert(_operator_.size() == operand.size() - 1);\n  // ensure there is at least one operator and at least two operands\n  assert(_operator_.size() != 0 && operand.size() != 0);\n  // if only two operands and one operator\n  if (operand.size() == 2) {\n    if (_operator_[0] == \"+\") return operand[0] + operand[1];\n    if (_operator_[0] == \"-\") return operand[0] - operand[1];\n    if (_operator_[0] == \"*\") return operand[0] * operand[1];\n    if (_operator_[0] == \"//\") return operand[0] / operand[1];\n    if (_operator_[0] == \"**\") return pow(operand[0], operand[1]);\n  }\n\n  std::vector<std::string> ops = _operator_;\n  std::vector<long> nums = operand;\n  long res = 0;\n  // find the operator with highest priority\n  auto it = std::find(ops.begin(), ops.end(), \"**\");\n  if (it != ops.end()) {\n    res = nums[it - ops.begin()] + nums[it - ops.begin() + 1];\n    nums.erase(nums.begin() + it - ops.begin());\n    nums[it - ops.begin()] = res;\n    ops.erase(it);\n    return do_algebra(ops, nums);\n  }\n\n  it = std::find(ops.begin(), ops.end(), \"*\");\n  if (it != ops.end()) {\n    res = nums[it - ops.begin()] * nums[it - ops.begin() + 1];\n    nums.erase(nums.begin() + it - ops.begin());\n    nums[it - ops.begin()] = res;\n    ops.erase(it);\n    return do_algebra(ops, nums);\n  }\n\n  it = std::find(ops.begin(), ops.end",
        "grade-134": {
            "execution": 0
        },
        "163": "long ret = operand[0];\n  for (int i = 0; i < _operator_.size(); i++) {\n    std::string operator_ = _operator_[i];\n    long b = operand[i + 1];\n    if (operator_ == \"+\") {\n      ret += b;\n    } else if (operator_ == \"-\") {\n      ret -= b;\n    } else if (operator_ == \"*\") {\n      ret *= b;\n    } else if (operator_ == \"//\") {\n      ret /= b;\n    } else if (operator_ == \"**\") {\n      ret = std::pow(ret, b);\n    }\n  }\n  return ret;",
        "grade-163": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n",
        "snippet": [
            "    int ff[100];\n    ff[0]=0;\n    ff[1]=0;\n    ff[2]=1;\n    for (int i=3;i<=n;i++)\n        ff[i]=ff[i-1]+ff[i-2]+ff[i-3];\n    return ff[n];\n\n}\n"
        ],
        "simplified": "The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3). Please write a function to efficiently compute the n-th element of the fibfib number sequence.",
        "task_id": "63",
        "178": "if (n < 2) return 0;\n    long a = 0, b = 0, c = 1, d;\n    while (n-- > 2) {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return c;",
        "grade-178": {
            "execution": 1
        },
        "29": "if (n == 0) {\n\t\treturn 0;\n\t}\n\tif (n == 1) {\n\t\treturn 0;\n\t}\n\tif (n == 2) {\n\t\treturn 1;\n\t}\n\tlong temp1 = 0;\n\tlong temp2 = 0;\n\tlong temp3 = 1;\n\tlong result = 0;\n\tfor (int i = 3; i <= n; i++) {\n\t\tresult = temp1 + temp2 + temp3;\n\t\ttemp1 = temp2;\n\t\ttemp2 = temp3;\n\t\ttemp3 = result;\n\t}\n\treturn result;",
        "grade-29": {
            "execution": 1
        },
        "6": "if (n == 0) {\n\t\treturn 0;\n\t} else if (n == 1) {\n\t\treturn 0;\n\t} else if (n == 2) {\n\t\treturn 1;\n\t} else {\n\t\tint a = 0;\n\t\tint b = 0;\n\t\tint c = 1;\n\t\tint d = 0;\n\t\tint e = 0;\n\t\tfor (int i = 0; i < n - 2; i++) {\n\t\t\ta = b;\n\t\t\tb = c;\n\t\t\tc = d;\n\t\t\td = a + b + c;\n\t\t\te = d;\n\t\t}\n\t\treturn e;\n\t}",
        "grade-6": {
            "execution": 0
        },
        "73": "if (n == 0) {\n    return 0;\n  }\n  if (n == 1) {\n    return 0;\n  }\n  if (n == 2) {\n    return 1;\n  }\n  long a = 0;\n  long b = 0;\n  long c = 1;\n  long d = a + b + c;\n  for (int i = 3; i < n; i++) {\n    a = b;\n    b = c;\n    c = d;\n    d = a + b + c;\n  }\n  return d;",
        "grade-73": {
            "execution": 1
        },
        "65": "if (n <= 0) {\n    return 0;\n  }\n  if (n == 1) {\n    return 0;\n  }\n  if (n == 2) {\n    return 1;\n  }\n  long m = n - 3;\n  long first_fib = 0;\n  long second_fib = 1;\n  long current_fib = 1;\n  long sum = 0;\n  while (m >= 0) {\n    m--;\n    sum += first_fib;\n    first_fib = second_fib;\n    second_fib = current_fib;\n    current_fib = first_fib + second_fib;\n  }\n  return sum + current_fib;",
        "grade-65": {
            "execution": 0
        },
        "59": "if (n == 0) {\n    return 0;\n  }\n  else if (n == 1) {\n    return 0;\n  }\n  else if (n == 2) {\n    return 1;\n  }\n  else {\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n  }",
        "grade-59": {
            "execution": 1
        },
        "36": "if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 1;\n    }\n    long a = 0;\n    long b = 0;\n    long c = 1;\n    long d = a + b + c;\n    for (int i = 3; i < n; i++) {\n        a = b;\n        b = c;\n        c = d;\n        d = a + b + c;\n    }\n    return d;",
        "grade-36": {
            "execution": 1
        },
        "26": "assert(n>=0);\n  if(n==0)\n    return 0;\n  if(n==1)\n    return 0;\n  if(n==2)\n    return 1;\n  return fibfib(n-1)+fibfib(n-2)+fibfib(n-3);",
        "grade-26": {
            "execution": 1
        },
        "188": "long dp[n+1];\n   dp[0] = 0;\n   dp[1] = 0;\n   dp[2] = 1;\n   for(int i = 3; i <= n; i++) {\n       dp[i] = dp[i-1] + dp[i-2] + dp[i-3];\n   }\n   return dp[n];",
        "grade-188": {
            "execution": 1
        },
        "150": "// WRITE YOUR CODE HERE\n    if(n==0)\n        return 0;\n    if(n==1)\n        return 0;\n    if(n==2)\n        return 1;\n    int a = 0, b = 0, c = 1, sum = 0;\n    while(n--){\n        sum = a + b + c;\n        a = b;\n        b = c;\n        c = sum;\n    }\n    return sum;",
        "grade-150": {
            "execution": 0
        },
        "22": "if (n==0)\n        return 0;\n    if (n==1)\n        return 0;\n    if (n==2)\n        return 1;\n    long a=0,b=0,c=1,d;\n    for (int i=3;i<=n;i++)\n    {\n        d=a+b+c;\n        a=b;\n        b=c;\n        c=d;\n    }\n    return d;",
        "grade-22": {
            "execution": 1
        },
        "165": "assert(n>=0);\n\tif(n==0 || n==1){\n\t\treturn 0;\n\t}\n\tif(n==2){\n\t\treturn 1;\n\t}\n\tlong dp[n+1];\n\tdp[0]=0;\n\tdp[1]=0;\n\tdp[2]=1;\n\tlong result;\n\tfor(int i=3;i<=n;i++){\n\t\tdp[i]=dp[i-1]+dp[i-2]+dp[i-3];\n\t}\n\tresult=dp[n];\n\treturn result;",
        "grade-165": {
            "execution": 1
        },
        "114": "std::vector<long> fib = {0, 0, 1};\n  for (long i = 3; i <= n; i++) {\n    fib.push_back(fib[i-1] + fib[i-2] + fib[i-3]);\n  }\n  return fib[n];",
        "grade-114": {
            "execution": 1
        },
        "8": "// Implement this placeholer.\n    long a=0,b=0,c=1,d;\n    if(n==0)\n        return 0;\n    else if(n==1)\n        return 0;\n    else if(n==2)\n        return 1;\n    else{\n        for(int i=3;i<=n;i++){\n            d=a+b+c;\n            a=b;\n            b=c;\n            c=d;\n        }\n        return d;\n    }",
        "grade-8": {
            "execution": 1
        },
        "7": "// your code here\n    assert(n >= 0);\n    if (n == 0 || n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 1;\n    }\n    long a = 0, b = 0, c = 1, d;\n    for (int i = 3; i <= n; i++) {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return d;",
        "grade-7": {
            "execution": 1
        },
        "23": "if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 1;\n    }\n    int memo[n+1];\n    memo[0] = 0;\n    memo[1] = 0;\n    memo[2] = 1;\n    for (int i = 3; i <= n; i++) {\n        memo[i] = memo[i-1] + memo[i-2] + memo[i-3];\n    }\n    return memo[n];",
        "grade-23": {
            "execution": 1
        },
        "57": "long a=0,b=0,c=1,d=0;\n  for(int i=3;i<=n;i++){\n    d=a+b+c;\n    a=b;\n    b=c;\n    c=d;\n  }\n  return d;",
        "grade-57": {
            "execution": 0
        },
        "62": "if (n < 0) {\n    return -1;\n  }\n  if (n == 0) {\n    return 0;\n  }\n  if (n == 1) {\n    return 0;\n  }\n  if (n == 2) {\n    return 1;\n  }\n  long a = 0;\n  long b = 0;\n  long c = 1;\n  long d = a + b + c;\n  for (int i = 3; i <= n; i++) {\n    a = b;\n    b = c;\n    c = d;\n    d = a + b + c;\n  }\n  return d;",
        "grade-62": {
            "execution": 0
        },
        "137": "std::vector<long> fibs = {0, 0, 1};\n    if (n < 3) return fibs[n];\n    for (int i = 3; i <= n; i++) {\n        fibs.push_back(fibs[i-1] + fibs[i-2] + fibs[i-3]);\n    }\n    return fibs[n];",
        "grade-137": {
            "execution": 1
        },
        "168": "assert(n >= 0);\n\tif (n == 0) {\n\t\treturn 0;\n\t}\n\tlong f[n+1];\n\tf[0] = 0;\n\tf[1] = 0;\n\tf[2] = 1;\n\tfor (int i = 3; i <= n; i++) {\n\t\tf[i] = f[i-1] + f[i-2] + f[i-3];\n\t}\n\treturn f[n];",
        "grade-168": {
            "execution": 1
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings into a single string\n// >>> concatenate([])\n// ''\n// >>> concatenate(['a', 'b', 'c'])\n// 'abc'\nstd::string concatenate(std::vector<std::string> strings) {\n",
        "snippet": [
            "    string out=\"\";\n    for (int i=0;i<strings.size();i++)\n        out=out+strings[i];\n    return out;\n}\n"
        ],
        "simplified": "Concatenate list of strings into a single string",
        "task_id": "28",
        "193": "std::string result;\n\tfor (std::string s : strings) {\n\t\tresult += s;\n\t}\n\treturn result;",
        "grade-193": {
            "execution": 1
        },
        "28": "std::string s;\n  for (auto &&str : strings) {\n    s += str;\n  }\n  return s;",
        "grade-28": {
            "execution": 1
        },
        "6": "std::string concated_string;\n    for (std::string s : strings) {\n        concated_string += s;\n    }\n    return concated_string;",
        "grade-6": {
            "execution": 1
        },
        "75": "// your code here\n  return std::accumulate(std::begin(strings), std::end(strings), std::string());",
        "grade-75": {
            "execution": 1
        },
        "66": "std::string s;\n    for (std::string str : strings) {\n        s += str;\n    }\n    return s;",
        "grade-66": {
            "execution": 1
        },
        "61": "std::string s;\n\tfor (std::string str : strings)\n\t\ts += str;\n\treturn s;",
        "grade-61": {
            "execution": 1
        },
        "35": "// Your code here\n  std::string s = \"\";\n  for(auto x: strings)\n  {\n      s+=x;\n  }\n  return s;",
        "grade-35": {
            "execution": 1
        },
        "26": "std::string result;\n\tfor (std::string str : strings) {\n\t\tresult += str;\n\t}\n\treturn result;",
        "grade-26": {
            "execution": 1
        },
        "158": "std::string result;\n  for (std::string item : strings) {\n    result += item;\n  }\n  return result;",
        "grade-158": {
            "execution": 1
        },
        "22": "std::string s;\n    for (int i = 0; i < strings.size(); i++) {\n        s += strings[i];\n    }\n    return s;",
        "grade-22": {
            "execution": 1
        },
        "179": "std::string concat_string = \"\";\n    for (unsigned i = 0; i < strings.size(); i++) {\n        concat_string += strings[i];\n    }\n    return concat_string;",
        "grade-179": {
            "execution": 1
        },
        "122": "// TODO: Implement\n    return \"\";",
        "grade-122": {
            "execution": 0
        },
        "8": "std::string s = \"\";\n  for (int i = 0; i < strings.size(); i++) {\n    s = s + strings[i];\n  }\n  return s;",
        "grade-8": {
            "execution": 1
        },
        "7": "std::string res;\n  for (const auto& s : strings) {\n    res += s;\n  }\n  return res;",
        "grade-7": {
            "execution": 1
        },
        "23": "if (strings.size() == 0) {\n    return \"\";\n  } else {\n    return strings[0] + concatenate(std::vector<std::string>(strings.begin() + 1, strings.end()));\n  }",
        "grade-23": {
            "execution": 1
        },
        "57": "std::string concatenated = \"\";\n   for (std::string str : strings) {\n      concatenated += str;\n   }\n   return concatenated;",
        "grade-57": {
            "execution": 1
        },
        "63": "std::string result = \"\";\n    for (std::string str : strings) {\n        result += str;\n    }\n    return result;",
        "grade-63": {
            "execution": 1
        },
        "147": "std::string s;\n    for (std::string str : strings) {\n        s.append(str);\n    }\n    return s;",
        "grade-147": {
            "execution": 1
        },
        "182": "std::stringstream ss;\n  for (std::string s : strings) {\n    ss << s;\n  }\n  return ss.str();",
        "grade-182": {
            "execution": 1
        },
        "167": "std::string final = \"\";\n  for (int i = 0; i < strings.size(); i++) {\n    final = final + strings[i];\n  }\n  return final;",
        "grade-167": {
            "execution": 1
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long a, long b) {\n",
        "snippet": [
            "    int out,m;\n    while (true){\n        if (a<b) \n        {\n            m=a;a=b;b=m;\n        }\n        a=a%b;\n        if (a==0) return b;\n    }\n}\n"
        ],
        "simplified": "Return a greatest common divisor of two integers a and b",
        "task_id": "13",
        "178": "if (a == 0 || b == 0) {\n\t\treturn a + b;\n\t}\n\twhile (a > 0 && b > 0) {\n\t\tif (a > b) {\n\t\t\ta %= b;\n\t\t} else {\n\t\t\tb %= a;\n\t\t}\n\t}\n\treturn a + b;",
        "grade-178": {
            "execution": 1
        },
        "29": "long temp;\n    while (b != 0) {\n        temp = a % b;\n        a = b;\n        b = temp;\n    }\n    return a;",
        "grade-29": {
            "execution": 1
        },
        "6": "long m = a, n = b;\n    while (m != n) {\n        if (m > n) {\n            m = m - n;\n        } else {\n            n = n - m;\n        }\n    }\n    return m;",
        "grade-6": {
            "execution": 1
        },
        "74": "assert(a >= 0 && b >= 0);\n    while (b != 0) {\n        a %= b;\n        std::swap(a, b);\n    }\n    return a;",
        "grade-74": {
            "execution": 1
        },
        "64": "// Use Euclid's algorithm\n    while (b != 0) {\n        long remainder = a % b;\n        a = b;\n        b = remainder;\n    }\n    return a;",
        "grade-64": {
            "execution": 1
        },
        "59": "if (a < b) {\n        return greatest_common_divisor(b, a);\n    }\n    long r = a % b;\n    if (r == 0) {\n        return b;\n    }\n    return greatest_common_divisor(b, r);",
        "grade-59": {
            "execution": 1
        },
        "37": "// your code goes here\n\tif (a == 0) {\n\t\treturn b;\n\t}\n\tif (b == 0) {\n\t\treturn a;\n\t}\n\tif (a == b) {\n\t\treturn a;\n\t}\n\tif (a > b) {\n\t\treturn greatest_common_divisor(a - b, b);\n\t}\n\treturn greatest_common_divisor(a, b - a);",
        "grade-37": {
            "execution": 1
        },
        "27": "assert(a >= 0 && b >= 0);\n    if (a == 0) {\n        return b;\n    }\n    return greatest_common_divisor(b % a, a);",
        "grade-27": {
            "execution": 1
        },
        "188": "assert(a > 0 && b > 0);\n    long shift, k;\n    if (a < b) {\n        long temp = a;\n        a = b;\n        b = temp;\n    }\n    for (shift = 0; ((a | b) & 1) == 0; ++shift) {\n        a >>= 1;\n        b >>= 1;\n    }\n    while ((a & 1) == 0)\n        a >>= 1;\n    do {\n        while ((b & 1) == 0)\n            b >>= 1;\n        if (a > b) {\n            long temp = a;\n            a = b;\n            b = temp;\n        }\n        b = b - a;\n    } while (b != 0);\n    return a << shift;",
        "grade-188": {
            "execution": 1
        },
        "152": "long r = 0;\n   if (a == 0) {\n      return b;\n   }\n   if (b == 0) {\n      return a;\n   }\n   while (b != 0) {\n      r = a % b;\n      a = b;\n      b = r;\n   }\n   return a;",
        "grade-152": {
            "execution": 1
        },
        "23": "if (a == 0 || b == 0) {\n        return 1;\n    }\n    a = abs(a);\n    b = abs(b);\n    while (a != b) {\n        if (a > b) {\n            a = a - b;\n        } else {\n            b = b - a;\n        }\n    }\n    return a;",
        "grade-23": {
            "execution": 1
        },
        "165": "while (b) {\n\t\tlong c = a;\n\t\ta = b;\n\t\tb = c % b;\n\t}\n\treturn a;",
        "grade-165": {
            "execution": 1
        },
        "116": "assert(a >= 0 && b >= 0);\n    if (a == 0) return b;\n    if (b == 0) return a;\n    if (a > b) return greatest_common_divisor(a % b, b);\n    else return greatest_common_divisor(a, b % a);",
        "grade-116": {
            "execution": 1
        },
        "9": "while (a != b) {\n        if (a > b) {\n            a = a - b;\n        } else {\n            b = b - a;\n        }\n    }\n    return a;",
        "grade-9": {
            "execution": 1
        },
        "7": "if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n        return a;\n    }\n    if (a == b) {\n        return a;\n    }\n    long m = std::max(a, b);\n    long n = std::min(a, b);\n    if (m % n == 0) {\n        return n;\n    }\n    return greatest_common_divisor(n, m % n);",
        "grade-7": {
            "execution": 1
        },
        "24": "// TODO: Implement me!\n    assert(a >= 1 && b >= 1);\n    long c = b%a;\n    //long* nums = new long[2];\n    //nums[0] = a;\n    //nums[1] = b;\n    //std::sort(nums, nums+2);\n    while(c!=0){\n    \tb = a;\n    \ta = c;\n    \tc = b%a;\n    }\n    //if(c == 0)return nums[0];\n    return a;",
        "grade-24": {
            "execution": 1
        },
        "57": "long m = std::min(a, b);\n    long n = std::max(a, b);\n    while (n % m != 0) {\n        long remainder = n % m;\n        n = m;\n        m = remainder;\n    }\n    return m;",
        "grade-57": {
            "execution": 1
        },
        "61": "if (a < b) {\n        long temp = a;\n        a = b;\n        b = temp;\n    }\n    if (b == 0) {\n        return a;\n    }\n    else {\n        return greatest_common_divisor(b, a % b);\n    }",
        "grade-61": {
            "execution": 1
        },
        "141": "if (a == 0 || b == 0)\n        return 0;\n    else if (a == b)\n        return a;\n    else if (a > b)\n        return greatest_common_divisor(a - b, b);\n    else\n        return greatest_common_divisor(a, b - a);",
        "grade-141": {
            "execution": 1
        },
        "169": "long m = std::max(a, b);\n\tlong n = std::min(a, b);\n\tlong t = n;\n\tif (t == 0)\n\t\treturn m;\n\twhile (m % t != 0) {\n\t\tt = m % t;\n\t}\n\treturn t;",
        "grade-169": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nstd::string flip_case(std::string string) {\n",
        "snippet": [
            "    string out=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        char w=str[i];\n        if (w>=97 and w<=122) {w-=32;}\n        else\n            if (w>=65 and w<=90){ w+=32;}\n        out=out+w;\n    }\n    return out;\n}\n"
        ],
        "simplified": "For a given string, flip lowercase characters to uppercase and uppercase to lowercase.",
        "task_id": "27",
        "186": "int len = string.length();\n    for(int i=0;i<len;i++){\n        if(isupper(string[i]))\n            string[i] = tolower(string[i]);\n        else\n            string[i] = toupper(string[i]);\n    }\n    return string;",
        "grade-186": {
            "execution": 1
        },
        "28": "int i = 0;\n    while(string[i] != '\\0'){\n        if(islower(string[i])){\n            string[i] = toupper(string[i]);\n        }\n        else if(isupper(string[i])){\n            string[i] = tolower(string[i]);\n        }\n        i++;\n    }\n    return string;",
        "grade-28": {
            "execution": 1
        },
        "6": "std::string result = \"\";\n  for (char c : string) {\n    if (islower(c)) {\n      result += toupper(c);\n    } else {\n      result += tolower(c);\n    }\n  }\n  return result;",
        "grade-6": {
            "execution": 1
        },
        "76": "for (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] >= 'a' && string[i] <= 'z')\n\t\t\tstring[i] = string[i] - 32;\n\t\telse if (string[i] >= 'A' && string[i] <= 'Z')\n\t\t\tstring[i] = string[i] + 32;\n\t}\n\treturn string;",
        "grade-76": {
            "execution": 1
        },
        "67": "std::string new_string = \"\";\n\tfor (char& i : string) {\n\t\tif (islower(i)) {\n\t\t\tnew_string += std::toupper(i);\n\t\t}\n\t\telse {\n\t\t\tnew_string += std::tolower(i);\n\t\t}\n\t}\n\treturn new_string;",
        "grade-67": {
            "execution": 1
        },
        "61": "for(int i=0; i<string.length(); i++) {\n        if(string[i] >= 'a' && string[i] <= 'z') {\n            string[i] = string[i] - 32;\n        }\n        else if(string[i] >= 'A' && string[i] <= 'Z') {\n            string[i] = string[i] + 32;\n        }\n    }\n    return string;",
        "grade-61": {
            "execution": 1
        },
        "36": "// Create a stack to store the characters\nstd::stack<char> stk;\n// Create a string to store the flipped string\nstd::string flippedString;\n\n// Push every character of input string to stack\nfor(int i=0; i<string.length(); i++)\n\tstk.push(string[i]);\n\n// Flip the case of string and store in new string\nwhile(!stk.empty())\n{\n\tif((stk.top()>='a') && (stk.top()<='z'))\n\t\tflippedString += (stk.top()-'a'+'A');\n\telse if((stk.top()>='A') && (stk.top()<='Z'))\n\t\tflippedString += (stk.top()-'A'+'a');\n\telse\n\t\tflippedString += stk.top();\n\tstk.pop();",
        "grade-36": {
            "execution": 0
        },
        "26": "for(int i=0;i<string.length();i++)\n    {\n        if(string[i]>='a'&&string[i]<='z')\n        {\n            string[i]=string[i]-32;\n        }\n        else if(string[i]>='A'&&string[i]<='Z')\n        {\n            string[i]=string[i]+32;\n        }\n    }\n    return string;",
        "grade-26": {
            "execution": 1
        },
        "198": "for (int i = 0; i < string.length(); i++) {\n    string[i] = isupper(string[i]) ? tolower(string[i]) : toupper(string[i]);\n  }\n  return string;",
        "grade-198": {
            "execution": 1
        },
        "159": "// your code here!\n    //v1\n//     for(int i=0;i<string.length();i++){\n//         string[i]^=32;\n//     }\n//     return string;\n    //v2\n    for(int i=0;i<string.length();i++){\n        if(string[i]>='a' && string[i]<='z'){\n            string[i]=string[i]-32;\n        }\n        else if(string[i]>='A' && string[i]<='Z'){\n            string[i]=string[i]+32;\n        }\n    }\n    return string;",
        "grade-159": {
            "execution": 1
        },
        "22": "//! Error Handling\n    if(string.empty()) {\n        std::cerr << \"String is empty\" << std::endl;\n        return \"\";\n    }\n    //! Lowercase char to uppercase\n    std::transform(string.begin(), string.end(), string.begin(), ::toupper);\n    //! Uppercase char to lowercase\n    std::transform(string.begin(), string.end(), string.begin(), ::tolower);\n    return string;",
        "grade-22": {
            "execution": 0
        },
        "172": "int length = string.length();\n\tchar *temp = new char[length];\n\tfor (int i = 0; i < length; i++) {\n\t\ttemp[i] = string[i];\n\t}\n\tfor (int i = 0; i < length; i++) {\n\t\tif (temp[i] >= 'a' && temp[i] <= 'z') {\n\t\t\ttemp[i] = (temp[i] - 32);\n\t\t}\n\t\telse if (temp[i] >= 'A' && temp[i] <= 'Z') {\n\t\t\ttemp[i] = (temp[i] + 32);\n\t\t}\n\t}\n\tstd::string output;\n\tfor (int i = 0; i < length; i++) {\n\t\toutput += temp[i];\n\t}\n\treturn output;",
        "grade-172": {
            "execution": 1
        },
        "124": "",
        "grade-124": {
            "execution": 0
        },
        "8": "std::string ans=\"\";\n    int i=0;\n    while(string[i]!='\\0'){\n        int n=string[i];\n        if(n>=65 && n<=90){\n            n=n+32;\n            ans=ans+(char)n;\n        }\n        else if(n>=97 && n<=122){\n            n=n-32;\n            ans=ans+(char)n;\n        }\n        else{\n            ans=ans+(char)n;\n        }\n        i++;\n    }\n    return ans;",
        "grade-8": {
            "execution": 1
        },
        "7": "for(int i=0;i<string.length();i++)\n    {\n        if(islower(string[i]))\n        {\n            string[i]=toupper(string[i]);\n        }\n        else if(isupper(string[i]))\n        {\n            string[i]=tolower(string[i]);\n        }\n    }\n    return string;",
        "grade-7": {
            "execution": 1
        },
        "23": "int size = string.size();\n  for(int i = 0; i < size; i++) {\n    char c = string[i];\n    if (islower(c)) {\n      string[i] = toupper(c);\n    } else if (isupper(c)) {\n      string[i] = tolower(c);\n    }\n  }\n  return string;",
        "grade-23": {
            "execution": 1
        },
        "58": "std::transform(string.begin(), string.end(), string.begin(), ::tolower);\n\treturn string;",
        "grade-58": {
            "execution": 0
        },
        "63": "std::string flip_string;\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            flip_string += std::toupper(string[i]);\n        } else if (string[i] >= 'A' && string[i] <= 'Z') {\n            flip_string += std::tolower(string[i]);\n        } else {\n            flip_string += string[i];\n        }\n    }\n    return flip_string;",
        "grade-63": {
            "execution": 1
        },
        "148": "for(int i=0;i<string.length();i++)\n    {\n        if(isupper(string[i]))\n        {\n            string[i]=tolower(string[i]);\n        }\n        else\n        {\n            string[i]=toupper(string[i]);\n        }\n    }\n    return string;",
        "grade-148": {
            "execution": 1
        },
        "175": "for(char &ch : string) {\n        if(isupper(ch)) {\n            ch = tolower(ch);\n        } else {\n            ch = toupper(ch);\n        }\n    }\n    return string;",
        "grade-175": {
            "execution": 1
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n",
        "snippet": [
            "    int p=1,count=0;\n    while (p<=x and count<100)\n    {\n        if (p==x) return true;\n        p=p*n;count+=1;\n    }\n    return false;\n}\n"
        ],
        "simplified": "Your task is to write a function that returns true if a number x is a simple power of n and false in other cases. x is a simple power of n if n**int=x",
        "task_id": "76",
        "163": "if (x == 1) return true;\n  int count = 0;\n  if (x % n != 0) {\n    return false;\n  }\n  long power = n;\n  while (x > 1) {\n    if (x % n != 0) {\n      return false;\n    }\n    count++;\n    x /= n;\n  }\n  if (power == n) {\n    return true;\n  }\n  return false;",
        "grade-163": {
            "execution": 1
        },
        "28": "if (n == 1 && x == 1) {\n    return true;\n  }\n  if (n == 1 && x != 1) {\n    return false;\n  }\n  long exponent = 2;\n  long result = n * n;\n  while (result <= x) {\n    if (result == x) {\n      return true;\n    }\n    result *= n;\n    exponent++;\n  }\n  return false;",
        "grade-28": {
            "execution": 0
        },
        "6": "// Write your code here\n    if(x==1)\n        return true;\n    long k = n;\n    for(int i=1; i<x; i++)\n    {\n        k = k*n;\n        if(k==x)\n            return true;\n    }\n    return false;",
        "grade-6": {
            "execution": 1
        },
        "189": "if (x <= 0 || n <= 0) {\n        return false;\n    }\n    double log_n = log(x) / log(n);\n    if (log_n - (int)log_n == 0) {\n        return true;\n    }\n    return false;",
        "grade-189": {
            "execution": 0
        },
        "70": "long p = n;\n  while (p < x) p *= n;\n  return p == x;",
        "grade-70": {
            "execution": 0
        },
        "62": "if (x < 0 || n < 0) return false;\n    if (x == 1) return true;\n    if (n == 1) return false;\n    double tmp = std::log(x) / std::log(n);\n    if (tmp == (int)tmp) return true;\n    return false;",
        "grade-62": {
            "execution": 1
        },
        "57": "// your code here\n    if(x==1)\n        return true;\n    if(x==n)\n        return true;\n    double lg=log(x)/log(n);\n    if(floor(lg)==ceil(lg))\n        return true;\n    return false;",
        "grade-57": {
            "execution": 1
        },
        "35": "if (x == 1) {\n\t\treturn true;\n\t}\n\tlong power = n;\n\tif (x == n) {\n\t\treturn true;\n\t}\n\twhile (power < x) {\n\t\tpower *= n;\n\t\tif (power == x) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;",
        "grade-35": {
            "execution": 1
        },
        "188": "if (x == 1) {\n        return true;\n    }\n    for (long i = 0; i < x; i++) {\n        double temp = std::pow(n, i);\n        if (temp == x) {\n            return true;\n        }\n    }\n    return false;",
        "grade-188": {
            "execution": 1
        },
        "26": "return (x == 1 || (x > 1 && x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n",
        "grade-26": {
            "execution": 0
        },
        "173": "if (x == 1) return true;\n    int nn = 0;\n    while (x % n == 0) {\n        nn++;\n        x /= n;\n    }\n    if (x != 1) return false;\n    if (nn > 1) return false;\n    return true;",
        "grade-173": {
            "execution": 0
        },
        "139": "if (x==1 && n==1) {\n        return true;\n    } else if (x==1) {\n        return false;\n    } else if (n==1) {\n        return false;\n    } else {\n        double d = log(x)/log(n);\n        std::cout << d << std::endl;\n        std::cout << d - floor(d) << std::endl;\n        return d - floor(d) == 0;\n    }",
        "grade-139": {
            "execution": 0
        },
        "22": "double y = log2(x)/log2(n);\n    int z = (int)y;\n    if (z == y){\n        return true;\n    }\n    return false;",
        "grade-22": {
            "execution": 0
        },
        "151": "int i = 1;\n  while (std::pow(n, i) <= x) {\n    if (std::pow(n, i) == x) {\n      return true;\n    }\n    i++;\n  }\n  return false;",
        "grade-151": {
            "execution": 0
        },
        "108": "long power = 0;\n  if (x == 1) {\n    return true;\n  }\n  for (; pow(n, power) <= x; ++power) {\n    if (pow(n, power) == x) {\n      return true;\n    }\n  }\n  return false;",
        "grade-108": {
            "execution": 1
        },
        "8": "if (x == 1 && n == 1) {\n    return true;\n  }\n  if (x < n) {\n    return false;\n  }\n  if (x % n != 0) {\n    return false;\n  }\n  return is_simple_power(x / n, n);",
        "grade-8": {
            "execution": 0
        },
        "7": "double d = x;\n  int c = 0;\n  while(d > 1) {\n    d = d / n;\n    c++;\n  }\n  if(d == 1) {\n    return true;\n  }\n  return false;",
        "grade-7": {
            "execution": 1
        },
        "23": "if (x == 1 && n == 1) {\n\t\treturn true;\n\t}\n\tif (x == 1 && n != 1) {\n\t\treturn false;\n\t}\n\tint res = 0;\n\twhile (n > 1) {\n\t\tint y = log(x) / log(n);\n\t\tif (y * log(n) == log(x)) {\n\t\t\treturn true;\n\t\t}\n\t\tn--;\n\t}\n\treturn false;",
        "grade-23": {
            "execution": 0
        },
        "55": "for (long i = 2; i < x; i++) {\n        int count = 0;\n        while (x % i == 0) {\n            x /= i;\n            count++;\n        }\n        if (n == i && count == 1)\n            return true;\n    }\n    return false;",
        "grade-55": {
            "execution": 0
        },
        "59": "if (n == 1) {\n    return x == 1;\n  }\n  long a = n;\n  while (a <= x) {\n    if (a == x) {\n      return true;\n    }\n    a *= n;\n  }\n  return false;",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered lists of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered list of the values on the cells that the minimum path go through.\n// Examples:\n// Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n// Output: [1, 2, 1]\n// Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n// Output: [1]\nstd::vector<long> minPath(std::vector<std::vector<long>> grid, long k) {\n",
        "snippet": [
            "    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\n"
        ],
        "simplified": "Given a grid with N rows and N columns (N >= 2) and a positive integer k, each cell of the grid contains a value. Every integer in the range [1, N * N] inclusive appears exactly once on the cells of the grid. You have to find the minimum path of length k in the grid. You can start from any cell, and in each step you can move to any of the neighbor cells, in other words, you can go to cells which share an edge with you current cell. Please note that a path of length k means visiting exactly k cells (not necessarily distinct). You CANNOT go off the grid. A path A (of length k) is considered less than a path B (of length k) if after making the ordered lists of the values on the cells that A and B go through (let's call them lst_A and lst_B), lst_A is lexicographically less than lst_B, in other words, there exist an integer index i (1 <= i <= k) such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have lst_A[j] = lst_B[j]. It is guaranteed that the answer is unique. Return an ordered list of the values on the cells that the minimum path go through.",
        "task_id": "129",
        "169": "int n = grid.size();\n    long start = grid[0][0];\n    std::priority_queue<std::vector<long>, std::vector<std::vector<long>>, std::greater<std::vector<long>>> q;\n    std::set<long> visited;\n    std::vector<long> result;\n    std::vector<std::vector<long>> offsets = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n    std::vector<long> elem = {start, 0, 0, 0};\n    q.push(elem);\n    while (!q.empty()) {\n        std::vector<long> curr = q.top();\n        q.pop();\n        long val = curr[0];\n        long len = curr[1];\n        long x = curr[2];\n        long y = curr[3];\n        if (len == k) {\n            result.push_back(val);\n            break;\n        }\n        for (int i = 0; i < offsets.size(); i++) {\n            long next_x = x + offsets[i][0];\n            long next_y = y + offsets[i][1];\n            if (next_x >= 0 && next_x < n && next_y >= 0 && next_y < n) {\n                long next_val = grid[next_x][next_y];\n                if (visited.find(next_val) == visited.end()) {\n                    std::vector<long> next_elem = {next_val, len + 1, next_x, next_y};\n                    q.push(next_elem);\n                    visited.insert(next_val);\n                }\n            }\n        }\n    }\n    return result;",
        "grade-169": {
            "execution": 0
        },
        "29": "// Write your code here\n  int n = grid.size();\n  assert(n >= 2);\n  for (int i = 0; i < n; i++) {\n    assert(grid[i].size() == n);\n  }\n  std::vector<std::vector<std::vector<long>>> memo(n,\n                                                   std::vector<std::vector<long>>(n,\n                                                                                  std::vector<long>(k + 1, -1)));\n  long answer = INT_MAX;\n  std::vector<long> ret;\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < n; j++) {\n      std::vector<long> temp;\n      dfs(grid, memo, temp, i, j, n, k, 0, answer, ret);\n    }\n  }\n  return ret;",
        "grade-29": {
            "execution": 0
        },
        "6": "// initialize data structures\n  std::vector<long> v;\n  std::vector<std::vector<long>> G;\n  for (long i = 0; i < grid.size(); i++) {\n    G.push_back(std::vector<long>());\n    for (long j = 0; j < grid[i].size(); j++) {\n      G[i].push_back(0);\n    }\n  }\n  // create adjacency matrix G\n  for (long i = 0; i < grid.size(); i++) {\n    for (long j = 0; j < grid[i].size(); j++) {\n      // same row left\n      if (j > 0) {\n        G[i][j] += (grid[i][j] == grid[i][j-1]) ? 1 : 0;\n      }\n      // same row right\n      if (j < grid[i].size() - 1) {\n        G[i][j] += (grid[i][j] == grid[i][j+1]) ? 1 : 0;\n      }\n      // same column up\n      if (i > 0) {\n        G[i][j] += (grid[i][j] == grid[i-1][j]) ? 1 : 0;\n      }\n      // same column down\n      if (i < grid.size() - 1) {\n        G[i][j] += (grid[i][j] == grid[i+1][j]) ? 1 : 0;\n      }\n    }\n  }\n  // now need to use adjacency matrix and BFS to find min cost path of length k\n  // store std::queue<std::vector<long>> that holds the paths\n  std::queue<std::vector<long>> paths;\n  // start with each node (i, j) in grid and a path of one node\n  for (long i = 0; i < grid.size(); i++) {\n    for (long j = 0; j < grid[i].size(); j++) {\n      paths.push(std::vector<long>{grid[i][j]});\n    }\n  }\n  // BFS\n  while (!paths.empty()) {",
        "grade-6": {
            "execution": 0
        },
        "196": "std::vector<long> v = {};\n    long i, j;\n    for(i = 0; i < grid.size(); i++) {\n        for(j = 0; j < grid[i].size(); j++) {\n            if(k == 1) {\n                v.push_back(grid[i][j]);\n                break;\n            }\n            if(i > 0 && grid[i-1][j] < grid[i][j]) {\n                if(grid[i-1][j] < grid[i+1][j]) {\n                    v.push_back(grid[i-1][j]);\n                    i = i-1;\n                }\n                else {\n                    v.push_back(grid[i+1][j]);\n                    i = i+1;\n                }\n            }\n            else if(j > 0 && grid[i][j-1] < grid[i][j]) {\n                if(grid[i][j-1] < grid[i][j+1]) {\n                    v.push_back(grid[i][j-1]);\n                    j = j-1;\n                }\n                else {\n                    v.push_back(grid[i][j+1]);\n                    j = j+1;\n                }\n            }\n            else if(i < grid.size()-1 && grid[i+1][j] < grid[i][j]) {\n                if(grid[i+1][j] < grid[i-1][j]) {\n                    v.push_back(grid[i+1][j]);\n                    i = i+1;\n                }\n                else {\n                    v.push_back(grid[i-1][j]);\n                    i = i-1;\n                }\n            }\n            else if(j < grid[i].size()-1 && grid[i][j+1] < grid[i][j]) {\n                if(grid[i][j+1] < grid[i][j-1]) {\n                    v.push_back(grid[i][j+1]);\n                    j = j+1;\n                }\n                else {\n                    v.push_back(grid[i][j-",
        "grade-196": {
            "execution": 0
        },
        "71": "long n = grid.size();\n    std::vector<std::vector<std::vector<long>>> dp(k+1, std::vector<std::vector<long>>(n, std::vector<long>(n, INT_MAX)));\n    dp[0][0][0] = grid[0][0];\n    for(long idx = 1; idx <= k; idx++) {\n        for(long row = 0; row < n; row++) {\n            for(long col = 0; col < n; col++) {\n                if(row > 0) {\n                    dp[idx][row][col] = std::min(dp[idx][row][col], dp[idx-1][row-1][col]);\n                }\n                if(row < n-1) {\n                    dp[idx][row][col] = std::min(dp[idx][row][col], dp[idx-1][row+1][col]);\n                }\n                if(col > 0) {\n                    dp[idx][row][col] = std::min(dp[idx][row][col], dp[idx-1][row][col-1]);\n                }\n                if(col < n-1) {\n                    dp[idx][row][col] = std::min(dp[idx][row][col], dp[idx-1][row][col+1]);\n                }\n                dp[idx][row][col] += grid[row][col];\n            }\n        }\n    }\n    std::vector<long> result;\n    long row = 0, col = 0;\n    result.push_back(grid[0][0]);\n    for(long idx = 1; idx <= k; idx++) {\n        std::vector<std::vector<long>> temp = dp[idx];\n        if(row > 0 && temp[row-1][col] == dp[idx][row][col] - grid[row][col]) {\n            row--;\n        } else if(row < n-1 && temp[row+1][col] == dp[idx][row][col]",
        "grade-71": {
            "execution": 0
        },
        "63": "// Implement the solution here.\n  // Make sure to return the result in the specified format.\n  std::vector<long> ret;\n  return ret;",
        "grade-63": {
            "execution": 0
        },
        "58": "// backtracking\n    int N = grid.size();\n    long n = N * N;\n    std::vector<std::vector<bool>> visited(N, std::vector<bool>(N, false));\n    std::vector<long> result(k, 0);\n    long min_path = INT_MAX;\n    long min_index = INT_MAX;\n    std::vector<std::vector<long>> dirs = {{0, -1}, {0, 1}, {-1, 0}, {1, 0}};\n    long dfs(long r, long c, long i, long path, long index) {\n        if (i == k) {\n            if (path < min_path) {\n                min_path = path;\n                min_index = index;\n                for (int j = 0; j < k; j++) {\n                    result[j] = grid[r - j][c];\n                }\n            } else if (path == min_path) {\n                bool success = true;\n                long j = k - 1;\n                while (j >= 0) {\n                    if (grid[r - j][c] < result[j]) {\n                        for (int x = 0; x < k; x++) {\n                            result[x] = grid[r - x][c];\n                        }\n                        min_index = index;\n                        break;\n                    } else if (grid[r - j][c] > result[j]) {\n                        success = false;\n                        break;\n                    }\n                    j--;\n                }\n                if (success) {\n                    if (index < min_index) {\n                        for (int x = 0; x < k; x++) {\n                            result[x] = grid[r - x][c];\n                        }\n                        min_index = index;\n                    }\n                }\n            }\n            return INT_MAX;\n        }\n        long temp = INT_MAX;\n        for (int j = 0; j < 4; j++) {\n            long nr = r + dirs[j][0];\n            long nc = c + dirs[j][1];\n            if (nr >= 0 && nr < N && nc >= 0 &&",
        "grade-58": {
            "execution": 0
        },
        "36": "std::vector<long> dp[grid.size() + 1][grid[0].size() + 1][k + 1];\n\t// for (long i = 0; i < grid.size() + 1; i++) {\n\t// \tfor (long j = 0; j < grid[0].size() + 1; j++) {\n\t// \t\tfor (long p = 0; p < k + 1; p++) {\n\t// \t\t\tstd::vector<long> temp;\n\t// \t\t\tdp[i][j][p] = temp;\n\t// \t\t}\n\t// \t}\n\t// }\n\tdp[1][1][0].push_back(grid[0][0]);\n\tfor (long i = 1; i < grid.size() + 1; i++) {\n\t\tfor (long j = 1; j < grid[0].size() + 1; j++) {\n\t\t\tfor (long p = 0; p < k + 1; p++) {\n\t\t\t\tif (p == 0) {\n\t\t\t\t\tstd::vector<long> temp;\n\t\t\t\t\ttemp.push_back(grid[i - 1][j - 1]);\n\t\t\t\t\tdp[i][j][p] = temp;\n\t\t\t\t} else {\n\t\t\t\t\tstd::vector<long> temp = dp[i - 1][j][p - 1];\n\t\t\t\t\ttemp.push_back(grid[i - 1][j - 1]);\n\t\t\t\t\tif (dp[i][j][p].empty() || temp < dp[i][j][p]) {\n\t\t\t\t\t\tdp[i][j][p] = temp;\n\t\t\t\t\t}\n\t\t\t\t\ttemp = dp[i][j - 1][p - 1];\n\t\t\t\t\ttemp.push_back(grid[i - 1][j - 1]);\n\t\t\t\t\tif (dp[i][j][p].empty() || temp < dp[i][j][p]) {\n\t\t\t\t\t\tdp[i][j][p] = temp;",
        "grade-36": {
            "execution": 0
        },
        "195": "// Write your code here\n    int rows = grid.size();\n    int cols = grid[0].size();\n    std::vector<std::vector<long>> dp(rows, std::vector<long>(cols, 0));\n    std::vector<std::vector<int>> visited(rows, std::vector<int>(cols, 0));\n    std::vector<std::vector<std::vector<long>>> v(rows, std::vector<std::vector<long>>(cols, std::vector<long>()));\n    for(int i = 0; i < rows; i++){\n        for(int j = 0; j < cols; j++){\n            v[i][j].push_back(grid[i][j]);\n        }\n    }\n    // std::cout << \"v start: \" << std::endl;\n    // for(int i = 0; i < rows; i++){\n    //     for(int j = 0; j < cols; j++){\n    //         for(int n = 0; n < v[i][j].size(); n++){\n    //             std::cout << v[i][j][n] << \" \";\n    //         }\n    //         std::cout << std::endl;\n    //     }\n    // }\n    // std::cout << \"v end: \" << std::endl;\n    for(int i = 0; i < rows; i++){\n        for(int j = 0; j < cols; j++){\n            if(i == 0 && j == 0){\n                dp[i][j] = grid[i][j];\n            }\n            else if(i == 0){\n                dp[i][j] = dp[i][j-1] + grid[i][j];\n            }\n            else if(j == 0){\n                dp[i][j] = dp[i-1][j] + grid[i][j];\n            }\n            else{\n                dp[i][j] = std::min(dp[i-1][j], dp[i][j-1]) + grid[i][j];",
        "grade-195": {
            "execution": 0
        },
        "27": "// calculate the number of rows and columns in the grid\n    long n = grid.size();\n    assert(n >= 2);\n    assert(grid[0].size() == n);\n    // create an ordered list of all the values on the grid\n    std::vector<long> all_vals(n * n);\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++) {\n            all_vals[i * n + j] = grid[i][j];\n        }\n    }\n    // sort the list of values\n    std::sort(all_vals.begin(), all_vals.end());\n    // create a matrix that stores the minimum path of length k from cell i, j\n    // with value v\n    std::vector<std::vector<std::vector<long>>> mat(n);\n    for (long i = 0; i < n; i++) {\n        mat[i].resize(n);\n        for (long j = 0; j < n; j++) {\n            mat[i][j].resize(n * n + 1);\n        }\n    }\n    // initialise the matrix with -1\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++) {\n            for (long v = 0; v <= n * n; v++) {\n                mat[i][j][v] = -1;\n            }\n        }\n    }\n    // using the matrix, do a simple dynamic programming approach\n    // visit all the cells in the grid and find the minimum path of length k\n    // from them\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++) {\n            // find the value of the cell at i, j\n            long val = grid[i][j];\n            // check whether we can start at this cell or not\n            if (k > 0) {\n                // find the index of the current value in the ordered list\n                // of values\n                long index = std::lower_bound(all_vals.begin(), all_vals.end(), val) - all_vals",
        "grade-27": {
            "execution": 0
        },
        "179": "// Implement this placeholder.\n    return {};",
        "grade-179": {
            "execution": 0
        },
        "143": "long n = grid.size();\n    std::vector<std::vector<std::vector<long>>> dp(n, std::vector<std::vector<long>>(n, std::vector<long>(k + 1, INT_MAX)));\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++) {\n            dp[i][j][1] = grid[i][j];\n        }\n    }\n    for (long i = 1; i <= k; i++) {\n        for (long x = 0; x < n; x++) {\n            for (long y = 0; y < n; y++) {\n                for (long d = 0; d < 8; d++) {\n                    long nx = x + \"2101\"[d] - '1';\n                    long ny = y + \"1210\"[d] - '1';\n                    if (nx < 0 || nx >= n || ny < 0 || ny >= n) continue;\n                    if (dp[nx][ny][i - 1] == INT_MAX) continue;\n                    dp[x][y][i] = std::min(dp[x][y][i], dp[nx][ny][i - 1] * 10 + grid[x][y]);\n                }\n            }\n        }\n    }\n    std::vector<long> ans;\n    for (long x = 0; x < n; x++) {\n        for (long y = 0; y < n; y++) {\n            if (dp[x][y][k] == INT_MAX) continue;\n            if (ans.empty() || dp[x][y][k] < ans[0]) {\n                ans.clear();\n                long cur = dp[x][y][k];\n                for (long i = k; i >= 1; i--) {\n                    ans.push_back(cur % 10);\n                    cur /= 10;\n                }\n            }\n        }\n    }\n    return ans;",
        "grade-143": {
            "execution": 0
        },
        "23": "int n = grid.size();\n  int m = grid[0].size();\n  struct Node{\n    int i, j, l;\n    Node(int i, int j, int l): i(i), j(j), l(l) {}\n    bool operator<(const Node& other) const {\n      if (l != other.l) return l < other.l;\n      if (i != other.i) return i < other.i;\n      return j < other.j;\n    }\n  };\n  std::vector<std::vector<std::vector<std::pair<int, int>>>> prev(n, std::vector<std::vector<std::pair<int, int>>>(m, std::vector<std::pair<int, int>>(k + 1, {-1, -1})));\n  std::vector<std::vector<std::vector<long>>> dist(n, std::vector<std::vector<long>>(m, std::vector<long>(k + 1, INT_MAX)));\n  std::vector<std::vector<std::vector<long>>> max(n, std::vector<std::vector<long>>(m, std::vector<long>(k + 1, INT_MIN)));\n  std::vector<std::vector<bool>> visited(n, std::vector<bool>(m, false));\n  int dir[2][4] = {{-1, 0, 1, 0}, {0, 1, 0, -1}};\n  std::priority_queue<Node> q;\n  for (int i = 0; i < n; ++i) {\n    for (int j = 0; j < m; ++j) {\n      q.push(Node(i, j, 1));\n      dist[i][j][1] = grid[i][j];\n      max[i][j][1] = grid[i][j];\n    }\n  }\n  while (!q.empty()) {\n    Node cur = q.top();\n    q.pop();\n    if (cur.l > k) break;\n    if (visited[cur.i][cur.j]) continue;\n    visited[cur.i][cur.j] =",
        "grade-23": {
            "execution": 0
        },
        "155": "int m = grid.size();\n    int n = grid[0].size();\n    struct State {\n        int x, y, k;\n        State(int x, int y, int k) : x(x), y(y), k(k) {}\n        bool operator<(const State& other) const {\n            if (k != other.k) return k < other.k;\n            else if (x != other.x) return x < other.x;\n            else return y < other.y;\n        }\n    };\n    State start(0, 0, k);\n    std::vector<std::vector<std::vector<bool>>> visited(m, std::vector<std::vector<bool>>(n, std::vector<bool>(k+1, false)));\n    std::vector<std::vector<std::vector<std::vector<long>>>> prev(m, std::vector<std::vector<std::vector<long>>>(n, std::vector<std::vector<long>>(k+1, std::vector<long>())));\n    std::vector<long> ans;\n    std::vector<std::vector<long>> directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n    std::queue<State> q;\n    q.push(start);\n    visited[0][0][k] = true;\n    while (!q.empty()) {\n        State cur = q.front();\n        q.pop();\n        int cur_x = cur.x;\n        int cur_y = cur.y;\n        int cur_k = cur.k;\n        std::vector<long> cur_ans = prev[cur_x][cur_y][cur_k];\n        if (cur_k == 0) {\n            ans = cur_ans;\n            break;\n        }\n        for (int i = 0; i < directions.size(); i++) {\n            int new_x = cur_x + directions[i][0];\n            int new_y = cur_y + directions[i][1];\n            if (new_x < 0 || new_x >= m || new_y < 0 || new_y >=",
        "grade-155": {
            "execution": 0
        },
        "111": "std::vector<long> ans = {};\n    // your code here\n    long m = grid.size();\n    if(m == 0){\n        return ans;\n    }\n    long n = grid[0].size();\n    long grid_size = m*n;\n    if(k > grid_size){\n        return ans;\n    }\n    for(int i = 0; i < m; i++){\n        for(int j = 0; j < n; j++){\n            grid[i][j] -= 1;\n        }\n    }\n    // for(int i = 0; i < m; i++){\n    //     for(int j = 0; j < n; j++){\n    //         cout << grid[i][j] << \" \";\n    //     }\n    //     cout << endl;\n    // }\n    std::vector<long> grid_nums = {};\n    // std::vector<std::vector<long>> paths = {};\n    for(int i = 0; i < m; i++){\n        for(int j = 0; j < n; j++){\n            grid_nums.push_back(grid[i][j]);\n        }\n    }\n    // std::vector<long> path = {};\n    // for(int i = 0; i < grid_size; i++){\n    //     path.push_back(grid_nums[i]);\n    //     if(path.size() == k){\n    //         paths.push_back(path);\n    //         path.clear();\n    //     }\n    // }\n    // std::sort(paths.begin(), paths.end());\n    // for(int i = 0; i < paths.size(); i++){\n    //     for(int j = 0; j < paths[i].size(); j++){\n    //         cout << paths[i][j] << \" \";\n    //     }\n    //     cout << endl;\n    // }\n    // cout << paths.size() << endl;\n    std::vector<long> perm = {};\n    // cout << \"grid_nums: \";\n    // for",
        "grade-111": {
            "execution": 0
        },
        "8": "int n = grid.size();\n  // dp[i][j][m] is the minimum path from cell (i, j) to a cell (x, y)\n  // that the minimum length is m, so it can go through at most m cells.\n  std::vector<std::vector<std::vector<long>>> dp(n, std::vector<std::vector<long>>(n, std::vector<long>(k + 1, -1)));\n  // keep track of the previous cell in the optimal path\n  std::vector<std::vector<std::vector<std::pair<int, int>>>> prev(n, std::vector<std::vector<std::pair<int, int>>>(n, std::vector<std::pair<int, int>>(k + 1, {-1, -1})));\n  // the base case:\n  // the minimum path of 1 step is the grid itself\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < n; j++) {\n      dp[i][j][1] = grid[i][j];\n    }\n  }\n  for (int m = 2; m <= k; m++) {\n    for (int i = 0; i < n; i++) {\n      for (int j = 0; j < n; j++) {\n        std::vector<long> adjacent_min = {-1, -1, -1, -1};\n        if (i > 0) {\n          adjacent_min[0] = dp[i - 1][j][m - 1];\n        }\n        if (i < n - 1) {\n          adjacent_min[1] = dp[i + 1][j][m - 1];\n        }\n        if (j > 0) {\n          adjacent_min[2] = dp[i][j - 1][m - 1];\n        }\n        if (j < n - 1) {\n          adjacent_min[3] = dp[i][j + 1][m - 1];\n        }\n        long min_value = -1;\n        int min_index = -1;\n        for (int x = 0; x <",
        "grade-8": {
            "execution": 0
        },
        "7": "assert(k >= 1);\n  assert(grid.size() >= 2);\n  assert(grid[0].size() >= 2);\n  // We have a grid.\n  int n = grid.size();\n  std::vector<std::vector<long>> dist(n, std::vector<long>(n, 1000000000));\n  std::vector<std::vector<std::vector<long>>> from(n, std::vector<std::vector<long>>(n, std::vector<long>(n * n + 1, -1)));\n  dist[0][0] = 0;\n  for (int s = 0; s < k; ++s) {\n    std::vector<std::vector<long>> ndist(n, std::vector<long>(n, 1000000000));\n    std::vector<std::vector<std::vector<long>>> nfrom(n, std::vector<std::vector<long>>(n, std::vector<long>(n * n + 1, -1)));\n    for (int i = 0; i < n; ++i) {\n      for (int j = 0; j < n; ++j) {\n        if (dist[i][j] == 1000000000) continue;\n        for (int di = -1; di <= 1; ++di) {\n          for (int dj = -1; dj <= 1; ++dj) {\n            if (abs(di) + abs(dj) != 1) continue;\n            int ni = i + di;\n            int nj = j + dj;\n            if (ni < 0 || ni >= n || nj < 0 || nj >= n) continue;\n            long cd = dist[i][j] + grid[ni][nj];\n            if (cd < ndist[ni][nj]) {\n              ndist[ni][nj] = cd;\n              nfrom[ni][nj] = from[i][j];\n              nfrom[ni][nj][grid[ni][nj]] = s;\n            }\n          }\n        }\n      }\n    }\n    dist = ndist;\n    from = nfrom;\n  }\n  std::vector<long> res;\n  int i = n - 1",
        "grade-7": {
            "execution": 0
        },
        "24": "// Implement your solution here\n\t// std::cout << grid.size() << \" \" << grid[0].size() << std::endl;\n\tstd::vector<long> res;\n\tint n = grid.size();\n\tif (k == 1) {\n\t\tres.push_back(grid[0][0]);\n\t\treturn res;\n\t}\n\t// std::vector<std::vector<long>> dp(n, std::vector<long>(n, INT_MAX));\n\t// for (int i = 0; i < n; i++) {\n\t// \tfor (int j = 0; j < n; j++) {\n\t// \t\tif (i == 0 and j == 0) {\n\t// \t\t\tdp[i][j] = grid[i][j];\n\t// \t\t}\n\t// \t\telse if (i == 0) {\n\t// \t\t\tdp[i][j] = grid[i][j] + dp[i][j - 1];\n\t// \t\t}\n\t// \t\telse if (j == 0) {\n\t// \t\t\tdp[i][j] = grid[i][j] + dp[i - 1][j];\n\t// \t\t}\n\t// \t\telse {\n\t// \t\t\tdp[i][j] = grid[i][j] + std::min(dp[i - 1][j], dp[i][j - 1]);\n\t// \t\t}\n\t// \t}\n\t// }\n\tint i = 0, j = 0;\n\tfor (int t = 0; t < k; t++) {\n\t\tres.push_back(grid[i][j]);\n\t\tif (i == n - 1 and j == n - 1) {\n\t\t\tbreak;\n\t\t}\n\t\telse if (i == n - 1) {\n\t\t\tj++;\n\t\t}\n\t\telse if (j == n - 1) {\n\t\t\ti++;\n\t\t}\n\t\telse {\n\t\t\t// if (dp[i + 1][j] <= dp[i][j + 1])",
        "grade-24": {
            "execution": 0
        },
        "56": "std::vector<long> values;\n    if (k == 0) {\n        return values;\n    }\n    std::vector<std::vector<long>> visited(grid.size(), std::vector<long>(grid[0].size(), 0));\n    std::priority_queue<std::vector<long>, std::vector<std::vector<long>>, std::greater<std::vector<long>>> pq;\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[0].size(); j++) {\n            pq.push({{grid[i][j], 0, i, j}});\n        }\n    }\n    std::vector<long> top;\n    std::vector<long> min_path;\n    long min_path_cost = INT_MAX;\n    while (!pq.empty()) {\n        top = pq.top();\n        pq.pop();\n        long value = top[0];\n        long cost = top[1];\n        long i = top[2];\n        long j = top[3];\n        if (visited[i][j] == 0) {\n            visited[i][j] = 1;\n            cost++;\n            if (cost == k) {\n                if (min_path_cost > value) {\n                    min_path_cost = value;\n                    min_path = {value};\n                }\n            } else {\n                if (i - 1 >= 0 && grid[i - 1][j] < value) {\n                    pq.push({{grid[i - 1][j], cost, i - 1, j}});\n                }\n                if (i + 1 < grid.size() && grid[i + 1][j] < value) {\n                    pq.push({{grid[i + 1][j], cost, i + 1, j}});\n                }\n                if (j - 1 >= 0 && grid[i][j - 1] < value) {\n                    pq.push({{grid[i][j - 1], cost, i, j - 1}});\n                }\n                if (j + 1 < grid[0].size() && grid[i][j",
        "grade-56": {
            "execution": 0
        },
        "60": "std::vector<long> path;\n    // For all k, we need to start at the 1.\n    path.push_back(1);\n    if (k == 1) {\n        return path;\n    }\n    for (int i = 0; i < k - 1; i++) {\n        // Find the position of the last value in the path\n        int row = 0;\n        int col = 0;\n        for (int r = 0; r < grid.size(); r++) {\n            for (int c = 0; c < grid[0].size(); c++) {\n                if (grid[r][c] == path.back()) {\n                    row = r;\n                    col = c;\n                }\n            }\n        }\n        // Pick a neighbor to go to.\n        if (row - 1 >= 0 && grid[row - 1][col] == grid[row][col] + 1) {\n            path.push_back(grid[row - 1][col]);\n        } else if (row + 1 < grid.size() && grid[row + 1][col] == grid[row][col] + 1) {\n            path.push_back(grid[row + 1][col]);\n        } else if (col - 1 >= 0 && grid[row][col - 1] == grid[row][col] + 1) {\n            path.push_back(grid[row][col - 1]);\n        } else if (col + 1 < grid[0].size() && grid[row][col + 1] == grid[row][col] + 1) {\n            path.push_back(grid[row][col + 1]);\n        }\n    }\n    return path;",
        "grade-60": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n",
        "snippet": [
            "    vector<int> out={};\n    vector<int> has1={};\n    vector<int> has2={};\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;\n        if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())\n        {\n\n            has2.push_back(numbers[i]);\n        }\n        else has1.push_back(numbers[i]);\n    }\n    for (int i=0;i<numbers.size();i++)\n    if (find(has2.begin(),has2.end(),numbers[i])==has2.end())\n        out.push_back(numbers[i]);\n    return out;\n\n\n}\n"
        ],
        "simplified": "From a list of integers, remove all elements that occur more than once. Keep order of elements left the same as in the input.",
        "task_id": "26",
        "164": "// your code goes here\n  std::unordered_map<long, int> umap;\n  std::vector<long>::iterator it;\n  for(it = numbers.begin(); it != numbers.end(); it++) {\n    umap[*it]++;\n  }\n  std::vector<long> ans;\n  for(it = numbers.begin(); it != numbers.end(); it++) {\n    if(umap[*it] == 1)\n      ans.push_back(*it);\n  }\n  return ans;",
        "grade-164": {
            "execution": 1
        },
        "28": "std::vector<long> ans;\n  std::unordered_set<long> unique;\n  for (auto i : numbers) {\n    if (unique.find(i) == unique.end()) {\n      unique.insert(i);\n      ans.push_back(i);\n    }\n  }\n  return ans;",
        "grade-28": {
            "execution": 0
        },
        "6": "std::vector<long> result;\n    std::unordered_set<long> numbers_set;\n    for (auto& n : numbers) {\n        if (numbers_set.find(n) == numbers_set.end()) {\n            numbers_set.insert(n);\n            result.push_back(n);\n        }\n    }\n    return result;",
        "grade-6": {
            "execution": 0
        },
        "190": "std::vector<long> result;\n  std::unordered_set<long> seen;\n  for (auto num : numbers) {\n    if (seen.find(num) == seen.end()) {\n      result.push_back(num);\n      seen.insert(num);\n    }\n  }\n  return result;",
        "grade-190": {
            "execution": 0
        },
        "70": "std::vector<long> result;\n    std::set<long> uniques;\n    for (long n : numbers) {\n        if (uniques.find(n) == uniques.end()) {\n            uniques.insert(n);\n            result.push_back(n);\n        }\n    }\n    return result;",
        "grade-70": {
            "execution": 0
        },
        "62": "if (numbers.size() == 0) return {};\n    std::vector<long> unique{numbers[0]};\n    for (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i] != numbers[i-1]) unique.push_back(numbers[i]);\n    }\n    return unique;",
        "grade-62": {
            "execution": 0
        },
        "57": "std::vector<long> answer;\n    std::unordered_set<long> used;\n    for (int i = 0; i < numbers.size(); i++) {\n        if (used.find(numbers[i]) == used.end()) {\n            answer.push_back(numbers[i]);\n            used.insert(numbers[i]);\n        }\n    }\n    return answer;",
        "grade-57": {
            "execution": 0
        },
        "35": "std::vector<long> uniques;\n    std::set<long> set;\n    for (long number : numbers) {\n        if (set.find(number) == set.end()) {\n            uniques.push_back(number);\n            set.insert(number);\n        }\n    }\n    return uniques;",
        "grade-35": {
            "execution": 0
        },
        "189": "std::vector<long> answer;\n    std::unordered_set<long> numbers_set;\n    std::unordered_set<long> duplicates;\n    for (long number : numbers) {\n        if (numbers_set.find(number) == numbers_set.end()) {\n            numbers_set.insert(number);\n        } else {\n            duplicates.insert(number);\n        }\n    }\n    for (long number : numbers) {\n        if (duplicates.find(number) == duplicates.end()) {\n            answer.push_back(number);\n        }\n    }\n    return answer;",
        "grade-189": {
            "execution": 1
        },
        "26": "std::unordered_set<long> seen;\n\tstd::vector<long> ret;\n\tfor (auto n : numbers) {\n\t\tif (seen.find(n) == seen.end()) {\n\t\t\tret.push_back(n);\n\t\t\tseen.insert(n);\n\t\t}\n\t}\n\treturn ret;",
        "grade-26": {
            "execution": 0
        },
        "174": "std::vector<long> dups{};\n    int i = 0;\n    while (i < numbers.size()) {\n        int j = i + 1;\n        while (j < numbers.size()) {\n            if (numbers[i] == numbers[j]) {\n                dups.push_back(numbers[i]);\n                numbers.erase(numbers.begin() + j);\n            } else {\n                j++;\n            }\n        }\n        i++;\n    }\n    std::vector<long> result{};\n    std::set<long> u_dups(dups.begin(), dups.end());\n    for (int i = 0; i < numbers.size(); i++) {\n        if (u_dups.find(numbers[i]) == u_dups.end()) {\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;",
        "grade-174": {
            "execution": 1
        },
        "139": "std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        bool repeated = false;\n        for (int j = 0; j < result.size(); j++) {\n            if (numbers[i] == result[j]) repeated = true;\n        }\n        if (!repeated) result.push_back(numbers[i]);\n    }\n    return result;",
        "grade-139": {
            "execution": 0
        },
        "22": "if (numbers.size() <= 1)\n\t\treturn numbers;\n\tsort(numbers.begin(), numbers.end());\n\tfor (int i = 0; i < numbers.size() - 1; i++) {\n\t\tif (numbers[i] == numbers[i + 1]) {\n\t\t\tnumbers.erase(numbers.begin() + i);\n\t\t\ti--;\n\t\t}\n\t}\n\treturn numbers;",
        "grade-22": {
            "execution": 0
        },
        "152": "if (numbers.size() == 0) return numbers;\n    std::vector<long> result;\n    for (long i = 0; i < numbers.size(); i++) {\n        bool found = false;\n        for (long j = 0; j < result.size(); j++) {\n            if (numbers[i] == result[j]) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;",
        "grade-152": {
            "execution": 0
        },
        "108": "std::vector<long>::iterator it;\n    // std::sort(numbers.begin(), numbers.end());\n    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        if (std::find(result.begin(), result.end(), numbers[i]) == result.end()) {\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;",
        "grade-108": {
            "execution": 0
        },
        "8": "std::vector<long>::iterator it;\n  std::vector<long> result;\n  std::vector<long>::iterator it1;\n  for (it = numbers.begin(); it != numbers.end(); it++) {\n    if (find(result.begin(), result.end(), *it) == result.end()) {\n      result.push_back(*it);\n    }\n  }\n  return result;",
        "grade-8": {
            "execution": 0
        },
        "7": "std::vector<long> result;\n    std::set<long> set;\n    for (int i = 0; i < numbers.size(); i++) {\n        if (set.count(numbers[i]) == 0) {\n            set.insert(numbers[i]);\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;",
        "grade-7": {
            "execution": 0
        },
        "23": "std::vector<long> res;\n    long len = numbers.size();\n    std::map<long, int> map;\n    for (long i = 0; i < len; i++) {\n        if (map.find(numbers[i]) == map.end()) {\n            map[numbers[i]] = 1;\n        } else {\n            map[numbers[i]]++;\n        }\n    }\n    for (long i = 0; i < len; i++) {\n        if (map[numbers[i]] == 1) {\n            res.push_back(numbers[i]);\n        }\n    }\n    return res;",
        "grade-23": {
            "execution": 1
        },
        "55": "std::sort(numbers.begin(), numbers.end());\n    std::vector<long> result;\n    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;",
        "grade-55": {
            "execution": 0
        },
        "59": "// use a hashmap to keep track of which elements were encountered.\n  std::unordered_map<long, bool> encountered_elements;\n  std::vector<long> solution;\n  for (long n : numbers) {\n    // if the value has been encountered in the hashmap, don't include it in\n    // solution.\n    if (encountered_elements.find(n) == encountered_elements.end()) {\n      encountered_elements[n] = true;\n      solution.push_back(n);\n    }\n  }\n  return solution;",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nstd::vector<std::string> odd_count(std::vector<std::string> lst) {\n",
        "snippet": [
            "    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n        {\n            int sum=0;\n            for (int j=0;j<lst[i].length();j++)\n                if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)\n                sum+=1;\n            string s=\"the number of odd elements in the string i of the input.\";\n            string s2=\"\";\n            for (int j=0;j<s.length();j++)\n                if (s[j]=='i') s2=s2+to_string(sum);\n                else s2=s2+s[j];\n            out.push_back(s2);\n        }\n    return out;\n}\n"
        ],
        "simplified": "Given a list of strings, where each string consists of only digits, return a list. Each element i of the output should be \"the number of odd elements in the string i of the input.\" where all the i's should be replaced by the number of odd digits in the i'th string of the input.",
        "task_id": "113",
        "163": "int n = lst.size();\n  std::vector<std::string> ans(n);\n  for (int i = 0; i < n; i++) {\n    std::string str = lst[i];\n    int c = 0;\n    for (int j = 0; j < str.size(); j++) {\n      if ((str[j] - '0') % 2 == 1) {\n        c++;\n      }\n    }\n    std::string str1 = \"the number of odd elements \";\n    std::stringstream ss;\n    ss << c;\n    std::string str2 = ss.str();\n    str1 += str2;\n    str1 += \"n the str\";\n    str1 += str2;\n    str1 += \"ng \";\n    str1 += str2;\n    str1 += \" of the \";\n    str1 += str2;\n    str1 += \"nput.\";\n    ans[i] = str1;\n  }\n  return ans;",
        "grade-163": {
            "execution": 1
        },
        "28": "// your code here\n    std::vector<std::string> result;\n    int count;\n    std::string word;\n    for(int i = 0; i < lst.size(); i++){\n        count = 0;\n        word = lst[i];\n        for(int j = 0; j < word.size(); j++){\n            if(word[j] % 2 != 0){\n                count++;\n            }\n        }\n        word = \"the number of odd elements \" + std::to_string(count) + \"n the str\" + std::to_string(count) + \"ng \" + std::to_string(count) + \" of the \" + std::to_string(count) + \"nput.\";\n        result.push_back(word);\n    }\n    return result;",
        "grade-28": {
            "execution": 1
        },
        "6": "std::vector<std::string> ans;\n  std::string temp;\n  std::string curr, prev;\n  int counter = 0;\n  for (std::string curr : lst) {\n    temp = \"\";\n    for (char c : curr) {\n      if ((c - '0') % 2 == 1) {\n        counter++;\n      }\n    }\n    for (char c : curr) {\n      if (c == '1') {\n        temp += std::to_string(counter);\n      } else if (c == '3') {\n        temp += std::to_string(counter);\n      } else if (c == '5') {\n        temp += std::to_string(counter);\n      } else if (c == '7') {\n        temp += std::to_string(counter);\n      } else if (c == '9') {\n        temp += std::to_string(counter);\n      } else {\n        temp += c;\n      }\n    }\n    ans.push_back(temp);\n    counter = 0;\n  }\n  return ans;",
        "grade-6": {
            "execution": 0
        },
        "189": "std::vector<std::string> result;\n    for (auto i = lst.begin(); i != lst.end(); i++) {\n        int odd_counter = 0;\n        std::string word = *i;\n        for (auto j = word.begin(); j != word.end(); j++) {\n            if ((*j) % 2 != 0) {\n                odd_counter++;\n            }\n        }\n        std::string answer = \"the number of odd elements \" + std::to_string(odd_counter) + \"n the str\" + std::to_string(odd_counter) + \"ng \" + std::to_string(odd_counter) + \" of the \" + std::to_string(odd_counter) + \"nput.\";\n        result.push_back(answer);\n    }\n    return result;",
        "grade-189": {
            "execution": 1
        },
        "70": "std::vector<std::string> temp;\n    std::string t;\n    int count = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        t = lst[i];\n        count = 0;\n        for(int j = 0; j < t.size(); j++) {\n            if(int(t[j]) % 2 != 0) {\n                count++;\n            }\n        }\n        std::cout << count << std::endl;\n        temp.push_back(\"the number of odd elements \" + std::to_string(count) + \"n the str\" + std::to_string(count) + \"ng \" + std::to_string(count) + \" of the \" + std::to_string(count) + \"nput.\");\n    }\n    return temp;",
        "grade-70": {
            "execution": 1
        },
        "62": "int ind, odd_counter;\n    std::vector<std::string> result;\n    std::string temp;\n    for (int i = 0; i < lst.size(); i++) {\n        temp = \"the number of odd elements \";\n        odd_counter = 0;\n        for (int j = 0; j < lst[i].size(); j++) {\n            if (int(lst[i][j]) % 2 != 0)\n                odd_counter++;\n        }\n        temp += std::to_string(odd_counter) + \"n the str\" + std::to_string(odd_counter) + \"ng \" + std::to_string(odd_counter) + \" of the \" + std::to_string(odd_counter) + \"nput.\";\n        result.push_back(temp);\n    }\n    return result;",
        "grade-62": {
            "execution": 1
        },
        "57": "// Do your magic here\n    std::vector<std::string> res;\n    // std::vector<int> res;\n    std::vector<int> temp;\n    int count = 0;\n    int pos;\n    int length;\n    for (int i = 0; i < lst.size(); i++) {\n        pos = 0;\n        length = lst[i].length();\n        count = 0;\n        while (pos < length) {\n            if ((lst[i][pos] - '0') % 2 == 1) {\n                count++;\n            }\n            pos++;\n        }\n        // temp.push_back(count);\n        res.push_back(\"the number of odd elements \" + std::to_string(count) + \"n the str\" + std::to_string(count) + \"ng \" + std::to_string(count) + \" of the \" + std::to_string(count) + \"nput.\");\n    }\n    return res;",
        "grade-57": {
            "execution": 1
        },
        "35": "std::vector<std::string> ans;\n    for (auto i : lst) {\n        int cnt = 0;\n        for (auto j : i)\n            if ((j - '0') % 2)\n                cnt++;\n        ans.push_back(\"the number of odd elements \" + std::to_string(cnt) + \"n the str\" + std::to_string(cnt) + \"ng \" + std::to_string(cnt) + \" of the \" + std::to_string(cnt) + \"nput.\");\n    }\n    return ans;",
        "grade-35": {
            "execution": 1
        },
        "188": "std::vector<std::string> result;\n    int digit_count = 0;\n    std::string str;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j]%2!=0) {\n                digit_count++;\n            }\n        }\n        str = \"the number of odd elements \" + std::to_string(digit_count) + \"n the str\"\n        + std::to_string(digit_count) + \"ng \" + std::to_string(digit_count) + \" of the \"\n        + std::to_string(digit_count) + \"nput.\";\n        result.push_back(str);\n        digit_count = 0;\n    }\n    return result;",
        "grade-188": {
            "execution": 1
        },
        "26": "std::vector<std::string> result;\n  for (auto &num : lst) {\n    int count = 0;\n    for (auto &digit : num) {\n      if (digit % 2 == 1) {\n        count++;\n      }\n    }\n    std::stringstream ss;\n    ss << \"the number of odd elements \" << count << \"n the str\" << count\n       << \"ng \" << count << \" of the \" << count << \"nput.\";\n    result.push_back(ss.str());\n  }\n  return result;",
        "grade-26": {
            "execution": 1
        },
        "173": "for (int i = 0; i < lst.size(); i++) {\n        int cnt = 0;\n        for (int j = 0; j < lst[i].size(); j++) {\n            cnt += lst[i][j] % 2;\n        }\n        std::cout << lst[i] << std::endl;\n        std::cout << cnt << std::endl;\n        lst[i] = \"the number of odd elements \" + std::to_string(cnt) + \"n the str\" + std::to_string(cnt) + \"ng \" + std::to_string(cnt) + \" of the \" + std::to_string(cnt) + \"nput.\";\n    }\n    return lst;",
        "grade-173": {
            "execution": 1
        },
        "139": "std::vector<std::string> new_lst;\n    for (int i = 0; i < lst.size(); i++) {\n        int counter = 0;\n        for (int j = 0; j < lst[i].size(); j++) {\n            if ((lst[i][j] - '0') % 2 != 0) {\n                counter++;\n            }\n        }\n        new_lst.push_back(\"the number of odd elements \" + std::to_string(counter) + \"n the str\" + std::to_string(i + 1) + \"ng \" + std::to_string(i + 1) + \" of the \" + std::to_string(i + 1) + \"nput.\");\n    }\n    return new_lst;",
        "grade-139": {
            "execution": 0
        },
        "22": "std::vector<std::string> result;\n    for (auto str : lst) {\n        int odd_count = 0;\n        for (auto c : str) {\n            if (c % 2 != 0) {\n                odd_count++;\n            }\n        }\n        result.push_back(\"the number of odd elements \" + std::to_string(odd_count) + \"n the str\" + std::to_string(odd_count) + \"ng \" + std::to_string(odd_count) + \" of the \" + std::to_string(odd_count) + \"nput.\");\n    }\n    return result;",
        "grade-22": {
            "execution": 1
        },
        "151": "std::vector<std::string> result;\n\tfor (auto i : lst) {\n\t\tint nums = 0;\n\t\tfor (int j = 0; j < i.size(); j++) {\n\t\t\tif (i[j] % 2 == 1)\n\t\t\t\tnums++;\n\t\t}\n\t\tstd::string temp = \"the number of odd elements \" + std::to_string(nums) + \"n the str\" + std::to_string(nums) + \"ng \" + std::to_string(nums) + \" of the \" + std::to_string(nums) + \"nput.\";\n\t\tresult.push_back(temp);\n\t}\n\treturn result;",
        "grade-151": {
            "execution": 1
        },
        "108": "std::vector<std::string> result;\n  for (auto &s : lst) {\n    std::string res = \"the number of odd elements \";\n    int count = 0;\n    for (auto &c : s) {\n      if (c == '1' || c == '3' || c == '5' || c == '7' || c == '9') {\n        count++;\n      }\n    }\n    res += std::to_string(count) + \"n the str\" + std::to_string(count) +\n           \"ng \" + std::to_string(count) + \" of the \" + std::to_string(count) +\n           \"nput.\";\n    result.push_back(res);\n  }\n  return result;",
        "grade-108": {
            "execution": 1
        },
        "8": "std::vector<std::string> ret;\n        int count = 0;\n        for (int i = 0; i < lst.size(); i++) {\n                for (int j = 0; j < lst[i].size(); j++) {\n                        if (lst[i][j] % 2 != 0) {\n                                count++;\n                        }\n                }\n                std::string newstr = \"the number of odd elements \" + std::to_string(count) + \"n the str\" + std::to_string(count) + \"ng \" + std::to_string(count) + \" of the \" + std::to_string(count) + \"nput.\";\n                ret.push_back(newstr);\n                count = 0;\n        }\n        return ret;",
        "grade-8": {
            "execution": 1
        },
        "7": "std::vector<std::string> res;\n    for (int i = 0; i < lst.size(); i++) {\n        int cnt = 0;\n        for (int j = 0; j < lst[i].size(); j++) {\n            if ((lst[i][j] - '0') & 1) {\n                cnt++;\n            }\n        }\n        std::string foo = \"the number of odd elements \" + std::to_string(cnt) + \"n the str\" + std::to_string(cnt) + \"ng \" + std::to_string(cnt) + \" of the \" + std::to_string(cnt) + \"nput.\";\n        res.push_back(foo);\n    }\n    return res;",
        "grade-7": {
            "execution": 1
        },
        "23": "std::vector<std::string> rv;\n\tfor(std::string s : lst) {\n\t    int sum = 0;\n\t    for(char c : s) {\n\t        sum += (c-'0')%2;\n\t    }\n\t    rv.push_back(\"the number of odd elements \" + std::to_string(sum) + \"n the str\" + std::to_string(sum) + \"ng \" + std::to_string(sum) + \" of the \" + std::to_string(sum) + \"nput.\");\n\t}\n\treturn rv;",
        "grade-23": {
            "execution": 1
        },
        "55": "for (int i = 0; i < lst.size(); i++) {\n    int counter = 0;\n    for (int j = 0; j < lst[i].size(); j++) {\n      int char_to_int = lst[i][j] - '0';\n      if (char_to_int % 2 != 0) {\n        counter++;\n      }\n    }\n    lst[i] = \"the number of odd elements \" + std::to_string(counter) +\n    \"n the str\" + std::to_string(counter) + \"ng \" + std::to_string(counter) +\n    \" of the \" + std::to_string(counter) + \"nput.\";\n  }\n  return lst;",
        "grade-55": {
            "execution": 1
        },
        "59": "std::vector<std::string> result;\n  for (auto str : lst) {\n    int count = 0;\n    for (auto ch : str) {\n      if (isdigit(ch)) {\n        if ((ch - '0') & 1) {\n          count++;\n        }\n      }\n    }\n    result.push_back(\"the number of odd elements \" + std::to_string(count) +\n                     \"n the str\" + std::to_string(count) + \"ng \" +\n                     std::to_string(count) + \" of the \" + std::to_string(count) +\n                     \"nput.\");\n  }\n  return result;",
        "grade-59": {
            "execution": 1
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nlong add(long x, long y) {\n",
        "snippet": [
            "    return x+y;\n}\n"
        ],
        "simplified": "Add two numbers x and y",
        "task_id": "53",
        "137": "assert (x >=0 && y >= 0);\n\tif (x==0) return y;\n\tif (y==0) return x;\n\tint carry = (x & y) << 1;\n\tint sum = x ^ y;\n\treturn add(sum, carry);",
        "grade-137": {
            "execution": 1
        },
        "16": "if (y == 0) {\n\t\treturn x;\n\t}\n\tif (x == 0) {\n\t\treturn y;\n\t}\n\treturn add(x ^ y, (x & y) << 1);",
        "grade-16": {
            "execution": 1
        },
        "3": "//TODO: Add your code here\n\treturn x+y;",
        "grade-3": {
            "execution": 1
        },
        "163": "// Your code here\n    while(y!=0){\n        long sum = x^y;\n        long carry = (x&y)<<1;\n        x = sum;\n        y = carry;\n    }\n    return x;",
        "grade-163": {
            "execution": 1
        },
        "46": "long result = x + y;\n\treturn result;",
        "grade-46": {
            "execution": 1
        },
        "39": "if (y == 0) {\n\t\treturn x;\n\t}\n\tlong sum = x ^ y;\n\tlong carry = (x & y) << 1;\n\treturn add(sum, carry);",
        "grade-39": {
            "execution": 1
        },
        "34": "long carry;\n  while (y != 0) {\n    carry = x & y;\n    x = x ^ y;\n    y = carry << 1;\n  }\n  return x;",
        "grade-34": {
            "execution": 1
        },
        "20": "long result = x + y;\n  return result;",
        "grade-20": {
            "execution": 1
        },
        "15": "// TODO\n    if(x<0 && y<0)\n    {\n        return -(add(-x,-y));\n    }\n    long result=0;\n    long carry=0;\n    long i;\n    for(i=0;i<64;i++)\n    {\n        long m=x&1;\n        long n=y&1;\n        x=x>>1;\n        y=y>>1;\n        long p=m&n;\n        long q=m^n;\n        long r=carry&q;\n        carry=p|r;\n        q=q^r;\n        result=result|(q<<i);\n    }\n    return result;",
        "grade-15": {
            "execution": 0
        },
        "152": "// >>> YOUR CODE HERE <<<\n    if(y==0)\n    \treturn x;\n    return add(x^y,(x&y)<<1);",
        "grade-152": {
            "execution": 1
        },
        "111": "assert(sizeof(long) == 8);\n\treturn x + y;",
        "grade-111": {
            "execution": 1
        },
        "13": "// Write code here\n    return x+y;",
        "grade-13": {
            "execution": 1
        },
        "128": "// Add x and y\n\treturn x + y;",
        "grade-128": {
            "execution": 1
        },
        "80": "// Write your code here\n\treturn x + y;",
        "grade-80": {
            "execution": 1
        },
        "4": "long res;\n  __asm__(R\"(\n  .intel_syntax noprefix\n  mov eax, %1\n  add eax, %2\n  mov %0, eax\n  )\"\n      : \"=r\"(res)\n      : \"r\"(x), \"r\"(y)\n      : \"eax\"\n      );\n  return res;",
        "grade-4": {
            "execution": 0
        },
        "32": "long ans = x;\n  long carry = y;\n  while (carry != 0) {\n    long t = ans;\n    ans = ans ^ carry;\n    carry = (t & carry) << 1;\n  }\n  return ans;",
        "grade-32": {
            "execution": 1
        },
        "36": "// Implement this!!!\n  // Example: the following adds two numbers.\n  return x + y;",
        "grade-36": {
            "execution": 1
        },
        "99": "// TODO: Write your code here\n\tif (y == 0)\n\t\treturn x;\n\tint sum = x ^ y;\n\tint carry = (x & y) << 1;\n\treturn add(sum, carry);",
        "grade-99": {
            "execution": 1
        },
        "133": "long result = 0;\n\tfor (int i = 0; i < y; i++) {\n\t\tresult += x;\n\t}\n\treturn result;",
        "grade-133": {
            "execution": 0
        },
        "113": "long result = x + y;\n    return result;",
        "grade-113": {
            "execution": 1
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n// ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n// 'catac'\nstd::string make_palindrome(std::string string) {\n",
        "snippet": [
            "   int i;\n   for (i=0;i<str.length();i++)\n   {\n        string rstr=str.substr(i);\n        if (is_palindrome(rstr))\n        {\n            string nstr;\n            nstr=str.substr(0,i);\n            string n2str(nstr.rbegin(),nstr.rend());\n            return str+n2str;\n        }\n   }\n   string n2str(str.rbegin(),str.rend());\n   return str+n2str;\n}\n"
        ],
        "simplified": "Test if given string is a palindrome",
        "task_id": "10",
        "163": "int length = string.length();\n\tstd::string result = string;\n\tfor (int i = length - 1; i >= 0; i--) {\n\t\tstd::string substring = string.substr(i, length - i);\n\t\tstd::string reverse = substring;\n\t\tstd::reverse(reverse.begin(), reverse.end());\n\t\tif (substring == reverse) {\n\t\t\tresult.append(string.substr(0, i));\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;",
        "grade-163": {
            "execution": 0
        },
        "28": "auto palindrome_suffix = longest_palindrome_suffix(string);\n    assert(palindrome_suffix.length() <= string.length());\n    if (palindrome_suffix.length() == string.length()) {\n        return string;\n    }\n    std::string reversed_prefix = string.substr(0, string.length() - palindrome_suffix.length());\n    std::reverse(reversed_prefix.begin(), reversed_prefix.end());\n    return reversed_prefix + string;",
        "grade-28": {
            "execution": 0
        },
        "6": "assert(!string.empty());\n  auto it = string.begin();\n  bool even = true;\n  auto middle = it + string.size() / 2;\n  if(string.size() % 2) {\n    even = false;\n    middle = it + string.size() / 2 + 1;\n  }\n  for(;middle != string.end();++it,++middle) {\n    if(*it != *middle) {\n      if(even) {\n        it = string.begin();\n        middle = it + string.size() / 2;\n      } else {\n        it = string.begin();\n        middle = it + string.size() / 2 + 1;\n      }\n      even = !even;\n    }\n  }\n  std::reverse(string.begin(), it);\n  string.append(string.begin(), it);\n  return string;",
        "grade-6": {
            "execution": 0
        },
        "189": "int k = 0;\n    for (int i = 1; i < string.size(); ++i) {\n        int j = i;\n        while (j > 0 && string[j] == string[i - j]) --j;\n        if (i - j > k) k = i - j;\n    }\n    return string + std::string(string.rbegin(), string.rbegin() + k);",
        "grade-189": {
            "execution": 0
        },
        "70": "// Find the longest palindromic suffix\n    auto const end = std::begin(string);\n    auto const begin = std::prev(std::end(string));\n    auto const last = std::end(string);\n    for (auto it = begin; it != end; --it) {\n        if (std::equal(it, last, std::begin(string))) {\n            // Reverse of the prefix that comes before the palindromic suffix\n            auto prefix_begin = std::next(it);\n            auto prefix_end = last;\n            while (prefix_begin != prefix_end) {\n                std::iter_swap(prefix_begin, std::prev(prefix_end));\n                ++prefix_begin;\n                --prefix_end;\n            }\n            // Append the reverse of the prefix to the end of the string\n            std::copy(std::next(it), last, std::back_inserter(string));\n            return string;\n        }\n    }\n    // The entire string is a palindrome, so we return the original string twice\n    return string + string;",
        "grade-70": {
            "execution": 0
        },
        "62": "// Trivial case.\n    if (string.empty()) {\n        return string;\n    }\n    // Preprocessing.\n    // Prefix function.\n    std::vector<int> pi(string.size());\n    pi[0] = 0;\n    for (int i = 1; i < string.size(); ++i) {\n        int j = pi[i - 1];\n        while (j > 0 && string[i] != string[j]) {\n            j = pi[j - 1];\n        }\n        if (string[i] == string[j]) {\n            ++j;\n        }\n        pi[i] = j;\n    }\n    // Find the longest prefix of the reverse of the string that is also a suffix of the string.\n    std::string reverse_string = string;\n    std::reverse(reverse_string.begin(), reverse_string.end());\n    int longest_prefix = pi[string.size() - 1];\n    // Concatenate the right part of the prefix of the string and the reverse of the left part of the prefix of the string.\n    // This forms a palindrome.\n    return string + reverse_string.substr(longest_prefix);",
        "grade-62": {
            "execution": 0
        },
        "57": "std::vector<int> prefixes;\n\n  for (int index = 0; index < string.size(); ++index) {\n    int next_prefix = prefixes.size() > 0 ? prefixes.back() : 0;\n    while (next_prefix > 0 && string[index] != string[next_prefix]) {\n      next_prefix = prefixes[next_prefix - 1];\n    }\n    if (string[index] == string[next_prefix]) {\n      next_prefix++;\n    }\n    prefixes.push_back(next_prefix);\n  }\n\n  int end_prefix = prefixes.back();\n  std::string reverse = string.substr(end_prefix);\n  std::reverse(reverse.begin(), reverse.end());\n  return string + reverse;",
        "grade-57": {
            "execution": 0
        },
        "35": "// Find the longest palindromic suffix of a string.\n    std::string::iterator it_end_of_suffix =\n        std::find_if(string.begin(), string.end(),\n                     [string](auto c) {\n                         return !std::equal(string.begin(), string.end() - 1,\n                                            string.rbegin() + std::distance(string.begin(), &c));\n                     });\n    // Make string prefix that comes before palindromic suffix.\n    std::string::iterator it_start_of_prefix = string.begin();\n    std::string::iterator it_end_of_prefix = it_end_of_suffix;\n    std::reverse(it_start_of_prefix, it_end_of_prefix);\n    // Append reversed prefix to the end of the string.\n    string.append(it_start_of_prefix, it_end_of_prefix);\n    return string;",
        "grade-35": {
            "execution": 0
        },
        "188": "std::string rev(string.rbegin(), string.rend());\n  std::string s = string + '#' + rev;\n  std::vector<int> f(s.size(), 0);\n  for (size_t i = 1; i < s.size(); ++i) {\n    int j = f[i - 1];\n    while (j > 0 && s[i] != s[j]) {\n      j = f[j - 1];\n    }\n    if (s[i] == s[j]) {\n      ++j;\n    }\n    f[i] = j;\n  }\n  return rev.substr(0, string.size() - f[s.size() - 1]) + string;",
        "grade-188": {
            "execution": 0
        },
        "26": "size_t string_length = string.length();\n    if (string_length == 0) {\n        return string;\n    }\n    // Find the longest palindromic suffix of the string.\n    // Example:\n    //    string = 'cat'\n    //    palindromic_suffix = ''\n    //    longest_palindromic_suffix = 't'\n    //    string = 'catac'\n    //    palindromic_suffix = 'ac'\n    //    longest_palindromic_suffix = 'c'\n    std::string palindromic_suffix;\n    std::string longest_palindromic_suffix;\n    while (palindromic_suffix.length() != string_length) {\n        palindromic_suffix = palindromic_suffix + string[string_length - 1];\n        if (string.length() >= palindromic_suffix.length() * 2 &&\n            string.substr(string.length() - palindromic_suffix.length() * 2, palindromic_suffix.length()) == palindromic_suffix) {\n            longest_palindromic_suffix = palindromic_suffix;\n        }\n        string_length -= 1;\n    }\n    // Find the prefix of the string that comes before the palindromic suffix.\n    // Example:\n    //    string = 'catac'\n    //    prefix = 'ca'\n    //    palindromic_suffix = 'c'\n    //    prefix_without_palindromic_suffix = 'ca'\n    //    string = 'cat'\n    //    prefix = 'ca'\n    //    palindromic_suffix = 't'\n    //    prefix_without_palindromic_suffix = 'c'\n    std::string prefix = string.substr(0, string.length() - longest_palindromic_suffix.length());\n    std::string prefix_without_palindromic_suffix = prefix.substr(0, prefix.length() - longest_palindromic_suffix.length());\n    //",
        "grade-26": {
            "execution": 0
        },
        "173": "assert(std::is_sorted(string.begin(), string.end()));\n  std::string mirror = string;\n  std::reverse(mirror.begin(), mirror.end());\n  std::string longest_palindrome_suffix =\n      *std::max_element(string.begin(), string.end(),\n        [&string, &mirror](char a, char b) {\n        return string.substr(a).compare(mirror.substr(b)) < 0;\n        });\n  return string + mirror.substr(longest_palindrome_suffix);",
        "grade-173": {
            "execution": 0
        },
        "139": "int length = string.length();\n    for (int i = length - 1; i >= 0; i--) {\n        if (string[0] == string[i]) {\n            bool is_palindrome = true;\n            for (int j = 0; j < i; j++) {\n                if (string[j] != string[i - j]) {\n                    is_palindrome = false;\n                    break;\n                }\n            }\n            if (is_palindrome) {\n                std::string result = string;\n                for (int j = length - 1; j >= i; j--) {\n                    result += string[j];\n                }\n                return result;\n            }\n        }\n    }\n    return string;",
        "grade-139": {
            "execution": 0
        },
        "22": "int longest_palindrome_begin_index = 0;\n    int longest_palindrome_length = 0;\n    // For each character index, find the longest palindrome beginning at that\n    // index that is centered on that index.  Note that this loop begins at\n    // index 1, since a string of length 1 is a palindrome.\n    for (int center_index = 1; center_index < string.length(); center_index++) {\n        // Find the palindrome centered on this character.\n        // Note that this loop only iterates if a palindrome with an even\n        // number of characters is found.\n        for (int palindrome_length = 0; center_index - palindrome_length >= 0 && center_index + palindrome_length < string.length(); palindrome_length++) {\n            if (string[center_index - palindrome_length] != string[center_index + palindrome_length]) {\n                break;\n            }\n            if (palindrome_length * 2 + 1 > longest_palindrome_length) {\n                longest_palindrome_begin_index = center_index - palindrome_length;\n                longest_palindrome_length = palindrome_length * 2 + 1;\n            }\n        }\n        // Find the palindrome centered between this character and the next\n        // character.\n        for (int palindrome_length = 0; center_index - palindrome_length >= 0 && center_index + palindrome_length + 1 < string.length(); palindrome_length++) {\n            if (string[center_index - palindrome_length] != string[center_index + palindrome_length + 1]) {\n                break;\n            }\n            if (palindrome_length * 2 + 2 > longest_palindrome_length) {\n                longest_palindrome_begin_index = center_index - palindrome_length;\n                longest_palindrome_length = palindrome_length * 2 + 2;\n            }\n        }\n    }\n    // Construct the shortest palindrome.\n    std::string palindrome;\n    palindrome.reserve(string.length()",
        "grade-22": {
            "execution": 0
        },
        "151": "std::vector<int> z_values = Z(string);\n  int first_position = 0;\n  for (int i = 1; i < z_values.size(); ++i) {\n    if (z_values[i] + i == z_values.size()) {\n      first_position = i;\n      break;\n    }\n  }\n  std::string reversed = Reverse(string.substr(0, first_position));\n  return string + reversed;",
        "grade-151": {
            "execution": 0
        },
        "108": "if (string.empty()) {\n    return string;\n  }\n  std::string rstring(string.rbegin(), string.rend());\n  int i = string.size();\n  while (i && string.substr(0, i) != rstring.substr(string.size() - i)) {\n    --i;\n  }\n  return string + rstring.substr(i);",
        "grade-108": {
            "execution": 1
        },
        "8": "std::string result = string;\n    std::reverse(string.begin(), string.end());\n    std::size_t size = string.size();\n    // Build the prefix of the supplied string.\n    std::string prefix = string.substr(0, size);\n    // Find the maximum postfix that is a palindrome.\n    for (std::size_t i = 0; i < size; ++i) {\n        // Push a character from the prefix to the back of the result string.\n        result.push_back(prefix[i]);\n        // Check if the current postfix is a palindrome.\n        std::string postfix = result.substr(result.size() - i - 1);\n        if (prefix.substr(0, i + 1) == postfix) {\n            // If so, we are done.\n            return result;\n        }\n    }\n    // We get here if string is a palindrome.\n    return result;",
        "grade-8": {
            "execution": 0
        },
        "7": "std::string temp = string;\n  std::reverse(temp.begin(), temp.end());\n  string += temp;\n  // the longest possible palindrome can't be longer than string.size() + 1\n  int const MAX_PALINDROME_LENGTH = string.size() + 1;\n  // dp[i][j] == true if substring string[i..j] is a palindrome\n  std::vector<std::vector<bool>> dp(MAX_PALINDROME_LENGTH, std::vector<bool>(MAX_PALINDROME_LENGTH, false));\n  // substring of length 1 is a palindrome\n  for (int i = 0; i < MAX_PALINDROME_LENGTH; ++i)\n    dp[i][i] = true;\n  // check larger substrings\n  for (int len = 2; len <= MAX_PALINDROME_LENGTH; ++len) {\n    for (int i = 0; i < MAX_PALINDROME_LENGTH - len + 1; ++i) {\n      int j = i + len - 1;\n      if (string[i] == string[j]) {\n        // substring must be a palindrome if its first and last characters are equal\n        // and the substring of length len - 2 (which contains all characters between those two) is a palindrome\n        dp[i][j] = len == 2 || dp[i + 1][j - 1];\n      }\n    }\n  }\n  // find the longest palindromic suffix of string\n  int palindrome_begin = 0;\n  int palindrome_length = 0;\n  for (int i = 0; i < MAX_PALINDROME_LENGTH; ++i) {\n    for (int j = i; j < MAX_PALINDROME_LENGTH; ++j) {\n      if (dp[i][j] && j - i + 1 > palindrome_length) {\n        palindrome_begin = i;\n        palindrome_length = j - i + 1;\n      }\n    }\n  }\n  // reverse a prefix before the pal",
        "grade-7": {
            "execution": 0
        },
        "23": "if (string.empty()) {\n        return \"\";\n    }\n    int n = string.size();\n    std::vector<std::vector<bool>> is_palindrome(n, std::vector<bool>(n, false));\n    // Loop from the beginning to the end of the string.\n    for (int i = 0; i < n; ++i) {\n        // From the i-th character from the beginning to the beginning of the string.\n        for (int j = 0; j <= i; ++j) {\n            // If all the characters are the same.\n            if (string[i] == string[j] && (i - j <= 2 || is_palindrome[i - 1][j + 1])) {\n                is_palindrome[i][j] = true;\n            }\n        }\n    }\n    // Find the longest palindromic suffix.\n    int max_j = 0;\n    int max_i = 0;\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j <= i; ++j) {\n            if (is_palindrome[i][j] && max_i - max_j < i - j) {\n                max_i = i;\n                max_j = j;\n            }\n        }\n    }\n    // Append the prefix and suffix.\n    std::string result = string;\n    for (int i = 0; i < max_j; ++i) {\n        result += string[max_j - i - 1];\n    }\n    return result;",
        "grade-23": {
            "execution": 0
        },
        "55": "size_t prefix_len = 0;\n  size_t suffix_len = 0;\n  for (size_t index = 0; index < string.size(); ++index) {\n    size_t prefix_i = index;\n    size_t suffix_i = string.size() - index - 1;\n    if (string[prefix_i] == string[suffix_i]) {\n      prefix_len = prefix_i + 1;\n      suffix_len = string.size() - suffix_i;\n    } else {\n      break;\n    }\n  }\n  return string + string.substr(prefix_len, string.size() - suffix_len - prefix_len).rbegin();",
        "grade-55": {
            "execution": 0
        },
        "59": "auto reverse_string = string;\n  std::reverse(reverse_string.begin(), reverse_string.end());\n  auto longest_common_suffix = std::string();\n  for (std::size_t i = 0; i < string.size(); ++i) {\n    if (string.substr(i) == reverse_string.substr(0, string.size() - i)) {\n      longest_common_suffix = string.substr(i);\n      break;\n    }\n  }\n  return string + reverse_string.substr(longest_common_suffix.size());",
        "grade-59": {
            "execution": 1
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers, return the sum of squares of the numbers\n// in the list that are odd. Ignore numbers that are negative or not integers.\n// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1, -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0]) == 0  \n// If the input list is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n",
        "snippet": [
            "    long long sum=0;\n    for (int i=0;i<lst.size();i++)\n    if (lst[i]-round(lst[i])<1e-4)\n    if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));\n    return sum;\n}\n"
        ],
        "simplified": "Given a list of numbers, return the sum of squares of the numbers in the list that are odd. Ignore numbers that are negative or not integers. If the input list is empty, return 0.",
        "task_id": "151",
        "164": "",
        "grade-164": {
            "execution": 0
        },
        "28": "long i=0;\n    for(i=0;i<lst.size();i++)\n    {\n        if(lst[i]>0 && lst[i]==(int)lst[i])\n        {\n            if(lst[i]%2==1)\n            {\n                lst[i]=lst[i]*lst[i];\n            }\n            else\n            {\n                lst[i]=0;\n            }\n        }\n        else\n        {\n            lst[i]=0;\n        }\n    }\n    return lst[i];",
        "grade-28": {
            "execution": 0
        },
        "6": "long sum = 0;\n    for(float &i : lst) {\n        if(i < 0) {\n            continue;\n        }\n        long t = (long)i;\n        if(t != i) {\n            continue;\n        }\n        if(t % 2 == 1) {\n            sum += t * t;\n        }\n    }\n    return sum;",
        "grade-6": {
            "execution": 1
        },
        "191": "std::vector<float> result;\n\tlong sum = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (lst[i] > 0 && std::floor(lst[i]) == lst[i]) {\n\t\t\tresult.push_back(lst[i]);\n\t\t}\n\t}\n\tfor (int i = 0; i < result.size(); i++) {\n\t\tif (result[i] % 2 != 0) {\n\t\t\tsum += result[i] * result[i];\n\t\t}\n\t}\n\treturn sum;",
        "grade-191": {
            "execution": 0
        },
        "70": "int len = lst.size();\n  int sum = 0;\n  for(int i = 0; i < len; i++) {\n    if (lst[i] > 0 && lst[i] == int(lst[i])) {\n      if (lst[i] % 2 != 0) {\n        sum += (lst[i] * lst[i]);\n      }\n    }\n  }\n  return sum;",
        "grade-70": {
            "execution": 0
        },
        "62": "int sum=0;\n\tif(lst.size()==0)\n\t\treturn 0;\n\tfor(int i=0;i<lst.size();i++)\n\t{\n\t\tif(lst[i]>0)\n\t\t{\n\t\t\tif(lst[i]-(int)lst[i]!=0)\n\t\t\t\tcontinue;\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(lst[i]%2==0)\n\t\t\t\t\tcontinue;\n\t\t\t\telse\n\t\t\t\t\tsum+=lst[i]*lst[i];\n\t\t\t}\n\t\t}\n\t\telse\n\t\t\tcontinue;\n\t}\n\treturn sum;",
        "grade-62": {
            "execution": 0
        },
        "57": "long sum = 0;\n  for (unsigned i = 0; i < lst.size(); i++) {\n    if (lst[i] < 0) continue;\n    if (std::floor(lst[i]) != lst[i]) continue;\n    if (lst[i] % 2 == 0) continue;\n    sum += lst[i] * lst[i];\n  }\n  return sum;",
        "grade-57": {
            "execution": 0
        },
        "35": "long sum=0;\n\tfor(int i=0;i<lst.size();i++)\n\t{\n\t\tif(fmod(lst[i],2)!=0)\n\t\t\tsum+=(lst[i]*lst[i]);\n\t}\n\treturn sum;",
        "grade-35": {
            "execution": 0
        },
        "190": "long sum = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (lst[i] > 0 && fmod(lst[i], 2) == 1) {\n\t\t\tsum += pow(lst[i], 2);\n\t\t}\n\t}\n\treturn sum;",
        "grade-190": {
            "execution": 1
        },
        "26": "long sum=0;\n\tfor(auto x:lst)\n\t{\n\t\tint a=x;\n\t\tif(a>0 && a%2==1)\n\t\t{\n\t\t\tsum=sum+a*a;\n\t\t}\n\t}\n\treturn sum;",
        "grade-26": {
            "execution": 1
        },
        "174": "long sum = 0;\n    for(auto i: lst){\n        if(i<0)\n            continue;\n        if(i!=i/1)\n            continue;\n        if(i%2==0)\n            continue;\n        sum += i*i;\n    }\n    return sum;",
        "grade-174": {
            "execution": 0
        },
        "140": "long int sum=0;\n  for(int i=0;i<lst.size();i++)\n  {\n    if(lst[i]>0 && lst[i]==(int)lst[i])\n    {\n        if(lst[i]%2==1)\n        {\n            sum+=lst[i]*lst[i];\n        }\n    }\n  }\n  return sum;",
        "grade-140": {
            "execution": 0
        },
        "22": "long double ans=0;\n    int len=lst.size();\n    if(len==0)\n        return 0;\n    for(int i=0;i<len;i++)\n    {\n        if(lst[i]>0 && floor(lst[i])==lst[i])\n        {\n            int value=(int)lst[i];\n            if(value%2!=0)\n            {\n                ans=ans+(value*value);\n            }\n        }\n    }\n    return ans;",
        "grade-22": {
            "execution": 1
        },
        "152": "long sum=0;\n  int l = lst.size();\n  for(int i=0;i<l;i++){\n    if(lst[i]>0 && (lst[i]-(int)lst[i])==0){\n      if(lst[i]%2!=0){\n        sum = sum + lst[i]*lst[i];\n      }\n    }\n  }\n  return sum;",
        "grade-152": {
            "execution": 0
        },
        "108": "if(lst.size() == 0)\n    {\n        return 0;\n    }\n    float sum = 0;\n    for(int i = 0; i < lst.size(); i++)\n    {\n        if(lst[i] > 0 && ceil(lst[i]) == lst[i])\n        {\n            if(lst[i] % 2 != 0)\n            {\n                sum += lst[i] * lst[i];\n            }\n        }\n    }\n    return sum;",
        "grade-108": {
            "execution": 0
        },
        "8": "std::vector<float>::iterator itr;\n  long sum = 0;\n  for(itr = lst.begin(); itr != lst.end(); itr++) {\n    if (*itr > 0 && (int)*itr == *itr) {\n      if (*itr % 2 != 0) {\n        sum += *itr * *itr;\n      }\n    }\n  }\n  return sum;",
        "grade-8": {
            "execution": 0
        },
        "7": "",
        "grade-7": {
            "execution": 0
        },
        "23": "// variable to hold the sum\n\tfloat sum = 0;\n\t// iterate over the list\n\tfor (float i : lst) {\n\t\t// if number is odd and positive\n\t\tif (int(i) % 2 == 1 && i > 0) {\n\t\t\t// add square of number to sum\n\t\t\tsum += i * i;\n\t\t}\n\t}\n\t// return sum\n\treturn sum;",
        "grade-23": {
            "execution": 1
        },
        "55": "// your code here",
        "grade-55": {
            "execution": 0
        },
        "59": "long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if (fmod(lst[i], 2) == 1 && lst[i] > 0) {\n            long val = (long) lst[i];\n            sum += (val * val);\n        }\n    }\n    return sum;",
        "grade-59": {
            "execution": 1
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") = \"#A@c\"\nstd::string solve(std::string s) {\n",
        "snippet": [
            "    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (w>=65 and w<=90) w=w+32;\n        else if (w>=97 and w<=122) w=w-32;\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}\n"
        ],
        "simplified": "You are given a string s. if s[i] is a letter, reverse its case from lower to upper or vise versa, otherwise keep it as it is. If the string contains no letters, reverse the string. The function should return the resulted string.",
        "task_id": "161",
        "164": "string res;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            if(isupper(s[i])) {\n                res += tolower(s[i]);\n            }\n            else {\n                res += toupper(s[i]);\n            }\n        }\n        else {\n            res += s[i];\n        }\n    }\n    if(isalpha(res[0])) {\n        return res;\n    }\n    reverse(res.begin(), res.end());\n    return res;",
        "grade-164": {
            "execution": 0
        },
        "28": "bool notFound = true;\n\t// iterate through the string\n\tfor (int i = 0; i < s.length(); i++) {\n\t\t// if a letter is found, \n\t\tif (isalpha(s[i])) {\n\t\t\t// change the letter case and make notFound false\n\t\t\tif (isupper(s[i])) {\n\t\t\t\ts[i] = tolower(s[i]);\n\t\t\t}\n\t\t\telse {\n\t\t\t\ts[i] = toupper(s[i]);\n\t\t\t}\n\t\t\tnotFound = false;\n\t\t}\n\t}\n\t// if no letters are found, reverse the string\n\tif (notFound) {\n\t\tstd::reverse(s.begin(), s.end());\n\t}\n\treturn s;",
        "grade-28": {
            "execution": 1
        },
        "6": "if(s.empty()) return \"\";\n  for(char& c : s)\n    if(std::isalpha(c))\n      c = std::tolower(c) ^ 32;\n  if(std::all_of(s.begin(), s.end(), [](char c){return !std::isalpha(c);}))\n    std::reverse(s.begin(), s.end());\n  return s;",
        "grade-6": {
            "execution": 0
        },
        "191": "std::string result;\n    for (char c : s) {\n        if (isalpha(c))\n            result += (char)tolower(c);\n        else \n            result += c;\n    }\n    return result;",
        "grade-191": {
            "execution": 0
        },
        "70": "std::string result;\n\tif (s.size() == 0) return result;\n\tif (s.size() == 1) {\n\t\tchar temp = s[0];\n\t\tif (isalpha(temp)) {\n\t\t\tif (isupper(temp)) {\n\t\t\t\ttemp = tolower(temp);\n\t\t\t}\n\t\t\telse if (islower(temp)) {\n\t\t\t\ttemp = toupper(temp);\n\t\t\t}\n\t\t}\n\t\treturn std::string(1, temp);\n\t}\n\telse {\n\t\t// check if no letters\n\t\tbool check = true;\n\t\tfor (size_t i = 0; i < s.size(); i++) {\n\t\t\tif (isalpha(s[i])) {\n\t\t\t\tcheck = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (check) {\n\t\t\tfor (size_t i = s.size() - 1; i >= 0; i--) {\n\t\t\t\tresult += s[i];\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t\telse {\n\t\t\tfor (size_t i = 0; i < s.size(); i++) {\n\t\t\t\tchar temp = s[i];\n\t\t\t\tif (isalpha(temp)) {\n\t\t\t\t\tif (isupper(temp)) {\n\t\t\t\t\t\ttemp = tolower(temp);\n\t\t\t\t\t}\n\t\t\t\t\telse if (islower(temp)) {\n\t\t\t\t\t\ttemp = toupper(temp);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tresult += temp;\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}",
        "grade-70": {
            "execution": 0
        },
        "62": "if(s.empty())\n    return \"\";\n    std::string result;\n    for(int i=0;i<s.length();i++)\n    {\n        if(s[i]>='a' && s[i]<='z')\n        {\n            s[i]='A'+s[i]-'a';\n        }\n        else if(s[i]>='A' && s[i]<='Z')\n        {\n            s[i]='a'+s[i]-'A';\n        }\n    }\n    return s;",
        "grade-62": {
            "execution": 0
        },
        "57": "std::string result;\n    if (std::all_of(s.begin(), s.end(), ::isdigit))\n    {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n    for (size_t i = 0; i < s.size(); i++)\n    {\n        if (isalpha(s[i]))\n        {\n            if (isupper(s[i]))\n            {\n                result += std::tolower(s[i]);\n            }\n            else\n            {\n                result += std::toupper(s[i]);\n            }\n        }\n        else\n        {\n            result += s[i];\n        }\n    }\n    return result;",
        "grade-57": {
            "execution": 0
        },
        "35": "int len = s.length();\n    if(len == 0) return s;\n    for(int i = 0; i < len; i++) {\n        if(isalpha(s[i])) {\n            if(islower(s[i])) s[i] = toupper(s[i]);\n            else s[i] = tolower(s[i]);\n        }\n    }\n    return s;",
        "grade-35": {
            "execution": 0
        },
        "190": "for(int i = 0; i < s.size(); i++) {\n        if(islower(s[i])) s[i] = toupper(s[i]);\n        else if(isupper(s[i])) s[i] = tolower(s[i]);\n    }\n    return s;",
        "grade-190": {
            "execution": 0
        },
        "26": "std::reverse(s.begin(), s.end());\n  for (int i = 0; i < s.size(); i++) {\n    if (isalpha(s[i])) {\n      if (isupper(s[i])) {\n        s[i] = tolower(s[i]);\n      } else {\n        s[i] = toupper(s[i]);\n      }\n    }\n  }\n  return s;",
        "grade-26": {
            "execution": 0
        },
        "174": "int n = s.size();\n  for (int i = 0; i < n; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      s[i] = 'A' + (s[i] - 'a');\n    } else if (s[i] >= 'A' && s[i] <= 'Z') {\n      s[i] = 'a' + (s[i] - 'A');\n    }\n  }\n  if (s.find_first_of(\"a-zA-Z\") == std::string::npos) {\n    return std::string(s.rbegin(), s.rend());\n  }\n  return s;",
        "grade-174": {
            "execution": 0
        },
        "139": "// your code goes here\n\tstd::string str = \"\";\n\tif (s.length() == 0)\n\t\treturn str;\n\tbool flag = true;\n\tfor (int i = 0; i < s.length(); i++)\n\t{\n\t\tif ((s[i] >= 'a' && s[i] <= 'z') || (s[i] >= 'A' && s[i] <= 'Z'))\n\t\t{\n\t\t\tflag = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\tfor (int i = 0; i < s.length(); i++)\n\t{\n\t\tif (s[i] >= 'a' && s[i] <= 'z')\n\t\t{\n\t\t\tstr += (char)(s[i] - 32);\n\t\t}\n\t\telse if (s[i] >= 'A' && s[i] <= 'Z')\n\t\t{\n\t\t\tstr += (char)(s[i] + 32);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr += s[i];\n\t\t}\n\t}\n\tif (flag)\n\t{\n\t\tstd::reverse(str.begin(), str.end());\n\t}\n\treturn str;",
        "grade-139": {
            "execution": 1
        },
        "22": "const int len = s.length();\n  int idx = 0;\n  while(idx < len) {\n    if(isalpha(s[idx])) {\n      break;\n    }\n    idx++;\n  }\n  for(int i = idx; i < len; i++) {\n    if(isalpha(s[i])) {\n      if(islower(s[i])) {\n        s[i] = toupper(s[i]);\n      } else {\n        s[i] = tolower(s[i]);\n      }\n    }\n  }\n  if(idx == len) {\n    int i = 0, j = len - 1;\n    while(i < j) {\n      std::swap(s[i], s[j]);\n      i++;\n      j--;\n    }\n  }\n  return s;",
        "grade-22": {
            "execution": 1
        },
        "152": "if(s.length() == 0)\n        return s;\n    std::transform(s.begin(), s.end(), s.begin(), ::tolower);\n    for(int i = 0; i < s.length(); i++) {\n        if(islower(s[i]))\n            s[i] = toupper(s[i]);\n        else if(isupper(s[i]))\n            s[i] = tolower(s[i]);\n    }\n    return s;",
        "grade-152": {
            "execution": 0
        },
        "108": "int n = s.size();\n    for(int i = 0; i < n; i++) {\n        if(s[i] >= 'a' && s[i] <= 'z')\n            s[i] = 'A' + (s[i] - 'a');\n        else if(s[i] >= 'A' && s[i] <= 'Z')\n            s[i] = 'a' + (s[i] - 'A');\n    }\n    return s;",
        "grade-108": {
            "execution": 0
        },
        "8": "std::vector<char> str_vec(s.begin(), s.end());\n  bool no_letter = true;\n  for (int i = 0; i < str_vec.size(); i++) {\n    if (isalpha(str_vec[i])) {\n      no_letter = false;\n      if (islower(str_vec[i])) {\n        str_vec[i] = toupper(str_vec[i]);\n      } else {\n        str_vec[i] = tolower(str_vec[i]);\n      }\n    }\n  }\n  if (no_letter) {\n    std::reverse(str_vec.begin(), str_vec.end());\n  }\n  std::string result(str_vec.begin(), str_vec.end());\n  return result;",
        "grade-8": {
            "execution": 1
        },
        "7": "std::string answer = \"\";\n    if (s.size() <= 1) return s;\n    if (!isalpha(s[0])) return s;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) answer += s[i] ^ ' ';\n        else answer += s[i];\n    }\n    return answer;",
        "grade-7": {
            "execution": 0
        },
        "23": "std::string result = \"\";\n  bool is_letter = false;\n  for (auto c : s) {\n    if (std::isalpha(c)) {\n      is_letter = true;\n      if (std::isupper(c)) {\n        result += std::tolower(c);\n      } else {\n        result += std::toupper(c);\n      }\n    } else {\n      result += c;\n    }\n  }\n  if (!is_letter) {\n    std::reverse(std::begin(result), std::end(result));\n  }\n  return result;",
        "grade-23": {
            "execution": 1
        },
        "55": "std::string res = \"\";\n\tif (s.size() == 0)\n\t\treturn res;\n\tbool hasLetters = false;\n\tfor (int i = 0; i < s.size(); i++) {\n\t\tif (isalpha(s[i])) {\n\t\t\thasLetters = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (!hasLetters) {\n\t\tfor (int i = s.size() - 1; i >= 0; i--) {\n\t\t\tres += s[i];\n\t\t}\n\t\treturn res;\n\t}\n\tfor (int i = 0; i < s.size(); i++) {\n\t\tif (isalpha(s[i])) {\n\t\t\tif (islower(s[i])) {\n\t\t\t\tres += toupper(s[i]);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tres += tolower(s[i]);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tres += s[i];\n\t\t}\n\t}\n\treturn res;",
        "grade-55": {
            "execution": 1
        },
        "59": "std::string ret = \"\";\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i] <= 'z')\n            ret += toupper(s[i]);\n        else if (s[i] >= 'A' && s[i] <= 'Z')\n            ret += tolower(s[i]);\n        else\n            ret += s[i];\n    }\n    if (ret.size() == s.size())\n        return s;\n    return ret;",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n",
        "snippet": [
            "    vector<int> out={};\n    for (int i=0;i<x.size();i++)\n        {\n            int num=x[i];\n            bool u=true;\n            if (num==0) u=false;\n            while (num>0 and u)\n            {\n                if (num%2==0) u=false;\n                num=num/10;\n            }\n            if (u) out.push_back(x[i]);\n        }\n    sort(out.begin(),out.end());\n    return out;\n}\n"
        ],
        "simplified": "Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit. Note: Returned list should be sorted in increasing order.",
        "task_id": "104",
        "163": "std::vector<long> res;\n\tbool flag;\n\tfor(int i=0;i<x.size();i++){\n\t\tflag = true;\n\t\twhile(x[i]!=0){\n\t\t\tif(x[i]%2==0){\n\t\t\t\tflag = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tx[i] = x[i]/10;\n\t\t}\n\t\tif(flag) res.push_back(x[i]);\n\t}\n\tstd::sort(res.begin(),res.end());\n\treturn res;",
        "grade-163": {
            "execution": 0
        },
        "28": "int digits;\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        digits = 0;\n        long num = x[i];\n        while(num > 0){\n            if(num%10%2 == 0){\n                digits = 1;\n                break;\n            }\n            num = num/10;\n        }\n        if(digits == 0){\n            res.push_back(x[i]);\n        }\n    }\n    std::sort(res.begin(),res.end());\n    return res;",
        "grade-28": {
            "execution": 1
        },
        "6": "// Your code here.\n  std::vector<long> ans;\n  for(long i=0;i<x.size();i++){\n    int flag=0;\n    while(x[i]>0){\n      if(x[i]%10==0 || x[i]%10==2 || x[i]%10==4 || x[i]%10==6 || x[i]%10==8)\n      {\n        flag=1;\n        break;\n      }\n      x[i]/=10;\n    }\n    if(flag==0)\n      ans.push_back(x[i]);\n  }\n  std::sort(ans.begin(),ans.end());\n  return ans;",
        "grade-6": {
            "execution": 0
        },
        "189": "// your code here",
        "grade-189": {
            "execution": 0
        },
        "70": "// your code here",
        "grade-70": {
            "execution": 0
        },
        "62": "std::vector<long> temp = x;\n\tstd::vector<long> output;\n\tfor (long i = 0; i < temp.size(); i++) {\n\t\twhile (temp[i] != 0) {\n\t\t\tint rem = temp[i] % 10;\n\t\t\tif (rem % 2 == 0) {\n\t\t\t\tx.erase(x.begin() + i);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ttemp[i] = temp[i] / 10;\n\t\t}\n\t}\n\tstd::sort(x.begin(), x.end());\n\treturn x;",
        "grade-62": {
            "execution": 0
        },
        "57": "// step 1: sort the vector\n\tstd::sort(x.begin(), x.end());\n\t// step 2: loop over the vector and remove duplicates\n\t// we will also check if there is any even number\n\tstd::vector<long> ret;\n\tfor (int i = 0; i < x.size(); i++) {\n\t\tlong num = x[i];\n\t\t// check for even digit\n\t\tbool is_valid = true;\n\t\twhile (num > 0) {\n\t\t\tif (num % 2 == 0) {\n\t\t\t\tis_valid = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tnum /= 10;\n\t\t}\n\t\tif (is_valid) {\n\t\t\tret.push_back(x[i]);\n\t\t}\n\t}\n\treturn ret;",
        "grade-57": {
            "execution": 1
        },
        "35": "std::vector<long> answer;\n\tfor (int i = 0; i < x.size(); i++) {\n\t\tint count = 0;\n\t\tlong y = x[i];\n\t\tint remainder = 0;\n\t\twhile (y != 0) {\n\t\t\tremainder = y % 10;\n\t\t\tif (remainder % 2 == 0) {\n\t\t\t\tcount = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ty = y / 10;\n\t\t}\n\t\tif (count == 0) {\n\t\t\tanswer.push_back(x[i]);\n\t\t}\n\t}\n\tstd::sort(answer.begin(), answer.end());\n\treturn answer;",
        "grade-35": {
            "execution": 1
        },
        "188": "std::vector<long>::iterator itr;\n    std::vector<long> v;\n    for(itr=x.begin();itr!=x.end();itr++)\n    {\n        int count=0;\n        while(*itr!=0)\n        {\n            if((*itr%10)%2==0)\n            {\n                count++;\n                break;\n            }\n            *itr=*itr/10;\n        }\n        if(count==0)\n        {\n            v.push_back(*itr);\n        }\n    }\n    std::sort(v.begin(),v.end());\n    return v;",
        "grade-188": {
            "execution": 0
        },
        "26": "std::vector<long> result;\n\tfor (int i = 0; i < x.size(); i++) {\n\t\tif (x[i] < 10) {\n\t\t\tresult.push_back(x[i]);\n\t\t}\n\t\telse {\n\t\t\tint tmp = x[i];\n\t\t\tbool flag = true;\n\t\t\twhile (tmp > 0) {\n\t\t\t\tif (tmp % 2 == 0) {\n\t\t\t\t\tflag = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\ttmp /= 10;\n\t\t\t}\n\t\t\tif (flag)\n\t\t\t\tresult.push_back(x[i]);\n\t\t}\n\t}\n\tsort(result.begin(), result.end());\n\treturn result;",
        "grade-26": {
            "execution": 1
        },
        "173": "// Your code here...\n    std::vector<long> result;\n    for(int i = 0; i < x.size(); i++){\n        bool no_even = true;\n        long t = x[i];\n        while(t > 0){\n            int r = t % 10;\n            if(r % 2 == 0){\n                no_even = false;\n                break;\n            }\n            t /= 10;\n        }\n        if(no_even) result.push_back(x[i]);\n    }\n    return result;",
        "grade-173": {
            "execution": 0
        },
        "139": "std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        int flag=0;\n        int num=x[i];\n        while(num!=0){\n            int dig=num%10;\n            if(dig%2==0){\n                flag=1;\n                break;\n            }\n            num=num/10;\n        }\n        if(flag==0){\n            res.push_back(x[i]);\n        }\n    }\n    std::sort(res.begin(),res.end());\n    return res;",
        "grade-139": {
            "execution": 1
        },
        "22": "std::vector<long> result;\n    for (long element : x) {\n        // check if element has any even digits\n        long n = element;\n        bool has_even_digit = false;\n        while (n > 0) {\n            if ((n % 10) % 2 == 0) {\n                has_even_digit = true;\n                break;\n            }\n            n /= 10;\n        }\n        if (!has_even_digit) {\n            result.push_back(element);\n        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;",
        "grade-22": {
            "execution": 1
        },
        "151": "assert(x.size() > 0);\n\tstd::vector<long> y;\n\tfor (int i = 0; i < x.size(); i++) {\n\t\tbool b = true;\n\t\tlong n = x[i];\n\t\twhile (n > 0) {\n\t\t\tif (n % 2 == 0) {\n\t\t\t\tb = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tn /= 10;\n\t\t}\n\t\tif (b) {\n\t\t\ty.push_back(x[i]);\n\t\t}\n\t}\n\tsort(y.begin(), y.end());\n\treturn y;",
        "grade-151": {
            "execution": 1
        },
        "108": "std::vector<long> array;\n    for(int i=0;i<x.size();i++){\n        if(x[i]>0){\n            int flag=0;\n            while(x[i]>0){\n                int temp=x[i]%10;\n                if(temp%2==0){\n                    flag=1;\n                    break;\n                }\n                x[i]=x[i]/10;\n            }\n            if(flag==0){\n                array.push_back(x[i]);\n            }\n        }\n    }\n    return array;",
        "grade-108": {
            "execution": 0
        },
        "8": "std::vector<long> res;\n    std::vector<long>::iterator it;\n    bool isunique;\n    for(it = x.begin(); it != x.end(); it++) {\n        isunique = true;\n        while(*it > 0) {\n            if((*it % 10) % 2 == 0) {\n                isunique = false;\n                break;\n            }\n            *it /= 10;\n        }\n        if(isunique)\n            res.push_back(*it);\n    }\n    return res;",
        "grade-8": {
            "execution": 0
        },
        "7": "std::vector<long> ret_vec;\n\tstd::string s;\n\tint ret = 0;\n\tfor(int i = 0; i < x.size(); i++) {\n\t\ts = std::to_string(x[i]);\n\t\tret = 0;\n\t\tfor(int j = 0; j < s.length(); j++) {\n\t\t\tif(s[j] == '0' || s[j] == '2' || s[j] == '4' || s[j] == '6' || s[j] == '8') {\n\t\t\t\tret = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(ret == 0) {\n\t\t\tret_vec.push_back(x[i]);\n\t\t}\n\t}\n\tstd::sort(ret_vec.begin(), ret_vec.end());\n\treturn ret_vec;",
        "grade-7": {
            "execution": 1
        },
        "23": "std::vector<long> res;\n    for(int i=0;i<x.size();i++){\n        long long temp = x[i];\n        while(temp>0){\n            if(temp%10 % 2 == 0){\n                break;\n            }\n            temp/=10;\n        }\n        if(temp == 0){\n            res.push_back(x[i]);\n        }\n    }\n    sort(res.begin(),res.end());\n    return res;",
        "grade-23": {
            "execution": 1
        },
        "55": "std::vector<long>ans;\n    bool is_unique=true;\n    for(auto it:x){\n        is_unique=true;\n        while(it){\n            if(it%2==0){\n                is_unique=false;\n                break;\n            }\n            it/=10;\n        }\n        if(is_unique)ans.push_back(it);\n    }\n    std::sort(ans.begin(),ans.end());\n    return ans;",
        "grade-55": {
            "execution": 0
        },
        "59": "std::vector<long> unique;\n    for (int i = 0; i < x.size(); i++) {\n        long num = x[i];\n        bool even = false;\n        while (num > 0) {\n            if ((num % 10) % 2 == 0) {\n                even = true;\n                break;\n            }\n            num /= 10;\n        }\n        if (!even) {\n            unique.push_back(x[i]);\n        }\n    }\n    std::sort(unique.begin(), unique.end());\n    return unique;",
        "grade-59": {
            "execution": 1
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string test) {\n",
        "snippet": [
            "    map<char,int> count={},out={};\n    map <char,int>::iterator it;\n    int max=0;\n    for (int i=0;i<test.length();i++)\n        if (test[i]!=' ')\n        {\n            count[test[i]]+=1;\n            if (count[test[i]]>max) max=count[test[i]];\n        }\n    for (it=count.begin();it!=count.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (w2==max) out[w1]=w2;\n    }\n    return out;\n}\n"
        ],
        "simplified": "Given a string representing a space separated lowercase letters, return a dictionary of the letter with the most repetition and containing the corresponding count. If several letters have the same occurrence, return all of them.",
        "task_id": "111",
        "163": "std::map<std::string, long> mymap;\n  std::stringstream ss(test);\n  std::string intermediate;\n  while(getline(ss, intermediate, ' ')){\n    if(mymap.find(intermediate) == mymap.end()){\n      mymap[intermediate] = 1;\n    }else{\n      mymap[intermediate]++;\n    }\n  }\n  long max_value = 0;\n  for(auto i : mymap){\n    if(i.second > max_value){\n      max_value = i.second;\n    }\n  }\n  std::map<std::string, long> result;\n  for(auto i : mymap){\n    if(i.second == max_value){\n      result[i.first] = i.second;\n    }\n  }\n  return result;",
        "grade-163": {
            "execution": 1
        },
        "28": "std::map<std::string, long> dict;\nif(test == \"\"){\n    return dict;",
        "grade-28": {
            "execution": 0
        },
        "6": "std::map<std::string, long> result;\n    std::istringstream iss(test);\n    std::string key;\n    std::map<std::string, long>::iterator it;\n    while (iss >> key) {\n        it = result.find(key);\n        if (it != result.end()) {\n            result[key]++;\n        } else {\n            result[key] = 1;\n        }\n    }\n    return result;",
        "grade-6": {
            "execution": 0
        },
        "189": "std::map<std::string, long> res;\n    if(test.length() == 0) return res;\n    std::stringstream ss(test);\n    std::string word;\n    long max_val = 0;\n    while(ss >> word){\n        if(res.find(word) == res.end()){\n            res[word] = 1;\n        }\n        else{\n            res[word] = res[word] + 1;\n        }\n        max_val = std::max(max_val, res[word]);\n    }\n    for(auto it = res.begin(); it != res.end(); it++){\n        if(it->second != max_val){\n            res.erase(it);\n        }\n    }\n    return res;",
        "grade-189": {
            "execution": 0
        },
        "70": "std::map<std::string, long> count;\n    std::stringstream ss(test);\n    std::string token;\n    while(std::getline(ss, token, ' ')) {\n        ++count[token];\n    }\n    return count;",
        "grade-70": {
            "execution": 0
        },
        "62": "// your code goes here\n    std::map<std::string, long> dictionary;\n    std::string element;\n    int value = 0;\n    std::istringstream test_in(test);\n    while(test_in >> element){\n      dictionary[element]++;\n    }\n    std::map<std::string, long>::iterator itr;\n    for(itr = dictionary.begin(); itr != dictionary.end(); itr++){\n      value = itr->second;\n      if(value > 1){\n        break;\n      }\n    }\n    for(itr = dictionary.begin(); itr != dictionary.end(); itr++){\n      if(itr->second < value){\n        dictionary.erase(itr);\n      }\n    }\n    return dictionary;",
        "grade-62": {
            "execution": 0
        },
        "57": "std::map<std::string, long> dict;\n    std::istringstream iss(test);\n    std::string temp;\n    while(iss >> temp)\n    {\n        dict[temp]++;\n    }\n    return dict;",
        "grade-57": {
            "execution": 0
        },
        "35": "std::map<std::string, long> char_histogram;\n\tstd::stringstream ss(test);\n\tstd::string char_string;\n\twhile (std::getline(ss, char_string, ' ')) {\n\t\tauto map_iter = char_histogram.find(char_string);\n\t\tif (map_iter == char_histogram.end()) {\n\t\t\tchar_histogram.insert(std::pair<std::string, long>(char_string, 1));\n\t\t} else {\n\t\t\tmap_iter->second += 1;\n\t\t}\n\t}\n\treturn char_histogram;",
        "grade-35": {
            "execution": 0
        },
        "188": "std::map<std::string, long> temp;\n  std::string word = \"\";\n  for (int i = 0; i < test.length(); i++) {\n    if (test[i] != ' ') {\n      word += test[i];\n    } else {\n      temp[word]++;\n      word = \"\";\n    }\n  }\n  if (word != \"\") {\n    temp[word]++;\n  }\n  // std::cout << temp.size() << '\\n';\n  auto it = temp.begin();\n  while (it != temp.end()) {\n    if (it->second == 1) {\n      it = temp.erase(it);\n    } else {\n      it++;\n    }\n  }\n  return temp;",
        "grade-188": {
            "execution": 0
        },
        "26": "std::map<std::string, long> letter_count;\n  std::stringstream ss(test);\n  std::string letter;\n  while (ss >> letter) {\n    letter_count[letter]++;\n  }\n  return letter_count;",
        "grade-26": {
            "execution": 0
        },
        "173": "std::map<std::string, long> histMap;\n  std::string delimiter = \" \";\n  size_t pos = 0;\n  std::string token;\n  std::vector<std::string> words;\n  while ((pos = test.find(delimiter)) != std::string::npos) {\n    token = test.substr(0, pos);\n    words.push_back(token);\n    test.erase(0, pos + delimiter.length());\n  }\n  words.push_back(test);\n  for (std::string s : words) {\n    histMap[s] += 1;\n  }\n  return histMap;",
        "grade-173": {
            "execution": 0
        },
        "139": "std::map<std::string, long> result;\n\tstringstream ss(test);\n\tstd::string token;\n\twhile (getline(ss, token, ' ')) {\n\t\tresult[token]++;\n\t}\n\treturn result;",
        "grade-139": {
            "execution": 0
        },
        "22": "std::map<std::string, long> result;\n\tstd::istringstream iss(test);\n\tdo\n\t{\n\t\tstd::string sub;\n\t\tiss >> sub;\n\t\tif(sub.empty())\n\t\t\tcontinue;\n\t\tresult[sub]++;\n\t} while (iss);\n\treturn result;",
        "grade-22": {
            "execution": 0
        },
        "151": "std::map<std::string, long> answer;\n    std::string temp = \"\";\n    for(auto i : test){\n        if(i == ' '){\n            if(answer.find(temp) == answer.end()){\n                answer[temp] = 1;\n            }\n            else{\n                answer[temp] += 1;\n            }\n            temp = \"\";\n        }\n        else{\n            temp += i;\n        }\n    }\n    if(answer.find(temp) == answer.end()){\n        answer[temp] = 1;\n    }\n    else{\n        answer[temp] += 1;\n    }\n    return answer;",
        "grade-151": {
            "execution": 0
        },
        "108": "std::map<std::string, long> result;\n    std::istringstream ss(test);\n    std::string token;\n    while(std::getline(ss, token, ' ')) {\n        result[token]++;\n    }\n    return result;",
        "grade-108": {
            "execution": 0
        },
        "8": "std::map<std::string, long> hist;\n  std::istringstream iss(test);\n  std::string letter;\n  while (iss >> letter) {\n    hist[letter]++;\n  }\n  return hist;",
        "grade-8": {
            "execution": 0
        },
        "7": "// Your code here\n  std::map<std::string, long> dict;\n  std::stringstream ss(test);\n  std::string word;\n  while(ss >> word)\n  {\n      if(dict.find(word) == dict.end())\n      {\n          dict[word] = 1;\n      }\n      else\n      {\n          dict[word] += 1;\n      }\n  }\n  return dict;",
        "grade-7": {
            "execution": 0
        },
        "23": "int flag = 0;\n    std::map<std::string, long> ret;\n    std::map<std::string, long>::iterator it;\n    std::string temp;\n    std::stringstream ss(test);\n    std::string s_arr[test.length()];\n    int j = 0;\n    if(test.length() == 0) {\n        return ret;\n    }\n    for(int i = 0; i < test.length(); i++) {\n        if(test[i] == ' ') {\n            flag = 1;\n        }\n    }\n    if(flag == 0) {\n        for(int i = 0; i < test.length(); i++) {\n            if(i == 0) {\n                ret.insert(std::pair<std::string, long>(test.substr(i, 1), test.length()));\n            }\n            else {\n                ret.insert(std::pair<std::string, long>(test.substr(i, 1), 0));\n            }\n        }\n        return ret;\n    }\n    while(ss >> temp) {\n        s_arr[j] = temp;\n        j++;\n    }\n    std::sort(s_arr, s_arr + j);\n    for(int i = 0; i < j; i++) {\n        it = ret.find(s_arr[i]);\n        if(it == ret.end()) {\n            ret.insert(std::pair<std::string, long>(s_arr[i], 1));\n        }\n        else {\n            it->second++;\n        }\n    }\n    return ret;",
        "grade-23": {
            "execution": 0
        },
        "55": "std::map<std::string, long> res;\n\tstd::string temp = \"\";\n\tlong count = 0;\n\tfor (int i = 0; i < test.length(); i++) {\n\t\tif (test[i] != ' ') {\n\t\t\ttemp = temp + test[i];\n\t\t}\n\t\telse {\n\t\t\tres[temp]++;\n\t\t\ttemp = \"\";\n\t\t}\n\t}\n\tres[temp]++;\n\tstd::map<std::string, long> ans;\n\tfor (auto i : res) {\n\t\tif (i.second == count) {\n\t\t\tans[i.first] = i.second;\n\t\t}\n\t\telse if (i.second > count) {\n\t\t\tans.clear();\n\t\t\tans[i.first] = i.second;\n\t\t\tcount = i.second;\n\t\t}\n\t}\n\treturn ans;",
        "grade-55": {
            "execution": 0
        },
        "59": "// Your code here!\n    map<std::string,long> m;\n    stringstream ss(test);\n    string t;\n    while(ss>>t){\n        m[t]++;\n    }\n    return m;",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of strings only for ones that contain given substring\n// >>> filter_by_substring([], 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n// ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string> strings, std::string substring) {\n",
        "snippet": [
            "    vector<string> out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].find(substring)!=strings[i].npos)\n        out.push_back(strings[i]);\n    }\n    return out;\n}\n"
        ],
        "simplified": "Filter an input list of strings only for ones that contain given substring",
        "task_id": "7",
        "179": "std::vector<std::string> new_strings;\n\tfor (auto i : strings) {\n\t\tif (i.find(substring) != std::string::npos) {\n\t\t\tnew_strings.push_back(i);\n\t\t}\n\t}\n\treturn new_strings;",
        "grade-179": {
            "execution": 1
        },
        "28": "std::vector<std::string> ret;\n    for (auto &s : strings) {\n        if (s.find(substring) != std::string::npos)\n            ret.push_back(s);\n    }\n    return ret;",
        "grade-28": {
            "execution": 1
        },
        "6": "std::vector<std::string> result_strings;\n    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos) {\n            result_strings.push_back(s);\n        }\n    }\n    return result_strings;",
        "grade-6": {
            "execution": 1
        },
        "73": "std::vector<std::string> res;\n    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos) {\n            res.push_back(s);\n        }\n    }\n    return res;",
        "grade-73": {
            "execution": 1
        },
        "64": "std::vector<std::string> output;\n    for (auto str : strings) {\n        if (str.find(substring) != std::string::npos) {\n            output.push_back(str);\n        }\n    }\n    return output;",
        "grade-64": {
            "execution": 1
        },
        "59": "std::vector<std::string> ans;\n    for(std::string s: strings) {\n        if(s.find(substring) != std::string::npos) {\n            ans.push_back(s);\n        }\n    }\n    return ans;",
        "grade-59": {
            "execution": 1
        },
        "35": "std::vector<std::string> result;\n  for (std::string s : strings) {\n    if (s.find(substring) != std::string::npos) {\n      result.push_back(s);\n    }\n  }\n  return result;",
        "grade-35": {
            "execution": 1
        },
        "26": "std::vector<std::string> filtered_strings;\n  for (int i = 0; i < strings.size(); i++) {\n    bool contain_substring = false;\n    for (int j = 0; j < strings[i].size(); j++) {\n      if (strings[i][j] == substring[0]) {\n        int cnt = 0;\n        for (int k = j; k < strings[i].size(); k++) {\n          if (cnt == substring.size()) {\n            contain_substring = true;\n            break;\n          }\n          if (strings[i][k] == substring[cnt]) {\n            cnt++;\n          } else {\n            break;\n          }\n        }\n      }\n    }\n    if (contain_substring) {\n      filtered_strings.push_back(strings[i]);\n    }\n  }\n  return filtered_strings;",
        "grade-26": {
            "execution": 0
        },
        "190": "std::vector<std::string> ret;\n    for (auto &s : strings) {\n        if (s.find(substring) != std::string::npos) {\n            ret.push_back(s);\n        }\n    }\n    return ret;",
        "grade-190": {
            "execution": 1
        },
        "152": "std::vector<std::string> new_strings;\n    for (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(substring) != std::string::npos) {\n            new_strings.push_back(strings[i]);\n        }\n    }\n    return new_strings;",
        "grade-152": {
            "execution": 1
        },
        "22": "std::vector<std::string> results;\n    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos) {\n            results.push_back(s);\n        }\n    }\n    return results;",
        "grade-22": {
            "execution": 1
        },
        "167": "std::vector<std::string> result;\n  for (auto &string : strings) {\n    if (string.find(substring) != std::string::npos) {\n      result.push_back(string);\n    }\n  }\n  return result;",
        "grade-167": {
            "execution": 1
        },
        "115": "std::vector<std::string> filtered_strings;\n    for (std::string element : strings) {\n        if (element.find(substring) != std::string::npos) {\n            filtered_strings.push_back(element);\n        }\n    }\n    return filtered_strings;",
        "grade-115": {
            "execution": 1
        },
        "8": "std::vector<std::string> filtered;\n    for (const auto& str : strings) {\n        if (str.find(substring) != std::string::npos) {\n            filtered.push_back(str);\n        }\n    }\n    return filtered;",
        "grade-8": {
            "execution": 1
        },
        "7": "std::vector<std::string> newStrings;\n    for (std::string str : strings) {\n        if (str.find(substring) != std::string::npos) {\n            newStrings.push_back(str);\n        }\n    }\n    return newStrings;",
        "grade-7": {
            "execution": 1
        },
        "23": "std::vector<std::string> result;\n  for (const auto& s : strings) {\n    if (s.find(substring) != std::string::npos) {\n      result.push_back(s);\n    }\n  }\n  return result;",
        "grade-23": {
            "execution": 1
        },
        "57": "std::vector<std::string> result;\n    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n        }\n    }\n    return result;",
        "grade-57": {
            "execution": 1
        },
        "61": "std::vector<std::string> filtered_strings;\n    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos) {\n            filtered_strings.push_back(s);\n        }\n    }\n    return filtered_strings;",
        "grade-61": {
            "execution": 1
        },
        "140": "std::vector<std::string>::iterator it;\n\tstd::vector<std::string> res;\n\tfor(it = strings.begin(); it != strings.end(); it++) {\n\t\tstd::string str = *it;\n\t\tif(str.find(substring) != std::string::npos)\n\t\t\tres.push_back(str);\n\t}\n\treturn res;",
        "grade-140": {
            "execution": 1
        },
        "170": "std::vector<std::string> result;\n  for (auto& i : strings) {\n    if (i.find(substring) != std::string::npos) {\n      result.push_back(i);\n    }\n  }\n  return result;",
        "grade-170": {
            "execution": 1
        }
    }
]