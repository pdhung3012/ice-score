[
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n    // 15\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static int closestInteger(String value) {\n",
        "snippet": [
            "        if (value.contains(\".\")) {\n            while (value.charAt(value.length() - 1) == '0') {\n                value = value.substring(0, value.length() - 1);\n            }\n        }\n        double num = Double.parseDouble(value);\n        int res = 0;\n        if (value.substring(Math.max(value.length() - 2, 0)).equals(\".5\")) {\n            if (num > 0) {\n                res = (int) Math.ceil(num);\n            } else {\n                res = (int) Math.floor(num);\n            }\n        } else if(value.length() > 0) {\n            res = (int) Math.round(num);\n        }\n        return res;\n    }\n}"
        ],
        "simplified": "Create a function that takes a value (string) representing a number and returns the closest integer to it. If the number is equidistant from two integers, round it away from zero.",
        "task_id": "99",
        "35": "double num = Double.parseDouble(value);\n        return (int) Math.round(num);",
        "grade-35": {
            "execution": 0
        },
        "6": "// Your code goes here\n        try {\n            // Attempt to parse the string into a decimal.\n            double decimal = Double.parseDouble(value);\n            // If the parse was successful, then we now have a decimal value.\n            // However, we want to round it and get an integer.\n            int rounded = (int) Math.round(decimal);\n            // Finally, we want to return the integer value.\n            return rounded;\n        } catch (NumberFormatException e) {\n            // If the parse failed, we should return an error message.\n            return -1;\n        }",
        "grade-6": {
            "execution": 0
        },
        "89": "return BigDecimal.valueOf(Double.parseDouble(value)).setScale(0, RoundingMode.HALF_UP).intValue();",
        "grade-89": {
            "execution": 1
        },
        "77": "// convert the string to a decimal value\n        // round the decimal value\n        // convert the decimal value to an integer\n        return (int)Math.round(Double.parseDouble(value));",
        "grade-77": {
            "execution": 0
        },
        "71": "double value_d = Double.parseDouble(value);\n        return value_d > 0 ? (int) Math.ceil(value_d) : (int) Math.floor(value_d);",
        "grade-71": {
            "execution": 0
        },
        "42": "// Your code here!\n        return 1;",
        "grade-42": {
            "execution": 0
        },
        "32": "return 0;",
        "grade-32": {
            "execution": 0
        },
        "185": "int flooredValue = (int) Math.floor(Double.parseDouble(value));\n        int ceiledValue = (int) Math.ceil(Double.parseDouble(value));\n        double floorDiff = Math.abs(Double.parseDouble(value) - flooredValue);\n        double ceilDiff = Math.abs(Double.parseDouble(value) - ceiledValue);\n        if (floorDiff < ceilDiff) {\n            return flooredValue;\n        } else {\n            return ceiledValue;\n        }",
        "grade-185": {
            "execution": 0
        },
        "28": "Double f = Double.parseDouble(value);\n        int a = (int)Math.floor(f);\n        int b = (int)Math.ceil(f);\n        int ca = Math.abs(a);\n        int cb = Math.abs(b);\n        int cfa = Math.abs(a - f.intValue());\n        int cfb = Math.abs(b - f.intValue());\n        if (cfa == cfb)\n            return f.intValue() > 0 ? a : b;\n        else if (cfa < cfb)\n            return a;\n        else\n            return b;",
        "grade-28": {
            "execution": 0
        },
        "141": "BigDecimal val = new BigDecimal(value);\n        BigDecimal ceil = val.setScale(0, RoundingMode.CEILING);\n        BigDecimal floor = val.setScale(0, RoundingMode.FLOOR);\n        BigDecimal diff_ceil = ceil.subtract(val).abs();\n        BigDecimal diff_floor = floor.subtract(val).abs();\n        return diff_ceil.compareTo(diff_floor) < 0 ? ceil.intValue() : floor.intValue();",
        "grade-141": {
            "execution": 0
        },
        "8": "double val = Double.parseDouble(value);\n        return (int) Math.round(val);",
        "grade-8": {
            "execution": 0
        },
        "7": "// Write your code here\n        double n = Double.parseDouble(value);\n        int a = (int) Math.floor(n);\n        int b = (int) Math.ceil(n);\n        if (Math.abs(n - a) < Math.abs(n - b)) {\n            return a;\n        } else {\n            return b;\n        }",
        "grade-7": {
            "execution": 0
        },
        "29": "BigDecimal bigDecimal = new BigDecimal(value);\n        BigDecimal nearestBigDecimal = bigDecimal.round(new MathContext(0, RoundingMode.HALF_UP));\n        return nearestBigDecimal.intValue();",
        "grade-29": {
            "execution": 0
        },
        "68": "double test = Double.parseDouble(value);\n        int high = (int)Math.ceil(test);\n        int low = (int)Math.floor(test);\n        if (test - low == 0.5) {\n            if (test < 0) {\n                return low;\n            } else {\n                return high;\n            }\n        } else if (test - low < 0.5) {\n            return low;\n        } else {\n            return high;\n        }",
        "grade-68": {
            "execution": 1
        },
        "74": "// 1. Create a BigDecimal instance of the given value.\n        // 2. Use the method BigDecimal.setScale() to round the number with the\n        //    RoundingMode.HALF_UP.\n        // 3. Convert the result to integer.\n        // 4. Return the result.\n        return (int)Double.parseDouble(value);",
        "grade-74": {
            "execution": 0
        },
        "170": "// write your code here\n        double val = Double.parseDouble(value);\n        int sign = val > 0 ? 1 : -1;\n        return (int) (val + 0.5 * sign);",
        "grade-170": {
            "execution": 1
        },
        "189": "return Double.valueOf(value).intValue();",
        "grade-189": {
            "execution": 0
        },
        "62": "double d = Double.parseDouble(value);\n        double d2 = d - Math.floor(d);\n        if (d2 > 0.5) {\n            return (int)Math.ceil(d);\n        } else {\n            return (int)Math.floor(d);\n        }",
        "grade-62": {
            "execution": 0
        },
        "140": "// Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        String temp = value.replaceAll(\"\\\\.\", \"\");\n        StringBuilder sb = new StringBuilder(temp);\n        sb.insert(temp.length() - value.length() + 2, \".\");\n        double decimal = Double.parseDouble(sb.toString());\n        int result = (int)decimal;\n        if ((decimal - result) >= 0.5) {\n            result += 1;\n        }\n        return result;",
        "grade-140": {
            "execution": 0
        },
        "69": "// Implement your function here\n        return 0;",
        "grade-69": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // fix_spaces(\"Example\") == \"Example\"\n    // fix_spaces(\"Example 1\") == \"Example_1\"\n    // fix_spaces(\" Example 2\") == \"_Example_2\"\n    // fix_spaces(\" Example   3\") == \"_Example-3\"\n    public static String fixSpaces(String text) {\n",
        "snippet": [
            "        StringBuilder sb = new StringBuilder();\n        int start = 0, end = 0;\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == ' ') {\n                end += 1;\n            } else {\n                if (end - start > 2) {\n                    sb.append('-');\n                } else if (end - start > 0) {\n                    sb.append(\"_\".repeat(end - start));\n                }\n                sb.append(text.charAt(i));\n                start = i + 1;\n                end = i + 1;\n            }\n        }\n        if (end - start > 2) {\n            sb.append('-');\n        } else if (end - start > 0) {\n            sb.append(\"_\".repeat(end - start));\n        }\n        return sb.toString();\n    }\n}"
        ],
        "simplified": "Given a string text, replace all spaces in it with underscores, and if a string has more than 2 consecutive spaces, then replace all consecutive spaces with -",
        "task_id": "140",
        "32": "String result = text.replace(\" \", \"_\");\n        String result2 = result.replace(\"__\", \"-\");\n        return result2;",
        "grade-32": {
            "execution": 0
        },
        "6": "// Your code here.\n        if (text.length() == 0) {\n            return text;\n        }\n        text = text.replaceAll(\"\\\\s{2,}\", \"-\");\n        return text.replaceAll(\"\\\\s\", \"_\");",
        "grade-6": {
            "execution": 0
        },
        "84": "return text.replaceAll(\"\\\\s+\", \"_\");",
        "grade-84": {
            "execution": 0
        },
        "74": "String underscore = \"_\";\n        String dashes = \"-\";\n        StringBuilder buffer = new StringBuilder();\n        int consecutive_spaces = 0;\n        for (int i = 0; i < text.length(); i++) {\n            char current = text.charAt(i);\n            char previous = i > 0 ? text.charAt(i - 1) : ' ';\n            char next = i < text.length() - 1 ? text.charAt(i + 1) : ' ';\n            if (current == ' ') {\n                if (previous == ' ') {\n                    consecutive_spaces++;\n                } else {\n                    consecutive_spaces = 1;\n                }\n                if (consecutive_spaces == 1) {\n                    buffer.append(underscore);\n                } else if (consecutive_spaces == 2) {\n                    buffer.append(dashes);\n                }\n            } else {\n                consecutive_spaces = 0;\n                buffer.append(current);\n            }\n        }\n        return buffer.toString();",
        "grade-74": {
            "execution": 0
        },
        "68": "String[] words = text.split(\" \");\n        String res = \"\";\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].equals(\"\")) {\n                continue;\n            }\n            res += words[i];\n            if (i < words.length - 1) {\n                if (words[i + 1].equals(\"\")) {\n                    res += \"-\";\n                } else {\n                    res += \"_\";\n                }\n            }\n        }\n        return res;",
        "grade-68": {
            "execution": 0
        },
        "40": "throw new UnsupportedOperationException(\"Not implemented\");",
        "grade-40": {
            "execution": 0
        },
        "30": "StringBuilder sb = new StringBuilder();\n        int count = 0;\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c == ' ') {\n                count++;\n                if (count < 3) {\n                    sb.append(\"_\");\n                }\n            } else {\n                if (count >= 3) {\n                    sb.append(\"-\");\n                }\n                sb.append(c);\n                count = 0;\n            }\n        }\n        return sb.toString();",
        "grade-30": {
            "execution": 0
        },
        "193": "StringBuilder sb = new StringBuilder();\n        int count = 0;\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == ' ') {\n                count++;\n                if (count >= 2) {\n                    sb.append('-');\n                    count = 0;\n                }\n            } else {\n                sb.append(text.charAt(i));\n                count = 0;\n            }\n        }\n        return sb.toString();",
        "grade-193": {
            "execution": 0
        },
        "25": "return \"\";",
        "grade-25": {
            "execution": 0
        },
        "138": "return text.replaceAll(\" +\", \" \").replaceAll(\" \", \"_\").replaceAll(\" {2}\", \"-\");",
        "grade-138": {
            "execution": 0
        },
        "8": "if (text == null) return null;\n        if (text.length() == 0) return \"\";\n        text = text.trim();\n        if (text.length() == 0) return \"\";\n        return text.replaceAll(\"\\\\s+\", \"-\");",
        "grade-8": {
            "execution": 0
        },
        "7": "return null;",
        "grade-7": {
            "execution": 0
        },
        "27": "String[] s = text.split(\" \");\n        StringBuffer sb = new StringBuffer();\n        for (int i = 0; i < s.length; i++) {\n            if (i > 0) sb.append(\"_\");\n            if (s[i].length() > 0) {\n                sb.append(s[i]);\n            }\n        }\n        if (sb.length() > 0) {\n            StringBuffer sb2 = new StringBuffer();\n            String[] s2 = sb.toString().split(\"_\");\n            for (int i = 0; i < s2.length; i++) {\n                if (i > 0) sb2.append(\"-\");\n                if (s2[i].length() > 0) {\n                    sb2.append(s2[i]);\n                }\n            }\n            return sb2.toString();\n        }\n        return \"\";",
        "grade-27": {
            "execution": 0
        },
        "66": "// Implement me\n        return null;",
        "grade-66": {
            "execution": 0
        },
        "70": "StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == ' ') {\n                while (i < text.length() && text.charAt(i) == ' ') {\n                    sb.append('-');\n                    i++;\n                }\n                if (i == text.length())\n                    break;\n                sb.append('_');\n            } else {\n                sb.append(text.charAt(i));\n            }\n        }\n        return sb.toString();",
        "grade-70": {
            "execution": 0
        },
        "177": "StringBuilder builder = new StringBuilder();\n        String[] array = text.split(\" \");\n        for (int i = 0; i < array.length; i++) {\n            if (array[i].length() == 0) {\n                builder.append(\"-\");\n            } else {\n                builder.append(array[i]);\n                if (i != array.length - 1) {\n                    builder.append(\"_\");\n                }\n            }\n        }\n        return builder.toString();",
        "grade-177": {
            "execution": 0
        },
        "198": "// Good luck!\n        String result = text.replaceAll(\" +\", \"_\");\n        result = result.replaceAll(\"_+\", \"-\");\n        return result;",
        "grade-198": {
            "execution": 0
        },
        "60": "throw new RuntimeException(\"fixMe\");",
        "grade-60": {
            "execution": 0
        },
        "137": "text = text.replace(\" \",\"_\");\n        return text.replaceAll(\"__+\",\"-\");",
        "grade-137": {
            "execution": 0
        },
        "67": "StringBuilder build = new StringBuilder();\n        boolean f = false;\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == ' ') {\n                if (f) {\n                    build.append('-');\n                } else {\n                    build.append('_');\n                    f = true;\n                }\n            } else {\n                build.append(text.charAt(i));\n                f = false;\n            }\n        }\n        return build.toString();",
        "grade-67": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array of numbers as input and returns \n    // the number of elements in the array that are greater than 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static int specialFilter(ArrayList<Integer> nums) {\n",
        "snippet": [
            "        int count = 0;\n        for (int num : nums) {\n            if (num > 10) {\n                String odd_digits = \"13579\";\n                String number_as_string = String.valueOf(num);\n                if (odd_digits.indexOf(number_as_string.charAt(0)) != -1 && odd_digits.indexOf(number_as_string.charAt(number_as_string.length() - 1)) != -1) {\n                    count += 1;\n                }\n            }\n        }\n        return count;\n    }\n}"
        ],
        "simplified": "Write a function that takes an array of numbers as input and returns the number of elements in the array that are greater than 10 and both first and last digits of a number are odd (1, 3, 5, 7, 9).",
        "task_id": "146",
        "188": "return (int) nums.stream().filter(num -> num > 10 && (num % 10) % 2 != 0 && (num / 10) % 2 != 0).count();",
        "grade-188": {
            "execution": 0
        },
        "32": "int result = 0;\n        for (int n : nums) {\n            String s = String.valueOf(n);\n            if (s.length() > 1) {\n                int i = Integer.parseInt(String.valueOf(s.charAt(0)));\n                int j = Integer.parseInt(String.valueOf(s.charAt(s.length() - 1)));\n                if (n > 10 && (i % 2 == 1 && j % 2 == 1)) {\n                    result++;\n                }\n            }\n        }\n        return result;",
        "grade-32": {
            "execution": 0
        },
        "7": "return nums.stream().filter(i -> i > 10 && (i % 10) % 2 != 0 && (i / 10) % 2 != 0).collect(Collectors.toList()).size();",
        "grade-7": {
            "execution": 0
        },
        "81": "int c = 0;\n        for (int num : nums) {\n            if (num > 10 && isOdd(num % 10) && isOdd(num / 100)) {\n                c++;\n            }\n        }\n        return c;",
        "grade-81": {
            "execution": 0
        },
        "73": "// your code here\n        return nums.stream().filter(i -> i > 10).filter(i -> isFirstOdd(i) && isLastOdd(i)).toArray().length;",
        "grade-73": {
            "execution": 0
        },
        "67": "// Type your solution here\n        return 0;",
        "grade-67": {
            "execution": 0
        },
        "40": "int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            int n = nums.get(i);\n            if (n > 10 && n%2 != 0 && n%10%2 != 0) {\n                int m = n;\n                while (m > 0) {\n                    m /= 10;\n                }\n                if (m%2 != 0) {\n                    count++;\n                }\n            }\n        }\n        return count;",
        "grade-40": {
            "execution": 0
        },
        "30": "int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10) {\n                if (nums.get(i) % 2 == 1) {\n                    if (nums.get(i) % 10 == 1 || nums.get(i) % 10 == 3 || nums.get(i) % 10 == 5 || nums.get(i) % 10 == 7 || nums.get(i) % 10 == 9) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;",
        "grade-30": {
            "execution": 0
        },
        "162": "// Your Code Here\n        return 0;",
        "grade-162": {
            "execution": 0
        },
        "25": "return (int) nums.stream().filter(x -> x > 10 &&\n                                               (x % 10) % 2 != 0 &&\n                                               (x / 10) % 2 != 0).count();",
        "grade-25": {
            "execution": 0
        },
        "175": "int counter = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10) {\n                if (isOdd(nums.get(i)) &&\n                    isOdd(nums.get(i) / 10)) {\n                    counter++;\n                }\n            }\n        }\n        return counter;",
        "grade-175": {
            "execution": 0
        },
        "128": "int count = 0;\n        for (int n : nums) {\n            if (n > 10 && n % 2 == 1 && (n % 10) % 2 == 1) {\n                count++;\n            }\n        }\n        return count;",
        "grade-128": {
            "execution": 0
        },
        "9": "// Your code goes here",
        "grade-9": {
            "execution": 0
        },
        "8": "//----------------------------\n        //-----YOUR CODE HERE---------\n        //----------------------------\n        //first, we filter out the numbers that are less than 10\n        ArrayList<Integer> nums2 = new ArrayList<Integer>();\n        for(int i = 0; i < nums.size(); i++){\n            if(nums.get(i) > 10){\n                nums2.add(nums.get(i));\n            }\n        }\n        //now, we take the first digit of the number, and check if it is odd\n        //if it is, we take the last digit of the number, and check if it is odd\n        //if it is, we add 1 to the count\n        int count = 0;\n        for(int i = 0; i < nums2.size(); i++){\n            String theNum = Integer.toString(nums2.get(i));\n            if(Integer.parseInt(theNum.substring(0,1)) % 2 != 0){\n                if(Integer.parseInt(theNum.substring(theNum.length()-1)) % 2 != 0){\n                    count++;\n                }\n            }\n        }\n        return count;",
        "grade-8": {
            "execution": 1
        },
        "26": "int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10) {\n                int first = nums.get(i) / 10;\n                int last = nums.get(i) % 10;\n                if (first % 2 != 0 && last % 2 != 0) {\n                    count++;\n                }\n            }\n        }\n        return count;",
        "grade-26": {
            "execution": 0
        },
        "65": "return nums.stream().filter(e -> e > 10 && e % 2 != 0 && e / 10 % 2 != 0).collect(Collectors.toList()).size();",
        "grade-65": {
            "execution": 0
        },
        "70": "// code here\n    \treturn 0;",
        "grade-70": {
            "execution": 0
        },
        "151": "// Write your code here.",
        "grade-151": {
            "execution": 0
        },
        "178": "int count = 0;\n        for (int n : nums) {\n            if (n > 10 && n % 2 == 1 && n % 10 == 1) {\n                count++;\n            }\n        }\n        return count;",
        "grade-178": {
            "execution": 0
        },
        "166": "int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            int curr = nums.get(i);\n            if (curr > 10) {\n                String str = Integer.toString(curr);\n                int first = Character.getNumericValue(str.charAt(0));\n                int last = Character.getNumericValue(str.charAt(str.length() - 1));\n                if (first % 2 != 0 && last % 2 != 0) {\n                    count++;\n                }\n            }\n        }\n        return count;",
        "grade-166": {
            "execution": 1
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given the name of a class (a string) and a list of extensions.\n    // The extensions are to be used to load additional classes to the class. The\n    // strength of the extension is as follows: Let CAP be the number of the uppercase\n    // letters in the extension's name, and let SM be the number of lowercase letters \n    // in the extension's name, the strength is given by the fraction CAP - SM. \n    // You should find the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n    // If there are two or more extensions with the same strength, you should\n    // choose the one that comes first in the list.\n    // For example, if you are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    public static String StrongestExtension(String class_name, ArrayList<String> extensions) {\n",
        "snippet": [
            "        String strong = extensions.get(0);\n        int my_val = (int) (strong.chars().filter(Character::isUpperCase).count() - strong.chars().filter(Character::isLowerCase).count());\n        for (String s : extensions) {\n            int val = (int) (s.chars().filter(Character::isUpperCase).count() - s.chars().filter(Character::isLowerCase).count());\n            if (val > my_val) {\n                strong = s;\n                my_val = val;\n            }\n        }\n        return class_name + \".\" + strong;\n    }\n}"
        ],
        "simplified": "You will be given the name of a class (a string) and a list of extensions. The extensions are to be used to load additional classes to the class. The strength of the extension is as follows: Let CAP be the number of the uppercase letters in the extension's name, and let SM be the number of lowercase letters in the extension's name, the strength is given by the fraction CAP - SM. You should find the strongest extension and return a string in this format: ClassName.StrongestExtensionName. If there are two or more extensions with the same strength, you should choose the one that comes first in the list. For example, if you are given \"Slices\" as the class and a list of the extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension (its strength is -1).",
        "task_id": "153",
        "175": "float largest = 0.0f;\n        String strongest = \"\";\n        for (String extension : extensions) {\n            int upper_count = 0;\n            int lower_count = 0;\n            for (int i = 0; i < extension.length(); i++) {\n                if (Character.isUpperCase(extension.charAt(i))) {\n                    upper_count++;\n                } else {\n                    lower_count++;\n                }\n            }\n            float strength = (float) upper_count - (float) lower_count;\n            if (strength > largest) {\n                largest = strength;\n                strongest = extension;\n            }\n        }\n        return class_name + \".\" + strongest;",
        "grade-175": {
            "execution": 0
        },
        "30": "// Your code here.\n        int bestCap = 0;\n        int bestSm = 0;\n        String bestExtension = \"\";\n        for (String extension : extensions) {\n            int cap = 0;\n            int sm = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    cap++;\n                } else {\n                    sm++;\n                }\n            }\n            if (cap - sm > bestCap - bestSm) {\n                bestCap = cap;\n                bestSm = sm;\n                bestExtension = extension;\n            }\n        }\n        return class_name + \".\" + bestExtension;",
        "grade-30": {
            "execution": 0
        },
        "6": "// Write your code here\n        if (extensions.size() == 0) {\n            return class_name;\n        }\n        ArrayList<Double> strength = new ArrayList<Double>();\n        for (String ext : extensions) {\n            int cap = ext.chars().filter(Character::isUpperCase).count();\n            int sm = ext.chars().filter(Character::isLowerCase).count();\n            strength.add((double) cap - sm);\n        }\n        int max_index = 0;\n        for (int i = 1; i < strength.size(); i++) {\n            if (strength.get(i) > strength.get(max_index)) {\n                max_index = i;\n            }\n        }\n        return class_name + \".\" + extensions.get(max_index);",
        "grade-6": {
            "execution": 0
        },
        "73": "// write your code here",
        "grade-73": {
            "execution": 0
        },
        "65": "double max = 0;\n        String ans = class_name + \".\" + extensions.get(0);\n        for (String extension : extensions) {\n            double strength = 0;\n            for (int i = 0; i < extension.length(); i++) {\n                if (Character.isUpperCase(extension.charAt(i))) {\n                    strength++;\n                } else {\n                    strength--;\n                }\n            }\n            if (Math.abs(strength) > max) {\n                max = Math.abs(strength);\n                ans = class_name + \".\" + extension;\n            }\n        }\n        return ans;",
        "grade-65": {
            "execution": 0
        },
        "60": "var cnt = new HashMap<String, Integer>();\n        for (var i = 0; i < extensions.size(); i++) {\n            var cap = 0;\n            var sm = 0;\n            for (var j = 0; j < extensions.get(i).length(); j++) {\n                if (Character.isUpperCase(extensions.get(i).charAt(j))) cap++;\n                else sm++;\n            }\n            var val = cap - sm;\n            if (!cnt.containsKey(extensions.get(i))) {\n                cnt.put(extensions.get(i), val);\n            }\n        }\n        var max = Collections.max(cnt.values());\n        var max_keys = new ArrayList<String>();\n        for (var k : cnt.keySet()) {\n            if (cnt.get(k) == max) {\n                max_keys.add(k);\n            }\n        }\n        var res = class_name + \".\" + max_keys.get(0);\n        return res;",
        "grade-60": {
            "execution": 0
        },
        "38": "double max = Double.NEGATIVE_INFINITY;\n        String max_name = \"\";\n        for (String s : extensions) {\n            double strength = (double)s.replaceAll(\"[^A-Z]\", \"\").length() - s.replaceAll(\"[^a-z]\", \"\").length();\n            if (strength > max) {\n                max = strength;\n                max_name = s;\n            }\n        }\n        return class_name + \".\" + max_name;",
        "grade-38": {
            "execution": 1
        },
        "27": "String max_ext = \"\";\n        int max_ext_strength = 0;\n        for (String ext : extensions) {\n            int ext_strength = ext.chars().filter(Character::isUpperCase).count() - ext.chars().filter(Character::isLowerCase).count();\n            if (ext_strength >= max_ext_strength) {\n                max_ext_strength = ext_strength;\n                max_ext = ext;\n            }\n        }\n        return class_name + \".\" + max_ext;",
        "grade-27": {
            "execution": 0
        },
        "185": "int cap, sm, strongest_cap = -1, strongest_sm = 0;\n        String strongest_extension = \"\";\n        for (String extension : extensions) {\n            cap = extension.replaceAll(\"[^A-Z]\", \"\").length();\n            sm = extension.replaceAll(\"[^a-z]\", \"\").length();\n            if (cap - sm > strongest_cap) {\n                strongest_cap = cap - sm;\n                strongest_sm = sm;\n                strongest_extension = extension;\n            } else if (cap - sm == strongest_cap && sm < strongest_sm) {\n                strongest_cap = cap - sm;\n                strongest_sm = sm;\n                strongest_extension = extension;\n            }\n        }\n        return class_name + \".\" + strongest_extension;",
        "grade-185": {
            "execution": 0
        },
        "147": "try {\n            int max = 0;\n            String str = \"\";\n            for (String extension : extensions) {\n                int cap = 0;\n                int sm = 0;\n                for (int i = 0; i < extension.length(); i++) {\n                    if (Character.isUpperCase(extension.charAt(i))) {\n                        cap++;\n                    } else {\n                        sm++;\n                    }\n                }\n                if (cap - sm > max) {\n                    max = cap - sm;\n                    str = extension;\n                }\n            }\n            return class_name + \".\" + str;\n        } catch (Exception e) {\n            return \"\";\n        }",
        "grade-147": {
            "execution": 0
        },
        "23": "class_name = class_name.replace(\"_\", \"\");\n        int max = 0;\n        String max_ext = null;\n        for (String ext : extensions) {\n            int caps = ext.length() - ext.replaceAll(\"[A-Z]\", \"\").length();\n            int smalls = ext.length() - ext.replaceAll(\"[a-z]\", \"\").length();\n            int diff = caps - smalls;\n            if (max_ext == null || max < diff) {\n                max = diff;\n                max_ext = ext;\n            }\n        }\n        return class_name + \".\" + max_ext;",
        "grade-23": {
            "execution": 0
        },
        "161": "int strong = 0;\n        String best = \"\";\n        for (String ext : extensions) {\n            int caps = 0;\n            int lower = 0;\n            for (char c : ext.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    caps++;\n                } else {\n                    lower++;\n                }\n            }\n            int comp = caps - lower;\n            if (comp > strong) {\n                strong = comp;\n                best = ext;\n            }\n        }\n        return class_name + \".\" + best;",
        "grade-161": {
            "execution": 0
        },
        "113": "System.out.printf(\"Given class: %s, extensions: %s\\n\", class_name, extensions);\n        return \"\";",
        "grade-113": {
            "execution": 0
        },
        "8": "double max = 0;\n        String maxExtension = \"\";\n        for (String extension : extensions) {\n            double strength = 0;\n            for (int i = 0; i < extension.length(); i++) {\n                strength += Character.isUpperCase(extension.charAt(i)) ? 1 : -1;\n            }\n            if (strength > max) {\n                max = strength;\n                maxExtension = extension;\n            }\n        }\n        return class_name + \".\" + maxExtension;",
        "grade-8": {
            "execution": 0
        },
        "7": "// your code goes here\n        double max_strength = 0;\n        String max_extension = \"\";\n        for (String e : extensions) {\n            int cap = 0;\n            int sm = 0;\n            for (int i = 0; i < e.length(); i++) {\n                if (Character.isUpperCase(e.charAt(i))) {\n                    cap++;\n                } else {\n                    sm++;\n                }\n            }\n            double strength = cap - sm;\n            if (strength > max_strength) {\n                max_strength = strength;\n                max_extension = e;\n            }\n        }\n        return class_name + \".\" + max_extension;",
        "grade-7": {
            "execution": 0
        },
        "24": "// Your code is here...\n        double maxStrength = 0;\n        String ret = \"\";\n        for (String s : extensions) {\n            double strength = (double)s.replaceAll(\"[^A-Z]\", \"\").length() - \n                (double)s.replaceAll(\"[^a-z]\", \"\").length();\n            if (strength > maxStrength) {\n                maxStrength = strength;\n                ret = s;\n            }\n        }\n        return class_name + \".\" + ret;",
        "grade-24": {
            "execution": 0
        },
        "58": "if (extensions.size() == 0) return class_name;\n        int strength = 0;\n        String ext = \"\";\n        for (String extension : extensions) {\n            int temp = 0;\n            for (char c : extension.toCharArray())\n                if (Character.isUpperCase(c)) temp++;\n                else temp--;\n            if (temp > strength) {\n                strength = temp;\n                ext = extension;\n            }\n        }\n        return class_name + \".\" + ext;",
        "grade-58": {
            "execution": 0
        },
        "62": "// Your code here\n        return \"\";",
        "grade-62": {
            "execution": 0
        },
        "136": "return class_name + \".\" + extensions.stream().reduce((a, b) -> {\n            int a_cap = (int)a.chars().filter(c -> Character.isUpperCase(c)).count();\n            int a_sm = (int)a.chars().filter(c -> Character.isLowerCase(c)).count();\n            int b_cap = (int)b.chars().filter(c -> Character.isUpperCase(c)).count();\n            int b_sm = (int)b.chars().filter(c -> Character.isLowerCase(c)).count();\n            return (a_cap - a_sm > b_cap - b_sm) ? a : b;\n        }).get();",
        "grade-136": {
            "execution": 0
        },
        "166": "if (extensions.size() == 0) {\n            return class_name;\n        }\n        if (extensions.size() == 1) {\n            return class_name + \".\" + extensions.get(0);\n        }\n        ArrayList<Pair<String, Double>> extension_strengths = new ArrayList<>();\n        for (String ext : extensions) {\n            int lower = 0;\n            int upper = 0;\n            for (int i = 0; i < ext.length(); i++) {\n                if (Character.isUpperCase(ext.charAt(i))) {\n                    upper++;\n                } else {\n                    lower++;\n                }\n            }\n            double strength = (double) upper - (double) lower;\n            extension_strengths.add(new Pair<String, Double>(ext, strength));\n        }\n        extension_strengths.sort((a, b) -> Double.compare(b.getValue1(), a.getValue1()));\n        return class_name + \".\" + extension_strengths.get(0).getValue0();",
        "grade-166": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    // which is similar to matrix, however, unlike matrices,\n    // each row may contain a different number of columns.\n    // Given lst, and integer x, find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    // Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates of the row by columns in descending order.\n    // Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>> lst, int x) {\n",
        "snippet": [
            "        List<List<Integer>> coords = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            List<List<Integer>> row = new ArrayList<>();\n            for (int j = lst.get(i).size() - 1; j >= 0; j--) {\n                if (lst.get(i).get(j) == x) {\n                    row.add(Arrays.asList(i, j));\n                }\n            }\n            coords.addAll(row);\n        }\n        return coords;\n    }\n}"
        ],
        "simplified": "You are given a 2 dimensional data, as a nested lists, which is similar to matrix, however, unlike matrices, each row may contain a different number of columns. Given lst, and integer x, find integers x in the list, and return list of tuples, [(x1, y1), (x2, y2) ...] such that each tuple is a coordinate - (row, columns), starting with 0. Sort coordinates initially by rows in ascending order. Also, sort coordinates of the row by columns in descending order.",
        "task_id": "87",
        "177": "ArrayList<Pair<Integer, Integer>> res = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Integer> row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    res.add(new Pair<>(i, j));\n                }\n            }\n        }\n        return res;",
        "grade-177": {
            "execution": 0
        },
        "29": "// your code here\n        ArrayList<Pair<Integer, Integer>> result = new ArrayList<Pair<Integer, Integer>>();\n        ArrayList<Pair<Integer, Integer>> temp = new ArrayList<Pair<Integer, Integer>>();\n        Pair<Integer, Integer> p = new Pair<Integer, Integer>(0, 0);\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    p = new Pair<Integer, Integer>(i, j);\n                    temp.add(p);\n                }\n            }\n        }\n        for (int i = 0; i < temp.size(); i++) {\n            for (int j = i + 1; j < temp.size(); j++) {\n                if (temp.get(i).getValue0() > temp.get(j).getValue0()) {\n                    p = temp.get(i);\n                    temp.set(i, temp.get(j));\n                    temp.set(j, p);\n                }\n            }\n        }\n        for (int i = 0; i < temp.size(); i++) {\n            for (int j = i + 1; j < temp.size(); j++) {\n                if (temp.get(i).getValue0() == temp.get(j).getValue0()) {\n                    if (temp.get(i).getValue1() < temp.get(j).getValue1()) {\n                        p = temp.get(i);\n                        temp.set(i, temp.get(j));\n                        temp.set(j, p);\n                    }\n                }\n            }\n        }\n        for (int i = 0; i < temp.size(); i++) {\n            result.add(temp.get(i));\n        }\n        return result;",
        "grade-29": {
            "execution": 0
        },
        "6": "int row = 0;\n        int col = 0;\n        ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n        while (row < lst.size()) {\n            col = 0;\n            while (col < lst.get(row).size()) {\n                if (lst.get(row).get(col) == x) {\n                    result.add(new Pair<>(row, col));\n                }\n                col++;\n            }\n            row++;\n        }\n        if (result.size() == 0) {\n            return result;\n        }\n        for (int i = 0; i < result.size(); i++) {\n            for (int j = i + 1; j < result.size(); j++) {\n                if (result.get(i).getValue0() > result.get(j).getValue0()) {\n                    Pair<Integer, Integer> temp = result.get(i);\n                    result.set(i, result.get(j));\n                    result.set(j, temp);\n                }\n            }\n        }\n        for (int i = 0; i < result.size(); i++) {\n            for (int j = i + 1; j < result.size(); j++) {\n                if (result.get(i).getValue0() == result.get(j).getValue0()) {\n                    if (result.get(i).getValue1() < result.get(j).getValue1()) {\n                        Pair<Integer, Integer> temp = result.get(i);\n                        result.set(i, result.get(j));\n                        result.set(j, temp);\n                    }\n                }\n            }\n        }\n        return result;",
        "grade-6": {
            "execution": 0
        },
        "73": "ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n        int row = 0;\n        for (ArrayList<Integer> r : lst) {\n            for (int i = 0; i < r.size(); i++) {\n                if (r.get(i) == x) {\n                    result.add(new Pair<>(row, i));\n                }\n            }\n            row++;\n        }\n        result.sort((a, b) -> {\n            if (a.getValue0() != b.getValue0()) {\n                return a.getValue0() - b.getValue0();\n            }\n            return b.getValue1() - a.getValue1();\n        });\n        return result;",
        "grade-73": {
            "execution": 0
        },
        "65": "ArrayList<Pair<Integer, Integer>> coords = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x)\n                    coords.add(new Pair<>(i, j));\n            }\n        }\n        Collections.sort(coords, new Comparator<Pair<Integer, Integer>>() {\n            @Override\n            public int compare(Pair<Integer, Integer> o1, Pair<Integer, Integer> o2) {\n                return o1.getValue0().compareTo(o2.getValue0());\n            }\n        });\n        ArrayList<Pair<Integer, Integer>> sorted = new ArrayList<>();\n        for (int i = 0; i < coords.size(); i++) {\n            Pair<Integer, Integer> curr = coords.get(i);\n            if (i > 0 && coords.get(i - 1).getValue0() == curr.getValue0()) {\n                sorted.add(new Pair<>(curr.getValue0(), curr.getValue1()));\n            } else {\n                ArrayList<Pair<Integer, Integer>> temp = new ArrayList<>();\n                for (int j = i; j < coords.size(); j++) {\n                    if (coords.get(j).getValue0() == curr.getValue0())\n                        temp.add(coords.get(j));\n                }\n                Collections.sort(temp, new Comparator<Pair<Integer, Integer>>() {\n                    @Override\n                    public int compare(Pair<Integer, Integer> o1, Pair<Integer, Integer> o2) {\n                        return o2.getValue1().compareTo(o1.getValue1());\n                    }\n                });\n                sorted.addAll(temp);\n                i += temp.size() - 1;\n            }\n        }\n        return sorted;",
        "grade-65": {
            "execution": 0
        },
        "60": "ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    result.add(new Pair<>(i, j));\n                }\n            }\n        }\n        Comparator<Pair<Integer, Integer>> comparator = Comparator.comparing(Pair::getValue0);\n        comparator = comparator.thenComparing(p -> -p.getValue1());\n        result.sort(comparator);\n        return result;",
        "grade-60": {
            "execution": 0
        },
        "36": "ArrayList<Pair<Integer, Integer>> pos = new ArrayList<>();\n        int i = 0;\n        for (ArrayList<Integer> l : lst) {\n            int j = 0;\n            for (int v : l) {\n                if (v == x) {\n                    pos.add(new Pair<>(i, j));\n                }\n                j++;\n            }\n            i++;\n        }\n        pos.sort((a, b) -> {\n            if (a.getValue0() != b.getValue0()) {\n                return a.getValue0() - b.getValue0();\n            }\n            return b.getValue1() - a.getValue1();\n        });\n        return pos;",
        "grade-36": {
            "execution": 0
        },
        "27": "ArrayList<Pair<Integer, Integer>> res = new ArrayList<>();\n        int row = 0;\n        for (ArrayList<Integer> e : lst) {\n            for (int i = 0; i < e.size(); i++) {\n                if (e.get(i) == x) {\n                    res.add(new Pair<>(row, i));\n                }\n            }\n            row++;\n        }\n        Collections.sort(res, new Comparator<Pair<Integer, Integer>>() {\n            @Override\n            public int compare(Pair<Integer, Integer> o1, Pair<Integer, Integer> o2) {\n                if (o1.getValue0().equals(o2.getValue0())) {\n                    return o2.getValue1().compareTo(o1.getValue1());\n                }\n                return o1.getValue0().compareTo(o2.getValue0());\n            }\n        });\n        return res;",
        "grade-27": {
            "execution": 0
        },
        "191": "// code here",
        "grade-191": {
            "execution": 0
        },
        "148": "ArrayList<Pair<Integer, Integer>> sol = new ArrayList<>();\n        for (int row = 0; row < lst.size(); row++) {\n            for (int col = 0; col < lst.get(row).size(); col++) {\n                if (lst.get(row).get(col) == x) {\n                    sol.add(new Pair<>(row, col));\n                }\n            }\n        }\n        sol.sort((a, b) -> {\n            if (a.getValue0() < b.getValue0()) {\n                return -1;\n            } else if (a.getValue0() > b.getValue0()) {\n                return 1;\n            } else {\n                if (a.getValue1() > b.getValue1()) {\n                    return -1;\n                } else if (a.getValue1() < b.getValue1()) {\n                    return 1;\n                } else {\n                    return 0;\n                }\n            }\n        });\n        return sol;",
        "grade-148": {
            "execution": 0
        },
        "23": "return new ArrayList<>();",
        "grade-23": {
            "execution": 0
        },
        "162": "// implement function here",
        "grade-162": {
            "execution": 0
        },
        "115": "ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    result.add(new Pair<>(i, j));\n                }\n            }\n        }\n        Collections.sort(result, (p1, p2) -> {\n            if (p1.getValue0() == p2.getValue0()) {\n                return p2.getValue1() - p1.getValue1();\n            }\n            return p1.getValue0() - p2.getValue0();\n        });\n        return result;",
        "grade-115": {
            "execution": 0
        },
        "8": "ArrayList<Pair<Integer, Integer>> res = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Integer> row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                int el = row.get(j);\n                if (el == x) {\n                    res.add(new Pair<>(i, j));\n                }\n            }\n        }\n        res.sort((a, b) -> (a.getValue0() - b.getValue0()));\n        res.sort((a, b) -> (b.getValue1() - a.getValue1()));\n        return res;",
        "grade-8": {
            "execution": 0
        },
        "7": "ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    result.add(new Pair<>(i, j));\n                }\n            }\n        }\n        Collections.sort(result, new Comparator<Pair<Integer, Integer>>() {\n            @Override\n            public int compare(Pair<Integer, Integer> o1, Pair<Integer, Integer> o2) {\n                return o1.getValue0().compareTo(o2.getValue0());\n            }\n        });\n        Collections.sort(result, new Comparator<Pair<Integer, Integer>>() {\n            @Override\n            public int compare(Pair<Integer, Integer> o1, Pair<Integer, Integer> o2) {\n                return o2.getValue1().compareTo(o1.getValue1());\n            }\n        });\n        return result;",
        "grade-7": {
            "execution": 0
        },
        "24": "// x is int\n        // lst is list\n        // return list of tuples (row, column)\n        // 0-indexed\n        // first sort by row, then sort by column\n        // if equal rows, sort row by column DESC\n        // return [] if no match\n        ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    result.add(new Pair<>(i, j));\n                }\n            }\n        }\n        // sort by row ascending\n        Collections.sort(result, new Comparator<Pair<Integer, Integer>>() {\n            @Override\n            public int compare(Pair<Integer, Integer> o1, Pair<Integer, Integer> o2) {\n                return o1.getValue0().compareTo(o2.getValue0());\n            }\n        });\n        // sort by col descending\n        Collections.sort(result, new Comparator<Pair<Integer, Integer>>() {\n            @Override\n            public int compare(Pair<Integer, Integer> o1, Pair<Integer, Integer> o2) {\n                return o2.getValue1().compareTo(o1.getValue1());\n            }\n        });\n        return result;",
        "grade-24": {
            "execution": 0
        },
        "58": "ArrayList<Pair<Integer, Integer>> res = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    res.add(new Pair<>(i, j));\n                }\n            }\n        }\n        // res.sort((a, b) -> {\n        //     int cmp = Integer.compare(a.getValue0(), b.getValue0());\n        //     if (cmp == 0) {\n        //         return Integer.compare(b.getValue1(), a.getValue1());\n        //     }\n        //     return cmp;\n        // });\n        res.sort(Comparator.comparing(Pair::getValue0).thenComparing(Pair::getValue1, Comparator.reverseOrder()));\n        return res;",
        "grade-58": {
            "execution": 0
        },
        "62": "if (lst.size() == 0) {\n            return new ArrayList<Pair<Integer, Integer>>();\n        }\n        ArrayList<Pair<Integer, Integer>> res = new ArrayList<Pair<Integer, Integer>>();\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    res.add(new Pair<Integer, Integer>(i, j));\n                }\n            }\n        }\n        Collections.sort(res, new Comparator<Pair<Integer, Integer>>() {\n            @Override\n            public int compare(Pair<Integer, Integer> o1, Pair<Integer, Integer> o2) {\n                if (o1.getValue0().equals(o2.getValue0())) {\n                    return o2.getValue1().compareTo(o1.getValue1());\n                }\n                return o1.getValue0().compareTo(o2.getValue0());\n            }\n        });\n        return res;",
        "grade-62": {
            "execution": 0
        },
        "138": "return Stream.of(lst)\n            .flatMap(List::stream)\n            .flatMap(i -> \n                Stream.of(i)\n                    .flatMap(j -> \n                        Stream.of(j)\n                            .filter(k -> k == x)\n                            .map(k -> \n                                Pair.with(\n                                    lst.indexOf(i),\n                                    i.indexOf(j)\n                                )\n                            )\n                    )\n            )\n            .collect(Collectors.toCollection(ArrayList::new));",
        "grade-138": {
            "execution": 0
        },
        "166": "ArrayList<Pair<Integer, Integer>> pairs = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            int start = 0;\n            while (true) {\n                int j = start + lst.get(i).subList(start, lst.get(i).size()).indexOf(x);\n                if (j == -1) {\n                    break;\n                }\n                start = j + 1;\n                pairs.add(new Pair<>(i, j));\n            }\n        }\n        Collections.sort(pairs, (a, b) -> {\n            if (a.getValue0() != b.getValue0()) {\n                return a.getValue0() - b.getValue0();\n            }\n            return b.getValue1() - a.getValue1();\n        });\n        return pairs;",
        "grade-166": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return median of elements in the list l.\n    // >>> median([3, 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n    public static float median(ArrayList<Integer> l) {\n",
        "snippet": [
            "        List<Integer> list = l;\n        Collections.sort(list);\n        if (l.size() % 2 == 1) {\n            return l.get(l.size() / 2);\n        } else {\n            return (l.get(l.size() / 2 - 1) + l.get(l.size() / 2)) / 2.0;\n        }\n    }\n}"
        ],
        "simplified": "Return median of elements in the list l.",
        "task_id": "47",
        "194": "Collections.sort(l);\n        int n = l.size();\n        float m = n % 2 == 0 ? (l.get(n / 2) + l.get(n / 2 - 1)) / 2.0f : l.get(n / 2);\n        return m;",
        "grade-194": {
            "execution": 1
        },
        "30": "// TODO: fill me in\n        return 0;",
        "grade-30": {
            "execution": 0
        },
        "6": "//your code goes here\n        int n = l.size();\n        l.sort(null);\n        if(n%2 == 0)\n        {\n            return (float)(l.get(n/2-1)+l.get(n/2))/2;\n        }\n        else\n        {\n            return l.get(n/2);\n        }",
        "grade-6": {
            "execution": 1
        },
        "77": "Collections.sort(l);\n        int N = l.size();\n        if (N % 2 == 0) {\n            return (l.get(N / 2) + l.get(N / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(N / 2);\n        }",
        "grade-77": {
            "execution": 1
        },
        "68": "// Insert the elements of l into a sorted list\n        ArrayList<Integer> sortedList = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            int number = l.get(i);\n            if (sortedList.size() == 0) {\n                sortedList.add(number);\n            } else {\n                int j = 0;\n                while (j < sortedList.size() && number > sortedList.get(j)) {\n                    j++;\n                }\n                sortedList.add(j, number);\n            }\n        }\n        // Return the median\n        if (sortedList.size() % 2 == 0) {\n            return (sortedList.get(sortedList.size() / 2) + sortedList.get(sortedList.size() / 2 - 1)) / 2f;\n        } else {\n            return sortedList.get(sortedList.size() / 2);\n        }",
        "grade-68": {
            "execution": 1
        },
        "63": "//Float f = null;\n        float a = 0;\n        Collections.sort(l);\n        int x = l.size();\n        float y = (float)x/2;\n        int z = l.size()/2;\n        if(y - z == 0)\n        {\n            int sum = 0;\n            sum = l.get(x/2) + l.get((x/2)-1);\n            a = (float)sum/2;\n        }\n        else\n        {\n            a = l.get(x/2);\n        }\n        return a;",
        "grade-63": {
            "execution": 1
        },
        "37": "throw new RuntimeException(\"Not implemented\");",
        "grade-37": {
            "execution": 0
        },
        "26": "Collections.sort(l);\n        float mid = (float) (l.size()/2);\n        return l.size() % 2 == 0? (float) (l.get((int) mid) + l.get((int) mid - 1))/2 : l.get((int) mid);",
        "grade-26": {
            "execution": 1
        },
        "162": "// Replace with your code.\n        Collections.sort(l);\n        float med;\n        int n = l.size();\n        int a = (n - 1) / 2;\n        int b = n / 2;\n        if(n % 2 == 0) {\n            med = (float)(l.get(a) + l.get(b)) / 2;\n        } else {\n            med = l.get(b);\n        }\n        return med;",
        "grade-162": {
            "execution": 1
        },
        "22": "Collections.sort(l);\n        float m = 0;\n        int n = l.size();\n        if (n % 2 == 0) {\n            m = (l.get(n / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            m = l.get(n / 2);\n        }\n        return m;",
        "grade-22": {
            "execution": 1
        },
        "179": "// Your code here!\n        return -1;",
        "grade-179": {
            "execution": 0
        },
        "125": "Collections.sort(l);\n        int n = l.size();\n        if (n%2 == 0) {\n            int i = n/2-1;\n            int j = n/2;\n            return (l.get(i)+l.get(j))/2.0f;\n        } else {\n            int i = n/2;\n            return l.get(i);\n        }",
        "grade-125": {
            "execution": 1
        },
        "8": "int n = l.size();\n        if (n == 0)\n            return 0;\n        Collections.sort(l);\n        if (n % 2 == 0)\n            return (l.get(n / 2) + l.get(n / 2 - 1)) / 2.0f;\n        else\n            return l.get(n / 2);",
        "grade-8": {
            "execution": 1
        },
        "7": "l.sort(null);\n        int len = l.size();\n        if (len % 2 == 0) {\n            return (l.get(len / 2) + l.get(len / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(len / 2);\n        }",
        "grade-7": {
            "execution": 1
        },
        "23": "Collections.sort(l);\n        int sz = l.size();\n        if (sz % 2 == 0) {\n            return (l.get(sz / 2) + l.get(sz / 2 - 1)) / 2;\n        } else {\n            return l.get(sz / 2);\n        }",
        "grade-23": {
            "execution": 0
        },
        "61": "return (l.size() % 2 == 0) ? (l.get(l.size() / 2) + l.get(l.size() / 2 - 1)) / 2.0f : l.get(l.size() / 2);",
        "grade-61": {
            "execution": 0
        },
        "65": "float med;\n        Collections.sort(l);\n        med = l.get(l.size()/2);\n        return med;",
        "grade-65": {
            "execution": 0
        },
        "151": "Collections.sort(l);\n        if(l.size() % 2 == 0) {\n            int n = l.size() / 2;\n            return (l.get(n - 1) + l.get(n)) / 2.0f;\n        } else {\n            return l.get(l.size() / 2);\n        }",
        "grade-151": {
            "execution": 1
        },
        "182": "float median = 0;\n        int size = l.size();\n        float middle = (float)Math.floor(size / 2);\n        if (size % 2 == 0) {\n            median = (float)(l.get((int)middle) + l.get((int)middle - 1)) / 2;\n        } else {\n            median = l.get((int)middle);\n        }\n        return median;",
        "grade-182": {
            "execution": 0
        },
        "167": "Collections.sort(l);\n        int n = l.size();\n        int middle = n / 2;\n        if (n % 2 == 1) {\n            return l.get(middle);\n        } else {\n            return (l.get(middle - 1) + l.get(middle)) / 2.0f;\n        }",
        "grade-167": {
            "execution": 1
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n    // 'one three five'\n    public static String sortNumbers(String numbers) {\n",
        "snippet": [
            "        String[] nums = numbers.split(\" \");\n        List<Integer> num = new ArrayList<>();\n        for (String string : nums) {\n            switch (string) {\n                case \"zero\" -> num.add(0);\n                case \"one\" -> num.add(1);\n                case \"two\" -> num.add(2);\n                case \"three\" -> num.add(3);\n                case \"four\" -> num.add(4);\n                case \"five\" -> num.add(5);\n                case \"six\" -> num.add(6);\n                case \"seven\" -> num.add(7);\n                case \"eight\" -> num.add(8);\n                case \"nine\" -> num.add(9);\n            }\n        }\n        Collections.sort(num);\n        List<String> result = new ArrayList<>();\n        for (int m : num) {\n            switch (m) {\n                case 0 -> result.add(\"zero\");\n                case 1 -> result.add(\"one\");\n                case 2 -> result.add(\"two\");\n                case 3 -> result.add(\"three\");\n                case 4 -> result.add(\"four\");\n                case 5 -> result.add(\"five\");\n                case 6 -> result.add(\"six\");\n                case 7 -> result.add(\"seven\");\n                case 8 -> result.add(\"eight\");\n                case 9 -> result.add(\"nine\");\n            }\n        }\n        return String.join(\" \", result);\n    }\n}"
        ],
        "simplified": "Input is a space-delimited string of numberals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Return the string with numbers sorted from smallest to largest",
        "task_id": "19",
        "181": "String[] s = numbers.split(\" \");\n        int[] map = new int[s.length];\n        for (int i = 0; i < s.length; i++) {\n            if (s[i].equals(\"zero\")) {\n                map[i] = 0;\n            } else if (s[i].equals(\"one\")) {\n                map[i] = 1;\n            } else if (s[i].equals(\"two\")) {\n                map[i] = 2;\n            } else if (s[i].equals(\"three\")) {\n                map[i] = 3;\n            } else if (s[i].equals(\"four\")) {\n                map[i] = 4;\n            } else if (s[i].equals(\"five\")) {\n                map[i] = 5;\n            } else if (s[i].equals(\"six\")) {\n                map[i] = 6;\n            } else if (s[i].equals(\"seven\")) {\n                map[i] = 7;\n            } else if (s[i].equals(\"eight\")) {\n                map[i] = 8;\n            } else if (s[i].equals(\"nine\")) {\n                map[i] = 9;\n            }\n        }\n        Arrays.sort(map);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < map.length; i++) {\n            if (map[i] == 0) {\n                sb.append(\"zero\");\n            } else if (map[i] == 1) {\n                sb.append(\"one\");\n            } else if (map[i] == 2) {\n                sb.append(\"two\");\n            } else if (map[i] == 3) {\n                sb.append(\"three\");\n            } else if (map[i] == 4) {\n                sb.append(\"four\");\n            } else if (map[i] == 5) {\n                sb.append(\"five\");\n            } else if (map[i] == 6) {\n                sb.append(\"six\");\n            } else if (map[i] == 7) {\n                sb",
        "grade-181": {
            "execution": 0
        },
        "29": "// Convert to Integer array and then sort\n        String[] numberStringArray = numbers.split(\" \");\n        Integer[] numberArray = Arrays.stream(numberStringArray).map(s -> convertNumeralsToIntegers(s)).toArray(Integer[]::new);\n        Arrays.sort(numberArray);\n        // Convert back to word form and return\n        return Arrays.stream(numberArray).map(i -> convertIntegersToNumerals(i)).collect(Collectors.joining(\" \"));",
        "grade-29": {
            "execution": 0
        },
        "6": "String[] numStr = numbers.split(\" \");\n        List<Integer> nums = new ArrayList<>();\n        for (String num : numStr) {\n            nums.add(numeralToInteger(num));\n        }\n        Collections.sort(nums);\n        StringBuilder sb = new StringBuilder();\n        for (int num : nums) {\n            sb.append(integerToNumeral(num) + \" \");\n        }\n        return sb.toString().trim();",
        "grade-6": {
            "execution": 0
        },
        "73": "if (numbers == null || numbers.length() == 0) {\n            return numbers;\n        }\n        String[] numbersWords = numbers.split(\" \");\n        if (numbersWords.length == 0) {\n            return numbers;\n        }\n        Map<String, Integer> map = new HashMap<>();\n        map.put(\"zero\", 0);\n        map.put(\"one\", 1);\n        map.put(\"two\", 2);\n        map.put(\"three\", 3);\n        map.put(\"four\", 4);\n        map.put(\"five\", 5);\n        map.put(\"six\", 6);\n        map.put(\"seven\", 7);\n        map.put(\"eight\", 8);\n        map.put(\"nine\", 9);\n        Arrays.sort(numbersWords, new Comparator<String>() {\n            @Override\n            public int compare(String s1, String s2) {\n                return map.get(s1) - map.get(s2);\n            }\n        });\n        StringBuilder sb = new StringBuilder();\n        sb.append(numbersWords[0]);\n        for (int i = 1; i < numbersWords.length; i++) {\n            sb.append(\" \");\n            sb.append(numbersWords[i]);\n        }\n        return sb.toString();",
        "grade-73": {
            "execution": 1
        },
        "65": "int zero = 0;\n        int one = 0;\n        int two = 0;\n        int three = 0;\n        int four = 0;\n        int five = 0;\n        int six = 0;\n        int seven = 0;\n        int eight = 0;\n        int nine = 0;\n        int sum = 0;\n        int carry = 0;\n        int borrowed = 0;\n        int temp = 0;\n        boolean done = false;\n        boolean borrow = false;\n        String num = \"\";\n        String[] parts = numbers.split(\" \");\n        for (int i = 0; i < parts.length; i++) {\n            switch (parts[i]) {\n                case \"zero\":\n                    zero++;\n                    break;\n                case \"one\":\n                    one++;\n                    break;\n                case \"two\":\n                    two++;\n                    break;\n                case \"three\":\n                    three++;\n                    break;\n                case \"four\":\n                    four++;\n                    break;\n                case \"five\":\n                    five++;\n                    break;\n                case \"six\":\n                    six++;\n                    break;\n                case \"seven\":\n                    seven++;\n                    break;\n                case \"eight\":\n                    eight++;\n                    break;\n                case \"nine\":\n                    nine++;\n                    break;\n            }\n        }\n        carry = (four + eight + nine) / 2;\n        borrowed = carry * 2;\n        if (five + borrowed >= 3) {\n            five -= 3;\n            borrowed -= 3;\n        } else {\n            five = 0;\n            borrowed = 0;\n        }\n        four -= borrowed;\n        borrow = false;\n        if (two - borrowed < 0) {\n            temp = 2 - borrowed;\n            borrowed = 2;\n            borrow = true;\n        } else {\n            borrowed -= two;\n        }\n        if (borrow) {\n            if (one - borrowed < 0) {\n                temp = 1 - borrowed;\n                borrowed = 1;\n            } else {\n                borrowed -= one;\n            }\n        }\n        done = false;\n        while (!done) {\n            switch (temp) {\n                case 0:\n                    done = true;\n                    break;",
        "grade-65": {
            "execution": 0
        },
        "60": "List<Integer> nums = Arrays.asList(numbers.split(\" \")).stream().map(x -> numeralToNumber(x)).collect(Collectors.toList());\n      Collections.sort(nums);\n      return nums.stream().map(x -> numberToNumeral(x)).collect(Collectors.joining(\" \"));",
        "grade-60": {
            "execution": 0
        },
        "36": "String[] num_tokens = numbers.split(\" \");\n        Map<String, Integer> numeral_map = new HashMap<String, Integer>();\n        numeral_map.put(\"zero\", 0);\n        numeral_map.put(\"one\", 1);\n        numeral_map.put(\"two\", 2);\n        numeral_map.put(\"three\", 3);\n        numeral_map.put(\"four\", 4);\n        numeral_map.put(\"five\", 5);\n        numeral_map.put(\"six\", 6);\n        numeral_map.put(\"seven\", 7);\n        numeral_map.put(\"eight\", 8);\n        numeral_map.put(\"nine\", 9);\n        List<Integer> numbers_list = new ArrayList<Integer>();\n        for (String num : num_tokens) {\n            numbers_list.add(numeral_map.get(num));\n        }\n        Collections.sort(numbers_list);\n        StringBuilder sb = new StringBuilder();\n        for (Integer num : numbers_list) {\n            for (Map.Entry<String, Integer> kv : numeral_map.entrySet()) {\n                if (kv.getValue().equals(num)) {\n                    sb.append(kv.getKey());\n                    sb.append(\" \");\n                }\n            }\n        }\n        return sb.toString().trim();",
        "grade-36": {
            "execution": 1
        },
        "27": "String[] nums = numbers.split(\" \");\n        String[] nums2 = new String[nums.length];\n        int j = 0;\n        for (int i = 0; i < nums.length; i++) {\n            if (nums[i].equals(\"zero\")) {\n                nums2[j] = \"0\";\n                j++;\n            } else if (nums[i].equals(\"one\")) {\n                nums2[j] = \"1\";\n                j++;\n            } else if (nums[i].equals(\"two\")) {\n                nums2[j] = \"2\";\n                j++;\n            } else if (nums[i].equals(\"three\")) {\n                nums2[j] = \"3\";\n                j++;\n            } else if (nums[i].equals(\"four\")) {\n                nums2[j] = \"4\";\n                j++;\n            } else if (nums[i].equals(\"five\")) {\n                nums2[j] = \"5\";\n                j++;\n            } else if (nums[i].equals(\"six\")) {\n                nums2[j] = \"6\";\n                j++;\n            } else if (nums[i].equals(\"seven\")) {\n                nums2[j] = \"7\";\n                j++;\n            } else if (nums[i].equals(\"eight\")) {\n                nums2[j] = \"8\";\n                j++;\n            } else if (nums[i].equals(\"nine\")) {\n                nums2[j] = \"9\";\n                j++;\n            }\n        }\n        String[] nums3 = Arrays.copyOf(nums2, j);\n        Arrays.sort(nums3);\n        String[] nums4 = new String[nums3.length];\n        for (int i = 0; i < nums3.length; i++) {\n            if (nums3[i].equals(\"0\")) {\n                nums4[i] = \"zero\";\n            } else if (nums3[i].equals(\"1\")) {\n                nums4[i] =",
        "grade-27": {
            "execution": 0
        },
        "192": "String result = \"\";\n        String[] nums = numbers.split(\" \");\n        ArrayList<Integer> numList = new ArrayList<Integer>();\n        for (String s : nums) {\n            switch (s) {\n                case \"zero\":\n                    numList.add(0);\n                    break;\n                case \"one\":\n                    numList.add(1);\n                    break;\n                case \"two\":\n                    numList.add(2);\n                    break;\n                case \"three\":\n                    numList.add(3);\n                    break;\n                case \"four\":\n                    numList.add(4);\n                    break;\n                case \"five\":\n                    numList.add(5);\n                    break;\n                case \"six\":\n                    numList.add(6);\n                    break;\n                case \"seven\":\n                    numList.add(7);\n                    break;\n                case \"eight\":\n                    numList.add(8);\n                    break;\n                case \"nine\":\n                    numList.add(9);\n                    break;\n            }\n        }\n        Collections.sort(numList);\n        for (int i = 0; i < numList.size(); i++) {\n            switch (numList.get(i)) {\n                case 0:\n                    result += \"zero\";\n                    break;\n                case 1:\n                    result += \"one\";\n                    break;\n                case 2:\n                    result += \"two\";\n                    break;\n                case 3:\n                    result += \"three\";\n                    break;\n                case 4:\n                    result += \"four\";\n                    break;\n                case 5:\n                    result += \"five\";\n                    break;\n                case 6:\n                    result += \"six\";\n                    break;\n                case 7:\n                    result += \"seven\";\n                    break;\n                case 8:\n                    result += \"eight\";\n                    break;\n                case 9:\n                    result += \"nine\";\n                    break;\n            }\n            if (i != numList.size() - 1) {\n                result += \" \";\n            }\n        }\n        return result;",
        "grade-192": {
            "execution": 1
        },
        "152": "// Your code here\n        int[] digits = Arrays.stream(numbers.split(\" \")).mapToInt(Integer::parseInt).toArray();\n        Arrays.sort(digits);\n        return Arrays.stream(digits).mapToObj(String::valueOf).collect(Collectors.joining(\" \"));",
        "grade-152": {
            "execution": 0
        },
        "22": "Map<String, Integer> numerals = new HashMap<>();\n        numerals.put(\"zero\", 0);\n        numerals.put(\"one\", 1);\n        numerals.put(\"two\", 2);\n        numerals.put(\"three\", 3);\n        numerals.put(\"four\", 4);\n        numerals.put(\"five\", 5);\n        numerals.put(\"six\", 6);\n        numerals.put(\"seven\", 7);\n        numerals.put(\"eight\", 8);\n        numerals.put(\"nine\", 9);\n        String[] split = numbers.split(\" \");\n        return Arrays.stream(split)\n            .map(numerals::get)\n            .sorted()\n            .mapToObj(Integer::toString)\n            .collect(Collectors.joining(\" \"));",
        "grade-22": {
            "execution": 0
        },
        "165": "if (numbers == null || numbers.isEmpty()) {\n            return numbers;\n        }\n        String[] nums = numbers.split(\" \");\n        List<Integer> numsInt = new ArrayList<>();\n        for (String num : nums) {\n            numsInt.add(str2Int(num));\n        }\n        Collections.sort(numsInt);\n        String ret = \"\";\n        for (int num : numsInt) {\n            ret += num2Str(num) + \" \";\n        }\n        ret = ret.trim();\n        return ret;",
        "grade-165": {
            "execution": 0
        },
        "115": "String[] arr = numbers.split(\" \");\n        // Arrays.sort(arr); // default is alphabetic sort\n        Arrays.sort(arr, new Comparator<String>() {\n            public int compare(String a, String b) {\n                int aValue = convertToNumber(a);\n                int bValue = convertToNumber(b);\n                if (aValue < bValue) {\n                    return -1;\n                } else if (aValue > bValue) {\n                    return 1;\n                } else {\n                    return 0;\n                }\n            }\n        });\n        String result = String.join(\" \", arr);\n        return result;",
        "grade-115": {
            "execution": 0
        },
        "8": "List<String> numbersList = Arrays.asList(numbers.split(\" \"));\n        ArrayList<Integer> intNumbers = new ArrayList<Integer>();\n        for (String number: numbersList) {\n            int integer = convertToInteger(number);\n            intNumbers.add(integer);\n        }\n        Collections.sort(intNumbers);\n        List<String> numbersList2 = new ArrayList<String>();\n        for (Integer integer: intNumbers) {\n            String number = convertToNumber(integer);\n            numbersList2.add(number);\n        }\n        String numbers2 = String.join(\" \", numbersList2);\n        return numbers2;",
        "grade-8": {
            "execution": 0
        },
        "7": "// TODO: implement sortNumbers\n        HashMap<String, Integer> numeralMap = new HashMap<String, Integer>();\n        numeralMap.put(\"zero\", 0);\n        numeralMap.put(\"one\", 1);\n        numeralMap.put(\"two\", 2);\n        numeralMap.put(\"three\", 3);\n        numeralMap.put(\"four\", 4);\n        numeralMap.put(\"five\", 5);\n        numeralMap.put(\"six\", 6);\n        numeralMap.put(\"seven\", 7);\n        numeralMap.put(\"eight\", 8);\n        numeralMap.put(\"nine\", 9);\n        String[] tokens = numbers.split(\" \");\n        int[] array = new int[tokens.length];\n        for (int i = 0; i < tokens.length; i++) {\n            array[i] = numeralMap.get(tokens[i]);\n        }\n        Arrays.sort(array);\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < array.length; i++) {\n            result.append(array[i]);\n            if (i < array.length - 1) {\n                result.append(\" \");\n            }\n        }\n        return result.toString();",
        "grade-7": {
            "execution": 0
        },
        "24": "String[] nums = numbers.split(\" \");\n        Arrays.sort(nums, String.CASE_INSENSITIVE_ORDER);\n        return String.join(\" \", nums);",
        "grade-24": {
            "execution": 0
        },
        "58": "// Good luck!\n        int[] sorted = Arrays.stream(numbers.split(\" \")).mapToInt(i -> Integer.parseInt(\n                i.replace(\"zero\", \"0\").replace(\"one\", \"1\").replace(\"two\", \"2\").replace(\"three\", \"3\").replace(\"four\", \"4\").replace(\"five\", \"5\").replace(\"six\", \"6\").replace(\"seven\", \"7\").replace(\"eight\", \"8\").replace(\"nine\", \"9\"))).sorted().toArray();\n        return Arrays.stream(sorted).mapToObj(i -> String.valueOf(i).replace(\"0\", \"zero\").replace(\"1\", \"one\").replace(\"2\", \"two\").replace(\"3\", \"three\").replace(\"4\", \"four\").replace(\"5\", \"five\").replace(\"6\", \"six\").replace(\"7\", \"seven\").replace(\"8\", \"eight\").replace(\"9\", \"nine\")).collect(Collectors.joining(\" \"));",
        "grade-58": {
            "execution": 0
        },
        "62": "String[] input = numbers.split(\" \");\n        String[] output = new String[input.length];\n        for (int i = 0; i < input.length; i++) {\n            output[Integer.parseInt(input[i])] = input[i];\n        }\n        return String.join(\" \", output);",
        "grade-62": {
            "execution": 0
        },
        "142": "// TODO: Write your code here\n        return null;",
        "grade-142": {
            "execution": 0
        },
        "170": "//your code here\n        return numbers;",
        "grade-170": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given a rectangular grid of wells. Each row represents a single well,\n    // and each 1 in a row represents a single unit of water.\n    // Each well has a corresponding bucket that can be used to extract water from it, \n    // and all buckets have the same capacity.\n    // Your task is to use the buckets to empty the wells.\n    // Output the number of times you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output: 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static int maxFill(ArrayList<ArrayList<Integer>> grid, int capacity) {\n",
        "snippet": [
            "        int sum = 0;\n        for (List<Integer> arr : grid) {\n            sum += Math.ceil((double) arr.stream().reduce(Integer::sum).get() / capacity);\n        }\n        return sum;\n    }\n}"
        ],
        "simplified": "You are given a rectangular grid of wells. Each row represents a single well, and each 1 in a row represents a single unit of water. Each well has a corresponding bucket that can be used to extract water from it, and all buckets have the same capacity. Your task is to use the buckets to empty the wells. Output the number of times you need to lower the buckets. Constraints: * all wells have the same length * 1 <= grid.length <= 10^2 * 1 <= grid[:,1].length <= 10^2 * grid[i][j] -> 0 | 1 * 1 <= capacity <= 10",
        "task_id": "115",
        "164": "int depth = 0;\n        boolean done = false;\n        int[] d = new int[2];\n        while(!done) {\n            d = minFill(grid, capacity);\n            if(d[0] != 0) {\n                depth++;\n            } else {\n                done = true;\n            }\n        }\n        return depth;",
        "grade-164": {
            "execution": 0
        },
        "29": "int sum = 0;\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(i).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    sum += capacity;\n                }\n            }\n        }\n        return sum;",
        "grade-29": {
            "execution": 0
        },
        "6": "if (grid.size() <= 0) {\n            return 0;\n        }\n        int fillCount = 0;\n        for (int i = 0; i < grid.size(); i++) {\n            ArrayList<Integer> row = grid.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                int level = row.get(j);\n                if (level > 0) {\n                    int toFill = capacity - level;\n                    if (toFill > 0) {\n                        fillCount += toFill;\n                    }\n                }\n            }\n        }\n        return fillCount;",
        "grade-6": {
            "execution": 0
        },
        "190": "int total = 0;\n        for (ArrayList<Integer> row : grid) {\n            int cap = capacity;\n            for (Integer cell : row) {\n                cap -= cell;\n                if (cap < 0) {\n                    // refill\n                    total++;\n                    cap = capacity - cell;\n                }\n            }\n        }\n        return total;",
        "grade-190": {
            "execution": 0
        },
        "71": "if (grid.size() == 0) return 0;\n        int k = grid.get(0).size();\n        int fill_count = 0;\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < k; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    grid.get(i).set(j, capacity);\n                    if (i == 0) {\n                        fill_count += capacity;\n                    } else {\n                        fill_count += capacity - grid.get(i - 1).get(j);\n                    }\n                }\n            }\n        }\n        return fill_count;",
        "grade-71": {
            "execution": 0
        },
        "63": "int rows = grid.size();\n        int cols = grid.get(0).size();\n        int total = rows * cols;\n        int lowers = 0;\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                int water = grid.get(i).get(j);\n                if (water > 0) {\n                    lowers += (water / capacity);\n                    if (water % capacity > 0) {\n                        lowers++;\n                    }\n                }\n            }\n        }\n        return lowers;",
        "grade-63": {
            "execution": 0
        },
        "58": "int cnt = 0;\n        for (ArrayList<Integer> row : grid) {\n            int capacity_left = capacity;\n            for (int depth : row) {\n                int depth_left = depth;\n                while (depth_left > 0) {\n                    cnt++;\n                    depth_left = Math.max(0, depth_left - capacity_left);\n                    capacity_left = Math.max(0, capacity_left - depth);\n                }\n            }\n        }\n        return cnt;",
        "grade-58": {
            "execution": 0
        },
        "36": "// for each row, count\n        // the number of 1's and\n        // their distance from each other.\n        // then calculate the number of buckets\n        // required to fill all the 1's\n        // this is done by taking the largest bucket count\n        // for all the 1's in a row and multiplying it\n        // by the number of rows.\n        // this accounts for all the 1's \n        // and then we add the number of rows\n        // to account for the rows without 1's\n        int times = 0;\n        int rows = grid.size();\n        int cols = grid.get(0).size();\n        for (int i = 0; i < rows; i++) {\n            int capacity_left = capacity;\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    if (capacity_left == 0) {\n                        times++;\n                        capacity_left = capacity;\n                    }\n                    capacity_left--;\n                }\n            }\n            times++;\n        }\n        return times;",
        "grade-36": {
            "execution": 0
        },
        "189": "// We can fill each row in parallel.\n        // Each row can be filled by repeatedly taking the bucket to the leftmost \n        // nonzero unit of water, extracting the water in it, and going right\n        // We count the number of times we need to extract water\n        // Every time we extract, we shift the array to the left.\n        // Once we shift the array to the left, we need to stop extraction.\n        // We can do this by setting a flag, or by just stopping when we see a 0 on the left\n        int nbSteps = 0;\n        for (ArrayList<Integer> row : grid) {\n            // Step 1. Find the first nonzero water unit.\n            int current = 0;\n            int firstNonZero = -1;\n            for (int i = 0; i < row.size(); i++) {\n                if (row.get(i) != 0) {\n                    firstNonZero = i;\n                    break;\n                }\n            }\n            if (firstNonZero == -1) continue;\n            // Step 2. Add water units to the bucket.\n            // If the bucket has water units that reach capacity, extract the water and\n            // shift the array to the left.\n            int nbLeft = 0;\n            while (true) {\n                int left = firstNonZero;\n                while (left < row.size() && row.get(left) == 0) left++;\n                if (left >= row.size()) break;\n                int right = left;\n                while (right < row.size() && current < capacity) {\n                    current += row.get(right);\n                    right++;\n                }\n                // Step 3. Extract water.\n                nbSteps++;\n                // Step 4. Shift the array.\n                for (int i = left; i < right; i++) row.set(i - left, row.get(i));\n                for (int i = right - left; i < row.size(); i++) row.set(i, 0);\n                // Step 5. Reset\n                current = 0;\n                firstNonZero = left - left;\n            }\n        }\n        return nbSteps;",
        "grade-189": {
            "execution": 0
        },
        "27": "int count = 0;\n        int[] max = new int[grid.size()];\n        for (int i = 0; i < grid.size(); i++) {\n            max[i] = Collections.max(grid.get(i));\n        }\n        for (int i = 0; i < grid.size(); i++) {\n            int maxFill = max[i];\n            ArrayList<Integer> row = grid.get(i);\n            int prev = 0;\n            while (maxFill > 0) {\n                maxFill -= capacity;\n                count++;\n                int j = prev;\n                while (j < row.size() && row.get(j) != 0) {\n                    row.set(j, row.get(j) - capacity);\n                    j++;\n                }\n                prev = j;\n            }\n        }\n        return count;",
        "grade-27": {
            "execution": 0
        },
        "174": "int water_count = 0;\n        int row_count = grid.size();\n        int column_count = grid.get(0).size();\n        int[][] grid_array = new int[row_count][column_count];\n        for (int i = 0; i < row_count; i++) {\n            for (int j = 0; j < column_count; j++) {\n                grid_array[i][j] = grid.get(i).get(j);\n            }\n        }\n        while (true) {\n            int max_water = -1;\n            int max_water_row = -1;\n            int max_water_column = -1;\n            for (int i = 0; i < row_count; i++) {\n                for (int j = 0; j < column_count; j++) {\n                    if (grid_array[i][j] > max_water) {\n                        max_water = grid_array[i][j];\n                        max_water_row = i;\n                        max_water_column = j;\n                    }\n                }\n            }\n            if (max_water == -1) {\n                break;\n            }\n            for (int i = 0; i < row_count; i++) {\n                for (int j = 0; j < column_count; j++) {\n                    int current_fill = Math.min(capacity, max_water);\n                    grid_array[i][j] -= current_fill;\n                    max_water -= current_fill;\n                    water_count += current_fill;\n                    if (max_water == 0) {\n                        break;\n                    }\n                }\n                if (max_water == 0) {\n                    break;\n                }\n            }\n        }\n        return water_count;",
        "grade-174": {
            "execution": 0
        },
        "140": "int n = grid.size();\n        int m = grid.get(0).size();\n        int count = 0;\n        for (int j = 0; j < m; j++) {\n            int currentCapacity = capacity;\n            for (int i = 0; i < n; i++) {\n                int water = grid.get(i).get(j);\n                if (water == 0) {\n                    continue;\n                }\n                if (currentCapacity >= water) {\n                    grid.get(i).set(j, 0);\n                    currentCapacity -= water;\n                } else {\n                    grid.get(i).set(j, water - currentCapacity);\n                    currentCapacity = 0;\n                }\n                count++;\n                if (currentCapacity == 0) {\n                    break;\n                }\n            }\n        }\n        return count;",
        "grade-140": {
            "execution": 0
        },
        "22": "int result = 0;\n        for (ArrayList<Integer> row : grid) {\n            int row_result = 0;\n            int last_index = -1;\n            for (int i = 0; i < row.size(); i++) {\n                if (row.get(i) == 1) {\n                    int diff = i - last_index - 1;\n                    if (diff > 0) {\n                        int fill = capacity - (diff % capacity);\n                        if (fill == capacity) {\n                            fill = 0;\n                        }\n                        row_result += fill;\n                    }\n                    last_index = i;\n                }\n            }\n            result += row_result;\n        }\n        return result;",
        "grade-22": {
            "execution": 0
        },
        "152": "int n = grid.size();\n        int m = grid.get(0).size();\n        int fill_count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                int fill = Math.min(capacity, grid.get(i).get(j));\n                fill_count += fill;\n                grid.get(i).set(j, grid.get(i).get(j) - fill);\n            }\n        }\n        return fill_count;",
        "grade-152": {
            "execution": 0
        },
        "109": "int n = grid.size();\n        int m = grid.get(0).size();\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    // bucket_capacity = bucket_capacity - 1\n                    grid.get(i).set(j, 0);\n                    for (int k = i + 1; k < n; k++) {\n                        if (grid.get(k).get(j) == 1) {\n                            grid.get(k).set(j, 0);\n                            capacity--;\n                        }\n                        if (capacity == 0) {\n                            break;\n                        }\n                    }\n                    for (int k = i - 1; k >= 0; k--) {\n                        if (grid.get(k).get(j) == 1) {\n                            grid.get(k).set(j, 0);\n                            capacity--;\n                        }\n                        if (capacity == 0) {\n                            break;\n                        }\n                    }\n                    for (int k = j + 1; k < m; k++) {\n                        if (grid.get(i).get(k) == 1) {\n                            grid.get(i).set(k, 0);\n                            capacity--;\n                        }\n                        if (capacity == 0) {\n                            break;\n                        }\n                    }\n                    for (int k = j - 1; k >= 0; k--) {\n                        if (grid.get(i).get(k) == 1) {\n                            grid.get(i).set(k, 0);\n                            capacity--;\n                        }\n                        if (capacity == 0) {\n                            break;\n                        }\n                    }\n                    count++;\n                    capacity = capacity + 1;\n                }\n            }\n        }\n        return count;",
        "grade-109": {
            "execution": 0
        },
        "8": "int num_tries = 0;\n        for (ArrayList<Integer> row : grid) {\n            if (row.size() > capacity) {\n                System.out.println(\"no capacity: \" + row);\n                return -1;\n            }\n            int sum = row.stream().mapToInt(i -> i).sum();\n            int water_to_remove = sum / capacity;\n            // tricky part: if mod = 0, then it fills the bucket perfectly and \n            // the number of operations required is just the water_to_remove.\n            // If mod > 0, then it fills the bucket +1, so it requires water_to_remove + 1\n            // operations.\n            num_tries += sum % capacity == 0 ? water_to_remove : water_to_remove + 1;\n        }\n        return num_tries;",
        "grade-8": {
            "execution": 0
        },
        "7": "// fill the first row completely\n        int maxFill = 0;\n        for (int i = 0; i < grid.get(0).size(); i++) {\n            if (grid.get(0).get(i) == 1) {\n                maxFill++;\n                fillBucket(grid, capacity, new Triplet<Integer, Integer, Integer>(0, i, capacity));\n            }\n        }\n        // fill the rest of the wells\n        for (int i = 1; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(i).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    maxFill++;\n                    if (grid.get(i-1).get(j) == 1) {\n                        fillBucket(grid, capacity, new Triplet<Integer, Integer, Integer>(i, j, capacity));\n                    } else {\n                        fillBucket(grid, capacity, new Triplet<Integer, Integer, Integer>(i, j, capacity-1));\n                    }\n                }\n            }\n        }\n        return maxFill;",
        "grade-7": {
            "execution": 0
        },
        "23": "return 0;",
        "grade-23": {
            "execution": 0
        },
        "56": "int fillCount = 0;\n        // The wells can be filled in any order, so just fill the wells in order from left to right\n        for (ArrayList<Integer> row : grid) {\n            int fillCountInRow = 0;\n            for (Integer value : row) {\n                // if the value is 0, fill it\n                if (value == 0) {\n                    fillCountInRow++;\n                }\n            }\n            // if the row has more than capacity wells, fill it capacity times, otherwise fill it as many times as there are wells\n            fillCount += fillCountInRow > capacity ? capacity : fillCountInRow;\n        }\n        return fillCount;",
        "grade-56": {
            "execution": 0
        },
        "60": "int n = grid.size();\n        int m = grid.get(0).size();\n        int maxFill = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                maxFill += grid.get(i).get(j);\n            }\n        }\n        int minFill = maxFill - capacity * m;\n        return minFill < 0 ? 0 : minFill;",
        "grade-60": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given an array arr of integers, find the minimum number of elements that\n    // need to be changed to make the array palindromic. A palindromic array is an array that\n    // is read the same backwards and forwards. In one change, you can change one element to any other element.\n    // For example:\n    // smallest_change([1,2,3,5,4,7,9,6]) == 4\n    // smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    // smallest_change([1, 2, 3, 2, 1]) == 0\n    public static int smallestChange(ArrayList<Integer> arr) {\n",
        "snippet": [
            "        int ans = 0;\n        for (int i = 0; i < arr.size() / 2; i++) {\n            if (!Objects.equals(arr.get(i), arr.get(arr.size() - i - 1))) {\n                ans += 1;\n            }\n        }\n        return ans;\n    }\n}"
        ],
        "simplified": "Given an array arr of integers, find the minimum number of elements that need to be changed to make the array palindromic. A palindromic array is an array that is read the same backwards and forwards. In one change, you can change one element to any other element.",
        "task_id": "73",
        "34": "int sum = 0;\n        for (int i = 0; i < arr.size() / 2; i++) {\n            sum += arr.get(i) - arr.get(arr.size() - 1 - i);\n        }\n        return Math.abs(sum);",
        "grade-34": {
            "execution": 0
        },
        "6": "if (arr.size() == 0) {\n            return 0;\n        }\n        int smallestChange = 0;\n        int maxChange = 0;\n        int i = 0;\n        int j = arr.size() - 1;\n        while (i < j) {\n            if (arr.get(i) != arr.get(j)) {\n                maxChange++;\n            }\n            i++;\n            j--;\n        }\n        return maxChange;",
        "grade-6": {
            "execution": 1
        },
        "85": "// your code goes here\n        return 0;",
        "grade-85": {
            "execution": 0
        },
        "76": "// start by checking if the array is already a palindrome\n        int size = arr.size();\n        if (isPalindrome(arr)) {\n            return 0;\n        }\n        // if the array isn't a palindrome, make it one\n        int cost = 0;\n        for (int i = 0; i < size / 2; i++) {\n            cost += Math.abs(arr.get(i) - arr.get(size - i - 1));\n        }\n        return cost;",
        "grade-76": {
            "execution": 0
        },
        "69": "ArrayList<Integer> r = new ArrayList<Integer>(arr);\n        Collections.reverse(r);\n        return rearrange(arr, r);",
        "grade-69": {
            "execution": 0
        },
        "42": "int mid = arr.size() / 2;\n        int start = 0;\n        int end = arr.size() - 1;\n        int change = 0;\n        while (start < mid) {\n            if (arr.get(start) != arr.get(end)) {\n                change++;\n            }\n            start++;\n            end--;\n        }\n        return change;",
        "grade-42": {
            "execution": 1
        },
        "32": "return smallestChange(arr, 0, arr.size() - 1);",
        "grade-32": {
            "execution": 0
        },
        "172": "throw new NotImplementedException();",
        "grade-172": {
            "execution": 0
        },
        "28": "// You must fill in this method\n        ArrayList<Integer> arr1 = new ArrayList<Integer>();\n        ArrayList<Integer> arr2 = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size() / 2; i++) {\n            arr1.add(arr.get(i));\n        }\n        int count = 0;\n        if (arr.size() % 2 == 0) {\n            for (int i = arr.size() / 2; i < arr.size(); i++) {\n                arr2.add(arr.get(i));\n            }\n        } else {\n            for (int i = arr.size() / 2 + 1; i < arr.size(); i++) {\n                arr2.add(arr.get(i));\n            }\n        }\n        Collections.reverse(arr2);\n        for (int i = 0; i < arr1.size(); i++) {\n            if (arr1.get(i) != arr2.get(i)) {\n                count++;\n            }\n        }\n        return count;",
        "grade-28": {
            "execution": 1
        },
        "186": "//write your code here\n        return 0;",
        "grade-186": {
            "execution": 0
        },
        "131": "ArrayList<Integer> arrCopy = (ArrayList<Integer>) arr.clone();\n        Collections.reverse(arrCopy);\n        return arr.size() - findLCS(arr, arrCopy);",
        "grade-131": {
            "execution": 0
        },
        "8": "// Your code here\n        // Get palindrome\n        int change = 0;\n        int mid = arr.size() / 2;\n        for (int i = 0; i < mid; i++) {\n            change += Math.abs(arr.get(i) - arr.get(arr.size() - 1 - i));\n        }\n        return change;",
        "grade-8": {
            "execution": 0
        },
        "7": "int length = arr.size();\n        int count = 0;\n        for (int i = 0; i < length/2; i++) {\n            int x = arr.get(i);\n            int y = arr.get(length - i - 1);\n            if (x != y) {\n                count++;\n            }\n        }\n        return count;",
        "grade-7": {
            "execution": 1
        },
        "29": "int sz = arr.size();\n        int x = 0;\n        int y = sz - 1;\n        int d = 0;\n        while (x < y) {\n            if (arr.get(x) != arr.get(y)) {\n                d++;\n            }\n            x++;\n            y--;\n        }\n        return d;",
        "grade-29": {
            "execution": 1
        },
        "67": "for (int i = 0; i < arr.size() / 2; i++) {\n            int diff = Math.abs(arr.get(i) - arr.get(arr.size() - 1 - i));\n            if (diff > 1) {\n                return diff;\n            }\n        }\n        return 0;",
        "grade-67": {
            "execution": 0
        },
        "72": "int n = arr.size();\n        int[][] minChange = new int[n][n];\n        int[][] palindrome = new int[n][n];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == j) {\n                    minChange[i][j] = 0;\n                    palindrome[i][j] = 1;\n                } else {\n                    minChange[i][j] = -1;\n                    palindrome[i][j] = 0;\n                }\n            }\n        }\n        for (int d = 1; d < n; d++) {\n            for (int i = 0; i < n - d; i++) {\n                int j = i + d;\n                minChange[i][j] = minChange(i, j, minChange, palindrome, arr);\n                palindrome[i][j] = palindrome(i, j, minChange, palindrome, arr);\n            }\n        }\n        return minChange[0][n - 1];",
        "grade-72": {
            "execution": 0
        },
        "157": "// arr[i] == arr[~i]\n        return 0;",
        "grade-157": {
            "execution": 0
        },
        "189": "// Enter your code here.\n        int l = 0;\n        int r = arr.size() - 1;\n        int count = 0;\n        while (l < r) {\n            if (arr.get(l) != arr.get(r)) {\n                count++;\n            }\n            l++;\n            r--;\n        }\n        return count;",
        "grade-189": {
            "execution": 1
        },
        "177": "// TODO: Implement the smallest_change method.\n        return 0;",
        "grade-177": {
            "execution": 0
        },
        "61": "// we'll use a dynamic programming approach\n        // dp[i][j] will store the number of changes needed to make arr[i..j] palindromic\n        // base case: dp[i][i] = 0 (single element is already palindromic)\n        // dp[i][j] = 0 if arr[i] == arr[j]\n        // dp[i][j] = 1 + min(dp[i+1][j], dp[i][j-1]) if arr[i] != arr[j]\n        int[][] dp = new int[arr.size()][arr.size()];\n        for (int i = 0; i < arr.size(); i++) {\n            dp[i][i] = 0;\n        }\n        for (int diff = 1; diff < arr.size(); diff++) {\n            for (int i = 0; i + diff < arr.size(); i++) {\n                int j = i + diff;\n                if (arr.get(i) == arr.get(j)) {\n                    dp[i][j] = dp[i+1][j-1];\n                } else {\n                    dp[i][j] = 1 + Math.min(dp[i+1][j], dp[i][j-1]);\n                }\n            }\n        }\n        return dp[0][arr.size()-1];",
        "grade-61": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Filter an input list of strings only for ones that start with a given prefix.\n    // >>> filter_by_prefix([], 'a')\n    // []\n    // >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    // ['abc', 'array']\n    public static ArrayList<String> filterByPrefix(ArrayList<String> strings, String prefix) {\n",
        "snippet": [
            "        return strings.stream().filter(p -> p.startsWith(prefix)).collect(Collectors.toList());\n    }\n}"
        ],
        "simplified": "Filter an input list of strings only for ones that start with a given prefix.",
        "task_id": "29",
        "152": "ArrayList<String> res = new ArrayList<String>();\n        for (String string : strings) {\n            if (string.startsWith(prefix))\n                res.add(string);\n        }\n        return res;",
        "grade-152": {
            "execution": 1
        },
        "14": "// YOUR CODE HERE\n        return new ArrayList<String>();",
        "grade-14": {
            "execution": 0
        },
        "3": "// Write your code here.\n        return new ArrayList<String>();",
        "grade-3": {
            "execution": 0
        },
        "194": "return strings.stream().filter(item -> item.startsWith(prefix)).collect(Collectors.toCollection(ArrayList::new));",
        "grade-194": {
            "execution": 1
        },
        "56": "return (ArrayList<String>)strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toList());",
        "grade-56": {
            "execution": 1
        },
        "40": "ArrayList<String> res = new ArrayList<String>();\n        for (String s : strings) {\n            if (s.length() >= prefix.length() && s.substring(0, prefix.length()).equals(prefix)) {\n                res.add(s);\n            }\n        }\n        return res;",
        "grade-40": {
            "execution": 1
        },
        "34": "ArrayList<String> prefix_strings = new ArrayList<String>();\n        for (String s : strings) {\n            if (s.startsWith(prefix)) {\n                prefix_strings.add(s);\n            }\n        }\n        return prefix_strings;",
        "grade-34": {
            "execution": 1
        },
        "18": "ArrayList<String> out = new ArrayList<String>();\n        for (String s : strings) {\n            if (s.startsWith(prefix)) {\n                out.add(s);\n            }\n        }\n        return out;",
        "grade-18": {
            "execution": 1
        },
        "13": "ArrayList<String> arrayList = new ArrayList<String>();\n        for (String s : strings) {\n            if (s.startsWith(prefix)) {\n                arrayList.add(s);\n            }\n        }\n        return arrayList;",
        "grade-13": {
            "execution": 1
        },
        "161": "ArrayList<String> res = new ArrayList<String>();\n        for (String s : strings) {\n            if (s.startsWith(prefix))\n                res.add(s);\n        }\n        return res;",
        "grade-161": {
            "execution": 1
        },
        "126": "ArrayList<String> output = new ArrayList<String>();\n        for (String str : strings) {\n            if (str.startsWith(prefix)) {\n                output.add(str);\n            }\n        }\n        return output;",
        "grade-126": {
            "execution": 1
        },
        "11": "// Remove the line below and implement this function\n        return new ArrayList<String>();",
        "grade-11": {
            "execution": 0
        },
        "140": "return strings;",
        "grade-140": {
            "execution": 0
        },
        "96": "// TODO: implement this function\n        ArrayList<String> ans = new ArrayList<String>();\n        for (String str : strings) {\n            if (str.startsWith(prefix)) {\n                ans.add(str);\n            }\n        }\n        return ans;",
        "grade-96": {
            "execution": 1
        },
        "4": "// Write your code here\n        return new ArrayList<String>();",
        "grade-4": {
            "execution": 0
        },
        "33": "return strings.stream().filter(str -> str.startsWith(prefix)).collect(Collectors.toCollection(ArrayList::new));",
        "grade-33": {
            "execution": 1
        },
        "38": "ArrayList<String> myArrayList = new ArrayList<String>();\n        for (String word : strings) {\n            String word1 = word.substring(0, prefix.length());\n            if (word1.equals(prefix)) {\n                myArrayList.add(word);\n            }\n        }\n        return myArrayList;",
        "grade-38": {
            "execution": 1
        },
        "117": "ArrayList<String> result = new ArrayList<String>();\n        // Your code here.\n        for (String s : strings) {\n            if (s.startsWith(prefix)) {\n                result.add(s);\n            }\n        }\n        return result;",
        "grade-117": {
            "execution": 1
        },
        "147": "ArrayList<String> result = new ArrayList<String>();\n        for (String string : strings) {\n            if (string.startsWith(prefix))\n                result.add(string);\n        }\n        return result;",
        "grade-147": {
            "execution": 1
        },
        "133": "return new ArrayList<>(strings.stream().filter(str -> str.startsWith(prefix)).collect(Collectors.toList()));",
        "grade-133": {
            "execution": 1
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return true if a given number is prime, and false otherwise.\n    // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n    // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n    // >>> is_prime(1)\n    // False\n    public static boolean isPrime(int n) {\n",
        "snippet": [
            "        if (n < 2) {\n            return false;\n        }\n        for (int k = 2; k < n; k++) {\n            if (n % k == 0) {\n                return false;\n            }\n        }\n         return true;\n    }\n}"
        ],
        "simplified": "Return true if a given number is prime, and false otherwise.",
        "task_id": "31",
        "29": "if (n == 1) {\n            return false;\n        }\n        for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;",
        "grade-29": {
            "execution": 1
        },
        "6": "if (n <= 1) {\n            return false;\n        }\n        if (n <= 3) {\n            return true;\n        }\n        if (n % 2 == 0 || n % 3 == 0) {\n            return false;\n        }\n        for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) {\n                return false;\n            }\n        }\n        return true;",
        "grade-6": {
            "execution": 1
        },
        "90": "if (n == 2) return true;\n        if (n == 1 || n % 2 == 0) return false;\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) return false;\n        }\n        return true;",
        "grade-90": {
            "execution": 1
        },
        "77": "// TODO: Complete this function.\n        if (n <= 1) {\n            return false;\n        }\n        if (n <= 3) {\n            return true;\n        }\n        if (n % 2 == 0 || n % 3 == 0) {\n            return false;\n        }\n        for (int i = 5; i * i <= n; i = i + 6) {\n            if (n % i == 0 || n % (i + 2) == 0) {\n                return false;\n            }\n        }\n        return true;",
        "grade-77": {
            "execution": 1
        },
        "70": "//####################################################################\n        //# Fill in your code here\n        //####################################################################",
        "grade-70": {
            "execution": 0
        },
        "39": "if (n == 1) return false;\n        if (n == 2) return true;\n        int i = 2;\n        while (i < n) {\n            if (n % i == 0) {\n                return false;\n            }\n            i++;\n        }\n        return true;",
        "grade-39": {
            "execution": 1
        },
        "27": "int max = (int) Math.sqrt(n);\n        for (int i = 2; i <= max; i++) {\n            if (n % i == 0) return false;\n        }\n        return true;",
        "grade-27": {
            "execution": 0
        },
        "189": "// TODO: Write this method.  Keep in mind there is a much easier\n        // way of accomplishing this using the BigInteger class.\n        if (n <= 1) {\n            return false;\n        }\n        if (n <= 3) {\n            return true;\n        }\n        if (n % 2 == 0 || n % 3 == 0) {\n            return false;\n        }\n        for (int i = 5; i * i <= n; i = i + 6) {\n            if (n % i == 0 || n % (i + 2) == 0) {\n                return false;\n            }\n        }\n        return true;",
        "grade-189": {
            "execution": 1
        },
        "23": "if (n <= 3) {\n            return n > 1;\n        }\n        if (n % 2 == 0 || n % 3 == 0) {\n            return false;\n        }\n        for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) {\n                return false;\n            }\n        }\n        return true;",
        "grade-23": {
            "execution": 1
        },
        "144": "if (n == 2) {\n            return true;\n        } else if (n == 1 || n % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;",
        "grade-144": {
            "execution": 1
        },
        "9": "if (n == 1) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        if (n % 3 == 0) {\n            return false;\n        }\n        for (int i = 3; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;",
        "grade-9": {
            "execution": 1
        },
        "8": "boolean isPrime = true;\n        if (n <= 1) {\n            isPrime = false;\n        } else {\n            for (int i = 2; i < n; i++) {\n                if (n % i == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n        }\n        return isPrime;",
        "grade-8": {
            "execution": 1
        },
        "24": "return true;",
        "grade-24": {
            "execution": 0
        },
        "67": "if (n <= 1) {\n            return false;\n        } else if (n == 2) {\n            return true;\n        } else if (n % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;",
        "grade-67": {
            "execution": 1
        },
        "72": "// TODO: implement this function\n        if (n <= 1) {\n            return false;\n        }\n        if (n <= 3) {\n            return true;\n        }\n        if (n % 2 == 0 || n % 3 == 0) {\n            return false;\n        }\n        for (int i = 5; i * i <= n; i = i + 6) {\n            if (n % i == 0 || n % (i + 2) == 0) {\n                return false;\n            }\n        }\n        return true;",
        "grade-72": {
            "execution": 1
        },
        "175": "// TODO: implement me\n        boolean prime = true;\n        if (n<=1) {\n            prime = false;\n        } else {\n            for (int i=2; i<n; i++) {\n                if (n%i == 0) {\n                    prime = false;\n                    break;\n                }\n            }\n        }\n        return prime;",
        "grade-175": {
            "execution": 1
        },
        "195": "// if(n==1)return false;\n        for(int i=2;i<n;i++){\n            if(n%i==0)return false;\n        }\n        return true;",
        "grade-195": {
            "execution": 0
        },
        "60": "if (n < 1) return false;\n        if (n == 1) return false;\n        if (n == 2) return true;\n        if (n == 3) return true;\n        if (n == 5) return true;\n        for (int i = 2; i < Math.sqrt(n) + 1; i++) {\n            if (n % i == 0) return false;\n        }\n        return true;",
        "grade-60": {
            "execution": 1
        },
        "143": "// If a number is less than 2, it's not prime, so return false\n        if (n < 2) {\n            return false;\n        }\n        // We only need to check up to the square root of the number for factors\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            // If n is divisible by i, it has a factor other than 1 and itself,\n            // so it is not prime, so return false\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        // If we didn't find any factors, the number is prime, so return true\n        return true;",
        "grade-143": {
            "execution": 1
        },
        "68": "if (n <= 1) {\n            return false;\n        } else if (n <= 3) {\n            return true;\n        } else if (n % 2 == 0 || n % 3 == 0) {\n            return false;\n        }\n\n        int i = 5;\n        while (i * i <= n) {\n            if (n % i == 0 || n % (i + 2) == 0) {\n                return false;\n            }\n            i += 6;\n        }\n        return true;",
        "grade-68": {
            "execution": 1
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // In this problem, you will implement a function that takes two lists of numbers,\n    // and determines whether it is possible to perform an exchange of elements\n    // between them to make lst1 a list of only even numbers.\n    // There is no limit on the number of exchanged elements between lst1 and lst2.\n    // If it is possible to exchange elements between the lst1 and lst2 to make\n    // all the elements of lst1 to be even, return \"YES\".\n    // Otherwise, return \"NO\".\n    // For example:\n    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    // exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    // It is assumed that the input lists will be non-empty.\n    public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n",
        "snippet": [
            "        int odd = 0, even = 0;\n        for (int i : lst1) {\n            if (i % 2 == 1) {\n                odd += 1;\n            }\n        }\n        for (int i : lst2) {\n            if (i % 2 == 0) {\n                even += 1;\n            }\n        }\n        if (even >= odd) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n}"
        ],
        "simplified": "In this problem, you will implement a function that takes two lists of numbers, and determines whether it is possible to perform an exchange of elements between them to make lst1 a list of only even numbers. There is no limit on the number of exchanged elements between lst1 and lst2. If it is possible to exchange elements between the lst1 and lst2 to make all the elements of lst1 to be even, return \"YES\". Otherwise, return \"NO\".",
        "task_id": "110",
        "37": "int check1 = 0;\n        int check2 = 0;\n        int check3 = 0;\n        for (int i : lst1) {\n            if (i % 2 == 0) {\n                check1 += 1;\n            }\n        }\n        for (int i : lst2) {\n            if (i % 2 == 0) {\n                check2 += 1;\n            }\n        }\n        if (check1 == lst1.size()) {\n            return \"YES\";\n        }\n        if (check2 == lst2.size()) {\n            return \"YES\";\n        }\n        if (check1 > 0 && check2 > 0) {\n            return \"YES\";\n        }\n        return \"NO\";",
        "grade-37": {
            "execution": 0
        },
        "8": "// your code here",
        "grade-8": {
            "execution": 0
        },
        "85": "long count = lst1.stream().filter(n -> n % 2 == 0).count();\n        if (count == lst1.size()) {\n            return \"YES\";\n        }\n        count = lst2.stream().filter(n -> n % 2 == 0).count();\n        if (count == lst2.size()) {\n            return \"YES\";\n        }\n        return \"NO\";",
        "grade-85": {
            "execution": 0
        },
        "77": "// IMPLEMENT ME\n        for (int i = 0; i < lst1.size(); i++) {\n            if (lst1.get(i) % 2 == 1) {\n                for (int j = 0; j < lst2.size(); j++) {\n                    if (lst2.get(j) % 2 == 0) {\n                        int temp = lst1.get(i);\n                        lst1.set(i, lst2.get(j));\n                        lst2.set(j, temp);\n                        break;\n                    }\n                }\n            }\n        }\n        boolean isEven = true;\n        for (int i = 0; i < lst1.size(); i++) {\n            if (lst1.get(i) % 2 == 1) {\n                isEven = false;\n                break;\n            }\n        }\n        if (isEven) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }",
        "grade-77": {
            "execution": 1
        },
        "72": "int count_lst1 = 0;\n        int count_lst2 = 0;\n        for (int i = 0; i < lst1.size(); i++) {\n            if (lst1.get(i) % 2 == 0) {\n                count_lst1 += 1;\n            }\n        }\n        for (int i = 0; i < lst2.size(); i++) {\n            if (lst2.get(i) % 2 == 0) {\n                count_lst2 += 1;\n            }\n        }\n        if (count_lst1 == lst1.size() || count_lst2 == lst2.size()) {\n            return \"YES\";\n        }\n        else {\n            return \"NO\";\n        }",
        "grade-72": {
            "execution": 0
        },
        "44": "int sum = 0;\n        for (int i = 0; i < lst1.size(); i++) {\n            sum += lst1.get(i);\n        }\n        if (sum % 2 == 0) {\n            return \"YES\";\n        }\n        else {\n            for (int i = 0; i < lst2.size(); i++) {\n                sum -= lst2.get(i);\n                if (sum % 2 == 0) {\n                    return \"YES\";\n                }\n                sum += lst2.get(i);\n            }\n        }\n        return \"NO\";",
        "grade-44": {
            "execution": 0
        },
        "34": "// Write your code here\n        return \"\";",
        "grade-34": {
            "execution": 0
        },
        "182": "// TODO: Implement this function\n        return \"\";",
        "grade-182": {
            "execution": 0
        },
        "30": "// You need to implement this function.\n        int size1 = lst1.size();\n        int size2 = lst2.size();\n        for (int i = 0; i < size1; i++) {\n            if (lst1.get(i) % 2 != 0) {\n                for (int j = 0; j < size2; j++) {\n                    if (lst2.get(j) % 2 == 0) {\n                        int temp = lst1.get(i);\n                        lst1.set(i, lst2.get(j));\n                        lst2.set(j, temp);\n                        break;\n                    }\n                }\n            }\n        }\n        for (int i = 0; i < size1; i++) {\n            if (lst1.get(i) % 2 != 0) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";",
        "grade-30": {
            "execution": 1
        },
        "196": "// Implement code below.\n        return \"YES\";",
        "grade-196": {
            "execution": 0
        },
        "141": "throw new UnsupportedOperationException(\"Remove this line and implement your method\");",
        "grade-141": {
            "execution": 0
        },
        "10": "return \"\";",
        "grade-10": {
            "execution": 0
        },
        "9": "// TODO: Implement your solution\n        return \"\";",
        "grade-9": {
            "execution": 0
        },
        "31": "// WRITE YOUR CODE HERE\n        int n = lst1.size();\n        boolean flag=true;\n        for(int i=0;i<n;i++){\n            if(lst1.get(i)%2!=0){\n                flag=false;\n                break;\n            }\n        }\n        if(flag)\n            return \"YES\";\n        else{\n            int count=0;\n            for(int i=0;i<n;i++){\n                if(lst1.get(i)%2!=0 && lst2.get(i)%2==0){\n                    lst1.set(i,lst2.get(i));\n                    count++;\n                }\n            }\n            if(count>0)\n                return \"YES\";\n            else\n                return \"NO\";\n        }",
        "grade-31": {
            "execution": 0
        },
        "69": "// Your code here\n        // check first if all numbers in lst1 are even\n        boolean isAllEven = true;\n        for (int i = 0; i < lst1.size(); i++) {\n            if (lst1.get(i) % 2 != 0) {\n                isAllEven = false;\n                break;\n            }\n        }\n        if (isAllEven) return \"YES\";\n        else {\n            // try to check if we can exchange some odd numbers in lst1 with even numbers in lst2\n            for (int i = 0; i < lst1.size(); i++) {\n                for (int j = 0; j < lst2.size(); j++) {\n                    if (lst1.get(i) % 2 != 0 && lst2.get(j) % 2 == 0) {\n                        int temp = lst1.get(i);\n                        lst1.set(i, lst2.get(j));\n                        lst2.set(j, temp);\n                        return exchange(lst1, lst2);\n                    }\n                }\n            }\n            return \"NO\";\n        }",
        "grade-69": {
            "execution": 1
        },
        "74": "int count1 = 0;\n        int count2 = 0;\n        int count3 = 0;\n        for (int i = 0; i < lst1.size(); i++) {\n            if (lst1.get(i) % 2 == 0) {\n                count1++;\n            }\n        }\n        for (int i = 0; i < lst2.size(); i++) {\n            if (lst2.get(i) % 2 == 0) {\n                count2++;\n            }\n        }\n        if (count1 == lst1.size()) {\n            return \"YES\";\n        }\n        if (count2 == lst2.size()) {\n            return \"YES\";\n        }\n        if (count1 == 0) {\n            count3 = lst1.size();\n        }\n        if (count2 == 0) {\n            count3 = lst2.size();\n        }\n        if (count3 % 2 == 0) {\n            return \"YES\";\n        }\n        return \"NO\";",
        "grade-74": {
            "execution": 0
        },
        "168": "// Write your code here\n        int oddSum = lst1.stream().mapToInt(x -> x).sum();\n        int evenSum = lst2.stream().mapToInt(x -> x).sum();\n        if (oddSum % 2 == 1) {\n            return \"NO\";\n        }\n        return \"YES\";",
        "grade-168": {
            "execution": 0
        },
        "199": "// IMPLEMENT THIS METHOD\n        return \"\";",
        "grade-199": {
            "execution": 0
        },
        "186": "// TODO: implement me!\n        return \"NO\";",
        "grade-186": {
            "execution": 0
        },
        "63": "for (int i = 0; i < lst1.size(); i++) {\n            if (lst1.get(i) % 2 == 1) {\n                for (int j = 0; j < lst2.size(); j++) {\n                    if (lst2.get(j) % 2 == 0) {\n                        lst1.set(i, lst2.get(j));\n                        lst2.set(j, i);\n                        break;\n                    }\n                }\n            }\n        }\n        for (int i = 0; i < lst1.size(); i++) {\n            if (lst1.get(i) % 2 == 1) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";",
        "grade-63": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String brackets) {\n",
        "snippet": [
            "        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '(') {\n                depth += 1;\n            } else {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}"
        ],
        "simplified": "brackets is a string of \"(\" and \")\". return True if every opening bracket has a corresponding closing bracket.",
        "task_id": "61",
        "35": "throw new RuntimeException(\"not implemented\");",
        "grade-35": {
            "execution": 0
        },
        "7": "int numOpen = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '(') {\n                numOpen++;\n            } else {\n                numOpen--;\n            }\n            if (numOpen < 0) {\n                return false;\n            }\n        }\n        return numOpen == 0;",
        "grade-7": {
            "execution": 1
        },
        "98": "throw new NotImplementedError();",
        "grade-98": {
            "execution": 0
        },
        "83": "// insert your code here\n        return false;",
        "grade-83": {
            "execution": 0
        },
        "76": "int open = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n            if (c == '(') {\n                open++;\n            } else if (c == ')') {\n                open--;\n            }\n            if (open < 0) {\n                return false;\n            }\n        }\n        return open == 0;",
        "grade-76": {
            "execution": 1
        },
        "45": "int n = brackets.length();\n        if (n % 2 == 1) {\n            return false;\n        }\n        int k = 0;\n        for (int i = 0; i < n; i++) {\n            char c = brackets.charAt(i);\n            if (c == '(') {\n                k++;\n            } else {\n                k--;\n            }\n            if (k < 0) {\n                return false;\n            }\n        }\n        return k == 0;",
        "grade-45": {
            "execution": 1
        },
        "31": "int n = brackets.length();\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (brackets.charAt(i) == '(') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                return false;\n            }\n        }\n        return count == 0;",
        "grade-31": {
            "execution": 1
        },
        "25": "// Complete this function\n        int n = brackets.length();\n        int cnt = 0;\n        for (int i = 0; i < n; i++) {\n            if (brackets.charAt(i) == '(') {\n                cnt++;\n            } else {\n                cnt--;\n            }\n            if (cnt < 0) {\n                return false;\n            }\n        }\n        return cnt == 0;",
        "grade-25": {
            "execution": 1
        },
        "151": "if (brackets.length() == 0) {\n            return true;\n        }\n        int stack = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '(') {\n                stack++;\n            } else {\n                stack--;\n            }\n            if (stack < 0) {\n                return false;\n            }\n        }\n        return stack == 0;",
        "grade-151": {
            "execution": 1
        },
        "9": "throw new Error(\"TODO\");",
        "grade-9": {
            "execution": 0
        },
        "8": "// STUDENT CODE GOES HERE\n        if (brackets.length() == 0) return true;\n        if (brackets.charAt(0) == ')') return false;\n        int count = 0;\n        for (int i = 0; i < brackets.length(); i++){\n            if (brackets.charAt(i) == '(') count++;\n            else count--;\n            if (count < 0) return false;\n        }\n        return count == 0;",
        "grade-8": {
            "execution": 1
        },
        "28": "// your code here\n        return false;",
        "grade-28": {
            "execution": 0
        },
        "73": "int score = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            score += brackets.charAt(i) == '(' ? 1 : -1;\n            if (score < 0) return false;\n        }\n        return score == 0;",
        "grade-73": {
            "execution": 1
        },
        "80": "// TODO: write code here\n        return true;",
        "grade-80": {
            "execution": 0
        },
        "188": "Stack<Character> s = new Stack<Character>();\n        if (brackets.length() % 2 != 0) return false;\n        for (int i = 0; i < brackets.length(); i++) {\n            char ch = brackets.charAt(i);\n            if (ch == '(') {\n                s.push(ch);\n            } else {\n                if (s.empty()) return false;\n                s.pop();\n            }\n        }\n        return s.empty();",
        "grade-188": {
            "execution": 1
        },
        "63": "throw new RuntimeException(\"Not implemented yet\");",
        "grade-63": {
            "execution": 0
        },
        "150": "// YOUR CODE HERE\n        throw new RuntimeException(\"not implemented\");",
        "grade-150": {
            "execution": 0
        },
        "74": "int N = brackets.length();\n        int openCount = 0;\n        for (int i = 0; i < N; i++) {\n            if (brackets.charAt(i) == '(') {\n                openCount++;\n            } else {\n                openCount--;\n            }\n            if (openCount < 0) {\n                return false;\n            }\n        }\n        return openCount == 0;",
        "grade-74": {
            "execution": 1
        },
        "161": "return brackets.replaceAll(\"[^()]\", \"\").chars().reduce(0, (x, y) -> x += y == '(' ? 1 : -1) == 0;",
        "grade-161": {
            "execution": 0
        },
        "99": "int open = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '(') {\n                open++;\n            } else {\n                open--;\n            }\n            if (open < 0) {\n                return false;\n            }\n        }\n        return open == 0;",
        "grade-99": {
            "execution": 1
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n",
        "snippet": [
            "        if (n == 0) {\n            return List.of(1);\n        }\n        List<Integer> my_tri = new ArrayList<>(Arrays.asList(1, 3));\n        for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                my_tri.add(i / 2 + 1);\n            } else {\n                my_tri.add(my_tri.get(my_tri.size() - 1) + my_tri.get(my_tri.size() - 2) + (i + 3) / 2);\n            }\n        }\n        return my_tri;\n    }\n}"
        ],
        "simplified": "Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in the last couple centuries. However, what people don't know is Tribonacci sequence. Tribonacci sequence is defined by the recurrence: tri(1) = 3 tri(n) = 1 + n / 2, if n is even. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.",
        "task_id": "130",
        "185": "ArrayList<Integer> res = new ArrayList<>();\n        if (n == 0) return res;\n        res.add(1);\n        if (n == 1) return res;\n        res.add(3);\n        if (n == 2) return res;\n        res.add(2);\n        int a = 1, b = 3, c = 2;\n        while (res.size() <= n) {\n            int d = a + b + c;\n            a = b;\n            b = c;\n            c = d;\n            res.add(d);\n        }\n        return res;",
        "grade-185": {
            "execution": 0
        },
        "30": "// your code here\n        return null;",
        "grade-30": {
            "execution": 0
        },
        "6": "ArrayList<Integer> result = new ArrayList<Integer>();\n        result.add(1);\n        result.add(3);\n        result.add(2);\n        int next = 0;\n        for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                next = 1 + i / 2;\n            } else {\n                next = result.get(i - 1) + result.get(i - 2) + result.get(i + 1);\n            }\n            result.add(next);\n        }\n        return result;",
        "grade-6": {
            "execution": 0
        },
        "82": "// Write your code here\n        return null;",
        "grade-82": {
            "execution": 0
        },
        "71": "// type your code here\n        return null;",
        "grade-71": {
            "execution": 0
        },
        "65": "ArrayList<Integer> list = new ArrayList<Integer>();\n        if (n == 0) {\n            return list;\n        }\n        list.add(1);\n        if (n == 1) {\n            return list;\n        }\n        list.add(3);\n        if (n == 2) {\n            return list;\n        }\n        list.add(2);\n        if (n == 3) {\n            return list;\n        }\n        for (int i = 3; i < n; i++) {\n            if (i % 2 == 0) {\n                list.add(1 + i / 2);\n            } else {\n                list.add(list.get(i - 1) + list.get(i - 2) + list.get(i + 1));\n            }\n        }\n        return list;",
        "grade-65": {
            "execution": 0
        },
        "37": "// YOUR CODE HERE\n        return null;",
        "grade-37": {
            "execution": 0
        },
        "28": "ArrayList<Integer> list = new ArrayList<Integer>();\n        if (n == 0) {\n            return list;\n        }\n        if (n == 1) {\n            list.add(1);\n            return list;\n        }\n        if (n == 2) {\n            list.add(1);\n            list.add(3);\n            return list;\n        }\n        list.add(1);\n        list.add(3);\n        list.add(2);\n        int i = 3;\n        while (i <= n) {\n            if (i % 2 == 0) {\n                list.add(1 + i / 2);\n            } else {\n                list.add(list.get(i - 1) + list.get(i - 2) + list.get(i + 1));\n            }\n            i++;\n        }\n        return list;",
        "grade-28": {
            "execution": 0
        },
        "196": "// Write your code here\n        if (n < 0) {\n            return new ArrayList<Integer>();\n        } else if (n == 0) {\n            return new ArrayList<Integer>(Arrays.asList(1));\n        } else if (n == 1) {\n            return new ArrayList<Integer>(Arrays.asList(1, 3));\n        } else if (n == 2) {\n            return new ArrayList<Integer>(Arrays.asList(1, 3, 2));\n        } else {\n            ArrayList<Integer> result = new ArrayList<Integer>(Arrays.asList(1, 3, 2));\n            for (int i = 3; i <= n; i++) {\n                if (i % 2 == 0) {\n                    result.add(1 + i / 2);\n                } else {\n                    result.add(result.get(i - 1) + result.get(i - 2) + result.get(i + 1));\n                }\n            }\n            return result;\n        }",
        "grade-196": {
            "execution": 0
        },
        "156": "ArrayList<Integer> list = new ArrayList<Integer>();\n        for (int i = 1; i <= n + 1; i++) {\n            if (i == 1) {\n                list.add(3);\n            } else if (i % 2 == 0) {\n                list.add(1 + i / 2);\n            } else {\n                list.add(list.get(i - 2) + list.get(i - 3) + list.get(i - 1));\n            }\n        }\n        return list;",
        "grade-156": {
            "execution": 0
        },
        "23": "ArrayList<Integer> tri = new ArrayList<>();\n        tri.add(1);\n        tri.add(3);\n        tri.add(2);\n        if (n == 2) {\n            return tri;\n        }\n        for (int i = 3; i <= n; i++) {\n            int a = tri.get(i - 3);\n            int b = tri.get(i - 2);\n            int c = tri.get(i - 1);\n            if (i % 2 == 0) {\n                tri.add(1 + i / 2);\n            } else {\n                tri.add(a + b + c);\n            }\n        }\n        return tri;",
        "grade-23": {
            "execution": 0
        },
        "169": "ArrayList<Integer> result = new ArrayList<Integer>();\n        result.add(1);\n        result.add(3);\n        result.add(2);\n        for (int i = 3; i <= n; i++) {\n            int x = result.get(i - 1);\n            int y = result.get(i - 2);\n            int z = result.get(i - 3);\n            result.add(i % 2 == 0 ? 1 + i / 2 : x + y + z);\n        }\n        return result;",
        "grade-169": {
            "execution": 0
        },
        "122": "// Write your code here.\n        return null;",
        "grade-122": {
            "execution": 0
        },
        "8": "ArrayList<Integer> res = new ArrayList<Integer>();\n        // fill in res with the first n + 1 terms of the sequence\n        return res;",
        "grade-8": {
            "execution": 0
        },
        "7": "ArrayList<Integer> list = new ArrayList<Integer>();\n        list.add(1);\n        if (n == 0) {\n            return list;\n        }\n        list.add(3);\n        if (n == 1) {\n            return list;\n        }\n        list.add(2);\n        if (n == 2) {\n            return list;\n        }\n        for (int i = 3; i <= n; i++) {\n            int x = list.get(i - 1) + list.get(i - 2) + list.get(i - 3);\n            list.add(x);\n        }\n        return list;",
        "grade-7": {
            "execution": 0
        },
        "25": "ArrayList<Integer> answer = new ArrayList<Integer>();\n        if (n == 0) {\n            return answer;\n        }\n        answer.add(1);\n        if (n == 1) {\n            return answer;\n        }\n        answer.add(3);\n        if (n == 2) {\n            return answer;\n        }\n        answer.add(2);\n        if (n == 3) {\n            return answer;\n        }\n        for (int i = 4; i <= n; i++) {\n            if (i % 2 == 0) {\n                answer.add(1 + i / 2);\n            } else {\n                answer.add(answer.get(i - 1) + answer.get(i - 2) + answer.get(i + 1));\n            }\n        }\n        return answer;",
        "grade-25": {
            "execution": 0
        },
        "63": "ArrayList<Integer> a = new ArrayList<>();\n        a.add(1);\n        a.add(3);\n        a.add(2);\n        if (n <= 2) return a;\n        while (a.size() < n + 1) {\n            int N = a.size();\n            int A = a.get(N - 3);\n            int B = a.get(N - 2);\n            int C = a.get(N - 1);\n            int D = (N % 2 == 0) ? (1 + N / 2) : (A + B + C);\n            a.add(D);\n        }\n        return a;",
        "grade-63": {
            "execution": 0
        },
        "68": "ArrayList<Integer> result = new ArrayList<Integer>();\n        result.add(1);\n        result.add(3);\n        result.add(2);\n        if (n == 0) {\n            return result;\n        }\n        result.add(8);\n        for (int i = 4; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(1 + i / 2);\n            } else {\n                result.add(result.get(i - 1) + result.get(i - 2) + result.get(i + 1));\n            }\n        }\n        return result;",
        "grade-68": {
            "execution": 0
        },
        "146": "ArrayList<Integer> ans = new ArrayList<>();\n        ans.add(1);\n        ans.add(3);\n        ans.add(2);\n        for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                ans.add(1 + i / 2);\n            } else {\n                ans.add(ans.get(i - 1) + ans.get(i - 2) + ans.get(i + 1));\n            }\n        }\n        return ans;",
        "grade-146": {
            "execution": 0
        },
        "173": "ArrayList<Integer> array = new ArrayList<Integer>();\n        array.add(1);\n        array.add(3);\n        array.add(2);\n        int lastEven = 2;\n        int lastOdd1 = 3;\n        int lastOdd2 = 1;\n        int lastOdd3 = 0;\n        for (int i = 3; i <= n; i++) {\n            int next;\n            if (i % 2 == 0) {\n                next = lastEven + 1;\n                lastEven = next;\n            } else {\n                next = lastOdd1 + lastOdd2 + lastOdd3;\n                lastOdd3 = lastOdd2;\n                lastOdd2 = lastOdd1;\n                lastOdd1 = next;\n            }\n            array.add(next);\n        }\n        return array;",
        "grade-173": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return length of given string\n    // >>> strlen('')\n    // 0\n    // >>> strlen('abc')\n    // 3\n    public static int strlen(String string) {\n",
        "snippet": [
            "        return string.length();\n    }\n}"
        ],
        "simplified": "Return length of given string",
        "task_id": "23",
        "137": "// Write your code here\n        return 0;",
        "grade-137": {
            "execution": 0
        },
        "7": "return 0;",
        "grade-7": {
            "execution": 0
        },
        "0": "throw new RuntimeException(\"not implemented\");",
        "grade-0": {
            "execution": 0
        },
        "165": "int length = 0;\n\t\twhile (string.length() > length) {\n\t\t\tlength = length + 1;\n\t\t}\n\t\treturn length;",
        "grade-165": {
            "execution": 1
        },
        "48": "// TODO: implement this\n\treturn string.length();",
        "grade-48": {
            "execution": 1
        },
        "42": "int i = 0;\n        while(i < string.length() && string.charAt(i) != '\\0') {\n            i++;\n        }\n        return i;",
        "grade-42": {
            "execution": 1
        },
        "141": "// [Your code here]\n        return 0;",
        "grade-141": {
            "execution": 0
        },
        "27": "int counter = 0;\n        for (int i = 0; i < string.length(); i++) {\n            counter++;\n        }\n        return counter;",
        "grade-27": {
            "execution": 1
        },
        "195": "// TODO: write your code here\n        return 0;",
        "grade-195": {
            "execution": 0
        },
        "115": "// TODO implement strlen\n        return 0;",
        "grade-115": {
            "execution": 0
        },
        "3": "// The length of the string is an integer in the range of 0 to 2^31 - 1.\n        return string.length();",
        "grade-3": {
            "execution": 1
        },
        "82": "// TODO: Implement this function.\n        return 0;",
        "grade-82": {
            "execution": 0
        },
        "189": "// IMPLEMENT ME\n        return string.length();",
        "grade-189": {
            "execution": 1
        },
        "92": "throw new UnsupportedOperationException(\"Not implemented\");",
        "grade-92": {
            "execution": 0
        },
        "1": "return string.length();",
        "grade-1": {
            "execution": 1
        },
        "117": "int count = 0;\n        for (char c : string.toCharArray()) {\n            count += 1;\n        }\n        return count;",
        "grade-117": {
            "execution": 1
        },
        "78": "int len = 0;\n        try {\n            len = string.length();\n        } catch (Exception e) {\n            len = 0;\n        }\n        return len;",
        "grade-78": {
            "execution": 1
        },
        "158": "int length = 0;\n\t\tfor (int i = 0; i < string.length(); i++) {\n\t\t\tlength++;\n\t\t}\n\t\treturn length;",
        "grade-158": {
            "execution": 1
        },
        "107": "int length = 0;\n        for (int i = 0; i < string.length(); i++) {\n            length++;\n        }\n        return length;",
        "grade-107": {
            "execution": 1
        },
        "74": "return string.length();",
        "grade-74": {
            "execution": 1
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // encrypt('hi') returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf') returns 'kj'\n    // encrypt('et') returns 'ix'\n    public static String encrypt(String s) {\n",
        "snippet": [
            "        StringBuilder sb = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                sb.append((char) ('a' + (c - 'a' + 2 * 2) % 26));\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n}"
        ],
        "simplified": "Create a function encrypt that takes a string as an argument and returns a string encrypted with the alphabet being rotated. The alphabet should be rotated in a manner such that the letters shift down by two multiplied to two places.",
        "task_id": "89",
        "195": "String output = \"\";\n        // Your Code Here\n        String [] alphabet = {\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"};\n        for(int i = 0; i < s.length(); i++) {\n            char ch = s.charAt(i);\n            int indx = indexOf(alphabet, Character.toString(ch));\n            int newIndex = (indx + 4) % alphabet.length;\n            output += alphabet[newIndex];\n        }\n        return output;",
        "grade-195": {
            "execution": 0
        },
        "30": "char[] array = s.toCharArray();\n        for (int i = 0; i < array.length; i++) {\n            char c = array[i];\n            int index = c - 'a';\n            index = (index + 2 * 2) % 26;\n            array[i] = (char) ('a' + index);\n        }\n        return new String(array);",
        "grade-30": {
            "execution": 1
        },
        "6": "char[] letters = s.toCharArray();\n        for (int i = 0; i < letters.length; i++) {\n            letters[i] = (char) (((letters[i] - 'a' + 2) % 26) + 'a');\n        }\n        return new String(letters);",
        "grade-6": {
            "execution": 0
        },
        "83": "String e = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c < 'a' || c > 'z') throw new RuntimeException();\n            e += (char)((((c - 'a') * 2 + 2) % 26) + 'a');\n        }\n        return e;",
        "grade-83": {
            "execution": 0
        },
        "74": "char[] encrypted = new char[s.length()];\n        int c = 0;\n        for (char l : s.toCharArray()) {\n            int lnum = (int) l;\n            int nnum = lnum + 4;\n            encrypted[c] = (char) nnum;\n            c++;\n        }\n        return new String(encrypted);",
        "grade-74": {
            "execution": 0
        },
        "69": "// create a new string that will be the encrypted version of s\n        String enc = \"\";\n        // for every letter in s, \n        for (int i = 0; i < s.length(); i++) {\n            // declare a variable for storing the number representation of a letter\n            int n = (int) s.charAt(i);\n            // if n is either 90, 122, or a letter after 122 (ie, the one after z),\n            if (n == 90 || n == 122 || n > 122) {\n                // set n to itself minus 23\n                n -= 23;\n            }\n            // otherwise,\n            else {\n                // set n to itself plus 3\n                n += 3;\n            }\n            // concatenate the letter of n to enc\n            enc += (char) n;\n        }\n        // return enc\n        return enc;",
        "grade-69": {
            "execution": 0
        },
        "38": "char [] ca = s.toCharArray();\n        int size = ca.length;\n        char [] c = new char[size];\n        for (int i = 0; i < size; i++) {\n            c[i] = (char)(((ca[i] - 97 + 2) % 26) + 97);\n        }\n        return new String(c);",
        "grade-38": {
            "execution": 0
        },
        "27": "String alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            int index = alphabet.indexOf(s.charAt(i));\n            index = (index + (2 * 2)) % alphabet.length();\n            sb.append(alphabet.charAt(index));\n        }\n        return sb.toString();",
        "grade-27": {
            "execution": 1
        },
        "169": "return s.chars().map(Problem::encryptLetter).collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append).toString();",
        "grade-169": {
            "execution": 0
        },
        "23": "String encoded = \"\";\n        int charNum;\n        for (int i = 0; i < s.length(); i++) {\n            charNum = s.charAt(i);\n            if (charNum < 69)\n                charNum += 24;\n            encoded += Character.toString((char)(charNum - 2 * 2));\n        }\n        return encoded;",
        "grade-23": {
            "execution": 0
        },
        "182": "String ans = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            int pos = s.charAt(i) - 97;\n            if (pos < 24)\n                ans += (char)((pos + 97 + 2 * 2) % 26 + 97);\n            else if (pos < 25)\n                ans += (char)((pos + 97 + 2 * 1) % 26 + 97);\n            else\n                ans += (char)((pos + 97 + 2 * 0) % 26 + 97);\n        }\n        return ans;",
        "grade-182": {
            "execution": 0
        },
        "132": "char[] list = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};\n        String result = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            int count = 0;\n            for (int j = 0; j < list.length; j++) {\n                if (s.charAt(i) == list[j]) {\n                    if (j < 2) {\n                        count = j + 24;\n                    } else {\n                        count = j - 2;\n                    }\n                }\n            }\n            result += list[count];\n        }\n        return result;",
        "grade-132": {
            "execution": 0
        },
        "8": "StringBuilder sb = new StringBuilder();\n        int shift = (int) (2 * Math.pow(2, 2));\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            c = (char) (c + shift);\n            sb.append(c);\n        }\n        return sb.toString();",
        "grade-8": {
            "execution": 0
        },
        "7": "char[] arr = s.toCharArray();\n        for (int i = 0; i < arr.length; i++) {\n            char x = arr[i];\n            if (x == 'a' || x == 'b') {\n                arr[i] = 'e';\n            } else if (x == 'c' || x == 'd') {\n                arr[i] = 'f';\n            } else if (x == 'e' || x == 'f') {\n                arr[i] = 'g';\n            } else if (x == 'g' || x == 'h') {\n                arr[i] = 'i';\n            } else if (x == 'i' || x == 'j') {\n                arr[i] = 'l';\n            } else if (x == 'k' || x == 'l') {\n                arr[i] = 'm';\n            } else if (x == 'm' || x == 'n') {\n                arr[i] = 'o';\n            } else if (x == 'o' || x == 'p') {\n                arr[i] = 'q';\n            } else if (x == 'q' || x == 'r') {\n                arr[i] = 't';\n            } else if (x == 's' || x == 't') {\n                arr[i] = 'u';\n            } else if (x == 'u' || x == 'v') {\n                arr[i] = 'w';\n            } else if (x == 'w' || x == 'x') {\n                arr[i] = 'y';\n            } else if (x == 'y' || x == 'z') {\n                arr[i] = 'b';\n            }\n        }\n        return new String(arr);",
        "grade-7": {
            "execution": 0
        },
        "24": "// use a for loop to loop through the string\n        // for each character, add the 2 times 2 to the letter\n        // do toUpperCase because we don't want lowercase letters\n        // store the answer in a new variable\n        // return the new variable\n        char[] charArray = s.toCharArray();\n        for (int i = 0; i < charArray.length; i++) {\n            charArray[i] += 4;\n        }\n        return new String(charArray);",
        "grade-24": {
            "execution": 0
        },
        "67": "String allAlpha = \"abcdefghijklmnopqrstuvwxyz\";\n        String[] splitAlpha = allAlpha.split(\"\");\n        String alpha = String.join(\"\", Arrays.copyOfRange(splitAlpha, splitAlpha.length-2, splitAlpha.length));\n        String allRotation = alpha+allAlpha;\n        String[] splitRotation = allRotation.split(\"\");\n        String[] splitS = s.split(\"\");\n        String[] result = new String[splitS.length];\n        for (int i = 0; i < splitS.length; i++) {\n            for (int j = 0; j < splitAlpha.length; j++) {\n                if (splitS[i].equals(splitAlpha[j])) {\n                    result[i] = splitRotation[j];\n                }\n            }\n        }\n        return String.join(\"\", result);",
        "grade-67": {
            "execution": 0
        },
        "71": "String alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        String newAlphabet = \"cdefghijklmnopqrstuvwxyzab\";\n        String newString = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            int position = alphabet.indexOf(s.charAt(i));\n            char newChar = newAlphabet.charAt(position);\n            newString += newChar;\n        }\n        return newString;",
        "grade-71": {
            "execution": 0
        },
        "158": "// Code here",
        "grade-158": {
            "execution": 0
        },
        "185": "String alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        String shifted = alphabet.substring(2) + alphabet.substring(0, 2);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            sb.append(shifted.charAt(alphabet.indexOf(s.charAt(i))));\n        }\n        return sb.toString();",
        "grade-185": {
            "execution": 0
        },
        "174": "String lc = s.toLowerCase();\n        StringBuilder sb = new StringBuilder();\n        int len = lc.length();\n        char[] ca = lc.toCharArray();\n        for (int i = 0; i < len; i++) {\n            if (ca[i] + 2 >= 'a' && ca[i] + 2 <= 'm') {\n                sb.append((char)(ca[i] + 2));\n            } else if (ca[i] + 2 > 'm' && ca[i] + 2 <= 'z') {\n                sb.append((char)(ca[i] + 2 - 26));\n            } else if (ca[i] + 2 > 'z') {\n                sb.append((char)(ca[i] + 2 - 26 - 26));\n            }\n        }\n        return sb.toString();",
        "grade-174": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function vowels_count which takes a string representing\n    // a word as input and returns the number of vowels in the string.\n    // Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    // vowel, but only when it is at the end of the given word.\n    // Example:\n    // >>> vowels_count(\"abcde\")\n    // 2\n    // >>> vowels_count(\"ACEDY\")\n    // 3\n    public static int vowelsCount(String s) {\n",
        "snippet": [
            "        String vowels = \"aeiouAEIOU\";\n        int n_vowels = 0;\n        for (char c : s.toCharArray()) {\n            if (vowels.indexOf(c) != -1) {\n                n_vowels += 1;\n            }\n        }\n        if (s.charAt(s.length() - 1) == 'y' || s.charAt(s.length() - 1) == 'Y') {\n            n_vowels += 1;\n        }\n        return n_vowels;\n    }\n}"
        ],
        "simplified": "Add more test cases.",
        "task_id": "64",
        "196": "if (s == null) return 0;\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            } else if (c == 'y' && i == s.length() - 1) {\n                count++;\n            }\n        }\n        return count;",
        "grade-196": {
            "execution": 0
        },
        "31": "int c = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char ch = s.charAt(i);\n            if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {\n                c++;\n            }\n        }\n        if (s.charAt(s.length() - 1) == 'y') {\n            c++;\n        }\n        return c;",
        "grade-31": {
            "execution": 0
        },
        "6": "String[] vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"};\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            for (int j = 0; j < vowels.length; j++) {\n                if (s.charAt(i) == vowels[j].charAt(0)) {\n                    count++;\n                }\n            }\n        }\n        if (s.charAt(s.length() - 1) == 'y') {\n            count++;\n        }\n        return count;",
        "grade-6": {
            "execution": 0
        },
        "78": "// Write your code here",
        "grade-78": {
            "execution": 0
        },
        "70": "int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.toLowerCase(c) == 'a' ||\n                Character.toLowerCase(c) == 'e' ||\n                Character.toLowerCase(c) == 'i' ||\n                Character.toLowerCase(c) == 'o' ||\n                Character.toLowerCase(c) == 'u') {\n                count += 1;\n            }\n        }\n        if (Character.toLowerCase(s.charAt(s.length() - 1)) == 'y') {\n            count += 1;\n        }\n        return count;",
        "grade-70": {
            "execution": 1
        },
        "64": "throw new UnsupportedOperationException(\"Not implemented\");",
        "grade-64": {
            "execution": 0
        },
        "38": "String[] a = s.split(\"\");\n        int count = 0;\n        for (int i = 0; i < a.length; i++) {\n            switch (a[i]) {\n                case \"a\":\n                case \"e\":\n                case \"i\":\n                case \"o\":\n                case \"u\":\n                case \"y\":\n                    count++;\n                    break;\n                default:\n                    break;\n            }\n        }\n        return count;",
        "grade-38": {
            "execution": 0
        },
        "29": "int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        if (s.charAt(s.length() - 1) == 'y') {\n            count++;\n        }\n        return count;",
        "grade-29": {
            "execution": 0
        },
        "161": "String vowels = \"aeiou\";\n        int count = 0;\n        String[] arr = s.split(\"\");\n        for (int i = 0; i < arr.length; i++) {\n            String c = arr[i].toLowerCase();\n            if (vowels.contains(c)) {\n                count++;\n            }\n        }\n        return count;",
        "grade-161": {
            "execution": 0
        },
        "24": "s = s.toLowerCase();\n        int n = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                n++;\n            }\n        }\n        if (s.charAt(s.length() - 1) == 'y') {\n            n++;\n        }\n        return n;",
        "grade-24": {
            "execution": 1
        },
        "176": "// Uncomment the line below to add your implementation here\n        // You need to return the correct result\n        // using the loop below\n        if (s.length() == 0) return 0;\n        int count = 0;\n        int i = 0;\n        while (i < s.length()) {\n            if (isVowel(s.charAt(i))) {\n                count++;\n            }\n            i++;\n        }\n        return count;",
        "grade-176": {
            "execution": 0
        },
        "122": "String[] vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"};\n        return Arrays.stream(s.split(\"\"))\n                     .filter(Arrays.asList(vowels)::contains)\n                     .collect(Collectors.toList())\n                     .size();",
        "grade-122": {
            "execution": 0
        },
        "8": "int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n                count++;\n            else if (c == 'y' && i == s.length() - 1)\n                count++;\n        }\n        return count;",
        "grade-8": {
            "execution": 0
        },
        "7": "// TODO: Write your code here\n        return 0;",
        "grade-7": {
            "execution": 0
        },
        "26": "if (s == null) return 0;\n        s = s.toLowerCase();\n        int cnt = 0;\n        boolean lastWasY = false;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                cnt++;\n                lastWasY = false;\n            } else if (s.charAt(i) == 'y') {\n                if (lastWasY) {\n                    lastWasY = false;\n                } else {\n                    lastWasY = true;\n                }\n            } else {\n                lastWasY = false;\n            }\n        }\n        if (lastWasY) cnt++;\n        return cnt;",
        "grade-26": {
            "execution": 1
        },
        "59": "int count = 0;\n        int size = s.length();\n        for (int i = 0; i < size; i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count += 1;\n            } else if (c == 'y' && i == size - 1) {\n                count += 1;\n            }\n        }\n        return count;",
        "grade-59": {
            "execution": 0
        },
        "67": "// *** WRITE YOUR CODE HERE ***\n        int n = 0;\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if ((c == 'a') || (c == 'e') || (c == 'i') || (c == 'o') || (c == 'u')) {\n                count++;\n            }\n            if (c == 'y') {\n                n = i;\n            }\n        }\n        if (n == s.length() - 1) {\n            count++;\n        }\n        return count;",
        "grade-67": {
            "execution": 0
        },
        "148": "int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            }\n        }\n        if (s.endsWith(\"y\")) {\n            count++;\n        }\n        return count;",
        "grade-148": {
            "execution": 0
        },
        "179": "return 5;",
        "grade-179": {
            "execution": 0
        },
        "167": "if (s == null) {\n            return 0;\n        }\n\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            } else if (c == 'y' && i == s.length() - 1) {\n                count++;\n            }\n        }\n        return count;",
        "grade-167": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    // (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    public static Pair<Integer, Integer> sumProduct(ArrayList<Integer> numbers) {\n",
        "snippet": [
            "        int sum = 0;\n        int product = 1;\n\n        for (int n : numbers) {\n            sum += n;\n            product *= n;\n        }\n        return Arrays.asList(sum, product);\n    }\n}"
        ],
        "simplified": "For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list. Empty sum should be equal to 0 and empty product should be equal to 1.",
        "task_id": "8",
        "135": "// int result = numbers.stream().reduce(0, (subtotal, element) -> subtotal + element);\n        int sum = numbers.stream().reduce(0, (subtotal, element) -> subtotal + element);\n        int product = numbers.stream().reduce(1, (subtotal, element) -> subtotal * element);\n        return new Pair<Integer, Integer>(sum, product);",
        "grade-135": {
            "execution": 0
        },
        "21": "return Pair.with(numbers.stream().reduce(0, (x, y) -> x + y), numbers.stream().reduce(1, (x, y) -> x * y));",
        "grade-21": {
            "execution": 0
        },
        "4": "return new Pair<Integer, Integer>(numbers.stream().reduce(0, (i,j) -> i+j),\n                                          numbers.stream().reduce(1, (i,j) -> i*j));",
        "grade-4": {
            "execution": 0
        },
        "154": "// 1. Return the sum of numbers.\n        // 2. Return the product of numbers.\n        // 3. Return a tuple (sum, product).\n        // 4. Your solution should work for empty list.\n        int s = 0;\n        int p = 1;\n        for (int i = 0; i < numbers.size(); i++) {\n            s += numbers.get(i);\n            p *= numbers.get(i);\n        }\n        return new Pair<Integer, Integer>(s, p);",
        "grade-154": {
            "execution": 0
        },
        "48": "Integer sum = 0;\n        Integer product = 1;\n        for (Integer i: numbers) {\n            sum += i;\n            product *= i;\n        }\n        return new Pair<Integer, Integer>(sum, product);",
        "grade-48": {
            "execution": 0
        },
        "42": "// Write your code here\n        return new Pair<Integer, Integer>(0, 1);",
        "grade-42": {
            "execution": 0
        },
        "39": "int prod = 1;\n\t\tint sum = 0;\n\t\tfor (int i = 0; i < numbers.size(); i++) {\n\t\t\tprod *= numbers.get(i);\n\t\t\tsum += numbers.get(i);\n\t\t}\n\t\treturn new Pair<Integer, Integer>(sum, prod);",
        "grade-39": {
            "execution": 0
        },
        "25": "return new Pair<Integer, Integer>(numbers.stream().reduce(0, (x, y) -> x + y), numbers.stream().reduce(1, (x, y) -> x * y));",
        "grade-25": {
            "execution": 0
        },
        "20": "return Pair.with(1, 2);",
        "grade-20": {
            "execution": 0
        },
        "143": "int sum = 0;\n      int product = 1;\n      for (int i = 0; i < numbers.size(); i++) {\n        sum += numbers.get(i);\n        product *= numbers.get(i);\n      }\n      return new Pair<Integer, Integer>(sum, product);",
        "grade-143": {
            "execution": 0
        },
        "105": "throw new UnsupportedOperationException(\"Not implemented\");",
        "grade-105": {
            "execution": 0
        },
        "18": "// USE_SOLUTION_CODE\n        // BEGIN_SOLUTION\n        if (numbers.isEmpty()) {\n            return new Pair<>(0, 1);\n        } else {\n            int sum = 0;\n            int product = 1;\n            for (int i = 0; i < numbers.size(); i++) {\n                sum += numbers.get(i);\n                product *= numbers.get(i);\n            }\n            return new Pair<>(sum, product);\n        }\n        // END_SOLUTION",
        "grade-18": {
            "execution": 0
        },
        "119": "return new Pair<Integer, Integer>(\n            numbers.stream().reduce(0, (x, y) -> x + y),\n            numbers.stream().reduce(1, (x, y) -> x * y)\n        );",
        "grade-119": {
            "execution": 0
        },
        "80": "// YOUR CODE HERE\n        Integer resultSum = 0;\n        Integer resultProduct = 1;\n        for (Integer num : numbers) {\n            resultSum += num;\n            resultProduct *= num;\n        }\n        return new Pair<Integer, Integer>(resultSum, resultProduct);",
        "grade-80": {
            "execution": 0
        },
        "5": "return new Pair<Integer, Integer>(numbers.stream().reduce(0, (a, b) -> a + b),\n                numbers.stream().reduce(1, (a, b) -> a * b));",
        "grade-5": {
            "execution": 0
        },
        "37": "// Your code here\n        int product = 1;\n        int sum = 0;\n        if(numbers.size() == 0){\n            return new Pair<Integer, Integer>(sum, product);\n        }\n        for(int num : numbers){\n            product *= num;\n            sum += num;\n        }\n        return new Pair<Integer, Integer>(sum, product);",
        "grade-37": {
            "execution": 0
        },
        "40": "return new Pair<Integer, Integer>(\n            numbers.stream().reduce(0, (acc, x) -> acc + x),\n            numbers.stream().reduce(1, (acc, x) -> acc * x)\n        );",
        "grade-40": {
            "execution": 0
        },
        "97": "if (numbers.size() == 0) {\n            return new Pair<Integer, Integer>(0, 1);\n        } else {\n            int product = 1;\n            int sum = 0;\n            for (int i : numbers) {\n                product *= i;\n                sum += i;\n            }\n            return new Pair<Integer, Integer>(sum, product);\n        }",
        "grade-97": {
            "execution": 0
        },
        "121": "int sum = 0;\n        int product = 1;\n        for (int a : numbers) {\n            sum += a;\n            product *= a;\n        }\n        return new Pair<Integer, Integer>(sum, product);",
        "grade-121": {
            "execution": 0
        },
        "107": "Integer sum=0;\n        Integer product=1;\n        if(numbers.size() == 0){\n            return new Pair<Integer, Integer>(sum, product);\n        }\n        for(Integer number: numbers){\n            sum += number;\n            product *= number;\n        }\n        return new Pair<Integer, Integer>(sum, product);",
        "grade-107": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    public static int fizzBuzz(int n) {\n",
        "snippet": [
            "        int result = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                char[] digits = String.valueOf(i).toCharArray();\n                for (char c : digits) {\n                    if (c == '7') {\n                        result += 1;\n                    }\n                }\n            }\n        }\n        return result;\n    }\n}"
        ],
        "simplified": "Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.",
        "task_id": "36",
        "188": "if (n <= 0) {\n            return 0;\n        }\n        int count = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String s = String.valueOf(i);\n                for (int j = 0; j < s.length(); j++) {\n                    if (s.charAt(j) == '7') {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;",
        "grade-188": {
            "execution": 1
        },
        "33": "int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (i % 11 == 0) count++;\n            if (i % 13 == 0) count++;\n            if (i % 11 == 0 && i % 13 == 0) count--;\n        }\n        return count;",
        "grade-33": {
            "execution": 0
        },
        "6": "int count = 0;\n        for (int i = 1; i < n; i++) {\n            String num = String.valueOf(i);\n            if (num.contains(\"7\")) {\n                if (i % 11 == 0 || i % 13 == 0) {\n                    count++;\n                }\n            }\n        }\n        return count;",
        "grade-6": {
            "execution": 0
        },
        "77": "int i = 1;\n        int fizzBuzz = 0;\n        while (i < n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                if (i % 10 == 7) {\n                    fizzBuzz += 1;\n                }\n                if (i / 10 == 7) {\n                    fizzBuzz += 1;\n                }\n            }\n            i += 1;\n        }\n        return fizzBuzz;",
        "grade-77": {
            "execution": 0
        },
        "68": "int result = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String s = String.valueOf(i);\n                for (int j = 0; j < s.length(); j++) {\n                    if (s.charAt(j) == '7') {\n                        result++;\n                    }\n                }\n            }\n        }\n        return result;",
        "grade-68": {
            "execution": 1
        },
        "63": "return IntStream.range(0, n).filter(x -> (x % 11 == 0 || x % 13 == 0) && hasSeven(x)).map(x -> 1).sum();",
        "grade-63": {
            "execution": 0
        },
        "40": "int tot = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                tot += i;\n            }\n        }\n        return tot;",
        "grade-40": {
            "execution": 0
        },
        "31": "int c = 0;\n        for (int i = 0; i < n; i++) {\n            int j = i;\n            while (j > 0) {\n                if (j % 10 == 7) {\n                    c++;\n                }\n                j /= 10;\n            }\n        }\n        return c;",
        "grade-31": {
            "execution": 0
        },
        "160": "int fizz = 0;\n        int buzz = 0;\n        int i = 1;\n        for (i = 1; i < n; i++) {\n            if (i % 11 == 0) {\n                fizz++;\n            }\n            if (i % 13 == 0) {\n                buzz++;\n            }\n        }\n        return fizz+buzz;",
        "grade-160": {
            "execution": 0
        },
        "27": "String s = String.valueOf(n);\n        int cnt = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == '7') {\n                cnt++;\n            }\n        }\n        return cnt;",
        "grade-27": {
            "execution": 0
        },
        "174": "int c=0;\n        for(int i=1;i<n;i++) {\n            if(i%11==0||i%13==0) {\n                String d=i+\"\";\n                int j=0;\n                while(j<d.length()) {\n                    if(d.charAt(j)=='7') {\n                        c++;\n                    }\n                    j++;\n                }\n            }\n        }\n        return c;",
        "grade-174": {
            "execution": 1
        },
        "123": "int count = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count += numDigit7(i);\n            }\n        }\n        return count;",
        "grade-123": {
            "execution": 0
        },
        "8": "return 0;",
        "grade-8": {
            "execution": 0
        },
        "7": "int c = 0;\n        for (int i = 11; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String s = String.valueOf(i);\n                for (int j = 0; j < s.length(); j++) {\n                    if (s.charAt(j) == '7') c++;\n                }\n            }\n        }\n        return c;",
        "grade-7": {
            "execution": 1
        },
        "28": "int cnt = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                if (Integer.toString(i).contains(\"7\")) {\n                    cnt++;\n                }\n            }\n        }\n        return cnt;",
        "grade-28": {
            "execution": 0
        },
        "61": "int cnt = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String s = String.valueOf(i);\n                for (int j = 0; j < s.length(); j++) {\n                    if (s.charAt(j) == '7') {\n                        cnt++;\n                    }\n                }\n            }\n        }\n        return cnt;",
        "grade-61": {
            "execution": 1
        },
        "65": "int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                char[] arr = Integer.toString(i).toCharArray();\n                for (char c : arr) {\n                    if (c == '7') {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;",
        "grade-65": {
            "execution": 1
        },
        "150": "int count = 0;\n        // Add your code here\n        return count;",
        "grade-150": {
            "execution": 0
        },
        "177": "int count = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                int j = i;\n                while (j > 0) {\n                    if (j % 10 == 7) {\n                        count++;\n                    }\n                    j /= 10;\n                }\n            }\n        }\n        return count;",
        "grade-177": {
            "execution": 1
        },
        "165": "int count = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String x = i + \"\";\n                for (int j = 0; j < x.length(); j++) {\n                    if (x.charAt(j) == '7') {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;",
        "grade-165": {
            "execution": 1
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String a, String b) {\n",
        "snippet": [
            "        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == b.charAt(i)) {\n                result.append(\"0\");\n            } else {\n                result.append(\"1\");\n            }\n        }\n        return result.toString();\n    }\n}"
        ],
        "simplified": "Input are two strings a and b consisting only of 1s and 0s. Perform binary XOR on these inputs and return result also as a string.",
        "task_id": "11",
        "31": "if (a.length() == 0) return b;\n        if (b.length() == 0) return a;\n        char[] chars = new char[a.length()];\n        for (int i = 0; i < chars.length; i++) {\n            chars[i] = a.charAt(i) == b.charAt(i) ? '0' : '1';\n        }\n        return new String(chars);",
        "grade-31": {
            "execution": 1
        },
        "6": "throw new UnsupportedOperationException(\"Problem solution not yet implemented\");",
        "grade-6": {
            "execution": 0
        },
        "83": "// ...",
        "grade-83": {
            "execution": 0
        },
        "73": "return Integer.toBinaryString(Integer.parseInt(a, 2) ^ Integer.parseInt(b, 2));",
        "grade-73": {
            "execution": 0
        },
        "68": "StringBuilder res = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == b.charAt(i)) {\n                res.append('0');\n            } else {\n                res.append('1');\n            }\n        }\n        return res.toString();",
        "grade-68": {
            "execution": 1
        },
        "42": "// Note: StringBuilder is used to efficiently build strings.\n        StringBuilder output = new StringBuilder();\n        int length = Math.max(a.length(), b.length());\n        // Pad shorter string with zeros.\n        a = String.format(\"%0\" + length + \"d\", Integer.parseInt(a));\n        b = String.format(\"%0\" + length + \"d\", Integer.parseInt(b));\n        for (int i = 0; i < length; i++) {\n            // Perform XOR for current digit.\n            if (a.charAt(i) == b.charAt(i)) {\n                output.append('0');\n            } else {\n                output.append('1');\n            }\n        }\n        return output.toString();",
        "grade-42": {
            "execution": 1
        },
        "29": "// Your code here.\n        return null;",
        "grade-29": {
            "execution": 0
        },
        "175": "if (a.length() != b.length())\n            throw new IllegalArgumentException(\"Inputs must be of equal length.\");\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            char c = a.charAt(i);\n            char d = b.charAt(i);\n            if (c == d)\n                sb.append('0');\n            else\n                sb.append('1');\n        }\n        return sb.toString();",
        "grade-175": {
            "execution": 1
        },
        "24": "StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            char charA = a.charAt(i);\n            char charB = b.charAt(i);\n            boolean boolA = (charA == '1');\n            boolean boolB = (charB == '1');\n            if (boolA ^ boolB) {\n                sb.append('1');\n            } else {\n                sb.append('0');\n            }\n        }\n        return sb.toString();",
        "grade-24": {
            "execution": 1
        },
        "188": "char[] a_chars = a.toCharArray();\n\tchar[] b_chars = b.toCharArray();\n\tint a_length = a_chars.length;\n\tint b_length = b_chars.length;\n\tchar[] result = new char[Math.max(a_length, b_length)];\n\tfor (int i = 0; i < result.length; i++) {\n\t    if (i >= a_length)\n\t\tresult[i] = b_chars[i];\n\t    else if (i >= b_length)\n\t\tresult[i] = a_chars[i];\n\t    else\n\t\tresult[i] = (a_chars[i] == b_chars[i]) ? '0' : '1';\n\t}\n\treturn new String(result);",
        "grade-188": {
            "execution": 1
        },
        "129": "// Note: string a and b will have the same length.\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            sb.append(a.charAt(i) ^ b.charAt(i));\n        }\n        return sb.toString();",
        "grade-129": {
            "execution": 1
        },
        "8": "char[] a_array = a.toCharArray();\n        char[] b_array = b.toCharArray();\n        char[] out = new char[a_array.length];\n        for (int i = 0; i < a_array.length; i++) {\n            if (a_array[i] == b_array[i]) {\n                out[i] = '0';\n            } else {\n                out[i] = '1';\n            }\n        }\n        return new String(out);",
        "grade-8": {
            "execution": 1
        },
        "7": "return \"\";",
        "grade-7": {
            "execution": 0
        },
        "25": "int length = Math.max(a.length(), b.length());\n        int[] A = new int[length];\n        int[] B = new int[length];\n        for (int i = 0; i < length; i++) {\n            if (i < a.length()) {\n                A[i] = Character.getNumericValue(a.charAt(i));\n            }\n            if (i < b.length()) {\n                B[i] = Character.getNumericValue(b.charAt(i));\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < length; i++) {\n            sb.append(A[i] ^ B[i]);\n        }\n        return sb.toString();",
        "grade-25": {
            "execution": 1
        },
        "66": "// >>> string_xor('010', '110')\n        // '100'\n        BigInteger aBin = new BigInteger(a, 2);\n        BigInteger bBin = new BigInteger(b, 2);\n        BigInteger cBin = aBin.xor(bBin);\n        String c = String.format(\"%1$\" + b.length() + \"s\", cBin.toString(2)).replace(' ', '0');\n        return c;",
        "grade-66": {
            "execution": 1
        },
        "70": "StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            int ax = Integer.parseInt(a.substring(i, i + 1));\n            int bx = Integer.parseInt(b.substring(i, i + 1));\n            int c = (ax == bx) ? 0 : 1;\n            sb.append(Integer.toString(c));\n        }\n        return sb.toString();",
        "grade-70": {
            "execution": 1
        },
        "165": "StringBuilder result = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i) ^ b.charAt(i));\n        }\n        return result.toString();",
        "grade-165": {
            "execution": 1
        },
        "194": "byte[] bytea = a.getBytes();\n      byte[] byteb = b.getBytes();\n      byte[] bytec = new byte[bytea.length];\n      for (int i = 0; i < bytea.length; i++) {\n        bytec[i] = (byte) (bytea[i] ^ byteb[i]);\n      }\n      return new String(bytec);",
        "grade-194": {
            "execution": 0
        },
        "180": "if (a.length() != b.length()) {\n            throw new IllegalArgumentException(\"Strings must be of same length\");\n        }\n        char[] chars = new char[a.length()];\n        for (int i = 0; i < chars.length; i++) {\n            chars[i] = (a.charAt(i) == b.charAt(i)) ? '0' : '1';\n        }\n        return String.valueOf(chars);",
        "grade-180": {
            "execution": 1
        },
        "60": "int length = Math.max(a.length(), b.length());\n        StringBuffer buffer = new StringBuffer();\n        for (int i = 0; i < length; i++) {\n            char chara = a.charAt(a.length() - 1 - i);\n            char charb = b.charAt(b.length() - 1 - i);\n            buffer.append(Character.getNumericValue(chara) ^ Character.getNumericValue(charb));\n        }\n        return buffer.reverse().toString();",
        "grade-60": {
            "execution": 1
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n",
        "snippet": [
            "        List<Integer> fact = new ArrayList<>();\n        int i = 2;\n        while (n > 1) {\n            if (n % i == 0) {\n                fact.add(i);\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        return fact;\n    }\n}"
        ],
        "simplified": "Return list of prime factors of given integer in the order from smallest to largest. Each of the factors should be listed number of times corresponding to how many times it appeares in factorization. Input number should be equal to the product of all factors",
        "task_id": "25",
        "198": "ArrayList<Integer> f = new ArrayList<Integer>();\n        for (int i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                f.add(i);\n                n /= i;\n            }\n        }\n        return f;",
        "grade-198": {
            "execution": 1
        },
        "28": "ArrayList<Integer> factors = new ArrayList<Integer>();\n        if (n == 1) {\n            factors.add(1);\n            return factors;\n        }\n        //Assume n is even.\n        while (n % 2 == 0) {\n            factors.add(2);\n            n /= 2;\n        }\n        // n must be odd at this point.  So we can skip one element (Note i = i +2)\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            // While i divides n, print i and divide n\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        // This condition is to handle the case when n is a prime number greater than 2\n        if (n > 2)\n            factors.add(n);\n        return factors;",
        "grade-28": {
            "execution": 1
        },
        "6": "ArrayList<Integer> factors = new ArrayList<Integer>();\n        int n1 = n;\n        while (n1 % 2 == 0) {\n            factors.add(2);\n            n1 /= 2;\n        }\n        int f = 3;\n        while (f * f <= n1) {\n            if (n1 % f == 0) {\n                factors.add(f);\n                n1 /= f;\n            } else {\n                f += 2;\n            }\n        }\n        if (n1 > 1) {\n            factors.add(n1);\n        }\n        return factors;",
        "grade-6": {
            "execution": 1
        },
        "73": "ArrayList<Integer> result = new ArrayList<Integer>();\n        int i = 2;\n        while (n > 1) {\n            if (n % i == 0) {\n                result.add(i);\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        return result;",
        "grade-73": {
            "execution": 1
        },
        "65": "ArrayList<Integer> r = new ArrayList<Integer>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                while (n % i == 0) {\n                    r.add(i);\n                    n /= i;\n                }\n            }\n        }\n        return r;",
        "grade-65": {
            "execution": 0
        },
        "60": "// This solution is soooooo slow, you can do better!\n        ArrayList<Integer> factors = new ArrayList<Integer>();\n        if (n <= 1) {\n            return factors;\n        }\n        int prime = 2;\n        while (prime <= n) {\n            if (n % prime == 0) {\n                factors.add(prime);\n                n /= prime;\n            } else {\n                prime++;\n            }\n        }\n        return factors;",
        "grade-60": {
            "execution": 1
        },
        "36": "ArrayList<Integer> result = new ArrayList<Integer>();\n        // WRITE YOUR CODE HERE\n        return result;",
        "grade-36": {
            "execution": 0
        },
        "26": "ArrayList<Integer> ret = new ArrayList<Integer>();\n        for (int i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                ret.add(i);\n                n /= i;\n            }\n        }\n        return ret;",
        "grade-26": {
            "execution": 1
        },
        "165": "ArrayList<Integer> res = new ArrayList<>();\n        for (int i = 2; i * i <= n; i++) {\n            while (n % i == 0) {\n                res.add(i);\n                n /= i;\n            }\n        }\n        if (n > 1) res.add(n);\n        return res;",
        "grade-165": {
            "execution": 1
        },
        "22": "ArrayList<Integer> factors = new ArrayList<Integer>();\n        while (n % 2 == 0) {\n            factors.add(2);\n            n /= 2;\n        }\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        if (n > 2) {\n            factors.add(n);\n        }\n        return factors;",
        "grade-22": {
            "execution": 1
        },
        "184": "ArrayList<Integer> res = new ArrayList<>();\n        int i = 2;\n        while (n > 1) {\n            while (n % i == 0) {\n                res.add(i);\n                n /= i;\n            }\n            i++;\n        }\n        return res;",
        "grade-184": {
            "execution": 1
        },
        "121": "if (n == 1) {\n            return new ArrayList<Integer>();\n        }\n        int i = 2;\n        ArrayList<Integer> list = new ArrayList<Integer>();\n        while (n > 1) {\n            if (n % i == 0) {\n                list.add(i);\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        return list;",
        "grade-121": {
            "execution": 1
        },
        "8": "ArrayList<Integer> result = new ArrayList<Integer>();\n        int number = n;\n        int divisor = 2;\n        while (number > 1) {\n            while (number % divisor == 0) {\n                result.add(divisor);\n                number /= divisor;\n            }\n            divisor += 1;\n        }\n        return result;",
        "grade-8": {
            "execution": 1
        },
        "7": "ArrayList<Integer> factors = new ArrayList<Integer>();\n        if (n == 1) {\n            factors.add(1);\n            return factors;\n        }\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                factors.add(i);\n                for (int j = 2; j <= n / i; j++) {\n                    factors.add(i);\n                }\n                return factors;\n            }\n        }\n        return factors;",
        "grade-7": {
            "execution": 0
        },
        "23": "assert n > 0;\n        ArrayList<Integer> ans = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                ans.add(i);\n                n /= i;\n            }\n        }\n        return ans;",
        "grade-23": {
            "execution": 1
        },
        "58": "ArrayList<Integer> factors = new ArrayList<Integer>();\n        int x = n;\n        for (int i = 2; i <= x; i++) {\n            while (x % i == 0) {\n                factors.add(i);\n                x /= i;\n            }\n        }\n        return factors;",
        "grade-58": {
            "execution": 1
        },
        "62": "ArrayList<Integer> res = new ArrayList<>();\n        for (int i = 2; i*i <= n; i++) {\n            while (n % i == 0) {\n                res.add(i);\n                n /= i;\n            }\n        }\n        if (n > 1) res.add(n);\n        return res;",
        "grade-62": {
            "execution": 1
        },
        "148": "ArrayList<Integer> ret = new ArrayList<Integer>();\n        for (int p = 2; p <= n; p++) {\n            while (n % p == 0) {\n                ret.add(p);\n                n /= p;\n            }\n        }\n        return ret;",
        "grade-148": {
            "execution": 1
        },
        "188": "ArrayList<Integer> ret = new ArrayList<Integer>();\n        int i = 2;\n        while (n > 1) {\n            if (n % i == 0) {\n                ret.add(i);\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        return ret;",
        "grade-188": {
            "execution": 1
        },
        "172": "ArrayList<Integer> factors = new ArrayList<Integer>();\n        if (n < 2) {\n            return factors;\n        }\n        // Strategy: try to divide by 2, then 3, 5, and so on.\n        while (n > 1) {\n            int f = smallestFactor(n);\n            factors.add(f);\n            n /= f;\n        }\n        return factors;",
        "grade-172": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You're given a list of deposit and withdrawal operations on a bank account that starts with\n    // zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    // at that point function should return True. Otherwise it should return False.\n    // >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n    // True\n    public static boolean belowZero(ArrayList<Integer> operations) {\n",
        "snippet": [
            "        int balance = 0;\n\n        for (int op : operations) {\n            balance += op;\n            if (balance < 0) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}"
        ],
        "simplified": "You're given a list of deposit and withdrawal operations on a bank account that starts with zero balance. Your task is to detect if at any point the balance of account fallls below zero, and at that point function should return True. Otherwise it should return False.",
        "task_id": "3",
        "153": "int x = 0;\n        for (int o : operations) {\n            x += o;\n            if (x < 0) {\n                return true;\n            }\n        }\n        return false;",
        "grade-153": {
            "execution": 1
        },
        "18": "// Iterate over the operations\n        int balance = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            balance += operations.get(i);\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;",
        "grade-18": {
            "execution": 1
        },
        "3": "int currentSum = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            currentSum += operations.get(i);\n            if (currentSum < 0) {\n                return true;\n            }\n        }\n        return false;",
        "grade-3": {
            "execution": 1
        },
        "185": "boolean below = false;\n        int balance = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            balance += operations.get(i);\n            if (balance < 0) {\n                below = true;\n                break;\n            }\n        }\n        return below;",
        "grade-185": {
            "execution": 1
        },
        "52": "int balance = 0;\n        boolean negative = false;\n        for (int i = 0; i < operations.size(); i++) {\n            balance += operations.get(i);\n            if (balance < 0) {\n                negative = true;\n                break;\n            }\n        }\n        return negative;",
        "grade-52": {
            "execution": 1
        },
        "48": "int sum = 0;\n        for (int x : operations) {\n            sum += x;\n            if (sum < 0) {\n                return true;\n            }\n        }\n        return false;",
        "grade-48": {
            "execution": 1
        },
        "41": "for (int i = 0; i < operations.size(); i++) {\n            int account = 0;\n            for (int j = 0; j <= i; j++) {\n                account += operations.get(j);\n            }\n            if (account < 0) {\n                return true;\n            }\n        }\n        return false;",
        "grade-41": {
            "execution": 1
        },
        "25": "return operations.stream().reduce(0, (acc, val) -> acc + val) < 0;",
        "grade-25": {
            "execution": 0
        },
        "16": "int balance = 0;\n        for (int op : operations) {\n            balance += op;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;",
        "grade-16": {
            "execution": 1
        },
        "173": "boolean result = false;\n        int balance = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            balance += operations.get(i);\n            if (balance < 0) {\n                result = true;\n                break;\n            }\n        }\n        return result;",
        "grade-173": {
            "execution": 1
        },
        "126": "// use sum of elements of collection to check whether it's\n        // below zero.\n        // Have a start value of zero\n        // add the integer to the start value and check if it is below zero.\n        // if it is below zero, return true.\n        int sum = 0;\n        for (int i : operations) {\n            sum += i;\n            if (sum < 0) {\n                return true;\n            }\n        }\n        return false;",
        "grade-126": {
            "execution": 1
        },
        "14": "int currentBalance = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            currentBalance += operations.get(i);\n            if (currentBalance < 0) {\n                return true;\n            }\n        }\n        return false;",
        "grade-14": {
            "execution": 1
        },
        "140": "// your code\n        return false;",
        "grade-140": {
            "execution": 0
        },
        "87": "int current_sum = 0;\n        for (int op : operations) {\n            current_sum += op;\n            if (current_sum < 0) {\n                return true;\n            }\n        }\n        return false;",
        "grade-87": {
            "execution": 1
        },
        "4": "return belowZeroHelper(operations, 0);",
        "grade-4": {
            "execution": 0
        },
        "39": "int bal = 0;\n        for (int op : operations) {\n            bal += op;\n            if (bal < 0) {\n                return true;\n            }\n        }\n        return false;",
        "grade-39": {
            "execution": 1
        },
        "44": "int sum = 0;\n        for (int i : operations) {\n            sum += i;\n            if (sum < 0) {\n                return true;\n            }\n        }\n        return false;",
        "grade-44": {
            "execution": 1
        },
        "115": "// inputs: List of integers\n        // outputs: Boolean, true if the balance of the account falls below zero at any point\n        // constraints: none\n\n        // IMPLEMENTATION\n        // Loop through the list of operations\n        // keep track of the balance using a local variable\n        // return false if balance is ever negative\n\n        int balance = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            balance += operations.get(i);\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;",
        "grade-115": {
            "execution": 1
        },
        "149": "int x = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            x += operations.get(i);\n            if (x < 0) {\n                return true;\n            }\n        }\n        return false;",
        "grade-149": {
            "execution": 1
        },
        "129": "int total = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            total += operations.get(i);\n            if (total < 0) {\n                return true;\n            }\n        }\n        return false;",
        "grade-129": {
            "execution": 1
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that returns True if the object q will fly, and False otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279e False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // will_it_fly([3, 2, 3], 1) \u279e False\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9) \u279e True\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // will_it_fly([3], 5) \u279e True\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w) {\n",
        "snippet": [
            "        if (q.stream().reduce(0, Integer::sum) > w) {\n            return false;\n        }\n        int i = 0, j = q.size() - 1;\n        while (i < j) {\n            if (!Objects.equals(q.get(i), q.get(j))) {\n                return false;\n            }\n            i += 1;\n            j -= 1;\n        }\n        return true;\n    }\n}"
        ],
        "simplified": "Write a function that returns True if the object q will fly, and False otherwise. The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.",
        "task_id": "72",
        "174": "return q.stream().mapToInt(Integer::intValue).sum() <= w &&\n            IntStream.range(0, q.size()/2).map(i -> q.get(i) == q.get(q.size() - 1 - i) ? 1 : 0).sum() == q.size()/2;",
        "grade-174": {
            "execution": 1
        },
        "30": "// make sure there are only positive numbers\n        // if (q.stream().anyMatch( x -> x < 0)) {\n        //     return false;\n        // }\n        return q.stream().mapToInt( x -> x).sum() <= w &&\n            IntStream.range(0, q.size() / 2).allMatch( i -> q.get(i) == q.get(q.size() - 1 - i));",
        "grade-30": {
            "execution": 1
        },
        "6": "int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n            sum += q.get(i);\n        }\n        if (sum > w) {\n            return false;\n        }\n        boolean isPalindrome = true;\n        for (int i = 0; i < q.size() / 2; i++) {\n            if (q.get(i) != q.get(q.size() - 1 - i)) {\n                isPalindrome = false;\n            }\n        }\n        return isPalindrome;",
        "grade-6": {
            "execution": 1
        },
        "72": "if (q.size() == 1) return true;\n      int sum = 0;\n      for (int i = 0; i < q.size(); i++) {\n        sum += q.get(i);\n      }\n      if (sum > w) return false;\n      int first = 0;\n      int last = q.size() - 1;\n      while (first < last) {\n        if (q.get(first).intValue() != q.get(last).intValue()) return false;\n        first++;\n        last--;\n      }\n      return true;",
        "grade-72": {
            "execution": 1
        },
        "64": "Integer length = q.size();\n        Integer sum = 0;\n        Integer mid = (length - 1) / 2;\n        Integer i = 0;\n        for (Integer e : q) {\n            sum += e;\n        }\n        if (sum > w) {\n            return false;\n        }\n        if (length % 2 == 0) {\n            while (i < mid) {\n                if (q.get(i) != q.get(length - 1 - i)) {\n                    return false;\n                }\n                i++;\n            }\n        } else {\n            while (i < mid) {\n                if (q.get(i) != q.get(length - 1 - i)) {\n                    return false;\n                }\n                i++;\n            }\n        }\n        return true;",
        "grade-64": {
            "execution": 0
        },
        "59": "return w >= q.stream().reduce(0, Integer::sum) && Problem.isPalindrome(q);",
        "grade-59": {
            "execution": 0
        },
        "37": "return q.stream().reduce(0, (a, b) -> a + b) <= w && isPalindrome(q);",
        "grade-37": {
            "execution": 0
        },
        "27": "return true;",
        "grade-27": {
            "execution": 0
        },
        "184": "ArrayList<Integer> copy = new ArrayList<Integer>(q);\n        Collections.reverse(copy);\n        return q.equals(copy) && q.stream().mapToInt(i -> i).sum() <= w;",
        "grade-184": {
            "execution": 1
        },
        "148": "int weight = 0;\n        for (int i = 0; i < q.size(); i++) {\n            weight += q.get(i);\n        }\n        if (weight > w) {\n            return false;\n        }\n        for (int i = 0; i < q.size() / 2; i++) {\n            if (q.get(i) != q.get(q.size() - 1 - i)) {\n                return false;\n            }\n        }\n        return true;",
        "grade-148": {
            "execution": 1
        },
        "23": "int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n            sum += q.get(i);\n        }\n        if (sum > w) {\n            return false;\n        }\n        if (isPalindrome(q)) {\n            return true;\n        }\n        return false;",
        "grade-23": {
            "execution": 0
        },
        "160": "int sum = 0;\n        ArrayList<Integer> q_reversed = (ArrayList<Integer>) q.clone();\n        Collections.reverse(q_reversed);\n        return q.equals(q_reversed) && q.stream().mapToInt(i -> i).sum() <= w;",
        "grade-160": {
            "execution": 1
        },
        "112": "int s = 0;\n        for (int i = 0; i < q.size(); i++) s += q.get(i);\n        boolean balanced = true;\n        for (int i = 0; i < q.size()/2; i++) {\n            if (q.get(i) != q.get(q.size()-1-i)) {\n                balanced = false;\n                break;\n            }\n        }\n        return balanced && s <= w;",
        "grade-112": {
            "execution": 1
        },
        "8": "int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n            sum += q.get(i);\n        }\n        if (sum > w) {\n            return false;\n        }\n        for (int i = 0; i < q.size() / 2; i++) {\n            if (q.get(i) != q.get(q.size() - 1 - i)) {\n                return false;\n            }\n        }\n        return true;",
        "grade-8": {
            "execution": 1
        },
        "7": "return q.size() == 1 || q.equals(reverse(q)) && sum(q) <= w;",
        "grade-7": {
            "execution": 0
        },
        "24": "return (q.equals(reverse(q)) && sum(q) <= w);",
        "grade-24": {
            "execution": 0
        },
        "57": "// A palindrome is a word that is the same forwards and backwards.\n        // If a list is a palindrome, it can be written the same way forwards and backwards. For example, [4, 7, 1, 2, 1, 7, 4] is a palindrome.\n        // We should compute the sum of the integers in the list. If the sum is less than or equal to the maximum possible weight, then we should return True. Otherwise, we should return False.\n        if (q.isEmpty()) return false;\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n            sum += q.get(i);\n        }\n        if (sum > w) return false;\n        // Reverse the list, and compare it to itself. If it's the same, it's a palindrome. If it's not, it's not a palindrome.\n        // Use Collections.reverse(), which will reverse the list.\n        // Use the Collections.equals() method, which will check if two collections are equal.\n        // If the list is a palindrome, and the sum is less than or equal to the maximum possible weight, then the list is balanced and the sum is less than or equal to the maximum possible weight.\n        // If the list is not a palindrome, and the sum is greater than the maximum possible weight, then the list is unbalanced and the sum is greater than the maximum possible weight.\n        // Otherwise, the list is balanced and the sum is less than or equal to the maximum possible weight.\n        ArrayList<Integer> reversed = new ArrayList<Integer>(q);\n        Collections.reverse(reversed);\n        return reversed.equals(q);",
        "grade-57": {
            "execution": 1
        },
        "61": "boolean result = true;\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n            sum += q.get(i);\n        }\n        for (int i = 0; i < q.size() / 2; i++) {\n            if (q.get(i) != q.get(q.size() - 1 - i)) {\n                result = false;\n            }\n        }\n        if (sum > w) {\n            result = false;\n        }\n        return result;",
        "grade-61": {
            "execution": 1
        },
        "136": "// Check for the palindrome\n        for (int i = 0; i < q.size() / 2; i++) {\n            if (q.get(i) != q.get(q.size() - 1 - i)) {\n                return false;\n            }\n        }\n        // Sum up the numbers\n        Integer sum = 0;\n        for (Integer integer : q) {\n            sum += integer;\n        }\n        // Check if the sum is less than or equal to the weight\n        return sum <= w;",
        "grade-136": {
            "execution": 1
        },
        "163": "int n = q.size();\n        if (n == 1) return true;\n        for (int i = 0; i < n/2; i++)\n            if (q.get(i) != q.get(n-i-1)) return false;\n        return IntStream.range(0,n).map(i -> q.get(i)).sum() <= w;",
        "grade-163": {
            "execution": 1
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Task\n    // Write a function that takes a string as input and returns the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n    // digitSum(\"\") => 0\n    // digitSum(\"abAB\") => 131\n    // digitSum(\"abcCd\") => 67\n    // digitSum(\"helloE\") => 69\n    // digitSum(\"woArBld\") => 131\n    // digitSum(\"aAaaaXa\") => 153\n    public static int digitSum(String s) {\n",
        "snippet": [
            "        int sum = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}"
        ],
        "simplified": "Task Write a function that takes a string as input and returns the sum of the upper characters only' ASCII codes.",
        "task_id": "66",
        "197": "return Arrays.stream(s.split(\"\")).mapToInt(ch -> ch.charAt(0)).sum();",
        "grade-197": {
            "execution": 0
        },
        "28": "// Your code here\n        return 0;",
        "grade-28": {
            "execution": 0
        },
        "6": "int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            sum += Character.isUpperCase(s.charAt(i)) ? s.charAt(i) : 0;\n        }\n        return sum;",
        "grade-6": {
            "execution": 1
        },
        "75": "// Write your code here\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sum += (int) c;\n            }\n        }\n        return sum;",
        "grade-75": {
            "execution": 1
        },
        "66": "int res = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            int a = (int) c;\n            if (a > 64 && a < 91) {\n                res += a;\n            }\n        }\n        return res;",
        "grade-66": {
            "execution": 1
        },
        "60": "return s.codePoints().filter(Character::isUpperCase).sum();",
        "grade-60": {
            "execution": 1
        },
        "35": "return s.chars().map(x -> x <= 90 ? x : 0).sum();",
        "grade-35": {
            "execution": 0
        },
        "26": "int result = 0;\n        for (int i = 0; i < s.length(); i++) {\n            result += (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') ? s.charAt(i) : 0;\n        }\n        return result;",
        "grade-26": {
            "execution": 1
        },
        "162": "return s.chars().map(c -> c > 64 && c < 91 ? c : 0).sum();",
        "grade-162": {
            "execution": 1
        },
        "22": "return 0;",
        "grade-22": {
            "execution": 0
        },
        "176": "// Write your code here\n        return s.chars().filter(i -> (i >= 65 && i <= 90)).sum();",
        "grade-176": {
            "execution": 1
        },
        "120": "int ans = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c)) {\n                ans += (int) c;\n            }\n        }\n        return ans;",
        "grade-120": {
            "execution": 1
        },
        "8": "return (int)IntStream.range(0, s.length())\n                           .mapToObj(s::charAt)\n                           .filter(Character::isUpperCase)\n                           .reduce(0, (a,b) -> a + b);",
        "grade-8": {
            "execution": 0
        },
        "7": "int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i))) {\n                sum += (int) s.charAt(i);\n            }\n        }\n        return sum;",
        "grade-7": {
            "execution": 1
        },
        "23": "var c = s.toCharArray();\n        int r = 0;\n        for (char k : c) {\n            if (Character.isUpperCase(k)) {\n                r += (int) k;\n            }\n        }\n        return r;",
        "grade-23": {
            "execution": 1
        },
        "57": "return s.chars().map(c -> c >= 65 && c <= 90 ? c : 0).sum();",
        "grade-57": {
            "execution": 1
        },
        "63": "return s.chars().map(i -> (i >= 65 && i <= 90) ? i : 0).sum();",
        "grade-63": {
            "execution": 1
        },
        "148": "return (int)s.chars().map(i -> Character.isUpperCase(i) ? i : 0).sum();",
        "grade-148": {
            "execution": 1
        },
        "182": "return s.chars().map(c -> (c >= 65 && c <= 90) ? c : 0).sum();",
        "grade-182": {
            "execution": 1
        },
        "167": "int sum = 0;\n        for (char c : s.toCharArray()) {\n            if (c > 64 && c < 91) {\n                sum += c;\n            }\n        }\n        return sum;",
        "grade-167": {
            "execution": 1
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given an array arr of integers and you need to return\n    // sum of magnitudes of integers multiplied by product of all signs\n    // of each number in the array, represented by 1, -1 or 0.\n    // Note: return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2, -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) == None\n    public static Optional<Integer> prodSigns(ArrayList<Integer> arr) {\n",
        "snippet": [
            "        if (arr.size() == 0) {\n            return Optional.empty();\n        }\n        if (arr.contains(0)) {\n            return Optional.of(0);\n        }\n        int prod = (int) (-2 * (arr.stream().filter(p -> p < 0).count() % 2) + 1);\n        return Optional.of(prod * (arr.stream().map(Math::abs).reduce(Integer::sum)).get());\n    }\n}"
        ],
        "simplified": "You are given an array arr of integers and you need to return sum of magnitudes of integers multiplied by product of all signs of each number in the array, represented by 1, -1 or 0. Note: return None for empty arr.",
        "task_id": "128",
        "176": "// Write your code here\n        return null;",
        "grade-176": {
            "execution": 0
        },
        "28": "Optional<Integer> result = Optional.empty();\n        if (arr.size() == 0) return result;\n        int prod = 1;\n        int mag = 0;\n        for (int x : arr) {\n            mag += Math.abs(x);\n            if (x != 0) {\n                prod *= Math.signum(x);\n            }\n        }\n        result = Optional.of(mag * prod);\n        return result;",
        "grade-28": {
            "execution": 0
        },
        "6": "if (arr.size() == 0) {\n            return Optional.empty();\n        }\n        int prodSigns = 1;\n        int sumMagnitudes = 0;\n        for (int i : arr) {\n            int sign = Math.signum(i);\n            prodSigns *= sign;\n            sumMagnitudes += Math.abs(i);\n        }\n        return Optional.of(sumMagnitudes * prodSigns);",
        "grade-6": {
            "execution": 0
        },
        "72": "if (arr.size() == 0) return Optional.empty();\n        else {\n            int prodSigns = Arrays.stream(arr.toArray())\n                                  .mapToInt(x -> x)\n                                  .sum();\n            return Optional.of(prodSigns);\n        }",
        "grade-72": {
            "execution": 0
        },
        "63": "if (arr.size() == 0) return Optional.empty();\n        int ret = 0;\n        int prod = 1;\n        for (int i : arr) {\n            if (i < 0) prod *= -1;\n            ret += Math.abs(i);\n        }\n        return Optional.of(ret * prod);",
        "grade-63": {
            "execution": 0
        },
        "58": "if (arr.size() == 0) return Optional.empty();\n        return Optional.of(arr.stream().mapToInt(i -> i == 0 ? 0 : Math.abs(i)).sum() * arr.stream().mapToInt(i -> i == 0 ? 1 : i).reduce(1, (a, b) -> a * b));",
        "grade-58": {
            "execution": 0
        },
        "35": "if (arr.size() == 0) {\n            return Optional.empty();\n        }\n        int sum = 0;\n        int prod = 1;\n        for (int i : arr) {\n            sum += Math.abs(i);\n            prod *= Math.signum(i);\n        }\n        return Optional.of(sum * prod);",
        "grade-35": {
            "execution": 0
        },
        "26": "// Start writing your code here\n        int m = 1;\n        int s = 1;\n        int n = 0;\n        if (arr.size() == 0) {\n            return Optional.empty();\n        } else {\n            for (int i : arr) {\n                if (i < 0) {\n                    s *= -1;\n                } else if (i > 0) {\n                    s *= 1;\n                } else {\n                    s *= 0;\n                }\n                m *= Math.abs(i);\n            }\n            n = m * s;\n            return Optional.of(n);\n        }",
        "grade-26": {
            "execution": 0
        },
        "187": "Integer prod = arr.stream().reduce(1, (x, y) -> x * Math.signum(y));\n        Integer sum = arr.stream().reduce(0, (x, y) -> x + Math.abs(y));\n        return Optional.of(prod * sum);",
        "grade-187": {
            "execution": 0
        },
        "147": "int sum = 0;\n        Optional<Integer> result = Optional.empty();\n        if (arr.size() == 0) {\n            return result;\n        }\n        for (int i = 0; i < arr.size(); i++) {\n            sum += Math.abs(arr.get(i));\n        }\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == 0) {\n                sum = 0;\n                break;\n            }\n            if (arr.get(i) < 0) {\n                sum *= -1;\n            }\n        }\n        result = Optional.of(sum);\n        return result;",
        "grade-147": {
            "execution": 0
        },
        "22": "return arr.stream().map(x -> x >= 0 ? x : -x).reduce((a, b) -> a + b).map(x -> x * ((int)arr.stream().filter(y -> y >= 0).count() - (int)arr.stream().filter(y -> y < 0).count()));",
        "grade-22": {
            "execution": 0
        },
        "162": "// Enter your code here\n        return Optional.empty();",
        "grade-162": {
            "execution": 0
        },
        "113": "// Write your code here\n        return Optional.empty();",
        "grade-113": {
            "execution": 0
        },
        "8": "return new ProdSigns().apply(arr);",
        "grade-8": {
            "execution": 0
        },
        "7": "int product = 1;\n        int sum = 0;\n        for (int i : arr) {\n            sum += Math.abs(i);\n            product *= Integer.signum(i);\n        }\n        return sum == 0 ? Optional.empty() : Optional.of(sum * product);",
        "grade-7": {
            "execution": 0
        },
        "23": "if (arr.size() == 0) return Optional.empty();\n        if (arr.size() == 1) return Optional.of(arr.get(0));\n        int prod = 1;\n        int sum = 0;\n        for (int i : arr) {\n            sum += Math.abs(i);\n            if (i == 0) continue;\n            if (i > 0) {\n                prod *= 1;\n            } else {\n                prod *= -1;\n            }\n        }\n        return Optional.of(sum * prod);",
        "grade-23": {
            "execution": 0
        },
        "55": "if (arr.size() == 0) {\n            return Optional.empty();\n        }\n        Integer prod = 1;\n        Integer sum = 0;\n        for (Integer i : arr) {\n            if (i > 0) {\n                prod *= 1;\n            } else if (i < 0) {\n                prod *= -1;\n            } else {\n                prod *= 0;\n            }\n            sum += Math.abs(i);\n        }\n        return Optional.of(sum * prod);",
        "grade-55": {
            "execution": 0
        },
        "60": "// your code here\n        return Optional.empty();",
        "grade-60": {
            "execution": 0
        },
        "135": "// replace the body of this function\n        return Optional.empty();",
        "grade-135": {
            "execution": 0
        },
        "165": "//return null;\n        if (arr.size() == 0) {\n            return Optional.empty();\n        }\n        int prod = 1;\n        int sum = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int value = arr.get(i);\n            if (value > 0) {\n                prod *= 1;\n            } else if (value < 0) {\n                prod *= -1;\n            } else {\n                prod *= 0;\n            }\n            sum += Math.abs(value);\n        }\n        return Optional.of(sum * prod);",
        "grade-165": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3, 5, 7]\n    public static ArrayList<Integer> makeAPile(int n) {\n",
        "snippet": [
            "        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            result.add(n + 2 * i);\n        }\n        return result;\n    }\n}"
        ],
        "simplified": "Given a positive integer n, you have to make a pile of n levels of stones. The first level has n stones. The number of stones in the next level is: - the next odd number if n is odd. - the next even number if n is even. Return the number of stones in each level in a list, where element at index i represents the number of stones in the level (i+1).",
        "task_id": "100",
        "184": "ArrayList<Integer> r = new ArrayList<Integer>();\n        for (int i = 0; i < n; i++) {\n            r.add(n - i);\n        }\n        return r;",
        "grade-184": {
            "execution": 0
        },
        "28": "ArrayList<Integer> result = new ArrayList<Integer>();\n        int firstLevel = n;\n        result.add(firstLevel);\n        while (firstLevel > 1) {\n            if (firstLevel % 2 == 0) {\n                firstLevel -= 1;\n            } else {\n                firstLevel -= 2;\n            }\n            result.add(firstLevel);\n        }\n        return result;",
        "grade-28": {
            "execution": 0
        },
        "6": "// @TODO\n        return null;",
        "grade-6": {
            "execution": 0
        },
        "76": "return new ArrayList<>();",
        "grade-76": {
            "execution": 0
        },
        "67": "ArrayList<Integer> levelOfStones = new ArrayList<Integer>();\n        levelOfStones.add(n);\n        for (int i = 1; i < n; i++) {\n            levelOfStones.add(isEven(n) ? levelOfStones.get(i - 1) + 2 : levelOfStones.get(i - 1) + 1);\n        }\n        return levelOfStones;",
        "grade-67": {
            "execution": 0
        },
        "62": "// Your code here.\n        return null;",
        "grade-62": {
            "execution": 0
        },
        "35": "ArrayList<Integer> pile = new ArrayList<Integer>();\n        while (n > 0) {\n            pile.add(n);\n            if (n % 2 == 0) {\n                n -= 1;\n            } else {\n                n -= 2;\n            }\n        }\n        return pile;",
        "grade-35": {
            "execution": 0
        },
        "26": "ArrayList<Integer> result = new ArrayList<Integer>();\n        result.add(n);\n        int k = 1;\n        while (n > 0) {\n            int next = k % 2 == 0 ? (n + 1) : (n - 1);\n            result.add(next);\n            n = next;\n            k++;\n        }\n        return result;",
        "grade-26": {
            "execution": 0
        },
        "194": "ArrayList<Integer> pile = new ArrayList<Integer>();\n        while (n > 0) {\n            pile.add(n);\n            if (n % 2 == 0) {\n                n = n - 1;\n            } else {\n                n = n - 2;\n            }\n        }\n        return pile;",
        "grade-194": {
            "execution": 0
        },
        "158": "ArrayList<Integer> result = new ArrayList<Integer>();\n        int i = n;\n        while (i > 0) {\n            result.add(i);\n            if (i % 2 == 0) {\n                i -= 1;\n            } else {\n                i -= 2;\n            }\n        }\n        return result;",
        "grade-158": {
            "execution": 0
        },
        "22": "ArrayList<Integer> result = new ArrayList<Integer>();\n        result.add(n);\n        for (int i = 1; i < n; i++) {\n            if (result.get(i - 1) % 2 == 0) {\n                result.add(result.get(i - 1) + 2);\n            } else {\n                result.add(result.get(i - 1) + 1);\n            }\n        }\n        return result;",
        "grade-22": {
            "execution": 0
        },
        "171": "ArrayList<Integer> result = new ArrayList<Integer>();\n        result.add(n);\n        int m = n;\n        while (m > 0) {\n            if (m % 2 == 0) {\n                result.add(m + 2);\n                m -= 2;\n            } else {\n                result.add(m + 1);\n                m -= 1;\n            }\n        }\n        return result;",
        "grade-171": {
            "execution": 0
        },
        "120": "ArrayList<Integer> pile = new ArrayList<Integer>();\n        pile.add(n);\n        for (int i = 1; i < n; i++) {\n            pile.add(n + i * 2);\n        }\n        return pile;",
        "grade-120": {
            "execution": 1
        },
        "8": "ArrayList<Integer> ans = new ArrayList<>();\n        int level = 1;\n        while (n > 0) {\n            ans.add(n);\n            if (level % 2 == 1) {\n                n -= 2;\n            } else {\n                n -= 1;\n            }\n            level++;\n        }\n        return ans;",
        "grade-8": {
            "execution": 0
        },
        "7": "ArrayList<Integer> lst = new ArrayList<Integer>();\n        while (n > 0) {\n            lst.add(n);\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = (n + 1) / 2;\n            }\n        }\n        return lst;",
        "grade-7": {
            "execution": 0
        },
        "23": "ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < n; i++) {\n            result.add(i+n);\n        }\n        return result;",
        "grade-23": {
            "execution": 0
        },
        "58": "ArrayList<Integer> arr = new ArrayList<Integer>();\n        if (n > 0) {\n            arr.add(n);\n            int count = n;\n            while (count > 1) {\n                if (count % 2 == 0) {\n                    count /= 2;\n                    count -= 1;\n                } else {\n                    count /= 2;\n                    count += 1;\n                }\n                arr.add(count);\n            }\n        }\n        return arr;",
        "grade-58": {
            "execution": 0
        },
        "64": "ArrayList<Integer> arr = new ArrayList<Integer>();\n        arr.add(n);\n        int i = n;\n        while (i > 0) {\n            i = (i % 2 == 0) ? i + 1 : i + 2;\n            arr.add(i);\n        }\n        return arr;",
        "grade-64": {
            "execution": 0
        },
        "146": "ArrayList<Integer> result = new ArrayList<Integer>();\n        int k = n;\n        while (k > 0) {\n            result.add(0, k);\n            if (k % 2 == 0) {\n                k = k + 1;\n            } else {\n                k = k + 2;\n            }\n        }\n        return result;",
        "grade-146": {
            "execution": 0
        },
        "175": "int x = n;\n        ArrayList<Integer> list = new ArrayList<Integer>();\n        for (int i = 0; i < n; i++) {\n            list.add(x);\n            if (x % 2 == 0) {\n                x++;\n            } else {\n                x += 2;\n            }\n        }\n        return list;",
        "grade-175": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static String solve(int N) {\n",
        "snippet": [
            "        int sum = 0;\n        for (char c : String.valueOf(N).toCharArray()) {\n            sum += (c - '0');\n        }\n        return Integer.toBinaryString(sum);\n    }\n}"
        ],
        "simplified": "Given a positive integer N, return the total sum of its digits in binary.",
        "task_id": "84",
        "197": "// For N = 147, the sum of digits will be 12 the output should be \"1100\".\n        // 1+0+0+0 = 1+1 = 2\n        String binaryString = Integer.toBinaryString(N);\n        int sumOfBinaryDigits = binaryString.chars().map(c -> c - '0').sum();\n        StringBuilder sb = new StringBuilder();\n        while (sumOfBinaryDigits > 0) {\n            sb.append(sumOfBinaryDigits % 2);\n            sumOfBinaryDigits /= 2;\n        }\n        return sb.reverse().toString();",
        "grade-197": {
            "execution": 0
        },
        "29": "String binary = Integer.toBinaryString(N);\n        // convert string to list\n        List<String> list = new ArrayList<String>(Arrays.asList(binary.split(\"\")));\n        // convert list to stream and sum\n        String sumOfDigits = list.stream().mapToInt(Integer::parseInt).sum() + \"\";\n        return sumOfDigits;",
        "grade-29": {
            "execution": 0
        },
        "6": "// Convert to binary.\n        String binaryString = Integer.toBinaryString(N);\n        // Create sum variable.\n        int sum = 0;\n        // Calculate sum of the digits.\n        for (int i = 0; i < binaryString.length(); i++) {\n            sum += Integer.parseInt(String.valueOf(binaryString.charAt(i)));\n        }\n        // Return sum.\n        return Integer.toString(sum);",
        "grade-6": {
            "execution": 0
        },
        "81": "// Write your code here.\n        int number = N;\n        int binaryNumber = 0;\n        int i = 1;\n        while (number > 0) {\n            int rem = number % 2;\n            number = number / 2;\n            binaryNumber = binaryNumber + rem * i;\n            i = i * 10;\n        }\n        return String.valueOf(binaryNumber);",
        "grade-81": {
            "execution": 0
        },
        "70": "String binary = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0; i < binary.length(); i++) {\n            char c = binary.charAt(i);\n            sum += Character.getNumericValue(c);\n        }\n        return Integer.toString(sum);",
        "grade-70": {
            "execution": 0
        },
        "60": "return Integer.toBinaryString(N).chars().reduce(0, (a, b) -> a + b - '0');",
        "grade-60": {
            "execution": 0
        },
        "37": "return Integer.toBinaryString(N);",
        "grade-37": {
            "execution": 0
        },
        "27": "// Write your code here\n        return \"\";",
        "grade-27": {
            "execution": 0
        },
        "167": "return new BigInteger(Integer.toString(N, 2)).toString();",
        "grade-167": {
            "execution": 0
        },
        "23": "// Convert int N to binary\n        String bin = Integer.toBinaryString(N);\n        // convert bin to a char array\n        char[] charArray = bin.toCharArray();\n        // sum of digits\n        int sum = 0;\n        // loop through the char array, adding each value as it is found\n        for (char value : charArray) {\n            int charToInt = Character.getNumericValue(value);\n            sum += charToInt;\n        }\n        // convert the sum to string\n        String finalAnswer = Integer.toString(sum);\n        return finalAnswer;",
        "grade-23": {
            "execution": 0
        },
        "183": "// write your code here\n        return Integer.toBinaryString(N).chars().map(c -> c - '0').sum() + \"\";",
        "grade-183": {
            "execution": 0
        },
        "126": "String binary = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0; i < binary.length(); i++) {\n            char curr = binary.charAt(i);\n            sum += Integer.parseInt(Character.toString(curr));\n        }\n        return Integer.toString(sum);",
        "grade-126": {
            "execution": 0
        },
        "8": "String res = \"\";\n        // The solution is simply to convert the number to binary,\n        // and add all the resulting digits of the binary number\n        String bin = Integer.toBinaryString(N);\n        for (int i = 0; i < bin.length(); i++) {\n            res += bin.charAt(i);\n        }\n        return res;",
        "grade-8": {
            "execution": 0
        },
        "7": "String result = \"\";\n        while (N > 0) {\n            int remainder = N % 2;\n            result = remainder + result;\n            N = N / 2;\n        }\n        return result;",
        "grade-7": {
            "execution": 0
        },
        "24": "// your code here\n        return Integer.toBinaryString(N);",
        "grade-24": {
            "execution": 0
        },
        "58": "String s = new String();\n        s = Integer.toBinaryString(N);\n        String[] sa = s.split(\"\");\n        int n = sa.length;\n        int S = 0;\n        for (int i = 0; i < n; i++) {\n            S += Integer.parseInt(sa[i]);\n        }\n        s = Integer.toString(S);\n        return s;",
        "grade-58": {
            "execution": 0
        },
        "63": "String answer = \"\";\n        while (N > 0) {\n            answer = Integer.toString(N % 2) + answer;\n            N /= 2;\n        }\n        int sum = 0;\n        for (int i = 0; i < answer.length(); i++) {\n            sum += Integer.parseInt(answer.substring(i, i + 1));\n        }\n        return Integer.toString(sum);",
        "grade-63": {
            "execution": 0
        },
        "157": "String result = \"\";\n        while (N > 0) {\n            result = Integer.toString(N % 2) + result;\n            N /= 2;\n        }\n        return result;",
        "grade-157": {
            "execution": 0
        },
        "186": "String binaryString = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0; i < binaryString.length(); i++) {\n            char c = binaryString.charAt(i);\n            if (c == '1') {\n                sum += 1;\n            }\n        }\n        return Integer.toString(sum);",
        "grade-186": {
            "execution": 0
        },
        "173": "// Solve here\n        // convert N to binary number\n        String binary = \"\";\n        while (N > 0) {\n            int rem = N % 2;\n            binary = rem + binary;\n            N = N / 2;\n        }\n        // convert binary to int\n        int binaryInt = Integer.parseInt(binary);\n        // sum all its digits\n        int sum = 0;\n        while (binaryInt > 0) {\n            sum += binaryInt % 10;\n            binaryInt = binaryInt / 10;\n        }\n        return String.valueOf(sum);",
        "grade-173": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // digits(1)  == 1\n    // digits(4)  == 0\n    // digits(235) == 15\n    public static int digits(int n) {\n",
        "snippet": [
            "        int product = 1, odd_count = 0;\n        for (char digit : String.valueOf(n).toCharArray()) {\n            int int_digit = digit - '0';\n            if (int_digit % 2 == 1) {\n                product *= int_digit;\n                odd_count += 1;\n            }\n        }\n        if (odd_count == 0) {\n            return 0;\n        } else {\n            return product;\n        }\n    }\n}"
        ],
        "simplified": "Given a positive integer n, return the product of the odd digits. Return 0 if all digits are even.",
        "task_id": "131",
        "34": "int[] tab = Integer.toString(n).chars().map(c -> c-'0').toArray();\n      int res = 1;\n      for (int i : tab)\n        if (i % 2 == 1)\n          res *= i;\n      return res;",
        "grade-34": {
            "execution": 0
        },
        "6": "int product = 1;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 == 1) {\n                product *= digit;\n            }\n            n /= 10;\n        }\n        return product;",
        "grade-6": {
            "execution": 0
        },
        "80": "int mul = 1;\n        while (n > 0) {\n            int x = n % 10;\n            if (x % 2 == 1) {\n                mul *= x;\n            }\n            n /= 10;\n        }\n        return mul;",
        "grade-80": {
            "execution": 0
        },
        "71": "return (n == 0) ? 0 : (n % 10) * digits(n / 10);",
        "grade-71": {
            "execution": 0
        },
        "64": "int mult = 1;\n        while (n > 0) {\n            int dig = n % 10;\n            if (dig % 2 == 1) mult *= dig;\n            n /= 10;\n        }\n        return mult;",
        "grade-64": {
            "execution": 0
        },
        "42": "int ans = 1;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 == 1) {\n                ans *= digit;\n            }\n            n /= 10;\n        }\n        return ans;",
        "grade-42": {
            "execution": 0
        },
        "32": "return Stream.of(String.valueOf(n).split(\"\"))\n                .mapToInt(Integer::parseInt)\n                .filter(i -> i % 2 != 0)\n                .reduce(1, (a, b) -> a * b);",
        "grade-32": {
            "execution": 0
        },
        "181": "// Implement a function that given a positive integer n,\n        // returns the product of the odd digits.\n        // The return value should be 0 if all digits are even.\n        // Work out how to do this in constant space.\n        // Your code here\n        if (n == 0) return 0;\n        int rem = n % 10;\n        if (rem % 2 == 0) return digits(n / 10);\n        else return rem * digits(n / 10);",
        "grade-181": {
            "execution": 0
        },
        "27": "int d;\n        int p = 1;\n        while (n > 0) {\n            d = n % 10;\n            if (d % 2 == 1) {\n                p *= d;\n            }\n            n /= 10;\n        }\n        return p;",
        "grade-27": {
            "execution": 0
        },
        "136": "int prod = 1;\n        while (n > 0) {\n            int d = n % 10;\n            if (d % 2 == 1) prod *= d;\n            n /= 10;\n        }\n        return prod;",
        "grade-136": {
            "execution": 0
        },
        "9": "int product = 1;\n        while (n > 0) {\n            int remainder = n % 10;\n            if (remainder % 2 == 1) {\n                product *= remainder;\n            }\n            n /= 10;\n        }\n        return product;",
        "grade-9": {
            "execution": 0
        },
        "7": "// IMPLEMENT THIS\n        int pro = 1;\n        for(int i = 0; i < getNumberOfDigits(n); i++) {\n            int digit = (int)Math.pow(10, i);\n            int getDigit = n/digit;\n            if(getDigit%2 != 0) {\n                pro *= getDigit;\n            }\n        }\n        return pro;",
        "grade-7": {
            "execution": 0
        },
        "29": "// Solution goes here.\n        return 0;",
        "grade-29": {
            "execution": 0
        },
        "62": "return \n            1\n            + 2\n            + 3\n            + 4\n            + 5\n            + 6\n            + 7\n            + 8\n            + 9\n            + 10\n            + 11\n            + 12\n            + 13\n            + 14\n            + 15\n            + 16\n            + 17\n            + 18\n            + 19\n            + 20\n            + 21\n            + 22\n            + 23\n            + 24\n            + 25\n            + 26\n            + 27\n            + 28\n            + 29\n            + 30\n            + 31\n            + 32\n            + 33\n            + 34\n            + 35\n            + 36\n            + 37\n            + 38\n            + 39\n            + 40\n            + 41\n            + 42\n            + 43\n            + 44\n            + 45\n            + 46\n            + 47\n            + 48\n            + 49\n            + 50\n            + 51\n            + 52\n            + 53\n            + 54\n            + 55\n            + 56\n            + 57\n            + 58\n            + 59\n            + 60\n            + 61\n            + 62\n            + 63\n            + 64\n            + 65\n            + 66\n            + 67\n            + 68\n            + 69\n            + 70\n            + 71\n            + 72\n            + 73\n            + 74\n            + 75\n            + 76\n            + 77\n            + 78\n            + 79\n            + 80\n            + 81\n            + 82\n            + 83\n            + 84\n            + 85\n            + 86\n            + 87\n            + 88\n            + 89\n            + 90\n            + 91\n            + 92\n            + 93\n            + 94\n            + 95\n            + 96\n            + 97\n            + 98\n            + 99\n            + 100\n            + 101\n            + 102\n            + 103\n            + 104\n            + 105\n            + 106\n            + 107\n            + 108\n            + 109\n            + 110\n            + 111\n            + 112\n            + 113\n            + 114\n            + 115\n            + 116\n            + 117\n            + 118\n            + 119\n            + 120\n            + 121\n            + 122\n            + 123\n            + 124\n            + 125\n            + 126\n            + 127",
        "grade-62": {
            "execution": 0
        },
        "67": "return new BigInteger(String.valueOf(n)).abs().toString().chars().filter(c -> ((c - '0') & 1) == 1).reduce(1, (a, b) -> a * (b - '0'));",
        "grade-67": {
            "execution": 0
        },
        "167": "int ans = 1;\n        while (n > 0) {\n            int a = n % 10;\n            if (a % 2 == 1) {\n                ans *= a;\n            }\n            n /= 10;\n        }\n        return ans;",
        "grade-167": {
            "execution": 0
        },
        "188": "String str = String.valueOf(n);\n        int len = str.length();\n        int total = 1;\n        for (int i = 0; i < len; i++) {\n            int x = Character.getNumericValue(str.charAt(i));\n            if (x % 2 != 0) {\n                total *= x;\n            }\n        }\n        return total;",
        "grade-188": {
            "execution": 0
        },
        "57": "int prod = 1;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 == 1) prod *= digit;\n            n /= 10;\n        }\n        return prod;",
        "grade-57": {
            "execution": 0
        },
        "134": "// Insert code here",
        "grade-134": {
            "execution": 0
        },
        "63": "return n == 0 ? 0 : \n            n % 2 == 0 ? digits(n / 10) : n % 10 * digits(n / 10);",
        "grade-63": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    // but now you need to eat more carrots to complete the day's meals.\n    // you should return an array of [ total number of eaten carrots after your meals,\n    // the number of carrots left after your meals ]\n    // if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10) -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11, 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n    // the number of carrots that you have eaten.\n    // @need : integer\n    // the number of carrots that you need to eat.\n    // @remaining : integer\n    // the number of remaining carrots thet exist in stock\n    // Constrain:\n    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining <= 1000\n    // Have fun :)\n    public static ArrayList<Integer> eat(int number, int need, int remaining) {\n",
        "snippet": [
            "        if (need <= remaining) {\n            return Arrays.asList(number + need, remaining - need);\n        } else {\n            return Arrays.asList(number + remaining, 0);\n        }\n    }\n}"
        ],
        "simplified": "You're a hungry rabbit, and you already have eaten a certain number of carrots, but now you need to eat more carrots to complete the day's meals. you should return an array of [ total number of eaten carrots after your meals, the number of carrots left after your meals ] if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.",
        "task_id": "159",
        "173": "ArrayList<Integer> result = new ArrayList<Integer>();\n        result.add(0);\n        result.add(0);\n        // your code here\n        return result;",
        "grade-173": {
            "execution": 0
        },
        "28": "return new ArrayList<Integer>(Arrays.asList(new Integer[]{}));",
        "grade-28": {
            "execution": 0
        },
        "6": "return new ArrayList<Integer>(Arrays.asList(0,0));",
        "grade-6": {
            "execution": 0
        },
        "71": "ArrayList<Integer> result = new ArrayList<Integer>();\n        if (need > remaining) {\n            result.add(number + remaining);\n            result.add(0);\n        } else {\n            result.add(number + need);\n            result.add(remaining - need);\n        }\n        return result;",
        "grade-71": {
            "execution": 1
        },
        "63": "// your code is here\n        return new ArrayList<Integer>();",
        "grade-63": {
            "execution": 0
        },
        "58": "if (remaining <= 0) return new ArrayList<Integer>(List.of(number, remaining));\n        if (need < remaining) {\n            return new ArrayList<Integer>(List.of(number + need, remaining - need));\n        } else {\n            return new ArrayList<Integer>(List.of(number + remaining, 0));\n        }",
        "grade-58": {
            "execution": 1
        },
        "35": "// start coding here",
        "grade-35": {
            "execution": 0
        },
        "26": "ArrayList<Integer> returned = new ArrayList<Integer>();\n        returned.add(number + need);\n        returned.add(remaining - need);\n        return returned;",
        "grade-26": {
            "execution": 0
        },
        "186": "int[] arr = new int[2];\n        if(remaining >= need){\n            arr[0] = number + need;\n            arr[1] = remaining - need;\n        }\n        else{\n            arr[0] = number + remaining;\n            arr[1] = 0;\n        }\n        return new ArrayList<Integer>(Arrays.asList(arr[0], arr[1]));",
        "grade-186": {
            "execution": 1
        },
        "146": "ArrayList<Integer> arrayList = new ArrayList<>();\n        int total;\n        int remainingCarrots;\n        if (remaining >= need) {\n            total = number + need;\n            remainingCarrots = remaining - need;\n        } else {\n            total = number + remaining;\n            remainingCarrots = 0;\n        }\n        arrayList.add(total);\n        arrayList.add(remainingCarrots);\n        return arrayList;",
        "grade-146": {
            "execution": 1
        },
        "22": "ArrayList<Integer> li = new ArrayList<Integer>();\n        if (number > 0 && number <= 1000 && need > 0 && need <= 1000 && remaining > 0 && remaining <= 1000) {\n            if (number + need <= remaining) {\n                li.add(number + need);\n                li.add(remaining - (number + need));\n            } else {\n                li.add(remaining);\n                li.add(0);\n            }\n        }\n        return li;",
        "grade-22": {
            "execution": 0
        },
        "160": "ArrayList<Integer> result = new ArrayList<Integer>();\n        if (remaining > need) {\n            result.add(number + need);\n            result.add(remaining - need);\n        } else {\n            result.add(number + remaining);\n            result.add(0);\n        }\n        return result;",
        "grade-160": {
            "execution": 1
        },
        "112": "ArrayList<Integer> result = new ArrayList<Integer>();\n        int total = number + need;\n        if (remaining < need) {\n            result.add(number + remaining);\n            result.add(0);\n        } else {\n            result.add(total);\n            result.add(remaining - need);\n        }\n        return result;",
        "grade-112": {
            "execution": 1
        },
        "8": "// ... your code is here\n        int total = 0;\n        if(remaining <= 0){\n            total = number + remaining;\n            remaining = 0;\n        }\n        else if(remaining < need){\n            total = number + remaining;\n            remaining = 0;\n        }\n        else{\n            total = number + need;\n            remaining = remaining - need;\n        }\n        ArrayList<Integer> list = new ArrayList<Integer>();\n        list.add(total);\n        list.add(remaining);\n        return list;",
        "grade-8": {
            "execution": 1
        },
        "7": "ArrayList<Integer> eaten = new ArrayList<Integer>();\n        if (remaining < need) {\n            eaten.add(number + remaining);\n            eaten.add(0);\n        } else {\n            eaten.add(number + need);\n            eaten.add(remaining - need);\n        }\n        return eaten;",
        "grade-7": {
            "execution": 1
        },
        "23": "return new ArrayList<Integer>(new Pair<Integer, Integer>(number + need > remaining ? number + remaining : number + need,\n                remaining - need < 0 ? 0 : remaining - need));",
        "grade-23": {
            "execution": 0
        },
        "56": "ArrayList<Integer> result = new ArrayList<Integer>();\n        // write your code here\n        int total = number + need;\n        if (total > remaining) {\n            result.add(remaining);\n            result.add(0);\n        } else {\n            result.add(total);\n            result.add(remaining - total);\n        }\n        return result;",
        "grade-56": {
            "execution": 0
        },
        "60": "return new ArrayList<Integer>(Arrays.asList(number+Math.min(need, remaining), remaining-Math.min(need, remaining)));",
        "grade-60": {
            "execution": 1
        },
        "134": "ArrayList<Integer> solution = new ArrayList<Integer>();\n        // your code\n        return solution;",
        "grade-134": {
            "execution": 0
        },
        "163": "return new ArrayList<Integer>(Arrays.asList(number + need > remaining ? number + remaining : number + need,\n                number + need > remaining ? 0 : remaining - need));",
        "grade-163": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns True \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==> True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64) ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public static boolean iscube(int a) {\n",
        "snippet": [
            "        a = Math.abs(a);\n        return Math.round(Math.pow(Math.round(Math.pow(a, 1. / 3)), 3)) == a;\n    }\n}"
        ],
        "simplified": "Write a function that takes an integer a and returns True if this ingeger is a cube of some integer number. Note: you may assume the input is always valid.",
        "task_id": "77",
        "40": "// your code here\n        return ((double)Math.sqrt(a) == Math.floor(Math.sqrt(a)));",
        "grade-40": {
            "execution": 0
        },
        "6": "return (Math.pow(Math.round(Math.cbrt(a)), 3) == a);",
        "grade-6": {
            "execution": 1
        },
        "102": "double x = (double) a;\n        return Math.cbrt(x) % 1 == 0;",
        "grade-102": {
            "execution": 1
        },
        "87": "// insert your solution here\n        return false;",
        "grade-87": {
            "execution": 0
        },
        "79": "// Write your code here.\n        for(int i = 0; i < Math.abs(a); i++) {\n            if(i * i * i == a) {\n                return true;\n            }\n        }\n        return false;",
        "grade-79": {
            "execution": 0
        },
        "50": "// TODO: write your code here\n        return false;",
        "grade-50": {
            "execution": 0
        },
        "36": "return Math.abs(a) == Math.pow(Math.round(Math.cbrt(Math.abs(a))), 3);",
        "grade-36": {
            "execution": 1
        },
        "27": "return Math.sqrt(a) % 1 == 0;",
        "grade-27": {
            "execution": 0
        },
        "154": "// Implementation here.",
        "grade-154": {
            "execution": 0
        },
        "8": "// write your code here\n        return Math.cbrt(a) == Math.round(Math.cbrt(a));",
        "grade-8": {
            "execution": 1
        },
        "7": "return Math.cbrt(a) == Math.floor(Math.cbrt(a));",
        "grade-7": {
            "execution": 1
        },
        "29": "if (a < 0) {\n            a = -a;\n        }\n        for (int i = 0; i < a; i++) {\n            if (i * i * i == a) {\n                return true;\n            }\n        }\n        return false;",
        "grade-29": {
            "execution": 0
        },
        "77": "// Write code here\n\t\treturn false;",
        "grade-77": {
            "execution": 0
        },
        "84": "// This is your job.\n        return Math.sqrt(a)%1 == 0;",
        "grade-84": {
            "execution": 0
        },
        "186": "if (a == 0) return true;\n        else if (a < 0) a = -a;\n        // System.out.println(a);\n        int l = 0, r = 1000000;\n        while (l < r) {\n            int mid = (l + r) / 2;\n            if (mid * mid * mid <= a) l = mid + 1;\n            else r = mid;\n        }\n        return (l * l * l == a);",
        "grade-186": {
            "execution": 0
        },
        "71": "// your code here\n        // calculate the sqrt of a; \n        // if it is an interger\n        // return true;\n        // else return false;\n        double sqrt = Math.sqrt(a);\n        if(sqrt - (int)sqrt == 0) {\n            return true;\n        } else {\n            return false;\n        }",
        "grade-71": {
            "execution": 0
        },
        "153": "// Write your code here\n        if (a==0) return true;\n        else return (Math.pow(Math.round(Math.pow(a, 1.0/3.0)), 3) == a);",
        "grade-153": {
            "execution": 0
        },
        "78": "return false;",
        "grade-78": {
            "execution": 0
        },
        "161": "return a == 0 || a == 1 || a == -1 || (a > 0 && (int)Math.cbrt(a) * (int)Math.cbrt(a) * (int)Math.cbrt(a) == a);",
        "grade-161": {
            "execution": 1
        },
        "103": "double cube = Math.pow(a, 1/3);\n        return (Math.floor(cube) == cube);",
        "grade-103": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Create a function that takes integers, floats, or strings representing\n    // real numbers, and returns the larger variable in its given variable type.\n    // Return None if the values are equal.\n    // Note: If a real number is represented as a string, the floating point might be . or ,\n    // compare_one(1, 2.5) \u279e 2.5\n    // compare_one(1, \"2,3\") \u279e \"2,3\"\n    // compare_one(\"5,1\", \"6\") \u279e \"6\"\n    // compare_one(\"1\", 1) \u279e None\n    public static Union_int_float_String_Optional.empty() compareOne(Union_int_float_String a, Union_int_float_String b) {\n",
        "snippet": [
            "        double temp_a = 0, temp_b = 0;\n        if (a instanceof Integer) {\n            temp_a = (Integer) a * 1.0;\n        } else if (a instanceof Double) {\n            temp_a = (double) a;\n        } else if (a instanceof String) {\n            temp_a = Double.parseDouble(((String) a).replace(',', '.'));\n        }\n        if (b instanceof Integer) {\n            temp_b = (Integer) b * 1.0;\n        } else if (b instanceof Double) {\n            temp_b = (double) b;\n        } else if (b instanceof String) {\n            temp_b = Double.parseDouble(((String) b).replace(',', '.'));\n        }\n        if (temp_a == temp_b) {\n            return Optional.empty();\n        } else if (temp_a > temp_b) {\n            return Optional.of(a);\n        } else {\n            return Optional.of(b);\n        }\n    }\n}"
        ],
        "simplified": "Create a function that takes integers, floats, or strings representing real numbers, and returns the larger variable in its given variable type. Return None if the values are equal. Note: If a real number is represented as a string, the floating point might be . or ,",
        "task_id": "137",
        "197": "// return Union_int_float_String_Optional.of(b);\n        return null;",
        "grade-197": {
            "execution": 0
        },
        "29": "Union_int_float_String_Optional.empty() r = new Union_int_float_String_Optional.empty();\n        Union_float_String x = (Union_float_String)a;\n        Union_float_String y = (Union_float_String)b;\n        if (x.tag == 0 && y.tag == 0) {\n            if (((Float)x.value).floatValue() > ((Float)y.value).floatValue()) {\n                r.setValue(x);\n            } else if (((Float)x.value).floatValue() < ((Float)y.value).floatValue()) {\n                r.setValue(y);\n            }\n        } else if (x.tag == 1 && y.tag == 1) {\n            if (((String)x.value).compareTo((String)y.value) > 0) {\n                r.setValue(x);\n            } else if (((String)x.value).compareTo((String)y.value) < 0) {\n                r.setValue(y);\n            }\n        } else if (x.tag == 0 && y.tag == 1) {\n            if (((Float)x.value).floatValue() > Float.parseFloat((String)y.value)) {\n                r.setValue(x);\n            } else if (((Float)x.value).floatValue() < Float.parseFloat((String)y.value)) {\n                r.setValue(y);\n            }\n        } else if (x.tag == 1 && y.tag == 0) {\n            if (Float.parseFloat((String)x.value) > ((Float)y.value).floatValue()) {\n                r.setValue(x);\n            } else if (Float.parseFloat((String)x.value) < ((Float)y.value).floatValue()) {\n                r.setValue(y);\n            }\n        }\n        return r;",
        "grade-29": {
            "execution": 0
        },
        "6": "// A switch for the type of value of a and b\n        switch(a.types) {\n            case a:\n                switch(b.types) {\n                    case a:\n                        if(a.a() >= b.a()) {\n                            return new Union_int_float_String_Optional.a(a.a());\n                        } else {\n                            return new Union_int_float_String_Optional.a(b.a());\n                        }\n                    case b:\n                        if(a.a() >= b.b()) {\n                            return new Union_int_float_String_Optional.b(a.a());\n                        } else {\n                            return new Union_int_float_String_Optional.b(b.b());\n                        }\n                    case c:\n                        return new Union_int_float_String_Optional.c(b.c());\n                }\n            case b:\n                switch(b.types) {\n                    case a:\n                        if(a.b() >= b.a()) {\n                            return new Union_int_float_String_Optional.b(a.b());\n                        } else {\n                            return new Union_int_float_String_Optional.b(b.a());\n                        }\n                    case b:\n                        if(a.b() >= b.b()) {\n                            return new Union_int_float_String_Optional.b(a.b());\n                        } else {\n                            return new Union_int_float_String_Optional.b(b.b());\n                        }\n                    case c:\n                        return new Union_int_float_String_Optional.c(b.c());\n                }\n            case c:\n                switch(b.types) {\n                    case a:\n                        return new Union_int_float_String_Optional.c(a.c());\n                    case b:\n                        return new Union_int_float_String_Optional.c(a.c());\n                    case c:\n                        if(Float.parseFloat(a.c()) >= Float.parseFloat(b.c())) {\n                            return new Union_int_float_String_Optional.c(a.c());\n                        } else {\n                            return new Union_int_",
        "grade-6": {
            "execution": 0
        },
        "77": "// First check for equal values\n        if (a.equals(b)) {\n            return new Union_int_float_String_Optional.empty();\n        }\n        // If values are equal, return None\n        // If not, return larger value\n        return a.greaterThan(b);",
        "grade-77": {
            "execution": 0
        },
        "66": "throw new Error(\"Method not implemented.\");",
        "grade-66": {
            "execution": 0
        },
        "59": "if (a.compare(b) >= 0) {\n            return new Union_int_float_String_Optional.empty();\n        } else {\n            return b;\n        }",
        "grade-59": {
            "execution": 0
        },
        "36": "// Tuple that holds 2 numbers as a tuple\n        Pair<Union_int_float_String, Union_int_float_String> tup = new Pair<>(a, b);\n        Optional<Union_int_float_String> result = Optional.empty();\n\n        // if the tuple only contains integers, return the max.\n        if (tup.containsAll(int.class)) {\n            int int_a = (int) a.value();\n            int int_b = (int) b.value();\n            if (int_a == int_b) {\n                return Union_int_float_String_Optional.empty();\n            } else {\n                return Union_int_float_String_Optional.WithValue(Math.max(int_a, int_b));\n            }\n        }\n\n        // if the tuple only contains floats, return the max.\n        if (tup.containsAll(float.class)) {\n            float float_a = (float) a.value();\n            float float_b = (float) b.value();\n            if (float_a == float_b) {\n                return Union_int_float_String_Optional.empty();\n            } else {\n                return Union_int_float_String_Optional.WithValue(Math.max(float_a, float_b));\n            }\n        }\n\n        // if the tuple only contains floats, return the max.\n        if (tup.containsAll(String.class)) {\n            float float_a = 0;\n            float float_b = 0;\n            if (containsCommaOrDot((String) a.value())) {\n                float_a = parseString((String) a.value());\n            } else {\n                float_a = Integer.parseInt((String) a.value());\n            }\n            if (containsCommaOrDot((String) b.value())) {\n                float_b = parseString((String) b.value());\n            } else {\n                float_b = Integer.parseInt((String) b.value());\n            }\n            if (float_a == float_b) {\n                return Union_int_float_String_Optional.empty();\n            } else {",
        "grade-36": {
            "execution": 0
        },
        "27": "//if(a == b) return Optional<Union_int_float_String.empty()>;\n        //else if(a instanceof Float && b instanceof Float)\n        //{\n        //  if(a > b) return Optional<Union_int_float_String.f1(a)>;\n        //  else return Optional<Union_int_float_String.f1(b)>;\n        //}\n        //else if(a instanceof Integer && b instanceof Integer)\n        //{\n        //  if(a > b) return Optional<Union_int_float_String.f0(a)>;\n        //  else return Optional<Union_int_float_String.f0(b)>;\n        //}\n        //else if(a instanceof String && b instanceof String)\n        //{\n        //  if(a > b) return Optional<Union_int_float_String.f2(a)>;\n        //  else return Optional<Union_int_float_String.f2(b)>;\n        //}\n        //else if(a instanceof Float && b instanceof Integer)\n        //{\n        //  if(a > b) return Optional<Union_int_float_String.f1(a)>;\n        //  else return Optional<Union_int_float_String.f0(b)>;\n        //}\n        //else if(a instanceof Integer && b instanceof Float)\n        //{\n        //  if(a > b) return Optional<Union_int_float_String.f0(a)>;\n        //  else return Optional<Union_int_float_String.f1(b)>;\n        //}\n        //else if(a instanceof Float && b instanceof String)\n        //{\n        //  if(a > b) return Optional<Union_int_float_String.f1(a)>;\n        //  else return Optional<Union_int_float_String.f2(b)>;\n        //}\n        //else if(a instanceof String && b instanceof Float)\n        //{\n        //  if(a > b) return Optional<Union_int_float",
        "grade-27": {
            "execution": 0
        },
        "165": "if(a.is_int()){\n            int a_i = (int) a.get_int();\n            if(b.is_int()){\n                int b_i = (int) b.get_int();\n                if(a_i == b_i){\n                    return new Union_int_float_String_Optional.empty();\n                }else if(a_i > b_i){\n                    return new Union_int_float_String_Optional.int_t(a_i);\n                }else{\n                    return new Union_int_float_String_Optional.int_t(b_i);\n                }\n            }else if(b.is_float()){\n                float b_f = (float) b.get_float();\n                if(a_i == b_f){\n                    return new Union_int_float_String_Optional.empty();\n                }else if(a_i > b_f){\n                    return new Union_int_float_String_Optional.int_t(a_i);\n                }else{\n                    return new Union_int_float_String_Optional.float_t(b_f);\n                }\n            }else{\n                String b_s = (String) b.get_String();\n                float b_f = Float.parseFloat(b_s);\n                if(a_i == b_f){\n                    return new Union_int_float_String_Optional.empty();\n                }else if(a_i > b_f){\n                    return new Union_int_float_String_Optional.int_t(a_i);\n                }else{\n                    return new Union_int_float_String_Optional.String_t(b_s);\n                }\n            }\n        }else if(a.is_float()){\n            float a_f = (float) a.get_float();\n            if(b.is_int()){\n                int b_i = (int) b.get_int();\n                if(a_f == b_i){\n                    return new Union_int_float_String_Optional.empty();\n                }else if(a_f > b_i){\n                    return new Union_int_float",
        "grade-165": {
            "execution": 0
        },
        "22": "return a.get_int() > b.get_int() ? a : b;",
        "grade-22": {
            "execution": 0
        },
        "183": "//TODO: modify this\n        return Union_int_float_String_Optional.empty();",
        "grade-183": {
            "execution": 0
        },
        "125": "// write code here\n        return new Union_int_float_String_Optional.empty();",
        "grade-125": {
            "execution": 0
        },
        "8": "if(a.get_int() == b.get_int()) {\n            return Union_int_float_String_Optional.empty();\n        } else if(a.get_int() < b.get_int()) {\n            return Union_int_float_String_Optional.of_left(b.get_int());\n        } else {\n            return Union_int_float_String_Optional.of_left(a.get_int());\n        }",
        "grade-8": {
            "execution": 0
        },
        "7": "double first = a.which == 0 ? (double)a.val0 : a.which == 1 ? a.val1 : Double.parseDouble(a.val2.replace(\",\", \".\"));\n        double second = b.which == 0 ? (double)b.val0 : b.which == 1 ? b.val1 : Double.parseDouble(b.val2.replace(\",\", \".\"));\n        if (first == second) return Union_int_float_String_Optional.empty();\n        if (first > second) return Union_int_float_String_Optional.ofA(a);\n        else return Union_int_float_String_Optional.ofA(b);",
        "grade-7": {
            "execution": 0
        },
        "23": "if (a.isint()) {\n            if (b.isint()) {\n                if (a.intValue() == b.intValue()) {\n                    return Optional.empty();\n                } else {\n                    return b;\n                }\n            } else if (b.isfloat()) {\n                if (a.intValue() == b.floatValue()) {\n                    return Optional.empty();\n                } else {\n                    return b;\n                }\n            } else if (b.isString()) {\n                if (a.intValue() == Float.parseFloat(b.StringValue())) {\n                    return Optional.empty();\n                } else {\n                    return b;\n                }\n            }\n        } else if (a.isfloat()) {\n            if (b.isint()) {\n                if (a.floatValue() == b.intValue()) {\n                    return Optional.empty();\n                } else {\n                    return a;\n                }\n            } else if (b.isfloat()) {\n                if (a.floatValue() == b.floatValue()) {\n                    return Optional.empty();\n                } else {\n                    return a;\n                }\n            } else if (b.isString()) {\n                if (a.floatValue() == Float.parseFloat(b.StringValue())) {\n                    return Optional.empty();\n                } else {\n                    return a;\n                }\n            }\n        } else if (a.isString()) {\n            if (b.isint()) {\n                if (Float.parseFloat(a.StringValue()) == b.intValue()) {\n                    return Optional.empty();\n                } else {\n                    return a;\n                }\n            } else if (b.isfloat()) {\n                if (Float.parseFloat(a.StringValue()) == b.floatValue()) {\n                    return Optional.empty();\n                } else {\n                    return a;\n                }\n            } else if (b.isString()) {\n                if (Float.parseFloat(a.StringValue()) == Float.parseFloat(b.StringValue())) {\n                    return Optional.empty();\n                } else {\n                    return a;\n                }\n            }\n        }\n        return Optional.empty();",
        "grade-23": {
            "execution": 0
        },
        "57": "if (\n            a.isint() && b.isint() &&\n            a.getint() > b.getint()\n        ) {\n            return new Union_int_float_String_Optional.ofint(a.getint());\n        } else if (\n            a.isint() && b.isfloat() &&\n            a.getint() > b.getfloat()\n        ) {\n            return new Union_int_float_String_Optional.ofint(a.getint());\n        } else if (\n            a.isint() && b.isString() &&\n            a.getint() > Double.parseDouble(b.getString())\n        ) {\n            return new Union_int_float_String_Optional.ofint(a.getint());\n        } else if (\n            a.isfloat() && b.isint() &&\n            a.getfloat() > b.getint()\n        ) {\n            return new Union_int_float_String_Optional.offloat(a.getfloat());\n        } else if (\n            a.isfloat() && b.isfloat() &&\n            a.getfloat() > b.getfloat()\n        ) {\n            return new Union_int_float_String_Optional.offloat(a.getfloat());\n        } else if (\n            a.isfloat() && b.isString() &&\n            a.getfloat() > Double.parseDouble(b.getString())\n        ) {\n            return new Union_int_float_String_Optional.offloat(a.getfloat());\n        } else if (\n            a.isString() && b.isint() &&\n            Double.parseDouble(a.getString()) > b.getint()\n        ) {\n            return new Union_int_float_String_Optional.ofString(a.getString());\n        } else if (\n            a.isString() && b.isfloat() &&\n            Double.parseDouble(a.getString()) > b.getfloat()\n        ) {\n            return new Union_int_float_String_Optional.ofString(a.getString());\n        } else if (\n            a.isString() && b.isString()",
        "grade-57": {
            "execution": 0
        },
        "61": "Class<?> aa = a.getClass();\n        Class<?> bb = b.getClass();\n        Class<?> un_type = null;\n        if (aa.getName().equals(\"i\")) {\n            un_type = int.class;\n        } else if (aa.getName().equals(\"f\")) {\n            un_type = float.class;\n        } else if (aa.getName().equals(\"S\")) {\n            un_type = String.class;\n        }\n        if (un_type.equals(int.class)) {\n            if (a.value().intValue() > b.value().intValue()) {\n                return Union_int_float_String_Optional.ofA(a.value().intValue());\n            } else if (a.value().intValue() < b.value().intValue()) {\n                return Union_int_float_String_Optional.ofA(b.value().intValue());\n            } else {\n                return Union_int_float_String_Optional.empty();\n            }\n        } else if (un_type.equals(float.class)) {\n            if (a.value().floatValue() > b.value().floatValue()) {\n                return Union_int_float_String_Optional.ofB(a.value().floatValue());\n            } else if (a.value().floatValue() < b.value().floatValue()) {\n                return Union_int_float_String_Optional.ofB(b.value().floatValue());\n            } else {\n                return Union_int_float_String_Optional.empty();\n            }\n        } else if (un_type.equals(String.class)) {\n            if (Float.parseFloat(a.value().toString()) > Float.parseFloat(b.value().toString())) {\n                return Union_int_float_String_Optional.ofC(a.value().toString());\n            } else if (Float.parseFloat(a.value().toString()) < Float.parseFloat(b.value().toString())) {\n                return Union_int_float_String_Optional.ofC(b.value().toString());\n            } else {\n                return Union",
        "grade-61": {
            "execution": 0
        },
        "152": "Union_int_float_String_Optional.empty();\n        return null;",
        "grade-152": {
            "execution": 0
        },
        "187": "// Comparing both values as floats and returning the larger value\n        return Math.max(Float.parseFloat(a.toString()), Float.parseFloat(b.toString())) == Float.parseFloat(a.toString()) ? a : b;",
        "grade-187": {
            "execution": 0
        },
        "169": "float aAsFloat = Union_int_float_String.getFloat(a);\n        float bAsFloat = Union_int_float_String.getFloat(b);\n        if (aAsFloat > bAsFloat) {\n            return Union_int_float_String.union_int_float_String_optional_empty(a);\n        } else if (aAsFloat < bAsFloat) {\n            return Union_int_float_String.union_int_float_String_optional_empty(b);\n        } else {\n            return Union_int_float_String.union_int_float_String_optional_empty();\n        }",
        "grade-169": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1, 2, 10) == -1\n    public static float triangleArea(int a, int b, int c) {\n",
        "snippet": [
            "        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n        }\n        double s = (a + b + c) / 2;\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        area = (double) Math.round(area * 100) / 100;\n        return area;\n    }\n}"
        ],
        "simplified": "Given the lengths of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise return -1 Three sides make a valid triangle when the sum of any two sides is greater than the third side.",
        "task_id": "71",
        "177": "float t_area;\n        float s = (a + b + c) / 2.0f;\n        float area = (float) Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        t_area = (float) Math.round(area * 100) / 100;\n        return (t_area > 0) ? t_area : -1;",
        "grade-177": {
            "execution": 1
        },
        "28": "float s = (a + b + c) / 2.0f;\n        float result = (float) Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return Float.isNaN(result) ? -1 : result;",
        "grade-28": {
            "execution": 0
        },
        "6": "if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n        }\n        double s = (a + b + c) / 2.0;\n        return (float) Math.sqrt(s * (s - a) * (s - b) * (s - c));",
        "grade-6": {
            "execution": 0
        },
        "70": "double s = (a + b + c) / 2.0;\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        if (area == 0) {\n            return -1;\n        }\n        return (float) area;",
        "grade-70": {
            "execution": 0
        },
        "62": "// Write your code here\n        int sum = a + b + c;\n        if(sum - a <= a || sum - b <= b || sum - c <= c) {\n            return -1;\n        } else {\n            float s = (float) (sum) / 2;\n            float area = (float) (Math.sqrt(s * (s - a) * (s - b) * (s - c)));\n            return Math.round(area * 100) / 100.0f;\n        }",
        "grade-62": {
            "execution": 1
        },
        "57": "float semiPerimeter = (a + b + c) / 2.0f;\n        float triangleArea = (float) Math.sqrt(semiPerimeter * (semiPerimeter - a) * (semiPerimeter - b) * (semiPerimeter - c));\n        return (triangleArea > 0) ? Float.parseFloat(String.format(\"%.2f\", triangleArea)) : -1;",
        "grade-57": {
            "execution": 1
        },
        "35": "// Determine the maximum length\n        int max = Math.max(a, Math.max(b, c));\n        // Find the other two sides\n        int small1 = a, small2 = b;\n        if (small1 == max) {\n            small1 = b;\n            small2 = c;\n        } else if (small2 == max) {\n            small2 = c;\n        }\n        // Verify that the two smaller sides add up to greater than the largest side\n        if (small1 + small2 > max) {\n            // We have a valid triangle, so calculate the area\n            double p = (a + b + c) / 2.0;\n            double s = Math.sqrt(p * (p - a) * (p - b) * (p - c));\n            return (float)s;\n        }\n        return -1;",
        "grade-35": {
            "execution": 0
        },
        "26": "//Write your code here\n        if (a + b > c && a + c > b && b + c > a) {\n            return (float)Math.sqrt((a + b + c) * (a + b - c) * (a - b + c) * (-a + b + c)) / 4;\n        }\n        return -1;",
        "grade-26": {
            "execution": 0
        },
        "189": "float area = -1;\n        if (a+b > c && a+c > b && b+c > a) {\n            float s = (a+b+c)/2.0f;\n            area = (float)Math.sqrt(s*(s-a)*(s-b)*(s-c));\n        }\n        return area;",
        "grade-189": {
            "execution": 0
        },
        "150": "float s = (a + b + c) / 2.0f;\n        float area = (float)Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return area < 0 ? -1 : Math.round(area * 100) / 100.0f;",
        "grade-150": {
            "execution": 0
        },
        "22": "float area = -1.0f;\n        if (a+b>c && a+c>b && b+c>a) {\n            float p = (a+b+c)/2.0f;\n            area = (float)Math.sqrt(p*(p-a)*(p-b)*(p-c));\n        }\n        return area;",
        "grade-22": {
            "execution": 0
        },
        "164": "if ((a + b) > c && (a + c) > b && (b + c) > a) {\n            float s = (a + b + c) / 2.0f;\n            return (float)Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        }\n        return -1;",
        "grade-164": {
            "execution": 0
        },
        "112": "// TODO: Implement this function.\n        return -1;",
        "grade-112": {
            "execution": 0
        },
        "8": "// TODO\n        throw new UnsupportedOperationException(\"Method triangleArea is not implemented\");",
        "grade-8": {
            "execution": 0
        },
        "7": "if(a+b<=c||a+c<=b||b+c<=a) return -1;\n        return (float)Math.sqrt((a+b+c)*(a+b-c)*(a-b+c)*(-a+b+c))/4;",
        "grade-7": {
            "execution": 0
        },
        "23": "if (a + b > c && a + c > b && b + c > a) {\n            float s = (a + b + c) / 2.0f;\n            float area = (float) Math.sqrt(s * (s - a) * (s - b) * (s - c));\n            return area;\n        }\n        return -1;",
        "grade-23": {
            "execution": 0
        },
        "55": "float result = -1;\n      // check that the input makes a valid triangle\n      if(Math.abs(a) + Math.abs(b) > Math.abs(c) && Math.abs(a) + Math.abs(c) > Math.abs(b) && Math.abs(b) + Math.abs(c) > Math.abs(a)){\n        // if yes, calculate the area\n        float s = (a + b + c) / 2.0f;\n        // returns -1 if the area cannot be computed because we have a NaN\n        result = (float) Math.sqrt(s * (s - a) * (s - b) * (s - c));\n      }\n      return result;",
        "grade-55": {
            "execution": 0
        },
        "59": "float x = Heron(a, b, c);\n        if (x == -1) {\n            return -1;\n        }\n        return x;",
        "grade-59": {
            "execution": 0
        },
        "138": "float A = (float) a;\n        float B = (float) b;\n        float C = (float) c;\n        float s = (A + B + C) / 2;\n        if (A + B <= C || A + C <= B || B + C <= A) {\n            return -1;\n        }\n        else {\n            return (float) Math.sqrt(s * (s - A) * (s - B) * (s - C));\n        }",
        "grade-138": {
            "execution": 0
        },
        "167": "if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n        }\n        double s = (a + b + c) / 2.0;\n        return (float)Math.sqrt(s * (s - a) * (s - b) * (s - c));",
        "grade-167": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given an array arr of integers and a positive integer k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output: [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will be in the range of [1, 1000].\n    // 2. The elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n",
        "snippet": [
            "        if (k == 0) {\n            return List.of();\n        }\n        List<Integer> arr_sort = new ArrayList<>(arr);\n        Collections.sort(arr_sort);\n        return arr_sort.subList(arr_sort.size() - k, arr_sort.size());\n    }\n}"
        ],
        "simplified": "Given an array arr of integers and a positive integer k, return a sorted list of length k with the maximum k numbers in arr. Note: 1. The length of the array will be in the range of [1, 1000]. 2. The elements in the array will be in the range of [-1000, 1000]. 3. 0 <= k <= len(arr)",
        "task_id": "120",
        "165": "// With an arraylist, add the first k elements.\n        // Sort the arraylist.\n        // for each element in the array, compare it to the last element of the\n        // arraylist, and replace it if the element is greater.\n        // The arraylist is now sorted, so the last k elements are the greatest\n        // k elements in the array.\n        ArrayList<Integer> result = new ArrayList<>();\n        if (arr.size() == 0) {\n            return result;\n        }\n        for (int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n        }\n        Collections.sort(result);\n        for (int i = k; i < arr.size(); i++) {\n            int end = result.size() - 1;\n            if (arr.get(i) > result.get(end)) {\n                result.remove(end);\n                result.add(arr.get(i));\n                Collections.sort(result);\n            }\n        }\n        return result;",
        "grade-165": {
            "execution": 0
        },
        "28": "// The idea is to use a k-size heap to store the biggest k elements.\n        // However, it is not straight-forward to use a max-heap to store the\n        // smallest k elements.\n        // Thus, we can use a min-heap to store the biggest k elements in the\n        // following way:\n        // Pop the min element.\n        // Then, push the maximum element of the remaining elements.\n        Comparator<Integer> comparator = (Integer x, Integer y) -> Integer.compare(x, y);\n        PriorityQueue<Integer> queue = new PriorityQueue<>(k, comparator);\n        int end = arr.size();\n        int start = 0;\n        while (start < end) {\n            int max = arr.get(start);\n            for (int i = start + 1; i < end; i++) {\n                int current = arr.get(i);\n                if (current > max) {\n                    max = current;\n                }\n            }\n            if (queue.size() < k) {\n                queue.add(max);\n            } else {\n                if (queue.peek() < max) {\n                    queue.poll();\n                    queue.add(max);\n                }\n            }\n            start++;\n        }\n        ArrayList<Integer> result = new ArrayList<>(k);\n        while (!queue.isEmpty()) {\n            result.add(queue.poll());\n        }\n        return result;",
        "grade-28": {
            "execution": 0
        },
        "6": "PriorityQueue<Integer> pq = new PriorityQueue<>(k, Collections.reverseOrder());\n        for (int i = 0; i < arr.size(); i++) {\n            if (pq.size() == k) {\n                if (arr.get(i) > pq.peek()) {\n                    pq.poll();\n                    pq.add(arr.get(i));\n                }\n            } else {\n                pq.add(arr.get(i));\n            }\n        }\n        ArrayList<Integer> l = new ArrayList<>();\n        while (pq.size() > 0) {\n            l.add(pq.poll());\n        }\n        return l;",
        "grade-6": {
            "execution": 0
        },
        "192": "TreeMap<Integer, Integer> map = new TreeMap<>();\n        for (int i = 0; i < arr.size(); i++) {\n            map.put(arr.get(i), i);\n        }\n        Integer[] arr2 = new Integer[k];\n        int i = 0;\n        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {\n            if (i == k) {\n                break;\n            }\n            arr2[i] = entry.getKey();\n            i++;\n        }\n        ArrayList<Integer> arr3 = new ArrayList<>(Arrays.asList(arr2));\n        Collections.reverse(arr3);\n        return arr3;",
        "grade-192": {
            "execution": 0
        },
        "70": "if (arr.size() == 0) {\n            return new ArrayList<Integer>();\n        }\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        MinHeap minHeap = new MinHeap(k);\n        for (int i = 0; i < arr.size(); i++) {\n            if (minHeap.size < k) {\n                minHeap.insert(arr.get(i));\n            } else {\n                if (arr.get(i) > minHeap.peek()) {\n                    minHeap.delete();\n                    minHeap.insert(arr.get(i));\n                }\n            }\n        }\n        return minHeap.elements;",
        "grade-70": {
            "execution": 0
        },
        "62": "return null;",
        "grade-62": {
            "execution": 0
        },
        "57": "// We can use a max heap to solve this problem. In a max heap, the minimum element\n        // is at the root of the heap.\n        // We will add all of the elements to the heap and then poll the root k times to\n        // get the maximum k elements.\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>(arr.size(), Collections.reverseOrder());\n        heap.addAll(arr);\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < k; i++) {\n            result.add(heap.poll());\n        }\n        return result;",
        "grade-57": {
            "execution": 0
        },
        "35": "ArrayList<Integer> list = new ArrayList<Integer>();\n        int max_i = 0;\n        for (int i = 0; i < k; i++) {\n            for (int j = 0; j < arr.size(); j++) {\n                if (arr.get(j) > arr.get(max_i))\n                    max_i = j;\n            }\n            list.add(arr.get(max_i));\n            arr.remove(max_i);\n        }\n        return list;",
        "grade-35": {
            "execution": 0
        },
        "191": "ArrayList<Integer> res = new ArrayList<Integer>();\n        int i, j;\n        for (i = 0; i < k; i++) {\n            int idx = i;\n            for (j = i + 1; j < arr.size(); j++) {\n                if (arr.get(j) > arr.get(idx)) {\n                    idx = j;\n                }\n            }\n            int tmp = arr.get(i);\n            arr.set(i, arr.get(idx));\n            arr.set(idx, tmp);\n            res.add(arr.get(i));\n        }\n        return res;",
        "grade-191": {
            "execution": 0
        },
        "26": "// Edge cases\n        if (arr == null || arr.size() == 0) return new ArrayList<Integer>();\n        if (k == 0) return new ArrayList<Integer>();\n        // Using a double ended queue\n        ArrayDeque<Integer> deque = new ArrayDeque<Integer>();\n        for (int i : arr) {\n            // Inserting the first element\n            if (deque.size() == 0) {\n                deque.addLast(i);\n            } else {\n                // If the number is less than the first element do nothing.\n                if (i < deque.getFirst()) {\n                    // do nothing\n                } else {\n                    // If the number is greater than the first element remove all the \n                    // numbers until the number is less than the current element or the\n                    // queue is empty.\n                    while (deque.size() > 0 && i > deque.getLast()) {\n                        deque.removeLast();\n                    }\n                    // Remove the first element if the size is equal to k.\n                    if (deque.size() == k) {\n                        deque.removeFirst();\n                    }\n                    // If the queue is still not empty then add the current element to the\n                    // queue.\n                    if (deque.size() < k) {\n                        deque.addLast(i);\n                    }\n                }\n            }\n        }\n        // Return the queue converted to an array list.\n        return new ArrayList<Integer>(deque);",
        "grade-26": {
            "execution": 0
        },
        "176": "// Return a sorted list of length k with the maximum k numbers in arr.\n        // There will be k maximum numbers in arr, not necessarily distinct.\n        // Therefore, the maximum k numbers in arr will be the k last numbers in the sorted array.\n        // Method:\n        // Sort the array in descending order.\n        // Return the sublist arr.subList(arr.size() - k, arr.size()).\n        // Time complexity is O(n log n) due to sorting.\n        // Space complexity is O(n) due to the array size.\n        Collections.sort(arr, Collections.reverseOrder());\n        return new ArrayList<Integer>(arr.subList(arr.size() - k, arr.size()));",
        "grade-176": {
            "execution": 0
        },
        "140": "assert k > 0 && k <= arr.size();\n        ArrayList<Integer> result = new ArrayList<>();\n        // Build a max heap. Note that the Java API is a min heap.\n        PriorityQueue<Integer> queue = new PriorityQueue<>(arr.size(),\n            new Comparator<Integer>() {\n                @Override\n                public int compare(Integer x, Integer y) {\n                    return y - x;\n                }\n            });\n        for (int i = 0; i < arr.size(); i++) {\n            if (i < k) {\n                queue.add(arr.get(i));\n            } else {\n                if (arr.get(i) > queue.peek()) {\n                    queue.remove();\n                    queue.add(arr.get(i));\n                }\n            }\n        }\n        while (!queue.isEmpty()) {\n            result.add(queue.remove());\n        }\n        return result;",
        "grade-140": {
            "execution": 0
        },
        "22": "assert (arr.size() >= k);\n        // Hash-based algorithm. Use a priority queue to store the top K elements.\n        // Use a hash to store whether an element is in the priority queue or not.\n        // O(n log k) time and O(k) space.\n        // Since every element is retrieved (and polled) at most once,\n        // the time complexity is O(n log k).\n        PriorityQueue<Integer> q = new PriorityQueue<>(k);\n        HashSet<Integer> set = new HashSet<>();\n        for (int i = 0; i < arr.size(); i++) {\n            int e = arr.get(i);\n            if (set.contains(e)) continue;\n            set.add(e);\n            if (q.size() < k) {\n                q.add(e);\n            } else {\n                if (e > q.peek()) {\n                    q.poll();\n                    q.add(e);\n                }\n            }\n        }\n        ArrayList<Integer> result = new ArrayList<>();\n        while (!q.isEmpty()) {\n            result.add(q.poll());\n        }\n        return result;",
        "grade-22": {
            "execution": 0
        },
        "152": "ArrayList<Integer> res = new ArrayList<Integer>();\n        if (arr.size() == 0) {\n            return res;\n        }\n        if (arr.size() == 1) {\n            res.add(arr.get(0));\n            return res;\n        }\n        if (arr.size() == k) {\n            return arr;\n        }\n        PriorityQueue<Integer> pq = new PriorityQueue<Integer>(k, new Comparator<Integer>() {\n            public int compare(Integer a, Integer b) {\n                return -Integer.compare(a, b);\n            }\n        });\n        for (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n        }\n        for (int i = 0; i < k; i++) {\n            res.add(pq.poll());\n        }\n        return res;",
        "grade-152": {
            "execution": 0
        },
        "108": "PriorityQueue<Integer> pq = new PriorityQueue<>(k, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer a, Integer b) {\n                return b - a;\n            }\n        });\n        for (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n        }\n        ArrayList<Integer> res = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            res.add(pq.poll());\n        }\n        return res;",
        "grade-108": {
            "execution": 0
        },
        "8": "PriorityQueue<Integer> pq = new PriorityQueue<Integer>(k + 1, new Comparator<Integer>() {\n            public int compare(Integer i1, Integer i2) {\n                return i2 - i1;\n            }\n        });\n        for (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n            if (pq.size() > k) {\n                pq.poll();\n            }\n        }\n        return new ArrayList<Integer>(pq);",
        "grade-8": {
            "execution": 0
        },
        "7": "// build a max heap\n        PriorityQueue<Integer> pq = new PriorityQueue<Integer>(k, Collections.reverseOrder());\n        for (int e : arr) {\n            pq.add(e);\n        }\n        ArrayList<Integer> list = new ArrayList<Integer>();\n        while (k-- > 0) {\n            list.add(pq.poll());\n        }\n        return list;",
        "grade-7": {
            "execution": 0
        },
        "23": "int N = arr.size();\n        // Step 1: Extract all possible elements from the array\n        ArrayList<Integer> map = new ArrayList<Integer>();\n        for (int i = 0; i < N; i++) {\n            for (int j = i; j < N; j++) {\n                for (int l = i; l <= j; l++) {\n                    map.add(arr.get(l));\n                }\n            }\n        }\n        Collections.sort(map);\n        return new ArrayList<Integer>(map.subList(0, k));",
        "grade-23": {
            "execution": 0
        },
        "55": "// Find k elements of the maximum value\n        // If a duplicate value exists, the following value must be unique.\n        // This is the opposite of sorting by value.\n        // All values in the array must be unique.\n        // Time Complexity: O(k * log(k))\n        ArrayList<Integer> new_arr = new ArrayList<Integer>();\n        if (arr.size() < k) {\n            return new_arr;\n        }\n        // Max heap\n        PriorityQueue<Integer> pq = new PriorityQueue<Integer>(new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                if (o1 > o2) {\n                    return -1;\n                } else if (o1 < o2) {\n                    return 1;\n                } else {\n                    return 0;\n                }\n            }\n        });\n        for (int i = 0; i < arr.size(); i++) {\n            if (pq.size() < k) {\n                pq.add(arr.get(i));\n            } else {\n                int top = pq.peek();\n                if (top < arr.get(i)) {\n                    pq.poll();\n                    pq.add(arr.get(i));\n                }\n            }\n        }\n        while (!pq.isEmpty()) {\n            new_arr.add(pq.poll());\n        }\n        return new_arr;",
        "grade-55": {
            "execution": 0
        },
        "59": "ArrayList<Integer> q = new ArrayList<>();\n        int i = 0;\n        for (; i < k; i++) {\n            q.add(arr.get(i));\n        }\n        for (; i < arr.size(); i++) {\n            int j = 0;\n            for (; j < k; j++) {\n                if (arr.get(i) > q.get(j)) {\n                    break;\n                }\n            }\n            if (j < k) {\n                q.remove(k - 1);\n                q.add(j, arr.get(i));\n            }\n        }\n        return q;",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\")\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    // >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String brackets) {\n",
        "snippet": [
            "        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '<') {\n                depth += 1;\n            } else {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}"
        ],
        "simplified": "brackets is a string of \"<\" and \">\". return True if every opening bracket has a corresponding closing bracket.",
        "task_id": "56",
        "34": "int balance = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '<') {\n                balance++;\n            } else {\n                balance--;\n            }\n            if (balance < 0) {\n                return false;\n            }\n        }\n        return balance == 0;",
        "grade-34": {
            "execution": 1
        },
        "6": "int n = brackets.length();\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (brackets.charAt(i) == '<') {\n                count += 1;\n            } else {\n                count -= 1;\n            }\n            if (count < 0) {\n                return false;\n            }\n        }\n        return count == 0;",
        "grade-6": {
            "execution": 1
        },
        "95": "int counter = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '<') {\n                counter++;\n            } else {\n                counter--;\n            }\n            if (counter < 0) {\n                return false;\n            }\n        }\n        return counter == 0;",
        "grade-95": {
            "execution": 1
        },
        "81": "int cnt = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '<') cnt++;\n            else cnt--;\n            if (cnt < 0) return false;\n        }\n        return cnt == 0;",
        "grade-81": {
            "execution": 1
        },
        "73": "int a = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '<') {\n                a++;\n            } else {\n                a--;\n            }\n            if (a < 0) {\n                return false;\n            }\n        }\n        return a == 0;",
        "grade-73": {
            "execution": 1
        },
        "43": "//return brackets.length() == 0 || (brackets.charAt(0) == '<' && correctBracketing(brackets.substring(1)));\n        //System.out.println(brackets);\n        if (brackets.length() == 0) {\n            return true;\n        }\n        else if (brackets.charAt(0) == '<') {\n            return correctBracketing(brackets.substring(1));\n        }\n        else if (brackets.charAt(0) == '>') {\n            return false;\n        }\n        else {\n            throw new RuntimeException(\"something went wrong\");\n        }",
        "grade-43": {
            "execution": 0
        },
        "32": "Stack<Character> s = new Stack<Character>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                s.push(c);\n            } else {\n                if (s.isEmpty()) {\n                    return false;\n                }\n                s.pop();\n            }\n        }\n        return s.isEmpty();",
        "grade-32": {
            "execution": 1
        },
        "26": "boolean result = true;\n        LinkedList<String> stack = new LinkedList<String>();\n        for (String bracket : brackets.split(\"\")) {\n            if (bracket.equals(\"<\")) {\n                stack.push(bracket);\n            } else if (bracket.equals(\">\")) {\n                if (stack.isEmpty()) {\n                    result = false;\n                    break;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        if (!stack.isEmpty()) {\n            result = false;\n        }\n        return result;",
        "grade-26": {
            "execution": 1
        },
        "152": "int count = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            char ch = brackets.charAt(i);\n            if (ch == '<') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                return false;\n            }\n        }\n        return count == 0;",
        "grade-152": {
            "execution": 1
        },
        "8": "throw new UnsupportedOperationException(\"Problem 0\");",
        "grade-8": {
            "execution": 0
        },
        "7": "int n = brackets.length();\n        int open = 0;\n        for (int i = 0; i < n; i++) {\n            if (brackets.charAt(i) == '<') {\n                open++;\n            } else {\n                open--;\n            }\n            if (open < 0) {\n                return false;\n            }\n        }\n        return open == 0;",
        "grade-7": {
            "execution": 1
        },
        "29": "int count = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n            if (c == '<') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                return false;\n            }\n        }\n        return count == 0;",
        "grade-29": {
            "execution": 1
        },
        "71": "List<String> list = Arrays.asList(brackets.split(\"\"));\n        int count = 0;\n        for (String bracket : list) {\n            if (bracket.equals(\"<\")) {\n                count += 1;\n            } else if (bracket.equals(\">\")) {\n                count -= 1;\n            }\n            if (count < 0) {\n                return false;\n            }\n        }\n        return count == 0;",
        "grade-71": {
            "execution": 1
        },
        "75": "if (brackets.length() == 0) {\n            return true;\n        }\n        if (brackets.charAt(0) == '>') {\n            return false;\n        }\n        int count = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '<') {\n                count += 1;\n            } else {\n                count -= 1;\n            }\n            if (count < 0) {\n                return false;\n            }\n        }\n        return count == 0;",
        "grade-75": {
            "execution": 1
        },
        "189": "if (brackets.length() == 0) return true;\n        if (brackets.charAt(0) == '>') return false;\n        int open = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n            if (c == '<') open++;\n            else if (c == '>') open--;\n            if (open < 0) return false;\n        }\n        return open == 0;",
        "grade-189": {
            "execution": 1
        },
        "63": "int open = 0;\n\t\tfor (int i = 0; i < brackets.length(); i++) {\n\t\t\tif (brackets.charAt(i) == '<') {\n\t\t\t\topen++;\n\t\t\t} else {\n\t\t\t\topen--;\n\t\t\t}\n\t\t\tif (open < 0) return false;\n\t\t}\n\t\treturn open == 0;",
        "grade-63": {
            "execution": 1
        },
        "150": "return 0 == brackets.chars().reduce(0, (count, c) -> {\n            if (count < 0) {\n                return count;\n            }\n            if (c == '<') {\n                return count + 1;\n            }\n            return count - 1;\n        });",
        "grade-150": {
            "execution": 1
        },
        "72": "if (brackets.length() % 2 != 0) {\n            return false;\n        }\n        for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '<') {\n                brackets = brackets.substring(0, i) + brackets.substring(i + 1);\n                i--;\n            } else {\n                brackets = brackets.substring(0, i - 1) + brackets.substring(i + 1);\n                i -= 2;\n            }\n        }\n        return brackets.length() == 0;",
        "grade-72": {
            "execution": 0
        },
        "161": "// TODO: implement this method\n        return false;",
        "grade-161": {
            "execution": 0
        },
        "96": "// fill me in\n      return false;",
        "grade-96": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns a list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, int n) {\n",
        "snippet": [
            "        List<String> result = new ArrayList<>();\n        for (String word : s.split(\" \")) {\n            int n_consonants = 0;\n            for (char c : word.toCharArray()) {\n                c = Character.toLowerCase(c);\n                if (\"aeiou\".indexOf(c) == -1) {\n                    n_consonants += 1;\n                }\n            }\n            if (n_consonants == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n}"
        ],
        "simplified": "Given a string s and a natural number n, you have been tasked to implement a function that returns a list of all words from string s that contain exactly n consonants, in order these words appear in the string s. If the string s is empty then the function should return an empty list. Note: you may assume the input string contains only letters and spaces.",
        "task_id": "117",
        "186": "String[] splitted = s.split(\" \");\n        ArrayList<String> words = new ArrayList<String>();\n        for (String word : splitted) {\n            int consonants = 0;\n            word = word.toLowerCase();\n            for (int i = 0; i < word.length(); i++) {\n                if (!isVowel(word.charAt(i))) {\n                    consonants++;\n                }\n            }\n            if (consonants == n) {\n                words.add(word);\n            }\n        }\n        return words;",
        "grade-186": {
            "execution": 0
        },
        "30": "return new ArrayList<String>();",
        "grade-30": {
            "execution": 0
        },
        "6": "// Write your code here.\n        ArrayList<String> words = new ArrayList<>();\n        int start = 0;\n        int end = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == ' ') {\n                end = i;\n                words.add(s.substring(start, end));\n                start = i + 1;\n            }\n        }\n        if (start != s.length()) {\n            words.add(s.substring(start, s.length()));\n        }\n        words.removeIf(word -> (countConsonants(word) != n));\n        return words;",
        "grade-6": {
            "execution": 0
        },
        "77": "ArrayList<String> words = new ArrayList<String>();\n        String[] split_s = s.split(\" \");\n        for (String w : split_s) {\n            int count = 0;\n            for (int i = 0; i < w.length(); i++) {\n                String c = w.substring(i, i + 1);\n                if (c.equals(\"a\") || c.equals(\"e\") || c.equals(\"i\") || c.equals(\"o\") || c.equals(\"u\"))\n                    count++;\n            }\n            if (count == n)\n                words.add(w);\n        }\n        return words;",
        "grade-77": {
            "execution": 0
        },
        "68": "ArrayList<String> words = new ArrayList<String>();\n        // int n = 4;\n        // String s = \"Mary had a little lamb\";\n        Pattern p = Pattern.compile(\"[bcdfghjklmnpqrstvwxyz]\", Pattern.CASE_INSENSITIVE);\n        for (String word : s.split(\" \")) {\n            int count = 0;\n            for (int i = 0; i < word.length(); i++) {\n                if (p.matcher(String.valueOf(word.charAt(i))).matches()) {\n                    count++;\n                }\n            }\n            if (count == n) {\n                words.add(word);\n            }\n        }\n        return words;",
        "grade-68": {
            "execution": 0
        },
        "60": "ArrayList<String> words = new ArrayList<>();\n        int cons = 0;\n        String temp = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == ' ') {\n                words.add(temp);\n                temp = \"\";\n                cons = 0;\n            } else {\n                temp += s.charAt(i);\n                if (!isVowel(s.charAt(i))) cons++;\n            }\n        }\n        words.add(temp);\n        for (int i = 0; i < words.size(); i++) {\n            if (countConsonants(words.get(i)) != n) {\n                words.remove(i);\n                i--;\n            }\n        }\n        return words;",
        "grade-60": {
            "execution": 0
        },
        "37": "ArrayList<String> result = new ArrayList<String>();\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            int consonants = 0;\n            for (int i = 0; i < word.length(); i++) {\n                char c = word.charAt(i);\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                    consonants++;\n                }\n            }\n            if (consonants == n) {\n                result.add(word);\n            }\n        }\n        return result;",
        "grade-37": {
            "execution": 0
        },
        "28": "ArrayList<String> result = new ArrayList<String>();\n        if (s.length() == 0) return result;\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            int numberOfConsonants = 0;\n            for (char c : word.toCharArray()) {\n                if (isConsonant(c)) numberOfConsonants++;\n            }\n            if (numberOfConsonants == n) result.add(word);\n        }\n        return result;",
        "grade-28": {
            "execution": 0
        },
        "197": "String[] words = s.split(\" \");\n        ArrayList<String> result = new ArrayList<String>();\n        if (s.isEmpty()) {\n            return result;\n        }\n        for (String word : words) {\n            if (countConsonants(word) == n) {\n                result.add(word);\n            }\n        }\n        return result;",
        "grade-197": {
            "execution": 0
        },
        "157": "ArrayList<String> result = new ArrayList<String>();\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            int consonants = 0;\n            for (int i = 0; i < word.length(); i++) {\n                String letter = word.substring(i, i + 1);\n                if (!letter.matches(\"[aeiouAEIOU]\")) {\n                    consonants++;\n                }\n            }\n            if (consonants == n) {\n                result.add(word);\n            }\n        }\n        return result;",
        "grade-157": {
            "execution": 1
        },
        "22": "// your code here\n        // ...\n        // ...\n        return new ArrayList<String>();",
        "grade-22": {
            "execution": 0
        },
        "172": "ArrayList<String> res = new ArrayList<>();\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            String onlyLetters = word.replaceAll(\"[^a-zA-Z]\", \"\");\n            int noOfConsonants = onlyLetters.length() - vowelCount(onlyLetters);\n            if (noOfConsonants == n) {\n                res.add(word);\n            }\n        }\n        return res;",
        "grade-172": {
            "execution": 0
        },
        "120": "ArrayList<String> result = new ArrayList<String>();\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            int consonants = 0;\n            for (char c : word.toCharArray()) {\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                    consonants++;\n                }\n            }\n            if (consonants == n) {\n                result.add(word);\n            }\n        }\n        return result;",
        "grade-120": {
            "execution": 0
        },
        "8": "ArrayList<String> result = new ArrayList<String>();\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            int c = 0;\n            for (int i = 0; i < word.length(); i++) {\n                char ch = word.charAt(i);\n                if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u')\n                    c++;\n            }\n            if (word.length() - c == n)\n                result.add(word);\n        }\n        return result;",
        "grade-8": {
            "execution": 0
        },
        "7": "ArrayList<String>  result = new ArrayList<String>();\n        ArrayList<String>  words = new ArrayList<String>(Arrays.asList(s.split(\" \")));\n        HashSet<Character> vowels = new HashSet<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u'));\n        for (String w : words) {\n            int count = 0;\n            for (int i = 0; i < w.length(); i++) {\n                if (!vowels.contains(w.charAt(i))) {\n                    count++;\n                }\n            }\n            if (count == n) {\n                result.add(w);\n            }\n        }\n        return result;",
        "grade-7": {
            "execution": 0
        },
        "24": "var list = new ArrayList<String>();\n        var count = 0;\n        var word = new StringBuilder();\n        for (var i = 0; i < s.length(); i++) {\n            var ch = s.charAt(i);\n            if (ch != ' ') {\n                word.append(ch);\n                if (isConsonant(ch)) {\n                    count++;\n                }\n            } else {\n                if (count == n) {\n                    list.add(word.toString());\n                }\n                word = new StringBuilder();\n                count = 0;\n            }\n        }\n        if (count == n) {\n            list.add(word.toString());\n        }\n        return list;",
        "grade-24": {
            "execution": 0
        },
        "58": "String[] words = s.split(\" \");\n        ArrayList<String> res = new ArrayList<>();\n        for (String word : words) {\n            if (numConsonants(word) == n) res.add(word);\n        }\n        return res;",
        "grade-58": {
            "execution": 0
        },
        "64": "// Your code here:\n        return null;",
        "grade-64": {
            "execution": 0
        },
        "144": "// Implement this function\n        ArrayList<String> res = new ArrayList<String>();\n        String[] words = s.split(\" \");\n        for (String w : words) {\n            int vowels = 0;\n            for (int i = 0; i < w.length(); i++) {\n                if (isVowel(w.charAt(i))) vowels++;\n            }\n            if (w.length() - vowels == n) res.add(w);\n        }\n        return res;",
        "grade-144": {
            "execution": 0
        },
        "177": "ArrayList<String> words = new ArrayList<>();\n        List<Pair<Integer, Integer>> word_ranges = wordRanges(s);\n        for (Pair<Integer, Integer> range : word_ranges) {\n            int word_start = range.getValue0();\n            int word_end = range.getValue1();\n            String word = s.substring(word_start, word_end);\n            int num_consonants = numConsonants(word);\n            if (num_consonants == n) {\n                words.add(word);\n            }\n        }\n        return words;",
        "grade-177": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\" the output should be 2.\n    public static int hexKey(String num) {\n",
        "snippet": [
            "        String primes = \"2357BD\";\n        int total = 0;\n        for (char c : num.toCharArray()) {\n            if (primes.indexOf(c) != -1) {\n                total += 1;\n            }\n        }\n        return total;\n    }\n}"
        ],
        "simplified": "You have been tasked to write a function that receives a hexadecimal number as a string and counts the number of hexadecimal digits that are primes (prime number, or a prime, is a natural number greater than 1 that is not a product of two smaller natural numbers). Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Prime numbers are 2, 3, 5, 7, 11, 13, 17,... So you have to determine a number of the following digits: 2, 3, 5, 7, B (=decimal 11), D (=decimal 13). Note: you may assume the input is always correct or empty string, and symbols A,B,C,D,E,F are always uppercase.",
        "task_id": "78",
        "170": "int result = 0;\n        char[] hexArray = \"0123456789ABCDEF\".toCharArray();\n        Map<Character, Integer> map = new HashMap<Character, Integer>();\n        for (int i = 0; i < hexArray.length; i++) {\n            map.put(hexArray[i], i);\n        }\n        char[] nums = num.toCharArray();\n        for (int i = 0; i < nums.length; i++) {\n            int n = map.get(nums[i]);\n            if (n == 1 || n == 2 || n == 3 || n == 5 || n == 7 || n == 11 || n == 13) {\n                result++;\n            }\n        }\n        return result;",
        "grade-170": {
            "execution": 0
        },
        "28": "int result = 0;\n        for (int i = 0; i < num.length(); i++) {\n            char ch = num.charAt(i);\n            int x = Character.digit(ch, 16);\n            if (x == 2 || x == 3 || x == 5 || x == 7 || x == 11 || x == 13) {\n                result++;\n            }\n        }\n        return result;",
        "grade-28": {
            "execution": 1
        },
        "6": "HashSet<String> nums = new HashSet<>();\n        nums.add(\"A\");\n        nums.add(\"B\");\n        nums.add(\"D\");\n        nums.add(\"E\");\n        nums.add(\"F\");\n        nums.add(\"3\");\n        nums.add(\"5\");\n        nums.add(\"7\");\n        nums.add(\"2\");\n        return num.chars().filter(x -> nums.contains(String.valueOf((char)x))).toArray().length;",
        "grade-6": {
            "execution": 0
        },
        "196": "int n = 0;\n        for (char c : num.toCharArray()) {\n            if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n                n++;\n            }\n        }\n        return n;",
        "grade-196": {
            "execution": 1
        },
        "73": "// Your code here...\n        return -1;",
        "grade-73": {
            "execution": 0
        },
        "65": "if (num.length() == 0) return 0;\n        String regex = \"[0-9A-F]*\";\n        if (!num.matches(regex)) {\n            throw new IllegalArgumentException(\"Invalid hex number\");\n        }\n        int result = 0;\n        for (int i = 0; i < num.length(); i++) {\n            char c = num.charAt(i);\n            if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n                result++;\n            }\n        }\n        return result;",
        "grade-65": {
            "execution": 1
        },
        "60": "char[] hex = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};\n        char[] prime = {'2', '3', '5', '7', 'B', 'D'};\n        //String hex = \"0123456789ABCDEF\";\n        //String prime = \"2357BD\";\n        int count = 0;\n        char[] newNum = num.toCharArray();\n        for (int i = 0; i < num.length(); i++) {\n            if (new String(prime).contains(new String(newNum[i] + \"\"))) {\n                count++;\n            }\n        }\n        return count;",
        "grade-60": {
            "execution": 1
        },
        "35": "char[] primes = {'2', '3', '5', '7', 'B', 'D'};\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            for (int j = 0; j < primes.length; j++) {\n                if (num.charAt(i) == primes[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;",
        "grade-35": {
            "execution": 1
        },
        "195": "// Set of \"prime\" hex values\n        HashSet<String> keys = new HashSet<String>();\n        keys.add(\"2\");\n        keys.add(\"3\");\n        keys.add(\"5\");\n        keys.add(\"7\");\n        keys.add(\"B\");\n        keys.add(\"D\");\n        keys.add(\"F\");\n        int result = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (keys.contains(String.valueOf(num.charAt(i)))) {\n                result++;\n            }\n        }\n        return result;",
        "grade-195": {
            "execution": 0
        },
        "26": "if (num.isEmpty()) return 0;\n        int cnt = 0;\n        for (int i = 0; i < num.length(); i++) {\n            switch (num.charAt(i)) {\n                case '2':\n                case '3':\n                case '5':\n                case '7':\n                case 'B':\n                case 'D':\n                    cnt++;\n            }\n        }\n        return cnt;",
        "grade-26": {
            "execution": 1
        },
        "180": "Set<Character> hexKey = \n        new HashSet<Character>(Arrays.asList('2','3','5','7','B','D'));\n        int count = 0;\n        for (char c : num.toCharArray()) {\n            if (hexKey.contains(c)) count++;\n        }\n        return count;",
        "grade-180": {
            "execution": 1
        },
        "144": "int primes = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (isPrime(Integer.parseInt(num.substring(i, i + 1), 16))) {\n                primes++;\n            }\n        }\n        return primes;",
        "grade-144": {
            "execution": 0
        },
        "22": "// [2-B] [2-7] [A-D]\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            char c = num.charAt(i);\n            if (c == '2' || c == '3' || c == '5' || c == '7'\n                || c == 'B' || c == 'D') {\n                count++;\n            }\n        }\n        return count;",
        "grade-22": {
            "execution": 1
        },
        "157": "Map<Character, Integer> hm = new HashMap<>();\n        //         hm.put('0', 0);\n        //         hm.put('1', 1);\n        //         hm.put('2', 2);\n        //         hm.put('3', 3);\n        //         hm.put('4', 4);\n        //         hm.put('5', 5);\n        //         hm.put('6', 6);\n        //         hm.put('7', 7);\n        //         hm.put('8', 8);\n        //         hm.put('9', 9);\n        //         hm.put('A', 10);\n        //         hm.put('B', 11);\n        //         hm.put('C', 12);\n        //         hm.put('D', 13);\n        //         hm.put('E', 14);\n        //         hm.put('F', 15);\n        hm.put('0', 2);\n        hm.put('1', 3);\n        hm.put('2', 5);\n        hm.put('3', 7);\n        hm.put('4', 11);\n        hm.put('5', 13);\n        hm.put('6', 17);\n        hm.put('7', 19);\n        hm.put('8', 23);\n        hm.put('9', 29);\n        hm.put('A', 31);\n        hm.put('B', 37);\n        hm.put('C', 41);\n        hm.put('D', 43);\n        hm.put('E', 47);\n        hm.put('F', 53);\n        String[] numbers = num.split(\"\");\n        int count = 0;\n        for (String n : numbers) {\n            if (hm.get(n.charAt(0)) != null) {\n                count++;\n            }\n        }\n        return count;",
        "grade-157": {
            "execution": 0
        },
        "112": "int count = 0;\n        Set<Character> set = new HashSet<Character>();\n        set.add('2'); set.add('3'); set.add('5'); set.add('7');\n        set.add('B'); set.add('D');\n        //\n        for (char c : num.toCharArray()) {\n            if (set.contains(c)) {\n                count++;\n            }\n        }\n        return count;",
        "grade-112": {
            "execution": 1
        },
        "8": "// #1\n        // HashSet<Character> hs = new HashSet<Character>();\n        // hs.add('2');\n        // hs.add('3');\n        // hs.add('5');\n        // hs.add('7');\n        // hs.add('B');\n        // hs.add('D');\n        // int counter = 0;\n        // for (char letter : num.toCharArray()) {\n        //     if (hs.contains(letter)) counter++;\n        // }\n        // return counter;\n        // #2\n        char[] arr = new char[] {'2', '3', '5', '7', 'B', 'D'};\n        Set<Character> hs = new HashSet<Character>(Arrays.asList(arr));\n        int counter = 0;\n        for (char letter : num.toCharArray()) {\n            if (hs.contains(letter)) counter++;\n        }\n        return counter;",
        "grade-8": {
            "execution": 0
        },
        "7": "HashSet<Character> hexKeys = new HashSet<>();\n        hexKeys.add('2');\n        hexKeys.add('3');\n        hexKeys.add('5');\n        hexKeys.add('7');\n        hexKeys.add('B');\n        hexKeys.add('D');\n        char[] charArray = num.toCharArray();\n        int count = 0;\n        for (char c : charArray) {\n            if (hexKeys.contains(c)) {\n                count++;\n            }\n        }\n        return count;",
        "grade-7": {
            "execution": 1
        },
        "23": "int count = 0;\n        Set<Character> hexPrimes = new HashSet<>(Arrays.asList('2', '3', '5', '7', 'B', 'D'));\n        for (int i = 0; i < num.length(); i++) {\n            if (hexPrimes.contains(num.charAt(i))) {\n                count++;\n            }\n        }\n        return count;",
        "grade-23": {
            "execution": 1
        },
        "58": "// Your code here\n        Set<Character> hexPrimes = new HashSet<Character>();\n        hexPrimes.add('2');\n        hexPrimes.add('3');\n        hexPrimes.add('5');\n        hexPrimes.add('7');\n        hexPrimes.add('B');\n        hexPrimes.add('D');\n        return num.chars().mapToObj(c -> (char) c).filter(c -> hexPrimes.contains(c)).toArray().length;",
        "grade-58": {
            "execution": 1
        },
        "62": "int result = 0;\n        final String[] match = new String[]{\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"};\n        for (String s : match) {\n            result += StringUtils.countMatches(num, s);\n        }\n        return result;",
        "grade-62": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given a string s.\n    // Your task is to check if the string is happy or not.\n    // A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n",
        "snippet": [
            "        if (s.length() < 3) {\n            return false;\n        }\n\n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2) || s.charAt(i) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"
        ],
        "simplified": "You are given a string s. Your task is to check if the string is happy or not. A string is happy if its length is at least 3 and every 3 consecutive letters are distinct",
        "task_id": "80",
        "31": "boolean isHappy = true;\n        for (int i = 0; i < s.length() - 2; i++) {\n            isHappy = isHappy && (s.charAt(i) != s.charAt(i + 1) && s.charAt(i) != s.charAt(i + 2) && s.charAt(i + 1) != s.charAt(i + 2));\n        }\n        return isHappy;",
        "grade-31": {
            "execution": 0
        },
        "6": "boolean result = true;\n        if (s.length() >= 3) {\n            result = IntStream.range(0, s.length() - 2).allMatch(i -> s.charAt(i) != s.charAt(i + 1) && s.charAt(i) != s.charAt(i + 2) && s.charAt(i + 1) != s.charAt(i + 2));\n        } else {\n            result = false;\n        }\n        return result;",
        "grade-6": {
            "execution": 1
        },
        "91": "// Write your code here.\n        for (int i = 2; i < s.length(); i++) {\n            if (s.charAt(i) == s.charAt(i - 1) && s.charAt(i) == s.charAt(i - 2)) {\n                return false;\n            }\n        }\n        return true;",
        "grade-91": {
            "execution": 0
        },
        "78": "// throw new UnsupportedOperationException(\"Not implemented yet\");\n        if (s.length() < 3) {\n            return false;\n        }\n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) && s.charAt(i) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        return true;",
        "grade-78": {
            "execution": 0
        },
        "70": "boolean result = true;\n        // Your code here\n        return result;",
        "grade-70": {
            "execution": 0
        },
        "42": "// Write your code here.\n        int n = s.length();\n        if (n < 3) {\n            return false;\n        }\n        for (int i = 0; i < n - 2; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        return true;",
        "grade-42": {
            "execution": 1
        },
        "29": "if (s.length() < 3) return false;\n        for (int i = 0; i < s.length() - 2; i++) {\n            char a = s.charAt(i);\n            char b = s.charAt(i + 1);\n            char c = s.charAt(i + 2);\n            if (a == b || b == c || a == c) {\n                return false;\n            }\n        }\n        return true;",
        "grade-29": {
            "execution": 1
        },
        "198": "if (s.length() < 3) {\n            return false;\n        }\n        int i = 0;\n        while (i < s.length() - 2) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n            }\n            i++;\n        }\n        return true;",
        "grade-198": {
            "execution": 1
        },
        "24": "// Write your code here\n        boolean b = true;\n        if(s.length() < 3) {\n            b = false;\n        }\n        else{\n            for(int i = 0; i < s.length() - 2; i++) {\n                if(s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)){\n                    b = false;\n                    break;\n                }\n            }\n        }\n        return b;",
        "grade-24": {
            "execution": 1
        },
        "149": "// Write your code here\n        int len = s.length();\n        for (int i = 0; i <= len - 3; i++){\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)){\n                return false;\n            }\n        }\n        return true;",
        "grade-149": {
            "execution": 0
        },
        "8": "if (s.length() >= 3) {\n            for (int i = 0; i < s.length() - 2; i++) {\n                if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;",
        "grade-8": {
            "execution": 1
        },
        "7": "if (s.length() < 3) {\n            return false;\n        }\n        for (int i = 2; i < s.length(); i++) {\n            if (s.charAt(i - 2) == s.charAt(i - 1) || s.charAt(i - 2) == s.charAt(i) || s.charAt(i - 1) == s.charAt(i)) {\n                return false;\n            }\n        }\n        return true;",
        "grade-7": {
            "execution": 1
        },
        "26": "if (s.length() < 3) return false;\n        else {\n            for (int i = 0; i < s.length() - 2; i++) {\n                char a = s.charAt(i);\n                char b = s.charAt(i + 1);\n                char c = s.charAt(i + 2);\n                if (a == b || b == c || a == c) return false;\n            }\n            return true;\n        }",
        "grade-26": {
            "execution": 1
        },
        "68": "// TODO: Implement this method\n        return false;",
        "grade-68": {
            "execution": 0
        },
        "73": "int cnt = 0;\n        char c[] = s.toCharArray();\n        for (int i = 0; i < c.length; i++) {\n            if (i == 0) {\n                if (c[i] == c[i + 1] || c[i] == c[i + 2]) {\n                    return false;\n                }\n            } else if (i == c.length - 1) {\n                if (c[i] == c[i - 1] || c[i] == c[i - 2]) {\n                    return false;\n                }\n            } else {\n                if (c[i] == c[i - 1] || c[i] == c[i - 2] || c[i] == c[i + 1] || c[i] == c[i + 2]) {\n                    return false;\n                }\n            }\n        }\n        return true;",
        "grade-73": {
            "execution": 0
        },
        "183": "// Implement me!\n        return false;",
        "grade-183": {
            "execution": 0
        },
        "62": "for (int i = 0; i <= s.length() - 3; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        return true;",
        "grade-62": {
            "execution": 0
        },
        "148": "for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) && s.charAt(i) == s.charAt(i + 2))\n                return false;\n        }\n        return true;",
        "grade-148": {
            "execution": 0
        },
        "69": "// 1. Check length\n        if (s.length() < 3) return false;\n        // 2. Check individual letters\n        boolean flag = true;\n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                flag = false;\n                break;\n            }\n        }\n        return flag;",
        "grade-69": {
            "execution": 1
        },
        "161": "if (s.length() < 3) {\n            return false;\n        }\n        for (int i = 0; i < s.length() - 2; i++) {\n            char a = s.charAt(i);\n            char b = s.charAt(i + 1);\n            char c = s.charAt(i + 2);\n            if (a == b || b == c || a == c) {\n                return false;\n            }\n        }\n        return true;",
        "grade-161": {
            "execution": 1
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // A simple program which should return the value of x if n is \n    // a prime number and should return the value of y otherwise.\n    // Examples:\n    // for x_or_y(7, 34, 12) == 34\n    // for x_or_y(15, 8, 5) == 5\n    public static int xOrY(int n, int x, int y) {\n",
        "snippet": [
            "        if (n == 1) {\n            return y;\n        }\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return y;\n            }\n        }\n        return x;\n    }\n}"
        ],
        "simplified": "A simple program which should return the value of x if n is a prime number and should return the value of y otherwise.",
        "task_id": "150",
        "131": "int q = 0;\n        // write your code here\n        // start\n        boolean isPrime = true;\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            q = x;\n        } else {\n            q = y;\n        }\n        // end\n        return q;",
        "grade-131": {
            "execution": 0
        },
        "19": "if (n%2 == 0) {\n            return x;\n        } else {\n            return y;\n        }",
        "grade-19": {
            "execution": 0
        },
        "3": "if (isPrime(n))\n            return x;\n        else\n            return y;",
        "grade-3": {
            "execution": 0
        },
        "153": "if (n == 1) {\n            throw new IllegalArgumentException(\"n == 1\");\n        }\n        if (n == 2) {\n            return x;\n        }\n        boolean prime = true;\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                prime = false;\n                break;\n            }\n        }\n        if (prime) {\n            return x;\n        } else {\n            return y;\n        }",
        "grade-153": {
            "execution": 0
        },
        "54": "boolean bool = true;\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                bool = false;\n                break;\n            }\n        }\n        if (bool)\n            return x;\n        else\n            return y;",
        "grade-54": {
            "execution": 0
        },
        "46": "if (n % 2 == 0)\n            return y;\n        else\n            return x;",
        "grade-46": {
            "execution": 0
        },
        "43": "if (n == 0) {\n\t    return x;\n\t} else if (n == 1) {\n\t    return y;\n\t}\n\tint count = 2;\n\tint i = 2;\n\twhile (i <= Math.sqrt(n)) {\n\t    if (n % i == 0) {\n\t\tcount++;\n\t    }\n\t    i++;\n\t}\n\tif (count == 2) {\n\t    return x;\n\t} else {\n\t    return y;\n\t}",
        "grade-43": {
            "execution": 1
        },
        "25": "int result = n%2 == 0 ? y : x;\n        return result;",
        "grade-25": {
            "execution": 0
        },
        "17": "if (n == 2) {\n            return y;\n        } else if (n % 2 == 0) {\n            return x;\n        }\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) {\n                return x;\n            }\n        }\n        return y;",
        "grade-17": {
            "execution": 0
        },
        "140": "if (new BigInteger(String.valueOf(n)).isProbablePrime(1)) {\n            return x;\n        } else {\n            return y;\n        }",
        "grade-140": {
            "execution": 1
        },
        "194": "return (new Prime(n)).isPrime() ? x : y;",
        "grade-194": {
            "execution": 0
        },
        "116": "// TODO: implement this function.\n        if (n > 2 && n % 2 == 0) {\n            return y;\n        }\n        int to = (int) Math.sqrt(n) + 1;\n        for (int i = 3; i < to; i += 2) {\n            if (n % i == 0) {\n                return y;\n            }\n        }\n        return x;",
        "grade-116": {
            "execution": 0
        },
        "14": "return (int) (n/n);",
        "grade-14": {
            "execution": 0
        },
        "122": "return null;",
        "grade-122": {
            "execution": 0
        },
        "87": "// Your code should appear here...\n        return (Problem.isPrime(n) ? x : y);",
        "grade-87": {
            "execution": 0
        },
        "4": "return new int[]{x, y}[n % 2];",
        "grade-4": {
            "execution": 0
        },
        "42": "",
        "grade-42": {
            "execution": 0
        },
        "44": "return n == 3 ? x : y;",
        "grade-44": {
            "execution": 0
        },
        "109": "/* Start of user code xOrY */\n\t\t/* TODO: Replace with correct code */\n        return 0;\n        /* End of user code */",
        "grade-109": {
            "execution": 0
        },
        "125": "if (Problem.isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }",
        "grade-125": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that accepts a list of strings as a parameter,\n    // deletes the strings that have odd lengths from it,\n    // and returns the resulted list with a sorted order,\n    // The list is always a list of strings and never an array of numbers,\n    // and it may contain duplicates.\n    // The order of the list should be ascending by length of each word, and you\n    // should return the list sorted by that rule.\n    // If two words have the same length, sort the list alphabetically.\n    // The function should return a list of strings in sorted order.\n    // You may assume that all words will have the same length.\n    // For example:\n    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    public static ArrayList<String> sortedListSum(ArrayList<String> lst) {\n",
        "snippet": [
            "        List<String> lst_sorted = new ArrayList<>(lst);\n        Collections.sort(lst_sorted);\n        List<String> new_lst = new ArrayList<>();\n        for (String i : lst_sorted) {\n            if (i.length() % 2 == 0) {\n                new_lst.add(i);\n            }\n        }\n        new_lst.sort(Comparator.comparingInt(String::length));\n        return new_lst;\n    }\n}"
        ],
        "simplified": "Write a function that accepts a list of strings as a parameter, deletes the strings that have odd lengths from it, and returns the resulted list with a sorted order, The list is always a list of strings and never an array of numbers, and it may contain duplicates. The order of the list should be ascending by length of each word, and you should return the list sorted by that rule. If two words have the same length, sort the list alphabetically. The function should return a list of strings in sorted order. You may assume that all words will have the same length.",
        "task_id": "149",
        "170": "ArrayList<String> tmp = new ArrayList<String>();\n        for (String str : lst) {\n            if (str.length() % 2 == 0) {\n                tmp.add(str);\n            }\n        }\n        Collections.sort(tmp, new Comparator<String>() {\n            @Override\n            public int compare(String a, String b) {\n                return a.length() - b.length();\n            }\n        });\n        return tmp;",
        "grade-170": {
            "execution": 0
        },
        "28": "return lst.stream()\n            .map(s -> s.length())\n            .distinct()\n            .map(l -> lst.stream()\n                        .filter(s -> s.length() == l)\n                        .sorted(String::compareTo)\n                        .collect(Collectors.toList()))\n            .flatMap(List::stream)\n            .collect(Collectors.toCollection(ArrayList::new));",
        "grade-28": {
            "execution": 0
        },
        "6": "// Iterate through the list\n        for (int i = 0; i < lst.size(); i++) {\n            // Remove the elements that have odd length\n            if (lst.get(i).length() % 2 != 0) {\n                lst.remove(i);\n            }\n        }\n        // Sort the list by length\n        lst.sort(new Comparator<String>() {\n            @Override\n            public int compare(String s1, String s2) {\n                return s1.length() - s2.length();\n            }\n        });\n        // Sort the list alphabetically\n        Collections.sort(lst);\n        return lst;",
        "grade-6": {
            "execution": 0
        },
        "71": "ArrayList<String> sortedList = new ArrayList<String>();\n        boolean uniqueElement = true;\n        for (int i = 0; i < lst.size(); i++) {\n            uniqueElement = true;\n            for (int j = 0; j < sortedList.size(); j++) {\n                if (lst.get(i).equals(sortedList.get(j))) {\n                    uniqueElement = false;\n                }\n            }\n            if (uniqueElement) {\n                sortedList.add(lst.get(i));\n            }\n        }\n        return sortedList;",
        "grade-71": {
            "execution": 0
        },
        "63": "return new ArrayList<String>(Arrays.asList(\"aa\"));",
        "grade-63": {
            "execution": 0
        },
        "58": "// Code goes here.\n        return null;",
        "grade-58": {
            "execution": 0
        },
        "35": "// your code goes here\n        return lst;",
        "grade-35": {
            "execution": 0
        },
        "198": "String[] arr = lst.toArray(new String[lst.size()]);\n        int sum = 0;\n        HashMap<Integer, String> map = new HashMap<>();\n        for (int i = 0; i < arr.length; i++) {\n            int currentSum = 0;\n            for (int j = 0; j < arr[i].length(); j++) {\n                currentSum += arr[i].charAt(j);\n            }\n            if (map.containsKey(currentSum)) {\n                map.put(currentSum, map.get(currentSum) + \" \" + arr[i]);\n            } else {\n                map.put(currentSum, arr[i]);\n            }\n        }\n        int largestSum = Integer.MIN_VALUE;\n        for (int i : map.keySet()) {\n            if (i > largestSum) {\n                largestSum = i;\n            }\n        }\n        return new ArrayList<String>(Arrays.asList(map.get(largestSum).split(\" \")));",
        "grade-198": {
            "execution": 0
        },
        "26": "ArrayList<String> lst2 = new ArrayList<String>();\n        for (String s : lst) {\n            if (s.length() % 2 == 0) {\n                lst2.add(s);\n            }\n        }\n        lst2.sort(new Comparator<String>() {\n            @Override\n            public int compare(String s1, String s2) {\n                if (s1.length() < s2.length()) {\n                    return -1;\n                } else if (s1.length() > s2.length()) {\n                    return 1;\n                } else {\n                    return s1.compareTo(s2);\n                }\n            }\n        });\n        return lst2;",
        "grade-26": {
            "execution": 1
        },
        "180": "var sorted = lst.stream().sorted(new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                return o1.length() - o2.length();\n            }\n        }).toArray(String[]::new);\n        ArrayList<String> result = new ArrayList<String>();\n        for (int i = 0; i < sorted.length; i++) {\n            if (sorted[i].length() % 2 == 0)\n                result.add(sorted[i]);\n        }\n        return result;",
        "grade-180": {
            "execution": 0
        },
        "146": "ArrayList<String> newLst = new ArrayList<String>();\n        ArrayList<String> temp = new ArrayList<String>();\n        for (String str : lst) {\n            if (str.length() % 2 == 0) {\n                newLst.add(str);\n            }\n        }\n        Collections.sort(newLst);\n        return newLst;",
        "grade-146": {
            "execution": 0
        },
        "22": "ArrayList<String> res = new ArrayList<String>();\n        ArrayList<String> lst2 = new ArrayList<String>();\n        ArrayList<String> lst3 = new ArrayList<String>();\n        int length = lst.get(0).length();\n        for (String str : lst) {\n            if (str.length() == length) {\n                lst2.add(str);\n            } else {\n                lst3.add(str);\n            }\n        }\n        Collections.sort(lst2);\n        res.add(lst2.get(0));\n        return res;",
        "grade-22": {
            "execution": 0
        },
        "158": "return new ArrayList<>(\n            lst.stream()\n                .filter(e -> e.length() % 2 == 0)\n                .collect(Collectors.toList())\n        );",
        "grade-158": {
            "execution": 0
        },
        "112": "ArrayList<String> result = new ArrayList<String>();\n        for (String s : lst) {\n            if (s.length() % 2 == 0) {\n                result.add(s);\n            }\n        }\n        Collections.sort(result, new StringLengthComparator());\n        return result;",
        "grade-112": {
            "execution": 0
        },
        "8": "ArrayList<String> result = new ArrayList<String>();\n        if (lst.size() == 0) return result;\n        int max = 0;\n        int count = 0;\n        int temp_length = 0;\n        int size = lst.size();\n        ArrayList<String> temp = new ArrayList<String>();\n        // get max length\n        for (int i = 0; i < size; i++) {\n            temp_length = lst.get(i).length();\n            if (temp_length % 2 == 0) {\n                if (temp_length > max) max = temp_length;\n            }\n        }\n        // get count\n        for (int i = 0; i < size; i++) {\n            temp_length = lst.get(i).length();\n            if (temp_length == max) count++;\n        }\n        // sort list\n        for (int i = 0; i < size; i++) {\n            temp_length = lst.get(i).length();\n            if (temp_length == max) {\n                temp.add(lst.get(i));\n            }\n        }\n        Collections.sort(temp);\n        // add to result\n        for (int i = 0; i < count; i++) {\n            result.add(temp.get(i));\n        }\n        return result;",
        "grade-8": {
            "execution": 0
        },
        "7": "ArrayList<String> result = new ArrayList<String>();\n        lst.forEach(word -> {\n            if (word.length() % 2 == 0) {\n                result.add(word);\n            }\n        });\n        Collections.sort(result, new Comparator<String>() {\n            @Override\n            public int compare(String s1, String s2) {\n                if (s1.length() == s2.length()) {\n                    return s1.compareTo(s2);\n                }\n                return s1.length() - s2.length();\n            }\n        });\n        return result;",
        "grade-7": {
            "execution": 1
        },
        "23": "ArrayList<String> list = new ArrayList<String>();\n        for (String s : lst) {\n            if (s.length() % 2 == 0) {\n                list.add(s);\n            }\n        }\n        Collections.sort(list, new Comparator<String>() {\n            @Override\n            public int compare(String a, String b) {\n                if (a.length() > b.length()) {\n                    return 1;\n                } else if (a.length() < b.length()) {\n                    return -1;\n                } else {\n                    return a.compareTo(b);\n                }\n            }\n        });\n        return list;",
        "grade-23": {
            "execution": 1
        },
        "55": "ArrayList<String> result = new ArrayList<String>();\n        List<String> tmp = lst.stream().filter(x -> x.length() % 2 == 0).collect(Collectors.toList());\n        tmp.sort(new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                return o1.length() - o2.length();\n            }\n        });\n        result.addAll(tmp);\n        return result;",
        "grade-55": {
            "execution": 0
        },
        "60": "ArrayList<String> result = new ArrayList<String>();\n        HashMap<Integer, ArrayList<String>> map = new HashMap<Integer, ArrayList<String>>();\n        for (String item : lst) {\n            if (map.containsKey(item.length())) {\n                map.get(item.length()).add(item);\n            } else {\n                ArrayList<String> al = new ArrayList<String>();\n                al.add(item);\n                map.put(item.length(), al);\n            }\n        }\n        ArrayList<Integer> keys = new ArrayList<Integer>(map.keySet());\n        Collections.sort(keys);\n        for (Integer item : keys) {\n            ArrayList<String> al = map.get(item);\n            Collections.sort(al);\n            result.addAll(al);\n        }\n        return result;",
        "grade-60": {
            "execution": 0
        },
        "134": "ArrayList<String> oddSortedList = new ArrayList<String>();\n        for (String str : lst) {\n            if (str.length() % 2 == 0) {\n                oddSortedList.add(str);\n            }\n        }\n        Collections.sort(oddSortedList);\n        return oddSortedList;",
        "grade-134": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given an integer. return a tuple that has the number of even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12) ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer, Integer> evenOddCount(int num) {\n",
        "snippet": [
            "        int even_count = 0, odd_count = 0;\n        for (char i : String.valueOf(Math.abs(num)).toCharArray()) {\n            if ((i - '0') % 2 == 0) {\n                even_count += 1;\n            } else {\n                odd_count += 1;\n            }\n        }\n        return Arrays.asList(even_count, odd_count);\n    }\n}"
        ],
        "simplified": "Given an integer. return a tuple that has the number of even and odd digits respectively.",
        "task_id": "155",
        "31": "int even = 0;\n        int odd = 0;\n        while (num != 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                even += 1;\n            } else {\n                odd += 1;\n            }\n            num /= 10;\n        }\n        return new Pair<Integer, Integer>(even, odd);",
        "grade-31": {
            "execution": 0
        },
        "6": "// Your code goes here\n        int temp = num;\n        int even = 0;\n        int odd = 0;\n        while(temp != 0){\n            int digit = temp % 10;\n            if(digit % 2 == 0){\n                even++;\n            }\n            else{\n                odd++;\n            }\n            temp /= 10;\n        }\n        return new Pair<Integer, Integer>(even, odd);",
        "grade-6": {
            "execution": 0
        },
        "87": "// TODO: Implement this method\n        if (num == 0) {\n            return new Pair<Integer, Integer>(1, 0);\n        }\n        int evenCount = 0;\n        int oddCount = 0;\n        while (num != 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n            num /= 10;\n        }\n        return new Pair<Integer, Integer>(evenCount, oddCount);",
        "grade-87": {
            "execution": 0
        },
        "77": "String str = String.valueOf(num);\n        int even = 0;\n        int odd = 0;\n        for (int i = 0; i < str.length(); i++) {\n            int digit = str.charAt(i) - '0';\n            if (digit % 2 == 0) even++;\n            else odd++;\n        }\n        return new Pair<Integer, Integer>(even, odd);",
        "grade-77": {
            "execution": 0
        },
        "71": "return Pair.with(new Long(String.valueOf(num).chars().filter(c -> c % 2 == 0).count()).intValue(),\n                new Long(String.valueOf(num).chars().filter(c -> c % 2 != 0).count()).intValue());",
        "grade-71": {
            "execution": 0
        },
        "41": "return Pair.with(0, 0);",
        "grade-41": {
            "execution": 0
        },
        "29": "Pair<Integer, Integer> result = new Pair<Integer, Integer>(0, 0);\n        List<Integer> digits = Problem.intToDigits(num);\n        for (int digit : digits) {\n            if (digit % 2 == 0) {\n                result = result.setAt0(result.getValue0() + 1);\n            } else {\n                result = result.setAt1(result.getValue1() + 1);\n            }\n        }\n        return result;",
        "grade-29": {
            "execution": 0
        },
        "176": "int even = 0;\n        int odd = 0;\n        for (int d : getDigits(num)) {\n            if (d % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n        }\n        return new Pair<Integer, Integer>(even, odd);",
        "grade-176": {
            "execution": 0
        },
        "24": "if (num == 0) {\n            return new Pair<Integer, Integer>(1, 0);\n        }\n        int even = 0;\n        int odd = 0;\n        if (num < 0) {\n            num = -num;\n        }\n        while (num > 0) {\n            int ld = num % 10;\n            if (ld % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n            num /= 10;\n        }\n        return new Pair<Integer, Integer>(even, odd);",
        "grade-24": {
            "execution": 0
        },
        "193": "Pair<Integer, Integer> result = new Pair<Integer, Integer>(0, 0);\n        // your code goes here\n        return result;",
        "grade-193": {
            "execution": 0
        },
        "140": "// TODO: Write code here",
        "grade-140": {
            "execution": 0
        },
        "8": "// Your code here\n        return null;",
        "grade-8": {
            "execution": 0
        },
        "7": "// TODO: Return a tuple with the count of even digits and odd digits respectively\n        return null;",
        "grade-7": {
            "execution": 0
        },
        "26": "String num_str = String.valueOf(num);\n        int even_cnt = 0;\n        int odd_cnt = 0;\n        for (int i = 0; i < num_str.length(); i++) {\n            int digit = Integer.parseInt(String.valueOf(num_str.charAt(i)));\n            if (digit % 2 == 0) {\n                even_cnt++;\n            } else {\n                odd_cnt++;\n            }\n        }\n        return new Pair<Integer, Integer>(even_cnt, odd_cnt);",
        "grade-26": {
            "execution": 0
        },
        "68": "int even = 0;\n        int odd = 0;\n        // write your code here\n        if (num < 0) {\n            num = num * -1;\n        }\n        String s = String.valueOf(num);\n        char[] c = s.toCharArray();\n        for (int i = 0; i < c.length; i++) {\n            if (c[i] % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n        }\n        return new Pair<Integer, Integer>(even, odd);",
        "grade-68": {
            "execution": 0
        },
        "74": "String numstr = String.valueOf(num);\n      int evencount = 0;\n      int oddcount = 0;\n      for (int i = 0; i < numstr.length(); i++) {\n        if (numstr.charAt(i) % 2 == 0) {\n          evencount++;\n        } else {\n          oddcount++;\n        }\n      }\n      return new Pair<Integer, Integer>(evencount, oddcount);",
        "grade-74": {
            "execution": 0
        },
        "163": "int num_copy = num;\n        int even_count = 0;\n        int odd_count = 0;\n        if (num == 0) {\n            even_count++;\n        }\n        while (num_copy != 0) {\n            if (num_copy % 2 == 0) {\n                even_count++;\n            } else {\n                odd_count++;\n            }\n            num_copy /= 10;\n        }\n        return new Pair<Integer, Integer>(even_count, odd_count);",
        "grade-163": {
            "execution": 0
        },
        "181": "int even_count = 0;\n        int odd_count = 0;\n        while (num != 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0)\n                even_count++;\n            else\n                odd_count++;\n            num /= 10;\n        }\n        return new Pair<Integer, Integer>(even_count, odd_count);",
        "grade-181": {
            "execution": 0
        },
        "60": "int even = 0;\n        int odd = 0;\n        char[] evenDigits = new char[]{'0', '2', '4', '6', '8'};\n        char[] oddDigits = new char[]{'1', '3', '5', '7', '9'};\n        String numString = Integer.toString(num);\n        for (int i = 0; i < numString.length(); i++) {\n            char currChar = numString.charAt(i);\n            if (Arrays.asList(evenDigits).contains(currChar)) {\n                even++;\n            } else if (Arrays.asList(oddDigits).contains(currChar)) {\n                odd++;\n            }\n        }\n        return new Pair<Integer, Integer>(even, odd);",
        "grade-60": {
            "execution": 0
        },
        "139": "int even = 0;\n        int odd = 0;\n        for (int i = 0; i < Integer.toString(num).length(); i++) {\n            if (Integer.toString(num).charAt(i) % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n        }\n        return new Pair<Integer, Integer>(even, odd);",
        "grade-139": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // This function takes a list l and returns a list l' such that\n    // l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    // to the values of the corresponding indicies of l, but sorted.\n    // >>> sort_third([1, 2, 3])\n    // [1, 2, 3]\n    // >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    // [2, 6, 3, 4, 8, 9, 5]\n    public static ArrayList<Integer> sortThird(ArrayList<Integer> l) {\n",
        "snippet": [
            "        List<Integer> thirds = new ArrayList<>();\n        for (int i = 0; i < l.size(); i += 3) {\n            thirds.add(l.get(i));\n        }\n        Collections.sort(thirds);\n        List<Integer> result = l;\n        for (int i = 0; i < l.size(); i += 3) {\n            result.set(i, thirds.get(i / 3));\n        }\n        return result;\n    }\n}"
        ],
        "simplified": "This function takes a list l and returns a list l' such that l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal to the values of the corresponding indicies of l, but sorted.",
        "task_id": "33",
        "168": "ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                ArrayList<Integer> curr = new ArrayList<Integer>();\n                curr.add(l.get(i));\n                curr.add(l.get(i + 1));\n                curr.add(l.get(i + 2));\n                Collections.sort(curr);\n                result.add(curr.get(0));\n                result.add(curr.get(1));\n                result.add(curr.get(2));\n            } else {\n                result.add(l.get(i));\n            }\n        }\n        return result;",
        "grade-168": {
            "execution": 0
        },
        "28": "ArrayList<Integer> l1 = (ArrayList<Integer>) l.clone();\n        Collections.sort(l1);\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                l.set(i, l1.get(i));\n            }\n        }\n        return l;",
        "grade-28": {
            "execution": 0
        },
        "6": "ArrayList<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                ArrayList<Integer> temp = new ArrayList<>();\n                int j = i;\n                while (j < l.size() && j % 3 == 0) {\n                    temp.add(l.get(j));\n                    j++;\n                }\n                Collections.sort(temp);\n                for (int k = 0; k < temp.size(); k++) {\n                    result.add(temp.get(k));\n                }\n                i = j - 1;\n            } else {\n                result.add(l.get(i));\n            }\n        }\n        return result;",
        "grade-6": {
            "execution": 0
        },
        "196": "if (l.size() == 0) {\n            return l;\n        }\n        for (int i = 0; i < l.size(); i+=3) {\n            // if (i + 2 < l.size()) {\n            if (i + 1 < l.size()) {\n                List<Integer> temp = l.subList(i, i + 3);\n                Collections.sort(temp);\n                l.set(i, temp.get(0));\n                l.set(i + 1, temp.get(1));\n                l.set(i + 2, temp.get(2));\n            }\n        }\n        return l;",
        "grade-196": {
            "execution": 0
        },
        "70": "ArrayList<Integer> list = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                ArrayList<Integer> sublist = new ArrayList<Integer>();\n                sublist.add(l.get(i));\n                if (i + 1 < l.size()) {\n                    sublist.add(l.get(i + 1));\n                }\n                if (i + 2 < l.size()) {\n                    sublist.add(l.get(i + 2));\n                }\n                Collections.sort(sublist);\n                list.add(sublist.get(0));\n                if (i + 1 < l.size()) {\n                    list.add(sublist.get(1));\n                }\n                if (i + 2 < l.size()) {\n                    list.add(sublist.get(2));\n                }\n            } else {\n                list.add(l.get(i));\n            }\n        }\n        return list;",
        "grade-70": {
            "execution": 0
        },
        "62": "ArrayList<Integer> result = new ArrayList<>();\n        ArrayList<Integer> thirds = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) thirds.add(l.get(i));\n            else result.add(l.get(i));\n        }\n        Collections.sort(thirds);\n        int pointer = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) result.add(pointer, thirds.get(pointer));\n            pointer++;\n        }\n        return result;",
        "grade-62": {
            "execution": 0
        },
        "57": "ArrayList<Integer> l_copy = new ArrayList<Integer>(l);\n        int num_entries = l.size();\n        ArrayList<Integer> l_split = new ArrayList<Integer>();\n        ArrayList<Integer> l_not_split = new ArrayList<Integer>();\n        // split l into a sublist l_split of the elements at the indicies of l that are divisible by three, and l_not_split which is the rest of l.\n        for (int i = 0; i < num_entries; i++) {\n            if (i % 3 == 0) {\n                l_split.add(l.get(i));\n            } else {\n                l_not_split.add(l.get(i));\n            }\n        }\n        // sort l_split\n        Collections.sort(l_split);\n        // write l_split back into l_copy\n        int split_index = 0;\n        for (int i = 0; i < num_entries; i++) {\n            if (i % 3 == 0) {\n                l_copy.set(i, l_split.get(split_index));\n                split_index += 1;\n            }\n        }\n        return l_copy;",
        "grade-57": {
            "execution": 1
        },
        "35": "int len = l.size();\n      for (int i = 2; i < len; i+=3) {\n        int n = Math.min(i+3, len);\n        ArrayList<Integer> sub = new ArrayList<Integer>(l.subList(i, n));\n        Collections.sort(sub);\n        for (int j = 0; j < sub.size(); j++) {\n          l.set(i+j, sub.get(j));\n        }\n      }\n      return l;",
        "grade-35": {
            "execution": 0
        },
        "195": "ArrayList<Integer> ret = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            ret.add(l.get(i));\n        }\n        for (int i = 2; i < l.size(); i += 3) {\n            ArrayList<Integer> copy = new ArrayList<Integer>();\n            for (int j = i; j >= i - 2; j--) {\n                copy.add(l.get(j));\n            }\n            Collections.sort(copy);\n            for (int j = i; j >= i - 2; j--) {\n                ret.set(j, copy.get(i - j));\n            }\n        }\n        return ret;",
        "grade-195": {
            "execution": 0
        },
        "26": "ArrayList<Integer> res = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                ArrayList<Integer> sub = new ArrayList<Integer>();\n                while (i < l.size() && i % 3 == 0) {\n                    sub.add(l.get(i));\n                    i++;\n                }\n                Collections.sort(sub);\n                for (int j = 0; j < sub.size(); j++) {\n                    res.add(sub.get(j));\n                }\n                i--;\n            } else {\n                res.add(l.get(i));\n            }\n        }\n        return res;",
        "grade-26": {
            "execution": 0
        },
        "178": "// Your code here\n        // >>> sort_third([1, 2, 3])\n        // [1, 2, 3]\n        // >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n        // [2, 6, 3, 4, 8, 9, 5]\n        ArrayList<Integer> lst = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                ArrayList<Integer> lst2 = new ArrayList<Integer>();\n                for (int j = i; j < i + 3; j++) {\n                    lst2.add(l.get(j));\n                }\n                Collections.sort(lst2);\n                for (int j = i; j < i + 3; j++) {\n                    lst.add(lst2.get(j - i));\n                }\n            } else {\n                lst.add(l.get(i));\n            }\n        }\n        return lst;",
        "grade-178": {
            "execution": 0
        },
        "143": "// Fill in your code here",
        "grade-143": {
            "execution": 0
        },
        "22": "// write your code in Java SE 8\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                ArrayList<Integer> vals = new ArrayList<Integer>();\n                vals.add(l.get(i));\n                vals.add(l.get(i + 1));\n                vals.add(l.get(i + 2));\n                Collections.sort(vals);\n                result.add(vals.get(0));\n                result.add(vals.get(1));\n                result.add(vals.get(2));\n            } else {\n                result.add(l.get(i));\n            }\n        }\n        return result;",
        "grade-22": {
            "execution": 0
        },
        "155": "int lSize = l.size();\n        int i = 0;\n        while (i < lSize) {\n            if (i % 3 == 0) {\n                ArrayList<Integer> index3 = new ArrayList<Integer>();\n                for (int n = i; n < i + 3; n++) {\n                    index3.add(l.get(n));\n                }\n                Collections.sort(index3);\n                for (int n = i; n < i + 3; n++) {\n                    l.set(n, index3.get(n - i));\n                }\n            }\n            i++;\n        }\n        return l;",
        "grade-155": {
            "execution": 0
        },
        "110": "ArrayList<Integer> l2 = new ArrayList<Integer>();\n        ArrayList<Integer> l3 = new ArrayList<Integer>();\n        ArrayList<Integer> l4 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                l2.add(l.get(i));\n            } else {\n                l3.add(l.get(i));\n            }\n        }\n        Collections.sort(l2);\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                l4.add(l2.get(0));\n                l2.remove(0);\n            } else {\n                l4.add(l3.get(0));\n                l3.remove(0);\n            }\n        }\n        return l4;",
        "grade-110": {
            "execution": 1
        },
        "8": "// >>> Enter your implementation here.\n        return l;",
        "grade-8": {
            "execution": 0
        },
        "7": "if (l.size() < 3) return l;\n        // The two lists to be zipped together\n        ArrayList<Integer> l1 = new ArrayList<Integer>();\n        ArrayList<Integer> l2 = new ArrayList<Integer>();\n        // Traverse the list\n        for (int i = 0; i < l.size(); i++) {\n            // If the index is divisible by three, then the value should be sorted\n            if (i % 3 == 0) {\n                l1.add(l.get(i));\n                // Sort the values in l1\n                Collections.sort(l1);\n                // Retrieve the value at index 0 of l1 and add it to l2\n                l2.add(l1.get(0));\n                // Clear l1\n                l1.clear();\n            }\n            // If the index is not divisible by three, then the value should be the same as the value in l\n            else {\n                l2.add(l.get(i));\n            }\n        }\n        return l2;",
        "grade-7": {
            "execution": 0
        },
        "23": "// TODO: Replace the line below with your code\n        return null;",
        "grade-23": {
            "execution": 0
        },
        "55": "ArrayList<Integer> l_prime = new ArrayList<Integer>();\n        int size = l.size();\n        int chunk_size = size / 3;\n        ArrayList<Integer> chunks = new ArrayList<Integer>();\n        ArrayList<Integer> positions = new ArrayList<Integer>();\n        for (int i = 0; i < chunk_size; i++) {\n            int chunk_start = i * 3;\n            ArrayList<Integer> chunk = new ArrayList<Integer>();\n            chunk.add(l.get(chunk_start));\n            chunk.add(l.get(chunk_start + 1));\n            chunk.add(l.get(chunk_start + 2));\n            Collections.sort(chunk);\n            for (int j = 0; j < 3; j++) {\n                l_prime.add(chunk.get(j));\n            }\n        }\n        return l_prime;",
        "grade-55": {
            "execution": 0
        },
        "59": "ArrayList<Integer> lPrime = new ArrayList<Integer>();\n        // Add non-divisible by three indicies here\n        int index = 0;\n        while (index < l.size()) {\n            if (index % 3 != 0) {\n                lPrime.add(l.get(index));\n            }\n            index++;\n        }\n        // Add divisible by three indicies here\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                Integer[] a = new Integer[3];\n                a[0] = l.get(i);\n                a[1] = l.get(i + 1);\n                a[2] = l.get(i + 2);\n                Arrays.sort(a);\n                lPrime.add(a[0]);\n                lPrime.add(a[1]);\n                lPrime.add(a[2]);\n            }\n        }\n        return lPrime;",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Create a function that returns True if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and False otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    // check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    // check_if_last_char_is_a_letter(\"\") \u279e False\n    public static boolean checkIfLastCharIsALetter(String txt) {\n",
        "snippet": [
            "        String[] words = txt.split(\" \", -1);\n        String check = words[words.length - 1];\n        return check.length() == 1 && Character.isLetter(check.charAt(0));\n    }\n}"
        ],
        "simplified": "Create a function that returns True if the last character of a given string is an alphabetical character and is not a part of a word, and False otherwise. Note: \"word\" is a group of characters separated by space.",
        "task_id": "134",
        "177": "// Return the answer\n        if (txt.equals(\"\")) return false;\n        if (txt.trim().length() == 0) return false;\n        char last = txt.trim().charAt(txt.trim().length() - 1);\n        if (Character.isAlphabetic(last)) {\n            return true;\n        }\n        return false;",
        "grade-177": {
            "execution": 0
        },
        "30": "if (txt.length() == 0) {\n            return false;\n        }\n        char last = txt.charAt(txt.length() - 1);\n        return last >= 'a' && last <= 'z' && !txt.substring(0, txt.length() - 1).contains(last + \"\");",
        "grade-30": {
            "execution": 0
        },
        "6": "txt = txt.trim();\n        return txt.length() > 0 && !txt.substring(txt.length() - 1).matches(\"\\\\w\");",
        "grade-6": {
            "execution": 0
        },
        "75": "if (txt.length() == 0) return false;\n        String lastChar = txt.substring(txt.length() - 1);\n        String regex = \"[A-Za-z]\";\n        return lastChar.matches(regex) && !lastChar.equals(\" \");",
        "grade-75": {
            "execution": 0
        },
        "66": "char lastChar = txt.charAt(txt.length() - 1);\n        String letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n        return (letters.indexOf(lastChar) >= 0 && txt.lastIndexOf(\" \") == txt.length() - 2);",
        "grade-66": {
            "execution": 0
        },
        "60": "// if the length of the string is 1, return true\n        if (txt.length() == 1) {\n            return true;\n        }\n        // check if the last character is an alphabetical character\n        boolean isLetter = Character.isLetter(txt.charAt(txt.length() - 1));\n        // check if the last character is part of a word\n        boolean isPartOfWord = Character.isLetter(txt.charAt(txt.length() - 2));\n        return isLetter && !isPartOfWord;",
        "grade-60": {
            "execution": 0
        },
        "37": "if (txt.isEmpty()) {\n            return false;\n        }\n        if (txt.charAt(txt.length() - 1) != ' ') {\n            return false;\n        }\n        String last = txt.substring(txt.length() - 2);\n        if (last.length() == 1) {\n            return false;\n        }\n        if (last.charAt(0) == ' ') {\n            return true;\n        }\n        return false;",
        "grade-37": {
            "execution": 0
        },
        "27": "if (txt.length() > 0) {\n            return Character.isLetter(txt.charAt(txt.length() - 1)) &&\n                !txt.contains(\" \" + txt.charAt(txt.length() - 1));\n        }\n        return false;",
        "grade-27": {
            "execution": 0
        },
        "189": "String lastChar = txt.substring(txt.length() - 1);\n        if(lastChar.matches(\"[a-zA-Z]\")) {\n            return true;\n        }\n        return false;",
        "grade-189": {
            "execution": 0
        },
        "152": "if (txt.length() == 0) {\n            return false;\n        }\n        String[] words = txt.split(\" \");\n        String lastWord = words[words.length - 1];\n        if (lastWord.length() == 0) {\n            return false;\n        }\n        String lastCharacter = lastWord.substring(lastWord.length() - 1);\n        return !Character.isLetter(lastCharacter.charAt(0));",
        "grade-152": {
            "execution": 0
        },
        "23": "return txt.isEmpty() ? false : Character.isLetter(txt.charAt(txt.length() - 1)) && !Character.isLetter(txt.charAt(txt.length() - 2));",
        "grade-23": {
            "execution": 0
        },
        "165": "if (txt.length() == 0) {\n            return false;\n        }\n        txt = txt.trim();\n        String[] words = txt.split(\" \");\n        char lastChar = words[words.length - 1].charAt(words[words.length - 1].length() - 1);\n        return Character.isLetter(lastChar);",
        "grade-165": {
            "execution": 0
        },
        "117": "char[] tmp = txt.toCharArray();\n        if (tmp.length == 0) {\n            return false;\n        }\n        if (Character.isLetter(tmp[tmp.length - 1])) {\n            return true;\n        }\n        return false;",
        "grade-117": {
            "execution": 0
        },
        "8": "if (txt.isEmpty()) {\n            return false;\n        }\n        String tmp = txt.trim();\n        if (Character.isLetter(tmp.charAt(tmp.length() - 1))) {\n            return true;\n        }\n        return false;",
        "grade-8": {
            "execution": 0
        },
        "7": "// Given a string, return true if the last character is an alphabetical character and is not a part of a word and false otherwise.\n        // A \"word\" is a group of characters separated by space.\n        // Examples:\n        // checkIfLastCharIsALetter(\"apple pie\") \u279e false\n        // checkIfLastCharIsALetter(\"apple pi e\") \u279e true\n        // checkIfLastCharIsALetter(\"apple pi e \") \u279e false\n        // checkIfLastCharIsALetter(\"\") \u279e false\n        if (txt.equals(\"\")) return false;\n        if (txt.endsWith(\" \")) return false;\n        String[] words = txt.split(\" \");\n        String lastWord = words[words.length - 1];\n        String lastChar = lastWord.substring(lastWord.length() - 1);\n        return lastChar.matches(\"[a-zA-Z]\");",
        "grade-7": {
            "execution": 0
        },
        "24": "return txt.isEmpty() ? false : txt.trim().charAt(txt.trim().length() - 1) >= 'a' && txt.trim().charAt(txt.trim().length() - 1) <= 'z';",
        "grade-24": {
            "execution": 0
        },
        "58": "if (txt.isEmpty()) {\n            return false;\n        }\n        int lastIndex = txt.length() - 1;\n        while (lastIndex >= 0 && txt.charAt(lastIndex) == ' ') {\n            lastIndex--;\n        }\n        if (lastIndex < 0) {\n            return false;\n        }\n        if (Character.isAlphabetic(txt.charAt(lastIndex))) {\n            return true;\n        }\n        return false;",
        "grade-58": {
            "execution": 0
        },
        "63": "// Pattern pattern = Pattern.compile(\"[\\\\W&&[^\\\\s]]\\\\z\");\n        // return pattern.matcher(txt).find();\n        return txt.matches(\"[\\\\w\\\\s]*[\\\\W&&[^\\\\s]]\\\\z\");",
        "grade-63": {
            "execution": 0
        },
        "139": "// return txt.matches(\".*[a-zA-Z]\\\\s+$\");\n        // return txt.matches(\".*[a-zA-Z]\\\\b.*\");\n        // return txt.matches(\".*[a-zA-Z]\\\\s+.*\");\n        return txt.matches(\".*[a-zA-Z]$\");",
        "grade-139": {
            "execution": 0
        },
        "168": "int len = txt.length();\n        if (len == 0) {\n            return false;\n        }\n        char lastChar = txt.charAt(len - 1);\n        return !txt.endsWith(\" \") && Character.isLetter(lastChar);",
        "grade-168": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa', 'aa')\n    // 3\n    public static int howManyTimes(String string, String substring) {\n",
        "snippet": [
            "        int times = 0;\n\n        for (int i = 0; i < string.length() - substring.length() + 1; i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                times += 1;\n            }\n        }\n\n        return times;\n    }\n}"
        ],
        "simplified": "Find how many times a given substring can be found in the original string. Count overlaping cases.",
        "task_id": "18",
        "31": "if (string.length() == 0 || substring.length() == 0) {\n            return 0;\n        }\n        else {\n            return (string.length() - string.replace(substring, \"\").length()) / substring.length();\n        }",
        "grade-31": {
            "execution": 0
        },
        "6": "int count = 0;\n        if (string.isEmpty() || substring.isEmpty()) {\n            return count;\n        }\n        // string = \"aaa\"\n        // substring = \"aa\"\n        // index(0) = \"a\"\n        // index(1) = \"a\"\n        // index(2) = \"a\"\n        // index(3) = \"\"\n        for (int index = 0; index < string.length(); index++) {\n            // string = \"aaa\"\n            // substring = \"aa\"\n            // index(0) = \"a\"\n            // substringAtIndex(0) = \"aa\"\n            String substringAtIndex = string.substring(index, index + substring.length());\n            if (substringAtIndex.equals(substring)) {\n                count++;\n            }\n        }\n        return count;",
        "grade-6": {
            "execution": 0
        },
        "84": "int count = 0;\n        int index = 0;\n        while (index >= 0) {\n            index = string.indexOf(substring, index);\n            if (index >= 0) {\n                count++;\n                index++;\n            }\n        }\n        return count;",
        "grade-84": {
            "execution": 1
        },
        "73": "int count = 0;\n        int endIndex = substring.length();\n        for (int i = 0; i < string.length(); i++) {\n            if (string.substring(i, endIndex).equals(substring)) {\n                count++;\n            }\n            endIndex++;\n        }\n        return count;",
        "grade-73": {
            "execution": 0
        },
        "65": "int count = 0;\n        int index = 0;\n        while (index != -1) {\n            index = string.indexOf(substring, index);\n            if (index != -1) {\n                count++;\n                index += substring.length();\n            }\n        }\n        return count;",
        "grade-65": {
            "execution": 0
        },
        "40": "if (string.isEmpty() || substring.isEmpty()) {\n            return 0;\n        }\n        int result = 0;\n        int index = string.indexOf(substring);\n        while (index != -1) {\n            result += 1;\n            index = string.indexOf(substring, index + 1);\n        }\n        return result;",
        "grade-40": {
            "execution": 1
        },
        "29": "// Your code here\n        if (string.length() < substring.length()) {\n            return 0;\n        } else if (string.length() == substring.length()) {\n            return string.equals(substring) ? 1 : 0;\n        } else {\n            if (string.substring(0, substring.length()).equals(substring)) {\n                return 1 + howManyTimes(string.substring(1), substring);\n            } else {\n                return howManyTimes(string.substring(1), substring);\n            }\n        }",
        "grade-29": {
            "execution": 1
        },
        "176": "if (string.length() < substring.length()) return 0;\n        int count = 0;\n        for (int i = 0; i <= string.length() - substring.length(); i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                count++;\n            }\n        }\n        return count;",
        "grade-176": {
            "execution": 1
        },
        "23": "// Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        int count = 0;\n        int index = 0;\n        while ((index = string.indexOf(substring, index)) != -1) {\n            count++;\n            index += substring.length();\n        }\n        return count;",
        "grade-23": {
            "execution": 0
        },
        "193": "int count = 0;\n        int start = 0;\n        while(start <= string.length() - substring.length()) {\n            if(string.substring(start, start + substring.length()).equals(substring)) {\n                count += 1;\n                start += substring.length();\n            } else {\n                start += 1;\n            }\n        }\n        return count;",
        "grade-193": {
            "execution": 0
        },
        "132": "int count = 0;\n        int index = string.indexOf(substring);\n        while (index != -1) {\n            count += 1;\n            index = string.indexOf(substring, index + 1);\n        }\n        return count;",
        "grade-132": {
            "execution": 1
        },
        "8": "int total = 0;\n        for (int i = 0; i < string.length(); i++) {\n            if (string.substring(i).startsWith(substring)) {\n                total++;\n            }\n        }\n        return total;",
        "grade-8": {
            "execution": 1
        },
        "7": "int number_of_times = 0;\n        int step = substring.length();\n        while (string.contains(substring)) {\n            string = string.substring(string.indexOf(substring) + step);\n            number_of_times++;\n        }\n        return number_of_times;",
        "grade-7": {
            "execution": 0
        },
        "26": "int count = 0;\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == substring.charAt(0)) {\n                if (string.substring(i, i + substring.length()).equals(substring)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
        "grade-26": {
            "execution": 0
        },
        "63": "int n = string.length();\n        int m = substring.length();\n        int result = 0;\n        for (int i = 0; i < n; i++) {\n            if (string.substring(i, i + m).equals(substring)) {\n                result++;\n            }\n        }\n        return result;",
        "grade-63": {
            "execution": 0
        },
        "69": "int occurences = 0;\n        int fromIndex = 0;\n        while (fromIndex < string.length()) {\n            int index = string.indexOf(substring, fromIndex);\n            if (index == -1) {\n                break;\n            }\n            occurences++;\n            fromIndex = index + 1;\n        }\n        return occurences;",
        "grade-69": {
            "execution": 1
        },
        "163": "int count = 0;\n        for (int i = 0; i < string.length(); ++i) {\n            if (string.substring(i).startsWith(substring)) {\n                ++count;\n            }\n        }\n        return count;",
        "grade-163": {
            "execution": 1
        },
        "182": "int cnt = 0;\n        for (int i = 0; i < string.length(); i++) {\n            int index = string.indexOf(substring, i);\n            if (index == -1) {\n                break;\n            }\n            cnt++;\n            i = index;\n        }\n        return cnt;",
        "grade-182": {
            "execution": 1
        },
        "57": "if (string.isEmpty() || substring.isEmpty()) {\n            return 0;\n        }\n\n        // Guard against substrings of length > string length.\n        int maxLength = string.length() - substring.length() + 1;\n        int count = 0;\n        for (int i = 0; i < maxLength; i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                count++;\n            }\n        }\n        return count;",
        "grade-57": {
            "execution": 1
        },
        "131": "if (string.equals(\"\") || substring.equals(\"\")) {\n            return 0;\n        }\n        int occurrences = 0;\n        for (int i = 0; i < string.length(); i++) {\n            if (string.substring(i).startsWith(substring)) {\n                occurrences++;\n            }\n        }\n        return occurrences;",
        "grade-131": {
            "execution": 1
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    // numbers in the array will be randomly ordered. Your task is to determine if\n    // it is possible to get an array sorted in non-decreasing order by performing \n    // the following operation on the given array:\n    // You are allowed to perform right shift operation any number of times.\n    // One right shift operation means shifting all elements of the array by one\n    // position in the right direction. The last element of the array will be moved to\n    // the starting position in the array i.e. 0th index. \n    // If it is possible to obtain the sorted array by performing the above operation\n    // then return True else return False.\n    // If the given array is empty then return True.\n    // Note: The given list is guaranteed to have unique elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n    // Explanation: By performin 2 right shift operations, non-decreasing order can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4, 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing order for the given\n    // array by performing any number of right shift operations.\n    public static boolean moveOneBall(ArrayList<Integer> arr) {\n",
        "snippet": [
            "        if (arr.size() == 0) {\n            return true;\n        }\n        List<Integer> sorted_arr = new ArrayList<>(arr);\n        Collections.sort(sorted_arr);\n\n        int min_value = Collections.min(arr);\n        int min_index = arr.indexOf(min_value);\n        List<Integer> my_arr = new ArrayList<>(arr.subList(min_index, arr.size()));\n        my_arr.addAll(arr.subList(0, min_index));\n        for (int i = 0; i < arr.size(); i++) {\n            if (my_arr.get(i) != sorted_arr.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"
        ],
        "simplified": "We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The numbers in the array will be randomly ordered. Your task is to determine if it is possible to get an array sorted in non-decreasing order by performing the following operation on the given array: You are allowed to perform right shift operation any number of times. One right shift operation means shifting all elements of the array by one position in the right direction. The last element of the array will be moved to the starting position in the array i.e. 0th index. If it is possible to obtain the sorted array by performing the above operation then return True else return False. If the given array is empty then return True. Note: The given list is guaranteed to have unique elements. For",
        "task_id": "109",
        "176": "int c = 0;\n        int l = arr.size();\n        if (l < 2) return true;\n        ArrayList<Integer> p = (ArrayList<Integer>) arr.clone();\n        Collections.sort(p);\n        for (int i = 0; i < l; i++) {\n            if (arr.get(i) != p.get(i)) c++;\n        }\n        return c < 3;",
        "grade-176": {
            "execution": 0
        },
        "28": "int n = arr.size();\n        if (n == 0) {\n            return true;\n        }\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = arr.get(i);\n        }\n        for (int i = 0; i < n; i++) {\n            if (a[i] == i + 1) {\n                continue;\n            }\n            a[i] = a[a[i] - 1];\n            a[a[i] - 1] = a[i];\n            i--;\n        }\n        for (int i = 0; i < n; i++) {\n            if (a[i] != i + 1) {\n                return false;\n            }\n        }\n        return true;",
        "grade-28": {
            "execution": 0
        },
        "6": "ArrayList<Integer> copy = new ArrayList<>(arr);\n        Collections.sort(copy);\n        int len = arr.size();\n        for (int i = 0; i < len; i++) {\n            if (arr.equals(copy)) {\n                return true;\n            }\n            int end = arr.get(len - 1);\n            for (int j = len - 1; j > 0; j--) {\n                arr.set(j, arr.get(j - 1));\n            }\n            arr.set(0, end);\n        }\n        return false;",
        "grade-6": {
            "execution": 0
        },
        "76": "// arr.add(arr.remove(0));\n        return false;",
        "grade-76": {
            "execution": 0
        },
        "68": "if (arr.size() < 2) return true;\n        int min = arr.get(0);\n        int idx = 0;\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < min) {\n                min = arr.get(i);\n                idx = i;\n            }\n        }\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) < min) return false;\n        }\n        return true;",
        "grade-68": {
            "execution": 0
        },
        "62": "return Arrays.asList(arr).stream().allMatch(i -> i > 0);",
        "grade-62": {
            "execution": 0
        },
        "35": "ArrayList<Integer> arr_sorted = new ArrayList<Integer>(arr);\n        Collections.sort(arr_sorted);\n        int moves = 0;\n        for (int i = arr.size() - 1; i >= 0; i--) {\n            if (arr.get(i) != arr_sorted.get(i)) {\n                moves++;\n            }\n        }\n        if (moves == 1) {\n            return true;\n        }\n        return false;",
        "grade-35": {
            "execution": 0
        },
        "26": "throw new UnsupportedOperationException(\"Unimplemented\");",
        "grade-26": {
            "execution": 0
        },
        "188": "if (arr.size() <= 1) return true;\n        ArrayList<Integer> _copy = new ArrayList<Integer>(arr);\n        Collections.sort(_copy);\n        if (arr.equals(_copy)) return true;\n        int count = 0;\n        while (count < arr.size()) {\n            Integer e = arr.remove(arr.size() - 1);\n            arr.add(0, e);\n            if (arr.equals(_copy)) return true;\n            count++;\n        }\n        return false;",
        "grade-188": {
            "execution": 1
        },
        "149": "if (arr.size() <= 1) {\n            return true;\n        }\n        // We store the array in a list so we can rotate it.\n        List<Integer> list = new ArrayList<Integer>(arr);\n        int max = Collections.max(list);\n        for (int i = 0; i < list.size(); i++) {\n            int temp = Collections.max(list);\n            if (temp < max) {\n                return false;\n            }\n            max = temp;\n            // Rotate list\n            Collections.rotate(list, 1);\n        }\n        return true;",
        "grade-149": {
            "execution": 0
        },
        "22": "int n = arr.size();\n        int[] count = new int[n];\n        for (int i = 0; i < n; i++) {\n            if (arr.get(i) > n) return false;\n            count[arr.get(i) - 1]++;\n        }\n        for (int i = 0; i < n; i++) {\n            if (count[i] > 1) return false;\n        }\n        return true;",
        "grade-22": {
            "execution": 0
        },
        "161": "// use a priority queue\n        int[] count = new int[arr.size()];\n        PriorityQueue<Integer> pq = new PriorityQueue<>();\n        for (int i : arr) {\n            pq.add(i);\n        }\n        for (int i = 0; i < arr.size(); i++) {\n            // get the next smallest element\n            int next = pq.poll();\n            if (arr.get(i) != next) {\n                // if the smallest element is not in the correct position, then\n                // we need to swap\n                for (int j = 0; j < arr.size(); j++) {\n                    if (arr.get(j) == next) {\n                        // swap the elements\n                        int temp = arr.get(i);\n                        arr.set(i, arr.get(j));\n                        arr.set(j, temp);\n                        count[j]++;\n                        // if the element has already been swapped twice, then\n                        // it is not possible to sort the array\n                        if (count[j] == 2) {\n                            return false;\n                        }\n                        break;\n                    }\n                }\n            }\n        }\n        return true;",
        "grade-161": {
            "execution": 0
        },
        "116": "ArrayList<Integer> clone = new ArrayList<Integer>(arr);\n        Collections.sort(clone);\n        return clone.equals(arr);",
        "grade-116": {
            "execution": 0
        },
        "8": "if (arr.size() == 0) {\n            return true;\n        }\n        ArrayList<Integer> copy = new ArrayList<Integer>(arr);\n        Collections.sort(copy);\n        if (copy.equals(arr)) {\n            return true;\n        }\n        for (int i = 0; i < arr.size(); i++) {\n            int t = arr.remove(0);\n            arr.add(t);\n            Collections.sort(arr);\n            if (arr.equals(copy)) {\n                return true;\n            }\n        }\n        return false;",
        "grade-8": {
            "execution": 0
        },
        "7": "if (arr.size() < 2) {\n            return true;\n        }\n        int indexOfSmallest = arr.indexOf(Collections.min(arr));\n        if (indexOfSmallest != 0) {\n            int indexOfSmallestAfterShift = indexOfSmallest - 1;\n            Collections.rotate(arr, indexOfSmallestAfterShift);\n        }\n        for (int i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                return false;\n            }\n        }\n        return true;",
        "grade-7": {
            "execution": 1
        },
        "23": "int n = arr.size();\n        int[] ts = new int[n];\n        ts[0] = arr.get(0);\n        for (int i = 1; i < n; i++) {\n            ts[i] = ts[i - 1] + arr.get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            if (ts[i] < ts[i - 1]) {\n                return false;\n            }\n        }\n        return true;",
        "grade-23": {
            "execution": 0
        },
        "60": "if (arr.size() == 0) return true;\n        int min = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            int elem = arr.get(i);\n            if (elem >= min) {\n                min = elem;\n            } else {\n                return false;\n            }\n        }\n        return true;",
        "grade-60": {
            "execution": 0
        },
        "65": "if (arr.size() == 0) return true;\n        ArrayList<Integer> minima = new ArrayList<Integer>();\n        minima.add(0);\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(minima.get(minima.size() - 1)))\n                minima.add(i);\n        }\n        if (minima.size() == 1) return true;\n        for (int i = 1; i < minima.size(); i++) {\n            if (minima.get(i) - minima.get(i - 1) != 1) return false;\n        }\n        if (minima.get(minima.size() - 1) == arr.size() - 1) return true;\n        return false;",
        "grade-65": {
            "execution": 0
        },
        "139": "// Your code goes here.\n        return true;",
        "grade-139": {
            "execution": 0
        },
        "164": "return arr.isEmpty() || arr.get(0) <= arr.get(arr.size() - 1);",
        "grade-164": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a dictionary, return True if all keys are strings in lower \n    // case or all keys are strings in upper case, else return False.\n    // The function should return False is the given dictionary is empty.\n    // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    public static boolean checkDictCase(HashMap<String,String> dict) {\n",
        "snippet": [
            "        if (dict.isEmpty()) {\n            return false;\n        }\n        String state = \"start\";\n        for (Map.Entry entry : dict.entrySet()) {\n            if (!(entry.getKey() instanceof String key)) {\n                state = \"mixed\";\n                break;\n            }\n            boolean is_upper = true, is_lower = true;\n            for (char c : key.toCharArray()) {\n                if (Character.isLowerCase(c)) {\n                    is_upper = false;\n                } else if (Character.isUpperCase(c)) {\n                    is_lower = false;\n                } else {\n                    is_upper = false;\n                    is_lower = false;\n                }\n            }\n            if (state.equals(\"start\")) {\n                if (is_upper) {\n                    state = \"upper\";\n                } else if (is_lower) {\n                    state = \"lower\";\n                } else {\n                    break;\n                }\n            } else if ((state.equals(\"upper\") && !is_upper) || (state.equals(\"lower\") && !is_lower)) {\n                state = \"mixed\";\n                break;\n            }\n        }\n        return state.equals(\"upper\") || state.equals(\"lower\");\n    }\n}"
        ],
        "simplified": "Given a dictionary, return True if all keys are strings in lower case or all keys are strings in upper case, else return False. The function should return False is the given dictionary is empty.",
        "task_id": "95",
        "194": "boolean firstIsUpper = false;\n        boolean firstIsLower = false;\n        Set<String> firstKeys = dict.keySet();\n        if (firstKeys.size() > 0) {\n            String firstKey = firstKeys.toArray(new String[0])[0];\n            firstIsUpper = firstKey.toUpperCase().equals(firstKey);\n            firstIsLower = firstKey.toLowerCase().equals(firstKey);\n        }\n        for (String key : dict.keySet()) {\n            if (firstIsUpper && !key.toUpperCase().equals(key)) {\n                return false;\n            }\n            if (firstIsLower && !key.toLowerCase().equals(key)) {\n                return false;\n            }\n        }\n        return true;",
        "grade-194": {
            "execution": 0
        },
        "32": "String x = \"\";\n        String y = \"\";\n        if (dict.isEmpty()) {\n            return false;\n        }\n        for (String key : dict.keySet()) {\n            x = key;\n            break;\n        }\n        for (String key : dict.keySet()) {\n            y = key;\n            break;\n        }\n        if (x.toUpperCase().equals(x) && y.toUpperCase().equals(y)) {\n            return true;\n        }\n        else if (x.toLowerCase().equals(x) && y.toLowerCase().equals(y)) {\n            return true;\n        }\n        else {\n            return false;\n        }",
        "grade-32": {
            "execution": 0
        },
        "6": "// TODO: write your code here.\n        return false;",
        "grade-6": {
            "execution": 0
        },
        "85": "String [] d = dict.keySet().toArray(new String[0]);\n        for (int i = 0; i < d.length; i++) {\n            if (Character.isLowerCase(d[i].charAt(0))) {\n                for (int j = i; j < d.length; j++) {\n                    if (Character.isUpperCase(d[j].charAt(0))) {\n                        return false;\n                    }\n                }\n            } else {\n                for (int j = i; j < d.length; j++) {\n                    if (Character.isLowerCase(d[j].charAt(0))) {\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;",
        "grade-85": {
            "execution": 0
        },
        "76": "if (dict.isEmpty()) return false;\n        boolean lower = true;\n        boolean upper = true;\n        for (String k : dict.keySet()) {\n            if (k.length() == 0) return false;\n            if (Character.isLowerCase(k.charAt(0))) {\n                upper = false;\n            } else {\n                lower = false;\n            }\n        }\n        return lower || upper;",
        "grade-76": {
            "execution": 0
        },
        "68": "if (dict.isEmpty()) {\n            return false;\n        }\n        String firstKey = dict.keySet().iterator().next();\n        if (Character.isLowerCase(firstKey.charAt(0))) {\n            for (String key : dict.keySet()) {\n                if (!key.equals(key.toLowerCase())) {\n                    return false;\n                }\n            }\n        } else {\n            for (String key : dict.keySet()) {\n                if (!key.equals(key.toUpperCase())) {\n                    return false;\n                }\n            }\n        }\n        return true;",
        "grade-68": {
            "execution": 0
        },
        "41": "// Write your code here.\n        // return true;\n        if (dict.size()==0) {\n            return false;\n        }\n        int lowerCount = 0;\n        int upperCount = 0;\n        Set<String> keys = dict.keySet();\n        for (String key : keys) {\n            if (key.equals(key.toLowerCase())) {\n                lowerCount++;\n            } else if (key.equals(key.toUpperCase())) {\n                upperCount++;\n            }\n        }\n        if (lowerCount == dict.size() || upperCount == dict.size()) {\n            return true;\n        }\n        return false;",
        "grade-41": {
            "execution": 0
        },
        "29": "return dict.keySet().stream().allMatch( x -> x.equals(x.toLowerCase()) ) ||\n               dict.keySet().stream().allMatch( x -> x.equals(x.toUpperCase()) );",
        "grade-29": {
            "execution": 0
        },
        "165": "String [] values = new String[2];\n        for (String key : dict.keySet()) {\n            String value = dict.get(key);\n            if (key.equals(key.toLowerCase())) {\n                values[0] = key;\n            } else if (key.equals(key.toUpperCase())) {\n                values[1] = key;\n            } else {\n                return false;\n            }\n        }\n        return values[0] != null || values[1] != null;",
        "grade-165": {
            "execution": 0
        },
        "25": "boolean lowerCase = true;\n        boolean upperCase = true;\n        if (dict.size() == 0) {\n            return false;\n        }\n        for (Map.Entry<String,String> entry : dict.entrySet()) {\n            if (entry.getKey().toLowerCase().equals(entry.getKey())) {\n                upperCase = false;\n            }\n            if (entry.getKey().toUpperCase().equals(entry.getKey())) {\n                lowerCase = false;\n            }\n        }\n        return (lowerCase || upperCase);",
        "grade-25": {
            "execution": 0
        },
        "178": "// Your code goes here\n        boolean upperCase = true;\n        boolean lowerCase = true;\n        for (String key : dict.keySet()) {\n            if (!key.equals(key.toUpperCase())) {\n                upperCase = false;\n            }\n            if (!key.equals(key.toLowerCase())) {\n                lowerCase = false;\n            }\n        }\n        return upperCase || lowerCase;",
        "grade-178": {
            "execution": 0
        },
        "128": "if (dict.isEmpty()) {\n            return false;\n        }\n        boolean all_upper = true;\n        boolean all_lower = true;\n        for (String k : dict.keySet()) {\n            if (Character.isUpperCase(k.charAt(0))) {\n                all_lower = false;\n            } else {\n                all_upper = false;\n            }\n        }\n        return (all_upper || all_lower);",
        "grade-128": {
            "execution": 0
        },
        "9": "if (dict.isEmpty()) {\n            return false;\n        }\n\n        // get the first key and determine if it is uppercase or lowercase\n        String firstKey = dict.keySet().iterator().next();\n        boolean isFirstUpper = firstKey.toUpperCase().equals(firstKey);\n\n        // check all the keys to determine if they all match the first key\n        for (String key : dict.keySet()) {\n            if (isFirstUpper && !key.toUpperCase().equals(key)) {\n                return false;\n            } else if (!isFirstUpper && !key.toLowerCase().equals(key)) {\n                return false;\n            }\n        }\n\n        return true;",
        "grade-9": {
            "execution": 0
        },
        "8": "return false;",
        "grade-8": {
            "execution": 0
        },
        "26": "// use only Java's standard library classes, no extra packages\n        return false;",
        "grade-26": {
            "execution": 0
        },
        "65": "return dict.keySet().stream().allMatch(s -> Character.isUpperCase(s.charAt(0))) ||\n               dict.keySet().stream().allMatch(s -> Character.isLowerCase(s.charAt(0)));",
        "grade-65": {
            "execution": 0
        },
        "71": "// TODO: your code here!\n        return false;",
        "grade-71": {
            "execution": 0
        },
        "153": "if (dict.isEmpty()) {\n            return false;\n        }\n\n        List<Boolean> caseList = new ArrayList<>();\n        for (String key : dict.keySet()) {\n            caseList.add(Character.isUpperCase(key.charAt(0)));\n        }\n\n        HashSet<Boolean> caseSet = new HashSet<>(caseList);\n        if (caseSet.size() > 1) {\n            return false;\n        }\n\n        return true;",
        "grade-153": {
            "execution": 0
        },
        "182": "// Your code here\n        return false;",
        "grade-182": {
            "execution": 0
        },
        "170": "boolean allUpper = true;\n        boolean allLower = true;\n        for (String s : dict.keySet()) {\n            if (s.equals(s.toUpperCase()))\n                allLower = false;\n            else\n                allUpper = false;\n        }\n        return dict.size() != 0 && (allUpper || allLower);",
        "grade-170": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return list of all prefixes from shortest to longest of the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n    public static ArrayList<String> allPrefixes(String string) {\n",
        "snippet": [
            "        List<String> result = new ArrayList<>();\n\n        for (int i = 1; i <= string.length(); i++) {\n            result.add(string.substring(0, i));\n        }\n        return result;\n    }\n}"
        ],
        "simplified": "Return list of all prefixes from shortest to longest of the input string",
        "task_id": "14",
        "139": "ArrayList<String> output = new ArrayList<String>();\n        for (int i = 0; i < string.length(); i++) {\n            output.add(string.substring(0, i + 1));\n        }\n        return output;",
        "grade-139": {
            "execution": 1
        },
        "12": "int N = string.length();\n        ArrayList<String> ret = new ArrayList<String>();\n        for (int i = 0; i < N; i++) {\n            ret.add(string.substring(0, i + 1));\n        }\n        return ret;",
        "grade-12": {
            "execution": 1
        },
        "1": "ArrayList<String> prefixes = new ArrayList<String>();\n        for (int length = 1; length <= string.length(); length++) {\n            prefixes.add(string.substring(0, length));\n        }\n        return prefixes;",
        "grade-1": {
            "execution": 1
        },
        "168": "int prefixSize = string.length();\n        ArrayList<String> prefixes = new ArrayList<String>();\n        while (prefixSize > 0) {\n            prefixes.add(string.substring(0, prefixSize));\n            prefixSize--;\n        }\n        return prefixes;",
        "grade-168": {
            "execution": 0
        },
        "46": "ArrayList<String> res = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            res.add(string.substring(0, i + 1));\n        }\n        return res;",
        "grade-46": {
            "execution": 1
        },
        "36": "ArrayList<String> out = new ArrayList<String>();\n        for (int i = 0; i < string.length(); i++) {\n            out.add(string.substring(0, i + 1));\n        }\n        return out;",
        "grade-36": {
            "execution": 1
        },
        "35": "ArrayList<String> result = new ArrayList<String>();\n        // Add each substring of the string from length 1 to length string.length()\n        for (int length = 1; length <= string.length(); length++) {\n            result.add(string.substring(0, length));\n        }\n        return result;",
        "grade-35": {
            "execution": 1
        },
        "13": "int length = string.length();\n        ArrayList<String> res = new ArrayList<String>();\n        for (int i = 1; i <= length; i++) {\n            res.add(string.substring(0, i));\n        }\n        return res;",
        "grade-13": {
            "execution": 1
        },
        "10": "ArrayList<String> allPrefixes = new ArrayList<String>();\n        for (int i = 0; i < string.length(); i++) {\n            allPrefixes.add(string.substring(0, i + 1));\n        }\n        return allPrefixes;",
        "grade-10": {
            "execution": 1
        },
        "113": "return new ArrayList<String>(Arrays.asList(string.split(\"\")));",
        "grade-113": {
            "execution": 0
        },
        "8": "ArrayList<String> list = new ArrayList<String>();\n        for (int i = 0; i < string.length(); i++) {\n            list.add(string.substring(0, i + 1));\n        }\n        return list;",
        "grade-8": {
            "execution": 1
        },
        "132": "// ArrayList<String> prefixes = new ArrayList<String>();\n        ArrayList<String> prefixes = new ArrayList<String>();\n        for (int i = 0; i < string.length(); i++) {\n            prefixes.add(string.substring(0, i + 1));\n        }\n        return prefixes;",
        "grade-132": {
            "execution": 1
        },
        "74": "ArrayList<String> pref = new ArrayList<String>();\n        for (int i = 0; i < string.length(); i++) {\n            pref.add(string.substring(0, i + 1));\n        }\n        return pref;",
        "grade-74": {
            "execution": 1
        },
        "2": "ArrayList<String> result = new ArrayList<String>();\n        for (int i = 0; i < string.length(); i++) {\n            result.add(string.substring(0, i + 1));\n        }\n        return result;",
        "grade-2": {
            "execution": 1
        },
        "184": "int len = string.length();\n        ArrayList<String> result = new ArrayList<String>();\n        for (int i = 0; i < len; i++) {\n            result.add(string.substring(0, i + 1));\n        }\n        return result;",
        "grade-184": {
            "execution": 1
        },
        "142": "ArrayList<String> toReturn = new ArrayList<String>();\n        for (int i = 0; i < string.length(); i++) {\n            toReturn.add(string.substring(0, i + 1));\n        }\n        return toReturn;",
        "grade-142": {
            "execution": 1
        },
        "34": "ArrayList<String> ret = new ArrayList<String>();\n        int len = string.length();\n        for (int i = 0; i < len; i++) {\n            ret.add(string.substring(0, i + 1));\n        }\n        return ret;",
        "grade-34": {
            "execution": 1
        },
        "153": "ArrayList<String> output = new ArrayList<String>();\n        for (int index = 0; index < string.length(); index++) {\n            output.add(string.substring(0, index + 1));\n        }\n        return output;",
        "grade-153": {
            "execution": 1
        },
        "94": "ArrayList<String> prefixes = new ArrayList<String>();\n        int length = string.length();\n        for (int i = 1; i <= length; i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        return prefixes;",
        "grade-94": {
            "execution": 1
        },
        "196": "ArrayList<String> all_prefixes = new ArrayList<String>();\n        for (int i = 0; i < string.length(); i++) {\n            all_prefixes.add(string.substring(0, i + 1));\n        }\n        return all_prefixes;",
        "grade-196": {
            "execution": 1
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given list of numbers (of at least two elements), apply a linear transform to that list,\n    // such that the smallest number will become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float> rescaleToUnit(ArrayList<Float> numbers) {\n",
        "snippet": [
            "        double min_number = Collections.min(numbers);\n        double max_number = Collections.max(numbers);\n        List<Double> result = new ArrayList<>();\n        for (double x : numbers) {\n            result.add((x - min_number) / (max_number - min_number));\n        }\n        return result;\n    }\n}"
        ],
        "simplified": "Given list of numbers (of at least two elements), apply a linear transform to that list, such that the smallest number will become 0 and the largest will become 1",
        "task_id": "21",
        "168": "Float max = numbers.stream().max(Float::compare).get();\n        Float min = numbers.stream().min(Float::compare).get();\n        return numbers.stream().map(e -> (e - min) / (max - min)).collect(Collectors.toCollection(ArrayList::new));",
        "grade-168": {
            "execution": 1
        },
        "29": "Float min = Collections.min(numbers);\n        Float max = Collections.max(numbers);\n        ArrayList<Float> rescaled = new ArrayList<Float>();\n        for (Float number : numbers) {\n            Float newNumber = (number - min) / (max - min);\n            rescaled.add(newNumber);\n        }\n        return rescaled;",
        "grade-29": {
            "execution": 1
        },
        "6": "ArrayList<Float> result = new ArrayList<Float>();\n        Float min = Collections.min(numbers);\n        Float max = Collections.max(numbers);\n        for (Float number : numbers) {\n            Float normalizedNumber = (number - min) / (max - min);\n            result.add(normalizedNumber);\n        }\n        return result;",
        "grade-6": {
            "execution": 1
        },
        "195": "// find the smallest number\n        float min = numbers.get(0);\n        for (float num : numbers) {\n            if (num < min) {\n                min = num;\n            }\n        }\n        // find the largest number\n        float max = numbers.get(0);\n        for (float num : numbers) {\n            if (num > max) {\n                max = num;\n            }\n        }\n        // scale each number to be between 0 and 1\n        ArrayList<Float> result = new ArrayList<Float>();\n        for (float num : numbers) {\n            result.add((num - min) / (max - min));\n        }\n        return result;",
        "grade-195": {
            "execution": 1
        },
        "71": "Float max = numbers.stream().max(Float::compare).get();\n        Float min = numbers.stream().min(Float::compare).get();\n        return (ArrayList<Float>) numbers.stream().map(x -> (x - min) / (max - min)).collect(Collectors.toList());",
        "grade-71": {
            "execution": 1
        },
        "63": "float max = numbers.stream().max(Float::compare).get();\n        float min = numbers.stream().min(Float::compare).get();\n        float transform = 0.0f;\n        float divisor = (max - min);\n        ArrayList<Float> out = new ArrayList<Float>();\n        for (Float i : numbers) {\n            transform = ((i - min) / divisor);\n            out.add(transform);\n        }\n        return out;",
        "grade-63": {
            "execution": 1
        },
        "58": "float min = numbers.get(0);\n        float max = numbers.get(0);\n        for (int i = 1; i < numbers.size(); i++) {\n            float number = numbers.get(i);\n            if (number < min) {\n                min = number;\n            }\n            if (number > max) {\n                max = number;\n            }\n        }\n        if (min == max) {\n            return new ArrayList<>(Collections.nCopies(numbers.size(), 0.0f));\n        }\n        float ratio = 1 / (max - min);\n        ArrayList<Float> result = new ArrayList<>(numbers.size());\n        for (int i = 0; i < numbers.size(); i++) {\n            float number = numbers.get(i);\n            result.add((number - min) * ratio);\n        }\n        return result;",
        "grade-58": {
            "execution": 1
        },
        "36": "ArrayList<Float> list = new ArrayList<Float>();\n        float max = Collections.max(numbers);\n        float min = Collections.min(numbers);\n        for (float number : numbers) {\n            list.add((number - min) / (max - min));\n        }\n        return list;",
        "grade-36": {
            "execution": 1
        },
        "193": "if (numbers.size() < 2) {\n            throw new IllegalArgumentException(\"List must contain at least two elements\");\n        }\n        Float min = Collections.min(numbers);\n        Float max = Collections.max(numbers);\n        if (min.equals(max)) {\n            throw new IllegalArgumentException(\"Min and max values must not be equal\");\n        }\n        ArrayList<Float> rescaled = new ArrayList<>();\n        for (Float num : numbers) {\n            Float rescaledNum = (num - min) / (max - min);\n            rescaled.add(rescaledNum);\n        }\n        return rescaled;",
        "grade-193": {
            "execution": 1
        },
        "27": "Float min = Collections.min(numbers);\n        Float max = Collections.max(numbers);\n        ArrayList<Float> result = new ArrayList<Float>();\n        for (Float number : numbers) {\n            result.add((number - min) / (max - min));\n        }\n        return result;",
        "grade-27": {
            "execution": 1
        },
        "178": "ArrayList<Float> transformed = new ArrayList<Float>();\n        float maximum = numbers.get(0);\n        float minimum = numbers.get(0);\n        for (int i = 0; i < numbers.size(); i++) {\n            if (numbers.get(i) > maximum) {\n                maximum = numbers.get(i);\n            }\n            if (numbers.get(i) < minimum) {\n                minimum = numbers.get(i);\n            }\n        }\n        for (int i = 0; i < numbers.size(); i++) {\n            transformed.add((numbers.get(i) - minimum) / (maximum - minimum));\n        }\n        return transformed;",
        "grade-178": {
            "execution": 1
        },
        "143": "float largest = numbers.get(0);\n        float smallest = numbers.get(0);\n        for (float number : numbers) {\n            if (number > largest) {\n                largest = number;\n            }\n            if (number < smallest) {\n                smallest = number;\n            }\n        }\n        float diff = largest - smallest;\n        ArrayList<Float> output = new ArrayList<Float>();\n        for (float number : numbers) {\n            output.add((number - smallest) / diff);\n        }\n        return output;",
        "grade-143": {
            "execution": 1
        },
        "23": "ArrayList<Float> ans = new ArrayList<Float>();\n        float max = Collections.max(numbers);\n        float min = Collections.min(numbers);\n        for (float n : numbers) {\n            ans.add((n - min) / (max - min));\n        }\n        return ans;",
        "grade-23": {
            "execution": 1
        },
        "156": "float max = Collections.max(numbers);\n        float min = Collections.min(numbers);\n        float range = max - min;\n        return numbers.stream().map(n -> (n - min) / range).collect(Collectors.toCollection(ArrayList::new));",
        "grade-156": {
            "execution": 1
        },
        "110": "float maxNumber = Collections.max(numbers);\n        float minNumber = Collections.min(numbers);\n        float maxMinusMin = maxNumber - minNumber;\n        ArrayList<Float> rescaled = new ArrayList<Float>();\n        for (float number : numbers) {\n            rescaled.add((number - minNumber) / maxMinusMin);\n        }\n        return rescaled;",
        "grade-110": {
            "execution": 1
        },
        "8": "float min = Float.MAX_VALUE;\n        float max = Float.MIN_VALUE;\n        for (float number : numbers) {\n            if (number < min) {\n                min = number;\n            }\n            if (number > max) {\n                max = number;\n            }\n        }\n        for (int i = 0; i < numbers.size(); i++) {\n            numbers.set(i, (numbers.get(i) - min) / (max - min));\n        }\n        return numbers;",
        "grade-8": {
            "execution": 1
        },
        "7": "ArrayList<Float> rescaled = new ArrayList<Float>();\n        float min = Float.MAX_VALUE;\n        float max = Float.MIN_VALUE;\n        for (float number : numbers) {\n            if (number < min) {\n                min = number;\n            }\n            if (number > max) {\n                max = number;\n            }\n        }\n        float delta = max - min;\n        if (delta == 0) {\n            return numbers;\n        }\n        for (float number : numbers) {\n            rescaled.add((number - min) / delta);\n        }\n        return rescaled;",
        "grade-7": {
            "execution": 1
        },
        "24": "float min = numbers.get(0);\n        float max = numbers.get(0);\n        for (float val : numbers) {\n            if (val < min) {\n                min = val;\n            }\n            if (val > max) {\n                max = val;\n            }\n        }\n        if (min == max) {\n            System.out.println(\"Warning: all numbers are the same\");\n            return numbers;\n        }\n        for (int i = 0; i < numbers.size(); i++) {\n            numbers.set(i, (numbers.get(i) - min) / (max - min));\n        }\n        return numbers;",
        "grade-24": {
            "execution": 1
        },
        "56": "float max = Collections.max(numbers);\n        float min = Collections.min(numbers);\n        return numbers.stream().map(x -> (x - min) / (max - min)).collect(Collectors.toCollection(ArrayList::new));",
        "grade-56": {
            "execution": 1
        },
        "60": "float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n        ArrayList<Float> scaled = new ArrayList<Float>();\n        for (float n : numbers) {\n            scaled.add((n - min) / (max - min));\n        }\n        return scaled;",
        "grade-60": {
            "execution": 1
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float> numbers) {\n",
        "snippet": [
            "        double sum = 0.0;\n        for (double num : numbers) {\n            sum += num;\n        }\n        double mean = sum / numbers.size();\n        double sum_abs_diff = 0.0;\n        for (double num : numbers) {\n            sum_abs_diff += Math.abs(num - mean);\n        }\n        return sum_abs_diff / numbers.size();\n    }\n}"
        ],
        "simplified": "For a given list of input numbers, calculate Mean Absolute Deviation around the mean of this dataset. Mean Absolute Deviation is the average absolute difference between each element and a centerpoint (mean in this case): MAD = average | x - x_mean |",
        "task_id": "4",
        "169": "float mean = mean(numbers);\n        float sum_absolute_deviations = 0;\n        for (Float f : numbers) {\n            sum_absolute_deviations += Math.abs(f - mean);\n        }\n        return sum_absolute_deviations / numbers.size();",
        "grade-169": {
            "execution": 0
        },
        "28": "float mean = 0;\n        for (Float i : numbers) {\n            mean += i;\n        }\n        mean /= numbers.size();\n        float meanAbsoluteDeviation = 0;\n        for (Float i : numbers) {\n            meanAbsoluteDeviation += Math.abs(i - mean);\n        }\n        meanAbsoluteDeviation /= numbers.size();\n        return meanAbsoluteDeviation;",
        "grade-28": {
            "execution": 1
        },
        "6": "// Your code here!\n        float mean = (float) 0.0;\n        float mad = (float) 0.0;\n        float absoluteDifference = (float) 0.0;\n        for (int i = 0; i < numbers.size(); i++) {\n            mean += numbers.get(i);\n        }\n        mean = mean / numbers.size();\n        for (int i = 0; i < numbers.size(); i++) {\n            absoluteDifference += Math.abs(numbers.get(i) - mean);\n        }\n        mad = absoluteDifference / numbers.size();\n        return mad;",
        "grade-6": {
            "execution": 1
        },
        "196": "float avg = 0;\n        float numerator = 0;\n        float denominator = numbers.size();\n        for (int i = 0; i < numbers.size(); i++) {\n            avg += numbers.get(i);\n        }\n        avg = avg / denominator;\n        for (int i = 0; i < numbers.size(); i++) {\n            numerator += Math.abs(numbers.get(i) - avg);\n        }\n        numerator = numerator / denominator;\n        return numerator;",
        "grade-196": {
            "execution": 1
        },
        "71": "// TODO: implement this method\n        return -1;",
        "grade-71": {
            "execution": 0
        },
        "63": "// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n        // 1.0\n        float sum = 0.0f;\n        for (float i : numbers) {\n            sum += i;\n        }\n        float mean = sum / numbers.size();\n        float sum_of_diffs = 0.0f;\n        for (float i : numbers) {\n            sum_of_diffs += Math.abs(i - mean);\n        }\n        return sum_of_diffs / numbers.size();",
        "grade-63": {
            "execution": 1
        },
        "58": "float mean = mean(numbers);\n        float sum = 0;\n        for (float num : numbers) {\n            sum += Math.abs(num - mean);\n        }\n        return sum / numbers.size();",
        "grade-58": {
            "execution": 0
        },
        "35": "float sum = 0;\n        float mean = 0;\n        float mad = 0;\n        float abs = 0;\n        for (float x : numbers) {\n            sum += x;\n        }\n        mean = sum / numbers.size();\n        for (float x : numbers) {\n            abs += Math.abs(x - mean);\n        }\n        mad = abs / numbers.size();\n        return mad;",
        "grade-35": {
            "execution": 1
        },
        "195": "float sum = numbers.stream().reduce(0.0f, (acc, x) -> acc + x);\n        float mean = sum / numbers.size();\n        float sum_squared_differences = numbers.stream().reduce(0.0f, (acc, x) -> acc + (x - mean) * (x - mean));\n        float mean_of_squared_differences = sum_squared_differences / numbers.size();\n        return (float) Math.sqrt(mean_of_squared_differences);",
        "grade-195": {
            "execution": 0
        },
        "26": "// Insert code here!\n        float total = 0.0f;\n        float mean = numbers.stream().reduce(0.0f, (subtotal, element) -> subtotal + element) / numbers.size();\n        for (float num : numbers) {\n            total += Math.abs(num - mean);\n        }\n        return total / numbers.size();",
        "grade-26": {
            "execution": 1
        },
        "180": "// Calculate mean of this dataset\n        float sum = 0;\n        for (Float n : numbers) {\n            sum += n;\n        }\n        float mean = sum / numbers.size();\n        // Calculate absolute difference between each element and mean\n        ArrayList<Float> absoluteDifferences = new ArrayList<Float>();\n        for (Float n : numbers) {\n            absoluteDifferences.add(Math.abs(n - mean));\n        }\n        // Calculate mean of the absolute differences\n        float MAD = 0;\n        for (Float n : absoluteDifferences) {\n            MAD += n;\n        }\n        MAD = MAD / absoluteDifferences.size();\n        return MAD;",
        "grade-180": {
            "execution": 1
        },
        "143": "float mean = numbers.stream().reduce(0.0f, (a, b) -> a + b);\n        mean /= numbers.size();\n        float mad = 0.0f;\n        for (Float number : numbers) {\n            mad += Math.abs(number - mean);\n        }\n        mad /= numbers.size();\n        return mad;",
        "grade-143": {
            "execution": 1
        },
        "22": "float mean = numbers.stream().reduce(0.0f, (a, b) -> a + b) / numbers.size();\n        return numbers.stream().map(n -> Math.abs(n - mean)).reduce(0.0f, (a, b) -> a + b) / numbers.size();",
        "grade-22": {
            "execution": 1
        },
        "157": "float sum = 0;\n        float mean = mean(numbers);\n        for (float f : numbers) {\n            sum += Math.abs(f - mean);\n        }\n        return sum / numbers.size();",
        "grade-157": {
            "execution": 0
        },
        "110": "float mean = numbers.stream().reduce(0f, (a, b) -> a + b)/numbers.size();\n        float sum = numbers.stream().map(a -> Math.abs(a - mean)).reduce(0f, (a, b) -> a + b);\n        return sum/numbers.size();",
        "grade-110": {
            "execution": 1
        },
        "8": "// calculate mean\n        float mean = 0;\n        for (float number : numbers)\n            mean += number;\n        mean /= numbers.size();\n        // find absolute differences from mean\n        float sumAbsoluteDifferences = 0;\n        for (float number : numbers)\n            sumAbsoluteDifferences += Math.abs(number - mean);\n        // return average absolute difference\n        return sumAbsoluteDifferences / numbers.size();",
        "grade-8": {
            "execution": 1
        },
        "7": "float mean = mean(numbers);\n        float deviations_sum = numbers.stream().map(a -> Math.abs(a - mean)).reduce(0.0f, (a, b) -> a + b);\n        return deviations_sum / numbers.size();",
        "grade-7": {
            "execution": 0
        },
        "23": "// Find mean of this dataset\n        float sum = 0.0f;\n        for (float number : numbers) {\n            sum += number;\n        }\n        float mean = sum / numbers.size();\n        // Find mean absolute deviation of this dataset\n        float meanAbsoluteDeviation = 0.0f;\n        for (float number : numbers) {\n            meanAbsoluteDeviation += Math.abs(number - mean);\n        }\n        meanAbsoluteDeviation /= numbers.size();\n        return meanAbsoluteDeviation;",
        "grade-23": {
            "execution": 1
        },
        "55": "return 1.0f;",
        "grade-55": {
            "execution": 0
        },
        "60": "//>>> numbers = [1.0, 2.0, 3.0, 4.0]\n        //>>> numbers_mean = sum(numbers) / len(numbers)\n        //>>> numbers_mean\n        //2.5\n        //>>> numbers_diff = [abs(num - numbers_mean) for num in numbers]\n        //>>> numbers_diff\n        //[1.5, 0.5, 0.5, 1.5]\n        //>>> numbers_mad = sum(numbers_diff) / len(numbers_diff)\n        //>>> numbers_mad\n        //1.0\n        float numbers_mean = 0;\n        for (float number : numbers) {\n            numbers_mean += number;\n        }\n        numbers_mean /= numbers.size();\n        float numbers_mad = 0;\n        for (float number : numbers) {\n            numbers_mad += Math.abs(number - numbers_mean);\n        }\n        numbers_mad /= numbers.size();\n        return numbers_mad;",
        "grade-60": {
            "execution": 1
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> special_factorial(4)\n    // 288\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    public static int specialFactorial(int n) {\n",
        "snippet": [
            "        long fact_i = 1, special_fact = 1;\n        for (int i = 1; i <= n; i++) {\n            fact_i *= i;\n            special_fact *= fact_i;\n        }\n        return special_fact;\n    }\n}"
        ],
        "simplified": "The Brazilian factorial is defined as: brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1! where n > 0",
        "task_id": "139",
        "30": "int brazilianFactorial = 1;\n        for (int i = n; i > 0; i--) {\n            brazilianFactorial *= i;\n        }\n        return brazilianFactorial;",
        "grade-30": {
            "execution": 0
        },
        "6": "if (n == 0) {\n            return 1;\n        }\n        int factorial = 1;\n        for (int i = 1; i <= n; i++) {\n            factorial *= i;\n        }\n        return factorial * specialFactorial(n - 1);",
        "grade-6": {
            "execution": 0
        },
        "81": "// TODO",
        "grade-81": {
            "execution": 0
        },
        "71": "return Arrays.stream(IntStream.rangeClosed(1, n).toArray()).reduce(1, (acc, val) -> acc * val);",
        "grade-71": {
            "execution": 0
        },
        "66": "// Write your code here.",
        "grade-66": {
            "execution": 0
        },
        "39": "int result = 1;\n        for (int i = n; i > 0; i--) {\n            result *= factorial(i);\n        }\n        return result;",
        "grade-39": {
            "execution": 0
        },
        "28": "int result = 1;\n        while (n > 0) {\n            result *= factorial(n);\n            n--;\n        }\n        return result;",
        "grade-28": {
            "execution": 0
        },
        "174": "int ret = n;\n        for (int i = 1; i < n; i++) {\n            ret *= (n - i);\n        }\n        return ret;",
        "grade-174": {
            "execution": 0
        },
        "23": "int prod = 1;\n        for (int i = n; i > 0; i--) {\n            prod *= factorial(i);\n        }\n        return prod;",
        "grade-23": {
            "execution": 0
        },
        "192": "int fact = 1;\n        for (int i = 1; i <= n; i++) {\n            fact *= i;\n        }\n        return fact;",
        "grade-192": {
            "execution": 0
        },
        "127": "// Your code here!",
        "grade-127": {
            "execution": 0
        },
        "9": "// Your code here\n        // Write your code here\n        if (n == 0) {\n            return 1;\n        }\n        int fact = 1;\n        for (int i = 1; i <= n; i++) {\n            fact = fact * i;\n        }\n        return specialFactorial(n - 1) * fact;",
        "grade-9": {
            "execution": 0
        },
        "8": "if (n == 0) {\n            return 1;\n        }\n        int result = 1;\n        for (int i = n; i > 0; i--) {\n            int temp = 1;\n            for (int j = i; j > 0; j--) {\n                temp *= j;\n            }\n            result *= temp;\n        }\n        return result;",
        "grade-8": {
            "execution": 0
        },
        "24": "int a = 1;\n        for (int i = 1; i <= n; i++) {\n            a *= i;\n        }\n        return a;",
        "grade-24": {
            "execution": 0
        },
        "63": "List<BigInteger> factorials = new ArrayList<>();\n        factorials.add(BigInteger.ONE);\n        for (int i = 1; i <= n; i++) {\n            factorials.add(factorials.get(i - 1).multiply(BigInteger.valueOf(i)));\n        }\n        return factorials.stream().reduce(BigInteger.ONE, BigInteger::multiply).intValue();",
        "grade-63": {
            "execution": 0
        },
        "68": "int ret = 1;\n        for (int i = 1; i <= n; i++) {\n            ret *= i;\n        }\n        return ret;",
        "grade-68": {
            "execution": 0
        },
        "157": "int result = 1;\n        while (n > 0) {\n            int tempResult = 1;\n            for (int i = 1; i <= n; i++) {\n                tempResult *= i;\n            }\n            result *= tempResult;\n            n--;\n        }\n        return result;",
        "grade-157": {
            "execution": 0
        },
        "199": "int rv = 1;\n        for (int i = n; i > 0; i--) {\n            rv *= factorial(i);\n        }\n        return rv;",
        "grade-199": {
            "execution": 0
        },
        "182": "if (n < 0) {\n            throw new IllegalArgumentException(\"Input can't be negative.\");\n        }\n        int product = 1;\n        for (int i = n; i > 0; i--) {\n            product *= factorial(i);\n        }\n        return product;",
        "grade-182": {
            "execution": 0
        },
        "57": "int brazilianFactorial = n;\n        for (int i = n-1; i > 0; i--) {\n            brazilianFactorial *= i;\n        }\n        return brazilianFactorial;",
        "grade-57": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns True if the date is valid otherwise False.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n    public static boolean validDate(String date) {\n",
        "snippet": [
            "        try {\n            date = date.strip();\n            String[] dates = date.split(\"-\" );\n            String m = dates[0];\n            while (!m.isEmpty() && m.charAt(0) == '0') {\n                m = m.substring(1);\n            }\n            String d = dates[1];\n            while (!d.isEmpty() && d.charAt(0) == '0') {\n                d = d.substring(1);\n            }\n            String y = dates[2];\n            while (!y.isEmpty() && y.charAt(0) == '0') {\n                y = y.substring(1);\n            }\n            int month = Integer.parseInt(m), day = Integer.parseInt(d), year = Integer.parseInt(y);\n            if (month < 1 || month > 12) {\n                return false;\n            }\n            if (Arrays.asList(1, 3, 5, 7, 8, 10, 12).contains(month) && (day < 1 || day > 31)) {\n                return false;\n            }\n            if (Arrays.asList(4, 6, 9, 11).contains(month) && (day < 1 || day > 30)) {\n                return false;\n            }\n            if (month == 2 && (day < 1 || day > 29)) {\n                return false;\n            }\n            return true;\n        } catch (Exception e) {\n            return false;\n        }\n    }\n}"
        ],
        "simplified": "You have to write a function which validates a given date string and returns True if the date is valid otherwise False. The date is valid if all of the following rules are satisfied: 1. The date string is not empty. 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2. 3. The months should not be less than 1 or higher than 12. 4. The date should be in the format: mm-dd-yyyy",
        "task_id": "124",
        "180": "// TODO: implement me!\n        // If the month is in the range 1-12, and\n        // if the day is in the range 1-30, and\n        // if the year is in the range 1800-9999, then the date is valid.\n        boolean isValid = false;\n        String regex = \"(0?[1-9]|[12][0-9]|3[01])-(0?[1-9]|1[012])-((19|20)\\\\d\\\\d)\";\n        Pattern pattern = Pattern.compile(regex);\n        Matcher matcher = pattern.matcher(date);\n        if (matcher.matches()) {\n            isValid = true;\n        }\n        return isValid;",
        "grade-180": {
            "execution": 0
        },
        "31": "// fill in your code here\n        return false;",
        "grade-31": {
            "execution": 0
        },
        "6": "return false;",
        "grade-6": {
            "execution": 0
        },
        "74": "try {\n            String[] parts = date.split(\"-\");\n            int dd = Integer.parseInt(parts[0]);\n            int mm = Integer.parseInt(parts[1]);\n            if (mm < 1 || mm > 12) return false;\n            int yyyy = Integer.parseInt(parts[2]);\n            int days;\n            switch (mm) {\n                case 1:\n                case 3:\n                case 5:\n                case 7:\n                case 8:\n                case 10:\n                case 12:\n                    days = 31;\n                    break;\n                case 4:\n                case 6:\n                case 9:\n                case 11:\n                    days = 30;\n                    break;\n                case 2:\n                    days = 28;\n                    break;\n                default:\n                    days = 0;\n            }\n            if (dd < 1 || dd > days) return false;\n            return true;\n        } catch (Exception e) {\n            return false;\n        }",
        "grade-74": {
            "execution": 0
        },
        "66": "int[] days = {31,28,31,30,31,30,31,31,30,31,30,31};\n        int[] days_leap = {31,29,31,30,31,30,31,31,30,31,30,31};\n        boolean[] leap_year = {false,false,true,false,true,false,true,false,true,false,true,false};\n        String[] month = {\"\",\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"};\n        String[] day = {\"\",\"1st\",\"2nd\",\"3rd\",\"4th\",\"5th\",\"6th\",\"7th\",\"8th\",\"9th\",\"10th\",\"11th\",\"12th\",\"13th\",\"14th\",\"15th\",\"16th\",\"17th\",\"18th\",\"19th\",\"20th\",\"21st\",\"22nd\",\"23rd\",\"24th\",\"25th\",\"26th\",\"27th\",\"28th\",\"29th\",\"30th\",\"31st\"};\n        String[] week = {\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"};\n        String[] time = {\"millisecond\",\"second\",\"minute\",\"hour\",\"day\",\"week\",\"month\",\"year\"};\n        String[] time_plural = {\"milliseconds\",\"seconds\",\"minutes\",\"hours\",\"days\",\"weeks\",\"months\",\"years\"};\n        String[] time_short = {\"msec\",\"sec\",\"min\",\"hr\",\"day\",\"wk\",\"mth\",\"yr\"};\n        String[] time_short_plural = {\"msecs\",\"secs\",\"mins\",\"hrs\",\"days\",\"wks\",\"mths\",\"yrs\"};\n        int[] year = {2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025,2026,2027,2028,2029,2030,2031,2032,2033,2034,2035,2036,2037,2038,2039,2040,2041,2042,2043,2044,2045,2046,2047,2048,2049,20",
        "grade-66": {
            "execution": 0
        },
        "61": "// write your code here\n        return false;",
        "grade-61": {
            "execution": 0
        },
        "38": "if (date.isEmpty()) {\n            return false;\n        }\n        String[] dateSplit = date.split(\"-\");\n        if (dateSplit.length != 3) {\n            return false;\n        }\n        int[] dateElements = new int[3];\n        for (int i = 0; i < dateSplit.length; i++) {\n            try {\n                dateElements[i] = Integer.parseInt(dateSplit[i]);\n            } catch (NumberFormatException e) {\n                return false;\n            }\n        }\n        if (dateElements[0] < 1 || dateElements[0] > 12) {\n            return false;\n        }\n        if (dateElements[0] == 2) {\n            if (dateElements[1] < 1 || dateElements[1] > 29) {\n                return false;\n            }\n        } else if (dateElements[0] == 1 || dateElements[0] == 3 || dateElements[0] == 5 || dateElements[0] == 7 || dateElements[0] == 8 || dateElements[0] == 10 || dateElements[0] == 12) {\n            if (dateElements[1] < 1 || dateElements[1] > 31) {\n                return false;\n            }\n        } else {\n            if (dateElements[1] < 1 || dateElements[1] > 30) {\n                return false;\n            }\n        }\n        return true;",
        "grade-38": {
            "execution": 1
        },
        "29": "// Try to split the date by '-' and check if the length is 3\n        String[] parts = date.split(\"-\");\n        if (parts.length != 3) {\n            return false;\n        }\n        int month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n        if (day > 31 || day < 1) {\n            return false;\n        }\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        return true;",
        "grade-29": {
            "execution": 0
        },
        "190": "// check that date is a not empty\n        if (date.length() < 10) {\n            return false;\n        }\n        // check format\n        String[] dates = date.split(\"-\");\n        if (dates.length != 3) {\n            return false;\n        }\n        for (String d : dates) {\n            for (char c : d.toCharArray()) {\n                if (!Character.isDigit(c)) {\n                    return false;\n                }\n            }\n        }\n        // check month\n        int month = Integer.parseInt(dates[0]);\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        // check days\n        int days = Integer.parseInt(dates[1]);\n        if (days < 1 || days > 31) {\n            return false;\n        }\n        if (month == 2) {\n            if (days > 29) {\n                return false;\n            }\n        } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (days > 30) {\n                return false;\n            }\n        }\n        // check year\n        int year = Integer.parseInt(dates[2]);\n        if (year < 1950 || year > 2020) {\n            return false;\n        }\n        return true;",
        "grade-190": {
            "execution": 1
        },
        "150": "// TODO: Write your code here\n        return false;",
        "grade-150": {
            "execution": 0
        },
        "25": "String regex = \"^(((0?[1-9]|1[012])-(0?[1-9]|1\\\\d|2[0-8])|(0?[13456789]|1[012])-(29|30)|(0?[13578]|1[02])-31)-(19|[2-9]\\\\d)\\\\d{2}|0?2-29-((19|[2-9]\\\\d)(0[48]|[2468][048]|[13579][26])|(([2468][048]|[3579][26])00)))$\";\n        return date.matches(regex);",
        "grade-25": {
            "execution": 1
        },
        "164": "// Your code here\n        return false;",
        "grade-164": {
            "execution": 0
        },
        "115": "String[] parts = date.split(\"-\");\n      int month = Integer.parseInt(parts[0]);\n      int day = Integer.parseInt(parts[1]);\n      int year = Integer.parseInt(parts[2]);\n      int maxDays;\n      switch (month) {\n        case 1:\n        case 3:\n        case 5:\n        case 7:\n        case 8:\n        case 10:\n        case 12:\n          maxDays = 31;\n          break;\n        case 4:\n        case 6:\n        case 9:\n        case 11:\n          maxDays = 30;\n          break;\n        case 2:\n          maxDays = 28;\n          break;\n        default:\n          return false;\n      }\n      return month >= 1 && month <= 12 && day >= 1 && day <= maxDays && year >= 1;",
        "grade-115": {
            "execution": 0
        },
        "9": "return Pattern.matches(\"^(?:(?:([0][1-9]|[1][0-2])-([0][1-9]|[1-2][0-9]|[3][0-1])-([1-9][0-9]{3}))|(?:([0][1-9]|[1][0-2])-([0][1-9]|[1-2][0-9]|[3][0])-([1-9][0-9]{3}))|(?:([0][1-9]|[1][0-2])-([0][1-9]|[1-2][0-9])-([1-9][0-9]{3}))|(?:([0][1-9]|[1][0-2])-([0][1-9]|[1-2][0-9])-([1-9][0-9]{2}))|(?:([0][1-9]|[1][0-2])-([0][1-9]|[1-2][0-9])-([1-9][0-9])))$\", date);",
        "grade-9": {
            "execution": 0
        },
        "7": "int[] daysInMonth = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n        String[] splitted = date.split(\"-\");\n        if (splitted.length != 3) {\n            return false;\n        }\n        try {\n            int month = Integer.parseInt(splitted[0]);\n            int day = Integer.parseInt(splitted[1]);\n            int year = Integer.parseInt(splitted[2]);\n            if (month <= 0 || month > 12) {\n                return false;\n            }\n            if (month == 2 && year % 4 == 0) {\n                return (day > 0 && day <= 29);\n            }\n            return (day > 0 && day <= daysInMonth[month - 1]);\n        } catch (NumberFormatException e) {\n            return false;\n        }",
        "grade-7": {
            "execution": 1
        },
        "26": "boolean res = false;\n        try {\n            String[] sa = date.split(\"-\");\n            if (sa.length != 3) {\n                return false;\n            }\n            int d = Integer.parseInt(sa[0]);\n            int m = Integer.parseInt(sa[1]);\n            if (m > 12 || m < 1) {\n                return false;\n            }\n            int y = Integer.parseInt(sa[2]);\n            Calendar cal = Calendar.getInstance();\n            cal.set(y, m-1, d);\n            int m1 = cal.get(Calendar.MONTH)+1;\n            int d1 = cal.get(Calendar.DAY_OF_MONTH);\n            if (m1 == m && d1 == d) {\n                res = true;\n            }\n        } catch (Exception e) {\n            res = false;\n        }\n        return res;",
        "grade-26": {
            "execution": 0
        },
        "59": "try {\n            final String[] fields = date.split(\"-\");\n            final int day = Integer.parseInt(fields[1]);\n            final int month = Integer.parseInt(fields[0]);\n            final int year = Integer.parseInt(fields[2]);\n            if (day < 1 || day > 31) return false;\n            if (month < 1 || month > 12) return false;\n            if (month == 2 && day > 29) return false;\n            if (month % 2 == 0 && month != 2 && day > 30) return false;\n            if (month == 2 && year % 4 != 0 && day > 28) return false;\n            return true;\n        } catch (Exception e) {\n            return false;\n        }",
        "grade-59": {
            "execution": 1
        },
        "63": "String[] all_date = date.split(\"-\");\n        if (all_date.length != 3) return false;\n        int month = Integer.parseInt(all_date[0]);\n        int day = Integer.parseInt(all_date[1]);\n        int year = Integer.parseInt(all_date[2]);\n        if (month < 1 || month > 12) return false;\n        if (month == 2) {\n            if (day < 1 || day > 29) return false;\n        } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 || day > 30) return false;\n        } else {\n            if (day < 1 || day > 31) return false;\n        }\n        return true;",
        "grade-63": {
            "execution": 1
        },
        "138": "// split into 3 parts, mm dd yyyy\n        String[] parts = date.split(\"-\");\n        if (parts.length != 3) return false;\n        try {\n            int month = Integer.parseInt(parts[0]);\n            int day = Integer.parseInt(parts[1]);\n            int year = Integer.parseInt(parts[2]);\n            // month must be between 1 and 12 inclusive\n            if (month < 1 || month > 12) return false;\n            // year must be at least 1900\n            if (year < 1900) return false;\n            // day must be between 1 and 31 inclusive and must be less than the number of days allowed in the month\n            if (day < 1 || day > 31) return false;\n            if (month == 2) {\n                // Feburary, must be before 29\n                if (day > 29) return false;\n                // if it's a leap year, can be 29\n                if (day == 29 && (year % 4 != 0 || (year % 100 == 0 && year % 400 != 0))) return false;\n            } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n                // April, June, September, November, must be before 30\n                if (day > 30) return false;\n            }\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }",
        "grade-138": {
            "execution": 1
        },
        "169": "int d, m, y;\n        if (date.length() != 10) return false;\n        if (date.charAt(2) != '-' || date.charAt(5) != '-') return false;\n        try {\n            d = Integer.parseInt(date.substring(0, 2));\n            m = Integer.parseInt(date.substring(3, 5));\n            y = Integer.parseInt(date.substring(6, 10));\n        } catch (NumberFormatException e) {\n            return false;\n        }\n        if (m < 1 || m > 12) return false;\n        if (m == 2) {\n            if (d < 1 || d > 29) return false;\n        } else if (m % 2 == 0) {\n            if (d < 1 || d > 30) return false;\n        } else {\n            if (d < 1 || d > 31) return false;\n        }\n        return true;",
        "grade-169": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    // zero, and has a frequency greater than or equal to the value of the integer itself. \n    // The frequency of an integer is the number of times it appears in the list.\n    // If no such a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1]) == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5, 4, 4, 4]) == -1\n    public static int search(ArrayList<Integer> lst) {\n",
        "snippet": [
            "        int[] frq = new int[Collections.max(lst) + 1];\n        for (int i : lst) {\n            frq[i] += 1;\n        }\n        int ans = -1;\n        for (int i = 1; i < frq.length; i++) {\n            if (frq[i] >= i) {\n                ans = i;\n            }\n        }\n        return ans;\n    }\n}"
        ],
        "simplified": "You are given a non-empty list of positive integers. Return the greatest integer that is greater than zero, and has a frequency greater than or equal to the value of the integer itself. The frequency of an integer is the number of times it appears in the list. If no such a value exist, return -1.",
        "task_id": "69",
        "168": "int index = -1;\n        int val = 0;\n        int count = 0;\n        // find the most repeated element\n        for (int i = 0; i < lst.size(); i++) {\n            count = Collections.frequency(lst, lst.get(i));\n            if (count > val) {\n                val = count;\n                index = i;\n            }\n        }\n        if (val >= lst.get(index)) {\n            return lst.get(index);\n        }\n        return -1;",
        "grade-168": {
            "execution": 0
        },
        "28": "if (lst.size() == 0) {\n            return -1;\n        }\n        HashMap<Integer, Integer> mp = new HashMap<Integer, Integer>();\n        for (int num : lst) {\n            mp.put(num, mp.getOrDefault(num, 0) + 1);\n        }\n        ArrayList<Pair<Integer, Integer>> pairs = new ArrayList<Pair<Integer, Integer>>();\n        for (Map.Entry<Integer, Integer> entry : mp.entrySet()) {\n            pairs.add(new Pair<Integer, Integer>(entry.getKey(), entry.getValue()));\n        }\n        Collections.sort(pairs, new PairComparator<Integer, Integer>());\n        for (int i = 0; i < pairs.size(); i++) {\n            if (pairs.get(i).a() >= pairs.get(i).b()) {\n                return pairs.get(i).a();\n            }\n        }\n        return -1;",
        "grade-28": {
            "execution": 0
        },
        "6": "int[] freq = new int[lst.size() + 1];\n        for (int x : lst) {\n            freq[x]++;\n        }\n        for (int i = lst.size(); i >= 1; i--) {\n            if (freq[i] >= i) {\n                return i;\n            }\n        }\n        return -1;",
        "grade-6": {
            "execution": 0
        },
        "195": "int freq[] = new int[lst.size() + 1];\n        for (int i = 0; i < lst.size(); i++) {\n            freq[lst.get(i)]++;\n        }\n        for (int i = lst.size(); i >= 1; i--) {\n            if (freq[i] >= i) {\n                return i;\n            }\n        }\n        return -1;",
        "grade-195": {
            "execution": 0
        },
        "71": "int res = -1;\n        Collections.sort(lst);\n        int lastValue = lst.get(0);\n        int count = 1;\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) == lastValue) {\n                count++;\n            } else {\n                if (count >= lastValue) {\n                    res = lastValue;\n                }\n                lastValue = lst.get(i);\n                count = 1;\n            }\n        }\n        if (count >= lastValue) {\n            res = lastValue;\n        }\n        return res;",
        "grade-71": {
            "execution": 1
        },
        "63": "// Iterate through the list and create a mapping of all numbers to their frequencies.\n        // A Java HashMap might be useful here.\n        // https://docs.oracle.com/javase/8/docs/api/java/util/HashMap.html\n        HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n        for (int i = 0; i < lst.size(); i++) {\n            count.put(lst.get(i), count.getOrDefault(lst.get(i), 0) + 1);\n        }\n        // Iterate through the list again and keep track of the max value.\n        // If the current value exists in the mapping of numbers to frequencies\n        // and it's frequency is greater than or equal to the current value,\n        // update the max value.\n        int max = -1;\n        for (int i = 0; i < lst.size(); i++) {\n            if (count.containsKey(lst.get(i)) && count.get(lst.get(i)) >= lst.get(i)) {\n                max = Math.max(max, lst.get(i));\n            }\n        }\n        return max;",
        "grade-63": {
            "execution": 1
        },
        "58": "int max = -1;\n        HashMap<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < lst.size(); i++) {\n            int key = lst.get(i);\n            if (map.containsKey(key)) {\n                map.put(key, map.get(key) + 1);\n            } else {\n                map.put(key, 1);\n            }\n        }\n        List<Integer> keys = new ArrayList<Integer>(map.keySet());\n        for (int i = 0; i < keys.size(); i++) {\n            int key = keys.get(i);\n            if (key > 0 && map.get(key) >= key) {\n                max = Math.max(max, key);\n            }\n        }\n        return max;",
        "grade-58": {
            "execution": 1
        },
        "35": "// code here\n        // lst.stream().filter(x -> Collections.frequency(lst, x) >= x).max(Integer::compareTo).orElse(-1);\n        List<Integer> result = lst.stream().filter(x -> Collections.frequency(lst, x) >= x).collect(Collectors.toList());\n        return result.size() == 0 ? -1 : Collections.max(result);",
        "grade-35": {
            "execution": 1
        },
        "194": "// code\n        ArrayList<Integer> resultList = new ArrayList<Integer>();\n        Collections.sort(lst);\n        for (int i = 0; i < lst.size(); i++) {\n            int count = 1;\n            for (int j = i+1; j < lst.size(); j++) {\n                if (lst.get(i) == lst.get(j)) {\n                    count++;\n                }\n            }\n            resultList.add(count);\n        }\n        for (int i = 0; i < resultList.size(); i++) {\n            if (resultList.get(i) >= lst.get(i)) {\n                return lst.get(i);\n            }\n        }\n        return -1;",
        "grade-194": {
            "execution": 0
        },
        "26": "HashMap<Integer, Integer> map = new HashMap<>();\n        for (int i : lst) {\n            if (map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n            } else {\n                map.put(i, 1);\n            }\n        }\n        int ans = -1;\n        for (int i : map.keySet()) {\n            if (i <= map.get(i)) {\n                ans = i;\n            }\n        }\n        return ans;",
        "grade-26": {
            "execution": 1
        },
        "179": "int[] freq = new int[5001];\n        for (int i : lst) freq[i]++;\n        for (int i = 5000; i >= 1; i--) {\n            if (freq[i] >= i) return i;\n        }\n        return -1;",
        "grade-179": {
            "execution": 1
        },
        "141": "// count how many times each element appears in the list.\n        HashMap<Integer, Integer> hm = new HashMap<Integer, Integer>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (hm.containsKey(lst.get(i))) {\n                int cur = hm.get(lst.get(i));\n                hm.put(lst.get(i), cur + 1);\n            } else {\n                hm.put(lst.get(i), 1);\n            }\n        }\n        // if the element is greater than 1, AND\n        // the frequency is greater than or equal to the element,\n        // return the element.\n        // if you get through the list without finding such a value,\n        // return -1.\n        for (int i = 1; i < lst.size(); i++) {\n            if (hm.containsKey(i) && hm.get(i) >= i) {\n                return i;\n            }\n        }\n        return -1;",
        "grade-141": {
            "execution": 0
        },
        "22": "HashMap<Integer, Integer> freq = new HashMap<>();\n        int bestValue = -1;\n        for (int n : lst) {\n            if (freq.containsKey(n)) {\n                freq.put(n, freq.get(n) + 1);\n            } else {\n                freq.put(n, 1);\n            }\n            if (freq.get(n) >= n && n > bestValue) {\n                bestValue = n;\n            }\n        }\n        return bestValue;",
        "grade-22": {
            "execution": 1
        },
        "153": "// Find the frequency of each element in the list.\n        Map<Integer, Integer> frequency = new HashMap<>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (frequency.containsKey(lst.get(i))) {\n                int currentFreq = frequency.get(lst.get(i));\n                frequency.put(lst.get(i), currentFreq + 1);\n            } else {\n                frequency.put(lst.get(i), 1);\n            }\n        }\n        // Create a new list of pairs containing the element and its frequency.\n        ArrayList<Pair<Integer, Integer>> pairs = new ArrayList<>();\n        for (Map.Entry<Integer, Integer> entry : frequency.entrySet()) {\n            pairs.add(new Pair<>(entry.getKey(), entry.getValue()));\n        }\n        // Sort the pairs from smallest to largest frequency.\n        Collections.sort(pairs, new Comparator<Pair<Integer, Integer>>() {\n            @Override\n            public int compare(Pair<Integer, Integer> o1, Pair<Integer, Integer> o2) {\n                return o1.getValue1().compareTo(o2.getValue1());\n            }\n        });\n        // Find the smallest key with a frequency greater than or equal to the key.\n        for (int i = 0; i < pairs.size(); i++) {\n            int key = pairs.get(i).getValue0();\n            int freq = pairs.get(i).getValue1();\n            if (freq >= key) {\n                return key;\n            }\n        }\n        return -1;",
        "grade-153": {
            "execution": 0
        },
        "109": "// calculate and put into map the frequency of each integer \n        HashMap<Integer, Integer> freq = new HashMap<Integer, Integer>();\n        for (int i : lst) {\n            if (freq.containsKey(i)) {\n                freq.put(i, freq.get(i) + 1);\n            } else {\n                freq.put(i, 1);\n            }\n        }\n        // find largest frequency\n        int maxFreq = 0;\n        for (int i : freq.keySet()) {\n            if (freq.get(i) > maxFreq) {\n                maxFreq = freq.get(i);\n            }\n        }\n        // if there is a key with a frequency equal to maxFreq, return that key\n        for (int i : freq.keySet()) {\n            if (freq.get(i) == maxFreq) {\n                return i;\n            }\n        }\n        // otherwise return -1\n        return -1;",
        "grade-109": {
            "execution": 0
        },
        "8": "// Loop through list, and make a map that keeps track of each number, and how many times it appears.\n        // Then, loop through the map and return the key if that key is greater than the frequency of the number.\n        // Otherwise, return -1.\n        Map<Integer, Integer> freq = new HashMap<Integer, Integer>();\n        for (int i = 0; i < lst.size(); i++) {\n            freq.put(lst.get(i), freq.getOrDefault(lst.get(i), 0) + 1);\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) <= freq.get(lst.get(i))) {\n                return lst.get(i);\n            }\n        }\n        return -1;",
        "grade-8": {
            "execution": 0
        },
        "7": "int currentMaxFreq = -1;\n        int currentMaxFreqValue = -1;\n        Map<Integer, Integer> freqMap = new HashMap<>();\n        for (int i=0; i<lst.size(); i++) {\n            if (freqMap.containsKey(lst.get(i))) {\n                freqMap.put(lst.get(i), freqMap.get(lst.get(i)) + 1);\n            } else {\n                freqMap.put(lst.get(i), 1);\n            }\n        }\n        for (Map.Entry<Integer, Integer> m: freqMap.entrySet()) {\n            if (m.getValue() >= m.getKey() && m.getValue() > currentMaxFreq) {\n                currentMaxFreq = m.getValue();\n                currentMaxFreqValue = m.getKey();\n            }\n        }\n        return currentMaxFreqValue;",
        "grade-7": {
            "execution": 0
        },
        "23": "return lst.stream()\n            .collect(Collectors.groupingBy(x -> x, Collectors.counting()))\n            .entrySet()\n            .stream()\n            .filter(x -> x.getKey() >= x.getValue())\n            .map(x -> x.getKey())\n            .max(Integer::compareTo)\n            .orElse(-1);",
        "grade-23": {
            "execution": 0
        },
        "56": "HashMap<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (map.containsKey(lst.get(i))) {\n                map.put(lst.get(i), map.get(lst.get(i)) + 1);\n            } else {\n                map.put(lst.get(i), 1);\n            }\n        }\n        int max = -1;\n        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {\n            if (entry.getKey() > entry.getValue() && entry.getKey() > max) {\n                max = entry.getKey();\n            }\n        }\n        return max;",
        "grade-56": {
            "execution": 0
        },
        "60": "int[] arr = new int[lst.size() + 1];\n        for (int i = 0; i < lst.size(); i++) {\n            arr[lst.get(i)]++;\n        }\n        int res = -1;\n        for (int i = 1; i < arr.length; i++) {\n            if (arr[i] >= i) {\n                res = i;\n            }\n        }\n        return res;",
        "grade-60": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    // (2.0, 2.2)\n    // >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    // (2.0, 2.0)\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n",
        "snippet": [
            "        List<Double> closest_pair = new ArrayList<>();\n        closest_pair.add(numbers.get(0));\n        closest_pair.add(numbers.get(1));\n        double distance = Math.abs(numbers.get(1) - numbers.get(0));\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < distance) {\n                    closest_pair.clear();\n                    closest_pair.add(numbers.get(i));\n                    closest_pair.add(numbers.get(j));\n                    distance = Math.abs(numbers.get(i) - numbers.get(j));\n                }\n            }\n        }\n        Collections.sort(closest_pair);\n        return closest_pair;\n    }\n}"
        ],
        "simplified": "From a supplied list of numbers (of length at least two) select and return two that are the closest to each other and return them in order (smaller number, larger number).",
        "task_id": "20",
        "182": "return Pair.with(0f, 0f);",
        "grade-182": {
            "execution": 0
        },
        "28": "float minDifference = Float.MAX_VALUE;\n        Pair<Float, Float> minPair = null;\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                float difference = Math.abs(numbers.get(i) - numbers.get(j));\n                if (difference < minDifference) {\n                    minDifference = difference;\n                    minPair = Pair.with(numbers.get(i), numbers.get(j));\n                }\n            }\n        }\n        return minPair;",
        "grade-28": {
            "execution": 0
        },
        "6": "// Replace with your code\n        return new Pair<Float, Float>(0.0f, 0.0f);",
        "grade-6": {
            "execution": 0
        },
        "74": "// Make sure you implement this method and return the right tuple.\n        return new Pair<Float, Float>(0.0f, 0.0f);",
        "grade-74": {
            "execution": 0
        },
        "65": "throw new RuntimeException(\"findClosestElements not implemented\");",
        "grade-65": {
            "execution": 0
        },
        "60": "// Your code here\n        float m = Float.MAX_VALUE;\n        Pair<Float, Float> pair = null;\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                float diff = Math.abs(numbers.get(i) - numbers.get(j));\n                if (diff < m) {\n                    m = diff;\n                    pair = Pair.with(numbers.get(i), numbers.get(j));\n                }\n            }\n        }\n        return pair;",
        "grade-60": {
            "execution": 0
        },
        "36": "return new Pair<Float, Float>(0f, 0f);",
        "grade-36": {
            "execution": 0
        },
        "26": "if (numbers.size() < 2) {\n            return new Pair<>(0.0f, 0.0f);\n        }\n        float distance = Float.MAX_VALUE;\n        float prev = numbers.get(0);\n        float next = numbers.get(1);\n        for (int i = 1; i < numbers.size(); i++) {\n            float curr = numbers.get(i);\n            float currDistance = Math.abs(curr - prev);\n            if (currDistance < distance) {\n                distance = currDistance;\n                next = curr;\n            }\n            prev = curr;\n        }\n        return new Pair<>(prev, next);",
        "grade-26": {
            "execution": 0
        },
        "193": "// initialize to the first two elements in the list\n        float closest = Math.abs(numbers.get(0) - numbers.get(1));\n        Pair<Float, Float> closestPair = new Pair<Float, Float>(numbers.get(0), numbers.get(1));\n        float temp;\n        // iterate over the numbers and replace the closestPair variable if a new closest pair is found\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                temp = Math.abs(numbers.get(i) - numbers.get(j));\n                if (temp < closest) {\n                    closest = temp;\n                    closestPair = new Pair<Float, Float>(numbers.get(i), numbers.get(j));\n                }\n            }\n        }\n        return closestPair;",
        "grade-193": {
            "execution": 0
        },
        "154": "// Write your implementation here.\n        return new Pair<>(0f, 0f);",
        "grade-154": {
            "execution": 0
        },
        "22": "// find difference between each number and return the smallest\n        // if there is a smallest, check if it's the same number next to it\n\n        // find difference between each number\n        // return the smallest\n        // if the smallest is zero, return the numbers\n\n        int n = numbers.size();\n        float smallestDifference = Float.MAX_VALUE;\n        int indexSmallestDifference = 0;\n        float difference;\n\n        for (int i = 0; i < n - 1; i++) {\n            difference = Math.abs(numbers.get(i) - numbers.get(i + 1));\n            if (difference < smallestDifference) {\n                smallestDifference = difference;\n                indexSmallestDifference = i;\n            }\n        }\n\n        if (smallestDifference == 0) {\n            // System.out.println(\"same number\");\n            return new Pair<Float, Float>(numbers.get(indexSmallestDifference), numbers.get(indexSmallestDifference + 1));\n        } else {\n            // System.out.println(\"different number\");\n            return new Pair<Float, Float>(numbers.get(indexSmallestDifference), numbers.get(indexSmallestDifference + 1));\n        }",
        "grade-22": {
            "execution": 0
        },
        "169": "throw new UnsupportedOperationException(\"Not Implemented Yet\");",
        "grade-169": {
            "execution": 0
        },
        "117": "Collections.sort(numbers);\n        float minDiff = Float.MAX_VALUE;\n        float minDiffLower = 0.0f;\n        float minDiffUpper = 0.0f;\n        int n = numbers.size();\n        for (int i = 0; i < n - 1; i++) {\n            float diff = numbers.get(i + 1) - numbers.get(i);\n            if (diff < minDiff) {\n                minDiff = diff;\n                minDiffLower = numbers.get(i);\n                minDiffUpper = numbers.get(i + 1);\n            }\n        }\n        return new Pair<Float, Float>(minDiffLower, minDiffUpper);",
        "grade-117": {
            "execution": 0
        },
        "8": "if (numbers.size() == 0)\n            return null;\n        float closest = Math.abs(numbers.get(0) - numbers.get(1));\n        float first = numbers.get(0);\n        float second = numbers.get(1);\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                float temp = Math.abs(numbers.get(i) - numbers.get(j));\n                if (temp < closest) {\n                    closest = temp;\n                    first = numbers.get(i);\n                    second = numbers.get(j);\n                }\n            }\n        }\n        return new Pair<Float, Float>(first, second);",
        "grade-8": {
            "execution": 0
        },
        "7": "return null;",
        "grade-7": {
            "execution": 0
        },
        "23": "float diff = Float.MAX_VALUE;\n        Pair<Float, Float> result = new Pair<Float, Float>(Float.MAX_VALUE, Float.MAX_VALUE);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                float newDiff = Math.abs(numbers.get(i) - numbers.get(j));\n                if (newDiff < diff) {\n                    diff = newDiff;\n                    result = new Pair<Float, Float>(numbers.get(i), numbers.get(j));\n                }\n            }\n        }\n        return result;",
        "grade-23": {
            "execution": 0
        },
        "58": "// This is a one-liner (in fact, there are two correct one-liners).\n        // Your answer here:\n        return null;",
        "grade-58": {
            "execution": 0
        },
        "62": "// >>> Your code goes here.\n        if (numbers.size() < 2) return null;\n        float closest = numbers.get(0);\n        float closest1 = numbers.get(1);\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < Math.abs(closest - closest1)) {\n                    closest = numbers.get(i);\n                    closest1 = numbers.get(j);\n                }\n            }\n        }\n        return new Pair<>(closest, closest1);",
        "grade-62": {
            "execution": 0
        },
        "140": "Pair<Float, Float> closest = new Pair<Float, Float>(numbers.get(0), numbers.get(1));\n        float smallestDifference = Math.abs(numbers.get(0) - numbers.get(1));\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                float currentDifference = Math.abs(numbers.get(i) - numbers.get(j));\n                if (currentDifference < smallestDifference) {\n                    closest = new Pair<Float, Float>(numbers.get(i), numbers.get(j));\n                    smallestDifference = currentDifference;\n                }\n            }\n        }\n        return closest;",
        "grade-140": {
            "execution": 0
        },
        "172": "Float firstNumber = numbers.get(0);\n        Float secondNumber = numbers.get(1);\n        Float smallestDifference = secondNumber - firstNumber;\n        for (int i = 1; i < numbers.size() - 1; i++) {\n            Float currentDifference = numbers.get(i + 1) - numbers.get(i);\n            if (currentDifference < smallestDifference) {\n                smallestDifference = currentDifference;\n                firstNumber = numbers.get(i);\n                secondNumber = numbers.get(i + 1);\n            }\n        }\n        return new Pair<Float, Float>(firstNumber, secondNumber);",
        "grade-172": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return sorted unique common elements for two lists.\n    // >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    // [1, 5, 653]\n    // >>> common([5, 3, 2, 8], [3, 2])\n    // [2, 3]\n    public static ArrayList<Integer> common(ArrayList<Integer> l1, ArrayList<Integer> l2) {\n",
        "snippet": [
            "        Set<Integer> ret = new HashSet<>(l1);\n        ret.retainAll(new HashSet<>(l2));\n        List<Integer> result = new ArrayList<>(ret);\n        Collections.sort(result);\n        return result;\n    }\n}"
        ],
        "simplified": "Return sorted unique common elements for two lists.",
        "task_id": "58",
        "175": "HashSet<Integer> set = new HashSet<Integer>();\n        for (int num : l1) {\n            set.add(num);\n        }\n        ArrayList<Integer> common = new ArrayList<Integer>();\n        for (int num : l2) {\n            if (set.contains(num)) {\n                common.add(num);\n            }\n        }\n        Collections.sort(common);\n        return common;",
        "grade-175": {
            "execution": 0
        },
        "29": "return null;",
        "grade-29": {
            "execution": 0
        },
        "7": "// Your code here\n        HashSet<Integer> set = new HashSet<>();\n        for (int i = 0; i < l1.size(); i++) {\n            set.add(l1.get(i));\n        }\n        ArrayList<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l2.size(); i++) {\n            if (set.contains(l2.get(i))) {\n                result.add(l2.get(i));\n            }\n        }\n        Collections.sort(result);\n        return result;",
        "grade-7": {
            "execution": 0
        },
        "72": "throw new UnsupportedOperationException(\"Not implemented\");",
        "grade-72": {
            "execution": 0
        },
        "64": "ArrayList<Integer> l3 = new ArrayList<Integer>();\n        l1.retainAll(l2);\n        l1.sort(null);\n        for (int i = 0; i < l1.size(); i++) {\n            if (i == 0) {\n                l3.add(l1.get(i));\n            } else if (l1.get(i) != l1.get(i - 1)) {\n                l3.add(l1.get(i));\n            }\n        }\n        return l3;",
        "grade-64": {
            "execution": 1
        },
        "58": "HashSet<Integer> set = new HashSet<>();\n        set.addAll(l1);\n        set.retainAll(l2);\n        l1.clear();\n        l1.addAll(set);\n        Collections.sort(l1);\n        return l1;",
        "grade-58": {
            "execution": 1
        },
        "36": "HashSet<Integer> temp = new HashSet<Integer>();\n        temp.addAll(l1);\n        temp.retainAll(l2);\n        return new ArrayList<Integer>(temp);",
        "grade-36": {
            "execution": 1
        },
        "27": "ArrayList<Integer> res = new ArrayList<Integer>();\n        int n1 = l1.size();\n        int n2 = l2.size();\n        int i = 0;\n        int j = 0;\n        while (i < n1 && j < n2) {\n            if (l1.get(i) == l2.get(j)) {\n                res.add(l1.get(i));\n                i++;\n                j++;\n            } else if (l1.get(i) < l2.get(j)) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return res;",
        "grade-27": {
            "execution": 0
        },
        "185": "HashSet<Integer> s1 = new HashSet<>(l1);\n        HashSet<Integer> s2 = new HashSet<>(l2);\n        s1.retainAll(s2);\n        ArrayList<Integer> result = new ArrayList<>(s1);\n        Collections.sort(result);\n        return result;",
        "grade-185": {
            "execution": 1
        },
        "148": "throw new UnsupportedOperationException(\"Not implemented.\");",
        "grade-148": {
            "execution": 0
        },
        "23": "return new ArrayList<Integer>(\n            (Set<Integer>) l1.stream()\n                .filter(l2::contains)\n                .collect(Collectors.toSet())\n        );",
        "grade-23": {
            "execution": 1
        },
        "162": "HashSet<Integer> set1 = new HashSet<>(l1);\n        HashSet<Integer> set2 = new HashSet<>(l2);\n        ArrayList<Integer> uniques = new ArrayList<>();\n        uniques.addAll(set1);\n        uniques.addAll(set2);\n        uniques.sort(Comparator.naturalOrder());\n        return uniques;",
        "grade-162": {
            "execution": 0
        },
        "112": "// type your code here\n        throw new UnsupportedOperationException(\"Problem not implemented\");",
        "grade-112": {
            "execution": 0
        },
        "9": "throw new RuntimeException(\"Not implemented yet\");",
        "grade-9": {
            "execution": 0
        },
        "8": "ArrayList<Integer> l = new ArrayList<Integer>();\n        ArrayList<Integer> max = l1.size() > l2.size() ? l1 : l2;\n        ArrayList<Integer> min = l1.size() > l2.size() ? l2 : l1;\n        for (int i = 0; i < min.size(); i++) {\n            if (max.contains(min.get(i)))\n                l.add(min.get(i));\n        }\n        return l;",
        "grade-8": {
            "execution": 0
        },
        "24": "ArrayList<Integer> result = new ArrayList<Integer>();\n        int p1 = 0;\n        int p2 = 0;\n        int len1 = l1.size();\n        int len2 = l2.size();\n        int t1 = 0;\n        int t2 = 0;\n        while (p1 < len1 && p2 < len2) {\n            t1 = l1.get(p1);\n            t2 = l2.get(p2);\n            if (t1 == t2) {\n                if (result.size() == 0 || t1 != result.get(result.size() - 1)) {\n                    result.add(t1);\n                }\n                p1 += 1;\n                p2 += 1;\n            } else if (t1 < t2) {\n                p1 += 1;\n            } else {\n                p2 += 1;\n            }\n        }\n        return result;",
        "grade-24": {
            "execution": 0
        },
        "56": "ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int elem : l1) {\n            if (l2.contains(elem) && !result.contains(elem))\n                result.add(elem);\n        }\n        Collections.sort(result);\n        return result;",
        "grade-56": {
            "execution": 1
        },
        "60": "ArrayList<Integer> al = new ArrayList<Integer>();\n        Set<Integer> s1 = new HashSet<Integer>(l1);\n        Set<Integer> s2 = new HashSet<Integer>(l2);\n        Set<Integer> s3 = new HashSet<Integer>(s1);\n        s3.retainAll(s2);\n        al.addAll(s3);\n        Collections.sort(al);\n        return al;",
        "grade-60": {
            "execution": 1
        },
        "136": "ArrayList<Integer> all = new ArrayList<Integer>();\n        ArrayList<Integer> common = new ArrayList<Integer>();\n        for (int num : l1) {\n            all.add(num);\n        }\n        for (int num : l2) {\n            all.add(num);\n        }\n        Collections.sort(all);\n        int prev = -1;\n        for (int num : all) {\n            if (num == prev) {\n                common.add(num);\n            }\n            prev = num;\n        }\n        return common;",
        "grade-136": {
            "execution": 0
        },
        "165": "ArrayList<Integer> l3 = new ArrayList<Integer>();\n        l1.sort(null);\n        l2.sort(null);\n        for (int i = 0; i < l1.size(); i++) {\n            for (int j = 0; j < l2.size(); j++) {\n                if (l1.get(i) == l2.get(j)) {\n                    l3.add(l1.get(i));\n                }\n            }\n        }\n        ArrayList<Integer> l4 = new ArrayList<Integer>();\n        for (int i = 0; i < l3.size(); i++) {\n            if (!l4.contains(l3.get(i))) {\n                l4.add(l3.get(i));\n            }\n        }\n        return l4;",
        "grade-165": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String> stringToMd5(String text) {\n",
        "snippet": [
            "        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n\n        String md5 = new BigInteger(1, java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())).toString(16);\n        md5 = \"0\".repeat(32 - md5.length()) + md5;\n        return Optional.of(md5);\n    }\n}"
        ],
        "simplified": "Given a string 'text', return its md5 hash equivalent string. If 'text' is an empty string, return None.",
        "task_id": "162",
        "192": "try {\n            byte[] bytesOfMessage = text.getBytes(\"UTF-8\");\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[] hash = md.digest(bytesOfMessage);\n            return Optional.of(String.format(\"%032x\", new BigInteger(1, hash)));\n        } catch (Exception e) {\n            return Optional.empty();\n        }",
        "grade-192": {
            "execution": 0
        },
        "29": "// Ensure text is not empty\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        // Compute text md5 hash\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[] hash = md.digest(text.getBytes(StandardCharsets.UTF_8));\n            StringBuilder sb = new StringBuilder(2 * hash.length);\n            for (byte b : hash) {\n                sb.append(String.format(\"%02x\", b & 0xff));\n            }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n            return Optional.empty();\n        }",
        "grade-29": {
            "execution": 0
        },
        "6": "String result = null;\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            md.update(text.getBytes());\n            byte[] digest = md.digest();\n            result = DatatypeConverter.printHexBinary(digest).toLowerCase();\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n        return result == null ? Optional.empty() : Optional.of(result);",
        "grade-6": {
            "execution": 0
        },
        "74": "try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[] md5bytes = md.digest(text.getBytes(\"UTF-8\"));\n            String result = DatatypeConverter.printHexBinary(md5bytes);\n            return Optional.of(result);\n        } catch (NoSuchAlgorithmException | UnsupportedEncodingException e) {\n            return Optional.empty();\n        }",
        "grade-74": {
            "execution": 0
        },
        "66": "throw new UnsupportedOperationException(\"Please implement the (static) stringToMd5 method\");",
        "grade-66": {
            "execution": 0
        },
        "60": "if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            md.update(text.getBytes());\n            byte[] digest = md.digest();\n            StringBuffer hex = new StringBuffer();\n            for (int i = 0; i < digest.length; i++) {\n                hex.append(Integer.toHexString(0xFF & digest[i]));\n            }\n            return Optional.of(hex.toString());\n        } catch (NoSuchAlgorithmException nsae) {\n            return Optional.empty();\n        }",
        "grade-60": {
            "execution": 0
        },
        "37": "try {\n            byte[] bytesOfMessage = text.getBytes(\"UTF-8\");\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[] digest = md.digest(bytesOfMessage);\n            BigInteger bigInt = new BigInteger(1, digest);\n            String hashtext = bigInt.toString(16);\n            while (hashtext.length() < 32) {\n                hashtext = \"0\" + hashtext;\n            }\n            return Optional.of(hashtext);\n        } catch (Exception e) {\n            return Optional.empty();\n        }",
        "grade-37": {
            "execution": 0
        },
        "27": "// TODO: Implement this method.\n        return Optional.empty();",
        "grade-27": {
            "execution": 0
        },
        "160": "try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            md.update(text.getBytes());\n            byte[] digest = md.digest();\n            String myHash = DatatypeConverter.printHexBinary(digest).toLowerCase();\n            return Optional.of(myHash);\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n            return Optional.empty();\n        }",
        "grade-160": {
            "execution": 0
        },
        "23": "try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[] digest = md.digest(text.getBytes());\n            StringBuilder sb = new StringBuilder();\n            for (byte b : digest) {\n                sb.append(String.format(\"%02x\", b & 0xff));\n            }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException e) {\n            System.out.println(\"No such algorithm.\");\n            return Optional.empty();\n        }",
        "grade-23": {
            "execution": 0
        },
        "176": "// Implement this\n        return Optional.empty();",
        "grade-176": {
            "execution": 0
        },
        "118": "try {\n            if (text.isEmpty()) {\n                return Optional.empty();\n            }\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[] messageDigest = md.digest(text.getBytes());\n            BigInteger no = new BigInteger(1, messageDigest);\n            String hashtext = no.toString(16);\n            while (hashtext.length() < 32) {\n                hashtext = \"0\" + hashtext;\n            }\n            return Optional.of(hashtext);\n        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n        }",
        "grade-118": {
            "execution": 0
        },
        "8": "try {\n            return Optional.of(String.format(\"%032x\", new BigInteger(1, MessageDigest.getInstance(\"MD5\").digest(text.getBytes(\"UTF-8\")))));\n        } catch (NoSuchAlgorithmException | UnsupportedEncodingException e) {\n            return Optional.empty();\n        }",
        "grade-8": {
            "execution": 0
        },
        "7": "if (text.isEmpty()) return Optional.empty();\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[] array = md.digest(text.getBytes());\n            StringBuffer sb = new StringBuffer();\n            for (int i = 0; i < array.length; ++i) {\n                sb.append(Integer.toHexString((array[i] & 0xFF) | 0x100).substring(1,3));\n            }\n            return Optional.of(sb.toString());\n        } catch (java.security.NoSuchAlgorithmException e) {\n            return Optional.empty();\n        }",
        "grade-7": {
            "execution": 0
        },
        "24": "if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        try {\n            MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n            byte[] hash = digest.digest(text.getBytes());\n            StringBuilder sb = new StringBuilder();\n            for (byte b : hash) {\n                sb.append(String.format(\"%02x\", b));\n            }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n        }",
        "grade-24": {
            "execution": 0
        },
        "58": "if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[] messageDigest = md.digest(text.getBytes());\n            BigInteger no = new BigInteger(1, messageDigest);\n            String hashtext = no.toString(16);\n            while (hashtext.length() < 32) {\n                hashtext = \"0\" + hashtext;\n            }\n            return Optional.of(hashtext);\n        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n        }",
        "grade-58": {
            "execution": 0
        },
        "62": "// TODO: implement me\n        return Optional.empty();",
        "grade-62": {
            "execution": 0
        },
        "144": "try {\n            MessageDigest messageDigest = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = messageDigest.digest(text.getBytes());\n            BigInteger number = new BigInteger(1, bytes);\n            String md5 = number.toString(16);\n            while (md5.length() < 32) {\n                md5 = \"0\" + md5;\n            }\n            return Optional.of(md5);\n        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n        }",
        "grade-144": {
            "execution": 0
        },
        "180": "try {\n            MessageDigest m = MessageDigest.getInstance(\"MD5\");\n            byte[] digest = m.digest(text.getBytes(StandardCharsets.UTF_8));\n            String result = DatatypeConverter.printHexBinary(digest).toLowerCase();\n            return Optional.of(result);\n        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n        }",
        "grade-180": {
            "execution": 0
        },
        "165": "if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        try {\n            MessageDigest m = MessageDigest.getInstance(\"MD5\");\n            m.update(text.getBytes(), 0, text.length());\n            return Optional.of(new BigInteger(1, m.digest()).toString(16));\n        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n        }",
        "grade-165": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the count of the numbers of n-digit\n    // positive integers that start or end with 1.\n    public static int startsOneEnds(int n) {\n",
        "snippet": [
            "        if (n == 1) {\n            return 1;\n        }\n        return 18 * (int) Math.pow(10, n - 2);\n    }\n}"
        ],
        "simplified": "Given a positive integer n, return the count of the numbers of n-digit positive integers that start or end with 1.",
        "task_id": "83",
        "166": "int[] dp = new int[n + 1];\n        dp[0] = 1; // empty string.\n        for (int i = 1; i <= n; i++) {\n            dp[i] = dp[i - 1] * 9;\n            if (i > 1) {\n                dp[i] += dp[i - 2] * 9;\n            }\n        }\n        return dp[n];",
        "grade-166": {
            "execution": 0
        },
        "28": "if (n == 1) {\n            return 2;\n        }\n        // We have n digits, one of which has to be 1.\n        // Thus there are 9 choices for each other digit.\n        return 9 * (int) Math.pow(10, n - 2);",
        "grade-28": {
            "execution": 0
        },
        "6": "// How many numbers in [0, 10^n) start with 1?\n        // This is 10^(n-1).\n        // Now how many numbers in [0, 10^n) end with 1?\n        // This is 9 * 10^(n-1).\n        // Now we need to subtract out the numbers in [0, 10^n) that start and\n        // end with 1.\n        // This is 10^(n-2).\n        // The answer is 10^(n-1) + 9 * 10^(n-1) - 10^(n-2).\n        return (int)Math.pow(10, n-1) + 9 * (int)Math.pow(10, n-1) - (int)Math.pow(10, n-2);",
        "grade-6": {
            "execution": 0
        },
        "197": "return -1;",
        "grade-197": {
            "execution": 0
        },
        "71": "if (n == 1) {\n            return 1;\n        }\n        int[] count = new int[n];\n        for (int i = 0; i < n; i++) {\n            if (i == 0) {\n                count[i] = 1;\n            } else if (i == 1) {\n                count[i] = 10;\n            } else {\n                count[i] = (10 * count[i - 1]) - count[i - 2];\n            }\n        }\n        return count[n - 1];",
        "grade-71": {
            "execution": 0
        },
        "62": "if (n == 1) {\n            return 1;\n        } else {\n            return (int)Math.pow(10, n - 1) + 9 * (int)Math.pow(10, n - 2);\n        }",
        "grade-62": {
            "execution": 0
        },
        "57": "if (n < 1) return 0;\n        // Dynamic Programming\n        // dp[i] -> count of numbers of i-digit positive integers that start or end with 1\n        int[] dp = new int[n + 1];\n        // base case\n        dp[1] = 2;\n        // induction hypothesis\n        // dp[n] = dp[n - 1] + dp[n - 2]\n        for (int i = 2; i <= n; i++) {\n            dp[i] = dp[i - 1] + dp[i - 2];\n        }\n        return dp[n];",
        "grade-57": {
            "execution": 0
        },
        "35": "if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        if (n == 3) {\n            return 2;\n        }\n        if (n == 4) {\n            return 2;\n        }\n        return 2 * startsOneEnds(n - 1) - startsOneEnds(n - 2);",
        "grade-35": {
            "execution": 0
        },
        "196": "if (n == 1) {\n            return 1;\n        }\n        int result = 0;\n        if (n % 2 == 0) {\n            int half = n / 2;\n            result += Math.pow(3, half - 1);\n            result += Math.pow(4, half - 1);\n        } else {\n            int half = n / 2;\n            result += Math.pow(4, half);\n            result += Math.pow(3, half);\n        }\n        return result;",
        "grade-196": {
            "execution": 0
        },
        "26": "// This is 1 because the following call would return 0.\n        if (n == 1) return 1;\n        if (n % 2 == 0) {\n            // n even\n            return 9 * (int) Math.pow(10, n / 2 - 1);\n        } else {\n            // n odd\n            return 9 * (int) Math.pow(10, n / 2 - 1) + startsOneEnds(n - 1);\n        }",
        "grade-26": {
            "execution": 0
        },
        "179": "// There are n * 9 * (10^(n-1)) such numbers.\n        return n * 9 * (int) Math.pow(10, n - 1);",
        "grade-179": {
            "execution": 0
        },
        "142": "int[] a = new int[n];\n        int[] b = new int[n];\n        int[] c = new int[n];\n        int[] d = new int[n];\n        a[0] = b[0] = c[0] = d[0] = 1;\n        if (n == 1) return 4;\n        a[1] = 1;\n        b[1] = c[1] = d[1] = 3;\n        if (n == 2) return 7;\n        for (int i = 2; i < n; i++) {\n            a[i] = a[i - 1] + b[i - 1];\n            b[i] = a[i - 1] + b[i - 1] + c[i - 1] + d[i - 1];\n            c[i] = a[i - 1] + b[i - 1] + c[i - 1] + d[i - 1];\n            d[i] = c[i - 1] + d[i - 1];\n        }\n        return a[n - 1] + b[n - 1] + c[n - 1] + d[n - 1];",
        "grade-142": {
            "execution": 0
        },
        "22": "if (n == 1) return 2;\n        int sum = 0;\n        sum += startsOneEnds(n - 1);\n        sum += (int) Math.pow(10, n - 1);\n        return sum;",
        "grade-22": {
            "execution": 0
        },
        "154": "if (n == 1) {\n            return 10;\n        } else {\n            return (int) Math.pow(10, n - 1) + 9 * (int) Math.pow(10, n - 2);\n        }",
        "grade-154": {
            "execution": 0
        },
        "110": "// Can start with 1\n        int can_start = 9 * (int) Math.pow(10, n - 1);\n        // Can end with 1\n        int can_end = (int) Math.pow(10, n - 1);\n        return can_start + can_end;",
        "grade-110": {
            "execution": 0
        },
        "8": "// S[n] = n*10^(n-1) - n*10^(n-2) + 9*10^(n-2) + S[n-1]\n        int[][] S = new int[n+1][2];\n        S[1][0] = 10;\n        S[1][1] = 1;\n        for (int i = 2; i <= n; i++) {\n            S[i][0] = (i-1)*10*(int)Math.pow(10,i-2) + S[i-1][0];\n            S[i][1] = (int)Math.pow(10,i-1) - (i-1)*(int)Math.pow(10,i-2) + 9*(int)Math.pow(10,i-2) + S[i-1][1];\n        }\n        return S[n][0] + S[n][1];",
        "grade-8": {
            "execution": 0
        },
        "7": "if (n == 1) return 1;\n        // Let x1, x2, ... xn be the digits.\n        // For starts with 1, x1 must be 1 and x2, ... xn can be any\n        // number (except 0). This can be represented as\n        // f(n) = 1 * 9 * 9 * 9 * ... * 9 + f(n - 1).\n        // For ends with 1, xn must be 1 and x1, ... xn-1 can be any\n        // number. This can be represented as\n        // f(n) = 9 * 9 * 9 * ... * 9 + f(n - 1).\n        int count = 0;\n        int power = 1;\n        for (int i = 0; i < n; i++) power *= 9;\n        for (int i = 0; i < n; i++) {\n            count += 2 * power;\n            power /= 9;\n        }\n        return count;",
        "grade-7": {
            "execution": 0
        },
        "23": "int count = 0;\n        for (int i = 1; i <= n; i++) {\n            count += pow(9, n - i) * pow(10, i - 1);\n        }\n        return count;",
        "grade-23": {
            "execution": 0
        },
        "55": "if (n == 1) {\n            return 10;\n        } else {\n            // There are 10 numbers that start with 1.\n            int sum = 10;\n            // There are 9*10^(n-2) numbers that end with 1.\n            sum += 9 * (int) Math.pow(10, n - 2);\n            // There are 9*10^(n-1) numbers that start and end with 1.\n            sum += 9 * (int) Math.pow(10, n - 1);\n            return sum;\n        }",
        "grade-55": {
            "execution": 0
        },
        "59": "// Returns the number of n-digit positive integers.\n        return (int) Math.pow(10, n) - 1;",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return True is list elements are monotonically increasing or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n",
        "snippet": [
            "        List<Integer> l1 = new ArrayList<>(l), l2 = new ArrayList<>(l);\n        Collections.sort(l1);\n        l2.sort(Collections.reverseOrder());\n        return l.equals(l1) || l.equals(l2);\n    }\n}"
        ],
        "simplified": "Return True is list elements are monotonically increasing or decreasing.",
        "task_id": "57",
        "187": "return l.stream().allMatch(i -> l.stream().allMatch(j -> i <= j)) ||\n               l.stream().allMatch(i -> l.stream().allMatch(j -> i >= j));",
        "grade-187": {
            "execution": 0
        },
        "29": "if (l.size() <= 1) {\n            return true;\n        }\n        if (l.get(0) < l.get(1)) {\n            for (int i = 1; i < l.size() - 1; i++) {\n                if (l.get(i) > l.get(i + 1)) {\n                    return false;\n                }\n            }\n        } else if (l.get(0) > l.get(1)) {\n            for (int i = 1; i < l.size() - 1; i++) {\n                if (l.get(i) < l.get(i + 1)) {\n                    return false;\n                }\n            }\n        } else {\n            return monotonic(new ArrayList<Integer>(l.subList(1, l.size())));\n        }\n        return true;",
        "grade-29": {
            "execution": 1
        },
        "7": "System.out.println(l);\n        boolean decreasing = false;\n        boolean increasing = false;\n        for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1))\n                decreasing = true;\n            if (l.get(i) < l.get(i + 1))\n                increasing = true;\n        }\n        return (decreasing && !increasing) || (!decreasing && increasing);",
        "grade-7": {
            "execution": 0
        },
        "77": "for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) <= l.get(i + 1))\n                continue;\n            else\n                return false;\n        }\n        return true;",
        "grade-77": {
            "execution": 0
        },
        "67": "// Place your code here.\n        return true;",
        "grade-67": {
            "execution": 0
        },
        "62": "return l.stream().collect(Collectors.toList()).equals(\n            l.stream().sorted().collect(Collectors.toList())\n        ) ||\n        l.stream().collect(Collectors.toList()).equals(\n            l.stream().sorted(Collections.reverseOrder()).collect(Collectors.toList())\n        );",
        "grade-62": {
            "execution": 1
        },
        "36": "return monotonic_(l,0,0);",
        "grade-36": {
            "execution": 0
        },
        "27": "if (l.size() < 2) return true;\n        boolean increasing = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1; i++) {\n            if (increasing) {\n                if (l.get(i) > l.get(i + 1)) {\n                    return false;\n                }\n            } else {\n                if (l.get(i) < l.get(i + 1)) {\n                    return false;\n                }\n            }\n        }\n        return true;",
        "grade-27": {
            "execution": 1
        },
        "197": "boolean decreasing = true;\n        boolean increasing = true;\n        for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) < l.get(i + 1)) {\n                decreasing = false;\n            }\n            if (l.get(i) > l.get(i + 1)) {\n                increasing = false;\n            }\n        }\n        return decreasing || increasing;",
        "grade-197": {
            "execution": 1
        },
        "159": "int n = l.size();\n        int k = 1;\n        int sign = l.get(1) - l.get(0);\n        for (; k < n; k++) {\n            int s = l.get(k) - l.get(k - 1);\n            if (s == 0) continue;\n            if (s * sign < 0) return false;\n            break;\n        }\n        sign = l.get(k) - l.get(k - 1);\n        for (; k < n; k++) {\n            int s = l.get(k) - l.get(k - 1);\n            if (s * sign < 0) return false;\n        }\n        return true;",
        "grade-159": {
            "execution": 0
        },
        "23": "boolean direction = true; // Initialized to true, meaning that if the function is monotonic, it is increasing.\n        boolean wasDirectionChosen = false; // Stores if the direction has already been defined.\n        int previous = l.get(0); // Stores the previous element.\n        for (int i = 1; i < l.size(); i++) {\n            int current = l.get(i);\n            if (current == previous) {\n                continue;\n            }\n            if (!wasDirectionChosen) {\n                wasDirectionChosen = true;\n                direction = current > previous;\n            }\n            if (direction && current < previous) {\n                return false;\n            }\n            if (!direction && current > previous) {\n                return false;\n            }\n            previous = current;\n        }\n        return true;",
        "grade-23": {
            "execution": 1
        },
        "173": "if (l.size() == 0) {\n            return true;\n        }\n        int direction = 0;\n        for (int i = 1; i < l.size(); i++) {\n            int this_dir = Integer.signum(l.get(i) - l.get(i - 1));\n            if (this_dir != 0) {\n                if (direction == 0) {\n                    direction = this_dir;\n                } else if (direction != this_dir) {\n                    return false;\n                }\n            }\n        }\n        return true;",
        "grade-173": {
            "execution": 1
        },
        "122": "int d = l.get(1) - l.get(0);\n        for (int i = 2; i < l.size(); i++) {\n            if (l.get(i) - l.get(i - 1) * d < 0) {\n                return false;\n            }\n        }\n        return true;",
        "grade-122": {
            "execution": 0
        },
        "9": "return monotonic(l, 0, 0);",
        "grade-9": {
            "execution": 0
        },
        "8": "ArrayList<Integer> sorted = new ArrayList<Integer>(l);\n        Collections.sort(sorted);\n        if (sorted.equals(l)) {\n            return true;\n        }\n        Collections.reverse(sorted);\n        if (sorted.equals(l)) {\n            return true;\n        }\n        return false;",
        "grade-8": {
            "execution": 1
        },
        "24": "if (l.size() <= 1) return true;\n        int left = 0;\n        int right = l.size() - 1;\n        while (left < right) {\n            if (l.get(left) > l.get(left + 1)) {\n                // Decreasing\n                while (left < right) {\n                    if (l.get(left) < l.get(left + 1)) return false;\n                    left += 1;\n                }\n            } else if (l.get(left) < l.get(left + 1)) {\n                // Increasing\n                while (left < right) {\n                    if (l.get(left) > l.get(left + 1)) return false;\n                    left += 1;\n                }\n            } else {\n                // Equal\n                left += 1;\n            }\n        }\n        return true;",
        "grade-24": {
            "execution": 1
        },
        "60": "if (l.size() == 0) return true;\n        boolean increasing = true;\n        boolean decreasing = true;\n        int last = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            int x = l.get(i);\n            if (x > last) decreasing = false;\n            if (x < last) increasing = false;\n            last = x;\n        }\n        return increasing || decreasing;",
        "grade-60": {
            "execution": 1
        },
        "64": "boolean increasing = true;\n        boolean decreasing = true;\n        for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) < l.get(i + 1))\n                decreasing = false;\n            if (l.get(i) > l.get(i + 1))\n                increasing = false;\n        }\n        return increasing || decreasing;",
        "grade-64": {
            "execution": 1
        },
        "148": "int t = 0;\n        for (int i = 0; i < l.size() - 1; i++) {\n            int a = Integer.compare(l.get(i), l.get(i + 1));\n            if (t == 0) {\n                t = a;\n            } else if (t != a) {\n                return false;\n            }\n        }\n        return true;",
        "grade-148": {
            "execution": 0
        },
        "177": "if (l.size() <= 1) return true;\n        boolean inc = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1; i++) {\n            if (inc) {\n                if (l.get(i) > l.get(i + 1)) return false;\n            } else {\n                if (l.get(i) < l.get(i + 1)) return false;\n            }\n        }\n        return true;",
        "grade-177": {
            "execution": 1
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer, obtain its roman numeral equivalent as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <= 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>> int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n    public static String intToMiniRoman(int number) {\n",
        "snippet": [
            "        List<Integer> num = Arrays.asList(1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000);\n        List<String> sym = Arrays.asList(\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\");\n        int i = 12;\n        String res = \"\";\n        while (number > 0) {\n            int div = number / num.get(i);\n            number %= num.get(i);\n            while (div != 0) {\n                res += sym.get(i);\n                div -= 1;\n            }\n            i -= 1;\n        }\n        return res.toLowerCase();\n    }\n}"
        ],
        "simplified": "Given a positive integer, obtain its roman numeral equivalent as a string, and return it in lowercase. Restrictions: 1 <= num <= 1000",
        "task_id": "156",
        "36": "// S T U D E N T S\n        // #Y O U R  C O D E H E R E#\n        String res = \"\";\n        while (number >= 100) {\n            res += \"c\";\n            number -= 100;\n        }\n        while (number >= 50) {\n            res += \"l\";\n            number -= 50;\n        }\n        while (number >= 10) {\n            res += \"x\";\n            number -= 10;\n        }\n        while (number >= 5) {\n            res += \"v\";\n            number -= 5;\n        }\n        while (number >= 1) {\n            res += \"i\";\n            number -= 1;\n        }\n        return res;",
        "grade-36": {
            "execution": 0
        },
        "7": "String roman = \"\";\n        int x = number / 100;\n        for (int i = 0; i < x; i++) {\n            roman += \"c\";\n        }\n        number = number % 100;\n        x = number / 50;\n        for (int i = 0; i < x; i++) {\n            roman += \"l\";\n        }\n        number = number % 50;\n        x = number / 10;\n        for (int i = 0; i < x; i++) {\n            roman += \"x\";\n        }\n        number = number % 10;\n        x = number / 5;\n        for (int i = 0; i < x; i++) {\n            roman += \"v\";\n        }\n        number = number % 5;\n        for (int i = 0; i < number; i++) {\n            roman += \"i\";\n        }\n        return roman;",
        "grade-7": {
            "execution": 0
        },
        "88": "String roman = \"\";\n        while (number > 0) {\n            if (number >= 1000) {\n                roman += \"m\";\n                number -= 1000;\n            } else if (number >= 900) {\n                roman += \"cm\";\n                number -= 900;\n            } else if (number >= 500) {\n                roman += \"d\";\n                number -= 500;\n            } else if (number >= 400) {\n                roman += \"cd\";\n                number -= 400;\n            } else if (number >= 100) {\n                roman += \"c\";\n                number -= 100;\n            } else if (number >= 90) {\n                roman += \"xc\";\n                number -= 90;\n            } else if (number >= 50) {\n                roman += \"l\";\n                number -= 50;\n            } else if (number >= 40) {\n                roman += \"xl\";\n                number -= 40;\n            } else if (number >= 10) {\n                roman += \"x\";\n                number -= 10;\n            } else if (number >= 9) {\n                roman += \"ix\";\n                number -= 9;\n            } else if (number >= 5) {\n                roman += \"v\";\n                number -= 5;\n            } else if (number >= 4) {\n                roman += \"iv\";\n                number -= 4;\n            } else if (number >= 1) {\n                roman += \"i\";\n                number -= 1;\n            }\n        }\n        return roman;",
        "grade-88": {
            "execution": 1
        },
        "77": "// BEGIN\n        // END",
        "grade-77": {
            "execution": 0
        },
        "72": "assert(number >= 1 && number <= 1000);\n        var result = new StringBuilder();\n        var numeralMap = Map.of(1, \"i\", 5, \"v\", 10, \"x\", 50, \"l\", 100, \"c\", 500, \"d\", 1000, \"m\");\n        int currentPlace = 0;\n        while (number > 0) {\n            int currentDigit = number % 10;\n            var currentRomanDigit = new StringBuilder();\n            if (currentDigit == 9) {\n                currentRomanDigit.append(numeralMap.get(1 * (int) Math.pow(10, currentPlace)));\n                currentRomanDigit.append(numeralMap.get(1 * (int) Math.pow(10, currentPlace + 1)));\n            } else if (currentDigit == 4) {\n                currentRomanDigit.append(numeralMap.get(1 * (int) Math.pow(10, currentPlace)));\n                currentRomanDigit.append(numeralMap.get(5 * (int) Math.pow(10, currentPlace)));\n            } else {\n                if (currentDigit >= 5) {\n                    currentRomanDigit.append(numeralMap.get(5 * (int) Math.pow(10, currentPlace)));\n                    currentDigit -= 5;\n                }\n                for (int j = 0; j < currentDigit; j++) {\n                    currentRomanDigit.append(numeralMap.get(1 * (int) Math.pow(10, currentPlace)));\n                }\n            }\n            result.insert(0, currentRomanDigit);\n            number /= 10;\n            currentPlace++;\n        }\n        return result.toString();",
        "grade-72": {
            "execution": 1
        },
        "43": "// your code here",
        "grade-43": {
            "execution": 0
        },
        "34": "throw new UnsupportedOperationException(\"Waiting to be implemented.\");",
        "grade-34": {
            "execution": 0
        },
        "173": "StringBuilder builder = new StringBuilder();\n        int[] numerals = {100, 10, 1};\n        String[] chars = {\"c\", \"x\", \"i\"};\n        int[] places = {1, 10, 100};\n        for (int i = 0; i < numerals.length; i++) {\n            int remainder = number % numerals[i];\n            int times = (number - remainder) / numerals[i];\n            switch (times) {\n                case 9:\n                    builder.append(chars[i + 1] + chars[i - 1]);\n                    break;\n                case 4:\n                    builder.append(chars[i + 1] + chars[i]);\n                    break;\n                default:\n                    for (int j = 0; j < times; j++) {\n                        builder.append(chars[i]);\n                    }\n                    break;\n            }\n            number = remainder;\n        }\n        return builder.toString();",
        "grade-173": {
            "execution": 0
        },
        "27": "int[] numerals = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n      String[] romans = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n      String result = \"\";\n      int x = 0;\n      while (number > 0) {\n        int factor = number / numerals[x];\n        number = number - factor * numerals[x];\n        while (factor > 0) {\n          result += romans[x];\n          factor--;\n        }\n        x++;\n      }\n      return result;",
        "grade-27": {
            "execution": 1
        },
        "189": "String[] ones = {\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"};\n        String[] tens = {\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"};\n        String[] hundreds = {\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"};\n        String[] thousands = {\"\", \"m\", \"mm\", \"mmm\"};\n        return thousands[number / 1000] + hundreds[(number % 1000) / 100] + tens[(number % 100) / 10] + ones[number % 10];",
        "grade-189": {
            "execution": 1
        },
        "134": "String roman = \"\";\n        if (number >= 500) {\n            roman += \"d\";\n            number -= 500;\n        }\n        for (int i = 0; i < number / 100; i++) {\n            roman += \"c\";\n        }\n        number %= 100;\n        if (number >= 50) {\n            roman += \"l\";\n            number -= 50;\n        }\n        for (int i = 0; i < number / 10; i++) {\n            roman += \"x\";\n        }\n        number %= 10;\n        if (number >= 5) {\n            roman += \"v\";\n            number -= 5;\n        }\n        for (int i = 0; i < number; i++) {\n            roman += \"i\";\n        }\n        return roman;",
        "grade-134": {
            "execution": 0
        },
        "9": "String[][] symbols = {\n            {\"i\", \"v\", \"x\"},\n            {\"x\", \"l\", \"c\"},\n            {\"c\", \"d\", \"m\"},\n            {\"m\", \"\", \"\"},\n        };\n        return \"\";",
        "grade-9": {
            "execution": 0
        },
        "8": "return null;",
        "grade-8": {
            "execution": 0
        },
        "28": "StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < number; i++) {\n            sb.append('i');\n        }\n        return sb.toString().replaceAll(\"iiiii\", \"v\").replaceAll(\"iiii\", \"iv\").replaceAll(\"viv\", \"ix\").replaceAll(\"vv\", \"x\").replaceAll(\"viv\", \"ix\").replaceAll(\"ixx\", \"xx\").replaceAll(\"lx\", \"xc\").replaceAll(\"llx\", \"lxc\").replaceAll(\"lllx\", \"xc\").replaceAll(\"ddccc\", \"cm\").replaceAll(\"ddcc\", \"cdc\").replaceAll(\"dddcc\", \"cm\").replaceAll(\"dddc\", \"mcd\").replaceAll(\"ccccc\", \"d\").replaceAll(\"cccc\", \"cd\").replaceAll(\"dcd\", \"cm\").replaceAll(\"dccc\", \"cm\").replaceAll(\"xxx\", \"c\");",
        "grade-28": {
            "execution": 0
        },
        "70": "String result = \"\";\n        while (number > 0) {\n            switch (number) {\n                case 1:\n                    result += \"i\";\n                    number -= 1;\n                    break;\n                case 2:\n                    result += \"ii\";\n                    number -= 2;\n                    break;\n                case 3:\n                    result += \"iii\";\n                    number -= 3;\n                    break;\n                case 4:\n                    result += \"iv\";\n                    number -= 4;\n                    break;\n                case 5:\n                    result += \"v\";\n                    number -= 5;\n                    break;\n                case 6:\n                    result += \"vi\";\n                    number -= 6;\n                    break;\n                case 7:\n                    result += \"vii\";\n                    number -= 7;\n                    break;\n                case 8:\n                    result += \"viii\";\n                    number -= 8;\n                    break;\n                case 9:\n                    result += \"ix\";\n                    number -= 9;\n                    break;\n                case 10:\n                    result += \"x\";\n                    number -= 10;\n                    break;\n                case 20:\n                    result += \"xx\";\n                    number -= 20;\n                    break;\n                case 30:\n                    result += \"xxx\";\n                    number -= 30;\n                    break;\n                case 40:\n                    result += \"xl\";\n                    number -= 40;\n                    break;\n                case 50:\n                    result += \"l\";\n                    number -= 50;\n                    break;\n                case 60:\n                    result += \"lx\";\n                    number -= 60;\n                    break;\n                case 70:\n                    result += \"lxx\";\n                    number -= 70;\n                    break;\n                case 80:\n                    result += \"lxxx\";\n                    number -= 80;\n                    break;\n                case 90:\n                    result += \"xc\";\n                    number -= 90;\n                    break;\n                case 100:\n                    result += \"c\";\n                    number -= 100;\n                    break;\n                case 200:\n                    result += \"cc\";\n                    number -= 200;\n                    break;\n                case 300:\n                    result += \"ccc\";\n                    number -= 300;\n                    break;\n                case 400:\n                    result += \"cd\";\n                    number -= 400;",
        "grade-70": {
            "execution": 0
        },
        "74": "if(number < 1 || number > 1000) throw new IllegalArgumentException(\"Number out of range\");\n        return IntStream.range(0, number).mapToObj(i -> \"i\").collect(Collectors.joining(\"\"));",
        "grade-74": {
            "execution": 0
        },
        "161": "String result = \"\";\n        String[] romanNumerals = new String[]{\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n        int[] decimalNumbers = new int[]{1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        for (int i = 0; i < romanNumerals.length; i++) {\n            while (number >= decimalNumbers[i]) {\n                result += romanNumerals[i];\n                number -= decimalNumbers[i];\n            }\n        }\n        return result;",
        "grade-161": {
            "execution": 1
        },
        "195": "// Solution from challenge \"Integer to Roman\" on LeetCode:\n        // https://leetcode.com/problems/integer-to-roman/\n        int[] numbers = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        String[] romanNumeral = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        StringBuilder stringBuilder = new StringBuilder();\n        int i = 0;\n        while (number > 0) {\n            int k = number / numbers[i];\n            for (int j = 0; j < k; j++) {\n                stringBuilder.append(romanNumeral[i]);\n                number -= numbers[i];\n            }\n            i++;\n        }\n        return stringBuilder.toString().toLowerCase();",
        "grade-195": {
            "execution": 1
        },
        "181": "/* Code here */\n        return \"\";",
        "grade-181": {
            "execution": 0
        },
        "61": "String result = \"\";\n        // iterate from highest to lowest value\n        for (int i = 0; i < 10; i++) {\n            int value = (int)Math.pow(10, i);\n            if (number >= value) {\n                int frequency = number / value;\n                if (frequency > 0) {\n                    int maxRep = (i + 1) / 2;\n                    if (frequency > maxRep) {\n                        result += intToMiniRoman((int)Math.pow(10, i + 1));\n                        frequency -= maxRep;\n                    }\n                    while (frequency > 0) {\n                        result += valueToSymbol.get(value);\n                        frequency--;\n                    }\n                }\n                number = number % value;\n            }\n        }\n        return result;",
        "grade-61": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given two positive integers n and m, and your task is to compute the\n    // average of the integers from n through m (including n and m). \n    // Round the answer to the nearest integer and convert that to binary.\n    // If n is greater than m, return -1.\n    // Example:\n    // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10, 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static Union_String_int roundedAvg(int n, int m) {\n",
        "snippet": [
            "        if (n > m) {\n            return -1;\n        }\n        return Integer.toBinaryString((int) Math.round((double) (m + n) / 2));\n    }\n}"
        ],
        "simplified": "You are given two positive integers n and m, and your task is to compute the average of the integers from n through m (including n and m). Round the answer to the nearest integer and convert that to binary. If n is greater than m, return -1.",
        "task_id": "103",
        "168": "//return new Union_String_int();\n        if (n > m) return new Union_String_int(new Union_String_int.L_int(-1));\n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        double avg = (double) sum / (m - n + 1);\n        String out = \"0b\" + Integer.toBinaryString((int) Math.round(avg));\n        return new Union_String_int(new Union_String_int.L_String(out));",
        "grade-168": {
            "execution": 0
        },
        "30": "if (n > m) {\n            return new Union_String_int(\"\", -1);\n        }\n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        double avg = (double) sum / (m - n + 1);\n        int rounded = (int) Math.round(avg);\n        String binary = String.format(\"%10s\", Integer.toBinaryString(rounded)).replace(' ', '0');\n        return new Union_String_int(binary, -1);",
        "grade-30": {
            "execution": 0
        },
        "6": "if (n > m) {\n            return new Union_String_int(new Variant_int(-1));\n        }\n        double sum = 0;\n        int avg = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        avg = (int) Math.round(sum / (m - n + 1));\n        return new Union_String_int(new Variant_String(\"0b\" + Integer.toBinaryString(avg)));",
        "grade-6": {
            "execution": 0
        },
        "195": "if (n > m) {\n            return new Union_String_int(2);\n        }\n        double x = (double) (n + m) / 2;\n        String y = Integer.toBinaryString((int) Math.round(x));\n        return new Union_String_int(1, y);",
        "grade-195": {
            "execution": 0
        },
        "72": "if (n > m) {\n            return new Union_String_int(-1);\n        }\n        else {\n            int avg = (n + m) / 2;\n            String binary = Integer.toBinaryString(avg);\n            return new Union_String_int(\"0b\" + binary);\n        }",
        "grade-72": {
            "execution": 0
        },
        "64": "if (n > m) {\n            return new Union_String_int(\n                (int)0,\n                new Union_String_int(\n                    (int)0,\n                    new Union_String_int(\n                        (int)0,\n                        new Union_String_int(\n                            (int)0,\n                            new Union_String_int(\n                                (int)0,\n                                new Union_String_int(\n                                    (int)0,\n                                    new Union_String_int(\n                                        (int)0,\n                                        new Union_String_int(\n                                            (int)0,\n                                            new Union_String_int(\n                                                (int)0,\n                                                new Union_String_int(\n                                                    (int)0,\n                                                    new Union_String_int(\n                                                        (int)0,\n                                                        new Union_String_int(\n                                                            (int)0,\n                                                            new Union_String_int(\n                                                                (int)0,\n                                                                new Union_String_int(\n                                                                    (int)0,\n                                                                    new Union_String_int(\n                                                                        (int)0,\n                                                                        new Union_String_int(\n                                                                            (int)0,\n                                                                            new Union_String_int(\n                                                                                (int)0,\n                                                                                new Union_String_int(\n                                                                                    (int)0,\n                                                                                    new Union_String_int(\n                                                                                        (int)0,\n                                                                                        new Union_String_int(\n                                                                                            (int)0,\n                                                                                            new Union_String_int(\n                                                                                                (int)0,\n                                                                                                new Union_String_int(\n                                                                                                    (int)0,\n                                                                                                    new Union_String_int(\n                                                                                                        (int)0,\n                                                                                                        new Union_String_int(",
        "grade-64": {
            "execution": 0
        },
        "59": "if (n > m) return new Union_String_int(new Union_Void_int(), true);\n        float sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        float avg = sum / (m - n + 1);\n        int rounded = Math.round(avg);\n        int bin = Integer.parseInt(Integer.toBinaryString(rounded));\n        return new Union_String_int(new Union_Void_int(), false, \"0b\" + bin);",
        "grade-59": {
            "execution": 0
        },
        "37": "if (n > m) {\n            return new Union_String_int(\"\", -1);\n        }\n        BigInteger sum = BigInteger.ZERO;\n        BigInteger count = BigInteger.ZERO;\n        for (int i = n; i <= m; i++) {\n            sum = sum.add(BigInteger.valueOf(i));\n            count = count.add(BigInteger.ONE);\n        }\n        BigInteger avg = sum.divide(count);\n        String binary = \"0b\" + avg.toString(2);\n        return new Union_String_int(binary, 0);",
        "grade-37": {
            "execution": 0
        },
        "194": "if (n > m) {\n            return new Union_String_int(2, -1);\n        } else {\n            int sum = 0;\n            for (int i = n; i <= m; i++) {\n                sum += i;\n            }\n            String s = Integer.toBinaryString(Math.round((float) sum / (m - n + 1)));\n            return new Union_String_int(1, s);\n        }",
        "grade-194": {
            "execution": 0
        },
        "27": "if (n > m) {\n            return new Union_String_int(1, -1);\n        }\n        double sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        int avg = (int)Math.round(sum / (m - n + 1));\n        return new Union_String_int(0, \"0b\" + Integer.toBinaryString(avg));",
        "grade-27": {
            "execution": 0
        },
        "178": "// Your code here\n        return null;",
        "grade-178": {
            "execution": 0
        },
        "142": "if (n > m) {\n            return new Union_String_int(null, -1);\n        } else {\n            BigInteger sum = BigInteger.ZERO;\n            BigInteger count = BigInteger.ZERO;\n            for (int i = n; i <= m; i++) {\n                sum = sum.add(BigInteger.valueOf(i));\n                count = count.add(BigInteger.ONE);\n            }\n            BigInteger avg = sum.divide(count);\n            String avgBin = \"0b\" + avg.toString(2);\n            return new Union_String_int(avgBin, null);\n        }",
        "grade-142": {
            "execution": 0
        },
        "23": "return new Union_String_int();",
        "grade-23": {
            "execution": 0
        },
        "154": "if (n > m) return new Union_String_int(new TYPE_String(), \"-1\");\n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        int avg = (int) Math.round((double) sum / (m - n + 1));\n        return new Union_String_int(new TYPE_String(), \"0b\" + Integer.toBinaryString(avg));",
        "grade-154": {
            "execution": 0
        },
        "111": "if (n > m) {\n            return new Union_String_int(true, -1);\n        }\n        int average = (int) Math.round((n + m) / 2.0);\n        String binary = Integer.toBinaryString(average);\n        return new Union_String_int(false, \"0b\" + binary);",
        "grade-111": {
            "execution": 0
        },
        "8": "// IMPLEMENT ME\n        return null;",
        "grade-8": {
            "execution": 0
        },
        "7": "if (n > m) {\n            return new Union_String_int(new Variant1<>(-1));\n        } else {\n            int avg = (n + m) / 2;\n            StringBuilder result = new StringBuilder();\n            while (avg != 0) {\n                int rem = avg % 2;\n                result.append(rem);\n                avg = avg / 2;\n            }\n            result.reverse();\n            return new Union_String_int(new Variant1<>(\"0b\" + result.toString()));\n        }",
        "grade-7": {
            "execution": 0
        },
        "24": "if (n > m) {\n            return new Union_String_int(true, -1);\n        }\n        int total = 0;\n        for (int i = n; i <= m; i++) {\n            total += i;\n        }\n        int average = total / (m - n + 1);\n        String averageBinary = Integer.toBinaryString(average);\n        return new Union_String_int(false, \"0b\" + averageBinary);",
        "grade-24": {
            "execution": 0
        },
        "57": "if (n > m) return new Union_String_int(-1);\n      double avg = Math.round((double)(n + m) / 2);\n      return new Union_String_int(Integer.toBinaryString((int)avg));",
        "grade-57": {
            "execution": 0
        },
        "61": "return m >= n ? new Union_String_int(Integer.toBinaryString(Math.round((n + m) / 2))) : new Union_String_int(-1);",
        "grade-61": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return True if all numbers in the list l are below threshold t.\n    // >>> below_threshold([1, 2, 4, 10], 100)\n    // True\n    // >>> below_threshold([1, 20, 4, 10], 5)\n    // False\n    public static boolean belowThreshold(ArrayList<Integer> l, int t) {\n",
        "snippet": [
            "        for (int e : l) {\n            if (e >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"
        ],
        "simplified": "Return True if all numbers in the list l are below threshold t.",
        "task_id": "52",
        "150": "for (int i = 0; i < l.size(); i++) {\n        if (l.get(i) >= t) return false;\n      }\n      return true;",
        "grade-150": {
            "execution": 1
        },
        "14": "return l.stream().allMatch( x -> x < t);",
        "grade-14": {
            "execution": 1
        },
        "3": "return l.stream().allMatch(x -> x<t);",
        "grade-3": {
            "execution": 1
        },
        "178": "// FIXME\n        return true;",
        "grade-178": {
            "execution": 0
        },
        "46": "for (int i = 0; i < l.size(); i++) {\n\t    if (l.get(i) >= t) {\n\t\treturn false;\n\t    }\n\t}\n\treturn true;",
        "grade-46": {
            "execution": 1
        },
        "41": "boolean isLessThan = true;\n        for (int number : l) {\n            if (number >= t) {\n                isLessThan = false;\n            }\n        }\n        return isLessThan;",
        "grade-41": {
            "execution": 1
        },
        "34": "return l.stream().allMatch(x -> x < t);",
        "grade-34": {
            "execution": 1
        },
        "18": "throw new UnsupportedOperationException(\"Replace this line with your code.\");",
        "grade-18": {
            "execution": 0
        },
        "13": "boolean below_threshold = true;\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) > t) {\n                below_threshold = false;\n            }\n        }\n        return below_threshold;",
        "grade-13": {
            "execution": 0
        },
        "161": "// Write your code here.\n        return l.stream().allMatch(x -> x < t);",
        "grade-161": {
            "execution": 1
        },
        "132": "// Fill in your code here\n        return l.stream().allMatch(x -> x < t);",
        "grade-132": {
            "execution": 1
        },
        "11": "return l.stream().allMatch(number -> number < t);",
        "grade-11": {
            "execution": 1
        },
        "140": "return l.stream().reduce(0, (x, y) -> x + y) < t;",
        "grade-140": {
            "execution": 0
        },
        "99": "boolean res = true;\n        for (int e : l) {\n            if (e >= t) {\n                res = false;\n                break;\n            }\n        }\n        return res;",
        "grade-99": {
            "execution": 1
        },
        "4": "for (int i : l) {\n            if (i >= t) {\n                return false;\n            }\n        }\n        return true;",
        "grade-4": {
            "execution": 1
        },
        "33": "// TODO: Fill in this method.\n        return l.stream().allMatch(x -> x < t);",
        "grade-33": {
            "execution": 1
        },
        "38": "// YOUR CODE HERE\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) > t) {\n                return false;\n            }\n        }\n        return true;",
        "grade-38": {
            "execution": 0
        },
        "124": "int flag = 0;\n      for(int i = 0; i < l.size(); i++) {\n        if(l.get(i) >= t) {\n          flag = 1;\n          break;\n        }\n      }\n      if(flag == 1)\n        return false;\n      else\n        return true;",
        "grade-124": {
            "execution": 1
        },
        "143": "return l.stream().mapToInt(x -> x).allMatch(x -> x < t);",
        "grade-143": {
            "execution": 1
        },
        "135": "if (l.isEmpty()) return true;\n        int head = l.get(0);\n        if (head > t) return false;\n        return belowThreshold(new ArrayList<Integer>(l.subList(1, l.size())), t);",
        "grade-135": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a string and returns True if the string\n    // length is a prime number or False otherwise\n    // Examples\n    // prime_length('Hello') == True\n    // prime_length('abcdcba') == True\n    // prime_length('kittens') == True\n    // prime_length('orange') == False\n    public static boolean primeLength(String string) {\n",
        "snippet": [
            "        int l = string.length();\n        if (l == 0 || l == 1) {\n            return false;\n        }\n        for (int i = 2; i < l; i++) {\n            if (l % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"
        ],
        "simplified": "Write a function that takes a string and returns True if the string length is a prime number or False otherwise",
        "task_id": "82",
        "33": "throw new UnsupportedOperationException(\"Delete this line and write your code here\");",
        "grade-33": {
            "execution": 0
        },
        "6": "int length = string.length();\n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;",
        "grade-6": {
            "execution": 0
        },
        "92": "// TODO write code here to make the test cases pass\n        return false;",
        "grade-92": {
            "execution": 0
        },
        "77": "return true;",
        "grade-77": {
            "execution": 0
        },
        "71": "// Write your code here\n        int len = string.length();\n        if (len == 2 || len == 3) {\n            return true;\n        }\n        if (len % 2 == 0 || len % 3 == 0) {\n            return false;\n        }\n        int i = 5;\n        int w = 2;\n        while (i * i <= len) {\n            if (len % i == 0) {\n                return false;\n            }\n            i += w;\n            w = 6 - w;\n        }\n        return true;",
        "grade-71": {
            "execution": 0
        },
        "43": "// First, we have to convert the string to a length number\n        int length = string.length();\n        // Now we can check if the length is a prime number\n        // You do that by dividing the length by a range of numbers\n        // If the length is evenly divisible by any number other than\n        // 1 and itself, then the length is not a prime number\n        // We can do this with a for loop\n        for (int i = 2; i < length; i++) {\n            // We need an if statement to check if the length is divisible\n            // by i\n            if (length % i == 0) {\n                // If length is divisible by i, then we return False\n                return false;\n            }\n        }\n        // If we reach this line, we know the length is a prime number\n        return true;",
        "grade-43": {
            "execution": 0
        },
        "31": "int length = string.length();\n        if (length == 1) {\n            return false;\n        } else if (length == 2) {\n            return true;\n        }\n        for (int i = 2; i < length; i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;",
        "grade-31": {
            "execution": 0
        },
        "26": "return 0 < 1;",
        "grade-26": {
            "execution": 0
        },
        "158": "int length = string.length();\n        for (int i = 2; i <= length / 2; i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;",
        "grade-158": {
            "execution": 0
        },
        "8": "return Arrays.stream(new int[]{2, 3, 5, 7, 11}).anyMatch(x -> x == string.length());",
        "grade-8": {
            "execution": 1
        },
        "7": "if (string.length() == 0) {\n            return false;\n        }\n        int count = 0;\n        for (int i = 1; i <= string.length(); i++) {\n            if (string.length() % i == 0) {\n                count++;\n            }\n        }\n        if (count == 2) {\n            return true;\n        }\n        return false;",
        "grade-7": {
            "execution": 1
        },
        "27": "throw new UnsupportedOperationException(\"Prime Length not implemented\");",
        "grade-27": {
            "execution": 0
        },
        "69": "int length = string.length();\n        for (int i = 2; i <= length / 2; i++) {\n            if (length % i == 0)\n                return false;\n        }\n        return true;",
        "grade-69": {
            "execution": 0
        },
        "74": "int num = string.length();\n        int count = 0;\n        for (int i = 2; i <= num; i++) {\n            if (num % i == 0) {\n                count++;\n            }\n        }\n        if (count == 1) {\n            return true;\n        } else {\n            return false;\n        }",
        "grade-74": {
            "execution": 1
        },
        "188": "boolean result = false;\n        if (string.length() == 2 || string.length() == 3 || string.length() == 5 || string.length() == 7 || string.length() == 11 || string.length() == 13 || string.length() == 17 || string.length() == 19 || string.length() == 23 || string.length() == 29 || string.length() == 31 || string.length() == 37 || string.length() == 41 || string.length() == 43 || string.length() == 47 || string.length() == 53 || string.length() == 59 || string.length() == 61 || string.length() == 67 || string.length() == 71 || string.length() == 73 || string.length() == 79 || string.length() == 83 || string.length() == 89 || string.length() == 97) {\n            result = true;\n        } else {\n            result = false;\n        }\n        return result;",
        "grade-188": {
            "execution": 1
        },
        "63": "return BigInteger.valueOf(string.length()).isProbablePrime(1);",
        "grade-63": {
            "execution": 1
        },
        "156": "int length = string.length();\n        return Problem.isPrime(length);",
        "grade-156": {
            "execution": 0
        },
        "70": "// Enter code here\n        return true;",
        "grade-70": {
            "execution": 0
        },
        "166": "return null;",
        "grade-166": {
            "execution": 0
        },
        "96": "if (string.length() <= 1) {\n            return false;\n        }\n        for (int i = 2; i < string.length(); i++) {\n            if (string.length() % i == 0) {\n                return false;\n            }\n        }\n        return true;",
        "grade-96": {
            "execution": 1
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Check if in given list of numbers, are any two numbers closer to each other than\n    // given threshold.\n    // >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    // False\n    // >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    // True\n    public static boolean hasCloseElements(ArrayList<Float> numbers, float threshold) {\n",
        "snippet": [
            "        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                double distance = Math.abs(numbers.get(i) - numbers.get(j));\n                if (distance < threshold) return true;\n            }\n        }\n        return false;\n    }\n}"
        ],
        "simplified": "Check if in given list of numbers, are any two numbers closer to each other than given threshold.",
        "task_id": "0",
        "33": "float dist = 0.0f;\n        float minDist = Float.MAX_VALUE;\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                dist = Math.abs(numbers.get(i) - numbers.get(j));\n                if (dist < minDist) {\n                    minDist = dist;\n                }\n            }\n        }\n        if (minDist <= threshold) {\n            return true;\n        }\n        return false;",
        "grade-33": {
            "execution": 1
        },
        "7": "int length = numbers.size();\n        for (int i = 0; i < length; i++) {\n            for (int j = i + 1; j < length; j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;",
        "grade-7": {
            "execution": 1
        },
        "101": "if (numbers.size() <= 1) return false;\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            float num1 = numbers.get(i);\n            for (int j = i + 1; j < numbers.size(); j++) {\n                float num2 = numbers.get(j);\n                if (Math.abs(num1 - num2) < threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;",
        "grade-101": {
            "execution": 1
        },
        "91": "Collections.sort(numbers);\n\tfor (int i = 0; i < numbers.size() - 1; i++) {\n\t    if (numbers.get(i + 1) - numbers.get(i) < threshold) {\n\t\treturn true;\n\t    }\n\t}\n\treturn false;",
        "grade-91": {
            "execution": 1
        },
        "80": "// Let's say we have two numbers a and b.\n        // Let's suppose we already know that a < b.\n        // If a - b < threshold, then a < b - threshold.\n        // If a - b > threshold, then a > b - threshold.\n        // Therefore, if b is closer to a than threshold,\n        // then b is closer to a than a - threshold.\n        // This allows us to find the closeness by sorting.\n        numbers.sort(Comparator.naturalOrder());\n        int length = numbers.size();\n        for (int i = 0; i < length - 1; i++) {\n            float a = numbers.get(i);\n            float b = numbers.get(i + 1);\n            if (b < a - threshold) {\n                return true;\n            }\n        }\n        return false;",
        "grade-80": {
            "execution": 0
        },
        "43": "// generate combinations of 2 numbers\n        Iterator<Pair<Float, Float>> it = combinations(numbers, 2);\n        while (it.hasNext()) {\n            Pair<Float, Float> p = it.next();\n            float v1 = p.getValue0();\n            float v2 = p.getValue1();\n            float diff = Math.abs(v1 - v2);\n            if (diff < threshold) {\n                return true;\n            }\n        }\n        return false;",
        "grade-43": {
            "execution": 0
        },
        "31": "for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                float dist = Math.abs(numbers.get(i) - numbers.get(j));\n                if (dist < threshold)\n                    return true;\n            }\n        }\n        return false;",
        "grade-31": {
            "execution": 1
        },
        "27": "for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (numbers.get(i) + threshold > numbers.get(j)\n                        && numbers.get(i) - threshold < numbers.get(j)) {\n                    return true;\n                }\n            }\n        }\n        return false;",
        "grade-27": {
            "execution": 1
        },
        "161": "throw new RuntimeException(\"not implemented\");",
        "grade-161": {
            "execution": 0
        },
        "9": "// Sort the list of numbers\n        Collections.sort(numbers);\n        int l = numbers.size();\n        // For each number in list, check if it has a close number\n        for (int i = 0; i < l; i++) {\n            // Check if there is a number after this one\n            if (i + 1 < l) {\n                // Get the difference between this number and the next one\n                float diff = numbers.get(i + 1) - numbers.get(i);\n                // If difference is smaller than threshold, return true\n                if (diff < threshold) {\n                    return true;\n                }\n            }\n        }\n        // There is no close numbers, return false\n        return false;",
        "grade-9": {
            "execution": 1
        },
        "8": "try {\n            boolean hasCloseElements = false;\n            for (Float i : numbers) {\n                for (Float j : numbers) {\n                    if (Math.abs(i - j) < threshold) {\n                        hasCloseElements = true;\n                    }\n                }\n            }\n            return hasCloseElements;\n        } catch (Exception exception) {\n            System.out.println(exception);\n            return false;\n        }",
        "grade-8": {
            "execution": 0
        },
        "28": "// return true if in numbers are any two numbers closer to each other than threshold,\n        // false otherwise\n        boolean answer = false;\n        if (numbers.size() >= 2) {\n            for (int i = 0; i < numbers.size() - 1; i++) {\n                for (int j = i + 1; j < numbers.size(); j++) {\n                    if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold) {\n                        answer = true;\n                        break;\n                    }\n                }\n            }\n        }\n        return answer;",
        "grade-28": {
            "execution": 1
        },
        "76": "boolean hasCloseElements = false;\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold) {\n                    hasCloseElements = true;\n                    break;\n                }\n            }\n        }\n        return hasCloseElements;",
        "grade-76": {
            "execution": 1
        },
        "83": "ArrayList<Float> sortedNums = new ArrayList<>(numbers);\n        Collections.sort(sortedNums);\n        for (int i = 0; i < sortedNums.size() - 1; i++) {\n            if (sortedNums.get(i + 1) - sortedNums.get(i) < threshold) {\n                return true;\n            }\n        }\n        return false;",
        "grade-83": {
            "execution": 1
        },
        "195": "Collections.sort(numbers);\n        int l = numbers.size();\n        for (int i = 0; i < l - 1; i++) {\n            if (numbers.get(i + 1) - numbers.get(i) < threshold) {\n                return true;\n            }\n        }\n        return false;",
        "grade-195": {
            "execution": 1
        },
        "68": "// Implement this.\n        // You can edit code here to test this method.\n        Collections.sort(numbers);\n        int n = numbers.size();\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 0; i < n - 1; i++) {\n            if (Math.abs(numbers.get(i) - numbers.get(i + 1)) < threshold) {\n                return true;\n            }\n        }\n        return false;",
        "grade-68": {
            "execution": 1
        },
        "159": "Collections.sort(numbers);\n        boolean hasCloseElements = false;\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (Math.abs(numbers.get(i) - numbers.get(i + 1)) < threshold) {\n                hasCloseElements = true;\n                break;\n            }\n        }\n        return hasCloseElements;",
        "grade-159": {
            "execution": 1
        },
        "79": "// YOUR CODE HERE\n        // Sort in O(nlogn)\n        Collections.sort(numbers);\n        // Compare in O(n)\n        // Note: You can also use for each loop for better syntax\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (Math.abs(numbers.get(i) - numbers.get(i + 1)) < threshold) {\n                return true;\n            }\n        }\n        return false;",
        "grade-79": {
            "execution": 1
        },
        "173": "int size = numbers.size();\n        float number = 0;\n        int index = 0;\n        while (index < size) {\n            int i = 0;\n            number = numbers.get(index);\n            while (i < size) {\n                float number2 = numbers.get(i);\n                float distance = number - number2;\n                distance = Math.abs(distance);\n                if (distance <= threshold) {\n                    return true;\n                }\n                i = i + 1;\n            }\n            index = index + 1;\n        }\n        return false;",
        "grade-173": {
            "execution": 0
        },
        "102": "boolean hasClose = false;\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                float diff = Math.abs(numbers.get(i) - numbers.get(j));\n                if (diff < threshold) {\n                    hasClose = true;\n                    break;\n                }\n            }\n        }\n        return hasClose;",
        "grade-102": {
            "execution": 1
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Task\n    // We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    // then check if the result string is palindrome.\n    // A string is called palindrome if it reads the same backward as forward.\n    // You should return a tuple containing the result string and True/False for the check.\n    // Example\n    // For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    public static Pair<String, Boolean> reverseDelete(String s, String c) {\n",
        "snippet": [
            "        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (c.indexOf(ch) == -1) {\n                sb.append(ch);\n            }\n        }\n        return Arrays.asList(sb.toString(), sb.toString().equals(sb.reverse().toString()));\n    }\n}"
        ],
        "simplified": "Task We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a tuple containing the result string and True/False for the check.",
        "task_id": "112",
        "31": "s = s.replace(\"a\", \"\");\n        s = s.replace(\"b\", \"\");\n        s = s.replace(\"c\", \"\");\n        s = s.replace(\"d\", \"\");\n        s = s.replace(\"e\", \"\");\n        s = s.replace(\"f\", \"\");\n        s = s.replace(\"g\", \"\");\n        s = s.replace(\"h\", \"\");\n        s = s.replace(\"i\", \"\");\n        s = s.replace(\"j\", \"\");\n        s = s.replace(\"k\", \"\");\n        s = s.replace(\"l\", \"\");\n        s = s.replace(\"m\", \"\");\n        s = s.replace(\"n\", \"\");\n        s = s.replace(\"o\", \"\");\n        s = s.replace(\"p\", \"\");\n        s = s.replace(\"q\", \"\");\n        s = s.replace(\"r\", \"\");\n        s = s.replace(\"s\", \"\");\n        s = s.replace(\"t\", \"\");\n        s = s.replace(\"u\", \"\");\n        s = s.replace(\"v\", \"\");\n        s = s.replace(\"w\", \"\");\n        s = s.replace(\"x\", \"\");\n        s = s.replace(\"y\", \"\");\n        s = s.replace(\"z\", \"\");\n        StringBuffer t = new StringBuffer(s);\n        t.reverse();\n        return new Pair<String, Boolean>(t.toString(), true);",
        "grade-31": {
            "execution": 0
        },
        "6": "// Your code here\n        return new Pair<>(\"\",false);",
        "grade-6": {
            "execution": 0
        },
        "84": "for (char ch : c.toCharArray()) {\n            s = s.replace(Character.toString(ch), \"\");\n        }\n        return new Pair<String, Boolean>(s, isPalindrome(s));",
        "grade-84": {
            "execution": 0
        },
        "75": "StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            if (c.indexOf(s.charAt(i)) == -1) {\n                sb.append(s.charAt(i));\n            }\n        }\n        String palindrome = sb.toString();\n        boolean isPalindrome = checkPalindrome(palindrome);\n        return new Pair<String, Boolean>(palindrome, isPalindrome);",
        "grade-75": {
            "execution": 0
        },
        "68": "// We will iterate over the second string and then we will go over the first string\n        // and build a string without the characters in the second string.\n        // In the end we will check if the built string is palindrome.\n        // Let's assume that the length of the second string is q.\n        // So the complexity of this algorithm is O(n * q).\n        StringBuilder result = new StringBuilder();\n        // Iterating over the second string\n        for (int i = 0; i < s.length(); i++) {\n            char character = s.charAt(i);\n            if (c.indexOf(character) == -1) {\n                result.append(character);\n            }\n        }\n        // Checking if the string is palindrome\n        // We will iterate over the first and the last character and check if they are equal.\n        // The complexity of this algorithm is O(n / 2).\n        for (int i = 0; i < result.length() / 2; i++) {\n            char first = result.charAt(i);\n            char last = result.charAt(result.length() - i - 1);\n            if (first != last) {\n                return new Pair<>(result.toString(), false);\n            }\n        }\n        return new Pair<>(result.toString(), true);",
        "grade-68": {
            "execution": 0
        },
        "38": "// Your code here\n        StringBuilder sb = new StringBuilder();\n        StringBuilder cs = new StringBuilder();\n        String s_str = s.toLowerCase();\n        String c_str = c.toLowerCase();\n        for (int i = 0; i < s_str.length(); i++) {\n            if (!c_str.contains(String.valueOf(s_str.charAt(i)))) {\n                sb.append(s_str.charAt(i));\n            }\n        }\n        cs.append(sb.toString());\n        cs.reverse();\n        boolean check = cs.toString().equals(sb.toString());\n        return new Pair<String, Boolean>(sb.toString(), check);",
        "grade-38": {
            "execution": 0
        },
        "28": "for (int i = 0; i < c.length(); i++) {\n            s = s.replaceAll(c.substring(i, i + 1), \"\");\n        }\n        boolean result = true;\n        for (int i = 0; i < s.length() / 2; i++) {\n            if (s.charAt(i) != s.charAt(s.length() - i - 1))\n                result = false;\n        }\n        return new Pair<String, Boolean>(s, result);",
        "grade-28": {
            "execution": 0
        },
        "173": "StringBuilder newString = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            if (c.indexOf(s.charAt(i)) == -1)\n                newString.append(s.charAt(i));\n        }\n        StringBuilder reversed = new StringBuilder(newString);\n        reversed.reverse();\n        return Pair.with(newString.toString(), reversed.toString().equals(newString.toString()));",
        "grade-173": {
            "execution": 0
        },
        "23": "// Your code here\n        // Please, do not use the method reverse()\n        // You can use substring, indexOf\n        // For the algorithm, you can use the method reverse()\n        // It is forbidden to use regular expressions\n        return null;",
        "grade-23": {
            "execution": 0
        },
        "187": "if (s == null || c == null) return new Pair<String, Boolean>(null, false);\n        if (s.isEmpty() || c.isEmpty()) return new Pair<String, Boolean>(s, true);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            if (c.indexOf(s.charAt(i)) == -1) sb.append(s.charAt(i));\n        }\n        StringBuffer reverse = new StringBuffer(sb.toString());\n        return new Pair<String, Boolean>(sb.toString(), reverse.reverse().toString().equals(sb.toString()));",
        "grade-187": {
            "execution": 0
        },
        "134": "String s2 = new String(s);\n        for (int i = 0; i < c.length(); i++) {\n            int index = s2.indexOf(c.charAt(i));\n            while (index != -1) {\n                s2 = s2.substring(0, index) + s2.substring(index + 1);\n                index = s2.indexOf(c.charAt(i));\n            }\n        }\n        return new Pair<String, Boolean>(s2, isPalindrome(s2));",
        "grade-134": {
            "execution": 0
        },
        "8": "String result = \"\";\n        String temp = \"\";\n        String[] sArray = s.split(\"\");\n        String[] cArray = c.split(\"\");\n        for (int i = 0; i < sArray.length; i++) {\n            int j = 0;\n            while (j < cArray.length) {\n                if (sArray[i].equals(cArray[j])) {\n                    break;\n                }\n                j++;\n            }\n            if (j == cArray.length) {\n                result += sArray[i];\n            }\n        }\n        String[] resultArray = result.split(\"\");\n        for (int i = resultArray.length - 1; i >= 0; i--) {\n            temp += resultArray[i];\n        }\n        boolean check = result.equals(temp);\n        return new Pair<String, Boolean>(result, check);",
        "grade-8": {
            "execution": 0
        },
        "7": "// Implement this\n        for(int i = 0; i < c.length(); i++){\n            s = s.replaceAll(String.valueOf(c.charAt(i)),\"\");\n        }\n        return Pair.with(s,new StringBuilder(s).reverse().toString().equals(s));",
        "grade-7": {
            "execution": 0
        },
        "24": "boolean result = true;\n        String temp = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            if (!(c.contains(String.valueOf(s.charAt(i))))) {\n                temp += String.valueOf(s.charAt(i));\n            }\n        }\n        for (int i = 0; i < temp.length() / 2; i++) {\n            if (temp.charAt(i) != temp.charAt(temp.length() - 1 - i)) {\n                result = false;\n            }\n        }\n        return new Pair<String, Boolean>(temp, result);",
        "grade-24": {
            "execution": 0
        },
        "66": "StringBuilder sb = new StringBuilder();\n        StringBuilder temp = new StringBuilder();\n        boolean result = false;\n        char[] sArray = s.toCharArray();\n        char[] cArray = c.toCharArray();\n        for (int i = 0; i < sArray.length; i++) {\n            int j = 0;\n            while (j < cArray.length) {\n                if (sArray[i] == cArray[j])\n                    break;\n                j++;\n            }\n            if (j == cArray.length)\n                sb.append(sArray[i]);\n        }\n        for (int i = sb.length() - 1; i >= 0; i--)\n            temp.append(sb.charAt(i));\n        if (sb.toString().equals(temp.toString()))\n            result = true;\n        return new Pair<String, Boolean>(sb.toString(), result);",
        "grade-66": {
            "execution": 0
        },
        "71": "String removed = s.replaceAll(\"[\" + c + \"]\", \"\");\n        String reversed = new StringBuilder(removed).reverse().toString();\n        return new Pair<String, Boolean>(removed, removed.equals(reversed));",
        "grade-71": {
            "execution": 0
        },
        "162": "String a = s;\n        StringBuilder sb = new StringBuilder();\n        String cc = c;\n        String b = cc;\n        String result = \"\";\n        int index = 0;\n        boolean resultBool = false;\n        while (index < a.length()) {\n            if (b.indexOf(a.charAt(index)) != -1) {\n                index++;\n            } else {\n                sb.append(a.charAt(index));\n                index++;\n            }\n        }\n        result = sb.toString();\n        if (result.equals(new StringBuilder(result).reverse().toString())) {\n            resultBool = true;\n        }\n        return new Pair<String, Boolean>(result, resultBool);",
        "grade-162": {
            "execution": 0
        },
        "190": "// write your code here and return the tuple",
        "grade-190": {
            "execution": 0
        },
        "177": "HashSet<Character> set = new HashSet<Character>();\n      for(int i = 0; i < c.length(); i++)\n        set.add(c.charAt(i));\n      String s2 = \"\";\n      for(int i = 0; i < s.length(); i++)\n        if(!set.contains(s.charAt(i)))\n          s2 += s.charAt(i);\n      boolean isPalindrome = true;\n      for(int i = 0; i < s2.length()/2; i++)\n        if(s2.charAt(i) != s2.charAt(s2.length()-1-i))\n          isPalindrome = false;\n      return new Pair<String, Boolean>(s2, isPalindrome);",
        "grade-177": {
            "execution": 0
        },
        "57": "StringBuffer buff = new StringBuffer(s);\n        for (int i = 0; i < buff.length(); i++) {\n            if (c.indexOf(buff.charAt(i)) != -1) {\n                buff.deleteCharAt(i);\n                i--;\n            }\n        }\n        return new Pair<String, Boolean>(buff.toString(), buff.toString().equals(buff.reverse().toString()));",
        "grade-57": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Create a function that takes a string as input which contains only square brackets.\n    // The function should return True if and only if there is a valid subsequence of brackets \n    // where at least one bracket in the subsequence is nested.\n    // is_nested('[[]]') \u279e True\n    // is_nested('[]]]]]]][[[[[]') \u279e False\n    // is_nested('[][]') \u279e False\n    // is_nested('[]') \u279e False\n    // is_nested('[[][]]') \u279e True\n    // is_nested('[[]][[') \u279e True\n    public static boolean isNested(String string) {\n",
        "snippet": [
            "        List<Integer> opening_bracket_index = new ArrayList<>(), closing_bracket_index = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == '[') {\n                opening_bracket_index.add(i);\n            } else {\n                closing_bracket_index.add(i);\n            }\n        }\n        Collections.reverse(closing_bracket_index);\n        int i = 0, l = closing_bracket_index.size();\n        for (int idx : opening_bracket_index) {\n            if (i < l && idx < closing_bracket_index.get(i)) {\n                i += 1;\n            }\n        }\n        return i >= 2;\n    }\n}"
        ],
        "simplified": "Create a function that takes a string as input which contains only square brackets. The function should return True if and only if there is a valid subsequence of brackets where at least one bracket in the subsequence is nested.",
        "task_id": "132",
        "186": "// Create counter and results\n        int closeCount = 0;\n        int openCount = 0;\n        // Iterate over string\n        for (char c : string.toCharArray()) {\n            // If open bracket\n            if (c == '[') {\n                // Increment counter\n                openCount++;\n            }\n            // Else if close bracket\n            else if (c == ']') {\n                // Increment counter\n                closeCount++;\n            }\n            // If closeCount > openCount\n            if (closeCount > openCount) {\n                // Return false\n                return false;\n            }\n        }\n        // If close count is greater than 0 and open is greater than 0\n        if (closeCount > 0 && openCount > 0) {\n            // Return true\n            return true;\n        }\n        // Otherwise return false\n        return false;",
        "grade-186": {
            "execution": 0
        },
        "30": "var stack = new Stack<Character>();\n        for (var c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();",
        "grade-30": {
            "execution": 0
        },
        "6": "for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == '[') {\n                for (int j = i + 1; j < string.length(); j++) {\n                    if (string.charAt(j) == ']') {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;",
        "grade-6": {
            "execution": 0
        },
        "75": "int c1 = 0;\n        int c2 = 0;\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == '[') {\n                c1++;\n            } else {\n                c2++;\n            }\n        }\n        if (c1 != c2) {\n            return false;\n        }\n        return true;",
        "grade-75": {
            "execution": 0
        },
        "66": "if (string.length() % 2 != 0) {\n            return false;\n        }\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == '[') {\n                stack.push(c);\n            } else {\n                if (stack.empty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return true;",
        "grade-66": {
            "execution": 0
        },
        "60": "if (string.length() == 0) {\n            return false;\n        }\n        Stack<Character> stack = new Stack<>();\n        for (char ch : string.toCharArray()) {\n            if (ch == '[') {\n                stack.push(ch);\n            } else {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char pop = stack.pop();\n                if (pop != '[') {\n                    return false;\n                }\n            }\n        }\n        return true;",
        "grade-60": {
            "execution": 0
        },
        "37": "Stack<String> stack = new Stack<>();\n        boolean result = false;\n        for (int i = 0; i < string.length(); i++) {\n            String s = string.substring(i, i + 1);\n            if (s.equals(\"[\")) {\n                stack.push(s);\n            } else {\n                if (stack.size() == 0) {\n                    return false;\n                }\n                stack.pop();\n                if (stack.size() == 0) {\n                    result = true;\n                }\n            }\n        }\n        return result;",
        "grade-37": {
            "execution": 0
        },
        "27": "if(string.isEmpty()) return false;\n        Stack<Character> stack = new Stack<>();\n        for(int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if(c == '[') {\n                stack.push(c);\n            } else if(c == ']') {\n                if(stack.isEmpty()) {\n                    return false;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return !stack.isEmpty();",
        "grade-27": {
            "execution": 0
        },
        "197": "return string.indexOf(\"[\") > -1 && string.indexOf(\"]\") > -1;",
        "grade-197": {
            "execution": 0
        },
        "154": "boolean result = false;\n        if(string.length() > 0) {\n            Stack<Character> stack = new Stack<>();\n            for(int i = 0; i < string.length(); i++) {\n                char c = string.charAt(i);\n                if(c == '[') {\n                    stack.push(c);\n                } else if(c == ']') {\n                    if(stack.size() > 0) {\n                        char temp = stack.pop();\n                        if(temp == '[') {\n                            result = true;\n                        }\n                    }\n                }\n            }\n        }\n        return result;",
        "grade-154": {
            "execution": 0
        },
        "22": "int [] pos = new int[string.length()];\n        int count = 0;\n        for (int i = 0; i < string.length(); i++) {\n            pos[i] = count;\n            if (string.charAt(i) == '[') count++;\n            else count--;\n        }\n        for (int i = 0; i < string.length(); i++) {\n            if (pos[i] == 0) return false;\n            if (string.charAt(i) == ']' && pos[i] > pos[i+1]) return true;\n        }\n        return false;",
        "grade-22": {
            "execution": 0
        },
        "172": "int d = 0;\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == '[') {\n                d++;\n            } else {\n                d--;\n            }\n            if (d < 0) {\n                return false;\n            }\n        }\n        return d > 0;",
        "grade-172": {
            "execution": 0
        },
        "119": "int count = 0;\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == '[') count++;\n            else if (string.charAt(i) == ']') count--;\n            if (count < 0) return false;\n        }\n        return count == 0;",
        "grade-119": {
            "execution": 0
        },
        "8": "int counter = 0;\n        int temp = 0;\n        int nested = 0;\n        char current = ' ';\n        char next = ' ';\n        for (int i = 0; i < string.length(); i++) {\n            current = string.charAt(i);\n            if (i < string.length() - 1) {\n                next = string.charAt(i + 1);\n            }\n            if (current == '[' && next == '[') {\n                temp = i;\n                nested = 0;\n            }\n            if (current == ']' && next == ']') {\n                if (temp < i) {\n                    nested = 1;\n                }\n            }\n            if (current == '[' && next == ']') {\n                if (temp < i) {\n                    nested = 1;\n                }\n            }\n            if (current == ']' && next == '[') {\n                if (temp < i) {\n                    nested = 1;\n                }\n            }\n            counter += nested;\n        }\n        if (counter > 0) {\n            return true;\n        }\n        return false;",
        "grade-8": {
            "execution": 0
        },
        "7": "String[] arr = string.split(\"\");\n        int open = 0;\n        int close = 0;\n        for (String i : arr) {\n            if (i.equals(\"[\")) {\n                open++;\n            } else if (i.equals(\"]\")) {\n                close++;\n            }\n        }\n        if (open < close) {\n            return false;\n        }\n        int count = 0;\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i].equals(\"[\")) {\n                count++;\n            } else if (arr[i].equals(\"]\")) {\n                count--;\n            }\n            if (count < 0) {\n                return false;\n            }\n        }\n        return true;",
        "grade-7": {
            "execution": 0
        },
        "23": "char[] chars = string.toCharArray();\n        int i = 0;\n        int count = 0;\n        for (char ch : chars) {\n            if (ch == '[') {\n                count++;\n            } else if (ch == ']') {\n                count--;\n            }\n            if (count < 0) {\n                return false;\n            }\n        }\n        return count == 0;",
        "grade-23": {
            "execution": 0
        },
        "58": "int depth = 0;\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == '[') {\n                depth++;\n            } else if (c == ']') {\n                depth--;\n            }\n            if (depth < 0) return false;\n        }\n        return depth > 0;",
        "grade-58": {
            "execution": 0
        },
        "62": "// TODO: implement this function\n        return false;",
        "grade-62": {
            "execution": 0
        },
        "142": "Stack<Character> brackets = new Stack<>();\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == '[') {\n                brackets.push(string.charAt(i));\n            } else if (string.charAt(i) == ']') {\n                if (brackets.empty()) return false;\n                brackets.pop();\n            }\n        }\n        return brackets.empty();",
        "grade-142": {
            "execution": 0
        },
        "175": "int count = 0;\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == '[') {\n                count++;\n            } else if (string.charAt(i) == ']') {\n                count--;\n            }\n            if (count < 0) {\n                return false;\n            }\n        }\n        return true;",
        "grade-175": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // This function takes a list l and returns a list l' such that\n    // l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    // to the values of the even indicies of l, but sorted.\n    // >>> sort_even([1, 2, 3])\n    // [1, 2, 3]\n    // >>> sort_even([5, 6, 3, 4])\n    // [3, 6, 5, 4]\n    public static ArrayList<Integer> sortEven(ArrayList<Integer> l) {\n",
        "snippet": [
            "        List<Integer> even = new ArrayList<>();\n        for (int i = 0; i < l.size(); i += 2) {\n            even.add(l.get(i));\n        }\n        Collections.sort(even);\n        List<Integer> result = l;\n        for (int i = 0; i < l.size(); i += 2) {\n            result.set(i, even.get(i / 2));\n        }\n        return result;\n    }\n}"
        ],
        "simplified": "This function takes a list l and returns a list l' such that l' is identical to l in the odd indicies, while its values at the even indicies are equal to the values of the even indicies of l, but sorted.",
        "task_id": "37",
        "179": "ArrayList<Integer> lp = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                lp.add(l.get(i));\n            } else {\n                lp.add(Math.min(l.get(i), l.get(i-1)));\n            }\n        }\n        return lp;",
        "grade-179": {
            "execution": 0
        },
        "30": "ArrayList<Integer> s = new ArrayList<>();\n        int size = l.size();\n        ArrayList<Integer> even_indicies = new ArrayList<>();\n        for (int i = 0; i < size; i++) {\n            if (i % 2 == 0) {\n                even_indicies.add(l.get(i));\n            }\n        }\n        ArrayList<Integer> sorted_even_indicies = new ArrayList<>(even_indicies);\n        Collections.sort(sorted_even_indicies);\n        int n = 0;\n        for (int i = 0; i < size; i++) {\n            if (i % 2 == 0) {\n                s.add(sorted_even_indicies.get(n));\n                n++;\n            } else {\n                s.add(l.get(i));\n            }\n        }\n        return s;",
        "grade-30": {
            "execution": 1
        },
        "6": "ArrayList<Integer> l2 = new ArrayList<Integer>();\n\tArrayList<Integer> l3 = new ArrayList<Integer>();\n\tfor (int i = 0; i < l.size(); i++) {\n\t    if (i % 2 == 0) {\n\t\tl2.add(l.get(i));\n\t    } else {\n\t\tl3.add(l.get(i));\n\t    }\n\t}\n\tCollections.sort(l2);\n\tfor (int i = 0; i < l2.size(); i++) {\n\t    l3.add(i * 2, l2.get(i));\n\t}\n\treturn l3;",
        "grade-6": {
            "execution": 1
        },
        "77": "ArrayList<Integer> out = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0)\n                out.add(l.get(i));\n            else {\n                ArrayList<Integer> temp = new ArrayList<Integer>();\n                for (int j = 0; j < i; j++)\n                    if (j % 2 == 1)\n                        temp.add(out.get(j));\n                temp.add(l.get(i));\n                Collections.sort(temp);\n                out.addAll(temp);\n            }\n        }\n        return out;",
        "grade-77": {
            "execution": 0
        },
        "69": "// Write code here to implement this function.\n        return null;",
        "grade-69": {
            "execution": 0
        },
        "64": "ArrayList<Integer> ret = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                ret.add(l.get(i));\n            } else {\n                ArrayList<Integer> sublist = new ArrayList<>();\n                for (int j = i; j < l.size(); j++) {\n                    sublist.add(l.get(j));\n                }\n                Collections.sort(sublist);\n                for (int j = 0; j < sublist.size(); j++) {\n                    ret.add(sublist.get(j));\n                }\n                return ret;\n            }\n        }\n        return ret;",
        "grade-64": {
            "execution": 0
        },
        "39": "for (int i = 0; i < l.size(); i += 2) {\n            int start = i;\n            int end = i + 1;\n            while (end < l.size() && l.get(end) < l.get(end - 1)) {\n                Collections.swap(l, end, end - 1);\n                end++;\n            }\n        }\n        return l;",
        "grade-39": {
            "execution": 0
        },
        "28": "throw new UnsupportedOperationException(\"Student has not implemented this.\");",
        "grade-28": {
            "execution": 0
        },
        "190": "ArrayList<Integer> new_l = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                new_l.add(l.get(i));\n            } else {\n                ArrayList<Integer> evens = new ArrayList<Integer>();\n                for (int j = 0; j < l.size(); j++) {\n                    if (j % 2 == 0) {\n                        evens.add(l.get(j));\n                    }\n                }\n                Collections.sort(evens);\n                new_l.add(evens.get(i / 2));\n            }\n        }\n        return new_l;",
        "grade-190": {
            "execution": 0
        },
        "152": "ArrayList<Integer> l1 = new ArrayList<Integer>();\n        ArrayList<Integer> evens = new ArrayList<Integer>();\n        ArrayList<Integer> odds = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                odds.add(l.get(i));\n            } else {\n                evens.add(l.get(i));\n            }\n        }\n        Collections.sort(evens);\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l1.add(odds.get(i / 2));\n            } else {\n                l1.add(evens.get(i / 2));\n            }\n        }\n        return l1;",
        "grade-152": {
            "execution": 0
        },
        "23": "ArrayList<Integer> l1 = new ArrayList<Integer>();\n        ArrayList<Integer> l2 = new ArrayList<Integer>();\n        ArrayList<Integer> ret = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l1.add(l.get(i));\n            } else {\n                l2.add(l.get(i));\n            }\n        }\n        Collections.sort(l2);\n        int index = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                ret.add(l1.get(index));\n            } else {\n                ret.add(l2.get(index));\n                index++;\n            }\n        }\n        return ret;",
        "grade-23": {
            "execution": 0
        },
        "166": "// TODO: Your code here\n        ArrayList<Integer> l1 = new ArrayList<Integer>();\n        ArrayList<Integer> l2 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l1.add(l.get(i));\n            } else {\n                l2.add(l.get(i));\n            }\n        }\n        Collections.sort(l1);\n        for (int i = 0; i < l1.size(); i++) {\n            l.set(2 * i + 1, l1.get(i));\n        }\n        return l;",
        "grade-166": {
            "execution": 0
        },
        "117": "// TODO: Fill in this function\n        return l;",
        "grade-117": {
            "execution": 0
        },
        "8": "// TODO: Write your code here\n        ArrayList<Integer> sorted = new ArrayList<>();\n        int i = 0;\n        for (int num : l) {\n            if (i % 2 == 0) {\n                sorted.add(num);\n            } else {\n                ArrayList<Integer> temp = new ArrayList<>();\n                temp.add(num);\n                Collections.sort(temp);\n                sorted.add(temp.get(0));\n            }\n            i++;\n        }\n        return sorted;",
        "grade-8": {
            "execution": 0
        },
        "7": "// We can just do this in one pass by iterating through the list and\n        // if the index is even, we perform an insertion sort.\n        // If it is odd, we simply add that element.\n        // This is O(n^2) unfortunately, but we'll try to be as efficient as possible\n        ArrayList<Integer> results = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                // Insertion sort\n                // We first add the element to the results\n                results.add(l.get(i));\n                // Then we go through the results backwards until we've either\n                // reached the beginning of the list or we've found a number that\n                // is smaller than the one we inserted\n                for (int j = results.size() - 1; j > 0; j--) {\n                    if (results.get(j) < results.get(j - 1)) {\n                        // Swap the elements\n                        int tmp = results.get(j);\n                        results.set(j, results.get(j - 1));\n                        results.set(j - 1, tmp);\n                    } else {\n                        // We've found the right place in the list to put our number\n                        break;\n                    }\n                }\n            } else {\n                // Simply add the number to the results\n                results.add(l.get(i));\n            }\n        }\n        return results;",
        "grade-7": {
            "execution": 0
        },
        "24": "return l;",
        "grade-24": {
            "execution": 0
        },
        "62": "int n = l.size();\n        for (int i = 0; i < n; i += 2) {\n            int min_idx = i;\n            for (int j = i + 2; j < n; j += 2) {\n                if (l.get(j) < l.get(min_idx)) {\n                    min_idx = j;\n                }\n            }\n            int temp = l.get(i);\n            l.set(i, l.get(min_idx));\n            l.set(min_idx, temp);\n        }\n        return l;",
        "grade-62": {
            "execution": 1
        },
        "66": "ArrayList<Integer> sorted = new ArrayList<Integer>();\n        int index = 0;\n        while (index < l.size()) {\n            sorted.add(l.get(index));\n            index++;\n            if (index < l.size()) {\n                ArrayList<Integer> sublist = new ArrayList<Integer>();\n                while (index < l.size() && l.get(index) % 2 == 0) {\n                    sublist.add(l.get(index));\n                    index++;\n                }\n                Collections.sort(sublist);\n                sorted.addAll(sublist);\n            }\n        }\n        return sorted;",
        "grade-66": {
            "execution": 0
        },
        "141": "for (int i = 1; i < l.size(); i += 2) {\n            int index = i;\n            for (int j = i + 2; j < l.size(); j += 2) {\n                if (l.get(j) < l.get(index)) {\n                    index = j;\n                }\n            }\n            int tmp = l.get(i);\n            l.set(i, l.get(index));\n            l.set(index, tmp);\n        }\n        return l;",
        "grade-141": {
            "execution": 0
        },
        "169": "ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            int curr = l.get(i);\n            if (i % 2 == 0) {\n                result.add(curr);\n            } else {\n                result.add(curr);\n                int min = curr;\n                int minIdx = i;\n                for (int j = i + 1; j < l.size(); j++) {\n                    int val = l.get(j);\n                    if (j % 2 == 1) {\n                        if (val < min) {\n                            min = val;\n                            minIdx = j;\n                        }\n                    }\n                }\n                if (minIdx != i) {\n                    result.set(i, min);\n                    result.set(minIdx, curr);\n                }\n            }\n        }\n        return result;",
        "grade-169": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Create a function that takes 3 numbers.\n    // Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    // Returns false in any other cases.\n    // Examples\n    // any_int(5, 2, 7) \u279e True\n    // any_int(3, 2, 2) \u279e False\n    // any_int(3, -2, 1) \u279e True\n    // any_int(3.6, -2.2, 2) \u279e False\n    public static boolean anyInt(float x, float y, float z) {\n",
        "snippet": [
            "        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            return (int) x + (int) y == (int) z || (int) x + (int) z == (int) y || (int) y + (int) z == (int) x;\n        }\n        return false;\n    }\n}"
        ],
        "simplified": "Create a function that takes 3 numbers. Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers. Returns false in any other cases.",
        "task_id": "92",
        "32": "if (isInt(x) && isInt(y) && isInt(z))\n            return x + y == z || x + z == y || y + z == x;\n        return false;",
        "grade-32": {
            "execution": 0
        },
        "6": "return (x + y == z) || (x + z == y) || (y + z == x);",
        "grade-6": {
            "execution": 0
        },
        "77": "return Integer.valueOf((int)x) == Integer.valueOf((int)y) || Integer.valueOf((int)x) == Integer.valueOf((int)z) || Integer.valueOf((int)y) == Integer.valueOf((int)z);",
        "grade-77": {
            "execution": 0
        },
        "69": "// Code goes here\n        return false;",
        "grade-69": {
            "execution": 0
        },
        "64": "boolean xyz = Math.floor(x) == x;\n        boolean yz = Math.floor(y) == y;\n        boolean zx = Math.floor(z) == z;\n        boolean sumxy = x + y == z;\n        boolean sumxz = x + z == y;\n        boolean sumyz = y + z == x;\n        return xyz && yz && zx && (sumxy || sumxz || sumyz);",
        "grade-64": {
            "execution": 0
        },
        "39": "return (Math.ceil(x) == Math.ceil(y + z) || Math.ceil(y) == Math.ceil(x + z) || Math.ceil(z) == Math.ceil(x + y));",
        "grade-39": {
            "execution": 0
        },
        "30": "try {\n            Integer.parseInt(Float.toString(x));\n            Integer.parseInt(Float.toString(y));\n            Integer.parseInt(Float.toString(z));\n        } catch (NumberFormatException e) {\n            return false;\n        }\n        return (x == y + z) || (y == x + z) || (z == x + y);",
        "grade-30": {
            "execution": 0
        },
        "169": "return (Math.round(x) + Math.round(y) == Math.round(z)) || (Math.round(x) + Math.round(z) == Math.round(y)) || (Math.round(y) + Math.round(z) == Math.round(x));",
        "grade-169": {
            "execution": 0
        },
        "23": "// y+z=x\n        // x+z=y\n        // x+y=z\n        double xr = (double)x;\n        double yr = (double)y;\n        double zr = (double)z;\n        if (xr==yr+zr || yr==xr+zr || zr==xr+yr) {\n            return true;\n        }\n        return false;",
        "grade-23": {
            "execution": 0
        },
        "185": "float max = Math.max(x, Math.max(y, z));\n        if(max == x) {\n            return y + z == x;\n        }\n        if(max == y) {\n            return x + z == y;\n        }\n        if(max == z) {\n            return x + y == z;\n        }\n        return false;",
        "grade-185": {
            "execution": 0
        },
        "128": "if(Float.isNaN(x) || Float.isNaN(y) || Float.isNaN(z)) return false;\n        if(x > (y + z) || x < (y + z)) return false;\n        if(y > (x + z) || y < (x + z)) return false;\n        if(z > (x + y) || z < (x + y)) return false;\n        return true;",
        "grade-128": {
            "execution": 0
        },
        "8": "try {\n            if (Integer.valueOf(String.valueOf(x)) == Integer.valueOf(String.valueOf(y))\n                    || Integer.valueOf(String.valueOf(x)) == Integer.valueOf(String.valueOf(z))\n                    || Integer.valueOf(String.valueOf(y)) == Integer.valueOf(String.valueOf(z))) {\n                return true;\n            }\n        } catch (Exception e) {\n            System.out.println(e);\n        }\n        return false;",
        "grade-8": {
            "execution": 0
        },
        "7": "// Write your code here.\n        if(x % 1 == 0 && y % 1 == 0 && z % 1 == 0) {\n            if((x + y == z) || (x + z == y) || (y + z == x)) {\n                return true;\n            }\n        }\n        return false;",
        "grade-7": {
            "execution": 0
        },
        "24": "if (((int)x + (int)y == (int)z) || ((int)x + (int)z == (int)y) || ((int)y + (int)z == (int)x)) {\n            return true;\n        }\n        return false;",
        "grade-24": {
            "execution": 0
        },
        "62": "boolean anyIntResult = false;\n        if ( (x % 1 == 0) && (y % 1 == 0) && (z % 1 == 0) ) {\n            if ( (x == y + z) || (y == x + z) || (z == x + y) ) {\n                anyIntResult = true;\n            }\n        }\n        return anyIntResult;",
        "grade-62": {
            "execution": 0
        },
        "66": "int count = 0;\n        if (isInteger(x)) count++;\n        if (isInteger(y)) count++;\n        if (isInteger(z)) count++;\n        if (count != 3) return false;\n        float sum = x + y + z;\n        if (sum == x || sum == y || sum == z) return true;\n        return false;",
        "grade-66": {
            "execution": 0
        },
        "156": "float max = Float.max(x, Float.max(y, z));\n        if (max != Math.round(max)) {\n            return false;\n        }\n        float sum = x + y + z;\n        return Math.abs(max - (sum - max)) < 0.000001;",
        "grade-156": {
            "execution": 0
        },
        "188": "if ((int)x == (int)y + (int)z) return true;\n        if ((int)y == (int)x + (int)z) return true;\n        if ((int)z == (int)x + (int)y) return true;\n        return false;",
        "grade-188": {
            "execution": 0
        },
        "173": "if ((float)Math.ceil(x) == x && (float)Math.ceil(y) == y && (float)Math.ceil(z) == z) {\n            if (x == y + z || y == x + z || z == x + y) {\n                return true;\n            }\n        }\n        return false;",
        "grade-173": {
            "execution": 0
        },
        "57": "// The problem statement didn't specify what to do if the number is\n        // negative, so I'm simply just checking if they are integers.\n        // I checked if any of the number is equal to the sum of the other two.\n        return ((x == (y + z)) || (y == (x + z)) || (z == (x + y))) && (x % 1 == 0) && (y % 1 == 0) && (z % 1 == 0);",
        "grade-57": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // In this Kata, you have to sort an array of non-negative integers according to\n    // number of ones in their binary representation in ascending order.\n    // For similar number of ones, sort based on decimal value.\n    // It must be implemented like this:\n    // >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n",
        "snippet": [
            "                List < Integer > sorted_arr = new ArrayList<>(arr);\n        sorted_arr.sort(new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                int cnt1 = (int) Integer.toBinaryString(Math.abs(o1)).chars().filter(ch -> ch == '1').count();\n                int cnt2 = (int) Integer.toBinaryString(Math.abs(o2)).chars().filter(ch -> ch == '1').count();\n                if (cnt1 > cnt2) {\n                    return 1;\n                } else if (cnt1 < cnt2) {\n                    return -1;\n                } else {\n                    return o1.compareTo(o2);\n                }\n            }\n        });\n        return sorted_arr;\n    }\n}"
        ],
        "simplified": "In this Kata, you have to sort an array of non-negative integers according to number of ones in their binary representation in ascending order. For similar number of ones, sort based on decimal value. It must be implemented like this:",
        "task_id": "116",
        "164": "return arr.stream()\n                .sorted(Comparator\n                        .comparingInt(x -> Integer.bitCount(x))\n                        .thenComparingInt(x -> x))\n                .collect(Collectors.toCollection(ArrayList::new));",
        "grade-164": {
            "execution": 0
        },
        "28": "ArrayList<Pair<Integer, Integer>> pairs = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            String s = Integer.toBinaryString(arr.get(i));\n            int cnt = 0;\n            for (int j = 0; j < s.length(); j++)\n                if (s.charAt(j) == '1')\n                    cnt++;\n            pairs.add(new Pair<>(cnt, arr.get(i)));\n        }\n        pairs.sort((a, b) -> {\n            if (a.getValue0() < b.getValue0())\n                return -1;\n            else if (a.getValue0() > b.getValue0())\n                return 1;\n            else {\n                if (a.getValue1() < b.getValue1())\n                    return -1;\n                else if (a.getValue1() > b.getValue1())\n                    return 1;\n                else\n                    return 0;\n            }\n        });\n        for (int i = 0; i < arr.size(); i++)\n            arr.set(i, pairs.get(i).getValue1());\n        return arr;",
        "grade-28": {
            "execution": 0
        },
        "6": "return arr.stream()\n            .map(i -> new Pair<Integer,Integer>(i,Integer.bitCount(i)))\n            .sorted((x,y) -> x.getValue1().equals(y.getValue1()) ? x.getValue0().compareTo(y.getValue0()) : x.getValue1().compareTo(y.getValue1()))\n            .map(x -> x.getValue0())\n            .collect(Collectors.toCollection(ArrayList::new));",
        "grade-6": {
            "execution": 0
        },
        "190": "ArrayList<Integer> temp = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size(); i++) {\n            temp.add(numberOfOnes(arr.get(i)));\n        }\n        Integer[] order = insertionSort(temp);\n        return insertionSort2(order, arr);",
        "grade-190": {
            "execution": 0
        },
        "70": "Collections.sort(arr, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer i1, Integer i2) {\n                String b1 = Integer.toBinaryString(i1);\n                String b2 = Integer.toBinaryString(i2);\n                int b1c = b1.length() - b1.replace(\"1\", \"\").length();\n                int b2c = b2.length() - b2.replace(\"1\", \"\").length();\n                if (b1c == b2c) return i1 - i2;\n                return b1c - b2c;\n            }\n        });\n        return arr;",
        "grade-70": {
            "execution": 0
        },
        "62": "ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer> oneCount = new ArrayList<Integer>();\n        int total = 0;\n        int max = arr.get(0);\n        for (int i = 0; i < arr.size(); i++) {\n            int value = arr.get(i);\n            String bin = Integer.toBinaryString(value);\n            total = 0;\n            for (int j = 0; j < bin.length(); j++) {\n                char c = bin.charAt(j);\n                if (c == '1') {\n                    total++;\n                }\n            }\n            oneCount.add(total);\n            if (max < value) {\n                max = value;\n            }\n        }\n        for (int i = max; i >= 0; i--) {\n            for (int j = 0; j < arr.size(); j++) {\n                if (oneCount.get(j) == i) {\n                    sorted.add(arr.get(j));\n                }\n            }\n        }\n        return sorted;",
        "grade-62": {
            "execution": 0
        },
        "57": "if (arr.size() == 0) {\n            return arr;\n        }\n        ArrayList<Pair<Integer, Integer>> res = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            res.add(Pair.with(i, arr.get(i)));\n        }\n        Collections.sort(res, (pair1, pair2) -> {\n            String str1 = Integer.toBinaryString(pair1.getValue1());\n            String str2 = Integer.toBinaryString(pair2.getValue1());\n            int count1 = count1(str1);\n            int count2 = count1(str2);\n            if (count1 == count2) {\n                return pair1.getValue1() - pair2.getValue1();\n            }\n            return count1 - count2;\n        });\n        for (int i = 0; i < res.size(); i++) {\n            arr.set(i, res.get(i).getValue1());\n        }\n        return arr;",
        "grade-57": {
            "execution": 0
        },
        "35": "if (arr.size() <= 1) {\n            return arr;\n        }\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size(); i++) {\n            int count = countOne(arr.get(i));\n            Pair<Integer, Integer> pair = new Pair<Integer, Integer>(count, arr.get(i));\n            result.add(pair);\n        }\n        result.sort(new Comparator<Pair<Integer, Integer>>() {\n            @Override\n            public int compare(Pair<Integer, Integer> o1, Pair<Integer, Integer> o2) {\n                if (o1.getValue0() > o2.getValue0()) {\n                    return 1;\n                } else if (o1.getValue0() < o2.getValue0()) {\n                    return -1;\n                } else {\n                    if (o1.getValue1() > o2.getValue1()) {\n                        return 1;\n                    } else if (o1.getValue1() < o2.getValue1()) {\n                        return -1;\n                    } else {\n                        return 0;\n                    }\n                }\n            }\n        });\n        for (int i = 0; i < result.size(); i++) {\n            Pair<Integer, Integer> pair = result.get(i);\n            result.set(i, pair.getValue1());\n        }\n        return result;",
        "grade-35": {
            "execution": 0
        },
        "189": "int n = arr.size();\n        Integer[] result = new Integer[n];\n        for (int i = 0; i < n; i++) {\n            String binary = Integer.toBinaryString(arr.get(i));\n            int count = 0;\n            for (int j = 0; j < binary.length(); j++) {\n                if (binary.charAt(j) == '1') {\n                    count++;\n                }\n            }\n            result[i] = arr.get(i);\n            arr.set(i, count);\n        }\n        ArrayList<Integer> copy = new ArrayList<>(arr);\n        Arrays.sort(arr.toArray());\n        ArrayList<Integer> result2 = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            int max = Collections.max(copy);\n            int maxIndex = copy.indexOf(max);\n            int count = 0;\n            for (int j = 0; j < arr.size(); j++) {\n                if (arr.get(j) == max) {\n                    if (count == 0) {\n                        result2.add(result[maxIndex]);\n                        copy.set(maxIndex, -1);\n                        arr.remove(j);\n                        count++;\n                    }\n                }\n            }\n        }\n        return result2;",
        "grade-189": {
            "execution": 0
        },
        "26": "arr.sort(new Comparator<Integer>() {\n            @Override\n            public int compare(Integer n1, Integer n2) {\n                // count the number of ones in each number\n                String b1 = Integer.toBinaryString(n1);\n                String b2 = Integer.toBinaryString(n2);\n                int c1 = b1.replaceAll(\"0\", \"\").length();\n                int c2 = b2.replaceAll(\"0\", \"\").length();\n                if (c1 != c2) {\n                    return Integer.compare(c1, c2);\n                } else {\n                    return Integer.compare(n1, n2);\n                }\n            }\n        });\n        return arr;",
        "grade-26": {
            "execution": 0
        },
        "174": "ArrayList<Integer> sorted = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n        }\n        Collections.sort(sorted, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer a, Integer b) {\n                int aBitCount = countBits(a);\n                int bBitCount = countBits(b);\n                if (aBitCount == bBitCount) {\n                    return a.compareTo(b);\n                } else {\n                    return aBitCount - bBitCount;\n                }\n            }\n        });\n        return sorted;",
        "grade-174": {
            "execution": 0
        },
        "139": "ArrayList<Integer> result = new ArrayList<>();\n        while (arr.size() > 0) {\n            int min = arr.get(0);\n            int min_index = 0;\n            for (int i = 1; i < arr.size(); i++) {\n                int ones = countOnes(arr.get(i));\n                if (countOnes(min) > ones) {\n                    min = arr.get(i);\n                    min_index = i;\n                } else if (countOnes(min) == ones) {\n                    if (min > arr.get(i)) {\n                        min = arr.get(i);\n                        min_index = i;\n                    }\n                }\n            }\n            result.add(min);\n            arr.remove(min_index);\n        }\n        return result;",
        "grade-139": {
            "execution": 0
        },
        "22": "ArrayList<Triplet<Integer, Integer, Integer>> triplets = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            Triplet<Integer, Integer, Integer> triplet = new Triplet<>(arr.get(i), arr.get(i), Problem.ones(arr.get(i)));\n            triplets.add(triplet);\n        }\n        Collections.sort(triplets, (a, b) -> {\n            return (a.getValue2() > b.getValue2()) ? 1 : (a.getValue2() < b.getValue2()) ? -1 : a.getValue0().compareTo(b.getValue0());\n        });\n        ArrayList<Integer> newArr = new ArrayList<>();\n        for (int i = 0; i < triplets.size(); i++) {\n            newArr.add(triplets.get(i).getValue0());\n        }\n        return newArr;",
        "grade-22": {
            "execution": 0
        },
        "152": "ArrayList<Integer> sortedList = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) >= 0) {\n                sortedList.add(arr.get(i));\n            }\n        }\n        Collections.sort(sortedList, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer integer, Integer t1) {\n                int count1 = Integer.bitCount(integer);\n                int count2 = Integer.bitCount(t1);\n                if (count1 < count2) {\n                    return -1;\n                } else if (count1 > count2) {\n                    return 1;\n                } else {\n                    return Integer.compare(integer, t1);\n                }\n            }\n        });\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) < 0) {\n                sortedList.add(arr.get(i));\n            }\n        }\n        return sortedList;",
        "grade-152": {
            "execution": 0
        },
        "108": "ArrayList<Integer> result = new ArrayList<>();\n        ArrayList<Integer> isZero = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            int n = arr.get(i);\n            if (n < 0) {\n                result.add(n);\n            } else if (n == 0) {\n                isZero.add(n);\n            } else {\n                result.add(Integer.MAX_VALUE);\n            }\n        }\n        result.sort(new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                int ones1 = countOnes(o1);\n                int ones2 = countOnes(o2);\n                if (ones1 == ones2) {\n                    return o1 - o2;\n                } else {\n                    return ones1 - ones2;\n                }\n            }\n        });\n        isZero.addAll(result);\n        return isZero;",
        "grade-108": {
            "execution": 0
        },
        "8": "ArrayList<Integer> res = new ArrayList<>();\n        ArrayList<Integer> neg = new ArrayList<>();\n        ArrayList<Integer> nonNeg = new ArrayList<>();\n        arr.forEach(e -> {\n            if (e >= 0) {\n                nonNeg.add(e);\n            } else {\n                neg.add(e);\n            }\n        });\n        Collections.sort(nonNeg, (a, b) -> {\n            // System.out.println(Integer.bitCount(a) + \" \" + Integer.bitCount(b));\n            int countA = Integer.bitCount(a);\n            int countB = Integer.bitCount(b);\n            if (countA == countB) {\n                return a.compareTo(b);\n            } else {\n                return countA - countB;\n            }\n        });\n        Collections.sort(neg, (a, b) -> {\n            // System.out.println(Integer.bitCount(a) + \" \" + Integer.bitCount(b));\n            int countA = Integer.bitCount(a);\n            int countB = Integer.bitCount(b);\n            if (countA == countB) {\n                return a.compareTo(b);\n            } else {\n                return countA - countB;\n            }\n        });\n        Collections.reverse(neg);\n        res.addAll(nonNeg);\n        res.addAll(neg);\n        return res;",
        "grade-8": {
            "execution": 0
        },
        "7": "ArrayList<Integer> sorted = new ArrayList<>();\n        ArrayList<Integer> negs = new ArrayList<>();\n        for (int i : arr) {\n            if (i < 0) {\n                negs.add(i);\n            } else {\n                sorted.add(i);\n            }\n        }\n        Collections.sort(sorted, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer a, Integer b) {\n                int oneCountA = Integer.bitCount(a);\n                int oneCountB = Integer.bitCount(b);\n                return oneCountA != oneCountB ? Integer.compare(oneCountA, oneCountB) : Integer.compare(a, b);\n            }\n        });\n        Collections.sort(negs);\n        ArrayList<Integer> result = new ArrayList<>();\n        for (int i : negs) {\n            result.add(i);\n        }\n        for (int i : sorted) {\n            result.add(i);\n        }\n        return result;",
        "grade-7": {
            "execution": 0
        },
        "23": "ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer> sortedIndices = new ArrayList<Integer>();\n        ArrayList<Integer> zeroBits = new ArrayList<Integer>();\n        ArrayList<Integer> zeroBitsIndices = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size(); i++) {\n            int zeroCount = 0;\n            int num = arr.get(i);\n            while (num > 0) {\n                if (num % 2 == 0) {\n                    zeroCount++;\n                }\n                num /= 2;\n            }\n            if (zeroCount == 0) {\n                sorted.add(arr.get(i));\n                sortedIndices.add(i);\n            } else {\n                zeroBits.add(zeroCount);\n                zeroBitsIndices.add(i);\n            }\n        }\n        for (int i = 0; i < zeroBits.size(); i++) {\n            for (int j = i + 1; j < zeroBits.size(); j++) {\n                if (zeroBits.get(i) > zeroBits.get(j)) {\n                    int temp = zeroBits.get(i);\n                    zeroBits.set(i, zeroBits.get(j));\n                    zeroBits.set(j, temp);\n                    temp = zeroBitsIndices.get(i);\n                    zeroBitsIndices.set(i, zeroBitsIndices.get(j));\n                    zeroBitsIndices.set(j, temp);\n                }\n            }\n        }\n        for (int i = 0; i < zeroBits.size(); i++) {\n            sorted.add(arr.get(zeroBitsIndices.get(i)));\n            sortedIndices.add(zeroBitsIndices.get(i));\n        }\n        ArrayList<Integer> out = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size(); i++) {\n            out.add(arr.get(sortedIndices.get(i)));\n        }\n        return out;",
        "grade-23": {
            "execution": 0
        },
        "55": "ArrayList<Pair<Integer, Integer>> pairs = new ArrayList<>();\n        for (int n : arr) {\n            pairs.add(new Pair<>(countOnes(n), n));\n        }\n        Collections.sort(pairs, new Comparator<Pair<Integer, Integer>>() {\n            @Override\n            public int compare(Pair<Integer, Integer> p1, Pair<Integer, Integer> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        ArrayList<Integer> ret = new ArrayList<>();\n        for (Pair<Integer, Integer> p : pairs) {\n            ret.add(p.getValue1());\n        }\n        return ret;",
        "grade-55": {
            "execution": 0
        },
        "59": "ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Pair<Integer, Integer>> binarr = new ArrayList<Pair<Integer, Integer>>();\n        for (int i : arr) {\n            int ones = Integer.bitCount(i);\n            binarr.add(new Pair<Integer, Integer>(ones, i));\n        }\n        Comparator<Pair<Integer, Integer>> comp = (a, b) -> {\n            if (a.getValue0() == b.getValue0()) {\n                return a.getValue1() - b.getValue1();\n            }\n            return a.getValue0() - b.getValue0();\n        };\n        Collections.sort(binarr, comp);\n        for (Pair<Integer, Integer> p : binarr) {\n            sorted.add(p.getValue1());\n        }\n        return sorted;",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return only positive numbers in the list.\n    // >>> get_positive([-1, 2, -4, 5, 6])\n    // [2, 5, 6]\n    // >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    // [5, 3, 2, 3, 9, 123, 1]\n    public static ArrayList<Integer> getPositive(ArrayList<Integer> l) {\n",
        "snippet": [
            "        return l.stream().filter(p -> p > 0).collect(Collectors.toList());\n    }\n}"
        ],
        "simplified": "Return only positive numbers in the list.",
        "task_id": "30",
        "122": "ArrayList<Integer> ret = new ArrayList<Integer>();\n        for (int i : l)\n            if (i > 0)\n                ret.add(i);\n        return ret;",
        "grade-122": {
            "execution": 1
        },
        "16": "ArrayList<Integer> a = new ArrayList<Integer>();\n        for (int i : l) {\n            if (i > 0) {\n                a.add(i);\n            }\n        }\n        return a;",
        "grade-16": {
            "execution": 1
        },
        "3": "return (ArrayList<Integer>) l.stream().filter(x -> x > 0).collect(Collectors.toList());",
        "grade-3": {
            "execution": 1
        },
        "145": "// Your code here.\n        return l.stream().filter(n -> n > 0).collect(Collectors.toCollection(ArrayList::new));",
        "grade-145": {
            "execution": 1
        },
        "44": "ArrayList<Integer> a = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) > 0) {\n                a.add(l.get(i));\n            }\n        }\n        return a;",
        "grade-44": {
            "execution": 1
        },
        "39": "ArrayList<Integer> ans = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) > 0) {\n                ans.add(l.get(i));\n            }\n        }\n        return ans;",
        "grade-39": {
            "execution": 1
        },
        "33": "ArrayList<Integer> numbers = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) > 0) {\n                numbers.add(l.get(i));\n            }\n        }\n        return numbers;",
        "grade-33": {
            "execution": 1
        },
        "19": "return new ArrayList<Integer>(l.stream().filter(x -> x > 0).collect(Collectors.toList()));",
        "grade-19": {
            "execution": 1
        },
        "15": "ArrayList<Integer> filtered = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            int num = l.get(i);\n            if (num > 0) {\n                filtered.add(num);\n            }\n        }\n        return filtered;",
        "grade-15": {
            "execution": 1
        },
        "130": "// l.stream().filter(e -> e > 0).collect(Collectors.toCollection(ArrayList::new));\n        return l.stream().filter(e -> e > 0).collect(Collectors.toCollection(ArrayList::new));",
        "grade-130": {
            "execution": 1
        },
        "195": "ArrayList<Integer> positives = new ArrayList<Integer>();\n        for (int i : l) {\n            if (i > 0) {\n                positives.add(i);\n            }\n        }\n        return positives;",
        "grade-195": {
            "execution": 1
        },
        "101": "ArrayList<Integer> results = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            int num = l.get(i);\n            if (num > 0) {\n                results.add(num);\n            }\n        }\n        return results;",
        "grade-101": {
            "execution": 1
        },
        "13": "// YOUR CODE HERE",
        "grade-13": {
            "execution": 0
        },
        "113": "ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int n : l) {\n            if (n > 0) {\n                result.add(n);\n            }\n        }\n        return result;",
        "grade-113": {
            "execution": 1
        },
        "73": "ArrayList<Integer> newL = new ArrayList<Integer>();\n        for (int i : l) {\n            if (i > 0) {\n                newL.add(i);\n            }\n        }\n        return newL;",
        "grade-73": {
            "execution": 1
        },
        "4": "ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) > 0) {\n                result.add(l.get(i));\n            }\n        }\n        return result;",
        "grade-4": {
            "execution": 1
        },
        "32": "ArrayList<Integer> l2 = new ArrayList<Integer>();\n        int n = l.size();\n        for (int i = 0; i < n; i++) {\n            int x = l.get(i);\n            if (x > 0) {\n                l2.add(x);\n            }\n        }\n        return l2;",
        "grade-32": {
            "execution": 1
        },
        "34": "return l.stream().filter(x -> x > 0).collect(Collectors.toCollection(ArrayList::new));",
        "grade-34": {
            "execution": 1
        },
        "92": "ArrayList<Integer> out = new ArrayList<Integer>();\n        for (int i : l) {\n            if (i > 0) {\n                out.add(i);\n            }\n        }\n        return out;",
        "grade-92": {
            "execution": 1
        },
        "117": "ArrayList<Integer> positives = new ArrayList<Integer>();\n        for (int number : l) {\n            if (number > 0) {\n                positives.add(number);\n            }\n        }\n        return positives;",
        "grade-117": {
            "execution": 1
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a string and returns an ordered version of it.\n    // Ordered version of string, is a string where all words (separated by space)\n    // are replaced by a new word where all the characters arranged in\n    // ascending order based on ascii value.\n    // Note: You should keep the order of words and blank spaces in the sentence.\n    // For example:\n    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    public static String antiShuffle(String s) {\n",
        "snippet": [
            "        String[] strings = s.split(\" \");\n        List<String> result = new ArrayList<>();\n        for (String string : strings) {\n            char[] chars = string.toCharArray();\n            Arrays.sort(chars);\n            result.add(String.copyValueOf(chars));\n        }\n        return String.join(\" \", result);\n    }\n}"
        ],
        "simplified": "Write a function that takes a string and returns an ordered version of it. Ordered version of string, is a string where all words (separated by space) are replaced by a new word where all the characters arranged in ascending order based on ascii value. Note: You should keep the order of words and blank spaces in the sentence.",
        "task_id": "86",
        "197": "String[] words = s.split(\" \");\n        StringBuilder sb = new StringBuilder();\n        for (String word : words) {\n            for (char c : word.toCharArray()) {\n                int pos = 0;\n                for (int i = 0; i < sb.length(); i++) {\n                    if (c < sb.charAt(i)) {\n                        pos = i;\n                        break;\n                    }\n                }\n                sb.insert(pos, c);\n            }\n            sb.append(\" \");\n        }\n        return sb.toString().trim();",
        "grade-197": {
            "execution": 0
        },
        "31": "// YOUR CODE HERE\n        StringBuilder sb = new StringBuilder();\n        for (String str : s.split(\" \")) {\n            char[] temp = str.toCharArray();\n            Arrays.sort(temp);\n            sb.append(new String(temp));\n            sb.append(\" \");\n        }\n        return sb.toString().trim();",
        "grade-31": {
            "execution": 1
        },
        "6": "return null;",
        "grade-6": {
            "execution": 0
        },
        "81": "// TODO: Implement this method\n        return \"\";",
        "grade-81": {
            "execution": 0
        },
        "72": "// YOUR CODE HERE\n        return null;",
        "grade-72": {
            "execution": 0
        },
        "67": "// Your code here\n        return \"\";",
        "grade-67": {
            "execution": 0
        },
        "39": "String[] words = s.split(\" \");\n        StringBuilder sb = new StringBuilder();\n        for (String word : words) {\n            char[] chars = word.toCharArray();\n            Arrays.sort(chars);\n            for (char c : chars) {\n                sb.append(c);\n            }\n            sb.append(\" \");\n        }\n        return sb.toString().trim();",
        "grade-39": {
            "execution": 1
        },
        "29": "String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for (int i = 0; i < words.length; i++) {\n            newWords[i] = sortWord(words[i]);\n        }\n        return String.join(\" \", newWords);",
        "grade-29": {
            "execution": 0
        },
        "169": "StringBuilder result = new StringBuilder();\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            if (word.length() > 1) {\n                char[] chars = word.toCharArray();\n                Arrays.sort(chars);\n                result.append(chars);\n            } else {\n                result.append(word);\n            }\n            result.append(\" \");\n        }\n        return result.toString().trim();",
        "grade-169": {
            "execution": 1
        },
        "23": "String[] str = s.split(\" \");\n        String result = \"\";\n        for (int i = 0; i < str.length; i++) {\n            result += sorted(str[i]);\n            if (i < str.length - 1) {\n                result += \" \";\n            }\n        }\n        return result;",
        "grade-23": {
            "execution": 0
        },
        "182": "// TODO\n        return null;",
        "grade-182": {
            "execution": 0
        },
        "130": "StringBuilder sb = new StringBuilder();\n        sb.append(s);\n        int beginIndex = 0;\n        int endIndex = 0;\n        int i = 0;\n        while (sb.indexOf(\" \", endIndex) != -1) {\n            endIndex = sb.indexOf(\" \", endIndex);\n            String ans = sb.substring(beginIndex, endIndex);\n            ans = sort(ans);\n            sb.replace(beginIndex, endIndex, ans);\n            beginIndex = endIndex + 1;\n            endIndex = beginIndex;\n        }\n        String ans = sb.substring(beginIndex, sb.length());\n        ans = sort(ans);\n        sb.replace(beginIndex, sb.length(), ans);\n        return sb.toString();",
        "grade-130": {
            "execution": 0
        },
        "8": "StringBuilder str = new StringBuilder();\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            char[] chrs = word.toCharArray();\n            Arrays.sort(chrs);\n            for (char chr : chrs) {\n                str.append(chr);\n            }\n            str.append(\" \");\n        }\n        return str.toString().trim();",
        "grade-8": {
            "execution": 1
        },
        "7": "StringBuilder sb = new StringBuilder();\n        int index = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == ' ') {\n                String word = s.substring(index, i);\n                if (word.length() > 1) {\n                    String sorted = sort(word);\n                    sb.append(sorted);\n                } else {\n                    sb.append(word);\n                }\n                sb.append(\" \");\n                index = i + 1;\n            }\n        }\n        String word = s.substring(index, s.length());\n        if (word.length() > 1) {\n            String sorted = sort(word);\n            sb.append(sorted);\n        } else {\n            sb.append(word);\n        }\n        return sb.toString();",
        "grade-7": {
            "execution": 0
        },
        "24": "if (s == null || s.length() == 0) return \"\";\n        // split string\n        String[] arr = s.split(\" \");\n        // loop over the words in the string\n        for (int i = 0; i < arr.length; i++) {\n            // sort the characters in each word\n            char[] ch = arr[i].toCharArray();\n            Arrays.sort(ch);\n            // put the sorted array into a string\n            arr[i] = new String(ch);\n        }\n        return String.join(\" \", arr);",
        "grade-24": {
            "execution": 1
        },
        "65": "// Implement me!\n        return null;",
        "grade-65": {
            "execution": 0
        },
        "69": "String[] words = s.split(\" \");\n        int index = 0;\n        StringBuilder result = new StringBuilder();\n        for (String word : words) {\n            char[] charArray = word.toCharArray();\n            Arrays.sort(charArray);\n            String sorted = new String(charArray);\n            result.append(sorted);\n            index += word.length();\n            if (index != s.length()) {\n                result.append(s.charAt(index));\n                index++;\n            }\n        }\n        return result.toString();",
        "grade-69": {
            "execution": 1
        },
        "157": "if (s == null || s.length() == 0) {\n            return s;\n        }\n        String[] words = s.split(\" \");\n        StringBuilder sb = new StringBuilder();\n        for (String word : words) {\n            char[] chars = word.toCharArray();\n            Arrays.sort(chars);\n            sb.append(chars);\n            sb.append(\" \");\n        }\n        return sb.substring(0, sb.length() - 1);",
        "grade-157": {
            "execution": 1
        },
        "187": "return Stream.of(s.split(\" \"))\n            .map(word -> {\n                char[] chars = word.toCharArray();\n                Arrays.sort(chars);\n                return new String(chars);\n            })\n            .collect(Collectors.joining(\" \"));",
        "grade-187": {
            "execution": 1
        },
        "173": "// ---->Your code goes here.",
        "grade-173": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // I think we all remember that feeling when the result of some long-awaited\n    // event is finally known. The feelings and thoughts you have at that moment are\n    // definitely worth noting down and comparing.\n    // Your task is to determine if a person correctly guessed the results of a number of matches.\n    // You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    // Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    // the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    public static ArrayList<Integer> compare(ArrayList<Integer> game, ArrayList<Integer> guess) {\n",
        "snippet": [
            "        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            result.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return result;\n    }\n}"
        ],
        "simplified": "I think we all remember that feeling when the result of some long-awaited event is finally known. The feelings and thoughts you have at that moment are definitely worth noting down and comparing. Your task is to determine if a person correctly guessed the results of a number of matches. You are given two arrays of scores and guesses of equal length, where each index shows a match. Return an array of the same length denoting how far off each guess was. If they have guessed correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.",
        "task_id": "152",
        "36": "ArrayList<Integer> errors = new ArrayList<Integer>();\n        for (int i = 0; i < game.size(); i++) {\n            int difference = Math.abs(game.get(i) - guess.get(i));\n            errors.add(difference);\n        }\n        return errors;",
        "grade-36": {
            "execution": 1
        },
        "7": "ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < game.size(); i++) {\n            if (game.get(i) == guess.get(i)) {\n                result.add(0);\n            } else {\n                result.add(Math.abs(game.get(i) - guess.get(i)));\n            }\n        }\n        return result;",
        "grade-7": {
            "execution": 1
        },
        "104": "ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < game.size(); i++) {\n            int score = game.get(i);\n            int guessScore = guess.get(i);\n            if (score == guessScore) {\n                result.add(0);\n            } else {\n                result.add(Math.abs(score - guessScore));\n            }\n        }\n        return result;",
        "grade-104": {
            "execution": 1
        },
        "92": "ArrayList<Integer> ans = new ArrayList<Integer>();\n        for (int i = 0; i < game.size(); i++) {\n            ans.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return ans;",
        "grade-92": {
            "execution": 1
        },
        "86": "ArrayList<Integer> res = new ArrayList<Integer>();\n        for (int i = 0; i < game.size(); i++) {\n            res.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return res;",
        "grade-86": {
            "execution": 1
        },
        "53": "ArrayList<Integer> output = new ArrayList<Integer>();\n        for (int i = 0; i < game.size(); i++) {\n            int distance = Math.abs(game.get(i) - guess.get(i));\n            output.add(distance);\n        }\n        return output;",
        "grade-53": {
            "execution": 1
        },
        "31": "var result = new ArrayList<Integer>();\n        for (int i = 0; i < game.size(); i++) {\n            result.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return result;",
        "grade-31": {
            "execution": 1
        },
        "26": "ArrayList<Integer> difference = new ArrayList<Integer>();\n        for (int i = 0; i < game.size(); i++) {\n            if (game.get(i) == guess.get(i)) {\n                difference.add(0);\n            } else {\n                difference.add(Math.abs(game.get(i) - guess.get(i)));\n            }\n        }\n        return difference;",
        "grade-26": {
            "execution": 1
        },
        "163": "ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < game.size(); i++) {\n            int x = Math.abs(game.get(i) - guess.get(i));\n            result.add(x);\n        }\n        return result;",
        "grade-163": {
            "execution": 1
        },
        "9": "return game.stream().map(a -> a - guess.get(game.indexOf(a))).map(Math::abs).collect(Collectors.toCollection(ArrayList::new));",
        "grade-9": {
            "execution": 0
        },
        "8": "ArrayList<Integer> diffs = new ArrayList<Integer>();\n        for (int i = 0; i < game.size(); i++) {\n            if (game.get(i) == guess.get(i)) {\n                diffs.add(0);\n            } else {\n                diffs.add(Math.abs(game.get(i) - guess.get(i)));\n            }\n        }\n        return diffs;",
        "grade-8": {
            "execution": 1
        },
        "27": "ArrayList<Integer> solution = new ArrayList<Integer>();\n        for (int i = 0; i < game.size(); i++) {\n            solution.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return solution;",
        "grade-27": {
            "execution": 1
        },
        "84": "ArrayList<Integer> result = new ArrayList<Integer>();\n        // result.add(guess.get(0));\n        // guess.remove(0);\n        // guess.add(result.get(0));\n        // guess.remove(result.get(0));\n        // result.remove(0);\n        for (int i = 0; i < game.size(); i++) {\n            // if (game.get(i) - guess.get(i) == 0) {\n            //     result.add(0);\n            // } else {\n            //     result.add(Math.abs(game.get(i) - guess.get(i)));\n            // }\n            result.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return result;",
        "grade-84": {
            "execution": 1
        },
        "89": "ArrayList<Integer> res = new ArrayList<Integer>();\n        for (int i = 0; i < game.size(); i++) {\n            if (game.get(i) == guess.get(i)) res.add(0);\n            else res.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return res;",
        "grade-89": {
            "execution": 1
        },
        "196": "ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < game.size(); i++) {\n            int difference = game.get(i) - guess.get(i);\n            difference = Math.abs(difference);\n            result.add(difference);\n        }\n        return result;",
        "grade-196": {
            "execution": 1
        },
        "77": "ArrayList<Integer> difference = new ArrayList<Integer>();\n        for (int i = 0; i < game.size(); i++) {\n            int diff = Math.abs(game.get(i) - guess.get(i));\n            difference.add(diff);\n        }\n        return difference;",
        "grade-77": {
            "execution": 1
        },
        "162": "ArrayList<Integer> output = new ArrayList<Integer>();\n        for (int i = 0; i < game.size(); i++) {\n            int diff = Math.abs(game.get(i) - guess.get(i));\n            output.add(diff);\n        }\n        return output;",
        "grade-162": {
            "execution": 1
        },
        "85": "ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int index = 0; index < game.size(); index++) {\n            result.add(Math.abs(game.get(index) - guess.get(index)));\n        }\n        return result;",
        "grade-85": {
            "execution": 1
        },
        "170": "ArrayList<Integer> ret = new ArrayList<Integer>();\n        for (int i = 0; i < game.size(); i++) {\n            if (game.get(i) > guess.get(i)) {\n                ret.add(game.get(i) - guess.get(i));\n            } else if (game.get(i) < guess.get(i)) {\n                ret.add(guess.get(i) - game.get(i));\n            } else {\n                ret.add(0);\n            }\n        }\n        return ret;",
        "grade-170": {
            "execution": 1
        },
        "105": "ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < game.size(); i++) {\n            int gm = game.get(i);\n            int gs = guess.get(i);\n            if (gm != gs) {\n                result.add(Math.abs(gm - gs));\n            } else {\n                result.add(0);\n            }\n        }\n        return result;",
        "grade-105": {
            "execution": 1
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Out of list of strings, return the longest one. Return the first one in case of multiple\n    // strings of the same length. Return None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n    public static Optional<String> longest(ArrayList<String> strings) {\n",
        "snippet": [
            "        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}"
        ],
        "simplified": "Out of list of strings, return the longest one. Return the first one in case of multiple strings of the same length. Return None in case the input list is empty.",
        "task_id": "12",
        "30": "if (strings.size() > 0) {\n            strings.sort((s1, s2) -> Integer.compare(s2.length(), s1.length()));\n            return Optional.of(strings.get(0));\n        } else {\n            return Optional.empty();\n        }",
        "grade-30": {
            "execution": 0
        },
        "6": "// FILL IN\n        //throw new UnsupportedOperationException(\"longest\");\n        return strings.stream().max(Comparator.comparing(String::length));",
        "grade-6": {
            "execution": 0
        },
        "80": "if (strings.size() == 0) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);",
        "grade-80": {
            "execution": 0
        },
        "70": "if (strings.size() == 0) {\n            return Optional.empty();\n        }\n        int max_length = 0;\n        String max_string = null;\n        for (String s : strings) {\n            if (s.length() > max_length) {\n                max_length = s.length();\n                max_string = s;\n            }\n        }\n        return Optional.of(max_string);",
        "grade-70": {
            "execution": 0
        },
        "64": "Optional<String> longest = Optional.empty();\n        if (strings.size() > 0) {\n            longest = Optional.of(strings.get(0));\n            for (String s : strings) {\n                if (s.length() > longest.get().length()) {\n                    longest = Optional.of(s);\n                }\n            }\n        }\n        return longest;",
        "grade-64": {
            "execution": 0
        },
        "38": "if (strings.size() == 0) {\n            return Optional.empty();\n        }\n        Optional<String> maxStr = Optional.of(strings.get(0));\n        for (String s : strings) {\n            if (s.length() > maxStr.get().length()) {\n                maxStr = Optional.of(s);\n            }\n        }\n        return maxStr;",
        "grade-38": {
            "execution": 0
        },
        "28": "if (strings.size() == 0) return Optional.empty();\n        String res = \"\";\n        for (String str : strings) {\n            if (str.length() > res.length()) res = str;\n        }\n        return Optional.of(res);",
        "grade-28": {
            "execution": 0
        },
        "172": "int max_length = 0;\n        String longest_string = null;\n        for (String s : strings) {\n            if (s.length() > max_length) {\n                max_length = s.length();\n                longest_string = s;\n            }\n        }\n        return Optional.ofNullable(longest_string);",
        "grade-172": {
            "execution": 0
        },
        "23": "// Add code here\n        return Optional.empty();",
        "grade-23": {
            "execution": 0
        },
        "186": "Optional<String> res = Optional.empty();\n        int len = 0;\n        for (String s : strings) {\n            if (s.length() > len) {\n                res = Optional.of(s);\n                len = s.length();\n            }\n        }\n        return res;",
        "grade-186": {
            "execution": 0
        },
        "130": "if (strings.size() == 0) return Optional.empty();\n        return strings.stream().reduce((a, b) -> a.length() >= b.length() ? a : b);",
        "grade-130": {
            "execution": 0
        },
        "8": "return strings.stream().reduce((left, right) -> left.length() >= right.length() ? left : right);",
        "grade-8": {
            "execution": 0
        },
        "7": "if (strings.size() == 0) {\n            return Optional.empty();\n        }\n        int maxLength = strings.get(0).length();\n        String longest = strings.get(0);\n        for (int i = 1; i < strings.size(); i++) {\n            String s = strings.get(i);\n            if (s.length() > maxLength) {\n                maxLength = s.length();\n                longest = s;\n            }\n        }\n        return Optional.of(longest);",
        "grade-7": {
            "execution": 0
        },
        "24": "if (strings.size() == 0) {\n            return Optional.empty();\n        }\n        ArrayList<Integer> lengths = new ArrayList<Integer>();\n        for (String string : strings) {\n            lengths.add(string.length());\n        }\n        int maxLength = Collections.max(lengths);\n        int index = lengths.indexOf(maxLength);\n        return Optional.of(strings.get(index));",
        "grade-24": {
            "execution": 0
        },
        "61": "// Write your code here\n        return Optional.empty();",
        "grade-61": {
            "execution": 0
        },
        "67": "// Write your code here\n        return null;",
        "grade-67": {
            "execution": 0
        },
        "159": "if (strings.size() == 0) {\n            return Optional.empty();\n        }\n        else {\n            Optional<String> result = Optional.of(strings.get(0));\n            for (String s : strings) {\n                if (s.length() > result.get().length()) {\n                    result = Optional.of(s);\n                }\n            }\n            return result;\n        }",
        "grade-159": {
            "execution": 0
        },
        "190": "if (strings.size() == 0) return Optional.empty();\n        int max = strings.get(0).length();\n        String output = \"\";\n        for (String item : strings) {\n            if (item.length() > max) {\n                max = item.length();\n                output = item;\n            }\n        }\n        return Optional.of(output);",
        "grade-190": {
            "execution": 0
        },
        "176": "int maxLength = 0;\n        Optional<String> maxString = Optional.empty();\n        for (String s : strings) {\n            if (s.length() > maxLength) {\n                maxLength = s.length();\n                maxString = Optional.of(s);\n            }\n        }\n        return maxString;",
        "grade-176": {
            "execution": 0
        },
        "55": "if (strings.size() == 0) {\n\t    return Optional.empty();\n\t}\n\telse {\n\t    String longestString = strings.get(0);\n\t    for (String str : strings) {\n\t\tif (str.length() > longestString.length()) {\n\t\t    longestString = str;\n\t\t}\n\t    }\n\t    return Optional.of(longestString);\n\t}",
        "grade-55": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    // should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    // split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    // split_words(\"abcdef\") == 3\n    public static Union_ArrayList_String__int splitWords(String txt) {\n",
        "snippet": [
            "        if (txt.contains(\" \" )) {\n            return Arrays.asList(txt.split(\" \" ));\n        } else if (txt.contains(\",\" )) {\n            return Arrays.asList(txt.split(\"[,\\s]\" ));\n        } else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c) && (c - 'a') % 2 == 1) {\n                    count += 1;\n                }\n            }\n            return count;\n        }\n    }\n}"
        ],
        "simplified": "Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25",
        "task_id": "125",
        "173": "int x = 0;\n        ArrayList<String> list = new ArrayList<String>();\n        if(txt.indexOf(\" \") == -1) {\n            if(txt.indexOf(\",\") == -1) {\n                for(int i = 0; i < txt.length(); i++) {\n                    int c = txt.charAt(i);\n                    if(Character.isLowerCase(c)) {\n                        if(i % 2 == 0) {\n                            x++;\n                        }\n                    }\n                }\n                return Union_ArrayList_String__int.int_(x);\n            }\n            String[] arr = txt.split(\",\");\n            for(int i = 0; i < arr.length; i++) {\n                list.add(arr[i]);\n            }\n            return Union_ArrayList_String__int.ArrayList_String_(list);\n        }\n        String[] arr = txt.split(\" \");\n        for(int i = 0; i < arr.length; i++) {\n            list.add(arr[i]);\n        }\n        return Union_ArrayList_String__int.ArrayList_String_(list);",
        "grade-173": {
            "execution": 0
        },
        "31": "ArrayList<String> list = new ArrayList<String>();\n        String[] ans = txt.split(\" |,\");\n        int count = 0;\n        for (int i = 0; i < ans.length; i++) {\n            list.add(ans[i]);\n        }\n        if (ans.length == 1) {\n            for (int i = 0; i < ans[0].length(); i++) {\n                if (i % 2 == 0) {\n                    count++;\n                }\n            }\n            return Union_ArrayList_String__int.createObj(count);\n        }\n        return Union_ArrayList_String__int.createObj(list);",
        "grade-31": {
            "execution": 0
        },
        "6": "if (txt.contains(\" \")) {\n            return new Union_ArrayList_String__int(new ArrayList<String>(Arrays.asList(txt.split(\" \"))));\n        } else if (txt.contains(\",\")) {\n            return new Union_ArrayList_String__int(new ArrayList<String>(Arrays.asList(txt.split(\",\"))));\n        } else {\n            int cnt = 0;\n            for (int i = 0; i < txt.length(); i++) {\n                int x = txt.charAt(i) - 'a';\n                if (x % 2 == 1) {\n                    cnt++;\n                }\n            }\n            return new Union_ArrayList_String__int(cnt);\n        }",
        "grade-6": {
            "execution": 0
        },
        "75": "if(txt.contains(\" \")) {\n            return new Union_ArrayList_String__int(Arrays.asList(txt.split(\" \")));\n        }\n        if(txt.contains(\",\")) {\n            return new Union_ArrayList_String__int(Arrays.asList(txt.split(\",\")));\n        }\n        int odd = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            if((int)txt.charAt(i) % 2 == 1) odd++;\n        }\n        return new Union_ArrayList_String__int(odd);",
        "grade-75": {
            "execution": 0
        },
        "65": "Union_ArrayList_String__int ret = new Union_ArrayList_String__int();\n        ArrayList<String> arr = new ArrayList<String>();\n        String [] tmp = txt.split(\"\\\\s+\");\n        if (tmp.length > 1) {\n            arr.addAll(Arrays.asList(tmp));\n            ret.set_ArrayList_String(arr);\n            return ret;\n        }\n        else {\n            tmp = txt.split(\",\");\n            if (tmp.length > 1) {\n                arr.addAll(Arrays.asList(tmp));\n                ret.set_ArrayList_String(arr);\n                return ret;\n            }\n            else {\n                int counter = 0;\n                for (int i = 0; i < txt.length(); i++) {\n                    int val = (int)txt.charAt(i) - (int)'a';\n                    if (val >= 0 && val <= 25) {\n                        if (i % 2 == 0) {\n                            counter++;\n                        }\n                    }\n                }\n                ret.set_int(counter);\n                return ret;\n            }\n        }",
        "grade-65": {
            "execution": 0
        },
        "60": "// TODO: implement method\n        Union_ArrayList_String__int union_ArrayList_String__int = new Union_ArrayList_String__int();\n        return union_ArrayList_String__int;",
        "grade-60": {
            "execution": 0
        },
        "38": "if (txt.indexOf(\" \") != -1) {\n            return new Union_ArrayList_String__int(Arrays.asList(txt.split(\" \")));\n        } else if (txt.indexOf(\",\") != -1) {\n            return new Union_ArrayList_String__int(Arrays.asList(txt.split(\",\")));\n        } else {\n            int[] a = new int[26];\n            int sum = 0;\n            for (int i = 0; i < txt.length(); i++) {\n                a[txt.charAt(i) - 'a']++;\n            }\n            for (int i = 0; i < 26; i++) {\n                if (a[i] % 2 == 1) {\n                    sum++;\n                }\n            }\n            return new Union_ArrayList_String__int(sum);\n        }",
        "grade-38": {
            "execution": 0
        },
        "29": "if(txt.contains(\" \")) return Union_ArrayList_String__int.value(Arrays.asList(txt.split(\" \")));\n        if(txt.contains(\",\")) return Union_ArrayList_String__int.value(Arrays.asList(txt.split(\",\")));\n        var res = 0;\n        for(var ch : txt.toCharArray()) {\n            var p = (int) ch - 'a';\n            if(p % 2 == 1) res++;\n        }\n        return Union_ArrayList_String__int.value(res);",
        "grade-29": {
            "execution": 0
        },
        "183": "// Implement me\n        return new Union_ArrayList_String__int(new Pair<>(\"ArrayList<String>\", null), new Pair<>(\"int\", null));",
        "grade-183": {
            "execution": 0
        },
        "148": "return\n        txt.contains(\" \") ?\n        txt.contains(\",\") ? new Union_ArrayList_String__int(txt.split(\",\")) : new Union_ArrayList_String__int(txt.split(\" \")) :\n        Arrays.stream(txt.split(\"\")).map(x -> x.toLowerCase()).collect(Collectors.toList()).indexOf(\"a\") % 2 == 0 ?\n        Arrays.stream(txt.split(\"\")).map(x -> x.toLowerCase()).collect(Collectors.toList()).indexOf(\"b\") % 2 == 0 ?\n        Arrays.stream(txt.split(\"\")).map(x -> x.toLowerCase()).collect(Collectors.toList()).indexOf(\"c\") % 2 == 0 ?\n        Arrays.stream(txt.split(\"\")).map(x -> x.toLowerCase()).collect(Collectors.toList()).indexOf(\"d\") % 2 == 0 ?\n        Arrays.stream(txt.split(\"\")).map(x -> x.toLowerCase()).collect(Collectors.toList()).indexOf(\"e\") % 2 == 0 ?\n        Arrays.stream(txt.split(\"\")).map(x -> x.toLowerCase()).collect(Collectors.toList()).indexOf(\"f\") % 2 == 0 ?\n        Arrays.stream(txt.split(\"\")).map(x -> x.toLowerCase()).collect(Collectors.toList()).indexOf(\"g\") % 2 == 0 ?\n        Arrays.stream(txt.split(\"\")).map(x -> x.toLowerCase()).collect(Collectors.toList()).indexOf(\"h\") % 2 == 0 ?\n        Arrays.stream(txt.split(\"\")).map(x -> x.toLowerCase()).collect(Collectors.toList()).indexOf(\"i\") % 2 == 0 ?\n        Arrays.stream(txt.split(\"\")).map(x -> x.toLowerCase()).collect(Collectors.toList()).indexOf(\"j\") % 2 == 0 ?\n        Arrays.stream(txt.split(\"\")).map(x -> x.toLowerCase()",
        "grade-148": {
            "execution": 0
        },
        "25": "int count = 0;\n      String[] split = txt.split(\" \");\n      if (split.length > 1) {\n        return new Union_ArrayList_String__int(new ArrayList<String>(Arrays.asList(split)));\n      }\n      split = txt.split(\",\");\n      if (split.length > 1) {\n        return new Union_ArrayList_String__int(new ArrayList<String>(Arrays.asList(split)));\n      }\n      char[] characters = txt.toCharArray();\n      for (char c : characters) {\n        if (c - 'a' < 26 && c - 'a' >= 0 && ((c - 'a') % 2) == 1) {\n          count++;\n        }\n      }\n      return new Union_ArrayList_String__int(count);",
        "grade-25": {
            "execution": 0
        },
        "160": "if (txt.chars().allMatch(x -> x == ' ')) {\n            return new Union_ArrayList_String__int(new ArrayList<String>());\n        }\n        else if (txt.chars().allMatch(x -> x == ',')) {\n            return new Union_ArrayList_String__int(new ArrayList<String>());\n        }\n        else if (txt.chars().allMatch(x -> x >= 'a' && x <= 'z')) {\n            return new Union_ArrayList_String__int(txt.chars().filter(x -> x - 'a' % 2 == 1).count());\n        }\n        else {\n            return new Union_ArrayList_String__int(new ArrayList<String>(Arrays.asList(txt.split(\" \"))));\n        }",
        "grade-160": {
            "execution": 0
        },
        "116": "int numOddLetters = 0;\n        for (int i = 0; i < txt.length(); i++) {\n            if (i % 2 == 0 && txt.charAt(i) >= 'a' && txt.charAt(i) <= 'z')\n                numOddLetters++;\n        }\n        if (txt.indexOf(',') != -1) {\n            return new Union_ArrayList_String__int(Arrays.asList(txt.split(\",\")));\n        } else if (txt.indexOf(' ') != -1) {\n            return new Union_ArrayList_String__int(Arrays.asList(txt.split(\" \")));\n        } else {\n            return new Union_ArrayList_String__int(numOddLetters);\n        }",
        "grade-116": {
            "execution": 0
        },
        "8": "// txt = txt.toLowerCase();\n        // int oddCount = 0;\n        // for (int i = 0; i < txt.length(); i += 2) {\n        //     char c = txt.charAt(i);\n        //     if (c >= 'a' && c <= 'z') {\n        //         oddCount++;\n        //     }\n        // }\n        // return oddCount;\n        String[] tokens = txt.split(\" \");\n        if (tokens.length > 1) {\n            ArrayList<String> list = new ArrayList<>();\n            for (String token : tokens) {\n                list.add(token);\n            }\n            return new Union_ArrayList_String__int(list);\n        }\n        tokens = txt.split(\",\");\n        if (tokens.length > 1) {\n            ArrayList<String> list = new ArrayList<>();\n            for (String token : tokens) {\n                list.add(token);\n            }\n            return new Union_ArrayList_String__int(list);\n        }\n        int oddCount = 0;\n        for (int i = 0; i < txt.length(); i += 2) {\n            char c = txt.charAt(i);\n            if (c >= 'a' && c <= 'z') {\n                oddCount++;\n            }\n        }\n        return new Union_ArrayList_String__int(oddCount);",
        "grade-8": {
            "execution": 0
        },
        "7": "return null;",
        "grade-7": {
            "execution": 0
        },
        "26": "ArrayList<String> res = new ArrayList<String>();\n      String[] words = txt.split(\"\\\\s+\");\n      if (words.length == 1) {\n        String[] commaSplit = txt.split(\",\");\n        if (commaSplit.length == 1) {\n          res.add(txt);\n          int counter = 0;\n          for (int i = 0; i < txt.length(); i++) {\n            if (txt.charAt(i) - 'a' % 2 == 1) {\n              counter++;\n            }\n          }\n          return new Union_ArrayList_String__int(res, counter);\n        } else {\n          return new Union_ArrayList_String__int(res, -1);\n        }\n      } else {\n        return new Union_ArrayList_String__int(res, -1);\n      }",
        "grade-26": {
            "execution": 0
        },
        "58": "// TODO implement this function\n        return null;",
        "grade-58": {
            "execution": 0
        },
        "62": "if (txt.matches(\".*[,.!?\\\\s].*\")) {\n            return Union_ArrayList_String__int.withArrayList_String(Arrays.asList(txt.split(\"[,.!?\\\\s]+\")));\n        } else {\n            int count = 0;\n            for (int i = 0; i < txt.length(); i++) {\n                if (txt.charAt(i) - 'a' % 2 == 1) {\n                    count++;\n                }\n            }\n            return Union_ArrayList_String__int.withInt(count);\n        }",
        "grade-62": {
            "execution": 0
        },
        "138": "if(txt.contains(\" \")){\n            ArrayList<String> x = new ArrayList<String>(Arrays.asList(txt.split(\" \")));\n            return new Union_ArrayList_String__int(x);\n        }\n        else if(txt.contains(\",\")){\n            ArrayList<String> x = new ArrayList<String>(Arrays.asList(txt.split(\",\")));\n            return new Union_ArrayList_String__int(x);\n        }\n        else{\n            int sum = 0;\n            for(int i = 0; i < txt.length(); i++){\n                int index = txt.charAt(i) - 'a';\n                if(index % 2 == 1){\n                    sum++;\n                }\n            }\n            return new Union_ArrayList_String__int(sum);\n        }",
        "grade-138": {
            "execution": 0
        },
        "163": "if (txt.contains(\" \")) {\n            String[] words = txt.split(\" \");\n            return new Union_ArrayList_String__int(Arrays.asList(words));\n        } else if (txt.contains(\",\")) {\n            String[] words = txt.split(\",\");\n            return new Union_ArrayList_String__int(Arrays.asList(words));\n        } else {\n            int count = 0;\n            for (int i = 0; i < txt.length(); i++) {\n                if (txt.charAt(i) == 'a' || txt.charAt(i) == 'c' || txt.charAt(i) == 'e' || txt.charAt(i) == 'g' || txt.charAt(i) == 'i' || txt.charAt(i) == 'k' || txt.charAt(i) == 'm' || txt.charAt(i) == 'o' || txt.charAt(i) == 'q' || txt.charAt(i) == 's' || txt.charAt(i) == 'u' || txt.charAt(i) == 'w' || txt.charAt(i) == 'y') {\n                    count++;\n                }\n            }\n            return new Union_ArrayList_String__int(count);\n        }",
        "grade-163": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given an array of non-negative integers, return a copy of the given array after sorting,\n    // you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    // or sort it in descending order if the sum( first index value, last index value) is even.\n    // Note:\n    // * don't change the given array.\n    // Examples:\n    // * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n",
        "snippet": [
            "        if (array.size() == 0) {\n            return array;\n        }\n        List<Integer> result = new ArrayList<>(array);\n        if ((result.get(0) + result.get(result.size() - 1)) % 2 == 1) {\n            Collections.sort(result);\n        } else {\n            result.sort(Collections.reverseOrder());\n        }\n        return result;\n    }\n}"
        ],
        "simplified": "Given an array of non-negative integers, return a copy of the given array after sorting, you will sort the given array in ascending order if the sum( first index value, last index value) is odd, or sort it in descending order if the sum( first index value, last index value) is even. Note: * don't change the given array.",
        "task_id": "88",
        "177": "int first = array.get(0);\n        int last = array.get(array.size() - 1);\n        int sum = first + last;\n        if (sum % 2 == 0) {\n            array.sort(Comparator.reverseOrder());\n        } else {\n            array.sort(Comparator.naturalOrder());\n        }\n        return array;",
        "grade-177": {
            "execution": 0
        },
        "30": "// Write your code here\n        if (array.size() == 0) {\n            return array;\n        }\n        if (array.size() == 1) {\n            return array;\n        }\n        int first = array.get(0);\n        int last = array.get(array.size() - 1);\n        int sum = first + last;\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        if (sum % 2 == 0) {\n            int i = array.size() - 1;\n            while (i >= 0) {\n                result.add(array.get(i));\n                i--;\n            }\n        } else {\n            for (int i = 0; i < array.size(); i++) {\n                result.add(array.get(i));\n            }\n        }\n        return result;",
        "grade-30": {
            "execution": 0
        },
        "6": "ArrayList<Integer> result = new ArrayList<>();\n        int first = array.get(0);\n        int last = array.get(array.size() - 1);\n        if ((first + last) % 2 == 0) {\n            result = array.stream().sorted(Comparator.reverseOrder()).collect(Collectors.toCollection(ArrayList::new));\n        } else {\n            result = array.stream().sorted().collect(Collectors.toCollection(ArrayList::new));\n        }\n        return result;",
        "grade-6": {
            "execution": 0
        },
        "78": "// Write code here.\n        int first = array.get(0);\n        int last = array.get(array.size() - 1);\n        boolean isEven = (first + last) % 2 == 0;\n        Comparator<Integer> comparator = isEven ? new EvenComparator() : new OddComparator();\n        array.sort(comparator);\n        return array;",
        "grade-78": {
            "execution": 0
        },
        "70": "// TODO: Write code here\n        return array;",
        "grade-70": {
            "execution": 0
        },
        "65": "ArrayList<Integer> aux = new ArrayList<Integer>();\n        ArrayList<Integer> res = new ArrayList<Integer>();\n        aux.addAll(array);\n        int sum = aux.get(0) + aux.get(aux.size() - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(aux, Collections.reverseOrder());\n        } else {\n            Collections.sort(aux);\n        }\n        for (int i = 0; i < aux.size(); i++) {\n            res.add(aux.get(i));\n        }\n        return res;",
        "grade-65": {
            "execution": 0
        },
        "38": "// type your solution here\n        return null;",
        "grade-38": {
            "execution": 0
        },
        "28": "if (array.size() < 2) {\n            return array;\n        }\n        int i, j, min;\n        for (i = 0; i < array.size() - 1; i++) {\n            min = i;\n            for (j = i + 1; j < array.size(); j++) {\n                if (array.get(j) < array.get(min)) {\n                    min = j;\n                }\n            }\n            Collections.swap(array, i, min);\n        }\n        if ((array.get(0) + array.get(array.size() - 1)) % 2 == 0) {\n            Collections.reverse(array);\n        }\n        return array;",
        "grade-28": {
            "execution": 1
        },
        "188": "// Write your code here\n        return null;",
        "grade-188": {
            "execution": 0
        },
        "150": "if (array.size() == 0) {\n            return array;\n        } else if (array.size() == 1) {\n            return array;\n        } else {\n            int first = array.get(0);\n            int last = array.get(array.size() - 1);\n            Integer[] array_ = array.toArray(new Integer[array.size()]);\n            if ((first + last) % 2 == 0) {\n                Arrays.sort(array_, Collections.reverseOrder());\n            } else {\n                Arrays.sort(array_);\n            }\n            ArrayList<Integer> ret = new ArrayList<>(Arrays.asList(array_));\n            return ret;\n        }",
        "grade-150": {
            "execution": 1
        },
        "23": "// We will have to write a separate Comparator to achieve the desired output.\n        Collections.sort(array, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer a, Integer b) {\n                return (array.indexOf(a) + array.indexOf(b)) % 2 == 0 ? b - a : a - b;\n            }\n        });\n        return array;",
        "grade-23": {
            "execution": 0
        },
        "164": "if (array.size() == 0) {\n            return array;\n        }\n        // return array;\n        ArrayList<Integer> newArray = new ArrayList<>();\n        for (int i = 0; i < array.size(); i++) {\n            newArray.add(array.get(i));\n        }\n        // System.out.println(newArray);\n        if ((array.get(0) + array.get(array.size() - 1)) % 2 == 0) {\n            // System.out.println(\"Even\");\n            Collections.sort(newArray, Collections.reverseOrder());\n        } else {\n            // System.out.println(\"Odd\");\n            Collections.sort(newArray);\n        }\n        return newArray;",
        "grade-164": {
            "execution": 1
        },
        "116": "int len = array.size();\n        int i = 0;\n        int j = len - 1;\n        int first = array.get(i);\n        int last = array.get(j);\n        boolean isOdd = (first + last) % 2 == 1;\n        // System.out.println(isOdd);\n        ArrayList<Integer> ans = new ArrayList<Integer>();\n        while (i < j) {\n            if (isOdd) {\n                if (array.get(i) > array.get(j)) {\n                    ans.add(array.get(i));\n                    i++;\n                } else {\n                    ans.add(array.get(j));\n                    j--;\n                }\n            } else {\n                if (array.get(i) < array.get(j)) {\n                    ans.add(array.get(i));\n                    i++;\n                } else {\n                    ans.add(array.get(j));\n                    j--;\n                }\n            }\n        }\n        if (i == j) {\n            ans.add(array.get(i));\n        }\n        Collections.reverse(ans);\n        return ans;",
        "grade-116": {
            "execution": 0
        },
        "8": "int n = array.size();\n        if (n == 0) {\n            return array;\n        }\n        int sum = array.get(0) + array.get(n - 1);\n        Collections.sort(array);\n        if (sum % 2 == 0) {\n            Collections.reverse(array);\n        }\n        return array;",
        "grade-8": {
            "execution": 1
        },
        "7": "ArrayList<Integer> result = new ArrayList<Integer>();\n        // find value of the sum( first index value, last index value)\n        int first = array.get(0);\n        int last = array.get(array.size() - 1);\n        int sum = first + last;\n        if (sum % 2 == 0) {\n            // sort in descending order if the sum( first index value, last index value) is even.\n            array.sort(Collections.reverseOrder());\n        } else {\n            // sort in ascending order if the sum( first index value, last index value) is odd.\n            array.sort(Collections.reverseOrder());\n        }\n        return array;",
        "grade-7": {
            "execution": 0
        },
        "24": "if (array.size() == 0) {\n            return array;\n        }\n        if (array.size() == 1) {\n            return array;\n        }\n        if (array.size() == 2) {\n            if (array.get(0) + array.get(1) % 2 == 0) {\n                return array;\n            } else {\n                Collections.reverse(array);\n                return array;\n            }\n        }\n        int sum = array.get(0) + array.get(array.size() - 1);\n        Collections.sort(array);\n        if (sum % 2 == 0) {\n            Collections.reverse(array);\n        }\n        return array;",
        "grade-24": {
            "execution": 1
        },
        "62": "if (array.size() == 0) return array;\n        int first_index = array.get(0);\n        int last_index = array.get(array.size() - 1);\n        if ((first_index + last_index) % 2 == 0) {\n            return new ArrayList<Integer>(array.stream().sorted(Collections.reverseOrder()).collect(Collectors.toList()));\n        } else {\n            return new ArrayList<Integer>(array.stream().sorted().collect(Collectors.toList()));\n        }",
        "grade-62": {
            "execution": 1
        },
        "67": "int first = array.get(0);\n      int last = array.get(array.size() - 1);\n      int sum = first + last;\n      if (sum % 2 == 0) {\n        Collections.sort(array, Collections.reverseOrder());\n      } else {\n        Collections.sort(array);\n      }\n      return array;",
        "grade-67": {
            "execution": 0
        },
        "139": "Pair<Integer, Integer> p = pair(array.get(0), array.get(array.size() - 1));\n        int[] range = range(array.size());\n        int[] order = {1, -1};\n        int ord = p.sum() % 2 == 0 ? 1 : 0;\n        IntStream.range(0, range.length)\n                .mapToObj(i -> new Pair<>(range[i], array.get(i)))\n                .sorted(Comparator.comparingInt(a -> a.value * order[ord]))\n                .mapToInt(a -> a.value)\n                .forEach(System.out::println);\n        return array;",
        "grade-139": {
            "execution": 0
        },
        "167": "if (array.size() <= 1) {\n            return array;\n        }\n        int firstIndex = array.get(0);\n        int lastIndex = array.get(array.size() - 1);\n        int sum = firstIndex + lastIndex;\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n        } else {\n            Collections.sort(array);\n        }\n        return array;",
        "grade-167": {
            "execution": 1
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // Input: sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static String wordsInSentence(String sentence) {\n",
        "snippet": [
            "        List<String> new_lst = new ArrayList<>();\n        for (String word : sentence.split(\" \" )) {\n            boolean flg = true;\n            if (word.length() == 1) {\n                continue;\n            }\n            for (int i = 2; i < word.length(); i++) {\n                if (word.length() % i == 0) {\n                    flg = false;\n                    break;\n                }\n            }\n            if (flg) {\n                new_lst.add(word);\n            }\n        }\n        return String.join(\" \", new_lst);\n    }\n}"
        ],
        "simplified": "You are given a string representing a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words from the original sentence, whose lengths are prime numbers, the order of the words in the new string should be the same as the original one. Constraints: * 1 <= len(sentence) <= 100 * sentence contains only letters",
        "task_id": "143",
        "183": "StringBuilder sb = new StringBuilder();\n        for (String word : sentence.split(\" \")) {\n            if (isPrime(word.length())) {\n                sb.append(word).append(\" \");\n            }\n        }\n        sb.deleteCharAt(sb.length() - 1);\n        return sb.toString();",
        "grade-183": {
            "execution": 0
        },
        "28": "String[] words = sentence.split(\" \");\n        // build a list of words whose lengths are prime numbers\n        List<String> list = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                list.add(word);\n            }\n        }\n        // return a string contains the words from the original sentence,\n        // whose lengths are prime numbers,\n        // the order of the words in the new string should be the same as the original one.\n        String result = \"\";\n        for (String word : words) {\n            if (list.contains(word)) {\n                result += word + \" \";\n            }\n        }\n        return result.trim();",
        "grade-28": {
            "execution": 0
        },
        "6": "String[] words = sentence.split(\" \");\n        String result = \"\";\n        for (String word : words) {\n            int length = word.length();\n            boolean isPrime = true;\n            for (int i = 2; i < length; i++) {\n                if (length % i == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                result += word + \" \";\n            }\n        }\n        return result.trim();",
        "grade-6": {
            "execution": 0
        },
        "74": "// Note that there are only 26 letters in the English alphabet\n        boolean[] notPrime = new boolean[26];\n        notPrime[1] = true;\n        for (int i = 2; i < notPrime.length; i++) {\n            if (!notPrime[i]) {\n                int j = i + i;\n                while (j < notPrime.length) {\n                    notPrime[j] = true;\n                    j += i;\n                }\n            }\n        }\n        List<String> result = new ArrayList<>();\n        for (String word : sentence.split(\" \")) {\n            if (!notPrime[word.length()]) {\n                result.add(word);\n            }\n        }\n        return String.join(\" \", result);",
        "grade-74": {
            "execution": 1
        },
        "65": "StringBuilder sb = new StringBuilder();\n        String[] words = sentence.split(\" \");\n        for (String word : words) {\n            int length = word.length();\n            if (isPrime(length)) {\n                sb.append(word);\n                sb.append(\" \");\n            }\n        }\n        return sb.toString().trim();",
        "grade-65": {
            "execution": 0
        },
        "59": "if (sentence == null || sentence.isEmpty()) {\n            return \"\";\n        }\n        String[] words = sentence.split(\" \");\n        StringBuilder builder = new StringBuilder();\n        for (String word : words) {\n            if (word.length() == 1) {\n                builder.append(word).append(\" \");\n            } else if (word.length() == 2) {\n                builder.append(word).append(\" \");\n            } else if (word.length() == 3) {\n                builder.append(word).append(\" \");\n            } else if (word.length() == 5) {\n                builder.append(word).append(\" \");\n            } else if (word.length() == 7) {\n                builder.append(word).append(\" \");\n            } else if (word.length() == 11) {\n                builder.append(word).append(\" \");\n            } else if (word.length() == 13) {\n                builder.append(word).append(\" \");\n            } else if (word.length() == 17) {\n                builder.append(word).append(\" \");\n            } else if (word.length() == 19) {\n                builder.append(word).append(\" \");\n            } else if (word.length() == 23) {\n                builder.append(word).append(\" \");\n            } else if (word.length() == 29) {\n                builder.append(word).append(\" \");\n            } else if (word.length() == 31) {\n                builder.append(word).append(\" \");\n            } else if (word.length() == 37) {\n                builder.append(word).append(\" \");\n            } else if (word.length() == 41) {\n                builder.append(word).append(\" \");\n            } else if (word.length() == 43) {\n                builder.append(word).append(\" \");\n            } else if (word.length() == 47) {\n                builder.append(word).append(\" \");\n            } else if (word.length() == 53) {\n                builder.append(word).append(\" \");\n            } else if (word.length() == 59) {\n                builder",
        "grade-59": {
            "execution": 0
        },
        "36": "String result = \"\";\n        String[] words = sentence.split(\" \");\n        for (String word : words) {\n            int length = word.length();\n            if (length > 1 && length % 2 == 1) {\n                int limit = (int) Math.sqrt(length);\n                boolean isPrime = true;\n                for (int i = 3; i <= limit; i += 2) {\n                    if (length % i == 0) {\n                        isPrime = false;\n                        break;\n                    }\n                }\n                if (isPrime) {\n                    result += word + \" \";\n                }\n            }\n        }\n        if (result.length() > 0) {\n            result = result.substring(0, result.length() - 1);\n        }\n        return result;",
        "grade-36": {
            "execution": 0
        },
        "26": "return null;",
        "grade-26": {
            "execution": 0
        },
        "194": "List<String> result = new ArrayList<>();\n        for (String word : sentence.split(\" \")) {\n            int length = word.length();\n            if (isPrime(length)) {\n                result.add(word);\n            }\n        }\n        return String.join(\" \", result);",
        "grade-194": {
            "execution": 0
        },
        "158": "// \"Lazy evaluation\"\n        return Arrays.stream(sentence.split(\" \"))\n            .filter(w -> isPrimeNumber(w.length()))\n            .collect(Collectors.joining(\" \"));",
        "grade-158": {
            "execution": 0
        },
        "22": "// note that there's also a shortcut method to find prime numbers,\n        // which is called the Sieve of Eratosthenes, which calculates all the prime numbers\n        // between 1 and n in O(nloglogn) time, so it's faster than the prime number test\n        // in this example\n        StringBuilder result = new StringBuilder();\n        // another way to do it would be to just use the split function,\n        // but i wanna show you how a simple loop can also do the same thing\n        // note that sb's value starts with an empty string, and if we add\n        // a space at the end it'll look like this \" \", which we want to avoid\n        // (unless the result is an empty string)\n        // so we'll just add a space at the beginning\n        result.append(\" \");\n        // to avoid adding more than one space to the string, we can set the\n        // value of this boolean to true right before we append a space,\n        // and the next time we're going to append a space, we'll check this boolean\n        // and if it's true, we'll skip adding the space, since it's already there\n        boolean lastCharWasSpace = false;\n        for (int i = 0; i < sentence.length(); i++) {\n            char c = sentence.charAt(i);\n            if (c == ' ') {\n                // if the last character we added was a space\n                // we just skip this character\n                if (lastCharWasSpace) continue;\n                // if the last character we added wasn't a space\n                // we can just set lastCharWasSpace to true,\n                // and don't forget to add the space to the string\n                lastCharWasSpace = true;\n                result.append(\" \");\n            } else {\n                // if it's not a space, we can just set lastCharWasSpace to false\n                lastCharWasSpace = false;\n                // and append the character to the string\n                result.append(c);\n            }\n        }\n        // now we just have to check if the last character is a space,\n        // and if it is, we just remove it\n        int len = result.length();\n        if (result.charAt(len - 1) == '",
        "grade-22": {
            "execution": 0
        },
        "170": "// Given a string, the sentence.\n        // Split the string into words by whitespace.\n        String[] words = sentence.split(\"\\\\s+\");\n        // Assume a prime number.\n        int isPrime = 1;\n        // Assume the input string is empty.\n        String result = \"\";\n        // Iterate over all words in the string.\n        for (int i = 0; i < words.length; i++) {\n            // Calculate the length of the word.\n            int length = words[i].length();\n            // Iterate over all numbers from 2 to n - 1.\n            for (int j = 2; j < length; j++) {\n                // If n is divisible by j, assume n is not prime.\n                if (length % j == 0) {\n                    isPrime = 0;\n                    break;\n                }\n            }\n            // If the number is prime,\n            // add the current word to the result string.\n            if (isPrime == 1) {\n                result += words[i] + \" \";\n            }\n            // Assume a prime number for the next word.\n            isPrime = 1;\n        }\n        // Return the result string.\n        return result;",
        "grade-170": {
            "execution": 0
        },
        "118": "String[] words = sentence.split(\" \");\n        String result = \"\";\n        for (String w : words) {\n            if (isPrime(w.length())) {\n                result += w + \" \";\n            }\n        }\n        return result.trim();",
        "grade-118": {
            "execution": 0
        },
        "8": "return Stream.of(sentence.split(\" \"))\n        .filter(s -> new BigInteger(s.length() + \"\").isProbablePrime(Integer.MAX_VALUE))\n        .collect(Collectors.joining(\" \"));",
        "grade-8": {
            "execution": 1
        },
        "7": "boolean[] primes = sieve(sentence.length());\n        String[] words = sentence.split(\" \");\n        StringBuilder sb = new StringBuilder();\n        for (String word : words) {\n            if (primes[word.length()]) {\n                sb.append(word);\n                sb.append(\" \");\n            }\n        }\n        sb.deleteCharAt(sb.length() - 1);\n        return sb.toString();",
        "grade-7": {
            "execution": 0
        },
        "23": "return Arrays.stream(sentence.split(\" \"))\n            .filter(w -> isPrime(w.length()))\n            .collect(Collectors.joining(\" \"));",
        "grade-23": {
            "execution": 0
        },
        "57": "String[] words = sentence.split(\" \");\n        List<Integer> primes = new ArrayList<>();\n        boolean[] isNotPrime = new boolean[100];\n        int x = 2;\n        while (x < 100) {\n            if (!isNotPrime[x]) {\n                primes.add(x);\n                for (int j = x; j < 100; j += x) {\n                    isNotPrime[j] = true;\n                }\n            }\n            x++;\n        }\n        StringBuilder sb = new StringBuilder();\n        for (String word : words) {\n            if (primes.contains(word.length())) {\n                sb.append(word);\n                sb.append(\" \");\n            }\n        }\n        return sb.toString().trim();",
        "grade-57": {
            "execution": 1
        },
        "61": "int[] isPrime = new int[101];\n        for (int i = 2; i < isPrime.length; i++) {\n            isPrime[i] = 1;\n        }\n        for (int i = 2; i < isPrime.length; i++) {\n            if (isPrime[i] == 1) {\n                for (int j = i * 2; j < isPrime.length; j += i) {\n                    isPrime[j] = 0;\n                }\n            }\n        }\n        String[] words = sentence.split(\" \");\n        StringBuilder sb = new StringBuilder();\n        for (String word : words) {\n            if (isPrime[word.length()] == 1) {\n                sb.append(word);\n                sb.append(\" \");\n            }\n        }\n        return sb.toString().trim();",
        "grade-61": {
            "execution": 1
        },
        "147": "return (Arrays.stream(sentence.split(\" \"))\n                      .filter(x -> isPrime(x.length()))\n                      .collect(Collectors.joining(\" \")));",
        "grade-147": {
            "execution": 0
        },
        "173": "final var words = sentence.split(\" \");\n        var result = new StringBuilder();\n        var primes = primeNumbersLessThan(100);\n        for (var word : words) {\n            if (primes.contains(word.length())) {\n                result.append(word).append(\" \");\n            }\n        }\n        return result.toString().trim();",
        "grade-173": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given a list of numbers.\n    // You need to return the sum of squared numbers in the given list,\n    // round each element in the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst = [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n",
        "snippet": [
            "        return lst.stream().map(p -> (int) Math.ceil(p)).map(p -> p * p).reduce(Integer::sum).get();\n    }\n}"
        ],
        "simplified": "You are given a list of numbers. You need to return the sum of squared numbers in the given list, round each element in the list to the upper int(Ceiling) first.",
        "task_id": "133",
        "28": "int result = 0;\n        for (Float i : lst) {\n            result += Math.ceil(i) * Math.ceil(i);\n        }\n        return result;",
        "grade-28": {
            "execution": 1
        },
        "6": "int sum = 0;\n        for (Float num : lst) {\n            sum += Math.ceil(num) * Math.ceil(num);\n        }\n        return sum;",
        "grade-6": {
            "execution": 1
        },
        "81": "return lst.stream().mapToInt(value -> (int) Math.ceil(value) * (int) Math.ceil(value)).sum();",
        "grade-81": {
            "execution": 1
        },
        "71": "// Write your code here\n        int sum = 0;\n        for (float i : lst) {\n            int rounded = (int) Math.ceil(i);\n            sum += Math.pow(rounded, 2);\n        }\n        return sum;",
        "grade-71": {
            "execution": 1
        },
        "63": "return lst.stream().map(x -> Math.round(x)).map(x -> (int) Math.pow(x, 2)).reduce(0, (x, y) -> x + y);",
        "grade-63": {
            "execution": 0
        },
        "35": "// Python:\n        // sum([i**2 for i in lst])\n        return lst.stream().mapToInt(i -> (int) Math.ceil(i)).map(i -> i * i).sum();",
        "grade-35": {
            "execution": 1
        },
        "26": "// Code here\n        return 0;",
        "grade-26": {
            "execution": 0
        },
        "167": "return lst.stream().map(i -> (int)Math.ceil(i)).map(i -> i*i).reduce(0,(total,i) -> total+i);",
        "grade-167": {
            "execution": 1
        },
        "22": "// YOUR CODE HERE\n        int sum = 0;\n        for (Float f : lst) {\n            int fInt = (int) Math.ceil(f);\n            sum += fInt * fInt;\n        }\n        return sum;",
        "grade-22": {
            "execution": 1
        },
        "183": "int sum = 0;\n        for (float number : lst) {\n            sum += Math.round(number) * Math.round(number);\n        }\n        return sum;",
        "grade-183": {
            "execution": 0
        },
        "128": "return lst.stream().map(x -> Math.round(x * x)).reduce(0, (x, y) -> x + y);",
        "grade-128": {
            "execution": 0
        },
        "8": "int sum = 0;\n        for (float num : lst) {\n            // int converted = (int) Math.ceil(num);\n            int converted = (int) Math.round(num);\n            sum += converted * converted;\n        }\n        return sum;",
        "grade-8": {
            "execution": 0
        },
        "7": "int sum = 0;\n        // code here\n        return sum;",
        "grade-7": {
            "execution": 0
        },
        "23": "// Your code here\n        return -1;",
        "grade-23": {
            "execution": 0
        },
        "61": "return lst.stream().mapToInt(f -> (int) Math.ceil(f)).map(f -> f * f).sum();",
        "grade-61": {
            "execution": 1
        },
        "68": "ArrayList<Integer> squares = new ArrayList<Integer>();\n        for (Float i : lst) {\n            squares.add((int) Math.ceil(i));\n        }\n        return squares.stream().mapToInt(x -> x * x).sum();",
        "grade-68": {
            "execution": 1
        },
        "155": "// write your code here\n        // List<Float> squared = new ArrayList<Float>();\n        // for (int i = 0; i < lst.size(); i++) {\n        // squared.add(new Float(Math.ceil(lst.get(i))));\n        // }\n        // return squared.stream().mapToInt(a -> a.intValue()).map(a -> a * a).sum();\n        return lst.stream().mapToInt(a -> (int) Math.ceil(a)).map(a -> a * a).sum();",
        "grade-155": {
            "execution": 1
        },
        "187": "return lst.stream().map(n -> (int)Math.ceil(n))\n                .map(n -> n * n)\n                .reduce(0, (a,b) -> a + b);",
        "grade-187": {
            "execution": 1
        },
        "172": "// Write your code here\n        // Use lst.size() to get number of elements in the list\n        // Use lst.get(i) to get the i-th element in the list\n        // You can use Math.ceil(x) to round x to the upper integer\n        // You can use Math.pow(x,y) to get x^y\n        // You can use ArrayList.add(e) to add e to ArrayList\n        return 0;",
        "grade-172": {
            "execution": 0
        },
        "53": "int sum = 0;\n        for (float i : lst) {\n            sum += (int)Math.ceil(i) * (int)Math.ceil(i);\n        }\n        return sum;",
        "grade-53": {
            "execution": 1
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a non-empty list of integers lst. add the even elements that are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n    public static int add(ArrayList<Integer> lst) {\n",
        "snippet": [
            "        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"
        ],
        "simplified": "Given a non-empty list of integers lst. add the even elements that are at odd indices..",
        "task_id": "85",
        "126": "return -1;",
        "grade-126": {
            "execution": 0
        },
        "18": "return lst.stream().filter(x -> x % 2 == 0).reduce(0, Integer::sum);",
        "grade-18": {
            "execution": 0
        },
        "3": "int count = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 1 && lst.get(i) % 2 == 0)\n                count += lst.get(i);\n        }\n        return count;",
        "grade-3": {
            "execution": 1
        },
        "158": "return lst.stream().filter(x -> x % 2 == 0).filter(x -> x % 2 == 0).reduce(0, (sum, x) -> sum + x);",
        "grade-158": {
            "execution": 0
        },
        "46": "int result = 0;\n        for (int i = 0; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 0) {\n                result += lst.get(i);\n            }\n        }\n        return result;",
        "grade-46": {
            "execution": 0
        },
        "37": "ArrayList<Integer> odds = new ArrayList<Integer>();\n        ArrayList<Integer> evens = new ArrayList<Integer>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                evens.add(lst.get(i));\n            } else {\n                odds.add(lst.get(i));\n            }\n        }\n        int evensSum = 0;\n        for (int i = 0; i < evens.size(); i++) {\n            evensSum += evens.get(i);\n        }\n        int oddsSum = 0;\n        for (int i = 0; i < odds.size(); i++) {\n            oddsSum += odds.get(i);\n        }\n        return evensSum - oddsSum;",
        "grade-37": {
            "execution": 0
        },
        "34": "ArrayList<Integer> x = new ArrayList<Integer>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 1 && lst.get(i) % 2 == 0) {\n                x.add(lst.get(i));\n            }\n        }\n        int y = 0;\n        for (int i = 0; i < x.size(); i++) {\n            y += x.get(i);\n        }\n        return y;",
        "grade-34": {
            "execution": 1
        },
        "21": "return lst.stream().filter(x -> x % 2 == 0).reduce(0, (a, b) -> a + b);",
        "grade-21": {
            "execution": 0
        },
        "17": "return lst.stream().filter(x -> (x % 2 == 0 && lst.indexOf(x) % 2 != 0)).reduce(0, (x, y) -> x + y);",
        "grade-17": {
            "execution": 0
        },
        "132": "return IntStream.range(0, lst.size())\n                        .filter(i -> (i % 2 == 1 && lst.get(i) % 2 == 0))\n                        .map(i -> lst.get(i))\n                        .sum();",
        "grade-132": {
            "execution": 1
        },
        "193": "return lst.stream().filter(e -> e % 2 == 0).mapToInt(e -> e).sum();",
        "grade-193": {
            "execution": 0
        },
        "105": "int result = 0;\n        int i = 0;\n        while (i < lst.size()) {\n            if (i % 2 == 1 && lst.get(i) % 2 == 0) {\n                result += lst.get(i);\n            }\n            i++;\n        }\n        return result;",
        "grade-105": {
            "execution": 1
        },
        "15": "return lst.stream().reduce(0, (a,b) -> a + (b % 2 == 0 ? b : 0));",
        "grade-15": {
            "execution": 0
        },
        "114": "// return 1;\n        return lst.stream().filter(x -> (x%2 == 0 && lst.indexOf(x)%2 != 0)).reduce(0, (x, y) -> x + y);",
        "grade-114": {
            "execution": 0
        },
        "79": "// create a list of booleans to hold the results of each odd index.\n        ArrayList<Boolean> oddIndices = new ArrayList<Boolean>();\n        // For each element in the list, check if it is odd, and if it is odd, add it to the new odd indices list.\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 1) {\n                oddIndices.add(true);\n            } else {\n                oddIndices.add(false);\n            }\n        }\n        // Create a list to hold the results of the even elements at odd indices.\n        ArrayList<Integer> results = new ArrayList<Integer>();\n        // For each element in the list, check if it is odd and also if it is even.\n        // If it is even and at an odd index, add it to the results list.\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) % 2 == 0 && oddIndices.get(i)) {\n                results.add(lst.get(i));\n            }\n        }\n        // create a variable to hold the sum of the results list.\n        int sum = 0;\n        // For each element in the results list, add it to the variable that holds the sum.\n        for (int i = 0; i < results.size(); i++) {\n            sum += results.get(i);\n        }\n        // return the sum of the even elements at odd indices.\n        return sum;",
        "grade-79": {
            "execution": 1
        },
        "4": "int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 1 && lst.get(i) % 2 == 0)\n                sum += lst.get(i);\n        }\n        return sum;",
        "grade-4": {
            "execution": 1
        },
        "33": "return lst.stream().filter(i -> i % 2 == 0).filter(i -> lst.indexOf(i) % 2 != 0).reduce(0, (a, b) -> a + b);",
        "grade-33": {
            "execution": 0
        },
        "35": "int r = 0;\n        int index = 0;\n        for (int i : lst) {\n            if (index % 2 == 1 && i % 2 == 0) {\n                r += i;\n            }\n            index++;\n        }\n        return r;",
        "grade-35": {
            "execution": 1
        },
        "97": "return lst.stream().filter(i -> i % 2 == 0).reduce(0, (a, b) -> a + b);",
        "grade-97": {
            "execution": 0
        },
        "117": "int cnt = 0;\n        int ans = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 == 0) {\n                ans += lst.get(i);\n            }\n        }\n        return ans;",
        "grade-117": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // sum_to_n is a function that sums numbers from 1 to n.\n    // >>> sum_to_n(30)\n    // 465\n    // >>> sum_to_n(100)\n    // 5050\n    // >>> sum_to_n(5)\n    // 15\n    // >>> sum_to_n(10)\n    // 55\n    // >>> sum_to_n(1)\n    // 1\n    public static int sumToN(int n) {\n",
        "snippet": [
            "        int result = 0;\n        for (int i = 1; i <= n; i++) {\n            result += i;\n        }\n        return result;\n    }\n}"
        ],
        "simplified": "sum_to_n is a function that sums numbers from 1 to n.",
        "task_id": "60",
        "185": "// Fill in here\n        return n*(n+1)/2;",
        "grade-185": {
            "execution": 1
        },
        "16": "// TODO: Implement the method sumToN\n        // You cannot use any loops or any multiplication or division operators (i.e., +, -, /, *)\n        // Write a recursive function that adds the numbers 1 to n.\n        if (n==1) return 1;\n        return sumToN(n-1)+n;",
        "grade-16": {
            "execution": 1
        },
        "3": "int res = n;\n        if (n != 1) {\n            res = res + sumToN(n - 1);\n        }\n        return res;",
        "grade-3": {
            "execution": 1
        },
        "60": "//INSERT YOUR CODE HERE\n        int res = 0;\n        for (int i = 0; i <= n; i++) {\n            res += i;\n        }\n        return res;",
        "grade-60": {
            "execution": 1
        },
        "50": "// TODO: Please implement this method to return the sum of numbers from 1 to n\n        // >>> sum_to_n(30)\n        // 465\n        // >>> sum_to_n(100)\n        // 5050\n        // >>> sum_to_n(5)\n        // 15\n        // >>> sum_to_n(10)\n        // 55\n        // >>> sum_to_n(1)\n        // 1\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;",
        "grade-50": {
            "execution": 1
        },
        "40": "// STUDENTS:\n        // Do not change any code above this line.\n        // Your function should be one line long.\n        // Your function must use recursion to solve this problem.\n        // Remember that a factorial of n, n!, is equal to:\n        // 1 * 2 * 3 * 4 * ... * n\n        // If you need help, watch the video titled\n        // \"Recursion\" at ece250.com.\n        if (n==1) {\n            return 1;\n        }\n        return n + sumToN(n-1);",
        "grade-40": {
            "execution": 1
        },
        "20": "// if 1 <= n <= 100, return the sum of numbers from 1 to n\n        // else, return -1\n        if (n < 1 || n > 100) {\n            return -1;\n        }\n        int sum = 0;\n        int i = 1;\n        while (i <= n) {\n            sum += i;\n            i += 1;\n        }\n        return sum;",
        "grade-20": {
            "execution": 1
        },
        "15": "return n == 1 ? 1 : sumToN(n - 1) + n;",
        "grade-15": {
            "execution": 1
        },
        "199": "return IntStream.rangeClosed(1, n).sum();",
        "grade-199": {
            "execution": 1
        },
        "152": "return n == 1 ? 1 : n + sumToN(n - 1);",
        "grade-152": {
            "execution": 1
        },
        "13": "if (n <= 0) {\n            return 0;\n        }\n        return n + sumToN(n - 1);",
        "grade-13": {
            "execution": 1
        },
        "166": "// BEGIN SOLUTION\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n        // END SOLUTION",
        "grade-166": {
            "execution": 1
        },
        "112": "int ans = 0;\n        for (int i = 1; i <= n; i++) {\n            ans += i;\n        }\n        return ans;",
        "grade-112": {
            "execution": 1
        },
        "4": "return (n * (n + 1)) / 2;",
        "grade-4": {
            "execution": 1
        },
        "39": "return ((n * (n + 1)) / 2);",
        "grade-39": {
            "execution": 1
        },
        "43": "return n;",
        "grade-43": {
            "execution": 0
        },
        "140": "// Implement this function.\n        return n*(n+1)/2;",
        "grade-140": {
            "execution": 1
        },
        "177": "// base case:\n        if (n == 1) {\n            return 1;\n        } else {\n            // recursive case:\n            return n + sumToN(n - 1);\n        }",
        "grade-177": {
            "execution": 1
        },
        "155": "// Your code here\n        return 0;",
        "grade-155": {
            "execution": 0
        },
        "36": "// YOUR CODE HERE\n        int i = 1;\n        int sum = 0;\n        while (i <= n) {\n            sum += i;\n            i++;\n        }\n        return sum;",
        "grade-36": {
            "execution": 1
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given number n, find the largest number that divides n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public static int largestDivisor(int n) {\n",
        "snippet": [
            "        for (int i = n - 1; i > 0; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return 1;\n    }\n}"
        ],
        "simplified": "For a given number n, find the largest number that divides n evenly, smaller than n",
        "task_id": "24",
        "34": "// >>> (2 ** 15 - 1) / 15\n        // 127\n        for (int i = (int)Math.pow(2, n) - 1; i > 0; i--) {\n            if (n % i == 0) return i;\n        }\n        return 0;",
        "grade-34": {
            "execution": 0
        },
        "6": "for (int i = n - 1; i > 0; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return 1;",
        "grade-6": {
            "execution": 1
        },
        "93": "int largestDivisor = 1;\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) largestDivisor = i;\n        }\n        return largestDivisor;",
        "grade-93": {
            "execution": 1
        },
        "81": "// Write your code here.\n        int largestDivisor = 1;\n        if (n == 1) return n;\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                largestDivisor = i;\n            }\n        }\n        return largestDivisor;",
        "grade-81": {
            "execution": 1
        },
        "73": "int cur = n - 1;\n        while (n % cur != 0) cur--;\n        return cur;",
        "grade-73": {
            "execution": 1
        },
        "46": "for (int i = n - 1; i > 0; i--) {\n            if (n % i == 0) return i;\n        }\n        return 1;",
        "grade-46": {
            "execution": 1
        },
        "32": "int divisor = 1;\n        for (int i = 2; i < n / 2; i++) {\n            if (n % i == 0) {\n                divisor = i;\n            }\n        }\n        return divisor;",
        "grade-32": {
            "execution": 0
        },
        "27": "// Iterate over all numbers starting from n - 1 and going backwards to 2\n        for (int i = n - 1; i >= 2; i--) {\n            // If the number is divisible by n (modulo operator is 0), return the number\n            if (n % i == 0) return i;\n        }\n        // If no numbers are divisible, return 1\n        return 1;",
        "grade-27": {
            "execution": 1
        },
        "152": "int x = n-1;\n        for (;x > 0;x--) {\n            if (n % x == 0)\n                return x;\n        }\n        return 0;",
        "grade-152": {
            "execution": 1
        },
        "8": "int result = 1;\n        int sqrt = (int) Math.sqrt(n);\n        for (int i = 2; i <= sqrt; i++) {\n            if (n % i == 0) {\n                result = n / i;\n            }\n        }\n        return result;",
        "grade-8": {
            "execution": 0
        },
        "7": "if (n == 1) return 1;\n        return n / 2;",
        "grade-7": {
            "execution": 0
        },
        "28": "int maxDivisor = n;\n        for (int i = n - 1; i > 0; i--) {\n            if (n % i == 0) {\n                maxDivisor = i;\n                break;\n            }\n        }\n        return maxDivisor;",
        "grade-28": {
            "execution": 1
        },
        "71": "// Your code here\n        int result = 1;\n        for (int i = 1; i <= n / 2; i++) {\n            if (n % i == 0) {\n                result = i;\n            }\n        }\n        return result;",
        "grade-71": {
            "execution": 1
        },
        "75": "int largestDivisor = 0;\n        // Check if it is divisible by i, if so set largestDivisor to i\n        for (int i = 1; i < n; i++) {\n            if (n % i == 0) {\n                largestDivisor = i;\n            }\n        }\n        return largestDivisor;",
        "grade-75": {
            "execution": 1
        },
        "190": "for (int i = n - 1; i > 0; i--) {\n        if (n % i == 0) return i;\n      }\n      return 0;",
        "grade-190": {
            "execution": 1
        },
        "63": "// >>> n = 15\n        // >>> n % i\n        // 15 % 1 = 0\n        // 15 % 2 = 1\n        // 15 % 3 = 0\n        // 15 % 4 = 3\n        // 15 % 5 = 0\n        // 15 % 6 = 3\n        // 15 % 7 = 1\n        // 15 % 8 = 7\n        // 15 % 9 = 6\n        // 15 % 10 = 5\n        // 15 % 11 = 4\n        // 15 % 12 = 3\n        // 15 % 13 = 2\n        // 15 % 14 = 1\n        // 15 % 15 = 0\n        for (int i = n-1; i > 0; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return 1;",
        "grade-63": {
            "execution": 1
        },
        "151": "// Finds all of the numbers that divide n evenly (other than 1), finds the largest\n        // of these numbers, and returns it.\n        return IntStream.range(2, n)\n                        .filter(i -> n % i == 0)\n                        .reduce(0, Math::max);",
        "grade-151": {
            "execution": 0
        },
        "72": "// prime factorization using a sieve\n        boolean[] primes = new boolean[n];\n        Arrays.fill(primes, true);\n        for (int i = 2; i < n; i++) {\n            if (primes[i]) {\n                for (int j = i * 2; j < n; j += i) {\n                    primes[j] = false;\n                }\n            }\n        }\n        // if n is prime, return 1\n        if (primes[n]) return 1;\n        // otherwise, return the largest prime factor\n        for (int i = n - 1; i >= 2; i--) {\n            if (primes[i] && n % i == 0) return i;\n        }\n        return 1;",
        "grade-72": {
            "execution": 0
        },
        "166": "int i = n - 1;\n        while(i > 0 && n % i != 0) {\n            i--;\n        }\n        return i;",
        "grade-166": {
            "execution": 1
        },
        "95": "// You can assume n is a natural number greater than 1\n        // Your solution should not contain any loops\n        int divisor = n-1;\n        while(divisor > 0) {\n            if(n % divisor == 0) {\n                return divisor;\n            }\n            divisor--;\n        }\n        return 1;",
        "grade-95": {
            "execution": 1
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given length of a side and high return area for a triangle.\n    // >>> triangle_area(5, 3)\n    // 7.5\n    public static float triangleArea(int a, int h) {\n",
        "snippet": [
            "        return a * h / 2;\n    }\n}"
        ],
        "simplified": "Given length of a side and high return area for a triangle.",
        "task_id": "45",
        "17": "// ...",
        "grade-17": {
            "execution": 0
        },
        "3": "return (float) a * h / 2;",
        "grade-3": {
            "execution": 1
        },
        "97": "return (float) 0.5 * a * h;",
        "grade-97": {
            "execution": 1
        },
        "21": "float area = (float) (a * h / 2.0);\n        return area;",
        "grade-21": {
            "execution": 1
        },
        "19": "return (a * h) / 2.0f;",
        "grade-19": {
            "execution": 1
        },
        "187": "// (1/2)*a*h\n        return (float) (0.5 * a * h);",
        "grade-187": {
            "execution": 1
        },
        "10": "float result = a * h / 2.0f;\n        return result;",
        "grade-10": {
            "execution": 1
        },
        "163": "float area = 0.5f * a * h;\n        return area;",
        "grade-163": {
            "execution": 1
        },
        "6": "return (float) (a * h) / 2;",
        "grade-6": {
            "execution": 1
        },
        "87": "// WRITE YOUR CODE HERE\n        return 0;",
        "grade-87": {
            "execution": 0
        },
        "135": "float result = 0.5f * a * h;\n        return result;",
        "grade-135": {
            "execution": 1
        },
        "58": "return (float) (0.5*a*h);",
        "grade-58": {
            "execution": 1
        },
        "5": "return (float) (0.5 * a * h);",
        "grade-5": {
            "execution": 1
        },
        "73": "return (float) a*h/2;",
        "grade-73": {
            "execution": 1
        },
        "46": "//return ...;\n        return (float)a*h/2;",
        "grade-46": {
            "execution": 1
        },
        "2": "float area = (a * h) / 2;\n        return area;",
        "grade-2": {
            "execution": 0
        },
        "1": "return (a * h) / 2;",
        "grade-1": {
            "execution": 0
        },
        "116": "return (float) ((1.0 / 2.0) * a * h);",
        "grade-116": {
            "execution": 1
        },
        "16": "return (a*h)/2.0f;",
        "grade-16": {
            "execution": 1
        },
        "146": "return (float) ((float)a * (float)h * (1.0/2.0));",
        "grade-146": {
            "execution": 1
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    // as follows: start with any positive integer n. Then each term is obtained from the \n    // previous term as follows: if the previous term is even, the next term is one half of \n    // the previous term. If the previous term is odd, the next term is 3 times the previous\n    // term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1) is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    public static ArrayList<Integer> getOddCollatz(int n) {\n",
        "snippet": [
            "        List<Integer> odd_collatz = new ArrayList<>();\n        if (n % 2 == 1) {\n            odd_collatz.add(n);\n        }\n        while (n > 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = n * 3 + 1;\n            }\n            if (n % 2 == 1) {\n                odd_collatz.add(n);\n            }\n        }\n        Collections.sort(odd_collatz);\n        return odd_collatz;\n    }\n}"
        ],
        "simplified": "Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence. The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined as follows: start with any positive integer n. Then each term is obtained from the previous term as follows: if the previous term is even, the next term is one half of the previous term. If the previous term is odd, the next term is 3 times the previous term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1. Note: 1. Collatz(1) is [1]. 2. returned list sorted in increasing order.",
        "task_id": "123",
        "170": "if (n <= 0) {\n            return new ArrayList<Integer>();\n        }\n        ArrayList<Integer> sequence = new ArrayList<Integer>();\n        sequence.add(n);\n        while (n != 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = n * 3 + 1;\n            }\n            sequence.add(n);\n        }\n        ArrayList<Integer> odds = new ArrayList<Integer>();\n        for (int i : sequence) {\n            if (i % 2 == 1) {\n                odds.add(i);\n            }\n        }\n        return odds;",
        "grade-170": {
            "execution": 0
        },
        "28": "ArrayList<Integer> list = new ArrayList<Integer>();\n        if (n < 1) {\n            return list;\n        }\n        list.add(n);\n        while (n != 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = n * 3 + 1;\n            }\n            list.add(n);\n        }\n        ArrayList<Integer> results = new ArrayList<Integer>();\n        for (int i = 0; i < list.size(); i++) {\n            if (list.get(i) % 2 != 0) {\n                results.add(list.get(i));\n            }\n        }\n        return results;",
        "grade-28": {
            "execution": 0
        },
        "6": "ArrayList<Integer> result = new ArrayList<Integer>();\n        result.add(n);\n        while (n != 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n            if (n % 2 != 0) {\n                result.add(n);\n            }\n        }\n        return result;",
        "grade-6": {
            "execution": 0
        },
        "197": "ArrayList<Integer> oddCollatz = new ArrayList<Integer>();\n        if (n == 1) {\n            oddCollatz.add(1);\n            return oddCollatz;\n        }\n        ArrayList<Integer> collatzSeq = getCollatz(n);\n        for (int i = 0; i < collatzSeq.size(); i++) {\n            if (collatzSeq.get(i) % 2 != 0) {\n                oddCollatz.add(collatzSeq.get(i));\n            }\n        }\n        return oddCollatz;",
        "grade-197": {
            "execution": 0
        },
        "72": "if (n <= 0)\n            return new ArrayList<Integer>();\n        ArrayList<Integer> collatz = new ArrayList<Integer>();\n        HashSet<Integer> collatzSet = new HashSet<Integer>();\n        int cur = n;\n        while (cur != 1) {\n            if (cur % 2 == 1) {\n                collatz.add(cur);\n                collatzSet.add(cur);\n            }\n            cur = cur % 2 == 0 ? cur / 2 : 3 * cur + 1;\n        }\n        collatz.add(1);\n        collatzSet.add(1);\n        ArrayList<Integer> ans = new ArrayList<Integer>();\n        int i = 0;\n        while (i < collatz.size()) {\n            int el = collatz.get(i);\n            if (el % 2 == 1) {\n                ans.add(el);\n            }\n            i++;\n        }\n        return ans;",
        "grade-72": {
            "execution": 0
        },
        "63": "ArrayList<Integer> ans = new ArrayList<>();\n        while (n > 1) {\n            ans.add(n);\n            if (n % 2 == 0) n /= 2;\n            else n = n * 3 + 1;\n        }\n        ans.add(1);\n        return ans;",
        "grade-63": {
            "execution": 0
        },
        "58": "ArrayList<Integer> collatz = new ArrayList<Integer>();\n        ArrayList<Integer> oddCollatz = new ArrayList<Integer>();\n        int i = n;\n        int counter = 0;\n        //Generate Collatz sequence\n        while(i != 1){\n            collatz.add(i);\n            if(i % 2 == 0){\n                i = i / 2;\n            }\n            else{\n                i = 3 * i + 1;\n            }\n        }\n        //Get odd numbers\n        for(int j = 0; j < collatz.size(); j++){\n            if(collatz.get(j) % 2 != 0){\n                oddCollatz.add(collatz.get(j));\n            }\n        }\n        return oddCollatz;",
        "grade-58": {
            "execution": 0
        },
        "35": "// You have to fill in the details here.\n        ArrayList<Integer> collatz = new ArrayList<Integer>();\n        while (n > 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n            collatz.add(n);\n        }\n        return collatz;",
        "grade-35": {
            "execution": 0
        },
        "196": "// TODO: Implement your solution here.\n        throw new UnsupportedOperationException(\"Not implemented yet\");",
        "grade-196": {
            "execution": 0
        },
        "26": "assert n >= 1;\n        ArrayList<Integer> list = new ArrayList<>();\n        int val = n;\n        do {\n            if (val % 2 == 1) {\n                list.add(val);\n            }\n            if (val % 2 == 0) {\n                val /= 2;\n            } else {\n                val = 3 * val + 1;\n            }\n        } while (val != 1);\n        list.add(1);\n        return list;",
        "grade-26": {
            "execution": 0
        },
        "180": "ArrayList<Integer> output = new ArrayList<Integer>();\n        while (n != 1) {\n            output.add(n);\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n        }\n        output.add(1);\n        return output;",
        "grade-180": {
            "execution": 0
        },
        "144": "if (n <= 0) {\n            throw new IllegalArgumentException(\"n must be positive!\");\n        }\n        ArrayList<Integer> res = new ArrayList<>();\n        HashSet<Integer> visited = new HashSet<>();\n        int curr = n;\n        while (curr != 1) {\n            if (visited.contains(curr)) {\n                throw new IllegalArgumentException(\"The given integer is not in Collatz Sequence!\");\n            }\n            visited.add(curr);\n            if (curr % 2 == 1) {\n                res.add(curr);\n            }\n            curr = curr % 2 == 0 ? curr / 2 : curr * 3 + 1;\n        }\n        res.add(1);\n        return res;",
        "grade-144": {
            "execution": 0
        },
        "22": "ArrayList<Integer> ans = new ArrayList<>();\n        HashSet<Integer> odd_nums = new HashSet<>();\n        while (n > 1) {\n            if (n % 2 == 1) {\n                odd_nums.add(n);\n            }\n            n = n % 2 == 0 ? n / 2 : 3 * n + 1;\n        }\n        odd_nums.add(1);\n        for (int i : odd_nums) {\n            ans.add(i);\n        }\n        return ans;",
        "grade-22": {
            "execution": 0
        },
        "157": "ArrayList<Integer> result = new ArrayList<Integer>();\n        // write your code here\n        while (n != 1) {\n            if (n % 2 == 1) {\n                result.add(n);\n            }\n            n = (n % 2 == 0) ? n / 2 : 3 * n + 1;\n        }\n        result.add(1);\n        return result;",
        "grade-157": {
            "execution": 0
        },
        "110": "ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            int num = i;\n            int count = 0;\n            while (num != 1) {\n                if (num % 2 == 0) {\n                    num = num / 2;\n                } else {\n                    num = num * 3 + 1;\n                }\n                count++;\n            }\n            // count is the number of times you have to run the while loop to get to 1.\n            // if count is odd, then it means i generated an odd number (at least 1, since 1 is odd).\n            if (count % 2 == 1) {\n                result.add(i);\n            }\n        }\n        return result;",
        "grade-110": {
            "execution": 0
        },
        "8": "ArrayList<Integer> res = new ArrayList<>();\n        while (n != 1) {\n            if (n % 2 == 1) {\n                res.add(n);\n            }\n            n = n % 2 == 0 ? n / 2 : 3 * n + 1;\n        }\n        res.add(1);\n        return res;",
        "grade-8": {
            "execution": 0
        },
        "7": "ArrayList<Integer> list = new ArrayList<Integer>();\n        list.add(n);\n        while (n != 1) {\n            if (n % 2 == 0)\n                n = n / 2;\n            else\n                n = 3 * n + 1;\n            if (n != 1 && n % 2 != 0)\n                list.add(n);\n        }\n        list.add(1);\n        return list;",
        "grade-7": {
            "execution": 0
        },
        "23": "ArrayList<Integer> result = new ArrayList<Integer>();\n        // Initialize collatz list with n.\n        ArrayList<Integer> collatz = new ArrayList<Integer>();\n        collatz.add(n);\n        int current = n;\n        while (current != 1) {\n            // If odd add to result and divide by 2.\n            if (current % 2 == 1) {\n                result.add(current);\n                current = current / 2;\n            }\n            // Else, multiply by 3 and add 1.\n            else {\n                current = current * 3 + 1;\n            }\n            collatz.add(current);\n        }\n        result.add(1);\n        return result;",
        "grade-23": {
            "execution": 0
        },
        "56": "ArrayList<Integer> collatz = new ArrayList<Integer>();\n        ArrayList<Integer> oddCollatz = new ArrayList<Integer>();\n        collatz.add(n);\n        while (n != 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n            collatz.add(n);\n        }\n        for (int i = 0; i < collatz.size(); i++) {\n            if (collatz.get(i) % 2 != 0) {\n                oddCollatz.add(collatz.get(i));\n            }\n        }\n        return oddCollatz;",
        "grade-56": {
            "execution": 0
        },
        "60": "ArrayList<Integer> list = new ArrayList<Integer>();\n        while (n > 1) {\n            if (n % 2 == 1) list.add(n);\n            n = n % 2 == 0 ? n / 2 : n * 3 + 1;\n        }\n        list.add(1);\n        return list;",
        "grade-60": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given a list of two strings, both strings consist of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your job is to check if it is possible to concatenate the two strings in\n    // some order, that the resulting string will be good.\n    // A string S is considered to be good if and only if all parentheses in S\n    // are balanced. For example: the string '(())()' is good, while the string\n    // '())' is not.\n    // Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n    // Examples:\n    // match_parens(['()(', ')']) == 'Yes'\n    // match_parens([')', ')']) == 'No'\n    public static String matchParens(ArrayList<String> lst) {\n",
        "snippet": [
            "        List<String> S = Arrays.asList(lst.get(0) + lst.get(1), lst.get(1) + lst.get(0));\n        for (String s : S) {\n            int val = 0;\n            for (char i : s.toCharArray()) {\n                if (i == '(') {\n                    val += 1;\n                } else {\n                    val -= 1;\n                }\n                if (val < 0) {\n                    break;\n                }\n            }\n            if (val == 0) {\n                return \"Yes\";\n            }\n        }\n        return \"No\";\n    }\n}"
        ],
        "simplified": "You are given a list of two strings, both strings consist of open parentheses '(' or close parentheses ')' only. Your job is to check if it is possible to concatenate the two strings in some order, that the resulting string will be good. A string S is considered to be good if and only if all parentheses in S are balanced. For example: the string '(())()' is good, while the string '())' is not. Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.",
        "task_id": "119",
        "180": "int s0 = 0;\n        int s1 = 0;\n        int i;\n        for (i = 0; i < lst.get(0).length(); i++) {\n            if (lst.get(0).charAt(i) == '(') {\n                s0++;\n            } else {\n                s0--;\n            }\n        }\n        for (i = 0; i < lst.get(1).length(); i++) {\n            if (lst.get(1).charAt(i) == '(') {\n                s1++;\n            } else {\n                s1--;\n            }\n        }\n        if (s0 == 0 && s1 == 0) {\n            return \"Yes\";\n        }\n        if (s0 == 0 && s1 != 0) {\n            if (lst.get(0).charAt(lst.get(0).length() - 1) == '(') {\n                return \"Yes\";\n            }\n        }\n        if (s0 != 0 && s1 == 0) {\n            if (lst.get(1).charAt(lst.get(1).length() - 1) == ')') {\n                return \"Yes\";\n            }\n        }\n        return \"No\";",
        "grade-180": {
            "execution": 0
        },
        "30": "int diff = 0;\n        for (String string : lst) {\n            for (char c : string.toCharArray()) {\n                if (c == '(')\n                    diff++;\n                else\n                    diff--;\n                if (diff < 0)\n                    return \"No\";\n            }\n        }\n        return diff == 0 ? \"Yes\" : \"No\";",
        "grade-30": {
            "execution": 0
        },
        "6": "int sum = lst.stream().mapToInt(s -> s.equals(\"(\") ? 1 : -1).sum();\n        if (sum != 0) return \"No\";\n        int balance = 0;\n        for (String paren : lst) {\n            if (paren.equals(\"(\")) {\n                balance++;\n            } else {\n                balance--;\n            }\n            if (balance < 0) return \"No\";\n        }\n        return \"Yes\";",
        "grade-6": {
            "execution": 0
        },
        "74": "for (String s : lst) {\n            if (s.charAt(0) == ')') {\n                return \"No\";\n            }\n        }\n        int count = 0;\n        for (String s : lst) {\n            for (int i = 0; i < s.length(); i++) {\n                if (s.charAt(i) == '(') {\n                    count++;\n                } else {\n                    count--;\n                }\n                if (count < 0) {\n                    return \"No\";\n                }\n            }\n        }\n        return count == 0 ? \"Yes\" : \"No\";",
        "grade-74": {
            "execution": 0
        },
        "65": "String str1 = lst.get(0);\n        String str2 = lst.get(1);\n        int x = str1.length();\n        int y = str2.length();\n        int dp[][] = new int[x + 1][y + 1];\n        for (int i = 0; i <= x; i++) {\n            for (int j = 0; j <= y; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 0;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        if (dp[x][y] == 0) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }",
        "grade-65": {
            "execution": 0
        },
        "60": "Stack<Character> open_stack = new Stack<Character>();\n        for (String s : lst) {\n            for (int i = 0; i < s.length(); i++) {\n                char c = s.charAt(i);\n                if (c == '(') {\n                    open_stack.push(c);\n                } else {\n                    if (open_stack.isEmpty()) {\n                        return \"No\";\n                    } else {\n                        open_stack.pop();\n                    }\n                }\n            }\n        }\n        return \"Yes\";",
        "grade-60": {
            "execution": 0
        },
        "37": "// v1\n        // return matchParens_v1(lst);\n        // v2\n        return matchParens_v2(lst);",
        "grade-37": {
            "execution": 0
        },
        "28": "int len1 = lst.get(0).length();\n        int len2 = lst.get(1).length();\n        int sum1 = 0;\n        int sum2 = 0;\n        for (int i = 0; i < len1; i++) {\n            if (lst.get(0).charAt(i) == '(') {\n                sum1++;\n            } else {\n                sum1--;\n            }\n        }\n        for (int i = 0; i < len2; i++) {\n            if (lst.get(1).charAt(i) == '(') {\n                sum2++;\n            } else {\n                sum2--;\n            }\n        }\n        if (sum1 == 0) {\n            if (sum2 > 0) {\n                return \"Yes\";\n            } else {\n                return \"No\";\n            }\n        } else if (sum1 > 0) {\n            if (sum2 >= 0) {\n                return \"Yes\";\n            } else {\n                return \"No\";\n            }\n        } else {\n            if (sum2 <= 0) {\n                return \"Yes\";\n            } else {\n                return \"No\";\n            }\n        }",
        "grade-28": {
            "execution": 0
        },
        "191": "StringBuilder res = new StringBuilder();\n        String s1 = lst.get(0);\n        String s2 = lst.get(1);\n        boolean reversed = false;\n        int parens = 0;\n        for (int i = 0; i < s1.length(); i++) {\n            if (s1.charAt(i) == '(') {\n                parens++;\n            } else {\n                parens--;\n            }\n            if (parens < 0) {\n                reversed = true;\n                break;\n            }\n        }\n        if (reversed) {\n            String t = s1;\n            s1 = s2;\n            s2 = t;\n        }\n        parens = 0;\n        for (int i = 0; i < s1.length(); i++) {\n            res.append(s1.charAt(i));\n            if (s1.charAt(i) == '(') {\n                parens++;\n            } else {\n                parens--;\n            }\n        }\n        for (int i = 0; i < s2.length(); i++) {\n            res.append(s2.charAt(i));\n            if (s2.charAt(i) == '(') {\n                parens++;\n            } else {\n                parens--;\n            }\n            if (parens < 0) {\n                return \"No\";\n            }\n        }\n        return parens == 0 ? \"Yes\" : \"No\";",
        "grade-191": {
            "execution": 1
        },
        "152": "if (lst.get(0).length() > lst.get(1).length()) {\n            if (lst.get(0).charAt(0) == '(') {\n                return matchParens(new ArrayList<String>(Arrays.asList(lst.get(0).substring(1), lst.get(1) + \"(\")));\n            } else {\n                return matchParens(new ArrayList<String>(Arrays.asList(lst.get(0).substring(1), lst.get(1) + \")\")));\n            }\n        } else {\n            int score = 0;\n            for (int i = 0; i < lst.get(0).length(); i++) {\n                score += lst.get(0).charAt(i) == '(' ? 1 : -1;\n            }\n            for (int i = 0; i < lst.get(1).length(); i++) {\n                score += lst.get(1).charAt(i) == '(' ? 1 : -1;\n            }\n            return score == 0 ? \"Yes\" : \"No\";\n        }",
        "grade-152": {
            "execution": 0
        },
        "23": "String res = \"No\";\n        String s = String.join(\"\", lst);\n        boolean balanced = s.equals(\"\") || s.equals(\"()\");\n        while (!balanced && !s.equals(\"\")) {\n            int firstClose = s.indexOf(\")\");\n            int lastOpen = s.lastIndexOf(\"(\");\n            if (firstClose < lastOpen) {\n                s = s.substring(0, firstClose) + s.substring(firstClose + 1);\n            } else {\n                s = s.substring(0, lastOpen) + s.substring(lastOpen + 1);\n            }\n            balanced = s.equals(\"\") || s.equals(\"()\");\n        }\n        if (balanced) {\n            res = \"Yes\";\n        }\n        return res;",
        "grade-23": {
            "execution": 0
        },
        "165": "int count = 0;\n        for (String s : lst) {\n            for (char c : s.toCharArray()) {\n                if (c == '(') {\n                    count++;\n                } else {\n                    count--;\n                }\n                if (count < 0) {\n                    return \"No\";\n                }\n            }\n        }\n        return count == 0 ? \"Yes\" : \"No\";",
        "grade-165": {
            "execution": 0
        },
        "119": "throw new UnsupportedOperationException(\"Not Implemented\");",
        "grade-119": {
            "execution": 0
        },
        "8": "int diff = 0;\n        for (String s : lst) {\n            for (int i = 0; i < s.length(); i++) {\n                if (s.charAt(i) == '(') {\n                    diff++;\n                } else {\n                    diff--;\n                }\n                if (diff < 0) {\n                    return \"No\";\n                }\n            }\n        }\n        return diff == 0 ? \"Yes\" : \"No\";",
        "grade-8": {
            "execution": 0
        },
        "7": "List<String> arg1 = getArgs(lst.get(0));\n        List<String> arg2 = getArgs(lst.get(1));\n        Stack<String> pairs = new Stack<>();\n        boolean canGenerateGood = false;\n        for (String str : arg1) {\n            if (pairs.isEmpty()) {\n                pairs.push(str);\n            } else {\n                String curr = pairs.peek();\n                String c = curr.substring(0, 1);\n                String s = str.substring(0, 1);\n                if (c.equals(\"(\") && s.equals(\")\")) {\n                    pairs.pop();\n                } else {\n                    pairs.push(str);\n                }\n            }\n        }\n        for (String str : arg2) {\n            if (pairs.isEmpty()) {\n                pairs.push(str);\n            } else {\n                String curr = pairs.peek();\n                String c = curr.substring(0, 1);\n                String s = str.substring(0, 1);\n                if (c.equals(\"(\") && s.equals(\")\")) {\n                    pairs.pop();\n                } else {\n                    pairs.push(str);\n                }\n            }\n        }\n        if (pairs.isEmpty()) {\n            canGenerateGood = true;\n        }\n        return canGenerateGood ? \"Yes\" : \"No\";",
        "grade-7": {
            "execution": 0
        },
        "24": "return isGood(lst.get(0) + lst.get(1)) ? \"Yes\" : \"No\";",
        "grade-24": {
            "execution": 0
        },
        "57": "final Stack<String> stk = new Stack<>();\n        for (String s : lst) {\n            for (int i = 0; i < s.length(); i++) {\n                String c = String.valueOf(s.charAt(i));\n                if (c.equals(\"(\")) {\n                    stk.push(c);\n                } else {\n                    if (stk.empty()) return \"No\";\n                    stk.pop();\n                }\n            }\n        }\n        return stk.empty() ? \"Yes\" : \"No\";",
        "grade-57": {
            "execution": 0
        },
        "62": "if (canBeBalanced(lst.get(0)) && canBeBalanced(lst.get(1))) {\n            return \"Yes\";\n        }\n        return \"No\";",
        "grade-62": {
            "execution": 0
        },
        "140": "int l = 0;\n        int r = 0;\n        String s1 = lst.get(0);\n        String s2 = lst.get(1);\n        for (int i = 0; i < s1.length(); i++) {\n            char c = s1.charAt(i);\n            if (c == '(') {\n                l++;\n            } else {\n                r++;\n            }\n        }\n        for (int i = 0; i < s2.length(); i++) {\n            char c = s2.charAt(i);\n            if (c == '(') {\n                l++;\n            } else {\n                r++;\n            }\n        }\n        if (l == r) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }",
        "grade-140": {
            "execution": 0
        },
        "169": "int[] cnt = {0, 0};\n        for (String s : lst) {\n            for (char c : s.toCharArray()) {\n                if (c == '(') {\n                    cnt[0]++;\n                } else {\n                    cnt[1]++;\n                }\n            }\n        }\n        int diff = cnt[0] - cnt[1];\n        if (diff < 0) {\n            return \"No\";\n        }\n        return \"Yes\";",
        "grade-169": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it returns True if there are two distinct elements in the list that\n    // sum to zero, and False otherwise.\n    // >>> pairs_sum_to_zero([1, 3, 5, 0])\n    // False\n    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n    // False\n    // >>> pairs_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    // True\n    // >>> pairs_sum_to_zero([1])\n    // False\n    public static boolean pairsSumToZero(ArrayList<Integer> l) {\n",
        "snippet": [
            "        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                if (l.get(i) + l.get(j) == 0) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}"
        ],
        "simplified": "pairs_sum_to_zero takes a list of integers as an input. it returns True if there are two distinct elements in the list that sum to zero, and False otherwise.",
        "task_id": "43",
        "32": "// Fill in your code below here ...\n        return true;",
        "grade-32": {
            "execution": 0
        },
        "6": "// e.g. l = [1, 2, 3, 7], c = new ArrayList<Integer>()\n        // for (i in [0, 1, 2, 3])\n        //   a = l[i]\n        //   for (j in [0, 1, 2, 3])\n        //     b = l[j]\n        //     if (a+b == 0)\n        //       return True\n        // return False\n        // e.g. l = [2, 4, -5, 3, 5, 7], c = new ArrayList<Integer>()\n        // for (i in [0, 1, 2, 3, 4, 5])\n        //   a = l[i]\n        //   for (j in [0, 1, 2, 3, 4, 5])\n        //     b = l[j]\n        //     if (a+b == 0)\n        //       return True\n        // return False\n        // e.g. l = [1], c = new ArrayList<Integer>()\n        // for (i in [0])\n        //   a = l[i]\n        //   for (j in [0])\n        //     b = l[j]\n        //     if (a+b == 0)\n        //       return True\n        // return False\n        ArrayList<Integer> c = new ArrayList<Integer>();\n        int a = 0;\n        int b = 0;\n        boolean found = false;\n        for (int i = 0; i < l.size(); i++) {\n            a = l.get(i);\n            for (int j = 0; j < l.size(); j++) {\n                b = l.get(j);\n                if (a + b == 0) {\n                    found = true;\n                }\n            }\n        }\n        return found;",
        "grade-6": {
            "execution": 0
        },
        "85": "HashSet<Integer> s = new HashSet<Integer>();\n        for (int x : l) {\n            if (s.contains(-x)) {\n                return true;\n            }\n            s.add(x);\n        }\n        return false;",
        "grade-85": {
            "execution": 1
        },
        "71": "// fill in this function\n        return false;",
        "grade-71": {
            "execution": 0
        },
        "65": "throw new java.lang.UnsupportedOperationException(\"pairsSumToZero not implemented yet.\");",
        "grade-65": {
            "execution": 0
        },
        "41": "// your code here\n        if (l.size() == 0) return false;\n        HashSet<Integer> set = new HashSet<Integer>();\n        for (int x : l) {\n            if (set.contains(-x)) return true;\n            set.add(x);\n        }\n        return false;",
        "grade-41": {
            "execution": 1
        },
        "30": "for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                if (l.get(i) + l.get(j) == 0)\n                    return true;\n            }\n        }\n        return false;",
        "grade-30": {
            "execution": 1
        },
        "189": "if (l.size() < 2) {\n            return false;\n        }\n        HashSet<Integer> s = new HashSet<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (s.contains(-l.get(i))) {\n                return true;\n            }\n            s.add(l.get(i));\n        }\n        return false;",
        "grade-189": {
            "execution": 1
        },
        "25": "return true;",
        "grade-25": {
            "execution": 0
        },
        "138": "//throw new UnsupportedOperationException(\"Delete this line and implement your code here!\");\n        int[] a = new int[l.size()];\n        HashMap<Integer, Integer> hash = new HashMap<Integer, Integer>();\n        for(int i = 0; i < l.size(); i++) {\n            a[i] = l.get(i);\n            if(hash.containsKey(a[i])) {\n                hash.put(a[i], hash.get(a[i]) + 1);\n            }\n            else {\n                hash.put(a[i], 1);\n            }\n        }\n        for(int i = 0; i < l.size(); i++) {\n            if(hash.containsKey(-a[i])) {\n                if(hash.get(-a[i]) > 1) {\n                    return true;\n                }\n                else if(a[i] == 0) {\n                    return true;\n                }\n            }\n        }\n        return false;",
        "grade-138": {
            "execution": 0
        },
        "9": "boolean[] seen = new boolean[1000000];\n        for (int i = 0; i < l.size(); i++) {\n            int val = l.get(i);\n            if (seen[val+500000]) {\n                return true;\n            }\n            seen[val+500000] = true;\n        }\n        return false;",
        "grade-9": {
            "execution": 0
        },
        "7": "return false;",
        "grade-7": {
            "execution": 0
        },
        "26": "// your code here\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                if (l.get(i) + l.get(j) == 0)\n                    return true;\n            }\n        }\n        return false;",
        "grade-26": {
            "execution": 1
        },
        "62": "ArrayList<Integer> unique_l = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (!unique_l.contains(l.get(i))) {\n                unique_l.add(l.get(i));\n            }\n        }\n        for (int i = 0; i < unique_l.size(); i++) {\n            if (unique_l.contains(-unique_l.get(i))) {\n                return true;\n            }\n        }\n        return false;",
        "grade-62": {
            "execution": 0
        },
        "68": "HashSet<Integer> set = new HashSet<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            int num = l.get(i);\n            if (set.contains(-num)) {\n                return true;\n            }\n            set.add(num);\n        }\n        return false;",
        "grade-68": {
            "execution": 1
        },
        "177": "// Your code here.",
        "grade-177": {
            "execution": 0
        },
        "193": "if (l.size() < 2) {\n            return false;\n        }\n        HashSet<Integer> seen = new HashSet<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (seen.contains(-l.get(i))) {\n                return true;\n            }\n            seen.add(l.get(i));\n        }\n        return false;",
        "grade-193": {
            "execution": 1
        },
        "57": "l.sort(Comparator.naturalOrder());\n        int first = 0;\n        int last = l.size() - 1;\n        while (first < last) {\n            int sum = l.get(first) + l.get(last);\n            if (sum == 0) {\n                return true;\n            } else if (sum < 0) {\n                first += 1;\n            } else {\n                last -= 1;\n            }\n        }\n        return false;",
        "grade-57": {
            "execution": 1
        },
        "137": "if (l.size() == 0) {\n            return false;\n        }\n        for (int i = 0; i < l.size(); i += 1) {\n            for (int j = i + 1; j < l.size(); j += 1) {\n                if (l.get(i) + l.get(j) == 0) {\n                    return true;\n                }\n            }\n        }\n        return false;",
        "grade-137": {
            "execution": 1
        },
        "64": "// IMPLEMENT ME\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                if (l.get(i) + l.get(j) == 0) {\n                    return true;\n                }\n            }\n        }\n        return false;",
        "grade-64": {
            "execution": 1
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // In this task, you will be given a string that represents a number of apples and oranges \n    // that are distributed in a basket of fruit this basket contains \n    // apples, oranges, and mango fruits. Given the string that represents the total number of \n    // the oranges and apples and an integer that represent the total number of the fruits \n    // in the basket return the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    public static int fruitDistribution(String s, int n) {\n",
        "snippet": [
            "        List<Integer> lis = new ArrayList<>();\n        for (String i : s.split(\" \")) {\n            try {\n                lis.add(Integer.parseInt(i));\n            } catch (NumberFormatException ignored) {\n\n            }\n        }\n        return n - lis.stream().mapToInt(Integer::intValue).sum();\n    }\n}"
        ],
        "simplified": "In this task, you will be given a string that represents a number of apples and oranges that are distributed in a basket of fruit this basket contains apples, oranges, and mango fruits. Given the string that represents the total number of the oranges and apples and an integer that represent the total number of the fruits in the basket return the number of the mango fruits in the basket.",
        "task_id": "67",
        "186": "String[] arr = s.split(\" \");\n        int apples = Integer.parseInt(arr[0]);\n        int oranges = Integer.parseInt(arr[4]);\n        return n - apples - oranges;",
        "grade-186": {
            "execution": 0
        },
        "30": "int count1 = 0;\n        int count2 = 0;\n        int count3 = 0;\n        String[] words = s.split(\" \");\n        if (words[0].contains(\"apples\")) {\n            count1 = Integer.parseInt(words[0].replaceAll(\"[^0-9]\", \"\"));\n        }\n        if (words[2].contains(\"apples\")) {\n            count1 = Integer.parseInt(words[2].replaceAll(\"[^0-9]\", \"\"));\n        }\n        if (words[0].contains(\"oranges\")) {\n            count2 = Integer.parseInt(words[0].replaceAll(\"[^0-9]\", \"\"));\n        }\n        if (words[2].contains(\"oranges\")) {\n            count2 = Integer.parseInt(words[2].replaceAll(\"[^0-9]\", \"\"));\n        }\n        if (words[0].contains(\"mangoes\")) {\n            count3 = Integer.parseInt(words[0].replaceAll(\"[^0-9]\", \"\"));\n        }\n        if (words[2].contains(\"mangoes\")) {\n            count3 = Integer.parseInt(words[2].replaceAll(\"[^0-9]\", \"\"));\n        }\n        int result = n - count1 - count2 - count3;\n        return result;",
        "grade-30": {
            "execution": 0
        },
        "6": "String[] nums = s.split(\" \");\n        int apples = Integer.parseInt(nums[0]);\n        int oranges = Integer.parseInt(nums[3]);\n        return n - apples - oranges;",
        "grade-6": {
            "execution": 1
        },
        "77": "String[] split = s.split(\" \");\n        int apples = Integer.parseInt(split[0]);\n        int oranges = Integer.parseInt(split[3]);\n        return n - apples - oranges;",
        "grade-77": {
            "execution": 1
        },
        "67": "String[] sa = s.split(\" and \");\n        int sum1 = Integer.parseInt(sa[0].split(\" \")[0]);\n        int sum2 = Integer.parseInt(sa[1].split(\" \")[0]);\n        return n - sum1 - sum2;",
        "grade-67": {
            "execution": 1
        },
        "62": "// Hint: use s.split(\" \")\n        // Hint: you can use the rest operator \"...\"\n        // Hint: use Integer.parseInt() to convert the integer passed as a string\n\n        // write your code here\n        int num_apples = 0;\n        int num_oranges = 0;\n        String [] input_split = s.split(\" \");\n        num_apples = Integer.parseInt(input_split[0]);\n        num_oranges = Integer.parseInt(input_split[2]);\n        return n - num_apples - num_oranges;",
        "grade-62": {
            "execution": 0
        },
        "37": "Scanner sc = new Scanner(s);\n        int apples = sc.nextInt();\n        sc.next();\n        int oranges = sc.nextInt();\n        return n - apples - oranges;",
        "grade-37": {
            "execution": 0
        },
        "28": "//return 0;\n        String[] arr=s.split(\" \");\n        // int apple=Integer.parseInt(arr[0]);\n        // int orange=Integer.parseInt(arr[3]);\n        return n-(Integer.parseInt(arr[0])+Integer.parseInt(arr[3]));",
        "grade-28": {
            "execution": 1
        },
        "198": "// write your code here\n        // remember to return a valid result\n        int apples = 0;\n        int oranges = 0;\n        int mangoes = 0;\n        String[] arr = s.split(\" and \");\n        int applesAndOranges = Integer.parseInt(arr[0].split(\" \")[0]) + Integer.parseInt(arr[1].split(\" \")[0]);\n        return n - applesAndOranges;",
        "grade-198": {
            "execution": 1
        },
        "158": "String[] x = s.split(\" \");\n        int a = Integer.parseInt(x[0]);\n        int o = Integer.parseInt(x[3]);\n        return n - a - o;",
        "grade-158": {
            "execution": 1
        },
        "24": "// YOUR CODE HERE\n        //System.out.println(s);\n        String[] numbers = s.split(\" and \");\n        String[] num1 = numbers[0].split(\" \");\n        String[] num2 = numbers[1].split(\" \");\n        int a = Integer.parseInt(num1[0]);\n        int b = Integer.parseInt(num2[0]);\n        //System.out.println(a);\n        //System.out.println(b);\n        return n - a - b;",
        "grade-24": {
            "execution": 1
        },
        "172": "String[] split = s.split(\"and\");\n        String[] split1 = split[0].split(\" \");\n        String[] split2 = split[1].split(\" \");\n        int x = Integer.parseInt(split1[0]);\n        int y = Integer.parseInt(split2[1]);\n        return n - x - y;",
        "grade-172": {
            "execution": 1
        },
        "122": "throw new UnsupportedOperationException(\"Not implemented yet.\");",
        "grade-122": {
            "execution": 0
        },
        "8": "//write your code here\n        int numOfApples = 0;\n        int numOfOranges = 0;\n        int numOfMangoes = 0;\n        String num = \"\";\n        for(int i = 0; i < s.length(); i++) {\n            if(s.charAt(i) == ' ') {\n                if(s.substring(i - 5, i).equals(\"apple\")) {\n                    numOfApples = Integer.parseInt(num);\n                    num = \"\";\n                } else if(s.substring(i - 7, i).equals(\"orange\")) {\n                    numOfOranges = Integer.parseInt(num);\n                    num = \"\";\n                }\n            } else {\n                num += s.charAt(i);\n            }\n        }\n        numOfMangoes = n - numOfApples - numOfOranges;\n        return numOfMangoes;",
        "grade-8": {
            "execution": 0
        },
        "7": "return 0;",
        "grade-7": {
            "execution": 0
        },
        "25": "String[] splitedStr = s.split(\" \");\n        int sum = Integer.parseInt(splitedStr[0]) + Integer.parseInt(splitedStr[2]);\n        return n - sum;",
        "grade-25": {
            "execution": 0
        },
        "60": "throw new UnsupportedOperationException(\"Remove this line and implement the method\");",
        "grade-60": {
            "execution": 0
        },
        "64": "//write your code here\n        return 0;",
        "grade-64": {
            "execution": 0
        },
        "146": "String [] splitted_string = s.split(\" \");\n        String fruit1 = splitted_string[0];\n        String fruit2 = splitted_string[4];\n        int num_fruit1 = Integer.parseInt(fruit1);\n        int num_fruit2 = Integer.parseInt(fruit2);\n        return n - num_fruit1 - num_fruit2;",
        "grade-146": {
            "execution": 0
        },
        "175": "int orange_num = 0;\n        int apple_num = 0;\n        int mango_num = 0;\n        String[] words = s.split(\" \");\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].equals(\"apples\")) {\n                apple_num = Integer.parseInt(words[i - 1]);\n            }\n            if (words[i].equals(\"oranges\")) {\n                orange_num = Integer.parseInt(words[i - 1]);\n            }\n        }\n        mango_num = n - orange_num - apple_num;\n        return mango_num;",
        "grade-175": {
            "execution": 1
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int n) {\n",
        "snippet": [
            "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n        }\n        sb.append(n);\n        return sb.toString();\n    }\n}"
        ],
        "simplified": "Return a string containing space-delimited numbers starting from 0 upto n inclusive.",
        "task_id": "15",
        "153": "// Write your code here\n        StringBuilder str = new StringBuilder();\n        str.append(0);\n        for(int i = 1; i<=n; i++){\n            str.append(\" \" + i);\n        }\n        return str.toString();",
        "grade-153": {
            "execution": 1
        },
        "18": "return IntStream.rangeClosed(0, n).mapToObj(x -> Integer.toString(x)).collect(Collectors.joining(\" \"));",
        "grade-18": {
            "execution": 1
        },
        "3": "StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n        }\n        return sb.toString().trim();",
        "grade-3": {
            "execution": 1
        },
        "184": "throw new UnsupportedOperationException(\"Waiting to be implemented.\");",
        "grade-184": {
            "execution": 0
        },
        "54": "// Feel free to modify the return statement below\n        return \"\";",
        "grade-54": {
            "execution": 0
        },
        "47": "if (n == 0) return \"0\";\n        int i = 0;\n        String output = \"\";\n        while (i <= n) {\n            output += i + \" \";\n            i++;\n        }\n        return output.trim();",
        "grade-47": {
            "execution": 1
        },
        "43": "String ans = \"\";\n        int i = 0;\n        while (i < n) {\n            ans += i + \" \";\n            i++;\n        }\n        ans += n;\n        return ans;",
        "grade-43": {
            "execution": 1
        },
        "27": "StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            sb.append(i);\n            if (i != n) sb.append(\" \");\n        }\n        return sb.toString();",
        "grade-27": {
            "execution": 1
        },
        "17": "throw new RuntimeException(\"TODO: Implement me!\");",
        "grade-17": {
            "execution": 0
        },
        "164": "// Don't forget to return the result!\n        // Replace the following line with your solution.\n        return \"\";",
        "grade-164": {
            "execution": 0
        },
        "117": "List<String> nums = new ArrayList<>();\n        for (int i = 0; i <= n; i++) {\n            nums.add(Integer.toString(i));\n        }\n        return String.join(\" \", nums);",
        "grade-117": {
            "execution": 1
        },
        "13": "return \"\";",
        "grade-13": {
            "execution": 0
        },
        "136": "throw new RuntimeException(\"Function not implemented\");",
        "grade-136": {
            "execution": 0
        },
        "88": "String res = \"\";\n        for (int i = 0; i <= n; i++) {\n            res += String.valueOf(i) + \" \";\n        }\n        return res.trim();",
        "grade-88": {
            "execution": 1
        },
        "4": "return IntStream.rangeClosed(0, n).mapToObj(String::valueOf).collect(Collectors.joining(\" \"));",
        "grade-4": {
            "execution": 1
        },
        "41": "throw new UnsupportedOperationException(\"Problem.stringSequence\");",
        "grade-41": {
            "execution": 0
        },
        "44": "// YOUR CODE HERE\n        return IntStream.rangeClosed(0, n).mapToObj(Integer::toString).collect(Collectors.joining(\" \"));",
        "grade-44": {
            "execution": 1
        },
        "102": "String result = \"\";\n        if (n == 0) {\n            result = \"0\";\n        } else {\n            for (int i = 0; i <= n; i++) {\n                result += Integer.toString(i) + \" \";\n            }\n        }\n        return result.trim();",
        "grade-102": {
            "execution": 1
        },
        "140": "String[] arr = new String[n + 1];\n        for (int i = 0; i <= n; i++) {\n            arr[i] = Integer.toString(i);\n        }\n        return String.join(\" \", arr);",
        "grade-140": {
            "execution": 1
        },
        "122": "if (n < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative!\");\n        }\n        return IntStream.rangeClosed(0, n).mapToObj(i -> Integer.toString(i)).collect(Collectors.joining(\" \"));",
        "grade-122": {
            "execution": 1
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is less then 100. \n    // Example:\n    // is_multiply_prime(30) == True\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(int a) {\n",
        "snippet": [
            "        class IsPrime {\n            public static boolean is_prime(int n) {\n                for (int j = 2; j < n; j++) {\n                    if (n % j == 0) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        }\n        for (int i = 2; i < 101; i++) {\n            if (!IsPrime.is_prime(i)) {\n                continue;\n            }\n            for (int j = i; j < 101; j++) {\n                if (!IsPrime.is_prime(j)) {\n                    continue;\n                }\n                for (int k = j; k < 101; k++) {\n                    if (!IsPrime.is_prime(k)) {\n                        continue;\n                    }\n                    if (i * j * k == a) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}"
        ],
        "simplified": "Write a function that returns true if the given number is the multiplication of 3 prime numbers and false otherwise. Knowing that (a) is less then 100.",
        "task_id": "75",
        "34": "int count = 0;\n        for (int i = 2; i <= a; i++) {\n            if (a % i == 0) {\n                while (a % i == 0) {\n                    a /= i;\n                }\n                count++;\n            }\n        }\n        return count == 3;",
        "grade-34": {
            "execution": 0
        },
        "6": "// TODO:\n        return false;",
        "grade-6": {
            "execution": 0
        },
        "92": "if (a == 1) return false;\n        if (a == 2) return true;\n        return MathUtils.isProductPrimeNumbers(a);",
        "grade-92": {
            "execution": 0
        },
        "81": "if (a == 1) return false;\n        int i = 2;\n        while (i < a) {\n            if (a % i == 0) {\n                if (isPrime(i)) {\n                    a /= i;\n                    if (isPrime(a)) {\n                        return true;\n                    }\n                }\n            }\n            i++;\n        }\n        return false;",
        "grade-81": {
            "execution": 0
        },
        "76": "if (a == 1) {\n            return false;\n        }\n        int max = (int) Math.sqrt(a);\n        for (int i = 2; i <= max; i++) {\n            if (a % i == 0) {\n                int x = a / i;\n                if (isPrime(i) && isPrime(x)) {\n                    return true;\n                }\n            }\n        }\n        return false;",
        "grade-76": {
            "execution": 0
        },
        "44": "// Write your code here\n        return false;",
        "grade-44": {
            "execution": 0
        },
        "31": "int m = a;\n        for (int i = 2; i <= m; i++) {\n            if (a % i == 0) {\n                m = a / i;\n                for (int j = 2; j <= m; j++) {\n                    if (m % j == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;",
        "grade-31": {
            "execution": 0
        },
        "27": "int counter = 0;\n        for (int i = 2; i <= a; i++) {\n            if (counter > 3) return false;\n            if (a % i == 0) {\n                a /= i;\n                i--;\n                counter++;\n            }\n        }\n        return counter == 3;",
        "grade-27": {
            "execution": 1
        },
        "149": "List<Integer> primes = new ArrayList<>();\n        // get all primes less then 100\n        for (int i = 2; i < 100; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        // primes after 3\n        primes = primes.subList(2, primes.size());\n        // first\n        for (int i = 0; i < primes.size(); i++) {\n            // second\n            for (int j = 0; j < primes.size(); j++) {\n                // third\n                for (int k = 0; k < primes.size(); k++) {\n                    // first * second * third == a\n                    if (primes.get(i) * primes.get(j) * primes.get(k) == a) {\n                        System.out.println(primes.get(i) + \" * \" + primes.get(j) + \" * \" + primes.get(k) + \" == \" + a);\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;",
        "grade-149": {
            "execution": 0
        },
        "9": "// TODO: Implementation\n        return false;",
        "grade-9": {
            "execution": 0
        },
        "8": "//return a == 6;\n        for (int i = 2; i <= a / 2; i++) {\n            if (a % i == 0) {\n                return isPrime(i) && isMultiplyPrime(a / i);\n            }\n        }\n        return isPrime(a);",
        "grade-8": {
            "execution": 0
        },
        "28": "// get all prime numbers (1-100)\n        // try to divide a by prime numbers\n        // if a is divided by three prime numbers then return true\n        // otherwise return false\n        ArrayList<Integer> primes = new ArrayList<Integer>();\n        primes.add(2);\n        primes.add(3);\n        primes.add(5);\n        primes.add(7);\n        primes.add(11);\n        primes.add(13);\n        primes.add(17);\n        primes.add(19);\n        primes.add(23);\n        primes.add(29);\n        primes.add(31);\n        primes.add(37);\n        primes.add(41);\n        primes.add(43);\n        primes.add(47);\n        primes.add(53);\n        primes.add(59);\n        primes.add(61);\n        primes.add(67);\n        primes.add(71);\n        primes.add(73);\n        primes.add(79);\n        primes.add(83);\n        primes.add(89);\n        primes.add(97);\n        int counter = 0;\n        for (int i = 0; i < primes.size(); i++) {\n            if (a % primes.get(i) == 0) {\n                counter++;\n            }\n        }\n        if (counter == 3) {\n            return true;\n        }\n        return false;",
        "grade-28": {
            "execution": 0
        },
        "74": "int div = 2;\n        while (a != 1) {\n            while (a % div == 0) {\n                a /= div;\n            }\n            div++;\n        }\n        return div == 4;",
        "grade-74": {
            "execution": 0
        },
        "78": "// Your code here",
        "grade-78": {
            "execution": 0
        },
        "185": "int[] prime = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        int prime_index = 0;\n        while (a != 1) {\n            if (a % prime[prime_index] == 0) {\n                a /= prime[prime_index];\n            } else {\n                prime_index++;\n            }\n        }\n        return prime_index == 2;",
        "grade-185": {
            "execution": 0
        },
        "67": "if (a == 1) return false;\n        // change code here\n        return false;",
        "grade-67": {
            "execution": 0
        },
        "148": "return IntStream.range(1, 100).filter(n -> a % n == 0).filter(n -> isPrime(n)).distinct().toArray().length == 3;",
        "grade-148": {
            "execution": 0
        },
        "75": "// Please write your code here",
        "grade-75": {
            "execution": 0
        },
        "159": "if (a == 1) return false;\n        if (a == 2) return true;\n        if (a == 3) return true;\n        if (a == 4) return false;\n        if (a == 5) return true;\n        if (a == 6) return true;\n        if (a == 7) return true;\n        if (a == 8) return false;\n        if (a == 9) return false;\n        if (a == 10) return true;\n        if (a == 11) return true;\n        if (a == 12) return true;\n        if (a == 13) return true;\n        if (a == 14) return false;\n        if (a == 15) return true;\n        if (a == 16) return false;\n        if (a == 17) return true;\n        if (a == 18) return true;\n        if (a == 19) return true;\n        if (a == 20) return true;\n        if (a == 21) return false;\n        if (a == 22) return false;\n        if (a == 23) return true;\n        if (a == 24) return true;\n        if (a == 25) return true;\n        if (a == 26) return false;\n        if (a == 27) return false;\n        if (a == 28) return false;\n        if (a == 29) return true;\n        if (a == 30) return true;\n        if (a == 31) return true;\n        if (a == 32) return false;\n        if (a == 33) return false;\n        if (a == 34) return false;\n        if (a == 35) return true;\n        if (a == 36) return true;\n        if (a == 37) return true;\n        if (a == 38) return false;\n        if (a == 39) return false;\n        if (a == 40) return true;\n        if (a == 41) return true;\n        if (a == 42) return true;\n        if (a == 43) return true;\n        if (a == 44) return false;\n        if (a == 45) return true;\n        if (a == 46) return false;\n        if (a ==",
        "grade-159": {
            "execution": 0
        },
        "93": "// Write your code here.\n        return true;",
        "grade-93": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive floating point number, it can be decomposed into\n    // and integer part (largest integer smaller than given number) and decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public static float truncateNumber(float number) {\n",
        "snippet": [
            "        return number % 1.0;\n    }\n}"
        ],
        "simplified": "Given a positive floating point number, it can be decomposed into and integer part (largest integer smaller than given number) and decimals (leftover part always smaller than 1). Return the decimal part of the number.",
        "task_id": "2",
        "138": "int integerPart = (int) number;\n        float decimalPart = number - integerPart;\n        return decimalPart;",
        "grade-138": {
            "execution": 1
        },
        "14": "// Insert your code here\n        return number - (int)number;",
        "grade-14": {
            "execution": 1
        },
        "3": "// >>> truncate_number(4.4)\n        // 0.4\n        // >>> truncate_number(4.5)\n        // 0.5\n        // >>> truncate_number(4.6)\n        // 0.6\n        // >>> truncate_number(4.9999)\n        // 0.9999\n        // >>> truncate_number(5.0)\n        // 0.0\n        return 0;",
        "grade-3": {
            "execution": 0
        },
        "171": "int whole = (int) number;\n        float decimals = number - whole;\n        return decimals;",
        "grade-171": {
            "execution": 1
        },
        "50": "return (number - (int)number);",
        "grade-50": {
            "execution": 1
        },
        "39": "BigDecimal bd = new BigDecimal(Float.toString(number));\n        bd = bd.setScale(2, BigDecimal.ROUND_FLOOR);\n        return Float.parseFloat(bd.toString());",
        "grade-39": {
            "execution": 0
        },
        "34": "// Your code goes here!\n        return number - (int)number;",
        "grade-34": {
            "execution": 1
        },
        "17": "// if (number < 0) {\n        //     return truncateNumber(-number);\n        // }\n        // String[] nums = String.valueOf(number).split(\"\\\\.\");\n        // String decimals = nums[1];\n        // return Float.parseFloat(\"0.\" + decimals);\n        return number - Math.floor(number);",
        "grade-17": {
            "execution": 0
        },
        "13": "// BEGIN SOLUTION\n        // 1. Use Math.floor to truncate the number\n        float truncatedNumber = (float) Math.floor(number);\n        // 2. Calculate decimal part\n        float decimalPart = number - truncatedNumber;\n        // 3. Return it\n        return decimalPart;\n        // END SOLUTION",
        "grade-13": {
            "execution": 1
        },
        "152": "// Start by subtracting a factor of 1.0 to get the remainder,\n        // and then reverse the operation to get the desired result.\n        // Note that any number divided by 1.0 is the same number.\n        // >>> 3.5 - 3.0\n        // 0.5\n        // >>> (3.5 - 3.0) + 3.0\n        // 3.5\n        return (number - (int) number) + (int) number;",
        "grade-152": {
            "execution": 0
        },
        "117": "return (number - (int)number);",
        "grade-117": {
            "execution": 1
        },
        "11": "// ... your code here\n        int integral = (int)number;\n        return number - integral;",
        "grade-11": {
            "execution": 1
        },
        "127": "// >>> 3.5\n        // 3.5\n        // >>> int(3.5)\n        // 3\n        // >>> 3.5 - int(3.5)\n        // 0.5\n        return number - (int) number;",
        "grade-127": {
            "execution": 1
        },
        "90": "// >>> truncate_number(3.5)\n        // 0.5\n        return number - (int) number;",
        "grade-90": {
            "execution": 1
        },
        "4": "return number % 1;",
        "grade-4": {
            "execution": 1
        },
        "33": "return number;",
        "grade-33": {
            "execution": 0
        },
        "35": "// Your code here...\n        return 0;",
        "grade-35": {
            "execution": 0
        },
        "107": "int integer = (int) number;\n        float decimals = number - integer;\n        return decimals;",
        "grade-107": {
            "execution": 1
        },
        "133": "// TODO\n        return 0;",
        "grade-133": {
            "execution": 0
        },
        "119": "double integer_part = Math.floor(number);\n        double decimal_part = number - integer_part;\n        return (float)decimal_part;",
        "grade-119": {
            "execution": 1
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given a word. Your task is to find the closest vowel that stands between \n    // two consonants from the right side of the word (case sensitive).\n    // Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    // find any vowel met the above condition. \n    // You may assume that the given string contains English letter only.\n    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n",
        "snippet": [
            "        if (word.length() < 3) {\n            return \"\";\n        }\n\n        String vowels = \"aeiouAEIOU\";\n        for (int i = word.length() - 2; i > 0; i--) {\n            if (vowels.indexOf(word.charAt(i)) != -1 && vowels.indexOf(word.charAt(i + 1)) == -1 && vowels.indexOf(word.charAt(i - 1)) == -1) {\n                return String.valueOf(word.charAt(i));\n            }\n        }\n        return \"\";\n    }\n}"
        ],
        "simplified": "You are given a word. Your task is to find the closest vowel that stands between two consonants from the right side of the word (case sensitive). Vowels in the beginning and ending doesn't count. Return empty string if you didn't find any vowel met the above condition. You may assume that the given string contains English letter only.",
        "task_id": "118",
        "173": "char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        char[] strChars = word.toCharArray();\n        int len = strChars.length;\n        for (int i = len - 1; i >= 0; i--) {\n            if (Arrays.binarySearch(vowels, strChars[i]) >= 0) {\n                if (i < len - 1 && Arrays.binarySearch(vowels, strChars[i + 1]) < 0) {\n                    return Character.toString(strChars[i]);\n                }\n            }\n        }\n        return \"\";",
        "grade-173": {
            "execution": 0
        },
        "29": "String vowel = \"AEIOUaeiou\";\n        String res = \"\";\n        int ix = word.length() - 1;\n        while (ix >= 0) {\n            if (vowel.indexOf(word.charAt(ix)) >= 0)\n                res = Character.toString(word.charAt(ix));\n            else if (res.length() > 0)\n                return res;\n            ix--;\n        }\n        return res;",
        "grade-29": {
            "execution": 0
        },
        "6": "// code here\n        return \"\";",
        "grade-6": {
            "execution": 0
        },
        "72": "// TODO: write your code here\n        return \"\";",
        "grade-72": {
            "execution": 0
        },
        "63": "String vowels = \"aeiouAEIOU\";\n        String cons = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n        String candidates = \"\";\n        int right_cons = 0;\n        // int left_cons = 0;\n        for (int i = word.length() - 1; i >= 0; i--) {\n            char c = word.charAt(i);\n            if (cons.indexOf(c) > -1) right_cons++;\n            else if (vowels.indexOf(c) > -1) {\n                if (right_cons == 1) candidates += c;\n                else right_cons = 0;\n            }\n        }\n        if (candidates.length() == 0) return \"\";\n        return \"\" + candidates.charAt(candidates.length() - 1);",
        "grade-63": {
            "execution": 0
        },
        "58": "final String VOWELS = \"aeiouAEIOU\";\n        final String CONSONANTS = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n        var res = \"\";\n        for (int i = word.length() - 1; i >= 0; i--) {\n            char cur = word.charAt(i);\n            if (VOWELS.indexOf(cur) != -1) {\n                if (i + 1 < word.length() && CONSONANTS.indexOf(word.charAt(i + 1)) != -1)\n                    res = String.valueOf(cur);\n                else if (i - 1 >= 0 && CONSONANTS.indexOf(word.charAt(i - 1)) != -1)\n                    res = String.valueOf(cur);\n            }\n        }\n        return res;",
        "grade-58": {
            "execution": 0
        },
        "36": "String vowels = \"aeiou\";\n        StringBuilder result = new StringBuilder();\n        for (int i = word.length() - 1; i >= 0; i--) {\n            if (vowels.contains(String.valueOf(word.charAt(i)))) {\n                if (i + 1 < word.length() && !vowels.contains(String.valueOf(word.charAt(i + 1)))) {\n                    result.append(word.charAt(i));\n                    break;\n                }\n            }\n        }\n        return result.toString();",
        "grade-36": {
            "execution": 0
        },
        "27": "String empty = \"\";\n        String[] vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        String[] consonants = {\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"};\n        HashSet<String> vowelSet = new HashSet<String>(Arrays.asList(vowels));\n        HashSet<String> consonantSet = new HashSet<String>(Arrays.asList(consonants));\n        int min = word.length();\n        String result = empty;\n        int wordLength = word.length();\n        if (wordLength <= 2) return empty;\n        int index = wordLength - 1;\n        while (index >= 0) {\n            String letter = word.substring(index, index + 1);\n            int distance = wordLength - index;\n            if (vowelSet.contains(letter)) {\n                if (distance < min) {\n                    min = distance;\n                    result = letter;\n                }\n            }\n            index--;\n        }\n        return result;",
        "grade-27": {
            "execution": 0
        },
        "185": "final int idx = word.length() - 1;\n        for (int i = 0; i < idx; i++) {\n            final char c0 = word.charAt(i);\n            final char c1 = word.charAt(i + 1);\n            if (isVowel(c0) && isVowel(c1)) {\n                return c0 == 'u' || c0 == 'U' ? \"\" + c0 : \"\" + c1;\n            }\n        }\n        return \"\";",
        "grade-185": {
            "execution": 0
        },
        "147": "// TODO: write your code here\n        String result = \"\";\n        for (int i = word.length() - 1; i >= 0; i--) {\n            char letter = word.charAt(i);\n            if (letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u') {\n                if (i == word.length() - 1) {\n                    continue;\n                }\n                char previous = word.charAt(i - 1);\n                if (previous == 'a' || previous == 'e' || previous == 'i' || previous == 'o' || previous == 'u') {\n                    continue;\n                }\n                result = Character.toString(letter);\n                break;\n            }\n        }\n        return result;",
        "grade-147": {
            "execution": 0
        },
        "23": "char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        String word_lower = word.toLowerCase();\n        StringBuilder ret = new StringBuilder();\n        for (int i = word_lower.length() - 1; i >= 0; i--) {\n            char c = word_lower.charAt(i);\n            if (Arrays.asList(vowels).contains(c)) {\n                ret.append(c);\n                break;\n            }\n        }\n        return ret.reverse().toString();",
        "grade-23": {
            "execution": 0
        },
        "161": "int L = word.length();\n      int[] d = new int[L];\n      int n = 0;\n      for (int i = 0; i < L; i++) {\n        char c = word.charAt(i);\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n          d[n++] = i;\n        }\n      }\n      if (n == 0) {\n        return \"\";\n      }\n      for (int i = L - 1; i >= 0; i--) {\n        char c = word.charAt(i);\n        if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n          int x = Math.abs(d[n - 1] - i);\n          for (int j = n - 2; j >= 0; j--) {\n            int y = Math.abs(d[j] - i);\n            if (y > x) {\n              break;\n            }\n            x = y;\n          }\n          return Character.toString(word.charAt(d[n - 1 - x]));\n        }\n      }\n      return \"\";",
        "grade-161": {
            "execution": 0
        },
        "113": "word = word.toLowerCase();\n        int vowelPos = -1;\n        int minDist = Integer.MAX_VALUE;\n        for (int i = word.length() - 1; i >= 0; i--) {\n            if (\"aeiou\".indexOf(word.charAt(i)) >= 0) {\n                if (i < word.length() - 1 && \"aeiou\".indexOf(word.charAt(i + 1)) >= 0) {\n                    continue;\n                }\n                if (i > 0 && \"aeiou\".indexOf(word.charAt(i - 1)) >= 0) {\n                    continue;\n                }\n                int dist = word.length() - i;\n                if (dist < minDist) {\n                    minDist = dist;\n                    vowelPos = i;\n                }\n            }\n        }\n        if (vowelPos == -1) {\n            return \"\";\n        }\n        return String.valueOf(word.charAt(vowelPos));",
        "grade-113": {
            "execution": 0
        },
        "8": "// Solution 1: Return an empty string if the word is empty.\n        if (word.length() == 0) {\n            return \"\";\n        }\n        // Solution 2: Convert the word to upper case.\n        word = word.toUpperCase();\n        // Solution 3: Return an empty string if the word is length is 1.\n        if (word.length() == 1) {\n            return \"\";\n        }\n        // Solution 4: Create an array with the vowels.\n        char[] vowels = {'A', 'E', 'I', 'O', 'U'};\n        // Solution 5: Create a variable to hold the closest vowel and initialize it with\n        // an empty string.\n        String closestVowel = \"\";\n        // Solution 6: Create a variable to hold the closest distance.\n        int closestDistance = Integer.MAX_VALUE;\n        // Solution 7: Loop over the word backwards.\n        for (int i = word.length() - 1; i >= 0; i--) {\n            // Solution 8: If the character is a vowel.\n            if (vowels.equals(word.charAt(i))) {\n                // Solution 9: Get the distance.\n                int distance = word.length() - i;\n                // Solution 10: If the distance is less than the closest distance.\n                if (distance < closestDistance) {\n                    // Solution 11: Set the closest distance.\n                    closestDistance = distance;\n                    // Solution 12: Set the closest vowel.\n                    closestVowel = String.valueOf(word.charAt(i));\n                }\n            }\n        }\n        // Solution 13: Return the closest vowel.\n        return closestVowel;",
        "grade-8": {
            "execution": 0
        },
        "7": "return \"\";",
        "grade-7": {
            "execution": 0
        },
        "24": "String s = word.toLowerCase();\n        int currentDistance = Integer.MAX_VALUE;\n        String closestVowel = \"\";\n        int size = s.length();\n        for (int i = size - 1; i >= 0; i--) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                for (int j = size - 1; j >= 0; j--) {\n                    if (j == i) {\n                        break;\n                    }\n                    if (s.charAt(j) != 'a' && s.charAt(j) != 'e' && s.charAt(j) != 'i' && s.charAt(j) != 'o' && s.charAt(j) != 'u') {\n                        int distance = i - j;\n                        if (distance < currentDistance) {\n                            currentDistance = distance;\n                            closestVowel = String.valueOf(s.charAt(i));\n                        }\n                        break;\n                    }\n                }\n            }\n        }\n        return closestVowel;",
        "grade-24": {
            "execution": 0
        },
        "56": "// Your code here\n        return \"\";",
        "grade-56": {
            "execution": 0
        },
        "60": "if (word.length() < 3) {\n            return \"\";\n        }\n        word = word.substring(1, word.length() - 1);\n        for (int i = 0; i < word.length(); i++) {\n            if (isVowel(word.charAt(i))) {\n                if (isConsonant(word.charAt(i - 1)) && isConsonant(word.charAt(i + 1))) {\n                    return Character.toString(word.charAt(i));\n                }\n            }\n        }\n        return \"\";",
        "grade-60": {
            "execution": 0
        },
        "137": "String vowels = \"aeiouAEIOU\";\n        String consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n        int wordLength = word.length();\n        if (wordLength < 3) {\n            return \"\";\n        }\n        for (int i = wordLength - 1; i > 0; i--) {\n            if (consonants.contains(String.valueOf(word.charAt(i)))\n            && consonants.contains(String.valueOf(word.charAt(i - 1)))\n            && vowels.contains(String.valueOf(word.charAt(i - 2)))) {\n                return String.valueOf(word.charAt(i - 2));\n            }\n        }\n        return \"\";",
        "grade-137": {
            "execution": 0
        },
        "164": "if (word.length() <= 2) {\n            return \"\";\n        }\n        char vowel = 'a';\n        for (int i = word.length() - 1; i >= 0; i--) {\n            char c = word.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                vowel = c;\n                break;\n            }\n        }\n        for (int i = word.length() - 1; i >= 0; i--) {\n            char c = word.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                if (i + 1 < word.length() && i - 1 >= 0) {\n                    if (word.charAt(i + 1) != 'a' && word.charAt(i + 1) != 'e' && word.charAt(i + 1) != 'i'\n                            && word.charAt(i + 1) != 'o' && word.charAt(i + 1) != 'u'\n                            && word.charAt(i - 1) != 'a' && word.charAt(i - 1) != 'e' && word.charAt(i - 1) != 'i'\n                            && word.charAt(i - 1) != 'o' && word.charAt(i - 1) != 'u') {\n                        vowel = c;\n                        break;\n                    }\n                }\n            }\n        }\n        if (vowel == 'a') {\n            return \"\";\n        }\n        return Character.toString(vowel);",
        "grade-164": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a number in decimal form and your task is to convert it to\n    // binary format. The function should return a string, with each character representing a binary\n    // number. Each character in the string will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    // The extra characters are there to help with the format.\n    // Examples:\n    // decimal_to_binary(15)   # returns \"db1111db\"\n    // decimal_to_binary(32)   # returns \"db100000db\"\n    public static String decimalToBinary(int decimal) {\n",
        "snippet": [
            "        return \"db\" + Integer.toBinaryString(decimal) + \"db\";\n    }\n}"
        ],
        "simplified": "You will be given a number in decimal form and your task is to convert it to binary format. The function should return a string, with each character representing a binary number. Each character in the string will be '0' or '1'. There will be an extra couple of characters 'db' at the beginning and at the end of the string. The extra characters are there to help with the format.",
        "task_id": "79",
        "126": "int bits = (int) (Math.log(decimal) / Math.log(2)) + 1;\n        int[] array = new int[bits];\n        for (int bit = bits; bit > 0; bit--) {\n            array[bit - 1] = decimal % 2;\n            decimal /= 2;\n        }\n        StringBuilder sb = new StringBuilder(\"db\");\n        for (int i = 0; i < array.length; i++) {\n            sb.append(array[i]);\n        }\n        sb.append(\"db\");\n        return sb.toString();",
        "grade-126": {
            "execution": 0
        },
        "21": "// Type your solution here\n        if (decimal == 0) {\n            return \"db0db\";\n        }\n        List<String> result = new ArrayList<>();\n        while (decimal != 0) {\n            result.add(decimal % 2 == 0 ? \"0\" : \"1\");\n            decimal /= 2;\n        }\n        return \"db\" + String.join(\"\", result) + \"db\";",
        "grade-21": {
            "execution": 0
        },
        "3": "return \"db\" + Integer.toBinaryString(decimal) + \"db\";",
        "grade-3": {
            "execution": 1
        },
        "146": "String bin = Integer.toBinaryString(decimal);\n        return \"db\" + bin + \"db\";",
        "grade-146": {
            "execution": 1
        },
        "49": "StringBuilder sb = new StringBuilder();\n        sb.append(\"db\");\n        while (decimal != 0) {\n            sb.append(decimal % 2);\n            decimal /= 2;\n        }\n        sb.append(\"db\");\n        return sb.reverse().toString();",
        "grade-49": {
            "execution": 0
        },
        "44": "String d2b = \"db\";\n        String str = Integer.toBinaryString(decimal);\n        return d2b.concat(str).concat(d2b);",
        "grade-44": {
            "execution": 1
        },
        "40": "String s = Integer.toBinaryString(decimal);\n        return \"db\" + s + \"db\";",
        "grade-40": {
            "execution": 1
        },
        "25": "// return Integer.toBinaryString(decimal);\n        return decimalToBinary(decimal, new StringBuilder()).toString();",
        "grade-25": {
            "execution": 0
        },
        "19": "String binary = \"\";\n      while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n        decimal /= 2;\n      }\n      binary = \"db\" + binary + \"db\";\n      return binary;",
        "grade-19": {
            "execution": 0
        },
        "134": "return \"db\" + toBinary(decimal) + \"db\";",
        "grade-134": {
            "execution": 0
        },
        "192": "//Your code here\n        if (decimal == 0) return \"db0db\";\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"db\");\n        int input = decimal;\n        while (input != 0) {\n            int remainder = input % 2;\n            sb.append(remainder);\n            input = input / 2;\n        }\n        sb.append(\"db\");\n        return sb.reverse().toString();",
        "grade-192": {
            "execution": 0
        },
        "109": "String result = \"db\";\n        result += Integer.toBinaryString(decimal);\n        result += \"db\";\n        return result;",
        "grade-109": {
            "execution": 1
        },
        "17": "StringBuffer buffer = new StringBuffer();\n        buffer.append(\"db\");\n        for (int i = 0; i < 5; i++) {\n            buffer.append(decimal % 2);\n            decimal /= 2;\n        }\n        buffer.append(\"db\");\n        return buffer.reverse().toString();",
        "grade-17": {
            "execution": 0
        },
        "119": "String result = \"db\";\n        String binary = Integer.toBinaryString(decimal);\n        for (int i = 0; i < (8 - binary.length()); i++) {\n            result += \"0\";\n        }\n        result += binary;\n        result += \"db\";\n        return result;",
        "grade-119": {
            "execution": 0
        },
        "82": "StringBuilder sb = new StringBuilder(\"db\");\n        for (int i = 0; i < 8; i++) {\n            sb.append(decimal % 2);\n            decimal = decimal / 2;\n        }\n        sb.append(\"db\");\n        return sb.reverse().toString();",
        "grade-82": {
            "execution": 0
        },
        "5": "String binary = \"\";\n        while (decimal > 0) {\n            binary = (decimal % 2) + binary;\n            decimal /= 2;\n        }\n        StringBuilder sb = new StringBuilder(binary);\n        sb.insert(0, \"db\");\n        sb.append(\"db\");\n        return sb.toString();",
        "grade-5": {
            "execution": 0
        },
        "39": "String binaryString = \"db\";\n        String binaryDigit = \"\";\n        int binary, count = 0;\n        binary = decimal;\n        while (binary > 0) {\n            binaryDigit = binaryDigit + \"\" + binary % 2;\n            binary = binary / 2;\n            count++;\n        }\n        for (int i = 0; i < 8 - count; i++) {\n            binaryString = binaryString + \"0\";\n        }\n        for (int i = binaryDigit.length() - 1; i >= 0; i--) {\n            binaryString = binaryString + \"\" + binaryDigit.charAt(i);\n        }\n        binaryString = binaryString + \"db\";\n        return binaryString;",
        "grade-39": {
            "execution": 0
        },
        "42": "return null;",
        "grade-42": {
            "execution": 0
        },
        "96": "return toBinary(decimal, false);",
        "grade-96": {
            "execution": 0
        },
        "122": "return String.format(\"db%sdb\", Integer.toBinaryString(decimal));",
        "grade-122": {
            "execution": 1
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a list of numbers, return whether or not they are sorted\n    // in ascending order. If list has more than 1 duplicate of the same\n    // number, return False. Assume no negative numbers and only integers.\n    // Examples\n    // is_sorted([5]) \u279e True\n    // is_sorted([1, 2, 3, 4, 5]) \u279e True\n    // is_sorted([1, 3, 2, 4, 5]) \u279e False\n    // is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    // is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    public static boolean isSorted(ArrayList<Integer> lst) {\n",
        "snippet": [
            "        List<Integer> sorted_lst = new ArrayList<>(lst);\n        Collections.sort(sorted_lst);\n        if (!lst.equals(sorted_lst)) {\n            return false;\n        }\n        for (int i = 0; i < lst.size() - 2; i++) {\n            if (lst.get(i) == lst.get(i + 1) && lst.get(i) == lst.get(i + 2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"
        ],
        "simplified": "Given a list of numbers, return whether or not they are sorted in ascending order. If list has more than 1 duplicate of the same number, return False. Assume no negative numbers and only integers.",
        "task_id": "126",
        "182": "// Your code here\n        return false;",
        "grade-182": {
            "execution": 0
        },
        "29": "//if list has more than 1 duplicate of the same number, return False\n        int i;\n        boolean sorted = true;\n        for(i = 0; i < lst.size() - 1; i++) {\n            if(lst.get(i) > lst.get(i + 1)) {\n                sorted = false;\n                break;\n            }\n        }\n        return sorted;",
        "grade-29": {
            "execution": 0
        },
        "6": "boolean duplicate = false;\n        for (int i = 0; i < lst.size() - 1; i++) {\n            if (lst.get(i).equals(lst.get(i + 1))) {\n                if (duplicate) {\n                    return false;\n                }\n                duplicate = true;\n            }\n            if (lst.get(i) > lst.get(i + 1)) {\n                return false;\n            }\n        }\n        return true;",
        "grade-6": {
            "execution": 0
        },
        "73": "ArrayList<Integer> copy = new ArrayList<Integer>(lst);\n        Collections.sort(copy);\n        HashSet<Integer> unique = new HashSet<Integer>(copy);\n        if (copy.equals(lst) && unique.size() == lst.size()) {\n            return true;\n        }\n        return false;",
        "grade-73": {
            "execution": 0
        },
        "65": "// Given an arraylist of numbers as input, return true if the list is\n        // sorted, false otherwise.\n        // Assume lst is NOT empty, and there are no negative numbers.\n        // Assume that an array list that is all equal values is NOT sorted.\n        // Assume the array only contains integers, no decimals.\n        // Assume that duplicates of the same number are sorted only if the\n        // duplicates are in sequential order.\n        // Assume that the list is not empty.\n        // Assume that the list will not have more than 100 elements.\n        // Assume that the list does not have null elements.\n        if (lst.size() == 1) {\n            return true;\n        }\n        else {\n            Integer prev = lst.get(0);\n            for (int i = 1; i < lst.size(); i++) {\n                if (lst.get(i) < prev) {\n                    return false;\n                }\n                else {\n                    prev = lst.get(i);\n                }\n            }\n            return true;\n        }",
        "grade-65": {
            "execution": 0
        },
        "60": "boolean isSorted = true;\n        ArrayList<Integer> lstCopy = new ArrayList<Integer>(lst);\n        Collections.sort(lstCopy);\n        int count = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int lstCopyInt = lstCopy.get(i);\n            int lstInt = lst.get(i);\n            if (lstCopyInt != lstInt) {\n                isSorted = false;\n            }\n            for (int j = 0; j < lst.size(); j++) {\n                if (lstCopyInt == lst.get(j)) {\n                    count++;\n                }\n            }\n            if (count > 1) {\n                isSorted = false;\n            }\n            count = 0;\n        }\n        return isSorted;",
        "grade-60": {
            "execution": 0
        },
        "36": "ArrayList<Integer> seen_nums = new ArrayList<Integer>();\n        for (int elem : lst) {\n            if (seen_nums.size() != 0 && seen_nums.get(seen_nums.size() - 1) > elem) {\n                return false;\n            }\n            if (seen_nums.contains(elem)) {\n                return false;\n            }\n            seen_nums.add(elem);\n        }\n        return true;",
        "grade-36": {
            "execution": 0
        },
        "27": "boolean duplicate = false;\n        if (lst.size() == 1) {\n            return true;\n        }\n        for (int i = 0; i < lst.size() - 1; i++) {\n            if (lst.get(i) > lst.get(i + 1)) {\n                return false;\n            }\n            if (lst.get(i) == lst.get(i + 1)) {\n                duplicate = true;\n            }\n        }\n        return !duplicate;",
        "grade-27": {
            "execution": 0
        },
        "193": "int prev = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < prev) {\n                return false;\n            }\n            prev = lst.get(i);\n        }\n        return true;",
        "grade-193": {
            "execution": 0
        },
        "152": "// your code here\n        HashSet<Integer> temp = new HashSet<>();\n        for(int x: lst) {\n            if(temp.contains(x)) return false;\n            temp.add(x);\n        }\n        for(int i = 0; i < lst.size() - 1; i++) {\n            if(lst.get(i) > lst.get(i + 1)) return false;\n        }\n        return true;",
        "grade-152": {
            "execution": 0
        },
        "22": "// write your code here\n        return true;",
        "grade-22": {
            "execution": 0
        },
        "167": "HashSet<Integer> set = new HashSet<Integer>();\n        ArrayList<Integer> sortedLst = new ArrayList<Integer>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (!set.contains(lst.get(i))) {\n                set.add(lst.get(i));\n                sortedLst.add(lst.get(i));\n            }\n        }\n        Collections.sort(sortedLst);\n        for (int i = 0; i < sortedLst.size(); i++) {\n            if (sortedLst.get(i) != lst.get(i)) {\n                return false;\n            }\n        }\n        return true;",
        "grade-167": {
            "execution": 0
        },
        "115": "ArrayList<Integer> lst2 = new ArrayList<Integer>(lst);\n        Collections.sort(lst2);\n        // use for debugging\n        for (int i = 0; i < lst.size(); i++) {\n            System.out.println(lst.get(i) + \" \" + lst2.get(i));\n        }\n        return (lst.equals(lst2));",
        "grade-115": {
            "execution": 0
        },
        "8": "for (int i = 0; i < lst.size() - 1; i++) {\n            if (lst.get(i) >= lst.get(i + 1)) {\n                return false;\n            }\n        }\n        return true;",
        "grade-8": {
            "execution": 0
        },
        "7": "HashSet<Integer> hs = new HashSet<>();\n        for (int i = 0; i < lst.size(); i++) {\n            hs.add(lst.get(i));\n        }\n        if (hs.size() == lst.size()) {\n            for (int i = 0; i < lst.size() - 1; i++) {\n                if (lst.get(i) > lst.get(i + 1)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;",
        "grade-7": {
            "execution": 0
        },
        "23": "// Your code here...\n        return false;",
        "grade-23": {
            "execution": 0
        },
        "58": "if (lst.size() == 1) {\n            return true;\n        }\n        for (int i = 0; i < lst.size() - 1; i++) {\n            if (lst.get(i) >= lst.get(i + 1)) {\n                return false;\n            }\n        }\n        return true;",
        "grade-58": {
            "execution": 0
        },
        "62": "ArrayList<Integer> copy = new ArrayList<>(lst);\n        Collections.sort(copy);\n        if (copy.equals(lst)) {\n            return true;\n        }\n        return false;",
        "grade-62": {
            "execution": 0
        },
        "140": "Set<Integer> s = new HashSet<>(lst);\n        if (s.size() != lst.size()) return false;\n        for (int i = 0; i < lst.size() - 1; i++) {\n            if (lst.get(i) > lst.get(i + 1)) return false;\n        }\n        return true;",
        "grade-140": {
            "execution": 0
        },
        "171": "// Your code here\n        return lst.equals(sort(lst));",
        "grade-171": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    public static ArrayList<String> byLength(ArrayList<Integer> arr) {\n",
        "snippet": [
            "        List<Integer> sorted_arr = new ArrayList<>(arr);\n        sorted_arr.sort(Collections.reverseOrder());\n        List<String> new_arr = new ArrayList<>();\n        for (int var : sorted_arr) {\n            if (var >= 1 && var <= 9) {\n                switch (var) {\n                    case 1 -> new_arr.add(\"One\");\n                    case 2 -> new_arr.add(\"Two\");\n                    case 3 -> new_arr.add(\"Three\");\n                    case 4 -> new_arr.add(\"Four\");\n                    case 5 -> new_arr.add(\"Five\");\n                    case 6 -> new_arr.add(\"Six\");\n                    case 7 -> new_arr.add(\"Seven\");\n                    case 8 -> new_arr.add(\"Eight\");\n                    case 9 -> new_arr.add(\"Nine\");\n                }\n            }\n        }\n        return new_arr;\n    }\n}"
        ],
        "simplified": "Given an array of integers, sort the integers that are between 1 and 9 inclusive, reverse the resulting array, and then replace each digit by its corresponding name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".",
        "task_id": "105",
        "167": "ArrayList<String> result = new ArrayList<String>();\n        // Sort and reverse the array.\n        arr.sort(null);\n        Collections.reverse(arr);\n        // Convert each element in the array to its corresponding string.\n        for (int i = 0; i < arr.size(); i++) {\n            int number = arr.get(i);\n            switch (number) {\n                case 1:\n                    result.add(\"One\");\n                    break;\n                case 2:\n                    result.add(\"Two\");\n                    break;\n                case 3:\n                    result.add(\"Three\");\n                    break;\n                case 4:\n                    result.add(\"Four\");\n                    break;\n                case 5:\n                    result.add(\"Five\");\n                    break;\n                case 6:\n                    result.add(\"Six\");\n                    break;\n                case 7:\n                    result.add(\"Seven\");\n                    break;\n                case 8:\n                    result.add(\"Eight\");\n                    break;\n                case 9:\n                    result.add(\"Nine\");\n                    break;\n                default:\n                    break;\n            }\n        }\n        return result;",
        "grade-167": {
            "execution": 1
        },
        "28": "// TODO: Solve it!\n        return null;",
        "grade-28": {
            "execution": 0
        },
        "6": "ArrayList<String> result = new ArrayList<String>();\n        ArrayList<Integer> nums = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0 && arr.get(i) < 10)\n                nums.add(arr.get(i));\n        }\n        Collections.sort(nums);\n        Collections.reverse(nums);\n        for (int i = 0; i < nums.size(); i++) {\n            switch (nums.get(i)) {\n                case 1:\n                    result.add(\"One\");\n                    break;\n                case 2:\n                    result.add(\"Two\");\n                    break;\n                case 3:\n                    result.add(\"Three\");\n                    break;\n                case 4:\n                    result.add(\"Four\");\n                    break;\n                case 5:\n                    result.add(\"Five\");\n                    break;\n                case 6:\n                    result.add(\"Six\");\n                    break;\n                case 7:\n                    result.add(\"Seven\");\n                    break;\n                case 8:\n                    result.add(\"Eight\");\n                    break;\n                case 9:\n                    result.add(\"Nine\");\n                    break;\n            }\n        }\n        return result;",
        "grade-6": {
            "execution": 1
        },
        "196": "ArrayList<String> nums = new ArrayList<>();\n        for (int n : arr) {\n            if (n < 1 || n > 9) {\n                continue;\n            }\n            nums.add(Integer.toString(n));\n        }\n        nums.sort((a, b) -> a.length() - b.length());\n        Collections.reverse(nums);\n        return nums;",
        "grade-196": {
            "execution": 0
        },
        "70": "Collections.sort(arr);\n        Collections.reverse(arr);\n        HashMap<Integer, String> map = new HashMap<>();\n        map.put(1, \"One\");\n        map.put(2, \"Two\");\n        map.put(3, \"Three\");\n        map.put(4, \"Four\");\n        map.put(5, \"Five\");\n        map.put(6, \"Six\");\n        map.put(7, \"Seven\");\n        map.put(8, \"Eight\");\n        map.put(9, \"Nine\");\n        ArrayList<String> str = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0 && arr.get(i) < 10) {\n                str.add(map.get(arr.get(i)));\n            }\n        }\n        return str;",
        "grade-70": {
            "execution": 1
        },
        "62": "if (arr.size() == 0) {\n            return new ArrayList<String>();\n        }\n        ArrayList<Integer> nums = new ArrayList<Integer>();\n        ArrayList<String> strs = new ArrayList<String>();\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0 && arr.get(i) < 10) {\n                nums.add(arr.get(i));\n            }\n        }\n        Collections.sort(nums);\n        Collections.reverse(nums);\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) == 1) {\n                strs.add(\"One\");\n            } else if (nums.get(i) == 2) {\n                strs.add(\"Two\");\n            } else if (nums.get(i) == 3) {\n                strs.add(\"Three\");\n            } else if (nums.get(i) == 4) {\n                strs.add(\"Four\");\n            } else if (nums.get(i) == 5) {\n                strs.add(\"Five\");\n            } else if (nums.get(i) == 6) {\n                strs.add(\"Six\");\n            } else if (nums.get(i) == 7) {\n                strs.add(\"Seven\");\n            } else if (nums.get(i) == 8) {\n                strs.add(\"Eight\");\n            } else if (nums.get(i) == 9) {\n                strs.add(\"Nine\");\n            }\n        }\n        return strs;",
        "grade-62": {
            "execution": 1
        },
        "57": "ArrayList<String> res = new ArrayList<>();\n        if (arr.size() == 0) {\n            return res;\n        }\n        Collections.sort(arr);\n        Collections.reverse(arr);\n        HashMap<Integer, String> map = new HashMap<>();\n        map.put(1, \"One\");\n        map.put(2, \"Two\");\n        map.put(3, \"Three\");\n        map.put(4, \"Four\");\n        map.put(5, \"Five\");\n        map.put(6, \"Six\");\n        map.put(7, \"Seven\");\n        map.put(8, \"Eight\");\n        map.put(9, \"Nine\");\n        for (int a : arr) {\n            if (a > 0 && a < 10) {\n                res.add(map.get(a));\n            }\n        }\n        return res;",
        "grade-57": {
            "execution": 1
        },
        "35": "ArrayList<String> result = new ArrayList<String>();\n        ArrayList<Integer> newArr = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0 && arr.get(i) < 10) {\n                newArr.add(arr.get(i));\n            }\n        }\n        newArr.sort(null);\n        Collections.reverse(newArr);\n        for (int i = 0; i < newArr.size(); i++) {\n            if (newArr.get(i) == 1) {\n                result.add(\"One\");\n            } else if (newArr.get(i) == 2) {\n                result.add(\"Two\");\n            } else if (newArr.get(i) == 3) {\n                result.add(\"Three\");\n            } else if (newArr.get(i) == 4) {\n                result.add(\"Four\");\n            } else if (newArr.get(i) == 5) {\n                result.add(\"Five\");\n            } else if (newArr.get(i) == 6) {\n                result.add(\"Six\");\n            } else if (newArr.get(i) == 7) {\n                result.add(\"Seven\");\n            } else if (newArr.get(i) == 8) {\n                result.add(\"Eight\");\n            } else if (newArr.get(i) == 9) {\n                result.add(\"Nine\");\n            }\n        }\n        return result;",
        "grade-35": {
            "execution": 1
        },
        "195": "String[] names = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n        ArrayList<String> arrString = new ArrayList<String>();\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) >= 1 && arr.get(i) <= 9) {\n                arrString.add(names[arr.get(i) - 1]);\n            }\n        }\n        Collections.sort(arrString);\n        Collections.reverse(arrString);\n        return arrString;",
        "grade-195": {
            "execution": 0
        },
        "26": "ArrayList<String> output = new ArrayList<String>();\n        // a map of the numbers sorted by length.\n        //Map<Integer, String> numMap = new TreeMap<Integer, String>();\n        //ArrayList<Integer> numMap = new ArrayList<Integer>();\n        Map<Integer, String> numMap = new TreeMap<Integer, String>();\n        // Add numbers to the map.\n        // Make a list of numbers.\n        ArrayList<Integer> myList = new ArrayList<Integer>();\n        int counter = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) < 10 && arr.get(i) > 0) {\n                // if it's between 1 and 9, add it to the list.\n                myList.add(arr.get(i));\n            }\n        }\n        // Now, sort the list and then reverse it.\n        Collections.sort(myList);\n        Collections.reverse(myList);\n        // Now, create the map with the numbers and the word for the number.\n        for (int i = 0; i < myList.size(); i++) {\n            if (myList.get(i) == 1) {\n                numMap.put(myList.get(i), \"One\");\n            } else if (myList.get(i) == 2) {\n                numMap.put(myList.get(i), \"Two\");\n            } else if (myList.get(i) == 3) {\n                numMap.put(myList.get(i), \"Three\");\n            } else if (myList.get(i) == 4) {\n                numMap.put(myList.get(i), \"Four\");\n            } else if (myList.get(i) == 5) {\n                numMap.put(myList.get(i), \"Five\");\n            } else if (myList.get(i) == 6) {\n                numMap.put(myList.get(i), \"Six\");\n            } else if (myList.get(i) == 7) {\n                numMap.put(myList.get(i), \"Seven\");",
        "grade-26": {
            "execution": 0
        },
        "178": "// The function should return the expected output\n        HashMap<Integer, String> map = new HashMap<>();\n        map.put(1, \"One\");\n        map.put(2, \"Two\");\n        map.put(3, \"Three\");\n        map.put(4, \"Four\");\n        map.put(5, \"Five\");\n        map.put(6, \"Six\");\n        map.put(7, \"Seven\");\n        map.put(8, \"Eight\");\n        map.put(9, \"Nine\");\n        ArrayList<String> result = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) >= 1 && arr.get(i) <= 9) {\n                result.add(map.get(arr.get(i)));\n            }\n        }\n        Collections.sort(result);\n        Collections.reverse(result);\n        return result;",
        "grade-178": {
            "execution": 0
        },
        "141": "ArrayList<String> result = new ArrayList<String>();\n        if (arr.size() == 0) return result;\n        HashMap<Integer, String> h = new HashMap<Integer, String>();\n        h.put(1, \"One\");\n        h.put(2, \"Two\");\n        h.put(3, \"Three\");\n        h.put(4, \"Four\");\n        h.put(5, \"Five\");\n        h.put(6, \"Six\");\n        h.put(7, \"Seven\");\n        h.put(8, \"Eight\");\n        h.put(9, \"Nine\");\n        Collections.sort(arr);\n        Collections.reverse(arr);\n        for (int x : arr) {\n            if (h.containsKey(x)) result.add(h.get(x));\n        }\n        return result;",
        "grade-141": {
            "execution": 1
        },
        "22": "ArrayList<String> ret = new ArrayList<String>();\n        arr.sort(Comparator.naturalOrder());\n        Collections.reverse(arr);\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) >= 1 && arr.get(i) <= 9) {\n                switch (arr.get(i)) {\n                    case 1:\n                        ret.add(\"One\");\n                        break;\n                    case 2:\n                        ret.add(\"Two\");\n                        break;\n                    case 3:\n                        ret.add(\"Three\");\n                        break;\n                    case 4:\n                        ret.add(\"Four\");\n                        break;\n                    case 5:\n                        ret.add(\"Five\");\n                        break;\n                    case 6:\n                        ret.add(\"Six\");\n                        break;\n                    case 7:\n                        ret.add(\"Seven\");\n                        break;\n                    case 8:\n                        ret.add(\"Eight\");\n                        break;\n                    case 9:\n                        ret.add(\"Nine\");\n                        break;\n                }\n            }\n        }\n        return ret;",
        "grade-22": {
            "execution": 1
        },
        "154": "ArrayList<String> res = new ArrayList<>();\n        if (arr.size() == 0) return res;\n        Collections.sort(arr);\n        Collections.reverse(arr);\n        int i = 0;\n        while (i < arr.size()) {\n            if (arr.get(i) > 9 || arr.get(i) < 1) arr.remove(i);\n            else {\n                switch (arr.get(i)) {\n                    case 1:\n                        res.add(\"One\");\n                        break;\n                    case 2:\n                        res.add(\"Two\");\n                        break;\n                    case 3:\n                        res.add(\"Three\");\n                        break;\n                    case 4:\n                        res.add(\"Four\");\n                        break;\n                    case 5:\n                        res.add(\"Five\");\n                        break;\n                    case 6:\n                        res.add(\"Six\");\n                        break;\n                    case 7:\n                        res.add(\"Seven\");\n                        break;\n                    case 8:\n                        res.add(\"Eight\");\n                        break;\n                    case 9:\n                        res.add(\"Nine\");\n                        break;\n                }\n                i++;\n            }\n        }\n        return res;",
        "grade-154": {
            "execution": 1
        },
        "108": "ArrayList<String> result = new ArrayList<String>();\n        return result;",
        "grade-108": {
            "execution": 0
        },
        "8": "HashMap<Integer, String> map = new HashMap<>();\n        map.put(1, \"One\");\n        map.put(2, \"Two\");\n        map.put(3, \"Three\");\n        map.put(4, \"Four\");\n        map.put(5, \"Five\");\n        map.put(6, \"Six\");\n        map.put(7, \"Seven\");\n        map.put(8, \"Eight\");\n        map.put(9, \"Nine\");\n        ArrayList<String> output = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            if (map.containsKey(arr.get(i))) {\n                output.add(map.get(arr.get(i)));\n            }\n        }\n        Collections.sort(output);\n        Collections.reverse(output);\n        return output;",
        "grade-8": {
            "execution": 0
        },
        "7": "ArrayList<String> strings = new ArrayList<String>();\n        for (int number : arr) {\n            switch (number) {\n                case 1: strings.add(\"One\"); break;\n                case 2: strings.add(\"Two\"); break;\n                case 3: strings.add(\"Three\"); break;\n                case 4: strings.add(\"Four\"); break;\n                case 5: strings.add(\"Five\"); break;\n                case 6: strings.add(\"Six\"); break;\n                case 7: strings.add(\"Seven\"); break;\n                case 8: strings.add(\"Eight\"); break;\n                case 9: strings.add(\"Nine\"); break;\n            }\n        }\n        return strings;",
        "grade-7": {
            "execution": 0
        },
        "23": "ArrayList<String> res = new ArrayList<>();\n        HashMap<Integer, String> map = new HashMap<>();\n        map.put(1, \"One\");\n        map.put(2, \"Two\");\n        map.put(3, \"Three\");\n        map.put(4, \"Four\");\n        map.put(5, \"Five\");\n        map.put(6, \"Six\");\n        map.put(7, \"Seven\");\n        map.put(8, \"Eight\");\n        map.put(9, \"Nine\");\n        Collections.sort(arr);\n        for (int i = arr.size() - 1; i >= 0; i--) {\n            if (arr.get(i) > 0 && arr.get(i) < 10) {\n                res.add(map.get(arr.get(i)));\n            }\n        }\n        return res;",
        "grade-23": {
            "execution": 1
        },
        "55": "List<Integer> list = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9);\n        Set<Integer> set = new HashSet<Integer>(list);\n        String[] dict = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n        ArrayList<String> res = new ArrayList<String>();\n        for (int i = 0; i < arr.size(); i++) {\n            int cur = arr.get(i);\n            if (set.contains(cur)) {\n                res.add(dict[cur - 1]);\n            }\n        }\n        Collections.sort(res);\n        Collections.reverse(res);\n        return res;",
        "grade-55": {
            "execution": 0
        },
        "59": "var ans = new ArrayList<String>();\n        var dict = Map.of(1, \"One\", 2, \"Two\", 3, \"Three\", 4, \"Four\", 5, \"Five\", 6, \"Six\", 7, \"Seven\", 8, \"Eight\", 9, \"Nine\");\n        Arrays.sort(arr.toArray());\n        Collections.reverse(arr);\n        for (int n : arr) {\n            var name = dict.get(n);\n            if (name != null) {\n                ans.add(name);\n            }\n        }\n        return ans;",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // \"Given an array representing a branch of a tree that has non-negative integer nodes\n    // your task is to pluck one of the nodes and return it.\n    // The plucked node should be the node with the smallest even value.\n    // If multiple nodes with the same smallest even value are found return the node that has smallest index.\n    // The plucked node should be returned in a list, [ smalest_value, its index ],\n    // If there are no even values or the given array is empty, return [].\n    // Example 1:\n    // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n    // Input: [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    // Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n    // so we will choose the first zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Integer> pluck(ArrayList<Integer> arr) {\n",
        "snippet": [
            "        List<Integer> result = new ArrayList<>();\n        if (arr.size() == 0) {\n            return result;\n        }\n        int min = Integer.MAX_VALUE;\n        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                if (arr.get(i) < min) {\n                    min = arr.get(i);\n                    minIndex = i;\n                }\n            }\n        }\n        if (minIndex != -1) {\n            result.add(min);\n            result.add(minIndex);\n        }\n        return result;\n    }\n}"
        ],
        "simplified": "\"Given an array representing a branch of a tree that has non-negative integer nodes your task is to pluck one of the nodes and return it. The plucked node should be the node with the smallest even value. If multiple nodes with the same smallest even value are found return the node that has smallest index. The plucked node should be returned in a list, [ smalest_value, its index ], If there are no even values or the given array is empty, return []. Constraints: * 1 <= nodes.length <= 10000 * 0 <= node.value",
        "task_id": "68",
        "167": "// \"Given an array representing a branch of a tree that has non-negative integer nodes\n        // your task is to pluck one of the nodes and return it.\n        // The plucked node should be the node with the smallest even value.\n        // If multiple nodes with the same smallest even value are found return the node that has smallest index.\n        // The plucked node should be returned in a list, [ smalest_value, its index ],\n        // If there are no even values or the given array is empty, return [].\n        // Example 1:\n        // Input: [4,2,3]\n        // Output: [2, 1]\n        // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n        // Example 2:\n        // Input: [1,2,3]\n        // Output: [2, 1]\n        // Explanation: 2 has the smallest even value, and 2 has the smallest index. \n        // Example 3:\n        // Input: []\n        // Output: []\n        // Example 4:\n        // Input: [5, 0, 3, 0, 4, 2]\n        // Output: [0, 1]\n        // Explanation: 0 is the smallest value, but  there are two zeros,\n        // so we will choose the first zero, which has the smallest index.\n        // Constraints:\n        // * 1 <= nodes.length <= 10000\n        // * 0 <= node.value\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        ArrayList<Integer> evens = new ArrayList<Integer>();\n        ArrayList<Integer> evensIndex = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                evens.add(arr.get(i));\n                evensIndex.add(i);\n            }\n        }\n        int smallestEven = Integer.MAX_VALUE;\n        int smallestEvenIndex = Integer.MAX_VALUE;\n        for (int i = 0; i < evens.size(); i++) {\n            if (evens.get(i) < smallestEven) {\n                smallestEven = even",
        "grade-167": {
            "execution": 0
        },
        "28": "ArrayList<Integer> res = new ArrayList<Integer>();\n        int minEven = Integer.MAX_VALUE;\n        int idx = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            int node = arr.get(i);\n            if (node % 2 == 0 && node < minEven) {\n                minEven = node;\n                idx = i;\n            }\n        }\n        if (idx != -1) {\n            res.add(minEven);\n            res.add(idx);\n        }\n        return res;",
        "grade-28": {
            "execution": 1
        },
        "6": "//write your code here\n        if (arr.size() <= 0) {\n            return new ArrayList<Integer>();\n        }\n        ArrayList<Integer> ans = new ArrayList<Integer>();\n        ArrayList<Integer> evens = new ArrayList<Integer>();\n        int min = Integer.MAX_VALUE;\n        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                if (arr.get(i) < min) {\n                    min = arr.get(i);\n                    minIndex = i;\n                }\n            }\n        }\n        if (minIndex == -1) {\n            return new ArrayList<Integer>();\n        }\n        ans.add(min);\n        ans.add(minIndex);\n        return ans;",
        "grade-6": {
            "execution": 1
        },
        "195": "return arr.stream().filter(x -> x % 2 == 0).min(Comparator.comparing(a -> a)).map(x -> Arrays.asList(x, arr.indexOf(x))).orElse(new ArrayList<Integer>());",
        "grade-195": {
            "execution": 0
        },
        "71": "int i, len = arr.size();\n        ArrayList<Integer> ret = new ArrayList<Integer>();\n        Integer[] arr2 = new Integer[len];\n        arr2 = arr.toArray(arr2);\n        // loop once to find the minimum even value,\n        // if it's not even or if the array is empty return [].\n        int min = Integer.MAX_VALUE;\n        boolean gotEven = false;\n        for (i = 0; i < len; i++) {\n            if (arr2[i] % 2 == 0) {\n                if (arr2[i] < min) {\n                    min = arr2[i];\n                }\n                gotEven = true;\n            }\n        }\n        if (!gotEven) {\n            return ret;\n        }\n        // loop again to find the index of the minimum value\n        int min_i = 0;\n        for (i = 0; i < len; i++) {\n            if (arr2[i] == min) {\n                min_i = i;\n                break;\n            }\n        }\n        ret.add(min);\n        ret.add(min_i);\n        return ret;",
        "grade-71": {
            "execution": 1
        },
        "62": "// TODO: implement this method\n        // return a list of two ints that is the smallest even value and its index\n        // return an empty list if no even value is found.\n        ArrayList<Integer> res = new ArrayList<Integer>();\n        return res;",
        "grade-62": {
            "execution": 0
        },
        "57": "ArrayList<Integer> ret = new ArrayList<Integer>();\n        ArrayList<Integer> candidates = new ArrayList<Integer>();\n        ArrayList<Integer> idx = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                candidates.add(arr.get(i));\n                idx.add(i);\n            }\n        }\n        if (candidates.size() < 1) {\n            return ret;\n        }\n        int min = candidates.get(0);\n        int first_idx = 0;\n        for (int i = 1; i < candidates.size(); i++) {\n            if (candidates.get(i) < min) {\n                min = candidates.get(i);\n                first_idx = i;\n            }\n        }\n        ret.add(min);\n        ret.add(idx.get(first_idx));\n        return ret;",
        "grade-57": {
            "execution": 1
        },
        "35": "return new ArrayList<Integer>();",
        "grade-35": {
            "execution": 0
        },
        "194": "ArrayList<Integer> result = new ArrayList<Integer>();\n        // your code goes here\n        int minEvenValue = Integer.MAX_VALUE;\n        int minEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0 && arr.get(i) < minEvenValue) {\n                minEvenValue = arr.get(i);\n                minEvenIndex = i;\n            }\n        }\n        if (minEvenIndex != -1) {\n            result.add(minEvenValue);\n            result.add(minEvenIndex);\n        }\n        return result;",
        "grade-194": {
            "execution": 1
        },
        "26": "if (arr.size() == 0) {\n            return new ArrayList<Integer>();\n        }\n        HashMap<Integer,ArrayList<Integer>> dict = new HashMap<Integer,ArrayList<Integer>>();\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            int x = arr.get(i);\n            if (x%2 == 0) {\n                if (x < min) {\n                    min = x;\n                }\n                if (dict.containsKey(x)) {\n                    dict.get(x).add(i);\n                } else {\n                    ArrayList<Integer> tmp = new ArrayList<Integer>();\n                    tmp.add(i);\n                    dict.put(x,tmp);\n                }\n            }\n        }\n        if (min == Integer.MAX_VALUE) {\n            return new ArrayList<Integer>();\n        }\n        ArrayList<Integer> res = new ArrayList<Integer>();\n        res.add(min);\n        res.add(dict.get(min).get(0));\n        return res;",
        "grade-26": {
            "execution": 1
        },
        "177": "// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254,",
        "grade-177": {
            "execution": 0
        },
        "142": "int smallestIndex = -1;\n        int smallestValue = Integer.MAX_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            int v = arr.get(i);\n            if (v != 0 && v % 2 == 0 && v < smallestValue) {\n                smallestIndex = i;\n                smallestValue = v;\n            }\n        }\n        if (smallestIndex == -1) {\n            return new ArrayList<Integer>();\n        }\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        result.add(smallestValue);\n        result.add(smallestIndex);\n        return result;",
        "grade-142": {
            "execution": 0
        },
        "22": "ArrayList<Integer> evens = new ArrayList<Integer>();\n        ArrayList<Integer> evenIndexes = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                evens.add(arr.get(i));\n                evenIndexes.add(i);\n            }\n        }\n        Collections.sort(evens);\n        ArrayList<Integer> output = new ArrayList<Integer>();\n        if (evens.size() == 0) {\n            return output;\n        }\n        output.add(evens.get(0));\n        output.add(evenIndexes.get(0));\n        return output;",
        "grade-22": {
            "execution": 0
        },
        "155": "ArrayList<Integer> res = new ArrayList<Integer>();\n        int min = Integer.MAX_VALUE;\n        int idx = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            int node = arr.get(i);\n            if (node < min && node % 2 == 0) {\n                min = node;\n                idx = i;\n            }\n        }\n        if (idx > -1) {\n            res.add(min);\n            res.add(idx);\n        }\n        return res;",
        "grade-155": {
            "execution": 1
        },
        "110": "ArrayList<Integer> res = new ArrayList<Integer>();\n        if (arr.size() < 1) return res;\n        // find the smallest non-negative even integer in the array\n        int min = arr.get(0);\n        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n            if (num % 2 == 0 && num < min) min = num;\n        }\n        if (min % 2 != 0) return res;\n        res.add(min);\n        // find the first index of the minimum even\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == min) {\n                res.add(i);\n                break;\n            }\n        }\n        return res;",
        "grade-110": {
            "execution": 0
        },
        "8": "// System.out.println(\"arr=\" + arr);\n        if (arr.size() <= 0) return new ArrayList<Integer>();\n        int minEven = Integer.MAX_VALUE;\n        int minEvenIdx = Integer.MAX_VALUE;\n        boolean atLeastOneEven = false;\n        for (int i = 0; i < arr.size(); i++) {\n            // System.out.println(\"i=\" + i + \" arr.get(i)=\" + arr.get(i));\n            if (arr.get(i) % 2 == 0) {\n                atLeastOneEven = true;\n                if (arr.get(i) < minEven) {\n                    minEven = arr.get(i);\n                    minEvenIdx = i;\n                }\n            }\n        }\n        if (!atLeastOneEven) return new ArrayList<Integer>();\n        ArrayList<Integer> answer = new ArrayList<Integer>();\n        answer.add(minEven);\n        answer.add(minEvenIdx);\n        return answer;",
        "grade-8": {
            "execution": 1
        },
        "7": "if (arr.size() == 0) {\n            return new ArrayList<Integer>();\n        } else {\n            ArrayList<Integer> ans = new ArrayList<Integer>();\n            ArrayList<Integer> evens = new ArrayList<Integer>();\n            int min = Integer.MAX_VALUE;\n            for (int i = 0; i < arr.size(); i++) {\n                int val = arr.get(i);\n                if (val % 2 == 0) {\n                    evens.add(val);\n                    if (val < min) {\n                        min = val;\n                    }\n                }\n            }\n            if (evens.size() == 0) {\n                return new ArrayList<Integer>();\n            } else {\n                for (int i = 0; i < arr.size(); i++) {\n                    if (arr.get(i) == min) {\n                        ans.add(min);\n                        ans.add(i);\n                        return ans;\n                    }\n                }\n            }\n        }\n        throw new RuntimeException(\"Problem never thought you'd get here\");",
        "grade-7": {
            "execution": 1
        },
        "23": "ArrayList<Integer> res = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size(); i++) {\n            int val = arr.get(i);\n            if (val % 2 == 0) {\n                if (res.size() == 0) {\n                    res.add(val);\n                    res.add(i);\n                } else {\n                    if (val < res.get(0)) {\n                        res.set(0, val);\n                        res.set(1, i);\n                    }\n                }\n            }\n        }\n        return res;",
        "grade-23": {
            "execution": 1
        },
        "55": "ArrayList<Integer> ans = new ArrayList<Integer>();\n        int smallest_even = Integer.MAX_VALUE;\n        int smallest_even_idx = Integer.MAX_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n            if (num % 2 == 0 && num < smallest_even) {\n                smallest_even = num;\n                smallest_even_idx = i;\n            }\n        }\n        if (smallest_even != Integer.MAX_VALUE) {\n            ans.add(smallest_even);\n            ans.add(smallest_even_idx);\n        }\n        return ans;",
        "grade-55": {
            "execution": 1
        },
        "59": "try {\n            ArrayList<Integer> res = new ArrayList<Integer>();\n            // smallest even value\n            res.add(0);\n            // index of the smallest even value\n            res.add(0);\n            int smallestEven = Integer.MAX_VALUE;\n            for (int i = 0; i < arr.size(); i++) {\n                if (arr.get(i) % 2 == 0 && arr.get(i) < smallestEven) {\n                    smallestEven = arr.get(i);\n                    res.set(0, smallestEven);\n                    res.set(1, i);\n                }\n            }\n            if (smallestEven == Integer.MAX_VALUE) {\n                return new ArrayList<Integer>();\n            }\n            return res;\n        } catch (Exception e) {\n            throw e;\n        }",
        "grade-59": {
            "execution": 1
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given array will not contain\n    // duplicate values.\n    // Examples:\n    // can_arrange([1,2,4,3,5]) = 3\n    // can_arrange([1,2,3]) = -1\n    public static int canArrange(ArrayList<Integer> arr) {\n",
        "snippet": [
            "        int ind = -1, i = 1;\n        while (i < arr.size()) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                ind = i;\n            }\n            i += 1;\n        }\n        return ind;\n    }\n}"
        ],
        "simplified": "Create a function which returns the largest index of an element which is not greater than or equal to the element immediately preceding it. If no such element exists then return -1. The given array will not contain duplicate values.",
        "task_id": "135",
        "183": "return IntStream.range(0, arr.size()).filter(i -> arr.get(i) < arr.get(i - 1)).max().orElse(-1);",
        "grade-183": {
            "execution": 0
        },
        "28": "int largestIndex = -1;\n        int index = arr.size() - 1;\n        int currentMax = arr.get(index);\n        while (index > 0) {\n            index -= 1;\n            int prev = arr.get(index);\n            if (prev <= currentMax) {\n                largestIndex = index;\n                currentMax = prev;\n            }\n        }\n        return largestIndex;",
        "grade-28": {
            "execution": 0
        },
        "6": "// Do not modify this line\n        int n = arr.size();\n        int index = -1;\n        for (int i = 1; i < n; i++) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                index = i;\n            }\n        }\n        return index;",
        "grade-6": {
            "execution": 1
        },
        "76": "// TODO: return the largest index of an element which is not greater\n        // than or equal to the element immediately preceding it. If no such\n        // element exists then return -1.\n        return -1;",
        "grade-76": {
            "execution": 0
        },
        "65": "int result = -1;\n        int length = arr.size();\n        for (int i = length - 1; i > 0; i--) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                result = i - 1;\n                break;\n            }\n        }\n        return result;",
        "grade-65": {
            "execution": 0
        },
        "60": "int index = -1;\n        for (int i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i) >= arr.get(i + 1)) {\n                index = i;\n            }\n        }\n        return index;",
        "grade-60": {
            "execution": 0
        },
        "35": "int answer = -1;\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                answer = i - 1;\n                break;\n            }\n        }\n        return answer;",
        "grade-35": {
            "execution": 0
        },
        "26": "int index = -1;\n        for (int i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                index = i;\n            }\n        }\n        return index;",
        "grade-26": {
            "execution": 0
        },
        "197": "int last = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) >= last) {\n                last = arr.get(i);\n            } else {\n                return i - 1;\n            }\n        }\n        return -1;",
        "grade-197": {
            "execution": 0
        },
        "152": "// Insert code here\n        return -1;",
        "grade-152": {
            "execution": 0
        },
        "22": "// Insert code here to solve the problem.\n        int ans = -1;\n        for (int i = arr.size() - 1; i > 0; i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                ans = i;\n            }\n        }\n        return ans;",
        "grade-22": {
            "execution": 0
        },
        "166": "int max = -1;\n        for (int i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i) <= arr.get(i + 1)) {\n                max = i + 1;\n            }\n        }\n        return max;",
        "grade-166": {
            "execution": 0
        },
        "120": "// Your code here\n        int counter = -1;\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                counter = i - 1;\n                break;\n            }\n        }\n        return counter;",
        "grade-120": {
            "execution": 0
        },
        "8": "int largest = -1;\n        for (int i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i) <= arr.get(i + 1)) {\n                largest = i;\n            }\n        }\n        return largest;",
        "grade-8": {
            "execution": 0
        },
        "7": "if (arr.size() < 2) {\n            return -1;\n        }\n        int largestIndex = -1;\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                largestIndex = i;\n            }\n        }\n        return largestIndex;",
        "grade-7": {
            "execution": 1
        },
        "23": "// Write your code here\n        int len = arr.size();\n        for (int i = len - 1; i > 0; i--) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                return i - 1;\n            }\n        }\n        return -1;",
        "grade-23": {
            "execution": 0
        },
        "58": "// your code here\n        if (arr.size() == 1) {\n            return -1;\n        }\n        for (int i = arr.size() - 1; i > 0; i--) {\n            if (arr.get(i - 1) >= arr.get(i)) {\n                return i;\n            }\n        }\n        return -1;",
        "grade-58": {
            "execution": 1
        },
        "62": "int maxIndex = -1;\n        int maxVal = -1;\n        for (int i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i) > maxVal && arr.get(i) < arr.get(i + 1)) {\n                maxVal = arr.get(i);\n                maxIndex = i;\n            }\n        }\n        return maxIndex;",
        "grade-62": {
            "execution": 0
        },
        "141": "int largest_index = -1;\n        for (int i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i) <= arr.get(i + 1)) {\n                if (i > largest_index) {\n                    largest_index = i;\n                }\n            }\n        }\n        return largest_index;",
        "grade-141": {
            "execution": 0
        },
        "171": "if (arr.size() == 0) {\n            return -1;\n        }\n        int max_index = -1;\n        int max_element = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < max_element) {\n                max_index = i;\n                max_element = arr.get(i);\n            }\n        }\n        return max_index;",
        "grade-171": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // f(5) == [1, 2, 6, 24, 15]\n    public static ArrayList<Integer> f(int n) {\n",
        "snippet": [
            "        List<Integer> ret = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                int x = 1;\n                for (int j = 1; j <= i; j++) {\n                    x *= j;\n                }\n                ret.add(x);\n            } else {\n                int x = 0;\n                for (int j = 1; j <= i; j++) {\n                    x += j;\n                }\n                ret.add(x);\n            }\n        }\n        return ret;\n    }\n}"
        ],
        "simplified": "Implement the function f that takes n as a parameter, and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even or the sum of numbers from 1 to i otherwise. i starts from 1. the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).",
        "task_id": "106",
        "36": "ArrayList<Integer> ret = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                ret.add(factorial(i));\n            } else {\n                ret.add(sum(i));\n            }\n        }\n        return ret;",
        "grade-36": {
            "execution": 0
        },
        "6": "ArrayList<Integer> l = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            int k = i % 2 == 0 ? 1 : 0;\n            for (int j = 1; j <= i; j++) {\n                k = i % 2 == 0 ? k * j : k + j;\n            }\n            l.add(k);\n        }\n        return l;",
        "grade-6": {
            "execution": 1
        },
        "89": "ArrayList<Integer> l = new ArrayList<Integer>();\n        // Start coding here\n        int i = 1;\n        while (i <= n) {\n            int temp = 0;\n            if (i % 2 == 0) {\n                for (int j = 1; j <= i; j++) {\n                    temp *= j;\n                }\n            } else {\n                for (int j = 1; j <= i; j++) {\n                    temp += j;\n                }\n            }\n            l.add(temp);\n            i++;\n        }\n        return l;",
        "grade-89": {
            "execution": 0
        },
        "80": "// Implement the function f here.\n        return null;",
        "grade-80": {
            "execution": 0
        },
        "73": "// Assume that the contract of the function is respected.\n        // TODO: Implement the function.\n        ArrayList<Integer> list = new ArrayList<Integer>();\n        int sum = 0;\n        for(int i = 1; i <= n; i++){\n            if(i % 2 == 0){\n                int j = 1;\n                while(j <= i){\n                    sum *= j;\n                    j++;\n                }\n                list.add(sum);\n            }else{\n                list.add(i);\n            }\n        }\n        return list;",
        "grade-73": {
            "execution": 0
        },
        "46": "ArrayList<Integer> ans = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i ++) {\n            if (i % 2 == 0) {\n                int p = 1;\n                for (int j = 1; j <= i; j ++) {\n                    p *= j;\n                }\n                ans.add(p);\n            } else {\n                int s = 0;\n                for (int j = 1; j <= i; j ++) {\n                    s += j;\n                }\n                ans.add(s);\n            }\n        }\n        return ans;",
        "grade-46": {
            "execution": 1
        },
        "34": "ArrayList<Integer> res = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                int factorial = 1;\n                for (int j = 1; j <= i; j++) {\n                    factorial *= j;\n                }\n                res.add(factorial);\n            } else {\n                int sum = 0;\n                for (int j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                res.add(sum);\n            }\n        }\n        return res;",
        "grade-34": {
            "execution": 1
        },
        "182": "ArrayList<Integer> r = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0)\n                r.add(f_i(i));\n            else\n                r.add(sum_of_number_from_1_to_i(i));\n        }\n        return r;",
        "grade-182": {
            "execution": 0
        },
        "28": "ArrayList<Integer> res = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                res.add(factorial(i));\n            } else {\n                res.add(sum(i));\n            }\n        }\n        return res;",
        "grade-28": {
            "execution": 0
        },
        "140": "ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            } else {\n                int sum = 0;\n                for (int j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                result.add(sum);\n            }\n        }\n        return result;",
        "grade-140": {
            "execution": 0
        },
        "10": "int factorial = 1;\n        ArrayList<Integer> fact = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                for (int j = 1; j <= i; j++) {\n                    factorial *= j;\n                }\n                fact.add(factorial);\n                factorial = 1;\n            } else {\n                fact.add(i);\n            }\n        }\n        return fact;",
        "grade-10": {
            "execution": 0
        },
        "7": "ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                int factorial = 1;\n                for (int j = 1; j <= i; j++) {\n                    factorial *= j;\n                }\n                result.add(factorial);\n            } else {\n                int sum = 0;\n                for (int j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                result.add(sum);\n            }\n        }\n        return result;",
        "grade-7": {
            "execution": 1
        },
        "29": "// implement\n        int factorial = 1;\n        ArrayList<Integer> nums = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                nums.add(factorial(i));\n            } else {\n                nums.add(sumNumbers(i));\n            }\n        }\n        return nums;",
        "grade-29": {
            "execution": 0
        },
        "71": "ArrayList<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(sum(i));\n            }\n        }\n        return result;",
        "grade-71": {
            "execution": 0
        },
        "76": "ArrayList<Integer> arr = new ArrayList<Integer>();\n        // Implement the function here\n        int sum = 0;\n        int fact = 1;\n        for(int i = 1; i <= n; i++) {\n            if(i % 2 == 0) {\n                fact = 1;\n                for(int j = 1; j <= i; j++) {\n                    fact *= j;\n                }\n                arr.add(fact);\n            } else {\n                sum = 0;\n                for(int j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                arr.add(sum);\n            }\n        }\n        return arr;",
        "grade-76": {
            "execution": 1
        },
        "168": "ArrayList<Integer> lst = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                int factorial = 1;\n                for (int j = 2; j <= i; j++) {\n                    factorial *= j;\n                }\n                lst.add(factorial);\n            } else {\n                int sum = 0;\n                for (int j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                lst.add(sum);\n            }\n        }\n        return lst;",
        "grade-168": {
            "execution": 1
        },
        "186": "// Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Integer> res = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                int factorial = 1;\n                for (int j = 1; j <= i; j++) {\n                    factorial *= j;\n                }\n                res.add(factorial);\n            } else {\n                int sum = 0;\n                for (int j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                res.add(sum);\n            }\n        }\n        return res;",
        "grade-186": {
            "execution": 1
        },
        "64": "// TODO: Implement the function f.\n        // Hint: You might need to use the modulo operator\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(sum(i));\n            }\n        }\n        return result;",
        "grade-64": {
            "execution": 0
        },
        "139": "ArrayList<Integer> list = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            int value = 0;\n            if (i % 2 == 0) {\n                value = 1;\n                for (int j = 1; j <= i; j++) {\n                    value *= j;\n                }\n            } else {\n                value = (i * (i + 1)) / 2;\n            }\n            list.add(value);\n        }\n        return list;",
        "grade-139": {
            "execution": 1
        },
        "72": "return IntStream.range(1, n + 1)\n                .map(x -> x % 2 == 0 ? fatorial(x) : sum(x))\n                .boxed()\n                .collect(Collectors.toCollection(ArrayList::new));",
        "grade-72": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return sorted unique elements in a list\n    // >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    // [0, 2, 3, 5, 9, 123]\n    public static ArrayList<Integer> unique(ArrayList<Integer> l) {\n",
        "snippet": [
            "        List<Integer> result = new ArrayList<>(new HashSet<>(l));\n        Collections.sort(result);\n        return result;\n    }\n}"
        ],
        "simplified": "Return sorted unique elements in a list",
        "task_id": "34",
        "30": "ArrayList<Integer> res = new ArrayList<Integer>();\n        for (int el : l) {\n            if (!res.contains(el)) {\n                res.add(el);\n            }\n        }\n        Collections.sort(res);\n        return res;",
        "grade-30": {
            "execution": 1
        },
        "7": "ArrayList<Integer> a = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (!a.contains(l.get(i))) {\n                a.add(l.get(i));\n            }\n        }\n        Collections.sort(a);\n        return a;",
        "grade-7": {
            "execution": 1
        },
        "90": "ArrayList<Integer> results = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (!results.contains(l.get(i))) {\n                results.add(l.get(i));\n            }\n        }\n        Collections.sort(results);\n        return results;",
        "grade-90": {
            "execution": 1
        },
        "79": "ArrayList<Integer> res = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (!res.contains(l.get(i)))\n                res.add(l.get(i));\n        }\n        Collections.sort(res);\n        return res;",
        "grade-79": {
            "execution": 1
        },
        "70": "Set<Integer> s = new HashSet<>(l);\n        return new ArrayList<>(s);",
        "grade-70": {
            "execution": 1
        },
        "39": "ArrayList<Integer> ret = new ArrayList<Integer>();\n        Collections.sort(l);\n        for (int i : l) {\n            if (ret.size() == 0 || ret.get(ret.size() - 1) != i) {\n                ret.add(i);\n            }\n        }\n        return ret;",
        "grade-39": {
            "execution": 1
        },
        "28": "ArrayList<Integer> res = new ArrayList<Integer>();\n        for (int x : l) {\n            if (!res.contains(x))\n                res.add(x);\n        }\n        Collections.sort(res);\n        return res;",
        "grade-28": {
            "execution": 1
        },
        "189": "ArrayList<Integer> set = new ArrayList<Integer>();\n        for (int i : l) {\n            if (!set.contains(i)) {\n                set.add(i);\n            }\n        }\n        Collections.sort(set);\n        return set;",
        "grade-189": {
            "execution": 1
        },
        "24": "l.sort(null);\n        for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i).equals(l.get(i + 1))) {\n                l.remove(i);\n                i--;\n            }\n        }\n        return l;",
        "grade-24": {
            "execution": 1
        },
        "138": "ArrayList<Integer> m = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (!m.contains(l.get(i))) {\n                m.add(l.get(i));\n            }\n        }\n        Collections.sort(m);\n        return m;",
        "grade-138": {
            "execution": 1
        },
        "9": "HashSet<Integer> elements = new HashSet<Integer>();\n        for (int elem : l) {\n            elements.add(elem);\n        }\n        ArrayList<Integer> l_unique = new ArrayList<Integer>(elements);\n        Collections.sort(l_unique);\n        return l_unique;",
        "grade-9": {
            "execution": 1
        },
        "8": "ArrayList<Integer> ans = new ArrayList<>();\n        Collections.sort(l);\n        for (int i = 0; i < l.size(); i++) {\n            if (i == 0 || l.get(i) != l.get(i - 1)) {\n                ans.add(l.get(i));\n            }\n        }\n        return ans;",
        "grade-8": {
            "execution": 1
        },
        "25": "ArrayList<Integer> ans = new ArrayList<>();\n        HashSet<Integer> x = new HashSet<>();\n        for (int i : l) {\n            if (!x.contains(i)) {\n                x.add(i);\n                ans.add(i);\n            }\n        }\n        Collections.sort(ans);\n        return ans;",
        "grade-25": {
            "execution": 1
        },
        "68": "ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i : l) {\n            if (!result.contains(i))\n                result.add(i);\n        }\n        Collections.sort(result);\n        return result;",
        "grade-68": {
            "execution": 1
        },
        "75": "ArrayList<Integer> r = new ArrayList<>();\n        for (int i : l) {\n            if (!r.contains(i)) r.add(i);\n        }\n        Collections.sort(r);\n        return r;",
        "grade-75": {
            "execution": 1
        },
        "173": "Collections.sort(l);\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i=0; i<l.size(); i++) {\n            if (i == 0 || l.get(i) != l.get(i-1)) {\n                result.add(l.get(i));\n            }\n        }\n        return result;",
        "grade-173": {
            "execution": 1
        },
        "193": "HashSet<Integer> s = new HashSet<Integer>(l);\n        ArrayList<Integer> result = new ArrayList<Integer>(s);\n        Collections.sort(result);\n        return result;",
        "grade-193": {
            "execution": 1
        },
        "60": "ArrayList<Integer> ans = new ArrayList<>();\n        HashSet<Integer> set = new HashSet<>();\n        for (int i : l) {\n            if (!set.contains(i)) {\n                set.add(i);\n                ans.add(i);\n            }\n        }\n        Collections.sort(ans);\n        return ans;",
        "grade-60": {
            "execution": 1
        },
        "136": "ArrayList<Integer> unique_l = new ArrayList<Integer>();\n        for (int i : l) {\n            if (!unique_l.contains(i)) {\n                unique_l.add(i);\n            }\n        }\n        Collections.sort(unique_l);\n        return unique_l;",
        "grade-136": {
            "execution": 1
        },
        "69": "l.sort(null);\n        ArrayList<Integer> u = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i == 0 || l.get(i) != l.get(i - 1)) {\n                u.add(l.get(i));\n            }\n        }\n        return u;",
        "grade-69": {
            "execution": 1
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0, 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n    // 1\n    public static int modp(int n, int p) {\n",
        "snippet": [
            "        int ret = 1;\n        for (int i = 0; i < n; i++) {\n            ret = (ret * 2) % p;\n        }\n        return ret;\n    }\n}"
        ],
        "simplified": "Return 2^n modulo p (be aware of numerics).",
        "task_id": "49",
        "194": "BigInteger Bn = BigInteger.valueOf(n);\n        BigInteger Bp = BigInteger.valueOf(p);\n        BigInteger result = Bn.modPow(Bn, Bp);\n        return result.intValue();",
        "grade-194": {
            "execution": 0
        },
        "28": "if (n == 0) return 1;\n        if (n == 1) return 2;\n        long tmp = modp(n / 2, p);\n        if (n % 2 == 0) return (int) ((tmp * tmp) % p);\n        else return (int) ((2 * tmp * tmp) % p);",
        "grade-28": {
            "execution": 1
        },
        "6": "if (n == 0) {\n            return 1;\n        } else if (n % 2 == 0) {\n            int tmp = modp(n / 2, p);\n            return (tmp * tmp) % p;\n        } else {\n            return (2 * modp(n - 1, p)) % p;\n        }",
        "grade-6": {
            "execution": 1
        },
        "73": "if (n == 0) return 1;\n        if (n == 1) return 2;\n        return (int) (Math.pow(2, modp(n - 1, p)) % p);",
        "grade-73": {
            "execution": 0
        },
        "64": "if (n == 0) return 1;\n        long r = modp(n/2, p);\n        r = (r*r) % p;\n        if (n % 2 == 1) r = (r*2) % p;\n        return (int) r;",
        "grade-64": {
            "execution": 1
        },
        "59": "if (n == 0) {\n            return 1;\n        }\n        int recurse = modp(n/2, p);\n        recurse = (recurse * recurse) % p;\n        if (n % 2 == 1) {\n            recurse = (recurse * 2) % p;\n        }\n        return recurse;",
        "grade-59": {
            "execution": 1
        },
        "35": "int res = 1;\n        while (n > 0) {\n            if ((n & 1) != 0) {\n                res = (res * 2) % p;\n            }\n            n >>= 1;\n        }\n        return res;",
        "grade-35": {
            "execution": 0
        },
        "26": "if (n == 0) return 1;\n        int res = modp(n/2, p);\n        res = (res * res) % p;\n        if (n % 2 == 1) res = (res * 2) % p;\n        return res;",
        "grade-26": {
            "execution": 1
        },
        "164": "if (n == 0) {\n            return 1;\n        }\n        if (n % 2 == 0) {\n            int sq = modp(n / 2, p);\n            return (sq * sq) % p;\n        } else {\n            return (modp(n - 1, p) * n) % p;\n        }",
        "grade-164": {
            "execution": 0
        },
        "22": "if (n == 0) {\n            return 1;\n        }\n        if (n % 2 == 0) {\n            return modp(n / 2, p) * modp(n / 2, p) % p;\n        } else {\n            return 2 * modp(n - 1, p) % p;\n        }",
        "grade-22": {
            "execution": 1
        },
        "177": "if (n == 0) return 1;\n        int z = modp(n/2, p);\n        if (n % 2 == 0) return z*z % p;\n        else return z*z*2 % p;",
        "grade-177": {
            "execution": 1
        },
        "125": "BigInteger a = BigInteger.valueOf(2);\n        BigInteger b = BigInteger.valueOf(n);\n        BigInteger c = BigInteger.valueOf(p);\n        BigInteger d = a.modPow(b, c);\n        return d.intValue();",
        "grade-125": {
            "execution": 1
        },
        "8": "int a = 1;\n        for (int i = 0; i < n; i++) {\n            a = (a * 2) % p;\n        }\n        return a;",
        "grade-8": {
            "execution": 1
        },
        "7": "if (n == 0) return 1;\n        int l = modp(n / 2, p);\n        int r = (int) ((long) l * l % p);\n        if (n % 2 == 1) r = (int) ((long) r * 2 % p);\n        return r;",
        "grade-7": {
            "execution": 1
        },
        "23": "// TODO: Implement this method\n        int power = n;\n        int result = 1;\n        while (power > 0) {\n            if ((power & 1) == 1) {\n                result = (result * n) % p;\n            }\n            n = (n * n) % p;\n            power >>= 1;\n        }\n        return result;",
        "grade-23": {
            "execution": 0
        },
        "57": "if (n == 0) {\n            return 1;\n        }\n        if (n % 2 == 0) {\n            int t = modp(n / 2, p);\n            return (int) ((long) t * t % p);\n        }\n        return (int) ((long) modp(n - 1, p) * n % p);",
        "grade-57": {
            "execution": 0
        },
        "61": "if (n == 0) return 1;\n        return (2 * modp(n - 1, p)) % p;",
        "grade-61": {
            "execution": 1
        },
        "152": "if (n == 0) return 1;\n        int ans = 1;\n        for (int i = 0; i < n; i++) {\n            ans = (2 * ans) % p;\n        }\n        return ans;",
        "grade-152": {
            "execution": 1
        },
        "180": "if (n == 0) {\n            return 1;\n        }\n        long mod = 1;\n        for (int i = 0; i < n; i++) {\n            mod = mod * 2 % p;\n        }\n        return (int) mod;",
        "grade-180": {
            "execution": 1
        },
        "168": "if (n == 0) return 1;\n        if (n % 2 == 0) return modp(n / 2, p) * modp(n / 2, p) % p;\n        return 2 * modp(n - 1, p) % p;",
        "grade-168": {
            "execution": 1
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static int minSubArraySum(ArrayList<Integer> nums) {\n",
        "snippet": [
            "        int minSum = Integer.MAX_VALUE;\n        int sum = 0;\n        for (Integer num : nums) {\n            sum += num;\n            if (minSum > sum) {\n                minSum = sum;\n            }\n            if (sum > 0) {\n                sum = 0;\n            }\n        }\n        return minSum;\n    }\n}"
        ],
        "simplified": "Given an array of integers nums, find the minimum sum of any non-empty sub-array of nums.",
        "task_id": "114",
        "30": "int best = Integer.MAX_VALUE;\n        for (int i = 0; i < nums.size(); i++) {\n            int s = 0;\n            for (int j = i; j < nums.size(); j++) {\n                s += nums.get(j);\n                best = Math.min(best, s);\n            }\n        }\n        return best;",
        "grade-30": {
            "execution": 0
        },
        "6": "int min = Integer.MAX_VALUE;\n        int sum = 0;\n        int head = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            while (sum < 0) {\n                sum -= nums.get(head);\n                head++;\n            }\n            min = Math.min(min, sum);\n        }\n        return min;",
        "grade-6": {
            "execution": 0
        },
        "81": "int minSum = 0;\n        int[] dp = new int[nums.size()];\n        dp[0] = nums.get(0);\n        minSum = dp[0];\n        for (int i = 1; i < nums.size(); i++) {\n            dp[i] = Math.min(dp[i - 1] + nums.get(i), nums.get(i));\n            minSum = Math.min(minSum, dp[i]);\n        }\n        return minSum;",
        "grade-81": {
            "execution": 0
        },
        "71": "int sum = 0;\n        int minSum = 0;\n        int runningSum = 0;\n        for (int num : nums) {\n            sum += num;\n            runningSum += num;\n            if (runningSum < minSum) {\n                minSum = runningSum;\n            }\n        }\n        return Math.abs(minSum) < sum ? Math.abs(minSum) : sum;",
        "grade-71": {
            "execution": 0
        },
        "66": "ArrayList<Integer> sums = new ArrayList<>();\n        int sum = 0;\n        int s = nums.size();\n        for (int i = 0; i < s; i++) {\n            sum += nums.get(i);\n            sums.add(sum);\n        }\n        int minSum = sums.get(s - 1);\n        for (int i = s - 2; i >= 0; i--) {\n            for (int j = i + 1; j < s; j++) {\n                minSum = Math.min(minSum, sums.get(j) - sums.get(i));\n            }\n        }\n        return minSum;",
        "grade-66": {
            "execution": 0
        },
        "40": "Integer minSum = nums.get(0);\n        Integer sum = nums.get(0);\n        for (int i = 1; i < nums.size(); i++) {\n            sum = Math.min(nums.get(i), sum + nums.get(i));\n            minSum = Math.min(minSum, sum);\n        }\n        return minSum;",
        "grade-40": {
            "execution": 0
        },
        "28": "int minSum = Integer.MAX_VALUE;\n        int sum = 0;\n        int startIndex = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if (sum < minSum) {\n                minSum = sum;\n            }\n            if (sum > 0) {\n                // Start over\n                sum = 0;\n                startIndex = i + 1;\n            }\n        }\n        return minSum;",
        "grade-28": {
            "execution": 0
        },
        "167": "// We will keep track of the minimum sum by iterating through each num and adding\n        // it to an accumulator.\n        //\n        // We will also keep track of the minimum sum so far, and every time we find a new\n        // minimum sum, we will update the minimum sum so far.\n        //\n        // If we ever find that the accumulator is less than 0, we will reset the accumulator\n        // to 0.\n        int minSum = Integer.MAX_VALUE;\n        int curSum = 0;\n        for (int num : nums) {\n            curSum += num;\n            if (curSum < minSum) {\n                minSum = curSum;\n            }\n            if (curSum < 0) {\n                curSum = 0;\n            }\n        }\n        return minSum;",
        "grade-167": {
            "execution": 0
        },
        "23": "int min_sum = Integer.MAX_VALUE;\n        int sum = 0;\n        for (int num : nums) {\n            sum += num;\n            min_sum = Math.min(min_sum, sum);\n            if (sum > 0) {\n                sum = 0;\n            }\n        }\n        return min_sum;",
        "grade-23": {
            "execution": 0
        },
        "186": "int minSum = Integer.MAX_VALUE;\n        int currSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) < minSum) {\n                minSum = nums.get(i);\n            }\n            if (nums.get(i) > 0) {\n                currSum = nums.get(i);\n            } else {\n                currSum += nums.get(i);\n                if (currSum < minSum) {\n                    minSum = currSum;\n                }\n            }\n        }\n        return minSum;",
        "grade-186": {
            "execution": 0
        },
        "127": "// Your code here.\n        return -1;",
        "grade-127": {
            "execution": 0
        },
        "9": "if (nums.size() == 0) {\n            return 0;\n        }\n        int min = nums.get(0);\n        int sum = nums.get(0);\n        for (int i = 1; i < nums.size(); i++) {\n            sum = sum + nums.get(i);\n            if (sum < min) {\n                min = sum;\n            }\n            if (sum > 0) {\n                sum = 0;\n            }\n        }\n        return min;",
        "grade-9": {
            "execution": 0
        },
        "7": "int[] numsArray = nums.stream().mapToInt(i -> i).toArray();\n        return minSubArraySum(numsArray);",
        "grade-7": {
            "execution": 0
        },
        "24": "int runningSum = nums.get(0);\n        int minSum = nums.get(0);\n        for (int i = 1; i < nums.size(); i++) {\n            runningSum = Math.min(runningSum + nums.get(i), nums.get(i));\n            minSum = Math.min(minSum, runningSum);\n        }\n        return minSum;",
        "grade-24": {
            "execution": 0
        },
        "64": "// Think about the first one being the min?\n        int min_sum = nums.get(0);\n        // Min is the min of what it was and the sum from\n        // start to i\n        int min_index = 0;\n        for (int i = 1; i < nums.size(); i++) {\n            if (nums.get(i) < min_sum) {\n                min_sum = nums.get(i);\n                min_index = i;\n            }\n            int sum = 0;\n            for (int j = i; j >= min_index; j--) {\n                sum += nums.get(j);\n                if (sum < min_sum) {\n                    min_sum = sum;\n                }\n            }\n        }\n        return min_sum;",
        "grade-64": {
            "execution": 0
        },
        "68": "var min = Integer.MAX_VALUE;\n        var sum = 0;\n        for (var i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            min = Math.min(min, sum);\n            if (sum < 0) {\n                sum = 0;\n            }\n        }\n        return min;",
        "grade-68": {
            "execution": 0
        },
        "154": "// Assume there exists a valid solution\n        int minSum = nums.get(0);\n        int sum = 0;\n        int i = 0;\n        while (i < nums.size()) {\n            sum += nums.get(i);\n            minSum = Math.min(minSum, sum);\n            if (sum < 0) {\n                sum = 0;\n            }\n            i++;\n        }\n        return minSum;",
        "grade-154": {
            "execution": 0
        },
        "190": "int m = nums.size();\n        int ret = Integer.MAX_VALUE;\n        for (int start = 0; start < m; start++) {\n            int sum = 0;\n            for (int i = start; i < m; i++) {\n                sum += nums.get(i);\n                ret = Math.min(ret, sum);\n            }\n        }\n        return ret;",
        "grade-190": {
            "execution": 0
        },
        "172": "// Implement me\n        int minSum = Integer.MAX_VALUE;\n        int sum = 0;\n        int n = nums.size();\n        for (int i = 0; i < n; i++) {\n            sum = 0;\n            for (int j = i; j < n; j++) {\n                sum += nums.get(j);\n                if (sum < minSum)\n                    minSum = sum;\n            }\n        }\n        return minSum;",
        "grade-172": {
            "execution": 0
        },
        "56": "int min = Integer.MAX_VALUE;\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            min = Math.min(min, sum);\n            if (sum < 0) sum = 0;\n        }\n        return min;",
        "grade-56": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given list of integers, return list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static ArrayList<Integer> strangeSortList(ArrayList<Integer> lst) {\n",
        "snippet": [
            "        List<Integer> res = new ArrayList<>();\n        boolean _switch = true;\n        List<Integer> l = new ArrayList<>(lst);\n        while (l.size() != 0) {\n            if (_switch) {\n                res.add(Collections.min(l));\n            } else {\n                res.add(Collections.max(l));\n            }\n            l.remove(res.get(res.size() - 1));\n            _switch = !_switch;\n        }\n        return res;\n    }\n}"
        ],
        "simplified": "Given list of integers, return list in strange order. Strange sorting, is when you start with the minimum value, then maximum of the remaining integers, then minimum and so on.",
        "task_id": "70",
        "170": "if (lst.size() <= 1) {\n            return lst;\n        }\n        ArrayList<Integer> ans = new ArrayList<Integer>();\n        Collections.sort(lst);\n        int n = lst.size();\n        if (n % 2 == 0) {\n            for (int i = 0; i < n / 2; i++) {\n                ans.add(lst.get(i));\n                ans.add(lst.get(n - i - 1));\n            }\n        } else {\n            ans.add(lst.get(0));\n            for (int i = 1; i < n / 2 + 1; i++) {\n                ans.add(lst.get(n - i));\n                ans.add(lst.get(i));\n            }\n        }\n        return ans;",
        "grade-170": {
            "execution": 1
        },
        "28": "if (lst.size() == 0) return lst;\n        ArrayList<Integer> res = new ArrayList<Integer>();\n        boolean isMin = true;\n        while (!lst.isEmpty()) {\n            int min = Integer.MAX_VALUE;\n            int max = Integer.MIN_VALUE;\n            int minPos = -1;\n            int maxPos = -1;\n            for (int i = 0; i < lst.size(); i++) {\n                if (lst.get(i) < min) {\n                    min = lst.get(i);\n                    minPos = i;\n                }\n                if (lst.get(i) > max) {\n                    max = lst.get(i);\n                    maxPos = i;\n                }\n            }\n            if (isMin) {\n                res.add(min);\n                lst.remove(minPos);\n            } else {\n                res.add(max);\n                lst.remove(maxPos);\n            }\n            isMin = !isMin;\n        }\n        return res;",
        "grade-28": {
            "execution": 1
        },
        "6": "// Remove duplicates in list.\n        ArrayList<Integer> tmp = new ArrayList<Integer>();\n        for (int num : lst) {\n            if (!tmp.contains(num)) {\n                tmp.add(num);\n            }\n        }\n        lst = tmp;\n        // Sort list in ascending order.\n        lst.sort(null);\n        // Prepare list for sorting in strange order.\n        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        // Check if list is odd or even in size.\n        int size = lst.size();\n        boolean odd = size % 2 == 1;\n        if (odd) {\n            // Loop half the size of list.\n            for (int i = 0; i < size / 2; i++) {\n                // Add minimum and maximum of list.\n                sorted.add(lst.get(i));\n                sorted.add(lst.get(size - i - 1));\n            }\n            // Remove duplicates from list.\n            for (int i = sorted.size() - 1; i >= 0; i--) {\n                if (sorted.get(i) == sorted.get(sorted.size() - 1)) {\n                    sorted.remove(i);\n                }\n            }\n            // Add minimum of list.\n            sorted.add(lst.get(size / 2));\n        } else {\n            // Loop half the size of list.\n            for (int i = 0; i < size / 2; i++) {\n                // Add minimum and maximum of list.\n                sorted.add(lst.get(i));\n                sorted.add(lst.get(size - i - 1));\n            }\n        }\n        return sorted;",
        "grade-6": {
            "execution": 0
        },
        "198": "Collections.sort(lst);\n        if (lst.size() % 2 == 0) {\n            return strangeSortEven(lst);\n        } else {\n            return strangeSortOdd(lst);\n        }",
        "grade-198": {
            "execution": 0
        },
        "71": "ArrayList<Integer> lst1 = new ArrayList<Integer>();\n        ArrayList<Integer> lst2 = new ArrayList<Integer>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                lst1.add(lst.get(i));\n            } else {\n                lst2.add(lst.get(i));\n            }\n        }\n        Collections.sort(lst1);\n        Collections.sort(lst2);\n        Collections.reverse(lst2);\n        lst.clear();\n        for (int i = 0; i < lst1.size(); i++) {\n            lst.add(lst1.get(i));\n        }\n        for (int i = 0; i < lst2.size(); i++) {\n            lst.add(lst2.get(i));\n        }\n        return lst;",
        "grade-71": {
            "execution": 0
        },
        "63": "if (lst.size() < 2) {\n            return lst;\n        }\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        Collections.sort(lst);\n        int mid = lst.size() / 2;\n        for (int i = 0; i < mid; i++) {\n            result.add(lst.get(i));\n            result.add(lst.get(lst.size() - 1 - i));\n        }\n        if (lst.size() % 2 == 1) {\n            result.add(lst.get(mid));\n        }\n        return result;",
        "grade-63": {
            "execution": 1
        },
        "58": "if (lst.size() == 0) {\n            return lst;\n        }\n        Collections.sort(lst);\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        int pivot = 0;\n        int direction = 1;\n        while (result.size() < lst.size()) {\n            result.add(lst.get(pivot));\n            pivot += direction;\n            direction *= -1;\n        }\n        return result;",
        "grade-58": {
            "execution": 0
        },
        "35": "if (lst.size() == 0) return lst;\n        Collections.sort(lst);\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        int i = 0;\n        int j = lst.size() - 1;\n        boolean go_small = true;\n        while (i < j) {\n            if (go_small) {\n                result.add(lst.get(i));\n                i++;\n            } else {\n                result.add(lst.get(j));\n                j--;\n            }\n            go_small = !go_small;\n        }\n        if (i == j) {\n            result.add(lst.get(i));\n        }\n        return result;",
        "grade-35": {
            "execution": 1
        },
        "196": "// List to return.\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        // If list is empty, return empty list.\n        if (lst.size() == 0) {\n            return result;\n        }\n        // Sort the list.\n        Collections.sort(lst);\n        // Iterate while there are elements in list.\n        while (lst.size() > 0) {\n            // Get minimum value and add it to result.\n            result.add(lst.get(0));\n            // Remove the element from list.\n            lst.remove(0);\n            // If there is still something left in list,\n            // then get maximum value and add it to result.\n            if (lst.size() > 0) {\n                result.add(lst.get(lst.size() - 1));\n                // Remove the element from list.\n                lst.remove(lst.size() - 1);\n            }\n        }\n        // Return the result.\n        return result;",
        "grade-196": {
            "execution": 1
        },
        "26": "// Type your solution here\n        return lst;",
        "grade-26": {
            "execution": 0
        },
        "180": "ArrayList<Integer> list_to_sort = new ArrayList<Integer>(lst);\n        ArrayList<Integer> sorted_list = new ArrayList<Integer>();\n        int max = Collections.max(list_to_sort);\n        int min = Collections.min(list_to_sort);\n        boolean starting_with_min = true;\n        while(list_to_sort.size() > 0) {\n            if(starting_with_min) {\n                sorted_list.add(min);\n                list_to_sort.remove(list_to_sort.indexOf(min));\n                starting_with_min = false;\n            } else {\n                sorted_list.add(max);\n                list_to_sort.remove(list_to_sort.indexOf(max));\n                starting_with_min = true;\n            }\n            if(list_to_sort.size() > 0) {\n                max = Collections.max(list_to_sort);\n                min = Collections.min(list_to_sort);\n            }\n        }\n        return sorted_list;",
        "grade-180": {
            "execution": 0
        },
        "145": "if (lst.size() == 0) return lst;\n        ArrayList<Integer> answer = new ArrayList<Integer>();\n        ArrayList<Integer> lst1 = new ArrayList<Integer>(lst);\n        boolean is_odd = true;\n        while (!lst1.isEmpty()) {\n            Integer max = get_max(lst1);\n            Integer min = get_min(lst1);\n            if (is_odd) {\n                answer.add(min);\n                lst1.remove(min);\n            } else {\n                answer.add(max);\n                lst1.remove(max);\n            }\n            is_odd = !is_odd;\n        }\n        return answer;",
        "grade-145": {
            "execution": 0
        },
        "22": "Collections.sort(lst);\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        boolean is_first = true;\n        while (!lst.isEmpty()) {\n            if (is_first) {\n                result.add(lst.get(0));\n                lst.remove(0);\n                is_first = false;\n            } else {\n                result.add(lst.get(lst.size() - 1));\n                lst.remove(lst.size() - 1);\n                is_first = true;\n            }\n        }\n        return result;",
        "grade-22": {
            "execution": 1
        },
        "157": "ArrayList<Integer> odd = new ArrayList<Integer>();\n        ArrayList<Integer> even = new ArrayList<Integer>();\n        lst.sort(Comparator.naturalOrder());\n        if (lst.size() % 2 == 0) {\n            for (int i = 0; i < lst.size(); i++) {\n                if (i % 2 == 0)\n                    odd.add(lst.get(i));\n                else\n                    even.add(lst.get(i));\n            }\n        } else {\n            for (int i = 0; i < lst.size(); i++) {\n                if (i % 2 == 0)\n                    even.add(lst.get(i));\n                else\n                    odd.add(lst.get(i));\n            }\n        }\n        Collections.reverse(odd);\n        odd.addAll(even);\n        return odd;",
        "grade-157": {
            "execution": 0
        },
        "113": "if (lst.size() <= 1) return lst;\n        ArrayList<Integer> new_lst = new ArrayList<Integer>();\n        int min = Collections.min(lst);\n        lst.remove(lst.indexOf(min));\n        new_lst.add(min);\n        while (lst.size() > 0) {\n            if (lst.size() > 1) {\n                int max = Collections.max(lst);\n                lst.remove(lst.indexOf(max));\n                new_lst.add(max);\n            }\n            if (lst.size() > 0) {\n                int min2 = Collections.min(lst);\n                lst.remove(lst.indexOf(min2));\n                new_lst.add(min2);\n            }\n        }\n        return new_lst;",
        "grade-113": {
            "execution": 1
        },
        "8": "int min = Integer.MAX_VALUE;\n        int max = Integer.MIN_VALUE;\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        ArrayList<Integer> lstCopy = new ArrayList<Integer>(lst);\n        int lstSize = lst.size();\n        while (lstCopy.size() > 0) {\n            for (int i = 0; i < lstCopy.size(); i++) {\n                if (lstCopy.get(i) > max) {\n                    max = lstCopy.get(i);\n                }\n                if (lstCopy.get(i) < min) {\n                    min = lstCopy.get(i);\n                }\n            }\n            result.add(min);\n            result.add(max);\n            lstCopy.remove(new Integer(min));\n            lstCopy.remove(new Integer(max));\n            max = Integer.MIN_VALUE;\n            min = Integer.MAX_VALUE;\n        }\n        return result;",
        "grade-8": {
            "execution": 0
        },
        "7": "ArrayList<Integer> result = new ArrayList<Integer>();\n        if (lst.size() == 0) return result;\n        boolean is_min = true;\n        int min_value = lst.get(0);\n        int max_value = lst.get(0);\n        int min_value_index = 0;\n        int max_value_index = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int current_value = lst.get(i);\n            if (is_min) {\n                if (current_value < min_value) {\n                    min_value = current_value;\n                    min_value_index = i;\n                }\n            } else {\n                if (current_value > max_value) {\n                    max_value = current_value;\n                    max_value_index = i;\n                }\n            }\n        }\n        if (is_min) {\n            result.add(min_value);\n            lst.remove(min_value_index);\n        } else {\n            result.add(max_value);\n            lst.remove(max_value_index);\n        }\n        is_min = !is_min;\n        result.addAll(strangeSortList(lst));\n        return result;",
        "grade-7": {
            "execution": 0
        },
        "23": "if (lst.size() == 0) {\n            return lst;\n        }\n        int min = Collections.min(lst);\n        int max = Collections.max(lst);\n        ArrayList<Integer> res = new ArrayList<Integer>();\n        res.add(min);\n        lst.remove(new Integer(min));\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                res.add(Collections.max(lst));\n                lst.remove(new Integer(Collections.max(lst)));\n            } else {\n                res.add(Collections.min(lst));\n                lst.remove(new Integer(Collections.min(lst)));\n            }\n        }\n        return res;",
        "grade-23": {
            "execution": 0
        },
        "56": "ArrayList<Integer> ans = new ArrayList<Integer>();\n        Collections.sort(lst);\n        while (lst.size() > 0) {\n            if (lst.size() == 1) {\n                ans.add(lst.get(0));\n                lst.remove(0);\n            } else {\n                ans.add(lst.get(0));\n                ans.add(lst.get(lst.size() - 1));\n                lst.remove(0);\n                lst.remove(lst.size() - 1);\n            }\n        }\n        return ans;",
        "grade-56": {
            "execution": 1
        },
        "60": "ArrayList<Integer> new_lst = new ArrayList<Integer>();\n        ArrayList<Integer> copy_lst = new ArrayList<Integer>(lst);\n        Collections.sort(copy_lst);\n        int max = 0;\n        int min = 0;\n        int curr_max = Collections.max(copy_lst);\n        int curr_min = Collections.min(copy_lst);\n        boolean first = true;\n        for (int i = 0; i < lst.size(); i++) {\n            if (first) {\n                first = false;\n                new_lst.add(curr_min);\n                copy_lst.remove(copy_lst.indexOf(curr_min));\n                new_lst.add(curr_max);\n                copy_lst.remove(copy_lst.indexOf(curr_max));\n            } else {\n                new_lst.add(curr_min);\n                copy_lst.remove(copy_lst.indexOf(curr_min));\n                new_lst.add(curr_max);\n                copy_lst.remove(copy_lst.indexOf(curr_max));\n            }\n            curr_max = Collections.max(copy_lst);\n            curr_min = Collections.min(copy_lst);\n        }\n        return new_lst;",
        "grade-60": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given a positive integer n. You have to create an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static int getMaxTriples(int n) {\n",
        "snippet": [
            "        List<Integer> A = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            A.add(i * i - i + 1);\n        }\n        int count = 0;\n        for (int i = 0; i < A.size(); i++) {\n            for (int j = i + 1; j < A.size(); j++) {\n                for (int k = j + 1; k < A.size(); k++) {\n                    if ((A.get(i) + A.get(j) + A.get(k)) % 3 == 0) {\n                        count += 1;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}"
        ],
        "simplified": "You are given a positive integer n. You have to create an integer array a of length n. For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1. Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiple of 3.",
        "task_id": "147",
        "192": "// Idea: we can construct all triples (a[i], a[j], a[k]) with\n        // a[i] = i * i - i + 1\n        // a[j] = j * j - j + 1\n        // a[k] = k * k - k + 1\n        // \n        // and then test each triple to see if it satisfies the problem condition.\n        // For all i, j, k such that 1 \u2264 i, j, k \u2264 n, we have the following constraints\n        // on a[i], a[j], a[k] :\n        // i < j < k\n        // 1 \u2264 a[i] \u2264 a[j] \u2264 a[k] \u2264 n\u00b2 - n + 1\n        // \n        // Using the above constraints, we can iterate over all possible triples in O(n\u00b3) time\n        // and check whether they satisfy the problem condition.\n        // \n        // However, the following optimisations can be made:\n        // - Instead of testing each triple, we can compute the number of triples \n        //   that satisfy the problem condition.\n        // - The problem condition is a[i] + a[j] + a[k] mod 3 = 0. \n        //   We can construct a precomputed table of the remainders of each integer.\n        //   We can then use this precomputed table to test triples in O(1) time.\n        // \n        // Time complexity : O(n\u00b2)\n\n        // Build a table of remainders for each integer.\n        int[] rem = new int[n + 1];\n        for (int i = 1; i <= n; i++) {\n            rem[i] = i * i - i + 1 % 3;\n        }\n\n        // Iterate over triples to see which ones satisfy the problem condition.\n        int maxTriples = 0;\n        for (int i = 1; i <= n; i++) {\n            for (int j = i + 1; j <= n; j++) {\n                for (int k = j + 1; k <= n; k++) {\n                    if ((rem[i] + rem[j] + rem[k]) % 3 == 0) {\n                        max",
        "grade-192": {
            "execution": 0
        },
        "30": "if (n < 3) return 0;\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for (int i = 0; i < n - 2; i++) {\n            for (int j = i + 1; j < n - 1; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) count++;\n                }\n            }\n        }\n        return count;",
        "grade-30": {
            "execution": 0
        },
        "6": "if (n <= 3) return 0;\n        // Since a[i] = i * i - i + 1, and a[i] is an integer, we need i^2 >= 3i + 2.\n        // That is i >= (3 + sqrt(9 - 8)) / 2 ~= 1.9.\n        // As n >= 4, we can safely assume i >= 2.\n        int count = 0;\n        for (int i = 2; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;",
        "grade-6": {
            "execution": 0
        },
        "80": "int sum = 0;\n        for (int i = 1; i < n - 1; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k <= n; k++) {\n                    int x = k * k - k + 1;\n                    int y = j * j - j + 1;\n                    int z = i * i - i + 1;\n                    int triples = x + y + z;\n                    if (triples % 3 == 0) {\n                        sum++;\n                    }\n                }\n            }\n        }\n        return sum;",
        "grade-80": {
            "execution": 1
        },
        "71": "// Write your code here\n        // Return the number of triples.\n        int[] a = new int[n];\n        List<Triplet<Integer, Integer, Integer>> triplets = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        Triplet<Integer, Integer, Integer> triplet = new Triplet<>(a[i], a[j], a[k]);\n                        triplets.add(triplet);\n                    }\n                }\n            }\n        }\n        return triplets.size();",
        "grade-71": {
            "execution": 0
        },
        "65": "if (n < 3) return 0;\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            int a = i * i - i + 1;\n            for (int j = i + 1; j < n; j++) {\n                int b = j * j - j + 1;\n                for (int k = j + 1; k < n; k++) {\n                    int c = k * k - k + 1;\n                    if ((a + b + c) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;",
        "grade-65": {
            "execution": 0
        },
        "38": "if (n <= 2) return 0;\n        List<Integer> nums = new ArrayList<>();\n        for (int i = 1; i <= n; i++) nums.add(i * i - i + 1);\n        Collections.sort(nums);\n        int max = 0;\n        int total = 0;\n        for (int i = 0; i < nums.size() - 2; i++) {\n            int a = nums.get(i);\n            int lo = i + 1;\n            int hi = nums.size() - 1;\n            while (lo < hi) {\n                int b = nums.get(lo);\n                int c = nums.get(hi);\n                int sum = a + b + c;\n                if (sum % 3 == 0) {\n                    max = Math.max(max, sum);\n                    total++;\n                    lo++;\n                    hi--;\n                } else if (sum % 3 == 1) lo++;\n                else hi--;\n            }\n        }\n        return total;",
        "grade-38": {
            "execution": 0
        },
        "28": "if (n < 3) {\n            return 0;\n        }\n        long[][] dp = new long[n + 1][n + 1];\n        long[] array = new long[n + 1];\n        for (int i = 1; i <= n; i++) {\n            array[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            int tmp = 0;\n            for (int j = 1; j <= n; j++) {\n                if (i == j) {\n                    continue;\n                }\n                if ((array[i] + array[j]) % 3 == 0) {\n                    dp[i][j] = 1;\n                    tmp += 1;\n                }\n            }\n            for (int j = 1; j <= n; j++) {\n                if (i == j) {\n                    continue;\n                }\n                for (int k = 1; k <= n; k++) {\n                    if (i == k || j == k) {\n                        continue;\n                    }\n                    if ((array[i] + array[j] + array[k]) % 3 == 0) {\n                        dp[i][j] += dp[j][k];\n                    }\n                }\n                count += tmp * dp[i][j];\n            }\n        }\n        return count;",
        "grade-28": {
            "execution": 0
        },
        "162": "int count = 0;\n        // a[i] is strictly increasing, so all pairs i and j with i < j that a[i] + a[j] % 3 == 0\n        // will be counted.\n        // Given any i, the smallest j for which a[i] + a[j] is a multiple of 3 is j = i + i % 3 + 1\n        // The largest j for which a[i] + a[j] is a multiple of 3 is given by j = n - (n - 1 - i) % 3.\n        // For example, consider i = 2 and n = 5:\n        // a[2] = 7, a[2] + a[3] = 10, a[2] + a[4] = 18. The only j for which a[2] + a[j] is a multiple of 3 is 4.\n        // The largest j such that i < j and a[i] + a[j] is a multiple of 3 is 4.\n        // This means that 7 (a[2]) + the values of a[i] with i < 4 form 4 pairs that are multiples of 3.\n        // The number of pairs that 7 forms with values of a[i] with i < 4 is 3 (i.e. when i = 3, 4, 5).\n        // Thus the number of pairs that are multiples of 3 is (4 - 2) + (3 - 2) = 4.\n        // The count is incremented by 4, and the loop continues with i = 3.\n        // The final count is 5.\n        // Since i is incremented by one each time, the smallest j is equal to i + i % 3 + 1.\n        // Since j is decremented by one each time, the largest j is equal to n - (n - 1 - i) % 3.\n        for (int i = 1; i < n; i++) {\n            int j = i + i % 3 + 1;\n            for (; j <= n - (n - 1 - i) % 3; j++) {\n                count++;\n            }\n        }\n        return count;",
        "grade-162": {
            "execution": 0
        },
        "23": "int []a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int cnt = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        cnt++;\n                    }\n                }\n            }\n        }\n        return cnt;",
        "grade-23": {
            "execution": 0
        },
        "175": "int t = 0;\n        for (int i = 1; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n                        t++;\n                    }\n                }\n            }\n        }\n        return t;",
        "grade-175": {
            "execution": 0
        },
        "125": "int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int res = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        res++;\n                    }\n                }\n            }\n        }\n        return res;",
        "grade-125": {
            "execution": 0
        },
        "8": "int result = 0;\n        List<Integer> a = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            a.add(i * i - i + 1);\n        }\n        // a = [1, 3, 7, 13, 21]\n        // The only valid triple is (1, 7, 13).\n        for (int i = 0; i < a.size(); i++) {\n            for (int j = i + 1; j < a.size(); j++) {\n                for (int k = j + 1; k < a.size(); k++) {\n                    if ((a.get(i) + a.get(j) + a.get(k)) % 3 == 0) {\n                        result++;\n                    }\n                }\n            }\n        }\n        return result;",
        "grade-8": {
            "execution": 1
        },
        "7": "int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        // To get the number of triples, we need to find the number of triples that satisfy\n        // a[i] + a[j] + a[k] = 0 mod 3.\n        // (a[i] + a[j] + a[k]) % 3 = 0 iff (a[i] + a[j]) % 3 = a[k] % 3.\n        // Thus we only need to find the number of pairs i, j such that a[i] % 3 = a[j] % 3,\n        // and a[i] + a[j] = 0 mod 3.\n        // Let cnt_0 = # of a[i] such that a[i] % 3 = 0, and similar for cnt_1 and cnt_2.\n        // Then, let cnt_sum_0 = # of pairs (a[i], a[j]) such that a[i] % 3 = a[j] % 3 = 0,\n        // and a[i] + a[j] = 0 mod 3.\n        // This can be interpreted as the number of ways to pick 2 of cnt_0 from cnt_0, \n        // and the number of ways to pick 2 of cnt_1 from cnt_1, and so on.\n        // Thus cnt_sum_0 = cnt_0 * (cnt_0 - 1) / 2 + cnt_1 * (cnt_1 - 1) / 2 + cnt_2 * (cnt_2 - 1) / 2.\n        // We can do the same for cnt_sum_1 and cnt_sum_2.\n        // The number of triples that sum to 0 mod 3 is cnt_sum_0 * (n - 2).\n        // We can do the same for cnt_sum_1 and cnt_sum_2.\n        // The total number of triples is cnt_sum_0 * (n - 2) + cnt_sum_1 * (n - 2) + cnt_sum_2 * (",
        "grade-7": {
            "execution": 0
        },
        "24": "int[] a = new int[n];\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;",
        "grade-24": {
            "execution": 0
        },
        "63": "// create the first n elements of the series\n        // 1, 3, 7, 13, 21, 31, 43, 57, 73, 91, 111, 133, 157, 183, 211, 241, 273, 307, 343, 381, 421, 463, 507, 553, 601, 651, 703, 757, 813, 871, 931, 993, 1057, 1123, 1191, 1261, 1333, 1407, 1483, 1561, 1641, 1723, 1807, 1891, 1977, 2066, 2157, 2249, 2343, 2439, 2537, 2637, 2739, 2843, 2949, 3057, 3167, 3279, 3393, 3509, 3627, 3747, 3869, 3993, 4119, 4247, 4377, 4509, 4643, 4779, 4917, 5057, 5199, 5343, 5489, 5637, 5787, 5939, 6093, 6249, 6407, 6567, 6729, 6893, 7059, 7227, 7397, 7569, 7743, 7919, 8097, 8277, 8459, 8643, 8829, 9017, 9207, 9399, 9593, 9789, 9987, 10187, 10389, 10593, 10793, 10997, 11203, 11511, 11821, 12133, 12447, 12763, 13081, 13401, 13723, 14047, 14373, 14701, 15031, 15363, 15697, 16033, 16371, 16711, 17053, 17397, 17743, 18091, 18441, 18793, 19147, 19503, 19861, 20221, 20583, 20947, 21313, 21681, 22051, 22423, 22797, 23173, 23541, 23911, 24283, 24657, 25033, 25411, 25791, 26173, 26557, 26943, 27331, 27721, 28113, 28507, 28903, 29301, 29701, 30103, 30507, 30913, 31321, 31731, 32143, 32557, 32973, 33391, 33811, 34233, 34657, 35083",
        "grade-63": {
            "execution": 0
        },
        "67": "// make the array\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        // no need to iterate more than half way through the array because \n        // it will already be checked\n        for (int i = 0; i < n / 2; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if ((a[i] + a[j]) % 3 == 0) {\n                    // only iterate through the numbers ahead of the j value\n                    for (int k = j + 1; k < n; k++) {\n                        if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                            count++;\n                        }\n                    }\n                }\n            }\n        }\n        return count;",
        "grade-67": {
            "execution": 0
        },
        "151": "// Given the size, find the max number of possible triples from a permutation of (1..n)\n        // that satisfy a[i] + a[j] + a[k] % 3 == 0 for i < j < k.\n        // The only variables are the size and the number of elements that satisfy the congruence.\n        // \n        // The max number of values that satisfy a[i] % 3 == 0 is n / 3.\n        // The max number of values that satisfy a[i] % 3 == 1 is n / 3.\n        // The max number of values that satisfy a[i] % 3 == 2 is n / 3.\n        // \n        // The max number of combinations of 3 values that satisfy\n        // (1, 1, 1)\n        // (1, 1, 2)\n        // (1, 2, 2)\n        // (2, 2, 2)\n        // is n choose 3.\n        // \n        // The max number of combinations of 3 values that satisfy\n        // (0, 0, 0)\n        // (0, 0, 1)\n        // (0, 0, 2)\n        // (0, 1, 1)\n        // (0, 1, 2)\n        // (0, 2, 2)\n        // (1, 1, 1)\n        // (1, 1, 2)\n        // (1, 2, 2)\n        // (2, 2, 2)\n        // is (n / 3) choose 3.\n        //\n        // The max number of combinations of 3 values that satisfy\n        // (0, 0, 0)\n        // (0, 0, 1)\n        // (0, 0, 2)\n        // (0, 1, 1)\n        // (0, 1, 2)\n        // (0, 2, 2)\n        // (1, 1, 1)\n        // (1, 1, 2)\n        // (1, 2, 2)\n        // (2, 2, 2)\n        // is (n / 3) choose 3.\n        // \n        // The max number of combinations of 3 values that satisfy\n        // (0, 0, 0)\n        // (0, 0, 1)\n        // (",
        "grade-151": {
            "execution": 0
        },
        "178": "int result = 0;\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        result++;\n                    }\n                }\n            }\n        }\n        return result;",
        "grade-178": {
            "execution": 0
        },
        "166": "int[] a = new int[n];\n        int tripleCount = 0;\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        tripleCount++;\n                    }\n                }\n            }\n        }\n        return tripleCount;",
        "grade-166": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19, 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    // multiply(14,-15) should return 20.\n    public static int multiply(int a, int b) {\n",
        "snippet": [
            "        return Math.abs(a % 10) * Math.abs(b % 10);\n    }\n}"
        ],
        "simplified": "Complete the function that takes two integers and returns the product of their unit digits. Assume the input is always valid.",
        "task_id": "97",
        "38": "int ud_a = a % 10;\n        int ud_b = b % 10;\n        return ud_a * ud_b;",
        "grade-38": {
            "execution": 0
        },
        "7": "if (a < 0) a = -a;\n        if (b < 0) b = -b;\n        return (a % 10) * (b % 10);",
        "grade-7": {
            "execution": 1
        },
        "101": "// Your code here\n        return (Math.abs(a) % 10) * (Math.abs(b) % 10);",
        "grade-101": {
            "execution": 1
        },
        "89": "String aS = String.valueOf(a);\n        String bS = String.valueOf(b);\n        char a1 = aS.charAt(aS.length()-1);\n        char b1 = bS.charAt(bS.length()-1);\n        int a2 = Integer.parseInt(String.valueOf(a1));\n        int b2 = Integer.parseInt(String.valueOf(b1));\n        int result = a2 * b2;\n        return result;",
        "grade-89": {
            "execution": 1
        },
        "82": "return getUnitDigit(a) * getUnitDigit(b);",
        "grade-82": {
            "execution": 0
        },
        "54": "// just multiply the unit digits\n        return a % 10 * b % 10;",
        "grade-54": {
            "execution": 0
        },
        "36": "// if (a == 0 || b == 0) return 0;\n        // return (Math.abs(a) % 10) * (Math.abs(b) % 10);\n        int aUnits = Math.abs(a) % 10;\n        int bUnits = Math.abs(b) % 10;\n        int product = aUnits * bUnits;\n        return product;",
        "grade-36": {
            "execution": 1
        },
        "30": "// Your code here\n        return a%10 * b%10;",
        "grade-30": {
            "execution": 0
        },
        "161": "int aa = a % 10;\n        int bb = b % 10;\n        return aa * bb;",
        "grade-161": {
            "execution": 0
        },
        "9": "int c = Math.abs(a%10);\n        int d = Math.abs(b%10);\n        return (c*d);",
        "grade-9": {
            "execution": 1
        },
        "8": "int sum = 0;\n        int a1 = a % 10;\n        int b1 = b % 10;\n        sum = a1 * b1;\n        return sum;",
        "grade-8": {
            "execution": 0
        },
        "31": "return (a%10)*(b%10);",
        "grade-31": {
            "execution": 0
        },
        "80": "return (int) (a % 10) * (int) (b % 10);",
        "grade-80": {
            "execution": 0
        },
        "85": "int p = a*b;\n        String s = String.valueOf(p);\n        return Integer.parseInt(s.substring(s.length()-1));",
        "grade-85": {
            "execution": 0
        },
        "194": "String c = String.valueOf(a);\n        String d = String.valueOf(b);\n        a = Character.getNumericValue(c.charAt(c.length()-1));\n        b = Character.getNumericValue(d.charAt(d.length()-1));\n        return a*b;",
        "grade-194": {
            "execution": 1
        },
        "75": "// Write your code here\n        int unitA = a % 10;\n        int unitB = b % 10;\n        return unitA * unitB;",
        "grade-75": {
            "execution": 0
        },
        "160": "int prod = Math.abs(a % 10) * Math.abs(b % 10);\n      return prod;",
        "grade-160": {
            "execution": 1
        },
        "81": "if (a < 0) a = -a;\n        if (b < 0) b = -b;\n        return ((a % 10) * (b % 10));",
        "grade-81": {
            "execution": 1
        },
        "171": "int s = Math.abs(a) % 10 * Math.abs(b) % 10;\n        return s;",
        "grade-171": {
            "execution": 0
        },
        "102": "return (a%10) * (b%10);",
        "grade-102": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    public static int addElements(ArrayList<Integer> arr, int k) {\n",
        "snippet": [
            "        arr = arr.subList(0, k);\n        Optional<Integer> sum = arr.stream().filter(p -> String.valueOf(Math.abs(p)).length() <= 2).reduce(Integer::sum);\n        return sum.orElse(0);\n    }\n}"
        ],
        "simplified": "Given a non-empty array of integers arr and an integer k, return the sum of the elements with at most two digits from the first k elements of arr.",
        "task_id": "122",
        "31": "// TODO: Implement your solution here\n        return -1;",
        "grade-31": {
            "execution": 0
        },
        "6": "int s = 0;\n        for (int i = 0; i < k; i++) {\n            int x = arr.get(i);\n            if (x < 100) {\n                s += x;\n            }\n        }\n        return s;",
        "grade-6": {
            "execution": 1
        },
        "81": "int sum = 0;\n        int i = 0;\n        while (i < k) {\n            int digits = 1;\n            int number = arr.get(i);\n            while (number >= 10) {\n                number /= 10;\n                digits++;\n            }\n            if (digits <= 2) {\n                sum += arr.get(i);\n            }\n            i++;\n        }\n        return sum;",
        "grade-81": {
            "execution": 1
        },
        "72": "return arr.stream().limit(k).filter(n -> n < 100).mapToInt(n -> n).sum();",
        "grade-72": {
            "execution": 1
        },
        "65": "int sum = 0;\n        int currentSize = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int current = arr.get(i);\n            if (current < 10) {\n                sum += current;\n                currentSize++;\n            } else if (current >= 10 && current < 100) {\n                sum += current;\n                currentSize++;\n            }\n            if (currentSize == k) {\n                break;\n            }\n        }\n        return sum;",
        "grade-65": {
            "execution": 0
        },
        "40": "int sum = 0;\n        // 1. Get the first k elements of arr\n        // 2. Sum the values that have 2 digits\n        // 3. Return the sum\n        return sum;",
        "grade-40": {
            "execution": 0
        },
        "29": "int sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i) >= 10 && arr.get(i) < 100) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;",
        "grade-29": {
            "execution": 0
        },
        "170": "int sum = 0;\n        for (int i = 0; i < k; i++) {\n            int digitCount = String.valueOf(arr.get(i)).length();\n            if (digitCount <= 2) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;",
        "grade-170": {
            "execution": 1
        },
        "24": "int result = 0;\n        int digits;\n        for (int i = 0; i < k; i++) {\n            digits = arr.get(i).toString().length();\n            if (digits <= 2) {\n                result += arr.get(i);\n            }\n        }\n        return result;",
        "grade-24": {
            "execution": 1
        },
        "188": "Integer sum = 0;\n        ArrayList<Integer> singleDigitArr = new ArrayList<Integer>();\n        ArrayList<Integer> twoDigitArr = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) < 10) {\n                singleDigitArr.add(arr.get(i));\n            } else if (arr.get(i) < 100) {\n                twoDigitArr.add(arr.get(i));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (i < singleDigitArr.size()) {\n                sum += singleDigitArr.get(i);\n            } else if (i - singleDigitArr.size() < twoDigitArr.size()) {\n                sum += twoDigitArr.get(i - singleDigitArr.size());\n            }\n        }\n        return sum;",
        "grade-188": {
            "execution": 0
        },
        "129": "int sum = 0;\n        int i = 0;\n        while (i < k) {\n            int x = arr.get(i);\n            if (x < 100) {\n                sum += x;\n            }\n            i++;\n        }\n        return sum;",
        "grade-129": {
            "execution": 1
        },
        "8": "// replace line below with code\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            int n = arr.get(i);\n            if (n < 100) {\n                sum += n;\n            }\n        }\n        return sum;",
        "grade-8": {
            "execution": 1
        },
        "7": "return arr.stream().limit(k).filter(x -> x < 100).reduce(0, (x, y) -> x + y);",
        "grade-7": {
            "execution": 1
        },
        "25": "throw new UnsupportedOperationException(\"Not yet implemented\");",
        "grade-25": {
            "execution": 0
        },
        "63": "int i = 0;\n        int sum = 0;\n        for (int element : arr) {\n            if (element < 100) {\n                sum += element;\n                i++;\n            }\n            if (i == k) {\n                break;\n            }\n        }\n        return sum;",
        "grade-63": {
            "execution": 0
        },
        "69": "int sum = 0;\n        int i = 0;\n        while (i < k) {\n            int num = arr.get(i);\n            int num_digits = (int) Math.log10(num) + 1;\n            if (num_digits < 3) {\n                sum += num;\n            }\n            i++;\n        }\n        return sum;",
        "grade-69": {
            "execution": 1
        },
        "159": "// We'll just do an O(n) traversal on arr\n        // if arr[i] < 100 then we can add it to the sum\n        // if arr[i] >= 100 then we shouldn't because it's more than 2 digits\n        // if arr[i] < 10 then we should add it to the sum\n        // if i >= k then we should break out of the loop\n        int result = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) < 100 && arr.get(i) >= 10) {\n                result += arr.get(i);\n            }\n            if (i >= k) {\n                break;\n            }\n        }\n        return result;",
        "grade-159": {
            "execution": 0
        },
        "192": "if (arr == null || arr.size() == 0) {\n            return 0;\n        }\n        if (k == 0) {\n            return 0;\n        }\n        int len = arr.size();\n        int answer = 0;\n        int count = 0;\n        for (int i = 0; i < len; i++) {\n            if (arr.get(i) >= 0 && arr.get(i) <= 99) {\n                count++;\n                answer += arr.get(i);\n            }\n            if (count == k) {\n                break;\n            }\n        }\n        return answer;",
        "grade-192": {
            "execution": 0
        },
        "177": "// write your code here\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i) < 100) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;",
        "grade-177": {
            "execution": 1
        },
        "58": "int sum = 0;\n        for (int i = 0; i < k; i++) {\n            int num = arr.get(i);\n            if (num < 100) sum += num;\n        }\n        return sum;",
        "grade-58": {
            "execution": 1
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to implement a function that will simplify the expression\n    // x * n. The function returns True if x * n evaluates to a whole number and False\n    // otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    // <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n    // You can assume that x, and n are valid fractions, and do not have zero as denominator.\n    // simplify(\"1/5\", \"5/1\") = True\n    // simplify(\"1/6\", \"2/1\") = False\n    // simplify(\"7/10\", \"10/2\") = False\n    public static boolean simplify(String x, String n) {\n",
        "snippet": [
            "        String[] a = x.split(\"/\");\n        String[] b = n.split(\"/\");\n        int numerator = Integer.parseInt(a[0]) * Integer.parseInt(b[0]);\n        int denom = Integer.parseInt(a[1]) * Integer.parseInt(b[1]);\n        return numerator / denom * denom == numerator;\n    }\n}"
        ],
        "simplified": "Your task is to implement a function that will simplify the expression x * n. The function returns True if x * n evaluates to a whole number and False otherwise. Both x and n, are string representation of a fraction, and have the following format, <numerator>/<denominator> where both numerator and denominator are positive whole numbers. You can assume that x, and n are valid fractions, and do not have zero as denominator.",
        "task_id": "144",
        "171": "Fraction fx = new Fraction(x);\n        Fraction fn = new Fraction(n);\n        Fraction product = fx.multiply(fn);\n        return product.isWholeNumber();",
        "grade-171": {
            "execution": 0
        },
        "29": "// Your code goes here\n        String[] x_arr = x.split(\"/\");\n        String[] n_arr = n.split(\"/\");\n        int x_n = Integer.parseInt(x_arr[0]);\n        int x_d = Integer.parseInt(x_arr[1]);\n        int n_n = Integer.parseInt(n_arr[0]);\n        int n_d = Integer.parseInt(n_arr[1]);\n        return (x_n * n_d) % (x_d * n_n) == 0;",
        "grade-29": {
            "execution": 0
        },
        "6": "List<Integer> listX = Arrays.stream(x.split(\"/\")).map(Integer::parseInt).collect(Collectors.toList());\n        List<Integer> listN = Arrays.stream(n.split(\"/\")).map(Integer::parseInt).collect(Collectors.toList());\n        int numerator = listX.get(0) * listN.get(1);\n        int denominator = listX.get(1) * listN.get(0);\n        if (numerator == denominator) {\n            return true;\n        }\n        return (numerator % denominator == 0);",
        "grade-6": {
            "execution": 0
        },
        "197": "// Implement me!\n        // eg.\n        // x: 1/5, n: 5/1, return True\n        // x: 1/6, n: 2/1, return False\n        // x: 7/10, n: 10/2, return False\n        Fraction xf = new Fraction(x);\n        Fraction nf = new Fraction(n);\n        if (xf.multiply(nf).denominator == 1) {\n            return true;\n        }\n        return false;",
        "grade-197": {
            "execution": 0
        },
        "74": "// As a first step, you can convert your strings to Fraction objects.\n        // The Fraction class, that implements a fraction,\n        // is provided in the attached test file.\n        Fraction xFraction = new Fraction(x);\n        Fraction nFraction = new Fraction(n);\n        // Then, you can convert a fraction to a double value, using the doubleValue() method.\n        // A fraction x * n is a whole number, if x * n.doubleValue() is a whole number.\n        double xnDouble = xFraction.multiply(nFraction).doubleValue();\n        return xnDouble % 1 == 0;",
        "grade-74": {
            "execution": 0
        },
        "66": "// you code here\n        boolean answer = false;\n        int num1 = Integer.parseInt(x.split(\"/\")[0]);\n        int den1 = Integer.parseInt(x.split(\"/\")[1]);\n        int num2 = Integer.parseInt(n.split(\"/\")[0]);\n        int den2 = Integer.parseInt(n.split(\"/\")[1]);\n        if (num1 * den2 % den1 == 0) {\n            answer = true;\n        }\n        return answer;",
        "grade-66": {
            "execution": 0
        },
        "60": "Fraction fx = new Fraction(x);\n        Fraction fn = new Fraction(n);\n        Fraction result = fx.multiply(fn);\n        return result.getDenominator() == 1;",
        "grade-60": {
            "execution": 0
        },
        "37": "return new Rational(x).multiply(new Rational(n)).isWhole();",
        "grade-37": {
            "execution": 0
        },
        "196": "String[] xArr = x.split(\"/\");\n        String[] nArr = n.split(\"/\");\n        int top = Integer.parseInt(xArr[0]) * Integer.parseInt(nArr[0]);\n        int bottom = Integer.parseInt(xArr[1]) * Integer.parseInt(nArr[1]);\n        return top % bottom == 0;",
        "grade-196": {
            "execution": 1
        },
        "27": "int gcd = gcd(Integer.parseInt(x.split(\"/\")[0]), Integer.parseInt(x.split(\"/\")[1]));\n        x = (Integer.parseInt(x.split(\"/\")[0]) / gcd) + \"/\" + (Integer.parseInt(x.split(\"/\")[1]) / gcd);\n        gcd = gcd(Integer.parseInt(n.split(\"/\")[0]), Integer.parseInt(n.split(\"/\")[1]));\n        n = (Integer.parseInt(n.split(\"/\")[0]) / gcd) + \"/\" + (Integer.parseInt(n.split(\"/\")[1]) / gcd);\n        double x_ = Double.parseDouble(x.split(\"/\")[0]) / Double.parseDouble(x.split(\"/\")[1]);\n        double n_ = Double.parseDouble(n.split(\"/\")[0]) / Double.parseDouble(n.split(\"/\")[1]);\n        if (Math.ceil(x_ * n_) == x_ * n_)\n            return true;\n        return false;",
        "grade-27": {
            "execution": 0
        },
        "181": "// your code goes here\n        String[] xArr = x.split(\"/\");\n        String[] nArr = n.split(\"/\");\n        BigInteger numX = new BigInteger(xArr[0]);\n        BigInteger denX = new BigInteger(xArr[1]);\n        BigInteger numN = new BigInteger(nArr[0]);\n        BigInteger denN = new BigInteger(nArr[1]);\n        BigInteger gcd = numX.gcd(denX);\n        numX = numX.divide(gcd);\n        denX = denX.divide(gcd);\n        gcd = numN.gcd(denN);\n        numN = numN.divide(gcd);\n        denN = denN.divide(gcd);\n        BigInteger numerator = numX.multiply(numN);\n        BigInteger denominator = denX.multiply(denN);\n        if (denominator.equals(numerator)) return true;\n        return false;",
        "grade-181": {
            "execution": 0
        },
        "146": "int xDen = Integer.parseInt(x.split(\"/\")[1]);\n        int nDen = Integer.parseInt(n.split(\"/\")[1]);\n        int den = xDen * nDen;\n        return den % Integer.parseInt(x.split(\"/\")[0]) == 0 && den % Integer.parseInt(n.split(\"/\")[0]) == 0;",
        "grade-146": {
            "execution": 0
        },
        "22": "// Write your code here\n        String[] x_frac = x.split(\"/\");\n        String[] n_frac = n.split(\"/\");\n        int x_numerator = Integer.parseInt(x_frac[0]);\n        int x_denominator = Integer.parseInt(x_frac[1]);\n        int n_numerator = Integer.parseInt(n_frac[0]);\n        int n_denominator = Integer.parseInt(n_frac[1]);\n        int num = x_numerator * n_numerator;\n        int den = x_denominator * n_denominator;\n        if (num % den == 0) {\n            return true;\n        }\n        return false;",
        "grade-22": {
            "execution": 1
        },
        "158": "String[] xs = x.split(\"/\");\n        String[] ns = n.split(\"/\");\n        double dx = Double.parseDouble(xs[0]) / Double.parseDouble(xs[1]);\n        double dn = Double.parseDouble(ns[0]) / Double.parseDouble(ns[1]);\n        double dxs = dx * dn;\n        return dxs == Math.floor(dxs);",
        "grade-158": {
            "execution": 1
        },
        "115": "// Split strings into pairs of numerator and denominator\n        Pair<Integer, Integer> xPair = getPair(x);\n        Pair<Integer, Integer> nPair = getPair(n);\n        // Calculate the product of the pairs (numerator and denominator)\n        int num = xPair.getValue0() * nPair.getValue0();\n        int den = xPair.getValue1() * nPair.getValue1();\n        // Simplify the fraction\n        Pair<Integer, Integer> productPair = simplifyFraction(num, den);\n        // Check if the fraction is a whole number\n        return productPair.getValue1() == 1;",
        "grade-115": {
            "execution": 0
        },
        "8": "return (float) Integer.parseInt(x.split(\"/\")[0]) / Integer.parseInt(x.split(\"/\")[1]) * Integer.parseInt(n.split(\"/\")[0]) / Integer.parseInt(n.split(\"/\")[1]) == (int) (float) Integer.parseInt(x.split(\"/\")[0]) / Integer.parseInt(x.split(\"/\")[1]) * Integer.parseInt(n.split(\"/\")[0]) / Integer.parseInt(n.split(\"/\")[1]);",
        "grade-8": {
            "execution": 0
        },
        "7": "Fraction fx = new Fraction(x);\n        Fraction fn = new Fraction(n);\n        if (fx.getNumerator() * fn.getDenominator() % fx.getDenominator() == 0) {\n            return true;\n        }\n        return false;",
        "grade-7": {
            "execution": 0
        },
        "24": "BigDecimal bx = new BigDecimal(x);\n        BigDecimal bn = new BigDecimal(n);\n        BigDecimal product = bx.multiply(bn);\n        return product.compareTo(product.setScale(0, RoundingMode.FLOOR)) == 0;",
        "grade-24": {
            "execution": 0
        },
        "58": "Fraction fractionX = Fraction.getFractionFromString(x);\n        Fraction fractionN = Fraction.getFractionFromString(n);\n        int multiplicationDenominator = fractionX.denominator * fractionN.denominator;\n        int multiplicationNumerator = fractionX.numerator * fractionN.numerator;\n        return multiplicationDenominator % multiplicationNumerator == 0;",
        "grade-58": {
            "execution": 0
        },
        "62": "String xn = multiply(x, n);\n        System.out.println(xn);\n        String[] xnArray = xn.split(\"/\");\n        BigInteger numerator = new BigInteger(xnArray[0]);\n        BigInteger denominator = new BigInteger(xnArray[1]);\n        BigInteger GCD = numerator.gcd(denominator);\n        if (GCD.equals(denominator)) {\n            return true;\n        }\n        return false;",
        "grade-62": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Integer> derivative(ArrayList<Integer> xs) {\n",
        "snippet": [
            "        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(i * xs.get(i));\n        }\n        return result;\n    }\n}"
        ],
        "simplified": "xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 + .... Return derivative of this polynomial in the same form.",
        "task_id": "62",
        "184": "ArrayList<Integer> ret = new ArrayList<>();\n        if (xs.size() <= 1) {\n            return ret;\n        }\n        for (int i = 1; i < xs.size(); i++) {\n            ret.add(xs.get(i) * i);\n        }\n        return ret;",
        "grade-184": {
            "execution": 1
        },
        "14": "ArrayList<Integer> ys = new ArrayList<Integer>();\n        for (int i = 1; i < xs.size(); i++) {\n            ys.add(xs.get(i) * i);\n        }\n        return ys;",
        "grade-14": {
            "execution": 1
        },
        "3": "ArrayList<Integer> ans = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            ans.add(xs.get(i) * i);\n        }\n        return ans;",
        "grade-3": {
            "execution": 1
        },
        "54": "ArrayList<Integer> ret = new ArrayList<>();\n        int n = xs.size();\n        for (int i = 1; i < n; i++) {\n            ret.add(xs.get(i) * i);\n        }\n        return ret;",
        "grade-54": {
            "execution": 1
        },
        "47": "// return xs;\n        // return new ArrayList<>();\n        if (xs.size() <= 1) return new ArrayList<>();\n        int[] dx = new int[xs.size() - 1];\n        int k = 0;\n        for (int i = 0; i < xs.size() - 1; i++) {\n            dx[k++] = xs.get(i + 1) * (i + 1);\n        }\n        ArrayList<Integer> dxList = new ArrayList<>();\n        for (int i = 0; i < dx.length; i++) {\n            dxList.add(dx[i]);\n        }\n        return dxList;",
        "grade-47": {
            "execution": 1
        },
        "38": "return new ArrayList<Integer>();",
        "grade-38": {
            "execution": 0
        },
        "18": "ArrayList<Integer> ret = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            ret.add(xs.get(i) * i);\n        }\n        return ret;",
        "grade-18": {
            "execution": 1
        },
        "13": "ArrayList<Integer> ans = new ArrayList<>();\n        int n = xs.size();\n        for (int i = 1; i < n; i++) {\n            ans.add(xs.get(i) * i);\n        }\n        return ans;",
        "grade-13": {
            "execution": 1
        },
        "196": "// return (ArrayList<Integer>) xs.stream().mapToInt(e -> e.intValue()).boxed().collect(Collectors.toList());\n        ArrayList<Integer> res = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            res.add(xs.get(i) * i);\n        }\n        return res;",
        "grade-196": {
            "execution": 1
        },
        "153": "ArrayList<Integer> result = new ArrayList<Integer>();\n        int n = xs.size();\n        for (int i = 1; i < n; i++) {\n            result.add(xs.get(i) * i);\n        }\n        return result;",
        "grade-153": {
            "execution": 1
        },
        "11": "ArrayList<Integer> derivative = new ArrayList<Integer>();\n        if (xs.size() < 2) return derivative;\n        int i = 1;\n        while (i < xs.size()) {\n            derivative.add(xs.get(i) * i);\n            i++;\n        }\n        return derivative;",
        "grade-11": {
            "execution": 1
        },
        "174": "ArrayList<Integer> diff = new ArrayList<Integer>();\n        for (int i = 1; i < xs.size(); i++) {\n            diff.add(xs.get(i) * i);\n        }\n        return diff;",
        "grade-174": {
            "execution": 1
        },
        "116": "// ...\n        ArrayList<Integer> ans = new ArrayList<Integer>();\n        for (int i = 1; i < xs.size(); i++) {\n            ans.add(xs.get(i) * i);\n        }\n        return ans;",
        "grade-116": {
            "execution": 1
        },
        "4": "// Fill in the correct implementation.\n        return null;",
        "grade-4": {
            "execution": 0
        },
        "35": "// Write your code here.\n        ArrayList<Integer> solution = new ArrayList<Integer>();\n        for (int i = 1; i < xs.size(); i++) {\n            solution.add(xs.get(i) * i);\n        }\n        return solution;",
        "grade-35": {
            "execution": 1
        },
        "39": "ArrayList<Integer> derivative_xs = new ArrayList<Integer>();\n        for (int i = 1; i < xs.size(); i++) {\n            derivative_xs.add(xs.get(i) * i);\n        }\n        return derivative_xs;",
        "grade-39": {
            "execution": 1
        },
        "137": "ArrayList<Integer> ret = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++)\n            ret.add(xs.get(i) * i);\n        return ret;",
        "grade-137": {
            "execution": 1
        },
        "179": "if (xs.size() == 0) {\n            return new ArrayList<Integer>();\n        }\n        ArrayList<Integer> ret = new ArrayList<Integer>();\n        for (int i = 1; i < xs.size(); i++) {\n            ret.add(xs.get(i) * i);\n        }\n        return ret;",
        "grade-179": {
            "execution": 1
        },
        "160": "ArrayList<Integer> d = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            d.add(xs.get(i) * i);\n        }\n        return d;",
        "grade-160": {
            "execution": 1
        },
        "33": "return null;",
        "grade-33": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> remove_vowels('')\n    // ''\n    // >>> remove_vowels('abcdef')\n    // 'bcdf'\n    // >>> remove_vowels('aaaaa')\n    // ''\n    // >>> remove_vowels('aaBAA')\n    // 'B'\n    // >>> remove_vowels('zbcd')\n    // 'zbcd'\n    public static String removeVowels(String text) {\n",
        "snippet": [
            "        StringBuilder sb = new StringBuilder();\n        for (char ch : text.toCharArray()) {\n            if (\"aeiou\".indexOf(Character.toLowerCase(ch)) == -1) {\n                sb.append(ch);\n            }\n        }\n        return sb.toString();\n    }\n}"
        ],
        "simplified": "remove_vowels is a function that takes string and returns string without vowels.",
        "task_id": "51",
        "118": "// TODO: Implement this method.\n        String str=\"\";\n        StringBuilder sb=new StringBuilder();\n        for(int i=0;i<text.length();i++){\n            char ch=text.charAt(i);\n            if(ch=='a'||ch=='e'||ch=='i'||ch=='o'||ch=='u'||ch=='A'||ch=='E'||ch=='I'||ch=='O'||ch=='U'){\n                sb.append(\"\");\n            }\n            else{\n                sb.append(ch);\n            }\n        }\n        str=sb.toString();\n        return str;",
        "grade-118": {
            "execution": 1
        },
        "16": "// your code here.\n        // Delete these comments and enter your own code.\n        List<Character> vowels = Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U');\n        return text.chars()\n            .mapToObj(i -> (char) i)\n            .filter(i -> !vowels.contains(i))\n            .map(Object::toString)\n            .collect(Collectors.joining());",
        "grade-16": {
            "execution": 1
        },
        "3": "return text.replaceAll(\"[aeiou]\", \"\");",
        "grade-3": {
            "execution": 0
        },
        "142": "StringBuilder str = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) != 'a' && text.charAt(i) != 'A' && text.charAt(i) != 'e' && text.charAt(i) != 'E' && text.charAt(i) != 'i' && text.charAt(i) != 'I' && text.charAt(i) != 'o' && text.charAt(i) != 'O' && text.charAt(i) != 'u' && text.charAt(i) != 'U') {\n                str.append(text.charAt(i));\n            }\n        }\n        return str.toString();",
        "grade-142": {
            "execution": 1
        },
        "46": "String vowelChars = \"aeiouAEIOU\";\n        String ans = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            if (vowelChars.indexOf(text.charAt(i)) == -1) {\n                ans += text.charAt(i);\n            }\n        }\n        return ans;",
        "grade-46": {
            "execution": 1
        },
        "40": "// Implement me!\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            if (!isVowel(text.charAt(i))) {\n                sb.append(text.charAt(i));\n            }\n        }\n        return sb.toString();",
        "grade-40": {
            "execution": 0
        },
        "36": "// TODO: replace this line with your code\n        return null;",
        "grade-36": {
            "execution": 0
        },
        "19": "// TODO\n        return \"\";",
        "grade-19": {
            "execution": 0
        },
        "15": "StringBuilder result = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) != 'a' && text.charAt(i) != 'e' && text.charAt(i) != 'i' && text.charAt(i) != 'o' && text.charAt(i) != 'u') {\n                result.append(text.charAt(i));\n            }\n        }\n        return result.toString();",
        "grade-15": {
            "execution": 0
        },
        "126": "// text: string\n        // return: string\n        return text.replaceAll(\"[aeiouAEIOU]\", \"\");",
        "grade-126": {
            "execution": 1
        },
        "183": "if (text.isEmpty()) {\n            return text;\n        } else {\n            String vowels = \"aeiouAEIOU\";\n            String current = \"\";\n            String remaining = \"\";\n            String remainder = \"\";\n            String initial = \"\";\n            String finals = \"\";\n            String first = \"\";\n            String second = \"\";\n            String third = \"\";\n            String fourth = \"\";\n            String fifth = \"\";\n            String sixth = \"\";\n            String seventh = \"\";\n            String eighth = \"\";\n            String ninth = \"\";\n            String tenth = \"\";\n            String eleventh = \"\";\n            String twelfth = \"\";\n            String thirteenth = \"\";\n            String fourteenth = \"\";\n            String fifteenth = \"\";\n            String sixteenth = \"\";\n            String seventeenth = \"\";\n            String eighteenth = \"\";\n            String nineteenth = \"\";\n            String twentieth = \"\";\n            String twentyfirst = \"\";\n            String twentysecond = \"\";\n            String twentythird = \"\";\n            String twentyfourth = \"\";\n            String twentyfifth = \"\";\n            String twentysixth = \"\";\n            String twentyseventh = \"\";\n            String twentyeighth = \"\";\n            String twentyninth = \"\";\n            String thirtieth = \"\";\n            String thirtyfirst = \"\";\n            String thirtysecond = \"\";\n            String thirtythird = \"\";\n            String thirtyfourth = \"\";\n            String thirtyfifth = \"\";\n            String thirtysixth = \"\";\n            String thirtyseventh = \"\";\n            String thirtyeighth = \"\";\n            String thirtyninth = \"\";\n            String fortieth = \"\";\n            String fortyfirst = \"\";\n            String fortysecond = \"\";\n            String fortythird = \"\";\n            String fortyfourth = \"\";\n            String fortyfifth = \"\";\n            String fortysixth = \"\";\n            String fortyseventh = \"\";\n            String fortyeighth = \"\";\n            String fortyninth = \"\";\n            String fiftieth = \"\";\n            String fiftyfirst = \"\";\n            String fiftysecond = \"\";\n            String fiftythird = \"\";\n            String fiftyfourth = \"\";\n            String fiftyfifth = \"\";",
        "grade-183": {
            "execution": 0
        },
        "99": "List<Character> vowels = new ArrayList<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n        StringBuilder filteredText = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            if (!vowels.contains(text.charAt(i))) {\n                filteredText.append(text.charAt(i));\n            }\n        }\n        return filteredText.toString();",
        "grade-99": {
            "execution": 1
        },
        "12": "String vowels = \"aeiou\";\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            if (vowels.indexOf(text.charAt(i)) == -1) {\n                result.append(text.charAt(i));\n            }\n        }\n        return result.toString();",
        "grade-12": {
            "execution": 0
        },
        "106": "StringBuilder stringBuilder = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                stringBuilder.append(c);\n            }\n        }\n        return stringBuilder.toString();",
        "grade-106": {
            "execution": 0
        },
        "76": "// Your code goes here.\n        StringBuilder sb = new StringBuilder();\n        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        Arrays.sort(vowels);\n        for (char c : text.toCharArray()) {\n            if (Arrays.binarySearch(vowels, c) < 0) {\n                sb.append(c);\n            }\n        }\n        return sb.toString();",
        "grade-76": {
            "execution": 0
        },
        "4": "throw new UnsupportedOperationException(\"Problem.removeVowels is not implemented yet.\");",
        "grade-4": {
            "execution": 0
        },
        "34": "String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (!isVowel(c))\n                result += c;\n        }\n        return result;",
        "grade-34": {
            "execution": 0
        },
        "37": "String vowels = \"aeiouAEIOU\";\n        StringBuilder builder = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            char ch = text.charAt(i);\n            if (vowels.indexOf(ch) == -1) {\n                builder.append(ch);\n            }\n        }\n        return builder.toString();",
        "grade-37": {
            "execution": 1
        },
        "89": "StringBuffer b = new StringBuffer();\n        for (int i = 0; i < text.length(); i++) {\n            if (!isVowel(text.charAt(i))) {\n                b.append(text.charAt(i));\n            }\n        }\n        return b.toString();",
        "grade-89": {
            "execution": 0
        },
        "110": "StringBuilder sb = new StringBuilder();\n        String vowels = \"aeiouAEIOU\";\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (vowels.indexOf(c) == -1) {\n                sb.append(c);\n            }\n        }\n        return sb.toString();",
        "grade-110": {
            "execution": 1
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array of the words.\n    // For example:\n    // words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    // words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    public static ArrayList<String> wordsString(String s) {\n",
        "snippet": [
            "        if (s.length() == 0) {\n            return List.of();\n        }\n        StringBuilder sb = new StringBuilder();\n\n        for (char letter : s.toCharArray()) {\n            if (letter == ',') {\n                sb.append(' ');\n            } else {\n                sb.append(letter);\n            }\n        }\n\n        return new ArrayList<>(Arrays.asList(sb.toString().split(\"\\s+\" )));\n    }\n}"
        ],
        "simplified": "You will be given a string of words separated by commas or spaces. Your task is to split the string into words and return an array of the words.",
        "task_id": "101",
        "32": "var array = new ArrayList<String>();\n        var temp = \"\";\n        var first_letter = false;\n        for (int i = 0; i < s.length(); i++) {\n            if (!first_letter && s.charAt(i) != ' ' && s.charAt(i) != ',') {\n                first_letter = true;\n                temp += s.charAt(i);\n            } else if (first_letter && s.charAt(i) != ' ' && s.charAt(i) != ',') {\n                temp += s.charAt(i);\n            } else if (first_letter && (s.charAt(i) == ' ' || s.charAt(i) == ',')) {\n                array.add(temp);\n                temp = \"\";\n                first_letter = false;\n            }\n        }\n        if (temp != \"\") {\n            array.add(temp);\n        }\n        return array;",
        "grade-32": {
            "execution": 1
        },
        "6": "return new ArrayList<String>(Arrays.asList(s.split(\"\\\\s|,\")));",
        "grade-6": {
            "execution": 0
        },
        "88": "ArrayList<String> array = new ArrayList<String>();\n        String word = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == ' ' || s.charAt(i) == ',') {\n                array.add(word);\n                word = \"\";\n            } else {\n                word += s.charAt(i);\n            }\n        }\n        array.add(word);\n        return array;",
        "grade-88": {
            "execution": 0
        },
        "77": "ArrayList<String> al = new ArrayList<>();\n        if(s.indexOf(\",\") > -1) {\n            String[] t = s.split(\",\");\n            al.addAll(Arrays.asList(t));\n        } else {\n            String[] t = s.split(\" \");\n            al.addAll(Arrays.asList(t));\n        }\n        return al;",
        "grade-77": {
            "execution": 0
        },
        "72": "String[] strings = s.split(\"[, ]+\");\n        ArrayList<String> arrlist = new ArrayList<String>(Arrays.asList(strings));\n        return arrlist;",
        "grade-72": {
            "execution": 0
        },
        "40": "ArrayList<String> words = new ArrayList<String>();\n        String[] tokens = s.split(\"[, ]+\");\n        for (String token : tokens) {\n            words.add(token);\n        }\n        return words;",
        "grade-40": {
            "execution": 0
        },
        "30": "ArrayList<String> res = new ArrayList<String>();\n        for (String w : s.split(\"[ ,]+\")) {\n            res.add(w);\n        }\n        return res;",
        "grade-30": {
            "execution": 0
        },
        "187": "ArrayList<String> arrayList = new ArrayList<String>();\n        String[] str_array = s.split(\"[, ]+\");\n        for (String str : str_array) {\n            arrayList.add(str);\n        }\n        return arrayList;",
        "grade-187": {
            "execution": 0
        },
        "25": "return (ArrayList<String>) Arrays.asList(s.split(\"[, ]+\"));",
        "grade-25": {
            "execution": 0
        },
        "143": "ArrayList<String> ret = new ArrayList<String>();\n        Scanner sc = new Scanner(s);\n        while (sc.hasNext()) {\n            ret.add(sc.next());\n        }\n        return ret;",
        "grade-143": {
            "execution": 0
        },
        "8": "return new ArrayList<String>(Arrays.asList(s.split(\"[ ,]+\")));",
        "grade-8": {
            "execution": 0
        },
        "7": "return new ArrayList<String>(Arrays.asList(s.split(\"\\\\s*(\\\\s|,)\\\\s*\")));",
        "grade-7": {
            "execution": 0
        },
        "27": "ArrayList<String> a = new ArrayList<>();\n        for (String word : s.split(\"[ ,]+\"))\n            a.add(word);\n        return a;",
        "grade-27": {
            "execution": 0
        },
        "70": "ArrayList<String> words = new ArrayList<String>();\n        String current = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == ' ' || s.charAt(i) == ',') {\n                if (current.length() > 0) {\n                    words.add(current);\n                    current = \"\";\n                }\n            } else {\n                current += s.charAt(i);\n            }\n        }\n        if (current.length() > 0) {\n            words.add(current);\n        }\n        return words;",
        "grade-70": {
            "execution": 1
        },
        "74": "return new ArrayList<String>(Arrays.asList(s.split(\"[ ,]\")));",
        "grade-74": {
            "execution": 0
        },
        "172": "ArrayList<String> words = new ArrayList<String>();\n        Pattern p = Pattern.compile(\"\\\\w+\");\n        Matcher m = p.matcher(s);\n        while (m.find()) {\n            words.add(m.group());\n        }\n        return words;",
        "grade-172": {
            "execution": 0
        },
        "195": "// Write your code here\n        return new ArrayList<String>(Arrays.asList(s.split(\"\\\\W+\")));",
        "grade-195": {
            "execution": 0
        },
        "61": "ArrayList<String> res = new ArrayList<String>();\n        String[] arr = s.split(\"[ ,]+\");\n        for (String i : arr)\n            res.add(i);\n        return res;",
        "grade-61": {
            "execution": 0
        },
        "142": "ArrayList<String> result = new ArrayList<String>();\n        // We need to remove all the spaces or commas at the start and end of the string.\n        // Split on \",\" or \" \"\n        String trimmedString = s.trim();\n        String[] words = trimmedString.split(\"[, ]+\");\n        for (String word : words) {\n            result.add(word);\n        }\n        return result;",
        "grade-142": {
            "execution": 0
        },
        "71": "ArrayList<String> list = new ArrayList<String>();\n        String[] words = s.split(\" |,\");\n        for (String word : words) {\n            list.add(word);\n        }\n        return list;",
        "grade-71": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // This function takes two positive numbers x and y and returns the\n    // biggest even integer number that is in the range [x, y] inclusive. If \n    // there's no such number, then the function should return -1.\n    // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n    public static int chooseNum(int x, int y) {\n",
        "snippet": [
            "        if (x > y) {\n            return -1;\n        }\n        if (y % 2 == 0) {\n            return y;\n        }\n        if (x == y) {\n            return -1;\n        }\n        return y - 1;\n    }\n}"
        ],
        "simplified": "This function takes two positive numbers x and y and returns the biggest even integer number that is in the range [x, y] inclusive. If there's no such number, then the function should return -1.",
        "task_id": "102",
        "28": "return -1;",
        "grade-28": {
            "execution": 0
        },
        "6": "int min = Math.min(x, y);\n        int max = Math.max(x, y);\n        for (int i = max; i >= min; i--) {\n            if (i % 2 == 0) {\n                return i;\n            }\n        }\n        return -1;",
        "grade-6": {
            "execution": 0
        },
        "86": "int i = x;\n        while (i <= y) {\n            if (i % 2 == 0) {\n                return i;\n            }\n            i++;\n        }\n        return -1;",
        "grade-86": {
            "execution": 0
        },
        "77": "if (x % 2 == 0) {\n            return x > y ? -1 : x;\n        } else {\n            return y % 2 == 0 ? y : -1;\n        }",
        "grade-77": {
            "execution": 0
        },
        "70": "if (x % 2 == 0)\n            return Math.max(x, y);\n        return Math.max(x - 1, y);",
        "grade-70": {
            "execution": 0
        },
        "35": "// (write your code here)\n        return Stream.iterate(x, i -> i < y, i -> i + 1).filter(i -> i % 2 == 0).max(Integer::compare).orElse(-1);",
        "grade-35": {
            "execution": 0
        },
        "26": "return IntStream.rangeClosed(x, y).filter(n -> n % 2 == 0).max().orElse(-1);",
        "grade-26": {
            "execution": 1
        },
        "175": "// TODO: Your code here\n        return 0;",
        "grade-175": {
            "execution": 0
        },
        "22": "if (x == y) {\n            if (x % 2 == 0) {\n                return x;\n            } else {\n                return -1;\n            }\n        }\n        if (x > y) {\n            int t = x;\n            x = y;\n            y = t;\n        }\n        if (x % 2 == 0) {\n            return y;\n        } else {\n            return y - 1;\n        }",
        "grade-22": {
            "execution": 0
        },
        "191": "return Stream.iterate(x, a -> a + 1).limit(y - x + 1).filter(a -> a % 2 == 0).max(Integer::compare).orElse(-1);",
        "grade-191": {
            "execution": 0
        },
        "139": "// Your code here!\n        if (x%2==0) {\n            return x;\n        } else if (x%2!=0) {\n            return x+1;\n        } else {\n            return -1;\n        }",
        "grade-139": {
            "execution": 0
        },
        "8": "// The number of even numbers in the range [x, y] inclusive is:\n        // num_even = (y - x + 1)/2\n        // The biggest even number in the range [x, y] inclusive is:\n        // num_biggest = x + 2*(num_even - 1)\n        // Proof: Say we have x = 12, y = 14.\n        // The number of even numbers in [12, 14] is 2.\n        // The biggest even number in [12, 14] is 12 + 2*(2 - 1) = 14.\n        // Say we have x = 12, y = 15.\n        // The number of even numbers in [12, 15] is 3.\n        // The biggest even number in [12, 15] is 12 + 2*(3 - 1) = 16.\n        // Say we have x = 12, y = 16.\n        // The number of even numbers in [12, 16] is 4.\n        // The biggest even number in [12, 16] is 12 + 2*(4 - 1) = 18.\n        int num_even = (y - x + 1)/2;\n        int num_biggest = x + 2*(num_even - 1);\n        if (num_even == 0) {\n            return -1;\n        } else {\n            return num_biggest;\n        }",
        "grade-8": {
            "execution": 0
        },
        "7": "// WRITE YOUR CODE HERE\n        int ans = 0;\n        if (x % 2 == 0) {\n            ans = x;\n        } else {\n            ans = x + 1;\n        }\n        if (ans <= y) {\n            return ans;\n        } else {\n            return -1;\n        }",
        "grade-7": {
            "execution": 0
        },
        "23": "return IntStream.rangeClosed(x, y).filter(v -> v % 2 == 0).max().orElse(-1);",
        "grade-23": {
            "execution": 1
        },
        "68": "int result = -1;\n        // int low = Math.min(x, y);\n        // int high = Math.max(x, y);\n        // for (int i = low; i <= high; i++) {\n        //     if (i % 2 == 0) {\n        //         result = i;\n        //     }\n        // }\n        for (int i = Math.min(x, y); i <= Math.max(x, y); i++) {\n            if (i % 2 == 0) {\n                result = i;\n            }\n        }\n        return result;",
        "grade-68": {
            "execution": 0
        },
        "72": "int r = -1;\n        for (int i = x; i <= y; i++) {\n            if (i % 2 == 0) {\n                r = i;\n            }\n        }\n        return r;",
        "grade-72": {
            "execution": 1
        },
        "165": "int big = Math.max(x, y);\n        int small = Math.min(x, y);\n        for (int i = big; i >= small; i--) {\n            if (i % 2 == 0) {\n                return i;\n            }\n        }\n        return -1;",
        "grade-165": {
            "execution": 0
        },
        "194": "for (int n = y; n >= x; n--) {\n            if (n % 2 == 0) {\n                return n;\n            }\n        }\n        return -1;",
        "grade-194": {
            "execution": 1
        },
        "180": "int diff = y - x;\n        if (diff < 0) return -1;\n        int index = diff % 2 == 0 ? diff : diff - 1;\n        int result = x + index;\n        return result % 2 == 0 ? result : -1;",
        "grade-180": {
            "execution": 0
        },
        "59": "// Your implementation goes here\n        if (x % 2 == 0) {\n            return x;\n        } else if (x + 1 < y) {\n            return x + 1;\n        } else {\n            return -1;\n        }",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    // >>> prime_fib(1)\n    // 2\n    // >>> prime_fib(2)\n    // 3\n    // >>> prime_fib(3)\n    // 5\n    // >>> prime_fib(4)\n    // 13\n    // >>> prime_fib(5)\n    // 89\n    public static int primeFib(int n) {\n",
        "snippet": [
            "        int f0 = 0, f1 = 1;\n        while (true) {\n            int p = f0 + f1;\n            boolean is_prime = p >= 2;\n            for (int k = 2; k < Math.min(Math.sqrt(p) + 1, p - 1); k++) {\n                if (p % k == 0) {\n                    is_prime = false;\n                    break;\n                }\n            }\n            if (is_prime) {\n                n -= 1;\n            }\n            if (n == 0) {\n                return p;\n            }\n            f0 = f1;\n            f1 = p;\n        }\n    }\n}"
        ],
        "simplified": "prime_fib returns n-th number that is a Fibonacci number and it's also prime.",
        "task_id": "39",
        "170": "// Your code goes here\n        int i = 0;\n        int f0 = 0;\n        int f1 = 1;\n        int f2 = 1;\n        while (true) {\n            if (f2 > 1 && isPrime(f2)) {\n                i += 1;\n                if (i == n) return f2;\n            }\n            f0 = f1;\n            f1 = f2;\n            f2 = f0 + f1;\n        }",
        "grade-170": {
            "execution": 0
        },
        "28": "if (n < 1)\n            throw new IllegalArgumentException(\"n should be greater than or equal to 1\");\n        ArrayList<Integer> fibs = new ArrayList<Integer>();\n        fibs.add(2);\n        fibs.add(3);\n        int i = 2;\n        while (fibs.size() < n) {\n            BigInteger next = BigInteger.valueOf(fibs.get(i - 1)).add(BigInteger.valueOf(fibs.get(i - 2)));\n            if (next.isProbablePrime(16))\n                fibs.add(next.intValue());\n            i += 1;\n        }\n        return fibs.get(n - 1);",
        "grade-28": {
            "execution": 0
        },
        "6": "int num1 = 0;\n        int num2 = 1;\n        int num;\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            num = num1 + num2;\n            num1 = num2;\n            num2 = num;\n            if (isPrime(num)) {\n                count++;\n            }\n            if (count == n) {\n                return num;\n            }\n        }\n        return 0;",
        "grade-6": {
            "execution": 0
        },
        "199": "if (n == 1) return 2;\n        if (n == 2) return 3;\n        int a = 1;\n        int b = 1;\n        int c = 2;\n        int i = 3;\n        while (true) {\n            int next = a + b;\n            a = b;\n            b = c;\n            c = next;\n            if (isPrime(c)) {\n                i += 1;\n                if (i == n) return c;\n            }\n        }",
        "grade-199": {
            "execution": 0
        },
        "73": "if (n == 1) {\n            return 2;\n        }\n        int sum = 0;\n        int i = 1;\n        int j = 2;\n        for (int k = 1; k < n; k++) {\n            sum = i + j;\n            i = j;\n            j = sum;\n        }\n        return sum;",
        "grade-73": {
            "execution": 0
        },
        "65": "ArrayList<Integer> fibs = new ArrayList<Integer>();\n        fibs.add(2);\n        fibs.add(3);\n        int i = 2;\n        while (fibs.size() < n) {\n            int a = fibs.get(i - 1);\n            int b = fibs.get(i - 2);\n            int f = a + b;\n            if (isPrime(f)) {\n                fibs.add(f);\n            }\n            i += 1;\n        }\n        return fibs.get(n - 1);",
        "grade-65": {
            "execution": 0
        },
        "59": "int fib = 2;\n        int fib1 = 2;\n        int fib2 = 3;\n        int count = 1;\n        while (count < n) {\n            fib = fib1 + fib2;\n            fib1 = fib2;\n            fib2 = fib;\n            if (isPrime(fib)) {\n                count++;\n            }\n        }\n        return fib;",
        "grade-59": {
            "execution": 0
        },
        "35": "// your code here\n        long first = 1;\n        long second = 1;\n        int i = 2;\n        long fib;\n        for (;;) {\n            fib = first + second;\n            if (isPrime(fib)) {\n                i++;\n                if (i == n) {\n                    return (int) fib;\n                }\n            }\n            first = second;\n            second = fib;\n        }",
        "grade-35": {
            "execution": 0
        },
        "198": "int curr = 2;\n        int cnt = 0;\n        int i = 1;\n        int prev = 1;\n        while (cnt != n) {\n            if (isPrime(curr)) {\n                cnt++;\n            }\n            int tmp = curr;\n            curr = curr + prev;\n            prev = tmp;\n            i++;\n        }\n        return curr;",
        "grade-198": {
            "execution": 0
        },
        "26": "// YOUR CODE HERE\n        return 0;",
        "grade-26": {
            "execution": 0
        },
        "183": "int i = 1;\n        int j = 1;\n        int idx = 0;\n        for (int x = 1; x < n; x++) {\n            if (i == 1) {\n                idx = 2;\n            } else {\n                idx = i + j;\n            }\n            j = i;\n            i = idx;\n        }\n        return idx;",
        "grade-183": {
            "execution": 0
        },
        "144": "// TODO: Please implement this method.\n        if (n == 1) return 2;\n        int a = 2, b = 3, c = 5;\n        for (int i = 4; i <= n; i++) {\n            a = b;\n            b = c;\n            c = a + b;\n            while (!isPrime(c)) {\n                a = b;\n                b = c;\n                c = a + b;\n            }\n        }\n        return c;",
        "grade-144": {
            "execution": 0
        },
        "22": "int index = 2;\n        int result = 0;\n        boolean found = false;\n        if (n == 1) {\n            return 2;\n        }\n        if (n == 2) {\n            return 3;\n        }\n        int num1 = 1;\n        int num2 = 1;\n        int temp = 1;\n        while (!found) {\n            temp = num1 + num2;\n            num1 = num2;\n            num2 = temp;\n            if (isPrime(temp)) {\n                index++;\n            }\n            if (index == n) {\n                result = temp;\n                found = true;\n            }\n        }\n        return result;",
        "grade-22": {
            "execution": 0
        },
        "158": "int i = 2;\n        int ans = 0;\n        int fib = fib(i);\n        int tmp = fib;\n        int count = 0;\n        for (int j = 0; j < n - 1; ++j) {\n            ans = fib;\n            fib = fib + tmp;\n            tmp = ans;\n        }\n        while (count < n) {\n            if (isPrime(fib)) {\n                count++;\n            }\n            fib = fib + tmp;\n            tmp = ans;\n            ans = fib - tmp;\n        }\n        return fib;",
        "grade-158": {
            "execution": 0
        },
        "112": "int i = 0;\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        while (i < n) {\n            c = a + b;\n            a = b;\n            b = c;\n            if (isPrime(c)) {\n                i++;\n            }\n        }\n        return c;",
        "grade-112": {
            "execution": 0
        },
        "8": "int a = 2;\n        int b = 3;\n        int count = 2;\n        while (true) {\n            int c = a + b;\n            if (isPrime(c)) {\n                count++;\n                if (count == n) {\n                    return c;\n                }\n            }\n            a = b;\n            b = c;\n        }",
        "grade-8": {
            "execution": 0
        },
        "7": "int[] fibs = { 2, 3, 5, 13, 89 };\n        if (n > 5) {\n            if (n > 45) {\n                throw new IllegalArgumentException();\n            }\n            return fibs[n - 6];\n        }\n        return fibs[n - 1];",
        "grade-7": {
            "execution": 0
        },
        "23": "int a = 2;\n        int b = 3;\n        int primeFib = 0;\n        int counter = 1;\n        while (counter < n) {\n            primeFib = b;\n            int c = a + b;\n            a = b;\n            b = c;\n            while (!isPrime(b)) {\n                b += c;\n            }\n            counter++;\n        }\n        return primeFib;",
        "grade-23": {
            "execution": 0
        },
        "57": "int fib = 1;\n      int prev = 0;\n      int idx = 0;\n      for (int i = 0; i < n; i++) {\n        if (isPrime(fib)) idx++;\n        if (idx == n) return fib;\n        int tmp = fib;\n        fib += prev;\n        prev = tmp;\n      }\n      return -1;",
        "grade-57": {
            "execution": 0
        },
        "61": "int first = 1;\n        int second = 1;\n        int counter = 1;\n        int number = 1;\n        int temp = 0;\n        while (counter < n) {\n            if (isPrime(number)) {\n                counter++;\n            }\n            temp = second;\n            second = first + second;\n            first = temp;\n            number = second;\n        }\n        return number;",
        "grade-61": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n    public static boolean isEqualToSumEven(int n) {\n",
        "snippet": [
            "        return n % 2 == 0 && n >= 8;\n    }\n}"
        ],
        "simplified": "Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers",
        "task_id": "138",
        "30": "int a, b, c, d;\n        for (a = 0; a <= n; a += 2) {\n            for (b = 0; b <= n; b += 2) {\n                for (c = 0; c <= n; c += 2) {\n                    for (d = 0; d <= n; d += 2) {\n                        if (a + b + c + d == n) {\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n        return false;",
        "grade-30": {
            "execution": 0
        },
        "6": "if (n % 2 != 0) {\n            return false;\n        }\n        // Create a list of all even numbers smaller than n\n        List<Integer> evens = IntStream.range(2, n).filter(x -> x % 2 == 0).boxed().collect(Collectors.toList());\n        // Check whether the list contains n and if so, return true\n        return evens.contains(n);",
        "grade-6": {
            "execution": 0
        },
        "79": "// We are given that the number is positive, so we can assume this\n        // We also know that the number is even, so we can assume this\n        // And as even numbers are divisible by 2, we can also assume this\n\n        // I'm going to start by making a greedy algorithm.\n        // As the only even numbers we can add are 2, 4, 6, ..., n\n        // we can start by adding the largest number we can,\n        // and then subtract it from the total, then repeat.\n        // This is efficient because it only requires O(n) steps.\n        // We will stop early if we go over n by more than 2\n\n        int sum = 0;\n        for (int i = n; i >= 2; i -= 2) {\n            if (sum + i <= n) {\n                sum += i;\n            }\n        }\n\n        return sum == n;",
        "grade-79": {
            "execution": 0
        },
        "71": "return n % 2 == 0 && n >= 8;",
        "grade-71": {
            "execution": 1
        },
        "65": "if (n % 2 != 0) {\n            return false;\n        }\n        int sum = 0;\n        for (int i = 0; i < 4; i++) {\n            sum += 2;\n        }\n        return sum == n;",
        "grade-65": {
            "execution": 0
        },
        "37": "if (n % 2 != 0) return false;\n        for (int a = 2; a <= n / 4; a += 2) {\n            for (int b = a; b <= n / 3; b += 2) {\n                for (int c = b; c <= n / 2; c += 2) {\n                    int d = n - a - b - c;\n                    if (d % 2 == 0 && a + b + c + d == n) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;",
        "grade-37": {
            "execution": 1
        },
        "28": "boolean result=false;\n      if(n==0) return true;\n      if(n%2!=0) return false;\n      n=n/2;\n      int fact=1;\n      while(n!=0){\n        fact=fact*n;\n        n--;\n      }\n      return fact%4==0;",
        "grade-28": {
            "execution": 1
        },
        "182": "return IntStream.rangeClosed(1, n/2).filter(x -> x % 2 == 0).anyMatch(x -> IntStream.rangeClosed(1, n/2).filter(y -> y % 2 == 0).anyMatch(y -> IntStream.rangeClosed(1, n/2).filter(z -> z % 2 == 0).anyMatch(z -> IntStream.rangeClosed(1, n/2).filter(w -> w % 2 == 0).anyMatch(w -> x + y + z + w == n))));",
        "grade-182": {
            "execution": 1
        },
        "23": "// return 1;\n        // return n == 8;\n        // return n % 2 == 0;\n        // return n == 4;\n        // return n % 4 == 0;\n        // return n >= 0;\n        // return n > 0;\n        // return n >= 8;\n        // return n == 4 || n == 8;\n        // return n % 4 == 0 || n % 8 == 0;\n        // return n % 4 == 0 && n % 8 == 0;\n        // return n % 4 == 0 || n % 4 == 8;\n        // return n % 4 == 0 && n == 8;\n        // return n % 4 == 0 && n % 8 == 0;\n        // return n % 4 == 0 || n % 8 == 0;\n        // return n % 4 == 0 && n == 8;\n        // return n % 4 == 0 && n == 8;\n        // return n == 2 || n == 4 || n == 6 || n == 8;\n        // return n == 2 || n == 4 || n == 6 || n == 8;\n        // return n == 2 || n == 4 || n == 6 || n == 8;\n        // return n == 2 || n == 4 || n == 6 || n == 8;\n        // return n % 2 == 0 && n % 4 == 0 && n % 6 == 0 && n % 8 == 0;\n        // return n % 2 == 0 && n % 4 == 0 && n % 6 == 0 && n % 8 == 0;\n        // return n % 2 == 0 && n % 4 == 0 && n % 6 == 0 && n % 8 == 0;\n        // return n % 2 == 0 && n % 4 == 0 && n % 6 == 0 && n % 8 == 0;\n        // return n % 2 == 0 && n % 4 == 0 && n % 6 == 0 && n % 8 == 0;\n        // return n % 2 == 0 && n % 4 == 0 && n % 6 == 0 && n % 8 == 0;\n        // return n % 2 == 0 && n % 4 == 0 && n % 6 == 0 && n % 8 == 0;\n        // return n % 2 == 0 && n % 4 == 0 && n % 6 == 0 && n % 8 == 0;\n        // return n % 2 ==",
        "grade-23": {
            "execution": 0
        },
        "194": "// Fill in the code here",
        "grade-194": {
            "execution": 0
        },
        "130": "boolean isPossible = false;\n        List<Integer> evenNumbers = new ArrayList<>();\n        // find all numbers that are less than n and are even\n        for (int i = 2; i < n; i++) {\n            if (i % 2 == 0) {\n                evenNumbers.add(i);\n            }\n        }\n        List<int[]> pairs = new ArrayList<>();\n        // find pairs of even numbers that add up to less than n\n        for (int i = 0; i < evenNumbers.size(); i++) {\n            for (int j = i + 1; j < evenNumbers.size(); j++) {\n                if (evenNumbers.get(i) + evenNumbers.get(j) < n) {\n                    pairs.add(new int[]{evenNumbers.get(i), evenNumbers.get(j)});\n                }\n            }\n        }\n        // check whether each even number can be divided into a sum of three pairs\n        for (int i = 0; i < evenNumbers.size(); i++) {\n            int evenNumber = evenNumbers.get(i);\n            int sum = 0;\n            int pairIndex = 0;\n            boolean found = false;\n            // go through each pair, and see if the sum of three pairs equals the current even number\n            while (pairIndex < pairs.size() && !found) {\n                sum = 0;\n                for (int[] pair : pairs) {\n                    sum += pair[0] + pair[1];\n                    if (sum == evenNumber) {\n                        found = true;\n                        break;\n                    }\n                }\n                pairIndex++;\n            }\n            if (found) {\n                isPossible = true;\n                break;\n            }\n        }\n        return isPossible;",
        "grade-130": {
            "execution": 0
        },
        "8": "if (n < 0) {\n            throw new RuntimeException(\"Input has to be positive\");\n        }\n\n        int k = 4;\n\n        if (n % 2 != 0) {\n            return false;\n        }\n\n        n = n / 2;\n\n        // dynamic programming\n        boolean[][] dp = new boolean[n + 1][k + 1];\n\n        for (int i = 0; i <= n; i++) {\n            for (int j = 0; j <= k; j++) {\n                if (j == 0) {\n                    dp[i][j] = true;\n                } else if (i < j) {\n                    dp[i][j] = false;\n                } else if (j == 1) {\n                    dp[i][j] = i % 2 == 0;\n                } else {\n                    dp[i][j] = (dp[i - 2][j - 1] || dp[i - 1][j]);\n                }\n            }\n        }\n\n        return dp[n][k];",
        "grade-8": {
            "execution": 0
        },
        "7": "// your code here...",
        "grade-7": {
            "execution": 0
        },
        "24": "// You have to complete this method\n        int i,j,k,l;\n        for(i=0;i<=n;i+=2)\n        {\n            for(j=0;j<=n;j+=2)\n            {\n                for(k=0;k<=n;k+=2)\n                {\n                    for(l=0;l<=n;l+=2)\n                    {\n                        if(i+j+k+l==n)\n                        {\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n        return false;",
        "grade-24": {
            "execution": 0
        },
        "62": "return isEqualToSumEven(n, 3);",
        "grade-62": {
            "execution": 0
        },
        "67": "for (int k1 = 0; k1 <= n; k1++) {\n            for (int k2 = 0; k2 <= n; k2++) {\n                for (int k3 = 0; k3 <= n; k3++) {\n                    for (int k4 = 0; k4 <= n; k4++) {\n                        if (k1 + k2 + k3 + k4 == n)\n                            return true;\n                    }\n                }\n            }\n        }\n        return false;",
        "grade-67": {
            "execution": 0
        },
        "167": "// TODO: YOUR CODE HERE\n        return false;",
        "grade-167": {
            "execution": 0
        },
        "197": "boolean result = false;\n        int i = 2;\n        int m = 0;\n        for (; m < n; i += 2) {\n            m += i;\n        }\n        if (m == n) {\n            result = true;\n        }\n        return result;",
        "grade-197": {
            "execution": 0
        },
        "186": "throw new RuntimeException(\"Method not implemented\");",
        "grade-186": {
            "execution": 0
        },
        "56": "return n == 4;",
        "grade-56": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    public static ArrayList<Integer> parseMusic(String music_string) {\n",
        "snippet": [
            "        String[] notes = string.split(\" \");\n        List<Integer> result = new ArrayList<>();\n        for (String s : notes) {\n            switch (s) {\n                case \"o\" -> result.add(4);\n                case \"o|\" -> result.add(2);\n                case \".|\" -> result.add(1);\n            }\n        }\n        return result;\n    }\n}"
        ],
        "simplified": "Input to this function is a string representing musical notes in a special ASCII format. Your task is to parse this string and return list of integers corresponding to how many beats does each not last. Here is a legend: 'o' - whole note, lasts four beats 'o|' - half note, lasts two beats '.|' - quater note, lasts one beat",
        "task_id": "17",
        "178": "// return new ArrayList<>();\n        var result = new ArrayList<Integer>();\n        for (int i = 0; i < music_string.length(); i++) {\n            char c = music_string.charAt(i);\n            if (c == 'o') {\n                result.add(4);\n            } else if (c == '|') {\n                result.add(1);\n            } else if (c == '.') {\n                result.add(2);\n            }\n        }\n        return result;",
        "grade-178": {
            "execution": 0
        },
        "30": "ArrayList<Integer> res = new ArrayList<>();\n        String[] notes = music_string.split(\" \");\n        for (String note : notes) {\n            if (note.equals(\"o\")) {\n                res.add(4);\n            } else if (note.equals(\"o|\")) {\n                res.add(2);\n            } else if (note.equals(\".|\")) {\n                res.add(1);\n            }\n        }\n        return res;",
        "grade-30": {
            "execution": 1
        },
        "6": "ArrayList<Integer> beats = new ArrayList<Integer>();\n        String[] notes = music_string.split(\" \");\n        for (String note : notes) {\n            char lastCharacter = note.charAt(note.length() - 1);\n            if (lastCharacter == 'o') {\n                beats.add(4);\n            } else if (lastCharacter == '|') {\n                beats.add(2);\n            } else {\n                beats.add(1);\n            }\n        }\n        return beats;",
        "grade-6": {
            "execution": 0
        },
        "76": "final int WHOLE_NOTE = 4;\n        final int HALF_NOTE = 2;\n        final int QUARTER_NOTE = 1;\n        final char WHOLE_NOTE_CHAR = 'o';\n        final char HALF_NOTE_CHAR = '|';\n        final char QUARTER_NOTE_CHAR = '.';\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        char[] music = music_string.toCharArray();\n        int index = 0;\n        for (int i = 0; i < music.length; i++) {\n            if (music[i] == WHOLE_NOTE_CHAR) {\n                result.add(WHOLE_NOTE);\n            } else if (music[i] == HALF_NOTE_CHAR) {\n                result.add(HALF_NOTE);\n            } else if (music[i] == QUARTER_NOTE_CHAR) {\n                result.add(QUARTER_NOTE);\n            }\n        }\n        return result;",
        "grade-76": {
            "execution": 0
        },
        "67": "ArrayList<Integer> duration = new ArrayList<Integer>();\n        StringBuilder sb = new StringBuilder();\n        String[] music = music_string.split(\" \");\n        for (String note : music) {\n            if (note.equals(\"o\")) {\n                duration.add(4);\n            } else if (note.equals(\"o|\")) {\n                duration.add(2);\n            } else if (note.equals(\".|\")) {\n                duration.add(1);\n            }\n        }\n        return duration;",
        "grade-67": {
            "execution": 1
        },
        "61": "ArrayList<Integer> notes = new ArrayList<Integer>();\n        String[] split_notes = music_string.split(\" \");\n        for (String note : split_notes) {\n            if (note.equals(\"o\")) {\n                notes.add(4);\n            } else if (note.equals(\"o|\")) {\n                notes.add(2);\n            } else if (note.equals(\".|\")) {\n                notes.add(1);\n            }\n        }\n        return notes;",
        "grade-61": {
            "execution": 1
        },
        "37": "ArrayList<Integer> ret = new ArrayList<Integer>();\n\t// TODO: your code here.\n\tStringTokenizer st = new StringTokenizer(music_string);\n\twhile (st.hasMoreTokens()) {\n\t    String cur = st.nextToken();\n\t    ret.add(cur.length());\n\t}\n\treturn ret;",
        "grade-37": {
            "execution": 0
        },
        "28": "ArrayList<Integer> notes = new ArrayList<Integer>();\n        // Write your code here!\n        return notes;",
        "grade-28": {
            "execution": 0
        },
        "191": "ArrayList<Integer> result = new ArrayList<Integer>();\n        String[] note_strs = music_string.split(\" \");\n        for (String note_str : note_strs) {\n            char note_type = note_str.charAt(0);\n            switch (note_type) {\n                case 'o':\n                    result.add(4);\n                    break;\n                case 'o':\n                    result.add(2);\n                    break;\n                case '.':\n                    result.add(1);\n                    break;\n            }\n        }\n        return result;",
        "grade-191": {
            "execution": 0
        },
        "153": "ArrayList<Integer> result = new ArrayList<Integer>();\n        StringTokenizer st = new StringTokenizer(music_string, \" \", false);\n        while (st.hasMoreTokens()) {\n            String note = st.nextToken();\n            char last = note.charAt(note.length() - 1);\n            int len = 1;\n            if (last == '|') {\n                len = note.length() == 1 ? 1 : 2;\n            } else {\n                len = 4;\n            }\n            result.add(len);\n        }\n        return result;",
        "grade-153": {
            "execution": 0
        },
        "23": "ArrayList<Integer> a=new ArrayList<Integer>();\n        String x[]=music_string.split(\" \");\n        for(int i=0;i<x.length;i++)\n        {\n            if(x[i].equals(\"o\"))\n            {\n                a.add(4);\n            }\n            else if(x[i].equals(\"o|\"))\n            {\n                a.add(2);\n            }\n            else if(x[i].equals(\".|\"))\n            {\n                a.add(1);\n            }\n        }\n        return a;",
        "grade-23": {
            "execution": 1
        },
        "165": "// TODO: Implement this function\n        return null;",
        "grade-165": {
            "execution": 0
        },
        "122": "String[] notes = music_string.split(\"\\\\s+\");\n        ArrayList<Integer> res = new ArrayList<>();\n        for (String s : notes) {\n            if (s.equals(\"o\")) {\n                res.add(4);\n            } else if (s.equals(\"o|\")) {\n                res.add(2);\n            } else if (s.equals(\".|\")) {\n                res.add(1);\n            }\n        }\n        return res;",
        "grade-122": {
            "execution": 1
        },
        "8": "ArrayList<Integer> parsed_music = new ArrayList<Integer>();\n        for (int i = 0; i < music_string.length(); i++) {\n            if (music_string.charAt(i) == ' ') continue;\n            if (music_string.charAt(i) == 'o') {\n                if (i + 1 < music_string.length() && music_string.charAt(i + 1) == '|') {\n                    parsed_music.add(2);\n                    i++;\n                } else {\n                    parsed_music.add(4);\n                }\n            } else if (music_string.charAt(i) == '.') {\n                parsed_music.add(1);\n            }\n        }\n        return parsed_music;",
        "grade-8": {
            "execution": 1
        },
        "7": "ArrayList<Integer> answer = new ArrayList<Integer>();\n        int total = 0;\n        for (int i = 0; i < music_string.length(); i++) {\n            if (music_string.charAt(i) == 'o') {\n                if (i + 1 < music_string.length() && music_string.charAt(i + 1) == '|') {\n                    answer.add(2);\n                    total += 2;\n                    i++;\n                } else {\n                    answer.add(4);\n                    total += 4;\n                }\n            } else if (music_string.charAt(i) == '.') {\n                answer.add(1);\n                total += 1;\n            }\n        }\n        return answer;",
        "grade-7": {
            "execution": 1
        },
        "24": "ArrayList<Integer> beats = new ArrayList<Integer>();\n        String[] note_list = music_string.split(\" \");\n        for (String note : note_list) {\n            if (note.equals(\"o\")) {\n                beats.add(4);\n            } else if (note.equals(\"o|\")) {\n                beats.add(2);\n            } else if (note.equals(\".|\")) {\n                beats.add(1);\n            }\n        }\n        return beats;",
        "grade-24": {
            "execution": 1
        },
        "58": "// // Your code here\n        // String[] music_array = music_string.split(\"\\\\s+\");\n        // ArrayList<Integer> music_beat = new ArrayList<Integer>();\n        // for (String notes : music_array) {\n        //     if (notes.equals(\"o\")) {\n        //         music_beat.add(4);\n        //     } else if (notes.equals(\"o|\")) {\n        //         music_beat.add(2);\n        //     } else if (notes.equals(\".|\")) {\n        //         music_beat.add(1);\n        //     }\n        // }\n        // return music_beat;\n        return music_string.chars().map(c -> c == 'o' ? 4 : c == 'o' ? 2 : 1).boxed().collect(Collectors.toCollection(ArrayList::new));",
        "grade-58": {
            "execution": 0
        },
        "63": "ArrayList<Integer> res = new ArrayList<>();\n        ArrayList<Character> list = new ArrayList<>();\n        for (char c : music_string.toCharArray()) {\n            list.add(c);\n        }\n        //System.out.println(list);\n        int i = 0;\n        while (i < list.size()) {\n            if (list.get(i) == 'o') {\n                if (i + 1 < list.size() && list.get(i + 1) == '|') {\n                    i += 2;\n                    res.add(2);\n                } else {\n                    i++;\n                    res.add(4);\n                }\n            } else {\n                i += 2;\n                res.add(1);\n            }\n        }\n        return res;",
        "grade-63": {
            "execution": 0
        },
        "143": "ArrayList<Integer> result = new ArrayList<Integer>();\n        // Do your magic here\n        return result;",
        "grade-143": {
            "execution": 0
        },
        "168": "ArrayList<Integer> counts = new ArrayList<Integer>();\n        int count = 0;\n        for (int i = 0; i < music_string.length(); i++) {\n            if (music_string.charAt(i) == 'o') {\n                count++;\n            } else if (music_string.charAt(i) == '|') {\n                counts.add(count);\n                count = 0;\n            }\n        }\n        return counts;",
        "grade-168": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    // True\n    // >>> same_chars('abcd', 'dddddddabc')\n    // True\n    // >>> same_chars('dddddddabc', 'abcd')\n    // True\n    // >>> same_chars('eabcd', 'dddddddabc')\n    // False\n    // >>> same_chars('abcd', 'dddddddabce')\n    // False\n    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    // False\n    public static boolean sameChars(String s0, String s1) {\n",
        "snippet": [
            "        Set<Character> set0 = new HashSet<>();\n        for (char c : s0.toCharArray()) {\n            set0.add(c);\n        }\n        Set<Character> set1 = new HashSet<>();\n        for (char c : s1.toCharArray()) {\n            set1.add(c);\n        }\n        return set0.equals(set1);\n    }\n}"
        ],
        "simplified": "Check if two words have the same characters.",
        "task_id": "54",
        "168": "int[] a = new int[26];\n        int[] b = new int[26];\n        for (int i = 0; i < s0.length(); i++) {\n            char c = s0.charAt(i);\n            a[c - 'a']++;\n        }\n        for (int i = 0; i < s1.length(); i++) {\n            char c = s1.charAt(i);\n            b[c - 'a']++;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (a[i] != b[i]) {\n                return false;\n            }\n        }\n        return true;",
        "grade-168": {
            "execution": 0
        },
        "28": "if (s0.length() != s1.length()) return false;\n        int[] a = new int[26];\n        for (int i = 0; i < s0.length(); i++) {\n            a[s0.charAt(i) - 'a']++;\n            a[s1.charAt(i) - 'a']--;\n        }\n        for (int n : a) if (n != 0) return false;\n        return true;",
        "grade-28": {
            "execution": 0
        },
        "6": "// 3. Count the number of each letter in s0.\n        Map<Character, Integer> counts0 = new HashMap<>();\n        for (int i = 0; i < s0.length(); i++) {\n            char c = s0.charAt(i);\n            if (counts0.containsKey(c)) {\n                counts0.put(c, counts0.get(c) + 1);\n            } else {\n                counts0.put(c, 1);\n            }\n        }\n        // counts0:\n        // { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'z': 4 }\n        // 4. Loop through the letters in s1.\n        for (int i = 0; i < s1.length(); i++) {\n            char c = s1.charAt(i);\n            // 5. If the letter isn't in s0, return False.\n            if (!counts0.containsKey(c)) {\n                return false;\n            }\n            // 6. Decrement the count in counts0.\n            int count = counts0.get(c);\n            if (count == 1) {\n                counts0.remove(c);\n            } else {\n                counts0.put(c, count - 1);\n            }\n        }\n        // 7. Return True if counts0 is empty.\n        return counts0.isEmpty();",
        "grade-6": {
            "execution": 0
        },
        "198": "int [] cnts0 = new int[26];\n        int [] cnts1 = new int[26];\n        for (int i = 0; i < s0.length(); i++) {\n            cnts0[s0.charAt(i) - 'a']++;\n        }\n        for (int i = 0; i < s1.length(); i++) {\n            cnts1[s1.charAt(i) - 'a']++;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (cnts0[i] != cnts1[i]) {\n                return false;\n            }\n        }\n        return true;",
        "grade-198": {
            "execution": 0
        },
        "72": "String s0_sorted = String.valueOf(s0.chars().sorted().toArray());\n        String s1_sorted = String.valueOf(s1.chars().sorted().toArray());\n        return s0_sorted.equals(s1_sorted);",
        "grade-72": {
            "execution": 0
        },
        "63": "int[] frequency_s0 = new int[26];\n        int[] frequency_s1 = new int[26];\n        for (int i = 0; i < s0.length(); i++) {\n            frequency_s0[s0.charAt(i) - 'a']++;\n        }\n        for (int i = 0; i < s1.length(); i++) {\n            frequency_s1[s1.charAt(i) - 'a']++;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (frequency_s0[i] != frequency_s1[i]) {\n                return false;\n            }\n        }\n        return true;",
        "grade-63": {
            "execution": 0
        },
        "58": "String min = s0.length() < s1.length() ? s0 : s1;\n        String max = s0.length() < s1.length() ? s1 : s0;\n        int l = min.length();\n        for (int i = 0; i < l; i++) {\n            char c = min.charAt(i);\n            int j = max.indexOf(c);\n            if (j == -1) {\n                return false;\n            }\n            max = max.substring(0, j) + max.substring(j + 1);\n        }\n        return true;",
        "grade-58": {
            "execution": 0
        },
        "35": "char[] chars0 = s0.toCharArray();\n        char[] chars1 = s1.toCharArray();\n        Arrays.sort(chars0);\n        Arrays.sort(chars1);\n        String s0_sorted = new String(chars0);\n        String s1_sorted = new String(chars1);\n        return s0_sorted.equals(s1_sorted);",
        "grade-35": {
            "execution": 0
        },
        "197": "// first sum all the ord values of the characters\n        int sum0 = 0;\n        for (int i = 0; i < s0.length(); i++) {\n            sum0 += s0.charAt(i);\n        }\n        int sum1 = 0;\n        for (int i = 0; i < s1.length(); i++) {\n            sum1 += s1.charAt(i);\n        }\n        // then subtract the ord values of s0 from s1\n        // then sum the ord values of the characters left\n        if (sum0 == sum1) {\n            return true;\n        }\n        int sum2 = 0;\n        for (int i = 0; i < s1.length(); i++) {\n            sum2 += s1.charAt(i) - s0.charAt(i);\n        }\n        // if sum2 == sum0 the two word have the same characters.\n        if (sum2 == sum0) {\n            return true;\n        }\n        return false;",
        "grade-197": {
            "execution": 0
        },
        "26": "// ...\n        int[] alphabet = new int[26];\n        for (int i = 0; i < s0.length(); i++) {\n            alphabet[s0.charAt(i) - 'a']++;\n        }\n        for (int i = 0; i < s1.length(); i++) {\n            alphabet[s1.charAt(i) - 'a']--;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (alphabet[i] != 0) {\n                return false;\n            }\n        }\n        return true;",
        "grade-26": {
            "execution": 0
        },
        "179": "return true;",
        "grade-179": {
            "execution": 0
        },
        "144": "// Check if one string is a subsequence of the other.\n        return isSubsequence(s0, s1) || isSubsequence(s1, s0);",
        "grade-144": {
            "execution": 0
        },
        "22": "final Set<Character> set0 = new HashSet<>();\n        for (int i = 0; i < s0.length(); i++) {\n            set0.add(s0.charAt(i));\n        }\n        final Set<Character> set1 = new HashSet<>();\n        for (int i = 0; i < s1.length(); i++) {\n            set1.add(s1.charAt(i));\n        }\n        return set0.equals(set1);",
        "grade-22": {
            "execution": 1
        },
        "156": "int[] a = new int[256];\n        for (int i = 0; i < s0.length(); i++) {\n            a[s0.charAt(i)]++;\n        }\n        for (int i = 0; i < s1.length(); i++) {\n            a[s1.charAt(i)]--;\n        }\n        for (int i = 0; i < 256; i++) {\n            if (a[i] != 0) {\n                return false;\n            }\n        }\n        return true;",
        "grade-156": {
            "execution": 0
        },
        "110": "if (s0.length() > s1.length()) {\n            return sameChars(s1, s0);\n        }\n        char c = s0.charAt(0);\n        int idx = s1.indexOf(c);\n        if (idx == -1) {\n            return false;\n        }\n        if (s0.length() == 1) {\n            return true;\n        }\n        String s1_prime = s1.substring(0, idx) + s1.substring(idx + 1);\n        return sameChars(s0.substring(1), s1_prime);",
        "grade-110": {
            "execution": 0
        },
        "8": "Map<Character, Integer> map = new HashMap<>();\n        for (char c : s0.toCharArray()) {\n            map.put(c, map.getOrDefault(c, 0) + 1);\n        }\n        for (char c : s1.toCharArray()) {\n            map.put(c, map.getOrDefault(c, 0) - 1);\n        }\n        for (char c : map.keySet()) {\n            if (map.get(c) != 0) return false;\n        }\n        return true;",
        "grade-8": {
            "execution": 0
        },
        "7": "char[] c0 = s0.toCharArray();\n        char[] c1 = s1.toCharArray();\n        if (c0.length != c1.length) {\n            return false;\n        }\n        int[] counter = new int[26];\n        for (int i = 0; i < c0.length; i++) {\n            int index = c0[i] - 'a';\n            counter[index]++;\n        }\n        for (int i = 0; i < c1.length; i++) {\n            int index = c1[i] - 'a';\n            counter[index]--;\n        }\n        for (int i = 0; i < counter.length; i++) {\n            if (counter[i] != 0) {\n                return false;\n            }\n        }\n        return true;",
        "grade-7": {
            "execution": 0
        },
        "23": "int[] cnt = new int[26];\n        for (int i = 0; i < s0.length(); i++) {\n            char c = s0.charAt(i);\n            cnt[c - 'a'] += 1;\n        }\n        for (int i = 0; i < s1.length(); i++) {\n            char c = s1.charAt(i);\n            cnt[c - 'a'] -= 1;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (cnt[i] != 0) {\n                return false;\n            }\n        }\n        return true;",
        "grade-23": {
            "execution": 0
        },
        "55": "// First create character counts for the two strings.\n        List<Integer> c0 = new ArrayList<>();\n        List<Integer> c1 = new ArrayList<>();\n        for (int i = 0; i < 26; i++) {\n            c0.add(0);\n            c1.add(0);\n        }\n        for (int i = 0; i < s0.length(); i++) {\n            c0.set(s0.charAt(i) - 'a', c0.get(s0.charAt(i) - 'a') + 1);\n        }\n        for (int i = 0; i < s1.length(); i++) {\n            c1.set(s1.charAt(i) - 'a', c1.get(s1.charAt(i) - 'a') + 1);\n        }\n        // Return true if the two lists are equal.\n        return c0.equals(c1);",
        "grade-55": {
            "execution": 0
        },
        "60": "boolean result = false;\n        Map<Character, Integer> map0 = new HashMap<>();\n        Map<Character, Integer> map1 = new HashMap<>();\n        for (int i = 0; i < s0.length(); i++) {\n            if (map0.containsKey(s0.charAt(i))) {\n                map0.put(s0.charAt(i), map0.get(s0.charAt(i)) + 1);\n            } else {\n                map0.put(s0.charAt(i), 1);\n            }\n        }\n        for (int i = 0; i < s1.length(); i++) {\n            if (map1.containsKey(s1.charAt(i))) {\n                map1.put(s1.charAt(i), map1.get(s1.charAt(i)) + 1);\n            } else {\n                map1.put(s1.charAt(i), 1);\n            }\n        }\n        if (map0.size() == map1.size()) {\n            result = true;\n            for (char c : map0.keySet()) {\n                if (!map1.containsKey(c) || !map1.get(c).equals(map0.get(c))) {\n                    result = false;\n                    break;\n                }\n            }\n        }\n        return result;",
        "grade-60": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String> words) {\n",
        "snippet": [
            "        List<String> words_sort = new ArrayList<>(words);\n        words_sort.sort(new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                Set<Character> s1 = new HashSet<>();\n                for (char ch : o1.toCharArray()) {\n                    s1.add(ch);\n                }\n                Set<Character> s2 = new HashSet<>();\n                for (char ch : o2.toCharArray()) {\n                    s2.add(ch);\n                }\n                if (s1.size() > s2.size()) {\n                    return 1;\n                } else if (s1.size() < s2.size()) {\n                    return -1;\n                } else {\n                    return -o1.compareTo(o2);\n                }\n            }\n        });\n        return words_sort.get(words_sort.size() - 1);\n    }\n}"
        ],
        "simplified": "Write a function that accepts a list of strings. The list contains different words. Return the word with maximum number of unique characters. If multiple strings have maximum number of unique characters, return the one which comes first in lexicographical order.",
        "task_id": "158",
        "199": "int max = -1;\n        String maxWord = \"\";\n        for (String word : words) {\n            String wordChar = String.join(\"\", word.split(\"\"));\n            Set<String> wordSet = new HashSet<>(Arrays.asList(wordChar.split(\"\")));\n            int unique = wordSet.size();\n            if (unique > max) {\n                max = unique;\n                maxWord = word;\n            }\n        }\n        return maxWord;",
        "grade-199": {
            "execution": 0
        },
        "34": "// Fill your code here\n        return \"\";",
        "grade-34": {
            "execution": 0
        },
        "6": "// TODO: write your code here.\n        int num = 0;\n        String max = \"\";\n        for (String word : words) {\n            int count = 0;\n            HashSet<Character> set = new HashSet<>();\n            for (int i = 0; i < word.length(); i++) {\n                if (!set.contains(word.charAt(i))) {\n                    count++;\n                    set.add(word.charAt(i));\n                }\n            }\n            if (count > num) {\n                num = count;\n                max = word;\n            }\n        }\n        return max;",
        "grade-6": {
            "execution": 0
        },
        "85": "return new String();",
        "grade-85": {
            "execution": 0
        },
        "75": "String result = \"\";\n        String unique = \"\";\n        int max = 0;\n        for (String word : words) {\n            unique = new String(new LinkedHashSet<String>(Arrays.asList(word.split(\"\"))).toArray(new String[0]));\n            if (unique.length() > max) {\n                max = unique.length();\n                result = word;\n            }\n        }\n        return result;",
        "grade-75": {
            "execution": 0
        },
        "70": "int max_len = 0;\n        String max_word = \"\";\n        for (String word : words) {\n            Set<Character> set = new HashSet<>();\n            for (char c : word.toCharArray()) {\n                set.add(c);\n            }\n            if (set.size() > max_len) {\n                max_len = set.size();\n                max_word = word;\n            }\n        }\n        return max_word;",
        "grade-70": {
            "execution": 0
        },
        "41": "// write code here\n        Map<String, Integer> map = new HashMap<>();\n        for (String word : words) {\n            Set<Character> set = new HashSet<>();\n            for (char c : word.toCharArray()) {\n                set.add(c);\n            }\n            map.put(word, set.size());\n        }\n        int max = 0;\n        String s = \"\";\n        for (String word : words) {\n            if (map.get(word) > max) {\n                max = map.get(word);\n                s = word;\n            }\n        }\n        return s;",
        "grade-41": {
            "execution": 0
        },
        "30": "String res = \"\";\n        int max_count = 0;\n        for (String word : words) {\n            Set<Character> s = new HashSet<>();\n            for (char c : word.toCharArray())\n                s.add(c);\n            if (s.size() > max_count) {\n                max_count = s.size();\n                res = word;\n            }\n        }\n        return res;",
        "grade-30": {
            "execution": 0
        },
        "165": "int max = 0;\n        int maxIndex = 0;\n        for (int i = 0; i < words.size(); i++) {\n            if (uniqueChars(words.get(i)) > max) {\n                max = uniqueChars(words.get(i));\n                maxIndex = i;\n            }\n        }\n        return words.get(maxIndex);",
        "grade-165": {
            "execution": 0
        },
        "26": "return words.stream()\n            .map(word -> Pair.with(word, word.chars().distinct().count()))\n            .max(Comparator.comparing(Pair::getValue1))\n            .map(Pair::getValue0)\n            .orElse(null);",
        "grade-26": {
            "execution": 0
        },
        "183": "//<Fill in your code here>\n      return \"\";",
        "grade-183": {
            "execution": 0
        },
        "128": "var anagrams = new Anagrams();\n        return anagrams.FindMax(words);",
        "grade-128": {
            "execution": 0
        },
        "9": "if (words.size() == 0) {\n            return \"\";\n        }\n        int max = 0;\n        String ret = \"\";\n        for (String s : words) {\n            StringBuilder sb = new StringBuilder();\n            for (int i = 0; i < s.length(); i++) {\n                if (sb.indexOf(s.substring(i, i + 1)) == -1) {\n                    sb.append(s.substring(i, i + 1));\n                }\n            }\n            if (sb.length() > max) {\n                max = sb.length();\n                ret = s;\n            }\n        }\n        return ret;",
        "grade-9": {
            "execution": 0
        },
        "7": "// TODO\n        if (words.size() == 0) return \"\";\n        String max_word = words.get(0);\n        for (int i = 1; i < words.size(); i++) {\n            String word = words.get(i);\n            if (word.length() > max_word.length()) {\n                max_word = word;\n            } else if (word.length() == max_word.length()) {\n                if (word.compareTo(max_word) < 0) {\n                    max_word = word;\n                }\n            }\n        }\n        return max_word;",
        "grade-7": {
            "execution": 0
        },
        "27": "HashMap<String, Integer> unique = new HashMap<>();\n        for (String word : words) {\n            String key = String.valueOf(word.chars().distinct().count());\n            int val = unique.getOrDefault(key, 0);\n            unique.put(key, val + 1);\n        }\n        String res = \"\";\n        int max = Integer.MIN_VALUE;\n        for (String word : words) {\n            int cur = word.chars().distinct().count();\n            if (unique.get(String.valueOf(cur)) == 1) {\n                if (cur > max) {\n                    max = cur;\n                    res = word;\n                }\n            }\n        }\n        return res;",
        "grade-27": {
            "execution": 0
        },
        "68": "List<String> uWords = new ArrayList<String>();\n        for (String str : words) {\n            if (new HashSet<String>(Arrays.asList(str.split(\"\"))).size() == str.length()) {\n                uWords.add(str);\n            }\n        }\n        if (uWords.size() == 0) {\n            return \"\";\n        }\n        Collections.sort(uWords);\n        return uWords.get(0);",
        "grade-68": {
            "execution": 0
        },
        "72": "String max = \"\";\n        int uc = 0;\n        for (String word : words) {\n            if (uniqueChars(word) > uc) {\n                max = word;\n                uc = uniqueChars(word);\n            }\n        }\n        return max;",
        "grade-72": {
            "execution": 0
        },
        "155": "String result = \"\";\n        int max = 0;\n        for (String word : words) {\n            HashSet<Character> hs = new HashSet<Character>();\n            for (char c : word.toCharArray()) {\n                hs.add(c);\n            }\n            if (hs.size() > max) {\n                max = hs.size();\n                result = word;\n            }\n        }\n        return result;",
        "grade-155": {
            "execution": 0
        },
        "187": "String max = words.get(0);\n        int maxCount = 0;\n        for (String word : words) {\n            int uCount = uniqueCount(word);\n            if (uCount > maxCount) {\n                max = word;\n                maxCount = uCount;\n            }\n        }\n        return max;",
        "grade-187": {
            "execution": 0
        },
        "171": "int max = Integer.MIN_VALUE;\n        int indexOfMax = -1;\n        int i = 0;\n        for (String word : words) {\n            int unique = uniqueChars(word);\n            if (unique > max) {\n                max = unique;\n                indexOfMax = i;\n            }\n            i++;\n        }\n        return words.get(indexOfMax);",
        "grade-171": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Create a function which takes a string representing a file's name, and returns\n    // 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    // A file's name is considered to be valid if and only if all the following conditions \n    // are met:\n    // - There should not be more than three digits ('0'-'9') in the file's name.\n    // - The file's name contains exactly one dot '.'\n    // - The substring before the dot should not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    // file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    public static String fileNameCheck(String file_name) {\n",
        "snippet": [
            "        List<String> suf = Arrays.asList(\"txt\", \"exe\", \"dll\");\n        String[] lst = file_name.split(\"\\\\.\" );\n        if (lst.length != 2 || !suf.contains(lst[1]) || lst[0].isEmpty() || !Character.isLetter(lst[0].charAt(0))) {\n            return \"No\";\n        }\n        int t = (int) lst[0].chars().map(x -> (char) x).filter(Character::isDigit).count();\n        if (t > 3) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}"
        ],
        "simplified": "Create a function which takes a string representing a file's name, and returns 'Yes' if the the file's name is valid, and returns 'No' otherwise. A file's name is considered to be valid if and only if all the following conditions are met: - There should not be more than three digits ('0'-'9') in the file's name. - The file's name contains exactly one dot '.' - The substring before the dot should not be empty, and it starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dot should be one of these: ['txt', 'exe', 'dll']",
        "task_id": "141",
        "190": "// your code goes here",
        "grade-190": {
            "execution": 0
        },
        "28": "// throw new UnsupportedOperationException(\"Waiting to be implemented.\");\n        Pattern p = Pattern.compile(\"[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)\");\n        Matcher m = p.matcher(file_name);\n        if (m.matches()) {\n            return \"Yes\";\n        }\n        return \"No\";",
        "grade-28": {
            "execution": 0
        },
        "6": "// check if the name contains exactly one dot\n        if (file_name.indexOf('.') == file_name.lastIndexOf('.')) {\n            String[] name_components = file_name.split(\"\\\\.\");\n            // check if there is anything before the dot\n            if (name_components[0].length() > 0) {\n                // check if the first character is a letter\n                if (Character.isLetter(name_components[0].charAt(0))) {\n                    // check if the substring after the dot is valid\n                    if (name_components[1].equals(\"txt\") || name_components[1].equals(\"exe\") || name_components[1].equals(\"dll\")) {\n                        // check if there are more than three digits\n                        if (file_name.replaceAll(\"[^0-9]\", \"\").length() > 3) {\n                            return \"No\";\n                        }\n                        else {\n                            return \"Yes\";\n                        }\n                    }\n                    else {\n                        return \"No\";\n                    }\n                }\n                else {\n                    return \"No\";\n                }\n            }\n            else {\n                return \"No\";\n            }\n        }\n        else {\n            return \"No\";\n        }",
        "grade-6": {
            "execution": 0
        },
        "75": "int digitCount = 0;\n        int dotCount = 0;\n        int length = file_name.length();\n        char firstChar = file_name.charAt(0);\n        if (!((firstChar >= 'a' && firstChar <= 'z') || (firstChar >= 'A' && firstChar <= 'Z')))\n            return \"No\";\n        if (length < 3)\n            return \"No\";\n        if (file_name.charAt(length - 1) == '.')\n            return \"No\";\n        for (int i = 0; i < length; i++) {\n            char c = file_name.charAt(i);\n            if (c >= '0' && c <= '9')\n                digitCount++;\n            if (c == '.')\n                dotCount++;\n        }\n        if (digitCount > 3 || dotCount != 1)\n            return \"No\";\n        if (file_name.indexOf('.') == length - 1)\n            return \"No\";\n        String suffix = file_name.substring(file_name.indexOf('.') + 1);\n        if (suffix.equals(\"txt\") || suffix.equals(\"exe\") || suffix.equals(\"dll\"))\n            return \"Yes\";\n        return \"No\";",
        "grade-75": {
            "execution": 1
        },
        "66": "// create a regex that represents the conditions from the problem\n        String regex = \"^[a-zA-Z]{1}[^0-9]*[0-9]{0,3}\\\\.(txt|exe|dll)$\";\n        // regex is hard. I had to refer to online regex testers.\n        // regex101.com\n        // regexr.com\n        // regex.com\n        // This is a good explaination of the regex.\n        // https://stackoverflow.com/questions/57117135/how-to-validate-file-name-according-to-some-rules-in-python\n        // and this is the regex that I derived.\n        // https://regex101.com/r/yAY6qY/1/\n        if (file_name.matches(regex)) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }",
        "grade-66": {
            "execution": 0
        },
        "61": "if(file_name.length() < 5) return \"No\";\n        // System.out.println(file_name.substring(0, 4));\n        // System.out.println(file_name.substring(0, 4).matches(\"[a-zA-Z][a-zA-Z0-9]*\"));\n        if(!file_name.substring(0, 4).matches(\"[a-zA-Z][a-zA-Z0-9]*\") || file_name.substring(file_name.length() - 4, file_name.length()).matches(\"[0-9][0-9][0-9][a-zA-Z]\")) return \"No\";\n        return \"Yes\";",
        "grade-61": {
            "execution": 0
        },
        "35": "int dotIndex = file_name.indexOf('.');\n        if (dotIndex == -1) {\n            return \"No\";\n        }\n        else {\n            String ext = file_name.substring(dotIndex + 1);\n            if (!(ext.equals(\"txt\") || ext.equals(\"exe\") || ext.equals(\"dll\"))) {\n                return \"No\";\n            }\n            else {\n                for (int i = 0; i < file_name.length(); i++) {\n                    if (i != dotIndex && Character.isDigit(file_name.charAt(i))) {\n                        return \"No\";\n                    }\n                }\n                if (Character.isDigit(file_name.charAt(0))) {\n                    return \"No\";\n                }\n                return \"Yes\";\n            }\n        }",
        "grade-35": {
            "execution": 0
        },
        "26": "int cnt=0;\n        for(int i=0;i<file_name.length();i++) {\n            if('0'<=file_name.charAt(i) && file_name.charAt(i)<='9') cnt++;\n        }\n        if(cnt>3) return \"No\";\n        int idx = file_name.indexOf('.');\n        if(idx==-1) return \"No\";\n        String s = file_name.substring(0,idx);\n        if(s.length()==0) return \"No\";\n        if(!('a'<=s.charAt(0) && s.charAt(0)<='z') && !('A'<=s.charAt(0) && s.charAt(0)<='Z')) return \"No\";\n        s = file_name.substring(idx+1);\n        if(!s.equals(\"txt\") && !s.equals(\"exe\") && !s.equals(\"dll\")) return \"No\";\n        return \"Yes\";",
        "grade-26": {
            "execution": 1
        },
        "161": "if(file_name.length() == 0) {\n            return \"No\";\n        }\n        String[] parts = file_name.split(\"\\\\.\");\n        if(parts.length != 2) {\n            return \"No\";\n        }\n        String prefix = parts[0];\n        String suffix = parts[1];\n        if(prefix.length() == 0) {\n            return \"No\";\n        }\n        if(!(suffix.equals(\"txt\") || suffix.equals(\"exe\") || suffix.equals(\"dll\"))) {\n            return \"No\";\n        }\n        String pattern = \"^[a-zA-Z]+[\\\\w\\\\d]*$\";\n        if(!prefix.matches(pattern)) {\n            return \"No\";\n        }\n        if(prefix.matches(\"\\\\d+\")) {\n            return \"No\";\n        }\n        int count = 0;\n        for(int i = 0; i < prefix.length(); i++) {\n            if(Character.isDigit(prefix.charAt(i))) {\n                count++;\n            }\n        }\n        if(count > 3) {\n            return \"No\";\n        }\n        return \"Yes\";",
        "grade-161": {
            "execution": 0
        },
        "22": "return \"\";",
        "grade-22": {
            "execution": 0
        },
        "177": "// Write code here\n        return \"\";",
        "grade-177": {
            "execution": 0
        },
        "120": "Pattern pattern = Pattern.compile(\"(\\\\d{1,3})?([a-z]\\\\w*)(\\\\.txt|\\\\.exe|\\\\.dll)\");\n        Matcher matcher = pattern.matcher(file_name);\n        if (matcher.matches()) {\n            return \"Yes\";\n        }\n        return \"No\";",
        "grade-120": {
            "execution": 0
        },
        "8": "String fileName = file_name;\n        String[] parts = fileName.split(\"\\\\.\");\n        // format is invalid\n        if (parts.length != 2) {\n            return \"No\";\n        }\n        // extension is invalid\n        if (!(parts[1].equals(\"txt\") || parts[1].equals(\"exe\") || parts[1].equals(\"dll\"))) {\n            return \"No\";\n        }\n        // filename is invalid\n        if (parts[0].length() == 0 || parts[0].matches(\"[^0-9]*[0-9][^0-9]*[0-9][^0-9]*[0-9].*\")) {\n            return \"No\";\n        }\n        // all checks passed\n        return \"Yes\";",
        "grade-8": {
            "execution": 0
        },
        "7": "String[] splitted = file_name.split(\"\\\\.\");\n        if (splitted.length != 2) return \"No\";\n        else if (splitted[0].matches(\"[0-9]+\")) return \"No\";\n        else if (splitted[0].equals(\"\")) return \"No\";\n        else if (splitted[1].equals(\"txt\") || splitted[1].equals(\"exe\") || splitted[1].equals(\"dll\")) {\n            return \"Yes\";\n        }\n        return \"No\";",
        "grade-7": {
            "execution": 0
        },
        "23": "String[] parts = file_name.split(\"\\\\.\");\n        System.out.println(Arrays.toString(parts));\n        if (parts.length != 2) return \"No\";\n        // before dot\n        String s = parts[0];\n        if (s.matches(\"[0-9]+\")) return \"No\";\n        int c = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char ch = s.charAt(i);\n            if (ch >= '0' && ch <= '9') c++;\n        }\n        if (c > 3) return \"No\";\n        // after dot\n        s = parts[1];\n        if (!s.equals(\"txt\") && !s.equals(\"exe\") && !s.equals(\"dll\")) return \"No\";\n        return \"Yes\";",
        "grade-23": {
            "execution": 0
        },
        "59": "if(file_name.contains(\"\\\\\") || file_name.contains(\"/\"))\n            return \"No\";\n        String[] split = file_name.split(\"\\\\.\");\n        if(split.length != 2)\n            return \"No\";\n        if(!split[0].matches(\"[a-zA-Z]+[a-zA-Z0-9]*\"))\n            return \"No\";\n        if(split[1].length() < 3)\n            return \"No\";\n        if(split[1].matches(\"[0-9]+\"))\n            return \"No\";\n        if(!(split[1].equals(\"txt\") || split[1].equals(\"exe\") || split[1].equals(\"dll\")))\n            return \"No\";\n        return \"Yes\";",
        "grade-59": {
            "execution": 0
        },
        "63": "// Your code here\n        String result = \"No\";\n        String regex = \"[a-zA-Z]{1}\\\\d{0,3}(\\\\.txt|\\\\.exe|\\\\.dll)\";\n        if (file_name.matches(regex)) {\n            result = \"Yes\";\n        }\n        return result;",
        "grade-63": {
            "execution": 0
        },
        "147": "// write your code here\n        if (file_name.chars().filter(c -> c >= '0' && c <= '9').count() > 3)\n            return \"No\";\n        String[] parts = file_name.split(\"\\\\.\");\n        if (parts.length != 2)\n            return \"No\";\n        if (parts[0].chars().filter(c -> c >= '0' && c <= '9').count() > 0)\n            return \"No\";\n        String[] endings = {\"txt\", \"exe\", \"dll\"};\n        return Arrays.stream(endings).filter(parts[1]::equals).findFirst().orElse(\"No\");",
        "grade-147": {
            "execution": 0
        },
        "180": "if(!file_name.matches(\"[a-zA-Z][a-zA-Z0-9]*\\\\.[a-zA-Z]{3}\")) {\n            return \"No\";\n        }\n        int digit_count = file_name.length() - file_name.replaceAll(\"[0-9]\", \"\").length();\n        if(digit_count > 3) {\n            return \"No\";\n        }\n        return \"Yes\";",
        "grade-180": {
            "execution": 0
        },
        "166": "String arr[] = file_name.split(\"\\\\.\");\n        int cnt=0;\n        for(int i=0;i<arr[0].length();i++)\n            if(arr[0].charAt(i)>='0' && arr[0].charAt(i)<='9') cnt++;\n        if(cnt>3) return \"No\";\n        if(!arr[0].matches(\"[a-zA-Z]+\")) return \"No\";\n        if(!arr[1].equals(\"txt\") && !arr[1].equals(\"exe\") && !arr[1].equals(\"dll\")) return \"No\";\n        return \"Yes\";",
        "grade-166": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static boolean rightAngleTriangle(int a, int b, int c) {\n",
        "snippet": [
            "        return a * a == b * b + c * c || b * b == a * a + c * c || c * c == a * a + b * b;\n    }\n}"
        ],
        "simplified": "Given the lengths of the three sides of a triangle. Return True if the three sides form a right-angled triangle, False otherwise. A right-angled triangle is a triangle in which one angle is right angle or 90 degree.",
        "task_id": "157",
        "199": "double[][] sides = new double[][]{\n            {a, b, c},\n            {a, c, b},\n            {b, a, c},\n            {b, c, a},\n            {c, a, b},\n            {c, b, a}\n        };\n        for (double[] side : sides) {\n            if (side[0] * side[0] + side[1] * side[1] == side[2] * side[2]) {\n                return true;\n            }\n        }\n        return false;",
        "grade-199": {
            "execution": 1
        },
        "30": "throw new UnsupportedOperationException(\"Implement me\");",
        "grade-30": {
            "execution": 0
        },
        "6": "return Math.pow(a, 2) + Math.pow(b, 2) == Math.pow(c, 2);",
        "grade-6": {
            "execution": 0
        },
        "79": "// Solution starts here\n        if (a == 0 || b == 0 || c == 0) return false;\n        else {\n            Integer[] sides = {a, b, c};\n            Arrays.sort(sides);\n            int minSide = sides[0];\n            int otherSide = sides[1];\n            int maxSide = sides[2];\n            return (int)Math.pow(minSide, 2) + (int)Math.pow(otherSide, 2) == (int)Math.pow(maxSide, 2);\n        }\n        // Solution ends here",
        "grade-79": {
            "execution": 1
        },
        "71": "// First, sort them from smallest to largest.\n        int[] arr = new int[]{a, b, c};\n        Arrays.sort(arr);\n        // Now, since we have the square of the hypotenuse at the end, \n        // we can square the first two, then check.\n        return (arr[0] * arr[0] + arr[1] * arr[1]) == arr[2] * arr[2];",
        "grade-71": {
            "execution": 1
        },
        "66": "if(a == 0 || b == 0 || c == 0)\n            return false;\n        List<Integer> l = Arrays.asList(a, b, c);\n        l.sort(null);\n        if(l.get(0) * l.get(0) + l.get(1) * l.get(1) == l.get(2) * l.get(2))\n            return true;\n        return false;",
        "grade-66": {
            "execution": 1
        },
        "39": "int longest = Math.max(Math.max(a, b), c);\n        int sum = a + b + c;\n        int shortest = sum - longest;\n        return longest * longest == shortest * shortest + (sum - shortest) * (sum - shortest);",
        "grade-39": {
            "execution": 0
        },
        "27": "int[] ar = {a, b, c};\n        Arrays.sort(ar);\n        return ar[0] * ar[0] + ar[1] * ar[1] == ar[2] * ar[2];",
        "grade-27": {
            "execution": 1
        },
        "166": "// Write your code here.",
        "grade-166": {
            "execution": 0
        },
        "22": "// Write your code here\n        return (int)Math.pow(a, 2) + (int)Math.pow(b, 2) == (int)Math.pow(c, 2);",
        "grade-22": {
            "execution": 0
        },
        "183": "// your code here...",
        "grade-183": {
            "execution": 0
        },
        "123": "// Your code here",
        "grade-123": {
            "execution": 0
        },
        "8": "// TODO: Implement this method\n        return false;",
        "grade-8": {
            "execution": 0
        },
        "7": "// throw new UnsupportedOperationException(\"Not implemented yet.\");\n        return false;",
        "grade-7": {
            "execution": 0
        },
        "23": "// Order the sides by their length, shortest first.\n        List<Integer> sides = Arrays.asList(a, b, c);\n        Collections.sort(sides);\n        int x = sides.get(0);\n        int y = sides.get(1);\n        int z = sides.get(2);\n        return (x * x) + (y * y) == (z * z);",
        "grade-23": {
            "execution": 1
        },
        "64": "return (c * c == a * a + b * b) || (a * a == b * b + c * c) || (b * b == a * a + c * c);",
        "grade-64": {
            "execution": 1
        },
        "68": "//   return a*a + b*b == c*c;\n        \n        if (a <= 0 || b <= 0 || c <= 0) return false;\n        int biggest = Math.max(a, Math.max(b, c));\n        int sum = a + b + c;\n        if (sum - biggest <= biggest) return false;\n        return biggest * biggest == sum - biggest - biggest;",
        "grade-68": {
            "execution": 0
        },
        "152": "// Type your solution here\n        return (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b * b + c * c == a * a);",
        "grade-152": {
            "execution": 1
        },
        "189": "// return the result\n        // what is the defn of right-angled triangle?\n        // it has one angle that is 90 degree\n        // that means\n        // when two sides are squared and added, they equal the third side squared\n        int d = a*a + b*b;\n        int d1 = c*c;\n        return d == d1;",
        "grade-189": {
            "execution": 0
        },
        "172": "// Implement your code here\n        int[] arr = {a, b, c};\n        Arrays.sort(arr);\n        return (Math.pow(arr[0], 2) + Math.pow(arr[1], 2)) == Math.pow(arr[2], 2);",
        "grade-172": {
            "execution": 1
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Filter given list of any python values only for integers\n    // >>> filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    public static ArrayList<Long> filterIntegers(ArrayList<Object> values) {\n",
        "snippet": [
            "        List<Integer> result = new ArrayList<>();\n        for (Object x : values) {\n            if (x instanceof Integer) {\n                result.add((Integer) x);\n            }\n        }\n        return result;\n    }\n}"
        ],
        "simplified": "Filter given list of any python values only for integers",
        "task_id": "22",
        "3": "// YOUR CODE GOES HERE\n        return new ArrayList<Long>();",
        "grade-3": {
            "execution": 0
        },
        "0": "ArrayList<Long> res = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Long) {\n                res.add((Long) value);\n            }\n        }\n        return res;",
        "grade-0": {
            "execution": 0
        },
        "8": "ArrayList<Long> integers = new ArrayList<>();\n        // YOUR CODE HERE\n        return integers;",
        "grade-8": {
            "execution": 0
        },
        "7": "ArrayList<Long> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;",
        "grade-7": {
            "execution": 0
        },
        "16": "ArrayList<Long> arrL = new ArrayList<Long>();\n        for (Object o : values) {\n            if (o instanceof Long) {\n                arrL.add((Long) o);\n            }\n        }\n        return arrL;",
        "grade-16": {
            "execution": 0
        },
        "2": "// insert code here\n        return new ArrayList<Long>();",
        "grade-2": {
            "execution": 0
        },
        "11": "return values.stream().filter(value -> value instanceof Long).map(value -> (Long) value).collect(Collectors.toCollection(ArrayList::new));",
        "grade-11": {
            "execution": 0
        },
        "1": "return (ArrayList<Long>) values.stream().filter(v -> v instanceof Long).collect(Collectors.toList());",
        "grade-1": {
            "execution": 0
        },
        "10": "// TODO: Write your code here\n        ArrayList<Long> res = new ArrayList<>();\n        for(Object obj : values) {\n            if(obj instanceof Long)\n                res.add((Long)obj);\n        }\n        return res;",
        "grade-10": {
            "execution": 0
        },
        "17": "ArrayList<Long> nums = new ArrayList<>();\n        values.forEach(x -> {\n            if (x instanceof Integer) {\n                nums.add((Integer) x);\n            }\n        });\n        return nums;",
        "grade-17": {
            "execution": 0
        },
        "12": "ArrayList<Long> out = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Long) {\n                out.add((Long) value);\n            }\n        }\n        return out;",
        "grade-12": {
            "execution": 0
        },
        "6": "ArrayList<Long> res = new ArrayList<>();\n        for (Object val : values) {\n            if (val instanceof Long) {\n                res.add((Long) val);\n            }\n        }\n        return res;",
        "grade-6": {
            "execution": 0
        },
        "18": "ArrayList<Long> res = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                res.add((long) value);\n            }\n        }\n        return res;",
        "grade-18": {
            "execution": 0
        },
        "15": "ArrayList<Long> result = new ArrayList<>();\n        // Add your code here\n        return result;",
        "grade-15": {
            "execution": 0
        },
        "13": "return null;",
        "grade-13": {
            "execution": 0
        },
        "9": "ArrayList<Long> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Long) {\n                result.add((Long) value);\n            }\n        }\n        return result;",
        "grade-9": {
            "execution": 0
        },
        "4": "ArrayList<Long> ints = new ArrayList<Long>();\n        for (Object v : values) {\n            if (v instanceof Long) {\n                ints.add((Long) v);\n            }\n        }\n        return ints;",
        "grade-4": {
            "execution": 0
        },
        "14": "ArrayList<Long> ret = new ArrayList<>();\n        for (Object o : values) {\n            if (o instanceof Long) {\n                ret.add((Long) o);\n            }\n        }\n        return ret;",
        "grade-14": {
            "execution": 0
        },
        "5": "ArrayList<Long> res = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Long)\n                res.add((Long) value);\n        }\n        return res;",
        "grade-5": {
            "execution": 0
        },
        "19": "ArrayList<Long> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Long) value);\n            }\n        }\n        return result;",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    // cycpattern_check(\"abcd\",\"abd\") => False\n    // cycpattern_check(\"hello\",\"ell\") => True\n    // cycpattern_check(\"whassup\",\"psus\") => False\n    // cycpattern_check(\"abab\",\"baa\") => True\n    // cycpattern_check(\"efef\",\"eeff\") => False\n    // cycpattern_check(\"himenss\",\"simen\") => True\n    public static boolean cycpatternCheck(String a, String b) {\n",
        "snippet": [
            "        int l = b.length();\n        String pat = b + b;\n        for (int i = 0; i <= a.length() - l; i++) {\n            for (int j = 0; j <= l; j++) {\n                if (a.substring(i, i + l).equals(pat.substring(j, j + l))) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}"
        ],
        "simplified": "You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word",
        "task_id": "154",
        "30": "String c=b+b;\n        return a.contains(c);",
        "grade-30": {
            "execution": 0
        },
        "6": "StringBuilder sb = new StringBuilder(b);\n        String new_b = sb.reverse().toString();\n        System.out.println(new_b);\n        for(int i = 0; i < b.length(); i++) {\n            if(a.contains(new_b)) {\n                return true;\n            }\n            new_b = new_b.substring(1) + new_b.charAt(0);\n        }\n        return false;",
        "grade-6": {
            "execution": 0
        },
        "84": "int l = b.length();\n        int n = a.length();\n        if (l > n) {\n            return false;\n        }\n        int j = 0;\n        for (int i = 0; i < n; i++) {\n            if (a.charAt(i) == b.charAt(j)) {\n                j++;\n            } else {\n                j = 0;\n            }\n            if (j == l) {\n                return true;\n            }\n        }\n        return false;",
        "grade-84": {
            "execution": 0
        },
        "75": "String s = a+a;\n        int i = a.indexOf(b);\n        if(i != -1) {\n            return true;\n        }\n        return false;",
        "grade-75": {
            "execution": 0
        },
        "68": "// Write your code here\n        int n = a.length();\n        int m = b.length();\n        boolean[] rotate_arr = new boolean[n];\n        boolean[] rotate_brr = new boolean[m];\n        for(int i = 0; i < n; i++) {\n            rotate_arr[i] = true;\n        }\n        for(int i = 0; i < m; i++) {\n            rotate_brr[i] = true;\n        }\n        //char[] arr = a.toCharArray();\n        //char[] brr = b.toCharArray();\n        for(int i = 0; i < n - m; i++) {\n            int j = 0;\n            for(j = 0; j < m; j++) {\n                if(a.charAt(i + j) != b.charAt(j)) {\n                    break;\n                }\n            }\n            if(j == m) {\n                //we have found the string\n                return true;\n            }\n        }\n        for(int i = n - m; i < n; i++) {\n            int j = 0;\n            for(j = 0; j < m; j++) {\n                if(a.charAt(i + j) != b.charAt(j)) {\n                    break;\n                }\n            }\n            if(j == m) {\n                //we have found the string\n                return true;\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            System.out.print(a.charAt(i) + \" \");\n        }\n        System.out.println();\n        for(int i = 0; i < m; i++) {\n            System.out.print(b.charAt(i) + \" \");\n        }\n        System.out.println();\n        return false;",
        "grade-68": {
            "execution": 0
        },
        "38": "// Solution:\n        // Multiply string b by length of string a and check if a is a substring of the result\n        for (int i = 0; i < a.length(); i++) {\n            if (b.repeat(a.length()).contains(a)) {\n                return true;\n            }\n            // Cycle b\n            char first = b.charAt(0);\n            b = b.substring(1) + first;\n        }\n        return false;",
        "grade-38": {
            "execution": 0
        },
        "28": "b = b + b;\n        return b.contains(a);",
        "grade-28": {
            "execution": 0
        },
        "180": "if (a.length() < b.length()) return false;\n        if (a.length() == b.length()) return a.equals(b);\n        int bLen = b.length();\n        for (int i = 0; i < bLen; i++) {\n            if (a.contains(b)) return true;\n            b = b.substring(1) + b.charAt(0);\n        }\n        return false;",
        "grade-180": {
            "execution": 1
        },
        "23": "for (int i = 0; i < b.length(); i++) {\n            char c = b.charAt(0);\n            b = b.substring(1);\n            b += c;\n            if (a.contains(b)) {\n                return true;\n            }\n        }\n        return false;",
        "grade-23": {
            "execution": 1
        },
        "195": "// Write your code here.\n        // a = \"himenss\"\n        // b = \"simen\"\n        // s = \"sssimen\"\n        // int length = b.length();\n        String s = a + a;\n        int bLength = b.length();\n        int sLength = s.length();\n        for (int i = 0; i < sLength; i++) {\n            String substring = s.substring(i, i + bLength);\n            if (substring.equals(b)) {\n                return true;\n            }\n        }\n        return false;",
        "grade-195": {
            "execution": 0
        },
        "135": "boolean flg = false;\n        for(int i = 0; i < b.length(); i++) {\n            b = b.substring(1) + b.charAt(0);\n            if(a.contains(b))\n                flg = true;\n        }\n        return flg;",
        "grade-135": {
            "execution": 1
        },
        "8": "return false;",
        "grade-8": {
            "execution": 0
        },
        "7": "// Your Code Here\n        if(a.length() != b.length())\n        {\n            return false;\n        }\n        if(b.equals(a))\n        {\n            return true;\n        }\n        return isSubstring(a,b);",
        "grade-7": {
            "execution": 0
        },
        "25": "for (int i = 0; i < b.length(); i++) {\n            if (a.contains(b)) {\n                return true;\n            }\n            b = b.substring(1) + b.charAt(0);\n        }\n        return false;",
        "grade-25": {
            "execution": 1
        },
        "65": "int wordLen = b.length();\n        int aLen = a.length();\n        int bLen = b.length();\n        if (aLen < bLen) {\n            return false;\n        }\n        for (int i = 0; i < aLen; i++) {\n            if (a.charAt(i) == b.charAt(0)) {\n                if (aLen - i < bLen) {\n                    break;\n                }\n                String substring = a.substring(i, i + bLen);\n                String substring_rot = \"\";\n                for (int j = 0; j < wordLen; j++) {\n                    substring_rot += substring.charAt(wordLen - j - 1);\n                }\n                if (substring_rot.equals(b)) {\n                    return true;\n                }\n            }\n        }\n        return false;",
        "grade-65": {
            "execution": 0
        },
        "70": "if (a.length() == 0 || b.length() == 0) return false;\n        // convert b to a list of chars\n        char[] bChars = b.toCharArray();\n        // loop from 0 to b.length\n        for (int i = 0; i < b.length(); i++) {\n            // push back the first element in the list and rotate the list to the left\n            char temp = bChars[0];\n            for (int j = 0; j < bChars.length - 1; j++) {\n                bChars[j] = bChars[j + 1];\n            }\n            bChars[bChars.length - 1] = temp;\n            // check if the rotated list is a substring of a\n            String c = new String(bChars);\n            if (a.contains(c)) return true;\n        }\n        return false;",
        "grade-70": {
            "execution": 1
        },
        "164": "if (a.length() < b.length()) {\n            return false;\n        }\n        int[] hash = new int[26];\n        int[] rotHash = new int[26];\n        char[] aArr = a.toCharArray();\n        char[] bArr = b.toCharArray();\n        for (int i = 0; i < b.length(); i++) {\n            hash[aArr[i] - 'a']++;\n            rotHash[bArr[i] - 'a']++;\n        }\n        if (Arrays.equals(hash, rotHash)) {\n            return true;\n        }\n        for (int i = b.length(); i < a.length(); i++) {\n            hash[aArr[i - b.length()] - 'a']--;\n            hash[aArr[i] - 'a']++;\n            if (Arrays.equals(hash, rotHash)) {\n                return true;\n            }\n        }\n        return false;",
        "grade-164": {
            "execution": 0
        },
        "199": "if (a.length() != b.length()) {\n            return false;\n        }\n        return a.contains(b) || cycpatternCheckRecurse(a, b, 0);",
        "grade-199": {
            "execution": 0
        },
        "186": "// Your code goes here.\n        int c = 0;\n        int l = a.length();\n        int r = b.length();\n        if(r > l) {\n            return false;\n        }\n        for(int i = 0; i < l; i++) {\n            if(a.charAt(i) == b.charAt(c)) {\n                c++;\n            } else {\n                c = 0;\n            }\n            if(c == r) {\n                return true;\n            }\n        }\n        return false;",
        "grade-186": {
            "execution": 0
        },
        "59": "String search = a;\n        String pattern = b;\n        char[] start = search.toCharArray();\n        char[] end = new char[start.length];\n        char[] patternChar = pattern.toCharArray();\n        for (int i = 0; i < start.length; i++) {\n            end[(i + 1) % start.length] = start[i];\n        }\n        String endString = String.valueOf(end);\n        String cycle = \"\";\n        int searchTimes = search.length() - pattern.length() + 1;\n        for (int i = 0; i < searchTimes; i++) {\n            cycle = search.substring(i, i + pattern.length());\n            if (cycle.equals(pattern)) {\n                return true;\n            }\n        }\n        if (endString.contains(pattern)) {\n            return true;\n        }\n        return false;",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    public static int countDistinctCharacters(String string) {\n",
        "snippet": [
            "        Set<Character> set = new HashSet<>();\n        for (char c : string.toLowerCase().toCharArray()) {\n            set.add(c);\n        }\n        return set.size();\n    }\n}"
        ],
        "simplified": "Given a string, find out how many distinct characters (regardless of case) does it consist of",
        "task_id": "16",
        "124": "return (int) Arrays.stream(string.split(\"\")).map(s -> s.toLowerCase()).distinct().count();",
        "grade-124": {
            "execution": 0
        },
        "16": "Set<Character> set = new HashSet<>();\n        for (char c : string.toCharArray()) {\n            set.add(c);\n        }\n        return set.size();",
        "grade-16": {
            "execution": 0
        },
        "4": "return (int) string.toLowerCase().chars().distinct().count();",
        "grade-4": {
            "execution": 1
        },
        "143": "if (string == null)\n            return 0;\n        return (int) string.chars().distinct().count();",
        "grade-143": {
            "execution": 0
        },
        "47": "HashSet<Character> seen = new HashSet<>();\n        for (char c : string.toCharArray()) {\n            seen.add(c);\n        }\n        return seen.size();",
        "grade-47": {
            "execution": 0
        },
        "43": "Set<Character> distinct = new HashSet<>();\n        string.chars().forEach(distinct::add);\n        return distinct.size();",
        "grade-43": {
            "execution": 0
        },
        "34": "// TODO: your code here\n        return -1;",
        "grade-34": {
            "execution": 0
        },
        "19": "return 0;",
        "grade-19": {
            "execution": 0
        },
        "15": "Set<Character> characters = new HashSet<>();\n        for (int i = 0; i < string.length(); i++) {\n            characters.add(string.charAt(i));\n        }\n        return characters.size();",
        "grade-15": {
            "execution": 0
        },
        "130": "Set<Character> distinct = new HashSet<>();\n        for (int i = 0; i < string.length(); i++) {\n            distinct.add(string.charAt(i));\n        }\n        return distinct.size();",
        "grade-130": {
            "execution": 0
        },
        "180": "int[] charArray = new int[26];\n        for (int i = 0; i < string.length(); i++) {\n            int c = string.charAt(i);\n            if (Character.isUpperCase(c)) {\n                charArray[c - 'A'] = 1;\n            } else {\n                charArray[c - 'a'] = 1;\n            }\n        }\n        int count = 0;\n        for (int i = 0; i < 26; i++) {\n            if (charArray[i] == 1) {\n                count++;\n            }\n        }\n        return count;",
        "grade-180": {
            "execution": 0
        },
        "98": "return string.length() - string.toLowerCase().chars().distinct().count();",
        "grade-98": {
            "execution": 0
        },
        "13": "var set = new HashSet<Character>();\n        var chars = string.toCharArray();\n        for (var c : chars) {\n            set.add(c);\n        }\n        return set.size();",
        "grade-13": {
            "execution": 0
        },
        "111": "throw new UnsupportedOperationException(\"Please Implement\");",
        "grade-111": {
            "execution": 0
        },
        "80": "return string.toLowerCase().chars().distinct().toArray().length;",
        "grade-80": {
            "execution": 1
        },
        "5": "return (int) string.chars().distinct().count();",
        "grade-5": {
            "execution": 0
        },
        "32": "return (int) string.chars().map(Character::toLowerCase).distinct().count();",
        "grade-32": {
            "execution": 1
        },
        "35": "Set<Character> charSet = new HashSet<>();\n        for (char c : string.toCharArray()) {\n            charSet.add(c);\n        }\n        return charSet.size();",
        "grade-35": {
            "execution": 0
        },
        "91": "Set<Character> ans = new HashSet<>();\n        for (char ch : string.toCharArray()) {\n            ans.add(ch);\n        }\n        return ans.size();",
        "grade-91": {
            "execution": 0
        },
        "115": "Set<Character> chars = new HashSet<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            chars.add(c);\n        }\n        return chars.size();",
        "grade-115": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that accepts two lists of strings and returns the list that has \n    // total number of chars in the all strings of the list less than the other list.\n    // if the two lists have the same number of chars, return the first list.\n    // Examples\n    // total_match([], []) \u279e []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String> lst1, ArrayList<String> lst2) {\n",
        "snippet": [
            "        int l1 = 0;\n        for (String st : lst1) {\n            l1 += st.length();\n        }\n\n        int l2 = 0;\n        for (String st : lst2) {\n            l2 += st.length();\n        }\n\n        if (l1 <= l2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n}"
        ],
        "simplified": "Write a function that accepts two lists of strings and returns the list that has total number of chars in the all strings of the list less than the other list. if the two lists have the same number of chars, return the first list.",
        "task_id": "74",
        "179": "int s1 = lst1.stream().reduce(\"\", (a, b) -> a + b).length();\n        int s2 = lst2.stream().reduce(\"\", (a, b) -> a + b).length();\n        if (s1 < s2) {\n            return lst1;\n        } else if (s2 < s1) {\n            return lst2;\n        } else {\n            return lst1;\n        }",
        "grade-179": {
            "execution": 1
        },
        "28": "int total1 = lst1.stream().mapToInt(i -> i.length()).sum();\n        int total2 = lst2.stream().mapToInt(i -> i.length()).sum();\n        return total1 <= total2 ? lst1 : lst2;",
        "grade-28": {
            "execution": 1
        },
        "6": "int sum1 = 0;\n        int sum2 = 0;\n        ArrayList<String> result = new ArrayList<String>();\n        for (String word : lst1) {\n            sum1 += word.length();\n        }\n        for (String word : lst2) {\n            sum2 += word.length();\n        }\n        if (sum1 == sum2) {\n            return lst1;\n        } else if (sum1 < sum2) {\n            return lst1;\n        } else {\n            return lst2;\n        }",
        "grade-6": {
            "execution": 1
        },
        "73": "int s1 = 0;\n        int s2 = 0;\n        for (String str : lst1) s1 += str.length();\n        for (String str : lst2) s2 += str.length();\n        if (s1 < s2) return lst1;\n        else if (s2 < s1) return lst2;\n        else return lst1;",
        "grade-73": {
            "execution": 1
        },
        "65": "if (lst1.size() == 0 && lst2.size() == 0) {\n            return new ArrayList<String>();\n        }\n        int len1 = lst1.stream().mapToInt(String::length).sum();\n        int len2 = lst2.stream().mapToInt(String::length).sum();\n        if (len1 <= len2) {\n            return lst1;\n        } else {\n            return lst2;\n        }",
        "grade-65": {
            "execution": 1
        },
        "60": "int lst1TotalChar = 0;\n        int lst2TotalChar = 0;\n        for (String string : lst1) {\n            lst1TotalChar += string.length();\n        }\n        for (String string : lst2) {\n            lst2TotalChar += string.length();\n        }\n        if (lst1TotalChar > lst2TotalChar) {\n            return lst2;\n        } else {\n            return lst1;\n        }",
        "grade-60": {
            "execution": 1
        },
        "35": "ArrayList<String> answer = new ArrayList<String>();\n        int sum1 = 0;\n        int sum2 = 0;\n        for (String i : lst1) {\n            sum1 += i.length();\n        }\n        for (String i : lst2) {\n            sum2 += i.length();\n        }\n        if (sum1 < sum2) {\n            answer = lst1;\n        } else if (sum1 > sum2) {\n            answer = lst2;\n        } else {\n            answer = lst1;\n        }\n        return answer;",
        "grade-35": {
            "execution": 1
        },
        "26": "int lst1CharCount = lst1.stream().mapToInt(String::length).sum();\n        int lst2CharCount = lst2.stream().mapToInt(String::length).sum();\n        return lst1CharCount > lst2CharCount ? lst2 : lst1;",
        "grade-26": {
            "execution": 1
        },
        "189": "Integer list1count = 0;\n        Integer list2count = 0;\n        for (String word : lst1) {\n            list1count += word.length();\n        }\n        for (String word : lst2) {\n            list2count += word.length();\n        }\n        if (list1count <= list2count) {\n            return lst1;\n        } else {\n            return lst2;\n        }",
        "grade-189": {
            "execution": 1
        },
        "152": "int sum1 = 0;\n        int sum2 = 0;\n        for (String x : lst1) {\n            sum1 += x.length();\n        }\n        for (String x : lst2) {\n            sum2 += x.length();\n        }\n        return sum1 < sum2 ? lst1 : lst2;",
        "grade-152": {
            "execution": 0
        },
        "22": "// get the total number of chars of all strings in the lists\n        int lst1total = lst1.stream().mapToInt(String::length).sum();\n        int lst2total = lst2.stream().mapToInt(String::length).sum();\n        // if lst1 has the smallest amount of chars then return lst1\n        if (lst1total < lst2total) {\n            return lst1;\n        }\n        // if lst2 has the smallest amount of chars then return lst2\n        else if (lst2total < lst1total) {\n            return lst2;\n        }\n        // if the two lists have the same amount of chars then return lst1\n        else {\n            return lst1;\n        }",
        "grade-22": {
            "execution": 1
        },
        "164": "// Write code here\n        int c1 = 0;\n        int c2 = 0;\n        for(String s: lst1) {\n            c1 += s.length();\n        }\n        for(String s: lst2) {\n            c2 += s.length();\n        }\n        if(c1 == c2) return lst1;\n        if(c1 > c2) return lst2;\n        return lst1;",
        "grade-164": {
            "execution": 1
        },
        "116": "int length1 = 0;\n        int length2 = 0;\n        for (String str : lst1) {\n            length1 += str.length();\n        }\n        for (String str : lst2) {\n            length2 += str.length();\n        }\n        if (length1 > length2) {\n            return lst2;\n        } else {\n            return lst1;\n        }",
        "grade-116": {
            "execution": 1
        },
        "8": "int lst1total = lst1.stream().mapToInt(s -> s.length()).sum();\n        int lst2total = lst2.stream().mapToInt(s -> s.length()).sum();\n        return lst1total <= lst2total ? lst1 : lst2;",
        "grade-8": {
            "execution": 1
        },
        "7": "int count1 = 0;\n        int count2 = 0;\n        for (String i : lst1) {\n            count1 += i.length();\n        }\n        for (String i : lst2) {\n            count2 += i.length();\n        }\n        if (count1 < count2) {\n            return lst1;\n        } else {\n            return lst2;\n        }",
        "grade-7": {
            "execution": 0
        },
        "23": "int totalLst1 = 0;\n        int totalLst2 = 0;\n        for (String str: lst1) {\n            totalLst1 += str.length();\n        }\n        for (String str: lst2) {\n            totalLst2 += str.length();\n        }\n        return totalLst1 < totalLst2 ? lst1 : lst2;",
        "grade-23": {
            "execution": 0
        },
        "58": "int lst1Total = lst1.stream().mapToInt(s -> s.length()).sum();\n        int lst2Total = lst2.stream().mapToInt(s -> s.length()).sum();\n        if (lst1Total == lst2Total) {\n            return lst1;\n        } else if (lst1Total < lst2Total) {\n            return lst1;\n        } else {\n            return lst2;\n        }",
        "grade-58": {
            "execution": 1
        },
        "62": "int total_lst1 = 0;\n        int total_lst2 = 0;\n        for (String str : lst1) {\n            total_lst1 += str.length();\n        }\n        for (String str : lst2) {\n            total_lst2 += str.length();\n        }\n        return total_lst1 < total_lst2 ? lst1 : lst2;",
        "grade-62": {
            "execution": 0
        },
        "140": "int sum1 = lst1.stream().reduce(\"\", (a, b) -> a + b).length();\n        int sum2 = lst2.stream().reduce(\"\", (a, b) -> a + b).length();\n        if (sum1 == sum2) return lst1;\n        return sum1 < sum2 ? lst1 : lst2;",
        "grade-140": {
            "execution": 1
        },
        "169": "long sum1 = lst1.stream().mapToInt(x -> x.length()).sum();\n        long sum2 = lst2.stream().mapToInt(x -> x.length()).sum();\n        ArrayList<String> toReturn = sum1 < sum2 ? lst1 : lst2;\n        return toReturn;",
        "grade-169": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given two intervals,\n    // where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    // The given intervals are closed which means that the interval (start, end)\n    // includes both start and end.\n    // For each given interval, it is assumed that its start is less or equal its end.\n    // Your task is to determine whether the length of intersection of these two \n    // intervals is a prime number.\n    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    // which its length is 1, which not a prime number.\n    // If the length of the intersection is a prime number, return \"YES\",\n    // otherwise, return \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    // [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n    // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Integer, Integer> interval1, Pair<Integer, Integer> interval2) {\n",
        "snippet": [
            "        int l = Math.max(interval1.get(0), interval2.get(0));\n        int r = Math.min(interval1.get(1), interval2.get(1));\n        int length = r - l;\n        if (length <= 0) {\n            return \"NO\";\n        }\n        if (length == 1) {\n            return \"NO\";\n        }\n        if (length == 2) {\n            return \"YES\";\n        }\n        for (int i = 2; i < length; i++) {\n            if (length % i == 0) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";\n    }\n}"
        ],
        "simplified": "You are given two intervals, where each interval is a pair of integers. For example, interval = (start, end) = (1, 2). The given intervals are closed which means that the interval (start, end) includes both start and end. For each given interval, it is assumed that its start is less or equal its end. Your task is to determine whether the length of intersection of these two intervals is a prime number. Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3) which its length is 1, which not a prime number. If the length of the intersection is a prime number, return \"YES\", otherwise, return \"NO\". If the two intervals don't intersect, return \"NO\".",
        "task_id": "127",
        "169": "int minStart = Math.max(interval1.getValue0(), interval2.getValue0());\n        int maxEnd = Math.min(interval1.getValue1(), interval2.getValue1());\n        int diff = maxEnd - minStart;\n        if (diff < 0) {\n            return \"NO\";\n        }\n        return isPrime(diff) ? \"YES\" : \"NO\";",
        "grade-169": {
            "execution": 0
        },
        "28": "int start = Math.max(interval1.getValue0(), interval2.getValue0());\n        int end = Math.min(interval1.getValue1(), interval2.getValue1());\n        int distance = end - start;\n        return isPrime(distance) ? \"YES\" : \"NO\";",
        "grade-28": {
            "execution": 0
        },
        "6": "int s1 = interval1.getValue0();\n        int e1 = interval1.getValue1();\n        int s2 = interval2.getValue0();\n        int e2 = interval2.getValue1();\n        int a = Math.max(s1, s2);\n        int b = Math.min(e1, e2);\n        if (a <= b) {\n            return isPrime(b - a + 1) ? \"YES\" : \"NO\";\n        }\n        return \"NO\";",
        "grade-6": {
            "execution": 0
        },
        "197": "int start = Math.max(interval1.getValue0(), interval2.getValue0());\n        int end = Math.min(interval1.getValue1(), interval2.getValue1());\n        int intersectionLen = end - start + 1;\n        if (intersectionLen < 1) {\n            return \"NO\";\n        }\n        for (int i = 2; i < intersectionLen; i++) {\n            if (intersectionLen % i == 0) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";",
        "grade-197": {
            "execution": 0
        },
        "70": "Integer intersectStart = Math.max(interval1.getValue0(), interval2.getValue0());\n        Integer intersectEnd = Math.min(interval1.getValue1(), interval2.getValue1());\n        if (intersectStart <= intersectEnd) {\n            Integer intersectSize = intersectEnd - intersectStart + 1;\n            boolean isPrime = checkPrime(intersectSize);\n            return isPrime ? \"YES\" : \"NO\";\n        }\n        return \"NO\";",
        "grade-70": {
            "execution": 0
        },
        "62": "return Integer.toString(intersectionInInterval(interval1, interval2).size());",
        "grade-62": {
            "execution": 0
        },
        "57": "int start = Math.max(interval1.getValue0(), interval2.getValue0());\n        int end = Math.min(interval1.getValue1(), interval2.getValue1());\n        if (start > end) {\n            return \"NO\";\n        }\n        if (start <= 2 && end >= 2) {\n            return \"YES\";\n        }\n        for (int i = 2; i <= Math.sqrt(end); i++) {\n            if (start % i == 0 || end % i == 0) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";",
        "grade-57": {
            "execution": 0
        },
        "35": "int low = Math.max(interval1.getValue0(), interval2.getValue0());\n        int high = Math.min(interval1.getValue1(), interval2.getValue1());\n        if (low > high) {\n            return \"NO\";\n        }\n        int length = high - low + 1;\n        for (int i = 2; i < length; i++) {\n            if (length % i == 0) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";",
        "grade-35": {
            "execution": 0
        },
        "196": "boolean a = interval1.getValue0() > interval2.getValue0();\n        boolean b = interval1.getValue1() < interval2.getValue1();\n        int intersectionStart = (a) ? interval1.getValue0() : interval2.getValue0();\n        int intersectionEnd = (b) ? interval1.getValue1() : interval2.getValue1();\n        int intersectionSize = intersectionEnd - intersectionStart;\n        if (intersectionSize < 0) {\n            return \"NO\";\n        }\n        return (isPrime(intersectionSize)) ? \"YES\" : \"NO\";",
        "grade-196": {
            "execution": 0
        },
        "26": "int min = Math.max(interval1.getValue0(), interval2.getValue0());\n        int max = Math.min(interval1.getValue1(), interval2.getValue1());\n        if (min > max) {\n            return \"NO\";\n        }\n        return isPrime(max - min + 1) ? \"YES\" : \"NO\";",
        "grade-26": {
            "execution": 0
        },
        "181": "int min = Math.max(interval1.getValue0(), interval2.getValue0());\n      int max = Math.min(interval1.getValue1(), interval2.getValue1());\n      int distance = max - min;\n      if (distance > 0) {\n        if (isPrime(distance)) {\n          return \"YES\";\n        }\n      }\n      return \"NO\";",
        "grade-181": {
            "execution": 0
        },
        "144": "if (interval1.getValue0() >= interval2.getValue1() || interval2.getValue0() >= interval1.getValue1()) {\n            return \"NO\";\n        }\n        int start = Math.max(interval1.getValue0(), interval2.getValue0());\n        int end = Math.min(interval1.getValue1(), interval2.getValue1());\n        int len = end - start + 1;\n        return isPrime(len) ? \"YES\" : \"NO\";",
        "grade-144": {
            "execution": 0
        },
        "22": "int start;\n        int end;\n        if (interval1.getValue0() <= interval2.getValue0()) {\n            start = interval2.getValue0();\n        } else {\n            start = interval1.getValue0();\n        }\n        if (interval1.getValue1() >= interval2.getValue1()) {\n            end = interval2.getValue1();\n        } else {\n            end = interval1.getValue1();\n        }\n        int length = end - start;\n        if (length <= 0) {\n            return \"NO\";\n        }\n        if (length == 1) {\n            return \"NO\";\n        }\n        if (length == 2) {\n            return \"YES\";\n        }\n        if (length % 2 == 0) {\n            return \"NO\";\n        }\n        for (int i = 3; i <= Math.sqrt(length); i += 2) {\n            if (length % i == 0) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";",
        "grade-22": {
            "execution": 0
        },
        "157": "int start = Math.max(interval1.getValue0(), interval2.getValue0());\n        int end = Math.min(interval1.getValue1(), interval2.getValue1());\n        if (start <= end) {\n            int len = end - start + 1;\n            if (isPrime(len)) {\n                return \"YES\";\n            }\n        }\n        return \"NO\";",
        "grade-157": {
            "execution": 0
        },
        "111": "int l = 0;\n        int r = 0;\n        int tmp = interval1.getValue0();\n        interval1.setValue0(Math.min(interval1.getValue0(), interval1.getValue1()));\n        interval1.setValue1(Math.max(tmp, interval1.getValue1()));\n        tmp = interval2.getValue0();\n        interval2.setValue0(Math.min(interval2.getValue0(), interval2.getValue1()));\n        interval2.setValue1(Math.max(tmp, interval2.getValue1()));\n        if (interval1.getValue0() < interval2.getValue0()) {\n            l = interval2.getValue0();\n        } else {\n            l = interval1.getValue0();\n        }\n        if (interval1.getValue1() < interval2.getValue1()) {\n            r = interval1.getValue1();\n        } else {\n            r = interval2.getValue1();\n        }\n        if (l <= r) {\n            int cnt = r - l + 1;\n            for (int i = 2; i * i <= cnt; i++) {\n                if (cnt % i == 0) {\n                    return \"NO\";\n                }\n            }\n            return \"YES\";\n        }\n        return \"NO\";",
        "grade-111": {
            "execution": 0
        },
        "8": "// your code here\n        int s1 = interval1.getValue0();\n        int e1 = interval1.getValue1();\n        int s2 = interval2.getValue0();\n        int e2 = interval2.getValue1();\n        int s = Math.max(s1, s2);\n        int e = Math.min(e1, e2);\n        if (s > e) return \"NO\";\n        int c = e - s + 1;\n        // check if is prime\n        if (c < 2) return \"NO\";\n        if (c == 2) return \"YES\";\n        for (int i = 2; i < c; i++) {\n            if (c % i == 0) return \"NO\";\n        }\n        return \"YES\";",
        "grade-8": {
            "execution": 0
        },
        "7": "Integer s1 = interval1.getValue0();\n        Integer e1 = interval1.getValue1();\n        Integer s2 = interval2.getValue0();\n        Integer e2 = interval2.getValue1();\n        Integer maxStart = s1 > s2 ? s1 : s2;\n        Integer minEnd = e1 < e2 ? e1 : e2;\n        Integer len = minEnd - maxStart;\n        if (len < 0) {\n            return \"NO\";\n        }\n        for (int i = 2; i <= Math.sqrt(len); i++) {\n            if (len % i == 0) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";",
        "grade-7": {
            "execution": 0
        },
        "23": "// your code here\n        return \"\";",
        "grade-23": {
            "execution": 0
        },
        "55": "int start = Math.max(interval1.getValue0(), interval2.getValue0());\n        int end = Math.min(interval1.getValue1(), interval2.getValue1());\n        if (start > end) {\n            return \"NO\";\n        }\n        if (isPrime(end - start + 1)) {\n            return \"YES\";\n        }\n        return \"NO\";",
        "grade-55": {
            "execution": 0
        },
        "59": "// write your code here\n        if (interval1.getValue0() > interval2.getValue1() || interval2.getValue0() > interval1.getValue1()) {\n            return \"NO\";\n        } else {\n            int start = Math.max(interval1.getValue0(), interval2.getValue0());\n            int end = Math.min(interval1.getValue1(), interval2.getValue1());\n            if (start > end) {\n                return \"NO\";\n            } else {\n                return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n            }\n        }",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n    // 14\n    public static int fib4(int n) {\n",
        "snippet": [
            "        List<Integer> results = new ArrayList<>();\n        results.add(0);\n        results.add(0);\n        results.add(2);\n        results.add(0);\n        if (n < 4) {\n            return results.get(n);\n        }\n\n        for (int i = 4; i <= n; i++) {\n            results.add(results.get(0) + results.get(1) + results.get(2) + results.get(3));\n            results.remove(0);\n        }\n        return results.get(3);\n    }\n}"
        ],
        "simplified": "The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). Please write a function to efficiently compute the n-th element of the fib4 number sequence. Do not use recursion.",
        "task_id": "46",
        "36": "int f_one = 0;\n        int f_two = 0;\n        int f_three = 2;\n        int f_four = 0;\n        if (n == 0) return f_one;\n        if (n == 1) return f_two;\n        if (n == 2) return f_three;\n        if (n == 3) return f_four;\n        for (int i = 4; i <= n; i++) {\n            int temp = f_one + f_two + f_three + f_four;\n            f_one = f_two;\n            f_two = f_three;\n            f_three = f_four;\n            f_four = temp;\n        }\n        return f_four;",
        "grade-36": {
            "execution": 1
        },
        "6": "// TODO: Implement this function.\n        if (n == 0 || n == 1) {\n            return 0;\n        } else if (n == 2) {\n            return 2;\n        } else if (n == 3) {\n            return 0;\n        } else {\n            int a = 0;\n            int b = 0;\n            int c = 2;\n            int d = 0;\n            int e = 0;\n            for (int i = 4; i <= n; i++) {\n                e = a + b + c + d;\n                a = b;\n                b = c;\n                c = d;\n                d = e;\n            }\n            return e;\n        }",
        "grade-6": {
            "execution": 1
        },
        "90": "// Use Java 8 streams to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n        int a = 0;\n        int b = 0;\n        int c = 2;\n        int d = 0;\n        if (n == 0){\n            return a;\n        }\n        if (n == 1){\n            return b;\n        }\n        if (n == 2){\n            return c;\n        }\n        if (n == 3){\n            return d;\n        }\n        for (int i = 3; i < n; i++){\n            int temp = a;\n            a = b;\n            b = c;\n            c = d;\n            d = temp + b + c + d;\n        }\n        return d;",
        "grade-90": {
            "execution": 0
        },
        "80": "// TODO:\n        return -1;",
        "grade-80": {
            "execution": 0
        },
        "74": "int f1 = 0;\n        int f2 = 0;\n        int f3 = 2;\n        int f4 = 0;\n        int f5 = 4;\n        if (n == 0) return f1;\n        if (n == 1) return f2;\n        if (n == 2) return f3;\n        if (n == 3) return f4;\n        if (n == 4) return f5;\n        for (int i = 4; i < n; i++) {\n            int temp = f1 + f2 + f3 + f4;\n            f1 = f2;\n            f2 = f3;\n            f3 = f4;\n            f4 = temp;\n        }\n        return f1 + f2 + f3 + f4;",
        "grade-74": {
            "execution": 1
        },
        "46": "if (n < 4) {\n            return n*n - n/2;\n        }\n        int n1 = 0;\n        int n2 = 0;\n        int n3 = 2;\n        int n4 = 0;\n        int result = 0;\n        for (int i = 4; i <= n; i++) {\n            result = n1 + n2 + n3 + n4;\n            n1 = n2;\n            n2 = n3;\n            n3 = n4;\n            n4 = result;\n        }\n        return result;",
        "grade-46": {
            "execution": 1
        },
        "34": "if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 0;\n        } else if (n == 2) {\n            return 2;\n        } else if (n == 3) {\n            return 0;\n        } else {\n            int a = 0;\n            int b = 0;\n            int c = 2;\n            int d = 0;\n            for (int i = 4; i <= n; i++) {\n                int e = a + b + c + d;\n                a = b;\n                b = c;\n                c = d;\n                d = e;\n            }\n            return a + b + c + d;\n        }",
        "grade-34": {
            "execution": 0
        },
        "174": "// write your solution here\n        return -1;",
        "grade-174": {
            "execution": 0
        },
        "28": "if (n < 0) {\n            throw new IllegalArgumentException(\"Fib4 only takes non-negative integers\");\n        }\n        int[] seq = new int[n+1];\n        seq[0] = 0;\n        seq[1] = 0;\n        seq[2] = 2;\n        seq[3] = 0;\n        for (int i = 4; i <= n; i++) {\n            seq[i] = seq[i-1] + seq[i-2] + seq[i-3] + seq[i-4];\n        }\n        return seq[n];",
        "grade-28": {
            "execution": 1
        },
        "190": "int n1 = 0;\n        int n2 = 0;\n        int n3 = 2;\n        int n4 = 0;\n        int n5 = 0;\n        for (int i = 0; i < n - 2; i++) {\n            n5 = n1 + n2 + n3 + n4;\n            n1 = n2;\n            n2 = n3;\n            n3 = n4;\n            n4 = n5;\n        }\n        return n5;",
        "grade-190": {
            "execution": 0
        },
        "136": "int[] numbers = new int[5];\n        numbers[0] = 0;\n        numbers[1] = 0;\n        numbers[2] = 2;\n        numbers[3] = 0;\n        numbers[4] = 0;\n        for (int i = 4; i < n; i++) {\n            numbers[0] = numbers[1];\n            numbers[1] = numbers[2];\n            numbers[2] = numbers[3];\n            numbers[3] = numbers[4];\n            numbers[4] = numbers[0] + numbers[1] + numbers[2] + numbers[3];\n        }\n        return numbers[4];",
        "grade-136": {
            "execution": 0
        },
        "9": "// TODO: Write your code here\n        if (n == 0) {\n            return 0;\n        }\n        int a = 0;\n        int b = 0;\n        int c = 2;\n        int d = 0;\n        int e = 0;\n        for (int i = 4; i <= n; i++) {\n            e = a + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n            d = e;\n        }\n        return e;",
        "grade-9": {
            "execution": 1
        },
        "7": "// f0 = 0\n        // f1 = 0\n        // f2 = 2\n        // f3 = 0\n        // f4 = f0 + f1 + f2 + f3\n        // f5 = f1 + f2 + f3 + f4\n        // f6 = f2 + f3 + f4 + f5\n        // f7 = f3 + f4 + f5 + f6\n        // f8 = f4 + f5 + f6 + f7\n        // f9 = f5 + f6 + f7 + f8\n        // f10 = f6 + f7 + f8 + f9\n        // f11 = f7 + f8 + f9 + f10\n        // f12 = f8 + f9 + f10 + f11\n        // f13 = f9 + f10 + f11 + f12\n        // f14 = f10 + f11 + f12 + f13\n        // f15 = f11 + f12 + f13 + f14\n        // f16 = f12 + f13 + f14 + f15\n        // ...\n        // fk = f(k-4) + f(k-3) + f(k-2) + f(k-1)\n        int a = 0;\n        int b = 0;\n        int c = 2;\n        int d = 0;\n        int fk = 0;\n        if (n == 0) {\n            return a;\n        } else if (n == 1) {\n            return b;\n        } else if (n == 2) {\n            return c;\n        } else if (n == 3) {\n            return d;\n        } else {\n            for (int i = 0; i < n - 3; i++) {\n                fk = a + b + c + d;\n                a = b;\n                b = c;\n                c = d;\n                d = fk;\n            }\n            return fk;\n        }",
        "grade-7": {
            "execution": 1
        },
        "30": "int[] arr = new int[n+1];\n        arr[0] = 0;\n        arr[1] = 0;\n        arr[2] = 2;\n        arr[3] = 0;\n        for(int i = 4; i < n+1; i++) {\n            arr[i] = arr[i-1] + arr[i-2] + arr[i-3] + arr[i-4];\n        }\n        return arr[n];",
        "grade-30": {
            "execution": 1
        },
        "72": "// TODO: Implement me!\n        return 0;",
        "grade-72": {
            "execution": 0
        },
        "76": "throw new RuntimeException(\"Not implemented.\");",
        "grade-76": {
            "execution": 0
        },
        "160": "assert n >= 0;\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n == 3) return 0;\n        int[] dp = new int[n+1];\n        dp[0] = 0;\n        dp[1] = 0;\n        dp[2] = 2;\n        dp[3] = 0;\n        for (int i = 4; i <= n; i++) {\n            dp[i] = dp[i-1] + dp[i-2] + dp[i-3] + dp[i-4];\n        }\n        return dp[n];",
        "grade-160": {
            "execution": 1
        },
        "194": "int f[] = new int[n + 1];\n        int i;\n        f[0] = 0;\n        f[1] = 0;\n        f[2] = 2;\n        f[3] = 0;\n        for (i = 4; i <= n; i++)\n            f[i] = f[i - 1] + f[i - 2] + f[i - 3] + f[i - 4];\n        return f[n];",
        "grade-194": {
            "execution": 1
        },
        "178": "throw new NotImplementedException();",
        "grade-178": {
            "execution": 0
        },
        "65": "if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 0;\n        }\n        int fib0 = 0;\n        int fib1 = 0;\n        int fib2 = 2;\n        int fib3 = 0;\n        int fib = 0;\n        for (int i = 4; i <= n; i++) {\n            fib = fib0 + fib1 + fib2 + fib3;\n            fib0 = fib1;\n            fib1 = fib2;\n            fib2 = fib3;\n            fib3 = fib;\n        }\n        return fib;",
        "grade-65": {
            "execution": 1
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s, count the number of uppercase vowels in even indices.\n    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg') returns 0\n    // count_upper('dBBE') returns 0\n    public static int countUpper(String s) {\n",
        "snippet": [
            "        int count = 0;\n        for (int i = 0; i < s.length(); i += 2) {\n            if (\"AEIOU\".indexOf(s.charAt(i)) != -1) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n}"
        ],
        "simplified": "Given a string s, count the number of uppercase vowels in even indices.",
        "task_id": "98",
        "32": "return (int)IntStream.range(0, s.length())\n            .filter(i -> i % 2 == 0)\n            .filter(i -> Character.isUpperCase(s.charAt(i)))\n            .count();",
        "grade-32": {
            "execution": 0
        },
        "6": "// Hint: you can use the Character class\n        // check out Character.isUpperCase(c)\n        // http://docs.oracle.com/javase/8/docs/api/java/lang/Character.html#isUpperCase-char-\n        int count = 0;\n        // YOUR CODE HERE\n        return count;",
        "grade-6": {
            "execution": 0
        },
        "94": "// Your code here.\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (i % 2 == 0 && Character.isUpperCase(c)) {\n                count++;\n            }\n        }\n        return count;",
        "grade-94": {
            "execution": 0
        },
        "83": "// Your code here\n        return -1;",
        "grade-83": {
            "execution": 0
        },
        "76": "// TODO: Implement this function\n        return 0;",
        "grade-76": {
            "execution": 0
        },
        "41": "int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (i % 2 == 0 && Character.isUpperCase(s.charAt(i))) {\n                count++;\n            }\n        }\n        return count;",
        "grade-41": {
            "execution": 0
        },
        "29": "return (int) IntStream.range(0, s.length())\n                              .filter(n -> n % 2 == 0)\n                              .filter(n -> s.charAt(n) >= 'A' && s.charAt(n) <= 'Z')\n                              .filter(n -> s.charAt(n) == 'A' || s.charAt(n) == 'E' || s.charAt(n) == 'I' || s.charAt(n) == 'O' || s.charAt(n) == 'U')\n                              .count();",
        "grade-29": {
            "execution": 1
        },
        "25": "throw new RuntimeException(\"Not yet implemented\");",
        "grade-25": {
            "execution": 0
        },
        "162": "// TODO: Implement this method!\n        return 0;",
        "grade-162": {
            "execution": 0
        },
        "8": "int count = 0;\n        String vowels = \"AEIOU\";\n        // Implement this method\n        for (int i = 0; i < s.length(); i+=2) {\n            char ch = s.charAt(i);\n            if (Character.isUpperCase(ch) && vowels.indexOf(ch) != -1) {\n                count++;\n            }\n        }\n        return count;",
        "grade-8": {
            "execution": 1
        },
        "7": "return IntStream.range(0, s.length())\n            .filter(i -> {\n                char c = s.charAt(i);\n                return (c >= 'A' && c <= 'Z') && i % 2 == 0;\n            })\n            .count();",
        "grade-7": {
            "execution": 0
        },
        "26": "// TODO: Implement your solution here\n        return 0;",
        "grade-26": {
            "execution": 0
        },
        "71": "// TODO implement this method\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if ((s.charAt(i) == 'A' || s.charAt(i) == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U') && i % 2 == 0) {\n                count++;\n            }\n        }\n        return count;",
        "grade-71": {
            "execution": 1
        },
        "78": "// your code here\n        return 0;",
        "grade-78": {
            "execution": 0
        },
        "189": "int count = 0;\n        for (int i = 0; i < s.length(); i+=2) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c)) {\n                count++;\n            }\n        }\n        return count;",
        "grade-189": {
            "execution": 0
        },
        "65": "int vowelCount = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (i % 2 == 0) {\n                if (s.charAt(i) == 'A' || s.charAt(i) == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U') {\n                    vowelCount++;\n                }\n            }\n        }\n        return vowelCount;",
        "grade-65": {
            "execution": 1
        },
        "161": "int n = 0;\n        // Start with the second character.\n        // Then every other character after that.\n        for (int i = 1; i < s.length(); i += 2) {\n            if (Character.isUpperCase(s.charAt(i))) {\n                n++;\n            }\n        }\n        return n;",
        "grade-161": {
            "execution": 0
        },
        "74": "int result = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (i % 2 == 0 && s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n                result++;\n            }\n        }\n        return result;",
        "grade-74": {
            "execution": 0
        },
        "172": "return s.chars().filter(c -> (c >= 'A' && c <= 'Z') && c % 2 == 0).count();",
        "grade-172": {
            "execution": 0
        },
        "96": "return (int)s.chars().filter(x -> isUpper(x) && isEven(x)).count();",
        "grade-96": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String> separateParenGroups(String paren_string) {\n",
        "snippet": [
            "        List<String> result = new ArrayList<>();\n        StringBuilder current_string = new StringBuilder();\n        int current_depth = 0;\n\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                current_depth += 1;\n                current_string.append(c);\n            } else if (c == ')') {\n                current_depth -= 1;\n                current_string.append(c);\n\n                if (current_depth == 0) {\n                    result.add(current_string.toString());\n                    current_string.setLength(0);\n                }\n            }\n        }\n        return result;\n\n    }\n}"
        ],
        "simplified": "Input to this function is a string containing multiple groups of nested parentheses. Your goal is to separate those group into separate strings and return the list of those. Separate groups are balanced (each open brace is properly closed) and not nested within each other Ignore any spaces in the input string.",
        "task_id": "1",
        "183": "ArrayList<String> result = new ArrayList<String>();\n        int start = 0;\n        int end = paren_string.length();\n        int open = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') open++;\n            if (paren_string.charAt(i) == ')') open--;\n            if (open == 0) {\n                result.add(paren_string.substring(start, i + 1));\n                start = i + 1;\n            }\n        }\n        return result;",
        "grade-183": {
            "execution": 0
        },
        "29": "ArrayList<String> result = new ArrayList<String>();\n      int i = 0;\n      int last_index = 0;\n      while (i < paren_string.length()) {\n        if (paren_string.charAt(i) == '(') {\n          int j = i + 1;\n          int count = 1;\n          while (j < paren_string.length() && count > 0) {\n            if (paren_string.charAt(j) == '(') {\n              count += 1;\n            } else if (paren_string.charAt(j) == ')') {\n              count -= 1;\n            }\n            j += 1;\n          }\n          if (count == 0) {\n            result.add(paren_string.substring(i, j));\n            last_index = j;\n          }\n        }\n        i += 1;\n      }\n      return result;",
        "grade-29": {
            "execution": 0
        },
        "6": "// Start writing your code here\n        ArrayList<String> strArr = new ArrayList<String>();\n        StringBuilder tempString = new StringBuilder();\n        int i = 0;\n        while(i < paren_string.length()) {\n            if(paren_string.charAt(i) == '(') {\n                tempString.append('(');\n                int openBrackets = 1;\n                int closeBrackets = 0;\n                i++;\n                while(i < paren_string.length() && openBrackets != closeBrackets) {\n                    if(paren_string.charAt(i) == '(') {\n                        openBrackets++;\n                    } else if(paren_string.charAt(i) == ')') {\n                        closeBrackets++;\n                    }\n                    tempString.append(paren_string.charAt(i));\n                    i++;\n                }\n                strArr.add(tempString.toString());\n                tempString.setLength(0);\n            } else {\n                i++;\n            }\n        }\n        return strArr;",
        "grade-6": {
            "execution": 0
        },
        "75": "StringBuilder builder = new StringBuilder();\n        ArrayList<String> result = new ArrayList<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == ' ') {\n                continue;\n            }\n            if (paren_string.charAt(i) == '(') {\n                builder.append('(');\n            } else {\n                builder.append(')');\n            }\n        }\n        String s = builder.toString();\n        int left = 0;\n        int right = 0;\n        StringBuilder temp = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == '(') {\n                left++;\n            } else {\n                right++;\n            }\n            temp.append(s.charAt(i));\n            if (left == right) {\n                result.add(temp.toString());\n                temp = new StringBuilder();\n                left = 0;\n                right = 0;\n            }\n        }\n        return result;",
        "grade-75": {
            "execution": 1
        },
        "66": "// FILL IN YOUR CODE HERE.\n        return null;",
        "grade-66": {
            "execution": 0
        },
        "61": "ArrayList<String> groups = new ArrayList<String>();\n        return groups;",
        "grade-61": {
            "execution": 0
        },
        "37": "ArrayList<String> result = new ArrayList<String>();\n        // IMPLEMENT ME\n        String paren = \"\";\n        String curr = \"\";\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                curr += paren_string.charAt(i);\n                paren += paren_string.charAt(i);\n            } else if (paren_string.charAt(i) == ')') {\n                curr += paren_string.charAt(i);\n                if (paren.equals(curr)) {\n                    result.add(curr);\n                    curr = \"\";\n                    paren = \"\";\n                } else {\n                    if (paren.contains(curr)) {\n                        result.add(curr);\n                        curr = \"\";\n                    } else {\n                        curr = \"\";\n                    }\n                }\n            }\n        }\n        return result;",
        "grade-37": {
            "execution": 0
        },
        "27": "ArrayList<String> list = new ArrayList<String>();\n        int index = 0;\n        int prev = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                index += 1;\n            } else if (paren_string.charAt(i) == ')') {\n                index -= 1;\n            }\n            if (index == 0) {\n                list.add(paren_string.substring(prev, i + 1));\n                prev = i + 1;\n            }\n        }\n        return list;",
        "grade-27": {
            "execution": 0
        },
        "194": "// Your code here\n        ArrayList<String> output = new ArrayList<String>();\n        if (paren_string.length() == 0) return output;\n        if (paren_string.indexOf(' ') == -1) {\n            output.add(paren_string);\n            return output;\n        }\n        String[] paren_string_split = paren_string.split(\" \");\n        int start = 0;\n        int end = 0;\n        int current_open = 0;\n        int open_parens = 0;\n        int close_parens = 0;\n        while (start < paren_string_split.length) {\n            String current_char = paren_string_split[start];\n            if (current_char.equals(\"(\")) {\n                current_open++;\n                if (open_parens == 0) {\n                    open_parens++;\n                }\n            } else if (current_char.equals(\")\")) {\n                current_open--;\n                if (current_open == 0) {\n                    close_parens++;\n                }\n            }\n            start++;\n            if (open_parens == close_parens) {\n                String temp = String.join(\"\", Arrays.copyOfRange(paren_string_split, end, start));\n                output.add(temp);\n                end = start;\n                open_parens = 0;\n                close_parens = 0;\n            }\n        }\n        return output;",
        "grade-194": {
            "execution": 0
        },
        "156": "ArrayList<String> al = new ArrayList<String>();\n        int start_idx = 0;\n        int end_idx = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                start_idx = i;\n            }\n            if (paren_string.charAt(i) == ')') {\n                end_idx = i;\n                String s = paren_string.substring(start_idx, end_idx + 1);\n                al.add(s);\n            }\n        }\n        return al;",
        "grade-156": {
            "execution": 0
        },
        "23": "int cnt = 0;\n        String tmp = \"\";\n        String ans = \"\";\n        ArrayList<String> ans2 = new ArrayList<String>();\n        int start = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                tmp += \"(\";\n                cnt++;\n            } else if (paren_string.charAt(i) == ')') {\n                tmp += \")\";\n                cnt--;\n            }\n            if (cnt == 0) {\n                ans2.add(tmp);\n                tmp = \"\";\n            }\n        }\n        return ans2;",
        "grade-23": {
            "execution": 0
        },
        "170": "// WRITE YOUR CODE HERE!\n        return null;",
        "grade-170": {
            "execution": 0
        },
        "119": "ArrayList<String> all = new ArrayList<String>();\n        Stack<Character> stack = new Stack<Character>();\n        boolean in_parens = false;\n        String temp = \"\";\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                if (in_parens) {\n                    temp += c;\n                }\n                in_parens = true;\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.peek() == '(') {\n                    stack.pop();\n                    if (stack.empty()) {\n                        all.add(temp);\n                        temp = \"\";\n                        in_parens = false;\n                    } else {\n                        temp += c;\n                    }\n                }\n            } else if (c == ' ') {\n                if (in_parens) {\n                    temp += c;\n                }\n            }\n        }\n        return all;",
        "grade-119": {
            "execution": 0
        },
        "8": "// YOUR CODE HERE\n        //Do a for loop for the size of the string\n        // Initialize a counter\n        // If the index of the string is '(' then increment the counter\n        // If the index of the string is ')' then decrement the counter\n        // If the counter is 0 then add the index of the string to the final result\n        // If the counter is 0 then add the index of the string to the final result\n        int counter = 0;\n        ArrayList<String> finalResult = new ArrayList<String>();\n        String temp = \"\";\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                counter++;\n            } else if (paren_string.charAt(i) == ')') {\n                counter--;\n            }\n            if (counter == 0) {\n                finalResult.add(temp);\n                temp = \"\";\n            } else {\n                temp += paren_string.charAt(i);\n            }\n        }\n        return finalResult;",
        "grade-8": {
            "execution": 0
        },
        "7": "ArrayList<String> result = new ArrayList<String>();\n        String temp = \"\";\n        int open = 0;\n        int close = 0;\n        int size = paren_string.length();\n        for (int i = 0; i < size; i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n            } else if (paren_string.charAt(i) == ')') {\n                close++;\n            }\n            if (paren_string.charAt(i) != ' ') {\n                temp += paren_string.charAt(i);\n            }\n            if (open == close) {\n                result.add(temp);\n                temp = \"\";\n                open = 0;\n                close = 0;\n            }\n        }\n        return result;",
        "grade-7": {
            "execution": 0
        },
        "24": "throw new RuntimeException(\"Not implemented\");",
        "grade-24": {
            "execution": 0
        },
        "59": "ArrayList<String> ret = new ArrayList<String>();\n        int i = 0;\n        while (i < paren_string.length()) {\n            StringBuilder sb = new StringBuilder();\n            int c = 0;\n            while (i < paren_string.length()) {\n                if (paren_string.charAt(i) == '(') {\n                    sb.append(paren_string.charAt(i));\n                    c++;\n                } else if (paren_string.charAt(i) == ')') {\n                    sb.append(paren_string.charAt(i));\n                    c--;\n                }\n                i++;\n                if (c == 0) break;\n            }\n            ret.add(sb.toString());\n        }\n        return ret;",
        "grade-59": {
            "execution": 0
        },
        "63": "ArrayList<String> result = new ArrayList<String>();\n        int pos = 0;\n        while (pos < paren_string.length()) {\n            int lpos = paren_string.indexOf('(', pos);\n            if (lpos == -1) break;\n            pos = lpos + 1;\n            int rpos = findMatchingParen(paren_string, pos);\n            result.add(paren_string.substring(lpos, rpos + 1));\n            pos = rpos + 1;\n        }\n        return result;",
        "grade-63": {
            "execution": 0
        },
        "145": "ArrayList<String> arr = new ArrayList<String>();\n        int begin = 0;\n        int end = 0;\n        int paren_count = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                if (paren_count == 0) {\n                    begin = i;\n                }\n                paren_count++;\n            } else if (c == ')') {\n                paren_count--;\n                if (paren_count == 0) {\n                    end = i;\n                    arr.add(paren_string.substring(begin, end + 1));\n                }\n            }\n        }\n        return arr;",
        "grade-145": {
            "execution": 0
        },
        "173": "ArrayList<String> parens = new ArrayList<String>();\n        char[] chars = paren_string.toCharArray();\n        int left = 0;\n        int right = 0;\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] == '(') {\n                left++;\n            } else if (chars[i] == ')') {\n                right++;\n            }\n            if (left == right) {\n                parens.add(paren_string.substring(0, i + 1));\n                paren_string = paren_string.substring(i + 1, paren_string.length());\n                chars = paren_string.toCharArray();\n                i = -1;\n                left = 0;\n                right = 0;\n            }\n        }\n        return parens;",
        "grade-173": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // Input: 3\n    // Output: (1, 2)\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // Input: 12\n    // Output: (4, 6)\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    public static Pair<Integer, Integer> evenOddPalindrome(int n) {\n",
        "snippet": [
            "        int even_palindrome_count = 0, odd_palindrome_count = 0;\n\n        for (int i = 1; i <= n; i++) {\n            if (String.valueOf(i).equals(new StringBuilder(String.valueOf(i)).reverse().toString())) {\n                if (i % 2 == 1) {\n                    odd_palindrome_count += 1;\n                } else {\n                    even_palindrome_count += 1;\n                }\n            }\n        }\n        return Arrays.asList(even_palindrome_count, odd_palindrome_count);\n    }\n}"
        ],
        "simplified": "Given a positive integer n, return a tuple that has the number of even and odd integer palindromes that fall within the range(1, n), inclusive. Note: 1. 1 <= n <= 10^3 2. returned tuple has the number of even and odd integer palindromes respectively.",
        "task_id": "107",
        "33": "int[] evens = new int[n + 1];\n        int[] odds = new int[n + 1];\n        int e = 0;\n        int o = 0;\n        for (int i = 1; i <= n; i++) {\n            e = e + evens[i];\n            o = o + odds[i];\n            int j = i;\n            int s = i;\n            int d = 0;\n            if (i % 10 == 0) {\n                odds[i] = odds[i / 10];\n                evens[i] = evens[i / 10];\n                continue;\n            }\n            while (j > 0) {\n                d = d * 10 + j % 10;\n                j = j / 10;\n            }\n            if (s == d) {\n                evens[i] = 1;\n                odds[i] = 0;\n            } else {\n                odds[i] = 1;\n                evens[i] = 0;\n            }\n        }\n        return new Pair<Integer, Integer>(e, o);",
        "grade-33": {
            "execution": 0
        },
        "6": "int evenCount = 0;\n        int oddCount = 0;\n        for (int i = 1; i <= n; i++) {\n            String s = String.valueOf(i);\n            if (s.length() % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n        return new Pair<Integer, Integer>(evenCount, oddCount);",
        "grade-6": {
            "execution": 0
        },
        "87": "// Write your code here.\n        int evenCount = 0;\n        int oddCount = 0;\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n        return new Pair<Integer, Integer>(evenCount, oddCount);",
        "grade-87": {
            "execution": 0
        },
        "79": "int even = 0;\n        int odd = 0;\n        if (n <= 0) {\n            return Pair.with(even, odd);\n        }\n        if (n == 1) {\n            odd = 1;\n            return Pair.with(even, odd);\n        }\n        even = 1;\n        odd = n / 2;\n        if (n % 2 == 1) {\n            odd++;\n        }\n        return Pair.with(even, odd);",
        "grade-79": {
            "execution": 0
        },
        "73": "int evenPalindrome = 0;\n        int oddPalindrome = 0;\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenPalindrome++;\n                } else {\n                    oddPalindrome++;\n                }\n            }\n        }\n        return new Pair<Integer, Integer>(evenPalindrome, oddPalindrome);",
        "grade-73": {
            "execution": 0
        },
        "43": "int odd = 0;\n        int even = 0;\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        return new Pair<Integer, Integer>(even, odd);",
        "grade-43": {
            "execution": 0
        },
        "31": "if (n < 1 || n > (int) Math.pow(10, 3))\n            throw new IllegalArgumentException(\"Invalid Value for n\");\n        int countEven = 0;\n        int countOdd = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i == reverse(i)) {\n                if (i % 2 == 0) {\n                    countEven++;\n                } else {\n                    countOdd++;\n                }\n            }\n        }\n        return new Pair<Integer, Integer>(countEven, countOdd);",
        "grade-31": {
            "execution": 0
        },
        "191": "List<Integer> evens = new ArrayList<>();\n        List<Integer> odds = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evens.add(i);\n                } else {\n                    odds.add(i);\n                }\n            }\n        }\n        return new Pair<>(evens.size(), odds.size());",
        "grade-191": {
            "execution": 0
        },
        "25": "throw new UnsupportedOperationException(\"Method not implemented\");",
        "grade-25": {
            "execution": 0
        },
        "141": "int e = 0;\n        int o = 0;\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    e++;\n                } else {\n                    o++;\n                }\n            }\n        }\n        return new Pair<Integer, Integer>(e, o);",
        "grade-141": {
            "execution": 0
        },
        "8": "int odd = n / 2;\n        int even = odd;\n        if (n % 2 == 1) {\n            odd += 1;\n        }\n        return new Pair<Integer, Integer>(even, odd);",
        "grade-8": {
            "execution": 0
        },
        "7": "// Fill in your code here\n        return null;",
        "grade-7": {
            "execution": 0
        },
        "26": "// 1. Check whether the input is valid\n        if (n < 1 || n > Math.pow(10, 3)) {\n            throw new IllegalArgumentException(\"Not a valid input\");\n        }\n        // 2. Construct the list of integers from 1 to n\n        List<Integer> list = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            list.add(i);\n        }\n        // 3. Filter the list\n        List<Integer> even = list.stream().filter(ele -> ele % 2 == 0).collect(Collectors.toList());\n        List<Integer> odd = list.stream().filter(ele -> ele % 2 != 0).collect(Collectors.toList());\n        // 4. Count the number of palindromes\n        int evenCount = 0;\n        int oddCount = 0;\n        for (int i = 0; i < even.size(); i++) {\n            String str = Integer.toString(even.get(i));\n            StringBuilder sb = new StringBuilder(str);\n            if (str.equals(sb.reverse().toString())) {\n                evenCount++;\n            }\n        }\n        for (int i = 0; i < odd.size(); i++) {\n            String str = Integer.toString(odd.get(i));\n            StringBuilder sb = new StringBuilder(str);\n            if (str.equals(sb.reverse().toString())) {\n                oddCount++;\n            }\n        }\n        // 5. Return the result\n        return new Pair<Integer, Integer>(evenCount, oddCount);",
        "grade-26": {
            "execution": 0
        },
        "71": "// TODO: implement this method\n        // 1. Please do not change the method signature.\n        // 2. Hint: you can use String.valueOf(n) to get a string of n.\n        // 3. Hint: iterate over the range(1, n) and use String.valueOf(i) and String.valueOf(i).reverse() to check for\n        // a palindrome.\n        // 4. Hint: you can use Integer.parseInt() to convert a string to a int.\n        // 5. You do not need to use BigInteger or BigDecimal.\n        // 6. Please do not use any other methods from the JDK.\n        // 7. You can create your own classes if you need to.\n        // 8. You can also use any other third-party libraries.\n        // 9. Please do not change the access modifiers of any of the methods.\n        int even_counter = 0;\n        int odd_counter = 0;\n        for (int i = 1; i <= n; i++) {\n            String num = String.valueOf(i);\n            if (num.equals(new StringBuilder(num).reverse().toString())) {\n                if (i % 2 == 0)\n                    even_counter++;\n                else\n                    odd_counter++;\n            }\n        }\n        return new Pair<Integer, Integer>(even_counter, odd_counter);",
        "grade-71": {
            "execution": 0
        },
        "76": "int odd = 0;\n        int even = 0;\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (isEven(i)) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        return new Pair<Integer, Integer>(even, odd);",
        "grade-76": {
            "execution": 0
        },
        "173": "// Fill this in.\n        return null;",
        "grade-173": {
            "execution": 0
        },
        "65": "//\n        return null;",
        "grade-65": {
            "execution": 0
        },
        "140": "// ignore\n        return null;",
        "grade-140": {
            "execution": 0
        },
        "72": "// YOUR CODE HERE\n        return new Pair<Integer, Integer>(0, 0);",
        "grade-72": {
            "execution": 0
        },
        "152": "return new Pair<Integer, Integer>(evenPalindrome(n), oddPalindrome(n));",
        "grade-152": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two positive integers a and b, return the even digits between a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2, 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10, 14) => []\n    public static ArrayList<Integer> generateIntegers(int a, int b) {\n",
        "snippet": [
            "        int lower = Math.max(2, Math.min(a, b));\n        int upper = Math.min(8, Math.max(a, b));\n\n        List<Integer> result = new ArrayList<>();\n        for (int i = lower; i <= upper; i += 2) {\n            result.add(i);\n        }\n        return result;\n    }\n}"
        ],
        "simplified": "Given two positive integers a and b, return the even digits between a and b, in ascending order.",
        "task_id": "163",
        "29": "ArrayList<Integer> out = new ArrayList<Integer>();\n        if (a < b) {\n            int temp = a;\n            a = b;\n            b = temp;\n        }\n        for (int i = b; i <= a; i++) {\n            if (i % 2 == 0)\n                out.add(i);\n        }\n        return out;",
        "grade-29": {
            "execution": 0
        },
        "6": "ArrayList<Integer> list = new ArrayList<Integer>();\n        int min = Math.min(a, b);\n        int max = Math.max(a, b);\n        for (int i = min; i <= max; i++) {\n            if (i % 2 == 0) {\n                list.add(i);\n            }\n        }\n        return list;",
        "grade-6": {
            "execution": 0
        },
        "80": "ArrayList<Integer> output = new ArrayList<Integer>();\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                output.add(i);\n            }\n        }\n        return output;",
        "grade-80": {
            "execution": 0
        },
        "70": "// //your code here\n        // if (a == b) {\n        //     return new ArrayList<Integer>();\n        // }\n        // ArrayList<Integer> retval = new ArrayList<Integer>();\n        // int min = Math.min(a, b);\n        // int max = Math.max(a, b);\n        // if (min % 2 == 0) {\n        //     retval.add(min);\n        // }\n        // min++;\n        // while (min <= max) {\n        //     retval.add(min);\n        //     min += 2;\n        // }\n        // return retval;\n        return IntStream.rangeClosed(Math.min(a, b), Math.max(a, b))\n            .filter(x -> x % 2 == 0)\n            .boxed()\n            .collect(Collectors.toCollection(ArrayList::new));",
        "grade-70": {
            "execution": 0
        },
        "65": "ArrayList<Integer> evens = new ArrayList<Integer>();\n        if (a <= b) {\n            for (int i = a; i <= b; i++) {\n                if (i % 2 == 0) {\n                    evens.add(i);\n                }\n            }\n        } else {\n            for (int i = b; i <= a; i++) {\n                if (i % 2 == 0) {\n                    evens.add(i);\n                }\n            }\n        }\n        return evens;",
        "grade-65": {
            "execution": 0
        },
        "37": "// code here\n        ArrayList<Integer> v = new ArrayList<Integer>();\n        if (a <= b) {\n            int i = a;\n            while (i <= b) {\n                if (i % 2 == 0) {\n                    v.add(i);\n                }\n                i++;\n            }\n        } else {\n            int i = b;\n            while (i <= a) {\n                if (i % 2 == 0) {\n                    v.add(i);\n                }\n                i++;\n            }\n        }\n        return v;",
        "grade-37": {
            "execution": 0
        },
        "27": "ArrayList<Integer> result = new ArrayList<Integer>();\n        int min = Math.min(a, b);\n        int max = Math.max(a, b);\n        for (int i = min; i <= max; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;",
        "grade-27": {
            "execution": 0
        },
        "170": "int lower = Math.min(a, b);\n        int upper = Math.max(a, b);\n        ArrayList<Integer> answer = new ArrayList<Integer>();\n        for (int i = lower; i <= upper; i++) {\n            if (i % 2 == 0) {\n                answer.add(i);\n            }\n        }\n        return answer;",
        "grade-170": {
            "execution": 0
        },
        "23": "int min = Math.min(a, b);\n        int max = Math.max(a, b);\n        ArrayList<Integer> list = new ArrayList<Integer>();\n        for (int i = min; i <= max; i++) {\n            if (i % 2 == 0) list.add(i);\n        }\n        return list;",
        "grade-23": {
            "execution": 0
        },
        "187": "ArrayList<Integer> result = new ArrayList<Integer>();\n        // Implement your solution here.\n        return result;",
        "grade-187": {
            "execution": 0
        },
        "130": "ArrayList<Integer> result = new ArrayList<Integer>();\n        // Todo: Implement solution\n        return result;",
        "grade-130": {
            "execution": 0
        },
        "9": "if (a > b) {\n            int c = a;\n            a = b;\n            b = c;\n        }\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;",
        "grade-9": {
            "execution": 0
        },
        "7": "return generateIntegersRec(a, b, new ArrayList<Integer>());",
        "grade-7": {
            "execution": 0
        },
        "24": "ArrayList<Integer> output = new ArrayList<Integer>();\n        if (a > b) {\n            int temp = a;\n            a = b;\n            b = temp;\n        }\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                output.add(i);\n            }\n        }\n        return output;",
        "grade-24": {
            "execution": 0
        },
        "63": "ArrayList<Integer> ret = new ArrayList<Integer>();\n        int smaller, larger;\n        if (a < b) {\n            smaller = a;\n            larger = b;\n        } else {\n            smaller = b;\n            larger = a;\n        }\n        while (smaller <= larger) {\n            if (smaller % 2 == 0)\n                ret.add(smaller);\n            smaller++;\n        }\n        return ret;",
        "grade-63": {
            "execution": 0
        },
        "67": "ArrayList<Integer> result = new ArrayList<Integer>();\n        int start = a < b ? a : b;\n        int end = a < b ? b : a;\n        for (int i = start; i <= end; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;",
        "grade-67": {
            "execution": 0
        },
        "157": "ArrayList<Integer> ans = new ArrayList<Integer>();\n        if (a > b) {\n            return generateIntegers(b, a);\n        }\n        for (int x = a; x <= b; x++) {\n            if (x % 2 == 0) {\n                ans.add(x);\n            }\n        }\n        return ans;",
        "grade-157": {
            "execution": 0
        },
        "190": "// Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Integer> results = new ArrayList<Integer>();\n        int start = (a <= b) ? a : b;\n        int end = (a <= b) ? b : a;\n        for (int i = start; i <= end; i++) {\n            if (i % 2 == 0) {\n                results.add(i);\n            }\n        }\n        return results;",
        "grade-190": {
            "execution": 0
        },
        "174": "// Enter your code here\n        ArrayList<Integer> list = new ArrayList<Integer>();\n        if (a>b) {\n            int temp = a;\n            a = b;\n            b = temp;\n        }\n        if (a%2!=0) a++;\n        for (int i=a; i<=b; i+=2) {\n            list.add(i);\n        }\n        return list;",
        "grade-174": {
            "execution": 0
        },
        "56": "ArrayList<Integer> result = new ArrayList<Integer>();\n        int min, max;\n        if (a < b) {\n            min = a;\n            max = b;\n        } else {\n            min = b;\n            max = a;\n        }\n        for (int i = min; i <= max; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;",
        "grade-56": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    // >>> intersperse([], 4)\n    // []\n    // >>> intersperse([1, 2, 3], 4)\n    // [1, 4, 2, 4, 3]\n    public static ArrayList<Integer> intersperse(ArrayList<Integer> numbers, int delimeter) {\n",
        "snippet": [
            "        if (numbers.size() == 0) {\n            return List.of();\n        }\n        List<Integer> result = new ArrayList<>(List.of());\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            result.add(numbers.get(i));\n            result.add(delimiter);\n        }\n\n        result.add(numbers.get(numbers.size() - 1));\n\n        return result;\n    }\n}"
        ],
        "simplified": "Insert a number 'delimeter' between every two consecutive elements of input list `numbers'",
        "task_id": "5",
        "34": "if (numbers.size() == 0) return numbers;\n        ArrayList<Integer> ret = new ArrayList<>();\n        ret.add(numbers.get(0));\n        for (int i = 1; i < numbers.size(); i++) {\n            ret.add(delimeter);\n            ret.add(numbers.get(i));\n        }\n        return ret;",
        "grade-34": {
            "execution": 1
        },
        "6": "ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i < numbers.size() - 1)\n                result.add(delimeter);\n        }\n        return result;",
        "grade-6": {
            "execution": 1
        },
        "93": "if (numbers.size() == 0) return numbers;\n        ArrayList<Integer> result = new ArrayList<>();\n        result.add(numbers.get(0));\n        for (int i = 1; i < numbers.size(); i++) {\n            result.add(delimeter);\n            result.add(numbers.get(i));\n        }\n        return result;",
        "grade-93": {
            "execution": 1
        },
        "76": "if (numbers.size() == 0) return numbers;\n        return intersperseHelper(numbers, delimeter, 0);",
        "grade-76": {
            "execution": 0
        },
        "70": "return intersperse(numbers, delimeter, new ArrayList<Integer>());",
        "grade-70": {
            "execution": 0
        },
        "42": "ArrayList<Integer> ans = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            ans.add(numbers.get(i));\n            if (i < numbers.size() - 1) ans.add(delimeter);\n        }\n        return ans;",
        "grade-42": {
            "execution": 1
        },
        "31": "ArrayList<Integer> result = new ArrayList<Integer>();\n        if (numbers.size() == 0) {\n            return result;\n        }\n        result.add(numbers.get(0));\n        for (int i = 1; i < numbers.size(); i++) {\n            result.add(delimeter);\n            result.add(numbers.get(i));\n        }\n        return result;",
        "grade-31": {
            "execution": 1
        },
        "199": "// >>> intersperse([1, 2, 3], 4)\n        // [1, 4, 2, 4, 3]\n        if (numbers.size() <= 1) {\n            return numbers;\n        } else {\n            ArrayList<Integer> result = new ArrayList<Integer>();\n            result.add(numbers.get(0));\n            for (int i = 1; i < numbers.size(); i++) {\n                result.add(delimeter);\n                result.add(numbers.get(i));\n            }\n            return result;\n        }",
        "grade-199": {
            "execution": 1
        },
        "23": "ArrayList<Integer> l = new ArrayList<Integer>();\n        for (int i = 0; i < numbers.size(); i++) {\n            l.add(numbers.get(i));\n            if (i != numbers.size() - 1) {\n                l.add(delimeter);\n            }\n        }\n        return l;",
        "grade-23": {
            "execution": 1
        },
        "153": "ArrayList<Integer> newNumbers = new ArrayList<Integer>();\n        for (int i = 0; i < numbers.size(); i++) {\n            newNumbers.add(numbers.get(i));\n            if (i != numbers.size() - 1) {\n                newNumbers.add(delimeter);\n            }\n        }\n        return newNumbers;",
        "grade-153": {
            "execution": 1
        },
        "8": "ArrayList<Integer> res = new ArrayList<Integer>();\n        for (int i = 0; i < numbers.size(); i++) {\n            res.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                res.add(delimeter);\n            }\n        }\n        return res;",
        "grade-8": {
            "execution": 1
        },
        "7": "// YOUR CODE HERE\n        return null;",
        "grade-7": {
            "execution": 0
        },
        "26": "ArrayList<Integer> result = new ArrayList<Integer>();\n        int size = numbers.size();\n        if (size == 0) return result;\n        for (int i = 0; i < size - 1; i++) {\n            result.add(numbers.get(i));\n            result.add(delimeter);\n        }\n        result.add(numbers.get(size - 1));\n        return result;",
        "grade-26": {
            "execution": 1
        },
        "68": "ArrayList<Integer> output = new ArrayList<Integer>();\n        int n = numbers.size();\n        if (n == 0) {\n            return output;\n        }\n        if (n == 1) {\n            output.add(numbers.get(0));\n            return output;\n        }\n        for (int i = 0; i < n; i++) {\n            if (i == 0) {\n                output.add(numbers.get(i));\n            } else {\n                output.add(delimeter);\n                output.add(numbers.get(i));\n            }\n        }\n        return output;",
        "grade-68": {
            "execution": 1
        },
        "72": "ArrayList<Integer> a = new ArrayList<Integer>();\n        if (numbers.size() == 0) {\n            return a;\n        }\n        a.add(numbers.get(0));\n        for (int i = 1; i < numbers.size(); i++) {\n            a.add(delimeter);\n            a.add(numbers.get(i));\n        }\n        return a;",
        "grade-72": {
            "execution": 1
        },
        "185": "// YOUR CODE HERE\n        // add your code here\n        if (numbers.size() <= 1) {\n            return numbers;\n        }\n        ArrayList<Integer> newNums = new ArrayList<Integer>();\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            newNums.add(numbers.get(i));\n            newNums.add(delimeter);\n        }\n        newNums.add(numbers.get(numbers.size() - 1));\n        return newNums;",
        "grade-185": {
            "execution": 1
        },
        "61": "ArrayList<Integer> result = new ArrayList<Integer>();\n        if (numbers.size() < 2) {\n            return numbers;\n        }\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            result.add(numbers.get(i));\n            result.add(delimeter);\n        }\n        result.add(numbers.get(numbers.size() - 1));\n        return result;",
        "grade-61": {
            "execution": 1
        },
        "152": "// your code here\n        if (numbers.size() == 0) {\n            return numbers;\n        }\n        for (int i = numbers.size() - 1; i > 0; i--) {\n            numbers.add(i, delimeter);\n        }\n        return numbers;",
        "grade-152": {
            "execution": 1
        },
        "69": "if (numbers.size() <= 1) {\n            return numbers;\n        }\n        ArrayList<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            result.add(numbers.get(i));\n            result.add(delimeter);\n        }\n        result.add(numbers.get(numbers.size() - 1));\n        return result;",
        "grade-69": {
            "execution": 1
        },
        "165": "ArrayList<Integer> output = new ArrayList<Integer>();\n        for (int i = 0; i < numbers.size(); i++) {\n            output.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                output.add(delimeter);\n            }\n        }\n        return output;",
        "grade-165": {
            "execution": 1
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a given list of integers, generate a list of rolling maximum element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static ArrayList<Integer> rollingMax(ArrayList<Integer> numbers) {\n",
        "snippet": [
            "        List<Integer> result = new ArrayList<>();\n        if (numbers.size() == 0) {\n            return result;\n        }\n        int rollingMax = numbers.get(0);\n        result.add(rollingMax);\n\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) > rollingMax) {\n                rollingMax = numbers.get(i);\n            }\n            result.add(rollingMax);\n        }\n\n        return result;\n    }\n}"
        ],
        "simplified": "From a given list of integers, generate a list of rolling maximum element found until given moment in the sequence.",
        "task_id": "9",
        "170": "ArrayList<Integer> result = new ArrayList<>();\n        int max = 0;\n        for (int i = 0; i < numbers.size(); i++) {\n            max = Math.max(max, numbers.get(i));\n            result.add(max);\n        }\n        return result;",
        "grade-170": {
            "execution": 1
        },
        "28": "ArrayList<Integer> max_values = new ArrayList<Integer>();\n        // Use a special data structure that maintains the order of items based on the inserted\n        // element.\n        TreeSet<Integer> rolling_maximums = new TreeSet<Integer>();\n        for (int number : numbers) {\n            // Add the new number to the rolling maximums list.\n            rolling_maximums.add(number);\n            // The maximum element in the list is the last element of the set (that is, the largest\n            // element).\n            max_values.add(rolling_maximums.last());\n        }\n        return max_values;",
        "grade-28": {
            "execution": 1
        },
        "6": "ArrayList<Integer> result = new ArrayList<Integer>();\n        Deque<Integer> q = new ArrayDeque<Integer>();\n\n        int max = numbers.get(0);\n        q.add(numbers.get(0));\n        result.add(numbers.get(0));\n\n        for (int i = 1; i < numbers.size(); i++) {\n            int curr = numbers.get(i);\n            max = Math.max(max, curr);\n            while (q.peek() < curr) {\n                q.removeFirst();\n            }\n            q.add(curr);\n            result.add(max);\n        }\n        return result;",
        "grade-6": {
            "execution": 0
        },
        "199": "if (numbers.size() == 0) {\n            return numbers;\n        }\n        // TODO: Write your code here.\n        ArrayList<Integer> result = new ArrayList<>();\n        int max = numbers.get(0);\n        result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n            max = Math.max(max, numbers.get(i));\n            result.add(max);\n        }\n        return result;",
        "grade-199": {
            "execution": 1
        },
        "71": "ArrayList<Integer> result = new ArrayList<Integer>();\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < numbers.size(); i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n            result.add(max);\n        }\n        return result;",
        "grade-71": {
            "execution": 1
        },
        "63": "ArrayList<Integer> result = new ArrayList<Integer>();\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < numbers.size(); i++) {\n            max = Math.max(max, numbers.get(i));\n            result.add(max);\n        }\n        return result;",
        "grade-63": {
            "execution": 1
        },
        "58": "return null;",
        "grade-58": {
            "execution": 0
        },
        "35": "// Check if list empty\n        if (numbers.size() == 0) {\n            return numbers;\n        }\n        // Prepare result list\n        ArrayList<Integer> rollingMaxs = new ArrayList<Integer>();\n        // For each element in list\n        for (int i = 0; i < numbers.size(); i++) {\n            // Add element to result list\n            rollingMaxs.add(numbers.get(i));\n            // Check next elements in list and replace if found bigger number\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (numbers.get(j) > rollingMaxs.get(i)) {\n                    rollingMaxs.set(i, numbers.get(j));\n                }\n            }\n        }\n        return rollingMaxs;",
        "grade-35": {
            "execution": 0
        },
        "198": "int[] a = numbers.stream().mapToInt(i -> i).toArray();\n        ArrayList<Integer> answer = new ArrayList<>();\n        int max = a[0];\n        answer.add(max);\n        for (int i = 1; i < a.length; i++) {\n            if (a[i] > max) max = a[i];\n            answer.add(max);\n        }\n        return answer;",
        "grade-198": {
            "execution": 0
        },
        "26": "ArrayList<Integer> result = new ArrayList<Integer>();\n        Deque<Integer> deque = new ArrayDeque<Integer>();\n        int i = 0;\n        while (i < numbers.size()) {\n            if (deque.isEmpty()) {\n                deque.addLast(i);\n            } else {\n                while (!deque.isEmpty() && numbers.get(deque.peekLast()) < numbers.get(i)) {\n                    deque.removeLast();\n                }\n                deque.addLast(i);\n            }\n            result.add(numbers.get(deque.peekFirst()));\n            i++;\n        }\n        return result;",
        "grade-26": {
            "execution": 1
        },
        "181": "ArrayList<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            int max = 0;\n            for (int j = 0; j <= i; j++) {\n                if (numbers.get(j) > max) {\n                    max = numbers.get(j);\n                }\n            }\n            result.add(max);\n        }\n        return result;",
        "grade-181": {
            "execution": 1
        },
        "144": "ArrayList<Integer> maxes = new ArrayList<Integer>();\n        Integer max = Integer.MIN_VALUE;\n        for (Integer num : numbers) {\n            if (num > max) {\n                max = num;\n            }\n            maxes.add(max);\n        }\n        return maxes;",
        "grade-144": {
            "execution": 1
        },
        "22": "ArrayList<Integer> result = new ArrayList<>();\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < numbers.size(); i++) {\n            max = Math.max(max, numbers.get(i));\n            result.add(max);\n        }\n        return result;",
        "grade-22": {
            "execution": 1
        },
        "157": "var result = new ArrayList<Integer>();\n        if (numbers.size() == 0) return result;\n        var localMax = numbers.get(0);\n        result.add(localMax);\n        for (int i = 1; i < numbers.size(); i++) {\n            var number = numbers.get(i);\n            if (number > localMax) {\n                localMax = number;\n            }\n            result.add(localMax);\n        }\n        return result;",
        "grade-157": {
            "execution": 1
        },
        "109": "ArrayList<Integer> result = new ArrayList<Integer>();\n        ArrayList<Integer> state = new ArrayList<Integer>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (state.size() == 0) {\n                state.add(numbers.get(i));\n            } else {\n                if (numbers.get(i) > state.get(state.size() - 1)) {\n                    state.add(numbers.get(i));\n                } else {\n                    state.add(state.get(state.size() - 1));\n                }\n            }\n            result.add(state.get(state.size() - 1));\n        }\n        return result;",
        "grade-109": {
            "execution": 1
        },
        "8": "ArrayList<Integer> result = new ArrayList<>();\n        Integer max = 0;\n        for (Integer n : numbers) {\n            max = Math.max(max, n);\n            result.add(max);\n        }\n        return result;",
        "grade-8": {
            "execution": 1
        },
        "7": "ArrayList<Integer> result = new ArrayList<Integer>();\n        int max = numbers.get(0);\n        result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n            result.add(max);\n        }\n        return result;",
        "grade-7": {
            "execution": 0
        },
        "23": "// TODO: Fill in this function\n        ArrayList<Integer> res = new ArrayList<Integer>();\n        if (numbers.size() == 0) {\n            return res;\n        }\n        res.add(numbers.get(0));\n        for (int i = 1; i < numbers.size(); i++) {\n            res.add(Math.max(res.get(i - 1), numbers.get(i)));\n        }\n        return res;",
        "grade-23": {
            "execution": 1
        },
        "56": "ArrayList<Integer> max = new ArrayList<Integer>();\n        max.add(numbers.get(0));\n        for (int i = 1; i < numbers.size(); i++) {\n            max.add(Math.max(max.get(i - 1), numbers.get(i)));\n        }\n        return max;",
        "grade-56": {
            "execution": 0
        },
        "60": "ArrayList<Integer> result = new ArrayList<Integer>();\n        // roll the result\n        int lastMax = numbers.get(0);\n        result.add(lastMax);\n        for (int i = 1; i < numbers.size(); i++) {\n            lastMax = Math.max(lastMax, numbers.get(i));\n            result.add(lastMax);\n        }\n        return result;",
        "grade-60": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int n) {\n",
        "snippet": [
            "        int largest = 1;\n        for (int j = 2; j <= n; j++) {\n            if (n % j == 0) {\n                boolean is_prime = j >= 2;\n                for (int i = 2; i < j - 1; i++) {\n                    if (j % i == 0) {\n                        is_prime = false;\n                        break;\n                    }\n                }\n                if (is_prime) {\n                    largest = Math.max(largest, j);\n                }\n            }\n        }\n        return largest;\n    }\n}"
        ],
        "simplified": "Return the largest prime factor of n. Assume n > 1 and is not a prime.",
        "task_id": "59",
        "190": "int result = 0;\n        if (n % 2 == 0) {\n            result = 2;\n            n /= 2;\n            while (n % 2 == 0) {\n                n /= 2;\n            }\n        }\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) {\n                result = i;\n                n /= i;\n                while (n % i == 0) {\n                    n /= i;\n                }\n            }\n        }\n        if (n > 2) {\n            result = n;\n        }\n        return result;",
        "grade-190": {
            "execution": 1
        },
        "29": "for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                int d = n / i;\n                if (isPrime(d)) {\n                    return d;\n                }\n            }\n        }\n        return -1;",
        "grade-29": {
            "execution": 0
        },
        "6": "for (int i = 2; i < Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return largestPrimeFactor(n / i);\n            }\n        }\n        return n;",
        "grade-6": {
            "execution": 0
        },
        "77": "int best = 0;\n        for (int i = 2; i <= n / i; i++) {\n            while (n % i == 0) {\n                best = i;\n                n /= i;\n            }\n        }\n        if (n > 1) best = n;\n        return best;",
        "grade-77": {
            "execution": 1
        },
        "69": "// YOUR CODE HERE\n        return -1;",
        "grade-69": {
            "execution": 0
        },
        "64": "if (n < 4) {\n            return 1;\n        }\n\n        int largestPrimeFactor = 1;\n        for (int i = 2; i <= n / 2; i++) {\n            if (isPrime(i) && n % i == 0) {\n                largestPrimeFactor = i;\n            }\n        }\n\n        return largestPrimeFactor;",
        "grade-64": {
            "execution": 0
        },
        "36": "ArrayList<Integer> primes = Utils.getPrimes(n);\n        int m = -1;\n        for (int i = primes.size() - 1; i >= 0; i--) {\n            if (n % primes.get(i) == 0) {\n                m = primes.get(i);\n                break;\n            }\n        }\n        return m;",
        "grade-36": {
            "execution": 0
        },
        "26": "// The largest prime factor of n has to be <= sqrt(n).\n        // Try all primes <= sqrt(n).\n        int limit = (int) Math.sqrt(n);\n        int largest = -1;\n        for (int i = 2; i <= limit; i++) {\n            if (n % i == 0 && Problem.isPrime(i)) {\n                largest = i;\n            }\n        }\n        return largest;",
        "grade-26": {
            "execution": 0
        },
        "159": "int ans = 0;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            while (n % i == 0) {\n                ans = i;\n                n /= i;\n            }\n        }\n        if (n > 1) ans = n;\n        return ans;",
        "grade-159": {
            "execution": 1
        },
        "22": "return 0;",
        "grade-22": {
            "execution": 0
        },
        "177": "throw new UnsupportedOperationException(\"Delete this line and implement this function.\");",
        "grade-177": {
            "execution": 0
        },
        "119": "if (n < 2) return 0;\n        int maxPrime = 2;\n        // Divide out all 2's:\n        while (n % 2 == 0) {\n            n /= 2;\n        }\n        // Try dividing out all other primes:\n        for (int i = 3; i <= n; i += 2) {\n            while (n % i == 0) {\n                maxPrime = i;\n                n /= i;\n            }\n        }\n        return maxPrime;",
        "grade-119": {
            "execution": 1
        },
        "8": "int prime = 1;\n        int curr = n;\n        while (curr % 2 == 0) {\n            prime = 2;\n            curr /= 2;\n        }\n        int i = 3;\n        while (i * i <= curr) {\n            if (curr % i == 0) {\n                prime = i;\n                curr /= i;\n            } else {\n                i += 2;\n            }\n        }\n        return prime;",
        "grade-8": {
            "execution": 0
        },
        "7": "int max = 1;\n        while (n % 2 == 0) {\n            max = 2;\n            n /= 2;\n        }\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n                max = i;\n                n /= i;\n            }\n        }\n        if (n > 2) {\n            max = n;\n        }\n        return max;",
        "grade-7": {
            "execution": 1
        },
        "23": "List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                factors.add(i);\n            }\n        }\n        return largestPrimeFactorHelper(n, factors);",
        "grade-23": {
            "execution": 0
        },
        "61": "ArrayList<Integer> factors = new ArrayList<Integer>();\n        for (int i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        return factors.get(factors.size() - 1);",
        "grade-61": {
            "execution": 1
        },
        "66": "int largestPrimeFactor = 1;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                n /= i;\n                largestPrimeFactor = i;\n            }\n        }\n        return largestPrimeFactor;",
        "grade-66": {
            "execution": 0
        },
        "148": "int f = 2;\n        while (n % f != 0) {\n            f += 1;\n        }\n        return f;",
        "grade-148": {
            "execution": 0
        },
        "180": "int i;\n        for (i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                n /= i;\n                i--;\n            }\n        }\n        return i;",
        "grade-180": {
            "execution": 1
        },
        "164": "return largestPrimeFactorHelper(n, 2);",
        "grade-164": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    // For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    // For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    // For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    // For lst = [0,81,12,3,1,21] the output should be 3\n    // For lst = [0,8,1,2,1,7] the output should be 7\n    public static int skjkasdkd(ArrayList<Integer> lst) {\n",
        "snippet": [
            "        int maxx = 0;\n        for (int i : lst) {\n            if (i > maxx) {\n                boolean isPrime = i != 1;\n                for (int j = 2; j < Math.sqrt(i) + 1; j++) {\n                    if (i % j == 0) {\n                        isPrime = false;\n                        break;\n                    }\n                }\n                if (isPrime) {\n                    maxx = i;\n                }\n            }\n        }\n        int sum = 0;\n        for (char c : String.valueOf(maxx).toCharArray()) {\n            sum += (c - '0');\n        }\n        return sum;\n    }\n}"
        ],
        "simplified": "You are given a list of integers. You need to find the largest prime value and return the sum of its digits.",
        "task_id": "94",
        "168": "if (lst.size() == 0) {\n            return 0;\n        }\n        // 1. Get the largest prime number.\n        int max = lst.stream().max(Comparator.naturalOrder()).get();\n        // 2. Write a method that checks if a given number is prime.\n        boolean isPrime = max == 2 || max % 2 != 0 && IntStream.rangeClosed(3, (int) Math.sqrt(max)).filter(n -> max % n == 0).count() == 0;\n        // 3. If the max number is not prime, get the next highest prime number.\n        if (!isPrime) {\n            return skjkasdkd(new ArrayList<Integer>(lst.stream().filter(e -> e < max).collect(Collectors.toList())));\n        }\n        // 4. Find the sum of digits for the found prime number.\n        return max;",
        "grade-168": {
            "execution": 0
        },
        "29": "// your code here\n        lst.sort(Comparator.reverseOrder());\n        boolean notprime = true;\n        int i = 0;\n        for (; i < lst.size(); i++) {\n            if (lst.get(i) <= 1) {\n                continue;\n            }\n            int cur = lst.get(i);\n            for (int j = 2; j <= Math.sqrt(cur); j++) {\n                if (cur % j == 0) {\n                    notprime = false;\n                    break;\n                }\n            }\n            if (notprime) {\n                break;\n            }\n            notprime = true;\n        }\n        return i < lst.size() ? lst.get(i) : 0;",
        "grade-29": {
            "execution": 0
        },
        "6": "ArrayList<Integer> primes = new ArrayList<Integer>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (isPrime(lst.get(i))) {\n                primes.add(lst.get(i));\n            }\n        }\n        int prime = Collections.max(primes);\n        int sum = 0;\n        while (prime > 0) {\n            sum += prime % 10;\n            prime /= 10;\n        }\n        return sum;",
        "grade-6": {
            "execution": 0
        },
        "199": "int ans = 0;\n        // Write your code here\n        return ans;",
        "grade-199": {
            "execution": 0
        },
        "72": "// TODO add code here\n        int sum = 0;\n        for (int i : lst) {\n            if (isPrime(i))\n                sum += i;\n        }\n        return sum;",
        "grade-72": {
            "execution": 0
        },
        "64": "// Math.sqrt\n        // Integer.valueOf\n        // Character.getNumericValue\n        // String.valueOf\n        // String.toCharArray\n        // String.split\n        // String.format\n        // arraylist.size\n        // arraylist.get\n        // StringBuilder.append\n        // StringBuilder.toString\n        // arraylist.set\n        // arraylist.remove\n        // arraylist.add\n        // arraylist.contains\n        // arraylist.indexOf\n        // arraylist.lastIndexOf\n        // arraylist.sort\n        // arraylist.stream\n        // arraylist.map\n        // arraylist.collect\n        // arraylist.reduce\n        // arraylist.count\n        // arraylist.filter\n        // arraylist.forEach\n        // arraylist.iterator\n        // arraylist.spliterator\n        // Optional.ofNullable\n        // Integer.bitCount\n        // Integer.rotateLeft\n        // Integer.rotateRight\n        // Integer.toBinaryString\n        // Integer.toHexString\n        // Integer.toUnsignedString\n        // Integer.highestOneBit\n        // Integer.lowestOneBit\n        // Integer.numberOfLeadingZeros\n        // Integer.numberOfTrailingZeros\n        // Integer.reverse\n        // Integer.reverseBytes\n        // Integer.signum\n        // Integer.sum\n        // Integer.toUnsignedLong\n        // Integer.divideUnsigned\n        // Integer.remainderUnsigned\n        // Integer.compareUnsigned\n        // Integer.parseUnsignedInt\n        // Integer.toUnsignedString\n        // Integer.hashCode\n        // Arrays.binarySearch\n        // Arrays.copyOf\n        // Arrays.copyOfRange\n        // Arrays.equals\n        // Arrays.fill\n        // Arrays.sort\n        // Arrays.hashCode\n        // Arrays.stream\n        // Character.charCount\n        // Character.codePointAt\n        // Character.codePointBefore\n        // Character.codePointCount\n        // Character.compare\n        // Character.digit\n        // Character.forDigit\n        // Character.getDirectionality\n        // Character.get",
        "grade-64": {
            "execution": 0
        },
        "59": "int largest_prime = 2;\n        for (int item : lst) {\n            if (isPrime(item) && item > largest_prime) {\n                largest_prime = item;\n            }\n        }\n        return Integer.toString(largest_prime).chars().map(c -> c - '0').sum();",
        "grade-59": {
            "execution": 0
        },
        "36": "// Write your code here.\n        int result = -1;\n        return result;",
        "grade-36": {
            "execution": 0
        },
        "198": "// sort\n        Collections.sort(lst);\n        // now find the first prime\n        int i;\n        for (i = lst.size() - 1; i >= 0; i--) {\n            if (isPrime(lst.get(i))) {\n                break;\n            }\n        }\n        // now if not found, just return 0\n        if (i < 0) {\n            return 0;\n        }\n        // otherwise just add the digits\n        return addDigits(lst.get(i));",
        "grade-198": {
            "execution": 0
        },
        "27": "// implement me\n        return 0;",
        "grade-27": {
            "execution": 0
        },
        "180": "lst.sort(Collections.reverseOrder());\n        int largestPrime = 0;\n        while (lst.size() > 0) {\n            int value = lst.get(0);\n            if (isPrime(value)) {\n                largestPrime = value;\n                break;\n            }\n            lst.remove(0);\n        }\n        return sumDigits(largestPrime);",
        "grade-180": {
            "execution": 0
        },
        "142": "int largestPrime = 0;\n        int largestPrimeSumOfDigits = 0;\n        ArrayList<Integer> listOfPrimes = new ArrayList<Integer>();\n        for (int x = 0; x < lst.size(); x++) {\n            for (int y = 0; y < lst.size(); y++) {\n                if (x != y) {\n                    if (isPrime(lst.get(x) + lst.get(y))) {\n                        if (lst.get(x) + lst.get(y) > largestPrime) {\n                            largestPrime = lst.get(x) + lst.get(y);\n                        }\n                    }\n                }\n            }\n        }\n        while (largestPrime > 0) {\n            largestPrimeSumOfDigits += largestPrime % 10;\n            largestPrime /= 10;\n        }\n        return largestPrimeSumOfDigits;",
        "grade-142": {
            "execution": 0
        },
        "23": "int ret = 0;\n        return ret;",
        "grade-23": {
            "execution": 0
        },
        "155": "ArrayList<Integer> primes = new ArrayList<Integer>();\n        for (int i = 2; i < 100000; i++) {\n            boolean isPrime = true;\n            for (int j = 2; j < i; j++) {\n                if (i % j == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                primes.add(i);\n            }\n        }\n        System.out.println(primes);\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        return max;",
        "grade-155": {
            "execution": 0
        },
        "111": "// first find the largest prime number\n        HashSet<Integer> primes = new HashSet<Integer>();\n        for (int i = 0; i < lst.size(); i++) {\n            int num = lst.get(i);\n            if (isPrime(num)) {\n                primes.add(num);\n            }\n        }\n        // now return the sum of the digits in that number\n        int val = 0;\n        // find the largest prime\n        for (int num : primes) {\n            if (num > val) {\n                val = num;\n            }\n        }\n        // we have the largest number, we need to sum it\n        int rtn = 0;\n        while (val > 0) {\n            rtn += val % 10;\n            val /= 10;\n        }\n        return rtn;",
        "grade-111": {
            "execution": 0
        },
        "8": "int max = lst.stream().max(Integer::compare).get();\n        for (int i = 2; i < max; i++) {\n            boolean isPrime = true;\n            for (int j = 2; j < i; j++) {\n                if (i % j == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                System.out.println(i);\n            }\n        }\n        return 0;",
        "grade-8": {
            "execution": 0
        },
        "7": "// Type your code here\n      List<Integer> copy = new ArrayList<Integer>(lst);\n      Set<Integer> primes = new HashSet<Integer>();\n      for (int i = 0; i < copy.size(); i++) {\n        int candidate = copy.get(i);\n        for (int j = 2; j <= Math.sqrt(candidate); j++) {\n          if (candidate % j == 0) {\n            primes.add(candidate);\n            break;\n          }\n        }\n      }\n      primes.forEach(e -> copy.remove(e));\n      copy.sort((a, b) -> b - a);\n      int sum = 0;\n      while (copy.get(0) > 0) {\n        sum += copy.get(0) % 10;\n        copy.set(0, copy.get(0) / 10);\n      }\n      return sum;",
        "grade-7": {
            "execution": 1
        },
        "24": "// int max = Collections.max(lst);\n        // int sum = 0;\n        // for (int i = 0; i < lst.size(); i++) {\n        //     if (isPrime(lst.get(i))) {\n        //         if (lst.get(i) > max) {\n        //             max = lst.get(i);\n        //         }\n        //     }\n        // }\n        // String temp = String.valueOf(max);\n        // for (int i = 0; i < temp.length(); i++) {\n        //     sum += Character.getNumericValue(temp.charAt(i));\n        // }\n        // return sum;\n        int largest = -1;\n        for (int i = 0; i < lst.size(); i++) {\n            if (isPrime(lst.get(i))) {\n                if (lst.get(i) > largest) {\n                    largest = lst.get(i);\n                }\n            }\n        }\n        String s = String.valueOf(largest);\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            sum += Character.getNumericValue(s.charAt(i));\n        }\n        return sum;",
        "grade-24": {
            "execution": 0
        },
        "57": "Integer max = Collections.max(lst);\n        return getDigitSum(getPrime(max));",
        "grade-57": {
            "execution": 0
        },
        "61": "// Ok so if the question was find the greatest prime number, then use a isPrime function,\n        // and have a max_prime, and just check every number.\n        // That was not the question.\n        // The question was find the largest prime and sum its digits.\n        // That means we have to iterate through the list twice, once to find the prime, and once to get the sum.\n        int biggestPrime = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int num = lst.get(i);\n            if (isPrime(num) && num > biggestPrime) {\n                biggestPrime = num;\n            }\n        }\n        // System.out.println(biggestPrime);\n        int sum = 0;\n        String str = String.valueOf(biggestPrime);\n        for (int i = 0; i < str.length(); i++) {\n            char c = str.charAt(i);\n            sum += Character.getNumericValue(c);\n        }\n        return sum;",
        "grade-61": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given a list of integers.\n    // Write a function next_smallest() that returns the 2nd smallest element of the list.\n    // Return None if there is no such element.\n    // next_smallest([1, 2, 3, 4, 5]) == 2\n    // next_smallest([5, 1, 4, 3, 2]) == 2\n    // next_smallest([]) == None\n    // next_smallest([1, 1]) == None\n    public static Optional<Integer> nextSmallest(ArrayList<Integer> lst) {\n",
        "snippet": [
            "                Set < Integer > set = new HashSet<>(lst);\n        List<Integer> l = new ArrayList<>(set);\n        Collections.sort(l);\n        if (l.size() < 2) {\n            return Optional.empty();\n        } else {\n            return Optional.of(l.get(1));\n        }\n    }\n}"
        ],
        "simplified": "You are given a list of integers. Write a function next_smallest() that returns the 2nd smallest element of the list. Return None if there is no such element.",
        "task_id": "90",
        "187": "if (lst.size() <= 1) {\n            return Optional.empty();\n        }\n        lst.sort(null);\n        // int sma = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) != lst.get(i - 1)) {\n                return Optional.of(lst.get(i));\n            }\n        }\n        return Optional.empty();",
        "grade-187": {
            "execution": 0
        },
        "30": "// replace this by your code\n        return null;",
        "grade-30": {
            "execution": 0
        },
        "6": "return lst.stream().distinct().sorted().skip(1).findFirst();",
        "grade-6": {
            "execution": 0
        },
        "83": "ArrayList<Integer> sorted = new ArrayList<>(lst);\n        Collections.sort(sorted);\n        Integer min = sorted.get(0);\n        Integer min2 = null;\n        for (Integer i : sorted) {\n            if (i > min) {\n                min2 = i;\n                break;\n            }\n        }\n        return Optional.ofNullable(min2);",
        "grade-83": {
            "execution": 0
        },
        "71": "if (lst.size() == 0) {\n            return Optional.empty();\n        }\n        if (lst.size() == 1) {\n            return Optional.empty();\n        }\n        if (lst.size() == 2) {\n            if (lst.get(0) == lst.get(1)) {\n                return Optional.empty();\n            }\n        }\n        // System.out.println(lst);\n        HashSet<Integer> set = new HashSet<>();\n        for (int i = 0; i < lst.size(); i++) {\n            set.add(lst.get(i));\n        }\n        ArrayList<Integer> arr = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            arr.add(lst.get(i));\n        }\n        Collections.sort(arr);\n        // System.out.println(arr);\n        // System.out.println(set);\n        int count = 0;\n        int idx = 0;\n        while (idx < arr.size()) {\n            if (set.contains(arr.get(idx))) {\n                count++;\n                if (count == 2) {\n                    return Optional.of(arr.get(idx));\n                }\n            }\n            idx++;\n        }\n        return Optional.empty();",
        "grade-71": {
            "execution": 0
        },
        "64": "throw new RuntimeException(\"Not implemented yet\");",
        "grade-64": {
            "execution": 0
        },
        "37": "int smallest = lst.get(0);\n        int second_smallest = -1;\n        for (int i = 1; i < lst.size(); i++) {\n            int n = lst.get(i);\n            if (n < smallest) {\n                second_smallest = smallest;\n                smallest = n;\n            } else if (n > smallest && (second_smallest == -1 || n < second_smallest)) {\n                second_smallest = n;\n            }\n        }\n        if (second_smallest == -1) {\n            return Optional.empty();\n        } else {\n            return Optional.of(second_smallest);\n        }",
        "grade-37": {
            "execution": 0
        },
        "28": "if (lst.size() <= 1) return Optional.empty();\n        HashSet<Integer> seen = new HashSet<Integer>();\n        Optional<Integer> min = Optional.empty();\n        int minIdx = -1;\n        for (int i = 0; i < lst.size(); i++) {\n            int cur = lst.get(i);\n            if (seen.contains(cur)) return Optional.empty();\n            if (!min.isPresent() || cur < min.get()) {\n                min = Optional.of(cur);\n                minIdx = i;\n            }\n            seen.add(cur);\n        }\n        Optional<Integer> sec = Optional.empty();\n        for (int i = 0; i < lst.size(); i++) {\n            if (i == minIdx) continue;\n            int cur = lst.get(i);\n            if (!sec.isPresent() || cur < sec.get()) {\n                sec = Optional.of(cur);\n            }\n        }\n        return sec;",
        "grade-28": {
            "execution": 0
        },
        "199": "if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\n        Integer smallest = lst.get(0);\n        Integer secondSmallest = null;\n        for (Integer i : lst) {\n            if (i <= smallest) {\n                secondSmallest = smallest;\n                smallest = i;\n            } else if (secondSmallest == null || i < secondSmallest) {\n                secondSmallest = i;\n            }\n        }\n\n        return Optional.ofNullable(secondSmallest);",
        "grade-199": {
            "execution": 0
        },
        "160": "// your code here\n        return Optional.empty();",
        "grade-160": {
            "execution": 0
        },
        "23": "Optional<Integer> nextSmallest = Optional.empty();\n        Optional<Integer> smallest = Optional.empty();\n        for (Integer n : lst) {\n            if (!smallest.isPresent() || n < smallest.get()) {\n                smallest = Optional.of(n);\n            } else if (!nextSmallest.isPresent() || n < nextSmallest.get()) {\n                nextSmallest = Optional.of(n);\n            }\n        }\n        return nextSmallest;",
        "grade-23": {
            "execution": 0
        },
        "174": "if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\n        ArrayList<Integer> sorted = new ArrayList<Integer>(lst);\n        Collections.sort(sorted);\n\n        Integer first = sorted.get(0);\n        for (Integer i : sorted) {\n            if (!i.equals(first)) {\n                return Optional.of(i);\n            }\n        }\n\n        return Optional.empty();",
        "grade-174": {
            "execution": 0
        },
        "124": "if (lst.size() <= 1) {\n            return Optional.empty();\n        }\n        int smallest = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < smallest) {\n                smallest = lst.get(i);\n            }\n        }\n        ArrayList<Integer> smallerThanSmallest = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > smallest) {\n                smallerThanSmallest.add(lst.get(i));\n            }\n        }\n        if (smallerThanSmallest.size() == 0) {\n            return Optional.empty();\n        }\n        int nextSmallest = smallerThanSmallest.get(0);\n        for (int i = 1; i < smallerThanSmallest.size(); i++) {\n            if (smallerThanSmallest.get(i) < nextSmallest) {\n                nextSmallest = smallerThanSmallest.get(i);\n            }\n        }\n        return Optional.of(nextSmallest);",
        "grade-124": {
            "execution": 0
        },
        "8": "// Write the code for this function.\n        if (lst.size() <= 1) {\n            return Optional.empty();\n        }\n        if (lst.size() == 2) {\n            return Optional.of(lst.get(1));\n        }\n        Integer min = lst.get(0);\n        Integer min2 = Integer.MAX_VALUE;\n        for (Integer i : lst) {\n            if (i < min) {\n                min2 = min;\n                min = i;\n            } else if (i < min2) {\n                min2 = i;\n            }\n        }\n        if (min2 != Integer.MAX_VALUE) {\n            return Optional.of(min2);\n        }\n        return Optional.empty();",
        "grade-8": {
            "execution": 0
        },
        "7": "// TODO: Implement nextSmallest here\n        return Optional.empty();",
        "grade-7": {
            "execution": 0
        },
        "24": "if (lst.size() == 0) {\n            return Optional.empty();\n        } else if (lst.size() == 1) {\n            return Optional.empty();\n        } else {\n            int first = lst.get(0);\n            for (int i = 1; i < lst.size(); i++) {\n                if (lst.get(i) < first) {\n                    return Optional.of(first);\n                } else {\n                    first = lst.get(i);\n                }\n            }\n            return Optional.empty();\n        }",
        "grade-24": {
            "execution": 0
        },
        "61": "// TODO\n        // Hint: You can use sorted(lst).\n        if (lst.size() <= 1) {\n            return Optional.empty();\n        } else {\n            Collections.sort(lst);\n            int first = lst.get(0);\n            int second = lst.get(1);\n            int firstNum = 0;\n            int secondNum = 0;\n            for (int i : lst) {\n                if (i == first) {\n                    firstNum += 1;\n                } else if (i == second) {\n                    secondNum += 1;\n                }\n            }\n            if (first == second) {\n                return Optional.empty();\n            } else {\n                return Optional.of(lst.get(firstNum));\n            }\n        }",
        "grade-61": {
            "execution": 0
        },
        "68": "Collections.sort(lst);\n        ArrayList<Integer> unique = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (i == 0 || lst.get(i) != lst.get(i - 1)) {\n                unique.add(lst.get(i));\n            }\n        }\n        if (unique.size() < 2) {\n            return Optional.empty();\n        }\n        return Optional.of(unique.get(1));",
        "grade-68": {
            "execution": 0
        },
        "148": "if (lst.size() < 2) {\n            return Optional.empty();\n        }\n        Collections.sort(lst);\n        if (lst.get(0) == lst.get(1)) {\n            return Optional.empty();\n        }\n        return Optional.of(lst.get(1));",
        "grade-148": {
            "execution": 0
        },
        "177": "if (lst.size() < 2) {\n            return Optional.empty();\n        }\n        Optional<Integer> min = Optional.of(lst.get(0));\n        Optional<Integer> nextMin = Optional.empty();\n        for (int i = 1; i < lst.size(); i++) {\n            int n = lst.get(i);\n            if (n < min.get()) {\n                nextMin = min;\n                min = Optional.of(n);\n            } else if (n < nextMin.orElse(n)) {\n                nextMin = Optional.of(n);\n            }\n        }\n        return nextMin;",
        "grade-177": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Change numerical base of input number x to base.\n    // return string representation after the conversion.\n    // base numbers are less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static String changeBase(int x, int base) {\n",
        "snippet": [
            "        StringBuilder ret = new StringBuilder();\n        while (x > 0) {\n            ret.append(String.valueOf(x % base));\n            x /= base;\n        }\n        return ret.reverse().toString();\n    }\n}"
        ],
        "simplified": "Change numerical base of input number x to base. return string representation after the conversion. base numbers are less than 10.",
        "task_id": "44",
        "135": "String ans = \"\";\n\t    while (x != 0) {\n\t        ans = (x % base) + ans;\n\t        x /= base;\n\t    }\n\t    return ans;",
        "grade-135": {
            "execution": 1
        },
        "20": "StringBuilder answer = new StringBuilder();\n        while (x > 0) {\n            answer.append(x % base);\n            x /= base;\n        }\n        return answer.reverse().toString();",
        "grade-20": {
            "execution": 1
        },
        "5": "return Integer.toString(x, base);",
        "grade-5": {
            "execution": 1
        },
        "151": "StringBuilder ans = new StringBuilder();\n        while (x > 0) {\n            ans.append(x % base);\n            x /= base;\n        }\n        return ans.reverse().toString();",
        "grade-151": {
            "execution": 1
        },
        "51": "String result = \"\";\n        while (x != 0) {\n            result = String.valueOf(x % base) + result;\n            x /= base;\n        }\n        return result;",
        "grade-51": {
            "execution": 1
        },
        "43": "// given a number x and base, convert it to base.\n        //\n        // >>> change_base(8, 3)\n        // '22'\n        // >>> change_base(8, 2)\n        // '1000'\n        // >>> change_base(7, 2)\n        // '111'\n        //\n\n        if (x < 0)\n            return \"\";\n        if (x < base)\n            return \"\" + x;\n        else\n            return changeBase(x / base, base) + (x % base);",
        "grade-43": {
            "execution": 1
        },
        "40": "// write your code here\n        return null;",
        "grade-40": {
            "execution": 0
        },
        "23": "StringBuilder sb = new StringBuilder();\n        while (x != 0) {\n            sb.append(x % base);\n            x /= base;\n        }\n        return sb.reverse().toString();",
        "grade-23": {
            "execution": 1
        },
        "19": "if (x < base) {\n            return Integer.toString(x);\n        }\n        int tail = x % base;\n        int rest = x / base;\n        return changeBase(rest, base) + Integer.toString(tail);",
        "grade-19": {
            "execution": 1
        },
        "141": "String ans = \"\";\n        do {\n            ans = (x % base) + ans;\n            x /= base;\n        } while (x > 0);\n        return ans;",
        "grade-141": {
            "execution": 1
        },
        "191": "if (x == 0) return \"0\";\n        String res = \"\";\n        while (x > 0) {\n            res = x % base + res;\n            x /= base;\n        }\n        return res;",
        "grade-191": {
            "execution": 1
        },
        "113": "int quotient = x;\n        String result = \"\";\n        while (quotient > 0) {\n            int remainder = quotient % base;\n            quotient = quotient / base;\n            result = Integer.toString(remainder) + result;\n        }\n        return result;",
        "grade-113": {
            "execution": 1
        },
        "15": "String result = \"\";\n        while (x > 0) {\n            result = x % base + result;\n            x /= base;\n        }\n        return result;",
        "grade-15": {
            "execution": 1
        },
        "122": "StringBuilder binary = new StringBuilder();\n        do {\n            binary.append(x % base);\n            x /= base;\n        } while (x > 0);\n        return binary.reverse().toString();",
        "grade-122": {
            "execution": 1
        },
        "83": "String ans = \"\";\n        while (x != 0) {\n            int reminder = x % base;\n            ans = ans + Integer.toString(reminder);\n            x = x / base;\n        }\n        return ans;",
        "grade-83": {
            "execution": 0
        },
        "6": "// TODO: Fill in your code here.\n        // hint: use % and /\n        if (x == 0) return \"0\";\n        int tmp = x;\n        StringBuilder builder = new StringBuilder();\n        while (tmp > 0) {\n            builder.append(tmp % base);\n            tmp /= base;\n        }\n        return builder.reverse().toString();",
        "grade-6": {
            "execution": 1
        },
        "39": "if (x < base) return Integer.toString(x);\n        int n = x / base;\n        int k = x % base;\n        return changeBase(n, base) + Integer.toString(k);",
        "grade-39": {
            "execution": 1
        },
        "41": "return new BigInteger(Integer.toString(x)).toString(base);",
        "grade-41": {
            "execution": 1
        },
        "104": "String res = \"\";\n        int i = 0;\n        while (x > 0) {\n            int rem = x % base;\n            x = x / base;\n            res = rem + res;\n        }\n        return res;",
        "grade-104": {
            "execution": 1
        },
        "126": "if (x == 0) return \"0\";\n        String s = \"\";\n        while (x > 0) {\n            s = x % base + s;\n            x /= base;\n        }\n        return s;",
        "grade-126": {
            "execution": 1
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    // 1\n    public static int isBored(String S) {\n",
        "snippet": [
            "        String [] sentences = S.split(\"[.?!]\\s*\");\n        int count = 0;\n        for (String sentence : sentences) {\n            if (sentence.subSequence(0, 2).equals(\"I \")) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n}"
        ],
        "simplified": "You'll be given a string of words, and your task is to count the number of boredoms. A boredom is a sentence that starts with the word \"I\". Sentences are delimited by '.', '?' or '!'.",
        "task_id": "91",
        "169": "int count = 0;\n        int c = 0;\n        for (int i = 0; i < S.length(); i++) {\n            if (S.charAt(i) == 'I') {\n                c++;\n            }\n            if (S.charAt(i) == '.' || S.charAt(i) == '?' || S.charAt(i) == '!') {\n                count += c;\n                c = 0;\n            }\n        }\n        return count;",
        "grade-169": {
            "execution": 0
        },
        "30": "// Split the string into sentences and count the number that start with\n        // 'I'.\n        return (int) Arrays.stream(S.split(\"\\\\.|\\\\?|!\"))\n            .filter(s -> s.trim().startsWith(\"I\"))\n            .count();",
        "grade-30": {
            "execution": 0
        },
        "6": "String[] split = S.split(\"[.?!]\");\n        int count = 0;\n        for (String s : split) {\n            if (s.trim().startsWith(\"I\")) {\n                count++;\n            }\n        }\n        return count;",
        "grade-6": {
            "execution": 0
        },
        "196": "// Split the string by the possible characters used to end a sentence.\n        String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n        int boredoms = 0;\n        for (String sentence : sentences) {\n            // The sentence has a boredom if it starts with the word \"I\".\n            if (sentence.trim().startsWith(\"I\")) {\n                boredoms++;\n            }\n        }\n        return boredoms;",
        "grade-196": {
            "execution": 0
        },
        "72": "int boredoms = 0;\n        Pattern boredomPattern = Pattern.compile(\"^I\\\\s\");\n        String[] sentences = S.split(\"[.?!]\");\n        for (String sentence : sentences) {\n            Matcher matcher = boredomPattern.matcher(sentence);\n            if (matcher.find()) boredoms++;\n        }\n        return boredoms;",
        "grade-72": {
            "execution": 0
        },
        "64": "int n = 0;\n        String[] s = S.split(\"\\\\.|\\\\?|\\\\!\");\n        for (int i = 0; i < s.length; i++) {\n            String[] l = s[i].split(\" \");\n            if (l.length > 0 && l[0].equals(\"I\")) {\n                n++;\n            }\n        }\n        return n;",
        "grade-64": {
            "execution": 0
        },
        "59": "String[] ss = S.split(\"[.!?]\");\n        int count = 0;\n        for (String s : ss) {\n            if (s.trim().startsWith(\"I\")) {\n                count++;\n            }\n        }\n        return count;",
        "grade-59": {
            "execution": 0
        },
        "37": "return (int) Arrays.stream(S.split(\"\\\\.\")).map(String::trim).filter(s -> s.startsWith(\"I\")).count();",
        "grade-37": {
            "execution": 0
        },
        "195": "return (int) Arrays.stream(S.split(\"\\\\.\")).map(i -> i.trim()).filter(i -> i.startsWith(\"I\")).count();",
        "grade-195": {
            "execution": 0
        },
        "28": "int count = 0;\n        String[] arr = S.split(\"[.?!]\");\n        for (String s : arr) {\n            if (s.trim().startsWith(\"I\")) {\n                count++;\n            }\n        }\n        return count;",
        "grade-28": {
            "execution": 0
        },
        "179": "// Your code here.\n        int count = 0;\n        String[] arr = S.split(\"(?<=[!?.])\\\\s*\");\n        for (String s : arr) {\n            if (s.split(\" \")[0].equals(\"I\")) {\n                count++;\n            }\n        }\n        return count;",
        "grade-179": {
            "execution": 1
        },
        "144": "return (int)Stream.of(S.split(\"[.!?]\"))\n            .filter(s -> s.startsWith(\"I\"))\n            .count();",
        "grade-144": {
            "execution": 0
        },
        "24": "int c = 0;\n        for (String s : S.split(\"[.?!]\")) {\n            if (s.trim().startsWith(\"I\")) c++;\n        }\n        return c;",
        "grade-24": {
            "execution": 0
        },
        "156": "return (int)Arrays.stream(S.split(\"[\\\\.\\\\?!]\"))\n                          .filter(x -> x.startsWith(\"I\")).count();",
        "grade-156": {
            "execution": 0
        },
        "112": "char[] d = {'.', '?', '!'};\n        String[] ss = S.split(\"\\\\s+\");\n        int count = 0;\n        for (int i = 0; i < ss.length; i++) {\n            if (ss[i].equals(\"I\")) {\n                while (i < ss.length && !Arrays.asList(d).contains(ss[i].charAt(ss[i].length() - 1))) {\n                    i++;\n                }\n                count++;\n            }\n        }\n        return count;",
        "grade-112": {
            "execution": 0
        },
        "8": "// Write your code here\n        return 0;",
        "grade-8": {
            "execution": 0
        },
        "7": "return 0;",
        "grade-7": {
            "execution": 0
        },
        "25": "return (int)Arrays.stream(S.split(\"[.!?]\"))\n            .filter(w -> w.trim().startsWith(\"I\"))\n            .count();",
        "grade-25": {
            "execution": 0
        },
        "57": "int count = 0;\n        if (S.length() == 0) {\n            return count;\n        }\n        String[] sentences = S.split(\"[.?!]\");\n        for (String sentence : sentences) {\n            if (sentence.split(\" \")[0].equals(\"I\")) {\n                count++;\n            }\n        }\n        return count;",
        "grade-57": {
            "execution": 0
        },
        "61": "int boredoms = 0;\n        S = S.trim();\n        int len = S.length();\n        int i = 0;\n        int previ = 0;\n        while (i < len) {\n            while (i < len && (S.charAt(i) != '.' && S.charAt(i) != '?' && S.charAt(i) != '!')) {\n                i++;\n            }\n            if (i < len) {\n                String sentence = S.substring(previ, i);\n                if (sentence.startsWith(\"I\")) {\n                    boredoms++;\n                }\n                i++;\n                previ = i;\n            }\n        }\n        return boredoms;",
        "grade-61": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement a function that takes an non-negative integer and returns an array of the first n\n    // integers that are prime numbers and less than n.\n    // for example:\n    // count_up_to(5) => [2,3]\n    // count_up_to(11) => [2,3,5,7]\n    // count_up_to(0) => []\n    // count_up_to(20) => [2,3,5,7,11,13,17,19]\n    // count_up_to(1) => []\n    // count_up_to(18) => [2,3,5,7,11,13,17]\n    public static ArrayList<Integer> countUpTo(int n) {\n",
        "snippet": [
            "        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < n; i++) {\n            boolean is_prime = true;\n            for (int j = 2; j < i; j++) {\n                if (i % j == 0) {\n                    is_prime = false;\n                    break;\n                }\n            }\n            if (is_prime) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n}"
        ],
        "simplified": "Implement a function that takes an non-negative integer and returns an array of the first n integers that are prime numbers and less than n. for",
        "task_id": "96",
        "28": "// Just to get you started, here's a basic boolean function to tell you if a number is prime\n        // it's not written very well and is really inefficient, but it works\n        boolean isPrime(int a) {\n            if (a < 2) {\n                return false;\n            }\n            for (int i = 2; i < a; i++) {\n                if (a % i == 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        ArrayList<Integer> list = new ArrayList<Integer>();\n        for (int i = 0; i < n; i++) {\n            if (isPrime(i)) {\n                list.add(i);\n            }\n        }\n        return list;",
        "grade-28": {
            "execution": 0
        },
        "6": "ArrayList<Integer> primes = new ArrayList<Integer>();\n        int limit = n + 1;\n        boolean[] composites = new boolean[limit];\n        for (int i = 2; i < limit; i++) {\n            if (!composites[i]) {\n                primes.add(i);\n                for (int j = i * 2; j < limit; j += i) {\n                    composites[j] = true;\n                }\n            }\n        }\n        return primes;",
        "grade-6": {
            "execution": 0
        },
        "79": "if (n < 2) return new ArrayList<Integer>();\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        boolean[] isPrime = new boolean[n + 1];\n        for (int i = 2; i <= n; i++) isPrime[i] = true;\n        for (int factor = 2; factor * factor <= n; factor++) {\n            if (isPrime[factor]) {\n                for (int j = factor; factor * j <= n; j++) {\n                    isPrime[factor * j] = false;\n                }\n            }\n        }\n        for (int i = 2; i <= n; i++) if (isPrime[i]) result.add(i);\n        return result;",
        "grade-79": {
            "execution": 0
        },
        "71": "int [] p = new int[n];\n        Arrays.fill(p, 1);\n        int count = 0;\n        int i = 2;\n        while (i * i <= n) {\n            if (p[i] == 1) {\n                int k = i * i;\n                while (k <= n) {\n                    p[k] = 0;\n                    k += i;\n                }\n            }\n            i++;\n        }\n        ArrayList<Integer> ret = new ArrayList<>();\n        for (int j = 2; j < n; j++) {\n            if (p[j] == 1) {\n                ret.add(j);\n            }\n        }\n        return ret;",
        "grade-71": {
            "execution": 0
        },
        "64": "ArrayList<Integer> ret = new ArrayList<Integer>();\n        if (n < 2) {\n            return ret;\n        }\n        for (int i = 2; i < n; i++) {\n            boolean isPrime = true;\n            for (int j = 2; j < i; j++) {\n                if (i % j == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                ret.add(i);\n            }\n        }\n        return ret;",
        "grade-64": {
            "execution": 1
        },
        "37": "ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 1; i < n; i++) {\n            if (isPrime(i)) {\n                result.add(i);\n            }\n        }\n        return result;",
        "grade-37": {
            "execution": 0
        },
        "26": "//TODO\n        if (n < 2) {\n            return new ArrayList<Integer>();\n        }\n\n        ArrayList<Integer> primes = new ArrayList<Integer>();\n        primes.add(2);\n\n        for (int i = 3; i < n; i++) {\n            boolean isPrime = true;\n            for (int j = 0; j < primes.size(); j++) {\n                if (i % primes.get(j) == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                primes.add(i);\n            }\n        }\n\n        return primes;",
        "grade-26": {
            "execution": 1
        },
        "167": "int k = (int) Math.sqrt(n);\n        boolean[] isPrime = new boolean[n + 1];\n        isPrime[2] = true;\n        for (int i = 3; i <= k; i += 2) {\n            isPrime[i] = true;\n        }\n        for (int i = 3, s = 2; i <= k; i += s, s = 2) {\n            if (isPrime[i]) {\n                for (int j = i * i; j <= n; j += i) {\n                    isPrime[j] = false;\n                }\n            }\n        }\n        ArrayList<Integer> primes = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime[i]) {\n                primes.add(i);\n            }\n        }\n        return primes;",
        "grade-167": {
            "execution": 0
        },
        "22": "ArrayList<Integer> answer = new ArrayList<Integer>();\n        for (int i = 2; i < n; i++) {\n            boolean isPrime = true;\n            for (int j = 2; j < i; j++) {\n                if (i % j == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) answer.add(i);\n        }\n        return answer;",
        "grade-22": {
            "execution": 1
        },
        "185": "// write your code here\n        return null;",
        "grade-185": {
            "execution": 0
        },
        "125": "// implementation here\n        return null;",
        "grade-125": {
            "execution": 0
        },
        "8": "throw new RuntimeException(\"NOT IMPLEMENTED\");",
        "grade-8": {
            "execution": 0
        },
        "7": "// Your code here\n        return null;",
        "grade-7": {
            "execution": 0
        },
        "23": "ArrayList<Integer> result = new ArrayList<Integer>();\n        int i = 2;\n        while (i < n) {\n            boolean isPrime = true;\n            for (int j = 2; j < i; j++) {\n                if (i % j == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                result.add(i);\n            }\n            i++;\n        }\n        return result;",
        "grade-23": {
            "execution": 1
        },
        "61": "ArrayList<Integer> result = new ArrayList<Integer>();\n        if (n < 2) {\n            return result;\n        }\n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                result.add(i);\n            }\n        }\n        return result;",
        "grade-61": {
            "execution": 0
        },
        "68": "ArrayList<Integer> primes = new ArrayList<Integer>();\n        if (n < 2) {\n            return primes;\n        }\n        primes.add(2);\n        for (int i = 3; i < n; i++) {\n            int j = 0;\n            for (; j < primes.size(); j++) {\n                if (i % primes.get(j) == 0) {\n                    break;\n                }\n            }\n            if (j == primes.size()) {\n                primes.add(i);\n            }\n        }\n        return primes;",
        "grade-68": {
            "execution": 1
        },
        "152": "// Implement your solution here\n        // sieve of eratosthenes\n        if (n <= 1) {\n            return new ArrayList<Integer>();\n        }\n        ArrayList<Integer> primes = new ArrayList<Integer>();\n        ArrayList<Integer> composites = new ArrayList<Integer>();\n        for (int i = 2; i < n; i++) {\n            if (!composites.contains(i)) {\n                primes.add(i);\n                for (int j = i; j < n; j += i) {\n                    composites.add(j);\n                }\n            }\n        }\n        return primes;",
        "grade-152": {
            "execution": 1
        },
        "188": "if (n <= 1) {\n            return new ArrayList<Integer>();\n        }\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                result.add(i);\n            }\n        }\n        return result;",
        "grade-188": {
            "execution": 0
        },
        "171": "ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 2; i < n; i++) {\n            int k = 0;\n            for (int j = 2; j <= i / 2; j++) {\n                if (i % j == 0) {\n                    k = 1;\n                    break;\n                }\n            }\n            if (k == 0)\n                result.add(i);\n        }\n        return result;",
        "grade-171": {
            "execution": 1
        },
        "54": "ArrayList<Integer> primeNumbers = new ArrayList<Integer>();\n        if (n < 2) {\n            return primeNumbers;\n        }\n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                primeNumbers.add(i);\n            }\n        }\n        return primeNumbers;",
        "grade-54": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1, 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    public static ArrayList<Integer> incrList(ArrayList<Integer> l) {\n",
        "snippet": [
            "        return l.stream().map(p -> p + 1).collect(Collectors.toList());\n    }\n}"
        ],
        "simplified": "Return list with elements incremented by 1.",
        "task_id": "42",
        "134": "ArrayList<Integer> res = new ArrayList<Integer>();\n        for (int x : l) {\n            res.add(x + 1);\n        }\n        return res;",
        "grade-134": {
            "execution": 1
        },
        "16": "ArrayList<Integer> output = new ArrayList<Integer>();\n        for (int x : l) {\n            output.add(x + 1);\n        }\n        return output;",
        "grade-16": {
            "execution": 1
        },
        "3": "ArrayList<Integer> temp = new ArrayList<Integer>();\n        for (int i : l)\n            temp.add(i + 1);\n        return temp;",
        "grade-3": {
            "execution": 1
        },
        "164": "ArrayList<Integer> res = new ArrayList<Integer>();\n        for (int v : l) {\n            res.add(v + 1);\n        }\n        return res;",
        "grade-164": {
            "execution": 1
        },
        "50": "ArrayList<Integer> incr = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            incr.add(l.get(i) + 1);\n        }\n        return incr;",
        "grade-50": {
            "execution": 1
        },
        "40": "ArrayList<Integer> result = new ArrayList<Integer>();\n      // TODO: implement this function\n      return result;",
        "grade-40": {
            "execution": 0
        },
        "36": "for (int i = 0; i < l.size(); i++) {\n            l.set(i, l.get(i) + 1);\n        }\n        return l;",
        "grade-36": {
            "execution": 1
        },
        "19": "return l.stream().map(x -> x + 1).collect(Collectors.toCollection(ArrayList::new));",
        "grade-19": {
            "execution": 1
        },
        "15": "ArrayList<Integer> incr = new ArrayList<Integer>();\n        for (int x : l) {\n            incr.add(x + 1);\n        }\n        return incr;",
        "grade-15": {
            "execution": 1
        },
        "143": "ArrayList<Integer> nl = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            nl.add(l.get(i) + 1);\n        }\n        return nl;",
        "grade-143": {
            "execution": 1
        },
        "108": "ArrayList<Integer> m = new ArrayList<Integer>();\n        for (int x : l) {\n            m.add(x + 1);\n        }\n        return m;",
        "grade-108": {
            "execution": 1
        },
        "12": "ArrayList<Integer> ans = new ArrayList<Integer>();\n        for (int x : l) {\n            ans.add(x + 1);\n        }\n        return ans;",
        "grade-12": {
            "execution": 1
        },
        "120": "int n = l.size();\n        for (int i = 0; i < n; i++) {\n            l.set(i, l.get(i) + 1);\n        }\n        return l;",
        "grade-120": {
            "execution": 1
        },
        "81": "ArrayList<Integer> t = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            t.add(l.get(i) + 1);\n        }\n        return t;",
        "grade-81": {
            "execution": 1
        },
        "4": "ArrayList<Integer> out = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            out.add(l.get(i) + 1);\n        }\n        return out;",
        "grade-4": {
            "execution": 1
        },
        "35": "ArrayList<Integer> a = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            a.add(l.get(i) + 1);\n        }\n        return a;",
        "grade-35": {
            "execution": 1
        },
        "38": "ArrayList<Integer> i = new ArrayList<Integer>();\n        for (int t = 0; t < l.size(); t++) {\n            i.add(l.get(t) + 1);\n        }\n        return i;",
        "grade-38": {
            "execution": 1
        },
        "99": "ArrayList<Integer> o = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            o.add(l.get(i) + 1);\n        }\n        return o;",
        "grade-99": {
            "execution": 1
        },
        "127": "throw new RuntimeException(\"NOT IMPLEMENTED\");",
        "grade-127": {
            "execution": 0
        },
        "111": "ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int n : l) {\n            result.add(n + 1);\n        }\n        return result;",
        "grade-111": {
            "execution": 1
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function count_nums which takes an array of integers and returns\n    // the number of elements which has a sum of digits > 0.\n    // If a number is negative, then its first signed digit will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public static int countNums(ArrayList<Integer> arr) {\n",
        "snippet": [
            "        int count = 0;\n        for (int n: arr) {\n            int neg = 1;\n            if (n < 0) {\n                n = -n;\n                neg = -1;\n            }\n            List<Integer> digits = new ArrayList<>();\n            for (char digit : String.valueOf(n).toCharArray()) {\n                digits.add(digit - '0');\n            }\n            digits.set(0, digits.get(0) * neg);\n            if (digits.stream().reduce(0, Integer::sum) > 0) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n}"
        ],
        "simplified": "Write a function count_nums which takes an array of integers and returns the number of elements which has a sum of digits > 0. If a number is negative, then its first signed digit will be negative: e.g. -123 has signed digits -1, 2, and 3.",
        "task_id": "108",
        "35": "// your code here\n        return arr.stream().filter(x ->  x > 0 || (x < 0 && -x % 10 != x)).collect(Collectors.toList()).size();",
        "grade-35": {
            "execution": 0
        },
        "8": "int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int number = arr.get(i);\n            int digitSum = 0;\n            if (number < 0) {\n                digitSum += number * -1 % 10;\n                number = number * -1 / 10;\n            }\n            while (number > 0) {\n                digitSum += number % 10;\n                number /= 10;\n            }\n            if (digitSum > 0) {\n                count++;\n            }\n        }\n        return count;",
        "grade-8": {
            "execution": 0
        },
        "96": "int sum = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int value = arr.get(i);\n            if (value < 0) {\n                value = value * -1;\n            }\n            sum += getDigitSum(value);\n        }\n        return sum;",
        "grade-96": {
            "execution": 0
        },
        "83": "throw new UnsupportedOperationException(\"Not supported yet.\");",
        "grade-83": {
            "execution": 0
        },
        "76": "return (int)arr.stream().filter(x -> x > 0 ? x % 10 > 0 : x % 10 < 0).count();",
        "grade-76": {
            "execution": 0
        },
        "44": "return (int) arr.stream().filter(x -> IntStream.of(x.toString().chars().map(Character::getNumericValue).toArray()).sum() > 0).count();",
        "grade-44": {
            "execution": 0
        },
        "33": "return (int)arr.stream().filter(x -> {\n                if (x == 0) {\n                    return false;\n                }\n                x = Math.abs(x);\n                int sum = 0;\n                while (x > 0) {\n                    sum += x % 10;\n                    x /= 10;\n                }\n                return sum > 0;\n            }).count();",
        "grade-33": {
            "execution": 0
        },
        "181": "return (int) arr.stream().filter(i -> {\n            int sum = 0;\n            while (i != 0) {\n                sum += Math.abs(i % 10);\n                i /= 10;\n            }\n            return sum > 0;\n        }).count();",
        "grade-181": {
            "execution": 0
        },
        "29": "int ans = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n            int sign = num < 0 ? -1 : 1;\n            num = Math.abs(num);\n            while (num > 0) {\n                ans += sign * (num % 10);\n                num /= 10;\n            }\n        }\n        return ans;",
        "grade-29": {
            "execution": 0
        },
        "142": "int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            count += sumOfDigits(arr.get(i));\n        }\n        return count;",
        "grade-142": {
            "execution": 0
        },
        "13": "int ct = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n            int sum = 0;\n            if (num < 0) {\n                sum += -1;\n                num = -num;\n            }\n            while (num > 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n            if (sum > 0) {\n                ct++;\n            }\n        }\n        return ct;",
        "grade-13": {
            "execution": 0
        },
        "11": "return (int) arr.stream().filter(x -> signedDigitsSum(x) > 0).count();",
        "grade-11": {
            "execution": 0
        },
        "30": "int result = 0;\n        for (int num : arr) {\n            String str = String.valueOf(num);\n            if (str.charAt(0) == '-') {\n                str = str.substring(1);\n            }\n            int sum = 0;\n            for (int i = 0; i < str.length(); i++) {\n                sum += Integer.parseInt(str.substring(i, i + 1));\n            }\n            if (sum > 0) {\n                result++;\n            }\n        }\n        return result;",
        "grade-30": {
            "execution": 0
        },
        "72": "int out0 = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int element = arr.get(i);\n            int s = sumDigits(element);\n            if (s > 0)\n                out0++;\n        }\n        return out0;",
        "grade-72": {
            "execution": 0
        },
        "79": "int count = 0;\n      for (int i = 0; i < arr.size(); i++) {\n        int digitsSum = 0;\n        int num = arr.get(i);\n        if (num < 0) {\n          num = num * -1;\n        }\n        while (num > 0) {\n          digitsSum += num % 10;\n          num = num / 10;\n        }\n        if (digitsSum > 0) {\n          count++;\n        }\n      }\n      return count;",
        "grade-79": {
            "execution": 0
        },
        "170": "int nums = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n            if (num < 0) {\n                num = num * -1;\n            }\n            int sum = 0;\n            while (num > 0) {\n                sum += num % 10;\n                num = num / 10;\n            }\n            if (sum > 0) {\n                nums += 1;\n            }\n        }\n        return nums;",
        "grade-170": {
            "execution": 0
        },
        "187": "//TODO: Implement me!\n        return 0;",
        "grade-187": {
            "execution": 0
        },
        "65": "return (int)arr.stream().filter(i -> i != 0).filter(i -> {\n            if (i < 0) i = -i;\n            int sum = 0;\n            while (i > 0) {\n                sum += i % 10;\n                i /= 10;\n            }\n            return sum > 0;\n        }).count();",
        "grade-65": {
            "execution": 0
        },
        "141": "int acc = 0;\n        for (int num : arr) {\n            boolean cond = true;\n            int digit = num < 0 ? num : Math.abs(num);\n            while (digit > 0) {\n                acc += digit % 10;\n                digit /= 10;\n            }\n        }\n        return acc;",
        "grade-141": {
            "execution": 0
        },
        "75": "// write your code here\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int sum = 0;\n            int x = arr.get(i);\n            if (x < 0) {\n                x = x * -1;\n            }\n            while (x > 0) {\n                sum += x % 10;\n                x = x / 10;\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;",
        "grade-75": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which sorts the given list of integers\n    // in ascending order according to the sum of their digits.\n    // Note: if there are several items with similar sum of their digits,\n    // order them based on their index in original list.\n    // For example:\n    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([]) == []\n    public static ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n",
        "snippet": [
            "        List<Integer> result = new ArrayList<>(nums);\n        result.sort((o1, o2) -> {\n            int sum1 = 0;\n            int sum2 = 0;\n\n            for (int i = 0; i < String.valueOf(o1).length(); i++) {\n                if (i != 0 || o1 >= 0) {\n                    sum1 += (String.valueOf(o1).charAt(i) - '0' );\n                    if (i == 1 && o1 < 0) {\n                        sum1 = -sum1;\n                    }\n                }\n            }\n            for (int i = 0; i < String.valueOf(o2).length(); i++) {\n                if (i != 0 || o2 >= 0) {\n                    sum2 += (String.valueOf(o2).charAt(i) - '0' );\n                    if (i == 1 && o2 < 0) {\n                        sum2 = -sum2;\n                    }\n                }\n            }\n            return Integer.compare(sum1, sum2);\n        });\n        return result;\n    }\n}"
        ],
        "simplified": "Write a function which sorts the given list of integers in ascending order according to the sum of their digits. Note: if there are several items with similar sum of their digits, order them based on their index in original list.",
        "task_id": "145",
        "31": "// YOUR CODE GOES HERE\n      return null;",
        "grade-31": {
            "execution": 0
        },
        "6": "ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < nums.size(); i++) {\n            result.add(i);\n        }\n        Collections.sort(result, new Comparator<Integer>() {\n            public int compare(Integer o1, Integer o2) {\n                int lhs = Math.abs(nums.get(o1));\n                int rhs = Math.abs(nums.get(o2));\n                return Integer.compare(sumOfDigits(lhs), sumOfDigits(rhs));\n            }\n        });\n        return result;",
        "grade-6": {
            "execution": 0
        },
        "81": "// IMPLEMENT ME\n        return null;",
        "grade-81": {
            "execution": 0
        },
        "72": "HashMap<Integer,ArrayList<Integer>> map = new HashMap<>();\n        for(int i = 0; i < nums.size(); ++i) {\n            int sum = 0;\n            int num = nums.get(i);\n            while(num != 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n            if(!map.containsKey(sum)) {\n                map.put(sum,new ArrayList<>());\n            }\n            map.get(sum).add(nums.get(i));\n        }\n        ArrayList<Integer> out = new ArrayList<>();\n        ArrayList<Integer> keys = new ArrayList<>(map.keySet());\n        Collections.sort(keys);\n        for(int i = 0; i < keys.size(); ++i) {\n            ArrayList<Integer> val = map.get(keys.get(i));\n            for(int j = 0; j < val.size(); ++j) {\n                out.add(val.get(j));\n            }\n        }\n        return out;",
        "grade-72": {
            "execution": 0
        },
        "66": "int min = 100;\n        int max = 0;\n        for (int num : nums) {\n            if (num > 0) {\n                int count = 0;\n                while (num > 0) {\n                    count += num % 10;\n                    num /= 10;\n                }\n                if (count > max) max = count;\n                if (count < min) min = count;\n            } else {\n                int count = 0;\n                while (num < 0) {\n                    count += Math.abs(num % 10);\n                    num /= 10;\n                }\n                if (count > max) max = count;\n                if (count < min) min = count;\n            }\n        }\n        ArrayList<ArrayList<Integer>> arr = new ArrayList<ArrayList<Integer>>();\n        for (int i = 0; i < max - min + 1; i++) {\n            arr.add(new ArrayList<Integer>());\n        }\n        for (int num : nums) {\n            if (num > 0) {\n                int count = 0;\n                while (num > 0) {\n                    count += num % 10;\n                    num /= 10;\n                }\n                arr.get(count - min).add(num);\n            } else {\n                int count = 0;\n                while (num < 0) {\n                    count += Math.abs(num % 10);\n                    num /= 10;\n                }\n                arr.get(count - min).add(num);\n            }\n        }\n        ArrayList<Integer> ret = new ArrayList<Integer>();\n        for (ArrayList<Integer> list : arr) {\n            for (int num : list) {\n                ret.add(num);\n            }\n        }\n        return ret;",
        "grade-66": {
            "execution": 0
        },
        "39": "ArrayList<Integer> ans = new ArrayList<Integer>();\n        //\n        // your code here\n        //\n        return ans;",
        "grade-39": {
            "execution": 0
        },
        "28": "ArrayList<Integer> points = new ArrayList<Integer>();\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < nums.size(); i++) {\n            Integer num = nums.get(i);\n            points.add(num % 10 + num / 10);\n        }\n        for (int i = 0; i < nums.size(); i++) {\n            Integer min = Collections.min(points);\n            for (int j = 0; j < points.size(); j++) {\n                if (points.get(j) == min) {\n                    points.remove(j);\n                    result.add(nums.get(j));\n                    nums.remove(j);\n                    break;\n                }\n            }\n        }\n        return result;",
        "grade-28": {
            "execution": 0
        },
        "172": "ArrayList<Integer> ret = new ArrayList<>();\n        HashMap<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n            int n = nums.get(i);\n            while (n != 0) {\n                sum += n % 10;\n                n /= 10;\n            }\n            map.put(sum, nums.get(i));\n        }\n        TreeMap<Integer, Integer> tm = new TreeMap<>(map);\n        ret.addAll(tm.values());\n        return ret;",
        "grade-172": {
            "execution": 0
        },
        "23": "ArrayList<Pair<Integer, Integer>> pairs = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            int n = nums.get(i);\n            int sum = 0;\n            while (n != 0) {\n                sum += n % 10;\n                n /= 10;\n            }\n            pairs.add(new Pair<>(sum, i));\n        }\n        Collections.sort(pairs, new Comparator<Pair<Integer, Integer>>() {\n            @Override\n            public int compare(Pair<Integer, Integer> p1, Pair<Integer, Integer> p2) {\n                if (p1.getValue0() != p2.getValue0()) {\n                    return p1.getValue0() - p2.getValue0();\n                }\n                return p1.getValue1() - p2.getValue1();\n            }\n        });\n        ArrayList<Integer> res = new ArrayList<>();\n        for (Pair<Integer, Integer> p : pairs) {\n            res.add(nums.get(p.getValue1()));\n        }\n        return res;",
        "grade-23": {
            "execution": 0
        },
        "194": "Map<Integer, Set<Integer>> map = new HashMap<>();\n        for (int i = 0; i < nums.size(); i++) {\n            int sum = nums.get(i) < 0 ? (-1 * nums.get(i)) : nums.get(i);\n            while (sum > 0) {\n                int digit = sum % 10;\n                sum /= 10;\n                if (map.containsKey(digit)) {\n                    map.get(digit).add(i);\n                } else {\n                    Set<Integer> set = new HashSet<>();\n                    set.add(i);\n                    map.put(digit, set);\n                }\n            }\n        }\n        ArrayList<Integer> res = new ArrayList<>(nums.size());\n        for (int i = 0; i < nums.size(); i++) {\n            res.add(0);\n        }\n        ArrayList<Integer> keys = new ArrayList<>(map.keySet());\n        Collections.sort(keys);\n        int index = 0;\n        for (int key : keys) {\n            Set<Integer> set = map.get(key);\n            for (int i : set) {\n                res.set(index, nums.get(i));\n                index++;\n            }\n        }\n        return res;",
        "grade-194": {
            "execution": 0
        },
        "126": "TreeMap<Integer, ArrayList<Integer>> map = new TreeMap<>();\n        for (int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n            int n = nums.get(i);\n            while (n != 0) {\n                sum += n % 10;\n                n /= 10;\n            }\n            ArrayList<Integer> list = map.getOrDefault(sum, new ArrayList<>());\n            list.add(nums.get(i));\n            map.put(sum, list);\n        }\n        ArrayList<Integer> ans = new ArrayList<>();\n        for (Map.Entry<Integer, ArrayList<Integer>> entry : map.entrySet()) {\n            ArrayList<Integer> list = entry.getValue();\n            for (int i = 0; i < list.size(); i++) {\n                ans.add(list.get(i));\n            }\n        }\n        return ans;",
        "grade-126": {
            "execution": 0
        },
        "8": "return null;",
        "grade-8": {
            "execution": 0
        },
        "7": "ArrayList<Integer> result = new ArrayList<Integer>();\n        Integer[] sumOfDigits = new Integer[nums.size()];\n        for (int i = 0; i < nums.size(); i++) {\n            sumOfDigits[i] = sumOfDigits(nums.get(i));\n        }\n        Integer[] sortedSumOfDigits = insertionSort(sumOfDigits);\n        int currentIndex = 0;\n        while (currentIndex < sortedSumOfDigits.length) {\n            for (int i = 0; i < nums.size(); i++) {\n                if (sumOfDigits(nums.get(i)) == sortedSumOfDigits[currentIndex]) {\n                    result.add(nums.get(i));\n                    nums.set(i, null);\n                    currentIndex++;\n                }\n            }\n        }\n        return result;",
        "grade-7": {
            "execution": 0
        },
        "24": "// TODO: Remove pass and write your implementation of orderByPoints\n        pass",
        "grade-24": {
            "execution": 0
        },
        "64": "return new ArrayList<Integer>();",
        "grade-64": {
            "execution": 0
        },
        "69": "// YOUR CODE GOES HERE\n        return nums;",
        "grade-69": {
            "execution": 0
        },
        "159": "ArrayList<Integer> arr = new ArrayList<Integer>();\n        for (int i = 0; i < nums.size(); i++) {\n            Integer num = nums.get(i);\n            Integer sum = num.toString().chars().map(Character::getNumericValue).sum();\n            arr.add(sum);\n        }\n        Map<Integer, Integer> map = new HashMap<Integer, Integer>();\n        for (int i = 0; i < nums.size(); i++) {\n            map.put(arr.get(i), nums.get(i));\n        }\n        Arrays.sort(arr.toArray());\n        ArrayList<Integer> array = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size(); i++) {\n            array.add(map.get(arr.get(i)));\n        }\n        return array;",
        "grade-159": {
            "execution": 0
        },
        "178": "throw new UnsupportedOperationException(\"Method orderByPoints not implemented.\");",
        "grade-178": {
            "execution": 0
        },
        "55": "ArrayList<Pair<Integer, Integer>> l = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            int n = nums.get(i);\n            int s = n >= 0 ? n : -n;\n            int sum = 0;\n            while (s > 0) {\n                sum += s % 10;\n                s /= 10;\n            }\n            l.add(new Pair<>(sum, n));\n        }\n        Collections.sort(l, (a, b) -> {\n            if (a.getValue0() != b.getValue0())\n                return a.getValue0() - b.getValue0();\n            return a.getValue1() - b.getValue1();\n        });\n        ArrayList<Integer> res = new ArrayList<>();\n        for (Pair<Integer, Integer> p : l)\n            res.add(p.getValue1());\n        return res;",
        "grade-55": {
            "execution": 0
        },
        "124": "// write your solution here\n\t\treturn null;",
        "grade-124": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // \"\n    // This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    // multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    // change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    // Examples:\n    // For lst = [1,2,3] the output should be 6\n    // For lst = []  the output should be 0\n    // For lst = [-1,-5,2,-1,-5]  the output should be -126\n    public static int sumSquares(ArrayList<Integer> lst) {\n",
        "snippet": [
            "        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                result.add(lst.get(i) * lst.get(i));\n            } else if (i % 4 == 0) {\n                result.add((int) Math.pow(lst.get(i), 3));\n            } else {\n                result.add(lst.get(i));\n            }\n        }\n        return result.stream().reduce(Integer::sum).orElse(0);\n    }\n}"
        ],
        "simplified": "\" This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.",
        "task_id": "142",
        "36": "for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                lst.set(i, (int) Math.pow(lst.get(i), 2));\n            } else if (i % 4 == 0) {\n                lst.set(i, (int) Math.pow(lst.get(i), 3));\n            }\n        }\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            sum += lst.get(i);\n        }\n        return sum;",
        "grade-36": {
            "execution": 1
        },
        "6": "int total = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int x = lst.get(i);\n            if (i % 3 == 0) {\n                x = x * x;\n            }\n            if (i % 4 == 0 && i % 3 != 0) {\n                x = x * x * x;\n            }\n            total += x;\n        }\n        return total;",
        "grade-6": {
            "execution": 1
        },
        "111": "return lst.stream().mapToInt(i -> {\n            if (i % 3 == 0 && i % 4 == 0) {\n                return i * i * i;\n            } else if (i % 3 == 0) {\n                return i * i;\n            } else if (i % 4 == 0) {\n                return i * i * i;\n            } else {\n                return i;\n            }\n        }).sum();",
        "grade-111": {
            "execution": 0
        },
        "95": "int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0)\n                sum += Math.pow(lst.get(i), 2);\n            else if (i % 4 == 0)\n                sum += Math.pow(lst.get(i), 3);\n            else\n                sum += lst.get(i);\n        }\n        return sum;",
        "grade-95": {
            "execution": 1
        },
        "80": "return lst.stream().map(i -> {\n            int index = lst.indexOf(i);\n            if (index % 3 == 0) {\n                return (int) Math.pow(i, 2);\n            } else if (index % 4 == 0 && index % 3 != 0) {\n                return (int) Math.pow(i, 3);\n            } else {\n                return i;\n            }\n        }).mapToInt(Integer::intValue).sum();",
        "grade-80": {
            "execution": 0
        },
        "43": "int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int num = lst.get(i);\n            if (i % 3 == 0) {\n                sum += num * num;\n            } else if (i % 4 == 0) {\n                sum += num * num * num;\n            } else {\n                sum += num;\n            }\n        }\n        return sum;",
        "grade-43": {
            "execution": 1
        },
        "31": "return null;",
        "grade-31": {
            "execution": 0
        },
        "26": "return lst.stream().mapToInt(num -> {\n                if (num % 3 == 0 && num % 4 == 0) {\n                    return (int)Math.pow(num,3);\n                }\n                else if (num % 3 == 0) {\n                    return (int)Math.pow(num,2);\n                }\n                else if (num % 4 == 0) {\n                    return (int)Math.pow(num,3);\n                }\n                else return num;\n            }).sum();",
        "grade-26": {
            "execution": 0
        },
        "169": "int total = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                total += lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0) {\n                total += lst.get(i) * lst.get(i) * lst.get(i);\n            } else {\n                total += lst.get(i);\n            }\n        }\n        return total;",
        "grade-169": {
            "execution": 1
        },
        "8": "// Write code here",
        "grade-8": {
            "execution": 0
        },
        "7": "return 0;",
        "grade-7": {
            "execution": 0
        },
        "28": "for(int i = 0; i < lst.size(); i++) {\n    \t\tif(i % 3 == 0) {\n    \t\t\tlst.set(i, lst.get(i) * lst.get(i));\n    \t\t}\n    \t\tif(i % 4 == 0 && i % 3 != 0) {\n    \t\t\tlst.set(i, lst.get(i) * lst.get(i) * lst.get(i));\n    \t\t}\n    \t}\n    \tint sum = 0;\n    \tfor(int i : lst) {\n    \t\tsum += i;\n    \t}\n    \treturn sum;",
        "grade-28": {
            "execution": 1
        },
        "77": "int s = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                s += lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0) {\n                s += lst.get(i) * lst.get(i) * lst.get(i);\n            } else {\n                s += lst.get(i);\n            }\n        }\n        return s;",
        "grade-77": {
            "execution": 1
        },
        "82": "int r = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                r += lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0) {\n                r += lst.get(i) * lst.get(i) * lst.get(i);\n            } else {\n                r += lst.get(i);\n            }\n        }\n        return r;",
        "grade-82": {
            "execution": 1
        },
        "199": "System.out.println(\"lst: \" + lst);\n        int result = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                result += lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0) {\n                result += lst.get(i) * lst.get(i) * lst.get(i);\n            } else {\n                result += lst.get(i);\n            }\n        }\n        return result;",
        "grade-199": {
            "execution": 1
        },
        "70": "int total = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int entry = lst.get(i);\n            if (i % 3 == 0) {\n                total += entry * entry;\n            } else if (i % 4 == 0) {\n                total += entry * entry * entry;\n            } else {\n                total += entry;\n            }\n        }\n        return total;",
        "grade-70": {
            "execution": 1
        },
        "168": "int result = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int num = lst.get(i);\n            if (i % 3 == 0) {\n                result += num * num;\n            } else if (i % 4 == 0) {\n                result += num * num * num;\n            } else {\n                result += num;\n            }\n        }\n        return result;",
        "grade-168": {
            "execution": 1
        },
        "79": "int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                lst.set(i, (int) Math.pow(lst.get(i), 2));\n            } else if (i % 4 == 0 && i % 3 != 0) {\n                lst.set(i, (int) Math.pow(lst.get(i), 3));\n            }\n            sum += lst.get(i);\n        }\n        return sum;",
        "grade-79": {
            "execution": 1
        },
        "177": "int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int val = lst.get(i);\n            if (i % 3 == 0) {\n                sum += val * val;\n            } else if (i % 4 == 0) {\n                sum += val * val * val;\n            } else {\n                sum += val;\n            }\n        }\n        return sum;",
        "grade-177": {
            "execution": 1
        },
        "112": "int sum = 0;\n        // Fill in your code here. \n        return sum;",
        "grade-112": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String message) {\n",
        "snippet": [
            "        String vowels = \"aeiouAEIOU\";\n        StringBuilder sb = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            char ch = c;\n            if (Character.isUpperCase(ch)) {\n                ch = Character.toLowerCase(ch);\n                if (vowels.indexOf(ch) != -1) {\n                    ch = (char) ('a' + ((ch - 'a' + 28) % 26));\n                }\n            } else if (Character.isLowerCase(ch)) {\n                ch = Character.toUpperCase(ch);\n                if (vowels.indexOf(ch) != -1) {\n                    ch = (char) ('A' + ((ch - 'A' + 28) % 26));\n                }\n            }\n            sb.append(ch);\n        }\n        return sb.toString();\n    }\n}"
        ],
        "simplified": "Write a function that takes a message, and encodes in such a way that it swaps case of all letters, replaces all vowels in the message with the letter that appears 2 places ahead of that vowel in the english alphabet. Assume only letters.",
        "task_id": "93",
        "29": "String alpha = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        String vowels = \"AEIOU\";\n        String lowercase = \"abcdefghijklmnopqrstuvwxyz\";\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < message.length(); i++) {\n            int index = alpha.indexOf(message.charAt(i));\n            if (index == -1) {\n                index = lowercase.indexOf(message.charAt(i));\n                if (index == -1) {\n                    sb.append(message.charAt(i));\n                } else {\n                    if (vowels.indexOf(lowercase.charAt(index)) == -1) {\n                        sb.append(lowercase.charAt(index - 1));\n                    } else {\n                        sb.append(lowercase.charAt(index - 1));\n                    }\n                }\n            } else {\n                if (vowels.indexOf(alpha.charAt(index)) == -1) {\n                    sb.append(alpha.charAt(index + 1));\n                } else {\n                    sb.append(alpha.charAt(index + 1));\n                }\n            }\n        }\n        return sb.toString();",
        "grade-29": {
            "execution": 0
        },
        "6": "String[] vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        String newMessage = \"\";\n        String lowerCase = message.toLowerCase();\n        String upperCase = message.toUpperCase();\n        for (int i = 0; i < message.length(); i++) {\n            if (!(Character.isLetter(message.charAt(i)))) {\n                newMessage += message.charAt(i);\n            } else if (lowerCase.charAt(i) == message.charAt(i)) {\n                newMessage += upperCase.charAt(i);\n            } else {\n                newMessage += lowerCase.charAt(i);\n            }\n        }\n        for (int i = 0; i < newMessage.length(); i++) {\n            if (vowels.length == 5) {\n                if (newMessage.charAt(i) == 'a') {\n                    newMessage = newMessage.substring(0, i) + \"c\" + newMessage.substring(i + 1);\n                } else if (newMessage.charAt(i) == 'e') {\n                    newMessage = newMessage.substring(0, i) + \"g\" + newMessage.substring(i + 1);\n                } else if (newMessage.charAt(i) == 'i') {\n                    newMessage = newMessage.substring(0, i) + \"k\" + newMessage.substring(i + 1);\n                } else if (newMessage.charAt(i) == 'o') {\n                    newMessage = newMessage.substring(0, i) + \"m\" + newMessage.substring(i + 1);\n                } else if (newMessage.charAt(i) == 'u') {\n                    newMessage = newMessage.substring(0, i) + \"q\" + newMessage.substring(i + 1);\n                }\n            }\n        }\n        return newMessage;",
        "grade-6": {
            "execution": 0
        },
        "82": "StringBuilder encodedMessage = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            char upperC = Character.toUpperCase(c);\n            int index = ((upperC - 'A') + 2) % 26;\n            char encodedChar = (char) ('A' + index);\n            encodedMessage.append(encodedChar);\n        }\n        return encodedMessage.toString();",
        "grade-82": {
            "execution": 0
        },
        "73": "StringBuilder encoded = new StringBuilder();\n        List<Character> vowels = Arrays.asList('a', 'e', 'i', 'o', 'u');\n        for (char c : message.toCharArray()) {\n            int charValue = c;\n            if (vowels.contains(c)) {\n                encoded.append((char) (charValue + 2));\n            } else {\n                encoded.append((char) (charValue));\n            }\n        }\n        return encoded.toString();",
        "grade-73": {
            "execution": 0
        },
        "66": "StringBuilder sb = new StringBuilder();\n        String vowels = \"aeiou\";\n        //loop through each character\n        for (int i = 0; i < message.length(); i++) {\n            char curr = message.charAt(i);\n            //if the current char is a letter, swap case and add to the stringbuilder\n            if (Character.isLetter(curr)) {\n                char c = Character.isUpperCase(curr) ? Character.toLowerCase(curr) : Character.toUpperCase(curr);\n                //if the current char is a vowel, encode it and add to the stringbuilder\n                if (vowels.indexOf(c) != -1) {\n                    //get the index of the current char in the vowels string\n                    int index = vowels.indexOf(c);\n                    //get the next two indices, mod by the length of the string so that we can wrap around\n                    int nextIndex = (index + 2) % vowels.length();\n                    int nextNextIndex = (index + 4) % vowels.length();\n                    //get the character at the next two indices, swap case and add to the stringbuilder\n                    char nextChar = Character.isUpperCase(c) ? Character.toUpperCase(vowels.charAt(nextIndex)) : Character.toLowerCase(vowels.charAt(nextIndex));\n                    char nextNextChar = Character.isUpperCase(c) ? Character.toUpperCase(vowels.charAt(nextNextIndex)) : Character.toLowerCase(vowels.charAt(nextNextIndex));\n                    sb.append(nextChar);\n                    sb.append(nextNextChar);\n                } else {\n                    sb.append(c);\n                }\n            } else {\n                sb.append(curr);\n            }\n        }\n        return sb.toString();",
        "grade-66": {
            "execution": 0
        },
        "38": "int idx = 0;\n        String res = \"\";\n        Map<Character, Character> dict = new HashMap<>();\n        dict.put('A', 'C');\n        dict.put('E', 'G');\n        dict.put('I', 'K');\n        dict.put('O', 'Q');\n        dict.put('U', 'W');\n        dict.put('a', 'c');\n        dict.put('e', 'g');\n        dict.put('i', 'k');\n        dict.put('o', 'q');\n        dict.put('u', 'w');\n        for (char letter : message.toCharArray()) {\n            if (Character.isLetter(letter)) {\n                if (dict.containsKey(letter))\n                    res += dict.get(letter);\n                else {\n                    res += Character.isUpperCase(letter) ? Character.toLowerCase(letter) : Character.toUpperCase(letter);\n                }\n            } else {\n                res += letter;\n            }\n        }\n        return res;",
        "grade-38": {
            "execution": 0
        },
        "27": "char[] charArray = message.toCharArray();\n        for (int i = 0; i < charArray.length; i++) {\n            charArray[i] = swapCase(charArray[i]);\n            charArray[i] = replaceVowel(charArray[i]);\n        }\n        return new String(charArray);",
        "grade-27": {
            "execution": 0
        },
        "176": "// Implement your solution here\n        return \"\";",
        "grade-176": {
            "execution": 0
        },
        "22": "return \"TGST\";",
        "grade-22": {
            "execution": 0
        },
        "193": "throw new UnsupportedOperationException(\"please implement me!\");",
        "grade-193": {
            "execution": 0
        },
        "135": "char[] arr = message.toCharArray();\n        for (int i = 0; i < arr.length; i++) {\n            if (Character.isUpperCase(arr[i])) {\n                arr[i] = Character.toLowerCase(arr[i]);\n            } else {\n                arr[i] = Character.toUpperCase(arr[i]);\n            }\n            if (arr[i] == 'a') {\n                arr[i] = 'c';\n            } else if (arr[i] == 'e') {\n                arr[i] = 'g';\n            } else if (arr[i] == 'i') {\n                arr[i] = 'k';\n            } else if (arr[i] == 'o') {\n                arr[i] = 'q';\n            } else if (arr[i] == 'u') {\n                arr[i] = 'y';\n            }\n        }\n        return new String(arr);",
        "grade-135": {
            "execution": 0
        },
        "8": "return message.chars()\n            .mapToObj(c -> (char) c)\n            .map(c -> getEncodedCharacter(c))\n            .map(c -> c.toString())\n            .collect(Collectors.joining());",
        "grade-8": {
            "execution": 0
        },
        "7": "throw new UnsupportedOperationException(\"Not supported yet.\");",
        "grade-7": {
            "execution": 0
        },
        "23": "return new StringBuilder(message).reverse().toString();",
        "grade-23": {
            "execution": 0
        },
        "62": "// TODO: Implement this\n        return \"\";",
        "grade-62": {
            "execution": 0
        },
        "68": "StringBuilder ret = new StringBuilder();\n        String vowels = \"aeiou\";\n        int vowelslen = vowels.length();\n        for (int i = 0; i < message.length(); i++) {\n            char letter = message.charAt(i);\n            int letteridx = letter - 'a';\n            if (letteridx >= 0 && letteridx < 26) {\n                int newidx = letteridx + 2;\n                if (newidx > 25) {\n                    newidx -= 26;\n                }\n                ret.append((char)(newidx + 'a'));\n            } else {\n                ret.append(letter);\n            }\n        }\n        return ret.toString();",
        "grade-68": {
            "execution": 0
        },
        "162": "char[] letters = message.toCharArray();\n        for (int i = 0; i < letters.length; i++) {\n            if (Character.isUpperCase(letters[i])) {\n                letters[i] = Character.toLowerCase(letters[i]);\n            } else {\n                letters[i] = Character.toUpperCase(letters[i]);\n            }\n            switch (letters[i]) {\n                case 'a': letters[i] = 'c'; break;\n                case 'e': letters[i] = 'g'; break;\n                case 'i': letters[i] = 'k'; break;\n                case 'o': letters[i] = 'q'; break;\n                case 'u': letters[i] = 'y'; break;\n            }\n        }\n        return new String(letters);",
        "grade-162": {
            "execution": 0
        },
        "196": "String encode = \"\";\n\tfor (int i = 0; i < message.length(); i++) {\n\t    char c = message.charAt(i);\n\t    int k = (int) c;\n\t    if (c == ' ') {\n\t\tencode += \" \";\n\t    } else if (c > 'Z') {\n\t\tk = (int) c - 32;\n\t\tif (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\t\t    k += 2;\n\t\t    if (k > 90) {\n\t\t\tk -= 26;\n\t\t    }\n\t\t}\n\t\tencode += (char) k;\n\t    } else {\n\t\tif (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n\t\t    k += 2;\n\t\t    if (k > 90) {\n\t\t\tk -= 26;\n\t\t    }\n\t\t}\n\t\tencode += (char) k;\n\t    }\n\t}\n\treturn encode;",
        "grade-196": {
            "execution": 0
        },
        "180": "char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        char[] encoded = new char[message.length()];\n        char[] current = message.toCharArray();\n        for (int i = 0; i < message.length(); i++) {\n            boolean isVowel = false;\n            for (int j = 0; j < vowels.length; j++) {\n                if (current[i] == vowels[j]) {\n                    int index = vowels[j] + 2 - 'a';\n                    index = index % vowels.length;\n                    encoded[i] = vowels[index];\n                    isVowel = true;\n                    break;\n                }\n            }\n            if (!isVowel) {\n                encoded[i] = Character.isUpperCase(current[i]) ? Character.toLowerCase(current[i]) : Character.toUpperCase(current[i]);\n            }\n        }\n        return new String(encoded);",
        "grade-180": {
            "execution": 0
        },
        "57": "StringBuilder builder = new StringBuilder();\n        List<Character> vowels = Arrays.asList('a', 'e', 'i', 'o', 'u');\n        for (int i = 0; i < message.length(); i++) {\n            char cur = message.charAt(i);\n            if (Character.isLetter(cur)) {\n                if (Character.isUpperCase(cur)) {\n                    cur = Character.toLowerCase(cur);\n                } else {\n                    cur = Character.toUpperCase(cur);\n                }\n                if (vowels.contains(cur)) {\n                    int index = vowels.indexOf(cur);\n                    index = (index + 2) % vowels.size();\n                    cur = vowels.get(index);\n                }\n            }\n            builder.append(cur);\n        }\n        return builder.toString();",
        "grade-57": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    public static int carRaceCollision(int n) {\n",
        "snippet": [
            "        return n * n;\n    }\n}"
        ],
        "simplified": "Imagine a road that's a perfectly straight infinitely long line. n cars are driving left to right; simultaneously, a different set of n cars are driving right to left. The two sets of cars start out being very far from each other. All cars move in the same speed. Two cars are said to collide when a car that's moving left to right hits a car that's moving right to left. However, the cars are infinitely sturdy and strong; as a result, they continue moving in their trajectory as if they did not collide. This function outputs the number of such collisions.",
        "task_id": "41",
        "198": "int collisionCount = 0;\n        // We need to be sure that if the cars are perfectly symmetric and the starting\n        // position of the cars are identical, then there will be 0 collisions\n        Random random = new Random();\n        int[] posLeft = new int[n];\n        int[] posRight = new int[n];\n        for (int i = 0; i < n; i++) {\n            posLeft[i] = random.nextInt(2*n) + 1;\n            posRight[i] = random.nextInt(2*n) + 1;\n        }\n        Arrays.sort(posLeft);\n        Arrays.sort(posRight);\n        int i = 0;\n        int j = 0;\n        while (i < n && j < n) {\n            if (posLeft[i] == posRight[j]) {\n                collisionCount++;\n                i++;\n                j++;\n            } else if (posLeft[i] < posRight[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return collisionCount;",
        "grade-198": {
            "execution": 0
        },
        "33": "// if n is odd, then the rightmost car collides with the leftmost car.\n        // if n is even, then there is no collision.\n        if (n % 2 == 1) {\n            return 1;\n        } else {\n            return 0;\n        }",
        "grade-33": {
            "execution": 0
        },
        "8": "int[][] cars = new int[n][2];\n        for (int i = 0; i < n; i++) {\n            cars[i][0] = i;\n            cars[i][1] = i + n;\n        }\n        return Helper.mergeSortAndCount(cars, 0, n - 1, 0);",
        "grade-8": {
            "execution": 0
        },
        "84": "// We could sort the cars by x, y and speed and then walk the line of cars\n      // until a collision appears.  This takes O(n log n) time.  However, it is\n      // sufficient to just look at the endpoints of the car distribution, so we\n      // can do better.  The endpoints are the two cars with greatest and smallest speed\n      // going in opposite directions.  These cars determine the smallest time to collision.\n      // Given this smallest time, we can then determine how many other cars collide\n      // with the cars of smallest and largest speed.  For example, say the two cars\n      // of smallest and largest speed collide in t time.  That is, the car of smallest\n      // speed travels x in t time, and the car of largest speed travels y in t time.\n      // Now, to count the number of collisions with these two cars, we need to determine\n      // which cars have speeds between x and y.  By sorting the cars by speed, it is\n      // easy to do this in linear time.\n      // All in all, this approach is O(n log n) time and O(n) space.\n      // In summary, the algorithm is as follows:\n      //\n      // 1. Sort the cars by speed.\n      // 2. Determine the time to collision between the two cars of smallest and largest speed.\n      // 3. Count the number of cars between these two speed ranges that collide.\n      // 4. Output the results.\n      //\n      // We outline this implementation below.\n      //\n      // STEP 1:\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //",
        "grade-84": {
            "execution": 0
        },
        "74": "int result = 0;\n        // The road is a straight line, and we don't need to store all of it.\n        // To store a car, we have to store its position and direction.\n        // We use a list for each direction.\n        // The time complexity of the following code is O(n^2) since\n        // we use 2 nested for loops.\n        ArrayList<Integer> leftToRight = new ArrayList<Integer>();\n        ArrayList<Integer> rightToLeft = new ArrayList<Integer>();\n        for (int i = 0; i < n; i++) {\n            leftToRight.add(0);\n            rightToLeft.add(0);\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                // ith car moving left to right, jth car moving right to left\n                if (leftToRight.get(i) + i == rightToLeft.get(j) + j) {\n                    result++;\n                }\n            }\n        }\n        return result;",
        "grade-74": {
            "execution": 0
        },
        "69": "int result = 0;\n        // Each car has a location and a direction.\n        // Left-to-right cars start out at (-100, -100, 1); right-to-left cars\n        // start out at (100, 100, -1).  Both are very far away from each other, and thus\n        // there are no collisions at the beginning.\n        // At time t, car at (x, y, d) is at position y + d * t.\n        // For any time t, if there's a collision at t, then there's a car from each\n        // group that are at the same location and moving towards each other at t.\n        // This means the left-to-right car is at (-100, -100, 1) + t * (1, 1, 1) and\n        // the right-to-left car is at (100, 100, -1) + t * (-1, -1, -1).\n        // These two points are at (0, 0, 0) + t * (0, 0, 0), which is always\n        // the origin.  So if the vector between the two cars is the origin,\n        // there's a collision.\n        // For example, if the origin is the vector between the two cars,\n        // then the two points lie on two different lines, and their dot product\n        // must be zero.  Because the left-to-right car has speed 1, the left-to-right\n        // car is at (x1, y1, d1) = (-100, -100, 1) + t * (1, 1, 1).\n        // Similarly, the right-to-left car is at (x2, y2, d2) = (100, 100, -1) + t * (-1, -1, -1).\n        // If their dot product is zero, then their difference is zero.\n        // This means (x1 - x2, y1 - y2, d1 - d2) = (200, 200, 2) + t * (2, 2, 2) = 0 + t * (0, 0, 0)\n        // must be zero.  This implies (200, 200, 2) = 0, which is true.\n        // Thus, there is a collision at",
        "grade-69": {
            "execution": 0
        },
        "41": "// Use input n to solve the problem and return the result.\n        // If n is 0, there are no cars.  If n is 1, there are no collisions.\n        // If n is 2, there's 1 collision.  If n is 3, there are 2 collisions.\n        // If n is 4, there are 6 collisions.  And so on.\n        // Now, for the base case.  If n is 1, just return 0.\n        if (n == 1) {\n            return 0;\n        }\n        else {\n            // Now, for the inductive case.  We can solve the problem by solving\n            // the same problem recursively.  Let's say n is 5.  Then, there are\n            // n-1 collisions between the n-1 cars going left to right and the n-1\n            // cars going right to left.  Also, the first car going left to right\n            // and the last car going right to left would collide.  In other words,\n            // there are n-1 + 1 = n collisions.  Let's implement this.\n            return carRaceCollision(n-1) + n;\n        }",
        "grade-41": {
            "execution": 0
        },
        "30": "// Invariant:\n        // no_of_collisions[i] represents the number of collisions before i + 1-th car\n        // moving left to right gets started.  This will be used to compute the\n        // number of collisions before the ith car moving left to right gets started.\n        // Note: no_of_collisions[0] = 0\n        int[] no_of_collisions = new int[n];\n        // Note: There are n cars moving left to right; let's call these cars\n        // car_1, car_2, ..., car_n.  We know that car_1 started first, followed by\n        // car_2 and so on.  So the ith car moving left to right started t_i seconds\n        // after car_1 started, where t_i = i - 1.\n        // Now, suppose car_i collides with car_j moving right to left.  This means\n        // that car_i overtook car_j.  However, car_i started only t_i seconds\n        // after car_1 started, and car_j started only t_j seconds after car_1 started.\n        // Therefore, car_i should have overtaken car_j t_i - t_j = i - j seconds\n        // after car_1 started.  Now, car_i and car_j are infinitely strong, so they\n        // continue moving and hence we say that a collision took place.\n        // (Note: if i < j, then i - j < 0 and so car_i should have overtaken car_j before\n        // car_1 got started.  However, this is impossible.)\n        // Therefore, the total number of collisions between the ith car moving left to right\n        // and the cars moving right to left is equal to the number of j such that 0 < j < i and\n        // i - j = 0.  This is equal to i - 1.\n        for (int i = 1; i < n; i++) {\n            no_of_collisions[i] = no_of_collisions[i - 1] + i - 1;\n        }\n        return no_of_collisions[n - 1];",
        "grade-30": {
            "execution": 0
        },
        "170": "int answer = 0;\n        return answer;",
        "grade-170": {
            "execution": 0
        },
        "26": "long total_collisions = 0;\n        int [] car_1 = new int[n];\n        int [] car_2 = new int[n];\n        for (int i = 0; i < n; i++) {\n            car_1[i] = i;\n            car_2[i] = n - i - 1;\n        }\n        // System.out.println(Arrays.toString(car_1));\n        // System.out.println(Arrays.toString(car_2));\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (car_1[i] == car_2[j]) {\n                    total_collisions++;\n                }\n            }\n        }\n        return (int) total_collisions;",
        "grade-26": {
            "execution": 0
        },
        "183": "return 1;",
        "grade-183": {
            "execution": 0
        },
        "128": "if (n == 0) return 0;\n        int[] left = new int[n];\n        int[] right = new int[n];\n        for (int i = 0; i < n; i++) {\n            left[i] = n - i;\n            right[i] = i + 1;\n        }\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (left[i] == right[j]) count++;\n            }\n        }\n        return count;",
        "grade-128": {
            "execution": 0
        },
        "10": "boolean[] movingL2R = new boolean[n];\n        for (int i = 0; i < n; i++) {\n            movingL2R[i] = true;\n        }\n        boolean[] movingR2L = new boolean[n];\n        for (int i = 0; i < n; i++) {\n            movingR2L[i] = false;\n        }\n        int colls = 0;\n        while (true) {\n            boolean hasL2R = false;\n            boolean hasR2L = false;\n            for (int i = 0; i < n; i++) {\n                if (movingL2R[i]) {\n                    hasL2R = true;\n                }\n                if (movingR2L[i]) {\n                    hasR2L = true;\n                }\n            }\n            if (!hasL2R && !hasR2L) {\n                break;\n            }\n            for (int i = 0; i < n; i++) {\n                if (movingL2R[i]) {\n                    for (int j = 0; j < n; j++) {\n                        if (movingR2L[j]) {\n                            colls++;\n                        }\n                    }\n                }\n            }\n            for (int i = 0; i < n; i++) {\n                if (movingL2R[i]) {\n                    movingL2R[i] = false;\n                }\n                if (movingR2L[i]) {\n                    movingR2L[i] = false;\n                }\n            }\n        }\n        return colls;",
        "grade-10": {
            "execution": 0
        },
        "9": "// Implement me\n        return 0;",
        "grade-9": {
            "execution": 0
        },
        "27": "// Assume that n is even.\n        if (n % 2 != 0)\n            throw new IllegalArgumentException(\"n is not even\");\n        return n * (n - 2);",
        "grade-27": {
            "execution": 0
        },
        "67": "// carPos[i] stores the position of the i'th car.\n        // carLeftToRight[i] is true if the i'th car is moving left to right,\n        // false otherwise.\n        // carPos[i] and carLeftToRight[i] together represent the state of the i'th car.\n        int[] carPos = new int[n];\n        boolean[] carLeftToRight = new boolean[n];\n        int i;\n        int numCollisions = 0;\n        // Returns a random integer in the range [lower, upper].\n        // This function is only used for testing purposes.\n        int rand(int lower, int upper) {\n            return (int)(Math.random() * (upper - lower + 1)) + lower;\n        }\n        // Randomly generates the initial states of the n cars.\n        // This function is only used for testing purposes.\n        void init(int n) {\n            for (i = 0; i < n; i++) {\n                carPos[i] = rand(-n, n);\n                carLeftToRight[i] = Math.random() < 0.5;\n            }\n        }\n        // Returns true if the two cars' states represent a collision,\n        // false otherwise.\n        boolean doCarsCollide(int i, int j) {\n            return carPos[i] == carPos[j] && carLeftToRight[i] != carLeftToRight[j];\n        }\n        // Prints the state of each car.\n        // This function is only used for testing purposes.\n        void printState(int n) {\n            for (i = 0; i < n; i++) {\n                if (carLeftToRight[i]) {\n                    System.out.print(\"(\" + carPos[i] + \") \");\n                } else {\n                    System.out.print(\"[\" + carPos[i] + \"] \");\n                }\n            }\n            System.out.println();\n        }\n        // Generates the initial state of the cars.\n        // Replace the code inside this function with the code for\n        // generating the initial state of the cars.\n        void generateInitialState(int n) {\n            for (i =",
        "grade-67": {
            "execution": 0
        },
        "71": "// Fill in.  Note that this function is pretty easy to solve with pen and paper.\n        int num_collisions = 0;\n        //Create a list of all cars from the left\n        List<Integer> left_cars = new ArrayList<Integer>();\n        for(int i = 0; i < n; i++){\n            left_cars.add(i);\n        }\n        //Create a list of all cars from the right\n        List<Integer> right_cars = new ArrayList<Integer>();\n        for(int i = 0; i < n; i++){\n            right_cars.add(i);\n        }\n        //While there are still cars moving in either direction, the two lists are not completely empty\n        while(!left_cars.isEmpty() && !right_cars.isEmpty()){\n            //Remove the first car from the left, which is the car closest to the origin\n            left_cars.remove(0);\n            //Remove the last car from the right, which is the car closest to the origin\n            right_cars.remove(right_cars.size() - 1);\n            //Increment the number of collisions\n            num_collisions++;\n        }\n        return num_collisions;",
        "grade-71": {
            "execution": 0
        },
        "157": "// TODO: Implement this\n        int result = 0;\n        for (int i = 1; i <= n; i++) {\n            for (int j = 1; j <= n; j++) {\n                if (i > j) {\n                    result++;\n                }\n            }\n        }\n        return result;",
        "grade-157": {
            "execution": 0
        },
        "186": "if (n <= 0) {\n            return 0;\n        }\n        int num = 0;\n        int[] l2r = new int[n];\n        int[] r2l = new int[n];\n        l2r[0] = 1;\n        r2l[0] = -1;\n        // Iterate through different cars.\n        for (int i = 1; i < n; i++) {\n            // Iterate through all cars that are moving left to right.\n            for (int j = 0; j < i; j++) {\n                // Iterate through all cars that are moving right to left.\n                for (int k = 0; k < i; k++) {\n                    if (l2r[j] == 1 && r2l[k] == -1) {\n                        num++;\n                    }\n                }\n            }\n            l2r[i] = 1;\n            r2l[i] = -1;\n        }\n        return num;",
        "grade-186": {
            "execution": 0
        },
        "174": "int collisions = 0;\n        // write your code here\n        return collisions;",
        "grade-174": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    public static boolean isPalindrome(String text) {\n",
        "snippet": [
            "        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) != text.charAt(text.length() - 1 - i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"
        ],
        "simplified": "Checks if given string is a palindrome",
        "task_id": "48",
        "135": "if (text.length() == 0) return true;\n        return text.charAt(0) == text.charAt(text.length() - 1) && isPalindrome(text.substring(1, text.length() - 1));",
        "grade-135": {
            "execution": 0
        },
        "16": "StringBuilder stringBuilder = new StringBuilder(text);\n        String reversed = stringBuilder.reverse().toString();\n        return text.equals(reversed);",
        "grade-16": {
            "execution": 1
        },
        "3": "StringBuilder sb = new StringBuilder(text);\n        return text.equals(sb.reverse().toString());",
        "grade-3": {
            "execution": 1
        },
        "156": "// Write your code here\n        return false;",
        "grade-156": {
            "execution": 0
        },
        "49": "if (text.length() == 0) {\n            return true;\n        }\n        if (text.length() == 1) {\n            return true;\n        }\n        if (text.charAt(0) == text.charAt(text.length() - 1)) {\n            return isPalindrome(text.substring(1, text.length() - 1));\n        }\n        return false;",
        "grade-49": {
            "execution": 1
        },
        "41": "// return false if text is empty\n        if (text.isEmpty()) return false;\n        // base case: text of size 1 is a palindrome\n        if (text.length() == 1) return true;\n        // recursive case: text of size 2\n        if (text.length() == 2) return text.charAt(0) == text.charAt(1);\n        // recursive case: text of size greater than 2\n        if (text.charAt(0) == text.charAt(text.length() - 1))\n            return isPalindrome(text.substring(1, text.length() - 1));\n        return false;",
        "grade-41": {
            "execution": 0
        },
        "36": "throw new RuntimeException(\"Problem has not been solved yet\");",
        "grade-36": {
            "execution": 0
        },
        "21": "String str = text.toLowerCase();\n        StringBuilder builder = new StringBuilder(str);\n        String new_str = builder.reverse().toString();\n        return new_str.equals(str);",
        "grade-21": {
            "execution": 1
        },
        "15": "// YOUR CODE HERE\n        int len = text.length();\n        if (len == 0) return true;\n        for (int i = 0; i < len/2; i++) {\n            if (text.charAt(i) != text.charAt(len-1-i)) {\n                return false;\n            }\n        }\n        return true;",
        "grade-15": {
            "execution": 1
        },
        "142": "return text.length() <= 1 ||\n            text.charAt(0) == text.charAt(text.length() - 1) &&\n            isPalindrome(text.substring(1, text.length() - 1));",
        "grade-142": {
            "execution": 1
        },
        "110": "for (int i = 0; i < text.length() / 2; i++) {\n        if (text.charAt(i) != text.charAt(text.length() - i - 1)) {\n          return false;\n        }\n      }\n      return true;",
        "grade-110": {
            "execution": 1
        },
        "13": "return text.equals(reverse(text));",
        "grade-13": {
            "execution": 0
        },
        "128": "if (text.length() <= 1) {\n            return true;\n        }\n        else {\n            if (text.charAt(0) == text.charAt(text.length() - 1)) {\n                return isPalindrome(text.substring(1, text.length() - 1));\n            }\n            else {\n                return false;\n            }\n        }",
        "grade-128": {
            "execution": 1
        },
        "86": "int left = 0;\n        int right = text.length() - 1;\n        while (left < right) {\n            if (text.charAt(left) != text.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;",
        "grade-86": {
            "execution": 1
        },
        "4": "return new StringBuilder(text).reverse().toString().equals(text);",
        "grade-4": {
            "execution": 1
        },
        "35": "// FIXME\n        return false;",
        "grade-35": {
            "execution": 0
        },
        "37": "if (text.length() == 0) {\n            return true;\n        }\n        return text.charAt(0) == text.charAt(text.length() - 1) && isPalindrome(text.substring(1, text.length() - 1));",
        "grade-37": {
            "execution": 0
        },
        "101": "// Write your code here\n        return true;",
        "grade-101": {
            "execution": 0
        },
        "130": "return Stream.iterate(0, i -> i + 1)\n            .limit(text.length() / 2)\n            .allMatch(i -> text.charAt(i) == text.charAt(text.length() - i - 1));",
        "grade-130": {
            "execution": 1
        },
        "121": "throw new RuntimeException(\"Not implemented yet\");",
        "grade-121": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float> grades) {\n",
        "snippet": [
            "        List<String> letter_grade = new ArrayList<>();\n        for (double gpa : grades) {\n            if (gpa == 4.0) {\n                letter_grade.add(\"A+\");\n            } else if (gpa > 3.7) {\n                letter_grade.add(\"A\");\n            } else if (gpa > 3.3) {\n                letter_grade.add(\"A-\");\n            } else if (gpa > 3.0) {\n                letter_grade.add(\"B+\");\n            } else if (gpa > 2.7) {\n                letter_grade.add(\"B\");\n            } else if (gpa > 2.3) {\n                letter_grade.add(\"B-\");\n            } else if (gpa > 2.0) {\n                letter_grade.add(\"C+\");\n            } else if (gpa > 1.7) {\n                letter_grade.add(\"C\");\n            } else if (gpa > 1.3) {\n                letter_grade.add(\"C-\");\n            } else if (gpa > 1.0) {\n                letter_grade.add(\"D+\");\n            } else if (gpa > 0.7) {\n                letter_grade.add(\"D\");\n            } else if (gpa > 0.0) {\n                letter_grade.add(\"D-\");\n            } else {\n                letter_grade.add(\"E\");\n            }\n        }\n        return letter_grade;\n    }\n}"
        ],
        "simplified": "It is the last week of the semester and the teacher has to give the grades to students. The teacher has been making her own algorithm for grading. The only problem is, she has lost the code she used for grading. She has given you a list of GPAs for some students and you have to write a function that can output a list of letter grades using the following table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E",
        "task_id": "81",
        "182": "ArrayList<String> letter_grades = new ArrayList<String>();\n        for (Float g : grades) {\n            if (g == 4.0) letter_grades.add(\"A+\");\n            else if (g > 3.7) letter_grades.add(\"A\");\n            else if (g > 3.3) letter_grades.add(\"A-\");\n            else if (g > 3.0) letter_grades.add(\"B+\");\n            else if (g > 2.7) letter_grades.add(\"B\");\n            else if (g > 2.3) letter_grades.add(\"B-\");\n            else if (g > 2.0) letter_grades.add(\"C+\");\n            else if (g > 1.7) letter_grades.add(\"C\");\n            else if (g > 1.3) letter_grades.add(\"C-\");\n            else if (g > 1.0) letter_grades.add(\"D+\");\n            else if (g > 0.7) letter_grades.add(\"D\");\n            else if (g > 0.0) letter_grades.add(\"D-\");\n            else letter_grades.add(\"E\");\n        }\n        return letter_grades;",
        "grade-182": {
            "execution": 0
        },
        "28": "String[] gradesArray = {\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"};\n        int[] correspondingGPAs = {400, 370, 330, 300, 270, 230, 200, 170, 130, 100, 70, 0};\n        int[] gradesPoints = new int[grades.size()];\n        for (int i = 0; i < grades.size(); i++) {\n            float grade = grades.get(i);\n            if (grade < 1) {\n                gradesPoints[i] = 0;\n            } else {\n                gradesPoints[i] = (int) (100 * (grade - 1) + 1);\n            }\n        }\n        ArrayList<String> letterGrades = new ArrayList<String>();\n        for (int i = 0; i < gradesPoints.length; i++) {\n            int grade = gradesPoints[i];\n            if (grade == 400) {\n                letterGrades.add(gradesArray[0]);\n            } else {\n                for (int j = 1; j < correspondingGPAs.length; j++) {\n                    if (grade > correspondingGPAs[j]) {\n                        letterGrades.add(gradesArray[j]);\n                        break;\n                    }\n                }\n            }\n        }\n        return letterGrades;",
        "grade-28": {
            "execution": 0
        },
        "6": "ArrayList<String> letters = new ArrayList<String>();\n        for (Float grade : grades) {\n            if (grade == 4.0) {\n                letters.add(\"A+\");\n            } else if (grade > 3.7) {\n                letters.add(\"A\");\n            } else if (grade > 3.3) {\n                letters.add(\"A-\");\n            } else if (grade > 3.0) {\n                letters.add(\"B+\");\n            } else if (grade > 2.7) {\n                letters.add(\"B\");\n            } else if (grade > 2.3) {\n                letters.add(\"B-\");\n            } else if (grade > 2.0) {\n                letters.add(\"C+\");\n            } else if (grade > 1.7) {\n                letters.add(\"C\");\n            } else if (grade > 1.3) {\n                letters.add(\"C-\");\n            } else if (grade > 1.0) {\n                letters.add(\"D+\");\n            } else if (grade > 0.7) {\n                letters.add(\"D\");\n            } else if (grade > 0.0) {\n                letters.add(\"D-\");\n            } else {\n                letters.add(\"E\");\n            }\n        }\n        return letters;",
        "grade-6": {
            "execution": 0
        },
        "72": "ArrayList<String> gradeString = new ArrayList<String>();\n        for (Float grade : grades) {\n            if (grade > 4.0) {\n                gradeString.add(\"A+\");\n            } else if (grade > 3.7) {\n                gradeString.add(\"A\");\n            } else if (grade > 3.3) {\n                gradeString.add(\"A-\");\n            } else if (grade > 3.0) {\n                gradeString.add(\"B+\");\n            } else if (grade > 2.7) {\n                gradeString.add(\"B\");\n            } else if (grade > 2.3) {\n                gradeString.add(\"B-\");\n            } else if (grade > 2.0) {\n                gradeString.add(\"C+\");\n            } else if (grade > 1.7) {\n                gradeString.add(\"C\");\n            } else if (grade > 1.3) {\n                gradeString.add(\"C-\");\n            } else if (grade > 1.0) {\n                gradeString.add(\"D+\");\n            } else if (grade > 0.7) {\n                gradeString.add(\"D\");\n            } else if (grade > 0.0) {\n                gradeString.add(\"D-\");\n            } else {\n                gradeString.add(\"E\");\n            }\n        }\n        return gradeString;",
        "grade-72": {
            "execution": 0
        },
        "64": "ArrayList<String> letters = new ArrayList<String>();\n        for (float g: grades) {\n            if (g >= 4.0) {\n                letters.add(\"A+\");\n            } else if (g >= 3.7) {\n                letters.add(\"A\");\n            } else if (g >= 3.3) {\n                letters.add(\"A-\");\n            } else if (g >= 3.0) {\n                letters.add(\"B+\");\n            } else if (g >= 2.7) {\n                letters.add(\"B\");\n            } else if (g >= 2.3) {\n                letters.add(\"B-\");\n            } else if (g >= 2.0) {\n                letters.add(\"C+\");\n            } else if (g >= 1.7) {\n                letters.add(\"C\");\n            } else if (g >= 1.3) {\n                letters.add(\"C-\");\n            } else if (g >= 1.0) {\n                letters.add(\"D+\");\n            } else if (g >= 0.7) {\n                letters.add(\"D\");\n            } else if (g >= 0.0) {\n                letters.add(\"D-\");\n            } else {\n                letters.add(\"E\");\n            }\n        }\n        return letters;",
        "grade-64": {
            "execution": 0
        },
        "59": "ArrayList<String> grades_list = new ArrayList<String>();\n        for (float grade : grades) {\n            if (grade == 4.0) {\n                grades_list.add(\"A+\");\n            } else if (grade > 3.7) {\n                grades_list.add(\"A\");\n            } else if (grade > 3.3) {\n                grades_list.add(\"A-\");\n            } else if (grade > 3.0) {\n                grades_list.add(\"B+\");\n            } else if (grade > 2.7) {\n                grades_list.add(\"B\");\n            } else if (grade > 2.3) {\n                grades_list.add(\"B-\");\n            } else if (grade > 2.0) {\n                grades_list.add(\"C+\");\n            } else if (grade > 1.7) {\n                grades_list.add(\"C\");\n            } else if (grade > 1.3) {\n                grades_list.add(\"C-\");\n            } else if (grade > 1.0) {\n                grades_list.add(\"D+\");\n            } else if (grade > 0.7) {\n                grades_list.add(\"D\");\n            } else if (grade > 0.0) {\n                grades_list.add(\"D-\");\n            } else {\n                grades_list.add(\"E\");\n            }\n        }\n        return grades_list;",
        "grade-59": {
            "execution": 0
        },
        "35": "ArrayList<String> letterGrades = new ArrayList<String>();\n        // write your code here\n        grades.forEach(i -> {\n            if (i == 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (i >= 3.7) {\n                letterGrades.add(\"A\");\n            } else if (i >= 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (i >= 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (i >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (i >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (i >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (i >= 1.7) {\n                letterGrades.add(\"C\");\n            } else if (i >= 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (i >= 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (i >= 0.7) {\n                letterGrades.add(\"D\");\n            } else if (i >= 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        });\n        return letterGrades;",
        "grade-35": {
            "execution": 0
        },
        "26": "// Write your code here...\n        return null;",
        "grade-26": {
            "execution": 0
        },
        "195": "ArrayList<String> letterGrades = new ArrayList<String>();\n        for (Float f : grades) {\n            if (f >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (f >= 3.7) {\n                letterGrades.add(\"A\");\n            } else if (f >= 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (f >= 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (f >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (f >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (f >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (f >= 1.7) {\n                letterGrades.add(\"C\");\n            } else if (f >= 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (f >= 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (f >= 0.7) {\n                letterGrades.add(\"D\");\n            } else if (f >= 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;",
        "grade-195": {
            "execution": 0
        },
        "151": "ArrayList<String> letterGrades = new ArrayList<String>();\n        for (float f : grades) {\n            String letterGrade = \"\";\n            if (f >= 4.0) {\n                letterGrade = \"A+\";\n            } else if (f >= 3.7) {\n                letterGrade = \"A\";\n            } else if (f >= 3.3) {\n                letterGrade = \"A-\";\n            } else if (f >= 3.0) {\n                letterGrade = \"B+\";\n            } else if (f >= 2.7) {\n                letterGrade = \"B\";\n            } else if (f >= 2.3) {\n                letterGrade = \"B-\";\n            } else if (f >= 2.0) {\n                letterGrade = \"C+\";\n            } else if (f >= 1.7) {\n                letterGrade = \"C\";\n            } else if (f >= 1.3) {\n                letterGrade = \"C-\";\n            } else if (f >= 1.0) {\n                letterGrade = \"D+\";\n            } else if (f >= 0.7) {\n                letterGrade = \"D\";\n            } else if (f >= 0.0) {\n                letterGrade = \"D-\";\n            } else {\n                letterGrade = \"E\";\n            }\n            letterGrades.add(letterGrade);\n        }\n        return letterGrades;",
        "grade-151": {
            "execution": 0
        },
        "22": "ArrayList<String> al=new ArrayList<String>();\n        for(int i=0;i<grades.size();i++){\n            if(grades.get(i)>=4.0){\n                al.add(\"A+\");\n            }\n            else if(grades.get(i)>=3.7){\n                al.add(\"A\");\n            }\n            else if(grades.get(i)>=3.3){\n                al.add(\"A-\");\n            }\n            else if(grades.get(i)>=3.0){\n                al.add(\"B+\");\n            }\n            else if(grades.get(i)>=2.7){\n                al.add(\"B\");\n            }\n            else if(grades.get(i)>=2.3){\n                al.add(\"B-\");\n            }\n            else if(grades.get(i)>=2.0){\n                al.add(\"C+\");\n            }\n            else if(grades.get(i)>=1.7){\n                al.add(\"C\");\n            }\n            else if(grades.get(i)>=1.3){\n                al.add(\"C-\");\n            }\n            else if(grades.get(i)>=1.0){\n                al.add(\"D+\");\n            }\n            else if(grades.get(i)>=0.7){\n                al.add(\"D\");\n            }\n            else if(grades.get(i)>=0.0){\n                al.add(\"D-\");\n            }\n            else if(grades.get(i)==0.0){\n                al.add(\"E\");\n            }\n        }\n        return al;",
        "grade-22": {
            "execution": 0
        },
        "168": "ArrayList<String> letterGrades = new ArrayList<String>();\n        // Code here!\n        return letterGrades;",
        "grade-168": {
            "execution": 0
        },
        "115": "ArrayList<String> letters = new ArrayList<String>();\n        for (float grade : grades) {\n            letters.add(gradeToLetter(grade));\n        }\n        return letters;",
        "grade-115": {
            "execution": 0
        },
        "8": "// TODO: implement the function\n        return null;",
        "grade-8": {
            "execution": 0
        },
        "7": "ArrayList<String> gradelist = new ArrayList<String>();\n        for (Float grade : grades) {\n            if (grade >= 4.0) {\n                gradelist.add(\"A+\");\n            } else if (grade >= 3.7) {\n                gradelist.add(\"A\");\n            } else if (grade >= 3.3) {\n                gradelist.add(\"A-\");\n            } else if (grade >= 3.0) {\n                gradelist.add(\"B+\");\n            } else if (grade >= 2.7) {\n                gradelist.add(\"B\");\n            } else if (grade >= 2.3) {\n                gradelist.add(\"B-\");\n            } else if (grade >= 2.0) {\n                gradelist.add(\"C+\");\n            } else if (grade >= 1.7) {\n                gradelist.add(\"C\");\n            } else if (grade >= 1.3) {\n                gradelist.add(\"C-\");\n            } else if (grade >= 1.0) {\n                gradelist.add(\"D+\");\n            } else if (grade >= 0.7) {\n                gradelist.add(\"D\");\n            } else if (grade >= 0.0) {\n                gradelist.add(\"D-\");\n            } else {\n                gradelist.add(\"E\");\n            }\n        }\n        return gradelist;",
        "grade-7": {
            "execution": 0
        },
        "23": "ArrayList<String> result = new ArrayList<String>();\n        for (Float grade : grades) {\n            if (grade >= 4.0) {\n                result.add(\"A+\");\n            } else if (grade >= 3.7) {\n                result.add(\"A\");\n            } else if (grade >= 3.3) {\n                result.add(\"A-\");\n            } else if (grade >= 3.0) {\n                result.add(\"B+\");\n            } else if (grade >= 2.7) {\n                result.add(\"B\");\n            } else if (grade >= 2.3) {\n                result.add(\"B-\");\n            } else if (grade >= 2.0) {\n                result.add(\"C+\");\n            } else if (grade >= 1.7) {\n                result.add(\"C\");\n            } else if (grade >= 1.3) {\n                result.add(\"C-\");\n            } else if (grade >= 1.0) {\n                result.add(\"D+\");\n            } else if (grade >= 0.7) {\n                result.add(\"D\");\n            } else if (grade >= 0.0) {\n                result.add(\"D-\");\n            } else {\n                result.add(\"E\");\n            }\n        }\n        return result;",
        "grade-23": {
            "execution": 0
        },
        "57": "float[] thresholds = {4.0f, 3.7f, 3.3f, 3.0f, 2.7f, 2.3f, 2.0f, 1.7f, 1.3f, 1.0f, 0.7f, 0.0f};\n        String[] gradesStr = {\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"};\n        ArrayList<String> result = new ArrayList<String>();\n        for (int i = 0; i < grades.size(); i++) {\n            float grade = grades.get(i);\n            for (int j = 0; j < thresholds.length; j++) {\n                if (grade >= thresholds[j]) {\n                    result.add(gradesStr[j]);\n                    break;\n                }\n            }\n        }\n        return result;",
        "grade-57": {
            "execution": 0
        },
        "61": "if (grades == null) {\n            return null;\n        }\n        ArrayList<String> output = new ArrayList<String>();\n        for (Float grade : grades) {\n            if (grade > 4.0) {\n                output.add(\"A+\");\n            } else if (grade > 3.7) {\n                output.add(\"A\");\n            } else if (grade > 3.3) {\n                output.add(\"A-\");\n            } else if (grade > 3.0) {\n                output.add(\"B+\");\n            } else if (grade > 2.7) {\n                output.add(\"B\");\n            } else if (grade > 2.3) {\n                output.add(\"B-\");\n            } else if (grade > 2.0) {\n                output.add(\"C+\");\n            } else if (grade > 1.7) {\n                output.add(\"C\");\n            } else if (grade > 1.3) {\n                output.add(\"C-\");\n            } else if (grade > 1.0) {\n                output.add(\"D+\");\n            } else if (grade > 0.7) {\n                output.add(\"D\");\n            } else if (grade > 0.0) {\n                output.add(\"D-\");\n            } else {\n                output.add(\"E\");\n            }\n        }\n        return output;",
        "grade-61": {
            "execution": 0
        },
        "141": "ArrayList<String> results = new ArrayList<String>();\n        for (Float grade : grades) {\n            results.add(getLetterGrade(grade));\n        }\n        return results;",
        "grade-141": {
            "execution": 0
        },
        "171": "ArrayList<String> lst = new ArrayList<String>();\n        for (Float g : grades) {\n            if (g == 4.0) {\n                lst.add(\"A+\");\n            } else if (g > 3.7) {\n                lst.add(\"A\");\n            } else if (g > 3.3) {\n                lst.add(\"A-\");\n            } else if (g > 3.0) {\n                lst.add(\"B+\");\n            } else if (g > 2.7) {\n                lst.add(\"B\");\n            } else if (g > 2.3) {\n                lst.add(\"B-\");\n            } else if (g > 2.0) {\n                lst.add(\"C+\");\n            } else if (g > 1.7) {\n                lst.add(\"C\");\n            } else if (g > 1.3) {\n                lst.add(\"C-\");\n            } else if (g > 1.0) {\n                lst.add(\"D+\");\n            } else if (g > 0.7) {\n                lst.add(\"D\");\n            } else if (g > 0.0) {\n                lst.add(\"D-\");\n            } else {\n                lst.add(\"E\");\n            }\n        }\n        return lst;",
        "grade-171": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    // the largest of negative integers, and 'b' is the smallest\n    // of positive integers in a list.\n    // If there is no negative or positive integers, return them as None.\n    // Examples:\n    // largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    // largest_smallest_integers([]) == (None, None)\n    // largest_smallest_integers([0]) == (None, None)\n    public static Pair<Optional<Integer>, Optional<Integer>> largestSmallestIntegers(ArrayList<Integer> lst) {\n",
        "snippet": [
            "        List<Integer> smallest = lst.stream().filter(p -> p < 0).toList();\n        List<Integer> largest = lst.stream().filter(p -> p > 0).toList();\n        Optional<Integer> s = Optional.empty();\n        if (smallest.size() > 0) {\n            s = Optional.of(Collections.max(smallest));\n        }\n        Optional<Integer> l = Optional.empty();\n        if (largest.size() > 0) {\n            l = Optional.of(Collections.min(largest));\n        }\n        return Arrays.asList(s, l);\n    }\n}"
        ],
        "simplified": "Create a function that returns a tuple (a, b), where 'a' is the largest of negative integers, and 'b' is the smallest of positive integers in a list. If there is no negative or positive integers, return them as None.",
        "task_id": "136",
        "188": "if (lst.size() < 1) {\n            return new Pair<Optional<Integer>, Optional<Integer>>(Optional.empty(), Optional.empty());\n        }\n\n        var negatives = new ArrayList<Integer>();\n        var positives = new ArrayList<Integer>();\n\n        for (var value : lst) {\n            if (value > 0) {\n                positives.add(value);\n            }\n            else if (value < 0) {\n                negatives.add(value);\n            }\n        }\n\n        var answer = new Pair<Optional<Integer>, Optional<Integer>>(Optional.empty(), Optional.empty());\n\n        if (negatives.size() > 0) {\n            answer.setValue0(Optional.of(Collections.max(negatives)));\n        }\n\n        if (positives.size() > 0) {\n            answer.setValue1(Optional.of(Collections.min(positives)));\n        }\n\n        return answer;",
        "grade-188": {
            "execution": 0
        },
        "30": "Optional<Integer> negative_max = lst.stream().filter(e -> e < 0).max(Integer::compare);\n        Optional<Integer> positive_min = lst.stream().filter(e -> e > 0).min(Integer::compare);\n        return new Pair<Optional<Integer>, Optional<Integer>>(negative_max, positive_min);",
        "grade-30": {
            "execution": 0
        },
        "6": "return null;",
        "grade-6": {
            "execution": 0
        },
        "79": "if (lst.size() < 1) return new Pair<Optional<Integer>, Optional<Integer>>(Optional.empty(), Optional.empty());\n        int min = Integer.MAX_VALUE;\n        int max = Integer.MIN_VALUE;\n        for (int i : lst) {\n            if (i >= 0 && i < min) min = i;\n            if (i < 0 && i > max) max = i;\n        }\n        return new Pair<Optional<Integer>, Optional<Integer>>(max == Integer.MIN_VALUE ? Optional.empty() : Optional.of(max), min == Integer.MAX_VALUE ? Optional.empty() : Optional.of(min));",
        "grade-79": {
            "execution": 0
        },
        "67": "// Write your code here.\n        Optional<Integer> a=Optional.empty();\n        Optional<Integer> b=Optional.empty();\n        for(int i=0;i<lst.size();i++){\n            if(lst.get(i)<0 && (a.isEmpty() || a.get()<lst.get(i))){\n                a=Optional.of(lst.get(i));\n            }\n            if(lst.get(i)>0 && (b.isEmpty() || b.get()>lst.get(i))){\n                b=Optional.of(lst.get(i));\n            }\n        }\n        return new Pair<Optional<Integer>, Optional<Integer>>(a,b);",
        "grade-67": {
            "execution": 0
        },
        "62": "// note the usage of Pair to return a tuple\n        Pair<Optional<Integer>, Optional<Integer>> result = null;\n        // write your code here\n\n        return result;",
        "grade-62": {
            "execution": 0
        },
        "38": "Integer maxNeg = null;\n        Integer minPos = null;\n        for (Integer i : lst) {\n            if (i < 0) {\n                if (maxNeg == null || i > maxNeg) {\n                    maxNeg = i;\n                }\n            } else if (i > 0) {\n                if (minPos == null || i < minPos) {\n                    minPos = i;\n                }\n            }\n        }\n        return new Pair<Optional<Integer>, Optional<Integer>>(\n            maxNeg == null ? Optional.empty() : Optional.of(maxNeg),\n            minPos == null ? Optional.empty() : Optional.of(minPos)\n        );",
        "grade-38": {
            "execution": 0
        },
        "28": "Optional<Integer> maxNeg = Optional.empty();\n        Optional<Integer> minPos = Optional.empty();\n        for (Integer e : lst) {\n            if (e < 0) {\n                if (!maxNeg.isPresent() || e > maxNeg.get()) {\n                    maxNeg = Optional.of(e);\n                }\n            } else if (e > 0) {\n                if (!minPos.isPresent() || e < minPos.get()) {\n                    minPos = Optional.of(e);\n                }\n            }\n        }\n        return Pair.with(maxNeg, minPos);",
        "grade-28": {
            "execution": 0
        },
        "159": "if (lst.size() == 0) {\n            return new Pair<Optional<Integer>, Optional<Integer>>(Optional.empty(), Optional.empty());\n        }\n        Integer[] arr = new Integer[lst.size()];\n        lst.toArray(arr);\n        Optional<Integer> largestNegative = Arrays.stream(arr).filter(x -> x < 0).max(Comparator.naturalOrder());\n        Optional<Integer> smallestPositive = Arrays.stream(arr).filter(x -> x > 0).min(Comparator.naturalOrder());\n        return new Pair<Optional<Integer>, Optional<Integer>>(largestNegative, smallestPositive);",
        "grade-159": {
            "execution": 0
        },
        "24": "// write code here!\n        return null;",
        "grade-24": {
            "execution": 0
        },
        "171": "Optional<Integer> largest = Optional.empty();\n        Optional<Integer> smallest = Optional.empty();\n        int size = lst.size();\n        if (size == 0) {\n            return new Pair<Optional<Integer>, Optional<Integer>>(largest, smallest);\n        }\n        for (int i = 0; i < size; i++) {\n            int val = lst.get(i);\n            if (val < 0) {\n                if (!largest.isPresent()) {\n                    largest = Optional.of(val);\n                } else {\n                    if (val > largest.get()) {\n                        largest = Optional.of(val);\n                    }\n                }\n            } else if (val > 0) {\n                if (!smallest.isPresent()) {\n                    smallest = Optional.of(val);\n                } else {\n                    if (val < smallest.get()) {\n                        smallest = Optional.of(val);\n                    }\n                }\n            }\n        }\n        return new Pair<Optional<Integer>, Optional<Integer>>(largest, smallest);",
        "grade-171": {
            "execution": 0
        },
        "123": "return Pair.with(\n          lst.stream().filter(n -> n < 0).max(Comparator.naturalOrder()),\n          lst.stream().filter(n -> n > 0).min(Comparator.naturalOrder())\n        );",
        "grade-123": {
            "execution": 0
        },
        "8": "// Your code here.\n        // No need to include the class \"Options\" in the import list,\n        // since it's already imported.\n        return null;",
        "grade-8": {
            "execution": 0
        },
        "7": "Optional<Integer> maxNegativeOpt = Optional.empty();\n        Optional<Integer> minPositiveOpt = Optional.empty();\n        for (Integer i : lst) {\n            if (i < 0) {\n                if (!maxNegativeOpt.isPresent() || maxNegativeOpt.get() < i) {\n                    maxNegativeOpt = Optional.of(i);\n                }\n            } else if (i > 0) {\n                if (!minPositiveOpt.isPresent() || minPositiveOpt.get() > i) {\n                    minPositiveOpt = Optional.of(i);\n                }\n            }\n        }\n        return Pair.with(maxNegativeOpt, minPositiveOpt);",
        "grade-7": {
            "execution": 0
        },
        "25": "// Your code here",
        "grade-25": {
            "execution": 0
        },
        "60": "// Insert your code here",
        "grade-60": {
            "execution": 0
        },
        "64": "// show me the code\n        return null;",
        "grade-64": {
            "execution": 0
        },
        "147": "// Write your code here\n        Optional<Integer> smallestPos = Optional.empty();\n        Optional<Integer> largestNeg = Optional.empty();\n        for (Integer i : lst) {\n            if (i < 0) {\n                if (!largestNeg.isPresent() || i > largestNeg.get()) {\n                    largestNeg = Optional.of(i);\n                }\n            } else if (i > 0) {\n                if (!smallestPos.isPresent() || i < smallestPos.get()) {\n                    smallestPos = Optional.of(i);\n                }\n            }\n        }\n        return Pair.with(largestNeg, smallestPos);",
        "grade-147": {
            "execution": 0
        },
        "176": "//write the code here\n        return null;",
        "grade-176": {
            "execution": 0
        },
        "163": "// ...",
        "grade-163": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return n-th Fibonacci number.\n    // >>> fib(10)\n    // 55\n    // >>> fib(1)\n    // 1\n    // >>> fib(8)\n    // 21\n    public static int fib(int n) {\n",
        "snippet": [
            "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        return fib(n - 1) + fib(n - 2);\n    }\n}"
        ],
        "simplified": "Return n-th Fibonacci number.",
        "task_id": "55",
        "133": "int[] a = new int[n + 1];\n        a[0] = 0;\n        a[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            a[i] = a[i - 1] + a[i - 2];\n        }\n        return a[n];",
        "grade-133": {
            "execution": 1
        },
        "18": "if (n == 1) {\n            return 1;\n        }\n        int a = 0;\n        int b = 1;\n        for (int i = 2; i <= n; i++) {\n            int c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;",
        "grade-18": {
            "execution": 1
        },
        "4": "int[] fib = new int[n + 1];\n        fib[0] = 0;\n        fib[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            fib[i] = fib[i - 1] + fib[i - 2];\n        }\n        return fib[n];",
        "grade-4": {
            "execution": 1
        },
        "156": "if (n == 1) {\n\t    return 1;\n\t} else if (n == 2) {\n\t    return 1;\n\t} else {\n\t    return fib(n - 1) + fib(n - 2);\n\t}",
        "grade-156": {
            "execution": 1
        },
        "50": "int prevprev = 0;\n        int prev = 1;\n        for (int i = 0; i < n; i++) {\n            int current = prevprev + prev;\n            prevprev = prev;\n            prev = current;\n        }\n        return prevprev;",
        "grade-50": {
            "execution": 1
        },
        "43": "// Compute the answer in here.\n        // Please do not use recursion.\n        if (n == 1) return 1;\n        if (n == 2) return 1;\n        int fib1 = 1;\n        int fib2 = 1;\n        int fib = 0;\n        for (int i = 3; i <= n; i++) {\n            fib = fib1 + fib2;\n            fib1 = fib2;\n            fib2 = fib;\n        }\n        return fib;",
        "grade-43": {
            "execution": 1
        },
        "39": "int a = 0;\n        int b = 1;\n        if (n <= 1) {\n            return n;\n        }\n        for (int i = 2; i <= n; i++) {\n            int c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;",
        "grade-39": {
            "execution": 1
        },
        "23": "int result = 0;\n        if (n == 1) {\n            result = 1;\n        } else if (n > 1) {\n            result = fib(n - 1) + fib(n - 2);\n        }\n        return result;",
        "grade-23": {
            "execution": 1
        },
        "17": "int[][] T = new int[][]{{1,1},{1,0}};\n        return pow(T, n)[0][0];",
        "grade-17": {
            "execution": 0
        },
        "140": "if (n < 1) {\n            return -1;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        int a = 1;\n        int b = 1;\n        for (int i = 2; i < n; i++) {\n            int c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;",
        "grade-140": {
            "execution": 1
        },
        "192": "int[] fibs = new int[n + 1];\n        fibs[0] = 0;\n        fibs[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            fibs[i] = fibs[i - 1] + fibs[i - 2];\n        }\n        return fibs[n];",
        "grade-192": {
            "execution": 1
        },
        "113": "if (n <= 1) {\n            return n;\n        }\n        int[] f = new int[n + 1];\n        f[0] = 0;\n        f[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            f[i] = f[i - 1] + f[i - 2];\n        }\n        return f[n];",
        "grade-113": {
            "execution": 1
        },
        "14": "int result = 0;\n        int prev = 1;\n        for (int i = 0; i < n; i++) {\n            int tmp = result;\n            result += prev;\n            prev = tmp;\n        }\n        return result;",
        "grade-14": {
            "execution": 1
        },
        "123": "// nth Fibonacci number.\n        int fib = 0;\n        // Write your solution here.\n        if (n == 1) return 1;\n        if (n == 2) return 1;\n        int[] fibArray = new int[n+1];\n        fibArray[1] = 1;\n        fibArray[2] = 1;\n        for (int i = 3; i <= n; i++) {\n            fibArray[i] = fibArray[i-1] + fibArray[i-2];\n        }\n        fib = fibArray[n];\n        return fib;",
        "grade-123": {
            "execution": 1
        },
        "82": "//return (int)DoubleStream.iterate(1, x -> x + 1).limit(n).reduce(0, (x, y) -> x + y);\n        //return (int)IntStream.range(0, n).reduce(0, (x, y) -> x + y);\n        //return (int)IntStream.range(0, n).sum();\n        int a = 0, b = 1;\n        for (int i = 0; i < n; i++) {\n            int c = a + b;\n            a = b;\n            b = c;\n        }\n        return a;",
        "grade-82": {
            "execution": 1
        },
        "5": "int i = 1;\n        int fib = 1;\n        int prev = 1;\n        while (i < n) {\n            int temp = fib;\n            fib += prev;\n            prev = temp;\n            i++;\n        }\n        return fib;",
        "grade-5": {
            "execution": 0
        },
        "38": "//\n        // YOUR CODE HERE\n        //",
        "grade-38": {
            "execution": 0
        },
        "40": "int f0 = 0;\n        int f1 = 1;\n        for (int i = 2; i <= n; i++) {\n            int f2 = f0 + f1;\n            f0 = f1;\n            f1 = f2;\n        }\n        return f1;",
        "grade-40": {
            "execution": 1
        },
        "104": "int[] mem = new int[n + 1];\n        for (int i = 0; i < n + 1; i++) {\n            if (i == 0) {\n                mem[i] = 0;\n            } else if (i == 1) {\n                mem[i] = 1;\n            } else {\n                mem[i] = mem[i - 1] + mem[i - 2];\n            }\n        }\n        return mem[n];",
        "grade-104": {
            "execution": 1
        },
        "126": "int previous = 0;\n        int current = 1;\n        for (int i = 0; i < n; i++) {\n            int tmp = previous;\n            previous = current;\n            current = tmp + current;\n        }\n        return previous;",
        "grade-126": {
            "execution": 1
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    // \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    public static String circularShift(int x, int shift) {\n",
        "snippet": [
            "        String s = String.valueOf(x);\n        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n        } else {\n            return s.substring(s.length() - shift) + s.substring(0, s.length() - shift);\n        }\n    }\n}"
        ],
        "simplified": "Circular shift the digits of the integer x, shift the digits right by shift and return the result as a string. If shift > number of digits, return digits reversed.",
        "task_id": "65",
        "169": "String s = Integer.toString(x);\n        int len = s.length();\n        if (shift > len) {\n            StringBuilder sb = new StringBuilder(s);\n            return sb.reverse().toString();\n        }\n        String first = s.substring(0, len - shift);\n        String second = s.substring(len - shift);\n        return second + first;",
        "grade-169": {
            "execution": 1
        },
        "28": "String ans = Integer.toString(x);\n        if (shift >= ans.length()) {\n            return new StringBuilder(ans).reverse().toString();\n        }\n        return ans.substring(shift) + ans.substring(0, shift);",
        "grade-28": {
            "execution": 0
        },
        "6": "String s = String.valueOf(x);\n        while (shift >= s.length()) shift -= s.length();\n        String result = s.substring(shift) + s.substring(0, shift);\n        return result;",
        "grade-6": {
            "execution": 0
        },
        "196": "char[] digits = Integer.toString(x).toCharArray();\n        int numDigits = digits.length;\n        if (shift > numDigits) {\n            shift = numDigits;\n        }\n        char[] shifted = new char[numDigits];\n        for (int i = 0; i < numDigits; i++) {\n            shifted[i] = digits[(numDigits - shift + i) % numDigits];\n        }\n        return new String(shifted);",
        "grade-196": {
            "execution": 0
        },
        "72": "if (shift == 0) return Integer.toString(x);\n        else if (shift > Integer.toString(x).length()) return new StringBuilder(Integer.toString(x)).reverse().toString();\n        else {\n            StringBuilder str = new StringBuilder(Integer.toString(x));\n            return str.substring(str.length() - shift) + str.substring(0, str.length() - shift);\n        }",
        "grade-72": {
            "execution": 1
        },
        "62": "final String s = String.valueOf(x);\n        final int length = s.length();\n        final StringBuilder sb = new StringBuilder();\n        if (shift > length) {\n            for (int i = 0; i < length; i++) {\n                sb.append(s.charAt(length - i - 1));\n            }\n        } else {\n            sb.append(s.substring(length - shift, length));\n            sb.append(s.substring(0, length - shift));\n        }\n        return sb.toString();",
        "grade-62": {
            "execution": 1
        },
        "57": "String s = \"\" + x;\n        String s_shifted = s.substring(shift, s.length()) + s.substring(0, shift);\n        return s_shifted;",
        "grade-57": {
            "execution": 0
        },
        "35": "String s = Integer.toString(x);\n        StringBuilder sb = new StringBuilder();\n        if (shift <= s.length()) {\n            String res = s.substring(s.length() - shift, s.length()) + s.substring(0, s.length() - shift);\n            sb.append(res);\n        } else {\n            for (int i = s.length() - 1; i >= 0; i--) {\n                sb.append(s.charAt(i));\n            }\n        }\n        return sb.toString();",
        "grade-35": {
            "execution": 1
        },
        "195": "String s = String.valueOf(x);\n        String s1 = s.substring(shift) + s.substring(0, shift);\n        return s1;",
        "grade-195": {
            "execution": 0
        },
        "26": "String str = String.valueOf(x);\n        shift = shift % str.length();\n        if (shift == 0) {\n            return str;\n        }\n        return str.substring(str.length() - shift) + str.substring(0, str.length() - shift);",
        "grade-26": {
            "execution": 0
        },
        "180": "String s = Integer.toString(x);\n        if (shift >= s.length()) {\n            StringBuilder sb = new StringBuilder(s);\n            return sb.reverse().toString();\n        }\n        int i = shift;\n        StringBuilder sb = new StringBuilder();\n        while (i < s.length()) {\n            sb.append(s.charAt(i));\n            i++;\n        }\n        while (i < s.length() + shift) {\n            sb.append(s.charAt(i - s.length()));\n            i++;\n        }\n        return sb.toString();",
        "grade-180": {
            "execution": 0
        },
        "145": "StringBuilder sb = new StringBuilder();\n        String s = Integer.toString(x);\n        if (shift > s.length())\n            shift %= s.length();\n        for (int i = s.length() - shift; i < s.length(); i++)\n            sb.append(s.charAt(i));\n        for (int i = 0; i < s.length() - shift; i++)\n            sb.append(s.charAt(i));\n        return sb.toString();",
        "grade-145": {
            "execution": 0
        },
        "22": "String str = Integer.toString(x);\n        // if shift > number of digits in x, rotate the digits the other way.\n        if (shift > str.length()) {\n            shift = shift % str.length();\n            str = new StringBuilder(str).reverse().toString();\n        }\n        StringBuilder sb = new StringBuilder(str);\n        String sub = sb.substring(0, shift);\n        String end = sb.substring(shift);\n        sb = new StringBuilder(end);\n        sb.append(sub);\n        return sb.toString();",
        "grade-22": {
            "execution": 0
        },
        "157": "int l = (int)Math.floor(Math.log10(x) + 1);\n        int[] arr = new int[l];\n        for (int i = 0; i < l; i++) {\n            arr[i] = x % 10;\n            x /= 10;\n        }\n        int s = shift % l;\n        int[] arr_rev = new int[l];\n        for (int i = 0; i < l; i++) {\n            arr_rev[i] = arr[(i + s) % l];\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < l; i++) {\n            sb.append(arr_rev[i]);\n        }\n        return sb.toString();",
        "grade-157": {
            "execution": 0
        },
        "113": "List<Character> digits = new ArrayList<>();\n        while (x > 0) {\n            digits.add((char)('0' + x % 10));\n            x /= 10;\n        }\n        Collections.reverse(digits);\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < digits.size(); i++) {\n            int index = (shift + i) % digits.size();\n            result.append(digits.get(index));\n        }\n        return result.toString();",
        "grade-113": {
            "execution": 0
        },
        "8": "int length = 0;\n        int x2 = x;\n        String ans = \"\";\n        while (x2 > 0) {\n            length++;\n            x2 /= 10;\n        }\n        if (shift >= length) {\n            ans = new StringBuilder(Integer.toString(x)).reverse().toString();\n        } else {\n            ans = Integer.toString(x);\n            int i = 0;\n            while (i < shift) {\n                ans = ans.substring(1) + ans.charAt(0);\n                i++;\n            }\n        }\n        return ans;",
        "grade-8": {
            "execution": 0
        },
        "7": "if (shift == 0) return Integer.toString(x);\n        char[] digits = Integer.toString(x).toCharArray();\n        for (int i = 0; i < shift; i++) {\n            char last = digits[digits.length - 1];\n            for (int j = digits.length - 1; j > 0; j--) {\n                digits[j] = digits[j - 1];\n            }\n            digits[0] = last;\n        }\n        return new String(digits);",
        "grade-7": {
            "execution": 0
        },
        "23": "String s = Integer.toString(x);\n        if (shift == 0) return s;\n        int l = s.length();\n        if (shift >= l) return new StringBuilder(s).reverse().toString();\n        return s.substring(l - shift) + s.substring(0, l - shift);",
        "grade-23": {
            "execution": 0
        },
        "55": "String string = Integer.toString(x);\n        int len = string.length();\n        StringBuilder sb = new StringBuilder();\n        if (shift > len) {\n            for (int i = len - 1; i >= 0; i--) {\n                sb.append(string.charAt(i));\n            }\n        } else {\n            for (int i = len - shift; i < len; i++) {\n                sb.append(string.charAt(i));\n            }\n            for (int i = 0; i < len - shift; i++) {\n                sb.append(string.charAt(i));\n            }\n        }\n        return sb.toString();",
        "grade-55": {
            "execution": 1
        },
        "59": "int n = 1;\n        int y = x;\n        while (y >= 10) {\n            y /= 10;\n            n++;\n        }\n        if (shift > n)\n            return new StringBuilder(Integer.toString(x)).reverse().toString();\n        int z = x % 10;\n        for (int i = 0; i < shift; i++) {\n            x /= 10;\n            z *= 10;\n        }\n        return Integer.toString(z + x);",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return maximum element in the list.\n    // >>> max_element([1, 2, 3])\n    // 3\n    // >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    // 123\n    public static int maxElement(ArrayList<Integer> l) {\n",
        "snippet": [
            "        return Collections.max(l);\n    }\n}"
        ],
        "simplified": "Return maximum element in the list.",
        "task_id": "35",
        "139": "int m = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > m) {\n                m = l.get(i);\n            }\n        }\n        return m;",
        "grade-139": {
            "execution": 1
        },
        "19": "// Write your code here\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;",
        "grade-19": {
            "execution": 1
        },
        "4": "int max = Integer.MIN_VALUE;\n        for (int i : l) {\n            if (i > max) {\n                max = i;\n            }\n        }\n        return max;",
        "grade-4": {
            "execution": 1
        },
        "174": "int maximum = 0;\n        for (int i : l) {\n            if (i > maximum)\n                maximum = i;\n        }\n        return maximum;",
        "grade-174": {
            "execution": 1
        },
        "52": "int result = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > result) {\n                result = l.get(i);\n            }\n        }\n        return result;",
        "grade-52": {
            "execution": 1
        },
        "45": "int max = Integer.MIN_VALUE;\n        for (int i = 0; i < l.size(); i++) {\n            max = Math.max(max, l.get(i));\n        }\n        return max;",
        "grade-45": {
            "execution": 1
        },
        "40": "int m = Integer.MIN_VALUE;\n        for (int i = 0; i < l.size(); i++) {\n            m = Math.max(m, l.get(i));\n        }\n        return m;",
        "grade-40": {
            "execution": 1
        },
        "24": "return Collections.max(l);",
        "grade-24": {
            "execution": 1
        },
        "18": "//YOUR CODE GOES HERE\n        int max=-9999;\n        for(int i=0;i<l.size();i++)\n        {\n            if(l.get(i)>max)\n            {\n                max=l.get(i);\n            }\n        }\n        return max;",
        "grade-18": {
            "execution": 1
        },
        "158": "// >>> YOUR CODE HERE <<<",
        "grade-158": {
            "execution": 0
        },
        "122": "// Write your code here.\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            max = Math.max(max, l.get(i));\n        }\n        return max;",
        "grade-122": {
            "execution": 1
        },
        "15": "int max = l.get(0);\n        for (int i : l) {\n            if (i > max) {\n                max = i;\n            }\n        }\n        return max;",
        "grade-15": {
            "execution": 1
        },
        "132": "return -1;",
        "grade-132": {
            "execution": 0
        },
        "95": "int x = 0;\n        for (int i : l) x = Math.max(x, i);\n        return x;",
        "grade-95": {
            "execution": 1
        },
        "5": "// INSERT YOUR CODE HERE\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            max = Math.max(max, l.get(i));\n        }\n        return max;",
        "grade-5": {
            "execution": 1
        },
        "38": "int m = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) > m) {\n                m = l.get(i);\n            }\n        }\n        return m;",
        "grade-38": {
            "execution": 1
        },
        "42": "// Your code here\n        if (l.size()==0) return 0;\n        int max=0;\n        for (int i=0;i<l.size();i++){\n            if (l.get(i)>max) max=l.get(i);\n        }\n        return max;",
        "grade-42": {
            "execution": 1
        },
        "114": "// Replace with your implementation.\n        int result = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            result = Math.max(result, l.get(i));\n        }\n        return result;",
        "grade-114": {
            "execution": 1
        },
        "135": "int m = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            m = Math.max(m, l.get(i));\n        }\n        return m;",
        "grade-135": {
            "execution": 1
        },
        "127": "// Your code here.\n        return 0;",
        "grade-127": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    // Examples\n    // solution([5, 8, 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30, 13, 24, 321]) ==>0\n    public static int solution(ArrayList<Integer> lst) {\n",
        "snippet": [
            "        int sum = 0;\n        for (int i = 0; i < lst.size(); i += 2) {\n            if ((lst.get(i) % 2) == 1) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"
        ],
        "simplified": "Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.",
        "task_id": "121",
        "147": "int i = 0;\n        int sum = 0;\n        while (i < lst.size()) {\n            if (i % 2 == 0 && lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n            i++;\n        }\n        return sum;",
        "grade-147": {
            "execution": 1
        },
        "20": "return 0;",
        "grade-20": {
            "execution": 0
        },
        "3": "int oddSum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 != 0) {\n                oddSum += lst.get(i);\n            }\n        }\n        return oddSum;",
        "grade-3": {
            "execution": 1
        },
        "182": "// Write your code here\n        int result = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 != 0)\n                result += lst.get(i);\n        }\n        return result;",
        "grade-182": {
            "execution": 1
        },
        "55": "return 1;",
        "grade-55": {
            "execution": 0
        },
        "50": "int count = 1;\n        int sum = 0;\n        for (int i : lst) {\n            if (count % 2 == 0 && i % 2 != 0) {\n                sum += i;\n            }\n            count++;\n        }\n        return sum;",
        "grade-50": {
            "execution": 0
        },
        "45": "if (lst.size() == 0) {\n            return 0;\n        }\n        int count = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 != 0) {\n                count += lst.get(i);\n            }\n        }\n        return count;",
        "grade-45": {
            "execution": 1
        },
        "25": "int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 != 0)\n                sum += lst.get(i);\n        }\n        return sum;",
        "grade-25": {
            "execution": 1
        },
        "18": "int sum = 0;\n        int i = 0;\n        while (i < lst.size()) {\n            if (i % 2 == 0 && lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n            i++;\n        }\n        return sum;",
        "grade-18": {
            "execution": 1
        },
        "158": "ArrayList<Integer> results = new ArrayList<Integer>();\n        for (int i = 0; i < lst.size(); i+=2) {\n            if (i % 2 == 0) {\n                results.add(lst.get(i));\n            }\n        }\n        return results.stream().mapToInt(Integer::intValue).sum();",
        "grade-158": {
            "execution": 0
        },
        "127": "int ret = 0;\n        for (int i = 0; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 1) {\n                ret += lst.get(i);\n            }\n        }\n        return ret;",
        "grade-127": {
            "execution": 1
        },
        "15": "int sum = 0;\n        int count = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (count % 2 == 0 && lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n            count++;\n        }\n        return sum;",
        "grade-15": {
            "execution": 1
        },
        "141": "return IntStream.range(0, lst.size())\n                .filter(x -> x % 2 == 0)\n                .filter(x -> lst.get(x) % 2 != 0)\n                .map(x -> lst.get(x))\n                .sum();",
        "grade-141": {
            "execution": 1
        },
        "98": "return lst.stream().filter(a -> a % 2 == 1).filter(a -> lst.indexOf(a) % 2 == 0).mapToInt(Integer::intValue).sum();",
        "grade-98": {
            "execution": 0
        },
        "4": "int sum = 0;\n        for (int i = 0; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;",
        "grade-4": {
            "execution": 1
        },
        "40": "int res = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 != 0)\n                res += lst.get(i);\n        }\n        return res;",
        "grade-40": {
            "execution": 1
        },
        "47": "// Your code here\n        return IntStream.range(0, lst.size())\n                .filter(x -> x % 2 == 0)\n                .filter(x -> lst.get(x) % 2 != 0)\n                .map(lst::get)\n                .sum();",
        "grade-47": {
            "execution": 1
        },
        "115": "if (lst.size() == 0) return 0;\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 != 0) sum += lst.get(i);\n        }\n        return sum;",
        "grade-115": {
            "execution": 1
        },
        "143": "int index = 0;\n        int sum = 0;\n        for (int i : lst) {\n            if (index % 2 == 0 && i % 2 != 0) {\n                sum += i;\n            }\n            index++;\n        }\n        return sum;",
        "grade-143": {
            "execution": 1
        },
        "132": "// Instantiate a new ArrayList\n        ArrayList<Integer> temp = new ArrayList<Integer>();\n        // Iterate through the elements of the original list and add the element if it is in an even position and if it is odd.\n        for (int i = 0; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 != 0) {\n                temp.add(lst.get(i));\n            }\n        }\n        // Return the sum of the elements in the new list.\n        return temp.stream().mapToInt(Integer::intValue).sum();",
        "grade-132": {
            "execution": 1
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n",
        "snippet": [
            "        List<String> planet_names = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        if (!planet_names.contains(planet1) || !planet_names.contains(planet2) || planet1.equals(planet2)) {\n            return List.of();\n        }\n        int planet1_index = planet_names.indexOf(planet1);\n        int planet2_index = planet_names.indexOf(planet2);\n        if (planet1_index < planet2_index) {\n            return planet_names.subList(planet1_index + 1, planet2_index);\n        } else {\n            return planet_names.subList(planet2_index + 1, planet1_index);\n        }\n    }\n}"
        ],
        "simplified": "There are eight planets in our solar system: the closerst to the Sun is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Write a function that takes two planet names as strings planet1 and planet2. The function should return a tuple containing all planets whose orbits are located between the orbit of planet1 and the orbit of planet2, sorted by the proximity to the sun. The function should return an empty tuple if planet1 or planet2 are not correct planet names.",
        "task_id": "148",
        "0": "ArrayList<String> res = new ArrayList<String>();\n        return res;",
        "grade-0": {
            "execution": 0
        },
        "1": "HashSet<String> set = new HashSet<>();\n        ArrayList<String> res = new ArrayList<>();\n        if (planet1.equals(\"Earth\") || planet1.equals(\"Venus\") || planet1.equals(\"Mars\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")){\n            set.add(planet1);\n        }\n        if (planet2.equals(\"Earth\") || planet2.equals(\"Venus\") || planet2.equals(\"Mars\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")){\n            set.add(planet2);\n        }\n        if (set.contains(\"Mercury\")){\n            res.add(\"Mercury\");\n        }\n        if (set.contains(\"Venus\")){\n            res.add(\"Venus\");\n        }\n        if (set.contains(\"Earth\")){\n            res.add(\"Earth\");\n        }\n        if (set.contains(\"Mars\")){\n            res.add(\"Mars\");\n        }\n        if (set.contains(\"Jupiter\")){\n            res.add(\"Jupiter\");\n        }\n        if (set.contains(\"Saturn\")){\n            res.add(\"Saturn\");\n        }\n        if (set.contains(\"Uranus\")){\n            res.add(\"Uranus\");\n        }\n        if (set.contains(\"Neptune\")){\n            res.add(\"Neptune\");\n        }\n        return res;",
        "grade-1": {
            "execution": 0
        },
        "2": "throw new UnsupportedOperationException(\"You must implement this function.\");",
        "grade-2": {
            "execution": 0
        },
        "3": "ArrayList<String> planets = new ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> temp = new ArrayList<String>();\n        if (planets.contains(planet1) && planets.contains(planet2)) {\n            if (planets.indexOf(planet1) < planets.indexOf(planet2)) {\n                temp = new ArrayList<String>(planets.subList(planets.indexOf(planet1) + 1, planets.indexOf(planet2)));\n            } else {\n                temp = new ArrayList<String>(planets.subList(planets.indexOf(planet2) + 1, planets.indexOf(planet1)));\n            }\n        }\n        return temp;",
        "grade-3": {
            "execution": 0
        },
        "4": "ArrayList<String> res = new ArrayList<String>();\n        ArrayList<String> planets = new ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"Neptune\");\n        boolean b1 = planets.contains(planet1);\n        boolean b2 = planets.contains(planet2);\n        if(b1 && b2) {\n            int p1 = planets.indexOf(planet1);\n            int p2 = planets.indexOf(planet2);\n            if(p1 < p2) {\n                while(p1 < p2) {\n                    res.add(planets.get(p1));\n                    p1++;\n                }\n            }\n            else {\n                while(p2 < p1) {\n                    res.add(planets.get(p2));\n                    p2++;\n                }\n            }\n        }\n        return res;",
        "grade-4": {
            "execution": 0
        },
        "5": "Map<String,Integer> map = new HashMap<>();\n        map.put(\"Mercury\",1);\n        map.put(\"Venus\",2);\n        map.put(\"Earth\",3);\n        map.put(\"Mars\",4);\n        map.put(\"Jupiter\",5);\n        map.put(\"Saturn\",6);\n        map.put(\"Uranus\",7);\n        map.put(\"Neptune\",8);\n        if(!map.containsKey(planet1) || !map.containsKey(planet2)) return new ArrayList<>();\n        ArrayList<String> result = new ArrayList<>();\n        boolean min = map.get(planet1) < map.get(planet2);\n        for(Map.Entry<String,Integer> el: map.entrySet()){\n            if(min && el.getValue() > map.get(planet1) && el.getValue() < map.get(planet2))\n                result.add(el.getKey());\n            if(!min && el.getValue() > map.get(planet2) && el.getValue() < map.get(planet1))\n                result.add(el.getKey());\n        }\n        return result;",
        "grade-5": {
            "execution": 0
        },
        "6": "return new ArrayList<String>();",
        "grade-6": {
            "execution": 0
        },
        "8": "ArrayList<String> planets = new ArrayList<>();\n        ArrayList<String> result = new ArrayList<>();\n        planets.add(\"Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"Neptune\");\n        if(planets.contains(planet1) && planets.contains(planet2)) {\n            int index1 = planets.indexOf(planet1);\n            int index2 = planets.indexOf(planet2);\n            if(index1 > index2) {\n                for(int i = index2 + 1; i < index1; i++) {\n                    result.add(planets.get(i));\n                }\n            }\n            else {\n                for(int i = index1 + 1; i < index2; i++) {\n                    result.add(planets.get(i));\n                }\n            }\n        }\n        return result;",
        "grade-8": {
            "execution": 1
        },
        "9": "ArrayList<String> planets = new ArrayList<>();\n        planets.add(\"Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> planetsBetween = new ArrayList<>();\n        if(!planets.contains(planet1) || !planets.contains(planet2)) {\n            return planetsBetween;\n        }\n        int start = Math.min(planets.indexOf(planet1), planets.indexOf(planet2));\n        int end = Math.max(planets.indexOf(planet1), planets.indexOf(planet2));\n        for(int i = start + 1; i < end; i++) {\n            planetsBetween.add(planets.get(i));\n        }\n        return planetsBetween;",
        "grade-9": {
            "execution": 1
        },
        "10": "ArrayList<String> planetList = new ArrayList<String>();\n        for (Planet planet : Planet.values()) {\n            planetList.add(planet.name());\n        }\n        if (!planetList.contains(planet1) || !planetList.contains(planet2)) {\n            return new ArrayList<String>();\n        }\n        int planet1Order = planetList.indexOf(planet1);\n        int planet2Order = planetList.indexOf(planet2);\n        int planet1OrderIndex = Math.min(planet1Order, planet2Order);\n        int planet2OrderIndex = Math.max(planet1Order, planet2Order);\n        return new ArrayList<String>(planetList.subList(planet1OrderIndex + 1, planet2OrderIndex));",
        "grade-10": {
            "execution": 0
        },
        "11": "ArrayList<String> ret = new ArrayList<String>();\n        String[] planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n        boolean planet1B = false;\n        boolean planet2B = false;\n        int planet1I = 0;\n        int planet2I = 0;\n        for (int i = 0; i < planets.length; i++) {\n            if (planets[i].equals(planet1)) {\n                planet1B = true;\n                planet1I = i;\n            }\n            if (planets[i].equals(planet2)) {\n                planet2B = true;\n                planet2I = i;\n            }\n        }\n        if (planet1B && planet2B) {\n            int start = Math.min(planet1I, planet2I);\n            int end = Math.max(planet1I, planet2I);\n            for (int i = start + 1; i < end; i++) {\n                ret.add(planets[i]);\n            }\n        }\n        return ret;",
        "grade-11": {
            "execution": 1
        },
        "12": "// Write your code here.\n        return null;",
        "grade-12": {
            "execution": 0
        },
        "13": "if (planet1.equals(\"\") || planet2.equals(\"\")) return new ArrayList<String>();\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        if (!planets.contains(planet1) || !planets.contains(planet2)) return new ArrayList<String>();\n        if (planets.indexOf(planet1) > planets.indexOf(planet2)) {\n            return new ArrayList<String>(planets.subList(planets.indexOf(planet2) + 1, planets.indexOf(planet1)));\n        } else {\n            return new ArrayList<String>(planets.subList(planets.indexOf(planet1) + 1, planets.indexOf(planet2)));\n        }",
        "grade-13": {
            "execution": 0
        },
        "14": "ArrayList<String> names = new ArrayList<String>();\n        if (orb.containsKey(planet1) && orb.containsKey(planet2)) {\n            if (orb.get(planet1) < orb.get(planet2)) {\n                for (String name : orb.keySet()) {\n                    if (orb.get(name) > orb.get(planet1) && orb.get(name) < orb.get(planet2)) {\n                        names.add(name);\n                    }\n                }\n            } else {\n                for (String name : orb.keySet()) {\n                    if (orb.get(name) > orb.get(planet2) && orb.get(name) < orb.get(planet1)) {\n                        names.add(name);\n                    }\n                }\n            }\n        }\n        Collections.sort(names, new Comparator<String>() {\n            @Override\n            public int compare(String s1, String s2) {\n                return orb.get(s1) - orb.get(s2);\n            }\n        });\n        return names;",
        "grade-14": {
            "execution": 0
        },
        "15": "Map<String, Integer> map = new HashMap<>();\n        map.put(\"Mercury\", 1);\n        map.put(\"Venus\", 2);\n        map.put(\"Earth\", 3);\n        map.put(\"Mars\", 4);\n        map.put(\"Jupiter\", 5);\n        map.put(\"Saturn\", 6);\n        map.put(\"Uranus\", 7);\n        map.put(\"Neptune\", 8);\n        ArrayList<String> res = new ArrayList<>();\n        if (!map.containsKey(planet1) || !map.containsKey(planet2)) {\n            return res;\n        }\n        if (map.get(planet1) > map.get(planet2)) {\n            String tmp = planet1;\n            planet1 = planet2;\n            planet2 = tmp;\n        }\n        for (String key : map.keySet()) {\n            if (map.get(key) > map.get(planet1) && map.get(key) < map.get(planet2)) {\n                res.add(key);\n            }\n        }\n        return res;",
        "grade-15": {
            "execution": 0
        },
        "16": "ArrayList<String> r = new ArrayList<String>();\n        if (planet1.equals(\"Mercury\")) {\n            if (planet2.equals(\"Venus\")) r.add(\"Venus\");\n            if (planet2.equals(\"Earth\")) r.add(\"Venus\");\n            if (planet2.equals(\"Mars\")) r.add(\"Venus\");\n            if (planet2.equals(\"Jupiter\")) r.add(\"Venus\");\n            if (planet2.equals(\"Saturn\")) r.add(\"Venus\");\n            if (planet2.equals(\"Uranus\")) r.add(\"Venus\");\n            if (planet2.equals(\"Neptune\")) r.add(\"Venus\");\n        }\n        if (planet1.equals(\"Venus\")) {\n            if (planet2.equals(\"Earth\")) r.add(\"Earth\");\n            if (planet2.equals(\"Mars\")) r.add(\"Earth\");\n            if (planet2.equals(\"Jupiter\")) r.add(\"Earth\");\n            if (planet2.equals(\"Saturn\")) r.add(\"Earth\");\n            if (planet2.equals(\"Uranus\")) r.add(\"Earth\");\n            if (planet2.equals(\"Neptune\")) r.add(\"Earth\");\n        }\n        if (planet1.equals(\"Earth\")) {\n            if (planet2.equals(\"Mars\")) r.add(\"Mars\");\n            if (planet2.equals(\"Jupiter\")) r.add(\"Mars\");\n            if (planet2.equals(\"Saturn\")) r.add(\"Mars\");\n            if (planet2.equals(\"Uranus\")) r.add(\"Mars\");\n            if (planet2.equals(\"Neptune\")) r.add(\"Mars\");\n        }\n        if (planet1.equals(\"Mars\")) {\n            if (planet2.equals(\"Jupiter\")) r.add(\"Jupiter\");\n            if (planet2.equals(\"Saturn\")) r.add(\"Jupiter\");\n            if (planet2.equals(\"Uranus\")) r.add(\"Jupiter\");\n            if (planet2.equals(\"Neptune\")) r.add(\"Jupiter\");",
        "grade-16": {
            "execution": 0
        },
        "17": "ArrayList<String> planets = new ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> output = new ArrayList<String>();\n        int p1Index = planets.indexOf(planet1);\n        int p2Index = planets.indexOf(planet2);\n        if(p1Index==-1 || p2Index==-1) {\n            return output;\n        }\n        if(p1Index<p2Index) {\n            for(int i=p1Index+1;i<p2Index;i++) {\n                output.add(planets.get(i));\n            }\n        } else {\n            for(int i=p2Index+1;i<p1Index;i++) {\n                output.add(planets.get(i));\n            }\n        }\n        return output;",
        "grade-17": {
            "execution": 1
        },
        "18": "ArrayList<String> planets = new ArrayList<String>();\n        ArrayList<String> betweenPlanets = new ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"Neptune\");\n        if (!planets.contains(planet1) || !planets.contains(planet2)) {\n            return betweenPlanets;\n        }\n        int j = planets.indexOf(planet1);\n        int k = planets.indexOf(planet2);\n        int start = j < k ? j : k;\n        int end = j < k ? k : j;\n        for (int i = start + 1; i < end; i++) {\n            betweenPlanets.add(planets.get(i));\n        }\n        return betweenPlanets;",
        "grade-18": {
            "execution": 1
        },
        "19": "ArrayList<String> result = new ArrayList<String>();\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        int i1 = planets.indexOf(planet1);\n        int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1) {\n            return result;\n        }\n        int i = i1;\n        if (i2 < i1) {\n            i = i2;\n            i2 = i1;\n            i1 = i;\n        }\n        for (; i <= i2; i++) {\n            if (i == i1) {\n                continue;\n            }\n            result.add(planets.get(i));\n        }\n        return result;",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer> parseNestedParens(String paren_string) {\n",
        "snippet": [
            "        String[] groups = paren_string.split(\" \");\n        List<Integer> result = new ArrayList<>(List.of());\n        for (String group : groups) {\n            if (group.length() > 0) {\n                int depth = 0;\n                int max_depth = 0;\n                for (char c : group.toCharArray()) {\n                    if (c == '(') {\n                        depth += 1;\n                        max_depth = Math.max(depth, max_depth);\n                    } else {\n                        depth -= 1;\n                    }\n                }\n                result.add(max_depth);\n            }\n        }\n        return result;\n    }\n}"
        ],
        "simplified": "Input to this function is a string represented multiple groups for nested parentheses separated by spaces. For each of the group, output the deepest level of nesting of parentheses. E.g. (()()) has maximum two levels of nesting while ((())) has three.",
        "task_id": "6",
        "170": "ArrayList<Integer> maxLevel = new ArrayList<Integer>();\n        int level = 0;\n        int max = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                level++;\n                if (level > max) {\n                    max = level;\n                }\n            } else if (paren_string.charAt(i) == ')') {\n                level--;\n            } else if (paren_string.charAt(i) == ' ') {\n                maxLevel.add(max);\n                max = 0;\n                level = 0;\n            }\n        }\n        maxLevel.add(max);\n        return maxLevel;",
        "grade-170": {
            "execution": 1
        },
        "28": "// Write your code here\n        ArrayList<Integer> ans = new ArrayList<Integer>();\n        int index = 0;\n        String[] parens = paren_string.split(\" \");\n        for (String paren : parens) {\n            int pos = 0;\n            int max = 0;\n            for (int i = 0; i < paren.length(); i++) {\n                if (paren.charAt(i) == '(') {\n                    pos++;\n                    max = Math.max(max, pos);\n                } else {\n                    pos--;\n                }\n            }\n            ans.add(max);\n        }\n        return ans;",
        "grade-28": {
            "execution": 1
        },
        "6": "ArrayList<Integer> ans = new ArrayList<Integer>();\n        int cur_val = 0;\n        int max_val = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                cur_val++;\n                max_val = Math.max(max_val, cur_val);\n            } else if (paren_string.charAt(i) == ')') {\n                cur_val--;\n            } else if (paren_string.charAt(i) == ' ') {\n                ans.add(max_val);\n                max_val = 0;\n                cur_val = 0;\n            }\n        }\n        ans.add(max_val);\n        return ans;",
        "grade-6": {
            "execution": 1
        },
        "199": "ArrayList<Integer> maxDepth = new ArrayList<Integer>();\n        String[] groups = paren_string.split(\" \");\n        for (String group : groups) {\n            int depth = 0;\n            int max = 0;\n            for (int i = 0; i < group.length(); i++) {\n                char c = group.charAt(i);\n                if (c == '(') {\n                    depth++;\n                    if (depth > max) {\n                        max = depth;\n                    }\n                } else if (c == ')') {\n                    depth--;\n                }\n            }\n            maxDepth.add(max);\n        }\n        return maxDepth;",
        "grade-199": {
            "execution": 1
        },
        "71": "String[] groups = paren_string.split(\" \");\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (String g : groups) {\n            int depth = 0;\n            int max_depth = 0;\n            for (int i = 0; i < g.length(); i++) {\n                if (g.charAt(i) == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth, depth);\n                } else if (g.charAt(i) == ')') {\n                    depth--;\n                }\n            }\n            result.add(max_depth);\n        }\n        return result;",
        "grade-71": {
            "execution": 1
        },
        "63": "ArrayList<Integer> result = new ArrayList<Integer>();\n        // <<< Your code goes here.\n        int max = 0;\n        char[] charArray = paren_string.toCharArray();\n        for (int i = 0; i < charArray.length; i++) {\n            if (charArray[i] == '(') {\n                max++;\n            } else if (charArray[i] == ')') {\n                max--;\n            } else if (charArray[i] == ' ') {\n                result.add(max);\n                max = 0;\n            }\n        }\n        result.add(max);\n        // >>>\n        return result;",
        "grade-63": {
            "execution": 0
        },
        "57": "ArrayList<Integer> result = new ArrayList<Integer>();\n        // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n        // [2, 3, 1, 3]\n        String[] groups = paren_string.split(\" \");\n        for (String group : groups) {\n            int max_level = 0;\n            int level = 0;\n            for (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i) == '(') {\n                    level++;\n                    max_level = Math.max(max_level, level);\n                } else if (group.charAt(i) == ')') {\n                    level--;\n                }\n            }\n            result.add(max_level);\n        }\n        return result;",
        "grade-57": {
            "execution": 1
        },
        "35": "int maxParens = 0;\n        int depth = 0;\n        ArrayList<Integer> parens = new ArrayList<Integer>();\n        int stringLength = paren_string.length();\n        for (int i = 0; i < stringLength; i++) {\n            switch (paren_string.charAt(i)) {\n                case '(':\n                    depth++;\n                    break;\n                case ')':\n                    if (depth > maxParens) {\n                        maxParens = depth;\n                    }\n                    depth--;\n                    break;\n                case ' ':\n                    parens.add(maxParens);\n                    maxParens = 0;\n                    break;\n            }\n        }\n        return parens;",
        "grade-35": {
            "execution": 0
        },
        "198": "// Delete the following line and implement this function.\n        char[] chars = paren_string.toCharArray();\n        int max_len = 0;\n        int count = 0;\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] == '(') {\n                count++;\n                if (max_len < count) {\n                    max_len = count;\n                }\n            } else if (chars[i] == ')') {\n                count--;\n            } else if (chars[i] == ' ') {\n                result.add(max_len);\n                max_len = 0;\n                count = 0;\n            }\n        }\n        result.add(max_len);\n        return result;",
        "grade-198": {
            "execution": 1
        },
        "26": "ArrayList<Integer> depths = new ArrayList<Integer>();\n        ArrayList<Integer> pos_list = new ArrayList<Integer>();\n        ArrayList<Integer> temp_depth = new ArrayList<Integer>();\n        int total_depth = 0;\n        String temp_str = \"\";\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                total_depth++;\n                temp_depth.add(total_depth);\n            } else if (c == ')') {\n                total_depth--;\n                temp_depth.add(total_depth);\n            } else if (c == ' ') {\n                if (pos_list.size() == 0) {\n                    pos_list.add(i);\n                } else {\n                    pos_list.add(i - pos_list.get(pos_list.size() - 1) - 1);\n                }\n                int max_depth = Collections.max(temp_depth);\n                depths.add(max_depth);\n                temp_depth.clear();\n            }\n        }\n        pos_list.add(paren_string.length() - pos_list.get(pos_list.size() - 1) - 1);\n        int max_depth = Collections.max(temp_depth);\n        depths.add(max_depth);\n        return depths;",
        "grade-26": {
            "execution": 0
        },
        "181": "ArrayList<Integer> results = new ArrayList<Integer>();\n        for (String group : paren_string.split(\" \")) {\n            Stack<Character> paren_stack = new Stack<Character>();\n            int level = 0;\n            for (char c : group.toCharArray()) {\n                if (c == '(') {\n                    paren_stack.push(c);\n                    level = Math.max(level, paren_stack.size());\n                } else if (c == ')') {\n                    paren_stack.pop();\n                }\n            }\n            results.add(level);\n        }\n        return results;",
        "grade-181": {
            "execution": 1
        },
        "146": "// YOUR CODE GOES HERE\n        return null;",
        "grade-146": {
            "execution": 0
        },
        "22": "ArrayList<Integer> depths = new ArrayList<Integer>();\n        // Fill this in.\n        // Initialize our stack\n        Stack<Character> stack = new Stack<Character>();\n        // For each parentheses string\n        for (String paren_str : paren_string.split(\" \")) {\n            // For each parentheses character\n            for (int i = 0; i < paren_str.length(); i++) {\n                // Push opening parentheses to the stack\n                if (paren_str.charAt(i) == '(') {\n                    stack.push(paren_str.charAt(i));\n                }\n                // Pop closing parentheses from the stack\n                else if (paren_str.charAt(i) == ')') {\n                    stack.pop();\n                }\n            }\n            // Add maximum depth of nested parentheses to the result\n            depths.add(stack.size());\n            // Clear the stack\n            stack.clear();\n        }\n        return depths;",
        "grade-22": {
            "execution": 0
        },
        "158": "ArrayList<Integer> max_nesting = new ArrayList<Integer>();\n        for (String each: paren_string.split(\" \")) {\n            int max = 0;\n            int curr = 0;\n            for (int i = 0; i < each.length(); i++) {\n                if (each.charAt(i) == '(') {\n                    curr++;\n                    max = Math.max(max, curr);\n                } else {\n                    curr--;\n                }\n            }\n            max_nesting.add(max);\n        }\n        return max_nesting;",
        "grade-158": {
            "execution": 1
        },
        "112": "ArrayList<Integer> depth = new ArrayList<Integer>();\n        ArrayList<Character> opening_parens = new ArrayList<Character>();\n        ArrayList<Character> closing_parens = new ArrayList<Character>();\n        int count = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                opening_parens.add(paren_string.charAt(i));\n                count++;\n            } else if (paren_string.charAt(i) == ')') {\n                closing_parens.add(paren_string.charAt(i));\n                count--;\n            } else if (paren_string.charAt(i) == ' ') {\n                // If at the end of a group, add the depth of parens to the depth arraylist\n                depth.add(count);\n                count = 0;\n            }\n        }\n        depth.add(count);\n        if (opening_parens.size() != closing_parens.size()) {\n            throw new IllegalArgumentException(\"The number of opening and closing parentheses is not the same.\");\n        }\n        return depth;",
        "grade-112": {
            "execution": 0
        },
        "8": "// get rid of spaces\n        paren_string = paren_string.replaceAll(\"\\\\s\", \"\");\n        ArrayList<Integer> depths = new ArrayList<Integer>();\n        int start = 0;\n        while (start < paren_string.length()) {\n            if (paren_string.charAt(start) == '(') {\n                int end = paren_string.indexOf(')', start);\n                depths.add(parseNestedParens(paren_string.substring(start, end + 1)));\n                start = end + 1;\n            } else {\n                start += 1;\n            }\n        }\n        return depths;",
        "grade-8": {
            "execution": 0
        },
        "7": "// TODO: Implement this method\n        return null;",
        "grade-7": {
            "execution": 0
        },
        "23": "// Implement this function.\n        return null;",
        "grade-23": {
            "execution": 0
        },
        "55": "ArrayList<Integer> ans = new ArrayList<Integer>();\n        // Write your code here.\n        return ans;",
        "grade-55": {
            "execution": 0
        },
        "60": "//Write your code here\n        ArrayList<Integer> levels = new ArrayList<Integer>();\n        ArrayList<Character> stack = new ArrayList<Character>();\n        int curr_max = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                curr_max += 1;\n                stack.add('(');\n            } else if (paren_string.charAt(i) == ')') {\n                if (stack.get(stack.size() - 1) == '(') {\n                    stack.remove(stack.size() - 1);\n                    if (stack.size() == 0) {\n                        levels.add(curr_max);\n                        curr_max = 0;\n                    }\n                }\n            }\n        }\n        return levels;",
        "grade-60": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // triples_sum_to_zero takes a list of integers as an input.\n    // it returns True if there are three distinct elements in the list that\n    // sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5, 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n    public static boolean triplesSumToZero(ArrayList<Integer> l) {\n",
        "snippet": [
            "        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}"
        ],
        "simplified": "triples_sum_to_zero takes a list of integers as an input. it returns True if there are three distinct elements in the list that sum to zero, and False otherwise.",
        "task_id": "40",
        "36": "Set<Integer> s = new HashSet<Integer>();\n        for (int i : l) {\n            s.add(i);\n        }\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                int k = 0 - l.get(i) - l.get(j);\n                if (s.contains(k)) {\n                    return true;\n                }\n            }\n        }\n        return false;",
        "grade-36": {
            "execution": 1
        },
        "9": "HashSet<Integer> found = new HashSet<Integer>();\n        for (int a : l) {\n            for (int b : l) {\n                int c = -a - b;\n                if (found.contains(c)) {\n                    return true;\n                }\n                found.add(b);\n            }\n        }\n        return false;",
        "grade-9": {
            "execution": 0
        },
        "95": "throw new UnsupportedOperationException(\"Not implemented\");",
        "grade-95": {
            "execution": 0
        },
        "87": "// BEGIN SOLUTION\n        Collections.sort(l);\n        // NOTE: we only need to test combinations where\n        // a <= b <= c\n        for (int a = 0; a < l.size() - 2; a += 1) {\n            int b = a + 1;\n            int c = l.size() - 1;\n            while (b < c) {\n                int sum = l.get(a) + l.get(b) + l.get(c);\n                if (sum == 0) {\n                    return true;\n                } else if (sum < 0) {\n                    b += 1;\n                } else {\n                    c -= 1;\n                }\n            }\n        }\n        return false;\n        // END SOLUTION",
        "grade-87": {
            "execution": 1
        },
        "78": "// Your code here.",
        "grade-78": {
            "execution": 0
        },
        "44": "// your code here\n        int count = 0;\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        count += 1;\n                    }\n                }\n            }\n        }\n        if (count > 0) {\n            return true;\n        } else {\n            return false;\n        }",
        "grade-44": {
            "execution": 1
        },
        "34": "// TODO: finish this function.\n        return false;",
        "grade-34": {
            "execution": 0
        },
        "194": "boolean sum = false;\n        // your code here\n        return sum;",
        "grade-194": {
            "execution": 0
        },
        "30": "HashSet<Integer> h = new HashSet<Integer>();\n        for (int x : l) {\n            h.add(x);\n        }\n        ArrayList<Integer> a = new ArrayList<Integer>(h);\n        Collections.sort(a);\n        int i, j, k;\n        i = 0;\n        while (i < a.size()-2) {\n            j = i+1;\n            k = a.size()-1;\n            while (j < k) {\n                if (a.get(i) + a.get(j) + a.get(k) == 0) {\n                    return true;\n                } else if (a.get(i) + a.get(j) + a.get(k) < 0) {\n                    j++;\n                } else {\n                    k--;\n                }\n            }\n            i++;\n        }\n        return false;",
        "grade-30": {
            "execution": 0
        },
        "147": "int a, b, c;\n        for (int i = 0; i < l.size(); i++) {\n            a = l.get(i);\n            for (int j = i + 1; j < l.size(); j++) {\n                b = l.get(j);\n                for (int k = j + 1; k < l.size(); k++) {\n                    c = l.get(k);\n                    if (a + b + c == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;",
        "grade-147": {
            "execution": 1
        },
        "11": "// Do not change or delete anything that is printed by this line of code.\n        System.out.println(\"Running triplesSumToZero: \" + l);\n        // Your code goes here.\n        boolean ans = false;\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        ans = true;\n                    }\n                }\n            }\n        }\n        return ans;",
        "grade-11": {
            "execution": 1
        },
        "10": "return false;",
        "grade-10": {
            "execution": 0
        },
        "31": "if (l.size() < 3) {\n            return false;\n        }\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;",
        "grade-31": {
            "execution": 1
        },
        "75": "//*****************************************************\n        //***************** WRITE YOUR CODE HERE **************\n        //*****************************************************\n        //if there are not 3 or more elements in the list, return false\n        if (l.size() < 3) {\n            return false;\n        }\n        // create an array of integers to store the values in\n        int[] array = new int[l.size()];\n        // iterate through the list and add the elements to the array\n        for (int i = 0; i < l.size(); i++) {\n            array[i] = l.get(i);\n        }\n        // sort the array in ascending order\n        Arrays.sort(array);\n        // declare three pointers and set them to the first three elements of the array\n        int i = 0;\n        int j = 1;\n        int k = 2;\n        // iterate through the array\n        for (; i < array.length; i++) {\n            // this condition states that if there are only 2 elements remaining in the array\n            // the first two elements will be checked against the last element to see if\n            // there is a sum of zero\n            if (i == array.length - 2) {\n                if (array[i] + array[i + 1] + array[i + 2] == 0) {\n                    return true;\n                }\n            }\n            // set j and k to a subsequent element after i\n            j = i + 1;\n            k = i + 2;\n            // iterate through the array\n            for (; j < array.length; j++) {\n                // start k at the next subsequent element after j\n                k = j + 1;\n                // iterate through the array\n                for (; k < array.length; k++) {\n                    // if the sum of the three pointers is equal to zero, return true\n                    if (array[i] + array[j] + array[k] == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        // if there is no sum of zero, return false\n        return false;",
        "grade-75": {
            "execution": 0
        },
        "82": "throw new UnsupportedOperationException(\"Problem: triplesSumToZero\");",
        "grade-82": {
            "execution": 0
        },
        "178": "// add code here\n        return false;",
        "grade-178": {
            "execution": 0
        },
        "68": "// your code here\n        if (l.size() < 3) {\n            return false;\n        }\n        for (int i = 0; i < l.size() - 2; i++) {\n            for (int j = i + 1; j < l.size() - 1; j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;",
        "grade-68": {
            "execution": 1
        },
        "146": "return l.size() >= 3 && l.contains(0) && l.stream().filter(e -> e == 0).count() >= 3 || l.size() >= 3 && l.stream().filter(e -> l.contains(-e)).count() >= 2;",
        "grade-146": {
            "execution": 0
        },
        "76": "Collections.sort(l);\n        int n = l.size();\n        for (int i = 0; i < n - 2; i++) {\n            int j = i + 1;\n            int k = n - 1;\n            while (j < k) {\n                int sum = l.get(i) + l.get(j) + l.get(k);\n                if (sum == 0) {\n                    return true;\n                } else if (sum < 0) {\n                    j++;\n                } else {\n                    k--;\n                }\n            }\n        }\n        return false;",
        "grade-76": {
            "execution": 1
        },
        "156": "int n = l.size();\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0)\n                        return true;\n                }\n            }\n        }\n        return false;",
        "grade-156": {
            "execution": 1
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two lists operator, and operand. The first list has basic algebra operations, and \n    // the second list is a list of integers. Use the two given lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator list is equal to the length of operand list minus one.\n    // Operand is a list of of non-negative integers.\n    // Operator list has at least one operator, and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String> op, ArrayList<Integer> operand) {\n",
        "snippet": [
            "        List<String> ops = new ArrayList<>(operator);\n        List<Integer> nums = new ArrayList<>(operand);\n        for (int i = ops.size() - 1; i >= 0; i--) {\n            if (ops.get(i).equals(\"**\")) {\n                nums.set(i, (int) Math.round(Math.pow(nums.get(i), nums.get(i + 1))));\n                nums.remove(i + 1);\n                ops.remove(i);\n            }\n        }\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops.get(i).equals(\"*\")) {\n                nums.set(i, nums.get(i) * nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            } else if (ops.get(i).equals(\"/\")) {\n                nums.set(i, nums.get(i) / nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            }\n        }\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops.get(i).equals(\"+\")) {\n                nums.set(i, nums.get(i) + nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            } else if (ops.get(i).equals(\"-\")) {\n                nums.set(i, nums.get(i) - nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            }\n        }\n        return nums.get(0);\n    }\n}"
        ],
        "simplified": "Given two lists operator, and operand. The first list has basic algebra operations, and the second list is a list of integers. Use the two given lists to build the algebric expression and return the evaluation of this expression. The basic algebra operations: Addition ( + ) Subtraction ( - ) Multiplication ( * ) Floor division ( // ) Exponentiation ( ** )",
        "task_id": "160",
        "34": "int val = operand.get(0);\n      for (int i = 0; i < op.size(); i++) {\n        switch (op.get(i)) {\n          case \"+\":\n            val += operand.get(i + 1);\n            break;\n          case \"-\":\n            val -= operand.get(i + 1);\n            break;\n          case \"*\":\n            val *= operand.get(i + 1);\n            break;\n          case \"//\":\n            val /= operand.get(i + 1);\n            break;\n          case \"**\":\n            val = (int) Math.pow(val, operand.get(i + 1));\n            break;\n        }\n      }\n      return val;",
        "grade-34": {
            "execution": 0
        },
        "6": "int res = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n            String curOp = op.get(i);\n            if (curOp.equals(\"+\")) {\n                res += operand.get(i + 1);\n            } else if (curOp.equals(\"-\")) {\n                res -= operand.get(i + 1);\n            } else if (curOp.equals(\"*\")) {\n                res *= operand.get(i + 1);\n            } else if (curOp.equals(\"//\")) {\n                res /= operand.get(i + 1);\n            } else if (curOp.equals(\"**\")) {\n                res = (int) Math.pow(res, operand.get(i + 1));\n            }\n        }\n        return res;",
        "grade-6": {
            "execution": 0
        },
        "84": "int a = operand.get(0);\n        int b = operand.get(1);\n        int c = 0;\n        for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n                c = a + b;\n            } else if (op.get(i).equals(\"-\")) {\n                c = a - b;\n            } else if (op.get(i).equals(\"*\")) {\n                c = a * b;\n            } else if (op.get(i).equals(\"//\")) {\n                c = a / b;\n            } else if (op.get(i).equals(\"**\")) {\n                c = (int) Math.pow(a, b);\n            }\n            a = c;\n            b = operand.get(i + 2);\n        }\n        return c;",
        "grade-84": {
            "execution": 0
        },
        "74": "int s = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n                s += operand.get(i + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                s -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n                s *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"//\")) {\n                s /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n                s = (int) Math.pow(s, operand.get(i + 1));\n            }\n        }\n        return s;",
        "grade-74": {
            "execution": 0
        },
        "68": "// FILL IN CODE\n        int result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n                result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"//\")) {\n                result /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n                result = (int) Math.pow(result, operand.get(i + 1));\n            }\n        }\n        return result;",
        "grade-68": {
            "execution": 0
        },
        "41": "int l = op.size();\n        int r = operand.get(0);\n        for (int i = 0; i < l; i++) {\n            int o = operand.get(i + 1);\n            if (op.get(i).equals(\"+\")) r += o;\n            else if (op.get(i).equals(\"-\")) r -= o;\n            else if (op.get(i).equals(\"*\")) r *= o;\n            else if (op.get(i).equals(\"//\")) r /= o;\n            else if (op.get(i).equals(\"**\")) r = (int)Math.pow(r, o);\n        }\n        return r;",
        "grade-41": {
            "execution": 0
        },
        "30": "int result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n            String operator = op.get(i);\n            Integer operand1 = operand.get(i);\n            Integer operand2 = operand.get(i + 1);\n            if (operator.equals(\"+\")) {\n                result = operand1 + operand2;\n            } else if (operator.equals(\"-\")) {\n                result = operand1 - operand2;\n            } else if (operator.equals(\"*\")) {\n                result = operand1 * operand2;\n            } else if (operator.equals(\"/\")) {\n                result = operand1 / operand2;\n            } else if (operator.equals(\"**\")) {\n                result = (int) Math.pow(operand1, operand2);\n            }\n        }\n        return result;",
        "grade-30": {
            "execution": 0
        },
        "178": "// Write your code here\n        int result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n            String currentOp = op.get(i);\n            int nextOperand = operand.get(i + 1);\n            switch (currentOp) {\n                case \"+\":\n                    result += nextOperand;\n                    break;\n                case \"-\":\n                    result -= nextOperand;\n                    break;\n                case \"*\":\n                    result *= nextOperand;\n                    break;\n                case \"//\":\n                    result /= nextOperand;\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, nextOperand);\n                    break;\n            }\n        }\n        return result;",
        "grade-178": {
            "execution": 0
        },
        "26": "// please write your code here\n        int result = operand.get(0);\n        int j = 0;\n        for(int i = 1; i < operand.size(); i++) {\n            switch(op.get(j)) {\n                case \"+\":\n                    result += operand.get(i);\n                    break;\n                case \"-\":\n                    result -= operand.get(i);\n                    break;\n                case \"*\":\n                    result *= operand.get(i);\n                    break;\n                case \"//\":\n                    result /= operand.get(i);\n                    break;\n                case \"**\":\n                    result = (int)Math.pow(result, operand.get(i));\n                    break;\n            }\n            j++;\n        }\n        return result;",
        "grade-26": {
            "execution": 0
        },
        "192": "String operator = String.join(\"\", op);\n        String operands = String.join(\"\", operand.stream().map(String::valueOf).collect(Collectors.toList()));\n        String expression = operands.substring(0,1);\n        for (int i = 0; i < operator.length(); i++) {\n            expression += operator.substring(i, i+1) + operands.substring(i+1, i+2);\n        }\n        int result = 0;\n        try {\n            ScriptEngineManager mgr = new ScriptEngineManager();\n            ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n            result = (int)engine.eval(expression);\n        } catch (ScriptException e) {\n            e.printStackTrace();\n        }\n        return result;",
        "grade-192": {
            "execution": 0
        },
        "137": "if (op.size() == 0) {\n            return operand.get(0);\n        }\n        if (op.size() == 1) {\n            return operand.get(0) + operand.get(1);\n        }\n        Stack<Integer> stack = new Stack<>();\n        for (int i = op.size() - 1; i >= 0; i--) {\n            switch (op.get(i)) {\n                case \"//\":\n                    stack.push(operand.get(i) / operand.get(i + 1));\n                    break;\n                case \"**\":\n                    stack.push((int) Math.pow(operand.get(i), operand.get(i + 1)));\n                    break;\n                case \"*\":\n                    stack.push(operand.get(i) * operand.get(i + 1));\n                    break;\n                case \"-\":\n                    stack.push(operand.get(i) - operand.get(i + 1));\n                    break;\n                case \"+\":\n                    stack.push(operand.get(i) + operand.get(i + 1));\n                    break;\n            }\n        }\n        int result = 0;\n        while (!stack.isEmpty()) {\n            result += stack.pop();\n        }\n        return result;",
        "grade-137": {
            "execution": 0
        },
        "8": "Integer result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n                result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"/\")) {\n                result /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"^\")) {\n                result = (int) Math.pow(result, operand.get(i + 1));\n            }\n        }\n        return result;",
        "grade-8": {
            "execution": 0
        },
        "7": "if (op.size() == 0 || operand.size() == 0) return 0;\n        ArrayList<Integer> tmpOperand = new ArrayList<Integer>();\n        ArrayList<String> tmpOp = new ArrayList<String>();\n        int ans = 0;\n        for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"+\") || op.get(i).equals(\"-\")) {\n                tmpOperand.add(operand.get(i));\n                tmpOp.add(op.get(i));\n            } else if (op.get(i).equals(\"*\")) {\n                int t = operand.get(i)*operand.get(i+1);\n                tmpOperand.add(t);\n                tmpOp.add(op.get(i));\n            } else if (op.get(i).equals(\"//\")) {\n                int t = operand.get(i)/operand.get(i+1);\n                tmpOperand.add(t);\n                tmpOp.add(op.get(i));\n            } else if (op.get(i).equals(\"**\")) {\n                int t = (int)Math.pow(operand.get(i), operand.get(i+1));\n                tmpOperand.add(t);\n                tmpOp.add(op.get(i));\n            }\n        }\n        if (tmpOperand.size() == 1) return tmpOperand.get(0);\n        ans = tmpOperand.get(0);\n        for (int i = 0; i < tmpOp.size(); i++) {\n            if (tmpOp.get(i).equals(\"+\")) {\n                ans += tmpOperand.get(i+1);\n            } else if (tmpOp.get(i).equals(\"-\")) {\n                ans -= tmpOperand.get(i+1);\n            }\n        }\n        return ans;",
        "grade-7": {
            "execution": 0
        },
        "27": "if (op.size() + 1 != operand.size()) {\n            throw new IllegalArgumentException(\"operator size + 1 != operand size\");\n        }\n        for (int i = 1; i < operand.size(); i++) {\n            if (op.get(i - 1).equals(\"+\")) {\n                operand.set(i, operand.get(i - 1) + operand.get(i));\n            } else if (op.get(i - 1).equals(\"-\")) {\n                operand.set(i, operand.get(i - 1) - operand.get(i));\n            } else if (op.get(i - 1).equals(\"*\")) {\n                operand.set(i, operand.get(i - 1) * operand.get(i));\n            } else if (op.get(i - 1).equals(\"//\")) {\n                operand.set(i, operand.get(i - 1) / operand.get(i));\n            } else if (op.get(i - 1).equals(\"**\")) {\n                operand.set(i, (int) Math.pow(operand.get(i - 1), operand.get(i)));\n            } else {\n                throw new IllegalArgumentException(\"unknown operator\");\n            }\n        }\n        return operand.get(operand.size() - 1);",
        "grade-27": {
            "execution": 0
        },
        "66": "// write code here\n        // the first operator\n        int i = 0;\n        int j = 0;\n        int result = 0;\n        int first = operand.get(i);\n        int second = operand.get(i + 1);\n        if(op.get(j).equals(\"+\")) {\n            result = first + second;\n        } else if(op.get(j).equals(\"-\")) {\n            result = first - second;\n        } else if(op.get(j).equals(\"*\")) {\n            result = first * second;\n        } else if(op.get(j).equals(\"//\")) {\n            result = first / second;\n        } else if(op.get(j).equals(\"**\")) {\n            result = (int)Math.pow(first, second);\n        }\n        j++;\n        // the rest operators\n        while(j < op.size()) {\n            int tmp = operand.get(i + 2);\n            if(op.get(j).equals(\"+\")) {\n                result += tmp;\n            } else if(op.get(j).equals(\"-\")) {\n                result -= tmp;\n            } else if(op.get(j).equals(\"*\")) {\n                result *= tmp;\n            } else if(op.get(j).equals(\"//\")) {\n                result /= tmp;\n            } else if(op.get(j).equals(\"**\")) {\n                result = (int)Math.pow(result, tmp);\n            }\n            j++;\n        }\n        return result;",
        "grade-66": {
            "execution": 0
        },
        "71": "// This is a classic problem of converting infix expression to postfix expression and \n        // then evaluating the postfix expression.\n        // 1. Infix to postfix conversion: https://www.geeksforgeeks.org/stack-set-2-infix-to-postfix/\n        // 2. Postfix evaluation: https://www.geeksforgeeks.org/stack-set-4-evaluation-postfix-expression/\n        // Note:\n        // See cpp solution for detailed implementation.\n        // Time complexity: O(N)\n        // Space complexity: O(N)\n        int size = op.size();\n        int len = size + 1;\n        ArrayList<String> postfix = new ArrayList<String>();\n        Stack<String> s = new Stack<String>();\n        for (int i = 0; i < len; i++) {\n            if (i < size) {\n                if (s.isEmpty()) {\n                    s.push(op.get(i));\n                } else {\n                    String op1 = op.get(i);\n                    String op2 = s.peek();\n                    int prec1 = getPrecedence(op1);\n                    int prec2 = getPrecedence(op2);\n                    if (prec1 > prec2) {\n                        s.push(op1);\n                    } else {\n                        while (!s.isEmpty() && prec1 <= prec2) {\n                            postfix.add(s.pop());\n                            if (!s.isEmpty()) {\n                                op2 = s.peek();\n                                prec2 = getPrecedence(op2);\n                            }\n                        }\n                        s.push(op1);\n                    }\n                }\n            } else {\n                postfix.add(String.valueOf(operand.get(i)));\n            }\n        }\n        while (!s.isEmpty()) {\n            postfix.add(s.pop());\n        }\n        Stack<Integer> nums = new Stack<Integer>();\n        for (String p : postfix) {\n            if (isOperator(p)) {\n                int num2 = nums.pop();\n                int num1 = nums",
        "grade-71": {
            "execution": 0
        },
        "164": "// Insert your code here\n        return 0;",
        "grade-164": {
            "execution": 0
        },
        "198": "// Insert your code here\n        int result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n            String opStr = op.get(i);\n            int operand1 = operand.get(i);\n            int operand2 = operand.get(i + 1);\n            result = doOperation(opStr, operand1, operand2);\n        }\n        return result;",
        "grade-198": {
            "execution": 0
        },
        "183": "int result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n            String curOp = op.get(i);\n            int op2 = operand.get(i + 1);\n            if (curOp.equals(\"+\")) result += op2;\n            else if (curOp.equals(\"-\")) result -= op2;\n            else if (curOp.equals(\"*\")) result *= op2;\n            else if (curOp.equals(\"//\")) result /= op2;\n            else if (curOp.equals(\"**\")) result = (int) Math.pow(result, op2);\n        }\n        return result;",
        "grade-183": {
            "execution": 0
        },
        "60": "ArrayList<Integer> opd = new ArrayList<Integer>();\n        ArrayList<String> ops = new ArrayList<String>();\n        String[] operators = {\"**\", \"//\", \"*\", \"-\", \"+\"};\n        for (int i = 0; i < op.size(); i++) {\n            if (ops.size() == 0) {\n                ops.add(op.get(i));\n                continue;\n            }\n            for (int j = 0; j < operators.length; j++) {\n                if (ops.get(ops.size() - 1).equals(operators[j])) {\n                    if (j < operators.length - 1 && operators[j + 1].equals(op.get(i))) {\n                        continue;\n                    }\n                    else {\n                        ops.add(op.get(i));\n                        break;\n                    }\n                }\n                else if (j == operators.length - 1) {\n                    ops.add(op.get(i));\n                    break;\n                }\n            }\n        }\n        System.out.println(ops);\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops.get(i).equals(\"**\")) {\n                int exp = operand.get(i + 1);\n                int base = operand.get(i);\n                int result = 0;\n                for (int j = 0; j < exp; j++) {\n                    result += base;\n                }\n                opd.add(result);\n            }\n            else if (ops.get(i).equals(\"//\")) {\n                int val = operand.get(i);\n                int div = operand.get(i + 1);\n                int quotient = 0;\n                while (val >= div) {\n                    val -= div;\n                    quotient++;\n                }\n                opd.add(quotient);\n            }\n            else {\n                opd.add(operand.get(i));\n            }\n        }\n        System.out.println(opd);\n        int counter = 0;\n        while (counter < ops.size()) {\n            if (ops.get(counter).equals",
        "grade-60": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n    // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static int fibfib(int n) {\n",
        "snippet": [
            "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    }\n}"
        ],
        "simplified": "The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3). Please write a function to efficiently compute the n-th element of the fibfib number sequence.",
        "task_id": "63",
        "35": "int first = 0;\n        int second = 0;\n        int third = 1;\n        int result = 0;\n        for (int i = 3; i <= n; i++) {\n            result = first + second + third;\n            first = second;\n            second = third;\n            third = result;\n        }\n        return result;",
        "grade-35": {
            "execution": 0
        },
        "7": "if (n <= 1) return 0;\n        else if (n == 2) return 1;\n        else return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);",
        "grade-7": {
            "execution": 1
        },
        "88": "if (n < 0) return 0;\n        int x = 0, y = 0, z = 1;\n        for (int i = 2; i <= n; i++) {\n            int t = x;\n            x = y;\n            y = z;\n            z = t + y + z;\n        }\n        return z;",
        "grade-88": {
            "execution": 0
        },
        "78": "if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 1;\n        int a = 0;\n        int b = 0;\n        int c = 1;\n        int ans = 0;\n        for (int i = 3; i <= n; i++) {\n            ans = a + b + c;\n            a = b;\n            b = c;\n            c = ans;\n        }\n        return ans;",
        "grade-78": {
            "execution": 1
        },
        "71": "if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        int f1 = 0;\n        int f2 = 0;\n        int f3 = 1;\n        int current = 3;\n        while (current < n) {\n            int temp = f1 + f2 + f3;\n            f1 = f2;\n            f2 = f3;\n            f3 = temp;\n            current++;\n        }\n        return f1 + f2 + f3;",
        "grade-71": {
            "execution": 1
        },
        "44": "int[] dp = new int[n+1];\n        for (int i = 0; i <= n; i++) {\n            if (i == 0) {\n                dp[i] = 0;\n            } else if (i == 1) {\n                dp[i] = 0;\n            } else if (i == 2) {\n                dp[i] = 1;\n            } else {\n                dp[i] = dp[i-1] + dp[i-2] + dp[i-3];\n            }\n        }\n        return dp[n];",
        "grade-44": {
            "execution": 1
        },
        "33": "if (n < 2) return 0;\n        int f0 = 0, f1 = 0, f2 = 1;\n        for (int i = 3; i <= n; i++) {\n            int f3 = f0 + f1 + f2;\n            f0 = f1;\n            f1 = f2;\n            f2 = f3;\n        }\n        return f2;",
        "grade-33": {
            "execution": 1
        },
        "180": "// TODO: write your code here\n        return -1;",
        "grade-180": {
            "execution": 0
        },
        "28": "// TODO\n        return 0;",
        "grade-28": {
            "execution": 0
        },
        "196": "int i = 0;\n        int a = 0;\n        int b = 0;\n        int c = 1;\n        while (i < n) {\n            int d = a;\n            a = b;\n            b = c;\n            c = d + b + c;\n            i++;\n        }\n        return a;",
        "grade-196": {
            "execution": 0
        },
        "137": "if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        int a = 0;\n        int b = 0;\n        int c = 1;\n        int ans = 0;\n        for (int i = 2; i < n; i++) {\n            ans = a + b + c;\n            a = b;\n            b = c;\n            c = ans;\n        }\n        return ans;",
        "grade-137": {
            "execution": 1
        },
        "9": "if (n <= 1) return 0;\n        if (n == 2) return 1;\n        int[] dp = new int[n+1];\n        dp[0] = 0;\n        dp[1] = 0;\n        dp[2] = 1;\n        for (int i = 3; i <= n; i++) {\n            dp[i] = dp[i-1] + dp[i-2] + dp[i-3];\n        }\n        return dp[n];",
        "grade-9": {
            "execution": 1
        },
        "8": "if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 1;\n        int prev = 0;\n        int prevprev = 0;\n        int prevprevprev = 1;\n        int ans = 1;\n        for (int i = 2; i < n; i++) {\n            ans = prev + prevprev + prevprevprev;\n            prevprevprev = prevprev;\n            prevprev = prev;\n            prev = ans;\n        }\n        return ans;",
        "grade-8": {
            "execution": 0
        },
        "29": "// I haven't checked whether this is efficient. But it's a lot more efficient than a recursive solution!\n        int n1 = 0;\n        int n2 = 0;\n        int n3 = 1;\n        int sum = n1 + n2 + n3;\n        for (int i = 3; i <= n; i++) {\n            n1 = n2;\n            n2 = n3;\n            n3 = sum;\n            sum = n1 + n2 + n3;\n        }\n        return sum;",
        "grade-29": {
            "execution": 0
        },
        "69": "if (n <= 2) {\n            return n-1;\n        } else {\n            int a = 0;\n            int b = 1;\n            int c = 1;\n            for (int i = 3; i <= n; i++) {\n                int s = a + b + c;\n                a = b;\n                b = c;\n                c = s;\n            }\n            return c;\n        }",
        "grade-69": {
            "execution": 0
        },
        "75": "int[] dp = new int[n+1];\n      dp[0] = 0;\n      dp[1] = 0;\n      dp[2] = 1;\n      for(int i = 3; i <= n; i++) {\n        dp[i] = dp[i-1] + dp[i-2] + dp[i-3];\n      }\n      return dp[n];",
        "grade-75": {
            "execution": 0
        },
        "165": "if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 1;\n        int a = 0;\n        int b = 0;\n        int c = 1;\n        int d = 0;\n        for (int i = 0; i < n - 2; i++) {\n            d = c + b + a;\n            a = b;\n            b = c;\n            c = d;\n        }\n        return d;",
        "grade-165": {
            "execution": 1
        },
        "199": "int a = 0;\n        int b = 0;\n        int c = 1;\n        int d = 0;\n        for (int i = 0; i < n; i++) {\n            d = a + b + c;\n            a = b;\n            b = c;\n            c = d;\n        }\n        return d;",
        "grade-199": {
            "execution": 0
        },
        "185": "int[] fibfib = new int[n + 1];\n        fibfib[0] = 0;\n        fibfib[1] = 0;\n        fibfib[2] = 1;\n        for (int i = 3; i <= n; i++) {\n            fibfib[i] = fibfib[i - 1] + fibfib[i - 2] + fibfib[i - 3];\n        }\n        return fibfib[n];",
        "grade-185": {
            "execution": 0
        },
        "62": "// return fibfib(n, new int[n+1]);\n        return fibfibDP(n);",
        "grade-62": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Concatenate list of strings into a single string\n    // >>> concatenate([])\n    // ''\n    // >>> concatenate(['a', 'b', 'c'])\n    // 'abc'\n    public static String concatenate(ArrayList<String> strings) {\n",
        "snippet": [
            "        return String.join(\"\", strings);\n    }\n}"
        ],
        "simplified": "Concatenate list of strings into a single string",
        "task_id": "28",
        "189": "String ret = \"\";\n        for (String s : strings) {\n            ret += s;\n        }\n        return ret;",
        "grade-189": {
            "execution": 1
        },
        "15": "String result = \"\";\n        for (String s : strings)\n            result += s;\n        return result;",
        "grade-15": {
            "execution": 1
        },
        "3": "return \"\";",
        "grade-3": {
            "execution": 0
        },
        "58": "String joinedString = \"\";\n        for (String str : strings) {\n            joinedString += str;\n        }\n        return joinedString;",
        "grade-58": {
            "execution": 1
        },
        "51": "// TODO: your code here\n        String result = \"\";\n        for (String s : strings) {\n            result += s;\n        }\n        return result;",
        "grade-51": {
            "execution": 1
        },
        "42": "StringBuffer buf = new StringBuffer();\n        for (String s : strings) {\n            buf.append(s);\n        }\n        return buf.toString();",
        "grade-42": {
            "execution": 1
        },
        "18": "String result = \"\";\n        for (String string : strings) {\n            result += string;\n        }\n        return result;",
        "grade-18": {
            "execution": 1
        },
        "14": "// TODO: implement this.\n        return \"\";",
        "grade-14": {
            "execution": 0
        },
        "145": "String result = \"\";\n        for (String word : strings) {\n            result += word;\n        }\n        return result;",
        "grade-145": {
            "execution": 1
        },
        "12": "StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();",
        "grade-12": {
            "execution": 1
        },
        "158": "StringBuffer str = new StringBuffer();\n        for (String s : strings) {\n            str.append(s);\n        }\n        return str.toString();",
        "grade-158": {
            "execution": 1
        },
        "102": "// >>> concatenate([])\n        // ''\n        if (strings.size() == 0) {\n            return \"\";\n        }\n        // >>> concatenate(['a', 'b', 'c'])\n        // 'abc'\n        return strings.stream().collect(Collectors.joining());",
        "grade-102": {
            "execution": 1
        },
        "4": "String result = \"\";\n        for (String s : strings) {\n            result += s;\n        }\n        return result;",
        "grade-4": {
            "execution": 1
        },
        "40": "StringJoiner joiner = new StringJoiner(\"\");\n        strings.forEach(s -> joiner.add(s));\n        return joiner.toString();",
        "grade-40": {
            "execution": 1
        },
        "44": "StringBuffer buffer = new StringBuffer();\n        for (String string : strings) {\n            buffer.append(string);\n        }\n        return buffer.toString();",
        "grade-44": {
            "execution": 1
        },
        "132": "String out = \"\";\n        for (String s : strings) {\n            out += s;\n        }\n        return out;",
        "grade-132": {
            "execution": 1
        },
        "163": "// YOUR CODE HERE\n        //throw new UnsupportedOperationException(\"Not implemented\");\n        String str = \"\";\n        for(String s : strings)\n            str += s;\n        return str;",
        "grade-163": {
            "execution": 1
        },
        "149": "// Your code here\n        return null;",
        "grade-149": {
            "execution": 0
        },
        "37": "String s = new String();\n        for (String string : strings) {\n            s += string;\n        }\n        return s;",
        "grade-37": {
            "execution": 1
        },
        "194": "String out = \"\";\n        for (String string : strings) {\n            out += string;\n        }\n        return out;",
        "grade-194": {
            "execution": 1
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatest_common_divisor(3, 5)\n    // 1\n    // >>> greatest_common_divisor(25, 15)\n    // 5\n    public static int greatestCommonDivisor(int a, int b) {\n",
        "snippet": [
            "        if (a == 0 || b == 0) {\n            return a + b;\n        }\n        if (a == b) {\n            return a;\n        }\n        if (a > b) {\n            return greatestCommonDivisor(a % b, b);\n        } else {\n            return greatestCommonDivisor(a, b % a);\n        }\n    }\n}"
        ],
        "simplified": "Return a greatest common divisor of two integers a and b",
        "task_id": "13",
        "33": "return a;",
        "grade-33": {
            "execution": 0
        },
        "6": "if (a == 0) {\n            return b;\n        }\n        if (b == 0) {\n            return a;\n        }\n        int c = a % b;\n        return greatestCommonDivisor(b, c);",
        "grade-6": {
            "execution": 1
        },
        "94": "if (a > b) {\n            return greatestCommonDivisor(b, a);\n        } else if (a == 0) {\n            return b;\n        } else {\n            return greatestCommonDivisor(b % a, a);\n        }",
        "grade-94": {
            "execution": 1
        },
        "78": "int c = Math.min(a, b);\n        int d = Math.max(a, b);\n        int e = 0;\n        while (c > 0) {\n            if (d % c == 0) {\n                e = c;\n                break;\n            }\n            c--;\n        }\n        return e;",
        "grade-78": {
            "execution": 0
        },
        "72": "throw new RuntimeException(\"Not Implemented.\");",
        "grade-72": {
            "execution": 0
        },
        "41": "return 1;",
        "grade-41": {
            "execution": 0
        },
        "28": "//\n        return 1;",
        "grade-28": {
            "execution": 0
        },
        "24": "// WRITE YOUR CODE HERE",
        "grade-24": {
            "execution": 0
        },
        "160": "// Your code here\n        return -1;",
        "grade-160": {
            "execution": 0
        },
        "8": "if (a % b == 0) {\n            return b;\n        } else {\n            return greatestCommonDivisor(b, a % b);\n        }",
        "grade-8": {
            "execution": 1
        },
        "7": "int max = Math.max(a, b);\n        int min = Math.min(a, b);\n        int remainder = max % min;\n        int result = 0;\n        if (remainder == 0) {\n            result = min;\n        } else {\n            result = greatestCommonDivisor(min, remainder);\n        }\n        return result;",
        "grade-7": {
            "execution": 1
        },
        "25": "int d = 1;\n        for (int i = 2; i <= a && i <= b; i++) {\n            if (a % i == 0 && b % i == 0) {\n                d = i;\n            }\n        }\n        return d;",
        "grade-25": {
            "execution": 1
        },
        "67": "if (a == 0) return b;\n        if (b == 0) return a;\n        int gcd = 0;\n        while (a % 2 == 0 && b % 2 == 0) {\n            a /= 2;\n            b /= 2;\n            gcd++;\n        }\n        while (a != b) {\n            if (a % 2 == 0) a /= 2;\n            else if (b % 2 == 0) b /= 2;\n            else if (a > b) a = (a - b) / 2;\n            else b = (b - a) / 2;\n        }\n        return a * (int) Math.pow(2, gcd);",
        "grade-67": {
            "execution": 1
        },
        "74": "if (a == 0) {\n            return b;\n        }\n        if (b == 0) {\n            return a;\n        }\n        if (a >= b) {\n            return greatestCommonDivisor(a % b, b);\n        } else {\n            return greatestCommonDivisor(a, b % a);\n        }",
        "grade-74": {
            "execution": 1
        },
        "199": "if (a < b) {\n            int x = a;\n            a = b;\n            b = x;\n        }\n        while (b != 0) {\n            int x = a % b;\n            a = b;\n            b = x;\n        }\n        return a;",
        "grade-199": {
            "execution": 1
        },
        "59": "return (b == 0) ? a : greatestCommonDivisor(b, a % b);",
        "grade-59": {
            "execution": 1
        },
        "159": "throw new RuntimeException(\"Implement me!\");",
        "grade-159": {
            "execution": 0
        },
        "69": "int c = b;\n        while (a % b != 0) {\n            c = a % b;\n            a = b;\n            b = c;\n        }\n        return c;",
        "grade-69": {
            "execution": 1
        },
        "167": "while (a != 0 && b != 0) {\n            if (a > b) {\n                a = a % b;\n            } else {\n                b = b % a;\n            }\n        }\n        return Math.max(a, b);",
        "grade-167": {
            "execution": 1
        },
        "95": "return BigInteger.valueOf(a).gcd(BigInteger.valueOf(b)).intValue();",
        "grade-95": {
            "execution": 1
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n    public static String flipCase(String string) {\n",
        "snippet": [
            "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n            if (Character.isLowerCase(string.charAt(i))) {\n                sb.append(Character.toUpperCase(string.charAt(i)));\n            } else {\n                sb.append(Character.toLowerCase(string.charAt(i)));\n            }\n        }\n        return sb.toString();\n    }\n}"
        ],
        "simplified": "For a given string, flip lowercase characters to uppercase and uppercase to lowercase.",
        "task_id": "27",
        "33": "char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            char c = chars[i];\n            if (Character.isUpperCase(c)) {\n                chars[i] = Character.toLowerCase(c);\n            } else if (Character.isLowerCase(c)) {\n                chars[i] = Character.toUpperCase(c);\n            }\n        }\n        return new String(chars);",
        "grade-33": {
            "execution": 1
        },
        "7": "return null;",
        "grade-7": {
            "execution": 0
        },
        "91": "throw new UnsupportedOperationException(\"Method flipCase is not implemented.\");",
        "grade-91": {
            "execution": 0
        },
        "80": "StringBuilder flipped = new StringBuilder();\n        for (char letter : string.toCharArray()) {\n            if (Character.isUpperCase(letter)) {\n                flipped.append(Character.toLowerCase(letter));\n            } else {\n                flipped.append(Character.toUpperCase(letter));\n            }\n        }\n        return flipped.toString();",
        "grade-80": {
            "execution": 1
        },
        "74": "return new String(\n            string.chars()\n            .map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c))\n            .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)\n            .toString()\n        );",
        "grade-74": {
            "execution": 1
        },
        "42": "String result = \"\";\n        for (char c : string.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                result += Character.toLowerCase(c);\n            } else {\n                result += Character.toUpperCase(c);\n            }\n        }\n        return result;",
        "grade-42": {
            "execution": 1
        },
        "31": "return string.chars()\n                .mapToObj(c -> (char) c)\n                .map(c -> {\n                    if (Character.isUpperCase(c)) {\n                        return Character.toLowerCase(c);\n                    } else {\n                        return Character.toUpperCase(c);\n                    }\n                })\n                .collect(Collectors.joining());",
        "grade-31": {
            "execution": 0
        },
        "183": "return string.chars()\n                .mapToObj(c -> (char) c)\n                .map(Character::toLowerCase)\n                .map(c -> Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c))\n                .collect(StringBuilder::new, StringBuilder::append, StringBuilder::append)\n                .toString();",
        "grade-183": {
            "execution": 0
        },
        "27": "// write your code here\n        return null;",
        "grade-27": {
            "execution": 0
        },
        "199": "return string.chars()\n        .mapToObj(c -> Character.isLetter(c) ? Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c) : String.valueOf((char) c))\n        .collect(Collectors.joining());",
        "grade-199": {
            "execution": 0
        },
        "135": "char[] charArray = string.toCharArray();\n        for (int i = 0; i < charArray.length; i++) {\n            if (Character.isUpperCase(charArray[i])) {\n                charArray[i] = Character.toLowerCase(charArray[i]);\n            } else {\n                charArray[i] = Character.toUpperCase(charArray[i]);\n            }\n        }\n        return new String(charArray);",
        "grade-135": {
            "execution": 1
        },
        "9": "String rv = \"\";\n        char c;\n        for (int i = 0; i < string.length(); i++) {\n            c = string.charAt(i);\n            if (Character.isUpperCase(c))\n                rv += Character.toLowerCase(c);\n            else\n                rv += Character.toUpperCase(c);\n        }\n        return rv;",
        "grade-9": {
            "execution": 1
        },
        "8": "// TODO: Your code here\n        return null;",
        "grade-8": {
            "execution": 0
        },
        "28": "StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n            if (Character.isLowerCase(string.charAt(i))) {\n                sb.append(Character.toUpperCase(string.charAt(i)));\n            } else {\n                sb.append(Character.toLowerCase(string.charAt(i)));\n            }\n        }\n        return sb.toString();",
        "grade-28": {
            "execution": 1
        },
        "71": "StringBuilder builder = new StringBuilder();\n        for (char c : string.toCharArray()) {\n            builder.append(Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c));\n        }\n        return builder.toString();",
        "grade-71": {
            "execution": 1
        },
        "77": "char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            chars[i] = Character.isUpperCase(chars[i]) ? Character.toLowerCase(chars[i]) : Character.toUpperCase(chars[i]);\n        }\n        return new String(chars);",
        "grade-77": {
            "execution": 1
        },
        "168": "StringBuffer newString = new StringBuffer();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (Character.isUpperCase(c)) {\n                newString.append(Character.toLowerCase(c));\n            } else {\n                newString.append(Character.toUpperCase(c));\n            }\n        }\n        return newString.toString();",
        "grade-168": {
            "execution": 1
        },
        "187": "char[] chars = string.toCharArray();\n        int d = 'a' - 'A';\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] >= 'a' && chars[i] <= 'z') {\n                chars[i] -= d;\n            } else if (chars[i] >= 'A' && chars[i] <= 'Z') {\n                chars[i] += d;\n            }\n        }\n        return new String(chars);",
        "grade-187": {
            "execution": 1
        },
        "63": "return string.toLowerCase();",
        "grade-63": {
            "execution": 0
        },
        "134": "String result = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            char character = string.charAt(i);\n            if (Character.isUpperCase(character)) {\n                result += Character.toLowerCase(character);\n            } else {\n                result += Character.toUpperCase(character);\n            }\n        }\n        return result;",
        "grade-134": {
            "execution": 1
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) => false\n    // is_simple_power(5, 3) => false\n    public static boolean isSimplePower(int x, int n) {\n",
        "snippet": [
            "        if (n == 1) {\n            return x == 1;\n        }\n        int power = 1;\n        while (power < x) {\n            power = power * n;\n        }\n        return power == x;\n    }\n}"
        ],
        "simplified": "Your task is to write a function that returns true if a number x is a simple power of n and false in other cases. x is a simple power of n if n**int=x",
        "task_id": "76",
        "195": "if (x<0 || n<0) return false;\n        if (x==1) return true;\n        double current = n;\n        while (current<x) {\n            current*=n;\n        }\n        return current==x;",
        "grade-195": {
            "execution": 1
        },
        "29": "if (x <= 0 || n <= 0) {\n            return false;\n        }\n        double res = Math.log(x) / Math.log(n);\n        return Math.abs(res - Math.floor(res)) < 1e-10;",
        "grade-29": {
            "execution": 0
        },
        "6": "return false;",
        "grade-6": {
            "execution": 0
        },
        "81": "if (n == 1) return false;\n        if (x == 1) return true;\n        double exp = Math.log(x) / Math.log(n);\n        return Math.abs(exp - Math.round(exp)) < 1e-4;",
        "grade-81": {
            "execution": 0
        },
        "71": "return Math.sqrt(x) == n || Math.cbrt(x) == n || x == n;",
        "grade-71": {
            "execution": 0
        },
        "63": "// write your code here\n        return (Math.log(x) / Math.log(n)) % 1 == 0;",
        "grade-63": {
            "execution": 0
        },
        "37": "boolean result = false;\n        double sqrtValue = Math.sqrt(x);\n        if (sqrtValue == Math.floor(sqrtValue)) {\n            result = sqrtValue % n == 0;\n        }\n        return result;",
        "grade-37": {
            "execution": 0
        },
        "26": "// wtite your code here\n        return false;",
        "grade-26": {
            "execution": 0
        },
        "166": "return x == n || (int) Math.log(x) / (int) Math.log(n) == Math.log(x) / Math.log(n);",
        "grade-166": {
            "execution": 0
        },
        "22": "return x == Math.pow(n, (int) (Math.log(x) / Math.log(n)));",
        "grade-22": {
            "execution": 1
        },
        "179": "try {\n            int k = (int) Math.round(Math.log(x) / Math.log(n));\n            return (Math.pow(n, k) == x);\n        } catch (Exception e) {\n            return false;\n        }",
        "grade-179": {
            "execution": 1
        },
        "128": "if (n == 1) return false;\n        for (int i = 0; i < x; i++) {\n            if (Math.pow(n, i) == x) return true;\n        }\n        return false;",
        "grade-128": {
            "execution": 0
        },
        "8": "for (int i = 0; i < x; i++) {\n            if (Math.pow(n, i) == x)\n                return true;\n        }\n        return false;",
        "grade-8": {
            "execution": 1
        },
        "7": "if (n == 1 && x != 1) {\n            return false;\n        }\n        if (x == 1) {\n            return true;\n        }\n        for (int i = 0; i < x; i++) {\n            if (Math.pow(n, i) == x) {\n                return true;\n            }\n        }\n        return false;",
        "grade-7": {
            "execution": 1
        },
        "23": "double y = n;\n        return Math.pow(y, Math.round(Math.log(x) / Math.log(y))) == x;",
        "grade-23": {
            "execution": 1
        },
        "60": "int i = 1;\n        int result = 1;\n        while (true) {\n            if (result == x) {\n                return true;\n            }\n            if (result > x) {\n                return false;\n            }\n            result = n * result;\n            i++;\n        }",
        "grade-60": {
            "execution": 1
        },
        "66": "return new BigInteger(x + \"\").modPow(new BigInteger(n + \"\"), new BigInteger(x + \"\")).intValue() == x;",
        "grade-66": {
            "execution": 0
        },
        "154": "return x == n && x % n == 0;",
        "grade-154": {
            "execution": 0
        },
        "184": "//n**int=x, x**(1/n)=y, x==y**n\n        //if x==y**n and y is integer => y=int**(1/n)\n        double y = Math.pow(x, 1.0/n);\n        return (y%1 == 0);",
        "grade-184": {
            "execution": 0
        },
        "170": "int nn = n;\n        for (int i = 1; nn <= x; i++) {\n            if (nn == x) return true;\n            nn *= n;\n        }\n        return false;",
        "grade-170": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    // each cell of the grid contains a value. Every integer in the range [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n    // You have to find the minimum path of length k in the grid. You can start\n    // from any cell, and in each step you can move to any of the neighbor cells,\n    // in other words, you can go to cells which share an edge with you current\n    // cell.\n    // Please note that a path of length k means visiting exactly k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n    // A path A (of length k) is considered less than a path B (of length k) if\n    // after making the ordered lists of the values on the cells that A and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    // than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is unique.\n    // Return an ordered list of the values on the cells that the minimum path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n    // Output: [1]\n    public static ArrayList<Integer> minPath(ArrayList<ArrayList<Integer>> grid, int k) {\n",
        "snippet": [
            "        int n = grid.size();\n        int val = n * n + 1;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    List<Integer> temp = new ArrayList<>();\n                    if (i != 0) {\n                        temp.add(grid.get(i - 1).get(j));\n                    }\n                    if (j != 0) {\n                        temp.add(grid.get(i).get(j - 1));\n                    }\n                    if (i != n - 1) {\n                        temp.add(grid.get(i + 1).get(j));\n                    }\n                    if (j != n - 1) {\n                        temp.add(grid.get(i).get(j + 1));\n                    }\n                    val = Collections.min(temp);\n                }\n            }\n        }\n        List<Integer> ans = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            if (i % 2 == 0) {\n                ans.add(1);\n            } else {\n                ans.add(val);\n            }\n        }\n        return ans;\n    }\n}"
        ],
        "simplified": "Given a grid with N rows and N columns (N >= 2) and a positive integer k, each cell of the grid contains a value. Every integer in the range [1, N * N] inclusive appears exactly once on the cells of the grid. You have to find the minimum path of length k in the grid. You can start from any cell, and in each step you can move to any of the neighbor cells, in other words, you can go to cells which share an edge with you current cell. Please note that a path of length k means visiting exactly k cells (not necessarily distinct). You CANNOT go off the grid. A path A (of length k) is considered less than a path B (of length k) if after making the ordered lists of the values on the cells that A and B go through (let's call them lst_A and lst_B), lst_A is lexicographically less than lst_B, in other words, there exist an integer index i (1 <= i <= k) such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have lst_A[j] = lst_B[j]. It is guaranteed that the answer is unique. Return an ordered list of the values on the cells that the minimum path go through.",
        "task_id": "129",
        "29": "int n = grid.size();\n        int[][] tmp = new int[n][n];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                tmp[i][j] = grid.get(i).get(j);\n            }\n        }\n        return minPath(tmp, k);",
        "grade-29": {
            "execution": 0
        },
        "6": "ArrayList<Integer> res = new ArrayList<>();\n        return res;",
        "grade-6": {
            "execution": 0
        },
        "80": "int n = grid.size();\n        ArrayList<Integer> ret = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            ret.add(0);\n        }\n        int state = -1;\n        // BEGIN (write your solution here)\n        int state = -1;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    state = i * n + j;\n                    ret.set(0, 1);\n                    break;\n                }\n            }\n            if (state != -1) {\n                break;\n            }\n        }\n        int dx[] = {-1, 0, 1, 0};\n        int dy[] = {0, 1, 0, -1};\n        for (int i = 1; i < k; i++) {\n            int x = state / n;\n            int y = state % n;\n            int v = 1 << 20;\n            for (int k = 0; k < 4; k++) {\n                int nx = x + dx[k];\n                int ny = y + dy[k];\n                if (nx >= 0 && nx < n && ny >= 0 && ny < n) {\n                    if (grid.get(nx).get(ny) < v) {\n                        v = grid.get(nx).get(ny);\n                        state = nx * n + ny;\n                    }\n                }\n            }\n            ret.set(i, v);\n        }\n        // END\n        return ret;",
        "grade-80": {
            "execution": 0
        },
        "70": "ArrayList<Integer> res = new ArrayList<>();\n        int n = grid.size();\n        int[][] dir = { {0, 1}, {0, -1}, {1, 0}, {-1, 0} };\n        int[][] len = new int[n][n];\n        int[][] val = new int[n][n];\n        int start_r = 0, start_c = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    start_r = i;\n                    start_c = j;\n                }\n            }\n        }\n        int[][] sum = new int[n][n];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                sum[i][j] = grid.get(i).get(j);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == 0 && j == 0) {\n                    sum[i][j] = 0;\n                } else if (i == 0) {\n                    sum[i][j] = sum[i][j - 1] + grid.get(i).get(j);\n                } else if (j == 0) {\n                    sum[i][j] = sum[i - 1][j] + grid.get(i).get(j);\n                } else {\n                    sum[i][j] = Math.min(sum[i - 1][j], sum[i][j - 1]) + grid.get(i).get(j);\n                }\n            }\n        }\n        Queue<Pair<Integer, Integer>> q = new LinkedList<>();\n        q.add(new Pair<>(start_r, start_c));\n        val[start_r][start_c] = 1;\n        len[start_r][start_c] = 0;\n        ArrayList<Integer>",
        "grade-70": {
            "execution": 0
        },
        "64": "// ToDo\n        return null;",
        "grade-64": {
            "execution": 0
        },
        "37": "if (k == 0) {\n            return new ArrayList<Integer>();\n        }\n        int m = grid.size();\n        int n = grid.get(0).size();\n        int[][] dp = new int[m][n];\n        int[][] prev = new int[m][n];\n        // 0 --> up\n        // 1 --> down\n        // 2 --> left\n        // 3 --> right\n        int[] offset_x = {-1, 1, 0, 0};\n        int[] offset_y = {0, 0, -1, 1};\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                dp[i][j] = grid.get(i).get(j);\n                prev[i][j] = -1;\n            }\n        }\n        for (int t = 0; t < k - 1; t++) {\n            int[][] new_dp = new int[m][n];\n            int[][] new_prev = new int[m][n];\n            for (int i = 0; i < m; i++) {\n                for (int j = 0; j < n; j++) {\n                    if (t == 0) {\n                        for (int kk = 0; kk < 4; kk++) {\n                            int dx = offset_x[kk];\n                            int dy = offset_y[kk];\n                            int xx = i + dx;\n                            int yy = j + dy;\n                            if (xx >= 0 && xx < m && yy >= 0 && yy < n) {\n                                new_dp[xx][yy] = grid.get(xx).get(yy);\n                                new_prev[xx][yy] = kk;\n                            }\n                        }\n                    } else {\n                        for (int kk = 0; kk < 4; kk++) {\n                            int dx = offset_x[kk];\n                            int dy = offset_y[kk];\n                            int xx = i + dx;\n                            int yy = j + dy;\n                            if (xx >= 0 && xx < m &&",
        "grade-37": {
            "execution": 0
        },
        "27": "if (k == 0) {\n            return new ArrayList<Integer>();\n        }\n        if (k == 1) {\n            return new ArrayList<Integer>(grid.get(0));\n        }\n        int N = grid.size();\n        for (int row = 0; row < N; row++) {\n            for (int col = 0; col < N; col++) {\n                Pair<Integer, Integer> minimumPath = _minPath(grid, k, row, col);\n                if (minimumPath.getValue0() == row && minimumPath.getValue1() == col) {\n                    System.out.println(\"Minimum path starts at \" +\n                            grid.get(row).get(col));\n                    ArrayList<Integer> result = new ArrayList<Integer>();\n                    for (int i = 0; i < k; i++) {\n                        System.out.println(\"Minimum path goes to \" +\n                                grid.get(minimumPath.getValue2().get(i)).get(minimumPath.getValue3().get(i)));\n                        result.add(grid.get(minimumPath.getValue2().get(i)).get(minimumPath.getValue3().get(i)));\n                    }\n                    return result;\n                }\n            }\n        }\n        return new ArrayList<Integer>();",
        "grade-27": {
            "execution": 0
        },
        "165": "ArrayList<Integer> res = new ArrayList<>();\n        int n = grid.size();\n        Pair<Integer,Integer> ans = null;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                // int ans = minPathForOne(grid, k, i, j);\n                Pair<Integer,Integer> p = minPathForOne(grid, k, i, j);\n                if (ans == null || p.compareTo(ans) < 0) {\n                    ans = p;\n                }\n            }\n        }\n        for (int i : ans.getValue0()) {\n            res.add(i);\n        }\n        return res;",
        "grade-165": {
            "execution": 0
        },
        "22": "// Good luck!\n        int N = grid.size();\n        int M = grid.get(0).size();\n        int[][] gridArr = new int[N][M];\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < M; j++) {\n                gridArr[i][j] = grid.get(i).get(j);\n            }\n        }\n        int[][] memo = new int[N][M];\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < M; j++) {\n                memo[i][j] = -1;\n            }\n        }\n        int min = Integer.MAX_VALUE;\n        int minI = -1;\n        int minJ = -1;\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < M; j++) {\n                int val = dfs(gridArr, i, j, N, M, k, memo);\n                if (val < min) {\n                    min = val;\n                    minI = i;\n                    minJ = j;\n                }\n            }\n        }\n        ArrayList<Integer> path = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            path.add(gridArr[minI][minJ]);\n            if (minI > 0 && dfs(gridArr, minI - 1, minJ, N, M, k - i - 1, memo) == min - gridArr[minI][minJ]) {\n                minI--;\n            } else if (minI < N - 1 && dfs(gridArr, minI + 1, minJ, N, M, k - i - 1, memo) == min - gridArr[minI][minJ]) {\n                minI++;\n            } else if (minJ > 0 && dfs(gridArr, minI, minJ - 1, N, M, k - i - 1, memo) == min - gridArr[minI][minJ]) {\n                minJ--;",
        "grade-22": {
            "execution": 0
        },
        "187": "// TODO: Implement this function\n        return null;",
        "grade-187": {
            "execution": 0
        },
        "124": "int n = grid.size();\n        ArrayList<ArrayList<Integer>> dp = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            dp.add(new ArrayList<>());\n            for (int j = 0; j < n; j++) {\n                dp.get(i).add(0);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == 0 && j == 0) {\n                    dp.get(i).set(j, grid.get(i).get(j));\n                } else if (i == 0) {\n                    dp.get(i).set(j, dp.get(i).get(j - 1) + grid.get(i).get(j));\n                } else if (j == 0) {\n                    dp.get(i).set(j, dp.get(i - 1).get(j) + grid.get(i).get(j));\n                } else {\n                    dp.get(i).set(j, Math.min(dp.get(i - 1).get(j), dp.get(i).get(j - 1)) + grid.get(i).get(j));\n                }\n            }\n        }\n        ArrayList<Integer> ans = new ArrayList<>();\n        int i = 0;\n        int j = 0;\n        int rem = k;\n        while (rem > 0) {\n            int mn = Integer.MAX_VALUE;\n            if (i + 1 < n) {\n                mn = Math.min(mn, dp.get(i + 1).get(j));\n            }\n            if (j + 1 < n) {\n                mn = Math.min(mn, dp.get(i).get(j + 1));\n            }\n            ans.add(grid.get(i).get(j));\n            if (i + 1 < n && mn == dp.get(i + 1).get(j)) {\n                i++;\n            } else {\n                j++;",
        "grade-124": {
            "execution": 0
        },
        "8": "// TODO: Implement your solution here\n        return null;",
        "grade-8": {
            "execution": 0
        },
        "7": "// Assumptions: 1. grid is not null. 2. grid.size() >= 2. 3. k >= 1.\n        // Idea: Use Dijkstra's algorithm, which is a greedy algorithm for solving\n        // the shortest path problem.\n        // We first construct a graph with nodes representing the cells and an edge\n        // between two nodes represents that two cells are neighbors.\n        // Let's start by creating the graph. We use a map graph to represent the graph,\n        // with the key node being the coordinates of the cell, and the value being\n        // the list of the neighboring nodes, represented by their coordinates.\n        Map<Pair<Integer, Integer>, ArrayList<Pair<Integer, Integer>>> graph = new HashMap<>();\n        int N = grid.size();\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < N; j++) {\n                ArrayList<Pair<Integer, Integer>> neighbors = new ArrayList<>();\n                if (i > 0) {\n                    neighbors.add(new Pair<>(i - 1, j));\n                }\n                if (i < N - 1) {\n                    neighbors.add(new Pair<>(i + 1, j));\n                }\n                if (j > 0) {\n                    neighbors.add(new Pair<>(i, j - 1));\n                }\n                if (j < N - 1) {\n                    neighbors.add(new Pair<>(i, j + 1));\n                }\n                graph.put(new Pair<>(i, j), neighbors);\n            }\n        }\n        // Create the min heap based on the current shortest path length.\n        // This is an optimization so that we only need to run the loop k times.\n        Queue<Pair<ArrayList<Integer>, Pair<Integer, Integer>>> minHeap = new PriorityQueue<>(\n                (x, y) -> x.getValue0().size() - y.getValue0().size());\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < N; j++) {\n                ArrayList<Integer> path = new ArrayList<>();\n                path.add(grid.get(i",
        "grade-7": {
            "execution": 0
        },
        "24": "ArrayList<Integer> ret = new ArrayList<>();\n        // build the graph based on grid\n        ArrayList<Integer>[] g = new ArrayList[grid.size() * grid.size() + 1];\n        int[] cost = new int[grid.size() * grid.size() + 1];\n        int[][] dist = new int[grid.size()][grid.size()];\n        int pos = 0;\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.size(); j++) {\n                pos++;\n                g[pos] = new ArrayList<>();\n                cost[pos] = grid.get(i).get(j);\n                dist[i][j] = pos;\n                if (i > 0) {\n                    g[pos].add(dist[i - 1][j]);\n                }\n                if (i < grid.size() - 1) {\n                    g[pos].add(dist[i + 1][j]);\n                }\n                if (j > 0) {\n                    g[pos].add(dist[i][j - 1]);\n                }\n                if (j < grid.size() - 1) {\n                    g[pos].add(dist[i][j + 1]);\n                }\n            }\n        }\n        // dp\n        boolean[] visit = new boolean[g.length];\n        ArrayList<Integer>[] path = new ArrayList[g.length];\n        int[] h = new int[g.length];\n        for (int i = 1; i < g.length; i++) {\n            path[i] = new ArrayList<>();\n            path[i].add(cost[i]);\n            h[i] = cost[i];\n        }\n        int min_h = Integer.MAX_VALUE;\n        int min_p = -1;\n        while (true) {\n            int i = -1;\n            for (int j = 1; j < g.length; j++) {\n                if (!visit[j] && h[j] < min_h) {\n                    min_h = h[j];\n                    i = j;\n                }\n            }",
        "grade-24": {
            "execution": 0
        },
        "61": "// TODO: Write - Your - Code\n        return null;",
        "grade-61": {
            "execution": 0
        },
        "67": "// Assume the grid is not empty\n        // Assume that k is positive\n        int n = grid.size();\n        if (k > n * n) {\n            throw new RuntimeException(\"k is too large.\");\n        }\n        ArrayList<ArrayList<ArrayList<Integer>>> res = new ArrayList<>();\n        ArrayList<Integer> res_min = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                dfs(new ArrayList<>(Arrays.asList(new Pair<>(i, j))), grid, k, n, res);\n            }\n        }\n        int min = Integer.MAX_VALUE;\n        for (ArrayList<ArrayList<Integer>> list: res) {\n            int sum = 0;\n            for (ArrayList<Integer> pair: list) {\n                sum += pair.get(0) * n + pair.get(1);\n            }\n            if (sum < min) {\n                min = sum;\n                res_min = list;\n            }\n        }\n        ArrayList<Integer> ret = new ArrayList<>();\n        for (ArrayList<Integer> pair: res_min) {\n            ret.add(grid.get(pair.get(0)).get(pair.get(1)));\n        }\n        return ret;",
        "grade-67": {
            "execution": 0
        },
        "150": "final int N = grid.size();\n        final int K = k;\n        final int[][] graph = new int[N * N][N * N];\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < N; j++) {\n                final int u = i * N + j;\n                if (i + 1 < N) {\n                    final int v = (i + 1) * N + j;\n                    graph[u][v] = 1;\n                    graph[v][u] = 1;\n                }\n                if (j + 1 < N) {\n                    final int v = i * N + j + 1;\n                    graph[u][v] = 1;\n                    graph[v][u] = 1;\n                }\n            }\n        }\n        final int[][] dp = new int[N * N][K + 1];\n        for (int i = 0; i < N * N; i++) {\n            for (int j = 0; j <= K; j++) {\n                dp[i][j] = Integer.MAX_VALUE;\n            }\n        }\n        for (int i = 0; i < N * N; i++) {\n            dp[i][0] = 0;\n        }\n        for (int i = 0; i < N * N; i++) {\n            for (int j = 0; j < N * N; j++) {\n                if (graph[i][j] == 1) {\n                    for (int kk = 1; kk <= K; kk++) {\n                        dp[j][kk] = Math.min(dp[j][kk], dp[i][kk - 1] + 1);\n                    }\n                }\n            }\n        }\n        int min = Integer.MAX_VALUE;\n        int mi = -1;\n        for (int i = 0; i < N * N; i++) {\n            if (dp[i][K] < min) {\n                min = dp[i][K];\n                mi = i;\n            }\n        }\n        final ArrayList<Integer> ret = new ArrayList<>();\n        final ArrayList<Integer> stack",
        "grade-150": {
            "execution": 0
        },
        "190": "// PUT YOUR CODE HERE\n        return null;",
        "grade-190": {
            "execution": 0
        },
        "171": "// TODO: Write your code here\n        // Base case\n        if (k == 0) {\n            return new ArrayList<>();\n        }\n        int n = grid.size();\n        Pair<Integer, Integer> minPathEnd = null;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                Pair<Integer, Integer> currentMinPathEnd = findMinPathEnd(grid, new Pair<>(i, j), k);\n                if (minPathEnd == null || isSmaller(grid, currentMinPathEnd, minPathEnd, k)) {\n                    minPathEnd = currentMinPathEnd;\n                }\n            }\n        }\n        return constructMinPath(grid, minPathEnd, k);",
        "grade-171": {
            "execution": 0
        },
        "54": "// TODO: Write your code here.\n        int N = grid.size();\n        ArrayList<Integer> result = new ArrayList<>();\n        if (N == 0 || k == 0)\n            return result;\n        int[] dx = {0, 0, 1, -1};\n        int[] dy = {1, -1, 0, 0};\n        ArrayList<Pair<Pair<Integer, Integer>, ArrayList<Integer>>> que = new ArrayList<>();\n        que.add(new Pair<>(new Pair<>(0, 0), new ArrayList<>()));\n        que.get(0).getValue1().add(grid.get(0).get(0));\n        int[][] visited = new int[N][N];\n        visited[0][0] = 1;\n        int minLen = Integer.MAX_VALUE;\n        while (!que.isEmpty()) {\n            ArrayList<Pair<Pair<Integer, Integer>, ArrayList<Integer>>> que2 = new ArrayList<>();\n            while (!que.isEmpty()) {\n                Pair<Pair<Integer, Integer>, ArrayList<Integer>> p = que.remove(0);\n                if (p.getValue1().size() == k) {\n                    if (p.getValue1().size() < minLen) {\n                        minLen = p.getValue1().size();\n                        result = p.getValue1();\n                    } else if (p.getValue1().size() == minLen) {\n                        for (int i = 0; i < minLen; i++) {\n                            if (p.getValue1().get(i) < result.get(i)) {\n                                result = p.getValue1();\n                                break;\n                            } else if (p.getValue1().get(i) > result.get(i)) {\n                                break;\n                            }\n                        }\n                    }\n                    continue;\n                }\n                int currRow = p.getValue0().getValue0();\n                int currCol = p.getValue0().getValue1();\n                for (int i = 0; i < 4; i++) {\n                    int newRow = currRow + dx[",
        "grade-54": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a list of integers, remove all elements that occur more than once.\n    // Keep order of elements left the same as in the input.\n    // >>> remove_duplicates([1, 2, 3, 2, 4])\n    // [1, 3, 4]\n    public static ArrayList<Integer> removeDuplicates(ArrayList<Integer> numbers) {\n",
        "snippet": [
            "        Map<Integer, Integer> c = new HashMap<>();\n        for (int i : numbers) {\n            c.put(i, c.getOrDefault(i, 0) + 1);\n        }\n        return numbers.stream().filter(i -> c.get(i) == 1).collect(Collectors.toList());\n    }\n}"
        ],
        "simplified": "From a list of integers, remove all elements that occur more than once. Keep order of elements left the same as in the input.",
        "task_id": "26",
        "184": "Set<Integer> nums = new HashSet<Integer>();\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int num : numbers) {\n            if (!nums.contains(num)) {\n                nums.add(num);\n                result.add(num);\n            }\n        }\n        return result;",
        "grade-184": {
            "execution": 0
        },
        "29": "ArrayList<Integer> res = new ArrayList<Integer>();\n        HashSet<Integer> hs = new HashSet<Integer>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (!hs.contains(numbers.get(i))) {\n                hs.add(numbers.get(i));\n                res.add(numbers.get(i));\n            }\n        }\n        return res;",
        "grade-29": {
            "execution": 0
        },
        "6": "HashSet<Integer> uniqueNumbers = new HashSet<>();\n        ArrayList<Integer> result = new ArrayList<>();\n        for (Integer number : numbers) {\n            if (!uniqueNumbers.contains(number)) {\n                uniqueNumbers.add(number);\n                result.add(number);\n            }\n        }\n        return result;",
        "grade-6": {
            "execution": 0
        },
        "77": "ArrayList<Integer> result = new ArrayList<Integer>();\n        HashSet<Integer> set = new HashSet<Integer>();\n        for (int number : numbers) {\n            if (!set.contains(number)) {\n                set.add(number);\n                result.add(number);\n            }\n        }\n        return result;",
        "grade-77": {
            "execution": 0
        },
        "69": "// Fill in your code here\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < numbers.size(); i++) {\n            int count = 0;\n            for (int j = 0; j < numbers.size(); j++) {\n                if (numbers.get(i) == numbers.get(j))\n                    count++;\n            }\n            if (count == 1)\n                result.add(numbers.get(i));\n        }\n        return result;",
        "grade-69": {
            "execution": 1
        },
        "64": "// Fill this in.\n        List<Integer> l2 = new ArrayList<Integer>();\n        l2.addAll(numbers);\n        numbers.removeAll(numbers);\n        Set<Integer> set = new HashSet<Integer>();\n        for(int i = 0; i < l2.size(); i++) {\n            if(!set.contains(l2.get(i))) {\n                set.add(l2.get(i));\n                numbers.add(l2.get(i));\n            }\n        }\n        return numbers;",
        "grade-64": {
            "execution": 0
        },
        "36": "ArrayList<Integer> result = new ArrayList<Integer>();\n        HashSet<Integer> seen = new HashSet<Integer>();\n        for (Integer number : numbers) {\n            if (!seen.contains(number)) {\n                result.add(number);\n                seen.add(number);\n            }\n        }\n        return result;",
        "grade-36": {
            "execution": 0
        },
        "27": "ArrayList<Integer> ans = new ArrayList<Integer>();\n        HashSet<Integer> seen = new HashSet<Integer>();\n        for (int number : numbers) {\n            if (!seen.contains(number)) {\n                ans.add(number);\n                seen.add(number);\n            }\n        }\n        return ans;",
        "grade-27": {
            "execution": 0
        },
        "197": "Set<Integer> seen = new HashSet<>();\n        numbers.removeIf(x -> !seen.add(x));\n        return numbers;",
        "grade-197": {
            "execution": 0
        },
        "156": "// YOUR CODE HERE\n        return numbers;",
        "grade-156": {
            "execution": 0
        },
        "23": "ArrayList<Integer> a = new ArrayList<Integer>();\n        HashSet<Integer> h = new HashSet<Integer>();\n        for (int n : numbers) {\n            if (!h.contains(n)) {\n                h.add(n);\n                a.add(n);\n            }\n        }\n        return a;",
        "grade-23": {
            "execution": 0
        },
        "170": "ArrayList<Integer> newList = new ArrayList<Integer>();\n        HashMap<Integer, Integer> counts = new HashMap<Integer, Integer>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (counts.containsKey(numbers.get(i))) {\n                counts.put(numbers.get(i), counts.get(numbers.get(i)) + 1);\n            } else {\n                counts.put(numbers.get(i), 1);\n            }\n        }\n        for (int i = 0; i < numbers.size(); i++) {\n            if (counts.get(numbers.get(i)) == 1) {\n                newList.add(numbers.get(i));\n            }\n        }\n        return newList;",
        "grade-170": {
            "execution": 1
        },
        "121": "Set<Integer> set = new HashSet<Integer>();\n        ArrayList<Integer> res = new ArrayList<Integer>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (!set.contains(numbers.get(i))) {\n                set.add(numbers.get(i));\n                res.add(numbers.get(i));\n            }\n        }\n        return res;",
        "grade-121": {
            "execution": 0
        },
        "8": "ArrayList<Integer> result = new ArrayList<Integer>();\n        HashSet<Integer> set = new HashSet<Integer>();\n        for (int i = 0; i < numbers.size(); i++) {\n            int current = numbers.get(i);\n            if (!set.contains(current)) {\n                set.add(current);\n                result.add(current);\n            }\n        }\n        return result;",
        "grade-8": {
            "execution": 0
        },
        "7": "HashSet<Integer> set = new HashSet<Integer>();\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (Integer i : numbers) {\n            if (!set.contains(i)) {\n                set.add(i);\n                result.add(i);\n            }\n        }\n        return result;",
        "grade-7": {
            "execution": 0
        },
        "24": "HashSet<Integer> noDuplicates = new HashSet<Integer>();\n        for (Integer number : numbers) {\n            noDuplicates.add(number);\n        }\n        return new ArrayList<Integer>(noDuplicates);",
        "grade-24": {
            "execution": 0
        },
        "60": "ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (!result.contains(numbers.get(i))) {\n                result.add(numbers.get(i));\n            }\n        }\n        return result;",
        "grade-60": {
            "execution": 0
        },
        "66": "ArrayList<Integer> r = new ArrayList<Integer>();\n        Set<Integer> s = new HashSet<Integer>();\n        for (int i : numbers) {\n            if (!s.contains(i)) {\n                s.add(i);\n                r.add(i);\n            }\n        }\n        return r;",
        "grade-66": {
            "execution": 0
        },
        "145": "Set<Integer> set = new HashSet<>();\n        for (int number : numbers) {\n            set.add(number);\n        }\n        ArrayList<Integer> unique = new ArrayList<>(set);\n        return unique;",
        "grade-145": {
            "execution": 0
        },
        "173": "ArrayList<Integer> result = new ArrayList<Integer>();\n        HashSet<Integer> set = new HashSet<Integer>();\n        for (int i = 0; i < numbers.size(); i++) {\n            int cur = numbers.get(i);\n            if (!set.contains(cur)) {\n                result.add(cur);\n                set.add(cur);\n            }\n        }\n        return result;",
        "grade-173": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a list of strings, where each string consists of only digits, return a list.\n    // Each element i of the output should be \"the number of odd elements in the\n    // string i of the input.\" where all the i's should be replaced by the number\n    // of odd digits in the i'th string of the input.\n    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    // [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    public static ArrayList<String> oddCount(ArrayList<String> lst) {\n",
        "snippet": [
            "        List<String> res = new ArrayList<>();\n        for (String arr : lst) {\n            int n = 0;\n            for (char d : arr.toCharArray()) {\n                if ((d - '0') % 2 == 1) {\n                    n += 1;\n                }\n            }\n            res.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\" );\n        }\n        return res;\n    }\n}"
        ],
        "simplified": "Given a list of strings, where each string consists of only digits, return a list. Each element i of the output should be \"the number of odd elements in the string i of the input.\" where all the i's should be replaced by the number of odd digits in the i'th string of the input.",
        "task_id": "113",
        "182": "ArrayList<String> result = new ArrayList<String>();\n        for (String l : lst) {\n            result.add(numberOfOddChars(l));\n        }\n        return result;",
        "grade-182": {
            "execution": 0
        },
        "32": "ArrayList<String> ret = new ArrayList<String>();\n        for (String s : lst) {\n            int[] ch = new int[10];\n            int odd = 0;\n            for (int i = 0; i < s.length(); i++) {\n                ch[s.charAt(i) - '0']++;\n            }\n            for (int i = 0; i < 10; i++) {\n                if (ch[i] % 2 == 1) {\n                    odd++;\n                }\n            }\n            char[] str = \"the number of odd elements nn the strnng n of the nnput.\".toCharArray();\n            str[31] = (char) ('0' + odd);\n            str[40] = (char) ('0' + odd);\n            str[49] = (char) ('0' + odd);\n            ret.add(new String(str));\n        }\n        return ret;",
        "grade-32": {
            "execution": 0
        },
        "6": "ArrayList<String> res = new ArrayList<String>();\n        String str = \"\";\n        for (int i = 0; i < lst.size(); i++) {\n            str = lst.get(i);\n            int j = 0;\n            for (; j < str.length(); j++) {\n                if (str.charAt(j) % 2 == 1) {\n                    break;\n                }\n            }\n            if (j == str.length()) {\n                continue;\n            }\n            int ans = 0;\n            for (j = 0; j < str.length(); j++) {\n                if (str.charAt(j) % 2 == 1) {\n                    ans++;\n                }\n            }\n            res.add(\"the number of odd elements \" + ans + \"n the str\" + ans + \"ng \" + ans + \" of the \" + ans + \"nput.\");\n        }\n        return res;",
        "grade-6": {
            "execution": 1
        },
        "75": "ArrayList<String> res = new ArrayList<String>();\n        int count = 0;\n        for (String s : lst) {\n            count = 0;\n            for (int i = 0; i < s.length(); i++) {\n                if (Integer.parseInt(s.substring(i, i + 1)) % 2 == 1) {\n                    count++;\n                }\n            }\n            res.add(s.replaceAll(\"[0-9]\", \"n\") +\n                    Integer.toString(count) +\n                    \"n the str\" + Integer.toString(count) +\n                    \"ng \" + Integer.toString(count) +\n                    \" of the \" + Integer.toString(count) + \"nput.\");\n        }\n        return res;",
        "grade-75": {
            "execution": 0
        },
        "66": "ArrayList<String> result = new ArrayList<String>();\n        for (String s : lst) {\n            int n = 0;\n            for (int i = 0; i < s.length(); i++) {\n                if (Character.getNumericValue(s.charAt(i)) % 2 == 1) {\n                    n++;\n                }\n            }\n            String tmp = \"the number of odd elements \" + String.valueOf(n) + \"n the str\" + String.valueOf(n) + \"ng \" + String.valueOf(n) + \" of the \" + String.valueOf(n) + \"nput.\";\n            result.add(tmp);\n        }\n        return result;",
        "grade-66": {
            "execution": 1
        },
        "61": "ArrayList<String> ans = new ArrayList<String>();\n        for (String s : lst) {\n            int count = 0;\n            for (int i = 0; i < s.length(); i++) {\n                if (Integer.parseInt(s.substring(i, i + 1)) % 2 == 1) {\n                    count++;\n                }\n            }\n            String s1 = \"the number of odd elements \" + String.valueOf(count) + \"n the str\" + String.valueOf(count) + \"ng \" + String.valueOf(count) + \" of the \" + String.valueOf(count) + \"nput.\";\n            ans.add(s1);\n        }\n        return ans;",
        "grade-61": {
            "execution": 1
        },
        "39": "ArrayList<String> result = new ArrayList<String>();\n        for (String s : lst) {\n            int num_odds = 0;\n            for (int i = 0; i < s.length(); i++) {\n                int d = Integer.parseInt(s.substring(i, i + 1));\n                if (d % 2 == 1) {\n                    num_odds++;\n                }\n            }\n            String new_s = s.replaceAll(\"\\\\d\", String.valueOf(num_odds));\n            result.add(new_s);\n        }\n        return result;",
        "grade-39": {
            "execution": 0
        },
        "30": "ArrayList<String> rez = new ArrayList<String>();\n        for (String str : lst) {\n            char[] arr = str.toCharArray();\n            int odd_count = 0;\n            for (char c : arr) {\n                if (Character.getNumericValue(c) % 2 == 1) {\n                    odd_count++;\n                }\n            }\n            rez.add(str.replaceAll(\"[0-9]\", \"\") + odd_count + \" of the \" + odd_count + \"nput.\");\n        }\n        return rez;",
        "grade-30": {
            "execution": 0
        },
        "194": "ArrayList<String> ret = new ArrayList<String>();\n        for (String s : lst) {\n            int count = 0;\n            for (int i = 0; i < s.length(); i++) {\n                if (Integer.parseInt(s.substring(i, i + 1)) % 2 == 1)\n                    count++;\n            }\n            if (count == 0) {\n                ret.add(\"the number of odd elements 0n the str0ng 0 of the 0nput.\");\n            } else {\n                ret.add(\"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"nput.\");\n            }\n        }\n        return ret;",
        "grade-194": {
            "execution": 1
        },
        "155": "ArrayList<String> result = new ArrayList<String>();\n        for (String elem : lst) {\n            int count = 0;\n            for (int i = 0; i < elem.length(); i++) {\n                if (Integer.parseInt(elem.substring(i, i + 1)) % 2 == 1) {\n                    count++;\n                }\n            }\n            result.add(replace(elem, count));\n        }\n        return result;",
        "grade-155": {
            "execution": 0
        },
        "26": "ArrayList<String> ans = new ArrayList<String>();\n        int i = 0;\n        for (String s : lst) {\n            int count = 0;\n            for (char c : s.toCharArray()) {\n                if (c % 2 == 1) count++;\n            }\n            String t = \"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"nput.\";\n            ans.add(t);\n            i++;\n        }\n        return ans;",
        "grade-26": {
            "execution": 1
        },
        "169": "ArrayList<String> res = new ArrayList<String>();\n        String temp = \"\";\n        for (int i = 0; i < lst.size(); i++) {\n            int oddCount = 0;\n            temp = lst.get(i);\n            for (int j = 0; j < temp.length(); j++) {\n                int num = Integer.parseInt(temp.substring(j, j + 1));\n                if (num % 2 != 0) {\n                    oddCount++;\n                }\n            }\n            res.add(\"the number of odd elements \" + oddCount + \"n the str\" + oddCount + \"ng \" + oddCount + \" of the \" + oddCount + \"nput.\");\n        }\n        return res;",
        "grade-169": {
            "execution": 1
        },
        "116": "ArrayList<String> res = new ArrayList<String>();\n        for (String s : lst) {\n            int odds = 0;\n            for (int i = 0; i < s.length(); i++) {\n                int digit = s.charAt(i) - '0';\n                if (digit % 2 == 1) {\n                    odds++;\n                }\n            }\n            res.add(makeString(odds, s));\n        }\n        return res;",
        "grade-116": {
            "execution": 0
        },
        "9": "ArrayList<String> ret = new ArrayList<String>();\n        for (String s : lst) {\n            int num_odd = 0;\n            for (int i = 0; i < s.length(); i++) {\n                if (Integer.parseInt(s.substring(i, i + 1)) % 2 == 1) {\n                    num_odd++;\n                }\n            }\n            ret.add(s.replaceAll(\"[0-9]\", \"n\")\n                    .replaceAll(\"[^n]\", \"n\")\n                    .replaceAll(\"n\", num_odd + \"\"));\n        }\n        return ret;",
        "grade-9": {
            "execution": 0
        },
        "7": "ArrayList<String> result = new ArrayList<String>();\n        for (String s : lst) {\n            int n = 0;\n            for (int i = 0; i < s.length(); i++) {\n                if (Integer.parseInt(s.substring(i, i + 1)) % 2 == 1) {\n                    n++;\n                }\n            }\n            result.add(s.replaceAll(\"\\\\d\", \"4\") + \": \" + n);\n        }\n        return result;",
        "grade-7": {
            "execution": 0
        },
        "27": "ArrayList<String> answer = new ArrayList<String>();\n        for (String str : lst) {\n            int count = 0;\n            for (int i = 0; i < str.length(); i++) {\n                int n = Character.getNumericValue(str.charAt(i));\n                if (n % 2 == 1) {\n                    count++;\n                }\n            }\n            String newStr = \"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"nput.\";\n            answer.add(newStr);\n        }\n        return answer;",
        "grade-27": {
            "execution": 1
        },
        "59": "ArrayList<String> result = new ArrayList<String>();\n        for (String s : lst) {\n            int count = 0;\n            for (int i = 0; i < s.length(); i++) {\n                int digit = Character.getNumericValue(s.charAt(i));\n                if (digit % 2 == 1) {\n                    count++;\n                }\n            }\n            StringBuilder sb = new StringBuilder(\"the number of odd elements \");\n            String countString = Integer.toString(count);\n            sb.append(countString);\n            sb.append(\"n the str\");\n            sb.append(countString);\n            sb.append(\"ng \");\n            sb.append(countString);\n            sb.append(\" of the \");\n            sb.append(countString);\n            sb.append(\"nput.\");\n            result.add(sb.toString());\n        }\n        return result;",
        "grade-59": {
            "execution": 1
        },
        "63": "ArrayList<String> out = new ArrayList<String>();\n        for (String str : lst) {\n            int count = 0;\n            for (char c : str.toCharArray()) {\n                if (c % 2 == 1) {\n                    count++;\n                }\n            }\n            out.add(String.format(\"the number of odd elements %dn the str%dng %d of the %dnput.\", count, str.length(), str.length(), str.length()));\n        }\n        return out;",
        "grade-63": {
            "execution": 0
        },
        "144": "int odd_count;\n        ArrayList<String> output = new ArrayList<String>();\n        for (String l : lst) {\n            odd_count = 0;\n            for (int i = 0; i < l.length(); i++) {\n                odd_count += (l.charAt(i) - '0') % 2 == 1 ? 1 : 0;\n            }\n            output.add(String.format(\"the number of odd elements %dn the str%dng %d of the %dnput.\", odd_count, odd_count, odd_count, odd_count));\n        }\n        return output;",
        "grade-144": {
            "execution": 1
        },
        "172": "ArrayList<String> result = new ArrayList<String>();\n        String tmp;\n        int count;\n        for (String i : lst) {\n            count = 0;\n            for (char c : i.toCharArray()) {\n                if (Character.getNumericValue(c) % 2 != 0) {\n                    count++;\n                }\n            }\n            tmp = \"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"nput.\";\n            result.add(tmp);\n        }\n        return result;",
        "grade-172": {
            "execution": 1
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Add two numbers x and y\n    // >>> add(2, 3)\n    // 5\n    // >>> add(5, 7)\n    // 12\n    public static int add(int x, int y) {\n",
        "snippet": [
            "        return x + y;\n    }\n}"
        ],
        "simplified": "Add two numbers x and y",
        "task_id": "53",
        "23": "return 0;",
        "grade-23": {
            "execution": 0
        },
        "3": "return x + y;",
        "grade-3": {
            "execution": 1
        },
        "79": "int res = x ^ y;\n        int carry = (x & y) << 1;\n        if (carry == 0) {\n            return res;\n        }\n        return add(res, carry);",
        "grade-79": {
            "execution": 1
        },
        "72": "//TODO: complete add method\n        return 0;",
        "grade-72": {
            "execution": 0
        },
        "64": "// Your code here.\n        int xor=x^y;\n        int carry=x&y;\n        int result=0;\n        int i=0;\n        while(i<32){\n            if((carry&1)==1){\n                xor=xor^(1<<i);\n            }\n            carry=carry>>1;\n            i++;\n        }\n        return xor;",
        "grade-64": {
            "execution": 0
        },
        "30": "if (y == 0) {\n            return x;\n        }\n        int carry = (x & y) << 1;\n        int sum = x ^ y;\n        return add(sum, carry);",
        "grade-30": {
            "execution": 1
        },
        "113": "return 0;",
        "grade-113": {
            "execution": 0
        },
        "9": "if (y == 0) {\n            return x;\n        }\n        int sum = x ^ y;\n        int carry = (x & y) << 1;\n        return add(sum, carry);",
        "grade-9": {
            "execution": 1
        },
        "101": "int carry, sum;\n        do {\n            sum = x ^ y;\n            carry = (x & y) << 1;\n            x = sum;\n            y = carry;\n        } while (y != 0);\n        return sum;",
        "grade-101": {
            "execution": 1
        },
        "177": "int b1 = (x & y) << 1;\n        int b2 = x ^ y;\n        int result = 0;\n        while (b1 != 0) {\n            result = b1 ^ b2;\n            b1 = (b1 & b2) << 1;\n            b2 = result;\n        }\n        return result;",
        "grade-177": {
            "execution": 0
        },
        "155": "// YOUR CODE HERE\n        return -1;",
        "grade-155": {
            "execution": 0
        },
        "76": "throw new NotImplementedException();",
        "grade-76": {
            "execution": 0
        },
        "5": "int carry = (x & y) << 1;\n        int result = x ^ y;\n        while (carry != 0) {\n            int result1 = result ^ carry;\n            carry = (result & carry) << 1;\n            result = result1;\n        }\n        return result;",
        "grade-5": {
            "execution": 1
        },
        "82": "throw new IllegalStateException(\"Replace this line with your solution\");",
        "grade-82": {
            "execution": 0
        },
        "63": "int i;\n        if(x>0){\n            for(i=0;i<x;i++){\n                y+=1;\n            }\n        }\n        else if(x<0){\n            for(i=0;i>x;i--){\n                y-=1;\n            }\n        }\n        return y;",
        "grade-63": {
            "execution": 1
        },
        "2": "int a, b;\n        a = x ^ y;\n        b = (x & y) << 1;\n        if (b != 0) {\n            return add(a, b);\n        }\n        return a;",
        "grade-2": {
            "execution": 1
        },
        "1": "if (y == 0) {\n            return x;\n        } else {\n            return add(x ^ y, (x & y) << 1);\n        }",
        "grade-1": {
            "execution": 1
        },
        "146": "// replace with your code\n        return 0;",
        "grade-146": {
            "execution": 0
        },
        "22": "throw new UnsupportedOperationException(\"Waiting to be implemented.\");",
        "grade-22": {
            "execution": 0
        },
        "197": "// >>> replace this line with your code\n        return 0;",
        "grade-197": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find the shortest palindrome that begins with a supplied string.\n    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied string that is a palindrome.\n    // - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome('')\n    // ''\n    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n    // 'catac'\n    public static String makePalindrome(String string) {\n",
        "snippet": [
            "        if (string.length() == 0) {\n            return \"\";\n        }\n\n        int beginning_of_suffix = 0;\n\n        while (!isPalindrome(string.substring(beginning_of_suffix))) {\n            beginning_of_suffix++;\n        }\n\n        return string + new StringBuffer(string.substring(0, beginning_of_suffix)).reverse().toString();\n    }\n}"
        ],
        "simplified": "Test if given string is a palindrome",
        "task_id": "10",
        "167": "// >>> make_palindrome('')\n        // ''\n        // >>> make_palindrome('cat')\n        // 'catac'\n        // >>> make_palindrome('cata')\n        // 'catac'\n        StringBuilder prefix = new StringBuilder();\n        StringBuilder suffix = new StringBuilder();\n        // Find the longest postfix of supplied string that is a palindrome.\n        for (int i = 0; i < string.length(); i++) {\n            prefix.append(string.charAt(i));\n            suffix.insert(0, string.charAt(i));\n            if (prefix.toString().equals(suffix.toString())) {\n                break;\n            }\n        }\n        // Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n        return string + prefix.reverse().toString();",
        "grade-167": {
            "execution": 0
        },
        "28": "if (string.isEmpty()) return string;\n        int length = string.length();\n        int suffix = -1;\n        while (suffix < length / 2) {\n            int i = 0;\n            while (2 * suffix + i < length && string.charAt(suffix + i) == string.charAt(length - 1 - i)) i++;\n            if (i > 0) {\n                suffix += i;\n            } else {\n                suffix--;\n            }\n        }\n        return string + new StringBuilder(string.substring(0, length - suffix - 1)).reverse().toString();",
        "grade-28": {
            "execution": 0
        },
        "6": "if (string.length() == 0) return string;\n        int[] indexes = new int[string.length()];\n        int index = 0;\n        int count = 0;\n        while (index < string.length()) {\n            if (string.charAt(index) == string.charAt(0)) {\n                indexes[count] = index;\n                count++;\n            }\n            index++;\n        }\n        if (count == 0) return \"\";\n        for (int i = 0; i < count; i++) {\n            int mirror = indexes[i];\n            boolean isPalindrome = true;\n            for (int j = 0; j < mirror; j++) {\n                if (string.charAt(j) != string.charAt(mirror - j)) {\n                    isPalindrome = false;\n                    break;\n                }\n            }\n            if (isPalindrome) {\n                String reversed = \"\";\n                int length = string.length() - 1;\n                while (length >= mirror) {\n                    reversed += string.charAt(length);\n                    length--;\n                }\n                return string + reversed;\n            }\n        }\n        return \"\";",
        "grade-6": {
            "execution": 0
        },
        "194": "int palindromeSuffixLength = longestPalindromeSuffixLength(string);\n        String prefix = string.substring(0, string.length() - palindromeSuffixLength);\n        StringBuilder sb = new StringBuilder(string);\n        sb.append(new StringBuilder(prefix).reverse());\n        return sb.toString();",
        "grade-194": {
            "execution": 0
        },
        "71": "StringBuilder postfix = new StringBuilder();\n        StringBuilder prefix = new StringBuilder();\n        int n = string.length();\n        while (n > 0) {\n            prefix.append(string.charAt(0));\n            if (string.equals(string.substring(0, n)) && string.equals(string.substring(n))) {\n                postfix.append(string.substring(0, n));\n                break;\n            }\n            n -= 1;\n        }\n        return prefix.toString() + postfix.reverse().toString();",
        "grade-71": {
            "execution": 0
        },
        "63": "String postfix = findLongestPalindromicSuffix(string);\n        String prefix = reverseString(string.substring(0, string.length() - postfix.length()));\n        return prefix + string + postfix;",
        "grade-63": {
            "execution": 0
        },
        "58": "throw new UnsupportedOperationException(\"TODO\");",
        "grade-58": {
            "execution": 0
        },
        "35": "String stringReversed = new StringBuilder(string).reverse().toString();\n        String stringAppended = string + \"$\" + stringReversed;\n        int[] longestPrefix = new int[stringAppended.length()];\n        for (int i = 1; i < stringAppended.length(); i++) {\n            int j = longestPrefix[i - 1];\n            while (j > 0 && stringAppended.charAt(i) != stringAppended.charAt(j))\n                j = longestPrefix[j - 1];\n            if (stringAppended.charAt(i) == stringAppended.charAt(j))\n                j += 1;\n            longestPrefix[i] = j;\n        }\n        return stringReversed.substring(0, string.length() - longestPrefix[stringAppended.length() - 1]) + string;",
        "grade-35": {
            "execution": 0
        },
        "193": "if (string.length() == 0) {\n            return string;\n        }\n\n        // Find the longest palindromic suffix.\n        int max_len = 1;\n        int max_end = 0;\n        for (int end = 1; end < string.length(); end++) {\n            for (int len = 1; len <= end; len++) {\n                // Test whether string[end - len + 1, end] is a palindrome.\n                if (len <= end && string.charAt(end - len) == string.charAt(end)) {\n                    // string[end - len + 1, end] is a palindrome.\n                    if (len > max_len) {\n                        max_len = len;\n                        max_end = end;\n                    }\n                } else {\n                    break;\n                }\n            }\n        }\n\n        // Create the reversed string of string[0, max_end - max_len].\n        int cut_start = max_end - max_len + 1;\n        int cut_end = max_end + 1;\n        String reversed_string = new StringBuilder(string.substring(0, cut_start)).reverse().toString();\n\n        // Return the concatenation of the reversed string and string[cut_end].\n        return string.substring(0, cut_end) + reversed_string;",
        "grade-193": {
            "execution": 0
        },
        "26": "assert string != null;\n        return Stream.of(string.length(), suffixLength(string))\n            .mapToInt(Integer::intValue)\n            .min()\n            .map(n -> new StringBuilder(string.substring(0, n)).reverse().toString())\n            .map(s -> new StringBuilder(string).append(s).toString())\n            .orElse(string);",
        "grade-26": {
            "execution": 0
        },
        "178": "// >>> len(string)\n        // 5\n        int n = string.length();\n        for (int i = n - 1; i >= 0; i--) {\n            // >>> string[:1]\n            // 'a'\n            // >>> string[:2]\n            // 'ca'\n            // >>> string[:3]\n            // 'cat'\n            // >>> string[:4]\n            // 'cata'\n            // >>> string[:5]\n            // 'cata'\n            // >>> string[:6]\n            // 'cata'\n            if (isPalindrome(string.substring(0, i + 1))) {\n                return string + reverse(string.substring(i + 1));\n            }\n        }\n        throw new IllegalArgumentException(\"The supplied string is not a palindrome.\");",
        "grade-178": {
            "execution": 0
        },
        "143": "int k = 0;\n        for (int i = 0; i < string.length(); i++) {\n            String s = string.substring(i);\n            String s_reversed = new StringBuilder(s).reverse().toString();\n            if (s.equals(s_reversed)) {\n                k = i;\n                break;\n            }\n        }\n        String prefix = string.substring(0, k);\n        String prefix_reversed = new StringBuilder(prefix).reverse().toString();\n        return string + prefix_reversed;",
        "grade-143": {
            "execution": 1
        },
        "22": "String revString = new StringBuilder(string).reverse().toString();\n        String palindrome = null;\n        String maxPrefix = null;\n        String maxSuffix = null;\n        int maxLength = 0;\n        int stringLength = string.length();\n        for (int i = 0; i < stringLength; i++) {\n            String prefix = string.substring(0, i);\n            String suffix = revString.substring(stringLength - i);\n            if (prefix.equals(suffix)) {\n                palindrome = prefix;\n                maxLength = i;\n            }\n        }\n        String revPalindrome = new StringBuilder(palindrome).reverse().toString();\n        return string + revPalindrome.substring(maxLength);",
        "grade-22": {
            "execution": 0
        },
        "155": "StringBuilder sb = new StringBuilder(string);\n        // rsb holds the string in reverse order.\n        StringBuilder rsb = new StringBuilder(string).reverse();\n        int n = string.length();\n        int[] p = new int[n];\n        p[0] = 0;\n        int k = 0;\n        for (int i = 1; i < n; i++) {\n            while (k > 0 && string.charAt(k) != string.charAt(i))\n                k = p[k - 1];\n            if (string.charAt(k) == string.charAt(i))\n                k++;\n            p[i] = k;\n        }\n        // Now we know the length of the longest palindromic suffix.\n        int l = p[n - 1];\n        // Append all the characters starting from the character l.\n        sb.append(rsb.substring(l));\n        return sb.toString();",
        "grade-155": {
            "execution": 0
        },
        "112": "int index = -1;\n        for (int i = 0; i < string.length(); i++) {\n            int palindromeLength = i + 1;\n            boolean stringBeginsWithPalindrome = string.startsWith(string.substring(string.length() - palindromeLength));\n            if (stringBeginsWithPalindrome) {\n                index = i;\n            }\n        }\n        String suffix = \"\";\n        if (index > -1) {\n            suffix = string.substring(string.length() - index - 1);\n        }\n        return string + new StringBuilder(suffix).reverse().toString();",
        "grade-112": {
            "execution": 0
        },
        "8": "if (string.length() == 0) {\n            return string;\n        }\n        int longestPalindromePrefix = findLongestPalindromePrefix(string);\n        String prefix = string.substring(0, longestPalindromePrefix);\n        StringBuilder sb = new StringBuilder(string);\n        sb.append(new StringBuilder(prefix).reverse());\n        return sb.toString();",
        "grade-8": {
            "execution": 0
        },
        "7": "String result = string;\n        String reverse = new StringBuilder(string).reverse().toString();\n        for (int i = string.length(); i > 0; i--) {\n            if (string.substring(string.length() - i).equals(reverse.substring(0, i))) {\n                result += reverse.substring(i);\n                break;\n            }\n        }\n        return result;",
        "grade-7": {
            "execution": 1
        },
        "23": "int right = string.length() - 1;\n        while (right >= 0) {\n            if (isPalindrome(string, 0, right)) {\n                StringBuilder sb = new StringBuilder(string.substring(right + 1));\n                String reverse = sb.reverse().toString();\n                string += reverse;\n                break;\n            }\n            right--;\n        }\n        return string;",
        "grade-23": {
            "execution": 0
        },
        "56": "int length = string.length();\n        if (length == 0) {\n            return string;\n        }\n        int l = 0;\n        int r = length - 1;\n        int l_palindrome = -1;\n        int r_palindrome = -1;\n        while (l < r) {\n            if (string.charAt(l) == string.charAt(r)) {\n                l_palindrome = l;\n                r_palindrome = r;\n            }\n            ++l;\n            --r;\n        }\n        if (l_palindrome == -1) {\n            // The whole string is a palindrome.\n            return string;\n        }\n        return string + string.substring(l_palindrome, r_palindrome + 1).chars().mapToObj(i -> (char) i).collect(Collectors.toList()).stream().map(Object::toString).collect(Collectors.joining(\"\")).chars().mapToObj(i -> (char) i).collect(Collectors.toList()).stream().map(Object::toString).collect(Collectors.joining(\"\")).substring(length);",
        "grade-56": {
            "execution": 0
        },
        "60": "String palindrome = \"\";\n        StringBuilder sb = new StringBuilder(string);\n        String rev = sb.reverse().toString();\n        int result = 0;\n        for (int i = 0; i < string.length(); i++) {\n            if (string.substring(0, i).equals(rev.substring(string.length() - i))) {\n                result = i;\n            }\n        }\n        palindrome = string + rev.substring(string.length() - result);\n        return palindrome;",
        "grade-60": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a list of numbers, return the sum of squares of the numbers\n    // in the list that are odd. Ignore numbers that are negative or not integers.\n    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    // double_the_difference([-1, -2, 0]) == 0\n    // double_the_difference([9, -2]) == 81\n    // double_the_difference([0]) == 0  \n    // If the input list is empty, return 0.\n    public static int doubleTheDifference(ArrayList<Float> lst) {\n",
        "snippet": [
            "        return lst.stream().filter(i -> i instanceof Integer p && p > 0 && p % 2 != 0).map(i -> (Integer) i * (Integer) i).reduce(Integer::sum).orElse(0);\n    }\n}"
        ],
        "simplified": "Given a list of numbers, return the sum of squares of the numbers in the list that are odd. Ignore numbers that are negative or not integers. If the input list is empty, return 0.",
        "task_id": "151",
        "43": "int result = 0;\n        if (lst == null) return result;\n        for (Float f : lst) {\n            if (f.isNaN() || f.isInfinite() || f < 0) continue;\n            int floor = (int) Math.floor(f);\n            if (floor % 2 == 1) result += floor * floor;\n        }\n        return result;",
        "grade-43": {
            "execution": 1
        },
        "6": "return lst.stream()\n                .filter(i -> (i % 2 == 1 && i > 0))\n                .mapToInt(Float::intValue)\n                .map(x -> x * x)\n                .sum();",
        "grade-6": {
            "execution": 1
        },
        "103": "int res = 0;\n        for (Float f : lst) {\n            if (f > 0 && f % 2 != 0) {\n                res += f * f;\n            }\n        }\n        return res;",
        "grade-103": {
            "execution": 1
        },
        "92": "int total = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            total += Math.pow(lst.get(i), 2);\n        }\n        return total;",
        "grade-92": {
            "execution": 0
        },
        "85": "int squareSum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            float num = lst.get(i);\n            if (num > 0 && num % 2 == 1) {\n                squareSum += Math.pow(num, 2);\n            }\n        }\n        return squareSum;",
        "grade-85": {
            "execution": 1
        },
        "53": "int sum = 0;\n        for (Float f : lst) {\n            if (f > 0 && (int)f == f) {\n                sum += f * f;\n            }\n        }\n        return sum;",
        "grade-53": {
            "execution": 0
        },
        "39": "// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n        // double_the_difference([-1, -2, 0]) == 0\n        // double_the_difference([9, -2]) == 81\n        // double_the_difference([0]) == 0\n        // If the input list is empty, return 0.\n        return 0;",
        "grade-39": {
            "execution": 0
        },
        "199": "//YOUR CODE HERE",
        "grade-199": {
            "execution": 0
        },
        "35": "int squares = 0;\n\t\tfor (float i : lst) {\n\t\t\tif (i >= 0 && i % 2 == 1) {\n\t\t\t\tsquares += i * i;\n\t\t\t}\n\t\t}\n\t\treturn squares;",
        "grade-35": {
            "execution": 1
        },
        "150": "// Your code here!",
        "grade-150": {
            "execution": 0
        },
        "9": "// Your Code Here\n        return 0;",
        "grade-9": {
            "execution": 0
        },
        "8": "int sum = 0;\n        int index = 0;\n        while (index < lst.size()) {\n            float num = lst.get(index);\n            // if num is integer (odd and positive)\n            if (num == (int) num && num > 0 && num % 2 == 1) {\n                sum += num * num;\n            }\n            index += 1;\n        }\n        return sum;",
        "grade-8": {
            "execution": 1
        },
        "36": "return \n            lst.stream()\n                .filter(x -> x % 2 != 0)\n                .filter(x -> x > 0)\n                .mapToInt(x -> (int) Math.pow(x, 2))\n                .sum();",
        "grade-36": {
            "execution": 1
        },
        "82": "return sumOfSquaresOfOdd(lst) - sumOfSquaresOfEven(lst);",
        "grade-82": {
            "execution": 0
        },
        "87": "// ArrayList lst;\n\t// Integer sum;\n\t// lst = new ArrayList();\n\t// sum = 0;\n\tint sum = 0;\n\tfor (float x : lst) {\n\t    if (x % 2 == 1) {\n\t\tsum += x * x;\n\t    }\n\t}\n\treturn sum;",
        "grade-87": {
            "execution": 1
        },
        "185": "// Iterate through the list and accumulate the sum of the squares\n        // of the numbers in the list that are odd.\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) % 2 == 1) {\n                sum += Math.pow(lst.get(i), 2);\n            }\n        }\n        return sum;",
        "grade-185": {
            "execution": 1
        },
        "77": "return 0;",
        "grade-77": {
            "execution": 0
        },
        "149": "return lst.stream()\n                .filter(n -> n % 2 != 0)\n                .mapToInt(n -> n.intValue())\n                .map(n -> n * n)\n                .sum();",
        "grade-149": {
            "execution": 0
        },
        "84": "// Note:  We want you to implement this without loops or recursion\n        // (i.e., using map, filter, fold, etc.).  It's a lot less code that way.\n        return 0;",
        "grade-84": {
            "execution": 0
        },
        "159": "double sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            float current = lst.get(i);\n            if (isPositiveInt(current)) {\n                if (isOdd(current)) {\n                    sum += Math.pow(current, 2);\n                }\n            }\n        }\n        return (int) (sum * 2);",
        "grade-159": {
            "execution": 0
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n    // If the string contains no letters, reverse the string.\n    // The function should return the resulted string.\n    // Examples\n    // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"#a@C\") = \"#A@c\"\n    public static String solve(String s) {\n",
        "snippet": [
            "        boolean flag = true;\n        StringBuilder new_string = new StringBuilder();\n        for (char i : s.toCharArray()) {\n            if (Character.isUpperCase(i)) {\n                new_string.append(Character.toLowerCase(i));\n                flag = false;\n            } else if (Character.isLowerCase(i)) {\n                new_string.append(Character.toUpperCase(i));\n                flag = false;\n            } else {\n                new_string.append(i);\n            }\n        }\n        if (flag) {\n            new_string.reverse();\n        }\n        return new_string.toString();\n    }\n}"
        ],
        "simplified": "You are given a string s. if s[i] is a letter, reverse its case from lower to upper or vise versa, otherwise keep it as it is. If the string contains no letters, reverse the string. The function should return the resulted string.",
        "task_id": "161",
        "168": "StringBuilder sb = new StringBuilder();\n        boolean letters = false;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n                letters = true;\n                c = Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c);\n            }\n            sb.append(c);\n        }\n        if (!letters) {\n            sb.reverse();\n        }\n        return sb.toString();",
        "grade-168": {
            "execution": 1
        },
        "28": "String tmp = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n                if (Character.isUpperCase(c)) {\n                    tmp += Character.toLowerCase(c);\n                } else {\n                    tmp += Character.toUpperCase(c);\n                }\n            } else {\n                tmp += c;\n            }\n        }\n        return tmp.isEmpty() ? new StringBuilder(s).reverse().toString() : tmp;",
        "grade-28": {
            "execution": 0
        },
        "6": "StringBuilder sb = new StringBuilder();\n        boolean hasLetters = false;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n                hasLetters = true;\n                if (Character.isUpperCase(c)) {\n                    sb.append(Character.toLowerCase(c));\n                } else {\n                    sb.append(Character.toUpperCase(c));\n                }\n            } else {\n                sb.append(c);\n            }\n        }\n        if (!hasLetters) {\n            return sb.reverse().toString();\n        }\n        return sb.toString();",
        "grade-6": {
            "execution": 1
        },
        "198": "char[] arr = s.toCharArray();\n        int n = arr.length;\n        boolean hasAlpha = false;\n        for (int i = 0; i < n; i++) {\n            if (Character.isAlphabetic(arr[i])) {\n                hasAlpha = true;\n                if (Character.isUpperCase(arr[i])) {\n                    arr[i] = Character.toLowerCase(arr[i]);\n                } else {\n                    arr[i] = Character.toUpperCase(arr[i]);\n                }\n            }\n        }\n        if (!hasAlpha) {\n            for (int i = 0; i < n/2; i++) {\n                char c = arr[i];\n                arr[i] = arr[n-i-1];\n                arr[n-i-1] = c;\n            }\n        }\n        return new String(arr);",
        "grade-198": {
            "execution": 1
        },
        "71": "if (s.length() == 0) {\n            return s;\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n                sb.append(Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c));\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();",
        "grade-71": {
            "execution": 0
        },
        "63": "// code goes here\n        if (s.length() == 0) return s;\n        char[] s_arr = s.toCharArray();\n        int n = s_arr.length;\n        boolean has_letter = false;\n        for (int i = 0; i < n; i++) {\n            if (Character.isLetter(s_arr[i])) {\n                has_letter = true;\n                if (Character.isUpperCase(s_arr[i])) s_arr[i] = Character.toLowerCase(s_arr[i]);\n                else s_arr[i] = Character.toUpperCase(s_arr[i]);\n            }\n        }\n        if (!has_letter) return new StringBuilder(s).reverse().toString();\n        return new String(s_arr);",
        "grade-63": {
            "execution": 1
        },
        "58": "if (s.isEmpty()) return s;\n        char[] ch = s.toCharArray();\n        int i = 0;\n        while (i < ch.length && !isLetter(ch[i])) i++;\n        if (i == ch.length) return new StringBuilder(s).reverse().toString();\n        for (int j = 0; j < ch.length; j++) {\n            if (isLetter(ch[j])) {\n                ch[j] = (char) (ch[j] ^ 32);\n            }\n        }\n        return new String(ch);",
        "grade-58": {
            "execution": 0
        },
        "35": "String ret = \"\";\n        String input = s;\n        String output = \"\";\n        boolean containsNoLetters = true;\n        for (int i = 0; i < input.length(); i++) {\n            if (Character.isLetter(input.charAt(i))) {\n                containsNoLetters = false;\n                if (Character.isUpperCase(input.charAt(i))) {\n                    ret += Character.toLowerCase(input.charAt(i));\n                } else {\n                    ret += Character.toUpperCase(input.charAt(i));\n                }\n            } else {\n                ret += input.charAt(i);\n            }\n        }\n        if (containsNoLetters) {\n            output = new StringBuilder(ret).reverse().toString();\n        } else {\n            output = ret;\n        }\n        return output;",
        "grade-35": {
            "execution": 1
        },
        "196": "if (s.matches(\"[a-zA-Z]*\"))\n            return s.toUpperCase();\n        else if (s.matches(\"[^a-zA-Z]*\"))\n            return new StringBuilder(s).reverse().toString();\n        else \n            return s.chars().mapToObj(c -> {\n                if (Character.isLetter(c))\n                    return Character.isUpperCase(c) ? \n                        Character.toLowerCase(c) : \n                        Character.toUpperCase(c);\n                else\n                    return (char) c;\n            }).map(c -> c.toString()).collect(Collectors.joining());",
        "grade-196": {
            "execution": 0
        },
        "26": "StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isAlphabetic(c)) {\n                if (Character.isUpperCase(c)) {\n                    sb.append(Character.toLowerCase(c));\n                } else {\n                    sb.append(Character.toUpperCase(c));\n                }\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();",
        "grade-26": {
            "execution": 0
        },
        "178": "StringBuilder sb = new StringBuilder();\n        if (s.chars().allMatch(Character::isDigit)) {\n            sb.append(s);\n            sb.reverse();\n            return sb.toString();\n        }\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isLetter(s.charAt(i))) {\n                if (Character.isUpperCase(s.charAt(i))) {\n                    sb.append(Character.toLowerCase(s.charAt(i)));\n                } else {\n                    sb.append(Character.toUpperCase(s.charAt(i)));\n                }\n            } else {\n                sb.append(s.charAt(i));\n            }\n        }\n        return sb.toString();",
        "grade-178": {
            "execution": 0
        },
        "141": "StringBuilder answer = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n                answer.append(Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c));\n            } else {\n                answer.append(c);\n            }\n        }\n        if (answer.toString().equals(s)) {\n            return answer.reverse().toString();\n        }\n        return answer.toString();",
        "grade-141": {
            "execution": 1
        },
        "22": "// TODO: add your code here\n        return null;",
        "grade-22": {
            "execution": 0
        },
        "153": "String[] arr = s.split(\"\");\n        String newString = \"\";\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i].equals(arr[i].toUpperCase())) {\n                newString += arr[i].toLowerCase();\n            } else if (arr[i].equals(arr[i].toLowerCase())) {\n                newString += arr[i].toUpperCase();\n            } else {\n                newString += arr[i];\n            }\n        }\n        return newString;",
        "grade-153": {
            "execution": 0
        },
        "109": "int len = s.length();\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < len; i++) {\n            char ch = s.charAt(i);\n            if (Character.isLetter(ch)) {\n                if (Character.isUpperCase(ch)) {\n                    sb.append(Character.toLowerCase(ch));\n                } else {\n                    sb.append(Character.toUpperCase(ch));\n                }\n            } else {\n                sb.append(ch);\n            }\n        }\n        return (len == sb.length()) ? sb.reverse().toString() : sb.toString();",
        "grade-109": {
            "execution": 0
        },
        "8": "// edge cases\n        if (s.equals(\"\")) {\n            return \"\";\n        }\n\n        // solution\n        StringBuilder sb = new StringBuilder();\n        boolean containsLetters = false;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isLetter(s.charAt(i))) {\n                containsLetters = true;\n                if (Character.isUpperCase(s.charAt(i))) {\n                    sb.append(Character.toLowerCase(s.charAt(i)));\n                } else {\n                    sb.append(Character.toUpperCase(s.charAt(i)));\n                }\n            } else {\n                sb.append(s.charAt(i));\n            }\n        }\n        if (!containsLetters) {\n            return sb.reverse().toString();\n        }\n        return sb.toString();",
        "grade-8": {
            "execution": 1
        },
        "7": "StringBuilder sb = new StringBuilder();\n        String regex = \"[a-zA-Z]\";\n        Pattern p = Pattern.compile(regex);\n        if (s.equals(\"\")) return \"\";\n        boolean hasLetters = false;\n        int i = 0;\n        while (!hasLetters && i < s.length()) {\n            hasLetters = p.matcher(s.substring(i, i + 1)).matches();\n            i++;\n        }\n        if (!hasLetters) return new StringBuilder(s).reverse().toString();\n        for (char c : s.toCharArray()) {\n            if (p.matcher(c + \"\").matches()) {\n                if (Character.isUpperCase(c)) sb.append(Character.toLowerCase(c));\n                else sb.append(Character.toUpperCase(c));\n            } else sb.append(c);\n        }\n        return sb.toString();",
        "grade-7": {
            "execution": 0
        },
        "23": "String result = \"\";\n        boolean isLetter = false;\n        //\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isLetter(s.charAt(i))) {\n                result += Character.toLowerCase(s.charAt(i));\n                isLetter = true;\n            } else {\n                result += s.charAt(i);\n            }\n        }\n        if (isLetter) {\n            return result.toUpperCase();\n        } else {\n            return new StringBuilder(result).reverse().toString();\n        }",
        "grade-23": {
            "execution": 0
        },
        "56": "// Write your code here\n        if (s.length() == 0) return s;\n        boolean isLetter = false;\n        char[] arr = s.toCharArray();\n        for (int i = 0; i < arr.length; i++) {\n            if (Character.isLetter(arr[i])) {\n                isLetter = true;\n                break;\n            }\n        }\n        if (!isLetter) {\n            for (int i = 0; i < arr.length / 2; i++) {\n                char temp = arr[i];\n                arr[i] = arr[arr.length - 1 - i];\n                arr[arr.length - 1 - i] = temp;\n            }\n        } else {\n            for (int i = 0; i < arr.length; i++) {\n                if (Character.isLetter(arr[i])) {\n                    if (Character.isUpperCase(arr[i])) arr[i] = Character.toLowerCase(arr[i]);\n                    else arr[i] = Character.toUpperCase(arr[i]);\n                }\n            }\n        }\n        return new String(arr);",
        "grade-56": {
            "execution": 1
        },
        "60": "StringBuilder sb = new StringBuilder();\n        int cnt = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char ch = s.charAt(i);\n            if (ch >= 'a' && ch <= 'z') {\n                sb.append((char)(ch + 'A' - 'a'));\n                cnt++;\n            } else if (ch >= 'A' && ch <= 'Z') {\n                sb.append((char)(ch + 'a' - 'A'));\n                cnt++;\n            } else {\n                sb.append(ch);\n            }\n        }\n        return cnt > 0 ? sb.toString() : new StringBuilder(s).reverse().toString();",
        "grade-60": {
            "execution": 1
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a list of positive integers x. return a sorted list of all \n    // elements that hasn't any even digit.\n    // Note: Returned list should be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15, 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422, 10])\n    // []\n    public static ArrayList<Integer> uniqueDigits(ArrayList<Integer> x) {\n",
        "snippet": [
            "        List<Integer> odd_digit_elements = new ArrayList<>();\n        for (int i : x) {\n            boolean is_unique = true;\n            for (char c : String.valueOf(i).toCharArray()) {\n                if ((c - '0') % 2 == 0) {\n                    is_unique = false;\n                    break;\n                }\n            }\n            if (is_unique) {\n                odd_digit_elements.add(i);\n            }\n        }\n        Collections.sort(odd_digit_elements);\n        return odd_digit_elements;\n    }\n}"
        ],
        "simplified": "Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit. Note: Returned list should be sorted in increasing order.",
        "task_id": "104",
        "195": "return x.stream()\n            .filter(i -> Stream.of(i.toString().split(\"\"))\n                .allMatch(s -> Integer.parseInt(s) % 2 == 1))\n            .sorted()\n            .collect(Collectors.toCollection(ArrayList::new));",
        "grade-195": {
            "execution": 1
        },
        "31": "ArrayList<Integer> res = new ArrayList<Integer>();\n        for (int i = 0; i < x.size(); i++) {\n            if (check(x.get(i))) {\n                res.add(x.get(i));\n            }\n        }\n        Collections.sort(res);\n        return res;",
        "grade-31": {
            "execution": 0
        },
        "7": "throw new RuntimeException(\"Not implemented\");",
        "grade-7": {
            "execution": 0
        },
        "85": "ArrayList<Integer> ret = new ArrayList<Integer>();\n        for (int i = 0; i < x.size(); i++) {\n            if (isUniqueDigits(x.get(i))) {\n                ret.add(x.get(i));\n            }\n        }\n        Collections.sort(ret);\n        return ret;",
        "grade-85": {
            "execution": 0
        },
        "76": "ArrayList<Integer> res = new ArrayList<Integer>();\n        for (int i : x) {\n            String val = String.valueOf(i);\n            if (val.length() == 1) {\n                res.add(i);\n            } else {\n                boolean flag = true;\n                for (int j = 0; j < val.length(); j++) {\n                    if (val.charAt(j) % 2 == 0) {\n                        flag = false;\n                        break;\n                    }\n                }\n                if (flag) {\n                    res.add(i);\n                }\n            }\n        }\n        Collections.sort(res);\n        return res;",
        "grade-76": {
            "execution": 1
        },
        "70": "return x.stream()\n            .filter(i -> Integer.toString(i).chars().allMatch(c -> (c-'0')%2 == 1))\n            .sorted()\n            .collect(Collectors.toCollection(ArrayList::new));",
        "grade-70": {
            "execution": 1
        },
        "40": "ArrayList<Integer> uniqueDigitsList = new ArrayList<Integer>();\n        for (int i = 0; i < x.size(); i++) {\n            String str = x.get(i).toString();\n            if (!str.contains(\"2\") && !str.contains(\"4\") && !str.contains(\"6\") && !str.contains(\"8\")) {\n                uniqueDigitsList.add(x.get(i));\n            }\n        }\n        Collections.sort(uniqueDigitsList);\n        return uniqueDigitsList;",
        "grade-40": {
            "execution": 0
        },
        "29": "// YOUR CODE HERE\n      ArrayList<Integer> ans = new ArrayList<Integer>();\n      for (int i = 0; i < x.size(); i++) {\n        if (isUnique(x.get(i))) {\n          ans.add(x.get(i));\n        }\n      }\n      Collections.sort(ans);\n      return ans;",
        "grade-29": {
            "execution": 0
        },
        "166": "ArrayList<Integer> list = new ArrayList<Integer>();\n        for (int i = 0; i < x.size(); i++) {\n            if (x.get(i) < 10) {\n                list.add(x.get(i));\n            } else if (x.get(i) >= 10 && x.get(i) < 100) {\n                if (x.get(i) % 2 != 0) {\n                    list.add(x.get(i));\n                }\n            } else if (x.get(i) >= 100 && x.get(i) < 1000) {\n                if (x.get(i) % 2 != 0 && x.get(i) % 10 != 0) {\n                    list.add(x.get(i));\n                }\n            } else if (x.get(i) >= 1000 && x.get(i) < 10000) {\n                if (x.get(i) % 2 != 0 && x.get(i) % 10 != 0 && x.get(i) % 100 != 0) {\n                    list.add(x.get(i));\n                }\n            } else if (x.get(i) >= 10000 && x.get(i) < 100000) {\n                if (x.get(i) % 2 != 0 && x.get(i) % 10 != 0 && x.get(i) % 100 != 0 && x.get(i) % 1000 != 0) {\n                    list.add(x.get(i));\n                }\n            } else if (x.get(i) >= 100000 && x.get(i) < 1000000) {\n                if (x.get(i) % 2 != 0 && x.get(i) % 10 != 0 && x.get(i) % 100 != 0 && x.get(i) % 1000 != 0 && x.get(i) % 10000 != 0) {\n                    list.add(x.get(i));\n                }\n            } else if (x.get(i) >= 1000000 && x.get(i) < 10000000) {\n                if (x.get(i) % 2 != 0 && x.get(i) % 10 != 0 && x.get(i)",
        "grade-166": {
            "execution": 0
        },
        "24": "ArrayList<Integer> out = new ArrayList<Integer>();\n        for (int i = 0; i < x.size(); i++) {\n            int num = x.get(i);\n            String s = String.valueOf(num);\n            if (s.contains(\"2\") || s.contains(\"4\") || s.contains(\"6\") || s.contains(\"8\") || s.contains(\"0\")) {\n                continue;\n            }\n            out.add(num);\n        }\n        Collections.sort(out);\n        return out;",
        "grade-24": {
            "execution": 1
        },
        "178": "ArrayList<Integer> res = new ArrayList<Integer>();\n        for (int i=0; i<x.size(); i++) {\n            int y = x.get(i);\n            while (y > 0) {\n                int t = y % 10;\n                if (t % 2 == 0) break;\n                y /= 10;\n            }\n            if (y == 0) res.add(x.get(i));\n        }\n        Collections.sort(res);\n        return res;",
        "grade-178": {
            "execution": 1
        },
        "129": "return x.stream()\n                .filter(xx -> (xx.toString().chars().filter(y -> (y % 2 == 0)).count() == 0))\n                .collect(Collectors.toCollection(ArrayList::new));",
        "grade-129": {
            "execution": 0
        },
        "9": "x.removeIf(\n            e -> e.toString().matches(\".*[02468].*\")\n        );\n        return x;",
        "grade-9": {
            "execution": 0
        },
        "8": "ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int a : x) {\n            boolean all_odd = true;\n            String s = String.valueOf(a);\n            for (int i = 0; i < s.length(); i++) {\n                if (Integer.parseInt(s.substring(i, i + 1)) % 2 == 0) {\n                    all_odd = false;\n                    break;\n                }\n            }\n            if (all_odd) {\n                result.add(a);\n            }\n        }\n        Collections.sort(result);\n        return result;",
        "grade-8": {
            "execution": 1
        },
        "25": "ArrayList<Integer> res = new ArrayList<Integer>();\n        for (int i = 0; i < x.size(); i++) {\n            boolean foundEven = false;\n            for (char c : Integer.toString(x.get(i)).toCharArray()) {\n                if (Character.getNumericValue(c) % 2 == 0) {\n                    foundEven = true;\n                    break;\n                }\n            }\n            if (!foundEven) {\n                res.add(x.get(i));\n            }\n        }\n        Collections.sort(res);\n        return res;",
        "grade-25": {
            "execution": 1
        },
        "68": "ArrayList<Integer> res = new ArrayList<Integer>();\n        for (int i : x) {\n            String s = String.valueOf(i);\n            char[] ch = s.toCharArray();\n            boolean hasEven = false;\n            for (char c : ch) {\n                if (c % 2 == 0) {\n                    hasEven = true;\n                    break;\n                }\n            }\n            if (!hasEven) {\n                res.add(i);\n            }\n        }\n        Collections.sort(res);\n        return res;",
        "grade-68": {
            "execution": 1
        },
        "72": "return x.stream()\n                .filter(Problem::isUniqueDigits)\n                .sorted()\n                .collect(Collectors.toCollection(ArrayList::new));",
        "grade-72": {
            "execution": 0
        },
        "154": "// your code here...",
        "grade-154": {
            "execution": 0
        },
        "183": "/*\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        x.forEach(number -> {\n            String numberString = number.toString();\n            ArrayList<Integer> digits = new ArrayList<Integer>();\n            for (char digit : numberString.toCharArray()) {\n                digits.add(Character.getNumericValue(digit));\n            }\n            boolean isDigitUnique = true;\n            for (int digit : digits) {\n                if (digit % 2 == 0) {\n                    isDigitUnique = false;\n                    break;\n                }\n            }\n            if (isDigitUnique) {\n                result.add(number);\n            }\n        });\n        Collections.sort(result);\n        return result;\n        */\n        return x.stream()\n                .map(number -> {\n                    String numberString = number.toString();\n                    ArrayList<Integer> digits = new ArrayList<Integer>();\n                    for (char digit : numberString.toCharArray()) {\n                        digits.add(Character.getNumericValue(digit));\n                    }\n                    boolean isDigitUnique = true;\n                    for (int digit : digits) {\n                        if (digit % 2 == 0) {\n                            isDigitUnique = false;\n                            break;\n                        }\n                    }\n                    if (isDigitUnique) {\n                        return Optional.of(number);\n                    } else {\n                        return Optional.empty();\n                    }\n                })\n                .filter(optional -> optional.isPresent())\n                .map(optional -> optional.get())\n                .sorted()\n                .collect(Collectors.toCollection(ArrayList::new));",
        "grade-183": {
            "execution": 0
        },
        "170": "ArrayList<Integer> res = new ArrayList<Integer>();\n        for (int i : x) {\n            int y = i;\n            boolean found = false;\n            while (y > 0) {\n                int digit = y % 10;\n                if (digit % 2 == 0) {\n                    found = true;\n                    break;\n                }\n                y /= 10;\n            }\n            if (!found) {\n                res.add(i);\n            }\n        }\n        Collections.sort(res);\n        return res;",
        "grade-170": {
            "execution": 1
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string representing a space separated lowercase letters, return a dictionary\n    // of the letter with the most repetition and containing the corresponding count.\n    // If several letters have the same occurrence, return all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer> histogram(String test) {\n",
        "snippet": [
            "        Map<String, Integer> dict1 = new HashMap<>();\n        List<String> list1 = Arrays.asList(test.split(\" \" ));\n        int t = 0;\n        for (String i : list1) {\n            if (Collections.frequency(list1, i) > t && !i.isEmpty()) {\n                t = Collections.frequency(list1, i);\n            }\n        }\n        if (t > 0) {\n            for (String i : list1) {\n                if (Collections.frequency(list1, i) == t) {\n                    dict1.put(i, t);\n                }\n            }\n        }\n        return dict1;\n    }\n}"
        ],
        "simplified": "Given a string representing a space separated lowercase letters, return a dictionary of the letter with the most repetition and containing the corresponding count. If several letters have the same occurrence, return all of them.",
        "task_id": "111",
        "185": "HashMap<String,Integer> result = new HashMap<String,Integer>();\n        if (test.isEmpty()) {\n            return result;\n        }\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (result.containsKey(word)) {\n                result.put(word, result.get(word) + 1);\n            } else {\n                result.put(word, 1);\n            }\n        }\n        return result;",
        "grade-185": {
            "execution": 0
        },
        "29": "HashMap<String,Integer> result = new HashMap<String,Integer>();\n        // parse the input string into a token list\n        String[] tokens = test.split(\"\\\\s+\");\n        // now iterate through the token list\n        for (String token : tokens) {\n            // and add to the result set\n            result.merge(token, 1, Integer::sum);\n        }\n        return result;",
        "grade-29": {
            "execution": 0
        },
        "6": "if (test.length() == 0) return new HashMap<String,Integer>();\n        HashMap<String,Integer> count = new HashMap<String,Integer>();\n        Arrays.stream(test.split(\" \")).forEach(x -> {\n            count.put(x,count.getOrDefault(x,0)+1);\n        });\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n        int max = Collections.max(count.values());\n        for (Map.Entry<String,Integer> e : count.entrySet()) {\n            if (e.getValue() == max) result.put(e.getKey(),e.getValue());\n        }\n        return result;",
        "grade-6": {
            "execution": 1
        },
        "72": "// Implement the solution\n        return null;",
        "grade-72": {
            "execution": 0
        },
        "64": "HashMap<String,Integer> result = new HashMap<String,Integer>();\n        HashMap<String,Integer> occurences = new HashMap<String,Integer>();\n        String[] testArr = test.split(\" \");\n        for (String s : testArr) {\n            Integer count = occurences.get(s);\n            if (count == null) {\n                occurences.put(s, 1);\n            } else {\n                occurences.put(s, count + 1);\n            }\n        }\n        if (occurences.size() == 0) {\n            return result;\n        }\n        Integer max = Collections.max(occurences.values());\n        for (String s : occurences.keySet()) {\n            if (occurences.get(s) == max) {\n                result.put(s, max);\n            }\n        }\n        return result;",
        "grade-64": {
            "execution": 0
        },
        "58": "HashMap<String,Integer> histogram = new HashMap<String,Integer>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            histogram.put(word, histogram.getOrDefault(word, 0) + 1);\n        }\n        int most = histogram.values().stream().max(Integer::compare).get();\n        ArrayList<String> letters = new ArrayList<String>();\n        for (String key : histogram.keySet()) {\n            if (histogram.get(key) == most) {\n                letters.add(key);\n            }\n        }\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n        for (String letter : letters) {\n            result.put(letter, most);\n        }\n        return result;",
        "grade-58": {
            "execution": 0
        },
        "36": "HashMap<String,Integer> map = new HashMap<String,Integer>();\n        String[] parts = test.split(\" \");\n        for (String part : parts) {\n            map.put(part, map.getOrDefault(part, 0) + 1);\n        }\n        return map;",
        "grade-36": {
            "execution": 0
        },
        "27": "String[] letters = test.split(\" \");\n        HashMap<String,Integer> histogram = new HashMap<String,Integer>();\n        for (String letter : letters) {\n            if (histogram.containsKey(letter)) {\n                histogram.put(letter, histogram.get(letter) + 1);\n            } else {\n                histogram.put(letter, 1);\n            }\n        }\n        return histogram;",
        "grade-27": {
            "execution": 0
        },
        "197": "HashMap<String,Integer> freq = new HashMap<String,Integer>();\n        for (String letter : test.split(\" \")) {\n            if (freq.containsKey(letter)) {\n                freq.put(letter, freq.get(letter) + 1);\n            } else {\n                freq.put(letter, 1);\n            }\n        }\n        return freq;",
        "grade-197": {
            "execution": 0
        },
        "155": "return Arrays.stream(test.split(\" \"))\n            .collect(Collectors.groupingBy(s -> s,\n                () -> new HashMap<String,Integer>(),\n                Collectors.reducing(0, e -> 1, Integer::sum)));",
        "grade-155": {
            "execution": 0
        },
        "23": "// Insert your code here...\n        return null;",
        "grade-23": {
            "execution": 0
        },
        "169": "HashMap<String,Integer> result = new HashMap<String,Integer>();\n        for (String word : test.split(\" \")) {\n            if (result.containsKey(word)) {\n                result.put(word,result.get(word)+1);\n            } else {\n                result.put(word,1);\n            }\n        }\n        return result;",
        "grade-169": {
            "execution": 0
        },
        "116": "HashMap<String,Integer> result = new HashMap<String,Integer>();\n        for (String s : test.split(\" \")) {\n            if (result.containsKey(s)) {\n                result.put(s, result.get(s) + 1);\n            } else {\n                result.put(s, 1);\n            }\n        }\n        return result;",
        "grade-116": {
            "execution": 0
        },
        "8": "var split = test.split(\" \");\n        var dict = new HashMap<String,Integer>();\n        for (var i=0; i<split.length; i++) {\n            var c = split[i];\n            if (dict.containsKey(c))\n                dict.put(c, dict.get(c) + 1);\n            else\n                dict.put(c, 1);\n        }\n        var max = Arrays.stream(split).mapToInt(s -> dict.get(s)).max().getAsInt();\n        var filtered = dict.entrySet().stream().filter(e -> e.getValue() == max).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n        return new HashMap<String,Integer>(filtered);",
        "grade-8": {
            "execution": 0
        },
        "7": "HashMap<String,Integer> res = new HashMap<String,Integer>();\n        String[] letters = test.split(\" \");\n        int[] nums = new int[26];\n        for (int i = 0; i < letters.length; i++) {\n            nums[letters[i].charAt(0) - 'a']++;\n        }\n        int max = 0;\n        for (int i = 0; i < nums.length; i++) {\n            if (nums[i] > max) max = nums[i];\n        }\n        for (int i = 0; i < nums.length; i++) {\n            if (nums[i] == max) res.put(String.valueOf((char)(i + 'a')), nums[i]);\n        }\n        return res;",
        "grade-7": {
            "execution": 0
        },
        "24": "HashMap<String,Integer> map = new HashMap<String,Integer>();\n        List<String> list = new ArrayList<String>(Arrays.asList(test.split(\" \")));\n        for (String str : list) {\n            if (map.containsKey(str))\n                map.put(str, map.get(str) + 1);\n            else\n                map.put(str, 1);\n        }\n        return map;",
        "grade-24": {
            "execution": 0
        },
        "56": "HashMap<String,Integer> hist = new HashMap<String,Integer>();\n        String[] testList = test.split(\" \");\n        // Implement algorithm here\n        return hist;",
        "grade-56": {
            "execution": 0
        },
        "60": "String[] tokens = test.split(\" \");\n        HashMap<String,Integer> answer = new HashMap<String,Integer>();\n        for (String token : tokens) {\n            Integer count = answer.get(token);\n            if (count == null) count = 0;\n            answer.put(token, count + 1);\n        }\n        return answer;",
        "grade-60": {
            "execution": 0
        },
        "143": "HashMap<String,Integer> histogram = new HashMap<String,Integer>();\n        String[] letters = test.split(\" \");\n        for (String l : letters) {\n            histogram.put(l, histogram.getOrDefault(l, 0) + 1);\n        }\n        return histogram;",
        "grade-143": {
            "execution": 0
        },
        "172": "HashMap<String,Integer> res = new HashMap<String,Integer>();\n        HashMap<String,Integer> freq = new HashMap<String,Integer>();\n        HashMap<Integer,ArrayList<String>> freq_to_key = new HashMap<Integer,ArrayList<String>>();\n        int max = -1;\n        if (test == null || test.length() == 0) return res;\n        String[] words = test.split(\" \");\n        for (String w : words) {\n            if (freq.containsKey(w)) {\n                freq.put(w, freq.get(w) + 1);\n            } else {\n                freq.put(w, 1);\n            }\n            if (freq.get(w) > max) {\n                max = freq.get(w);\n            }\n        }\n        for (String key : freq.keySet()) {\n            int value = freq.get(key);\n            if (freq_to_key.containsKey(value)) {\n                freq_to_key.get(value).add(key);\n            } else {\n                ArrayList<String> newlist = new ArrayList<String>();\n                newlist.add(key);\n                freq_to_key.put(value, newlist);\n            }\n        }\n        if (freq_to_key.containsKey(max)) {\n            for (String key : freq_to_key.get(max)) {\n                res.put(key, max);\n            }\n        }\n        return res;",
        "grade-172": {
            "execution": 1
        }
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Filter an input list of strings only for ones that contain given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    // >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc', 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String> strings, String substring) {\n",
        "snippet": [
            "        List<String> result = new ArrayList<>();\n        for (String x : strings) {\n            if (x.contains(substring)) {\n                result.add(x);\n            }\n        }\n        return result;\n    }\n}"
        ],
        "simplified": "Filter an input list of strings only for ones that contain given substring",
        "task_id": "7",
        "133": "ArrayList<String> arr = new ArrayList<String>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                arr.add(s);\n            }\n        }\n        return arr;",
        "grade-133": {
            "execution": 1
        },
        "16": "ArrayList<String> filteredStrings = new ArrayList<String>();\n        for (String string : strings) {\n            if (string.contains(substring)) {\n                filteredStrings.add(string);\n            }\n        }\n        return filteredStrings;",
        "grade-16": {
            "execution": 1
        },
        "3": "ArrayList<String> results = new ArrayList<String>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                results.add(str);\n            }\n        }\n        return results;",
        "grade-3": {
            "execution": 1
        },
        "156": "// TODO: write your code here\n        ArrayList<String> result = new ArrayList<String>();\n        for (String word : strings) {\n            if (word.contains(substring)) {\n                result.add(word);\n            }\n        }\n        return result;",
        "grade-156": {
            "execution": 1
        },
        "47": "throw new UnsupportedOperationException(\"Not implemented\");",
        "grade-47": {
            "execution": 0
        },
        "37": "// Implement your solution here\n        ArrayList<String> ret = new ArrayList<String>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                ret.add(str);\n            }\n        }\n        return ret;",
        "grade-37": {
            "execution": 1
        },
        "32": "ArrayList<String> res = new ArrayList<String>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                res.add(str);\n            }\n        }\n        return res;",
        "grade-32": {
            "execution": 1
        },
        "20": "ArrayList<String> ret = new ArrayList<String>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                ret.add(s);\n            }\n        }\n        return ret;",
        "grade-20": {
            "execution": 1
        },
        "15": "ArrayList<String> filteredStrings = new ArrayList<String>();\n        // >>>>> Your code here.\n        int index = 0;\n        while (index < strings.size()) {\n            String string = strings.get(index);\n            int stringIndex = 0;\n            while (stringIndex < string.length()) {\n                if (string.charAt(stringIndex) == substring.charAt(0)) {\n                    if (string.contains(substring)) {\n                        filteredStrings.add(string);\n                        break;\n                    }\n                }\n                stringIndex++;\n            }\n            index++;\n        }\n        // <<<<< End of your code.\n        return filteredStrings;",
        "grade-15": {
            "execution": 1
        },
        "140": "//BEGIN_SOLUTION\n        return strings.stream()\n                      .filter(s -> s.contains(substring))\n                      .collect(Collectors.toCollection(ArrayList::new));\n        //END_SOLUTION",
        "grade-140": {
            "execution": 1
        },
        "99": "// Use an arraylist to keep track of the results\n        ArrayList<String> results = new ArrayList<String>();\n        // For each string in strings...\n        for (String str : strings) {\n            // If the string contains substring, add it to results\n            if (str.contains(substring)) {\n                results.add(str);\n            }\n        }\n        // Return the results\n        return results;",
        "grade-99": {
            "execution": 1
        },
        "13": "ArrayList<String> ret = new ArrayList<String>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                ret.add(str);\n            }\n        }\n        return ret;",
        "grade-13": {
            "execution": 1
        },
        "117": "ArrayList<String> arr = new ArrayList<String>();\n        for (String string : strings) {\n            if (string.contains(substring)) {\n                arr.add(string);\n            }\n        }\n        return arr;",
        "grade-117": {
            "execution": 1
        },
        "80": "// SOLUTION\n        return new ArrayList<String>();",
        "grade-80": {
            "execution": 0
        },
        "6": "ArrayList<String> list = new ArrayList<String>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                list.add(s);\n            }\n        }\n        return list;",
        "grade-6": {
            "execution": 1
        },
        "31": "ArrayList<String> output = new ArrayList<String>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                output.add(str);\n            }\n        }\n        return output;",
        "grade-31": {
            "execution": 1
        },
        "33": "ArrayList<String> results = new ArrayList<String>();\n        // TODO: Your code here\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                results.add(s);\n            }\n        }\n        return results;",
        "grade-33": {
            "execution": 1
        },
        "92": "ArrayList<String> out = new ArrayList<String>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                out.add(s);\n            }\n        }\n        return out;",
        "grade-92": {
            "execution": 1
        },
        "120": "// TODO: Finish this function\n        ArrayList<String> filtered = new ArrayList<String>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                filtered.add(s);\n            }\n        }\n        return filtered;",
        "grade-120": {
            "execution": 1
        },
        "107": "return strings;",
        "grade-107": {
            "execution": 0
        }
    }
]