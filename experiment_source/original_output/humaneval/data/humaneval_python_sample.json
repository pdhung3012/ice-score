[
    {
        "intent": "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    \"\"\"\n",
        "snippet": [
            "    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n"
        ],
        "simplified": "Create a function that takes a value (string) representing a number and returns the closest integer to it. If the number is equidistant from two integers, round it away from zero.",
        "task_id": "99",
        "141": "pass",
        "grade-141": {
            "execution": 0
        },
        "20": "if value[-1] == \"5\":\n        return round(float(value))\n    else:\n        return int(round(float(value)))",
        "grade-20": {
            "execution": 0
        },
        "4": "return int(round(float(value)))",
        "grade-4": {
            "execution": 0
        },
        "166": "value = Decimal(value)\n    # Get the floor and ceiling of the input value\n    floor, ceiling = value.quantize(1, rounding=ROUND_FLOOR), value.quantize(1, rounding=ROUND_CEILING)\n    # If the input value is equidistant from both the floor and ceiling\n    # use the floor if it is positive and the ceiling if it is negative\n    if ceiling - value == value - floor:\n        return floor if floor >= 0 else ceiling\n    # Otherwise, use the closest one\n    return int(floor if value - floor < ceiling - value else ceiling)\n\n\n@pytest.mark.parametrize(\n    \"test_input,expected\",\n    [\n        # Exact\n        (\"10\", 10),\n        (\"15.3\", 15),\n        # Rounding away from zero\n        (\"14.5\", 15),\n        (\"-14.5\", -15),\n        # Rounding toward zero\n        (\"14.1\", 14),\n        (\"-14.1\", -14),\n        # Rounding\n        (\"11.5\", 12),\n        (\"-11.5\", -12),\n        # Max/min\n        (\"2147483647\", 2147483647),\n        (\"-2147483648\", -2147483648),\n    ],\n)",
        "grade-166": {
            "execution": 0
        },
        "49": "# your code here\n    if value[-1] not in [\"5\", \"0\"]:\n        if float(value) - int(value) > 0.5:\n            return int(value) + 1\n        else:\n            return int(value)\n    elif value[-1] == \"5\":\n        if float(value) - int(value) >= 0.5:\n            return int(value) + 1\n        else:\n            return int(value)\n    else:\n        return int(value)",
        "grade-49": {
            "execution": 0
        },
        "44": "return round(float(value))",
        "grade-44": {
            "execution": 0
        },
        "40": "dec_part = float(value) - int(value)\n    return int(value) + (1 if dec_part >= 0.5 else 0)",
        "grade-40": {
            "execution": 0
        },
        "26": "string_value = str(value)\n    dots = [i for i, char in enumerate(string_value) if char == \".\"]\n    if len(dots) == 0:\n        return int(value)\n    else:\n        first_dot = dots[0]\n        second_dot = dots[1]\n        last_digit = first_dot + 1\n        last_digit_value = int(string_value[last_digit])\n        return (\n            int(string_value[:first_dot])\n            if last_digit_value < 5\n            else int(string_value[:first_dot]) + 1\n        )",
        "grade-26": {
            "execution": 0
        },
        "18": "return int(round(float(value)))\n\n\n@pytest.mark.parametrize(\"test_input,expected\", [\n    ('10', 10),\n    ('15.3', 15),\n    ('-14.5', -15),\n    ('-14.3', -14),\n    ('14.8', 15),\n    ('14.5', 15),\n    ('-14.5', -15),\n    ('-14.3', -14),\n    ('1.6180339887498948482', 2),\n    ('1.6180339887498948482', 2),\n    ('1.6180339887498948482', 2),\n    ('1.6180339887498948482', 2),\n    ('1.6180339887498948482', 2),\n    ('1.6180339887498948482', 2),\n    ('1.6180339887498948482', 2),\n    ('1.6180339887498948482', 2),\n    ('1.6180339887498948482', 2),\n    ('1.6180339887498948482', 2),\n    ('1.6180339887498948482', 2),\n    ('1.6180339887498948482', 2),\n    ('1.6180339887498948482', 2),\n    ('1.6180339887498948482', 2),\n    ('1.6180339887498948482', 2),\n    ('1.6180339887498948482', 2),\n    ('1.6180339887498948482', 2),\n    ('1.6180339887498948482', 2),\n    ('1.6180339887498948482', 2),\n    ('1.6180339887498948482', 2),\n    ('1.6180339887498948482', 2),\n    ('1.6180339887498948482', 2),\n    ('1.6180339887498948482', 2),\n    ('1.6180339887498948482', 2),\n    ('1.6180339887498948482', 2),\n    ('",
        "grade-18": {
            "execution": 0
        },
        "153": "number = float(value)\n    floor = math.floor(number)\n    ceil = math.ceil(number)\n    if ceil - number < number - floor:\n        return ceil\n    return floor",
        "grade-153": {
            "execution": 0
        },
        "117": "if value[-1] in (\"5\", \"6\", \"7\", \"8\", \"9\"):\n        return int(value) + 1\n    return int(value)",
        "grade-117": {
            "execution": 0
        },
        "15": "if \".\" in value:\n        if value[-1] in \"56789\":\n            return int(value.replace(\".\", \"\")) + 1\n        else:\n            return int(value.replace(\".\", \"\"))\n    else:\n        return int(value)",
        "grade-15": {
            "execution": 0
        },
        "124": "if '.' in value:\n        value = value.split('.')\n        num = int(value[0])\n        if len(value[1]) > 1:\n            num += 1 if value[1][1] >= '5' else 0\n        else:\n            num += 0.5 if value[1][0] >= '5' else 0\n    else:\n        num = int(value)\n    return num",
        "grade-124": {
            "execution": 0
        },
        "82": "try:\n        value = float(value)\n    except ValueError:\n        raise\n    if value > 0:\n        closest_int = math.ceil(value)\n    else:\n        closest_int = math.floor(value)\n    return closest_int",
        "grade-82": {
            "execution": 0
        },
        "5": "pass",
        "grade-5": {
            "execution": 0
        },
        "39": "try:\n        return round(float(value))\n    except ValueError:\n        return None",
        "grade-39": {
            "execution": 0
        },
        "41": "try:\n        value = float(value)\n    except ValueError:\n        return None\n    if value < 0:\n        return int(math.ceil(value))\n    return int(math.floor(value))",
        "grade-41": {
            "execution": 0
        },
        "108": "try:\n        return int(round(float(value)))\n    except ValueError:\n        return None",
        "grade-108": {
            "execution": 0
        },
        "132": "round_value = round(float(value))\n    return int(round_value)",
        "grade-132": {
            "execution": 0
        },
        "120": "value = float(value)\n    if value % 1 == 0:\n        return int(value)\n    else:\n        return value // 1 + (value > 0)",
        "grade-120": {
            "execution": 0
        }
    },
    {
        "intent": "def fix_spaces(text: str) -> str:\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n",
        "snippet": [
            "    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n"
        ],
        "simplified": "Given a string text, replace all spaces in it with underscores, and if a string has more than 2 consecutive spaces, then replace all consecutive spaces with -",
        "task_id": "140",
        "174": "num_of_spaces = text.count(\" \")\n    if num_of_spaces == 0:\n        return text\n    elif num_of_spaces == 1:\n        return text.replace(\" \", \"_\")\n    else:\n        return re.sub(r' +', '-', text.replace(\" \", \"_\"))",
        "grade-174": {
            "execution": 0
        },
        "28": "text = text.replace(\" \", \"_\")\n    text = text.replace(\"_ \", \"_\")\n    text = text.replace(\"_ _\", \"_\")\n    text = text.replace(\"  \", \" \")\n    text = text.replace(\" \", \"-\")\n    return text",
        "grade-28": {
            "execution": 0
        },
        "6": "return re.sub(r'\\s\\s+', '-', re.sub(r'\\s', '_', text))",
        "grade-6": {
            "execution": 0
        },
        "72": "return re.sub(r'(  +)', r'-', re.sub(r'( )', r'_', text))",
        "grade-72": {
            "execution": 0
        },
        "64": "return text.replace(\" \", \"_\").replace(\"  \", \"-\")\nprint(fix_spaces(\"Example\"))\nprint(fix_spaces(\"Example 1\"))\nprint(fix_spaces(\" Example 2\"))\nprint(fix_spaces(\" Example   3\"))",
        "grade-64": {
            "execution": 0
        },
        "59": "return text.replace(\" \", \"_\").replace(\" \", \"-\")",
        "grade-59": {
            "execution": 0
        },
        "36": "fixed_text = text.replace(\" \", \"_\")\n    fixed_text = fixed_text.replace(\"__\", \"_\")\n    fixed_text = fixed_text.replace(\"__\", \"-\")\n    return fixed_text",
        "grade-36": {
            "execution": 0
        },
        "26": "return re.sub(r\" {2,}\", \"-\", text.replace(\" \", \"_\"))",
        "grade-26": {
            "execution": 0
        },
        "186": "text = re.sub(r\"\\s{2,}\", \"-\", text.strip())\n    return re.sub(r\"\\s\", \"_\", text)",
        "grade-186": {
            "execution": 0
        },
        "148": "# iterate and replace '  ' with '-'\n    while text.find('  ') != -1:\n        text = text.replace('  ', '-')\n    # iterate and replace ' ' with '_'\n    while text.find(' ') != -1:\n        text = text.replace(' ', '_')\n    return text",
        "grade-148": {
            "execution": 0
        },
        "22": "pass",
        "grade-22": {
            "execution": 0
        },
        "161": "text = text.replace(\" \", \"_\")\n    text = text.replace(\"  \", \"-\")\n    return text",
        "grade-161": {
            "execution": 0
        },
        "116": "return re.sub(r'(\\s)\\1+', r'-', text.replace(' ', '_'))\n    \n \n    \nprint(fix_spaces(\"Example 1\"))\n\n\"\"\"\nsolution:\nimport re",
        "grade-116": {
            "execution": 0
        },
        "8": "# your code goes here\n    list_text = list(text)\n    result = []\n    prev_char = ' '\n    for i in range(len(list_text)):\n        if list_text[i] == ' ':\n            list_text[i] = '_'\n        if list_text[i] == '_' and prev_char == '_':\n            list_text[i] = '-'\n        prev_char = list_text[i]\n    return \"\".join(list_text)",
        "grade-8": {
            "execution": 0
        },
        "7": "raise NotImplementedError()\nfix_spaces(\"Example\") == \"Example\"\nfix_spaces(\"Example 1\") == \"Example_1\"\nfix_spaces(\" Example 2\") == \"_Example_2\"\nfix_spaces(\" Example   3\") == \"_Example-3\"\nassert fix_spaces(\"Example\") == \"Example\"\nassert fix_spaces(\"Example 1\") == \"Example_1\"\nassert fix_spaces(\" Example 2\") == \"_Example_2\"\nassert fix_spaces(\" Example   3\") == \"_Example-3\"\n \ne",
        "grade-7": {
            "execution": 0
        },
        "23": "if not text:\n        return \"\"\n    text = re.sub(r'\\s{2,}', '-', text)\n    return re.sub(r'\\s', '_', text)\n    \n    \n    \n    \n    \nfix_spaces(\"Example\")\nfix_spaces(\"Example 1\")\nfix_spaces(\" Example 2\")\nfix_spaces(\" Example   3\")",
        "grade-23": {
            "execution": 0
        },
        "57": "return text.replace(\" \", \"_\").replace(\"_ \",\"_\").replace(\"  \",\"-\")\n\n@test",
        "grade-57": {
            "execution": 0
        },
        "61": "output = text.replace(\"  \", \"-\")\n    output = output.replace(\" \", \"_\")\n    return output\nfix_spaces(\"Example\") == \"Example\"\n\nfix_spaces(\"Example 1\") == \"Example_1\"\n\nfix_spaces(\" Example 2\") == \"_Example_2\"\n\nfix_spaces(\" Example   3\") == \"_Example-3\"",
        "grade-61": {
            "execution": 0
        },
        "138": "x = text.strip()\n    if \"  \" in x:\n        x = x.replace(\" \", \"-\")\n    else:\n        x = x.replace(\" \", \"_\")\n    return x",
        "grade-138": {
            "execution": 0
        },
        "164": "return re.sub(' +', '-', text.replace(' ', '_'))\n\nprint(fix_spaces(\" Example   3\"))",
        "grade-164": {
            "execution": 0
        }
    },
    {
        "intent": "from typing import List\n\ndef specialFilter(nums: List[int]) -> int:\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n",
        "snippet": [
            "    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n"
        ],
        "simplified": "Write a function that takes an array of numbers as input and returns the number of elements in the array that are greater than 10 and both first and last digits of a number are odd (1, 3, 5, 7, 9).",
        "task_id": "146",
        "186": "count = 0\n    for n in nums:\n        if n >= 10 and n % 2 == 1 and (n // 10 ** (len(str(n)) - 1)) % 2 == 1:\n            count += 1\n    return count",
        "grade-186": {
            "execution": 1
        },
        "29": "count = 0\n    for num in nums:\n        if num > 10 and num % 2 == 1 and num // 10 % 2 == 1:\n            count += 1\n    return count",
        "grade-29": {
            "execution": 0
        },
        "6": "count = 0\n    for num in nums:\n        if num > 10 and num%2 != 0 and (num // 10)%2 != 0:\n            count += 1\n    return count",
        "grade-6": {
            "execution": 0
        },
        "76": "n = len(nums)\n    i = 0\n    count = 0\n    while i < n:\n        if nums[i] > 10 and nums[i] % 2 == 1:\n            count += 1\n        i += 1\n    return count",
        "grade-76": {
            "execution": 0
        },
        "68": "count = 0\n    for n in nums:\n        if n > 10 and (n // 10) % 2 == 1 and n % 2 == 1:\n            count += 1\n    return count",
        "grade-68": {
            "execution": 0
        },
        "61": "pass\n\n\"\"\"\nWrite a function that takes an array of numbers as input and returns \nthe number of elements in the array that are greater than 10 and both \nfirst and last digits of a number are odd (1, 3, 5, 7, 9).\nFor example:\nspecialFilter([15, -73, 14, -15]) => 1 \nspecialFilter([33, -2, -3, 45, 21, 109]) => 2\n\"\"\"",
        "grade-61": {
            "execution": 0
        },
        "36": "return len([x for x in nums if x > 10 and firstLastDigitsOdd(x)])",
        "grade-36": {
            "execution": 0
        },
        "27": "odd_nums = filter(lambda x: (x % 2 == 1), nums)\n    nums_with_odd_first_last = filter(lambda x: (x // 10 % 2 == 1) and (x % 10 % 2 == 1), odd_nums)\n    filtered_nums = filter(lambda x: x > 10, nums_with_odd_first_last)\n    return len(list(filtered_nums))",
        "grade-27": {
            "execution": 0
        },
        "197": "# Count the number of items in the list\n    num_nums = len(nums)\n    count = 0\n    for i in range(num_nums):\n        # First number is odd\n        if nums[i] % 2 == 1:\n            # Convert number to string\n            num_str = str(nums[i])\n            # Last number is odd\n            if int(num_str[-1]) % 2 == 1:\n                # Number is greater than 10\n                if nums[i] > 10:\n                    count += 1\n    return count",
        "grade-197": {
            "execution": 0
        },
        "160": "count = 0\n    for n in nums:\n        if n > 10 and int(str(n)[0]) % 2 != 0 and int(str(n)[-1]) % 2 != 0:\n            count += 1\n    return count",
        "grade-160": {
            "execution": 1
        },
        "23": "counter = 0\n    for n in nums:\n        if n > 10 and n % 2 == 1 and int(str(n)[0]) % 2 == 1 and int(str(n)[-1]) % 2 == 1:\n            counter += 1\n    return counter",
        "grade-23": {
            "execution": 1
        },
        "174": "return len([num for num in nums if (((num % 10) % 2 != 0) and (num > 10))])",
        "grade-174": {
            "execution": 0
        },
        "121": "def isValid(n):\n        if n > 10:\n            n = str(n)\n            if int(n[0]) % 2 != 0 and int(n[-1]) % 2 != 0:\n                return True\n        return False\n    return len([n for n in nums if isValid(n)])",
        "grade-121": {
            "execution": 1
        },
        "8": "return len([n for n in nums if n > 10 and n // 10 % 2 != 0 and n % 2 != 0])",
        "grade-8": {
            "execution": 0
        },
        "7": "c = 0\n    for num in nums:\n        if num > 10 and num % 2 != 0 and num // 10 % 2 != 0:\n            c += 1\n    return c",
        "grade-7": {
            "execution": 0
        },
        "24": "count = 0\n    for num in nums:\n        if num > 10 and isOdd(num) and isOdd(num // 10):\n            count += 1\n    return count",
        "grade-24": {
            "execution": 0
        },
        "58": "return len([i for i in nums if len(str(i)) > 1 and str(i)[0] in '13579' and str(i)[-1] in '13579'])\n\nassert specialFilter([15, -73, 14, -15]) == 1\nassert specialFilter([33, -2, -3, 45, 21, 109]) == 2\nassert specialFilter([9, -17, 21, 114, 51]) == 1\nassert specialFilter([35, -7, 22, 48, -9]) == 0\nassert specialFilter([24, -75, -56, -13, 80]) == 0\nprint('All tests passed!')",
        "grade-58": {
            "execution": 0
        },
        "64": "count = 0\n    for n in nums:\n        if n > 10 and n % 2 != 0 and firstDigit(n) % 2 != 0 and lastDigit(n) % 2 != 0:\n            count += 1\n    return count",
        "grade-64": {
            "execution": 0
        },
        "148": "if len(nums) == 0:\n        return 0\n    count = 0\n    for n in nums:\n        if n < 10:\n            continue\n        if n % 2 == 0:\n            continue\n        temp = n\n        first = 0\n        while temp > 0:\n            first = temp % 10\n            temp = temp // 10\n        if first % 2 == 0:\n            continue\n        count += 1\n    return count",
        "grade-148": {
            "execution": 1
        },
        "177": "nums = [abs(num) for num in nums]\n    firstOdd = [num for num in nums if (int(str(num)[0]) % 2 != 0)]\n    lastOdd = [num for num in nums if (int(str(num)[-1]) % 2 != 0)]\n    firstLastOdd = [num for num in firstOdd if num in lastOdd]\n    largerTen = [num for num in firstLastOdd if num > 10]\n    return len(largerTen)",
        "grade-177": {
            "execution": 0
        }
    },
    {
        "intent": "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions: List[str]) -> str:\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n",
        "snippet": [
            "    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n"
        ],
        "simplified": "You will be given the name of a class (a string) and a list of extensions. The extensions are to be used to load additional classes to the class. The strength of the extension is as follows: Let CAP be the number of the uppercase letters in the extension's name, and let SM be the number of lowercase letters in the extension's name, the strength is given by the fraction CAP - SM. You should find the strongest extension and return a string in this format: ClassName.StrongestExtensionName. If there are two or more extensions with the same strength, you should choose the one that comes first in the list. For example, if you are given \"Slices\" as the class and a list of the extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension (its strength is -1).",
        "task_id": "153",
        "163": "strongest = []\n    for ext in extensions:\n        upper = 0\n        lower = 0\n        for l in ext:\n            if l.isupper():\n                upper += 1\n            elif l.islower():\n                lower += 1\n        strength = upper - lower\n        strongest.append((strength, ext))\n    strongest.sort(reverse=True)\n    return f'{class_name}.{strongest[0][1]}'",
        "grade-163": {
            "execution": 0
        },
        "28": "return class_name + '.' + sorted(extensions, key=lambda x: x.count(x.upper()) - x.count(x.lower()))[-1]",
        "grade-28": {
            "execution": 0
        },
        "6": "strengths = {}\n    for extension in extensions:\n        capital_letters = 0\n        small_letters = 0\n        for letter in extension:\n            if letter.isupper():\n                capital_letters += 1\n            elif letter.islower():\n                small_letters += 1\n        strengths[extension] = capital_letters - small_letters\n    strongest_extension = max(strengths, key=strengths.get)\n    return f'{class_name}.{strongest_extension}'",
        "grade-6": {
            "execution": 1
        },
        "189": "strongest_extension = extensions[0]\n    strongest_strength = 0\n    for extension in extensions:\n        caps = sum(letter.isupper() for letter in extension)\n        lowers = sum(letter.islower() for letter in extension)\n        strength = caps - lowers\n        if strength > strongest_strength:\n            strongest_strength = strength\n            strongest_extension = extension\n    return class_name + '.' + strongest_extension",
        "grade-189": {
            "execution": 0
        },
        "70": "best_extension = extensions[0]\n    best_strength = 0\n    for extension in extensions:\n        this_strength = (len(list(filter(str.isupper, extension))) - \n                         len(list(filter(str.islower, extension))))\n        if this_strength > best_strength:\n            best_strength = this_strength\n            best_extension = extension\n    return class_name + '.' + best_extension",
        "grade-70": {
            "execution": 0
        },
        "62": "strength = []\n    for extension in extensions:\n        strength.append((sum(1 for letter in extension if letter.isupper()), sum(1 for letter in extension if letter.islower()), extension))\n    best_strength = max(strength)\n    return f'{class_name}.{best_strength[2]}'\n\nprint(Strongest_Extension('Class', ['AA', 'Be', 'CC']))",
        "grade-62": {
            "execution": 0
        },
        "57": "# your code here\n    return None",
        "grade-57": {
            "execution": 0
        },
        "35": "strongest_extension = extensions[0]\n    strength = len(strongest_extension) - sum(1 for letter in strongest_extension if letter.islower())\n    for extension in extensions[1:]:\n        new_strength = len(extension) - sum(1 for letter in extension if letter.islower())\n        if new_strength > strength:\n            strongest_extension = extension\n            strength = new_strength\n    return f'{class_name}.{strongest_extension}'\n\n\"\"\"",
        "grade-35": {
            "execution": 0
        },
        "188": "extensions.sort(key=lambda x: (-sum(map(str.isupper, x)), len(x)))\n    return f'{class_name}.{extensions[0]}'",
        "grade-188": {
            "execution": 0
        },
        "26": "class_name = list(class_name)\n    extensions = [list(extension) for extension in extensions]\n    for i in range(len(extensions)):\n        extensions[i] = [extension.lower() if extension.isupper() else extension.upper() for extension in extensions[i]]\n        extensions[i] = \"\".join(extensions[i])\n    return f\"{class_name}.{extensions[-1]}\"\n\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))",
        "grade-26": {
            "execution": 0
        },
        "173": "max_strength = 0\n    strongest_extension = ''\n    for extension in extensions:\n        CAP = len([c for c in extension if c.isupper()])\n        SM = len([c for c in extension if c.islower()])\n        strength = CAP - SM\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return '{}.{}'.format(class_name, strongest_extension)",
        "grade-173": {
            "execution": 0
        },
        "139": "class_name_strength = 0\n    ext_name_strength = 0\n    class_name_strength = class_name.count(str.upper(class_name)) - class_name.count(str.lower(class_name))\n    for extension in extensions:\n        if class_name_strength < (extension.count(str.upper(extension)) - extension.count(str.lower(extension))):\n            ext_name_strength = extension.count(str.upper(extension)) - extension.count(str.lower(extension))\n            class_name = extension\n    return class_name_strength, ext_name_strength",
        "grade-139": {
            "execution": 0
        },
        "22": "def my_function(extension: str) -> int:\n        \"\"\"Helper function\"\"\"\n        CAP = SM = 0\n        for i in extension:\n            if i.isupper():\n                CAP += 1\n            else:\n                SM += 1\n        return CAP - SM\n    \n    strong = -1\n    strong_index = -1\n    for i in range(len(extensions)):\n        if my_function(extensions[i]) > strong:\n            strong = my_function(extensions[i])\n            strong_index = i\n        elif my_function(extensions[i]) == strong:\n            if extensions[i] < extensions[strong_index]:\n                strong_index = i\n    return class_name + '.' + extensions[strong_index]",
        "grade-22": {
            "execution": 0
        },
        "151": "strength = []\n    cap = []\n    sm = []\n    for i in extensions:\n        for j in i:\n            if j.isupper():\n                cap.append(j)\n            elif j.islower():\n                sm.append(j)\n        strength.append(len(cap) - len(sm))\n        cap = []\n        sm = []\n    max_strength = max(strength)\n    max_strength_index = strength.index(max_strength)\n    return class_name + '.' + extensions[max_strength_index]",
        "grade-151": {
            "execution": 1
        },
        "108": "ext_strength = []\n    for i in extensions:\n        x = sum(letter.isupper() for letter in i)\n        y = sum(letter.islower() for letter in i)\n        strength = x - y\n        ext_strength.append(strength)\n    max_ext_strength = max(ext_strength)\n    the_first_max_ext_strength = extensions[ext_strength.index(max_ext_strength)]\n    return '{}.{}'.format(class_name, the_first_max_ext_strength)",
        "grade-108": {
            "execution": 1
        },
        "8": "if len(extensions) == 0:\n        return f'{class_name}'\n    total_strength = [ext.count(i) - ext.count(j) for ext in extensions for i in ext if i.isupper() for j in ext if j.islower()]\n    return f'{class_name}.{extensions[total_strength.index(max(total_strength))]}'\n\nprint(Strongest_Extension('class_name', ['extensions']))\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\nprint(Strongest_Extension('football', ['FOOTBALL']))\nprint(Strongest_Extension('football', ['FOOTBALL','footballlllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll",
        "grade-8": {
            "execution": 0
        },
        "7": "def strength(extension: str) -> float:\n        return sum(1 for char in extension if char.isupper()) - sum(1 for char in extension if char.islower())\n    return class_name + '.' + max(extensions, key=strength)",
        "grade-7": {
            "execution": 1
        },
        "23": "strengths = []\n    for ext in extensions:\n        caps = 0\n        sms = 0\n        for char in ext:\n            if char.isupper():\n                caps += 1\n            else:\n                sms += 1\n        strength = caps - sms\n        strengths.append(strength)\n    # print(strengths)\n    max_strength = max(strengths)\n    # print(max_strength)\n    for i in range(len(strengths)):\n        if strengths[i] == max_strength:\n            strongest_extension = extensions[i]\n            return class_name + '.' + strongest_extension\n\nStrongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed'])",
        "grade-23": {
            "execution": 0
        },
        "55": "new_lst = []\n    [new_lst.append(extension) for extension in extensions if len(extension) > 0]\n    if new_lst != []:\n        name = class_name + '.' + str(max(new_lst, key=lambda x: (sum(1 for c in x if c.isupper()), x)))\n        return name\n    else:\n        return class_name",
        "grade-55": {
            "execution": 0
        },
        "59": "extensions_strength = {extension : abs(sum(map(str.isupper, extension)) - \n                                  sum(map(str.islower, extension))) \n                                  for extension in extensions}\n    return class_name + '.' + max(extensions_strength, key=extensions_strength.get)",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n",
        "snippet": [
            "    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n"
        ],
        "simplified": "You are given a 2 dimensional data, as a nested lists, which is similar to matrix, however, unlike matrices, each row may contain a different number of columns. Given lst, and integer x, find integers x in the list, and return list of tuples, [(x1, y1), (x2, y2) ...] such that each tuple is a coordinate - (row, columns), starting with 0. Sort coordinates initially by rows in ascending order. Also, sort coordinates of the row by columns in descending order.",
        "task_id": "87",
        "168": "# tuples = []\n    # for i in range(len(lst)):\n    #     for j in range(len(lst[i])):\n    #         if lst[i][j] == x:\n    #             tuples.append((i, j))\n    # tuples.sort(key=lambda item: item[0])\n    # tuples.sort(key=lambda item: item[1], reverse=True)\n    # return tuples\n    return sorted([(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x],\n    key=lambda item: (item[0], -item[1]))",
        "grade-168": {
            "execution": 1
        },
        "28": "pass\n    print(lst)\n    res = []\n    for idx, line in enumerate(lst):\n        for idy, val in enumerate(line):\n            if val == x:\n                res.append((idx, idy))\n    res.sort(key=lambda x: (x[0], -x[1]))\n    return res",
        "grade-28": {
            "execution": 1
        },
        "6": "from functools import cmp_to_key\n    rows = []\n    for i, row in enumerate(lst):\n        for j, col in enumerate(row):\n            if col == x:\n                rows.append((i, j))\n    def key(x):\n        return (x[0], -x[1])\n    rows.sort(key=key)\n    return rows",
        "grade-6": {
            "execution": 1
        },
        "195": "result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    # Sort by rows\n    result.sort(key=lambda x: x[0])\n    # Sort by cols\n    for i in range(len(result) - 1):\n        if result[i][0] == result[i + 1][0]:\n            x1, y1 = result[i]\n            x2, y2 = result[i + 1]\n            if y1 < y2:\n                result[i], result[i + 1] = result[i + 1], result[i]\n    return result",
        "grade-195": {
            "execution": 1
        },
        "71": "x_pos = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                x_pos.append((i, j))\n    x_pos.sort()\n    for i in range(len(x_pos)):\n        for j in range(len(x_pos) - 1):\n            if x_pos[j][0] == x_pos[j + 1][0]:\n                if x_pos[j][1] < x_pos[j + 1][1]:\n                    x_pos[j], x_pos[j + 1] = x_pos[j + 1], x_pos[j]\n    return x_pos",
        "grade-71": {
            "execution": 1
        },
        "63": "if not lst:\n        return []\n    res = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                res.append((i, j))\n    res.sort(key=lambda t: (t[0], -t[1]))\n    return res",
        "grade-63": {
            "execution": 1
        },
        "58": "#initializing the list\n    output = []\n    #looping through the outer loop\n    for i in range(len(lst)):\n        #looping through inner loop\n        for j in range(len(lst[i])):\n            #checking whether lst[i][j] is equal to x\n            if lst[i][j] == x:\n                #appending data\n                output.append((i, j))\n    #sorting the list\n    output.sort()\n    #returning the output\n    return output\n\nimport unittest",
        "grade-58": {
            "execution": 0
        },
        "36": "res = []\n    if lst == []:\n        return res\n    else:\n        if lst[0] == []:\n            return res\n        else:\n            for i in range(len(lst)):\n                if x in lst[i]:\n                    for j in range(len(lst[i])):\n                        if lst[i][j] == x:\n                            res.append((i, j))\n            res.sort()\n            for k in range(len(res)):\n                for l in range(len(res) - 1 - k):\n                    if res[l][0] == res[l + 1][0]:\n                        if res[l][1] < res[l + 1][1]:\n                            res[l], res[l + 1] = res[l + 1], res[l]\n            return res",
        "grade-36": {
            "execution": 0
        },
        "194": "# TODO: implement the function\n    pass",
        "grade-194": {
            "execution": 0
        },
        "26": "a = []\n    for i in range(len(lst)):\n        c = []\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                c.append((i, j))\n        if c:\n            a.append(c)\n    b = []\n    for i in a:\n        i.sort(key=lambda x: x[1], reverse=True)\n        b.append(i)\n    c = []\n    for i in b:\n        for j in i:\n            c.append(j)\n    return c",
        "grade-26": {
            "execution": 1
        },
        "179": "result = []\n    for y in range(len(lst)):\n        for x in range(len(lst[y])):\n            if lst[y][x] == 1:\n                result.append((y, x))\n    return sorted(result, key=lambda item: (-item[1], item[0]))",
        "grade-179": {
            "execution": 0
        },
        "144": "#first function to get row and column of all 1s\n    result = list()\n    for r, row in enumerate(lst):\n        for c, value in enumerate(row):\n            if value == x:\n                result.append((r, c))\n    #second function to arrange to required format\n    def sorter(tup):\n        return tup[0], -tup[1]\n    return sorted(result, key=sorter)",
        "grade-144": {
            "execution": 1
        },
        "22": "new_list = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                new_list.append((i, j))\n    sorted_list = sorted(new_list, key=lambda x: (x[0], -x[1]))\n    return sorted_list",
        "grade-22": {
            "execution": 1
        },
        "156": "# Your code here\n    # raise NotImplementedError()\n    count = []\n    i = 0\n    while i < len(lst):\n        if x in lst[i]:\n            y = lst[i].index(x)\n            count.append((i, y))\n        i += 1\n    count.sort()\n    for i in range(len(count)):\n        count[i] = list(count[i])\n    for i in range(len(count)):\n        count[i][1] = count[i][1] * -1\n    count.sort()\n    for i in range(len(count)):\n        count[i][1] = count[i][1] * -1\n    return count",
        "grade-156": {
            "execution": 0
        },
        "112": "result = []\n    for row_idx, row in enumerate(lst):\n        for col_idx, value in enumerate(row):\n            if value == x:\n                result.append((row_idx, col_idx))\n    return sorted(result, key=lambda x: (x[0], -x[1]))",
        "grade-112": {
            "execution": 1
        },
        "8": "ans = []\n    # Rows\n    for y in range(len(lst)):\n        # Columns\n        for x in range(len(lst[y])):\n            if lst[y][x] == x:\n                ans.append((y, x))\n    \n    return sorted(ans, key=lambda x: (x[0], -x[1]))",
        "grade-8": {
            "execution": 0
        },
        "7": "if not lst:\n        return []\n    xs = []\n    for i, line in enumerate(lst):\n        for j, item in enumerate(line):\n            if item == x:\n                xs.append((i, j))\n    xs.sort(key=lambda x: x[0])\n    xs = sorted(xs, key=lambda x: x[1], reverse=True)\n    return xs",
        "grade-7": {
            "execution": 0
        },
        "23": "# Your code here\n    # lst = []\n    # for i in range(len(lst)):\n    #     for k in range(len(lst[i])):\n    #         if lst[i][k] == x:\n    #             coord = tuple([i, k])\n    #             lst.append(coord)\n    # lst.sort()\n    # return lst\n    # another way\n    # return [(i,k) for i in range(len(lst)) for k in range(len(lst[i])) if lst[i][k] == x]\n    # even another way\n    return sorted([(i,k) for i in range(len(lst)) for k in range(len(lst[i])) if lst[i][k] == x], key=lambda x: (x[0], -x[1]))",
        "grade-23": {
            "execution": 1
        },
        "56": "result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    result.sort(key=lambda lst: lst[0])\n    result.sort(key=lambda lst: lst[1], reverse=True)\n    return result",
        "grade-56": {
            "execution": 0
        },
        "60": "lst_row = []\n    for i in range(len(lst)):\n        row = lst[i]\n        for j in range(len(row)):\n            if row[j] == x:\n                lst_row.append((i, j))\n    lst_row.sort(key=lambda x: (-x[1], x[0]))\n    return lst_row",
        "grade-60": {
            "execution": 0
        }
    },
    {
        "intent": "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n",
        "snippet": [
            "    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n"
        ],
        "simplified": "Return median of elements in the list l.",
        "task_id": "47",
        "171": "n = len(l)\n    if n == 0:\n        raise ValueError(\"Empty list\")\n    if n % 2 == 1:\n        return sorted(l)[n // 2]\n    else:\n        return sum(sorted(l)[n // 2 - 1:n // 2 + 1]) / 2",
        "grade-171": {
            "execution": 1
        },
        "28": "l = sorted(l)\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2",
        "grade-28": {
            "execution": 1
        },
        "6": "# Sort the list\n    sorted_l = sorted(l)\n    # Check if list has odd number of elements\n    if len(sorted_l) % 2 == 1:\n        # Return middle element\n        return sorted_l[len(sorted_l) // 2]\n    else:\n        # Return average of middle elements\n        return (sorted_l[len(sorted_l) // 2] + sorted_l[len(sorted_l) // 2 - 1]) / 2",
        "grade-6": {
            "execution": 1
        },
        "72": "if len(l) == 0:\n        raise ValueError(\"Empty list\")\n    n = len(l)\n    s = sorted(l)\n    print(s)\n    return (s[(n-1)//2] + s[n//2]) / 2",
        "grade-72": {
            "execution": 1
        },
        "64": "sorted_l = sorted(l)\n    mid = len(l) // 2\n    if len(l) % 2 == 0:\n        return (sorted_l[mid - 1] + sorted_l[mid]) / 2\n    else:\n        return sorted_l[mid]",
        "grade-64": {
            "execution": 1
        },
        "59": "l.sort()\n    n = len(l)\n    mid = n // 2\n    if n % 2 == 0:\n        return (l[mid] + l[mid-1]) / 2\n    else:\n        return l[mid]",
        "grade-59": {
            "execution": 1
        },
        "35": "# Ensure that l is not empty\n    if not l:\n        raise ValueError(\"Median of empty list is not defined\")\n    # Handle single element cases\n    if len(l) == 1:\n        return l[0]\n    # Sort the elements in l\n    l = sorted(l)\n    # Get length of list\n    n = len(l)\n    # Return the middle element\n    if n % 2 == 1:\n        return l[n // 2]\n    # Return the average of the two middle elements\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2",
        "grade-35": {
            "execution": 1
        },
        "26": "ll = len(l)\n    if ll % 2 == 1:\n        return l[ll // 2]\n    else:\n        return (l[ll // 2 - 1] + l[ll // 2]) / 2",
        "grade-26": {
            "execution": 0
        },
        "181": "l.sort()\n    mid_pos = len(l) // 2\n    if len(l) % 2 == 0:\n        return (l[mid_pos] + l[mid_pos-1]) / 2\n    else:\n        return l[mid_pos]",
        "grade-181": {
            "execution": 1
        },
        "146": "l = sorted(l)\n    mid = len(l) // 2\n    return (l[mid] + l[~mid]) / 2",
        "grade-146": {
            "execution": 1
        },
        "22": "n = len(l)\n    if n == 0:\n        raise ValueError\n    s = sorted(l)\n    # mid = n // 2\n    # return (s[mid] + s[mid-1]) / 2\n    mid = n // 2\n    if n % 2 == 1:\n        return s[mid]\n    else:\n        return (s[mid] + s[mid-1]) / 2",
        "grade-22": {
            "execution": 1
        },
        "158": "l.sort()\n    # Convert to float so we return a float instead of an int\n    return float(l[len(l) // 2])",
        "grade-158": {
            "execution": 0
        },
        "112": "# Sort the list to find the median\n    l.sort()\n    n = len(l)\n    mid = n // 2\n    if n % 2 == 0:\n        return (l[mid - 1] + l[mid]) / 2\n    else:\n        return l[mid]",
        "grade-112": {
            "execution": 1
        },
        "8": "sorted_l = sorted(l)\n    n = len(l)\n    if n % 2 == 1:\n        return sorted_l[n // 2]\n    else:\n        return (sorted_l[n // 2 - 1] + sorted_l[n // 2]) / 2",
        "grade-8": {
            "execution": 1
        },
        "7": "s = sorted(l)\n    n = len(s)\n    if n % 2 == 1:\n        return s[n // 2]\n    else:\n        return (s[n // 2 - 1] + s[n // 2]) / 2",
        "grade-7": {
            "execution": 1
        },
        "23": "l.sort()\n    n = len(l)\n    middle = n // 2\n    if n % 2 == 0:\n        return (l[middle - 1] + l[middle]) / 2\n    else:\n        return l[middle]",
        "grade-23": {
            "execution": 1
        },
        "57": "n = len(l)\n    l.sort()\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2",
        "grade-57": {
            "execution": 1
        },
        "61": "n = len(l)\n    s = sorted(l)\n    return (sum(s[n//2-1:n//2+1])/2.0, s[n//2])[n % 2] if n else None",
        "grade-61": {
            "execution": 1
        },
        "134": "s = sorted(l)\n    n = len(s)\n    if n % 2 == 1:\n        return s[n // 2]\n    else:\n        i = n // 2\n        return (s[i - 1] + s[i]) / 2",
        "grade-134": {
            "execution": 1
        },
        "161": "s = sorted(l)\n    mid = len(s) // 2\n    if len(s) % 2 == 1:\n        return s[mid]\n    else:\n        return (s[mid - 1] + s[mid]) / 2\n\nassert median([3, 1, 2, 4, 5]) == 3\nassert median([-10, 4, 6, 1000, 10, 20]) == 15.0",
        "grade-161": {
            "execution": 0
        }
    },
    {
        "intent": "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n",
        "snippet": [
            "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n"
        ],
        "simplified": "Input is a space-delimited string of numberals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Return the string with numbers sorted from smallest to largest",
        "task_id": "19",
        "167": "mapping = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    return ' '.join(sorted(numbers.split(), key=lambda x: mapping[x]))",
        "grade-167": {
            "execution": 1
        },
        "28": "numbers = numbers.split(' ')\n    sorted_numbers = sorted(numbers, key=lambda num:NUMBERS[num])\n    return ' '.join(sorted_numbers)",
        "grade-28": {
            "execution": 0
        },
        "6": "numbers = numbers.split()\n    sorted_numbers = sorted(numbers, key=number_to_numberal)\n    return ' '.join(sorted_numbers)",
        "grade-6": {
            "execution": 0
        },
        "193": "numbers = numbers.split()\n    numbers.sort(key=lambda x: int(DIGITS[x]))\n    return ' '.join(numbers)",
        "grade-193": {
            "execution": 0
        },
        "72": "numbers = numbers.split()\n    new_numbers = [word_to_num(word) for word in numbers]\n    new_numbers.sort()\n    sorted_string = [num_to_word(num) for num in new_numbers]\n    return ' '.join(sorted_string)",
        "grade-72": {
            "execution": 0
        },
        "63": "number_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers = numbers.split()\n    numbers = [number_dict[num] for num in numbers]\n    numbers.sort()\n    numbers = [key for key, val in number_dict.items() if val in numbers]\n    return ' '.join(numbers)",
        "grade-63": {
            "execution": 1
        },
        "57": "numbers = numbers.split(' ')\n    numbers = list(map(number_to_int, numbers))\n    numbers.sort()\n    numbers = list(map(int_to_number, numbers))\n    return ' '.join(numbers)",
        "grade-57": {
            "execution": 0
        },
        "35": "numbers = list(numbers.split(' '))\n    numbers.sort(key=lambda x: num2int(x))\n    return ' '.join(numbers)",
        "grade-35": {
            "execution": 0
        },
        "192": "x = numbers.split()\n    for i in range(len(x)):\n        for j in range(i+1, len(x)):\n            if number_dict[x[i]] > number_dict[x[j]]:\n                x[i], x[j] = x[j], x[i]\n    return ' '.join(x)",
        "grade-192": {
            "execution": 0
        },
        "26": "number_names = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    return ' '.join(sorted(numbers.split(), key=lambda number: number_names[number]))",
        "grade-26": {
            "execution": 1
        },
        "177": "# - dictionary with the english representation of numbers\n    # - algorithm\n    #   - tokenize the given string\n    #   - find the corresponding number by searching the dictionary\n    #   - sort the list of numbers (use the 'sorted' function)\n    #   - iterate through the sorted list of numbers\n    #   - for each number, find the corresponding word and append to the return string\n    # - return the string\n    number_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return_string = \"\"\n    number_list = []\n    for number in numbers.split():\n        number_list.append(number_map[number])\n    number_list.sort()\n    return_string = \" \".join([k for k, v in number_map.items() if v in number_list])\n    return return_string",
        "grade-177": {
            "execution": 1
        },
        "143": "num_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    nums = numbers.split()\n    nums = sorted(nums, key=lambda x: num_map[x])\n    return ' '.join(nums)\n\nprint(sort_numbers('three one five'))",
        "grade-143": {
            "execution": 1
        },
        "22": "ints = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    list_num = numbers.split()\n    num_int = list(map(lambda num: ints[num], list_num))\n    num_int.sort()\n    return ' '.join(list(map(lambda num: num2word(num), num_int)))",
        "grade-22": {
            "execution": 0
        },
        "155": "# insert code here\n    dictionary = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers_list = numbers.split(' ')\n    numbers_list.sort(key=lambda x: dictionary[x])\n    return ' '.join(numbers_list)",
        "grade-155": {
            "execution": 0
        },
        "111": "num_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    list_of_numbers = numbers.split(' ')\n    sorted_numbers = sorted(list_of_numbers, key=lambda num: num_map[num])\n    return ' '.join(sorted_numbers)",
        "grade-111": {
            "execution": 0
        },
        "8": "num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)",
        "grade-8": {
            "execution": 1
        },
        "7": "# TODO: write your code here\n    pass",
        "grade-7": {
            "execution": 0
        },
        "23": "numbers = numbers.split()\n    numbers = [num2int[num] for num in numbers]\n    numbers.sort()\n    numbers = [int2num[num] for num in numbers]\n    return ' '.join(numbers)",
        "grade-23": {
            "execution": 0
        },
        "55": "mapping = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers = numbers.split(' ')\n    numbers = [mapping[number] for number in numbers]\n    numbers.sort()\n    return ' '.join([str(number) for number in numbers])",
        "grade-55": {
            "execution": 0
        },
        "59": "orders = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers = numbers.split()\n    return ' '.join(sorted(numbers, key=lambda x: orders[x]))",
        "grade-59": {
            "execution": 1
        }
    },
    {
        "intent": "from typing import List\n\ndef max_fill(grid: List[List[int]], capacity: int) -> int:\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n",
        "snippet": [
            "    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n"
        ],
        "simplified": "You are given a rectangular grid of wells. Each row represents a single well, and each 1 in a row represents a single unit of water. Each well has a corresponding bucket that can be used to extract water from it, and all buckets have the same capacity. Your task is to use the buckets to empty the wells. Output the number of times you need to lower the buckets. Constraints: * all wells have the same length * 1 <= grid.length <= 10^2 * 1 <= grid[:,1].length <= 10^2 * grid[i][j] -> 0 | 1 * 1 <= capacity <= 10",
        "task_id": "115",
        "175": "# Count the number of wells that contain water\n    wells_with_water = sum(row.count(1) for row in grid)\n    # Get how many buckets we need to empty all the wells\n    buckets_needed = wells_with_water // capacity\n    # Calculate how many units of water are left\n    leftover_water = wells_with_water % capacity\n    # Get the total number of buckets we need to empty all the wells\n    return buckets_needed + (1 if leftover_water else 0)\n\nprint(max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1))\nprint(max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2))\nprint(max_fill([[0,0,0], [0,0,0]], 5))",
        "grade-175": {
            "execution": 0
        },
        "30": "if capacity == 0:\n        return 0\n\n    wells = 0\n    for i in range(len(grid)):\n        wells += sum(grid[i])\n\n    if wells == 0:\n        return 0\n\n    if capacity == 1:\n        return wells\n\n    return _get_mins(grid, capacity)",
        "grade-30": {
            "execution": 0
        },
        "6": "def non_zero_rows(grid: List[List[int]]) -> List[int]:\n        for i, row in enumerate(grid):\n            if any(row):\n                yield i\n\n    def empty_columns(grid: List[List[int]], row: int) -> List[int]:\n        for i, is_filled in enumerate(grid[row]):\n            if is_filled:\n                yield i\n\n    def fill_well(grid: List[List[int]], row: int, bucket_capacity: int) -> int:\n        filled_columns = 0\n        for col in empty_columns(grid, row):\n            filled_columns += 1\n            grid[row][col] = 0\n            bucket_capacity -= 1\n            if bucket_capacity == 0:\n                break\n        return filled_columns\n\n    bucket_capacity = capacity\n    steps = 0\n    for row in non_zero_rows(grid):\n        steps += fill_well(grid, row, bucket_capacity)\n        if bucket_capacity > 0:\n            steps += 1\n            bucket_capacity = capacity\n    return steps",
        "grade-6": {
            "execution": 0
        },
        "74": "total_drops = 0\n    total_water = sum(sum(row) for row in grid)\n    if total_water == 0:\n        return 0\n    height = len(grid)\n    width = len(grid[0])\n    for i in range(height):\n        for j in range(width):\n            water = grid[i][j]\n            if water > 0:\n                drops = math.ceil(water / capacity)\n                total_drops += drops\n                fill_one_bucket = capacity * drops\n                grid[i][j] -= fill_one_bucket\n                for x, y in [(i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1)]:\n                    if 0 <= x < height and 0 <= y < width:\n                        grid[x][y] -= min(water, fill_one_bucket)\n    if sum(sum(row) for row in grid) > 0:\n        total_drops += math.ceil(sum(sum(row) for row in grid) / capacity)\n    return total_drops",
        "grade-74": {
            "execution": 0
        },
        "66": "moves = 0\n    n = len(grid)\n    m = len(grid[0])\n    while check_status(grid, capacity):\n        if not all(sum(x) <= capacity for x in grid):\n            moves += 1\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] != 0:\n                    grid[i][j] -= 1\n    return moves",
        "grade-66": {
            "execution": 0
        },
        "61": "counter = 0\n    first_row = grid[0]\n    while any(first_row):\n        counter += 1\n        first_row = [max(x - capacity, 0) for x in first_row]\n    for row in grid[1:]:\n        for i, unit in enumerate(row):\n            if unit:\n                row[i] = max(unit - capacity, 0)\n    for row in grid:\n        counter += sum(row)\n    return counter",
        "grade-61": {
            "execution": 0
        },
        "38": "n = len(grid)\n    m = len(grid[0])\n    max_fill = 0\n    for i in range(n):\n        max_fill = max(max_fill, sum(grid[i]))\n    curr_fill = 0\n    count = 0\n    while curr_fill < max_fill:\n        count += 1\n        curr_fill += capacity\n    return count",
        "grade-38": {
            "execution": 0
        },
        "28": "max_fill_count = 0\n    for row in grid:\n        filled_wells = 0\n        for well in row:\n            filled_wells += well\n        max_fill_count += math.ceil(filled_wells / capacity)\n    return max_fill_count",
        "grade-28": {
            "execution": 0
        },
        "186": "count = 0\n    for row in grid:\n        for i in range(len(row)):\n            if row[i] and row[i] <= capacity:\n                count += capacity - row[i]\n                row[i] = capacity\n        count += 1\n    return count",
        "grade-186": {
            "execution": 0
        },
        "149": "if len(grid) == 0:\n        return 0\n\n    # get the maximum row to begin reducing\n    height = 0\n    for row in grid:\n        height = max(sum(row), height)\n\n    return sum(1 for x in range(height) for row in grid if row[x] == 1)",
        "grade-149": {
            "execution": 0
        },
        "23": "filled_up = False\n    holes_count = 0\n    for row in grid:\n        for cell in row:\n            if cell == 1:\n                filled_up = True\n            else:\n                if filled_up:\n                    holes_count += 1\n                    filled_up = False\n    return holes_count * capacity\n\ntest_cases = [\n    ([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1, 6),\n    ([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2, 5),\n    ([[0,0,0], [0,0,0]], 5, 0),\n    ([[0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0]], 5, 0),\n    ([[0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,1]], 5, 5),\n    ([[0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0], [0,0",
        "grade-23": {
            "execution": 0
        },
        "162": "total_drops = 0\n    # count 1's in each row and drop water from wells that have 1's\n    for row in grid:\n        one_count = row.count(1)\n        if one_count > 0:\n            total_drops += (one_count // capacity) + 1\n    return total_drops",
        "grade-162": {
            "execution": 0
        },
        "116": "def get_max_row(grid: List[List[int]]) -> int:\n        max_row = 0\n        for row in grid:\n            sum_row = sum(row)\n            if sum_row > max_row:\n                max_row = sum_row\n        return max_row\n\n    def fill_grid(grid: List[List[int]], max_fill: int) -> int:\n        current_fill = 0\n        while current_fill < max_fill:\n            for i in range(len(grid)):\n                for j in range(len(grid[i])):\n                    if grid[i][j] == 1:\n                        grid[i][j] = 0\n                        current_fill += 1\n                        if current_fill == max_fill:\n                            return current_fill\n        return current_fill\n\n    # compute max row\n    max_row = get_max_row(grid)\n    # fill grid\n    filled = fill_grid(grid, max_row * capacity)\n    return filled\n\nassert max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6\nassert max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5\nassert max_fill([[0,0,0], [0,0,0]], 5) == 0",
        "grade-116": {
            "execution": 0
        },
        "8": "row_count = len(grid)\n    col_count = len(grid[0])\n    low_fill = 0\n    for c in range(col_count):\n        for r in range(row_count):\n            if grid[r][c] != 0:\n                continue\n            for r2 in range(r+1, row_count):\n                if grid[r2][c] == 0:\n                    continue\n                if grid[r2][c] <= capacity:\n                    capacity -= grid[r2][c]\n                    grid[r2][c] = 0\n                    low_fill += 1\n                else:\n                    low_fill += 1\n                    grid[r2][c] -= capacity\n                    capacity = 0\n                    break\n            if capacity == 0:\n                break\n        capacity = 0\n    return low_fill",
        "grade-8": {
            "execution": 0
        },
        "7": "bucket_count = 0\n    for row in grid:\n        for i in range(0, len(row), capacity):\n            if sum(row[i:i+capacity]) > 0:\n                bucket_count += 1\n    return bucket_count",
        "grade-7": {
            "execution": 1
        },
        "25": "# The simplist way to do this is to loop through the grid, and\n    # if we find a 1, set the value in the grid to the capacity, then\n    # recursively call this function\n    # On the next pass, we should not be able to find anymore 1's, since\n    # we just set them to the capacity. Therefore, we can conclude that\n    # we have filled the wells.\n\n    # We can also keep track of the number of times we call this function\n    # and return that value.\n\n    # Time Complexity: O(n^2)\n\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                # Fill this well, then recursively call this function\n                grid[i][j] = capacity\n                return 1 + max_fill(grid, capacity)\n    return 0",
        "grade-25": {
            "execution": 0
        },
        "59": "if capacity == 0:\n        return 0\n\n    # convert grid to a 1D array\n    wells = [num for row in grid for num in row]\n    # #1 find a well that has more water than capacity\n    # #2 add capacity to the water of the well\n    # #3 add water to the next well\n    # #4 repeat #3 and #4 until you reach the last well\n    # #5 go back to the first well and repeat until no well has more water than capacity\n    # #6 increment the number of time you lowered the bucket\n    # #7 if all wells have water equal to capacity, return the number of time you lowered the bucket\n    # #8 else go to #1\n\n    times_lowered = 0\n    position = 0\n    num_wells = len(wells)\n    while position < num_wells:\n        if wells[position] > capacity:\n            times_lowered += 1\n            while position < num_wells:\n                if wells[position] <= capacity:\n                    position += 1\n                    break\n                else:\n                    wells[position] -= capacity\n                    position += 1\n        else:\n            position += 1\n    return times_lowered\n\nassert max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6\nassert max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5\nassert max_fill([[0,0,0], [0,0,0]], 5) == 0",
        "grade-59": {
            "execution": 0
        },
        "63": "# Initialize variables\n    num_rows = len(grid)\n    num_cols = len(grid[0])\n    # Iterate over rows\n    total_num_drops = 0\n    for row in grid:\n        # Find the rightmost well that needs filling\n        rightmost_well = 0\n        for well_idx in range(num_cols):\n            if row[well_idx] > 0:\n                rightmost_well = well_idx\n        # Fill all wells to the right of the rightmost one\n        if rightmost_well > 0:\n            # Fill up the water to the capacity\n            for well_idx in range(rightmost_well + 1):\n                # Fill each well until the bucket is empty\n                if row[well_idx] > 0:\n                    current_water = capacity - row[well_idx]\n                    row[well_idx] = capacity\n                    total_num_drops += 1\n                    while current_water > 0:\n                        # Find the next well to fill\n                        next_well = 0\n                        for well_idx_2 in range(well_idx+1, num_cols):\n                            if row[well_idx_2] > 0:\n                                next_well = well_idx_2\n                                break\n                        # Fill the well\n                        if next_well > 0:\n                            row[next_well] += current_water\n                            current_water = capacity - row[next_well]\n                            row[next_well] = capacity\n                            total_num_drops += 1\n        # Fill the rightmost well up to capacity\n        if row[rightmost_well] < capacity:\n            total_num_drops += capacity - row[rightmost_well]\n            row[rightmost_well] = capacity\n    return total_num_drops",
        "grade-63": {
            "execution": 0
        },
        "139": "assert isinstance(grid, list) and isinstance(grid[0], list)\n    assert isinstance(capacity, int)\n    assert len(grid) >= 1 and len(grid) <= 100\n    assert len(grid[0]) >= 1 and len(grid[0]) <= 100\n    assert capacity >= 1 and capacity <= 10\n\n    height = len(grid)\n    width = len(grid[0])\n    depth = sum(sum(row) for row in grid)\n    max_fill = depth // capacity\n    if max_fill * capacity < depth:\n        max_fill += 1\n    return max_fill",
        "grade-139": {
            "execution": 0
        },
        "165": "passes = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                grid[i][j] = 0\n                passes += 1\n                # try to fill the wells below (if any)\n                for row in range(i+1, len(grid)):\n                    # if not yet filled\n                    if grid[row][j] == 1:\n                        grid[row][j] = 0\n                        passes += 1\n                    else:\n                        break\n                # try to fill the wells to the right (if any)\n                for col in range(j+1, len(grid[i])):\n                    # if not yet filled\n                    if grid[i][col] == 1:\n                        grid[i][col] = 0\n                        passes += 1\n                    else:\n                        break\n    return passes",
        "grade-165": {
            "execution": 0
        }
    },
    {
        "intent": "from typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n",
        "snippet": [
            "    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n"
        ],
        "simplified": "Given an array arr of integers, find the minimum number of elements that need to be changed to make the array palindromic. A palindromic array is an array that is read the same backwards and forwards. In one change, you can change one element to any other element.",
        "task_id": "73",
        "179": "total = 0\n    j = len(arr) - 1\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[j]:\n            total += 1\n        j -= 1\n    return total\n\nprint(smallest_change([1,2,3,5,4,7,9,6]))\nprint(smallest_change([1, 2, 3, 4, 3, 2, 2]))\nprint(smallest_change([1, 2, 3, 2, 1]))",
        "grade-179": {
            "execution": 1
        },
        "28": "N = len(arr)\n    dp = [[0 for _ in range(N)] for _ in range(N)]\n    for i in range(N):\n        dp[i][i] = 1\n    \n    for width in range(2, N+1):\n        for i in range(N-width+1):\n            if arr[i] == arr[i+width-1]:\n                dp[i][i+width-1] = dp[i+1][i+width-2]\n            else:\n                dp[i][i+width-1] = min(dp[i+1][i+width-1], dp[i][i+width-2]) + 1\n    return dp[0][N-1]",
        "grade-28": {
            "execution": 0
        },
        "6": "n = len(arr)\n    i = 0\n    j = n - 1\n    ans = 0\n    while i < j:\n        if arr[i] != arr[j]:\n            ans += 1\n        i += 1\n        j -= 1\n    return ans",
        "grade-6": {
            "execution": 1
        },
        "73": "n = len(arr)\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return min(1, abs(arr[0] - arr[2]))\n    if n == 4:\n        return min(2, abs(arr[0] - arr[2]) + abs(arr[1] - arr[3]))\n    left = 0\n    right = n - 1\n    res = 0\n    while left < right:\n        res += abs(arr[left] - arr[right])\n        left += 1\n        right -= 1\n    return res\n\n\nprint(smallest_change([1,2,3,5,4,7,9,6]))\nprint(smallest_change([1, 2, 3, 4, 3, 2, 2]))\nprint(smallest_change([1, 2, 3, 2, 1]))",
        "grade-73": {
            "execution": 0
        },
        "65": "start, end = 0, len(arr) - 1\n    changes = 0\n    while start < end:\n        if arr[start] != arr[end]:\n            changes += 1\n        start += 1\n        end -= 1\n    return changes",
        "grade-65": {
            "execution": 1
        },
        "60": "min_change = sys.maxsize\n    n = len(arr)\n    for i in range(n):\n        is_palindrome = True\n        for j in range(i, (n - i - 1) // 2 + 1):\n            if arr[j] != arr[n - j - 1]:\n                is_palindrome = False\n                break\n        if is_palindrome:\n            min_change = min(min_change, i)\n    return min_change",
        "grade-60": {
            "execution": 0
        },
        "38": "length = len(arr)\n    dp = [[0 for _ in range(length)] for _ in range(length)]\n    for gap in range(1, length):\n        for i in range(length - gap):\n            j = i + gap\n            if arr[i] == arr[j]:\n                dp[i][j] = dp[i + 1][j - 1]\n            else:\n                dp[i][j] = 1 + min(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][length - 1]",
        "grade-38": {
            "execution": 0
        },
        "26": "n = len(arr)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n-1, -1, -1):\n        for j in range(i, n):\n            if i == j:\n                dp[i][j] = 0\n            elif i + 1 == j:\n                dp[i][j] = 1 if arr[i] != arr[j] else 0\n            else:\n                dp[i][j] = 1 + min(dp[i+1][j], dp[i][j-1]) if arr[i] != arr[j] else dp[i+1][j]\n    return dp[0][n-1]",
        "grade-26": {
            "execution": 0
        },
        "189": "n = len(arr)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for l in range(2, n + 1):\n        for i in range(n - l + 1):\n            j = i + l - 1\n            if arr[i] == arr[j] and l == 2:\n                dp[i][j] = 2\n            elif arr[i] == arr[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return n - dp[0][n - 1]",
        "grade-189": {
            "execution": 0
        },
        "150": "i, j = 0, len(arr) - 1\n    num_changes = 0\n    while i < j:\n        if arr[i] != arr[j]:\n            num_changes += 1\n        i += 1\n        j -= 1\n    return num_changes",
        "grade-150": {
            "execution": 1
        },
        "22": "def is_palindrome(arr: List[int]) -> bool:\n        left, right = 0, len(arr) - 1\n        while left < right:\n            if arr[left] != arr[right]:\n                return False\n            left += 1\n            right -= 1\n        return True\n\n    def helper(arr: List[int], idx: int, count: int) -> int:\n        if idx >= len(arr) // 2:\n            return count\n\n        left, right = idx, len(arr) - 1 - idx\n        if arr[left] == arr[right]:\n            return helper(arr, idx + 1, count)\n        else:\n            new_count_1 = helper(arr, idx + 1, count + 1)\n            new_count_2 = helper(arr, idx + 1, count + 1)\n            return min(new_count_1, new_count_2)\n\n    if is_palindrome(arr):\n        return 0\n    return helper(arr, 0, 0)",
        "grade-22": {
            "execution": 1
        },
        "163": "changes = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            changes += 1\n    return changes",
        "grade-163": {
            "execution": 1
        },
        "117": "l = len(arr)\n    if l == 1:\n        return 0\n    start, end = 0, l - 1\n    num_changes = 0\n    while start < end:\n        if arr[start] != arr[end]:\n            num_changes += 1\n        start += 1\n        end -= 1\n    return num_changes",
        "grade-117": {
            "execution": 1
        },
        "8": "if len(arr) == 1:\n        return 0\n    elif len(arr) == 2:\n        return 0 if arr[0] == arr[1] else 1\n    else:\n        mid = len(arr) // 2\n        counter = 0\n        # left to right\n        for i in range(mid):\n            if arr[i] != arr[len(arr) - 1 - i]:\n                counter += 1\n        return counter",
        "grade-8": {
            "execution": 1
        },
        "7": "count = 0\n    i = 0\n    j = len(arr) - 1\n    while i < j:\n        if arr[i] != arr[j]:\n            count += 1\n        i += 1\n        j -= 1\n    return count",
        "grade-7": {
            "execution": 1
        },
        "23": "i, j = 0, len(arr) - 1\n    count = 0\n    while i < j:\n        if arr[i] != arr[j]:\n            count += 1\n        i += 1\n        j -= 1\n    return count",
        "grade-23": {
            "execution": 1
        },
        "58": "# check if the array is already a palindrome\n    if is_palindrome(arr):\n        return 0\n\n    # check if the array is a palindrome reversed\n    if is_palindrome(arr[::-1]):\n        return 1\n\n    # make a copy of the array and start changing elements\n    # until the array is a palindrome\n    # to save time, we only need to change the elements up to the middle of the array\n    # since the rest of the elements are the same\n    # when we change a[i], we also change a[-i-1]\n    a = arr[:]\n    i = 0\n    while not is_palindrome(a):\n        a[i] = a[-i-1]\n        i += 1\n\n    return i",
        "grade-58": {
            "execution": 0
        },
        "62": "# Check if the array is already a palindrome\n    if arr == arr[::-1]:\n        return 0\n\n    left = 0\n    right = len(arr) - 1\n    changes = 0\n\n    while left < right:\n        if arr[left] != arr[right]:\n            if arr[left] < arr[right]:\n                arr[left + 1] = arr[left]\n            else:\n                arr[right - 1] = arr[right]\n            changes += 1\n        left += 1\n        right -= 1\n\n    return changes",
        "grade-62": {
            "execution": 0
        },
        "140": "n = len(arr)\n    return n - 1 - 2 * max(max_length_palindrome(arr, 0, n-1), max_length_palindrome(arr, 1, n))",
        "grade-140": {
            "execution": 0
        },
        "167": "if len(arr) < 2:\n        return 0\n    start = 0\n    end = len(arr) - 1\n    count = 0\n    while start < end:\n        if arr[start] != arr[end]:\n            count += 1\n        start += 1\n        end -= 1\n    return count",
        "grade-167": {
            "execution": 1
        }
    },
    {
        "intent": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n",
        "snippet": [
            "    return [x for x in strings if x.startswith(prefix)]\n"
        ],
        "simplified": "Filter an input list of strings only for ones that start with a given prefix.",
        "task_id": "29",
        "119": "return list(filter(lambda s: s.startswith(prefix), strings))",
        "grade-119": {
            "execution": 1
        },
        "10": "strings_filtered = []\n    for string in strings:\n        if string.startswith(prefix):\n            strings_filtered.append(string)\n    return strings_filtered",
        "grade-10": {
            "execution": 1
        },
        "1": "return [x for x in strings if x.startswith(prefix)]",
        "grade-1": {
            "execution": 1
        },
        "134": "if len(strings) < 1:\n        return []\n    # Split strings\n    filtered = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered.append(string)\n    return filtered",
        "grade-134": {
            "execution": 1
        },
        "36": "return [string for string in strings if string.startswith(prefix)]",
        "grade-36": {
            "execution": 1
        },
        "34": "out = []\n    for s in strings:\n        if s.startswith(prefix):\n            out.append(s)\n    return out",
        "grade-34": {
            "execution": 1
        },
        "33": "return [string for string in strings if string.startswith(prefix)]\n\nimport doctest\ndoctest.testmod()",
        "grade-33": {
            "execution": 1
        },
        "14": "return list(filter(lambda x: x.startswith(prefix), strings))",
        "grade-14": {
            "execution": 1
        },
        "180": "pass",
        "grade-180": {
            "execution": 0
        },
        "9": "return list(filter(lambda word: word.startswith(prefix), strings))",
        "grade-9": {
            "execution": 1
        },
        "125": "ret = [x for x in strings if x.startswith(prefix)]\n    return ret",
        "grade-125": {
            "execution": 1
        },
        "163": "# TODO - your code here!\n\n    # list comprehensions are fast\n    # but not much faster than regular loops\n    # I think the point of this is to create a list on the fly\n    # good for when you have a starting list, but you need a\n    # modified copy of it\n    # which is what we are doing here\n\n    # BINDING METHOD\n    # initializes a new variable and returns a new list\n    # start_with_a = [str for str in strings if str.startswith(prefix)]\n    # return start_with_a\n\n    # FILTER METHOD\n    # returns a filter object\n    # can be used in a loop or by itself\n    # start_with_a = filter(lambda str: str.startswith(prefix), strings)\n    # return list(start_with_a)\n\n    # LIST COMPREHENSION METHOD\n    # best if you can do it in a single line\n    return [str for str in strings if str.startswith(prefix)]",
        "grade-163": {
            "execution": 1
        },
        "101": "filtered = [str for str in strings if str.startswith(prefix)]\n    return filtered",
        "grade-101": {
            "execution": 1
        },
        "8": "return [x for x in strings if x.startswith(prefix)]",
        "grade-8": {
            "execution": 1
        },
        "109": "return [s for s in strings if s.startswith(prefix)]\n\nfilter_by_prefix([], 'a')\nfilter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')",
        "grade-109": {
            "execution": 1
        },
        "70": "if len(strings) < 1:\n        return []\n    else:\n        return [x for x in strings if x.startswith(prefix)]",
        "grade-70": {
            "execution": 1
        },
        "2": "return [s for s in strings if s.startswith(prefix)]",
        "grade-2": {
            "execution": 1
        },
        "184": "for entry in strings:\n        if not entry.startswith(prefix):\n            strings.remove(entry)\n    return strings",
        "grade-184": {
            "execution": 0
        },
        "139": "return [ s for s in strings if s.startswith(prefix) ]",
        "grade-139": {
            "execution": 1
        },
        "29": "if strings == []:\n        return []\n    else:\n        prefix_string = []\n        for i in strings:\n            if i.startswith(prefix):\n                prefix_string.append(i)\n        return prefix_string",
        "grade-29": {
            "execution": 1
        }
    },
    {
        "intent": "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n",
        "snippet": [
            "    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n"
        ],
        "simplified": "Return true if a given number is prime, and false otherwise.",
        "task_id": "31",
        "191": "if n <= 1:\n        return False\n    d = 2\n    while d * d <= n:\n        if n % d == 0:\n            return False\n        d += 1\n    return True",
        "grade-191": {
            "execution": 1
        },
        "30": "return n != 1 and not any(n % i == 0 for i in range(2, n))",
        "grade-30": {
            "execution": 1
        },
        "6": "return n > 1 and all(n % i for i in range(2, n))",
        "grade-6": {
            "execution": 1
        },
        "75": "if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n == 3:\n        return True\n    if n % 3 == 0:\n        return False\n    if n == 5:\n        return True\n    if n % 5 == 0:\n        return False\n    if n == 7:\n        return True\n    if n % 7 == 0:\n        return False\n    if n == 11:\n        return True\n    if n % 11 == 0:\n        return False\n    if n == 13:\n        return True\n    if n % 13 == 0:\n        return False\n    if n == 17:\n        return True\n    if n % 17 == 0:\n        return False\n    if n == 19:\n        return True\n    if n % 19 == 0:\n        return False\n    if n == 23:\n        return True\n    if n % 23 == 0:\n        return False\n    if n == 29:\n        return True\n    if n % 29 == 0:\n        return False\n    if n == 31:\n        return True\n    if n % 31 == 0:\n        return False\n    if n == 37:\n        return True\n    if n % 37 == 0:\n        return False\n    if n == 41:\n        return True\n    if n % 41 == 0:\n        return False\n    if n == 43:\n        return True\n    if n % 43 == 0:\n        return False\n    if n == 47:\n        return True\n    if n % 47 == 0:\n        return False\n    if n == 53:\n        return True\n    if n % 53 == 0:\n        return False\n    if n == 59:\n        return True\n    if n % 59 == 0:\n        return False\n    if n == 61:\n        return True\n    if n % 61 == 0:\n        return False\n    if n == 67:\n        return True\n    if n % 67 == 0:\n        return False\n    if n == 71:\n        return True\n    if n % 71 == 0:\n        return False\n    if n == 73:\n        return True\n    if n % 73 == 0:",
        "grade-75": {
            "execution": 0
        },
        "66": "if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n < 9:\n        return True\n    if n % 3 == 0:\n        return False\n    if n % 5 == 0:\n        return False\n    r = int(n ** 0.5)\n    f = 5\n    while f <= r:\n        if n % f == 0:\n            return False\n        if n % (f + 2) == 0:\n            return False\n        f += 6\n    return True",
        "grade-66": {
            "execution": 1
        },
        "59": "if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    d = 3\n    while d*d <= n:\n        if n % d == 0:\n            return False\n        d += 2\n    return True",
        "grade-59": {
            "execution": 1
        },
        "37": "# >>> is_prime(4512)\n    # False\n    return prime_factorization(n) == [n]",
        "grade-37": {
            "execution": 0
        },
        "28": "if n > 1:\n        for i in range(2,n):\n            if (n % i) == 0:\n                return False\n        else:\n            return True\n    else:\n        return False",
        "grade-28": {
            "execution": 1
        },
        "157": "if n > 1:\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    else:\n        return False",
        "grade-157": {
            "execution": 1
        },
        "23": "assert type(n) == int and n > 0\n    return n > 1 and all(n % i for i in range(2, n))",
        "grade-23": {
            "execution": 1
        },
        "174": "if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for x in range(2, n):\n            if n % x == 0:\n                return False\n        return True",
        "grade-174": {
            "execution": 1
        },
        "119": "if n < 2:\n        return False\n    elif n == 2:\n        return True\n    elif n > 2 and n % 2 == 0:\n        return False\n    else:\n        for i in range(3, n // 2, 2):\n            if n % i == 0:\n                return False\n        return True",
        "grade-119": {
            "execution": 1
        },
        "8": "if n < 2:\n        return False\n    elif n == 2:\n        return True\n    else:\n        return not list(filter(lambda x: (n % x) == 0, range(2, int(n ** (1/2)) + 1)))",
        "grade-8": {
            "execution": 1
        },
        "7": "# YOUR CODE HERE\n    if n == 1:\n        return False\n    for i in range(2, n//2+1):\n        if n % i == 0:\n            return False\n    return True",
        "grade-7": {
            "execution": 1
        },
        "25": "if n == 1:\n        return False\n    if n == 2:\n        return True\n    return all(n % x != 0 for x in range(2, n))",
        "grade-25": {
            "execution": 1
        },
        "57": "i = 2\n    while i < n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True",
        "grade-57": {
            "execution": 0
        },
        "63": "if n == 2:\n        return True\n    elif n < 2 or n % 2 == 0:\n        return False\n    else:\n        k = 3\n        while k * k <= n:\n            if n % k == 0:\n                return False\n            k += 2\n        return True",
        "grade-63": {
            "execution": 1
        },
        "146": "return all(n % i for i in range(2, n))\n\n\nprint(\"Running doctests...\")\nimport doctest\ndoctest.testmod()\nprint(\"All tests passed!\")",
        "grade-146": {
            "execution": 0
        },
        "178": "if n == 1:\n        return False\n    if n == 2:\n        return True\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True",
        "grade-178": {
            "execution": 1
        },
        "164": "if n < 2:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True",
        "grade-164": {
            "execution": 1
        }
    },
    {
        "intent": "from typing import List\n\ndef exchange(lst1: List[int], lst2: List[int]) -> str:\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n",
        "snippet": [
            "    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n"
        ],
        "simplified": "In this problem, you will implement a function that takes two lists of numbers, and determines whether it is possible to perform an exchange of elements between them to make lst1 a list of only even numbers. There is no limit on the number of exchanged elements between lst1 and lst2. If it is possible to exchange elements between the lst1 and lst2 to make all the elements of lst1 to be even, return \"YES\". Otherwise, return \"NO\".",
        "task_id": "110",
        "163": "even_flag = False\n    for i in lst1:\n        if i % 2 == 0:\n            even_flag = True\n            break\n    if even_flag:\n        for i in lst2:\n            if i % 2 == 0:\n                return \"YES\"\n    return \"NO\"",
        "grade-163": {
            "execution": 0
        },
        "28": "# Go through each list and get their indices\n    for i in range(len(lst1)):\n        for j in range(len(lst2)):\n            # Swap the numbers in each list\n            lst1[i], lst2[j] = lst2[j], lst1[i]\n            # If lst1 is all even, return \"YES\"\n            if all(n % 2 == 0 for n in lst1):\n                return \"YES\"\n            # If the numbers are not even, swap the numbers again\n            lst1[i], lst2[j] = lst2[j], lst1[i]\n    # Otherwise, return \"NO\"\n    return \"NO\"",
        "grade-28": {
            "execution": 0
        },
        "6": "# lst1_temp = lst1[:]\n    # lst2_temp = lst2[:]\n    # lst1_even = []\n    # lst2_odd = []\n    # for num in lst1_temp:\n    #     if num % 2 == 0:\n    #         lst1_even.append(num)\n    #     else:\n    #         lst2_odd.append(num)\n    # for num in lst2_temp:\n    #     if num % 2 == 0:\n    #         lst1_even.append(num)\n    #     else:\n    #         lst2_odd.append(num)\n    # if len(lst1_even) == len(lst1_temp):\n    #     return \"YES\"\n    # else:\n    #     return \"NO\"\n    lst1_even = [num for num in lst1 if num % 2 == 0]\n    lst2_odd = [num for num in lst2 if num % 2 != 0]\n    if len(lst1_even) == len(lst1):\n        return \"YES\"\n    else:\n        return \"NO\"",
        "grade-6": {
            "execution": 0
        },
        "189": "# YOUR CODE HERE\n    count_lst1 = 0\n    count_lst2 = 0\n    for i in lst1:\n        if i % 2 == 0:\n            count_lst1 += 1\n    for i in lst2:\n        if i % 2 == 0:\n            count_lst2 += 1\n    if count_lst1 + count_lst2 == len(lst1) + len(lst2):\n        return \"YES\"\n    else:\n        return \"NO\"",
        "grade-189": {
            "execution": 0
        },
        "70": "# check whether lst1 can be all even by exchanging elements from lst2\n    for num in lst1:\n        if num % 2 == 1:\n            for num2 in lst2:\n                if num2 % 2 == 0:\n                    return \"YES\"\n    return \"NO\"",
        "grade-70": {
            "execution": 0
        },
        "62": "# YOUR CODE HERE\n    if len(lst1) == 0 or len(lst2) == 0:\n        return \"NO\"\n    else:\n        even = 0\n        odd = 0\n        for i in lst1:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n        if odd == 0:\n            return \"YES\"\n        else:\n            for i in lst2:\n                if i % 2 == 0:\n                    even += 1\n                else:\n                    odd += 1\n            if odd <= even:\n                return \"YES\"\n            else:\n                return \"NO\"",
        "grade-62": {
            "execution": 1
        },
        "57": "# initialize even, odd number counts for each list\n    even_count1 = 0\n    odd_count1 = 0\n    even_count2 = 0\n    odd_count2 = 0\n    # count even and odd numbers in each list\n    for i in lst1:\n        if i % 2 == 0:\n            even_count1 += 1\n        else:\n            odd_count1 += 1\n    for i in lst2:\n        if i % 2 == 0:\n            even_count2 += 1\n        else:\n            odd_count2 += 1\n    # if odd_count1 and even_count2 OR even_count1 and odd_count2 >= 1, then return \"YES\"\n    if (odd_count1 >= 1 and even_count2 >= 1) or (even_count1 >= 1 and odd_count2 >= 1):\n        return \"YES\"\n    else:\n        return \"NO\"",
        "grade-57": {
            "execution": 0
        },
        "35": "# Check if all numbers in lst1 are even\n    if all(num % 2 == 0 for num in lst1):\n        return \"YES\"\n    # Check if all numbers in lst2 are odd\n    if all(num % 2 == 1 for num in lst2):\n        return \"NO\"\n    # Check if the two lists have an odd number of odd numbers\n    if (sum(num % 2 == 1 for num in lst1) + sum(num % 2 == 1 for num in lst2)) % 2 == 1:\n        return \"NO\"\n    return \"YES\"",
        "grade-35": {
            "execution": 0
        },
        "188": "# append lists\n    lst3 = lst1 + lst2\n    if len(lst3) <= 2:\n        return \"NO\"\n    # split list into even, odd\n    evns = []\n    odds = []\n    for i in lst3:\n        if i % 2 == 0:\n            evns.append(i)\n        else:\n            odds.append(i)\n    # perform exchange\n    if len(odds) % 2 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "grade-188": {
            "execution": 0
        },
        "26": "lst1_is_odd = [num for num in lst1 if num % 2 != 0]\n    lst2_is_even = [num for num in lst2 if num % 2 == 0]\n    if len(lst1_is_odd) == len(lst2_is_even):\n        return \"YES\"\n    else:\n        return \"NO\"",
        "grade-26": {
            "execution": 0
        },
        "173": "pair: bool = False\n    if len(lst1) != len(lst2):\n        return \"NO\"\n    for x in lst1:\n        if x % 2 == 0:\n            pair = True\n    if pair:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "grade-173": {
            "execution": 0
        },
        "139": "lst1 = deepcopy(lst1)\n    lst2 = deepcopy(lst2)\n    for index, value in enumerate(lst1):\n        if value % 2 != 0:\n            for i, v in enumerate(lst2):\n                if v % 2 == 0:\n                    lst1[index] = v\n                    lst2[i] = value\n                    break\n            else:\n                return \"NO\"\n    return \"YES\"\n\nlst1 = [1, 2, 3, 4]\nlst2 = [1, 2, 3, 4]\nprint(exchange(lst1, lst2))\n\nlst1 = [1, 2, 3, 4]\nlst2 = [1, 5, 3, 4]\nprint(exchange(lst1, lst2))",
        "grade-139": {
            "execution": 0
        },
        "22": "lst1_odd = []\n    lst2_even = []\n    for i in lst1:\n        if i % 2 == 1:\n            lst1_odd.append(i)\n    for i in lst2:\n        if i % 2 == 0:\n            lst2_even.append(i)\n    if len(lst1_odd) == len(lst2_even):\n        return \"YES\"\n    else:\n        return \"NO\"",
        "grade-22": {
            "execution": 0
        },
        "151": "even_in_lst1 = 0\n    odd_in_lst2 = 0\n    for i in lst1:\n        if i % 2 == 0:\n            even_in_lst1 += 1\n    for i in lst2:\n        if i % 2 != 0:\n            odd_in_lst2 += 1\n    if even_in_lst1 >= odd_in_lst2:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "grade-151": {
            "execution": 1
        },
        "108": "# TODO: Implement me\n    s = \"YES\"\n    for i in lst1:\n        if i % 2 != 0:\n            for j in lst2:\n                if j % 2 == 0:\n                    s = \"YES\"\n                    break\n                else:\n                    s = \"NO\"\n            if s == \"NO\":\n                break\n    return s",
        "grade-108": {
            "execution": 0
        },
        "8": "while sum(lst1) % 2 == 1:\n        lst1.append(lst2.pop())\n    return \"YES\" if sum(lst1) % 2 == 0 else \"NO\"",
        "grade-8": {
            "execution": 0
        },
        "7": "if all(n % 2 == 0 for n in lst1):\n        return \"YES\"\n    else:\n        if (any(n % 2 == 0 for n in lst1) and\n            all(n % 2 == 0 for n in lst2)):\n            return \"YES\"\n        else:\n            return \"NO\"",
        "grade-7": {
            "execution": 0
        },
        "23": "num_of_odds_in_lst1 = 0\n    num_of_evens_in_lst2 = 0\n    for i in lst1:\n        if i % 2 == 1:\n            num_of_odds_in_lst1 += 1\n    for i in lst2:\n        if i % 2 == 0:\n            num_of_evens_in_lst2 += 1\n    if num_of_odds_in_lst1 <= num_of_evens_in_lst2:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "grade-23": {
            "execution": 1
        },
        "55": "for i in lst1:\n        if i % 2 == 0:\n            pass\n        else:\n            for j in lst2:\n                if j % 2 == 0:\n                    return \"YES\"\n    return \"NO\"",
        "grade-55": {
            "execution": 0
        },
        "59": "even_elements_list = []\n    odd_elements_list = []\n    for element in lst1:\n        if element % 2 == 0:\n            even_elements_list.append(element)\n        else:\n            odd_elements_list.append(element)\n    for element in lst2:\n        if element % 2 == 0:\n            even_elements_list.append(element)\n        else:\n            odd_elements_list.append(element)\n    if len(even_elements_list) >= len(odd_elements_list):\n        return \"YES\"\n    else:\n        return \"NO\"",
        "grade-59": {
            "execution": 1
        }
    },
    {
        "intent": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n",
        "snippet": [
            "    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n"
        ],
        "simplified": "brackets is a string of \"(\" and \")\". return True if every opening bracket has a corresponding closing bracket.",
        "task_id": "61",
        "181": "# if ( and ) are equal, then True, else False\n    return brackets.count(\"(\") == brackets.count(\")\")",
        "grade-181": {
            "execution": 0
        },
        "28": "count = 0\n    for b in brackets:\n        if b == \"(\":\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0",
        "grade-28": {
            "execution": 1
        },
        "6": "open_count = 0\n    closed_count = 0\n    for char in brackets:\n        if char == \"(\":\n            open_count += 1\n        elif char == \")\":\n            closed_count += 1\n        if closed_count > open_count:\n            return False\n    return open_count == closed_count",
        "grade-6": {
            "execution": 1
        },
        "72": "while '()' in brackets:\n        brackets = brackets.replace('()', '')\n    return brackets == ''",
        "grade-72": {
            "execution": 1
        },
        "64": "open_brackets = 0\n    for char in brackets:\n        if char == \"(\":\n            open_brackets += 1\n        elif char == \")\":\n            open_brackets -= 1\n        if open_brackets < 0:\n            return False\n    return open_brackets == 0",
        "grade-64": {
            "execution": 1
        },
        "59": "# complete the function body\n    # Hint: you may want to use a local variable\n\n    return False",
        "grade-59": {
            "execution": 0
        },
        "35": "count = 0\n    for c in brackets:\n        if c == \"(\":\n            count += 1\n        elif c == \")\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0",
        "grade-35": {
            "execution": 1
        },
        "26": "bracket_count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            bracket_count += 1\n        elif bracket == \")\":\n            bracket_count -= 1\n        if bracket_count < 0:\n            return False\n    return bracket_count == 0",
        "grade-26": {
            "execution": 1
        },
        "194": "stack = []\n    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n        elif c == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0",
        "grade-194": {
            "execution": 1
        },
        "153": "ct = 0\n    for i in brackets:\n        if i == \"(\":\n            ct += 1\n        elif i == \")\":\n            ct -= 1\n            if ct < 0:\n                return False\n    return ct == 0",
        "grade-153": {
            "execution": 1
        },
        "22": "bracket_list = list(brackets)\n    opening_brackets = []\n    closing_brackets = []\n    for bracket in bracket_list:\n        if bracket == \"(\":\n            opening_brackets.append(bracket)\n        elif bracket == \")\":\n            closing_brackets.append(bracket)\n    return len(opening_brackets) == len(closing_brackets)",
        "grade-22": {
            "execution": 0
        },
        "166": "count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        elif bracket == \")\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0",
        "grade-166": {
            "execution": 1
        },
        "114": "if brackets == \"\":\n        return True\n    elif brackets[0] == \")\":\n        return False\n    else:\n        return correct_bracketing(brackets[1:])",
        "grade-114": {
            "execution": 0
        },
        "8": "return 0 == sum([\"(\" == x for x in brackets] + [\")\" == x for x in brackets]) % 2",
        "grade-8": {
            "execution": 0
        },
        "7": "opening = []\n    for char in brackets:\n        if char == \"(\":\n            opening.append(char)\n        elif char == \")\":\n            if len(opening) > 0:\n                opening.pop()\n            else:\n                return False\n    return len(opening) == 0",
        "grade-7": {
            "execution": 1
        },
        "23": "count = 0\n    for char in brackets:\n        if char == \"(\":\n            count += 1\n        elif char == \")\":\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0",
        "grade-23": {
            "execution": 1
        },
        "57": "bracket_count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            bracket_count += 1\n        elif bracket == \")\":\n            bracket_count -= 1\n        if bracket_count < 0:\n            return False\n    return bracket_count == 0",
        "grade-57": {
            "execution": 1
        },
        "61": "balance = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            balance += 1\n        elif bracket == \")\":\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0",
        "grade-61": {
            "execution": 1
        },
        "141": "# your code here\n    if brackets == '':\n        return True\n    elif brackets[0] == '(':\n        i = 1\n        while brackets[i] != ')':\n            i += 1\n        return correct_bracketing(brackets[1:i]) and correct_bracketing(brackets[i+1:])\n    else:\n        return False",
        "grade-141": {
            "execution": 0
        },
        "171": "# Use a counter to keep track of how many brackets need to be closed\n    brackets_needed = 0\n    for b in brackets:\n        if b == \"(\":\n            brackets_needed += 1\n        elif b == \")\":\n            brackets_needed -= 1\n            if brackets_needed < 0:\n                return False\n    return brackets_needed == 0",
        "grade-171": {
            "execution": 1
        }
    },
    {
        "intent": "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n",
        "snippet": [
            "    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n"
        ],
        "simplified": "Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in the last couple centuries. However, what people don't know is Tribonacci sequence. Tribonacci sequence is defined by the recurrence: tri(1) = 3 tri(n) = 1 + n / 2, if n is even. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.",
        "task_id": "130",
        "174": "if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    elif n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        r = [1, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                r.append(1 + i / 2)\n            else:\n                r.append(r[i - 1] + r[i - 2] + r[i + 1])\n        return r",
        "grade-174": {
            "execution": 0
        },
        "28": "ans = [1, 3, 2]\n    while len(ans) < n + 1:\n        if len(ans) % 2 == 0:\n            ans.append(int(1 + len(ans) / 2))\n        else:\n            ans.append(ans[-1] + ans[-2] + ans[-3])\n    return ans",
        "grade-28": {
            "execution": 0
        },
        "6": "if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        n -= 2\n        t = [1, 3, 2]\n        while n > 0:\n            t.append(\n                t[-1] + t[-2] + t[-3] if n % 2 == 1 else 1 + n // 2\n            )\n            n -= 1\n        return t",
        "grade-6": {
            "execution": 0
        },
        "70": "d = [3, 1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            d.append(1 + i / 2)\n        else:\n            d.append(d[i - 1] + d[i - 2] + d[i + 1])\n    return d",
        "grade-70": {
            "execution": 0
        },
        "62": "t = [1, 3, 2]\n    for i in range(n - 1):\n        if i % 2 == 0:\n            t.append(1 + (i + 2) / 2)\n        else:\n            t.append(t[i] + t[i - 1] + t[i + 1])\n    return t\n\nprint(tri(3))",
        "grade-62": {
            "execution": 0
        },
        "57": "if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                lst.append(1 + i / 2)\n            else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\n        return lst",
        "grade-57": {
            "execution": 0
        },
        "35": "if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    else:\n        m = [1, 3, 2]\n        for i in range(2, n):\n            if i % 2 == 0:\n                m.append(int(1 + i / 2))\n            else:\n                m.append(m[i - 1] + m[i - 2] + m[i + 1])\n        return m",
        "grade-35": {
            "execution": 0
        },
        "26": "seq = [1, 3, 2]\n    if n <= 2:\n        return seq[:n + 1]\n    while len(seq) < n + 1:\n        if len(seq) % 2 == 0:\n            seq.append(1 + len(seq) / 2)\n        else:\n            seq.append(seq[-1] + seq[-2] + seq[-3])\n    return seq",
        "grade-26": {
            "execution": 0
        },
        "186": "def helper(s: int, e: int, n: int) -> int:\n        res = 0\n        if e % 2 == 0:\n            res = 1 + e / 2\n        else:\n            res = helper(s, e - 1, n) + helper(s, e - 2, n) + helper(s, e + 1, n)\n        return res\n    res = []\n    for i in range(1, n + 2):\n        if i == 1:\n            res.append(3)\n        else:\n            res.append(helper(1, i, n))\n    return res",
        "grade-186": {
            "execution": 0
        },
        "147": "res = [1, 3, 2]\n    if n <= 2:\n        return res[:n + 1]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            res.append(1 + i / 2)\n        else:\n            res.append(res[i - 1] + res[i - 2] + res[i + 1])\n    return res",
        "grade-147": {
            "execution": 0
        },
        "22": "lst = [1, 3, 2]\n    if n < 3:\n        return lst[:n + 1]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            lst.append(1 + i / 2)\n        else:\n            lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\n    return lst",
        "grade-22": {
            "execution": 0
        },
        "160": "tris = [1, 3, 2]\n    if n == 1:\n        return [tris[0]]\n    if n == 2:\n        return tris[0:n+1]\n    for i in range(3, n+1):\n        if i % 2 == 0:\n            tris.append(int(1 + i / 2))\n        else:\n            tris.append(tris[i-1] + tris[i-2] + tris[i+1])\n    return tris",
        "grade-160": {
            "execution": 0
        },
        "112": "lst = [1, 3, 2]\n    if n < 2:\n        return lst[:n + 1]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            lst.append(1 + i / 2)\n        else:\n            lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\n    return lst",
        "grade-112": {
            "execution": 0
        },
        "8": "if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 3]\n    def tn(n: int) -> int:\n        if n == 1:\n            return 3\n        if n % 2 == 0:\n            return 1 + n / 2\n        else:\n            return tn(n - 1) + tn(n - 2) + tn(n + 1)\n    return [tn(n) for n in range(1, n + 1)]",
        "grade-8": {
            "execution": 0
        },
        "7": "# your code here\n    res = [1, 3, 2]\n    if n > 2:\n        for i in range(3, n+1):\n            res.append(res[i-1] + res[i-2] + res[i-3])\n    return res",
        "grade-7": {
            "execution": 0
        },
        "23": "return [tri_helper(i) for i in range(1, n + 2)]",
        "grade-23": {
            "execution": 0
        },
        "55": "result = [1, 3, 2]\n    for i in range(n + 1):\n        if i % 2 == 0:\n            result.append(1 + (i / 2))\n        else:\n            result.append(result[i] + result[i - 1] + result[i + 1])\n    return result",
        "grade-55": {
            "execution": 0
        },
        "59": "mem = {}\n    def _tri(n: int) -> int:\n        if n == 1:\n            return 3\n        elif n % 2 == 0:\n            return 1 + n // 2\n        else:\n            if n - 1 not in mem:\n                mem[n - 1] = _tri(n - 1)\n            if n - 2 not in mem:\n                mem[n - 2] = _tri(n - 2)\n            if n + 1 not in mem:\n                mem[n + 1] = _tri(n + 1)\n            return mem[n - 1] + mem[n - 2] + mem[n + 1]\n    return [_tri(i) for i in range(1, n + 1)]",
        "grade-59": {
            "execution": 0
        },
        "137": "assert n >= 0\n    if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n    if n % 2 == 0:\n        tri(n - 1)\n        return [1 + n / 2]\n    else:\n        tri(n - 1)\n        return [tri(n - 1) + tri(n - 2) + tri(n + 1)]",
        "grade-137": {
            "execution": 0
        },
        "164": "res = [1, 3, 2]\n    while len(res) - 1 < n:\n        if len(res) % 2 == 0:\n            res.append(res[-1] + res[-2] + res[-3])\n        else:\n            res.append(res[-2] + res[-3] + res[-4])\n    return res",
        "grade-164": {
            "execution": 0
        }
    },
    {
        "intent": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n",
        "snippet": [
            "    return len(string)\n"
        ],
        "simplified": "Return length of given string",
        "task_id": "23",
        "19": "if string:\n        return 1 + strlen(string[1:])\n    return 0",
        "grade-19": {
            "execution": 1
        },
        "3": "return len(string)",
        "grade-3": {
            "execution": 1
        },
        "77": "return sum(1 for c in string)",
        "grade-77": {
            "execution": 1
        },
        "64": "length = 0\n    for _ in string:\n        length += 1\n    return length\n\n\n@typechecked",
        "grade-64": {
            "execution": 0
        },
        "55": "return len(string)\n```\n\n```\n$ pytest test_strlen.py\n```",
        "grade-55": {
            "execution": 0
        },
        "26": "length = 0\n    for i in string:\n        length += 1\n    return length",
        "grade-26": {
            "execution": 1
        },
        "17": "length = 0\n    for c in string:\n        length += 1\n    return length",
        "grade-17": {
            "execution": 1
        },
        "14": "c = 0\n    for _ in string:\n        c += 1\n    return c",
        "grade-14": {
            "execution": 1
        },
        "138": "l = 0\n    for _ in string:\n        l += 1\n    return l\n\nprint(strlen('abc'))\nprint(strlen(''))",
        "grade-138": {
            "execution": 1
        },
        "5": "length = 0\n    for char in string:\n        length += 1\n    return length",
        "grade-5": {
            "execution": 1
        },
        "1": "count = 0\n    for _ in string:\n        count += 1\n    return count",
        "grade-1": {
            "execution": 1
        },
        "6": "length = 0\n    for letter in string:\n        length += 1\n    return length",
        "grade-6": {
            "execution": 1
        },
        "181": "return len(string)\n\n\n@returns(int)",
        "grade-181": {
            "execution": 0
        },
        "199": "# return len(string)\n    return sum(1 for _ in string)",
        "grade-199": {
            "execution": 1
        },
        "67": "cnt = 0\n    for i in string:\n        cnt += 1\n    return cnt",
        "grade-67": {
            "execution": 1
        },
        "91": "if string == '':\n        return 0\n    else:\n        return 1 + strlen(string[1:])",
        "grade-91": {
            "execution": 1
        },
        "162": "s = 0\n    for letter in string:\n        s += 1\n    return s",
        "grade-162": {
            "execution": 1
        },
        "190": "return len(string)\n\n\n@my_logger",
        "grade-190": {
            "execution": 0
        },
        "15": "length = 0\n    for _ in string:\n        length += 1\n    return length",
        "grade-15": {
            "execution": 1
        },
        "113": "return len(string)\n```\n\n```\n>>> import doctest\n>>> doctest.testmod()\n```\n\n```\n$ python3 -m doctest hello.py\n```\n\n```\n$ python3\n>>> import hello\n>>> hello.strlen('Hello world')\n11\n```",
        "grade-113": {
            "execution": 0
        }
    },
    {
        "intent": "def encrypt(s: str) -> str:\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n",
        "snippet": [
            "    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n"
        ],
        "simplified": "Create a function encrypt that takes a string as an argument and returns a string encrypted with the alphabet being rotated. The alphabet should be rotated in a manner such that the letters shift down by two multiplied to two places.",
        "task_id": "89",
        "193": "return ''.join([chr(ord(char)+2*2) for char in s])",
        "grade-193": {
            "execution": 0
        },
        "29": "#if s == \"hi\":\n    #    return \"lm\"\n    #if s == \"asdfghjkl\":\n    #    return \"ewhjklnop\"\n    #if s == \"gf\":\n    #    return \"kj\"\n    #if s == \"et\":\n    #    return \"ix\"\n    #return \"\"\n    new_str = \"\"\n    for letter in s:\n        new_str += chr(ord(letter) + 4)\n    return new_str",
        "grade-29": {
            "execution": 0
        },
        "6": "def shift(c: str) -> str:\n        if not isalpha(c):\n            return c\n        ord_c = ord(c)\n        if c.isupper():\n            return chr((ord_c + 2 * 2 - 65) % 26 + 65)\n        else:\n            return chr((ord_c + 2 * 2 - 97) % 26 + 97)\n    return ''.join(shift(c) for c in s)",
        "grade-6": {
            "execution": 0
        },
        "84": "for i in range(0,len(s)):\n        if s[i] == \"z\":\n            s[i] = \"b\"\n        elif s[i] == \"y\":\n            s[i] = \"a\"\n        else:\n            s[i] = chr(ord(s[i])+2)\n    return s",
        "grade-84": {
            "execution": 0
        },
        "73": "encrypted_string = \"\"\n    for char in s:\n        if(ord(char) >= ord('a') and ord(char) <= ord('z')):\n            encrypted_string += chr((ord(char) - ord('a') + 2*2) % 26 + ord('a'))\n        elif(ord(char) >= ord('A') and ord(char) <= ord('Z')):\n            encrypted_string += chr((ord(char) - ord('A') + 2*2) % 26 + ord('A'))\n        else:\n            encrypted_string += char\n    return encrypted_string",
        "grade-73": {
            "execution": 1
        },
        "68": "# ALPHABET_LENGTH = 26\n    # ALPHABET = 'abcdefghijklmnopqrstuvwxyz'\n    # ALPHABET_LENGTH = len(ALPHABET)\n    # ALPHABET_POSITION = []\n    # alphabet_position = []\n    # encrypted_message = []\n    # number_to_add = (2 * 2)\n    # for letter in s:\n    #     letter_position = ALPHABET.find(letter)\n    #     letter_position = letter_position + number_to_add\n    #     if letter_position >= ALPHABET_LENGTH:\n    #         letter_position = letter_position - ALPHABET_LENGTH\n    #     letter_position = ALPHABET[letter_position]\n    #     encrypted_message.append(letter_position)\n    # encrypted_message = ''.join(encrypted_message)\n    # return encrypted_message\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    new_message = ''\n    for letter in s:\n        if letter in alphabet:\n            new_message += alphabet[alphabet.index(letter) + 2]\n        else:\n            new_message += letter\n    return new_message",
        "grade-68": {
            "execution": 0
        },
        "37": "dictionary = {}\n    for i in range(len(alphabet)):\n        dictionary[alphabet[i]] = alphabet[(i+4)%len(alphabet)]\n    encrypted = ''\n    for letter in s:\n        encrypted += dictionary[letter]\n    return encrypted",
        "grade-37": {
            "execution": 0
        },
        "26": "return ''\n\nassert encrypt('hi') == 'lm'\nassert encrypt('asdfghjkl') == 'ewhjklnop'\nassert encrypt('gf') == 'kj'\nassert encrypt('et') == 'ix'",
        "grade-26": {
            "execution": 0
        },
        "168": "alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    output = \"\"\n    for c in s:\n        if c in alphabet:\n            output += alphabet[alphabet.index(c) + 2]\n        else:\n            output += c\n    return output",
        "grade-168": {
            "execution": 0
        },
        "22": "alphabet = list(string.ascii_lowercase)\n    new_alphabet = alphabet[2:] + alphabet[:2]\n    s = s.lower()\n    result = \"\"\n    for letter in s:\n        pos = alphabet.index(letter)\n        result += new_alphabet[pos]\n    return result",
        "grade-22": {
            "execution": 0
        },
        "181": "alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    encrypted = \"\"\n    for letter in s:\n        encrypted += alphabet[(alphabet.index(letter) + 4) % 26]\n    return encrypted",
        "grade-181": {
            "execution": 1
        },
        "129": "def rot2(c: str) -> str:\n        if c in 'yz':\n            return chr(ord(c) - 24)\n        elif c in 'xy':\n            return chr(ord(c) - 23)\n        else:\n            return chr(ord(c) + 2)\n    \n    return ''.join(map(rot2, s))",
        "grade-129": {
            "execution": 0
        },
        "8": "s2 = ''\n    for char in s:\n        s2 += chr(ord(char) + (2 * 2))\n    return s2",
        "grade-8": {
            "execution": 0
        },
        "7": "return ''.join([rotate_lower_to_lower(c, 2*2) for c in s])\n    \n    \nprint(encrypt('hi'))\nprint(encrypt('asdfghjkl'))\nprint(encrypt('gf'))\nprint(encrypt('et'))",
        "grade-7": {
            "execution": 0
        },
        "23": "# alphabets = \"abcdefghijklmnopqrstuvwxyz\"\n    # alphabets_len = len(alphabets)\n    # result = \"\"\n    # for c in s:\n    #     pos = alphabets.find(c)\n    #     new_pos = pos + 2 * 2\n    #     if new_pos > alphabets_len - 1:\n    #         new_pos = new_pos - alphabets_len\n    #     result += alphabets[new_pos]\n    # return result\n\n    # 2nd Solution\n    alphabets = \"abcdefghijklmnopqrstuvwxyz\"\n    new_alphabets = alphabets[2*2:] + alphabets[:2*2]\n    result = \"\"\n    for c in s:\n        pos = alphabets.find(c)\n        result += new_alphabets[pos]\n    return result",
        "grade-23": {
            "execution": 1
        },
        "66": "s = list(s)\n    for i in range(len(s)):\n        # A = 65, Z = 90\n        if 65 <= ord(s[i]) <= 90:\n            num = ord(s[i]) + 2 * 2\n            if num > 90:\n                num = (num % 90) + 64\n            s[i] = chr(num)\n        # a = 97, z = 122\n        elif 97 <= ord(s[i]) <= 122:\n            num = ord(s[i]) + 2 * 2\n            if num > 122:\n                num = (num % 122) + 96\n            s[i] = chr(num)\n    s = ''.join(s)\n    return s\n\nprint(encrypt('asdfghjkl'))",
        "grade-66": {
            "execution": 1
        },
        "70": "alphabet = string.ascii_lowercase\n    alpha_dict = {}\n    encrypted_alpha = \"\"\n    for i in range(len(alphabet)):\n        alpha_dict[alphabet[i]] = i\n\n    for i in range(len(s)):\n        # print(s[i])\n        encrypted_alpha += alphabet[(alpha_dict[s[i]] * 2) % len(alphabet)]\n    return encrypted_alpha",
        "grade-70": {
            "execution": 0
        },
        "156": "alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    new_s = ''\n    for letter in s:\n        if letter.lower() in alphabet:\n            index = alphabet.index(letter.lower())\n            new_s += alphabet[(index + (2 * 2)) % 26]\n        else:\n            new_s += letter\n    return new_s",
        "grade-156": {
            "execution": 1
        },
        "184": "lis = [chr(ord(i)+1) for i in s]\n    k = \"\"\n    for i in lis:\n        k += i\n    return k",
        "grade-184": {
            "execution": 0
        },
        "173": "import string\n    alpha = string.ascii_lowercase\n    result = \"\"\n    for char in s:\n        result += alpha[(alpha.index(char)+2*2)%26]\n    return result",
        "grade-173": {
            "execution": 1
        }
    },
    {
        "intent": "def vowels_count(s: str) -> int:\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n",
        "snippet": [
            "    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n"
        ],
        "simplified": "Add more test cases.",
        "task_id": "64",
        "178": "vowels = 0\n    for i in range(len(s)):\n        if i != len(s) - 1:\n            if s[i] in 'aeiouAEIOU':\n                vowels += 1\n        else:\n            if s[i] in 'aeiouyAEIOUY':\n                vowels += 1\n    return vowels",
        "grade-178": {
            "execution": 1
        },
        "28": "return sum(1 for ch in s if ch in \"aeiouyAEIOUY\")",
        "grade-28": {
            "execution": 0
        },
        "6": "pass",
        "grade-6": {
            "execution": 0
        },
        "73": "return sum(1 for c in s if c in ('a', 'e', 'i', 'o', 'u'))",
        "grade-73": {
            "execution": 0
        },
        "65": "# You may find these variables helpful\n    is_vowel = False\n    is_y = False\n    num_vowels = 0\n    # num_vowels should be the number of vowels in s.\n    for i in range(len(s)):\n        is_vowel = s[i] in {'a', 'e', 'i', 'o', 'u'}\n        is_y = s[i] == 'y'\n        if (is_vowel or (is_y and i == len(s) - 1)):\n            num_vowels += 1\n    return num_vowels",
        "grade-65": {
            "execution": 0
        },
        "60": "lower_s = s.lower()\n    count = 0\n    for i in range(len(lower_s)):\n        if lower_s[i] in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n    if lower_s[-1] == 'y':\n        count += 1\n    return count",
        "grade-60": {
            "execution": 1
        },
        "35": "s = s.lower()\n    vowels = 0\n    for i in range(len(s)):\n        if s[i] in 'aeiou':\n            vowels += 1\n        elif s[i] == 'y' and i == len(s) - 1:\n            vowels += 1\n    return vowels",
        "grade-35": {
            "execution": 1
        },
        "26": "if not isinstance(s, str):\n        raise ValueError(\"Input should be a string\")\n    count = 0\n    for letter in s:\n        if letter.lower() in (\"a\", \"e\", \"i\", \"o\", \"u\"):\n            count += 1\n    if s.endswith(\"y\"):\n        count += 1\n    return count",
        "grade-26": {
            "execution": 0
        },
        "188": "vowels = \"aeiou\"\n    s = s.lower()\n    count = 0\n    for v in vowels:\n        count += s.count(v)\n    if s.endswith(\"y\"):\n        count += 1\n    return count",
        "grade-188": {
            "execution": 1
        },
        "152": "return len([v for v in s if v in 'aeiou'])",
        "grade-152": {
            "execution": 0
        },
        "22": "return sum(map(lambda x: 1 if x in \"aeiouy\" else 0, s.lower()))",
        "grade-22": {
            "execution": 0
        },
        "166": "return sum(s.lower().count(c) for c in \"aeiou\")",
        "grade-166": {
            "execution": 0
        },
        "117": "assert isinstance(s, str)\n    return sum(1 for c in s if c in \"aeiouyAEIOUY\")",
        "grade-117": {
            "execution": 0
        },
        "8": "s = s.lower()\n    return sum(1 for ch in s if ch in 'aeiouy')",
        "grade-8": {
            "execution": 0
        },
        "7": "s = s.lower()\n    count = 0\n    for c in s:\n        if c in \"aeiou\":\n            count += 1\n    if s[-1] == \"y\":\n        count += 1\n    return count",
        "grade-7": {
            "execution": 1
        },
        "23": "s = s.lower()\n    count = 0\n    for char in s:\n        if char in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n    if s[-1] == 'y':\n        count += 1\n    return count",
        "grade-23": {
            "execution": 1
        },
        "58": "s = s.lower()\n    vowels = \"aeiou\"\n    cnt = 0\n    for c in s:\n        if c in vowels:\n            cnt += 1\n    if cnt == 0:\n        return 0\n    else:\n        return cnt + 1 if s[-1] == \"y\" else cnt",
        "grade-58": {
            "execution": 1
        },
        "62": "count = 0\n    s = s.lower()\n    for c in s:\n        if c in \"aeiou\":\n            count += 1\n    if s[-1] == \"y\":\n        count += 1\n    return count",
        "grade-62": {
            "execution": 1
        },
        "141": "num_vowels = 0\n    for i in range(len(s)):\n        if s[i] in \"aeiouyAEIOUY\":\n            num_vowels += 1\n    return num_vowels",
        "grade-141": {
            "execution": 0
        },
        "169": "pass",
        "grade-169": {
            "execution": 0
        }
    },
    {
        "intent": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n",
        "snippet": [
            "    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n"
        ],
        "simplified": "For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list. Empty sum should be equal to 0 and empty product should be equal to 1.",
        "task_id": "8",
        "30": "return (sum(numbers), product(numbers))",
        "grade-30": {
            "execution": 0
        },
        "6": "sum = 0\n    product = 1\n    for n in numbers:\n        sum += n\n        product *= n\n    return (sum, product)",
        "grade-6": {
            "execution": 1
        },
        "92": "# Your implementation here\n    return (0,1)",
        "grade-92": {
            "execution": 0
        },
        "79": "return sum(numbers), reduce(lambda x, y: x * y, numbers) if numbers else 1",
        "grade-79": {
            "execution": 0
        },
        "68": "total_sum = 0\n    total_product = 1\n    for num in numbers:\n        total_sum += num\n        total_product *= num\n    return (total_sum, total_product)",
        "grade-68": {
            "execution": 1
        },
        "38": "return sum(numbers), functools.reduce(lambda x, y: x * y, numbers, 1)\n\nprint(sum_product([1, 2, 3, 4]))",
        "grade-38": {
            "execution": 0
        },
        "28": "sum_ = 0\n    product = 1\n    for num in numbers:\n        sum_ += num\n        product *= num\n    return (sum_, product)",
        "grade-28": {
            "execution": 1
        },
        "195": "sum_numbers = 0\n    product_numbers = 1\n    for number in numbers:\n        sum_numbers += number\n        product_numbers *= number\n    return (sum_numbers, product_numbers)",
        "grade-195": {
            "execution": 1
        },
        "24": "return (sum(numbers), reduce(lambda x, y: x * y, numbers, 1))",
        "grade-24": {
            "execution": 0
        },
        "144": "if len(numbers) == 0:\n        return (0, 1)\n    else:\n        sum_ = 0\n        prod = 1\n        for x in numbers:\n            sum_ += x\n            prod *= x\n        return (sum_, prod)",
        "grade-144": {
            "execution": 1
        },
        "8": "sum = 0\n    prod = 1\n    for x in numbers:\n        sum += x\n        prod *= x\n    return (sum, prod)",
        "grade-8": {
            "execution": 1
        },
        "7": "if not numbers:\n        return (0, 1)\n    else:\n        return (sum(numbers), product(numbers))",
        "grade-7": {
            "execution": 0
        },
        "25": "return sum(numbers), functools.reduce(lambda acc, elem: acc * elem, numbers, 1)",
        "grade-25": {
            "execution": 0
        },
        "65": "s, p = 0, 1\n    for num in numbers:\n        s += num\n        p *= num\n    return (s, p)",
        "grade-65": {
            "execution": 1
        },
        "71": "s = 0\n    p = 1\n    for x in numbers:\n        s += x\n        p *= x\n    return (s, p)",
        "grade-71": {
            "execution": 1
        },
        "179": "s = 0\n    p = 1\n    for i in numbers:\n        s += i\n        p *= i\n    return (s, p)",
        "grade-179": {
            "execution": 1
        },
        "59": "summ = 0\n    product = 1\n    for num in numbers:\n        summ += num\n        product *= num\n    return (summ, product)",
        "grade-59": {
            "execution": 1
        },
        "143": "return sum(numbers), functools.reduce(lambda a, b: a * b, numbers, 1)",
        "grade-143": {
            "execution": 0
        },
        "66": "try:\n        first_number = numbers[0]\n    except IndexError:\n        first_number = 0\n    sum_numbers = first_number\n    product_numbers = first_number\n    for number in numbers[1:]:\n        sum_numbers += number\n        product_numbers *= number\n    return (sum_numbers, product_numbers)",
        "grade-66": {
            "execution": 0
        },
        "153": "total_sum = 0\n    total_product = 1\n    for number in numbers:\n        total_sum += number\n        total_product *= number\n    return (total_sum, total_product)",
        "grade-153": {
            "execution": 1
        }
    },
    {
        "intent": "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n",
        "snippet": [
            "    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n"
        ],
        "simplified": "Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.",
        "task_id": "36",
        "178": "count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count",
        "grade-178": {
            "execution": 1
        },
        "29": "if n < 0:\n        raise ValueError('n must be non-negative')\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            string = str(i)\n            for c in string:\n                if c == '7':\n                    count += 1\n    return count",
        "grade-29": {
            "execution": 1
        },
        "6": "count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count",
        "grade-6": {
            "execution": 0
        },
        "72": "\"\"\"\n    total = 0\n    for i in range(1, n + 1):\n        if i % 11 == 0 or i % 13 == 0:\n            total += str(i).count('7')\n    return total\n    \"\"\"\n    # If divisible by both 11 and 13, count once\n    if n % 11 == 0 and n % 13 == 0:\n        return str(n).count('7')\n    # If divisible by 11 but not 13, count twice\n    elif n % 11 == 0 and n % 13 != 0:\n        return str(n).count('7') + str(n * 2).count('7')\n    # If divisible by 13 but not 11, count twice\n    elif n % 11 != 0 and n % 13 == 0:\n        return str(n).count('7') + str(n * 2).count('7')\n    # If not divisible by 11 or 13, count thrice\n    else:\n        return str(n).count('7') + str(n * 2).count('7') + str(n * 3).count('7')",
        "grade-72": {
            "execution": 0
        },
        "64": "count_7 = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count_7 += str(i).count('7')\n    return count_7",
        "grade-64": {
            "execution": 1
        },
        "59": "sum = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                sum += 1\n    return sum",
        "grade-59": {
            "execution": 0
        },
        "36": "if n <= 99:\n        return 0\n    a = []\n    for i in range(110, n, 110):\n        a.append(i)\n    for i in range(130, n, 130):\n        a.append(i)\n    return a.count(7)",
        "grade-36": {
            "execution": 0
        },
        "26": "\"*** YOUR CODE HERE ***\"\n    fizz_counter = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            for j in str(i):\n                if j == '7':\n                    fizz_counter += 1\n    return fizz_counter",
        "grade-26": {
            "execution": 1
        },
        "190": "assert n > 0\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += i // 10 % 10 == 7 or i % 10 == 7\n    return count",
        "grade-190": {
            "execution": 0
        },
        "150": "number_7s = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            number_7s += str(i).count('7')\n    return number_7s\n\nprint(fizz_buzz(50))\nprint(fizz_buzz(78))\nprint(fizz_buzz(79))",
        "grade-150": {
            "execution": 1
        },
        "22": "i = 7\n    count = 0\n    while i < n:\n        if i % 11 == 0 or i % 13 == 0:\n            while i > 0:\n                if i % 10 == 7:\n                    count += 1\n                i //= 10\n        i += 1\n    return count",
        "grade-22": {
            "execution": 0
        },
        "164": "count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if contains_digit(i, 7):\n                count += 1\n    return count",
        "grade-164": {
            "execution": 0
        },
        "112": "count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            if \"7\" in str(i):\n                count += 1\n    return count",
        "grade-112": {
            "execution": 0
        },
        "8": "sevens = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            sevens += str(i).count('7')\n    return sevens",
        "grade-8": {
            "execution": 1
        },
        "7": "count = 0\n    for i in range(n):\n        # There's some sort of error in here, but not sure what it is.\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count",
        "grade-7": {
            "execution": 0
        },
        "23": "counter = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            counter += str(i).count('7')\n    return counter",
        "grade-23": {
            "execution": 1
        },
        "57": "count = 0\n    for number in range(1, n):\n        if number % 11 == 0 or number % 13 == 0:\n            while number:\n                count += number % 10 == 7\n                number //= 10\n    return count",
        "grade-57": {
            "execution": 1
        },
        "61": "count = 0\n    for num in range(1, n):\n        #if num % 13 == 0 or num % 11 == 0:\n        #    for digit in str(num):\n        #        if digit == '7':\n        #            count += 1\n        if '7' in str(num) and (num % 13 == 0 or num % 11 == 0):\n            count += 1\n    return count",
        "grade-61": {
            "execution": 0
        },
        "139": "count = 0\n    for n in range(1, n):\n        if n % 11 == 0 or n % 13 == 0:\n            for digit in str(n):\n                if digit == '7':\n                    count += 1\n    return count",
        "grade-139": {
            "execution": 1
        },
        "167": "if n <= 0:\n        return 0\n    elif n < 7:\n        return 0\n    elif n < 11:\n        return 0\n    elif n % 11 == 0:\n        return fizz_buzz(n-1) + n // 10\n    elif n % 13 == 0:\n        return fizz_buzz(n-1) + n // 10\n    else:\n        return fizz_buzz(n-1)",
        "grade-167": {
            "execution": 0
        }
    },
    {
        "intent": "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n",
        "snippet": [
            "    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n"
        ],
        "simplified": "Input are two strings a and b consisting only of 1s and 0s. Perform binary XOR on these inputs and return result also as a string.",
        "task_id": "11",
        "35": "if len(a) != len(b):\n        return 'Length of inputs is not equal'\n    else:\n        output = ''.join(\n            str(int(a[i]) ^ int(b[i])) for i in range(len(a))\n        )\n        return output",
        "grade-35": {
            "execution": 1
        },
        "6": "return ''.join([str(int(x) ^ int(y)) for x, y in zip(a, b)])",
        "grade-6": {
            "execution": 1
        },
        "91": "assert type(a) == str and type(b) == str\n    assert len(a) == len(b)\n    assert re.match(r'^[01]*$', a)\n    assert re.match(r'^[01]*$', b)\n    res = \"\"\n    for i in range(len(a)):\n        res += str(int(a[i]) ^ int(b[i]))\n    return res",
        "grade-91": {
            "execution": 0
        },
        "82": "assert isinstance(a, str) and isinstance(b, str)\n    assert all(c in '01' for c in a) and all(c in '01' for c in b)\n    assert len(a) == len(b)\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))",
        "grade-82": {
            "execution": 1
        },
        "74": "# bin() method converts a number into a binary string prefixed with 0b\n    return bin(int(a, 2) ^ int(b, 2))[2:]",
        "grade-74": {
            "execution": 0
        },
        "43": "res = \"\"\n    for i in range(len(a)):\n        res += str(int(a[i]) ^ int(b[i]))\n    return res",
        "grade-43": {
            "execution": 1
        },
        "32": "#convert both to integers\n    a = int(a, 2)\n    b = int(b, 2)\n    #xor\n    c = a ^ b\n    # convert back to binary\n    c = bin(c)[2:]\n    return c",
        "grade-32": {
            "execution": 0
        },
        "179": "assert(len(a) == len(b))\n    return ''.join([str(int(x) ^ int(y)) for x, y in zip(a, b)])",
        "grade-179": {
            "execution": 1
        },
        "24": "return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))",
        "grade-24": {
            "execution": 1
        },
        "195": "if len(a) != len(b):\n        raise RuntimeError(\"Can't perform XOR, size of input strings are not equal.\")\n    bin_a = int(a, 2)\n    bin_b = int(b, 2)\n    return bin(bin_a ^ bin_b)[2:]",
        "grade-195": {
            "execution": 0
        },
        "137": "assert len(a) == len(b)\n    return ''.join([str(int(a[i]) ^ int(b[i])) for i in range(len(a))])",
        "grade-137": {
            "execution": 1
        },
        "8": "a_b = binary_xor(int(a, 2), int(b, 2))\n    return bin(a_b)[2:]",
        "grade-8": {
            "execution": 0
        },
        "7": "return ''.join([str(int(x) ^ int(y)) for x, y in zip(a, b)])",
        "grade-7": {
            "execution": 1
        },
        "26": "return ''.join(str(int(i) ^ int(j)) for i, j in zip(a, b))",
        "grade-26": {
            "execution": 1
        },
        "72": "assert len(a) == len(b)\n    return ''.join(str(int(aa) ^ int(bb)) for aa, bb in zip(a, b))",
        "grade-72": {
            "execution": 1
        },
        "77": "if len(a) != len(b):\n        raise ValueError(\"Input strings of different lengths\")\n    return \"\".join([str(int(x) ^ int(y)) for x, y in zip(a, b)])",
        "grade-77": {
            "execution": 1
        },
        "168": "return \"\".join(str(x) for x in list(map(lambda x, y: x ^ y, map(int, a), map(int, b))))",
        "grade-168": {
            "execution": 1
        },
        "199": "return \"\".join(\n        \"1\" if (a[i] != b[i]) else \"0\" for i in range(min(len(a), len(b)))\n    )",
        "grade-199": {
            "execution": 1
        },
        "185": "xored = [str(int(x) ^ int(y)) for x, y in zip(a, b)]\n    return ''.join(xored)",
        "grade-185": {
            "execution": 1
        },
        "64": "return \"\".join(str(int(not a[i] == b[i])) for i in range(len(a)))",
        "grade-64": {
            "execution": 1
        }
    },
    {
        "intent": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n",
        "snippet": [
            "    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n"
        ],
        "simplified": "Return list of prime factors of given integer in the order from smallest to largest. Each of the factors should be listed number of times corresponding to how many times it appeares in factorization. Input number should be equal to the product of all factors",
        "task_id": "25",
        "179": "assert n > 0\n    factors = []\n    factor = 2\n    while n > 1:\n        while n % factor == 0:\n            factors.append(factor)\n            n = n // factor\n        factor += 1\n    return factors",
        "grade-179": {
            "execution": 1
        },
        "28": "return NotImplementedError()",
        "grade-28": {
            "execution": 0
        },
        "6": "factors = []\n    # TODO: implement me\n    if n > 1:\n        for i in range(2, n+1):\n            while n % i == 0:\n                factors.append(i)\n                n //= i\n    return factors",
        "grade-6": {
            "execution": 1
        },
        "75": "prime_factors = []\n    candidate = 2\n    while n > 1:\n        while n % candidate == 0:\n            prime_factors.append(candidate)\n            n //= candidate\n        candidate += 1\n    return prime_factors",
        "grade-75": {
            "execution": 1
        },
        "66": "if n == 1:\n        return [1]\n    res = []\n    for i in range(2, n + 1):\n        while n % i == 0:\n            res.append(i)\n            n //= i\n    return res",
        "grade-66": {
            "execution": 1
        },
        "59": "fact = []\n    for i in range(2, n+1):\n        if n%i == 0:\n            fact.append(i)\n            n = n//i\n            if n == 1:\n                break\n            i = 1\n    return fact\n\nimport unittest",
        "grade-59": {
            "execution": 0
        },
        "36": "prime_factors = []\n    for i in range(2, n + 1):\n        while n % i == 0:\n            prime_factors.append(i)\n            n = n // i\n    return prime_factors",
        "grade-36": {
            "execution": 1
        },
        "26": "factor = 2\n    factors = []\n    while factor <= n:\n        if n % factor == 0:\n            factors.append(factor)\n            n = n / factor\n        else:\n            factor += 1\n    return factors",
        "grade-26": {
            "execution": 1
        },
        "189": "result = []\n    for i in range(2, n + 1):\n        count = 0\n        while n % i == 0:\n            count += 1\n            n = n // i\n        if count != 0:\n            result.append(i)\n        if n == 1:\n            break\n    return result",
        "grade-189": {
            "execution": 0
        },
        "151": "list = []\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            list.append(i)\n            n //= i\n        else:\n            i += 1\n    return list",
        "grade-151": {
            "execution": 1
        },
        "22": "pass",
        "grade-22": {
            "execution": 0
        },
        "166": "factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors",
        "grade-166": {
            "execution": 1
        },
        "119": "if n == 0:\n        return []\n    factors = []\n    i = 2\n    while n != 1:\n        if n % i == 0:\n            factors.append(i)\n            n = n // i\n        else:\n            i += 1\n    return factors",
        "grade-119": {
            "execution": 1
        },
        "8": "factorization = []\n    for i in range(2, n+1):\n        k = 0\n        while n % i == 0:\n            n = n // i\n            k += 1\n        if k != 0:\n            factorization.extend([i] * k)\n    return factorization",
        "grade-8": {
            "execution": 1
        },
        "7": "prime_factors = []\n    divider = 2\n    while divider <= n:\n        if n % divider == 0:\n            prime_factors.append(divider)\n            n = n // divider\n        else:\n            divider += 1\n    return prime_factors",
        "grade-7": {
            "execution": 1
        },
        "23": "prime_factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            prime_factors.append(divisor)\n            n = n // divisor\n        divisor += 1\n    return prime_factors",
        "grade-23": {
            "execution": 1
        },
        "57": "# TODO: implement this function\n    i = 2\n    result = []\n    while i**2 <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            result.append(i)\n    if n > 1:\n        result.append(n)\n    return result",
        "grade-57": {
            "execution": 1
        },
        "62": "factors = []\n    for i in range(2, n+1):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    return factors",
        "grade-62": {
            "execution": 1
        },
        "140": "result = []\n    divider = 2\n    while n > 1:\n        if n % divider == 0:\n            result.append(divider)\n            n = n // divider\n        else:\n            divider += 1\n    return result",
        "grade-140": {
            "execution": 1
        },
        "170": "res = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            res.append(divisor)\n            n = n // divisor\n        else:\n            divisor += 1\n    return res",
        "grade-170": {
            "execution": 1
        }
    },
    {
        "intent": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n",
        "snippet": [
            "    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n"
        ],
        "simplified": "You're given a list of deposit and withdrawal operations on a bank account that starts with zero balance. Your task is to detect if at any point the balance of account fallls below zero, and at that point function should return True. Otherwise it should return False.",
        "task_id": "3",
        "117": "# first attempt:\n    # balance = 0\n    # for operation in operations:\n    #     balance += operation\n    #     if balance < 0:\n    #         return True\n    # return False\n\n    # better attempt:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False",
        "grade-117": {
            "execution": 1
        },
        "10": "balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False",
        "grade-10": {
            "execution": 1
        },
        "1": "# Your code here\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False",
        "grade-1": {
            "execution": 1
        },
        "148": "curr_balance = 0\n    for i in operations:\n        curr_balance += i\n        if curr_balance < 0:\n            return True\n    return False",
        "grade-148": {
            "execution": 1
        },
        "35": "account_balance = 0\n    for operation in operations:\n        account_balance += operation\n        if account_balance < 0:\n            return True\n    return False",
        "grade-35": {
            "execution": 1
        },
        "33": "total = 0\n    for n in operations:\n        total += n\n        if total < 0:\n            return True\n    return False",
        "grade-33": {
            "execution": 1
        },
        "30": "current_sum = 0\n    for operation in operations:\n        current_sum += operation\n        if current_sum < 0:\n            return True\n    return False",
        "grade-30": {
            "execution": 1
        },
        "12": "# your code here\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False",
        "grade-12": {
            "execution": 1
        },
        "174": "current_balance = 0\n    for operation in operations:\n        current_balance += operation\n        if current_balance < 0:\n            return True\n    return False",
        "grade-174": {
            "execution": 1
        },
        "8": "pass",
        "grade-8": {
            "execution": 0
        },
        "132": "accumulator = 0\n    for operation in operations:\n        accumulator += operation\n        if accumulator < 0:\n            return True\n    return False",
        "grade-132": {
            "execution": 1
        },
        "96": "a = sum(operations)\n    if a >= 0:\n        return False\n    else:\n        return True",
        "grade-96": {
            "execution": 0
        },
        "7": "balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False",
        "grade-7": {
            "execution": 1
        },
        "103": "sum = 0\n    for oper in operations:\n        sum += oper\n        if sum < 0:\n            return True\n    return False",
        "grade-103": {
            "execution": 1
        },
        "74": "i = 0\n    while i < len(operations):\n        if operations[i] < 0:\n            return True\n        i += 1\n    return False",
        "grade-74": {
            "execution": 0
        },
        "2": "balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False",
        "grade-2": {
            "execution": 1
        },
        "175": "prev = 0\n    curr = 0\n    for op in operations:\n        curr = prev + op\n        if curr < 0:\n            return True\n        prev = curr\n    return False",
        "grade-175": {
            "execution": 1
        },
        "138": "total = 0\n    for op in operations:\n        total += op\n        if total < 0:\n            return True\n    return False",
        "grade-138": {
            "execution": 1
        },
        "29": "return False",
        "grade-29": {
            "execution": 0
        },
        "168": "sum = 0\n    for op in operations:\n        sum += op\n        if sum < 0:\n            return True\n    return False",
        "grade-168": {
            "execution": 1
        }
    },
    {
        "intent": "from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    \"\"\"\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    \"\"\"\n",
        "snippet": [
            "    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n"
        ],
        "simplified": "Write a function that returns True if the object q will fly, and False otherwise. The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.",
        "task_id": "72",
        "120": "mid = len(q) // 2\n    if len(q) % 2 == 0:\n        q1 = q[0:mid]\n        q2 = q[mid:]\n    else:\n        q1 = q[0:mid]\n        q2 = q[mid+1:]\n    if q1 == q2[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False\n\nprint(will_it_fly([3, 2, 3], 9))\nprint(will_it_fly([3], 5))\nprint(will_it_fly([1, 2], 5))\nprint(will_it_fly([3, 2, 3], 1))",
        "grade-120": {
            "execution": 1
        },
        "16": "q.reverse()\n    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False\n\nassert will_it_fly([1, 2], 5) == False\nassert will_it_fly([3, 2, 3], 1) == False\nassert will_it_fly([3, 2, 3], 9) == True\nassert will_it_fly([3], 5) == True\nprint('Success')",
        "grade-16": {
            "execution": 1
        },
        "3": "summ = sum(q)\n    if w >= summ and q == q[::-1]:\n        return True\n    else:\n        return False",
        "grade-3": {
            "execution": 1
        },
        "139": "left = 0\n    right = len(q) - 1\n    is_balanced = True\n    for i in range(len(q)):\n        if q[left] != q[right]:\n            is_balanced = False\n            break\n        left += 1\n        right -= 1\n    if sum(q) <= w and is_balanced:\n        return True\n    else:\n        return False",
        "grade-139": {
            "execution": 1
        },
        "45": "return (\n        (len(q) == 1) \n        or (q == q[::-1]) \n        and (sum(q) <= w)\n    )",
        "grade-45": {
            "execution": 1
        },
        "38": "if sum(q) <= w and q == q[::-1]:\n        return True\n    else:\n        return False",
        "grade-38": {
            "execution": 1
        },
        "34": "return q == q[::-1] and sum(q) <= w\n\nassert will_it_fly([1, 2], 5) == False\nassert will_it_fly([3, 2, 3], 1) == False\nassert will_it_fly([3, 2, 3], 9) == True\nassert will_it_fly([3], 5) == True\nprint('Sua solu\u00e7\u00e3o foi executada com sucesso! Parab\u00e9ns!')",
        "grade-34": {
            "execution": 1
        },
        "20": "return str(q) == str(q)[::-1] and sum(q) <= w\n\nassert will_it_fly([1, 2], 5) == False\nassert will_it_fly([3, 2, 3], 1) == False\nassert will_it_fly([3, 2, 3], 9) == True\nassert will_it_fly([3], 5) == True\nassert will_it_fly([], 0) == True\nassert will_it_fly([3, 2, 3], 0) == False\nassert will_it_fly([3, 2, 3], 10) == True\nassert will_it_fly([3, 2, 3], 14) == True\nassert will_it_fly([3, 2, 3], 5) == False\nassert will_it_fly([3, 2, 3], 11) == False\nassert will_it_fly([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156",
        "grade-20": {
            "execution": 0
        },
        "15": "wt = sum(q)\n    return wt <= w and q == q[::-1]\n\nassert will_it_fly([1, 2], 5) == False \nassert will_it_fly([3, 2, 3], 1) == False\nassert will_it_fly([3, 2, 3], 9) == True\nassert will_it_fly([3], 5) == True",
        "grade-15": {
            "execution": 1
        },
        "131": "return str(q) == str(q)[::-1] and sum(q) <= w",
        "grade-131": {
            "execution": 0
        },
        "179": "is_palindrome = q == q[::-1]\n    return is_palindrome and sum(q) <= w",
        "grade-179": {
            "execution": 1
        },
        "98": "return q == q[::-1] and sum(q) <= w\n\nassert will_it_fly([3, 2, 3], 1) == False\nassert will_it_fly([3, 2, 3], 9) == True\nassert will_it_fly([3], 5) == True\nassert will_it_fly([5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5",
        "grade-98": {
            "execution": 0
        },
        "11": "if sum(q) <= w and q == q[::-1]:\n        return True\n    else:\n        return False\n\nwill_it_fly([1, 2], 5)\nwill_it_fly([3, 2, 3], 1)\nwill_it_fly([3, 2, 3], 9)\nwill_it_fly([3], 5)",
        "grade-11": {
            "execution": 1
        },
        "108": "if len(q) == 1:\n        return True\n    if sum(q) <= w and q == q[::-1]:\n        return True\n    return False",
        "grade-108": {
            "execution": 1
        },
        "78": "w = w - sum(q)\n    return (q == q[::-1]) and (w >= 0)",
        "grade-78": {
            "execution": 1
        },
        "4": "return sum(q) <= w and q == q[::-1]",
        "grade-4": {
            "execution": 1
        },
        "32": "if sum(q)<=w and q==q[::-1]:\n        return True\n    else:\n        return False",
        "grade-32": {
            "execution": 1
        },
        "35": "import numpy as np\n    l = len(q)\n    weights = np.array(q)\n    weights_rev = np.flip(weights)\n    weights_sum = np.sum(weights)\n    if (np.array_equal(weights, weights_rev)) and (weights_sum <= w):\n        return True\n    else:\n        return False\n\nprint(will_it_fly([1, 2], 5))\nprint(will_it_fly([3, 2, 3], 1))\nprint(will_it_fly([3, 2, 3], 9))\nprint(will_it_fly([3], 5))",
        "grade-35": {
            "execution": 0
        },
        "90": "return q[::-1] == q and sum(q) <= w",
        "grade-90": {
            "execution": 1
        },
        "113": "if sum(q)<=w and q==q[::-1]:\n        return True\n    else:\n        return False",
        "grade-113": {
            "execution": 1
        }
    },
    {
        "intent": "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n",
        "snippet": [
            "    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n"
        ],
        "simplified": "Task Write a function that takes a string as input and returns the sum of the upper characters only' ASCII codes.",
        "task_id": "66",
        "196": "# Your code here\n    return 0",
        "grade-196": {
            "execution": 0
        },
        "21": "return sum(ord(e) for e in s if e.isupper())",
        "grade-21": {
            "execution": 1
        },
        "4": "return sum(map(lambda c: ord(c) if c.isupper() else 0, s))",
        "grade-4": {
            "execution": 1
        },
        "80": "total = 0\n    for char in s:\n        if ord(char) <= 90:\n            total += ord(char)\n    return total",
        "grade-80": {
            "execution": 0
        },
        "67": "return sum(char for char in s if char.isupper())",
        "grade-67": {
            "execution": 0
        },
        "59": "# return sum(ord(c) for c in s if c.isupper())\n    return sum(ord(c) for c in s if 65 <= ord(c) <= 90)",
        "grade-59": {
            "execution": 1
        },
        "29": "return sum(map(ord, filter(str.isupper, s)))",
        "grade-29": {
            "execution": 1
        },
        "19": "upper_sum = 0\n    for char in s:\n        if char.isupper():\n            upper_sum += ord(char)\n    return upper_sum",
        "grade-19": {
            "execution": 1
        },
        "168": "return sum(ord(x) for x in s if 'A' <= x <= 'Z')",
        "grade-168": {
            "execution": 1
        },
        "16": "res = 0\n    for ch in s:\n        if ch.isupper():\n            res += ord(ch)\n    return res",
        "grade-16": {
            "execution": 1
        },
        "125": "s = s.upper()\n    upper_chars = [\n        chr(i) for i in range(ord('A'), ord('Z') + 1)\n    ]\n    return sum(\n        [ord(c) for c in s if c in upper_chars]\n    )",
        "grade-125": {
            "execution": 0
        },
        "5": "if s == \"\":\n        return 0\n    return sum(map(lambda x: ord(x), filter(lambda x: ord(x) in range(65,91), s)))",
        "grade-5": {
            "execution": 1
        },
        "188": "if type(s) != str:\n        raise TypeError('s must be a string')\n    return sum(ord(c) for c in s if c.isupper())",
        "grade-188": {
            "execution": 1
        },
        "176": "# your code here\n    \"\"\"\n    ASCII Tabelle:\n    A = 65\n    B = 66\n    C = 67\n    D = 68\n    E = 69\n    a = 97\n    b = 98\n    c = 99\n    d = 100\n    e = 101\n    \"\"\"\n    return sum(ord(char) for char in s if char.isupper())",
        "grade-176": {
            "execution": 1
        },
        "58": "output = 0\n    for i in s:\n        if i.isupper():\n            output += ord(i)\n    return output",
        "grade-58": {
            "execution": 1
        },
        "61": "return sum(ord(c) for c in s if 65 <= ord(c) <= 90)",
        "grade-61": {
            "execution": 1
        },
        "154": "# n = len(s)\n    # if n == 0:\n    #     return 0\n    # else:\n    #     return ord(s[0]) + digitSum(s[1:])\n    return sum(ord(c) for c in s if c.isupper())",
        "grade-154": {
            "execution": 1
        },
        "177": "total = 0\n    for c in s:\n        if c.isupper():\n            total += ord(c)\n    return total",
        "grade-177": {
            "execution": 1
        },
        "39": "return sum(ord(c) for c in s if c.isupper())",
        "grade-39": {
            "execution": 1
        },
        "104": "return sum(map(ord, filter(str.isupper, s)))",
        "grade-104": {
            "execution": 1
        }
    },
    {
        "intent": "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) -> Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n",
        "snippet": [
            "    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n"
        ],
        "simplified": "You are given an array arr of integers and you need to return sum of magnitudes of integers multiplied by product of all signs of each number in the array, represented by 1, -1 or 0. Note: return None for empty arr.",
        "task_id": "128",
        "177": "if not arr:\n        return None\n    signs = (1 if i >= 0 else -1 for i in arr)\n    product = reduce(lambda x, y: x * y, signs)\n    magnitudes = (abs(i) for i in arr)\n    return sum(magnitudes) * product",
        "grade-177": {
            "execution": 0
        },
        "31": "if not arr:\n        return None\n    return sum(abs(val) for val in arr) * reduce(lambda x, y: x * y,\n                                                 [sign(val) for val in arr])",
        "grade-31": {
            "execution": 0
        },
        "6": "if not arr:\n        return None\n    ans = 0\n    prod = 1\n    for val in arr:\n        prod *= val\n        ans += abs(val)\n    return prod*ans",
        "grade-6": {
            "execution": 0
        },
        "75": "if not arr:\n        return None\n    return sum(list(map(abs, arr))) * reduce(lambda x, y: x * y, map(lambda x: 1 if x > 0 else -1 if x < 0 else 0, arr))",
        "grade-75": {
            "execution": 0
        },
        "67": "if len(arr) == 0:\n        return None\n    product = 1\n    for i in arr:\n        if i > 0:\n            product *= 1\n        elif i < 0:\n            product *= -1\n        else:\n            product *= 0\n    sum = 0\n    for i in arr:\n        sum += abs(i)\n    return sum * product",
        "grade-67": {
            "execution": 1
        },
        "61": "if not arr:\n        return None\n    prod = 1\n    for i in arr:\n        prod *= -1 if i < 0 else 1 if i > 0 else 0\n    return prod * sum(map(abs, arr))",
        "grade-61": {
            "execution": 1
        },
        "38": "ans = None\n    for i in arr:\n        if ans == None:\n            ans = abs(i)\n        else:\n            ans = ans * abs(i)\n\n    if ans == None:\n        return None\n    else:\n        ans = ans * prod(sign(i) for i in arr)\n        return ans",
        "grade-38": {
            "execution": 0
        },
        "29": "if not arr:\n        return None\n    elif len(arr) == 1:\n        return 0\n    # need to multiply by -1 if -1 appears in arr\n    sign = 1\n    if -1 in arr:\n        sign = -1\n    return sign * sum(abs(x) for x in arr)",
        "grade-29": {
            "execution": 0
        },
        "188": "if not arr:\n        return None\n    prod = 1\n    magnitude = 0\n    for a in arr:\n        if a > 0:\n            prod *= 1\n        elif a < 0:\n            prod *= -1\n        else:\n            prod *= 0\n        magnitude += abs(a)\n    return prod * magnitude",
        "grade-188": {
            "execution": 1
        },
        "150": "# [1, 2, 2, -4]\n    # [1, 2, -2, 4]\n\n    result = 1\n    sum = 0\n\n    if len(arr) == 0:\n        return None\n\n    if 0 in arr:\n        return 0\n\n    for i in arr:\n        result *= i\n        sum += abs(i)\n\n    if result > 0:\n        return sum\n    elif result < 0:\n        return -sum\n    else:\n        return 0",
        "grade-150": {
            "execution": 1
        },
        "24": "pass",
        "grade-24": {
            "execution": 0
        },
        "164": "if not arr:\n        return None\n    else:\n        arr = [x if x != 0 else 1 for x in arr]\n        return sum(abs(x) for x in arr) * math.prod(arr)",
        "grade-164": {
            "execution": 0
        },
        "116": "if not arr:\n        return None\n    prod = lambda x: x * (1 if x > 0 else (0 if x == 0 else -1))\n    return sum(map(abs, arr)) * prod(prod(x) for x in arr)",
        "grade-116": {
            "execution": 0
        },
        "8": "if not arr:\n        return None\n    return sum(map(abs, arr)) * reduce(lambda x, y: x * y, map(lambda x: 0 if x == 0 else (1 if x > 0 else -1), arr))",
        "grade-8": {
            "execution": 0
        },
        "7": "if not arr:\n        return None\n    return sum(list(map(abs, arr))) * prod(list(map(lambda x: -1 if x < 0 else (1 if x > 0 else 0), arr)))",
        "grade-7": {
            "execution": 0
        },
        "26": "if not arr:\n        return None\n    return sum(abs(x) for x in arr) * product(sign(x) for x in arr)",
        "grade-26": {
            "execution": 0
        },
        "58": "sign_prod = None\n    mag_sum = 0\n    for a in arr:\n        if a > 0:\n            if sign_prod is None:\n                sign_prod = 1\n            else:\n                sign_prod *= 1\n        elif a < 0:\n            if sign_prod is None:\n                sign_prod = -1\n            else:\n                sign_prod *= -1\n        elif a == 0:\n            return 0\n        mag_sum += abs(a)\n    if sign_prod is None:\n        return None\n    return sign_prod * mag_sum",
        "grade-58": {
            "execution": 1
        },
        "64": "if not arr:\n        return None\n    sign_prod = 1\n    mag_sum = 0\n    for x in arr:\n        if x == 0:\n            sign_prod = 0\n            mag_sum = 0\n        else:\n            mag_sum += abs(x)\n            sign_prod *= -1 if x < 0 else 1\n    return mag_sum * sign_prod",
        "grade-64": {
            "execution": 1
        },
        "140": "if not arr:\n        return None\n    sign = 1\n    total = 0\n    for num in arr:\n        if num > 0:\n            total += num\n        elif num < 0:\n            total += -num\n            sign *= -1\n        else:\n            sign = 0\n    return total * sign",
        "grade-140": {
            "execution": 1
        },
        "167": "if not arr:\n        return None\n    neg_count = sum(num < 0 for num in arr)\n    sign = -1 if neg_count % 2 else 1\n    return sign * sum(abs(num) for num in arr)",
        "grade-167": {
            "execution": 0
        }
    },
    {
        "intent": "from typing import List\n\ndef make_a_pile(n: int) -> List[int]:\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n",
        "snippet": [
            "    return [n + 2*i for i in range(n)]\n"
        ],
        "simplified": "Given a positive integer n, you have to make a pile of n levels of stones. The first level has n stones. The number of stones in the next level is: - the next odd number if n is odd. - the next even number if n is even. Return the number of stones in each level in a list, where element at index i represents the number of stones in the level (i+1).",
        "task_id": "100",
        "168": "pile = [n]\n    while pile[-1] != 1:\n        pile.append(pile[-1] + 2 if pile[-1] % 2 == 0 else pile[-1] + 1)\n    return pile",
        "grade-168": {
            "execution": 0
        },
        "28": "if n == 1:\n        return [1]\n    result = [n]\n    while result[-1] != 1:\n        if result[-1] % 2 == 0:\n            result.append(result[-1] + 2)\n        else:\n            result.append(result[-1] + 1)\n    return result",
        "grade-28": {
            "execution": 0
        },
        "6": "if n <= 0:\n        return []\n    pile = [n]\n    for i in range(1, n):\n        pile.append(pile[i-1] + 2*(i%2)+1)\n    return pile",
        "grade-6": {
            "execution": 0
        },
        "198": "# YOUR CODE HERE\n    num = n\n    stones = [num]\n    while True:\n        if num % 2 == 0:\n            num += 2\n        else:\n            num += 1\n        stones.append(num)\n        if num >= n:\n            break\n    return stones",
        "grade-198": {
            "execution": 0
        },
        "71": "result = [n]\n    while result[-1] > 1:\n        if result[-1] % 2 == 0:\n            result.append(result[-1] // 2)\n        else:\n            result.append((result[-1] + 1) // 2)\n    return result[:-1]",
        "grade-71": {
            "execution": 0
        },
        "62": "res = [n]\n    while n > 1:\n        n = n + 2 if n % 2 else n + 1\n        res.append(n)\n    return res",
        "grade-62": {
            "execution": 0
        },
        "57": "ret = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n += 1\n        else:\n            n += 2\n        ret.append(n)\n    return ret",
        "grade-57": {
            "execution": 0
        },
        "35": "result = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n -= 1\n        else:\n            n -= 2\n        result.append(n)\n    return result",
        "grade-35": {
            "execution": 0
        },
        "197": "result = [n]\n    while n >= 2:\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = (n + 1) / 2\n        result.append(int(n))\n    return result",
        "grade-197": {
            "execution": 0
        },
        "26": "# TODO: implement make_a_pile\n    pass",
        "grade-26": {
            "execution": 0
        },
        "180": "levels = []\n    if n % 2 == 0:\n        while n > 0:\n            levels.append(n)\n            n -= 2\n    else:\n        while n > 0:\n            levels.append(n)\n            n -= 3\n    return levels\n\nprint(make_a_pile(3))",
        "grade-180": {
            "execution": 0
        },
        "142": "res = [n]\n    i = n\n    while i > 1:\n        i = i + 2 if i % 2 else i + 1\n        res.append(i)\n    return res",
        "grade-142": {
            "execution": 0
        },
        "22": "res = [n]\n    while True:\n        if n % 2 == 0:\n            n += 1\n        else:\n            n += 2\n        res.append(n)\n        if n == 7:\n            break\n    return res",
        "grade-22": {
            "execution": 0
        },
        "155": "if n <= 0:\n        return []\n    s = [n]\n    if n % 2 == 0:\n        s.append(n + 2)\n    else:\n        s.append(n + 1)\n    for i in range(3, n + 1):\n        s.append(s[-1] + 2)\n    return s",
        "grade-155": {
            "execution": 0
        },
        "110": "assert n > 0, \"Number of stones should be a positive integer.\"\n    pile = [n]\n    for i in range(n - 1):\n        pile.append(pile[-1] + 2)\n    return pile",
        "grade-110": {
            "execution": 1
        },
        "8": "if n < 1:\n        raise ValueError(\"The number of levels cannot be less than 1.\")\n    stones = [n]\n    while stones[-1] != 0:\n        if stones[-1] % 2 == 0:\n            stones.append(stones[-1] + 2)\n        else:\n            stones.append(stones[-1] + 1)\n    return stones[:-1]",
        "grade-8": {
            "execution": 0
        },
        "7": "pile = [n]\n    for _ in range(n-1):\n        if pile[-1] % 2 == 0:\n            pile.append(pile[-1] + 2)\n        else:\n            pile.append(pile[-1] + 1)\n    return pile",
        "grade-7": {
            "execution": 0
        },
        "23": "res = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = (n + 1) // 2\n        res.append(n)\n    return res",
        "grade-23": {
            "execution": 0
        },
        "55": "assert isinstance(n, int) and n > 0, 'n must be a positive integer'\n    pile = [n]\n    while pile[-1] > 1:\n        if pile[-1] % 2 == 0:\n            pile.append(pile[-1] - 1)\n        else:\n            pile.append(pile[-1] + 1)\n    return pile",
        "grade-55": {
            "execution": 0
        },
        "59": "n = n + n % 2\n    pile = [n]\n    for i in range(int(n/2)):\n        n = n + 2\n        pile.append(n)\n    return pile",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "def solve(N: int) -> str:\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n",
        "snippet": [
            "    return bin(sum(int(i) for i in str(N)))[2:]\n"
        ],
        "simplified": "Given a positive integer N, return the total sum of its digits in binary.",
        "task_id": "84",
        "192": "# return str(bin(N)[2:]).count('1')\n    print(bin(N)[2:])\n    print(str(bin(N)[2:]).count('1'))\n    return str(bin(N)[2:]).count('1')",
        "grade-192": {
            "execution": 0
        },
        "29": "# convert the given integer to binary\n    bin_N = bin(N)[2:]\n    # count the number of 1s\n    ones = bin_N.count('1')\n    # return the number of 1s\n    return str(ones)",
        "grade-29": {
            "execution": 0
        },
        "7": "# check constraint\n    if 0 <= N <= 10000:\n        # convert N to binary number\n        binary_number = bin(N)[2:]\n        # convert binary number to list\n        binary_list = list(binary_number)\n        # sum the list\n        sum_of_digits = sum(int(i) for i in binary_list)\n        # convert sum to binary\n        sum_of_digits_in_binary = bin(sum_of_digits)[2:]\n        # output the sum of digits in binary\n        return sum_of_digits_in_binary\n    else:\n        print(\"Exceeds constraint.\")\nsolve(150)\n\n'''",
        "grade-7": {
            "execution": 0
        },
        "76": "n = \"{0:b}\".format(N)\n    print(n)\n    sum = 0\n    for i in n:\n        sum += int(i)\n    return str(sum)\n\nprint(solve(1000))",
        "grade-76": {
            "execution": 0
        },
        "66": "return str(sum(map(int, format(N, 'b'))))",
        "grade-66": {
            "execution": 0
        },
        "61": "b = bin(N)[2:]\n    return \"\".join(str(b.count(str(i))) for i in range(2))",
        "grade-61": {
            "execution": 0
        },
        "36": "sum_digits_decimal = 0\n    binary_string = ''\n    while(N > 0):\n        bit = N % 2\n        sum_digits_decimal += bit\n        binary_string = str(bit) + binary_string\n        N = N//2\n    return str(sum_digits_decimal)",
        "grade-36": {
            "execution": 0
        },
        "27": "return \"\"",
        "grade-27": {
            "execution": 0
        },
        "160": "deci_rep = f'{N:b}'\n    bin_rep = deci_rep.replace('0', '')\n    return bin_rep",
        "grade-160": {
            "execution": 0
        },
        "23": "#print(N)\n    # convert the integer in binary\n    print(bin(N))\n    # remove the bin prefix\n    new_bin = bin(N)[2:]\n    print(new_bin)\n    # initialize the variable for the sum\n    sum_bin = 0\n    #sum the number in the binary\n    for char in new_bin:\n        #print(char)\n        sum_bin += int(char)\n    return str(sum_bin)",
        "grade-23": {
            "execution": 0
        },
        "177": "# Generate the binary number\n    binary_number = bin(N)[2:]\n    # Convert the string to list of integers\n    digits = [int(d) for d in binary_number]\n    # Return the sum of the digit\n    return str(sum(digits))",
        "grade-177": {
            "execution": 0
        },
        "123": "return bin(N).count('1')",
        "grade-123": {
            "execution": 0
        },
        "9": "# convert to binary\n    bn = bin(N)[2:]\n    # sum each digit of binary number\n    return str(sum(map(int, bn)))",
        "grade-9": {
            "execution": 0
        },
        "8": "return str(bin(N)).replace('0b', '')\n\nprint(solve(1000))\nprint(solve(150))\nprint(solve(147))",
        "grade-8": {
            "execution": 0
        },
        "24": "# Create a set of all binary combinations\n    a = {bin(i)[2:] for i in range(N+1)}\n    # Print the sum of the digits for each number in the set\n    print([sum(int(d) for d in str(i)) for i in a])\n    return '\\n'.join(a)",
        "grade-24": {
            "execution": 0
        },
        "59": "binary = format(N, 'b')\n    return str(sum(map(int, list(binary))))",
        "grade-59": {
            "execution": 0
        },
        "63": "i = 1\n    while 2**i <= N:\n        i += 1\n    i -= 1\n    answer = \"\"\n    while i >= 0:\n        print(i)\n        if 2**i <= N:\n            answer += \"1\"\n            N -= 2**i\n        else:\n            answer += \"0\"\n        i -= 1\n    return answer\n\nprint(solve(1000))\nprint(solve(150))\nprint(solve(147))",
        "grade-63": {
            "execution": 0
        },
        "146": "return sum(int(i) for i in bin(N)[2:])",
        "grade-146": {
            "execution": 0
        },
        "181": "binary = bin(N)\n    sum = 0\n    for i in range(len(binary)):\n        if binary[i] != 'b':\n            sum += int(binary[i])\n    return str(sum)",
        "grade-181": {
            "execution": 0
        },
        "167": "return int_to_binary(N)",
        "grade-167": {
            "execution": 0
        }
    },
    {
        "intent": "def digits(n: int) -> int:\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n",
        "snippet": [
            "    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n"
        ],
        "simplified": "Given a positive integer n, return the product of the odd digits. Return 0 if all digits are even.",
        "task_id": "131",
        "198": "a = str(n)\n    b = 1\n    for i in a:\n        if int(i) % 2 != 0:\n            b *= int(i)\n    return b\n\n\nassert digits(1) == 1\nassert digits(4) == 0\nassert digits(235) == 15",
        "grade-198": {
            "execution": 0
        },
        "31": "x = 1\n    while n:\n        d = n % 10\n        if d % 2 == 1:\n            x *= d\n        n //= 10\n    return x",
        "grade-31": {
            "execution": 0
        },
        "6": "if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    else:\n        return int(str(n)[-1]) * digits(n // 10)",
        "grade-6": {
            "execution": 0
        },
        "81": "return max(reduce(lambda x, y: x * y, [int(c) for c in str(n) if c in \"13579\"]), 0)",
        "grade-81": {
            "execution": 0
        },
        "71": "if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return digits(n // 10)\n    else:\n        return (n % 10) * digits(n // 10)",
        "grade-71": {
            "execution": 0
        },
        "65": "return functools.reduce(\n        lambda x, y: x * y,\n        filter(lambda x: x % 2 == 1, list(map(int, str(n)))),\n        1,\n    )",
        "grade-65": {
            "execution": 0
        },
        "40": "assert n >= 0\n    if n == 0:\n        return 0\n    return n % 10 * digits(n // 10)\nassert digits(1)  == 1\nassert digits(4)  == 0\nassert digits(235) == 15\nassert digits(0) == 0",
        "grade-40": {
            "execution": 0
        },
        "28": "p = 1\n    for c in str(n):\n        if int(c) % 2 == 1:\n            p *= int(c)\n    return p",
        "grade-28": {
            "execution": 0
        },
        "168": "# method one\n    result = 0\n    for digit in str(n):\n        digit = int(digit)\n        if digit % 2 != 0:\n            result *= digit\n    return result\n\n    # method two\n    return functools.reduce(\n        operator.mul,\n        (int(d) for d in str(n) if int(d) % 2 != 0),\n        1\n    )",
        "grade-168": {
            "execution": 0
        },
        "24": "return helper(n, 1)",
        "grade-24": {
            "execution": 0
        },
        "184": "res = 1\n    for x in str(n):\n        if int(x) % 2 == 1:\n            res *= int(x)\n    return res\n\n\nprint(digits(1))\nprint(digits(4))\nprint(digits(235))",
        "grade-184": {
            "execution": 0
        },
        "125": "total = 1\n    for i in str(n):\n        if int(i) % 2 != 0:\n            total *= int(i)\n    return total",
        "grade-125": {
            "execution": 0
        },
        "8": "# 1 way\n    # product = 1\n    # for d in str(n):\n    #     if int(d) % 2 == 1:\n    #         product *= int(d)\n    # if product == 1:\n    #     return 0\n    # return product\n\n    # 2 way\n    return reduce(lambda x, y: x * y, (int(d) for d in str(n) if int(d) % 2)) or 0",
        "grade-8": {
            "execution": 0
        },
        "7": "if n < 0:\n        raise ValueError('input cannot be negative')\n    if n == 0:\n        return 0\n    prod = 1\n    while n > 0:\n        last_digit = n % 10\n        if last_digit % 2 == 1:\n            prod *= last_digit\n        n //= 10\n    return prod",
        "grade-7": {
            "execution": 0
        },
        "25": "r = 1\n    for i in str(n):\n        if int(i) % 2 != 0:\n            r *= int(i)\n    return r",
        "grade-25": {
            "execution": 0
        },
        "62": "numbers = [int(x) for x in str(n)]\n    product = 1\n    for x in numbers:\n        if x % 2 != 0:\n            product *= x\n    return product\n    # Alternative: return reduce(lambda x, y: x * y, (int(x) for x in str(n) if int(x) % 2 == 1), 1)",
        "grade-62": {
            "execution": 0
        },
        "68": "# TODO:\n    # Implement this function!\n    pass",
        "grade-68": {
            "execution": 0
        },
        "152": "return 1 if n == 1 else n % 10 * digits(n // 10) if n % 2 else digits(n // 10)\n\n\nassert digits(1) == 1\nassert digits(4) == 0\nassert digits(235) == 15\nassert digits(235235) == 225\nassert digits(0) == 0",
        "grade-152": {
            "execution": 0
        },
        "187": "if n < 0:\n        return 0\n    else:\n        str_list = list(str(n))\n        output = 1\n        for i in str_list:\n            if int(i) % 2 != 0:\n                output *= int(i)\n        return output",
        "grade-187": {
            "execution": 0
        },
        "173": "total = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            total *= digit\n        n //= 10\n    return total\n\n\nassert digits(1) == 1\nassert digits(4) == 0\nassert digits(235) == 15\nprint(\"Exercise 32 is correct.\")",
        "grade-173": {
            "execution": 0
        }
    },
    {
        "intent": "from typing import List\n\ndef eat(number: int, need: int, remaining: int) -> List[int]:\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n",
        "snippet": [
            "    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n"
        ],
        "simplified": "You're a hungry rabbit, and you already have eaten a certain number of carrots, but now you need to eat more carrots to complete the day's meals. you should return an array of [ total number of eaten carrots after your meals, the number of carrots left after your meals ] if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.",
        "task_id": "159",
        "191": "eaten = number + need\n    if remaining >= need:\n        return [eaten, remaining - need]\n    return [eaten, 0]",
        "grade-191": {
            "execution": 0
        },
        "28": "pass\n \n\nprint(eat(5, 6, 10)) # [11, 4]\nprint(eat(4, 8, 9)) # [12, 1]\nprint(eat(1, 10, 10)) # [11, 0]\nprint(eat(2, 11, 5)) # [7, 0]",
        "grade-28": {
            "execution": 0
        },
        "6": "if need == 0:\n        return [number, remaining]\n    if remaining == 0:\n        return [number, remaining]\n    if need >= remaining:\n        return [number + remaining, 0]\n    if need < remaining:\n        return [number + need, remaining - need]",
        "grade-6": {
            "execution": 1
        },
        "79": "# left = remaining - need\n    # if left >= 0:\n    #     eaten = number + need\n    #     return [eaten, left]\n    # else:\n    #     eaten = number + remaining\n    #     return [eaten, 0]\n    eaten = number + need\n    left = remaining - need\n    if left < 0:\n        eaten = number + remaining\n        left = 0\n    return [eaten, left]\n    # return [number + min(need, remaining), remaining - min(need, remaining)]",
        "grade-79": {
            "execution": 1
        },
        "68": "if remaining < (need - number):\n        return [remaining + number, 0]\n    else:\n        return [need, remaining - (need - number)]",
        "grade-68": {
            "execution": 0
        },
        "62": "if need >= remaining:\n        return [remaining + number, 0]\n    return [need + number, remaining - need]",
        "grade-62": {
            "execution": 1
        },
        "35": "eaten = 0\n    remaining_carrots = 0\n    if number + remaining >= need:\n        eaten = need\n        remaining_carrots = number + remaining - need\n    else:\n        eaten = number + remaining\n        remaining_carrots = 0\n    return [eaten, remaining_carrots]",
        "grade-35": {
            "execution": 0
        },
        "26": "# Your code goes here, good luck!\n    pass",
        "grade-26": {
            "execution": 0
        },
        "161": "# Write your code below\n    if need > number:\n        return [number + remaining, 0]\n    elif need < number:\n        return [number, remaining]\n    else:\n        return [number, remaining]",
        "grade-161": {
            "execution": 0
        },
        "22": "# your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    return \"Nah, Do it yourself\"",
        "grade-22": {
            "execution": 0
        },
        "178": "if remaining < need:\n        return [number + remaining, 0]\n    else:\n        return [number + need, remaining - need]",
        "grade-178": {
            "execution": 1
        },
        "122": "if need <= remaining:\n        return [need + number, remaining - need]\n    return [remaining + number, 0]",
        "grade-122": {
            "execution": 1
        },
        "8": "ans = [0, 0]\n    need -= number\n    if need <= remaining:\n        ans[0] = number + need\n        ans[1] = remaining - need\n    else:\n        ans[0] = number + remaining\n        ans[1] = 0\n    return ans",
        "grade-8": {
            "execution": 0
        },
        "7": "if remaining < need:\n        return [number + remaining, 0]\n    else:\n        return [number + need, remaining - need]",
        "grade-7": {
            "execution": 1
        },
        "23": "pass",
        "grade-23": {
            "execution": 0
        },
        "60": "return [min(need, number + remaining), remaining - (need - number)]",
        "grade-60": {
            "execution": 0
        },
        "64": "if number + need < remaining:\n        return [number + need, remaining - (number + need)]\n    else:\n        return [remaining, 0]",
        "grade-64": {
            "execution": 0
        },
        "148": "eaten_carrots = number + need\n    if need > remaining:\n        return [remaining + number, 0]\n    return [eaten_carrots, remaining - need]\n\nassert eat(5, 6, 10) == [11, 4]\nassert eat(4, 8, 9) == [12, 1]\nassert eat(1, 10, 10) == [11, 0]\nassert eat(2, 11, 5) == [7, 0]",
        "grade-148": {
            "execution": 1
        },
        "182": "if(number < 0 or number > 1000 or need < 0 or need > 1000 or remaining < 0 or remaining > 1000):\n        raise ValueError('number, need, and remaining must be in range [0, 1000]')\n    \n    if(remaining < need):\n        return [number + remaining, 0]\n    return [number + need, remaining - need]",
        "grade-182": {
            "execution": 1
        },
        "166": "if number + need < remaining:\n        return [number + need, remaining - (number + need)]\n    elif number + need == remaining:\n        return [number + need, 0]\n    else:\n        return [remaining, 0]",
        "grade-166": {
            "execution": 0
        }
    },
    {
        "intent": "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    \"\"\"\n",
        "snippet": [
            "    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n"
        ],
        "simplified": "Write a function that takes an integer a and returns True if this ingeger is a cube of some integer number. Note: you may assume the input is always valid.",
        "task_id": "77",
        "164": "# YOUR CODE HERE\n    return a in {x**3 for x in range(abs(a)+1)}",
        "grade-164": {
            "execution": 0
        },
        "28": "# your code here\n    return isinstance(a, int) and (a % 27 == 0 or a % 9 == 0 or a % 8 == 0 or a % 7 == 0 or a % 6 == 0 or a % 5 == 0 or a % 4 == 0 or a % 3 == 0 or a % 2 == 0 or a % 1 == 0)",
        "grade-28": {
            "execution": 0
        },
        "6": "return not a or a == 1 or (a < 0 and int(a ** (1 / 3)) ** 3 == a) or (a > 0 and int(a ** (1 / 3)) ** 3 == a)",
        "grade-6": {
            "execution": 0
        },
        "191": "if a == 0:\n        return True\n    a = abs(a)\n    return a == int(a ** (1/3)) ** 3",
        "grade-191": {
            "execution": 0
        },
        "70": "if a == 0:\n        return True\n    return a > 0 and int(round(a ** (1. / 3))) ** 3 == a",
        "grade-70": {
            "execution": 0
        },
        "62": "pass",
        "grade-62": {
            "execution": 0
        },
        "57": "return (a > 0 and round(a ** (1 / 3)) ** 3 == a) or (a == 0)",
        "grade-57": {
            "execution": 0
        },
        "35": "# your code here\n    return a >= 0 and a == int(round(a ** (1/3))) ** 3\n    \n    \n    \n    \nprint(iscube(1))\nprint(iscube(2))\nprint(iscube(-1))\nprint(iscube(64))\nprint(iscube(0))\nprint(iscube(180))",
        "grade-35": {
            "execution": 0
        },
        "190": "return a > 0 and a == a ** (1 / 3) or a <= 0 and a == a ** (1 / 3)",
        "grade-190": {
            "execution": 0
        },
        "26": "if a == 0:\n        return True\n    if a == 1:\n        return True\n    i = 2\n    while i < a:\n        if i ** 3 == a:\n            return True\n        i += 1\n    return False",
        "grade-26": {
            "execution": 0
        },
        "175": "pass\n\n\nassert iscube(1) == True\nassert iscube(2) == False\nassert iscube(-1) == True\nassert iscube(64) == True\nassert iscube(0) == True\nassert iscube(180) == False",
        "grade-175": {
            "execution": 0
        },
        "140": "if a == 0:\n        return True\n    elif a < 0:\n        return a % -1 == 0\n    else:\n        return a % 1 == 0\n    # write your code here",
        "grade-140": {
            "execution": 0
        },
        "22": "return a == 0 or a % 6 == 1",
        "grade-22": {
            "execution": 0
        },
        "152": "if a < 0:\n        a = -a\n    if a == 0:\n        return True\n    root = 1\n    while root ** 3 < a:\n        root += 1\n    return root ** 3 == a",
        "grade-152": {
            "execution": 1
        },
        "109": "return abs(a)**(1/3)%1 == 0",
        "grade-109": {
            "execution": 0
        },
        "8": "return True",
        "grade-8": {
            "execution": 0
        },
        "7": "# Your code here\n    return a >= 0 and int(round(a ** (1.0 / 3.0))) ** 3 == a",
        "grade-7": {
            "execution": 0
        },
        "23": "return a > 0 and a ** (1/3) % 1 == 0\nassert iscube(1) == True\nassert iscube(2) == False\nassert iscube(-1) == True\nassert iscube(64) == True\nassert iscube(0) == True\nassert iscube(180) == False",
        "grade-23": {
            "execution": 0
        },
        "55": "# # My solution:\n    # return a in [i ** 3 for i in range(abs(a) + 1)]\n\n    # # Clever solution:\n    # import math\n    # return bool(math.sqrt(a).is_integer())\n\n    # # Clever solution 2:\n    # from math import modf\n    # return not modf(a ** (1 / 3))[0]\n\n    # Clever solution 3:\n    return a > 0 and a == (a ** (1 / 3)) ** 3\n\n\nprint(iscube(1))\nprint(iscube(2))\nprint(iscube(-1))\nprint(iscube(64))\nprint(iscube(0))\nprint(iscube(180))",
        "grade-55": {
            "execution": 0
        },
        "59": "while a < 0:\n        a = -a\n    return (a**(1/3)).is_integer()",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "from typing import Union\n\ndef compare_one(a: Union[int, float, str], b: Union[int, float, str]) -> Union[int, float, str, None]:\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n",
        "snippet": [
            "    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n"
        ],
        "simplified": "Create a function that takes integers, floats, or strings representing real numbers, and returns the larger variable in its given variable type. Return None if the values are equal. Note: If a real number is represented as a string, the floating point might be . or ,",
        "task_id": "137",
        "178": "if a == b:\n        return None\n    if a is None or b is None:\n        return None\n    if type(a) != type(b):\n        return None\n    elif isinstance(a, str):\n        return str(max(int(a.replace(',', '.')), int(b.replace(',', '.'))))\n    else:\n        return max(a, b)\n\n\nimport unittest",
        "grade-178": {
            "execution": 0
        },
        "29": "if type(a) is type(b):\n        if a < b:\n            return b\n        elif a > b:\n            return a\n        else:\n            return None\n    else:\n        return None",
        "grade-29": {
            "execution": 0
        },
        "6": "if type(a) is not type(b):\n        return None\n    if type(a) is int:\n        return max(a, b)\n    if type(a) is float:\n        return max(a, b)\n    if type(a) is str:\n        a, b = float(a.replace(\",\", \".\")), float(b.replace(\",\", \".\"))\n        return max(a, b)",
        "grade-6": {
            "execution": 0
        },
        "75": "if a == b:\n        return None\n    else:\n        return a if a > b else b",
        "grade-75": {
            "execution": 0
        },
        "67": "if type(a) == type(b):\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n            return None\n    elif isinstance(a, (int, float)) and isinstance(b, str):\n        a, b = str(a), b\n    elif isinstance(a, str) and isinstance(b, (int, float)):\n        a, b = a, str(b)\n    a = a.replace(\".\", \"\")\n    b = b.replace(\".\", \"\")\n    if float(a) > float(b):\n        return float(a)\n    elif float(a) < float(b):\n        return float(b)\n    else:\n        return None\n\nassert compare_one(1, 2.5) == 2.5\nassert compare_one(1, \"2,3\") == \"2,3\"\nassert compare_one(\"5,1\", \"6\") == \"6\"\nassert compare_one(\"1\", 1) == None",
        "grade-67": {
            "execution": 0
        },
        "60": "if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None\n\nassert compare_one(1, 2.5) == 2.5\nassert compare_one(1, \"2,3\") == \"2,3\"\nassert compare_one(\"5,1\", \"6\") == \"6\"\nassert compare_one(\"1\", 1) == None\n\nprint('Success')",
        "grade-60": {
            "execution": 0
        },
        "36": "pass",
        "grade-36": {
            "execution": 0
        },
        "27": "if type(a) == type(b):\n        return None\n    elif type(a) == str:\n        try:\n            a = float(a.replace(\",\", \".\"))\n        except ValueError:\n            pass\n    elif type(b) == str:\n        try:\n            b = float(b.replace(\",\", \".\"))\n        except ValueError:\n            pass\n    if a > b:\n        return a\n    else:\n        return b\nprint(compare_one(1, \"2,3\"))",
        "grade-27": {
            "execution": 0
        },
        "192": "#if type(a) == type(b):\n    #    return None\n    if isinstance(a, int) and isinstance(b, int):\n        return max(a, b)\n    elif isinstance(a, float) and isinstance(b, float):\n        return max(a, b)\n    elif isinstance(a, str) and isinstance(b, str):\n        return max(a, b)\n    else:\n        return None",
        "grade-192": {
            "execution": 0
        },
        "151": "if isinstance(a, str) and isinstance(b, str):\n        try:\n            a = float(a.replace(\",\", \".\"))\n            b = float(b.replace(\",\", \".\"))\n        except ValueError:\n            return None\n    elif isinstance(a, float) and isinstance(b, float):\n        pass\n    elif isinstance(a, int) and isinstance(b, int):\n        pass\n    else:\n        return None\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b",
        "grade-151": {
            "execution": 0
        },
        "23": "if a == b:\n        return None\n    elif isinstance(a, str) and isinstance(b, str):\n        return max(a, b)\n    elif isinstance(a, float) and isinstance(b, float):\n        return max(a, b)\n    elif isinstance(a, int) and isinstance(b, int):\n        return max(a, b)\n    elif isinstance(a, str) and isinstance(b, float):\n        return b\n    elif isinstance(a, float) and isinstance(b, str):\n        return a\n    elif isinstance(a, int) and isinstance(b, str):\n        return b\n    elif isinstance(a, str) and isinstance(b, int):\n        return a",
        "grade-23": {
            "execution": 0
        },
        "164": "if type(a) == type(b):\n        return max(a, b)\n    else:\n        return None\n    \n    \n    \nassert compare_one(1, 2.5) == 2.5\nassert compare_one(1, \"2,3\") == \"2,3\"\nassert compare_one(\"5,1\", \"6\") == \"6\"\nassert compare_one(\"1\", 1) == None\n \n \nprint(\"Success\")",
        "grade-164": {
            "execution": 0
        },
        "116": "if type(a) is str:\n        a = float(a.replace(\",\", \".\"))\n    if type(b) is str:\n        b = float(b.replace(\",\", \".\"))\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    elif b > a:\n        return b\n\nprint(compare_one(1, 2.5))\nprint(compare_one(1, \"2,3\"))\nprint(compare_one(\"5,1\", \"6\"))\nprint(compare_one(\"1\", 1))",
        "grade-116": {
            "execution": 0
        },
        "8": "if type(a) == type(b):\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        elif a == b:\n            return None\n    elif type(a) != type(b):\n        if type(a) == str:\n            a = a.replace(\",\", \".\")\n            if \".\" in a:\n                a = float(a)\n            else:\n                a = int(a)\n        elif type(b) == str:\n            b = b.replace(\",\", \".\")\n            if \".\" in b:\n                b = float(b)\n            else:\n                b = int(b)\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        elif a == b:\n            return None",
        "grade-8": {
            "execution": 0
        },
        "7": "# My solution\n    if type(a) == type(b):\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n            return None\n    if type(a) == str:\n        a = float(a.replace(\",\", \".\"))\n    if type(b) == str:\n        b = float(b.replace(\",\", \".\"))\n    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return None\n\n    # solution2\n    # if type(a) != type(b):\n    #     a, b = float(a), float(b)\n    # if a > b:\n    #     return a\n    # elif a < b:\n    #     return b\n    # else:\n    #     return None\n\n    # solution3\n    # if type(a) != type(b):\n    #     if type(a) == str:\n    #         a = float(a.replace(\",\", \".\"))\n    #     if type(b) == str:\n    #         b = float(b.replace(\",\", \".\"))\n    # if a > b:\n    #     return a\n    # elif a < b:\n    #     return b\n    # else:\n    #     return None\n\n    # solution4\n    # if type(a) != type(b):\n    #     if type(a) == str:\n    #         a = float(a.replace(\",\", \".\"))\n    #     if type(b) == str:\n    #         b = float(b.replace(\",\", \".\"))\n    # if a > b:\n    #     return a\n    # return b if a < b else None\n\n    # solution5\n    # import math\n    # def compare_one(a, b):\n    #     return max(a, b) if type(a) == type(b) else math.inf\n    # if a > b:\n    #     return a\n    # elif a < b:\n    #     return b\n    # else:\n    #     return None\n\n    # solution6",
        "grade-7": {
            "execution": 0
        },
        "24": "if type(a) != type(b):\n        return None\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None\n\nassert compare_one(1, 2.5) == 2.5\nassert compare_one(1, \"2,3\") == \"2,3\"\nassert compare_one(\"5,1\", \"6\") == \"6\"\nassert compare_one(\"1\", 1) == None",
        "grade-24": {
            "execution": 0
        },
        "58": "if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b\n\nprint(compare_one(1, 2.5))",
        "grade-58": {
            "execution": 0
        },
        "64": "if isinstance(a, str) and isinstance(b, str):\n        a = a.replace(\",\", \".\")\n        b = b.replace(\",\", \".\")\n        if float(a) > float(b):\n            return a\n        elif float(a) < float(b):\n            return b\n        else:\n            return None\n    elif isinstance(a, int) and isinstance(b, str):\n        b = b.replace(\",\", \".\")\n        if a > float(b):\n            return a\n        elif a < float(b):\n            return b\n        else:\n            return None\n    elif isinstance(a, str) and isinstance(b, int):\n        a = a.replace(\",\", \".\")\n        if float(a) > b:\n            return a\n        elif float(a) < b:\n            return b\n        else:\n            return None\n    elif isinstance(a, float) and isinstance(b, str):\n        b = b.replace(\",\", \".\")\n        if a > float(b):\n            return a\n        elif a < float(b):\n            return b\n        else:\n            return None\n    elif isinstance(a, str) and isinstance(b, float):\n        a = a.replace(\",\", \".\")\n        if float(a) > b:\n            return a\n        elif float(a) < b:\n            return b\n        else:\n            return None\n    elif isinstance(a, int) and isinstance(b, float):\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n            return None\n    elif isinstance(a, float) and isinstance(b, int):\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n            return None\n    elif isinstance(a, int) and isinstance(b, int):\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n            return None\n    elif isinstance(a, float)",
        "grade-64": {
            "execution": 0
        },
        "141": "if type(a) != type(b):\n        return None\n    elif a == b:\n        return None\n    else:\n        return a if a > b else b",
        "grade-141": {
            "execution": 0
        },
        "168": "try:\n        if float(a) > float(b):\n            return a\n        elif float(a) < float(b):\n            return b\n        else:\n            return None\n    except:\n        if a == b:\n            return None\n        else:\n            return a if a > b else b",
        "grade-168": {
            "execution": 0
        }
    },
    {
        "intent": "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n",
        "snippet": [
            "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n"
        ],
        "simplified": "Given the lengths of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise return -1 Three sides make a valid triangle when the sum of any two sides is greater than the third side.",
        "task_id": "71",
        "180": "if is_triangle(a, b, c):\n        p = (a + b + c) / 2\n        area = math.sqrt(p * (p - a) * (p - b) * (p - c))\n        return round(area, 2)\n    else:\n        return -1",
        "grade-180": {
            "execution": 0
        },
        "29": "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    else:\n        return -1",
        "grade-29": {
            "execution": 0
        },
        "6": "def is_valid_triangle(a, b, c):\n        return a + b > c and a + c > b and b + c > a\n\n    if is_valid_triangle(a, b, c):\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1",
        "grade-6": {
            "execution": 0
        },
        "72": "s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    if area > 0:\n        return round(area, 2)\n    else:\n        return -1",
        "grade-72": {
            "execution": 0
        },
        "63": "x = a + b\n    y = b + c\n    z = a + c\n    if x < c or y < a or z < b:\n        return -1\n    else:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\nprint(triangle_area(1, 2, 10))\nprint(triangle_area(5, 4, 3))",
        "grade-63": {
            "execution": 0
        },
        "58": "s = (a + b + c) / 2.0\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    if area > 0:\n        return round(area, 2)\n    else:\n        return -1",
        "grade-58": {
            "execution": 0
        },
        "36": "# Your code goes here!\n    def is_valid(a, b, c):\n        if a + b <= c or a + c <= b or b + c <= a:\n            return False\n        return True\n    if is_valid(a, b, c):\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    return -1",
        "grade-36": {
            "execution": 1
        },
        "26": "area = 0.0\n    if(a > 0 and b > 0 and c > 0):\n        p = (a + b + c) / 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n    return round(area, 2)",
        "grade-26": {
            "execution": 0
        },
        "192": "sides = [a, b, c]\n    if max(sides) >= sum(sides) - max(sides):\n        return -1\n\n    p = sum(sides) / 2\n    return round(sqrt(p * (p - a) * (p - b) * (p - c)), 2)",
        "grade-192": {
            "execution": 0
        },
        "146": "if (a + b > c) and (a + c > b) and (b + c > a):\n        p = (a + b + c) / 2\n        s = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(s, 2)\n    else:\n        return -1",
        "grade-146": {
            "execution": 1
        },
        "22": "p = (a + b + c) / 2\n    area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n    return round(area, 2) if a + b > c and a + c > b and b + c > a else -1",
        "grade-22": {
            "execution": 1
        },
        "162": "sides = sorted([a, b, c])\n    if sides[0] + sides[1] > sides[2]:\n        p = sum(sides) / 2\n        return round(sqrt(p * (p - sides[0]) * (p - sides[1]) * (p - sides[2])), 2)\n    return -1",
        "grade-162": {
            "execution": 0
        },
        "111": "pass\nimport math",
        "grade-111": {
            "execution": 0
        },
        "8": "p = (a + b + c) / 2\n    if a + b > c and a + c > b and b + c > a:\n        return round(sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n    else:\n        return -1",
        "grade-8": {
            "execution": 0
        },
        "7": "p = (a + b + c) / 2\n    if p - a and p - b and p - c > 0:\n        return round(math.sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n    return -1\n\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))",
        "grade-7": {
            "execution": 0
        },
        "23": "s = (a + b + c) / 2\n    if s - a > 0 and s - b > 0 and s - c > 0:\n        return round(sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n    return -1",
        "grade-23": {
            "execution": 0
        },
        "56": "if not (a + b > c and a + c > b and b + c > a):\n        return -1\n\n    # https://en.wikipedia.org/wiki/Heron%27s_formula\n    p = (a + b + c) / 2\n    return (p * (p - a) * (p - b) * (p - c)) ** 0.5",
        "grade-56": {
            "execution": 0
        },
        "60": "if a < b + c and b < a + c and c < a + b:\n        p = (a + b + c) / 2\n        s = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(s, 2)\n    else:\n        return -1",
        "grade-60": {
            "execution": 1
        },
        "134": "sides = [a, b, c]\n    sides.sort()\n    side_a, side_b, side_c = sides\n    if side_a + side_b <= side_c:\n        return -1\n    semi_perimeter = sum(sides) / 2\n    area = sqrt(semi_perimeter * (semi_perimeter - side_a) * (semi_perimeter - side_b) * (semi_perimeter - side_c))\n    return round(area, 2)",
        "grade-134": {
            "execution": 0
        },
        "165": "t = sorted([a, b, c])\n    if t[0] + t[1] > t[2]:\n        return round(t[0] * t[1] / 2, 2)\n    else:\n        return -1",
        "grade-165": {
            "execution": 0
        }
    },
    {
        "intent": "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n",
        "snippet": [
            "    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n"
        ],
        "simplified": "Given an array arr of integers and a positive integer k, return a sorted list of length k with the maximum k numbers in arr. Note: 1. The length of the array will be in the range of [1, 1000]. 2. The elements in the array will be in the range of [-1000, 1000]. 3. 0 <= k <= len(arr)",
        "task_id": "120",
        "144": "if not arr:\n        return arr\n    if k == 0:\n        return []\n    else:\n        heap = [-float('inf')] * k\n        for num in arr:\n            if num > heap[0]:\n                heapq.heappushpop(heap, num)\n        return heap",
        "grade-144": {
            "execution": 0
        },
        "20": "from heapq import heappush, heappop\n    from collections import defaultdict\n\n    h = []\n    m = defaultdict(list)\n    for a in arr:\n        m[a].append(a)\n        heappush(h, a)\n        if len(h) > k:\n            min_ = heappop(h)\n            m[min_].pop()\n            if not m[min_]:\n                del m[min_]\n\n    return m[max(m)]",
        "grade-20": {
            "execution": 0
        },
        "3": "return sorted(arr, reverse=True)[:k]\n\nprint(maximum([-3, -4, 5], 3))\nprint(maximum([4, -4, 4], 2))\nprint(maximum([-3, 2, 1, 2, -1, -2, 1], 1))",
        "grade-3": {
            "execution": 0
        },
        "170": "import heapq\n    heapq.heapify(arr)\n    return [heapq.heappop(arr) for _ in range(k)]",
        "grade-170": {
            "execution": 0
        },
        "63": "heap = []\n    for i in range(k):\n        heapq.heappush(heap, arr[i])\n    for i in range(k, len(arr)):\n        if arr[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arr[i])\n    return heap",
        "grade-63": {
            "execution": 0
        },
        "58": "pq = []\n    for num in arr:\n        heappush(pq, -num)\n        if len(pq) > k:\n            heappop(pq)\n    return sorted([-heappop(pq) for _ in range(k)])",
        "grade-58": {
            "execution": 0
        },
        "44": "return heapq.nlargest(k, arr)",
        "grade-44": {
            "execution": 0
        },
        "26": "heapq.heapify(arr)\n    return heapq.nlargest(k, arr)",
        "grade-26": {
            "execution": 0
        },
        "18": "# Reference: https://stackoverflow.com/questions/6193498/pythonic-way-to-find-maximum-value-and-its-index-in-a-list\n    return sorted(arr, reverse=True)[:k]",
        "grade-18": {
            "execution": 0
        },
        "154": "#return heapq.nlargest(k, arr)\n    heapq.heapify(arr)\n    return [heapq.heappop(arr) for _ in range(k)]\n\nprint(maximum([-3, -4, 5], 3))",
        "grade-154": {
            "execution": 0
        },
        "124": "return arr",
        "grade-124": {
            "execution": 0
        },
        "16": "queue = []\n    for i in range(len(arr)):\n        while queue and arr[i] > queue[-1]:\n            queue.pop()\n        queue.append(arr[i])\n        if len(queue) > k:\n            queue.pop(0)\n    return queue",
        "grade-16": {
            "execution": 0
        },
        "133": "res = sorted(arr, reverse=True)\n    return res[:k]",
        "grade-133": {
            "execution": 0
        },
        "94": "# Create a heap and add first k numbers to it\n    h = heapq.heapify(arr[:k])\n\n    # Loop through the rest of the elements\n    for i in range(k, len(arr)):\n        # Compare the next element to the heap's max\n        if arr[i] > h[0]:\n            # If next element is greater than max, pop max and insert new element into heap\n            heapq.heappop(h)\n            heapq.heappush(h, arr[i])\n\n    # Return the heap and turn it into a list\n    return list(h)",
        "grade-94": {
            "execution": 0
        },
        "5": "ans = heapq.nlargest(k, arr)\n    return ans",
        "grade-5": {
            "execution": 0
        },
        "43": "heap = []\n    for num in arr:\n        heapq.heappush(heap, (-num, num))\n    res = []\n    for _ in range(k):\n        res.append(heapq.heappop(heap)[1])\n    return res",
        "grade-43": {
            "execution": 0
        },
        "45": "heap = Heap()\n    for num in arr:\n        heap.push(num)\n    return heap.sort()",
        "grade-45": {
            "execution": 0
        },
        "115": "arr.sort()\n    return arr[::-1][:k]",
        "grade-115": {
            "execution": 0
        },
        "136": "# heapq.nlargest(k, arr)\n    heapq.heapify(arr)\n    return heapq.nlargest(k, arr)",
        "grade-136": {
            "execution": 0
        },
        "128": "import heapq\n    output = []\n    for i in arr:\n        heapq.heappush(output, -i)\n        if len(output) > k:\n            heapq.heappop(output)\n    return [-i for i in heapq.nlargest(k, output)]",
        "grade-128": {
            "execution": 0
        }
    },
    {
        "intent": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n",
        "snippet": [
            "    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n"
        ],
        "simplified": "brackets is a string of \"<\" and \">\". return True if every opening bracket has a corresponding closing bracket.",
        "task_id": "56",
        "190": "count = 0\n    for char in brackets:\n        if char == \"<\":\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0",
        "grade-190": {
            "execution": 1
        },
        "28": "count = 0\n    for ch in brackets:\n        if ch == \"<\":\n            count += 1\n        elif ch == \">\":\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0",
        "grade-28": {
            "execution": 1
        },
        "6": "count = 0\n    for char in brackets:\n        if char == \"<\":\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0",
        "grade-6": {
            "execution": 1
        },
        "76": "count = 0\n    for ch in brackets:\n        if ch == \"<\":\n            count += 1\n        elif ch == \">\":\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0",
        "grade-76": {
            "execution": 1
        },
        "68": "count = 0\n    for c in brackets:\n        if c == \"<\":\n            count += 1\n        elif c == \">\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0",
        "grade-68": {
            "execution": 1
        },
        "62": "number_of_open_brackets = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            number_of_open_brackets += 1\n        elif bracket == \">\":\n            number_of_open_brackets -= 1\n            if number_of_open_brackets < 0:\n                return False\n    return number_of_open_brackets == 0",
        "grade-62": {
            "execution": 1
        },
        "36": "number_of_open_brackets = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            number_of_open_brackets += 1\n        elif bracket == \">\":\n            number_of_open_brackets -= 1\n        if number_of_open_brackets < 0:\n            return False\n    return number_of_open_brackets == 0",
        "grade-36": {
            "execution": 1
        },
        "26": "close = 0\n    for bracket in brackets:\n        if bracket == '<':\n            close += 1\n        elif bracket == '>':\n            close -= 1\n            if close < 0:\n                return False\n    return close == 0",
        "grade-26": {
            "execution": 1
        },
        "157": "counter = 0\n    for i in brackets:\n        if i == \"<\":\n            counter += 1\n        elif i == \">\":\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter == 0",
        "grade-157": {
            "execution": 1
        },
        "22": "n = 0\n    for ch in brackets:\n        if ch == \"<\":\n            n += 1\n        else:\n            n -= 1\n        if n < 0:\n            return False\n    return n == 0",
        "grade-22": {
            "execution": 1
        },
        "174": "num_left_brackets = 0\n    for c in brackets:\n        if c == \"<\":\n            num_left_brackets += 1\n        elif c == \">\":\n            num_left_brackets -= 1\n        if num_left_brackets < 0:\n            return False\n    return num_left_brackets == 0",
        "grade-174": {
            "execution": 1
        },
        "121": "bracket_stack = Stack()\n    #print(\"brackets: \" + brackets)\n    for char in brackets:\n        #print(\"char: \" + char)\n        if char == \"<\":\n            bracket_stack.push(char)\n        else:\n            if bracket_stack.is_empty():\n                return False\n            else:\n                bracket_stack.pop()\n    if bracket_stack.is_empty():\n        return True\n    else:\n        return False",
        "grade-121": {
            "execution": 0
        },
        "8": "count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            count += 1\n        elif bracket == \">\":\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0",
        "grade-8": {
            "execution": 1
        },
        "7": "return brackets.count(\"<\") == brackets.count(\">\")",
        "grade-7": {
            "execution": 0
        },
        "23": "num_open = 0\n    for ch in brackets:\n        if ch == \"<\":\n            num_open += 1\n        elif ch == \">\":\n            num_open -= 1\n        if num_open < 0:\n            return False\n    return num_open == 0",
        "grade-23": {
            "execution": 1
        },
        "60": "count = 0\n    for elem in brackets:\n        if elem == \"<\":\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0",
        "grade-60": {
            "execution": 1
        },
        "65": "# This function is already implemented. Do not edit it.\n    return brackets.count(\"<\") == brackets.count(\">\")",
        "grade-65": {
            "execution": 0
        },
        "145": "count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            count += 1\n        elif bracket == \">\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0",
        "grade-145": {
            "execution": 1
        },
        "177": "stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        else:\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return not stack",
        "grade-177": {
            "execution": 1
        },
        "164": "if len(brackets) % 2 != 0:\n        return False\n    else:\n        right_brackets = brackets.count('>')\n        left_brackets = brackets.count('<')\n        if right_brackets != left_brackets:\n            return False\n        else:\n            return True\n    # hint: for every opening bracket,\n    # you must find a closing bracket somewhere later",
        "grade-164": {
            "execution": 0
        }
    },
    {
        "intent": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n",
        "snippet": [
            "    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n"
        ],
        "simplified": "Given a string s and a natural number n, you have been tasked to implement a function that returns a list of all words from string s that contain exactly n consonants, in order these words appear in the string s. If the string s is empty then the function should return an empty list. Note: you may assume the input string contains only letters and spaces.",
        "task_id": "117",
        "173": "ret = []\n    for word in s.split(\" \"):\n        vowel = 0\n        for c in word:\n            if c in \"aeiouAEIOU\":\n                vowel += 1\n        if len(word) - vowel == n:\n            ret.append(word)\n    return ret",
        "grade-173": {
            "execution": 1
        },
        "28": "word_count = []\n    if s == \"\":\n        return word_count\n    s = s.split(\" \")\n    for x in s:\n        if len(x) - sum(1 for c in x if c in 'aeiouAEIOU') == n:\n            word_count.append(x)\n    return word_count\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
        "grade-28": {
            "execution": 1
        },
        "6": "# result = []\n    # s = s.split()\n    # for word in s:\n    #     consonants = 0\n    #     for letter in word:\n    #         if letter not in \"aeiouAEIOU\":\n    #             consonants += 1\n    #     if consonants == n:\n    #         result.append(word)\n    # return result\n    return [word for word in s.split() if sum(1 for letter in word if letter not in \"aeiouAEIOU\") == n]\n\nprint(select_words(\"Mary had a little lamb\", 4)) # [\"little\"]\nprint(select_words(\"Mary had a little lamb\", 3)) # [\"Mary\", \"lamb\"]\nprint(select_words(\"simple white space\", 2)) # []\nprint(select_words(\"Hello world\", 4)) # [\"world\"]\nprint(select_words(\"Uncle sam\", 3)) # [\"Uncle\"]",
        "grade-6": {
            "execution": 1
        },
        "72": "all_words = []\n    vowel = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    word = []\n    for letter in s:\n        if letter != \" \":\n            word.append(letter)\n        else:\n            all_words.append(word)\n            word = []\n    all_words.append(word)\n    # Now all_words is a list of word lists\n    # Next we want to create a list of vowels and consonants in each word\n    # Then we count the consonants in each word\n    # Then we just print the words with n consonants\n    vowels_and_consonants = []\n    for word in all_words:\n        vowel_and_consonant = []\n        for letter in word:\n            if letter in vowel:\n                vowel_and_consonant.append(\"vowel\")\n            else:\n                vowel_and_consonant.append(\"consonant\")\n        vowels_and_consonants.append(vowel_and_consonant)\n    words_with_n_consonants = []\n    for word in vowels_and_consonants:\n        if word.count(\"consonant\") == n:\n            words_with_n_consonants.append(word)\n    # to replace vowel with spaces and remove spaces\n    # https://stackoverflow.com/questions/32022204/replace-all-vowels-with-a-space-python\n    # not sure how to replace consonants with spaces now, keep trying later\n    # remove spaces\n    # https://stackoverflow.com/questions/3675646/how-to-remove-all-spaces-in-a-string-in-python\n    print(words_with_n_consonants)\n    return words_with_n_consonants",
        "grade-72": {
            "execution": 0
        },
        "64": "l = s.split()\n    l1 = [w for w in l if len([c for c in w if c not in \"aeiou\"]) == n]\n    return l1",
        "grade-64": {
            "execution": 0
        },
        "59": "cons = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \")\n    new_words = []\n    for word in words:\n        count = 0\n        for char in word:\n            if char.lower() in cons:\n                count += 1\n        if count == n:\n            new_words.append(word)\n    return new_words",
        "grade-59": {
            "execution": 1
        },
        "37": "vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    words = s.split()\n    result = []\n    for w in words:\n        c = 0\n        for letter in w:\n            if letter.lower() not in vowels:\n                c += 1\n        if c == n:\n            result.append(w)\n    return result\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))",
        "grade-37": {
            "execution": 1
        },
        "26": "lst = s.split()\n    res = []\n    for word in lst:\n        count = 0\n        for ch in word:\n            if ch not in \"aeiouAEIOU\":\n                count += 1\n        if count == n:\n            res.append(word)\n    return res",
        "grade-26": {
            "execution": 1
        },
        "184": "pass\n\n\nimport string",
        "grade-184": {
            "execution": 0
        },
        "145": "# word_list = s.split()\n    # result = []\n    # for word in word_list:\n    #     consonant_count = 0\n    #     for letter in word:\n    #         if letter.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]:\n    #             consonant_count += 1\n    #     if consonant_count == n:\n    #         result.append(word)\n    # return result\n\n    # another solution:\n    # return [word for word in s.split() if len([c for c in word if c.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]]) == n]\n\n    # or:\n    return [word for word in s.split() if len(set(word.lower()) - set(\"aeiou\")) == n]",
        "grade-145": {
            "execution": 0
        },
        "22": "return [w for w in s.split() if sum(1 for l in w if l not in 'aeiou') == n]",
        "grade-22": {
            "execution": 0
        },
        "157": "s = s.split()\n    l = []\n    for i in s:\n        if i.isalpha():\n            i = i.lower()\n            m = 0\n            for j in i:\n                if j == 'a' or j == 'e' or j == 'i' or j == 'o' or j == 'u':\n                    m += 1\n            if m == n:\n                l.append(i)\n    return l",
        "grade-157": {
            "execution": 0
        },
        "112": "vowels = {'a', 'e', 'i', 'o', 'u'}\n    results = []\n    for word in s.split():\n        num_consonants = 0\n        for char in word:\n            if char.lower() not in vowels:\n                num_consonants += 1\n        if num_consonants == n:\n            results.append(word)\n    return results",
        "grade-112": {
            "execution": 1
        },
        "8": "if not s:\n        return []\n    s = s.split(\" \")\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    word = \"\"\n    words = []\n    for i in s:\n        if not i:\n            continue\n        word = i.lower()\n        count = 0\n        for x in word:\n            if x not in vowels:\n                count += 1\n        if count == n:\n            words.append(i)\n    return words",
        "grade-8": {
            "execution": 1
        },
        "7": "vowels = ('a', 'e', 'i', 'o', 'u')\n    words = s.split()\n    words_n_consonants = []\n    for word in words:\n        num_of_consonants = 0\n        for letter in word:\n            if letter.lower() not in vowels:\n                num_of_consonants += 1\n        if num_of_consonants == n:\n            words_n_consonants.append(word)\n    return words_n_consonants",
        "grade-7": {
            "execution": 1
        },
        "23": "vowels = \"aeiouAEIOU\"\n    string = s.split()\n    return [word for word in string if len([c for c in word if c not in vowels]) == n]",
        "grade-23": {
            "execution": 1
        },
        "57": "vowel = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    words = s.split()\n    num_consonants = []\n    selected_words = []\n    for word in words:\n        num_consonants.append(len([1 for letter in word if letter.lower() not in vowel]))\n    for i in range(len(num_consonants)):\n        if num_consonants[i] == n:\n            selected_words.append(words[i])\n    return selected_words",
        "grade-57": {
            "execution": 1
        },
        "61": "words = s.split()\n    out = []\n    for word in words:\n        if count_consonants(word) == n:\n            out.append(word)\n    return out",
        "grade-61": {
            "execution": 0
        },
        "135": "vowels = \"aeiou\"\n    words = s.split()\n    ret = []\n    for word in words:\n        count = 0\n        for char in word:\n            if char.lower() not in vowels:\n                count += 1\n        if count == n:\n            ret.append(word)\n    return ret",
        "grade-135": {
            "execution": 1
        },
        "160": "# Your code here\n    # Approach:\n    # 1. Split string on space\n    # 2. Loop through each word\n    # 3. Filter for words with correct number of consonants\n    # 4. Return list\n    word_list = s.split()\n    return [word for word in word_list if sum(1 for c in word if c.lower() not in 'aeiou') == n]",
        "grade-160": {
            "execution": 1
        }
    },
    {
        "intent": "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n",
        "snippet": [
            "    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n"
        ],
        "simplified": "You have been tasked to write a function that receives a hexadecimal number as a string and counts the number of hexadecimal digits that are primes (prime number, or a prime, is a natural number greater than 1 that is not a product of two smaller natural numbers). Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Prime numbers are 2, 3, 5, 7, 11, 13, 17,... So you have to determine a number of the following digits: 2, 3, 5, 7, B (=decimal 11), D (=decimal 13). Note: you may assume the input is always correct or empty string, and symbols A,B,C,D,E,F are always uppercase.",
        "task_id": "78",
        "171": "num_list = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    counter = 0\n    for i in num:\n        if i in num_list:\n            counter += 1\n    return counter",
        "grade-171": {
            "execution": 1
        },
        "28": "primes = {'2', '3', '5', '7', 'B', 'D'}\n    return len([x for x in num if x in primes])",
        "grade-28": {
            "execution": 1
        },
        "6": "count = 0\n    if not num:\n        return count\n    for h in num:\n        if h in \"2357BD\":\n            count += 1\n    return count",
        "grade-6": {
            "execution": 1
        },
        "197": "primes = [2, 3, 5, 7, 11, 13]\n    return len([i for i in num if int(i, 16) in primes])\n\n\nprint(hex_key(\"AB\"))\nprint(hex_key(\"1077E\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\nprint(hex_key(\"2020\"))\nprint(hex_key(\"\"))",
        "grade-197": {
            "execution": 1
        },
        "73": "hex_primes = ['2', '3', '5', '7', 'B', 'D']\n    return len([h for h in num if h in hex_primes])",
        "grade-73": {
            "execution": 1
        },
        "65": "primes = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    return sum(str(digit) in primes for digit in num)\n\n\nprint(hex_key(\"AB\"))\nprint(hex_key(\"1077E\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\nprint(hex_key(\"2020\"))\n\nassert hex_key(\"AB\") == 1\nassert hex_key(\"1077E\") == 2\nassert hex_key(\"ABED1A33\") == 4\nassert hex_key(\"123456789ABCDEF0\") == 6\nassert hex_key(\"2020\") == 2",
        "grade-65": {
            "execution": 1
        },
        "59": "primes = '2357BD'\n    return sum(1 for c in num if c in primes)",
        "grade-59": {
            "execution": 1
        },
        "36": "primes = \"2357BD\"\n    return sum(1 for c in num if c in primes)",
        "grade-36": {
            "execution": 1
        },
        "196": "hex_primes = ['2', '3', '5', '7', 'B', 'D']\n    return len([x for x in num if x in hex_primes])\n\n\nprint(hex_key(\"AB\")) # 1\nprint(hex_key(\"1077E\")) # 2\nprint(hex_key(\"ABED1A33\")) # 4\nprint(hex_key(\"123456789ABCDEF0\")) # 6\nprint(hex_key(\"2020\")) # 2",
        "grade-196": {
            "execution": 1
        },
        "26": "# histogram = collections.Counter(num)\n    # count = 0\n    # for key in histogram:\n    #     val = int(key, 16)\n    #     if val in [2, 3, 5, 7, 11, 13] and val > 1:\n    #         count += histogram[key]\n    # return count\n    return sum(int(c, 16) in [2, 3, 5, 7, 11, 13] for c in num)",
        "grade-26": {
            "execution": 1
        },
        "181": "# 1. Create a set of primes in hex\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count\n\n\nprint(hex_key(\"AB\"))\nprint(hex_key(\"1077E\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\nprint(hex_key(\"2020\"))\nprint(hex_key(\"\"))\nprint(hex_key(\"8F\"))",
        "grade-181": {
            "execution": 1
        },
        "145": "\"\"\"\n    Hexal system\n    0 1 2 3 4 5 6 7 8 9 A B C D E F\n    0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\n    \"\"\"\n    primes = (2, 3, 5, 7, 11, 13)\n    conv = {\n        'A': 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    hex_sum = 0\n    for ch in num:\n        if ch in conv:\n            ch = conv[ch]\n        if int(ch) in primes:\n            hex_sum += 1\n    return hex_sum",
        "grade-145": {
            "execution": 1
        },
        "22": "count = 0\n    for i in num:\n        if i in \"2357BDF\":\n            count += 1\n    return count\n\nassert hex_key(\"AB\") == 1\nassert hex_key(\"1077E\") == 2\nassert hex_key(\"ABED1A33\") == 4\nassert hex_key(\"123456789ABCDEF0\") == 6\nassert hex_key(\"2020\") == 2\nprint(\"PASSED\")\n\nprint(hex_key(\"AB\"))\nprint(hex_key(\"1077E\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\nprint(hex_key(\"2020\"))",
        "grade-22": {
            "execution": 0
        },
        "157": "return len([hex for hex in num if int(hex, 16) in [2, 3, 5, 7, 11, 13]])",
        "grade-157": {
            "execution": 1
        },
        "113": "primes = [2, 3, 5, 7, 11, 13]\n    return sum(1 for i in num if int(i, 16) in primes)",
        "grade-113": {
            "execution": 1
        },
        "8": "#init\n    dig_hex = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7,\n               '8': 8, '9': 9, 'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14,\n               'F': 15}\n    primes = [2, 3, 5, 7, 11, 13]\n    count = 0\n    for i in num:\n        if dig_hex[i] in primes:\n            count += 1\n    return count",
        "grade-8": {
            "execution": 1
        },
        "7": "hex_digits = {\n        \"0\": 0,\n        \"1\": 1,\n        \"2\": 2,\n        \"3\": 3,\n        \"4\": 4,\n        \"5\": 5,\n        \"6\": 6,\n        \"7\": 7,\n        \"8\": 8,\n        \"9\": 9,\n        \"A\": 10,\n        \"B\": 11,\n        \"C\": 12,\n        \"D\": 13,\n        \"E\": 14,\n        \"F\": 15,\n    }\n    result = 0\n    for i in range(len(num)):\n        if num[i] in hex_digits.keys():\n            if is_prime(hex_digits[num[i]]):\n                result += 1\n    return result",
        "grade-7": {
            "execution": 0
        },
        "23": "hex_primes = [2, 3, 5, 7, 11, 13]\n    num_list = list(num)\n    count = 0\n    for i in num_list:\n        if int(i, 16) in hex_primes:\n            count += 1\n    return count",
        "grade-23": {
            "execution": 1
        },
        "57": "return len([i for i in num if i in \"2357BD\"])",
        "grade-57": {
            "execution": 1
        },
        "61": "Hex_Digits = {\n        \"0\": 0,\n        \"1\": 1,\n        \"2\": 2,\n        \"3\": 3,\n        \"4\": 4,\n        \"5\": 5,\n        \"6\": 6,\n        \"7\": 7,\n        \"8\": 8,\n        \"9\": 9,\n        \"A\": 10,\n        \"B\": 11,\n        \"C\": 12,\n        \"D\": 13,\n        \"E\": 14,\n        \"F\": 15,\n    }\n    Prime_Numbers = [2, 3, 5, 7, 11, 13]\n    result = 0\n    for i in num:\n        if Hex_Digits[i] in Prime_Numbers:\n            result += 1\n    return result",
        "grade-61": {
            "execution": 1
        }
    },
    {
        "intent": "def is_happy(s: str) -> bool:\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n",
        "snippet": [
            "    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n"
        ],
        "simplified": "You are given a string s. Your task is to check if the string is happy or not. A string is happy if its length is at least 3 and every 3 consecutive letters are distinct",
        "task_id": "80",
        "152": "# YOUR CODE HERE\n    return None",
        "grade-152": {
            "execution": 0
        },
        "15": "if len(s) < 3:\n        return False\n    return len(set(s[i:i + 3])) == len(s[i:i + 3])",
        "grade-15": {
            "execution": 0
        },
        "3": "if len(s) < 3:\n        return False\n    i = 0\n    while i < len(s) - 2:\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n        i += 1\n    return True",
        "grade-3": {
            "execution": 1
        },
        "174": "return len(s) >= 3 and is_happy_recursive(s)",
        "grade-174": {
            "execution": 0
        },
        "56": "if len(s) < 3:\n        return False\n    else:\n        for i in range(0, len(s)-2):\n            if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n                return False\n    return True",
        "grade-56": {
            "execution": 1
        },
        "48": "if len(s) < 3:\n        return False\n    t = s[:3]\n    s = s[3:]\n    while len(s) >= 3:\n        if s[:3] == t:\n            return False\n        else:\n            t = s[:3]\n            s = s[3:]\n    return True",
        "grade-48": {
            "execution": 0
        },
        "42": "return (len(s) >= 3 and len(set(s[i:i + 3])) == 3 for i in range(len(s) - 2))",
        "grade-42": {
            "execution": 0
        },
        "18": "# Your code here\n    if len(s) < 3:\n        return False\n    for i in range(0, len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True",
        "grade-18": {
            "execution": 1
        },
        "14": "if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] == s[i + 2]:\n            return False\n    return True",
        "grade-14": {
            "execution": 0
        },
        "161": "return len(s) >= 3 and len(set(s[i:i + 3])) == 3 for i in range(len(s) - 2)",
        "grade-161": {
            "execution": 0
        },
        "127": "return len(s) >= 3 and (s[0] != s[1] and s[1] != s[2] and s[0] != s[2])",
        "grade-127": {
            "execution": 0
        },
        "11": "if len(s) < 3:\n        return False\n    if s[:3] == s[1:3] == s[2:3]:\n        return False\n    if len(s) > 3:\n        return is_happy(s[3:])\n    return True",
        "grade-11": {
            "execution": 0
        },
        "136": "if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n\n\nassert is_happy(\"abcd\") is True\nassert is_happy(\"aabb\") is False\nassert is_happy(\"xyy\") is False\nassert is_happy(\"abcc\") is False",
        "grade-136": {
            "execution": 1
        },
        "95": "if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] == s[i + 2]:\n            return False\n    return True\n\n\nprint(is_happy(\"adb\"))\nprint(is_happy(\"xyy\"))\nprint(is_happy(\"aaaa\"))\nprint(is_happy(\"aabb\"))\nprint(is_happy(\"abcabcabc\"))\nprint(is_happy(\"abcabccbabc\"))\nprint(is_happy(\"abcabccbcabc\"))",
        "grade-95": {
            "execution": 0
        },
        "4": "i = 0\n    while i < len(s) - 2:\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n        i += 1\n    return True",
        "grade-4": {
            "execution": 0
        },
        "39": "return (len(s) >= 3) and len(set(s[i:i+3])) == 3",
        "grade-39": {
            "execution": 0
        },
        "43": "# YOUR CODE HERE\n    for i in range(0, len(s) - 2):\n        test = s[i:i + 3]\n        if len(test) == len(set(test)):\n            return True\n    return False",
        "grade-43": {
            "execution": 0
        },
        "120": "return 3 <= len(s) <= 100 and all(s[i] != s[i + 1] for i in range(len(s) - 1))",
        "grade-120": {
            "execution": 0
        },
        "142": "return len(s) >= 3 and s[0] != s[1] != s[2]",
        "grade-142": {
            "execution": 0
        },
        "129": "return s == s[0] * len(s) or len(s) > 2 and s[0] != s[1] != s[2]\n\n\nprint(is_happy('a'))\nprint(is_happy('aa'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))",
        "grade-129": {
            "execution": 0
        }
    },
    {
        "intent": "def x_or_y(n: int, x: int, y: int) -> int:\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n",
        "snippet": [
            "    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n"
        ],
        "simplified": "A simple program which should return the value of x if n is a prime number and should return the value of y otherwise.",
        "task_id": "150",
        "130": "return x if is_prime(n) else y\n\n\nprint(x_or_y(7, 34, 12))\nprint(x_or_y(15, 8, 5))\nprint(x_or_y(13, 8, 5))\nprint(x_or_y(15, 8, 5))",
        "grade-130": {
            "execution": 0
        },
        "15": "if n > 1:\n        for i in range(2, n):\n            if (n % i) == 0:\n                return y\n        return x\n    else:\n        return y\n\nprint(x_or_y(7, 34, 12))\nprint(x_or_y(15, 8, 5))",
        "grade-15": {
            "execution": 1
        },
        "3": "if is_prime(n):\n        return x\n    else:\n        return y",
        "grade-3": {
            "execution": 0
        },
        "153": "if n % 2 == 0 or n % 3 == 0:\n        return y\n    else:\n        return x",
        "grade-153": {
            "execution": 0
        },
        "48": "#first check whether n is a prime number\n    isPrime = True\n    if n==1:\n        isPrime = False\n    if n>1:\n        for i in range(2,n):\n            if n%i==0:\n                isPrime = False\n                break\n    #then check the value of isPrime\n    if isPrime:\n        return x\n    else:\n        return y",
        "grade-48": {
            "execution": 1
        },
        "39": "if n <= 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n    return x",
        "grade-39": {
            "execution": 1
        },
        "33": "if check_prime(n):\n        return x\n    else:\n        return y",
        "grade-33": {
            "execution": 0
        },
        "18": "x = abs(x)\n    y = abs(y)\n    if is_prime(n):\n        return x\n    else:\n        return y",
        "grade-18": {
            "execution": 0
        },
        "14": "assert isinstance(n, int) and isinstance(x, int) and isinstance(y, int)\n    # Write your code below\n    # Your method should return the value of x if n is a prime number\n    # and the value of y otherwise\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n    return x",
        "grade-14": {
            "execution": 1
        },
        "140": "if n >= 0:\n        for i in range(2, n):\n            if n % i == 0:\n                return y\n        return x\n    else:\n        return x + y",
        "grade-140": {
            "execution": 0
        },
        "189": "is_prime = True\n    sqrt_of_n = math.sqrt(n)\n    for i in range(2, math.ceil(sqrt_of_n)):\n        if n % i == 0:\n            is_prime = False\n            break\n    if is_prime:\n        return x\n    else:\n        return y",
        "grade-189": {
            "execution": 0
        },
        "111": "# Complete the implementation of this program\n    if is_prime(n):\n        return x\n    else:\n        return y",
        "grade-111": {
            "execution": 0
        },
        "12": "#######################\n    ### Start coding here\n    #######################",
        "grade-12": {
            "execution": 0
        },
        "123": "# YOUR CODE HERE\n    raise NotImplementedError()",
        "grade-123": {
            "execution": 0
        },
        "80": "if n in [2, 3, 5, 7]:\n        return x\n    else:\n        return y\nprint(x_or_y(7, 34, 12))\nprint(x_or_y(15, 8, 5))",
        "grade-80": {
            "execution": 0
        },
        "5": "is_prime = n > 1 and all(n % i for i in range(2, n))\n    return x if is_prime else y\n```\n\n```python",
        "grade-5": {
            "execution": 0
        },
        "32": "if n % 2 == 0:\n        return y\n    return x",
        "grade-32": {
            "execution": 0
        },
        "37": "pass\n```\n\n\u00c0 vous de jouer!",
        "grade-37": {
            "execution": 0
        },
        "102": "if is_prime(n):\n        return x\n    else:\n        return y\n\nx_or_y(7, 34, 12)",
        "grade-102": {
            "execution": 0
        },
        "126": "if is_prime(n):\n        return x\n    else:\n        return y\n    \n    \nprint(x_or_y(7, 34, 12))\nprint(x_or_y(15, 8, 5))",
        "grade-126": {
            "execution": 0
        }
    },
    {
        "intent": "from typing import List\n\ndef sorted_list_sum(lst: List[str]) -> List[str]:\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n",
        "snippet": [
            "    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n"
        ],
        "simplified": "Write a function that accepts a list of strings as a parameter, deletes the strings that have odd lengths from it, and returns the resulted list with a sorted order, The list is always a list of strings and never an array of numbers, and it may contain duplicates. The order of the list should be ascending by length of each word, and you should return the list sorted by that rule. If two words have the same length, sort the list alphabetically. The function should return a list of strings in sorted order. You may assume that all words will have the same length.",
        "task_id": "149",
        "194": "list_temp = [x for x in lst if len(x) % 2 == 0]\n    list_temp.sort()\n    return list_temp\n\nprint(sorted_list_sum([\"aa\", \"a\", \"aaa\"]))\nprint(sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]))",
        "grade-194": {
            "execution": 0
        },
        "29": "return sorted(list(filter(lambda x: len(x) % 2 == 0, lst)))",
        "grade-29": {
            "execution": 0
        },
        "6": "# Filter out odd length strings\n    even_lst = list(filter(lambda x: len(x) % 2 == 0, lst))\n    # Sorted list by length of word\n    even_lst.sort(key=len)\n    return even_lst",
        "grade-6": {
            "execution": 0
        },
        "78": "return sorted(filter(lambda word: len(word) % 2 == 0, lst))",
        "grade-78": {
            "execution": 0
        },
        "70": "sorted_lst = [word for word in lst if len(word) % 2 == 0]\n    sorted_lst.sort(key=len)\n    return sorted_lst",
        "grade-70": {
            "execution": 0
        },
        "63": "return sorted(list(filter(lambda x: not len(x) % 2, lst)))\n\nassert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\nassert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]",
        "grade-63": {
            "execution": 0
        },
        "36": "lst.sort(key=lambda x: (len(x), x))\n    new_lst = []\n    for i in lst:\n        if len(i) % 2 == 0:\n            new_lst.append(i)\n    return new_lst",
        "grade-36": {
            "execution": 1
        },
        "27": "# lst = [x for x in lst if len(x) % 2 == 0]\n    # lst.sort(key=lambda x: (len(x), x))\n    # return lst\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda word: (len(word), word))\n\n\nprint(sorted_list_sum([\"aa\", \"a\", \"aaa\"]))",
        "grade-27": {
            "execution": 1
        },
        "164": "lst = [x for x in lst if len(x) % 2 == 0]\n    return sorted(lst, key=lambda x: (len(x), x))",
        "grade-164": {
            "execution": 1
        },
        "23": "lst = [i for i in lst if len(i) % 2 == 0]\n    lst.sort(key=len)\n    return lst\n\nprint(sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]))",
        "grade-23": {
            "execution": 0
        },
        "179": "lst.sort(key=lambda word: word[::-1])\n    return [word for word in lst if len(word) % 2 == 0]",
        "grade-179": {
            "execution": 0
        },
        "124": "lst_1 = sorted(lst, key=lambda x: (len(x), x))\n    lst_2 = []\n    lst_len = len(lst_1)\n    for i in range(lst_len):\n        if len(lst_1[i]) % 2 == 0:\n            lst_2.append(lst_1[i])\n    return lst_2\n\n\nprint(sorted_list_sum([\"aa\", \"a\", \"aaa\"]))\nprint(sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]))",
        "grade-124": {
            "execution": 1
        },
        "8": "if not lst:\n        return lst\n    even_length_lst = []\n    max_length = len(lst[0])\n    for word in lst:\n        if len(word) > max_length:\n            max_length = len(word)\n        if len(word) % 2 == 0:\n            even_length_lst.append(word)\n    even_length_lst.sort()\n    even_length_lst.append(max_length * '?')\n    return even_length_lst\n\nassert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\nassert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\nassert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\", \"\", \"??\"]) == [\"ab\", \"cd\", \"??\"]\nprint(\"Success ...\")",
        "grade-8": {
            "execution": 0
        },
        "7": "new_lst = [x for x in lst if len(x) % 2 == 0]\n    new_lst.sort(key=lambda x: len(x))\n    return new_lst",
        "grade-7": {
            "execution": 0
        },
        "24": "new_lst = []\n    for idx, word in enumerate(lst):\n        if len(word) % 2 == 0:\n            new_lst.append(word)\n        else:\n            lst.pop(idx)\n    sorted_list = sorted(new_lst, key=len)\n    return sorted_list",
        "grade-24": {
            "execution": 0
        },
        "60": "return sorted(lst, key=lambda s: s)",
        "grade-60": {
            "execution": 0
        },
        "67": "lst2 = []\n    for i in lst:\n        if len(i) % 2 == 0:\n            lst2.append(i)\n        else:\n            pass\n    lst2.sort()\n    return lst2",
        "grade-67": {
            "execution": 0
        },
        "152": "my_set = {k for k in lst if len(k) % 2 == 0}\n    my_list = list(my_set)\n    return sorted(my_list, key=len)",
        "grade-152": {
            "execution": 1
        },
        "183": "return sorted(list(set(filter(lambda x: len(x) % 2 == 0, lst))))",
        "grade-183": {
            "execution": 0
        },
        "168": "new_lst = [x for x in lst if len(x) % 2 == 0]\n    new_lst.sort(key=lambda x: x.lower())\n    new_lst.sort(key=len)\n    return new_lst\n\nprint(sorted_list_sum([\"aa\", \"a\", \"aaa\"])) #=> [\"aa\"]\nprint(sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"])) #=> [\"ab\", \"cd\"]",
        "grade-168": {
            "execution": 1
        }
    },
    {
        "intent": "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int, int]:\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n",
        "snippet": [
            "    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n"
        ],
        "simplified": "Given an integer. return a tuple that has the number of even and odd digits respectively.",
        "task_id": "155",
        "194": "return (sum(1 for d in str(num) if int(d) % 2 == 0), sum(1 for d in str(num) if int(d) % 2 != 0))",
        "grade-194": {
            "execution": 0
        },
        "32": "even = 0\n    odd = 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)",
        "grade-32": {
            "execution": 0
        },
        "6": "even, odd = 0, 0\n    for ch in str(num):\n        if int(ch) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return even, odd",
        "grade-6": {
            "execution": 0
        },
        "80": "return (len([x for x in str(num) if x in \"02468\"]), len([x for x in str(num) if x in \"13579\"]))",
        "grade-80": {
            "execution": 1
        },
        "70": "even = 0\n    odd = 0\n    if num < 0:\n        num = abs(num)\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 10\n    return (even, odd)",
        "grade-70": {
            "execution": 0
        },
        "63": "even = 0\n    odd = 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)",
        "grade-63": {
            "execution": 0
        },
        "39": "return (  sum( int(digit) % 2 == 0 for digit in str(num) ), sum( int(digit) % 2 == 1 for digit in str(num) )  )",
        "grade-39": {
            "execution": 0
        },
        "30": "# Your code goes here\n    even_count, odd_count = 0, 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count, odd_count",
        "grade-30": {
            "execution": 0
        },
        "165": "# your code goes here\n    pass\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))",
        "grade-165": {
            "execution": 0
        },
        "26": "even = 0\n    odd = 0\n    while num != 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 10\n    return (even, odd)",
        "grade-26": {
            "execution": 0
        },
        "180": "# return (0, 0)\n    even = 0\n    odd = 0\n    if num < 0:\n        num = num * -1\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 10\n    return (even, odd)",
        "grade-180": {
            "execution": 0
        },
        "123": "even = 0\n    odd = 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)",
        "grade-123": {
            "execution": 0
        },
        "8": "even, odd = 0, 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return even, odd\n\neven_odd_count(-12)",
        "grade-8": {
            "execution": 0
        },
        "7": "even = 0\n    odd = 0\n    for n in str(num):\n        if int(n) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))",
        "grade-7": {
            "execution": 0
        },
        "27": "assert isinstance(num, int), 'input must be an integer'\n    even = 0\n    odd = 0\n    if num < 0:\n        num = abs(num)\n    while num > 0:\n        remainder = num % 10\n        if remainder % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 10\n    return (even, odd)",
        "grade-27": {
            "execution": 0
        },
        "61": "even_count = 0\n    odd_count = 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\neven_odd_count(-12)\n\neven_odd_count(123)",
        "grade-61": {
            "execution": 0
        },
        "65": "even_odd = (0, 0)\n    for i in str(num):\n        if int(i) % 2 == 0:\n            even_odd = (even_odd[0] + 1, even_odd[1])\n        else:\n            even_odd = (even_odd[0], even_odd[1] + 1)\n    return even_odd",
        "grade-65": {
            "execution": 0
        },
        "149": "even, odd = 0, 0\n    if num == 0:\n        return (0, 0)\n    if num < 0:\n        num = abs(num)\n    while num:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 10\n    return (even, odd)\n\nprint(even_odd_count(-12))",
        "grade-149": {
            "execution": 0
        },
        "183": "even_count = 0\n    odd_count = 0\n    for x in str(num):\n        if int(x) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)",
        "grade-183": {
            "execution": 0
        },
        "169": "even = 0\n    odd = 0\n    while num != 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 10\n    return (even, odd)\n\nnum = 123\neven, odd = even_odd_count(num)\nprint(f\"even: {even}, odd: {odd}\")\n\nnum = -12\neven, odd = even_odd_count(num)\nprint(f\"even: {even}, odd: {odd}\")",
        "grade-169": {
            "execution": 0
        }
    },
    {
        "intent": "from typing import List\n\ndef sort_third(l: List[int]) -> List[int]:\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n",
        "snippet": [
            "    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n"
        ],
        "simplified": "This function takes a list l and returns a list l' such that l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal to the values of the corresponding indicies of l, but sorted.",
        "task_id": "33",
        "166": "# l.sort()\n    # return l\n    nums = []\n    for i in range(0, len(l), 3):\n        nums.append(l[i:i+3])\n    for n in nums:\n        n.sort()\n    output = []\n    for num in nums:\n        for n in num:\n            output.append(n)\n    return output",
        "grade-166": {
            "execution": 0
        },
        "28": "return sorted(l[2::3])\n    #return [l[1], l[2], l[0]]",
        "grade-28": {
            "execution": 0
        },
        "6": "for i in range(0, len(l), 3):\n        l.insert(i, l.pop(i))\n    return l",
        "grade-6": {
            "execution": 0
        },
        "194": "# We first find the indicies that are divisible by three:\n    third_indicies = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            third_indicies.append(i)\n    # Then we create a new list out of l by taking the values of l in the indicies that are divisible by three and sorting them:\n    sorted_third = sorted([l[i] for i in third_indicies])\n    # Then we create a new list out of l by replacing the values in the indicies that are divisible by three with the sorted values:\n    new_l = [sorted_third[i] if i % 3 == 0 else l[i] for i in range(len(l))]\n    return new_l",
        "grade-194": {
            "execution": 0
        },
        "70": "new_list = []\n    for index, val in enumerate(l):\n        new_list.append(val)\n        if (index + 1) % 3 == 0:\n            new_list[index-2] = sorted(l[index-2:index+1])[0]\n            new_list[index-1] = sorted(l[index-2:index+1])[1]\n            new_list[index] = sorted(l[index-2:index+1])[2]\n    return new_list",
        "grade-70": {
            "execution": 0
        },
        "62": "return sorted(l[0::3]) + l[1::3] + l[2::3]\n\nprint(sort_third([2, 4, 3, 1, 6, 5, 8, 7, 9]))",
        "grade-62": {
            "execution": 0
        },
        "57": "if len(l)<3:\n        return l\n    else:\n        l1 = l[0:len(l)-2]\n        l2 = l[len(l)-2:]\n        l2.sort()\n        l = l1 + l2\n        return l",
        "grade-57": {
            "execution": 0
        },
        "35": "if len(l) % 3 == 0:\n        i = 0\n        j = 0\n        k = 0\n        list_of_lists = []\n        for x in range(0, len(l), 3):\n            list_of_lists.append(l[j:k])\n            j += 3\n            k += 3\n        list_of_lists[len(list_of_lists) - 1].append(l[len(l) - 1])\n        new_list = []\n        while i <= len(list_of_lists) - 1:\n            if i != len(list_of_lists) - 1:\n                if i != 0:\n                    new_list += list_of_lists[i][:]\n                new_list += sorted(list_of_lists[i])\n            i += 1\n        return new_list\n    else:\n        return l",
        "grade-35": {
            "execution": 0
        },
        "193": "if len(l) <= 3:\n        return l\n    else:\n        return l[:2] + sorted(l[2:5]) + l[5:]",
        "grade-193": {
            "execution": 0
        },
        "26": "def sort_list(l: List[int]) -> List[int]:\n        \"\"\"This function takes a list l and returns a list l' such that\n        l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n        to the values of the corresponding indicies of l, but sorted.\n        >>> sort_list([1, 2, 3])\n        [1, 2, 3]\n        >>> sort_list([5, 6, 3, 4, 8, 9, 2])\n        [2, 6, 3, 4, 8, 9, 5]\n        \"\"\"\n        #return [3,2,1] if l == [1,2,3] else [5,6,3,4,8,9,2]\n        assert len(l) != 0, \"the input list cannot be empty\"\n        l_out = l[:]\n        first_idx = 0\n        while first_idx <= len(l) - 3:\n            l_out[first_idx:first_idx+3] = sorted(l[first_idx:first_idx+3])\n            first_idx += 3\n        return l_out\n\n    def has_duplicates(l: List[int]) -> bool:\n        \"\"\"This function takes a list l and returns a boolean value indicating whether the list has any duplicate elements\n        >>> has_duplicates([1, 2, 3])\n        False\n        >>> has_duplicates([1, 2, 2])\n        True\n        \"\"\"\n        #return True if l == [1, 2, 2] else False\n        l_c = l[:]\n        while len(l_c) > 0:\n            curr_value = l_c.pop()\n            if curr_value in l_c:\n                return True\n        return False\n\n    def insert_3_numbers(l: List[int], v1: int, v2: int, v3: int) -> List[int]:\n        \"\"\"This function takes a list l and three numbers v1, v2, v3, and returns a list l' such that\n        l' is identical to l in the indicies",
        "grade-26": {
            "execution": 0
        },
        "177": "if len(l) < 3:\n        return l\n    front = l[:len(l)//3]\n    mid = l[len(l)//3:2*len(l)//3]\n    back = l[2*len(l)//3:]\n    return sort_third(front) + sorted(mid) + sort_third(back)",
        "grade-177": {
            "execution": 0
        },
        "141": "for i in range(2, len(l), 3):\n        j = i - 2\n        while j >= 0 and l[j] > l[j + 3]:\n            l[j], l[j + 3] = l[j + 3], l[j]\n            j -= 3\n    return l",
        "grade-141": {
            "execution": 1
        },
        "22": "new_list = []\n    incr = 0\n    while incr < len(l):\n        if (incr + 1) % 3 == 0:\n            new_list.append(sorted(l[incr:incr + 3]))\n            incr += 3\n        else:\n            new_list.append(l[incr])\n            incr += 1\n    return flatten(new_list)",
        "grade-22": {
            "execution": 0
        },
        "153": "l_left = l[:len(l)//3]\n    l_mid = l[len(l)//3:(len(l)//3)*2]\n    l_right = l[(len(l)//3)*2:]\n    l_mid.sort()\n    return l_left + l_mid + l_right",
        "grade-153": {
            "execution": 0
        },
        "109": "res = l[:]\n    for i in range(0, len(l), 3):\n        res[i:i+3] = sorted(l[i:i+3])\n    return res",
        "grade-109": {
            "execution": 0
        },
        "8": "l_len = len(l)\n    three_indices = [i for i in range(l_len) if i % 3 == 0]\n    non_three_indices = [i for i in range(l_len) if i % 3 != 0]\n    l_three = [l[i] for i in three_indices]\n    l_three.sort()\n    l_ret = [0] * l_len\n    i = 0\n    j = 0\n    while i < len(three_indices) and j < len(non_three_indices):\n        if three_indices[i] < non_three_indices[j]:\n            l_ret[three_indices[i]] = l_three[i]\n            i += 1\n        else:\n            l_ret[non_three_indices[j]] = l[non_three_indices[j]]\n            j += 1\n    for x in range(i, len(three_indices)):\n        l_ret[three_indices[x]] = l_three[x]\n    for x in range(j, len(non_three_indices)):\n        l_ret[non_three_indices[x]] = l[non_three_indices[x]]\n    return l_ret",
        "grade-8": {
            "execution": 1
        },
        "7": "if len(l) % 3 == 0:\n        return l[:len(l) - 2] + sorted(l[len(l) - 2:])\n    elif len(l) % 3 == 1:\n        return l[:len(l) - 1] + sorted(l[len(l) - 1:])\n    else:\n        return l[:len(l) - 3] + sorted(l[len(l) - 3:])",
        "grade-7": {
            "execution": 0
        },
        "23": "#1. reindex the list so that the values that are divisible by three are the first ones.\n    l3 = []\n    lnot3 = []\n    #loop\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l3.append(l[i])\n        else:\n            lnot3.append(l[i])\n    #2. sort the first part.\n    #3. concatenate.\n    l3.sort()\n    return l3 + lnot3",
        "grade-23": {
            "execution": 0
        },
        "55": "return [l[i] if i % 3 != 0 else sorted(l[i:i+3])[1] for i in range(len(l))]",
        "grade-55": {
            "execution": 0
        },
        "59": "m = [i for i in l if i % 3 == 0]\n    m.sort()\n    l[2::3] = m\n    return l\n\nimport doctest\ndoctest.testmod()",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    \"\"\"\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    \"\"\"\n",
        "snippet": [
            " \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n"
        ],
        "simplified": "Create a function that returns True if the last character of a given string is an alphabetical character and is not a part of a word, and False otherwise. Note: \"word\" is a group of characters separated by space.",
        "task_id": "134",
        "31": "pass",
        "grade-31": {
            "execution": 0
        },
        "6": "return len(txt) != 0 and txt[-1].isalpha() and txt[-2] == \" \"",
        "grade-6": {
            "execution": 0
        },
        "85": "if txt == \"\":\n        return False\n    else:\n        if txt[-1].isalpha() and txt[-2] == \" \":\n            return True\n        else:\n            return False",
        "grade-85": {
            "execution": 0
        },
        "72": "return txt.rstrip() and txt.rstrip()[-1].isalpha() and txt.rstrip()[-1] not in txt.rstrip()[:-1]",
        "grade-72": {
            "execution": 0
        },
        "67": "txt = txt.strip()\n    return len(txt) > 0 and txt[-1].isalpha() and not txt[-1].isalnum()",
        "grade-67": {
            "execution": 0
        },
        "40": "if not txt:\n        return False\n    last_char = txt[-1]\n    if re.match(r\"[a-zA-Z]\", last_char) and (last_char == txt[-2] or last_char != txt[-2]):\n        return True\n    return False",
        "grade-40": {
            "execution": 0
        },
        "29": "# return txt.strip()[-1].isalpha() and txt.strip()[-1] not in txt.split()[-1]\n    return txt.strip()[-1].isalpha() and not txt.split()[-1].endswith(txt.strip()[-1])",
        "grade-29": {
            "execution": 0
        },
        "169": "return len(txt) > 0 and not txt[-1].isalpha()\n\nassert check_if_last_char_is_a_letter(\"apple pie\") is False\nassert check_if_last_char_is_a_letter(\"apple pi e\") is True\nassert check_if_last_char_is_a_letter(\"apple pi e \") is False\nassert check_if_last_char_is_a_letter(\"\") is False\n\n\"\"\"\nWrite a function that takes a string and returns the first letter of each word.\n\nExamples:\nfirst_letters(\"This is a sentence.\") \u279e \"TiaS\"\nfirst_letters(\"Hello, world!\") \u279e \"Hw\"\nfirst_letters(\"Ansley is a beautiful name.\") \u279e \"Aibn\"\n\"\"\"",
        "grade-169": {
            "execution": 0
        },
        "25": "return txt.split()[-1][-1].isalpha()",
        "grade-25": {
            "execution": 0
        },
        "185": "if txt:\n        chars = txt.split()\n        return chars[-1][-1].isalpha()\n    return False",
        "grade-185": {
            "execution": 0
        },
        "135": "if txt and txt[-1].isalpha() and txt[-1] != \" \":\n        return True\n    return False",
        "grade-135": {
            "execution": 0
        },
        "8": "# string.ascii_letters is the list of all lower and upper case letters\n    return txt.strip() and txt[-1] in string.ascii_letters",
        "grade-8": {
            "execution": 0
        },
        "7": "return False if txt == \"\" else txt[-1].isalpha() and txt[-2] == \" \"",
        "grade-7": {
            "execution": 0
        },
        "26": "if not txt:\n        return False\n    if txt[-1].isalpha() and (txt[-2] == \" \" or txt[-2] == \"\\n\"):\n        return True\n    return False",
        "grade-26": {
            "execution": 0
        },
        "65": "if len(txt) == 0:\n        return False\n    char = txt[-1]\n    return char.isalpha() and len(txt.split()) == 0\n\nassert check_if_last_char_is_a_letter(\"apple pie\") == False\nassert check_if_last_char_is_a_letter(\"apple pi e\") == True\nassert check_if_last_char_is_a_letter(\"apple pi e \") == False\nassert check_if_last_char_is_a_letter(\"\") == False\n\nprint(\"All tests passed.\")",
        "grade-65": {
            "execution": 0
        },
        "69": "last_char = txt[-1]\n    return last_char.isalpha() and not txt[-2].isalpha()",
        "grade-69": {
            "execution": 0
        },
        "157": "if not txt:\n        return False\n    return txt[-1].isalpha() and txt[-2] == \" \"",
        "grade-157": {
            "execution": 0
        },
        "188": "import re\n    match = re.search(r'[a-zA-Z]\\s*$', txt)\n    return match is not None",
        "grade-188": {
            "execution": 0
        },
        "175": "if not txt:\n        return False\n    return txt[-1].isalpha() and txt[-2] == \" \"\n\n\n\"\"\"\nLONGEST_NON_REPEATING_STR\n\"\"\"",
        "grade-175": {
            "execution": 0
        },
        "58": "if txt.strip():\n        if txt[-1].isalpha() and txt[-1] not in txt[:-1]:\n            return True\n    return False",
        "grade-58": {
            "execution": 0
        }
    },
    {
        "intent": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n",
        "snippet": [
            "    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n"
        ],
        "simplified": "Find how many times a given substring can be found in the original string. Count overlaping cases.",
        "task_id": "18",
        "33": "amount = 0\n    if not string or not substring:\n        return amount\n    else:\n        substring_len = len(substring)\n        for i in range(len(string)):\n            if string[i] == substring[0]:\n                slice_to_compare = string[i: i + substring_len]\n                if slice_to_compare == substring:\n                    amount += 1\n    return amount",
        "grade-33": {
            "execution": 1
        },
        "7": "# start at 0 count\n    count = 0\n    # start index at 0\n    start_index = 0\n    # while the start index is less than the length of the string\n    while start_index < len(string):\n        # store the index of the first occurence of the substring in the string as the result\n        result = string.find(substring, start_index)\n        # if the result is -1 there are no more occurences and return the count\n        if result == -1:\n            return count\n        # if not add 1 to the count\n        count += 1\n        # and set the start index to be after the index of the last occurence\n        start_index = result + 1\n    # return the count\n    return count",
        "grade-7": {
            "execution": 1
        },
        "85": "return sum(1 for _ in re.finditer(substring, string))",
        "grade-85": {
            "execution": 0
        },
        "76": "string_length = len(string)\n    substring_length = len(substring)\n    matches = 0\n    if substring_length == 0:\n        return 0\n    for i in range(string_length):\n        if string[i:i + substring_length] == substring:\n            matches += 1\n    return matches",
        "grade-76": {
            "execution": 1
        },
        "69": "return sum(\n        1\n        for i in range(len(string) - len(substring) + 1)\n        if string[i : i + len(substring)] == substring\n    )",
        "grade-69": {
            "execution": 1
        },
        "40": "if not substring:\n        return 0\n    return string.count(substring)",
        "grade-40": {
            "execution": 0
        },
        "31": "# your code here\n    return 0",
        "grade-31": {
            "execution": 0
        },
        "171": "return sum(1 for _ in _find_all_occurrences(string, substring))",
        "grade-171": {
            "execution": 0
        },
        "26": "count = 0\n    for i in range(len(string)):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\n\nprint(how_many_times('', 'a'))\nprint(how_many_times('aaa', 'a'))\nprint(how_many_times('aaaa', 'aa'))",
        "grade-26": {
            "execution": 1
        },
        "190": "how_many = 0\n    for i in range(len(string)):\n        if string[i:i + len(substring)] == substring:\n            how_many += 1\n    return how_many",
        "grade-190": {
            "execution": 1
        },
        "127": "times = 0\n    index = 0\n    while index < len(string):\n        index = string.find(substring, index)\n        if index != -1:\n            times += 1\n            index += 1\n        else:\n            break\n    return times\n\n\n@pytest.mark.parametrize('string, substring, times', [\n    ('', 'a', 0),\n    ('aaa', 'a', 3),\n    ('aaaa', 'aa', 3),\n])",
        "grade-127": {
            "execution": 0
        },
        "9": "count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            return count",
        "grade-9": {
            "execution": 1
        },
        "8": "if not string or not substring:\n        return 0\n    return len([i for i in range(len(string)) if string.startswith(substring, i)])",
        "grade-8": {
            "execution": 1
        },
        "27": "return sum(string[i:].startswith(substring) for i in range(len(string)))",
        "grade-27": {
            "execution": 1
        },
        "67": "pass\n    return (string.count(substring))",
        "grade-67": {
            "execution": 0
        },
        "71": "if not string or not substring:\n        return 0\n    times = 0\n    while substring in string:\n        times += 1\n        string = string[string.index(substring) + 1:]\n    return times",
        "grade-71": {
            "execution": 1
        },
        "156": "return sum(1 for _ in re.finditer(rf'(?=\\{substring})', string))",
        "grade-156": {
            "execution": 0
        },
        "194": "if substring == '':\n        return 0\n    count = 0\n    for i in range(len(string)):\n        if i + len(substring) > len(string):\n            break\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count",
        "grade-194": {
            "execution": 1
        },
        "176": "if len(substring) == 0:\n        return 0\n    return len([i for i in range(len(string)) if string.startswith(substring, i)])",
        "grade-176": {
            "execution": 1
        },
        "61": "return len([i for i in range(len(string)) if string.startswith(substring, i)])",
        "grade-61": {
            "execution": 1
        }
    },
    {
        "intent": "from typing import List\n\ndef move_one_ball(arr: List[int]) -> bool:\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n",
        "snippet": [
            "    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n"
        ],
        "simplified": "We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The numbers in the array will be randomly ordered. Your task is to determine if it is possible to get an array sorted in non-decreasing order by performing the following operation on the given array: You are allowed to perform right shift operation any number of times. One right shift operation means shifting all elements of the array by one position in the right direction. The last element of the array will be moved to the starting position in the array i.e. 0th index. If it is possible to obtain the sorted array by performing the above operation then return True else return False. If the given array is empty then return True. Note: The given list is guaranteed to have unique elements. For",
        "task_id": "109",
        "166": "if len(arr) == 0:\n        return True\n    for i in range(len(arr)):\n        if i == len(arr) - 1:\n            if arr[i] <= arr[0]:\n                return True\n            else:\n                return False\n        if arr[i] > arr[i + 1]:\n            return False\n    return True",
        "grade-166": {
            "execution": 0
        },
        "28": "return len(arr)==0 or max(arr)==arr[0]",
        "grade-28": {
            "execution": 0
        },
        "6": "if len(arr) <= 1:\n        return True\n    for i in range(len(arr)):\n        # for each ball, we check to see if it's final position\n        # is it's current index.\n        if arr[i] != i + 1:\n            # if it is not its final position, we check to see if \n            # it's final position is to the right of it's current position\n            if arr[i] > i + 1:\n                # if the ball's final position is to the right of it's current position\n                # we check to see if the ball to the right of it's current position is \n                # the ball in it's final position\n                if arr[i + 1] == arr[i]:\n                    # if the ball to the right of it's current position is the ball in it's\n                    # final position, the balls are swapped, and the loop continues\n                    arr[i], arr[i + 1] = arr[i + 1], arr[i]\n                else:\n                    # if the ball to the right of it's current position is not the ball in\n                    # it's final position, then it is not possible to make the list sorted\n                    # with a single ball swap\n                    return False\n            # if the ball's final position is to the left of it's current position, it is not\n            # possible to make the list sorted with a single ball swap\n            else:\n                return False\n    return True",
        "grade-6": {
            "execution": 0
        },
        "195": "i=0\n    while i<len(arr):\n        if arr[i]==i+1:\n            i+=1\n        else:\n            if i==len(arr)-1:\n                return False\n            else:\n                if arr[i+1]==i+1:\n                    arr[i],arr[i+1]=arr[i+1],arr[i]\n                    i+=1\n                else:\n                    return False\n    return True",
        "grade-195": {
            "execution": 0
        },
        "71": "for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return False\n    \n    return True",
        "grade-71": {
            "execution": 0
        },
        "63": "i = 0\n    while i < len(arr) - 1:\n        if arr[i] > arr[i + 1]:\n            return False\n        i += 1\n    return True\n\nprint(move_one_ball([3, 4, 5, 1, 2]))\nprint(move_one_ball([3, 5, 4, 1, 2]))\nprint(move_one_ball([1, 2, 3, 4, 5]))\nprint(move_one_ball([5, 4, 3, 2, 1]))\nprint(move_one_ball([4, 3, 2, 1, 5]))\nprint(move_one_ball([5, 1, 2, 3, 4]))\nprint(move_one_ball([5, 1, 4, 3, 2]))\nprint(move_one_ball([5, 1, 2, 4, 3]))\nprint(move_one_ball([5, 1, 2, 3, 4]))\nprint(move_one_ball([4, 3, 2, 1, 5]))\nprint(move_one_ball([3, 4, 5, 1, 2]))\nprint(move_one_ball([3, 5, 4, 1, 2]))\nprint(move_one_ball([2, 3, 4, 5, 1]))\nprint(move_one_ball([1, 2, 3, 4, 5]))\nprint(move_one_ball([1, 3, 2, 4, 5]))\nprint(move_one_ball([1, 3, 2, 5, 4]))\nprint(move_one_ball([1, 3, 4, 2, 5]))\nprint(move_one_ball([1, 3, 4, 5, 2]))\nprint(move_one_ball([1, 3, 5, 2, 4]))\nprint(move_one_ball([1, 3, 5, 4, 2]))\nprint(move_one_ball([1, 4, 2, 3, 5]))\nprint(move_one_ball([1, 4, 2, 5, 3]))\nprint(move_one_ball([1, 4, 3, 2, 5]))\nprint(move_one_",
        "grade-63": {
            "execution": 0
        },
        "58": "#The approach is to find the index of the element which is less than the previous\n    #element and if it is not zero, perform shift operations untill it becomes zero.\n    i=len(arr)-1\n    while(i>0):\n        if(arr[i]<arr[i-1]):\n            break\n        i-=1\n    if(i==0):\n        return True\n    else:\n        while(i>0):\n            arr[i],arr[i-1]=arr[i-1],arr[i]\n            i-=1\n        return True\n\n\nfrom sys import setrecursionlimit\nsetrecursionlimit(11000)\nfrom math import sqrt, floor",
        "grade-58": {
            "execution": 0
        },
        "35": "if not arr:\n        return True\n    # O(n) solution, shift all items to the right by one,\n    # then insert the last item to the front.\n    if sorted(arr) == arr:\n        return True\n    for i in range(1, len(arr)):\n        arr.insert(0, arr.pop())\n        if sorted(arr) == arr:\n            return True\n    return False",
        "grade-35": {
            "execution": 1
        },
        "194": "if not arr:\n        return True\n    elif len(arr) == 1:\n        return True\n    else:\n        flag = True\n        while flag:\n            flag = False\n            for i in range(len(arr)-1):\n                if arr[i] > arr[i+1]:\n                    arr[i], arr[i+1] = arr[i+1], arr[i]\n                    flag = True\n        return arr == sorted(arr)",
        "grade-194": {
            "execution": 0
        },
        "26": "if not arr:\n        return True\n    for n in range(1, len(arr)):\n        if arr[n] < arr[n-1]:\n            if n == 1:\n                arr.insert(0, arr.pop())\n            else:\n                if arr[0] > arr[1]:\n                    return False\n                if arr[-1] > arr[0]:\n                    arr.insert(0, arr.pop())\n                else:\n                    return False\n            n = 0\n        elif arr[n] < arr[0]:\n            return False\n    return True",
        "grade-26": {
            "execution": 0
        },
        "177": "# Create a new array of the same size as arr that is sorted\n    sorted_arr = sorted(arr)\n    # Initialize count to 0\n    count = 0\n    # Loop through the array\n    for i in range(len(arr)):\n        # If the element at index i of arr is the same as the element at index i of sorted_arr\n        if arr[i] == sorted_arr[i]:\n            # Increment count\n            count += 1\n        # Else, if the element at index i of arr is the same as the element at index i-1 of sorted_arr\n        elif arr[i] == sorted_arr[i-1]:\n            # Increment count\n            count += 1\n    # If count is equal to the length of arr\n    if count == len(arr):\n        # Return True\n        return True\n    # Else, return False\n    else:\n        return False",
        "grade-177": {
            "execution": 0
        },
        "141": "if not arr:\n        return True\n    l = len(arr)\n    start = 0\n    end = l - 1\n    while start != end:\n        if (arr[start] > arr[start + 1] and arr[start] > arr[end] and \n                arr[start + 1] < arr[end]):\n            return False\n        start += 1\n        end -= 1\n    return True",
        "grade-141": {
            "execution": 0
        },
        "22": "return all(arr[i-1] <= arr[i] for i in range(1, len(arr)))",
        "grade-22": {
            "execution": 0
        },
        "154": "if not arr:\n        return True\n    m = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < m:\n            m = arr[i]\n        if arr[i] == m and arr[i-1] > m:\n            return False\n    return True",
        "grade-154": {
            "execution": 0
        },
        "110": "return True",
        "grade-110": {
            "execution": 0
        },
        "8": "if not arr:\n        return True\n    n = len(arr)\n    start = arr[0]\n    for i in range(1, n):\n        if arr[i] < start:\n            return False\n        start = arr[i]\n    return True",
        "grade-8": {
            "execution": 0
        },
        "7": "if len(arr) == 0:\n        return True\n    elif len(arr) == 1:\n        return True\n    elif len(arr) == 2:\n        return arr[0] <= arr[1]\n    else:\n        for i in range(len(arr)):\n            if arr[0] <= arr[1]:\n                arr.pop(0)\n            else:\n                arr.pop(0)\n                arr.append(arr[0])\n            if i == len(arr) - 1:\n                return arr[0] <= arr[1]",
        "grade-7": {
            "execution": 0
        },
        "23": "return (not arr) or ([arr[-1]] + arr[:-1] <= arr)",
        "grade-23": {
            "execution": 0
        },
        "56": "if len(arr) <= 1:\n        return True\n    min_ = float('inf')\n    max_ = float('-inf')\n    for i in range(len(arr)):\n        if arr[i] < min_:\n            min_ = arr[i]\n        if arr[i] > max_:\n            max_ = arr[i]\n    if min_ == max_:\n        return True\n    if max_ - min_ == len(arr) - 1:\n        return True\n    return False",
        "grade-56": {
            "execution": 0
        },
        "60": "# Time Complexity: O(n)\n    # Space Complexity: O(1)\n    if len(arr) <= 1:\n        return True\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return False\n    return True",
        "grade-60": {
            "execution": 0
        }
    },
    {
        "intent": "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n",
        "snippet": [
            "    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n"
        ],
        "simplified": "Given a dictionary, return True if all keys are strings in lower case or all keys are strings in upper case, else return False. The function should return False is the given dictionary is empty.",
        "task_id": "95",
        "198": "#checking if the dictionary is empty\n    if len(dict) == 0:\n        return False\n    #storing the first letter of the key\n    first_letter = list(dict.keys())[0][0]\n    #checking if first letter is lower case or upper case\n    if first_letter.islower():\n        for key in dict.keys():\n            if not key.islower():\n                return False\n        return True\n    elif first_letter.isupper():\n        for key in dict.keys():\n            if not key.isupper():\n                return False\n        return True",
        "grade-198": {
            "execution": 1
        },
        "28": "# check if the dict is empty\n    if len(dict) == 0:\n        return False\n    # check if all the keys are lower case\n    elif all(s.islower() for s in dict.keys()):\n        return True\n    # check if all the keys are upper case\n    elif all(s.isupper() for s in dict.keys()):\n        return True\n    # return false if it does not meet the above conditions\n    else:\n        return False",
        "grade-28": {
            "execution": 1
        },
        "6": "if not dict:\n        return False\n    else:\n        keys = []\n        for key in dict.keys():\n            keys.append(key)\n        count = 0\n        for key in keys:\n            if key.islower():\n                count += 1\n            elif key.isupper():\n                count += 1\n        if count == len(keys):\n            return True\n        else:\n            return False",
        "grade-6": {
            "execution": 0
        },
        "78": "# Split the dict into a keys list and a values list\n    dict_keys = dict.keys()\n    dict_values = dict.values()\n    # If any keys are not strings, return False\n    for key in dict_keys:\n        if not isinstance(key, str):\n            return False\n    # If any values are not strings, return False\n    for value in dict_values:\n        if not isinstance(value, str):\n            return False\n    # If the dict is empty, return False\n    if not dict:\n        return False\n    # Split the dict into a lower list and an upper list\n    dict_lower = {k.lower(): v for k, v in dict.items()}\n    dict_upper = {k.upper(): v for k, v in dict.items()}\n    # If dict_keys and dict_lower are equal, return True\n    if dict_keys == dict_lower:\n        return True\n    # If dict_keys and dict_upper are equal, return True\n    elif dict_keys == dict_upper:\n        return True\n    # Otherwise, return False\n    else:\n        return False",
        "grade-78": {
            "execution": 0
        },
        "68": "keys = list(dict.keys())\n    if not keys:\n        return False\n    if keys[0].isupper():\n        return all(key.isupper() for key in keys)\n    elif keys[0].islower():\n        return all(key.islower() for key in keys)\n    else:\n        return False",
        "grade-68": {
            "execution": 1
        },
        "62": "x = []\n    y = []\n    if len(dict) == 0:\n        return False\n    else:\n        for key in dict:\n            if key.islower():\n                x.append(key)\n            elif key.isupper():\n                y.append(key)\n            else:\n                return False\n        if len(x) == len(dict) or len(y) == len(dict):\n            return True\n        else:\n            return False",
        "grade-62": {
            "execution": 1
        },
        "36": "if dict == {}:\n        return False\n    elif dict.keys() == tuple(dict.keys()):\n        return True\n    elif dict.keys() == tuple(dict.keys()):\n        return True\n    return False",
        "grade-36": {
            "execution": 0
        },
        "26": "if not dict:\n        return False\n    is_lower = False\n    is_upper = False\n    for key in dict:\n        if key.islower():\n            is_lower = True\n        elif key.isupper():\n            is_upper = True\n        else:\n            return False\n    return is_lower or is_upper\n\nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})) # should return True.\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})) # should return False.\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"})) # should return False.\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})) # should return False.\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })) # should return True.",
        "grade-26": {
            "execution": 0
        },
        "166": "if not dict:\n        return False\n    return all(key.islower() for key in dict.keys()) or all(key.isupper() for key in dict.keys())",
        "grade-166": {
            "execution": 1
        },
        "22": "# Empty dict should return False\n    if len(dict) == 0:\n        return False\n    # Get the first key\n    key = next(iter(dict))\n    # Check if key is all lower case or all upper case\n    case = key.isupper() or key.islower()\n    # Iterate through dict and check if all keys are upper or lower case\n    for key in dict:\n        if case:\n            if not key.islower():\n                return False\n        else:\n            if not key.isupper():\n                return False\n    return True",
        "grade-22": {
            "execution": 0
        },
        "178": "upper_dict = {}\n    lower_dict = {}\n    if dict:\n        for key, value in dict.items():\n            if key.isupper():\n                upper_dict[key] = value\n            else:\n                lower_dict[key] = value\n    if (len(upper_dict) == len(dict)) or (len(lower_dict) == len(dict)):\n        return True\n    else:\n        return False\n\nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))",
        "grade-178": {
            "execution": 0
        },
        "125": "pass\n    \nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}))\n\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}))\n\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}))\n\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))",
        "grade-125": {
            "execution": 0
        },
        "8": "if not dict:\n        return False\n    target = dict.keys()[0]\n    for key in dict.keys():\n        if key == key.lower() and target != key.lower():\n            return False\n        if key == key.upper() and target != key.upper():\n            return False\n    return True",
        "grade-8": {
            "execution": 0
        },
        "7": "if dict:\n        # to get the first key\n        for key in dict:\n            check_upper = key.isupper()\n            break\n        # iterating keys and values in the dictionary \n        for key, value in dict.items():\n            # checking keys are same case\n            if check_upper != key.isupper():\n                return False\n        return True\n    else:\n        return False",
        "grade-7": {
            "execution": 0
        },
        "23": "upper_count = 0\n    lower_count = 0\n    for key in dict:\n        if key.islower():\n            lower_count += 1\n        elif key.isupper():\n            upper_count += 1\n    if upper_count == len(dict) or lower_count == len(dict):\n        return True\n    else:\n        return False",
        "grade-23": {
            "execution": 0
        },
        "60": "if len(dict) == 0:\n        return False\n    elif dict.keys() == list(map(str.lower, dict.keys())):\n        return True\n    elif dict.keys() == list(map(str.upper, dict.keys())):\n        return True\n    else:\n        return False",
        "grade-60": {
            "execution": 0
        },
        "65": "keys = list(dict.keys())\n    if len(keys) == 0:\n        return False\n    count_upper = 0\n    count_lower = 0\n    for key in keys:\n        if key.isupper():\n            count_upper += 1\n        elif key.islower():\n            count_lower += 1\n        else:\n            return False\n    if count_upper == len(keys) or count_lower == len(keys):\n        return True\n    else:\n        return False\n\nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))",
        "grade-65": {
            "execution": 1
        },
        "152": "lower = []\n    upper = []\n    if len(dict) == 0:\n        return False\n    else:\n        for k, v in dict.items():\n            if k.islower():\n                lower.append(v)\n            elif k.isupper():\n                upper.append(v)\n            else:\n                return False\n        if len(lower) == len(dict) or len(upper) == len(dict):\n            return True\n        else:\n            return False",
        "grade-152": {
            "execution": 1
        },
        "182": "if len(dict) == 0:\n        return False\n    else:\n        keys = list(dict.keys())\n        a = keys[0]\n        if a.islower():\n            for key in keys:\n                if not key.islower():\n                    return False\n        else:\n            for key in keys:\n                if not key.isupper():\n                    return False\n    return True",
        "grade-182": {
            "execution": 1
        },
        "170": "if len(dict) == 0:\n        return False\n    elif dict.keys() == [x.lower() for x in dict.keys()]:\n        return True\n    elif dict.keys() == [x.upper() for x in dict.keys()]:\n        return True\n    else:\n        return False",
        "grade-170": {
            "execution": 0
        }
    },
    {
        "intent": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n",
        "snippet": [
            "    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n"
        ],
        "simplified": "Return list of all prefixes from shortest to longest of the input string",
        "task_id": "14",
        "24": "# start with empty string\n    prefixes = ['']\n    # for all the letter in the string\n    for letter in string:\n        # add the letter to the current list of prefixes\n        prefixes += [prefix + letter for prefix in prefixes]\n    return prefixes",
        "grade-24": {
            "execution": 0
        },
        "3": "prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes",
        "grade-3": {
            "execution": 1
        },
        "71": "# Method 1:\n    # prefixes = []\n    # for i in range(len(string)):\n    #     prefixes.append(string[:i+1])\n    # return prefixes\n\n    # Method 2:\n    return [string[:i+1] for i in range(len(string))]",
        "grade-71": {
            "execution": 1
        },
        "63": "pre_list = []\n    for i in range(len(string)):\n        pre_list.append(string[:i+1])\n    return pre_list",
        "grade-63": {
            "execution": 1
        },
        "50": "length = len(string)\n    return [string[:i] for i in range(1, length + 1)]",
        "grade-50": {
            "execution": 1
        },
        "29": "def _all_prefixes(s: str, prefix: str = '') -> List[str]:\n        if not s:\n            return [prefix]\n        else:\n            return _all_prefixes(s[1:], prefix) + _all_prefixes(s[1:], prefix + s[0])\n    return _all_prefixes(string)",
        "grade-29": {
            "execution": 0
        },
        "22": "return [string[:idx] for idx in range(1, len(string) + 1)]",
        "grade-22": {
            "execution": 1
        },
        "177": "result = []\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result",
        "grade-177": {
            "execution": 1
        },
        "19": "return [string[:i+1] for i in range(len(string))]",
        "grade-19": {
            "execution": 1
        },
        "122": "# string = 'abc'\n    # for i in range(len(string)):\n    #     print(string[:i+1])\n    return [string[:i+1] for i in range(len(string))]",
        "grade-122": {
            "execution": 1
        },
        "4": "return [string[:i] for i in range(1, len(string) + 1)]",
        "grade-4": {
            "execution": 1
        },
        "196": "s = ''\n    prefixes = []\n    for i in range(len(string)):\n        s += string[i]\n        prefixes.append(s)\n    return prefixes",
        "grade-196": {
            "execution": 1
        },
        "178": "for i in range(len(string)):\n        yield string[:i+1]",
        "grade-178": {
            "execution": 0
        },
        "46": "prefixes = []\n    for start in range(len(string)):\n        prefixes.append(string[:start + 1])\n    return prefixes",
        "grade-46": {
            "execution": 1
        },
        "52": "# Prefixes in the result list\n    prefixes = []\n    # Generate the prefixes\n    for start in range(len(string)):\n        prefixes.append(string[:start + 1])\n    return prefixes",
        "grade-52": {
            "execution": 1
        },
        "67": "all_prefixes = []\n    for i in range(len(string)):\n        all_prefixes.append(string[:i+1])\n    return all_prefixes",
        "grade-67": {
            "execution": 1
        },
        "82": "prefixes = []\n    # loop over each character in the string\n    for i in range(len(string)):\n        # add the substring of the first i+1 characters to the list\n        prefixes.append(string[:i+1])\n    return prefixes",
        "grade-82": {
            "execution": 1
        },
        "1": "res = []\n    for i in range(len(string)):\n        res.append(string[:i+1])\n    return res",
        "grade-1": {
            "execution": 1
        },
        "192": "if len(string) == 0:\n        return []\n    else:\n        return [string[:i] for i in range(1, len(string) + 1)]",
        "grade-192": {
            "execution": 1
        },
        "20": "lst = []\n    for i in range(len(string)):\n        lst.append(string[:i+1])\n    return lst",
        "grade-20": {
            "execution": 1
        }
    },
    {
        "intent": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n",
        "snippet": [
            "    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n"
        ],
        "simplified": "Given list of numbers (of at least two elements), apply a linear transform to that list, such that the smallest number will become 0 and the largest will become 1",
        "task_id": "21",
        "164": "# Find the min and max of a list\n    min_num, max_num = min(numbers), max(numbers)\n    if min_num == max_num:\n        raise Exception(\"Cannot rescale list with no spread\")\n    # Create a new list with rescaled values\n    rescaled_numbers = []\n    for n in numbers:\n        rescaled_numbers.append((n - min_num) / (max_num - min_num))\n    return rescaled_numbers",
        "grade-164": {
            "execution": 1
        },
        "28": "if len(numbers) < 2:\n        raise ValueError(\"Must have at least two numbers to rescale\")\n    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]",
        "grade-28": {
            "execution": 1
        },
        "6": "assert len(numbers) >= 2, \"List should have at least two elements\"\n    sorted_numbers = sorted(numbers)\n    bottom = sorted_numbers[0]\n    top = sorted_numbers[-1]\n    range_ = top - bottom\n    return [(n - bottom) / range_ for n in numbers]\n\nimport doctest\ndoctest.testmod()",
        "grade-6": {
            "execution": 1
        },
        "190": "max_number = max(numbers)\n    min_number = min(numbers)\n    # define a transform that returns a number between 0 and 1\n    transform = lambda number: (number - min_number) / (max_number - min_number)\n    return [transform(number) for number in numbers]",
        "grade-190": {
            "execution": 1
        },
        "70": "# TODO: Implement this.\n    return [0.0, 0.25, 0.5, 0.75, 1.0]",
        "grade-70": {
            "execution": 0
        },
        "62": "if not numbers:\n        raise ValueError(\"Parameter 'numbers' can't be empty!\")\n    if len(numbers) == 1:\n        raise ValueError(\"Parameter 'numbers' must contain at least two elements!\")\n    minimum = min(numbers)\n    maximum = max(numbers)\n    if (maximum - minimum) == 0:\n        raise ValueError(\"All elements of the parameter 'numbers' are equal! Unable to rescale\")\n    return [ (x - minimum) / (maximum - minimum) for x in numbers ]",
        "grade-62": {
            "execution": 1
        },
        "57": "min_number = min(numbers)\n    max_number = max(numbers)\n    return [\n        (number - min_number) / (max_number - min_number)\n        for number in numbers\n    ]",
        "grade-57": {
            "execution": 1
        },
        "35": "# compute the range of values in this list, then compute a transform that will bring the smallest\n    # value to 0 and the largest to 1. Then, apply that transform to every element of the list.\n    range_of_values = max(numbers) - min(numbers)\n    transform = 1.0 / range_of_values\n    return [number * transform for number in numbers]",
        "grade-35": {
            "execution": 0
        },
        "189": "if len(numbers) < 2:\n        raise ValueError(\"need at least two numbers to rescale\")\n    max_value = max(numbers)\n    min_value = min(numbers)\n    return [((value - min_value) / (max_value - min_value)) for value in numbers]",
        "grade-189": {
            "execution": 1
        },
        "26": "minimum = min(numbers)\n    maximum = max(numbers)\n    range_ = maximum - minimum\n    return [(number - minimum) / range_ for number in numbers]\n\n@tf.function",
        "grade-26": {
            "execution": 0
        },
        "174": "# Before scaling, lowest and highest numbers are\n    lowest, highest = min(numbers), max(numbers)\n    # After scaling, lowest and highest numbers will be\n    scaled_lowest, scaled_highest = 0, 1\n    # We need to convert a number of the form\n    #     number = lowest + x * (highest - lowest)\n    # to the form\n    #     scaled_number = scaled_lowest + x * (scaled_highest - scaled_lowest)\n    # by applying the formula\n    #     x = (scaled_number - scaled_lowest) / (scaled_highest - scaled_lowest)\n    # and solving for \"number\" to get\n    #     number = scaled_lowest + x * (scaled_highest - scaled_lowest)\n    # We can combine these into the single formula\n    #     number = scaled_lowest + (scaled_number - scaled_lowest) * (scaled_highest - scaled_lowest) / (scaled_highest - scaled_lowest)\n    # which simplifies to\n    #     number = scaled_number + (scaled_lowest - scaled_number) * (scaled_highest - scaled_lowest) / (scaled_highest - scaled_lowest)\n    # which simplifies to\n    #     number = scaled_number + (scaled_lowest - scaled_number) * (highest - lowest) / (scaled_highest - scaled_lowest)\n    # which simplifies to\n    #     number = scaled_number + (scaled_lowest - scaled_number) * (highest - lowest) / (1 - 0)\n    # which simplifies to\n    #     number = scaled_number + (scaled_lowest - scaled_number) * (highest - lowest)\n    # which simplifies to\n    #     number = scaled_number * (1 + lowest - highest) + highest * (scaled_lowest - scaled_number)\n    # This is the formula we will use to compute the numbers after scaling.\n\n    # In this formula, \"scaled_number\" will always be zero or one,\n    # since we are scaling the numbers to a list of zeros and ones.\n    scaled_number = 0",
        "grade-174": {
            "execution": 0
        },
        "140": "scaled_numbers = []\n    # ToDo: find the smallest and largest number in the list\n    # ToDo: calculate the scaling factor\n    # ToDo: rescale all numbers in the list\n    return scaled_numbers",
        "grade-140": {
            "execution": 0
        },
        "22": "# Find minimum and maximum\n    minimum = min(numbers)\n    maximum = max(numbers)\n    if maximum == minimum:\n        return numbers\n    # Scale all numbers\n    rescaled = []\n    for n in numbers:\n        rescaled.append((n - minimum) / (maximum - minimum))\n    return rescaled",
        "grade-22": {
            "execution": 1
        },
        "152": "min_number, max_number = min(numbers), max(numbers)\n    if min_number == max_number:\n        return [0.5] * len(numbers)\n    return [(number - min_number) / (max_number - min_number) for number in numbers]",
        "grade-152": {
            "execution": 1
        },
        "109": "assert len(numbers) >= 2, \"at least two elements are required\"\n    _min = min(numbers)\n    _max = max(numbers)\n    return [(x - _min) / (_max - _min) for x in numbers]",
        "grade-109": {
            "execution": 1
        },
        "8": "assert len(numbers) >= 2, \"Not enough numbers in the list to apply rescaling\"\n    max_value = max(numbers)\n    min_value = min(numbers)\n    return [\n        (n - min_value) / (max_value - min_value)\n        for n in numbers\n    ]",
        "grade-8": {
            "execution": 1
        },
        "7": "scaled_numbers = []\n    min_n = min(numbers)\n    max_n = max(numbers)\n    for number in numbers:\n        scaled_numbers.append((number - min_n) / (max_n - min_n))\n    return scaled_numbers",
        "grade-7": {
            "execution": 1
        },
        "23": "n = len(numbers)\n    s_min = min(numbers)\n    s_max = max(numbers)\n    if s_min == s_max:\n        return [1.0] * n\n    else:\n        return [(number - s_min) / (s_max - s_min) for number in numbers]",
        "grade-23": {
            "execution": 1
        },
        "55": "assert len(numbers) >= 2, \"at least two numbers are required\"\n    assert numbers == sorted(numbers), \"numbers must be sorted\"\n    minimum, maximum = numbers[0], numbers[-1]\n    assert minimum != maximum, \"minimum and maximum must be different\"\n    numbers_rescaled = [0] * len(numbers)\n    for i, n in enumerate(numbers):\n        numbers_rescaled[i] = (n - minimum) / (maximum - minimum)\n    return numbers_rescaled",
        "grade-55": {
            "execution": 0
        },
        "59": "largest = max(numbers)\n    smallest = min(numbers)\n    return [ (x - smallest) / (largest - smallest) for x in numbers ]",
        "grade-59": {
            "execution": 1
        }
    },
    {
        "intent": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n",
        "snippet": [
            "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n"
        ],
        "simplified": "For a given list of input numbers, calculate Mean Absolute Deviation around the mean of this dataset. Mean Absolute Deviation is the average absolute difference between each element and a centerpoint (mean in this case): MAD = average | x - x_mean |",
        "task_id": "4",
        "167": "# TODO: Replace this with your implementation.\n    return #float(0)",
        "grade-167": {
            "execution": 0
        },
        "28": "#Calculate mean and deviation\n    mean = sum(numbers) / len(numbers)\n    deviation = 0\n    for num in numbers:\n        deviation += abs(num - mean)\n    return (deviation / len(numbers))",
        "grade-28": {
            "execution": 1
        },
        "6": "if not numbers:\n        raise ValueError('numbers must be a non-empty list')\n    numbers_mean = sum(numbers) / len(numbers)\n    absolute_deviations = [abs(number - numbers_mean) for number in numbers]\n    return sum(absolute_deviations) / len(absolute_deviations)",
        "grade-6": {
            "execution": 1
        },
        "198": "return sum([abs(n - mean(numbers)) for n in numbers]) / len(numbers)",
        "grade-198": {
            "execution": 0
        },
        "72": "mean = mean_function(numbers)\n    absolute_deviations = []\n\n    for number in numbers:\n        absolute_deviations.append(abs(number - mean))\n\n    return mean_function(absolute_deviations)",
        "grade-72": {
            "execution": 0
        },
        "63": "sum_of_numbers = sum(numbers)\n    mean = sum_of_numbers / len(numbers)\n    absolute_deviations = [abs(x - mean) for x in numbers]\n    sum_of_absolute_deviations = sum(absolute_deviations)\n    return sum_of_absolute_deviations / len(numbers)",
        "grade-63": {
            "execution": 1
        },
        "58": "x_mean = sum(numbers) / len(numbers)\n    return sum([abs(x - x_mean) for x in numbers]) / len(numbers)",
        "grade-58": {
            "execution": 1
        },
        "35": "x_mean = mean(numbers)\n    return mean([abs(x - x_mean) for x in numbers])",
        "grade-35": {
            "execution": 0
        },
        "197": "# A bug, it should be mean of the absolute difference!\n    # return sum(abs(number - mean(numbers)) for number in numbers) / len(numbers)\n    return sum(abs(number - mean(numbers)) for number in numbers) / len(numbers)\n\nprint(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]))\n\ntry:\n    print(mean_absolute_deviation([]))\nexcept ZeroDivisionError:\n    print(\"Error, empty list cannot be processed\")",
        "grade-197": {
            "execution": 0
        },
        "26": "mean = sum(numbers) / len(numbers)\n    diff = [abs(number - mean) for number in numbers]\n    return sum(diff) / len(diff)",
        "grade-26": {
            "execution": 1
        },
        "179": "# Calculate the mean of the input list\n    mean = sum(numbers) / len(numbers)\n    # For each element of the input list, subtract the mean and take the absolute\n    # value. Store this as a list of absolute deviations\n    absolute_deviations = [abs(n - mean) for n in numbers]\n    # Calculate mean absolute deviation and return it\n    return sum(absolute_deviations) / len(absolute_deviations)\n \nprint(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]))",
        "grade-179": {
            "execution": 1
        },
        "143": "# TODO: Implement this function\n    # raise NotImplementedError()\n    n = len(numbers)\n    avg = sum(numbers) / n\n    deviations = []\n    for num in numbers:\n        deviations.append(abs(num - avg))\n    MAD = sum(deviations) / n\n    return MAD",
        "grade-143": {
            "execution": 1
        },
        "22": "x_mean = np.mean(numbers)\n    mad = np.mean(np.abs(numbers - x_mean))\n    return mad",
        "grade-22": {
            "execution": 0
        },
        "155": "mean = mean_of_list(numbers)\n    deviations = [abs(number - mean) for number in numbers]\n    return mean_of_list(deviations)",
        "grade-155": {
            "execution": 0
        },
        "112": "assert len(numbers) > 0\n    # Calculate mean of input values\n    mean_of_values = sum(numbers) / len(numbers)\n    # Calculate absolute deviations from this mean\n    absolute_deviations = [abs(number - mean_of_values) for number in numbers]\n    # Return mean of this list\n    return sum(absolute_deviations) / len(absolute_deviations)",
        "grade-112": {
            "execution": 1
        },
        "8": "return np.mean(np.abs(np.array(numbers) - np.mean(numbers)))",
        "grade-8": {
            "execution": 0
        },
        "7": "# mean absolute deviation\n    mean = sum(numbers) / len(numbers)\n    absolute_deviations = [abs(number - mean) for number in numbers]\n    mean_absolute_deviation = sum(absolute_deviations) / len(absolute_deviations)\n    return mean_absolute_deviation",
        "grade-7": {
            "execution": 1
        },
        "23": "mean = sum(numbers) / len(numbers)\n    deviations = []\n    for number in numbers:\n        deviations.append(abs(number - mean))\n    return sum(deviations) / len(deviations)",
        "grade-23": {
            "execution": 1
        },
        "56": "if not numbers:\n        raise ValueError(\"numbers must not be empty\")\n    mean = sum(numbers) / len(numbers)\n    deviations = [abs(n - mean) for n in numbers]\n    return sum(deviations) / len(deviations)",
        "grade-56": {
            "execution": 1
        },
        "60": "mean = statistics.mean(numbers)\n    absolute_differences = [abs(num - mean) for num in numbers]\n    return statistics.mean(absolute_differences)",
        "grade-60": {
            "execution": 0
        }
    },
    {
        "intent": "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n",
        "snippet": [
            "    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n"
        ],
        "simplified": "The Brazilian factorial is defined as: brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1! where n > 0",
        "task_id": "139",
        "31": "mult = 1\n    for i in range(1, n+1):\n        mult *= i * factorial(i-1)\n    return mult",
        "grade-31": {
            "execution": 0
        },
        "6": "pass",
        "grade-6": {
            "execution": 0
        },
        "84": "if n <= 0:\n        return 0\n    else:\n        f = 1\n        for i in range(1, n+1):\n            f *= i\n        for i in range(n-1, 0, -1):\n            f *= i\n        return f",
        "grade-84": {
            "execution": 0
        },
        "73": "assert n > 0, \"n must be positive\"\n    if n == 1:\n        return 1\n    else:\n        return factorial(n) * special_factorial(n-1)",
        "grade-73": {
            "execution": 0
        },
        "66": "def factorial(n):\n        if n <= 1:\n            return 1\n        else:\n            return n * factorial(n-1)\n    if n <= 1:\n        return 1\n    else:\n        return n * special_factorial(n-1) * factorial(n-1)",
        "grade-66": {
            "execution": 1
        },
        "38": "if n > 0:\n        return n * special_factorial(n - 1)\n    else:\n        return 1",
        "grade-38": {
            "execution": 0
        },
        "29": "nums = [x for x in range(1, n + 1)]\n    total = 1\n    for num in nums:\n        total *= num\n    return total",
        "grade-29": {
            "execution": 0
        },
        "167": "fact = 1\n    for num in range(1, n + 1):\n        fact = fact * math.factorial(num)\n    return fact",
        "grade-167": {
            "execution": 0
        },
        "25": "return factorial(n) // factorial(1)",
        "grade-25": {
            "execution": 0
        },
        "184": "fac = 1\n    while n > 0:\n        fac *= factorial(n)\n        n -= 1\n    return fac",
        "grade-184": {
            "execution": 0
        },
        "131": "factorial = 1\n    for i in range(n, 0, -1):\n        factorial *= factorial_iterative(i)\n    return factorial",
        "grade-131": {
            "execution": 0
        },
        "8": "prod=1\n    for i in range(1,n+1):\n        prod=prod*factorial(i)\n    return prod",
        "grade-8": {
            "execution": 0
        },
        "7": "# Comment me\n    # It's not even a valid comment since it doesn't have the proper format\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n - 1)\n\n    if n > 0:\n        f = 1\n        for i in range(n):\n            f *= factorial(n - i)\n        return f\n    else:\n        return None",
        "grade-7": {
            "execution": 1
        },
        "26": "if n <= 0:\n        return 1\n    return n * special_factorial(n - 1)",
        "grade-26": {
            "execution": 0
        },
        "63": "if n == 0:\n        return 1\n    if n > 0:\n        return n * special_factorial(n-1)\n    return 0",
        "grade-63": {
            "execution": 0
        },
        "69": "return factorial(n) * factorial(n-1)",
        "grade-69": {
            "execution": 0
        },
        "156": "f = 1\n    while n > 0:\n        f *= factorial(n)\n        n -= 1\n    return f",
        "grade-156": {
            "execution": 0
        },
        "187": "# return factorial(n) * factorial(n-1)\n    # return factorial(n) * special_factorial(n-1)\n    if n < 2:\n        return 1\n    return n * special_factorial(n-1)",
        "grade-187": {
            "execution": 0
        },
        "173": "a = factorial(n)\n    while n > 1:\n        n -= 1\n        a *= factorial(n)\n    return a",
        "grade-173": {
            "execution": 0
        },
        "58": "...",
        "grade-58": {
            "execution": 0
        }
    },
    {
        "intent": "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n",
        "snippet": [
            "    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n"
        ],
        "simplified": "You have to write a function which validates a given date string and returns True if the date is valid otherwise False. The date is valid if all of the following rules are satisfied: 1. The date string is not empty. 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2. 3. The months should not be less than 1 or higher than 12. 4. The date should be in the format: mm-dd-yyyy",
        "task_id": "124",
        "173": "try:\n        date = date.split('-')\n        if date[0].isdigit() and date[1].isdigit() and date[2].isdigit():\n            months = [1,3,5,7,8,10,12]\n            if int(date[0]) in months and int(date[1]) < 32:\n                return True\n            elif int(date[0]) not in months and int(date[1]) < 31:\n                return True\n            elif int(date[0]) == 2 and int(date[1]) < 30:\n                return True\n            else:\n                return False\n        else:\n            return False\n    except:\n        return False",
        "grade-173": {
            "execution": 0
        },
        "30": "date_list = date.split('-')\n    if not date_list:\n        return False\n    else:\n        if not date_list[0].isdigit() or not date_list[1].isdigit() or not date_list[2].isdigit():\n            return False\n        else:\n            month = int(date_list[0])\n            day = int(date_list[1])\n            year = int(date_list[2])\n            if month > 12 or month < 1:\n                return False\n            elif month == 2:\n                if day < 1 or day > 29:\n                    return False\n            elif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n                if day < 1 or day > 31:\n                    return False\n            elif month == 4 or month == 6 or month == 9 or month == 11:\n                if day < 1 or day > 30:\n                    return False\n            else:\n                return False\n            return True",
        "grade-30": {
            "execution": 0
        },
        "6": "if len(date) == 0:\n        return False\n    if len(date) != 10:\n        return False\n    try:\n        month, day, year = date.split('-')\n    except ValueError:\n        return False\n    if int(month) > 12 or int(month) < 1:\n        return False\n    if int(month) in [4, 6, 9, 11]:\n        if int(day) > 30 or int(day) < 1:\n            return False\n    elif int(month) == 2:\n        if int(day) > 29 or int(day) < 1:\n            return False\n    else:\n        if int(day) > 31 or int(day) < 1:\n            return False\n    return True",
        "grade-6": {
            "execution": 1
        },
        "76": "if (\n        re.match(r'^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$', date)\n        is None\n    ):\n        return False\n    date_parts = date.split('-')\n    month = int(date_parts[0])\n    day = int(date_parts[1])\n    year = int(date_parts[2])\n    if month < 1 or month > 12:\n        return False\n    if (\n        month in (1, 3, 5, 7, 8, 10, 12)\n        and (day < 1 or day > 31)\n        or month in (4, 6, 9, 11)\n        and (day < 1 or day > 30)\n        or month == 2\n        and (day < 1 or day > 29)\n    ):\n        return False\n    if month == 2 and day == 29 and not is_leap_year(year):\n        return False\n    return True",
        "grade-76": {
            "execution": 0
        },
        "67": "if not date:\n        return False\n    # split into pieces (m, d, y)\n    try:\n        month, day, year = date.split('-')\n    except ValueError:\n        return False\n    # check month\n    if int(month) < 1 or int(month) > 12:\n        return False\n    # check day\n    if int(day) < 1 or int(day) > 31:\n        return False\n    if int(month) in [4, 6, 9, 11] and int(day) > 30:\n        return False\n    if int(month) == 2 and int(day) > 29:\n        return False\n    # check year\n    if int(year) < 1:\n        return False\n    return True",
        "grade-67": {
            "execution": 1
        },
        "62": "if len(date) == 0:\n        return False\n    month, day, year = date.split('-')\n    month = int(month)\n    day = int(day)\n    year = int(year)\n    if (month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12) and (day >= 1 and day <= 31):\n        return True\n    elif (month == 4 or month == 6 or month == 9 or month == 11) and (day >= 1 and day <= 30):\n        return True\n    elif month == 2 and (day >= 1 and day <= 29):\n        return True\n    else:\n        return False",
        "grade-62": {
            "execution": 0
        },
        "37": "return re.match(r'^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$', date) is not None",
        "grade-37": {
            "execution": 0
        },
        "27": "if date.count('-') != 2:\n        return False\n    if len(date) != 10:\n        return False\n    day, month, year = date.split('-')\n    try:\n        day = int(day)\n        month = int(month)\n        year = int(year)\n    except ValueError:\n        return False\n    if month < 1 or month > 12:\n        return False\n    if month in (1, 3, 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n            return False\n    elif month in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    return True",
        "grade-27": {
            "execution": 0
        },
        "184": "date_list = date.split('-')\n    if len(date_list) != 3:\n        return False\n    if len(date_list[0]) != 2 or len(date_list[1]) != 2 or len(date_list[2]) != 4:\n        return False\n    if len(date_list[2]) != 4:\n        return False\n    if not date_list[0].isdigit() or not date_list[1].isdigit() or not date_list[2].isdigit():\n        return False\n    year = int(date_list[2])\n    month = int(date_list[0])\n    day = int(date_list[1])\n    if year < 0 or month < 0 or day < 0:\n        return False\n    if month > 12:\n        return False\n    if month in (1, 3, 5, 7, 8, 10, 12):\n        if day > 31:\n            return False\n    elif month in (4, 6, 9, 11):\n        if day > 30:\n            return False\n    elif month == 2:\n        if day > 29:\n            return False\n    return True\n\n\nprint(valid_date('03-11-2000'))\nprint(valid_date('15-01-2012'))\nprint(valid_date('04-0-2040'))\nprint(valid_date('06-04-2020'))\nprint(valid_date('06/04/2020'))\nprint(valid_date('06-11-2020'))\nprint(valid_date('-1-11-2020'))\nprint(valid_date('21-11-2020'))\nprint(valid_date('06-04-0000'))\nprint(valid_date('06-04-99999'))\nprint(valid_date('06-04-2020'))\nprint(valid_date('06-11-2020'))\nprint(valid_date('--11-2020'))\nprint(valid_date('06-04-0000'))\nprint(valid_date('06-04-99999'))\nprint(valid_date('06-33-2020'))\nprint(valid_date('32-04",
        "grade-184": {
            "execution": 0
        },
        "148": "# your code here\n\n    if len(date) == 0:\n        return False\n    if date[2] != '-' or date[5] != '-':\n        return False\n    else:\n        n = date.split('-')\n        n = [int(i) for i in n]\n        if n[0] not in [1, 3, 5, 7, 8, 10, 12]:\n            if n[1] not in range(1, 31):\n                return False\n        elif n[0] in [4, 6, 9, 11]:\n            if n[1] not in range(1, 30):\n                return False\n        elif n[0] == 2:\n            if n[1] not in range(1, 29):\n                return False\n        elif n[0] not in range(1, 13):\n            return False\n        return True",
        "grade-148": {
            "execution": 0
        },
        "22": "month_days = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    month, day, year = map(int, date.split('-'))\n    if year < 0 or month < 1 or month > 12 or day < 1 or day > month_days[month - 1]:\n        return False\n    return True",
        "grade-22": {
            "execution": 0
        },
        "160": "try:\n        dt = datetime.strptime(date, '%m-%d-%Y')\n        if dt.year < 1970:\n            return False\n        else:\n            return True\n    except ValueError:\n        return False",
        "grade-160": {
            "execution": 0
        },
        "116": "if not date:\n        return False\n    elif \"-\" not in date:\n        return False\n    elif len(date) != 10:\n        return False\n    else:\n        dd, mm, yyyy = map(int, date.split(\"-\"))\n        if mm < 1 or mm > 12:\n            return False\n        elif mm in (1, 3, 5, 7, 8, 10, 12) and (dd < 1 or dd > 31):\n            return False\n        elif mm in (4, 6, 9, 11) and (dd < 1 or dd > 30):\n            return False\n        elif mm == 2 and (dd < 1 or dd > 29):\n            return False\n        return True\n\n\nassert valid_date(\"03-11-2000\") == True\nassert valid_date(\"15-01-2012\") == False\nassert valid_date(\"04-0-2040\") == False\nassert valid_date(\"06-04-2020\") == True\nassert valid_date(\"06/04/2020\") == False\nassert valid_date(\"-\") == False\nassert valid_date(\"\") == False\nassert valid_date(\"1-1-2000\") == True\nassert valid_date(\"06-40-2020\") == False\nassert valid_date(\"06-12-2040\") == True\nassert valid_date(\"06-12-4040\") == False\nassert valid_date(\"06-13-2020\") == False\nassert valid_date(\"02-29-2020\") == True\nassert valid_date(\"02-30-2020\") == False\nassert valid_date(\"\") == False\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\")",
        "grade-116": {
            "execution": 0
        },
        "8": "if date is None:\n        return False\n    date = date.split('-')\n    if len(date) != 3:\n        return False\n    try:\n        day = int(date[1])\n        month = int(date[0])\n        year = int(date[2])\n    except:\n        return False\n    if day < 1 or day > 31:\n        return False\n    if month < 1 or month > 12:\n        return False\n    if year < 1:\n        return False\n    if day > 30 and month in [4, 6, 9, 11]:\n        return False\n    if day > 29 and month == 2:\n        return False\n    return True",
        "grade-8": {
            "execution": 1
        },
        "7": "if not date:\n        return False\n    else:\n        split_date = date.split('-')\n        if len(split_date) != 3:\n            return False\n        else:\n            day = int(split_date[1])\n            month = int(split_date[0])\n            year = int(split_date[2])\n            months_31_days = [1, 3, 5, 7, 8, 10, 12]\n            months_30_days = [4, 6, 9, 11]\n            if month in months_31_days:\n                if day not in range(1, 32):\n                    return False\n            elif month in months_30_days:\n                if day not in range(1, 31):\n                    return False\n            elif month == 2:\n                if day not in range(1, 30):\n                    return False\n            else:\n                return False\n            if year not in range(1000, 10000):\n                return False\n            return True",
        "grade-7": {
            "execution": 1
        },
        "23": "try:\n        d = datetime.strptime(date, '%m-%d-%Y')\n        return True\n    except ValueError:\n        return False\n\n\n@pytest.mark.parametrize('test_input,expected', [\n    ('03-11-2000', True),\n    ('15-01-2012', False),\n    ('04-0-2040', False),\n    ('06-04-2020', True),\n    ('06/04/2020', False),\n])",
        "grade-23": {
            "execution": 0
        },
        "60": "days_in_month = {1: 31, 2: 29, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n    if len(date) == 0:\n        return False\n    try:\n        day, month, year = map(int, date.split('-'))\n    except ValueError:\n        return False\n    if (1 <= month <= 12) and (day in range(1, days_in_month[month] + 1)) and (1970 <= year <= 2100):\n        return True\n    return False\n\n\n\nprint(valid_date('03-11-2000'))",
        "grade-60": {
            "execution": 0
        },
        "64": "if len(date) > 0:\n        months = ['01', '03', '05', '07', '08', '10', '12']\n        month = date[:2]\n        day = date[3:5]\n        year = date[6:]\n        if month in months:\n            if int(day) > 0 and int(day) < 32:\n                if int(month) > 0 and int(month) < 13:\n                    if int(year) > 0:\n                        return True\n        else:\n            if month == '02':\n                if int(day) > 0 and int(day) < 30:\n                    if int(month) > 0 and int(month) < 13:\n                        if int(year) > 0:\n                            return True\n            else:\n                if int(day) > 0 and int(day) < 31:\n                    if int(month) > 0 and int(month) < 13:\n                        if int(year) > 0:\n                            return True\n    return False\n\n\nprint(valid_date('03-11-2000'))\nprint(valid_date('15-01-2012'))\nprint(valid_date('04-0-2040'))\nprint(valid_date('06-04-2020'))\nprint(valid_date('06/04/2020'))",
        "grade-64": {
            "execution": 0
        },
        "138": "if len(date) != 10:\n        return False\n    try:\n        day, month, year = map(int, date.split('-'))\n    except ValueError:\n        return False\n    if month not in range(1, 13):\n        return False\n    if day not in range(1, 32):\n        return False\n    if month in [4, 6, 9, 11] and day == 31:\n        return False\n    if month == 2 and day > 29:\n        return False\n    if month == 2 and day == 29 and year % 4 != 0:\n        return False\n    return True\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \"\"\"\n    import re\n    return bool(re.fullmatch(r'(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-\\d{4}', date))\n    \"\"\"",
        "grade-138": {
            "execution": 0
        },
        "163": "if '-' not in date:\n        return False\n    day, month, year = date.split('-')\n    if not day.isdigit() or not month.isdigit() or not year.isdigit():\n        return False\n    return 1 <= int(day) <= 31 and 1 <= int(month) <= 12 and not int(day) > 30 and int(day) <= 28",
        "grade-163": {
            "execution": 0
        }
    },
    {
        "intent": "from typing import List\n\ndef search(lst: List[int]) -> int:\n    \"\"\"\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    \"\"\"\n",
        "snippet": [
            "    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n"
        ],
        "simplified": "You are given a non-empty list of positive integers. Return the greatest integer that is greater than zero, and has a frequency greater than or equal to the value of the integer itself. The frequency of an integer is the number of times it appears in the list. If no such a value exist, return -1.",
        "task_id": "69",
        "191": "# Fill in the code here\n    return max([i for i in lst if lst.count(i) >= i and i > 0] or [-1])",
        "grade-191": {
            "execution": 1
        },
        "29": "if len(lst) == 0:\n        return -1\n    if len(lst) == 1:\n        return 1 if lst[0] == 1 else -1\n    arr = [0] * max(lst)\n    for el in lst:\n        arr[el - 1] += 1\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] >= i + 1:\n            return i + 1\n    return -1",
        "grade-29": {
            "execution": 1
        },
        "6": "count = 0\n    frequency = 0\n    for i in lst:\n        frequency = lst.count(i)\n        if i <= frequency:\n            count = i\n        else:\n            count = -1\n    return count",
        "grade-6": {
            "execution": 0
        },
        "80": "# your code here\n    return 0",
        "grade-80": {
            "execution": 0
        },
        "69": "# Returns the highest frequency of an integer in the given list.\n    def max_freq(lst: List[int]) -> int:\n        return max(Counter(lst).values())\n\n    # Returns the greatest integer if the frequency is greater than or equal to the integer\n    # otherwise returns -1.\n    return max(i for i in lst if lst.count(i) >= i) if max_freq(lst) >= max(lst) else -1",
        "grade-69": {
            "execution": 0
        },
        "64": "try:\n        # Create a dictionary of frequencies \n        freq = {i:lst.count(i) for i in lst}\n        # Get the frequency of the greatest integer\n        greatest_freq = max(freq.values())\n        # Get the greatest integer\n        greatest_int = max(freq.keys())\n        # Return either the greatest integer or -1\n        return greatest_int if freq[greatest_int] >= greatest_int else -1\n    except ValueError:\n        # Return -1 if list is empty\n        return -1",
        "grade-64": {
            "execution": 0
        },
        "38": "# your code here",
        "grade-38": {
            "execution": 0
        },
        "26": "pass",
        "grade-26": {
            "execution": 0
        },
        "163": "if not lst:\n        return -1\n    freq = collections.Counter(lst)\n    # return max([i for i in freq if freq[i] >= i])\n    # Or\n    res = max(freq.keys())\n    while freq[res] < res:\n        if res == 1:\n            return -1\n        res -= 1\n    return res",
        "grade-163": {
            "execution": 0
        },
        "22": "def count(lst: List[int], num: int) -> int:\n        c = 0\n        for item in lst:\n            if item == num:\n                c += 1\n        return c\n\n    nums = [count(lst, i) for i in lst]\n    d = {i:nums[i] for i in range(len(lst))}\n    filtered = {i:d[i] for i in d if i >= d[i]}\n    if len(filtered) == 0:\n        return -1\n    m = max(filtered, key=filtered.get)\n    return lst[m]",
        "grade-22": {
            "execution": 0
        },
        "176": "frequency = Counter(lst)\n    items = sorted(frequency.items(), key=lambda x: x[0], reverse=True)\n    for item in items:\n        if item[0] <= item[1]:\n            return item[0]\n    return -1",
        "grade-176": {
            "execution": 0
        },
        "126": "freq = {}\n    for i in lst:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    \n    vals = [x for x in freq if freq[x] >= x]\n    return max(vals) if len(vals) > 0 else -1",
        "grade-126": {
            "execution": 1
        },
        "8": "freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    max_freq = max(freq_dict.values())\n    if max_freq > len(lst) / 2:\n        return max(freq_dict, key=freq_dict.get)\n    return -1",
        "grade-8": {
            "execution": 0
        },
        "7": "# get distinct values in list\n    values = list(set(lst))\n    # sort list in descending order\n    values.sort(reverse=True)\n    # loop through values list\n    for val in values:\n        # if the frequency is greater than or equal to the value of the integer itself, return the integer\n        if lst.count(val) >= val:\n            return val\n    # otherwise return -1\n    return -1",
        "grade-7": {
            "execution": 1
        },
        "23": "return max((x for x in lst if lst.count(x) >= x), default=-1)",
        "grade-23": {
            "execution": 1
        },
        "61": "counts = {value: lst.count(value) for value in lst}\n    for value in sorted(counts, reverse=True):\n        if value > 0 and counts[value] >= value:\n            return value\n    return -1",
        "grade-61": {
            "execution": 1
        },
        "66": "d = {}\n    for i in lst:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    for i in d:\n        if i <= d[i]:\n            return i\n    return -1",
        "grade-66": {
            "execution": 0
        },
        "150": "i = 1\n    while i <= len(lst):\n        if lst.count(i) >= i:\n            return i\n        i += 1\n    return -1",
        "grade-150": {
            "execution": 0
        },
        "182": "# Solution 1:\n    # Create a dictionary and store the number with frequency\n    # Create a sorted list and store the keys of dict in it\n    # Iterate through the sorted list and return the number if it has frequency greater than itself. \n    # If all the numbers have frequency less than itself return -1\n    # Time Complexity = O(n), where n is the length of the list\n    # Space Complexity = O(n), where n is the length of the list\n    # dict = {}\n    # for i in lst:\n    #     if i in dict:\n    #         dict[i] += 1\n    #     else:\n    #         dict[i] = 1\n    # lst1 = sorted(dict.keys())\n    # for i in lst1:\n    #     if dict[i] >= i:\n    #         return i\n    # return -1\n\n    # Solution 2:\n    # Create an array for storing the frequency of numbers\n    # Iterate through the list and increase the frequency in the array\n    # Iterate through the array and return the number if its greater than itself\n    # else return -1\n    # Time Complexity = O(n), where n is the length of the list\n    # Space Complexity = O(n), where n is the length of the list\n    arr = [0] * (len(lst) + 1)\n    for i in lst:\n        arr[i] += 1\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] >= i:\n            return i\n    return -1",
        "grade-182": {
            "execution": 0
        },
        "168": "counts = {}\n    for i in lst:\n        if i in counts:\n            counts[i] += 1\n        else:\n            counts[i] = 1\n    for c in sorted(counts, reverse=True):\n        if counts[c] >= c:\n            return c\n    return -1",
        "grade-168": {
            "execution": 1
        }
    },
    {
        "intent": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n",
        "snippet": [
            "    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n"
        ],
        "simplified": "From a supplied list of numbers (of length at least two) select and return two that are the closest to each other and return them in order (smaller number, larger number).",
        "task_id": "20",
        "163": "if len(numbers)<2:\n        return(\"You need at least two numbers\")\n    difference = abs(numbers[0]-numbers[1])\n    a = numbers[0]\n    b = numbers[1]\n    for i in range(len(numbers)):\n        for j in range(i,len(numbers)):\n            if abs(numbers[i]-numbers[j])<difference:\n                difference = abs(numbers[i]-numbers[j])\n                a = numbers[i]\n                b = numbers[j]\n    if a<b:\n        return(a,b)\n    else:\n        return(b,a)",
        "grade-163": {
            "execution": 0
        },
        "28": "# TODO: Fill in the function and add the doctests above\n    min_diff = float('inf')\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] < min_diff:\n            min_diff = numbers[i + 1] - numbers[i]\n            num1 = numbers[i]\n            num2 = numbers[i + 1]\n    return num1, num2",
        "grade-28": {
            "execution": 1
        },
        "6": "# find the distance between the first two numbers\n    first_distance = abs(numbers[0] - numbers[1])\n    # if these are the closest, this is the result\n    result = (numbers[0], numbers[1])\n    # start searching at the second pair of numbers\n    for index in range(1, len(numbers) - 1):\n        # calculate the distance between the current pair of numbers\n        current_distance = abs(numbers[index] - numbers[index + 1])\n        # if this is closer than the previous pair, save this pair\n        if current_distance < first_distance:\n            first_distance = current_distance\n            result = (numbers[index], numbers[index + 1])\n    return result",
        "grade-6": {
            "execution": 0
        },
        "190": "# Sort the list, then compare each element of the sorted list with the following one.\n    # Record the lowest difference, and the two elements that generated it.\n    numbers.sort()\n    minimum_difference = abs(numbers[0] - numbers[1])\n    minimum_elements = (numbers[0], numbers[1])\n    for i in range(len(numbers) - 1):\n        difference = abs(numbers[i] - numbers[i + 1])\n        if difference < minimum_difference:\n            minimum_difference = difference\n            minimum_elements = (numbers[i], numbers[i + 1])\n    return minimum_elements",
        "grade-190": {
            "execution": 1
        },
        "70": "first_number = sorted(numbers)[0]\n    second_number = sorted(numbers)[1]\n    list_of_differences = []\n    for number in numbers:\n        if number != first_number:\n            list_of_differences.append(abs(first_number - number))\n        else:\n            continue\n    smallest_difference = min(list_of_differences)\n    for number in numbers:\n        if abs(first_number - number) == smallest_difference:\n            second_number = number\n        else:\n            continue\n    return (first_number, second_number)",
        "grade-70": {
            "execution": 0
        },
        "62": "nums = sorted(numbers)\n    diffs = []\n    for i in range(len(nums) - 1):\n        diffs.append(nums[i + 1] - nums[i])\n    closest = min(diffs)\n    return (nums[diffs.index(closest)], nums[diffs.index(closest) + 1])",
        "grade-62": {
            "execution": 1
        },
        "57": "# calculate the minimum difference between two numbers\n    x = float(\"inf\")\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            y = abs(numbers[i] - numbers[j])\n            if y < x:\n                x = y\n                z = i\n                k = j\n    a = numbers[z]\n    b = numbers[k]\n    if a > b:\n        c = a\n        a = b\n        b = c\n    return a, b",
        "grade-57": {
            "execution": 1
        },
        "35": "numbers = sorted(numbers)\n    minimum = numbers[1] - numbers[0]\n    for index in range(len(numbers) - 1):\n        current = numbers[index + 1] - numbers[index]\n        if current < minimum:\n            minimum = current\n            closer = (numbers[index], numbers[index + 1])\n    return closer",
        "grade-35": {
            "execution": 1
        },
        "189": "current_closest_pair = (float('inf'), float('inf'))\n\n    for pair in list(combinations(numbers, 2)):\n        current_pair_distance = abs(pair[0] - pair[1])\n        if current_pair_distance < abs(current_closest_pair[0] - current_closest_pair[1]):\n            current_closest_pair = pair\n\n    return current_closest_pair",
        "grade-189": {
            "execution": 0
        },
        "26": "\"\"\"\n    Runtime complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    diff = abs(numbers[0] - numbers[1])\n    result = (numbers[0], numbers[1])\n    for i in range(len(numbers) - 1):\n        # check if current diff is bigger or equal than the next diff\n        if diff >= abs(numbers[i] - numbers[i + 1]):\n            diff = abs(numbers[i] - numbers[i + 1])\n            result = (numbers[i], numbers[i + 1])\n    return result",
        "grade-26": {
            "execution": 0
        },
        "173": "current_closest_pair = (numbers[0], numbers[1])\n    current_closest_distance = abs(numbers[0] - numbers[1])\n    for current_index in range(0, len(numbers)):\n        for other_index in range(current_index + 1, len(numbers)):\n            current_distance = abs(numbers[current_index] - numbers[other_index])\n            if current_distance < current_closest_distance:\n                current_closest_pair = (numbers[current_index], numbers[other_index])\n                current_closest_distance = current_distance\n    # return the pair with the smaller number first and the larger number second\n    return tuple(sorted(current_closest_pair))",
        "grade-173": {
            "execution": 1
        },
        "139": "minimum_difference = float('inf')\n    smallest = numbers[0]\n    largest = numbers[1]\n    for i in range(0, len(numbers)):\n        for j in range(0, len(numbers)):\n            if i == j:\n                continue\n            if numbers[i] < numbers[j]:\n                difference = numbers[j] - numbers[i]\n            else:\n                difference = numbers[i] - numbers[j]\n            if difference < minimum_difference:\n                minimum_difference = difference\n                smallest = numbers[i]\n                largest = numbers[j]\n    return smallest, largest",
        "grade-139": {
            "execution": 0
        },
        "22": "# Set the initial min to the difference between the first and second elements\n    min = abs(numbers[0] - numbers[1])\n    # Set the initial min pair to the first two elements\n    min_pair = (numbers[0], numbers[1])\n    # Loop through all possible pairs of numbers, storing min and min_pair as they change\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < min:\n                min = abs(numbers[i] - numbers[j])\n                min_pair = (numbers[i], numbers[j])\n    # Ensure the numbers in the pair are in the correct order\n    if min_pair[0] > min_pair[1]:\n        return (min_pair[1], min_pair[0])\n    else:\n        return min_pair",
        "grade-22": {
            "execution": 1
        },
        "151": "closest_distance = min(numbers[i+1] - numbers[i] for i in range(len(numbers)-1))\n    for i in range(len(numbers)-1):\n        if numbers[i+1] - numbers[i] == closest_distance:\n            return numbers[i], numbers[i+1]\n    return numbers[0], numbers[1]",
        "grade-151": {
            "execution": 0
        },
        "108": "# Create a list of tuples containing each of the numbers and their corresponding difference with the next number in\n    # the list, find the smallest value in this list (by difference) and return the tuple with this value.\n    differences = [(num, abs(num - numbers[i + 1])) for i, num in enumerate(numbers[0:-1])]\n    min_diff = min(differences, key=lambda x: x[1])\n    return min_diff[0], numbers[differences.index(min_diff) + 1]",
        "grade-108": {
            "execution": 0
        },
        "8": "if len(numbers) < 2:\n        raise ValueError('Supplied list must contain at least two elements')\n    numbers = sorted(numbers)\n    min_diff = numbers[1] - numbers[0]\n    min_pair = (numbers[0], numbers[1])\n    for index in range(2, len(numbers)):\n        current_diff = numbers[index] - numbers[index - 1]\n        if current_diff < min_diff:\n            min_diff = current_diff\n            min_pair = (numbers[index - 1], numbers[index])\n    return min_pair",
        "grade-8": {
            "execution": 1
        },
        "7": "if len(numbers) == 0:\n        return None, None\n    if len(numbers) == 1:\n        return numbers[0], numbers[0]\n    if len(numbers) == 2:\n        return numbers[0], numbers[1]\n    diffs = [abs(numbers[x] - numbers[x + 1]) for x in range(len(numbers) - 1)]\n    index = diffs.index(min(diffs))\n    return numbers[index], numbers[index + 1]",
        "grade-7": {
            "execution": 0
        },
        "23": "# Handle edge case of a list with only 2 elements\n    if len(numbers) == 2:\n        return (numbers[0], numbers[1])\n\n    min_difference = float('inf')\n\n    for i in range(len(numbers) - 1):\n        difference = abs(numbers[i] - numbers[i + 1])\n        if difference < min_difference:\n            min_difference = difference\n            closest_numbers = (numbers[i], numbers[i + 1])\n\n    return closest_numbers",
        "grade-23": {
            "execution": 0
        },
        "55": "# Initialize variables\n    current_min_diff = float('inf')\n    closest_elements = (numbers[0], numbers[1])\n\n    # Compare each element with every other\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < current_min_diff:\n                current_min_diff = abs(numbers[i] - numbers[j])\n                closest_elements = (numbers[i], numbers[j])\n\n    return closest_elements",
        "grade-55": {
            "execution": 0
        },
        "59": "closest_diff = math.inf\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            current_diff = numbers[j] - numbers[i]\n            if current_diff < closest_diff:\n                closest_diff = current_diff\n                closest_numbers = (numbers[i], numbers[j])\n    return closest_numbers\n    pass",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n",
        "snippet": [
            "    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n"
        ],
        "simplified": "Return sorted unique common elements for two lists.",
        "task_id": "58",
        "158": "common = []\n    for el in l1:\n        if el in l2:\n            common.append(el)\n    return sorted(list(set(common)))",
        "grade-158": {
            "execution": 1
        },
        "28": "common_nums = [num for num in l1 if num in l2]\n    common_nums.sort()\n    # remove duplicates from list\n    new_list = [nums for nums in common_nums if nums not in common_nums[common_nums.index(nums) + 1:]]\n    return new_list",
        "grade-28": {
            "execution": 1
        },
        "4": "return sorted(set(l1) & set(l2))",
        "grade-4": {
            "execution": 1
        },
        "193": "u1 = set(l1)\n    u2 = set(l2)\n    return sorted(u1 & u2)",
        "grade-193": {
            "execution": 1
        },
        "61": "# l1 = [1, 4, 3, 34, 653, 2, 5]\n    # l2 = [5, 7, 1, 5, 9, 653, 121]\n    return sorted(set(l1) & set(l2))",
        "grade-61": {
            "execution": 1
        },
        "52": "lst = []\n    for i in l1:\n        if i in l2:\n            lst.append(i)\n    s = list(set(lst))\n    s.sort()\n    return s",
        "grade-52": {
            "execution": 1
        },
        "48": "set1 = set(l1)\n    set2 = set(l2)\n    union = list(set1.intersection(set2))\n    union.sort()\n    return union",
        "grade-48": {
            "execution": 1
        },
        "31": "ls1 = set(l1)\n    ls2 = set(l2)\n    return sorted(ls1 & ls2)",
        "grade-31": {
            "execution": 1
        },
        "26": "if not l1 or not l2:\n        return []\n    sort_l1 = sorted(l1)\n    sort_l2 = sorted(l2)\n    i = 0\n    j = 0\n    res = []\n    while i < len(sort_l1) and j < len(sort_l2):\n        if sort_l1[i] == sort_l2[j]:\n            res.append(sort_l1[i])\n            i += 1\n            j += 1\n        elif sort_l1[i] < sort_l2[j]:\n            i += 1\n        else:\n            j += 1\n    return res",
        "grade-26": {
            "execution": 1
        },
        "170": "common = []\n    for e in l1:\n        if e in l2:\n            common.append(e)\n    return sorted(set(common))",
        "grade-170": {
            "execution": 1
        },
        "129": "if not l1 or not l2:\n        return []\n    l1 = set(l1)\n    l2 = set(l2)\n    l3 = l1.intersection(l2)\n    return sorted(l3)",
        "grade-129": {
            "execution": 1
        },
        "22": "l1 = set(l1)\n    l2 = set(l2)\n    l3 = l1 & l2\n    return sorted(l3)",
        "grade-22": {
            "execution": 1
        },
        "143": "# your code here\n    return sorted(list(set(l1) & set(l2)))",
        "grade-143": {
            "execution": 1
        },
        "104": "l1.sort()\n    l2.sort()\n    i = 0\n    common_l = []\n    for v in l1:\n        if v in l2:\n            if v != i:\n                common_l.append(v)\n                i = v\n    return common_l",
        "grade-104": {
            "execution": 1
        },
        "5": "counter = Counter(l1 + l2)\n    return sorted(list(filter(lambda x: counter[x] > 1, counter)))",
        "grade-5": {
            "execution": 0
        },
        "46": "common_lst = []\n    for n in l1:\n        if n in l2:\n            common_lst.append(n)\n    return sorted(list(set(common_lst)))",
        "grade-46": {
            "execution": 1
        },
        "49": "l1.sort()\n    l2.sort()\n    return sorted(list(set(l1).intersection(l2)))",
        "grade-49": {
            "execution": 1
        },
        "123": "# T = O(nlog(n))\n    l1_set = set(l1)\n    l2_set = set(l2)\n    common_set = l1_set.intersection(l2_set)\n    common_list = list(common_set)\n    common_list.sort()\n    return common_list",
        "grade-123": {
            "execution": 1
        },
        "148": "s1 = set(l1)\n    s2 = set(l2)\n    common_elements = list(s1.intersection(s2))\n    common_elements.sort()\n    return common_elements",
        "grade-148": {
            "execution": 1
        },
        "134": "res = []\n    for i in l1:\n        if i in l2:\n            res.append(i)\n    return sorted(set(res))",
        "grade-134": {
            "execution": 1
        }
    },
    {
        "intent": "from typing import Optional\n\ndef string_to_md5(text: str) -> Optional[str]:\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n",
        "snippet": [
            "    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n"
        ],
        "simplified": "Given a string 'text', return its md5 hash equivalent string. If 'text' is an empty string, return None.",
        "task_id": "162",
        "113": "m = hashlib.md5()\n    m.update(text.encode('utf-8'))\n    return m.hexdigest()",
        "grade-113": {
            "execution": 0
        },
        "15": "if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()",
        "grade-15": {
            "execution": 0
        },
        "3": "if text:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n    else:\n        return None\n\nprint(string_to_md5('Hello world'))\nprint(string_to_md5(''))",
        "grade-3": {
            "execution": 0
        },
        "132": "if text:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n    else:\n        return None",
        "grade-132": {
            "execution": 0
        },
        "45": "if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()",
        "grade-45": {
            "execution": 0
        },
        "37": "if text == '':\n        return None\n    else:\n        md5 = hashlib.md5()\n        md5.update(text.encode())\n        return md5.hexdigest()",
        "grade-37": {
            "execution": 0
        },
        "34": "# TODO: implement this function\n    return None",
        "grade-34": {
            "execution": 0
        },
        "19": "if text == '':\n        return None\n    else:\n        import hashlib\n        m = hashlib.md5()\n        m.update(text.encode())\n        return m.hexdigest()",
        "grade-19": {
            "execution": 1
        },
        "14": "if text == '':\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()",
        "grade-14": {
            "execution": 0
        },
        "121": "if text == '':\n        return None\n    else:\n        return md5(text.encode('utf-8')).hexdigest()",
        "grade-121": {
            "execution": 0
        },
        "166": "return md5(text.encode()).hexdigest() if text else None",
        "grade-166": {
            "execution": 0
        },
        "97": "if text:\n        m = hashlib.md5()\n        m.update(text.encode())\n        return m.hexdigest()\n    else:\n        return None",
        "grade-97": {
            "execution": 0
        },
        "12": "if not text:\n        return None\n    h = hashlib.md5()\n    h.update(text.encode('utf-8'))\n    return h.hexdigest()",
        "grade-12": {
            "execution": 0
        },
        "105": "if text != '':\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n    else:\n        return None",
        "grade-105": {
            "execution": 0
        },
        "71": "# TODO: implement this function\n    pass",
        "grade-71": {
            "execution": 0
        },
        "4": "# This is a demo of how to use the md5 library. You can delete this\n    # function and replace it with an implementation of your own.\n    try:\n        import hashlib\n        return hashlib.md5(text.encode()).hexdigest()\n    except:\n        return None",
        "grade-4": {
            "execution": 0
        },
        "32": "pass",
        "grade-32": {
            "execution": 0
        },
        "35": "if text == '':\n        return None\n    else:\n        text_to_bytes = bytes(text, encoding='utf-8')\n        text_to_hash = hashlib.md5(text_to_bytes)\n        return text_to_hash.hexdigest()",
        "grade-35": {
            "execution": 0
        },
        "88": "if text == '':\n        return None\n    m = hashlib.md5()\n    m.update(text.encode())\n    return m.hexdigest()",
        "grade-88": {
            "execution": 0
        },
        "108": "m = hashlib.md5()\n    if len(text) == 0:\n        return None\n    m.update(text.encode('utf-8'))\n    return m.hexdigest()",
        "grade-108": {
            "execution": 0
        }
    },
    {
        "intent": "def starts_one_ends(n: int) -> int:\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n",
        "snippet": [
            "    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n"
        ],
        "simplified": "Given a positive integer n, return the count of the numbers of n-digit positive integers that start or end with 1.",
        "task_id": "83",
        "171": "if n == 1:\n        return 2\n    return (10 ** (n - 1)) * 2 + starts_one_ends(n - 1)",
        "grade-171": {
            "execution": 0
        },
        "28": "n_digit_nums = 0\n    for i in range(1, n + 1):\n        if i == 1:\n            n_digit_nums += 10\n        else:\n            n_digit_nums += 9 * 10 ** (i - 1)\n    return n_digit_nums",
        "grade-28": {
            "execution": 0
        },
        "6": "count = 0\n    for i in range(1, n+1):\n        count += 10**(i-1)\n    return count*2",
        "grade-6": {
            "execution": 0
        },
        "71": "return (\n        9 * (10 ** (n - 1)) +\n        starts_one_ends(n - 1)\n    )",
        "grade-71": {
            "execution": 0
        },
        "62": "if n == 1:\n        return 1\n    return 10 ** (n - 1) + starts_one_ends(n - 1)",
        "grade-62": {
            "execution": 0
        },
        "57": "digits = get_digits(n)\n    return count_ends_and_starts(n, digits)",
        "grade-57": {
            "execution": 0
        },
        "35": "if n == 1:\n        return 2\n    n_fact = factorial(n)\n    return n_fact + n_fact // n",
        "grade-35": {
            "execution": 0
        },
        "26": "count = 0\n    temp = 0\n    while temp < n:\n        count += math.pow(10, temp) * 2\n        temp += 1\n    return int(count)",
        "grade-26": {
            "execution": 0
        },
        "181": "return count_digits(n) * 9 * math.pow(10, n - 2)",
        "grade-181": {
            "execution": 0
        },
        "144": "return _starts_or_ends(n, 1)",
        "grade-144": {
            "execution": 0
        },
        "22": "return 10 * (10 ** (n - 1))",
        "grade-22": {
            "execution": 0
        },
        "157": "return count_digits(n) + starts_one_ends(n - 1)",
        "grade-157": {
            "execution": 0
        },
        "112": "return len(str(n)) * 10**(len(str(n)) - 1)",
        "grade-112": {
            "execution": 0
        },
        "8": "if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        return starts_one_ends(n - 1) + starts_one_ends(n - 2)",
        "grade-8": {
            "execution": 0
        },
        "7": "if n == 1:\n        return 2\n    return 10**(n-1) + starts_one_ends(n-1)",
        "grade-7": {
            "execution": 0
        },
        "23": "if n == 1:\n        return 1\n    # Using the recursive formula for Fibonacci numbers.\n    # The first and last digits of n-digit numbers that start or end with 1\n    # can be either 1 or 0.\n    # In the case of 0, the number of choices for the rest of the digits is\n    # the (n-2)-th Fibonacci number.\n    # In the case of 1, the number of choices for the rest of the digits is\n    # the (n-1)-th Fibonacci number.\n    # Summing both gives the final result.\n    return fib(n - 1) + fib(n - 2)",
        "grade-23": {
            "execution": 0
        },
        "55": "if n == 1:\n        return 2\n    elif n == 2:\n        return 2 * 10 - 2\n    else:\n        return 2 * 10**(n - 1) - 2",
        "grade-55": {
            "execution": 0
        },
        "59": "if n == 1:\n        return 2\n    return 2*10**(n-1)",
        "grade-59": {
            "execution": 0
        },
        "133": "return int(n * math.pow(10, n - 1))",
        "grade-133": {
            "execution": 0
        },
        "161": "count = 0\n    for i in range(1, n + 1):\n        count += i * 9 * 10 ** (i - 1)\n\n    return count",
        "grade-161": {
            "execution": 0
        }
    },
    {
        "intent": "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n",
        "snippet": [
            "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n"
        ],
        "simplified": "Return True is list elements are monotonically increasing or decreasing.",
        "task_id": "57",
        "184": "if len(l) <= 1:\n        return True\n    i = 0\n    if l[i] < l[i+1]:\n        # check if increasing\n        for i in range(len(l)-1):\n            if l[i] > l[i+1]:\n                return False\n    else:\n        # check if decreasing\n        for i in range(len(l)-1):\n            if l[i] < l[i+1]:\n                return False\n    return True",
        "grade-184": {
            "execution": 1
        },
        "31": "if l == []:\n        return True\n    direction = (l[1] - l[0]) // abs(l[1] - l[0])\n    for i in range(1, len(l) - 1):\n        if (l[i + 1] - l[i]) // abs(l[i + 1] - l[i]) != direction:\n            return False\n    return True",
        "grade-31": {
            "execution": 0
        },
        "6": "increasing = decreasing = True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            increasing = False\n        if l[i] < l[i + 1]:\n            decreasing = False\n    return increasing or decreasing",
        "grade-6": {
            "execution": 1
        },
        "77": "return all(l[i] >= l[i+1] for i in range(len(l)-1)) or all(l[i] <= l[i+1] for i in range(len(l)-1))",
        "grade-77": {
            "execution": 1
        },
        "66": "increasing = True\n    decreasing = True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            increasing = False\n        if l[i] < l[i + 1]:\n            decreasing = False\n    return increasing or decreasing",
        "grade-66": {
            "execution": 1
        },
        "61": "if len(l) <= 1:\n        return True\n    direction = 0\n    for i in range(len(l) - 1):\n        if l[i] == l[i + 1]:\n            continue\n        elif l[i] < l[i + 1]:\n            if direction == 0:\n                direction = 1\n            elif direction == 2:\n                return False\n        else:\n            if direction == 0:\n                direction = 2\n            elif direction == 1:\n                return False\n    return True",
        "grade-61": {
            "execution": 1
        },
        "38": "diffs = []\n    for i in range(len(l) - 1):\n        diffs.append(l[i+1] - l[i])\n    if not diffs:\n        return True\n    return all(diffs[0] > 0) or all(diffs[0] < 0)",
        "grade-38": {
            "execution": 0
        },
        "29": "if len(l) == 1:\n        return True\n    if len(l) == 2:\n        return l[0] != l[1]\n    ldir = cmp(l[1], l[0])\n    for i in range(1, len(l) - 1):\n        ndir = cmp(l[i + 1], l[i])\n        if ndir != ldir and ndir != 0:\n            return False\n    return True",
        "grade-29": {
            "execution": 0
        },
        "196": "if len(l) == 1:\n        return True\n    elif l[0] < l[1]:\n        for i in range(1, len(l) - 1):\n            if l[i] > l[i + 1]:\n                return False\n        return True\n    elif l[0] > l[1]:\n        for i in range(1, len(l) - 1):\n            if l[i] < l[i + 1]:\n                return False\n        return True\n    else:\n        return False",
        "grade-196": {
            "execution": 0
        },
        "156": "# Monotonic = increasing or decreasing\n    # - So need to check if list is increasing or decreasing\n    # increasing = elements are increasing?\n    # decreasing = elements are decreasing?\n    # 1. If increasing == True AND decreasing == True\n    #    then return False\n    # 2. If increasing == True OR decreasing == True\n    #    then return True\n    # Otherwise, return False\n    increasing = True\n    decreasing = True\n    for i in range(len(l) - 1):\n        if l[i] < l[i + 1]:\n            decreasing = False\n        if l[i] > l[i + 1]:\n            increasing = False\n    if increasing or decreasing:\n        return True\n    else:\n        return False",
        "grade-156": {
            "execution": 1
        },
        "24": "return all(x < y for x, y in zip(l, l[1:])) or all(x > y for x, y in zip(l, l[1:]))",
        "grade-24": {
            "execution": 0
        },
        "169": "if len(l) <= 1:\n        return True\n    first = l[0]\n    last = l[-1]\n    if first < last:\n        for i in range(len(l) - 1):\n            if l[i] > l[i + 1]:\n                return False\n    else:\n        for i in range(len(l) - 1):\n            if l[i] < l[i + 1]:\n                return False\n    return True",
        "grade-169": {
            "execution": 1
        },
        "118": "for i in range(len(l) - 1):\n        if not ((l[i] <= l[i + 1]) or (l[i] >= l[i + 1])):\n            return False\n    return True",
        "grade-118": {
            "execution": 0
        },
        "8": "if len(l) == 1:\n        return True\n    else:\n        return (all(l[i] <= l[i+1] for i in range(len(l)-1)) or \n                all(l[i] >= l[i+1] for i in range(len(l)-1)))",
        "grade-8": {
            "execution": 1
        },
        "7": "if len(l) < 2:\n        return True\n    going_up = l[0] < l[1]\n    for i in range(1, len(l) - 1):\n        if going_up:\n            if l[i] > l[i + 1]:\n                return False\n        else:\n            if l[i] < l[i + 1]:\n                return False\n    return True",
        "grade-7": {
            "execution": 1
        },
        "25": "if len(l) <= 1:\n        return True\n    elif l[0] > l[1]:\n        return monotonic(l[1:]) and all(l[i-1] > l[i] for i in range(1, len(l)))\n    else:\n        return monotonic(l[1:]) and all(l[i-1] < l[i] for i in range(1, len(l)))",
        "grade-25": {
            "execution": 0
        },
        "59": "monotonic = True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            monotonic = False\n            break\n    if monotonic:\n        return True\n    monotonic = True\n    for i in range(len(l) - 1):\n        if l[i] < l[i + 1]:\n            monotonic = False\n            break\n    return monotonic",
        "grade-59": {
            "execution": 1
        },
        "63": "increase = decrease = True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            increase = False\n        if l[i] < l[i + 1]:\n            decrease = False\n    return increase or decrease",
        "grade-63": {
            "execution": 1
        },
        "144": "# remember the direction\n    direction = 0\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            if direction == 0:\n                direction = -1\n            elif direction == 1:\n                return False\n        elif l[i] < l[i + 1]:\n            if direction == 0:\n                direction = 1\n            elif direction == -1:\n                return False\n    return True",
        "grade-144": {
            "execution": 1
        },
        "172": "# If a list has a single element it is monotonic by definition\n    if len(l) == 1:\n        return True\n    # Create an iterator to \"walk\" through the list and track the last value\n    it = iter(l)\n    last = next(it)\n    # Compare each subsequent value to the last\n    for value in it:\n        if value > last:\n            increasing = True\n            decreasing = False\n        elif value < last:\n            increasing = False\n            decreasing = True\n        else:\n            increasing = False\n            decreasing = False\n        if increasing + decreasing == 1:\n            last = value\n        else:\n            return False\n    return True",
        "grade-172": {
            "execution": 0
        }
    },
    {
        "intent": "def int_to_mini_roman(number: int) -> str:\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n",
        "snippet": [
            "    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n"
        ],
        "simplified": "Given a positive integer, obtain its roman numeral equivalent as a string, and return it in lowercase. Restrictions: 1 <= num <= 1000",
        "task_id": "156",
        "193": "roman_characters = [\n        [1000, 'm'],\n        [900, 'cm'],\n        [500, 'd'],\n        [400, 'cd'],\n        [100, 'c'],\n        [90, 'xc'],\n        [50, 'l'],\n        [40, 'xl'],\n        [10, 'x'],\n        [9, 'ix'],\n        [5, 'v'],\n        [4, 'iv'],\n        [1, 'i'],\n    ]\n    result = ''\n    for value, symbol in roman_characters:\n        result += symbol * (number // value)\n        number %= value\n    return result",
        "grade-193": {
            "execution": 1
        },
        "30": "return str(int_to_roman(number)).lower()",
        "grade-30": {
            "execution": 0
        },
        "6": "# create a list to store the romans\n    romans = []\n    # convert the number into roman numerals\n    if number >= 1000:\n        romans.append('m')\n        number -= 1000\n    if number >= 900:\n        romans.append('cm')\n        number -= 900\n    if number >= 500:\n        romans.append('d')\n        number -= 500\n    if number >= 400:\n        romans.append('cd')\n        number -= 400\n    if number >= 100:\n        romans.append('c')\n        number -= 100\n    if number >= 90:\n        romans.append('xc')\n        number -= 90\n    if number >= 50:\n        romans.append('l')\n        number -= 50\n    if number >= 40:\n        romans.append('xl')\n        number -= 40\n    if number >= 10:\n        romans.append('x')\n        number -= 10\n    if number >= 9:\n        romans.append('ix')\n        number -= 9\n    if number >= 5:\n        romans.append('v')\n        number -= 5\n    if number >= 4:\n        romans.append('iv')\n        number -= 4\n    if number >= 1:\n        romans.append('i')\n        number -= 1\n    # join all romans into a string\n    romans = ''.join(romans)\n    # lowercase the romans\n    romans = romans.lower()\n    # return the romans\n    return romans",
        "grade-6": {
            "execution": 0
        },
        "81": "return (\n        'i' * (number % 5) +\n        'v' * (number // 5 % 2) +\n        'x' * (number // 10 % 5) +\n        'l' * (number // 50 % 2) +\n        'c' * (number // 100 % 5) +\n        'd' * (number // 500 % 2) +\n        'm' * (number // 1000)\n    )",
        "grade-81": {
            "execution": 0
        },
        "73": "assert 1 <= number <= 1000\n    return int_to_roman(number).lower()",
        "grade-73": {
            "execution": 0
        },
        "67": "# TODO: Implement this function\n    pass",
        "grade-67": {
            "execution": 0
        },
        "38": "if number < 1 or number > 1000:\n        raise ValueError('This solution only works for 1 <= number <= 1000')\n\n    # Builds a dictionary of the possible mini-Roman numerals and their integer\n    # equivalents\n    int_to_mini_roman_dict = {1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x',\n                              40: 'xl', 50: 'l', 90: 'xc', 100: 'c',\n                              400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'}\n\n    # Builds the list of keys to the dictionary, in order, largest first\n    int_roman_keys = list(reversed(sorted(int_to_mini_roman_dict.keys())))\n\n    # Builds the list of possible values from the keys\n    mini_roman_list = [int_to_mini_roman_dict[x] for x in int_roman_keys]\n\n    # Converts the input integer to a list of mini-Roman numerals, and then\n    # joins the list items into a string\n    mini_roman_numeral = ''.join(\n        [mini_roman_list[int_roman_keys.index(x)] for x in int_roman_keys\n         if number >= x])\n\n    return mini_roman_numeral",
        "grade-38": {
            "execution": 0
        },
        "28": "ROMAN_NUMERALS = [\n        ('i', 'v'), ('x', 'l'), ('c', 'd'), ('m', ' ')\n    ]\n    roman_string = ''\n    for (i, (one, five)) in enumerate(ROMAN_NUMERALS):\n        digit = int(str(number)[-i - 1])\n        roman_string = roman_digit(digit, one, five) + roman_string\n    return roman_string",
        "grade-28": {
            "execution": 0
        },
        "165": "if not 1 <= number <= 1000:\n        raise ValueError(f'Number must be between 1 and 1000, inclusive.')\n\n    symbol_values = (\n        ('m', 1000),\n        ('cm', 900),\n        ('d', 500),\n        ('cd', 400),\n        ('c', 100),\n        ('xc', 90),\n        ('l', 50),\n        ('xl', 40),\n        ('x', 10),\n        ('ix', 9),\n        ('v', 5),\n        ('iv', 4),\n        ('i', 1),\n    )\n\n    result = []\n    for symbol, value in symbol_values:\n        while number >= value:\n            result.append(symbol)\n            number -= value\n\n    return ''.join(result)",
        "grade-165": {
            "execution": 1
        },
        "24": "roman_numerals = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'xl',\n        50: 'l',\n        90: 'xc',\n        100: 'c',\n        400: 'cd',\n        500: 'd',\n        900: 'cm',\n        1000: 'm'\n    }\n    # pre-define\n    mini_roman = ''\n    # test case\n    if number < 1 or number > 1000:\n        raise ValueError('Invalid number')\n    for key in sorted(roman_numerals.keys(), reverse=True):\n        while number - key >= 0:\n            mini_roman += roman_numerals[key]\n            number -= key\n    return mini_roman",
        "grade-24": {
            "execution": 1
        },
        "181": "ones_place = {\n        0: '',\n        1: 'i',\n        2: 'ii',\n        3: 'iii',\n        4: 'iv',\n        5: 'v',\n        6: 'vi',\n        7: 'vii',\n        8: 'viii',\n        9: 'ix'\n    }\n    tens_place = {\n        0: '',\n        1: 'x',\n        2: 'xx',\n        3: 'xxx',\n        4: 'xl',\n        5: 'l',\n        6: 'lx',\n        7: 'lxx',\n        8: 'lxxx',\n        9: 'xc'\n    }\n    hundreds_place = {\n        0: '',\n        1: 'c',\n        2: 'cc',\n        3: 'ccc',\n        4: 'cd',\n        5: 'd',\n        6: 'dc',\n        7: 'dcc',\n        8: 'dccc',\n        9: 'cm'\n    }\n    thousands_place = {\n        0: '',\n        1: 'm',\n        2: 'mm',\n        3: 'mmm'\n    }\n\n    if number < 1 or number > 1000:\n        raise ValueError('Number must be between 1 and 1000')\n\n    ones = number % 10\n    tens = number // 10 % 10\n    hundreds = number // 100 % 10\n    thousands = number // 1000\n\n    return (thousands_place[thousands] +\n            hundreds_place[hundreds] +\n            tens_place[tens] +\n            ones_place[ones])",
        "grade-181": {
            "execution": 1
        },
        "131": "pass\n    if number == 1:\n        return 'i'\n    elif number == 2:\n        return 'ii'\n    elif number == 3:\n        return 'iii'\n    elif number == 4:\n        return 'iv'\n    elif number == 5:\n        return 'v'\n    elif number == 6:\n        return 'vi'\n    elif number == 7:\n        return 'vii'\n    elif number == 8:\n        return 'viii'\n    elif number == 9:\n        return 'ix'\n    elif number == 10:\n        return 'x'\n    elif number == 11:\n        return 'xi'\n    elif number == 12:\n        return 'xii'\n    elif number == 13:\n        return 'xiii'\n    elif number == 14:\n        return 'xiv'\n    elif number == 15:\n        return 'xv'\n    elif number == 16:\n        return 'xvi'\n    elif number == 17:\n        return 'xvii'\n    elif number == 18:\n        return 'xviii'\n    elif number == 19:\n        return 'xix'\n    elif number == 20:\n        return 'xx'\n    elif number == 21:\n        return 'xxi'\n    elif number == 22:\n        return 'xxii'\n    elif number == 23:\n        return 'xxiii'\n    elif number == 24:\n        return 'xxiv'\n    elif number == 25:\n        return 'xxv'\n    elif number == 26:\n        return 'xxvi'\n    elif number == 27:\n        return 'xxvii'\n    elif number == 28:\n        return 'xxviii'\n    elif number == 29:\n        return 'xxix'\n    elif number == 30:\n        return 'xxx'\n    elif number == 31:\n        return 'xxxi'\n    elif number == 32:\n        return 'xxxii'\n    elif number == 33:\n        return 'xxxiii'\n    elif number == 34:\n        return 'xxxiv'\n    elif number == 35",
        "grade-131": {
            "execution": 0
        },
        "8": "# Assume that number is always a positive integer\n    # TODO: consider disallowing number=0\n    assert number > 0, \"You must enter a positive integer.\"\n    if number > 1000:\n        raise ValueError(\"Please enter a number <= 1000.\")\n\n    return _int_to_mini_roman(number)",
        "grade-8": {
            "execution": 0
        },
        "7": "return mini_roman_numeral(int_to_roman(number))",
        "grade-7": {
            "execution": 0
        },
        "25": "assert 1 <= number <= 1000, \\\n        \"number must be in the range 1-1000 inclusive\"\n    return _int_to_roman(number).lower()",
        "grade-25": {
            "execution": 0
        },
        "65": "if not 1 <= number <= 1000:\n        raise NotImplementedError('Number out of range')\n\n    if number == 1000:\n        return 'm'\n\n    symbols = 'mdclxvi'\n    result = ''\n    while number > 0:\n        if number >= 500:\n            result += 'd'\n            number -= 500\n        elif number >= 100:\n            result += 'c'\n            number -= 100\n        elif number >= 50:\n            result += 'l'\n            number -= 50\n        elif number >= 10:\n            result += 'x'\n            number -= 10\n        elif number >= 5:\n            result += 'v'\n            number -= 5\n        else:\n            result += 'i'\n            number -= 1\n\n    return result",
        "grade-65": {
            "execution": 0
        },
        "70": "# define string of all possible numerals\n    numerals = \"mcmxdxixvivi\"\n    # define all possible values of numerals\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    # new string to place converted roman numeral\n    converted = \"\"\n    # loop through all possible numeral values\n    for i in range(len(values)):\n        # obtain how many numerals in converted numeral by dividing number by\n        # numeral value and using floor division\n        num = number // values[i]\n        # obtain new number by subtracting numeral value by numeral amount\n        number -= num * values[i]\n        # add numeral to converted string\n        converted += num * numerals[i]\n    # return converted string in lowercase\n    return converted.lower()",
        "grade-70": {
            "execution": 0
        },
        "154": "if number == 0:\n        return ''\n    for i, numeral in enumerate(NUMERALS):\n        if number >= numeral:\n            return NUMERALS[i] + int_to_mini_roman(number - numeral)\n    raise ValueError(f'Number must be positive and less than 1000. Given: {number}')",
        "grade-154": {
            "execution": 0
        },
        "184": "int_to_roman_map = {\n        1: 'i',\n        2: 'ii',\n        3: 'iii',\n        4: 'iv',\n        5: 'v',\n        6: 'vi',\n        7: 'vii',\n        8: 'viii',\n        9: 'ix',\n        10: 'x',\n        20: 'xx',\n        30: 'xxx',\n        40: 'xl',\n        50: 'l',\n        60: 'lx',\n        70: 'lxx',\n        80: 'lxxx',\n        90: 'xc',\n        100: 'c',\n        200: 'cc',\n        300: 'ccc',\n        400: 'cd',\n        500: 'd',\n        600: 'dc',\n        700: 'dcc',\n        800: 'dccc',\n        900: 'cm',\n        1000: 'm',\n    }\n\n    if number > 1000:\n        raise ValueError('Number {} is too big to be represented in mini-roman numerals'.format(number))\n\n    if number < 1:\n        raise ValueError('Number {} is too small to be represented in mini-roman numerals'.format(number))\n\n    roman_numeral = ''\n    for digit in get_digits(number):\n        if digit == 0:\n            continue\n        if digit < 10:\n            roman_numeral += int_to_roman_map[digit]\n        else:\n            roman_numeral += int_to_roman_map[digit * 10]\n\n    return roman_numeral",
        "grade-184": {
            "execution": 0
        },
        "169": "roman_map = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i',\n    }\n    result = ''\n    for value, roman in roman_map.items():\n        result += roman * (number // value)\n        number %= value\n    return result",
        "grade-169": {
            "execution": 1
        }
    },
    {
        "intent": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n",
        "snippet": [
            "    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n"
        ],
        "simplified": "You are given two positive integers n and m, and your task is to compute the average of the integers from n through m (including n and m). Round the answer to the nearest integer and convert that to binary. If n is greater than m, return -1.",
        "task_id": "103",
        "197": "if n > m:\n        return -1\n    return bin(round((m - n + 1) / 2))",
        "grade-197": {
            "execution": 0
        },
        "33": "if n > m:\n        return -1\n    avg = int(round((n + m) / 2))\n    return bin(avg)",
        "grade-33": {
            "execution": 1
        },
        "7": "average = int((n + m) / 2)\n\n    if n > m:\n        return -1\n    else:\n        bin_average = bin(average)[2:]\n        return f\"0b{bin_average}\"",
        "grade-7": {
            "execution": 0
        },
        "88": "if n > m:\n        return -1\n    total = 0\n    for i in range(n, m+1):\n        total += i\n    avg = total/(m-n+1)\n    return f\"0b{round(avg):b}\"",
        "grade-88": {
            "execution": 1
        },
        "79": "if n > m:\n        return -1\n    x = (n + m) // 2\n    return bin(x)\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))",
        "grade-79": {
            "execution": 0
        },
        "71": "if n > m:\n        return -1\n    else:\n        return \"{0:b}\".format(round((n + m) / 2))",
        "grade-71": {
            "execution": 0
        },
        "41": "pass\n\nassert rounded_avg(1, 5) == \"0b11\"\nassert rounded_avg(7, 5) == -1\nassert rounded_avg(10, 20) == \"0b1111\"\nassert rounded_avg(20, 33) == \"0b11010\"\nprint('Good! The `rounded_avg` function works!')",
        "grade-41": {
            "execution": 0
        },
        "31": "average = (n + m) // 2\n    if n > m:\n        return -1\n    else:\n        return bin(average)",
        "grade-31": {
            "execution": 0
        },
        "171": "return bin(sum(range(n, m+1))//(m+1-n)) if n <= m else -1",
        "grade-171": {
            "execution": 0
        },
        "25": "pass\ntest.describe(\"rounded_avg\")\ntest.it(\"should work for some examples\")\ntest.assert_equals(rounded_avg(1, 5), \"0b11\")\ntest.assert_equals(rounded_avg(7, 5), -1)\ntest.assert_equals(rounded_avg(10, 20), \"0b1111\")\ntest.assert_equals(rounded_avg(20, 33), \"0b11010\")\ntest.assert_equals(rounded_avg(50, 33), \"0b11010\")\n\ntest.it(\"should work for random examples\")\nfrom random import randint\nsol=lambda n,m: bin(int(round((n+m)/2)))[2:] if n<=m else -1\nfor _ in range(100):\n    n,m=randint(1,100),randint(1,100)\n    test.assert_equals(rounded_avg(n,m),sol(n,m))",
        "grade-25": {
            "execution": 0
        },
        "185": "if n > m:\n        return -1\n    avg = (n + m) / 2\n    bin_avg = bin(int(round(avg)))\n    return bin_avg\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))",
        "grade-185": {
            "execution": 1
        },
        "131": "if n > m:\n        return -1\n    # round the average \n    avg = int(round((n + m) / 2))\n    # convert to binary \n    bin_num = bin(avg)\n    return bin_num",
        "grade-131": {
            "execution": 1
        },
        "9": "if n > m:\n        return -1\n    return bin(round((n + m) / 2))",
        "grade-9": {
            "execution": 1
        },
        "8": "import math\n    if n > m:\n        return -1\n    else:\n        return math.floor(((n + m) / 2))",
        "grade-8": {
            "execution": 0
        },
        "26": "if n > m:\n        return -1\n    else:\n        return bin(int(round((sum(range(n, m+1)) / (m+1-n)))))",
        "grade-26": {
            "execution": 1
        },
        "69": "if n > m:\n        return -1\n    sum = 0\n    for i in range(n, m+1):\n        sum += i\n    ave = sum/(m-n+1)\n    ave = int(round(ave))\n    return \"0b\" + bin(ave)[2:]",
        "grade-69": {
            "execution": 1
        },
        "74": "def avg(x: int, y: int) -> int:\n        return (x + y) // 2\n\n    if n > m:\n        return -1\n    return bin(avg(n, m))\nprint(rounded_avg(20, 33))",
        "grade-74": {
            "execution": 0
        },
        "157": "avg = int((n + m) / 2)\n    if n > m:\n        return -1\n    return f\"0b{avg:b}\"",
        "grade-157": {
            "execution": 0
        },
        "188": "if n > m:\n        return -1\n    avg = int(round((n + m) / 2))\n    return f\"0b{avg:b}\"",
        "grade-188": {
            "execution": 1
        },
        "175": "if n > m:\n        return -1\n    else:\n        avg = math.ceil((n + m) / 2)\n        return bin(avg)\n\nprint(rounded_avg(10, 20))",
        "grade-175": {
            "execution": 0
        }
    },
    {
        "intent": "from typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n",
        "snippet": [
            "    for e in l:\n        if e >= t:\n            return False\n    return True\n"
        ],
        "simplified": "Return True if all numbers in the list l are below threshold t.",
        "task_id": "52",
        "18": "for num in l:\n        if num >= t:\n            return False\n    return True",
        "grade-18": {
            "execution": 1
        },
        "3": "for x in l:\n        if x >= t:\n            return False\n    return True\n\nfrom typing import List",
        "grade-3": {
            "execution": 1
        },
        "79": "num = []\n    for item in l:\n        if item < t:\n            num.append(item)\n    if len(num) == len(l):\n        return True\n    else:\n        return False",
        "grade-79": {
            "execution": 1
        },
        "63": "for elem in l:\n        if elem >= t:\n            return False\n    return True\n\nprint(below_threshold([1, 2, 4, 10], 100))\nprint(below_threshold([1, 20, 4, 10], 5))",
        "grade-63": {
            "execution": 1
        },
        "59": "# Since the function cannot be changed, we must use a recursive function to \n    # solve the problem.\n    if l == []:\n        return True\n    elif l[0] >= t:\n        return False\n    else:\n        return below_threshold(l[1:], t)",
        "grade-59": {
            "execution": 1
        },
        "24": "for item in l:\n        if item >= t:\n            return False\n    return True\n\nimport doctest\ndoctest.testmod()",
        "grade-24": {
            "execution": 1
        },
        "17": "for i in l:\n        if i >= t:\n            return False\n    return True\n\nprint(below_threshold([1, 2, 4, 10], 100))\nprint(below_threshold([1, 20, 4, 10], 5))",
        "grade-17": {
            "execution": 1
        },
        "93": "return not any(map(lambda n: n >= t, l))",
        "grade-93": {
            "execution": 1
        },
        "113": "for num in l:\n        if num >= t:\n            return False\n    return True\n\n\"\"\"\nAt the moment, Python looks at the body of the for loop and sees that it calls\nthe function below_threshold. It then checks the body of below_threshold\nand sees that it returns either True or False. Since the type of True and False\nis bool, Python knows that the type of below_threshold(l, t) must be bool.\n\nPython knows that the argument l is a list and the argument t is an int. It also\nknows that below_threshold(l, t) is a bool, so the body of below_threshold\nmust be either True or False.\n\nPython now knows that num is an int. But what about the return value of\nbelow_threshold(l, t)? We know that it's either True or False, but what\ndoes that mean for the execution of the function?\n\nIf the return value is True, then the next line is executed. But Python doesn't\nknow what below_threshold(l, t) will return. It could be True, in which case\nthe next line is executed, or it could be False, in which case the next line\nisn't executed. Thus, Python can't know if num >= t will be executed or not.\n\nSo, at the moment, Python's best guess for the type of num is int | bool, which\nmeans \"either int or bool\".\n\nNow, let's consider the return statements. Python sees that both return False\nstatements return a bool, and the return True statement returns a bool. Since\na bool is an int | bool, Python now knows that the return type of\nbelow_threshold must be bool.\n\nFinally, Python sees that the return type of below_threshold is bool, which is\na bool. So, it concludes that the return type of the function must be bool as\nwell.\n\"\"\"",
        "grade-113": {
            "execution": 1
        },
        "145": "for i in l:\n        if i >= t:\n            return False\n    return True\n\nprint(below_threshold([1, 2, 4, 10], 100))\nprint(below_threshold([1, 20, 4, 10], 5))\nprint(below_threshold([], 100))\nprint(below_threshold([0], 100))",
        "grade-145": {
            "execution": 1
        },
        "77": "for i in l:\n        if i >= t:\n            return False\n    return True",
        "grade-77": {
            "execution": 1
        },
        "5": "return all(i < t for i in l)",
        "grade-5": {
            "execution": 1
        },
        "84": "for n in l:\n        if n >= t:\n            return False\n    return True",
        "grade-84": {
            "execution": 1
        },
        "56": "return all(item < t for item in l)",
        "grade-56": {
            "execution": 1
        },
        "2": "for n in l:\n        if n >= t:\n            return False\n    return True",
        "grade-2": {
            "execution": 1
        },
        "1": "for element in l:\n        if element >= t:\n            return False\n    return True",
        "grade-1": {
            "execution": 1
        },
        "164": "l.sort()\n    if l[0] >= t:\n        return False\n    else:\n        return True",
        "grade-164": {
            "execution": 0
        },
        "181": "i = 0\n    while i < len(l):\n        if l[i] >= t:\n            return False\n        i += 1\n    return True",
        "grade-181": {
            "execution": 1
        },
        "199": "flag = True\n    for num in l:\n        if num >= t:\n            flag = False\n    return flag",
        "grade-199": {
            "execution": 1
        },
        "73": "below = True\n    for element in l:\n        if element >= t:\n            below = False\n    return below",
        "grade-73": {
            "execution": 1
        }
    },
    {
        "intent": "def prime_length(string: str) -> bool:\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n",
        "snippet": [
            "    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n"
        ],
        "simplified": "Write a function that takes a string and returns True if the string length is a prime number or False otherwise",
        "task_id": "82",
        "33": "string_length = len(string)\n    if string_length <= 1:\n        return False\n    for divisor in range(2, string_length):\n        if string_length % divisor == 0:\n            return False\n    return True",
        "grade-33": {
            "execution": 1
        },
        "7": "number_of_chars = len(string)\n    if number_of_chars == 2:\n        return True\n    if number_of_chars < 2:\n        return False\n    if number_of_chars % 2 == 0:\n        return False\n    for i in range(3, int(number_of_chars ** 0.5) + 1, 2):\n        if number_of_chars % i == 0:\n            return False\n    return True",
        "grade-7": {
            "execution": 1
        },
        "93": "prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n    return len(string) in prime_numbers",
        "grade-93": {
            "execution": 1
        },
        "75": "if len(string) % 2 == 0:\n        return False\n    return True",
        "grade-75": {
            "execution": 0
        },
        "69": "length = len(string)\n    if length > 1:\n        for i in range(2, length):\n            if length % i == 0:\n                return False\n        return True\n    return False",
        "grade-69": {
            "execution": 1
        },
        "42": "return len(string) > 1 and not any(len(string) % i == 0 for i in range(2, len(string)))\n\n\nprint(prime_length('Hello'))\nprint(prime_length('abcdcba'))\nprint(prime_length('kittens'))\nprint(prime_length('orange'))",
        "grade-42": {
            "execution": 1
        },
        "30": "return is_prime(len(string))",
        "grade-30": {
            "execution": 0
        },
        "193": "# Your code here\n    pass",
        "grade-193": {
            "execution": 0
        },
        "25": "return not is_prime(len(string))",
        "grade-25": {
            "execution": 0
        },
        "149": "return check_prime(len(string))",
        "grade-149": {
            "execution": 0
        },
        "9": "from math import sqrt\n\n    def is_prime(n: int) -> bool:\n        if n == 1:\n            return False\n        for i in range(2, int(sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))",
        "grade-9": {
            "execution": 0
        },
        "8": "return False",
        "grade-8": {
            "execution": 0
        },
        "26": "# return_value = True\n    # for i in range(2, int(len(string) / 2)):\n    #     if len(string) % i == 0:\n    #         return_value = False\n    # return return_value\n    return len(string) == next(len_ for len_ in range(len(string)) if len(string) % len_ == 0)\n\n\nassert prime_length('Hello') == True\nassert prime_length('abcdcba') == True\nassert prime_length('kittens') == True\nassert prime_length('orange') == False",
        "grade-26": {
            "execution": 0
        },
        "67": "length = len(string)\n    if is_prime(length):\n        return True\n    else:\n        return False\n\n\nassert prime_length('Hello') == True\nassert prime_length('abcdcba') == True\nassert prime_length('kittens') == True\nassert prime_length('orange') == False",
        "grade-67": {
            "execution": 0
        },
        "71": "length = len(string)\n    if length in [1, 2, 3, 5, 7]:\n        return True\n    else:\n        return False",
        "grade-71": {
            "execution": 0
        },
        "174": "if string == '':\n        return False\n    elif len(string) == 1:\n        return True\n    else:\n        for i in range(2, len(string)):\n            if len(string) % i == 0:\n                return False\n            else:\n                return True",
        "grade-174": {
            "execution": 0
        },
        "199": "is_prime = True\n    num = len(string)\n    if num == 1:\n        is_prime = False\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n    return is_prime",
        "grade-199": {
            "execution": 0
        },
        "61": "if len(string) > 1:\n        for i in range(2, len(string)):\n            if len(string) % i == 0:\n                return False\n        return True\n    return False",
        "grade-61": {
            "execution": 1
        },
        "148": "if len(string) == 1:\n        return False\n    elif len(string) > 1:\n        for i in range(2, len(string)):\n            if len(string) % i == 0:\n                return False\n            else:\n                return True\n\n\nprint(prime_length('Hello'))\nprint(prime_length('abcdcba'))\nprint(prime_length('kittens'))\nprint(prime_length('orange'))",
        "grade-148": {
            "execution": 0
        },
        "68": "is_prime = False\n    length = len(string)\n    if length > 1:\n        if length % 2 != 0:\n            is_prime = True\n    return is_prime\n\nprint(prime_length('Hello'))\nprint(prime_length('kittens'))\nprint(prime_length('orange'))",
        "grade-68": {
            "execution": 0
        }
    },
    {
        "intent": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n",
        "snippet": [
            "    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False\n"
        ],
        "simplified": "Check if in given list of numbers, are any two numbers closer to each other than given threshold.",
        "task_id": "0",
        "128": "for index_current, current in enumerate(numbers):\n        for next in numbers[index_current+1:]:\n            if abs(current - next) < threshold:\n                return True\n    return False\n\n\nprint(has_close_elements([1.0, 2.0, 3.0], 0.5))\nprint(has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3))\nprint(has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.5))\nprint(has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.1))\nprint(has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.03))",
        "grade-128": {
            "execution": 1
        },
        "17": "if len(numbers) <= 1:\n        return False\n    else:\n        for n in numbers:\n            for m in numbers:\n                if n != m and abs(n - m) < threshold:\n                    return True\n        return False",
        "grade-17": {
            "execution": 0
        },
        "3": "for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False",
        "grade-3": {
            "execution": 1
        },
        "153": "first = numbers[0]\n    for second in numbers[1:]:\n        if abs(first - second) < threshold:\n            return True\n        first = second\n    return False",
        "grade-153": {
            "execution": 0
        },
        "53": "# TODO: Implement me!\n    pass",
        "grade-53": {
            "execution": 0
        },
        "44": "for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            #print(\"--->\", numbers[i], numbers[j], abs(numbers[i] - numbers[j]))\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False",
        "grade-44": {
            "execution": 1
        },
        "37": "for first in numbers:\n        for second in numbers:\n            if abs(first - second) < threshold:\n                return True\n    return False",
        "grade-37": {
            "execution": 0
        },
        "22": "for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False",
        "grade-22": {
            "execution": 1
        },
        "16": "i = 0\n    while i < len(numbers) - 1:\n        j = i + 1\n        while j < len(numbers):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n            j += 1\n        i += 1\n    return False",
        "grade-16": {
            "execution": 1
        },
        "140": "numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False",
        "grade-140": {
            "execution": 1
        },
        "186": "numbers.sort()\n    # if len(numbers) < 2:\n    #     return False\n    # else:\n    #     if numbers[1] - numbers[0] < threshold:\n    #         return True\n    #     else:\n    #         return has_close_elements(numbers[1:], threshold)\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] < threshold:\n            return True\n    return False",
        "grade-186": {
            "execution": 1
        },
        "112": "if len(numbers) <= 1:\n        return False\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False",
        "grade-112": {
            "execution": 1
        },
        "11": "length = len(numbers)\n    for i in range(length):\n        for j in range(i+1, length):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False",
        "grade-11": {
            "execution": 1
        },
        "119": "for x in numbers:\n        for y in numbers:\n            if x != y and abs(x - y) < threshold:\n                return True\n    return False",
        "grade-119": {
            "execution": 0
        },
        "82": "length = len(numbers)\n    for i in range(length):\n        for j in range(i+1, length):\n            if numbers[i] - numbers[j] > threshold:\n                return True\n    return False",
        "grade-82": {
            "execution": 0
        },
        "4": "numbers.sort()\n    for i in range(1, len(numbers)):\n        distance = numbers[i] - numbers[i-1]\n        if distance < threshold:\n            return True\n    return False\n\nimport doctest\ndoctest.testmod()",
        "grade-4": {
            "execution": 1
        },
        "36": "raise NotImplementedError",
        "grade-36": {
            "execution": 0
        },
        "40": "for n1 in numbers:\n        for n2 in numbers:\n            if n1 == n2:\n                continue\n            if abs(n1 - n2) < threshold:\n                return True\n    return False",
        "grade-40": {
            "execution": 0
        },
        "100": "numbers = sorted(numbers)\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < threshold:\n            return True\n    return False",
        "grade-100": {
            "execution": 1
        },
        "121": "for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            distance = abs(numbers[i] - numbers[j])\n            if distance < threshold:\n                return True\n    return False\n\nimport doctest\ndoctest.testmod()",
        "grade-121": {
            "execution": 1
        }
    },
    {
        "intent": "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str, bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n",
        "snippet": [
            "    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n"
        ],
        "simplified": "Task We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a tuple containing the result string and True/False for the check.",
        "task_id": "112",
        "28": "#your code here\n    return \"\", True",
        "grade-28": {
            "execution": 0
        },
        "6": "for letter in c:\n        s = s.replace(letter, '')\n    return s, s == s[::-1]",
        "grade-6": {
            "execution": 1
        },
        "75": "for c_letter in c:\n        s = s.replace(c_letter,'')\n    return s, s == s[::-1]",
        "grade-75": {
            "execution": 1
        },
        "66": "for i in c:\n        s = s.replace(i, '')\n    if s == s[::-1]:\n        return (s, True)\n    else:\n        return (s, False)",
        "grade-66": {
            "execution": 1
        },
        "61": "c = set(c)\n    for symbol in s:\n        if symbol in c:\n            s = s.replace(symbol, \"\")\n    s_rev = s[::-1]\n    return s, s == s_rev",
        "grade-61": {
            "execution": 1
        },
        "37": "def check(s: str) -> bool:\n        return s == s[::-1]\n    s = ''.join(i for i in s if i not in c)\n    return s, check(s)",
        "grade-37": {
            "execution": 1
        },
        "26": "# your code here\n    return (\"\", False)",
        "grade-26": {
            "execution": 0
        },
        "168": "res = ''\n    for a in s:\n        if a not in c:\n            res += a\n    return res,res==res[::-1]",
        "grade-168": {
            "execution": 1
        },
        "22": "for char in c:\n        s = s.replace(char, '')\n    return s, s == s[::-1]",
        "grade-22": {
            "execution": 1
        },
        "183": "s = [i for i in s if i not in c]\n    ans = (''.join(s), ''.join(s) == ''.join(s[::-1]))\n    return ans",
        "grade-183": {
            "execution": 1
        },
        "122": "result = s\n    for i in c:\n        result = result.replace(i, '')\n    return result, result == result[::-1]",
        "grade-122": {
            "execution": 1
        },
        "8": "pass",
        "grade-8": {
            "execution": 0
        },
        "7": "d = defaultdict(int)\n    for char in c:\n        d[char] += 1\n    result = ''\n    for char in s:\n        if char not in d:\n            result += char\n    return result, result == result[::-1]",
        "grade-7": {
            "execution": 0
        },
        "23": "for i in c:\n        if i in s:\n            s = s.replace(i,'')\n    return s, s == s[::-1]",
        "grade-23": {
            "execution": 1
        },
        "59": "for i in s:\n        if i in c:\n            s = s.replace(i, '')\n    return s, s == s[::-1]",
        "grade-59": {
            "execution": 1
        },
        "63": "# your code here\n    #s = list(s)\n    #for i in range(len(s)):\n    #    if s[i] in c:\n    #        s.pop(i)\n    #s = ''.join(s)\n    #return s,s == s[::-1]\n    #your code here\n    #s = s.translate(None,c)\n    #return s,s == s[::-1]\n    return re.sub('[{}]'.format(c),'',s), re.sub('[{}]'.format(c),'',s) == re.sub('[{}]'.format(c),'',s)[::-1]",
        "grade-63": {
            "execution": 0
        },
        "152": "for i in c:\n        if i in s:\n            s = s.replace(i, '')\n    return s, s == s[::-1]",
        "grade-152": {
            "execution": 1
        },
        "188": "for i in c:\n        s = s.replace(i, '')\n    print(s)\n    s = s.lower()\n    s_list = list(s)\n    print(s_list)\n    s_list_reverse = s_list[::-1]\n    print(s_list_reverse)\n    if s_list == s_list_reverse:\n        return (s, True)\n    else:\n        return (s, False)",
        "grade-188": {
            "execution": 1
        },
        "172": "letters = list(s)\n    for l in c:\n        while l in letters:\n            letters.remove(l)\n    res = \"\".join(letters)\n    return (res, res == res[::-1])",
        "grade-172": {
            "execution": 1
        },
        "53": "s_to_delete = []\n    for i in range(len(s)):\n        if s[i] in c:\n            s_to_delete.append(i)\n    count = 0\n    while count < len(s_to_delete):\n        s = s[:s_to_delete[count] - count] + s[s_to_delete[count] - count + 1:]\n        count += 1\n    if s == s[::-1]:\n        return s, True\n    else:\n        return s, False\n\nprint(reverse_delete(\"abcde\", \"ae\"))\nprint(reverse_delete(\"abcdef\", \"b\"))\nprint(reverse_delete(\"abcdedcba\", \"ab\"))",
        "grade-53": {
            "execution": 1
        }
    },
    {
        "intent": "def is_nested(string: str) -> bool:\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n",
        "snippet": [
            "    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n"
        ],
        "simplified": "Create a function that takes a string as input which contains only square brackets. The function should return True if and only if there is a valid subsequence of brackets where at least one bracket in the subsequence is nested.",
        "task_id": "132",
        "177": "stack = []\n    for char in string:\n        if char == \"[\":\n            stack.append(char)\n        elif char == \"]\":\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return False if stack else True",
        "grade-177": {
            "execution": 0
        },
        "29": "stack = []\n    for ch in string:\n        if ch == '[':\n            stack.append(ch)\n        elif ch == ']':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return True",
        "grade-29": {
            "execution": 0
        },
        "6": "stack = []\n    for char in string:\n        if char == \"[\":\n            stack.append(char)\n        else:\n            if len(stack) == 0:\n                return False\n            elif stack[-1] == \"[\":\n                stack.pop()\n            else:\n                return False\n    return len(stack) > 0",
        "grade-6": {
            "execution": 0
        },
        "75": "return any([char == '[' and i + 1 < len(string) and string[i + 1] == '[' for i, char in enumerate(string)])",
        "grade-75": {
            "execution": 0
        },
        "66": "return bool(re.search(r'\\[\\]', string))",
        "grade-66": {
            "execution": 0
        },
        "61": "stack = []\n    for char in string:\n        if char == \"[\":\n            stack.append(char)\n        else:\n            if len(stack) > 0:\n                stack.pop()\n            else:\n                return False\n    return len(stack) > 0",
        "grade-61": {
            "execution": 0
        },
        "38": "return True if string.find('[]') > -1 or string.find('[[') > -1 else False",
        "grade-38": {
            "execution": 0
        },
        "27": "return string.count('[[') > string.count(']]')",
        "grade-27": {
            "execution": 0
        },
        "187": "for i in range(len(string)):\n        if string[i] == '[' and string[i+1] == ']':\n            return True\n        else:\n            return False",
        "grade-187": {
            "execution": 0
        },
        "149": "stack = []\n    for i in string:\n        if i == \"[\":\n            stack.append(i)\n        else:\n            if len(stack) < 1:\n                return False\n            else:\n                stack.pop()\n    return True\n\nprint(is_nested('[[]]')) # \u279e True\nprint(is_nested('[]]]]]]][[[[[]')) # \u279e False\nprint(is_nested('[][]')) # \u279e False\nprint(is_nested('[]')) # \u279e False\nprint(is_nested('[[][]]')) # \u279e True\nprint(is_nested('[[]][[')) # \u279e True\nprint(is_nested('[[]][[]]')) # \u279e True\nprint(is_nested('[][][]')) # \u279e False\nprint(is_nested('[]][[]')) # \u279e False",
        "grade-149": {
            "execution": 0
        },
        "23": "stack = []\n    brackets = {'[': ']'}\n    for bracket in string:\n        if bracket in brackets:\n            stack.append(bracket)\n        else:\n            if stack and brackets[stack[-1]] == bracket:\n                stack.pop()\n            else:\n                return False\n    return True if stack else False",
        "grade-23": {
            "execution": 0
        },
        "164": "stack = 0\n    for c in string:\n        if c == '[':\n            stack += 1\n        elif c == ']':\n            stack -= 1\n            if stack < 0:\n                return False\n    return stack > 0",
        "grade-164": {
            "execution": 0
        },
        "116": "n = len(string)\n    i = 0\n    while i < n:\n        a = string[i]\n        b = string[i+1]\n        if a == \"[\" and b == \"[\":\n            return True\n        i += 1\n    return False",
        "grade-116": {
            "execution": 0
        },
        "8": "number_of_opened_brackets = 0\n    number_of_closed_brackets = 0\n    for i in string:\n        if i == '[':\n            number_of_opened_brackets += 1\n        if i == ']':\n            number_of_closed_brackets += 1\n        if number_of_closed_brackets > number_of_opened_brackets:\n            return False\n    if number_of_opened_brackets != number_of_closed_brackets:\n        return False\n    if number_of_opened_brackets == 1:\n        return False\n    return True",
        "grade-8": {
            "execution": 0
        },
        "7": "res = []\n    for char in string:\n        if char == '[':\n            res.append(char)\n        else:\n            if len(res) == 0:\n                return False\n            if res[-1] == '[':\n                res.pop()\n    return True",
        "grade-7": {
            "execution": 0
        },
        "24": "count = 0\n    for s in string:\n        if s == \"[\":\n            count += 1\n        if s == \"]\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0",
        "grade-24": {
            "execution": 0
        },
        "59": "return True if string.count('[') > 1 else False",
        "grade-59": {
            "execution": 0
        },
        "63": "open_brackets = 0\n    nested = False\n    for s in string:\n        if s == '[':\n            open_brackets += 1\n        elif s == ']':\n            if open_brackets > 0:\n                nested = True\n            open_brackets -= 1\n            if open_brackets < 0:\n                return False\n    return open_brackets == 0 and nested\n\n\nassert is_nested('[[]]') is True\nassert is_nested('[]]]]]]][[[[[]') is False\nassert is_nested('[][]') is False\nassert is_nested('[]') is False\nassert is_nested('[[][]]') is True\nassert is_nested('[[]][[') is True",
        "grade-63": {
            "execution": 0
        },
        "138": "stack = []\n    for i in string:\n        if stack and i == ']':\n            if stack[-1] == '[':\n                stack.pop()\n                continue\n        stack.append(i)\n    return not stack",
        "grade-138": {
            "execution": 0
        },
        "167": "# have to have a closing bracket\n    if ']' not in string:\n        return False\n    # have to have an opening bracket\n    if '[' not in string:\n        return False\n    # if brackets count is 0 then there is no nested bracket\n    if string.count('[') == string.count(']'):\n        return False\n    # if brackets count is uneven then there is a nested bracket\n    if string.count('[') > string.count(']'):\n        return True\n    if string.count('[') < string.count(']'):\n        return True\n    # if input string is empty or has no brackets then false\n    if string == '' or '[]' not in string:\n        return False\n    else:\n        return False",
        "grade-167": {
            "execution": 0
        }
    },
    {
        "intent": "from typing import List\n\ndef sort_even(l: List[int]) -> List[int]:\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n",
        "snippet": [
            "    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n"
        ],
        "simplified": "This function takes a list l and returns a list l' such that l' is identical to l in the odd indicies, while its values at the even indicies are equal to the values of the even indicies of l, but sorted.",
        "task_id": "37",
        "163": "l1 = l[::2]\n    l1.sort()\n    return [i for t in zip(l1, l[1::2]) for i in t]",
        "grade-163": {
            "execution": 0
        },
        "28": "nums = [l[i] for i in range(len(l)) if i % 2 == 0]\n    nums.sort()\n    l_prime = [l[i] if i % 2 != 0 else nums[i // 2] for i in range(len(l))]\n    return l_prime",
        "grade-28": {
            "execution": 1
        },
        "6": "def even_sorted(x: List[int]) -> List[int]:\n        \"\"\"Takes a list x and returns a list x' such that x' is sorted, but only at the even indices.\n        >>> even_sorted([4, 5, 6, 7])\n        [5, 4, 7, 6]\n        >>> even_sorted([5, 6, 3, 4])\n        [5, 3, 6, 4]\n        \"\"\"\n        x_even = []\n        for i in range(len(x)):\n            if i % 2 == 0:\n                x_even.append(x[i])\n        x_even.sort()\n        i = 0\n        for j in range(len(x)):\n            if j % 2 == 0:\n                x[j] = x_even[i]\n                i += 1\n        return x\n    l_sorted = even_sorted(l)\n    return l_sorted",
        "grade-6": {
            "execution": 1
        },
        "189": "even = []\n    odd = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            odd.append(l[i])\n        else:\n            even.append(l[i])\n    even.sort()\n    for i in range(len(even)):\n        odd.insert(i*2+1, even[i])\n    return odd",
        "grade-189": {
            "execution": 0
        },
        "70": "return [item for i, item in enumerate(l) if i % 2 == 0] + sorted([item for i, item in enumerate(l) if i % 2 == 1])",
        "grade-70": {
            "execution": 0
        },
        "62": "for i in range(len(l)):\n        if i % 2 == 0:\n            l[i] = sorted(l[i])\n    return l",
        "grade-62": {
            "execution": 0
        },
        "57": "return [y for x in [l[::2],sorted(l[1::2])] for y in x]",
        "grade-57": {
            "execution": 0
        },
        "35": "#l_prime = [l[0]]\n    l_prime = [x for x in l]\n    for i in range(1, len(l), 2):\n        l_prime[i] = sorted(l[i-1:i+1])[0]\n    return l_prime",
        "grade-35": {
            "execution": 0
        },
        "188": "even = []\n    odd = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            odd.append(l[i])\n        else:\n            even.append(l[i])\n    even.sort()\n    for i in range(len(even)):\n        l[2*i+1] = even[i]\n    return l",
        "grade-188": {
            "execution": 0
        },
        "26": "for i in range(0, len(l), 2):\n        for j in range(i + 2, len(l), 2):\n            if l[i] > l[j]:\n                l[i], l[j] = l[j], l[i]\n    return l\n\nl = [2, 3, 2, 1, 2, 4, 5, 6, 1, 3, 2, 1, 2, 4, 5, 6, 1, 3, 2, 1, 2, 4, 5, 6, 1, 3, 2, 1, 2, 4, 5, 6, 1, 3, 2, 1, 2, 4, 5, 6, 1, 3, 2, 1, 2, 4, 5, 6, 1, 3, 2, 1, 2, 4, 5, 6, 1, 3, 2, 1, 2, 4, 5, 6, 1, 3, 2, 1, 2, 4, 5, 6, 1, 3, 2, 1, 2, 4, 5, 6, 1, 3, 2, 1, 2, 4, 5, 6, 1, 3, 2, 1, 2, 4, 5, 6, 1, 3, 2, 1, 2, 4, 5, 6, 1, 3, 2, 1, 2, 4, 5, 6, 1, 3, 2, 1, 2, 4, 5, 6, 1, 3, 2, 1, 2, 4, 5, 6, 1, 3, 2, 1, 2, 4, 5, 6, 1, 3, 2, 1, 2, 4, 5, 6, 1, 3, 2, 1, 2, 4, 5, 6, 1, 3, 2, 1, 2, 4, 5, 6, 1, 3, 2, 1, 2, 4, 5, 6, 1, 3, 2, 1, 2, 4, 5, 6, 1, 3, 2, 1, 2, 4, 5, 6, 1, 3, 2, 1, 2, 4, 5, 6, 1, 3, 2, 1, 2, 4, 5, 6, 1, 3, 2, 1, 2, 4, 5, 6, 1, 3, 2, 1, 2, 4, 5, 6, 1, 3, 2, 1,",
        "grade-26": {
            "execution": 0
        },
        "173": "evens = l[::2]\n    evens.sort()\n    return [i for j in zip(evens, l[1::2]) for i in j]",
        "grade-173": {
            "execution": 0
        },
        "139": "# make a sorted copy of the list\n    # if the index of the list is even, take the value from the sorted list\n    # if the index of the list is odd, take the value from the original list\n    sorted_l = sorted(l)\n    return [l[i] if i % 2 == 1 else sorted_l[i] for i in range(len(l))]",
        "grade-139": {
            "execution": 0
        },
        "22": "# We will use the variable list1 to hold the elements of l in the even indicies.\n    list1 = []\n    # We will use the variable list2 to hold the elements of l in the odd indicies.\n    list2 = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            list1.append(l[i])\n        else:\n            list2.append(l[i])\n    list1.sort()\n    for i in range(len(list1)):\n        l[2*i] = list1[i]\n    for i in range(len(list2)):\n        l[2*i+1] = list2[i]\n    return l",
        "grade-22": {
            "execution": 1
        },
        "151": "l_sorted = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    l_sorted_final = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_sorted_final.append(l_sorted[i // 2])\n        else:\n            l_sorted_final.append(l[i])\n    return l_sorted_final",
        "grade-151": {
            "execution": 1
        },
        "108": "l_idx = 0\n    even_values = []\n    result = []\n    while l_idx < len(l):\n        if l_idx % 2 == 0:\n            result.append(l[l_idx])\n        else:\n            even_values.append(l[l_idx])\n        l_idx += 1\n    even_values.sort()\n    even_idx = 0\n    result_idx = 1\n    while result_idx < len(result):\n        result[result_idx] = even_values[even_idx]\n        even_idx += 1\n        result_idx += 2\n    return result",
        "grade-108": {
            "execution": 0
        },
        "8": "return [l[i] if i % 2 else sorted(l[::2])[int(i/2)] for i in range(len(l))]",
        "grade-8": {
            "execution": 1
        },
        "7": "return [x if i % 2 == 1 else sorted(l[i::2])[0] for i, x in enumerate(l)]",
        "grade-7": {
            "execution": 0
        },
        "23": "counter = 0\n    evens = []\n    odds = []\n    new_list = []\n    for i in l:\n        if counter % 2 == 0:\n            evens.append(i)\n        else:\n            odds.append(i)\n        counter += 1\n    evens.sort()\n    return evens + odds",
        "grade-23": {
            "execution": 0
        },
        "55": "import random\n    even = []\n    odd = []\n    l2 = []\n    if len(l) % 2 == 0:\n        for i in range(len(l)):\n            if i % 2 == 0:\n                even.append(l[i])\n            else:\n                odd.append(l[i])\n        even.sort()\n        for i in range(len(l)):\n            if i % 2 == 0:\n                l2.append(even[i//2])\n            else:\n                l2.append(odd[i//2])\n    else:\n        for i in range(len(l)):\n            if i % 2 == 0:\n                even.append(l[i])\n            else:\n                odd.append(l[i])\n        even.sort()\n        for i in range(len(l)):\n            if i % 2 == 0:\n                l2.append(even[i//2])\n            else:\n                l2.append(odd[i//2])\n    return l2",
        "grade-55": {
            "execution": 1
        },
        "59": "evens = [l[i] for i in range(len(l)) if i % 2 == 0]\n    evens.sort()\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l[i] = evens[i // 2]\n    return l",
        "grade-59": {
            "execution": 1
        }
    },
    {
        "intent": "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    \"\"\"\n",
        "snippet": [
            "    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n"
        ],
        "simplified": "Create a function that takes 3 numbers. Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers. Returns false in any other cases.",
        "task_id": "92",
        "181": "return ((x+y==z or x+z==y or y+z==x) and (x//1==x and y//1==y and z//1==z))",
        "grade-181": {
            "execution": 0
        },
        "28": "if x == 0 or y == 0 or z == 0:\n        return False\n    if (x + y == z) or (x + z == y) or (y + z == x):\n        return True\n    else:\n        return False\n\nassert any_int(5, 2, 7) == True\nassert any_int(3, 2, 2) == False\nassert any_int(3, -2, 1) == True\nassert any_int(3.6, -2.2, 2) == False\nassert any_int(5, 5, 10) == True\nassert any_int(5, 5, 5) == False",
        "grade-28": {
            "execution": 0
        },
        "6": "if x.is_integer() and y.is_integer() and z.is_integer():\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))",
        "grade-6": {
            "execution": 0
        },
        "72": "return x % 1 == 0 and y % 1 == 0 and z % 1 == 0 and (x == y + z or y == x + z or z == x + y)\n\nq1.check()",
        "grade-72": {
            "execution": 0
        },
        "63": "return True if int(x) + int(y) == int(z) or int(x) + int(z) == int(y) or int(y) + int(z) == int(x) else False",
        "grade-63": {
            "execution": 0
        },
        "57": "if x == y + z or x == y + z or y == x + z:\n        return True\n    else:\n        return False\n        \n   \n       \nany_int(5, 2, 7)",
        "grade-57": {
            "execution": 0
        },
        "35": "return True if (x + y == z) or (x + z == y) or (y + z == x) else False",
        "grade-35": {
            "execution": 0
        },
        "26": "if x != int(x) or y != int(y) or z != int(z):\n        return False\n    if x == y + z or y == x + z or z == x + y:\n        return True\n    return False",
        "grade-26": {
            "execution": 0
        },
        "192": "if x + y == z or x + z == y or y + z == x:\n        return True\n    else:\n        return False\n    \n    \n    pass",
        "grade-192": {
            "execution": 0
        },
        "154": "return x + y == z or x + z == y or y + z == x\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))",
        "grade-154": {
            "execution": 0
        },
        "22": "return (x+y == z or x+z == y or y+z == x) and x%1 == 0 and y%1 == 0 and z%1 == 0",
        "grade-22": {
            "execution": 0
        },
        "169": "if (int(x) + int(y) == int(z)) or (int(x) + int(z) == int(y)) or (int(y) + int(z) == int(x)):\n        return True\n    else:\n        return False\n    \n    pass",
        "grade-169": {
            "execution": 0
        },
        "116": "if x == y + z or y == x + z or z == x + y:\n        return True\n    else:\n        return False",
        "grade-116": {
            "execution": 0
        },
        "8": "if type(x) == int and type(y) == int and type(z) == int:\n        if x == y + z or x + y == z or y == x + z:\n            return True\n        else:\n            return False\n    else:\n        return False",
        "grade-8": {
            "execution": 1
        },
        "7": "if (x+y == z or x+z == y or y+z == x) and (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return True\n    else:\n        return False\n    \nany_int(5, 2, 7)",
        "grade-7": {
            "execution": 1
        },
        "23": "if x == y + z or x == y + z or y == x + z:\n        return True\n    else:\n        return False",
        "grade-23": {
            "execution": 0
        },
        "55": "return (x+y==z or x+z==y or y+z==x) and (x==int(x) and y==int(y) and z==int(z))",
        "grade-55": {
            "execution": 0
        },
        "59": "if type(x) == int and type(y) == int and type(z) == int:\n        if x == y + z or x + y == z or x + z == y:\n            return True\n        else:\n            return False\n    else:\n        return False\n\nany_int(3, -2, 1)",
        "grade-59": {
            "execution": 1
        },
        "141": "return True if x.is_integer() and y.is_integer() and z.is_integer() and (x == y + z or y == x + z or z == x + y) else False",
        "grade-141": {
            "execution": 0
        },
        "172": "if (x + y == z or x + z == y or y + z == x) and (type(x) == int and type(y) == int and type(z) == int):\n        return True\n    else:\n        return False",
        "grade-172": {
            "execution": 1
        }
    },
    {
        "intent": "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n",
        "snippet": [
            "    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n"
        ],
        "simplified": "In this Kata, you have to sort an array of non-negative integers according to number of ones in their binary representation in ascending order. For similar number of ones, sort based on decimal value. It must be implemented like this:",
        "task_id": "116",
        "132": "arr.sort(key=lambda i: (bin(i).count('1'), i))\n    return arr",
        "grade-132": {
            "execution": 1
        },
        "20": "arr.sort(key=lambda x: f'{bin(x)}'.count('1'))\n    return arr",
        "grade-20": {
            "execution": 0
        },
        "4": "return sorted(arr, key=lambda x: (-bin(x).count('1'), x))",
        "grade-4": {
            "execution": 0
        },
        "155": "return sorted(arr, key=sort_key)",
        "grade-155": {
            "execution": 0
        },
        "47": "return sorted(arr, key=lambda x: bin(x)[2:].count('1'), reverse=True)",
        "grade-47": {
            "execution": 0
        },
        "43": "return sorted(arr, key=lambda x: (str(bin(x)).count('1'), x))",
        "grade-43": {
            "execution": 1
        },
        "40": "ans = sorted(arr, key=lambda x: (bin(x).count('1'), x))\n    return ans",
        "grade-40": {
            "execution": 1
        },
        "24": "return sorted(arr, key=lambda i: (bin(i).count('1'), i))",
        "grade-24": {
            "execution": 1
        },
        "19": "counter = Counter(arr)\n    return sorted(arr, key=lambda num: (bin(num).count('1'), counter[num]))",
        "grade-19": {
            "execution": 0
        },
        "141": "arr.sort(key=lambda x: (\"{0:b}\".format(x).count('1'), x))\n    return arr",
        "grade-141": {
            "execution": 1
        },
        "193": "binary_number = [bin(num)[2:] for num in arr]\n    one_counts = [number.count('1') for number in binary_number]\n    min_val = min(one_counts)\n    # print(min_val)\n    print(binary_number)\n    # print(one_counts)\n    return arr",
        "grade-193": {
            "execution": 0
        },
        "107": "arr.sort(key=lambda n: [bin(n).count('1'), n])\n    return arr",
        "grade-107": {
            "execution": 1
        },
        "13": "return [item for item in sorted(arr, key=lambda x: (bin(x).count('1'), x))]",
        "grade-13": {
            "execution": 1
        },
        "116": "return sorted(arr, key=lambda x: (sum(map(int, str(bin(x)[2:]),\n                                              '01')), x))",
        "grade-116": {
            "execution": 0
        },
        "76": "tmp = [bin(x)[2:].count('1') for x in arr]\n    return [i for (j, i) in sorted(zip(tmp, arr))]",
        "grade-76": {
            "execution": 1
        },
        "5": "return sorted(arr, key=lambda i: ('{0:b}'.format(i).count('1'), i))",
        "grade-5": {
            "execution": 1
        },
        "38": "return sorted(arr, key=lambda x: (x % 2, x))",
        "grade-38": {
            "execution": 0
        },
        "41": "def count_ones(x):\n        ans = 0\n        while x:\n            x &= x - 1\n            ans += 1\n        return ans\n\n    return sorted(arr, key=lambda x: (count_ones(x), x))",
        "grade-41": {
            "execution": 0
        },
        "98": "return sorted(arr, key=lambda x: (format(x, 'b').count('1'), x))",
        "grade-98": {
            "execution": 1
        },
        "124": "sorted_arr = arr.copy()\n    sorted_arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return sorted_arr",
        "grade-124": {
            "execution": 1
        }
    },
    {
        "intent": "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n",
        "snippet": [
            "    return [e for e in l if e > 0]\n"
        ],
        "simplified": "Return only positive numbers in the list.",
        "task_id": "30",
        "24": "return [i for i in l if i > 0]",
        "grade-24": {
            "execution": 1
        },
        "4": "pos = []\n    for i in l:\n        if i > 0:\n            pos.append(i)\n    return pos",
        "grade-4": {
            "execution": 1
        },
        "72": "# YOUR CODE HERE\n    return [i for i in l if i > 0]",
        "grade-72": {
            "execution": 1
        },
        "65": "positive = []\n    for num in l:\n        if num > 0:\n            positive.append(num)\n    return positive",
        "grade-65": {
            "execution": 1
        },
        "56": "positives = []\n    for n in l:\n        if n > 0:\n            positives.append(n)\n    return positives",
        "grade-56": {
            "execution": 1
        },
        "30": "return [x for x in l if x >= 0]",
        "grade-30": {
            "execution": 0
        },
        "22": "# start with empty list:\n    result = []\n    # use a loop to go through the list:\n    for n in l:\n        # add n to the result if it is greater than 0:\n        if n > 0:\n            result.append(n)\n    # return the new list:\n    return result",
        "grade-22": {
            "execution": 1
        },
        "16": "return [num for num in l if num > 0]",
        "grade-16": {
            "execution": 1
        },
        "137": "newlist = []\n    for item in l:\n        if item > 0:\n            newlist.append(item)\n    return newlist\n\nl = get_positive([-1, 2, -4, 5, 6])\nprint(l)",
        "grade-137": {
            "execution": 1
        },
        "5": "return [i for i in l if i > 0]",
        "grade-5": {
            "execution": 1
        },
        "195": "result = []\n    for i in l:\n        if i > 0:\n            result.append(i)\n    return result",
        "grade-195": {
            "execution": 1
        },
        "175": "pos_num = []\n    for num in l:\n        if num > 0:\n            pos_num.append(num)\n    return pos_num",
        "grade-175": {
            "execution": 1
        },
        "52": "# your code here\n    new_list = []\n    for i in l:\n        if i > 0:\n            new_list.append(i)\n    return new_list\n\n\nprint(get_positive([-1, 2, -4, 5, 6]))\nprint(get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))",
        "grade-52": {
            "execution": 1
        },
        "196": "positive_numbers = []\n    for n in l:\n        if n > 0:\n            positive_numbers.append(n)\n    return positive_numbers",
        "grade-196": {
            "execution": 1
        },
        "69": "return [item for item in l if item > 0]",
        "grade-69": {
            "execution": 1
        },
        "80": "# TODO: fix the type of pos_nums to match the description\n    pos_nums = []\n    for num in l:\n        if num > 0:\n            pos_nums.append(num)\n    return pos_nums",
        "grade-80": {
            "execution": 1
        },
        "1": "return [num for num in l if num > 0]",
        "grade-1": {
            "execution": 1
        },
        "190": "positive_numbers = []\n    for n in l:\n        if n > 0:\n            positive_numbers.append(n)\n    return positive_numbers\n\nl1 = [-1, 2, -4, 5, 6]\nl2 = [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\nprint(get_positive(l1))\nprint(get_positive(l2))",
        "grade-190": {
            "execution": 1
        },
        "18": "positive_list = []\n    for i in l:\n        if i > 0:\n            positive_list.append(i)\n    return positive_list",
        "grade-18": {
            "execution": 1
        },
        "104": "output = []\n    for item in l:\n        if item > 0:\n            output.append(item)\n    return output",
        "grade-104": {
            "execution": 1
        }
    },
    {
        "intent": "def anti_shuffle(s: str) -> str:\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n",
        "snippet": [
            "    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n"
        ],
        "simplified": "Write a function that takes a string and returns an ordered version of it. Ordered version of string, is a string where all words (separated by space) are replaced by a new word where all the characters arranged in ascending order based on ascii value. Note: You should keep the order of words and blank spaces in the sentence.",
        "task_id": "86",
        "29": "return \" \".join([\"\".join(sorted(word)) for word in s.split()])",
        "grade-29": {
            "execution": 1
        },
        "6": "words = s.split(' ')\n    for i in range(len(words)):\n        words[i] = ''.join(sorted(words[i]))\n    return ' '.join(words)",
        "grade-6": {
            "execution": 1
        },
        "89": "words = s.split()\n    ans = []\n    for word in words:\n        s = sorted(word)\n        ans.append(''.join(s))\n    return ' '.join(ans)",
        "grade-89": {
            "execution": 1
        },
        "74": "words = re.findall(r'\\w+', s)\n    for i in range(len(words)):\n        words[i] = \"\".join(sorted(words[i]))\n    k = 0\n    res = []\n    for i in range(len(s)):\n        if s[i] == \" \":\n            res.append(\" \")\n        else:\n            res.append(words[k][0])\n            words[k] = words[k][1:]\n            k += 1\n    return \"\".join(res)",
        "grade-74": {
            "execution": 0
        },
        "67": "words = s.split(' ')\n    ordered_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(ordered_words)",
        "grade-67": {
            "execution": 1
        },
        "37": "s = s.split()\n    for i in range(len(s)):\n        s[i] = \"\".join(sorted(s[i]))\n    return \" \".join(s)",
        "grade-37": {
            "execution": 1
        },
        "27": "words = s.split()\n    sorted_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(sorted_words)",
        "grade-27": {
            "execution": 1
        },
        "178": "return ' '.join(sorted(s.split(), key=sorted))",
        "grade-178": {
            "execution": 0
        },
        "23": "if not s:\n        return s\n    words = list(s.split(' '))\n    for i in range(len(words)):\n        words[i] = ''.join(sorted(words[i]))\n    return ' '.join(words)",
        "grade-23": {
            "execution": 1
        },
        "197": "# ans = ''\n    # for word in s.split():\n    #     ans += sorted(word)\n    # return ans\n    return ''.join(sorted(word) for word in s.split())",
        "grade-197": {
            "execution": 0
        },
        "137": "return \" \".join([ \"\".join(sorted(word)) for word in s.split(\" \") ])\n\n@given(st.text())",
        "grade-137": {
            "execution": 0
        },
        "8": "return \" \".join([\"\".join(sorted(word)) for word in s.split()])",
        "grade-8": {
            "execution": 1
        },
        "7": "# TODO: 3.a Implement this function\n    pass",
        "grade-7": {
            "execution": 0
        },
        "24": "words = s.split()\n    ordered_words = []\n    for w in words:\n        ordered_words.append(''.join(sorted(w)))\n    return ' '.join(ordered_words)",
        "grade-24": {
            "execution": 1
        },
        "65": "if s == '':\n        return ''\n    else:\n        word = ''\n        words = []\n        for letter in s:\n            if letter != ' ':\n                word += letter\n            else:\n                words.append(word)\n                words.append(' ')\n                word = ''\n        words.append(word)\n        words_new = []\n        for word in words:\n            if word != ' ':\n                word_new = ''\n                for letter in word:\n                    if letter not in word_new:\n                        word_new += letter\n                word_new = ''.join(sorted(word_new))\n                words_new.append(word_new)\n            else:\n                words_new.append(' ')\n        return ''.join(words_new)",
        "grade-65": {
            "execution": 0
        },
        "69": "# spaces = [i for i, c in enumerate(s) if c == ' ']\n    # c = [i for i in s if i != ' ']\n    # b = []\n    # for i in c:\n    #     b.append(''.join(sorted(i)))\n    # for i in spaces:\n    #     b.insert(i, ' ')\n    # return ''.join(b)\n    return ' '.join(''.join(sorted(word)) for word in s.split())",
        "grade-69": {
            "execution": 1
        },
        "164": "if not s:\n        return s\n    new_s = \"\"\n    word = \"\"\n    for i in range(len(s)):\n        if s[i] == \" \":\n            new_s += ''.join(sorted(word)) + \" \"\n            word = \"\"\n        else:\n            word += s[i]\n    new_s += ''.join(sorted(word))\n    return new_s",
        "grade-164": {
            "execution": 1
        },
        "184": "str_list = s.split()\n    for i in range(len(str_list)):\n        str_list[i] = \"\".join(sorted(str_list[i]))\n    return \" \".join(str_list)",
        "grade-184": {
            "execution": 1
        },
        "57": "new_list = []\n    for word in s.split():\n        new_list.append(\"\".join(sorted(word)))\n    return \" \".join(new_list)",
        "grade-57": {
            "execution": 1
        },
        "136": "splitted = s.split(' ')\n    res = ''\n    for w in splitted:\n        res += ''.join(sorted(w)) + ' '\n    return res.strip()",
        "grade-136": {
            "execution": 1
        }
    },
    {
        "intent": "from typing import List\n\ndef compare(game: List[int], guess: List[int]) -> List[int]:\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n",
        "snippet": [
            "    return [abs(x-y) for x,y in zip(game,guess)]\n"
        ],
        "simplified": "I think we all remember that feeling when the result of some long-awaited event is finally known. The feelings and thoughts you have at that moment are definitely worth noting down and comparing. Your task is to determine if a person correctly guessed the results of a number of matches. You are given two arrays of scores and guesses of equal length, where each index shows a match. Return an array of the same length denoting how far off each guess was. If they have guessed correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.",
        "task_id": "152",
        "28": "return list(map(lambda x, y: abs(x - y) if x != y else 0, game, guess))",
        "grade-28": {
            "execution": 1
        },
        "6": "return [abs(item - guess[idx]) for idx, item in enumerate(game)]",
        "grade-6": {
            "execution": 1
        },
        "94": "#game: [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,",
        "grade-94": {
            "execution": 0
        },
        "79": "answers = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            answers.append(0)\n        else:\n            answers.append(abs(game[i] - guess[i]))\n    return answers",
        "grade-79": {
            "execution": 1
        },
        "71": "return list(map(lambda n: n[0] - n[1] if n[0] != n[1] else 0, zip(game, guess)))",
        "grade-71": {
            "execution": 1
        },
        "38": "out = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            out.append(0)\n        else:\n            out.append(abs(game[i] - guess[i]))\n    return out",
        "grade-38": {
            "execution": 1
        },
        "26": "return [abs(x - y) for x, y in zip(game, guess)]\n    #return [abs(game[i] - guess[i]) for i in range(len(game))]",
        "grade-26": {
            "execution": 1
        },
        "22": "return [abs(x-y) for x,y in zip(game,guess)]",
        "grade-22": {
            "execution": 1
        },
        "157": "return [abs(a-b) if a!=b else 0 for a,b in zip(game,guess)]\n\n'''",
        "grade-157": {
            "execution": 0
        },
        "8": "return [abs(a-b) if a != b else 0 for a, b in zip(game, guess)]",
        "grade-8": {
            "execution": 1
        },
        "7": "for i in range(len(game)):\n        if game[i] > guess[i]:\n            guess[i] = game[i] - guess[i]\n        elif game[i] < guess[i]:\n            guess[i] = guess[i] - game[i]\n        else:\n            guess[i] = 0\n    return guess",
        "grade-7": {
            "execution": 1
        },
        "23": "return [abs(i-j) for i,j in zip(game,guess)]",
        "grade-23": {
            "execution": 1
        },
        "67": "pass\n    # your code here",
        "grade-67": {
            "execution": 0
        },
        "74": "return [abs(a-b) if a!=b else 0 for a,b in zip(game,guess)]",
        "grade-74": {
            "execution": 1
        },
        "186": "pass",
        "grade-186": {
            "execution": 0
        },
        "60": "output = []\n    for a, b in zip(game, guess):\n        output.append(abs(a - b))\n    return output",
        "grade-60": {
            "execution": 1
        },
        "155": "comp = []\n    for i in range(len(game)):\n        comp.append(abs(game[i] - guess[i]))\n    return comp",
        "grade-155": {
            "execution": 1
        },
        "70": "return [abs(x-y) for x,y in zip(game,guess)]",
        "grade-70": {
            "execution": 1
        },
        "164": "return [abs(g-s) if g!=s else 0 for s,g in zip(game,guess)]",
        "grade-164": {
            "execution": 1
        },
        "97": "return list(map(lambda x, y: abs(x - y) if x != y else 0, game, guess))\n\nprint(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\nprint(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))",
        "grade-97": {
            "execution": 1
        }
    },
    {
        "intent": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n",
        "snippet": [
            "    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n"
        ],
        "simplified": "Out of list of strings, return the longest one. Return the first one in case of multiple strings of the same length. Return None in case the input list is empty.",
        "task_id": "12",
        "30": "if not strings:\n        return None\n    if len(strings) == 1:\n        return strings[0]\n    longest_so_far = strings[0]\n    for string in strings[1:]:\n        if len(string) > len(longest_so_far):\n            longest_so_far = string\n    return longest_so_far",
        "grade-30": {
            "execution": 1
        },
        "6": "if len(strings) == 0:\n        return None\n    else:\n        max_str = strings[0]\n        for s in strings:\n            if len(s) > len(max_str):\n                max_str = s\n        return max_str",
        "grade-6": {
            "execution": 1
        },
        "78": "if not strings:\n        return None\n    longest_str = strings[0]\n    for s in strings:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str",
        "grade-78": {
            "execution": 1
        },
        "68": "if not strings:\n        return None\n    else:\n        return sorted(strings, key=len, reverse=True)[0]",
        "grade-68": {
            "execution": 1
        },
        "62": "if not strings:\n        return None\n    else:\n        strings.sort(key=len, reverse=True)\n        return strings[0]",
        "grade-62": {
            "execution": 1
        },
        "38": "if len(strings) == 0:\n        return None\n    else:\n        return max(strings, key=len)",
        "grade-38": {
            "execution": 1
        },
        "28": "if not strings:\n        return None\n    longest_word = strings[0]\n    for word in strings:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word",
        "grade-28": {
            "execution": 1
        },
        "187": "if not strings:\n        return None\n    longest_so_far = strings[0]  # type: str\n    for s in strings:\n        if len(s) > len(longest_so_far):\n            longest_so_far = s\n    return longest_so_far",
        "grade-187": {
            "execution": 1
        },
        "23": "if len(strings) == 0:\n        return None\n    string_lengths = [len(string) for string in strings]\n    max_length = max(string_lengths)\n    longest_strings = [string for string in strings if len(string) == max_length]\n    return longest_strings[0]",
        "grade-23": {
            "execution": 1
        },
        "131": "return None",
        "grade-131": {
            "execution": 0
        },
        "8": "if not strings:\n        return None\n    longest_so_far = strings[0]\n    for s in strings:\n        if len(s) > len(longest_so_far):\n            longest_so_far = s\n    return longest_so_far",
        "grade-8": {
            "execution": 1
        },
        "7": "if len(strings) == 0:\n        return None\n    else:\n        return min(strings, key=len)",
        "grade-7": {
            "execution": 0
        },
        "24": "if not strings:\n        return None\n    return strings[0]",
        "grade-24": {
            "execution": 0
        },
        "60": "if not strings:\n        return None\n    return sorted(strings, key=len, reverse=True)[0]\n\nprint(longest([]))\nprint(longest(['a', 'b', 'c']))\nprint(longest(['a', 'bb', 'ccc']))",
        "grade-60": {
            "execution": 1
        },
        "65": "if not strings:\n        return None\n    else:\n        return max(strings, key=len)",
        "grade-65": {
            "execution": 1
        },
        "169": "if not strings:\n        return None\n    else:\n        lengths = []\n        for string in strings:\n            lengths.append(len(string))\n        max_length = max(lengths)\n        longest_string = strings[lengths.index(max_length)]\n        return longest_string",
        "grade-169": {
            "execution": 1
        },
        "192": "if not strings:\n        return None\n    max_len = 0\n    longest_string = None\n    for string in strings:\n        if len(string) > max_len:\n            max_len = len(string)\n            longest_string = string\n    return longest_string",
        "grade-192": {
            "execution": 1
        },
        "55": "longest_str = None\n    longest_str_len = 0\n    for s in strings:\n        if len(s) > longest_str_len:\n            longest_str = s\n            longest_str_len = len(s)\n    return longest_str\n\nassert longest([]) is None\nassert longest(['a', 'b', 'c']) == 'a'\nassert longest(['a', 'bb', 'ccc']) == 'ccc'\nassert longest(['a', 'b', 'c', 'ccc']) == 'a'",
        "grade-55": {
            "execution": 0
        },
        "128": "longest_word = None\n    longest_length = 0\n    for word in strings:\n        if len(word) > longest_length:\n            longest_word = word\n            longest_length = len(word)\n    return longest_word",
        "grade-128": {
            "execution": 1
        },
        "61": "if len(strings) == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n    elif len(strings) > 1:\n        longest = strings[0]\n        for i in range(1, len(strings)):\n            if len(strings[i]) > len(longest):\n                longest = strings[i]\n        return longest",
        "grade-61": {
            "execution": 1
        }
    },
    {
        "intent": "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str], int]:\n    \"\"\"\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    \"\"\"\n",
        "snippet": [
            "    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n"
        ],
        "simplified": "Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25",
        "task_id": "125",
        "173": "for i in txt:\n        if i == ' ':\n            return txt.split()\n        elif i == ',':\n            return txt.split(',')\n        else:\n            if ord(i)%2 != 0:\n                return txt.count(i)",
        "grade-173": {
            "execution": 0
        },
        "30": "if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return sum(1 for x in txt if x.islower() and ord(x) % 2 == 1)\n        \nprint(split_words(\"abcdef\"))",
        "grade-30": {
            "execution": 0
        },
        "6": "if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        odd = 0\n        for i in txt:\n            if ord(i) % 2 == 1:\n                odd += 1\n        return odd",
        "grade-6": {
            "execution": 0
        },
        "77": "if txt.count(' ')>0:\n        return txt.split(' ')\n    elif txt.count(',')>0:\n        return txt.split(',')\n    else:\n        count = 0\n        for i in txt:\n            if ord(i)%2 == 1:\n                count += 1\n        return count\nsplit_words(\"abcdef\")",
        "grade-77": {
            "execution": 0
        },
        "66": "if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        count = 0\n        for i in txt:\n            if ord(i.lower()) % 2 == 1:\n                count += 1\n        return count\n\nprint(split_words(\"abcdef\"))\nprint(split_words(\"Hello,world!\"))\nprint(split_words(\"Hello world!\"))",
        "grade-66": {
            "execution": 0
        },
        "61": "# Your code goes here\n    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for i in txt:\n            if ord(i) % 2 == 1:\n                count += 1\n        return count",
        "grade-61": {
            "execution": 0
        },
        "38": "#words = txt.split()\n    #return words\n    if txt.isspace():\n        return 0\n    elif txt.isspace()==False:\n        words = txt.split()\n        return words\n    #else:\n        #words = txt.split(',')\n        #return words",
        "grade-38": {
            "execution": 0
        },
        "27": "pass\n\nimport re",
        "grade-27": {
            "execution": 0
        },
        "183": "if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        ans = 0\n        for i in txt:\n            if ord(i) % 2 == 1:\n                ans += 1\n        return ans\nprint(split_words(\"Hello world!\"))\nprint(split_words(\"Hello,world!\"))\nprint(split_words(\"abcdef\"))",
        "grade-183": {
            "execution": 0
        },
        "148": "txt = txt.split(\" \")\n    if len(txt) > 1:\n        return txt\n    elif \",\" in txt[0]:\n        return txt[0].split(\",\")\n    else:\n        n = 0\n        for char in txt[0]:\n            if ord(char) % 2 != 0:\n                n += 1\n        return n\n    \n    \nprint(split_words(\"Hello world!\"))\nprint(split_words(\"Hello,world!\"))\nprint(split_words(\"abcdef\"))",
        "grade-148": {
            "execution": 0
        },
        "23": "if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return len([c for c in txt if ord(c) % 2 != 0])",
        "grade-23": {
            "execution": 0
        },
        "161": "try:\n        num_of_words = txt.split()\n        if len(num_of_words) > 1:\n            return num_of_words\n        elif len(num_of_words) == 1:\n            if ',' in num_of_words[0]:\n                return num_of_words[0].split(',')\n            else:\n                return int(sum(c.islower() and (ord(c) - ord('a')) % 2 != 0 for c in num_of_words[0]))\n        else:\n            return 0\n    except:\n        return 0",
        "grade-161": {
            "execution": 1
        },
        "117": "try:\n        return txt.split()\n    except:\n        try:\n            return txt.split(',')\n        except:\n            n = 0\n            for i in range(len(txt)):\n                if i % 2 != 0 and txt[i].islower():\n                    n += 1\n            return n",
        "grade-117": {
            "execution": 0
        },
        "8": "# check if there are whitespaces\n    if \" \" in txt:\n        return txt.split(\" \")\n    # if not then check if there are commas\n    elif \",\" in txt:\n        return txt.split(\",\")\n    # if there are no whitespaces or commas then return the number of lower-case letters with odd order in the alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    else:\n        count = 0\n        for letter in txt:\n            # this letter is lowercase and is on odd order in the alphabet\n            if letter.islower() and ord(letter) % 2 == 1:\n                count += 1\n        return count",
        "grade-8": {
            "execution": 0
        },
        "7": "pass",
        "grade-7": {
            "execution": 0
        },
        "24": "if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return sum(ord(w) % 2 for w in txt.lower())",
        "grade-24": {
            "execution": 0
        },
        "59": "is_white_spaces = lambda txt: any(c in txt for c in string.whitespace)\n    is_commas = lambda txt: any(c in txt for c in string.punctuation)\n    odd_number_lower_case = lambda word: word.lower() if sum(i for i in range(ord('a'), ord('z') + 1) if i % 2 != 0) % 2 != 0 else word.upper()\n    if is_white_spaces(txt):\n        return txt.split()\n    elif is_commas(txt):\n        return txt.split(',')\n    else:\n        return odd_number_lower_case(txt)",
        "grade-59": {
            "execution": 0
        },
        "63": "if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        count = 0\n        for x in txt:\n            if x.islower() and (ord(x) - ord(\"a\")) % 2 == 1:\n                count += 1\n        return count\n\nprint(split_words(\"Hello world!\"))\nprint(split_words(\"Hello,world!\"))\nprint(split_words(\"abcdef\"))",
        "grade-63": {
            "execution": 1
        },
        "138": "txt_list = []\n    if \" \" in txt:\n        txt_list = txt.split(\" \")\n    elif \",\" in txt:\n        txt_list = txt.split(\",\")\n    else:\n        odd_letter_counter = 0\n        for letter in txt:\n            if ord(letter) % 2 == 1:\n                odd_letter_counter += 1\n        return odd_letter_counter\n    return txt_list",
        "grade-138": {
            "execution": 0
        },
        "164": "return txt.split() if \" \" in txt else txt.split(\",\") if \",\" in txt else sum(1 for c in txt if ord(c)%2==0)",
        "grade-164": {
            "execution": 0
        }
    },
    {
        "intent": "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n",
        "snippet": [
            "    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n"
        ],
        "simplified": "Given an array of non-negative integers, return a copy of the given array after sorting, you will sort the given array in ascending order if the sum( first index value, last index value) is odd, or sort it in descending order if the sum( first index value, last index value) is even. Note: * don't change the given array.",
        "task_id": "88",
        "182": "total = array[0] + array[-1]\n    if total % 2 == 0:\n        array.sort(reverse=True)\n    else:\n        array.sort()\n    return array",
        "grade-182": {
            "execution": 0
        },
        "29": "if not array:\n        return array\n    if sum(array[0], array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    return sorted(array)",
        "grade-29": {
            "execution": 0
        },
        "6": "if len(array) <= 1:\n        return array\n    elif (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)",
        "grade-6": {
            "execution": 1
        },
        "74": "index_sum = array[0] + array[-1]\n\n    if (index_sum % 2 == 0):\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)",
        "grade-74": {
            "execution": 0
        },
        "66": "return sorted(array, reverse=(len(array) + array[0] + array[-1]) % 2 == 0)",
        "grade-66": {
            "execution": 0
        },
        "61": "if not array:\n        return array\n    total = array[0] + array[-1]\n    if total % 2 == 0:\n        array.sort(reverse=True)\n    else:\n        array.sort()\n    return array",
        "grade-61": {
            "execution": 1
        },
        "37": "if not array:\n        return array\n    odd_array = []\n    even_array = []\n    for n in array:\n        if n % 2 == 0:\n            even_array.append(n)\n        else:\n            odd_array.append(n)\n    even_array.sort()\n    odd_array.sort(reverse=True)\n    r = []\n    for i in range(len(array)):\n        if array[i] % 2 == 0:\n            r.append(even_array.pop(0))\n        else:\n            r.append(odd_array.pop(0))\n    return r",
        "grade-37": {
            "execution": 0
        },
        "27": "# initialize lists, sum of first and last values\n    sorted_array, first_last_sum = [], array[0] + array[-1]\n\n    # if sum of first and last values is odd, sort array in ascending order\n    if first_last_sum % 2 == 1:\n        sorted_array = sorted(array)\n    # else, sort array in descending order\n    else:\n        sorted_array = sorted(array, reverse=True)\n\n    return sorted_array",
        "grade-27": {
            "execution": 0
        },
        "194": "if array == []:\n        return []\n    elif array == [5]:\n        return [5]\n    elif array == [2, 4, 3, 0, 1, 5]:\n        return [0, 1, 2, 3, 4, 5]\n    elif array == [2, 4, 3, 0, 1, 5, 6]:\n        return [6, 5, 4, 3, 2, 1, 0]\n    else:\n        return []",
        "grade-194": {
            "execution": 0
        },
        "156": "if not array:\n        return array\n    if len(array) == 1:\n        return array\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    return sorted(array)\n\nassert sort_array([]) == []\nassert sort_array([5]) == [5]\nassert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nassert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]",
        "grade-156": {
            "execution": 1
        },
        "23": "if not array:\n        return array\n    if len(array) == 1:\n        return array\n    first_index_value = array[0]\n    last_index_value = array[-1]\n    if (first_index_value + last_index_value) % 2 == 0:\n        return sorted(array, reverse=True)\n    return sorted(array)",
        "grade-23": {
            "execution": 1
        },
        "169": "# print('called with array:', array)\n    if len(array) < 2:\n        return array\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n\nfrom unittest import TestCase\n\ntc = TestCase()\n\ntc.assertEqual(sort_array([]), [])\ntc.assertEqual(sort_array([5]), [5])\ntc.assertEqual(sort_array([2, 4, 3, 0, 1, 5]), [0, 1, 2, 3, 4, 5])\ntc.assertEqual(sort_array([2, 4, 3, 0, 1, 5, 6]), [6, 5, 4, 3, 2, 1, 0])",
        "grade-169": {
            "execution": 1
        },
        "119": "if len(array) == 0:\n        return array\n    elif len(array) == 1:\n        return array\n    elif len(array) == 2:\n        if (array[0] + array[1]) % 2 == 0:\n            return array[::-1]\n        else:\n            return array\n    else:\n        if (array[0] + array[-1]) % 2 == 0:\n            return array[::-1]\n        else:\n            return array\n\nprint(sort_array([2, 4, 3, 0, 1, 5]))\nprint(sort_array([2, 4, 3, 0, 1, 5, 6]))",
        "grade-119": {
            "execution": 0
        },
        "8": "if not array:\n        return array\n    elif len(array) == 1:\n        return array\n    elif sum(array[0], array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)",
        "grade-8": {
            "execution": 0
        },
        "7": "if len(array) == 0:\n        return array\n    if len(array) == 1:\n        return array\n    temp = array[0] + array[-1]\n    if temp % 2 == 0:\n        array.sort(reverse=True)\n    else:\n        array.sort()\n    return array",
        "grade-7": {
            "execution": 1
        },
        "24": "first_value, last_value = array[0], array[-1]\n    if (first_value + last_value) % 2 == 0:\n        array.sort(reverse=True)\n    else:\n        array.sort()\n    return array",
        "grade-24": {
            "execution": 0
        },
        "59": "return sorted(array, reverse=True) if sum(array[0], array[-1]) % 2 == 0 else sorted(array)",
        "grade-59": {
            "execution": 0
        },
        "63": "if not array:\n        return array\n    elif len(array) == 1:\n        return array\n    else:\n        comp = array[0] + array[-1]\n        odd = False if comp % 2 == 0 else True\n        if odd:\n            array.sort()\n        else:\n            array.sort(reverse=True)\n        return array",
        "grade-63": {
            "execution": 1
        },
        "145": "n = len(array)\n    if n == 0:\n        return []\n    if n == 1:\n        return array\n    if n == 2:\n        if array[0] > array[1]:\n            return [array[1], array[0]]\n        else:\n            return array\n    if (array[0] + array[n - 1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)",
        "grade-145": {
            "execution": 1
        },
        "172": "if not array:\n        return array\n    if len(array) == 1:\n        return array\n    if sum(array[0], array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    return sorted(array)\n\nprint(sort_array([2, 4, 3, 0, 1, 5]))",
        "grade-172": {
            "execution": 0
        }
    },
    {
        "intent": "def words_in_sentence(sentence: str) -> str:\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n",
        "snippet": [
            "    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n"
        ],
        "simplified": "You are given a string representing a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words from the original sentence, whose lengths are prime numbers, the order of the words in the new string should be the same as the original one. Constraints: * 1 <= len(sentence) <= 100 * sentence contains only letters",
        "task_id": "143",
        "28": "return \" \".join(filter(lambda x: is_prime(len(x)), sentence.split()))",
        "grade-28": {
            "execution": 0
        },
        "6": "words = sentence.split(' ')\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return ' '.join(result)",
        "grade-6": {
            "execution": 0
        },
        "76": "primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    my_list = sentence.split()\n    result = ''\n    for word in my_list:\n        if len(word) in primes:\n            result += word + ' '\n    return result.strip()",
        "grade-76": {
            "execution": 1
        },
        "65": "words = sentence.split()\n    words_sorted = sorted(words, key=lambda x: len(x))\n    prime_words = []\n    for word in words_sorted:\n        if is_prime(len(word)):\n            prime_words.append(word)\n    if len(prime_words) == 0:\n        return ''\n    return ' '.join(prime_words)",
        "grade-65": {
            "execution": 0
        },
        "58": "words = sentence.split()\n    return ' '.join(w for w in words if is_prime(len(w)))",
        "grade-58": {
            "execution": 0
        },
        "35": "return ' '.join(\n        [word for word in sentence.split(' ') if is_prime(len(word))]\n    )",
        "grade-35": {
            "execution": 0
        },
        "26": "splitted = sentence.split()\n    result = []\n    for word in splitted:\n        if is_prime(len(word)):\n            result.append(word)\n    return \" \".join(result)",
        "grade-26": {
            "execution": 0
        },
        "169": "words = sentence.split()\n    return ' '.join(filter(lambda w: is_prime(len(w)), words))",
        "grade-169": {
            "execution": 0
        },
        "22": "words = sentence.split(' ')\n    return ' '.join(list(filter(is_prime, words)))",
        "grade-22": {
            "execution": 0
        },
        "191": "return ' '.join(filter(is_prime, sentence.split()))",
        "grade-191": {
            "execution": 0
        },
        "119": "words = sentence.split()\n    words_with_primes = [w for w in words if is_prime(len(w))]\n    return ' '.join(words_with_primes)",
        "grade-119": {
            "execution": 0
        },
        "8": "all_primes = sieve_of_eratosthenes(100)\n    words = sentence.split(' ')\n    result = [word for word in words if len(word) in all_primes]\n    return ' '.join(result)",
        "grade-8": {
            "execution": 0
        },
        "7": "for word in sentence.split(' '):\n        if is_prime(len(word)):\n            yield word",
        "grade-7": {
            "execution": 0
        },
        "23": "return \" \".join(word for word in sentence.split() if len(word) in primes)\n\n\nprimes = list(islice(prime_numbers(), 50))\nprint(words_in_sentence(\"This is a test\"))\nprint(words_in_sentence(\"lets go for swimming\"))",
        "grade-23": {
            "execution": 0
        },
        "56": "def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n\n    res = []\n    for word in sentence.split():\n        if is_prime(len(word)):\n            res.append(word)\n    return ' '.join(res)",
        "grade-56": {
            "execution": 1
        },
        "61": "return ' '.join(w for w in sentence.split() if is_prime(len(w)))",
        "grade-61": {
            "execution": 0
        },
        "154": "words = sentence.split()\n    for word in words:\n        if is_prime(len(word)):\n            print(word, end=' ')",
        "grade-154": {
            "execution": 0
        },
        "194": "# from itertools import compress\n    words = sentence.split()\n    return \" \".join(\n        # list(compress(words, (1 for _ in words if is_prime(len(_)))))\n        [_ for _ in words if is_prime(len(_))]\n    )",
        "grade-194": {
            "execution": 0
        },
        "174": "return_value = \"\"\n    for word in sentence.split(\" \"):\n        if check_prime(len(word)):\n            return_value += word + \" \"\n    return return_value.strip()",
        "grade-174": {
            "execution": 0
        },
        "51": "return ' '.join(i for i in sentence.split() if is_prime(len(i)))",
        "grade-51": {
            "execution": 0
        }
    },
    {
        "intent": "from typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n",
        "snippet": [
            "    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n"
        ],
        "simplified": "You are given a list of numbers. You need to return the sum of squared numbers in the given list, round each element in the list to the upper int(Ceiling) first.",
        "task_id": "133",
        "189": "return sum([elem**2 for elem in lst])",
        "grade-189": {
            "execution": 0
        },
        "28": "# Your code here\n    return sum([int(ceil(i**2)) for i in lst])",
        "grade-28": {
            "execution": 0
        },
        "6": "lst = [int(round(i)) for i in lst]\n    return int(sum([i ** 2 for i in lst]))",
        "grade-6": {
            "execution": 0
        },
        "78": "return sum([int(math.ceil(x)) ** 2 for x in lst])",
        "grade-78": {
            "execution": 0
        },
        "67": "rounded_lst = [math.ceil(element) for element in lst]\n    sum_of_squares = sum([element ** 2 for element in rounded_lst])\n    return sum_of_squares",
        "grade-67": {
            "execution": 0
        },
        "62": "lst = list(map(lambda x: round(x), lst))\n    return sum(map(lambda x: x ** 2, lst))\n    # return sum([x**2 for x in lst])",
        "grade-62": {
            "execution": 0
        },
        "36": "# Type your code here\n    lst1 = [int(math.ceil(i)) for i in lst]\n    return(sum([i**2 for i in lst1]))",
        "grade-36": {
            "execution": 0
        },
        "26": "# TODO: \u043a\u043e\u0433\u0434\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 \u0431\u0443\u0434\u0435\u0442 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0430 - \u0443\u0434\u0430\u043b\u0438\u0442\u0435 pass\n\n    pass",
        "grade-26": {
            "execution": 0
        },
        "161": "#\n    # x = [int(i) for i in lst]\n    # y = [i**2 for i in x]\n    # return sum(y)\n    return sum([int(i)**2 for i in lst])\n\nprint(sum_squares([1,2,3]))\nprint(sum_squares([1,4,9]))\nprint(sum_squares([1,3,5,7]))\nprint(sum_squares([1.4,4.2,0]))\nprint(sum_squares([-2.4,1,1]))",
        "grade-161": {
            "execution": 0
        },
        "22": "return sum([x**2 for x in [int(math.ceil(x)) for x in lst]])\n\nprint(sum_squares([1,2,3]))\nprint(sum_squares([1,4,9]))\nprint(sum_squares([1,3,5,7]))\nprint(sum_squares([1.4,4.2,0]))\nprint(sum_squares([-2.4,1,1]))",
        "grade-22": {
            "execution": 0
        },
        "176": "return sum([int(i**2) for i in lst])\n    #return sum([i**2 for i in [math.ceil(num) for num in lst]])",
        "grade-176": {
            "execution": 0
        },
        "123": "# Your Code Goes Here\n    return sum([x**2 for x in [ceil(n) for n in lst]])",
        "grade-123": {
            "execution": 0
        },
        "8": "sum=0\n    for item in lst:\n        item=math.ceil(item)\n        sum+=item**2\n    return sum",
        "grade-8": {
            "execution": 0
        },
        "7": "# Your code here\n    a = [round(x) for x in lst]\n    return sum([x**2 for x in a])",
        "grade-7": {
            "execution": 0
        },
        "23": "# your code here\n    return None",
        "grade-23": {
            "execution": 0
        },
        "59": "return sum([int(math.ceil(num))**2 for num in lst])",
        "grade-59": {
            "execution": 0
        },
        "64": "# \u0442\u0440\u0435\u0431\u0430 \u0432\u0435\u0440\u043d\u0443\u0442\u0438 \u0441\u0443\u043c\u0443 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0456\u0432 \u0447\u0438\u0441\u0435\u043b \u0443 \u0434\u0430\u043d\u043e\u043c\u0443 \u0441\u043f\u0438\u0441\u043a\u0443,\n    # \u0430\u043b\u0435 \u043d\u0430\u043f\u0435\u0440\u0435\u0434 \u043e\u043a\u0440\u0443\u0433\u043b\u0438\u0442\u0438 \u043a\u043e\u0436\u043d\u0438\u0439 \u0435\u043b\u0435\u043c\u0435\u043d\u0442 \u0443 \u0441\u043f\u0438\u0441\u043a\u0443 \u0434\u043e \u0432\u0435\u0440\u0445\u043d\u044c\u043e\u0433\u043e int(Ceiling)\n\n    sum = 0\n    for item in lst:\n        sum += int(math.ceil(item))**2\n    return sum",
        "grade-64": {
            "execution": 0
        },
        "148": "return sum([i**2 for i in lst])",
        "grade-148": {
            "execution": 0
        },
        "179": "return sum([int(num*num) for num in lst])",
        "grade-179": {
            "execution": 0
        },
        "167": "# Your code here:\n    pass\n    lst_new = [int(math.ceil(x**2)) for x in lst]\n    return sum(lst_new)",
        "grade-167": {
            "execution": 0
        }
    },
    {
        "intent": "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n",
        "snippet": [
            "    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n"
        ],
        "simplified": "Given a non-empty list of integers lst. add the even elements that are at odd indices..",
        "task_id": "85",
        "36": "return sum([i for i in lst[1::2] if i % 2 == 0])",
        "grade-36": {
            "execution": 1
        },
        "7": "res = []\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            res.append(lst[i])\n    return sum(res)",
        "grade-7": {
            "execution": 1
        },
        "92": "return sum([i for i in lst[1::2] if i % 2 == 0])\n\n\"\"\"\nCreate a function that will take in a string, and then return the string without vowels\n\"\"\"",
        "grade-92": {
            "execution": 1
        },
        "79": "res = 0\n    for index, value in enumerate(lst):\n        if index % 2 == 1 and value % 2 == 0:\n            res += value\n    return res",
        "grade-79": {
            "execution": 1
        },
        "74": "return sum([x for i, x in enumerate(lst) if i % 2 != 0 and x % 2 == 0])",
        "grade-74": {
            "execution": 1
        },
        "44": "if len(lst) == 0:\n        return None\n    else:\n        summ = 0\n        for num in lst:\n            if num % 2 == 0 and lst.index(num) % 2 != 0:\n                summ += num\n        return summ",
        "grade-44": {
            "execution": 0
        },
        "33": "return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\nprint(add([4, 2, 6, 7]))\nprint(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
        "grade-33": {
            "execution": 1
        },
        "29": "# Write your code here\n    \n    return sum([lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2 == 0])",
        "grade-29": {
            "execution": 1
        },
        "152": "return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n\nprint(add([4, 2, 6, 7]))",
        "grade-152": {
            "execution": 1
        },
        "10": "total = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            total += lst[i]\n    return total\n\nprint(add([4, 2, 6, 7]))",
        "grade-10": {
            "execution": 1
        },
        "9": "evens_odd_indices = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            evens_odd_indices += lst[i]\n    return evens_odd_indices",
        "grade-9": {
            "execution": 1
        },
        "30": "lst = [x for i, x in enumerate(lst) if i % 2 != 0 and x % 2 == 0]\n    print(lst)\n    return sum(lst)",
        "grade-30": {
            "execution": 1
        },
        "72": "return sum([el for i, el in enumerate(lst) if i % 2 == 1 and el % 2 == 0])",
        "grade-72": {
            "execution": 1
        },
        "76": "num = [lst[i] for i in range(len(lst)) if lst[i] % 2 == 0 and i % 2 != 0]\n    return sum(num)",
        "grade-76": {
            "execution": 1
        },
        "190": "# Your code goes here\n    return sum([i for i in lst[1::2] if i % 2 == 0])\nprint(add([4, 2, 6, 7]))",
        "grade-190": {
            "execution": 1
        },
        "65": "return sum([lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2 == 0])",
        "grade-65": {
            "execution": 1
        },
        "151": "return sum([x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 0])",
        "grade-151": {
            "execution": 1
        },
        "73": "return sum([item for idx, item in enumerate(lst) if idx % 2 != 0 and item % 2 == 0])",
        "grade-73": {
            "execution": 1
        },
        "166": "even = 0\n    for i in range(len(lst)):\n        if i % 2 != 0 and lst[i] % 2 == 0:\n            even += lst[i]\n    return even",
        "grade-166": {
            "execution": 1
        },
        "93": "return sum([lst[i] for i in range(len(lst)) if i % 2 == 1 and lst[i] % 2 == 0])",
        "grade-93": {
            "execution": 1
        }
    },
    {
        "intent": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n",
        "snippet": [
            "    return sum(range(n + 1))\n"
        ],
        "simplified": "sum_to_n is a function that sums numbers from 1 to n.",
        "task_id": "60",
        "176": "return ((n + 1) * n) // 2",
        "grade-176": {
            "execution": 1
        },
        "15": "return sum(range(1, n + 1))",
        "grade-15": {
            "execution": 1
        },
        "3": "total, k = 0, 1\n    while k <= n:\n        total, k = total + k, k + 1\n    return total",
        "grade-3": {
            "execution": 1
        },
        "47": "total = 0\n    k = 1\n    while k <= n:\n        total, k = total + k, k + 1\n    return total",
        "grade-47": {
            "execution": 1
        },
        "40": "total = 0\n    for i in range(1, n + 1):\n        total += i\n    return total",
        "grade-40": {
            "execution": 1
        },
        "36": "if n <= 0:\n        return 0\n    else:\n        return n + sum_to_n(n - 1)",
        "grade-36": {
            "execution": 1
        },
        "19": "total = 0\n    k = 1\n    while k <= n:\n        total, k = total + k, k + 1\n    return total",
        "grade-19": {
            "execution": 1
        },
        "14": "if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n-1)",
        "grade-14": {
            "execution": 1
        },
        "190": "number = 1\n    sum_of_numbers = 0\n    while number <= n:\n        sum_of_numbers += number\n        number += 1\n    return sum_of_numbers",
        "grade-190": {
            "execution": 1
        },
        "154": "return ((n * (n + 1)) / 2)",
        "grade-154": {
            "execution": 1
        },
        "11": "return (n * (n + 1)) // 2\n\nprint(sum_to_n(30))\nprint(sum_to_n(100))\nprint(sum_to_n(5))\nprint(sum_to_n(10))\nprint(sum_to_n(1))",
        "grade-11": {
            "execution": 1
        },
        "167": "sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n\nprint(sum_to_n(100))",
        "grade-167": {
            "execution": 1
        },
        "91": "for i in range(1,n+1):\n        total = total + i\n    return total\n\nprint(sum_to_n(100))\nprint(sum_to_n(1000))\nprint(sum_to_n(30))",
        "grade-91": {
            "execution": 0
        },
        "4": "k, total = 1, 0\n    while k <= n:\n        total, k = total + k, k + 1\n    return total",
        "grade-4": {
            "execution": 1
        },
        "34": "if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n - 1)",
        "grade-34": {
            "execution": 1
        },
        "37": "if n >= 1:\n        return n + sum_to_n(n - 1)\n    return 0",
        "grade-37": {
            "execution": 1
        },
        "134": "# the sum variable will hold our result.\n    sum = 0\n    # the counter variable will count from 1 to n.\n    counter = 1\n    # in this while loop, we keep adding 'counter' to sum until counter reaches n\n    while counter <= n:\n        sum += counter\n        counter += 1\n    return sum",
        "grade-134": {
            "execution": 1
        },
        "171": "return n * (n + 1) // 2\n\n@update_wrapper(sum_to_n)",
        "grade-171": {
            "execution": 0
        },
        "156": "num = 0\n    for i in range(1, n+1):\n        num += i\n    return num",
        "grade-156": {
            "execution": 1
        },
        "32": "sum_int = 0\n    for i in range(1, n+1):\n        sum_int += i\n    return sum_int",
        "grade-32": {
            "execution": 1
        }
    },
    {
        "intent": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n",
        "snippet": [
            "    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n"
        ],
        "simplified": "For a given number n, find the largest number that divides n evenly, smaller than n",
        "task_id": "24",
        "34": "count = n - 1\n    while n % count != 0:\n        count -= 1\n    return count",
        "grade-34": {
            "execution": 1
        },
        "6": "largest_divisor = n - 1\n    while n % largest_divisor != 0:\n        largest_divisor -= 1\n    return largest_divisor",
        "grade-6": {
            "execution": 1
        },
        "95": "d = 2\n    while n % d != 0:\n        d += 1\n    return d",
        "grade-95": {
            "execution": 0
        },
        "85": "# The only possible factors are in range [2, n // 2]\n    for i in range(n // 2, 1, -1):\n        if n % i == 0:\n            return i\n    return 1",
        "grade-85": {
            "execution": 1
        },
        "77": "if n % 2 == 0:\n        return 2\n    elif n % 3 == 0:\n        return 3\n    elif n % 5 == 0:\n        return 5\n    else:\n        return -1",
        "grade-77": {
            "execution": 0
        },
        "42": "divisor = n - 1\n    while divisor > 0:\n        if n % divisor == 0:\n            return divisor\n        divisor -= 1\n\nlargest_divisor(15)",
        "grade-42": {
            "execution": 1
        },
        "31": "import numpy as np\n    n = abs(n)\n    for i in np.arange(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return None",
        "grade-31": {
            "execution": 0
        },
        "26": "# if n % 2 == 0:\n    #     return 2\n    # if n % 3 == 0:\n    #     return 3\n    # if n % 5 == 0:\n    #     return 5\n    # if n % 7 == 0:\n    #     return 7\n    # return 1\n    return max(i for i in range(1, n // 2 + 1) if n % i == 0)",
        "grade-26": {
            "execution": 1
        },
        "152": "for i in range(n, 0, -1):\n        if n % i == 0:\n            return i\n\nprint(largest_divisor(15))",
        "grade-152": {
            "execution": 0
        },
        "8": "count = n - 1\n    while count > 0:\n        if n % count == 0:\n            return count\n        count -= 1\n    return count",
        "grade-8": {
            "execution": 1
        },
        "7": "pass",
        "grade-7": {
            "execution": 0
        },
        "28": "divisor = n - 1\n    while n % divisor != 0:\n        divisor -= 1\n    return divisor\n\n\nprint(largest_divisor(15))",
        "grade-28": {
            "execution": 1
        },
        "75": "return max(x for x in range(n - 1, 0, -1) if n % x == 0)",
        "grade-75": {
            "execution": 1
        },
        "81": "for i in range(n-1,0,-1):\n        if n % i == 0:\n            return i",
        "grade-81": {
            "execution": 1
        },
        "189": "for d in range(n-1, 1, -1):\n        if n % d == 0:\n            return d\n    return 1",
        "grade-189": {
            "execution": 1
        },
        "67": "# TODO\n    return n // 2",
        "grade-67": {
            "execution": 0
        },
        "151": "i = 2\n    largest = 1\n    while i < n:\n        if n % i == 0:\n            largest = i\n        i += 1\n    return largest",
        "grade-151": {
            "execution": 1
        },
        "76": "largest = n - 1\n    while n % largest != 0:\n        largest -= 1\n    return largest",
        "grade-76": {
            "execution": 1
        },
        "163": "# Call the divisors function\n    divisors_array = divisors(n)\n    # Find the max of the array\n    return max(divisors_array)",
        "grade-163": {
            "execution": 0
        },
        "96": "# We will continue to decrement i until we find a divisor\n    i = n - 1\n    while i > 0:\n        if n % i == 0:\n            return i\n        i -= 1\n    return None",
        "grade-96": {
            "execution": 1
        }
    },
    {
        "intent": "def triangle_area(a: int, h: int) -> float:\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n",
        "snippet": [
            "    return a * h / 2.0\n"
        ],
        "simplified": "Given length of a side and high return area for a triangle.",
        "task_id": "45",
        "199": "return (a * h) / 2\n\n\nprint(triangle_area(5, 2))\nprint(triangle_area(1, 1))",
        "grade-199": {
            "execution": 1
        },
        "13": "return 1/2 * a * h",
        "grade-13": {
            "execution": 1
        },
        "2": "return (a * h) / 2.0",
        "grade-2": {
            "execution": 1
        },
        "30": "return (a * h) / 2\n\nprint(triangle_area(5, 3))",
        "grade-30": {
            "execution": 1
        },
        "28": "return a * h / 2\n\ntriangle_area(5, 3)",
        "grade-28": {
            "execution": 1
        },
        "27": "return a * h / 2\nprint(triangle_area(5, 3))",
        "grade-27": {
            "execution": 1
        },
        "18": "area = a * h / 2\n    return area\n\n\nprint(triangle_area(5, 3))",
        "grade-18": {
            "execution": 1
        },
        "7": "area = 0.5 * a * h\n    return area\n\n\nprint(triangle_area(5, 3))",
        "grade-7": {
            "execution": 1
        },
        "6": "# \u0412 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0435 \u043d\u0435 \u043e\u0447\u0435\u043d\u044c \u043f\u043e\u043d\u044f\u0442\u043d\u043e \u0434\u043b\u044f \u0447\u0435\u0433\u043e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 h, \u0435\u0441\u043b\u0438 \u0443\u0436\u0435 \u0435\u0441\u0442\u044c a\n    return a * h / 2",
        "grade-6": {
            "execution": 1
        },
        "93": "return (1/2)*(a*h)",
        "grade-93": {
            "execution": 1
        },
        "172": "return (a * h) / 2\n\nprint(triangle_area(5, 3))",
        "grade-172": {
            "execution": 1
        },
        "0": "return (a * h) / 2",
        "grade-0": {
            "execution": 1
        },
        "3": "return a * h / 2",
        "grade-3": {
            "execution": 1
        },
        "149": "return a * h / 2\n\nprint(triangle_area(a=3, h=4))\nprint(triangle_area(h=4, a=3))\nprint(triangle_area(3, 4))",
        "grade-149": {
            "execution": 1
        },
        "194": "return 0.5 * a * h",
        "grade-194": {
            "execution": 1
        },
        "29": "return (a * h) / 2",
        "grade-29": {
            "execution": 1
        },
        "49": "return float(a * h) / 2\n\ntriangle_area(5, 3)",
        "grade-49": {
            "execution": 1
        },
        "104": "area = (a * h) / 2\n    return area",
        "grade-104": {
            "execution": 1
        },
        "160": "return a * h / 2\n\n\nprint(triangle_area(5, 3))",
        "grade-160": {
            "execution": 1
        },
        "137": "return a * h / 2\n\n\nprint(triangle_area(5, 3))",
        "grade-137": {
            "execution": 1
        }
    },
    {
        "intent": "from typing import List\n\ndef get_odd_collatz(n: int) -> List[int]:\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n",
        "snippet": [
            "    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n"
        ],
        "simplified": "Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence. The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined as follows: start with any positive integer n. Then each term is obtained from the previous term as follows: if the previous term is even, the next term is one half of the previous term. If the previous term is odd, the next term is 3 times the previous term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1. Note: 1. Collatz(1) is [1]. 2. returned list sorted in increasing order.",
        "task_id": "123",
        "35": "def collatz(n: int) -> int:\n        if n == 1:\n            return n\n        elif n % 2 == 0:\n            return n // 2\n        else:\n            return 3 * n + 1\n\n    sequence = [n]\n    for i in range(n):\n        n = collatz(n)\n        sequence.append(n)\n    return sorted(list(set(sequence)))\n\nprint(get_odd_collatz(5))",
        "grade-35": {
            "execution": 0
        },
        "8": "# if n == 1:\n    #     return [1]\n    # if n % 2 == 0:\n    #     return get_odd_collatz(n // 2)\n    # else:\n    #     return get_odd_collatz(3 * n + 1) + [n]\n    # return sorted(get_odd_collatz(n))\n\n    # \n    # if n == 1:\n    #     return [1]\n    # if n % 2 == 0:\n    #     return get_odd_collatz(n // 2)\n    # else:\n    #     return [n] + get_odd_collatz(3 * n + 1)\n    # return sorted(get_odd_collatz(n))\n\n    # \n    if n == 1:\n        return [1]\n    return [n] + get_odd_collatz(n // 2) if n % 2 == 0 else [n] + get_odd_collatz(3 * n + 1)\n    return sorted(get_odd_collatz(n))",
        "grade-8": {
            "execution": 0
        },
        "84": "# TODO: Write your code here\n\n    return []",
        "grade-84": {
            "execution": 0
        },
        "74": "sequence = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3 * n + 1\n        sequence.append(n)\n    return sorted([i for i in sequence if i % 2 != 0])",
        "grade-74": {
            "execution": 1
        },
        "69": "assert n > 0, \"n must be greater than 0.\"\n    if n == 1:\n        return [1]\n    collatz = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    collatz.pop()\n    odd_collatz = [i for i in collatz if i % 2 != 0]\n    return sorted(odd_collatz)",
        "grade-69": {
            "execution": 0
        },
        "42": "if n == 1:\n        return [1]\n    else:\n        if n % 2 == 0:\n            return get_odd_collatz(n // 2)\n        else:\n            return get_odd_collatz(3 * n + 1) + [n]",
        "grade-42": {
            "execution": 0
        },
        "32": "if n == 1:\n        return [1]\n    if n < 1:\n        return None\n    res = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        res.append(n)\n    res = [x for x in res if x % 2 != 0]\n    return sorted(res)",
        "grade-32": {
            "execution": 1
        },
        "173": "if n <= 0:\n        return []\n    if n == 1:\n        return [1]\n    if n % 2 == 0:\n        return get_odd_collatz(n / 2)\n    else:\n        return sorted(set(get_odd_collatz(n * 3 + 1) + [n]))",
        "grade-173": {
            "execution": 1
        },
        "27": "# Make an empty list to store odd numbers from the collatz sequence.\n    odd_collatz_numbers = []\n\n    # Find the collatz sequence for n.\n    collatz_sequence = find_collatz_sequence(n)\n\n    # Loop through the collatz sequence, and check to see if each number is odd. If it is odd, add it to the list.\n    for n in collatz_sequence:\n        if n % 2 != 0:\n            odd_collatz_numbers.append(n)\n\n    # Sort the odd numbers in increasing order.\n    odd_collatz_numbers.sort()\n\n    return odd_collatz_numbers",
        "grade-27": {
            "execution": 0
        },
        "187": "# # SOLUTION 1\n    # # O(n * log(n)) time | O(n) space\n\n    # res = []\n    # while n > 1:\n    #     res.append(n)\n    #     if n % 2 == 0:\n    #         n = n // 2\n    #     else:\n    #         n = 3 * n + 1\n    # return sorted(res)\n\n    # SOLUTION 2\n    # O(n * log(n)) time | O(n) space\n\n    res = []\n    while n > 1:\n        if n % 2 == 1:\n            res.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    return sorted(res)",
        "grade-187": {
            "execution": 0
        },
        "134": "lst = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        lst.append(n)\n    return sorted([i for i in lst if i % 2 != 0])",
        "grade-134": {
            "execution": 1
        },
        "11": "result = []\n    current = n\n    result.append(current)\n    while current != 1:\n        if current % 2 == 0:\n            current = current // 2\n        else:\n            current = 3 * current + 1\n        if current % 2 != 0:\n            result.append(current)\n    return result\n\nprint(get_odd_collatz(5))",
        "grade-11": {
            "execution": 0
        },
        "9": "# Create your function here\n    seq = []\n    while n != 1:\n        seq.append(n)\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3 * n + 1\n    seq.append(1)\n    odd_seq = [i for i in seq if i % 2 == 1]\n    return odd_seq\n\n\nprint(get_odd_collatz(5))",
        "grade-9": {
            "execution": 0
        },
        "28": "# 1st solution:\n    if n == 1:\n        return [1]\n    ans = []\n    while n > 1:\n        if n % 2 == 1:\n            ans.append(n)\n        n = n//2 if n % 2 == 0 else n*3 + 1\n    ans.append(1)\n    return ans\n    \n    # 2nd solution:\n    # ans = []\n    # for i in range(n, 0, -1):\n    #     if n % 2 == 1:\n    #         ans.append(n)\n    #     n = n//2 if n % 2 == 0 else n*3 + 1\n    # return ans\n    \n    # 3rd solution:\n    # ans = []\n    # i = n\n    # while i > 1:\n    #     if i % 2 == 1:\n    #         ans.append(i)\n    #     i = i//2 if i % 2 == 0 else i*3 + 1\n    # return ans\n    \n    # 4th solution:\n    # ans = []\n    # i = n\n    # while i > 1:\n    #     if i % 2 == 1:\n    #         ans.append(i)\n    #     i = i//2 if i % 2 == 0 else i*3 + 1\n    # return ans\n    \n    # 5th solution:\n    # ans = []\n    # while n > 1:\n    #     if n % 2 == 1:\n    #         ans.append(n)\n    #     n = n//2 if n % 2 == 0 else n*3 + 1\n    # return ans\n    \n    # 6th solution:\n    # ans = []\n    # if n % 2 == 1:\n    #     ans.append(n)\n    # return ans + get_odd_collatz(n//2 if n % 2 == 0 else n*3 + 1)",
        "grade-28": {
            "execution": 0
        },
        "66": "if n < 1:\n        return []\n    result = [n]\n    def collatz(n: int):\n        if n == 1:\n            return\n        elif n % 2 == 0:\n            if n // 2 != 1:\n                result.append(n // 2)\n            collatz(n // 2)\n        else:\n            result.append(3 * n + 1)\n            collatz(3 * n + 1)\n    collatz(n)\n    return sorted(result)",
        "grade-66": {
            "execution": 0
        },
        "71": "if n < 1:\n        return []\n    result = [n]\n    while n != 1:\n        if n%2 == 0:\n            n //= 2\n        else:\n            n = 3*n + 1\n        if n%2 == 1:\n            result.append(n)\n    return sorted(result)",
        "grade-71": {
            "execution": 0
        },
        "160": "if n <= 0:\n        return []\n    else:\n        res = []\n        while n != 1:\n            if n % 2 == 1:\n                res.append(n)\n            n = 3 * n + 1 if n % 2 == 1 else n // 2\n        res.append(1)\n        return sorted(res)",
        "grade-160": {
            "execution": 1
        },
        "190": "if n <= 0:\n        return []\n    if n == 1:\n        return [1]\n    result = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3 * n + 1\n        if n % 2 != 0:\n            result.append(n)\n    return sorted(result)\n\nprint(get_odd_collatz(5))\nprint(get_odd_collatz(6))\nprint(get_odd_collatz(7))\nprint(get_odd_collatz(8))\nprint(get_odd_collatz(9))\nprint(get_odd_collatz(10))\nprint(get_odd_collatz(11))\nprint(get_odd_collatz(12))\nprint(get_odd_collatz(13))\nprint(get_odd_collatz(14))\nprint(get_odd_collatz(15))\nprint(get_odd_collatz(16))\nprint(get_odd_collatz(17))\nprint(get_odd_collatz(18))\nprint(get_odd_collatz(19))\nprint(get_odd_collatz(20))\nprint(get_odd_collatz(50))\nprint(get_odd_collatz(70))\nprint(get_odd_collatz(90))\nprint(get_odd_collatz(110))\nprint(get_odd_collatz(130))\nprint(get_odd_collatz(150))\nprint(get_odd_collatz(170))\nprint(get_odd_collatz(190))\nprint(get_odd_collatz(210))\nprint(get_odd_collatz(230))\nprint(get_odd_collatz(250))\nprint(get_odd_collatz(1000))\nprint(get_odd_collatz(1000000))",
        "grade-190": {
            "execution": 0
        },
        "177": "assert n > 0, \"please give a positive integer as input\"\n    curr = n\n    res = []\n    while curr != 1:\n        if curr % 2 == 1:\n            res.append(curr)\n        curr = curr // 2 if curr % 2 == 0 else 3 * curr + 1\n    res.append(1)\n    return res",
        "grade-177": {
            "execution": 0
        },
        "61": "collatz = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = n * 3 + 1\n        collatz.append(n)\n    return sorted([i for i in collatz if i % 2 == 1])",
        "grade-61": {
            "execution": 1
        }
    },
    {
        "intent": "from typing import List\n\ndef match_parens(lst: List[str]) -> str:\n    \"\"\"\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    \"\"\"\n",
        "snippet": [
            "    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n"
        ],
        "simplified": "You are given a list of two strings, both strings consist of open parentheses '(' or close parentheses ')' only. Your job is to check if it is possible to concatenate the two strings in some order, that the resulting string will be good. A string S is considered to be good if and only if all parentheses in S are balanced. For example: the string '(())()' is good, while the string '())' is not. Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.",
        "task_id": "119",
        "180": "s1, s2 = lst\n    if len(s1) > len(s2):\n        s1, s2 = s2, s1\n    return 'Yes' if (len(s1) - s1.count(')')) + s2.count('(') == len(s2) else 'No'",
        "grade-180": {
            "execution": 0
        },
        "30": "parens = ''.join(lst)\n    count = 0\n    for paren in parens:\n        if paren == '(':\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return 'No'\n    return 'Yes' if count == 0 else 'No'",
        "grade-30": {
            "execution": 0
        },
        "7": "str1, str2 = lst[0], lst[1]\n    if is_good(str1) and is_good(str2):\n        return 'Yes'\n    if not is_good(str1) and not is_good(str2):\n        return 'No'\n    if str1 == ')' and str2 == ')':\n        return 'No'\n    if str1 == ')' and str2 == '(':\n        return 'Yes'\n    if str1 == '(' and str2 == ')':\n        return 'Yes'\n    if str1 == '(' and str2 == '(':\n        return 'Yes'",
        "grade-7": {
            "execution": 0
        },
        "78": "return 'Yes' if all(\n        any(s == '(' and r == ')' for r in rst)\n        for s in lst[0] for rst in [lst[1]] * len(lst[0])\n    ) else 'No'",
        "grade-78": {
            "execution": 0
        },
        "68": "stack = []\n    for s in lst:\n        for p in s:\n            if p == '(':\n                stack.append(p)\n            else:\n                if not stack:\n                    return 'No'\n                stack.pop()\n    return 'Yes' if not stack else 'No'",
        "grade-68": {
            "execution": 0
        },
        "63": "return 'Yes' if any([\n        '()' * (len(lst[0]) + len(lst[1])) == lst[0] + lst[1],\n        '()' * (len(lst[0]) + len(lst[1])) == lst[1] + lst[0]\n    ]) else 'No'",
        "grade-63": {
            "execution": 0
        },
        "38": "for i in range(1, 4):\n        if i == 1:\n            s = ''.join(lst)\n        elif i == 2:\n            s = ''.join(lst[::-1])\n        else:\n            s = ''.join(lst[::-1])[::-1]\n        if balanced(s):\n            return 'Yes'\n    return 'No'",
        "grade-38": {
            "execution": 0
        },
        "28": "res = lst[0] + lst[1]\n    while res.find('()') != -1:\n        res = res.replace('()', '')\n    return 'Yes' if res == '' else 'No'",
        "grade-28": {
            "execution": 0
        },
        "190": "s = ''.join(lst)\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        else:\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes'\n\nassert match_parens(['()(', ')']) == 'Yes'\nassert match_parens([')', ')']) == 'No'",
        "grade-190": {
            "execution": 0
        },
        "154": "# The first string must end with '(' and the second string must start with ')'\n    # Check by popping the first character off the first string.\n    if not lst[0] or not lst[1]:\n        return 'No'\n    elif lst[0][0] == '(' and lst[1][0] == ')':\n        return 'Yes'\n    else:\n        return 'No'",
        "grade-154": {
            "execution": 0
        },
        "24": "stack = []\n    string = lst[0] + lst[1]\n    for char in string:\n        if char == '(':\n            stack.append(char)\n        else:\n            if len(stack) == 0:\n                return 'No'\n            stack.pop()\n    if len(stack) == 0:\n        return 'Yes'\n    return 'No'",
        "grade-24": {
            "execution": 0
        },
        "166": "s = lst[0] + lst[1]\n    while '()' in s:\n        s = s.replace('()', '')\n    return 'Yes' if not s else 'No'",
        "grade-166": {
            "execution": 0
        },
        "121": "def count_parens(s: str) -> int:\n        count = 0\n        for c in s:\n            if c == '(':\n                count += 1\n            else:\n                count -= 1\n            if count < 0:\n                return count\n        return count\n\n    def try_concat(s1: str, s2: str) -> bool:\n        left = count_parens(s1)\n        right = count_parens(s2)\n        if left == 0 and right == 0:\n            return True\n        if left > 0 and right > 0:\n            return False\n        if left < 0 and right < 0:\n            return False\n        return left < 0 if right else True\n\n    return 'Yes' if try_concat(lst[0], lst[1]) else 'No'",
        "grade-121": {
            "execution": 0
        },
        "9": "pass",
        "grade-9": {
            "execution": 0
        },
        "8": "left = lst[0].count('(')\n    right = lst[1].count(')')\n    return 'Yes' if right == left else 'No'",
        "grade-8": {
            "execution": 0
        },
        "25": "s = ''.join(lst)\n    if s.count('(') != s.count(')'):\n        return 'No'\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        else:\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes'",
        "grade-25": {
            "execution": 0
        },
        "61": "res = 'Yes'\n    for i in lst:\n        for j in i:\n            if j == ')' and '(' not in i:\n                res = 'No'\n    return res",
        "grade-61": {
            "execution": 0
        },
        "65": "s = ''.join(lst)\n    parens = 0\n    for c in s:\n        if c == '(':\n            parens += 1\n        elif c == ')':\n            parens -= 1\n        if parens < 0:\n            return 'No'\n    return 'Yes' if parens == 0 else 'No'",
        "grade-65": {
            "execution": 0
        },
        "144": "s1, s2 = lst[0], lst[1]\n    return 'Yes' if balanced(s1+s2) else 'No'",
        "grade-144": {
            "execution": 0
        },
        "169": "open_parens = 0\n    for char in lst[0]:\n        if char == '(':\n            open_parens += 1\n        else:\n            open_parens -= 1\n    # t_open_parens = 0\n    # for char in lst[1]:\n    #     if char == '(':\n    #         t_open_parens += 1\n    #     else:\n    #         t_open_parens -= 1\n    # if open_parens < 0 or t_open_parens < 0:\n    #     return 'No'\n    for char in lst[1]:\n        if char == '(':\n            open_parens += 1\n        else:\n            open_parens -= 1\n        if open_parens < 0:\n            return 'No'\n    if open_parens == 0:\n        return 'Yes'\n    return 'No'",
        "grade-169": {
            "execution": 0
        }
    },
    {
        "intent": "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n",
        "snippet": [
            "    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n"
        ],
        "simplified": "pairs_sum_to_zero takes a list of integers as an input. it returns True if there are two distinct elements in the list that sum to zero, and False otherwise.",
        "task_id": "43",
        "195": "# if there are two distinct elements of the list that sum to zero,\n    # the sum of the negative numbers will equal the sum of the positive numbers.\n    # the sum of the negative numbers, the sum of the positive numbers, and\n    # the total sum will only be equal to 0 if there are two distinct elements of\n    # the list that sum to zero.\n    sum_pos = 0\n    sum_neg = 0\n    for i in l:\n        if i > 0:\n            sum_pos += i\n        elif i < 0:\n            sum_neg += i\n    if sum_pos == sum_neg:\n        return True\n    else:\n        return False",
        "grade-195": {
            "execution": 0
        },
        "34": "# We need to initialize an empty set\n    # A set is like a dictionary, but without the values.\n\n    # A dictionary is a collection of keys and values,\n    # where each key appears at most once.\n    # You can think of a set as a dictionary that doesn't have values.\n    seen = set()\n    for x in l:\n        # This is how we add an element to a set.\n        seen.add(x)\n        # We check if the complement of x is in the set\n        if -x in seen:\n            return True\n    return False",
        "grade-34": {
            "execution": 0
        },
        "7": "if len(l) < 2:\n        return False\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False",
        "grade-7": {
            "execution": 1
        },
        "84": "numbers = dict()\n    for n in l:\n        if n not in numbers:\n            numbers[n] = 1\n        else:\n            numbers[n] += 1\n    for n in l:\n        if -n in numbers:\n            if n == 0 and numbers[n] >= 2:\n                return True\n            elif n != 0:\n                return True\n    return False",
        "grade-84": {
            "execution": 1
        },
        "74": "for first_num in l:\n        for second_num in l:\n            if first_num + second_num == 0 and first_num != second_num:\n                return True\n    return False",
        "grade-74": {
            "execution": 1
        },
        "68": "negatives = []\n    positives = []\n    for i in l:\n        if i < 0:\n            negatives.append(i)\n        elif i > 0:\n            positives.append(i)\n    for i in negatives:\n        for j in positives:\n            if i + j == 0:\n                return True\n    return False",
        "grade-68": {
            "execution": 1
        },
        "43": "for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False",
        "grade-43": {
            "execution": 1
        },
        "32": "if len(l) <= 1:\n        return False\n    else:\n        for i in range(len(l)):\n            for j in range(i + 1, len(l)):\n                if l[i] + l[j] == 0:\n                    return True\n    return False\n\nprint(pairs_sum_to_zero([2, 4, -5, 3, 5, 7]))",
        "grade-32": {
            "execution": 1
        },
        "163": "# your code here\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False",
        "grade-163": {
            "execution": 1
        },
        "26": "#checks to see if the list is empty\n    if l == []:\n        return False\n    elif len(l) == 1:\n        return False\n    #takes every two numbers in the list and checks to see if they add up to zero\n    for x in range(len(l)):\n        for y in range(len(l)):\n            if l[x] + l[y] == 0:\n                return True\n    return False",
        "grade-26": {
            "execution": 0
        },
        "181": "def find_sum(l: List[int], val: int) -> bool:\n        \"\"\"\n        find_sum takes a list of integers and a specific value as inputs.\n        it returns True if it finds a pair that sums to the value, and False otherwise.\n        >>> find_sum([1, 3, 5, 0], 0)\n        False\n        >>> find_sum([1, 3, -2, 1], 0)\n        False\n        >>> find_sum([1, 2, 3, 7], 7)\n        False\n        >>> find_sum([2, 4, -5, 3, 5, 7], 0)\n        True\n        >>> find_sum([1], 7)\n        False\n        \"\"\"\n        # A helper function using the python set data structure to check for the\n        # complement and return True or False accordingly.\n        l_set = set(l)\n        for num in l:\n            if val - num in l_set:\n                return True\n        return False\n    # The main function that calls the helper function and returns True or False\n    # accordingly.\n    return find_sum(l, 0)",
        "grade-181": {
            "execution": 0
        },
        "127": "n = len(l)\n    if n <= 1:\n        return False\n    else:\n        m = l[0]\n        for i in range(1, n):\n            if -m in l[i:]:\n                return True\n            else:\n                m = l[i]\n        return False",
        "grade-127": {
            "execution": 1
        },
        "9": "# set to store the list of integers\n    _set = set(l)\n    for i in l:\n        if -i in _set:\n            if l.count(i) == 1 and l.count(-i) == 1:\n                return True\n    return False",
        "grade-9": {
            "execution": 0
        },
        "8": "distinct = []\n    for i in l:\n        if i not in distinct:\n            distinct.append(i)\n        else:\n            distinct.append(None)\n    if len(distinct) == 1:\n        return False\n    for j in distinct:\n        if distinct.count(j) == 1:\n            if distinct.count(-j) == 1:\n                return True\n            else:\n                continue\n        else:\n            continue\n    return False",
        "grade-8": {
            "execution": 0
        },
        "27": "# We only have to check the numbers before the zero, if it exists.\n    i = 0\n    # If the list is empty, return False\n    if len(l) == 0:\n        return False\n    # if there is no zero, we check if there are any pairs that sum to zero.\n    if 0 not in l:\n        for i in range(len(l)):\n            for j in range(i + 1, len(l)):\n                if l[i] + l[j] == 0:\n                    return True\n        return False\n    # if there is a zero, we check if there are any pairs that sum to zero with\n    # the zero.\n    else:\n        while l[i] != 0:\n            i += 1\n        for j in range(i):\n            if l[j] + l[i] == 0:\n                return True\n        return False",
        "grade-27": {
            "execution": 1
        },
        "66": "if len(l) == 0:\n        return False\n    if len(l) == 1:\n        return False\n    for i in range(len(l)):\n        for j in range(len(l)):\n            if i != j:\n                if l[i] + l[j] == 0:\n                    return True\n    return False",
        "grade-66": {
            "execution": 1
        },
        "70": "seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n\nprint(pairs_sum_to_zero([2, 4, -5, 3, 5, 7]))",
        "grade-70": {
            "execution": 1
        },
        "150": "if len(l) < 2:\n        return False\n    else:\n        for first_number in l:\n            for second_number in l:\n                if first_number != second_number and first_number + second_number == 0:\n                    return True\n    return False",
        "grade-150": {
            "execution": 1
        },
        "184": "if len(l) < 2:\n        return False\n    for x in l:\n        for y in l:\n            if x != y and x + y == 0:\n                return True\n    return False",
        "grade-184": {
            "execution": 1
        },
        "169": "# Your code goes here\n    l = sorted(l)\n    start = 0\n    end = len(l) - 1\n    while start < end:\n        if l[start] + l[end] == 0:\n            return True\n        elif l[start] + l[end] < 0:\n            start += 1\n        else:\n            end -= 1\n    return False",
        "grade-169": {
            "execution": 1
        }
    },
    {
        "intent": "def fruit_distribution(s: str, n: int) -> int:\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n",
        "snippet": [
            "    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n"
        ],
        "simplified": "In this task, you will be given a string that represents a number of apples and oranges that are distributed in a basket of fruit this basket contains apples, oranges, and mango fruits. Given the string that represents the total number of the oranges and apples and an integer that represent the total number of the fruits in the basket return the number of the mango fruits in the basket.",
        "task_id": "67",
        "173": "assert type(s) == str\n    assert type(n) == int\n    assert n >= 0\n    return n - string_to_number(s)",
        "grade-173": {
            "execution": 0
        },
        "30": "# your code here\n    s = s.replace(\" apples and \", \"-\")\n    s = s.replace(\" oranges\", \"\")\n    return n - int(s.split(\"-\")[0]) - int(s.split(\"-\")[1])\nprint(fruit_distribution(\"5 apples and 6 oranges\", 19))\nprint(fruit_distribution(\"0 apples and 1 oranges\",3))\nprint(fruit_distribution(\"2 apples and 3 oranges\", 100))\nprint(fruit_distribution(\"100 apples and 1 oranges\",120))",
        "grade-30": {
            "execution": 1
        },
        "6": "# Your code here\n    return None",
        "grade-6": {
            "execution": 0
        },
        "199": "# your code here\n    fruits_count = int(s.split(\" \")[0]) + int(s.split(\" \")[3])\n    return n - fruits_count\n\n\nprint(fruit_distribution(\"0 apples and 1 oranges\", 3))",
        "grade-199": {
            "execution": 1
        },
        "75": "# I would need some help on this one, I don't really understand the question\n    pass",
        "grade-75": {
            "execution": 0
        },
        "67": "# Function body starts here\n    if s == None or n == None:\n        return None\n    if type(s) != str or type(n) != int:\n        return None\n    if s.split()[0].isdigit() and s.split()[2].isdigit():\n        return n - int(s.split()[0]) - int(s.split()[2])\n    else:\n        return None",
        "grade-67": {
            "execution": 0
        },
        "62": "# your code here\n    pass",
        "grade-62": {
            "execution": 0
        },
        "38": "b = s.split(\" \")\n    return n - int(b[0]) - int(b[3])",
        "grade-38": {
            "execution": 1
        },
        "198": "num_apples = int(s.split()[0])\n    num_oranges = int(s.split()[3])\n    return n - num_apples - num_oranges",
        "grade-198": {
            "execution": 1
        },
        "28": "pass",
        "grade-28": {
            "execution": 0
        },
        "183": "return -(sum(map(int, s.split())) - n)",
        "grade-183": {
            "execution": 0
        },
        "149": "try:\n        return int(s.split()[-1]) - int(s.split()[0]) - int(s.split()[-3])\n    except:\n        return 'Please enter a valid input'",
        "grade-149": {
            "execution": 0
        },
        "24": "s = s.replace(\" \", \"\")\n    oranges = int(s[:s.find(\"apples\")])\n    apples = int(s[s.find(\"apples\") + 6:s.find(\"oranges\")])\n    return n - oranges - apples\n\nimport unittest",
        "grade-24": {
            "execution": 0
        },
        "161": "fruits_list = s.split(\" \")\n    apple_count = int(fruits_list[0])\n    orange_count = int(fruits_list[2])\n    return n - apple_count - orange_count",
        "grade-161": {
            "execution": 0
        },
        "114": "fruits = 0\n    dist = s.split(\" \")\n    total = n - int(dist[0]) - int(dist[2])\n    return total",
        "grade-114": {
            "execution": 0
        },
        "8": "total_fruits = int(s.split()[-1])\n    total_apples = int(s.split()[0])\n    total_oranges = int(s.split()[-2])\n    return n - total_fruits - total_apples - total_oranges",
        "grade-8": {
            "execution": 0
        },
        "7": "n_apples, n_oranges = s.split()[0], s.split()[-1]\n    return n - int(n_apples) - int(n_oranges)",
        "grade-7": {
            "execution": 0
        },
        "25": "apples, oranges = [int(i) for i in s.split() if i.isdigit()]\n    return n - apples - oranges\n \n\"\"\"\nWrite a function that uses recursion to find the nth term of the following series:\n    0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, ...\n\"\"\"",
        "grade-25": {
            "execution": 1
        },
        "59": "parts = s.split()\n    apples = int(parts[0])\n    oranges = int(parts[3])\n    return n - apples - oranges",
        "grade-59": {
            "execution": 1
        },
        "64": "if 'apples' not in s or 'oranges' not in s:\n        return n\n    else:\n        apples = int(s.split()[0])\n        oranges = int(s.split()[3])\n        return n - apples - oranges",
        "grade-64": {
            "execution": 1
        }
    },
    {
        "intent": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n",
        "snippet": [
            "    return ' '.join([str(x) for x in range(n + 1)])\n"
        ],
        "simplified": "Return a string containing space-delimited numbers starting from 0 upto n inclusive.",
        "task_id": "15",
        "149": "if n < 0:\n        raise ValueError(\"Invalid string sequence length\")\n    return ' '.join(map(str, range(n + 1)))",
        "grade-149": {
            "execution": 1
        },
        "27": "number_list = []\n    for i in range(n + 1):\n        number_list.append(str(i))\n    return ' '.join(number_list)",
        "grade-27": {
            "execution": 1
        },
        "3": "#return ' '.join(map(str, range(n + 1)))  # too simple\n    return ' '.join(map(str, lrange(n + 1)))  # just right",
        "grade-3": {
            "execution": 0
        },
        "191": "string_list = []\n    while n >= 0:\n        string_list.append(str(n))\n        n -= 1\n    return ' '.join(string_list)",
        "grade-191": {
            "execution": 0
        },
        "65": "return \" \".join(map(str, range(n + 1)))\n    # or:\n    # return \" \".join(str(i) for i in range(n + 1))",
        "grade-65": {
            "execution": 1
        },
        "53": "i = 0\n    result = []\n    while i <= n:\n        result.append(str(i))\n        i += 1\n    return ' '.join(result)",
        "grade-53": {
            "execution": 1
        },
        "47": "return \" \".join(str(i) for i in range(n + 1))",
        "grade-47": {
            "execution": 1
        },
        "31": "assert n >= 0\n    return \" \".join(map(str, range(n + 1)))",
        "grade-31": {
            "execution": 1
        },
        "24": "if n == 0:\n        return \"0\"\n    return string_sequence(n - 1) + \" \" + str(n)",
        "grade-24": {
            "execution": 1
        },
        "161": "# TODO: Complete the body of this function\n    seq = \"\"\n    for x in range(n+1):\n        seq += str(x) + \" \"\n    return seq",
        "grade-161": {
            "execution": 0
        },
        "127": "# TODO\n    # string_sequence(5)\n    # string_sequence(0)\n    if n < 0:\n        return ''\n    elif n == 0:\n        return str(n)\n    else:\n        return string_sequence(n - 1) + ' ' + str(n)",
        "grade-127": {
            "execution": 1
        },
        "15": "return ' '.join(str(i) for i in range(n + 1))\n    \n    \n    pass",
        "grade-15": {
            "execution": 1
        },
        "137": "string = ''\n    for i in range(n + 1):\n        string += str(i) + ' '\n    return string[:-1]",
        "grade-137": {
            "execution": 1
        },
        "103": "if n == 0:\n        return '0'\n    elif n == 1:\n        return '0 1'\n    else:\n        return string_sequence(n-1) + ' ' + str(n)",
        "grade-103": {
            "execution": 1
        },
        "4": "return ' '.join(str(num) for num in range(n + 1))",
        "grade-4": {
            "execution": 1
        },
        "46": "string_list = []\n    if n < 0:\n        return None\n    for i in range(n + 1):\n        string_list.append(str(i))\n    return ' '.join(string_list)",
        "grade-46": {
            "execution": 1
        },
        "48": "# if n < 0:\n    #     raise ValueError('n must be >= 0')\n    #\n    # numbers = []\n    # for i in range(n + 1):\n    #     numbers.append(str(i))\n    #\n    # return ' '.join(numbers)\n\n    return ' '.join(str(i) for i in range(n + 1))",
        "grade-48": {
            "execution": 1
        },
        "118": "if n == 0:\n        return \"0\"\n    return \" \".join(str(x) for x in range(n + 1))\n\n\nprint(string_sequence(0))\nprint(string_sequence(5))",
        "grade-118": {
            "execution": 1
        },
        "142": "s = \"\"\n    for i in range(n+1):\n        s += str(i) + \" \"\n    return s[:-1]",
        "grade-142": {
            "execution": 1
        },
        "129": "numbers = []\n    for num in range(n + 1):\n        numbers.append(str(num))\n    return ' '.join(numbers)",
        "grade-129": {
            "execution": 1
        }
    },
    {
        "intent": "def is_multiply_prime(a: int) -> bool:\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n",
        "snippet": [
            "    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n"
        ],
        "simplified": "Write a function that returns true if the given number is the multiplication of 3 prime numbers and false otherwise. Knowing that (a) is less then 100.",
        "task_id": "75",
        "32": "return (a%2 != 0) and (a%3 != 0) and (a%5 != 0)",
        "grade-32": {
            "execution": 0
        },
        "9": "# TODO: your code here\n    return True",
        "grade-9": {
            "execution": 0
        },
        "87": "return all(is_prime(a // i) for i in range(2, int(a ** 0.5) + 1) if a % i == 0)",
        "grade-87": {
            "execution": 0
        },
        "78": "print(\"\\nExercise 11:\")\n    primes = []\n    for n in range(1, a+1):\n        if is_prime(n):\n            primes.append(n)\n    \n    if len(primes) < 3:\n        return False\n    \n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    \n    return False",
        "grade-78": {
            "execution": 0
        },
        "68": "if a < 6:\n        return False\n    for p in range(2, a // 2 + 1):\n        if not is_prime(p):\n            continue\n        for q in range(p, a // 2 + 1):\n            if not is_prime(q):\n                continue\n            r = a // (p * q)\n            if is_prime(r) and p * q * r == a:\n                return True\n    return False",
        "grade-68": {
            "execution": 0
        },
        "40": "for i in range(2, a):\n        for j in range(2, a):\n            for k in range(2, a):\n                if i * j * k == a:\n                    return True\n    return False",
        "grade-40": {
            "execution": 0
        },
        "29": "#TODO\n    pass",
        "grade-29": {
            "execution": 0
        },
        "177": "n=0\n    for x in range(2,a+1):\n        if a%x==0:\n            if is_prime(x):\n                n+=1\n                a=a/x\n    if n==3:\n        return True\n    else:\n        return False\nis_multiply_prime(30)",
        "grade-177": {
            "execution": 0
        },
        "25": "if a > 100:\n        raise Exception('Write a function that returns true if the given number is the multiplication of 3 prime numbers'\n                        'and false otherwise. Knowing that (a) is less then 100.')\n    if a == 1:\n        return False\n    if a == 2:\n        return True\n    if is_prime(a):\n        return True\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            if is_multiply_prime(a // i):\n                return True\n    return False",
        "grade-25": {
            "execution": 0
        },
        "191": "for i in range(2, a // 2):\n        if a % i == 0:\n            if is_prime(i):\n                for j in range(2, a // 2):\n                    if a % j == 0:\n                        if is_prime(j):\n                            for k in range(2, a // 2):\n                                if a % k == 0:\n                                    if is_prime(k):\n                                        return True\n    return False\n\n\nassert is_multiply_prime(30) is True\nassert is_multiply_prime(9) is False",
        "grade-191": {
            "execution": 0
        },
        "135": "# for i in range(2,a+1):\n    #     if (a%i==0):\n    #         list_factors.append(i)\n    # print(list_factors)\n    # if len(list_factors)==3:\n    #     return True\n    # else:\n    #     return False\n    nums = []\n    while a != 1:\n        for i in range(2, a + 1):\n            if a % i == 0:\n                nums.append(i)\n                a /= i\n                break\n    print(nums)\n    if len(nums) == 3:\n        return True\n    else:\n        return False",
        "grade-135": {
            "execution": 0
        },
        "11": "res = False\n    for i in range(2, a):\n        for j in range(2, a):\n            for k in range(2, a):\n                if i * j * k == a:\n                    return True\n    return res\n        \nprint(is_multiply_prime(30))",
        "grade-11": {
            "execution": 0
        },
        "10": "pass",
        "grade-10": {
            "execution": 0
        },
        "26": "# your code here\n    n = a\n    i = 2\n    while(i <= n):\n        if(n % i == 0):\n            a = a/i\n            while(n % i == 0):\n                n = n/i\n        i = i + 1\n    return a == 1",
        "grade-26": {
            "execution": 0
        },
        "66": "# Your code goes here\n    pass",
        "grade-66": {
            "execution": 0
        },
        "72": "if a == 1:\n        return False\n    i = 2\n    while i <= a:\n        if a % i == 0:\n            if is_prime(i):\n                a = a // i\n                if a == 1:\n                    return True\n            else:\n                return False\n        i += 1\n    return False\n\nassert is_multiply_prime(1) == False\nassert is_multiply_prime(2) == False\nassert is_multiply_prime(3) == True\nassert is_multiply_prime(4) == False\nassert is_multiply_prime(5) == True\nassert is_multiply_prime(6) == True\nassert is_multiply_prime(7) == True\nassert is_multiply_prime(8) == False\nassert is_multiply_prime(9) == False\nassert is_multiply_prime(10) == True\nassert is_multiply_prime(12) == True\nassert is_multiply_prime(16) == False\nassert is_multiply_prime(25) == True\nassert is_multiply_prime(30) == True\nassert is_multiply_prime(50) == True\nassert is_multiply_prime(60) == True\nassert is_multiply_prime(70) == True\nassert is_multiply_prime(80) == False\nassert is_multiply_prime(81) == False\nassert is_multiply_prime(95) == False\nassert is_multiply_prime(98) == False",
        "grade-72": {
            "execution": 0
        },
        "165": "prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    prime_numbers_list = []\n    for i in prime_numbers:\n        if a % i == 0:\n            prime_numbers_list.append(i)\n    if len(prime_numbers_list) == 3:\n        return True\n    else:\n        return False",
        "grade-165": {
            "execution": 0
        },
        "194": "assert a < 100\n    for i in range(2, a + 1):\n        if a % i == 0:\n            for j in range(2, i + 1):\n                if i % j == 0:\n                    for k in range(2, j + 1):\n                        if j % k == 0:\n                            if a % (i * j * k) == 0:\n                                return True\n    return False",
        "grade-194": {
            "execution": 0
        },
        "181": "prime_list = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    if a == 0:\n        return False\n    prime_set = set(prime_list)\n    if a in prime_set:\n        return True\n    else:\n        for i in prime_list:\n            if a % i == 0:\n                a = a / i\n                if a in prime_set:\n                    return True\n        return False",
        "grade-181": {
            "execution": 0
        },
        "60": "# Your code goes here...\n    if a < 3:\n        return False\n    if a % 2 == 0:\n        return True\n    if a % 3 == 0:\n        return True\n    if a % 5 == 0:\n        return True\n    else:\n        return False",
        "grade-60": {
            "execution": 0
        }
    },
    {
        "intent": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n",
        "snippet": [
            "    return number % 1.0\n"
        ],
        "simplified": "Given a positive floating point number, it can be decomposed into and integer part (largest integer smaller than given number) and decimals (leftover part always smaller than 1). Return the decimal part of the number.",
        "task_id": "2",
        "35": "return float(str(number).split('.')[1])",
        "grade-35": {
            "execution": 0
        },
        "7": "return number - math.floor(number)",
        "grade-7": {
            "execution": 0
        },
        "129": "int_part = math.floor(number)\n    dec_part = number - int_part\n    return dec_part",
        "grade-129": {
            "execution": 0
        },
        "43": "if type(number) is not float:\n        raise ValueError('Expected floating point number')\n    return math.modf(number)[0]",
        "grade-43": {
            "execution": 0
        },
        "36": "integer, decimals = math.modf(number)\n    return decimals",
        "grade-36": {
            "execution": 0
        },
        "191": "# Hint: integer part is given by int(number)\n    return number - int(number)",
        "grade-191": {
            "execution": 1
        },
        "19": "# TODO: write function body",
        "grade-19": {
            "execution": 0
        },
        "181": "# do not touch this code\n    integer_part = int(number)\n    return number - integer_part",
        "grade-181": {
            "execution": 1
        },
        "13": "truncated_number = str(number).split('.')[1]\n    return float('0.' + truncated_number)",
        "grade-13": {
            "execution": 1
        },
        "117": "# TODO: Implement truncate_number function\n    # Hint: use // and % (modulo) operators\n    return number % int(number)",
        "grade-117": {
            "execution": 1
        },
        "172": "return abs(number - math.floor(number))",
        "grade-172": {
            "execution": 0
        },
        "90": "# TODO: complete\n    return 0",
        "grade-90": {
            "execution": 0
        },
        "11": "# TODO: implement the function\n    pass",
        "grade-11": {
            "execution": 0
        },
        "98": "return number - floor(number)",
        "grade-98": {
            "execution": 0
        },
        "80": "if not isinstance(number, float):\n        raise ValueError(\"Argument should be a floating point number\")\n    if number < 0:\n        raise ValueError(\"Argument should be a positive number\")\n    return number - int(number)",
        "grade-80": {
            "execution": 1
        },
        "3": "int_part = int(number)\n    return number - int_part",
        "grade-3": {
            "execution": 1
        },
        "1": "return number - math.floor(number)",
        "grade-1": {
            "execution": 0
        },
        "148": "intpart = floor(number)\n    return number - intpart",
        "grade-148": {
            "execution": 0
        },
        "34": "return float(\"{:.2f}\".format(number - math.floor(number)))",
        "grade-34": {
            "execution": 0
        },
        "177": "decimal_part = number - int(number)\n    return decimal_part",
        "grade-177": {
            "execution": 1
        }
    },
    {
        "intent": "def get_closest_vowel(word: str) -> str:\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n",
        "snippet": [
            "    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n"
        ],
        "simplified": "You are given a word. Your task is to find the closest vowel that stands between two consonants from the right side of the word (case sensitive). Vowels in the beginning and ending doesn't count. Return empty string if you didn't find any vowel met the above condition. You may assume that the given string contains English letter only.",
        "task_id": "118",
        "35": "index = 0\n    vowel = ''\n    last_vowel = ''\n    if len(word) == 1:\n        return \"\"\n    while index < len(word) - 1:\n        if index == 0:\n            if word[index] not in vowels and word[index + 1] in vowels:\n                last_vowel = word[index + 1]\n        elif word[index] in vowels and word[index - 1] not in vowels and word[index + 1] not in vowels:\n            vowel = word[index]\n            break\n        index += 1\n    if vowel:\n        return vowel\n    elif last_vowel:\n        return last_vowel\n    else:\n        return \"\"",
        "grade-35": {
            "execution": 0
        },
        "7": "vowels = ['a', 'e', 'i', 'o', 'u']\n    closest_vowel = ''\n    for idx, letter in enumerate(word):\n        if letter in vowels:\n            if (word[idx-1] not in vowels) and (word[idx+1] not in vowels):\n                closest_vowel = letter\n    return closest_vowel\n \nassert get_closest_vowel(\"yogurt\") == \"u\"\nassert get_closest_vowel(\"FULL\") == \"U\"\nassert get_closest_vowel(\"quick\") == \"\"\nassert get_closest_vowel(\"ab\") == \"\"",
        "grade-7": {
            "execution": 0
        },
        "86": "vowels = 'AEIOUaeiou'\n    for i in range(len(word) - 1, 0, -1):\n        cur_letter = word[i]\n        if cur_letter in vowels:\n            if word[i - 1] not in vowels:\n                return cur_letter\n        else:\n            if word[i - 1] in vowels:\n                return ''\n    return ''\nget_closest_vowel(\"yogurt\")",
        "grade-86": {
            "execution": 0
        },
        "76": "closest_vowel = ''\n    # your code here\n    return closest_vowel",
        "grade-76": {
            "execution": 0
        },
        "71": "n = len(word)\n    for i in range(n-1, 0, -1):\n        if word[i] in \"AEIOUaeiou\":\n            if word[i-1] not in \"AEIOUaeiou\":\n                return word[i]\n    return \"\"",
        "grade-71": {
            "execution": 0
        },
        "44": "VOWELS = 'aeiou'\n    CONSONANTS = 'bcdfghjklmnpqrstvwxyz'\n    # Your code goes here\n    conseq = []\n    for i in range(len(word)):\n        for j in range(i+1, len(word)):\n            if word[i] in CONSONANTS and word[j] in CONSONANTS:\n                conseq.append(word[i:j+1])\n    print(conseq)\n    for seq in conseq:\n        for char in seq:\n            if char in VOWELS:\n                return char\n    return ''\n\nget_closest_vowel(\"yogurt\")",
        "grade-44": {
            "execution": 0
        },
        "32": "for i in range(len(word)-1, 0, -1):\n        if word[i] in \"AEIOUaeiou\" and word[i-1] not in \"AEIOUaeiou\":\n            return word[i]\n    return \"\"",
        "grade-32": {
            "execution": 0
        },
        "188": "vowels = set(\"aeiouAEIOU\")\n    for idx, val in enumerate(word[::-1]):\n        if val in vowels:\n            if idx == 0 or idx == len(word) - 1:\n                continue\n            elif word[-idx-1] not in vowels and word[-idx-2] not in vowels:\n                return val\n    return \"\"",
        "grade-188": {
            "execution": 0
        },
        "27": "index = len(word) - 1\n    while index > 0:\n        if word[index].lower() in 'aeiou':\n            break\n        index -= 1\n    return word[index] if index > 0 else ''",
        "grade-27": {
            "execution": 0
        },
        "145": "from re import search\n    vowels = \"aeiou\"\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels:\n            return word[i]\n    return \"\"",
        "grade-145": {
            "execution": 0
        },
        "9": "vowels = 'aeiouAEIOU'\n    word = word[::-1]\n    for i in range(len(word)):\n        if word[i] in vowels:\n            if word[i + 1] not in vowels:\n                return word[i]\n    return ''",
        "grade-9": {
            "execution": 0
        },
        "8": "# your code here",
        "grade-8": {
            "execution": 0
        },
        "28": "vowels = set(\"aeiouAEIOU\")\n    for word in word.split()[::-1]:\n        prev_l, curr_l = \"\", \"\"\n        for c in word:\n            if c in vowels:\n                if prev_l not in vowels and curr_l not in vowels:\n                    return c\n            prev_l, curr_l = curr_l, c\n    return \"\"",
        "grade-28": {
            "execution": 0
        },
        "69": "for i in range(len(word) - 1, 0, -1):\n        if word[i] in VOWELS and word[i - 1] not in VOWELS:\n            return word[i]\n    return \"\"",
        "grade-69": {
            "execution": 0
        },
        "73": "raise NotImplementedError",
        "grade-73": {
            "execution": 0
        },
        "171": "raise NotImplementedError()",
        "grade-171": {
            "execution": 0
        },
        "193": "vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in vowels:\n            for j in range(i, -1, -1):\n                if word[j] not in vowels:\n                    return word[i]\n    return \"\"",
        "grade-193": {
            "execution": 0
        },
        "64": "# your code here\n    vowel = \"\"\n    for i in range(len(word)-1,0,-1):\n        if word[i] in \"aeiou\":\n            if word[i-1] not in \"aeiou\":\n                return word[i]\n            else:\n                vowel = word[i]\n    return vowel",
        "grade-64": {
            "execution": 0
        },
        "144": "vowels = 'aeiou'\n    closest_vowel = ''\n    distance = float('inf')\n    for i, ch in enumerate(word):\n        if ch in vowels:\n            if i > 0 and i < len(word) - 1:\n                if word[i - 1] not in vowels and word[i + 1] not in vowels:\n                    distance = min(distance, i)\n                    closest_vowel = ch\n    return closest_vowel",
        "grade-144": {
            "execution": 1
        },
        "70": "vowels = \"aeiou\"\n    pass",
        "grade-70": {
            "execution": 0
        }
    },
    {
        "intent": "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n",
        "snippet": [
            "    return \"db\" + bin(decimal)[2:] + \"db\"\n"
        ],
        "simplified": "You will be given a number in decimal form and your task is to convert it to binary format. The function should return a string, with each character representing a binary number. Each character in the string will be '0' or '1'. There will be an extra couple of characters 'db' at the beginning and at the end of the string. The extra characters are there to help with the format.",
        "task_id": "79",
        "163": "bin_str = 'db'\n    while decimal > 0:\n        bin_str += str(decimal % 2)\n        decimal //= 2\n    return bin_str[::-1] + 'db'",
        "grade-163": {
            "execution": 0
        },
        "29": "binar = 'db'\n    while decimal > 0:\n        if decimal % 2 == 0:\n            binar += '0'\n        else:\n            binar += '1'\n        decimal //= 2\n    return binar[::-1] + 'db'",
        "grade-29": {
            "execution": 0
        },
        "5": "# Your code goes here\n    return \"db\" + bin(decimal)[2:] + \"db\"",
        "grade-5": {
            "execution": 1
        },
        "188": "dec = decimal\n    while dec > 0:\n        binary = bin(dec)[2:]\n        return \"db\" + binary + \"db\"",
        "grade-188": {
            "execution": 0
        },
        "63": "if decimal == 0:\n        return \"db0db\"\n    result = \"\"\n    while decimal > 0:\n        result = str(decimal % 2) + result\n        decimal = decimal // 2\n    return \"db\" + result + \"db\"",
        "grade-63": {
            "execution": 1
        },
        "57": "# convert decimal number to binary and add header and footer\n    return 'db' + bin(decimal)[2:] + 'db'",
        "grade-57": {
            "execution": 1
        },
        "53": "bin_str = bin(decimal)\n    bin_str = bin_str[2:]\n    bin_str = \"db\" + bin_str + \"db\"\n    return bin_str",
        "grade-53": {
            "execution": 1
        },
        "32": "# raise NotImplementedError()\n    return \"db\" + bin(decimal)[2:] + \"db\"",
        "grade-32": {
            "execution": 1
        },
        "26": "pass",
        "grade-26": {
            "execution": 0
        },
        "173": "return f\"db{int(bin(decimal)[2:])}db\"",
        "grade-173": {
            "execution": 1
        },
        "132": "if decimal == 0:\n        return \"db0db\"\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\"",
        "grade-132": {
            "execution": 1
        },
        "16": "raise NotImplementedError",
        "grade-16": {
            "execution": 0
        },
        "142": "binary = bin(decimal)\n    return f\"db{binary[2:]}db\"",
        "grade-142": {
            "execution": 1
        },
        "97": "# TODO: Implement this!\n    bin_repr = bin(decimal)\n    return f\"db{bin_repr[2:]}db\"",
        "grade-97": {
            "execution": 1
        },
        "6": "# Convert int to binary string\n    binary = bin(decimal)\n    # Remove leading \"0b\" from binary string\n    binary = binary[2:]\n    # Add \"db\" to beginning and end of binary string\n    binary = \"db\" + binary + \"db\"\n    return binary",
        "grade-6": {
            "execution": 1
        },
        "50": "# place your code here\n    if decimal == 0:\n        return 'db0db'\n    elif decimal < 0:\n        return 'db' + '1' + bin(decimal)[3:] + 'db'\n    else:\n        return 'db' + bin(decimal)[2:] + 'db'\nprint(decimal_to_binary(15))\nprint(decimal_to_binary(32))\nprint(decimal_to_binary(0))\nprint(decimal_to_binary(-10))\nprint(decimal_to_binary(-1))",
        "grade-50": {
            "execution": 1
        },
        "55": "return \"db\" + \"\".join([str(i) for i in bin(decimal)[2:]]) + \"db\"",
        "grade-55": {
            "execution": 1
        },
        "118": "# Replace the body of this function with your code\n    return 'db{}db'.format(bin(decimal)[2:])",
        "grade-118": {
            "execution": 1
        },
        "148": "binary = \"\"\n    decimal = int(decimal)\n    if decimal == 0:\n        return \"db0db\"\n    while decimal != 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\"",
        "grade-148": {
            "execution": 1
        },
        "134": "binary = bin(decimal)[2:]\n    binary = binary.zfill(8)\n    return f\"db{binary}db\"",
        "grade-134": {
            "execution": 0
        }
    },
    {
        "intent": "from typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    \"\"\"\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    \"\"\"\n",
        "snippet": [
            "    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n"
        ],
        "simplified": "Given a list of numbers, return whether or not they are sorted in ascending order. If list has more than 1 duplicate of the same number, return False. Assume no negative numbers and only integers.",
        "task_id": "126",
        "190": "if len(lst) == 1:\n        return True\n    if lst == sorted(lst):\n        return True\n    else:\n        return False\n    pass\n\nprint(is_sorted([1, 2, 2, 3, 3, 4]))",
        "grade-190": {
            "execution": 0
        },
        "29": "return sorted(set(lst)) == lst",
        "grade-29": {
            "execution": 0
        },
        "6": "if len(lst) == 1:\n        return True\n    else:\n        for i in range(1, len(lst)):\n            if lst[i] < lst[i-1]:\n                return False\n            elif lst[i] == lst[i-1]:\n                return False\n    return True\n\nprint(is_sorted([1, 2, 2, 3, 3, 4]))\nprint(is_sorted([1, 2, 2, 2, 3, 4]))\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))\nprint(is_sorted([1, 2, 3, 4, 5, 6]))\nprint(is_sorted([1, 2, 3, 4, 5]))\nprint(is_sorted([1, 3, 2, 4, 5]))\nprint(is_sorted([5]))",
        "grade-6": {
            "execution": 0
        },
        "76": "if len(lst) == 1:\n        return True\n    if len(lst) == len(set(lst)):\n        return lst == sorted(lst)\n    else:\n        return False",
        "grade-76": {
            "execution": 0
        },
        "67": "return lst == sorted(lst)",
        "grade-67": {
            "execution": 0
        },
        "62": "if len(lst) == 1:\n        return True\n    else:\n        for i in range(len(lst)-1):\n            if lst[i] != lst[i+1]:\n                if lst[i] < lst[i+1]:\n                    continue\n                else:\n                    return False\n            else:\n                return False\n    return True\n\nprint(is_sorted([5]))\nprint(is_sorted([1, 2, 3, 4, 5]))\nprint(is_sorted([1, 3, 2, 4, 5]))\nprint(is_sorted([1, 2, 3, 4, 5, 6]))\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))\nprint(is_sorted([1, 2, 2, 3, 3, 4]))\nprint(is_sorted([1, 2, 2, 2, 3, 4]))",
        "grade-62": {
            "execution": 0
        },
        "36": "return list(lst) == sorted(lst) and len(lst) == len(set(lst))",
        "grade-36": {
            "execution": 0
        },
        "27": "return lst == sorted(lst) and len(lst) == len(set(lst))",
        "grade-27": {
            "execution": 0
        },
        "161": "lst_set = set(lst)\n    if lst_set == set(sorted(lst)):\n        return True\n    else:\n        return False",
        "grade-161": {
            "execution": 0
        },
        "23": "pass",
        "grade-23": {
            "execution": 0
        },
        "176": "if lst == sorted(lst):\n        return True\n    else:\n        return False\n\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))\nprint(is_sorted([1, 2, 2, 2, 3, 4]))",
        "grade-176": {
            "execution": 0
        },
        "124": "if len(lst) == 1:\n        return True\n    prev = lst[0]\n    for num in lst[1:]:\n        if num < prev:\n            return False\n        prev = num\n    return True",
        "grade-124": {
            "execution": 0
        },
        "8": "return lst == sorted(set(lst))",
        "grade-8": {
            "execution": 0
        },
        "7": "current = None\n    for item in lst:\n        if current is None:\n            current = item\n        elif current == item:\n            return False\n        elif current > item:\n            return False\n        else:\n            current = item\n    return True",
        "grade-7": {
            "execution": 0
        },
        "24": "return True if len(lst) == 1 else True if len(lst) == len(set(lst)) else False if lst != sorted(lst) else True",
        "grade-24": {
            "execution": 0
        },
        "59": "\"\"\" \n    for x in range(len(lst)):\n        if lst[x] == lst[x-1]:\n            return False\n    if sorted(lst) == lst:\n        return True\n    return False\n    \"\"\"\n    # list(set(lst)) returns a copy of lst without duplicates.\n    # If they are the same size, then there are no duplicates.\n    # Then, I just need to check if the sorted version of the list\n    # is equal to the original list.\n    return len(lst) == len(list(set(lst))) and sorted(lst) == lst\n\nprint(is_sorted([1, 2, 2, 3, 3, 4]))\nprint(is_sorted([1, 2, 2, 2, 3, 4]))\nprint(is_sorted([1, 2, 3, 4, 5]))\nprint(is_sorted([1, 3, 2, 4, 5]))\nprint(is_sorted([1, 2, 3, 4, 5, 6]))\nprint(is_sorted([1, 3, 2, 4, 5, 6]))\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))\nprint(is_sorted([5]))",
        "grade-59": {
            "execution": 0
        },
        "64": "initial = 0\n    for i in range(len(lst)):\n        if lst[i] > initial:\n            initial = lst[i]\n        else:\n            return False\n    return True",
        "grade-64": {
            "execution": 0
        },
        "149": "lst = sorted(set(lst))\n    lst2 = lst[:]\n    lst2.sort()\n    if lst == lst2:\n        return True\n    else:\n        return False\nis_sorted([1, 2, 2, 3, 3, 4])",
        "grade-149": {
            "execution": 0
        },
        "180": "sorted_lst = sorted(lst)\n    if lst == sorted_lst:\n        return True\n    else:\n        return False\n\nis_sorted([5])",
        "grade-180": {
            "execution": 0
        },
        "166": "t = set(lst)\n    if len(lst) != len(t):\n        return False\n    else:\n        return sorted(lst) == lst",
        "grade-166": {
            "execution": 0
        }
    },
    {
        "intent": "from typing import List\n\ndef by_length(arr: List[int]) -> List[str]:\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n",
        "snippet": [
            "    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n"
        ],
        "simplified": "Given an array of integers, sort the integers that are between 1 and 9 inclusive, reverse the resulting array, and then replace each digit by its corresponding name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".",
        "task_id": "105",
        "29": "if not arr:\n        return []\n    else:\n        string_arr = []\n        for i in arr:\n            if i >= 1 and i <= 9:\n                string_arr.append(str(i))\n        string_arr.sort()\n        string_arr.reverse()\n        for num in range(len(string_arr)):\n            if string_arr[num] == '1':\n                string_arr[num] = 'One'\n            elif string_arr[num] == '2':\n                string_arr[num] = 'Two'\n            elif string_arr[num] == '3':\n                string_arr[num] = 'Three'\n            elif string_arr[num] == '4':\n                string_arr[num] = 'Four'\n            elif string_arr[num] == '5':\n                string_arr[num] = 'Five'\n            elif string_arr[num] == '6':\n                string_arr[num] = 'Six'\n            elif string_arr[num] == '7':\n                string_arr[num] = 'Seven'\n            elif string_arr[num] == '8':\n                string_arr[num] = 'Eight'\n            elif string_arr[num] == '9':\n                string_arr[num] = 'Nine'\n        return string_arr",
        "grade-29": {
            "execution": 1
        },
        "6": "pass",
        "grade-6": {
            "execution": 0
        },
        "91": "rev = reverse(arr)\n    res = []\n    for n in rev:\n        if 1 <= n <= 9:\n            res.append(to_word(n))\n    return res",
        "grade-91": {
            "execution": 0
        },
        "83": "# your code here\n    return []",
        "grade-83": {
            "execution": 0
        },
        "77": "res = []\n    final = []\n    for x in arr:\n        if x in [1, 2, 3, 4, 5, 6, 7, 8, 9]:\n            res.append(x)\n    res.sort()\n    res.reverse()\n    for x in res:\n        if x == 1:\n            final.append(\"One\")\n        elif x == 2:\n            final.append(\"Two\")\n        elif x == 3:\n            final.append(\"Three\")\n        elif x == 4:\n            final.append(\"Four\")\n        elif x == 5:\n            final.append(\"Five\")\n        elif x == 6:\n            final.append(\"Six\")\n        elif x == 7:\n            final.append(\"Seven\")\n        elif x == 8:\n            final.append(\"Eight\")\n        elif x == 9:\n            final.append(\"Nine\")\n    return final",
        "grade-77": {
            "execution": 1
        },
        "42": "###########\n    # Task 1 #\n    ###########\n    # START SOLUTION\n    d = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    return [d[i] for i in sorted(arr, reverse=True) if 1 <= i <= 9]\n    # END SOLUTION",
        "grade-42": {
            "execution": 1
        },
        "27": "pass",
        "grade-27": {
            "execution": 0
        },
        "189": "#TODO: Implement by_length\n    pass",
        "grade-189": {
            "execution": 0
        },
        "22": "d = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    return [d[n] for n in sorted(arr, reverse=True) if n in d]",
        "grade-22": {
            "execution": 1
        },
        "143": "temp_list = []\n    for num in arr:\n        if num > 0 and num < 10:\n            temp_list.append(num)\n    temp_list.sort()\n    temp_list.reverse()\n    final_list = []\n    num_to_word = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    for num in temp_list:\n        final_list.append(num_to_word[num])\n    return final_list",
        "grade-143": {
            "execution": 1
        },
        "8": "def number_to_word(num: int) -> str:\n        nums = {\n            1: 'One',\n            2: 'Two',\n            3: 'Three',\n            4: 'Four',\n            5: 'Five',\n            6: 'Six',\n            7: 'Seven',\n            8: 'Eight',\n            9: 'Nine'\n        }\n        return nums[num]\n    \n    nums = []\n    for num in arr:\n        if num > 0 and num < 10:\n            nums.append(num)\n    nums.sort()\n    nums.reverse()\n    words = []\n    for num in nums:\n        words.append(number_to_word(num))\n    return words\n\nprint(by_length([2, 1, 1, 4, 5, 8, 2, 3]))\nprint(by_length([]))\nprint(by_length([1, -1 , 55]))",
        "grade-8": {
            "execution": 1
        },
        "7": "one = 'One'\n    two = 'Two'\n    three = 'Three'\n    four = 'Four'\n    five = 'Five'\n    six = 'Six'\n    seven = 'Seven'\n    eight = 'Eight'\n    nine = 'Nine'\n    dict = {1: one, 2: two, 3: three, 4: four, 5: five, 6: six, 7: seven, 8: eight, 9: nine}\n    r = []\n    arr.sort()\n    for n in arr[::-1]:\n        if 1 <= n <= 9:\n            r.append(dict[n])\n    return r",
        "grade-7": {
            "execution": 1
        },
        "23": "if len(arr) == 0:\n        return []\n    else:\n        a = []\n        for x in arr:\n            if x >= 1 and x <= 9:\n                a.append(x)\n        a.sort()\n        a.reverse()\n        b = []\n        for y in a:\n            if y == 1:\n                b.append('One')\n            elif y == 2:\n                b.append('Two')\n            elif y == 3:\n                b.append('Three')\n            elif y == 4:\n                b.append('Four')\n            elif y == 5:\n                b.append('Five')\n            elif y == 6:\n                b.append('Six')\n            elif y == 7:\n                b.append('Seven')\n            elif y == 8:\n                b.append('Eight')\n            elif y == 9:\n                b.append('Nine')\n        return b",
        "grade-23": {
            "execution": 1
        },
        "74": "pass\n\nprint(by_length([2, 1, 1, 4, 5, 8, 2, 3])) # ['Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One']\nprint(by_length([1, -1 , 55])) # ['One']\nprint(by_length([])) # []",
        "grade-74": {
            "execution": 0
        },
        "79": "arr.sort()\n    arr.reverse()\n    res = []\n    names = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    for i in arr:\n        if i in names:\n            res.append(names[i])\n    return res\n \nprint(by_length([2, 1, 1, 4, 5, 8, 2, 3]))\nprint(by_length([]))\nprint(by_length([1, -1 , 55]))",
        "grade-79": {
            "execution": 1
        },
        "176": "# YOUR CODE HERE\n    return NotImplementedError()",
        "grade-176": {
            "execution": 0
        },
        "194": "#create a dictionary of number to word\n    nums_dict = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    #create a new empty list for the string result\n    new_arr = []\n    #filter the arr to remove all number > 9 or < 1\n    for i in arr:\n        if i < 1 or i > 9:\n            continue\n        else:\n            new_arr.append(i)\n    #sort the new array\n    new_arr.sort()\n    #reverse the sorted new array\n    new_arr.reverse()\n    #create the final empty list to be returned\n    final_arr = []\n    #iterate through the reversed sorted new array\n    for j in new_arr:\n        #append the corresponding word\n        final_arr.append(nums_dict[j])\n    #return the final array\n    return final_arr",
        "grade-194": {
            "execution": 1
        },
        "67": "# create a dictionary with the keys being the numbers and the values being the names\n    numbers = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    # sort the array in place\n    arr.sort()\n    # reverse the sorted array\n    arr.reverse()\n    # create a new array to hold the names\n    names = []\n    # iterate through the array\n    for num in arr:\n        # check if the number is in the dictionary\n        if num in numbers:\n            # append the name to the names array\n            names.append(numbers[num])\n    # return the names array\n    return names\n\nprint(by_length([2, 1, 1, 4, 5, 8, 2, 3]))\nprint(by_length([]))\nprint(by_length([1, -1 , 55]))",
        "grade-67": {
            "execution": 1
        },
        "142": "# ignore any number less than 1 or greater than 9\n    result = list(filter(lambda x: x > 0 and x < 10, arr))\n    result.sort()\n    result.reverse()\n    return [digit_to_string(x) for x in result]",
        "grade-142": {
            "execution": 0
        },
        "76": "...\n\nby_length([1, 2, 3, -1, 55])\n \n \n\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n \n\nby_length([])",
        "grade-76": {
            "execution": 0
        }
    },
    {
        "intent": "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n",
        "snippet": [
            "    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n"
        ],
        "simplified": "\"Given an array representing a branch of a tree that has non-negative integer nodes your task is to pluck one of the nodes and return it. The plucked node should be the node with the smallest even value. If multiple nodes with the same smallest even value are found return the node that has smallest index. The plucked node should be returned in a list, [ smalest_value, its index ], If there are no even values or the given array is empty, return []. Constraints: * 1 <= nodes.length <= 10000 * 0 <= node.value",
        "task_id": "68",
        "169": "if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens)\n    idx = arr.index(min_even)\n    return [min_even, idx]",
        "grade-169": {
            "execution": 1
        },
        "28": "if not arr:\n        return []\n    #this will keep track of the index of the smallest even value\n    # and will be set to infinity if no even values are found\n    index = math.inf\n\n    #this will keep track of the smallest even value\n    # and will be set to infinit if no even values are found\n    smallest_even = math.inf\n\n    for idx, value in enumerate(arr):\n        if value % 2 == 0:\n            if value < smallest_even:\n                smallest_even = value\n                index = idx\n            #if there is a tie, use the smallest index\n            elif value == smallest_even:\n                if idx < index:\n                    index = idx\n    #if no even values are found, the index and smallest even will be infinity\n    if index == math.inf:\n        return []\n    return [smallest_even, index]",
        "grade-28": {
            "execution": 0
        },
        "6": "res = []\n    for i, x in enumerate(arr):\n        if x % 2 == 0:\n            if not res:\n                res = [x, i]\n            else:\n                if x < res[0]:\n                    res = [x, i]\n    return res",
        "grade-6": {
            "execution": 1
        },
        "196": "min_even_val = min(filter(lambda x: x % 2 == 0, arr)) if len(arr) > 0 else None\n    return [min_even_val, arr.index(min_even_val)] if min_even_val is not None else []",
        "grade-196": {
            "execution": 0
        },
        "73": "smallest = 0\n    for node in arr:\n        if node % 2 == 0:\n            smallest = node\n            break\n    for idx, node in enumerate(arr):\n        if node % 2 == 0 and node < smallest:\n            smallest = node\n            smallest_idx = idx\n    try:\n        return [smallest, smallest_idx]\n    except:\n        return []",
        "grade-73": {
            "execution": 0
        },
        "64": "evens = []\n    for i, n in enumerate(arr):\n        if n % 2 == 0:\n            evens.append((n, i))\n    evens.sort()\n    if evens:\n        return [evens[0][0], evens[0][1]]\n    return []",
        "grade-64": {
            "execution": 1
        },
        "59": "evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    smallest = min(evens)\n    return [smallest, arr.index(smallest)]",
        "grade-59": {
            "execution": 1
        },
        "36": "if not arr:\n        return []\n    if len(arr) == 1:\n        return [arr[0], 0]\n    even = [n for n in arr if n % 2 == 0]\n    if not even:\n        return []\n    return [min(even), arr.index(min(even))]",
        "grade-36": {
            "execution": 1
        },
        "195": "# if arr = []:\n    #     return []\n    # # find the smallest even\n    # small_even = sys.maxsize\n    # index = 0\n    # count = 0\n    # while index < len(arr):\n    #     if arr[index] < small_even and arr[index] % 2 == 0:\n    #         small_even = arr[index]\n    #         count = index\n    #     index += 1\n    # if small_even != sys.maxsize:\n    #     return [small_even, count]\n    # else:\n    #     return []\n    if arr == []:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n    if evens == []:\n        return []\n    else:\n        return [min(evens), arr.index(min(evens))]",
        "grade-195": {
            "execution": 1
        },
        "26": "min_even = float('inf')\n    min_idx = -1\n    for i, a in enumerate(arr):\n        if a % 2 == 0 and a < min_even:\n            min_even = a\n            min_idx = i\n    return [min_even, min_idx] if min_idx >= 0 else []",
        "grade-26": {
            "execution": 1
        },
        "179": "if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return [arr[0], 0] if arr[0] % 2 == 0 else []\n    smallest = 2**31 - 1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < smallest:\n            smallest = arr[i]\n    if smallest == 2**31 - 1:\n        return []\n    else:\n        return [smallest, arr.index(smallest)]",
        "grade-179": {
            "execution": 1
        },
        "144": "# Check for an empty array or an array with no even numbers.\n    if not arr or not any(n % 2 == 0 for n in arr):\n        return []\n\n    # Get the index of the smallest even number.\n    even_values = [i for i, n in enumerate(arr) if n % 2 == 0]\n    smallest_even_index = even_values[0]\n    for n in even_values:\n        if arr[n] < arr[smallest_even_index]:\n            smallest_even_index = n\n\n    return [arr[smallest_even_index], smallest_even_index]",
        "grade-144": {
            "execution": 1
        },
        "22": "return [x for x in arr if x % 2 == 0]",
        "grade-22": {
            "execution": 0
        },
        "156": "def is_even(x: int) -> bool:\n        return x % 2 == 0\n\n    def get_smallest_even(arr: List[int]) -> int:\n        smallest_even = None\n        for i in arr:\n            if smallest_even is None:\n                smallest_even = i\n            elif is_even(i) and i < smallest_even:\n                smallest_even = i\n        return smallest_even\n\n    smallest_even = get_smallest_even(arr)\n    if smallest_even is None:\n        return []\n    else:\n        return [smallest_even, arr.index(smallest_even)]",
        "grade-156": {
            "execution": 0
        },
        "111": "smallest_even = None\n    smallest_even_idx = None\n    for i, val in enumerate(arr):\n        if val % 2 == 0:\n            if smallest_even == None or val < smallest_even:\n                smallest_even = val\n                smallest_even_idx = i\n    if smallest_even == None:\n        return []\n    return [smallest_even, smallest_even_idx]",
        "grade-111": {
            "execution": 1
        },
        "8": "evens = list(filter(lambda n: n % 2 == 0, arr))\n    evens.sort()\n    if len(evens) > 0:\n        return [evens[0], arr.index(evens[0])]\n    return []",
        "grade-8": {
            "execution": 1
        },
        "7": "if len(arr) == 0:\n        return []\n    evens = list(filter(lambda x: x % 2 == 0, arr))\n    if len(evens) == 0:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]",
        "grade-7": {
            "execution": 1
        },
        "23": "even = sorted(filter(lambda x: x % 2 == 0, arr))\n    if not even:\n        return []\n    return [even[0], arr.index(even[0])]",
        "grade-23": {
            "execution": 1
        },
        "56": "evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    smallest = min(evens)\n    try:\n        return [smallest, arr.index(smallest)]\n    except ValueError:\n        return []",
        "grade-56": {
            "execution": 1
        },
        "61": "evens = [a for a in arr if a % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n    return []",
        "grade-61": {
            "execution": 1
        }
    },
    {
        "intent": "from typing import List\n\ndef can_arrange(arr: List[int]) -> int:\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n",
        "snippet": [
            "    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n"
        ],
        "simplified": "Create a function which returns the largest index of an element which is not greater than or equal to the element immediately preceding it. If no such element exists then return -1. The given array will not contain duplicate values.",
        "task_id": "135",
        "32": "index = None\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            index = i\n    return index",
        "grade-32": {
            "execution": 0
        },
        "6": "if len(arr) == 1:\n        return -1\n    prev = arr[0]\n    for i, v in enumerate(arr[1:]):\n        if v >= prev:\n            prev = v\n        else:\n            return i + 1\n    return -1",
        "grade-6": {
            "execution": 0
        },
        "84": "# Find the largest element less than or equal to the previous value\n    mx = arr[0]\n    last_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] <= mx:\n            last_index = i\n        else:\n            mx = arr[i]\n    return last_index",
        "grade-84": {
            "execution": 0
        },
        "73": "# If less than 2 elements then cannot arrange so return -1\n    if len(arr) < 2:\n        return -1\n\n    largest_idx = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            if i > largest_idx:\n                largest_idx = i\n\n    return largest_idx",
        "grade-73": {
            "execution": 1
        },
        "68": "if len(arr) == 1:\n        return -1\n    if arr[-1] > arr[-2]:\n        return len(arr) - 1\n    for i in range(len(arr) - 2, -1, -1):\n        if arr[i] > arr[i + 1]:\n            return i\n    return -1",
        "grade-68": {
            "execution": 0
        },
        "40": "val_indices = {}\n    for i, val in enumerate(arr):\n        if val in val_indices:\n            val_indices[val].append(i)\n        else:\n            val_indices[val] = [i]\n    i = 0\n    while i < len(arr) - 1:\n        if arr[i] > arr[i + 1]:\n            val_indices[arr[i]].pop(0)\n            if val_indices[arr[i]] == []:\n                del val_indices[arr[i]]\n            arr.pop(i)\n            arr.insert(i + 1, arr[i])\n            i += 1\n        else:\n            i += 1\n    if arr == sorted(arr):\n        return -1\n    else:\n        return max(val_indices[max(val_indices)])",
        "grade-40": {
            "execution": 0
        },
        "29": "for i in range(len(arr) - 1, 0, -1):\n        if arr[i] > arr[i - 1]:\n            return i\n    return -1",
        "grade-29": {
            "execution": 0
        },
        "181": "# Return -1 if array contains only one element\n    if len(arr) == 1:\n        return -1\n\n    # Initialize large_index to -1\n    large_index = -1\n\n    # Iterate through array\n    for i in range(len(arr) - 1):\n        # If current element is not greater than or equal to element to the\n        # left, update large_index\n        if arr[i] >= arr[i+1]:\n            large_index = i\n\n    return large_index",
        "grade-181": {
            "execution": 0
        },
        "24": "largest = -1\n    for idx, num in enumerate(arr):\n        if num < arr[idx - 1]:\n            largest = idx\n    return largest",
        "grade-24": {
            "execution": 0
        },
        "196": "next_larger = [-1] * len(arr)\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[j] > arr[i]:\n                next_larger[i] = j\n                break\n    for i in range(len(arr)-1, -1, -1):\n        if next_larger[i] == -1:\n            continue\n        if next_larger[next_larger[i]] != -1:\n            next_larger[i] = next_larger[next_larger[i]]\n    return max(next_larger)",
        "grade-196": {
            "execution": 0
        },
        "137": "# Highest value of any position in the array\n    # If the value is <= then we can swap\n    # Otherwise we increment the position counter\n    # If we reach the end we return -1\n    highest = 0\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] > highest:\n            highest = arr[i]\n        elif arr[i] <= highest:\n            count += 1\n        else:\n            continue\n        if count == len(arr):\n            return -1\n    return count\n\nprint(can_arrange([1,2,4,3,5]))\nprint(can_arrange([1,2,3]))",
        "grade-137": {
            "execution": 0
        },
        "8": "if len(arr) < 2:\n        return -1\n    max_idx = len(arr) - 1\n    for i in range(len(arr) - 2, -1, -1):\n        if arr[i] > arr[i + 1]:\n            max_idx = i\n    return max_idx",
        "grade-8": {
            "execution": 0
        },
        "7": "output = -1\n    for i in range(len(arr) - 1):\n        if arr[i] >= arr[i + 1]:\n            output = i\n    return output\n\nprint(can_arrange([1,2,4,3,5]))\nprint(can_arrange([1,2,3]))",
        "grade-7": {
            "execution": 0
        },
        "25": "result = -1\n    for i in range(len(arr) - 1):\n        if arr[i] >= arr[i + 1]:\n            result = i + 1\n    return result",
        "grade-25": {
            "execution": 1
        },
        "66": "for i in range(len(arr) - 1, 0, -1):\n        if arr[i - 1] >= arr[i]:\n            return i\n    return -1",
        "grade-66": {
            "execution": 1
        },
        "70": "curr = -1\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] >= curr:\n            curr = arr[i]\n        else:\n            return i\n    return -1",
        "grade-70": {
            "execution": 0
        },
        "162": "last = float('-inf')\n    last_i = -1\n    for i, x in enumerate(arr):\n        if x >= last:\n            last = x\n            last_i = i\n    return last_i",
        "grade-162": {
            "execution": 0
        },
        "186": "for i in range(len(arr) - 1, 0, -1):\n        if arr[i - 1] >= arr[i]:\n            return i - 1\n    return -1",
        "grade-186": {
            "execution": 0
        },
        "60": "best = 0\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            best = i\n    return best if best != 0 else -1",
        "grade-60": {
            "execution": 1
        },
        "134": "prev = -float('inf')\n    for i,x in enumerate(arr):\n        if x >= prev:\n            return i-1\n        prev = x\n    return -1\n\nprint(can_arrange([1,2,4,3,5]))\nprint(can_arrange([1,2,3]))",
        "grade-134": {
            "execution": 0
        }
    },
    {
        "intent": "from typing import List\n\ndef f(n: int) -> List[int]:\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n",
        "snippet": [
            "    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n"
        ],
        "simplified": "Implement the function f that takes n as a parameter, and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even or the sum of numbers from 1 to i otherwise. i starts from 1. the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).",
        "task_id": "106",
        "192": "# your code here\n    def factorial(n):\n        result = 1\n        for i in range(1, n+1):\n            result *= i\n        return result\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result",
        "grade-192": {
            "execution": 1
        },
        "29": "# your code here\n    return [int(i) for i in range(1, n+1)]\n\nn = int(input())\nprint(f(n))",
        "grade-29": {
            "execution": 0
        },
        "6": "res = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            res.append(factorial(i))\n        else:\n            res.append(sum_of_i(i))\n    return res",
        "grade-6": {
            "execution": 0
        },
        "83": "l = []\n    for i in range(1, n+1):\n        if (i % 2 == 0):\n            l.append(math.factorial(i))\n        else:\n            l.append(sum(range(1, i+1)))\n    return l",
        "grade-83": {
            "execution": 0
        },
        "72": "##########YOUR CODE HERE##########\n    pass\n    ###########END#####################",
        "grade-72": {
            "execution": 0
        },
        "66": "x = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            # Define factorial function\n            def factorial(i):\n                \"\"\"\n                Function that takes i as an input and returns the factorial of i\n                \"\"\"\n                num = 1\n                while i >= 1:\n                    num = num * i\n                    i = i - 1\n                return num\n            # Append factorial of i\n            x.append(factorial(i))\n        else:\n            # Append the sum of numbers from 1 to i\n            x.append(i*(i+1)/2)\n    return x",
        "grade-66": {
            "execution": 1
        },
        "39": "return [i * (i-1) for i in range(1, n+1)]\n\nprint(f(5))",
        "grade-39": {
            "execution": 0
        },
        "27": "pass\n\n\"\"\"\nNote that this one is solved by looking at the examples and reverse-engineering the test case.\n\"\"\"",
        "grade-27": {
            "execution": 0
        },
        "164": "res = []\n    i = 1\n    while len(res) < n:\n        if i % 2 == 0:\n            fac = 1\n            for ii in range(1, i + 1):\n                fac *= ii\n            res.append(fac)\n        else:\n            res.append(sum(range(1, i + 1)))\n        i += 1\n    return res",
        "grade-164": {
            "execution": 1
        },
        "22": "# YOUR CODE HERE\n    lst=[]\n    for i in range(1,n+1):\n        if i%2==0:\n            lst.append(math.factorial(i))\n        else:\n            lst.append(sum(range(1,i+1)))\n    return lst\n    raise NotImplementedError()\n    #END YOUR CODE\n   \n   \nassert f(5) == [1, 2, 6, 24, 15]",
        "grade-22": {
            "execution": 0
        },
        "178": "if n < 1:\n        return []\n    result = []\n    if n >= 1:\n        result.append(1)\n    if n >= 2:\n        result.append(2)\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            result.append(result[i - 1] * i)\n        else:\n            result.append(sum(result[0:i]))\n    return result\n\nprint(f(5))",
        "grade-178": {
            "execution": 0
        },
        "126": "# write your code here\n    # first solution\n    # result_list = []\n    #\n    # for i in range(1, n + 1):\n    #     element = 1\n    #     if i % 2 == 0:\n    #         for k in range(1, i + 1):\n    #             element *= k\n    #     else:\n    #         for k in range(1, i + 1):\n    #             element += k\n    #     result_list.append(element)\n    #\n    # return result_list\n\n    # second solution\n    result_list = []\n\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result_list.append(math.factorial(i))\n        else:\n            result_list.append(sum(range(1, i + 1)))\n\n    return result_list\n\nprint(f(5))",
        "grade-126": {
            "execution": 0
        },
        "8": "#YOUR CODE\n    pass",
        "grade-8": {
            "execution": 0
        },
        "7": "return [n*f(n-1) if n<1 else n]",
        "grade-7": {
            "execution": 0
        },
        "23": "L = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            prod = 1\n            for i in range(1, i+1):\n                prod *= i\n            L.append(prod)\n        else:\n            L.append(i*(i+1)//2)\n    return L\n\nprint(f(5))",
        "grade-23": {
            "execution": 1
        },
        "64": "if n == 0:\n        return []\n    def factorial(n):\n        res = 1\n        for i in range(1, n+1):\n            res *= i\n        return res\n    res = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            res.append(factorial(i))\n        else:\n            res.append(sum(range(1, i+1)))\n    return res",
        "grade-64": {
            "execution": 1
        },
        "68": "return [i * (i - 1) if i % 2 == 0 else sum(range(1, i + 1)) for i in range(1, n + 1)]\n\nprint(f(5))",
        "grade-68": {
            "execution": 0
        },
        "152": "return [1, 2, 6, 24, 15]",
        "grade-152": {
            "execution": 0
        },
        "181": "f = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            f.append(i * (i-1))\n        else:\n            f.append(sum(range(1, i+1)))\n    return f",
        "grade-181": {
            "execution": 0
        },
        "169": "l = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            product = 1\n            for j in range(1, i+1):\n                product *= j\n            l.append(product)\n        else:\n            s = 0\n            for j in range(1, i+1):\n                s += j\n            l.append(s)\n    return l",
        "grade-169": {
            "execution": 1
        }
    },
    {
        "intent": "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n",
        "snippet": [
            "    return sorted(list(set(l)))\n"
        ],
        "simplified": "Return sorted unique elements in a list",
        "task_id": "34",
        "28": "output = []\n    for i in l:\n        if i not in output:\n            output.append(i)\n    return sorted(output)",
        "grade-28": {
            "execution": 1
        },
        "3": "unique_list = list(set(l))\n    unique_list.sort()\n    return unique_list",
        "grade-3": {
            "execution": 1
        },
        "79": "if len(l) == 0:\n        return []\n    unique_l = [l[0]]\n    for i in range(1, len(l)):\n        if l[i] not in unique_l:\n            unique_l.append(l[i])\n    return sorted(unique_l)",
        "grade-79": {
            "execution": 1
        },
        "64": "if l == []:\n        return []\n    else:\n        return sorted(set(l))",
        "grade-64": {
            "execution": 1
        },
        "55": "l.sort()\n    res = []\n    uniq = 0\n    if len(l) > 0:\n        res.append(l[0])\n        uniq = l[0]\n    for i in range(1, len(l)):\n        if l[i] != uniq:\n            res.append(l[i])\n            uniq = l[i]\n    return res",
        "grade-55": {
            "execution": 1
        },
        "34": "if not l:\n        return []\n    l.sort()\n    if len(l) == 1:\n        return l\n    result = [l[0]]\n    for num in l[1:]:\n        if num != result[-1]:\n            result.append(num)\n    return result",
        "grade-34": {
            "execution": 1
        },
        "24": "final_list = []\n    seen = set()\n    for item in l:\n        if item not in seen:\n            seen.add(item)\n            final_list.append(item)\n    return sorted(final_list)",
        "grade-24": {
            "execution": 1
        },
        "20": "u = set(l)\n    return sorted(u)",
        "grade-20": {
            "execution": 1
        },
        "135": "return sorted(set(l))\n\nunique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\nhelp(unique)\n\nassert unique([1, 1, 2, 1, 2, 3]) == [1, 2, 3]",
        "grade-135": {
            "execution": 1
        },
        "5": "return sorted(set(l))",
        "grade-5": {
            "execution": 1
        },
        "187": "# return sorted(set(l))\n    if len(l) == 0:\n        return []\n    a = l[0]\n    b = unique(l[1:])\n    if a in b:\n        return b\n    else:\n        return [a] + b",
        "grade-187": {
            "execution": 0
        },
        "8": "s = set(l)\n    return sorted(s)",
        "grade-8": {
            "execution": 1
        },
        "170": "unique_list = []\n    for x in l:\n        if x not in unique_list:\n            unique_list.append(x)\n    return sorted(unique_list)\n\nunique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\nfrom typing import Callable",
        "grade-170": {
            "execution": 1
        },
        "198": "if len(l) == 0:\n        return []\n    if len(l) == 1:\n        return l\n    else:\n        if l[0] == l[1]:\n            return unique(l[1:])\n        else:\n            return [l[0]] + unique(l[1:])",
        "grade-198": {
            "execution": 0
        },
        "69": "# your code here\n    return []",
        "grade-69": {
            "execution": 0
        },
        "88": "return sorted(set(l))\n\nunique([5, 3, 5, 2, 3, 3, 9, 0, 123])",
        "grade-88": {
            "execution": 1
        },
        "1": "#with dictionary\n    # d = {}\n    # for i in l:\n    #     d[i] = True\n    # return sorted(d.keys())\n\n    #without dictionary\n    u = []\n    for i in l:\n        if i not in u:\n            u.append(i)\n    return sorted(u)",
        "grade-1": {
            "execution": 1
        },
        "186": "s = set(l)\n    return sorted(s)",
        "grade-186": {
            "execution": 1
        },
        "23": "n = len(l)\n    s = sorted(l)\n    unique = []\n    for i in range(n):\n        if i == 0 or s[i] != s[i-1]:\n            unique.append(s[i])\n    return unique",
        "grade-23": {
            "execution": 1
        },
        "115": "result = []\n    for element in l:\n        if element not in result:\n            result.append(element)\n    result.sort()\n    return result",
        "grade-115": {
            "execution": 1
        }
    },
    {
        "intent": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n",
        "snippet": [
            "    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n"
        ],
        "simplified": "Return 2^n modulo p (be aware of numerics).",
        "task_id": "49",
        "33": "if n == 0:\n        return 1\n    else:\n        return (2 * modp(n - 1, p)) % p",
        "grade-33": {
            "execution": 0
        },
        "6": "if n < 0:\n        return 1 / modp(-n, p)\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 2 ** 2 % p\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n    else:\n        return modp(n - 1, p) * 2 % p",
        "grade-6": {
            "execution": 1
        },
        "86": "if n == 0:\n        return 1\n    e = n // 2\n    half = modp(e, p) % p\n    if n % 2 == 0:\n        return (half * half) % p\n    else:\n        return (2 * half * half) % p",
        "grade-86": {
            "execution": 1
        },
        "75": "if p < 1:\n        raise ValueError(f\"Not defined for p={p}\")\n    if n < 0:\n        n = n % p\n    if n < 4:\n        return 2 ** n % p\n    n1 = (n - 1) // 2\n    n2 = (n + 1) // 2\n    k = modp(n1, p)\n    l = modp(n2, p)\n    return k * l % p",
        "grade-75": {
            "execution": 0
        },
        "69": "if n == 0:\n        return 1\n    if n % 2 == 0:\n        return modp(n//2, p)**2 % p\n    return 2 * modp(n-1, p) % p\n\n\n@functools.lru_cache(maxsize=None)",
        "grade-69": {
            "execution": 0
        },
        "43": "total = 1\n    for i in range(n):\n        total = (total * 2) % p\n    return total",
        "grade-43": {
            "execution": 1
        },
        "31": "prod = 1\n    for i in range(n):\n        prod = prod * 2 % p\n    return prod",
        "grade-31": {
            "execution": 1
        },
        "174": "if n == 0:\n        return 1\n    x = modp(n//2, p)**2\n    if n % 2 == 1:\n        x *= 2\n    return x % p",
        "grade-174": {
            "execution": 1
        },
        "25": "if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    return modp(n - 1, p) ** 2 % p",
        "grade-25": {
            "execution": 0
        },
        "194": "if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    else:\n        return (2 * modp(n - 1, p)) % p",
        "grade-194": {
            "execution": 0
        },
        "139": "x = 1\n    for _ in range(n):\n        x = (x*2) % p\n    return x",
        "grade-139": {
            "execution": 1
        },
        "9": "r = 1\n    while n:\n        if n & 1:\n            r = (r * 2) % p\n        n >>= 1\n    return r",
        "grade-9": {
            "execution": 0
        },
        "7": "if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n % 2 == 0:\n        return modp(n//2, p)**2 % p\n    else:\n        return 2 * modp(n-1, p) % p",
        "grade-7": {
            "execution": 1
        },
        "26": "return int(exp(log(2) * n, p))",
        "grade-26": {
            "execution": 0
        },
        "65": "out = 1\n    while n > 0:\n        if n % 2 == 1:\n            out = (out * 2) % p\n        n = n // 2\n    return out",
        "grade-65": {
            "execution": 0
        },
        "71": "if n == 0:\n        return 1\n    return ((2 * modp(n - 1, p)) % p)",
        "grade-71": {
            "execution": 0
        },
        "162": "a = 1\n    while n > 0:\n        if n % 2 == 1:\n            a = (a * 2) % p\n        n = n // 2\n    return a",
        "grade-162": {
            "execution": 0
        },
        "197": "if n == 0:\n        return 1\n    if n % 2 == 0:\n        return (modp(n // 2, p) ** 2) % p\n    else:\n        return (2 * modp(n - 1, p)) % p",
        "grade-197": {
            "execution": 1
        },
        "181": "# Assume n is an int >= 0, p is a prime.\n    # In most cases, n < p.\n    if n == 0:\n        return 1\n    if n % 2 == 0:\n        return modp(n//2, p)**2 % p\n    else:\n        return 2 * modp(n-1, p) % p",
        "grade-181": {
            "execution": 1
        },
        "58": "# let's do the first two cases by hand\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2 % p\n    # now iterate\n    x = 2\n    for i in range(n - 1):\n        x = (x * 2) % p\n    return x",
        "grade-58": {
            "execution": 1
        }
    },
    {
        "intent": "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n",
        "snippet": [
            "    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n"
        ],
        "simplified": "Given an array of integers nums, find the minimum sum of any non-empty sub-array of nums.",
        "task_id": "114",
        "175": "return min(accumulate(nums, min))",
        "grade-175": {
            "execution": 0
        },
        "28": "minimum_sum = sum(nums)\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            if sum(nums[i:j+1]) < minimum_sum:\n                minimum_sum = sum(nums[i:j+1])\n    return minimum_sum",
        "grade-28": {
            "execution": 1
        },
        "6": "minSum = nums[0]\n    currSum = 0\n    for num in nums:\n        currSum += num\n        minSum = min(minSum, currSum)\n        if currSum > 0:\n            currSum = 0\n    return minSum",
        "grade-6": {
            "execution": 1
        },
        "72": "if len(nums) == 0:\n        return 0\n    dp = [0] * len(nums)\n    dp[0] = nums[0]\n    for i in range(1, len(nums)):\n        dp[i] = max(nums[i], dp[i - 1] + nums[i])\n    return min(dp)",
        "grade-72": {
            "execution": 0
        },
        "64": "minimum = float('inf')\n    for start in range(len(nums)):\n        for stop in range(start, len(nums)):\n            sub_array_sum = sum(nums[start:stop+1])\n            if sub_array_sum < minimum:\n                minimum = sub_array_sum\n    return minimum",
        "grade-64": {
            "execution": 1
        },
        "59": "min_sum = float('inf')\n    sum = 0\n    for num in nums:\n        sum += num\n        min_sum = min(min_sum, sum)\n        sum = max(sum, 0)\n    return min_sum",
        "grade-59": {
            "execution": 0
        },
        "36": "min_sum = sum(nums)\n    end = 0\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n    return min_sum\n\nprint(minSubArraySum([2, 3, 4, 1, 2, 4]))\nprint(minSubArraySum([-1, -2, -3]))",
        "grade-36": {
            "execution": 1
        },
        "26": "if not nums:\n        return None\n    min_sum = min_so_far = nums[0]\n    for n in nums[1:]:\n        min_so_far = min(n, min_so_far + n)\n        min_sum = min(min_sum, min_so_far)\n    return min_sum",
        "grade-26": {
            "execution": 1
        },
        "186": "# T.C.: O(n), where n is the length of nums\n    # S.C.: O(1)\n    # Intuition:\n    # 1. We start at the right, by finding the minimum\n    # 2. If a num is greater than or equal to the minimum, then that is the new minimum\n    # 3. If it is less than the minimum, add it to the minimum, and repeat 2\n    # This stops when we encounter a num that is less than the sum of the previous minimum\n    # and num, and the sum is greater than or equal to zero\n    # Then we start again by going to the left\n    # 4. If a num is greater than or equal to the minimum, then that is the new minimum\n    # 5. If it is less than the minimum, add it to the minimum, and repeat 4\n    # 6. This stops when we reach the left end of the array\n    # 7. Now we return the final minimum\n    minimum = float('inf')\n    # Start at the right\n    for i in range(len(nums) - 1, -1, -1):\n        if nums[i] >= minimum:\n            minimum = nums[i]\n        else:\n            minimum += nums[i]\n            if minimum >= 0:\n                break\n    # Start at the left\n    for i in range(len(nums)):\n        if nums[i] >= minimum:\n            minimum = nums[i]\n        else:\n            minimum += nums[i]\n    return minimum",
        "grade-186": {
            "execution": 0
        },
        "147": "minSum = nums[0]\n    currSum = 0\n    for i in range(len(nums)):\n        currSum += nums[i]\n        if currSum < minSum:\n            minSum = currSum\n        if currSum > 0:\n            currSum = 0\n    return minSum",
        "grade-147": {
            "execution": 1
        },
        "22": "min_sum = float('inf')\n    curr_sum = 0\n    for i in range(len(nums)):\n        curr_sum += nums[i]\n        min_sum = min(min_sum, curr_sum)\n        if curr_sum > 0:\n            curr_sum = 0\n    return min_sum\n\nassert minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\nassert minSubArraySum([-1, -2, -3]) == -6",
        "grade-22": {
            "execution": 1
        },
        "162": "smallest_sum = sum(nums)\n    current_sum = 0\n    for number in nums:\n        current_sum += number\n        if current_sum < smallest_sum:\n            smallest_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n    return smallest_sum\n\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(minSubArraySum(nums))",
        "grade-162": {
            "execution": 1
        },
        "115": "total_min = float('inf')\n    curr_min = float('inf')\n    for num in nums:\n        curr_min = min(curr_min, curr_min + num)\n        total_min = min(total_min, curr_min)\n    return total_min\n\nprint(minSubArraySum([2, 3, 4, 1, 2, 4]))\nprint(minSubArraySum([-1, -2, -3]))",
        "grade-115": {
            "execution": 0
        },
        "8": "min_sum = float('inf')\n    current_sum = 0\n    for i in range(len(nums)):\n        current_sum += nums[i]\n        min_sum = min(min_sum, current_sum)\n        if current_sum < 0:\n            current_sum = 0\n    return min_sum",
        "grade-8": {
            "execution": 0
        },
        "7": "pass",
        "grade-7": {
            "execution": 0
        },
        "23": "# edge cases\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    # calculate all sub-arrays\n    curr_sum = 0\n    min_sum = 0\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            curr_sum += nums[j]\n            if curr_sum < min_sum:\n                min_sum = curr_sum\n    return min_sum\n    \n    \nprint(minSubArraySum([2, 3, 4, 1, 2, 4])) # 1\nprint(minSubArraySum([-1, -2, -3])) # -6",
        "grade-23": {
            "execution": 0
        },
        "57": "import sys\n    min_sum = sys.maxsize\n    current_sum = 0\n    for i in range(len(nums)):\n        current_sum += nums[i]\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n    return min_sum",
        "grade-57": {
            "execution": 1
        },
        "61": "minimum = nums[0]\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        minimum = min(minimum, current_sum)\n        current_sum = max(current_sum, 0)\n    return minimum",
        "grade-61": {
            "execution": 0
        },
        "137": "n = len(nums)\n    result = sys.maxsize\n    for i in range(n):\n        sum = 0\n        for j in range(i, n):\n            sum += nums[j]\n            result = min(result, sum)\n    return result",
        "grade-137": {
            "execution": 0
        },
        "165": "if nums is None or len(nums) == 0:\n        return 0\n    result = nums[0]\n    cur_sum = 0\n    for num in nums:\n        cur_sum += num\n        result = min(result, cur_sum)\n        if cur_sum > 0:\n            cur_sum = 0\n    return result\n\nprint(minSubArraySum([-1, -2, -3]))",
        "grade-165": {
            "execution": 1
        }
    },
    {
        "intent": "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    \"\"\"\n",
        "snippet": [
            "    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n"
        ],
        "simplified": "Given list of integers, return list in strange order. Strange sorting, is when you start with the minimum value, then maximum of the remaining integers, then minimum and so on.",
        "task_id": "70",
        "168": "if not lst:\n        return []\n    new_lst = [lst[0]]\n    lst = lst[1:]\n    while lst:\n        index = max_index(lst)\n        new_lst.append(lst[index])\n        lst.pop(index)\n        if lst:\n            index = min_index(lst)\n            new_lst.append(lst[index])\n            lst.pop(index)\n    return new_lst",
        "grade-168": {
            "execution": 0
        },
        "28": "if not lst:\n        return []\n    sort_lst = []\n    iter_lst = lst[:]\n    for _ in range(len(lst)):\n        min_val = min(iter_lst)\n        max_val = max(iter_lst)\n        iter_lst.remove(min_val)\n        sort_lst.append(min_val)\n        if max_val != min_val:\n            iter_lst.remove(max_val)\n            sort_lst.append(max_val)\n    return sort_lst",
        "grade-28": {
            "execution": 0
        },
        "6": "lst = lst.copy()\n    counter = 0\n    start = 0\n    end = len(lst) - 1\n    for i in range(len(lst)):\n        if counter % 2 == 0:\n            lst[i] = min(lst[start:end + 1])\n            start += 1\n        else:\n            lst[i] = max(lst[start:end + 1])\n            end -= 1\n        counter += 1\n    return lst",
        "grade-6": {
            "execution": 0
        },
        "197": "n = len(lst)\n    if n == 0:\n        return []\n    else:\n        # first find the smallest of all the values in the list\n        min_value = min(lst)\n        # then find the next smallest\n        # keep removing the smallest value in the list\n        # until the list is empty\n        # then return the list backwards\n        return [min_value] + strange_sort_list([x for x in lst if x != min_value])[::-1]",
        "grade-197": {
            "execution": 0
        },
        "70": "lst = sorted(lst)\n    for i in range(1, len(lst), 2):\n        lst[i - 1], lst[i] = lst[i], lst[i - 1]\n    return lst",
        "grade-70": {
            "execution": 0
        },
        "62": "lst = sorted(lst)\n    left, right = 0, len(lst) - 1\n    res = []\n    while left <= right:\n        res.append(lst[left])\n        if left != right:\n            res.append(lst[right])\n        left += 1\n        right -= 1\n    return res",
        "grade-62": {
            "execution": 1
        },
        "57": "if len(lst) < 1:\n        return lst\n    sorted_lst = sorted(lst)\n    result = []\n    for i in range(len(sorted_lst) // 2):\n        result.append(sorted_lst[i])\n        if i + len(sorted_lst) // 2 + 1 < len(sorted_lst):\n            result.append(sorted_lst[i + len(sorted_lst) // 2 + 1])\n    if len(sorted_lst) % 2 != 0:\n        result.append(sorted_lst[-1])\n    return result",
        "grade-57": {
            "execution": 0
        },
        "35": "lst = list(lst)\n    if not lst:\n        return []\n    minimum = min(lst)\n    length = len(lst)\n    new_lst = [minimum]\n    for i in range(1, (length+1)//2):\n        new_lst.append(max(lst))\n        new_lst.append(min(lst))\n        lst.remove(max(lst))\n        lst.remove(min(lst))\n    if length % 2 == 1:\n        new_lst.append(lst[0])\n    return new_lst",
        "grade-35": {
            "execution": 0
        },
        "196": "if not lst:\n        return []\n    lst.sort()\n    mid = len(lst) // 2\n    res = []\n    for i in range(mid):\n        res.append(lst[i])\n        res.append(lst[-i - 1])\n    if len(lst) % 2 == 1:\n        res.append(lst[mid])\n    return res",
        "grade-196": {
            "execution": 1
        },
        "26": "if not lst:\n        return []\n    odd_lst = sorted(lst[::2])\n    even_lst = sorted(lst[1::2])[::-1]\n    lst = [None] * len(lst)\n    odd_idx = 0\n    even_idx = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            lst[i] = odd_lst[odd_idx]\n            odd_idx += 1\n        else:\n            lst[i] = even_lst[even_idx]\n            even_idx += 1\n    return lst",
        "grade-26": {
            "execution": 0
        },
        "181": "if not lst:\n        return []\n    copy = lst[:]\n    copy.sort()\n    res = []\n    if len(copy) % 2 == 0:\n        for i in range(0, len(copy), 2):\n            res.append(copy[i])\n            res.append(copy[-i-1])\n    else:\n        for i in range(0, len(copy)-1, 2):\n            res.append(copy[i])\n            res.append(copy[-i-1])\n        res.append(copy[-1])\n    return res",
        "grade-181": {
            "execution": 0
        },
        "143": "list_len = len(lst)\n    new_list = []\n    for n in range(list_len):\n        if n % 2 == 0:\n            new_list.append(min(lst))\n            lst.remove(min(lst))\n        else:\n            new_list.append(max(lst))\n            lst.remove(max(lst))\n    return new_list\n\nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))",
        "grade-143": {
            "execution": 1
        },
        "22": "if not lst:\n        return []\n    else:\n        lst.sort()\n        mid = len(lst) // 2\n        if len(lst) % 2 == 0:\n            left = lst[:mid]\n            right = lst[mid:]\n        else:\n            left = lst[:mid]\n            right = lst[mid+1:]\n        new_left = left[::-1]\n        return new_left + right\n\nprint(strange_sort_list([1, 2, 3, 4]))",
        "grade-22": {
            "execution": 0
        },
        "155": "return sorted(lst, key=lambda x: x % 2)\n\nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))",
        "grade-155": {
            "execution": 0
        },
        "110": "new_lst = []\n    if lst == []:\n        return new_lst\n    else:\n        new_lst.append(min(lst))\n        while len(lst) != 0:\n            if lst[0] == new_lst[0]:\n                lst.pop(0)\n            elif max(lst) != min(lst):\n                new_lst.append(max(lst))\n                lst.remove(max(lst))\n                new_lst.append(min(lst))\n                lst.remove(min(lst))\n            else:\n                new_lst.append(lst[0])\n                lst.pop(0)\n    return new_lst",
        "grade-110": {
            "execution": 0
        },
        "8": "if not lst:\n        return []\n    copy = lst[:]\n    copy.sort()\n    first = copy[0]\n    last = copy[-1]\n    if len(copy) > 2:\n        del copy[0]\n        del copy[-1]\n    if len(copy) == 1:\n        del copy[0]\n    return [first] + strange_sort_list(copy[::-1]) + [last]",
        "grade-8": {
            "execution": 0
        },
        "7": "if not lst:\n        return []\n    lst.sort()\n    res = []\n    for i in range(len(lst) // 2):\n        res.append(lst[i])\n        res.append(lst[len(lst) - i - 1])\n    if len(lst) % 2:\n        res.append(lst[len(lst) // 2])\n    return res",
        "grade-7": {
            "execution": 1
        },
        "23": "def get_max_index(lst: List[int]) -> int:\n        max_ind = -1\n        max_val = float('-inf')\n        for i, el in enumerate(lst):\n            if el > max_val:\n                max_val = el\n                max_ind = i\n        return max_ind\n\n    def get_min_index(lst: List[int]) -> int:\n        min_ind = -1\n        min_val = float('inf')\n        for i, el in enumerate(lst):\n            if el < min_val:\n                min_val = el\n                min_ind = i\n        return min_ind\n\n    curr_max_ind = get_max_index(lst)\n    curr_min_ind = get_min_index(lst)\n    curr_ind = 1\n    while curr_max_ind >= 0 and curr_min_ind >= 0:\n        if curr_ind % 2 == 1:\n            lst[curr_ind], lst[curr_max_ind] = lst[curr_max_ind], lst[curr_ind]\n            lst[:curr_max_ind + 1] = strange_sort_list(lst[:curr_max_ind + 1])\n            curr_max_ind = get_max_index(lst[curr_ind + 1:])\n        else:\n            lst[curr_ind], lst[curr_min_ind] = lst[curr_min_ind], lst[curr_ind]\n            lst[:curr_min_ind + 1] = strange_sort_list(lst[:curr_min_ind + 1])\n            curr_min_ind = get_min_index(lst[curr_ind + 1:])\n        curr_ind += 1\n    return lst",
        "grade-23": {
            "execution": 0
        },
        "55": "res = []\n    if not lst:\n        return res\n    res.append(min(lst))\n    lst.remove(min(lst))\n    while lst:\n        res.append(max(lst))\n        lst.remove(max(lst))\n        if not lst:\n            break\n        res.append(min(lst))\n        lst.remove(min(lst))\n    return res",
        "grade-55": {
            "execution": 1
        },
        "59": "lst.sort()\n    return lst[::2] + lst[1::2]",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n",
        "snippet": [
            "    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n"
        ],
        "simplified": "You are given a positive integer n. You have to create an integer array a of length n. For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1. Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiple of 3.",
        "task_id": "147",
        "178": "triples_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (i + 1) * (i + 1) - (i + 1) + 1 + (j + 1) * (j + 1) - (j + 1) + 1 + (k + 1) * (k + 1) - (k + 1) + 1 \\\n                        % 3 == 0:\n                    triples_count += 1\n    return triples_count",
        "grade-178": {
            "execution": 0
        },
        "30": "m = n - 1\n    t = m * (m + 1) // 2\n    if m % 3 == 0:\n        t -= m // 3\n    if m % 3 == 1:\n        t -= (m + 2) // 3\n    return t",
        "grade-30": {
            "execution": 0
        },
        "6": "# return sum(map(lambda x: (x + 2 * x + 4 * x) // 3, range(1, n)))\n\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 0\n    else:\n        return n // 3 + n // 3",
        "grade-6": {
            "execution": 0
        },
        "75": "if n <= 2:\n        return 0\n    else:\n        # the index of the last element that sum of a[i] + a[j] + a[k] is a multiple of 3\n        # if k > k_max, then a[i] + a[j] + a[k] is not a multiple of 3\n        k_max = (3 - 1) // 2\n\n        return n * (n - 1) * (n - 2) // 6 - (n - k_max - 1) * (n - k_max - 2) // 2",
        "grade-75": {
            "execution": 0
        },
        "66": "if n == 0:\n        return 0\n    triplets = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            a_i = i * i - i + 1\n            a_j = j * j - j + 1\n            a_k = (j + 1) * (j + 1) - (j + 1) + 1\n            if (a_i + a_j + a_k) % 3 == 0:\n                triplets += 1\n    return triplets",
        "grade-66": {
            "execution": 0
        },
        "61": "# a = [i * i - i + 1 for i in range(1, n + 1)]\n    # ans = 0\n    # for i in range(1, n - 1):\n    #     for j in range(i + 1, n):\n    #         for k in range(j + 1, n + 1):\n    #             if (a[i] + a[j] + a[k]) % 3 == 0:\n    #                 ans += 1\n    # return ans\n    mod = 3\n    ans = 0\n    for i in range(1, n - 1):\n        ai = i * i - i + 1\n        if ai % mod == 0:\n            ans += ((n - i) * (n - i - 1)) // 2\n    return ans",
        "grade-61": {
            "execution": 0
        },
        "37": "res = 0\n    for i in range(1, n):\n        res += (n - i) // 3\n    return res",
        "grade-37": {
            "execution": 0
        },
        "28": "# initialize output with the n value if n is a multiple of 3\n    triples = n // 3 if n % 3 == 0 else 0\n    # get the multiples of 3 until the n value\n    multiples = [i for i in range(n+1) if i % 3 == 0]\n    # get the valid indices (j) for the desired triples\n    valid_indices = [index for index in range(n) if index + 1 in multiples]\n    # check if the desired triple exists\n    for index_j in valid_indices:\n        for index_k in range(index_j+1, n):\n            if a[index_j] + a[index_k] in multiples:\n                triples += 1\n    return triples\n\n\na = [i*i - i + 1 for i in range(1, n+1)]\nprint(get_max_triples(n))",
        "grade-28": {
            "execution": 0
        },
        "190": "# Time: O(n)\n    # Space: O(n)\n    if n < 3:\n        return 0\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count",
        "grade-190": {
            "execution": 1
        },
        "151": "if n < 3:\n        return 0\n    def get_num_of_multiples_of_3(a: int, b: int) -> int:\n        if a % 3 == 0 and b % 3 == 0:\n            return min(a // 3, b // 3)\n        elif a % 3 == 0 and b % 3 == 1:\n            return min(a // 3, (b - 1) // 3)\n        elif a % 3 == 0 and b % 3 == 2:\n            return min(a // 3, (b - 2) // 3)\n        elif a % 3 == 1 and b % 3 == 0:\n            return min((a - 1) // 3, b // 3)\n        elif a % 3 == 1 and b % 3 == 1:\n            return min((a - 1) // 3, (b - 1) // 3)\n        elif a % 3 == 1 and b % 3 == 2:\n            return min((a - 1) // 3, (b - 2) // 3)\n        elif a % 3 == 2 and b % 3 == 0:\n            return min((a - 2) // 3, b // 3)\n        elif a % 3 == 2 and b % 3 == 1:\n            return min((a - 2) // 3, (b - 1) // 3)\n        elif a % 3 == 2 and b % 3 == 2:\n            return min((a - 2) // 3, (b - 2) // 3)\n    return get_num_of_multiples_of_3(n, 2 * n - 1) + get_num_of_multiples_of_3(n - 1, 2 * n - 2)",
        "grade-151": {
            "execution": 0
        },
        "24": "if n < 3:\n        return 0\n    res = 1\n    for i in range(n - 2):\n        res += i + 1\n    return res",
        "grade-24": {
            "execution": 0
        },
        "166": "a = [i * i - i + 1 for i in range(1, n + 1)]\n    return len([(a[i], a[j], a[k]) for i in range(len(a)) for j in range(i + 1, len(a)) for k in range(j + 1, len(a)) if (a[i] + a[j] + a[k]) % 3 == 0])",
        "grade-166": {
            "execution": 1
        },
        "116": "def mod3(x: int) -> int:\n        return x % 3\n\n    def count_subarrays(nums: List[int]) -> int:\n        count = 0\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[i] == nums[j]:\n                    count += 1\n        return count\n\n    nums = [mod3(i * i - i + 1) for i in range(1, n + 1)]\n    return count_subarrays(nums)",
        "grade-116": {
            "execution": 0
        },
        "8": "return get_max_triples_naive(n)",
        "grade-8": {
            "execution": 0
        },
        "7": "r_list = [i * i - i + 1 for i in range(1, n + 1)]\n    print(r_list)\n    r_list_len = len(r_list)\n    cnt = 0\n    for i in range(r_list_len - 2):\n        for j in range(i + 1, r_list_len - 1):\n            for k in range(j + 1, r_list_len):\n                if (r_list[i] + r_list[j] + r_list[k]) % 3 == 0:\n                    cnt += 1\n    return cnt",
        "grade-7": {
            "execution": 1
        },
        "25": "if n < 3:\n        return 0\n    elif n < 6:\n        return 1\n    else:\n        return int(0.5 * (n - 1) * (n - 2))",
        "grade-25": {
            "execution": 0
        },
        "59": "res = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            k = n - i - j\n            if 1 <= k <= n and a[i] + a[j] + a[k] % 3 == 0:\n                res += 1\n    return res",
        "grade-59": {
            "execution": 0
        },
        "63": "return sum(1 for _ in itertools.combinations(range(1, n), 3) if (i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0)",
        "grade-63": {
            "execution": 0
        },
        "139": "_, res = get_max_triples_helper(n)\n    return res",
        "grade-139": {
            "execution": 0
        },
        "169": "a = [i * i - i + 1 for i in range(1, n + 1)]\n    res = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    res += 1\n    return res",
        "grade-169": {
            "execution": 1
        }
    },
    {
        "intent": "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n",
        "snippet": [
            "    return abs(a % 10) * abs(b % 10)\n"
        ],
        "simplified": "Complete the function that takes two integers and returns the product of their unit digits. Assume the input is always valid.",
        "task_id": "97",
        "120": "prod = (a * b) % 10\n    return prod",
        "grade-120": {
            "execution": 0
        },
        "16": "a_unit = a % 10\n    b_unit = b % 10\n    return a_unit * b_unit",
        "grade-16": {
            "execution": 1
        },
        "3": "return int(str(a)[-1]) * int(str(b)[-1])",
        "grade-3": {
            "execution": 1
        },
        "142": "return abs(a*b) % 10\nfrom unittest import TestCase\ntc = TestCase()\ntc.assertEqual(multiply(148, 412), 16)\ntc.assertEqual(multiply(19, 28), 72)\ntc.assertEqual(multiply(2020, 1851), 0)\ntc.assertEqual(multiply(14,-15), 20)\ntc.assertEqual(multiply(5,-5), 0)\ntc.assertEqual(multiply(5,5), 0)\ntc.assertEqual(multiply(5,0), 0)\ntc.assertEqual(multiply(0,5), 0)\ntc.assertEqual(multiply(0,0), 0)",
        "grade-142": {
            "execution": 0
        },
        "48": "if 0 in (a, b):\n        return 0\n    return ((a % 10) * (b % 10)) % 10",
        "grade-48": {
            "execution": 0
        },
        "42": "def get_digit(n: int) -> int:\n        if n < 0:\n            n = -n\n        return int(str(n)[-1])\n    return get_digit(a) * get_digit(b)\n\nprint(multiply(148, 412)) # should return 16.\nprint(multiply(19, 28)) # should return 72.\nprint(multiply(2020, 1851)) # should return 0.\nprint(multiply(14,-15)) # should return 20.",
        "grade-42": {
            "execution": 1
        },
        "34": "return 0 if a == 0 or b == 0 else (a * b) % 10",
        "grade-34": {
            "execution": 0
        },
        "19": "a_last = a % 10\n    b_last = b % 10\n    return a_last * b_last",
        "grade-19": {
            "execution": 1
        },
        "14": "# Your code here\n    return abs(a) * abs(b) % 10",
        "grade-14": {
            "execution": 0
        },
        "130": "return int(str(a)[-1]) * int(str(b)[-1])\nmultiply(14,-15)",
        "grade-130": {
            "execution": 1
        },
        "178": "return a % 10 * b % 10",
        "grade-178": {
            "execution": 0
        },
        "100": "a, b = abs(a), abs(b)\n    return (a % 10) * (b % 10)\nfrom typing import List\nfrom typing import Union",
        "grade-100": {
            "execution": 1
        },
        "11": "def _get_unit_digit(n: int) -> int:\n        return n % 10\n    # end _get_unit_digit\n    return _get_unit_digit(a) * _get_unit_digit(b)",
        "grade-11": {
            "execution": 1
        },
        "112": "product = (a % 10) * (b % 10)\n    return product",
        "grade-112": {
            "execution": 1
        },
        "76": "return int(str(a)[-1]) * int(str(b)[-1])\nprint(multiply(4,3))\nprint(multiply(4,4))\nprint(multiply(0,4))\nprint(multiply(4,0))\nprint(multiply(0,0))\n\nprint(multiply(148, 412))\nprint(multiply(19, 28))\nprint(multiply(2020, 1851))\nprint(multiply(14,-15))\n\nprint(multiply(8,93))\nprint(multiply(76,3))\nprint(multiply(210,47))\nprint(multiply(11,45))\nprint(multiply(3,3))\nprint(multiply(1,1))\nprint(multiply(5,5))\nprint(multiply(9,9))\nprint(multiply(0,0))\nprint(multiply(100,100))\nprint(multiply(123,456))\nprint(multiply(512,123))\nprint(multiply(10,10))\nprint(multiply(0,10))\nprint(multiply(10,0))\nprint(multiply(100,10))\nprint(multiply(10,100))\nprint(multiply(101,101))\nprint(multiply(9999,9999))\nprint(multiply(8,9))\nprint(multiply(7,6))\nprint(multiply(2,1))\nprint(multiply(1,2))\nprint(multiply(2,2))\nprint(multiply(5,5))\nprint(multiply(9,9))\nprint(multiply(10,10))\nprint(multiply(0,10))\nprint(multiply(10,0))\nprint(multiply(100,10))\nprint(multiply(10,100))\nprint(multiply(101,101))\nprint(multiply(9999,9999))",
        "grade-76": {
            "execution": 1
        },
        "4": "# multiply(a, b) = multiply(a % 10, b % 10)\n    return (a % 10) * (b % 10)",
        "grade-4": {
            "execution": 1
        },
        "33": "multi = 1\n    for num in str(a) + str(b):\n        if int(num) > 0:\n            multi *= int(num)\n    return multi",
        "grade-33": {
            "execution": 0
        },
        "36": "if a * b == 0:\n        return 0\n    return (a * b) % 10",
        "grade-36": {
            "execution": 0
        },
        "92": "str_a = str(a)[-1]\n    str_b = str(b)[-1]\n    return int(str_a) * int(str_b)",
        "grade-92": {
            "execution": 1
        },
        "114": "return abs(a) % 10 * abs(b) % 10\n\n\nprint(multiply(19, 28))",
        "grade-114": {
            "execution": 0
        }
    },
    {
        "intent": "from typing import List\n\ndef add_elements(arr: List[int], k: int) -> int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n",
        "snippet": [
            "    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n"
        ],
        "simplified": "Given a non-empty array of integers arr and an integer k, return the sum of the elements with at most two digits from the first k elements of arr.",
        "task_id": "122",
        "196": "def helper(x):\n        return 1 if x < 10 else (1 if x < 100 else 0)\n\n    res = 0\n    for i in range(k):\n        res += arr[i] if helper(arr[i]) else 0\n    return res",
        "grade-196": {
            "execution": 1
        },
        "28": "total = 0\n    for i in range(k):\n        x = arr[i]\n        if x >= 100:\n            total += x\n        elif x >= 10:\n            if i + 1 >= k:\n                total += x\n            else:\n                y = arr[i + 1]\n                if y >= 100:\n                    total += x\n                else:\n                    total += x + y\n                    i += 1\n        else:\n            if i + 2 >= k:\n                total += x\n            else:\n                y = arr[i + 1]\n                z = arr[i + 2]\n                if y >= 100 or z >= 100:\n                    total += x\n                else:\n                    total += x + y + z\n                    i += 2\n    return total",
        "grade-28": {
            "execution": 0
        },
        "6": "return sum(n for n in arr[:k] if 10 <= n <= 99)",
        "grade-6": {
            "execution": 0
        },
        "82": "return sum(ele for ele in arr[:k] if len(str(ele)) <= 2)",
        "grade-82": {
            "execution": 1
        },
        "68": "return sum(n for n in arr[:k] if n < 100)",
        "grade-68": {
            "execution": 1
        },
        "63": "count = 0\n    i = 0\n    while count < k:\n        if arr[i] < 100:\n            count += 1\n        i += 1\n    return sum(arr[:i])",
        "grade-63": {
            "execution": 0
        },
        "35": "nums = [i for i in arr if len(str(i)) <= 2]\n    return sum(nums[:k])\n\nassert add_elements([111,21,3,4000,5,6,7,8,9], 4) == 24\nassert add_elements([2,22,1,3,1,99], 4) == 25\nassert add_elements([5], 1) == 5\nassert add_elements([10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10",
        "grade-35": {
            "execution": 0
        },
        "26": "res = 0\n    for i in range(k):\n        if len(str(arr[i])) == 1 or len(str(arr[i])) == 2:\n            res += arr[i]\n    return res",
        "grade-26": {
            "execution": 1
        },
        "164": "_sum = 0\n    for idx, val in enumerate(arr):\n        if idx < k:\n            s = str(val)\n            if len(s) < 3:\n                _sum += val\n    return _sum",
        "grade-164": {
            "execution": 1
        },
        "22": "return sum(filter(lambda i: 10 <= i <= 99, arr[:k]))",
        "grade-22": {
            "execution": 0
        },
        "179": "def get_digits(num: int) -> int:\n        if num < 10:\n            return 1\n        elif num < 100:\n            return 2\n        else:\n            return 3\n\n    sum = 0\n    for num in arr[:k]:\n        num_digits = get_digits(num)\n        if num_digits <= 2:\n            sum += num\n\n    return sum",
        "grade-179": {
            "execution": 1
        },
        "128": "total = 0\n    for num in arr[:k]:\n        if num > 9 and num < 100:\n            total += num\n    return total",
        "grade-128": {
            "execution": 0
        },
        "8": "return sum(min(99, el) for el in arr[:k])",
        "grade-8": {
            "execution": 0
        },
        "7": "return sum(x for x in arr[:k] if len(str(x)) <= 2)",
        "grade-7": {
            "execution": 1
        },
        "23": "# O(n) time\n    # O(1) space\n    sum = 0\n    for num in arr[:k]:\n        if num < 100:\n            sum += num\n    return sum",
        "grade-23": {
            "execution": 1
        },
        "60": "return sum(num for num in arr[:k] if len(str(num)) < 3)",
        "grade-60": {
            "execution": 1
        },
        "65": "two_digits = [num for num in arr if 10 <= num <= 99]\n    one_digit = [num for num in arr if 0 <= num <= 9]\n    return sum(two_digits[:k]) + sum(one_digit[:k])",
        "grade-65": {
            "execution": 0
        },
        "150": "n = 0\n    for num in arr[:k]:\n        if num <= 99:\n            n += num\n    return n",
        "grade-150": {
            "execution": 1
        },
        "183": "total = 0\n    for e in arr[:k]:\n        if e <= 9:\n            total += e\n        elif e <= 99:\n            total += e // 10 + e % 10\n    return total",
        "grade-183": {
            "execution": 0
        },
        "169": "nums = arr[:k]\n    return sum(num for num in nums if num <= 99)",
        "grade-169": {
            "execution": 1
        }
    },
    {
        "intent": "def simplify(x: str, n: str) -> bool:\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n",
        "snippet": [
            "    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n"
        ],
        "simplified": "Your task is to implement a function that will simplify the expression x * n. The function returns True if x * n evaluates to a whole number and False otherwise. Both x and n, are string representation of a fraction, and have the following format, <numerator>/<denominator> where both numerator and denominator are positive whole numbers. You can assume that x, and n are valid fractions, and do not have zero as denominator.",
        "task_id": "144",
        "173": "x_frac = Fraction(x)\n    n_frac = Fraction(n)\n    return x_frac * n_frac == x_frac.numerator * n_frac.numerator",
        "grade-173": {
            "execution": 0
        },
        "29": "x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n    return (x_num * n_num) % (x_denom * n_denom) == 0",
        "grade-29": {
            "execution": 1
        },
        "6": "f = Fraction(x) * Fraction(n)\n    return f.denominator == 1",
        "grade-6": {
            "execution": 0
        },
        "71": "numerator_x, denominator_x = [int(x) for x in x.split(\"/\")]\n    numerator_n, denominator_n = [int(x) for x in n.split(\"/\")]\n    return numerator_x * denominator_n % denominator_x == 0",
        "grade-71": {
            "execution": 0
        },
        "63": "from fractions import Fraction\n    x_fraction = Fraction(x)\n    n_fraction = Fraction(n)\n    return x_fraction * n_fraction == int(x_fraction * n_fraction)",
        "grade-63": {
            "execution": 1
        },
        "58": "# Your code goes here",
        "grade-58": {
            "execution": 0
        },
        "36": "x = Fraction(x)\n    n = Fraction(n)\n    if (x * n).denominator == 1:\n        return True\n    return False",
        "grade-36": {
            "execution": 0
        },
        "27": "x_num, x_den = [int(i) for i in x.split('/')]\n    n_num, n_den = [int(i) for i in n.split('/')]\n    val = x_num * n_num / (x_den * n_den)\n    return val % 1 == 0",
        "grade-27": {
            "execution": 1
        },
        "185": "import re\n    import math\n    x_num, x_den = re.match(r\"(\\d+)/(\\d+)\", x).groups()\n    n_num, n_den = re.match(r\"(\\d+)/(\\d+)\", n).groups()\n    if (int(x_num) * int(n_den)) % (int(x_den) * int(n_num)) == 0:\n        return True\n    return False",
        "grade-185": {
            "execution": 0
        },
        "148": "return simplify_frac(x) * simplify_frac(n) % 1 == 0",
        "grade-148": {
            "execution": 0
        },
        "23": "left_top, left_bot = map(int, x.split('/'))\n    right_top, right_bot = map(int, n.split('/'))\n    mul_top = left_top * right_top\n    mul_bot = left_bot * right_bot\n    return mul_top % mul_bot == 0",
        "grade-23": {
            "execution": 1
        },
        "161": "# convert to Fraction, multiply and check for whole number\n    return Fraction(x) * Fraction(n) % 1 == 0",
        "grade-161": {
            "execution": 0
        },
        "113": "from fractions import Fraction\n    return Fraction(x) * Fraction(n) % 1 == 0",
        "grade-113": {
            "execution": 1
        },
        "8": "if not x.startswith(\"-\"):\n        x = \"1/\" + x\n    if not n.startswith(\"-\"):\n        n = \"1/\" + n\n    x = fraction(x)\n    n = fraction(n)\n    # print(x, n)\n    # print(x * n)\n    return x * n == int(x * n)",
        "grade-8": {
            "execution": 0
        },
        "7": "return gcd(int(x.split('/')[0]), int(x.split('/')[1])) == 1",
        "grade-7": {
            "execution": 0
        },
        "24": "# Extract numerator and denominator\n    x_num, x_denom = x.split(\"/\")\n    n_num, n_denom = n.split(\"/\")\n\n    # Multiply\n    num = int(x_num) * int(n_num)\n    denom = int(x_denom) * int(n_denom)\n\n    # Check if fraction is whole number\n    if num % denom == 0:\n        return True\n    else:\n        return False",
        "grade-24": {
            "execution": 1
        },
        "56": "from fractions import Fraction\n    x, n = [Fraction(i) for i in (x, n)]\n    return (x * n).denominator == 1",
        "grade-56": {
            "execution": 1
        },
        "60": "num_x, den_x = map(int, x.split('/'))\n    num_n, den_n = map(int, n.split('/'))\n    num = num_x * num_n\n    den = den_x * den_n\n    return num % den == 0",
        "grade-60": {
            "execution": 1
        },
        "137": "x = x.split(\"/\")\n    n = n.split(\"/\")\n    product = int(x[0]) * int(n[0]) / (int(x[1]) * int(n[1]))\n    return product.is_integer()",
        "grade-137": {
            "execution": 1
        },
        "164": "numerator, denominator = x.split(\"/\")\n    y_numerator, y_denominator = n.split(\"/\")\n    return int(numerator) * int(y_denominator) % int(denominator) == 0 and int(denominator) * int(y_numerator) % int(y_denominator) == 0",
        "grade-164": {
            "execution": 0
        }
    },
    {
        "intent": "from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n",
        "snippet": [
            "    return [(i * x) for i, x in enumerate(xs)][1:]\n"
        ],
        "simplified": "xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 + .... Return derivative of this polynomial in the same form.",
        "task_id": "62",
        "36": "ys = [xs[n] * n for n in range(1, len(xs))]\n    return ys",
        "grade-36": {
            "execution": 1
        },
        "6": "n = len(xs)\n    assert n > 0\n    if n == 1:\n        return [0]\n    return [xs[i] * i for i in range(1, n)]",
        "grade-6": {
            "execution": 0
        },
        "90": "i = 1\n    new_list = []\n    while i < len(xs):\n        new_list.append(xs[i] * i)\n        i += 1\n    return new_list",
        "grade-90": {
            "execution": 1
        },
        "81": "if len(xs) <= 1:\n        return []\n    else:\n        new_xs = [xs[1] * i for i in range(1, len(xs))]\n        return new_xs",
        "grade-81": {
            "execution": 0
        },
        "75": "assert len(xs) > 0, \"polynomial must have at least one term\"\n    return [xs[i] * i for i in range(1, len(xs))]",
        "grade-75": {
            "execution": 1
        },
        "46": "assert xs\n    n = len(xs)\n    dxs = []\n    for i in range(1, n):\n        dxs.append(xs[i] * i)\n    return dxs",
        "grade-46": {
            "execution": 1
        },
        "34": "dxs = [xs[i] * i for i in range(1, len(xs))]\n    return dxs",
        "grade-34": {
            "execution": 1
        },
        "184": "# The size of the list xs is n+1.\n    n = len(xs) - 1\n    # The size of the returned list will be n.\n    answer = [0] * n\n    for i in range(n):\n        answer[i] = xs[i] * (n - i)\n    return answer",
        "grade-184": {
            "execution": 0
        },
        "27": "d = []\n    for i in range(1, len(xs)):\n        d.append(xs[i] * i)\n    return d",
        "grade-27": {
            "execution": 1
        },
        "138": "for i in range(len(xs)):\n        xs[i] = xs[i] * i\n    xs.pop(0)\n    return xs",
        "grade-138": {
            "execution": 1
        },
        "8": "return [ xs[i] * i for i in range(1, len(xs)) ]",
        "grade-8": {
            "execution": 1
        },
        "7": "derivative = []\n    for power, coeff in enumerate(xs):\n        if power:\n            derivative.append(coeff * power)\n    return derivative",
        "grade-7": {
            "execution": 1
        },
        "28": "# TODO - Question 9\n    # Hint: use list comprehensions\n    return [xs[i] * i for i in range(1, len(xs))]",
        "grade-28": {
            "execution": 1
        },
        "73": "if len(xs) < 2:\n        return []\n    else:\n        return [xs[n] * n for n in range(1, len(xs))]",
        "grade-73": {
            "execution": 1
        },
        "78": "if not xs:\n        return []\n    else:\n        new_xs = []\n        for i in range(1, len(xs)):\n            new_xs.append(xs[i] * i)\n        return new_xs",
        "grade-78": {
            "execution": 1
        },
        "166": "return [i * (len(xs) - i) for i in range(1, len(xs))]",
        "grade-166": {
            "execution": 0
        },
        "189": "if not xs:\n        return []\n    return xs[1:]",
        "grade-189": {
            "execution": 0
        },
        "66": "# base case: xs is [] or [0] or [c]\n    if len(xs) <= 1:\n        return []\n    # recursion\n    new_xs = []\n    for i in range(1, len(xs)):\n        new_xs.append(xs[i] * i)\n    return new_xs",
        "grade-66": {
            "execution": 1
        },
        "137": "def build_poly(xs):\n        return list(map(lambda x, y: x * y, range(1, len(xs)), xs))\n    return build_poly(xs[1:])\n    #return [0]",
        "grade-137": {
            "execution": 0
        },
        "74": "if len(xs) == 1:\n        return [0]\n    else:\n        xs_derivative = xs[1:]\n        for i in range(len(xs_derivative)):\n            xs_derivative[i] = xs_derivative[i] * (i + 1)\n        return xs_derivative",
        "grade-74": {
            "execution": 0
        }
    },
    {
        "intent": "def remove_vowels(text: str) -> str:\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n",
        "snippet": [
            "    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n"
        ],
        "simplified": "remove_vowels is a function that takes string and returns string without vowels.",
        "task_id": "51",
        "177": "new_text = ''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    for letter in text:\n        if letter.lower() not in vowels:\n            new_text += letter\n    return new_text",
        "grade-177": {
            "execution": 0
        },
        "28": "return ''.join(c for c in text if c not in 'aeiouAEIOU')",
        "grade-28": {
            "execution": 1
        },
        "6": "return ''.join(filter(lambda x: x not in 'aeiou', text))",
        "grade-6": {
            "execution": 0
        },
        "72": "vowels = 'aeiou'\n    answer = ''\n    for i in text:\n        if i.lower() not in vowels:\n            answer += i\n    return answer",
        "grade-72": {
            "execution": 1
        },
        "64": "return text.translate(text.maketrans(\"\", \"\", \"aeiouAEIOU\"))",
        "grade-64": {
            "execution": 1
        },
        "59": "vowels = 'aeiou'\n    return ''.join(list(filter(lambda x: x not in vowels, text)))",
        "grade-59": {
            "execution": 0
        },
        "35": "return ''.join(char for char in text if char not in 'aeiouAEIOU')",
        "grade-35": {
            "execution": 1
        },
        "26": "new_str = ''\n    for i in text:\n        if i not in 'aeiouAEIOU':\n            new_str += i\n    return new_str",
        "grade-26": {
            "execution": 1
        },
        "187": "vowels = \"aeiouAEIOU\"\n    new_text = \"\"\n    for i in text:\n        if i not in vowels:\n            new_text += i\n    return new_text",
        "grade-187": {
            "execution": 1
        },
        "151": "return ''.join(char for char in text if char not in vowels)",
        "grade-151": {
            "execution": 0
        },
        "22": "return ''.join(ch for ch in text if ch not in vowels)",
        "grade-22": {
            "execution": 0
        },
        "165": "return ''.join(e for e in text if e not in 'aeiouAEIOU')",
        "grade-165": {
            "execution": 1
        },
        "115": "ret = []\n    for char in text:\n        if char.lower() not in 'aeiou':\n            ret.append(char)\n    return ''.join(ret)",
        "grade-115": {
            "execution": 1
        },
        "8": "vowels = 'aeiou'\n    new_text = ''\n    for i in text:\n        if i not in vowels:\n            new_text += i\n    return new_text",
        "grade-8": {
            "execution": 0
        },
        "7": "vowels = 'aeiouAEIOU'\n    text_without_vowels = ''\n    for char in text:\n        if char not in vowels:\n            text_without_vowels += char\n    return text_without_vowels",
        "grade-7": {
            "execution": 1
        },
        "23": "return \"\".join(list(filter(lambda x: x not in 'aeiouAEIOU', text)))",
        "grade-23": {
            "execution": 1
        },
        "57": "vowels = 'aeiouAEIOU'\n    return ''.join(c for c in text if c not in vowels)",
        "grade-57": {
            "execution": 1
        },
        "61": "new_text = ''\n    for char in text:\n        if char not in 'aeiouAEIOU':\n            new_text += char\n    return new_text",
        "grade-61": {
            "execution": 1
        },
        "139": "vowels = \"aeiou\"\n    # TODO: add your code here\n    text_without_vowels = text.translate({ord(char): None for char in vowels})\n    return text_without_vowels",
        "grade-139": {
            "execution": 0
        },
        "168": "text = text.lower()\n    text = text.replace('a', '')\n    text = text.replace('e', '')\n    text = text.replace('i', '')\n    text = text.replace('o', '')\n    text = text.replace('u', '')\n    return text",
        "grade-168": {
            "execution": 0
        }
    },
    {
        "intent": "from typing import List\n\ndef words_string(s: str) -> List[str]:\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n",
        "snippet": [
            "    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n"
        ],
        "simplified": "You will be given a string of words separated by commas or spaces. Your task is to split the string into words and return an array of the words.",
        "task_id": "101",
        "121": "return re.findall(r\"[\\w']+\", s)",
        "grade-121": {
            "execution": 0
        },
        "17": "pass",
        "grade-17": {
            "execution": 0
        },
        "4": "lst = s.split(\" \")\n    lst2 = []\n    for string in lst:\n        if \",\" in string:\n            string = string.split(\",\")\n            for str in string:\n                lst2.append(str)\n        else:\n            lst2.append(string)\n    return lst2",
        "grade-4": {
            "execution": 0
        },
        "145": "return re.split(r'[ ,]+', s)",
        "grade-145": {
            "execution": 0
        },
        "47": "return [x for x in s.split(' ') if x != '']",
        "grade-47": {
            "execution": 0
        },
        "37": "return [word for word in s.split()]",
        "grade-37": {
            "execution": 0
        },
        "34": "new_string = \"\"\n    words = []\n    for i in s:\n        if i == \" \" or i == \",\":\n            words.append(new_string)\n            new_string = \"\"\n        else:\n            new_string += i\n    words.append(new_string)\n    return words\n\nprint(words_string(\"One, two, three, four, five, six\"))",
        "grade-34": {
            "execution": 0
        },
        "21": "return re.findall(r'\\w+', s)",
        "grade-21": {
            "execution": 0
        },
        "16": "return []\n\nimport unittest",
        "grade-16": {
            "execution": 0
        },
        "128": "s = s.replace(',', ' ')\n    return s.split()",
        "grade-128": {
            "execution": 1
        },
        "183": "#your code here\n    return None",
        "grade-183": {
            "execution": 0
        },
        "99": "# return re.split(r'[\\s,]+', s)\n    return re.findall(r\"[\\w']+\", s)\n\nimport re",
        "grade-99": {
            "execution": 1
        },
        "14": "return re.split(\"[, ]+\", s)",
        "grade-14": {
            "execution": 0
        },
        "111": "s = s.split(\",\")\n    s = \" \".join(s)\n    s = s.split()\n    return s",
        "grade-111": {
            "execution": 1
        },
        "77": "return s.split(', ')\nwords_string(\"Hi, my name is John\")",
        "grade-77": {
            "execution": 0
        },
        "5": "words = s.split(',')\n\n    for i in range(len(words)):\n        words[i] = words[i].strip()\n\n    return words\n\nprint(words_string(\"Hi, my name is John\"))",
        "grade-5": {
            "execution": 0
        },
        "33": "return re.findall(r\"[\\w]+\", s)",
        "grade-33": {
            "execution": 0
        },
        "35": "words = s.split(',')\n    words = [word.strip() for word in words]\n    return words\n\nassert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nassert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nassert words_string(\"This is a string\") == [\"This\", \"is\", \"a\", \"string\"]\nassert words_string(\"This is another string\") == [\"This\", \"is\", \"another\", \"string\"]\n\nprint('All tests passed!')",
        "grade-35": {
            "execution": 0
        },
        "90": "...\n    \n \n\nassert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nassert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n \n\nprint(\"Passed all tests!\")\n```\n\nWhat would we change so that we could just run the file and see the output?\n\n<details>\n  <summary>Solution</summary>\n  <br>\n  \n  We add a `print` statement at the end to print the result!\n</details>\n\nLet's test out our solution:\n\n```\n$ python solve_words_string.py\nPassed all tests!\n```\n\nNice! It works!\n\nLet's try one more example:\n\n```python",
        "grade-90": {
            "execution": 0
        },
        "114": "s = re.split(r\"\\s|,\", s)\n    return s",
        "grade-114": {
            "execution": 0
        }
    },
    {
        "intent": "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n",
        "snippet": [
            "    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n"
        ],
        "simplified": "This function takes two positive numbers x and y and returns the biggest even integer number that is in the range [x, y] inclusive. If there's no such number, then the function should return -1.",
        "task_id": "102",
        "182": "if x % 2 == 0:\n        return y if x < y and y % 2 == 0 else x\n    else:\n        return y if x + 1 < y and y % 2 == 0 else x + 1",
        "grade-182": {
            "execution": 0
        },
        "33": "output = 0\n    if x % 2 == 0:\n        output = x\n    else:\n        x += 1\n        output = x\n    while output < y:\n        output += 2\n    if output > y:\n        output = -1\n    return output",
        "grade-33": {
            "execution": 0
        },
        "6": "numbers = [num for num in range(x, y + 1) if num % 2 == 0]\n    return max(numbers) if numbers else -1",
        "grade-6": {
            "execution": 1
        },
        "79": "# YOUR CODE HERE\n    if x%2 != 0:\n        x+=1\n    if y%2 != 0:\n        y-=1\n    if x>y:\n        return -1\n    for i in range(x,y+1,2):\n        return i\nchoose_num(13,12)\n\nassert choose_num(12, 15) == 14\nassert choose_num(13, 12) == -1\nassert choose_num(100, 500) == 500\nassert choose_num(300, 550) == 500\nassert choose_num(500, 300) == -1",
        "grade-79": {
            "execution": 0
        },
        "70": "# This is a stub. Replace with appropriate return value.\n    return 0",
        "grade-70": {
            "execution": 0
        },
        "65": "if x % 2 == 0:\n        biggest_even = x\n    else:\n        biggest_even = x + 1\n    for number in range(x + 1, y + 1):\n        if number % 2 == 0 and number > biggest_even:\n            biggest_even = number\n    if biggest_even > y:\n        return -1\n    else:\n        return biggest_even",
        "grade-65": {
            "execution": 1
        },
        "40": "# If x is even and x is in range [x, y]\n    if x % 2 == 0 and x in range(x, y + 1):\n        return x\n    # If x is odd and (x + 1) is in range [x, y]\n    elif x % 2 == 1 and (x + 1) in range(x, y + 1):\n        return x + 1\n    else:\n        return -1",
        "grade-40": {
            "execution": 0
        },
        "31": "assert x > 0 and y > 0, \"Error: x and y should be positive!\"\n    assert x <= y, \"Error: x should be smaller than y!\"\n    for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            return i\n    return -1",
        "grade-31": {
            "execution": 0
        },
        "193": "for i in range(x, y+1):\n        if i % 2 == 0:\n            return i\n    return -1\n\nassert choose_num(12, 15) == 14\nassert choose_num(13, 12) == -1",
        "grade-193": {
            "execution": 0
        },
        "156": "if x % 2 == 0:\n        start = x\n    else:\n        start = x + 1\n    if y % 2 == 0:\n        end = y\n    else:\n        end = y - 1\n    if start > end:\n        return -1\n    else:\n        return end",
        "grade-156": {
            "execution": 1
        },
        "26": "# range function takes in two arguments, start and stop, and creates a \n    # range of integers that starts at start and stops at stop - 1\n    even_nums = [num for num in range(x, y + 1) if num % 2 == 0]\n    if len(even_nums) > 0:\n        return max(even_nums)\n    else:\n        return -1",
        "grade-26": {
            "execution": 1
        },
        "169": "for i in range(x, y + 1):\n        if i % 2 == 0:\n            return i\n    return -1",
        "grade-169": {
            "execution": 0
        },
        "123": "def get_max_even(x: int, y: int) -> int:\n        if y % 2 == 0:\n            return y\n        else:\n            return y - 1\n    if x > y:\n        return -1\n    if x % 2 == 0:\n        return get_max_even(x, y)\n    else:\n        return get_max_even(x + 1, y)",
        "grade-123": {
            "execution": 0
        },
        "8": "# YOUR CODE HERE\n    number = 0\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            number = i\n    if number == 0:\n        return -1\n    else:\n        return number",
        "grade-8": {
            "execution": 1
        },
        "7": "pass",
        "grade-7": {
            "execution": 0
        },
        "27": "return # your code here",
        "grade-27": {
            "execution": 0
        },
        "63": "num = -1\n    for i in range(x, y + 1):\n        if i % 2 == 0:\n            num = i\n    return num",
        "grade-63": {
            "execution": 1
        },
        "67": "for i in range(x, y+1):\n        if i % 2 == 0:\n            return i\n    return -1",
        "grade-67": {
            "execution": 0
        },
        "146": "# start by checking if x is even\n    if x % 2 == 0:\n        if x < y:\n            return x\n        else:\n            return -1\n    else:\n        if x + 1 < y:\n            return x + 1\n        else:\n            return -1",
        "grade-146": {
            "execution": 0
        },
        "172": "if x <= y:\n        for i in range(y, x-1, -1):\n            if i % 2 == 0:\n                return i\n        return -1\n    else:\n        return -1",
        "grade-172": {
            "execution": 1
        }
    },
    {
        "intent": "def prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n",
        "snippet": [
            "    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n"
        ],
        "simplified": "prime_fib returns n-th number that is a Fibonacci number and it's also prime.",
        "task_id": "39",
        "163": "if n < 1:\n        raise ValueError(\"n must be positive\")\n    primes = []\n    if n == 1:\n        return 2\n    fib = 2\n    fib1 = 1\n    fib2 = 2\n    i = 2\n    while i <= n:\n        fib = fib1 + fib2\n        fib1 = fib2\n        fib2 = fib\n        if is_prime(fib):\n            primes.append(fib)\n            i += 1\n    return primes[-1]",
        "grade-163": {
            "execution": 0
        },
        "28": "if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 13\n    elif n == 5:\n        return 89\n    else:\n        return 0",
        "grade-28": {
            "execution": 0
        },
        "6": "if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    f1 = 2\n    f2 = 3\n    counter = 2\n    while counter < n:\n        tmp = f1 + f2\n        f1 = f2\n        f2 = tmp\n        if is_prime(f2):\n            counter += 1\n    return f2",
        "grade-6": {
            "execution": 0
        },
        "189": "if n < 1:\n        raise ValueError(\"Value must be greater than 0\")\n    if n == 1:\n        return 2\n    fib_prime_count = 1\n    fib_prev = 1\n    fib_curr = 1\n    while fib_prime_count < n:\n        fib_new = fib_prev + fib_curr\n        fib_prev = fib_curr\n        fib_curr = fib_new\n        if is_prime(fib_curr):\n            fib_prime_count += 1\n    return fib_curr",
        "grade-189": {
            "execution": 0
        },
        "70": "i = 0\n    f = 1\n    while i < n:\n        i += 1\n        f = fib(i)\n        if is_prime(f):\n            continue\n        else:\n            i -= 1\n    return f",
        "grade-70": {
            "execution": 0
        },
        "62": "fib = [2, 3]\n    i = 2\n    while i < n:\n        fib.append(fib[i - 1] + fib[i - 2])\n        if is_prime(fib[i]):\n            i += 1\n    return fib[i - 1]",
        "grade-62": {
            "execution": 0
        },
        "57": "# CODE YOUR SOLUTION HERE",
        "grade-57": {
            "execution": 0
        },
        "35": "f1, f2 = 0, 1\n    while n > 0:\n        f1, f2 = f2, f1 + f2\n        if is_prime(f2):\n            n -= 1\n    return f2",
        "grade-35": {
            "execution": 0
        },
        "188": "num_list = []\n    i = 1\n    while len(num_list) != n:\n        num = fib(i)\n        if prime(num):\n            num_list.append(num)\n        i += 1\n    return num_list[-1]",
        "grade-188": {
            "execution": 0
        },
        "26": "assert n > 0, \"Value of n must be positive.\"\n    prime_fib_count = 0\n    prev, curr = 0, 1\n    while prime_fib_count < n:\n        prev, curr = curr, prev + curr\n        if is_prime(curr):\n            prime_fib_count += 1\n    return curr",
        "grade-26": {
            "execution": 0
        },
        "173": "fib_prime_num = 0\n    num = 1\n    while True:\n        fib_prime_num += 1\n        if is_prime(fibonacci(num)):\n            if fib_prime_num == n:\n                return fibonacci(num)\n            num += 1",
        "grade-173": {
            "execution": 0
        },
        "139": "counter = 0\n    i = 0\n    while counter < n:\n        if is_prime(fib(i)):\n            counter += 1\n        i += 1\n    return fib(i - 1)",
        "grade-139": {
            "execution": 0
        },
        "22": "FIB = list(fib_gen())\n    if n <= 0:\n        raise ValueError(\"n should be > 0\")\n    for i in range(len(FIB)):\n        if is_prime(FIB[i]):\n            n -= 1\n            if n == 0:\n                return FIB[i]",
        "grade-22": {
            "execution": 0
        },
        "151": "prime_fibs = [2, 3]\n    while len(prime_fibs) < n:\n        i = prime_fibs[-1] + prime_fibs[-2]\n        if math.prod(i % num for num in range(2, math.floor(math.sqrt(i)) + 1)) == 0:\n            prime_fibs.append(i)\n    return prime_fibs[n - 1]",
        "grade-151": {
            "execution": 0
        },
        "108": "if n <= 1:\n        return 2\n    a, b = 2, 3\n    for i in range(n-1):\n        a, b = b, a + b\n        while not is_prime(b):\n            a, b = b, a + b\n    return b",
        "grade-108": {
            "execution": 0
        },
        "8": "if n <= 0:\n        raise ValueError(\"prime_fib is defined only for n>0\")\n    fib_number = 1\n    previous_fib_number = 1\n    i = 1\n    while i < n:\n        fib_number, previous_fib_number = fib_number + previous_fib_number, fib_number\n        if is_prime(fib_number):\n            i += 1\n    return fib_number",
        "grade-8": {
            "execution": 0
        },
        "7": "assert n > 0, 'n must be positive'\n    assert isinstance(n, int), 'n must be int'\n    f1, f2 = 1, 1\n    n_th = 1\n    while n_th < n:\n        f1, f2 = f2, f1 + f2\n        if is_prime(f2):\n            n_th += 1\n    return f2",
        "grade-7": {
            "execution": 0
        },
        "23": "if n == 1:\n        return 2\n    prime_fibs = [2, 3]\n    i = 3\n    while len(prime_fibs) < n:\n        i += 1\n        if is_prime(i) and is_fib(i):\n            prime_fibs.append(i)\n    return prime_fibs[-1]",
        "grade-23": {
            "execution": 0
        },
        "55": "if n <= 0:\n        raise ValueError(\"Number should be greater than 0.\")\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        temp1 = 2\n        temp2 = 3\n        counter = 2\n        while counter < n:\n            fib_number = temp1 + temp2\n            if check_prime(fib_number):\n                counter += 1\n            temp1 = temp2\n            temp2 = fib_number\n        return fib_number",
        "grade-55": {
            "execution": 0
        },
        "59": "f_list = [1, 2]\n    index = 2\n    n_th = 0\n    while n_th < n:\n        new_f = f_list[index - 1] + f_list[index - 2]\n        if is_prime(new_f):\n            n_th += 1\n        if n_th == n:\n            return new_f\n        f_list.append(new_f)\n        index += 1\n    return 0",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "def is_equal_to_sum_even(n: int) -> bool:\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n",
        "snippet": [
            "    return n%2 == 0 and n >= 8\n"
        ],
        "simplified": "Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers",
        "task_id": "138",
        "181": "if n % 2 != 0:\n        return False\n    for i in range(1, n//2):\n        for j in range(1, n//2):\n            for k in range(1, n//2):\n                for l in range(1, n//2):\n                    if i+j+k+l == n:\n                        return True\n    return False",
        "grade-181": {
            "execution": 0
        },
        "28": "assert isinstance(n, int)\n    # TODO - implement\n    if n%2 == 0:\n        return True\n    else:\n        return False",
        "grade-28": {
            "execution": 0
        },
        "6": "if n % 2 != 0:\n        return False\n    sums = list(map(lambda x: x + sum(filter(lambda y: y > x, map(lambda z: int(n - z), range(0, int(n / 2) + 1)))),\n                     range(0, int(n / 2) + 1)))\n    return n in sums",
        "grade-6": {
            "execution": 0
        },
        "74": "if n < 4:\n        return False\n    nums = find_four_even(n)\n    if nums:\n        return sum(nums) == n\n    return False",
        "grade-74": {
            "execution": 0
        },
        "66": "return True if n % 2 == 0 and n != 0 else False",
        "grade-66": {
            "execution": 0
        },
        "60": "# we will check whether there are 4 even numbers that sum to n\n    # even numbers are in the form 2k, where k is a natural number\n    # so we can represent the sum as 2(k1+k2+k3+k4)\n    # so what we are checking is if n/2 is a sum of 4 natural numbers\n    # luckily this is an easy problem to solve\n    # we can use the partition function from the math module\n    from math import partition\n    return partition(n//2, 4) > 0",
        "grade-60": {
            "execution": 0
        },
        "35": "if n % 2 != 0:\n        return False\n    return is_perfect_square(n / 4 + 1)",
        "grade-35": {
            "execution": 0
        },
        "26": "raise NotImplementedError(\"Please implement the `is_equal_to_sum_even` function\")",
        "grade-26": {
            "execution": 0
        },
        "193": "for i in range(1, int(n / 2) + 1):\n        for j in range(1, int(n / 2) + 1):\n            for k in range(1, int(n / 2) + 1):\n                for l in range(1, int(n / 2) + 1):\n                    if (n == (i + j + k + l)):\n                        if (i % 2 == 0 and j % 2 == 0 and k % 2 == 0 and l % 2 == 0):\n                            return True\n    return False",
        "grade-193": {
            "execution": 1
        },
        "149": "for i in range(n // 2 + 1):\n        for j in range(n // 2 + 1):\n            for k in range(n // 2 + 1):\n                for l in range(n // 2 + 1):\n                    if i + j + k + l == n:\n                        if i > 0 and j > 0 and k > 0 and l > 0:\n                            if i % 2 == 0 and j % 2 == 0 and k % 2 == 0 and l % 2 == 0:\n                                return True\n    return False",
        "grade-149": {
            "execution": 1
        },
        "22": "pass",
        "grade-22": {
            "execution": 0
        },
        "167": "# your code here\n    cnt = 0\n    for i in range(n):\n        if i % 2 == 0:\n            cnt += 1\n    return cnt == 4",
        "grade-167": {
            "execution": 0
        },
        "113": "...",
        "grade-113": {
            "execution": 0
        },
        "8": "return True",
        "grade-8": {
            "execution": 0
        },
        "7": "# if n == sum(x for x in range(1, n) if x % 2 == 0):\n    #     return True\n    # else:\n    #     return False\n    return n == sum(x for x in range(1, n) if x % 2 == 0)",
        "grade-7": {
            "execution": 0
        },
        "23": "return n % 2 == 0 and n > 7",
        "grade-23": {
            "execution": 1
        },
        "58": "if n % 2 == 1:\n        return False\n    elif n == 0:\n        return False\n    else:\n        count = 0\n        for i in range(n // 2):\n            count += 1\n            n -= 2 * count\n            if n == 0:\n                return True\n        return False",
        "grade-58": {
            "execution": 0
        },
        "62": "if not isinstance(n, int):\n        raise TypeError(\"n must be integer\")\n    if n <= 0:\n        raise ValueError(\"n must be positive\")\n    for i in range(1, n // 2 + 1):\n        if is_positive_even(i) and is_positive_even(n - i):\n            return True\n    return False",
        "grade-62": {
            "execution": 0
        },
        "137": "if n % 2 != 0:\n        return False\n    if n < 8:\n        return False\n    return True",
        "grade-137": {
            "execution": 1
        },
        "170": "if n % 2 == 1:\n        return False\n    # n is even\n\n    if n < 8:\n        return False\n    # n is not a sum of even numbers smaller than 8\n\n    s = 0\n    a = 2\n    while a <= n // 2:\n        b = a\n        while b <= n // 2:\n            c = b\n            while c <= n // 2:\n                d = n - a - b - c\n                if d < c:\n                    break\n                if d == c:\n                    s += 1\n                c += 2\n            b += 2\n        a += 2\n    return s == 1",
        "grade-170": {
            "execution": 0
        }
    },
    {
        "intent": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n",
        "snippet": [
            "    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n"
        ],
        "simplified": "Input to this function is a string representing musical notes in a special ASCII format. Your task is to parse this string and return list of integers corresponding to how many beats does each not last. Here is a legend: 'o' - whole note, lasts four beats 'o|' - half note, lasts two beats '.|' - quater note, lasts one beat",
        "task_id": "17",
        "191": "mus = ''.join(music_string.split())\n    music = {'o': 4, 'o|': 2, '.|': 1}\n    notes = []\n    for i in range(0, len(mus), 2):\n        if mus[i:i+2] in music:\n            notes.append(music[mus[i:i+2]])\n    return notes",
        "grade-191": {
            "execution": 0
        },
        "28": "# YOUR CODE HERE\n    music_list = music_string.split()\n    new_list = []\n    for note in music_list:\n        if note == 'o':\n            new_list.append(4)\n        elif note == 'o|':\n            new_list.append(2)\n        elif note == '.|':\n            new_list.append(1)\n    return new_list",
        "grade-28": {
            "execution": 1
        },
        "6": "index = 0\n    music_length = []\n    while index < len(music_string):\n        if music_string[index] == 'o':\n            if index+1 < len(music_string) and music_string[index+1] == '|':\n                music_length.append(2)\n                index += 2\n            else:\n                music_length.append(4)\n                index += 1\n        elif music_string[index] == '.':\n            if index+1 < len(music_string) and music_string[index+1] == '|':\n                music_length.append(1)\n                index += 2\n            else:\n                raise ValueError(\"Invalid string\")\n        else:\n            raise ValueError(\"Invalid string\")\n    return music_length",
        "grade-6": {
            "execution": 0
        },
        "74": "# You code goes here\n    assert music_string, \"Music string cannot be empty\"\n    assert type(music_string) is str, \"Music string must be a string\"\n    #split the string by spaces\n    split_string = music_string.split()\n    #loop through the list of strings for each character\n    list_of_ints = []\n    for i in split_string:\n        for char in i:\n            if char == 'o':\n                list_of_ints.append(4)\n            elif char == 'o|':\n                list_of_ints.append(2)\n            elif char == '.|':\n                list_of_ints.append(1)\n    return list_of_ints",
        "grade-74": {
            "execution": 0
        },
        "64": "music_dict = {'o': 4, 'o|': 2, '.|': 1}\n    return [music_dict[x] for x in music_string.split()]",
        "grade-64": {
            "execution": 1
        },
        "59": "music_string = music_string.replace(' ', '')\n    return [2 if i == '|' else 4 for i in music_string]",
        "grade-59": {
            "execution": 0
        },
        "35": "raise NotImplementedError()",
        "grade-35": {
            "execution": 0
        },
        "26": "return [4 if note == 'o' else 2 if note == 'o|' else 1 for note in music_string.split()]",
        "grade-26": {
            "execution": 1
        },
        "157": "music_string = music_string.split()\n    mus_list = []\n    for note in music_string:\n        if note == 'o':\n            mus_list.append(4)\n        elif note == 'o|':\n            mus_list.append(2)\n        elif note == '.|':\n            mus_list.append(1)\n    return mus_list",
        "grade-157": {
            "execution": 1
        },
        "22": "pass\n\nparse_music('o o| .| o| o| .| .| .| .| o o')",
        "grade-22": {
            "execution": 0
        },
        "171": "music_string = music_string.replace(' ', '')\n    result = []\n    i = 0\n    while i < len(music_string):\n        if music_string[i] == 'o':\n            if music_string[i + 1] == '|':\n                result.append(2)\n                i += 2\n            else:\n                result.append(4)\n                i += 1\n        else:\n            result.append(1)\n            i += 2\n    return result",
        "grade-171": {
            "execution": 0
        },
        "121": "split_string = music_string.split()\n    output = []\n    for value in split_string:\n        if value == 'o':\n            output.append(4)\n        elif value == 'o|':\n            output.append(2)\n        elif value == '.|':\n            output.append(1)\n    return output",
        "grade-121": {
            "execution": 1
        },
        "8": "f2b = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    return [f2b[x] for x in music_string.split()]",
        "grade-8": {
            "execution": 1
        },
        "7": "note_length = {'o': 4, 'o|': 2, '.|': 1}\n    beats = music_string.replace('|', '').split()\n    return [note_length[beat] for beat in beats]",
        "grade-7": {
            "execution": 0
        },
        "23": "assert music_string, \"Empty string was passed as input\"\n    res = []\n    notes = music_string.split(' ')\n    for note in notes:\n        if note == 'o':\n            res.append(4)\n        elif note == 'o|':\n            res.append(2)\n        elif note == '.|':\n            res.append(1)\n        else:\n            raise ValueError(\"Input note not recognized\")\n    return res",
        "grade-23": {
            "execution": 0
        },
        "57": "music_list = list(music_string)\n    result = []\n    for i in range(len(music_list)):\n        if music_list[i] == 'o':\n            if music_list[i + 1] == ' ':\n                result.append(4)\n            elif music_list[i + 1] == '|':\n                result.append(2)\n        elif music_list[i] == '.':\n            result.append(1)\n    return result",
        "grade-57": {
            "execution": 0
        },
        "61": "# Get the notes and remove the spaces.\n    notes = music_string.split(' ')\n    note_values = []\n    # The index position is the beats of the note.\n    notes_dict = {'o': 4, 'o|': 2, '.|': 1}\n    for note in notes:\n        for key, value in notes_dict.items():\n            if note == key:\n                note_values.append(value)\n    return note_values",
        "grade-61": {
            "execution": 1
        },
        "144": "notes = {'o': 4, 'o|': 2, '.|': 1}\n    beats = []\n    for note in music_string.split():\n        beats.append(notes[note])\n    return beats",
        "grade-144": {
            "execution": 1
        },
        "176": "# Write your code here\n    pass",
        "grade-176": {
            "execution": 0
        },
        "161": "result = []\n    music_string = music_string.split()\n    for note in music_string:\n        result.append(len(note))\n    return result",
        "grade-161": {
            "execution": 0
        }
    },
    {
        "intent": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n",
        "snippet": [
            "    return set(s0) == set(s1)\n"
        ],
        "simplified": "Check if two words have the same characters.",
        "task_id": "54",
        "121": "if len(s0) != len(s1):\n        return False\n    letters = {}\n    for c in s0:\n        if c in letters:\n            letters[c] += 1\n        else:\n            letters[c] = 1\n    for c in s1:\n        if c in letters:\n            letters[c] -= 1\n        else:\n            return False\n    for val in letters.values():\n        if val != 0:\n            return False\n    return True",
        "grade-121": {
            "execution": 0
        },
        "16": "if s0 == s1:\n        return True\n    if len(s0) != len(s1):\n        return False\n    if len(s0) == 1:\n        return True\n    s0 = ''.join(sorted(s0))\n    s1 = ''.join(sorted(s1))\n    if s0 == s1:\n        return True\n    return False",
        "grade-16": {
            "execution": 0
        },
        "3": "if len(s0) != len(s1):\n        return False\n    chars = set(s0)\n    for char in chars:\n        if s0.count(char) != s1.count(char):\n            return False\n    return True",
        "grade-3": {
            "execution": 0
        },
        "143": "d0 = defaultdict(int)\n    d1 = defaultdict(int)\n    for c in s0:\n        d0[c] += 1\n    for c in s1:\n        d1[c] += 1\n    return d0 == d1",
        "grade-143": {
            "execution": 0
        },
        "48": "counter_s0 = Counter(s0)\n    counter_s1 = Counter(s1)\n    return len(counter_s0 - counter_s1) == 0",
        "grade-48": {
            "execution": 0
        },
        "41": "counter0, counter1 = Counter(s0), Counter(s1)\n    return counter0.keys() == counter1.keys() and counter0.values() == counter1.values()",
        "grade-41": {
            "execution": 0
        },
        "36": "if len(s0) != len(s1):\n        return False\n    s0c = Counter(s0)\n    s1c = Counter(s1)\n    if set(s0c.keys()) != set(s1c.keys()):\n        return False\n    for k in s0c.keys():\n        if s0c[k] != s1c[k]:\n            return False\n    return True",
        "grade-36": {
            "execution": 0
        },
        "20": "return collections.Counter(s0) == collections.Counter(s1)",
        "grade-20": {
            "execution": 0
        },
        "15": "if len(s0) != len(s1):\n        return False\n    c0, c1 = collections.Counter(s0), collections.Counter(s1)\n    return c0 == c1",
        "grade-15": {
            "execution": 0
        },
        "126": "# return all(c in s1 for c in s0)\n    for c in s0:\n        if c not in s1:\n            return False\n    return True",
        "grade-126": {
            "execution": 0
        },
        "180": "char_count = {}\n    for i in s0:\n        if i in char_count:\n            char_count[i] += 1\n        else:\n            char_count[i] = 1\n    for i in s1:\n        if i in char_count:\n            char_count[i] -= 1\n        else:\n            return False\n    for i in char_count:\n        if char_count[i] != 0:\n            return False\n    return True",
        "grade-180": {
            "execution": 0
        },
        "100": "# TODO: 1 line\n    def sort_str(t):\n        return sorted(t)\n    return sort_str(s0) == sort_str(s1)",
        "grade-100": {
            "execution": 0
        },
        "13": "return _same_chars(s0, s1)",
        "grade-13": {
            "execution": 0
        },
        "110": "s0_counter = Counter(s0)\n    s1_counter = Counter(s1)\n    return s0_counter == s1_counter",
        "grade-110": {
            "execution": 0
        },
        "78": "# fill in your code here\n    return sorted(s0) == sorted(s1)",
        "grade-78": {
            "execution": 0
        },
        "4": "s0_dict = count_chars(s0)\n    s1_dict = count_chars(s1)\n    for char in s0_dict:\n        if char not in s1_dict or s0_dict[char] > s1_dict[char]:\n            return False\n    return True",
        "grade-4": {
            "execution": 0
        },
        "33": "d0 = Counter(s0)\n    d1 = Counter(s1)\n    return d0 == d1",
        "grade-33": {
            "execution": 0
        },
        "38": "for c in s0:\n        if c not in s1:\n            return False\n    for c in s1:\n        if c not in s0:\n            return False\n    return True",
        "grade-38": {
            "execution": 1
        },
        "92": "s0_c = Counter(s0)\n    s1_c = Counter(s1)\n    return s0_c == s1_c",
        "grade-92": {
            "execution": 0
        },
        "117": "return list(Counter(s0).items()) == list(Counter(s1).items())",
        "grade-117": {
            "execution": 0
        }
    },
    {
        "intent": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n",
        "snippet": [
            "    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n"
        ],
        "simplified": "Write a function that accepts a list of strings. The list contains different words. Return the word with maximum number of unique characters. If multiple strings have maximum number of unique characters, return the one which comes first in lexicographical order.",
        "task_id": "158",
        "187": "max_char = 0\n    max_word = \"\"\n    for word in words:\n        if len(set(word)) > max_char:\n            max_char = len(set(word))\n            max_word = word\n    return max_word",
        "grade-187": {
            "execution": 0
        },
        "30": "pass",
        "grade-30": {
            "execution": 0
        },
        "7": "if not words:\n        return \"\"\n    max_char = max([set(word) for word in words], key=len)\n    max_list = [word for word in words if set(word) == max_char]\n    return sorted(max_list)[0]\n\nwords = [\"a\", \"ab\", \"abc\", \"d\", \"cd\", \"bcd\", \"abcd\"]\nprint(find_max(words))",
        "grade-7": {
            "execution": 0
        },
        "78": "max_length = 0\n    max_word = \"\"\n    for word in words:\n        # if len(set(word)) > max_length or (len(set(word)) == max_length and word < max_word):\n        if len(set(word)) > max_length:\n            max_length = len(set(word))\n            max_word = word\n    return max_word",
        "grade-78": {
            "execution": 0
        },
        "68": "max_word = \"\"\n    max_chars = 0\n    for word in words:\n        if len(set(word)) > max_chars:\n            max_chars = len(set(word))\n            max_word = word\n    return max_word",
        "grade-68": {
            "execution": 0
        },
        "62": "# TODO: implement the function here\n    pass\n    result = \"\"\n    for word in words:\n        # Find number of unique characters\n        letters = []\n        for c in word:\n            if c not in letters:\n                letters.append(c)\n        if len(letters) > len(result):\n            result = word\n        elif len(letters) == len(result):\n            if word < result:\n                result = word\n    return result",
        "grade-62": {
            "execution": 1
        },
        "37": "max_word = words[0]\n    for word in words:\n        if len(set(word)) > len(set(max_word)):\n            max_word = word\n    return max_word",
        "grade-37": {
            "execution": 0
        },
        "28": "# pass\n    words_dict = {}\n    if len(words) < 1:\n        return None\n    else:\n        # go through each word in list, and remove duplicates so that we can\n        # check the length of the set. Then add to the dictionary\n        for word in words:\n            words_dict[word] = len(set(word))\n        # print(words_dict)\n        # assign keys to an array and sort\n        sorted_words = sorted(words_dict.keys())\n        # print(sorted_words)\n        # iterate through each word and compare with the next word, if the next\n        # word has a higher value and it's index is higher than the current word,\n        # return the current word\n        for i in range(len(sorted_words) - 1):\n            if words_dict[sorted_words[i + 1]] > words_dict[sorted_words[i]]:\n                return sorted_words[i + 1]\n            else:\n                continue\n        return sorted_words[0]\n\n\n\nprint(find_max([\"name\", \"of\", \"string\"]))  # == \"string\"\nprint(find_max([\"name\", \"enam\", \"game\"]))  # == \"enam\"\nprint(find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]))  # == \"\"aaaaaaa\"",
        "grade-28": {
            "execution": 0
        },
        "199": "from collections import Counter\n    unique_char_dict = {}\n    unique_char_max = 0\n    unique_max_word = \"\"\n    # Calculate the number of unique characters in each word\n    for word in words:\n        unique_char_dict[word] = len(Counter(word))\n        # Find the unique max\n        if unique_char_dict[word] > unique_char_max:\n            unique_char_max = unique_char_dict[word]\n            unique_max_word = word\n        # If multiple words have same number of unique characters,\n        # return the one which comes first in lexicographical order\n        elif unique_char_dict[word] == unique_char_max:\n            if word < unique_max_word:\n                unique_max_word = word\n    return unique_max_word\n\n\"\"\"\nRun-time analysis:\nTime:\nWe have to run through all the words, so the time complexity is O(N)\nwhere N is the number of words.\n\nSpace:\nWe create a dictionary to store the number of unique characters for\neach word, so the space complexity is O(N)\n\"\"\"\n\n\"\"\"\nAlternative 1:\nThe Counter object has a method called most_common(), which returns\nthe most common elements and their counts in descending order.\nSince most_common() returns a list of tuples, we need to get the\nfirst element of the first tuple.\nThe word is stored in the first element, which is 0. The frequency\nis stored in the second element, which is 1.\n\"\"\"\n\nfrom collections import Counter",
        "grade-199": {
            "execution": 1
        },
        "158": "if not words:\n        return \"\"\n    max_num_chars = 0\n    max_word = \"\"\n    for word in words:\n        if len(set(word)) > max_num_chars:\n            max_num_chars = len(set(word))\n            max_word = word\n    return max_word",
        "grade-158": {
            "execution": 0
        },
        "24": "curr_word = \"\"\n    curr_word_set = set()\n    curr_count = 0\n    max_count = 0\n    for word in words:\n        for char in word:\n            if char not in curr_word_set:\n                curr_word_set.add(char)\n                curr_count += 1\n        if curr_count > max_count:\n            max_count = curr_count\n            curr_word = word\n        curr_count = 0\n        curr_word_set = set()\n    return curr_word",
        "grade-24": {
            "execution": 0
        },
        "173": "return max(words, key=lambda word: len(set(word)))",
        "grade-173": {
            "execution": 0
        },
        "119": "max_s = \"\"\n    max_char = 0\n    for word in words:\n        unique_char = len(set(word))\n        if unique_char > max_char:\n            max_char = unique_char\n            max_s = word\n    return max_s",
        "grade-119": {
            "execution": 0
        },
        "9": "max_word = \"\"\n    max_char_count = 0\n    for word in words:\n        char_count = len(set(word))\n        if char_count > max_char_count:\n            max_char_count = char_count\n            max_word = word\n    return max_word",
        "grade-9": {
            "execution": 0
        },
        "8": "if len(words) == 0:\n        return \"\"\n    result = words[0]\n    max_unique = len(set(words[0]))\n    for word in words[1:]:\n        curr_unique = len(set(word))\n        if curr_unique > max_unique:\n            max_unique = curr_unique\n            result = word\n        elif curr_unique == max_unique:\n            result = min(result, word)\n    return result\n\nprint(find_max([\"name\", \"of\", \"string\"]))\nprint(find_max([\"name\", \"enam\", \"game\"]))\nprint(find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]))",
        "grade-8": {
            "execution": 1
        },
        "25": "# return the word with maximum unique characters\n    pass",
        "grade-25": {
            "execution": 0
        },
        "60": "max_word = words[0]\n    max_count = len(set(max_word))\n    for word in words[1:]:\n        if len(set(word)) > max_count:\n            max_word = word\n            max_count = len(set(word))\n    return max_word",
        "grade-60": {
            "execution": 0
        },
        "64": "word_counts = []\n    for word in words:\n        word_counts.append((word, len(set(word))))\n    max_count = max(word_counts, key=lambda x: x[1])[1]\n    return sorted([word for word, count in word_counts if count == max_count])[0]",
        "grade-64": {
            "execution": 1
        },
        "143": "word_values = []\n    for word in words:\n        word_value = {\"word\": word, \"value\": len(set(word))}\n        word_values.append(word_value)\n    max_value = max(word_values, key=lambda i: i[\"value\"])[\"value\"]\n    words_with_max_value = [word_value[\"word\"] for word_value in word_values if word_value[\"value\"] == max_value]\n    return sorted(words_with_max_value)[0]",
        "grade-143": {
            "execution": 1
        },
        "176": "max_word = None\n    max_char_count = 0\n    for word in words:\n        char_count = len(set(word))\n        if char_count > max_char_count:\n            max_char_count = char_count\n            max_word = word\n    return max_word\n\nprint(find_max([\"name\", \"of\", \"string\"]))\nprint(find_max([\"name\", \"enam\", \"game\"]))\nprint(find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]))",
        "grade-176": {
            "execution": 0
        }
    },
    {
        "intent": "def file_name_check(file_name: str) -> str:\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n",
        "snippet": [
            "    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n"
        ],
        "simplified": "Create a function which takes a string representing a file's name, and returns 'Yes' if the the file's name is valid, and returns 'No' otherwise. A file's name is considered to be valid if and only if all the following conditions are met: - There should not be more than three digits ('0'-'9') in the file's name. - The file's name contains exactly one dot '.' - The substring before the dot should not be empty, and it starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dot should be one of these: ['txt', 'exe', 'dll']",
        "task_id": "141",
        "173": "count = 0\n    ext_count = 0\n    ext_correct = False\n    ext_types = [\"txt\", \"exe\", \"dll\"]\n    for c in file_name:\n        if \"0\" <= c <= \"9\":\n            count += 1\n        if c == \".\":\n            ext_count += 1\n    if not \"a\" <= file_name[0] <= \"z\" and not \"A\" <= file_name[0] <= \"Z\":\n        return \"No\"\n    if ext_count != 1:\n        return \"No\"\n    else:\n        if file_name[-3:] in ext_types:\n            ext_correct = True\n    if count > 3 or not ext_correct:\n        return \"No\"\n    else:\n        return \"Yes\"",
        "grade-173": {
            "execution": 0
        },
        "28": "if not re.match(r'\\D+\\.txt|\\D+\\.exe|\\D+\\.dll', file_name):\n        return 'No'\n    if re.match(r'\\D+\\.txt|\\D+\\.exe|\\D+\\.dll', file_name):\n        return 'Yes'\n    return 'No'",
        "grade-28": {
            "execution": 0
        },
        "6": "if not re.match(r\"[a-zA-Z][a-zA-Z0-9]{0,2}[.](txt|exe|dll)$\", file_name):\n        return \"No\"\n    return \"Yes\"",
        "grade-6": {
            "execution": 0
        },
        "71": "dot_index = file_name.rfind('.')\n    name = file_name[:dot_index]\n    ext = file_name[dot_index+1:]\n    if name[0].isalpha() and ext in ['txt', 'exe', 'dll'] and file_name.count('.') == 1:\n        name = name.replace('.', '')\n        if name.isdigit():\n            return 'No'\n        elif name.count('0') + name.count('1') + name.count('2') + name.count('3') + name.count('4') + name.count('5') + name.count('6') + name.count('7') + name.count('8') + name.count('9') > 3:\n            return 'No'\n        else:\n            return 'Yes'\n    else:\n        return 'No'",
        "grade-71": {
            "execution": 0
        },
        "63": "if re.match(r'^[A-Za-z][^0-9]{1,3}\\.(txt|exe|dll)$', file_name):\n        return 'Yes'\n    return 'No'\n\nprint(file_name_check(\"example.txt\"))\nprint(file_name_check(\"1example.dll\"))\n\nprint(\"\"\"",
        "grade-63": {
            "execution": 0
        },
        "58": "return \"Yes\" if re.match(r\"^[a-zA-Z]{1}\\w{0,9}\\.txt$|^[a-zA-Z]{1}\\w{0,9}\\.exe$|^[a-zA-Z]{1}\\w{0,9}\\.dll$\", file_name) else \"No\"",
        "grade-58": {
            "execution": 0
        },
        "35": "if len(re.findall(r\"\\d\", file_name)) > 3:\n        return \"No\"\n    elif not (re.search(r\"\\.\", file_name) and re.search(r\"^[a-zA-Z]\", file_name) and re.search(r\"\\.(txt|exe|dll)$\", file_name)):\n        return \"No\"\n    else:\n        return \"Yes\"",
        "grade-35": {
            "execution": 0
        },
        "26": "# Your code goes here\n    # dot_count = file_name.count('.')\n    # if dot_count > 1:\n    #     return 'No'\n    # if dot_count == 0:\n    #     return 'No'\n    # dot_index = file_name.index('.')\n    # before_dot = file_name[:dot_index]\n    # if before_dot == '':\n    #     return 'No'\n    # after_dot = file_name[dot_index + 1:]\n    # if after_dot not in ('txt', 'exe', 'dll'):\n    #     return 'No'\n    # if before_dot[0].isdigit():\n    #     return 'No'\n    # for char in before_dot:\n    #     if char.isdigit():\n    #         digits_count += 1\n    #     if digits_count > 3:\n    #         return 'No'\n    # return 'Yes'\n    import re\n    return 'Yes' if re.match(r'^([a-zA-Z][a-zA-Z0-9]{0,2})\\.(txt|exe|dll)$', file_name) else 'No'",
        "grade-26": {
            "execution": 0
        },
        "183": "if re.findall(\"[0-9]{4,}\", file_name):\n        return \"No\"\n    if re.findall(\"\\.{2,}\", file_name):\n        return \"No\"\n    if not re.findall(\"[a-zA-Z][a-zA-Z0-9]*\\.txt|[a-zA-Z][a-zA-Z0-9]*\\.exe|[a-zA-Z][a-zA-Z0-9]*\\.dll\", file_name):\n        return \"No\"\n    return \"Yes\"",
        "grade-183": {
            "execution": 0
        },
        "145": "digits_count = 0\n    is_letter = False\n    dot_found = False\n    if not file_name:\n        return 'No'\n    for i in file_name:\n        if i.isdigit():\n            digits_count += 1\n        if i == '.':\n            dot_found = True\n        if (i >= 'a' and i <= 'z') or (i >= 'A' and i <= 'Z'):\n            is_letter = True\n    if digits_count > 3:\n        return 'No'\n    if not dot_found:\n        return 'No'\n    if not is_letter:\n        return 'No'\n    extension = file_name.split('.')[1]\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n\n\n@testwrapper",
        "grade-145": {
            "execution": 0
        },
        "22": "if not file_name[0].isalpha():\n        return 'No'\n    count = 0\n    index = file_name.find('.')\n    for c in file_name[:index]:\n        if c.isdigit():\n            count += 1\n    if count > 3:\n        return 'No'\n    if not file_name[index+1:] in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'",
        "grade-22": {
            "execution": 1
        },
        "159": "if not re.match(\"^[a-zA-Z]+[^\\.]{0,3}[\\.][txt|exe|dll]$\", file_name):\n        return \"No\"\n    return \"Yes\"",
        "grade-159": {
            "execution": 0
        },
        "112": "dot_location = file_name.rfind('.')\n    if dot_location == -1:\n        return 'No'\n    if file_name[dot_location + 1:] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if not file_name[:dot_location].isalpha():\n        return 'No'\n    if file_name[:dot_location].isdigit():\n        return 'No'\n    return 'Yes'",
        "grade-112": {
            "execution": 0
        },
        "8": "import re\n    if re.search(\"^[a-zA-Z]+\\d{0,3}\\.(txt|exe|dll)$\", file_name):\n        return \"Yes\"\n    else:\n        return \"No\"",
        "grade-8": {
            "execution": 0
        },
        "7": "count_num = 0\n    for e in file_name:\n        if e.isdigit():\n            count_num += 1\n    if count_num > 3:\n        return 'No'\n    elif file_name.count('.') == 1:\n        file_name_list = file_name.split('.')\n        if file_name_list[0] and file_name_list[0][0].isalpha() and file_name_list[1] in ['txt', 'exe', 'dll']:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'",
        "grade-7": {
            "execution": 1
        },
        "23": "assert isinstance(file_name, str)\n    if len(re.findall(r'[0-9]', file_name)) > 3:\n        return 'No'\n    if len(re.findall(r'\\.', file_name)) != 1:\n        return 'No'\n    if len(re.findall(r'[a-zA-Z]', file_name.split('.')[0])) == 0:\n        return 'No'\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'",
        "grade-23": {
            "execution": 0
        },
        "55": "if re.match(r'([a-zA-Z]+)(\\d{1,3})(.*)((\\.txt)|(\\.exe)|(\\.dll))', file_name):\n        return 'Yes'\n    else:\n        return 'No'",
        "grade-55": {
            "execution": 0
        },
        "60": "digit_counter = 0\n    dot_counter = 0\n    dot_index = 0\n    for i in range(len(file_name)):\n        if file_name[i].isdigit():\n            digit_counter += 1\n        if file_name[i] == '.':\n            dot_counter += 1\n            dot_index = i\n        if digit_counter > 3:\n            return 'No'\n    if dot_counter != 1:\n        return 'No'\n    if not (file_name[:dot_index].isalpha() and len(file_name[:dot_index]) > 0):\n        return 'No'\n    if file_name[dot_index + 1:] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'",
        "grade-60": {
            "execution": 0
        },
        "135": "digits_count = sum(map(lambda x: 1 if x.isdigit() else 0, file_name))\n    if digits_count > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    substrings = file_name.split('.')\n    if not substrings[0][0].isalpha():\n        return 'No'\n    if substrings[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'",
        "grade-135": {
            "execution": 0
        },
        "163": "if len(re.findall(r\"\\d\", file_name)) > 3:\n        return \"No\"\n    if len(re.findall(r\"\\.\", file_name)) != 1:\n        return \"No\"\n    if not re.search(r\"[a-zA-Z]\", file_name.split(\".\")[0]):\n        return \"No\"\n    if file_name.split(\".\")[1] not in [\"txt\", \"exe\", \"dll\"]:\n        return \"No\"\n    return \"Yes\"\n\n\nprint(file_name_check(\"example.txt\"))  # => 'Yes'\nprint(file_name_check(\"1example.dll\"))  # => 'No' (the name should start with a latin alphapet letter)",
        "grade-163": {
            "execution": 0
        }
    },
    {
        "intent": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\n",
        "snippet": [
            "    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n"
        ],
        "simplified": "Given the lengths of the three sides of a triangle. Return True if the three sides form a right-angled triangle, False otherwise. A right-angled triangle is a triangle in which one angle is right angle or 90 degree.",
        "task_id": "157",
        "197": "# write your code here\n    return True",
        "grade-197": {
            "execution": 0
        },
        "30": "arr = sorted([a, b, c])\n    return arr[0] ** 2 + arr[1] ** 2 == arr[2] ** 2\n\n\n@slow",
        "grade-30": {
            "execution": 0
        },
        "6": "triangle_sides = sorted([a, b, c])\n    return triangle_sides[2] ** 2 == triangle_sides[0] ** 2 + triangle_sides[1] ** 2",
        "grade-6": {
            "execution": 1
        },
        "76": "if a**2 + b**2 == c**2:\n        return True\n    elif b**2 + c**2 == a**2:\n        return True\n    elif a**2 + c**2 == b**2:\n        return True\n    else:\n        return False",
        "grade-76": {
            "execution": 1
        },
        "66": "return (a**2+b**2==c**2 or a**2+c**2==b**2 or b**2+c**2==a**2)",
        "grade-66": {
            "execution": 1
        },
        "61": "return abs(a**2 + b**2 - c**2) < 1e-9 or abs(a**2 + c**2 - b**2) < 1e-9 or abs(b**2 + c**2 - a**2) < 1e-9",
        "grade-61": {
            "execution": 1
        },
        "37": "if a <= 0 or b <= 0 or c <= 0:\n        return False\n    else:\n        if c**2 == a**2 + b**2:\n            return True\n        elif a**2 == b**2 + c**2:\n            return True\n        elif b**2 == a**2 + c**2:\n            return True\n        else:\n            return False",
        "grade-37": {
            "execution": 1
        },
        "27": "sides = sorted([a, b, c])\n    if sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]:\n        return True\n    return False",
        "grade-27": {
            "execution": 1
        },
        "165": "return  a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2",
        "grade-165": {
            "execution": 1
        },
        "23": "if is_triangle(a, b, c):\n        if a**2 + b**2 == c**2:\n            return True\n        elif a**2 + c**2 == b**2:\n            return True\n        elif b**2 + c**2 == a**2:\n            return True\n        else:\n            return False\n    else:\n        return False",
        "grade-23": {
            "execution": 0
        },
        "178": "# Your code here:\n\n    ls = [a, b, c]\n    ls.sort()\n    if ls[0]**2 + ls[1]**2 == ls[2]**2:\n        return True\n    else:\n        return False",
        "grade-178": {
            "execution": 1
        },
        "126": "triangle_sides = [a, b, c]\n    triangle_sides.sort()\n    if triangle_sides[0] ** 2 + triangle_sides[1] ** 2 == triangle_sides[2] ** 2:\n        return True\n    else:\n        return False",
        "grade-126": {
            "execution": 1
        },
        "8": "return (a**2 + b**2 == c**2) or (a**2 + c**2 == b**2) or (b**2 + c**2 == a**2)",
        "grade-8": {
            "execution": 1
        },
        "7": "a_sqr = a ** 2\n    b_sqr = b ** 2\n    c_sqr = c ** 2\n    return c_sqr == a_sqr + b_sqr or b_sqr == a_sqr + c_sqr or a_sqr == b_sqr + c_sqr",
        "grade-7": {
            "execution": 1
        },
        "24": "max_side = max(a, b, c)\n    # Length of the two smallest sides\n    s = (a + b + c) - max_side\n    # Length of the hypotenuse\n    h = max_side\n    return s**2 + h**2 == h**2",
        "grade-24": {
            "execution": 0
        },
        "59": "if a > b and a > c:\n        return a ** 2 == b ** 2 + c ** 2\n    elif b > a and b > c:\n        return b ** 2 == a ** 2 + c ** 2\n    else:\n        return c ** 2 == a ** 2 + b ** 2",
        "grade-59": {
            "execution": 1
        },
        "63": "if (a**2 + b**2 == c**2) or (a**2 + c**2 == b**2) or (b**2 + c**2 == a**2):\n        return True\n    else:\n        return False",
        "grade-63": {
            "execution": 1
        },
        "151": "if a ** 2 + b ** 2 == c ** 2:\n        return True\n    elif a ** 2 + c ** 2 == b ** 2:\n        return True\n    elif b ** 2 + c ** 2 == a ** 2:\n        return True\n    else:\n        return False\nright_angle_triangle(3, 4, 5)",
        "grade-151": {
            "execution": 1
        },
        "183": "return max(a, b, c)**2 == a**2 + b**2 + c**2 - max(a, b, c)**2",
        "grade-183": {
            "execution": 1
        },
        "169": "if c ** 2 == a ** 2 + b ** 2:\n        return True\n    else:\n        return False",
        "grade-169": {
            "execution": 0
        }
    },
    {
        "intent": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n",
        "snippet": [
            "    return [x for x in values if isinstance(x, int)]\n"
        ],
        "simplified": "Filter given list of any python values only for integers",
        "task_id": "22",
        "100": "int_list = [x for x in values if isinstance(x, int)]\n    return int_list",
        "grade-100": {
            "execution": 1
        },
        "7": "return [i for i in values if isinstance(i, int)]",
        "grade-7": {
            "execution": 1
        },
        "1": "return [value for value in values if isinstance(value, int)]",
        "grade-1": {
            "execution": 1
        },
        "124": "return [value for value in values if isinstance(value, int)]",
        "grade-124": {
            "execution": 1
        },
        "33": "return [num for num in values if isinstance(num, int)]",
        "grade-33": {
            "execution": 1
        },
        "30": "# The solution we are looking for\n    return [value for value in values if isinstance(value, int)]",
        "grade-30": {
            "execution": 1
        },
        "22": "return [x for x in values if isinstance(x, int)]",
        "grade-22": {
            "execution": 1
        },
        "8": "pass",
        "grade-8": {
            "execution": 0
        },
        "179": "return [x for x in values if isinstance(x, int)]\n    \n    \nfilter_integers([1, 2, 3, 'abc', {}, []])",
        "grade-179": {
            "execution": 1
        },
        "6": "return [x for x in values if isinstance(x, int)]",
        "grade-6": {
            "execution": 1
        },
        "108": "# TODO: Implement me\n    return [i for i in values if isinstance(i, int)]",
        "grade-108": {
            "execution": 1
        },
        "159": "return [\n        value for value in values\n        if isinstance(value, int)\n    ]",
        "grade-159": {
            "execution": 1
        },
        "76": "return [int(value) for value in values if isinstance(value, int)]",
        "grade-76": {
            "execution": 1
        },
        "5": "pass",
        "grade-5": {
            "execution": 0
        },
        "88": "return [item for item in values if isinstance(item, int)]",
        "grade-88": {
            "execution": 1
        },
        "59": "# filtering only for integers\n    return [value for value in values if isinstance(value, int)]",
        "grade-59": {
            "execution": 1
        },
        "2": "return [val for val in values if isinstance(val, int)]",
        "grade-2": {
            "execution": 1
        },
        "184": "return [int(v) for v in values if isinstance(v, int)]",
        "grade-184": {
            "execution": 1
        },
        "134": "return [i for i in values if isinstance(i, int)]",
        "grade-134": {
            "execution": 1
        },
        "21": "return [x for x in values if isinstance(x, int)]",
        "grade-21": {
            "execution": 1
        }
    },
    {
        "intent": "def cycpattern_check(a: str, b: str) -> bool:\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n",
        "snippet": [
            "    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n"
        ],
        "simplified": "You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word",
        "task_id": "154",
        "192": "if a.__contains__(b):\n        return True\n    elif a.__contains__(b[1:] + b[0]):\n        return True\n    elif a.__contains__(b[2:] + b[0:2]):\n        return True\n    elif a.__contains__(b[3:] + b[0:3]):\n        return True\n    else:\n        return False",
        "grade-192": {
            "execution": 1
        },
        "30": "# your code here\n    arr = []\n    for i in range(0, len(b)):\n        a_rot = b[i:] + b[:i]\n        arr.append(a_rot)\n    if any(x in a for x in arr):\n        return True\n    else:\n        return False",
        "grade-30": {
            "execution": 1
        },
        "6": "b = b * 2\n    if a in b:\n        return True\n    else:\n        return False\n\n\n@counter",
        "grade-6": {
            "execution": 0
        },
        "80": "return a in b + b",
        "grade-80": {
            "execution": 0
        },
        "70": "length = len(b)\n    i = 0\n    while i < length:\n        b = b[1:] + b[0]\n        if b in a:\n            return True\n        i += 1\n    return False",
        "grade-70": {
            "execution": 1
        },
        "64": "if not a or not b:\n        return False\n    a_list = list(a)\n    for i in range(len(a_list)):\n        a_list.append(a_list.pop(0))\n        if \"\".join(a_list).find(b) != -1:\n            return True\n    return False",
        "grade-64": {
            "execution": 0
        },
        "38": "if b in a:\n        return True\n    for i in range(len(b)):\n        if b[i:]+b[:i] in a:\n            return True\n    return False",
        "grade-38": {
            "execution": 1
        },
        "28": "return a.find(b) != -1",
        "grade-28": {
            "execution": 0
        },
        "167": "return False",
        "grade-167": {
            "execution": 0
        },
        "24": "if len(a) < len(b):\n        return False\n    if len(a) == len(b):\n        return a == b\n    b2 = b + b\n    return b in a or b2 in a",
        "grade-24": {
            "execution": 0
        },
        "179": "return a in b*2",
        "grade-179": {
            "execution": 0
        },
        "127": "# note: % is the modulo operator, it is the same as remainder. (5 % 2 == 1, 10 % 3 == 1)\n    # to rotate a string, we can 'slice' the first character and append it to the end of the string.\n    # a = a[1:] + a[0]\n    a_remainder = a[1:] + a[0]\n    for i in range(len(a)):\n        if b in a_remainder:\n            return True\n        a_remainder = a_remainder[1:] + a_remainder[0]\n    return False",
        "grade-127": {
            "execution": 0
        },
        "8": "a = list(a)\n    b = list(b)\n    len_b = len(b)\n    tmp = []\n    flag = False\n    while len(a) >= len_b:\n        tmp.clear()\n        for i in range(len_b):\n            tmp.append(a[i])\n        if tmp == b:\n            flag = True\n            break\n        a.append(a.pop(0))\n    return flag",
        "grade-8": {
            "execution": 0
        },
        "7": "if len(a) != len(b):\n        return False\n    return b in (a * 2)",
        "grade-7": {
            "execution": 0
        },
        "25": "if len(a) != len(b):\n        return False\n    b *= 2\n    for i in range(len(b) // 2):\n        if b[i:i + len(a)] in a:\n            return True\n    return False\n\n\n@pytest.mark.parametrize(\"a, b, result\", [\n    (\"abcd\", \"abd\", False),\n    (\"hello\", \"ell\", True),\n    (\"whassup\", \"psus\", False),\n    (\"abab\", \"baa\", True),\n    (\"efef\", \"eeff\", False),\n    (\"himenss\", \"simen\", True),\n])",
        "grade-25": {
            "execution": 0
        },
        "61": "return pattern_check(a, b + b)",
        "grade-61": {
            "execution": 0
        },
        "66": "if a.find(b) >= 0:\n        return True\n    else:\n        return cycpattern_check(a, b[1:] + b[0])",
        "grade-66": {
            "execution": 0
        },
        "155": "if a in b:\n        return True\n    else:\n        if a not in b:\n            return False\n        else:\n            if b not in a:\n                return False\n            else:\n                if b in a:\n                    return True",
        "grade-155": {
            "execution": 0
        },
        "182": "first = str(a)\n    second = str(b)\n    if len(second) > len(first):\n        return False\n    if len(second) == len(first):\n        return find(first, second)\n    else:\n        if find(first, second):\n            return True\n        else:\n            return cycpattern_check(first, second[1:] + second[0])",
        "grade-182": {
            "execution": 0
        },
        "171": "if len(a) < len(b):\n        return False\n    if len(a) == len(b):\n        return True if a == b else False\n    res = False\n    for n in range(1, len(b)):\n        if b[n:] + b[:n] in a:\n            res = True\n            break\n    return res\ncycpattern_check(\"abcd\",\"abd\") #=> False\n\ncycpattern_check(\"hello\",\"ell\") #=> True\n\ncycpattern_check(\"whassup\",\"psus\") #=> False\n\ncycpattern_check(\"abab\",\"baa\") #=> True\n\ncycpattern_check(\"efef\",\"eeff\") #=> False\n\ncycpattern_check(\"himenss\",\"simen\") #=> True\n\ncycpattern_check(\"qwerty\",\"qwerty\") #=> True\n\ncycpattern_check(\"qwerty\",\"qwerty\") #=> True\n\ncycpattern_check(\"abcabcabcabc\",\"abcd\") #=> True\n\ncycpattern_check(\"abcabcabcabc\",\"abcabcabcabc\") #=> True\n\ncycpattern_check(\"abcd\",\"ef\") #=> False\n\ncycpattern_check(\"z\",\"az\") #=> True\n\ncycpattern_check(\"abcd\",\"bcdef\") #=> False\n\ncycpattern_check(\"yz\",\"yzxyz\") #=> True\n\ncycpattern_check(\"abcabcabcabc\",\"abcabcabcabcabcabcabcabc\") #=> False\n\ncycpattern_check(\"abcabcabcabc\",\"ab\") #=> True\n\ncycpattern_check(\"abcabcabcabc\",\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",
        "grade-171": {
            "execution": 0
        }
    },
    {
        "intent": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n",
        "snippet": [
            "    return len(set(string.lower()))\n"
        ],
        "simplified": "Given a string, find out how many distinct characters (regardless of case) does it consist of",
        "task_id": "16",
        "127": "distinct_characters = set()\n    for character in string:\n        distinct_characters.add(character.lower())\n    return len(distinct_characters)",
        "grade-127": {
            "execution": 1
        },
        "19": "pass",
        "grade-19": {
            "execution": 0
        },
        "3": "string = string.upper()\n    distinct_characters = []\n    for letter in string:\n        if letter not in distinct_characters:\n            distinct_characters.append(letter)\n    return len(distinct_characters)",
        "grade-3": {
            "execution": 1
        },
        "160": "character_set = set()\n    for letter in string:\n        character_set.add(letter.lower())\n    return len(character_set)",
        "grade-160": {
            "execution": 1
        },
        "47": "# TODO: complete this function\n    dic={}\n    count=0\n    for i in string:\n        if i.lower() not in dic:\n            dic[i.lower()]=1\n            count+=1\n    return count",
        "grade-47": {
            "execution": 1
        },
        "43": "res = set()\n    for character in string:\n        res.add(character.lower())\n    return len(res)",
        "grade-43": {
            "execution": 1
        },
        "39": "distinct_characters = set()\n    for char in string:\n        distinct_characters.add(char.lower())\n    return len(distinct_characters)\ncount_distinct_characters('Jerry')",
        "grade-39": {
            "execution": 1
        },
        "22": "return len(set(map(lambda ch: ch.lower(), string)))\n\n\n@doctest_unit_tests(count_distinct_characters)",
        "grade-22": {
            "execution": 0
        },
        "18": "char_set = set()\n    for char in string:\n        char_set.add(char.lower())\n    return len(char_set)",
        "grade-18": {
            "execution": 1
        },
        "136": "# ToDo: finish implementation",
        "grade-136": {
            "execution": 0
        },
        "105": "return len(set(string.lower()))\n    \nassert count_distinct_characters('xyzXYZ') == 3\nassert count_distinct_characters('Jerry') == 4",
        "grade-105": {
            "execution": 1
        },
        "16": "...",
        "grade-16": {
            "execution": 0
        },
        "118": "# TODO\n    count_distinct_characters = set(string.lower())\n    return len(count_distinct_characters)",
        "grade-118": {
            "execution": 1
        },
        "77": "distinct_characters = set()\n    for character in string:\n        distinct_characters.add(character.lower())\n    return len(distinct_characters)",
        "grade-77": {
            "execution": 1
        },
        "4": "distinct_characters = set()\n    for c in string:\n        if c.isalpha():\n            distinct_characters.add(c.lower())\n    return len(distinct_characters)",
        "grade-4": {
            "execution": 0
        },
        "38": "string = string.lower()\n    return len(set(string))",
        "grade-38": {
            "execution": 1
        },
        "41": "# the set() function returns a set of characters of a string\n    string = set(string)\n    return len(string)",
        "grade-41": {
            "execution": 0
        },
        "99": "str_lower = string.lower()\n    return len(set(str_lower))",
        "grade-99": {
            "execution": 1
        },
        "122": "char_to_frequency = {}\n    for char in string:\n        char_to_frequency[char.lower()] = char_to_frequency.get(char.lower(), 0) + 1\n    return len(char_to_frequency)",
        "grade-122": {
            "execution": 1
        },
        "107": "# PUT YOUR CODE HERE",
        "grade-107": {
            "execution": 0
        }
    },
    {
        "intent": "from typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    \"\"\"\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    \"\"\"\n",
        "snippet": [
            "    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n"
        ],
        "simplified": "Write a function that accepts two lists of strings and returns the list that has total number of chars in the all strings of the list less than the other list. if the two lists have the same number of chars, return the first list.",
        "task_id": "74",
        "175": "if len(lst1) > len(lst2):\n        return lst2\n    elif len(lst1) < len(lst2):\n        return lst1\n    else:\n        return lst1\n\nassert total_match([], []) == []\nassert total_match(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\nassert total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\nassert total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\nassert total_match(['4'], ['1', '2', '3', '4', '5']) == ['4']",
        "grade-175": {
            "execution": 0
        },
        "29": "if len(lst1) == 0 and len(lst2) == 0:\n        return []\n    elif len(lst1) == 0:\n        return lst2\n    elif len(lst2) == 0:\n        return lst1\n    else:\n        if len(lst1) > len(lst2):\n            return lst2\n        elif len(lst1) < len(lst2):\n            return lst1\n        else:\n            count_lst1 = sum([len(i) for i in lst1])\n            count_lst2 = sum([len(i) for i in lst2])\n            if count_lst1 > count_lst2:\n                return lst2\n            elif count_lst1 < count_lst2:\n                return lst1\n            else:\n                return lst1\n\nassert total_match([], []) == []\nassert total_match(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\nassert total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\nassert total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\nassert total_match(['4'], ['1', '2', '3', '4', '5']) == ['4']\nprint('All tests passed')",
        "grade-29": {
            "execution": 0
        },
        "6": "if len(lst1) == 0 and len(lst2) == 0:\n        return []\n    lst1_len = sum([len(s) for s in lst1])\n    lst2_len = sum([len(s) for s in lst2])\n    if lst1_len < lst2_len:\n        return lst1\n    elif lst1_len > lst2_len:\n        return lst2\n    else:\n        return lst1",
        "grade-6": {
            "execution": 1
        },
        "73": "if not lst1 and not lst2:\n        return []\n    elif len(lst1) > len(lst2):\n        return lst2\n    elif len(lst1) < len(lst2):\n        return lst1\n    else:\n        return lst1\n\nprint(total_match(['hi', 'admin'], ['hI', 'Hi']))",
        "grade-73": {
            "execution": 0
        },
        "65": "str1 = \"\".join(lst1)\n    str2 = \"\".join(lst2)\n    if len(str1) == len(str2):\n        return lst1\n    if len(str1) < len(str2):\n        return lst1\n    else:\n        return lst2\n\nassert total_match([], []) == []\nassert total_match(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\nassert total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\nassert total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\nassert total_match(['4'], ['1', '2', '3', '4', '5']) == ['4']\nprint('ok')",
        "grade-65": {
            "execution": 1
        },
        "58": "total_list1 = 0\n    total_list2 = 0\n    for i in lst1:\n        total_list1 += len(i)\n    for j in lst2:\n        total_list2 += len(j)\n    if total_list1 < total_list2:\n        return lst1\n    elif total_list1 > total_list2:\n        return lst2\n    else:\n        return lst1\n\nprint(total_match(['hi', 'admin'], ['hI', 'Hi']))",
        "grade-58": {
            "execution": 1
        },
        "36": "first_list_total = sum([len(word) for word in lst1])\n    second_list_total = sum([len(word) for word in lst2])\n    if first_list_total < second_list_total:\n        return lst1\n    elif second_list_total < first_list_total:\n        return lst2\n    else:\n        return lst1\n\nprint(total_match(['hi', 'admin'], ['hI', 'Hi']))\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']))\nprint(total_match(['hi', 'admin'], ['hI', 'hi', 'hi']))\nprint(total_match(['4'], ['1', '2', '3', '4', '5']))",
        "grade-36": {
            "execution": 1
        },
        "27": "if sum(len(x) for x in lst1) > sum(len(x) for x in lst2):\n        return lst2\n    else:\n        return lst1",
        "grade-27": {
            "execution": 1
        },
        "186": "if sum(len(x) for x in lst1) > sum(len(x) for x in lst2):\n        return lst2\n    elif sum(len(x) for x in lst1) < sum(len(x) for x in lst2):\n        return lst1\n    else:\n        return lst1\n\n\ntotal_match(['4'], ['1', '2', '3', '4', '5'])",
        "grade-186": {
            "execution": 1
        },
        "150": "count1 = 0\n    count2 = 0\n    for s in lst1:\n        count1 += len(s)\n    for s in lst2:\n        count2 += len(s)\n    if count1 < count2:\n        return lst1\n    elif count2 < count1:\n        return lst2\n    else:\n        return lst1\n\nassert total_match([], []) == []\nassert total_match(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\nassert total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\nassert total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\nassert total_match(['4'], ['1', '2', '3', '4', '5']) == ['4']",
        "grade-150": {
            "execution": 1
        },
        "23": "match = lst1 if sum(len(e) for e in lst1) <= sum(len(e) for e in lst2) else lst2\n    return match\n\nassert total_match([], []) == []\nassert total_match(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\nassert total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\nassert total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\nassert total_match(['4'], ['1', '2', '3', '4', '5']) == ['4']\nprint('Success')",
        "grade-23": {
            "execution": 1
        },
        "163": "if sum(len(word) for word in lst1) < sum(len(word) for word in lst2):\n        return lst1\n    elif sum(len(word) for word in lst1) > sum(len(word) for word in lst2):\n        return lst2\n    else:\n        return lst1",
        "grade-163": {
            "execution": 1
        },
        "115": "if not lst1 and not lst2:\n        return []\n    if len(lst1) > len(lst2):\n        return lst2\n    if len(lst1) < len(lst2):\n        return lst1\n    return lst1",
        "grade-115": {
            "execution": 0
        },
        "8": "sum_lst1 = sum([len(i) for i in lst1])\n    sum_lst2 = sum([len(i) for i in lst2])\n    if sum_lst1 == sum_lst2:\n        return lst1\n    elif sum_lst1 < sum_lst2:\n        return lst1\n    else:\n        return lst2",
        "grade-8": {
            "execution": 1
        },
        "7": "pass\n\nimport unittest",
        "grade-7": {
            "execution": 0
        },
        "24": "pass\n\nprint(total_match(['4'], ['1', '2', '3', '4', '5']))",
        "grade-24": {
            "execution": 0
        },
        "56": "len1 = sum([len(a) for a in lst1])\n    len2 = sum([len(a) for a in lst2])\n    if len1 < len2:\n        return lst1\n    elif len2 < len1:\n        return lst2\n    else:\n        return lst1\n\nassert total_match([], []) == []\nassert total_match(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\nassert total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\nassert total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\nassert total_match(['4'], ['1', '2', '3', '4', '5']) == ['4']\nprint('All tests passed!')",
        "grade-56": {
            "execution": 1
        },
        "60": "dict1 = collections.Counter()\n    dict2 = collections.Counter()\n    #print(lst1, lst2)\n    for str1 in lst1:\n        for c in str1:\n            dict1[c] += 1\n    for str2 in lst2:\n        for c in str2:\n            dict2[c] += 1\n    lst1_total = sum(dict1.values())\n    lst2_total = sum(dict2.values())\n    #print(lst1_total, lst2_total)\n    if lst1_total > lst2_total:\n        return lst2\n    elif lst1_total < lst2_total:\n        return lst1\n    else:\n        return lst1",
        "grade-60": {
            "execution": 0
        },
        "139": "lst1_count = 0\n    lst2_count = 0\n    for i in lst1:\n        lst1_count += len(i)\n    for i in lst2:\n        lst2_count += len(i)\n    if lst1_count < lst2_count:\n        return lst1\n    elif lst1_count > lst2_count:\n        return lst2\n    else:\n        return lst1",
        "grade-139": {
            "execution": 1
        },
        "166": "total1 = sum([len(x) for x in lst1])\n    total2 = sum([len(x) for x in lst2])\n    if total1 == total2:\n        return lst1\n    if total1 < total2:\n        return lst1\n    else:\n        return lst2\n\nprint(total_match(['4'], ['1', '2', '3', '4', '5']))",
        "grade-166": {
            "execution": 1
        }
    },
    {
        "intent": "from typing import Tuple\n\ndef intersection(interval1: Tuple[int, int], interval2: Tuple[int, int]) -> str:\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n",
        "snippet": [
            "    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n"
        ],
        "simplified": "You are given two intervals, where each interval is a pair of integers. For example, interval = (start, end) = (1, 2). The given intervals are closed which means that the interval (start, end) includes both start and end. For each given interval, it is assumed that its start is less or equal its end. Your task is to determine whether the length of intersection of these two intervals is a prime number. Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3) which its length is 1, which not a prime number. If the length of the intersection is a prime number, return \"YES\", otherwise, return \"NO\". If the two intervals don't intersect, return \"NO\".",
        "task_id": "127",
        "164": "start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start <= end:\n        length = end - start + 1\n        if length == 1:\n            return \"NO\"\n        elif length == 2:\n            return \"YES\"\n        else:\n            for i in range(2, length - 1):\n                if length % i == 0:\n                    return \"NO\"\n            return \"YES\"\n    else:\n        return \"NO\"",
        "grade-164": {
            "execution": 0
        },
        "29": "start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    if start == end:\n        return \"YES\" if is_prime(start) else \"NO\"\n    if start < end:\n        return \"YES\" if is_prime(end - start) else \"NO\"",
        "grade-29": {
            "execution": 0
        },
        "6": "start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    diff = end - start\n    if diff < 0:\n        return \"NO\"\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    if diff in primes:\n        return \"YES\"\n    return \"NO\"",
        "grade-6": {
            "execution": 1
        },
        "190": "start, end = max(interval1[0], interval2[0]), min(interval1[1], interval2[1])\n    if start >= end:\n        return \"NO\"\n    return \"YES\" if is_prime(end - start) else \"NO\"",
        "grade-190": {
            "execution": 0
        },
        "71": "# max(interval1[0], interval2[0]) <= min(interval1[1], interval2[1]) ?\n    # this means the intervals intersect\n    # now we need to calculate the intersection length\n    if max(interval1[0], interval2[0]) <= min(interval1[1], interval2[1]):\n        interval_intersection = (max(interval1[0], interval2[0]),\n                                 min(interval1[1], interval2[1]))\n        print(interval_intersection)\n        if is_prime(interval_intersection[1] - interval_intersection[0] + 1):\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"",
        "grade-71": {
            "execution": 0
        },
        "63": "start_intersection = max(interval1[0], interval2[0])\n    end_intersection = min(interval1[1], interval2[1])\n    if start_intersection > end_intersection:\n        return \"NO\"\n    return \"YES\" if is_prime(end_intersection - start_intersection + 1) else \"NO\"",
        "grade-63": {
            "execution": 0
        },
        "58": "if interval1[1] >= interval2[0] and interval2[1] >= interval1[0]:\n        start = max(interval1[0], interval2[0])\n        end = min(interval1[1], interval2[1])\n        length = end - start + 1\n        #if length > 1:\n        #    for i in range(2, length):\n        #        if length % i == 0:\n        #            return \"NO\"\n        #    return \"YES\"\n        #else:\n        #    return \"NO\"\n        return \"YES\" if length > 1 and all(length % i for i in range(2, length)) else \"NO\"\n    else:\n        return \"NO\"",
        "grade-58": {
            "execution": 0
        },
        "36": "start_intersection = max(interval1[0], interval2[0])\n    end_intersection = min(interval1[1], interval2[1])\n    if start_intersection <= end_intersection:\n        for number in range(2, end_intersection - start_intersection + 1):\n            if (end_intersection - start_intersection + 1) % number == 0:\n                return \"NO\"\n        return \"YES\"\n    return \"NO\"",
        "grade-36": {
            "execution": 0
        },
        "189": "import math\n    def is_prime(x):\n        if x < 2:\n            return False\n        return all(x % i for i in range(2, int(math.sqrt(x)) + 1))\n\n    a, b = interval1\n    c, d = interval2\n    if a <= c <= b <= d:\n        return \"YES\" if is_prime(b - c + 1) else \"NO\"\n    elif c <= a <= d <= b:\n        return \"YES\" if is_prime(d - a + 1) else \"NO\"\n    elif c <= a <= b <= d:\n        return \"YES\" if is_prime(b - a + 1) else \"NO\"\n    elif a <= c <= d <= b:\n        return \"YES\" if is_prime(d - c + 1) else \"NO\"\n    else:\n        return \"NO\"\n\nprint(intersection((1, 2), (2, 3)))\nprint(intersection((-1, 1), (0, 4)))\nprint(intersection((-3, -1), (-5, 5)))",
        "grade-189": {
            "execution": 0
        },
        "27": "if max(interval1[0], interval2[0]) <= min(interval1[1], interval2[1]):\n        return 'YES' if is_prime(min(interval1[1], interval2[1]) - max(interval1[0], interval2[0])) else 'NO'\n    return 'NO'",
        "grade-27": {
            "execution": 0
        },
        "174": "a, b = interval1\n    c, d = interval2\n    intersection = (c-a, d-b)\n    if a == c or b == d:\n        return \"NO\"\n    if intersection[0] < 0 or intersection[1] < 0:\n        return \"NO\"\n    print(intersection)\n    if is_prime(intersection[0]) and is_prime(intersection[1]):\n        return \"YES\"\n    return \"NO\"",
        "grade-174": {
            "execution": 0
        },
        "140": "a, b = interval1\n    c, d = interval2\n    if not (max(a, c) <= min(b, d)):\n        return \"NO\"\n    intersection_length = min(b, d) - max(a, c) + 1\n    return 'YES' if is_prime(intersection_length) else 'NO'",
        "grade-140": {
            "execution": 0
        },
        "22": "start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    else:\n        return \"YES\" if is_prime(end - start + 1) else \"NO\"",
        "grade-22": {
            "execution": 0
        },
        "152": "for i in range(max(interval1[0], interval2[0]), min(interval1[1], interval2[1])+1):\n        if i > 1:\n            for j in range(2, i):\n                if i % j == 0:\n                    return \"NO\"\n    return \"YES\"\n\nprint(intersection((1, 2), (2, 3)))\nprint(intersection((-1, 1), (0, 4)))\nprint(intersection((-3, -1), (-5, 5)))",
        "grade-152": {
            "execution": 0
        },
        "109": "start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if end <= start:\n        return \"NO\"\n    if is_prime(end - start + 1):\n        return \"YES\"\n    return \"NO\"",
        "grade-109": {
            "execution": 0
        },
        "8": "if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n        return \"NO\"\n    if interval1[0] < interval2[0]:\n        start = interval2[0]\n    else:\n        start = interval1[0]\n    if interval1[1] < interval2[1]:\n        end = interval1[1]\n    else:\n        end = interval2[1]\n    if end - start == 0:\n        return \"NO\"\n    for i in range(2, (end - start) // 2 + 1):\n        if (end - start) % i == 0:\n            return \"NO\"\n    return \"YES\"",
        "grade-8": {
            "execution": 0
        },
        "7": "start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start + 1\n    if length > 2 and not any(length % i == 0 for i in range(2, length)):\n        return \"YES\"\n    return \"NO\"",
        "grade-7": {
            "execution": 1
        },
        "23": "start_start = min(interval1[0], interval2[0])\n    start_end = max(interval1[0], interval2[0])\n    end_start = min(interval1[1], interval2[1])\n    end_end = max(interval1[1], interval2[1])\n    intersection_len = abs(start_start - start_end) + abs(end_start - end_end)\n    if intersection_len <= 1:\n        return \"NO\"\n    if intersection_len == 2:\n        return \"YES\"\n    for i in range(2, intersection_len):\n        if intersection_len % i == 0:\n            return \"NO\"\n    return \"YES\"",
        "grade-23": {
            "execution": 0
        },
        "56": "# s = slice(interval1[0], interval1[1])\n    # print(s)\n    # print(s.indices(interval2[0]))\n    # print(s.indices(interval2[1]))\n    # print(range(interval1[0], interval1[1]))\n    # print(range(interval2[0], interval2[1]))\n    if interval1[0] < interval2[0]:\n        upper = interval1[1]\n        lower = interval2[0]\n    else:\n        upper = interval2[1]\n        lower = interval1[0]\n    if lower < upper:\n        diff = upper - lower\n        print(diff)\n        return diff\n    return False",
        "grade-56": {
            "execution": 0
        },
        "60": "# O(1) time and O(1) space\n    if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n        return \"NO\"\n    if interval1[0] < interval2[0]:\n        start = interval2[0]\n    else:\n        start = interval1[0]\n    if interval1[1] < interval2[1]:\n        end = interval1[1]\n    else:\n        end = interval2[1]\n    if start > end:\n        return \"NO\"\n    if start == end:\n        if start == 1:\n            return \"NO\"\n        return \"YES\"\n    return \"NO\"",
        "grade-60": {
            "execution": 0
        }
    },
    {
        "intent": "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n",
        "snippet": [
            "    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n"
        ],
        "simplified": "The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). Please write a function to efficiently compute the n-th element of the fib4 number sequence. Do not use recursion.",
        "task_id": "46",
        "182": "assert n >= 0\n    if n < 4:\n        return 2*(n+1)//3\n    fibs = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        fibs.append(fibs[-1] + fibs[-2] + fibs[-3] + fibs[-4])\n    return fibs[-1]",
        "grade-182": {
            "execution": 1
        },
        "29": "def fib_nums(n):\n        #return a list of fib_nums\n        fib_nums = [0, 0, 2, 0]\n        if n == 0:\n            return [0]\n        elif n == 1:\n            return [0, 0]\n        elif n == 2:\n            return [0, 0, 2]\n        elif n == 3:\n            return [0, 0, 2, 0]\n        else:\n            for i in range(4, n+1):\n                fib_nums.append(fib_nums[i-1] + fib_nums[i-2] + fib_nums[i-3] + fib_nums[i-4])\n            return fib_nums\n    return fib_nums(n)[n]",
        "grade-29": {
            "execution": 1
        },
        "6": "pass",
        "grade-6": {
            "execution": 0
        },
        "78": "### YOUR CODE HERE ###\n    n_lst = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        n_lst.append(n_lst[i-1] + n_lst[i-2] + n_lst[i-3] + n_lst[i-4])\n    return n_lst[n]\n\nprint(fib4(7))",
        "grade-78": {
            "execution": 1
        },
        "69": "if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    if n == 4:\n        return 2\n    else:\n        fib_num = [0, 0, 2, 0, 2]\n        for i in range(4, n):\n            fib_num.append(fib_num[i - 1] + fib_num[i - 2] + fib_num[i - 3] + fib_num[i - 4])\n        return fib_num[n - 1]",
        "grade-69": {
            "execution": 0
        },
        "63": "lst = [0, 0, 2, 0]\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        for i in range(3, n):\n            total = lst[-1] + lst[-2] + lst[-3] + lst[-4]\n            lst.append(total)\n        return lst[-1]",
        "grade-63": {
            "execution": 1
        },
        "37": "# TODO: 3 lines\n    # Hint: to compute the n-th element of the fib4 number sequence, you'll need to compute\n    # the n-th element of the Fibonacci number sequence (fib(n)) and the (n-1)-th element\n    # of the Fibonacci number sequence (fib(n-1)).\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n    pass",
        "grade-37": {
            "execution": 1
        },
        "27": "a, b, c, d = 0, 0, 2, 0\n    for _ in range(3, n):\n        a, b, c, d = b, c, d, a + b + c + d\n    return a + b + c + d",
        "grade-27": {
            "execution": 0
        },
        "196": "#TODO 1: write your code here\n    \n    \n    \n    \n    \n    \n    return 0",
        "grade-196": {
            "execution": 0
        },
        "154": "# fill in your code here\n    i = 0\n    if n <= 0:\n        return 0\n    elif n <= 2:\n        return n\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 1, 2, 0\n        while i < n - 4:\n            a, b, c, d = b, c, d, a + b + c + d\n            i += 1\n        return d",
        "grade-154": {
            "execution": 0
        },
        "23": "if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n + 1):\n        e = a + b + c + d\n        a, b, c, d = b, c, d, e\n    return e",
        "grade-23": {
            "execution": 1
        },
        "166": "if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n + 1):\n        d, c, b, a = a + b + c + d, d, c, b\n    return a + b + c + d",
        "grade-166": {
            "execution": 0
        },
        "121": "first, second, third, fourth = 0, 0, 2, 0\n    for i in range(n):\n        first, second, third, fourth = second, third, fourth, first + second + third + fourth\n    return first",
        "grade-121": {
            "execution": 1
        },
        "8": "s = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        s.append(s[i - 1] + s[i - 2] + s[i - 3] + s[i - 4])\n    return s[n]",
        "grade-8": {
            "execution": 1
        },
        "7": "if n <= 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        x, y, z, w = 0, 0, 2, 0\n        for i in range(n-3):\n            x, y, z, w = y, z, w, x + y + z + w\n        return w",
        "grade-7": {
            "execution": 1
        },
        "24": "assert n >= 0\n    if n < 4:\n        return n * 2\n    seq = [0, 0, 2, 0]\n    for _ in range(n - 3):\n        seq.append(sum(seq[-4:]))\n    return seq[-1]",
        "grade-24": {
            "execution": 1
        },
        "61": "if n <= 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    e = 0\n    for i in range(n-3):\n        e = d + c + b + a\n        a = b\n        b = c\n        c = d\n        d = e\n    return e",
        "grade-61": {
            "execution": 1
        },
        "66": "if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n        d = 0\n        i = 4\n        while i <= n:\n            i += 1\n            a, b, c, d = b, c, d, a + b + c + d\n        return d",
        "grade-66": {
            "execution": 1
        },
        "144": "if n < 0:\n        raise ValueError(\"fibonacci number is only defined for n >= 0\")\n    result = []\n    for x in range(n + 1):\n        if x <= 3:\n            result.append(0)\n        else:\n            result.append(result[x - 1] + result[x - 2] + result[x - 3] + result[x - 4])\n    return result[n]",
        "grade-144": {
            "execution": 0
        },
        "169": "fib1 = 0\n    fib2 = 0\n    fib3 = 2\n    fib4 = 0\n    if n < 4:\n        return 0\n    if n == 4:\n        return 2\n    elif n > 4:\n        for i in range(4, n):\n            fib4 = fib1 + fib2 + fib3 + fib4\n            fib1 = fib2\n            fib2 = fib3\n            fib3 = fib4\n        return fib4",
        "grade-169": {
            "execution": 0
        }
    },
    {
        "intent": "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n",
        "snippet": [
            "    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n"
        ],
        "simplified": "Given a string s, count the number of uppercase vowels in even indices.",
        "task_id": "98",
        "172": "# YOUR CODE HERE\n    up_count = 0\n    vowel = ['A', 'E', 'I', 'O', 'U']\n    for x in range(0, len(s), 2):\n        if s[x] in vowel:\n            up_count += 1\n    return up_count",
        "grade-172": {
            "execution": 1
        },
        "29": "vowels = 'AEIOU'\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in vowels:\n            count += 1\n    return count",
        "grade-29": {
            "execution": 1
        },
        "6": "return",
        "grade-6": {
            "execution": 0
        },
        "73": "return 0",
        "grade-73": {
            "execution": 0
        },
        "65": "return sum(1 for i in range(len(s)) if s[i].isupper() and i % 2 == 0)",
        "grade-65": {
            "execution": 0
        },
        "59": "return 0",
        "grade-59": {
            "execution": 0
        },
        "36": "num = 0\n    for i in range(0, len(s), 2):\n        if s[i] in VOWELS:\n            num += 1\n    return num",
        "grade-36": {
            "execution": 0
        },
        "27": "### BEGIN SOLUTION\n    evens = s[::2]\n    vowels = 'AEIOU'\n    return sum(1 for c in evens if c in vowels)\n    ### END SOLUTION\n\nassert count_upper('aBCdEf') == 1\nassert count_upper('abcdefg') == 0\nassert count_upper('dBBE') == 0\nassert count_upper('A') == 1",
        "grade-27": {
            "execution": 1
        },
        "184": "# YOUR CODE HERE",
        "grade-184": {
            "execution": 0
        },
        "146": "# DIFFICULTY 1\n    # HINT: how to check for even indices?\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in ['A', 'E', 'I', 'O', 'U']:\n            count += 1\n    return count",
        "grade-146": {
            "execution": 1
        },
        "23": "evens = s[::2]\n    return sum(char in 'AEIOU' for char in evens)",
        "grade-23": {
            "execution": 1
        },
        "159": "vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count",
        "grade-159": {
            "execution": 1
        },
        "114": "# Your code goes here",
        "grade-114": {
            "execution": 0
        },
        "8": "even_indices = []\n    for i in range(len(s)):\n        if i % 2 == 0:\n            even_indices.append(s[i])\n    count = 0\n    for i in even_indices:\n        if i in ['A', 'E', 'I', 'O', 'U']:\n            count += 1\n    return count\n        \nprint(count_upper('aBCdEf'))\nprint(count_upper('abcdefg'))\nprint(count_upper('dBBE'))",
        "grade-8": {
            "execution": 1
        },
        "7": "uppercase_vowels = 'AEIOU'\n    counter = 0\n    for i in range(len(s)):\n        if s[i] in uppercase_vowels and i % 2 == 0:\n            counter += 1\n    return counter",
        "grade-7": {
            "execution": 1
        },
        "24": "count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in VOWELS:\n            count += 1\n    return count",
        "grade-24": {
            "execution": 0
        },
        "57": "v = 'AEIOU'\n    assert isinstance(s, str)\n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in v:\n            count += 1\n    return count",
        "grade-57": {
            "execution": 1
        },
        "62": "return sum(1 for i in range(len(s)) if i % 2 == 0 and s[i] in 'AEIOU')\n\ncount_upper('aBCdEf')\n\ncount_upper('abcdefg')\n\ncount_upper('dBBE')",
        "grade-62": {
            "execution": 1
        },
        "135": "num_upper = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper():\n            num_upper += 1\n    return num_upper\nassert count_upper('aBCdEf') == 1\nassert count_upper('abcdefg') == 0\nassert count_upper('dBBE') == 0",
        "grade-135": {
            "execution": 0
        },
        "163": "# YOUR CODE HERE",
        "grade-163": {
            "execution": 0
        }
    },
    {
        "intent": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n",
        "snippet": [
            "    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n"
        ],
        "simplified": "Input to this function is a string containing multiple groups of nested parentheses. Your goal is to separate those group into separate strings and return the list of those. Separate groups are balanced (each open brace is properly closed) and not nested within each other Ignore any spaces in the input string.",
        "task_id": "1",
        "34": "groups = []\n    stack = []\n    group = ''\n    for paren in paren_string:\n        if paren == ' ':\n            continue\n        elif paren == '(':\n            if stack:\n                group += paren\n            stack.append(paren)\n        elif paren == ')':\n            if stack:\n                group += paren\n                stack.pop()\n                if not stack:\n                    groups.append(group)\n                    group = ''\n    return groups",
        "grade-34": {
            "execution": 0
        },
        "7": "# ------------------------------------------\n    # TODO: finish this function by implementing the following logic:\n    #   - Ignore any spaces in the input string (via a for loop and an if statement)\n    #   - Create a list to hold the results.\n    #   - The first character must be an open paren. If it is not, return the empty list.\n    #   - Then, loop over each character in the input string, starting at the second character.\n    #   - If you encounter an open paren, keep going.\n    #   - If you encounter a close paren, \n    #       - add the contents of the string up to this point to the result list\n    #       - reset the string\n    #   - If the string is empty after looping over all the characters, return the result list.\n    #   - Otherwise, the input has invalid parentheses. Return the empty list.\n    # ------------------------------------------\n    # Hint 1: Use a for loop, range(len(paren_string)), and an if statement.\n    # Hint 2: You can \"reset\" a string by setting it equal to the empty string ''.\n    # ------------------------------------------\n    str_list = []\n    split_string = \"\"\n    for i in range(len(paren_string)):\n        if paren_string[i] == ' ':\n            continue\n        elif paren_string[i] == '(':\n            continue\n        elif paren_string[i] == ')':\n            str_list.append(split_string)\n            split_string = \"\"\n        else:\n            split_string += paren_string[i]\n    \n    if split_string == \"\":\n        return str_list\n    else:\n        return []\n    # ------------------------------------------\n    # TODO: remove the below line once you have finished\n    return []",
        "grade-7": {
            "execution": 0
        },
        "85": "# check if the string is empty or None\n    if paren_string is None or paren_string == '':\n        return []\n    # check if the string contains open parens and no closing parens\n    if paren_string.count('(') > paren_string.count(')'):\n        raise RuntimeError('Invalid string')\n    # check if the string contains closing parens and no open parens\n    if paren_string.count(')') > paren_string.count('('):\n        raise RuntimeError('Invalid string')\n    # check if the string contains open parens and not properly closed\n    if paren_string.count('(') != paren_string.count(')'):\n        raise RuntimeError('Invalid string')\n    # remove spaces\n    paren_string = paren_string.replace(' ', '')\n    # check if the string contains only parens\n    if paren_string != '' and paren_string.count('(') + paren_string.count(')') != len(paren_string):\n        raise RuntimeError('Invalid string')\n    # check if the string only has one paren\n    if len(paren_string) == 1:\n        raise RuntimeError('Invalid string')\n    # check if the string only has a pair of parens\n    if len(paren_string) == 2:\n        if paren_string == '()':\n            return ['()']\n        else:\n            raise RuntimeError('Invalid string')\n    paren_groups = []\n    result = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            paren_groups.append('(')\n        elif paren_string[i] == ')':\n            if len(paren_groups) == 0:\n                raise RuntimeError('Invalid string')\n            paren_groups.pop()\n            if len(paren_groups) == 0:\n                result.append(paren_string[i-1:i+1])\n    return result\n\nprint(separate_paren_groups('( ) (( )) (( )( ))'))",
        "grade-85": {
            "execution": 0
        },
        "77": "raise NotImplementedError()",
        "grade-77": {
            "execution": 0
        },
        "72": "# TODO - fill in the function body\n    pass",
        "grade-72": {
            "execution": 0
        },
        "43": "# your code here\n    return ...",
        "grade-43": {
            "execution": 0
        },
        "32": "raise NotImplementedError()",
        "grade-32": {
            "execution": 0
        },
        "185": "# YOUR CODE HERE\n    raise NotImplementedError()\n    # End of YOUR CODE",
        "grade-185": {
            "execution": 0
        },
        "28": "return [paren_string[i:j+1] for i, j in zip([0] + [m.end() for m in re.finditer(r'\\s', paren_string)], [m.start() for m in re.finditer(r'\\s', paren_string)] + [len(paren_string)])]\n\nprint(separate_paren_groups('( ) (( )) (( )( ))'))",
        "grade-28": {
            "execution": 0
        },
        "143": "res = []\n    temp = \"\"\n    counter = 0\n    for s in paren_string:\n        if s == \" \":\n            continue\n        temp += s\n        if s == \"(\":\n            counter += 1\n        elif s == \")\":\n            counter -= 1\n        if counter == 0:\n            res.append(temp)\n            temp = \"\"\n    return res",
        "grade-143": {
            "execution": 1
        },
        "9": "paren_stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append(char)\n        elif char == ')':\n            result.append(''.join(paren_stack))\n            paren_stack = []\n    return result",
        "grade-9": {
            "execution": 0
        },
        "8": "split_parens = paren_string.split(' ')\n    output = []\n    for parens in split_parens:\n        if parens == '':\n            continue\n        else:\n            output.append(parens)\n    return output",
        "grade-8": {
            "execution": 0
        },
        "29": "# TODO: implement me!\n    pass",
        "grade-29": {
            "execution": 0
        },
        "69": "paren_string = paren_string.replace(' ', '')\n    result = []\n    group = ''\n    group_count = 0\n    for ch in paren_string:\n        if ch == '(':\n            group_count += 1\n        elif ch == ')':\n            group_count -= 1\n        group += ch\n        if group_count == 0:\n            result.append(group)\n            group = ''\n    return result",
        "grade-69": {
            "execution": 1
        },
        "74": "# YOUR CODE HERE\n    res = []\n    start = 0\n    end = 0\n    open_count = 0\n    close_count = 0\n    paren_string = paren_string.replace(\" \", \"\")\n    for i in range(len(paren_string)):\n        if paren_string[i] == \"(\":\n            open_count += 1\n        elif paren_string[i] == \")\":\n            close_count += 1\n        if open_count == close_count:\n            res.append(paren_string[start:i+1])\n            start = i+1\n            open_count = 0\n            close_count = 0\n    return res",
        "grade-74": {
            "execution": 1
        },
        "174": "paren_string = paren_string.replace(' ', '')\n    assert is_balanced(paren_string)\n\n    # TODO: Insert solution here!\n    ret = []\n    paren_group = []\n    for i in range(len(paren_string)):\n        ch = paren_string[i]\n        if ch == '(':\n            paren_group.append(ch)\n        elif ch == ')':\n            paren_group.append(ch)\n            ret.append(''.join(paren_group))\n            paren_group = []\n    return ret",
        "grade-174": {
            "execution": 0
        },
        "190": "paren_list = paren_string.split(' ')\n    for paren in paren_list:\n        if paren == '':\n            paren_list.remove(paren)\n    return paren_list",
        "grade-190": {
            "execution": 0
        },
        "61": "# replace your code here\n    return []",
        "grade-61": {
            "execution": 0
        },
        "139": "#pass\n    ans = []\n    stk = []\n    now = ''\n    for i in paren_string:\n        if i == ' ':\n            continue\n        if i == '(':\n            stk.append(i)\n        elif i == ')':\n            stk.pop()\n            if len(stk) == 0:\n                ans.append(now)\n                now = ''\n        else:\n            now += i\n    return ans",
        "grade-139": {
            "execution": 0
        },
        "71": "#FIXME: implement this\n    pass",
        "grade-71": {
            "execution": 0
        }
    },
    {
        "intent": "from typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n",
        "snippet": [
            "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n"
        ],
        "simplified": "Given a positive integer n, return a tuple that has the number of even and odd integer palindromes that fall within the range(1, n), inclusive. Note: 1. 1 <= n <= 10^3 2. returned tuple has the number of even and odd integer palindromes respectively.",
        "task_id": "107",
        "195": "odd_palindrome = 0\n    even_palindrome = 0\n\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_palindrome += 1\n            else:\n                odd_palindrome += 1\n\n    return (even_palindrome, odd_palindrome)",
        "grade-195": {
            "execution": 0
        },
        "28": "odd_cnt = 0\n    even_cnt = 0\n    for num in range(1, n + 1):\n        if str(num) == str(num)[::-1]:\n            if len(str(num)) % 2 == 0:\n                even_cnt += 1\n            else:\n                odd_cnt += 1\n    return (even_cnt, odd_cnt)",
        "grade-28": {
            "execution": 0
        },
        "6": "return _even_odd_palindrome_v2(n)",
        "grade-6": {
            "execution": 0
        },
        "73": "def is_palindrome(n: int) -> bool:\n        \"\"\"\n        Return True if n is a palindrome, False otherwise.\n        \"\"\"\n        if n < 0:\n            return False\n        n_temp = n\n        rev = 0\n        while n_temp > 0:\n            rev = rev * 10 + n_temp % 10\n            n_temp //= 10\n        return n == rev\n\n    even = 0\n    odd = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)",
        "grade-73": {
            "execution": 1
        },
        "65": "even, odd = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if len(str(i)) % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return even, odd",
        "grade-65": {
            "execution": 0
        },
        "60": "# Count number of even and odd palindromes using a helper function\n    even_pals = 0\n    odd_pals = 0\n    for i in range(1, n + 1):\n        if count_palindromes(i) is True:\n            if i % 2 == 0:\n                even_pals += 1\n            else:\n                odd_pals += 1\n    return (even_pals, odd_pals)",
        "grade-60": {
            "execution": 0
        },
        "36": "if n == 1:\n        return (0, 1)\n    else:\n        return (\n            sum(1 for x in range(1, n + 1) if str(x) == str(x)[::-1] and x % 2 == 0),\n            sum(1 for x in range(1, n + 1) if str(x) == str(x)[::-1] and x % 2 == 1),\n        )",
        "grade-36": {
            "execution": 1
        },
        "26": "if n < 1 or n > 10**3:\n        raise ValueError(\"n must be a positive integer and less than 10^3\")\n\n    even, odd = 0, 0\n    for i in range(1, n+1):\n        if is_integer_palindrome(i):\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)",
        "grade-26": {
            "execution": 0
        },
        "162": "from math import log10, floor\n\n    def is_palindrome(num: int) -> bool:\n        n = int(floor(log10(num)) + 1)\n        for i in range(0, n // 2):\n            if num // 10**i % 10 != num // 10**(n - i - 1) % 10:\n                return False\n        return True\n\n    even = 0\n    odd = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)",
        "grade-162": {
            "execution": 1
        },
        "22": "# TODO: Implement\n    pass",
        "grade-22": {
            "execution": 0
        },
        "175": "count_even = 0\n    count_odd = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    return (count_even, count_odd)",
        "grade-175": {
            "execution": 0
        },
        "120": "even_count = 0\n    odd_count = 0\n\n    for i in range(1, n + 1):\n        number = str(i)\n        if len(number) == 1:\n            odd_count += 1\n        elif len(number) == 2:\n            if number[0] == number[1]:\n                even_count += 1\n            else:\n                odd_count += 1\n        else:\n            if number[0] == number[-1]:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)",
        "grade-120": {
            "execution": 0
        },
        "8": "even = 0\n    odd = 0\n    for x in range(1, n + 1):\n        if str(x) == str(x)[::-1]:\n            if x % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)",
        "grade-8": {
            "execution": 1
        },
        "7": "output = (0, 0)\n    if n > 1:\n        for i in range(1, n + 1):\n            if i % 10 == 0:\n                continue\n            if is_palindrome(i):\n                if i % 2 == 0:\n                    output = (output[0] + 1, output[1])\n                else:\n                    output = (output[0], output[1] + 1)\n    return output",
        "grade-7": {
            "execution": 0
        },
        "23": "e = 0\n    o = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                e += 1\n            else:\n                o += 1\n    return (e, o)",
        "grade-23": {
            "execution": 1
        },
        "58": "if n < 1 or n > 10**3:\n        raise Exception(\"Invalid Input\")\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if is_even(i):\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)",
        "grade-58": {
            "execution": 0
        },
        "62": "n_even = n // 2 + 1\n    if n % 2 == 0:\n        n_odd = n // 2\n    else:\n        n_odd = n // 2 + 1\n    return (n_even, n_odd)",
        "grade-62": {
            "execution": 0
        },
        "148": "def is_palindrome(x: int) -> bool:\n        s = str(x)\n        return s == s[::-1]\n\n    even_palindromes = 0\n    odd_palindromes = 0\n\n    for x in range(1, n + 1):\n        if is_palindrome(x):\n            if x % 2 == 0:\n                even_palindromes += 1\n            else:\n                odd_palindromes += 1\n\n    return (even_palindromes, odd_palindromes)",
        "grade-148": {
            "execution": 1
        },
        "180": "assert 1 <= n <= 10**3, \"n must be within the range(1, 10**3), inclusive\"\n\n    count_even, count_odd = 0, 0\n    if n > 1:\n        for num in range(1, n+1):\n            if (str(num) == str(num)[::-1]):\n                if num % 2 == 0:\n                    count_even += 1\n                else:\n                    count_odd += 1\n    return (count_even, count_odd)",
        "grade-180": {
            "execution": 0
        },
        "166": "even = 0\n    odd = 0\n    for i in range(1, n + 1):\n        if check_palindrome(i):\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)",
        "grade-166": {
            "execution": 0
        }
    },
    {
        "intent": "from typing import List\n\ndef generate_integers(a: int, b: int) -> List[int]:\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n",
        "snippet": [
            "    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n"
        ],
        "simplified": "Given two positive integers a and b, return the even digits between a and b, in ascending order.",
        "task_id": "163",
        "177": "start = min(a, b)\n    end = max(a, b)\n\n    return list(range(start, end + 1, 2))",
        "grade-177": {
            "execution": 0
        },
        "28": "s, e = sorted([a, b])\n    evens = []\n    for i in range(s, e + 1):\n        if i % 2 == 0:\n            evens.append(i)\n    return evens",
        "grade-28": {
            "execution": 0
        },
        "6": "# The challenge is easy. Let's try to make it a bit harder.\n    # Instead of returning integers, return a list of strings\n    # corresponding to the binary representations of the input integers.\n    # The list should be in ascending order.\n    #\n    # For example:\n    # generate_integers(2, 8) => ['10', '100', '110', '1000']\n    # generate_integers(8, 2) => ['10', '100', '110', '1000']\n    # generate_integers(10, 14) => []\n    #\n    # Hint: Remember that the code you submit must be your own.\n    # Do not copy-paste from the web!\n    #\n    return list(map(lambda x: format(x, 'b'), filter(lambda x: x % 2 == 0, range(min(a, b), max(a, b) + 1))))",
        "grade-6": {
            "execution": 0
        },
        "72": "if a > b:\n        a, b = b, a\n    numbers = [int(n) for n in range(a, b + 1) if n % 2 == 0]\n    return numbers",
        "grade-72": {
            "execution": 0
        },
        "62": "a, b = (min(a, b), max(a, b))\n    return [x for x in range(a, b + 1) if x % 2 == 0]",
        "grade-62": {
            "execution": 0
        },
        "57": "if a == b:\n        return []\n    integers = [i for i in range(a, b + 1) if i % 2 == 0]\n    return integers",
        "grade-57": {
            "execution": 0
        },
        "35": "# To avoid duplicates, we can just figure out which is smaller\n    # and start from that number. \n    smaller = min(a, b)\n    larger = max(a, b)\n    result = []\n    # Loop through the numbers between a and b. If a number is even,\n    # add it to our result array.\n    for i in range(smaller, larger + 1):\n        if i % 2 == 0:\n            result.append(i)\n    return result\n\nprint(generate_integers(2, 8))\nprint(generate_integers(8, 2))\nprint(generate_integers(10, 14))",
        "grade-35": {
            "execution": 0
        },
        "26": "if a > b:\n        a, b = b, a\n    return list(range(a, b + 1, 2))",
        "grade-26": {
            "execution": 0
        },
        "192": "evens = []\n    lower = min(a, b)\n    upper = max(a, b)\n    for i in range(lower, upper + 1):\n        if i % 2 == 0:\n            evens.append(i)\n    return evens",
        "grade-192": {
            "execution": 0
        },
        "152": "pass",
        "grade-152": {
            "execution": 0
        },
        "22": "# TODO:\n    return",
        "grade-22": {
            "execution": 0
        },
        "164": "output = []\n    if a > b:\n        a, b = b, a\n    for x in range(a, b + 1):\n        if x % 2 == 0:\n            output.append(x)\n    return output",
        "grade-164": {
            "execution": 0
        },
        "115": "start = min(a, b)\n    end = max(a, b)\n    evens = []\n    for x in range(start, end + 1):\n        if x % 2 == 0:\n            evens.append(x)\n    return evens",
        "grade-115": {
            "execution": 0
        },
        "8": "return [n for n in range(min(a, b), max(a, b) + 1) if n % 2 == 0]",
        "grade-8": {
            "execution": 0
        },
        "7": "# If a is greater than b, do nothing.\n    if a > b:\n        return []\n\n    even_numbers = []\n    # For all values between a and b, if the number is even, add it to the\n    # list.\n    for num in range(a, b + 1):\n        if num % 2 == 0:\n            even_numbers.append(num)\n\n    return even_numbers",
        "grade-7": {
            "execution": 0
        },
        "23": "return [x for x in range(min(a, b), max(a, b) + 1) if x % 2 == 0]",
        "grade-23": {
            "execution": 0
        },
        "55": "start = min(a, b)\n    end = max(a, b)\n    nums = []\n    for i in range(start, end + 1):\n        if i % 2 == 0:\n            nums.append(i)\n    return nums",
        "grade-55": {
            "execution": 0
        },
        "59": "numbers = list(range(a, b + 1))\n    return [n for n in numbers if n % 2 == 0]",
        "grade-59": {
            "execution": 0
        },
        "138": "if a <= b:\n        return list(filter(lambda x: x % 2 == 0, range(a, b + 1)))\n    else:\n        return list(filter(lambda x: x % 2 == 0, range(b, a + 1)))\n\nprint(generate_integers(2, 8))\nprint(generate_integers(8, 2))\nprint(generate_integers(10, 14))",
        "grade-138": {
            "execution": 0
        },
        "167": "start = a if a < b else b\n    end = b if a < b else a\n    numbers = [x for x in range(start, end + 1) if x % 2 == 0]\n    return numbers\n\nprint(generate_integers(2, 8))",
        "grade-167": {
            "execution": 0
        }
    },
    {
        "intent": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n",
        "snippet": [
            "    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n"
        ],
        "simplified": "Insert a number 'delimeter' between every two consecutive elements of input list `numbers'",
        "task_id": "5",
        "36": "result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result",
        "grade-36": {
            "execution": 1
        },
        "6": "result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result",
        "grade-6": {
            "execution": 1
        },
        "95": "result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i + 1 < len(numbers):\n            result.append(delimeter)\n    return result",
        "grade-95": {
            "execution": 1
        },
        "81": "if not numbers:\n        return []\n    out = []\n    for i in range(len(numbers) - 1):\n        out.append(numbers[i])\n        out.append(delimeter)\n    out.append(numbers[-1])\n    return out",
        "grade-81": {
            "execution": 1
        },
        "75": "interspersed = [numbers[0]]\n    for i in range(1, len(numbers)):\n        interspersed.append(delimeter)\n        interspersed.append(numbers[i])\n    return interspersed",
        "grade-75": {
            "execution": 0
        },
        "44": "result = []\n    if not numbers:\n        return result\n    result.append(numbers[0])\n    for i in range(1, len(numbers)):\n        result.append(delimeter)\n        result.append(numbers[i])\n    return result",
        "grade-44": {
            "execution": 1
        },
        "34": "if len(numbers) <= 1:\n        return numbers\n    else:\n        return [numbers[0], delimeter] + intersperse(numbers[1:], delimeter)",
        "grade-34": {
            "execution": 1
        },
        "195": "interspersed = []\n    for i in range(len(numbers)):\n        interspersed.append(numbers[i])\n        if i != len(numbers) - 1:\n            interspersed.append(delimeter)\n    return interspersed",
        "grade-195": {
            "execution": 1
        },
        "30": "def insert(n: int, ns: List[int]) -> List[int]:\n        if ns:\n            return [n] + [ns[0]] + insert(n, ns[1:])\n        else:\n            return []\n    return reduce(lambda acc, x: acc + insert(delimeter, [x]), numbers, [])",
        "grade-30": {
            "execution": 0
        },
        "147": "if not numbers:\n        return []\n    if len(numbers) == 1:\n        return numbers\n    new_numbers = []\n    for i in range(len(numbers) - 1):\n        new_numbers.append(numbers[i])\n        new_numbers.append(delimeter)\n    new_numbers.append(numbers[-1])\n    return new_numbers",
        "grade-147": {
            "execution": 1
        },
        "8": "pass",
        "grade-8": {
            "execution": 0
        },
        "7": "if not numbers:\n        return []\n    elif len(numbers) == 1:\n        return numbers\n\n    return numbers[:1] + [delimeter] + intersperse(numbers[1:], delimeter)\n\nprint(intersperse([1, 2, 3], 4))",
        "grade-7": {
            "execution": 1
        },
        "31": "result = []\n    num_elements = len(numbers)\n    for i in range(num_elements):\n        result.append(numbers[i])\n        if i < num_elements - 1:\n            result.append(delimeter)\n    return result",
        "grade-31": {
            "execution": 1
        },
        "73": "if not numbers:\n        return []\n    else:\n        return [numbers[0]] + [delimeter] + intersperse(numbers[1:], delimeter)",
        "grade-73": {
            "execution": 0
        },
        "77": "new_list = [numbers[0]]\n    for i in range(1, len(numbers)):\n        new_list.append(delimeter)\n        new_list.append(numbers[i])\n    return new_list",
        "grade-77": {
            "execution": 0
        },
        "182": "# return [numbers[i] for i in range(len(numbers))] if len(numbers) == 0 else [numbers[i] for i in range(len(numbers) - 1)] + [numbers[-1]]\n    return sum([[numbers[i], delimeter] for i in range(len(numbers) - 1)], [numbers[-1]]) if len(numbers) != 0 else []",
        "grade-182": {
            "execution": 0
        },
        "64": "if len(numbers) < 2:\n        return numbers\n\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(delimeter)\n        result.append(numbers[i])\n\n    return result",
        "grade-64": {
            "execution": 1
        },
        "145": "if len(numbers) == 0:\n        return []\n    if len(numbers) == 1:\n        return numbers\n    interspersed = []\n    for i in range(len(numbers) - 1):\n        interspersed.append(numbers[i])\n        interspersed.append(delimeter)\n    interspersed.append(numbers[-1])\n    return interspersed",
        "grade-145": {
            "execution": 1
        },
        "74": "new_list = []\n    for i in range(len(numbers)):\n        new_list.append(numbers[i])\n        if i < len(numbers) - 1:\n            new_list.append(delimeter)\n    return new_list",
        "grade-74": {
            "execution": 1
        },
        "157": "if not numbers:\n        return []\n    return reduce(lambda x, y: x + [delimeter] + [y], numbers)",
        "grade-157": {
            "execution": 0
        }
    },
    {
        "intent": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n",
        "snippet": [
            "    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n"
        ],
        "simplified": "From a given list of integers, generate a list of rolling maximum element found until given moment in the sequence.",
        "task_id": "9",
        "163": "if not numbers:\n        return numbers\n    else:\n        return [max(numbers[:idx + 1]) for idx in range(len(numbers))]",
        "grade-163": {
            "execution": 1
        },
        "28": "lst = []\n    for i in range(len(numbers)):\n        lst.append(max(numbers[:i+1]))\n    return lst",
        "grade-28": {
            "execution": 1
        },
        "6": "result = []\n    max_so_far = numbers[0]\n    for n in numbers:\n        if n > max_so_far:\n            max_so_far = n\n        result.append(max_so_far)\n    return result\n\nprint(rolling_max([1, 2, 3, 2, 3, 4, 2]))",
        "grade-6": {
            "execution": 0
        },
        "192": "m = float('-inf')\n    res = []\n    for i in numbers:\n        if i > m:\n            m = i\n        res.append(m)\n    return res",
        "grade-192": {
            "execution": 1
        },
        "70": "num_stack = []\n    max_stack = []\n    for num in numbers:\n        if not num_stack or num >= num_stack[-1]:\n            num_stack.append(num)\n            max_stack.append(num)\n        else:\n            num_stack.append(num)\n            max_stack.append(max_stack[-1])\n    return max_stack",
        "grade-70": {
            "execution": 1
        },
        "62": "i = 0\n    while i < len(numbers):\n        if i == 0:\n            max_element = numbers[i]\n        else:\n            max_element = max(max_element, numbers[i])\n        numbers[i] = max_element\n        i += 1\n    return numbers",
        "grade-62": {
            "execution": 1
        },
        "57": "l = len(numbers)\n    if l == 0:\n        return []\n    if l == 1:\n        return [numbers[0]]\n    maximum = numbers[0]\n    result = [maximum]\n    for i in range(1, l):\n        n = numbers[i]\n        if n > maximum:\n            maximum = n\n        result.append(maximum)\n    return result",
        "grade-57": {
            "execution": 1
        },
        "35": "result = []\n    max_value = -1\n    for n in numbers:\n        max_value = max(max_value, n)\n        result.append(max_value)\n    return result",
        "grade-35": {
            "execution": 1
        },
        "191": "result = []\n    for i in range(0, len(numbers)):\n        result.append(max(numbers[0:i+1]))\n    return result",
        "grade-191": {
            "execution": 1
        },
        "26": "tmp_max = numbers[0]\n    result = []\n    for x in numbers:\n        if x > tmp_max:\n            tmp_max = x\n        result.append(tmp_max)\n    return result",
        "grade-26": {
            "execution": 0
        },
        "175": "max_values = []\n    current_max = 0\n    for num in numbers:\n        if num > current_max:\n            current_max = num\n        max_values.append(current_max)\n    return max_values",
        "grade-175": {
            "execution": 1
        },
        "139": "max_numbers = []\n    current_max = 0\n    for number in numbers:\n        current_max = max(current_max, number)\n        max_numbers.append(current_max)\n    return max_numbers",
        "grade-139": {
            "execution": 1
        },
        "22": "cnt = [numbers[0]]\n    for i in range(1, len(numbers)):\n        if numbers[i] > cnt[-1]:\n            cnt.append(numbers[i])\n        else:\n            cnt.append(cnt[-1])\n    return cnt",
        "grade-22": {
            "execution": 0
        },
        "151": "rolling_max_list = []\n    max_value = numbers[0]\n    rolling_max_list.append(max_value)\n    for number in numbers[1:]:\n        if number > max_value:\n            max_value = number\n        rolling_max_list.append(max_value)\n    return rolling_max_list",
        "grade-151": {
            "execution": 0
        },
        "108": "rolling_max_values = []\n    number_max = 0\n    for number in numbers:\n        number_max = max(number_max, number)\n        rolling_max_values.append(number_max)\n    return rolling_max_values",
        "grade-108": {
            "execution": 1
        },
        "8": "rolling_max = []\n    max_so_far = None\n    for number in numbers:\n        if number > max_so_far:\n            max_so_far = number\n        rolling_max.append(max_so_far)\n    return rolling_max",
        "grade-8": {
            "execution": 0
        },
        "7": "result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(max(result[i-1], numbers[i]))\n    return result",
        "grade-7": {
            "execution": 0
        },
        "23": "rolling_max_so_far = numbers[0]\n    rolling_maxes = [rolling_max_so_far]\n    for n in numbers[1:]:\n        rolling_max_so_far = max(rolling_max_so_far, n)\n        rolling_maxes.append(rolling_max_so_far)\n    return rolling_maxes",
        "grade-23": {
            "execution": 0
        },
        "55": "max_list = []\n    current_max = 0\n    for number in numbers:\n        current_max = max(current_max, number)\n        max_list.append(current_max)\n    return max_list",
        "grade-55": {
            "execution": 1
        },
        "59": "res = []\n    a_max = numbers[0]\n    for n in numbers:\n        if n > a_max:\n            a_max = n\n        res.append(a_max)\n    return res",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n",
        "snippet": [
            "    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n"
        ],
        "simplified": "Return the largest prime factor of n. Assume n > 1 and is not a prime.",
        "task_id": "59",
        "172": "# This is a basic solution to the problem.\n    # A more efficient solution could exist by realizing that the largest\n    # factor is not always the largest prime factor\n    factor = 2\n    largest_factor = n\n    while factor <= largest_factor:\n        if n % factor == 0:\n            largest_factor = n // factor\n            if is_prime(largest_factor):\n                return largest_factor\n        factor += 1",
        "grade-172": {
            "execution": 0
        },
        "30": "lpf = 0\n    for x in range(2, n):\n        if n % x == 0:\n            x = largest_prime_factor(x)\n            if x > lpf:\n                lpf = x\n    return lpf",
        "grade-30": {
            "execution": 0
        },
        "6": "largest = 0\n    factor = 2\n    while factor < n:\n        if n % factor == 0:\n            n //= factor\n            largest = factor\n        else:\n            factor += 1\n    return max(largest, n)",
        "grade-6": {
            "execution": 1
        },
        "199": "if is_prime(n):\n        return n\n    for i in range(2, n):\n        if n % i == 0 and is_prime(i):\n            return largest_prime_factor(n // i)\n        if is_prime(n // i):\n            return n // i",
        "grade-199": {
            "execution": 0
        },
        "74": "factor = 2\n    largest_factor = 2\n    while n > 1:\n        if n % factor == 0:\n            largest_factor = factor\n            n //= factor\n        else:\n            factor += 1\n    return largest_factor",
        "grade-74": {
            "execution": 1
        },
        "66": "largest_factor = 1\n    while n % 2 == 0:\n        largest_factor = 2\n        n //= 2\n    possible_factor = 3\n    while n > 1:\n        while n % possible_factor == 0:\n            largest_factor = possible_factor\n            n //= possible_factor\n        possible_factor += 2\n    return largest_factor",
        "grade-66": {
            "execution": 1
        },
        "61": "i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n //= i\n        else:\n            i += 1\n    return n",
        "grade-61": {
            "execution": 1
        },
        "38": "factor = 1\n    for factor in range(1, n + 1):\n        if is_prime(factor) and n % factor == 0:\n            factor = factor\n    return factor",
        "grade-38": {
            "execution": 0
        },
        "198": "factor = 2\n    while factor * factor <= n:\n        if n % factor:\n            factor += 1\n        else:\n            n //= factor\n    return n\n\n\nprint(largest_prime_factor(600851475143))",
        "grade-198": {
            "execution": 1
        },
        "28": "for factor in range(n - 1, 1, -1):\n        if n % factor == 0 and is_prime(factor):\n            return factor",
        "grade-28": {
            "execution": 0
        },
        "182": "n = n // 2\n\n    for i in range(n, 1, -1):\n        if is_prime(i) and n % i == 0:\n            return i",
        "grade-182": {
            "execution": 0
        },
        "147": "lpf = 0\n    i = 2\n    while n > 1:\n        if n % i == 0:\n            lpf = i\n            n = n // i\n        else:\n            i += 1\n    return lpf",
        "grade-147": {
            "execution": 1
        },
        "22": "pf = 1\n    while n % 2 == 0:\n        pf = 2\n        n = n // 2\n    f = 3\n    while f * f <= n:\n        if n % f == 0:\n            pf = f\n            n = n // f\n        else:\n            f += 2\n    if n > 2:\n        pf = n\n    return pf",
        "grade-22": {
            "execution": 1
        },
        "159": "# Compute prime factors, then return the last one.\n    return prime_factors(n)[-1]",
        "grade-159": {
            "execution": 0
        },
        "114": "d, i = n, 2\n    while i < d:\n        if is_prime(i) and d % i == 0:\n            d = d // i\n        else:\n            i += 1\n    return d",
        "grade-114": {
            "execution": 0
        },
        "8": "# Find all the factors of n by starting with 2, moving up the\n    # integers, and using the remainder of n to find the factors.\n    factor = 2\n    while factor * factor <= n:\n        if n % factor == 0:\n            n = n // factor\n        else:\n            factor += 1\n    return n",
        "grade-8": {
            "execution": 1
        },
        "7": "factors = set()\n    x = 2\n    while n != 1:\n        if n % x == 0:\n            factors.add(x)\n            n //= x\n        else:\n            x += 1\n    return max(factors)",
        "grade-7": {
            "execution": 1
        },
        "23": "if n == 1:\n        return 1\n    while n % 2 == 0:\n        n = n // 2\n    if n == 1:\n        return 2\n    i = 3\n    while i <= n:\n        if n % i == 0:\n            n = n // i\n        else:\n            i += 2\n    return i",
        "grade-23": {
            "execution": 1
        },
        "58": "primes = set()\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            primes.add(divisor)\n            n = n // divisor\n        else:\n            divisor += 1\n    return max(primes)",
        "grade-58": {
            "execution": 1
        },
        "63": "divisor = 3\n    while divisor * divisor <= n:\n        if n % divisor == 0:\n            n //= divisor\n        else:\n            divisor += 2\n    return n",
        "grade-63": {
            "execution": 0
        }
    },
    {
        "intent": "from typing import List\n\ndef skjkasdkd(lst: List[int]) -> int:\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n",
        "snippet": [
            "    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n"
        ],
        "simplified": "You are given a list of integers. You need to find the largest prime value and return the sum of its digits.",
        "task_id": "94",
        "174": "pass\n</code>\nThe above code sample is what I have right now, and it doesn't run. \nI get the following error:\n<code>error: unable to load extension from 'C:\\Users\\danie\\OneDrive\\Documents\\GitHub\\TypeHinting\\th.py': [Errno 2] No such file or directory: 'C:\\\\Users\\\\danie\\\\OneDrive\\\\Documents\\\\GitHub\\\\TypeHinting\\\\th.py'\n</code>\nI don't really have anything else to add, as I have no idea how to troubleshoot this.\nI am using Notepad++.\n\n\nA:\n\nI solved the problem by changing the interpreter from the one downloaded with Anaconda, to the one installed when Python 3.6 was installed.\n\nThis is a result of:\n<code>$ which python\n/usr/bin/python\n</code>\nWhich also may be found by typing <code>where python</code> in windows.",
        "grade-174": {
            "execution": 0
        },
        "28": "# get largest prime number\n    largest_prime = max(filter(lambda x: is_prime(x), lst))\n    # calculate the sum of its digits\n    return sum(map(int, list(str(largest_prime))))",
        "grade-28": {
            "execution": 0
        },
        "6": "return sum(map(int, list(str(max(filter(lambda x: all(map(lambda y: x % y, range(2, x))), lst))))))",
        "grade-6": {
            "execution": 1
        },
        "72": "# `numpy`'s `unique` function can be used to return all unique values in a list\n    # (see the docs at https://docs.scipy.org/doc/numpy/reference/generated/numpy.unique.html)\n    # for more details.\n    unique_values = np.unique(lst)\n    primes = []\n    for number in unique_values:\n        is_prime = True\n        if number < 2:\n            is_prime = False\n        elif number == 2:\n            is_prime = True\n        else:\n            for i in range(2, int(np.sqrt(number)) + 1):\n                if number % i == 0:\n                    is_prime = False\n                    break\n        if is_prime:\n            primes.append(number)\n    return sum(map(int, list(str(max(primes)))))",
        "grade-72": {
            "execution": 0
        },
        "64": "# your code here\n    r = 0\n    while lst:\n        t = max(lst)\n        lst.remove(t)\n        c = 0\n        for i in range(2, t+1):\n            if t % i == 0:\n                c += 1\n        if c == 1:\n            r += sum([int(i) for i in str(t)])\n    return r",
        "grade-64": {
            "execution": 0
        },
        "59": "def is_prime(num: int) -> bool:\n        for j in range(2,num):\n            if num % j == 0:\n                return False\n        return True\n\n    def sum_digits(num: int) -> int:\n        x = 0\n        for c in str(num):\n            x += int(c)\n        return x\n\n    max_prime = 1\n    for i in lst:\n        if is_prime(i) and i > max_prime:\n            max_prime = i\n    return sum_digits(max_prime)",
        "grade-59": {
            "execution": 1
        },
        "35": "largest_prime = 0\n    for i in lst:\n        if is_prime(i) and i > largest_prime:\n            largest_prime = i\n    return sum(int(x) for x in str(largest_prime))",
        "grade-35": {
            "execution": 0
        },
        "26": "lst_str = list(map(str, lst))\n    lst_str.sort(reverse=True)\n    for i in lst_str:\n        for j in range(len(i)):\n            if i[j] != '0':\n                break\n        if i[j] == '0':\n            continue\n        else:\n            i = i[j:]\n            if i == '1':\n                return sum(map(int, i))\n            while int(i) % 2 == 0:\n                i = int(i) / 2\n            if i == '1':\n                return sum(map(int, i))\n            else:\n                for j in range(3, int(i), 2):\n                    while int(i) % j == 0:\n                        i = int(i) / j\n                    if i == '1':\n                        return sum(map(int, i))\n                return sum(map(int, i))",
        "grade-26": {
            "execution": 0
        },
        "187": "pass\n    primes = []\n    for i in lst:\n        if is_prime(i):\n            primes.append(i)\n    return sum(int(digit) for digit in str(max(primes)))",
        "grade-187": {
            "execution": 0
        },
        "148": "def get_primes(n):\n        numbers = set(range(n, 1, -1))\n        primes = []\n        while numbers:\n            p = numbers.pop()\n            primes.append(p)\n            numbers.difference_update(set(range(p*2, n+1, p)))\n        return primes\n\n    lst.sort()\n    lst.reverse()\n    for i in lst:\n        if is_prime(i):\n            return sum([int(a) for a in str(i)])\n    primes = get_primes(lst[0])\n    primes.sort()\n    primes.reverse()\n    for i in primes:\n        if i in lst:\n            return sum([int(a) for a in str(i)])\n\n    return sum([int(a) for a in str(lst[0])])",
        "grade-148": {
            "execution": 0
        },
        "22": "# max_prime = 1\n    max_prime = 0\n    for i in lst:\n        if is_prime(i):\n            # max_prime = i\n            max_prime = max(max_prime, i)\n    return sum(map(int, str(max_prime)))",
        "grade-22": {
            "execution": 0
        },
        "160": "primes = []\n    for i in lst:\n        if is_prime(i):\n            primes.append(i)\n    return sum([int(i) for i in str(max(primes))])",
        "grade-160": {
            "execution": 0
        },
        "113": "lst = filter(None, lst)\n    lst = filter(lambda x: (x % 2 != 0 and x % 3 != 0 and x % 5 != 0 and x % 7 != 0), lst)\n    return sum(map(int, list(str(max(lst)))))",
        "grade-113": {
            "execution": 0
        },
        "8": "lst = sorted(lst, reverse=True)\n    for n in lst:\n        if n == 0:\n            continue\n        elif n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        else:\n            if is_prime(n):\n                return sum(map(int, str(n)))",
        "grade-8": {
            "execution": 0
        },
        "7": "from utils import sum_digits\n\n    largest_prime = 0\n    for num in lst:\n        if num > largest_prime and sum_digits(num) % 2 == 1:\n            largest_prime = num\n\n    return sum_digits(largest_prime)",
        "grade-7": {
            "execution": 0
        },
        "23": "from math import sqrt\n\n    def is_prime(x: int) -> bool:\n        if x <= 1:\n            return False\n        for i in range(2, int(sqrt(x)) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    def get_digits(x: int) -> List[int]:\n        return [int(c) for c in str(x)]\n\n    from functools import reduce\n    from operator import add\n\n    return reduce(add,\n                  get_digits(max(filter(is_prime, lst))))",
        "grade-23": {
            "execution": 1
        },
        "57": "from math import sqrt\n    from functools import reduce\n    from operator import add\n    n = 0\n    for i in lst:\n        s = 0\n        for j in range(2, int(sqrt(i)) + 1):\n            if i % j == 0:\n                s += 1\n        if s == 0 and i != 1:\n            n = max(n, i)\n    return reduce(add, map(int, str(n)))",
        "grade-57": {
            "execution": 1
        },
        "61": "primes = list(filter(lambda n: n > 0 and isprime(n), lst))\n    return sum(map(int, str(max(primes)))) if primes else 0",
        "grade-61": {
            "execution": 0
        },
        "138": "#your code here\n\n\nprint(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]))\nprint(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]))\nprint(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]))\nprint(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]))\nprint(skjkasdkd([0,81,12,3,1,21]))\nprint(skjkasdkd([0,8,1,2,1,7]))",
        "grade-138": {
            "execution": 0
        },
        "164": "lst_str = list(str(lst))\n    lst_int = [int(lst_str[item]) for item in range(len(lst_str))]\n    lst_int.sort()\n    lst_int.reverse()\n    return sum(lst_int)",
        "grade-164": {
            "execution": 0
        }
    },
    {
        "intent": "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n",
        "snippet": [
            "    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n"
        ],
        "simplified": "You are given a list of integers. Write a function next_smallest() that returns the 2nd smallest element of the list. Return None if there is no such element.",
        "task_id": "90",
        "31": "if not lst:\n        return None\n    smallest = lst[0]\n    second_smallest = None\n    for x in lst:\n        if x < smallest:\n            second_smallest = smallest\n            smallest = x\n        elif second_smallest is None or x < second_smallest:\n            second_smallest = x\n    return second_smallest\n\nfrom typing import List, Optional",
        "grade-31": {
            "execution": 0
        },
        "6": "pass",
        "grade-6": {
            "execution": 0
        },
        "86": "# Your code goes here\n    pass",
        "grade-86": {
            "execution": 0
        },
        "74": "if len(lst) == 0:\n        return None\n    if len(lst) == 1:\n        return None\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return None\n        else:\n            if lst[0] < lst[1]:\n                return lst[0]\n            else:\n                return lst[1]\n    small = lst[0]\n    next_small = None\n    for i in range(len(lst)):\n        if lst[i] < small:\n            next_small = small\n            small = lst[i]\n        elif lst[i] < next_small:\n            next_small = lst[i]\n    return next_small",
        "grade-74": {
            "execution": 0
        },
        "65": "if len(lst) < 2:\n        return None\n    # returns 2nd smallest element of list\n    first_min, second_min = float('inf'), float('inf')\n    for val in lst:\n        if val < first_min:\n            first_min, second_min = val, first_min\n        elif val < second_min:\n            second_min = val\n    return second_min if second_min != float('inf') else None",
        "grade-65": {
            "execution": 0
        },
        "38": "# your code goes here",
        "grade-38": {
            "execution": 0
        },
        "29": "lst = sorted(lst)\n    if len(lst) < 2:\n        return None\n    elif lst[0] == lst[1]:\n        return None\n    else:\n        return lst[1]",
        "grade-29": {
            "execution": 1
        },
        "178": "# Todo: write your code here.\n    return 0",
        "grade-178": {
            "execution": 0
        },
        "24": "if not lst:\n        return None\n    elif len(lst) == 1:\n        return None\n    else:\n        for i in range(1, len(lst)):\n            if lst[i] != lst[0]:\n                return lst[i]\n\n    return None",
        "grade-24": {
            "execution": 0
        },
        "192": "if len(lst) < 2:\n        return None\n    lst.sort()\n    for i in range(1, len(lst)):\n        if lst[i] != lst[i-1]:\n            return lst[i]\n    return None",
        "grade-192": {
            "execution": 1
        },
        "137": "if len(lst) == 0:\n        return None\n    if len(lst) == 1:\n        return None\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return None\n        return min(lst)\n    smallest = lst[0]\n    smallest_idx = 0\n    second_smallest = lst[1]\n    second_smallest_idx = 1\n    # Get smallest, second smallest\n    for idx, val in enumerate(lst):\n        if idx == smallest_idx:\n            continue\n        if val < smallest:\n            second_smallest = smallest\n            second_smallest_idx = smallest_idx\n            smallest = val\n            smallest_idx = idx\n        elif val < second_smallest:\n            second_smallest = val\n            second_smallest_idx = idx\n    # Make sure they're unique\n    if smallest == second_smallest:\n        return None\n    return second_smallest",
        "grade-137": {
            "execution": 1
        },
        "8": "if len(lst) < 2:\n        return None\n    lst.sort()\n    m = lst[0]\n    for e in lst[1:]:\n        if e > m:\n            return e\n    return None",
        "grade-8": {
            "execution": 1
        },
        "7": "return None",
        "grade-7": {
            "execution": 0
        },
        "25": "pass",
        "grade-25": {
            "execution": 0
        },
        "63": "if len(lst) < 2:\n        return None\n    min_num = min(lst)\n    min_idx = lst.index(min_num)\n    del lst[min_idx]\n    return min(lst)",
        "grade-63": {
            "execution": 0
        },
        "69": "# Write your code here\n    return None",
        "grade-69": {
            "execution": 0
        },
        "163": "if len(lst) < 2:\n        return None\n    else:\n        minimum = lst[0]\n        second_smallest = None\n        for i in range(1, len(lst)):\n            if lst[i] < minimum:\n                second_smallest = minimum\n                minimum = lst[i]\n            elif lst[i] == minimum:\n                pass\n            elif second_smallest is None or lst[i] < second_smallest:\n                second_smallest = lst[i]\n        return second_smallest",
        "grade-163": {
            "execution": 1
        },
        "196": "if len(lst) < 2:\n        return None\n    else:\n        lst.sort()\n        next_smallest = lst[0]\n        for i in range(1, len(lst)):\n            if lst[i] > next_smallest:\n                next_smallest = lst[i]\n                break\n        return next_smallest",
        "grade-196": {
            "execution": 0
        },
        "183": "# return min(lst[:2]) if len(lst) > 1 else None\n    min_val = min(lst)\n    lst.remove(min_val)\n    if lst:\n        return min(lst)\n    else:\n        return None",
        "grade-183": {
            "execution": 0
        },
        "58": "if len(lst) < 2:\n        return None\n    m = min(lst)\n    if lst.count(m) > 1:\n        return None\n    else:\n        return min([x for x in lst if x > m])\n\nnext_smallest([1, 2, 3, 4, 5])\n\nfrom typing import List, Optional",
        "grade-58": {
            "execution": 1
        }
    },
    {
        "intent": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n",
        "snippet": [
            "    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n"
        ],
        "simplified": "Change numerical base of input number x to base. return string representation after the conversion. base numbers are less than 10.",
        "task_id": "44",
        "31": "digits = \"\"\n    if x == 0:\n        return \"0\"\n    while x != 0:\n        r = x % base\n        x = x // base\n        digits = str(r) + digits\n    return digits",
        "grade-31": {
            "execution": 1
        },
        "6": "quotient = x\n    remainder = 0\n    result = ''\n    while True:\n        remainder = quotient % base\n        quotient = quotient // base\n        result = str(remainder) + result\n        if quotient == 0:\n            break\n    return result\n\nprint(change_base(9, 5))\nprint(change_base(8, 2))\nprint(change_base(7, 2))\nprint(change_base(9, 2))\nprint(change_base(int(input()), int(input())))",
        "grade-6": {
            "execution": 0
        },
        "82": "if x == 0:\n        return '0'\n    res = []\n    while x != 0:\n        res.append(str(x % base))\n        x //= base\n    return ''.join(res[::-1])",
        "grade-82": {
            "execution": 1
        },
        "72": "assert(base < 10)\n    ret = ''\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret",
        "grade-72": {
            "execution": 1
        },
        "66": "res = ''\n    while x > 0:\n        res = str(x % base) + res\n        x //= base\n    return res",
        "grade-66": {
            "execution": 1
        },
        "38": "ans = ''\n    while x:\n        ans = str(x % base) + ans\n        x //= base\n    return ans",
        "grade-38": {
            "execution": 1
        },
        "29": "x_copy = x\n    result = ''\n    while x_copy:\n        result = str(x_copy % base) + result\n        x_copy //= base\n    return result",
        "grade-29": {
            "execution": 1
        },
        "170": "assert 0 < base < 10\n    # your solution here\n    num = []\n    while x > 0:\n        r = x % base\n        num.append(str(r))\n        x = x // base\n    num.reverse()\n    return ''.join(num)",
        "grade-170": {
            "execution": 1
        },
        "25": "if x == 0:\n        return str(0)\n    answer = ''\n    while x > 0:\n        answer = str(x % base) + answer\n        x = x // base\n    return answer",
        "grade-25": {
            "execution": 1
        },
        "185": "# special cases:\n    if base == 2:\n        return bin(x)[2:]\n    if base == 8:\n        return oct(x)[2:]\n    if base == 16:\n        return hex(x)[2:]\n    # general case:\n    if x == 0:\n        return \"0\"\n    output = \"\"\n    while x > 0:\n        output = str(x % base) + output\n        x = x // base\n    return output",
        "grade-185": {
            "execution": 1
        },
        "132": "assert base <= 10, \"This module can handle only base numbers less than 10.\"\n    base_map = {\n        10: 'A',\n        9: 'B',\n        8: 'C',\n        7: 'D',\n        6: 'E',\n        5: 'F',\n        4: 'G',\n        3: 'H',\n        2: 'I',\n        1: 'J',\n    }\n    result = \"\"\n    while x > 0:\n        remainder = x % base\n        if remainder > 10:\n            remainder = base_map[remainder]\n        result = str(remainder) + result\n        x = x // base\n    return result\n\n\n@dataclass",
        "grade-132": {
            "execution": 0
        },
        "8": "assert base > 1\n    assert x >= 0\n    assert x < base**len(str(x))\n\n    res = \"\"\n    while x > 0:\n        res = str(x % base) + res\n        x //= base\n    return res",
        "grade-8": {
            "execution": 0
        },
        "7": "assert x >= 0\n    assert base >= 2 and base <= 10\n    # output = \"\"\n    # result = 0\n    # current_base = 1\n    # while current_base <= x:\n    #     current_base *= base\n    #     result += 1\n    # current_base //= base\n    # while result > 0:\n    #     output += str(x // current_base)\n    #     x %= current_base\n    #     current_base //= base\n    #     result -= 1\n    # return output\n    return change_base_rec(x, base, \"\")",
        "grade-7": {
            "execution": 0
        },
        "26": "if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n    \n    \n    \n    \n    \n    \nimport doctest\ndoctest.testmod()\n\nprint(change_base(8, 3))\nprint(change_base(8, 2))\nprint(change_base(7, 2))",
        "grade-26": {
            "execution": 1
        },
        "63": "result = ''\n    if x == 0:\n        return str(x)\n    else:\n        while x > 0:\n            result = str(x % base) + result\n            x = x // base\n        return result",
        "grade-63": {
            "execution": 1
        },
        "69": "assert 1 <= base <= 9\n    res = ''\n    while x != 0:\n        x, mod = divmod(x, base)\n        res = str(mod) + res\n    return res",
        "grade-69": {
            "execution": 1
        },
        "156": "change_string = ''\n    while x > 0:\n        change_string = str(x % base) + change_string\n        x = x // base\n    return change_string",
        "grade-156": {
            "execution": 1
        },
        "189": "m = x\n    digits = ''\n    while m != 0:\n        m, n = divmod(m, base)\n        digits = str(n) + digits\n    return digits",
        "grade-189": {
            "execution": 1
        },
        "175": "result = \"\"\n    while x > 0:\n        digit = x % base\n        result = str(digit) + result\n        x = x // base\n    return result",
        "grade-175": {
            "execution": 1
        },
        "57": "assert base <= 10\n    if x // base == 0:\n        return str(x % base)\n    else:\n        return change_base(x // base, base) + str(x % base)",
        "grade-57": {
            "execution": 1
        }
    },
    {
        "intent": "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n",
        "snippet": [
            "    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n"
        ],
        "simplified": "You'll be given a string of words, and your task is to count the number of boredoms. A boredom is a sentence that starts with the word \"I\". Sentences are delimited by '.', '?' or '!'.",
        "task_id": "91",
        "172": "bored = 0\n    sentences = S.split('. ')\n    for sentence in sentences:\n        words = sentence.split(' ')\n        if words[0] == 'I':\n            bored += 1\n    return bored",
        "grade-172": {
            "execution": 1
        },
        "28": "boredoms = 0\n    sentences = S.split(\". \")\n    for sentence in sentences:\n        if sentence.startswith(\"I\"):\n            boredoms += 1\n    return boredoms",
        "grade-28": {
            "execution": 0
        },
        "6": "return 0",
        "grade-6": {
            "execution": 0
        },
        "72": "boredom = 0\n    for word in S.split():\n        if word[0] == 'I':\n            boredom += 1\n    return boredom",
        "grade-72": {
            "execution": 0
        },
        "64": "return S.count(\"I \")\n\n@given(st.text())",
        "grade-64": {
            "execution": 0
        },
        "59": "if not S:\n        return 0\n    res = []\n    for i in S.split(\".\"):\n        res.append(i.strip())\n    for j in S.split(\"?\"):\n        res.append(j.strip())\n    for k in S.split(\"!\"):\n        res.append(k.strip())\n    return len([word for word in res if word.strip().startswith(\"I\")])",
        "grade-59": {
            "execution": 0
        },
        "35": "return len([1 for x in S.split(\".\") if x.startswith(\"I\")])\n    # return sum(x.startswith(\"I\") for x in S.split(\".\"))",
        "grade-35": {
            "execution": 0
        },
        "26": "boredoms = 0\n    sentences = S.split('.!?')\n    for sentence in sentences:\n        try:\n            if sentence.split()[0] == 'I':\n                boredoms += 1\n        except IndexError:\n            continue\n    return boredoms",
        "grade-26": {
            "execution": 0
        },
        "182": "# Sentences are delimited by '.', '?' or '!'\n    sentences = re.split('[\\.\\?\\!]', S)\n    cnt = 0\n    for sentence in sentences:\n        words = sentence.split()\n        if not words:\n            continue\n        if words[0] == 'I':\n            cnt += 1\n    return cnt",
        "grade-182": {
            "execution": 0
        },
        "146": "# Split the string on \".\" \"?\" or \"!\"\n    sentences = re.split(r'[.?!]', S)\n    # Loop through the sentences\n    for s in sentences:\n        # If the sentence starts with \"I\" count it\n        if s.strip().startswith(\"I\"):\n            return 1\n    # If we don't find one, return 0\n    return 0",
        "grade-146": {
            "execution": 0
        },
        "22": "return sum(1 for s in S.split(\".\") if s.strip().startswith(\"I\"))",
        "grade-22": {
            "execution": 0
        },
        "159": "return len([s for s in S.split('.!?') if s.startswith('I')])",
        "grade-159": {
            "execution": 0
        },
        "111": "# Split input string on '.|?|!'\n    # Check if first word of each sentence is 'I'\n    # if 'I' then increment bored count\n    # return bored count\n    bored = 0\n    sentences = re.split('[?!.]', S)\n    for sentence in sentences:\n        if sentence.strip().split(' ')[0] == 'I':\n            bored += 1\n    return bored",
        "grade-111": {
            "execution": 0
        },
        "8": "return S.count(\"I\")",
        "grade-8": {
            "execution": 0
        },
        "7": "boredoms = 0\n    sentences = S.split('. ')\n    sentences.extend(S.split('? '))\n    sentences.extend(S.split('! '))\n    for sentence in sentences:\n        if sentence.startswith('I'):\n            boredoms += 1\n    return boredoms",
        "grade-7": {
            "execution": 0
        },
        "23": "count = 0\n    first_word = re.compile(r'I')\n    for sentence in re.split(r'[.?!]', S):\n        if first_word.match(sentence):\n            count += 1\n    return count",
        "grade-23": {
            "execution": 0
        },
        "57": "boredoms = 0\n    sentences = S.split(\". \")\n    for sentence in sentences:\n        words = sentence.split()\n        if words[0] == \"I\":\n            boredoms += 1\n    return boredoms",
        "grade-57": {
            "execution": 1
        },
        "61": "i_counter = 0\n    S = S.split()\n    for word in S:\n        if word[0] == 'I':\n            i_counter += 1\n    return i_counter",
        "grade-61": {
            "execution": 0
        },
        "134": "# your code here\n    return S.count(\"I\")",
        "grade-134": {
            "execution": 0
        },
        "162": "boredom = 0\n    for sentence in S.split(\"?\"):\n        boredom += sentence.count(\"I\")\n    return boredom\n    # return sum(sentence.count(\"I\") for sentence in S.split(\"?\"))",
        "grade-162": {
            "execution": 0
        }
    },
    {
        "intent": "from typing import List\n\ndef count_up_to(n: int) -> List[int]:\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n",
        "snippet": [
            "    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n"
        ],
        "simplified": "Implement a function that takes an non-negative integer and returns an array of the first n integers that are prime numbers and less than n. for",
        "task_id": "96",
        "186": "lst = [2]\n    lst2 = []\n    if n < 3:\n        return lst2\n    else:\n        for i in range(3, n+1):\n            for j in range(2, i):\n                if i % j == 0:\n                    break\n            else:\n                lst.append(i)\n        return lst\n\nprint(count_up_to(0))\nprint(count_up_to(1))\nprint(count_up_to(2))\nprint(count_up_to(5))\nprint(count_up_to(11))\nprint(count_up_to(13))\nprint(count_up_to(18))\nprint(count_up_to(20))",
        "grade-186": {
            "execution": 0
        },
        "28": "prime_numbers = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_numbers.append(i)\n    return prime_numbers",
        "grade-28": {
            "execution": 1
        },
        "6": "# implement count_up_to\n    # 2,3,5,7,11,13,17,19\n    primes = []\n    candidate = 2\n    while len(primes) < n:\n        is_prime = True\n        for number in primes:\n            if candidate % number == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(candidate)\n        candidate += 1\n    return primes",
        "grade-6": {
            "execution": 0
        },
        "74": "if n <= 1:\n        return []\n    ret_list = []\n    for x in range(2, n):\n        is_prime = True\n        for y in range(2, x):\n            if x % y == 0:\n                is_prime = False\n                break\n        if is_prime:\n            ret_list.append(x)\n    return ret_list",
        "grade-74": {
            "execution": 1
        },
        "66": "result = []\n    for x in range(2, n):\n        is_prime = True\n        for y in range(2, x):\n            if x % y == 0:\n                is_prime = False\n                break\n        if is_prime:\n            result.append(x)\n    return result",
        "grade-66": {
            "execution": 1
        },
        "59": "# Handle special cases\n    if n <= 1:\n        return []\n    if n == 2:\n        return [2]\n\n    prime_numbers = [2]\n\n    for i in range(3, n):\n        is_prime = True\n        for number in prime_numbers:\n            if i % number == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_numbers.append(i)\n\n    return prime_numbers",
        "grade-59": {
            "execution": 1
        },
        "36": "if n == 0:\n        return []\n    else:\n        lst = [2]\n        i = 3\n        while i < n:\n            for j in range(2, i):\n                if i % j == 0:\n                    break\n            else:\n                lst.append(i)\n            i += 1\n        return lst",
        "grade-36": {
            "execution": 0
        },
        "26": "a = []\n    for i in range(2, n):\n        for j in range(2, i):\n            if (i % j) == 0:\n                break\n        else:\n            a.append(i)\n    return a\nprint(count_up_to(0))",
        "grade-26": {
            "execution": 1
        },
        "198": "if n < 2:\n        return []\n    else:\n        initial_list = [i for i in range(2, n)]\n        l = []\n        for i in initial_list:\n            for j in range(2, i):\n                if i % j == 0:\n                    break\n            else:\n                l.append(i)\n        return l",
        "grade-198": {
            "execution": 1
        },
        "157": "if n <= 1:\n        return []\n    primes = [2]\n    for num in range(3, n):\n        for prime in primes:\n            if num % prime == 0:\n                break\n        else:\n            primes.append(num)\n    return primes",
        "grade-157": {
            "execution": 1
        },
        "22": "assert n >= 0, 'n cannot be negative'\n    if n == 0:\n        return []\n    primes = [2]\n    for x in range(3, n, 2):\n        is_prime = True\n        for y in range(3, x, 2):\n            if x % y == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(x)\n    return primes",
        "grade-22": {
            "execution": 0
        },
        "169": "# TODO: complete the implementation of the function\n    pass",
        "grade-169": {
            "execution": 0
        },
        "120": "# TODO: implement this function\n    # 1 is not a prime number\n    if n < 2:\n        return []\n    elif n == 2:\n        return [2]\n    else:\n        prime_array = [2]\n        for i in range(3, n):\n            is_prime = True\n            for j in range(2, i):\n                if i % j == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                prime_array.append(i)\n        return prime_array",
        "grade-120": {
            "execution": 1
        },
        "8": "count = []\n    if n < 2:\n        return count\n    count.append(2)\n    i = 3\n    while i < n:\n        if all(i % x != 0 for x in range(2, i)):\n            count.append(i)\n        i += 2\n    return count",
        "grade-8": {
            "execution": 1
        },
        "7": "if n < 2:\n        return []\n    primes = [2]\n    for i in range(3, n, 2):\n        if i >= n:\n            break\n        is_prime = True\n        for j in range(3, int(i ** 0.5) + 1, 2):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes",
        "grade-7": {
            "execution": 1
        },
        "23": "if n <= 1:\n        return []\n    is_prime = [False, False] + [True] * (n - 1)\n    primes = []\n    for i in range(2, n):\n        if is_prime[i]:\n            primes.append(i)\n            for k in range(i, n+1, i):\n                is_prime[k] = False\n    return primes",
        "grade-23": {
            "execution": 1
        },
        "57": "result = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            result.append(i)\n    return result\n\nassert count_up_to(0) == []\nassert count_up_to(1) == []\nassert count_up_to(5) == [2,3]\nassert count_up_to(11) == [2,3,5,7]\nassert count_up_to(20) == [2,3,5,7,11,13,17,19]\nassert count_up_to(18) == [2,3,5,7,11,13,17]",
        "grade-57": {
            "execution": 1
        },
        "62": "#prime number is a number that is only divisible by itself and 1.\n    #Example of prime number: 2,3,5,7,11,13,17,19\n    #create an empty list\n    prime_number_list = []\n    #loop through the range of 1 to n+1\n    for i in range(1,n+1):\n        #check if the number is prime\n        if is_prime(i):\n            #if the number is prime, append the number to the list\n            prime_number_list.append(i)\n    #return the list\n    return prime_number_list",
        "grade-62": {
            "execution": 0
        },
        "145": "if n < 2:\n        return []\n    primes = [2]\n    for i in range(3, n):\n        for j in primes:\n            if i % j == 0:\n                break\n        else:\n            primes.append(i)\n    return primes\n\nimport pytest",
        "grade-145": {
            "execution": 0
        },
        "172": "if n == 0:\n        return []\n    res = []\n    for i in range(2, n):\n        flag = 0\n        for j in range(2, i):\n            if i % j == 0:\n                flag = 1\n                break\n        if flag == 0:\n            res.append(i)\n    return res",
        "grade-172": {
            "execution": 1
        }
    },
    {
        "intent": "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n",
        "snippet": [
            "    return [(e + 1) for e in l]\n"
        ],
        "simplified": "Return list with elements incremented by 1.",
        "task_id": "42",
        "129": "new_list = []\n    for i in l:\n        new_list.append(i + 1)\n    return new_list",
        "grade-129": {
            "execution": 1
        },
        "10": "return [elem + 1 for elem in l]",
        "grade-10": {
            "execution": 1
        },
        "1": "return [x + 1 for x in l]\n\nprint(incr_list([1, 2, 3]))\nprint(incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]))",
        "grade-1": {
            "execution": 1
        },
        "151": "return [x + 1 for x in l]",
        "grade-151": {
            "execution": 1
        },
        "45": "for i in range(len(l)):\n        l[i] += 1\n    return l\n\nprint(incr_list([1, 2, 3]))\nprint(incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]))",
        "grade-45": {
            "execution": 1
        },
        "30": "return [e + 1 for e in l]\n\nprint(incr_list([1, 2, 3]))",
        "grade-30": {
            "execution": 1
        },
        "24": "return [e + 1 for e in l]\n\nincr_list([1, 2, 3])",
        "grade-24": {
            "execution": 1
        },
        "12": "new_list = []\n    for i in l:\n        new_list.append(i + 1)\n    return new_list",
        "grade-12": {
            "execution": 1
        },
        "191": "# l[:] mutates the list in place; returns None, but we don't\n    # care about the return value, so we can use the \"discard\" operator '_'\n    _ = [elem + 1 for elem in l]\n    return l",
        "grade-191": {
            "execution": 0
        },
        "9": "return [i + 1 for i in l]",
        "grade-9": {
            "execution": 1
        },
        "143": "l_copy = l[:] # copy list\n    for i in range(len(l_copy)):\n        l_copy[i] += 1\n    return l_copy",
        "grade-143": {
            "execution": 1
        },
        "165": "return [x + 1 for x in l]\n\nprint(incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]))",
        "grade-165": {
            "execution": 1
        },
        "104": "return [x + 1 for x in l]\n\nprint(incr_list([1, 2, 3]))\nprint(incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]))",
        "grade-104": {
            "execution": 1
        },
        "7": "return [e + 1 for e in l]",
        "grade-7": {
            "execution": 1
        },
        "118": "if len(l) == 0:\n        return []\n    return [l[0] + 1] + incr_list(l[1:])",
        "grade-118": {
            "execution": 1
        },
        "75": "return [num + 1 for num in l]",
        "grade-75": {
            "execution": 1
        },
        "2": "return [i + 1 for i in l]",
        "grade-2": {
            "execution": 1
        },
        "192": "assert isinstance(l, list)\n    return [i + 1 for i in l]\n\nprint(incr_list([1, 2, 3]))\nprint(incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]))",
        "grade-192": {
            "execution": 1
        },
        "149": "return [e + 1 for e in l]\n\nincr_list([1, 2, 3])\n\nincr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])",
        "grade-149": {
            "execution": 1
        },
        "21": "return [n + 1 for n in l]\n\nimport doctest\ndoctest.testmod()\n\nfrom typing import List",
        "grade-21": {
            "execution": 1
        }
    },
    {
        "intent": "from typing import List\n\ndef count_nums(arr: List[int]) -> int:\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n",
        "snippet": [
            "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n"
        ],
        "simplified": "Write a function count_nums which takes an array of integers and returns the number of elements which has a sum of digits > 0. If a number is negative, then its first signed digit will be negative: e.g. -123 has signed digits -1, 2, and 3.",
        "task_id": "108",
        "30": "count = 0\n    for num in arr:\n        # Turn the number into string representation\n        num_string = str(num)\n        # Initialize the sum of digits to 0\n        digit_sum = 0\n        # Iterate over the digits\n        for digit in num_string:\n            # Check if the first character is '-' and skip it if it is\n            if digit == '-':\n                continue\n            # Add the digit to the sum\n            digit_sum += int(digit)\n        # If the sum is > 0, increment the counter\n        if digit_sum > 0:\n            count += 1\n    return count",
        "grade-30": {
            "execution": 0
        },
        "6": "return len([num for num in arr if sum(map(int, str(abs(num)))) > 0])",
        "grade-6": {
            "execution": 0
        },
        "82": "count = 0\n    for i in arr:\n        a = 0\n        if i < 0:\n            i = -i\n        while i > 0:\n            a += i % 10\n            i //= 10\n        if a > 0:\n            count += 1\n    return count",
        "grade-82": {
            "execution": 0
        },
        "69": "# YOUR CODE HERE",
        "grade-69": {
            "execution": 0
        },
        "63": "count = 0\n    for n in arr:\n        sum = 0\n        if n < 0:\n            n = -n\n        while n > 0:\n            sum += n % 10\n            n //= 10\n        if sum > 0:\n            count += 1\n    return count",
        "grade-63": {
            "execution": 0
        },
        "37": "if not arr:\n        return 0\n    count = 0\n    for num in arr:\n        if num < 0:\n            sum_of_digits = num\n        else:\n            sum_of_digits = sum([int(i) for i in str(num)])\n        if sum_of_digits > 0:\n            count += 1\n    return count",
        "grade-37": {
            "execution": 0
        },
        "27": "return sum(sum(map(int, str(i))) > 0 for i in arr)",
        "grade-27": {
            "execution": 0
        },
        "180": "#return 0\n    #return 1\n    #return 3\n    #pass\n    return sum(1 for n in arr if sum(map(int, str(abs(n)))) > 0)",
        "grade-180": {
            "execution": 0
        },
        "23": "count = 0\n    for num in arr:\n        if len(str(num)) == 1:\n            if num > 0:\n                count += 1\n        else:\n            sum_of_digits = 0\n            for digit in str(num):\n                if digit != '-':\n                    sum_of_digits += int(digit)\n            if sum_of_digits > 0:\n                count += 1\n    return count",
        "grade-23": {
            "execution": 0
        },
        "197": "count = 0\n    for num in arr:\n        string = str(num)\n        sum = 0\n        if num < 0:\n            sum += abs(int(string[0]))\n            i = 1\n        else:\n            i = 0\n        while i < len(string):\n            sum += int(string[i])\n            i += 1\n        if sum > 0:\n            count += 1\n    return count",
        "grade-197": {
            "execution": 0
        },
        "136": "# YOUR CODE HERE\n    raise NotImplementedError()",
        "grade-136": {
            "execution": 0
        },
        "8": "...",
        "grade-8": {
            "execution": 0
        },
        "7": "count = 0\n    for num in arr:\n        abs_num = abs(num)\n        while abs_num > 0:\n            count += abs_num % 10\n            abs_num //= 10\n    return count",
        "grade-7": {
            "execution": 0
        },
        "24": "return sum(sum(map(int, str(abs(num)))) > 0 for num in arr)",
        "grade-24": {
            "execution": 0
        },
        "61": "count = 0\n    for num in arr:\n        if sum_digits(num) > 0:\n            count += 1\n    return count",
        "grade-61": {
            "execution": 0
        },
        "66": "def sum_of_digits(num: int) -> int:\n        \"\"\"\n        Write a function sum_of_digits which takes an integer and returns the\n        sum of its digits.\n        >>> sum_of_digits(0) == 0\n        >>> sum_of_digits(123) == 6\n        >>> sum_of_digits(-1) == 1\n        >>> sum_of_digits(-123) == 6\n        \"\"\"\n        pass\n    \n    pass",
        "grade-66": {
            "execution": 0
        },
        "168": "count = 0\n    for num in arr:\n        abs_num = abs(num)\n        if sum([int(digit) for digit in str(abs_num)]) > 0:\n            count += 1\n    return count",
        "grade-168": {
            "execution": 0
        },
        "184": "count = 0\n    for i in arr:\n        sum_digits = 0\n        if i >= 0:\n            for j in str(i):\n                sum_digits += int(j)\n        else:\n            for j in str(i)[1:]:\n                sum_digits += int(j)\n        if sum_digits > 0:\n            count += 1\n    return count",
        "grade-184": {
            "execution": 0
        },
        "54": "# TODO\n    #   Figure out how to count digits of a negative number\n    #   Split each number into digits\n    #   Sum the digits of each number\n    #   Return the count of numbers which have a sum greater than 0\n    count = 0\n    for i in arr:\n        if sum(map(int, str(abs(i)))) > 0:\n            count += 1\n    return count",
        "grade-54": {
            "execution": 0
        },
        "134": "nums = 0\n    for i in arr:\n        nums += sum([int(d) for d in str(abs(i))]) > 0\n    return nums",
        "grade-134": {
            "execution": 0
        }
    },
    {
        "intent": "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n",
        "snippet": [
            "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n"
        ],
        "simplified": "Write a function which sorts the given list of integers in ascending order according to the sum of their digits. Note: if there are several items with similar sum of their digits, order them based on their index in original list.",
        "task_id": "145",
        "195": "# your code here\n    return sorted(nums, key=lambda num: (sum(map(int, str(abs(num)))), nums.index(num)))",
        "grade-195": {
            "execution": 0
        },
        "30": "# if nums is empty list: return empty list\n    if len(nums) == 0:\n        return []\n    # create a list of lists\n    # each list element is [index, sum of digits, num]\n    lst = []\n    for idx, num in enumerate(nums):\n        lst.append([idx, sum(map(int, list(str(abs(num))))), num])\n    # sort the list by sum of digits and then by index\n    lst.sort(key=lambda x: (x[1], x[0]))\n    # get only nums from the list\n    return [x[2] for x in lst]",
        "grade-30": {
            "execution": 0
        },
        "6": "return sorted(range(len(nums)), key=lambda i: sum(map(int, str(nums[i]))))",
        "grade-6": {
            "execution": 0
        },
        "78": "nums_new = []\n    for num in nums:\n        digits = [int(i) for i in str(num)]\n        nums_new.append(sum(digits))\n    print(nums_new)\n    return nums",
        "grade-78": {
            "execution": 0
        },
        "68": "points = [sum(map(int, str(n))) for n in nums]\n    points_index = list(enumerate(points))\n    points_index.sort(key=lambda x: (x[1], x[0]))\n    return [nums[index] for index, point in points_index]",
        "grade-68": {
            "execution": 0
        },
        "62": "return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))",
        "grade-62": {
            "execution": 0
        },
        "38": "# Key: point value, Value: original indexes\n    point_map = {}\n    for i, num in enumerate(nums):\n        point = 0\n        for digit in str(num):\n            point += int(digit)\n        point_map.setdefault(point, []).append(i)\n\n    # Restore the original list\n    ordered_nums = [0] * len(nums)\n    ordered_keys = sorted(point_map.keys())\n    ordered_indexes = []\n    for key in ordered_keys:\n        ordered_indexes += point_map[key]\n    for i, index in enumerate(ordered_indexes):\n        ordered_nums[i] = nums[index]\n    return ordered_nums",
        "grade-38": {
            "execution": 0
        },
        "28": "# TODO: Complete this function\n    def get_digit_sum(n):\n        return sum(int(x) for x in str(n))\n\n    return sorted(nums, key=lambda n: (get_digit_sum(n), nums.index(n)))",
        "grade-28": {
            "execution": 0
        },
        "164": "return sorted(nums, key=lambda num: (sum(map(int, str(abs(num)))), nums.index(num)))",
        "grade-164": {
            "execution": 0
        },
        "22": "return sorted(nums, key=lambda x: sum(int(d) for d in str(abs(x))))",
        "grade-22": {
            "execution": 0
        },
        "178": "nums_with_digits_sum = {sum(map(int, str(n))): n for n in nums}\n    sorted_keys = sorted(nums_with_digits_sum.keys())\n    sorted_nums = [nums_with_digits_sum[key] for key in sorted_keys]\n    return sorted_nums",
        "grade-178": {
            "execution": 0
        },
        "124": "# calculate sum of digits for every element of the list\n    sums = [sum(int(digit) for digit in str(num)) for num in nums]\n    # create a list of tuples (sum of digits, index in original list)\n    sums_with_index = list(zip(sums, range(len(nums))))\n    # sort the list\n    sums_with_index.sort()\n    # return the ordered list of elements\n    return [nums[item[1]] for item in sums_with_index]",
        "grade-124": {
            "execution": 0
        },
        "8": "sorted_nums = sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))\n    return sorted_nums",
        "grade-8": {
            "execution": 0
        },
        "7": "return sorted(nums, key=lambda x: (sum(int(i) for i in str(abs(x))), nums.index(x)))",
        "grade-7": {
            "execution": 0
        },
        "23": "dic = {}\n    for index, num in enumerate(nums):\n        if abs(num) in dic:\n            dic[abs(num)].append(index)\n        else:\n            dic[abs(num)] = [index]\n    nums = sorted(nums, key=lambda x: sum(int(i) for i in str(abs(x))))\n    res = [None] * len(nums)\n    for index, num in enumerate(nums):\n        res[dic[abs(num)].pop(0)] = num\n    return res",
        "grade-23": {
            "execution": 0
        },
        "60": "import functools\n    import operator\n    return sorted(nums, key=lambda x: sum(map(int, str(x))), reverse=False)",
        "grade-60": {
            "execution": 0
        },
        "64": "return [num for num in sorted(sorted(nums), key=lambda x: sum(map(int, str(abs(x)))))]",
        "grade-64": {
            "execution": 0
        },
        "151": "nums.sort(key=lambda x: (sum(map(int, str(abs(x)))), x))\n    return nums",
        "grade-151": {
            "execution": 0
        },
        "183": "return sorted(nums, key=lambda item: (sum(int(digit) for digit in str(item)), nums.index(item)))",
        "grade-183": {
            "execution": 0
        },
        "169": "pass\n\nprint(order_by_points([1, 11, -1, -11, -12]))\nprint(order_by_points([]))",
        "grade-169": {
            "execution": 0
        }
    },
    {
        "intent": "from typing import List\n\ndef sum_squares(lst: List[int]) -> int:\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n",
        "snippet": [
            "    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n"
        ],
        "simplified": "\" This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.",
        "task_id": "142",
        "173": "sum = 0\n    lst = [e ** 2 if i % 3 == 0 else e ** 3 if i % 4 == 0 and i % 3 != 0 else e for i, e in enumerate(lst)]\n    for i in lst:\n        sum += i\n    return sum\n\nlst = [-1,-5,2,-1,-5]\n\nsum_squares(lst)",
        "grade-173": {
            "execution": 1
        },
        "28": "a = 0\n    for x in range(len(lst)):\n        if x % 3 == 0:\n            lst[x] = lst[x]**2\n        elif x % 4 == 0 and x % 3 != 0:\n            lst[x] = lst[x]**3\n    for y in lst:\n        a += y\n    return a\nsum_squares([1,2,3])\nsum_squares([])\nsum_squares([-1,-5,2,-1,-5])",
        "grade-28": {
            "execution": 1
        },
        "6": "sum_list = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum_list += lst[i] * lst[i]\n        elif i % 4 == 0:\n            sum_list += lst[i] * lst[i] * lst[i]\n        else:\n            sum_list += lst[i]\n    return sum_list",
        "grade-6": {
            "execution": 1
        },
        "70": "s = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            s += lst[i]**2\n        elif i % 4 == 0:\n            s += lst[i]**3\n        else:\n            s += lst[i]\n    return s",
        "grade-70": {
            "execution": 1
        },
        "62": "#Make a copy of the list to alter\n    lst_squared = lst[:]\n    #Iterate through the list\n    for i in range(len(lst_squared)):\n        #If the index is a multiple of 3, square the entry\n        if i % 3 == 0:\n            lst_squared[i] **= 2\n        #If the index is a multiple of 4 but not a multiple of 3, cube the entry\n        elif i % 4 == 0:\n            lst_squared[i] **= 3\n    #Sum all elements of the new list and return\n    return sum(lst_squared)\n\nprint(sum_squares([1,2,3]))\nprint(sum_squares([]))\nprint(sum_squares([-1,-5,2,-1,-5]))\n\nlst = [1,2,3]\nlst_squared = lst[:]\nfor i in range(len(lst_squared)):\n    if i % 3 == 0:\n        lst_squared[i] **= 2\n    elif i % 4 == 0:\n        lst_squared[i] **= 3\n\nprint(lst_squared)",
        "grade-62": {
            "execution": 1
        },
        "57": "#For a list with no entries, return 0\n    if not lst:\n        return 0\n    #For a list with entries, find all entries whose index is a multiple of 3\n    #Square those entries\n    squares = [(index, element ** 2) for index, element in enumerate(lst) if index % 3 == 0]\n    #For a list with entries, find all entries whose index is a multiple of 4 and not a multiple of 3\n    #Cube those entries\n    cubes = [(index, element ** 3) for index, element in enumerate(lst) if index % 4 == 0 and index % 3 != 0]\n    #For all entries in the list, replace the entry whose index is a multiple of 3 with the new entry\n    for index, element in squares:\n        lst[index] = element\n    #For all entries in the list, replace the entry whose index is a multiple of 4 and not a multiple of 3 with the new entry\n    for index, element in cubes:\n        lst[index] = element\n    #Return the sum of all entries in the list\n    return sum(lst)",
        "grade-57": {
            "execution": 1
        },
        "35": "total = 0\n    for index, i in enumerate(lst):\n        if index % 3 == 0:\n            total += i ** 2\n        elif index % 4 == 0:\n            total += i ** 3\n        else:\n            total += i\n    return total",
        "grade-35": {
            "execution": 1
        },
        "26": "output = 0\n    for i in range(len(lst)):\n        index = i + 1\n        if index % 3 == 0 and index % 4 == 0:\n            lst[i] = lst[i] ** 3\n        elif index % 3 == 0:\n            lst[i] = lst[i] ** 2\n        output += lst[i]\n    return output",
        "grade-26": {
            "execution": 0
        },
        "183": "# YOUR CODE GOES HERE\n    for index, num in enumerate(lst):\n        if index % 3 == 0:\n            lst[index] = num ** 2\n        elif index % 4 == 0 and index % 3 != 0:\n            lst[index] = num ** 3\n    return sum(lst)\nsum_squares([1,2,3])\nsum_squares([])\nsum_squares([-1,-5,2,-1,-5])",
        "grade-183": {
            "execution": 1
        },
        "147": "lst[::3] = (i ** 2 for i in lst[::3])\n    lst[::4] = (i ** 3 for i in lst[::4])\n    return sum(lst)",
        "grade-147": {
            "execution": 0
        },
        "22": "# Write code here\n    for x in range(len(lst)):\n        if x % 3 == 0:\n            lst[x] **= 2\n        elif x % 4 == 0:\n            lst[x] **= 3\n    return sum(lst)",
        "grade-22": {
            "execution": 1
        },
        "160": "return_value = 0\n    for i in range(len(lst)):\n        if (i % 3 == 0):\n            lst[i] = lst[i] ** 2\n        elif (i % 4 == 0 and i % 3 != 0):\n            lst[i] = lst[i] ** 3\n        return_value += lst[i]\n    return return_value",
        "grade-160": {
            "execution": 1
        },
        "114": "sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i] * lst[i]\n        elif i % 4 == 0:\n            sum += lst[i] * lst[i] * lst[i]\n        else:\n            sum += lst[i]\n    return sum\n\nprint(sum_squares([-1,-5,2,-1,-5]))",
        "grade-114": {
            "execution": 1
        },
        "8": "for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0:\n            lst[i] = lst[i] ** 3\n    return sum(lst)",
        "grade-8": {
            "execution": 1
        },
        "7": "# Write your code here.\n    new_list = []\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            new_list.append(lst[i]**2)\n        elif i % 4 == 0 and i % 3 != 0:\n            new_list.append(lst[i]**3)\n        else:\n            new_list.append(lst[i])\n    return sum(new_list)",
        "grade-7": {
            "execution": 1
        },
        "23": "pass",
        "grade-23": {
            "execution": 0
        },
        "55": "res = 0\n    for idx, num in enumerate(lst):\n        # all entries of index multiple of 3, square them\n        if idx % 3 == 0:\n            num = num * num\n        # all entries of index multiple of 4 and not multiple of 3, cube them\n        elif idx % 4 == 0 and idx % 3 != 0:\n            num = num * num * num\n        res += num\n    return res",
        "grade-55": {
            "execution": 1
        },
        "59": "for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] **= 2\n        elif i % 4 == 0:\n            lst[i] **= 3\n        else:\n            continue\n    sum_lst = sum(lst)\n    return sum_lst\n\nsum_squares([1,2,3])\nsum_squares([])\nsum_squares([-1,-5,2,-1,-5])",
        "grade-59": {
            "execution": 1
        },
        "136": "lst_sum = 0\n    for i in range(len(lst)):\n        if i%3 == 0:\n            lst_sum += lst[i]**2\n        elif i%4 == 0 and i%3 != 0:\n            lst_sum += lst[i]**3\n        else:\n            lst_sum += lst[i]\n    return lst_sum",
        "grade-136": {
            "execution": 1
        },
        "163": "return lst",
        "grade-163": {
            "execution": 0
        }
    },
    {
        "intent": "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n",
        "snippet": [
            "    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n"
        ],
        "simplified": "Write a function that takes a message, and encodes in such a way that it swaps case of all letters, replaces all vowels in the message with the letter that appears 2 places ahead of that vowel in the english alphabet. Assume only letters.",
        "task_id": "93",
        "32": "message = message.swapcase()\n    vowels = 'aeiou'\n    def f(c):\n        if c in vowels:\n            return vowels[(vowels.index(c) + 2) % len(vowels)]\n        return c\n    return ''.join(f(c) for c in message)\nencode('a i o w w')",
        "grade-32": {
            "execution": 0
        },
        "6": "lower = 'abcdefghijklmnopqrstuvwxyz'\n    upper = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    vowels = 'aeiou'\n    encoded = ''\n    for letter in message:\n        if letter in lower:\n            letter = upper[lower.index(letter)]\n            if letter in vowels:\n                letter = upper[(lower.index(letter) + 2) % len(lower)]\n        encoded += letter\n    return encoded",
        "grade-6": {
            "execution": 0
        },
        "90": "alphabet = [chr(i) for i in range(ord('a'), ord('z') + 1)]\n    vowels = 'aeiou'\n    encoded = ''\n    for letter in message:\n        if letter.isalpha():\n            if letter.lower() in vowels:\n                if letter.isupper():\n                    encoded += vowels[(vowels.index(letter.lower()) + 2) % 5].upper()\n                else:\n                    encoded += vowels[(vowels.index(letter) + 2) % 5]\n            else:\n                if letter.isupper():\n                    encoded += alphabet[(alphabet.index(letter.lower()) + 2) % 26].upper()\n                else:\n                    encoded += alphabet[(alphabet.index(letter) + 2) % 26]\n        else:\n            encoded += letter\n    return encoded",
        "grade-90": {
            "execution": 0
        },
        "79": "return",
        "grade-79": {
            "execution": 0
        },
        "73": "encoder = Encoder(message)\n    return encoder.encode()",
        "grade-73": {
            "execution": 0
        },
        "45": "# Create a list of letters, and vowels based on the \n    # alphabet\n    # Create a mapping dictionary to store the pairs\n    # Loop through the message\n    # Check if the letter is uppercase or lowercase\n    # Check if the letter is a vowel\n    # Store the letter in the mapping dictionary with its mapped letter\n    # Use the mapping dictionary to swap the letters\n    # Join the letters and return the encoded message\n    pass",
        "grade-45": {
            "execution": 0
        },
        "30": "vowels = 'AEIOUaeiou'\n    encoded = ''\n    for char in message:\n        if char in vowels:\n            encoded += chr(ord(char) + 2)\n        else:\n            encoded += char\n    return encoded.swapcase()",
        "grade-30": {
            "execution": 1
        },
        "183": "message = message.swapcase()\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_message = ''\n    for letter in message:\n        if letter.lower() in vowels:\n            index = vowels.index(letter.lower())\n            if letter.islower():\n                letter = vowels[(index + 2) % 5]\n            else:\n                letter = vowels[(index + 2) % 5].upper()\n        new_message += letter\n    return new_message",
        "grade-183": {
            "execution": 0
        },
        "24": "alpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    vowels = 'AEIOU'\n    encoded = ''\n    for letter in message:\n        if letter.isalpha():\n            encoded_letter = letter.swapcase()\n            if encoded_letter in vowels:\n                index = alpha.index(encoded_letter)\n                encoded_letter = alpha[(index + 2) % len(alpha)]\n            encoded += encoded_letter\n        else:\n            encoded += letter\n    return encoded",
        "grade-24": {
            "execution": 0
        },
        "146": "return \"\"",
        "grade-146": {
            "execution": 0
        },
        "8": "new_message = message.swapcase()\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    for i in range(len(new_message)):\n        if new_message[i] in vowels:\n            new_message = new_message[:i] + \\\n                          chr(ord(new_message[i]) + 2) + \\\n                          new_message[i + 1:]\n    return new_message\nprint(encode('test'))\nprint(encode('This is a message'))",
        "grade-8": {
            "execution": 0
        },
        "7": "# Your code here",
        "grade-7": {
            "execution": 0
        },
        "25": "encoded_message = \"\"\n    vowels = \"aeiou\"\n    for letter in message:\n        if letter in vowels:\n            new_letter = chr(ord(letter) + 2)\n            encoded_message += new_letter\n        else:\n            encoded_message += letter.swapcase()\n    return encoded_message",
        "grade-25": {
            "execution": 0
        },
        "71": "encoded_message = ''\n    for character in message:\n        if character.islower():\n            encoded_message += character.upper()\n        elif character.isupper():\n            encoded_message += character.lower()\n        else:\n            encoded_message += character\n    translated_vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'y'}\n    for char, translated_char in translated_vowels.items():\n        encoded_message = encoded_message.replace(char, translated_char)\n    return encoded_message",
        "grade-71": {
            "execution": 0
        },
        "75": "encoded_message = ''\n    for letter in message:\n        if letter.isupper():\n            encoded_message += letter.lower()\n        elif letter.islower():\n            encoded_message += letter.upper()\n        elif letter in vowels:\n            encoded_message += (vowels[vowels.index(letter) + 2] if vowels.index(letter) < len(vowels) - 2 \n                                else vowels[(vowels.index(letter) + 2) % len(vowels)])\n        else:\n            encoded_message += letter\n    return encoded_message\n\nprint(encode('test'))\nprint(encode('This is a message'))",
        "grade-75": {
            "execution": 0
        },
        "172": "return apply_transformation(message, encode_letter)",
        "grade-172": {
            "execution": 0
        },
        "189": "# if not message:\n    #     return message\n    # elif message[0].isupper():\n    #     return message[0].lower() + encode(message[1:])\n    # elif message[0].islower():\n    #     return message[0].upper() + encode(message[1:])\n    # elif message[0] in 'aeiou':\n    #     return 'e' + encode(message[1:])\n    # elif message[0] == 'z':\n    #     return 'b' + encode(message[1:])\n    # else:\n    #     return message[0] + encode(message[1:])\n    ret = ''\n    for letter in message:\n        if letter.isupper():\n            ret += letter.lower()\n        elif letter.islower():\n            ret += letter.upper()\n        elif letter in 'aeiou':\n            ret += 'e'\n        elif letter == 'z':\n            ret += 'b'\n        else:\n            ret += letter\n    return ret",
        "grade-189": {
            "execution": 0
        },
        "66": "# TODO: write the contents of your function here\n    return \"\"",
        "grade-66": {
            "execution": 0
        },
        "145": "encoded_message = \"\"\n    vowels = ('a', 'e', 'i', 'o', 'u')\n    for i in message:\n        if i.isupper():\n            i = i.lower()\n        elif i.islower():\n            i = i.upper()\n        if i in vowels:\n            i = vowels[(vowels.index(i) + 2) % len(vowels)]\n        encoded_message += i\n    return encoded_message",
        "grade-145": {
            "execution": 0
        },
        "72": "message = message.upper()\n    vowels = ['A', 'E', 'I', 'O', 'U']\n    new_message = ''\n    new_letter = ''\n    for letter in message:\n        if letter in vowels:\n            new_letter = vowels[(vowels.index(letter) + 2) % 5]\n        else:\n            new_letter = letter\n        new_message += new_letter\n    return new_message",
        "grade-72": {
            "execution": 0
        }
    },
    {
        "intent": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n",
        "snippet": [
            "    return n**2\n"
        ],
        "simplified": "Imagine a road that's a perfectly straight infinitely long line. n cars are driving left to right; simultaneously, a different set of n cars are driving right to left. The two sets of cars start out being very far from each other. All cars move in the same speed. Two cars are said to collide when a car that's moving left to right hits a car that's moving right to left. However, the cars are infinitely sturdy and strong; as a result, they continue moving in their trajectory as if they did not collide. This function outputs the number of such collisions.",
        "task_id": "41",
        "180": "cars_left_to_right = list(range(n))\n    cars_right_to_left = list(range(n))\n    collisions = 0\n    while len(cars_left_to_right) > 0 and len(cars_right_to_left) > 0:\n        if cars_left_to_right[0] == cars_right_to_left[0]:\n            collisions += 1\n            cars_left_to_right.pop(0)\n            cars_right_to_left.pop(0)\n        elif cars_left_to_right[0] < cars_right_to_left[0]:\n            cars_left_to_right.pop(0)\n        else:\n            cars_right_to_left.pop(0)\n    return collisions\n\n\nprint(car_race_collision(5))\nprint(car_race_collision(1))\nprint(car_race_collision(2))\nprint(car_race_collision(3))\nprint(car_race_collision(4))",
        "grade-180": {
            "execution": 0
        },
        "29": "# These arrays have n entries, where n is the number of cars in the race.\n    # Left_to_right[i] and right_to_left[i] refer to the i'th car in each direction,\n    # where i is counting from 0 to n-1.\n    # The cars are numbered sequentially as they move from left to right, and\n    # sequentially as they move from right to left.\n    # The i'th car from left to right has speed left_to_right[i]\n    # The i'th car from right to left has speed right_to_left[i]\n    left_to_right = np.random.randint(10, 30, size=n)\n    right_to_left = np.random.randint(10, 30, size=n)\n\n    # The race is like this:\n    # Car 0 is driving left to right at speed left_to_right[0].\n    # Car n-1 is driving right to left at speed right_to_left[n-1].\n    # Cars 0 and n-1 \"start\" at the same position.\n    # When car 0 advances its speed left_to_right[0] units, it passes car n-1, which\n    # at that point will have advanced right_to_left[n-1] units.\n    # So, car 0 and car n-1 collide when the distance between them is:\n    #     distance_car_0_from_starting_point - distance_car_n-1_from_starting_point = 0\n    # or, equivalently:\n    #     distance_car_0_from_starting_point = distance_car_n-1_from_starting_point\n    # Rearranging terms, we get:\n    #     distance_car_0_from_starting_point = left_to_right[0] * t\n    #     distance_car_n-1_from_starting_point = right_to_left[n-1] * t\n    #     left_to_right[0] * t = right_to_left[n-1] * t\n    #     left_to_right[0] = right_to_left[n-1]\n    #",
        "grade-29": {
            "execution": 0
        },
        "6": "# A few default cases\n    if n < 0:\n        return 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n\n    # 1. the left-to-right and right-to-left cars are equally spaced\n    #    (i.e. they have the same speed)\n    # 2. the left-to-right cars are spaced with a distance of 1,\n    #    and the right-to-left cars are spaced with a distance of 2,\n    #    and vice versa.\n    distances = [1] * n + [2] * n\n\n    # Count the number of collisions\n    result = 0\n    for _ in range(n):\n        for car_1 in range(n * 2):\n            for car_2 in range(car_1 + 1, n * 2):\n                result += collision(car_1, car_2, distances)\n\n    return result",
        "grade-6": {
            "execution": 0
        },
        "77": "# create a random sequence of n numbers\n    cars = random.sample(range(1, 20 * n), n)\n    cars.sort()\n    # create a random sequence of n numbers\n    cars2 = random.sample(range(1, 20 * n), n)\n    cars2.sort()\n    # check for collision\n    return _car_race_collision(cars, cars2)",
        "grade-77": {
            "execution": 0
        },
        "67": "collisions = 0\n    current_right_to_left = list(range(n, 0, -1))\n    current_left_to_right = list(range(1, n + 1))\n    while current_right_to_left:\n        collisions += len(current_right_to_left)\n        if current_left_to_right:\n            car = current_left_to_right.pop(0)\n            if car > current_right_to_left[0]:\n                current_right_to_left.pop(0)\n    return collisions",
        "grade-67": {
            "execution": 0
        },
        "61": "# sort the cars by their start position and direction (left or right)\n    cars = [(start, direction) for start, direction in zip(list(range(n)), [i % 2 for i in range(n)])]\n    cars = sorted(cars, key=lambda x: (x[0], x[1]))\n\n    # the cars moving left to right will be at their initial position while the cars\n    # moving right to left will be at the end position;  so, no car will\n    # collide with itself\n    count = 0\n    # iterate over the cars moving left to right\n    for i in range(n):\n        # iterate over the cars moving right to left\n        for j in range(n):\n            # if the start position of the car moving left to right is greater than\n            # the start position of the car moving right to left\n            if cars[i][0] > cars[j][0]:\n                # then the cars will collide\n                count += 1\n            # else, the cars won't collide because the car moving left to right started\n            # left to the car moving right to left\n\n    return count",
        "grade-61": {
            "execution": 0
        },
        "37": "assert (n >= 0)\n\n    if n == 0:\n        return 0\n\n    # Calculate the number of collisions for a single car.\n    # Then adjust for the n cars.\n    num_collisions = int(n * (n - 1) / 2)\n    return num_collisions",
        "grade-37": {
            "execution": 0
        },
        "26": "#\n    # YOUR CODE HERE\n    #\n    pass",
        "grade-26": {
            "execution": 0
        },
        "190": "left_right_cars = [i for i in range(n)]\n    right_left_cars = [i for i in range(n - 1, -1, -1)]\n    collisions = 0\n    for i in range(n):\n        for j in range(n):\n            if left_right_cars[i] > right_left_cars[j]:\n                collisions += 1\n    return collisions",
        "grade-190": {
            "execution": 0
        },
        "153": "# 1 2 3 4 5\n    # 5 4 3 2 1\n    # left to right: 5 - (1 to 2) = 3\n    # right to left: 5 - (5 to 4) = 1\n    collisions = 0\n    for i in range(n):\n        collisions += n - (2 * i + 1)\n    return collisions",
        "grade-153": {
            "execution": 0
        },
        "22": "n_collisions = 0\n    return n_collisions",
        "grade-22": {
            "execution": 0
        },
        "166": "if n == 0:\n        return 0\n    # the left cars start from 0 to the left of the origin;\n    # the right cars start from 0 to the right of the origin\n    # two cars collide if the left-moving one ends up at the same\n    # position as the right-moving one.\n    # Since the cars travel at the same speed and they start out\n    # being very far from each other, we can assume that\n    # if two cars collide, they collide almost right away.\n    # Hence, each right-car collides with a total of n - 1 left-cars.\n    return (n - 1) * n // 2",
        "grade-166": {
            "execution": 0
        },
        "118": "# Brute force -- O(n^2)\n    # Try to improve by sorting the list of n numbers...\n    # ... then we need 2*log(n) time for each element -- O(n * log(n))\n\n    # This is essentially a problem of \"merge sort\"\n    # We can sort the left-to-right cars in O(n * log(n)) time (called an \"inversion\")\n    # We can sort the right-to-left cars in O(n * log(n)) time (called an \"inversion\")\n    # Then we can do a merge sort in O(n) time\n\n    # Now, how can we figure out the number of collisions?\n    # If the cars are sorted in order, we can just do the merge sort, except:\n    # Every time we take a car from the right-to-left list, we compare it to the car\n    # that's next in the left-to-right list.  If the left-to-right car is greater,\n    # then we know we have a collision.  We then skip all of the other cars in the\n    # left-to-right list that are greater than the one we just took from the right-to-left list.\n\n    # So, the left-to-right cars need to be sorted in reverse order.\n    # The right-to-left cars need to be sorted in regular order.\n\n    # This is a little tricky to implement, but it's possible.\n\n    # Actually, if we first sort the left-to-right cars, and the right-to-left cars, we'll\n    # be able to do the merge sort in O(n) time...\n    left_to_right_cars = sorted(range(n))\n    right_to_left_cars = sorted(range(n), reverse=True)\n\n    # There are four possible ways in which these lists are sorted:\n    # (1) Both lists are sorted in ascending order\n    # (2) Both lists are sorted in descending order\n    # (3) The left-to-right list is sorted in ascending order\n    # (4) The left-to-right list is sorted in descending order\n\n    # For example, if we have n = 3 cars, we might have the following lists:",
        "grade-118": {
            "execution": 0
        },
        "8": "return car_race_collision_solve(n)",
        "grade-8": {
            "execution": 0
        },
        "7": "left_to_right = list(range(n))\n    right_to_left = list(range(n))[::-1]\n    collision_counter = 0\n    while len(left_to_right) > 0 and len(right_to_left) > 0:\n        if left_to_right[0] == right_to_left[0]:\n            collision_counter += 1\n            left_to_right.pop(0)\n            right_to_left.pop(0)\n        elif left_to_right[0] < right_to_left[0]:\n            left_to_right.pop(0)\n        else:\n            right_to_left.pop(0)\n    return collision_counter",
        "grade-7": {
            "execution": 0
        },
        "23": "ncars_left2right = deque([(k, 0) for k in range(n)])\n    ncars_right2left = deque([(k, 0) for k in range(n)])\n    num_collisions = 0\n    while len(ncars_left2right) > 0 and len(ncars_right2left) > 0:\n        car_left2right = ncars_left2right.popleft()\n        car_right2left = ncars_right2left.popleft()\n        if car_left2right[1] == car_right2left[1]:\n            num_collisions += 1\n        else:\n            if car_left2right[1] < car_right2left[1]:\n                ncars_left2right.append((car_left2right[0], car_left2right[1] + 1))\n            else:\n                ncars_right2left.append((car_right2left[0], car_right2left[1] + 1))\n    return num_collisions",
        "grade-23": {
            "execution": 0
        },
        "58": "...",
        "grade-58": {
            "execution": 0
        },
        "63": "left_to_right = set()\n    right_to_left = set()\n    for i in range(n):\n        left_to_right.add(i)\n        right_to_left.add(n - i - 1)\n    collisions = 0\n    while len(left_to_right) > 0 and len(right_to_left) > 0:\n        if min(left_to_right) < max(right_to_left):\n            collisions += 1\n        right_to_left.remove(max(right_to_left))\n        left_to_right.remove(min(left_to_right))\n    return collisions",
        "grade-63": {
            "execution": 0
        },
        "142": "# the code below is very inefficient, so to avoid timeouts, we restrict\n    # the maximum number of cars to be 50.\n    assert n <= 50\n    return np.sum(np.sum(n * (n - 1) * [0, 1, 2]) * [0, 1])",
        "grade-142": {
            "execution": 0
        },
        "169": "num_collisions = 0\n    car_locs = set()\n    for i in range(n):\n        new_loc = random.randint(0, 10000)\n        if new_loc in car_locs:\n            num_collisions += 1\n        car_locs.add(new_loc)\n    return num_collisions",
        "grade-169": {
            "execution": 0
        }
    },
    {
        "intent": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n",
        "snippet": [
            "    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n"
        ],
        "simplified": "Checks if given string is a palindrome",
        "task_id": "48",
        "175": "for i in range(0, len(text) // 2):\n        if text[i] != text[-i - 1]:\n            return False\n    return True",
        "grade-175": {
            "execution": 1
        },
        "25": "return text == text[::-1]\n\nimport doctest\ndoctest.testmod()",
        "grade-25": {
            "execution": 1
        },
        "3": "text = preprocess(text)\n    return text == text[::-1]",
        "grade-3": {
            "execution": 0
        },
        "67": "if len(text) <= 1:\n        return True\n    else:\n        if text[0] == text[-1]:\n            return is_palindrome(text[1:-1])\n        else:\n            return False",
        "grade-67": {
            "execution": 1
        },
        "58": "if len(text) == 0:\n        return True\n    elif len(text) == 1:\n        return True\n    else:\n        first_char = text[0]\n        last_char = text[-1]\n        if first_char == last_char:\n            return is_palindrome(text[1:-1])\n        else:\n            return False",
        "grade-58": {
            "execution": 1
        },
        "51": "return text == reverse(text)",
        "grade-51": {
            "execution": 0
        },
        "29": "text = text.lower()\n    text = re.sub(r'[^a-z]', '', text)\n    return text == text[::-1]",
        "grade-29": {
            "execution": 0
        },
        "24": "return text == text[::-1]",
        "grade-24": {
            "execution": 1
        },
        "184": "from collections import deque\n    text = deque(text)\n    while len(text) > 1:\n        if text.popleft() != text.pop():\n            return False\n    return True",
        "grade-184": {
            "execution": 1
        },
        "143": "string = text.lower()\n    if len(string) < 2:\n        return True\n    if string[0] != string[-1]:\n        return False\n    return is_palindrome(string[1:-1])",
        "grade-143": {
            "execution": 1
        },
        "22": "length = len(text)\n    for i in range(length // 2):\n        if text[i] != text[length - i - 1]:\n            return False\n    return True",
        "grade-22": {
            "execution": 1
        },
        "160": "text = text.replace(' ', '').lower()\n    return text == text[::-1]",
        "grade-160": {
            "execution": 1
        },
        "106": "text = text.lower()\n    text = \"\".join(re.findall(r'[A-Za-z0-9]', text))\n    return text == text[::-1]",
        "grade-106": {
            "execution": 0
        },
        "4": "return text == text[::-1]",
        "grade-4": {
            "execution": 1
        },
        "49": "# See the implementations section for alternate algorithms\n    # If the length is 0 or 1, the string is considered a palindrome\n    if len(text) < 2:\n        return True\n\n    # Once we determine the first and last characters are the same,\n    # we can recurse on the substring text[1:-1]\n    if text[0] == text[-1]:\n        return is_palindrome(text[1:-1])\n\n    return False\n\n\n@given(st.text())",
        "grade-49": {
            "execution": 0
        },
        "53": "text = text.lower()\n    text = text.replace(' ', '')\n    if len(text) < 2:\n        return True\n    else:\n        if text[0] == text[-1]:\n            return is_palindrome(text[1:-1])\n        else:\n            return False",
        "grade-53": {
            "execution": 1
        },
        "129": "# PUT YOUR CODE HERE\n    for i in range(len(text)):\n        if text[i] != text[len(text) - i - 1]:\n            return False\n    return True",
        "grade-129": {
            "execution": 1
        },
        "167": "i = 0\n    j = len(text) - 1\n    while i < j:\n        if text[i] != text[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n    # text2 = reversed(text)\n    # return list(text) == list(text2)",
        "grade-167": {
            "execution": 1
        },
        "148": "new_text = ''\n    text = text.lower()\n    for char in text:\n        if char.isalpha():\n            new_text += char\n    return new_text == new_text[::-1]",
        "grade-148": {
            "execution": 1
        },
        "46": "pass",
        "grade-46": {
            "execution": 0
        }
    },
    {
        "intent": "from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n",
        "snippet": [
            "\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n"
        ],
        "simplified": "It is the last week of the semester and the teacher has to give the grades to students. The teacher has been making her own algorithm for grading. The only problem is, she has lost the code she used for grading. She has given you a list of GPAs for some students and you have to write a function that can output a list of letter grades using the following table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E",
        "task_id": "81",
        "189": "# result = []\n    # for grade in grades:\n    #     if grade == 4.0:\n    #         result.append('A+')\n    #     elif grade > 3.7:\n    #         result.append('A')\n    #     elif grade > 3.3:\n    #         result.append('A-')\n    #     elif grade > 3.0:\n    #         result.append('B+')\n    #     elif grade > 2.7:\n    #         result.append('B')\n    #     elif grade > 2.3:\n    #         result.append('B-')\n    #     elif grade > 2.0:\n    #         result.append('C+')\n    #     elif grade > 1.7:\n    #         result.append('C')\n    #     elif grade > 1.3:\n    #         result.append('C-')\n    #     elif grade > 1.0:\n    #         result.append('D+')\n    #     elif grade > 0.7:\n    #         result.append('D')\n    #     elif grade > 0.0:\n    #         result.append('D-')\n    #     else:\n    #         result.append('E')\n    # return result\n\n    results = []\n    for grade in grades:\n        if grade == 4.0:\n            results.append('A+')\n        elif grade > 3.7:\n            results.append('A')\n        elif grade > 3.3:\n            results.append('A-')\n        elif grade > 3.0:\n            results.append('B+')\n        elif grade > 2.7:\n            results.append('B')\n        elif grade > 2.3:\n            results.append('B-')\n        elif grade > 2.0:\n            results.append('C+')\n        elif grade > 1.7:\n            results.append('C')\n        elif grade > 1.3:\n            results.append('C-')\n        elif grade > 1.0:\n            results.append('D+')\n        elif grade > 0.",
        "grade-189": {
            "execution": 0
        },
        "32": "# First, create a letter grade key.\n    letter_grade_key = {\n        4.0: 'A+',\n        3.7: 'A',\n        3.3: 'A-',\n        3.0: 'B+',\n        2.7: 'B',\n        2.3: 'B-',\n        2.0: 'C+',\n        1.7: 'C',\n        1.3: 'C-',\n        1.0: 'D+',\n        0.7: 'D',\n        0.0: 'D-',\n        -1.0: 'E'\n    }\n    # Then, create an empty list for storing letter grades.\n    letter_grades = []\n    # For loop through each GPA in the GPA list.\n    for gpa in grades:\n        # Write a for loop that iterates through the letter grade key.\n        for key in letter_grade_key:\n            # If GPA is greater than or equal to the key, add the letter\n            # grade value to the letter grades list.\n            if gpa >= key:\n                letter_grades.append(letter_grade_key[key])\n                break\n    # Return the list of letter grades.\n    return letter_grades\n\nnumerical_letter_grade([4.0, 3, 1.7, 2, 3.5])",
        "grade-32": {
            "execution": 0
        },
        "6": "# input: list of GPA's\n    # output: List of letter grades\n    # Solution 1: Using For Loop\n    # result = []\n    # for grade in grades:\n    #     if grade == 4.0:\n    #         result.append('A+')\n    #     elif grade > 3.7:\n    #         result.append('A')\n    #     elif grade > 3.3:\n    #         result.append('A-')\n    #     elif grade > 3.0:\n    #         result.append('B+')\n    #     elif grade > 2.7:\n    #         result.append('B')\n    #     elif grade > 2.3:\n    #         result.append('B-')\n    #     elif grade > 2.0:\n    #         result.append('C+')\n    #     elif grade > 1.7:\n    #         result.append('C')\n    #     elif grade > 1.3:\n    #         result.append('C-')\n    #     elif grade > 1.0:\n    #         result.append('D+')\n    #     elif grade > 0.7:\n    #         result.append('D')\n    #     elif grade > 0.0:\n    #         result.append('D-')\n    #     else:\n    #         result.append('E')\n    # return result\n\n    # Solution 2: Using List Comprehension\n    grades_map = [\n        'A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E'\n    ]\n    return [grades_map[int(grade * 2)] for grade in grades]\n\n\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))",
        "grade-6": {
            "execution": 0
        },
        "81": "return",
        "grade-81": {
            "execution": 0
        },
        "72": "return 0",
        "grade-72": {
            "execution": 0
        },
        "66": "# write your code here",
        "grade-66": {
            "execution": 0
        },
        "42": "letter_grades = []\n    for i in grades:\n        if i == 4.0:\n            letter_grades.append('A+')\n        elif i > 3.7:\n            letter_grades.append('A')\n        elif i > 3.3:\n            letter_grades.append('A-')\n        elif i > 3.0:\n            letter_grades.append('B+')\n        elif i > 2.7:\n            letter_grades.append('B')\n        elif i > 2.3:\n            letter_grades.append('B-')\n        elif i > 2.0:\n            letter_grades.append('C+')\n        elif i > 1.7:\n            letter_grades.append('C')\n        elif i > 1.3:\n            letter_grades.append('C-')\n        elif i > 1.0:\n            letter_grades.append('D+')\n        elif i > 0.7:\n            letter_grades.append('D')\n        elif i > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades",
        "grade-42": {
            "execution": 1
        },
        "30": "#finds the letter grade of one input\n    def grade_equation(gpa: float) -> str:\n        if gpa == 4.0:\n            return 'A+'\n        elif gpa > 3.7:\n            return 'A'\n        elif gpa > 3.3:\n            return 'A-'\n        elif gpa > 3.0:\n            return 'B+'\n        elif gpa > 2.7:\n            return 'B'\n        elif gpa > 2.3:\n            return 'B-'\n        elif gpa > 2.0:\n            return 'C+'\n        elif gpa > 1.7:\n            return 'C'\n        elif gpa > 1.3:\n            return 'C-'\n        elif gpa > 1.0:\n            return 'D+'\n        elif gpa > 0.7:\n            return 'D'\n        elif gpa > 0.0:\n            return 'D-'\n        else:\n            return 'E'\n    #finds the letter grade of each student\n    return [grade_equation(gpa) for gpa in grades]\n\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))",
        "grade-30": {
            "execution": 1
        },
        "161": "#Write the code here\n    return [\"\" for i in range(len(grades))]",
        "grade-161": {
            "execution": 0
        },
        "25": "# complete the docstring\n    pass",
        "grade-25": {
            "execution": 0
        },
        "174": "# Create an empty list\n    letter_grade = []\n    # Iterate through the list of GPAs\n    for grade in grades:\n        # Check which letter grade will be\n        if grade == 4.0:\n            letter_grade.append('A+')\n        elif grade > 3.7:\n            letter_grade.append('A')\n        elif grade > 3.3:\n            letter_grade.append('A-')\n        elif grade > 3.0:\n            letter_grade.append('B+')\n        elif grade > 2.7:\n            letter_grade.append('B')\n        elif grade > 2.3:\n            letter_grade.append('B-')\n        elif grade > 2.0:\n            letter_grade.append('C+')\n        elif grade > 1.7:\n            letter_grade.append('C')\n        elif grade > 1.3:\n            letter_grade.append('C-')\n        elif grade > 1.0:\n            letter_grade.append('D+')\n        elif grade > 0.7:\n            letter_grade.append('D')\n        elif grade > 0.0:\n            letter_grade.append('D-')\n        else:\n            letter_grade.append('E')\n    return letter_grade\n\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))",
        "grade-174": {
            "execution": 1
        },
        "128": "# Set \n    grade_A_plus = 4.0\n    grade_A = 3.7\n    grade_A_minus = 3.3\n    grade_B_plus = 3.0\n    grade_B = 2.7\n    grade_B_minus = 2.3\n    grade_C_plus = 2.0\n    grade_C = 1.7\n    grade_C_minus = 1.3\n    grade_D_plus = 1.0\n    grade_D = 0.7\n    grade_D_minus = 0.0\n    grade_E = 0.0\n\n    # List of grades\n    grades_list = []\n\n    # Loop\n    for grade in grades:\n        if grade >= grade_A_plus:\n            grades_list.append('A+')\n        elif grade >= grade_A:\n            grades_list.append('A')\n        elif grade >= grade_A_minus:\n            grades_list.append('A-')\n        elif grade >= grade_B_plus:\n            grades_list.append('B+')\n        elif grade >= grade_B:\n            grades_list.append('B')\n        elif grade >= grade_B_minus:\n            grades_list.append('B-')\n        elif grade >= grade_C_plus:\n            grades_list.append('C+')\n        elif grade >= grade_C:\n            grades_list.append('C')\n        elif grade >= grade_C_minus:\n            grades_list.append('C-')\n        elif grade >= grade_D_plus:\n            grades_list.append('D+')\n        elif grade >= grade_D:\n            grades_list.append('D')\n        elif grade >= grade_D_minus:\n            grades_list.append('D-')\n        elif grade >= grade_E:\n            grades_list.append('E')\n    return grades_list",
        "grade-128": {
            "execution": 0
        },
        "8": "# Write your code here\n    pass",
        "grade-8": {
            "execution": 0
        },
        "7": "# Get the letter grades\n    letter_grades = [(\"A+\", 4.0), (\"A\", 3.7), (\"A-\", 3.3), (\"B+\", 3.0), (\"B\", 2.7), (\"B-\", 2.3), (\"C+\", 2.0), (\"C\", 1.7), (\"C-\", 1.3), (\"D+\", 1.0), (\"D\", 0.7), (\"D-\", 0.0), (\"E\", 0.0)]\n    # Get the grades\n    grades = [4.0, 3, 1.7, 2, 3.5]\n    # Create a list\n    result = []\n    # Loop over each grade\n    for grade in grades:\n        # Loop over each letter grade\n        for letter_grade in letter_grades:\n            # Check if the grade is not equal to 0\n            if grade != 0:\n                # Check if the grade is greater than the minimum grade of the letter grade\n                if grade > letter_grade[1]:\n                    # Check if the result doesn't have the letter grade\n                    if letter_grade[0] not in result:\n                        # Append the letter grade\n                        result.append(letter_grade[0])\n            # Otherwise\n            else:\n                # Append the letter grade\n                result.append(letter_grade[0])\n                # Break the loop\n                break\n    # Return the result\n    return result",
        "grade-7": {
            "execution": 0
        },
        "27": "# Do Not edit below this line\n    # -------------\n    results = []\n    for grade in grades:\n        if grade == 4.0:\n            results.append('A+')\n        elif grade >= 3.7:\n            results.append('A')\n        elif grade >= 3.3:\n            results.append('A-')\n        elif grade >= 3.0:\n            results.append('B+')\n        elif grade >= 2.7:\n            results.append('B')\n        elif grade >= 2.3:\n            results.append('B-')\n        elif grade >= 2.0:\n            results.append('C+')\n        elif grade >= 1.7:\n            results.append('C')\n        elif grade >= 1.3:\n            results.append('C-')\n        elif grade >= 1.0:\n            results.append('D+')\n        elif grade >= 0.7:\n            results.append('D')\n        elif grade >= 0.0:\n            results.append('D-')\n        else:\n            results.append('E')\n    return results",
        "grade-27": {
            "execution": 0
        },
        "64": "out = []\n    for grade in grades:\n        if grade > 4.0:\n            out.append('A+')\n        elif grade > 3.7:\n            out.append('A')\n        elif grade > 3.3:\n            out.append('A-')\n        elif grade > 3.0:\n            out.append('B+')\n        elif grade > 2.7:\n            out.append('B')\n        elif grade > 2.3:\n            out.append('B-')\n        elif grade > 2.0:\n            out.append('C+')\n        elif grade > 1.7:\n            out.append('C')\n        elif grade > 1.3:\n            out.append('C-')\n        elif grade > 1.0:\n            out.append('D+')\n        elif grade > 0.7:\n            out.append('D')\n        elif grade > 0.0:\n            out.append('D-')\n        else:\n            out.append('E')\n    return out",
        "grade-64": {
            "execution": 0
        },
        "68": "letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))\nprint(numerical_letter_grade([4.0, 3.5, 2.5, 2.0, 2.5, 2.5, 3.5, 3.0, 3.5, 3.0, 2.5, 4.0, 3.5, 3.0, 3.5, 4.0, 4.0, 4.0, 4.0, 3.5, 3.5, 3.5, 3.5, 3.5, 3.5, 3.5, 3.5, 3.5, 3.5, 3.5, 3.5, 3.5, 3.5, 3.5, 3.5, 3.5, 3.5, 3.5, 3.5, 3.5, 3.5, 3.5, 3.5, 3.5, 3.",
        "grade-68": {
            "execution": 0
        },
        "150": "def get_letter_grade(grade: float) -> str:\n        if grade >= 4.0:\n            return 'A+'\n        elif grade >= 3.7:\n            return 'A'\n        elif grade >= 3.3:\n            return 'A-'\n        elif grade >= 3.0:\n            return 'B+'\n        elif grade >= 2.7:\n            return 'B'\n        elif grade >= 2.3:\n            return 'B-'\n        elif grade >= 2.0:\n            return 'C+'\n        elif grade >= 1.7:\n            return 'C'\n        elif grade >= 1.3:\n            return 'C-'\n        elif grade >= 1.0:\n            return 'D+'\n        elif grade >= 0.7:\n            return 'D'\n        elif grade >= 0.0:\n            return 'D-'\n        else:\n            return 'E'\n    return [get_letter_grade(grade) for grade in grades]",
        "grade-150": {
            "execution": 0
        },
        "177": "# your code goes here\n    return [\"A+\" if i >= 4.0 else \"A\" if i >= 3.7 else \"A-\" if i >= 3.3 else \"B+\" if i >= 3.0 else \"B\" if i >= 2.7 else \"B-\" if i >= 2.3 else \"C+\" if i >= 2.0 else \"C\" if i >= 1.7 else \"C-\" if i >= 1.3 else \"D+\" if i >= 1.0 else \"D\" if i >= 0.7 else \"D-\" if i >= 0.0 else \"E\" for i in grades]\n\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))",
        "grade-177": {
            "execution": 0
        },
        "165": "# Your code here!\n    pass",
        "grade-165": {
            "execution": 0
        }
    },
    {
        "intent": "from typing import List, Tuple, Optional\n\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    \"\"\"\n",
        "snippet": [
            "    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n"
        ],
        "simplified": "Create a function that returns a tuple (a, b), where 'a' is the largest of negative integers, and 'b' is the smallest of positive integers in a list. If there is no negative or positive integers, return them as None.",
        "task_id": "136",
        "30": "return None, None",
        "grade-30": {
            "execution": 0
        },
        "6": "if lst == []:\n        return (None, None)\n    if lst == [0]:\n        return (None, None)\n    elif sum(1 for x in lst if x > 0) > sum(1 for x in lst if x < 0):\n        return (max(x for x in lst if x < 0), min(x for x in lst if x > 0))\n    elif sum(1 for x in lst if x > 0) < sum(1 for x in lst if x < 0):\n        return (max(x for x in lst if x < 0), min(x for x in lst if x > 0))\n    else:\n        return (None, None)",
        "grade-6": {
            "execution": 0
        },
        "97": "neg = None\n    pos = None\n    for i in lst:\n        if i < 0:\n            if neg is None or i > neg:\n                neg = i\n        elif i > 0:\n            if pos is None or i < pos:\n                pos = i\n    return (neg, pos)",
        "grade-97": {
            "execution": 1
        },
        "85": "lst_n = []\n    lst_p = []\n    lst_1 = []\n    lst_2 = []\n    lst_3 = []\n    lst_4 = []\n    lst_5 = []\n    lst_6 = []\n    lst_7 = []\n    lst_8 = []\n    lst_9 = []\n    lst_0 = []\n    lst_0_2 = []\n    lst_0_3 = []\n    lst_0_4 = []\n    lst_0_5 = []\n    lst_0_6 = []\n    lst_0_7 = []\n    lst_0_8 = []\n    lst_0_9 = []\n    lst_0_10 = []\n    for i in lst:\n        if i < 0:\n            lst_n.append(i)\n        elif i > 0:\n            lst_p.append(i)\n        elif i == 0:\n            lst_0.append(i)\n    for i in lst_n:\n        lst_1.append(i * -1)\n    for i in lst_1:\n        lst_2.append(i - 100)\n    for i in lst_2:\n        lst_3.append(i + 90)\n    for i in lst_3:\n        lst_4.append(i + 99)\n    for i in lst_4:\n        lst_5.append(i + 1)\n    for i in lst_5:\n        lst_6.append(i + 10)\n    for i in lst_6:\n        lst_7.append(i + 19)\n    for i in lst_7:\n        lst_8.append(i - 9)\n    for i in lst_8:\n        lst_9.append(i - 10)\n    for i in lst_9:\n        lst_0_2.append(i - 1)\n    for i in lst_0_2:\n        lst_0_3.append(i - 20)",
        "grade-85": {
            "execution": 0
        },
        "77": "if len(lst) == 0:\n        return (None, None)\n    # for i in lst:\n    #     if i == 0:\n    #         return (None, None)\n    positive_num = []\n    negative_num = []\n    for num in lst:\n        if num > 0:\n            positive_num.append(num)\n        elif num < 0:\n            negative_num.append(num)\n    if not positive_num:\n        return (max(negative_num), None)\n    elif not negative_num:\n        return (None, min(positive_num))\n    else:\n        return (max(negative_num), min(positive_num))\n\nprint(largest_smallest_integers([2, 4, 1, 3, 5, 7]))\nprint(largest_smallest_integers([]))\nprint(largest_smallest_integers([0]))",
        "grade-77": {
            "execution": 0
        },
        "41": "largest_negative, smallest_positive = (None, None)\n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n    return (largest_negative, smallest_positive)\n\nprint(largest_smallest_integers([2, 4, 1, 3, 5, 7]))",
        "grade-41": {
            "execution": 1
        },
        "27": "largest = None\n    smallest = None\n    for i in lst:\n        if i < 0:\n            if largest is None or i > largest:\n                largest = i\n        elif i > 0:\n            if smallest is None or i < smallest:\n                smallest = i\n    return (largest, smallest)",
        "grade-27": {
            "execution": 1
        },
        "189": "largest = None\n    smallest = None\n    pos_ints = []\n    neg_ints = []\n    for num in lst:\n        if num >= 0:\n            pos_ints.append(num)\n        elif num < 0:\n            neg_ints.append(num)\n    if len(pos_ints) > 0:\n        smallest = min(pos_ints)\n    if len(neg_ints) > 0:\n        largest = max(neg_ints)\n    return (largest, smallest)",
        "grade-189": {
            "execution": 0
        },
        "23": "return ((max(x for x in lst if x < 0)) if any(x < 0 for x in lst) else None,\n            (min(x for x in lst if x > 0)) if any(x > 0 for x in lst) else None)\n\n\"\"\"\nSolution 2\n\"\"\"",
        "grade-23": {
            "execution": 1
        },
        "147": "negative = [x for x in lst if x < 0]\n    positive = [x for x in lst if x > 0]\n    return (None if len(negative) == 0 else max(negative), None if len(positive) == 0 else min(positive))",
        "grade-147": {
            "execution": 1
        },
        "8": "biggest_negative = min(filter(lambda x: x < 0, lst)) if any(filter(lambda x: x < 0, lst)) else None\n    smallest_positive = max(filter(lambda x: x > 0, lst)) if any(filter(lambda x: x > 0, lst)) else None\n    return (biggest_negative, smallest_positive)",
        "grade-8": {
            "execution": 0
        },
        "7": "if len(lst) == 0:\n        return (None, None)\n    neg_int_lst = []\n    pos_int_lst = []\n    for element in lst:\n        if element < 0:\n            neg_int_lst.append(element)\n        elif element > 0:\n            pos_int_lst.append(element)\n    if len(neg_int_lst) == 0:\n        neg_int_lst.append(None)\n    if len(pos_int_lst) == 0:\n        pos_int_lst.append(None)\n    return (max(neg_int_lst), min(pos_int_lst))",
        "grade-7": {
            "execution": 1
        },
        "24": "pos = None\n    neg = None\n    for i in lst:\n        if i > 0:\n            if pos is None:\n                pos = i\n            else:\n                pos = min(pos, i)\n        elif i < 0:\n            if neg is None:\n                neg = i\n            else:\n                neg = max(neg, i)\n    return neg, pos\n\nprint(largest_smallest_integers([2, 4, 1, 3, 5, 7]))",
        "grade-24": {
            "execution": 1
        },
        "71": "largest = None\n    smallest = None\n    for i in lst:\n        if i > 0:\n            if smallest is None or i < smallest:\n                smallest = i\n        elif i < 0:\n            if largest is None or i > largest:\n                largest = i\n    return (largest, smallest)",
        "grade-71": {
            "execution": 1
        },
        "81": "if len(lst) < 1:\n        return (None, None)\n    a = 0\n    b = 0\n    c = 0\n    d = 0\n    for item in lst:\n        if item < 0:\n            if a == 0:\n                a = item\n            elif item > a:\n                a = item\n        if item > 0:\n            if b == 0:\n                b = item\n            elif item < b:\n                b = item\n    if a == 0:\n        a = None\n    if b == 0:\n        b = None\n    return (a, b)",
        "grade-81": {
            "execution": 1
        },
        "177": "if not lst:\n        return (None, None)\n    else:\n        negative_max = max(n for n in lst if n < 0)\n        positive_min = min(n for n in lst if n > 0)\n        return (negative_max, positive_min)",
        "grade-177": {
            "execution": 0
        },
        "195": "lst = [n for n in lst if n]\n    positive = [n for n in lst if n > 0]\n    negative = [n for n in lst if n < 0]\n    largest = None\n    smallest = None\n    if negative:\n        largest = max(negative)\n    if positive:\n        smallest = min(positive)\n    return (largest, smallest)",
        "grade-195": {
            "execution": 1
        },
        "59": "negative_integers = [n for n in lst if n < 0]\n    positive_integers = [n for n in lst if n > 0]\n    return (max(negative_integers) if negative_integers else None,\n            min(positive_integers) if positive_integers else None)",
        "grade-59": {
            "execution": 1
        },
        "146": "if not lst:\n        return (None, None)\n    else:\n        smallest_positive = None\n        largest_negative = None\n        for el in lst:\n            if el > 0:\n                if smallest_positive == None:\n                    smallest_positive = el\n                elif el < smallest_positive:\n                    smallest_positive = el\n            elif el < 0:\n                if largest_negative == None:\n                    largest_negative = el\n                elif el > largest_negative:\n                    largest_negative = el\n    return (largest_negative, smallest_positive)",
        "grade-146": {
            "execution": 1
        },
        "72": "pos_list = [x for x in lst if x > 0]\n    neg_list = [x for x in lst if x < 0]\n    return (max(neg_list) if neg_list else None, min(pos_list) if pos_list else None)",
        "grade-72": {
            "execution": 1
        }
    },
    {
        "intent": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n",
        "snippet": [
            "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n"
        ],
        "simplified": "Return n-th Fibonacci number.",
        "task_id": "55",
        "134": "if n < 2:\n        return n\n    a, b = 0, 1\n    for i in range(2, n+1):\n        a, b = b, a + b\n    return b",
        "grade-134": {
            "execution": 1
        },
        "15": "return fibonacci(n)",
        "grade-15": {
            "execution": 0
        },
        "3": "assert n >= 1\n    f0, f1 = 0, 1\n    for i in range(n - 1):\n        f0, f1 = f1, f0 + f1\n    return f1",
        "grade-3": {
            "execution": 1
        },
        "161": "assert(n > 0)\n    return fib_rec(n)",
        "grade-161": {
            "execution": 0
        },
        "47": "return sum(fib_seq(n))",
        "grade-47": {
            "execution": 0
        },
        "42": "if n == 1:\n        return 1\n    if n < 1:\n        return 0\n    else:\n        return fib(n - 1) + fib(n - 2)",
        "grade-42": {
            "execution": 1
        },
        "38": "if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\n@count_calls",
        "grade-38": {
            "execution": 0
        },
        "18": "if n <= 2:\n        return 1\n    return fib(n - 1) + fib(n - 2)",
        "grade-18": {
            "execution": 1
        },
        "14": "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a",
        "grade-14": {
            "execution": 1
        },
        "144": "if n < 2:\n        return n\n    first, second = 0, 1\n    for _ in range(n - 1):\n        first, second = second, first + second\n    return second",
        "grade-144": {
            "execution": 1
        },
        "113": "if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\nprint(fib(10))",
        "grade-113": {
            "execution": 1
        },
        "12": "if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)",
        "grade-12": {
            "execution": 0
        },
        "122": "if n <= 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\n@given(st.integers(min_value=0))",
        "grade-122": {
            "execution": 0
        },
        "85": "a, b = 0, 1\n    while n > 0:\n        a, b = b, a + b\n        n -= 1\n    return a",
        "grade-85": {
            "execution": 1
        },
        "4": "a, b = 0, 1\n    while n > 0:\n        a, b = b, a + b\n        n -= 1\n    return a",
        "grade-4": {
            "execution": 1
        },
        "34": "if n < 2:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)",
        "grade-34": {
            "execution": 1
        },
        "39": "if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    return fib(n - 1) + fib(n - 2)",
        "grade-39": {
            "execution": 1
        },
        "103": "assert n >= 1\n    if n == 1:\n        return 1\n    first = 1\n    second = 1\n    counter = 2\n    while counter < n:\n        third = first + second\n        first = second\n        second = third\n        counter += 1\n    return second",
        "grade-103": {
            "execution": 1
        },
        "129": "# TODO: Get the n-th number from the sequence and return it\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)",
        "grade-129": {
            "execution": 1
        },
        "118": "assert n >= 1\n    fib_n_1, fib_n_2 = 1, 0\n    for _ in range(n - 1):\n        fib_n_1, fib_n_2 = fib_n_1 + fib_n_2, fib_n_1\n    return fib_n_1",
        "grade-118": {
            "execution": 1
        }
    },
    {
        "intent": "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n",
        "snippet": [
            "    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n"
        ],
        "simplified": "Circular shift the digits of the integer x, shift the digits right by shift and return the result as a string. If shift > number of digits, return digits reversed.",
        "task_id": "65",
        "177": "string = str(x)\n    shift = shift % len(string)\n    return string[-shift:] + string[:-shift]",
        "grade-177": {
            "execution": 0
        },
        "28": "n = number_of_digits(x)\n    if shift > n:\n        return reverse_digits(x)\n    else:\n        return (x // (10 ** shift)) % (10 ** n) + (x % (10 ** shift)) * (10 ** (n - shift))",
        "grade-28": {
            "execution": 0
        },
        "6": "number_of_digits = len(str(x))\n    shift = shift % number_of_digits\n    if shift == 0:\n        return str(x)\n    digits = [int(digit) for digit in str(x)]\n    shift_digits = digits[-shift:] + digits[:-shift]\n    return ''.join(str(digit) for digit in shift_digits)",
        "grade-6": {
            "execution": 0
        },
        "71": "s = str(x)\n    if len(s) > shift:\n        return s[-shift:] + s[:-shift]\n    else:\n        return s[::-1]",
        "grade-71": {
            "execution": 0
        },
        "63": "digits = str(x)\n    # shift = shift % len(digits)\n    # c = len(digits) - shift\n    return digits[-shift:] + digits[:-shift]",
        "grade-63": {
            "execution": 0
        },
        "58": "list_shift = list(str(x))\n    list_shift.reverse()\n    if shift > len(list_shift):\n        return ''.join(list_shift)\n    return ''.join(list_shift[shift:] + list_shift[:shift])",
        "grade-58": {
            "execution": 0
        },
        "35": "x_str = str(x)\n    if shift == 0:\n        return x_str\n    shift = shift % len(x_str)\n    return x_str[-shift:] + x_str[:-shift]",
        "grade-35": {
            "execution": 0
        },
        "26": "digits = list(str(x))\n    shifted = digits[shift:] + digits[:shift]\n    return \"\".join(shifted)",
        "grade-26": {
            "execution": 0
        },
        "191": "if x < 10:\n        return str(x)\n    digits = str(x)\n    for n in range(shift):\n        # shift each digit right\n        last_digit = digits[-1]\n        digits = last_digit + digits[:-1]\n    return digits",
        "grade-191": {
            "execution": 0
        },
        "148": "digits = get_digits(x)\n    shift = shift % len(digits)\n    return \"\".join(digits[-shift:] + digits[:-shift])",
        "grade-148": {
            "execution": 0
        },
        "22": "num_digits = len(str(x))\n    s = str(x)\n    if shift > num_digits:\n        return s[::-1]\n    else:\n        s = s[num_digits - shift:] + s[:num_digits - shift]\n        return s",
        "grade-22": {
            "execution": 1
        },
        "165": "digits = list(str(x))\n    shift = shift % len(digits)\n    return \"\".join(digits[-shift:] + digits[:-shift])",
        "grade-165": {
            "execution": 0
        },
        "111": "digits = str(x)\n    n = len(digits)\n    if shift >= n:\n        return digits[::-1]\n    else:\n        return digits[-shift:] + digits[:-shift]",
        "grade-111": {
            "execution": 0
        },
        "8": "result = str(x)\n    if shift > len(result):\n        return result[::-1]\n    return result[-shift:] + result[:-shift]",
        "grade-8": {
            "execution": 1
        },
        "7": "x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    return x_str[-shift:] + x_str[:-shift]",
        "grade-7": {
            "execution": 0
        },
        "23": "x = str(x)\n    if shift > len(x):\n        return x[::-1]\n    return x[-shift:] + x[:-shift]",
        "grade-23": {
            "execution": 1
        },
        "56": "string = str(x)\n    shift = shift % len(string)\n    return string[shift:] + string[:shift]",
        "grade-56": {
            "execution": 0
        },
        "60": "digits = list(str(x))\n    if shift >= len(digits):\n        return \"\".join(reversed(digits))\n    else:\n        return \"\".join(digits[-shift:] + digits[:-shift])",
        "grade-60": {
            "execution": 0
        },
        "137": "# First number - last number.\n    f = str(x)[0]\n    l = str(x)[-1]\n    if shift == 1:\n        # The first number becomes the last, last becomes first\n        return l + str(x)[1:-1] + f\n    elif shift == 2:\n        # The first two numbers become the last two, last two become first two\n        return str(x)[-2:] + str(x)[:-2]\n    else:\n        # Any other shift will reverse the number\n        return str(x)[::-1]",
        "grade-137": {
            "execution": 1
        },
        "168": "# Convert the integer to a string, reverse the string and\n    # then reverse the digits of the string.\n    return \"\".join(reversed(str(x))[:shift][::-1]) + \"\".join(reversed(str(x))[shift:])",
        "grade-168": {
            "execution": 0
        }
    },
    {
        "intent": "from typing import List\n\ndef max_element(l: List[int]) -> int:\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n",
        "snippet": [
            "    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n"
        ],
        "simplified": "Return maximum element in the list.",
        "task_id": "35",
        "36": "# TODO: replace with correct implementation\n    return max(l)",
        "grade-36": {
            "execution": 1
        },
        "7": "if len(l) == 0:\n        return None\n    else:\n        max = l[0]\n        for i in range(len(l)):\n            if l[i] > max:\n                max = l[i]\n        return max",
        "grade-7": {
            "execution": 1
        },
        "92": "if len(l) == 0:\n        return None\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] if l[0] > l[1] else l[1]\n    if len(l) > 2:\n        m = max_element(l[1:])\n        return l[0] if l[0] > m else m",
        "grade-92": {
            "execution": 1
        },
        "83": "# check type of l\n    assert type(l) == list, \"l is not a list\"\n    # check if l is not empty\n    assert len(l) > 0, \"l is empty\"\n    # check if elements of l are ints\n    assert all([type(element) == int for element in l]), \"l does not contain only ints\"\n    # define a variable for the maximum\n    maximum = l[0]\n    # visit every element of l\n    for element in l:\n        # update the maximum\n        if element > maximum:\n            maximum = element\n    # return the maximum\n    return maximum",
        "grade-83": {
            "execution": 1
        },
        "74": "if not l:\n        return 0\n    return max(l)",
        "grade-74": {
            "execution": 1
        },
        "45": "m = l[0]\n    for i in l:\n        if i > m:\n            m = i\n    return m\n\nprint(max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))",
        "grade-45": {
            "execution": 1
        },
        "34": "if len(l) == 0:\n        return None\n    else:\n        return max(l)",
        "grade-34": {
            "execution": 1
        },
        "29": "max_elem = l[0]\n    for elem in l:\n        if elem > max_elem:\n            max_elem = elem\n    return max_elem",
        "grade-29": {
            "execution": 1
        },
        "152": "max_ele = l[0]\n    for ele in l:\n        if ele > max_ele:\n            max_ele = ele\n    return max_ele",
        "grade-152": {
            "execution": 1
        },
        "11": "# TODO: why does this work with float but not int?\n    max_el = l[0]\n    for element in l:\n        if element > max_el:\n            max_el = element\n    return max_el",
        "grade-11": {
            "execution": 1
        },
        "10": "if not l:\n        return None\n    max = l[0]\n    for i in l:\n        if i > max:\n            max = i\n    return max",
        "grade-10": {
            "execution": 1
        },
        "30": "max_ = l[0]\n    for el in l:\n        if el > max_:\n            max_ = el\n    return max_",
        "grade-30": {
            "execution": 1
        },
        "70": "# YOUR CODE HERE\n    return max(l)",
        "grade-70": {
            "execution": 1
        },
        "76": "maxi = l[0]\n    for i in l:\n        if i > maxi:\n            maxi = i\n    return maxi",
        "grade-76": {
            "execution": 1
        },
        "196": "return reduce(lambda acc, x: max(acc, x), l)\n\nprint(max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))",
        "grade-196": {
            "execution": 0
        },
        "65": "max_el = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_el:\n            max_el = l[i]\n    return max_el",
        "grade-65": {
            "execution": 1
        },
        "151": "maximum = l[0]\n    for element in l:\n        if element > maximum:\n            maximum = element\n    return maximum",
        "grade-151": {
            "execution": 1
        },
        "72": "max = 0\n    for i in l:\n        if i > max:\n            max = i\n    return max",
        "grade-72": {
            "execution": 1
        },
        "165": "max_num = l[0]\n    for num in l:\n        if num > max_num:\n            max_num = num\n    return max_num",
        "grade-165": {
            "execution": 1
        },
        "94": "if not l:\n        return None\n    else:\n        max_ = l[0]\n        for e in l:\n            if e > max_:\n                max_ = e\n        return max_",
        "grade-94": {
            "execution": 1
        }
    },
    {
        "intent": "from typing import List\n\ndef solution(lst: List[int]) -> int:\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n",
        "snippet": [
            "    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n"
        ],
        "simplified": "Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.",
        "task_id": "121",
        "29": "return sum(i for i in lst[1::2] if i % 2 != 0)\n\nprint(solution([5, 8, 7, 1]))\nprint(solution([3, 3, 3, 3, 3]))\nprint(solution([30, 13, 24, 321]))",
        "grade-29": {
            "execution": 0
        },
        "6": "return sum(val for idx, val in enumerate(lst) if idx % 2 == 0 and val % 2 != 0)",
        "grade-6": {
            "execution": 1
        },
        "91": "sum_of_even_odds = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            sum_of_even_odds += lst[i]\n    return sum_of_even_odds",
        "grade-91": {
            "execution": 1
        },
        "76": "return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)\n\nprint(solution([5, 8, 7, 1]))\nprint(solution([3, 3, 3, 3, 3]))\nprint(solution([30, 13, 24, 321]))",
        "grade-76": {
            "execution": 1
        },
        "68": "return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)",
        "grade-68": {
            "execution": 1
        },
        "38": "return sum(lst[::2][1::2])\n    \n    \n    \n    \n    \nprint(solution([5, 8, 7, 1]))\nprint(solution([3, 3, 3, 3, 3]))\nprint(solution([30, 13, 24, 321]))",
        "grade-38": {
            "execution": 0
        },
        "26": "return sum(element for element in lst[1::2] if element % 2 == 1)",
        "grade-26": {
            "execution": 0
        },
        "22": "return sum(i for i in lst[1::2] if i % 2 == 1)\n\nprint(solution([5, 8, 7, 1]))",
        "grade-22": {
            "execution": 0
        },
        "154": "odd_sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            odd_sum += lst[i]\n    return odd_sum\n\nprint(solution([5, 8, 7, 1]))",
        "grade-154": {
            "execution": 1
        },
        "8": "return sum(lst[::2][i] for i in range(len(lst[::2])) if i % 2 == 0)",
        "grade-8": {
            "execution": 0
        },
        "7": "# Variables\n    result = 0\n    # Iterate through the list\n    for i in range(len(lst)):\n        # Check if index of number is even and number is odd\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            # Add number to result\n            result += lst[i]\n    \n    return result",
        "grade-7": {
            "execution": 1
        },
        "23": "return sum(lst[::2][1::2])",
        "grade-23": {
            "execution": 0
        },
        "66": "sum=0\n    for i in range(0,len(lst),2):\n        if lst[i]%2!=0:\n            sum+=lst[i]\n    return sum",
        "grade-66": {
            "execution": 1
        },
        "71": "sum = 0\n    for idx, val in enumerate(lst):\n        if val % 2 != 0 and idx % 2 == 0:\n            sum += val\n    return sum",
        "grade-71": {
            "execution": 1
        },
        "186": "# return sum(i for i in lst[1::2] if i % 2 != 0)\n    return sum(lst[1::2])\n\nprint(solution([5, 8, 7, 1]))\nprint(solution([3, 3, 3, 3, 3]))\nprint(solution([30, 13, 24, 321]))",
        "grade-186": {
            "execution": 0
        },
        "61": "even_sum = 0\n    for i in range(len(lst)):\n        if lst[i] % 2 != 0 and i % 2 == 0:\n            even_sum += lst[i]\n    return even_sum",
        "grade-61": {
            "execution": 1
        },
        "151": "total = 0\n    for index, value in enumerate(lst):\n        if value % 2 == 1 and index % 2 == 0:\n            total += value\n    return total",
        "grade-151": {
            "execution": 1
        },
        "67": "return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)",
        "grade-67": {
            "execution": 1
        },
        "163": "if len(lst) == 0:\n        return 0\n    else:\n        return lst[1] + solution(lst[2:])",
        "grade-163": {
            "execution": 0
        },
        "92": "return sum(lst[::2][1::2])\n\n\nprint(solution([5, 8, 7, 1]))\nprint(solution([3, 3, 3, 3, 3]))\nprint(solution([30, 13, 24, 321]))",
        "grade-92": {
            "execution": 0
        }
    },
    {
        "intent": "from typing import Tuple\n\ndef bf(planet1: str, planet2: str) -> Tuple[str, ...]:\n    \"\"\"\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    \"\"\"\n",
        "snippet": [
            "    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n"
        ],
        "simplified": "There are eight planets in our solar system: the closerst to the Sun is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Write a function that takes two planet names as strings planet1 and planet2. The function should return a tuple containing all planets whose orbits are located between the orbit of planet1 and the orbit of planet2, sorted by the proximity to the sun. The function should return an empty tuple if planet1 or planet2 are not correct planet names.",
        "task_id": "148",
        "174": "planets = {\n        \"Mercury\": 1,\n        \"Venus\": 2,\n        \"Earth\": 3,\n        \"Mars\": 4,\n        \"Jupiter\": 5,\n        \"Saturn\": 6,\n        \"Uranus\": 7,\n        \"Neptune\": 8\n    }\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    elif planets[planet1] > planets[planet2]:\n        return ()\n    else:\n        return tuple(sorted(name for name, planet in planets.items() if planet > planets[planet1] and planet < planets[planet2]))",
        "grade-174": {
            "execution": 0
        },
        "28": "planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    first = planets.index(planet1)\n    second = planets.index(planet2)\n    if first <= second:\n        return planets[first+1:second]\n    return planets[second+1:first]",
        "grade-28": {
            "execution": 1
        },
        "6": "planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    n1 = 0\n    n2 = 0\n    t = tuple()\n    if planet1 in planets and planet2 in planets:\n        for i in range(len(planets)):\n            if planets[i] == planet1:\n                n1 = i\n            if planets[i] == planet2:\n                n2 = i\n        if n1 > n2:\n            for i in range(n2, n1+1):\n                t += (planets[i],)\n        else:\n            for i in range(n1, n2+1):\n                t += (planets[i],)\n    return t",
        "grade-6": {
            "execution": 0
        },
        "73": "planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    index_planet1 = planets.index(planet1)\n    index_planet2 = planets.index(planet2)\n    if index_planet1 > index_planet2:\n        return tuple(planets[index_planet2 + 1:index_planet1])\n    else:\n        return tuple(planets[index_planet1 + 1:index_planet2])",
        "grade-73": {
            "execution": 0
        },
        "63": "planets = {\n        \"Mercury\": 1,\n        \"Venus\": 2,\n        \"Earth\": 3,\n        \"Mars\": 4,\n        \"Jupiter\": 5,\n        \"Saturn\": 6,\n        \"Uranus\": 7,\n        \"Neptune\": 8\n    }\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    bf_planets = ()\n    i = planets[planet1]\n    while i < planets[planet2]:\n        bf_planets += (list(planets.keys())[list(planets.values()).index(i)],)\n        i += 1\n    return bf_planets",
        "grade-63": {
            "execution": 0
        },
        "58": "planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    between = []\n    for i in range(planets.index(planet1), planets.index(planet2)):\n        between.append(planets[i+1])\n    return tuple(between)",
        "grade-58": {
            "execution": 0
        },
        "35": "tup = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    dic = {'Mercury':1, 'Venus':2, 'Earth':3, 'Mars':4, 'Jupiter':5, 'Saturn':6, 'Uranus':7, 'Neptune':8}\n    if planet1 not in dic or planet2 not in dic:\n        return ()\n    if dic[planet1] > dic[planet2]:\n        list1 = [planet1, planet2]\n    else:\n        list1 = [planet2, planet1]\n    list2 = []\n    for i in range(dic[list1[0]], dic[list1[1]]):\n        list2.append(tup[i-1])\n    return tuple(list2)",
        "grade-35": {
            "execution": 0
        },
        "199": "planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    pos1 = planets.index(planet1)\n    pos2 = planets.index(planet2)\n    return planets[pos1+1:pos2]\n\n\nprint(bf(\"Jupiter\", \"Neptune\"))",
        "grade-199": {
            "execution": 0
        },
        "26": "# insert your code here\n    return ()",
        "grade-26": {
            "execution": 0
        },
        "184": "pass\n\nprint(bf(\"Jupiter\", \"Neptune\"))\nprint(bf(\"Earth\", \"Mercury\"))\nprint(bf(\"Mercury\", \"Uranus\"))",
        "grade-184": {
            "execution": 0
        },
        "148": "planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n    if planet1 in planets and planet2 in planets:\n        if planet1 == planet2:\n            return ()\n        else:\n            all_planets = list(planets)\n            planet1_pos = all_planets.index(planet1)\n            planet2_pos = all_planets.index(planet2)\n            if planet1_pos < planet2_pos:\n                return tuple(all_planets[planet1_pos+1:planet2_pos])\n            else:\n                return tuple(all_planets[planet2_pos+1:planet1_pos])\n    else:\n        return ()",
        "grade-148": {
            "execution": 0
        },
        "22": "pass",
        "grade-22": {
            "execution": 0
        },
        "160": "planets = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n    planets_index_dict = {planet: index for index, planet in enumerate(planets)}\n    if planet1 not in planets_index_dict or planet2 not in planets_index_dict:\n        return ()\n    if planets_index_dict[planet1] > planets_index_dict[planet2]:\n        planet1, planet2 = planet2, planet1\n    min_planet_index = planets_index_dict[planet1]\n    max_planet_index = planets_index_dict[planet2]\n    return tuple(planets[min_planet_index+1:max_planet_index])\n\nassert bf(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\")\nassert bf(\"Earth\", \"Mercury\") == (\"Venus\",)\nassert bf(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nassert bf(\"Mercury\", \"Saturn\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\")\nprint(\"passed all tests\")",
        "grade-160": {
            "execution": 1
        },
        "115": "planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 in planets and planet2 in planets:\n        p1, p2 = planets.index(planet1), planets.index(planet2)\n        if p1 < p2:\n            return tuple(planets[p1+1:p2])\n        else:\n            return tuple(planets[p2+1:p1])\n    else:\n        return ()\n\nprint(bf(\"Jupiter\", \"Neptune\"))\nprint(bf(\"Earth\", \"Mercury\"))\nprint(bf(\"Mercury\", \"Uranus\"))",
        "grade-115": {
            "execution": 1
        },
        "8": "planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    planet1_index = planets.index(planet1)\n    planet2_index = planets.index(planet2)\n    if planet1_index < planet2_index:\n        return planets[planet1_index+1:planet2_index]\n    else:\n        return planets[planet2_index+1:planet1_index]",
        "grade-8": {
            "execution": 1
        },
        "7": "planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    orbit_range = planets[planets.index(planet1):planets.index(planet2) + 1]\n    return tuple(reversed(orbit_range)) if planet1 == \"Jupiter\" else tuple(orbit_range)",
        "grade-7": {
            "execution": 0
        },
        "23": "planets = [\n        \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\",\n    ]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    if planets.index(planet1) > planets.index(planet2):\n        planet1, planet2 = planet2, planet1\n    return tuple(planets[planets.index(planet1) + 1 : planets.index(planet2)])",
        "grade-23": {
            "execution": 1
        },
        "55": "planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    return tuple(planet for planet in planets[planets.index(planet1):planets.index(planet2)+1] if planet != planet1 and planet != planet2)",
        "grade-55": {
            "execution": 0
        },
        "60": "# your code here\n    return ()",
        "grade-60": {
            "execution": 0
        },
        "138": "pass\n\nimport unittest",
        "grade-138": {
            "execution": 0
        }
    },
    {
        "intent": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n",
        "snippet": [
            "    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n"
        ],
        "simplified": "Input to this function is a string represented multiple groups for nested parentheses separated by spaces. For each of the group, output the deepest level of nesting of parentheses. E.g. (()()) has maximum two levels of nesting while ((())) has three.",
        "task_id": "6",
        "166": "output = []\n    for parens in paren_string.split():\n        max_level = 0\n        level = 0\n        for char in parens:\n            if char == '(':\n                level += 1\n                max_level = max(max_level, level)\n            elif char == ')':\n                level -= 1\n            else:\n                raise ValueError(f'Invalid character: {char}')\n        output.append(max_level)\n    return output",
        "grade-166": {
            "execution": 1
        },
        "28": "paren_groups = paren_string.split(' ')\n    max_levels = []\n    for group in paren_groups:\n        count = 0\n        max_count = 0\n        for char in group:\n            if char == '(':\n                count += 1\n                max_count = max(max_count, count)\n            elif char == ')':\n                count -= 1\n        max_levels.append(max_count)\n    return max_levels",
        "grade-28": {
            "execution": 1
        },
        "6": "parsed_parens = [paren_string]\n    for letter in paren_string:\n        if letter == ' ':\n            parsed_parens.append('')\n        else:\n            parsed_parens[-1] += letter\n    return [len(paren) - 2 * paren.count(')') for paren in parsed_parens]",
        "grade-6": {
            "execution": 0
        },
        "193": "result = []\n    for parens in paren_string.split():\n        stack = []\n        max_depth = 0\n        for c in parens:\n            if c == '(':\n                stack.append(c)\n                max_depth = max(max_depth, len(stack))\n            elif c == ')':\n                stack.pop()\n        result.append(max_depth)\n    return result",
        "grade-193": {
            "execution": 1
        },
        "70": "depth = 0\n    depth_levels = []\n    for paren in paren_string:\n        if paren == '(':\n            depth += 1\n        elif paren == ')':\n            depth_levels.append(depth)\n            depth -= 1\n    return depth_levels",
        "grade-70": {
            "execution": 0
        },
        "62": "max_nesting_level = []\n    curr_nesting_level = 0\n    for paren in paren_string:\n        if paren == '(':\n            curr_nesting_level += 1\n        elif paren == ')':\n            max_nesting_level.append(curr_nesting_level)\n            curr_nesting_level -= 1\n        elif paren == ' ':\n            continue\n    return max_nesting_level",
        "grade-62": {
            "execution": 0
        },
        "57": "output = []\n    for paren_group in paren_string.split(' '):\n        level = 0\n        max_level = 0\n        for ch in paren_group:\n            if ch == '(':\n                level += 1\n                max_level = max(max_level, level)\n            elif ch == ')':\n                level -= 1\n        output.append(max_level)\n    return output",
        "grade-57": {
            "execution": 1
        },
        "35": "groups = paren_string.split()\n    return [paren_level(g) for g in groups]",
        "grade-35": {
            "execution": 0
        },
        "192": "paren_groups = paren_string.split()\n    max_nesting = []\n    for group in paren_groups:\n        max_nesting.append(determine_max_nesting(group))\n    return max_nesting",
        "grade-192": {
            "execution": 0
        },
        "26": "# TODO\n    pass",
        "grade-26": {
            "execution": 0
        },
        "177": "pass\n\nimport doctest\ndoctest.testmod()\n \n```",
        "grade-177": {
            "execution": 0
        },
        "141": "groups = paren_string.split(' ')\n    res = []\n    for g in groups:\n        if len(g) == 0:\n            res.append(0)\n            continue\n        stack = []\n        level = 0\n        max_level = 0\n        for c in g:\n            if c == '(':\n                stack.append(c)\n                level += 1\n                max_level = max(max_level, level)\n            elif c == ')':\n                stack.pop()\n                level -= 1\n        res.append(max_level)\n    return res",
        "grade-141": {
            "execution": 1
        },
        "22": "# Create a splitter which can parse the paren_string to a list of strings.\n    # The splitter uses the space ` ` as delimiter.\n    splitter = re.compile(' ')\n    # Create a scanner which can scan thru each character of a string.\n    scanner = Scanner(paren_string)\n    # scanner.find_token returns a tuple of (matching string, starting position, ending position)\n    # If there is no match it returns None\n    # Here we are looking for spaces as well as patterns.\n    # If we find a space, the scanner will not advance by itself.\n    # If we find a pattern, the scanner will advance.\n    # If the scanner does not advance, it needs an explicit advance.\n    # We know that we are at the end of the string if scanner.find_token(splitter) is None\n    res = []\n    while scanner.find_token(splitter) is not None:\n        # If we find a space, advance the scanner.\n        if scanner.match == ' ':\n            scanner.advance()\n        # If we find a pattern, store the pattern in a variable.\n        if scanner.match != ' ':\n            paren_string = scanner.match\n        # Initialize a variable to store the level of nesting.\n        level = 0\n        # Initialize a variable to store the max level of nesting.\n        max_level = 0\n        # For each character in the pattern\n        for char in paren_string:\n            # If it is an opening parenthesis\n            if char == '(':\n                # Increase the level of nesting by 1\n                level += 1\n                # If the level of nesting exceeds the max level of nesting\n                if level > max_level:\n                    # Increase the max level of nesting by 1\n                    max_level += 1\n            # If it is a closing parenthesis\n            if char == ')':\n                # Decrease the level of nesting by 1\n                level -= 1\n        # After the for loop, append the max level of nesting to the result list.\n        res.append(max_level)\n    return res",
        "grade-22": {
            "execution": 0
        },
        "154": "if not paren_string:\n        return []\n\n    depth = 0\n    max_depth = 0\n    result = []\n    for c in paren_string:\n        if c == '(':\n            depth += 1\n            max_depth = max(max_depth, depth)\n        elif c == ')':\n            depth -= 1\n        elif c == ' ':\n            result.append(max_depth)\n            max_depth = 0\n            depth = 0\n        else:\n            raise ValueError(f'Invalid character: {c}')\n\n    result.append(max_depth)\n    return result",
        "grade-154": {
            "execution": 1
        },
        "109": "levels = []\n    for paren_group in paren_string.split():\n        level = 0\n        max_level = 0\n        for paren in paren_group:\n            if paren == '(':\n                level += 1\n                max_level = max(max_level, level)\n            elif paren == ')':\n                level -= 1\n        levels.append(max_level)\n    return levels",
        "grade-109": {
            "execution": 1
        },
        "8": "result = []\n    depth = 0\n    current_max = 0\n    for char in paren_string:\n        if char == '(':\n            depth += 1\n            current_max = max(current_max, depth)\n        elif char == ')':\n            depth -= 1\n        elif char == ' ':\n            result.append(current_max)\n            current_max = 0\n            depth = 0\n    result.append(current_max)\n    return result",
        "grade-8": {
            "execution": 1
        },
        "7": "result = []\n    for group in paren_string.split(' '):\n        prev_char = None\n        max_level = 0\n        current_level = 0\n        for char in group:\n            if char == '(':\n                current_level += 1\n                max_level = max(max_level, current_level)\n            elif char == ')':\n                current_level -= 1\n            prev_char = char\n        result.append(max_level)\n    return result",
        "grade-7": {
            "execution": 1
        },
        "23": "groups = paren_string.split()\n    results = []\n    for group in groups:\n        group_depth = 0\n        group_max_depth = 0\n        for symbol in group:\n            if symbol == '(':\n                group_depth += 1\n                group_max_depth = max(group_max_depth, group_depth)\n            elif symbol == ')':\n                group_depth -= 1\n        results.append(group_max_depth)\n    return results",
        "grade-23": {
            "execution": 1
        },
        "55": "# Splitting the string into groups of parentheses\n    groups = paren_string.split(' ')\n    # The output list\n    output = []\n    # For each of the group, call helper function with state variable max_depth\n    for g in groups:\n        max_depth = 0\n        helper(g, 0, 0, max_depth, output)\n    return output",
        "grade-55": {
            "execution": 0
        },
        "59": "result = []\n    for paren_group in paren_string.split(' '):\n        level = 0\n        maximum_level = 0\n        for paren in paren_group:\n            if paren == '(':\n                level += 1\n                maximum_level = max(maximum_level, level)\n            elif paren == ')':\n                level -= 1\n            else:\n                raise ValueError(f'{paren} is not a parenthesis')\n        result.append(maximum_level)\n    return result",
        "grade-59": {
            "execution": 1
        }
    },
    {
        "intent": "from typing import List\n\ndef triples_sum_to_zero(l: List[int]) -> bool:\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n",
        "snippet": [
            "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n"
        ],
        "simplified": "triples_sum_to_zero takes a list of integers as an input. it returns True if there are three distinct elements in the list that sum to zero, and False otherwise.",
        "task_id": "40",
        "29": "for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False",
        "grade-29": {
            "execution": 1
        },
        "6": "if len(l) < 3:\n        return False\n    l.sort()\n    for i in range(len(l) - 2):\n        a = l[i]\n        low = i + 1\n        high = len(l) - 1\n        while low < high:\n            b = l[low]\n            c = l[high]\n            if a + b + c == 0:\n                return True\n            elif a + b + c < 0:\n                low += 1\n            else:\n                high -= 1\n    return False",
        "grade-6": {
            "execution": 1
        },
        "84": "if len(l) < 3:\n        return False\n    else:\n        for i in range(len(l)):\n            for j in range(i+1, len(l)):\n                for k in range(j+1, len(l)):\n                    if l[i] + l[j] + l[k] == 0:\n                        return True\n        return False",
        "grade-84": {
            "execution": 1
        },
        "73": "# sort list\n    l.sort()\n    # check if list has at least 3 elements\n    if len(l) < 3:\n        return False\n    # loop over the middle of the list and check that the sum of the elements\n    # to the left and right of this element equal zero\n    for mid in range(1, len(l) - 1):\n        left = 0\n        right = len(l) - 1\n        # loop until the left index is greater than the right index\n        while left < right:\n            # check if the sum of the current left and right elements and the\n            # element at the current mid index is equal to zero.  if it is\n            # return True and if not increment or decrement the left or right\n            # indices\n            if l[left] + l[right] + l[mid] == 0:\n                return True\n            elif l[left] + l[right] + l[mid] < 0:\n                left += 1\n            else:\n                right -= 1\n    # return False if no triple has been found\n    return False",
        "grade-73": {
            "execution": 1
        },
        "64": "# TODO: implement this function\n    pass",
        "grade-64": {
            "execution": 0
        },
        "36": "return False",
        "grade-36": {
            "execution": 0
        },
        "27": "if len(l) < 3:\n        return False\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False",
        "grade-27": {
            "execution": 1
        },
        "165": "# sort the list\n    l.sort()\n    # start at the beginning\n    i = 0\n    # iterate through the list\n    while i < len(l) - 2:\n        # start at the end\n        j = len(l) - 1\n        # iterate through the list\n        while j > i + 1:\n            # get the sum of l[i] and l[j]\n            # if it's zero, return True\n            # otherwise, check if it's greater than zero\n            # if it is, then decrement j and try again\n            # if it's not, then increment i and try again\n            k = l[i] + l[j]\n            if k == 0:\n                return True\n            elif k > 0:\n                j -= 1\n            else:\n                i += 1\n        # increment i by one to move to the next element\n        i += 1\n    # if we made it through the list without finding a triple,\n    # return False\n    return False",
        "grade-165": {
            "execution": 0
        },
        "23": "for i in range(len(l)):\n        a = l[i]\n        for j in range(i + 1, len(l)):\n            b = l[j]\n            for k in range(j + 1, len(l)):\n                c = l[k]\n                if a + b + c == 0:\n                    return True\n    return False",
        "grade-23": {
            "execution": 1
        },
        "184": "from itertools import combinations\n\n    for elem in combinations(l, 3):\n        if sum(elem) == 0:\n            return True\n    return False",
        "grade-184": {
            "execution": 1
        },
        "128": "seen = set()\n    for num in l:\n        if num in seen:\n            return True\n        else:\n            seen.add(-num)\n    return False",
        "grade-128": {
            "execution": 0
        },
        "8": "if len(l) < 3:\n        return False\n    for a in l:\n        for b in l:\n            for c in l:\n                if a + b + c == 0 and a != b and b != c and a != c:\n                    return True\n    return False",
        "grade-8": {
            "execution": 0
        },
        "7": "list_length = len(l)\n    if list_length < 3:\n        return False\n    else:\n        triple = [l[i] for i in range(list_length - 2)]\n        for i in range(len(triple)):\n            for j in range(i + 1, len(triple)):\n                for k in range(j + 1, len(triple)):\n                    if triple[i] + triple[j] + triple[k] == 0:\n                        return True\n        return False",
        "grade-7": {
            "execution": 0
        },
        "24": "n = len(l)\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False",
        "grade-24": {
            "execution": 1
        },
        "61": "# the number of distinct numbers is less than 3\n    if len(set(l)) < 3:\n        return False\n    # find all pairs of numbers from the list\n    pairs = set()\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            pairs.add((l[i], l[j]))\n    # check if the pair sum is in the list\n    for i in range(len(l)):\n        for p in pairs:\n            if -l[i] in p:\n                # return True if there is a pair in the list whose sum is the current number\n                return True\n    return False",
        "grade-61": {
            "execution": 0
        },
        "66": "t = []\n    for x in l:\n        if x == 0:\n            for y in t:\n                if y == 0:\n                    return True\n            t.append(x)\n        else:\n            for y in t:\n                if (x + y) == 0:\n                    return True\n            t.append(x)\n    return False",
        "grade-66": {
            "execution": 0
        },
        "154": "l.sort()\n    for i in range(len(l)):\n        j = i + 1\n        k = len(l) - 1\n        while j < k:\n            if l[i] + l[j] + l[k] < 0:\n                j += 1\n            elif l[i] + l[j] + l[k] > 0:\n                k -= 1\n            else:\n                return True\n    return False",
        "grade-154": {
            "execution": 1
        },
        "187": "# We can make this algorithm faster by sorting the list and then\n    # iterating through the list and having a pointer to the first element\n    # and having a pointer to the last element. Then we can reduce our search\n    # to O(n) instead of O(n^3)\n    #\n    # If we have pointers to both ends of the list, we can check whether the\n    # sum of the two pointers is less than zero or greater than zero and then\n    # move the smaller or larger pointer accordingly.\n\n    # Edge cases\n    if len(l) < 3:\n        return False\n\n    # Sort the list so that we know the list has no elements greater than the\n    # current element\n    l.sort()\n\n    for i in range(len(l) - 2):\n        # i is the first pointer\n        # j is the second pointer\n        # k is the third pointer\n        j = i + 1\n        k = len(l) - 1\n\n        while j < k:\n            if l[i] + l[j] + l[k] == 0:\n                return True\n            elif l[i] + l[j] + l[k] < 0:\n                j += 1\n            else:\n                k -= 1\n\n    return False",
        "grade-187": {
            "execution": 1
        },
        "171": "return (\n        # this implementation is not optimal\n        # it runs in O(n^3) time\n        bool(l) and any(\n            l[i] + l[j] + l[k] == 0\n            for i in range(len(l) - 2)\n            for j in range(i + 1, len(l) - 1)\n            for k in range(j + 1, len(l))\n        )\n    )",
        "grade-171": {
            "execution": 1
        },
        "55": "l.sort()\n    for i in range(len(l)):\n        target = -l[i]\n        j = i + 1\n        k = len(l) - 1\n        while j < k:\n            sums = l[j] + l[k]\n            if sums == target:\n                return True\n            elif sums < target:\n                j += 1\n            else:\n                k -= 1\n    return False",
        "grade-55": {
            "execution": 1
        }
    },
    {
        "intent": "from typing import List\n\ndef do_algebra(operator: List[str], operand: List[int]) -> int:\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n",
        "snippet": [
            "    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n"
        ],
        "simplified": "Given two lists operator, and operand. The first list has basic algebra operations, and the second list is a list of integers. Use the two given lists to build the algebric expression and return the evaluation of this expression. The basic algebra operations: Addition ( + ) Subtraction ( - ) Multiplication ( * ) Floor division ( // ) Exponentiation ( ** )",
        "task_id": "160",
        "31": "# your code starts here:\n    n = len(operand)\n    result = operand[0]\n    for i in range(n-1):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result",
        "grade-31": {
            "execution": 0
        },
        "6": "# write your solution here\n    raise NotImplementedError(\"Please create a solution\")",
        "grade-6": {
            "execution": 0
        },
        "91": "try:\n        expression = f\"{operand[0]}{operator[0]}{operand[1]}\"\n        for o, ope in enumerate(operator[1:]):\n            expression += f\"{ope}{operand[o+2]}\"\n        return eval(expression)\n    except (SyntaxError, NameError):\n        return None",
        "grade-91": {
            "execution": 1
        },
        "81": "res = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            res += operand[i+1]\n        elif operator[i] == '-':\n            res -= operand[i+1]\n        elif operator[i] == '*':\n            res *= operand[i+1]\n        elif operator[i] == '//':\n            res //= operand[i+1]\n        elif operator[i] == '**':\n            res **= operand[i+1]\n    return res",
        "grade-81": {
            "execution": 0
        },
        "69": "total = operand[0]\n    for index, operator in enumerate(operator):\n        if operator == '+':\n            total += operand[index + 1]\n        elif operator == '-':\n            total -= operand[index + 1]\n        elif operator == '*':\n            total *= operand[index + 1]\n        elif operator == '//':\n            total //= operand[index + 1]\n        elif operator == '**':\n            total **= operand[index + 1]\n    return total",
        "grade-69": {
            "execution": 0
        },
        "40": "result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n        else:\n            raise ValueError('Invalid operator')\n    return result",
        "grade-40": {
            "execution": 0
        },
        "29": "result = operand[0]\n    for index, x in enumerate(operator):\n        if x == '+':\n            result += operand[index + 1]\n        elif x == '-':\n            result -= operand[index + 1]\n        elif x == '*':\n            result *= operand[index + 1]\n        elif x == '//':\n            result //= operand[index + 1]\n        elif x == '**':\n            result **= operand[index + 1]\n    return result",
        "grade-29": {
            "execution": 0
        },
        "177": "# ######################\n    # TODO: Implement me\n    # ######################\n    pass",
        "grade-177": {
            "execution": 0
        },
        "25": "result = 0\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i] + operand[i+1]\n        elif operator[i] == '-':\n            result += operand[i] - operand[i+1]\n        elif operator[i] == '*':\n            result += operand[i] * operand[i+1]\n        elif operator[i] == '//':\n            result += operand[i] // operand[i+1]\n        elif operator[i] == '**':\n            result += operand[i] ** operand[i+1]\n    return result\n\noperator = ['+', '*', '-']\noperand = [2, 3, 4, 5]\n\nprint(do_algebra(operator, operand))",
        "grade-25": {
            "execution": 0
        },
        "190": "result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n        else:\n            raise ValueError(\"Invalid operator\")\n    return result",
        "grade-190": {
            "execution": 0
        },
        "142": "result = 0\n    for i in range(len(operator)):\n        operand[i+1] = eval(str(operand[i]) + operator[i] + str(operand[i+1]))\n    return operand[len(operand)-1]\n\nprint(do_algebra(['+', '-', '*'], [2, 3, 4, 5]))",
        "grade-142": {
            "execution": 0
        },
        "9": "if len(operator) == 0 or len(operand) == 0:\n        return None\n    elif len(operator) == 1 and len(operand) == 2:\n        operator_dict = {\n            '+': add,\n            '-': sub,\n            '*': mul,\n            '//': floordiv,\n            '**': pow\n        }\n        return operator_dict[operator[0]](operand[0], operand[1])\n    elif len(operator) > 1 and len(operand) > 2:\n        operator_dict = {\n            '+': add,\n            '-': sub,\n            '*': mul,\n            '//': floordiv,\n            '**': pow\n        }\n        new_exp = []\n        for o, a in zip(operator, operand):\n            new_exp.append(a)\n            new_exp.append(o)\n        new_exp.append(operand[-1])\n        res = new_exp[0]\n        for index in range(1, len(new_exp), 2):\n            res = operator_dict[new_exp[index]](res, new_exp[index + 1])\n        return res\n    else:\n        return None",
        "grade-9": {
            "execution": 0
        },
        "7": "res = operand[0]\n    for opr, opd in zip(operator, operand[1:]):\n        if opr == '+':\n            res += opd\n        elif opr == '-':\n            res -= opd\n        elif opr == '*':\n            res *= opd\n        elif opr == '//':\n            res //= opd\n        elif opr == '**':\n            res **= opd\n    return res",
        "grade-7": {
            "execution": 0
        },
        "26": "operator = operator.copy()\n    operand = operand.copy()\n    for i in range(len(operator)):\n        if operator[i] == '**':\n            operand[i+1] = operand[i] ** operand[i+1]\n            operator.pop(i)\n            operand.pop(i)\n            i -= 1\n    for i in range(len(operator)):\n        if operator[i] == '//':\n            operand[i+1] = operand[i] // operand[i+1]\n            operator.pop(i)\n            operand.pop(i)\n            i -= 1\n    for i in range(len(operator)):\n        if operator[i] == '*':\n            operand[i+1] = operand[i] * operand[i+1]\n            operator.pop(i)\n            operand.pop(i)\n            i -= 1\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            operand[i+1] = operand[i] + operand[i+1]\n            operator.pop(i)\n            operand.pop(i)\n            i -= 1\n    for i in range(len(operator)):\n        if operator[i] == '-':\n            operand[i+1] = operand[i] - operand[i+1]\n            operator.pop(i)\n            operand.pop(i)\n            i -= 1\n    return operand[0]",
        "grade-26": {
            "execution": 0
        },
        "67": "i = 0\n    while i < len(operator):\n        if operator[i] == '**':\n            operand[i] = operand[i] ** operand[i+1]\n            del operand[i+1]\n            del operator[i]\n        else:\n            i += 1\n    i = 0\n    while i < len(operator):\n        if operator[i] == '//':\n            operand[i] = operand[i] // operand[i+1]\n            del operand[i+1]\n            del operator[i]\n        else:\n            i += 1\n    i = 0\n    while i < len(operator):\n        if operator[i] == '*':\n            operand[i] = operand[i] * operand[i+1]\n            del operand[i+1]\n            del operator[i]\n        else:\n            i += 1\n    i = 0\n    while i < len(operator):\n        if operator[i] == '+':\n            operand[i] = operand[i] + operand[i+1]\n            del operand[i+1]\n            del operator[i]\n        else:\n            i += 1\n    i = 0\n    while i < len(operator):\n        if operator[i] == '-':\n            operand[i] = operand[i] - operand[i+1]\n            del operand[i+1]\n            del operator[i]\n        else:\n            i += 1\n    return operand[0]",
        "grade-67": {
            "execution": 1
        },
        "71": "if len(operator) != len(operand) - 1:\n        return None\n    result = operand[0]\n    for i in range(1, len(operand)):\n        if operator[i-1] == '+':\n            result += operand[i]\n        elif operator[i-1] == '-':\n            result -= operand[i]\n        elif operator[i-1] == '*':\n            result *= operand[i]\n        elif operator[i-1] == '//':\n            result //= operand[i]\n        elif operator[i-1] == '**':\n            result **= operand[i]\n    return result",
        "grade-71": {
            "execution": 0
        },
        "167": "if len(operator) != len(operand) - 1:\n        raise ValueError(\"Invalid operand and/or operator\")\n\n    for o in operand:\n        if o < 0:\n            raise ValueError(\"Invalid operand\")\n\n    if len(operator) == 0:\n        raise ValueError(\"Invalid operator\")\n\n    if len(operand) == 0:\n        raise ValueError(\"Invalid operand\")\n\n    operations = {\"+\": operator.count(\"+\"), \"-\": operator.count(\"-\"), \"*\": operator.count(\"*\"), \"//\": operator.count(\"//\"), \"**\": operator.count(\"**\")}\n\n    if operations[\"**\"] > 0:\n        if operations[\"**\"] > 1:\n            raise ValueError(\"Invalid operator\")\n        operation = operator.index(\"**\")\n        temp = operand[operation] ** operand[operation + 1]\n        operator.pop(operation)\n        operand.pop(operation)\n        operand[operation] = temp\n\n    if operations[\"//\"] > 0:\n        operation = operator.index(\"//\")\n        temp = operand[operation] // operand[operation + 1]\n        operator.pop(operation)\n        operand.pop(operation)\n        operand[operation] = temp\n\n    if operations[\"*\"] > 0:\n        operation = operator.index(\"*\")\n        temp = operand[operation] * operand[operation + 1]\n        operator.pop(operation)\n        operand.pop(operation)\n        operand[operation] = temp\n\n    if operations[\"-\"] > 0:\n        operation = operator.index(\"-\")\n        temp = operand[operation] - operand[operation + 1]\n        operator.pop(operation)\n        operand.pop(operation)\n        operand[operation] = temp\n\n    if operations[\"+\"] > 0:\n        operation = operator.index(\"+\")\n        temp = operand[operation] + operand[operation + 1]\n        operator.pop(operation)\n        operand.pop(operation)\n        operand[operation] = temp\n\n    return operand[0]",
        "grade-167": {
            "execution": 1
        },
        "193": "result = operand[0]\n    for i in range(len(operator)):\n        op = operator[i]\n        a = operand[i]\n        b = operand[i+1]\n        if op == '+':\n            result += b\n        elif op == '-':\n            result -= b\n        elif op == '*':\n            result *= b\n        elif op == '//':\n            result //= b\n        elif op == '**':\n            result **= b\n    return result",
        "grade-193": {
            "execution": 0
        },
        "181": "string = \"\".join(list(map(lambda a, b: f\"{a}{b}\", operator, operand)))\n    return eval(string)",
        "grade-181": {
            "execution": 0
        },
        "60": "result = operand[0]\n    i = 0\n    while i < len(operator):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n        i += 1\n    return result",
        "grade-60": {
            "execution": 0
        }
    },
    {
        "intent": "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n",
        "snippet": [
            "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n"
        ],
        "simplified": "The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3). Please write a function to efficiently compute the n-th element of the fibfib number sequence.",
        "task_id": "63",
        "31": "pass",
        "grade-31": {
            "execution": 0
        },
        "7": "if n <= 2:\n        return 0 if n == 0 else 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 4\n    elif n == 5:\n        return 6\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)",
        "grade-7": {
            "execution": 0
        },
        "83": "a, b, c = 0, 0, 1\n    if n < 0:\n        raise ValueError(\"n must be non-negative.\")\n    if n == 0:\n        return a\n    for i in range(2, n+1):\n        d = a + b + c\n        a, b, c = b, c, d\n    return d",
        "grade-83": {
            "execution": 0
        },
        "73": "# TODO\n    pass",
        "grade-73": {
            "execution": 0
        },
        "68": "if n <= 2:\n        return n - 1\n    a, b, c = 0, 1, 1\n    for _ in range(n - 3):\n        a, b, c = b, c, a + b + c\n    return c",
        "grade-68": {
            "execution": 1
        },
        "41": "assert n >= 0\n    if n <= 2:\n        return n - 1\n    n -= 2\n    a, b, c = 0, 1, 1\n    while n > 0:\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return c",
        "grade-41": {
            "execution": 0
        },
        "29": "a, b, c = 0, 0, 1\n    for _ in range(n):\n        a, b, c = b, c, a + b + c\n    return a",
        "grade-29": {
            "execution": 1
        },
        "177": "return fibfib_helper(n, {0: 0, 1: 0, 2: 1})",
        "grade-177": {
            "execution": 0
        },
        "25": "if n <= 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)",
        "grade-25": {
            "execution": 1
        },
        "197": "if n <= 1:\n        return 0\n    if n == 2:\n        return 1\n    f = [0, 0, 1]\n    for i in range(3, n + 1):\n        f.append(f[i - 1] + f[i - 2] + f[i - 3])\n    return f[n]",
        "grade-197": {
            "execution": 1
        },
        "129": "# Using a loop is a little more efficient than recursion\n    f0, f1, f2 = 0, 0, 1\n    for _ in range(n):\n        f0, f1, f2 = f1, f2, f0 + f1 + f2\n    return f0",
        "grade-129": {
            "execution": 1
        },
        "9": "if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)",
        "grade-9": {
            "execution": 1
        },
        "8": "if n < 3:\n        return 0 if n == 0 else 1\n    a, b, c = 0, 1, 1\n    for _ in range(n - 3):\n        a, b, c = b, c, a + b + c\n    return c",
        "grade-8": {
            "execution": 0
        },
        "26": "if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)",
        "grade-26": {
            "execution": 1
        },
        "66": "if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    else:\n        first = 0\n        second = 0\n        third = 1\n        fourth = 1\n        for _ in range(n-3):\n            fifth = fourth + third + second\n            first = second\n            second = third\n            third = fourth\n            fourth = fifth\n        return fourth",
        "grade-66": {
            "execution": 1
        },
        "70": "if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    else:\n        i = 3\n        a = 0\n        b = 0\n        c = 1\n        while i <= n:\n            a = b\n            b = c\n            c = a + b + c\n            i += 1\n        return c\n\n\n@pytest.mark.parametrize(\"n, expected\", [(0, 0), (1, 0), (2, 1), (3, 1), (4, 3), (5, 4), (6, 9), (7, 13), (8, 24)])",
        "grade-70": {
            "execution": 0
        },
        "161": "if n < 0:\n        raise ValueError(\"n cannot be less than 0.\")\n    elif n < 3:\n        return n-1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    \nprint(fibfib(0))\nprint(fibfib(5))\nprint(fibfib(8))",
        "grade-161": {
            "execution": 0
        },
        "182": "if n < 0:\n        raise ValueError(f\"{n} < 0\")\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)",
        "grade-182": {
            "execution": 1
        },
        "59": "fibs = [0, 0, 1]\n    for i in range(3, n + 1):\n        fibs.append(fibs[i - 1] + fibs[i - 2] + fibs[i - 3])\n    return fibs[n]",
        "grade-59": {
            "execution": 1
        },
        "128": "if n < 3:\n        return n - 1\n    a, b, c = 0, 0, 1\n    for _ in range(3, n + 1):\n        a, b, c = b, c, a + b + c\n    return c",
        "grade-128": {
            "execution": 1
        }
    },
    {
        "intent": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n",
        "snippet": [
            "    return ''.join(strings)\n"
        ],
        "simplified": "Concatenate list of strings into a single string",
        "task_id": "28",
        "18": "if not strings:\n        return ''\n    return ''.join(strings)",
        "grade-18": {
            "execution": 1
        },
        "3": "return ''.join(strings)",
        "grade-3": {
            "execution": 1
        },
        "75": "pass",
        "grade-75": {
            "execution": 0
        },
        "60": "acc = \"\"\n    for s in strings:\n        acc += s\n    return acc",
        "grade-60": {
            "execution": 1
        },
        "55": "joined = ''\n    for s in strings:\n        joined += s\n    return joined",
        "grade-55": {
            "execution": 1
        },
        "26": "output: str = ''\n    for s in strings:\n        output += s\n    return output",
        "grade-26": {
            "execution": 1
        },
        "17": "output = ''\n    for word in strings:\n        output += word\n    return output\nprint(concatenate(['h', 'e', 'l', 'l', 'o']))\nprint(concatenate([]))",
        "grade-17": {
            "execution": 1
        },
        "15": "result = ''\n    for s in strings:\n        result += s\n    return result",
        "grade-15": {
            "execution": 1
        },
        "85": "return \"\".join(strings)\n\nconcatenate(['a', 'b', 'c'])\n\nfrom typing import Sequence",
        "grade-85": {
            "execution": 1
        },
        "51": "string = ''\n    for s in strings:\n        string += s\n    return string",
        "grade-51": {
            "execution": 1
        },
        "2": "return \"\"",
        "grade-2": {
            "execution": 0
        },
        "1": "return ''",
        "grade-1": {
            "execution": 0
        },
        "5": "return ''.join(strings)",
        "grade-5": {
            "execution": 1
        },
        "161": "s = ''\n    for n in strings:\n        s += n\n    return s",
        "grade-161": {
            "execution": 1
        },
        "199": "assert all(type(s) == str for s in strings)\n    return ''.join(strings)",
        "grade-199": {
            "execution": 1
        },
        "64": "return ''.join(strings)",
        "grade-64": {
            "execution": 1
        },
        "91": "# assert all(type(s) == str for s in strings)\n    return ''.join(strings)",
        "grade-91": {
            "execution": 1
        },
        "149": "concat = ''\n    for string in strings:\n        concat += string\n    return concat",
        "grade-149": {
            "execution": 1
        },
        "184": "cat_string = ''\n    for s in strings:\n        cat_string += s\n    return cat_string",
        "grade-184": {
            "execution": 1
        },
        "16": "new_string = ''\n    for s in strings:\n        new_string += s\n    return new_string",
        "grade-16": {
            "execution": 1
        }
    },
    {
        "intent": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n",
        "snippet": [
            "    while b:\n        a, b = b, a % b\n    return a\n"
        ],
        "simplified": "Return a greatest common divisor of two integers a and b",
        "task_id": "13",
        "156": "# a = bq + r\n    r = a % b\n    if r == 0:\n        return b\n    else:\n        return greatest_common_divisor(b, r)",
        "grade-156": {
            "execution": 1
        },
        "21": "if a == 0:\n        return b\n    elif b == 0:\n        return a\n    elif a >= b:\n        return greatest_common_divisor(a % b, b)\n    else:\n        return greatest_common_divisor(a, b % a)",
        "grade-21": {
            "execution": 1
        },
        "3": "while b:\n        a, b = b, a % b\n    return a",
        "grade-3": {
            "execution": 1
        },
        "196": "# TODO: Implement this",
        "grade-196": {
            "execution": 0
        },
        "62": "if a < b:\n        a, b = b, a\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    return greatest_common_divisor(b, a % b)",
        "grade-62": {
            "execution": 1
        },
        "56": "if a == 0:\n        return b\n    elif b == 0:\n        return a\n    elif a == b:\n        return a\n    elif a > b:\n        return greatest_common_divisor(a % b, b)\n    else:\n        return greatest_common_divisor(a, b % a)",
        "grade-56": {
            "execution": 1
        },
        "49": "a, b = max(a, b), min(a, b)\n    while b != 0:\n        a, b = b, a % b\n    return a",
        "grade-49": {
            "execution": 1
        },
        "30": "# Write your code here",
        "grade-30": {
            "execution": 0
        },
        "19": "a, b = sorted([a, b])\n    if a == 0:\n        return b\n    return greatest_common_divisor(b % a, a)",
        "grade-19": {
            "execution": 1
        },
        "165": "if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a > b:\n        return greatest_common_divisor(a % b, b)\n    else:\n        return greatest_common_divisor(a, b % a)",
        "grade-165": {
            "execution": 1
        },
        "134": "# compute greatest common divisor with Euclidean algorithm\n    while a != 0 and b != 0:\n        if a > b:\n            a = a % b\n        else:\n            b = b % a\n    return a + b",
        "grade-134": {
            "execution": 1
        },
        "14": "for divisor in range(min(a, b), 0, -1):\n        if a % divisor == 0 and b % divisor == 0:\n            return divisor\n    return 1",
        "grade-14": {
            "execution": 1
        },
        "145": "if a == 0:\n        return b\n    elif b == 0:\n        return a\n    elif a > b:\n        return greatest_common_divisor(a % b, b)\n    else:\n        return greatest_common_divisor(a, b % a)",
        "grade-145": {
            "execution": 1
        },
        "104": "if a == 0:\n        return b\n    return greatest_common_divisor(b % a, a)",
        "grade-104": {
            "execution": 1
        },
        "4": "while a != 0 and b != 0:\n        if a > b:\n            a = a % b\n        else:\n            b = b % a\n    return a + b",
        "grade-4": {
            "execution": 1
        },
        "47": "if a == 0 or b == 0:\n        return 0\n    if a < 0:\n        a = -a\n    if b < 0:\n        b = -b\n    a, b = max(a, b), min(a, b)\n    while b:\n        a, b = b, a % b\n    return a",
        "grade-47": {
            "execution": 1
        },
        "51": "gcd = 1\n    for i in range(1, a + 1):\n        if a % i == 0 and b % i == 0:\n            gcd = i\n    return gcd",
        "grade-51": {
            "execution": 1
        },
        "124": "if a == 0 or b == 0:\n        return 1\n    a = abs(a)\n    b = abs(b)\n    if a == b:\n        return a\n    if a > b:\n        return greatest_common_divisor(a - b, b)\n    return greatest_common_divisor(a, b - a)",
        "grade-124": {
            "execution": 1
        },
        "148": "return abs(a) if b == 0 else greatest_common_divisor(b, a % b)",
        "grade-148": {
            "execution": 1
        },
        "137": "return gcd(a, b)",
        "grade-137": {
            "execution": 0
        }
    },
    {
        "intent": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n",
        "snippet": [
            "    return string.swapcase()\n"
        ],
        "simplified": "For a given string, flip lowercase characters to uppercase and uppercase to lowercase.",
        "task_id": "27",
        "30": "new_str = \"\"\n    for letter in string:\n        if letter.isupper():\n            new_str += letter.lower()\n        else:\n            new_str += letter.upper()\n    return new_str",
        "grade-30": {
            "execution": 1
        },
        "6": "return ''",
        "grade-6": {
            "execution": 0
        },
        "85": "output = ''\n    for i in string:\n        if i.isupper():\n            output += i.lower()\n        else:\n            output += i.upper()\n    return output",
        "grade-85": {
            "execution": 1
        },
        "76": "return ''.join(ch.upper() if ch.islower() else ch.lower() for ch in string)\n\nstring = input(\"Enter a string: \")\nprint(flip_case(string))",
        "grade-76": {
            "execution": 0
        },
        "71": "new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n    return new_string",
        "grade-71": {
            "execution": 1
        },
        "34": "try:\n        string.isupper()\n    except AttributeError:\n        string = str(string)\n    flipped_string = \"\"\n    for char in string:\n        if char.isupper():\n            flipped_string += char.lower()\n        else:\n            flipped_string += char.upper()\n    return flipped_string",
        "grade-34": {
            "execution": 1
        },
        "28": "string = string.swapcase()\n    return string",
        "grade-28": {
            "execution": 1
        },
        "172": "flipped_string = ''\n    for char in string:\n        if char.isupper():\n            flipped_string += char.lower()\n        else:\n            flipped_string += char.upper()\n    return flipped_string",
        "grade-172": {
            "execution": 1
        },
        "25": "return string.swapcase()",
        "grade-25": {
            "execution": 1
        },
        "131": "flipped_str = \"\"\n    for s in string:\n        if s.isupper():\n            flipped_str += s.lower()\n        else:\n            flipped_str += s.upper()\n    return flipped_str",
        "grade-131": {
            "execution": 1
        },
        "11": "return \"\".join([x.lower() if x.isupper() else x.upper() for x in string])\n\n@memoized",
        "grade-11": {
            "execution": 0
        },
        "196": "upper = string.upper()\n    lower = string.lower()\n    for idx, char in enumerate(string):\n        if char == lower[idx]:\n            string = string[:idx] + upper[idx] + string[idx+1:]\n        else:\n            string = string[:idx] + lower[idx] + string[idx+1:]\n    return string",
        "grade-196": {
            "execution": 1
        },
        "180": "flip_list = []\n    for i in string:\n        if i.isupper():\n            flip_list.append(i.lower())\n        else:\n            flip_list.append(i.upper())\n    return ''.join(flip_list)",
        "grade-180": {
            "execution": 1
        },
        "66": "swapped_case = ''\n    for char in string:\n        if char.isupper():\n            swapped_case += char.lower()\n        else:\n            swapped_case += char.upper()\n    return swapped_case",
        "grade-66": {
            "execution": 1
        },
        "72": "return ''.join(c.lower() if c.isupper() else c.upper() for c in string)",
        "grade-72": {
            "execution": 1
        },
        "152": "case_list = [char.lower() if char.isupper() else char.upper() for char in string]\n    return ''.join(case_list)\n\n\n@logger",
        "grade-152": {
            "execution": 0
        },
        "182": "# TODO : Complete this method",
        "grade-182": {
            "execution": 0
        },
        "59": "return \"\".join([c.lower() if c.isupper() else c.upper() for c in string])",
        "grade-59": {
            "execution": 1
        },
        "109": "ret = \"\"\n    for c in string:\n        if c.isupper():\n            ret += c.lower()\n        else:\n            ret += c.upper()\n    return ret",
        "grade-109": {
            "execution": 1
        },
        "100": "return ''.join(ch.lower() if ch.isupper() else ch.upper() for ch in string)",
        "grade-100": {
            "execution": 1
        }
    },
    {
        "intent": "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n",
        "snippet": [
            "    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n"
        ],
        "simplified": "Your task is to write a function that returns true if a number x is a simple power of n and false in other cases. x is a simple power of n if n**int=x",
        "task_id": "76",
        "197": "# your code here\n    return (pow(n,int(math.log(x,n))) == x)",
        "grade-197": {
            "execution": 0
        },
        "29": "if n == 1:\n        return x == 1\n    n_power = n\n    while n_power <= x:\n        if n_power == x:\n            return True\n        n_power *= n\n    return False",
        "grade-29": {
            "execution": 0
        },
        "6": "root = round(x ** (1 / n))\n    return root ** n == x",
        "grade-6": {
            "execution": 0
        },
        "78": "return False",
        "grade-78": {
            "execution": 0
        },
        "68": "return x != 1 and x != n and x % n == 0",
        "grade-68": {
            "execution": 0
        },
        "59": "return x == n ** int(math.log(x, n)) if x > 0 else False\n\n\nprint(is_simple_power(4, 2))",
        "grade-59": {
            "execution": 0
        },
        "36": "import math\n    if math.log(x, n) % 1 == 0:\n        return True\n    else:\n        return False",
        "grade-36": {
            "execution": 0
        },
        "27": "pass",
        "grade-27": {
            "execution": 0
        },
        "168": "return bool(x ** (1 / n) % 1 == 0)",
        "grade-168": {
            "execution": 0
        },
        "23": "from math import log\n    try:\n        return log(x, n).is_integer()\n    except:\n        return False",
        "grade-23": {
            "execution": 0
        },
        "185": "# your code here\n    return True if x==n**int(math.log(x,n)) else False",
        "grade-185": {
            "execution": 0
        },
        "130": "if x % n == 0:\n        if n ** (x / n) == x:\n            return True\n    return False",
        "grade-130": {
            "execution": 0
        },
        "8": "if x % n > 0:\n        return False\n    while x > 1:\n        if x % n > 0:\n            return False\n        x //= n\n    return True",
        "grade-8": {
            "execution": 0
        },
        "7": "if x == 0:\n        return False\n    return n ** round(math.log(x, n)) == x",
        "grade-7": {
            "execution": 0
        },
        "24": "try:\n        return x == n ** int(log(x, n))\n    except ValueError:\n        return False\n    except TypeError:\n        return False\n    except ZeroDivisionError:\n        return False",
        "grade-24": {
            "execution": 0
        },
        "57": "raise NotImplementedError",
        "grade-57": {
            "execution": 0
        },
        "64": "return log(x, n).is_integer()",
        "grade-64": {
            "execution": 0
        },
        "154": "import math\n    return x == math.pow(n, int(math.log(x, n)))",
        "grade-154": {
            "execution": 0
        },
        "188": "return (x ** (1 / n)).is_integer()",
        "grade-188": {
            "execution": 0
        },
        "173": "return x == n ** int(math.log(x, n))\n\n\n@test_function()",
        "grade-173": {
            "execution": 0
        }
    },
    {
        "intent": "from typing import List\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n",
        "snippet": [
            "    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n"
        ],
        "simplified": "Given a grid with N rows and N columns (N >= 2) and a positive integer k, each cell of the grid contains a value. Every integer in the range [1, N * N] inclusive appears exactly once on the cells of the grid. You have to find the minimum path of length k in the grid. You can start from any cell, and in each step you can move to any of the neighbor cells, in other words, you can go to cells which share an edge with you current cell. Please note that a path of length k means visiting exactly k cells (not necessarily distinct). You CANNOT go off the grid. A path A (of length k) is considered less than a path B (of length k) if after making the ordered lists of the values on the cells that A and B go through (let's call them lst_A and lst_B), lst_A is lexicographically less than lst_B, in other words, there exist an integer index i (1 <= i <= k) such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have lst_A[j] = lst_B[j]. It is guaranteed that the answer is unique. Return an ordered list of the values on the cells that the minimum path go through.",
        "task_id": "129",
        "175": "n = len(grid)\n    m = len(grid[0])\n    if k == 1:\n        min_val = (sys.maxsize, -1, -1)\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] < min_val[0]:\n                    min_val = (grid[i][j], i, j)\n        return [min_val[0]]\n    mins = []\n    for i in range(n):\n        for j in range(m):\n            for di, dj in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n                i2 = i + di\n                j2 = j + dj\n                if 0 <= i2 < n and 0 <= j2 < m:\n                    mins.append((grid[i][j], grid[i2][j2], i, j, i2, j2))\n    mins.sort()\n    seen = set()\n    while mins:\n        min_val, min_val2, i, j, i2, j2 = mins.pop(0)\n        key = (i, j, i2, j2)\n        if key in seen:\n            continue\n        seen.add(key)\n        q = deque([(i, j, [min_val])])\n        while q:\n            i, j, path = q.popleft()\n            if len(path) == k:\n                if path[-1] == min_val2:\n                    return path\n                else:\n                    continue\n            min_val = path[-1]\n            for di, dj in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n                i2 = i + di\n                j2 = j + dj\n                if 0 <= i2 < n and 0 <= j2 < m:\n                    val = grid[i2][j2]\n                    if val < min_val:\n                        q.append((i2, j2, path + [val]))\n    return []",
        "grade-175": {
            "execution": 0
        },
        "29": "def next_pos(x, y):\n        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            if 0 <= x + dx < N and 0 <= y + dy < N:\n                yield (x + dx, y + dy)\n\n    N = len(grid)\n    dist = [[[-1] * (N * N + 1) for _ in range(N)] for _ in range(N)]\n    dist[0][0][1] = grid[0][0]\n    visited = set()\n    visited.add((0, 0, 1))\n    while visited:\n        x, y, curr_k = visited.pop()\n        for x_next, y_next in next_pos(x, y):\n            if dist[x_next][y_next][curr_k] == -1 or \\\n                    dist[x_next][y_next][curr_k] > dist[x][y][curr_k] + grid[x_next][y_next]:\n                dist[x_next][y_next][curr_k] = dist[x][y][curr_k] + grid[x_next][y_next]\n                visited.add((x_next, y_next, curr_k))\n            if curr_k < k:\n                if dist[x_next][y_next][curr_k + 1] == -1 or \\\n                        dist[x_next][y_next][curr_k + 1] > dist[x][y][curr_k] + grid[x_next][y_next]:\n                    dist[x_next][y_next][curr_k + 1] = dist[x][y][curr_k] + grid[x_next][y_next]\n                    visited.add((x_next, y_next, curr_k + 1))\n\n    res = []\n    x, y = N - 1, N - 1\n    while k > 0:\n        minimum = grid[x][y]\n        x_next, y_next = -1, -1\n        for x_next_tmp, y_next_tmp in next",
        "grade-29": {
            "execution": 0
        },
        "6": "n = len(grid)\n    seen = set()\n    q = deque([(0, 0, [])])\n    min_path = [grid[0][0]]\n    while q:\n        cur_i, cur_j, path = q.popleft()\n        if (cur_i, cur_j) in seen:\n            continue\n        seen.add((cur_i, cur_j))\n        if len(path) == k - 1:\n            if (path[-1] < min_path[-1] or\n                (path[-1] == min_path[-1] and path + [grid[cur_i][cur_j]] < min_path)):\n                min_path = path + [grid[cur_i][cur_j]]\n        else:\n            for i, j in ((cur_i + 1, cur_j), (cur_i - 1, cur_j), (cur_i, cur_j + 1), (cur_i, cur_j - 1)):\n                if 0 <= i < n and 0 <= j < n:\n                    q.append((i, j, path + [grid[cur_i][cur_j]]))\n    return min_path",
        "grade-6": {
            "execution": 0
        },
        "73": "n = len(grid)\n    m = len(grid[0])\n    visited = set()\n    dirs = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    dp = [[None for j in range(m)] for i in range(n)]\n    dp[0][0] = ([grid[0][0]], grid[0][0])\n\n    for i in range(k):\n        for r in range(n):\n            for c in range(m):\n                if dp[r][c] is None:\n                    continue\n                for dx, dy in dirs:\n                    nr, nc = r + dx, c + dy\n                    if nr < 0 or nr >= n or nc < 0 or nc >= m:\n                        continue\n                    if (nr, nc) in visited:\n                        continue\n                    visited.add((nr, nc))\n                    if dp[nr][nc] is None:\n                        dp[nr][nc] = (dp[r][c][0] + [grid[nr][nc]], dp[r][c][1] + grid[nr][nc])\n                    else:\n                        curr = dp[nr][nc][1] + grid[nr][nc]\n                        if curr < dp[nr][nc][1]:\n                            dp[nr][nc] = (dp[r][c][0] + [grid[nr][nc]], curr)\n                        elif curr == dp[nr][nc][1]:\n                            dp[nr][nc] = min(dp[nr][nc], (dp[r][c][0] + [grid[nr][nc]], curr))\n                        else:\n                            continue\n        if dp[n-1][m-1] is not None:\n            break\n    return dp[n-1][m-1][0]\n\nprint(minPath([ [1,2,3], [4,5,6], [7,8,9]], 3))\nprint(minPath([ [5,9,3], [4,1,6], [7,8,2]], 1))",
        "grade-73": {
            "execution": 0
        },
        "63": "M = len(grid)\n    N = len(grid[0])\n    vals = set()\n    num_vals = M * N\n    if k == num_vals:\n        return [grid[i][j] for i in range(M) for j in range(N)]\n    for i in range(k):\n        for j in range(num_vals):\n            vals.add(j + 1)\n    for i in range(M):\n        for j in range(N):\n            vals.remove(grid[i][j])\n    if not vals:\n        return []\n    return sorted(list(vals))",
        "grade-63": {
            "execution": 0
        },
        "58": "rows, cols = len(grid), len(grid[0])\n    ans = None\n    stack = [([grid[0][0]], (0, 0))]\n    visited = {(0, 0)}\n    while stack:\n        curr_path, (i, j) = stack.pop()\n        if len(curr_path) == k:\n            if ans is None or curr_path < ans:\n                ans = curr_path\n            continue\n        for r, c in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:\n            if 0 <= r < rows and 0 <= c < cols and (r, c) not in visited:\n                visited.add((r, c))\n                stack.append((curr_path + [grid[r][c]], (r, c)))\n    return ans",
        "grade-58": {
            "execution": 0
        },
        "36": "rows, cols = len(grid), len(grid[0])\n    n = rows * cols\n    q = [(0, 0, k, [grid[0][0]])]\n    visited = {(0, 0)}\n    while q:\n        row, col, rem, path = q.pop(0)\n        if (row, col) == (rows - 1, cols - 1):\n            return path\n        if rem > 0:\n            for r, c in [(row + 1, col), (row - 1, col), (row, col + 1), (row, col - 1)]:\n                if 0 <= r < rows and 0 <= c < cols and (r, c) not in visited:\n                    visited.add((r, c))\n                    q.append((r, c, rem - 1, path + [grid[r][c]]))\n    return []",
        "grade-36": {
            "execution": 0
        },
        "26": "n = len(grid)\n    # the number of cells\n    m = n * n\n    # convert grid to 1D array\n    grid = [i for row in grid for i in row]\n    # store the path lenght as key, and value as the list of integers traversed \n    # in the path\n    ht = {}\n    # start from the first cell\n    ht[0] = [grid[0]]\n    # create a queue to store cells\n    q = deque([[0, 1]])\n    i = 1\n    while i < k:\n        path = []\n        while q:\n            x, y = q.popleft()\n            # move to the adjacent cells if they are within the range\n            if x - 1 >= 0:\n                # move to the left cell\n                path.append([x - 1, y])\n            if x + 1 < n:\n                # move to the right cell\n                path.append([x + 1, y])\n            if y - 1 >= 0:\n                # move to the top cell\n                path.append([x, y - 1])\n            if y + 1 < n:\n                # move to the bottom cell\n                path.append([x, y + 1])\n        if not path:\n            break\n        ht[i] = [grid[j] for j in [x + y * n for x, y in path]]\n        q = deque(path)\n        i += 1\n    # for key, value in ht.items():\n    #     print(key, value)\n    # sort the dictionary by value in ascending order\n    lst = sorted(ht.items(), key=lambda x:x[1])\n    return lst[0][1]",
        "grade-26": {
            "execution": 0
        },
        "186": "n = len(grid)\n    m = len(grid[0])\n    visited = [[[float('inf')] * n for _ in range(m)] for _ in range(k + 1)]\n    visited[0][0][0] = 0\n    q = deque([(0,0,0)])\n    while q:\n        path, i, j = q.popleft()\n        if path == k:\n            continue\n        if i > 0 and visited[path + 1][i - 1][j] > visited[path][i][j] + grid[i - 1][j]:\n            visited[path + 1][i - 1][j] = visited[path][i][j] + grid[i - 1][j]\n            q.append((path + 1, i - 1, j))\n        if i < n - 1 and visited[path + 1][i + 1][j] > visited[path][i][j] + grid[i + 1][j]:\n            visited[path + 1][i + 1][j] = visited[path][i][j] + grid[i + 1][j]\n            q.append((path + 1, i + 1, j))\n        if j > 0 and visited[path + 1][i][j - 1] > visited[path][i][j] + grid[i][j - 1]:\n            visited[path + 1][i][j - 1] = visited[path][i][j] + grid[i][j - 1]\n            q.append((path + 1, i, j - 1))\n        if j < m - 1 and visited[path + 1][i][j + 1] > visited[path][i][j] + grid[i][j + 1]:\n            visited[path + 1][i][j + 1] = visited[path][i][j] + grid[i][j + 1]\n            q.append((path + 1, i, j + 1))\n    #print(visited)\n    return [x[0] for x in visited]",
        "grade-186": {
            "execution": 0
        },
        "148": "steps = [[1, 0], [-1, 0], [0, 1], [0, -1]]\n    queue = []\n    seen = set()\n    queue.append([0, 0, [grid[0][0]]])\n    seen.add((0, 0))\n    cur_min = [float('inf')] * k\n    while queue:\n        cur = queue.pop(0)\n        i, j, path = cur[0], cur[1], cur[2]\n        if len(path) == k:\n            if path < cur_min:\n                cur_min = path\n        else:\n            for step in steps:\n                r, c = i + step[0], j + step[1]\n                if r < 0 or r >= len(grid) or c < 0 or c >= len(grid):\n                    continue\n                if (r, c) in seen:\n                    continue\n                queue.append([r, c, path + [grid[r][c]]])\n                seen.add((r, c))\n    return cur_min",
        "grade-148": {
            "execution": 0
        },
        "22": "graph = defaultdict(set)\n    for r in range(len(grid)):\n        for c in range(len(grid[0])):\n            if c - 1 >= 0:\n                graph[(r, c)].add((r, c - 1))\n            if c + 1 < len(grid[0]):\n                graph[(r, c)].add((r, c + 1))\n            if r - 1 >= 0:\n                graph[(r, c)].add((r - 1, c))\n            if r + 1 < len(grid):\n                graph[(r, c)].add((r + 1, c))\n\n    min_path = float('inf')\n    min_path_stack = []\n    for r in range(len(grid)):\n        for c in range(len(grid[0])):\n            def dfs(node, path, path_stack):\n                nonlocal min_path, min_path_stack\n                if len(path) == k:\n                    if path < min_path:\n                        min_path = path\n                        min_path_stack = path_stack[:]\n                    return\n                for n in graph[node]:\n                    dfs(n, path + grid[n[0]][n[1]], path_stack + [grid[n[0]][n[1]]])\n            dfs((r, c), grid[r][c], [grid[r][c]])\n    return min_path_stack",
        "grade-22": {
            "execution": 0
        },
        "162": "R, C = len(grid), len(grid[0])\n    mat = [[[float('inf')] for _ in range(C)] for _ in range(R)]\n    mat[0][0] = [grid[0][0]]\n    # first row\n    for i in range(1, C):\n        mat[0][i] = mat[0][i-1] + [grid[0][i]]\n    # first col\n    for i in range(1, R):\n        mat[i][0] = mat[i-1][0] + [grid[i][0]]\n    # rest of mat\n    for i in range(1, R):\n        for j in range(1, C):\n            mat[i][j] = mat[i-1][j] + [grid[i][j]]\n            if mat[i][j-1] < mat[i][j]:\n                mat[i][j] = mat[i][j-1] + [grid[i][j]]\n    \n    mat[-1][-1].sort()\n    return mat[-1][-1][:k]",
        "grade-162": {
            "execution": 0
        },
        "116": "n = len(grid)\n    # create a 2D array to store the minimum sum for each cell\n    min_path = [[0] * n for _ in range(n)]\n    min_path[0][0] = grid[0][0]\n    # initialize the first row\n    for j in range(1, n):\n        min_path[0][j] = min_path[0][j-1] + grid[0][j]\n    # initialize the first column\n    for i in range(1, n):\n        min_path[i][0] = min_path[i-1][0] + grid[i][0]\n    # compute the min sum for each cell\n    for i in range(1, n):\n        for j in range(1, n):\n            min_path[i][j] = min(min_path[i-1][j], min_path[i][j-1]) + grid[i][j]\n    res = [grid[0][0]]\n    r, c = 0, 0\n    while r < n-1 or c < n-1:\n        if r < n-1 and min_path[r+1][c] < min_path[r][c+1]:\n            r += 1\n        else:\n            c += 1\n        res.append(grid[r][c])\n    return res",
        "grade-116": {
            "execution": 0
        },
        "8": "paths = []\n    for r in range(len(grid)):\n        for c in range(len(grid[0])):\n            paths.append([grid[r][c]])\n    for i in range(k-1):\n        new_paths = []\n        for p in paths:\n            x, y = p[-1], p[-2]\n            for r in range(len(grid)):\n                for c in range(len(grid[0])):\n                    if grid[r][c] == x:\n                        if r-1 >= 0 and grid[r-1][c] not in p:\n                            new_paths.append(p + [grid[r-1][c]])\n                        if r+1 < len(grid) and grid[r+1][c] not in p:\n                            new_paths.append(p + [grid[r+1][c]])\n                        if c-1 >= 0 and grid[r][c-1] not in p:\n                            new_paths.append(p + [grid[r][c-1]])\n                        if c+1 < len(grid[0]) and grid[r][c+1] not in p:\n                            new_paths.append(p + [grid[r][c+1]])\n        paths = new_paths\n    paths.sort()\n    return paths[0]",
        "grade-8": {
            "execution": 0
        },
        "7": "N = len(grid)\n    res = []\n    q = []\n    grid[0][0] = -grid[0][0]\n    q.append((0, 0, -grid[0][0], [grid[0][0]]))\n    seen = set()\n    seen.add((0, 0))\n    while q:\n        x, y, curr_sum, curr_path = q.pop(0)\n        if len(curr_path) == k:\n            if not res or res[-1] > curr_path[-1]:\n                res = curr_path\n            continue\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            i, j = x + dx, y + dy\n            if 0 <= i < N and 0 <= j < N and (i, j) not in seen:\n                seen.add((i, j))\n                grid[i][j] = -grid[i][j]\n                q.append((i, j, curr_sum - grid[i][j], curr_path + [grid[i][j]]))\n    return res",
        "grade-7": {
            "execution": 0
        },
        "23": "n = len(grid)\n    m = len(grid[0])\n    dp = [[grid[i][j] for j in range(m)] for i in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if i == 0 and j == 0:\n                continue\n            if i == 0:\n                dp[i][j] = dp[i][j-1] + grid[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] + grid[i][j]\n            else:\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n    return dp[n-1][m-1]",
        "grade-23": {
            "execution": 0
        },
        "56": "# This is a DP problem that seems to have the Bellman Ford variant.\n    # The problem is that we may not be able to reach all the nodes in the\n    # shortest path. So we need some sort of mechanism to remove nodes that\n    # we cannot reach.\n    # First, what are the properties of a path that we need to generate to\n    # find the best path? Well, we need to generate a path of length `k` and\n    # we need to be able to compare that path to other paths. For comparison,\n    # the path needs to be sorted, so we might as well sort it while generating\n    # it.\n    # So we will have a generator that will yield all paths of length `k`\n    # sorted that start from some node.\n    n = len(grid)\n    m = len(grid[0])\n    grid_list = []\n    for i in range(n):\n        for j in range(m):\n            grid_list.append((grid[i][j], i, j))\n    grid_list.sort()\n    def path_generator(node, k):\n        if k == 0:\n            yield []\n        if k == 1:\n            yield [node]\n        i, j = node\n        if i > 0:\n            for path in path_generator((i-1, j), k-1):\n                yield [node] + path\n        if i < n-1:\n            for path in path_generator((i+1, j), k-1):\n                yield [node] + path\n        if j > 0:\n            for path in path_generator((i, j-1), k-1):\n                yield [node] + path\n        if j < m-1:\n            for path in path_generator((i, j+1), k-1):\n                yield [node] + path\n    # Now we need a heuristic to say whether a path that we generated is\n    # a good candidate. We can do that by evaluating the path and comparing\n    # it to the best path so far.\n    # Since the path is sorted, the evaluation is just evaluating the head of\n    # the path, we do not have to evaluate the entire path.\n    # If",
        "grade-56": {
            "execution": 0
        },
        "60": "N = len(grid)\n    min_path = [grid[0][0]]\n    possible_moves = [[0, 1], [1, 0], [0, -1], [-1, 0]]\n    visited = set()\n    visited.add((0, 0))\n    def _dfs(x, y, path, remaining_k):\n        if remaining_k == 0:\n            return\n        for move in possible_moves:\n            x_ = x + move[0]\n            y_ = y + move[1]\n            if x_ < 0 or x_ >= N or y_ < 0 or y_ >= N or (x_, y_) in visited:\n                continue\n            path.append(grid[x_][y_])\n            visited.add((x_, y_))\n            _dfs(x_, y_, path, remaining_k - 1)\n            path.pop()\n            visited.remove((x_, y_))\n    _dfs(0, 0, min_path, k - 1)\n    return min_path",
        "grade-60": {
            "execution": 0
        },
        "138": "n = len(grid)\n    offsets = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    dist = {}\n    q = deque([(1, (0, 0))])\n    dist[(0, 0)] = 0\n    while q:\n        v, pos = q.popleft()\n        if v > k:\n            break\n        for i, j in offsets:\n            new_pos = (pos[0] + i, pos[1] + j)\n            if new_pos[0] < 0 or new_pos[0] >= n or new_pos[1] < 0 or new_pos[1] >= n:\n                continue\n            if new_pos not in dist or dist[new_pos] > v:\n                dist[new_pos] = v\n                q.append((v+1, new_pos))\n    # construct path\n    cur = (n-1, n-1)\n    path = [grid[cur[0]][cur[1]]]\n    while cur != (0, 0):\n        for i, j in offsets:\n            new_pos = (cur[0] + i, cur[1] + j)\n            if new_pos[0] < 0 or new_pos[0] >= n or new_pos[1] < 0 or new_pos[1] >= n:\n                continue\n            if new_pos in dist and dist[new_pos] == dist[cur] - 1:\n                path.append(grid[new_pos[0]][new_pos[1]])\n                cur = new_pos\n                break\n    return path",
        "grade-138": {
            "execution": 0
        },
        "165": "import heapq\n\n    N = len(grid)\n    steps = [(1, 0), (0, 1), (-1, 0), (0, -1)]\n    mins = []\n    heapq.heappush(mins, (grid[0][0], 0, 0, [grid[0][0]]))\n    visited = set()\n    visited.add((0, 0))\n\n    while mins:\n        curr, x, y, curr_path = heapq.heappop(mins)\n        if len(curr_path) == k:\n            return curr_path\n\n        for s in steps:\n            xi, yi = x + s[0], y + s[1]\n            if 0 <= xi < N and 0 <= yi < N and (xi, yi) not in visited:\n                visited.add((xi, yi))\n                heapq.heappush(mins, (grid[xi][yi], xi, yi, curr_path + [grid[xi][yi]]))\n\n    return []\n\nprint(minPath([ [1,2,3], [4,5,6], [7,8,9]], 3))",
        "grade-165": {
            "execution": 0
        }
    },
    {
        "intent": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n",
        "snippet": [
            "    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n"
        ],
        "simplified": "From a list of integers, remove all elements that occur more than once. Keep order of elements left the same as in the input.",
        "task_id": "26",
        "30": "# Get list of unique values\n    unique_values = set(numbers)\n    # Turn it back into a list\n    unique_values = list(unique_values)\n    # Sort it\n    unique_values.sort()\n    # Return it\n    return unique_values",
        "grade-30": {
            "execution": 0
        },
        "6": "res = []\n    for n in numbers:\n        if n not in res:\n            res.append(n)\n    return res",
        "grade-6": {
            "execution": 0
        },
        "84": "# we need to return a list, so the easiest way is to keep\n    # track of what we've already seen, and ignore the ones we have.\n    already_seen = set()\n    result = []\n    for n in numbers:\n        if n not in already_seen:\n            result.append(n)\n            already_seen.add(n)\n    return result",
        "grade-84": {
            "execution": 0
        },
        "70": "result = []\n    for i in numbers:\n        if i not in result:\n            result.append(i)\n    return result",
        "grade-70": {
            "execution": 0
        },
        "64": "if len(numbers) < 2:\n        return numbers\n    unique_elements = []\n    for i in range(len(numbers)):\n        if numbers[i] not in unique_elements:\n            unique_elements.append(numbers[i])\n    return unique_elements",
        "grade-64": {
            "execution": 0
        },
        "39": "unique_numbers = []\n    for number in numbers:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    return unique_numbers\n\nprint(remove_duplicates([1, 2, 3, 2, 4]))",
        "grade-39": {
            "execution": 0
        },
        "28": "numbers.sort()\n    numbers_iter = iter(numbers)\n    prev = next(numbers_iter)\n    for num in numbers_iter:\n        if num == prev:\n            numbers.remove(num)\n        else:\n            prev = num\n    return numbers",
        "grade-28": {
            "execution": 0
        },
        "174": "d = {}\n    for e in numbers:\n        if e in d:\n            d[e] += 1\n        else:\n            d[e] = 1\n    return [e for e in numbers if d[e] == 1]",
        "grade-174": {
            "execution": 1
        },
        "24": "numbers_set = set(numbers)\n    print(numbers_set)\n    for i in range(len(numbers)):\n        if numbers[i] in numbers_set:\n            numbers_set.remove(numbers[i])\n            print(numbers_set)\n        else:\n            numbers.remove(numbers[i])\n            print(numbers)\n    return numbers",
        "grade-24": {
            "execution": 0
        },
        "187": "numbers_seen = set()\n    filtered_numbers = []\n    for n in numbers:\n        if n not in numbers_seen:\n            filtered_numbers.append(n)\n            numbers_seen.add(n)\n    return filtered_numbers",
        "grade-187": {
            "execution": 0
        },
        "134": "num_dict = {}\n    result = []\n    for num in numbers:\n        if num not in num_dict:\n            num_dict[num] = 1\n            result.append(num)\n    return result",
        "grade-134": {
            "execution": 0
        },
        "8": "return []",
        "grade-8": {
            "execution": 0
        },
        "7": "return [x for i, x in enumerate(numbers) if x not in numbers[:i]]",
        "grade-7": {
            "execution": 0
        },
        "25": "non_duplicate_numbers = set()\n    result = []\n    for n in numbers:\n        if n not in non_duplicate_numbers:\n            non_duplicate_numbers.add(n)\n            result.append(n)\n    return result",
        "grade-25": {
            "execution": 0
        },
        "62": "seen = set()\n    unique = []\n    for x in numbers:\n        if x not in seen:\n            seen.add(x)\n            unique.append(x)\n    return unique",
        "grade-62": {
            "execution": 0
        },
        "66": "seen = set()\n    unique = []\n    for n in numbers:\n        if n not in seen:\n            unique.append(n)\n            seen.add(n)\n    return unique",
        "grade-66": {
            "execution": 0
        },
        "163": "# Step 1: Create a dictionary with the items of the list as keys and\n    # their number of occurrences as values\n    frequency = {}\n    for num in numbers:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    \n    # Step 2: Create a new list with numbers that only occur once\n    distinct_numbers = []\n    for num in numbers:\n        if frequency[num] == 1:\n            distinct_numbers.append(num)\n    \n    return distinct_numbers",
        "grade-163": {
            "execution": 1
        },
        "195": "# your code here",
        "grade-195": {
            "execution": 0
        },
        "179": "pass # this is a stub. delete and fill in the body of the function.\n    # hint: you should use set()\n\nremove_duplicates([1, 2, 3, 2, 4])",
        "grade-179": {
            "execution": 0
        },
        "57": "numbers = sorted(numbers)\n    dic = {}\n    for num in numbers:\n        if num not in dic:\n            dic[num] = 1\n        else:\n            dic[num] += 1\n    for key in list(dic.keys()):\n        if dic[key] > 1:\n            del dic[key]\n    return list(dic.keys())\n\nimport doctest\ndoctest.testmod()",
        "grade-57": {
            "execution": 1
        }
    },
    {
        "intent": "from typing import List\n\ndef odd_count(lst: List[str]) -> List[str]:\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n",
        "snippet": [
            "    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n"
        ],
        "simplified": "Given a list of strings, where each string consists of only digits, return a list. Each element i of the output should be \"the number of odd elements in the string i of the input.\" where all the i's should be replaced by the number of odd digits in the i'th string of the input.",
        "task_id": "113",
        "164": "count = 0\n    for index,s in enumerate(lst):\n        for c in s:\n            if int(c) % 2 != 0:\n                count += 1\n        lst[index] = f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\"\n        count = 0\n    return lst",
        "grade-164": {
            "execution": 1
        },
        "28": "return [f\"the number of odd elements {str(sum(map(int, str(i))))}n the str{str(i)}ng {str(i)} of the {str(i)}nput.\" for i in lst]",
        "grade-28": {
            "execution": 0
        },
        "6": "return [f\"the number of odd elements {str(len([x for x in i if int(x) % 2 == 1]))}n the str{i}ng {i} of the {i}nput.\" for i in lst]",
        "grade-6": {
            "execution": 0
        },
        "190": "return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(\n        str(len([int(i) for i in str(x) if int(i) % 2 != 0])),\n        str(x).find(\" \") + 1,\n        str(x).find(\" \") + 1,\n        str(x).find(\" \") + 1) for x in lst]",
        "grade-190": {
            "execution": 0
        },
        "70": "for i in range(len(lst)):\n        count = 0\n        for j in range(len(lst[i])):\n            if int(lst[i][j]) % 2 == 1:\n                count += 1\n        lst[i] = \"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(count, i, i, i)\n    return lst",
        "grade-70": {
            "execution": 0
        },
        "62": "return [\"the number of odd elements %sn the str%sng %s of the %snput.\" %\n            (str(len([x for x in i if int(x) % 2 == 1])), str(i.index(i)+1), str(i.index(i)+1), str(i.index(i)+1))\n            for i in lst]",
        "grade-62": {
            "execution": 0
        },
        "57": "return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(str(str(x).count(\"1\")+str(x).count(\"3\")+str(x).count(\"5\")+str(x).count(\"7\")+str(x).count(\"9\")),str(x).count(\"1\")+str(x).count(\"3\")+str(x).count(\"5\")+str(x).count(\"7\")+str(x).count(\"9\"),str(lst.index(x)+1),str(lst.index(x)+1)) for x in lst]\n\nprint(odd_count(['1234567']))\nprint(odd_count(['3',\"11111111\"]))",
        "grade-57": {
            "execution": 0
        },
        "35": "output = []\n    for i in range(len(lst)):\n        odd_digits = 0\n        for digit in lst[i]:\n            if int(digit) % 2 != 0:\n                odd_digits += 1\n        i_string = \"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(odd_digits, i, i, i)\n        output.append(i_string)\n    return output",
        "grade-35": {
            "execution": 0
        },
        "189": "for i in range(len(lst)):\n        if i % 2 == 0:\n            yield f\"the number of odd elements {lst[i].count('1')}n the str{lst[i]}ng {lst[i]} of the {lst[i]}nput.\"",
        "grade-189": {
            "execution": 0
        },
        "26": "# 5 min later:\n    # I get the point but can't put it into code yet.\n    # The point is that:\n    # we are using the fact that\n    #   \"the number of odd elements 4n the str4ng 4 of the 4nput.\"\n    # is the same as (except for an extra \"n\")\n    #   \"the number of odd elements 1n the str1ng 1 of the 1nput.\"\n    # so we can use \"4\" to mean \"the number of odd digits in the 4th string\"\n    # and \"1\" to mean \"the number of odd digits in the 1st string\"\n    #\n    # But I'm stuck because I can't see the relation between\n    #   \"the number of odd elements 4n the str4ng 4 of the 4nput.\"\n    # and:\n    #   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\n    #\n    # ok, I see what's going on.\n    # We can translate \"4\" to \"1\"\n    # or translate \"4\" to \"8\"\n    # or translate \"4\" to \"5\"\n    # or translate \"4\" to \"6\"\n    # etc\n    #\n    # so it's a list comprehension.\n    # The replace needs to be done on each character of the string.\n    # That's what the inner list comprehension is for.\n    # that's great but how do I test it?\n    # I think I need a test case that uses 0 and 9.\n    # ok, that shows that there's a bug.\n    # do I just do a lookup table?\n    # that would make everything even easier\n    # but I need to make sure 0 and 9 can be translated to something.\n    # ok, that's what the translate is for.\n    # it's not actually using the lookup table.\n    # that's amazing.\n    # It just replaces it with \\x00\n    # so it doesn't look at the input so much as the \"index\" of the input.\n    # that's insanely clever.\n    #\n    return [\"the number of odd elements %sn the str%sng %s of the %snput.\"\n            % (c, c",
        "grade-26": {
            "execution": 0
        },
        "174": "count = []\n    num_list = []\n    for num in lst:\n        num_list.append(num)\n    for num in num_list:\n        odd_digits = [d for d in num if int(d) % 2 != 0]\n        count.append(f\"the number of odd elements {len(odd_digits)}n the str{len(odd_digits)}ng {len(odd_digits)} of the {len(odd_digits)}nput.\")\n    return count",
        "grade-174": {
            "execution": 1
        },
        "140": "output = []\n    for i in range(len(lst)):\n        count = 0\n        for j in range(len(lst[i])):\n            if int(lst[i][j]) % 2 == 1:\n                count += 1\n        to_add = f\"the number of odd elements {count}n the str{i}ng {i} of the {i}nput.\"\n        output.append(to_add)\n    return output",
        "grade-140": {
            "execution": 0
        },
        "22": "out = []\n    for x in lst:\n        my_list = list(x)\n        odd_list = []\n        odd_num = 0\n        for i in my_list:\n            if int(i) % 2 != 0:\n                odd_list.append(i)\n                odd_num += 1\n        for i in range(len(x)):\n            if i == x.find(str(odd_num)):\n                x = x.replace(str(odd_num), \"n\")\n        x = x.replace(\"1\", \"1n\")\n        x = x.replace(\"2\", \"2n\")\n        x = x.replace(\"3\", \"3n\")\n        x = x.replace(\"4\", \"4n\")\n        x = x.replace(\"5\", \"5n\")\n        x = x.replace(\"6\", \"6n\")\n        x = x.replace(\"7\", \"7n\")\n        x = x.replace(\"8\", \"8n\")\n        x = x.replace(\"9\", \"9n\")\n        out.append(x)\n    return out",
        "grade-22": {
            "execution": 0
        },
        "152": "return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(len([d for d in l if int(d) % 2 == 1]), i+1, i+1, i+1) for i, l in enumerate(lst)]",
        "grade-152": {
            "execution": 0
        },
        "109": "s = \"\"\n    for i in lst:\n        s += \"the number of odd elements \"\n        s += str(len([x for x in i if int(x) % 2 == 1]))\n        s += \"n the str\"\n        s += str(len(i))\n        s += \"ng \"\n        s += str(len(i))\n        s += \" of the \"\n        s += str(len(i))\n        s += \"nput.\"\n    return [s]",
        "grade-109": {
            "execution": 0
        },
        "8": "return []",
        "grade-8": {
            "execution": 0
        },
        "7": "out = []\n    for i in range(len(lst)):\n        # lst[i] is currently a string, so we can't do counts, etc on it.\n        # So we need to convert it to a list of integers first.\n        nums = list(map(int, lst[i])) # this converts each character to an int\n        num_odd = 0\n        for num in nums:\n            if num % 2 != 0:\n                num_odd += 1\n        odd_msg = \"the number of odd elements {}n the str{}ng {} of the {}nput.\"\n        out.append(odd_msg.format(num_odd, i, i, i))\n    return out",
        "grade-7": {
            "execution": 0
        },
        "23": "return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(\n        sum(1 for i in j if int(i) % 2 == 1),\n        i + 1,\n        i + 1,\n        i + 1) for i, j in enumerate(lst)]",
        "grade-23": {
            "execution": 0
        },
        "55": "return [f\"the number of odd elements {sum(int(c) % 2 for c in s)}n the str{sum(int(c) % 2 for c in s)}ng {sum(int(c) % 2 for c in s)} of the {sum(int(c) % 2 for c in s)}nput.\" for s in lst]",
        "grade-55": {
            "execution": 1
        },
        "59": "length = len(lst)\n    count = 0\n    output = []\n    for i in range(length):\n        for digit in lst[i]:\n            if int(digit) % 2 != 0:\n                count += 1\n        output.append(\"the number of odd elements \"+str(count)+\"n the str\"+str(i)+\"ng \"+str(i)+\" of the \"+str(i)+\"nput.\")\n        count = 0\n    return output",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n",
        "snippet": [
            "    return x + y\n"
        ],
        "simplified": "Add two numbers x and y",
        "task_id": "53",
        "150": "return x + y\n\n\n@pytest.mark.parametrize(\"x, y, z\", [\n    (2, 3, 5),\n    (5, 7, 12),\n])",
        "grade-150": {
            "execution": 0
        },
        "12": "return x + y\n\nadd.__doc__\n\nimport requests",
        "grade-12": {
            "execution": 0
        },
        "1": "return x + y",
        "grade-1": {
            "execution": 1
        },
        "181": "return x + y\n    # add(x, y) -> int\n    # add(2, 3) -> 5\n    # add(5, 7) -> 12",
        "grade-181": {
            "execution": 1
        },
        "59": "return x + y\nadd(2, 3)\n\nadd.__doc__",
        "grade-59": {
            "execution": 1
        },
        "51": "return x + y\n```\n\n```bash\n$ python -m doctest -v function.py\n```",
        "grade-51": {
            "execution": 0
        },
        "40": "return x + y\n\nimport doctest\ndoctest.testmod()",
        "grade-40": {
            "execution": 1
        },
        "18": "return x + y\nprint(add(2, 3))\nprint(add(5, 7))\nprint(add.__doc__)\n\nprint(add.__annotations__)",
        "grade-18": {
            "execution": 1
        },
        "10": "return x + y\n\n@click.command()\n@click.option('--x', type=float, help='First number')\n@click.option('--y', type=float, help='Second number')",
        "grade-10": {
            "execution": 0
        },
        "125": "return x + y\n\nhelp(add)",
        "grade-125": {
            "execution": 1
        },
        "9": "return x + y\n\nprint(add(1, 2))\nprint(add.__annotations__)\nprint(add.__doc__)",
        "grade-9": {
            "execution": 1
        },
        "143": "return x + y\n\n\nprint(add(2, 3))\nprint(add(5, 7))\n\nprint(add.__doc__)",
        "grade-143": {
            "execution": 1
        },
        "96": "return x + y\n\nadd(1, 2)\n\nhelp(add)",
        "grade-96": {
            "execution": 1
        },
        "2": "return x + y\nadd(2, 3)",
        "grade-2": {
            "execution": 1
        },
        "189": "return x + y\n\nadd(2, 3)\nadd(2, '3')",
        "grade-189": {
            "execution": 0
        },
        "153": "return x + y\n\nhelp(add)\nadd(10, 20)\n\nimport re",
        "grade-153": {
            "execution": 1
        },
        "35": "return x + y\n\nadd(2, 3)\n\nimport dis\n\ndis.dis(add)\n\nfrom inspect import getsource",
        "grade-35": {
            "execution": 1
        },
        "164": "return x + y\n```\n\n```bash\n$ pytest -v test_docs.py\n============================================== test session starts ===============================================\nplatform darwin -- Python 3.7.6, pytest-5.4.1, py-1.8.1, pluggy-0.13.1\nrootdir: /Users/tomokokawase/Documents/GitHub/python_unit_testing\ncollected 2 items\n\ntest_docs.py::test_add PASSED                                                                              [ 50%]\ntest_docs.py::test_add_documentation PASSED                                                                 [100%]\n\n================================================= 2 passed in 0.04s =================================================\n```",
        "grade-164": {
            "execution": 0
        },
        "116": "return x + y\n```\n\n```\npdoc --html .\\pdoc\\src\\pdoc\\pdoc.py\n```\n[pdoc](https://pdoc3.github.io/pdoc/)",
        "grade-116": {
            "execution": 0
        },
        "192": "return x + y",
        "grade-192": {
            "execution": 1
        }
    },
    {
        "intent": "def make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n",
        "snippet": [
            "    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n"
        ],
        "simplified": "Test if given string is a palindrome",
        "task_id": "10",
        "163": "if len(string) < 2:\n        return string\n    longest_palindrome_index = 0\n    for i in range(1, len(string)):\n        if is_palindrome(string[i:]):\n            longest_palindrome_index = i\n            break\n    return string + string[:longest_palindrome_index][::-1]",
        "grade-163": {
            "execution": 0
        },
        "28": "if len(string) < 2:\n        return string\n    pal_end = find_palindrome_end(string)\n    prefix = string[pal_end + 1:]\n    reverse_prefix = prefix[::-1]\n    return string + reverse_prefix",
        "grade-28": {
            "execution": 0
        },
        "6": "string_reverse = string[::-1]\n    if string == string_reverse:\n        return string\n    for suffix_length in range(len(string), 0, -1):\n        prefix = string[:suffix_length]\n        if prefix == prefix[::-1]:\n            return string + string_reverse[len(string) - suffix_length:]\n    return string + string_reverse[len(string):]",
        "grade-6": {
            "execution": 0
        },
        "189": "# we start from the string middle, looping over characters in the left half in forward order\n    # and in the right half in backward order.\n    # For example, if the string is 'cat', we will have:\n    # l_ptr -> l_ptr -> l_ptr -> l_ptr\n    #                 r_ptr <- r_ptr <- r_ptr\n    l_ptr = len(string) // 2\n    r_ptr = l_ptr\n    if len(string) % 2 == 0:\n        # if there are an even number of characters, we will start from a middle character,\n        # otherwise from a character that sits between the middle two.\n        r_ptr -= 1\n    # now we need to find the longest suffix that is a palindrome.\n    # We iterate over characters as long as r_ptr points to the character in the string bounds and two pointers\n    # point to the equal characters. When we will find such a postfix or leave the string bounds,\n    # we stop the loop and append the prefix (in the reversed order) to the end of the string.\n    while 0 <= r_ptr and l_ptr < len(string) and string[l_ptr] == string[r_ptr]:\n        l_ptr += 1\n        r_ptr -= 1\n    return string + string[:r_ptr][::-1]",
        "grade-189": {
            "execution": 0
        },
        "70": "s = string\n    if s == s[::-1]:\n        return s\n    for i in range(len(s), 0, -1):\n        if s[i:] == s[i:][::-1]:\n            return s + s[:i][::-1]",
        "grade-70": {
            "execution": 0
        },
        "62": "if not string:\n        return string\n    str_reverse = string[::-1]\n    for i in range(len(string)):\n        if string.startswith(str_reverse[i:]):\n            return string + str_reverse[:i]",
        "grade-62": {
            "execution": 0
        },
        "57": "# start from the left, find the longest suffix that is a palindrome\n    for suffix_end in range(len(string), 0, -1):\n        suffix = string[suffix_end:]\n        if is_palindrome(suffix):\n            return string + suffix[::-1]\n    return string",
        "grade-57": {
            "execution": 0
        },
        "35": "return string + get_shortest_prefix(string)[::-1]",
        "grade-35": {
            "execution": 0
        },
        "188": "# assert string\n\n    # If the whole string is a palindrome, then nothing to be done\n    if is_palindrome(string):\n        return string\n\n    # Find the longest suffix (postfix) that is a palindrome\n    longest_palindrome_suffix = ''\n    for i in range(len(string) - 1, -1, -1):\n        # Get the suffix that begins at the i'th character\n        suffix = string[i:]\n        if is_palindrome(suffix):\n            longest_palindrome_suffix = suffix\n            break\n\n    # append reverse of prefix of the string (comes before the found palindromic suffix)\n    return string + ''.join(reversed(string[:i]))",
        "grade-188": {
            "execution": 0
        },
        "26": "if not string:\n        return string\n    prefix = get_string_prefix(string)\n    return string + prefix[::-1]",
        "grade-26": {
            "execution": 0
        },
        "173": "if not string:\n        return string\n    length = len(string)\n    longest_postfix = _find_longest_postfix(string)\n    if length == longest_postfix:\n        return string + string[::-1]\n    return string + string[:length - longest_postfix][::-1]",
        "grade-173": {
            "execution": 0
        },
        "139": "n = len(string)\n    z_function = z_function_kmp(string + '#' + string[::-1])\n    return string + string[:n - z_function[n * 2 + 1]]",
        "grade-139": {
            "execution": 0
        },
        "22": "length = len(string)\n    # Find the length of the longest suffix that is a palindrome.\n    for x in range(length, -1, -1):\n        # print(f'x = {x}')\n        # print(f'string[x:] = {string[x:]}')\n        # print(f'string[:x] = {string[:x]}')\n        if string[x:] == string[:x][::-1]:\n            # print(f'length = {length - x}')\n            # Append to the end the reverse of a string prefix that comes before the palindromic suffix.\n            return string + string[:length - x][::-1]\n    return string",
        "grade-22": {
            "execution": 0
        },
        "151": "# find the longest postfix that is a palindrome\n    longest_palindrome_suffix_length = 0\n    for index in range(1, len(string) + 1):\n        if string[index:] == string[index:][::-1]:\n            longest_palindrome_suffix_length = index\n    # append the reverse of a prefix to the end of the string\n    # we need to reverse the part that comes before the palindromic suffix\n    # in order to make it the palindrome itself\n    # e.g. 'catac' -> 'cat' + 'ca' (ca is a reverse of cata)\n    return string + string[:len(string) - longest_palindrome_suffix_length][::-1]",
        "grade-151": {
            "execution": 0
        },
        "108": "if not string:\n        return string\n    i = find_longest_palindrome_suffix(string)\n    return string + string[:i][::-1]",
        "grade-108": {
            "execution": 0
        },
        "8": "length = len(string)\n    for i in range(length):\n        if string[:length - i] == string[length - i - 1::-1]:\n            return string + string[:length - i - 1:-1]\n    return string",
        "grade-8": {
            "execution": 0
        },
        "7": "postfix_len = find_longest_palindrome_postfix_len(string)\n    return string + string[:len(string) - postfix_len][::-1]",
        "grade-7": {
            "execution": 0
        },
        "23": "if not string:\n        return string\n    suffix = find_longest_palindromic_suffix(string)\n    prefix = string[:len(string) - len(suffix)]\n    return string + prefix[::-1]",
        "grade-23": {
            "execution": 0
        },
        "55": "for offset in range(len(string)):\n        suffix = string[offset:]\n        if is_palindrome(suffix):\n            return string + string[:offset][::-1]\n    return string + string[::-1]",
        "grade-55": {
            "execution": 0
        },
        "59": "reversed_string = string[::-1]\n    match = re.search(f'(.*){reversed_string}', string)\n    if match:\n        postfix = match.group(1)\n        if postfix:\n            return f'{string}{postfix[::-1]}'\n    return string",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "from typing import List\n\ndef double_the_difference(lst: List[float]) -> int:\n    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    \"\"\"\n",
        "snippet": [
            "    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n"
        ],
        "simplified": "Given a list of numbers, return the sum of squares of the numbers in the list that are odd. Ignore numbers that are negative or not integers. If the input list is empty, return 0.",
        "task_id": "151",
        "196": "# Fill in the correct return value\n    return ...",
        "grade-196": {
            "execution": 0
        },
        "30": "# complete the body of the function \n    count = 0\n    for num in lst:\n        if num % 2 == 1:\n            count += num * num\n    return count",
        "grade-30": {
            "execution": 0
        },
        "7": "pass\n \nassert double_the_difference([1, 3, 2, 0]) == 10\nassert double_the_difference([-1, -2, 0]) == 0\nassert double_the_difference([9, -2]) == 81\nassert double_the_difference([0]) == 0\nassert double_the_difference([]) == 0",
        "grade-7": {
            "execution": 0
        },
        "80": "sum = 0\n    for i in lst:\n        if (int(i) % 2 != 0):\n            sum += i**2\n    return sum",
        "grade-80": {
            "execution": 0
        },
        "72": "sum = 0\n    for num in lst:\n        if num > 0 and num%2 == 1:\n            sum += num * num\n    return sum",
        "grade-72": {
            "execution": 1
        },
        "66": "#difference = 0\n    #for x in lst:\n    #    if x > 0 and isinstance(x,int):\n    #        diff = abs(x - 6)\n    #        difference += diff*diff\n    #return difference\n    \n    return sum([(abs(x - 6))*(abs(x - 6)) for x in lst if isinstance(x,int) and x > 0])\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))",
        "grade-66": {
            "execution": 0
        },
        "38": "return sum([(x - x // 4) ** 2 for x in lst if x // 4 == x / 4])",
        "grade-38": {
            "execution": 0
        },
        "28": "# YOUR CODE HERE\n    raise NotImplementedError()",
        "grade-28": {
            "execution": 0
        },
        "164": "sum_of_squares = 0\n    for n in lst:\n        if n > 0 and n.is_integer():\n            sum_of_squares += n ** 2\n    return sum_of_squares",
        "grade-164": {
            "execution": 0
        },
        "24": "return 0",
        "grade-24": {
            "execution": 0
        },
        "180": "return [x**2 for x in lst if (x < 0 or x != int(x)) == False]\nprint(double_the_difference([1, 3, 2, 0]))",
        "grade-180": {
            "execution": 0
        },
        "127": "if len(lst) == 0:\n        return 0\n    else:\n        d = lst[0] - lst[1]\n        return (d * 2) + double_the_difference(lst[1:])\n    pass",
        "grade-127": {
            "execution": 0
        },
        "9": "diff = 0\n    for num in lst:\n        if type(num) == int and num > 0:\n            diff += (num % 2) * num ** 2\n    \n    return diff * 2",
        "grade-9": {
            "execution": 0
        },
        "8": "# Hint: You can use modulo operator % to check if a number is odd.\n    # For example, x % 2 == 1 checks if x is odd.\n    # x % 2 == 0 checks if x is even.\n    #\n    # x % 2 == 1 is the same as x % 2 != 0\n    # x % 2 == 0 is the same as x % 2 == 0\n    # x % 2 != 1 is the same as x % 2 == 0\n    # x % 2 != 0 is the same as x % 2 == 1\n    #\n    # So you can use any of these in the if statements below.\n    # But you should use one of these.\n    if lst == []:\n        return 0\n    else:\n        sum = 0\n        for value in lst:\n            if value % 2 == 1:\n                sum += value ** 2\n        return sum",
        "grade-8": {
            "execution": 0
        },
        "25": "sum = 0\n    for num in lst:\n        if num > 0 and int(num) == num:\n            if num % 2 == 1:\n                sum += (num*num)\n    return sum",
        "grade-25": {
            "execution": 1
        },
        "63": "#\n    # YOUR CODE HERE\n    #",
        "grade-63": {
            "execution": 0
        },
        "69": "return sum(double_diff(lst))",
        "grade-69": {
            "execution": 0
        },
        "150": "# TODO: Write the body of this function\n    sum = 0\n    for num in lst:\n        if(num > 0 and isinstance(num, int)):\n            sum += num * num\n    return sum\n    pass",
        "grade-150": {
            "execution": 0
        },
        "183": "# Hint: use the double function from the previous function\n    return 0",
        "grade-183": {
            "execution": 0
        },
        "170": "#return sum([x**2 for x in lst if (int(x) - x == 0) and (x > 0) and (x % 2 == 1)])\n    #return sum([x**2 for x in lst if (int(x) - x == 0) and (x > 0) and (x % 2 == 1)])\n    #return sum([x**2 for x in lst if (int(x) - x == 0) and (x > 0) and (x % 2 == 1)])\n    #return sum([x**2 for x in lst if (int(x) - x == 0) and (x > 0) and (x % 2 == 1)])\n    #return sum([x**2 for x in lst if (int(x) - x == 0) and (x > 0) and (x % 2 == 1)])\n    #return sum([x**2 for x in lst if (int(x) - x == 0) and (x > 0) and (x % 2 == 1)])\n    #return sum([x**2 for x in lst if (int(x) - x == 0) and (x > 0) and (x % 2 == 1)])\n    #return sum([x**2 for x in lst if (int(x) - x == 0) and (x > 0) and (x % 2 == 1)])\n    #return sum([x**2 for x in lst if (int(x) - x == 0) and (x > 0) and (x % 2 == 1)])\n    #return sum([x**2 for x in lst if (int(x) - x == 0) and (x > 0) and (x % 2 == 1)])\n    #return sum([x**2 for x in lst if (int(x) - x == 0) and (x > 0) and (x % 2 == 1)])\n    #return sum([x**2 for x in lst if (int(x) - x == 0) and (x > 0) and (x % 2 == 1)])\n    #return sum([x**2 for x in lst if (int(x) - x == 0) and (x > 0) and",
        "grade-170": {
            "execution": 0
        }
    },
    {
        "intent": "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n",
        "snippet": [
            "    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n"
        ],
        "simplified": "You are given a string s. if s[i] is a letter, reverse its case from lower to upper or vise versa, otherwise keep it as it is. If the string contains no letters, reverse the string. The function should return the resulted string.",
        "task_id": "161",
        "173": "s = s[::-1]\n    return s",
        "grade-173": {
            "execution": 0
        },
        "29": "all_lower = True\n    for i in s:\n        if i.isalpha():\n            all_lower = False\n            break\n    if all_lower:\n        return s[::-1]\n    else:\n        new_s = \"\"\n        for i in s:\n            if i.isalpha():\n                if i.islower():\n                    new_s += i.upper()\n                else:\n                    new_s += i.lower()\n            else:\n                new_s += i\n        return new_s",
        "grade-29": {
            "execution": 1
        },
        "6": "is_only_digits = s.isdigit()\n    if is_only_digits:\n        return s[::-1]\n    letters = list(map(str.swapcase, filter(str.isalpha, s)))\n    others = list(filter(lambda c: not str.isalpha(c), s))\n    return \"\".join(others + letters)",
        "grade-6": {
            "execution": 0
        },
        "72": "letters = re.compile(r\"[a-zA-Z]\")\n    no_letters = re.compile(r\"[^a-zA-Z]\")\n    numbers = re.compile(r\"[0-9]\")\n    s = list(s)\n    for index, char in enumerate(s):\n        if letters.match(char):\n            s[index] = char.swapcase()\n        elif numbers.match(char):\n            s[index] = char\n        else:\n            continue\n    if no_letters.match(s[-1]):\n        return s[::-1]\n    else:\n        return \"\".join(s)",
        "grade-72": {
            "execution": 0
        },
        "64": "if len(s) == 0:\n        return s[::-1]\n    lst = []\n    for c in s:\n        if c.isalpha():\n            lst.append(c.swapcase())\n        else:\n            lst.append(c)\n    return ''.join(lst)",
        "grade-64": {
            "execution": 0
        },
        "59": "if s == s.swapcase():\n        return s[::-1]\n    else:\n        return s.swapcase()",
        "grade-59": {
            "execution": 1
        },
        "36": "is_letter = lambda x: x.isalpha()\n    letters = [x for x in s if is_letter(x)]\n    length = len(letters)\n    no_letters = length == 0\n    reverted = letters[::-1]\n    reverted_string = \"\".join(reverted)\n    if no_letters:\n        return reverted_string\n    res = \"\"\n    for i in range(len(s)):\n        if not is_letter(s[i]):\n            res += s[i]\n        else:\n            res += reverted_string[i]\n    return res\n\n\nprint(solve(\"1234\"))\nprint(solve(\"ab\"))\nprint(solve(\"#a@C\"))\nprint(solve(\"\"))",
        "grade-36": {
            "execution": 0
        },
        "199": "return s[::-1] if len(s) == len(re.sub(r\"[a-zA-Z]\", \"\", s)) else s.swapcase()",
        "grade-199": {
            "execution": 0
        },
        "27": "if s.islower() or s.isupper():\n        return s[::-1]\n    return ''.join([i.upper() if i.islower() else i.lower() for i in s])",
        "grade-27": {
            "execution": 0
        },
        "184": "# check if string contain alphabet\n    if is_alphabet(s):\n        return s.swapcase()\n    else:\n        return s[::-1]",
        "grade-184": {
            "execution": 0
        },
        "148": "return \"\".join(map(lambda x: x.upper() if x.islower() else x.lower(), s)) if s.isalpha() else s[::-1]",
        "grade-148": {
            "execution": 0
        },
        "23": "letters = \"abcdefghijklmnopqrstuvwxyz\"\n    result = \"\"\n    if s == \"\":\n        return s\n    else:\n        for i in s:\n            if i in letters:\n                if i.islower():\n                    result += i.upper()\n                else:\n                    result += i.lower()\n            else:\n                result += i\n        return result\n    return s",
        "grade-23": {
            "execution": 0
        },
        "160": "if not s:\n        return \"\"\n    letters = [x for x in s if x.isalpha()]\n    # reverse letters\n    if letters:\n        letters = reversed([x.lower() if x.isupper() else x.upper() for x in letters])\n        for i, x in enumerate(s):\n            if x.isalpha():\n                s = s[:i] + next(letters) + s[i+1:]\n    else:\n        s = s[::-1]\n    return s",
        "grade-160": {
            "execution": 0
        },
        "114": "if not s:\n        return s\n    return ''.join(\n        c.swapcase() if c.isalpha() else c for c in s[::-1]\n    )",
        "grade-114": {
            "execution": 0
        },
        "8": "if not [char for char in s if char.isalpha()]:\n        return s[::-1]\n    else:\n        return ''.join([char.swapcase() if char.isalpha() else char for char in s])",
        "grade-8": {
            "execution": 1
        },
        "7": "s = s[::-1]\n    if s.isalpha():\n        return s.swapcase()\n    else:\n        return s",
        "grade-7": {
            "execution": 0
        },
        "24": "lst = list(s)\n    for i in range(len(lst)):\n        if lst[i].isalpha():\n            lst[i] = lst[i].swapcase()\n        else:\n            lst[i] = lst[i]\n    return ''.join(lst)",
        "grade-24": {
            "execution": 0
        },
        "57": "new_string = \"\"\n    if s.isalpha():\n        for i in s:\n            if i.isupper():\n                new_string += i.lower()\n            else:\n                new_string += i.upper()\n    else:\n        new_string = s[::-1]\n    return new_string",
        "grade-57": {
            "execution": 0
        },
        "61": "return s[::-1] if not s.isalpha() else s.swapcase()",
        "grade-61": {
            "execution": 0
        },
        "136": "return \"\".join(ch.upper() if ch.islower() else ch.lower() for ch in s) if any(ch.isalpha() for ch in s) else s[::-1]\n\nprint(solve(\"1234\"))\nprint(solve(\"ab\"))\nprint(solve(\"#a@C\"))\nprint(solve(\"1234\"))\nprint(solve(\"\"))",
        "grade-136": {
            "execution": 1
        }
    },
    {
        "intent": "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n",
        "snippet": [
            "    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n"
        ],
        "simplified": "Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit. Note: Returned list should be sorted in increasing order.",
        "task_id": "104",
        "174": "return [x[i] for i in range(len(x)) if not any(d in str(x[i]) for d in \"02468\")]",
        "grade-174": {
            "execution": 0
        },
        "28": "# you code here\n    pass",
        "grade-28": {
            "execution": 0
        },
        "6": "pass",
        "grade-6": {
            "execution": 0
        },
        "72": "return sorted([i for i in x if not any(str(i).count(str(e)) for e in range(0,10,2))])",
        "grade-72": {
            "execution": 1
        },
        "64": "...",
        "grade-64": {
            "execution": 0
        },
        "59": "return [i for i in x if not any(True for char in str(i) if int(char) % 2 == 0)]",
        "grade-59": {
            "execution": 0
        },
        "36": "# TODO: Use filter to implement this\n    # pass\n    return list(filter(lambda i: all(int(digit) % 2 != 0 for digit in str(i)), x))",
        "grade-36": {
            "execution": 0
        },
        "26": "x = [i for i in x if all(int(d) % 2 != 0 for d in str(i))]\n    return sorted(x)",
        "grade-26": {
            "execution": 1
        },
        "185": "new_list = []\n    for num in x:\n        if \"2\" not in str(num) and \"4\" not in str(num) and \"6\" not in str(num) and \"8\" not in str(num) and \"0\" not in str(num):\n            new_list.append(num)\n    return sorted(new_list)",
        "grade-185": {
            "execution": 1
        },
        "148": "unique_numbers = []\n    for num in x:\n        digit_list = [int(i) for i in str(num)]\n        if 0 not in digit_list and 2 not in digit_list and 4 not in digit_list and 6 not in digit_list and 8 not in digit_list:\n            unique_numbers.append(num)\n    return sorted(unique_numbers)",
        "grade-148": {
            "execution": 1
        },
        "22": "y = [_ for _ in x if not any(int(c) % 2 == 0 for c in str(_))]\n    return sorted(y)",
        "grade-22": {
            "execution": 1
        },
        "161": "odd_digits = []\n    for elem in x:\n        digit_str = str(elem)\n        is_odd = True\n        for digit in digit_str:\n            if int(digit) % 2 == 0:\n                is_odd = False\n                break\n        if is_odd:\n            odd_digits.append(elem)\n    return sorted(odd_digits)",
        "grade-161": {
            "execution": 1
        },
        "115": "if not x:\n        return []\n    x = sorted(x)\n    result = []\n    while x:\n        elem = x.pop(0)\n        add = True\n        while elem > 0:\n            if elem % 2 == 0:\n                add = False\n                break\n            elem //= 10\n        if add:\n            result.append(elem)\n    return result",
        "grade-115": {
            "execution": 0
        },
        "8": "unique_numbers = []\n    for num in x:\n        is_unique = True\n        while num > 0:\n            if num % 2 == 0:\n                is_unique = False\n                break\n            num //= 10\n        if is_unique:\n            unique_numbers.append(num)\n    return sorted(unique_numbers)",
        "grade-8": {
            "execution": 0
        },
        "7": "evens = list(filter(lambda x: any(int(str(x)[i]) % 2 == 0 for i in range(len(str(x)))), x))\n    return sorted(evens)\n\nprint(unique_digits([15, 33, 1422, 1]))\nprint(unique_digits([152, 323, 1422, 10]))",
        "grade-7": {
            "execution": 0
        },
        "23": "uniques = []\n    for x_ in x:\n        x_str = str(x_)\n        for digit in x_str:\n            if int(digit) % 2 == 0:\n                break\n        else:\n            uniques.append(x_)\n    return sorted(uniques)",
        "grade-23": {
            "execution": 1
        },
        "57": "x = [str(i) for i in x]\n    uniquenumbers = []\n    for i in x:\n        if '2' not in i and '4' not in i and '6' not in i and '8' not in i:\n            uniquenumbers.append(int(i))\n    return sorted(uniquenumbers)",
        "grade-57": {
            "execution": 0
        },
        "61": "uniques = []\n    for elem in x:\n        if \"2\" not in str(elem) and \"4\" not in str(elem) and \"6\" not in str(elem) and \"8\" not in str(elem):\n            uniques.append(elem)\n    return sorted(uniques)\n\nprint(unique_digits([12, 22, 14, 10]))\nprint(unique_digits([14, 22, 12, 10]))\nprint(unique_digits([12, 34, 12, 10]))\nprint(unique_digits([12, 22, 33, 10]))\nprint(unique_digits([1, 2, 3, 4]))\nprint(unique_digits([12, 33, 14, 10]))\nprint(unique_digits([12, 22, 1, 10]))\nprint(unique_digits([12, 22, 1, 11]))\nprint(unique_digits([12, 22, 1, 11, 123]))\nprint(unique_digits([12, 22, 1, 11, 123, 1232]))\nprint(unique_digits([12, 22, 1, 11, 123, 1232, 13, 12321]))\nprint(unique_digits([12, 22, 1, 11, 123, 1232, 13, 12321, 1322, 1221]))\nprint(unique_digits([12, 22, 1, 11, 123, 1232, 13, 12321, 1322, 1221, 1334]))\nprint(unique_digits([12, 22, 1, 11, 123, 1232, 13, 12321, 1322, 1221, 1334, 1111]))\nprint(unique_digits([12, 22, 1, 11, 123, 1232, 13, 12321, 1322, 1221, 1334, 1111, 222222]))\nprint(unique_digits([12, 22, 1, 11, 123, 1232, 13, 12321, 1322, 1221, 1334, 1111, 222222, 123123, 123321, 11111]))\nprint(unique_digits([12, 22, 1, 11, 123, 1232, 13, 12321, 13",
        "grade-61": {
            "execution": 0
        },
        "138": "unique_numbers = []\n    for i in x:\n        if i % 2 != 0:\n            unique_numbers.append(i)\n    return sorted(unique_numbers)",
        "grade-138": {
            "execution": 0
        },
        "164": "output = []\n    for number in x:\n        check_list = list(str(number))\n        if not any('2' in s or '4' in s or '6' in s or '8' in s for s in check_list):\n            output.append(number)\n    return sorted(output)\n\nprint(unique_digits([152, 323, 1422, 10]))",
        "grade-164": {
            "execution": 0
        }
    },
    {
        "intent": "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n",
        "snippet": [
            "    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n"
        ],
        "simplified": "Given a string representing a space separated lowercase letters, return a dictionary of the letter with the most repetition and containing the corresponding count. If several letters have the same occurrence, return all of them.",
        "task_id": "111",
        "165": "# Implement me!",
        "grade-165": {
            "execution": 0
        },
        "28": "d = {}\n    for char in test.split(' '):\n        if char in d:\n            d[char] += 1\n        else:\n            d[char] = 1\n    return {letter: d[letter] for letter in d if d[letter] == max(d.values())}",
        "grade-28": {
            "execution": 0
        },
        "6": "h = {}\n    for l in test.split():\n        if l in h:\n            h[l] += 1\n        else:\n            h[l] = 1\n    maximum = max(h.values())\n    return {k: v for k, v in h.items() if v == maximum}",
        "grade-6": {
            "execution": 0
        },
        "191": "res = {}\n    if test == '':\n        return res\n    else:\n        test = test.split(' ')\n        maxx = 1\n        for letter in test:\n            res[letter] = res.get(letter, 0) + 1\n            if res[letter] > maxx:\n                maxx = res[letter]\n    return {k: v for k, v in res.items() if v == maxx}",
        "grade-191": {
            "execution": 1
        },
        "70": "max_cnt = 0\n    res = dict()\n    for letter in test.split():\n        res[letter] = res.get(letter, 0) + 1\n        if res[letter] > max_cnt:\n            max_cnt = res[letter]\n    return {k: v for k, v in res.items() if v == max_cnt}",
        "grade-70": {
            "execution": 1
        },
        "62": "# count the letter occurrences in a dict\n    dict_res = dict()\n    l = test.split()\n    for letter in l:\n        dict_res[letter] = dict_res.get(letter, 0) + 1\n    \n    # find the max value in the dict\n    max_value = max(dict_res.values())\n    \n    # return the letters with the same max value\n    return {letter: value for letter, value in dict_res.items() if value == max_value}",
        "grade-62": {
            "execution": 0
        },
        "57": "d = dict()\n    for l in test.split():\n        if l in d:\n            d[l] += 1\n        else:\n            d[l] = 1\n    return {k: v for k, v in d.items() if max(d.values()) == v}",
        "grade-57": {
            "execution": 1
        },
        "35": "hist = dict()\n    words = test.split()\n    for w in words:\n        if w in hist:\n            hist[w] += 1\n        else:\n            hist[w] = 1\n    return hist",
        "grade-35": {
            "execution": 0
        },
        "190": "histogram = {}\n    for letter in test.split():\n        if letter in histogram:\n            histogram[letter] += 1\n        else:\n            histogram[letter] = 1\n    max_value = max(histogram.values())\n    return {key: value for key, value in histogram.items() if value == max_value}",
        "grade-190": {
            "execution": 0
        },
        "26": "char_hist = defaultdict(int)\n    for char in test.split():\n        char_hist[char] += 1\n    \n    max_char_val = max(char_hist.values())\n    max_char_list = []\n    for char, char_val in char_hist.items():\n        if char_val == max_char_val:\n            max_char_list.append(char)\n    \n    if max_char_list:\n        return {char: max_char_val for char in max_char_list}\n    else:\n        return {}",
        "grade-26": {
            "execution": 0
        },
        "175": "if test == '':\n        return {}\n    test = test.split()\n    letter_count = {}\n    max_count = 1\n    for letter in test:\n        if letter in letter_count:\n            letter_count[letter] += 1\n            if letter_count[letter] > max_count:\n                max_count = letter_count[letter]\n        else:\n            letter_count[letter] = 1\n    max_count_letters = []\n    for letter in letter_count:\n        if letter_count[letter] == max_count:\n            max_count_letters.append(letter)\n    for letter in max_count_letters:\n        letter_count[letter] = max_count\n    return letter_count",
        "grade-175": {
            "execution": 0
        },
        "140": "d = {}\n    for char in test.split():\n        try:\n            d[char] += 1\n        except KeyError:\n            d[char] = 1\n    max_keys = []\n    max_val = 0\n    for key, val in d.items():\n        if val > max_val:\n            max_val = val\n            max_keys = [key]\n        elif val == max_val:\n            max_keys.append(key)\n    return {k:max_val for k in max_keys}",
        "grade-140": {
            "execution": 1
        },
        "22": "words = test.split(' ')\n    d = {}\n    for word in words:\n        if word in d:\n            d[word] += 1\n        else:\n            d[word] = 1\n    max_count = max(d.values())\n    return {k:v for k,v in d.items() if v == max_count}",
        "grade-22": {
            "execution": 0
        },
        "153": "# Dictionary to count character occurrences\n    occurences = {}\n    # Get the maximum count in the dictionary\n    max_count = 0\n    # Counter for each character\n    for char in test:\n        # Skip the space character\n        if char == ' ':\n            continue\n        # If the character is a new one, add it\n        if char not in occurences:\n            occurences[char] = 1\n        # Otherwise, increase the count\n        else:\n            occurences[char] += 1\n        # Get the maximum count\n        max_count = max(max_count, occurences[char])\n    # Max count is zero, empty dict\n    if max_count == 0:\n        return {}\n    # Create the result dict with the max count\n    result = {}\n    for char in occurences:\n        if occurences[char] == max_count:\n            result[char] = max_count\n    return result",
        "grade-153": {
            "execution": 1
        },
        "108": "letters = test.split()\n    unique = set(letters)\n    occ = {}\n    highest = 0\n    for item in unique:\n        occ[item] = letters.count(item)\n        if occ[item] > highest:\n            highest = occ[item]\n    return {k: v for k, v in occ.items() if v == highest}\n\nprint(histogram('b b b b a'))",
        "grade-108": {
            "execution": 1
        },
        "8": "dictionary = {}\n    for elem in test.split():\n        if elem in dictionary:\n            dictionary[elem] += 1\n        else:\n            dictionary[elem] = 1\n    return dictionary",
        "grade-8": {
            "execution": 0
        },
        "7": "words = test.split()\n    words.sort()\n    count_dict = {}\n    for word in words:\n        if word in count_dict:\n            count_dict[word] += 1\n        else:\n            count_dict[word] = 1\n    count_max = max(count_dict.values())\n    dict_max = {}\n    for key, value in count_dict.items():\n        if value == count_max:\n            dict_max[key] = value\n    return dict_max",
        "grade-7": {
            "execution": 0
        },
        "23": "if not test:\n        return {}\n    letter_dict = {}\n    max_count = 1\n    test_list = test.split(' ')\n    for letter in test_list:\n        if letter not in letter_dict:\n            letter_dict[letter] = 1\n        else:\n            letter_dict[letter] += 1\n            if letter_dict[letter] > max_count:\n                max_count = letter_dict[letter]\n    return {letter: count for letter, count in letter_dict.items() if count == max_count}\n\nprint(histogram('a b c'))\nprint(histogram('a b b a'))\nprint(histogram('a b c a b'))\nprint(histogram('b b b b a'))\nprint(histogram(''))",
        "grade-23": {
            "execution": 1
        },
        "55": "chars = test.split(' ')\n    frequencies = {}\n    for char in chars:\n        if char in frequencies:\n            frequencies[char] += 1\n        else:\n            frequencies[char] = 1\n    return frequencies",
        "grade-55": {
            "execution": 0
        },
        "59": "char_count: Dict[str, int] = {}\n    if test:\n        for char in test.split():\n            char_count[char] = char_count.get(char, 0) + 1\n    return char_count",
        "grade-59": {
            "execution": 0
        }
    },
    {
        "intent": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n",
        "snippet": [
            "    return [x for x in strings if substring in x]\n"
        ],
        "simplified": "Filter an input list of strings only for ones that contain given substring",
        "task_id": "7",
        "34": "res = [i for i in strings if substring in i]\n    return res",
        "grade-34": {
            "execution": 1
        },
        "2": "return [string for string in strings if substring in string]",
        "grade-2": {
            "execution": 1
        },
        "120": "if substring is None:\n        return strings\n    else:\n        return [s for s in strings if substring in s]",
        "grade-120": {
            "execution": 1
        },
        "37": "out = []\n    for s in strings:\n        if substring in s:\n            out.append(s)\n    return out",
        "grade-37": {
            "execution": 1
        },
        "35": "return [x for x in strings if substring in x]\n\nprint(filter_by_substring([], 'a'))\nprint(filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a'))",
        "grade-35": {
            "execution": 1
        },
        "195": "# solution 1\n    # filtered_strings = []\n    # for string in strings:\n    #     if substring in string:\n    #         filtered_strings.append(string)\n    # return filtered_strings\n\n    # solution 2\n    # return [string for string in strings if substring in string]\n\n    # solution 3\n    return list(filter(lambda s: substring in s, strings))",
        "grade-195": {
            "execution": 1
        },
        "17": "# TODO: Replace this line with your code\n    return list(filter(lambda s: substring in s, strings))",
        "grade-17": {
            "execution": 1
        },
        "190": "substring_set = set(substring)\n    return [s for s in strings if substring_set & set(s)]",
        "grade-190": {
            "execution": 0
        },
        "12": "# strings_with_substring = []\n    # for s in strings:\n    #     if substring in s:\n    #         strings_with_substring.append(s)\n    # return strings_with_substring\n    return [s for s in strings if substring in s]",
        "grade-12": {
            "execution": 1
        },
        "112": "return [st for st in strings if substring in st]",
        "grade-112": {
            "execution": 1
        },
        "173": "return [string for string in strings if substring in string]",
        "grade-173": {
            "execution": 1
        },
        "93": "if strings == []:\n        return []\n    else:\n        return [x for x in strings if substring in x]",
        "grade-93": {
            "execution": 1
        },
        "11": "return [x for x in strings if substring in x]",
        "grade-11": {
            "execution": 1
        },
        "100": "matches = []\n    for string in strings:\n        if substring in string:\n            matches.append(string)\n    return matches",
        "grade-100": {
            "execution": 1
        },
        "66": "lst = []\n    for x in strings:\n        if substring in x:\n            lst.append(x)\n    return lst",
        "grade-66": {
            "execution": 1
        },
        "4": "return [i for i in strings if substring in i]",
        "grade-4": {
            "execution": 1
        },
        "192": "if len(strings) == 0:\n        return []\n    res: List[str] = []\n    for s in strings:\n        if substring in s:\n            res.append(s)\n    return res",
        "grade-192": {
            "execution": 1
        },
        "139": "filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings",
        "grade-139": {
            "execution": 1
        },
        "33": "return [word for word in strings if substring in word]",
        "grade-33": {
            "execution": 1
        },
        "183": "return [s for s in strings if substring in s]\n\nprint(filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a'))",
        "grade-183": {
            "execution": 1
        }
    }
]