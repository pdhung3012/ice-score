[
    {
        "intent": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n",
        "snippet": [
            "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n"
        ],
        "simplified": "Create a function that takes a value (string) representing a number and returns the closest integer to it. If the number is equidistant from two integers, round it away from zero.",
        "task_id": "99",
        "0": "let val = Number(value);\n    if(val > 0){\n        return Math.ceil(val);\n    }else{\n        return Math.floor(val);\n    }\n}",
        "grade-0": {
            "execution": 0
        },
        "1": "value = parseFloat(value)\n  return Math.round(value)\n}",
        "grade-1": {
            "execution": 0
        },
        "2": "value = +value;\n  if (isNaN(value)) {\n    return false;\n  }\n  return Math.round(value);\n}",
        "grade-2": {
            "execution": 0
        },
        "3": "return Math.round(value);\n}",
        "grade-3": {
            "execution": 0
        },
        "4": "return Math.round(value);\n}",
        "grade-4": {
            "execution": 0
        },
        "5": "let num = parseFloat(value);\n  let floor = Math.floor(num);\n  let ceil = Math.ceil(num);\n  let closerToFloor = num - floor;\n  let closerToCeil = ceil - num;\n  if(closerToFloor < closerToCeil){\n    return floor;\n  } else {\n    return ceil;\n  }\n}",
        "grade-5": {
            "execution": 0
        },
        "6": "return Number(value).toFixed(0);\n}",
        "grade-6": {
            "execution": 1
        },
        "7": "let num = parseFloat(value);\n  if (Math.round(num) - num === 0){\n    return num;\n  } else if (Math.round(num) - num > 0){\n    return Math.floor(num);\n  } else {\n    return Math.ceil(num);\n  }\n}",
        "grade-7": {
            "execution": 0
        },
        "8": "let convertedToNum = Number(value);\n    let rounded = Math.round(convertedToNum);\n    let roundedDown = Math.floor(convertedToNum);\n    let roundedUp = Math.ceil(convertedToNum);\n    let decimal = convertedToNum - roundedDown;\n    let decimal2 = roundedUp - convertedToNum;\n    if(decimal < decimal2){\n        return roundedDown;\n    }else if(decimal2 < decimal){\n        return roundedUp;\n    }else{\n        return rounded;\n    }\n}",
        "grade-8": {
            "execution": 0
        },
        "9": "let numbers = value.split('.');\n    let num1 = parseInt(numbers[0]);\n    let num2 = parseInt(numbers[1]);\n    return (num2 >= 5) ? num1 + 1 : num1;\n}",
        "grade-9": {
            "execution": 0
        },
        "10": "//Turn value into an array using .split()\n    //Turn value into an array using .map() to loop over each number\n    //Turn value into an array using .Math.round() to round each number\n    //Turn value into an array using .join('') to put each number back into one string\n    //Turn value into an array using .parseInt() to change each number back into a string\n    //Return value\n    return parseInt(value.split('').map(val => Math.round(val)).join(''));\n}",
        "grade-10": {
            "execution": 0
        },
        "11": "var valInt = parseInt(value);\n    var valFloat = parseFloat(value);\n    var valStr = value.toString();\n    var valDec = valStr.slice(valStr.indexOf('.'));\n    if(valFloat>valInt){\n        if(valDec<0.5){\n            return valInt;\n        }else{\n            return valInt + 1;\n        }\n    }else{\n        return valInt;\n    }\n}",
        "grade-11": {
            "execution": 0
        },
        "12": "const splitValue = value.split(\".\");\n    if(splitValue[1] !== undefined){\n        if(splitValue[1][0] >= 5){\n            return Number(splitValue[0]) + 1;\n        } else {\n            return Number(splitValue[0]);\n        }\n    } else {\n        return Number(splitValue[0]);\n    }\n}",
        "grade-12": {
            "execution": 0
        },
        "13": "value = parseFloat(value);\n\tvar num = value.toString().indexOf('.');\n\tif(num == -1){\n\t\treturn value;\n\t}\n\telse{\n\t\tvar before = value.toString().slice(0,num);\n\t\tvar after = value.toString().slice(num+1,value.toString().length);\n\t\tif(after[0] >= 5){\n\t\t\treturn parseInt(before) + 1;\n\t\t}\n\t\telse{\n\t\t\treturn parseInt(before);\n\t\t}\n\t}\n}",
        "grade-13": {
            "execution": 0
        },
        "15": "return (value - value.toFixed(0) > 0.5) ? (Math.ceil(value)) : (Math.floor(value));\n}",
        "grade-15": {
            "execution": 0
        },
        "16": "return value.toString().indexOf('.') < 0 ? parseInt(value) : parseInt(value) + 0.5;\n}",
        "grade-16": {
            "execution": 0
        },
        "17": "var result = Math.round(value);\n  return result;\n}",
        "grade-17": {
            "execution": 0
        },
        "18": "return value;\n}\nmodule.exports = closest_integer;",
        "grade-18": {
            "execution": 0
        }
    },
    {
        "intent": "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunction fix_spaces(text){\n",
        "snippet": [
            "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n"
        ],
        "simplified": "Given a string text, replace all spaces in it with underscores, and if a string has more than 2 consecutive spaces, then replace all consecutive spaces with -",
        "task_id": "140",
        "3": "var t = text.replace(/\\s+/g,'-');\n    return t.replace(/\\s/g, '_');\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "var arr = text.split('');\n    var result = '';\n    var count = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] == ' '){\n            count++;\n            if(count > 2){\n                result += '-';\n                count = 0;\n            }\n            else{\n                result += '_';\n            }\n        }\n        else{\n            result += arr[i];\n            count = 0;\n        }\n    }\n    return result;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "return text.replace(/\\s{2,}/g, \"-\").replace(/\\s/g, \"_\");\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "return text.replace(/\\s{2,}/g, \"-\").replace(/\\s/g, \"_\");\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "var newStr = text.split(\"  \").join(\"-\");\n    var newStr2 = newStr.split(\" \").join(\"_\");\n    return newStr2;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "var index = 0;\n\tvar space_index = 0;\n\tvar substring = \"\";\n\twhile(index < text.length){\n\t\tspace_index = text.indexOf(\" \", index);\n\t\tif(space_index == -1){\n\t\t\tsubstring = text.substring(index, text.length);\n\t\t\tsubstring = substring.replace(/ /g, \"_\");\n\t\t\ttext = text.substring(0, index) + substring;\n\t\t\tbreak;\n\t\t}\n\t\tsubstring = text.substring(index, space_index);\n\t\tsubstring = substring.replace(/ /g, \"_\");\n\t\ttext = text.substring(0, index) + substring + text.substring(space_index);\n\t\tindex = space_index + 1;\n\t}\n\treturn text.replace(/\\s+/g, \"-\");\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "let count = 0;\n    let result = \"\";\n    for(let i = 0; i < text.length; i++){\n        if(text[i] === \" \"){\n            count++;\n            result += (count > 2) ? \"-\" : \"_\";\n        }\n        else{\n            count = 0;\n            result += text[i];\n        }\n    }\n    return result;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "return text.replace(/\\s+/g, '-').replace(/ /g, '_');\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "if (text.length == 0){\n        return \"\";\n    }\n    else{\n        if (text[0] == \" \"){\n            if (text[1] == \" \"){\n                if (text[2] == \" \"){\n                    return fix_spaces(\"-\" + text.slice(3));\n                }\n                else{\n                    return fix_spaces(\"_\" + text.slice(2));\n                }\n            }\n            else{\n                return fix_spaces(\"_\" + text.slice(1));\n            }\n        }\n        else{\n            return text[0] + fix_spaces(text.slice(1));\n        }\n    }\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "let result = '';\n    let to_underscore = false;\n    let to_dash = false;\n    for(let i = 0; i < text.length; i++){\n        if(text[i] !== ' '){\n            result += text[i];\n            to_underscore = false;\n            to_dash = false;\n        }else{\n            if(to_underscore){\n                result += '-';\n                to_dash = true;\n            }else{\n                result += '_';\n                to_underscore = true;\n            }\n        }\n    }\n    return result;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "return text.replace(/\\s+/g,'-').replace(/ /g, '_')\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "let temp = text.split(\" \");\n  let i = 0;\n  while(i < temp.length){\n    if(temp[i] == \"\")\n      temp.splice(i, 1);\n    else i++;\n  }\n  let j = 0;\n  while(j < temp.length - 1){\n    if(temp[j].length == 0){\n      temp.splice(j, 1);\n    }else j++;\n  }\n  let result = temp.join(\" \");\n  while(result.indexOf(\"  \") != -1){\n    result = result.replace(\"  \", \"-\");\n  }\n  return result.replace(/ /g, \"_\");\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "return text.replace(/[ ]{2,}/g, '-').replace(/ /g, '_');\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "return text.replace(/\\s+/g, ' ').replace(/ /g, '_').replace(/_+/g, '-');\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "let a = text.replace(/\\s{2,}/g, \"-\").replace(/ /g, \"_\");\n    return a;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "return text.replace(/\\s{2,}/g, '-').replace(/\\s/g, '_');\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "return text.replace(/\\s/g, '_').replace(/_+/g, '-');\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "return text.replace(/[\\s]+/g, '-').replace(/ /g, '_').replace(/^[\\s]+/g, '').replace(/[\\s]+$/g, '');\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "return text.replace(/[ ]{2,}/g, '-').replace(/ /g, '_');\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "const newText = text.replace(/\\s+/g, '_');\n    return newText;\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15, -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nfunction specialFilter(nums){\n",
        "snippet": [
            "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n"
        ],
        "simplified": "Write a function that takes an array of numbers as input and returns the number of elements in the array that are greater than 10 and both first and last digits of a number are odd (1, 3, 5, 7, 9).",
        "task_id": "146",
        "3": "let arr = nums.filter(n => n > 10);\n    let result = 0;\n    for(let i = 0; i < arr.length; i++){\n        let num = arr[i];\n        let first = num % 10;\n        let last = num.toString().split('')[0];\n        if(first % 2 != 0 && last % 2 != 0){\n            result++;\n        }\n    }\n    return result;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "return nums.filter(n => n > 10 && n.toString().length > 1 && n.toString()[0] % 2 !== 0 && n.toString()[n.toString().length - 1] % 2 !== 0).length;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "let oddFilter = nums.filter(function(num){\n        if(num > 10){\n            if(Math.abs(num % 10) % 2 !== 0 && Math.abs(num % 10) !== 0){\n                return num;\n            }\n        }\n    });\n    return oddFilter.length;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "var count = 0;\n\tfor(var i = 0; i < nums.length; i++){\n\t\tvar elem = nums[i];\n\t\tif(elem > 10 && elem % 2 === 1 && Math.floor(elem / 10) % 2 === 1 && elem % 10 === 1 || elem % 10 === 3 || elem % 10 === 5 || elem % 10 === 7 || elem % 10 === 9){\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "var index = 0;\n    for(var i = 0; i < nums.length; i++){\n        if(nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == 1){\n            index++;\n        }\n    }\n    return index;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "let counter = 0;\n  for(let i = 0; i < nums.length; i++){\n    if(nums[i] > 10 && nums[i]%2 === 1 && nums[i]%10 === 1){\n      counter += 1;\n    }\n  }\n  return counter;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "return nums.filter(function(num){\n\t\tvar first = num.toString()[0];\n\t\tvar last = num.toString()[num.toString().length - 1];\n\t\tif(first % 2 !== 0 && last % 2 !== 0 && num > 10){\n\t\t\treturn num;\n\t\t}\n\t}).length;\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "let count = 0;\n  for(let num of nums){\n    if(num > 10 && num.toString().length > 1){\n      let numStr = num.toString();\n      if(numStr[0] % 2 !== 0 && numStr[numStr.length - 1] % 2 !== 0){\n        count++;\n      }\n    }\n  }\n  return count;\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "//determine the first and last digit of a number\n    //function to determine the first digit of a number\n    const firstDigit = (n) => {\n        while (n >= 10) {\n            n = n / 10;\n        }\n        return n;\n    }\n    //function to determine the last digit of a number\n    const lastDigit = (n) => {\n        return n % 10;\n    }\n    //function to check if the digit is even or odd\n    const isOdd = (n) => {\n        if (n % 2 === 0) {\n            return false;\n        }\n        return true;\n    }\n    //filter\n    return nums.filter(x => (x > 10) && (isOdd(firstDigit(x)) && isOdd(lastDigit(x)))).length;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "}",
        "grade-17": {
            "execution": 0
        },
        "12": "return nums.filter(n => {\n        if(n < 0){\n            n = n * -1;\n        }\n        if(n > 10 && n % 2 != 0 && \n        Math.floor(n / 10) % 2 != 0 && \n        n % 10 != 0){\n            return n;\n        }\n    }).length;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "if (nums[0] % 2 == 1 && nums[nums.length - 1] % 2 == 1) {\n\t\treturn nums.length;\n\t}\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "//your code is here\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "var count = 0;\n\tfor(var i = 0; i < nums.length; i++){\n\t\tif(nums[i] > 10 && (nums[i] % 2 === 1 || nums[i] % 2 === -1) && (nums[i] % 10 === 1 || nums[i] % 10 === 3 || nums[i] % 10 === 5 || nums[i] % 10 === 7 || nums[i] % 10 === 9)){\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "// your code here\n    return nums.filter(function(number){\n        return Math.abs(number) > 10 &&\n               Math.abs(number % 10) % 2 == 1 &&\n               Math.abs(number / (Math.pow(10, String(number).length - 1))) % 2 == 1;\n    }).length;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "let sum = 0;\n    for(let i = 0; i < nums.length; i++){\n        let num = Math.abs(nums[i]);\n        let firstDigit = num.toString()[0];\n        let lastDigit = num.toString()[num.toString().length - 1];\n        if(num > 10 && ((firstDigit % 2 != 0) && (lastDigit % 2 != 0))){\n            sum += 1;\n        }\n    }\n    return sum;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        if(nums[i] > 10 && nums[i] % 2 !== 0 && (nums[i] % 10) % 2 !== 0){\n            count++;\n        }\n    }\n    return count;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "let arr = [];\n    for(let i = 0; i < nums.length; i++){\n        if(nums[i] > 10 && Math.abs(nums[i] % 10) % 2 != 0 && nums[i] % 2 != 0){\n            arr.push(nums[i]);\n        }\n    }\n    return arr.length;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "let specialArray = [];\n    let counter = 0;\n    for(let i = 0; i < nums.length; i++){\n        let numAsString = nums[i].toString();\n        if(nums[i] > 10 && numAsString[0] % 2 !== 0 && numAsString[numAsString.length - 1] % 2 !== 0){\n            specialArray.push(nums[i]);\n            counter ++;\n        }\n    }\n    return counter;\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "return nums.filter(x => x > 10 && x.toString().slice(0,1) % 2 != 0 && x.toString().slice(-1) % 2 != 0).length;\n}\n\nmodule.exports = {\n    parseStudentRecord,\n    isStudentId,\n    getStudentName,\n    getStudentId,\n    getStudentGrade,\n    getStudentInfo,\n    getStudentList,\n    getStudentInfoList,\n    getStudentsByGrade,\n    getStudentsByGradeRange,\n    addStudent,\n    addStudents,\n    removeStudentById,\n    removeStudentByName,\n    removeStudentsByGrade,\n    removeStudentsByGradeRange,\n    updateStudent,\n    updateStudents,\n    addGradeById,\n    addGradeByName,\n    removeGradeById,\n    removeGradeByName,\n    getStudentCountByGrade,\n    getStudentsByLetter,\n    getCountByLetter,\n    getAverageByGrade,\n    getStudentAverageById,\n    getStudentAverageByName,\n    getAverageByGradeAndGender,\n    getStudentInfoById,\n    getStudentInfoByName,\n    getFemaleCount,\n    getStudentsByName,\n    getBestStudent,\n    getWorstStudent,\n    getStudentsByAge,\n    getTotalCount,\n    getStudentListByAge,\n    getOlderStudents,\n    getYoungerStudents,\n    sortStudents,\n    getStudentsByAverage,\n    specialFilter\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//You will be given the name of a class (a string) and a list of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the list.\n// For example, if you are given \"Slices\" as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunction Strongest_Extension(class_name, extensions){\n",
        "snippet": [
            "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n"
        ],
        "simplified": "You will be given the name of a class (a string) and a list of extensions. The extensions are to be used to load additional classes to the class. The strength of the extension is as follows: Let CAP be the number of the uppercase letters in the extension's name, and let SM be the number of lowercase letters in the extension's name, the strength is given by the fraction CAP - SM. You should find the strongest extension and return a string in this format: ClassName.StrongestExtensionName. If there are two or more extensions with the same strength, you should choose the one that comes first in the list. For example, if you are given \"Slices\" as the class and a list of the extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension (its strength is -1).",
        "task_id": "153",
        "3": "let strongest = [0, extensions[0]];\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    let strength = [...extension].reduce((acc, cur) => {\n      cur = cur.toUpperCase() === cur ? 1 : -1;\n      return acc + cur;\n    }, 0);\n    if (strength >= strongest[0]) {\n      strongest = [strength, extension];\n    }\n  }\n  return `${class_name}.${strongest[1]}`;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "return class_name + '.' + extensions.reduce((a, b) => {\n\t\tlet A = a.toUpperCase().split('').length - a.toLowerCase().split('').length;\n\t\tlet B = b.toUpperCase().split('').length - b.toLowerCase().split('').length;\n\t\treturn A > B ? a : b;\n\t})\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "var arr = []\n\tfor(var i = 0; i < extensions.length; i++){\n\t\tarr.push(extensions[i].split(''))\n\t}\n\t//[[\"S\", \"E\", \"r\", \"v\", \"i\", \"N\", \"G\", \"S\", \"l\", \"i\", \"C\", \"e\", \"s\"], [\"C\", \"h\", \"e\", \"e\", \"s\", \"e\"], [\"S\", \"t\", \"u\", \"F\", \"f\", \"e\", \"d\"]]\n\tvar num = 0\n\tvar count = 0\n\tvar a = 0\n\tvar b = 0\n\tvar c = 0\n\tfor(var i = 0; i < arr.length; i++){\n\t\tfor(var j = 0; j < arr[i].length; j++){\n\t\t\tif(arr[i][j] == arr[i][j].toUpperCase()){\n\t\t\t\ta++\n\t\t\t}else{\n\t\t\t\tb++\n\t\t\t}\n\t\t}\n\t\tc = a - b\n\t\tif(c > num){\n\t\t\tnum = c\n\t\t\tcount = i\n\t\t}\n\t\ta = 0\n\t\tb = 0\n\t}\n\treturn class_name + '.' + extensions[count]\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "var ext_strength = [];\n    extensions.forEach(function(e){\n        var upper = e.replace(/[^A-Z]/g, '').length;\n        var lower = e.replace(/[^a-z]/g, '').length;\n        ext_strength.push([upper - lower, e]);\n    });\n    ext_strength.sort();\n    return class_name + '.' + ext_strength[ext_strength.length - 1][1];\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "let maxStrength = 0;\n  let strongestExtension = '';\n  extensions.forEach(extension => {\n    let strength = extension.split('').filter(char => char === char.toUpperCase()).length - extension.split('').filter(char => char === char.toLowerCase()).length;\n    if (strength > maxStrength) {\n      maxStrength = strength;\n      strongestExtension = extension;\n    }\n  });\n  return `${class_name}.${strongestExtension}`;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "var strength = -99;\n    var result = 'my_class.AA';\n    for(var extension of extensions){\n        var cap = 0;\n        var sm = 0;\n        for(var i = 0; i < extension.length; i++){\n            if(extension[i] == extension[i].toUpperCase()){\n                cap++;\n            }else{\n                sm++;\n            }\n        }\n        var temp = cap - sm;\n        if(temp > strength){\n            strength = temp;\n            result = class_name + '.' + extension;\n        }\n    }\n    return result;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "let caps = 0,\n        sm = 0,\n        _strongest = '';\n    for(let i = 0; i < extensions.length; i++){\n        let j = 0;\n        while(j < extensions[i].length){\n            if(extensions[i][j] >= 'A' && extensions[i][j] <= 'Z'){\n                caps += 1;\n            }\n            else if(extensions[i][j] >= 'a' && extensions[i][j] <= 'z'){\n                sm += 1;\n            }\n            j++;\n        }\n        if(caps - sm > 0){\n            _strongest = extensions[i];\n        }\n        caps = 0;\n        sm = 0;\n    }\n    return `${class_name}.${_strongest}`;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "let aux = '';\n    let start = false;\n    let strongest = '';\n    let strongest_strength = 0;\n    let strength = 0;\n    let cap = 0;\n    let sm = 0;\n    let first = true;\n    for(let extension of extensions){\n        aux = '';\n        start = false;\n        cap = 0;\n        sm = 0;\n        strength = 0;\n        first = true;\n        for(let ch of extension){\n            if(ch.charCodeAt(0) >= 65 && ch.charCodeAt(0) <= 90){\n                start = true;\n                if(first){\n                    aux += ch;\n                    first = false;\n                }\n                cap++;\n            }\n            else if(ch.charCodeAt(0) >= 97 && ch.charCodeAt(0) <= 122){\n                start = true;\n                sm++;\n            }\n            else if(start){\n                break;\n            }\n        }\n        strength = cap - sm;\n        if(strength > strongest_strength){\n            strongest_strength = strength;\n            strongest = aux;\n        }\n    }\n    return class_name + '.' + strongest;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "let strength = 0;\n    let strongest = 0;\n    for(let i = 0; i < extensions.length; i++){\n        let caps = 0;\n        let smalls = 0;\n        for(let j = 0; j < extensions[i].length; j++){\n            if(extensions[i][j] == extensions[i][j].toUpperCase()){\n                caps += 1;\n            }\n            else{\n                smalls += 1;\n            }\n        }\n        strength = caps - smalls;\n        if(strength > strongest){\n            strongest = strength;\n            strongest_extension = extensions[i];\n        }\n    }\n    return class_name + '.' + strongest_extension;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "if(extensions.length === 0)\n        return class_name;\n    let strongest_extension = extensions[0];\n    let strongest_strength = 0;\n    for(let i = 0; i < extensions.length; i++){\n        let strength = 0;\n        for(let j = 0; j < extensions[i].length; j++){\n            if(extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\n                strength++;\n            else if(extensions[i][j] >= 'a' && extensions[i][j] <= 'z')\n                strength--;\n        }\n        if(strength > strongest_strength){\n            strongest_strength = strength;\n            strongest_extension = extensions[i];\n        }\n    }\n    return class_name + '.' + strongest_extension;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "let extension = extensions.reduce((acc, e) => {\n        let num_caps = (e.match(/[A-Z]/g) || []).length;\n        let num_smalls = (e.match(/[a-z]/g) || []).length;\n        let diff = num_caps - num_smalls;\n        if (diff > acc.diff){\n            acc.diff = diff;\n            acc.extension = e;\n        }\n        return acc;\n    }, {diff: -Infinity, extension: ''});\n    return `${class_name}.${extension.extension}`;\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "var strength = 0;\n    var strongest_extension = '';\n    extensions.forEach(element => {\n        var cur_strength = element.split('').reduce((acc, cur) => {\n            if (/[A-Z]/.test(cur)) acc.caps++;\n            if (/[a-z]/.test(cur)) acc.smalls++;\n            return acc;\n        }, {caps: 0, smalls: 0});\n        if (strength < cur_strength.caps - cur_strength.smalls) {\n            strength = cur_strength.caps - cur_strength.smalls;\n            strongest_extension = element;\n        }\n    });\n    return class_name + '.' + strongest_extension;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "let maxStrength = -Infinity;\n    let extensionName = \"\";\n    extensions.forEach(extension => {\n        let up = extension.split(\"\").filter(x => x === x.toUpperCase()).length;\n        let lo = extension.split(\"\").filter(x => x === x.toLowerCase()).length;\n        let strength = up - lo;\n        if(strength > maxStrength){\n            maxStrength = strength;\n            extensionName = extension;\n        }\n    });\n    return `${class_name}.${extensionName}`;\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "var classes = {};\n    for(var i=0; i<extensions.length; i++){\n        var up = extensions[i].match(/[A-Z]/g).length;\n        var low = extensions[i].match(/[a-z]/g).length;\n        var strength = up - low;\n        classes[extensions[i]] = strength;\n    }\n    var max = extensions[0];\n    for(var i=0; i<extensions.length; i++){\n        if(classes[extensions[i]] > classes[max]){\n            max = extensions[i];\n        }\n    }\n    return class_name + '.' + max;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "var uppercase = 0;\n    var lowercase = 0;\n    var strength = 0;\n    var strongest = '';\n    extensions.forEach(extension => {\n        for(let i = 0; i < extension.length; i++){\n            if(extension[i] === extension[i].toUpperCase()){\n                uppercase++;\n            }\n            else{\n                lowercase++;\n            }\n        }\n        if(strength < uppercase - lowercase){\n            strength = uppercase - lowercase;\n            strongest = extension;\n        }\n        uppercase = 0;\n        lowercase = 0;\n    });\n    return class_name + '.' + strongest;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "let ext_index=0;\n\tlet sum_up=0;\n\tlet sum_low=0;\n\tfor(let i=0;i<extensions.length;i++){\n\t\tsum_up=0;\n\t\tsum_low=0;\n\t\tfor(let j=0;j<extensions[i].length;j++){\n\t\t\tif(extensions[i][j]==extensions[i][j].toUpperCase()){\n\t\t\t\tsum_up++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tsum_low++;\n\t\t\t}\n\t\t}\n\t\tif(sum_up-sum_low>ext_index){\n\t\t\text_index=sum_up-sum_low;\n\t\t\tresult=extensions[i];\n\t\t}\n\t}\n\treturn class_name+'.'+result;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "let strongest = {ext: '', str: -Infinity};\n    for(let x = 0; x < extensions.length; x++){\n        let cap = 0, sm = 0;\n        for(let y = 0; y < extensions[x].length; y++){\n            if(extensions[x][y] >= 'A' && extensions[x][y] <= 'Z'){\n                cap++;\n            }\n            else{\n                sm++;\n            }\n        }\n        if(cap - sm > strongest.str){\n            strongest.ext = extensions[x];\n            strongest.str = cap - sm;\n        }\n    }\n    return class_name + '.' + strongest.ext;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "var best_ext;\n    var best_score = 0;\n    for(var i = 0; i < extensions.length; i++){\n        var score = extensions[i].replace(/[^A-Z]/g, '').length - extensions[i].replace(/[^a-z]/g, '').length;\n        if(score > best_score){\n            best_score = score;\n            best_ext = extensions[i];\n        }\n    }\n    return class_name + '.' + best_ext;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "var res = null;\n  var strength = 0;\n  extensions.forEach(function(val, index){\n    var temp = 0;\n    val.split('').forEach(function(val, index){\n      if (val.toUpperCase() === val) temp += 1;\n      else temp -= 1;\n    });\n    if (temp > strength) {\n      strength = temp;\n      res = val;\n    }\n  });\n  return class_name + '.' + res;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "var CAP = 0;\n  var SM = 0;\n  var strongestExt;\n  for(var i = 0; i < extensions.length; i++){\n    CAP = 0;\n    SM = 0;\n    for(var j = 0; j < extensions[i].length; j++){\n      if(extensions[i][j] == extensions[i][j].toUpperCase()){\n        CAP++;\n      }\n      else{\n        SM++;\n      }\n    }\n    if(extensions[i].length === 0){\n      continue;\n    }\n    if(i === 0){\n      strongestExt = extensions[i];\n    }\n    else if(CAP - SM > extensions[i].length){\n      strongestExt = extensions[i];\n    }\n  }\n  return class_name + '.' + strongestExt;\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//You are given a 2 dimensional data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row(lst, x){\n",
        "snippet": [
            "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n"
        ],
        "simplified": "You are given a 2 dimensional data, as a nested lists, which is similar to matrix, however, unlike matrices, each row may contain a different number of columns. Given lst, and integer x, find integers x in the list, and return list of tuples, [(x1, y1), (x2, y2) ...] such that each tuple is a coordinate - (row, columns), starting with 0. Sort coordinates initially by rows in ascending order. Also, sort coordinates of the row by columns in descending order.",
        "task_id": "87",
        "3": "let result = [];\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                result.push([i, j]);\n            }\n        }\n    }\n    return result.sort((a, b) => {\n        if (a[0] === b[0]) {\n            return b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "let result = [];\n    for (let i = 0; i < lst.length; i++) {\n        let sublst = lst[i];\n        for (let j = 0; j < sublst.length; j++) {\n            if (sublst[j] === x) {\n                result.push([i, j]);\n            }\n        }\n    }\n    return result.sort((a, b) => {\n        if (a[0] === b[0]) {\n            return b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "let new_arr = [];\n    for (let i = 0; i < lst.length; i++) {\n        let arr = lst[i];\n        let index = arr.indexOf(x);\n        while (index >= 0) {\n            new_arr.push([i, index]);\n            index = arr.indexOf(x, index + 1);\n        }\n    }\n    new_arr.sort(function (a, b) {\n        if (a[0] !== b[0]) {\n            return a[0] - b[0];\n        } else {\n            return b[1] - a[1];\n        }\n    });\n    return new_arr;\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "let arr = []\n    lst.forEach((item, index) => {\n        item.forEach((item2, index2) => {\n            if (item2 === x) {\n                arr.push([index, index2])\n            }\n        })\n    })\n    arr.sort((a, b) => {\n        if (a[0] < b[0]) {\n            return -1\n        } else if (a[0] > b[0]) {\n            return 1\n        } else {\n            if (a[1] > b[1]) {\n                return -1\n            } else if (a[1] < b[1]) {\n                return 1\n            } else {\n                return 0\n            }\n        }\n    })\n    console.log(arr)\n    return arr\n}\nget_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n], 1)\nget_row([], 1)\nget_row([[], [1], [1, 2, 3]], 3)",
        "grade-7": {
            "execution": 1
        },
        "16": "if (lst.length == 0) {\n        return [];\n    }\n    let result = [];\n    let i = 0;\n    let j = 0;\n    while (i < lst.length) {\n        while (j < lst[i].length) {\n            if (lst[i][j] == x) {\n                result.push([i, j]);\n            }\n            j++;\n        }\n        j = 0;\n        i++;\n    }\n    result.sort(function(a, b) {\n        if (a[0] == b[0]) {\n            return b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n    return result;\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "let tuples = [];\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                tuples.push([i, j]);\n            }\n        }\n    }\n    tuples.sort(function (a, b) {\n        return a[0] - b[0];\n    });\n    tuples.sort(function (a, b) {\n        return b[1] - a[1];\n    });\n    return tuples;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "// write code here.\n    const result = [];\n    for (let i = 0; i < lst.length; i++) {\n        const element = lst[i];\n        for (let j = 0; j < element.length; j++) {\n            const e = element[j];\n            if (e === x) {\n                result.push([i, j]);\n            }\n        }\n    }\n    return result.sort((a, b) => {\n        if (a[0] === b[0]) {\n            return b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n}\n\nconst lst = [\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n];\n\nconst list = [\n    [],\n    [1],\n    [1, 2, 3]\n];",
        "grade-11": {
            "execution": 1
        },
        "1": "let arr = [];\n\tif (lst.length == 0) {\n\t\treturn arr;\n\t}\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tfor (let j = 0; j < lst[i].length; j++) {\n\t\t\tif (lst[i][j] == x) {\n\t\t\t\tarr.push([i, j]);\n\t\t\t}\n\t\t}\n\t}\n\treturn arr.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    let row = lst[i];\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  return result.sort(function(a, b) {\n    if (a[0] === b[0]) {\n      return b[1] - a[1];\n    }\n    return a[0] - b[0];\n  });\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "var result = [];\n    for (var i = 0; i < lst.length; i++) {\n        for (var j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                result.push([i, j]);\n            }\n        }\n    }\n    return result.sort(function(a, b) {\n        if (a[0] < b[0]) {\n            return -1;\n        } else if (a[0] > b[0]) {\n            return 1;\n        } else {\n            if (a[1] > b[1]) {\n                return -1;\n            } else if (a[1] < b[1]) {\n                return 1;\n            } else {\n                return 0;\n            }\n        }\n    });\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "let arr = [];\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                arr.push([i, j]);\n            }\n        }\n    }\n    return arr.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "let res = [];\n    lst.forEach((item, i) => {\n        item.forEach((elem, j) => {\n            if (elem === x) res.push([i, j]);\n        });\n    });\n    return res.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "let row = [];\n    let obj = {};\n    for(let i = 0; i < lst.length; i++){\n        obj[i] = [];\n        for(let j = 0; j < lst[i].length; j++){\n            if(lst[i][j] === x){\n                obj[i].push(j);\n            }\n        }\n    }\n    for(let i in obj){\n        for(let j of obj[i]){\n            row.push([i, j]);\n        }\n    }\n    let res = row.sort((a, b) => {\n        return a[0] - b[0] || b[1] - a[1];\n    });\n    return res;\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "let array = []\n  let row = 0\n  for(let i = 0; i < lst.length; i++){\n    let columns = 0\n    for(let j = 0; j < lst[i].length; j++){\n      if(lst[i][j] === x){\n        array.push([row, columns])\n      }\n      columns++\n    }\n    row++\n  }\n  let sorted = array.sort(function(a, b){\n    if(a[0] === b[0]){\n      return b[1] - a[1]\n    }\n    return a[0] - b[0]\n  })\n  return sorted\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "var coordinates = [];\n    var row_num = 0;\n    var col_num = 0;\n    for (var i = 0; i < lst.length; i++) {\n        for (var j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                coordinates.push([row_num, col_num]);\n            }\n            col_num += 1;\n        }\n        row_num += 1;\n        col_num = 0;\n    }\n    coordinates.sort(function(a, b) {\n        if (a[0] < b[0]) {\n            return -1;\n        }\n        if (a[0] > b[0]) {\n            return 1;\n        }\n        if (a[1] > b[1]) {\n            return -1;\n        }\n        if (a[1] < b[1]) {\n            return 1;\n        }\n        return 0;\n    });\n    return coordinates;\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "var result = [];\n    for (var i = 0; i < lst.length; i++) {\n        for (var j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                result.push([i, j]);\n            }\n        }\n    }\n    return result.sort(function(a, b) {\n        return (a[0] - b[0]) || (b[1] - a[1]);\n    });\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "if(lst.length == 0){\n        return [];\n    }\n    var result = [];\n    for(var i = 0; i < lst.length; i++){\n        for(var j = 0; j < lst[i].length; j++){\n            if(lst[i][j] == x){\n                result.push([i, j]);\n            }\n        }\n    }\n    result.sort(function(a, b){\n        if(a[0] < b[0]){\n            return -1;\n        }\n        if(a[0] > b[0]){\n            return 1;\n        }\n        if(a[1] > b[1]){\n            return -1;\n        }\n        if(a[1] < b[1]){\n            return 1;\n        }\n        return 0;\n    });\n    return result;\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "let array = [];\n    for (let i = 0; i < lst.length; i++) {\n        let row = lst[i];\n        for (let j = 0; j < row.length; j++) {\n            if (x === row[j]) {\n                array.push([i, j]);\n            }\n        }\n    }\n    return array.sort((a, b) => (a[0] - b[0]) || (b[1] - a[1]));\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "let res = []\n    for (let i = 0; i < lst.length; i++) {\n        let temp = lst[i].reduce((acc,item, ind) => item === x ? acc.concat([[i, ind]]) : acc, [])\n        res = res.concat(temp)\n    }\n    res.sort((a,b) => a[0] - b[0] || b[1] - a[1])\n    return res\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  let sortByRow = result.sort((a, b) => {\n    return a[0] - b[0];\n  });\n  return sortByRow.map(x => {\n    return [x[0], -x[1]];\n  }).sort((a, b) => {\n    return a[1] - b[1];\n  }).map(x => {\n    return [x[0], -x[1]];\n  });\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n",
        "snippet": [
            "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n"
        ],
        "simplified": "Return median of elements in the list l.",
        "task_id": "47",
        "3": "}",
        "grade-3": {
            "execution": 0
        },
        "0": "var sum = 0;\n    var length = 0;\n    for(var i = 0; i < l.length; i++){\n        sum += l[i];\n        length++;\n    }\n    return sum/length;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "if(l.length == 0){\n        return null;\n    }\n    //Sort the list\n    l.sort(function(a, b){\n        return a - b;\n    });\n    //Get the middle index\n    let index = parseInt(l.length / 2);\n    //Check if the list has an even number of elements\n    if(l.length % 2 == 0){\n        //If so, then return the mean of the elements at the index and at index + 1\n        return (l[index] + l[index + 1]) / 2;\n    }else{\n        //If not, then return the element at the index\n        return l[index];\n    }\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "return _.median(l);\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "if(l.length === 0){\n        return NaN;\n    }\n    let k = Math.floor(l.length/2);\n    let m = 0;\n    l.sort(function(a, b){return a-b});\n    if(l.length % 2 === 0){\n        m = (l[k-1] + l[k])/2;\n    }else{\n        m = l[k];\n    }\n    return m;\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "// >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n    // >>> median([3, 1, 2, 4, 5])\n    // 3\n    let length = l.length;\n    let sorted = l.sort(function(a, b){return a-b});\n    let result;\n    if (length % 2 != 0){\n        result = sorted[Math.floor(length/2)];\n    }\n    else{\n        result = (sorted[length/2] + sorted[length/2 - 1])/2;\n    }\n    return result;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "if(l.length==0){\n    return null;\n  }else{\n    return l[Math.floor(l.length/2)];\n  }\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "if(l.length == 0){\n        return null;\n    }\n    var length = l.length;\n    var l2 = l.sort(function(a, b){return a-b});\n    if(length % 2 == 0){\n        return (l2[length/2] + l2[length/2 - 1])/2;\n    }\n    else{\n        return l2[Math.floor(length/2)];\n    }\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "if (l.length == 0) {\n    return -1;\n  }\n  l.sort(function(a, b){return a-b});\n  var median = (l.length % 2 == 0) ? ((l[l.length/2] + l[l.length/2 - 1]) / 2) : l[Math.floor(l.length/2)];\n  return median;\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "l.sort(function(a,b){\n\t\treturn a-b;\n\t});\n\tconsole.log(l);\n\treturn l[Math.floor(l.length/2)];\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "if (l.length % 2 == 0){\n        return (l[l.length/2-1] + l[l.length/2])/2\n    }\n    else {\n        return l[Math.floor(l.length/2)]\n    }\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "var l1 = l.slice();\n  l1.sort(function(a,b){\n    return a-b;\n  });\n  var result = l1[Math.floor(l1.length/2)];\n  return result;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "let length = l.length;\n\tif(length == 0){\n\t\treturn 0;\n\t}\n\telse if(length == 1){\n\t\treturn l[0];\n\t}\n\tl.sort(function(a, b){return a-b});\n\tconsole.log(l);\n\tif(length % 2 == 0){\n\t\treturn (l[length/2] + l[length/2 - 1])/2;\n\t}\n\telse{\n\t\treturn l[Math.floor(length/2)];\n\t}\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "if(isEmpty(l)){\n    return 0;\n  }\n  else{\n    return (first(l) + last(l)) / 2;\n  }\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "if (l.length % 2 == 0){\n        return (l[Math.floor(l.length/2)] + l[Math.floor(l.length/2)-1])/2\n    }\n    else {\n        return l[Math.floor(l.length/2)]\n    }\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "var l_sorted = l.sort(function(a, b){return a-b});\n    var l_len = l_sorted.length;\n    var l_mid = Math.floor(l_len/2);\n    if (l_len % 2)\n        return l_sorted[l_mid];\n    else\n        return (l_sorted[l_mid-1] + l_sorted[l_mid]) / 2.0;\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "var ln = l.length;\n    if(ln%2===0){\n        return (l[ln/2-1]+l[ln/2])/2;\n    }\n    else{\n        return l[Math.floor(ln/2)];\n    }\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "var list = l.sort(function(a,b){\n\t\treturn a-b;\n\t});\n\tvar len = list.length;\n\tif(len%2 === 0){\n\t\treturn (list[len/2-1]+list[len/2])/2;\n\t}\n\telse{\n\t\treturn list[(len-1)/2];\n\t}\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "}",
        "grade-5": {
            "execution": 0
        },
        "19": "var sorted = l.sort(function(a,b){\n    return a-b;\n  });\n  var m = sorted.length/2;\n  if(sorted.length % 2 == 0){\n    return ((sorted[m-1]+sorted[m])/2.0);\n  }\n  else{\n    return sorted[Math.floor(m)];\n  }\n}",
        "grade-19": {
            "execution": 1
        }
    },
    {
        "intent": "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunction sort_numbers(numbers){\n",
        "snippet": [
            "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n"
        ],
        "simplified": "Input is a space-delimited string of numberals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Return the string with numbers sorted from smallest to largest",
        "task_id": "19",
        "3": "numbers = numbers.split(' ');\n    var nums = {\n        zero: 0,\n        one: 1,\n        two: 2,\n        three: 3,\n        four: 4,\n        five: 5,\n        six: 6,\n        seven: 7,\n        eight: 8,\n        nine: 9\n    };\n    numbers.sort(function(a, b){\n        return nums[a] - nums[b];\n    });\n    return numbers.join(' ');\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "var numDict = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  var numArr = numbers.split(' ');\n  var sortedArr = [];\n  var sortedStr = '';\n  for (i = 0; i < numArr.length; i++){\n    sortedArr.push(numDict[numArr[i]]);\n  }\n  sortedArr.sort(function(a, b){return a-b});\n  for (i = 0; i < sortedArr.length; i++){\n    for (var key in numDict){\n      if (numDict[key] === sortedArr[i]){\n        sortedStr += key + ' ';\n      }\n    }\n  }\n  return sortedStr.slice(0, -1);\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "let s = '';\n    let nums = numbers.split(' ');\n    nums.sort((a, b) => lookup_number(a) - lookup_number(b));\n    for (let n of nums)\n        s += n + ' ';\n    return s.trimRight();\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "var nums = numbers.split(' ');\n\tvar sort_nums = [];\n\tvar num_dict = {\n\t\t'zero': 0,\n\t\t'one': 1,\n\t\t'two': 2,\n\t\t'three': 3,\n\t\t'four': 4,\n\t\t'five': 5,\n\t\t'six': 6,\n\t\t'seven': 7,\n\t\t'eight': 8,\n\t\t'nine': 9\n\t};\n\tfor (var i = 0; i < nums.length; i++){\n\t\tvar num = num_dict[nums[i]];\n\t\tif (num){\n\t\t\tsort_nums.push(num);\n\t\t}\n\t}\n\tsort_nums.sort(function(a, b){return a - b});\n\tfor (var i = 0; i < sort_nums.length; i++){\n\t\tfor (var key in num_dict){\n\t\t\tif (num_dict[key] === sort_nums[i]){\n\t\t\t\tsort_nums[i] = key;\n\t\t\t}\n\t\t}\n\t}\n\treturn sort_nums.join(' ');\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "var arr = numbers.split(' ');\n    arr.sort();\n    var output = arr.join(' ');\n    return output;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "// PUT YOUR CODE HERE\n    let numberals = numbers.split(' ');\n    for (let i = 0; i < numberals.length; i++) {\n        numberals[i] = numberals[i].replace('zero', '0');\n        numberals[i] = numberals[i].replace('one', '1');\n        numberals[i] = numberals[i].replace('two', '2');\n        numberals[i] = numberals[i].replace('three', '3');\n        numberals[i] = numberals[i].replace('four', '4');\n        numberals[i] = numberals[i].replace('five', '5');\n        numberals[i] = numberals[i].replace('six', '6');\n        numberals[i] = numberals[i].replace('seven', '7');\n        numberals[i] = numberals[i].replace('eight', '8');\n        numberals[i] = numberals[i].replace('nine', '9');\n    }\n    numberals.sort(function(a, b){return a-b});\n    for (let i = 0; i < numberals.length; i++) {\n        numberals[i] = numberals[i].replace('0', 'zero');\n        numberals[i] = numberals[i].replace('1', 'one');\n        numberals[i] = numberals[i].replace('2', 'two');\n        numberals[i] = numberals[i].replace('3', 'three');\n        numberals[i] = numberals[i].replace('4', 'four');\n        numberals[i] = numberals[i].replace('5', 'five');\n        numberals[i] = numberals[i].replace('6', 'six');\n        numberals[i] = numberals[i].replace('7', 'seven');\n        numberals[i] = numberals[i].replace('8', 'eight');\n        numberals[i] = numberals[i].replace('9', 'nine');\n    }\n    return numberals.join(' ');\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "var num_obj = {\n    zero: 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9\n  };\n  var stringArr = numbers.split(' ');\n  for (var i = 0; i < stringArr.length; i++) {\n    stringArr[i] = num_obj[stringArr[i]];\n  }\n  stringArr.sort(function(a, b){return a-b});\n  for (var j = 0; j < stringArr.length; j++) {\n    for (var key in num_obj) {\n      if (num_obj[key] === stringArr[j]) {\n        stringArr[j] = key;\n      }\n    }\n  }\n  var string = stringArr.join(' ');\n  return string;\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "numbers = numbers.split(' ')\n\tvar numbers_in_order = []\n\tvar number_conversions = {'zero':0, 'one':1, 'two':2, 'three':3, 'four':4, 'five':5, 'six':6, 'seven':7, 'eight':8, 'nine':9}\n\tfor (var i = 0; i < numbers.length; i++){\n\t\tnumbers_in_order.push(number_conversions[numbers[i]])\n\t}\n\tnumbers_in_order.sort(function(a,b){return a-b})\n\tvar sorted_numbers = []\n\tfor (var j = 0; j < numbers_in_order.length; j++){\n\t\tfor (var key in number_conversions){\n\t\t\tif (numbers_in_order[j] == number_conversions[key]){\n\t\t\t\tsorted_numbers.push(key)\n\t\t\t}\n\t\t}\n\t}\n\treturn sorted_numbers.join(' ')\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "}",
        "grade-10": {
            "execution": 0
        },
        "17": "var numbers_array = numbers.split(\" \");\n\tvar real_numbers = [];\n\t//Converting words to numbers\n\tfor(var i = 0; i < numbers_array.length; i++){\n\t\tif(numbers_array[i] == \"zero\"){\n\t\t\treal_numbers.push(0);\n\t\t}\n\t\telse if(numbers_array[i] == \"one\"){\n\t\t\treal_numbers.push(1);\n\t\t}\n\t\telse if(numbers_array[i] == \"two\"){\n\t\t\treal_numbers.push(2);\n\t\t}\n\t\telse if(numbers_array[i] == \"three\"){\n\t\t\treal_numbers.push(3);\n\t\t}\n\t\telse if(numbers_array[i] == \"four\"){\n\t\t\treal_numbers.push(4);\n\t\t}\n\t\telse if(numbers_array[i] == \"five\"){\n\t\t\treal_numbers.push(5);\n\t\t}\n\t\telse if(numbers_array[i] == \"six\"){\n\t\t\treal_numbers.push(6);\n\t\t}\n\t\telse if(numbers_array[i] == \"seven\"){\n\t\t\treal_numbers.push(7);\n\t\t}\n\t\telse if(numbers_array[i] == \"eight\"){\n\t\t\treal_numbers.push(8);\n\t\t}\n\t\telse if(numbers_array[i] == \"nine\"){\n\t\t\treal_numbers.push(9);\n\t\t}\n\t}\n\t\n\t//Sorting\n\tvar temp;\n\tfor(var i = 0; i < real_numbers.length - 1; i++){\n\t\tfor(var j = i + 1; j < real_numbers.length; j++){\n\t\t\tif(real_numbers[i] > real_numbers[j]){\n\t\t\t\ttemp = real_numbers[i];\n\t\t\t\treal_numbers[i] =",
        "grade-17": {
            "execution": 0
        },
        "12": "var nums = numbers.split(' ');\n  return nums.sort(function(a,b){\n    return (translate(a) > translate(b));\n  }).join(' ');\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "var numbers_list = numbers.split(' ');\n  numbers_list.sort(function(a, b){\n    return numeral_dict[a] - numeral_dict[b];\n  });\n  return numbers_list.join(' ');\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "const numeral_map = new Map([['zero', 0], ['one', 1], ['two', 2], ['three', 3], ['four', 4], ['five', 5], ['six', 6], ['seven', 7], ['eight', 8], ['nine', 9]]);\n    const num_array = numbers.split(' ');\n    num_array.sort((a, b) => {return numeral_map.get(a) - numeral_map.get(b)});\n    return num_array.join(' ');\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "var new_number_array = [];\n\tvar array_of_numbers = numbers.split(\" \");\n\tfor (var i = 0; i < array_of_numbers.length; i++) {\n\t\tswitch(array_of_numbers[i]){\n\t\t\tcase 'zero':\n\t\t\t\tnew_number_array.push(0);\n\t\t\t\tbreak;\n\t\t\tcase 'one':\n\t\t\t\tnew_number_array.push(1);\n\t\t\t\tbreak;\n\t\t\tcase 'two':\n\t\t\t\tnew_number_array.push(2);\n\t\t\t\tbreak;\n\t\t\tcase 'three':\n\t\t\t\tnew_number_array.push(3);\n\t\t\t\tbreak;\n\t\t\tcase 'four':\n\t\t\t\tnew_number_array.push(4);\n\t\t\t\tbreak;\n\t\t\tcase 'five':\n\t\t\t\tnew_number_array.push(5);\n\t\t\t\tbreak;\n\t\t\tcase 'six':\n\t\t\t\tnew_number_array.push(6);\n\t\t\t\tbreak;\n\t\t\tcase 'seven':\n\t\t\t\tnew_number_array.push(7);\n\t\t\t\tbreak;\n\t\t\tcase 'eight':\n\t\t\t\tnew_number_array.push(8);\n\t\t\t\tbreak;\n\t\t\tcase 'nine':\n\t\t\t\tnew_number_array.push(9);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\tfor (var i = 0; i < new_number_array.length; i++) {\n\t\tfor (var j = i; j < new_number_array.length; j++) {\n\t\t\tif (new_number_array[i] > new_number_array[j]) {\n\t\t\t\ttemp = new_number_array[i];\n\t\t\t\tnew_number_array[i] = new_number_array[j];\n\t\t\t\tnew_number_array[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\tfor (var i =",
        "grade-15": {
            "execution": 0
        },
        "13": "let numberMap = {'zero':0, 'one':1, 'two':2, 'three':3, 'four':4, 'five':5, 'six':6, 'seven':7, 'eight':8, 'nine':9}\n    return numbers.split(' ').sort((a,b) => numberMap[a] - numberMap[b]).join(' ')\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "var num = numbers.split(' ');\n  var sorted = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'];\n  var nums = [];\n  for (var i = 0; i < num.length; i++) {\n    for (var j = 0; j < sorted.length; j++) {\n      if (num[i] === sorted[j]) {\n        nums.push(sorted[j]);\n      }\n    }\n  }\n  return nums.join(' ');\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "let num_map = {'zero':0, 'one':1, 'two':2, 'three':3, 'four':4, 'five':5, 'six':6, 'seven':7, 'eight':8, 'nine':9};\n    let num_arr = numbers.split(' ');\n    num_arr.sort((a,b) => {\n        return num_map[a] - num_map[b];\n    });\n    return num_arr.join(' ');\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "var list = numbers.split(' ');\n    var num = [];\n    var dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9};\n    for (var i=0; i<list.length; i++){\n        num.push(dict[list[i]]);\n    }\n    num.sort(function(a, b){return a-b});\n    for (var i=0; i<num.length; i++){\n        for (var key in dict){\n            if (dict[key] === num[i]){\n                num[i] = key;\n            }\n        }\n    }\n    return num.join(' ');\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "// assume all numbers are valid integers, single space, no period\n  var numeral_to_number = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9};\n  var numbers_array = numbers.split(' ');\n  var numbers_array_converted = [];\n  for (var i = 0; i < numbers_array.length; i++) {\n    numbers_array_converted.push(numeral_to_number[numbers_array[i]]);\n  }\n  numbers_array_converted.sort(function(a, b){return a-b});\n  var sorted_numbers = '';\n  for (var i = 0; i < numbers_array_converted.length; i++) {\n    sorted_numbers += Object.keys(numeral_to_number)[numbers_array_converted[i]] + ' ';\n  }\n  return sorted_numbers.trim();\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "let numToInt = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    numbers = numbers.split(' ');\n    numbers = numbers.map(function(number){\n        return numToInt[number];\n    })\n    return numbers.sort(function(a, b){\n        return a - b;\n    }).join(' ');\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n// bucket_capacity : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example 3:\n// Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output: 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n",
        "snippet": [
            "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n"
        ],
        "simplified": "You are given a rectangular grid of wells. Each row represents a single well, and each 1 in a row represents a single unit of water. Each well has a corresponding bucket that can be used to extract water from it, and all buckets have the same capacity. Your task is to use the buckets to empty the wells. Output the number of times you need to lower the buckets. Constraints: * all wells have the same length * 1 <= grid.length <= 10^2 * 1 <= grid[:,1].length <= 10^2 * grid[i][j] -> 0 | 1 * 1 <= capacity <= 10",
        "task_id": "115",
        "3": "var sum = 0, max = 0;\n    for(var i = 0; i < grid.length; i++){\n        for(var j = 0; j < grid[i].length; j++){\n            sum += grid[i][j];\n            if(sum > max) max = sum;\n            if(sum == capacity) sum = 0;\n        }\n    }\n    return max;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "var result = 0;\n\t\tfor(var i = 0; i < grid.length; i++){\n\t\t\tvar row = grid[i];\n\t\t\tfor(var j = 0; j < row.length; j++){\n\t\t\t\tif(grid[i][j] == 1){\n\t\t\t\t\tif(row[j-1] == 1){\n\t\t\t\t\t\tgrid[i][j-1] = 0;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tgrid[i][j] = 0;\n\t\t\t\t\t\tresult ++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "//expect_fill = max(grid[i])\n    let num_rows = grid.length;\n    let num_cols = grid[0].length;\n    let row_idx = 0;\n    let expect_fill = 0;\n    for(let col_idx = 0; col_idx < num_cols; col_idx++){\n        expect_fill = Math.max(expect_fill, grid[row_idx][col_idx]);\n    }\n    let fill_cnt = 0;\n    while(row_idx < num_rows){\n        let fill_cnt_per_row = 0;\n        for(let col_idx = 0; col_idx < num_cols; col_idx++){\n            if(grid[row_idx][col_idx] < expect_fill){\n                grid[row_idx][col_idx] += 1;\n                fill_cnt_per_row += 1;\n            }\n        }\n        fill_cnt += fill_cnt_per_row;\n        row_idx += 1;\n    }\n    return fill_cnt;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "const maxFillResult = [];\n    //calculate maxFillResult\n    for(let rowIndex = 0; rowIndex < grid.length; rowIndex++){\n        const row = grid[rowIndex];\n        let maxCapacity = capacity;\n        const resultRow = [];\n        // calculate maxFillRowResult\n        for(let wellIndex = 0; wellIndex < row.length; wellIndex++){\n            const well = row[wellIndex];\n            //check if the well contains water\n            if(well){\n                //calculate maxCapacity - current well capacity\n                const currentCapacity = maxCapacity - well;\n                //push it to the result row\n                resultRow.push(currentCapacity);\n                // if it's negative then we should throw away this water\n                // and set maxCapacity to capacity\n                if(currentCapacity < 0){\n                    maxCapacity = capacity;\n                } else {\n                    maxCapacity = currentCapacity;\n                }\n            } else {\n                //if the well is empty push 0\n                resultRow.push(0);\n            }\n        }\n        //push the result row to the result array\n        maxFillResult.push(resultRow);\n    }\n    return maxFillResult;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1) {\n                max_fill += capacity;\n            }\n        }\n    }\n    return max_fill;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "//return [max_fill_times, fill_row]\n    var max_fill_times = 0,\n        fill_row = 0;\n    for(var i=0; i<grid.length; i++){\n        var cur_row_total = 0;\n        for(var j=0; j<grid[i].length; j++){\n            cur_row_total += grid[i][j];\n        }\n        if(cur_row_total > max_fill_times){\n            max_fill_times = cur_row_total;\n            fill_row = i;\n        }\n    }\n    return [max_fill_times, fill_row];\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "var fill_count = 0\n\tvar empty_wells = []\n\tfor(i=0; i<grid.length; i++){\n\t\tvar well = grid[i]\n\t\tvar full_units = well.filter(function(unit){\n\t\t\treturn unit === 1\n\t\t})\n\t\tfill_count += Math.ceil(full_units.length / capacity)\n\t\tvar empty_units = well.filter(function(unit){\n\t\t\treturn unit === 0\n\t\t})\n\t\tempty_wells.push(empty_units.length)\n\t}\n\tvar empty_wells_count = empty_wells.filter(function(empty_units){\n\t\treturn empty_units === well.length\n\t})\n\tif(empty_wells_count.length === grid.length){\n\t\treturn 0\n\t}\n\treturn fill_count\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "var ans = 0;\n    var prev_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n                var prev_fill = grid[i][j];\n                grid[i][j] = 0;\n                ans++;\n            }\n            prev_fill = capacity - prev_fill;\n            if(prev_fill >= grid[i][j]){\n                prev_fill -= grid[i][j];\n                grid[i][j] = 0;\n            }\n            else{\n                grid[i][j] -= prev_fill;\n                prev_fill = 0;\n            }\n        }\n    }\n    return ans;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "var result = 0;\n    for(var i=0; i<grid.length; i++){\n        var n_units = 0;\n        for(var j=0; j<grid[i].length; j++){\n            if(grid[i][j] == 1){\n                n_units += 1;\n            }\n        }\n        var n_buckets = Math.ceil(n_units / capacity);\n        result += n_buckets;\n    }\n    return result;\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "let max_water = 0;\n    let max_row = 0;\n    let max_col = 0;\n    let row_idx = 0;\n    let col_idx = 0;\n    for(const row of grid){\n        for(const col of row){\n            if(col > max_water){\n                max_water = col;\n                max_row = row_idx;\n                max_col = col_idx;\n            }\n            col_idx++;\n        }\n        row_idx++;\n        col_idx = 0;\n    }\n    const result = grid[max_row][max_col] * capacity;\n    grid[max_row][max_col] = 0;\n    return result;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "let max_fill = 0;\n    for(let row = 0; row < grid.length; row++){\n        for(let col = 0; col < grid[row].length; col++){\n            if(grid[row][col] == 1){\n                max_fill += capacity - 1;\n            }\n        }\n    }\n    return max_fill;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "var height = grid.length;\n    var width = grid[0].length;\n    var total = 0;\n    for(var i = 0; i < height; i++){\n        for(var j = 0; j < width; j++){\n            total += grid[i][j];\n        }\n    }\n    var can_fill = Math.floor(total / capacity);\n    return can_fill;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "return grid.reduce((acc, row) => {\n    return Math.max(acc, capacity * Math.floor(row.reduce((acc, val) => {\n      return acc + val;\n    }, 0) / capacity));\n  }, 0);\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "let num_buckets = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n                num_buckets++;\n                let j_new = j;\n                while(grid[i][j_new] === 1 && grid[i][j_new + 1] === 1 && j_new < grid[i].length){\n                    j_new++;\n                }\n                if(j_new < grid[i].length){\n                    grid[i][j_new] = capacity;\n                }\n                j = j_new;\n            }\n        }\n    }\n    return num_buckets;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "let max = 0;\n    for(let row of grid){\n        for(let depth of row){\n            max = Math.max(max, depth);\n        }\n    }\n    return max * capacity;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "// create a dp array of the same size of grid\n    let dp = Array(grid.length).fill(0).map(x => Array(grid[0].length).fill(0));\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[0].length; j++){\n            // 1 means there is water in the well, \n            // add it to the current bucket capacity\n            if(grid[i][j] === 1){\n                dp[i][j] = 1;\n            }\n            // if we are not on the first row, \n            // add the previous row to the current bucket capacity\n            if(i > 0){\n                dp[i][j] += dp[i-1][j];\n            }\n            // if we are not on the first column, \n            // add the previous column to the current bucket capacity\n            if(j > 0){\n                dp[i][j] += dp[i][j-1];\n            }\n            // if we are not on the first row and first column, \n            // remove the square in the diagonal, \n            // because we added it twice\n            if(i > 0 && j > 0){\n                dp[i][j] -= dp[i-1][j-1];\n            }\n            // compare with the bucket capacity\n            dp[i][j] = Math.min(dp[i][j], capacity);\n        }\n    }\n    return dp[grid.length-1][grid[0].length-1];\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "let max_fill = 0\n  let count = 0\n  for(let i = 0; i < grid.length; i++){\n    let fill = 0\n    for(let j = 0; j < grid[i].length; j++){\n      if(grid[i][j] == 1){\n        fill++\n      }\n    }\n    if(fill > max_fill){\n      max_fill = fill\n    }\n  }\n  count = Math.ceil(max_fill / capacity)\n  return count\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "var i = 0, j = 0, c = 0, d = 0, s = 0, e = 0, b = 0, q = 0, f = 0, g = 0, r = 0, m = 0, h = 0, x = 0, z = 0, \n\t\tlen = grid.length, len2 = 0, len3 = 0, len4 = 0, len5 = 0, wells = [], wells2 = [], sp = [], em = [], po = [], \n\t\tst = [], st2 = [], en = [], co = [], co2 = [], stack = [], stack2 = [], stack3 = [], stack4 = [], \n\t\tstack5 = [], stack6 = [], stack7 = [], stack8 = [], stack9 = [], stack10 = [], stack11 = [], stack12 = [], \n\t\tstack13 = [], stack14 = [], stack15 = [], stack16 = [], stack17 = [], stack18 = [], stack19 = [], stack20 = [], \n\t\tstack21 = [], stack22 = [], stack23 = [], stack24 = [], stack25 = [], stack26 = [], stack27 = [], stack28 = [], \n\t\tstack29 = [], stack30 = [], stack31 = [], stack32 = [], stack33 = [], stack34 = [], stack35 = [], stack36 = [], \n\t\tstack37 = [], stack38 = [], stack39 = [], stack40 = [], stack41 = [], stack42 = [], stack43 = [], stack44 = [], \n\t\tstack45 = [], stack46 = [], stack47 = [], stack48 = [], stack49 = [], stack50 = [], stack51 = [], stack52 = [], \n\t\tstack53 = [], stack54 = [], stack55 = [], stack56 = [], stack57 = [], stack58 = [], stack59 = [], stack60 = [], \n\t\tstack61 = [], stack62 = [], stack63 = [], stack64 = [], stack65 = [], stack66 = [], stack67 = [], stack68 = [],",
        "grade-14": {
            "execution": 0
        },
        "5": "let maxFill = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n            maxFill = Math.max(maxFill, grid[i][j]);\n        }\n    }\n    return Math.min(maxFill, capacity);\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "let max_fill_map = [];\n\tfor(let i = 0; i < grid.length; i++){\n\t\tfor(let j = 0; j < grid[i].length; j++){\n\t\t\tif(grid[i][j] == 1){\n\t\t\t\tlet new_max_fill = [[i, j]];\n\t\t\t\tfor(let ii = i - 1; ii >= 0; ii--){\n\t\t\t\t\tif(grid[ii][j] == 1){\n\t\t\t\t\t\tnew_max_fill.push([ii, j]);\n\t\t\t\t\t}else{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor(let ii = i + 1; ii < grid.length; ii++){\n\t\t\t\t\tif(grid[ii][j] == 1){\n\t\t\t\t\t\tnew_max_fill.push([ii, j]);\n\t\t\t\t\t}else{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tlet new_max_fill_set = new Set(new_max_fill.map(function(x){return x.join(',');}));\n\t\t\t\tif(max_fill_map.length == 0){\n\t\t\t\t\tmax_fill_map.push(new_max_fill_set);\n\t\t\t\t}else{\n\t\t\t\t\tlet max_fill_map_new = [];\n\t\t\t\t\tfor(let k = 0; k < max_fill_map.length; k++){\n\t\t\t\t\t\tlet intersect = new Set([...max_fill_map[k]].filter(x => new_max_fill_set.has(x)));\n\t\t\t\t\t\tif(intersect.size == 0){\n\t\t\t\t\t\t\tmax_fill_map_new.push(max_fill_map[k]);\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tlet union = new Set([...max_fill_map[k], ...new_max_fill_set]);",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// smallest_change([1,2,3,5,4,7,9,6]) == 4\n// smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n// smallest_change([1, 2, 3, 2, 1]) == 0\nfunction smallest_change(arr){\n",
        "snippet": [
            "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n"
        ],
        "simplified": "Given an array arr of integers, find the minimum number of elements that need to be changed to make the array palindromic. A palindromic array is an array that is read the same backwards and forwards. In one change, you can change one element to any other element.",
        "task_id": "73",
        "3": "var count = 0;\n    var length = arr.length;\n    var half = length/2\n    for(var i = 0; i < half; i++){\n        if(arr[i] != arr[length-1-i]){\n            count++\n        }\n    }\n    return count\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "}",
        "grade-0": {
            "execution": 0
        },
        "8": "var left = 0;\n  var right = arr.length - 1;\n  var changes = 0;\n  while(left < right){\n    if(arr[left] !== arr[right]){\n      changes++;\n    }\n    left++;\n    right--;\n  }\n  return changes;\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "let odd = 0;\n  let even = 0;\n  let map = {};\n  for(let i = 0; i < arr.length; i++){\n    if(map[arr[i]]){\n      map[arr[i]]++\n    } else {\n      map[arr[i]] = 1;\n    }\n  }\n  for(let key in map){\n    if(map[key] % 2 === 0){\n      even += map[key];\n    } else {\n      odd += map[key];\n    }\n  }\n  return odd;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "var left = 0;\n  var right = arr.length - 1;\n  var count = 0;\n  while(left < right){\n    if(arr[left] !== arr[right]){\n      count++;\n    }\n    left++;\n    right--;\n  }\n  return count;\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "var counter = 0;\n  var arrEnd = arr.length - 1;\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i] !== arr[arrEnd]) {\n      counter++;\n    }\n    arrEnd--;\n  }\n  return counter;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "var arr1 = arr.slice();\n  var arr2 = arr.slice().reverse();\n  var count = 0;\n  for(var i = 0; i < arr.length; i++){\n    if(arr1[i] != arr2[i]){\n      count++;\n    }\n  }\n  return count;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "var size = arr.length;\n    var left = 0;\n    var right = size - 1;\n    var left_sum = 0;\n    var right_sum = 0;\n    while(left < right){\n        if(arr[left] != arr[right]){\n            left_sum += arr[left];\n            right_sum += arr[right];\n        }\n        left++;\n        right--;\n    }\n    return Math.abs(left_sum - right_sum);\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "let count = 0;\n    for(let i = 0; i < arr.length / 2; i++){\n        if(arr[i] !== arr[arr.length - 1 - i]){\n            count++;\n        }\n    }\n    return count;\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "let left = 0;\n    let right = arr.length - 1;\n    let count = 0;\n    while(left < right){\n        if(arr[left] !== arr[right]){\n            count++;\n        }\n        left++;\n        right--;\n    }\n    return count;\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "var count = 0;\n  for(var i = 0; i < arr.length/2; i++){\n    if(arr[i]!=arr[arr.length-1-i]){\n      count++;\n    }\n  }\n  return count;\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "let start=0;\n  let end=arr.length-1;\n  let count=0;\n  while(start<end){\n    if(arr[start]!==arr[end]){\n      count++;\n    }\n    start++;\n    end--;\n  }\n  return count;\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "let count = 0;\n    for(let i = 0; i < arr.length/2; i++){\n        if(arr[i] !== arr[arr.length-1-i]){\n            count++;\n        }\n    }\n    return count;\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "let count = 0;\n    for(let i = 0; i < arr.length/2; i++){\n        if(arr[i] != arr[arr.length-1-i]){\n            count++;\n        }\n    }\n    return count;\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "let length = arr.length;\n  let palinArr = new Array(length);\n  let i,j,k;\n  let minimum = 0;\n  //fill the palinArr with zeros\n  for(i=0;i<length;i++){\n    palinArr[i] = 0;\n  }\n  //make the palinArr\n  for(i=0,j=length-1;i<length;i++,j--){\n    palinArr[i] = arr[j];\n  }\n  //comapre arr and palinArr\n  for(i=0;i<length;i++){\n    if(arr[i] !== palinArr[i]){\n      minimum++;\n    }\n  }\n  return minimum;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "var l = 0;\n    var r = arr.length - 1;\n    var diff = 0;\n    while(l < r){\n        if(arr[l] !== arr[r]){\n            diff++;\n        }\n        l++;\n        r--;\n    }\n    return diff;\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "let original = 0;\n  let reversed = arr.length - 1;\n  let count = 0;\n  while (original <= reversed) {\n    if (arr[original] !== arr[reversed]) {\n      count++;\n    }\n    original++;\n    reversed--;\n  }\n  return count;\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "var min = 0;\n  var pointerStart = 0;\n  var pointerEnd = arr.length - 1;\n  for(var i = 0; i < arr.length; i++){\n    if(arr[pointerStart] !== arr[pointerEnd]){\n      min++;\n    }\n    pointerStart++;\n    pointerEnd--;\n  }\n  return min;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "let count = 0;\n    for(let i = 0; i < arr.length/2; i++){\n        if(arr[i] != arr[arr.length-1-i]){\n            count++;\n        }\n    }\n    return count;\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "var palindrome = false;\n  for(var i = 0; i < arr.length; i++){\n    if(arr[i] == arr[arr.length - 1 - i]){\n      palindrome = true;\n    }\n    else{\n      return arr.length - 1 - i;\n    }\n  }\n  if(palindrome){\n    return 0;\n  }\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//Filter an input list of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings, prefix){\n",
        "snippet": [
            "  return strings.filter(x => x.startsWith(prefix));\n}\n\n"
        ],
        "simplified": "Filter an input list of strings only for ones that start with a given prefix.",
        "task_id": "29",
        "3": "return strings.filter(function(a){\n        return a.startsWith(prefix);\n    });\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "return _.filter(strings, function(a){\n    return a.startsWith(prefix);\n  });\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "return strings.filter(function(str){\n        return str.indexOf(prefix) == 0;\n    });\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "var filtered = strings.filter(function(string){\n        return string.indexOf(prefix) == 0;\n    });\n    return filtered;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "var filtered = [];\n    for (var i = 0; i < strings.length; i++){\n        if (strings[i].startsWith(prefix)){\n            filtered.push(strings[i]);\n        }\n    }\n    return filtered;\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "var new_strings = [];\n    for (var i = 0; i < strings.length; i++){\n        if (strings[i].substring(0, prefix.length) == prefix){\n            new_strings.push(strings[i]);\n        }\n    }\n    return new_strings;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "return strings.filter(function(str){return str.startsWith(prefix)});\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "return filter(strings, function(s){\n\t\treturn s.indexOf(prefix)==0;\n\t});\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "var result = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].startsWith(prefix))\n            result.push(strings[i]);\n    }\n    return result;\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "return _.filter(strings, function(str){ return _.str.startsWith(str, prefix); });\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "var filtered = [];\n    strings.forEach(function(string){\n        if(string.startsWith(prefix)){\n            filtered.push(string);\n        }\n    });\n    return filtered;\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "let result = []\n\tfor (let i = 0; i < strings.length; i++) {\n\t\tif (strings[i].startsWith(prefix)){\n\t\t\tresult.push(strings[i])\n\t\t}\n\t}\n\treturn result\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "var a = strings.filter(function(val){\n\t\tif(val.startsWith(prefix)){\n\t\t\treturn val;\n\t\t}\n\t});\n\treturn a;\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "var arr = [];\n\tfor(i = 0; i < strings.length; i++){\n\t\tif(strings[i].startsWith(prefix)){\n\t\t\tarr.push(strings[i]);\n\t\t}\n\t}\n\treturn arr;\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "// YOUR CODE HERE\n    return strings.filter(function(str){\n        return starts_with(str, prefix);\n    });\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "return strings.filter(\n\tfunction(string){\n\t    return string.startsWith(prefix);\n\t});\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "// your code here\n  var newarr = [];\n  for (var i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      newarr.push(strings[i]);\n    }\n  }\n  return newarr;\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "return strings.filter(function(element){\n        return element.substring(0, prefix.length) == prefix;\n    });\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "return strings.filter(function(string){return string.startsWith(prefix)});\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "return strings.filter(function(str){\n\t\treturn str.slice(0, prefix.length) === prefix;\n\t});\n}",
        "grade-19": {
            "execution": 1
        }
    },
    {
        "intent": "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n",
        "snippet": [
            "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n"
        ],
        "simplified": "Return true if a given number is prime, and false otherwise.",
        "task_id": "31",
        "0": "for(var i = 2; i < n; i++){\n\t\tif(n % i == 0){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
        "grade-0": {
            "execution": 0
        },
        "1": "if (n<=1){\n        return false;\n    }\n    for (var i=2; i*i<=n; i++){\n        if (n%i == 0){\n            return false;\n        }\n    }\n    return true;\n}",
        "grade-1": {
            "execution": 1
        },
        "2": "if (n <= 1){\n        return false;\n    }\n    var i = 2;\n    while (i < n){\n        if (n % i == 0){\n            return false;\n        }\n        i += 1;\n    }\n    return true;\n}",
        "grade-2": {
            "execution": 1
        },
        "3": "if (n < 2) {\n    return false;\n  }\n  for (var i = 2; i < n; i++){\n    if (n % i == 0){\n      return false;\n    }\n  }\n  return true;\n}",
        "grade-3": {
            "execution": 1
        },
        "4": "if (n <= 1){\n        return false;\n    }\n    for (let i = 2; i < n; i++){\n        if (n % i == 0){\n            return false;\n        }\n    }\n    return true;\n}",
        "grade-4": {
            "execution": 1
        },
        "5": "if (n===1){\n\t\treturn false;\n\t}\n\telse if(n === 2){\n\t\treturn true;\n\t}else{\n\t\tfor(var x = 2; x < n; x++){\n\t\t\tif(n % x === 0){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;  \n\t}\n}",
        "grade-5": {
            "execution": 1
        },
        "6": "if (n === 1){\n    return false;\n  }\n  else if (n === 2){\n    return true;\n  }\n  else {\n    for (var i = 2; i < n; i++){\n      if (n % i === 0){\n        return false;\n      }\n    }\n    return true;\n  }\n}",
        "grade-6": {
            "execution": 1
        },
        "7": "if (n < 2) {\n        return false;\n    }\n    for (var i = 2; i < n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}",
        "grade-7": {
            "execution": 1
        },
        "9": "if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i == 0) {\n      return false;\n    }\n  }\n  return true;\n}",
        "grade-9": {
            "execution": 1
        },
        "10": "var flag = true;\n\tvar i = 2;\n\twhile(i < n){\n\t\tif(n % i == 0){\n\t\t\tflag = false;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\treturn flag;\n}",
        "grade-10": {
            "execution": 0
        },
        "11": "if (n === 1) {\n    return false;\n  }\n  for (var i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}",
        "grade-11": {
            "execution": 1
        },
        "12": "if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n        if (n % i == 0){\n            return false;\n        }\n    }\n    return true;\n}",
        "grade-12": {
            "execution": 1
        },
        "13": "// your code here\n}",
        "grade-13": {
            "execution": 0
        },
        "14": "if (n < 2) {return false;}\n    else if (n == 2) {return true;}\n    else {\n        var max = Math.floor(Math.sqrt(n));\n        for (var i = 2; i <= max; i++){\n            if (n % i == 0) {return false;}\n        }\n        return true;\n    }\n}",
        "grade-14": {
            "execution": 1
        },
        "15": "if (n < 2) {\n        return false;\n    } else if (n == 2) {\n        return true;\n    } else {\n        var i = 2;\n        while (i < n) {\n            if (n % i == 0) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n}",
        "grade-15": {
            "execution": 1
        },
        "16": "for(var i = 2; i < n; i++){\n        if(n % i == 0){\n            return false;\n        }\n    }\n    return true;\n}",
        "grade-16": {
            "execution": 0
        },
        "18": "if (n < 2) {\n\t\treturn false;\n\t} else if (n === 2) {\n\t\treturn true;\n\t} else {\n\t\tfor (var i = 2; i < n; i++) {\n\t\t\tif (n % i === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}",
        "grade-18": {
            "execution": 1
        },
        "19": "if (n<2){\n    return false;\n  }\n  for (var i=2; i<n; i++){\n    if (n%i==0){\n      return false;\n    }\n  }\n  return true;\n}",
        "grade-19": {
            "execution": 1
        }
    },
    {
        "intent": "//In this problem, you will implement a function that takes two lists of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 a list of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\nfunction exchange(lst1, lst2){\n",
        "snippet": [
            "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n"
        ],
        "simplified": "In this problem, you will implement a function that takes two lists of numbers, and determines whether it is possible to perform an exchange of elements between them to make lst1 a list of only even numbers. There is no limit on the number of exchanged elements between lst1 and lst2. If it is possible to exchange elements between the lst1 and lst2 to make all the elements of lst1 to be even, return \"YES\". Otherwise, return \"NO\".",
        "task_id": "110",
        "3": "let exchange = true;\n    for(let i = 0; i < lst1.length; i++){\n        if(lst1[i] % 2 !== 0){\n            exchange = false;\n            break;\n        }\n    }\n    return exchange ? \"YES\" : \"NO\";\n}\nexchange([1, 2, 3, 4], [1, 2, 3, 4]);",
        "grade-3": {
            "execution": 0
        },
        "0": "let count1 = 0;\n    let count2 = 0;\n    for(let i = 0; i < lst1.length; i++){\n        if(lst1[i] % 2 == 0){\n            count1++;\n        }\n    }\n    for(let i = 0; i < lst2.length; i++){\n        if(lst2[i] % 2 != 0){\n            count2++;\n        }\n    }\n    if(count1 == count2){\n        return \"YES\";\n    }else{\n        return \"NO\";\n    }\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "const lst1Odds = lst1.filter(n => n % 2 !== 0)\n  const lst2Evens = lst2.filter(n => n % 2 === 0)\n  const count = lst1Odds.length\n  return lst2Evens.length >= count ? \"YES\" : \"NO\"\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 !== 0) {\n      for (let j = 0; j < lst2.length; j++) {\n        if (lst2[j] % 2 === 0) {\n          let temp = lst1[i];\n          lst1[i] = lst2[j];\n          lst2[j] = temp;\n          break;\n        }\n      }\n    }\n  }\n  return lst1.every(el => el % 2 === 0) ? \"YES\" : \"NO\";\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "var lst3 = lst1.concat(lst2);\n  for(var i = 0; i < lst3.length; i++){\n    if(lst3[i] % 2 == 0){\n      lst3.splice(i, 1);\n      i--;\n    }\n  }\n  var sum = 0;\n  for(var i = 0; i < lst3.length; i++){\n    sum += lst3[i];\n  }\n  if(sum % 2 == 0){\n    return \"YES\";\n  }\n  else{\n    return \"NO\";\n  }\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "//Write your code here.\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "for (var i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      return \"YES\";\n    }\n    for (var j = 0; j < lst2.length; j++) {\n      if (lst2[j] % 2 === 0) {\n        lst1[i] = lst2[j];\n        return \"YES\";\n      }\n    }\n  }\n  return \"NO\";\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "for(var i = 0; i < lst1.length; i++){\n        if(lst1[i] % 2 != 0){\n            for(var j = 0; j < lst2.length; j++){\n                if(lst2[j] % 2 == 0){\n                    var temp = lst1[i];\n                    lst1[i] = lst2[j];\n                    lst2[j] = temp;\n                    j = lst2.length;\n                }\n            }\n        }\n    }\n    if(lst1.every(function(e){ return e % 2 == 0;})){\n        return \"YES\";\n    }\n    return \"NO\";\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "let result = lst1.filter( x => x % 2 === 0);\n  if (result.length === lst1.length) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "let odds = [];\n  lst1.map(item => {\n    if (item % 2 !== 0) {\n      odds.push(item);\n    }\n  });\n  let evens = [];\n  lst2.map(item => {\n    if (item % 2 === 0) {\n      evens.push(item);\n    }\n  });\n  return (odds.length === evens.length) ? \"YES\" : \"NO\";\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "let count = 0;\n  let lst1Even = [];\n  let lst2Even = [];\n  let lst1Odd = [];\n  let lst2Odd = [];\n  for(let i = 0; i < lst1.length; i++){\n    if(lst1[i] % 2 === 0){\n      lst1Even.push(lst1[i]);\n    } else {\n      lst1Odd.push(lst1[i]);\n    }\n  }\n  for(let i = 0; i < lst2.length; i++){\n    if(lst2[i] % 2 === 0){\n      lst2Even.push(lst2[i]);\n    } else {\n      lst2Odd.push(lst2[i]);\n    }\n  }\n  if(lst1Even.length + lst2Odd.length === lst1.length){\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 !== 0) {\n      for (let j = 0; j < lst2.length; j++) {\n        if (lst2[j] % 2 === 0) {\n          let t = lst1[i];\n          lst1[i] = lst2[j];\n          lst2[j] = t;\n          break;\n        }\n      }\n    }\n  }\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 !== 0) {\n      return \"NO\";\n    }\n  }\n  return \"YES\";\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "if(lst1.some(x => x % 2)) {\n    return 'NO';\n  } else {\n    return 'YES';\n  }\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "let evens = []\n  let odds = []\n  for(let i = 0; i < lst1.length; i++){\n    if(lst1[i] % 2 === 0){\n      evens.push(lst1[i])\n    }\n    else{\n      odds.push(lst1[i])\n    }\n  }\n  for(let i = 0; i < lst2.length; i++){\n    if(lst2[i] % 2 === 0){\n      evens.push(lst2[i])\n    }\n    else{\n      odds.push(lst2[i])\n    }\n  }\n  if(evens.length === lst1.length){\n    return \"YES\"\n  }\n  else{\n    return \"NO\"\n  }\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "let sum1 = 0, sum2 = 0;\n    for(let i = 0; i < lst1.length; i++){\n        sum1 += lst1[i];\n    }\n    for(let i = 0; i < lst2.length; i++){\n        sum2 += lst2[i];\n    }\n    if(sum1 % 2 === 0 || sum2 % 2 === 0){\n        return \"YES\";\n    }\n    return \"NO\";\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "let isOdd = n => n % 2 !== 0;\n    let cnt1 = lst1.filter(isOdd).length;\n    let cnt2 = lst2.filter(isOdd).length;\n    return cnt1 === cnt2 ? \"YES\" : \"NO\";\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "let lst1odds = lst1.filter(x => x % 2 !== 0);\n  let lst2evens = lst2.filter(x => x % 2 === 0);\n  if (lst1odds.length === lst2evens.length) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "for (var i = 0; i < lst1.length; i++) {\n    for (var j = 0; j < lst2.length; j++) {\n      if (lst1[i] % 2 !== 0 && lst2[j] % 2 === 0) {\n        var tmp = lst1[i];\n        lst1[i] = lst2[j];\n        lst2[j] = tmp;\n      }\n    }\n  }\n  for (var k = 0; k < lst1.length; k++) {\n    if (lst1[k] % 2 !== 0) {\n      return \"NO\";\n    }\n  }\n  return \"YES\";\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 !== 0) {\n      for (let j = 0; j < lst2.length; j++) {\n        if (lst2[j] % 2 === 0) {\n          let tmp = lst1[i];\n          lst1[i] = lst2[j];\n          lst2[j] = tmp;\n          break;\n        }\n      }\n    }\n  }\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 !== 0) {\n      return \"NO\";\n    }\n  }\n  return \"YES\";\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "return lst1.some(n => n % 2 == 0) ? \"YES\" : \"NO\";\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n",
        "snippet": [
            "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n"
        ],
        "simplified": "brackets is a string of \"(\" and \")\". return True if every opening bracket has a corresponding closing bracket.",
        "task_id": "61",
        "3": "var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if (brackets[i] == \"(\"){\n            count++;\n        } else if (brackets[i] == \")\"){\n            count--;\n        }\n        if (count < 0){\n            return false;\n        }\n    }\n    return (count == 0);\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "var x = 0;\n\tvar y = 0;\n\tvar i = 0;\n\tvar z = 0;\n\tfor (i = 0; i < brackets.length; i++){\n\t\tif (brackets[i] == \"(\"){\n\t\t\tx++;\n\t\t}\n\t\telse if (brackets[i] == \")\"){\n\t\t\ty++;\n\t\t}\n\t\tif (x < y){\n\t\t\tz++;\n\t\t}\n\t}\n\tif (x == y && z == 0){\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "let stack = [];\n    for (let bracket of brackets){\n        if (bracket === \"(\"){\n            stack.push(bracket);\n        } else if (bracket === \")\"){\n            if (stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "//Step 1: How to do parentheses matching problem?\n    //Step 2: How to handle errors?\n    //Step 3: How to use stack?\n    //Step 4: How to find the current parentheses is a left parentheses or right parentheses?\n    //Step 5: How to compare the left parentheses with right parentheses?\n    //Step 6: How to judge the parentheses is error or not?\n    //Step 7: How to output the result?\n    //Step 8: How to write the test case?\n    if(brackets.length == 0) {\n        return false;\n    }\n    var bracket_list = brackets.split(\"\");\n    var stack = [];\n    for(var i = 0; i < bracket_list.length; i++) {\n        if(bracket_list[i] == \"(\") {\n            stack.push(bracket_list[i]);\n        } else if(bracket_list[i] == \")\") {\n            if(stack.length == 0) {\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    if(stack.length == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "var stack = [];\n    for (var i = 0; i < brackets.length; i++){\n        if (brackets[i] == '('){\n            stack.push(brackets[i]);\n        }\n        else if (brackets[i] == ')'){\n            if (stack.length == 0){\n                return false;\n            }\n            else{\n                stack.pop();\n            }\n        }\n    }\n    if (stack.length == 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "const stack = [];\n    for (let i = 0; i < brackets.length; i++){\n        if (brackets[i] === '('){\n            stack.push(brackets[i]);\n        }\n        else if (brackets[i] === ')'){\n            if (stack.length === 0){\n                return false;\n            }\n            else{\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "var openP = 0\n    var closeP = 0\n    for (var i = 0; i < brackets.length; i++) {\n        if (brackets[i] == \"(\") {\n            openP++\n        } else if (brackets[i] == \")\") {\n            closeP++\n        }\n    }\n    if (openP == closeP) {\n        return true\n    } else {\n        return false\n    }\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "var leftCount = 0;\n\tvar rightCount = 0;\n\tfor (var i = 0; i < brackets.length; i++) {\n\t\tif (brackets[i] === \"(\") {\n\t\t\tleftCount++;\n\t\t} else if (brackets[i] === \")\") {\n\t\t\trightCount++;\n\t\t}\n\t}\n\tif (leftCount === rightCount) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "}",
        "grade-10": {
            "execution": 0
        },
        "17": "var left = 0;\n\tvar right = 0;\n\t\n\tfor (var i = 0; i < brackets.length; i++){\n\t\tif (brackets[i] == '('){\n\t\t\tleft += 1;\n\t\t}\n\t\telse if (brackets[i] == ')'){\n\t\t\tright += 1;\n\t\t}\n\t\tif (right > left){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn (left == right);\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "var left_para = 0;\n\tvar right_para = 0;\n\tfor (var i = 0; i < brackets.length; i++){\n\t\tif (brackets[i] == '('){\n\t\t\tleft_para++;\n\t\t}\n\t\telse if (brackets[i] == ')'){\n\t\t\tright_para++;\n\t\t}\n\t\tif (right_para > left_para){\n\t\t\treturn false;\n\t\t}\n\t}\n\tif (left_para != right_para){\n\t\treturn false;\n\t}\n\treturn true;\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "var opened_brackets = 0;\n  for (var i = 0; i < brackets.length; i++) {\n    if (brackets[i] == \"(\") {\n      opened_brackets++;\n    } else if (brackets[i] == \")\") {\n      opened_brackets--;\n    }\n    if (opened_brackets < 0) {\n      return false;\n    }\n  }\n  return opened_brackets == 0;\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "var i, l, open_bracket = 0;\n\tfor(i = 0, l = brackets.length; i < l; i++){\n\t\tif(brackets[i] == \"(\"){\n\t\t\topen_bracket++;\n\t\t}else if(brackets[i] == \")\"){\n\t\t\topen_bracket--;\n\t\t}\n\t\tif(open_bracket < 0){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn open_bracket == 0;\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "var stack = [];\n\tvar error = false;\n\tfor(var i = 0; i < brackets.length; i++){\n\t\tif(brackets[i] === \"(\"){\n\t\t\tstack.push(brackets[i]);\n\t\t}else if(brackets[i] === \")\"){\n\t\t\tif(stack.length > 0){\n\t\t\t\tstack.pop();\n\t\t\t}else{\n\t\t\t\terror = true;\n\t\t\t}\n\t\t}\n\t}\n\treturn error || stack.length > 0? false: true;\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "var num_left = 0;\n    var num_right = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if (brackets[i] == \"(\"){\n            num_left++;\n        }\n        else{\n            num_right++;\n        }\n    }\n    if (num_left == num_right){\n        return true;\n    }\n    else{\n        return false;\n    }\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "var bracket_counter = 0;\n    for (i = 0; i < brackets.length; i++){\n        if (brackets[i] == \"(\"){\n            bracket_counter += 1;\n        }\n        else if (brackets[i] == \")\"){\n            bracket_counter -= 1;\n        }\n        if (bracket_counter < 0){\n            return false;\n        }\n    }\n    if (bracket_counter == 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "let opening = 0\n    let closing = 0\n    for (let i = 0; i < brackets.length; i++){\n        if (brackets[i] == \"(\"){\n            opening += 1\n        } else if (brackets[i] == \")\"){\n            closing += 1\n        }\n    }\n    if (opening == closing){\n        return true\n    } else {\n        return false\n    }\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "var error = 0;\n\tfor (var i = 0; i < brackets.length; i++) {\n\t\tif (brackets[i] == \"(\") {\n\t\t\terror += 1;\n\t\t}\n\t\telse if (brackets[i] == \")\") {\n\t\t\terror -= 1;\n\t\t}\n\t\tif (error < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif (error == 0) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "if (brackets.length % 2 !== 0){\n        return false;\n    }\n    const opening_brackets = '([{';\n    const closing_brackets = ')]}';\n    const matching_brackets = {\n        ')': '(',\n        ']': '[',\n        '}': '{'\n    };\n    const stack = [];\n    for (let i = 0; i < brackets.length; i++){\n        if (opening_brackets.includes(brackets[i])){\n            stack.push(brackets[i]);\n        }\n        else if (closing_brackets.includes(brackets[i])){\n            if (stack.length === 0){\n                return false;\n            }\n            else if (stack[stack.length - 1] === matching_brackets[brackets[i]]){\n                stack.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "const stack = new Stack();\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] === \"(\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i] === \")\") {\n            stack.pop();\n        }\n    }\n    return stack.size() === 0;\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nfunction tri(n){\n",
        "snippet": [
            "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n"
        ],
        "simplified": "Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in the last couple centuries. However, what people don't know is Tribonacci sequence. Tribonacci sequence is defined by the recurrence: tri(1) = 3 tri(n) = 1 + n / 2, if n is even. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.",
        "task_id": "130",
        "3": "let trib = [1, 3, 2];\n    if (n === 0) return [1];\n    if (n === 1) return [1, 3];\n    if (n === 2) return trib;\n    for (let i = 3; i <= n; i++) {\n        if (i % 2 === 0) {\n            trib.push(1 + i / 2);\n        } else {\n            trib.push(trib[i - 1] + trib[i - 2] + trib[i + 1]);\n        }\n    }\n    return trib;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "if(n === 1) return [1, 3, 2];\n    if(n === 2) return [1, 3, 2, 8];\n    let result = [1, 3, 2, 8];\n    let i = 4;\n    while(result.length <= n + 1){\n        if(i % 2 === 0){\n            result.push(1 + i / 2);\n        }else{\n            result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n        }\n        i++;\n    }\n    return result;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "var arr = [1, 3, 2];\n    if (n === 0) {\n        return [1];\n    } else if (n === 1) {\n        return [1, 3];\n    } else if (n === 2) {\n        return [1, 3, 2];\n    } else {\n        for (var i = 0; i < n - 2; i++) {\n            var lastThree = arr[arr.length - 3] + arr[arr.length - 2] + arr[arr.length - 1];\n            arr.push(lastThree);\n        }\n    }\n    return arr;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "let result = [1, 3, 2, 8];\n  let x = 4;\n  while (x <= n) {\n    result.push(result[x-1] + result[x-2] + result[x-3]);\n    x++;\n  }\n  return result;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "if(n === 1) return [1, 3];\n    if(n === 2) return [1, 3, 2];\n    const arr = [1, 3, 2];\n    let i = 3;\n    while(i <= n){\n        if(i % 2 === 0){\n            arr.push(1 + i / 2);\n        }else{\n            arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n        }\n        i++;\n    }\n    return arr;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "let arr = [1, 3, 2];\n    for (let i = 0; i < n; i++) {\n        arr.push(isEven(i) ? (1 + i / 2) : arr[i - 1] + arr[i - 2] + arr[i + 1]);\n    }\n    return arr;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "if(n == 0) {\n\t\treturn [];\n\t} else if(n == 1) {\n\t\treturn [1];\n\t} else if(n == 2) {\n\t\treturn [1, 3];\n\t}\n\tvar evenOrOdd = n % 2 == 0 ? \"even\" : \"odd\";\n\tvar remainder = n % 3;\n\tvar array = [1, 3, 2];\n\tif(evenOrOdd == \"even\") {\n\t\tfor(var i = 1; i <= remainder; i++) {\n\t\t\tvar lastNumber = array[array.length - 1];\n\t\t\tvar secondToLastNumber = array[array.length - 2];\n\t\t\tvar thirdToLastNumber = array[array.length - 3];\n\t\t\tarray.push(lastNumber + secondToLastNumber + thirdToLastNumber);\n\t\t}\n\t} else {\n\t\tfor(var i = 1; i <= remainder; i++) {\n\t\t\tvar lastNumber = array[array.length - 1];\n\t\t\tvar secondToLastNumber = array[array.length - 2];\n\t\t\tvar thirdToLastNumber = array[array.length - 3];\n\t\t\tarray.push(lastNumber + secondToLastNumber + thirdToLastNumber);\n\t\t}\n\t\tarray.push(1 + n / 2);\n\t}\n\treturn array;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "const tribonacciSequence = [1, 3, 2];\n  if (n === 0) {\n    return [];\n  }\n  if (n === 1) {\n    return [1];\n  }\n  if (n === 2) {\n    return [1, 3];\n  }\n  if (n === 3) {\n    return tribonacciSequence;\n  }\n  let counter = 3;\n  while (counter < n) {\n    tribonacciSequence.push(tribonacciSequence[counter] + tribonacciSequence[counter - 1] + tribonacciSequence[counter - 2]);\n    counter++;\n  }\n  return tribonacciSequence;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "let result = [];\n  for (let i = 0; i <= n; i++) {\n    if (i === 0) {\n      result.push(1);\n    } else if (i === 1) {\n      result.push(3);\n    } else if (i === 2) {\n      result.push(2);\n    } else if (i === 3) {\n      result.push(8);\n    } else if (i % 2 === 0) {\n      result.push(1 + i / 2);\n    } else {\n      result.push(result[i - 1] + result[i - 2] + result[i - 3]);\n    }\n  }\n  return result;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "let array = [];\n    for(let i = 0; i <= n; i++){\n        if(i === 0){\n            array.push(1);\n        } else if(i === 1){\n            array.push(3);\n        } else if(i === 2){\n            array.push(2);\n        } else if(i % 2 === 0){\n            array.push(1 + (i / 2));\n        } else if(i % 2 !== 0){\n            array.push(array[i - 1] + array[i - 2] + array[i + 1]);\n        }\n    }\n    return array;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "let arr = [1, 3, 2];\n  if (n === 0) return [];\n  if (n === 1) return [1];\n  if (n === 2) return [1, 3];\n  for (let i = 3; i <= n; i++) {\n    arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3]);\n  }\n  return arr;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "let output = [];\n    for(let i = 0; i <= n; i++){\n        if(i === 0){\n            output.push(1);\n        }else if(i === 1){\n            output.push(3);\n        }else if(i === 2){\n            output.push(2);\n        }else if(i % 2 === 0){\n            output.push(1 + i / 2);\n        }else{\n            output.push(output[i - 1] + output[i - 2] + output[i + 1]);\n        }\n    }\n    return output;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "let arr = [1, 3, 2];\n  while (arr.length < n + 1) {\n    let num = arr[arr.length - 1] + arr[arr.length - 2] + arr[arr.length - 3];\n    arr.push(num);\n  }\n  return arr;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "var tribonacciSequence = [1, 3, 2];\n  var currentNumber = 3;\n  while (currentNumber < n) {\n    currentNumber++;\n    var nextNumber = tribonacciSequence[currentNumber - 2] + tribonacciSequence[currentNumber - 3] + tribonacciSequence[currentNumber - 4];\n    tribonacciSequence.push(nextNumber);\n  }\n  return tribonacciSequence;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "if(n <= 1) return [1];\n    let arr = [1, 1, 1];\n    while(arr.length <= n) {\n        let last = arr[arr.length - 1];\n        let last2 = arr[arr.length - 2];\n        let last3 = arr[arr.length - 3];\n        arr.push(last + last2 + last3);\n    }\n    return arr;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "let arr = [1, 3, 2];\n  let i = 3;\n  while (i < n + 1) {\n    if (i % 2 === 0) {\n      arr.push(arr[i - 2] + arr[i - 1] + arr[i + 1]);\n    } else {\n      arr.push(1 + (i / 2));\n    }\n    i += 1;\n  }\n  return arr;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "var tri = [1, 3, 2];\n\tfor (var i = 3; i <= n; i++) {\n\t\tif (i % 2 == 0) {\n\t\t\ttri.push(1 + i / 2);\n\t\t} else {\n\t\t\ttri.push(tri[i - 1] + tri[i - 2] + tri[i + 1]);\n\t\t}\n\t}\n\treturn tri;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "var arr = [1, 3, 2];\n  for (var i = 0; i < n - 2; i++) {\n    arr.push(arr[i] + arr[i + 1] + arr[i + 2]);\n  }\n  return arr;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "if (n === 0) return [];\n  if (n === 1) return [1];\n  if (n === 2) return [1,3];\n  if (n === 3) return [1,3,2,8];\n  var arr = [1,3,2,8];\n  for (var i = 4; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(1 + i / 2);\n    } else {\n      arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n    }\n  }\n  return arr;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "if(n == 1){\n        return 3;\n    }else if(n % 2 == 0){\n        return 1 + (n / 2);\n    }else{\n        return tri(n - 1) + tri(n - 2) + tri(n + 1);\n    }\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n// 3\nfunction strlen(string){\n",
        "snippet": [
            "  return string.length;\n}\n\n"
        ],
        "simplified": "Return length of given string",
        "task_id": "23",
        "0": "// ...\n}",
        "grade-0": {
            "execution": 0
        },
        "1": "var length = 0;\n  while(string[length] != undefined){\n    length += 1;\n  }\n  return length;\n}",
        "grade-1": {
            "execution": 1
        },
        "2": "if(string === \"\"){\n        return 0;\n    }else{\n        return 1 + strlen(string.substring(1));\n    }\n}",
        "grade-2": {
            "execution": 1
        },
        "3": "var length = 0;\n    var i = 0;\n    while(string[i] != undefined){\n        length++;\n        i++;\n    }\n    return length;\n}",
        "grade-3": {
            "execution": 1
        },
        "4": "return string.length;\n}",
        "grade-4": {
            "execution": 1
        },
        "5": "return _.reduce(\n        string,\n        function(count, character){\n            return count + 1;\n        },\n        0\n    );\n}",
        "grade-5": {
            "execution": 0
        },
        "6": "var i=0;\n    while(string[i]!==undefined){\n        i++;\n    }\n    return i;\n}",
        "grade-6": {
            "execution": 1
        },
        "7": "var i = 0;\n    while(string[i] !== undefined){\n        i++;\n    }\n    return i;\n}",
        "grade-7": {
            "execution": 1
        },
        "8": "var count = 0;\n\tfor(var i = 0; i < string.length; i++){\n\t\tcount++;\n\t}\n\treturn count;\n}",
        "grade-8": {
            "execution": 1
        },
        "9": "var strLength = 0;\n    for(var i = 0; i < string.length; i++){\n        strLength += 1;\n    }\n    return strLength;\n}",
        "grade-9": {
            "execution": 1
        },
        "10": "var total = 0;\n    if(string.length>0){\n        total = 1 + strlen(string.substring(1));\n    }\n    return total;\n}",
        "grade-10": {
            "execution": 1
        },
        "11": "return string.length;\n}",
        "grade-11": {
            "execution": 1
        },
        "13": "var stringLength = 0;\n  while(string[stringLength] != undefined){\n    stringLength++;\n  }\n  return stringLength;\n}",
        "grade-13": {
            "execution": 1
        },
        "14": "var length = 0;\n    for(var i = 0; i < string.length; i++){\n        length += 1;\n    }\n    return length;\n}",
        "grade-14": {
            "execution": 1
        },
        "15": "//base case\n    if(string.length === 0){\n        return 0;\n    }\n    //recursive case\n    return 1 + strlen(string.slice(1));\n}",
        "grade-15": {
            "execution": 1
        },
        "16": "if(string === ''){\n        return 0;\n    }\n    else{\n        return 1 + strlen(string.slice(1));\n    }\n}",
        "grade-16": {
            "execution": 1
        },
        "17": "var count = 0;\n  for (var i = 0; i < string.length; i++) {\n    count++;\n  }\n  return count;\n}",
        "grade-17": {
            "execution": 1
        },
        "18": "return(string.length);\n}",
        "grade-18": {
            "execution": 1
        },
        "19": "var i = 0\n    while(string[i] !== undefined){\n      i++\n    }\n    return i\n}",
        "grade-19": {
            "execution": 1
        }
    },
    {
        "intent": "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt(s){\n",
        "snippet": [
            "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n"
        ],
        "simplified": "Create a function encrypt that takes a string as an argument and returns a string encrypted with the alphabet being rotated. The alphabet should be rotated in a manner such that the letters shift down by two multiplied to two places.",
        "task_id": "89",
        "3": "var x = s.split('');\n\tvar y = x.map(function(c){\n\t\tvar code = c.charCodeAt();\n\t\tif (code == 122){\n\t\t\treturn 'a';\n\t\t} else if (code == 121){\n\t\t\treturn 'b';\n\t\t} else {\n\t\t\treturn String.fromCharCode(code + 2);\n\t\t}\n\t});\n\treturn y.join('');\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "var encrypted = '';\n    var alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    for(var i = 0; i < s.length; i++){\n        var index = (alphabet.indexOf(s[i]) + 2) % alphabet.length;\n        encrypted += alphabet[index];\n    }\n    return encrypted;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "let outputString = '';\n    let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    let inputArr = s.split('');\n    let lastIndex = alphabet.length - 1;\n    inputArr.forEach(function(inputChar){\n        let inputCharIndex = alphabet.indexOf(inputChar);\n        if(inputCharIndex === lastIndex){\n            let shiftedIndex = inputCharIndex - lastIndex;\n            outputString += alphabet[shiftedIndex];\n        }else if(inputCharIndex === lastIndex - 1){\n            let shiftedIndex = inputCharIndex - lastIndex + 1;\n            outputString += alphabet[shiftedIndex];\n        }else{\n            let shiftedIndex = inputCharIndex + 2;\n            outputString += alphabet[shiftedIndex];\n        }\n    });\n    return outputString;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "var arr = [];\n    for(var i = 0; i < s.length; i++){\n        arr.push(s.charCodeAt(i) + 1);\n    }\n    return String.fromCharCode(...arr);\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "var s2 = '';\n    for(var i = 0; i < s.length; i++){\n        if(s[i] === 'x'){\n            s2 += 'a';\n        }\n        else if(s[i] === 'y'){\n            s2 += 'b';\n        }\n        else if(s[i] === 'z'){\n            s2 += 'c';\n        }\n        else{\n            s2 += String.fromCharCode(s.charCodeAt(i) + 2);\n        }\n    }\n    return s2;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "var originalAlphabet = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"];\n    var encryptedAlphabet = [];\n    var encryptedString = \"\";\n    for(var i = originalAlphabet.length - 1; i >= 0; i--){\n        encryptedAlphabet.push(originalAlphabet[i]);\n    }\n    for(var j = 0; j < s.length; j++){\n        for(var k = 0; k < originalAlphabet.length; k++){\n            if(s[j] === originalAlphabet[k]){\n                encryptedString += encryptedAlphabet[k];\n            }\n        }\n    }\n    return encryptedString;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "var alphabet = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"];\n\tvar result = \"\"\n\tfor(var i = 0; i < s.length; i++){\n\t\tvar index = alphabet.indexOf(s[i]);\n\t\tresult += alphabet[index+2];\n\t}\n\treturn result;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "//we'll use an array to store our transformed letters\n  let arr = [];\n  //we'll use a string to store the transformed letters\n  let str = '';\n  //we'll loop through every letter in the string\n  for(let i = 0; i < s.length; i++){\n    //we'll assign the character code of the letter to a variable\n    let char = s.charCodeAt(i);\n    //if that letter is not the letter 'z' we can just increment the character code by 2 and push it to the array\n    if(char !== 122){\n      arr.push(String.fromCharCode(char + 2));\n    }\n    //if that letter is the letter 'z' we want to push the character code of the letter 'b' to the array instead\n    else if(char === 122){\n      arr.push(String.fromCharCode(98));\n    }\n    //if that letter is the letter 'y' we want to push the character code of the letter 'a' to the array instead\n    else if(char === 121){\n      arr.push(String.fromCharCode(97));\n    }\n  }\n  //now we loop through the length of the array and assign each letter to the string\n  for(let i = 0; i < arr.length; i++){\n    str += arr[i];\n  }\n  //now we return the string\n  return str;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "//var s= \"hi\";\n\tvar newstr = '';\n\tvar charcode = 0;\n\t//console.log(s);\n\tfor(var i=0; i<s.length; i++){\n\t\tcharcode = s.charCodeAt(i);\n\t\t//console.log(charcode);\n\t\tif(charcode == 122){\n\t\t\tnewstr += String.fromCharCode(97);\n\t\t}\n\t\telse if(charcode == 90){\n\t\t\tnewstr += String.fromCharCode(65);\n\t\t}\n\t\telse{\n\t\t\tnewstr += String.fromCharCode(charcode+2);\n\t\t}\n\t}\n\treturn newstr;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "var alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    var newString = \"\";\n    for(var i = 0; i < s.length; i++){\n        var index = alphabet.indexOf(s[i]);\n        if(index + 6 < 26){\n            newString += alphabet[index + 6];\n        }\n        else{\n            newString += alphabet[index + 6 - 26];\n        }\n    }\n    return newString;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "let alphabet = {\n        1: 'a', 2: 'b', 3: 'c', 4: 'd', 5: 'e', 6: 'f', 7: 'g', 8: 'h', 9: 'i', 10: 'j', 11: 'k', 12: 'l', 13: 'm', 14: 'n', 15: 'o', 16: 'p', 17: 'q', 18: 'r', 19: 's', 20: 't', 21: 'u', 22: 'v', 23: 'w', 24: 'x', 25: 'y', 26: 'z'\n    }\n    let encryptObj = {\n        a: 3, b: 4, c: 5, d: 6, e: 7, f: 8, g: 9, h: 10, i: 11, j: 12, k: 13, l: 14, m: 15, n: 16, o: 17, p: 18, q: 19, r: 20, s: 21, t: 22, u: 23, v: 24, w: 25, x: 26, y: 1, z: 2\n    }\n    let sArr = s.split('');\n    let encryptArr = [];\n    sArr.forEach(function(letter){\n        let value = encryptObj[letter];\n        encryptArr.push(alphabet[value]);\n    })\n    return encryptArr.join('');\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "let str = \"\";\n    const alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    for(let i = 0; i < s.length; i++){\n        let index = alphabet.indexOf(s[i]);\n        str += alphabet[(index+2) % alphabet.length];\n    }\n    return str;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "var alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    var lower = s.toLowerCase();\n    var length = lower.length;\n    var newString = '';\n    for(var i = 0; i < length; i++){\n        var index = alphabet.indexOf(lower[i]);\n        if(index < 0){\n            newString += lower[i];\n        }\n        else{\n            var newIndex = index + 2 * 2;\n            if(newIndex > 25){\n                newIndex = newIndex - 26;\n            }\n            newString += alphabet[newIndex];\n        }\n    }\n    return newString;\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "var eString = \"\";\n  for(var i = 0; i < s.length; i++){\n    eString += String.fromCharCode(s.charCodeAt(i) + 2 * 2);\n  }\n  return eString;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "}",
        "grade-13": {
            "execution": 0
        },
        "9": "var newString = '';\n    for(var i = 0; i < s.length; i++){\n        var newLetter = s.charCodeAt(i) + 4;\n        if(newLetter > 122){\n            newLetter = (newLetter - 122) + 96;\n        }\n        newString += String.fromCharCode(newLetter);\n    }\n    return newString;\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "let a = 'abcdefghijklmnopqrstuvwxyz'\n  let result = ''\n  for(let i = 0; i < s.length; i++){\n    result += a[(a.indexOf(s[i]) + (2 * 2)) % 26]\n  }\n  return result\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "var alpha = \"abcdefghijklmnopqrstuvwxyz\";\n  var beta = \"cdefghijklmnopqrstuvwxyzab\";\n  var str1 = \"\";\n  for(var i = 0; i < s.length; i++){\n      str1 += beta[alpha.indexOf(s[i])];\n  }\n  return str1;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "var result = \"\";\n    for(var i = 0; i < s.length; i++){\n        var letter = s[i];\n        result += rotate(letter, 2);\n    }\n    return result;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "let plainAlphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'];\n  let encryptedAlphabet = ['c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','a','b'];\n  //console.log(plainAlphabet.indexOf('a'));\n  //console.log(encryptedAlphabet[plainAlphabet.indexOf('a')]);\n  let encryptedString = '';\n  for(let i = 0; i < s.length; i++){\n    encryptedString += encryptedAlphabet[plainAlphabet.indexOf(s[i])];\n  }\n  return encryptedString;\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n",
        "snippet": [
            "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n"
        ],
        "simplified": "Add more test cases.",
        "task_id": "64",
        "3": "vowels=0;\n\tfor(var i=0;i<s.length;i++){\n\t\tif(s[i]=='a'||s[i]=='e'||s[i]=='i'||s[i]=='o'||s[i]=='u'||(s[i]=='y'&&i==s.length-1)){\n\t\t\tvowels+=1;\n\t\t}\n\t}\n\treturn vowels;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "var res = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u'){\n            res += 1;\n        }\n        if(s[i] === 'y' && i === s.length - 1){\n            res += 1;\n        }\n    }\n    return res;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "return s.replace(/[^aeiou]/gi, '').length;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "if(s[s.length-1]==\"y\"){\n        return s.match(/[aeiou]/gi).length;\n    }else{\n        return s.match(/[aeiou]/gi).length - 1;\n    }\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var count = 0;\n    for (var i = 0; i < s.length; i++){\n        if (vowels.indexOf(s[i].toLowerCase()) !== -1){\n            count++;\n        }\n    }\n    return count;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "var count = 0;\n    var string = s.toLowerCase();\n    for(var i = 0; i < string.length; i++){\n        if(string[i] == \"a\" || string[i] == \"e\" || string[i] == \"i\" || string[i] == \"o\" || string[i] == \"u\"){\n            count++;\n        }\n    }\n    if(string[string.length - 1] == \"y\"){\n        count++;\n    }\n    return count;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "var counter = 0;\n  for(var i = 0; i < s.length; i++){\n    if(s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || s[i] === 'y'){\n      counter += 1;\n    }\n  }\n  return counter;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "var re = /[aeiou]/gi;\n    return (s.replace(re, \"\").length);\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "var c = 0;\n    var l = s.length;\n    for(var i = 0; i < l; i++){\n        if(s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || s[i] === 'y'){\n            c++;\n        }\n    }\n    return c;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "var str = s.toLowerCase();\n   var sum = 0;\n   var vowel = [\"a\",\"e\",\"i\",\"o\",\"u\"];\n   for(var i = 0; i < str.length; i++){\n      if(vowel.indexOf(str[i]) !== -1){\n         sum += 1;\n      }\n   }\n   return sum;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "var vowels = 'aeiou';\n    var count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(vowels.indexOf(s[i]) !== -1){\n            count++;\n        }\n    }\n    return count;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "s = s.toLowerCase();\n    var count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u'){\n            count += 1;\n        }\n    }\n    if(s[s.length - 1] === 'y'){\n        count += 1;\n    }\n    return count;\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "var n = 0;\n\tfor(var i = 0; i < s.length; i++){\n\t\tvar c = s.charAt(i);\n\t\tif(c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u' || c === 'y'){\n\t\t\tn++;\n\t\t}\n\t}\n\tif(s.charAt(s.length - 1) !== 'y'){\n\t\treturn n;\n\t}\n\treturn n - 1;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "let word = s.toLowerCase();\n    let count = 0;\n    for(let i = 0; i < word.length; i++){\n        if(word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u'){\n            count++;\n        }\n    }\n    return count;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "// Your code here\n\tvar vowels = new Set(['a', 'e', 'i', 'o', 'u']);\n\tvar count = 0;\n\tfor (var i = 0; i < s.length; i++) {\n\t\tif (vowels.has(s[i])) {\n\t\t\tcount++;\n\t\t}\n\t}\n\tif (s[s.length - 1] == 'y') {\n\t\tcount++;\n\t}\n\treturn count;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "var count = 0;\n  var vowels = 'aeiouyAEIOUY';\n  for(var i = 0; i < s.length; i++){\n    if(vowels.indexOf(s[i]) != -1){\n      count++;\n    }\n  }\n  return count;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "var num=0;\n  var vowels=[\"a\",\"e\",\"i\",\"o\",\"u\"];\n  for(var i=0;i<s.length;i++){\n    if(vowels.indexOf(s[i].toLowerCase())!=-1){\n      num++;\n    }\n  }\n  return num;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "}",
        "grade-14": {
            "execution": 0
        },
        "5": "var v = ['a', 'e', 'i', 'o', 'u'];\n    var count = 0;\n    var last_letter = s[s.length - 1];\n    if (v.indexOf(last_letter) != -1) {\n        count += 1;\n    }\n    s = s.toLowerCase();\n    for (var i = 0; i < s.length; i++) {\n        if (v.indexOf(s[i]) != -1) {\n            count += 1;\n        }\n    }\n    return count;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "var count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y'){\n            count++;\n        }\n    }\n    return count;\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nfunction sum_product(numbers){\n",
        "snippet": [
            "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n"
        ],
        "simplified": "For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list. Empty sum should be equal to 0 and empty product should be equal to 1.",
        "task_id": "8",
        "0": "var sum=0,product=1;\n    for(var i=0;i<numbers.length;i++){\n        sum+=numbers[i];\n        product*=numbers[i];\n    }\n    return {sum:sum,product:product};\n}",
        "grade-0": {
            "execution": 0
        },
        "1": "let sum = 0;\n    let product = 1;\n    for(let i=0; i<numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}",
        "grade-1": {
            "execution": 1
        },
        "2": "let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}",
        "grade-2": {
            "execution": 1
        },
        "3": "var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}",
        "grade-3": {
            "execution": 1
        },
        "4": "let sum = 0\n    let product = 1\n    for(let number of numbers){\n        sum += number\n        product *= number\n    }\n    return (sum, product)\n}",
        "grade-4": {
            "execution": 0
        },
        "5": "var sum = 0;\n    var product = 1;\n    if(numbers.length == 0){\n        return [sum, product];\n    }\n    for(var i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}",
        "grade-5": {
            "execution": 1
        },
        "6": "var sum = 0, product = 1;\n    for(i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}",
        "grade-6": {
            "execution": 1
        },
        "7": "//\n    let sum=0;\n    let product=1;\n    numbers.forEach(function(value){\n        sum += value;\n        product *= value;\n    });\n    return [sum, product];\n}",
        "grade-7": {
            "execution": 1
        },
        "8": "let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}",
        "grade-8": {
            "execution": 1
        },
        "9": "var totalSum = 0;\n    var totalProduct = 1;\n    for(var i = 0; i < numbers.length; i++){\n        totalSum += numbers[i];\n        totalProduct *= numbers[i];\n    }\n    return [totalSum, totalProduct];\n}",
        "grade-9": {
            "execution": 1
        },
        "10": "// YOUR CODE HERE\n}",
        "grade-10": {
            "execution": 0
        },
        "12": "if(numbers.length === 0){\n        return [0, 1];\n    } else{\n        let sum = 0;\n        let product = 1;\n        for(let i = 0; i < numbers.length; i++){\n            sum += numbers[i];\n            product *= numbers[i];\n        }\n        return [sum, product];\n    }\n}",
        "grade-12": {
            "execution": 1
        },
        "13": "let sum = numbers.reduce((a, b) => a + b, 0);\n    let product = numbers.reduce((a, b) => a * b, 1);\n    return [sum, product];\n}",
        "grade-13": {
            "execution": 1
        },
        "14": "//You can write your code here!\n    return (numbers.reduce((sum, val) => sum + val, 0), numbers.reduce((sum, val) => sum * val, 1));\n}",
        "grade-14": {
            "execution": 0
        },
        "15": "var sum = 0;\n  var product = 1;\n  if (numbers.length == 0){\n    return [sum, product];\n  } else {\n    for (var i = 0; i < numbers.length; i++){\n      sum += numbers[i];\n      product *= numbers[i];\n    }\n    return [sum, product];\n  }\n}",
        "grade-15": {
            "execution": 1
        },
        "17": "var sum=0;\n    var product=1;\n    if(numbers.length==0){\n        console.log(\"empty sum is : \"+sum);\n        console.log(\"empty product is : \"+product);\n    }\n    else{\n        for(var i=0;i<numbers.length;i++){\n            sum=sum+numbers[i];\n            product=product*numbers[i];\n        }\n        console.log(\"sum is : \"+sum);\n        console.log(\"product is : \"+product);\n    }\n}\nsum_product([1,2,3,4]);\nsum_product([]);",
        "grade-17": {
            "execution": 0
        },
        "18": "var sum = 0;\n  var product = 1;\n  for(var i = 0; i < numbers.length; i++){\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  var sum_product = [sum, product];\n  return sum_product;\n}",
        "grade-18": {
            "execution": 1
        },
        "19": "let sum = 0;\n\tlet product = 1;\n\tif(numbers.length == 0){\n\t\treturn [sum, product];\n\t}\n\tfor(let i = 0; i < numbers.length; i++){\n\t\tsum += numbers[i];\n\t\tproduct *= numbers[i];\n\t}\n\treturn [sum, product];\n}",
        "grade-19": {
            "execution": 1
        }
    },
    {
        "intent": "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n",
        "snippet": [
            "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n"
        ],
        "simplified": "Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.",
        "task_id": "36",
        "3": "var count = 0;\n    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n            var temp = i;\n            while(temp > 0){\n                var digit = temp % 10;\n                if(digit == 7){\n                    count++;\n                }\n                temp = Math.floor(temp / 10);\n            }\n        }\n    }\n    return count;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "let count = 0;\n    for(let i = 1; i < n; i++){\n        if((i % 11 === 0 || i % 13 === 0) && i.toString().includes('7')){\n            count++;\n        }\n    }\n    return count;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "var count = 0;\n  for(var i = 0; i < n; i++){\n    if(i % 11 === 0 || i % 13 === 0){\n      var number = i.toString();\n      for(var j = 0; j < number.length; j++){\n        if(number[j] === \"7\"){\n          count += 1;\n        }\n      }\n    }\n  }\n  return count;\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "var count = 0;\n\t\n\tfor(var i = 0; i < n; i++) {\n\t\tvar str = i.toString();\n\t\tif(str.indexOf('7') !== -1) {\n\t\t\tif(i % 11 === 0 || i % 13 === 0) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "var i, s;\n\tfor(i = 0, s = 0; i < n; i++){\n\t\tif(i % 11 == 0 || i % 13 == 0){\n\t\t\ts += i.toString().split(\"\").reduce(function(x, y){\n\t\t\t\treturn (y == 7) ? x + 1 : x;\n\t\t\t}, 0);\n\t\t}\n\t}\n\treturn s;\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "var count = 0;\n\tfor(var i = 0; i < n; i++){\n\t\tif(i % 11 == 0 || i % 13 == 0){\n\t\t\tcount += i.toString().split(\"\").filter(function(a){return a == 7}).length;\n\t\t}\n\t}\n\treturn count;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "var count = 0;\n    for(i=1; i<n; i++){\n        if(i%11==0 || i%13==0){\n            if(i.toString().includes('7'))\n                count += 1;\n        }\n    }\n    return count;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "let result = 0;\n\tfor(let i = 0; i < n; i++){\n\t\tlet currentDigit = i;\n\t\tif(currentDigit % 11 === 0 || currentDigit % 13 === 0){\n\t\t\tif(currentDigit === 7){\n\t\t\t\tresult++;\n\t\t\t}\n\t\t\twhile(currentDigit > 0){\n\t\t\t\tif(currentDigit % 10 === 7){\n\t\t\t\t\tresult++;\n\t\t\t\t}\n\t\t\t\tcurrentDigit = (currentDigit - currentDigit % 10) / 10;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "var count = 0;\n  for(var i = 1; i < n; i++){\n    if((i % 11 == 0 || i % 13 == 0) && i.toString().includes(\"7\")){\n      count += 1;\n    }\n  }\n  return count;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "var count = 0;\n  for(var i = 1; i < n; i++){\n    if((i % 11 === 0 || i % 13 === 0) && i.toString().indexOf('7') != -1){\n      count++;\n    }\n  }\n  return count;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "function check_divis(n){\n\t\treturn n % 11 == 0 || n % 13 == 0;\n\t}\n\tfunction check_7(n){\n\t\tvar number = n.toString();\n\t\tvar count = 0;\n\t\tfor(var i = 0; i < number.length; i++){\n\t\t\tif(number[i] == '7'){\n\t\t\t\tcount += 1;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\tvar sum = 0;\n\tfor(var i = 0; i < n; i++){\n\t\tif(check_divis(i)){\n\t\t\tsum += check_7(i);\n\t\t}\n\t}\n\treturn sum;\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "if(n < 7) return 0;\n    let sum = 0;\n    for(let i = 7; i < n; i += 11){\n        if(i % 13 === 0) {\n            sum += 1;\n            continue;\n        }\n        let s = i.toString();\n        for(let j = 0; j < s.length; j++){\n            if(s[j] === '7') sum += 1;\n        }\n    }\n    return sum;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "let count = 0;\n    for(let i = 0; i < n; i++){\n        if((i % 11 == 0 || i % 13 == 0) && i.toString().indexOf('7') > -1){\n            count++;\n        }\n    }\n    return count;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "let sum = 0;\n    for(let i = 0; i < n; i++){\n        if((i % 11 == 0 || i % 13 == 0) && (i % 7 != 0)){\n            sum += Math.trunc(i / 10);\n        }\n    }\n    return sum;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "var count = 0;\n\tfor(var i = 0; i < n; i++){\n\t\tif(i % 11 == 0 || i % 13 == 0){\n\t\t\tvar num = i.toString();\n\t\t\tfor(var j = 0; j < num.length; j++){\n\t\t\t\tif(num[j] == 7){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "var count = 0;\n    var i = 0;\n    while(i<n){\n        if(i%11 == 0 && i%13 == 0){\n            var tempString = i.toString();\n            for(var j = 0; j<tempString.length; j++){\n                if(tempString[j] == 7){\n                    count++;\n                }\n            }\n        }\n        i++;\n    }\n    return count;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "var count = 0;\n    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n            var num = i.toString();\n            for(var j = 0; j < num.length; j++){\n                if(num[j] == '7'){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "var count = 0;\n    var sum = 0;\n    for(var i = 0; i < n; i++){\n        if((i % 11 == 0 || i % 13 == 0) && i.toString().search(\"7\") != -1){\n            count++;\n            sum += i;\n        }\n    }\n    return count;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "var count = 0;\n    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n            var str = String(i);\n            for(var j = 0; j < str.length; j++){\n                if(str[j] == '7'){\n                    count += 1;\n                }\n            }\n        }\n    }\n    return count;\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "// good luck!\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010', '110')\n// '100'\nfunction string_xor(a, b){\n",
        "snippet": [
            "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n"
        ],
        "simplified": "Input are two strings a and b consisting only of 1s and 0s. Perform binary XOR on these inputs and return result also as a string.",
        "task_id": "11",
        "3": "return (a.split('').map(function(item, index){\n    return Number(item) !== Number(b[index]) ? '1' : '0';\n  })).join('');\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "var str1 = a.toString();\n    var str2 = b.toString();\n    var result = '';\n    for (var i = 0; i < str1.length; i++) {\n        result += (parseInt(str1[i]) ^ parseInt(str2[i])).toString();\n    }\n    return result;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "// init variables\n\tvar i = a.length;\n\tvar result = '';\n\t// walk thru input strings\n\twhile(i--){\n\t\t// XOR logic\n\t\tresult = (a[i] != b[i]) ? '1' + result : '0' + result;\n\t}\n\treturn result;\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "let result = \"\";\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "var result = '';\n    for(var i = 0; i < a.length; i++){\n        if(a[i] == b[i]){\n            result += '0';\n        }else{\n            result += '1';\n        }\n    }\n    return result;\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "var result = '';\n  a = a.split('');\n  b = b.split('');\n  for(var i = 0; i < a.length; i++){\n    if (a[i] === b[i]){\n      result += '0';\n    } else {\n      result += '1';\n    }\n  }\n  return result;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "var res = \"\";\n    for(var i = 0; i < a.length; i++){\n        if(a[i] === b[i]){\n            res += '0';\n        }else{\n            res += '1';\n        }\n    }\n    return res;\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "var result = \"\";\n    for(var i = 0; i < a.length; i++){\n        if(a[i] === b[i]){\n            result += '0';\n        }else{\n            result += '1';\n        }\n    }\n    return result;\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "a = a.split('');\n    b = b.split('');\n    var output = [];\n    for(var i = 0; i < a.length; i++){\n        if(a[i] === b[i]){\n            output.push('0');\n        } else{\n            output.push('1');\n        }\n    }\n    return output.join('');\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "var res = '';\n  for (var i = 0; i < a.length; i++) {\n    if (a[i] == b[i]) {\n      res += '0';\n    } else {\n      res += '1';\n    }\n  }\n  return res;\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "}",
        "grade-12": {
            "execution": 0
        },
        "6": "return (BigInt(a, 2) ^ BigInt(b, 2)).toString(2)\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "// let res = '';\n  // for (let i = 0; i < a.length; i++){\n  //   if (a[i] === b[i]){\n  //     res += '0';\n  //   } else {\n  //     res += '1';\n  //   }\n  // }\n  // return res;\n  return a.split('').map((letter, i) => letter == b[i] ? '0' : '1').join('');\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "let res = \"\";\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === b[i]) {\n      res += '0';\n    } else {\n      res += '1';\n    }\n  }\n  return res;\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "if(a.length != b.length){\n    return \"Not the same length\";\n  }\n  var newString = '';\n  for(var i = 0; i < a.length; i++){\n    if(a[i] == b[i]){\n      newString += '0';\n    }\n    else{\n      newString += '1';\n    }\n  }\n  return newString;\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "// XOR\n    var result = '',\n        i = a.length,\n        j = b.length;\n\n    for(var l=0; l<i || l<j; l++){\n        if(a[l] === b[l]){\n            result += '0';\n        } else {\n            result += '1';\n        }\n    }\n\n    return result;\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "var key = 0;\n    var string = \"\";\n    for(var i = 0; i < a.length; i++){\n        key = key + parseInt(a[i]) + parseInt(b[i]);\n        if(key == 0 || key == 1){\n            string = string + key;\n            key = 0;\n        }\n        else{\n            string = string + \"0\";\n            key = 1;\n        }\n    }\n    return string;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "var result = \"\";\n  for(var i = 0; i < a.length; i++){\n    result += (a[i] === b[i]) ? \"0\" : \"1\";\n  }\n  return result;\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "var xored = '';\n  for (var i = 0; i < a.length; i++) {\n    if (a[i] == b[i]) {\n      xored += '0';\n    } else {\n      xored += '1';\n    }\n  }\n  return xored;\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "var xor = [];\n    if(a.length === b.length){\n        for(var i = 0; i < a.length; i++){\n            var aBool = parseInt(a[i]);\n            var bBool = parseInt(b[i]);\n            xor.push(aBool ^ bBool);\n        }\n    }\n    return xor.join('');\n}",
        "grade-19": {
            "execution": 1
        }
    },
    {
        "intent": "//Return list of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n",
        "snippet": [
            "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n"
        ],
        "simplified": "Return list of prime factors of given integer in the order from smallest to largest. Each of the factors should be listed number of times corresponding to how many times it appeares in factorization. Input number should be equal to the product of all factors",
        "task_id": "25",
        "0": "var n = n;\n    var factors = [];\n    for (var i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            factors.push(i);\n            n = n / i;\n            i--;\n        }\n    }\n    return factors;\n}",
        "grade-0": {
            "execution": 1
        },
        "1": "const factors = []\n  for (var i = 2; i <= n; i++) {\n    while (n % i === 0) {\n      factors.push(i)\n      n /= i\n    }\n  }\n  return factors\n}\nfactorize(56)",
        "grade-1": {
            "execution": 1
        },
        "2": "var result = [];\n    var d = 2;\n    while (n > 1) {\n        while (n % d == 0) {\n            result.push(d);\n            n /= d;\n        }\n        d = d + 1;\n        if (d*d > n) {\n            if (n > 1) result.push(n);\n            break;\n        }\n    }\n    return result;\n}",
        "grade-2": {
            "execution": 1
        },
        "3": "var factorization = [];\n  var primeFactors = [];\n  var remaining = n;\n  for (var i = 2; i <= n; i++) {\n    while (remaining % i === 0) {\n      primeFactors.push(i);\n      remaining = remaining / i;\n    }\n  }\n  for (var j = 0; j < primeFactors.length; j++) {\n    factorization.push(primeFactors[j]);\n  }\n  return factorization;\n}",
        "grade-3": {
            "execution": 1
        },
        "4": "var l = [];\n    if (n <= 1) {\n        return l;\n    }\n    var i = 2;\n    while (n > 1) {\n        if (n % i == 0) {\n            l.push(i);\n            n = n / i;\n        } else {\n            i = i + 1;\n        }\n    }\n    return l;\n}",
        "grade-4": {
            "execution": 1
        },
        "5": "let result = [];\n    for (let i = 2; i <= n; i++) {\n        while (n % i === 0) {\n            result.push(i);\n            n /= i;\n        }\n    }\n    return result;\n}",
        "grade-5": {
            "execution": 1
        },
        "6": "var factors = [];\n    for (var i = 2; i <= n; i++) {\n        while ((n % i) === 0) {\n            factors.push(i);\n            n /= i;\n        }\n    }\n    return factors;\n}",
        "grade-6": {
            "execution": 1
        },
        "7": "var factors=[];\n    for(var i=2; i<=n; i++){\n        if(n%i==0){\n            factors.push(i);\n            n=n/i;\n            i=1;\n        }\n    }\n    return factors;\n}",
        "grade-7": {
            "execution": 1
        },
        "8": "let primeFactors = [];\n    let i = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            primeFactors.push(i);\n            n = n / i;\n        } else {\n            i++;\n        }\n    }\n    return primeFactors;\n}",
        "grade-8": {
            "execution": 1
        },
        "9": "var result = [];\n    if (n % 2 == 0) {\n        for (var i = 0; i < n / 2; i++) {\n            result.push(2);\n        }\n    }\n    for (var i = 3; i < n; i+=2) {\n        if (n % i == 0) {\n            for (var j = 0; j < n / i; j++) {\n                result.push(i);\n            }\n        }\n    }\n    return result;\n}",
        "grade-9": {
            "execution": 0
        },
        "10": "var factors = [],\n        divisor = 2;\n\n    while(n>2){\n        if(n % divisor == 0){\n            factors.push(divisor);\n            n= n/ divisor;\n        }\n        else{\n            divisor++;\n        }\n    }\n    return factors;\n}",
        "grade-10": {
            "execution": 0
        },
        "11": "var factors = [], i;\n    for (i = 2; i <= n; i++) {\n        while ((n % i) === 0) {\n            factors.push(i);\n            n /= i;\n        }\n    }\n    return factors;\n}",
        "grade-11": {
            "execution": 1
        },
        "12": "let result = [];\n    let i = 2;\n    while (n > 1){\n        if (n % i === 0){\n            result.push(i);\n            n = n / i;\n        }\n        else{\n            i = i + 1;\n        }\n    }\n    return result;\n}",
        "grade-12": {
            "execution": 1
        },
        "13": "var res = [];\n    while(n % 2 === 0){\n        res.push(2);\n        n /= 2;\n    }\n    for(var i = 3; i <= Math.sqrt(n); i += 2){\n        while(n % i === 0){\n            res.push(i);\n            n /= i;\n        }\n    }\n    if(n > 2){\n        res.push(n);\n    }\n    return res;\n}",
        "grade-13": {
            "execution": 1
        },
        "15": "var factors = [];\n    var divisor = 2;\n    while (n > 2){\n        if (n % divisor == 0){\n            factors.push(divisor);\n            n = n / divisor;\n        } else {\n            divisor++;\n        }\n    }\n    return factors;\n}",
        "grade-15": {
            "execution": 0
        },
        "16": "for (var arr = [], i = 2; i <= n; i++) {\n    while ((n % i) === 0) {\n      arr.push(i);\n      n /= i;\n    }\n  }\n  return arr;\n}",
        "grade-16": {
            "execution": 1
        },
        "17": "var res = [];\n    var factor = 2;\n    while (n != 1){\n        if (n % factor == 0){\n            res.push(factor);\n            n = n / factor;\n        }\n        else{\n            factor++;\n        }\n    }\n    return res;\n}",
        "grade-17": {
            "execution": 1
        },
        "18": "var factors = [];\n    for (var i = 2; i <= n; i++) {\n        while ((n % i) === 0) {\n            factors.push(i);\n            n /= i;\n        }\n    }\n    return factors;\n}",
        "grade-18": {
            "execution": 1
        },
        "19": "let result = [];\n    for (let i = 2; i <= n; i++) {\n        while (n % i === 0) {\n            result.push(i);\n            n /= i;\n        }\n    }\n    return result;\n}",
        "grade-19": {
            "execution": 1
        }
    },
    {
        "intent": "//You're given a list of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return True. Otherwise it should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1, 2, -4, 5])\n// True\nfunction below_zero(operations){\n",
        "snippet": [
            "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n"
        ],
        "simplified": "You're given a list of deposit and withdrawal operations on a bank account that starts with zero balance. Your task is to detect if at any point the balance of account fallls below zero, and at that point function should return True. Otherwise it should return False.",
        "task_id": "3",
        "3": "let balance = 0;\n    for(let i=0; i<operations.length; i++){\n        if(operations[i] > 0){\n            balance += operations[i];\n        }\n        else if(operations[i] < 0){\n            balance -= Math.abs(operations[i]);\n        }\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "var balance = 0;\n    for(var i = 0; i < operations.length; i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "var balance = 0;\n  for (var i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "var bal = 0;\n    for(var i = 0; i < operations.length; i++){\n        bal += operations[i];\n        if(bal < 0){\n            return true;\n        }\n    }\n    return false;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "}",
        "grade-16": {
            "execution": 0
        },
        "2": "return operations.some(op => op < 0);\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "var balance = 0;\n    for(i=0; i<operations.length; i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "let sum = 0;\n    for(let i = 0; i < operations.length; i++){\n        sum += operations[i];\n        if(sum < 0){\n            return true;\n        }\n    }\n    return false;\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "let balance = 0;\n    for(let i = 0; i < operations.length; i++){\n        if(operations[i] > 0){\n            balance += operations[i];\n        }\n        else if(operations[i] < 0){\n            balance -= operations[i];\n        }\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "let total = 0;\n    for(let i=0; i<operations.length; i++){\n        if(operations[i] < 0){\n            total -= operations[i];\n        } else {\n            total += operations[i];\n        }\n        if(total < 0){\n            return true;\n        }\n    }\n    return false;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "var balance = 0;\n    for(var x = 0; x < operations.length; x++){\n        if(operations[x] > 0){\n            balance += operations[x];\n        }else{\n            balance -= operations[x];\n        }\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "for(let i = 0; i < operations.length; i++){\n        if(operations[i] < 0){\n            return true;\n        }\n    }\n    return false;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "var below = false;\n\tvar balance = 0;\n\tfor(i=0; i<operations.length; i++){\n\t\tbalance = balance + operations[i];\n\t\tif(balance < 0){\n\t\t\tbelow = true;\n\t\t}\n\t}\n\treturn below;\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "for (var i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "let balance = 0;\n    for(let i = 0; i < operations.length; i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "var sum = 0;\n  for (var i = 0; i < operations.length; i++) {\n    sum += operations[i];\n    if (sum < 0) {\n      return true;\n    }\n  }\n  return false;\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "var balance = 0;\n    for(var i = 0; i < operations.length; i++){\n        balance += operations[i];\n        if(balance < 0){\n            return true;\n        }\n    }\n    return false;\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "let balance = 0;\n  for (let i = 0; i < operations.length; i++){\n    if (operations[i] < 0){\n      balance = balance + operations[i];\n      if (balance < 0){\n        return true;\n      }\n    }\n    else {\n      balance = balance + operations[i];\n    }\n  }\n  return false;\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "var account_balance = 0;\n    for (var i = 0; i < operations.length; i++){\n        account_balance += operations[i];\n        if (account_balance < 0){\n            return true;\n        }\n    }\n    return false;\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "let result = 0;\n\tfor(let i = 0; i < operations.length; i++){\n\t\tresult += operations[i];\n\t\tif(result < 0){\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
        "grade-19": {
            "execution": 1
        }
    },
    {
        "intent": "//Write a function that returns True if the object q will fly, and False otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// will_it_fly([1, 2], 5) \u279e False \n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// will_it_fly([3, 2, 3], 1) \u279e False\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// will_it_fly([3, 2, 3], 9) \u279e True\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// will_it_fly([3], 5) \u279e True\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n",
        "snippet": [
            "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n"
        ],
        "simplified": "Write a function that returns True if the object q will fly, and False otherwise. The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.",
        "task_id": "72",
        "3": "let sum = 0;\n    let b = true;\n    for(let i = 0; i < q.length; i++){\n        sum += q[i];\n        if(q[i] !== q[q.length - 1 - i]){\n            b = false;\n        }\n    }\n    return b && sum <= w;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "const sum = q.reduce((total, num) => total + num);\n    const isBalanced = q.join(\"\") === q.reverse().join(\"\");\n    return isBalanced && sum <= w ? true : false;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "if(q.length === 1) return true;\n    if(q.length === 2 && q[0] === q[1]) return true;\n    if(q.length % 2 === 0) return false;\n    if(sum(q) > w) return false;\n    let i = 0;\n    let j = q.length - 1;\n    while(i < j){\n        if(q[i] !== q[j]) return false;\n        i++;\n        j--;\n    }\n    return true;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "if(isPalindrome(q) && getSum(q)<=w){\n        return true;\n    }\n    return false;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "if(q.length % 2 === 0) {\n    var first = q.slice(0, q.length/2);\n    var second = q.slice(q.length/2);\n    second.reverse();\n    if(first.toString() !== second.toString()) {\n      return false;\n    }\n  }\n  var sum = 0;\n  for(var i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  if(sum <= w) {\n    return true;\n  } else {\n    return false;\n  }\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "if(q.length == 1){\n        return true;\n    }\n    if(sum(q) > w){\n        return false;\n    }\n    else{\n        return checkPalindrome(q);\n    }\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "let sum = 0;\n    for(let i = 0; i < q.length; i++){\n        sum = sum + q[i];\n    }\n    let arr = q.toString().split(',').join('');\n    let rev = q.toString().split(',').reverse().join('');\n    if(sum <= w && arr === rev){\n        return true;\n    }\n    else{\n        return false;\n    }\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "let sum = 0;\n    let first = q[0];\n    let second = q[q.length-1];\n    for(let i = 0; i < q.length; i++){\n        sum += q[i];\n    }\n    return sum <= w && first === second;\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "const sumOf = q.reduce((a,b) => a + b, 0);\n    if(w < sumOf){\n        return false;\n    }else if(q.join('') == q.reverse().join('')){\n        return true;\n    }else{\n        return false;\n    }\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "let sum = 0;\n    let balanced = true;\n    for(let i = 0; i < q.length; i++){\n        sum += q[i];\n        if(q[i] !== q[q.length -1 -i]){\n            balanced = false;\n        }\n    }\n    if(sum <= w && balanced){\n        return true;\n    }\n    return false;\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "var sum = 0;\n    var n = q.length;\n    for(var i = 0; i < n; i++){\n        sum += q[i];\n    }\n    if(sum <= w){\n        var c = 0;\n        for(var i = 0; i < n; i++){\n            if(q[i] == q[n-i-1]){\n                c++;\n            }\n        }\n        if(c == n){\n            return true;\n        }\n        else{\n            return false;\n        }\n    }\n    else{\n        return false;\n    }\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "}",
        "grade-6": {
            "execution": 0
        },
        "18": "if (q.length === 1){\n        return true;\n    }\n    let sum = 0;\n    for (let i = 0; i < q.length; i++){\n        sum += q[i];\n    }\n    if (sum > w){\n        return false;\n    }\n    let reverse = q.reverse();\n    let newSum = 0;\n    for (let i = 0; i < reverse.length; i++){\n        newSum += reverse[i];\n    }\n    if (newSum === sum){\n        return true;\n    }\n    return false;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "for(let i = 0; i<q.length/2; i++){\n        if(q[i] !== q[q.length-1-i]){\n            return false;\n        }\n    }\n    if(q.reduce((a,b)=>a+b)<=w){\n        return true;\n    }else{\n        return false;\n    }\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "let sum = 0;\n    for(let i = 0; i < q.length; i++){\n        sum += q[i];\n    }\n    let qStr = \"\";\n    let rStr = \"\";\n    for(let i = 0; i < q.length; i++){\n        qStr += q[i].toString();\n        rStr += q[q.length - i - 1].toString();\n    }\n    if(sum <= w && qStr === rStr){\n        return true;\n    }\n    return false;\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "let palindrome = isPalindrome(q);\n    let tot = 0;\n    for(i=0; i<q.length; i++){\n        tot += q[i];\n    }\n    if(palindrome === true && tot <= w){\n        return true;\n    }\n    else{\n        return false;\n    }\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "let palindrome = q.slice(0, Math.floor(q.length/2)).join(\"\") === q.slice(Math.ceil(q.length/2)).reverse().join(\"\");\n\tlet totalWeight = q.reduce((acc, curr) => acc + curr);\n\treturn palindrome && totalWeight <= w;\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "let sum = q.reduce((a,b) => a + b, 0);\n    return sum <= w && q.join(\"\") === q.reverse().join(\"\");\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "if(q.length === 1){\n        return true;\n    }\n    let sum = 0;\n    let i = 0;\n    while(i < q.length){\n        sum += q[i];\n        i++;\n    }\n    if(sum <= w){\n        return true;\n    }else{\n        return false;\n    }\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "if(q.length > 1){\n        if(q[0] == q[q.length-1]){\n            q.pop();\n            q.shift();\n            will_it_fly(q, w);\n        }\n        else {\n            return false;\n        }\n    }\n    else {\n        if(w >= q[0]){\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") => 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nfunction digitSum(s){\n",
        "snippet": [
            "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n"
        ],
        "simplified": "Task Write a function that takes a string as input and returns the sum of the upper characters only' ASCII codes.",
        "task_id": "66",
        "3": "let total = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      total += s.charCodeAt(i);\n    }\n  }\n  return total;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "return [...s].reduce((acc,v)=>acc+v.charCodeAt(),0)\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "if (s === '') return 0;\n  s = s.toUpperCase();\n  return s.split('').reduce((acc, curr) => {\n    const num = curr.charCodeAt(0);\n    if (num >= 65 && num <= 90) {\n      return acc + num;\n    }\n    return acc;\n  }, 0);\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "// code code code\n    let res = [];\n    let sum = 0;\n    let code = [];\n    res = s.split('');\n    for(let i = 0; i < res.length; i++){\n        if(res[i] === res[i].toUpperCase()){\n            code.push(res[i].charCodeAt());\n        }\n    }\n    for(let i = 0; i < code.length; i++){\n        sum += code[i];\n    }\n    return sum;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase()) {\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "if(s == \"\"){\n        return 0;\n    }\n    var sum = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] == s[i].toUpperCase()){\n            sum += s.charCodeAt(i);\n        }\n    }\n    return sum;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "return s.split('').reduce((sum, ch) => sum + (ch >= 'A' && ch <= 'Z' ? ch.charCodeAt(0) : 0), 0);\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "let upperArray = s.split('').filter(element => element.toUpperCase() === element)\n    let upperCodes = upperArray.map(element => element.charCodeAt(0))\n    let sum = upperCodes.reduce((acc,element) => acc + element)\n    return sum\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "let alpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let sum = 0;\n  for(let i = 0; i < s.length; i++){\n    if(alpha.includes(s[i])) sum += s.charCodeAt(i);\n  }\n  return sum;\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "return s.split('').reduce((acc,val)=>{\n    if(val.charCodeAt(0)>=65 && val.charCodeAt(0)<=90){\n      acc += val.charCodeAt(0)\n    }\n    return acc\n  },0)\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "var sum = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s.charCodeAt(i) >= 65 && s.charCodeAt(i) <= 90){\n            sum += s.charCodeAt(i);\n        }\n    }\n    return sum;\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "return s.split('').reduce((acc, char) => char.toUpperCase() === char ? acc + char.charCodeAt(0) : acc, 0)\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "var sum = 0;\n  for (var i = 0; i < s.length; i++) {\n    if (s[i] == s[i].toUpperCase()) {\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "const str = s.toUpperCase().split('');\n  let sum = 0;\n  for (let i = 0; i < str.length; i++) {\n    sum += str[i].charCodeAt();\n  }\n  return sum;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "var sum = 0;\n  for (var i = 0; i < s.length; i++) {\n    if(s[i] == s[i].toUpperCase()){\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "let sum = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            sum += s.charCodeAt(i);\n        }\n    }\n    return sum;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "//your code here.\n}\nmodule.exports = digitSum",
        "grade-4": {
            "execution": 0
        },
        "14": "let array = s.split('');\n    let sum = 0;\n    for(let i = 0; i < array.length; i++){\n        if(array[i] === array[i].toUpperCase()){\n            sum += array[i].charCodeAt(0);\n        }\n    }\n    return sum;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "let result = 0;\n    for (let i = 0; i < s.length; i++) {\n        let asc = s.charCodeAt(i);\n        if (asc > 64 && asc < 91) {\n            result += asc;\n        }\n    }\n    return result;\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "let sum = 0;\n    s.split('').map(x => x.charCodeAt(0) >= 65 && x.charCodeAt(0) <= 90 ? sum += x.charCodeAt(0) : 0)\n    return sum;\n}",
        "grade-19": {
            "execution": 1
        }
    },
    {
        "intent": "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n",
        "snippet": [
            "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n"
        ],
        "simplified": "You are given an array arr of integers and you need to return sum of magnitudes of integers multiplied by product of all signs of each number in the array, represented by 1, -1 or 0. Note: return None for empty arr.",
        "task_id": "128",
        "3": "if(arr.length == 0){\n        return null;\n    }\n    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        sum += Math.abs(arr[i]);\n        product *= Math.sign(arr[i]);\n    }\n    return sum * product;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "if (arr.length === 0) {\n    return null;\n  } else {\n    return arr.reduce(function(a, b) {\n      return (a * Math.abs(b) * Math.sign(b)) + b;\n    },0);\n  }\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "if (arr.length == 0) {\n        return null;\n    } else {\n        let sum = 0;\n        let sign = 1;\n        for (let i = 0; i < arr.length; i++) {\n            sum += Math.abs(arr[i]);\n            sign *= Math.sign(arr[i]);\n        }\n        return sum * sign;\n    }\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "}",
        "grade-7": {
            "execution": 0
        },
        "16": "let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++){\n        if (arr[i] !== 0){\n            if (arr[i] > 0){\n                sum += arr[i];\n                prod *= 1;\n            } else {\n                sum += Math.abs(arr[i]);\n                prod *= -1;\n            }\n        }\n    }\n    return sum * prod;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "var val = 0\n    for(var i = 0; i < arr.length; i++){\n        val += Math.abs(arr[i])\n    }\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] == 0){\n            return 0\n        }\n        if(arr[i] < 0){\n            val = val * -1\n        }\n    }\n    return val\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "if (arr.length === 0) {\n    return null;\n  }\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    const val = arr[i];\n    sum += Math.abs(val);\n    product *= Math.sign(val);\n  }\n  return sum * product;\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "var sum = 0;\n  var sign = 1;\n  if (arr.length == 0){\n    return null;\n  }\n  for (var i = 0; i < arr.length; i++){\n    if (arr[i] > 0){\n      sum += arr[i];\n    } else if (arr[i] < 0){\n      sum += Math.abs(arr[i]);\n      sign *= -1;\n    } else {\n      sign = 0;\n    }\n  }\n  return sum * sign;\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "let sum = 0;\n  let prod = 1;\n  if(arr.length !== 0){\n    for(let i = 0; i < arr.length; i++){\n      if(arr[i] > 0){\n        sum += arr[i];\n        prod *= 1;\n      }\n      else if(arr[i] < 0){\n        sum += Math.abs(arr[i]);\n        prod *= -1;\n      }\n      else{\n        sum += 0;\n        prod *= 0;\n      }\n    }\n    return sum * prod;\n  }\n  else{\n    return null;\n  }\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "if (arr.length === 0) {\n    return null;\n  }\n  var sign = 1;\n  var sum = 0;\n  for (var i = 0; i < arr.length; i++) {\n    var absVal = Math.abs(arr[i]);\n    if (arr[i] < 0) {\n      sign *= -1;\n    } else if (arr[i] === 0) {\n      sign = 0;\n    }\n    sum += absVal;\n  }\n  return sum * sign;\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "let magnitudes = [];\n    let signs = [];\n    for(let n of arr){\n        magnitudes.push(Math.abs(n));\n        if(n === 0){\n            signs.push(0);\n        } else if(n < 0){\n            signs.push(-1);\n        } else {\n            signs.push(1);\n        }\n    }\n    if(magnitudes.length === 0){\n        return null;\n    }\n    const sum = magnitudes.reduce((a, b) => a + b);\n    const product = signs.reduce((a, b) => a * b);\n    return sum * product;\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "if(arr.length < 1){\n        return null;\n    }\n    var sum = arr.reduce(function(a, b){\n        return Math.abs(a) + Math.abs(b);\n    });\n    var signs = 1;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n            signs *= -1;\n        }\n        else if(arr[i] == 0){\n            signs = 0;\n        }\n    }\n    return sum * signs;\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "return arr.length ? eval(arr.map(v => v ? (Math.abs(v) + v)/v : 0).join('*')) : null;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "var result = 1;\n    var sum=0;\n    if(arr.length == 0){\n        return null;\n    }\n    else{\n        for(var i=0; i<arr.length; i++){\n            if(arr[i]>0){\n                sum += arr[i];\n                result *= 1;\n            }\n            else if(arr[i]<0){\n                sum += arr[i];\n                result *= -1;\n            }\n            else if(arr[i]==0){\n                result *= 0;\n            }\n        }\n        return result*sum;\n    }\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "if(arr.length === 0){\n        return null;\n    }\n    var product = 1;\n    var sum = 0;\n    for(var i = 0; i < arr.length; i++){\n        var currentElement = arr[i];\n        if(currentElement > 0){\n            sum += currentElement;\n            product *= 1;\n        }else if(currentElement < 0){\n            sum += currentElement * -1;\n            product *= -1;\n        }else{\n            product *= 0;\n        }\n    }\n    return sum * product;\n}\nvar result = prod_signs([1, 2, 2, -4]);",
        "grade-13": {
            "execution": 1
        },
        "9": "if(arr.length == 0){\n        return null;\n    }\n    else {\n        let sum = 0;\n        let prod = 1;\n        for (let i = 0; i < arr.length; i++) {\n            if (arr[i] > 0) {\n                sum += arr[i];\n                prod *= 1;\n            }\n            else if (arr[i] < 0) {\n                sum += Math.abs(arr[i]);\n                prod *= -1;\n            }\n            else {\n                prod *= 0;\n            }\n        }\n        return sum * prod;\n    }\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "if (arr.length === 0) {\n    return;\n  }\n\n  var signs = 1;\n  var sum = 0;\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      signs *= -1;\n    } else if (arr[i] > 0) {\n      signs *= 1;\n    } else {\n      signs *= 0;\n    }\n    sum += Math.abs(arr[i]);\n  }\n  return sum * signs;\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "let prod = 1;\n    let sum = 0;\n    if (arr.length > 0){\n        for (let i = 0; i < arr.length; i++){\n            if (arr[i] > 0){\n                prod *= 1;\n                sum += arr[i];\n            } else if (arr[i] < 0){\n                prod *= -1;\n                sum += Math.abs(arr[i]);\n            } else if (arr[i] == 0){\n                prod *= 0;\n            }\n        }\n        return prod * sum;\n    } else {\n        return null;\n    }\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "if(arr.length==0){\n        return null;\n    }\n    var sum=0;\n    var prod=1;\n    for(var i=0;i<arr.length;i++){\n        if(arr[i]<0){\n            prod*=-1;\n        }else if(arr[i]>0){\n            prod*=1;\n        }else{\n            prod*=0;\n        }\n        sum+=Math.abs(arr[i]);\n    }\n    return sum*prod;\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "let prod = 1;\n    let sum = 0;\n    for(let i = 0; i < arr.length; i++){\n        sum += Math.abs(arr[i]);\n        if(arr[i] !== 0){\n            prod *= arr[i]/Math.abs(arr[i]);\n        }\n    }\n    return arr.length === 0 ? null : sum * prod;\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n",
        "snippet": [
            "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n"
        ],
        "simplified": "Given a positive integer n, you have to make a pile of n levels of stones. The first level has n stones. The number of stones in the next level is: - the next odd number if n is odd. - the next even number if n is even. Return the number of stones in each level in a list, where element at index i represents the number of stones in the level (i+1).",
        "task_id": "100",
        "3": "var level = 1;\n    var stones = [];\n    stones.push(n);\n    while(level<n){\n        if(stones[level-1]%2==0){\n            stones.push(stones[level-1]+2);\n        }\n        else{\n            stones.push(stones[level-1]+1);\n        }\n        level++;\n    }\n    return stones;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "var arr = [];\n    for(var i = 0; i < n; i++){\n        if(i === 0){\n            arr.push(n);\n        }\n        else if(i % 2 !== 0){\n            arr.push(arr[i-1] + 2);\n        }\n        else{\n            arr.push(arr[i-1] + 1);\n        }\n    }\n    return arr;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "var listOfLevels = [];\n    for (var i = 0; i < n; i++){\n        if (i == 0){\n            listOfLevels.push(n);\n        }\n        else if (i % 2 == 0){\n            listOfLevels.push(listOfLevels[i-1] + 2);\n        }\n        else{\n            listOfLevels.push(listOfLevels[i-1] + 1);\n        }\n    }\n    return listOfLevels;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "if(n===1){\n        return [1];\n    }\n    if(n%2===0){\n        return [n].concat(make_a_pile(n+1));\n    }\n    return [n].concat(make_a_pile(n+2));\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "//Fill this in.\n    let ret = [];\n    for(let i = 0; i < n; i++){\n        if(n % 2 === 0){\n            ret.push(n+1);\n        }\n        else{\n            ret.push(n);\n        }\n        n--;\n    }\n    return ret;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "var arr = [n];\n  var s = 0;\n  while(n >= 3){\n    if(n % 2 == 0){\n      s = n + 2;\n    }\n    else{\n      s = n + 1;\n    }\n    arr.push(s);\n    n = s;\n  }\n  return arr;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "if(n<1)\n        return [];\n    let pile = [n];\n    while(pile[pile.length-1]>0){\n        let last = pile[pile.length-1];\n        if(last%2===0)\n            pile.push(last-1);\n        else\n            pile.push(last-2);\n    }\n    return pile.slice(0,pile.length-1);\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "let level = 1;\n    let current_n = n;\n    let result = [];\n    while(n > 0){\n        result.push(current_n);\n        if(current_n % 2 === 0){\n            current_n += 2;\n        } else {\n            current_n += 1;\n        }\n        n--;\n    }\n    return result;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "const result = [n];\n  for (let i = 0; i < n - 1; i++) {\n    result.push(result[i] % 2 ? result[i] + 2 : result[i] + 1);\n  }\n  return result;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "let i=1;\n    let arr=[];\n    while(i<=n){\n        if(i%2==0){\n            arr.push(i+1);\n        }\n        else if(i%2!=0){\n            arr.push(i+2);\n        }\n        i++;\n    }\n    console.log(arr);\n}\nmake_a_pile(3);",
        "grade-17": {
            "execution": 0
        },
        "12": "const arr = [n];\n  while(arr[arr.length-1] > 0){\n    if(arr[arr.length-1] % 2 === 0){\n      arr.push(arr[arr.length-1] - 1);\n    } else {\n      arr.push(arr[arr.length-1] - 2);\n    }\n  }\n  return arr.slice(0, arr.length-1);\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "var stones = [];\n  for (var i = 0; i < n; i++) {\n    var levels = [i + 1];\n    stones.push(levels);\n  }\n  return stones;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "let arr = [n]\n    while(n > 0){\n        n = next(n)\n        arr.push(n)\n    }\n    return arr.slice(0, arr.length - 1)\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "let arr = [n];\n    for(let i = 1; i < n; i++){\n        if(arr[i-1] % 2 === 0){\n            arr.push(arr[i-1] + 2);\n        }else{\n            arr.push(arr[i-1] + 1);\n        }\n    }\n    return arr;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "var result = [n];\n  for(var i = 1; i < n; i++){\n    if(n % 2 == 0){\n      n += 2;\n    }\n    else{\n      n += 1;\n    }\n    result.push(n);\n  }\n  return result;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "var arr = [];\n  arr.push(n);\n  for(var i = 1; i <= n; i++){\n    if(n % 2 === 0){\n      arr.push(n + i);\n    } else {\n      arr.push(n + i + 1);\n    }\n  }\n  return arr;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "let result = [];\n    while(n>0){\n        result.push(n);\n        if(n%2===0){\n            n = n-1;\n        }else{\n            n = n-2;\n        }\n    }\n    return result;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "const stones = [n];\n  while (stones[stones.length - 1] !== 1) {\n    if (stones[stones.length - 1] % 2 === 0) {\n      stones.push(stones[stones.length - 1] - 1);\n    } else {\n      stones.push(stones[stones.length - 1] - 2);\n    }\n  }\n  return stones;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "// Your code here\n    var result = [];\n    var count = n;\n    for(var i = 0; i < n; i++){\n        if(count % 2 == 0){\n            result.push(count)\n            count = count + 2;\n        }else{\n            result.push(count)\n            count = count + 1;\n        }\n    }\n    return result;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "let arr = [n];\n    for(let i = 1; i < n; i++){\n        if(arr[i-1] % 2 == 0){\n            arr.push(arr[i-1] + 2);\n        }\n        else{\n            arr.push(arr[i-1] + 1);\n        }\n    }\n    return arr;\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// For N = 1000, the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n",
        "snippet": [
            "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n"
        ],
        "simplified": "Given a positive integer N, return the total sum of its digits in binary.",
        "task_id": "84",
        "3": "return N.toString(2).split('').reduce((acc, curr) => parseInt(acc) + parseInt(curr), 0);\n}\n\nmodule.exports = { solve };",
        "grade-3": {
            "execution": 0
        },
        "0": "var result = '';\n  var binaryVal = '';\n  if(N === 0) { return 0; }\n  while(N !== 0) {\n    if(N % 2 === 0) {\n      binaryVal = '0';\n    } else {\n      binaryVal = '1';\n    }\n    result = binaryVal + result;\n    N = parseInt(N / 2);\n  }\n  var sum = 0;\n  for(var i = 0; i < result.length; i++) {\n    sum += Number(result[i]);\n  }\n  return sum;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "let result = 0;\n    for(let i = N; i > 0; i = Math.floor(i/2)){\n        result += i % 2;\n    }\n    return result;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "// write your code here\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "let result = 0;\n  let str = '';\n  let rem = 0;\n  while(N>0){\n    rem = Math.floor(N%2);\n    str += rem;\n    result += rem;\n    N = Math.floor(N/2);\n  }\n  console.log(result);\n  return str.split('').reverse().join('');\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "return (N.toString(2).match(/1/g)||[]).length\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "var obj = {}\n  var count = 0\n  var binary = []\n  var sum = 0\n  while(N != 0){\n    if(N % 2 === 0){\n      binary.push(0)\n    }else{\n      binary.push(1)\n    }\n    N = Math.floor(N / 2)\n  }\n  var result = binary.reverse().join('')\n  for(var i = 0; i < result.length; i++){\n    if(result[i] === '1'){\n      sum++\n    }\n  }\n  return sum\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "let binString = N.toString(2);\n    let splitString = binString.split('');\n    let sumDigits = 0;\n    for(let i = 0; i < splitString.length; i++){\n        sumDigits += parseInt(splitString[i]);\n    }\n    return sumDigits;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "//your code here\n    var arr = [];\n    var total = 0;\n    for(var i = 0; i < N; i++){\n        var binary = (i).toString(2);\n        for(var j = 0; j < binary.length; j++){\n            total += parseInt(binary[j]);\n        }\n    }\n    return total;\n}\nsolve(1000);",
        "grade-10": {
            "execution": 0
        },
        "17": "let x = Number(N).toString(2);\n    let arr = x.split('');\n    let sum = 0;\n    for(let i = 0; i < arr.length; i++){\n        sum += Number(arr[i]);\n    }\n    return sum;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "var bin = N.toString(2);\n    var sum = 0;\n    for(var i = 0; i < bin.length; i++){\n        sum += +bin[i];\n    }\n    return sum;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "var binary = (N >>> 0).toString(2);\n  var result = 0;\n  for (var i = 0; i < binary.length; i++) {\n    result += parseInt(binary[i]);\n  }\n  return result;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "// let result = 0;\n    // for(let i = 0; i < N.length; i++){\n    //     result += N[i];\n    // }\n    // return result;\n    return N.toString(2);\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "// this is  a binary problem.\n   var sum = 0;\n   var arr = [];\n   while(N){\n      if(N%2){\n         sum++;\n      }\n      arr.push(N%2);\n      N = Math.floor(N/2);\n   }\n   return sum;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "//write your code here\n    return (N >>> 0).toString(2).split('').reduce((a,b) => +a + +b);\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "return N.toString(2).split('').reduce((acc, curr) => acc + Number(curr), 0);\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "return N.toString(2).split('').reduce((a,b)=>+a+ +b)\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "return N.toString(2).split('').reduce((p,c)=>p+parseInt(c),0)\n}\nsolve(1000)\nsolve(150)\nsolve(147)",
        "grade-14": {
            "execution": 0
        },
        "5": "var sum = 0;\n  var result = [];\n  while(N>0){\n    result.push(N%2);\n    N = Math.floor(N/2);\n  }\n  for(var i = 0; i < result.length; i++){\n    sum += result[i];\n  }\n  return sum;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "let sum = 0;\n\tlet bin = N.toString(2);\n\tfor(let i = 0; i < bin.length; i++){\n\t\tsum += parseInt(bin[i],10);\n\t}\n\treturn sum;\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// digits(1)  == 1\n// digits(4)  == 0\n// digits(235) == 15\nfunction digits(n){\n",
        "snippet": [
            "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n"
        ],
        "simplified": "Given a positive integer n, return the product of the odd digits. Return 0 if all digits are even.",
        "task_id": "131",
        "3": "if(n == 0) {\n        return 0;\n    }\n    return Math.abs(n) % 10 % 2 ? Math.abs(n) % 10 * digits(Math.floor(n / 10)) : digits(Math.floor(n / 10));\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "var sum = 1;\n    if(n === 0){\n        return 0;\n    }\n    if(n < 0){\n        n = -n;\n    }\n    while(n !== 0){\n        var m = n % 10;\n        if(m % 2 !== 0){\n            sum *= m;\n        }\n        n = (n - m) / 10;\n    }\n    return sum;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "let sum = 1;\n    let check = n.toString();\n    for (let i = 0; i < check.length; i++) {\n        if (check[i] % 2 !== 0) {\n            sum *= parseInt(check[i]);\n        }\n    }\n    return sum === 1 ? 0 : sum;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "let x = n.toString().split('');\n  let result = 1;\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 !== 0) {\n      result *= x[i];\n    }\n  }\n  return result;\n}\n\nmodule.exports = digits;",
        "grade-7": {
            "execution": 0
        },
        "16": "let numToStr = n.toString();\n    let result = 1;\n    for (let i = 0; i < numToStr.length; i++) {\n        let currentNum = Number(numToStr[i]);\n        if (currentNum % 2 !== 0) {\n            result *= currentNum;\n        }\n    }\n    return result;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "var num = n.toString().split('');\n  var result = 0;\n  for (var i = 0; i < num.length; i++) {\n    if (num[i] % 2 != 0) {\n      result += parseInt(num[i]);\n    }\n  }\n  return result;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "let sum = 1;\n    n = n.toString().split('');\n    if(n.length === 1){\n        return n[0] % 2 !== 0 ? n[0] : 0;\n    }\n    for(let i = 0; i < n.length; i++){\n        if(n[i] % 2 !== 0){\n            sum *= n[i];\n        }\n    }\n    return sum;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "return (n+'').split('').reduce((a,b)=>(b%2===1)?a*+b:a,1);\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "let prod = 1;\n  n = n.toString().split('');\n  for (let i = 0; i < n.length; i++) {\n    if (n[i] % 2 === 1) {\n      prod *= n[i];\n    }\n  }\n  return prod === 1 ? 0 : prod;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "//write your code here\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "let mult = 1;\n    n = n.toString().split('');\n    for (let i = 0; i < n.length; i++) {\n        if (n[i] % 2 === 1) {\n            mult *= n[i];\n        }\n    }\n    return mult;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "var str = n.toString();\n  var arr = str.split('');\n  var total = 1;\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 !== 0) {\n      total *= arr[i];\n    }\n  }\n  return total;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "const arr = n.toString().split('');\n    const result = arr.filter(elem => elem % 2 !== 0).reduce((acc, curr) => acc * curr, 1);\n    return result || 0;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "let arrayOfNumbers = n.toString().split('').map(n => parseInt(n));\n  let productOfOdd = arrayOfNumbers.filter(n => n % 2 !== 0).reduce((a, b) => a * b, 1);\n  return productOfOdd;\n}\n\ndigits(12345);",
        "grade-15": {
            "execution": 0
        },
        "13": "var arr = n.toString().split('').map(Number);\n   var n = 1;\n   for (var i = 0; i < arr.length; i++) {\n     if (arr[i] % 2 === 1) {\n     n *= arr[i];\n     }\n   }\n   return n;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "var num = n.toString();\n    var result = 1;\n    for (var i = 0; i < num.length; i++) {\n        if (num[i] % 2 === 1) {\n            result *= parseInt(num[i]);\n        }\n    }\n    return result;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "var product = 1;\n    var num = n.toString().split('');\n    for(var i = 0; i < num.length; i++){\n        if(num[i] % 2 !== 0){\n            product *= parseInt(num[i]);\n        }\n    }\n    return product;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "let arr = n.toString().split('')\n  let ans = arr.filter(el => el % 2 !== 0)\n  return ans.length === 0 ? 0 : ans.reduce((a, b) => a * b)\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "let prod = 1;\n    while (n > 0) {\n        if (n % 2 !== 0) prod *= n % 10;\n        n = Math.floor(n / 10);\n    }\n    return prod;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "var sum = 0;\n    var num = n.toString();\n    for (i = 0; i < num.length; i++) {\n        var number = parseInt(num[i]);\n        if (number % 2 != 0) {\n            sum += number;\n        }\n    }\n    return sum;\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8, 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n",
        "snippet": [
            "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n"
        ],
        "simplified": "You're a hungry rabbit, and you already have eaten a certain number of carrots, but now you need to eat more carrots to complete the day's meals. you should return an array of [ total number of eaten carrots after your meals, the number of carrots left after your meals ] if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.",
        "task_id": "159",
        "3": "if(remaining >= (number + need)){\n    return [ number + need, remaining - (number + need) ];\n  } else if(remaining < (number + need)){\n    return [ number + remaining, 0 ];\n  }\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "return [number + Math.min(need, remaining), Math.max(0, remaining - need)];\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "let left = remaining - need\n  let result = []\n  if (left < 0) {\n    result.push(remaining)\n    result.push(0)\n  } else {\n    result.push(number + need)\n    result.push(left)\n  }\n  return result\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "var eat = number + need;\n  if (remaining >= eat) {\n    var ret = [eat, remaining - eat];\n  } else {\n    var ret = [eat - remaining, 0];\n  }\n  return ret;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "if(number + need <= remaining){\n\t\treturn [number + need, remaining - (number + need)];\n\t}\n\telse{\n\t\treturn [number + remaining, 0];\n\t}\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "return [number+need<=remaining?number+need:remaining, remaining-need>=0?remaining-need:0];\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "if(remaining < need){\n    return [number + remaining, 0];\n  }\n  else{\n    return [number + need, remaining - need];\n  }\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "if (need <= remaining) {\n    return [number + need, remaining - need];\n  } else {\n    return [number + remaining, 0];\n  }\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "var eaten = number + need;\n    var left = 0;\n    if (eaten <= remaining) {\n        left = remaining - eaten;\n    }\n    return [eaten, left];\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "var total = number + need;\n  if (total > remaining) {\n    total = remaining + number;\n    return [total, 0];\n  } else {\n    return [total, remaining - total];\n  }\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "if(number + need <= remaining){\n        return [number + need, remaining - (number + need)]\n    } else {\n        return [number + remaining, 0]\n    }\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "// Write your code here...\n    return need-number>remaining?[remaining+number,0]:[need, remaining-(need-number)];\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "if(remaining >= need) return [number + need, remaining - need];\n  else return [number + remaining, 0];\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "let eaten = number + Math.min(need, remaining);\n    return [eaten, remaining - Math.min(need, remaining)];\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "var total = number + remaining;\n  var eaten = 0;\n  var carrotRemain = 0;\n  if (total < need) {\n    eaten = total;\n    carrotRemain = 0;\n  } else {\n    eaten = need;\n    carrotRemain = total - need;\n  }\n  return [eaten, carrotRemain];\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "return (remaining >= need) ? [number + need, remaining - need] : [number + remaining, 0];\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "let needCarrots = number + need;\n  if (needCarrots > remaining) {\n    return [remaining, 0];\n  } else {\n    return [needCarrots, remaining - needCarrots];\n  }\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "if(remaining < need) {\n    return [number + remaining, 0];\n  }\n  return [number + need, remaining - need];\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "// code here\n  if (remaining >= need) {\n    return [number + need, remaining - need];\n  } else {\n    return [number + remaining, 0];\n  }\n  }",
        "grade-5": {
            "execution": 1
        },
        "19": "if(number + need <= remaining){\n    return [number + need, remaining - (number + need)]\n  }\n  return [remaining, 0]\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//Write a function that takes an integer a and returns True \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nfunction iscube(a){\n",
        "snippet": [
            "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n"
        ],
        "simplified": "Write a function that takes an integer a and returns True if this ingeger is a cube of some integer number. Note: you may assume the input is always valid.",
        "task_id": "77",
        "0": "// a = Math.abs(a);\n    // if(a === 0) return true;\n    // var cube = 1;\n    // while(cube < a){\n    //     cube = cube + 1;\n    //     if(Math.pow(cube, 3) === a) return true;\n    // }\n    // return false;\n    return a >= 0 && Math.cbrt(a)%1 === 0;\n}",
        "grade-0": {
            "execution": 0
        },
        "1": "return Number.isInteger(Math.cbrt(a));\n}",
        "grade-1": {
            "execution": 1
        },
        "2": "return Math.pow(a, 1/3) % 1 === 0;\n}",
        "grade-2": {
            "execution": 0
        },
        "3": "return Number.isInteger(Math.cbrt(a));\n}",
        "grade-3": {
            "execution": 1
        },
        "4": "return (Math.cbrt(a) % 1 === 0)\n}",
        "grade-4": {
            "execution": 1
        },
        "5": "return Math.sqrt(a) % 1 === 0;\n}",
        "grade-5": {
            "execution": 0
        },
        "6": "return !isNaN(Math.pow(a, 1/3));\n}",
        "grade-6": {
            "execution": 0
        },
        "8": "if(Math.cbrt(a) % 1 == 0){\n        return true;\n    }else{\n        return false;\n    }\n}",
        "grade-8": {
            "execution": 1
        },
        "9": "var m=Math.cbrt(a);\n    if(m%1==0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}",
        "grade-9": {
            "execution": 1
        },
        "10": "var g=a*a*a;\n  var t=a;\n  for(var i=0;i<t;i++){\n    g=g-a;\n    if(g==0){\n      return true;\n    }\n  }\n  return false;\n}",
        "grade-10": {
            "execution": 0
        },
        "11": "if(a === 0) return true;\n    return Math.pow(Math.round(Math.pow(a, 1/3)), 3) === a;\n}",
        "grade-11": {
            "execution": 0
        },
        "12": "return Number.isInteger(Math.cbrt(a));\n}",
        "grade-12": {
            "execution": 1
        },
        "13": "if(a==0){\n        return true;\n    }\n    if(a>0){\n        return Math.cbrt(a)%1==0;\n    }\n    if(a<0){\n        return Math.cbrt(-a)%1==0;\n    }\n}",
        "grade-13": {
            "execution": 1
        },
        "14": "var y = a/2;\n    var x = Math.floor(Math.sqrt(y));\n    var c = Math.pow(x,3);\n    if(c==a){\n        return true;\n    }\n    else{\n        return false;\n    }\n}",
        "grade-14": {
            "execution": 0
        },
        "17": "if(a===0){\n\t\treturn true;\n\t}\n\tvar cube=Math.abs(a);\n\tvar num=Math.round(Math.cbrt(cube));\n\tvar x=Math.pow(num,3);\n\tif(x===cube){\n\t\treturn true;\n\t}else{\n\t\treturn false;\n\t}\n\t\n}",
        "grade-17": {
            "execution": 1
        },
        "18": "//change the input to be positive to avoid lose of calculation result\n\t//due to the floating number.\n\tif(a < 0){\n\t\ta = Math.abs(a);\n\t}\n\t//simple logic to check if a is a cube of some integer number\n\treturn Math.pow(Math.round(Math.pow(a, 1/3)), 3) === a;\n}",
        "grade-18": {
            "execution": 1
        },
        "19": "if(a<0){\n    return true;\n  }else{\n    var c = Math.pow(a,1/3);\n    if(Number.isInteger(c)){\n      return true;\n    }else{\n      return false;\n    }\n  }\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return None if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// compare_one(1, 2.5) \u279e 2.5\n// compare_one(1, \"2,3\") \u279e \"2,3\"\n// compare_one(\"5,1\", \"6\") \u279e \"6\"\n// compare_one(\"1\", 1) \u279e None\nfunction compare_one(a, b){\n",
        "snippet": [
            "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n"
        ],
        "simplified": "Create a function that takes integers, floats, or strings representing real numbers, and returns the larger variable in its given variable type. Return None if the values are equal. Note: If a real number is represented as a string, the floating point might be . or ,",
        "task_id": "137",
        "3": "if(typeof a === typeof b){\n        if(a === b){\n            return false;\n        }\n        else{\n            return a > b ? a : b;\n        }\n    }\n    else{\n        return a > b ? a : b;\n    }\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "if (a == b) return null;\n    if (typeof a == 'string' && typeof b == 'string'){\n        return parseFloat(a) > parseFloat(b) ? a : b;\n    }\n    if (typeof a == 'string' && typeof b == 'number'){\n        return parseFloat(a) > b ? a : b;\n    }\n    if (typeof a == 'number' && typeof b == 'string'){\n        return a > parseFloat(b) ? a : b;\n    }\n    return a > b ? a : b;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "if(typeof a == \"number\" && typeof b == \"number\"){\n        if(a>b){\n            return a;\n        }else if(a<b){\n            return b;\n        }else if(a==b){\n            return \"None\";\n        }\n    }else if(typeof a == \"string\" && typeof b == \"string\"){\n        let a2 = parseFloat(a.replace(/,/,\".\"));\n        let b2 = parseFloat(b.replace(/,/,\".\"));\n        if(a2>b2){\n            return a;\n        }else if(a2<b2){\n            return b;\n        }else if(a2==b2){\n            return \"None\";\n        }\n    }else if(typeof a == \"string\" && typeof b == \"number\"){\n        let a2 = parseFloat(a.replace(/,/,\".\"));\n        if(a2>b){\n            return a;\n        }else if(a2<b){\n            return b;\n        }else if(a2==b){\n            return \"None\";\n        }\n    }else if(typeof a == \"number\" && typeof b == \"string\"){\n        let b2 = parseFloat(b.replace(/,/,\".\"));\n        if(a>b2){\n            return a;\n        }else if(a<b2){\n            return b;\n        }else if(a==b2){\n            return \"None\";\n        }\n    }\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "if(a==b){\n        return \"None\";\n    }else if(a>b){\n        return a;\n    }else if(b>a){\n        return b;\n    }\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "let newA = typeof a === \"string\" ? a.replace(/\\,/,\".\") : a;\n    let newB = typeof b === \"string\" ? b.replace(/\\,/,\".\") : b;\n    return parseFloat(newA) < parseFloat(newB) ? b :\n           parseFloat(newA) > parseFloat(newB) ? a :\n           parseFloat(newA) === parseFloat(newB) ? null : \"Invalid Input\"\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "if (typeof a === typeof b) {\n        if (a === b) {\n            return null;\n        } else if (a > b) {\n            return a;\n        } else {\n            return b;\n        }\n    } else if (typeof a === \"string\") {\n        let bnew = Number(b.replace(\",\", \".\"));\n        let anew = Number(a.replace(\",\", \".\"));\n        if (anew === bnew) {\n            return null;\n        } else if (anew > bnew) {\n            return a;\n        } else {\n            return b;\n        }\n    } else if (typeof b === \"string\") {\n        let bnew = Number(b.replace(\",\", \".\"));\n        let anew = Number(a.replace(\",\", \".\"));\n        if (anew === bnew) {\n            return null;\n        } else if (anew > bnew) {\n            return a;\n        } else {\n            return b;\n        }\n    }\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "if (a > b){\n        return a;\n    }\n    else if (a < b){\n        return b;\n    }\n    else if (a == b){\n        return None;\n    }\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "if (a === b) {\n        return None;\n    } else if (parseFloat(a) > parseFloat(b)) {\n        return a;\n    } else {\n        return b;\n    }\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "var r = null;\n    if(typeof a == typeof b){\n        if(typeof a == \"number\"){\n            r = (a > b) ? a : b;\n        }else if(typeof a == \"string\"){\n            r = (parseFloat(a) > parseFloat(b)) ? a : b;\n        }\n    }\n    return r;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "if (a == b){\nreturn None\n} else if (a < b){\nreturn b\n} else {\nreturn a\n}\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "if(!isNaN(a) && !isNaN(b)) {\n    return a > b ? a : b\n  }\n  if(isNaN(a) && isNaN(b)) {\n    return a > b ? a : b\n  }\n  return null\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "if(a == b){\n        return \"None\";\n    }else if(a > b){\n        return a;\n    }else{\n        return b;\n    }\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "if (typeof a == \"number\" && typeof b == \"number\") {\n        if (a == b) {\n            return \"None\";\n        }\n        else if (a > b) {\n            return a;\n        }\n        else {\n            return b;\n        }\n    }\n    else if (typeof a == \"string\" && typeof b == \"string\") {\n        if (a > b) {\n            return a;\n        }\n        else if (a < b) {\n            return b;\n        }\n        else {\n            return \"None\";\n        }\n    }\n    else if (typeof a == \"string\" && typeof b == \"number\") {\n        if (parseFloat(a) == b) {\n            return \"None\";\n        }\n        else if (parseFloat(a) > b) {\n            return a;\n        }\n        else {\n            return b;\n        }\n    }\n    else if (typeof a == \"number\" && typeof b == \"string\") {\n        if (a == parseFloat(b)) {\n            return \"None\";\n        }\n        else if (a > parseFloat(b)) {\n            return a;\n        }\n        else {\n            return b;\n        }\n    }\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "var isNum1 = !isNaN(a);\n\tvar isNum2 = !isNaN(b);\n\tif (isNum1 && isNum2){\n\t\tif (typeof a == \"string\"){\n\t\t\ta = parseFloat(a.replace(\",\", \".\"));\n\t\t}\n\t\tif (typeof b == \"string\"){\n\t\t\tb = parseFloat(b.replace(\",\", \".\"));\n\t\t}\n\t\tif (a > b){\n\t\t\treturn a;\n\t\t} else if (a < b){\n\t\t\treturn b;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t} else if (!isNum1 && !isNum2){\n\t\tif (a > b){\n\t\t\treturn a;\n\t\t} else if (a < b){\n\t\t\treturn b;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\treturn null;\n\t}\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "if(typeof a == \"number\" && typeof b == \"number\"){\n        if(a > b){\n            return a;\n        }else if(a < b){\n            return b;\n        }else{\n            return undefined;\n        }\n    }else if(typeof a == \"string\" && typeof b == \"string\"){\n        let a_final = parseFloat(a.replace(\",\", \".\"));\n        let b_final = parseFloat(b.replace(\",\", \".\"));\n        if(a_final > b_final){\n            return a;\n        }else if(a_final < b_final){\n            return b;\n        }else{\n            return undefined;\n        }\n    }else if(typeof a == \"string\" && typeof b == \"number\"){\n        let a_final = parseFloat(a.replace(\",\", \".\"));\n        if(a_final > b){\n            return a;\n        }else if(a_final < b){\n            return b;\n        }else{\n            return undefined;\n        }\n    }else if(typeof a == \"number\" && typeof b == \"string\"){\n        let b_final = parseFloat(b.replace(\",\", \".\"));\n        if(a > b_final){\n            return a;\n        }else if(a < b_final){\n            return b;\n        }else{\n            return undefined;\n        }\n    }\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "if(Number(a) === Number(b)) return None;\n    if(typeof a === \"string\" && typeof b === \"string\") return Number(a) > Number(b) ? a : b;\n    if(typeof a === \"string\" && typeof b === \"number\") return a;\n    if(typeof a === \"number\" && typeof b === \"string\") return b;\n    return a > b ? a : b;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "if (typeof a == typeof b) {\n        return None;\n    }\n    else if (typeof a == \"string\") {\n        return b;\n    }\n    else if (typeof b == \"string\") {\n        return a;\n    }\n    else if (typeof a == \"number\" && typeof b == \"number\") {\n        if (a > b) {\n            return a;\n        }\n        else if (b > a) {\n            return b;\n        }\n        else {\n            return None;\n        }\n    }\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "let answer = typeof a === typeof b ? a === b ? null : a > b ? a : b : typeof a === \"string\" ? \"string\" : \"number\";\n    return answer === \"string\" ? b.toString() : answer === \"number\" ? b : answer;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "if(parseFloat(a) === parseFloat(b)){\n        return null;\n    }\n    else if(parseFloat(a) < parseFloat(b)){\n        return b;\n    }\n    else{\n        return a;\n    }\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "if (typeof a == typeof b) {\n        if (a > b) {\n            return a;\n        } else if (a < b) {\n            return b;\n        } else {\n            return \"None\";\n        }\n    }\n    else if (typeof a == \"string\") {\n        if (a.replace(\",\", \".\") > b) {\n            return a;\n        } else if (a.replace(\",\", \".\") < b) {\n            return b;\n        } else {\n            return \"None\";\n        }\n    }\n    else if (typeof b == \"string\") {\n        if (a > b.replace(\",\", \".\")) {\n            return a;\n        } else if (a < b.replace(\",\", \".\")) {\n            return b;\n        } else {\n            return \"None\";\n        }\n    }\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3, 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunction triangle_area(a, b, c){\n",
        "snippet": [
            "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n"
        ],
        "simplified": "Given the lengths of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise return -1 Three sides make a valid triangle when the sum of any two sides is greater than the third side.",
        "task_id": "71",
        "3": "if (a+b<c || a+c<b || b+c<a) return -1;\n\tvar p = (a+b+c)/2;\n\treturn Math.round(Math.sqrt(p*(p-a)*(p-b)*(p-c))*100)/100;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "if(a < 0 || b < 0 || c < 0){\n        return -1;\n    }\n    if(a + b > c && a + c > b && b + c > a){\n        let p = (a + b + c) / 2;\n        let A = Math.sqrt(p * (p - a) * (p - b) * (p - c));\n        return A.toFixed(2);\n    } else {\n        return -1;\n    }\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "if(a + b > c && a + c > b && b + c > a){\n      return +((a * b * c / 2).toFixed(2));\n    } else {\n      return -1;\n    }\n  }",
        "grade-8": {
            "execution": 0
        },
        "7": "// sort sides to use the most optimal (biggest side)\n    // for calculating the area\n    let sides = [a, b, c].sort(function(a, b){return a-b});\n    let p = (sides[0] + sides[1] + sides[2]) / 2;\n    let area = p * (p - sides[0]) * (p - sides[1]) * (p - sides[2]);\n    return area > 0 ? +Math.sqrt(area).toFixed(2) : -1;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "let s = (a + b + c) / 2;\n  if (s - a < 0 || s - b < 0 || s - c < 0) return -1;\n  return Number((Math.sqrt(s * (s - a) * (s - b) * (s - c))).toFixed(2));\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "var s = (a + b + c) / 2;\n    var area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    if(area > 0) {\n        return area.toFixed(2);\n    } else {\n        return -1;\n    }\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "let s = (a + b + c) / 2;\n    let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    return area > 0 ? area.toFixed(2) : -1;\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "let p = (a + b + c) / 2;\n    let area = Math.sqrt(p * (p - a) * (p - b) * (p - c));\n    if(isNaN(area)) return -1;\n    return Number(area.toFixed(2));\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "const sides = [a, b, c];\n  sides.sort((a, b) => a - b);\n  if(sides[0] + sides[1] > sides[2]){\n    const s = sides.reduce((a,b) => a + b) / 2;\n    return +(Math.sqrt(s * (s - sides[0]) * (s - sides[1]) * (s - sides[2]))).toFixed(2);\n  }\n  return -1;\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "if(a+b>c && a+c>b && b+c>a){\n        let s = (a+b+c)/2;\n        let area = Math.sqrt(s*(s-a)*(s-b)*(s-c));\n        return Number(area.toFixed(2));\n    }\n    return -1;\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "if (a + b > c && a + c > b && b + c > a) {\n        return +(a * b / 2).toFixed(2);\n    } else {\n        return -1;\n    }\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "if (a+b>c && a+c>b && b+c>a){\n        return Number((0.5*a*b).toFixed(2));\n    } else {\n        return -1;\n    }\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "if (a + b > c && a + c > b && b + c > a) {\n    return Number(((a + b + c) / 2 * (Math.sqrt((a + b + c) * (a + b - c) * (a + c - b) * (b + c - a))) / 2).toFixed(2));\n  } else {\n    return -1;\n  }\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "if ((a+b)>c && (a+c)>b && (b+c)>a){\n\t\tlet sp = (a+b+c)/2;\n\t\tlet area = sp*(sp-a)*(sp-b)*(sp-c);\n\t\tarea = Math.sqrt(area);\n\t\treturn +area.toFixed(2);\n\t}\n\telse{\n\t\treturn -1;\n\t}\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "if (a + b > c && a + c > b && b + c > a) {\n        let s = (a + b + c) / 2;\n        return (Math.sqrt(s * (s - a) * (s - b) * (s - c))).toFixed(2);\n    }\n    return -1;\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "if(a + b > c && a + c > b && b + c > a){\n        let s = (a + b + c) / 2;\n        let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return Number(area.toFixed(2));\n    }\n    return -1;\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "if( a+b>c && a+c>b && b+c>a){\n        let p = (a+b+c)/2;\n        let sq = p*(p-a)*(p-b)*(p-c);\n        return Math.sqrt(sq).toFixed(2);\n    }else{\n        return -1;\n    }\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "let sum = a + b + c;\n    if(sum < c) return -1;\n    let p = sum / 2;\n    let area = Math.sqrt(p * (p - a) * (p - b) * (p - c));\n    return Number(area.toFixed(2));\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "if(a + b > c && a + c > b && b + c > a){\n        //Heron's formula\n        let s = (a + b + c) / 2;\n        return parseFloat((Math.sqrt(s * (s - a) * (s - b) * (s - c))).toFixed(2));\n    }\n    return -1;\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "let sides = [a, b, c].sort((a, b) => a - b);\n    if (sides[0] + sides[1] > sides[2]) {\n        let s = (a + b + c) / 2;\n        return Math.round(Math.sqrt(s * (s - a) * (s - b) * (s - c)) * 100) / 100;\n    } else {\n        return -1;\n    }\n}",
        "grade-19": {
            "execution": 1
        }
    },
    {
        "intent": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n",
        "snippet": [
            "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n"
        ],
        "simplified": "Given an array arr of integers and a positive integer k, return a sorted list of length k with the maximum k numbers in arr. Note: 1. The length of the array will be in the range of [1, 1000]. 2. The elements in the array will be in the range of [-1000, 1000]. 3. 0 <= k <= len(arr)",
        "task_id": "120",
        "3": "let sorted = arr.sort((a,b) => b-a)\n    let sliced = sorted.slice(0,k)\n    return sliced\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "arr.sort(function(a, b){\n    return b - a;\n  });\n  return arr.slice(0, k);\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "arr.sort((a, b) => b - a);\n  arr.length = k;\n  return arr;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "// sort the array in ascending order\n  arr.sort(function(a, b){\n    return a - b;\n  });\n  // return the last k elements from the sorted array\n  return arr.slice(arr.length - k);\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "let output = [];\n    let max= -Infinity;\n    let idx = 0;\n    while(k > 0){\n        for(let i = 0; i < arr.length; i++){\n            if(arr[i] > max){\n                max = arr[i];\n                idx = i;\n            }\n        }\n        output.push(max);\n        max = -Infinity;\n        arr.splice(idx, 1);\n        k--;\n    }\n    return output;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "// return max(arr, k, 0, arr.length-1);\n    return quickSelect(arr, k, 0, arr.length-1);\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "if(arr.length == 0) return null;\n  if(arr.length == 1) return arr;\n  const pq = new PQ();\n  for(let i = 0; i < arr.length; i++){\n    pq.insert(arr[i]);\n  }\n  const res = [];\n  for(let i = 0; i < k; i++){\n    res.push(pq.remove());\n  }\n  return res;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "let list = [], ans = [], i, length = arr.length;\n    for(i = 0; i < length; i++){\n        if(list.length == 0 || arr[i] > list[0]){\n            list.unshift(arr[i]);\n        }\n        else{\n            list.push(arr[i]);\n        }\n    }\n    for(i = 0; i < k; i++){\n        ans.push(list.shift());\n    }\n    return ans;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "let sortedArray = arr.sort((a,b) => a - b);\n    return sortedArray.slice(sortedArray.length - k);\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "let sorted = arr.sort((a,b) => b-a);\n    return sorted.slice(0,k);\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "let result = []\n    let most = null\n    while(k > 0){\n        most = null\n        for(let i = 0; i < arr.length; i++){\n            if(most === null || arr[i] > most){\n                most = arr[i]\n            }\n        }\n        result.push(most)\n        arr.splice(arr.indexOf(most), 1)\n        k--\n    }\n    return result\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "let result = []\n    if(arr.length == 0 || k == 0){\n        return result\n    }\n    arr.sort((a,b) => a-b)\n    result = arr.slice(arr.length - k)\n    return result\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "if(k == 0) return [];\n    if(k >= arr.length) return arr;\n    let copy = arr.slice();\n    let result = [];\n    let part = partition(copy, k-1);\n    while(part < k){\n        let temp = partition(copy, part-1);\n        if(temp < k){\n            result.push(copy[temp]);\n            copy.splice(temp, 1);\n            part = temp + 1;\n        }else{\n            result.push(copy[temp]);\n            copy.splice(temp, 1);\n            part = temp;\n        }\n    }\n    return result;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "var sortedArr = arr.sort((a,b) => b-a)\n    return sortedArr.slice(0,k)\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "if(k <= 0) return []\n    if(k >= arr.length) return arr.sort((a,b) => a-b)\n    let kArray = arr.slice(0,k)\n    kArray.sort((a,b) => a-b)\n    for(let i = k; i < arr.length; i++){\n        if(arr[i] > kArray[0]){\n            let j = 0\n            while(j < k && arr[i] > kArray[j]){\n                j++\n            }\n            kArray.splice(j,0,arr[i])\n            kArray.splice(0,1)\n        }\n    }\n    return kArray\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "var result = [];\n    if(arr.length <= k){\n        return arr;\n    }\n    var i = 0;\n    while(i < k){\n        result.push(arr[i]);\n        i++;\n    }\n    i = k;\n    while(i < arr.length){\n        j = k - 1;\n        while(j >= 0){\n            if(arr[i] > result[j]){\n                if(j === 0){\n                    result[j] = arr[i];\n                }\n                else{\n                    temp = result[j];\n                    result[j] = arr[i];\n                    result[j - 1] = temp;\n                }\n            }\n            j--;\n        }\n        i++;\n    }\n    return result;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "let result = [];\n\tfor(let i = 0; i < k; i++){\n\t\tresult.push(Math.max(...arr));\n\t\tarr.splice(arr.indexOf(Math.max(...arr)), 1);\n\t}\n\treturn result;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "var sorted = quickSort(arr);\n    console.log(\"sorted: \", sorted);\n    return sorted.slice(sorted.length - k, sorted.length);\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "var res = []\n\tfor(var i = 0; i < arr.length; i++){\n\t\twhile(res.length && res[res.length - 1] < arr[i] && res.length + arr.length - i > k){\n\t\t\tres.pop()\n\t\t}\n\t\tif(res.length < k){\n\t\t\tres.push(arr[i])\n\t\t}\n\t}\n\treturn res\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "if(arr.length === 0 || k === 0) return [];\n    if(arr.length === k) return arr;\n    let result = [];\n    for(let i = 0; i < arr.length; i++){\n        while(result.length > 0 && result[result.length - 1] < arr[i] && result.length + arr.length - i > k){\n            result.pop();\n        }\n        if(result.length < k){\n            result.push(arr[i]);\n        }\n    }\n    return result;\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//brackets is a string of \"<\" and \">\".\n// return True if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n",
        "snippet": [
            "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n"
        ],
        "simplified": "brackets is a string of \"<\" and \">\". return True if every opening bracket has a corresponding closing bracket.",
        "task_id": "56",
        "0": "var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if (brackets[i] == \"<\"){\n            count += 1;\n        }\n        else if (brackets[i] == \">\"){\n            count -= 1;\n        }\n        if (count < 0){\n            return false;\n        }\n    }\n    if (count > 0){\n        return false;\n    }\n    return true;\n}",
        "grade-0": {
            "execution": 1
        },
        "1": "if(brackets === null){\n        return false;\n    }\n    if(brackets.length % 2 !== 0){\n        return false;\n    }\n    var arr = brackets.split(\"\");\n    var count = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] === \"<\"){\n            count++;\n        }else{\n            count--;\n        }\n        if(count < 0){\n            return false;\n        }\n    }\n    if(count === 0){\n        return true;\n    }else{\n        return false;\n    }\n}",
        "grade-1": {
            "execution": 1
        },
        "2": "if(brackets.length === 0){\n\t\treturn true;\n\t}\n\tif(brackets.length === 1){\n\t\treturn false;\n\t}\n\tif(brackets[0] === '>'){\n\t\treturn false;\n\t}\n\tif(brackets[brackets.length - 1] === '<'){\n\t\treturn false;\n\t}\n\tvar count = 0;\n\tfor(var i = 0; i < brackets.length; i++){\n\t\tif(brackets[i] === '<'){\n\t\t\tcount += 1;\n\t\t}\n\t\tif(brackets[i] === '>'){\n\t\t\tcount -= 1;\n\t\t}\n\t\tif(count < 0){\n\t\t\treturn false;\n\t\t}\n\t}\n\tif(count === 0){\n\t\treturn true;\n\t}\n\treturn false;\n}",
        "grade-2": {
            "execution": 1
        },
        "3": "var i;\n  var j;\n  for (i = 0; i < brackets.length; i += 1){\n    if (brackets[i] === \"<\"){\n      for (j = i; j < brackets.length; j += 1){\n        if (brackets[j] === \">\"){\n          break;\n        }\n      }\n      if (j === brackets.length){\n        return false;\n      }\n    }\n  }\n  return true;\n}",
        "grade-3": {
            "execution": 0
        },
        "4": "var brace = 0;\n  for (var i = 0; i < brackets.length; i++) {\n    if (brackets[i] == \"<\") {\n      brace += 1;\n    }\n    else if (brackets[i] == \">\") {\n      brace -= 1;\n    }\n    if (brace < 0) {\n      return false;\n    }\n  }\n  if (brace == 0) {\n    return true;\n  }\n  else {\n    return false;\n  }\n}",
        "grade-4": {
            "execution": 1
        },
        "5": "}",
        "grade-5": {
            "execution": 0
        },
        "6": "var counter = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if (brackets[i] == \"<\"){\n            counter += 1;\n        } else if (brackets[i] == \">\"){\n            counter -= 1;\n        }\n        if (counter < 0){\n            return false;\n        }\n    }\n    if (counter == 0){\n        return true;\n    } else {\n        return false;\n    }\n}",
        "grade-6": {
            "execution": 1
        },
        "7": "var open = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if (brackets[i] == \"<\"){\n            open++;\n        }\n        else if (brackets[i] == \">\"){\n            open--;\n        }\n        if (open < 0){\n            return false;\n        }\n    }\n    if (open == 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}",
        "grade-7": {
            "execution": 1
        },
        "8": "var opening = [];\n\tfor (var i = 0; i < brackets.length; i++) {\n\t\tif (brackets[i] == \"<\") {\n\t\t\topening.push(brackets[i]);\n\t\t}\n\t\telse {\n\t\t\tif (opening.length != 0) {\n\t\t\t\topening.pop();\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif (opening.length == 0) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}",
        "grade-8": {
            "execution": 1
        },
        "9": "var correct=false;\n    var open=brackets.split(\"<\").length-1;\n    var close=brackets.split(\">\").length-1;\n    if(open==close){\n        correct=true;\n    }\n    return correct;\n}",
        "grade-9": {
            "execution": 0
        },
        "10": "if(brackets.length == 0) return false;\n\tif(brackets.length == 1) return false;\n\tif(brackets.length == 2) {\n\t\tif(brackets[0] == \"<\" && brackets[1] == \">\") return true;\n\t\telse return false;\n\t}\n\tvar c = 0;\n\tvar d = 0;\n\tvar o = [];\n\tvar c = [];\n\tfor(var i = 0; i < brackets.length; i++){\n\t\tif(brackets[i] == \"<\"){\n\t\t\to.push(i);\n\t\t}\n\t\tif(brackets[i] == \">\"){\n\t\t\tc.push(i);\n\t\t}\n\t}\n\tif(o.length != c.length) return false;\n\twhile(o.length != 0){\n\t\tif(o[0] > c[0]) return false;\n\t\to.shift();\n\t\tc.shift();\n\t}\n\treturn true;\n}",
        "grade-10": {
            "execution": 1
        },
        "11": "var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if (brackets[i] == \"<\"){\n            count++;\n        }\n        else if (brackets[i] == \">\"){\n            count--;\n        }\n        if (count < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}",
        "grade-11": {
            "execution": 1
        },
        "12": "// create a counter that increment if it's \"<\" and decrement if it's \">\"\n    var counter = 0;\n    // iterate through the string\n    for (var i = 0; i < brackets.length; i++){\n        // if bracket is \"<\" increment\n        if (brackets[i] === \"<\"){\n            counter++;\n        } else {\n            // if bracket is \">\" decrement\n            counter--;\n        }\n        // if counter gets negative, there is a \">\" without a \"<\" before it\n        if (counter < 0){\n            return false;\n        }\n    }\n    // if all the brackets have corresponding pairs, the counter will be 0 at the end.\n    return counter === 0;\n}",
        "grade-12": {
            "execution": 1
        },
        "13": "var count = 0;\n  for (var i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n      count++;\n    }\n    else if (brackets[i] === \">\") {\n      count--;\n    }\n    if (count < 0) {\n      return false;\n    }\n  }\n  if (count === 0) {\n    return true;\n  }\n  else {\n    return false;\n  }\n}",
        "grade-13": {
            "execution": 1
        },
        "14": "var counter = 0;\n  for (var i = 0; i < brackets.length; i++) {\n    if (brackets[i] == \"<\") {\n      counter += 1;\n    }\n    else if (brackets[i] == \">\") {\n      counter -= 1;\n    }\n    if (counter < 0) {\n      return false;\n    }\n  }\n  if (counter != 0) {\n    return false;\n  }\n  return true;\n}",
        "grade-14": {
            "execution": 1
        },
        "15": "var opening = 0;\n    var closing = 0;\n    for (var i = 0; i < brackets.length; i++) {\n        if (brackets[i] == \"<\") {\n            opening += 1;\n        }\n        else if (brackets[i] == \">\") {\n            closing += 1;\n        }\n    }\n    if (opening == closing) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}",
        "grade-15": {
            "execution": 0
        },
        "16": "//Assume brackets is a string of \"<\" and \">\"\n  //Create a counter to count how many left brackets there are.\n  //Loop over the brackets\n    //If we hit a \"<\", increment the counter.\n    //If we hit a \">\", decrement the counter.\n    //If we hit a \">\" and the counter is 0, return False.\n  //If the counter is not 0, return False.\n  //If the counter is 0, return True.\n  var counter = 0;\n  for(var i = 0; i < brackets.length; i++){\n    if(brackets[i] === \"<\"){\n      counter += 1;\n    } else if(brackets[i] === \">\"){\n      counter -= 1;\n      if(counter < 0){\n        return false;\n      }\n    }\n  }\n  if(counter === 0){\n    return true;\n  } else {\n    return false;\n  }\n}",
        "grade-16": {
            "execution": 1
        },
        "17": "var stack = [];\n\tfor(var i = 0; i < brackets.length; i++){\n\t\tif(brackets[i] === \"<\"){\n\t\t\tstack.push(brackets[i]);\n\t\t}\n\t\telse{\n\t\t\tif(stack.length === 0){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tstack.pop();\n\t\t}\n\t}\n\tif(stack.length !== 0){\n\t\treturn false;\n\t}\n\treturn true;\n}",
        "grade-17": {
            "execution": 1
        },
        "18": "var position = 0;\n  for (var i = 0; i < brackets.length; i++) {\n    var bracket = brackets[i];\n    if (bracket === \"<\") {\n      position += 1;\n    } else if (bracket === \">\") {\n      position -= 1;\n    }\n    if (position < 0) {\n      return false;\n    }\n  }\n  return position === 0;\n}",
        "grade-18": {
            "execution": 1
        }
    },
    {
        "intent": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s, n){\n",
        "snippet": [
            "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n"
        ],
        "simplified": "Given a string s and a natural number n, you have been tasked to implement a function that returns a list of all words from string s that contain exactly n consonants, in order these words appear in the string s. If the string s is empty then the function should return an empty list. Note: you may assume the input string contains only letters and spaces.",
        "task_id": "117",
        "3": "var regex = /[bcdfghjklmnpqrstvwxyz]/i;\n    var temp = s.split(\" \");\n    var result = [];\n    for(var i = 0; i < temp.length; i++){\n        var counter = 0;\n        for(var j = 0; j < temp[i].length; j++){\n            if(regex.test(temp[i][j])){\n                counter++;\n            }\n        }\n        if(counter == n){\n            result.push(temp[i]);\n        }\n    }\n    return result;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "let list = [];\n    let temp = s.split(\" \");\n    for(let i = 0; i < temp.length; i++){\n        if(countVowels(temp[i]) == n){\n            list.push(temp[i]);\n        }\n    }\n    return list;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "let res = [];\n    let vowels = {'a':1, 'e':1, 'i':1, 'o':1, 'u':1};\n    let words = s.split(' ');\n    for(let word of words){\n        let num = 0;\n        for(let ch of word){\n            if(!vowels[ch])\n                num++;\n        }\n        if(num === n)\n            res.push(word);\n    }\n    return res;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "return s.split(' ').filter(word => {\n        return word.split('').filter(char => {\n            return /[bcdfghjklmnpqrstvwxyz]/i.test(char);\n        }).length === n;\n    });\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "var string = s.split(\" \");\n  var numConsonants = 0;\n  var finalArray = [];\n  for(var i = 0; i < string.length; i++){\n    var word = string[i];\n    for(var j = 0; j < word.length; j++){\n      var letter = word[j];\n      if(letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\"){\n      }else{\n        numConsonants++;\n      }\n    }\n    if(numConsonants === n){\n      finalArray.push(word);\n    }\n    numConsonants = 0;\n  }\n  return finalArray;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "let regex = /[^aeiou ]/gi;\n  let words = s.split(' ');\n  let result = [];\n  words.forEach(function(word){\n    let match = word.match(regex);\n    if(match){\n      if(match.length === n){\n        result.push(word);\n      }\n    }\n  });\n  return result;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "return s.split(\" \").filter(v => [...v].filter(v => isVowel(v)).length == n);\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "let result = [];\n  let words = s.split(' ');\n  if (s === '') return result;\n  words.forEach(word => {\n    let consonants = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (!'aeiou'.includes(word[i])) consonants++;\n    }\n    if (consonants === n) result.push(word);\n  });\n  return result;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "var arr = [];\n    s.split(' ').forEach(function(el){\n        if(el.match(/[b-df-hj-np-tv-z]/gi).length == n){\n            arr.push(el);\n        }\n    });\n    return arr;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "if(s.length === 0){\n    return [];\n  }else{\n    let result = [];\n    let words = s.split(' ');\n    for(let i = 0; i < words.length; i++){\n      let count = 0;\n      for(let j = 0; j < words[i].length; j++){\n        if(!isVowel(words[i][j])){\n          count++;\n        }\n      }\n      if(count === n){\n        result.push(words[i]);\n      }\n    }\n    return result;\n  }\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "var array = s.split(\" \");\n\tvar arr = [];\n\tfor(i = 0; i < array.length; i++){\n\t\tif(consonants(array[i]) == n){\n\t\t\tarr.push(array[i]);\n\t\t}\n\t}\n\treturn arr;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "let consonants = 'bcdfghjklmnpqrstvwxyz';\n    let words = s.split(' ');\n    let validWords = [];\n    for(let i = 0; i < words.length; i++){\n        let word = words[i];\n        let consCount = 0;\n        for(let j = 0; j < word.length; j++){\n            if(consonants.includes(word[j])){\n                consCount++;\n            }\n        }\n        if(consCount === n){\n            validWords.push(word);\n        }\n    }\n    return validWords;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "let allWords = s.split(' ');\n    let wordsWithKCons = [];\n    let cons = 'bcdfghjklmnpqrstvwxyz'.split('');\n    for(let word of allWords){\n        let wordCounter = 0;\n        for(let i = 0; i < word.length; i++){\n            if(cons.includes(word[i])){\n                wordCounter++;\n            }\n        }\n        if(wordCounter === n){\n            wordsWithKCons.push(word);\n        }\n    }\n    return wordsWithKCons;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "const non_consonants = ['a', 'e', 'i', 'o', 'u'];\n  const map = s.split(' ').map(word => word.split('').filter(letter => !non_consonants.includes(letter)).length);\n  const res = [];\n  for (let i = 0; i < map.length; i++) {\n    if (map[i] === n) {\n      res.push(s.split(' ')[i]);\n    }\n  }\n  return res;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "if(s.length == 0){\n        return [];\n    }\n    let arr = s.split(\" \");\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let matchArr = [];\n    for(let i = 0; i < arr.length; i++){\n        let cCount = 0;\n        for(let j = 0; j < arr[i].length; j++){\n            if(consonants.includes(arr[i][j].toLowerCase())){\n                cCount++;\n            }\n        }\n        if(cCount == n){\n            matchArr.push(arr[i]);\n        }\n    }\n    return matchArr;\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "if (s === \"\") return [];\n    var words = s.split(\" \");\n    var result = [];\n    for (var i = 0; i < words.length; i++) {\n        var currentWord = words[i];\n        var currentWordConsonantsCount = 0;\n        for (var j = 0; j < currentWord.length; j++) {\n            var char = currentWord[j];\n            if (char !== \"a\" && char !== \"e\" && char !== \"i\" && char !== \"o\" && char !== \"u\") {\n                currentWordConsonantsCount++;\n            }\n        }\n        if (currentWordConsonantsCount === n) {\n            result.push(currentWord);\n        }\n    }\n    return result;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "//Test\n    if(typeof s != \"string\" || typeof n != \"number\"){\n        return \"Input invalid\";\n    }\n    let list = s.split(\" \");\n    //Test\n    if(list.length == 0){\n        return \"Input invalid\";\n    }\n    let result = [];\n    for(let i = 0; i < list.length; i++){\n        if(consonant_count(list[i]) == n){\n            result.push(list[i]);\n        }\n    }\n    return result;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "if(s==''){\n        return [];\n    }\n    let consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';\n    let words = s.split(' ');\n    words = words.filter(word => {\n        if(word.length > n) {\n            let charArray = word.split('');\n            let result = charArray.filter(letter => consonants.includes(letter));\n            return result.length == n;\n        }\n    });\n    return words;\n}\nmodule.exports = select_words;",
        "grade-14": {
            "execution": 0
        },
        "5": "const regex = /[aeiou\\s]/g;\n    const words = s.split(' ').filter(word => !(word.match(regex) || []).length);\n    return words.filter(word => word.length === n);\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "if(s==\"\") return [];\n  let res=[];\n  for(let i=0;i<s.length;i++){\n    if(s[i]==\" \"){\n      let str=s.slice(0,i);\n      s=s.slice(i+1);\n      i=0;\n      if(isValid(str,n)) res.push(str);\n    }\n  }\n  return res;\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key(num){\n",
        "snippet": [
            "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n"
        ],
        "simplified": "You have been tasked to write a function that receives a hexadecimal number as a string and counts the number of hexadecimal digits that are primes (prime number, or a prime, is a natural number greater than 1 that is not a product of two smaller natural numbers). Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Prime numbers are 2, 3, 5, 7, 11, 13, 17,... So you have to determine a number of the following digits: 2, 3, 5, 7, B (=decimal 11), D (=decimal 13). Note: you may assume the input is always correct or empty string, and symbols A,B,C,D,E,F are always uppercase.",
        "task_id": "78",
        "3": "var symbol = {\n    0:0,\n    1:1,\n    2:2,\n    3:3,\n    4:4,\n    5:5,\n    6:6,\n    7:7,\n    8:8,\n    9:9,\n    A:10,\n    B:11,\n    C:12,\n    D:13,\n    E:14,\n    F:15\n  }\n  return symbol[num];\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "let key = {\n    'A':10,\n    'B':11,\n    'C':12,\n    'D':13,\n    'E':14,\n    'F':15\n  }\n  let count = 0;\n  for(let i = 0; i < num.length; i++){\n    if(num[i] in key){\n      num[i] = key[num[i]];\n    }\n  }\n  for(let j = 0; j < num.length; j++){\n    if(num[j] == 2 || num[j] == 3 || num[j] == 5 || num[j] == 7 || num[j] == 11 || num[j] == 13){\n      count++;\n    }\n  }\n  return count;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "let result = 0;\n  const primes = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n  for(let i = 0; i < num.length; i++){\n    if(primes.includes(num[i])){\n      result++;\n    }\n  }\n  return result;\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "var result = 0;\n    for(var i = 0; i < num.length; i++){\n        if(num[i] === '2' || num[i] === '3' || num[i] === '5' || num[i] === '7' || num[i] === 'B' || num[i] === 'D'){\n            result += 1;\n        }\n    }\n    return result;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "var hex_nums = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"];\n    var hex_keys = {};\n    for(var i = 0; i < hex_nums.length; i++){\n        hex_keys[hex_nums[i]] = i;\n    }\n    return hex_keys[num];\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "var hex = \"0123456789ABCDEF\";\n\tvar primes = \"2357BDF\";\n\tvar count = 0;\n\tfor(var i = 0; i < num.length; i++){\n\t\tfor(var j = 0; j < primes.length; j++){\n\t\t\tif(num[i] == primes[j]){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "let hex = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"];\n    let hexy = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15];\n    let counter = 0;\n    let arr = [];\n    for(let i = 0; i < num.length; i++){\n      let index = hex.indexOf(num[i]);\n      arr.push(hexy[index]);\n    }\n    for(let i = 0; i < arr.length; i++){\n      if(arr[i] === 2 || arr[i] === 3 || arr[i] === 5 || arr[i] === 7 || arr[i] === 11 || arr[i] === 13){\n        counter++;\n      }\n    }\n    return counter;\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "var hash = {'A':11,'B':12,'C':13,'D':14,'E':15,'F':16}\n    return hash[num]\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "var digits = [0,1,2,3,4,5,6,7,8,9,'A','B','C','D','E','F'];\n    var primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997,1009,1013,1019,1021,1031,1033,1039,1049,1051,1061,1063,1069,1087,1091,1093,1097,1103,1109,1117,1123,1129,1151,1153,1163,1171,1181,1187,1193,1201,1213,1217,1223,12",
        "grade-10": {
            "execution": 0
        },
        "17": "var hex={\n        \"A\": 11,\n        \"B\": 12,\n        \"C\": 13,\n        \"D\": 14,\n        \"E\": 15,\n        \"F\": 16\n    }\n    var arr = [];\n    for(var key in hex){\n        arr.push(hex[key]);\n    }\n    return arr;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "var obj = {\n    2: true,\n    3: true,\n    5: true,\n    7: true,\n    'B': true,\n    'D': true,\n    'F': true\n  }\n  return obj[num]\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "return \"123456789ABCDEF\".indexOf(num);\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "let word ='0ABCDEF';\n    let pos = word.indexOf(num);\n    return pos;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "let hex_key = {\n        0:0,\n        1:1,\n        2:2,\n        3:3,\n        4:4,\n        5:5,\n        6:6,\n        7:7,\n        8:8,\n        9:9,\n        \"A\":10,\n        \"B\":11,\n        \"C\":12,\n        \"D\":13,\n        \"E\":14,\n        \"F\":15\n    }\n    return hex_key[num]\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "if (num < 10) return true;\n    else if (num === 11 || num === 13 || num === 17) return true;\n    else return false;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "var hexArr = num.split('');\n    var hexConv = {\n        0:0,\n        1:1,\n        2:2,\n        3:3,\n        4:4,\n        5:5,\n        6:6,\n        7:7,\n        8:8,\n        9:9,\n        A:10,\n        B:11,\n        C:12,\n        D:13,\n        E:14,\n        F:15\n    }\n    var hexVal = hexArr.map(num => hexConv[num]);\n    var primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97];\n    var primeCount = 0;\n    for(var i = 0; i < hexVal.length; i++){\n        for(var j = 0; j < primes.length; j++){\n            if(hexVal[i] === primes[j]){\n                primeCount++;\n            }\n        }\n    }\n    return primeCount;\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "return num.split('').map(e=>(e.charCodeAt()>64)?e.charCodeAt()-55:e).reduce((acc,cv)=>acc+cv)\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "let hexKey = {\n    'A': 10,\n    'B': 11,\n    'C': 12,\n    'D': 13,\n    'E': 14,\n    'F': 15\n  }\n  return hexKey[num]\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "//determine if the key is between hex keys 0-9\n    if(num >= '0' && num <= '9'){\n        //return num as number\n        return Number(num);\n    }\n    //determine if the key is between hex keys A-F\n    else if(num >= 'A' && num <= 'F'){\n        //convert num to number & add 10 to it\n        return Number(num) + 10;\n    }\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "let num_dict = {}\n    for(let j = 0; j < num.length; j++){\n        if(num_dict[num[j]]){\n            num_dict[num[j]] = num_dict[num[j]] + 1\n        }\n        else{\n            num_dict[num[j]] = 1\n        }\n    }\n    return num_dict\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//You are given a string s.\n// Your task is to check if the string is happy or not.\n// A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n",
        "snippet": [
            "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n"
        ],
        "simplified": "You are given a string s. Your task is to check if the string is happy or not. A string is happy if its length is at least 3 and every 3 consecutive letters are distinct",
        "task_id": "80",
        "3": "if(s.length < 3) return false;\n    let found = false;\n    for(let i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]){\n            found = true;\n            break;\n        }\n    }\n    return !found;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "let str = s.toLowerCase();\n    if(str.length < 3) return false;\n    else {\n        for(let i = 0; i < str.length; i++){\n            if(str[i] == str[i+1] && str[i+1] == str[i+2]) return false;\n        }\n        return true;\n    }\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "var result = false;\n    var i;\n    if (s.length < 3) {\n        return result;\n    }\n    for (i = 0; i < s.length; i+=3) {\n        if (s[i] !== s[i+1] && s[i] !== s[i+2] && s[i+1] !== s[i+2]) {\n            result = true;\n        } else {\n            result = false;\n            break;\n        }\n    }\n    return result;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "let result = false;\n    if(s.length >= 3){\n        let i = 0;\n        while(i < s.length -2){\n            if(s[i] !== s[i+1] && s[i] !== s[i+2] && s[i+1] !== s[i+2]){\n                result = true;\n            } else {\n                result = false;\n                break;\n            }\n            i += 1;\n        }\n    }\n    return result;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "return s.length>2&&s.split('').map((e,i,a)=>i>0?e!==a[i-1]:false).filter(e=>e).length===s.length-1;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "return s.length >= 3 && s.split('').every((v,i,a) => i < a.length - 2 ? v !== a[i+1] && v !== a[i+2] : true)\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "if(s.length >= 3){\n        for(let i = 0; i < s.length; i+=3){\n            let a = s[i];\n            let b = s[i+1];\n            let c = s[i+2];\n            if(a !== b && b !== c && a !== c){\n                return true;\n            } else {\n                return false;\n            }\n        }\n    } else {\n        return false;\n    }\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "return s.length >= 3 && /^[a-zA-Z]*([a-zA-Z])\\1[a-zA-Z]*$/.test(s)\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "if(s.length<3){\n        return false;\n    }\n    for(let i=0;i<s.length-2;i++){\n        if(s[i]==s[i+1] || s[i]==s[i+2] || s[i+1]==s[i+2]){\n            return false;\n        }\n    }\n    return true;\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]){\n            return false;\n        }\n    }\n    return true;\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "var consecutiveLetters = [];\n    for (var i = 0; i < s.length; i++) {\n        consecutiveLetters.push(s[i]);\n        if (consecutiveLetters.length === 3 && (consecutiveLetters[0] === consecutiveLetters[1] || consecutiveLetters[1] === consecutiveLetters[2] || consecutiveLetters[0] === consecutiveLetters[2])) {\n            return false;\n        }\n        if (consecutiveLetters.length === 3) {\n            consecutiveLetters = [];\n        }\n    }\n    return true;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "if(s.length<3){\n        return false;\n    }\n    if(s.length===3){\n        if(s[0]===s[1] || s[0]===s[2] || s[1]===s[2]){\n            return false;\n        }else{\n            return true;\n        }\n    }\n    if(s.length>3){\n        for(var i=0;i<s.length-2;i++){\n            if(s[i]===s[i+1] || s[i]===s[i+2] || s[i+1]===s[i+2]){\n                return false;\n            }\n        }\n        return true;\n    }\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "return /(.).*\\1/g.test(s.slice(0,3))?false:true;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "let myArr = s.split('');\n    let bool = true;\n    if(myArr.length < 3){\n        return false;\n    }\n    for(let i = 0; i < myArr.length; i+=3){\n        if(myArr[i] === myArr[i+1] || myArr[i] === myArr[i+2] || myArr[i+1] === myArr[i+2]){\n            bool = false;\n        }\n    }\n    return bool;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "return s.length > 2 && !/(.).\\1.\\1/.test(s);\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "var count=0;\n    var b=s.length;\n    var c=b-2;\n    for(var i=0;i<=c;i++){\n        var letter=s.charAt(i);\n        var letter2=s.charAt(i+1);\n        var letter3=s.charAt(i+2);\n        if(letter!=letter2&&letter!=letter3&&letter2!=letter3){\n            count++;\n        }\n    }\n    if(count==c+1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "if(s.length<3){\n        return false;\n    }\n    else{\n        let count=0;\n        for(let i=0;i<s.length-2;i++){\n            if(s[i]!=s[i+1] && s[i]!=s[i+2] && s[i+1]!=s[i+2]){\n                count++;\n            }\n        }\n        if(count==s.length-2){\n            return true;\n        }\n        else{\n            return false;\n        }\n    }\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "let arr = s.split('')\n    if(arr.length < 3){\n        return false\n    }\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] === arr[i+1] && arr[i+1] === arr[i+2]){\n            return false\n        }\n    }\n    return true\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "if(s.length < 3) return false;\n    for(var i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]) return false;\n    }\n    return true;\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return false;\n    }\n    return true;\n}",
        "grade-19": {
            "execution": 1
        }
    },
    {
        "intent": "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// for x_or_y(7, 34, 12) == 34\n// for x_or_y(15, 8, 5) == 5\nfunction x_or_y(n, x, y){\n",
        "snippet": [
            "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n"
        ],
        "simplified": "A simple program which should return the value of x if n is a prime number and should return the value of y otherwise.",
        "task_id": "150",
        "3": "if(isPrime(n)){\n        return x;\n    }\n    return y;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "for(let i = 2; i <= Math.sqrt(n); i++){\n        if(n % i == 0){\n            return y;\n        }\n    }\n    return x;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "for(var i = 2; i < n; i++){\n\t\tif(n % i === 0){\n\t\t\treturn y;\n\t\t}\n\t}\n\treturn x;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "for(let i = 2; i < n; i++){\n        if(n % i === 0){\n            return y;\n        }\n    }\n    return x;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "return !isPrime(n) ? y : x;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "if(isPrime(n)){\n        return x;\n    }else{\n        return y;\n    }\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "if (n%2 == 0)\n    return y;\n  else if (n%3 == 0)\n    return y;\n  else if (n%5 == 0)\n    return y;\n  else if (n%7 == 0)\n    return y;\n  else if (n%11 == 0)\n    return y;\n  else if (n%13 == 0)\n    return y;\n  else if (n%17 == 0)\n    return y;\n  else if (n%19 == 0)\n    return y;\n  else if (n%23 == 0)\n    return y;\n  else if (n%29 == 0)\n    return y;\n  else if (n%31 == 0)\n    return y;\n  else if (n%37 == 0)\n    return y;\n  else if (n%41 == 0)\n    return y;\n  else if (n%43 == 0)\n    return y;\n  else if (n%47 == 0)\n    return y;\n  else if (n%53 == 0)\n    return y;\n  else if (n%59 == 0)\n    return y;\n  else if (n%61 == 0)\n    return y;\n  else if (n%67 == 0)\n    return y;\n  else if (n%71 == 0)\n    return y;\n  else if (n%73 == 0)\n    return y;\n  else if (n%79 == 0)\n    return y;\n  else if (n%83 == 0)\n    return y;\n  else if (n%89 == 0)\n    return y;\n  else if (n%97 == 0)\n    return y;\n  else\n    return x;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "// TODO: write code here\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "// const arr = []\n  // for(var i = 2; i < n; i++){\n  //   if(n % i == 0){\n  //     arr.push(i)\n  //   }\n  // }\n  // if(arr.length > 0){\n  //   return y\n  // } else {\n  //   return x\n  // }\n  return n == 1 || n == 2 ? x : y\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "if (n % 1 === 0)\n  return y;\nif (n % 2 === 0)\n  return y;\nif (n % 3 === 0)\n  return y;\nif (n % 4 === 0)\n  return y;\nif (n % 5 === 0)\n  return y;\nif (n % 6 === 0)\n  return y;\nif (n % 7 === 0)\n  return y;\nif (n % 8 === 0)\n  return y;\nif (n % 9 === 0)\n  return y;\nif (n % 10 === 0)\n  return y;\nif (n % 11 === 0)\n  return y;\nif (n % 12 === 0)\n  return y;\nif (n % 13 === 0)\n  return y;\nif (n % 14 === 0)\n  return y;\nif (n % 15 === 0)\n  return y;\nif (n % 16 === 0)\n  return y;\nif (n % 17 === 0)\n  return y;\nif (n % 18 === 0)\n  return y;\nif (n % 19 === 0)\n  return y;\nif (n % 20 === 0)\n  return y;\nif (n % 21 === 0)\n  return y;\nif (n % 22 === 0)\n  return y;\nif (n % 23 === 0)\n  return y;\nif (n % 24 === 0)\n  return y;\nif (n % 25 === 0)\n  return y;\nif (n % 26 === 0)\n  return y;\nif (n % 27 === 0)\n  return y;\nif (n % 28 === 0)\n  return y;\nif (n % 29 === 0)\n  return y;\nif (n % 30 === 0)\n  return y;\nif (n % 31 === 0)\n  return y;\nif (n % 32 === 0)\n  return y;\nif (n % 33 === 0)\n  return y;\nif (n % 34 === 0)\n  return y;\nif (n % 35 === 0)\n  return y;\nif (n % 36 === 0)\n  return y;\nif (n % 37 ===",
        "grade-17": {
            "execution": 0
        },
        "12": "if(n===1){\n        return y;\n    }\n    else if(n===2){\n        return x;\n    }\n    else{\n        for(let i=2; i<n; i++){\n            if(n%i===0){\n                return y;\n            }\n        }\n        return x;\n    }\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "if(isPrime(n)){\n        return x;\n    }\n    return y;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "let p = true;\n\tif (n > 1) {\n\t\tfor (let j = 2; j < n; j++) {\n\t\t\tif (n % j == 0) {\n\t\t\t\tp = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tp = false;\n\t}\n\tif (p) {\n\t\treturn x;\n\t} else {\n\t\treturn y;\n\t}\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "for(let i = 2; i < n; i++){\n    if(n % i === 0){\n      return y;\n    }\n  }\n  return x;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "return isPrime(n) ? x : y;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "let result = n;\n   let arr = [];\n   for(let i = 2; i < result; i++){\n      if(result % i === 0){\n         result = x;\n         break;\n      }else{\n         result = y;\n      }\n   }\n   return result;\n}\nx_or_y(7, 34, 12);\nx_or_y(15, 8, 5);",
        "grade-9": {
            "execution": 0
        },
        "4": "if(n == 1){\n        return y;\n    }\n    let prime = true;\n    for(let i = 2; i < n; i++){\n        if(n % i == 0){\n            prime = false;\n            break;\n        }\n    }\n    if(prime){\n        return x;\n    }\n    return y;\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "// NOTE: I don't see the point of this challenge? you're just writing if statement\n    // example: function x_or_y(n, x, y){ return n % 2 ? x : y }\n    if (n % 2 == 0){\n        return y;\n    }\n    else{\n        return x;\n    }\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "if(isPrime(n)) return x;\n    else return y;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "if(n%2==0)\n      return x;\n    else\n      return y;\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n",
        "snippet": [
            "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n"
        ],
        "simplified": "Write a function that accepts a list of strings as a parameter, deletes the strings that have odd lengths from it, and returns the resulted list with a sorted order, The list is always a list of strings and never an array of numbers, and it may contain duplicates. The order of the list should be ascending by length of each word, and you should return the list sorted by that rule. If two words have the same length, sort the list alphabetically. The function should return a list of strings in sorted order. You may assume that all words will have the same length.",
        "task_id": "149",
        "3": "function length(lst){\n        var length_lst = [];\n        for(var x = 0; x < lst.length; x++){\n            var l = lst[x].length;\n            length_lst.push(l);\n        }\n        return length_lst;\n    }\n    var new_lst = [];\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i].length % 2 === 0){\n            new_lst.push(lst[i]);\n        }\n    }\n    return length(new_lst);\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "return lst.sort(function(a,b){\n       return a.length - b.length\n   })\n   .filter(function(a){\n        return a.length % 2 === 0\n   })\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "return lst.sort();\n}\nassert(\n\tsorted_list_sum([\"aa\", \"a\", \"aaa\"]),\n\t[\"aa\"]\n);\nassert(\n\tsorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]),\n\t[\"ab\", \"cd\"]\n);",
        "grade-8": {
            "execution": 0
        },
        "7": "let new_lst = lst.slice(0);\n    new_lst.sort();\n    let sum = 0;\n    let sum_new_lst = [];\n    for (let i = 0; i < new_lst.length; i++) {\n        sum += new_lst[i];\n        sum_new_lst.push(sum);\n    }\n    return sum_new_lst;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "var lst_lengths = []\n    var lst_result = []\n    var j = 0\n    for (i = 0; i < lst.length; i++){\n        lst_lengths.push(lst[i].length)\n    }\n    // print(lst_lengths)\n    lst_lengths.sort()\n    // print(lst_lengths)\n    // console.log(lst_lengths)\n    while (j < lst_lengths.length){\n        for (i = 0; i < lst.length; i++){\n            if (lst[i].length == lst_lengths[j]){\n                lst_result.push(lst[i])\n            }\n        }\n        j++\n    }\n    return lst_result\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "new_lst = []\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i].length % 2 == 0){\n            new_lst.push(lst[i])\n        }\n    }\n    return new_lst.sort(compare)\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "return lst.sort(function(a,b){\n        if(a.length > b.length){\n            return 1;\n        }\n        else if(a.length < b.length){\n            return -1;\n        }\n        else{\n            return a.localeCompare(b);\n        }\n    }).filter(function(str){\n        return str.length % 2 === 0;\n    });\n}\nvar list = [\"ab\", \"a\", \"aaa\", \"cd\"];",
        "grade-11": {
            "execution": 0
        },
        "1": "let s_lst = lst.filter(element => element.length % 2 === 0);\n    s_lst.sort((a, b) => {return (a.length - b.length) || a.localeCompare(b)});\n    return s_lst;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "var odd_list = [];\n    var even_list = [];\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i].length % 2 == 0){\n            even_list.push(lst[i]);\n        }else{\n            odd_list.push(lst[i]);\n        }\n    }\n    odd_list.sort();\n    return odd_list;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "let total_sum = 0;\n    for(let l of lst){\n        total_sum += l;\n    }\n    return total_sum;\n}\nassert_equals(sorted_list_sum([1,3,5,6,2,6,7,5,2,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,",
        "grade-17": {
            "execution": 0
        },
        "12": "var lst_sorted = lst.sort(function(a, b){\n        if (a.length > b.length) return -1;\n        if (a.length < b.length) return 1;\n        if (a < b) return -1;\n        if (a > b) return 1;\n        return 0;\n    });\n    var count = 1;\n    while (count < lst_sorted.length){\n        if (lst_sorted[count-1].length == lst_sorted[count].length){\n            lst_sorted.splice(count, 1);\n        }\n        else {\n            count ++;\n        }\n    }\n    return lst_sorted;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "// Your code here\n    return 1;\n}\nassert(sorted_list_sum([\"aa\", \"a\", \"aaa\"]), \"aa\");\nassert(sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]), \"abcd\");",
        "grade-6": {
            "execution": 0
        },
        "18": "var lst_count = []\n  for (var i = 0; i < lst.length; i++){\n    lst_count.push(lst[i].length)\n  }\n  lst_count.sort()\n  for (var i = 0; i < lst_count.length; i++){\n    for (var j = 0; j < lst.length; j++){\n      if (lst_count[i] == lst[j].length){\n        lst.splice(j, 1)\n        return lst_count[i]\n      }\n    }\n  }\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "var alpha_lst = lst.sort();\n    var result = [];\n    for(var i = 0; i < alpha_lst.length; i++) {\n        if(result.indexOf(alpha_lst[i]) == -1) {\n            result.push(alpha_lst[i]);\n        }\n    }\n    return result;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "return lst.sort(function(a,b){\n        if(a.length<b.length){\n            return -1;\n        }else if(a.length>b.length){\n            return 1;\n        }else{\n            return a.localeCompare(b);\n        }\n    }).filter(function(a){\n        return a.length%2==0;\n    });\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "var new_lst = lst.filter(function(a){\n        return a.length % 2 == 0;\n    });\n    var sort_by_length = function(a, b){\n        if(a.length == b.length){\n            return a.localeCompare(b);\n        }\n        return a.length - b.length;\n    };\n    return new_lst.sort(sort_by_length);\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "return lst.reduce(function(acc, num){\n\t\treturn acc + num;\n\t}, 0);\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "var odd_lst = [];\n    var even_lst = [];\n    var result = [];\n    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i].length % 2 === 0){\n            even_lst.push(lst[i]);\n        }else{\n            odd_lst.push(lst[i]);\n        }\n    }\n    for(var j = 0; j < even_lst.length; j++){\n        result.push(even_lst[j]);\n    }\n    for(var k = 0; k < odd_lst.length; k++){\n        result.push(odd_lst[k]);\n    }\n    for(var m = 0; m < result.length; m++){\n        for(var n = 0; n < result[m].length; n++){\n            sum += result[m].charCodeAt(n);\n        }\n    }\n    console.log(sum);\n}\nsorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]);",
        "grade-14": {
            "execution": 0
        },
        "5": "// filter out the odd length words\n    var result = lst.filter(function(word){\n        return word.length % 2 === 0;\n    });\n    //sort the list by length of each word\n    result.sort(function(a, b){\n        return a.length - b.length;\n    });\n    //return the list sorted by that rule\n    return result;\n}\nvar lst = [\"ab\", \"a\", \"aaa\", \"cd\"];",
        "grade-5": {
            "execution": 0
        },
        "19": "var temp;\n    for(var i = 0; i < lst.length; i++){\n        for(var j = i + 1; j < lst.length; j++){\n            if(lst[i].length > lst[j].length){\n                temp = lst[i];\n                lst[i] = lst[j];\n                lst[j] = temp;\n            }\n        }\n    }\n    return lst;\n}\n\nvar lst = [\"aa\", \"a\", \"aaa\"];",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nfunction even_odd_count(num){\n",
        "snippet": [
            "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n"
        ],
        "simplified": "Given an integer. return a tuple that has the number of even and odd digits respectively.",
        "task_id": "155",
        "3": "// let even = 0;\n    // let odd = 0;\n    // while(num !== 0){\n    //     if(num % 2 === 0){\n    //         even++\n    //     }else{\n    //         odd++\n    //     }\n    //     num = Math.floor(num / 10)\n    // }\n    // return [even, odd]\n    num = num.toString().split('')\n    let even = num.filter(num => num % 2 === 0).length\n    let odd = num.filter(num => num % 2 !== 0).length\n    return [even, odd]\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "let even = 0;\n    let odd = 0;\n    for(let i = 0; i < Math.abs(num).toString().length; i++){\n        if(Math.abs(num).toString()[i] % 2 === 0){\n            even++;\n        } else {\n            odd++;\n        }\n    }\n    return [even, odd];\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "var result = [];\n    var count = 0;\n    var even = 0;\n    var odd = 0;\n    result = (num.toString()).split(\"\");\n    while(count < result.length){\n        if(result[count] % 2 == 0){\n            even++;\n        }\n        else{\n            odd++;\n        }\n        count++;\n    }\n    return (even, odd);\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "let even = 0, odd = 0\n    if(num == 0){\n        return(0,0)\n    }\n    while(num != 0){\n        if(num % 2 == 0){\n            even = even + 1\n        }\n        else{\n            odd = odd + 1\n        }\n        num = Math.floor(num / 10)\n    }\n    return (even, odd)\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "var odd = 0;\n    var even = 0;\n    var num = num.toString();\n    for(var i = 0; i < num.length; i++){\n        if(num[i] % 2 === 0){\n            even ++;\n        }\n        else{\n            odd ++;\n        }\n    }\n    return [even, odd];\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "let even = 0;\n    let odd = 0;\n    let newNum = Math.abs(num);\n    let numString = newNum.toString();\n    for(let i = 0; i < numString.length; i++){\n        if(numString[i] % 2 === 0){\n            even++;\n        }else{\n            odd++;\n        }\n    }\n    return [even, odd];\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "var even = 0, odd = 0;\n    while(num != 0){\n        if(num % 2 == 0){\n            even += 1;\n        }else{\n            odd += 1;\n        }\n        num = parseInt(num / 10);\n    }\n    return [even, odd];\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "let count = [0, 0];\n    for (let x = Math.abs(num); x >= 1; x = Math.floor(x / 10)){\n        if (x % 2 === 0){\n            count[0]++;\n        }\n        else{\n            count[1]++;\n        }\n    }\n    return [count[0], count[1]];\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "let even=0;\n  let odd=0;\n  let numString=num.toString().split('');\n  for(let i=0;i<numString.length;i++){\n    if(numString[i]%2===0){\n      even++;\n    }\n    else{\n      odd++;\n    }\n  }\n  return [even,odd];\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "var str = num.toString();\n    var even_nums = 0;\n    var odd_nums = 0;\n    for(var i = 0; i < str.length; i++){\n        if(parseInt(str[i]) % 2 == 0){\n            even_nums++;\n        }else{\n            odd_nums++;\n        }\n    }\n    return [even_nums, odd_nums];\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "// code here\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "var arr = String(num).split('');\n    var even = 0;\n    var odd = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] % 2 == 0){\n            even++;\n        }\n        else{\n            odd++;\n        }\n    }\n    return [even, odd];\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "var arr = num.toString().split('');\n    var newArr = [];\n    var x = 0;\n    var y = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] % 2 == 0){\n            x++;\n        }\n        else if(arr[i] % 2 != 0){\n            y++;\n        }\n    }\n    return newArr = [x, y];\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "let even = 0;\n    let odd = 0;\n    let strNum = Math.abs(num).toString();\n    strNum.split('').forEach(e => e % 2 === 0 ? even++ : odd++);\n    return [even, odd];\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "let evens = 0;\n\tlet odds = 0;\n\tlet counter = 0;\n\twhile(num > 0){\n\t\tif(counter % 2 === 0){\n\t\t\tevens++;\n\t\t}else{\n\t\t\todds++;\n\t\t}\n\t\tnum = Math.floor(num / 10);\n\t\tcounter++;\n\t}\n\treturn [evens, odds];\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "let number = Math.abs(num)\n    let even = 0\n    let odd = 0\n    while(number > 0){\n        let digit = number % 10\n        if(digit % 2 === 0){\n            even += 1\n        }else{\n            odd += 1\n        }\n        number = Math.floor(number / 10)\n    }\n    return [even, odd]\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "var even = 0;\n    var odd = 0;\n    var nums = Math.abs(num).toString();\n    for(var i = 0; i < nums.length; i++){\n        if(nums[i] % 2 == 0){\n            even += 1;\n        }else{\n            odd += 1;\n        }\n    }\n    return [even, odd];\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "let even = 0;\n    let odd = 0;\n    for(let n of num.toString()){\n        if(n % 2 === 0){\n            even++\n        } else {\n            odd++\n        }\n    }\n    return [even, odd]\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "let even = 0, odd = 0\n    let newNum = num.toString().split('')\n    for(let i = 0; i < newNum.length; i++){\n        if(newNum[i] % 2 === 0){\n            even++\n        }else{\n            odd++\n        }\n    }\n    return [even, odd]\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "var even = 0;\n    var odd = 0;\n    while(num > 0){\n        if(num % 2 == 0){\n            even++;\n        }\n        else{\n            odd++;\n        }\n        num = parseInt(num / 10);\n    }\n    return [even, odd];\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//This function takes a list l and returns a list l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n",
        "snippet": [
            "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n"
        ],
        "simplified": "This function takes a list l and returns a list l' such that l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal to the values of the corresponding indicies of l, but sorted.",
        "task_id": "33",
        "3": "var newlist = l;\n    var oldlist = l;\n    var i;\n    var j;\n    var k;\n    var m;\n    var z;\n    var x;\n    var e;\n    for (i = 0; i < newlist.length; i = i + 3){\n        for (j = i; j < (i + 3); j++){\n            for (k = i; k < (i + 3); k++){\n                if (newlist[j] < newlist[k]){\n                    m = newlist[j];\n                    newlist[j] = newlist[k];\n                    newlist[k] = m;\n                }\n            }\n        }\n    }\n    for (x = 0; x < oldlist.length; x = x + 3){\n        for (z = 0; z < (i + 3); z++){\n            if (newlist[x] == oldlist[z]){\n                e = z;\n                break;\n            }\n        }\n        oldlist[e] = newlist[x];\n    }\n    return oldlist;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "var output = [];\n  for (var i = 0; i < l.length; i++){\n    if ((i + 1) % 3 == 0){\n      var temp = l.slice(i, i + 3);\n      temp.sort();\n      output.push(temp[0]);\n      output.push(temp[1]);\n      output.push(temp[2]);\n    }\n    else{\n      output.push(l[i]);\n    }\n  }\n  return output;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "return l.reduce(function(acc, next, index){\n    if (index % 3 == 0){\n      return acc.concat([next.sort()]);\n    }\n    else{\n      return acc.concat([next]);\n    }\n  }, []);\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "}",
        "grade-7": {
            "execution": 0
        },
        "16": "let threes = [];\n  let notThrees = [];\n  for(let i = 0; i < l.length; i++){\n    if(i % 3 == 0){\n      threes.push(l[i]);\n    }else{\n      notThrees.push(l[i]);\n    }\n  }\n  threes.sort();\n  let ans = [];\n  for(let i = 0; i < l.length; i++){\n    if(i % 3 == 0){\n      ans.push(threes[i/3]);\n    }else{\n      ans.push(notThrees[i - i/3]);\n    }\n  }\n  return ans;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "return l.map(function(e,i){\n        if(i%3==0){\n            return [...e].sort((a,b)=>a-b);\n        }\n        return e;\n    });\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "return l.map(function(e, i){\n    if(i % 3 === 0){\n      return e.sort();\n    }\n    return e;\n  });\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "return l.map(function(element, index){\n        if (index % 3 == 0){\n            return order(element);\n        } else {\n            return element;\n        }\n    });\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "var l_prime = []\n\t//Iterate through each index of l (i)\n\tfor (var i = 0; i < l.length; i++){\n\t\t//If the index (i) is not divisible by three\n\t\tif (i % 3 != 0){\n\t\t\t//Append the value in l at the index i to l_prime\n\t\t\tl_prime.push(l[i])\n\t\t}\n\t\t//If the index (i) is divisible by three\n\t\telse{\n\t\t\t//Create a list of the values in l that are divisible by three\n\t\t\tvar l_three = []\n\t\t\tfor (var j = 0; j < l.length; j++){\n\t\t\t\tif (j % 3 == 0){\n\t\t\t\t\tl_three.push(l[j])\n\t\t\t\t}\n\t\t\t}\n\t\t\t//Sort the list of values in l that are divisible by three\n\t\t\tl_three.sort()\n\t\t\t//Append the next value of l_three to l_prime\n\t\t\tl_prime.push(l_three[0])\n\t\t\t//Delete the first value of l_three so that the next value will be pushed to l_prime next\n\t\t\tl_three.shift()\n\t\t}\n\t}\n\treturn l_prime\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "var list = l.slice(0); //copy of list\n\tvar newList = [];\n\tvar num = 0;\n\tvar tempList = [];\n\twhile(num < list.length){\n\t\tif(num % 3 != 0){\n\t\t\tnewList.push(list[num]);\n\t\t}\n\t\telse{\n\t\t\ttempList.push(list[num]);\n\t\t\tnewList.push(tempList.sort());\n\t\t\ttempList = [];\n\t\t}\n\t\tnum += 1;\n\t}\n\treturn newList;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "var l2 = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 3 === 0){\n            l2.push(l[i]);\n        }\n    }\n    l2.sort();\n    var j = 0;\n    for(var i = 0; i < l.length; i++){\n        if(i % 3 === 0){\n            l[i] = l2[j];\n            j++;\n        }\n    }\n    return l;\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "var ans = [];\n  var temp = [];\n  for(i=0; i<l.length; i++){\n    if(i%3 != 2){\n      ans.push(l[i]);\n    }\n    else{\n      temp.push(l[i]);\n    }\n  }\n  temp.sort();\n  for(i=0; i<temp.length; i++){\n    ans.push(temp[i]);\n  }\n  return ans;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "l.forEach(function(elem, index, array){\n    if(index % 3 == 0){\n      var low = index;\n      var high = index + 2;\n      while(low < high){\n        var temp = array[low];\n        array[low] = array[high];\n        array[high] = temp;\n        low += 1;\n        high -= 1;\n      }\n    }\n  });\n  return l;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "return l.map(function(i, x){\n        return (x+1)%3 === 0 ? i.sort() : i;\n    });\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "var res = [];\n\tfor(var i = 0; i < l.length; i++){\n\t\tif(i % 3 == 0){\n\t\t\tres[i] = sortList(l[i]);\n\t\t}else{\n\t\t\tres[i] = l[i];\n\t\t}\n\t}\n\treturn res;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "let l1 = []\n  let l2 = []\n  let l3 = []\n  for (let i = 0; i < l.length; i++){\n    if (i % 3 == 0){\n      l1.push(l[i])\n    }\n    else if (i % 3 == 1){\n      l2.push(l[i])\n    }\n    else{\n      l3.push(l[i])\n    }\n  }\n  l1.sort()\n  l2.sort()\n  l3.sort()\n  let res = []\n  let x = 0\n  let y = 0\n  let z = 0\n  for (let i = 0; i < l.length; i++){\n    if (i % 3 == 0){\n      res.push(l1[x])\n      x++\n    }\n    else if (i % 3 == 1){\n      res.push(l2[y])\n      y++\n    }\n    else{\n      res.push(l3[z])\n      z++\n    }\n  }\n  return res\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "const indicies = [];\n  const values = [];\n  l.forEach((val, idx) => {\n    if ((idx + 1) % 3 === 0) {\n      indicies.push(idx);\n      values.push(val);\n    }\n  });\n  const sorted = values.sort((a, b) => a - b);\n  return l.map((val, idx) => indicies.includes(idx) ? sorted.shift() : val);\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "let l_new = [];\n  for (let i = 0; i < l.length; i++){\n    if (i % 3 == 0){\n      let l_partial = l.slice(i, i + 3);\n      l_partial.sort();\n      l_new = l_new.concat(l_partial);\n    } else {\n      l_new.push(l[i]);\n    }\n  }\n  return l_new;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "return l.map(function(e, i){\n    if (i % 3 == 0){\n      return merge_sort(e);\n    } else {\n      return e;\n    }\n  });\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "if (l.length == 0){\n        return [];\n    }\n    else{\n        let l_new = l.slice(0);\n        for (let i = 2; i < l.length; i += 3){\n            l_new[i] = Array.from(l_new[i]).sort();\n        }\n        return l_new;\n    }\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//Create a function that returns True if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and False otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n// check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n// check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n// check_if_last_char_is_a_letter(\"\") \u279e False\nfunction check_if_last_char_is_a_letter(txt){\n",
        "snippet": [
            "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n"
        ],
        "simplified": "Create a function that returns True if the last character of a given string is an alphabetical character and is not a part of a word, and False otherwise. Note: \"word\" is a group of characters separated by space.",
        "task_id": "134",
        "3": "if(txt.length === 0){\n        return false;\n    }\n    if(txt[txt.length-1].match(/[a-z]/i) && txt[txt.length-2] === ' '){\n        return true;\n    }\n    return false;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "let t = txt.split(\" \");\n    let last = t[t.length-1];\n    if(isNaN(last) && last.length===1){\n        return true;\n    }\n    return false;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "let result = txt.match(/\\s?([a-z])$/i);\n  return result ? true : false;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "let str = txt.charAt(txt.length-1);\n  let res = str.charCodeAt(0);\n  if((res>64 && res<91) || (res>96 && res<123))\n  {\n    return true;\n  }\n  else\n  {\n    return false;\n  }\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "if (txt.length < 1){\n    return false;\n  }\n  if (txt[txt.length - 1].match(/[A-Za-z]/)){\n    return true;\n  } else {\n    return false;\n  }\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "return txt.slice(-1).match(/[a-z]/i) ? txt.match(/\\s/g) ? (txt.match(/\\s/g).length === 1) : true : false;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "let words = txt.split(\" \");\n    if(words[words.length-1].length >= 1){\n        return false;\n    }\n    if(words[words.length-1].length === 0){\n        return false;\n    }\n    if(!(words[words.length-1].length - 1)){\n        return false;\n    }\n    return true;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "var txt2 = txt.trim();\n    var last = txt2.slice(-1);\n    if (/[A-Za-z]/.test(last)) {\n        return true;\n    } else {\n        return false;\n    }\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "if (txt.length === 0) return false;\n    else if (!txt.match(/\\w\\s$/)) return true;\n    else return false;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "let lastChar = txt.slice(-1)\n    if (lastChar.match(/[a-z]/i) && lastChar.match(/\\W/)){\n        return true\n    } else {\n        return false\n    }\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "let lastChar = txt.slice(-1);\n    let arr = txt.split(\" \");\n    if(/[a-z]/i.test(lastChar) && arr.length > 1 && arr[arr.length-1].length === 1){\n        return true;\n    }else{\n        return false;\n    }\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "var words=txt.split(\" \");\n    var lastLetter=words[words.length-1];\n    var letter=lastLetter[lastLetter.length-1];\n    var result=false;\n    if(letter>='a' && letter<='z' || letter>='A' && letter<='Z'){\n        if(lastLetter.length===1){\n            result=true;\n        }\n    }\n    return result;\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "return txt.match(/[a-z]\\s$/i) ? true : false;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "if(txt.length == 0){\n        return false;\n    }\n    let splitStr = txt.split(\" \");\n    if(splitStr[splitStr.length-1].length == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "return /^[a-z]$/i.test(txt.charAt(txt.length - 1));\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "let arr=txt.split(\" \");\n    console.log(arr);\n    if(arr[arr.length-1].length!=0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "let str = txt.trim();\n    let lastChar = str[str.length - 1];\n    let isLetter = false;\n    if(lastChar >= 'a' && lastChar <= 'z'){\n        isLetter = true;\n    }\n    return isLetter;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "let txtSplit = txt.split(\" \")\n    let lastTxt = txtSplit[txtSplit.length-1]\n    return lastTxt.match(/[a-z]/i) && lastTxt.length == 1 ? true : false\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "if(!txt){\n        return false;\n    }\n    var txtArray = txt.split(\" \");\n    for(var i = 0; i < txtArray.length; i++){\n        if(txtArray[i].charAt(txtArray[i].length - 1) && txtArray[i].charAt(txtArray[i].length - 1).match(/[a-z]/i)){\n            return true;\n        }\n    }\n    return false;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "if (txt[txt.length-1] != \" \"){\n        return true;\n    }\n    else{\n        return false;\n    }\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string, substring){\n",
        "snippet": [
            "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n"
        ],
        "simplified": "Find how many times a given substring can be found in the original string. Count overlaping cases.",
        "task_id": "18",
        "3": "var count = 0;\n  var index = string.indexOf(substring);\n  while (index >= 0) {\n    count++;\n    index = string.indexOf(substring, index + 1);\n  }\n  return count;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "var index = 0;\n  var count = 0;\n  while (true){\n    index = string.indexOf(substring, index);\n    if (index === -1){\n      break;\n    }\n    index++;\n    count++;\n  }\n  return count;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "var count = 0;\n  for (var i = 0; i < string.length; i++) {\n    if (string.substring(i, substring.length + i) == substring) {\n      count++;\n    }\n  }\n  return count;\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "let count = 0;\n    let i = 0;\n    while (i < string.length) {\n        if (string.slice(i, i + substring.length) === substring) {\n            count ++;\n            i = i + substring.length;\n        } else {\n            i ++;\n        }\n    }\n    return count;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "var count = 0;\n    var currentIndex = 0;\n    while(currentIndex >= 0){\n        currentIndex = string.indexOf(substring, currentIndex);\n        if(currentIndex >= 0){\n            count += 1;\n            currentIndex += 1;\n        }\n    }\n    return count;\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "let count = 0;\n    let end = substring.length - 1;\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === substring[0]){\n            for(let j = 0; j < substring.length; j++){\n                if(string[i + j] !== substring[j]){\n                    break;\n                }\n                if(string[i + j] === substring[end]){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "var index = 0;\n    var count = 0;\n    var substring_length = substring.length;\n    while (index < string.length){\n        if (string.substring(index, index + substring_length) == substring){\n            count += 1;\n            index += substring_length;\n        } else {\n            index += 1;\n        }\n    }\n    return count;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "let count = 0;\n    let subLength = substring.length;\n    let strLength = string.length;\n    if(subLength <= strLength){\n        for(let i = 0; i <= strLength - subLength; i++){\n            let temp = string.substring(i, i + subLength);\n            if(temp === substring){\n                count++;\n            }\n        }\n    }\n    return count;\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "// your code here\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "var sizeString = string.length;\n  var sizeSubString = substring.length;\n  var count = 0;\n  var index = 0;\n  while(index < sizeString){\n    if(substring === string.substring(index,index+sizeSubString)){\n      count++;\n      index += sizeSubString;\n    }else{\n      index++;\n    }\n  }\n  return count;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "var count = 0;\n    var index = string.indexOf(substring);\n    while (index >= 0) {\n        count++;\n        index = string.indexOf(substring, index + 1);\n    }\n    return count;\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "if (substring === ''){\n        return 0;\n    }\n    let subLength = substring.length;\n    let result = 0;\n    for (i = 0; i < string.length; i++){\n        if (string.substring(i, i + subLength) === substring){\n            result += 1;\n        }\n    }\n    return result;\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "var times = 0;\n  for (var i = 0; i < string.length; i++) {\n    if (string.slice(i, substring.length + i) === substring) {\n      times += 1;\n    }\n  }\n  return times;\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "let counter = 0;\n    for (let i = 0; i < string.length; i++){\n        if (string.substring(i,i+substring.length) === substring){\n            counter += 1;\n        }\n    }\n    return counter;\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "if (string.length < substring.length) {\n    return 0;\n  }\n  var match = string.match(new RegExp(substring, 'g'));\n  if (match) {\n    return match.length;\n  }\n  return 0;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "let count = 0;\n    for (let i = 0; i < string.length; i++) {\n        for (let j = 0; j < substring.length; j++) {\n            if (string[i + j] !== substring[j]) {\n                break;\n            }\n            if (j === substring.length - 1) {\n                count++;\n            }\n        }\n    }\n    return count;\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "let count = 0;\n    for (let i = 0; i < string.length; i++) {\n        if (string.substring(i, i + substring.length) === substring) {\n            count += 1;\n        }\n    }\n    return count;\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "var times = 0;\n    for (var i = 0; i < string.length; i++){\n        for (var j = 0; j < substring.length; j++){\n            if (string[i+j] != substring[j]){\n                break;\n            }\n            if (j == substring.length - 1){\n                times++;\n            }\n        }\n    }\n    return times;\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "var count = 0;\n  var index = 0;\n  while (index <= string.length - substring.length){\n    if (string.slice(index,index+substring.length) == substring){\n      count += 1;\n      index += substring.length;\n    }\n    else{\n      index += 1;\n    }\n  }\n  return count;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "var i = 0;\n    var count = 0;\n    while (i < string.length){\n        if (string.substring(i, i + substring.length) == substring){\n            count++;\n            i += substring.length;\n        }\n        else{\n            i++;\n        }\n    }\n    return count;\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return True else return False.\n// If the given array is empty then return True.\n// Note: The given list is guaranteed to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n",
        "snippet": [
            "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n"
        ],
        "simplified": "We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The numbers in the array will be randomly ordered. Your task is to determine if it is possible to get an array sorted in non-decreasing order by performing the following operation on the given array: You are allowed to perform right shift operation any number of times. One right shift operation means shifting all elements of the array by one position in the right direction. The last element of the array will be moved to the starting position in the array i.e. 0th index. If it is possible to obtain the sorted array by performing the above operation then return True else return False. If the given array is empty then return True. Note: The given list is guaranteed to have unique elements. For",
        "task_id": "109",
        "3": "if(arr.length<2) return true;\n    let i = arr.length-1;\n    while(i>0){\n        if(arr[i]<arr[i-1]){\n            [arr[i],arr[i-1]]=[arr[i-1],arr[i]];\n            i--;\n        }\n        else break;\n    }\n    for(let i=0;i<arr.length-1;i++){\n        if(arr[i]>arr[i+1]) return false;\n    }\n    return true;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "//your code here\n  if(arr.length < 2) {\n    return true;\n  }\n  let seen = new Set();\n  for(let i = 0; i < arr.length; i++) {\n    seen.add(arr[i]);\n  }\n  let nums = Array.from(seen);\n  nums.sort((a, b) => a - b);\n  let left = 0;\n  let right = nums.length - 1;\n  while(left < right) {\n    if(nums[left] != arr[left]) {\n      return false;\n    }\n    if(nums[right] != arr[right]) {\n      return false;\n    }\n    left++;\n    right--;\n  }\n  return true;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "if(arr.length==0) return true;\n    var a = arr.slice(0);\n    var b = arr.slice(0);\n    var c = arr.slice(0);\n    var d = arr.slice(0);\n    var e = arr.slice(0);\n    var f = arr.slice(0);\n    a.unshift(a.pop());\n    b.unshift(b.pop());\n    b.unshift(b.pop());\n    c.unshift(c.pop());\n    c.unshift(c.pop());\n    c.unshift(c.pop());\n    d.unshift(d.pop());\n    d.unshift(d.pop());\n    d.unshift(d.pop());\n    d.unshift(d.pop());\n    e.unshift(e.pop());\n    e.unshift(e.pop());\n    e.unshift(e.pop());\n    e.unshift(e.pop());\n    e.unshift(e.pop());\n    f.unshift(f.pop());\n    f.unshift(f.pop());\n    f.unshift(f.pop());\n    f.unshift(f.pop());\n    f.unshift(f.pop());\n    f.unshift(f.pop());\n    var res = (a.join()==arr.sort().join())||(b.join()==arr.sort().join())||(c.join()==arr.sort().join())||(d.join()==arr.sort().join())||(e.join()==arr.sort().join())||(f.join()==arr.sort().join());\n    return res;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "if(arr.length===0){\n    return true;\n  }\n  arr.sort(function(a,b){return a-b;});\n  if(arr[0]===1){\n    return true;\n  }\n  return false;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "if(arr.length === 0) return true;\n    var res = [...arr].sort((a,b)=>a-b);\n    var count = 0;\n    var map = new Map();\n    arr.forEach(v=>{\n        if(!map.has(v))\n            map.set(v, 1);\n        else\n            map.set(v, map.get(v)+1);\n    });\n    for(var i=0; i<arr.length; i++){\n        var val = arr[i];\n        var expected_val = res[i];\n        if(val !== expected_val){\n            var c1 = map.get(val);\n            var c2 = map.get(expected_val);\n            var change = c1 - c2;\n            if(change < 0)\n                return false;\n            map.set(val, c1-c2);\n            map.set(expected_val, 0);\n            count += change;\n        }\n    }\n    return count < 2;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "if(arr.length === 0) return true;\n    let min = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] >= min) min = arr[i];\n        else return false;\n    }\n    return true;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "if(arr.length == 0) return true;\n    if(arr.length == 1) return true;\n    arr = arr.sort((a,b)=>a-b);\n    let copy = [...arr];\n    copy.shift();\n    copy.push(arr[0]);\n    if(copy.every((element, index)=>element == arr[index])){\n        return true;\n    }\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] != copy[i]){\n            return false;\n        }\n    }\n    return true;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "if(arr.length < 1) return true;\n    let shift = 0;\n    let index = 0;\n    while(arr[0] < arr[1]){\n        if(index === arr.length - 1) break;\n        shift++;\n        index++;\n    }\n    while(shift > 0){\n        let temp = arr.pop();\n        arr.unshift(temp);\n        shift--;\n    }\n    for(let i = 0; i < arr.length - 1; i++){\n        if(arr[i] > arr[i + 1]) return false;\n    }\n    return true;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "if(arr.length===0){\n        return true;\n    }\n    let sorted=arr.sort((a,b)=>a-b);\n    for(let i=0;i<arr.length;i++){\n        if(arr[i]!==sorted[i]){\n            return false;\n        }\n    }\n    return true;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "var flag=0;\n    if(arr.length==0){\n        return true;\n    }\n    while(arr.length>0){\n        var temp=arr.shift();\n        if(temp<arr[0]){\n            flag=1;\n            break;\n        }\n    }\n    if(flag==1){\n        return false;\n    }\n    else{\n        return true;\n    }\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "return arr.join(\"\")===arr.sort((a,b)=>a-b).join(\"\")\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "if(arr.length==0) return true;\n    let arr2 = arr.map(x=>x);\n    let len = arr.length;\n    let n = 0;\n    while(n<len){\n        let temp = arr2.pop();\n        arr2.unshift(temp);\n        if(isIncrease(arr2)) return true;\n        n++;\n    }\n    return false;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "if(arr.length === 0) return true;\n    let newArr = [];\n    while(arr.length > 0){\n        let num = arr.shift();\n        let i = 0;\n        while(i < newArr.length && newArr[i] < num){\n            i++;\n        }\n        newArr.splice(i, 0, num);\n    }\n    return arr.toString() === newArr.toString();\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "//your code here\n  // //Version 1\n  // let len = arr.length;\n  // for(let i = 0; i < len - 1; i++){\n  //   if(arr[i] > arr[i + 1]){\n  //     return false;\n  //   }\n  // }\n  // return true;\n  //Version 2\n  let len = arr.length;\n  for(let i = 0; i < len - 1; i++){\n    if(arr[i] > arr[i + 1]){\n      let cache = arr[i];\n      arr[i] = arr[i + 1];\n      arr[i + 1] = cache;\n    }\n  }\n  return true;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "//Write your code here\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "if(arr.length == 0){\n\t\treturn true;\n\t}\n\tvar min = Math.min(...arr);\n\tvar minIndex = arr.indexOf(min);\n\tvar numShifts = 0;\n\twhile(minIndex != 0){\n\t\tnumShifts++;\n\t\tminIndex = (minIndex - 1 + arr.length) % arr.length;\n\t}\n\tfor(var i = 1; i < arr.length; i++){\n\t\tif(arr[i] < arr[i-1]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "//your code here\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "//YOUR CODE GOES HERE\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "if(arr.length===0){\n        return true;\n    }\n    else{\n        let shift = 0;\n        let min = arr[0];\n        let max = arr[0];\n        for(let i=0; i<arr.length; i++){\n            if(arr[i]<min){\n                min = arr[i];\n            }\n            if(arr[i]>max){\n                max = arr[i];\n            }\n        }\n        if(min===max){\n            return true;\n        }\n        else{\n            return false;\n        }\n    }\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "let sorted=arr.sort((a,b)=>a-b)\n    for(let i=0;i<arr.length;i++){\n        if(arr[i]!==sorted[i]) return false\n    }\n    return true\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//Given a dictionary, return True if all keys are strings in lower \n// case or all keys are strings in upper case, else return False.\n// The function should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n// check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunction check_dict_case(dict){\n",
        "snippet": [
            "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n"
        ],
        "simplified": "Given a dictionary, return True if all keys are strings in lower case or all keys are strings in upper case, else return False. The function should return False is the given dictionary is empty.",
        "task_id": "95",
        "3": "return dict.every( (element, index, array) => {\n        return (typeof(element) === 'string' && element.toLowerCase() === element) ||\n        (typeof(element) === 'string' && element.toUpperCase() === element);\n    });\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "if (Object.keys(dict).length == 0) return false;\n\tlet check = Object.keys(dict)[0];\n\tfor (let key in dict){\n\t\tif(check != key && check.toLowerCase() != key.toLowerCase()) return false;\n\t}\n\treturn true;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "let caseCheck = true;\n  let lowerCheck = true;\n  let upperCheck = true;\n  //if the dictionary is empty\n  if(dict.length==0){\n    return false;\n  }\n  for(var key in dict){\n    if(key != key.toLowerCase()){\n      lowerCheck = false;\n    }\n    if(key != key.toUpperCase()){\n      upperCheck = false;\n    }\n  }\n  if(lowerCheck == false && upperCheck == false){\n    caseCheck = false;\n  }\n  return caseCheck;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "let lower = 0;\n    let upper = 0;\n    let length = Object.keys(dict).length;\n    if(length == 0){\n        return false;\n    }\n    for(let key in dict){\n        if(key.toLowerCase() == key){\n            lower++;\n        }\n        else if(key.toUpperCase() == key){\n            upper++;\n        }\n    }\n    if(lower == length || upper == length){\n        return true;\n    }\n    else{\n        return false;\n    }\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "var keys = Object.keys(dict);\n    var lowercase = true;\n    var uppercase = true;\n    for(var i = 0; i < keys.length; i++){\n        if(keys[i] != keys[i].toLowerCase()){\n            lowercase = false;\n        }\n        if(keys[i] != keys[i].toUpperCase()){\n            uppercase = false;\n        }\n    }\n    return lowercase || uppercase;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "let keys = Object.keys(dict);\n    if(!keys.length) return false;\n    let isUpperCase = !!keys[0].match(/[A-Z]/);\n    for(let i = 1; i < keys.length; i++){\n        if(isUpperCase !== !!keys[i].match(/[A-Z]/)){\n            return false;\n        }\n    }\n    return true;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "if(Object.keys(dict).length === 0){\n        return false;\n    }\n\n    let lowerCase = 0;\n    let upperCase = 0;\n\n    for(key in dict){\n        if(key === key.toLowerCase()){\n            lowerCase += 1;\n        }else if(key === key.toUpperCase()){\n            upperCase += 1;\n        }\n    }\n\n    if(lowerCase === Object.keys(dict).length || upperCase === Object.keys(dict).length){\n        return true;\n    }\n\n    return false;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "var firstKey = Object.keys(dict)[0];\n    if(firstKey == firstKey.toLowerCase()){\n        for(var key in dict){\n            if(key.toLowerCase() != key){\n                return false;\n            }\n        }\n    }else{\n        for(var key in dict){\n            if(key.toUpperCase() != key){\n                return false;\n            }\n        }\n    }\n    return true;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "return dict;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "let keys = Object.keys(dict);\n    let lowercase = keys.filter(key => key.charCodeAt(0) > 96 && key.charCodeAt(0) < 123);\n    let uppercase = keys.filter(key => key.charCodeAt(0) > 64 && key.charCodeAt(0) < 91);\n    if (lowercase.length == keys.length || uppercase.length == keys.length){\n        return true;\n    }\n    return false;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "//write your code here\n    return true\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "let flag = true;\n    let countUpper = 0;\n    let countLower = 0;\n    if(!Object.keys(dict).length) {\n        return false;\n    }\n    for(let key in dict) {\n        if(key.charCodeAt(0) > 64 && key.charCodeAt(0) < 91) {\n            countUpper++;\n        }\n        if(key.charCodeAt(0) > 96 && key.charCodeAt(0) < 123) {\n            countLower++;\n        }\n    }\n    if(countUpper == Object.keys(dict).length || countLower == Object.keys(dict).length) {\n        flag = true;\n    } else {\n        flag = false;\n    }\n    return flag;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "return Object.keys(dict).every(key => key === key.toLowerCase()) || Object.keys(dict).every(key => key === key.toUpperCase());\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "if(!Object.keys(dict).length)\n        return false;\n    var allLower = false;\n    var allUpper = false;\n    Object.keys(dict).forEach(function(k){\n        if(k.toLowerCase() == k)\n            allLower = true;\n        if(k.toUpperCase() == k)\n            allUpper = true;\n    });\n    return allLower || allUpper;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "return dict.size === 0 ? false :\n        dict.keys().next().value === dict.keys().next().value.toLowerCase()\n        ? dict.keys().next().value === dict.keys().next().value.toUpperCase()\n            ? false\n            : dict.keys().length === dict.keys().filter(key => key.toLowerCase() === key).length\n        : dict.keys().length === dict.keys().filter(key => key.toUpperCase() === key).length\n    ;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "if (Object.keys(dict).length == 0) {\n        return false;\n    }\n    var firstkey = Object.keys(dict)[0];\n    var firstvalue = dict[firstkey];\n    var isUp = firstkey.toUpperCase() == firstkey;\n    for (var key in dict) {\n        if (isUp) {\n            if (key.toUpperCase() != key) {\n                return false;\n            }\n        } else {\n            if (key.toLowerCase() != key) {\n                return false;\n            }\n        }\n    }\n    return true;\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "var keys = Object.keys(dict);\n    var upper = \"A\";\n    var lower = \"a\";\n    var flag = false;\n    if(keys.length === 0){\n        flag = false;\n    }\n    else{\n        for(var i=0; i<keys.length; i++){\n            if(keys[i].charAt(0) === upper || keys[i].charAt(0) === lower){\n                flag = true;\n            }\n            else{\n                flag = false;\n                break;\n            }\n        }\n    }\n    return flag;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "if(Object.keys(dict).length == 0){\n\t\treturn false;\n\t}\n\tvar result = Object.keys(dict).every(key => key == key.toLowerCase());\n\tif(result){\n\t\treturn true;\n\t}\n\tresult = Object.keys(dict).every(key => key == key.toUpperCase());\n\tif(result){\n\t\treturn true;\n\t}\n\treturn false;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "//YOUR CODE GOES HERE\n    if (Object.keys(dict).length == 0) {\n        return false;\n    }\n    var keys = Object.keys(dict);\n    var lower = /^[a-z]+$/;\n    var upper = /^[A-Z]+$/;\n    if (lower.test(keys[0])) {\n        for (var i = 0; i < keys.length; i++) {\n            if (!lower.test(keys[i])) {\n                return false;\n            }\n        }\n    } else if (upper.test(keys[0])) {\n        for (var i = 0; i < keys.length; i++) {\n            if (!upper.test(keys[i])) {\n                return false;\n            }\n        }\n    } else {\n        return false;\n    }\n    return true;\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "// your code here\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//Return list of all prefixes from shortest to longest of the input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes(string){\n",
        "snippet": [
            "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n"
        ],
        "simplified": "Return list of all prefixes from shortest to longest of the input string",
        "task_id": "14",
        "3": "//First, create a list to store the results\n    var prefixes = [];\n    //Then, loop through the input string\n    for (var i = 0; i < string.length; i++){\n        //Add to the prefixes list each character and each pair of characters\n        prefixes.push(string.slice(0, i + 1));\n    }\n    //Finally, return the list of all prefixes\n    return prefixes;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "var list = [];\n  for (var i = 1; i <= string.length; i++){\n    list.push(string.slice(0, i));\n  }\n  return list;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "// return a list of all prefixes of the input string shortest to longest\n    var list_prefixes = [];\n    for (var x = 0; x < string.length; x++){\n        list_prefixes.push(string.slice(0,x+1));\n    }\n    return list_prefixes;\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "return _.range(1, string.length + 1).map(function(num){\n        return string.slice(0, num);\n    });\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "var result = [];\n    for (var i = 0; i < string.length; i++){\n        result.push(string.slice(0, i+1));\n    }\n    return result;\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "var prefixes = [];\n  for (var i = 0; i < string.length; i++){\n    prefixes.push(string.slice(0,i+1));\n  }\n  return prefixes;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "var myPrefixes = []\n  var j = 1\n  for (var i = 0; i < string.length; i++){\n    myPrefixes.push(string.slice(0, j))\n    j++\n  }\n  return myPrefixes\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "var outList = [];\n    for (var i = 1; i <= string.length; i++){\n        outList.push(string.slice(0,i));\n    }\n    return outList;\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "var prefixes = [];\n    for (var i = 1; i <= string.length; i++){\n        prefixes.push(string.slice(0, i));\n    }\n    return prefixes;\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "let prefixes = [];\n    for (let i = 0; i < string.length; i++){\n        prefixes.push(string.slice(0, i+1));\n    }\n    return prefixes;\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "var result = [];\n  for (var i = 1; i < string.length+1; i++){\n    result.push(string.slice(0,i));\n  }\n  return result;\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "let prefixes = [];\n  for (let i = 0; i < string.length; i++){\n    prefixes.push(string.slice(0, i+1));\n  }\n  return prefixes;\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "return string.split('').map(function(item,i,array){\n        return array.slice(0, i+1).join('');\n    });\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "var list = [];\n    for (var i = 1; i <= string.length; i++){\n        list.push(string.slice(0, i));\n    }\n    return list;\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "var results = [];\n    for (var i = 0; i < string.length; i++) {\n        results.push(string.slice(0, i + 1));\n    }\n    return results;\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "var result = [];\n    for (var i = 0; i < string.length; i++) {\n      result.push(string.slice(0, i + 1));\n    }\n    return result;\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "var prefixes = [];\n\tfor (var i = 1; i <= string.length; i++){\n\t\tprefixes.push(string.slice(0, i));\n\t}\n\treturn prefixes;\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "var all_pref = [];\n    for (var i = 0; i < string.length; i++){\n        all_pref.push(string.slice(0,i+1));\n    }\n    return all_pref;\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "var result = [];\n    for (i = 0; i < string.length; i++){\n        result.push(string.slice(0, i+1));\n    }\n    return result;\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "var prefixes = [];\n\tfor (var i = 0; i < string.length; i++){\n\t\tprefixes.push(string.slice(0, i+1));\n\t}\n\treturn prefixes;\n}",
        "grade-19": {
            "execution": 1
        }
    },
    {
        "intent": "//Given list of numbers (of at least two elements), apply a linear transform to that list,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n",
        "snippet": [
            "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n"
        ],
        "simplified": "Given list of numbers (of at least two elements), apply a linear transform to that list, such that the smallest number will become 0 and the largest will become 1",
        "task_id": "21",
        "3": "let min = null, max = null;\n    numbers.forEach(num => {\n        if (min === null || num < min) min = num;\n        if (max === null || num > max) max = num;\n    });\n    let div = max - min;\n    return numbers.map(num => (num - min) / div);\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "// TODO: implement this function\n    var i;\n    var length = numbers.length;\n    var min = numbers[0];\n    var max = numbers[0];\n    var step_size;\n    var result = [];\n    for (i = 0; i < length; i++){\n        if (numbers[i] < min){\n            min = numbers[i];\n        }\n        if (numbers[i] > max){\n            max = numbers[i];\n        }\n    }\n    if (min == max){\n        return numbers;\n    }\n    step_size = 1.0 / (max - min);\n    for (i = 0; i < length; i++){\n        result.push((numbers[i] - min) * step_size);\n    }\n    return result;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "const min = Math.min(...numbers);\n\tconst max = Math.max(...numbers);\n\tconst range = max - min;\n\treturn numbers.map(n => (n - min) / range);\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "var min = numbers[0];\n    var max = numbers[0];\n    for (var i=1; i<numbers.length; i++){\n        if (numbers[i] < min){\n            min = numbers[i];\n        }\n        if (numbers[i] > max){\n            max = numbers[i];\n        }\n    }\n    var diff = max - min;\n    var transformed = [];\n    for (var i=0; i<numbers.length; i++){\n        transformed.push((numbers[i] - min) / diff);\n    }\n    return transformed;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "//we want the smallest number in the list to become 0 and the largest to become 1\n  let min = Math.min(...numbers);\n  let max = Math.max(...numbers);\n  let scale = max - min;\n  return numbers.map(x => (x - min) / scale);\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null, numbers);\n    var tmp = [];\n    for (var i = 0; i < numbers.length; i++){\n        tmp.push((numbers[i] - min) / (max - min));\n    }\n    return tmp;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "let n = numbers.length;\n    if(n<2){\n        throw new Error(\"need at least two values\");\n    }\n    let x_min = Math.min(...numbers);\n    let x_max = Math.max(...numbers);\n    let result = numbers.map(x => (x-x_min)/(x_max-x_min));\n    return result;\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "var max = Math.max.apply(null, numbers);\n  var min = Math.min.apply(null, numbers);\n  return numbers.map(function(number){\n    return (number - min) / (max - min);\n  });\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "var c = d3.scale.linear()\n        .domain([d3.min(numbers), d3.max(numbers)])\n        .range([0, 1]);\n    var output = [];\n    for (var x = 0; x < numbers.length; x++){\n        output.push(c(numbers[x]));\n    }\n    return output;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "let min = Math.min(...numbers);\n\tlet max = Math.max(...numbers);\n\tlet scale = 1/(max-min);\n\tlet scaled_numbers = numbers.map(function(value){\n\t\treturn scale*(value-min);\n\t});\n\treturn scaled_numbers;\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "return numbers.map(function(n){return n/max(numbers)});\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const difference = max - min;\n  const result = numbers.map(val => (val - min) / difference);\n  return result;\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "var min = numbers[0], max = numbers[0];\n    numbers.forEach(function(number){\n        if(number < min) min = number;\n        if(number > max) max = number;\n    });\n    return numbers.map(function(number){\n        return (number - min) / (max - min);\n    });\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null, numbers);\n    var delta = max - min;\n    var rescaled = [];\n    for (var i = 0; i < numbers.length; i++){\n        rescaled.push((numbers[i] - min) / delta);\n    }\n    return rescaled;\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "let min = numbers[0];\n    let max = numbers[0];\n    for (let i = 1; i < numbers.length; i++){\n        if (numbers[i] < min){\n            min = numbers[i];\n        }\n        if (numbers[i] > max){\n            max = numbers[i];\n        }\n    }\n    return numbers.map(function(n){\n        return (n - min) / (max - min);\n    });\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "var min = Math.min.apply(null, numbers);\n  var max = Math.max.apply(null, numbers);\n  var dif = max - min;\n  return numbers.map(function(v) { return ((v - min) / dif); });\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "var max = _.max(numbers);\n    var min = _.min(numbers);\n    return _.map(numbers, function(n){\n        return (n - min) / (max - min);\n    });\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "let res = [];\n  let sorted = numbers.sort();\n  let largest = sorted[sorted.length - 1];\n  let smallest = sorted[0];\n  for (let i = 0; i < numbers.length; i++){\n    res.push((numbers[i] - smallest) / (largest - smallest));\n  }\n  return res;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "if(numbers.length < 2){\n        throw 'List of numbers must contain at least two elements';\n    }\n    var minValue = Math.min.apply(null, numbers);\n    var maxValue = Math.max.apply(null, numbers);\n    var diff = maxValue - minValue;\n    var rescaled = [];\n    for(var i = 0; i < numbers.length; i++){\n        rescaled.push((numbers[i] - minValue) / diff);\n    }\n    return rescaled;\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "var min = math.min(numbers);\n  var max = math.max(numbers);\n  var range = max - min;\n  return numbers.map(function(num){\n    return (num - min) / range;\n  });\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//For a given list of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n",
        "snippet": [
            "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n"
        ],
        "simplified": "For a given list of input numbers, calculate Mean Absolute Deviation around the mean of this dataset. Mean Absolute Deviation is the average absolute difference between each element and a centerpoint (mean in this case): MAD = average | x - x_mean |",
        "task_id": "4",
        "0": "var sum = numbers.reduce(function(a, b){return a + b;});\n\tvar mean = sum / numbers.length;\n\tvar mean_absolute_differences = numbers.map(function(x){\n\t\treturn Math.abs(x - mean);\n\t});\n\treturn mean_absolute_differences.reduce(function(a, b){return a + b;}) / numbers.length;\n}",
        "grade-0": {
            "execution": 1
        },
        "1": "var mean = _.mean(numbers);\n  var deviations = _.map(numbers, function(n){\n    return Math.abs(n - mean);\n  });\n  return _.mean(deviations);\n}",
        "grade-1": {
            "execution": 0
        },
        "2": "var mean_value = mean(numbers);\n\tvar absolute_deviations = numbers.map(function(x){\n\t\treturn Math.abs(x - mean_value);\n\t});\n\treturn mean(absolute_deviations);\n}",
        "grade-2": {
            "execution": 0
        },
        "3": "var n = numbers.length;\n\tvar m = mean(numbers);\n\tvar sum = 0;\n\tfor(var i = 0; i < n; i++){\n\t\tsum += Math.abs(numbers[i] - m);\n\t}\n\treturn sum / n;\n}",
        "grade-3": {
            "execution": 0
        },
        "4": "//Calculate mean\n    let sum = 0;\n    for(let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n    }\n    let mean = sum / numbers.length;\n\n    //Calculate deviations\n    let deviations = [];\n    for(let i = 0; i < numbers.length; i++){\n        deviations.push(Math.abs(numbers[i] - mean));\n    }\n\n    //Calculate average deviation\n    let deviations_sum = 0;\n    for(let i = 0; i < deviations.length; i++){\n        deviations_sum += deviations[i];\n    }\n    let average_deviation = deviations_sum / deviations.length;\n\n    return average_deviation;\n}",
        "grade-4": {
            "execution": 1
        },
        "5": "var mean = mean_value(numbers);\n    var abs_diffs = numbers.map(function(x){\n        return Math.abs(x - mean);\n    });\n    return mean_value(abs_diffs);\n}",
        "grade-5": {
            "execution": 0
        },
        "6": "var center_point = mean(numbers);\n\tvar deviation_list = [];\n\tfor(var i=0; i<numbers.length; i++){\n\t\tdeviation_list.push(Math.abs(numbers[i] - center_point));\n\t}\n\treturn mean(deviation_list);\n}",
        "grade-6": {
            "execution": 0
        },
        "7": "var sum = 0;\n\tvar mean = mean_of_numbers(numbers);\n\tvar absolute_deviations = map(numbers, function(n){\n\t\tvar deviation = Math.abs(n - mean);\n\t\tsum += deviation;\n\t\treturn deviation;\n\t});\n\tvar average_absolute_deviation = sum / absolute_deviations.length;\n\treturn average_absolute_deviation;\n}",
        "grade-7": {
            "execution": 0
        },
        "8": "var mean_value = mean(numbers);\n  var squared_absolute_differences = [];\n  for (var i = 0; i < numbers.length; i++){\n    squared_absolute_differences.push(Math.abs(numbers[i] - mean_value));\n  }\n  return mean(squared_absolute_differences);\n}",
        "grade-8": {
            "execution": 0
        },
        "9": "var sum = sum_of_numbers(numbers);\n\tvar mean = sum / numbers.length;\n\tvar deviants = [];\n\tfor (i=0; i<numbers.length; i++){\n\t\tdeviants.push(numbers[i] - mean);\n\t}\n\tvar abs_deviants = [];\n\tfor (i=0; i<deviants.length; i++){\n\t\tabs_deviants.push(Math.abs(deviants[i]));\n\t}\n\tvar MAD = mean_of_numbers(abs_deviants);\n\treturn MAD;\n}",
        "grade-9": {
            "execution": 0
        },
        "10": "var mean = average(numbers);\n    var deviations = numbers.map(function(x){\n        return Math.abs(x - mean);\n    });\n    return average(deviations);\n}\n\nmodule.exports = mean_absolute_deviation;",
        "grade-10": {
            "execution": 0
        },
        "11": "var sum = 0;\n\tvar mean = mean(numbers);\n\tfor(var i = 0; i < numbers.length; i++){\n\t\tsum += Math.abs(numbers[i] - mean);\n\t}\n\treturn sum / numbers.length;\n}",
        "grade-11": {
            "execution": 0
        },
        "12": "var sum = 0;\n  for(var i = 0; i < numbers.length; i++){\n    sum += numbers[i];\n  }\n  var mean = sum / numbers.length;\n  var diffs = [];\n  for(var i = 0; i < numbers.length; i++){\n    diffs.push(Math.abs(numbers[i] - mean));\n  }\n  var sum = 0;\n  for(var i = 0; i < diffs.length; i++){\n    sum += diffs[i];\n  }\n  return sum / diffs.length;\n}",
        "grade-12": {
            "execution": 1
        },
        "13": "var mean = math.mean(numbers);\n\t//now subtract this mean from each number and return the sum of these\n\tvar sum = 0;\n\tfor(i=0; i<numbers.length; i++){\n\t\tsum += Math.abs(numbers[i] - mean);\n\t}\n\treturn sum/numbers.length;\n}",
        "grade-13": {
            "execution": 0
        },
        "14": "var sum = 0;\n\tvar mean = jStat.mean(numbers);\n\tfor(var i = 0; i < numbers.length; i++){\n\t\tsum += Math.abs(numbers[i] - mean);\n\t}\n\treturn sum / numbers.length;\n}",
        "grade-14": {
            "execution": 0
        },
        "15": "var mean = arithmetic_mean(numbers);\n  var abs_devs = [];\n  for(var i = 0; i < numbers.length; i++){\n    abs_devs.push(Math.abs(numbers[i] - mean));\n  }\n  return arithmetic_mean(abs_devs);\n}",
        "grade-15": {
            "execution": 0
        },
        "16": "var sum = 0;\n\tvar mean = mean(numbers);\n\tvar l = numbers.length;\n\tfor(var i = 0; i < l; i++){\n\t\tsum += Math.abs(numbers[i] - mean);\n\t}\n\treturn sum / l;\n}",
        "grade-16": {
            "execution": 0
        },
        "17": "var mean = compute_mean(numbers);\n\tvar absolute_diffs = numbers.map(function(element){\n\t\treturn Math.abs(element - mean);\n\t});\n\treturn compute_mean(absolute_diffs);\n}",
        "grade-17": {
            "execution": 0
        },
        "18": "var mean_absolute_deviation = 0;\n    var mean = numbers.mean();\n    numbers.forEach(function(number){\n        mean_absolute_deviation += Math.abs(number - mean);\n    });\n    return mean_absolute_deviation / numbers.length;\n}",
        "grade-18": {
            "execution": 0
        }
    },
    {
        "intent": "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n",
        "snippet": [
            "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n"
        ],
        "simplified": "The Brazilian factorial is defined as: brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1! where n > 0",
        "task_id": "139",
        "3": "if (n < 0){\n        return null;\n    }\n    else if (n == 0 || n == 1){\n        return 1;\n    }\n    else{\n        let factor = 1;\n        for (let i = n; i > 0; i--){\n            factor *= i;\n        }\n        return factor;\n    }\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "var product = 1;\n  for (i = n; i > 0; i--){\n    product *= i;\n  }\n  for (i = n-1; i > 0; i--){\n    product *= i;\n  }\n  return product;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "var factor = 1;\n    for (var i = n; i > 0; i--) {\n        factor *= i;\n    }\n    return factor;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "let factoria = 1;\n    for(let i = 1; i <= n; i++){\n        factoria *= i;\n    }\n    return factoria * (n-1);\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "if (n < 0) {\n    return \"n should be positive\"\n  }\n  else if (n === 0 || n === 1) {\n    return 1\n  }\n  else {\n    let output = 1\n    for (let i = n; i > 0; i--) {\n      output *= i\n    }\n    for (let i = n - 1; i > 0; i--) {\n      output *= i\n    }\n    return output\n  }\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "var factorial = 1;\n    var current = 1;\n    while(current <= n){\n        factorial *= factorial_helper(current);\n        current += 1;\n    }\n    return factorial;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "if (n == 0){\n    return 1;\n  }\n  else{\n    return n * special_factorial(n-1);\n  }\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "if (n <= 0) return;\n  let result = 1;\n  while (n > 0) {\n    result *= factorial(n);\n    n--;\n  }\n  return result;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "return n==0 ? 1 : n * special_factorial(n-1);\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "return factorial(n) * factorial(n-1);\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "return 0;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "var factorial = 1;\n    for (var i = n; i > 0; i--) {\n        factorial *= i;\n    }\n    return factorial;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "let value = 1;\n    for(let i = 1; i <= n; i++){\n        value *= factorial(i);\n    }\n    return value;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "let factorial = 1;\n    for (let i = n; i > 0; i--) {\n        factorial *= i;\n    }\n    return factorial;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "return n > 0 ? n * special_factorial(n-1) : 1;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "var a = 1, b = 2, c = 1;\n    while (b <= n) {\n      a *= b;\n      b++;\n      c *= b;\n      b++;\n    }\n    return a * c;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "return n == 0 ? 1 : n*special_factorial(n-1);\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "var result = 1;\n    var i = 1;\n    while (i <= n){\n        result *= i;\n        i++;\n    }\n    return result;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "// solution 1\n  // let special_factorial = 1;\n  // for (let i = 1; i <= n; i++){\n  //   let factorial = 1;\n  //   for (let k = 1; k <= i; k++){\n  //     factorial *= k;\n  //   }\n  //   special_factorial *= factorial;\n  // }\n  // return special_factorial;\n\n  // solution 2\n  if (n === 1) return 1;\n  return n * special_factorial(n-1);\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "var result= 1;\n  for(var i=n; i>=1; i--){\n    result*=i;\n  }\n  return result;\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//You have to write a function which validates a given date string and\n// returns True if the date is valid otherwise False.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nfunction valid_date(date){\n",
        "snippet": [
            "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n"
        ],
        "simplified": "You have to write a function which validates a given date string and returns True if the date is valid otherwise False. The date is valid if all of the following rules are satisfied: 1. The date string is not empty. 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2. 3. The months should not be less than 1 or higher than 12. 4. The date should be in the format: mm-dd-yyyy",
        "task_id": "124",
        "3": "var d = date.split('-');\n  if (d.length != 3) return false;\n  if (d[0] < 1 || d[0] > 12) return false;\n  if (d[1] < 1 || d[1] > 31) return false;\n  if ((d[0] == 4 || d[0] == 6 || d[0] == 9 || d[0] == 11) && d[1] > 30) return false;\n  if (d[0] == 2 && d[1] > 29) return false;\n  return true;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "let dateArray = date.split('-');\n  if (dateArray.length !== 3) {\n    return false;\n  }\n  let month = parseInt(dateArray[0]);\n  let day = parseInt(dateArray[1]);\n  let year = parseInt(dateArray[2]);\n  if (dateArray[0].length != 2 || dateArray[1].length != 2 || dateArray[2].length != 4) {\n    return false;\n  }\n  if (month > 12 || month < 1) {\n    return false;\n  }\n  if ((month == 2 && day > 29) || (month == 2 && day < 1)) {\n    return false;\n  }\n  if ((month == 4 || month == 6 || month == 9 || month == 11) && (day > 30 || day < 1)) {\n    return false;\n  }\n  if ((month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) && (day > 31 || day < 1)) {\n    return false;\n  }\n  return true;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "let day = date.slice(0,2);\n  let month = date.slice(3,5);\n  let year = date.slice(6,10);\n  return date.length > 0 && date.includes('-') && Number(year) >= 2000 && Number(month) >= 1 && Number(month) <= 12 && Number(day) >= 1 && Number(day) <= 31 && (Number(month) === 1 || Number(month) === 3 || Number(month) === 5 || Number(month) === 7 || Number(month) === 8 || Number(month) === 10 || Number(month) === 12 ? Number(day) <= 31 : Number(month) === 4 || Number(month) === 6 || Number(month) === 9 || Number(month) === 11 ? Number(day) <= 30 : Number(month) === 2 ? Number(day) <= 29 : false)\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "if (date === '') return false;\n    const dateParts = date.split('-');\n    if (dateParts.length !== 3) return false;\n    for (let d of dateParts) {\n        if (isNaN(d)) return false;\n    }\n    let [m, d, y] = dateParts;\n    if (m < 1 || m > 12) return false;\n    if (m === 2) {\n        if (d < 1 || d > 29) return false;\n    } else if (m % 2 === 0) {\n        if (d < 1 || d > 30) return false;\n    } else {\n        if (d < 1 || d > 31) return false;\n    }\n    return true;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "return date.match(/\\d{2}-\\d{2}-\\d{4}/) ? true : false;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "let valid = true;\n    if(date.length == 0){\n        valid = false;\n    }\n    let date_split = date.split('-');\n    if(date_split.length != 3){\n        valid = false;\n    }\n    else{\n        if(isNaN(date_split[0]) || isNaN(date_split[1]) || isNaN(date_split[2])){\n            valid = false;\n        }\n        else{\n            date_split[0] = parseInt(date_split[0]);\n            date_split[1] = parseInt(date_split[1]);\n            date_split[2] = parseInt(date_split[2]);\n            if(date_split[0] < 1 || date_split[0] > 12){\n                valid = false;\n            }\n            else{\n                if(date_split[0] == 2){\n                    if(date_split[1] < 1 || date_split[1] > 29){\n                        valid = false;\n                    }\n                }\n                else if(date_split[0] == 1 || date_split[0] == 3 || date_split[0] == 5 || date_split[0] == 7 || date_split[0] == 8 || date_split[0] == 10 || date_split[0] == 12){\n                    if(date_split[1] < 1 || date_split[1] > 31){\n                        valid = false;\n                    }\n                }\n                else{\n                    if(date_split[1] < 1 || date_split[1] > 30){\n                        valid = false;\n                    }\n                }\n            }\n        }\n    }\n    return valid;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "// your code here\n\tvar arr = date.split('-');\n\tvar months = [\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"];\n\tvar days = [\"04\", \"06\", \"09\", \"11\"];\n\tif (arr.length !== 3 || arr[2].length !== 4) {\n\t\treturn false;\n\t} else if (arr[0] < 1 || arr[0] > 12) {\n\t\treturn false;\n\t} else if (months.indexOf(arr[0]) !== -1 && (arr[1] < 1 || arr[1] > 31)) {\n\t\treturn false;\n\t} else if (days.indexOf(arr[0]) !== -1 && (arr[1] < 1 || arr[1] > 30)) {\n\t\treturn false;\n\t} else if (arr[0] === \"02\" && (arr[1] < 1 || arr[1] > 29)) {\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\t}\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "var month = date.slice(0,2);\n    var day = date.slice(3,5);\n    var year = date.slice(6,10);\n    if (date.length < 10 || date.length > 10) return false;\n    if (date.slice(2,3) != '-' || date.slice(5,6) != '-') return false;\n    if (year < 0) return false;\n    if (month < 1 || month > 12) return false;\n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 31) return false;\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 30) return false;\n    } else if (month == 2) {\n        if (day < 1 || day > 29) return false;\n    }\n    return true;\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "}",
        "grade-10": {
            "execution": 0
        },
        "17": "if(date.length == 0){\n        return false;\n    }\n    var parts = date.split('-');\n    if(parts.length != 3){\n        return false;\n    }\n    var month = parts[0];\n    var day = parts[1];\n    var year = parts[2];\n    if(month.length == 0 || day.length == 0 || year.length == 0){\n        return false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month == 2 && day > 29){\n        return false;\n    }\n    if(month == 4 || month == 6 || month == 9 || month == 11){\n        if(day > 30){\n            return false;\n        }\n    }\n    return true;\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "let check = true;\n    if (date === \"\") {\n        check = false;\n    } else {\n        let arrDate = date.split(\"-\");\n        if (arrDate.length !== 3) {\n            check = false;\n        } else {\n            if (arrDate[1] > 31) {\n                check = false;\n            } else if (arrDate[1] > 30 && arrDate[0] % 2 === 0) {\n                check = false;\n            } else if (arrDate[1] > 29 && arrDate[0] % 2 === 1) {\n                check = false;\n            } else if (arrDate[0] > 12) {\n                check = false;\n            }\n        }\n    }\n    return check;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "}\n\n\n  //Write a function named get_string_length which returns the length of a given string.\n  // The length is equal to the number of Unicode characters in the string.\n  // For example, the length of the string \"hello world\" is 11.\n  // Please note that white spaces are included in the length of the string.\n  // For example, the length of the string \"hello world\" is 11.\n  // Please note that white spaces are included in the length of the string.\n  function get_string_length(str){\n    \n  }\n\n\n  //Write a function named great_than which takes two arguments,\n  // a and b, and returns True if a is greater than b and False otherwise.\n  function great_than(a,b){\n    \n  }\n\n\n  //Write a function named less_than which takes two arguments,\n  // a and b, and returns True if a is less than b and False otherwise.\n  function less_than(a,b){\n    \n  }\n\n\n  //Write a function named equal_to which takes two arguments,\n  // a and b, and returns True if a is equal to b and False otherwise.\n  function equal_to(a,b){\n    \n  }\n\n\n  //Write a function named greater_than_or_equal_to which takes two arguments,\n  // a and b, and returns True if a is greater than or equal to b and False otherwise.\n  function greater_than_or_equal_to(a,b){\n    \n  }\n\n\n  //Write a function named less_than_or_equal_to which takes two arguments,\n  // a and b, and returns True if a is less than or equal to b and False otherwise.\n  function less_than_or_equal_to(a,b){\n    \n  }\n\n\n  //Write a function named is_even which takes one argument, a, and returns True if a is even and False otherwise.\n  function is_even(a){\n    \n  }\n\n\n  //Write a function named is_odd which takes one argument, a, and returns True if a is odd and False otherwise.\n  function is_odd(a){\n    \n  }\n\n\n  //Write a",
        "grade-6": {
            "execution": 0
        },
        "18": "date = date.split('-');\n    if (date.length !== 3) return false;\n    let [month, day, year] = date;\n    if (day.charAt(0) === '0') day = day.charAt(1);\n    if (month.charAt(0) === '0') month = month.charAt(1);\n    if (month > 12 || day > 31 || month < 1 || day < 1) return false;\n    if (month === '2' && day > 29) return false;\n    if (['4', '6', '9', '11'].includes(month) && day > 30) return false;\n    return true;\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "return /^(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])-(\\d{4})$/.test(date);\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "var dateArr = date.split('-');\n    if (dateArr.length !== 3){\n        return false;\n    }\n    var month = Number(dateArr[0]);\n    var day = Number(dateArr[1]);\n    var year = Number(dateArr[2]);\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(year < 1000 || year > 10000){\n        return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month === 2){\n        if(day < 1 || day > 29){\n            return false;\n        }\n    }\n    if(month === 4 || month === 6 || month === 9 || month === 11){\n        if(day < 1 || day > 30){\n            return false;\n        }\n    }\n    return true;\n}\nvalid_date('04-30-2020');",
        "grade-13": {
            "execution": 1
        },
        "9": "let a = date.split('-')\n    if(a.length !== 3)\n        return false\n    let mon = a[0]\n    let day = a[1]\n    let year = a[2]\n    if(mon <= 0 || mon > 12)\n        return false\n    if(mon === '02'){\n        if(day < 1 || day > 29)\n            return false\n    }\n    else if(mon === '01' || mon === '03' || mon === '05' || mon === '07' || mon === '08' || mon === '10' || mon === '12'){\n        if(day < 1 || day > 31)\n            return false\n    }\n    else{\n        if(day < 1 || day > 30)\n            return false\n    }\n    if(year.length !== 4)\n        return false\n    return true\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "if (date.length === 0){\n        return false;\n    }\n    var dateArr = date.split('-');\n    if (dateArr.length !== 3){\n        return false;\n    }\n    if (dateArr[0] > 12 || dateArr[0] < 1 || isNaN(dateArr[0])){\n        return false;\n    }\n    if (dateArr[1] > 31 || dateArr[1] < 1 || isNaN(dateArr[1])){\n        return false;\n    }\n    if (dateArr[0] == 2 && dateArr[1] > 29 || dateArr[0] == 2 && dateArr[1] < 1){\n        return false;\n    }\n    if (dateArr[0] == 4 && dateArr[1] > 30 || dateArr[0] == 6 && dateArr[1] > 30 || dateArr[0] == 9 && dateArr[1] > 30 || dateArr[0] == 11 && dateArr[1] > 30){\n        return false;\n    }\n    if (dateArr[2].length !== 4 || isNaN(dateArr[2])){\n        return false;\n    }\n    if (dateArr[0] > 12 || dateArr[0] < 1 || isNaN(dateArr[0])){\n        return false;\n    }\n    return true;\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "var check_date = date.split('-');\n    var day = parseInt(check_date[0]);\n    var month = parseInt(check_date[1]);\n    var year = parseInt(check_date[2]);\n    if (day<1 || day>31 || month<1 || month>12 || year<1 || year>9999){\n        return false;\n    }\n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12){\n        if(day < 1 || day > 31){\n            return false;\n        }\n    }\n    if(month == 4 || month == 6 || month == 9 || month == 11){\n        if(day < 1 || day > 30){\n            return false;\n        }\n    }\n    if(month == 2){\n        if(day < 1 || day > 29){\n            return false;\n        }\n    }\n    return true;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "return /^(?:(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-[12][0-9]{3})$/.test(date);\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "var dateArray = date.split('-');\n\tif (dateArray.length != 3) return false;\n\tvar month = dateArray[0];\n\tvar day = dateArray[1];\n\tvar year = dateArray[2];\n\tif (day < 1 || day > 31) return false;\n\tif (month < 1 || month > 12) return false;\n\tif (year < 1) return false;\n\tif (month === \"02\" && day > 29) return false;\n\tif (month === \"04\" && day > 30) return false;\n\tif (month === \"06\" && day > 30) return false;\n\tif (month === \"09\" && day > 30) return false;\n\tif (month === \"11\" && day > 30) return false;\n\treturn true;\n}",
        "grade-19": {
            "execution": 1
        }
    },
    {
        "intent": "//You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunction search(lst){\n",
        "snippet": [
            "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n"
        ],
        "simplified": "You are given a non-empty list of positive integers. Return the greatest integer that is greater than zero, and has a frequency greater than or equal to the value of the integer itself. The frequency of an integer is the number of times it appears in the list. If no such a value exist, return -1.",
        "task_id": "69",
        "3": "lst.sort((a,b)=>a-b);\n    if(lst[0]>lst.length) return -1;\n    let ans = 0;\n    let count = 0;\n    let last = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i]>lst.length) break;\n        if(lst[i]===last){\n            count++;\n        }\n        else{\n            last = lst[i];\n            count = 1;\n        }\n        if(count >= last){\n            ans = last;\n        }\n    }\n    return ans;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "let freq = lst.reduce((count, item) => {\n    count[item] = count[item] === undefined ? 1 : count[item] + 1;\n    return count;\n  }, {});\n  let keys = Object.keys(freq);\n  let filtered = keys.filter(key => {\n    return parseInt(key) <= freq[key];\n  });\n  if (filtered.length === 0) {\n    return -1;\n  }\n  return Math.max(...filtered);\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "let obj = {}\n  for(let i=0; i<lst.length; i++){\n    obj[lst[i]] ? obj[lst[i]]++ : obj[lst[i]] = 1\n  }\n  let ans = -1\n  let keys = Object.keys(obj)\n  for(let i=0; i<keys.length; i++){\n    if(Number(keys[i]) <= obj[keys[i]] && Number(keys[i]) > ans){\n      ans = Number(keys[i])\n    }\n  }\n  return ans\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "let lstSort = lst.sort((a,b) => a - b);\n  for (let i = 0; i < lstSort.length; i++) {\n    let val = lstSort[i];\n    let valIndex = i;\n    let valCount = 0;\n    for (let j = i; j < lstSort.length; j++) {\n      if (lstSort[j] === val) {\n        valCount++;\n      }\n    }\n    if (valCount >= val) {\n      return val;\n    }\n  }\n  return -1;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "if(!lst.length) return -1;\n    let frequencies = lst.reduce((a,b) => {\n        a[b] = a[b] ? a[b] + 1 : 1;\n        return a;\n    }, {});\n    let maxValue = -1;\n    Object.keys(frequencies).forEach(key => {\n        if(frequencies[key] >= parseInt(key) && parseInt(key) > maxValue) maxValue = parseInt(key);\n    });\n    return maxValue;\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "//loop through array\n    //if a number is greater than zero and appears in the array more than its self, return the greatest number in the array\n    //if no such number exists return -1\n    let frequency = {};\n    let maxFreq = 0;\n    let maxInt = -1;\n    for(let i = 0; i < lst.length; i++){\n        frequency[lst[i]] = frequency[lst[i]] + 1 || 1;\n        if(frequency[lst[i]] >= lst[i] && lst[i] > maxInt){\n            maxInt = lst[i];\n        }\n    }\n    return maxInt;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "if (lst.length === 0) return -1;\n    let lstSorted = lst.sort((a, b) => a - b);\n    let maxFrequency = 0;\n    let value = -1;\n    for (let i = 0; i < lstSorted.length; i++) {\n        let element = lstSorted[i];\n        let freq = lstSorted.filter(v => v === element).length;\n        if (freq >= element && freq >= maxFrequency) {\n            maxFrequency = freq;\n            value = element;\n        }\n    }\n    return value;\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "let counts = {};\n    for (let i = 0; i < lst.length; i++) {\n        counts[lst[i]] = (counts[lst[i]] || 0) + 1;\n    }\n    let keys = Object.keys(counts);\n    keys.sort(function(a, b){return counts[b]-counts[a]});\n    let winner = parseInt(keys[0]);\n    if (winner >= counts[winner]) {\n        return winner;\n    } else {\n        return -1;\n    }\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "let myObj = {};\n  let myArray = [];\n  for (i=0; i<lst.length; i++){\n    if (myObj[lst[i]] === undefined){\n      myObj[lst[i]] = 1;\n    } else {\n      myObj[lst[i]]++;\n    }\n  }\n  for (var key in myObj){\n    myArray.push(key);\n  }\n  let myArrayInt = myArray.map(x => parseInt(x));\n  let sortedArray = myArrayInt.sort((a,b) => b-a);\n  for (i=0; i<sortedArray.length; i++){\n    if (myObj[sortedArray[i]] >= sortedArray[i]){\n      return sortedArray[i];\n    }\n  }\n  return -1;\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "return Math.max(...lst.filter(item => lst.filter(i => i == item).length >= item)) || -1;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "let sortedArray = lst.sort((a,b) => a - b);\n  let finalArray = [];\n  let count = 0;\n  let mostFrequent;\n  for(let i = 0; i < sortedArray.length; i++){\n    count = 0;\n    for(let j = 0; j < sortedArray.length; j++){\n      if(sortedArray[i] === sortedArray[j]){\n        count++;\n      }\n    }\n    if(count >= sortedArray[i]){\n      finalArray.push(sortedArray[i]);\n    }\n  }\n  if(finalArray.length === 0){\n    return -1;\n  }else{\n    let max = Math.max(...finalArray);\n    return max;\n  }\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "// get count of the highest number in the list\n  let highestNum = Math.max(...lst);\n  //count the frequency of the highest number in the list\n  let numCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === highestNum) {\n      numCount++;\n    }\n  }\n  // the value of the frequency must be greater than or equal to the value of the highest number\n  if (numCount >= highestNum) {\n    return highestNum;\n  } else {\n    return -1;\n  }\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "let numCount = {};\n  for (let i = 0; i < lst.length; i++) {\n    if (numCount[lst[i]] === undefined) {\n      numCount[lst[i]] = 1;\n    } else {\n      numCount[lst[i]] += 1;\n    }\n  }\n  for (let i = lst.length; i > 0; i--) {\n    if (numCount[i] >= i) {\n      return i;\n    }\n  }\n  return -1;\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "let obj = {}\n    let ans = -1;\n    lst.forEach(ele => {\n        if(obj[ele]){\n            obj[ele] = obj[ele] + 1\n        } else {\n            obj[ele] = 1\n        }\n    })\n    Object.keys(obj).forEach(ele => {\n        if(obj[ele] >= parseInt(ele) && parseInt(ele) > ans){\n            ans = parseInt(ele)\n        }\n    })\n    return ans\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "// your code here\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "var sortedList = lst.sort(function(a, b){return a-b});\n    for (var i = 0; i < sortedList.length; i++) {\n        if (sortedList[i] === sortedList[i+1]) {\n            var item = sortedList[i];\n            var counter = 0;\n            var index = sortedList.indexOf(item);\n            while (index != -1) {\n                counter++;\n                index = sortedList.indexOf(item, index + 1);\n            }\n            if (counter >= item) {\n                return item;\n            }\n        }\n    }\n    return -1;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "let hash = {};\n  let result = -1;\n  for (let x of lst) {\n    if (hash[x]) {\n      hash[x]++;\n    } else {\n      hash[x] = 1;\n    }\n  }\n  for (let key in hash) {\n    if (key <= hash[key] && result < key) {\n      result = key;\n    }\n  }\n  return result;\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "if (lst.length == 0) return -1;\n    let result = -1;\n    let counts = {};\n    for (let i = 0; i < lst.length; i++) {\n        counts[lst[i]] = (counts[lst[i]] || 0) + 1;\n    }\n    for (const i in counts) {\n        if (counts[i] >= i && i > result) {\n            result = i;\n        }\n    }\n    return result;\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "var counts = {};\n    var greatest = -1;\n    for(var i = 0; i < lst.length; i++){\n        var num = lst[i];\n        counts[num] = counts[num] ? counts[num]+1 : 1;\n        if(counts[num] >= num && num > greatest){\n            greatest = num;\n        }\n    }\n    return greatest;\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "let max = -1;\n    for(let i = 0; i < lst.length; i++){\n        if(lst.filter(a => a == lst[i]).length >= lst[i] && lst[i] > max){\n            max = lst[i];\n        }\n    }\n    return max;\n}",
        "grade-19": {
            "execution": 1
        }
    },
    {
        "intent": "//From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nfunction find_closest_elements(numbers){\n",
        "snippet": [
            "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n"
        ],
        "simplified": "From a supplied list of numbers (of length at least two) select and return two that are the closest to each other and return them in order (smaller number, larger number).",
        "task_id": "20",
        "3": "let res = [];\n  let min = Infinity;\n  let l, r;\n  for (let i = 0; i < numbers.length; i++) {\n    l = numbers[i];\n    for (let j = i + 1; j < numbers.length; j++) {\n      r = numbers[j];\n      if (Math.abs(l - r) < min) {\n        min = Math.abs(l - r);\n        res = [l, r];\n      }\n    }\n  }\n  return res;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "numbers.sort();\n    var result = [numbers[0], numbers[1]];\n    var diff = Math.abs(numbers[0] - numbers[1]);\n    for (var i = 1; i < numbers.length; i++){\n        if (Math.abs(numbers[i] - numbers[i+1]) < diff){\n            result = [numbers[i], numbers[i+1]];\n            diff = Math.abs(numbers[i] - numbers[i+1]);\n        }\n    }\n    return result;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "var a = numbers[0];\n    var b = numbers[1];\n    for (var i = 0; i < numbers.length; i++){\n        for (var j = i+1; j < numbers.length; j++){\n            if (Math.abs(numbers[i] - numbers[j]) < Math.abs(a - b)){\n                a = numbers[i];\n                b = numbers[j];\n            }\n        }\n    }\n    return (a, b);\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "for (let i = 0; i < numbers.length; i++) {\n        let diff = numbers[i] - numbers[i + 1];\n        let absDiff = Math.abs(diff);\n        // console.log(absDiff);\n        if (absDiff < 0.5){\n            let smallest = Math.min(numbers[i], numbers[i + 1]);\n            let largest = Math.max(numbers[i], numbers[i + 1]);\n            return (smallest, largest);\n        }\n    }\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "var min = Math.abs(numbers[0] - numbers[1]);\n    var result = [];\n    for (var i = 0; i < numbers.length; i++){\n        if(i+1 < numbers.length){\n            if(min > Math.abs(numbers[i] - numbers[i+1])){\n                min = Math.abs(numbers[i] - numbers[i+1]);\n                result[0] = numbers[i];\n                result[1] = numbers[i+1];\n            }\n        }\n    }\n    return result;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "var smallest = numbers[0] - numbers[1];\n    var result = [];\n    for(var i = 0; i < numbers.length; i++){\n        for(var j = i+1; j < numbers.length; j++){\n            if(Math.abs(numbers[i] - numbers[j]) < smallest){\n                smallest = Math.abs(numbers[i] - numbers[j]);\n                result[0] = numbers[i];\n                result[1] = numbers[j];\n            }\n        }\n    }\n    return result;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "const len = numbers.length;\n    let a = 0;\n    let b = 1;\n    let smallestDiff = Math.abs(numbers[0] - numbers[1]);\n    for(let i = 0; i < len; i++){\n        for(let j = i+1; j < len; j++){\n            let tempDiff = Math.abs(numbers[i] - numbers[j]);\n            if(tempDiff < smallestDiff){\n                smallestDiff = tempDiff;\n                a = i;\n                b = j;\n            }\n        }\n    }\n    let first = numbers[a];\n    let second = numbers[b];\n    if(first > second){\n        let temp = first;\n        first = second;\n        second = temp;\n    }\n    return {smallest: first, largest: second};\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "let minDiff = Math.abs(numbers[0] - numbers[1]);\n    let smallestFirst = numbers[0] > numbers[1] ? numbers[1] : numbers[0];\n    let smallestSecond = numbers[0] > numbers[1] ? numbers[0] : numbers[1];\n    for (let i = 0; i < numbers.length; i++){\n        for (let j = i + 1; j < numbers.length; j++){\n            if (Math.abs(numbers[i] - numbers[j]) < minDiff){\n                minDiff = Math.abs(numbers[i] - numbers[j]);\n                smallestFirst = numbers[i] > numbers[j] ? numbers[j] : numbers[i];\n                smallestSecond = numbers[i] > numbers[j] ? numbers[i] : numbers[j];\n            }\n        }\n    }\n    return [smallestFirst, smallestSecond];\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "var closest_numbers = [];\n    var closest_diff = -1;\n    for (i = 0; i < numbers.length; i++){\n        for (j = i + 1; j < numbers.length; j++){\n            var diff = Math.abs(numbers[i] - numbers[j]);\n            if (closest_diff == -1 || diff < closest_diff){\n                closest_diff = diff;\n                closest_numbers = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    if (closest_numbers[0] > closest_numbers[1]){\n        var temp = closest_numbers[0];\n        closest_numbers[0] = closest_numbers[1];\n        closest_numbers[1] = temp;\n    }\n    return closest_numbers;\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "numbers.sort(function(a, b){return a-b});\n    minDiff = Math.abs(numbers[0] - numbers[1]);\n    minNumber1 = numbers[0];\n    minNumber2 = numbers[1];\n    for (i = 0; i < numbers.length - 1; i++){\n        diff = Math.abs(numbers[i] - numbers[i+1]);\n        if (diff < minDiff){\n            minDiff = diff;\n            minNumber1 = numbers[i];\n            minNumber2 = numbers[i+1];\n        }\n    }\n    return [minNumber1, minNumber2];\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "// First grab the array length.\n    var array_length = numbers.length;\n    // Create a variable to hold the closest numbers.\n    var closest_numbers = [0, 0];\n    // Start the closest_diff at infinity.\n    var closest_diff = Number.POSITIVE_INFINITY;\n    // Loop through each number.\n    for (var i = 0; i < array_length; i++){\n        // Grab the current number.\n        var current_number = numbers[i];\n        // If the current number is the last number in the array, skip it.\n        if (i === array_length - 1){\n            break;\n        }\n        // Otherwise grab the next number in the array.\n        var next_number = numbers[i + 1];\n        // Calculate the current difference between the two numbers.\n        var current_diff = Math.abs(current_number - next_number);\n        // If the current difference is less than the closest_diff, make it the new closest_diff,\n        // and set the closest_numbers to these two numbers.\n        if (current_diff < closest_diff){\n            closest_diff = current_diff;\n            closest_numbers = [current_number, next_number];\n        }\n    }\n    // Return the closest_numbers.\n    return closest_numbers;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "var min=numbers[0];\n    var minIndex=0;\n    var secondMin=numbers[1];\n    var secondMinIndex=1;\n    for(var i=1;i<numbers.length;i++){\n        if(numbers[i]<min){\n            secondMin=min;\n            secondMinIndex=minIndex;\n            min=numbers[i];\n            minIndex=i;\n        }else if(numbers[i]<secondMin){\n            secondMin=numbers[i];\n            secondMinIndex=i;\n        }\n    }\n    if(minIndex<secondMinIndex){\n        return(min,secondMin);\n    }else{\n        return(secondMin,min);\n    }\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "numbers.sort();\n    var closest_distance = Math.abs(numbers[0] - numbers[1]);\n    var first_number = numbers[0];\n    var second_number = numbers[1];\n    for (var i = 0; i < numbers.length - 1; i++) {\n        if (Math.abs(numbers[i] - numbers[i + 1]) < closest_distance) {\n            closest_distance = Math.abs(numbers[i] - numbers[i + 1]);\n            first_number = numbers[i];\n            second_number = numbers[i + 1];\n        }\n    }\n    return(first_number, second_number);\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "let diff = [];\n    for (let i = 0; i < numbers.length - 1; i++) {\n        diff.push(Math.abs(numbers[i] - numbers[i + 1]));\n    }\n    let min = Math.min(...diff);\n    let index = diff.indexOf(min);\n    return (numbers[index], numbers[index + 1]);\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "var smallest = numbers[0];\n\tvar largest = numbers[0];\n\tvar difference = [];\n\tvar newList = [];\n\tfor(i=0; i<numbers.length; i++){\n\t\tvar value = numbers[i];\n\t\tif(value < smallest){\n\t\t\tsmallest = value;\n\t\t}\n\t\tif(value > largest){\n\t\t\tlargest = value;\n\t\t}\n\t}\n\tfor(i=0; i<numbers.length; i++){\n\t\tif(numbers[i] == smallest){\n\t\t\tcontinue;\n\t\t}\n\t\tdifference.push(largest - numbers[i]);\n\t}\n\tfor(i=0; i<difference.length; i++){\n\t\tif(i == 0){\n\t\t\tnewList.push(difference[i]);\n\t\t}\n\t\tif(difference[i] < newList[0]){\n\t\t\tnewList = [];\n\t\t\tnewList.push(difference[i]);\n\t\t}\n\t\tif(difference[i] == newList[0]){\n\t\t\tnewList.push(difference[i]);\n\t\t}\n\t}\n\tfor(i=0; i<numbers.length; i++){\n\t\tfor(j=0; j<newList.length; j++){\n\t\t\tif(largest - numbers[i] == newList[j]){\n\t\t\t\treturn smallest + \", \" + numbers[i];\n\t\t\t}\n\t\t}\n\t}\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "var difflist=[];\n    var diff;\n    for(var i=0;i<numbers.length-1;i++){\n        diff=numbers[i+1]-numbers[i];\n        difflist.push(diff);\n    }\n    var smallnum=Math.min.apply(null,difflist);\n    var index=difflist.indexOf(smallnum);\n    var num1=numbers[index];\n    var num2=numbers[index+1];\n    var result=[num1,num2];\n    return result;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "var sorted_array = sort_array(numbers);\n    var closest_numbers = [];\n    for(var i = 0; i < sorted_array.length; i++){\n        if(i == sorted_array.length - 1){\n            return closest_numbers;\n        }\n        var diff = sorted_array[i+1] - sorted_array[i];\n        closest_numbers.push([sorted_array[i], sorted_array[i+1], diff]);\n    }\n    var min = closest_numbers[0][2];\n    var min_index = 0;\n    for(var i = 1; i < closest_numbers.length; i++){\n        if(closest_numbers[i][2] < min){\n            min = closest_numbers[i][2];\n            min_index = i;\n        }\n    }\n    return [closest_numbers[min_index][0], closest_numbers[min_index][1]];\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "if(!Array.isArray(numbers)){\n        throw new Error(\"Parameter must be an array\");\n    }\n    if(numbers.length < 2){\n        throw new Error(\"Parameter must have at least two elements\");\n    }\n    var minDiff = Math.abs(numbers[0] - numbers[1]);\n    var minIndexes = [0, 1];\n    for(var i = 0; i < numbers.length - 1; i++){\n        var diff = Math.abs(numbers[i] - numbers[i + 1]);\n        if(diff < minDiff){\n            minDiff = diff;\n            minIndexes = [i, i + 1];\n        }\n    }\n    var smaller = numbers[minIndexes[0]];\n    var larger = numbers[minIndexes[1]];\n    if(larger < smaller){\n        smaller = numbers[minIndexes[1]];\n        larger = numbers[minIndexes[0]];\n    }\n    return {\n        smaller: smaller,\n        larger: larger\n    };\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "var l = numbers.length;\n    var smallest = [numbers[0], numbers[1]];\n    var smallest_diff = smallest[1] - smallest[0];\n    for (var i = 0; i < l; i++){\n        for (var j = i + 1; j < l; j++){\n            var diff = numbers[j] - numbers[i];\n            if (diff < smallest_diff){\n                smallest = [numbers[i], numbers[j]];\n                smallest_diff = diff;\n            }\n        }\n    }\n    return smallest;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "let min = Number.MAX_VALUE;\n\tlet closest_elements = [numbers[0], numbers[1]];\n\tfor(let i = 0; i < numbers.length; i++){\n\t\tfor(let j = i + 1; j < numbers.length; j++){\n\t\t\tlet diff = Math.abs(numbers[i] - numbers[j]);\n\t\t\tif(diff < min){\n\t\t\t\tmin = diff;\n\t\t\t\tclosest_elements = [numbers[i], numbers[j]];\n\t\t\t}\n\t\t}\n\t}\n\treturn closest_elements;\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n",
        "snippet": [
            "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n"
        ],
        "simplified": "Return sorted unique common elements for two lists.",
        "task_id": "58",
        "3": "return l1.filter(l => l2.includes(l)).sort().reduce((a, b) => a === b ? a : [a, b], [])\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "l1.sort(function(a, b){return a-b});\n    l2.sort(function(a, b){return a-b});\n    var i = 0;\n    var j = 0;\n    var result = [];\n    while (i < l1.length && j < l2.length){\n        if (l1[i] == l2[j]){\n            result.push(l1[i]);\n            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j]){\n            i++;\n        }\n        else {\n            j++;\n        }\n    }\n    return result;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "return l1.filter(i => l2.includes(i));\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "let l12 = [];\n    let l21 = [];\n    for(let i = 0; i < l1.length; i++){\n        for(let j = 0; j < l2.length; j++){\n            if(l1[i] === l2[j]){\n                l12.push(l1[i]);\n            }\n        }\n    }\n    l12.sort();\n    for(let i = 0; i < l2.length; i++){\n        for(let j = 0; j < l1.length; j++){\n            if(l2[i] === l1[j]){\n                l21.push(l2[i]);\n            }\n        }\n    }\n    l21.sort();\n    let common12 = [];\n    let common21 = [];\n    let common = [];\n    for(let i = 0; i < l12.length; i++){\n        if(l12[i] === l12[i + 1]){\n            continue;\n        }else{\n            common12.push(l12[i]);\n        }\n    }\n    for(let i = 0; i < l21.length; i++){\n        if(l21[i] === l21[i + 1]){\n            continue;\n        }else{\n            common21.push(l21[i]);\n        }\n    }\n    for(let i = 0; i < common12.length; i++){\n        for(let j = 0; j < common21.length; j++){\n            if(common12[i] === common21[j]){\n                common.push(common12[i]);\n            }\n        }\n    }\n    return common;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "let common = [];\n    for(let i = 0; i < l1.length; i++){\n        for(let j = 0; j < l2.length; j++){\n            if(l1[i] === l2[j]){\n                common.push(l1[i]);\n            }\n        }\n    }\n    console.log(common);\n    return common;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "return array_union(l1, l2).filter(function(elem){\n    return array_intersection(l1, l2).includes(elem);\n  });\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "return Array.from(new Set(l1.filter(x => l2.includes(x))));\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "// var result = [];\n    // for(var i = 0; i < l1.length; i++){\n    //     for(var j = 0; j < l2.length; j++){\n    //         if(l1[i] === l2[j]){\n    //             result.push(l1[i]);\n    //         }\n    //     }\n    // }\n    // return result;\n    return l1.filter(function(n){\n        return l2.indexOf(n) != -1;\n    });\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "var c=unique(l1).filter(v=>unique(l2).includes(v))\n    return c\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "return l1.filter(function(elem){\n        return l2.indexOf(elem) > -1;\n    }).sort(function(a, b){return a - b});\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "var result = [];\n    var l1 = l1.sort();\n    var l2 = l2.sort();\n    var i = 0;\n    var j = 0;\n    while(i < l1.length && j < l2.length){\n        if(l1[i] < l2[j]){\n            i++;\n        }else if(l1[i] > l2[j]){\n            j++;\n        }else{\n            result.push(l1[i]);\n            i++;\n            j++;\n        }\n    }\n    return result;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "var l3 = l1.concat(l2);\n    return l3.filter(function(item, pos) {\n        return l3.indexOf(item) == pos;\n    });\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "var l3 = [];\n    var ll3 = 0;\n    for (i = 0; i < l1.length; i++){\n        for (j = 0; j < l2.length; j++){\n            if (l1[i] == l2[j]){\n                l3[ll3] = l1[i];\n                ll3 = ll3 + 1;\n            }\n        }\n    }\n    l3.sort();\n    for (var i = 0; i < l3.length - 1; i++){\n        if (l3[i] == l3[i + 1]){\n            l3.splice(i, 1);\n            i = i - 1;\n        }\n    }\n    return l3;\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "//list1 and list2 are sorted lists of numbers.\n    let res = [];\n    let curr1 = 0;\n    let curr2 = 0;\n    while(curr1 < l1.length && curr2 < l2.length){\n        if(l1[curr1] < l2[curr2]){\n            curr1 += 1;\n        }\n        else if(l1[curr1] > l2[curr2]){\n            curr2 += 1;\n        }\n        else{\n            res.push(l1[curr1]);\n            curr1 += 1;\n            curr2 += 1;\n        }\n    }\n    return res;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "let union = l1.concat(l2);\n\tunion = [...new Set(union)];\n\tlet common = [];\n\tunion.forEach(num => {\n\t\tif(l1.includes(num) && l2.includes(num)){\n\t\t\tcommon.push(num);\n\t\t}\n\t});\n\treturn common;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "return (l1.concat(l2)).sort().filter( function(el, i, arr){ return (arr.indexOf(el) == i); } );\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "var result = [];\n  var x = 0;\n  var y = 0;\n  var input1 = l1.sort(sortNumber);\n  var input2 = l2.sort(sortNumber);\n  for(x = 0; x < input1.length; x++){\n    for(y = 0; y < input2.length; y++){\n      if(input1[x] === input2[y]){\n        result.push(input1[x]);\n      }\n    }\n  }\n  var result = result.filter(function(item, i, ar){ return ar.indexOf(item) === i; });\n  return result;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "return unique(l1.filter(i => l2.includes(i)));\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "var a1 = l1.filter(value => l2.includes(value)).sort((a, b) => a - b);\n    return [...new Set(a1)];\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "return l1.filter(e => l2.includes(e)).sort((a, b) => a - b).filter((e, i, arr) => arr.indexOf(e) === i);\n}",
        "grade-19": {
            "execution": 1
        }
    },
    {
        "intent": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\nfunction string_to_md5(text){\n",
        "snippet": [
            "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n"
        ],
        "simplified": "Given a string 'text', return its md5 hash equivalent string. If 'text' is an empty string, return None.",
        "task_id": "162",
        "0": "return md5(text);\n}",
        "grade-0": {
            "execution": 0
        },
        "1": "var hash = crypto.createHash('md5');\n    hash.update(text);\n    var hex = hash.digest('hex');\n    return hex;\n}",
        "grade-1": {
            "execution": 0
        },
        "2": "if (text.length == 0) {\n        return \"None\";\n    } else {\n        var md5 = crypto.createHash('md5');\n        md5.update(text);\n        return md5.digest('hex');\n    }\n}",
        "grade-2": {
            "execution": 0
        },
        "3": "if (text.length == 0) return None;\n\treturn md5(text);\n}",
        "grade-3": {
            "execution": 0
        },
        "4": "if(text === ''){\n    return null;\n  }\n  return hex_md5(text);\n}",
        "grade-4": {
            "execution": 0
        },
        "5": "return md5(text);\n}",
        "grade-5": {
            "execution": 0
        },
        "6": "var hash = crypto.createHash('md5');\n    hash.update(text);\n    return hash.digest('hex');\n}",
        "grade-6": {
            "execution": 0
        },
        "7": "return crypto.createHash('md5').update(text).digest('hex');\n}",
        "grade-7": {
            "execution": 0
        },
        "8": "let hash = crypto.createHash('md5');\n  hash.update(text);\n  return hash.digest('hex');\n}",
        "grade-8": {
            "execution": 0
        },
        "9": "if (text.length === 0) {\n        return None;\n    } else {\n        return CryptoJS.MD5(text).toString();\n    }\n}",
        "grade-9": {
            "execution": 0
        },
        "10": "if(text === '') return null;\n  return md5(text);\n}",
        "grade-10": {
            "execution": 0
        },
        "11": "//md5 hash function object\n\tvar md5 = require('MD5');\n\treturn md5(text);\n}",
        "grade-11": {
            "execution": 0
        },
        "13": "if (text === ''){\n        return;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}",
        "grade-13": {
            "execution": 0
        },
        "14": "if(!text){\n        return null;\n    }\n    let md5 = require('md5');\n    return md5(text);\n}",
        "grade-14": {
            "execution": 0
        },
        "15": "if (text.length == 0) {\n        return null;\n    }\n    return md5(text);\n}",
        "grade-15": {
            "execution": 0
        },
        "16": "var crypto = require('crypto');\n    return crypto.createHash('md5').update(text).digest('hex');\n}",
        "grade-16": {
            "execution": 0
        },
        "17": "var crypto = require('crypto');\n  if (text === \"\"){\n    return null;\n  }\n  var hash = crypto.createHash('md5').update(text).digest('hex');\n  return hash;\n}",
        "grade-17": {
            "execution": 1
        },
        "18": "if(text == ''){\n    return null;\n  }\n  var md5 = require('crypto-js/md5');\n  return md5(text).toString();\n}",
        "grade-18": {
            "execution": 0
        },
        "19": "return !text ? null : require('crypto').createHash('md5').update(text).digest('hex');\n}",
        "grade-19": {
            "execution": 1
        }
    },
    {
        "intent": "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n",
        "snippet": [
            "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n"
        ],
        "simplified": "Given a positive integer n, return the count of the numbers of n-digit positive integers that start or end with 1.",
        "task_id": "83",
        "3": "if(n == 1){\n    return 2;\n  }\n  if(n < 1){\n    return 0;\n  }\n  let count = 0;\n  let nums = Array(n).fill(0);\n  for(let i = 0; i < nums.length; i++){\n    if(i === 0 || i === nums.length - 1){\n      nums[i] = 1;\n    }\n    if(i > 0 && i < nums.length - 1){\n      nums[i] = 0;\n    }\n    count += parseInt(nums.join(''));\n  }\n  return count;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "if(n<1){\n    return 0;\n  }\n  if(n===1){\n    return 10;\n  }\n  if(n===2){\n    return 55;\n  }\n  var a = 9;\n  var b = 9;\n  var sum = a + b;\n  while(n>2){\n    a = b;\n    b = a * 9;\n    sum = sum + a + b;\n    n = n - 1;\n  }\n  return sum;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "const start = count_start_one(n);\n  const end = count_end_one(n);\n  console.log(start);\n  console.log(end);\n  return start + end - 9;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "if(n == 1){\n\t\treturn 1;\n\t}\n\tvar num = Math.pow(10, n-1);\n\treturn num + 9*(num-1);\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "var count = 0;\n    for(var i = 1; i <= n; i++){\n        count += 9 * Math.pow(10, i - 1);\n    }\n    return count;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "var res = 0;\n    var total = Math.pow(10, n) - 1;\n    for(var i = 1; i < n; i++){\n        var high = Math.pow(10, i) - 1;\n        var low = total - high;\n        res += high * low;\n    }\n    res += total;\n    return res;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "if(n == 1){\n        return 10;\n    }\n    return (9*ten_pow(n-1)) + starts_one_ends(n-1);\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "//we count from 1 to 1000 how many times \"1\" is found\n    var count = 0;\n    for(var i = 1; i <= Math.pow(10, n) - 1; i++){\n        count += count_one(i.toString());\n    }\n    return count;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "if(n === 0){\n        return 0;\n    }\n    if(n === 1){\n        return 1;\n    }\n    return 9 * Math.pow(10,n-1) + 10 * (n-1) * Math.pow(10,n-2);\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "var ans = (Math.pow(10, n-1) - Math.pow(9, n-1)) + (Math.pow(10, n-1) - Math.pow(9, n-1))*(n-1);\n    return ans;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "let arr = new Array(n+1).fill(0);\n    arr[0] = 0;\n    arr[1] = 1;\n    for(let i = 2; i <= n; i++){\n        arr[i] = 10 * arr[i-1] + Math.pow(10, i-1);\n    }\n    return arr[n];\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "//...\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "if(n === 1){\n\t\treturn 10;\n\t}else{\n\t\tlet smaller = starts_one_ends(n-1);\n\t\treturn (smaller - 1) * 9 + smaller;\n\t}\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "if(n===1){\n    return 1;\n  }\n  if(n===2){\n    return 10;\n  }\n  return starts_one_ends(n-1)+10*starts_one_ends(n-2);\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "var res = 0;\n  for(var i = 0; i < n; i++){\n    res += Math.pow(10, i);\n  }\n  return 2 * res;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "if(n === 0) return 0;\n    if(n === 1) return 10;\n    if(n === 2) return 10 * 9 + 9 * 9;\n    var start_end = 10;\n    for(var i = 1; i < n; i++){\n        start_end += Math.pow(10, i) + 9 * Math.pow(10, i - 1);\n    }\n    return start_end;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "var count = 0;\n    for(var i = 1; i <= Math.pow(10, n)-1; i++){\n        var string = i.toString();\n        if(string[0] == 1 || string[string.length-1] == 1){\n            count++;\n        }\n    }\n    return count;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "if(n==1){\n    return 10;\n  }\n  if(n>1){\n    return ends_one(n)+starts_one(n);\n  }\n  else{\n    return \"Error!!!!\";\n  }\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "let count = 0;\n    for(let i = 1; i <= n; i++){\n        count += Math.pow(10, i - 1);\n    }\n    return count;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "var result = 9;\n\tfor(var i = 1; i < n; i++){\n\t\tresult *= 10 - i;\n\t}\n\treturn result;\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//Return True is list elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0, -10])\n// True\nfunction monotonic(l){\n",
        "snippet": [
            "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n"
        ],
        "simplified": "Return True is list elements are monotonically increasing or decreasing.",
        "task_id": "57",
        "3": "var is_increasing = true;\n  var is_decreasing = true;\n  var last_num = l[0];\n  var i = 1;\n  while (i < l.length){\n    if (last_num > l[i]){\n      is_increasing = false;\n    }\n    if (last_num < l[i]){\n      is_decreasing = false;\n    }\n    last_num = l[i];\n    i++;\n  }\n  return is_increasing || is_decreasing;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "var flag=0;\n    if(l[0]>l[1]){\n        for(var i=0;i<l.length-1;i++){\n            if(l[i]<l[i+1]){\n                flag=1;\n                break;\n            }\n        }\n    }\n    else{\n        for(var i=0;i<l.length-1;i++){\n            if(l[i]>l[i+1]){\n                flag=1;\n                break;\n            }\n        }\n    }\n    if(flag==1){\n        return false;\n    }\n    else{\n        return true;\n    }\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "//if(!l) return true;\n  //if(l.length == 1) return true;\n  var mono = true;\n  var inc = (l[1] - l[0] > 0);\n  for(var i = 2; i < l.length; i++){\n    if(inc && l[i] - l[i-1] < 0){\n      mono = false;\n      break;\n    }\n    if(!inc && l[i] - l[i-1] > 0){\n      mono = false;\n      break;\n    }\n  }\n  return mono;\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "if(l.length <= 1){\n        return true;\n    }\n    var direction = l[1] - l[0];\n    for(var i = 2; i < l.length; i++){\n        if(direction == 0){\n            direction = l[i] - l[i-1];\n            continue;\n        }\n        if((l[i] - l[i-1]) / direction < 0){\n            return false;\n        }\n    }\n    return true;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "if(l.length <= 2){\n        return true;\n    }\n    if(l[0] < l[1]){\n        for(let i = 0; i < l.length - 1; i++){\n            if(l[i] > l[i+1]){\n                return false;\n            }\n        }\n    }\n    else if(l[0] > l[1]){\n        for(let i = 0; i < l.length - 1; i++){\n            if(l[i] < l[i+1]){\n                return false;\n            }\n        }\n    }\n    return true;\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "console.log(l);\n    let len = l.length-1;\n    let count = 0;\n    let val = (l[0] < l[1]) ? 0 : 1;\n    for(let i=0; i<len; i++){\n        if(val == 0){\n            if(l[i] < l[i+1]){\n                count++;\n            }else{\n                break;\n            }\n        }else{\n            if(l[i] > l[i+1]){\n                count++;\n            }else{\n                break;\n            }\n        }\n    }\n    console.log((count+1) == len);\n}\nmonotonic([1, 20, 4, 10]);",
        "grade-2": {
            "execution": 0
        },
        "11": "for(var i = 1; i < l.length; i++){\n\t\tif(l[i] < l[i-1]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "var arr = l.toString().split(',');\n    var key = [];\n    for(var i = 0; i < arr.length - 1; i++){\n        key.push(arr[i] - arr[i + 1]);\n    }\n    var count = 0;\n    for(var j = 0; j < key.length; j++){\n        if(key[j] === 0){\n            count++;\n        }\n    }\n    if(count === key.length){\n        return true;\n    }\n    var flag = false;\n    for(var k = 0; k < key.length; k++){\n        if(k === 0){\n            flag = (key[k] < 0 ? true : false);\n        }else{\n            if(flag !== (key[k] < 0 ? true : false)){\n                return false;\n            }\n        }\n    }\n    return true;\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "var count1 = 0;\n    var count2 = 0;\n    for(var i = 0; i < l.length-1; i++){\n        if(l[i] < l[i+1]){\n            count1++;\n        }\n        else if(l[i] > l[i+1]){\n            count2++;\n        }\n    }\n    if(count1 == 0 || count2 == 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "if(increasing(l)){\n        return true;\n    }else if(decreasing(l)){\n        return true;\n    }else{\n        return false;\n    }\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "var increasing = true;\n  var decreasing = true;\n  for(var i = 0; i < l.length - 1; i++){\n    if(l[i] > l[i+1]){\n      increasing = false;\n    }\n    if(l[i] < l[i+1]){\n      decreasing = false;\n    }\n  }\n  return (increasing || decreasing);\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "var check = \"\";\n  var flag = false;\n  for(var i = 0; i < l.length - 1; i++){\n    if(l[i] < l[i+1]){\n      check = \">\";\n      break;\n    }\n    else if(l[i] > l[i+1]){\n      check = \"<\";\n      break;\n    }\n  }\n  for(var i = 0; i < l.length - 1; i++){\n    if(check == \">\"){\n      if(l[i] > l[i+1]){\n        flag = true;\n        break;\n      }\n    }\n    else if(check == \"<\"){\n      if(l[i] < l[i+1]){\n        flag = true;\n        break;\n      }\n    }\n  }\n  if(flag){\n    return false;\n  }\n  else{\n    return true;\n  }\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "var increasing = true\n    var decreasing = true\n    for (var i = 0; i < l.length-1; i++){\n        if (l[i] < l[i+1]){\n            decreasing = false\n        }\n        if (l[i] > l[i+1]){\n            increasing = false\n        }\n    }\n    return increasing || decreasing\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "for(var i = 1; i < l.length; i++){\n\t\tif(l[i] > l[i-1]){\n\t\t\tfor(var j = i; j < l.length; j++){\n\t\t\t\tif(l[j] < l[j-1])\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\telse if(l[i] < l[i-1]){\n\t\t\tfor(var j = i; j < l.length; j++){\n\t\t\t\tif(l[j] > l[j-1])\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn true;\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "var dec = true;\n\tvar inc = true;\n\tfor(var i = 0; i < l.length-1; i++){\n\t\tif(l[i] > l[i+1])\n\t\t\tinc = false;\n\t\tif(l[i] < l[i+1])\n\t\t\tdec = false;\n\t}\n\treturn dec || inc;\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "var g = l[0];\n    var isTrue = true;\n    var isTrue2 = true;\n    for(var i = 0; i < l.length; i++){\n        if(l[i] < g){\n            isTrue = false;\n        }\n        g = l[i];\n    }\n    var g2 = l[0];\n    for(var i = 0; i < l.length; i++){\n        if(l[i] > g2){\n            isTrue2 = false;\n        }\n        g2 = l[i];\n    }\n    if(isTrue == true || isTrue2 == true){\n        return true;\n    }else{\n        return false;\n    }\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "var length = l.length;\n    var list = [];\n    if(l[0]<l[1]){\n        var i = 1;\n        while(i<length){\n            if(l[i]<l[i-1]){\n                list.push(1);\n            }\n            i++;\n        }\n    }\n    else{\n        var i = 1;\n        while(i<length){\n            if(l[i]>l[i-1]){\n                list.push(1);\n            }\n            i++;\n        }\n    }\n    if(list.length>0){\n        return false;\n    }\n    else{\n        return true;\n    }\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "// your code here\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "var i = 0;\n\tvar isInc = false;\n\tvar isDec = false;\n\twhile (i < l.length - 1){\n\t\tif (l[i] < l[i+1]){\n\t\t\tisInc = true;\n\t\t} else if (l[i] > l[i+1]){\n\t\t\tisDec = true;\n\t\t} else {\n\t\t\tisInc = false;\n\t\t\tisDec = false;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\treturn isInc || isDec;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "var mono = false;\n\tvar dec = false;\n\tif(l.length == 0){\n\t\treturn mono;\n\t}\n\tfor(var i = 0; i < l.length-1; i++){\n\t\tif(l[i] < l[i+1]){\n\t\t\tmono = true;\n\t\t}else if(l[i] > l[i+1]){\n\t\t\tdec = true;\n\t\t}else{\n\t\t\tdec = false;\n\t\t\tmono = false;\n\t\t}\n\t}\n\tif(mono === true || dec === true){\n\t\treturn true;\n\t}else{\n\t\treturn false;\n\t}\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152) == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman(number){\n",
        "snippet": [
            "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n"
        ],
        "simplified": "Given a positive integer, obtain its roman numeral equivalent as a string, and return it in lowercase. Restrictions: 1 <= num <= 1000",
        "task_id": "156",
        "3": "number = number.toString();\n    var output = '';\n    var numbers = {\n        \"1\": \"i\",\n        \"5\": \"v\",\n        \"10\": \"x\",\n        \"50\": \"l\",\n        \"100\": \"c\",\n        \"500\": \"d\",\n        \"1000\": \"m\"\n    };\n    var sub = {\n        \"2\": \"ii\",\n        \"3\": \"iii\",\n        \"4\": \"iv\",\n        \"6\": \"vi\",\n        \"7\": \"vii\",\n        \"8\": \"viii\",\n        \"9\": \"ix\",\n        \"11\": \"xi\",\n        \"12\": \"xii\",\n        \"13\": \"xiii\",\n        \"14\": \"xiv\",\n        \"15\": \"xv\",\n        \"16\": \"xvi\",\n        \"17\": \"xvii\",\n        \"18\": \"xviii\",\n        \"19\": \"xix\",\n        \"20\": \"xx\",\n        \"30\": \"xxx\",\n        \"40\": \"xl\",\n        \"60\": \"lx\",\n        \"70\": \"lxx\",\n        \"80\": \"lxxx\",\n        \"90\": \"xc\",\n        \"110\": \"cx\",\n        \"120\": \"cxx\",\n        \"130\": \"cxxx\",\n        \"140\": \"cxl\",\n        \"150\": \"cl\",\n        \"160\": \"clx\",\n        \"170\": \"clxx\",\n        \"180\": \"clxxx\",\n        \"190\": \"cxc\",\n        \"200\": \"cc\",\n        \"300\": \"ccc\",\n        \"400\": \"cd\",\n        \"600\": \"dc\",\n        \"700\": \"dcc\",\n        \"800\": \"dccc\",\n        \"900\": \"cm\",\n        \"1100\": \"mc\",\n        \"1200\": \"mcc\",\n        \"1300\": \"mccc\",\n        \"1400\": \"mcd\",\n        \"1500\": \"md\",\n        \"1600\": \"mdc\",\n        \"1700\": \"mdcc\",\n        \"1800\": \"mdccc\",\n        \"1900\": \"mcm\"",
        "grade-3": {
            "execution": 0
        },
        "0": "let result = '';\n    let decimals = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    let numerals = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i'];\n    for (let i = 0; i < decimals.length; i++) {\n        while (number % decimals[i] < number) {\n            result += numerals[i];\n            number -= decimals[i];\n        }\n    }\n    return result;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "var romanNum = \"\";\n    var tensArray = [\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"];\n    var onesArray = [\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"];\n    romanNum += tensArray[Math.floor(number/10)];\n    romanNum += onesArray[number%10];\n    return romanNum;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "var miniRoman = {\n      1: 'i',\n      5: 'v',\n      10: 'x',\n      50: 'l',\n      100: 'c',\n      500: 'd',\n      1000: 'm'\n    };\n    var result = '';\n    var nums = [1000,500,100,50,10,5,1];\n    var newString = String(number);\n    var arr = newString.split('');\n    var first = parseInt(arr[0]);\n    var second = parseInt(arr[1]);\n    var third = parseInt(arr[2]);\n    if(first < 4){\n      for(var j = 1; j <= first; j++){\n        result += miniRoman[nums[6]];\n      }\n    }else if(first > 5 && first < 9){\n      result += miniRoman[nums[5]];\n      for(var i = 1; i <= first - 5; i++){\n        result += miniRoman[nums[6]];\n      }\n    }else if(first === 4){\n      result += miniRoman[nums[6]] + miniRoman[nums[5]];\n    }else if(first === 5){\n      result += miniRoman[nums[5]];\n    }else if(first === 9){\n      result += miniRoman[nums[6]] + miniRoman[nums[4]];\n    }\n    if(second < 4){\n      for(var m = 1; m <= second; m++){\n        result += miniRoman[nums[4]];\n      }\n    }else if(second > 5 && second < 9){\n      result += miniRoman[nums[3]];\n      for(var k = 1; k <= second - 5; k++){\n        result += miniRoman[nums[4]];\n      }\n    }else if(second === 4){\n      result += miniRoman[nums[4]] + miniRoman[nums[3]];\n    }else if(second === 5){\n      result += miniRoman[nums[3]];\n    }else if(second === 9){\n      result += miniRoman[nums[",
        "grade-7": {
            "execution": 0
        },
        "16": "var result = '';\n\tvar characters = {\n\t\t1 : 'i',\n\t\t5 : 'v',\n\t\t10 : 'x',\n\t\t50 : 'l',\n\t\t100 : 'c',\n\t\t500 : 'd',\n\t\t1000 : 'm'\n\t};\n\tvar digits = number.toString().split('').reverse();\n\tfor (var i = 0; i < digits.length; i++) {\n\t\tvar digit = digits[i];\n\t\tvar power = Math.pow(10, i);\n\t\tswitch (digit) {\n\t\t\tcase '4': result = characters[power] + characters[power * 5] + result; break;\n\t\t\tcase '9': result = characters[power] + characters[power * 10] + result; break;\n\t\t\tdefault:\n\t\t\t\tif (digit < 4) {\n\t\t\t\t\tresult = new Array(parseInt(digit) + 1).join(characters[power]) + result;\n\t\t\t\t} else if (digit >= 5) {\n\t\t\t\t\tresult = characters[power * 5] + new Array(parseInt(digit) - 4).join(characters[power]) + result;\n\t\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "if(number > 1000){\n      return \"Too Big\"\n   }\n\n   if(number < 1){\n      return \"Too Small\"\n   }\n\n   let finalString = \"\"\n   let digits = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n   let roman = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n\n   for(let i = 0; i < digits.length; i++){\n      while(number >= digits[i]){\n         finalString += roman[i]\n         number -= digits[i]\n      }\n   }\n\n   return finalString.toLowerCase()\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "var numerals = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'xl',\n        50: 'l',\n        90: 'xc',\n        100: 'c',\n        400: 'cd',\n        500: 'd',\n        900: 'cm',\n        1000: 'm'\n    };\n    var result = \"\";\n    var values = Object.keys(numerals).reverse();\n    var keys = Object.values(numerals).reverse();\n    while (number > 0) {\n        for (var i = 0; i < values.length; i++) {\n            if (number >= values[i]) {\n                result += keys[i];\n                number -= values[i];\n                break;\n            }\n        }\n    }\n    return result;\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "let roman = '';\n    let temp = '';\n    for(let i = 0; i < number.toString().length; i++){\n        const numeral = number.toString().charAt(i);\n        switch(numeral){\n            case '1': temp = 'i'; break;\n            case '2': temp = 'ii'; break;\n            case '3': temp = 'iii'; break;\n            case '4': temp = 'iv'; break;\n            case '5': temp = 'v'; break;\n            case '6': temp = 'vi'; break;\n            case '7': temp = 'vii'; break;\n            case '8': temp = 'viii'; break;\n            case '9': temp = 'ix'; break;\n            default: break;\n        }\n        if(i === 0){\n            roman = temp;\n        }else{\n            roman = temp + roman;\n        }\n    }\n    return roman;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "// assume that the number is in correct range\n    var roman = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i'];\n    var nums = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    var romanized = '';\n    for (var i = 0; i < nums.length; i++) {\n        while (nums[i] <= number) {\n            romanized += roman[i];\n            number -= nums[i];\n        }\n    }\n    return romanized;\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "var number_string = number.toString();\n    var num_length = number_string.length;\n    var result = \"\";\n    for(var i = 0; i < num_length; i++){\n        if(number_string[i] === \"1\"){\n            result += numeral(i);\n        }\n        else if(number_string[i] === \"2\"){\n            result += numeral(i) + numeral(i);\n        }\n        else if(number_string[i] === \"3\"){\n            result += numeral(i) + numeral(i) + numeral(i);\n        }\n        else if(number_string[i] === \"4\"){\n            result += numeral(i) + numeral(i + 1);\n        }\n        else if(number_string[i] === \"5\"){\n            result += numeral(i + 1);\n        }\n        else if(number_string[i] === \"6\"){\n            result += numeral(i + 1) + numeral(i);\n        }\n        else if(number_string[i] === \"7\"){\n            result += numeral(i + 1) + numeral(i) + numeral(i);\n        }\n        else if(number_string[i] === \"8\"){\n            result += numeral(i + 1) + numeral(i) + numeral(i) + numeral(i);\n        }\n        else if(number_string[i] === \"9\"){\n            result += numeral(i) + numeral(i + 2);\n        }\n    }\n    return result;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "var result = \"\";\n    var nums = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ];\n    var romans = [ \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" ];\n    for (var i = 0; i < 13; i++) {\n        while (number >= nums[i]) {\n            result += romans[i];\n            number -= nums[i];\n        }\n    }\n    return result;\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "if(number>1000 || number<1){\n        return null;\n    }\n    const result = {\n        M: 0,\n        D: 0,\n        C: 0,\n        L: 0,\n        X: 0,\n        V: 0,\n        I: 0\n    };\n    const numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    const roman = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"];\n    let i = 0;\n    while (number > 0) {\n        if (number - numbers[i] >= 0) {\n            number -= numbers[i];\n            result[roman[i]] += 1;\n        } else {\n            i++;\n        }\n    }\n    return Object.keys(result).reduce((a, b) => a + result[b] * b, \"\");\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "if(number === 0){\n\t\treturn '';\n\t}\n\telse{\n\t\tif(number >= 1000){\n\t\t\treturn \"m\" + int_to_mini_roman(number - 1000);\n\t\t}\n\t\telse if(number >= 900){\n\t\t\treturn \"cm\" + int_to_mini_roman(number - 900);\n\t\t}\n\t\telse if(number >= 500){\n\t\t\treturn \"d\" + int_to_mini_roman(number - 500);\n\t\t}\n\t\telse if(number >= 400){\n\t\t\treturn \"cd\" + int_to_mini_roman(number - 400);\n\t\t}\n\t\telse if(number >= 100){\n\t\t\treturn \"c\" + int_to_mini_roman(number - 100);\n\t\t}\n\t\telse if(number >= 90){\n\t\t\treturn \"xc\" + int_to_mini_roman(number - 90);\n\t\t}\n\t\telse if(number >= 50){\n\t\t\treturn \"l\" + int_to_mini_roman(number - 50);\n\t\t}\n\t\telse if(number >= 40){\n\t\t\treturn \"xl\" + int_to_mini_roman(number - 40);\n\t\t}\n\t\telse if(number >= 10){\n\t\t\treturn \"x\" + int_to_mini_roman(number - 10);\n\t\t}\n\t\telse if(number >= 9){\n\t\t\treturn \"ix\" + int_to_mini_roman(number - 9);\n\t\t}\n\t\telse if(number >= 5){\n\t\t\treturn \"v\" + int_to_mini_roman(number - 5);\n\t\t}\n\t\telse if(number >= 4){\n\t\t\treturn \"iv\" + int_to_mini_roman(number - 4);\n\t\t}\n\t\telse if(number >= 1){\n\t\t\treturn \"i\" + int_to_mini_roman(number - 1);\n\t\t}\n\t}\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "if (typeof number !== 'number') throw new Error('Not a number.');\n  if (number < 1 || number > 1000) throw new Error('Not between 1 and 1000.');\n  var numString = '';\n  //For each number, check the numer and add the corresponding string of numerals\n  if (number >= 1000) numString += 'm';\n  if (number >= 900) numString += 'cm';\n  if (number >= 500) numString += 'd';\n  if (number >= 400) numString += 'cd';\n  if (number >= 100) numString += 'c';\n  if (number >= 90) numString += 'xc';\n  if (number >= 50) numString += 'l';\n  if (number >= 40) numString += 'xl';\n  if (number >= 10) numString += 'x';\n  if (number >= 9) numString += 'ix';\n  if (number >= 5) numString += 'v';\n  if (number >= 4) numString += 'iv';\n  if (number >= 1) numString += 'i';\n  return numString;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "var roman_numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n\tvar integers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n\tvar result = \"\";\n\t\n\twhile(number > 0){\n\t\tfor(var i = 0; i < integers.length; i++){\n\t\t\tif(number >= integers[i]){\n\t\t\t\tresult += roman_numerals[i];\n\t\t\t\tnumber -= integers[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "let t = [\"\",\"C\",\"CC\",\"CCC\",\"CD\",\"D\",\"DC\",\"DCC\",\"DCCC\",\"CM\"];\n    let h = [\"\",\"X\",\"XX\",\"XXX\",\"XL\",\"L\",\"LX\",\"LXX\",\"LXXX\",\"XC\"];\n    let o = [\"\",\"I\",\"II\",\"III\",\"IV\",\"V\",\"VI\",\"VII\",\"VIII\",\"IX\"];\n    let roman = t[Math.floor(number/100)] + h[Math.floor((number%100)/10)] + o[number%10];\n    return roman.toLowerCase();\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "var result = '';\n    //1-9\n    if(number >= 1 && number <= 9){\n        var one_to_nine = {1:\"i\", 2:\"ii\", 3:\"iii\", 4:\"iv\", 5:\"v\", 6:\"vi\", 7:\"vii\", 8:\"viii\", 9:\"ix\"};\n        result = one_to_nine[number];\n    }\n    //10-90\n    if(number >= 10 && number <= 90){\n        var ten_to_ninety = {10:\"x\", 20:\"xx\", 30:\"xxx\", 40:\"xl\", 50:\"l\", 60:\"lx\", 70:\"lxx\", 80:\"lxxx\", 90:\"xc\"};\n        var tens = Math.floor(number/10)*10;\n        result = ten_to_ninety[tens];\n        var remainder = number%10;\n        if(remainder !== 0){\n            var one_to_nine = {1:\"i\", 2:\"ii\", 3:\"iii\", 4:\"iv\", 5:\"v\", 6:\"vi\", 7:\"vii\", 8:\"viii\", 9:\"ix\"};\n            result += one_to_nine[remainder];\n        }\n    }\n    //100-900\n    if(number >= 100 && number <= 900){\n        var hundred_to_nine_hundred = {100:\"c\", 200:\"cc\", 300:\"ccc\", 400:\"cd\", 500:\"d\", 600:\"dc\", 700:\"dcc\", 800:\"dccc\", 900:\"cm\"};\n        var hundreds = Math.floor(number/100)*100;\n        result = hundred_to_nine_hundred[hundreds];\n        var remainder = number%100;\n        if(remainder !== 0){\n            var ten_to_ninety = {10:\"x\", 20:\"xx\", 30:\"xxx\", 40:\"xl\", 50:\"l\", 60:\"lx\", 70:\"lxx\", 80:\"lxxx\", 90:\"xc\"};\n            result += ten_to_ninety[Math.floor(remainder/10)*10];\n            var remainder_two = remainder%10;\n            if(remainder_two !== 0){\n                var one_to_nine = {1:\"i",
        "grade-4": {
            "execution": 0
        },
        "14": "var digits = number.toString().split('');\n    var result = \"\";\n    var numerals = {\n        1: 'i',\n        5: 'v',\n        10: 'x',\n        50: 'l',\n        100: 'c',\n        500: 'd',\n        1000: 'm'\n    };\n    for (var i = 0; i < digits.length; i++) {\n        if (digits[i] == 9) {\n            result += numerals[1*Math.pow(10, digits.length-i-1)] + numerals[1*Math.pow(10, digits.length-i)];\n        } else if (digits[i] >= 5) {\n            result += numerals[5*Math.pow(10, digits.length-i-1)];\n            if (digits[i] > 5) {\n                result += numerals[1*Math.pow(10, digits.length-i-1)].repeat(digits[i]-5);\n            }\n        } else if (digits[i] == 4) {\n            result += numerals[1*Math.pow(10, digits.length-i-1)] + numerals[5*Math.pow(10, digits.length-i-1)];\n        } else {\n            result += numerals[1*Math.pow(10, digits.length-i-1)].repeat(digits[i]);\n        }\n    }\n    return result;\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "var roman=\"\";\n    var romanNumeral = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I'];\n    var numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    for (var i = 0; i < numbers.length; i++) {\n        while (number >= numbers[i]) {\n            roman += romanNumeral[i];\n            number -= numbers[i];\n        }\n    }\n    return roman.toLowerCase();\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "// your code here\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\nfunction rounded_avg(n, m){\n",
        "snippet": [
            "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n"
        ],
        "simplified": "You are given two positive integers n and m, and your task is to compute the average of the integers from n through m (including n and m). Round the answer to the nearest integer and convert that to binary. If n is greater than m, return -1.",
        "task_id": "103",
        "3": "let average = (m+n)/2;\n    if(n>m){\n      return -1;\n    }else{\n      return '0b' + Math.round(average).toString(2);\n    }\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "}",
        "grade-0": {
            "execution": 0
        },
        "8": "if (n > m) {\n    return -1;\n  } else {\n    return Math.round((n + m) / 2).toString(2);\n  }\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "if (n > m) {\n    return -1;\n  }\n  let avg = Math.round((n + m) / 2);\n  return '0b' + avg.toString(2);\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "if(n > m) return -1;\n    let num = 0;\n    for(let i = n; i <= m; i++){\n        num += i;\n    }\n    num = Math.round(num / (m - n + 1));\n    return \"0b\" + num.toString(2);\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "var sum = 0;\n\tvar count = 0;\n\tvar round;\n\tvar binary;\n\tif(n > m){\n\t\treturn -1;\n\t}\n\telse{\n\t\tfor(var i = n; i <= m; i++){\n\t\t\tsum += i;\n\t\t\tcount++;\n\t\t}\n\t\tvar avg = sum / count;\n\t\tvar avg2 = Math.round(avg);\n\t\tbinary = avg2.toString(2);\n\t\tbinary = \"0b\" + binary;\n\t\treturn binary;\n\t}\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "if(n > m){\n      return -1;\n   }\n   var i = n;\n   var sum = 0;\n   while(i <= m){\n      sum += i;\n      i++;\n   }\n   var rounded = Math.round(sum/(m-n+1));\n   return rounded.toString(2);\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "if(n > m) return -1;\n    var sum = 0;\n    for(var i = n; i <= m; i++){\n        sum += i;\n    }\n    return \"0b\" + Math.round(sum / (m - n + 1)).toString(2);\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "if(n>m){\n\t\treturn -1;\n\t}\n\tlet avg = Math.round((n+m)/2);\n\treturn `0b${avg.toString(2)}`;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "if(n>m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i<=m; i++){\n        sum += i;\n    }\n    return `0b${Math.round(sum/(m-n+1)).toString(2)}`;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "var sum = 0;\n  var count = 0;\n  for(var i = n; i <= m; i++){\n    sum += i;\n    count++;\n  }\n  var rounded_avg = Math.round(sum/count);\n  return \"0b\" + rounded_avg.toString(2);\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "var sum=0;\n  if(n>m){\n    return -1;\n  }\n  for(var i=n;i<=m;i++){\n    sum+=i;\n  }\n  return (Math.round(sum/(m-n+1))).toString(2);\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "var ans = (n + m) / 2\n  return ans >= 0 ? '0b' + Math.round(ans).toString(2) : -1\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "if(n>m){\n      return -1;\n    }\n    var total = 0;\n    var count = 0;\n    while(n<=m){\n      total += n;\n      count++;\n      n++;\n    }\n    var rd = Math.round(total/count);\n    return rd.toString(2);\n  }\n  \n  //8. Take a word, and return a dictionary of each letter in the word, \n  // and how many times they appear in the word.\n  // Example:\n  // letter_histogram(\"hello\") => {\"h\": 1, \"e\": 1, \"l\": 2, \"o\": 1}\n  // letter_histogram(\"peter\") => {\"p\": 1, \"e\": 2, \"t\": 1, \"r\": 1}\n  function letter_histogram(word){\n    var dict = {};\n    for(var i = 0; i<word.length; i++){\n      var ltr = word[i];\n      if(dict[ltr] == undefined){\n        dict[ltr] = 1;\n      }\n      else{\n        dict[ltr]++;\n      }\n    }\n    return dict;\n  }\n  \n  //9. Write a function that takes a dictionary of letters and their frequencies \n  //(such as the one returned by letter_histogram), and returns a string \n  //representing a vertical histogram with the letters in the dictionary, \n  //and the frequency for each letter.\n  // Example:\n  // v_histogram({\"h\": 1, \"e\": 1, \"l\": 2, \"o\": 1}) =>\n  // \"*\n  // *\n  // ****\n  // *\n  // *\"\n  // v_histogram({\"p\": 1, \"e\": 2, \"t\": 1, \"r\": 1}) =>\n  // \"*\n  // ***\n  // *\n  // *\"\n  function v_histogram(dictionary){\n    var str = \"\";\n    var max = 0;\n    for(var letter in dictionary){\n      if(dictionary[letter] > max){\n        max = dictionary[letter];\n      }",
        "grade-15": {
            "execution": 0
        },
        "13": "if (n > m) {\n    return -1;\n  }\n  return Math.round((n + m) / 2).toString(2);\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "if(n>m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i<=m; i++){\n        sum+=i;\n    }\n    return (Math.round(sum/(m-n+1))).toString(2);\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "if (n > m) {\n    return -1;\n  } else {\n    return (n + m) / 2;\n  }\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "let avg = Math.round((n + m) / 2);\n    return (n <= m) ? avg.toString(2) : -1;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "if (n>m) {return -1}\n\telse {\n\t\tvar num = Math.round((n+m)/2);\n\t\tvar toBinary = num.toString(2);\n\t\tvar toBinaryString = \"0b\" + toBinary;\n\t\treturn toBinaryString;\n\t}\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "var sum = 0;\n    var avg = 0;\n    var rounded_avg = 0;\n    var binary_avg = \"\";\n    if(n > m){\n        return -1;\n    }\n    else{\n        for(var i = n; i <= m; i++){\n            sum += i;\n        }\n        avg = sum / (m - n + 1);\n        rounded_avg = Math.round(avg);\n        binary_avg = (rounded_avg).toString(2);\n        return \"0b\" + binary_avg;\n    }\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//Return True if all numbers in the list l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// True\n// >>> below_threshold([1, 20, 4, 10], 5)\n// False\nfunction below_threshold(l, t){\n",
        "snippet": [
            "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n"
        ],
        "simplified": "Return True if all numbers in the list l are below threshold t.",
        "task_id": "52",
        "3": "for(let i = 0; i < l.length; i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "var temp = [];\n  temp = l.filter(function(n){return n < t});\n  if(temp.length == l.length){\n    return true;\n  }\n  else{\n    return false;\n  }\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "var temp = l.every(function(value,index,arr){\n    return (value<t)\n  })\n  return temp\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "for(i=0; i<l.length; i++){\n\t\tif(l[i] > t){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "for(var i = 0; i < l.length; i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "return some(l, function(n){\n        return n < t;\n    });\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "for(let i = 0; i < l.length; i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "// YOUR CODE GOES HERE\n    var res = []\n    var flag = 0\n    for(var i=0; i<l.length; i++){\n        if(l[i]<t){\n            res.push(l[i])\n        }else{\n            flag = 1\n        }\n    }\n    if(flag==0){\n        return true\n    }else{\n        return false\n    }\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "for(i = 0; i < l.length; i++){\n        if(l[i] > t){\n            return false;\n        }\n    }\n    return true;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "//TODO\n  return l.every(function(a){\n    return a < t;\n  });\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "if (l.length === 0){\n        return true;\n    }\n    if (l[0] > t){\n        return false;\n    }\n    return below_threshold(l.slice(1), t);\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "let result = true;\n    for(let i=0; i<l.length; i++){\n        if(l[i] > t){\n            result = false;\n        }\n    }\n    return result;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "//Check each item in list to see if less than t\n  for(i = 0; i < l.length; i++){\n    if(l[i] > t){\n      return false;\n    }\n  }\n  return true;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "var i = 0;\n    while (i < l.length) {\n        if (l[i] >= t) {\n            return false;\n        }\n        i = i + 1;\n    }\n    return true;\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "return _.every(l, function(n){\n        return n < t;\n    });\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "for(var i = 0; i < l.length; i++){\n        if(l[i] > t){\n            return false;\n        }\n    }\n    return true;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "for(var x = 0; x < l.length; x++){\n        if(l[x] >= t){\n            return false;\n        }\n    }\n    return true;\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "return all(curry(lt)(t), l);\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "for(var i=0; i<l.length; i++){\n        if(l[i]>t){\n            return false;\n        }\n    }\n    return true;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "return l.every(function(v){\n\t\treturn v < t;\n\t});\n}",
        "grade-19": {
            "execution": 1
        }
    },
    {
        "intent": "//Write a function that takes a string and returns True if the string\n// length is a prime number or False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba') == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\nfunction prime_length(string){\n",
        "snippet": [
            "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n"
        ],
        "simplified": "Write a function that takes a string and returns True if the string length is a prime number or False otherwise",
        "task_id": "82",
        "3": "var len = string.length;\n  var prime = true;\n  for(var i = 2; i < len; i++){\n    if(len % i == 0){\n      prime = false;\n    }\n  }\n  return prime;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "var length = string.length;\n    if(length == 0 || length == 1){\n        return false;\n    }\n    for(var i = 2; i < length; i++){\n        if(length % i == 0){\n            return false;\n        }\n    }\n    return true;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "}",
        "grade-8": {
            "execution": 0
        },
        "7": "var output = true;\n  for(var i = 2; i < string.length; i++){\n    if(string.length % i === 0){\n      output = false;\n    }\n  }\n  return output;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "if(is_prime(string.length)){\n    return true;\n  }\n  return false;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "if(string.length % 2 === 0){\n        return false;\n    }\n    else{\n        return true;\n    }\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "let string_length = string.length;\n  if (is_prime(string_length)){\n    return true;\n  }\n  else{\n    return false;\n  }\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "if(is_prime(string.length)){\n    return true;\n  }\n  return false;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "var n = string.length;\n    //console.log(\"The length of the string is \" + n);\n    var i = 0;\n    var is_prime = true;\n    while(i < n){\n        i++;\n        if(n % i == 0 && i != 1 && i != n){\n            is_prime = false;\n        }\n    }\n    //console.log(is_prime);\n    return is_prime;\n}\nprime_length('Hello');\nprime_length('abcdcba');\nprime_length('kittens');\nprime_length('orange');",
        "grade-10": {
            "execution": 0
        },
        "17": "var result = false;\n    var array = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97];\n    if(array.includes(string.length)){\n        result = true;\n    }\n    return result;\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "if(string.length == 2 || string.length == 3){\n        return true;\n    }\n    if(string.length % 2 == 0 || string.length % 3 == 0){\n        return false;\n    }\n    return true;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "for(var i = 2; i < string.length; i++){\n        if(string.length % i === 0){\n            return false;\n        }\n    }\n    return true;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "return isPrime(string.length);\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "var length = string.length;\n  var count = 0;\n  for(var i = length; i > 0; i--){\n    if(length % i == 0){\n      count += 1;\n    }\n  }\n  if(count == 2){\n    return true;\n  }\n  else{\n    return false;\n  }\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "if(string.length < 2){\n\t\treturn false;\n\t}\n\tfor(var i = 2; i < string.length; i++){\n\t\tif(string.length % i == 0){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "var str = string.length;\n    var prime = true;\n    for(var i = 2; i<str; i++){\n        if(str%i==0){\n            prime = false;\n        }\n    }\n    if(prime == true){\n        return true;\n    }\n    else{\n        return false;\n    }\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "return false;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "var count = 0;\n  for(var i = 1; i <= string.length; i++){\n    if(string.length % i == 0){\n      count++;\n    }\n  }\n  if(count == 2){\n    return true;\n  }\n  else{\n    return false;\n  }\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "let isPrime = true;\n    let stringLength = string.length;\n    for(i = 2; i <= stringLength/2; i++){\n        if(stringLength % i == 0){\n            isPrime = false;\n            break;\n        }\n    }\n    return isPrime;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "//get length of string\n    var length = string.length;\n    //check to see if it is a prime number\n    if(length == 2 || length == 3 || length == 5 || length == 7){\n        return true;\n    }\n    return false;\n}",
        "grade-19": {
            "execution": 1
        }
    },
    {
        "intent": "//Check if in given list of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// True\nfunction has_close_elements(numbers, threshold){\n",
        "snippet": [
            "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n"
        ],
        "simplified": "Check if in given list of numbers, are any two numbers closer to each other than given threshold.",
        "task_id": "0",
        "3": "if(numbers.length <= 1){\n\t\treturn false;\n\t}\n\n\tvar numbersSorted = numbers.sort();\n\tvar currentNumber = numbersSorted[0];\n\tvar closestDifference = threshold + 1;\n\n\tfor(var i = 1; i < numbersSorted.length; i++){\n\t\tvar currentDifference = Math.abs(currentNumber - numbersSorted[i]);\n\t\tif(currentDifference < closestDifference){\n\t\t\tclosestDifference = currentDifference;\n\t\t}\n\t\tcurrentNumber = numbersSorted[i];\n\t}\n\n\treturn closestDifference < threshold;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "//let numbers = [1.0, 2.0, 3.0];\n    //let threshold = 0.5;\n    let bool = false;\n    for(let i = 0; i < numbers.length; i++){\n        for(let j = 0; j < numbers.length; j++){\n            if(i === j){\n                continue;\n            }\n            if(Math.abs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return bool;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "for(var i = 0; i < numbers.length; i++){\n    for(var j = i+1; j < numbers.length; j++){\n      if(Math.abs(numbers[i] - numbers[j]) < threshold){\n        return true;\n      }\n    }\n  }\n  return false;\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "for(var i = 0; i < numbers.length; i++){\n        for(var j = 0; j < numbers.length; j++){\n            if(i !== j){\n                var diff = numbers[i] - numbers[j];\n                if(diff < 0){\n                    diff = -diff;\n                }\n                if(diff < threshold){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "if(numbers.length <= 1){\n    return false;\n  }\n  numbers.sort();\n  var dist = numbers[1] - numbers[0];\n  if(dist <= threshold){\n    return true;\n  }\n  for(var i = 2; i < numbers.length; i++){\n    dist = numbers[i] - numbers[i-1];\n    if(dist <= threshold){\n      return true;\n    }\n  }\n  return false;\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "for(var i = 0; i < numbers.length; i++){\n        for(var j = i + 1; j < numbers.length; j++){\n            if(Math.abs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "let result = false;\n    for(let i = 0; i < numbers.length; i++){\n        for(let j = 0; j < numbers.length; j++){\n            if(i !== j){\n                let diff = Math.abs(numbers[i] - numbers[j]);\n                if(diff < threshold){\n                    result = true;\n                }\n            }\n        }\n    }\n    return result;\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "let hasClose = false;\n    for(let i = 0; i < numbers.length; i++){\n        for(let j = 0; j < numbers.length; j++){\n            if(numbers[i] - numbers[j] == threshold){\n                hasClose = true;\n            }\n        }\n    }\n    return hasClose;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "for(var i = 0; i < numbers.length; i++){\n    for(var j = 0; j < numbers.length; j++){\n      if(i != j){\n        var diff = numbers[i] - numbers[j];\n        diff = diff > 0 ? diff : -diff;\n        if(diff < threshold){\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "let result = false;\n    numbers.sort(function(a, b){return a-b});\n\n    for(let i = 0; i < numbers.length - 1; i++){\n        if(numbers[i+1] - numbers[i] < threshold){\n            result = true;\n            break;\n        }\n    }\n    return result;\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "for(var i = 0; i < numbers.length; i++){\n        for(var j = 0; j < numbers.length; j++){\n            if(numbers[i] != numbers[j]){\n                if(Math.abs(numbers[i] - numbers[j]) < threshold){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "var closestElement\n    for(var i = 0; i < numbers.length; i++){\n        var difference = numbers[i+1] - numbers[i]\n        if(difference < threshold){\n            closestElement = numbers[i+1]\n        }\n    }\n    return closestElement\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "for(var i = 0; i < numbers.length; i++){\n    for(var j = i+1; j < numbers.length; j++){\n      if(Math.abs(numbers[i] - numbers[j]) < threshold){\n        return true;\n      }\n    }\n  }\n  return false;\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "// write your answer between //<...> and //<...>\n    //<...>\n    return false;\n    //<...>\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "for(var i = 0; i < numbers.length; i++){\n    for(var j = i + 1; j < numbers.length; j++){\n      if(Math.abs(numbers[i] - numbers[j]) < threshold){\n        return true;\n      }\n    }\n  }\n  return false;\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "//check if empty list\n  if(numbers.length === 0){\n    return false;\n  }\n  //Check if the distance between a given element and the next one is less than threshold.\n  //If so, return true;\n  for(var i = 0; i < numbers.length-1; i++){\n    if(Math.abs(numbers[i] - numbers[i+1]) < threshold){\n      return true;\n    }\n  }\n  //otherwise return false\n  return false;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "var len = numbers.length\n    for(var i = 0; i < len; i++){\n        for(var j = i+1; j < len; j++){\n            if(Math.abs(numbers[i] - numbers[j]) < threshold){\n                return true\n            }\n        }\n    }\n    return false\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "let result = false;\n    for(let i = 0; i < numbers.length; i++){\n        for(let j = i + 1; j < numbers.length; j++){\n            if(Math.abs(numbers[i] - numbers[j]) < threshold){\n                result = true;\n            }\n        }\n    }\n    return result;\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "let already_found = false;\n  for(let i = 0; i < numbers.length; i++){\n    for(let j = i + 1; j < numbers.length; j++){\n      if(Math.abs(numbers[i] - numbers[j]) < threshold){\n        already_found = true;\n      }\n    }\n  }\n  return already_found;\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "var i;\n    for(i = 0; i < numbers.length; i++){\n        for(j = i+1; j < numbers.length; j++){\n            if(Math.abs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}",
        "grade-19": {
            "execution": 1
        }
    },
    {
        "intent": "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a tuple containing the result string and True/False for the check.\n// Example\n// For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\nfunction reverse_delete(s, c){\n",
        "snippet": [
            "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n"
        ],
        "simplified": "Task We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a tuple containing the result string and True/False for the check.",
        "task_id": "112",
        "3": "let str = '';\n  s.split('').map(function(e){\n    if (c.indexOf(e) == -1) str += e;\n  });\n  let r = str.split('').reverse().join('');\n  let b = str.localeCompare(r);\n  return (b == 0) ? [str, true] : [str, false];\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "var newStr = \"\";\n  for(let i = 0; i < s.length; i++){\n    if(c.indexOf(s[i]) === -1){\n      newStr += s[i];\n    }\n  }\n  var reversed = newStr.split(\"\").reverse().join(\"\");\n  return [newStr, newStr === reversed];\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "const arr = s.split('');\n    c.split('').forEach(i => {\n      if(arr.includes(i)){\n        arr.splice(arr.indexOf(i), 1);\n      }\n    });\n    let ans = arr.join('');\n    let check = true;\n    for(let i = 0; i < ans.length / 2; i++){\n      if(ans[i] !== ans[ans.length - 1 - i]){\n        check = false;\n      }\n    }\n    return [ans, check];\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "let found = false;\n  for(let i=0; i<s.length; i++){\n    for(let j=0; j<c.length; j++){\n      if(s[i] === c[j]){\n        found = true;\n        s = s.slice(0,i) + s.slice(i+1,s.length);\n        i = -1;\n        break;\n      }\n    }\n  }\n  return [s, found && s === s.split('').reverse().join('')];\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "let str = s.split('');\n    let remover = c.split('');\n    let result = [];\n    for(let el of str){\n        if(!remover.includes(el)){\n            result.push(el);\n        }\n    }\n    return [result.join(''), result.join('') === result.reverse().join('')];\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "let output = '';\n    for(let ch of s){\n        if(!c.includes(ch)) output += ch;\n    }\n    let outputReverse = output.split('').reverse().join('');\n    return [output, output === outputReverse];\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "s = s.split('').filter(i => !c.includes(i)).join('');\n    return [s, s === s.split('').reverse().join('')];\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "let ss = s.split('');\n    let cs = c.split('');\n    let res = [];\n    for(let i=0; i<ss.length; i++){\n        if(cs.indexOf(ss[i])===-1){\n            res.push(ss[i]);\n        }\n    }\n    if(res.join('')===res.reverse().join('')){\n        return [res.join(''), true];\n    }else{\n        return [res.join(''), false];\n    }\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "let ss = s.split('').filter(item => c.indexOf(item) < 0).join('');\n    return [ss, ss.split('').reverse().join('') === ss];\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "let res = '';\n  s.split('').map( x => {\n    if(c.indexOf(x) === -1) res += x;\n  });\n  let rev = res.split('').reverse().join('');\n  return [res, res === rev];\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "let result = \"\";\n    for(let i = 0; i < s.length; i++){\n        if(c.indexOf(s[i]) < 0){\n            result += s[i];\n        }\n    }\n    return [result, isPalindrome(result)];\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "for(let i = 0; i < c.length; i++){\n        s = s.replace(new RegExp(c[i], 'g'), '');\n    }\n    return [s, s.split('').reverse().join('') === s];\n}\nreverse_delete(\"abcde\", \"ae\");\nreverse_delete(\"abcdef\", \"b\");\nreverse_delete(\"abcdedcba\", \"ab\");",
        "grade-6": {
            "execution": 1
        },
        "18": "let result = '';\n    for(let i = 0; i < s.length; i++){\n        if(c.indexOf(s[i]) < 0){\n            result += s[i];\n        }\n    }\n    console.log(result);\n    return [result, (result === result.split('').reverse().join(''))];\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "let result = s;\n    for(let i = 0; i < s.length; i++){\n        for(let j = 0; j < c.length; j++){\n            if(s[i] === c[j]){\n                result = result.replace(s[i], '');\n            }\n        }\n    }\n    let reverseResult = result.split('').reverse().join('');\n    return [result, result === reverseResult];\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "let i = s.length - 1;\n    for(let i = 0; i < s.length; i++){\n        for(let j = 0; j < c.length; j++){\n            if(s[i] === c[j]){\n                let temp = s.split('');\n                temp.splice(i, 1);\n                s = temp.join('');\n                i--;\n                break;\n            }\n        }\n    }\n    return [s, s === s.split('').reverse().join('')];\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "c.split('').forEach(ch=>s=s.replace(ch,''))\n    return (s,s==s.split('').reverse().join(''))\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "let new_str = \"\";\n    let i = 0;\n    while(i < s.length){\n        if(c.indexOf(s[i]) === -1){\n            new_str += s[i];\n        }\n        i++;\n    }\n    let reverse_str = new_str.split(\"\").reverse().join(\"\");\n    if(reverse_str === new_str){\n        return [new_str, true];\n    }\n    return [new_str, false];\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "//You can do it! ;)\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "c = [...new Set(c)];\n    s = s.split('').filter(a => !c.includes(a)).join('');\n    return [s, s === s.split('').reverse().join('')];\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "// Write your code here\n    for(let i = 0; i < c.length; i++){\n        s = s.replace(new RegExp(c[i], 'g'), '');\n    }\n    let s_back = s.split('').reverse().join('');\n    return [s, s === s_back];\n}",
        "grade-19": {
            "execution": 1
        }
    },
    {
        "intent": "//Create a function that takes a string as input which contains only square brackets.\n// The function should return True if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// is_nested('[[]]') \u279e True\n// is_nested('[]]]]]]][[[[[]') \u279e False\n// is_nested('[][]') \u279e False\n// is_nested('[]') \u279e False\n// is_nested('[[][]]') \u279e True\n// is_nested('[[]][[') \u279e True\nfunction is_nested(string){\n",
        "snippet": [
            "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n"
        ],
        "simplified": "Create a function that takes a string as input which contains only square brackets. The function should return True if and only if there is a valid subsequence of brackets where at least one bracket in the subsequence is nested.",
        "task_id": "132",
        "3": "let leftBrackets = 0;\n    let rightBrackets = 0;\n    let hasNested = false;\n    let hasError = false;\n    for(let i = 0; i < string.length; i++){\n        let currentBracket = string[i];\n        if(currentBracket === '['){\n            leftBrackets++;\n        }\n        if(currentBracket === ']'){\n            rightBrackets++;\n        }\n        if(leftBrackets < rightBrackets){\n            hasError = true;\n        }\n        if(leftBrackets > rightBrackets){\n            hasNested = true;\n        }\n    }\n    return hasNested && !hasError;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "for(let i = 0; i < string.length; i++){\n        if(string[i] == ']' && string[i-1] == '['){\n            return true;\n        }\n    }\n    return false;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "let counter = 0;\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === \"[\"){\n            counter++;\n        }\n        if(string[i] === \"]\"){\n            counter--;\n        }\n        if(counter === 0){\n            return true;\n        }\n    }\n    return false;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "var count = 0;\n    var arr = string.split('');\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] === '['){\n            count++;\n        }\n        if(arr[i] === ']'){\n            count--;\n        }\n        if(count < 0){\n            return false;\n        }\n    }\n    return count === 0;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "var result = 0;\n\tif(string.length%2 === 0){\n\t\tvar left = string.length/2;\n\t\tvar right = string.length/2;\n\t\tfor(var i = 0; i < string.length; i++){\n\t\t\tif(string[i] == '['){\n\t\t\t\tleft--;\n\t\t\t}\n\t\t\tif(string[i] == ']'){\n\t\t\t\tright--;\n\t\t\t}\n\t\t\tif(right < 0 || left < 0){\n\t\t\t\tresult = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tresult = 1;\n\t\t\t}\n\t\t}\n\t}\n\tif(result == 1){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\t}\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "let count = 0;\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === '['){\n            count++;\n        }\n        if(string[i] === ']'){\n            count--;\n        }\n        if(count < 0){\n            return false;\n        }\n    }\n    return count === 0;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "let openBracket=['[','{','('];\n    let closingBracket=[')','}',']'];\n    let openingStack=[];\n    let checkingResult=0;\n    for(let i=0;i<string.length;i++){\n        if(openBracket.includes(string[i])){\n            openingStack.push(string[i]);\n        }\n        else if(closingBracket.includes(string[i])){\n            if(openBracket.indexOf(openingStack[openingStack.length-1])===closingBracket.indexOf(string[i])){\n                openingStack.pop();\n            }\n            else{\n                checkingResult=1;\n                break;\n            }\n        }\n    }\n    if(checkingResult==1 || openingStack.length!=0){\n        return false;\n    }\n    else{\n        return true;\n    }\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "let i = 0\n    for(i = 0; i < string.length; i++){\n        if(string[i] === \"[\" && string[i+1] === \"]\"){\n            return true\n        }\n    }\n    return false\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "var count = 0;\n    for(var i = 0; i < string.length; i++){\n        if(string[i] === \"[\"){\n            count++;\n        }else if(string[i] === \"]\"){\n            count--;\n        }\n        if(count < 0){\n            return false;\n        }\n    }\n    return count === 0;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "let i = 0;\n    while(i<string.length){\n        if(string[i]===string[i+1]){\n            return true;\n        }\n        i++;\n    }\n    return false;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "let myString = string.split('');\n    let counter = 0;\n    for(let i = 0; i < myString.length; i++){\n        if(myString[i] === '['){\n            counter++\n        }else if(myString[i] === ']'){\n            counter--\n        }\n        if(counter < 0){\n            return false\n        }\n    }\n    return counter == 0;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "let stack = [];\n    for(let i=0; i<string.length; i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n        }\n        else{\n            if(stack.length === 0){\n                return false;\n            }\n            else{\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "let counter = 0;\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === '['){\n            counter++;\n        }\n        if(string[i] === ']'){\n            counter--;\n        }\n        if(counter < 0){\n            return false;\n        }\n    }\n    return counter === 0;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "if(string.indexOf('[][]') !== -1){\n        return false;\n    }else if(string.indexOf('[]') !== -1){\n        return false;\n    }else if(string.indexOf('[[][]]') !== -1){\n        return true;\n    }else if(string.indexOf('[[]][[') !== -1){\n        return true;\n    }else if(string.indexOf('[[]]') !== -1){\n        return true;\n    }else if(string.indexOf('[]]]]]]][[[[[]') !== -1){\n        return false;\n    }\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "let count = 0;\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === \"[\"){\n            count++;\n        }else if(string[i] === \"]\"){\n            count--;\n        }\n        if(count < 0){\n            return false;\n        }\n    }\n    return count > 0 ? false : true;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "if(string.length%2===0){\n    while(string.length>0){\n    if(string.includes('[[[[')){\n        return false\n    }\n    else if(string.includes(']]]]')){\n        return false\n    }\n    else if(string.includes('[[')){\n        string=string.replace('[[','')\n    }\n    else if(string.includes(']]')){\n        string=string.replace(']]','')\n    }\n    else if(string.includes('[]')){\n        string=string.replace('[]','')\n    }\n    else {\n        return false\n    }\n}\nreturn true\n}\nelse{\n    return false\n}\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "if(string.length == 0){\n        return false;\n    }\n    let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i] == '['){\n            stack.push(string[i]);\n        }else{\n            if(stack.length == 0){\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return true;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "if(!string){\n        return false;\n    }\n    let right = [];\n    let left = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === \"[\"){\n            left.push(string[i]);\n        }else{\n            right.push(string[i]);\n        }\n    }\n    if(left.length === right.length){\n        return true;\n    }else{\n        return false;\n    }\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "var pareCounter = 0;\n    var bracketCounter = 0;\n    var squareBracketCounter = 0;\n    for(var i = 0; i < string.length; i++){\n        if(string[i] == \"{\") pareCounter++;\n        if(string[i] == \"}\") pareCounter--;\n        if(string[i] == \"[\") bracketCounter++;\n        if(string[i] == \"]\") bracketCounter--;\n        if(string[i] == \"(\") squareBracketCounter++;\n        if(string[i] == \")\") squareBracketCounter--;\n        if(pareCounter < 0 || bracketCounter < 0 || squareBracketCounter < 0) return false;\n    }\n    if(pareCounter != 0 || bracketCounter != 0 || squareBracketCounter != 0) return false;\n    return true;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "let string2 = string.split('')\n    console.log(string2)\n    let l = 0;\n    let r = 0;\n    for(let i = 0; i < string2.length; i++){\n        if(string2[i] == '['){\n            l++\n        }\n        if(string2[i] == ']'){\n            r++\n        }\n    }\n    if(l == r){\n        return true\n    }else{\n        return false\n    }\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//This function takes a list l and returns a list l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n",
        "snippet": [
            "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n"
        ],
        "simplified": "This function takes a list l and returns a list l' such that l' is identical to l in the odd indicies, while its values at the even indicies are equal to the values of the even indicies of l, but sorted.",
        "task_id": "37",
        "3": "var new_list = [];\n  var i;\n  var len = l.length;\n  for(i = 0; i < len; i++){\n    if(i % 2 === 0){\n      new_list.push(l[i]);\n    }\n    else{\n      var temp = l.slice(i, i+2);\n      temp.sort();\n      new_list.push(temp[0]);\n      new_list.push(temp[1]);\n      i++;\n    }\n  }\n  return new_list;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "var even = [];\n    var odd = [];\n    var n = []\n    var j = 0;\n    for(var i = 0; i < l.length; i++) {\n        if(i % 2 == 0) {\n            odd.push(l[i]);\n        }\n        else {\n            even.push(l[i]);\n        }\n    }\n    even.sort();\n    for(var i = 0; i < odd.length; i++) {\n        n.push(odd[i]);\n        n.push(even[j]);\n        j++;\n    }\n    return n;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "var even_list = [];\n\tfor(var i = 0; i < l.length; i += 2){\n\t\teven_list.push(l[i]);\n\t}\n\teven_list.sort();\n\tfor(var i = 0; i < l.length; i += 2){\n\t\tl[i] = even_list[i/2];\n\t}\n\treturn l;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "var i = 0;\n    var l2 = [];\n    var l3 = [];\n    var l4 = [];\n    while (i < l.length){\n        if (i % 2 == 0){\n            l2.push(l[i]);\n        }\n        else{\n            l3.push(l[i]);\n        }\n        i += 1;\n    }\n    l3.sort();\n    var j = 0;\n    while (j < l2.length){\n        l4.push(l2[j]);\n        l4.push(l3[j]);\n        j += 1;\n    }\n    return l4;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "var list = []\n    for (var i = 0; i < l.length; i++) {\n        if (i % 2 === 0) {\n            list.push(l[i])\n        } else {\n            let a = l[i]\n            for (var j = i-1; j >= 0; j--) {\n                if (l[j] > a) {\n                    list[j+1] = list[j]\n                } else {\n                    list[j+1] = a\n                    break\n                }\n            }\n            if (list[0] > a) {\n                list[0] = a\n            }\n        }\n    }\n    return list\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "// return l.filter(function(v, i) {\n    //     return i % 2 == 0;\n    // }).sort().concat(l.filter(function(v, i) {\n    //     return i % 2 == 1;\n    // }));\n    return l.filter(function(v, i) { return i % 2 == 0; }).sort().map(function(v, i) { return [v, l[i * 2 + 1]]; }).flatten();\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "var new_list = [];\n\tfor(var i = 0; i < l.length; i++){\n\t\tnew_list.push(l[i]);\n\t}\n\tfor(var i = 0; i < l.length; i++){\n\t\tif(i % 2 == 0){\n\t\t\tnew_list[i] = l[i];\n\t\t}\n\t\telse{\n\t\t\tnew_list[i] = sort_even_helper(l[i], i);\n\t\t}\n\t}\n\treturn new_list;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "if(l.length == 0)\n\t\treturn l;\n\tvar evens = [];\n\tvar odds = [];\n\tvar sorted;\n\tfor(var i = 0; i < l.length; i++){\n\t\tif(i % 2 == 0)\n\t\t\todds.push(l[i]);\n\t\telse\n\t\t\tevens.push(l[i]);\n\t}\n\tsorted = evens.sort();\n\tfor(var i = 0; i < l.length; i++){\n\t\tif(i % 2 == 0)\n\t\t\tsorted.splice(i, 0, odds[i / 2]);\n\t}\n\treturn sorted;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "// base case\n    if (l.length <= 1) {\n        return l;\n    }\n    // recursive case\n    else {\n        var odd = [];\n        var even = [];\n        for (var i = 0; i < l.length; i++) {\n            if (i % 2 == 0) {\n                odd.push(l[i]);\n            }\n            else {\n                even.push(l[i]);\n            }\n        }\n        even = insertion_sort(even);\n        for (var i = 0; i < even.length; i++) {\n            odd.splice(2*i+1, 0, even[i]);\n        }\n        return odd;\n    }\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "var ans = []\n\tfor(var i = 0; i < l.length; i++){\n\t\tif(i % 2 == 0){\n\t\t\tans.push(l[i])\n\t\t}\n\t\telse{\n\t\t\tvar temp = l.slice(i)\n\t\t\ttemp.sort()\n\t\t\tans.push(temp[0])\n\t\t}\n\t}\n\treturn ans\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "var eves = l.filter(function(e, i){return i % 2 === 0;})\n    var odds = l.filter(function(e, i){return i % 2 !== 0;})\n    eves.sort()\n    var lp = [];\n    for(var i = 0; i < eves.length; i++){\n        lp.push(eves[i]);\n        lp.push(odds[i]);\n    }\n    return lp;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "return l.filter( function (e,i){ return i%2!=0 }).concat(\n             l.filter( function (e,i){ return i%2==0 }).sort( function (a,b){ return a-b; }));\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "if (l.length <= 2){\n        return l;\n    }\n    var newList = [];\n    var evenIndicies = [];\n    var oddIndicies = [];\n    for (var i = 0; i < l.length; i++){\n        if (i % 2 == 0){\n            oddIndicies.push(l[i]);\n        }\n        else{\n            evenIndicies.push(l[i]);\n        }\n    }\n    evenIndicies.sort();\n    for (var i = 0; i < l.length; i++){\n        if (i % 2 == 0){\n            newList.push(oddIndicies[0]);\n            oddIndicies.shift();\n        }\n        else{\n            newList.push(evenIndicies[0]);\n            evenIndicies.shift();\n        }\n    }\n    return newList;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "var evens = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 2 == 0){\n            evens.push(l[i]);\n        }\n    }\n    evens.sort();\n    var ans = []\n    for(var i = 0; i < l.length; i++){\n        if(i % 2 == 0){\n            ans.push(evens.shift());\n        }\n        else{\n            ans.push(l[i]);\n        }\n    }\n    return ans;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "var l2 = new Array();\n    for(var i = 0; i < l.length; i++){\n        if(i % 2 == 0){\n            l2.push(l[i]);\n        }\n        else{\n            var temp = l.slice(i, i+2);\n            temp.sort();\n            l2.push(temp[0]);\n            l2.push(temp[1]);\n            i = i + 1;\n        }\n    }\n    return l2;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "if (l.length == 0){\n        return [];\n    }\n    else{\n        var l_odd = l.filter(function(val, index){\n            return index % 2 == 0;\n        });\n        var l_even = l.filter(function(val, index){\n            return index % 2 == 1;\n        });\n        l_even.sort(function(a, b){\n            return a - b;\n        });\n        var result = [];\n        for (var i = 0; i < l_odd.length; i++){\n            result.push(l_odd[i]);\n            result.push(l_even[i]);\n        }\n        return result;\n    }\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "// You must not use any loops, and you must utilize recursion.\n    // If you cannot come up with a recursive solution, you will lose credit.\n    // You are free to create any auxiliary functions if needed.\n    var i=0;\n    var temp=0;\n    var counter=0;\n    var right=[];\n    if(length(l)==0)\n    {\n        return [];\n    }\n    else if(length(l)==1)\n    {\n        return l;\n    }\n    else\n    {\n        for(i=0;i<length(l);i++)\n        {\n            if(is_even(i)==true)\n            {\n                var dummy=l[i];\n                if(dummy<l[i+1])\n                {\n                    for(counter=i+1;counter<length(l);counter++)\n                    {\n                        if(dummy>l[counter])\n                        {\n                            temp=l[counter];\n                            l[counter]=dummy;\n                            l[i]=temp;\n                            dummy=l[i];\n                        }\n                    }\n                }\n            }\n        }\n        return l;\n    }\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "var res = [];\n  var index = 0;\n  for(var i = 0; i < l.length; i++){\n    res.push(l[i]);\n    index++;\n    if(index % 2 === 0){\n      res[i] = l[i];\n      res[i] = res[i].sort();\n    }\n  }\n  return res;\n}\nsort_even([1, 2, 3]);\nsort_even([5, 6, 3, 4]);",
        "grade-14": {
            "execution": 0
        },
        "5": "var res = [];\n  for(var i = 0; i < l.length; i++){\n    if(i % 2 === 0){\n      res.push(l[i]);\n    }\n    else{\n      res.push(l[i].sort());\n    }\n  }\n  return res;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "for(i = 0; i < l.length; i++){\n\t\tif(i % 2 == 0){\n\t\t\tl.splice(i, 0, l[i]);\n\t\t}\n\t}\n\tfor(i = 0; i < l.length; i++){\n\t\tif(i % 2 == 0){\n\t\t\tl.splice(i, 1);\n\t\t}\n\t}\n\tl.sort(function(a, b){return a-b});\n\treturn l;\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// any_int(5, 2, 7) \u279e True\n// any_int(3, 2, 2) \u279e False\n// any_int(3, -2, 1) \u279e True\n// any_int(3.6, -2.2, 2) \u279e False\nfunction any_int(x, y, z){\n",
        "snippet": [
            "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n"
        ],
        "simplified": "Create a function that takes 3 numbers. Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers. Returns false in any other cases.",
        "task_id": "92",
        "0": "let num = []\n    for(let i = 0; i < arguments.length; i++){\n        num.push(arguments[i])\n    }\n    let count = 0\n    for(let i = 0; i < num.length; i++){\n        if(num[i] % 1 === 0){\n            count++\n        }\n    }\n    if(count === 3){\n        let arr = [...num]\n        arr.sort((a, b) => a - b)\n        if(arr[0] + arr[1] === arr[2]){\n            return true\n        }\n        return false\n    }\n    return false\n}",
        "grade-0": {
            "execution": 0
        },
        "1": "return (x + y === z) || (x + z === y) || (y + z === x) && (x === Math.floor(x)) && (y === Math.floor(y)) && (z === Math.floor(z))\n}",
        "grade-1": {
            "execution": 0
        },
        "2": "return (x === (y + z) || y === (x + z) || z === (x + y)) && (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) ? true : false;\n}",
        "grade-2": {
            "execution": 0
        },
        "3": "if(x === y + z || y === x + z || z === x + y){\n        return true;\n    }\n    return false;\n}",
        "grade-3": {
            "execution": 0
        },
        "4": "if (x+y === z || x+z === y || y+z === x){\n    return true;\n  }\n  else {\n    return false;\n  }\n}",
        "grade-4": {
            "execution": 0
        },
        "5": "var a = x + y;\n    var b = x + z;\n    var c = y + z;\n    if ( x == a || y == b || z == c){\n        return true;\n    }\n    else{\n        return false;\n    }\n}",
        "grade-5": {
            "execution": 0
        },
        "6": "if((x + y == z) || (x + z == y) || (y + z == x)){\n        return true;\n    }\n    else{\n        return false;\n    }\n}",
        "grade-6": {
            "execution": 0
        },
        "7": "let sum = x + y + z;\n    if(x == sum / 2 || y == sum / 2 || z == sum / 2){\n        return true;\n    }\n    return false;\n}",
        "grade-7": {
            "execution": 0
        },
        "8": "if(x === y + z || y === x + z || z === x + y){\n        return true;\n    }else{\n        return false;\n    }\n}",
        "grade-8": {
            "execution": 0
        },
        "9": "if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0){\n        return true;\n    } else if (x % 1 === 0 && y % 1 === 0 && z % 1 !== 0){\n        return true;\n    } else if (x % 1 === 0 && y % 1 !== 0 && z % 1 === 0){\n        return true;\n    } else if (x % 1 !== 0 && y % 1 === 0 && z % 1 === 0){\n        return true;\n    } else {\n        return false;\n    }\n}",
        "grade-9": {
            "execution": 0
        },
        "10": "if(x%1==0 && y%1==0 && z%1==0){\n        if(x==y+z){\n            return true;\n        }\n        else if(y==x+z){\n            return true;\n        }\n        else if(z==x+y){\n            return true;\n        }\n        else{\n            return false;\n        }\n    }\n    else{\n        return false;\n    }\n}",
        "grade-10": {
            "execution": 0
        },
        "11": "if((x===y+z || y===x+z || z===x+y) && x%1===0 && y%1===0 && z%1===0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}",
        "grade-11": {
            "execution": 0
        },
        "12": "return Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z) ? x + y === z || x + z === y || y + z === x : false;\n}",
        "grade-12": {
            "execution": 0
        },
        "13": "return (x+y == z || x+z == y || y+z == x) && (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) ? true : false;\n}",
        "grade-13": {
            "execution": 0
        },
        "15": "return (x + y == z || x + z == y || y + z == x) && (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z))\n}",
        "grade-15": {
            "execution": 0
        },
        "16": "if(Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){\n        if(x === y + z || y === x + z || z === x + y){\n            return true;\n        }\n    }\n    return false;\n}",
        "grade-16": {
            "execution": 0
        },
        "17": "if(Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){\n    if(x === y + z){\n        return true;\n    }else if(y === x + z){\n        return true;\n    }else if(z === x + y){\n        return true;\n    }else{\n        return false;\n    }\n}else{\n    return false;\n}\n}",
        "grade-17": {
            "execution": 0
        },
        "18": "if(Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){\n        if(x===y+z || y===x+z || z===x+y){\n            return true;\n        }\n    }\n    return false;\n}",
        "grade-18": {
            "execution": 0
        },
        "19": "if(x % 1 == 0 && y % 1 == 0 && z % 1 == 0 && (x + y == z || x + z == y || y + z == x)) {\n        return true;\n    } else {\n        return false;\n    }\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n",
        "snippet": [
            "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n"
        ],
        "simplified": "In this Kata, you have to sort an array of non-negative integers according to number of ones in their binary representation in ascending order. For similar number of ones, sort based on decimal value. It must be implemented like this:",
        "task_id": "116",
        "3": "return arr.sort(function(a, b){\n      var binA = (a >>> 0).toString(2);\n      var binB = (b >>> 0).toString(2);\n      var numOfOnesA = binA.match(/1/g) || [];\n      var numOfOnesB = binB.match(/1/g) || [];\n      if(numOfOnesA.length < numOfOnesB.length){\n        return -1;\n      }else if(numOfOnesA.length > numOfOnesB.length){\n        return 1;\n      }else{\n        return a - b;\n      }\n  });\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "//binary_arr holds binary array, binary_sort_arr holds sorted binary array\n  //decimal_arr holds the decimal values in sorted binary order\n  var binary_arr = [], binary_sort_arr = [], decimal_arr = [], sorted_arr = [];\n  //go through every element in array\n  for(var i = 0; i < arr.length; i++){\n    //convert the number to binary and store into binary_arr\n    binary_arr.push(arr[i].toString(2));\n    //check for one's count in binary_arr[i] and push the count into binary_sort_arr\n    binary_sort_arr.push(binary_arr[i].match(/1/g).length);\n  }\n  //sort the binary_sort_arr\n  binary_sort_arr.sort(function(a, b){return a - b});\n  //fill decimal_arr with the sorted binary numbers\n  for(var i = 0; i < binary_sort_arr.length; i++){\n    for(var j = 0; j < binary_arr.length; j++){\n      if(binary_sort_arr[i] == binary_arr[j].match(/1/g).length && !decimal_arr.includes(binary_arr[j])){\n        decimal_arr.push(binary_arr[j]);\n      }\n    }\n  }\n  //convert the binary to decimal and store into sorted_arr\n  for(var i = 0; i < decimal_arr.length; i++){\n    sorted_arr.push(parseInt(decimal_arr[i], 2));\n  }\n  return sorted_arr;\n}\nsort_array([1, 2, 3, 4, 5]);\nsort_array([1, 0, 2, 3, 4]);\nsort_array([-2, -3, -4, -5, -6]);\nsort_array([1, 5, 2, 3, 4]);",
        "grade-0": {
            "execution": 0
        },
        "8": "let number = arr.map(num => {\n    return [num, num.toString(2).split('').reduce((acc, val) => {\n      return val === '1' ? acc + 1 : acc\n    }, 0)]\n  }).sort((a, b) => {\n    if (a[1] === b[1]) {\n      return a[0] - b[0]\n    } else {\n      return a[1] - b[1]\n    }\n  })\n  return number.map(num => num[0])\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "var maxOnes = 0;\n    var minOnes = 0;\n    var temp = [];\n    var tempArr = [];\n    var tempObj = {};\n    var count;\n    var maxInt;\n    var newArr = [];\n    var result = [];\n    if(arr.length > 1){\n        maxInt = Math.max.apply(null, arr);\n        count = (maxInt >>> 0).toString(2).split('').length;\n        for(var i = 0; i < arr.length; i++){\n            temp = (arr[i] >>> 0).toString(2).split('');\n            while(temp.length < count){\n                temp.unshift('0');\n            }\n            tempObj = {};\n            tempObj.num = arr[i];\n            tempObj.ones = temp.join('').split('1').length - 1;\n            if(tempObj.ones > maxOnes){\n                maxOnes = tempObj.ones;\n            }\n            if(tempObj.ones < minOnes){\n                minOnes = tempObj.ones;\n            }\n            tempArr.push(tempObj);\n        }\n        for(var j = minOnes; j <= maxOnes; j++){\n            tempArr.forEach(function(item){\n                if(item.ones === j){\n                    newArr.push(item.num);\n                }\n            });\n        }\n        result = newArr;\n    } else {\n        result = arr;\n    }\n    return result;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "return arr.sort(function(a, b){\n    if (a.toString(2).match(/1/g) === null && b.toString(2).match(/1/g) === null){\n      return a - b;\n    } else if (a.toString(2).match(/1/g) === null){\n      return -1;\n    } else if (b.toString(2).match(/1/g) === null){\n      return 1;\n    } else if (a.toString(2).match(/1/g).length === b.toString(2).match(/1/g).length){\n      return a - b;\n    } else {\n      return a.toString(2).match(/1/g).length - b.toString(2).match(/1/g).length;\n    }\n  });\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "let numOfOne = []\n    let num = []\n    for(let i = 0; i < arr.length; i++){\n        let binary = arr[i].toString(2)\n        let count = 0\n        for(let j = 0; j < binary.length; j++){\n            if(binary[j] === '1'){\n                count++\n            }\n        }\n        numOfOne.push(count)\n        num.push(arr[i])\n    }\n    for(let i = 0; i < numOfOne.length; i++){\n        for(let j = i + 1; j < numOfOne.length; j++){\n            if(numOfOne[i] > numOfOne[j]){\n                let temp = numOfOne[i]\n                numOfOne[i] = numOfOne[j]\n                numOfOne[j] = temp\n                let tempNum = num[i]\n                num[i] = num[j]\n                num[j] = tempNum\n            }\n        }\n    }\n    return num\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "//storing number of 1s in binary representation of each number in array\n    var onesArray = [];\n    //storing the decimal values\n    var decArray = [];\n    //storing the values in right order\n    var result = [];\n    //storing the binary representation of each number\n    var binary = [];\n    //storing the binary representation of each number\n    var binRep = [];\n    //storing the unique value for the numbers\n    var unique = [];\n    //storing the number of time each number occurs in the array\n    var occurrences = [];\n    //storing the index from which each number occurs in the array\n    var index = [];\n    for(var i = 0; i < arr.length; i++){\n        //storing the binary representation of each number\n        binary.push(arr[i].toString(2));\n        //finding the number of 1s in the binary representation of each number\n        onesArray.push(binary[i].replace(/0/g, '').length);\n        //storing the decimal value\n        decArray.push(arr[i]);\n    }\n    //Finding the unique values\n    for(var j = 0; j < arr.length; j++){\n        if(unique.indexOf(onesArray[j]) === -1){\n            unique.push(onesArray[j]);\n        }\n    }\n    //sorting the unique values\n    unique.sort();\n    //finding the number of time each number occurs in the array\n    for(var k = 0; k < unique.length; k++){\n        occurrences.push(onesArray.filter(function(elem){\n            return elem === unique[k];\n        }).length);\n    }\n    //finding the index from which each number occurs in the array\n    for(var l = 0; l < unique.length; l++){\n        for(var m = 0; m < arr.length; m++){\n            if(onesArray[m] === unique[l]){\n                index.push(m);\n                break;\n            }\n        }\n    }\n    //sorting the numbers according to the given conditions\n    for(var n = 0; n < occurrences.length; n++){",
        "grade-11": {
            "execution": 0
        },
        "1": "let answer = [];\n  let ones = [];\n  let zeros = [];\n  let len = arr.length;\n  for(let i = 0; i < len; i++){\n    if(arr[i] <= 0){\n      zeros.push(arr[i]);\n    }else{\n      ones.push(arr[i]);\n    }\n  }\n  //sorting the ones array\n  let onesLen = ones.length;\n  for(let i = 0; i < onesLen; i++){\n    let item = ones[i];\n    let bin = item.toString(2);\n    let oneCnt = bin.split('').reduce((a, b) => +a + +b);\n    ones[i] = {'bin': bin, 'num': item, 'oneCnt': oneCnt};\n  }\n  ones.sort((a, b) => {\n    if(a.oneCnt === b.oneCnt){\n      return a.num - b.num;\n    }else{\n      return a.oneCnt - b.oneCnt;\n    }\n  });\n  let len2 = ones.length;\n  for(let i = 0; i < len2; i++){\n    answer.push(ones[i].num);\n  }\n  answer = answer.concat(zeros);\n  return answer;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "let map = {};\n    arr.forEach(v => {\n        let t = 0;\n        v.toString(2).split('').forEach(c => {\n            if (c === '1') t++;\n        });\n        if (!map[t]) map[t] = [];\n        map[t].push(v);\n    });\n    let keys = Object.keys(map);\n    return keys.sort((a, b) => a - b).reduce((a, b) => a.concat(map[b].sort((x, y) => x - y)), []);\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "return arr.sort((a, b) => {\n        let aOne = countOne(a);\n        let bOne = countOne(b);\n        if (aOne !== bOne) {\n            return aOne - bOne;\n        } else {\n            return a - b;\n        }\n    });\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "//code here\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(getOneCount(arr[i]) > getOneCount(arr[j])){\n                var temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n            else if(getOneCount(arr[i]) == getOneCount(arr[j])){\n                if(arr[i] > arr[j]){\n                    var temp = arr[i];\n                    arr[i] = arr[j];\n                    arr[j] = temp;\n                }\n            }\n        }\n    }\n    return arr;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "let binArr = arr.map(num => [num, num.toString(2)]);\n  let onesArr = binArr.map(num => num[1].split(\"\").filter(el => el === \"1\").length);\n  let sortedOnesArr = onesArr.slice().sort((a, b) => a - b);\n  let onesIndex = [];\n  for (let i = 0; i < sortedOnesArr.length; i++) {\n    onesIndex.push(onesArr.indexOf(sortedOnesArr[i]));\n  }\n  let sortedArr = [];\n  for (let i = 0; i < onesIndex.length; i++) {\n    sortedArr.push(binArr[onesIndex[i]][0]);\n  }\n  return sortedArr;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "let sorted = [...arr].sort((a, b) => a - b);\n  let arr2 = [...arr].sort((a, b) => (a.toString(2).match(/1/g) || []).length - (b.toString(2).match(/1/g) || []).length);\n  return arr2.map(i => sorted.includes(i) ? i : i);\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "var tempArr = [];\n  var finalArr = [];\n  arr.forEach(function(num){\n    var bin = parseInt(num).toString(2);\n    var onesCount = bin.split(1).length - 1;\n    tempArr.push([num, onesCount]);\n  });\n  tempArr.sort(function(a, b){\n    if(a[1] === b[1]){\n      return a[0] - b[0];\n    }\n    return a[1] - b[1];\n  });\n  tempArr.forEach(function(el){\n    finalArr.push(el[0]);\n  });\n  return finalArr;\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "var sorted_array = arr.sort(function(a, b){\n        if (countOnes(a) === countOnes(b)) {\n            return a - b;\n        }\n        return countOnes(a) - countOnes(b);\n    });\n    return sorted_array;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "return arr.sort(function(a, b){\n    if(getOnes(a) === getOnes(b)) {\n      return a - b;\n    }\n    return getOnes(a) - getOnes(b);\n  });\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "let binarr = arr.map(x => x.toString(2));\n  console.log(binarr);\n  let countarr = [];\n  for (let i = 0; i < binarr.length; i++) {\n    countarr.push(binarr[i].split('').filter(x => x === '1').length);\n  }\n  let newarr = [];\n  let count = 0;\n  while (count < arr.length) {\n    let temp = [];\n    let tempcount = countarr[count];\n    let j = count;\n    while (j < arr.length) {\n      if (countarr[j] === tempcount) {\n        temp.push(arr[j]);\n        countarr[j] = -1;\n      }\n      j++;\n    }\n    count += temp.length;\n    temp.sort((a, b) => a - b);\n    newarr = newarr.concat(temp);\n  }\n  return newarr;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "// sort array to descending order first.\n    arr.sort(function(a, b){\n        return b - a;\n    });\n    // create a new array to store the index value of arr(binary arr)\n    var binaryArray = [];\n    // create a new array to store values of arr\n    var valueArray = [];\n    // convert each element of arr to binary and store into binaryArray\n    for(var i = 0; i < arr.length; i++){\n        binaryArray.push(arr[i].toString(2));\n    }\n    //push values of arr into valueArray\n    for(var i = 0; i < arr.length; i++){\n        valueArray.push(arr[i]);\n    }\n    // use bubble sort to sort binaryArray in ascending order\n    for(var i = 0; i < binaryArray.length; i++){\n        for(var j = 0; j < binaryArray.length; j++){\n            if(binaryArray[j].match(/1/g).length > binaryArray[j+1].match(/1/g).length){\n                var tmp = binaryArray[j];\n                binaryArray[j] = binaryArray[j+1];\n                binaryArray[j+1] = tmp;\n                var tmp = valueArray[j];\n                valueArray[j] = valueArray[j+1];\n                valueArray[j+1] = tmp;\n            }else if(binaryArray[j].match(/1/g).length === binaryArray[j+1].match(/1/g).length){\n                if(valueArray[j] > valueArray[j+1]){\n                    var tmp = binaryArray[j];\n                    binaryArray[j] = binaryArray[j+1];\n                    binaryArray[j+1] = tmp;\n                    var tmp = valueArray[j];\n                    valueArray[j] = valueArray[j+1];\n                    valueArray[j+1] = tmp;\n                }\n            }\n        }\n    }\n    return valueArray;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "return arr.sort(function(a, b){\n    if (numberOfOnes(a) < numberOfOnes(b)){\n      return -1;\n    } else if (numberOfOnes(a) > numberOfOnes(b)){\n      return 1;\n    } else {\n      return a - b;\n    }\n  });\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "var newArr = arr.map(function(val) {\n        return {\n            val: val,\n            binary: val.toString(2).split('').filter(function(digit) {\n                return digit === '1';\n            }).length\n        };\n    });\n    return newArr.sort(function(a, b) {\n        if (a.binary === b.binary) {\n            return a.val - b.val;\n        }\n        return a.binary - b.binary;\n    }).map(function(val) {\n        return val.val;\n    });\n}",
        "grade-19": {
            "execution": 1
        }
    },
    {
        "intent": "//Return only positive numbers in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n",
        "snippet": [
            "  return l.filter(e => e > 0);\n}\n\n"
        ],
        "simplified": "Return only positive numbers in the list.",
        "task_id": "30",
        "0": "//Your code here\n    var ans = [];\n    for(var i = 0; i < l.length; i++){\n        if(l[i] > 0){\n            ans.push(l[i]);\n        }\n    }\n    return ans;\n}",
        "grade-0": {
            "execution": 1
        },
        "1": "return l.filter(function(v){return v > 0;});\n}",
        "grade-1": {
            "execution": 1
        },
        "2": "return l.filter(function(val){\n        return val >= 0;\n    });\n}",
        "grade-2": {
            "execution": 0
        },
        "3": "let new_l = [];\n    for (i=0; i<l.length; i++){\n        if (l[i] > 0){\n            new_l.push(l[i]);\n        }\n    }\n    return new_l;\n}",
        "grade-3": {
            "execution": 1
        },
        "4": "return l.filter(x => x > 0);\n}",
        "grade-4": {
            "execution": 1
        },
        "5": "return l.filter(function(number){\n        return number > 0;\n    });\n}",
        "grade-5": {
            "execution": 1
        },
        "7": "return l.filter(function(num){\n    return num > 0;\n  });\n}",
        "grade-7": {
            "execution": 1
        },
        "8": "return l.filter(function(n){\n    return n > 0;\n  });\n}",
        "grade-8": {
            "execution": 1
        },
        "9": "return l.filter(function(value){\n        return value >= 0;\n    });\n}",
        "grade-9": {
            "execution": 0
        },
        "10": "// Your code here\n  return l.filter(num => num > 0);\n}",
        "grade-10": {
            "execution": 1
        },
        "11": "var positives = [];\n    for (var i=0; i<l.length; i++){\n        if (l[i] > 0){\n            positives.push(l[i]);\n        }\n    }\n    return positives;\n}",
        "grade-11": {
            "execution": 1
        },
        "12": "return l.filter(function(val){\n        return val > 0;\n    });\n}",
        "grade-12": {
            "execution": 1
        },
        "13": "var p=[];\n    for(i=0;i<l.length;i++){\n        if(l[i]>0){\n            p.push(l[i]);\n        }\n    }\n    return p;\n}",
        "grade-13": {
            "execution": 1
        },
        "14": "let positive = []\n  for (let i = 0; i < l.length; i++){\n    if (l[i] >= 0){\n      positive.push(l[i])\n    }\n  }\n  return positive\n}",
        "grade-14": {
            "execution": 0
        },
        "15": "return l.filter(v => v > 0);\n}",
        "grade-15": {
            "execution": 1
        },
        "16": "return l.filter(i => i > 0);\n}",
        "grade-16": {
            "execution": 1
        },
        "17": "//===YOUR CODE HERE===\n  var result = [];\n  for (var i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n}",
        "grade-17": {
            "execution": 1
        },
        "19": "return l.filter(num => num > 0);\n}",
        "grade-19": {
            "execution": 1
        }
    },
    {
        "intent": "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi') returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle(s){\n",
        "snippet": [
            "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n"
        ],
        "simplified": "Write a function that takes a string and returns an ordered version of it. Ordered version of string, is a string where all words (separated by space) are replaced by a new word where all the characters arranged in ascending order based on ascii value. Note: You should keep the order of words and blank spaces in the sentence.",
        "task_id": "86",
        "3": "let strSplit = s.split(' ');\n  let arrSplit = [];\n  let count = 1;\n  let endWord = '';\n  for(let i = 0; i < strSplit.length; i++){\n    let currentWord = strSplit[i];\n    for(let j = 0; j < currentWord.length; j++){\n      let arr = currentWord.split('');\n      arrSplit.push(arr);\n    }\n  }\n  let antiShuffle = arrSplit.map(item => {\n    let asciiSort = item.sort((a, b) => {\n      return a.charCodeAt(0) - b.charCodeAt(0);\n    });\n    let newWord = asciiSort.join('');\n    if(count <= strSplit.length){\n      endWord += newWord + ' ';\n      count++;\n    }\n    return newWord;\n  });\n  return endWord;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "var wordArr = s.split(\" \");\n    for(var i = 0; i < wordArr.length; i++){\n        wordArr[i] = wordArr[i].split(\"\").sort().join(\"\");\n    }\n    return wordArr.join(\" \");\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "var arr = s.split(\" \");\n    var arr2 = [];\n    for(var i = 0; i < arr.length; i++){\n        var min_val = 255;\n        var word = \"\";\n        for(var j = 0; j < arr[i].length; j++){\n            if(arr[i].charCodeAt(j) < min_val){\n                min_val = arr[i].charCodeAt(j);\n                word = arr[i].charAt(j);\n            }\n        }\n        arr2.push(word);\n    }\n    return arr2.join(\"\");\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "// your code here\n    let words = s.split(' ');\n    let result = \"\";\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n        let arr = word.split('');\n        arr.sort(function(a, b) {\n            return a.charCodeAt(0) - b.charCodeAt(0);\n        });\n        result += arr.join('') + ' ';\n    }\n    return result.trim();\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "return s.split(' ').map(function(word){\n\t\treturn word.split('').sort().join('');\n\t}).join(' ');\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "let finalWord = '';\n    let wordArray = s.split(' ');\n    for (let i = 0; i < wordArray.length; i++) {\n        let charArray = wordArray[i].split('');\n        charArray.sort(function(a, b) {\n            return a.charCodeAt(0) - b.charCodeAt(0);\n        });\n        let orderedWord = charArray.join('');\n        finalWord += (orderedWord + ' ');\n    }\n    return finalWord.trim();\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "let words = s.split(' ');\n    for(let i = 0; i < words.length; i++){\n        words[i] = words[i].split('').sort().join('');\n    }\n    return words.join(' ');\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "return s.split(' ').map(w => w.split('').sort().join('')).join(' ');\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "let result = \"\";\n    let word = \"\";\n    let char = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === \" \"){\n            result += word + \" \";\n            word = \"\";\n        }\n        else {\n            char = s[i];\n            if (word.length > 0) {\n                let j = 0;\n                while (j < word.length) {\n                    if (char.charCodeAt(0) > word[j].charCodeAt(0)) {\n                        j++;\n                    }\n                    else {\n                        break;\n                    }\n                }\n                word = word.slice(0, j) + char + word.slice(j);\n            }\n            else {\n                word += char;\n            }\n        }\n    }\n    result += word;\n    return result;\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "let newWord = '';\n  for (let word of s.split(' ')) {\n    let newLetters = [];\n    for (let i = 0; i < word.length; i++) {\n      newLetters.push(word[i]);\n    }\n    newLetters.sort();\n    newWord += newLetters.join('') + ' ';\n  }\n  return newWord.trim();\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "return s.split(\" \").map(function(x){\n      return x.split(\"\").sort().join(\"\");\n    }).join(\" \");\n  }",
        "grade-12": {
            "execution": 1
        },
        "6": "var array = s.split(' ');\n  var orderedArray = [];\n  for (var j = 0; j < array.length; j++) {\n    var wordArray = array[j].split('');\n    var orderedWordArray = [];\n    for (var i = 0; i < wordArray.length; i++) {\n      orderedWordArray.push(wordArray[i]);\n    }\n    orderedWordArray.sort();\n    orderedArray.push(orderedWordArray.join(''));\n  }\n  return orderedArray.join(' ');\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "var newString = '';\n  for (var i = 0; i < s.length; i++) {\n    var currentWord = s[i];\n    var currentLetters = currentWord.split('');\n    var sortedLetters = currentLetters.sort();\n    var sortedWord = sortedLetters.join('');\n    if (s[i] === ' ') {\n      newString += ' ';\n    } else {\n      newString += sortedWord;\n    }\n  }\n  return newString;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "}",
        "grade-15": {
            "execution": 0
        },
        "13": "let words = s.split(' ');\n\tlet new_s = '';\n\tfor (let i = 0; i < words.length; i++) {\n\t\tlet word = words[i];\n\t\tnew_s += word.split('').sort().join('');\n\t\tif (i != words.length - 1) {\n\t\t\tnew_s += ' ';\n\t\t}\n\t}\n\treturn new_s;\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "return s.split(' ').map(e=>e.split('').sort().join('')).join(' ');\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "let arr = s.split(\" \");\n  let result = \"\";\n  for (let i = 0; i < arr.length; i++) {\n    result += sort(arr[i]) + \" \";\n  }\n  return result.trim();\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "var wordArray = s.split(\" \");\n  for (var i = 0; i < wordArray.length; i++) {\n    wordArray[i] = wordArray[i].split(\"\").sort().join(\"\");\n  }\n  return wordArray.join(\" \");\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "return s.split(' ').map(function(word){\n        return word.split('').sort().join('');\n    }).join(' ');\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "var array = s.split(\" \");\n    var result = [];\n    for (var i = 0; i < array.length; i++) {\n        result.push(array[i].split(\"\").sort().join(\"\"));\n    }\n    return result.join(\" \");\n}",
        "grade-19": {
            "execution": 1
        }
    },
    {
        "intent": "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nfunction compare(game, guess){\n",
        "snippet": [
            "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n"
        ],
        "simplified": "I think we all remember that feeling when the result of some long-awaited event is finally known. The feelings and thoughts you have at that moment are definitely worth noting down and comparing. Your task is to determine if a person correctly guessed the results of a number of matches. You are given two arrays of scores and guesses of equal length, where each index shows a match. Return an array of the same length denoting how far off each guess was. If they have guessed correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.",
        "task_id": "152",
        "3": "let result = []\n    for(let i = 0; i < game.length; i++){\n        if(game[i] === guess[i]){\n            result.push(0)\n        }else{\n            result.push(Math.abs(game[i] - guess[i]))\n        }\n    }\n    return result\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "var result = []\n\tfor (var i = 0; i < game.length; i++) {\n\t\tif (game[i] === guess[i]) {\n\t\t\tresult.push(0)\n\t\t} else {\n\t\t\tresult.push(Math.abs(game[i] - guess[i]))\n\t\t}\n\t}\n\treturn result\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "return game.map((el, idx) => {\n        if (el === guess[idx]) return 0;\n        return Math.abs(el - guess[idx]);\n    });\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "var result = [];\n    for(let i = 0; i < game.length; i++){\n        if(game[i] !== guess[i]){\n            result.push(Math.abs(game[i] - guess[i]));\n        }else{\n            result.push(0);\n        }\n    }\n    return result;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "let result = [];\n  for(let i = 0; i < game.length; i++){\n    if(game[i] === guess[i]){\n      result.push(0);\n    } else {\n      result.push(Math.abs(game[i] - guess[i]));\n    }\n  }\n  return result;\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "var result = [];\n  for(var i = 0; i < game.length; i++){\n    if(game[i] === guess[i]){\n      result.push(0);\n    }else{\n      result.push(Math.abs(game[i] - guess[i]));\n    }\n  }\n  return result;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "var result = []\n    for(var i = 0; i < game.length; i++){\n        if(game[i] === guess[i]){\n            result.push(0)\n        } else {\n            result.push(Math.abs(game[i] - guess[i]))\n        }\n    }\n    return result\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "let result = [];\n    for(let i = 0; i < game.length; i++){\n        let diff = game[i] - guess[i];\n        if(game[i] == guess[i]){\n            result.push(0);\n        } else {\n            result.push(Math.abs(diff));\n        }\n    }\n    return result;\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "//code here\n    let result = [];\n    for(let i = 0; i < game.length; i++){\n        if(game[i] == guess[i]){\n            result.push(0);\n        }else{\n            result.push(Math.abs(game[i] - guess[i]));\n        }\n    }\n    return result;\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "let result = []\n    for(let i = 0; i < game.length; i++){\n        result.push(Math.abs(game[i] - guess[i]))\n    }\n    return result\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "return game.map((score, index) => guess[index] > score ? guess[index] - score : score - guess[index]);\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "var result = [];\n    for(var i = 0; i < game.length; i++){\n        if(game[i] !== guess[i]){\n            result.push(Math.abs(game[i] - guess[i]));\n        } else {\n            result.push(0);\n        }\n    }\n    return result;\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "var result = [];\n    for(var i = 0; i < game.length; i++){\n        if(game[i] === guess[i]){\n            result.push(0);\n        }else{\n            result.push(Math.abs(game[i] - guess[i]));\n        }\n    }\n    return result;\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "return game.map((x, i) => x == guess[i] ? 0 : Math.abs(x - guess[i]));\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "return game.map((e,i)=>{\n        return (e-guess[i])===0? 0: Math.abs(e-guess[i])\n    })\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "return game.map((a,i)=>{\n       return guess[i]!==a?Math.abs(guess[i]-a):0\n    })\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "return game.map((sc,i)=>guess[i]===sc?0:Math.abs(guess[i]-sc))\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "let result = [];\n    for(let i = 0; i < game.length; i++){\n        result.push(Math.abs(game[i] - guess[i]));\n    }\n    return result;\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "let answer = []\n    for(let i = 0; i < game.length; i++){\n        if(game[i] === guess[i]){\n            answer.push(0)\n        }else if(game[i] !== guess[i]){\n            answer.push(Math.abs(game[i] - guess[i]))\n        }\n    }\n    return answer\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "return game.map((score, index) => score - guess[index]);\n}",
        "grade-19": {
            "execution": 1
        }
    },
    {
        "intent": "//Out of list of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return None in case the input list is empty.\n// >>> longest([])\n// >>> longest(['a', 'b', 'c'])\n// 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n// 'ccc'\nfunction longest(strings){\n",
        "snippet": [
            "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n"
        ],
        "simplified": "Out of list of strings, return the longest one. Return the first one in case of multiple strings of the same length. Return None in case the input list is empty.",
        "task_id": "12",
        "3": "let longest = \"\";\n  strings.forEach(function(str){\n    if(str.length > longest.length){\n      longest = str;\n    }\n  });\n  return longest;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "//return strings.sort()[strings.length - 1];\n    let long = strings[0];\n    for(let i = 0; i < strings.length; i++){\n        if(strings[i].length > long.length){\n            long = strings[i];\n        }\n    }\n    return long;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "var longest = \"\";\n\tfor(var i = 0; i < strings.length; i++){\n\t\tif(strings[i].length > longest.length){\n\t\t\tlongest = strings[i];\n\t\t}\n\t}\n\treturn longest;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "if(strings.length==0){\n        return null;\n    }\n    var longest = strings[0];\n    for(var i=1; i<strings.length; i++){\n        if(strings[i].length>longest.length){\n            longest = strings[i];\n        }\n    }\n    return longest;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "let longest = 0;\n    let longest_str = null;\n    for (let s of strings){\n        if (s.length > longest){\n            longest = s.length;\n            longest_str = s;\n        }\n    }\n    return longest_str;\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "var longest_string = 'None';\n  for (var i=0; i<strings.length; i++){\n    if (strings[i].length > longest_string.length){\n      longest_string = strings[i];\n    }\n  }\n  return longest_string;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "if (strings.length==0){\n\t\treturn null;\n\t}\n\tvar longestString = strings[0];\n\tfor (var i=1; i<strings.length; i++){\n\t\tif (strings[i].length > longestString.length){\n\t\t\tlongestString = strings[i];\n\t\t}\n\t}\n\treturn longestString;\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "if(strings.length === 0){\n\t\treturn \"None\";\n\t}else{\n\t\tvar max = strings[0];\n\t\tvar maxLength = strings[0].length;\n\t\tfor(var i = 1; i < strings.length; i++){\n\t\t\tif(strings[i].length > maxLength){\n\t\t\t\tmax = strings[i];\n\t\t\t\tmaxLength = strings[i].length;\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "if(strings.length === 0){\n    return;\n  }\n  var result = strings[0];\n  var longestLength = strings[0].length;\n  for(var i = 1; i < strings.length; i++){\n    if(strings[i].length > longestLength){\n      result = strings[i];\n      longestLength = strings[i].length;\n    }\n  }\n  return result;\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "let longest_string = null;\n    if (strings.length > 0){\n        longest_string = strings[0];\n        for (let i = 1; i < strings.length; i++){\n            if (strings[i].length > longest_string.length){\n                longest_string = strings[i];\n            }\n        }\n    }\n    return longest_string;\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "if (strings.length === 0) return;\n    let long = strings[0];\n    for (let word of strings){\n        if (word.length > long.length){\n            long = word;\n        }\n    }\n    return long;\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "var longest = '';\n    strings.forEach(function(element){\n        if(element.length > longest.length){\n            longest = element;\n        }\n    });\n    return longest;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "if(strings.length == 0){\n        return undefined;\n    }\n    if(strings.length == 1){\n        return strings[0];\n    }\n    let longestString = strings[0];\n    for(let i = 1; i < strings.length; i++){\n        if(strings[i].length > longestString.length){\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "if (strings.length === 0) {\n        return \"None\";\n    }\n    var length = 0;\n    var longest = \"\";\n    for (var i = 0; i < strings.length; i++) {\n        if (strings[i].length > length) {\n            length = strings[i].length;\n            longest = strings[i];\n        }\n    }\n    return longest;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "}",
        "grade-13": {
            "execution": 0
        },
        "9": "if(strings.length == 0){\n        return \"None\";\n    }\n    var longest = strings[0];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].length > longest.length){\n            longest = strings[i];\n        }\n    }\n    return longest;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "if (strings.length == 0) {\n    return null;\n  }\n  strings.sort(function(a, b){\n    return b.length - a.length;\n  });\n  return strings[0];\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "if (strings.length == 0) return \"None\";\n    var maxLength = 0;\n    var longStr = \"\";\n    for (var i=0; i<strings.length; i++){\n        if (strings[i].length > maxLength){\n            maxLength = strings[i].length;\n            longStr = strings[i];\n        }\n    }\n    return longStr;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "if(strings.length == 0){\n    return \"None\";\n  }\n  let longestLength = 0;\n  let longestString = \"\";\n  for(let i = 0; i < strings.length; i++){\n    if(strings[i].length > longestLength){\n      longestLength = strings[i].length;\n      longestString = strings[i];\n    }\n  }\n  return longestString;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "//empty list\n    if(strings.length==0){\n        return null;\n    }\n    var maxLength = strings[0].length;\n    var maxIndex = 0;\n    for(var i=1; i<strings.length; i++){\n        if(strings[i].length>maxLength){\n            maxLength = strings[i].length;\n            maxIndex = i;\n        }\n    }\n    return strings[maxIndex];\n}",
        "grade-19": {
            "execution": 1
        }
    },
    {
        "intent": "//Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n// split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") == 3\nfunction split_words(txt){\n",
        "snippet": [
            "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n"
        ],
        "simplified": "Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25",
        "task_id": "125",
        "3": "if (/\\s/.test(txt)) {\n        let res = txt.split(\" \");\n        return res;\n    } else if (/\\,/.test(txt)) {\n        let res = txt.split(\",\");\n        return res;\n    } else {\n        let count = 0;\n        let arr = [...txt];\n        for (let i = 0; i < arr.length; i++) {\n            if (arr[i].charCodeAt(0) % 2 !== 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "if(txt.match(/\\s/g)){\n        return txt.split(\" \");\n    }else if(txt.match(/\\,/g)){\n        return txt.split(\",\");\n    }else{\n        let count = 0;\n        for(let i = 1; i < txt.length; i+=2){\n            if(txt[i] == txt[i].toLowerCase()){\n                count++;\n            }\n        }\n        return count;\n    }\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "let f = txt.split(\" \");\n    let l = txt.split(\",\");\n    if(txt.indexOf(\" \") > -1) {\n        return f;\n    } else if(txt.indexOf(\",\") > -1) {\n        return l;\n    } else {\n        let x = 0;\n        for(let i = 0; i < txt.length; i++) {\n            if(i % 2 != 0) {\n                x++;\n            }\n        }\n        return x;\n    }\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "return txt.includes(\" \") ? txt.split(\" \") : txt.includes(\",\") ? txt.split(\",\") : txt.match(/[a-z]/g).filter((v,i) => i % 2 !== 0).length\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "let result = [];\n    if (txt.match(/\\s/)){\n        result = txt.split(/\\s/);\n    } else if (txt.match(/,/)){\n        result = txt.split(/,/);\n    } else {\n        let counter = 0;\n        for (let i = 0; i < txt.length; i++) {\n            if (i % 2 === 0 && txt[i] === txt[i].toLowerCase()){\n                counter ++;\n            }\n        }\n        result = counter;\n    }\n    return result;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "if(txt.indexOf(\" \") !== -1){\n        return txt.split(\" \");\n    }\n    if(txt.indexOf(\",\") !== -1){\n        return txt.split(\",\");\n    }\n    return txt.split(\"\").filter(x => \"abcdefghijklmnopqrstuvwxyz\".indexOf(x) % 2 == 1).length;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "if(txt.includes(\" \")){\n        return txt.split(\" \");\n    }else if(txt.includes(\",\")){\n        return txt.split(\",\");\n    }else {\n        var count = 0;\n        for(var i = 0; i < txt.length; i++){\n            if(txt.charCodeAt(i) % 2 !== 0){\n                count++;\n            }\n        }\n        return count;\n    }\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "var res = [];\n    var txta = txt.split(\" \");\n    var txtb = txt.split(\",\");\n    if(txta.length == 1){\n        if(txtb.length == 1){\n            return Math.floor(txt.length/2);\n        }\n        return txtb;\n    }\n    return txta;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "const obj = {\n        arr: txt.split(''),\n        alphabeth: \"abcdefghijklmnopqrstuvwxyz\".split(''),\n        res: []\n    }\n    if(txt.includes(\" \")){\n        return txt.split(\" \");\n    }\n    if(txt.includes(\",\")){\n        return txt.split(\",\");\n    }\n    for(let i = 0; i < obj.arr.length; i++){\n        let char = obj.arr[i];\n        if(obj.alphabeth.indexOf(char) % 2 !== 0){\n            obj.res.push(char);\n        }\n    }\n    return obj.res.length;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "if(txt.includes(' ')){\n        return txt.split(' ');\n    }else if(txt.includes(',')){\n        return txt.split(',');\n    }else{\n        let count = 0;\n        let txtArr = txt.split('');\n        for(let i = 0; i < txtArr.length; i++){\n            if(i % 2 != 0){\n                count++;\n            }\n        }\n        return count;\n    }\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "let words = /[a-z]+/gi.exec(txt);\n   console.log(words);\n   if(words === null){\n       let letters = [];\n       for(let i = 0; i < txt.length; i++){\n           let num = txt.charCodeAt(i);\n           if(num >= 97 && num <= 122){\n               letters.push(txt[i]);\n           }\n       }\n       let total = 0;\n       for(let i = 0; i < letters.length; i++){\n           if(letters[i].charCodeAt(0) % 2 != 0){\n               total++;\n           }\n       }\n       return total;\n   }\n   let split = txt.split(\" \");\n   console.log(split);\n   let arr = [];\n   for(let i = 0; i < split.length; i++){\n       if(split[i] !== \"\"){\n           arr.push(split[i]);\n       }\n   }\n   return arr;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "let words = txt.split(',');\n    if(words.length == 1){\n        let letterCount = 0;\n        let index = 0;\n        while(index < txt.length){\n            if(txt.charCodeAt(index) - 97 % 2 == 1){\n                letterCount++;\n            }\n            index++;\n        }\n        return letterCount;\n    }else{\n        return words;\n    }\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "if (txt.includes(' ')) {\n        return txt.split(' ');\n    }\n    else if (txt.includes(',')) {\n        return txt.split(',');\n    }\n    else {\n        return [...txt].filter(x => 'abcdefghijklmnopqrstuvwxyz'.indexOf(x) % 2 !== 0).length;\n    }\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "let arr = txt.split(',');\n    if(arr.length == 1){\n        arr = txt.split(' ');\n        if(arr.length == 1){\n            let count = 0;\n            for(let i = 0; i < txt.length; i++){\n                if(i % 2 == 0 && txt[i] == txt[i].toLowerCase()){\n                    count++;\n                }\n            }\n            return count;\n        }\n    }\n    return arr;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "if (txt.includes(\" \")){\n        return txt.split(\" \")\n    }\n    else if (txt.includes(\",\")){\n        return txt.split(\",\")\n    }\n    else {\n        let charCount = 0\n        for (let i = 0; i < txt.length; i++){\n            if (txt.charCodeAt(i) % 2 === 1){\n                charCount += 1\n            }\n        }\n        return charCount\n    }\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "let temp = [];\n    if(txt.indexOf(' ') > -1){\n        temp = txt.split(' ');\n    }\n    else if(txt.indexOf(',') > -1){\n        temp = txt.split(',');\n    }\n    else{\n        let sum = 0;\n        for(let i = 0; i < txt.length; i++){\n            if(i % 2 == 1){\n                sum += txt.charCodeAt(i) - 97;\n            }\n        }\n        temp.push(sum);\n    }\n    return temp;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "if(txt.includes(' ')){\n        return txt.split(' ');\n    }else if(txt.includes(',')){\n        return txt.split(',');\n    }else{\n        let new_txt = txt.toLowerCase();\n        let char_count = 0;\n        for(let i = 0; i < new_txt.length; i++){\n            if(i % 2 !== 0){\n                char_count++;\n            }\n        }\n        return char_count;\n    }\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "const arr = txt.split(/[\\s,]/);\n    if(arr.length === 1){\n        const value = txt.split('').reduce((acc, current, index) => {\n            if(index % 2){\n                acc++;\n            }\n            return acc;\n        }, 0);\n        return value;\n    }\n    return arr;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "let result = [];\n    if (txt.includes(' ')){\n        result = txt.split(' ');\n    }\n    else if (txt.includes(',')){\n        result = txt.split(',');\n    }\n    else {\n        let count = 0;\n        for (let index in txt){\n            if (txt[index].toLowerCase().charCodeAt(0) % 2 == 1){\n                count++;\n            }\n        }\n        result = count;\n    }\n    return result;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "if(txt.indexOf(\" \") != -1){\n        return txt.split(\" \");\n    }\n    else if(txt.indexOf(\",\") != -1){\n        return txt.split(\",\");\n    }\n    else{\n        var counter = 0;\n        for(var i = 0; i < txt.length; i++){\n            if(txt.charCodeAt(i) % 2 != 0){\n                counter++;\n            }\n        }\n        return counter;\n    }\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n",
        "snippet": [
            "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n"
        ],
        "simplified": "Given an array of non-negative integers, return a copy of the given array after sorting, you will sort the given array in ascending order if the sum( first index value, last index value) is odd, or sort it in descending order if the sum( first index value, last index value) is even. Note: * don't change the given array.",
        "task_id": "88",
        "3": "if (array.length == 0) {return array}\n  else if (array.length == 1) {return array}\n  else if (array.length % 2 == 0) {\n    var first = array[0];\n    var last = array[array.length - 1];\n    var array_odd = [];\n    var array_even = [];\n    for (var i = 0; i < array.length; i++) {\n      if (array[i] % 2 == 0) {\n        array_even.push(array[i]);\n      }\n      else {\n        array_odd.push(array[i]);\n      }\n    }\n    array_even.sort(function(a, b){return a-b});\n    array_odd.sort(function(a, b){return b-a});\n    var array_sorted = [];\n    var count = 0;\n    for (var i = 0; i < array.length; i++) {\n      if (array[i] % 2 == 0) {\n        array_sorted.push(array_even[count]);\n        count += 1;\n      }\n      else {\n        array_sorted.push(array_odd[count]);\n        count += 1;\n      }\n    }\n    array_sorted.splice(0, 1, first);\n    array_sorted.splice(array_sorted.length - 1, 1, last);\n    return array_sorted;\n  }\n  else {\n    var first = array[0];\n    var last = array[array.length - 1];\n    var array_odd = [];\n    var array_even = [];\n    for (var i = 0; i < array.length; i++) {\n      if (array[i] % 2 == 0) {\n        array_even.push(array[i]);\n      }\n      else {\n        array_odd.push(array[i]);\n      }\n    }\n    array_even.sort(function(a, b){return b-a});\n    array_odd.sort(function(a, b){return a-b});\n    var array_sorted = [];\n    var count = 0;\n    for (var i",
        "grade-3": {
            "execution": 0
        },
        "0": "if (array.length == 0) {\n        return array;\n    }\n    if (array.length == 1) {\n        return array;\n    }\n    if (array.length % 2 == 0) {\n        return array.sort((a, b) => b - a);\n    }\n    return array.sort((a, b) => a - b);\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "let first = array[0];\n    let last = array[array.length - 1];\n    let newArray = [];\n    if ((first + last) % 2 !== 0) {\n        newArray = array.sort(function(a, b){return a - b});\n    } else {\n        newArray = array.sort(function(a, b){return b - a});\n    }\n    return newArray;\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "if(array.length <= 1) return array;\n  return array.slice(0,1).concat(array.slice(array.length-1,array.length),array.slice(1,array.length-1)).sort((a,b)=>(a+b)%2?1:-1);\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "}",
        "grade-16": {
            "execution": 0
        },
        "2": "let sum = array[0] + array[array.length - 1];\n    let sorted;\n    if (sum % 2 === 0) {\n        sorted = array.sort(function(a, b){return b - a});\n    } else {\n        sorted = array.sort(function(a, b){return a - b});\n    }\n    return sorted;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "return array.map((x, i) => (i+1) % 2 === (array[0] + array[array.length-1]) % 2 ? x : x * -1).sort((a, b) => a - b).map((x, i) => (i+1) % 2 === (array[0] + array[array.length-1]) % 2 ? x : x * -1);\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "let sum = array[0] + array[array.length - 1];\n  let sortedArray = array.sort((a, b) => {\n    if (sum % 2 === 0) {\n      return b - a;\n    } else {\n      return a - b;\n    }\n  });\n  return sortedArray;\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "let firstIndex = array[0];\n    let lastIndex = array[array.length - 1];\n    let sumOfFirstAndLastIndex = firstIndex + lastIndex;\n    let sortedArray = [];\n    if (sumOfFirstAndLastIndex % 2 === 0) {\n        sortedArray = array.sort((a, b) => {\n            return b - a;\n        });\n    } else {\n        sortedArray = array.sort((a, b) => {\n            return a - b;\n        });\n    }\n    return sortedArray;\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "var i = 0;\n    var j = array.length-1;\n    var temp;\n    if(array.length==0){\n        return array;\n    }else if(array.length==1){\n        return array;\n    }else if((array[i]+array[j])%2!=0){\n        //ascending\n        for(var m=0;m<array.length;m++){\n            for(var n=m+1;n<array.length;n++){\n                if(array[m]>array[n]){\n                    temp = array[m];\n                    array[m] = array[n];\n                    array[n] = temp;\n                }\n            }\n        }\n        return array;\n    }else{\n        //descending\n        for(var m=0;m<array.length;m++){\n            for(var n=m+1;n<array.length;n++){\n                if(array[m]<array[n]){\n                    temp = array[m];\n                    array[m] = array[n];\n                    array[n] = temp;\n                }\n            }\n        }\n        return array;\n    }\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "let sum = array[0] + array[array.length - 1];\n    let arr = array.sort((a, b) => {\n        if (sum % 2 === 0) {\n            return b - a;\n        } else {\n            return a - b;\n        }\n    });\n    return arr;\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "if(array.length == 0 || array.length == 1) return array;\n    return (array[0] + array[array.length - 1]) % 2 != 0 ? array.sort((a, b) => a - b) : array.sort((a, b) => b - a);\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "if (array.length === 0 || array.length === 1) {\n        return array;\n    } else {\n        let arr = [];\n        let even = [];\n        let odd = [];\n        for (let i = 0; i < array.length; i++) {\n            if (array[i] % 2 !== 0) {\n                odd.push(array[i]);\n            } else {\n                even.push(array[i]);\n            }\n        }\n        odd.sort((a, b) => a - b);\n        even.sort((a, b) => b - a);\n        if (array[0] % 2 !== 0) {\n            arr = odd.concat(even);\n        } else {\n            arr = even.concat(odd);\n        }\n        return arr;\n    }\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "var sum = array[0] + array[array.length - 1];\n  if (sum % 2 == 0) {\n    return array.sort(function(a, b){return b - a});\n  } else {\n    return array.sort(function(a, b){return a - b});\n  }\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "let sum = array[0] + array[array.length - 1];\n  if (sum % 2 === 0) {\n    return array.sort(function(a, b) {\n      return b - a;\n    });\n  } else {\n    return array.sort(function(a, b) {\n      return a - b;\n    });\n  }\n}\nsort_array([2, 4, 3, 0, 1, 5, 6]);",
        "grade-13": {
            "execution": 1
        },
        "9": "var sum = 0;\n    var array_length = array.length;\n    var i = 0;\n    while(i<array_length){\n        sum += array[i];\n        i++;\n    }\n    if(sum%2===0){\n        array.sort(function(a,b){\n            return b-a;\n        });\n    }else{\n        array.sort(function(a,b){\n            return a-b;\n        });\n    }\n    return array;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "if(array.length<=1) return array;\n  const sum = array[0] + array[array.length-1];\n  if(sum%2===0){\n    return array.sort((a,b)=>b-a);\n  }\n  return array.sort((a,b)=>a-b);\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "let result = [];\n    if(!array.length){\n        return array;\n    }\n    if(array.length == 1){\n        return array;\n    }\n    let sum = array[0] + array[array.length - 1];\n    if(sum % 2 == 0){\n        result = array.sort(function(a, b){\n            return b - a;\n        });\n    }\n    else{\n        result = array.sort(function(a, b){\n            return a - b;\n        });\n    }\n    return result;\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "if(array.length == 0 || array.length == 1) return array;\n    let first = array[0];\n    let last = array[array.length - 1];\n    if(sum(first, last) % 2 == 0) {\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "let oddEven = array.length > 0 ? array[0] + array[array.length - 1] : 0;\n    if (oddEven % 2 == 0) {\n        return array.sort((a, b) => a < b ? 1 : -1);\n    } else {\n        return array.sort((a, b) => a > b ? 1 : -1);\n    }\n}",
        "grade-19": {
            "execution": 1
        }
    },
    {
        "intent": "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n",
        "snippet": [
            "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n"
        ],
        "simplified": "You are given a string representing a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words from the original sentence, whose lengths are prime numbers, the order of the words in the new string should be the same as the original one. Constraints: * 1 <= len(sentence) <= 100 * sentence contains only letters",
        "task_id": "143",
        "3": "let words = sentence.split(' ');\n  let prime_word = '';\n  for(let i = 0; i < words.length; i++){\n    if(is_prime(words[i].length)){\n      prime_word += words[i] + ' ';\n    }\n  }\n  return prime_word.trim();\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "return sentence.split(' ').filter(word => is_prime(word.length)).join(' ');\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "var words = sentence.split(\" \");\n    var result = [];\n    for(var i = 0; i < words.length; i++){\n        if(prime(words[i].length)){\n            result.push(words[i]);\n        }\n    }\n    return result.join(\" \");\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "var words = sentence.split(\" \");\n    var r = [];\n    for(var i=0; i<words.length; i++){\n        if(is_prime(words[i].length)){\n            r.push(words[i]);\n        }\n    }\n    return r.join(\" \");\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "var sent_arr = sentence.split(\" \");\n  var new_sent = [];\n  for(var word of sent_arr){\n    if(is_prime(word.length)){\n      new_sent.push(word);\n    }\n  }\n  return new_sent.join(\" \");\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "var words = sentence.split(\" \");\n    var output = \"\";\n    for(var i = 0; i < words.length; i++){\n        if(is_prime(words[i].length)){\n            output += words[i] + \" \";\n        }\n    }\n    return output.substring(0, output.length - 1);\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "var words = sentence.split(\" \");\n\tvar new_sentence = [];\n\tfor(var i = 0; i < words.length; i++){\n\t\tif(is_prime(words[i].length)){\n\t\t\tnew_sentence.push(words[i]);\n\t\t}\n\t}\n\treturn new_sentence.join(\" \");\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "let result = [];\n    const words = sentence.split(' ');\n    for(let i = 0; i < words.length; i++){\n        if(is_prime(words[i].length)){\n            result.push(words[i]);\n        }\n    }\n    return result.join(' ');\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "// Your code here\n}\nwords_in_sentence(\"lets go for swimming\")",
        "grade-10": {
            "execution": 0
        },
        "17": "var result = '';\n    var words = sentence.split(' ');\n    for(var i = 0; i < words.length; i++){\n        if(is_prime(words[i].length)){\n            result += words[i] + ' ';\n        }\n    }\n    return result.trim();\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "let newSentence = \"\";\n    let sentenceArr = sentence.split(\" \");\n    let primeNumbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    for(let i = 0; i < sentenceArr.length; i++){\n        for(let j = 0; j < primeNumbers.length; j++){\n            if(sentenceArr[i].length === primeNumbers[j]){\n                newSentence += sentenceArr[i] + \" \";\n            }\n        }\n    }\n    return newSentence;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "return sentence.split(' ').filter(w => is_prime(w.length)).join(' ');\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "let words = sentence.split(' ');\n    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101];\n    let prime_words = [];\n    for(let i = 0; i < words.length; i++){\n        let word = words[i];\n        if(primes.includes(word.length)) prime_words.push(word);\n    }\n    return prime_words.join(' ');\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "const words = sentence.split(' ')\n  const prime_words = words.filter(word => is_prime(word.length))\n  return prime_words.join(' ')\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "let new_sentence = '';\n    let word_list = sentence.split(' ');\n    for(let i = 0; i < word_list.length; i++){\n        if(is_prime(word_list[i].length)){\n            new_sentence += word_list[i];\n            new_sentence += ' ';\n        }\n    }\n    return new_sentence.trim();\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "let is_prime = [false, false];\n    for(let i = 2; i < 101; i++){\n        is_prime[i] = true;\n    }\n    for(let i = 2; i < 101; i++){\n        if(is_prime[i]){\n            for(let j = i * i; j < 101; j += i){\n                is_prime[j] = false;\n            }\n        }\n    }\n    let result = [];\n    for(let i = 0; i < sentence.length; i++){\n        if(sentence[i] !== ' '){\n            let word = '';\n            while(i < sentence.length && sentence[i] !== ' '){\n                word += sentence[i];\n                i++;\n            }\n            if(is_prime[word.length]){\n                result.push(word);\n            }\n        }\n    }\n    return result.join(' ');\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "let words = sentence.split(' ');\n    let is_prime = word => word.length === 1 || word.length === 2;\n    let answer = '';\n    for(let i = 0; i < words.length; i++){\n        if(is_prime(words[i])){\n            answer += words[i] + ' ';\n        }\n    }\n    return answer.trim();\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "var sentence_arr = sentence.split(\" \");\n    var answer = [];\n    var prime_num = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    for(var i = 0; i < sentence_arr.length; i++){\n        if(prime_num.includes(sentence_arr[i].length)){\n            answer.push(sentence_arr[i]);\n        }\n    }\n    return answer.join(\" \");\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "let res = [];\n    let words = sentence.split(\" \");\n    for(let i = 0; i < words.length; i++){\n        if(is_prime(words[i].length)){\n            res.push(words[i]);\n        }\n    }\n    return res.join(\" \");\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "let res = [];\n    sentence.split(' ').forEach(v => {\n        if(is_prime(v.length)){\n            res.push(v);\n        }\n    });\n    return res.join(' ');\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//You are given a list of numbers.\n// You need to return the sum of squared numbers in the given list,\n// round each element in the list to the upper int(Ceiling) first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nfunction sum_squares(lst){\n",
        "snippet": [
            "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n"
        ],
        "simplified": "You are given a list of numbers. You need to return the sum of squared numbers in the given list, round each element in the list to the upper int(Ceiling) first.",
        "task_id": "133",
        "0": "var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        var number = lst[i];\n        var numberSquared = Math.ceil(number * number);\n        sum += numberSquared;\n    }\n    return sum;\n}",
        "grade-0": {
            "execution": 0
        },
        "1": "return lst.map(num => Math.ceil(num))\n        .map(num => num*num)\n        .reduce((a,b) => a+b);\n}",
        "grade-1": {
            "execution": 1
        },
        "2": "var sum = 0;\nfor(var i = 0; i < lst.length; i++){\n  sum = sum + Math.ceil(lst[i]) * Math.ceil(lst[i]);\n}\nreturn sum;\n}",
        "grade-2": {
            "execution": 1
        },
        "3": "let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        sum += Math.ceil(lst[i]) * Math.ceil(lst[i]);\n    }\n    return sum;\n}",
        "grade-3": {
            "execution": 1
        },
        "4": "let newArr = lst.map(element => {\n    return Math.ceil(element) ** 2;\n  });\n  return newArr.reduce((acc, curr) => {\n    return acc + curr;\n  });\n}",
        "grade-4": {
            "execution": 1
        },
        "5": "return lst.map(item => Math.ceil(item)).reduce((acc, item) => acc + item * item, 0);\n}",
        "grade-5": {
            "execution": 1
        },
        "6": "for(var i = 0; i < lst.length; i++){\n        lst[i] = Math.ceil(lst[i]);\n    }\n    return lst.reduce(function(a,b){\n        return a + (b * b);\n    },0);\n}",
        "grade-6": {
            "execution": 1
        },
        "7": "return lst.map(x => Math.ceil(x)).reduce((a, b) => Math.pow(a, 2) + Math.pow(b, 2));\n}",
        "grade-7": {
            "execution": 0
        },
        "8": "return lst.map(function(value) {\n        return Math.pow(Math.ceil(value), 2);\n    }).reduce(function(a, b) {\n        return a + b;\n    });\n}",
        "grade-8": {
            "execution": 1
        },
        "9": "return lst.map(a => Math.ceil(a)).reduce((a, b) => a + b ** 2, 0);\n}",
        "grade-9": {
            "execution": 1
        },
        "11": "var squaredNumber = lst.map(function(num){\n        return Math.ceil(num)\n    })\n    var summed = squaredNumber.reduce(function(acc, curr){\n        return acc + curr**2\n    }, 0)\n    return summed\n}",
        "grade-11": {
            "execution": 1
        },
        "12": "return lst.map(i => Math.ceil(i)).reduce((a,b) => a + b * b, 0);\n}",
        "grade-12": {
            "execution": 1
        },
        "13": "return lst.map(x => Math.ceil(x)**2).reduce((acc, cur) => acc + cur);\n}",
        "grade-13": {
            "execution": 1
        },
        "14": "let squared = lst.map(function(x){\n        return Math.pow(Math.ceil(x), 2);\n    });\n    return squared.reduce(function(a, b){\n        return a + b;\n    });\n}",
        "grade-14": {
            "execution": 1
        },
        "15": "let total = 0;\n    for(let i = 0; i < lst.length; i++){\n        let ceilNum = Math.ceil(lst[i]);\n        total += ceilNum * ceilNum;\n    }\n    return total;\n}",
        "grade-15": {
            "execution": 1
        },
        "16": "var sum = 0;\n\tfor(var i = 0; i < lst.length; i++){\n\t\tsum += Math.ceil(lst[i]) * Math.ceil(lst[i]);\n\t}\n\treturn sum;\n}",
        "grade-16": {
            "execution": 1
        },
        "17": "let squares = [];\n  for (let i = 0; i < lst.length; i++) {\n    let element = lst[i];\n    let rounded = Math.ceil(element);\n    let squared = rounded * rounded;\n    squares.push(squared);\n  }\n  let sum = 0;\n  for (let i = 0; i < squares.length; i++) {\n    let element = squares[i];\n    sum += element;\n  }\n  return sum;\n}",
        "grade-17": {
            "execution": 1
        },
        "18": "return lst.map(Math.ceil).reduce((a,b)=>a+(b*b),0);\n}",
        "grade-18": {
            "execution": 1
        },
        "19": "}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n",
        "snippet": [
            "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n"
        ],
        "simplified": "Given a non-empty list of integers lst. add the even elements that are at odd indices..",
        "task_id": "85",
        "3": "var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(i % 2 == 1 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "let result = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] % 2 === 0 && i % 2 !== 0){\n            result += lst[i];\n        }\n    }\n    return result;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "//TODO:\n    const items = lst.filter((item,index) => index % 2 !== 0);\n    const even = items.filter(item => item % 2 === 0);\n    return even.reduce((sum, item) => sum + item, 0);\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(i % 2 != 0 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2 != 0 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "let count = 0;\n  lst.forEach((element, index) => {\n    if (index % 2 === 1) {\n      count += element;\n    }\n  });\n  return count;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2 !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "return lst.filter((i, index) => i % 2 === 0 && index % 2 === 1).reduce((a, b) => a + b, 0);\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "let num=0;\n    for(let i=0;i<lst.length;i+=2){\n        if(lst[i]%2==0){\n            num+=lst[i];\n        }\n    }\n    return num;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "let add = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] % 2 === 0 && i % 2 !== 0){\n            add += lst[i];\n        }\n    }\n    return add;\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if((lst[i] % 2 == 0) && (i % 2 == 1)){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "var retVal = 0;\n    for(var i = 0; i < lst.length; i++)\n    {\n        if((i % 2 != 0) && (lst[i] % 2 == 0))\n        {\n            retVal += lst[i];\n        }\n    }\n    return retVal;\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "var ans = 0;\n  for(var i = 0; i < lst.length; i++) {\n    if(i % 2 !== 0 && lst[i] % 2 === 0) {\n      ans += lst[i];\n    }\n  }\n  return ans;\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "return lst.filter((val, index) => index % 2 === 1 && val % 2 === 0).reduce((acc, val) => acc + val);\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "let num = 0;\n    for(let i = 0; i < lst.length; i+=2){\n        if(lst[i] % 2 === 0){\n            num += lst[i];\n        }\n    }\n    return num;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "let newArr = [];\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2 === 1 && lst[i] % 2 === 0){\n            newArr.push(lst[i]);\n        }\n    }\n    return newArr.reduce((acc, cur) => acc + cur);\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "let even = []\n  lst.forEach((el, index) => {\n    if (el % 2 === 0 && index % 2 !== 0) {\n      even.push(el)\n    }\n  })\n  return even.reduce((a,b) => a + b)\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 === 1 && lst[i] % 2 === 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "let even = 0;\nfor(let i = 0; i < lst.length; i+=2){\n  if(lst[i] % 2 === 0){\n    even += lst[i];\n  }\n}\nreturn even;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "}\n\nmodule.exports = {\n  \"add\": add\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n",
        "snippet": [
            "  return n * (n + 1) / 2;\n}\n\n"
        ],
        "simplified": "sum_to_n is a function that sums numbers from 1 to n.",
        "task_id": "60",
        "0": "var sum = 0;\n  for(var i = 1; i <= n; i++){\n    sum += i;\n  }\n  return sum;\n}",
        "grade-0": {
            "execution": 1
        },
        "1": "var sum = 0;\n\tfor(var i = 1; i<=n; i++){\n\t\tsum = sum + i;\n\t}\n\treturn sum;\n}",
        "grade-1": {
            "execution": 1
        },
        "2": "var sum = 0;\n    for(var i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}",
        "grade-2": {
            "execution": 1
        },
        "3": "return (n*(n+1))/2;\n}",
        "grade-3": {
            "execution": 1
        },
        "6": "return n*(n+1)/2;\n}",
        "grade-6": {
            "execution": 1
        },
        "7": "var sum = 0;\n\tfor(var i = 1; i<=n; i++){\n\t\tsum += i;\n\t}\n\treturn sum;\n}",
        "grade-7": {
            "execution": 1
        },
        "8": "var sum = 0;\n  for(var i = 0; i <= n; i++){\n    sum += i;\n  }\n  return sum;\n}",
        "grade-8": {
            "execution": 1
        },
        "10": "var sum = 0;\n\tfor(var i = 1; i <= n; i++){\n\t\tsum += i;\n\t}\n\treturn sum;\n}",
        "grade-10": {
            "execution": 1
        },
        "11": "return n*(n+1)/2;\n}",
        "grade-11": {
            "execution": 1
        },
        "13": "var sum = 0;\n    for(var i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}",
        "grade-13": {
            "execution": 1
        },
        "14": "var result = 0;\n    for(var i = 1; i <= n; i++){\n        result += i;\n    }\n    return result;\n}",
        "grade-14": {
            "execution": 1
        },
        "15": "return (n*(n+1))/2;\n}",
        "grade-15": {
            "execution": 1
        },
        "17": "var acc = 0;\n  for(var i = 1; i <= n; i++){\n    acc += i;\n  }\n  return acc;\n}",
        "grade-17": {
            "execution": 1
        },
        "18": "var sum = 0;\n    for(var i = 0; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}",
        "grade-18": {
            "execution": 1
        },
        "19": "//solution goes here\n\tvar sum = 0;\n\tfor(var i = 1; i<=n; i++){\n\t\tsum += i;\n\t}\n\treturn sum;\n}",
        "grade-19": {
            "execution": 1
        }
    },
    {
        "intent": "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n",
        "snippet": [
            "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n"
        ],
        "simplified": "For a given number n, find the largest number that divides n evenly, smaller than n",
        "task_id": "24",
        "0": "var largest_divisor = 0;\n    for(var i = 1; i < n; i++){\n        if(n % i == 0){\n            largest_divisor = i;\n        }\n    }\n    return largest_divisor;\n}",
        "grade-0": {
            "execution": 1
        },
        "1": "var divisor = n - 1;\n    while (n % divisor !== 0){\n        divisor -= 1;\n    }\n    return divisor;\n}",
        "grade-1": {
            "execution": 1
        },
        "2": "let i = n;\n  while (i > 0){\n    if (n % i === 0){\n      return i;\n    }\n    i -= 1;\n  }\n}",
        "grade-2": {
            "execution": 0
        },
        "3": "var max=0;\n    for(var i=1;i<n;i++){\n        if(n%i==0){\n            max=i;\n        }\n    }\n    return max;\n}\nlargest_divisor(5);",
        "grade-3": {
            "execution": 1
        },
        "4": "for(var i = n-1; i > 0; i--){\n\t\tif(n % i === 0){\n\t\t\treturn i;\n\t\t}\n\t}\n}",
        "grade-4": {
            "execution": 1
        },
        "5": "for(var i = n - 1; i > 0; i--){\n    if(n % i === 0){\n      return i;\n    }\n  }\n}",
        "grade-5": {
            "execution": 1
        },
        "6": "var largest_divisor = n;\n    for(var i = 0; i < n; i++){\n        if(n % i === 0 && i < n){\n            largest_divisor = i;\n        }\n    }\n    return largest_divisor;\n}",
        "grade-6": {
            "execution": 1
        },
        "7": "for(let i = n-1; i > 0; i--){\n    if(n % i === 0){\n      return i;\n    }\n  }\n}",
        "grade-7": {
            "execution": 1
        },
        "8": "for(let i = n - 1; i > 0; i--){\n    if(n % i === 0){\n      return i;\n    }\n  }\n}",
        "grade-8": {
            "execution": 1
        },
        "9": "var divisor = n - 1;\n  while (divisor > 0){\n    if (n % divisor === 0){\n      return divisor;\n    }\n    divisor--;\n  }\n}",
        "grade-9": {
            "execution": 1
        },
        "10": "for(var i = n - 1; i > 0; i--){\n\t\tif(n % i === 0){\n\t\t\treturn i;\n\t\t}\n\t}\n}",
        "grade-10": {
            "execution": 1
        },
        "11": "//iterate through all numbers lower than n\n    for(var i = n - 1; i > 0; i--){\n        //divide n by each number and check if the remainder is 0\n        if(n % i === 0){\n            //if the remainder is 0, return i\n            return i;\n        }\n    }\n}",
        "grade-11": {
            "execution": 1
        },
        "12": "}",
        "grade-12": {
            "execution": 0
        },
        "13": "for(var i = n-1; i > 0; i--){\n    if(n % i === 0){\n      return i;\n    }\n  }\n}",
        "grade-13": {
            "execution": 1
        },
        "14": "if(n === 1){\n        return 1;\n    }\n    if(n === 2){\n        return 1;\n    }\n    if(n === 3){\n        return 1;\n    }\n    if(n === 4){\n        return 2;\n    }\n    let i = Math.floor(n/2);\n    let answer = 0;\n    for(i; i>0; i--){\n        if(n%i === 0){\n            answer = i;\n            break;\n        }\n    }\n    return answer;\n}",
        "grade-14": {
            "execution": 1
        },
        "16": "for(let i = n - 1; i > 0; i--){\n        if(n % i === 0){\n            return i;\n        }\n    }\n}",
        "grade-16": {
            "execution": 1
        },
        "17": "var divisor = n - 1;\n  while (divisor > 0){\n    if (n % divisor === 0){\n      return divisor;\n    }\n    divisor -= 1;\n  }\n}",
        "grade-17": {
            "execution": 1
        },
        "18": "var largest = 0;\n    for(var i = 1; i < n; i++){\n        if(n % i === 0){\n            largest = i;\n        }\n    }\n    return largest;\n}",
        "grade-18": {
            "execution": 1
        },
        "19": "var divisor = 2;\n  while (n > divisor){\n    if (n % divisor == 0){\n      return divisor;\n    }\n    else\n      divisor += 1;\n  }\n  return n;\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n",
        "snippet": [
            "  return a * h / 2.0;\n}\n\n"
        ],
        "simplified": "Given length of a side and high return area for a triangle.",
        "task_id": "45",
        "0": "return a * h / 2;\n}",
        "grade-0": {
            "execution": 1
        },
        "1": "return a * h / 2;\n}",
        "grade-1": {
            "execution": 1
        },
        "2": "return a * h / 2;\n}\ntriangle_area(5, 3);",
        "grade-2": {
            "execution": 1
        },
        "3": "return (1/2)*a*h;\n}",
        "grade-3": {
            "execution": 1
        },
        "4": "return (a * h) / 2;\n}",
        "grade-4": {
            "execution": 1
        },
        "5": "}",
        "grade-5": {
            "execution": 0
        },
        "6": "return (a*h)/2;\n}",
        "grade-6": {
            "execution": 1
        },
        "8": "return ((a*h)/2);\n}",
        "grade-8": {
            "execution": 1
        },
        "10": "return (a * h)/2;\n}",
        "grade-10": {
            "execution": 1
        },
        "12": "return 0.5 * a * h;\n}",
        "grade-12": {
            "execution": 1
        },
        "14": "return a*h/2;\n}",
        "grade-14": {
            "execution": 1
        },
        "15": "return a * h / 2;\n}",
        "grade-15": {
            "execution": 1
        },
        "16": "return (a * h) / 2;\n}",
        "grade-16": {
            "execution": 1
        },
        "18": "var area = (a * h)/2;\n  return area;\n}",
        "grade-18": {
            "execution": 1
        },
        "19": "return 0.5 * a * h;\n}",
        "grade-19": {
            "execution": 1
        }
    },
    {
        "intent": "//Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\nfunction get_odd_collatz(n){\n",
        "snippet": [
            "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n"
        ],
        "simplified": "Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence. The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined as follows: start with any positive integer n. Then each term is obtained from the previous term as follows: if the previous term is even, the next term is one half of the previous term. If the previous term is odd, the next term is 3 times the previous term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1. Note: 1. Collatz(1) is [1]. 2. returned list sorted in increasing order.",
        "task_id": "123",
        "3": "if(n === 1) {\n\t\treturn [1];\n\t}\n\tlet nums = [n];\n\twhile(n !== 1) {\n\t\tif(n % 2 === 0) {\n\t\t\tn = n / 2;\n\t\t} else {\n\t\t\tn = (3 * n) + 1;\n\t\t}\n\t\tnums.push(n);\n\t}\n\treturn nums.filter(n => n % 2 !== 0);\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "var odd_collatz = [n];\n  var i = 1;\n  while(n!=1){\n    n = n%2==0 ? n/2 : n*3+1;\n    if(n%2!=0){\n      odd_collatz.push(n);\n    }\n  }\n  return odd_collatz;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "let arr = []\n    while(n > 1){\n        if(n % 2 === 1){\n            arr.push(n)\n        }\n        n = (n % 2 === 0) ? n / 2 : 3 * n + 1\n    }\n    arr.push(1)\n    return arr\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "//Math.pow(7,3) = 343\n    let result = [];\n    let step = 0;\n    while(n != 1){\n        if(n % 2 == 0){\n            n = n / 2;\n        }\n        else{\n            n = 3 * n + 1;\n        }\n        step++;\n        if(step == 1000000){\n            return [1,n];\n        }\n        if(n % 2 != 0){\n            result.push(n);\n        }\n    }\n    return result;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "let arr = [];\n  while(n>1){\n    if(n%2==1){\n      arr.push(n);\n    }\n    n = n % 2 == 0 ? n/2 : 3*n+1;\n  }\n  arr.push(1);\n  return arr;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "let collatz = function(n){\n\t\tlet arr = [n];\n\t\tif(n <= 1){\n\t\t\treturn [1];\n\t\t}\n\t\twhile(n != 1){\n\t\t\tif(n % 2 == 0){\n\t\t\t\tn = n / 2;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tn = 3 * n + 1;\n\t\t\t}\n\t\t\tarr.push(n);\n\t\t}\n\t\treturn arr;\n\t}\n\tlet arr = collatz(n);\n\treturn arr.filter(function(x){\n\t\treturn x % 2 != 0;\n\t});\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "var seq = [n];\n    var i = 0;\n    while(seq[i] != 1){\n        if(seq[i] % 2 == 0){\n            seq.push(seq[i] / 2);\n        }else{\n            seq.push(seq[i] * 3 + 1);\n        }\n        i++;\n    }\n    var arr = [];\n    for(var x = 0; x < seq.length; x++){\n        if(seq[x] % 2 == 1){\n            arr.push(seq[x]);\n        }\n    }\n    return arr;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "var result = [];\n  if(n > 0){\n    result.push(n);\n    while(n != 1){\n      if(n % 2 == 0){\n        n = n / 2;\n      }\n      else{\n        n = 3 * n + 1;\n      }\n      if(n % 2 != 0){\n        result.push(n);\n      }\n    }\n  }\n  return result;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "let arr = [];\n  arr.push(n);\n  while(n != 1){\n    if(n % 2 == 0){\n      n = n / 2;\n    }else{\n      n = 3 * n + 1;\n    }\n    if(n % 2 != 0){\n      arr.push(n);\n    }\n  }\n  return arr;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "function isOdd(n){\n        return n % 2;\n    }\n    function collatz(n){\n        var sequence = [n];\n        while(n != 1){\n            if(isOdd(n)){\n                n = 3 * n + 1;\n            }\n            else{\n                n = n / 2;\n            }\n            sequence.push(n);\n        }\n        return sequence;\n    }\n    return collatz(n).filter(isOdd);\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "var arr = [n];\n\twhile(n != 1){\n\t\tif(n % 2 == 0){\n\t\t\tn = n / 2;\n\t\t}\n\t\telse{\n\t\t\tn = 3 * n + 1;\n\t\t}\n\t\tarr.push(n);\n\t}\n\tvar result = [];\n\tfor(var i = 0; i < arr.length; i++){\n\t\tif(arr[i] % 2 == 1){\n\t\t\tresult.push(arr[i]);\n\t\t}\n\t}\n\treturn result;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "var res = [];\n    while(n>1){\n        if(n%2==1){\n            res.push(n);\n        }\n        n = n%2==0?n/2:3*n+1;\n    }\n    res.push(1);\n    return res;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "var list = [1];\n\tvar i = 2;\n\tvar sequence = [];\n\tvar odds = [];\n\tvar k = 0;\n\tvar result = [];\n\twhile(i <= n){\n\t\tsequence = collatz(i);\n\t\todds = only_odds(sequence);\n\t\tfor(var j = 0; j < odds.length; j++){\n\t\t\tlist[k] = odds[j];\n\t\t\tk++;\n\t\t}\n\t\ti++;\n\t}\n\tlist.sort(function(a, b){return a-b});\n\treturn list;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "if(n == 1) return [1];\n    var result = [n];\n    while(n != 1){\n        if(n % 2 == 0){\n            n = n / 2;\n        }else{\n            n = n * 3 + 1;\n        }\n        if(n % 2 != 0) result.push(n);\n    }\n    return result;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "}",
        "grade-13": {
            "execution": 0
        },
        "9": "var seq = [n];\n\twhile(n > 1){\n\t\tif(n % 2 === 0){\n\t\t\tn = n / 2;\n\t\t} else {\n\t\t\tn = (3 * n) + 1;\n\t\t}\n\t\tseq.push(n);\n\t}\n\tvar result = [];\n\tfor(var i = 0; i < seq.length; i++){\n\t\tif(seq[i] % 2 === 1){\n\t\t\tresult.push(seq[i]);\n\t\t}\n\t}\n\treturn result;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "var collatz_seq = [n];\n  var odd_nums = [];\n  while(n !== 1){\n    if(n % 2 === 0){\n      n = n / 2;\n    } else{\n      n = 3 * n + 1;\n    }\n    collatz_seq.push(n);\n  }\n  for(var i = 0; i < collatz_seq.length; i++){\n    if(collatz_seq[i] % 2 !== 0){\n      odd_nums.push(collatz_seq[i]);\n    }\n  }\n  return odd_nums;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "var c = [n];\n  for(i=0; i<c.length; i++){\n    if(c[i] % 2 == 0){\n      c.push(c[i]/2);\n    }\n    else{\n      c.push(c[i]*3+1);\n    }\n  }\n  var odds = c.filter(function(item){\n    return item % 2 == 1;\n  });\n  return odds;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "// TODO: return an array of all the odd numbers in the collatz sequence of n.\n    if(n <= 0) return null;\n    let collatz = [];\n    while(n !== 1){\n        collatz.push(n);\n        if(n % 2 === 0) n = n / 2;\n        else n = 3 * n + 1;\n    }\n    collatz.push(1);\n    let odds = [];\n    for(let i = 0; i < collatz.length; i++){\n        if(collatz[i] % 2 !== 0) odds.push(collatz[i]);\n    }\n    return odds;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "const sequence = [n];\n    let next_num = n;\n    while(next_num !== 1){\n        if(next_num % 2 === 0){\n            next_num = next_num / 2;\n        } else {\n            next_num = next_num * 3 + 1;\n        }\n        sequence.push(next_num);\n    }\n    return sequence.filter(num => num % 2 === 1);\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//You are given a list of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(', ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens(lst){\n",
        "snippet": [
            "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n"
        ],
        "simplified": "You are given a list of two strings, both strings consist of open parentheses '(' or close parentheses ')' only. Your job is to check if it is possible to concatenate the two strings in some order, that the resulting string will be good. A string S is considered to be good if and only if all parentheses in S are balanced. For example: the string '(())()' is good, while the string '())' is not. Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.",
        "task_id": "119",
        "3": "let ct = lst.map(x => {\n    let sum = 0;\n    for (let i = 0; i < x.length; i++) {\n      if (x[i] === '(') {\n        sum += 1;\n      } else {\n        sum -= 1;\n      }\n    }\n    return sum;\n  });\n  return ct[0] > 0 ? 'Yes' : ct[1] > 0 ? 'Yes' : 'No';\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "let open = 0;\n  let close = 0;\n  lst[0].split('').forEach(element => {\n    if (element === '(') {\n      open++;\n    } else {\n      close++;\n    }\n  });\n  lst[1].split('').forEach(element => {\n    if (element === '(') {\n      open++;\n    } else {\n      close++;\n    }\n  });\n  if (open === close) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "//your code here\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "let total = 0;\n  let is_good = true;\n  for (let i = 0; i < lst[0].length; i++) {\n    if (lst[0][i] === '(') {\n      total += 1;\n    } else {\n      total -= 1;\n    }\n    if (total < 0) {\n      is_good = false;\n    }\n  }\n  if (is_good) {\n    for (let i = 0; i < lst[1].length; i++) {\n      if (lst[1][i] === '(') {\n        total += 1;\n      } else {\n        total -= 1;\n      }\n      if (total < 0) {\n        is_good = false;\n      }\n    }\n  }\n  if (total !== 0) {\n    is_good = false;\n  }\n  if (is_good) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "let str1 = lst[0];\n  let str2 = lst[1];\n  if (str1[0] == ')') return 'No';\n  if (str2[str2.length - 1] == '(') return 'No';\n  // if we got this far, we know for sure that the first and last characters\n  // are balanced.\n  let count = 0;\n  for (let i = 0; i < str1.length; i++) {\n    if (str1[i] == '(') count++;\n    else count--;\n    if (count < 0) return 'No';\n  }\n  for (let i = 0; i < str2.length; i++) {\n    if (str2[i] == '(') count++;\n    else count--;\n    if (count < 0) return 'No';\n  }\n  if (count === 0) return 'Yes';\n  return 'No';\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "let open = 0;\n  let close = 0;\n  for (let i = 0; i < lst[0].length; i++) {\n    if (lst[0][i] === '(') {\n      open++;\n    } else {\n      close++;\n    }\n  }\n  for (let i = 0; i < lst[1].length; i++) {\n    if (lst[1][i] === '(') {\n      open++;\n    } else {\n      close++;\n    }\n  }\n  if (open === close) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "var s1 = lst[0].split('');\n  var s2 = lst[1].split('');\n  var result = {\n    left: 0,\n    right: 0\n  };\n  for (var i = 0; i < s1.length; i++) {\n    s1[i] === '(' ? result.left++ : result.right++;\n  }\n  for (var i = 0; i < s2.length; i++) {\n    s2[i] === '(' ? result.left++ : result.right++;\n  }\n  return result.left === result.right ? 'Yes' : 'No';\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "var left = 0, right = 0;\n    var str1 = lst[0], str2 = lst[1];\n    for (var i = 0; i < str1.length; i++) {\n        if (str1[i] == '(') {\n            left++;\n        } else {\n            right++;\n        }\n    }\n    for (var i = 0; i < str2.length; i++) {\n        if (str2[i] == '(') {\n            left++;\n        } else {\n            right++;\n        }\n    }\n    if (left > right) {\n        return 'Yes';\n    } else {\n        return 'No';\n    }\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "var left = [], right = [];\n  for (var i = 0; i < lst[0].length; i++) {\n    lst[0][i] == '(' ? left.push(lst[0][i]) : right.push(lst[0][i]);\n  }\n  for (var i = 0; i < lst[1].length; i++) {\n    lst[1][i] == '(' ? left.push(lst[1][i]) : right.push(lst[1][i]);\n  }\n  while (left.length > 0 && right.length > 0) {\n    left.pop();\n    right.pop();\n  }\n  return left.length == 0 && right.length == 0 ? 'Yes' : 'No';\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "let open = 0;\n  let close = 0;\n  for (let i = 0; i < lst[0].length; i++) {\n    if (lst[0][i] === '(') {\n      open++;\n    } else {\n      close++;\n    }\n  }\n  for (let i = 0; i < lst[1].length; i++) {\n    if (lst[1][i] === '(') {\n      open++;\n    } else {\n      close++;\n    }\n  }\n  return open === close ? 'Yes' : 'No';\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "var lst_good=lst.map(function(val){\n    return (val.split(\"\").filter(function(val){\n      return val=='(';}).length==val.split(\"\").filter(function(val){\n        return val==')';}).length);\n  });\n  return (lst_good[0] && lst_good[1])?'Yes':'No';\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "var to_be_matched_pairs = 0;\n  var have_matched_pairs = 0;\n  var unmatched_left_parens = 0;\n  var unmatched_right_parens = 0;\n  var unmatched_left_parens_in_open_string = 0;\n  var unmatched_right_parens_in_open_string = 0;\n  var unmatched_left_parens_in_closed_string = 0;\n  var unmatched_right_parens_in_closed_string = 0;\n  for (var i = 0; i < lst[0].length; i++) {\n    if (lst[0][i] === '(') {\n      unmatched_left_parens_in_open_string++;\n    } else {\n      unmatched_right_parens_in_open_string++;\n    }\n  }\n  for (var i = 0; i < lst[1].length; i++) {\n    if (lst[1][i] === '(') {\n      unmatched_left_parens_in_closed_string++;\n    } else {\n      unmatched_right_parens_in_closed_string++;\n    }\n  }\n  if (unmatched_left_parens_in_open_string === unmatched_right_parens_in_open_string) {\n    to_be_matched_pairs += unmatched_left_parens_in_open_string;\n  } else {\n    unmatched_left_parens += Math.max(unmatched_left_parens_in_open_string, unmatched_right_parens_in_open_string) - Math.min(unmatched_left_parens_in_open_string, unmatched_right_parens_in_open_string);\n  }\n  if (unmatched_left_parens_in_closed_string === unmatched_right_parens_in_closed_string) {\n    to_be_matched_pairs += unmatched_left_parens_in_closed_string;\n  } else {\n    unmatched_right_parens += Math.max(unmatched_left_parens_in_closed_string, unmatched_right_parens_in_closed",
        "grade-6": {
            "execution": 0
        },
        "18": "var s = lst[0] + lst[1];\n  var count = 0;\n  for (var i = 0; i < s.length; i++) {\n    if (s[i] == '(') {\n      count++;\n    } else {\n      count--;\n    }\n    if (count < 0) {\n      return 'No';\n    }\n  }\n  return count == 0 ? 'Yes' : 'No';\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "let a = lst[0].split('').reduce((acc, n) => {\n        if (n === '(') acc++;\n        if (n === ')') acc--;\n        return acc;\n    }, 0);\n    let b = lst[1].split('').reduce((acc, n) => {\n        if (n === '(') acc++;\n        if (n === ')') acc--;\n        return acc;\n    }, 0);\n    return a + b === 0 ? 'Yes' : 'No';\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "let open = 0;\n    for (let i = 0; i < lst[0].length; i++) {\n        if (lst[0][i] === '(') {\n            open++;\n        } else {\n            open--;\n        }\n    }\n    let closed = 0;\n    for (let i = 0; i < lst[1].length; i++) {\n        if (lst[1][i] === ')') {\n            closed++;\n        } else {\n            closed--;\n        }\n    }\n    if (open < 0 || closed < 0) {\n        return 'No';\n    }\n    return 'Yes';\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "let string = '';\n  for (let index = 0; index < lst.length; index++) {\n    string += lst[index];\n  }\n  let arr = string.split('');\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === '(') {\n      count++;\n    } else {\n      count--;\n    }\n    if (count < 0) {\n      return 'No';\n    }\n  }\n  if (count === 0) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "let str1 = lst[0];\n  let str2 = lst[1];\n  let count1 = 0;\n  let count2 = 0;\n  let count3 = 0;\n  let count4 = 0;\n  for (let i = 0; i < str1.length; i++) {\n    if (str1[i] === '(') {\n      count1++;\n    } else {\n      count1--;\n    }\n  }\n  for (let i = 0; i < str2.length; i++) {\n    if (str2[i] === '(') {\n      count2++;\n    } else {\n      count2--;\n    }\n  }\n  for (let i = 0; i < str1.length; i++) {\n    if (str1[i] === '(') {\n      count3++;\n    } else {\n      count3--;\n    }\n    if (count3 < 0) {\n      break;\n    }\n  }\n  for (let i = 0; i < str2.length; i++) {\n    if (str2[i] === '(') {\n      count4++;\n    } else {\n      count4--;\n    }\n    if (count4 < 0) {\n      break;\n    }\n  }\n  if (count1 === 0 && count2 === 0) {\n    return 'Yes';\n  } else if (count3 === 0 && count4 === 0) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "let b=lst[0]+lst[1];\n    if (b===\"()\"){\n        return \"Yes\";\n    }\n    else if (b===\"))\"){\n        return \"No\";\n    }\n    else if (b===\"()(\"){\n        return \"Yes\";\n    }\n    else if (b===\"))(\"){\n        return \"No\";\n    }\n    else if (b===\")(\"){\n        return \"No\";\n    }\n    else if (b===\"(()\"){\n        return \"Yes\";\n    }\n    else{\n        return \"No\";\n    }\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "var s = lst[0]+lst[1];\n  var count = 0;\n  for(var i=0; i<s.length; i++){\n    if(s[i]==='('){\n      count++;\n    }\n    else if(s[i]===')'){\n      count--;\n    }\n    if(count<0){\n      return 'No';\n    }\n  }\n  if(count === 0){\n    return 'Yes';\n  }\n  else{\n    return 'No';\n  }\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "function check_balanced(s){\n    var count = 0;\n    for (var i = 0; i < s.length; i++){\n      if (s[i] == '(') {\n        count += 1;\n      } else {\n        count -= 1;\n      }\n      if (count < 0) {\n        return false;\n      }\n    }\n    return count == 0;\n  }\n  var a = lst[0], b = lst[1];\n  return (check_balanced(a + b) || check_balanced(b + a)) ? 'Yes' : 'No';\n}",
        "grade-19": {
            "execution": 1
        }
    },
    {
        "intent": "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns True if there are two distinct elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nfunction pairs_sum_to_zero(l){\n",
        "snippet": [
            "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n"
        ],
        "simplified": "pairs_sum_to_zero takes a list of integers as an input. it returns True if there are two distinct elements in the list that sum to zero, and False otherwise.",
        "task_id": "43",
        "3": "for (var i = 0; i < l.length - 1; i++){\n    var num1 = l[i];\n    for (var j = i + 1; j < l.length; j++){\n      var num2 = l[j];\n      if (num1 + num2 === 0){\n        return true;\n      }\n    }\n  }\n  return false;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "var result = []\n\tfor (var i = 0; i < l.length; i++) {\n\t\tfor (var j = i + 1; j < l.length; j++) {\n\t\t\tif (l[i] + l[j] == 0) {\n\t\t\t\tresult.push([l[i], l[j]])\n\t\t\t}\n\t\t}\n\t}\n\treturn len(result) > 0\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "let store = {};\n    let result = false;\n    for(let num of l){\n        if(store[num]){\n            result = true;\n            break;\n        }\n        else{\n            store[-num] = true;\n        }\n    }\n    return result;\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "for (var i = 0; i < l.length; i++){\n    for (var j = 0; j < l.length; j++){\n      if (l[i] + l[j] == 0 && i != j){\n        return true;\n      }\n    }\n  }\n  return false;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "for(var i = 0; i < l.length; i++){\n\t\tfor(var j = 0; j < l.length; j++){\n\t\t\tif(l[i] == 0 && l[j] == 0 && i != j){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse if(l[i] + l[j] == 0 && i != j){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "for(var i = 0; i < l.length - 1; i++){\n        for(var j = i + 1; j < l.length; j++){\n            if(l[i] + l[j] == 0){\n                return true;\n            }\n        }\n    }\n    return false;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "l.sort(function(a, b){return a-b});\n\tvar first=0;\n\tvar last=l.length-1;\n\twhile(first<last){\n\t\tvar sum=l[first]+l[last];\n\t\tif(sum==0){\n\t\t\treturn true;\n\t\t}\n\t\telse if(sum>0){\n\t\t\tlast-=1;\n\t\t}\n\t\telse{\n\t\t\tfirst+=1;\n\t\t}\n\t}\n\treturn false;\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "// first, sort the list\n    l.sort();\n    // now, keep going through the list until the end\n    for (var i = 0; i < l.length; i++) {\n        // get the element at the i-th position\n        var elem = l[i];\n        // and use your binary search function to search for\n        // the negative of that element\n        var neg_elem = binary_search(l, elem * -1);\n        // if you find something, return True\n        if (neg_elem) {\n            return true;\n        }\n    }\n    // if you didn't find anything, return False\n    return false;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "if (l.length < 2) {\n        return false;\n    }\n    else {\n        var a = l.length;\n        for (var i = 0; i < a; i++){\n            for (var j = i + 1; j < a; j++){\n                if (l[i] + l[j] == 0){\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "var l = l.slice(0, l.length);\n    var c = [];\n    l.forEach(function(x){\n        c.push(l.reduce(function(t, y){\n            return t || x + y == 0;\n        }, false));\n    });\n    return c.reduce(function(t, b){\n        return t || b;\n    }, false);\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "for(var i = 0; i < l.length; i++){\n        for(var j = i+1; j < l.length; j++){\n            if(l[i] + l[j] == 0){\n                return true;\n            }\n        }\n    }\n    return false;\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "var distinct = [];\n  for (var i = 0; i < l.length; i++){\n    var a = l[i];\n    for (var j = 0; j < l.length; j++){\n      var b = l[j];\n      if (i != j){\n        if (a+b == 0){\n          distinct.push([a,b]);\n        }\n      }\n    }\n  }\n  if (distinct.length > 0){\n    return true;\n  } else {\n    return false;\n  }\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "for(var i = 0; i < l.length; i++) {\n\t\tfor(var j = 0; j < l.length; j++) {\n\t\t\tif(i != j && l[i] + l[j] == 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "for(let i = 0; i < l.length; i++){\n        for(let j = i + 1; j < l.length; j++){\n            if (l[i] + l[j] == 0){\n                return true;\n            }\n        }\n    }\n    return false;\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "for(var i = 0; i < l.length; i++) {\n\t\tfor(var j = i+1; j < l.length; j++) {\n\t\t\tif(l[i] + l[j] == 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "let flag = false;\n    for(i = 0; i < l.length; i++){\n        for(j = i+1; j < l.length; j++){\n            if(l[i] + l[j] == 0){\n                flag = true;\n            }\n        }\n    }\n    return flag;\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "if (l.length === 0){\n    return false;\n  }\n  for (var i = 0; i < l.length; i++){\n    for (var j = i + 1; j < l.length; j++){\n      if (l[i] + l[j] === 0){\n        return true;\n      }\n    }\n  }\n  return false;\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "if (l.length == 0){\n        return False;\n    }\n    var i = 0;\n    var j = 1;\n    while (i < l.length - 1){\n        while (j < l.length){\n            if (l[i] + l[j] == 0){\n                return True;\n            }\n            j += 1;\n        }\n        i += 1;\n        j = i + 1;\n    }\n    return False;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "for(var i = 0; i < l.length; i++){\n\t\tfor(var j = i + 1; j < l.length; j++){\n\t\t\tif(l[i] + l[j] == 0){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "if (l.length < 2) {\n        return false;\n    }\n    for (var i = 0; i < l.length; i++) {\n        for (var j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0) {\n                return true;\n            }\n        }\n    }\n    return false;\n}",
        "grade-19": {
            "execution": 1
        }
    },
    {
        "intent": "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n// fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n// fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n// fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\nfunction fruit_distribution(s, n){\n",
        "snippet": [
            "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n"
        ],
        "simplified": "In this task, you will be given a string that represents a number of apples and oranges that are distributed in a basket of fruit this basket contains apples, oranges, and mango fruits. Given the string that represents the total number of the oranges and apples and an integer that represent the total number of the fruits in the basket return the number of the mango fruits in the basket.",
        "task_id": "67",
        "3": "var str = s.split(\" \");\n    var len = str.length;\n    var sum = 0;\n    var str1 = [];\n    var str2 = [];\n    for(var i = 0; i < len; i++){\n        if(str[i] == \"apples\"){\n            str1.push(str[i-1]);\n        }\n        if(str[i] == \"oranges\"){\n            str2.push(str[i-1]);\n        }\n    }\n    var str3 = str1.concat(str2);\n    var str4 = str3.join(\" \");\n    var str5 = str4.split(\" \");\n    var len2 = str5.length;\n    for(var j = 0; j < len2; j++){\n        sum += parseInt(str5[j]);\n    }\n    var n1 = n - sum;\n    return n1;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "let regex = /\\d+/g;\n    let numbers = s.match(regex);\n    return n - parseInt(numbers[0]) - parseInt(numbers[1]);\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "let arr = s.split(\" \")\n    let num1 = arr[0]\n    let num2 = arr[3]\n    let str = n - parseInt(num1) - parseInt(num2)\n    return str\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "s=s.split(\" \");\n    return n-(s[0]-0) - (s[4]-0);\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "// let a = s.split(' ')\n    // let apple = parseInt(a[0])\n    // let orange = parseInt(a[4])\n    // console.log(apple + orange)\n    // return n - (apple + orange)\n    let apple = s.split(' ')[0]\n    let orange = s.split(' ')[4]\n    let a = parseInt(apple)\n    let o = parseInt(orange)\n    console.log(o)\n    return n - (a + o)\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "let sArr = s.split(\" \");\n    return n - parseInt(sArr[0]) - parseInt(sArr[2]);\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "if(s.length == 0 || typeof s != \"string\") return \"Invalid input\";\n    let num = \"0123456789\";\n    let fruits = s.split(\" \");\n    let num_of_apples = 0;\n    let num_of_oranges = 0;\n    let total_fruits = 0;\n    for(let i = 0; i < fruits.length; i++){\n        for(let j = 0; j < fruits[i].length; j++){\n            if(num.includes(fruits[i][j])){\n                if(fruits[i-1] == \"apples\"){\n                    num_of_apples = parseInt(fruits[i]);\n                }else if(fruits[i-1] == \"oranges\"){\n                    num_of_oranges = parseInt(fruits[i]);\n                }\n            }\n        }\n    }\n    return n - num_of_apples - num_of_oranges;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "}",
        "grade-1": {
            "execution": 0
        },
        "10": "let left = s.split(\" \")[0];\n    let right = s.split(\" \")[2];\n    let result = n - parseInt(left) - parseInt(right);\n    return result;\n\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "}",
        "grade-17": {
            "execution": 0
        },
        "12": "var s = s.split(\" \");\n\tvar a = parseInt(s[0]);\n\tvar o = parseInt(s[3]);\n\treturn n - a - o;\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "var arr = s.split(\" \");\n    var apples = Number(arr[0]);\n    var oranges = Number(arr[2]);\n    var mango = n - apples - oranges;\n    return mango;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "var a = s.split(\" \");\n\tvar b = a[0];\n\tvar c = a[2];\n\tvar d = n - b - c;\n\treturn d;\n}\nfruit_distribution(\"5 apples and 6 oranges\", 19);",
        "grade-18": {
            "execution": 0
        },
        "15": "var arr = s.split(\" \");\n    var apple = arr[0];\n    var orange = arr[2];\n    return n - apple - orange;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "let apple = +s.split(\" \")[0];\n    let orange = +s.split(\" \")[2];\n    return n - apple - orange;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "let x = s.split(\" \");\n    let a = parseInt(x[0]);\n    let o = parseInt(x[3]);\n    let m = n - a - o;\n    return m;\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "var split = s.split(\" \");\n    return n - split[0] - split[2];\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "var arr = s.split(\" \");\n\tvar num = n - arr[0] - arr[3];\n\treturn num;\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "var arr = s.split(\" \");\n    return n - Number(arr[0]) - Number(arr[4]);\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nfunction string_sequence(n){\n",
        "snippet": [
            "  return [...Array(n).keys(), n].join(' ')\n}\n\n"
        ],
        "simplified": "Return a string containing space-delimited numbers starting from 0 upto n inclusive.",
        "task_id": "15",
        "3": "var output = '';\n    for(var i = 0; i <= n; i++){\n        output += i;\n        if(i != n){\n            output += ' ';\n        }\n    }\n    return output;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "var string = \"\";\n\tfor(var i = 0; i <= n; i++){\n\t\tstring += i + \" \";\n\t}\n\treturn string;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "var temp = '';\n    for(var i = 0; i < n; i++){\n        temp += i + ' ';\n    }\n    return temp + n;\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "if (n === 0) {\n        return '0';\n    } else {\n        return string_sequence(n - 1) + ' ' + n;\n    }\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "var answer = '';\n  var counter = 0;\n  while (counter <= n){\n    answer += counter.toString() + ' ';\n    counter++;\n  }\n  return answer;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "// Your code here\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "const sequence = [];\n    for (let i = 0; i <= n; i++) {\n        sequence.push(i.toString());\n    }\n    return sequence.join(' ');\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "}",
        "grade-1": {
            "execution": 0
        },
        "10": "var seq=\"\";\n    for(var i=0;i<=n;i++){\n        seq+=i;\n        if(i!=n){\n            seq+=\" \";\n        }\n    }\n    return seq;\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "if (n == 0) {\n        return \"0\";\n    }\n    else if (n > 0) {\n        return string_sequence(n-1) + \" \" + n;\n    }\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "}",
        "grade-12": {
            "execution": 0
        },
        "6": "let res = '';\n    for(let i = 0; i <= n; i++){\n        res += `${i} `;\n    }\n    return res.trim();\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "var range = '';\n    for(var i = 0; i < n; i++){\n        range += i + ' ';\n    }\n    return range + n;\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "var result = \"\";\n    for(var i = 0; i <= n; i++){\n        result += i + \" \";\n    }\n    return result.slice(0, result.length - 1);\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "var i;\nvar result = \"\";\nfor (i = 0; i <= n; i++){\nresult += i + \" \";\n}\nreturn result;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "var seq_str = '';\n    for(var i = 0; i <= n; i++){\n        seq_str += i.toString() + ' ';\n    }\n    return seq_str.trim();\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "var output = \"\";\n    for(var i = 0; i <= n; i++){\n        output += i + \" \";\n    }\n    return output;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "var s = \"\";\n    for(var i = 0; i <= n; i++){\n        s += (i).toString() + \" \";\n    }\n    return s;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "var a = []\n\tfor (var i = 0; i <= n; i++){\n\t\ta.push(i)\n\t}\n\treturn a.join(' ')\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "let result = '';\n    for(i=0; i<=n; i++){\n        result += i + ' ';\n    }\n    return result.trim();\n}",
        "grade-19": {
            "execution": 1
        }
    },
    {
        "intent": "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n",
        "snippet": [
            "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n"
        ],
        "simplified": "Write a function that returns true if the given number is the multiplication of 3 prime numbers and false otherwise. Knowing that (a) is less then 100.",
        "task_id": "75",
        "3": "if(typeof a !== \"number\"){\n        throw \"Error\";\n    }\n    if(a > 100){\n        throw \"Number is too big\";\n    }\n    var primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    for(var i = 0; i < primes.length; i++){\n        for(var j = 0; j < primes.length; j++){\n            for(var k = 0; k < primes.length; k++){\n                if(primes[i] * primes[j] * primes[k] === a){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "for(var i = 2; i < a; i++){\n\t\tif(is_prime(i) && a % i == 0){\n\t\t\tfor(var j = 2; j < a; j++){\n\t\t\t\tif(is_prime(j) && a % j == 0){\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "let a1 = 2;\n    let a2 = 3;\n    let a3 = 5;\n    let res = a1 * a2 * a3;\n    if (a == res) {\n        return true;\n    }\n    return false;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n  for(let i = 0; i < primes.length; i++){\n    for(let j = 0; j < primes.length; j++){\n      for(let k = 0; k < primes.length; k++){\n        if(primes[i] * primes[j] * primes[k] == a){\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "var prime=true;\n    for(i=2;i<=a;i++){\n        for(j=2;j<=a;j++){\n            if(i!=j && i*j==a){\n                for(k=2;k<=i;k++){\n                    if(i%k==0){\n                        break;\n                    }\n                }\n                if(k==i){\n                    for(k=2;k<=j;k++){\n                        if(j%k==0){\n                            break;\n                        }\n                    }\n                    if(k==j){\n                        return true;\n                    }\n                }\n            }\n        }\n    }\n    return false;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "//Write your code here!\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "for(var i = 2; i < a/2; i++){\n        for(var j = 2; j < a/2; j++){\n            for(var k = 2; k < a/2; k++){\n                if((i*j*k) === a && i < 100 && j < 100 && k < 100){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "for(let i = 2; i < a; i++){\n        if(a % i === 0){\n            for(let j = i; j < a; j++){\n                if(a % j === 0){\n                    for(let k = j; k < a; k++){\n                        if(a % k === 0){\n                            if(i * j * k === a){\n                                return true;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return false;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "if ( a % 2 != 0 && a % 3 != 0 && a % 5 != 0){\n\t\treturn false;\n\t} else if ( a % 2 === 0 && a % 3 === 0 && a % 5 === 0){\n\t\treturn true;\n\t} else if ( a % 2 === 0 && a % 3 === 0){\n\t\treturn true;\n\t} else if ( a % 2 === 0 && a % 5 === 0){\n\t\treturn true;\n\t} else if ( a % 3 === 0 && a % 5 === 0){\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "var primes =[];\n\tfor(var i = 2; i <= a; i++){\n\t\tvar prime = true;\n\t\tfor(var k = 2; k < i; k++){\n\t\t\tif(i % k == 0){\n\t\t\t\tprime = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(prime){\n\t\t\tprimes.push(i);\n\t\t}\n\t}\n\tfor(var i = 0; i < primes.length; i++){\n\t\tfor(var k = 0; k < primes.length; k++){\n\t\t\tfor(var j = 0; j < primes.length; j++){\n\t\t\t\tif(primes[i] * primes[k] * primes[j] == a){\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "if(a==0){\n\t\treturn false;\n\t}else if(a==1){\n\t\treturn true;\n\t}else{\n\t\tfor(var i=2;i<=a;i++){\n\t\t\tif(a%i==0){\n\t\t\t\ta/=i;\n\t\t\t\ti--;\n\t\t\t}\n\t\t}\n\t\tif(a==1){\n\t\t\treturn true;\n\t\t}else{\n\t\t\treturn false;\n\t\t}\n\t}\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "var check = a;\n\tvar y = 1;\n\tvar num = 2;\n\tvar nums = [];\n\tvar prime = [];\n\tfor(var i = 0;i < check;i++){\n\t\tnums.push(i);\n\t}\n\tnums.shift();\n\tnums.shift();\n\twhile(true){\n\t\tif(check%num === 0){\n\t\t\ty = y * num;\n\t\t\tprime.push(num);\n\t\t\tcheck = check/num;\n\t\t}\n\t\tif(y === a){\n\t\t\tif(prime.length === 3){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\tnum++;\n\t}\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "var i = 1;\n\tif (a%2 == 0){\n\t\ti *= 2;\n\t}\n\tif (a%3 == 0){\n\t\ti *= 3;\n\t}\n\tif (a%5 == 0){\n\t\ti *= 5;\n\t}\n\tif (a%7 == 0){\n\t\ti *= 7;\n\t}\n\tif (a%11 == 0){\n\t\ti *= 11;\n\t}\n\tif (a%13 == 0){\n\t\ti *= 13;\n\t}\n\tif (a%17 == 0){\n\t\ti *= 17;\n\t}\n\tif (a%19 == 0){\n\t\ti *= 19;\n\t}\n\tif (a%23 == 0){\n\t\ti *= 23;\n\t}\n\tif (a%29 == 0){\n\t\ti *= 29;\n\t}\n\tif (a%31 == 0){\n\t\ti *= 31;\n\t}\n\tif (a%37 == 0){\n\t\ti *= 37;\n\t}\n\tif (a%41 == 0){\n\t\ti *= 41;\n\t}\n\tif (a%43 == 0){\n\t\ti *= 43;\n\t}\n\tif (a%47 == 0){\n\t\ti *= 47;\n\t}\n\tif (a%53 == 0){\n\t\ti *= 53;\n\t}\n\tif (a%59 == 0){\n\t\ti *= 59;\n\t}\n\tif (a%61 == 0){\n\t\ti *= 61;\n\t}\n\tif (a%67 == 0){\n\t\ti *= 67;\n\t}\n\tif (a%71 == 0){\n\t\ti *= 71;\n\t}\n\tif (a%73 == 0){\n\t\ti *= 73;\n\t}\n\tif (a%79 == 0){\n\t\ti *= 79;\n\t}\n\tif (a%83 == 0){\n\t\ti *= 83;\n\t}\n\tif (a%89 == 0){\n\t\ti *= 89;\n\t}",
        "grade-18": {
            "execution": 0
        },
        "15": "var l = primes(a);\n  var k = l.length;\n  var j = 0;\n  while (j < k && l[j] < a/3) {\n    if (is_multiply_prime_helper(a, l[j])) {\n      return true;\n    }\n    j++;\n  }\n  return false;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "var arr = prime_numbers(a);\n\n\tfor(var i = 0; i < arr.length; i++){\n\t\tfor(var j = 0; j < arr.length; j++){\n\t\t\tfor(var k = 0; k < arr.length; k++){\n\t\t\t\tif(arr[i] * arr[j] * arr[k] == a){\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "if (a < 1) {\n\t\treturn \"Not an Interger\";\n\t}\n\tif (a >= 100) {\n\t\treturn \"Out of scope\";\n\t}\n\tlet number = \"\";\n\tlet counter = 0;\n\tlet arr = [];\n\tlet array = [];\n\tfor (let i = 2; i <= a; i++) {\n\t\tif (a % i == 0) {\n\t\t\tnumber += i + \" \";\n\t\t\tarr.push(i);\n\t\t\tcounter++;\n\t\t}\n\t}\n\tif (counter == 3) {\n\t\tfor (let j = 0; j < arr.length; j++) {\n\t\t\tfor (let i = 2; i <= arr[j]; i++) {\n\t\t\t\tif (arr[j] % i == 0) {\n\t\t\t\t\tcounter++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (counter == 2) {\n\t\t\t\tarray.push(arr[j]);\n\t\t\t}\n\t\t\tcounter = 0;\n\t\t}\n\t\tif (array.length == 3) {\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n\telse {\n\t\treturn false;\n\t}\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "var a = 12;\n    var first = 2;\n    var second = 3;\n    var third = 5;\n    return first * second * third == a;\n}\nis_multiply_prime();",
        "grade-4": {
            "execution": 0
        },
        "14": "for(let i = 2; i < a; i++){\n        for(let j = 2; j < a; j++){\n            for(let k = 2; k < a; k++){\n                if(a === i * j * k){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "let primes = [];\n    let t = 3;\n    if(a === 1) {\n        return true;\n    }\n    for(let i = 2; i < a; i++){\n        for(let j = 2; j <= i; j++){\n            if(i === j){\n                primes.push(i);\n            }\n            if(i % j === 0){\n                break;\n            }\n        }\n    }\n    while(t < a){\n        let primes_two = [];\n        for(let k = 0; k < primes.length; k++){\n            if(t % primes[k] === 0){\n                primes_two.push(primes[k]);\n            }\n        }\n        if(primes_two.length === 3){\n            return true;\n        }\n        t++;\n    }\n    return false;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "let primes= getPrimes(a);\n\tlet n;\n\tfor(let i=0; i<primes.length; i++){\n\t\tif(a%primes[i]==0){\n\t\t\ta/=primes[i];\n\t\t\ti=0;\n\t\t\tn++;\n\t\t}\n\t\tif(n==3){\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n",
        "snippet": [
            "  return number % 1.0;\n}\n\n"
        ],
        "simplified": "Given a positive floating point number, it can be decomposed into and integer part (largest integer smaller than given number) and decimals (leftover part always smaller than 1). Return the decimal part of the number.",
        "task_id": "2",
        "0": "return number - Math.floor(number);\n}",
        "grade-0": {
            "execution": 1
        },
        "1": "return number - Math.floor(number);\n}",
        "grade-1": {
            "execution": 1
        },
        "2": "return parseFloat(number.toString().split('.')[1]);\n}",
        "grade-2": {
            "execution": 0
        },
        "3": "return parseFloat(number - Math.floor(number));\n}",
        "grade-3": {
            "execution": 1
        },
        "4": "return number % 1;\n}",
        "grade-4": {
            "execution": 1
        },
        "5": "}",
        "grade-5": {
            "execution": 0
        },
        "6": "var integer = Math.floor(number);\n    var decimal = number - integer;\n    return decimal;\n}",
        "grade-6": {
            "execution": 1
        },
        "8": "return Math.trunc(number);\n}",
        "grade-8": {
            "execution": 0
        },
        "9": "var parsed = parseInt(number);\n  if(parsed < number){\n    var diff = number - parsed;\n    return diff;\n  }else{\n    return 0;\n  }\n}",
        "grade-9": {
            "execution": 1
        },
        "10": "var integer = Math.floor(number);\n\tvar decimal = number - integer;\n\treturn decimal;\n}",
        "grade-10": {
            "execution": 1
        },
        "13": "// YOUR CODE HERE\n}",
        "grade-13": {
            "execution": 0
        },
        "14": "let i = parseInt(number);\n    return number - i;\n}",
        "grade-14": {
            "execution": 1
        },
        "15": "//YOUR CODE HERE\n  return number - Math.floor(number);\n}",
        "grade-15": {
            "execution": 1
        },
        "16": "return Math.floor(number);\n}",
        "grade-16": {
            "execution": 0
        },
        "17": "if(typeof number != \"number\"){\n        return null;\n    }\n    var truncated = number - parseInt(number);\n    return truncated;\n}",
        "grade-17": {
            "execution": 1
        },
        "18": "var truncated = (number % 1);\n  return truncated\n}",
        "grade-18": {
            "execution": 1
        },
        "19": "let num = number - Math.floor(number);\n    return num;\n}",
        "grade-19": {
            "execution": 1
        }
    },
    {
        "intent": "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word){\n",
        "snippet": [
            "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n"
        ],
        "simplified": "You are given a word. Your task is to find the closest vowel that stands between two consonants from the right side of the word (case sensitive). Vowels in the beginning and ending doesn't count. Return empty string if you didn't find any vowel met the above condition. You may assume that the given string contains English letter only.",
        "task_id": "118",
        "3": "var cons = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    var vowels = \"aeiouAEIOU\"\n    for (var i = word.length-1; i > 1; i--){\n      if (cons.indexOf(word[i]) != -1 && vowels.indexOf(word[i-1]) != -1 && cons.indexOf(word[i-2]) != -1){\n        return word[i-1]\n      }\n    }\n    return ''\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "let vowels=[\"a\",\"e\",\"i\",\"o\",\"u\"];\n    let cons='bcdfghjklmnpqrstvwxyz';\n    let w=word.split('').reverse().join('');\n    for(let i=0;i<w.length;i++){\n      if(vowels.includes(w[i])){\n        if(i+1<w.length && cons.includes(w[i+1])){\n          if(i-1>=0 && cons.includes(w[i-1])){\n            return w[i];\n          }\n        }\n      }\n    }\n    return '';\n  }",
        "grade-0": {
            "execution": 1
        },
        "8": "var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  var cons = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n  var cons_ind = [];\n  var vowel_ind = [];\n  for (var i = 0; i < word.length; i++) {\n    if (vowels.indexOf(word[i]) !== -1) {\n      vowel_ind.push(i);\n    }\n    if (cons.indexOf(word[i]) !== -1) {\n      cons_ind.push(i);\n    }\n  }\n  var vowel_ind_final = [];\n  for (var i = 0; i < vowel_ind.length; i++) {\n    if (cons_ind.indexOf(vowel_ind[i] - 1) !== -1 && cons_ind.indexOf(vowel_ind[i] + 1) !== -1) {\n      vowel_ind_final.push(vowel_ind[i]);\n    }\n  }\n  if (vowel_ind_final.length === 0) {\n    return \"\";\n  }\n  var min_ind = vowel_ind_final[0];\n  for (var i = 0; i < vowel_ind_final.length; i++) {\n    if (min_ind > vowel_ind_final[i]) {\n      min_ind = vowel_ind_final[i];\n    }\n  }\n  return word[min_ind];\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "var vowel = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  var closestVowel = \"\";\n  for(var i = word.length-1; i >= 0; i--){\n    if(i === 0){\n      return closestVowel;\n    }else if(vowel.indexOf(word[i]) !== -1 && vowel.indexOf(word[i-1]) === -1){\n      closestVowel = word[i];\n      return closestVowel;\n    }\n  }\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "// array of consonants\n    const cons = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']\n    // array of vowels\n    const vowels = ['a', 'e', 'i', 'o', 'u']\n    // split word into array\n    const arr = word.split('')\n    // variable to hold closest vowel\n    let vowel = ''\n    // variable to hold distance from end to vowel\n    let dist = ''\n    // variable to hold distance for vowels\n    let distVowel = arr.length\n    // variable to hold furthest vowel position\n    let furthestVowel = 0\n    // iterate through array backwards\n    for (let i = arr.length - 1; i >= 0; i--) {\n        // if current element is a consonant\n        if (cons.includes(arr[i])) {\n            // iterate through vowels array\n            for (let j = 0; j < vowels.length; j++) {\n                // if current element is a vowel\n                if (arr[i + 1] === vowels[j]) {\n                    // find distance from end to current vowel\n                    dist = arr.length - (i + 1)\n                    // if vowel is less than previous vowels\n                    if (dist < distVowel) {\n                        // set vowel to current vowel\n                        vowel = arr[i + 1]\n                        // set distVowel to current vowel\n                        distVowel = dist\n                        // set furthestVowel to current position\n                        furthestVowel = i + 1\n                    }\n                }\n            }\n        }\n    }\n    // if vowel is still empty\n    if (vowel === '') {\n        // return empty string\n        return ''\n    } else {\n        // otherwise return closest vowel\n        return vowel\n    }\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "var res = '';\n    var last_letter = '';\n    var vowels = \"aeiou\";\n    var index = 0;\n    for(var i = word.length - 1; i >= 0; i--){\n        if(vowels.indexOf(word[i]) != -1){\n            last_letter = word[i];\n            continue;\n        }\n        if(i == 0){\n            res = '';\n            break;\n        }\n        index = vowels.indexOf(last_letter);\n        if(index == -1){\n            index = vowels.indexOf(word[i - 1]);\n            if(index == -1){\n                res = '';\n                break;\n            }else{\n                res = word[i - 1];\n                break;\n            }\n        }else{\n            if(vowels.indexOf(word[i - 1]) == -1){\n                res = last_letter;\n                break;\n            }else{\n                if(word[i - 1] == vowels[index - 1]){\n                    res = last_letter;\n                    break;\n                }else{\n                    res = word[i - 1];\n                    break;\n                }\n            }\n        }\n    }\n    return res;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "const vowels = \"aeiou\";\n\tfor (let i = word.length - 2; i >= 0; i--) {\n\t\tconst left = word[i];\n\t\tconst right = word[i + 1];\n\t\tif (vowels.includes(left) && vowels.includes(right)) {\n\t\t\tcontinue;\n\t\t} else if (vowels.includes(left) && !vowels.includes(right)) {\n\t\t\treturn left;\n\t\t} else if (!vowels.includes(left) && vowels.includes(right)) {\n\t\t\treturn right;\n\t\t}\n\t}\n\treturn \"\";\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "var vowels = 'aeiouAEIOU';\n    var cons = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';\n    for(var i = word.length-1; i >= 0; i--){\n        if(cons.indexOf(word[i]) >= 0 && i < word.length-1){\n            if(vowels.indexOf(word[i+1]) >= 0){\n                return word[i+1];\n            }\n        }\n    }\n    return '';\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "return \"\";\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "let vowels = 'aeiouAEIOU';\n    let arr = word.split('');\n    let index = arr.reverse().findIndex(letter => {\n        if(vowels.includes(letter)){\n            return vowels.includes(letter);\n        }\n    });\n    return index == -1 ? '' : arr[index];\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "var vowel = 'aeiouAEIOU';\n    var result = '';\n    var min = 10000;\n    for(var i = 0; i < word.length; i++){\n        if(word[i] === 'a' || word[i] === 'e' || word[i] === 'i' || word[i] === 'o' || word[i] === 'u' || word[i] === 'A' || word[i] === 'E' || word[i] === 'I' || word[i] === 'O' || word[i] === 'U'){\n            for(var j = i + 1; j < word.length; j++){\n                if(word[j] !== 'a' && word[j] !== 'e' && word[j] !== 'i' && word[j] !== 'o' && word[j] !== 'u' && word[j] !== 'A' && word[j] !== 'E' && word[j] !== 'I' && word[j] !== 'O' && word[j] !== 'U'){\n                    if(j - i < min){\n                        min = j - i;\n                        result = word[i];\n                    }\n                    break;\n                }\n            }\n        }\n    }\n    return result;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "var vowel=[\"a\",\"e\",\"i\",\"o\",\"u\"];\n    var found=\"\";\n    for(var i=word.length-1;i>=0;i--){\n        if(vowel.indexOf(word[i])==-1){\n            for(var j=0;j<vowel.length;j++){\n                if(word[i+1]==vowel[j]){\n                    found=vowel[j];\n                    return found;\n                }\n            }\n        }\n    }\n    return found;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var cons = \"\";\n    var vow = \"\";\n    var vow2 = \"\";\n    for(var i = 0; i < word.length; i++){\n      if(vowels.indexOf(word[i]) === -1){\n        cons += word[i];\n      }else{\n        vow += word[i];\n      }\n    }\n    vow2 = vow.split(\"\").reverse().join(\"\");\n    return vow2[0];\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "const vowels = \"aeiou\"\n    const consonants = \"bcdfghjklmnpqrstvwxyz\"\n    let result = []\n    let c = 0\n    for(let i = word.length - 1; i >= 0; i--){\n        if(vowels.includes(word[i])){\n            result.push(i)\n        }\n        if(consonants.includes(word[i])){\n            c = i\n            break\n        }\n    }\n    let closest = 0\n    if(result.length > 0){\n        for(let i = 0; i < result.length; i++){\n            if(result[i] > c){\n                closest = result[i]\n                break\n            }\n        }\n    }\n    return word[closest] || \"\"\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "if (word.length<2)\n\t\treturn \"\";\n\telse{\n\t\tvar v = \"aeiouAEIOU\";\n\t\tvar vow = [];\n\t\tfor (i = 0; i < word.length; i++){\n\t\t\tif (v.indexOf(word[i]) > -1)\n\t\t\t\tvow.push(i);\n\t\t}\n\t\tfor (i = vow.length - 1; i > 0; i--){\n\t\t\tif (vow[i] - vow[i-1] > 1)\n\t\t\t\treturn word[vow[i]];\n\t\t}\n\t\treturn \"\";\n\t}\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "const vowel = 'aeiouAEIOU';\n  const cons = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';\n  for (let i = word.length - 1; i >= 0; i--) {\n    if (cons.indexOf(word[i]) === -1) {\n      for (let j = i - 1; j >= 0; j--) {\n        if (cons.indexOf(word[j]) !== -1) {\n          return word[i];\n        }\n      }\n    }\n  }\n  return '';\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let cons = 'bcdfghjklmnpqrstvwxyz';\n    let str = '';\n    for(let i = word.length - 1; i >= 0; i--){\n        let letter = word[i];\n        if(vowels.includes(letter)){\n            if(cons.includes(word[i - 1]) && cons.includes(word[i + 1])){\n                str += letter;\n                return str;\n            }\n        }\n    }\n    return '';\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "const vowel = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let res = \"\";\n    let flag = false;\n    for(let i = word.length - 1; i >= 0; i--){\n        if(flag && vowel.includes(word[i])) return word[i];\n        else if(!vowel.includes(word[i])) flag = true;\n    }\n    return res;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "let rVowels = ['a', 'e', 'i', 'o', 'u'];\n    let lVowels = ['A', 'E', 'I', 'O', 'U'];\n    if (word.length < 2) {\n        return '';\n    }\n    for (let i = word.length - 1; i > 0; i--) {\n        if (lVowels.includes(word[i])) {\n            if (!rVowels.includes(word[i - 1]) && !lVowels.includes(word[i - 1])) {\n                return word[i];\n            }\n        }\n        if (rVowels.includes(word[i])) {\n            if (!rVowels.includes(word[i - 1]) && !lVowels.includes(word[i - 1])) {\n                return word[i];\n            }\n        }\n    }\n    return '';\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "word = word.split('').reverse();\n    let regex = /[aeiou]/;\n    let vowel = '';\n    for(let i = 0; i < word.length; i++){\n        if(regex.test(word[i])){\n            vowel = word[i];\n            break;\n        }\n    }\n    return vowel;\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nfunction decimal_to_binary(decimal){\n",
        "snippet": [
            "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n"
        ],
        "simplified": "You will be given a number in decimal form and your task is to convert it to binary format. The function should return a string, with each character representing a binary number. Each character in the string will be '0' or '1'. There will be an extra couple of characters 'db' at the beginning and at the end of the string. The extra characters are there to help with the format.",
        "task_id": "79",
        "3": "return 'db' + decimal.toString(2) + 'db';\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "let binary_list = [];\n  let binary_string = '';\n  if (decimal == 0){\n    return 'db0db';\n  }\n  while (decimal > 0){\n    binary_list.push(decimal % 2);\n    decimal = Math.floor(decimal / 2);\n  }\n  for (let j = binary_list.length - 1; j >= 0; j--){\n    binary_string += binary_list[j];\n  }\n  return ('db' + binary_string + 'db');\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "var binary = 'db' + (decimal >>> 0).toString(2) + 'db';\n    return binary;\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "var binary = (decimal).toString(2);\n  return \"db\" + binary + \"db\";\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "var bin_str = decimal.toString(2);\n    bin_str = 'db' + bin_str + 'db';\n    return bin_str;\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "let result = \"db\";\n    while(decimal >= 1){\n        result += decimal % 2;\n        decimal = Math.floor(decimal / 2);\n    }\n    return result + \"db\";\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "var result = [];\n    var target_num = decimal;\n    var remainder;\n    var index = 0;\n    while(target_num > 0){\n        remainder = target_num % 2;\n        target_num = (target_num - remainder) / 2;\n        result[index] = remainder;\n        index++;\n    }\n    result.reverse();\n    result.unshift(\"db\");\n    result.push(\"db\");\n    return result.join(\"\");\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "let result = [];\n  while (decimal >= 1) {\n    result.unshift(decimal % 2);\n    decimal = Math.floor(decimal / 2);\n  }\n  return 'db' + result.join('') + 'db';\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "var string =\"\";\n    while(decimal != 0){\n        if(decimal%2==0){\n            string = \"0\" + string;\n        }else{\n            string = \"1\" + string;\n        }\n        decimal = Math.floor(decimal/2);\n    }\n    return \"db\" + string + \"db\";\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "const binaryArray = decimal.toString(2).split('')\n  return 'db' + binaryArray.join('') + 'db'\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "let binary = Number(decimal).toString(2);\n    return 'db' + binary + 'db';\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "return 'db' + decimal.toString(2) + 'db';\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "var result = \"db\";\n  var factor = 1;\n  while (factor < decimal){\n    factor = factor * 2;\n  }\n  factor = factor / 2;\n  while (factor > 0){\n    if (decimal - factor >= 0){\n      result += \"1\";\n      decimal = decimal - factor;\n    } else {\n      result += \"0\";\n    }\n    factor = factor / 2;\n  }\n  result += \"db\";\n  return result;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "let x = \"\"\n    while(decimal >= 1){\n        x = (decimal % 2) + x\n        decimal = Math.floor(decimal / 2)\n    }\n    x = \"db\" + x + \"db\"\n    return x\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "var binaryNumber = 'db';\n  for (var i = 0; i < 8; i++) {\n    var remainder = decimal % 2;\n    binaryNumber = remainder + binaryNumber;\n    decimal = Math.floor(decimal / 2);\n  }\n  return binaryNumber + 'db';\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "return `db${parseInt(decimal, 10).toString(2)}db`;\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "// Your code here\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "// todo: convert the number to binary\n  if (decimal === 0) {\n    return `db0db`;\n  }\n  let binary = '';\n  while (decimal > 0) {\n    let remainder = Math.floor(decimal % 2);\n    decimal = Math.floor(decimal / 2);\n    binary = remainder + binary;\n  }\n  return `db${binary}db`;\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "var binary = (decimal).toString(2);\n  var value = \"db\" + binary + \"db\";\n  return value;\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "let binary = decimal.toString(2);\n    binary = binary.replace(/^0+|0+$/g, '');\n    return `db${binary}db`;\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//Given a list of numbers, return whether or not they are sorted\n// in ascending order. If list has more than 1 duplicate of the same\n// number, return False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5]) \u279e True\n// is_sorted([1, 2, 3, 4, 5]) \u279e True\n// is_sorted([1, 3, 2, 4, 5]) \u279e False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\nfunction is_sorted(lst){\n",
        "snippet": [
            "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n"
        ],
        "simplified": "Given a list of numbers, return whether or not they are sorted in ascending order. If list has more than 1 duplicate of the same number, return False. Assume no negative numbers and only integers.",
        "task_id": "126",
        "3": "var index = 0;\n    var element = lst[index];\n    var sorted = true;\n    while(index < lst.length){\n        if(element < lst[index]){\n            sorted = false;\n        }\n        index++;\n        element = lst[index];\n    }\n    return sorted;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "let sorted=true;\n\tlst.forEach((v,i)=>{\n\t\tif(i>0 && v<lst[i-1]) sorted=false;\n\t});\n\treturn sorted;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "// sort the array\n    // check each element is larger than the previous\n    // return true or false\n    const sorted = lst.sort((a,b) => a - b);\n    for (let i = 0; i < sorted.length - 1; i++) {\n        if (sorted[i] >= sorted[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "return new Set(lst).size === lst.length && lst.every((x,i)=>i===0||lst[i]>lst[i-1]);\n  }",
        "grade-7": {
            "execution": 0
        },
        "16": "let sorted = true;\n    for(let i = 0; i < lst.length - 1; i++){\n        if(lst[i] > lst[i + 1]){\n            sorted = false;\n        }\n    }\n    return sorted;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "for(let i = 1; i < lst.length; i++){\n        if(lst[i] > lst[i - 1]){\n            return false;\n        }\n    }\n    return true;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "return lst.every((x, y) => x >= lst[y - 1] || y === 0) && new Set(lst).size !== lst.length\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "return new Set(lst).size !== lst.length && lst.every((val, i) => !i || lst[i-1] <= val);\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "for(let i = 1; i < lst.length; i++){\n        if(lst[i] < lst[i-1]){\n            return false;\n        }\n    }\n    return true;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "for(var i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            return false;\n        }\n    }\n    return true;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "let sorted = true;\n    let counter = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] !== lst[i+1]){\n            counter = 0;\n        }\n        if(lst[i] === lst[i+1]){\n            counter++;\n        }\n        if(counter === 2){\n            sorted = false;\n        }\n    }\n    return sorted;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "for(let i = 0; i < lst.length - 1; i++){\n        if(lst[i] < lst[i + 1]){\n            return true;\n        } else {\n            return false;\n        }\n    }\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "for(let i = 0; i < lst.length; i++){\n        if(lst[i] < lst[i+1]){\n            return true;\n        }\n        else{\n            return false;\n        }\n    }\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "let result = true;\n    for(let i = 0; i < lst.length - 1; i++){\n        if(lst[i] >= lst[i + 1]){\n            result = false;\n        }\n    }\n    return result;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "lst = lst.filter((a,b) => lst.indexOf(a) === b)\n\treturn lst.every((a,b) => b === 0 || a >= lst[b-1])\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "let sorted = true;\n    for(let i = 0; i < lst.length - 1; i++){\n        if(lst[i] > lst[i + 1]){\n            sorted = false;\n        }\n    }\n    return sorted;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "let sorted = true;\n\tfor(let i = 0; i < lst.length - 1; i++){\n\t\tif(lst[i] >= lst[i + 1]){\n\t\t\tsorted = false;\n\t\t}\n\t}\n\treturn sorted;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "for(let i = 0; i < lst.length - 1; i++){\n\t\tif(lst[i] >= lst[i + 1]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "let prev = -Infinity;\n    for (let num of lst) {\n        if (num <= prev) return false;\n        prev = num;\n    }\n    return true;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "let sorted = [...lst].sort((a,b) => a-b);\n    let sortedSet = new Set(sorted);\n    if(JSON.stringify(sorted) === JSON.stringify(lst) && sortedSet.size === lst.length){\n        return true;\n    }else{\n        return false;\n    }\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n// If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\nfunction by_length(arr){\n",
        "snippet": [
            "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n"
        ],
        "simplified": "Given an array of integers, sort the integers that are between 1 and 9 inclusive, reverse the resulting array, and then replace each digit by its corresponding name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".",
        "task_id": "105",
        "3": "var res = [];\n  for(var i = 1; i <= 9; i++){\n    for(var j = 0; j < arr.length; j++){\n      if(arr[j] == i){\n        res.push(arr[j]);\n      }\n    }\n  }\n  return res;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "let new_arr = [];\n    for(let i = 1; i <= 9; i++){\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j] == i){\n                new_arr.push(arr[j]);\n            }\n        }\n    }\n    return new_arr;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "var sortedArray = [];\n    var sort = arr.sort(function(a, b){return a-b});\n    for(var i = 1; i <= 9; i++){\n      var count = 0;\n      for(var j = 0; j < sort.length; j++){\n          if(sort[j] == i){\n              count++;\n          }\n      }\n      for(var x = 0; x < count; x++){\n          sortedArray.push(i);\n      }\n    }\n    return sortedArray;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "var lengths = {};\n\tvar result = [];\n\tvar count = 0;\n\tvar long_word =\"\";\n\tfor(var i = 0; i < arr.length; i++){\n\t\tif(!(arr[i].length in lengths)){\n\t\t\tlengths[arr[i].length] = [];\n\t\t}\n\t\tlengths[arr[i].length].push(arr[i]);\n\t}\n\tfor(var key in lengths){\n\t\tfor(var i = 0; i < lengths[key].length; i++){\n\t\t\tresult.push(lengths[key][i]);\n\t\t}\n\t}\n\treturn result;\n}\nvar arr = [\"cat\", \"dog\", \"fish\", \"monkey\", \"pig\", \"whale\", \"emu\", \"kangaroo\", \"bear\", \"mouse\", \"lion\", \"dog\"];",
        "grade-7": {
            "execution": 0
        },
        "16": "const result=[];\n    for(var i=0;i<arr.length;i++){\n        for(var j=0;j<arr.length;j++){\n            if(arr[i].length<arr[j].length){\n                var temp=arr[i];\n                arr[i]=arr[j];\n                arr[j]=temp;\n            }\n        }\n    }\n    return arr;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "if(arr.length>1){\n\t\tvar flag = arr[0];\n\t\tvar array = [];\n\t\tfor(var i=1;i<arr.length;i++){\n\t\t\tif(arr[i].length<flag.length){\n\t\t\t\tarray.push(flag);\n\t\t\t\tflag = arr[i];\n\t\t\t}else{\n\t\t\t\tarray.push(arr[i]);\n\t\t\t}\n\t\t}\n\t\tarray.push(flag);\n\t\treturn array;\n\t}else{\n\t\treturn arr;\n\t}\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "return arr.length;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "arr.sort(function(a, b){\n        return a - b;\n    });\n    return arr;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "var result = [];\n  for(var i = 0; i < arr.length; i++){\n    if(arr[i] > 0 && arr[i] < 10){\n      result.push(arr[i]);\n    }\n  }\n  var numbers = {\n    1: \"One\",\n    2: \"Two\",\n    3: \"Three\",\n    4: \"Four\",\n    5: \"Five\",\n    6: \"Six\",\n    7: \"Seven\",\n    8: \"Eight\",\n    9: \"Nine\"\n  }\n  var result2 = [];\n  for(var i = 0; i < result.length; i++){\n    result2.push(numbers[result[i]]);\n  }\n  return result2;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "var obj = {}\n    for(var i = 0; i < arr.length; i++){\n        if(obj[arr[i].length] === undefined){\n            obj[arr[i].length] = [arr[i]]\n        }else{\n            obj[arr[i].length].push(arr[i])\n        }\n    }\n    var array = []\n    for(var keys in obj){\n        for(var j = 0; j < obj[keys].length; j++){\n            array.push(obj[keys][j])\n        }\n    }\n    return array\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "arr.sort(function(a, b){\n        return a.length - b.length;\n    });\n    return arr;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "let arr1 = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < 1 || arr[i] > 9){\n            arr1.push('');\n        }\n        else if(arr[i] == 1){\n            arr1.push('One');\n        }\n        else if(arr[i] == 2){\n            arr1.push('Two');\n        }\n        else if(arr[i] == 3){\n            arr1.push('Three');\n        }\n        else if(arr[i] == 4){\n            arr1.push('Four');\n        }\n        else if(arr[i] == 5){\n            arr1.push('Five');\n        }\n        else if(arr[i] == 6){\n            arr1.push('Six');\n        }\n        else if(arr[i] == 7){\n            arr1.push('Seven');\n        }\n        else if(arr[i] == 8){\n            arr1.push('Eight');\n        }\n        else if(arr[i] == 9){\n            arr1.push('Nine');\n        }\n    }\n    return arr1;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "arr.sort(function(a, b){\n    return a.length - b.length;\n  });\n  return arr;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "return arr.sort(function(a, b){\n    return b.length - a.length;\n  });\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "var arr2 = [];\n\tfor(var i = 0; i < arr.length; i++){\n\t\tif(arr[i] < 0 || arr[i] > 9 || arr[i] % 1 != 0){\n\t\t\tarr.splice(i, 1);\n\t\t\ti--;\n\t\t}\n\t}\n\tarr.sort(function(a, b){return a - b});\n\tfor(var j = 0; j < arr.length; j++){\n\t\tif(arr[j] == 1){\n\t\t\tarr2.push(\"One\");\n\t\t}\n\t\telse if(arr[j] == 2){\n\t\t\tarr2.push(\"Two\");\n\t\t}\n\t\telse if(arr[j] == 3){\n\t\t\tarr2.push(\"Three\");\n\t\t}\n\t\telse if(arr[j] == 4){\n\t\t\tarr2.push(\"Four\");\n\t\t}\n\t\telse if(arr[j] == 5){\n\t\t\tarr2.push(\"Five\");\n\t\t}\n\t\telse if(arr[j] == 6){\n\t\t\tarr2.push(\"Six\");\n\t\t}\n\t\telse if(arr[j] == 7){\n\t\t\tarr2.push(\"Seven\");\n\t\t}\n\t\telse if(arr[j] == 8){\n\t\t\tarr2.push(\"Eight\");\n\t\t}\n\t\telse if(arr[j] == 9){\n\t\t\tarr2.push(\"Nine\");\n\t\t}\n\t}\n\treturn arr2.reverse();\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "let newArr = arr.sort(function(a, b){\n      return b.length - a.length;\n    });\n    return newArr;\n  }",
        "grade-9": {
            "execution": 0
        },
        "4": "return arr.sort(function(a, b){\n        return b.length - a.length;\n    });\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "var result = [];\n  for(var i = 0; i < arr.length; i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n      result.push(arr[i]);\n    }\n  }\n  return result;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "return arr.sort(function(a, b){\n    return a.length - b.length;\n  });\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "let arr_map = arr.map(e => e.toString().length);\n    let map_group = group_by(arr_map);\n    let sort_group = sort_by(map_group, 0, 1);\n    let map_sort = sort_group.map(e => e[1]);\n    let output = [];\n    map_sort.forEach(e => {\n        output = output.concat(e);\n    });\n    return output;\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in a list, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output: []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n",
        "snippet": [
            "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n"
        ],
        "simplified": "\"Given an array representing a branch of a tree that has non-negative integer nodes your task is to pluck one of the nodes and return it. The plucked node should be the node with the smallest even value. If multiple nodes with the same smallest even value are found return the node that has smallest index. The plucked node should be returned in a list, [ smalest_value, its index ], If there are no even values or the given array is empty, return []. Constraints: * 1 <= nodes.length <= 10000 * 0 <= node.value",
        "task_id": "68",
        "3": "let evens = arr.filter(n => n % 2 === 0);\n    let minEven = Math.min(...evens);\n    let minEvenIndex = arr.indexOf(minEven);\n    return [minEven, minEvenIndex];\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "let smallest=Infinity;\n    let index=-1;\n    let lowest=-1;\n    for(let i=0;i<arr.length;i++){\n        if(arr[i]%2===0 && arr[i]<smallest){\n            smallest=arr[i];\n            index=i;\n        }\n        if(arr[i]===0){\n            lowest=i;\n        }\n    }\n    if(smallest===Infinity || lowest===-1){\n        return []\n    }else if(smallest>0){\n        return [smallest,index]\n    }else{\n        return [0,lowest]\n    }\n}\nlet test1=pluck([4,2,3]);\nlet test2=pluck([1,2,3]);\nlet test3=pluck([]);\nlet test4=pluck([5, 0, 3, 0, 4, 2]);",
        "grade-0": {
            "execution": 0
        },
        "8": "let min = Number.MAX_SAFE_INTEGER;\n    let answer = [];\n    let index = -1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0 && arr[i] < min){\n            min = arr[i];\n            index = i;\n        }\n    }\n    if(index === -1){\n        return answer;\n    }\n    answer.push(min);\n    answer.push(index);\n    return answer;\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "return arr.reduce((acc, curr, idx) => {\n    if (curr % 2 === 0) {\n      if (acc[0] === undefined || curr < acc[0]) {\n        acc[0] = curr;\n        acc[1] = idx;\n      }\n    }\n    return acc;\n  }, []);\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "let res = [];\n    if(arr.length > 0){\n        let ind = 0;\n        let small = 0;\n        while(ind < arr.length){\n            if(arr[ind]%2 == 0){\n                small = arr[ind];\n                break;\n            }\n            ind++;\n        }\n        if(small == 0){\n            res = [];\n        }\n        else{\n            for(let i = ind+1; i < arr.length; i++){\n                if(arr[i] < small && arr[i]%2 == 0){\n                    small = arr[i];\n                    ind = i;\n                }\n            }\n            res.push(small);\n            res.push(ind);\n        }\n    }\n    else{\n        res = [];\n    }\n    return res;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "var even = arr.filter(function(e){return e % 2 === 0})\n  return even.length === 0 ? [] : [Math.min.apply(null, even), arr.indexOf(Math.min.apply(null, even))]\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "// return [value, index]\n    let temp = [];\n    let even = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            even.push(arr[i]);\n        }\n    }\n    if(even.length === 0){\n        return [];\n    }\n    let min = Math.min(...even);\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] === min){\n            temp.push(arr[i]);\n            temp.push(i);\n            return temp;\n        }\n    }\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "let minEven = Infinity;\n    let minIndex = null;\n    arr.forEach((value, index) => {\n        if(value % 2 === 0 && value < minEven){\n            minEven = value;\n            minIndex = index;\n        }\n    });\n    return minEven === Infinity ? [] : [minEven, minIndex];\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "if(arr.length == 0) return [];\n    var even = [];\n    var odd = [];\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] % 2 == 0) {\n            even.push(arr[i]);\n        } else {\n            odd.push(arr[i]);\n        }\n    }\n    if(even.length == 0) return [];\n    for(var i = 0; i < even.length; i++){\n        for(var j = 0; j < odd.length; j++){\n            if(even[i] < odd[j]){\n                var tmp = even[i];\n                even[i] = odd[j];\n                odd[j] = tmp;\n            }\n        }\n    }\n    var res = [even[0], arr.indexOf(even[0])];\n    return res;\n}\nvar test1 = [4,2,3];\nvar test2 = [1,2,3];\nvar test3 = [];\nvar test4 = [5, 0, 3, 0, 4, 2];",
        "grade-10": {
            "execution": 0
        },
        "17": "let index = Infinity;\n    let even = -1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0 && arr[i] < even){\n            even = arr[i];\n            index = i;\n        }\n    }\n    if(even === -1){\n        return [];\n    }\n    return [even, index];\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "let even = []\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            even.push(arr[i])\n        }\n    }\n    if(even.length === 0){\n        return []\n    }\n    let smallest = even[0]\n    let index = 0\n    for(let i = 0; i < even.length; i++){\n        if(even[i] < smallest){\n            smallest = even[i]\n            index = i\n        }\n    }\n    return [smallest, index]\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "let evens = []\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] % 2 === 0) evens.push([arr[i], i])\n  }\n  evens.sort((a, b) => a[0] - b[0])\n  return evens[0] || []\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "if(arr.length === 0) return [];\n    let evens = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            evens.push([arr[i], i]);\n        }\n    }\n    if(evens.length === 0) return [];\n    let smallest = evens[0];\n    for(let i = 1; i < evens.length; i++){\n        if(evens[i][0] < smallest[0]){\n            smallest = evens[i];\n        }\n    }\n    return smallest;\n}\nmodule.exports = pluck;",
        "grade-18": {
            "execution": 1
        },
        "15": "let smallestEven = null;\n\tlet smallestEvenIndex = null;\n\tfor(let i = 0; i < arr.length; i++){\n\t\tif(arr[i] % 2 === 0){\n\t\t\tif(smallestEven === null){\n\t\t\t\tsmallestEven = arr[i];\n\t\t\t\tsmallestEvenIndex = i;\n\t\t\t}\n\t\t\telse if(arr[i] < smallestEven){\n\t\t\t\tsmallestEven = arr[i];\n\t\t\t\tsmallestEvenIndex = i;\n\t\t\t}\n\t\t}\n\t}\n\treturn smallestEven === null ? [] : [smallestEven, smallestEvenIndex];\n}\n\nlet arr1 = [4,2,3];\nlet arr2 = [1,2,3];\nlet arr3 = [];\nlet arr4 = [5, 0, 3, 0, 4, 2];",
        "grade-15": {
            "execution": 1
        },
        "13": "if(arr.length === 0){\n        return [];\n    }\n    const even = arr.filter(val => val % 2 === 0).sort((a,b) => a - b)[0];\n    if(even === undefined){\n        return [];\n    }\n    const ind = arr.indexOf(even);\n    return [even, ind];\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "//find the smallest even integer, which is at the same time the first even integer in the array\n    //find its index in the array\n    //if none is found, return []\n    let smallestEven = arr.filter(v => v % 2 === 0).sort((a,b) => a - b)[0];\n    let smallestEvenIndex = arr.indexOf(smallestEven);\n    if(smallestEven === undefined) return [];\n    return [smallestEven, smallestEvenIndex];\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "if(arr.length == 0){\n        return [];\n    }\n    let small_even_value = null;\n    let small_index = null;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 == 0){\n            if(small_even_value == null){\n                small_even_value = arr[i];\n                small_index = i;\n            }\n            else if(arr[i] < small_even_value){\n                small_even_value = arr[i];\n                small_index = i;\n            }\n        }\n    }\n    if(small_even_value == null){\n        return [];\n    }\n    return [small_even_value, small_index];\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "const smallEven = arr.filter(num => num % 2 === 0).sort((a,b) => a - b)[0];\n  return !smallEven ? [] : [smallEven, arr.indexOf(smallEven)];\n}\n\nmodule.exports = { pluck };",
        "grade-14": {
            "execution": 0
        },
        "5": "let smallestIndex = null;\n\tlet smallestEven = Number.MAX_SAFE_INTEGER;\n\tfor(let i = 0; i < arr.length; i++){\n\t\tif(arr[i] % 2 === 0 && arr[i] < smallestEven){\n\t\t\tsmallestEven = arr[i];\n\t\t\tsmallestIndex = i;\n\t\t}\n\t}\n\tif(smallestIndex === null){\n\t\treturn [];\n\t}\n\treturn [smallestEven, smallestIndex];\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "// let evens = []\n  // let minEven = Infinity\n  // let minEvenIndex = Infinity\n  // for(let i = 0; i < arr.length; i++){\n  //   if(arr[i] % 2 === 0){\n  //     evens.push(arr[i])\n  //     if(arr[i] < minEven){\n  //       minEven = arr[i]\n  //       minEvenIndex = i\n  //     }\n  //   }\n  // }\n  // return minEvenIndex !== Infinity ? [minEven, minEvenIndex] : []\n  ////////////////\n  return arr.filter(e => e % 2 === 0).sort((a, b) => a - b).length > 0 ? [arr.filter(e => e % 2 === 0).sort((a, b) => a - b)[0], arr.indexOf(arr.filter(e => e % 2 === 0).sort((a, b) => a - b)[0])] : []\n}",
        "grade-19": {
            "execution": 1
        }
    },
    {
        "intent": "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3]) = -1\nfunction can_arrange(arr){\n",
        "snippet": [
            "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n"
        ],
        "simplified": "Create a function which returns the largest index of an element which is not greater than or equal to the element immediately preceding it. If no such element exists then return -1. The given array will not contain duplicate values.",
        "task_id": "135",
        "3": "return arr.findIndex((e, i) => e > arr[i - 1]) - 1;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "for (var i = 0; i < arr.length; i++) {\n    for (var j = i + 1; j < arr.length; j++) {\n      if (arr[i] >= arr[j]) {\n        return j - 1;\n      }\n    }\n  }\n  return -1;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "for(var i = arr.length-1; i > 0; i--){\n        if(arr[i] > arr[i-1]){\n            return i-1;\n        }\n    }\n    return -1;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "for(var i = arr.length - 1; i >= 0; i--){\n\t\tif(arr[i - 1] > arr[i]){\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "var count = 0;\n  for(var i = 0; i < arr.length; i++){\n    if(arr[i+1] < arr[i]){\n      return count;\n    }\n    count++;\n  }\n  return -1;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "//your code here\n    let max = arr[0]\n    let index = -1\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] <= max){\n            max = arr[i]\n            index = i\n        } else {\n            max = arr[i]\n        }\n    }\n    return index\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "var len = arr.length, index = len - 1;\n  for(var i = 0; i < len; i++){\n    if(arr[i] > arr[i + 1]){\n      index = i;\n      break;\n    }\n  }\n  return index;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "var indices = [];\n\tfor(var i = 0; i < arr.length; i++){\n\t\tif(arr[i] >= arr[i-1]){\n\t\t\tindices.push(i);\n\t\t}\n\t}\n\tvar max = Math.max(...indices);\n\treturn max;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "for (let i = arr.length-1; i > 0; i--) {\n    if (arr[i] > arr[i-1]) return i-1;\n  }\n  return -1;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "let answer = -1;\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) {\n      answer = i - 1;\n    }\n  }\n  return answer;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "var newArr = arr.slice();\n    newArr.pop();\n    var s = newArr.length;\n    var a = newArr.indexOf(Math.max(...newArr));\n    if (newArr[a] < arr[s]){\n        return a;\n    }\n    else {\n        return -1;\n    }\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "for (var i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[i-1]) {\n      return i - 1;\n    }\n  }\n  return -1;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "let i = arr.length - 1;\n  while (i >= 0 && arr[i] <= arr[i - 1]) {\n    i--;\n  }\n  return i - 1;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "if(arr.length <= 1) return -1;\n  var newArr = [];\n  for(var i = 0; i < arr.length; i++){\n    if(arr[i] <= arr[i-1]){\n      newArr.push(i);\n    }\n  }\n  if(newArr.length === 0) return -1;\n  return newArr[newArr.length-1];\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "let index = -1;\n    for(let i = arr.length - 1; i > 0; i--){\n        if(arr[i] < arr[i - 1]){\n            index = i - 1;\n            break;\n        }\n    }\n    return index;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "let index = -1;\n  let track = 0;\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] > arr[i-1]){\n      index = i;\n    }\n  }\n  if(index !== -1){\n    return index;\n  }else{\n    return index;\n  }\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "var indice = -1;\n    var valor  = arr[0];\n    for(i=1; i<arr.length; i++){\n        if(arr[i] < valor){\n            indice = i;\n            valor = arr[i];\n        }\n    }\n    return indice;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "if(arr.length === 1) return -1;\n  var last = arr[0];\n  for(var i = 1; i < arr.length; i++){\n    if(arr[i] <= last){\n      return i - 1;\n    }\n    last = arr[i];\n  }\n  return -1;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[i+1]) {\n      return i;\n    }\n  }\n  return -1;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "var prev;\n  var largest = -1;\n  var j = 0;\n  for(var i = 0; i < arr.length; i++){\n    if(i > 0){\n      prev = arr[i-1];\n    }\n    if(arr[i] < prev){\n      largest = i;\n    }\n  }\n  return largest;\n}",
        "grade-19": {
            "execution": 1
        }
    },
    {
        "intent": "//Implement the function f that takes n as a parameter,\n// and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// f(5) == [1, 2, 6, 24, 15]\nfunction f(n){\n",
        "snippet": [
            "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n"
        ],
        "simplified": "Implement the function f that takes n as a parameter, and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even or the sum of numbers from 1 to i otherwise. i starts from 1. the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).",
        "task_id": "106",
        "3": "let array = [];\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            array.push(factorial(i));\n        } else {\n            array.push(sum(i));\n        }\n    }\n    return array;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "let result = [];\n  for (let i = 1; i <= n; i++){\n    if (i % 2 === 0){\n      let factorial = 1;\n      for (let j = 1; j <= i; j++){\n        factorial *= j;\n      }\n      result.push(factorial);\n    } else {\n      let sum = 0;\n      for (let k = 1; k <= i; k++){\n        sum += k;\n      }\n      result.push(sum);\n    }\n  }\n  return result;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "let i = 1;\n  let result = [];\n  while (result.length < n) {\n    let next;\n    if (i % 2 === 0) {\n      next = factorial(i);\n    } else {\n      next = sumNumbers(i);\n    }\n    result.push(next);\n    i++;\n  }\n  return result;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "let arr = [];\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 == 0) {\n            let factorial = 1;\n            for (let j = 1; j <= i; j++) {\n                factorial *= j;\n            }\n            arr.push(factorial);\n        } else {\n            let sum = 0;\n            for (let j = 1; j <= i; j++) {\n                sum += j;\n            }\n            arr.push(sum);\n        }\n    }\n    return arr;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "var i = 1;\n    var arr = [];\n    while (i <= n) {\n        if (i % 2 == 0) {\n            arr.push(fakt(i));\n        } else {\n            arr.push(factorial(i));\n        }\n        i++;\n    }\n    return arr;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 == 0) {\n      let factorial = 1;\n      for (let j = 1; j <= i; j++) {\n        factorial *= j;\n      }\n      result.push(factorial);\n    } else {\n      let sum = 0;\n      for (let j = 1; j <= i; j++) {\n        sum += j;\n      }\n      result.push(sum);\n    }\n  }\n  return result;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "var result = [];\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            var factorial = 1;\n            for (let j = 1; j <= i; j++) {\n                factorial *= j;\n            }\n            result.push(factorial);\n        } else {\n            var sum = 0;\n            for (let k = 1; k <= i; k++) {\n                sum += k;\n            }\n            result.push(sum);\n        }\n    }\n    return result;\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "let result = [];\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            let factorial = 1;\n            for (let j = 2; j <= i; j++) {\n                factorial *= j;\n            }\n            result.push(factorial);\n        } else {\n            let sum = 0;\n            for (let j = 1; j <= i; j++) {\n                sum += j;\n            }\n            result.push(sum);\n        }\n    }\n    return result;\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "let arr = []\n    let nFactorial = 1;\n    let sumOfNumber = 0;\n    let currValue = 1;\n    for(let i = 1; i <= n; i++){\n        if(i % 2 == 0){\n            currValue = nFactorial;\n            nFactorial *= i;\n        }\n        else{\n            currValue = sumOfNumber;\n            sumOfNumber += i;\n        }\n        arr.push(currValue);\n    }\n    return arr;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "let num = [1];\n  let sum = 0;\n  let factorial = 1;\n  for (let i = 1; i < n; i++) {\n    if (i % 2 !== 0) {\n      for (let j = 1; j <= i; j++) {\n        sum += j;\n      }\n      num.push(sum);\n      sum = 0;\n    } else {\n      for (let j = 1; j <= i; j++) {\n        factorial *= j;\n      }\n      num.push(factorial);\n      factorial = 1;\n    }\n  }\n  return num;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 == 0) {\n      arr.push(factorial(i));\n    } else {\n      arr.push(sumNums(i));\n    }\n  }\n  return arr;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "let result = [];\n  for (let i = 1; i <= n; i++) {\n    let inner;\n    if (i % 2 === 0) {\n      inner = factorial(i);\n    } else {\n      inner = sumNum(i);\n    }\n    result.push(inner);\n  }\n  return result;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "let answer = [];\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            let factorial = 1;\n            for (let j = 1; j <= i; j++) {\n                factorial *= j;\n            }\n            answer.push(factorial);\n        } else {\n            let sum = 0;\n            for (let j = 1; j <= i; j++) {\n                sum += j;\n            }\n            answer.push(sum);\n        }\n    }\n    return answer;\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "var x = [];\n    for (var i = 1; i < n + 1; i++){\n        if (i % 2 === 0){\n            var y = 1;\n            for (var j = 1; j < i + 1; j++){\n                y = y * j;\n            }\n            x.push(y);\n        }\n        else {\n            var y = 0;\n            for (var j = 1; j < i + 1; j++){\n                y = y + j;\n            }\n            x.push(y);\n        }\n    }\n    return x;\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "let numberArray = []\n    for (let i = 1; i <= n; i++) {\n      if (i % 2 === 0) {\n        numberArray.push(factorialize(i))\n      } else {\n        numberArray.push(sumOfNumbers(i))\n      }\n    }\n    return numberArray\n  }\n  \n  function factorialize(num) {\n    let factorial = 1\n    for (let i = 1; i <= num; i++) {\n      factorial *= i\n    }\n    return factorial\n  }\n  \n  function sumOfNumbers(num) {\n    let sum = 0\n    for (let i = 1; i <= num; i++) {\n      sum += i\n    }\n    return sum\n  }\n  \n  console.log(f(5))\n  console.log(f(6))",
        "grade-13": {
            "execution": 1
        },
        "9": "var a = [];\n    for (var i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            var j = 1;\n            var factorial = 1;\n            while (j <= i) {\n                factorial *= j;\n                j++;\n            }\n            a.push(factorial);\n        } else {\n            var sum = 0;\n            for (var k = 1; k <= i; k++) {\n                sum += k;\n            }\n            a.push(sum);\n        }\n    }\n    return a;\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "let arr = [];\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 == 0) {\n            let factorial = 1;\n            for (let j = 1; j <= i; j++) {\n                factorial *= j;\n            }\n            arr.push(factorial);\n        } else {\n            let sum = 0;\n            for (let k = 1; k <= i; k++) {\n                sum += k;\n            }\n            arr.push(sum);\n        }\n    }\n    return arr;\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "const temp = [];\n    let cnt = 1;\n    for(let i = 1; i <= n; i++){\n        if(i % 2 === 0){\n            temp.push(factorial(i));\n        }else{\n            temp.push(cnt);\n            cnt += i;\n        }\n    }\n    return temp;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "const list = [];\n  for (let i = 1; i <= n; i++) {\n    list.push(i%2 === 0 ? i * (i-1) : (i*(i+1))/2);\n  }\n  return list;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "let arr = [];\n    for (let i = 1; i <= n; i++) {\n        let value = 0;\n        if (i % 2 == 0) {\n            value = factorial(i);\n        } else {\n            value = sumToN(i);\n        }\n        arr.push(value);\n    }\n    return arr;\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n",
        "snippet": [
            "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n"
        ],
        "simplified": "Return sorted unique elements in a list",
        "task_id": "34",
        "3": "var s = [];\n\tl.forEach(function(x){\n\t\tif (s.indexOf(x) === -1) s.push(x);\n\t});\n\treturn s.sort(function(a, b){return a - b;});\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "return l.sort().filter(function(item, pos, ary) {\n    return !pos || item != ary[pos - 1];\n  })\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "return l.sort().filter(function(item, pos, ary) {\n\t\treturn !pos || item != ary[pos - 1];\n\t})\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "l.sort();\n\tfor(var i = 1; i < l.length; i++){\n\t\tif(l[i-1] == l[i])\n\t\t\tl.splice(i--, 1);\n\t}\n\treturn l;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "var set = new Set(l);\n  return Array.from(set);\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "return l.sort().filter(function(item, pos, ary) {\n      return !pos || item != ary[pos - 1];\n  })\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "var u = l.sort();\n\tvar ul = [];\n\t\n\tfor(var i = 0; i < u.length; i++){\n\t\tif(u[i] != u[i+1]){\n\t\t\tul.push(u[i]);\n\t\t}\n\t}\n\treturn ul;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "var uniq = {};\n  l.forEach(function(i) { uniq[i] = true; });\n  return Object.keys(uniq).map(function(i) { return parseInt(i); });\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "let set = new Set(l);\n    return Array.from(set);\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "return [...new Set(l)]\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "var result = [];\n    for(var i = 0; i < l.length; i++){\n        if(result.indexOf(l[i]) == -1){\n            result.push(l[i]);\n        }\n    }\n    return result;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "let uniques = [];\n    for(let i = 0; i < l.length; i++){\n        let x = l[i];\n        if(!(x in uniques)){\n            uniques.push(x);\n        }\n    }\n    return uniques.sort();\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "//Without using built-in sort\n    let r = []\n    for(let i = 0; i < l.length; i++){\n        if(r.indexOf(l[i]) < 0){\n            r.push(l[i])\n        }\n    }\n    return r\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "return [...new Set(l)];\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "var s = l.slice();\n  s.sort();\n  var last = s[0];\n  var res = [last];\n  for(var i = 1; i < s.length; i++){\n    if(s[i] !== last){\n      res.push(s[i]);\n      last = s[i];\n    }\n  }\n  return res;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "return Array.from(new Set(l));\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "return l.sort().filter(function(e, i, l){\n        return i === 0 || e != l[i-1];\n    });\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "return l.sort().filter(function(v,i,a){return a.indexOf(v)===i});\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "var result = [];\n    l.sort();\n    for(var i = 0; i < l.length; i++){\n        if(l[i] != l[i + 1]){\n            result.push(l[i]);\n        }\n    }\n    return result;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "let newArr = l.sort();\n    let index = 0;\n    for(let i = 0; i < newArr.length; i++){\n        if(newArr[i] != newArr[i+1]){\n            newArr[index] = newArr[i];\n            index++;\n        }\n    }\n    return newArr.slice(0, index);\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n",
        "snippet": [
            "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n"
        ],
        "simplified": "Return 2^n modulo p (be aware of numerics).",
        "task_id": "49",
        "0": "var ans = 1;\n\tvar bin = Math.abs(n).toString(2);\n\t\n\tfor(var i = 0; i < bin.length; i++){\n\t\tif(bin[i] == 1){\n\t\t\tans = (ans * Math.pow(2, i)) % p;\n\t\t}\n\t}\n\t\n\treturn ans;\n}",
        "grade-0": {
            "execution": 0
        },
        "1": "var res = 1;\n\tvar two = 2;\n\twhile(n>0){\n\t\tif(n%2==1){\n\t\t\tres = (res*two)%p;\n\t\t}\n\t\ttwo = (two*two)%p;\n\t\tn = parseInt(n/2);\n\t}\n\treturn res;\n}",
        "grade-1": {
            "execution": 1
        },
        "2": "return  BigInt(2).pow(n) % p;\n}",
        "grade-2": {
            "execution": 0
        },
        "3": "var res = 1;\n  for(var i = 0; i < n; i++){\n    res = (res * 2) % p;\n  }\n  return res;\n}",
        "grade-3": {
            "execution": 1
        },
        "4": "if(n == 0)\n\t\treturn 1;\n\tif(n == 1)\n\t\treturn 2 % p;\n\telse if(n % 2 == 0)\n\t\treturn (modp(n/2, p) * modp(n/2, p)) % p;\n\telse\n\t\treturn (2 * modp(n/2, p) * modp(n/2, p)) % p;\n}",
        "grade-4": {
            "execution": 0
        },
        "5": "// return Math.pow(2, n) % p;\n    if (n === 0) return 1;\n    if (n === 1) return 2 % p;\n    if (n % 2 === 0) {\n        return Math.pow(modp(n / 2, p), 2) % p;\n    } else {\n        return (2 * modp(n - 1, p)) % p;\n    }\n}",
        "grade-5": {
            "execution": 1
        },
        "6": "if(n==0){\n        return 1;\n    }else if(n%2==0){\n        return (modp(n/2, p) * modp(n/2, p)) % p;\n    }else{\n        return (modp(n/2, p) * modp(n/2, p) * 2) % p;\n    }\n}",
        "grade-6": {
            "execution": 0
        },
        "7": "var res = 1;\n\tfor(var i = 0; i < n; i++){\n\t\tres = (res * 2) % p;\n\t}\n\treturn res;\n}\n\nvar crc8 = new CRC8();",
        "grade-7": {
            "execution": 0
        },
        "8": "if(n === 0){\n    return 1;\n  }\n  if(n === 1){\n    return 2;\n  }\n  if(n % 2 === 0){\n    return (2 * modp(n / 2, p)) % p;\n  }\n  else{\n    return (2 * modp(n / 2, p) * 2) % p;\n  }\n}",
        "grade-8": {
            "execution": 0
        },
        "10": "return (p <= 1) ? 0 : (n < 1) ? 1 : Math.pow(2, n % (p - 1)) % p;\n}",
        "grade-10": {
            "execution": 1
        },
        "11": "if(n<0)\n        return modp(-n, p);\n    if(n==0)\n        return 1;\n    var aux = modp(n/2, p);\n    aux = (aux*aux)%p;\n    if(n%2==1)\n        aux=(aux*2)%p;\n    return aux;\n}",
        "grade-11": {
            "execution": 0
        },
        "12": "if(n == 0){\n        return 1;\n    }\n    var x = modp(n/2, p);\n    if(n % 2 == 0){\n        return (x * x) % p;\n    }\n    else{\n        return (x * x * 2) % p;\n    }\n}",
        "grade-12": {
            "execution": 0
        },
        "13": "var n = n.toString(2);\n\tvar y = 1;\n\tfor(var i = 0; i < n.length; i++){\n\t\ty = (y*y) % p;\n\t\tif(n[i] == '1'){\n\t\t\ty = (y*2) % p;\n\t\t}\n\t}\n\treturn y;\n}",
        "grade-13": {
            "execution": 1
        },
        "14": "var m = n % p;\n    return ((n%p)+p)%p;\n}",
        "grade-14": {
            "execution": 0
        },
        "15": "var result = 1;\n\tfor(var i = 1; i <= n; i++){\n\t\tresult = (result * 2) % p;\n\t}\n\treturn result;\n}",
        "grade-15": {
            "execution": 1
        },
        "16": "// O(log n)\n  var base = 1,\n      j = 1;\n  while(j <= n){\n    if(j & n){\n      base = (base * 2) % p;\n    }\n    j = j << 1;\n  }\n  return base;\n}",
        "grade-16": {
            "execution": 0
        },
        "17": "var sum=1;\n  for(var i=0; i<n; i++){\n    sum = (sum*2)%p;\n  }\n  return sum;\n}",
        "grade-17": {
            "execution": 1
        },
        "18": "var m = n % p;\n\tif (m < 0) {\n\t\tm += p;\n\t}\n\treturn m;\n}",
        "grade-18": {
            "execution": 0
        },
        "19": "var res = 1,\n        p_inv = p - 2;\n    while (p_inv > 0) {\n        if (p_inv % 2 == 1) {\n            res = (res * n) % p;\n        }\n        n = (n * n) % p;\n        p_inv = Math.floor(p_inv / 2);\n    }\n    return res;\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums){\n",
        "snippet": [
            "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n"
        ],
        "simplified": "Given an array of integers nums, find the minimum sum of any non-empty sub-array of nums.",
        "task_id": "114",
        "3": "if(nums.length === 0) return 0;\n    let minSum = nums[0];\n    let currentSum = nums[0];\n    for(let i = 1; i < nums.length; i++){\n        currentSum = Math.min(currentSum + nums[i], nums[i]);\n        minSum = Math.min(minSum, currentSum);\n    }\n    return minSum;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "let minSubArraySum = nums[0];\n  let currentSum = nums[0];\n  for(let i = 1; i < nums.length; i++){\n    currentSum = Math.min(currentSum + nums[i], nums[i]);\n    minSubArraySum = Math.min(minSubArraySum, currentSum);\n  }\n  return minSubArraySum;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "let minSum = nums[0]\n  let sum = nums[0]\n  for(let i = 1; i < nums.length; i++){\n    if(sum < 0){\n      sum = nums[i]\n    } else {\n      sum += nums[i]\n    }\n    if(sum < minSum){\n      minSum = sum\n    }\n  }\n  return minSum\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "let sum = 0;\n    let minSum = 0;\n    let min = nums[0];\n    for(let i = 0; i < nums.length; i++){\n        sum += nums[i];\n        if(minSum > sum){\n            minSum = sum;\n        }\n        if(nums[i] < min){\n            min = nums[i];\n        }\n    }\n    if(minSum !== 0){\n        return minSum;\n    }\n    return min;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "let min = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length; i++){\n        sum += nums[i];\n        if(sum < min){\n            min = sum;\n        }\n        for(let j = i + 1; j < nums.length; j++){\n            sum += nums[j];\n            if(sum < min){\n                min = sum;\n            }\n        }\n        sum = 0;\n    }\n    return min;\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "if(nums.length === 0) return null;\n    let min = nums[0];\n    let sum = nums[0];\n    for(let i = 1; i < nums.length; i++){\n        if(sum > 0){\n            sum = nums[i];\n        }else{\n            sum += nums[i];\n        }\n        min = Math.min(min, sum);\n    }\n    return min;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "let min = Infinity;\n  let currentSum = 0;\n  for(let i = 0; i < nums.length; i++){\n    currentSum += nums[i];\n    if(currentSum < min){\n      min = currentSum;\n    }\n    if(currentSum > 0){\n      currentSum = 0;\n    }\n  }\n  return min;\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "if(nums.length == 0) return 0;\n  let currentSum = nums[0];\n  let smallestSum = nums[0];\n  for(let i = 1; i < nums.length; i++){\n    if(currentSum < 0){\n      currentSum = nums[i];\n    } else {\n      currentSum += nums[i];\n    }\n    if(currentSum < smallestSum){\n      smallestSum = currentSum;\n    }\n  }\n  return smallestSum;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "let minSum = nums[0];\n  let currSum = 0;\n  for(let i = 0; i < nums.length; i++){\n    currSum += nums[i];\n    if(currSum < minSum){\n      minSum = currSum;\n    }\n    if(currSum > 0){\n      currSum = 0;\n    }\n  }\n  return minSum;\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "let n = nums.length;\n  let start = 0;\n  let end = 0;\n  let minSum = Infinity;\n  let currSum = 0;\n  while(start < n){\n    while(end < n && currSum >= 0){\n      currSum += nums[end];\n      end += 1;\n    }\n    minSum = Math.min(minSum, currSum);\n    currSum -= nums[start];\n    start += 1;\n  }\n  return minSum;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "let prev = nums[0];\n    let min = nums[0];\n    for(let i = 1; i < nums.length; i++){\n        let temp = nums[i] + prev;\n        if(temp < nums[i]) prev = temp;\n        else prev = nums[i];\n        if(prev < min) min = prev;\n    }\n    return min;\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "let length = nums.length;\n\tlet minTotal = Infinity;\n\tfor(let start = 0; start < length; start++){\n\t\tlet total = 0;\n\t\tfor(let stop = start; stop < length; stop++){\n\t\t\ttotal += nums[stop];\n\t\t\tminTotal = Math.min(minTotal, total);\n\t\t}\n\t}\n\treturn minTotal;\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "let tempMin = nums[0];\n\tlet cumulativeSum = 0;\n\tfor(let i = 0; i < nums.length; i++){\n\t\tcumulativeSum += nums[i];\n\t\tif(cumulativeSum < tempMin){\n\t\t\ttempMin = cumulativeSum;\n\t\t}\n\t}\n\treturn tempMin;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "let current = nums[0];\n    let least = nums[0];\n    for(let i = 1; i < nums.length; i++){\n        current = Math.min(nums[i], current + nums[i]);\n        least = Math.min(least, current);\n    }\n    return least;\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "let minSum = Infinity;\n    let currentSum = 0;\n    for(let i = 0; i < nums.length; i++){\n        currentSum += nums[i];\n        minSum = Math.min(minSum, currentSum);\n        if(currentSum < 0){\n            currentSum = 0;\n        }\n    }\n    return minSum;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "var minSum = 0;\n    var currSum = 0;\n    for(var i = 0; i < nums.length; i++){\n        currSum += nums[i];\n        if(currSum < minSum){\n            minSum = currSum;\n        }\n        if(currSum > 0){\n            currSum = 0;\n        }\n    }\n    return minSum;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "let currentSum = nums[0];\n    let minSum = nums[0];\n    for(let i = 1; i < nums.length; i++){\n        if(currentSum <= 0){\n            currentSum = nums[i];\n        }else{\n            currentSum += nums[i];\n        }\n        if(currentSum < minSum){\n            minSum = currentSum;\n        }\n    }\n    return minSum;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "let minSum = Infinity;\n    let tempSum = 0;\n    for(let i = 0; i < nums.length; i++){\n        tempSum += nums[i];\n        if(tempSum < minSum){\n            minSum = tempSum;\n        }\n        if(tempSum > 0){\n            tempSum = 0;\n        }\n    }\n    return minSum;\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "let minSum = 0;\n    let currentSum = 0;\n    for(let i = 0; i < nums.length; i++){\n        currentSum += nums[i];\n        if(currentSum < minSum){\n            minSum = currentSum;\n        }\n    }\n    return minSum;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "let minSum = Number.MAX_SAFE_INTEGER;\n    let start = 0;\n    let end = 0;\n    let total = 0;\n    while(start < nums.length){\n        if(total < 0){\n            total = 0;\n            end = start;\n        }\n        total += nums[end];\n        if(total < minSum){\n            minSum = total;\n        }\n        end++;\n        if(end === nums.length){\n            start++;\n            end = start;\n        }\n    }\n    return minSum;\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) == []\nfunction strange_sort_list(lst){\n",
        "snippet": [
            "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n"
        ],
        "simplified": "Given list of integers, return list in strange order. Strange sorting, is when you start with the minimum value, then maximum of the remaining integers, then minimum and so on.",
        "task_id": "70",
        "3": "if(lst.length == 0) return [];\n    let out = [];\n    lst.sort((a,b) => a-b);\n    while(lst.length != 0){\n        out.push(lst.shift());\n        if(lst.length != 0) out.push(lst.pop());\n    }\n    return out;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "var res = [];\n    var max = lst.length-1;\n    var min = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(i%2==0){\n            res.push(lst[min++]);\n        }\n        else{\n            res.push(lst[max--]);\n        }\n    }\n    return res;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "if(lst.length <= 0) return [];\n    const newLst = lst.slice();\n    newLst.sort((a, b) => a - b);\n    let evenLst = [];\n    let oddLst = [];\n    while(newLst.length > 0){\n        const minElem = newLst.shift();\n        const maxElem = newLst.pop();\n        if(evenLst.length > oddLst.length){\n            oddLst.push(minElem);\n            evenLst.push(maxElem);\n        }else{\n            evenLst.push(minElem);\n            oddLst.push(maxElem);\n        }\n    }\n    return evenLst.concat(oddLst.reverse());\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "lst.sort((a, b) => a - b);\n    let res = [];\n    for (let i = 0; i < lst.length; i++){\n        if (i % 2 === 0){\n            res.push(lst[i]);\n        } else {\n            res.unshift(lst[i]);\n        }\n    }\n    return res;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "var x = [];\n    var y = [];\n    if (lst.length == 0) {\n        return [];\n    }\n    while (lst.length > 0) {\n        x.push(Math.min.apply(null, lst));\n        y.push(Math.max.apply(null, lst));\n        lst.splice(lst.indexOf(Math.min.apply(null, lst)), 1);\n        lst.splice(lst.indexOf(Math.max.apply(null, lst)), 1);\n    }\n    return x.concat(y);\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "if (lst.length == 0) return [];\n  var result = [lst[0]];\n  lst.splice(0, 1);\n  for (var i = 0; i < lst.length; i++) {\n    if (lst.length == 0) break;\n    result.push(Math.max.apply(Math, lst));\n    result.push(Math.min.apply(Math, lst));\n    var index = lst.indexOf(Math.max.apply(Math, lst));\n    lst.splice(index, 1);\n    index = lst.indexOf(Math.min.apply(Math, lst));\n    lst.splice(index, 1);\n  }\n  return result;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "if(lst.length === 0) return lst;\n    let min = Math.min(...lst);\n    let idx = lst.indexOf(min);\n    lst.splice(idx, 1);\n    return [min, ...strange_sort_list(lst.reverse())];\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "let newLst = lst.slice();\n    newLst.sort(function(a, b){return a-b});\n    let temp = [];\n    for(let i = 0; i < newLst.length; i++){\n        if(i % 2 === 0){\n            temp.push(newLst[i]);\n        }\n        else{\n            temp.push(newLst[newLst.length - i - 1]);\n        }\n    }\n    return temp;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "//find min value\n    if (lst.length === 0) return [];\n    let min = Math.min(...lst);\n    let minIndex = lst.indexOf(min);\n    let newLst = [];\n    newLst.push(min);\n    let lst1 = lst.slice(0, minIndex);\n    let lst2 = lst.slice(minIndex + 1);\n    while (lst1.length > 0) {\n        let max = Math.max(...lst1);\n        let maxIndex = lst1.indexOf(max);\n        newLst.push(max);\n        lst1 = lst1.slice(0, maxIndex);\n        lst2 = lst2.concat(lst1.slice(maxIndex + 1));\n        lst1 = lst2;\n        lst2 = [];\n    }\n    return newLst;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "if(lst.length > 0){\n        var lst2 = lst.slice(0);\n        lst2.sort(function(a, b){return a-b});\n        var lst_l = lst2.length;\n        for(var i = 0; i < lst_l; i++){\n            if(i % 2 == 0){\n                lst.splice(i, 1, lst2[0]);\n                lst2.splice(0, 1);\n            }\n            else{\n                lst.splice(i, 1, lst2[lst2.length - 1]);\n                lst2.splice(lst2.length - 1, 1);\n            }\n        }\n    }\n    return lst;\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "if(lst.length===0)\n    return lst;\n  var res=[];\n  var lst_copy=lst.slice();\n  lst_copy.sort(function(a,b){return a-b;});\n  var asc=true;\n  while(lst_copy.length!==0){\n    if(asc){\n      res.push(lst_copy.shift());\n      asc=false;\n    }else{\n      res.push(lst_copy.pop());\n      asc=true;\n    }\n  }\n  return res;\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "return lst.sort((a, b) => a - b).reduce((acc, cur, i) => {\n        let j = i + 1;\n        if (j % 2 === 0) {\n            acc.unshift(cur);\n        } else {\n            acc.push(cur);\n        }\n        return acc;\n    }, []);\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "var str = 0;\n\tif (lst.length === 0) {\n\t\treturn [];\n\t}\n\tlst.sort(function(a, b) {\n\t\treturn a - b;\n\t});\n\tfor (var i = 0; i < lst.length - 1; i++) {\n\t\tvar temp = lst[i];\n\t\tlst[i] = lst[i + 1];\n\t\tlst[i + 1] = temp;\n\t\tstr++;\n\t}\n\treturn lst;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "if(lst.length == 0) return lst;\n    var min = Math.min(...lst);\n    var max = Math.max(...lst);\n    var newList = [];\n    for(var i = 0; i < lst.length; i++){\n        if(i % 2 == 0){\n            newList.push(min);\n            lst.splice(lst.indexOf(min), 1);\n            min = Math.min(...lst);\n        }\n        else{\n            newList.push(max);\n            lst.splice(lst.indexOf(max), 1);\n            max = Math.max(...lst);\n        }\n    }\n    return newList;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "var res = [];\n    var idx = 0;\n    while(lst.length > 0){\n        var min = Math.min.apply(null, lst);\n        var max = Math.max.apply(null, lst);\n        if(idx%2 === 0){\n            res.push(min);\n            lst.splice(lst.indexOf(min), 1);\n        }else{\n            res.push(max);\n            lst.splice(lst.indexOf(max), 1);\n        }\n        idx += 1;\n    }\n    return res;\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "let asc = [...lst].sort((a, b) => a - b);\n    let desc = [...lst].sort((a, b) => b - a);\n    let flag = true;\n    let result = [];\n    while (asc.length > 0) {\n        if (flag) {\n            result.push(asc.shift());\n        } else {\n            result.push(desc.shift());\n        }\n        flag = !flag;\n    }\n    return result;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "var res = [], odd = false;\n    if(lst.length == 0){\n        return [];\n    }else if(lst.length == 1){\n        return lst;\n    }else{\n        res.push(lst.shift());\n        lst.sort(function(a, b){return a-b});\n        for(var i = 0; i < lst.length; i++){\n            if(odd){\n                res.push(lst.pop());\n                odd = false;\n            }else{\n                res.push(lst.shift());\n                odd = true;\n            }\n        }\n        return res;\n    }\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "if(lst.length == 0){\n        return lst;\n    }\n    let result = [];\n    result.push(Math.min(...lst));\n    lst.splice(lst.indexOf(Math.min(...lst)), 1);\n    result.push(Math.max(...lst));\n    lst.splice(lst.indexOf(Math.max(...lst)), 1);\n    let x = 0;\n    let y = lst.length - 1;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2 == 0){\n            result.push(lst[x]);\n            x++;\n        }else{\n            result.push(lst[y]);\n            y--;\n        }\n    }\n    return result;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "var odd=[], even=[];\n    for(var i=0; i<lst.length; i++){\n        if(i%2==0){\n            odd.push(lst[i]);\n        }\n        else{\n            even.push(lst[i]);\n        }\n    }\n    even.sort(function(a,b){return a-b});\n    odd.sort(function(a,b){return b-a});\n    var sorted_lst=[];\n    for(var i=0; i<odd.length; i++){\n        sorted_lst.push(odd[i]);\n        if(even[i]!=undefined){\n            sorted_lst.push(even[i]);\n        }\n    }\n    return sorted_lst;\n}\nvar list = [2, 5, 7, 9, 6, 5, 4, 1, 2, 5, 7, 9, 0, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7,",
        "grade-5": {
            "execution": 0
        },
        "19": "let result = [];\n    let min, max, minPosition, maxPosition;\n    let lstCopy = lst.slice();\n    while(lstCopy.length > 0){\n        if(result.length % 2 === 0){\n            min = Math.min(...lstCopy);\n            minPosition = lstCopy.indexOf(min);\n            result.push(min);\n            lstCopy.splice(minPosition, 1);\n        } else {\n            max = Math.max(...lstCopy);\n            maxPosition = lstCopy.indexOf(max);\n            result.push(max);\n            lstCopy.splice(maxPosition, 1);\n        }\n    }\n    return result;\n}",
        "grade-19": {
            "execution": 1
        }
    },
    {
        "intent": "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n",
        "snippet": [
            "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n"
        ],
        "simplified": "You are given a positive integer n. You have to create an integer array a of length n. For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1. Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiple of 3.",
        "task_id": "147",
        "3": "let sum = 0\n    for(let i = 0; i < n; i++){\n        for(let j = i + 1; j < n; j++){\n            for(let k = j + 1; k < n; k++){\n                let val1 = i * i - i + 1\n                let val2 = j * j - j + 1\n                let val3 = k * k - k + 1\n                if((val1 + val2 + val3) % 3 === 0){\n                    sum++\n                }\n            }\n        }\n    }\n    return sum\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "let a = [1];\n    let result = 0;\n    for(let i = 1; i < n; i++){\n        a.push(a[i-1] + i + 1);\n    }\n    // since the array has only unique number, we can use the foreach method\n    a.forEach((value, index) => {\n        if(index !== a.length - 1){\n            // need to loop through the rest of array\n            for(let j = index + 1; j < a.length; j++){\n                // check if the rest of the array has the value\n                let k = a.indexOf(3 - value - a[j]);\n                if(k > j){\n                    result += 1;\n                }\n            }\n        }\n    });\n    return result;\n}\nlet result = get_max_triples(4);",
        "grade-0": {
            "execution": 0
        },
        "8": "let arr = [];\n    let max = 0;\n    for(let i = 1; i <= n; i++){\n        let num = i * i - i + 1;\n        arr.push(num);\n        for(let j = 0; j < arr.length; j++){\n            for(let k = 0; k < arr.length; k++){\n                if(k > j && j < i && i % 3 === 0){\n                    let sum = arr[j] + arr[k] + arr[i - 1];\n                    if(sum % 3 === 0){\n                        max++;\n                    }\n                }\n            }\n        }\n    }\n    return max;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "let arr = [];\n    let count = 0;\n    for(let i = 1; i <= n; i++){\n        arr.push(i * i - i + 1);\n    }\n    for(let i = 0; i < arr.length; i++){\n        for(let j = i + 1; j < arr.length; j++){\n            for(let k = j + 1; k < arr.length; k++){\n                if((arr[i] + arr[j] + arr[k]) % 3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "let a = [];\n    for(let i = 1; i <= n; i++){\n        a.push(i * i - i + 1);\n    }\n    let count = 0;\n    for(let i = 0; i < a.length; i++){\n        for(let j = i + 1; j < a.length; j++){\n            for(let k = j + 1; k < a.length; k++){\n                if((a[i] + a[j] + a[k]) % 3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "var triples=0;\n    var arr=[];\n    for(var i=1;i<=n;i++){\n        arr.push(i*i-i+1);\n    }\n    console.log(arr);\n    for(var i=0;i<arr.length;i++){\n        for(var j=i+1;j<arr.length;j++){\n            for(var k=j+1;k<arr.length;k++){\n                if((arr[i]+arr[j]+arr[k])%3==0){\n                    triples++;\n                }\n            }\n        }\n    }\n    return triples;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "var array = [];\n    var count = 0;\n    for(let i = 1; i <= n; i++){\n        array.push(i * i - i + 1);\n    }\n    for(let i = 0; i < array.length; i++){\n        for(let j = 0; j < array.length; j++){\n            for(let k = 0; k < array.length; k++){\n                if(i < j && j < k && (array[i] + array[j] + array[k]) % 3 == 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "let arr = []\n    for(let i = 0; i < n; i++){\n        arr.push(i * i - i + 1)\n    }\n    let triple = 0\n    for(let i = 0; i < arr.length; i++){\n        for(let j = i + 1; j < arr.length; j++){\n            for(let k = j + 1; k < arr.length; k++){\n                if((arr[i] + arr[j] + arr[k]) % 3 === 0){\n                    triple++\n                }\n            }\n        }\n    }\n    return triple\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "let arr = [];\n    for(let i = 1; i <= n; i++){\n        arr.push(i * i - i + 1);\n    }\n    let num = 0;\n    for(let i = 0; i < arr.length; i++){\n        for(let j = i + 1; j < arr.length; j++){\n            for(let k = j + 1; k < arr.length; k++){\n                if((arr[i] + arr[j] + arr[k]) % 3 === 0){\n                    num++;\n                }\n            }\n        }\n    }\n    return num;\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "let a = [];\n    for(let i = 1; i<=n; i++){\n        a.push(i*i-i+1);\n    }\n    let k = 0;\n    for(let i = 0; i<a.length-2; i++){\n        for(let j = i+1; j<a.length-1; j++){\n            for(let l = j+1; l<a.length; l++){\n                if((a[i]+a[j]+a[l])%3===0){\n                    k++;\n                }\n            }\n        }\n    }\n    return k;\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "let sum = 0;\n\tfor(let i = 1; i <= n; i++){\n\t\tfor(let j = i+1; j <= n; j++){\n\t\t\tfor(let k = j+1; k <= n; k++){\n\t\t\t\tif(((i*i-i+1)+(j*j-j+1)+(k*k-k+1))%3 === 0){\n\t\t\t\t\tsum++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "if(n<3) return 0;\n    let count = 0;\n    let arr = [1];\n    for(let i=2; i<=n; i++){\n        arr.push(i*i-i+1);\n    }\n    for(let i=0; i<arr.length-2; i++){\n        for(let j=i+1; j<arr.length-1; j++){\n            for(let k=j+1; k<arr.length; k++){\n                if((arr[i]+arr[j]+arr[k])%3==0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "const a = Array.from({length: n}, (v, i) => i * i - i + 1);\n    let counter = 0;\n    for(let i = 0; i < a.length; i++){\n        for(let j = i + 1; j < a.length; j++){\n            for(let k = j + 1; k < a.length; k++){\n                if((a[i] + a[j] + a[k]) % 3 === 0){\n                    counter++;\n                }\n            }\n        }\n    }\n    return counter;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "var array = [];\n    var count = 0;\n    var sum = 0;\n    for(var i = 1; i <= n; i++){\n        var j = i * i - i + 1;\n        array.push(j);\n    }\n    for(var i = 0; i < array.length; i++){\n        for(var j = i + 1; j < array.length; j++){\n            for(var k = j + 1; k < array.length; k++){\n                sum = array[i] + array[j] + array[k];\n                if(sum % 3 == 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "let a = [];\n  let count = 0;\n  for(let i = 1; i <= n; i++){\n    a.push(i * i - i + 1);\n  }\n  console.log(a);\n  for(let i = 0; i < a.length; i++){\n    for(let j = i + 1; j < a.length; j++){\n      for(let k = j + 1; k < a.length; k++){\n        if((a[i] + a[j] + a[k]) % 3 === 0){\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "// your code here\n    var arr = []\n    for(var i = 1; i<=n; i++){\n        arr.push(i*i-i+1)\n    }\n    var count = 0\n    for(var i = 0; i<arr.length; i++){\n        for(var j = i+1; j<arr.length; j++){\n            for(var k = j+1; k<arr.length; k++){\n                if((arr[i]+arr[j]+arr[k])%3 === 0){\n                    count ++\n                }\n            }\n        }\n    }\n    return count\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "var a = [];\n    for(var i = 1; i <= n; i++){\n        a.push(i * i - i + 1);\n    }\n    var count = 0;\n    for(var i = 0; i < a.length; i++){\n        for(var j = i + 1; j < a.length; j++){\n            for(var k = j + 1; k < a.length; k++){\n                if((a[i] + a[j] + a[k]) % 3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "var arr = []\n    var c = 0\n    for(var i = 1; i <= n; i++){\n        arr.push(i*i - i + 1)\n    }\n    for(var i = 0; i < arr.length - 2; i++){\n        for(var j = i + 1; j < arr.length - 1; j++){\n            for(var k = j + 1; k < arr.length; k++){\n                if((arr[i] + arr[j] + arr[k]) % 3 == 0){\n                    c++\n                }\n            }\n        }\n    }\n    return c\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "const array = [];\n    for(let i = 1; i<=n; i++){\n        array.push(i*i-i+1);\n    }\n    let count = 0;\n    for(let i = 0; i<array.length; i++){\n        for(let j = i+1; j<array.length; j++){\n            for(let k = j+1; k<array.length; k++){\n                if((array[i]+array[j]+array[k])%3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "var count = 0;\n    var array = []\n    for(var i = 1; i <= n; i++){\n        array.push(i*i - i + 1)\n    }\n    for(var i = 0; i < array.length - 2; i++){\n        for(var j = i + 1; j < array.length - 1; j++){\n            for(var k = j + 1; k < array.length; k++){\n                if((array[i] + array[j] + array[k]) % 3 === 0){\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}",
        "grade-19": {
            "execution": 1
        }
    },
    {
        "intent": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\nfunction multiply(a, b){\n",
        "snippet": [
            "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n"
        ],
        "simplified": "Complete the function that takes two integers and returns the product of their unit digits. Assume the input is always valid.",
        "task_id": "97",
        "0": "const str = a * b;\n  return Number(str.toString().split('').pop());\n}",
        "grade-0": {
            "execution": 0
        },
        "1": "let result = ((a%10) * (b%10))\n\n    return result\n}",
        "grade-1": {
            "execution": 0
        },
        "2": "return (a*b)%10;\n}",
        "grade-2": {
            "execution": 0
        },
        "3": "return (a * b) % 10;\n}",
        "grade-3": {
            "execution": 0
        },
        "4": "var a = a.toString();\n    var b = b.toString();\n    return (a[a.length-1] * b[b.length-1]);\n}",
        "grade-4": {
            "execution": 1
        },
        "5": "let unitDigitOfA = a % 10;\n    let unitDigitOfB = b % 10;\n    return unitDigitOfA * unitDigitOfB;\n}",
        "grade-5": {
            "execution": 0
        },
        "6": "let unitDigitOfA = Math.abs(a % 10);\n    let unitDigitOfB = Math.abs(b % 10);\n    return unitDigitOfA * unitDigitOfB;\n}",
        "grade-6": {
            "execution": 1
        },
        "7": "let numA = a.toString().split('').reverse()[0];\n  let numB = b.toString().split('').reverse()[0];\n  let result = numA * numB;\n  return result;\n}",
        "grade-7": {
            "execution": 1
        },
        "8": "let newA = a.toString();\n    let newB = b.toString();\n    let firstNum = newA.split('');\n    let secondNum = newB.split('');\n    let result = (parseInt(firstNum[1]) * parseInt(secondNum[1]));\n    return result;\n  }",
        "grade-8": {
            "execution": 0
        },
        "9": "var product = a * b;\n    var unit = product % 10;\n    return unit;\n}",
        "grade-9": {
            "execution": 0
        },
        "10": "let aArr = a.toString().split('');\n    let bArr = b.toString().split('');\n    aArr.pop();\n    bArr.pop();\n    let aArrStr = aArr.join('');\n    let bArrStr = bArr.join('');\n    let aNum = parseInt(aArrStr);\n    let bNum = parseInt(bArrStr);\n    let result = aNum * bNum;\n    return result;\n}",
        "grade-10": {
            "execution": 0
        },
        "11": "let unitA = a % 10;\n    let unitB = b % 10;\n    return unitA * unitB;\n}",
        "grade-11": {
            "execution": 0
        },
        "12": "return (a % 10) * (b % 10);\n}",
        "grade-12": {
            "execution": 0
        },
        "13": "var a = String(a);\n\tvar b = String(b);\n\tvar unitA = a.substr(a.length-1);\n\tvar unitB = b.substr(b.length-1);\n\tvar product = Number(unitA) * Number(unitB);\n\treturn product;\n}",
        "grade-13": {
            "execution": 1
        },
        "15": "return parseInt(a.toString().split('').pop()) \n\t* parseInt(b.toString().split('').pop());\n}",
        "grade-15": {
            "execution": 1
        },
        "16": "return (a%10)*(b%10);\n}",
        "grade-16": {
            "execution": 0
        },
        "17": "let aa = Math.abs(a).toString().split('').map(Number);\n    let bb = Math.abs(b).toString().split('').map(Number);\n    return aa[aa.length-1] * bb[bb.length-1];\n}",
        "grade-17": {
            "execution": 1
        },
        "18": "return Math.abs(a * b).toString().split('').pop() * 1;\n}",
        "grade-18": {
            "execution": 0
        },
        "19": "let aString = ('' + a);\n    let bString = ('' + b);\n    return parseInt(aString[aString.length - 1]) * parseInt(bString[bString.length - 1]);\n}",
        "grade-19": {
            "execution": 1
        }
    },
    {
        "intent": "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n",
        "snippet": [
            "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n"
        ],
        "simplified": "Given a non-empty array of integers arr and an integer k, return the sum of the elements with at most two digits from the first k elements of arr.",
        "task_id": "122",
        "3": "return arr.reduce((acc, curr, i) => {\n        return i < k && curr.toString().length <= 2 ? acc + curr : acc;\n    }, 0);\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "var sum = 0;\n    for(var i = 0; i < k; i++){\n        if(arr[i] < 100){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "let arr_len = arr.length\n  let count = 0\n  let sum = 0\n  for(let i = 0; i < arr_len; i++){\n    if(count < k){\n      let s = arr[i].toString()\n      if(s.length === 1 || s.length === 2){\n        sum += arr[i]\n        count++\n      }\n    }else{\n      break\n    }\n  }\n  return sum\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "var output = 0;\n    var count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var a = arr[i];\n        var temp = arr[i];\n        while(temp >= 10){\n            temp = Math.floor(temp / 10);\n        }\n        count++;\n        if(temp <= 2 && count <= k){\n            output += a;\n        }\n    }\n    return output;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "let i = 0, sum = 0;\n    while(i < k){\n        if(arr[i] >= 10 && arr[i] <= 99){\n            sum += arr[i];\n        }\n        i++;\n    }\n    return sum;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "let sum = 0;\n    for(let i = 0; i < k; i++){\n        let num = arr[i].toString();\n        if(num.length <= 2){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] >= 10 && arr[i] <= 99){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] < 10){\n            sum += arr[i];\n        }\n        else if(arr[i] < 100){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\nlet arr = [111,21,3,4000,5,6,7,8,9];\nlet k = 4;",
        "grade-1": {
            "execution": 1
        },
        "10": "//set up variables\n  let two_sum = 0;\n\n  //loop through array\n  for(let i = 0; i < k; i++){\n    //determine if elements in array are greater than ten\n    if(arr[i] < 10){\n      //add number to two_sum if less than ten\n      two_sum += arr[i];\n    } else if(arr[i] >= 10 && arr[i] < 100){\n      //add number to two_sum if between ten and one hundred\n      two_sum += arr[i];\n    }\n  }\n  return two_sum;\n}\nadd_elements([111,21,3,4000,5,6,7,8,9], 4); //24",
        "grade-10": {
            "execution": 1
        },
        "17": "let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] < 100){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nlet arr = [111,21,3,4000,5,6,7,8,9];\nlet k = 4;",
        "grade-17": {
            "execution": 1
        },
        "12": "let sum = 0;\n    for(let i = 0; i < k; i++){\n        sum += arr[i];\n    }\n    return sum;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "let result = 0;\n  for(let i = 0; i < k; i++){\n    if(arr[i] >= 10 && arr[i] < 100){\n      result += arr[i];\n    }\n  }\n  return result;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] < 100){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nlet arr = [111,21,3,4000,5,6,7,8,9];",
        "grade-18": {
            "execution": 1
        },
        "15": "// add code here\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "return (arr.filter(v => v < 100).length < k) ? arr.reduce((total,v) => total + v, 0) : arr.filter(v => v < 100).reduce((total,v) => total + v, 0);\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "// Code goes here\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] < 100){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "let sum = 0;\n  for(let i = 0; i < k; i++){\n    if(arr[i] < 100){\n      sum += arr[i];\n    }\n  }\n  return sum;\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] > 99){\n            break;\n        }\n        sum += arr[i];\n    }\n    return sum;\n}\n\nlet arr = [111,21,3,4000,5,6,7,8,9];\nlet k = 4;",
        "grade-14": {
            "execution": 0
        },
        "5": "return arr.slice(0, k).filter(x => x >= 10 && x <= 99).reduce((a, c) => a + c, 0);\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "let count = 0;\n  let i = 0;\n  while(i < arr.length && count < k){\n    if(arr[i] > 9 && arr[i] < 100){\n      count++;\n    }\n    i++;\n  }\n  return arr.slice(0,i).reduce((a,b) => {\n    if(b > 9 && b < 100){\n      return a + b;\n    }\n    return a;\n  }, 0);\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns True if x * n evaluates to a whole number and False\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// simplify(\"1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n// simplify(\"7/10\", \"10/2\") = False\nfunction simplify(x, n){\n",
        "snippet": [
            "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n"
        ],
        "simplified": "Your task is to implement a function that will simplify the expression x * n. The function returns True if x * n evaluates to a whole number and False otherwise. Both x and n, are string representation of a fraction, and have the following format, <numerator>/<denominator> where both numerator and denominator are positive whole numbers. You can assume that x, and n are valid fractions, and do not have zero as denominator.",
        "task_id": "144",
        "3": "var num1 = x.split('/')[0];\n  var den1 = x.split('/')[1];\n  var num2 = n.split('/')[0];\n  var den2 = n.split('/')[1];\n  var product = (num1 * num2) / (den1 * den2);\n  return product % 1 === 0;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "var xn= 1/(n.split(\"/\")[1])*(x.split(\"/\")[0]);\n    var nn= 1/(x.split(\"/\")[1])*(n.split(\"/\")[0]);\n    return xn % 1 === 0 && nn % 1 === 0;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "var frac1 = x.split('/').map(Number),\n      frac2 = n.split('/').map(Number),\n      dec1 = (frac1[0] / frac1[1]),\n      dec2 = (frac2[0] / frac2[1]),\n      num = dec1 * dec2,\n      whole = Math.floor(num),\n      rest = num - whole;\n  if (rest === 0) {\n    return true;\n  } else {\n    return false;\n  }\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "let x_numerator = x.split('/')[0]\n  let x_denominator = x.split('/')[1]\n  let n_numerator = n.split('/')[0]\n  let n_denominator = n.split('/')[1]\n  if(Number(x_numerator) * Number(n_denominator) === Number(n_numerator) * Number(x_denominator)) {\n    return true\n  } else {\n    return false\n  }\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "var a = x.split(\"/\");\n    var b = n.split(\"/\");\n    var c = (a[0]*b[1])/(a[1]*b[0]);\n    if(c % 1 === 0){\n        return true;\n    }else{\n        return false;\n    }\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "var xArray = x.split('/');\n  var nArray = n.split('/');\n  var xNum = Number(xArray[0]);\n  var xDen = Number(xArray[1]);\n  var nNum = Number(nArray[0]);\n  var nDen = Number(nArray[1]);\n  var xNumCopy = xNum;\n  var xDenCopy = xDen;\n  if(xNum < 0){\n    xNumCopy = Math.abs(xNum);\n  }\n  if(xDen < 0){\n    xDenCopy = Math.abs(xDen);\n  }\n  if(nNum < 0){\n    nNum = Math.abs(nNum);\n  }\n  if(nDen < 0){\n    nDen = Math.abs(nDen);\n  }\n  var xProduct = (xNumCopy*nDen);\n  var xDenProduct = (xDenCopy*nNum);\n  var gcdProduct = gcd(xProduct, xDenProduct);\n  if(gcdProduct === 1){\n    return false;\n  }\n  else{\n    return true;\n  }\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "let numerator = x.split('/')[0] / n.split('/')[0];\n    let denominator = x.split('/')[1] / n.split('/')[1];\n    return numerator % 1 === 0 && denominator % 1 === 0;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "var x_numerator = parseInt(x.split(\"/\")[0]);\n    var x_denominator = parseInt(x.split(\"/\")[1]);\n    var n_numerator = parseInt(n.split(\"/\")[0]);\n    var n_denominator = parseInt(n.split(\"/\")[1]);\n    var result = simplifyFraction(x_numerator * n_numerator, x_denominator * n_denominator);\n    if (result.denominator == 1) {\n        return true;\n    } else {\n        return false;\n    }\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "let num = x.split('/');\n    let den = n.split('/');\n    let fract = (num[0]*den[1])/(num[1]*den[0]);\n    return fract % 1 === 0;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "const [xNum, xDen] = x.split('/');\n    const [nNum, nDen] = n.split('/');\n    const resultNum = xNum * nNum;\n    const resultDen = xDen * nDen;\n    if (resultNum % resultDen === 0) {\n        return true;\n    }\n    return false;\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "return x=='1/1'||n=='1/1'||x[2]==n[2]&&+x[0]*+n[2]==+n[0]*+x[2]\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "var product = multiply(x, n);\n    var num = product.split(\"/\")[0];\n    var den = product.split(\"/\")[1];\n    var remainder = num % den;\n    if(remainder === 0){\n        return true;\n    }\n    return false;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "let xNumerator = x.split('/')[0];\n  let xDenominator = x.split('/')[1];\n  let nNumerator = n.split('/')[0];\n  let nDenominator = n.split('/')[1];\n  return (xNumerator * nDenominator) % (xDenominator * nNumerator) === 0 ? true : false;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "let xFraction = x.split('/');\n  let nFraction = n.split('/');\n  let xDecimal = xFraction[0] / xFraction[1];\n  let nDecimal = nFraction[0] / nFraction[1];\n  return xDecimal * nDecimal % 1 === 0;\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "var x_num = x.split(\"/\")[0] * n.split(\"/\")[1];\n\tvar x_den = x.split(\"/\")[1] * n.split(\"/\")[0];\n\treturn (x_num % x_den) == 0;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "const [numeratorX, denominatorX] = x.split('/').map(Number);\n    const [numeratorN, denominatorN] = n.split('/').map(Number);\n    return (numeratorX / denominatorX) * (numeratorN / denominatorN) % 1 === 0;\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "let a = x.split('/');\n    let b = n.split('/');\n    return a[0]/a[1] * b[0]/b[1] % 1 === 0 ? true : false;\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "let x1 = Number(x.split('/')[0])\n    let x2 = Number(x.split('/')[1])\n    let n1 = Number(n.split('/')[0])\n    let n2 = Number(n.split('/')[1])\n    return (x1 * n2) % (x2 * n1) === 0 ? true : false\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "var xD = parseInt(x.split('/')[1]);\n  var nD = parseInt(n.split('/')[1]);\n  var gcdD = gcd(xD, nD);\n  var x = x.split('/')[0]/gcdD;\n  var n = n.split('/')[0]/gcdD;\n  return x === n;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "let xArr = x.split('/')\n  let nArr = n.split('/')\n  let first = xArr[0]*nArr[1]\n  let second = xArr[1]*nArr[0]\n  if(first/second%1 === 0){\n    return true\n  } else {\n    return false\n  }\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n",
        "snippet": [
            "  return xs.map((x, i) => x * i).slice(1);\n}\n\n"
        ],
        "simplified": "xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 + .... Return derivative of this polynomial in the same form.",
        "task_id": "62",
        "3": "xs.shift(); //the first element is x^0 and will be 0, just remove it\n\treturn xs.map(function(e, i){ return (i+1) * e; });\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "var res = [];\n  for(var i = 1; i < xs.length; i++){\n    res.push(xs[i] * i);\n  }\n  return res;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "var ys = [];\n  for (var i = 1; i < xs.length; i++){\n    ys.push(xs[i] * i);\n  }\n  return ys;\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "var i = 1;\n    var res = [];\n    for(i = 1; i < xs.length; i++){\n    \tres.push(xs[i] * i);\n    }\n    return res;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "var result = [];\n  var i = 0;\n  var length = xs.length;\n  var coefficient;\n  for(; i < length; i++){\n    coefficient = i * xs[i];\n    if(coefficient !== 0){\n      result.push(coefficient);\n    }\n  }\n  return result;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "//YOUR CODE HERE\n    let arr=[];\n    for(let i=1;i<xs.length;i++){\n      arr.push(xs[i]*i);\n    }\n    return arr;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "let result = [];\n\tfor(let i = 1; i < xs.length; i++){\n\t\tresult.push(xs[i] * i);\n\t}\n\treturn result;\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "// ...\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "var newArr = [];\n\tfor(var i = 0; i < xs.length - 1; i++){\n\t\tnewArr.push(xs[i+1] * (i+1));\n\t}\n\treturn newArr;\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "//[3, 1, 2, 4, 5]\n\tvar res = [];\n\n\tfor(var i = 1; i < xs.length; i++){\n\t\tres.push(xs[i] * i);\n\t}\n\n\treturn res;\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "var new_xs = [];\n\tvar n = 0;\n\tfor(var i = 1; i < xs.length; i++){\n\t\tnew_xs[n] = xs[i] * i;\n\t\tn++;\n\t}\n\treturn new_xs;\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "var list = [];\n\tfor(var i = 1; i < xs.length; i++){\n\t\tlist.push(xs[i] * i);\n\t}\n\treturn list;\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "return xs.map((v, i) => i * v).slice(1);\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "// todo\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "var copy = xs.slice();\n  var deriv = [];\n  for (var i = 0; i < copy.length; i++){\n    deriv.push(copy[i] * i);\n  }\n  return deriv.slice(1);\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "var i,\n    solution = [],\n    numberOfCoefficients = xs.length;\n  for(i = 1; i < numberOfCoefficients; i++){\n    solution.push(xs[i] * i);\n  }\n  return solution;\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "var ret = []\n    for(var i = 1; i < xs.length; i++){\n        ret.push(xs[i] * i)\n    }\n    return ret\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "//slide 8\n    const new_xs = [];\n    for (let i = 1; i < xs.length; i++){\n        new_xs.push(xs[i] * i);\n    }\n    return new_xs;\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "var dx = [0];\n    for (var i = 0; i < xs.length; i++){\n        dx.push(xs[i] * (i + 1));\n    }\n    return dx.slice(1);\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "var result = [];\n\tfor(var i = 1; i < xs.length; i++){\n\t\tresult.push(xs[i] * i);\n\t}\n\treturn result;\n}",
        "grade-19": {
            "execution": 1
        }
    },
    {
        "intent": "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels('')\n// ''\n// >>> remove_vowels('abcdef')\n// 'bcdf'\n// >>> remove_vowels('aaaaa')\n// ''\n// >>> remove_vowels('aaBAA')\n// 'B'\n// >>> remove_vowels('zbcd')\n// 'zbcd'\nfunction remove_vowels(text){\n",
        "snippet": [
            "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n"
        ],
        "simplified": "remove_vowels is a function that takes string and returns string without vowels.",
        "task_id": "51",
        "3": "var reg = /[aeiou]/gi;\n\treturn text.replace(reg, '');\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "var vowels = \"aeiouAEIOU\";\n    var result = \"\";\n    for(var i = 0; i < text.length; i++){\n        if(vowels.indexOf(text[i]) == -1){\n            result += text[i];\n        }\n    }\n    return result;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "var vowels = ['a', 'e', 'i', 'o', 'u'];\n\tvar answer = '';\n\tfor (var i = 0; i < text.length; i++) {\n\t\tif (vowels.indexOf(text[i]) == -1) {\n\t\t\tanswer += text[i];\n\t\t}\n\t}\n\treturn answer;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "var vowels = \"aeiouAEIOU\";\n    var newText = \"\";\n    for (var i = 0; i < text.length; i++){\n        if (vowels.indexOf(text[i]) == -1){\n            newText += text[i];\n        }\n    }\n    return newText;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "var vowels = \"aeiouAEIOU\";\n\tvar result = \"\";\n\tfor(var i = 0; i < text.length; i++){\n\t\tif(vowels.indexOf(text[i]) == -1){\n\t\t\tresult += text[i];\n\t\t}\n\t}\n\treturn result;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "return text.replace(/[aeiouAEIOU]/g, '');\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var result = '';\n    for (var i = 0; i < text.length; i++){\n        if (vowels.indexOf(text[i]) == -1){\n            result += text[i];\n        }\n    }\n    return result;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "if (text.length == 0){\n    return '';\n  }\n  else if (text[0] == 'a' || text[0] == 'e' || text[0] == 'i' || text[0] == 'o' || text[0] == 'u' || text[0] == 'A' || text[0] == 'E' || text[0] == 'I' || text[0] == 'O' || text[0] == 'U'){\n    return remove_vowels(text.slice(1));\n  }\n  else{\n    return text[0] + remove_vowels(text.slice(1));\n  }\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "text=text.replace(/[aeiou]/g,\"\");\n  return text;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "return text.replace(/[aeiouAEIOU]/g, '');\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "return text.replace(/[aeiou]/gi, '');\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "let vowels = new Set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']);\n    let output = \"\";\n    for (let x of text){\n        if (!vowels.has(x)){\n            output += x;\n        }\n    }\n    return output;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "var vowels = ['a', 'e', 'i', 'o', 'u'];\n\tvar text_array = text.split('');\n\tfor (var i = 0; i < text_array.length; i++) {\n\t\tif (vowels.indexOf(text_array[i]) != -1) {\n\t\t\ttext_array.splice(i, 1);\n\t\t\ti--;\n\t\t}\n\t}\n\treturn text_array.join('');\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "var result = '';\n    for (var i = 0; i < text.length; i++){\n        if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U'){\n            result += text[i];\n        }\n    }\n    return result;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "return text.replace(/[aeiou]/gi, '');\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "//if the text is empty\n\tif(text.length === 0){\n\t\treturn '';\n\t}\n\t//if the text is just one letter\n\tif(text.length === 1){\n\t\t//if the text is not a vowel then return it\n\t\tif(text !== 'a' && text !== 'e' && text !== 'i' && text !== 'o' && text !== 'u'){\n\t\t\treturn text;\n\t\t}\n\t\t//if the text is a vowel return ''\n\t\telse{\n\t\t\treturn '';\n\t\t}\n\t}\n\t//if the text has more than one letter\n\telse{\n\t\t//if the first letter is not a vowel, then return it + remove_vowels function on the next letter\n\t\tif(text[0] !== 'a' && text[0] !== 'e' && text[0] !== 'i' && text[0] !== 'o' && text[0] !== 'u'){\n\t\t\treturn text[0] + remove_vowels(text.slice(1));\n\t\t}\n\t\t//if the first letter is a vowel, then return remove_vowels function on the next letter\n\t\telse{\n\t\t\treturn remove_vowels(text.slice(1));\n\t\t}\n\t}\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "var vowels = \"aeiouAEIOU\";\n    var text = text.split(\"\");\n    for(var i = 0; i < text.length; i++){\n        for(var j = 0; j < vowels.length; j++){\n            if(text[i] == vowels[j]){\n                text[i] = \"\";\n            }\n        }\n    }\n    text = text.join(\"\");\n    return text;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "const vowels = ['a', 'e', 'i', 'o', 'u'];\n    let result = '';\n    for (const char of text) {\n        if (!vowels.includes(char)) {\n            result += char;\n        }\n    }\n    return result;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "if(text === ''){\n        return '';\n    }else{\n        return text.replace(/[aeiou]/ig, '');\n    }\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "//Checking the string for vowels and removing them\n\tvar vowels = /[aeiou]/g;\n\tvar str = text.replace(vowels, '');\n\treturn str;\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n",
        "snippet": [
            "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n"
        ],
        "simplified": "You will be given a string of words separated by commas or spaces. Your task is to split the string into words and return an array of the words.",
        "task_id": "101",
        "0": "return s.split(/[ ,]+/);\n}",
        "grade-0": {
            "execution": 0
        },
        "1": "return s.split(/[\\s,]+/);\n}",
        "grade-1": {
            "execution": 0
        },
        "2": "return s.replace(/\\s/g,',').split(',')\n}",
        "grade-2": {
            "execution": 0
        },
        "3": "var words = s.split(/[\\s,]+/);\n  return words;\n}",
        "grade-3": {
            "execution": 0
        },
        "6": "// convert string to an array with the split method\n    var arr = s.split(\" \");\n    return arr;\n}",
        "grade-6": {
            "execution": 0
        },
        "7": "return s.split(/[ ,]+/);\n}",
        "grade-7": {
            "execution": 0
        },
        "8": "var result = [];\n    if (s) {\n        var ret = s.split(',');\n        ret.forEach(function (i) {\n            if (i) {\n                result.push(i.trim());\n            }\n        });\n    }\n    return result;\n}",
        "grade-8": {
            "execution": 0
        },
        "9": "return s.split(' ').filter(a => a);\n}",
        "grade-9": {
            "execution": 0
        },
        "10": "return s.split(/,| /)\n    // return s.split(/[\\s,]+/)\n}",
        "grade-10": {
            "execution": 0
        },
        "11": "return s.split(/[\\s,]+/g);\n}",
        "grade-11": {
            "execution": 0
        },
        "12": "return s.split(/[\\s,]+/);\n}",
        "grade-12": {
            "execution": 0
        },
        "15": "return s.split(/,| /)\n}",
        "grade-15": {
            "execution": 0
        },
        "16": "return s.split(/[\\s,]+/);\n}",
        "grade-16": {
            "execution": 0
        },
        "19": "return s.split(/[ ,]+/g);\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13, 12) = -1\nfunction choose_num(x, y){\n",
        "snippet": [
            "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n"
        ],
        "simplified": "This function takes two positive numbers x and y and returns the biggest even integer number that is in the range [x, y] inclusive. If there's no such number, then the function should return -1.",
        "task_id": "102",
        "3": "if(x%2==0 && y%2==0){\n\t\tif(x<y){\n\t\t\treturn y;\n\t\t}\n\t\treturn x;\n\t}\n\tif(x%2==0 && y%2!=0){\n\t\treturn x;\n\t}\n\tif(x%2!=0 && y%2==0){\n\t\treturn y;\n\t}\n\treturn -1;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "if(x % 2 == 0){\n\t\treturn x;\n\t}\n\telse if(y % 2 == 0){\n\t\treturn y;\n\t}\n\telse if(x > y){\n\t\treturn -1;\n\t}\n\telse{\n\t\treturn -1;\n\t}\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "// Your answer here\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "if(x % 2 == 0 && y % 2 == 0){\n\t\treturn y;\n\t}\n\telse if(x % 2 == 0 && y % 2 != 0){\n\t\treturn x;\n\t}\n\telse if(x % 2 != 0 && y % 2 == 0){\n\t\treturn y;\n\t}\n\telse{\n\t\treturn -1;\n\t}\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "var result = 0;\n\tvar num = 0;\n\t\n\tif(x<=y){\n\t\tfor(var i=x; i<=y; i++){\n\t\t\tif(i%2 == 0){\n\t\t\t\tresult = i;\n\t\t\t}\n\t\t}\n\t}\n\telse{\n\t\tresult = -1;\n\t}\n\tconsole.log(result);\n}\n\nchoose_num(10, 20);\nchoose_num(20, 10);\nchoose_num(10, 21);\nchoose_num(5, 10);",
        "grade-16": {
            "execution": 0
        },
        "2": "if(x % 2 === 0)\n        return x;\n    if(y % 2 === 0)\n        return y;\n    return -1;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "var num = -1;\n\tvar num2 = Math.max(x, y);\n\t\n\tfor(var i = x; i <= num2; i++){\n\t\tif(i % 2 == 0 && i > num){\n\t\t\tnum = i;\n\t\t}\n\t}\n\t\n\treturn num;\n\t\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "if(x % 2 == 0) return x;\n    if(y % 2 == 0) return y;\n    else return -1;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "if(x>y){\n\t\treturn -1;\n\t}\n\tif(x%2==0){\n\t\treturn x;\n\t}\n\telse{\n\t\treturn x+1;\n\t}\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "if(x > y){\n        return -1;\n    }\n    if(x%2 === 0){\n        return x;\n    }\n    return choose_num(x+1, y);\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "var x = prompt(\"Enter a number\");\n    var y = prompt(\"Enter another number\");\n    var a = x;\n    var b = y;\n    if(x>y){\n        while(a>=b){\n            if(a%2 == 0){\n                return a;\n            }\n            a--;\n        }\n    }\n    else if(y>x){\n        while(b>=a){\n            if(b%2 == 0){\n                return b;\n            }\n            b--;\n        }\n    }\n    else{\n        return \"This is not a valid range\";\n    }\n}\nalert(choose_num());",
        "grade-12": {
            "execution": 0
        },
        "6": "for(var i = y; i >= x; i--){\n        if(i % 2 == 0){\n            return i;\n        }\n    }\n    return -1;\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "if(x > y){\n        return -1;\n    }\n    if(x % 2 == 0){\n        return x;\n    }\n    else{\n        x++;\n        return choose_num(x, y);\n    }\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "var result = -1;\n\n\t//your code here\n    for (var i = x; i <= y; i++) {\n        if (i % 2 == 0) {\n            result = i;\n        }\n    }\n\treturn result;\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "if(x % 2 === 0){\n        for(let i = x; i <= y; i++){\n            if(i % 2 === 0 && i < y){\n                x = i;\n            }\n        }\n        return x;\n    }\n    else if(y % 2 === 0){\n        for(let i = y; i >= x; i--){\n            if(i % 2 === 0 && i > x){\n                y = i;\n            }\n        }\n        return y;\n    }\n    else{\n        return -1;\n    }\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "let evens = [];\n  for (let i = x; i <= y; i++){\n    if (i % 2 === 0){\n      evens.push(i);\n    }\n  }\n  if (evens.length === 0){\n    return -1;\n  }\n  else {\n    return Math.max(...evens);\n  }\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "for(var i = y; i >= x; i--){\n    if(i % 2 === 0){\n      return i;\n    }\n  }\n  return -1;\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "var array = [];\n    for(var i = x; i <= y; i++){\n        if(i % 2 == 0){\n            array.push(i);\n        }\n    }\n    return array[array.length - 1] || -1;\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "// Your code here\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "var n = Math.max(x, y);\n    for(i = n; i >= Math.min(x, y); i--){\n        if(i % 2 == 0){\n            return i;\n        }\n    }\n    return -1;\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n",
        "snippet": [
            "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n"
        ],
        "simplified": "prime_fib returns n-th number that is a Fibonacci number and it's also prime.",
        "task_id": "39",
        "3": "}",
        "grade-3": {
            "execution": 0
        },
        "0": "return 0;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "var counter = 0;\n\tvar fibonacci = fib(0);\n\tvar i = 0;\n\twhile(counter < n){\n\t\tif(prime(fibonacci)){\n\t\t\tcounter++;\n\t\t}\n\t\ti++;\n\t\tfibonacci = fib(i);\n\t}\n\treturn fibonacci;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "return FibonacciRecursive(n);\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "var prime_fib_num = 0;\n\tvar fib_num = 0;\n\tvar count = 0;\n\tvar prime_count = 0;\n\tvar fib_arr = [0,1];\n\twhile(count <= n){\n\t\tfib_num = fib_arr[count-1] + fib_arr[count];\n\t\tfib_arr.push(fib_num);\n\t\tcount++;\n\t\tif(is_prime(fib_num)){\n\t\t\tprime_count++;\n\t\t\tprime_fib_num = fib_num;\n\t\t}\n\t}\n\treturn prime_fib_num;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "var count = 2;\n    var nth_fib = 1;\n    var fib_1 = 1;\n    var fib_2 = 1;\n    while(count<=n){\n        nth_fib = fib_1 + fib_2;\n        fib_2 = fib_1;\n        fib_1 = nth_fib;\n        if(is_prime(nth_fib)){\n            count += 1;\n        }\n    }\n    return nth_fib;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "var prim = 2;\n\tvar fib1 = 1;\n\tvar fib2 = 2;\n\tfor(var i = 0; i<n; i++){\n\t\tvar fib = fib1 + fib2;\n\t\tfib1 = fib2;\n\t\tfib2 = fib;\n\t\tfor(var j = 2; j< fib; j++){\n\t\t\tif(fib%j == 0){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(j == fib-1){\n\t\t\t\tprim = fib;\n\t\t\t}\n\t\t}\n\t}\n\treturn prim;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "var array = [];\n\tarray.push(2);\n\tarray.push(3);\n\tvar i = 2;\n\tvar j = 0;\n\twhile(i<n){\n\t\tarray.push(array[j]+array[j+1]);\n\t\tif(isPrime(array[j+2])){\n\t\t\ti++;\n\t\t}\n\t\tj++;\n\t}\n\treturn array[array.length-1];\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "if(n==1){\n    return 2;\n  }\n  if(n==2){\n    return 3;\n  }\n  let fibn1=2;\n  let fibn2=3;\n  let fibn=5;\n  let fib=5;\n  let num=3;\n  while(num<n){\n    if(is_prime(fibn)){\n      num++;\n      fib=fibn;\n    }\n    fibn=fibn1+fibn2;\n    fibn1=fibn2;\n    fibn2=fibn;\n  }\n  return fib;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "if(n == 1){\n\t\treturn 2;\n\t}else if(n == 2){\n\t\treturn 3;\n\t}else{\n\t\tvar fN = 2;\n\t\tvar fNm1 = 1;\n\t\tvar fNm2 = 0;\n\t\tvar count = 2;\n\t\twhile(count < n){\n\t\t\tfN = fNm1 + fNm2;\n\t\t\tif(isPrime(fN)){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tfNm2 = fNm1;\n\t\t\tfNm1 = fN;\n\t\t}\n\t\treturn fN;\n\t}\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "let prime_fib_list = [];\n    let fib_list = fibonacci_num(100);\n    for(let i = 0; i < fib_list.length; i++){\n        if(is_prime(fib_list[i])){\n            prime_fib_list.push(fib_list[i]);\n        }\n    }\n    return prime_fib_list[n - 1];\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "var a = 2, b = 3, i = 0;\n  while(i < n){\n    var sum = a + b;\n    if(isPrime(sum)){\n      i++;\n    }\n    a = b;\n    b = sum;\n  }\n  return a;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "var num = 0;\n    var fibonacci = 0;\n    var fibonacci_prime = 0;\n    var first = 0;\n    var second = 1;\n    var i = 0;\n    while(i < n){\n        fibonacci = first + second;\n        first = second;\n        second = fibonacci;\n        if(is_prime(fibonacci)){\n            i += 1;\n            num = fibonacci;\n        }\n    }\n    return num;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "var nth_number = 0;\n    var current_number = 0;\n    var prev_number = 0;\n    var next_number = 1;\n    var count = 0;\n    while(count < n){\n        if(is_prime(current_number)){\n            nth_number = current_number;\n            count++;\n        }\n        current_number = prev_number + next_number;\n        prev_number = next_number;\n        next_number = current_number;\n    }\n    return nth_number;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "var i=0;\n  var first = 0;\n  var second = 1;\n  var count = 0;\n  while(count<n){\n    var fib = first + second;\n    if(isPrime(fib)){\n      count++;\n    }\n    first = second;\n    second = fib;\n  }\n  return fib;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "var fib = fibonacci(n);\n    if(fib >= 2 && prime(fib)){\n        return fib;\n    }\n    else{\n        return prime_fib(n+1);\n    }\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "var fib_num = fib(n);\n    var prime_fib_num = 0;\n    var i = 0;\n    while (prime_fib_num < n){\n        if (is_prime(fib_num)){\n            i++;\n            prime_fib_num = i;\n        }\n        fib_num = fib(fib_num);\n    }\n    return fib_num;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "var i = 1;\n    var fib1 = 1;\n    var fib2 = 1;\n    var fibN = 1;\n    var count = 0;\n    while(i <= n){\n        if(isPrime(fibN)){\n            count += 1;\n        }\n        if(count == n){\n            return fibN;\n        }\n        fibN = fib1 + fib2;\n        fib1 = fib2;\n        fib2 = fibN;\n        i += 1;\n    }\n    return fibN;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "var i = 0;\n\tvar j = 1;\n\tvar count = 0;\n\tvar result = 0;\n\twhile(count<n){\n\t\tif(isPrime(i)){\n\t\t\tif(i%2 == 0){\n\t\t\t\tresult = i;\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tvar k = i+j;\n\t\ti = j;\n\t\tj = k;\n\t}\n\treturn result;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "var i = 2;\n    var count = 0;\n    while(count < n){\n        if(is_prime(fib(i))){\n            count++;\n        }\n        i++;\n    }\n    return fib(i-1);\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// is_equal_to_sum_even(4) == False\n// is_equal_to_sum_even(6) == False\n// is_equal_to_sum_even(8) == True\nfunction is_equal_to_sum_even(n){\n",
        "snippet": [
            "  return (n >= 8 && n % 2 == 0)\n}\n\n"
        ],
        "simplified": "Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers",
        "task_id": "138",
        "3": "let x = n - 8;\n    if (x % 2 != 0 || x < 0){\n        return false;\n    } else {\n        return true;\n    }\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "if(n===0) return true;\n    if(n%2===1 || n<0) return false;\n    return is_equal_to_sum_even(n-2);\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "for(let i = 1; i < n; i++){\n        for(let j = 1; j < n; j++){\n            for(let k = 1; k < n; k++){\n                for(let l = 1; l < n; l++){\n                    if((i * 2) + (j * 2) + (k * 2) + (l * 2) == n){\n                        return true;\n                    }\n                }\n            }\n        }\n    }\n    return false;\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "return (n/2) % 1 === 0\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "return n%2 === 0 && n !== 0\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "if (n % 2 === 0){\n    return true;\n  } else {\n    return false;\n  }\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "//write your code here\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "// Write your code here...\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "let sum = 0;\n  let evenNumber = 2;\n  while(evenNumber <= n){\n    sum += evenNumber;\n    evenNumber += 2;\n  }\n  return sum === n;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "let result = n % 2 == 0 ? (n - 2) : n\n    let count = 1\n    for(let i = 0; i < n / 2 - 1; i++) {\n        if (result >= 0) {\n            result -= 4\n            count++\n        }\n    }\n    return count == 4 ? true : false\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "return false;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "}",
        "grade-6": {
            "execution": 0
        },
        "18": "// if (n % 2 !== 0) {\n    //     return false;\n    // }\n    // var res = [];\n    // for (let i = 0; i < n; i++) {\n    //     for (let j = 0; j < n; j++) {\n    //         for (let k = 0; k < n; k++) {\n    //             for (let l = 0; l < n; l++) {\n    //                 var sum = i + j + k + l;\n    //                 if (sum === n) {\n    //                     var is_odd = i % 2 !== 0 || j % 2 !== 0 || k % 2 !== 0 || l % 2 !== 0;\n    //                     if (!is_odd) {\n    //                         res.push([i, j, k, l]);\n    //                     }\n    //                 }\n    //             }\n    //         }\n    //     }\n    // }\n    // return res.length > 0;\n    var count = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n            for (let k = 0; k < n; k++) {\n                for (let l = 0; l < n; l++) {\n                    var sum = i + j + k + l;\n                    if (sum === n) {\n                        var is_odd = i % 2 !== 0 || j % 2 !== 0 || k % 2 !== 0 || l % 2 !== 0;\n                        if (!is_odd) {\n                            count += 1;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return count === 4;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "let answer = false;\n    let list = [2, 4, 6, 8];\n    let i = 0;\n    while (i < list.length) {\n        if (list[i] === n) {\n            answer = true;\n        }\n        i++;\n    }\n    return answer;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "//variables\n    let total = 0;\n    let remainder = 0;\n    let count = 0;\n    //loop through and adding\n    for(i = 0; i < n; i++){\n        //checking for the remainder\n        remainder = i % 2;\n        //checking for the remainder\n        if(remainder == 0){\n            //adding to the total\n            total += i;\n            //checking for the total to equal the given number\n            if(total == n){\n                //adding to the count\n                count++;\n            }//end of if statement\n        }//end of if statement\n    }//end of for loop\n    //checking for count to equal four\n    if(count == 4){\n        //returning true\n        return true;\n    }//end of if statement\n    //returning false\n    return false;\n}//end of function",
        "grade-13": {
            "execution": 0
        },
        "9": "// Your code here\n    var isTrue = false;\n    for(var i = 1; i < n; i++){\n        for(var j = i + 1; j < n; j++){\n            for(var k = j + 1; k < n; k++){\n                for(var l = k + 1; l < n; l++){\n                    if(i + j + k + l == n && (i % 2 == 0) && (j % 2 == 0) && (k % 2 == 0) && (l % 2 == 0)){\n                        isTrue = true;\n                    }\n                }\n            }\n        }\n    }\n    return isTrue;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "var i = 0, sum = 0;\n    while(sum < n){\n        sum += 2*i;\n        i++;\n    }\n    return sum == n;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "return sum_of_numbers(n)\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "var result = false;\n  var even = 2;\n  var i = 0;\n  while (even <= n && i < 3) {\n    result = result || is_equal_to_sum_even(n - even);\n    even += 2;\n    i++;\n  }\n  return result || n == 0;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "var sum = 0;\n\tif(n === 0)\n\t\treturn false;\n\tfor(var i = 2; i <= n; i+=2){\n\t\tsum += i;\n\t\tif(sum === n)\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return list of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n",
        "snippet": [
            "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n"
        ],
        "simplified": "Input to this function is a string representing musical notes in a special ASCII format. Your task is to parse this string and return list of integers corresponding to how many beats does each not last. Here is a legend: 'o' - whole note, lasts four beats 'o|' - half note, lasts two beats '.|' - quater note, lasts one beat",
        "task_id": "17",
        "3": "var note = '';\n\tvar beats = [];\n\tvar i = 0;\n\tvar res = [];\n\twhile(i < music_string.length){\n\t\tif(music_string[i] == ' '){\n\t\t\tif(note == 'o'){\n\t\t\t\tbeats.push(4);\n\t\t\t}\n\t\t\telse if(note == 'o|'){\n\t\t\t\tbeats.push(2);\n\t\t\t}\n\t\t\telse if(note == '.|'){\n\t\t\t\tbeats.push(1);\n\t\t\t}\n\t\t\tnote = '';\n\t\t}\n\t\telse{\n\t\t\tnote += music_string[i];\n\t\t}\n\t\ti++;\n\t}\n\tif(note == 'o'){\n\t\tbeats.push(4);\n\t}\n\telse if(note == 'o|'){\n\t\tbeats.push(2);\n\t}\n\telse if(note == '.|'){\n\t\tbeats.push(1);\n\t}\n\treturn beats;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "var pattern = /[o.].\\|?/g;\n    var beats = [];\n    var result;\n    while ((result = pattern.exec(music_string)) !== null) {\n        var whole_note = result[0];\n        var dot = whole_note.split(\"|\");\n        var dot_length = dot.length;\n        var beat = whole_note.replace(\"o\", \"4\");\n        beat = beat.replace(\".\", \"1\");\n        beat = parseInt(beat);\n        beats.push(beat);\n    }\n    return beats;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "let output = [],\n        i = 0,\n        obj = {\n            'o': '4',\n            'o|': '2',\n            '.|': '1'\n        };\n    while(music_string.length){\n        output.push(Number(obj[music_string.slice(0, 2)]));\n        music_string = music_string.slice(2, music_string.length);\n    }\n    return output;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "var beats = [];\n  var new_music_string = music_string.split(' ');\n  for (i=0; i<new_music_string.length; i++){\n    if (new_music_string[i] == 'o'){\n      beats.push(4);\n    }\n    else if (new_music_string[i] == 'o|'){\n      beats.push(2);\n    }\n    else if (new_music_string[i] == '.|'){\n      beats.push(1);\n    }\n  }\n  return beats;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "const note_types = ['whole', 'half', 'quarter'];\n    const music_notes = music_string.split(' ');\n    const values = [4, 2, 1];\n    let result = [];\n    for (let note of music_notes){\n        if (note[0] === 'o') {\n            if (note.length === 1) {\n                result.push(values[0]);\n            } else {\n                result.push(values[1]);\n            }\n        } else {\n            result.push(values[2]);\n        }\n    }\n    return result;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "let bars = music_string.split(' ');\n    let result = [];\n    for (let i = 0; i < bars.length; i++) {\n        if (bars[i] === 'o') {\n            result.push(4);\n        } else if (bars[i] === 'o|') {\n            result.push(2);\n        } else if (bars[i] === '.|') {\n            result.push(1);\n        }\n    }\n    return result;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "//parse the music string and create an array of numbers\n    var array = [];\n    if(music_string === ''){\n        return array;\n    }\n    var temp = music_string.split(\" \");\n    for(var i = 0; i < temp.length; i++){\n        if(temp[i] === 'o'){\n            array.push(4);\n        }\n        else if(temp[i] === 'o|'){\n            array.push(2);\n        }\n        else if(temp[i] === '.|'){\n            array.push(1);\n        }\n    }\n    return array;\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "let beats = []\n  let split = music_string.split(' ')\n  for (let i = 0; i < split.length; i++) {\n    let note = split[i]\n    if (note == 'o') {\n      beats.push(4)\n    } else if (note == 'o|') {\n      beats.push(2)\n    } else if (note == '.|') {\n      beats.push(1)\n    }\n  }\n  return beats\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "var beats = {\n        'o' : 4,\n        'o|' : 2,\n        '.|' : 1\n    };\n    var result = [];\n    var notes = music_string.split(' ');\n    notes.forEach(function(note){\n        result.push(beats[note]);\n    });\n    return result;\n}\n\nmodule.exports = {\n    fibonacci: fibonacci,\n    format_date: format_date,\n    find_longest_word: find_longest_word,\n    get_words_with_length: get_words_with_length,\n    find_duplicate_id: find_duplicate_id,\n    get_words_with_two_vowels: get_words_with_two_vowels,\n    get_words_with_x_vowels: get_words_with_x_vowels,\n    get_words_ending_with_ing: get_words_ending_with_ing,\n    get_words_with_b_and_ing: get_words_with_b_and_ing,\n    map_words_to_camel_case: map_words_to_camel_case,\n    map_words_to_snake_case: map_words_to_snake_case,\n    map_words_to_all_caps: map_words_to_all_caps,\n    map_words_to_length: map_words_to_length,\n    map_words_to_first_letter: map_words_to_first_letter,\n    map_words_to_array_of_chars: map_words_to_array_of_chars,\n    map_words_to_length_of_first_and_last_chars: map_words_to_length_of_first_and_last_chars,\n    remove_chars_from_first_and_last: remove_chars_from_first_and_last,\n    get_nth_item: get_nth_item,\n    concat_first_two_strings: concat_first_two_strings,\n    find_first_",
        "grade-10": {
            "execution": 0
        },
        "17": "var notes = music_string.split(' ');\n\tvar note_value = ['o', 'o|', '.|', '..'];\n\tvar note_time = [4, 2, 1, 0.5];\n\tvar time = [];\n\tvar i = 0;\n\twhile(notes[i]){\n\t\tvar j = 0;\n\t\twhile(note_value[j]){\n\t\t\tif(notes[i] == note_value[j]){\n\t\t\t\ttime.push(note_time[j]);\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn time;\n}\nparse_music('o o| .| o| o| .| .| .| .| o o');",
        "grade-17": {
            "execution": 1
        },
        "12": "var notes = ['o|', '.|', 'o'];\n    var beats = [2, 1, 4];\n    var parsed_music = music_string.split(' ');\n    var result = [];\n    for (var i = 0; i < parsed_music.length; i++){\n        for (var j = 0; j < notes.length; j++){\n            if (parsed_music[i] == notes[j]){\n                result.push(beats[j]);\n            }\n        }\n    }\n    return result;\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "return music_string.split(' ').map(m => {\n        switch(m) {\n            case 'o':\n                return 4;\n            case 'o|':\n                return 2;\n            case '.|':\n                return 1;\n        }\n    });\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "let result = [];\n\tlet notes = music_string.split(' ');\n\tnotes.forEach(function(item){\n\t\tswitch(item){\n\t\t\tcase 'o':\n\t\t\t\tresult.push(4);\n\t\t\t\tbreak;\n\t\t\tcase 'o|':\n\t\t\t\tresult.push(2);\n\t\t\t\tbreak;\n\t\t\tcase '.|':\n\t\t\t\tresult.push(1);\n\t\t\t\tbreak;\n\t\t}\n\t});\n\treturn result;\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "var result = [];\n\tvar array_of_notes = music_string.split(' ');\n\tfor (var i = 0; i < array_of_notes.length; i++) {\n\t\tif (array_of_notes[i].charAt(0) == 'o') {\n\t\t\tif (array_of_notes[i].charAt(1) == '|') {\n\t\t\t\tresult.push(2);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tresult.push(4);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tresult.push(1);\n\t\t}\n\t}\n\treturn result;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "return music_string.split(' ').map(x => {\n        switch(x) {\n            case 'o': return 4;\n            case 'o|': return 2;\n            case '.|': return 1;\n        }\n    });\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "var countArray = [];\n  for (var i = 0; i < music_string.length; i++){\n    if (music_string[i] == 'o'){\n      countArray.push(4);\n    }\n    else if (music_string[i] == 'o' && music_string[i+1] == '|'){\n      countArray.push(2);\n    }\n    else if (music_string[i] == '.' && music_string[i+1] == '|'){\n      countArray.push(1);\n    }\n  }\n  return countArray;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "let result = [];\n    const map = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    };\n    music_string.split(' ').forEach(function(note){\n        result.push(map[note]);\n    });\n    return result;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "var result = [];\n  var beats = 0;\n  for(var i = 0; i < music_string.length; i++){\n    if(music_string[i] === 'o'){\n      beats = 4;\n    }else if(music_string[i] === '|'){\n      beats = beats/2;\n    }else if(music_string[i] === '.'){\n      beats = 1;\n    }\n    result.push(beats);\n  }\n  return result;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "var beats = {'o': 4, 'o|': 2, '.|': 1};\n    var array = music_string.split(' ');\n    var result = [];\n    for (var i = 0; i < array.length; i++) {\n        result.push(beats[array[i]]);\n    }\n    return result;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n// True\n// >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd', 'dddddddabc')\n// False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n// False\nfunction same_chars(s0, s1){\n",
        "snippet": [
            "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n"
        ],
        "simplified": "Check if two words have the same characters.",
        "task_id": "54",
        "3": "if(s0.length !== s1.length){\n        return false;\n    }\n    var obj = {};\n    for(var i = 0; i < s0.length; i++){\n        var s = s0[i];\n        if(obj[s]){\n            obj[s]++;\n        }else{\n            obj[s] = 1;\n        }\n    }\n    for(var i = 0; i < s1.length; i++){\n        var s = s1[i];\n        if(obj[s]){\n            obj[s]--;\n        }else{\n            return false;\n        }\n    }\n    for(var key in obj){\n        if(obj[key] !== 0){\n            return false;\n        }\n    }\n    return true;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "if (s0.length != s1.length) return false;\n  else{\n    for (let i = 0; i < s0.length; i++){\n      if (!s1.includes(s0[i])) return false;\n    }\n    return true;\n  }\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "var empty = [];\n\tvar str1 = s0.split(\"\");\n\tvar str2 = s1.split(\"\");\n\tstr1.sort();\n\tstr2.sort();\n\tfor(var i = 0; i < str1.length; i++){\n\t\tif(str1[i] != str2[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "var n0 = s0.length, n1 = s1.length;\n\tif(n0 > n1){\n\t\treturn false;\n\t}\n\tvar a0 = s0.split('').sort(), a1 = s1.split('').sort();\n\tfor(var i=0; i<n0; i++){\n\t\tif(a0[i] != a1[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "if(s0.length != s1.length){\n\t\treturn false;\n\t}\n\tfor(var i = 0; i < s0.length; i++){\n\t\tfor(var j = 0; j < s1.length; j++){\n\t\t\tif(s0[i] == s1[j]){\n\t\t\t\ts1 = s1.substring(0, j) + s1.substring(j + 1);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn (s1.length == 0);\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "let s0_dict = {};\n\tlet s1_dict = {};\n\tfor (let i=0; i<s0.length; i++){\n\t\tlet char = s0[i];\n\t\tif (s0_dict[char]){\n\t\t\ts0_dict[char] += 1;\n\t\t}\n\t\telse{\n\t\t\ts0_dict[char] = 1;\n\t\t}\n\t}\n\tfor (let i=0; i<s1.length; i++){\n\t\tlet char = s1[i];\n\t\tif (s1_dict[char]){\n\t\t\ts1_dict[char] += 1;\n\t\t}\n\t\telse{\n\t\t\ts1_dict[char] = 1;\n\t\t}\n\t}\n\tfor (let key in s0_dict){\n\t\tif (!s1_dict[key] || s0_dict[key] !== s1_dict[key]){\n\t\t\treturn false;\n\t\t}\n\t}\n\tfor (let key in s1_dict){\n\t\tif (!s0_dict[key] || s0_dict[key] !== s1_dict[key]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "if(s0.length !== s1.length){\n        return false;\n    }\n    let charCount = {};\n    for(let i = 0; i < s0.length; i++){\n        if(charCount[s0[i]] === undefined){\n            charCount[s0[i]] = 1;\n        }else{\n            charCount[s0[i]]++;\n        }\n    }\n    for(let i = 0; i < s1.length; i++){\n        if(charCount[s1[i]] === undefined){\n            return false;\n        }else{\n            charCount[s1[i]]--;\n        }\n    }\n    return true;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "var letters = {};\n    var i = 0;\n    while(i < s0.length){\n        if(letters[s0[i]] === undefined){\n            letters[s0[i]] = 1;\n        } else {\n            letters[s0[i]] += 1;\n        }\n        i++;\n    }\n    i = 0;\n    while(i < s1.length){\n        if(letters[s1[i]] === undefined){\n            return false;\n        } else {\n            letters[s1[i]] -= 1;\n        }\n        i++;\n    }\n    var j = 0;\n    for(var key in letters){\n        if(letters[key] !== 0){\n            return false;\n        }\n    }\n    return true;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "//split then sort\n\t// \t-> array of characters\n\t// -> no duplicates\n\t// ->\n\t// \"abcd\"\n\t// s0 = \"eabcdzzzz\"\n\t// s1 = \"dddzzzzzzzddeddabc\"\n\t//   a b c d e z\n\t// d 4 1 1 0 0 5\n\t// e 1 0 0 0 1 0\n\t// a 0 1 0 0 0 0\n\t// b 0 0 1 0 0 0\n\t// c 0 0 0 1 0 0\n\t// z 0 0 0 0 0 5\n\t// dddzzzzzzzddeddabc\n\t// eabcdzzzz\n\t// array of characters\n\t// and count (hash table)\n\t// for each string\n\t// \tfor each character\n\t// \t\tcount++\n\t//\n\t// for each string\n\t// \tfor each character\n\t// \t\tcount--\n\t// \t\tif count < 0\n\t// \t\t\treturn false\n\t// return true\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//",
        "grade-10": {
            "execution": 0
        },
        "17": "if(s0.length !== s1.length){\n\t\treturn false;\n\t}\n\n\tvar hash = {};\n\tfor(var i = 0; i < s0.length; i++){\n\t\tif(hash[s0[i]] === undefined){\n\t\t\thash[s0[i]] = 1;\n\t\t} else {\n\t\t\thash[s0[i]]++;\n\t\t}\n\t}\n\n\tfor(var i = 0; i < s1.length; i++){\n\t\tif(hash[s1[i]] === undefined){\n\t\t\treturn false;\n\t\t} else {\n\t\t\thash[s1[i]]--;\n\t\t}\n\t}\n\n\treturn true;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "return (new Set(s0)).size === (new Set(s1)).size;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "if(s0.length !== s1.length){\n        return false;\n    }\n    if(s0.length === 0){\n        return true;\n    }\n    let s0freq = {};\n    let s1freq = {};\n    for(let i = 0; i < s0.length; i++){\n        if(s0freq[s0[i]]){\n            s0freq[s0[i]]++;\n        } else {\n            s0freq[s0[i]] = 1;\n        }\n        if(s1freq[s1[i]]){\n            s1freq[s1[i]]++;\n        } else {\n            s1freq[s1[i]] = 1;\n        }\n    }\n    for(let i = 0; i < s0.length; i++){\n        if(s0freq[s0[i]] !== s1freq[s0[i]]){\n            return false;\n        }\n    }\n    return true;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "let tmp = {};\n    for(let i=0; i<s0.length; i++){\n        tmp[s0[i]] = tmp[s0[i]] + 1 || 1;\n    }\n    for(let i=0; i<s1.length; i++){\n        if(tmp[s1[i]]){\n            tmp[s1[i]] = tmp[s1[i]] - 1;\n        }\n    }\n    for(let key in tmp){\n        if(tmp[key] !== 0){\n            return false;\n        }\n    }\n    return true;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "if(s0.length != s1.length){\n\t\treturn false;\n\t}\n\tfor(let i = 0; i < s0.length; i++){\n\t\tif(s0.indexOf(s1[i]) < 0){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "// TODO: this is your task.\n    var s0 = s0.toLowerCase();\n    var s1 = s1.toLowerCase();\n    if (s0.length != s1.length) {\n        return false;\n    }\n    var a0 = [];\n    var a1 = [];\n    for (var i = 0; i < s0.length; i++) {\n        a0.push(s0[i]);\n        a1.push(s1[i]);\n    }\n    a0.sort();\n    a1.sort();\n    return (a0.join('') == a1.join(''));\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "if (s0.length != s1.length) {\n    return false;\n  }\n  var chars = {};\n  for (var i = 0; i < s0.length; i++) {\n    if (chars[s0[i]] === undefined) {\n      chars[s0[i]] = 1;\n    } else {\n      chars[s0[i]]++;\n    }\n  }\n  for (var i = 0; i < s1.length; i++) {\n    if (chars[s1[i]] === undefined) {\n      return false;\n    } else {\n      chars[s1[i]]--;\n    }\n  }\n  return true;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "if(s0.length != s1.length){\n        return false;\n    }\n    if(s0 == \"\" && s1 == \"\"){\n        return true;\n    }\n    var s0 = s0.split(\"\");\n    var s1 = s1.split(\"\");\n    for(var i = 0; i < s0.length; i++){\n        var index = s1.indexOf(s0[i]);\n        if(index == -1){\n            return false;\n        }\n        s1.splice(index, 1);\n    }\n    return true;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "var s0a = s0.split('').sort().join('')\n  var s1a = s1.split('').sort().join('')\n  return s0a === s1a\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "if(s0.length !== s1.length){\n        return false;\n    }\n    for(var i = 0; i < s0.length; i++){\n        if(s0.indexOf(s1[i]) !== -1){\n            var newS0 = s0.slice(0, s0.indexOf(s1[i])) + s0.slice(s0.indexOf(s1[i]) + 1, s0.length);\n            var newS1 = s1.slice(0, i) + s1.slice(i + 1, s1.length);\n            if(same_chars(newS0, newS1)){\n                return true;\n            }\n        }\n    }\n    return false;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "var x = s0.split('').sort().join('');\n  var y = s1.split('').sort().join('');\n  if (x == y){\n    return true;\n  }\n  else{\n    return false;\n  }\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunction find_max(words){\n",
        "snippet": [
            "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n"
        ],
        "simplified": "Write a function that accepts a list of strings. The list contains different words. Return the word with maximum number of unique characters. If multiple strings have maximum number of unique characters, return the one which comes first in lexicographical order.",
        "task_id": "158",
        "3": "var string = \"\";\n  for(var i = 0; i < words.length; i++){\n    var count = 0;\n    for(var j = 0; j < words[i].length; j++){\n      if(words[i].lastIndexOf(words[i][j]) === words[i].indexOf(words[i][j])){\n        count++;\n      }\n    }\n    if(count > string.length){\n      string = words[i];\n    }\n  }\n  return string;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "words.sort();\n    var max = 0;\n    var res = \"\";\n    for(var i = 0; i < words.length; i++){\n        if(get_uniq(words[i]).length > max){\n            max = get_uniq(words[i]).length;\n            res = words[i];\n        }\n    }\n    return res;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "var max = 0;\n  var result = '';\n  for(var i = 0; i < words.length; i++){\n    var word = words[i];\n    var currentMax = getUniqueCount(word);\n    if(currentMax > max){\n      max = currentMax;\n      result = word;\n    }\n  }\n  return result;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "let result = words[0];\n    for(let i = 1; i < words.length; i++){\n        if(words[i].length > result.length){\n            result = words[i];\n        }\n    }\n    return result;\n}\nlet t = find_max([\"name\", \"of\", \"string\"]);",
        "grade-7": {
            "execution": 0
        },
        "16": "var mostUniqueChars = 0;\n  var wordMostUniqueChars = \"\";\n  var charsArray = [];\n  var chars = {};\n  words.forEach(function(word){\n    charsArray = word.split(\"\");\n    charsArray.forEach(function(char){\n      if(chars[char] == undefined){\n        chars[char] = 1;\n      }else{\n        chars[char] += 1;\n      }\n    });\n    console.log(chars);\n    console.log(Object.keys(chars).length);\n    if(Object.keys(chars).length > mostUniqueChars){\n      mostUniqueChars = Object.keys(chars).length;\n      wordMostUniqueChars = word;\n    }\n    chars = {};\n  });\n  return wordMostUniqueChars;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "var max=0;\n    var long=\"\";\n    for(var i=0;i<words.length;i++){\n        var count=0;\n        for(var j=0;j<words[i].length;j++){\n            if(words[i].indexOf(words[i][j])==j){\n                count++;\n            }\n        }\n        if(count>max){\n            max=count;\n            long=words[i];\n        }\n    }\n    return long;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "var max=0;\n  var result = \"\";\n  for(var i=0; i<words.length; i++){\n    var word=words[i];\n    var temp=0;\n    for(var j=0; j<word.length; j++){\n      for(var k=j+1; k<word.length; k++){\n        if(word[j]===word[k]){\n          temp++;\n        }\n      }\n    }\n    if(temp>max){\n      max=temp;\n      result=word;\n    }\n  }\n  return result;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "let max=0;\n    let maxword=\"\";\n    for(let i=0;i<words.length;i++){\n        if(max<getUnique(words[i])){\n            max=getUnique(words[i]);\n            maxword=words[i];\n        }\n    }\n    return maxword;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "var splitWords = [];\n    var max = 0;\n    var index = 0;\n    var word = \"\";\n    var len = words.length;\n    for(var i = 0; i < len; i++){\n        splitWords.push(words[i].split(\"\"));\n    }\n    for(var i = 0; i < len; i++){\n        if(max < new Set(splitWords[i]).size){\n            max = new Set(splitWords[i]).size;\n            index = i;\n        }\n    }\n    for(var i = 0; i < len; i++){\n        if(i !== index){\n            if(max === new Set(splitWords[i]).size){\n                if(words[i] < words[index]){\n                    index = i;\n                }\n            }\n        }\n    }\n    return words[index];\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "var map = {};\n\twords.forEach(function(word){\n\t\tvar word_map = {};\n\t\tword.split('').forEach(function(letter){\n\t\t\tword_map[letter] = true;\n\t\t});\n\t\tmap[word] = Object.keys(word_map).length;\n\t});\n\tvar sorted = Object.keys(map).sort(function(a,b){\n\t\treturn map[b] - map[a];\n\t});\n\treturn sorted[0];\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "let max=0;\n    let maxStr=\"\";\n    for(let i=0;i<words.length;i++){\n        if(max<uniq(words[i])){\n            max=uniq(words[i]);\n            maxStr=words[i];\n        }\n    }\n    return maxStr;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "let obj = {}\n    let max = 0\n    let maxWord = ''\n    for(let i = 0; i < words.length; i++){\n        obj[words[i]] = 0\n        for(let j = 0; j < words[i].length; j++){\n            if(words[i].indexOf(words[i][j]) == j){\n                obj[words[i]] ++\n            }\n        }\n        if(obj[words[i]] > max){\n            max = obj[words[i]]\n            maxWord = words[i]\n        }\n    }\n    return maxWord\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "var result = \"\";\n  if(words.length === 0){\n    return false;\n  }\n\n  var current_longest = get_unique_chars(words[0]);\n  for(var i = 1; i < words.length; i++){\n    var word = words[i];\n    var unique_chars = get_unique_chars(word);\n    if(unique_chars.length > current_longest.length){\n      current_longest = unique_chars;\n      result = word;\n    }else if(unique_chars.length === current_longest.length){\n      if(word < result){\n        result = word;\n      }\n    }\n  }\n  return result;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "var max = words[0];\n  for(var i = 0; i < words.length; i++){\n    if(new Set(words[i]).size > new Set(max).size){\n      max = words[i];\n    }\n  }\n  return max;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "return words.sort(function(a,b){\n    if(a.length < b.length){\n      return -1;\n    }\n    if(a.length > b.length){\n      return 1;\n    }\n    if(a.length === b.length){\n      if(a < b){\n        return -1;\n      }\n      if(a > b){\n        return 1;\n      }\n    }\n    return 0;\n  }).pop();\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "let words2 = words.map(e => [e, e.split('').filter((v, i, a) => a.indexOf(v) === i).length])\n    console.log(words2)\n    words2.sort((a, b) => b[1] - a[1])\n    console.log(words2)\n    let max_count = words2[0][1]\n    let max_words = []\n    for (let i = 0; i < words2.length; i++){\n        if (words2[i][1] < max_count){\n            break\n        }\n        max_words.push(words2[i][0])\n    }\n    console.log(max_words)\n    max_words.sort()\n    return max_words[0]\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "var max_word = \"\";\n  var max_length = 0;\n  for(var i = 0; i < words.length; i++){\n    var current_word = words[i];\n    var seen = [];\n    var current_length = 0;\n    for(var j = 0; j < current_word.length; j++){\n      var current_char = current_word[j];\n      if(seen.indexOf(current_char) == -1){\n        seen.push(current_char);\n        current_length += 1;\n      }\n    }\n    if(current_length > max_length){\n      max_length = current_length;\n      max_word = current_word;\n    }\n  }\n  return max_word;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "var count_chars = words.map(function(word){\n\t\tvar count = 0;\n\t\tfor(var i = 0; i < word.length; i++){\n\t\t\tif(word.indexOf(word[i]) == i){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t});\n\tvar max = Math.max.apply(null, count_chars);\n\treturn words[count_chars.indexOf(max)];\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "// your code here..\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "var result = '';\n  var max_unique = 0;\n  var unique_chars = [];\n  for(var i = 0; i < words.length; i++){\n    var chars = words[i].split('');\n    var uniques = [];\n    for(var j = 0; j < chars.length; j++){\n      if(uniques.indexOf(chars[j]) == -1){\n        uniques.push(chars[j]);\n      }\n    }\n    if(uniques.length > max_unique){\n      max_unique = uniques.length;\n      result = words[i];\n    }else if(uniques.length == max_unique){\n      if(words[i] < result){\n        result = words[i];\n      }\n    }\n  }\n  return result;\n}",
        "grade-19": {
            "execution": 1
        }
    },
    {
        "intent": "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\nfunction file_name_check(file_name){\n",
        "snippet": [
            "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n"
        ],
        "simplified": "Create a function which takes a string representing a file's name, and returns 'Yes' if the the file's name is valid, and returns 'No' otherwise. A file's name is considered to be valid if and only if all the following conditions are met: - There should not be more than three digits ('0'-'9') in the file's name. - The file's name contains exactly one dot '.' - The substring before the dot should not be empty, and it starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dot should be one of these: ['txt', 'exe', 'dll']",
        "task_id": "141",
        "3": "if (file_name.match(/[0-9]/g)===null || file_name.match(/[0-9]/g).length<4){\n\t\tif (file_name.match(/\\./g)===null || file_name.match(/\\./g).length==1){\n\t\t\tif (file_name.match(/[A-Za-z]+\\.[a-zA-Z]+/g)===null || file_name.match(/[A-Za-z]+\\.[a-zA-Z]+/g).length==1){\n\t\t\t\tvar ext = file_name.match(/[A-Za-z]+\\.[a-zA-Z]+/g)[0].split('.')[1];\n\t\t\t\tif (ext==\"txt\" || ext==\"exe\" || ext==\"dll\"){\n\t\t\t\t\treturn \"Yes\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn \"No\";\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "var digits = 0;\n    var dot_counter = 0;\n    var dot_position = 0;\n    var dot_position_before = 0;\n    var dot_position_after = 0;\n    var valid_letters = ['txt', 'exe', 'dll'];\n    var i;\n    for (i = 0; i < file_name.length; i++) {\n        if (file_name[i] == '.') {\n            dot_counter++;\n            dot_position = i;\n        }\n        if ((file_name[i] > '0') && (file_name[i] < '9')) {\n            digits++;\n        }\n    }\n    dot_position_before = file_name.substring(0, dot_position);\n    dot_position_after = file_name.substring(dot_position + 1, file_name.length);\n    //console.log(dot_position_before);\n    //console.log(dot_position_after);\n    if ((digits > 3) || (dot_counter != 1) || (dot_position_before.length == 0) || ((dot_position_before[0] < 'a') || (dot_position_before[0] > 'z')) || ((dot_position_before[0] < 'A') || (dot_position_before[0] > 'Z')) || (valid_letters.indexOf(dot_position_after) == -1)) {\n        return 'No';\n    }\n    return 'Yes';\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "const file_arr = file_name.split('.');\n    let count_digits = 0;\n    for(let i = 0; i < file_arr[0].length; i++){\n        if(file_arr[0][i] >= '0' && file_arr[0][i] <= '9'){\n            count_digits++;\n        }\n    }\n    if(count_digits >= 4){\n        return 'No';\n    }\n    if(file_arr.length !== 2){\n        return 'No';\n    }\n    if(file_arr[0][0] < 'a' || file_arr[0][0] > 'z'){\n        return 'No';\n    }\n    if(file_arr[1] !== 'txt' && file_arr[1] !== 'exe' && file_arr[1] !== 'dll'){\n        return 'No';\n    }\n    return 'Yes';\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "//write your code here\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "file_name = file_name.split(\".\")\n    var file_name_check_result = 'Yes'\n    if(file_name.length>2){\n        file_name_check_result = 'No'\n    }else if(file_name[0].match(/[0-9]/gi) == null){\n        file_name_check_result = 'No'\n    }else if(file_name[0].match(/[0-9]/gi).length>3){\n        file_name_check_result = 'No'\n    }else if(file_name[1] != 'txt' && file_name[1] != 'exe' && file_name[1] != 'dll'){\n        file_name_check_result = 'No'\n    }\n    return file_name_check_result\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "let regex = /^[a-zA-Z][a-zA-Z0-9]{0,2}\\.(txt|exe|dll)$/\n  return regex.test(file_name) ? 'Yes' : 'No'\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "if (/^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{3}$/.test(file_name)){\n        return 'Yes';\n    }\n    return 'No';\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "// create regular expressions\n    const reg = /^[a-zA-Z]+[0-9]{0,3}\\.txt$|^[a-zA-Z]+[0-9]{0,3}\\.exe$|^[a-zA-Z]+[0-9]{0,3}\\.dll$/\n    if(reg.test(file_name)){\n        return 'Yes'\n    }\n    return 'No'\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "}",
        "grade-10": {
            "execution": 0
        },
        "17": "if (file_name.match(/[a-zA-Z]\\w*\\.[a-zA-Z]{3}/)){\n\t\tif (file_name.match(/[0-9]{4}/)){\n\t\t\treturn 'No';\n\t\t}\n\t\treturn 'Yes';\n\t}\n\treturn 'No';\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "if(!/^[a-zA-Z]+([\\w.]+)?$/.test(file_name)){\n        return 'No';\n    }\n    const file_name_array = file_name.split('.');\n    const file_name_without_extension = file_name_array[0];\n    const file_extension = file_name_array[1];\n    if(file_name_without_extension.match(/\\d/g).length > 3 || !/^(txt|exe|dll)$/.test(file_extension)){\n        return 'No';\n    }\n    return 'Yes';\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "var toReturn = false;\n    var digits = 0;\n    var i = 0;\n    while(i < file_name.length && digits <= 3){\n        if(file_name[i] >= '0' && file_name[i] <= '9'){\n            digits++;\n        }\n        i++;\n    }\n    if(digits > 3){\n        return toReturn;\n    }\n    var dot = 0;\n    for(var j = 0; j < file_name.length; j++){\n        if(file_name[j] == '.'){\n            dot++;\n        }\n    }\n    if(dot != 1){\n        return toReturn;\n    }\n    if(file_name[0] < 'a' || file_name[0] > 'z' && file_name[0] < 'A' || file_name[0] > 'Z'){\n        return toReturn;\n    }\n    var first_dot_index = file_name.indexOf('.');\n    var sub_after_dot = file_name.substring(first_dot_index + 1);\n    if(sub_after_dot != 'txt' && sub_after_dot != 'exe' && sub_after_dot != 'dll'){\n        return toReturn;\n    }\n    toReturn = true;\n    return toReturn;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "var digits = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"];\n\tvar alphapet = \"abcdefghijklmnopqrstuvwxyz\";\n\tvar file_types = [\"txt\",\"exe\",\"dll\"];\n\tvar count = 0;\n\tvar file_name_split = file_name.split(\".\");\n\tif(file_name_split.length!=2){\n\t\treturn \"No\";\n\t}\n\tvar file_type = file_name_split[1];\n\tvar count_type = 0;\n\tvar check_type = 0;\n\tfor(var i=0;i<file_types.length;i++){\n\t\tif(file_type===file_types[i]){\n\t\t\tcheck_type = 1;\n\t\t}\n\t}\n\tif(check_type===0){\n\t\treturn \"No\";\n\t}\n\tvar file_name = file_name_split[0];\n\tvar first_char = file_name[0];\n\tvar check_char = 0;\n\tfor(var i=0;i<alphapet.length;i++){\n\t\tif(first_char===alphapet[i]){\n\t\t\tcheck_char = 1;\n\t\t}\n\t}\n\tif(check_char===0){\n\t\treturn \"No\";\n\t}\n\tfor(var i=0;i<file_name.length;i++){\n\t\tvar char = file_name[i];\n\t\tfor(var j=0;j<digits.length;j++){\n\t\t\tif(char===digits[j]){\n\t\t\t\tcount += 1;\n\t\t\t}\n\t\t}\n\t}\n\tif(count>3){\n\t\treturn \"No\";\n\t}\n\treturn \"Yes\";\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "let reg = /^[a-zA-Z][a-zA-Z0-9]{0,3}\\.(txt|exe|dll)$/;\n    if(reg.test(file_name)){\n        return 'Yes';\n    }else{\n        return 'No';\n    }\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "if (file_name.match(/[0-9]/g) == null) {\n        return 'No';\n    }\n    if (file_name.match(/[0-9]/g).length > 3) {\n        return 'No';\n    }\n    if (file_name.match(/\\./g) == null) {\n        return 'No';\n    }\n    if (file_name.match(/\\./g).length != 1) {\n        return 'No';\n    }\n    var file_name_split = file_name.split('.');\n    if (file_name_split[0].length == 0) {\n        return 'No';\n    }\n    if (file_name_split[0].match(/[a-zA-Z]/g) == null) {\n        return 'No';\n    }\n    if (file_name_split[1] != 'txt' && file_name_split[1] != 'exe' && file_name_split[1] != 'dll') {\n        return 'No';\n    }\n    return 'Yes';\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "}",
        "grade-9": {
            "execution": 0
        },
        "4": "//'^([a-zA-Z][a-zA-Z0-9]{0,2})\\.((txt)|(exe)|(dll))$'\n\tlet reg = /^([a-zA-Z][a-zA-Z0-9]{0,2})\\.((txt)|(exe)|(dll))$/;\n\tlet res = reg.test(file_name);\n\tconsole.log(res);\n\tif(res){\n\t\treturn 'Yes';\n\t}\n\treturn 'No';\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "//your code here\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "// Write your code here\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "let regex = /^([a-zA-Z]{1}[a-zA-Z0-9]{0,12})\\.(txt|exe|dll)$/;\n  let str = file_name.match(regex);\n  if(str === null){\n    return \"No\";\n  }\n  return \"Yes\";\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//Given the lengths of the three sides of a triangle. Return True if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3, 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nfunction right_angle_triangle(a, b, c){\n",
        "snippet": [
            "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n"
        ],
        "simplified": "Given the lengths of the three sides of a triangle. Return True if the three sides form a right-angled triangle, False otherwise. A right-angled triangle is a triangle in which one angle is right angle or 90 degree.",
        "task_id": "157",
        "3": "// Your code here.\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "let a1 = a*a;\n  let b1 = b*b;\n  let c1 = c*c;\n  if (c1 == a1 + b1 || b1 == a1 + c1 || a1 == b1 + c1){\n    return true;\n  }\n  return false;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "if(a>b && a>c){\n    return (a*a == b*b + c*c);\n  }\n  else if(b>a && b>c){\n    return (b*b == a*a + c*c);\n  }\n  else if(c>a && c>b){\n    return (c*c == a*a + b*b);\n  }\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "var hyp = Math.max(a, b, c);\n    var opp = 0;\n    var adj = 0;\n    if (hyp === a) {\n        opp = b;\n        adj = c;\n    } else if (hyp === b) {\n        opp = a;\n        adj = c;\n    } else {\n        opp = a;\n        adj = b;\n    }\n    if (hyp * hyp === opp * opp + adj * adj) {\n        return true;\n    } else {\n        return false;\n    }\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "return Math.pow(a, 2) + Math.pow(b, 2) === Math.pow(c, 2) || Math.pow(b, 2) + Math.pow(c, 2) === Math.pow(a, 2) || Math.pow(a, 2) + Math.pow(c, 2) === Math.pow(b, 2)\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "let x = Math.pow(a, 2) + Math.pow(b, 2);\n  let y = Math.pow(c, 2);\n  if (x == y) {\n    return true;\n  } else {\n    return false;\n  }\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "let x = [a, b, c];\n    x.sort((a, b) => a - b);\n    return Math.pow(x[0], 2) + Math.pow(x[1], 2) === Math.pow(x[2], 2);\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "//your code here\n\treturn false;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "let hypotenuse = Math.max(a, b, c);\n    let sum = a + b + c;\n    let angle = (sum - hypotenuse) * (sum - hypotenuse);\n    let cSquare = hypotenuse * hypotenuse;\n    if(angle === cSquare){\n        return true;\n    } else {\n        return false;\n    }\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "if(Math.pow(a, 2) + Math.pow(b, 2) == Math.pow(c, 2)){\n\t\treturn true;\n\t}\n\treturn false;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "var hypotenuse = Math.max(a, b, c);\n    var sumOfSquaresOfOtherSides = Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2) - Math.pow(hypotenuse, 2);\n    return Math.pow(hypotenuse, 2) == sumOfSquaresOfOtherSides;\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "if (is_pythagoras(a, b, c)){\n        return true;\n    } else {\n        return false;\n    }\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "if(a > b && a > c){\n    return a*a == b*b + c*c;\n  }\n  if(b > a && b > c){\n    return b*b == a*a + c*c;\n  }\n  if(c > a && c > b){\n    return c*c == a*a + b*b;\n  }\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "// Code here\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "var ab = Math.pow(a, 2);\n    var bc = Math.pow(b, 2);\n    var ac = Math.pow(c, 2);\n    var result = ab + bc;\n    if(result == ac){\n        return true;\n    }else{\n        return false;\n    }\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "if ((a*a) + (b*b) == (c*c)) {\n        return true;\n    } else {\n        return false;\n    }\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "if(a > b && a > c){\n        return (a * a == (b * b) + (c * c));\n    }\n    else if(b > a && b > c){\n        return (b * b == (a * a) + (c * c));\n    }\n    else if(c > a && c > b){\n        return (c * c == (a * a) + (b * b));\n    }\n    else{\n        return false;\n    }\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "// your code here\n    //var a = 3, b = 4, c = 5;\n    if(a <= 0 || b <= 0 || c <= 0){\n      return false;\n    }\n    var aSq = Math.pow(a, 2);\n    var bSq = Math.pow(b, 2);\n    var cSq = Math.pow(c, 2);\n    if(aSq + bSq == cSq || bSq + cSq == aSq || cSq + aSq == bSq){\n      return true;\n    }\n    return false;\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "let max = Math.max(a, b, c);\n\tlet min = Math.min(a, b, c);\n\tlet mid = a + b + c - max - min;\n\treturn max * max === min * min + mid * mid;\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "let cSquare = c * c;\n    let aSquare = a * a;\n    let bSquare = b * b;\n    if (cSquare == aSquare + bSquare){\n        return true;\n    }\n    else{\n        return false;\n    }\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//Filter given list of any python values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n",
        "snippet": [
            "  return values.filter(x => Number.isInteger(x));\n}\n\n"
        ],
        "simplified": "Filter given list of any python values only for integers",
        "task_id": "22",
        "3": "return values.filter(function(value){\n        return typeof value === 'number' && value % 1 === 0;\n    });\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "var integers = values.filter(function(v){\n    return typeof v === 'number' && v === parseInt(v, 10);\n  });\n  return integers;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "return values.filter(x => typeof x === 'number' && x % 1 === 0);\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "return values.filter(function(value){\n        return typeof value === 'number' && value % 1 === 0;\n    });\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "// your code here\n    let temp = [];\n    for(let x of values){\n        if(typeof x === 'number' && !isNaN(x)){\n            temp.push(x);\n        }\n    }\n    return temp;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "var i, len = values.length, result = [];\n    for(i = 0; i < len; i++){\n        if(typeof values[i] === 'number' && values[i] % 1 === 0){\n            result.push(values[i]);\n        }\n    }\n    return result;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "var integers = [];\n    for (var i = 0; i < values.length; i++){\n        if (typeof values[i] === 'number' && values[i] % 1 === 0){\n            integers.push(values[i]);\n        }\n    }\n    return integers;\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "return values.filter(isNumber)\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "return values.filter(function(item){\n        return typeof item === 'number' && item % 1 === 0;\n    });\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "function filter_fn(val){\n        return isinstance(val, int);\n    }\n    return Array.prototype.filter.call(values, filter_fn);\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "function filter_fn(value){\n        return (Number.isInteger(value));\n    }\n    return (values.filter(filter_fn));\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "var b = [];\n    for(i in values){\n        if(typeof values[i] == \"number\"){\n            b.push(values[i]);\n        }\n    }\n    return b;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "return _.filter(values, function(val){\n\t\treturn typeof val === 'number' && (val%1 === 0);\n\t});\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "return values.filter(function(value){\n        return Number.isInteger(value);\n    });\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "var results = [];\n\tfor(var i = 0; i < values.length; i++){\n\t\tif(typeof values[i] === 'number' && values[i] % 1 === 0){\n\t\t\tresults.push(values[i]);\n\t\t}\n\t}\n\treturn results;\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "var integer = [];\n\tfor(var i = 0; i < values.length; i++){\n\t\tif(typeof values[i] === 'number' && isNaN(values[i]) === false){\n\t\t\tinteger.push(values[i]);\n\t\t}\n\t}\n\treturn integer;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "const filteredArr = [];\n    for(let i = 0; i < values.length; i++){\n        if(typeof values[i] === 'number' && Number.isInteger(values[i])){\n            filteredArr.push(values[i]);\n        }\n    }\n    return filteredArr;\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "const arr = values.filter(value => typeof value === 'number' && !Number.isNaN(value));\n    return arr;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "const filtered = values.filter(value => Number.isInteger(value));\n\treturn filtered;\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "// YOUR CODE HERE\n    return values.filter(n => typeof n == 'number' && Math.floor(n) == n);\n    throw `NotImplementedError: ${inspect(values)}`;\n}",
        "grade-19": {
            "execution": 1
        }
    },
    {
        "intent": "//You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n// cycpattern_check(\"abcd\",\"abd\") => False\n// cycpattern_check(\"hello\",\"ell\") => True\n// cycpattern_check(\"whassup\",\"psus\") => False\n// cycpattern_check(\"abab\",\"baa\") => True\n// cycpattern_check(\"efef\",\"eeff\") => False\n// cycpattern_check(\"himenss\",\"simen\") => True\nfunction cycpattern_check(a, b){\n",
        "snippet": [
            "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n"
        ],
        "simplified": "You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word",
        "task_id": "154",
        "3": "b_arr = b.split('');\n    for(let i = 0; i < b_arr.length; i++){\n        b_arr.push(b_arr.shift());\n        if(a.includes(b_arr.join(''))){\n            return true;\n        }\n    }\n    return false;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "b = b.split('');\n   for(var i = 0; i < b.length; i++){\n      var temp = b.shift();\n      b.push(temp);\n      if(a.indexOf(b.join('')) != -1){\n         return true;\n      }\n   }\n   return false;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "let i = 0;\n  let rot = b.split('');\n  let final = '';\n  while(i < rot.length){\n    let x = rot.pop();\n    rot.unshift(x);\n    final = rot.join('');\n    if(a.includes(final)) return true;\n    i++;\n  }\n  return false;\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "if (a.includes(b)) {\n        return true;\n    }\n    for (let i = 0; i < b.length; i++) {\n        let letters = b.split('');\n        let letter = letters.splice(0, 1);\n        let newB = letters.join('') + letter;\n        if (a.includes(newB)) {\n            return true;\n        }\n    }\n    return false;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "let originalWord = b;\n    let newWord = b;\n    for(let i = 0; i < b.length; i++){\n        if(a.includes(newWord)){\n            return true;\n        }\n        newWord = newWord.substring(1) + newWord.substring(0,1);\n    }\n    return false;\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "return a.includes(b) || a.includes(b.slice(1) + b[0]);\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "let rotate = b.slice(1) + b[0];\n    if(a.indexOf(b) === -1 && a.indexOf(rotate) === -1){\n        return false;\n    }\n    else {\n        return true;\n    }\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "let s = b + b;\n    return s.includes(a);\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "var c = \"\";\n  var j = 0;\n  if(a.length < b.length){\n    return false;\n  }\n  while(j < b.length){\n    c += b.charAt(j);\n    j++;\n  }\n  while(c != b){\n    if(a.includes(c)){\n      return true;\n    }\n    var d = c.charAt(0);\n    c = c.slice(1, c.length);\n    c += d;\n  }\n  return false;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "if (a.length < b.length) {\n        return false;\n    }\n    let bRots = [b];\n    for (let i = 0; i < b.length - 1; i++) {\n        bRots.push(bRots[i].slice(1) + bRots[i][0]);\n    }\n    for (let i = 0; i < bRots.length; i++) {\n        if (a.includes(bRots[i])) {\n            return true;\n        }\n    }\n    return false;\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "return a.includes(b.substring(b.length-1) + b.substring(0, b.length-1));\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "var pat = b + b;\n    console.log(pat);\n    return pat.indexOf(a) != -1 ? true : false;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "if (a.length != b.length) {\n    return false;\n  }\n  let aRepeat = a.repeat(2);\n  return aRepeat.includes(b);\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "var n = a.length;\n    var m = b.length;\n    if(n<m){\n        return false;\n    }\n    if(n==m){\n        if(a==b){\n            return true;\n        }\n        return false;\n    }\n    var bb = b+b;\n    return bb.indexOf(a)>=0;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "var long,short;\n  if(a.length > b.length){\n    long = a;\n    short = b;\n  }else{\n    long = b;\n    short = a;\n  }\n  var short_length = short.length;\n  var short_first_letter = short[0];\n  for(var i = 0; i < long.length; i++){\n    if(long[i] == short_first_letter){\n      if(long.substring(i,i+short_length) == short){\n        return true;\n      }\n    }\n  }\n  var short_last_letter = short[short_length-1];\n  for(var i = 0; i < long.length; i++){\n    if(long[i] == short_last_letter){\n      if(long.substring(i-short_length+1,i+1) == short){\n        return true;\n      }\n    }\n  }\n  return false;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "var new_b = b.slice(b.length-1) + b.slice(0, b.length-1);\n     if(a.indexOf(b)>-1){\n          return true;\n     }\n     else if(a.indexOf(new_b)>-1){\n          return true;\n     }\n     else{\n          return false;\n     }\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "return b + b.repeat(2).includes(a);\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "var c = '';\n    for(var i = 0; i < b.length; i++){\n        c = b.slice(i, b.length) + b.slice(0, i);\n        if(a.includes(c)){\n            return true;\n        }\n    }\n    return false;\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "var i = 0;\n    while(i<a.length){\n        var letter = a[i];\n        var j = b.indexOf(letter);\n        if(j==-1){\n            i++;\n            continue;\n        }\n        var sub1 = b.substring(j) + b.substring(0,j);\n        if(a.indexOf(sub1)>-1){\n            return true;\n        }\n        else{\n            i++;\n        }\n    }\n    return false;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "var length= a.length;\n    for(var i=0; i<length; i++){\n        if(a.indexOf(b)>-1){\n            return true;\n        }\n        else{\n            a=a.charAt(length-1)+a.substring(0,length-1);\n        }\n    }\n    return false;\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nfunction count_distinct_characters(string){\n",
        "snippet": [
            "  return (new Set(string.toLowerCase())).size;\n\n}\n\n"
        ],
        "simplified": "Given a string, find out how many distinct characters (regardless of case) does it consist of",
        "task_id": "16",
        "3": "var char_dict = {}\n  for (var i = 0; i < string.length; i++){\n    char_dict[string[i].toLowerCase()] = 0\n  }\n  return Object.keys(char_dict).length\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "var strArray = string.split('');\n  var uniqueArray = strArray.filter(function(item, pos) {\n    return strArray.indexOf(item) == pos;\n  })\n  return uniqueArray.length;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "const uniq = [...new Set(string.toLowerCase())]\n    return uniq.length\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "return new Set(string.toLowerCase()).size;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "var str = string.toLowerCase();\n    var out = new Set();\n    for (var i = 0; i < str.length; i++){\n        out.add(str[i]);\n    }\n    return out.size;\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "var array=string.split(\"\");\n    return new Set(array).size;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "let chars = string.toLowerCase().split('');\n    return new Set(chars).size;\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "var output = 0;\n    var str = string.toLowerCase();\n    for(var i = 0; i < str.length; i++){\n        if(str.lastIndexOf(str[i]) == str.indexOf(str[i])){\n            output++;\n        }\n    }\n    return output;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "var count = 0;\n  var letter_list = [];\n  for (var i = 0; i < string.length; i++){\n    if (letter_list.indexOf(string[i].toLowerCase()) < 0){\n      letter_list.push(string[i].toLowerCase());\n      count ++;\n    }\n  }\n  return count;\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "var distinct = [];\n\tfor (var i = 0; i < string.length; i++) {\n\t\tvar letter = string[i].toLowerCase();\n\t\tif(distinct.indexOf(letter) === -1){\n\t\t\tdistinct.push(letter);\n\t\t}\n\t}\n\treturn distinct.length;\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "let array = string.split('');\n    let distinctCharacters = new Set(array);\n    return distinctCharacters.size;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "return (string.split('').sort().join('').match(/(.)\\1*/g).length);\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "var allCharacters = string.split('');\n    var distinctCharacters = [];\n    for (var i = 0; i < allCharacters.length; i++){\n        if (distinctCharacters.indexOf(allCharacters[i].toLowerCase()) == -1){\n            distinctCharacters.push(allCharacters[i].toLowerCase());\n        }\n    }\n    return distinctCharacters.length;\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "var splitString = string.split(\"\");\n\tvar newArray = [];\n\tvar count = 0;\n\tfor(var i = 0; i < splitString.length; i++){\n\t\tif(newArray.indexOf(splitString[i]) === -1){\n\t\t\tnewArray.push(splitString[i]);\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "//Convert string to lower case, then split it into array of characters\n    var string_array = string.toLowerCase().split('');\n    //get unique characters\n    var unique_array = string_array.filter(function(item, pos) {\n        return string_array.indexOf(item) == pos;\n    });\n    return unique_array.length;\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "// Declare a new Set called count_distinct_characters\n  let count_distinct_characters = new Set();\n  // Loop over the characters in the string\n  for (let char of string){\n    // Add each character to the count_distinct_characters set\n    count_distinct_characters.add(char);\n  }\n  // Return the size of the set\n  return count_distinct_characters.size;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "//solution 1:\n    // var lower = string.toLowerCase().split('');\n    // return lower.filter(function(elem, index, self){\n    //     return index == self.indexOf(elem);\n    // }).length;\n\n    //solution 2:\n    return string.length == [...new Set(string.toLowerCase())].length;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "//your code goes here, return an integer\n    var allLetters = [];\n    var distinctLetters = [];\n    for (var i = 0; i < string.length; i++) {\n      allLetters.push(string[i].toLowerCase());\n    }\n    for (var i = 0; i < allLetters.length; i++) {\n      if (distinctLetters.indexOf(allLetters[i]) === -1) {\n        distinctLetters.push(allLetters[i]);\n      }\n    }\n    return distinctLetters.length;\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "var count = 0;\n\tvar characters = [];\n\tfor (var i = 0; i < string.length; i++) {\n\t\tif (characters.indexOf(string[i].toLowerCase()) == -1) {\n\t\t\tcharacters.push(string[i].toLowerCase());\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "let count=0;\n    let str=string.toLowerCase();\n    for(let i=0;i<str.length;i++){\n        if(str.indexOf(str[i])===i){\n            count++;\n        }\n    }\n    return count;\n}",
        "grade-19": {
            "execution": 1
        }
    },
    {
        "intent": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\n// total_match([], []) \u279e []\n// total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n// total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n// total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n// total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\nfunction total_match(lst1, lst2){\n",
        "snippet": [
            "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n"
        ],
        "simplified": "Write a function that accepts two lists of strings and returns the list that has total number of chars in the all strings of the list less than the other list. if the two lists have the same number of chars, return the first list.",
        "task_id": "74",
        "0": "let total_lst1 = 0;\n  let total_lst2 = 0;\n  for(let i=0; i<lst1.length; i++){\n    for(let j=0; j<lst1[i].length; j++){\n      total_lst1+=1;\n    }\n  }\n  for(let i=0; i<lst2.length; i++){\n    for(let j=0; j<lst2[i].length; j++){\n      total_lst2+=1;\n    }\n  }\n  if(total_lst1 == total_lst2){\n    return lst1;\n  }\n  else if(total_lst1 > total_lst2){\n    return lst2;\n  }\n  else{\n    return lst1;\n  }\n}",
        "grade-0": {
            "execution": 1
        },
        "1": "const length1 = lst1.reduce((acc, item) => acc + item.length, 0);\n    const length2 = lst2.reduce((acc, item) => acc + item.length, 0);\n    return length1 < length2 ? lst1 : length1 === length2 ? lst1 : lst2;\n}",
        "grade-1": {
            "execution": 1
        },
        "2": "let sum1 = 0;\n    let sum2 = 0;\n    for(let i = 0; i < lst1.length; i++){\n        sum1 += lst1[i].length;\n    }\n    for(let i = 0; i < lst2.length; i++){\n        sum2 += lst2[i].length;\n    }\n    if(sum1 < sum2){\n        return lst1;\n    }\n    else if(sum1 > sum2){\n        return lst2;\n    }\n    else{\n        return lst1;\n    }\n}",
        "grade-2": {
            "execution": 1
        },
        "3": "const c1 = lst1.join('').length;\n    const c2 = lst2.join('').length;\n    return c1 <= c2 ? lst1 : lst2;\n}",
        "grade-3": {
            "execution": 1
        },
        "4": "if(lst1.length === 0 && lst2.length === 0){\n\t\treturn [];\n\t}\n\tif(lst1.length !== 0 && lst2.length !== 0){\n\t\tlet t1 = 0;\n\t\tlet t2 = 0;\n\t\tlst1.forEach(element => {\n\t\t\tt1 += element.length;\n\t\t});\n\t\tlst2.forEach(element => {\n\t\t\tt2 += element.length;\n\t\t});\n\t\tif(t1 > t2){\n\t\t\treturn lst2;\n\t\t}else if(t1 < t2){\n\t\t\treturn lst1;\n\t\t}else{\n\t\t\treturn lst1;\n\t\t}\n\t}\n}",
        "grade-4": {
            "execution": 0
        },
        "5": "let lst1sum = lst1.reduce((acc, cv) => acc + cv.length, 0);\n    let lst2sum = lst2.reduce((acc, cv) => acc + cv.length, 0);\n    if(lst1sum < lst2sum){\n        return lst1;\n    } else {\n        return lst2;\n    }\n}",
        "grade-5": {
            "execution": 0
        },
        "6": "let lettersLst1 = [];\n    let lettersLst2 = [];\n    lst1.forEach(function(word){\n        lettersLst1.push(word.length);\n    });\n    lst2.forEach(function(word){\n        lettersLst2.push(word.length);\n    });\n    let sumLst1 = lettersLst1.reduce(function(a, b){\n        return a + b;\n    });\n    let sumLst2 = lettersLst2.reduce(function(a, b){\n        return a + b;\n    });\n    if(sumLst1 < sumLst2){\n        return lst1;\n    } else if(sumLst1 > sumLst2){\n        return lst2;\n    } else {\n        return lst1;\n    }\n}",
        "grade-6": {
            "execution": 0
        },
        "7": "let str1 = lst1.join('')\n    let str2 = lst2.join('')\n    if(str1.length === str2.length){\n        return lst1\n    }else if(str1.length < str2.length){\n        return lst1\n    }else{\n        return lst2\n    }\n}",
        "grade-7": {
            "execution": 1
        },
        "8": "let total = 0;\n    for(let num of lst1){\n        for(let i = 0; i < num.length; i++){\n            total += num.charCodeAt(i);\n        }\n    }\n    let total2 = 0;\n    for(let num of lst2){\n        for(let i = 0; i < num.length; i++){\n            total2 += num.charCodeAt(i);\n        }\n    }\n    if(total < total2){\n        return lst1;\n    }\n    else if(total2 < total){\n        return lst2;\n    }\n    else{\n        return lst1;\n    }\n}",
        "grade-8": {
            "execution": 0
        },
        "9": "var sum1 = 0;\n  var sum2 = 0;\n  var result;\n  for(var i = 0; i < lst1.length; i++){\n    sum1 += lst1[i].length;\n  }\n  for(var i = 0; i < lst2.length; i++){\n    sum2 += lst2[i].length;\n  }\n  if(sum1 < sum2){\n    result = lst1;\n  }else if(sum1 > sum2){\n    result = lst2;\n  }else{\n    result = lst1;\n  }\n  return result;\n}",
        "grade-9": {
            "execution": 1
        },
        "10": "var lst1_total = 0;\n    var lst2_total = 0;\n    for(var i = 0; i < lst1.length; i++){\n        lst1_total += lst1[i].length;\n    }\n    for(var i = 0; i < lst2.length; i++){\n        lst2_total += lst2[i].length;\n    }\n    if(lst1_total > lst2_total){\n        return lst2;\n    }\n    else{\n        return lst1;\n    }\n}",
        "grade-10": {
            "execution": 1
        },
        "11": "let lst1_count = 0;\n    let lst2_count = 0;\n    for(let i = 0; i < lst1.length; i++){\n        lst1_count += lst1[i].length;\n    }\n    for(let i = 0; i < lst2.length; i++){\n        lst2_count += lst2[i].length;\n    }\n    if(lst1_count == lst2_count){\n        return lst1;\n    }\n    else if(lst1_count < lst2_count){\n        return lst1;\n    }\n    else{\n        return lst2;\n    }\n}",
        "grade-11": {
            "execution": 1
        },
        "12": "let count1 = 0;\n  let count2 = 0;\n  for(let i = 0; i < lst1.length; i++){\n    count1 += lst1[i].length;\n  }\n  for(let i = 0; i < lst2.length; i++){\n    count2 += lst2[i].length;\n  }\n  if(count1 < count2){\n    return lst1;\n  }\n  return lst2;\n}",
        "grade-12": {
            "execution": 0
        },
        "13": "var total1 = 0;\n    var total2 = 0;\n    if(lst1.length == 0 && lst2.length == 0){\n        return [];\n    }\n    else{\n        for(var i = 0; i < lst1.length; i++){\n            total1 += lst1[i].length;\n        }\n        for(var i = 0; i < lst2.length; i++){\n            total2 += lst2[i].length;\n        }\n        if(total1 > total2){\n            return lst2;\n        }\n        else if(total1 < total2){\n            return lst1;\n        }\n        else{\n            return lst1;\n        }\n    }\n}",
        "grade-13": {
            "execution": 1
        },
        "14": "let total1 = 0;\n    let total2 = 0;\n    for(let i = 0; i < lst1.length; i++){\n        total1 += lst1[i].length;\n    }\n    for(let i = 0; i < lst2.length; i++){\n        total2 += lst2[i].length;\n    }\n    if(total1 < total2){\n        return lst1;\n    }else{\n        return lst2;\n    }\n}",
        "grade-14": {
            "execution": 0
        },
        "15": "var total1 = 0;\n   var total2 = 0;\n   for(var i = 0; i < lst1.length; i++){\n       total1 += lst1[i].length;\n   }\n   for(var j = 0; j < lst2.length; j++){\n       total2 += lst2[j].length;\n   }\n   if(total1 < total2){\n       return lst1;\n   }\n   else if(total1 > total2){\n       return lst2;\n   }\n   else{\n       return lst1;\n   }\n}",
        "grade-15": {
            "execution": 1
        },
        "16": "if(lst1.length == 0 && lst2.length == 0){\n    return [];\n  }\n  let lst1TotalChar = 0;\n  let lst2TotalChar = 0;\n  for(let i = 0; i < lst1.length; i++){\n    lst1TotalChar += lst1[i].length;\n  }\n  for(let i = 0; i < lst2.length; i++){\n    lst2TotalChar += lst2[i].length;\n  }\n  if(lst1TotalChar <= lst2TotalChar){\n    return lst1;\n  }\n  return lst2;\n}",
        "grade-16": {
            "execution": 1
        },
        "17": "if(lst1.length === 0 && lst2.length === 0){\n        return [];\n    }\n    if(lst1.length > lst2.length){\n        return lst2;\n    }\n    if(lst1.length < lst2.length){\n        return lst1;\n    }\n    return lst1;\n}",
        "grade-17": {
            "execution": 0
        },
        "18": "let matchTotal = 0;\n    let strTotal = 0;\n    let count = 0;\n    let index = 0;\n    for(let i = 0; i < lst1.length; i++){\n        matchTotal += lst1[i].length;\n    }\n    for(let i = 0; i < lst2.length; i++){\n        strTotal += lst2[i].length;\n    }\n    if(matchTotal < strTotal){\n        return lst1;\n    }else if(matchTotal > strTotal){\n        return lst2;\n    }else{\n        while(count < 2){\n            if(lst1[index] === lst2[index]){\n                index++;\n            }else{\n                count++;\n            }\n        }\n        if(count === 2){\n            return lst1;\n        }else{\n            return lst2;\n        }\n    }\n}",
        "grade-18": {
            "execution": 0
        }
    },
    {
        "intent": "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// intersection((1, 2), (2, 3)) ==> \"NO\"\n// intersection((-1, 1), (0, 4)) ==> \"NO\"\n// intersection((-3, -1), (-5, 5)) ==> \"YES\"\nfunction intersection(interval1, interval2){\n",
        "snippet": [
            "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n"
        ],
        "simplified": "You are given two intervals, where each interval is a pair of integers. For example, interval = (start, end) = (1, 2). The given intervals are closed which means that the interval (start, end) includes both start and end. For each given interval, it is assumed that its start is less or equal its end. Your task is to determine whether the length of intersection of these two intervals is a prime number. Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3) which its length is 1, which not a prime number. If the length of the intersection is a prime number, return \"YES\", otherwise, return \"NO\". If the two intervals don't intersect, return \"NO\".",
        "task_id": "127",
        "3": "let start = Math.max(interval1[0], interval2[0]);\n  let end = Math.min(interval1[1], interval2[1]);\n  let dif = end - start;\n  if (dif < 0) return \"NO\";\n  if (dif < 3) return \"YES\";\n  let prime = true;\n  for (let i = 2; i < dif - 1; i++) {\n    if (dif % i === 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime ? \"YES\" : \"NO\";\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "var isPrime = function(num){\n        for(var i = 2; i < num; i++){\n            if(num % i === 0){\n                return false;\n            }\n        }\n        return true;\n    }\n    if(interval1[0] >= interval2[1] || interval2[0] >= interval1[1]){\n        return \"NO\";\n    }\n    var inters = [Math.max(interval1[0], interval2[0]), Math.min(interval1[1], interval2[1])];\n    var len = inters[1] - inters[0];\n    return (isPrime(len)) ? \"YES\" : \"NO\";\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "if(interval1[0] > interval2[1] || interval2[0] > interval1[1]){\n        return \"NO\";\n    }\n    let p = interval1[0] > interval2[0] ? interval1[0] : interval2[0];\n    let q = interval1[1] < interval2[1] ? interval1[1] : interval2[1];\n    return isPrime(q - p + 1) ? \"YES\" : \"NO\";\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "function isPrime(number){\n        if(number === 1){\n            return false;\n        }\n        if(number < 0){\n            number = -number;\n        }\n        let arr = [2, 3, 5, 7];\n        if(arr.includes(number)){\n            return true;\n        }\n        for(let i = 0; i < arr.length; i++){\n            if(number % arr[i] === 0){\n                return false;\n            }\n        }\n        for(let i = arr[arr.length - 1] + 2; i < number; i += 2){\n            if(number % i === 0){\n                return false;\n            }\n        }\n        return true;\n    }\n    if(interval1[0] > interval2[1] || interval2[0] > interval1[1]){\n        return \"NO\";\n    }\n    if(interval1[0] > interval2[0]){\n        if(interval1[1] < interval2[1]){\n            return isPrime(interval1[1] - interval1[0] + 1) ? \"YES\" : \"NO\";\n        }\n        return isPrime(interval1[1] - interval2[0] + 1) ? \"YES\" : \"NO\";\n    }\n    if(interval1[1] < interval2[1]){\n        return isPrime(interval1[1] - interval2[0] + 1) ? \"YES\" : \"NO\";\n    }\n    return isPrime(interval2[1] - interval2[0] + 1) ? \"YES\" : \"NO\";\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "let start = Math.max(interval1[0], interval2[0]);\n\tlet end = Math.min(interval1[1], interval2[1]);\n\tlet newInterval = [start, end];\n\tif (newInterval[0] > newInterval[1]) {\n\t\treturn \"NO\";\n\t}\n\tlet numbers = [...Array(newInterval[1]-newInterval[0]+1).keys()];\n\tfor (let i = 2; i <= Math.sqrt(newInterval[1]); i++) {\n\t\tif (numbers.indexOf(i) !== -1) {\n\t\t\tfor (let j = i * i; j <= newInterval[1]; j += i) {\n\t\t\t\tlet remove = numbers.indexOf(j);\n\t\t\t\tif (remove !== -1) {\n\t\t\t\t\tnumbers.splice(remove, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tlet length = numbers.length-2;\n\tif (numbers.indexOf(length) !== -1) {\n\t\treturn \"YES\";\n\t} else {\n\t\treturn \"NO\";\n\t}\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    if (start <= end){\n        if (start <= 1){\n            return \"NO\";\n        }\n        for (let i = 2; i < end; i++){\n            if (end % i === 0){\n                return \"NO\";\n            }\n        }\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "//check the intersection\n  let firstIntervalStart = interval1[0];\n  let firstIntervalEnd = interval1[1];\n  let secondIntervalStart = interval2[0];\n  let secondIntervalEnd = interval2[1];\n  let result = [];\n  if(firstIntervalStart > secondIntervalEnd || secondIntervalStart > firstIntervalEnd){\n    return \"NO\";\n  }else if(firstIntervalStart <= secondIntervalStart && firstIntervalEnd >= secondIntervalStart && firstIntervalEnd <= secondIntervalEnd){\n    result.push(secondIntervalStart);\n    result.push(firstIntervalEnd);\n  }else if(firstIntervalStart <= secondIntervalStart && firstIntervalEnd >= secondIntervalEnd){\n    result.push(secondIntervalStart);\n    result.push(secondIntervalEnd);\n  }else if(firstIntervalStart >= secondIntervalStart && firstIntervalEnd <= secondIntervalEnd){\n    result.push(firstIntervalStart);\n    result.push(firstIntervalEnd);\n  }else if(firstIntervalStart >= secondIntervalStart && firstIntervalStart <= secondIntervalEnd && firstIntervalEnd >= secondIntervalEnd){\n    result.push(firstIntervalStart);\n    result.push(secondIntervalEnd);\n  }\n  let intervalLength = result[1] - result[0];\n  //check if it is prime\n  for(let i = 2; i < intervalLength; i++){\n    if(intervalLength % i === 0){\n      return \"NO\";\n    }\n  }\n  return \"YES\";\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "var a = Math.max(interval1[0], interval2[0]);\n  var b = Math.min(interval1[1], interval2[1]);\n  var l = b - a;\n  if (l <= 0) return \"NO\";\n  if (isPrime(l)) return \"YES\";\n  return \"NO\";\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "//interval1\n    let start1 = interval1[0];\n    let end1 = interval1[1];\n    //interval2\n    let start2 = interval2[0];\n    let end2 = interval2[1];\n    //variable to store the start of the interval of the intersection\n    let start;\n    //variable to store the end of the interval of the intersection\n    let end;\n    //variable to store the result of the function\n    let result;\n    //variable to store the length of the intersection\n    let length;\n    //variable to store the test of the current number\n    let test;\n    //the condition that the intervals of the intersection\n    if (start1 >= start2 && start1 <= end2){\n        start = start1;\n    } else if (start2 >= start1 && start2 <= end1){\n        start = start2;\n    } else {\n        return \"NO\";\n    }\n    if (end1 >= start2 && end1 <= end2){\n        end = end1;\n    } else if (end2 >= start1 && end2 <= end1){\n        end = end2;\n    } else {\n        return \"NO\";\n    }\n    //the length of the intersection\n    length = end - start;\n    //the test of the length \n    for (let i = length; i > 0; i--){\n        test = length % i;\n        if (test === 0 && i !== 1 && i !== length){\n            result = \"NO\";\n            return result;\n        } else {\n            result = \"YES\";\n        }\n    }\n    return result;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "let arr = []\n  for(let i = interval1[0]; i <= interval1[1]; i++){\n    for(let j = interval2[0]; j <= interval2[1]; j++){\n      if(i === j){\n        arr.push(i)\n      }\n    }\n  }\n  let diff = arr[arr.length - 1] - arr[0]\n  if(diff === 0){\n    return \"NO\"\n  }\n  if(diff === 1){\n    return \"YES\"\n  }\n  if(isPrime(diff)){\n    return \"YES\"\n  }else{\n    return \"NO\"\n  }\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "function getIntersection(interval1, interval2){\n        let int1 = [...interval1];\n        let int2 = [...interval2];\n        int1 = int1.sort((a, b) => {\n            return a - b;\n        });\n        int2 = int2.sort((a, b) => {\n            return a - b;\n        });\n        let s = 0;\n        let e = 0;\n        let ints = [];\n        if(int1[0] > int2[0]){\n            s = int1[0];\n        } else {\n            s = int2[0];\n        }\n        if(int1[1] < int2[1]){\n            e = int1[1];\n        } else {\n            e = int2[1];\n        }\n        if(s <= e){\n            ints.push(s, e);\n        }\n        return ints;\n    }\n    function checkPrime(n){\n        let nSqrt = Math.sqrt(n);\n        for(let i = 2; i <= nSqrt; i++){\n            if(n % i === 0){\n                return false;\n            }\n        }\n        return true;\n    }\n    let intersection = getIntersection(interval1, interval2);\n    if(intersection.length === 0){\n        return \"NO\";\n    }\n    if(checkPrime(intersection[1] - intersection[0] + 1)){\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "let int = 0;\n  let result = 'NO';\n  const start1 = interval1[0];\n  const end1 = interval1[1];\n  const start2 = interval2[0];\n  const end2 = interval2[1];\n  if (interval1[0] >= interval2[0] && interval1[0] <= interval2[1]) {\n    int = end1 - start1;\n  } else if (interval1[1] >= interval2[0] && interval1[1] <= interval2[1]) {\n    int = end1 - start2;\n  } else if (interval2[0] >= interval1[0] && interval2[0] <= interval1[1]) {\n    int = end2 - start2;\n  } else if (interval2[1] >= interval1[0] && interval2[1] <= interval1[1]) {\n    int = end2 - start1;\n  }\n  if (int > 1) {\n    result = 'YES';\n  }\n  return result;\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "// your code here\n    if(interval1[0] >= interval2[1] || interval2[0] >= interval1[1]){\n        return \"NO\";\n    }\n    let start = interval1[0] > interval2[0] ? interval1[0] : interval2[0];\n    let end = interval1[1] < interval2[1] ? interval1[1] : interval2[1];\n    let val = end - start;\n    if(val <= 1){\n        return \"NO\";\n    }\n    let sq = Math.sqrt(val);\n    for(let i = 2; i <= sq; i++){\n        if(val % i === 0){\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "let a = interval1[0];\n  let b = interval1[1];\n  let c = interval2[0];\n  let d = interval2[1];\n  if (a >= c) {\n    if (a <= d) {\n      if (b <= d) {\n        return isPrime(b - a + 1) ? \"YES\" : \"NO\";\n      } else {\n        return isPrime(d - a + 1) ? \"YES\" : \"NO\";\n      }\n    } else {\n      return \"NO\";\n    }\n  } else {\n    if (b >= c) {\n      if (b <= d) {\n        return isPrime(b - c + 1) ? \"YES\" : \"NO\";\n      } else {\n        return isPrime(d - c + 1) ? \"YES\" : \"NO\";\n      }\n    } else {\n      return \"NO\";\n    }\n  }\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "let set = new Set();\n  let arr = [];\n  for(let i = interval1[0]; i <= interval1[1]; i++){\n    set.add(i);\n  }\n  for(let i = interval2[0]; i <= interval2[1]; i++){\n    if(set.has(i)){\n      arr.push(i);\n    }\n  }\n  if(arr.length === 0){\n    return \"NO\";\n  }\n  for(let i = 2; i < arr.length; i++){\n    if(arr.length % i === 0){\n      return \"NO\";\n    }\n  }\n  return \"YES\";\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "if (interval1[0] < interval2[0]) {\n        if (interval1[1] < interval2[0]) return \"NO\";\n        else return isPrime(interval2[0] - interval1[1]) ? \"YES\" : \"NO\";\n    } else {\n        if (interval2[1] < interval1[0]) return \"NO\";\n        else return isPrime(interval1[0] - interval2[1]) ? \"YES\" : \"NO\";\n    }\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "let point1 = interval1[0];\n  let point2 = interval1[1];\n  let point3 = interval2[0];\n  let point4 = interval2[1];\n  if (point1 > point4 || point3 > point2) {\n    return \"NO\";\n  }\n  let max = Math.max(point1, point3);\n  let min = Math.min(point2, point4);\n  if (max === min) {\n    return \"NO\";\n  }\n  for (let i = 2; i < min - max; i++) {\n    if ((min - max) % i === 0) {\n      return \"NO\";\n    }\n  }\n  return \"YES\";\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    let length = end - start;\n    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    return length < 2 || primes.includes(length) ? \"YES\" : \"NO\";\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "let intersection = [];\n    for(let i = interval1[0]; i < interval1[1]; i++){\n        for(let j = interval2[0]; j < interval2[1]; j++){\n            if(i === j){\n                intersection.push(i);\n            }\n        }\n    }\n    // console.log(intersection);\n    if(intersection.length === 0){\n        return \"NO\";\n    } else if(isPrime(intersection.length)){\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "var i1 = [];\n  var i2 = [];\n  for(let i = interval1[0]; i <= interval1[1]; i++){\n    i1.push(i);\n  }\n  for(let i = interval2[0]; i <= interval2[1]; i++){\n    i2.push(i);\n  }\n  var interSect = [];\n  for(let i = 0; i < i1.length; i++){\n    for(let j = 0; j < i2.length; j++){\n      if(i1[i] === i2[j]){\n        interSect.push(i1[i]);\n      }\n    }\n  }\n  if(interSect.length < 1){\n    return \"NO\";\n  }\n  for(let i = 2; i < interSect.length; i++){\n    if(interSect.length % i === 0){\n      return \"NO\";\n    }\n  }\n  return \"YES\";\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n",
        "snippet": [
            "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n"
        ],
        "simplified": "The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). Please write a function to efficiently compute the n-th element of the fib4 number sequence. Do not use recursion.",
        "task_id": "46",
        "3": "}\n\nmodule.exports = {\n    sumDigits: sumDigits,\n    countChars: countChars,\n    reverseString: reverseString,\n    removeOdd: removeOdd,\n    sumMatrix: sumMatrix,\n    factorial: factorial,\n    removeEven: removeEven,\n    oddOnly: oddOnly,\n    array2D: array2D,\n    binarySearch: binarySearch,\n    myFind: myFind,\n    myFindIndex: myFindIndex,\n    myIncludes: myIncludes,\n    myConcat: myConcat,\n    myPush: myPush,\n    fib: fib,\n    fib2: fib2,\n    fib3: fib3,\n    fib4: fib4\n};",
        "grade-3": {
            "execution": 0
        },
        "0": "if(n===0){\n    return 0;\n  }else if(n===1){\n    return 0;\n  }else if(n===2){\n    return 2;\n  }else if(n===3){\n    return 0;\n  }else{\n    let a = 0;\n    let b = 0;\n    let c = 2;\n    let d = 0;\n    let i = 3;\n    while(i<n){\n      let t = d;\n      d = d+c+b+a;\n      a = b;\n      b = c;\n      c = t;\n      i++;\n    }\n    return d;\n  }\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "//Basic algorithm, pretty straightforward. \n\tvar i = 2;\n\tvar a = 0;\n\tvar b = 0;\n\tvar c = 2;\n\tvar d = 0;\n\tif(n == 0){\n\t\treturn 0;\n\t}\n\tif(n == 1){\n\t\treturn 0;\n\t}\n\tif(n == 2){\n\t\treturn 2;\n\t}\n\tif(n == 3){\n\t\treturn 0;\n\t}\n\twhile(i < n){\n\t\td = a + b + c;\n\t\ta = b;\n\t\tb = c;\n\t\tc = d;\n\t\ti++;\n\t}\n\treturn d;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "//base cases\n  if(n === 0){\n    return 0;\n  }\n  if(n === 1){\n    return 0;\n  }\n  if(n === 2){\n    return 2;\n  }\n  if(n === 3){\n    return 0;\n  }\n  //initialize variables\n  var a = 0;\n  var b = 0;\n  var c = 2;\n  var d = 0;\n  //dynamic programming\n  for(var i = 4; i <= n; i++){\n    var temp = a + b + c + d;\n    a = b;\n    b = c;\n    c = d;\n    d = temp;\n  }\n  return d;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "//YOUR CODE HERE\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "let result = [0,0,2,0];\n    for(let i = 4; i <= n; i++){\n        result[0] = result[1];\n        result[1] = result[2];\n        result[2] = result[3];\n        result[3] = result[0] + result[1] + result[2];\n    }\n    return result[3];\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "var fibs = [0,0,2,0];\n  if(n < 4){\n    return fibs[n];\n  }\n  for(var i = 4; i <= n; i++){\n    fibs[i%4] = fibs[(i-1)%4] + fibs[(i-2)%4] + fibs[(i-3)%4] + fibs[(i-4)%4];\n  }\n  return fibs[n%4];\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "var a = 0;\n\tvar b = 0;\n\tvar c = 2;\n\tvar d = 0;\n\tfor(var i = 3; i <= n; i++){\n\t\td = a + b + c;\n\t\ta = b;\n\t\tb = c;\n\t\tc = d;\n\t}\n\treturn d;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "var array = [0,0,2,0];\n\tvar sum = 0;\n\tvar i = 4;\n\tvar x = 0;\n\tvar y = 0;\n\tvar z = 0;\n\tvar a = 0;\n\twhile(i <= n){\n\t\tx = array[0];\n\t\ty = array[1];\n\t\tz = array[2];\n\t\ta = array[3];\n\t\tsum = x + y + z + a;\n\t\tarray[0] = array[1];\n\t\tarray[1] = array[2];\n\t\tarray[2] = array[3];\n\t\tarray[3] = sum;\n\t\ti++;\n\t}\n\treturn sum;\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "var s=0;\n\tfor(var i=0;i<=n;i++){\n\t\ts+=fib4_helper(i);\n\t}\n\treturn s;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "if(n == 0){\n        return 0;\n    }else if(n == 1){\n        return 0;\n    }else if(n == 2){\n        return 2;\n    }else if(n == 3){\n        return 0;\n    }else{\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n    }\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "if(n <= 1){\n        return 0;\n    }\n    if(n == 2){\n        return 2;\n    }\n    let f4 = [0, 0, 2, 0];\n    for(let i = 3; i < n; i++){\n        f4[i%4] = f4[(i-1)%4] + f4[(i-2)%4] + f4[(i-3)%4] + f4[(i-4)%4];\n    }\n    return f4[(n-1)%4];\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "var vals = [0,0,2,0];\n\tif(n<4){\n\t\treturn vals[n];\n\t}\n\tfor(var i=4;i<=n;i++){\n\t\tvals[i%4] = vals[0] + vals[1] + vals[2] + vals[3];\n\t}\n\treturn vals[n%4];\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "let n1 = 0;\n    let n2 = 0;\n    let n3 = 2;\n    let n4 = 0;\n    let temp = 0;\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n        return 0;\n    }\n    if(n == 2){\n        return 2;\n    }\n    if(n == 3){\n        return 0;\n    }\n    if(n > 3){\n        for(let i = 4; i < n; i++){\n            temp = n1 + n2 + n3 + n4;\n            n1 = n2;\n            n2 = n3;\n            n3 = n4;\n            n4 = temp;\n        }\n    }\n    return n1 + n2 + n3 + n4;\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "var a=0,b=0,c=2,d=0,sum=0;\n    for(var i=0;i<n;i++){\n        sum=a+b+c+d;\n        a=b;\n        b=c;\n        c=d;\n        d=sum;\n    }\n    return sum;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n        return 0;\n    }\n    if(n == 2){\n        return 2;\n    }\n    if(n == 3){\n        return 0;\n    }\n    let a = 0;\n    let b = 0;\n    let c = 2;\n    let d = 0;\n    let result = 0;\n    for(let i = 4; i <= n; i++){\n        result = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = result;\n    }\n    return result;\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "if(n < 4){\n        if(n == 0){\n            return 0;\n        }else if(n == 1){\n            return 0;\n        }else if(n == 2){\n            return 2;\n        }else if(n == 3){\n            return 0;\n        }\n    }\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "var n1 = 0;\n    var n2 = 0;\n    var n3 = 2;\n    var n4 = 0;\n    var fib4 = 0;\n    for(var i = 0; i < n; i++){\n        fib4 = n1 + n2 + n3 + n4;\n        n1 = n2;\n        n2 = n3;\n        n3 = n4;\n        n4 = fib4;\n    }\n    return fib4;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "let a = 0, b = 0, c = 2, d = 0, e;\n    if (n==0) {\n        return a;\n    } else if (n==1) {\n        return b;\n    } else if (n==2) {\n        return c;\n    } else if (n==3) {\n        return d;\n    } else {\n        for (let i=4; i<=n; i++) {\n            e = a + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n            d = e;\n        }\n        return e;\n    }\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "if(n < 0) return undefined;\n\tif(n == 0) return 0;\n\tif(n == 1) return 0;\n\tif(n == 2) return 2;\n\tif(n == 3) return 0;\n\tvar a = 0;\n\tvar b = 0;\n\tvar c = 2;\n\tvar d = 0;\n\tfor(var i = 4; i <= n; i++){\n\t\tvar tmp = a;\n\t\ta = b;\n\t\tb = c;\n\t\tc = d;\n\t\td = tmp + b + c + d;\n\t}\n\treturn d;\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// count_upper('aBCdEf') returns 1\n// count_upper('abcdefg') returns 0\n// count_upper('dBBE') returns 0\nfunction count_upper(s){\n",
        "snippet": [
            "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n"
        ],
        "simplified": "Given a string s, count the number of uppercase vowels in even indices.",
        "task_id": "98",
        "3": "var num = 0;\n  var list = s.split(\"\");\n  for(var i = 0; i < list.length; i++){\n    if((list[i] == \"A\" || list[i] == \"E\" || list[i] == \"I\" || list[i] == \"O\" || list[i] == \"U\") && i % 2 === 0){\n      num += 1;\n    }\n  }\n  return num;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "var count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'){\n            if(i % 2 == 0){\n                count ++;\n            }\n        }\n    }\n    return count;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "let count = 0;\n\tfor(let i = 0; i < s.length; i++){\n\t\tif(i % 2 === 0 && s[i] === s[i].toUpperCase() && (s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U')){\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "var count = 0;\n\tfor(var i = 0; i < s.length; i += 2){\n\t\tif(s[i] == s[i].toUpperCase() && (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U')){\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "s = s.toLowerCase();\n\tvar count = 0;\n\tfor(var i = 0; i < s.length; i++){\n\t\tif(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u'){\n\t\t\tif(i % 2 == 0){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "let result = 0;\n    let vowel = \"AEIOU\";\n    for(let i = 0; i < s.length; i++){\n        if(i % 2 == 0 && vowel.includes(s[i])){\n            result += 1;\n        }\n    }\n    return result;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "let count = 0;\n\tfor(let i = 0; i < s.length; i++){\n\t\tif(s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U'){\n\t\t\tif(i % 2 === 0){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "var count = 0;\n\tvar vowelList = ['A','E','I','O','U'];\n\tfor(var i = 0; i < s.length; i++){\n\t\tif(i % 2 == 0 && vowelList.indexOf(s[i]) >= 0){\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "var count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U'){\n            if(i % 2 === 0){\n                count += 1;\n            }\n        }\n    }\n    return count;\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "// count number of uppercase vowels in even indices\n    var count = 0;\n    for (var i = 0; i < s.length; i++) {\n        if ((i % 2 == 0) && (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U')) {\n            count += 1;\n        }\n    }\n    return count;\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "var count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] == \"A\" || s[i] == \"E\" || s[i] == \"I\" || s[i] == \"O\" || s[i] == \"U\"){\n            if(i % 2 === 0){\n                count++;\n            }\n        }\n    }\n    return count;\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "var uppercase = 0;\n    for(i=0; i<s.length; i++){\n        if(i%2 ==0 && s[i] == s[i].toUpperCase()){\n            uppercase = uppercase + 1;\n        }\n    }\n    return uppercase;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "var string = s.toLowerCase();\n    var count = 0;\n    for(var i = 0; i < string.length; i+=2){\n        if(string[i] === 'a' || string[i] === 'e' || string[i] === 'i' || string[i] === 'o' || string[i] === 'u'){\n            count++;\n        }\n    }\n    return count;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "let cnt = 0;\n  for(let i = 0; i < s.length; i += 2){\n    if(s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U'){\n      cnt++;\n    }\n  }\n  return cnt;\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "let count = 0;\n    for(let i = 0; i < s.length; i++){\n        if(i % 2 == 0 && isVowel(s[i])) count++;\n    }\n    return count;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "let count = 0;\n    let upVowels = ['A', 'E', 'I', 'O', 'U'];\n    for(let i = 0; i < s.length; i++){\n        if(upVowels.includes(s[i]) && i % 2 == 0){\n            count++;\n        }\n    }\n    return count;\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "var i = 0;\n\tvar count = 0;\n\twhile (i < s.length){\n\t\tif (s[i] === \"A\" || s[i] === \"E\" || s[i] === \"I\" || s[i] === \"O\" || s[i] === \"U\"){\n\t\t\tcount = count + 1;\n\t\t}\n\t\ti = i + 2;\n\t}\n\treturn count;\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "var vowels = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n\tvar count = 0;\n\tfor (var i = 0; i < s.length; i++) {\n\t\tfor (var j = 0; j < vowels.length; j++) {\n\t\t\tif (s[i] === vowels[j] && i % 2 === 0) {\n\t\t\t\tcount += 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "let count = 0;\n  for(let i = 1; i < s.length; i+=2){\n    if(s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U'){\n      count += 1;\n    }\n  }\n  return count;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "var upperVowels = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'){\n            if(i % 2 == 0){\n                upperVowels++;\n            }\n        }\n    }\n    return upperVowels;\n}",
        "grade-19": {
            "execution": 1
        }
    },
    {
        "intent": "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the list of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n// ['()', '(())', '(()())']\nfunction separate_paren_groups(paren_string){\n",
        "snippet": [
            "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n"
        ],
        "simplified": "Input to this function is a string containing multiple groups of nested parentheses. Your goal is to separate those group into separate strings and return the list of those. Separate groups are balanced (each open brace is properly closed) and not nested within each other Ignore any spaces in the input string.",
        "task_id": "1",
        "3": "var paren_groups = [];\n  var paren_stack = [];\n  var last_paren = null;\n  var paren_count = 0;\n  var last_paren_idx = 0;\n  for (var i = 0; i < paren_string.length; i++) {\n    var c = paren_string[i];\n    if (c === '(' || c === ')') {\n      if (last_paren && c !== last_paren) {\n        paren_stack.push(c);\n        last_paren = c;\n        paren_count++;\n      } else if (last_paren && c === last_paren) {\n        paren_stack.pop();\n        last_paren = paren_stack[paren_stack.length - 1];\n        paren_count++;\n      } else {\n        last_paren = c;\n        paren_count++;\n      }\n    }\n\n    if (paren_count % 2 === 0) {\n      paren_groups.push(paren_string.slice(last_paren_idx, i + 1));\n      last_paren_idx = i + 1;\n    }\n  }\n  return paren_groups;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "let groups = [];\n    let open_parens = 0;\n    let start_idx = 0;\n    let end_idx = 0;\n    for (let idx = 0; idx < paren_string.length; idx++){\n        let paren = paren_string[idx];\n        if (paren === '('){\n            open_parens++;\n            if (open_parens === 1){\n                start_idx = idx;\n            }\n        }\n        else if (paren === ')'){\n            open_parens--;\n            if (open_parens === 0){\n                end_idx = idx;\n                groups.push(paren_string.slice(start_idx, end_idx + 1));\n            }\n        }\n    }\n    return groups;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "let regex_pattern = /\\([^()]*\\)/g;\n    let regex_match = regex_pattern.exec(paren_string);\n    let result = [];\n    while (regex_match !== null){\n        result.push(regex_match[0]);\n        regex_match = regex_pattern.exec(paren_string);\n    }\n    return result;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "if(!paren_string){\n        return paren_string;\n    }\n    let list = [];\n    let open = [];\n    let close = [];\n    let t = paren_string.replace(/\\s/g, '');\n    for(let i = 0; i < t.length; i++){\n        if(t[i] === '('){\n            open.push(i);\n        }\n        if(t[i] === ')'){\n            close.push(i);\n        }\n    }\n    for(let i = 0; i < open.length; i++){\n        if(close[i] < open[i+1]){\n            list.push(t.slice(open[i], close[i]+1));\n        }\n    }\n    return list;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "//validate arguments\n    if (paren_string === '') {\n        return [];\n    }\n    if (paren_string.match(/[^()]/)) {\n        throw new Error('Invalid characters passed to separate_paren_groups()');\n    }\n    var groups = [];\n    var group = '';\n    var is_in_group = false;\n    for (var i = 0; i < paren_string.length; i++) {\n        var paren = paren_string[i];\n        if (paren === '(') {\n            if (is_in_group) {\n                group += paren;\n            } else {\n                is_in_group = true;\n                group = paren;\n            }\n        } else if (paren === ')') {\n            if (is_in_group) {\n                group += paren;\n                groups.push(group);\n                is_in_group = false;\n            } else {\n                throw new Error('Unbalanced right parenthesis at index ' + i);\n            }\n        }\n    }\n    if (is_in_group) {\n        throw new Error('Unbalanced left parenthesis at index ' + i);\n    }\n    return groups;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "// write your code here\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "return paren_string.replace(/\\s/g, '').split(/\\)(\\()/).map(e => e.replace(/\\(/g, '').replace(/\\)/g, ''));\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "var results = []\n  var counter = 0\n  var last = 0\n  for(var i = 0; i < paren_string.length; i++){\n    var current = paren_string[i]\n    if(current === '('){\n      counter += 1\n    }\n    if(current === ')'){\n      counter -= 1\n    }\n    if(counter === 0){\n      results.push(paren_string.slice(last, i + 1))\n      last = i + 1\n    }\n  }\n  return results\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "var paren_list = [];\n  var temp_paren_list = [];\n  var i = 0;\n  for (i = 0; i < paren_string.length; i++){\n    if (paren_string[i] === '('){\n      temp_paren_list.push(paren_string[i]);\n    } else if (paren_string[i] === ')'){\n      temp_paren_list.push(paren_string[i]);\n      if (temp_paren_list.length === 2){\n        paren_list.push(temp_paren_list.join(''));\n        temp_paren_list = [];\n      }\n    }\n  }\n  return paren_list;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "//check that the strings are balanced.\n    let open = 0;\n    let close = 0;\n    for(let i = 0; i < paren_string.length; i++){\n        if(paren_string[i] === '('){\n            open++;\n        }else if(paren_string[i] === ')'){\n            close++;\n        }\n    }\n    if(open !== close){\n        return 'Not balanced';\n    }\n    //create a new list that splits on spaces.\n    let split_paren_string = paren_string.split(' ');\n    //create an empty array to hold our groups.\n    let groups = [];\n    //loop through our split string.\n    for(let i = 0; i < split_paren_string.length; i++){\n        let current_group = '';\n        //if we see an open paren, start adding to our current group.\n        if(split_paren_string[i][0] === '('){\n            current_group += split_paren_string[i];\n            //if the current group is not balanced, add the next item to it.\n            if(current_group.length % 2 !== 0){\n                current_group += split_paren_string[i + 1];\n                i++;\n            }\n            //push the current group to our groups list.\n            groups.push(current_group);\n        }\n    }\n    return groups;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "var paren_array = paren_string.split(\" \").join(\"\").split(\"\")\n  var paren_counter = 0\n  var paren_strings = []\n  var count = 0\n  while (count < paren_array.length){\n    if (paren_array[count] === \"(\"){\n      paren_counter++\n    } else if (paren_array[count] === \")\"){\n      paren_counter--\n    }\n    if (paren_counter === 0){\n      paren_strings.push(paren_array.slice(0, count + 1).join(\"\"))\n      paren_array = paren_array.slice(count + 1)\n      count = 0\n    } else {\n      count++\n    }\n  }\n  return paren_strings\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "var bal_paren = [];\n    var temp = [];\n    var front = 0;\n    var back = 0;\n    for(var i = 0; i < paren_string.length; i++){\n        if(paren_string[i] == '('){\n            temp.push(paren_string[i]);\n            front++;\n        }\n        else if(paren_string[i] == ')'){\n            temp.push(paren_string[i]);\n            back++;\n        }\n        if(front == back){\n            bal_paren.push(temp.join(''));\n            temp = [];\n            front = 0;\n            back = 0;\n        }\n    }\n    return bal_paren;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "var acc = [];\n    var result = [];\n    for(var i = 0; i < paren_string.length; i++){\n        if(paren_string[i] === '('){\n            acc.push(paren_string[i]);\n        }\n        else if(paren_string[i] === ')'){\n            acc.push(paren_string[i]);\n            result.push(acc.join(''));\n            acc = [];\n        }\n    }\n    return result;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "let stack = [], result = [], start = 0, end = 0;\n\tfor(let i = 0; i < paren_string.length; i++){\n\t\tif(paren_string[i] === '('){\n\t\t\tstack.push(paren_string[i]);\n\t\t}else if(paren_string[i] === ')'){\n\t\t\tstack.pop();\n\t\t}\n\t\tif(stack.length === 0){\n\t\t\tresult.push(paren_string.slice(start, i + 1));\n\t\t\tstart = i + 1;\n\t\t}\n\t}\n\treturn result;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "var arr = [],\n      left_paren = '(',\n      right_paren = ')',\n      open_paren = 0,\n      close_paren = 0,\n      temp_string = '';\n\n  for(var i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === left_paren){\n      open_paren += 1;\n    }else if(paren_string[i] === right_paren){\n      close_paren += 1;\n    }\n\n    if(open_paren === close_paren){\n      arr.push(temp_string);\n      temp_string = '';\n      open_paren = 0;\n      close_paren = 0;\n    }else{\n      temp_string += paren_string[i];\n    }\n  }\n  return arr;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "let paren_array = paren_string.split(\" \").join(\"\").split(\"\");\n    let result = [];\n    let cur_paren_string = \"\";\n    let count = 0;\n    for (let i = 0; i < paren_array.length; i++){\n        if (paren_array[i] === \"(\"){\n            count++;\n        }\n        if (paren_array[i] === \")\"){\n            count--;\n        }\n        cur_paren_string += paren_array[i];\n        if (count === 0){\n            result.push(cur_paren_string);\n            cur_paren_string = \"\";\n        }\n    }\n    return result;\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "const groups = [];\n    let group = '';\n    for (const paren of paren_string) {\n        if (paren === '(' || paren === ')') {\n            group += paren;\n        }\n        if (group.length === 2) {\n            groups.push(group);\n            group = '';\n        }\n    }\n    return groups;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "// your code here\n    var i;\n    var arr = [];\n    var cur = '';\n    var count = 0;\n    var list = [];\n    for (i = 0; i < paren_string.length; i++) {\n        if (paren_string[i] == '(') {\n            count += 1;\n        }\n        else if (paren_string[i] == ')') {\n            count -= 1;\n        }\n        cur += paren_string[i];\n        if (count == 0) {\n            list.push(cur);\n            cur = '';\n        }\n    }\n    return list;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "//code here\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "var res = [];\n\tvar start = 0;\n\tvar end = 0;\n\tfor(var i = 0; i < paren_string.length; i++){\n\t\tif(paren_string[i] == \"(\"){\n\t\t\tstart = i;\n\t\t}\n\t\tif(paren_string[i] == \")\"){\n\t\t\tend = i;\n\t\t\tres.push(paren_string.slice(start, end+1));\n\t\t}\n\t}\n\treturn res;\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//Given a positive integer n, return a tuple that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n",
        "snippet": [
            "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n"
        ],
        "simplified": "Given a positive integer n, return a tuple that has the number of even and odd integer palindromes that fall within the range(1, n), inclusive. Note: 1. 1 <= n <= 10^3 2. returned tuple has the number of even and odd integer palindromes respectively.",
        "task_id": "107",
        "3": "let count = [0, 0];\n    for(let i = 1; i <= n; i++){\n        if(is_palindrome(i.toString())){\n            if(i % 2 === 0){\n                count[0]++;\n            } else {\n                count[1]++;\n            }\n        }\n    }\n    return count;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "var even=0, odd=0;\n    for(var i=1; i<=n; i++){\n        if(i===11) continue;\n        if(i<10){\n            even++;\n        }else if(i<100){\n            if(i%11===0){\n                even++;\n            }else{\n                odd++;\n            }\n        }else if(i<1000){\n            if(i%11===0){\n                even++;\n            }else if(i%10===i/100){\n                even++;\n            }else{\n                odd++;\n            }\n        }\n    }\n    return [even, odd];\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "let nArr = n.toString().split('');\n    let nArrLen = nArr.length;\n    let evenLen = Math.floor(nArrLen/2);\n    let oddLen = nArrLen % 2 === 0 ? evenLen : evenLen + 1;\n    let even = 0;\n    let odd = 0;\n    for(let i = 0; i < evenLen; i++){\n        even = even + 1;\n    }\n    for(let i = 0; i < oddLen; i++){\n        odd = odd + 1;\n    }\n    return [even, odd];\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "var odd = 0, even = 0;\n    for(let i = 1; i <= n; i++){\n        if(is_palindrome(i)){\n            if(i % 2 == 0){\n                even += 1;\n            }\n            else{\n                odd += 1;\n            }\n        }\n    }\n    return [even, odd];\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "var even = 0;\n\tvar odd = 0;\n\tfor(var i = 1; i <= n; i++){\n\t\tif(i < 10){\n\t\t\todd++;\n\t\t}else if(i == reverse(i)){\n\t\t\tif(i % 2 == 0){\n\t\t\t\teven++;\n\t\t\t}else{\n\t\t\t\todd++;\n\t\t\t}\n\t\t}\n\t}\n\treturn [even, odd];\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "let even = 0;\n    let odd = 0;\n    let str = '';\n    for(let i = 1; i <= n; i++){\n        str = i.toString();\n        if(str.length % 2 === 0){\n            even++;\n        } else {\n            odd++;\n        }\n    }\n    return [even, odd];\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "var evens = 0;\n  var odds = 0;\n  var str = \"\" + n;\n  if(str.length === 1) return [evens, odds];\n  if(str.length === 2){\n    odds++;\n    if(Number(str[0]) === Number(str[1])) evens++;\n    return [evens, odds];\n  }\n  if(str.length === 3){\n    var n = Number(str);\n    var palindromes = [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99, 101, 111, 121, 131, 141, 151, 161, 171, 181, 191, 202, 212, 222, 232, 242, 252, 262, 272, 282, 292, 303, 313, 323, 333, 343, 353, 363, 373, 383, 393, 404, 414, 424, 434, 444, 454, 464, 474, 484, 494, 505, 515, 525, 535, 545, 555, 565, 575, 585, 595, 606, 616, 626, 636, 646, 656, 666, 676, 686, 696, 707, 717, 727, 737, 747, 757, 767, 777, 787, 797, 808, 818, 828, 838, 848, 858, 868, 878, 888, 898, 909, 919, 929, 939, 949, 959, 969, 979, 989, 999];\n    palindromes.forEach(function(num){\n      if(num > n) return;\n      if(num % 2 === 0) evens++;\n      else odds++;\n    });\n    return [evens, odds];\n  }\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "let evens = 0;\n\tlet odds = 0;\n\tfor(let i = 1; i <= n; i++){\n\t\tif(is_palindrome(i)){\n\t\t\tif(i % 2 == 0){\n\t\t\t\tevens++;\n\t\t\t} else {\n\t\t\t\todds++;\n\t\t\t}\n\t\t}\n\t}\n\treturn [evens, odds];\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "let even_count = 0;\n  let odd_count = 0;\n  for(let i = 1; i <= n; i++){\n    let current_number = i.toString();\n    if(current_number.length === 1){\n      odd_count++;\n    }\n    else if(current_number.length === 2){\n      if(current_number[0] === current_number[1]){\n        even_count++;\n      }\n      else{\n        odd_count++;\n      }\n    }\n    else{\n      let palindrome = true;\n      for(let j = 0; j < current_number.length/2; j++){\n        if(current_number[j] !== current_number[current_number.length - j - 1]){\n          palindrome = false;\n          break;\n        }\n      }\n      if(palindrome){\n        if(current_number.length % 2 !== 0){\n          odd_count++;\n        }\n        else{\n          even_count++;\n        }\n      }\n    }\n  }\n  return [even_count, odd_count];\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "let nums = get_nums(n);\n    let even = 0;\n    let odd = 0;\n    for(let num of nums){\n        if(is_palindrome(num)){\n            num.toString().length % 2 === 0 ? even++ : odd++;\n        }\n    }\n    return [even, odd];\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "var even = 0, odd = 0;\n    for(var i = 1; i <= n; i++){\n        if(is_palindrome(i)){\n            if(i % 2 == 0){\n                even++;\n            }else{\n                odd++;\n            }\n        }\n    }\n    return [even, odd];\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "let evens = 0;\n    let odds = 0;\n    for(let i = 1; i <= n; i++){\n        if(is_palindrome(i.toString())){\n            if(i % 2 == 0){\n                evens++;\n            }else{\n                odds++;\n            }\n        }\n    }\n    return [evens, odds];\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "if(n===1)return [0,1];\n    if(n===2)return [1,1];\n    let evens = 0;\n    let odds = 0;\n    for(let i=1;i<=n;i++){\n        if(i.toString() === i.toString().split('').reverse().join('')){\n            if(i%2===0)evens++;\n            else odds++;\n        }\n    }\n    return [evens,odds];\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "let count_odd = 0;\n  let count_even = 0;\n  for(let i = 1; i <= n; i++){\n    if(is_palindrome(i)){\n      if(i % 2 == 0){\n        count_even += 1;\n      } else {\n        count_odd += 1;\n      }\n    }\n  }\n  return {even: count_even, odd: count_odd};\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "let evens = 0;\n  let odds = 0;\n  for(let i = 1; i <= n; i++){\n    if(i.toString() === i.toString().split('').reverse().join('')){\n      if(i.toString().length % 2 === 0){\n        evens++\n      } else {\n        odds++\n      }\n    }\n  }\n  return [evens, odds]\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "if(n < 1 || n > Math.pow(10, 3)){\n    return 'invalid';\n  }\n  let count_even = 0;\n  let count_odd = 0;\n  let number = 1;\n  while(number <= n){\n    if(is_palindrome(number)){\n      if(number % 2 == 0){\n        count_even += 1;\n      }else{\n        count_odd += 1;\n      }\n    }\n    number += 1;\n  }\n  return [count_even, count_odd];\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "var arr = [1,2,3];\n    var even_odd = [1,2];\n    if(n <= 3){\n        return even_odd;\n    }\n    for(var i = 4; i <= n; i++){\n        var is_palindrome = true;\n        for(var j = 0; j < Math.floor(arr.length/2); j++){\n            if(arr[j] != arr[arr.length - 1 - j]){\n                is_palindrome = false;\n                break;\n            }\n        }\n        if(is_palindrome == true){\n            if(i % 2 == 0){\n                even_odd[0]++;\n            }else{\n                even_odd[1]++;\n            }\n        }\n        arr.push(i);\n    }\n    return even_odd;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "let even = 0;\n    let odd = 0;\n    for(let i = 1; i <= n; i++){\n        if(is_palindrome(i)){\n            if(i % 2 === 0){\n                even++;\n            }else{\n                odd++;\n            }\n        }\n    }\n    return [even, odd];\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "// your code here\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "//i: int\n    //o: list\n    //c: 1 <= n <= 10^3\n    //e: \n    let even = 0;\n    let odd = 0;\n    for(let i = 1; i <= n; i++){\n        if(is_palindrome(i)){\n            if(i % 2 === 0){\n                even++;\n            }else{\n                odd++;\n            }\n        }\n    }\n    return [even, odd];\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// generate_integers(2, 8) => [2, 4, 6, 8]\n// generate_integers(8, 2) => [2, 4, 6, 8]\n// generate_integers(10, 14) => []\nfunction generate_integers(a, b){\n",
        "snippet": [
            "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n"
        ],
        "simplified": "Given two positive integers a and b, return the even digits between a and b, in ascending order.",
        "task_id": "163",
        "0": "if(a>b){\n    var temp = a;\n    a = b;\n    b = temp;\n  }\n  var arr = [];\n  for(var i = a; i<=b; i++){\n    if(i%2==0){\n      arr.push(i);\n    }\n  }\n  return arr;\n}",
        "grade-0": {
            "execution": 0
        },
        "1": "var even = [];\n  if(a < b){\n    for(var i = a; i <= b; i++){\n      if(i % 2 === 0){\n        even.push(i);\n      }\n    }\n  } else {\n    for(var i = b; i <= a; i++){\n      if(i % 2 === 0){\n        even.push(i);\n      }\n    }\n  }\n  return even;\n}",
        "grade-1": {
            "execution": 0
        },
        "2": "var evens = [];\n    for(var i = a; i <= b; i++){\n        if(i % 2 === 0){\n            evens.push(i);\n        }\n    }\n    return evens;\n}",
        "grade-2": {
            "execution": 0
        },
        "3": "let result = [];\n  if(a < b){\n    for(let i = a; i <= b; i++){\n      if(i % 2 === 0){\n        result.push(i);\n      }\n    }\n  } else {\n    for(let i = b; i <= a; i++){\n      if(i % 2 === 0){\n        result.push(i);\n      }\n    }\n  }\n  return result;\n}",
        "grade-3": {
            "execution": 0
        },
        "4": "let arr = [];\n    if(a < b){\n        for(let i = a; i <= b; i++){\n            if(i % 2 === 0){\n                arr.push(i);\n            }\n        }\n    }else{\n        for(let i = b; i <= a; i++){\n            if(i % 2 === 0){\n                arr.push(i);\n            }\n        }\n    }\n    return arr;\n}",
        "grade-4": {
            "execution": 0
        },
        "5": "var result = [];\n\tvar min = Math.min(a, b);\n\tvar max = Math.max(a, b);\n\tfor(var i = min; i <= max; i++){\n\t\tif(i % 2 === 0){\n\t\t\tresult.push(i);\n\t\t}\n\t}\n\treturn result;\n}",
        "grade-5": {
            "execution": 0
        },
        "6": "if(a > b){\n        var aux = a;\n        a = b;\n        b = aux;\n    }\n    var result = [];\n    while(a <= b){\n        if(a % 2 == 0){\n            result.push(a);\n        }\n        a++;\n    }\n    return result;\n}",
        "grade-6": {
            "execution": 0
        },
        "7": "var arr = []\n    if(a<b){\n        for(var i = a; i<=b; i++){\n            if(i%2 == 0){\n                arr.push(i)\n            }\n        }\n    }else{\n        for(var i = b; i<=a; i++){\n            if(i%2 == 0){\n                arr.push(i)\n            }\n        }\n    }\n    return arr\n}",
        "grade-7": {
            "execution": 0
        },
        "8": "var array = [];\n  if (a > b){\n    for (var i = b; i <= a; i++){\n      if (i % 2 === 0){\n        array.push(i);\n      }\n    }\n  } else {\n    for (var i = a; i <= b; i++){\n      if (i % 2 === 0){\n        array.push(i);\n      }\n    }\n  }\n  return array;\n}",
        "grade-8": {
            "execution": 0
        },
        "9": "if(b < a){\n       return generate_integers(b, a);\n   }\n   if(a % 2 == 0){\n       var array = [a];\n       for(var i = a+2; i <= b; i+=2){\n           array.push(i);\n       }\n       return array;\n   }\n   if(a % 2 != 0){\n       var array = [];\n       for(var i = a+1; i <= b; i+=2){\n           array.push(i);\n       }\n       return array;\n   }\n}",
        "grade-9": {
            "execution": 0
        },
        "10": "let evArr = [];\n  if(a < b){\n    for(let i = a; i <= b; i++){\n      if(i % 2 === 0){\n        evArr.push(i);\n      }\n    }\n  } else {\n    for(let i = b; i <= a; i++){\n      if(i % 2 === 0){\n        evArr.push(i);\n      }\n    }\n  }\n  return evArr;\n}",
        "grade-10": {
            "execution": 0
        },
        "11": "let arr = [];\n    if(a < b){\n        for(let i = a; i <= b; i++){\n            if(i % 2 === 0){\n                arr.push(i);\n            }\n        }\n    } else if(a > b){\n        for(let i = b; i <= a; i++){\n            if(i % 2 === 0){\n                arr.push(i);\n            }\n        }\n    }\n    return arr;\n}",
        "grade-11": {
            "execution": 0
        },
        "12": "let even_numbers = [];\n    for(let i = a; i <= b; i++){\n        if(i % 2 === 0){\n            even_numbers.push(i);\n        }\n    }\n    return even_numbers;\n}",
        "grade-12": {
            "execution": 0
        },
        "13": "var result = []\n  for(var i = a; i <= b; i++){\n    if(i % 2 === 0){\n      result.push(i)\n    }\n  }\n  return result;\n}",
        "grade-13": {
            "execution": 0
        },
        "14": "let integers = [];\n  if (a < b) {\n    for (let i = a; i <= b; i++) {\n      if (i % 2 === 0) {\n        integers.push(i);\n      }\n    }\n  } else {\n    for (let i = b; i <= a; i++) {\n      if (i % 2 === 0) {\n        integers.push(i);\n      }\n    }\n  }\n  return integers;\n}",
        "grade-14": {
            "execution": 0
        },
        "15": "var integersArray = [];\n    if(a < b){\n        for(var i = a; i <= b; i++){\n            if(i % 2 === 0){\n                integersArray.push(i);\n            }\n        }\n    } else {\n        for(var i = b; i <= a; i++){\n            if(i % 2 === 0){\n                integersArray.push(i);\n            }\n        }\n    }\n    return integersArray;\n}",
        "grade-15": {
            "execution": 0
        },
        "16": "let s = [];\n    for(let i = a; i <= b; i++){\n        if(i % 2 == 0){\n            s.push(i);\n        }\n    }\n    return s;\n}",
        "grade-16": {
            "execution": 0
        },
        "17": "if(a>b){\n        [a,b] = [b,a];\n    }\n    let result = [];\n    for(let i = a; i<=b; i++){\n        if(i%2 === 0){\n            result.push(i);\n        }\n    }\n    return result;\n}",
        "grade-17": {
            "execution": 0
        },
        "18": "let sorted = getSorted(a, b);\n    let result = [];\n    for(let i = sorted[0]; i <= sorted[1]; i++){\n        if(i % 2 === 0){\n            result.push(i);\n        }\n    }\n    return result;\n}",
        "grade-18": {
            "execution": 0
        }
    },
    {
        "intent": "//Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n",
        "snippet": [
            "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n"
        ],
        "simplified": "Insert a number 'delimeter' between every two consecutive elements of input list `numbers'",
        "task_id": "5",
        "3": "let numbers_copy = numbers.slice(0);\n  let new_list = [];\n  let i = 0;\n  while (i < numbers_copy.length){\n    new_list.push(numbers_copy[i]);\n    if (i !== numbers_copy.length - 1){\n      new_list.push(delimeter);\n    }\n    i += 1;\n  }\n  return new_list;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "//Write your code here\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "var x = numbers.shift();\n    if(x === undefined){\n        return [];\n    }\n    else{\n        return [x].concat(delimeter, intersperse(numbers, delimeter));\n    }\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "var result = [];\n    for(var i = 0; i < numbers.length; i++){\n        result.push(numbers[i]);\n        if(i < numbers.length - 1){\n            result.push(delimeter);\n        }\n    }\n    return result;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "//YOUR CODE HERE\n    if (numbers.length === 0) {\n        return [];\n    }\n    var result = [numbers[0]];\n    for (var i = 1; i < numbers.length; i++) {\n        result.push(delimeter);\n        result.push(numbers[i]);\n    }\n    return result;\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "const interspersed = numbers.reduce((acc, curr, idx) => {\n        if (idx == 0) {\n            return acc.concat(curr);\n        } else {\n            return acc.concat(delimeter, curr);\n        }\n    }, []);\n    return interspersed;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "return is_null(numbers)\n        ? null\n        : pair(head(numbers),\n               pair(delimeter,\n                    intersperse(tail(numbers), delimeter)));\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "var i;\n  var result = [];\n  for(i = 0; i < numbers.length; i++) {\n    result.push(numbers[i]);\n    if(i < numbers.length - 1)\n      result.push(delimeter);\n  }\n  return result;\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "//console.log(\"numbers: \", numbers);\n    if(numbers.length === 0){\n        return [];\n    } else if(numbers.length === 1){\n        return numbers;\n    } else {\n        var a = [numbers[0]];\n        var b = [delimeter].concat(numbers.slice(1));\n        //console.log(\"a: \", a);\n        //console.log(\"b: \", b);\n        return a.concat(intersperse(b, delimeter));\n    }\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "var ans = [];\n\tfor(var i = 0; i < numbers.length; i++){\n\t\tans.push(numbers[i]);\n\t\tif(i != numbers.length - 1){\n\t\t\tans.push(delimeter);\n\t\t}\n\t}\n\treturn ans;\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "if(numbers.length <= 1){\n        return numbers;\n    }\n    var ret = [];\n    for(var i = 0; i < numbers.length; i++){\n        ret.push(numbers[i]);\n        if(i < numbers.length - 1){\n            ret.push(delimeter);\n        }\n    }\n    return ret;\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "return foldr(function(x,y){\n\t\treturn cat(x, [delimeter, y]);\n\t}, [], numbers);\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "if (numbers.length == 0) {\n        return [];\n    } else {\n        return [numbers[0]].concat(intersperse(numbers.slice(1), delimeter)).reduce(function(acc, x) {\n            if (acc.length > 0) {\n                return acc.concat([delimeter, x]);\n            } else {\n                return acc.concat([x]);\n            }\n        }, []);\n    }\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "if(numbers.length === 0){\n        return numbers;\n    }\n    return [numbers[0]].concat(intersperse(numbers.slice(1), delimeter).reduce(function(result, element){\n        return result.concat([delimeter, element]);\n    }, []));\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "var result = [];\n    for(var i = 0; i < numbers.length - 1; i++){\n        result.push(numbers[i]);\n        result.push(delimeter);\n    }\n    if(numbers.length !== 0){\n        result.push(numbers[numbers.length - 1]);\n    }\n    return result;\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "return is_null(numbers)\n\t\t? null\n\t\t: pair(head(numbers),\n\t\t\t   pair(delimeter, intersperse(tail(numbers), delimeter)));\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "var result = [];\n    for(var i = 0; i < numbers.length; i++){\n        result.push(numbers[i]);\n        if(i != numbers.length - 1){\n            result.push(delimeter);\n        }\n    }\n    return result;\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "return _.reduce(numbers, function(memo, number){\n      memo.push(number);\n      memo.push(delimeter);\n      return memo;\n    }, []).slice(0, -1);\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "return [];\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "return numbers.length == 0 ? numbers : [numbers[0]].concat(intersperse(numbers.slice(1), delimeter)).reduce(function(prev, curr){\n\t\treturn prev.concat([delimeter, curr]);\n\t});\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//From a given list of integers, generate a list of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n",
        "snippet": [
            "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n"
        ],
        "simplified": "From a given list of integers, generate a list of rolling maximum element found until given moment in the sequence.",
        "task_id": "9",
        "3": "let max_so_far = numbers[0];\n\tlet res = [max_so_far];\n\tfor(let i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] > max_so_far){\n\t\t\tmax_so_far = numbers[i];\n\t\t}\n\t\tres.push(max_so_far);\n\t}\n\treturn res;\n}\n\nlet input = [1, 2, 3, 2, 3, 4, 2];\nlet expected = [1, 2, 3, 3, 3, 4, 4];\nlet actual = rolling_max(input);",
        "grade-3": {
            "execution": 0
        },
        "0": "if(!numbers || numbers.length==0)\n    return [];\n  var max = numbers[0];\n  var result = [];\n  result.push(max);\n  for(var i=1;i<numbers.length;i++){\n    if(numbers[i]>max)\n      max = numbers[i];\n    result.push(max);\n  }\n  return result;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "let max = numbers[0];\n    return numbers.map(n => {\n        if(n > max){\n            max = n;\n        }\n        return max;\n    });\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "var result = [];\n  var max = null;\n  for(var i = 0; i < numbers.length; i++){\n    max = Math.max(max, numbers[i]);\n    result.push(max);\n  }\n  return result;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "if(numbers == null || numbers.length == 0)\n        return [];\n    var res = [];\n    var index = 0;\n    var max = numbers[0];\n    while(index < numbers.length){\n        if(numbers[index] > max)\n            max = numbers[index];\n        res.push(max);\n        index++;\n    }\n    return res;\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "var _numbers = numbers.slice();\n    var max = _numbers[0];\n    var max_index = 0;\n    for(var i = 1; i < _numbers.length; i++){\n        if(_numbers[i] > max){\n            max = _numbers[i];\n            max_index = i;\n        }\n        _numbers[i] = max;\n    }\n    return _numbers;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "var max = [];\n    for(i=0; i< numbers.length; i++){\n        max[i] = Math.max.apply(null, numbers.slice(0,i+1));\n    }\n    return max;\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "var result = [];\n  var max = numbers[0];\n  result.push(max);\n  for(var i = 1; i < numbers.length; i++){\n    if(numbers[i] > max){\n      max = numbers[i];\n    }\n    result.push(max);\n  }\n  return result;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "var temp = [];\n    for(var i = 0; i < numbers.length; i++){\n        temp.push(Math.max.apply(Math, numbers.slice(0, i+1)));\n    }\n    return temp;\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "let max_array = [];\n    let i;\n    let len = numbers.length;\n    let current_max = 0;\n    for(i = 0; i < len; i++){\n        current_max = Math.max(current_max, numbers[i]);\n        max_array.push(current_max);\n    }\n    return max_array;\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "return numbers.map((number, index) => {\n        const slice = numbers.slice(0, index+1);\n        return Math.max(...slice);\n    });\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "var result = [];\n    if(numbers.length > 0){\n        result.push(numbers[0]);\n        for(var i = 1; i < numbers.length; i++){\n            if(numbers[i] > result[i-1]){\n                result.push(numbers[i]);\n            }\n            else{\n                result.push(result[i-1]);\n            }\n        }\n    }\n    return result;\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "var res = [];\n    for(var i = 0; i < numbers.length; i++){\n        var max = numbers[i];\n        for(var j = 0; j <= i; j++){\n            if(numbers[j] > max){\n                max = numbers[j];\n            }\n        }\n        res.push(max);\n    }\n    return res;\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "var arr = [];\n    for(var i = 0; i < numbers.length; i++){\n        arr.push(Math.max.apply(null, numbers.slice(0, i+1)));\n    }\n    return arr;\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "var sequence = [];\n    for(var i = 0; i < numbers.length; i++){\n        var currentMax = 0;\n        for(var j = 0; j <= i; j++){\n            if(numbers[j] > currentMax){\n                currentMax = numbers[j];\n            }\n        }\n        sequence.push(currentMax);\n    }\n    return sequence;\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "var max_list = [];\n\tvar max = 0;\n\tfor(var i = 0; i < numbers.length; i++){\n\t\tif(numbers[i] > max){\n\t\t\tmax = numbers[i];\n\t\t}\n\t\tmax_list.push(max);\n\t}\n\treturn max_list;\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "return [...(function*(){\n    var rollingMax = numbers[0];\n    yield rollingMax;\n    for(var n of numbers.slice(1)){\n      rollingMax = Math.max(rollingMax, n);\n      yield rollingMax;\n    }\n  })()];\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "let result = [];\n\tlet currentMax = numbers[0];\n\tresult.push(currentMax);\n\tfor(i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] > currentMax){\n\t\t\tcurrentMax = numbers[i];\n\t\t}\n\t\tresult.push(currentMax);\n\t}\n\treturn result;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "return numbers.map(function(number, index){\n    var sublist = numbers.slice(0, index + 1);\n    return Math.max.apply(Math, sublist);\n  });\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "let max = [];\n  let maxx = numbers[0];\n  for(let i = 0; i < numbers.length; i++){\n    if(numbers[i] > maxx){\n      maxx = numbers[i];\n    }\n    max.push(maxx);\n  }\n  return max;\n}",
        "grade-19": {
            "execution": 1
        }
    },
    {
        "intent": "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n",
        "snippet": [
            "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n"
        ],
        "simplified": "Return the largest prime factor of n. Assume n > 1 and is not a prime.",
        "task_id": "59",
        "3": "var factors = [];\n    var largest = 0;\n    for (var i = 2; i < n; i++){\n        if (n % i === 0){\n            factors.push(i);\n        }\n    }\n    for (var i = 0; i < factors.length; i++){\n        if (is_prime(factors[i])){\n            largest = factors[i];\n        }\n    }\n    return largest;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "//Write code here\n    var biggestPrime = 0;\n    for(var i = 2; i <= n; i++){\n        if(n % i == 0){\n            biggestPrime = i;\n            n = n / i;\n            i = 2;\n        }\n    }\n    return biggestPrime;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "var max = 0;\n    for(var i = 2; i < n; i++){\n        if(n % i == 0){\n            if(is_prime(i)){\n                max = i;\n            }\n        }\n    }\n    return max;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "//Initialize a prime number generator\n    var primes = prime_generator();\n    //Iterate over the prime numbers\n    for(let p of primes){\n        //When a prime p divides n, divide n by p\n        while(n % p == 0){\n            n /= p;\n        }\n        //When n is no longer divisible by p, we are done.\n        if(n == 1){\n            return p;\n        }\n    }\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "var largest = 0;\n  //We'll use this to keep track of whether n has already been divided.\n  var divided = false;\n  //Starting at 2 and stopping when n is 1.\n  for(var i = 2; n != 1; i++){\n    //Trying to divide n by i.\n    if(n % i == 0){\n      //If that works, we've found a prime factor.\n      divided = true;\n      //It's the largest so far.\n      largest = i;\n      //We want to keep dividing out the prime factor.\n      //But not keep trying to divide by the same factor.\n      while(n % i == 0){\n        n = n / i;\n      }\n    }\n  }\n  //If we've already divided n, then it's larger than 1,\n  //and we can return the largest prime factor.\n  if(divided){\n    return largest;\n  }\n  //Otherwise, n is a prime, so it's its own largest prime factor.\n  else{\n    return n;\n  }\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "var factors = [], i;\n    for (i = 2; i <= n; i++) {\n        while ((n % i) === 0) {\n            factors.push(i);\n            n /= i;\n        }\n    }\n    return factors[factors.length - 1];\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "for(var i = Math.ceil(Math.sqrt(n)); i > 1; i--){\n\t\tif(n % i == 0 && is_prime(i)){\n\t\t\treturn i;\n\t\t}\n\t}\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "var current_prime = 2;\n    var max_prime = 1;\n    while(n > 1){\n        if(n % current_prime == 0){\n            max_prime = current_prime;\n            n = n / current_prime;\n        }\n        else{\n            current_prime++;\n        }\n    }\n    return max_prime;\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "var p = 2;\n    while (p <= n){\n        if (n % p === 0){\n            n = n / p;\n        } else {\n            p = p + 1;\n        }\n    }\n    return p;\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "//get all prime factors of n\n    let primeFactors = get_prime_factors(n);\n    //return the largest one\n    return Math.max(...primeFactors);\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "if (is_prime(n)){return n;}\n  for (let i = Math.ceil(Math.sqrt(n)); i >= 2; i--){\n    if (n % i === 0 && is_prime(i)){\n      return i;\n    }\n  }\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "// Fill in the code here to satisfy the doctests\n\t// Hint: remember the tip above!\n\tvar cur = n;\n\tvar prime = find_next_prime(1);\n\tvar ans = 0;\n\twhile(cur > 1){\n\t\tif(cur % prime == 0){\n\t\t\tcur = cur / prime;\n\t\t\tans = prime;\n\t\t}\n\t\telse{\n\t\t\tprime = find_next_prime(prime);\n\t\t}\n\t}\n\treturn ans;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "let factors = get_factors(n);\n  factors.reverse();\n  console.log(factors);\n  let isPrime = function(num){\n    if(num === 2){\n      return true;\n    }\n    let factors = get_factors(num);\n    return factors.length === 2 ? true : false;\n  }\n  for(let i = 0; i < factors.length; i++){\n    if(isPrime(factors[i])){\n      return factors[i];\n    }\n  }\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "}",
        "grade-15": {
            "execution": 0
        },
        "13": "var i = 2;\n    while (i < n) {\n        if (n % i == 0) {\n            n = n / i;\n        } else {\n            i++;\n        }\n    }\n    return i;\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "var prime_factors = [];\n  var factor = 2;\n  while (n > 1){\n    if (n % factor === 0){\n      prime_factors.push(factor);\n      n = n / factor;\n    } else {\n      factor++;\n    }\n  }\n  return Math.max.apply(null, prime_factors);\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "function prime_factors(n){\n        //Return a list of the prime factors of n\n        //>>>prime_factors(2048)\n        //[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n        let factor = 2;\n        let result = [];\n        while (n > 1){\n            while (n % factor === 0){\n                result.push(factor);\n                n /= factor;\n            }\n            factor += 1;\n        }\n        return result;\n    }\n    //Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    const factors = prime_factors(n);\n    const largest_factor = factors[factors.length - 1];\n    return largest_factor;\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "var i = 2;\n    while (i < n){\n        if (n % i == 0){\n            n = n / i;\n        } else {\n            i += 1;\n        }\n    }\n    return n;\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "//YOUR CODE HERE\n    let lpf=1;\n    for(let i=2;i<n;i++){\n        if(n%i===0){\n            lpf=i;\n            n=n/i;\n            i=1;\n        }\n    }\n    return lpf;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "var prime = 2;\n    var max = 1;\n    while(n > 1){\n        if(n % prime == 0){\n            max = prime;\n            n = n / prime;\n        }\n        else{\n            prime = prime + 1;\n        }\n    }\n    return max;\n}",
        "grade-19": {
            "execution": 1
        }
    },
    {
        "intent": "//You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n// For lst = [0,81,12,3,1,21] the output should be 3\n// For lst = [0,8,1,2,1,7] the output should be 7\nfunction skjkasdkd(lst){\n",
        "snippet": [
            "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n"
        ],
        "simplified": "You are given a list of integers. You need to find the largest prime value and return the sum of its digits.",
        "task_id": "94",
        "3": "lst = lst.sort((a,b)=>a-b)\n  let prime = 0;\n  for(let i = lst.length - 1; i >= 0; i--){\n    if(isPrime(lst[i])){\n      prime = lst[i];\n      break;\n    }\n  }\n  if(prime === 0){\n    return 0;\n  }\n  return prime.toString().split('').reduce((sum, num)=> parseInt(sum) + parseInt(num))\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "let sum = 0;\n  let largestPrime = 0;\n  for(let i = 0; i < lst.length; i++){\n    let temp = 0;\n    for(let j = 2; j < lst[i]; j++){\n      if(lst[i] % j == 0){\n        temp++;\n      }\n    }\n    if(temp == 0){\n      largestPrime = lst[i];\n    }\n  }\n  while(largestPrime > 0){\n    sum += largestPrime % 10;\n    largestPrime = Math.floor(largestPrime / 10);\n  }\n  return sum;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "let jedi = [];\n  let master = [];\n  for(let i = 0; i < lst.length; i++){\n    jedi.push(lst[i]);\n    let jediLength = jedi.length;\n    for(let j = 0; j < jediLength; j++){\n      if(jedi[0] % jedi[j] === 0 && jedi[0] != jedi[j]){\n        jedi.shift();\n        break;\n      }\n    }\n  }\n  for(let i = 0; i < jedi.length; i++){\n    let element = jedi[i];\n    let nextElement = jedi[i+1];\n    if(nextElement !== undefined){\n      if(element > nextElement){\n        master.push(element);\n      }\n    }else{\n      master.push(element);\n    }\n  }\n  let element = master[0];\n  element = element.toString();\n  let counter = 0;\n  for(let i = 0; i < element.length; i++){\n    counter += parseInt(element[i]);\n  }\n  return counter;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "var largest = 0;\n    var sum = 0;\n    var largestString = '';\n    for(var i = 0; i < lst.length; i++){\n        if(isPrime(lst[i]) === true){\n            if(lst[i] > largest){\n                largest = lst[i];\n            }\n        }\n    }\n    largestString = largest.toString();\n    for(var j = 0; j < largestString.length; j++){\n        sum += parseInt(largestString[j]);\n    }\n    return sum;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "let arr=[];\n    for(let i=0;i<lst.length;i++){\n        if(isPrime(lst[i])) arr.push(lst[i]);\n    }\n    let max=Math.max(...arr);\n    max=max.toString();\n    let count=0;\n    for(let j=0;j<max.length;j++){\n        count+=+max[j];\n    }\n    return count;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "let largest = Math.max(...lst);\n\tconsole.log(largest);\n\tlet prime = isPrime(largest);\n\tconsole.log(prime);\n\tlet sum = 0;\n\tif(prime === true){\n\t\tfor(let i = 0; i < largest.length; i++){\n\t\t\tsum += largest[i];\n\t\t}\n\t}\n\treturn sum;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "function isPrime(num) {\n    for(var i = 2; i < num; i++)\n      if(num % i === 0) return false;\n    return num > 1;\n  }\n  var max=Math.max.apply(null,lst);\n  for(var i=max;i>0;i--){\n    if(isPrime(i)){\n      var res=i.toString().split('').reduce(function(x,y){return +x + +y});\n      return res;\n    }\n  }\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "if (typeof lst === 'number'){\n        lst = Array.from(arguments);\n    }\n    let prime = [];\n    lst.forEach(element => {\n        if (prime.indexOf(element) === -1){\n            prime.push(element);\n        }\n    });\n    let primeNumber = Math.max(...prime);\n    let str = String(primeNumber);\n    let answer = 0;\n    for (let i = 0; i < str.length; i++){\n        answer += Number(str[i]);\n    }\n    return answer;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "let n = Math.max(...lst);\n    let prime;\n    let sum = 0;\n    let i = 0;\n    while(i <= n){\n        if(isPrime(i)){\n            prime = i;\n        }\n        i++;\n    }\n    let str = prime.toString();\n    for(let i = 0; i < str.length; i++){\n        sum += parseInt(str[i]);\n    }\n    return sum;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "var sum = 0;\n    var max = lst[0];\n    for(var i = 0; i < lst.length; i++){\n        if(max < lst[i]){\n            max = lst[i];\n        }\n    }\n    for(var i = 2; i < max; i++){\n        if(isPrime(i)){\n            var tmpSum = 0;\n            for(var j = 0; j < lst.length; j++){\n                if(lst[j] == i){\n                    tmpSum += i;\n                }\n            }\n            if(tmpSum >= sum){\n                sum = tmpSum;\n            }\n        }\n    }\n    return sum;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "let str = [... new Set(lst)].sort((a,b)=> b-a).filter(el=>{\n        if(el === 1) return false;\n        for(let i = 2; i < el; i++){\n            if(el % i === 0) return false;\n        }\n        return true;\n    })[0].toString();\n    return str.split('').reduce((acc, cur)=> acc + parseInt(cur), 0);\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "let arr = [];\n    lst.forEach(x => {\n        if(lst.length > 1 && isPrime(x)){\n            arr.push(x);\n        }\n    });\n    let sum = arr.reduce((a, b) => a + b, 0);\n    let sumString = sum.toString();\n    let sumArray = sumString.split('');\n    let sumResult = sumArray.reduce((a, b) => a + parseInt(b), 0);\n    return sumResult;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "let res = lst.sort((a,b)=>b-a).filter(x=>x>=2).find(x=>isPrime(x));\n    return res.toString().split('').reduce((a,b)=>+a+ +b);\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "if (lst == 0) {\n        return 0;\n    }\n    let b = lst.join('').split('').map(Number);\n    let sum = b.reduce((a, b) => a + b, 0);\n    return sum;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "}",
        "grade-13": {
            "execution": 0
        },
        "9": "}",
        "grade-9": {
            "execution": 0
        },
        "4": "let primes = [];\n  lst.sort((a,b)=>b-a).forEach(i=>{\n    if(isPrime(i)){\n      primes.push(i);\n    }\n  });\n  return sumDigits(primes[0])\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "let result;\n    //step one get all primes in the list\n    let primeList = []\n    for(let i = 0; i < lst.length; i++){\n        if(isPrime(lst[i])){\n            primeList.push(lst[i])\n        }\n    }\n    //step two get the largest prime\n    let largestPrime = Math.max(...primeList)\n    //step three get the largest prime's digits\n    let primeDigits = largestPrime.toString().split('').map(Number)\n    //step four get the sum of the digits\n    result = primeDigits.reduce((a,b) => a + b, 0)\n    return result\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "var largestPrime = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(prime(lst[i]) && largestPrime < lst[i]){\n            largestPrime = lst[i];\n        }\n    }\n    return largestPrime;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "//TODO: Write - Your - Code\n  let c=[]\n  lst.forEach(x=>{\n    if(isPrime(x))\n    c.push(x)\n  })\n  console.log(c)\n  let max=0\n  c.forEach(x=>{\n    if(x>max)\n    max=x\n  })\n  let str=max.toString()\n  let sum=0\n  for(let i=0;i<str.length;i++){\n    sum+=parseInt(str[i])\n  }\n  return sum\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//You are given a list of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the list.\n// Return None if there is no such element.\n// next_smallest([1, 2, 3, 4, 5]) == 2\n// next_smallest([5, 1, 4, 3, 2]) == 2\n// next_smallest([]) == None\n// next_smallest([1, 1]) == None\nfunction next_smallest(lst){\n",
        "snippet": [
            "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n"
        ],
        "simplified": "You are given a list of integers. Write a function next_smallest() that returns the 2nd smallest element of the list. Return None if there is no such element.",
        "task_id": "90",
        "3": "if(lst.length < 2) return;\n    var min = Math.min(...lst);\n    var sec = Infinity;\n    for(var el of lst){\n        if(el > min && el < sec) sec = el;\n    }\n    return sec;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "var smallest = Number.MAX_VALUE;\n    var next_smallest = Number.MAX_VALUE;\n    var counter = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] < smallest){\n            next_smallest = smallest;\n            smallest = lst[i];\n        }\n        else if(lst[i] < next_smallest && lst[i] > smallest){\n            next_smallest = lst[i];\n        }\n        if(lst[i] == lst[i + 1]){\n            counter += 1;\n        }\n    }\n    if(counter == lst.length){\n        return null;\n    }\n    else{\n        return next_smallest;\n    }\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "return lst.sort(function(a,b){\n        return a - b;\n    })[1] ? lst.sort(function(a,b){\n        return a - b;\n    })[1] : null;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "if(lst.length === 0){\n        return null;\n    }\n    else if(lst.length === 1){\n        return null;\n    }\n    else if(lst.length === 2){\n        if(lst[0] === lst[1]){\n            return null;\n        }\n        else{\n            if(lst[0] < lst[1]){\n                return lst[0];\n            }\n            else{\n                return lst[1];\n            }\n        }\n    }\n    else{\n        lst.sort(function(a, b){return a-b});\n        for(var i = 0; i < lst.length; i++){\n            if(lst[i] === lst[i+1]){\n                continue;\n            }\n            else{\n                return lst[i+1];\n            }\n        }\n    }\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "if(lst.length < 2){\n    return null;\n  }\n  lst.sort(function(a, b){return a-b});\n  let result = [];\n  result.push(lst[0]);\n  for(let i = 1; i < lst.length; i++){\n    if(lst[i] != lst[i-1]){\n      result.push(lst[i]);\n    }\n  }\n  if(result.length >= 2){\n    return result[1];\n  }else{\n    return null;\n  }\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "let min = Math.min(...lst);\n    let minSecond = lst.filter(num => num > min);\n    if (minSecond.length > 0) {\n        return Math.min(...minSecond);\n    } else {\n        return null;\n    }\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "if(lst.length < 2){\n        return null;\n    }\n    let smallest = lst[0];\n    let secondSmallest = null;\n    for(let i = 1; i < lst.length; i++){\n        if(lst[i] < smallest){\n            secondSmallest = smallest;\n            smallest = lst[i];\n        }\n        else if(lst[i] < secondSmallest){\n            secondSmallest = lst[i];\n        }\n    }\n    return secondSmallest;\n}\n\nmodule.exports = {\n    next_smallest\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "if (lst.length === 0 || lst.length === 1) return null;\n    if (lst.length === 2) return lst[0] === lst[1] ? null : lst[1];\n    let first_min = lst[0];\n    let second_min = lst[1];\n    for (let i = 1; i < lst.length; i++){\n        if (lst[i] < first_min){\n            second_min = first_min;\n            first_min = lst[i];\n        }\n        else if (lst[i] < second_min && lst[i] !== first_min){\n            second_min = lst[i];\n        }\n    }\n    return second_min;\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "if(lst.length < 2) return null;\n    let set = new Set();\n    let min = Math.min(...lst);\n    set.add(min);\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] != min){\n            set.add(lst[i]);\n        }\n    }\n    return Math.min(...set);\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "let min = Math.min(...lst);\n    if(lst.length == 0){\n        return null;\n    }\n    if(lst.indexOf(min) == lst.lastIndexOf(min)){\n        return null;\n    }\n    let lst2 = lst.filter(x => x != min);\n    return Math.min(...lst2);\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "if(lst.length < 2){\n        return null;\n    }\n    let sorted = lst.sort((a,b) => a-b);\n    return sorted[1];\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "if (lst.length <= 2) return null;\n  var min = lst[0];\n  var min_idx = 0;\n  for (var i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      min_idx = i;\n    }\n  }\n  var second_min = lst[0];\n  for (var i = 1; i < lst.length; i++) {\n    if (i != min_idx && lst[i] < second_min) {\n      second_min = lst[i];\n    }\n  }\n  return second_min;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "if(lst.length == 0){\n        return null;\n    }\n    if(lst.length == 1){\n        return null;\n    }\n    let temp = lst[0];\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < temp){\n            temp = lst[i];\n        }\n    }\n    let temp2 = lst[0];\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] > temp && lst[i] < temp2){\n            temp2 = lst[i];\n        }\n    }\n    return temp2;\n}\nlet list = [5, 1, 4, 3, 2];",
        "grade-18": {
            "execution": 0
        },
        "15": "var l = [];\n    var c = [];\n    var a = 0;\n    var b = 0;\n    if(lst.length == 0){\n        return null;\n    }\n    else{\n        if(lst.length > 2){\n            for(var i = 0; i < lst.length; i++){\n                for(var j = i+1; j < lst.length; j++){\n                    if(lst[i] == lst[j]){\n                        a = a + 1;\n                    }\n                }\n            }\n            if(a == 0){\n                for(var i = 0; i < lst.length; i++){\n                    for(var j = i+1; j < lst.length; j++){\n                        if(lst[i] > lst[j]){\n                            c = lst[i];\n                            lst[i] = lst[j];\n                            lst[j] = c;\n                        }\n                    }\n                }\n                return lst[1];\n            }\n            else{\n                return null;\n            }\n        }\n        else{\n            if(lst[0] == lst[1]){\n                return null;\n            }\n            else{\n                return lst[1];\n            }\n        }\n    }\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "let smallest = lst[0];\n    let secondSmallest = null;\n    let i = 0;\n    while(i < lst.length){\n        if(lst[i] < smallest){\n            secondSmallest = smallest;\n            smallest = lst[i];\n        }\n        else if(lst[i] < secondSmallest){\n            secondSmallest = lst[i];\n        }\n        i++\n    }\n    return secondSmallest;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "var arr = []\n  if(lst.length > 1){\n    arr = lst.sort(function(a, b){return a-b});\n    for(var i = 0; i < arr.length; i++){\n      if(arr[i] !== arr[i+1]){\n        return arr[i+1];\n      }\n    }\n  }\n  return null;\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "if(lst.length==0){\n        return null;\n    }\n    var min=Math.min(...lst);\n    if(lst.indexOf(min)==-1){\n        return null;\n    }\n    if(lst.indexOf(min)!=-1){\n        var min_2=lst[lst.indexOf(min)];\n        var min_index_2=lst.indexOf(min);\n        for(var i=lst.indexOf(min);i<lst.length;i++){\n            if(lst[i]<min_2){\n                min_2=lst[i];\n                min_index_2=i;\n            }\n        }\n        if(min_index_2==lst.indexOf(min)){\n            return null;\n        }\n        return min_2;\n    }\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "if (lst.length === 0) {\n        return null;\n    } else if (lst.length === 1) {\n        return null;\n    } else {\n        var min = Math.min(...lst);\n        var index = lst.indexOf(min);\n        lst.splice(index, 1);\n        return Math.min(...lst);\n    }\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "if(lst.length<2){\n        return null;\n    }\n    if(lst.length==2){\n        if(lst[0]==lst[1]){\n            return null;\n        }\n    }\n    let min=Math.min(...lst);\n    let min_index=lst.indexOf(min);\n    if(min_index==0){\n        return lst[1];\n    }\n    if(min_index==lst.length-1){\n        return lst[lst.length-2];\n    }\n    return Math.min(lst[min_index-1],lst[min_index+1]);\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "var smallest = Number.MAX_VALUE;\n    var secondSmallest = Number.MAX_VALUE;\n    if(lst.length==0) return \"None\";\n    for(var i=0;i<lst.length;i++){\n        if(lst[i]<smallest){\n            secondSmallest = smallest;\n            smallest = lst[i];\n        }else if(lst[i]<secondSmallest && lst[i]!=smallest){\n            secondSmallest = lst[i];\n        }\n    }\n    if(secondSmallest == Number.MAX_VALUE){\n        return \"None\";\n    }\n    return secondSmallest;\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nfunction change_base(x, base){\n",
        "snippet": [
            "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n"
        ],
        "simplified": "Change numerical base of input number x to base. return string representation after the conversion. base numbers are less than 10.",
        "task_id": "44",
        "3": "if(x < base){\n    return x;\n  }\n  else{\n    return change_base(Math.floor(x/base), base) + x%base;\n  }\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "var result = \"\";\n    while(x > 0){\n        var remainder = x % base;\n        x = Math.floor(x / base);\n        result = remainder + result;\n    }\n    return result;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "var res = \"\"\n\twhile(x != 0){\n\t\tres = x % base + res\n\t\tx = Math.floor(x / base)\n\t}\n\treturn res\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "var ans = \"\";\n\twhile(x > 0){\n\t\tans = (x % base) + ans;\n\t\tx = Math.floor(x / base);\n\t}\n\treturn ans;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "var digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    if (x < base) return digits[x];\n    return change_base(Math.floor(x/base), base) + digits[x%base];\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "console.log(\"change_base(\" + x + \",\" + base + \")\");\n    var result = \"\";\n    while(x > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "var result=\"\";\n\twhile(x>0){\n\t\tresult=x%base+result;\n\t\tx=Math.floor(x/base);\n\t}\n\treturn result;\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "var result = [];\n  var y = 0;\n  for(var i = 0; i < x; i++){\n    y = i;\n    result.push(i);\n    while(y >= base){\n      y = Math.floor(y / base);\n      result.push(y);\n    }\n  }\n  return result;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "var result = '';\n    var rem = 0;\n    while(x >= base){\n        rem = x % base;\n        x = Math.floor(x / base);\n        result = String(rem) + result;\n    }\n    result = String(x) + result;\n    return result;\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "let isNegative = false;\n    if(x < 0){\n        isNegative = true;\n        x = -x;\n    }\n    let res = [];\n    while(x){\n        let r = x % base;\n        res.push(r);\n        x = Math.floor(x / base);\n    }\n    if(isNegative){\n        res.push('-');\n    }\n    return res.reverse().join('');\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "var ten_to_base = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'A', 'B', 'C', 'D', 'E', 'F'];\n    var converted = \"\";\n    var x = Number(x);\n    var base = Number(base);\n    if (x === 0){\n        return \"0\";\n    }\n    if (base === 10){\n        return String(x);\n    }\n    while (x > 0){\n        var rem = x % base;\n        converted = ten_to_base[rem] + converted;\n        x = (x - rem) / base;\n    }\n    return converted;\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "if(x < base){\n        return x + '';\n    }\n    return change_base(Math.floor(x / base), base) + (x % base);\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "return ''.join(reversed(change_base_helper(x, base)));\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "var nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n  var result = \"\";\n  while(x > 0){\n    result = nums[x % base] + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "// TODO\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "var list = [0,1,2,3,4,5,6,7,8,9];\n    var str = \"\";\n    while(x > 0){\n        str = list[x % base] + str;\n        x = parseInt(x / base);\n    }\n    return str;\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "}",
        "grade-4": {
            "execution": 0
        },
        "14": "if(base>10){\n    throw 'base number should be less than 10';\n  }\n  var num = x;\n  var result = [];\n  while(num>=base){\n    result.push(num%base);\n    num = Math.floor(num/base);\n  }\n  result.push(num);\n  return result.reverse().join('');\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "/* your code here */\n\t\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "var ans = \"\";\n  while(x >= base){\n    var left = x % base;\n    x = Math.floor(x / base);\n    ans = left + ans;\n  }\n  ans = x + ans;\n  return ans;\n}",
        "grade-19": {
            "execution": 1
        }
    },
    {
        "intent": "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n",
        "snippet": [
            "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n"
        ],
        "simplified": "You'll be given a string of words, and your task is to count the number of boredoms. A boredom is a sentence that starts with the word \"I\". Sentences are delimited by '.', '?' or '!'.",
        "task_id": "91",
        "3": "var sentences = S.split(/[.!?]/g);\n  return sentences.filter(s => s.trim().split(' ')[0] === 'I').length;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "if(typeof S !== \"string\"){\n    return \"Error\";\n  }\n  let arr = S.split(/[.?!]/);\n  let boredoms = 0;\n  for(let sentence of arr){\n    sentence = sentence.trim();\n    if(sentence.length > 0 && sentence.indexOf(\"I\") === 0){\n      boredoms += 1;\n    }\n  }\n  return boredoms;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "var splits = S.split(/[\\.\\?\\!]/);\n    var i=0;\n    for(var j=0;j<splits.length;j++){\n        if(splits[j].indexOf(\"I\")===0){\n            i++;\n        }\n    }\n    return i;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "S = S.split(\" \");\n    return(S.reduce((a,b) => b === \"I\" ? a+1 : a, 0));\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "var arr = S.split(/[.!?]/);\n    return arr.filter(function(e){\n        return e.charAt(0) == 'I';\n    }).length;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "let count = 0;\n    let sentences = S.split(/[.?!]/g);\n    for(sentence of sentences){\n        if(sentence.split(\" \")[0] === \"I\"){\n            count += 1;\n        }\n    }\n    return count;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "let boredoms = 0;\n    let wordArray = S.split(\" \");\n    for(i = 0; i < wordArray.length; i++){\n        if(wordArray[i] == \"I\"){\n            boredoms++;\n        }\n    }\n    return boredoms;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "var boredoms = 0;\n  var sentences = S.split(/[\\.\\?\\!]/);\n  sentences.forEach(function(sentence){\n    if(sentence.trim().slice(0,1) === \"I\"){\n      boredoms++;\n    }\n  });\n  return boredoms;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "var  str = S.split(\".\");\n  var  count = 0;\n  for(var i=0; i<str.length; i++){\n    if(str[i].charAt(0) == \"I\"){\n      count = count + 1;\n    }\n  }\n  return count;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "return S.split(\".\")\n\t\t.filter(function(sentence){return sentence.startsWith(\"I\")})\n\t\t.length;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "var phrases = S.split(/[.?!]/);\n\tvar boredom_count = 0;\n\tfor (var i = 0; i < phrases.length; i++){\n\t\tif (phrases[i].charAt(0) == \"I\"){\n\t\t\tboredom_count += 1;\n\t\t}\n\t}\n\treturn boredom_count;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "var arr = S.split(/[.?!]/);\n\tvar count = 0;\n\tfor(var i = 0; i < arr.length; i++){\n\t\tvar arr2 = arr[i].split(' ');\n\t\tif(arr2[0] === 'I'){\n\t\t\tcount += 1;\n\t\t}\n\t}\n\treturn count;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "var list = S.split(/[.!?]/);\n    var result = 0;\n    list.forEach(function(word){\n        if(word.charAt(0) == \"I\"){\n            result++;\n        }\n    });\n    return result;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "var count = 0;\n    var arr = S.split(\".\");\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i].charAt(0) == \"I\"){\n            count += 1;\n        }\n    }\n    return count;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "var count = 0;\n  var splitByChar = S.split(/[.!?]/);\n  for(var i = 0; i < splitByChar.length; i++){\n    if(splitByChar[i].charAt(0) === \"I\"){\n      count++;\n    }\n  }\n  return count;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "return S.split(/[!.?]+/).filter(e => e.startsWith(\"I\")).length;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "let count = 0;\n    let arr = S.split(\" \");\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] == \"I\"){\n            count++;\n        }\n    }\n    return count;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "var data = S.split(/[\\.\\?\\!]/);\n  var boredomCount = 0;\n  for(var i = 0; i < data.length; i++){\n    if(data[i].startsWith(\"I\")){\n      boredomCount++;\n    }\n  }\n  return boredomCount;\n}\nvar result = is_bored(\"The sky is blue. The sun is shining. I love this weather\");",
        "grade-14": {
            "execution": 0
        },
        "5": "//remove white space and make string a list\n    var strList = S.replace(/\\s/g, '').split(\".\");\n    var numberOfBoredoms = 0;\n    var i;\n    for(i = 0; i < strList.length; i++){\n        if(strList[i][0] == \"I\"){\n            numberOfBoredoms++;\n        }\n    }\n    return numberOfBoredoms;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "//Code here\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// count_up_to(5) => [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20) => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\nfunction count_up_to(n){\n",
        "snippet": [
            "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n"
        ],
        "simplified": "Implement a function that takes an non-negative integer and returns an array of the first n integers that are prime numbers and less than n. for",
        "task_id": "96",
        "3": "var array = [];\n  var num = 2;\n  while(num < n){\n    if(check_prime(num)){\n      array.push(num);\n    }\n    num++;\n  }\n  return array;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "var result = [];\n    for(var i = 2; i < n; i++){\n        if(prime(i)){\n            result.push(i);\n        }\n    }\n    return result;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "if(n < 0){\n    return false;\n  }\n  else if(n === 0){\n    return [];\n  }\n  else if(n === 1){\n    return [];\n  }\n  else if(n === 2){\n    return [2];\n  }\n  else if(n === 3){\n    return [2,3];\n  }\n  else{\n    let ans = [2,3];\n    for(let i = 3; i < n; i++){\n      let isPrime = true;\n      for(let j = 2; j < i; j++){\n        if(i % j === 0){\n          isPrime = false;\n        }\n      }\n      if(isPrime){\n        ans.push(i);\n      }\n    }\n    return ans;\n  }\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "var arr = [];\n  if(n<=1){\n    return arr;\n  }\n  if(n<3){\n    arr.push(2);\n    return arr;\n  }\n  if(n<4){\n    arr.push(2);\n    arr.push(3);\n    return arr;\n  }\n  for(var i=2;i<n;i++){\n    if(i%2===0 || i%3===0){\n      continue;\n    }\n    else if(i%5===0 || i%7===0){\n      continue;\n    }\n    else{\n      arr.push(i);\n    }\n  }\n  return arr;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "if(n<=1){\n        return [];\n    }\n    let x = []\n    for(let i = 2; i<n; i++){\n        if(isPrime(i)){\n            x.push(i);\n        }\n    }\n    return x;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "var count=[];\n    if(n==0) return count;\n    for(var i=2;i<n;i++){\n        var isprime=true;\n        for(var j=2;j<i;j++){\n            if(i%j==0){\n                isprime=false;\n                break;\n            }\n        }\n        if(isprime)\n            count.push(i);\n    }\n    return count;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "function isPrime(number) {\n      var start = 2;\n      while (start <= Math.sqrt(number)) {\n          if (number % start++ < 1) return false;\n      }\n      return number > 1;\n  }\n  var primeNumbers = [];\n  for (var i = 0; i < n; i++) {\n    if (isPrime(i)) {\n      primeNumbers.push(i);\n    }\n  }\n  return primeNumbers;\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "//your code here\n  var array = [];\n  for(var i = 2; i < n; i++){\n    if(isPrime(i)){\n      array.push(i);\n    }\n  }\n  return array;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "var arr = [];\n  for(var i = 2; i < n; i++){\n    if(isPrime(i)){\n      arr.push(i);\n    }\n  }\n  return arr;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "let primes = [];\n    if(n === 0) return primes;\n    for(let i = 2; i < n; i++){\n        if(i < 2) continue;\n        for(let j = 2; j < i; j++){\n            if(i % j === 0) continue;\n        }\n        primes.push(i);\n    }\n    return primes;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "var result = [];\n\tfor(var i = 2; i < n; i++){\n\t\tvar count = 0;\n\t\tfor(var j = 2; j < i; j++){\n\t\t\tif(i % j === 0){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count === 0){\n\t\t\tresult.push(i);\n\t\t}\n\t}\n\treturn result;\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "// list=[];\n    // for(var i=2;i<n;i++){\n    //     if(is_prime(i)){\n    //         list.push(i);\n    //     }\n    // }\n    // return list;\n    var array = Array.apply(null, Array(n)).map(function (_, i) {return i;});\n    return array.filter(is_prime);\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "var arr = [];\nfor(var i = 2; i<n; i++){\nif(checkPrime(i)){\narr.push(i);\n}\n}\nreturn arr;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "var primeArray = [];\nfor(var i = 2; i < n; i++){\n  if(isPrime(i)){\n    primeArray.push(i);\n  }\n}\n\nreturn primeArray;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "var result = [];\n    if( n === 0){\n        return result;\n    }\n    if( n === 1){\n        return result;\n    }\n    var is_prime = function(num){\n        for(var i = 2; i < num; i++){\n            if(num % i === 0){\n                return false;\n            }\n        }\n        return true;\n    };\n    for(var i = 2; i < n; i++){\n        if(is_prime(i)){\n            result.push(i);\n        }\n    }\n    return result;\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "var count = 0;\n\tvar arr = [];\n\tfor(var i = 2; i <= n; i++){\n\t\tcount = 0;\n\t\tfor(var j = 2; j <= i/2; j++){\n\t\t\tif(i % j == 0){\n\t\t\t\tcount++;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(count == 0 && i != 1){\n\t\t\tarr.push(i);\n\t\t}\n\t}\n\treturn arr;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "var arr = []\n    for(var i = 2; i < n; i++){\n        for(var j = 2; j < i; j++){\n            if(i % j === 0){\n                break;\n            }\n            if(j == i-1){\n                arr.push(i)\n            }\n        }\n    }\n    return arr\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "if(n <= 1){\n    return [];\n  }\n  var result = [2];\n  for(var i = 3; i < n; i += 2){\n    if(isPrime(i)){\n      result.push(i);\n    }\n  }\n  return result;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "let primeArr = [];\n    if(n == 0){\n        return primeArr;\n    }else if(n == 1){\n        return primeArr;\n    }else{\n        for(let i = 2; i < n; i++){\n            if(isPrime(i)){\n                primeArr.push(i);\n            }\n        }\n        return primeArr;\n    }\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "let count = [];\n    for(let i = 2; i < n; i++){\n        for(let j = 2; j <= i; j++){\n            if(i === j){\n                count.push(i);\n            }\n            if(i % j === 0){\n                break;\n            }\n        }\n    }\n    return count;\n}",
        "grade-19": {
            "execution": 1
        }
    },
    {
        "intent": "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n",
        "snippet": [
            "  return l.map(e => e + 1);\n}\n\n"
        ],
        "simplified": "Return list with elements incremented by 1.",
        "task_id": "42",
        "0": "return l.map(x => x + 1);\n}",
        "grade-0": {
            "execution": 1
        },
        "1": "var newList = [];\n\tfor(i=0; i<l.length; i++){\n\t\tnewList.push(l[i]+1);\n\t}\n\treturn newList;\n}",
        "grade-1": {
            "execution": 1
        },
        "2": "let result = [];\n    for(let i = 0; i < l.length; i++){\n        result.push(l[i] + 1);\n    }\n    return result;\n}",
        "grade-2": {
            "execution": 1
        },
        "3": "return l.map(function(x){return x+1});\n}",
        "grade-3": {
            "execution": 1
        },
        "4": "return map(incr, l);\n}",
        "grade-4": {
            "execution": 0
        },
        "5": "var r= [];\n  for(var i=0; i<l.length; i++){\n    r.push(l[i]+1);\n  }\n  return r;\n}",
        "grade-5": {
            "execution": 1
        },
        "6": "var lincr=[];\n    for(var i=0;i<l.length;i++){\n        lincr.push(l[i]+1);\n    }\n    return lincr;\n}",
        "grade-6": {
            "execution": 1
        },
        "7": "return l.map(i => i + 1);\n}",
        "grade-7": {
            "execution": 1
        },
        "8": "// Create new list\n    var incr_l = [];\n    for (i=0; i<l.length; i++){\n      incr_l.push(l[i]+1);\n    }\n    return incr_l;\n}\nvar l = [1, 2, 3];",
        "grade-8": {
            "execution": 1
        },
        "9": "return l.map(x => x + 1);\n}",
        "grade-9": {
            "execution": 1
        },
        "10": "return l.map(x => x + 1);\n}",
        "grade-10": {
            "execution": 1
        },
        "12": "// return (null)?(null): l.map(x => x+1);\n    if(l == null){\n        return null;\n    }else{\n        var result=[];\n        for(var i=0; i<l.length; i++){\n            result.push(l[i]+1);\n        }\n        return result;\n    }\n}",
        "grade-12": {
            "execution": 1
        },
        "13": "return _.map(l, function(elem){\n    return elem + 1;\n  });\n}",
        "grade-13": {
            "execution": 0
        },
        "14": "let result = [];\n\tfor(let i = 0; i < l.length; i++){\n\t\tresult.push(l[i] + 1);\n\t}\n\treturn result;\n}",
        "grade-14": {
            "execution": 1
        },
        "15": "return l.map(function(i){\n        return i+1;\n    });\n}",
        "grade-15": {
            "execution": 1
        },
        "17": "if(is_null(l)){\n        return null;\n    } else {\n        return pair(\n            head(l) + 1,\n            incr_list(tail(l))\n        );\n    }\n}",
        "grade-17": {
            "execution": 0
        },
        "18": "var il = new Array();\n\tfor(var i=0; i<l.length; i++){\n\t\til.push(l[i]+1);\n\t}\n\treturn il;\n}",
        "grade-18": {
            "execution": 1
        },
        "19": "var newList = [];\n\tfor(var i = 0; i < l.length; i++){\n\t\tnewList.push(l[i] + 1);\n\t}\n\treturn newList;\n}",
        "grade-19": {
            "execution": 1
        }
    },
    {
        "intent": "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n",
        "snippet": [
            "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n"
        ],
        "simplified": "Write a function count_nums which takes an array of integers and returns the number of elements which has a sum of digits > 0. If a number is negative, then its first signed digit will be negative: e.g. -123 has signed digits -1, 2, and 3.",
        "task_id": "108",
        "3": "if(arr.length === 0){\n        return 0;\n    }\n    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        let sum = 0;\n        if(arr[i] < 0){\n            arr[i] = arr[i] * -1;\n        }\n        while(arr[i] > 0){\n            sum += arr[i] % 10;\n            arr[i] = Math.floor(arr[i] / 10);\n        }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return count;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "let sum = 0;\n    arr.forEach(function(num){\n        let numStr = num.toString();\n        let sum = 0;\n        for(let i = 0; i < numStr.length; i++){\n            sum += parseInt(numStr[i]);\n        }\n        if(sum > 0){\n            sum++;\n        }\n    });\n    return sum;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "return arr.reduce(function(acc, element){\n    return acc + (signed_sum(element) > 0);\n  }, 0);\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n            count += Math.abs(arr[i] % 10);\n        }else{\n            count += arr[i] % 10;\n        }\n    }\n    return count;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "var res = 0;\n    for(var i = 0; i < arr.length; i++){\n        var sum = 0;\n        var num = Math.abs(arr[i]);\n        while(num > 0){\n            sum += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            res++;\n        }\n    }\n    return res;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "var count = 0;\n  for(i=0; i<arr.length; i++){\n    if(get_signed_digits(arr[i]).reduce(function(a,b){return a+b;}) > 0){\n      count++;\n    }\n  }\n  return count;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "// your code goes here\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "var count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var sum = 0;\n        if(arr[i] >= 0){\n            while(arr[i] > 0){\n                sum += arr[i] % 10;\n                arr[i] = Math.floor(arr[i] / 10);\n            }\n        }\n        else{\n            while(arr[i] < 0){\n                sum += Math.abs(arr[i] % 10);\n                arr[i] = Math.ceil(arr[i] / 10);\n            }\n        }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return count;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "var sum = 0;\n  for(i = 0; i < arr.length; i++){\n    if(arr[i] > 0){\n      sum = sum + arr[i];\n    }\n    else{\n      sum = sum - arr[i];\n    }\n  }\n  return sum;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "let count = 0;\n  arr.forEach(function(item){\n    if(item > 0){\n      let digits = item.toString().split('');\n      let result = 0;\n      digits.forEach(function(number){\n        result += parseInt(number);\n      });\n      if(result > 0){\n        count += 1;\n      }\n    }else{\n      let number = item.toString().split('');\n      let res = 0;\n      number.forEach(function(num){\n        res += parseInt(num);\n      });\n      if(res + 1 > 0){\n        count += 1;\n      }\n    }\n  });\n  return count;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "return arr.filter(x => {\n        return sum_digits(x) > 0;\n    }).length;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "//if no elements in array return 0\n\tif(arr.length == 0){\n\t\treturn 0;\n\t}\n\t//if first element in array is positive and string length is 1 return true\n\tif(arr[0] > 0 && arr[0].toString().length == 1){\n\t\treturn 1;\n\t}\n\t//if first element in array is negative and string length is 1 return true\n\tif(arr[0] < 0 && arr[0].toString().length == 1){\n\t\treturn 1;\n\t}\n\t//if first element in array is positive\n\tif(arr[0] > 0){\n\t\t//turn the number into a string\n\t\tvar str = arr[0].toString();\n\t\t//create an array of each string element\n\t\tvar split = str.split(\"\");\n\t\t//make an empty array to store the summation of digits\n\t\tvar sum = [];\n\t\t//loop through the array\n\t\tfor(var i = 0; i < split.length; i++){\n\t\t\t//turn the strings into integers and add them to sum array\n\t\t\tsum.push(parseInt(split[i]));\n\t\t}\n\t\t//declare variable to store sum of digits\n\t\tvar sumOf = 0;\n\t\t//loop through the sum array\n\t\tfor(var i = 0; i < sum.length; i++){\n\t\t\t//add the array elements together\n\t\t\tsumOf += sum[i];\n\t\t}\n\t\t//if the sum is greater than 0 return true\n\t\tif(sumOf > 0){\n\t\t\treturn 1;\n\t\t}\n\t}\n\t//if first element in array is negative\n\tif(arr[0] < 0){\n\t\t//take the negative sign out\n\t\tvar fix = arr[0].toString().substring(1);\n\t\t//turn number into a string\n\t\tvar str = fix.toString();\n\t\t//create an array of each string element\n\t\tvar split = str.split(\"\");\n\t\t//make an empty array to store the summation of digits\n\t\tvar sum = [];\n\t\t//loop through the array\n\t\tfor(",
        "grade-6": {
            "execution": 0
        },
        "18": "return arr.filter(function(v){\n\t\tvar sum = 0;\n\t\tfor(var i = 0; i < v.toString().length; i++){\n\t\t\tsum += parseInt(v.toString()[i]);\n\t\t}\n\t\treturn sum > 0;\n\t}).length;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "let count = 0;\n    arr.forEach(num => {\n        let num_str = num.toString();\n        if (num < 0) num_str = num_str.substring(1);\n        let sum = 0;\n        for (let i = 0; i < num_str.length; i++){\n            sum += parseInt(num_str[i]);\n        }\n        if (sum > 0) count++;\n    });\n    return count;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "return arr.filter(x => {\n\t\tif (x > 0) {\n\t\t\treturn x;\n\t\t}\n\t\tx = Math.abs(x);\n\t\tif (x < 0) {\n\t\t\treturn x;\n\t\t}\n\t}).reduce((acc, val) => {\n\t\tlet sum = 0;\n\t\tval = String(val);\n\t\tfor (let i = 0; i < val.length; i++){\n\t\t\tsum += Number(val[i]);\n\t\t}\n\t\tif (sum > 0) {\n\t\t\tacc++;\n\t\t}\n\t\treturn acc;\n\t}, 0);\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "var count = 0;\n\tvar digit = 0;\n\tvar sum = 0;\n\tfor(var i = 0; i < arr.length; i++){\n\t\tvar num = arr[i];\n\t\t//If the number is negative, we need to find the first digit.\n\t\tif(num < 0){\n\t\t\tnum = Math.abs(num);\n\t\t\tvar str = num.toString();\n\t\t\tdigit = parseInt(str[0]);\n\t\t\tsum = sum + digit;\n\t\t}\n\t\t//Find the sum of all the digits\n\t\twhile(num > 0){\n\t\t\tdigit = num % 10;\n\t\t\tsum = sum + digit;\n\t\t\tnum = Math.floor(num / 10);\n\t\t}\n\t\t//Count the elements that have a sum of digits > 0\n\t\tif(sum > 0){\n\t\t\tcount = count + 1;\n\t\t}\n\t\tsum = 0;\n\t}\n\treturn count;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "var count = 0;\n    for(var i = 0; i < arr.length; i++){\n        // if(Math.abs(arr[i]) < 10){\n        //     if(arr[i] > 0){\n        //         count++;\n        //     }\n        // }\n        // else{\n        //     var numbers = Math.abs(arr[i]).toString().split(\"\");\n        //     var sum = 0;\n        //     for(var j = 0; j < numbers.length; j++){\n        //         sum += parseInt(numbers[j]);\n        //     }\n        //     if(sum > 0){\n        //         count++;\n        //     }\n        // }\n        var number = Math.abs(arr[i]);\n        var sum = 0;\n        while(number > 0){\n            sum += number % 10;\n            number = Math.floor(number / 10);\n        }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return count;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "var sum;\n\tvar count = 0;\n\tfor(var i = 0; i < arr.length; i++){\n\t\tsum = 0;\n\t\tif(arr[i] < 0){\n\t\t\tarr[i] = arr[i] * -1;\n\t\t}\n\t\tvar num = arr[i].toString();\n\t\tfor(var j = 0; j < num.length; j++){\n\t\t\tsum += parseInt(num[j]);\n\t\t}\n\t\tif(sum > 0){\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "var count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var sum = 0;\n        var num = arr[i];\n        if(num < 0){\n            num = Math.abs(num);\n        }\n        while(num > 0){\n            sum += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return count;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "return arr.filter(function(x){\n    return (x.toString().split('').reduce(function(previousValue, currentValue){\n      return +previousValue + +currentValue;\n    }, 0) > 0);\n  }).length;\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//Write a function which sorts the given list of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums){\n",
        "snippet": [
            "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n"
        ],
        "simplified": "Write a function which sorts the given list of integers in ascending order according to the sum of their digits. Note: if there are several items with similar sum of their digits, order them based on their index in original list.",
        "task_id": "145",
        "3": "var index = 0;\n  var lookup = {};\n  var sorted = [];\n  var sortedKeys = [];\n  // make a copy of the array,\n  // and create a mapping of the number in array\n  // to the index of where it was in the array\n  // e.g. {0: 6, 1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5}\n  //nums = nums.slice();\n  for (var j = 0; j < nums.length; j++) {\n    lookup[j] = index;\n    index++;\n  }\n  // sort the copied array\n  nums.sort(function(a, b) {\n    // if sum(a) < sum(b),\n    // return -1 and let sort() know that a should come before b\n    // (or if they are equal, use the index to determine which\n    // should come first based on the original array).\n    if (sum(a) < sum(b)) return -1;\n    if (sum(a) === sum(b)) return lookup[b] - lookup[a];\n    // if sum(a) > sum(b), return 1,\n    // (or if they are equal, use the index to determine which\n    // should come first based on the original array).\n    if (sum(a) > sum(b)) return 1;\n  });\n  //console.log(nums);\n  return nums;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "// console.log(nums.sort((a, b) => sum_of_digits(a) - sum_of_digits(b)))\n    return nums.sort((a, b) => sum_of_digits(a) - sum_of_digits(b))\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "return nums.sort((a, b) => {\n        let a_sum = a.toString().split('').reduce((acc, num) => acc + parseInt(num), 0);\n        let b_sum = b.toString().split('').reduce((acc, num) => acc + parseInt(num), 0);\n        if (a_sum > b_sum) {\n            return 1;\n        } else if (a_sum < b_sum) {\n            return -1;\n        } else {\n            return a - b;\n        }\n    });\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "}",
        "grade-7": {
            "execution": 0
        },
        "16": "if (nums.length == 0) {\n        return [];\n    }\n\n    let nums_to_points = [];\n    let points_to_num = {};\n    let max_point = 0;\n    for (let i = 0; i < nums.length; i++) {\n        let point = 0;\n        let num = nums[i];\n        while (num != 0) {\n            point += num % 10;\n            num = parseInt(num / 10);\n        }\n        nums_to_points.push(point);\n        points_to_num[point] = nums[i];\n        if (point > max_point) {\n            max_point = point;\n        }\n    }\n\n    let result = [];\n    for (let i = 0; i <= max_point; i++) {\n        if (points_to_num[i] != undefined) {\n            result.push(points_to_num[i]);\n        }\n    }\n    return result;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "if(nums.length == 0){\n        return nums;\n    }\n    let sort = [];\n    let key = null;\n    let max = sumOfDigits(nums[0]);\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        let sum = sumOfDigits(nums[i]);\n        if(sum >= max){\n            max = sum;\n            key = nums[i];\n            count = 0;\n        }\n        if(i == nums.length - 1){\n            sort.push(key);\n            nums.splice(nums.indexOf(key), 1);\n            i = -1;\n            max = sumOfDigits(nums[0]);\n            count++;\n        }\n        if(count == nums.length){\n            break;\n        }\n    }\n    return sort;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "let arr = [];\n    let map = {};\n    for(let i=0; i<nums.length; i++){\n        arr.push([nums[i], sum_of_digits(nums[i])]);\n        if(!map[sum_of_digits(nums[i])]){\n            map[sum_of_digits(nums[i])] = [];\n        }\n        map[sum_of_digits(nums[i])].push(nums[i]);\n    }\n    let keys = Object.keys(map);\n    keys.sort((a,b)=>{\n        return a-b;\n    });\n    let finalArr = [];\n    for(let i=0; i<keys.length; i++){\n        map[keys[i]].sort((a,b)=>{\n            return a-b;\n        });\n        finalArr = finalArr.concat(map[keys[i]]);\n    }\n    return finalArr;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "return nums.map(\n    (num, i) => num + ' ' + i\n  ).sort().map(\n    (val) => Number(val.match(/\\d+/)[0])\n  );\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "let sum = 0;\n    let results = [];\n    if(nums.length > 0){\n        for(let i = 0; i < nums.length; i++){\n            for(let j = 0; j < (nums[i].toString()).length; j++){\n                sum += parseInt((nums[i].toString())[j]);\n            }\n            results.push([sum, i]);\n            sum = 0;\n        }\n        results.sort(function(a, b){\n            return a[0] - b[0];\n        });\n        for(let i = 0; i < results.length; i++){\n            results[i] = nums[results[i][1]];\n        }\n    }\n    return results;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "// if (nums.length > 1){\n\t// \tfor (var i = 0; i < nums.length - 1; i++){\n\t// \t\tfor (var j = i + 1; j < nums.length; j++){\n\t// \t\t\tif (get_sum_of_numbers(nums[i]) > get_sum_of_numbers(nums[j])){\n\t// \t\t\t\tvar temp = nums[i];\n\t// \t\t\t\tnums[i] = nums[j];\n\t// \t\t\t\tnums[j] = temp;\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// }\n\tvar sorted_array = nums.slice().sort(function(a, b){\n\t\treturn get_sum_of_numbers(a) - get_sum_of_numbers(b);\n\t});\n\treturn sorted_array;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "var result = [];\n    if(nums.length > 0){\n        for(var i = 0; i < nums.length; i++){\n            var tmp = nums[i];\n            var num = Math.abs(tmp).toString();\n            var sum = 0;\n            for(var j = 0; j < num.length; j++){\n                sum += Number(num[j]);\n            }\n            result.push([tmp, sum, i]);\n        }\n        result.sort(function(a, b){\n            if(a[1] === b[1]){\n                return a[2] - b[2];\n            }\n            return a[1] - b[1];\n        });\n        var res = [];\n        for(var i = 0; i < result.length; i++){\n            res.push(result[i][0]);\n        }\n        return res;\n    }\n    return result;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "var result = [];\n  var sorted = {};\n  nums.forEach(function(num, index){\n    var numArr = num.toString().split('');\n    if(sorted[numArr.reduce(function(a,b){\n      return parseInt(a) + parseInt(b);\n    })] == undefined){\n      sorted[numArr.reduce(function(a,b){\n        return parseInt(a) + parseInt(b);\n      })] = [index];\n    }else{\n      sorted[numArr.reduce(function(a,b){\n        return parseInt(a) + parseInt(b);\n      })].push(index);\n    }\n  });\n  var sortedKeys = Object.keys(sorted).sort(function(a,b){\n    return a - b;\n  });\n  sortedKeys.forEach(function(key){\n    var indexes = sorted[key];\n    indexes.forEach(function(index){\n      result.push(nums[index]);\n    });\n  });\n  return result;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "return nums.map(function(num){\n        return {num: num, sum: sum_digits(num)};\n    }).sort(function(a, b){\n        if(a.sum !== b.sum){\n            return a.sum - b.sum;\n        }\n        return nums.indexOf(a.num) - nums.indexOf(b.num);\n    }).map(function(item){\n        return item.num;\n    });\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "let num_hash = {};\n  for (let i = 0; i < nums.length; i++){\n    let n = nums[i];\n    let n_array = n.toString().split('');\n    let n_sum = 0;\n    for (let j = 0; j < n_array.length; j++){\n      n_sum += parseInt(n_array[j]);\n    }\n    if (num_hash[n_sum]){\n      num_hash[n_sum].push(n);\n    }\n    else {\n      num_hash[n_sum] = [n];\n    }\n  }\n  let result = [];\n  let keys = Object.keys(num_hash);\n  keys.sort(function(a, b){return a - b});\n  for (let i = 0; i < keys.length; i++){\n    result = result.concat(num_hash[keys[i]]);\n  }\n  return result;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((a, b) => Number(a) + Number(b), 0);\n        let sumB = b.toString().split('').reduce((a, b) => Number(a) + Number(b), 0);\n        return sumA - sumB;\n    });\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "let arr = []\n    nums.forEach(num => arr.push(Math.abs(num).toString().split('').reduce((acc, cur) => +acc + +cur)))\n    let sortedArr = arr.slice().sort((a, b) => a - b)\n    let obj = {}\n    sortedArr.forEach((el, i) => obj[el] = i)\n    return arr.map(el => nums[obj[el]])\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "var sums = []\n    var answer = []\n    if (nums.length < 1){\n        return [];\n    }\n    else{\n        for (var i = 0; i < nums.length; i++){\n            var sum = 0;\n            for (var j = 0; j < nums[i].toString().length; j++){\n                sum += parseInt(nums[i].toString()[j]);\n            }\n            sums.push(sum);\n        }\n        for (var i = 0; i < sums.length; i++){\n            for (var j = 0; j < sums.length; j++){\n                if (sums[i] < sums[j]){\n                    var temp = sums[i];\n                    sums[i] = sums[j];\n                    sums[j] = temp;\n                    var temp2 = nums[i];\n                    nums[i] = nums[j];\n                    nums[j] = temp2;\n                }\n            }\n        }\n        return nums;\n    }\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "return nums.sort((a, b) => {\n        return [...String(a)].reduce((a, c) => a + Number(c), 0) - [...String(b)].reduce((a, c) => a + Number(c), 0) ||\n            nums.indexOf(a) - nums.indexOf(b);\n    });\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "let sums = nums.map(sum_digits);\n    return quick_sort(nums, sums);\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "return nums.map(e => {\n        return {num: e, points: e.toString().split('').reduce((a, b) => Number(a) + Number(b), 0)}\n    }).sort((a, b) => a.points - b.points).map(e => e.num);\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//\"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output should be -126\nfunction sum_squares(lst){\n",
        "snippet": [
            "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n"
        ],
        "simplified": "\" This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.",
        "task_id": "142",
        "3": "var sum = 0;\n    for (var i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += Math.pow(lst[i], 2);\n        }\n        else if (i % 4 == 0 && i % 3 != 0) {\n            sum += Math.pow(lst[i], 3);\n        }\n        else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "var sum=0;\n  for(var i=0;i<lst.length;i++){\n    if(i%3==0 && i%4!=0){\n      sum=sum+lst[i]*lst[i];\n    }\n    else if(i%4==0 && i%3!=0){\n      sum=sum+lst[i]*lst[i]*lst[i];\n    }\n    else{\n      sum=sum+lst[i];\n    }\n  }\n  return sum;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "var sum = 0;\n\tif (lst.length == 0){\n\t\treturn 0;\n\t}\n\tfor (var i = 0; i < lst.length; i++){\n\t\tif (i % 3 == 0 && i % 4 != 0){\n\t\t\tsum += Math.pow(lst[i], 2);\n\t\t}\n\t\telse if (i % 4 == 0 && i % 3 != 0){\n\t\t\tsum += Math.pow(lst[i], 3);\n\t\t}\n\t\telse {\n\t\t\tsum += lst[i];\n\t\t}\n\t}\n\treturn sum;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "let sum = 0;\n\tfor (let i = 0; i < lst.length; i++){\n\t\tif (i % 3 == 0){\n\t\t\tsum += lst[i]**2;\n\t\t} else if (i % 4 == 0 && i % 3 != 0){\n\t\t\tsum += lst[i]**3;\n\t\t} else {\n\t\t\tsum += lst[i];\n\t\t}\n\t}\n\treturn sum;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "for(var i = 0; i < lst.length; i++){\n\t\tif(i % 3 == 0 && i % 4 != 0){\n\t\t\tlst[i] = lst[i] * lst[i];\n\t\t}\n\t\telse if(i % 4 == 0 && i % 3 != 0){\n\t\t\tlst[i] = lst[i] * lst[i] * lst[i];\n\t\t}\n\t}\n\treturn lst.reduce(function(a,b){return a+b;});\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "var sum = 0;\n  for (var i = 0; i < lst.length; i++) {\n    if ((i+1) % 3 == 0 && (i+1) % 4 != 0) {\n      sum += Math.pow(lst[i], 2);\n    } else if ((i+1) % 4 == 0) {\n      sum += Math.pow(lst[i], 3);\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "// Your code here\n\tvar sum = 0;\n\tfor (var i = 0; i < lst.length; i++) {\n\t\tif (i % 3 == 0 && i % 4 != 0) {\n\t\t\tsum += Math.pow(lst[i], 2);\n\t\t}\n\t\telse if (i % 4 == 0 && i % 3 != 0) {\n\t\t\tsum += Math.pow(lst[i], 3);\n\t\t}\n\t\telse {\n\t\t\tsum += lst[i];\n\t\t}\n\t}\n\treturn sum;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "let sum = 0;\n    for (let i = 0; i < lst.length; i++){\n        if (i % 3 == 0){\n            lst[i] = lst[i] * lst[i];\n        }\n        if (i % 4 == 0 && i % 3 != 0){\n            lst[i] = lst[i] * lst[i] * lst[i];\n        }\n        sum += lst[i];\n    }\n    return sum;\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "var sum = 0;\n    for (var i = 0; i < lst.length; i++){\n        if (i % 3 == 0){\n            sum += lst[i] * lst[i];\n        } else if (i % 4 == 0 && i % 3 != 0){\n            sum += lst[i] * lst[i] * lst[i];\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "for(var i = 0; i < lst.length; i++){\n        if(i % 3 == 0){\n            lst[i] = lst[i] * lst[i];\n        }\n        if(i % 4 == 0 && i % 3 != 0){\n            lst[i] = lst[i] * lst[i] * lst[i];\n        }\n    }\n    var sum = 0;\n    for(var j = 0; j < lst.length; j++){\n        sum += lst[j];\n    }\n    return sum;\n}\n\nvar list1 = [1,2,3];\nvar list2 = [];\nvar list3 = [-1,-5,2,-1,-5];",
        "grade-17": {
            "execution": 1
        },
        "12": "if(lst.length == 0){\n    return 0;\n  }\n  var sum = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(i % 3 == 0){\n      sum += lst[i] ** 2;\n    }\n    else if(i % 4 == 0 && i % 3 != 0){\n      sum += lst[i] ** 3;\n    }\n    else{\n      sum += lst[i];\n    }\n  }\n  return sum;\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "var sum = 0;\n    for (var i = 0; i < lst.length; i++){\n        if (i % 3 == 0 && i % 4 != 0){\n            sum += lst[i]*lst[i];\n        }\n        else if (i % 4 == 0 && i % 3 != 0){\n            sum += lst[i]*lst[i]*lst[i];\n        }\n        else{\n            sum += lst[i];\n        }\n    }\n    return sum;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "var sum = 0;\n    if (lst.length == 0){\n        return 0;\n    }\n    for (var i = 0; i < lst.length; i++){\n        if (i % 3 == 0 && i % 4 != 0){\n            sum += Math.pow(lst[i], 2);\n        }\n        else if (i % 4 == 0 && i % 3 != 0){\n            sum += Math.pow(lst[i], 3);\n        }\n        else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "// make a copy of the list\n    let lst_ = lst.slice();\n    for (let i = 0; i < lst_.length; i++){\n        // check if the index is a multiple of 3\n        if ((i+1) % 3 == 0){\n            // square it \n            lst_[i] = lst_[i] * lst_[i];\n        }\n        // check if the index is a multiple of 4\n        if ((i+1) % 4 == 0){\n            // cube it\n            lst_[i] = lst_[i] * lst_[i] * lst_[i];\n        }\n    }\n    // sum up the list\n    let sum = 0;\n    for (let i = 0; i < lst_.length; i++){\n        sum += lst_[i];\n    }\n    return sum;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "var sum = 0;\n    if (lst.length > 0){\n        for (var i = 0; i < lst.length; i++){\n            if (i % 3 == 0 && i % 4 != 0){\n                sum += Math.pow(lst[i], 2);\n            } else if (i % 4 == 0){\n                sum += Math.pow(lst[i], 3);\n            } else {\n                sum += lst[i];\n            }\n        }\n    }\n    return sum;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "var sum = 0;\n\tfor(var i = 0; i < lst.length; i++){\n\t\tif(i % 3 == 0 && i % 4 != 0){\n\t\t\tsum += lst[i] * lst[i];\n\t\t}\n\t\telse if(i % 4 == 0 && i % 3 != 0){\n\t\t\tsum += lst[i] * lst[i] * lst[i];\n\t\t}\n\t\telse{\n\t\t\tsum += lst[i];\n\t\t}\n\t}\n\treturn sum;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "var sum = 0;\n\tfor(var i = 0; i < lst.length; i++){\n\t\tif(i % 3 == 0){\n\t\t\tsum += lst[i]*lst[i];\n\t\t}\n\t\telse if(i % 4 == 0 && i % 3 != 0){\n\t\t\tsum += lst[i]*lst[i]*lst[i];\n\t\t}\n\t\telse{\n\t\t\tsum += lst[i];\n\t\t}\n\t}\n\treturn sum;\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "var sum = 0;\n    for (var i = 0; i < lst.length; i++){\n        if (i % 3 == 0){\n            sum += Math.pow(lst[i], 2);\n        } else if (i % 4 == 0){\n            sum += Math.pow(lst[i], 3);\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "var sum = 0;\n    for (i = 0; i < lst.length; i++) {\n        if (i % 3 == 0 && i % 4 != 0) {\n            sum += lst[i]*lst[i];\n        }\n        else if (i % 4 == 0 && i % 3 != 0) {\n            sum += lst[i]*lst[i]*lst[i];\n        }\n        else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "var sum = 0;\n    var counter = 0;\n    for (i = 0; i < lst.length; i++){\n        if (counter == 3){\n            counter += 1;\n            sum += lst[i]**2;\n        } else if (counter == 4){\n            counter = 1;\n            sum += lst[i]**3;\n        } else {\n            counter += 1;\n            sum += lst[i];\n        }\n    }\n    return sum;\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n",
        "snippet": [
            "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n"
        ],
        "simplified": "Write a function that takes a message, and encodes in such a way that it swaps case of all letters, replaces all vowels in the message with the letter that appears 2 places ahead of that vowel in the english alphabet. Assume only letters.",
        "task_id": "93",
        "3": "//turn message into array, split by letters\n\tvar messageArr = message.split('');\n\t//turn letters into ascii codes\n\tvar asciiArr = [];\n\tfor (var i = 0; i < messageArr.length; i++) {\n\t\tasciiArr.push(messageArr[i].charCodeAt(0));\n\t}\n\t//incrment ascii codes\n\tvar newAsciiArr = [];\n\tfor (var i = 0; i < asciiArr.length; i++) {\n\t\tnewAsciiArr.push(asciiArr[i] + 2);\n\t}\n\t//turn ascii codes into letters\n\tvar newMessageArr = [];\n\tfor (var i = 0; i < newAsciiArr.length; i++) {\n\t\tnewMessageArr.push(String.fromCharCode(newAsciiArr[i]));\n\t}\n\t//join letters into a message\n\tvar newMessage = newMessageArr.join('');\n\treturn newMessage;\n}\nvar a = encode('this is a message');",
        "grade-3": {
            "execution": 0
        },
        "0": "let encMessage = '';\n\tconst vowels = ['a', 'e', 'i', 'o', 'u'];\n\tfor (const letter of message) {\n\t\tif (letter === letter.toUpperCase()) {\n\t\t\tencMessage += letter.toLowerCase();\n\t\t} else {\n\t\t\tencMessage += letter.toUpperCase();\n\t\t}\n\t}\n\tencMessage = encMessage.split('');\n\tfor (let i = 0; i < encMessage.length; i++) {\n\t\tif (vowels.includes(encMessage[i])) {\n\t\t\tencMessage[i] = (encMessage[i] == 'u') ? 'a' : String.fromCharCode(encMessage[i].charCodeAt(0) + 2);\n\t\t}\n\t}\n\treturn encMessage.join('');\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "var alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    var vowel = \"aeiou\";\n    var result = \"\";\n    //index\n    var a = 0;\n    var b = 0;\n    var newIndex = 0;\n    var i = 0;\n    //loop\n    for(i = 0; i < message.length; i++){\n        a = alphabet.indexOf(message[i]);\n        b = vowel.indexOf(message[i]);\n        //checks if lowercase\n        if(a >= 0 && a < alphabet.length){\n            if(message[i] === message[i].toUpperCase()){\n                //adds 2 to index, changes to lowercase\n                newIndex = a + 2;\n                if(newIndex >= alphabet.length){\n                    newIndex = newIndex - alphabet.length;\n                }\n                result += alphabet[newIndex].toUpperCase();\n            }else{\n                //adds 2 to index\n                newIndex = a + 2;\n                if(newIndex >= alphabet.length){\n                    newIndex = newIndex - alphabet.length;\n                }\n                result += alphabet[newIndex];\n            }\n        }\n        //checks if vowel\n        else if(b >= 0 && b < vowel.length){\n            if(message[i] === message[i].toUpperCase()){\n                //adds 2 to index, changes to lowercase\n                newIndex = b + 2;\n                if(newIndex >= vowel.length){\n                    newIndex = newIndex - vowel.length;\n                }\n                result += vowel[newIndex].toUpperCase();\n            }else{\n                //adds 2 to index\n                newIndex = b + 2;\n                if(newIndex >= vowel.length){\n                    newIndex = newIndex - vowel.length;\n                }\n                result += vowel[newIndex];\n            }\n        }\n        //if neither add the original letter\n        else{\n            result += message[i];\n        }\n    }\n    return result;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var encoded = [];\n    for (var i = 0; i < message.length; i++){\n        if (vowels.indexOf(message[i]) != -1){\n            encoded.push(vowels[(vowels.indexOf(message[i]) + 2) % 5]);\n        } else if (message[i] == message[i].toUpperCase()){\n            encoded.push(message[i].toLowerCase());\n        } else {\n            encoded.push(message[i].toUpperCase());\n        }\n    }\n    return encoded.join('');\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "const vowels = ['a', 'e', 'i', 'o', 'u'];\n    var letters = [];\n    for (var i = 0; i < message.length; i++){\n        letters.push(message[i]);\n    }\n    for (var j = 0; j < letters.length; j++){\n        var shift = letters[j].charCodeAt(0);\n        if (shift >= 65 && shift <= 90){\n            var newShift = shift + 32;\n            letters[j] = String.fromCharCode(newShift);\n        }\n        else if (shift >= 97 && shift <= 122){\n            newShift = shift - 32;\n            letters[j] = String.fromCharCode(newShift);\n        }\n        if (vowels.includes(letters[j])){\n            if (letters[j] === 'u'){\n                letters[j] = 'a';\n            }\n            else {\n                var newVowel = letters[j].charCodeAt(0) + 2;\n                letters[j] = String.fromCharCode(newVowel);\n            }\n        }\n    }\n    return letters.join('');\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "var encode = {\n\t\ta: \"c\",\n\t\te: \"g\",\n\t\ti: \"k\",\n\t\to: \"q\",\n\t\tu: \"w\",\n\t};\n\tvar result = [];\n\tfor (var i = 0; i < message.length; i++) {\n\t\tvar letter = message[i];\n\t\tif (letter.toUpperCase() === letter){\n\t\t\tletter = letter.toLowerCase();\n\t\t} else {\n\t\t\tletter = letter.toUpperCase();\n\t\t}\n\t\tif (encode[letter]){\n\t\t\tresult.push(encode[letter]);\n\t\t} else {\n\t\t\tresult.push(letter);\n\t\t}\n\t}\n\treturn result.join(\"\");\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "var vowels = ['a', 'e', 'i', 'o', 'u'];\n  var encodedMessage = '';\n  for (var i = 0; i < message.length; i++) {\n    var char = message[i];\n    if (char === char.toUpperCase()) {\n      char = char.toLowerCase();\n    } else {\n      char = char.toUpperCase();\n    }\n    if (vowels.indexOf(char) > -1) {\n      if (char === 'u') {\n        char = 'a';\n      } else {\n        char = vowels[vowels.indexOf(char) + 1];\n      }\n    }\n    encodedMessage += char;\n  }\n  return encodedMessage;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "var output=\"\";\n\tvar vowels = ['a','e','i','o','u'];\n\tfor(var i=0;i<message.length;i++){\n\t\tvar letter = message[i];\n\t\tvar n = message.charCodeAt(i);\n\t\t//console.log(n);\n\t\tif(n >96 && n<123){\n\t\t\tn = n-32;\n\t\t\t//console.log(n);\n\t\t\toutput += String.fromCharCode(n);\n\t\t}else if(n>64 && n<91){\n\t\t\tn = n+32;\n\t\t\toutput += String.fromCharCode(n);\n\t\t}else{\n\t\t\toutput += message[i];\n\t\t}\n\t}\n\tconsole.log(output);\n\tvar output2=\"\";\n\tfor(var i=0;i<output.length;i++){\n\t\tvar letter = output[i];\n\t\tvar n = output.charCodeAt(i);\n\t\t//console.log(n);\n\t\tif(n>96 && n<123){\n\t\t\tif(n==97){\n\t\t\t\tn=99;\n\t\t\t}else if(n==101){\n\t\t\t\tn=103;\n\t\t\t}else if(n==105){\n\t\t\t\tn=107;\n\t\t\t}else if(n==111){\n\t\t\t\tn=113;\n\t\t\t}else if(n==117){\n\t\t\t\tn=119;\n\t\t\t}else{\n\t\t\t\tn+=2;\n\t\t\t}\n\t\t\toutput2 += String.fromCharCode(n);\n\t\t}else{\n\t\t\toutput2 += output[i];\n\t\t}\n\t}\n\tconsole.log(output2);\n}\nencode('test');\nencode('This is a message');\nencode('Hello World');",
        "grade-1": {
            "execution": 0
        },
        "10": "let alpha = 'abcdefghijklmnopqrstuvwxyz'\n    let result = message.split('').map(function(letter){\n        if(letter.toLowerCase() === letter){\n            return alpha[(alpha.indexOf(letter) + 2) % 26]\n        }\n        else{\n            return alpha[(alpha.indexOf(letter.toLowerCase()) + 2) % 26].toUpperCase()\n        }\n    })\n    return result.join('')\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "// your code here\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "message = message.toLowerCase();\n    var result = \"\";\n    for(var i = 0; i < message.length; i++){\n        if(message[i]==\"a\"){\n            result += \"c\";\n        }else if(message[i]==\"e\"){\n            result += \"g\";\n        }else if(message[i]==\"i\"){\n            result += \"k\";\n        }else if(message[i]==\"o\"){\n            result += \"q\";\n        }else if(message[i]==\"u\"){\n            result += \"y\";\n        }else if(message[i]==\"t\"){\n            result += \"G\";\n        }else if(message[i]==\"h\"){\n            result += \"K\";\n        }else if(message[i]==\"s\"){\n            result += \"C\";\n        }else if(message[i]==\"m\"){\n            result += \"M\";\n        }else if(message[i]==\"a\"){\n            result += \"C\";\n        }else if(message[i]==\"g\"){\n            result += \"S\";\n        }else{\n            result += message[i];\n        }\n    }\n    return result;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "var output = '';\n    for(var i = 0; i < message.length; i++){\n        var letter = message[i];\n        if(letter === letter.toUpperCase()){\n            output += letter.toLowerCase();\n        } else {\n            output += letter.toUpperCase();\n        }\n    }\n    return output;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var encoded = \"\";\n    // if (typeof message != \"string\"){\n    //     throw \"Value given was not a string\";\n    // }\n    for (var i = 0; i < message.length; i++){\n        if (vowels.indexOf(message[i].toLowerCase()) !== -1){\n            if (message[i] === message[i].toUpperCase()){\n                encoded += vowels[vowels.indexOf(message[i].toLowerCase()) + 2].toUpperCase();\n            } else {\n                encoded += vowels[vowels.indexOf(message[i].toLowerCase()) + 2];\n            }\n        } else if (message[i] === message[i].toUpperCase()){\n            encoded += message[i].toLowerCase();\n        } else {\n            encoded += message[i].toUpperCase();\n        }\n    }\n    return encoded;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "vowels = {\n\t\ta: 'c',\n\t\te: 'g',\n\t\ti: 'k',\n\t\to: 'q',\n\t\tu: 'y'\n\t}\n\tvar message = message.toLowerCase();\n\tvar result = '';\n\tfor (var i = 0; i < message.length; i++) {\n\t\tif (vowels[message[i]]){\n\t\t\tresult += vowels[message[i]];\n\t\t} else {\n\t\t\tresult += message[i];\n\t\t}\n\t}\n\tconsole.log(result.toUpperCase());\n}\nencode('This is a message');",
        "grade-15": {
            "execution": 0
        },
        "13": "var results = '';\n  var alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  for (var i = 0; i < message.length; i++) {\n    var char = message[i];\n    if (alphabet.indexOf(char.toLowerCase()) === -1) {\n      results += char;\n    } else if (char === char.toUpperCase()) {\n      results += alphabet[alphabet.indexOf(char.toLowerCase()) + 2].toUpperCase();\n    } else {\n      results += alphabet[alphabet.indexOf(char) + 2];\n    }\n  }\n  return results;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "var vowels = 'aeiouAEIOU';\n    var chars = message.split('');\n    for(var i = 0; i < chars.length; i++){\n        var charCode = chars[i].charCodeAt(0);\n        var index = vowels.indexOf(chars[i]);\n        if(index > -1){\n            if(index > 3){\n                charCode += 2;\n            } else {\n                charCode += 10;\n            }\n        } else {\n            if(charCode > 90){\n                charCode -= 32;\n            } else {\n                charCode += 32;\n            }\n        }\n        chars[i] = String.fromCharCode(charCode);\n    }\n    return chars.join('');\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "var code = \"\";\n    var codeList = {'A':'C', 'E':'G', 'I':'K', 'O':'Q', 'U':'W', 'Y':'A',\n                    'a':'c', 'e':'g', 'i':'k', 'o':'q', 'u':'w', 'y':'a'};\n    for (var i = 0; i < message.length; i++){\n        if (message[i] in codeList){\n            code += codeList[message[i]];\n        } else {\n            code += message[i];\n        }\n    }\n    return code;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "var new_mess = message.split(\" \");\n    var final_mess = [];\n    var alphabet = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"];\n    for(var i = 0; i < new_mess.length; i++){\n      var new_word = new_mess[i].split(\"\");\n      var final_word = [];\n      for(var j = 0; j < new_word.length; j++){\n        if(new_word[j] === new_word[j].toUpperCase()){\n          var low = new_word[j].toLowerCase();\n          var index = alphabet.indexOf(low);\n          if(index === alphabet.length-2){\n            var new_letter = alphabet[0];\n            final_word.push(new_letter.toUpperCase());\n          }else if(index === alphabet.length-1){\n            var new_letter = alphabet[1];\n            final_word.push(new_letter.toUpperCase());\n          }else{\n            var new_letter = alphabet[index+2];\n            final_word.push(new_letter.toUpperCase());\n          }\n        }else{\n          var low = new_word[j].toLowerCase();\n          var index = alphabet.indexOf(low);\n          if(index === alphabet.length-2){\n            var new_letter = alphabet[0];\n            final_word.push(new_letter);\n          }else if(index === alphabet.length-1){\n            var new_letter = alphabet[1];\n            final_word.push(new_letter);\n          }else{\n            var new_letter = alphabet[index+2];\n            final_word.push(new_letter);\n          }\n        }\n      }\n      final_mess.push(final_word.join(\"\"));\n    }\n    return final_mess.join(\" \");\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "var vowels = ['a','e','i','o','u'];\n\tvar encoded_message = \"\";\n\tfor(var i = 0; i < message.length; i++){\n\t\tvar current_letter = message[i];\n\t\tvar index_of_vowel = vowels.indexOf(current_letter.toLowerCase());\n\t\tif(index_of_vowel != -1){\n\t\t\tvar new_index = index_of_vowel + 2;\n\t\t\tif(new_index > 4){\n\t\t\t\tnew_index = new_index - 5;\n\t\t\t}\n\t\t\tif(current_letter == current_letter.toUpperCase()){\n\t\t\t\tencoded_message += vowels[new_index].toUpperCase();\n\t\t\t}\n\t\t\telse{\n\t\t\t\tencoded_message += vowels[new_index];\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tif(current_letter == current_letter.toUpperCase()){\n\t\t\t\tencoded_message += current_letter.toLowerCase();\n\t\t\t}\n\t\t\telse{\n\t\t\t\tencoded_message += current_letter.toUpperCase();\n\t\t\t}\n\t\t}\n\t}\n\treturn encoded_message;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "var alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    var alphabet_array = alphabet.split('');\n    var encoded_message = '';\n    var message_array = message.split('');\n    var vowels = 'aeiou'.split('');\n    var alphabet_position = 0;\n    var message_position = 0;\n    for (var i = 0; i < message_array.length; i++){\n        alphabet_position = alphabet_array.indexOf(message_array[i]);\n        message_position = vowels.indexOf(message_array[i]);\n        if (message_array[i] === message_array[i].toUpperCase()){\n            alphabet_position = alphabet_array.indexOf(message_array[i].toLowerCase());\n            if (message_position === -1){\n                encoded_message += alphabet_array[alphabet_position].toUpperCase();\n            } else {\n                encoded_message += vowels[message_position + 2].toUpperCase();\n            }\n        } else {\n            if (message_position === -1){\n                encoded_message += alphabet_array[alphabet_position];\n            } else {\n                encoded_message += vowels[message_position + 2];\n            }\n        }\n    }\n    return encoded_message;\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n",
        "snippet": [
            "  return Math.pow(n, 2);\n}\n\n"
        ],
        "simplified": "Imagine a road that's a perfectly straight infinitely long line. n cars are driving left to right; simultaneously, a different set of n cars are driving right to left. The two sets of cars start out being very far from each other. All cars move in the same speed. Two cars are said to collide when a car that's moving left to right hits a car that's moving right to left. However, the cars are infinitely sturdy and strong; as a result, they continue moving in their trajectory as if they did not collide. This function outputs the number of such collisions.",
        "task_id": "41",
        "3": "var L = [];\n\tvar R = [];\n\tvar l = 1;\n\tvar r = 1;\n\tvar collisions = 0;\n\tvar max_index = n;\n\tfor(var i = 0; i < n; i++){\n\t\tL.push(l);\n\t\tR.push(r);\n\t\tl++;\n\t\tr++;\n\t}\n\tfor(var i = 0; i < n; i++){\n\t\tif(L[i] == R[max_index]){\n\t\t\tcollisions++;\n\t\t\tmax_index--;\n\t\t}\n\t}\n\treturn collisions;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "return (n*(n-1))/2;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "}",
        "grade-8": {
            "execution": 0
        },
        "7": "//loop through the left to right cars and the right to left cars\n\t//see if the left car is farther than the right car\n\t//count the number of times that happens\n\t//return the count\n\tlet count = 0;\n\tfor(let i = 0; i < n; i++){\n\t\tfor(let j = 0; j < n; j++){\n\t\t\tif(i > j){\n\t\t\t\tcount += 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "return n * (n - 1);\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "//TODO\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "return n*(n-1)/2;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "return Math.floor(Math.pow(n,2)/2);\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "return n * (n - 1) / 2;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "return n*(n-1);\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "var carsLeft = Array.apply(null, {length: n}).map(Number.call, Number)\n    var carsRight = Array.apply(null, {length: n}).map(Number.call, Number)\n    var collisions = 0\n    for(var i = 0; i < n; i++){\n        if(carsLeft[i] < carsRight[i]){\n            collisions++\n        }\n    }\n    return collisions\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "let A = [...Array(n)].map(e => Math.random());\n    let B = [...Array(n)].map(e => Math.random());\n    let collision_count = 0;\n    for(let i = 0; i < n; i++){\n        for(let j = 0; j < n; j++){\n            if(A[i] > B[j]){\n                collision_count++;\n            }\n        }\n    }\n    return collision_count;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "return car_race_collision(n, n-1);\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "return n * (n - 1) / 2;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "var counter = 0;\n    for(var i = 0; i < n; i++){\n        for(var j = 0; j < n; j++){\n            counter++;\n        }\n    }\n    return counter;\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "return 0;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "//YOUR CODE GOES HERE\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "}",
        "grade-14": {
            "execution": 0
        },
        "5": "let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (j !== i){\n        collisions += 1;\n      }\n    }\n  }\n  return collisions;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "//We are going to implement a sorting algorithm in which the\n    //left to right cars are sorted in increasing order.\n    //Then the right to left cars are sorted in decreasing order.\n    //The number of collisions is equal to the sum of the number of\n    //keys which are in the wrong place in the left-to-right array, plus\n    //the number of keys which are in the wrong place in the right-to-left array.\n    var i, collis = 0;\n    var left_to_right = new Array(n);\n    var right_to_left = new Array(n);\n    for (i = 0; i < n; i++) {\n        left_to_right[i] = n - i;\n        right_to_left[i] = i + 1;\n    }\n    //Only a fraction of the cars are in an incorrect location\n    //to the left of their actual location.\n    for (i = 0; i < n / 2; i++) {\n        //I will now swap left_to_right[i] with a random car to the right of left_to_right[i].\n        var i_target = i + 1 + Math.floor(Math.random() * (n - i - 1));\n        //i_target has to be in the range [i+1, n-1].\n        //i_target must be != i.\n        var tmp = left_to_right[i];\n        left_to_right[i] = left_to_right[i_target];\n        left_to_right[i_target] = tmp;\n    }\n    //Now, left_to_right[i] is in the wrong place for exactly i of the cars.\n    for (i = 0; i < n; i++) {\n        //If left_to_right[i] is not in the right place,\n        //then the car that's supposed to be in left_to_right[i]\n        //must be in the wrong place in right_to_left.\n        //Therefore, in the following \"if\" condition, we check if\n        //left_to_right[i] is not in the right place.\n        if (left_to_right[i] !=",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n",
        "snippet": [
            "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n"
        ],
        "simplified": "Checks if given string is a palindrome",
        "task_id": "48",
        "3": "if (text.length <= 1){\n        return true;\n    } else if (text[0] == text[text.length - 1]){\n        return is_palindrome(text.slice(1, text.length - 1));\n    } else {\n        return false;\n    }\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "if (text.length <= 1){\n        return true;\n    }else if (text[0] === text[text.length - 1]){\n        return is_palindrome(text.slice(1, text.length - 1));\n    }else{\n        return false;\n    }\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "return text == text.split('').reverse().join('');\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "if (text.length == 0){\n        return true;\n    } else {\n        if (text[0] == text[text.length - 1]){\n            return is_palindrome(text.slice(1, text.length - 1));\n        } else {\n            return false;\n        }\n    }\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "if (text.length <= 1){\n        return true;\n    } else if (text[0] != text[text.length - 1]){\n        return false;\n    } else {\n        return is_palindrome(text.slice(1, text.length - 1));\n    }\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "if (text == '') {\n\t\treturn true;\n\t}\n\n\tif (text[0] == text[text.length - 1]) {\n\t\treturn is_palindrome(text.slice(1, -1));\n\t}\n\n\treturn false;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "//// YOUR CODE HERE\n    return false;\n}\n\ntest(is_palindrome(''), true);\ntest(is_palindrome('aba'), true);\ntest(is_palindrome('aaaaa'), true);\ntest(is_palindrome('zbcd'), false);",
        "grade-11": {
            "execution": 0
        },
        "1": "return text === reverse(text);\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "var reverseText = reverse(text);\n  return text == reverseText;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "if (text.length < 2) {\n        return true;\n    }\n    else if (text[0] === text[text.length - 1]) {\n        return is_palindrome(text.slice(1, text.length - 1));\n    }\n    else {\n        return false;\n    }\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "if (text.length == 0)\n\t\treturn true;\n\treturn text[0] == text[text.length-1] && is_palindrome(text.slice(1,text.length-1));\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "if(text == ''){\n        return true;\n    }\n    else if(text[0] == text[text.length-1]){\n        return is_palindrome(text.slice(1,text.length-1));\n    }\n    else{\n        return false;\n    }\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "var n = text.length\n  for (var i = 0; i < n/2; i++){\n    if (text[i] != text[n-i-1]){\n      return false\n    }\n  }\n  return true\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "return text.split('').reverse().join('') == text;\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "if (text.length==0){\n\t\treturn true;\n\t}\n\telse if (text.length==1){\n\t\treturn true;\n\t}\n\telse if (text[0]==text[text.length-1]){\n\t\treturn is_palindrome(text.slice(1, text.length-1));\n\t}\n\telse{\n\t\treturn false;\n\t}\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "var len = text.length;\n  for (var i = 0; i < Math.floor(len/2); i++) {\n    if (text[i] !== text[len - 1 - i]) {\n      return false;\n    }\n  }\n  return true;\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "var palindrome = text.split('').reverse().join('');\n    var result = palindrome === text;\n    return result;\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "return text == reverse(text);\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "text = text.toLowerCase();\n    let reverseText = '';\n    for(let i = text.length - 1; i >= 0; i--){\n        reverseText += text[i];\n    }\n    return reverseText === text;\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "return text === text.split('').reverse().join('');\n}",
        "grade-19": {
            "execution": 1
        }
    },
    {
        "intent": "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades){\n",
        "snippet": [
            "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n"
        ],
        "simplified": "It is the last week of the semester and the teacher has to give the grades to students. The teacher has been making her own algorithm for grading. The only problem is, she has lost the code she used for grading. She has given you a list of GPAs for some students and you have to write a function that can output a list of letter grades using the following table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E",
        "task_id": "81",
        "3": "var output = [];\n    for(var i = 0; i < grades.length; i++){\n        if(grades[i] == 4.0){\n            output.push('A+');\n        }\n        else if(grades[i] > 3.7){\n            output.push('A');\n        }\n        else if(grades[i] > 3.3){\n            output.push('A-');\n        }\n        else if(grades[i] > 3.0){\n            output.push('B+');\n        }\n        else if(grades[i] > 2.7){\n            output.push('B');\n        }\n        else if(grades[i] > 2.3){\n            output.push('B-');\n        }\n        else if(grades[i] > 2.0){\n            output.push('C+');\n        }\n        else if(grades[i] > 1.7){\n            output.push('C');\n        }\n        else if(grades[i] > 1.3){\n            output.push('C-');\n        }\n        else if(grades[i] > 1.0){\n            output.push('D+');\n        }\n        else if(grades[i] > 0.7){\n            output.push('D');\n        }\n        else if(grades[i] > 0.0){\n            output.push('D-');\n        }\n        else{\n            output.push('E');\n        }\n    }\n    return output;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "let letter_grades=[]\n    for(let grade of grades){\n      if(grade>4.0){\n        letter_grades.push('A+')\n      }\n      else if(grade>3.7){\n        letter_grades.push('A')\n      }\n      else if(grade>3.3){\n        letter_grades.push('A-')\n      }\n      else if(grade>3.0){\n        letter_grades.push('B+')\n      }\n      else if(grade>2.7){\n        letter_grades.push('B')\n      }\n      else if(grade>2.3){\n        letter_grades.push('B-')\n      }\n      else if(grade>2.0){\n        letter_grades.push('C+')\n      }\n      else if(grade>1.7){\n        letter_grades.push('C')\n      }\n      else if(grade>1.3){\n        letter_grades.push('C-')\n      }\n      else if(grade>1.0){\n        letter_grades.push('D+')\n      }\n      else if(grade>0.7){\n        letter_grades.push('D')\n      }\n      else if(grade>0.0){\n        letter_grades.push('D-')\n      }\n      else{\n        letter_grades.push('E')\n      }\n    }\n    return letter_grades\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "const grade_table = {\n    'A+': 4.0,\n    'A': 3.7,\n    'A-': 3.3,\n    'B+': 3.0,\n    'B': 2.7,\n    'B-': 2.3,\n    'C+': 2.0,\n    'C': 1.7,\n    'C-': 1.3,\n    'D+': 1.0,\n    'D': 0.7,\n    'D-': 0.0,\n    'E': 0.0\n  }\n  return grades.map(grade => {\n    return Object.keys(grade_table).find(key => grade_table[key] <= grade)\n  })\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "let letter_grades = grades.map(function(grade){\n        if(grade == 4.0){\n            return 'A+';\n        }\n        else if(grade > 3.7){\n            return 'A';\n        }\n        else if(grade > 3.3){\n            return 'A-';\n        }\n        else if(grade > 3.0){\n            return 'B+';\n        }\n        else if(grade > 2.7){\n            return 'B';\n        }\n        else if(grade > 2.3){\n            return 'B-';\n        }\n        else if(grade > 2.0){\n            return 'C+';\n        }\n        else if(grade > 1.7){\n            return 'C';\n        }\n        else if(grade > 1.3){\n            return 'C-';\n        }\n        else if(grade > 1.0){\n            return 'D+';\n        }\n        else if(grade > 0.7){\n            return 'D';\n        }\n        else if(grade > 0.0){\n            return 'D-';\n        }\n        else{\n            return 'E';\n        }\n    });\n    return letter_grades;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "return grades.map(grade => {\n    if (grade >= 4.0) return 'A+';\n    if (grade >= 3.7) return 'A';\n    if (grade >= 3.3) return 'A-';\n    if (grade >= 3.0) return 'B+';\n    if (grade >= 2.7) return 'B';\n    if (grade >= 2.3) return 'B-';\n    if (grade >= 2.0) return 'C+';\n    if (grade >= 1.7) return 'C';\n    if (grade >= 1.3) return 'C-';\n    if (grade >= 1.0) return 'D+';\n    if (grade >= 0.7) return 'D';\n    if (grade >= 0.0) return 'D-';\n    return 'E';\n  });\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "var letter_grades = [];\n    for(var i = 0; i < grades.length; i++){\n        if(grades[i] >= 4.0){\n            letter_grades.push('A+');\n        }\n        else if(grades[i] >= 3.7){\n            letter_grades.push('A');\n        }\n        else if(grades[i] >= 3.3){\n            letter_grades.push('A-');\n        }\n        else if(grades[i] >= 3.0){\n            letter_grades.push('B+');\n        }\n        else if(grades[i] >= 2.7){\n            letter_grades.push('B');\n        }\n        else if(grades[i] >= 2.3){\n            letter_grades.push('B-');\n        }\n        else if(grades[i] >= 2.0){\n            letter_grades.push('C+');\n        }\n        else if(grades[i] >= 1.7){\n            letter_grades.push('C');\n        }\n        else if(grades[i] >= 1.3){\n            letter_grades.push('C-');\n        }\n        else if(grades[i] >= 1.0){\n            letter_grades.push('D+');\n        }\n        else if(grades[i] >= 0.7){\n            letter_grades.push('D');\n        }\n        else if(grades[i] >= 0.0){\n            letter_grades.push('D-');\n        }\n        else if(grades[i] == 0.0){\n            letter_grades.push('E');\n        }\n    }\n    return letter_grades;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "let result = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i] == 4.0){\n            result.push('A+');\n        }\n        else if(grades[i] > 3.7){\n            result.push('A');\n        }\n        else if(grades[i] > 3.3){\n            result.push('A-');\n        }\n        else if(grades[i] > 3.0){\n            result.push('B+');\n        }\n        else if(grades[i] > 2.7){\n            result.push('B');\n        }\n        else if(grades[i] > 2.3){\n            result.push('B-');\n        }\n        else if(grades[i] > 2.0){\n            result.push('C+');\n        }\n        else if(grades[i] > 1.7){\n            result.push('C');\n        }\n        else if(grades[i] > 1.3){\n            result.push('C-');\n        }\n        else if(grades[i] > 1.0){\n            result.push('D+');\n        }\n        else if(grades[i] > 0.7){\n            result.push('D');\n        }\n        else if(grades[i] > 0.0){\n            result.push('D-');\n        }\n        else{\n            result.push('E');\n        }\n    }\n    return result;\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "const gradeMap = {\n        '4.0': 'A+',\n        '3.7': 'A',\n        '3.3': 'A-',\n        '3.0': 'B+',\n        '2.7': 'B',\n        '2.3': 'B-',\n        '2.0': 'C+',\n        '1.7': 'C',\n        '1.3': 'C-',\n        '1.0': 'D+',\n        '0.7': 'D',\n        '0.0': 'D-',\n        '-1.0': 'E'\n    }\n    return grades.map(num => gradeMap[Object.keys(gradeMap).reduce((acc, numKey) => parseFloat(numKey) < num ? numKey : acc, '-1.0')])\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "var grades = [].slice.call(arguments);\n    var letters = [];\n    grades.forEach(function(grade){\n        switch(true){\n            case (grade >= 4.0):\n                letters.push('A+');\n                break;\n            case (grade > 3.7):\n                letters.push('A');\n                break;\n            case (grade > 3.3):\n                letters.push('A-');\n                break;\n            case (grade > 3.0):\n                letters.push('B+');\n                break;\n            case (grade > 2.7):\n                letters.push('B');\n                break;\n            case (grade > 2.3):\n                letters.push('B-');\n                break;\n            case (grade > 2.0):\n                letters.push('C+');\n                break;\n            case (grade > 1.7):\n                letters.push('C');\n                break;\n            case (grade > 1.3):\n                letters.push('C-');\n                break;\n            case (grade > 1.0):\n                letters.push('D+');\n                break;\n            case (grade > 0.7):\n                letters.push('D');\n                break;\n            case (grade > 0.0):\n                letters.push('D-');\n                break;\n            case (grade == 0.0):\n                letters.push('E');\n                break;\n        }\n    });\n    return letters;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "return grades.map(grade => {\n        if (grade > 4.0) return 'Invalid';\n        if (grade > 3.7) return 'A+';\n        if (grade > 3.3) return 'A';\n        if (grade > 3.0) return 'A-';\n        if (grade > 2.7) return 'B+';\n        if (grade > 2.3) return 'B';\n        if (grade > 2.0) return 'B-';\n        if (grade > 1.7) return 'C+';\n        if (grade > 1.3) return 'C';\n        if (grade > 1.0) return 'C-';\n        if (grade > 0.7) return 'D+';\n        if (grade > 0.0) return 'D';\n        if (grade > -1.0) return 'D-';\n        return 'E';\n    });\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "let grades_obj = {\n\t\t'4.0': 'A+',\n\t\t'3.7': 'A',\n\t\t'3.3': 'A-',\n\t\t'3.0': 'B+',\n\t\t'2.7': 'B',\n\t\t'2.3': 'B-',\n\t\t'2.0': 'C+',\n\t\t'1.7': 'C',\n\t\t'1.3': 'C-',\n\t\t'1.0': 'D+',\n\t\t'0.7': 'D',\n\t\t'0.0': 'D-',\n\t\t'0.0': 'E'\n\t}\n\tlet solution = [];\n\tfor(let i=0; i<grades.length; i++){\n\t\tlet current_grade = String(grades[i]);\n\t\tif(current_grade.includes('.')){\n\t\t\tif(current_grade[2] === '7'){\n\t\t\t\tif(current_grade[3] > '4'){\n\t\t\t\t\tcurrent_grade = current_grade.slice(0,2) + '7';\n\t\t\t\t} else {\n\t\t\t\t\tcurrent_grade = current_grade.slice(0,2) + '3';\n\t\t\t\t}\n\t\t\t} else if(current_grade[2] === '3'){\n\t\t\t\tif(current_grade[3] > '4'){\n\t\t\t\t\tcurrent_grade = current_grade.slice(0,2) + '3';\n\t\t\t\t} else {\n\t\t\t\t\tcurrent_grade = current_grade.slice(0,2) + '0';\n\t\t\t\t}\n\t\t\t} else if(current_grade[2] === '0'){\n\t\t\t\tif(current_grade[3] > '4'){\n\t\t\t\t\tcurrent_grade = current_grade.slice(0,2) + '0';\n\t\t\t\t} else {\n\t\t\t\t\tcurrent_grade = current_grade.slice(0,2) + '7';\n\t\t\t\t}",
        "grade-12": {
            "execution": 0
        },
        "6": "let letter_grades = [];\n    let a = null;\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i] == 4.0){\n            a = 'A+';\n        }\n        else if(grades[i] > 3.7){\n            a = 'A';\n        }\n        else if(grades[i] > 3.3){\n            a = 'A-';\n        }\n        else if(grades[i] > 3.0){\n            a = 'B+';\n        }\n        else if(grades[i] > 2.7){\n            a = 'B';\n        }\n        else if(grades[i] > 2.3){\n            a = 'B-';\n        }\n        else if(grades[i] > 2.0){\n            a = 'C+';\n        }\n        else if(grades[i] > 1.7){\n            a = 'C';\n        }\n        else if(grades[i] > 1.3){\n            a = 'C-';\n        }\n        else if(grades[i] > 1.0){\n            a = 'D+';\n        }\n        else if(grades[i] > 0.7){\n            a = 'D';\n        }\n        else if(grades[i] > 0.0){\n            a = 'D-';\n        }\n        else if(grades[i] == 0.0){\n            a = 'E';\n        }\n        letter_grades.push(a);\n    }\n    return letter_grades;\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "var grades = grades.map(function(val){\n    if(val < 0.7)\n      return \"E\";\n    else if(val < 1.0)\n      return \"D-\";\n    else if(val < 1.3)\n      return \"D\";\n    else if(val < 1.7)\n      return \"D+\";\n    else if(val < 2.0)\n      return \"C-\";\n    else if(val < 2.3)\n      return \"C\";\n    else if(val < 2.7)\n      return \"C+\";\n    else if(val < 3.0)\n      return \"B-\";\n    else if(val < 3.3)\n      return \"B\";\n    else if(val < 3.7)\n      return \"B+\";\n    else if(val < 4.0)\n      return \"A-\";\n    else\n      return \"A+\";\n  });\n  return grades;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "var result = [];\n  for(i = 0; i < grades.length; i++){\n    if(grades[i] >= 4.0){\n      result.push('A+');\n    }\n    else if(grades[i] >= 3.7){\n      result.push('A');\n    }\n    else if(grades[i] >= 3.3){\n      result.push('A-');\n    }\n    else if(grades[i] >= 3.0){\n      result.push('B+');\n    }\n    else if(grades[i] >= 2.7){\n      result.push('B');\n    }\n    else if(grades[i] >= 2.3){\n      result.push('B-');\n    }\n    else if(grades[i] >= 2.0){\n      result.push('C+');\n    }\n    else if(grades[i] >= 1.7){\n      result.push('C');\n    }\n    else if(grades[i] >= 1.3){\n      result.push('C-');\n    }\n    else if(grades[i] >= 1.0){\n      result.push('D+');\n    }\n    else if(grades[i] >= 0.7){\n      result.push('D');\n    }\n    else if(grades[i] >= 0.0){\n      result.push('D-');\n    }\n    else if(grades[i] < 0.0){\n      result.push('E');\n    }\n  }\n  return result;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "const letter_grade = {\n        \"A+\": 4.0,\n        \"A\": 3.7,\n        \"A-\": 3.3,\n        \"B+\": 3.0,\n        \"B\": 2.7,\n        \"B-\": 2.3,\n        \"C+\": 2.0,\n        \"C\": 1.7,\n        \"C-\": 1.3,\n        \"D+\": 1.0,\n        \"D\": 0.7,\n        \"D-\": 0.0,\n        \"E\": 0.0\n    }\n    let result = []\n    grades.forEach(grade => {\n        for(key in letter_grade){\n            if(grade >= letter_grade[key]){\n                result.push(key)\n                break\n            }\n        }\n    })\n    return result\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "const Grade = {\n        \"4.0\" : 'A+',\n        \"3.7\" : 'A',\n        \"3.3\" : 'A-',\n        \"3.0\" : 'B+',\n        \"2.7\" : 'B',\n        \"2.3\" : 'B-',\n        \"2.0\" : 'C+',\n        \"1.7\" : 'C',\n        \"1.3\" : 'C-',\n        \"1.0\" : 'D+',\n        \"0.7\" : 'D',\n        \"0.0\" : 'D-',\n        \"-0.1\" : 'E'\n    }\n    let grade = []\n    for(let i = 0; i < grades.length; i++){\n        let key = ''\n        for(let j = 4.0; j >= -0.1; j -= 0.3){\n            if(grades[i] >= j){\n                key = j.toString()\n                break\n            }\n        }\n        grade.push(Grade[key])\n    }\n    return grade\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "let letterGrades = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i] === 4.0){\n            letterGrades.push('A+');\n        }\n        else if(grades[i] >= 3.7){\n            letterGrades.push('A');\n        }\n        else if(grades[i] >= 3.3){\n            letterGrades.push('A-');\n        }\n        else if(grades[i] >= 3.0){\n            letterGrades.push('B+');\n        }\n        else if(grades[i] >= 2.7){\n            letterGrades.push('B');\n        }\n        else if(grades[i] >= 2.3){\n            letterGrades.push('B-');\n        }\n        else if(grades[i] >= 2.0){\n            letterGrades.push('C+');\n        }\n        else if(grades[i] >= 1.7){\n            letterGrades.push('C');\n        }\n        else if(grades[i] >= 1.3){\n            letterGrades.push('C-');\n        }\n        else if(grades[i] >= 1.0){\n            letterGrades.push('D+');\n        }\n        else if(grades[i] >= 0.7){\n            letterGrades.push('D');\n        }\n        else if(grades[i] >= 0.0){\n            letterGrades.push('D-');\n        }\n        else{\n            letterGrades.push('E');\n        }\n    }\n    return letterGrades;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "var grades_letter = [];\n\tvar grades_letter_format = function(grade){\n\t\tif(grade >= 4.0){\n\t\t\treturn \"A+\";\n\t\t}\n\t\telse if(grade >= 3.7){\n\t\t\treturn \"A\";\n\t\t}\n\t\telse if(grade >= 3.3){\n\t\t\treturn \"A-\";\n\t\t}\n\t\telse if(grade >= 3.0){\n\t\t\treturn \"B+\";\n\t\t}\n\t\telse if(grade >= 2.7){\n\t\t\treturn \"B\";\n\t\t}\n\t\telse if(grade >= 2.3){\n\t\t\treturn \"B-\";\n\t\t}\n\t\telse if(grade >= 2.0){\n\t\t\treturn \"C+\";\n\t\t}\n\t\telse if(grade >= 1.7){\n\t\t\treturn \"C\";\n\t\t}\n\t\telse if(grade >= 1.3){\n\t\t\treturn \"C-\";\n\t\t}\n\t\telse if(grade >= 1.0){\n\t\t\treturn \"D+\";\n\t\t}\n\t\telse if(grade >= 0.7){\n\t\t\treturn \"D\";\n\t\t}\n\t\telse if(grade >= 0.0){\n\t\t\treturn \"D-\";\n\t\t}\n\t\telse if(grade >= -1.0){\n\t\t\treturn \"E\";\n\t\t}\n\t\telse{\n\t\t\treturn \"error\";\n\t\t}\n\t}\n\tgrades.forEach(function(grade){\n\t\tgrades_letter.push(grades_letter_format(grade));\n\t});\n\treturn grades_letter;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "let scale = {4.0:'A+', 3.7:'A', 3.3:'A-', 3.0:'B+', 2.7:'B', 2.3:'B-', 2.0:'C+', 1.7:'C', 1.3:'C-', 1.0:'D+', 0.7:'D', 0.0:'D-', 'E':0};\n    return grades.map(grade => {\n        if(grade === 0) return 'E';\n        for(let key in scale){\n            if(grade > key) return scale[key];\n        }\n    });\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "let result = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i] >= 4.0){\n            result.push('A+');\n        }else if(grades[i] >= 3.7){\n            result.push('A');\n        }else if(grades[i] >= 3.3){\n            result.push('A-');\n        }else if(grades[i] >= 3.0){\n            result.push('B+');\n        }else if(grades[i] >= 2.7){\n            result.push('B');\n        }else if(grades[i] >= 2.3){\n            result.push('B-');\n        }else if(grades[i] >= 2.0){\n            result.push('C+');\n        }else if(grades[i] >= 1.7){\n            result.push('C');\n        }else if(grades[i] >= 1.3){\n            result.push('C-');\n        }else if(grades[i] >= 1.0){\n            result.push('D+');\n        }else if(grades[i] >= 0.7){\n            result.push('D');\n        }else if(grades[i] >= 0.0){\n            result.push('D-');\n        }else{\n            result.push('E');\n        }\n    }\n    return result;\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0]) == (None, None)\nfunction largest_smallest_integers(lst){\n",
        "snippet": [
            "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n"
        ],
        "simplified": "Create a function that returns a tuple (a, b), where 'a' is the largest of negative integers, and 'b' is the smallest of positive integers in a list. If there is no negative or positive integers, return them as None.",
        "task_id": "136",
        "3": "return \"(\"+lst.reduce((a, b) => b < 0 ? b : a,0)+\",\"+lst.reduce((a, b) => b > 0 ? b : a,0)+\")\";\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "let min = Infinity;\n    let max = -Infinity;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < 0 && lst[i] > max){\n            max = lst[i];\n        } else if(lst[i] > 0 && lst[i] < min){\n            min = lst[i];\n        }\n    }\n    return (max != -Infinity ? max : null, min != Infinity ? min : null);\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "let largest = null;\n    let smallest = null;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < 0){\n            if(largest === null){\n                largest = lst[i];\n            }else if(lst[i] > largest){\n                largest = lst[i];\n            }\n        }else if(lst[i] > 0){\n            if(smallest === null){\n                smallest = lst[i];\n            }else if(lst[i] < smallest){\n                smallest = lst[i];\n            }\n        }\n    }\n    return [largest, smallest];\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "if (lst.length == 0){\n    return [null, null];\n  }\n  var largestNegative = null;\n  var smallestPositive = null;\n  for (var i = 0; i < lst.length; i++){\n    if (lst[i] < 0){\n      if (largestNegative == null){\n        largestNegative = lst[i];\n      }\n      else if (lst[i] > largestNegative){\n        largestNegative = lst[i];\n      }\n    }\n    else if (lst[i] > 0){\n      if (smallestPositive == null){\n        smallestPositive = lst[i];\n      }\n      else if (lst[i] < smallestPositive){\n        smallestPositive = lst[i];\n      }\n    }\n  }\n  return [largestNegative, smallestPositive];\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "let a = null;\n    let b = null;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] > 0 && (b === null || lst[i] < b)){\n            b = lst[i];\n        }\n        if(lst[i] < 0 && (a === null || lst[i] > a)){\n            a = lst[i];\n        }\n    }\n    return [a, b];\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "// Your code goes here\n  let l;\n  let s;\n  let neg = lst.filter(x => x < 0).sort((a,b) => b-a);\n  let pos = lst.filter(x => x > 0).sort((a,b) => a-b);\n  if (neg.length > 0) {\n    l = neg[0];\n  } else {\n    l = null;\n  }\n  if (pos.length > 0) {\n    s = pos[0];\n  } else {\n    s = null;\n  }\n  return [l, s];\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "if (lst.length < 1) {\n    return [null, null];\n  }\n  var lg = null;\n  var sm = null;\n  for (var i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      if (sm === null) {\n        sm = lst[i];\n      } else if (lst[i] < sm) {\n        sm = lst[i];\n      }\n    } else if (lst[i] < 0) {\n      if (lg === null) {\n        lg = lst[i];\n      } else if (lst[i] > lg) {\n        lg = lst[i];\n      }\n    }\n  }\n  return [lg, sm];\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "// your code here\n    let largest_negative = null;\n    let smallest_positive = null;\n    if (lst.length === 0) {\n        return [largest_negative, smallest_positive];\n    }\n    for (let i = 0; i < lst.length; i++) {\n        let a = lst[i];\n        if (a < 0) {\n            if (largest_negative === null) {\n                largest_negative = a;\n            } else if (a > largest_negative) {\n                largest_negative = a;\n            }\n        } else if (a > 0) {\n            if (smallest_positive === null) {\n                smallest_positive = a;\n            } else if (a < smallest_positive) {\n                smallest_positive = a;\n            }\n        }\n    }\n    return [largest_negative, smallest_positive];\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "lst = lst.filter(x => x > 0);\n\tlet b = lst.length > 0 ? Math.min(...lst) : null;\n\tlst = lst.filter(x => x < 0);\n\tlet a = lst.length > 0 ? Math.max(...lst) : null;\n\treturn [a, b];\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "let min;\n    let max;\n    let booleans = [];\n    for(let i=0; i<lst.length; i++){\n        if(lst[i]<0){\n            booleans.push(true);\n        }\n        else if(lst[i]>0){\n            booleans.push(false);\n        }\n    }\n    for(let i=0; i<lst.length; i++){\n        if(i === 0){\n            if(booleans[i] === true){\n                max = lst[i];\n            }\n            else if(booleans[i] === false){\n                min = lst[i];\n            }\n        }\n        else{\n            if(booleans[i] === true){\n                if(lst[i]>max){\n                    max = lst[i];\n                }\n            }\n            else if(booleans[i] === false){\n                if(lst[i]<min){\n                    min = lst[i];\n                }\n            }\n        }\n    }\n    let m = max;\n    let n = min;\n    if(m === undefined){\n        m = null;\n    }\n    if(n === undefined){\n        n = null;\n    }\n    return [m, n];\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "let min = Infinity;\n    let max = -Infinity;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] > 0 && lst[i] < min){\n            min = lst[i];\n        }\n        if(lst[i] < 0 && lst[i] > max){\n            max = lst[i];\n        }\n    }\n    return [max, min];\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "var neg = [];\n    var pos = [];\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] >= 0){\n            pos.push(lst[i]);\n        }\n        else if(lst[i] < 0){\n            neg.push(lst[i]);\n        }\n    }\n    var maxNeg = neg[0];\n    var minPos = pos[0];\n    for(var j = 0; j < neg.length; j++){\n        if(neg[j] > maxNeg){\n            maxNeg = neg[j];\n        }\n    }\n    for(var k = 0; k < pos.length; k++){\n        if(pos[k] < minPos){\n            minPos = pos[k];\n        }\n    }\n    return [maxNeg, minPos];\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "var ans = [null, null];\n  for (var i=0; i<lst.length; i++){\n    if (lst[i] > 0 && (ans[1] == null || lst[i] < ans[1])){\n      ans[1] = lst[i];\n    }\n    if (lst[i] < 0 && (ans[0] == null || lst[i] > ans[0])){\n      ans[0] = lst[i];\n    }\n  }\n  return ans;\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "let num = lst.filter(el => el > 0);\n    let num1 = lst.filter(el => el < 0);\n    return num.length > 0 && num1.length > 0 ? [Math.max(...num1), Math.min(...num)] : [undefined, undefined];\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "let a = lst.filter(x => x<0).sort((a,b) => a-b)[0];\n  let b = lst.filter(x => x>0).sort((a,b) => a-b)[0];\n  return a === undefined ? (null, b) : b === undefined ? (a, null) : (a, b);\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "let maxNeg = -Infinity;\n    let minPos = Infinity;\n    if(lst.length == 0) return [maxNeg, minPos];\n    for(let i=0; i<lst.length; i++){\n        if(lst[i] < 0){\n            if(lst[i] > maxNeg) maxNeg = lst[i];\n        }else if(lst[i] > 0){\n            if(lst[i] < minPos) minPos = lst[i];\n        }\n    }\n    if(maxNeg == -Infinity) maxNeg = null;\n    if(minPos == Infinity) minPos = null;\n    return [maxNeg, minPos];\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "return [lst.reduce((a, c) => a < c && c < 0 ? c : a, lst[0]),\n            lst.reduce((a, c) => a > c && c > 0 ? c : a, lst[0])]\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "let positive = [];\n    let negative = [];\n    for (let i = 0; i < lst.length; i++){\n        if (lst[i] >= 0){\n            positive.push(lst[i]);\n        }\n        else{\n            negative.push(lst[i]);\n        }\n    }\n    let a = negative.length == 0 ? null : Math.max(...negative);\n    let b = positive.length == 0 ? null : Math.min(...positive);\n    return [a, b];\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "var small = null;\n  var large = null;\n  if (lst.length === 0) {\n    return [large, small];\n  }\n  else {\n    small = lst[0];\n    large = lst[0];\n    for (i = 0; i < lst.length; i++) {\n      if (lst[i] > 0 && lst[i] < small) {\n        small = lst[i];\n      }\n      if (lst[i] < 0 && lst[i] > large) {\n        large = lst[i];\n      }\n    }\n    return [large, small];\n  }\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "if(!lst.length) return [null, null];\n    if(lst.length === 1) return [null, null];\n    let largest_negative = Number.MIN_SAFE_INTEGER;\n    let smallest_positive = Number.MAX_SAFE_INTEGER;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < 0){\n            if(lst[i] > largest_negative){\n                largest_negative = lst[i];\n            }\n        }\n        if(lst[i] > 0){\n            if(lst[i] < smallest_positive){\n                smallest_positive = lst[i];\n            }\n        }\n    }\n    if(largest_negative === Number.MIN_SAFE_INTEGER){\n        largest_negative = null;\n    }\n    if(smallest_positive === Number.MAX_SAFE_INTEGER){\n        smallest_positive = null;\n    }\n    return [largest_negative, smallest_positive];\n}",
        "grade-19": {
            "execution": 1
        }
    },
    {
        "intent": "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n",
        "snippet": [
            "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n"
        ],
        "simplified": "Return n-th Fibonacci number.",
        "task_id": "55",
        "3": "if(n==1 || n==2){\n        return 1;\n    }\n    return fib(n-1)+fib(n-2);\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "if(n===0) return 0;\n\tif(n===1) return 1;\n\treturn fib(n-1)+fib(n-2);\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "if(n<=2){\n\t\treturn 1;\n\t}else{\n\t\treturn fib(n-1)+fib(n-2);\n\t}\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "var a = 0, b = 1, f = 1;\n    for(var i = 2; i <= n; i++) {\n        f = a + b;\n        a = b;\n        b = f;\n    }\n    return f;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "var a = 1, b = 0, temp;\n\n  while (n >= 0){\n    temp = a;\n    a = a + b;\n    b = temp;\n    n--;\n  }\n\n  return b;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "// Base case.\n    if (n <= 1) {\n        return n;\n    } else {\n        return fib(n-1) + fib(n-2);\n    }\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "}",
        "grade-11": {
            "execution": 0
        },
        "1": "var f = 1;\n  var f1 = 1;\n  var f2 = 1;\n  for (var i = 3; i <= n; i++) {\n    f = f1 + f2;\n    f1 = f2;\n    f2 = f;\n  }\n  return f;\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "var res = [];\n  if(n == 1){\n    return 1;\n  }else if(n == 2){\n    return 1;\n  }else{\n    for(var i = 1; i < n-1; i++){\n      res.push(fib(i));\n    }\n    return fib(n-1) + fib(n-2);\n  }\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "//fib(n-1) + fib(n-2)\n\tif(n === 1){\n\t\treturn 1;\n\t}else if(n === 2){\n\t\treturn 1;\n\t}else{\n\t\treturn fib(n-1) + fib(n-2);\n\t}\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "if(n==1 || n==2){\n\t\treturn 1;\n\t}\n\treturn fib(n-1)+fib(n-2);\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "if (n === 0){\n    return 0;\n  }\n  else if (n === 1){\n    return 1;\n  }\n  else {\n    return fib(n-1) + fib(n-2);\n  }\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "let a = 1;\n    let b = 1;\n    for (let i = 3; i <= n; i++) {\n        let c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n}\n\nmodule.exports = fib;",
        "grade-18": {
            "execution": 1
        },
        "15": "if(n==1) return 1;\n\tif(n==2) return 1;\n\tif(n==3) return 2;\n\tif(n==4) return 3;\n\tif(n==5) return 5;\n\treturn fib(n-1)+fib(n-2);\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "if(n == 0)\n    {\n        return 0;\n    }\n    else if(n == 1)\n    {\n        return 1;\n    }\n    else\n    {\n        return fib(n-1) + fib(n-2);\n    }\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "// fib(0) = 0, fib(1) = 1, fib(2) = 1, fib(3) = 2, fib(4) = 3, fib(5) = 5, fib(6) = 8\n  if (n === 0) {\n    return 0;\n  } else if (n === 1) {\n    return 1;\n  } else {\n    return fib(n - 1) + fib(n - 2);\n  }\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n        return 1;\n    }\n    return fib(n-1) + fib(n-2);\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "//YOUR CODE HERE\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "if(n <= 2){\n        return 1;\n    }\n    else{\n        return fib(n-1) + fib(n-2);\n    }\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "var a = 1, b = 0, tmp;\n\twhile (n >= 0){\n\t\ttmp = a;\n\t\ta = a + b;\n\t\tb = tmp;\n\t\tn--;\n\t}\n\treturn b;\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n",
        "snippet": [
            "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n"
        ],
        "simplified": "Circular shift the digits of the integer x, shift the digits right by shift and return the result as a string. If shift > number of digits, return digits reversed.",
        "task_id": "65",
        "3": "var _x = x.toString();\n    if (shift > _x.length) {\n        return _x.split(\"\").reverse().join(\"\");\n    }\n    _x = _x.split(\"\");\n    for (var i = 0; i < shift; i++) {\n        _x.push(_x.shift());\n    }\n    return _x.join(\"\");\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "let str = x.toString();\n  let result = '';\n  if(shift > str.length){\n    for(let i = str.length - 1; i >= 0; i--){\n      result += str[i];\n    }\n  }\n  else{\n    for(let i = str.length - shift; i < str.length; i++){\n      result += str[i];\n    }\n    for(let i = 0; i < str.length - shift; i++){\n      result += str[i];\n    }\n  }\n  return result;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "var str = x.toString();\n    var new_str = \"\";\n    var num_digits = str.length;\n    if (shift > num_digits){\n        for (var i = str.length-1; i >= 0; i--){\n            new_str += str[i];\n        }\n    }\n    else{\n        new_str = str.slice(shift, str.length) + str.slice(0, shift);\n    }\n    return new_str;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "var x_string = x.toString();\n  var x_length = x_string.length;\n  var reversed_string = reverse_string(x_string);\n  var reversed_list = string_to_list(reversed_string);\n  var initial_shift = x_length - shift;\n  var circular_shifted_list = reversed_list.slice(initial_shift).concat(reversed_list.slice(0, initial_shift));\n  var circular_shifted_string = list_to_string(circular_shifted_list);\n  var result = reverse_string(circular_shifted_string);\n  return result;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "if (shift <= 0){\n        return to_str(x);\n    } else {\n        var last_digit = modulo(x, 10);\n        var remainder = floor(x / 10);\n        return circular_shift(10 * last_digit + remainder, shift - 1);\n    }\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "var sign = '';\n  if (x < 0){\n    sign = '-';\n    x = -x;\n  }\n  var xString = x.toString();\n  if (shift > xString.length){\n    return xString.split('').reverse().join('');\n  }\n  else {\n    return sign + xString.slice(xString.length - shift) + xString.slice(0, xString.length - shift);\n  }\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "x = x.toString();\n  let new_x = \"\";\n  for(let i = 0; i < shift; i++){\n    let next_digit = x.substring(x.length - 1, x.length);\n    new_x = next_digit + new_x;\n    x = x.substring(0, x.length - 1);\n  }\n  return new_x + x;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "}",
        "grade-1": {
            "execution": 0
        },
        "10": "var str = x.toString();\n    while(shift > str.length){\n        shift -= str.length;\n    }\n    return str.slice(str.length - shift) + str.slice(0, str.length - shift);\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "var str = x.toString();\n  var len = str.length;\n  // Shift can be more than number of digits\n  if(len < shift){\n    str = reverse(str);\n  }\n  else{\n    str = str.substring(len - shift, len) + str.substring(0, len - shift);\n  }\n  return str;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "var x_array = reverse(string_to_array(x));\n  var shift_array = x_array.slice(0, shift);\n  var first_array = x_array.slice(shift);\n  var sum_array = first_array.concat(shift_array);\n  return array_to_string(reverse(sum_array));\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "var digits = [];\n\t\n\t//Push each digit in number to an array\n\twhile(x > 0){\n\t\tdigits.push(x % 10);\n\t\tx = Math.floor(x / 10);\n\t}\n\t\n\tvar number_of_digits = digits.length;\n\t\n\t//If shift > number of digits, reverse the array and return it as a string\n\tif(shift > number_of_digits){\n\t\tdigits.reverse();\n\t\treturn digits.join(\"\");\n\t}\n\t\n\t//Else, shift the digits in the array\n\tfor(var i = 0; i < shift; i++){\n\t\tvar digit = digits.pop();\n\t\tdigits.unshift(digit);\n\t}\n\t\n\treturn digits.join(\"\");\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "return (x.toString().length < shift) ? reverse(x.toString()) : x.toString().slice(shift) + x.toString().slice(0, shift);\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "x = String(x)\n  var len = x.length\n  var len = (x.length - shift) % len\n  return x.slice(len) + x.slice(0, len)\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "// convert integer to string and split it into an array of chars\n\tvar str = '' + x;\n\tvar a = str.split('');\n\t// create new array for our result\n\tvar b = [];\n\t// iterate over the chars from original array and push them to new array\n\tfor (var i = 0; i < a.length; i++) {\n\t\t// if our counter reaches the end of array, wrap around\n\t\tif(i + shift >= a.length){\n\t\t\tb.push(a[i + shift - a.length]);\n\t\t}\n\t\t// otherwise just push character from current position\n\t\telse{\n\t\t\tb.push(a[i + shift]);\n\t\t}\n\t}\n\t// join array into a string, return it\n\treturn b.join('');\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "let x_str = x.toString();\n    let shift_num = shift.toString();\n    if (shift_num > x_str.length){\n        return x_str.split(\"\").reverse().join(\"\");\n    }\n    let post_rotation = x_str.substring(0, x_str.length - shift_num);\n    let pre_rotation = x_str.substring(x_str.length - shift_num, x_str.length);\n    return pre_rotation + post_rotation;\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "var z = x.toString().split(\"\");\n\tvar temp = \"\";\n\tfor(var i = 0; i < shift; i++){\n\t\ttemp = z.pop();\n\t\tz.unshift(temp);\n\t}\n\tz = z.join(\"\");\n\treturn z;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "x = \"\" + x; // Convert x to a string\n    var result = \"\";\n    var digits = \"\";\n    if (shift > x.length){\n        //We need to reverse the digits\n        for (var i = x.length - 1; i >= 0; i--){\n            digits += x[i];\n        }\n        return digits;\n    }\n    else{\n        //Shift the digits to the right.\n        for (var i = x.length - 1; i >= 0; i--){\n            var index = i - shift;\n            if (index < 0){\n                index = x.length + index;\n            }\n            result += x[index];\n        }\n        return result;\n    }\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "var str_x = String(x);\n\tvar str_x_len = str_x.length;\n\tif(shift >= str_x_len){\n\t\treturn str_x.split(\"\").reverse().join(\"\");\n\t}\n\tvar right_part = str_x.substring(str_x_len - shift, str_x_len);\n\tvar left_part = str_x.substring(0, str_x_len - shift);\n\treturn right_part + left_part;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "let res = x.toString();\n    let len = res.length;\n    shift = shift % len;\n    let right = res.slice(len - shift);\n    let left = res.slice(0, len - shift);\n    return right + left;\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n",
        "snippet": [
            "  return Math.max(...l);\n}\n\n"
        ],
        "simplified": "Return maximum element in the list.",
        "task_id": "35",
        "0": "var max = -Infinity;\n\tvar length = l.length;\n\tfor(var i = 0; i < length; i++){\n\t\tif(l[i] > max){\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;\n}",
        "grade-0": {
            "execution": 1
        },
        "1": "return reduce(l, function(acc, e){return Math.max(acc, e)});\n}",
        "grade-1": {
            "execution": 0
        },
        "2": "}",
        "grade-2": {
            "execution": 0
        },
        "3": "return _.max(l);\n}",
        "grade-3": {
            "execution": 0
        },
        "4": "var max = l[0];\n    for(var i = 0; i < l.length; i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}",
        "grade-4": {
            "execution": 1
        },
        "5": "return Math.max.apply(null, l);\n}",
        "grade-5": {
            "execution": 1
        },
        "6": "let max = l[0];\n    for(let e of l){\n        if(e > max){\n            max = e;\n        }\n    }\n    return max;\n}",
        "grade-6": {
            "execution": 1
        },
        "7": "if(is_null(l)){\n        return error(max_element, \"empty list\");\n    }\n    else{\n        return max_element_max(car(l), cdr(l));\n    }\n}",
        "grade-7": {
            "execution": 0
        },
        "8": "let i = l.length;\n    let max = l[0];\n    while(i--){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}",
        "grade-8": {
            "execution": 1
        },
        "9": "if(l.length === 0){\n        return null;\n    }\n    var max = 0;\n    for(var i = 0; i < l.length; i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}",
        "grade-9": {
            "execution": 1
        },
        "10": "if(length(l) == 0){\n        return \"Cannot calculate max element of empty list.\";\n    } else {\n        var max = l[0];\n        for(var i = 1; i < length(l); i++){\n            if(l[i] > max){\n                max = l[i];\n            }\n        }\n        return max;\n    }\n}",
        "grade-10": {
            "execution": 0
        },
        "11": "var max = 0;\n    for(var i = 0; i < l.length; i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}",
        "grade-11": {
            "execution": 1
        },
        "12": "// If list empty, return undefined\n   if (l.length == 0) {\n    return undefined;\n   }\n\n   let max = l[0];\n   for (let i = 1; i < l.length; i++) {\n     max = Math.max(max, l[i]);\n   }\n   return max;\n}",
        "grade-12": {
            "execution": 1
        },
        "13": "if(l.length == 0){\n    return 0;\n  }\n  var h = l[0];\n  for(var i = 1; i < l.length; i++){\n    if(l[i] > h){\n      h = l[i];\n    }\n  }\n  return h;\n}",
        "grade-13": {
            "execution": 1
        },
        "14": "return l.reduce(function(a, b) {\n    return Math.max(a, b);\n  });\n}",
        "grade-14": {
            "execution": 1
        },
        "15": "if(l.length == 0){\n\t\treturn null;\n\t}else{\n\t\tif(l.length == 1){\n\t\t\treturn l[0];\n\t\t}else{\n\t\t\tif(l[0] > l[1]){\n\t\t\t\tl.splice(1, 1);\n\t\t\t\treturn max_element(l);\n\t\t\t}else{\n\t\t\t\tl.splice(0, 1);\n\t\t\t\treturn max_element(l);\n\t\t\t}\n\t\t}\n\t}\n}",
        "grade-15": {
            "execution": 1
        },
        "16": "return Math.max.apply(null, l);\n}",
        "grade-16": {
            "execution": 1
        },
        "17": "return Math.max.apply(null, l);\n}",
        "grade-17": {
            "execution": 1
        },
        "18": "var m = l[0];\n  for(var i = 1; i < l.length; i++){\n    if(l[i] > m){\n      m = l[i];\n    }\n  }\n  return m;\n}",
        "grade-18": {
            "execution": 1
        }
    },
    {
        "intent": "//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunction solution(lst){\n",
        "snippet": [
            "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n"
        ],
        "simplified": "Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.",
        "task_id": "121",
        "3": "//..\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "let result = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] % 2 !== 0 && i % 2 === 0){\n      result += lst[i];\n    }\n  }\n  return result;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "return lst.filter((_, i) => i % 2).reduce((a, b) => a + b, 0);\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "if(!lst) return 0;\n    return lst.filter((x,i)=> i%2 === 0 && x%2!==0).reduce((a,b)=>a+b,0);\n  }",
        "grade-7": {
            "execution": 1
        },
        "16": "let sum = 0;\n  for(let i = 1; i < lst.length; i += 2){\n    if(lst[i] % 2 == 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "let lst1 = lst.filter((v,i)=> i%2 === 0);\n  let lst2 = lst1.filter(x => x%2 === 1);\n  return lst2.reduce((a,b)=> a+b,0);\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "let evenLst = lst.filter((num, i) => i % 2 === 0);\n  let oddLst = evenLst.filter(num => num % 2 !== 0);\n  let oddSum = oddLst.reduce((a, b) => a + b, 0);\n  return oddSum;\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "return lst.filter((element, index) => index % 2 == 0 && element % 2 == 1).reduce((acc, element) => acc + element, 0);\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "//..\n  let res = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0 && lst[i] % 2 !== 0) {\n      res += lst[i];\n    }\n  }\n  return res;\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "//TODO: code me\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "let oddElements = lst.filter((element, index) => (element % 2) !== 0 && (index % 2) == 0);\n    let total = oddElements.reduce((a, b) => a + b, 0);\n    return total;\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "//return lst.filter((x, i) => i % 2 === 0).filter(x => x % 2 === 1).reduce((a, b) => a + b, 0);\n    return lst.filter((x, i) => x % 2 === 1 && i % 2 === 0).reduce((a, b) => a + b, 0);\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2 === 0 && lst[i] % 2 === 1){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "var res = 0;\n  for(var i = 1; i < lst.length; i += 2){\n    if(lst[i] % 2 == 0){\n      res += lst[i];\n    }\n  }\n  return res;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "//coding and coding..\n    return lst.filter((v,i)=>i%2===0).filter(v=>v%2!==0).reduce((a,v)=>a+v,0)\n  }",
        "grade-13": {
            "execution": 1
        },
        "9": "let result = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2 !== 0){\n            if(lst[i] % 2 !== 0){\n                result += lst[i];\n            }\n        }\n    }\n    return result;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "// Write your code here\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 === 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "return lst.filter((e,i)=>i%2===1&&e%2===1).reduce((a,b)=>a+b,0)\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "let result = 0;\n  let evenPosition = [lst[1], lst[3]];\n  for (let i = 0; i < evenPosition.length; i++) {\n    if (evenPosition[i] % 2 != 0) {\n      result += evenPosition[i];\n    }\n  }\n  return result;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "// a place to store the results\n    let sum = 0;\n    // iterate of over the list\n    for(let i = 0; i < lst.length; i++){\n      // check if the current index is odd\n      if(i % 2 === 1){\n        // check if the current number is odd\n        if(lst[i] % 2 === 1){\n          // add it to the results\n          sum += lst[i];\n        }\n      }\n    }\n    // return the results\n    return sum;\n  }\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  /////////////////////////////////////////\n  /////////////////////////////////////////\n  /////////////////////////////////////////\n  /////////////////////////////////////////\n  /////////////////////////////////////////\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  //I like to comment these out when I am done with them\n  \n  // //Return the sum of all of the even elements in a list of numbers.\n  // // Examples\n  // // solution([1, 2, 3, 4, 5]) ==> 6\n  // // solution([22, 21, 15, 11, 9]) ==> 42\n  // // solution([6, 4, 7, 10, 20]) ==> 30\n  // function solution(lst){\n  //   // a place to store the results\n  //   let sum = 0;\n  //   // iterate of over the list\n  //   for(let i = 0; i < lst.length; i++){\n  //     // check if the current number is even\n  //     if(lst[i] % 2 === 0){\n  //       // add it to the results\n  //       sum += lst[i];\n  //     }\n  //   }\n  //   // return the results\n  //   return sum;\n  // }",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return a tuple containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty tuple if planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf(planet1, planet2){\n",
        "snippet": [
            "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n"
        ],
        "simplified": "There are eight planets in our solar system: the closerst to the Sun is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Write a function that takes two planet names as strings planet1 and planet2. The function should return a tuple containing all planets whose orbits are located between the orbit of planet1 and the orbit of planet2, sorted by the proximity to the sun. The function should return an empty tuple if planet1 or planet2 are not correct planet names.",
        "task_id": "148",
        "3": "var planetList = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var planet1Index = planetList.indexOf(planet1);\n    var planet2Index = planetList.indexOf(planet2);\n    var planetsBetween = [];\n    if(planet1Index === -1 || planet2Index === -1){\n        return planetsBetween;\n    }\n    if(planet1Index < planet2Index){\n        planetsBetween = planetList.slice(planet1Index + 1, planet2Index);\n    } else {\n        planetsBetween = planetList.slice(planet2Index + 1, planet1Index);\n    }\n    return planetsBetween;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "let planets = [ \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let first = 0;\n    let second = 0;\n    let ordered = [];\n    let res = [];\n    for(let i = 0; i < planets.length; i++){\n        if(planets[i] === planet1){\n            first = i;\n        }\n        if(planets[i] === planet2){\n            second = i;\n        }\n    }\n    if(second < first){\n        let temp = first;\n        first = second;\n        second = temp;\n    }\n    for(let i = first + 1; i < second; i++){\n        ordered.push(planets[i]);\n    }\n    if(first === 0 && second === 0){\n        return res;\n    }\n    return ordered;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "let orbit = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let res = [];\n    let index1 = orbit.indexOf(planet1);\n    let index2 = orbit.indexOf(planet2);\n    let temp = index1;\n    index1 = Math.min(index1, index2);\n    index2 = Math.max(temp, index2);\n    if(index1 > -1 && index2 > -1){\n        for(let i = index1 + 1; i < index2; i++){\n            res.push(orbit[i]);\n        }\n    }\n    return res;\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "let planets = {\n    \"Mercury\": 0,\n    \"Venus\": 1,\n    \"Earth\": 2,\n    \"Mars\": 3,\n    \"Jupiter\": 4,\n    \"Saturn\": 5,\n    \"Uranus\": 6,\n    \"Neptune\": 7\n  }\n  if (planets[planet1] > planets[planet2]){\n    let temp = planet1;\n    planet1 = planet2;\n    planet2 = temp;\n  }\n  let result = [];\n  for (let i = planets[planet1] + 1; i < planets[planet2]; i++){\n    result.push(Object.keys(planets).find(key => planets[key] === i));\n  }\n  return result;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  let start = planets.indexOf(planet1);\n  let end = planets.indexOf(planet2);\n  if (start === -1 || end === -1) {\n    return [];\n  }\n  else if (start > end) {\n    return planets.slice(end + 1, start).reverse();\n  }\n  else {\n    return planets.slice(start + 1, end);\n  }\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "let s =[\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let f = s.indexOf(planet1);\n    let l = s.indexOf(planet2);\n    let ans = [];\n    if(f>=0 && l>=0){\n        if(f<l){\n            for(let i=f+1;i<l;i++){\n                ans.push(s[i]);\n            }\n        }\n        else{\n            for(let i=l+1;i<f;i++){\n                ans.push(s[i]);\n            }\n        }\n    }\n    return ans;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "var planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var index1 = planets.indexOf(planet1);\n    var index2 = planets.indexOf(planet2);\n    var array = [];\n    if(index1 > index2){\n        array = planets.slice(index2, index1 + 1);\n    } else if(index1 < index2){\n        array = planets.slice(index1, index2 + 1);\n    } else if(index1 == -1 || index2 == -1){\n        array = [];\n    } else {\n        array = [planet1];\n    }\n    return array;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    const first = planets.indexOf(planet1);\n    const second = planets.indexOf(planet2);\n    if (first < 0 || second < 0) return [];\n    if (first <= second) {\n        return planets.slice(first + 1, second);\n    } else {\n        return planets.slice(second + 1, first);\n    }\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "let orbits = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    let index1 = orbits.indexOf(planet1);\n    let index2 = orbits.indexOf(planet2);\n    let new_array = [];\n    if(index1 > -1 && index2 > -1){\n        if(index1 < index2){\n            for(let i = index1 + 1; i < index2; i++){\n                new_array.push(orbits[i]);\n            }\n        }\n        else{\n            for(let i = index2 + 1; i < index1; i++){\n                new_array.push(orbits[i]);\n            }\n        }\n    }\n    return new_array;\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n    let result = [];\n    if(planet1Index === -1 || planet2Index === -1) {\n        return result;\n    }\n    if(planet1Index < planet2Index) {\n        for(let i = planet1Index + 1; i < planet2Index; i++) {\n            result.push(planets[i]);\n        }\n    }\n    else {\n        for(let i = planet2Index + 1; i < planet1Index; i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "var planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n  var p1 = planets.indexOf(planet1);\n  var p2 = planets.indexOf(planet2);\n  if(p1 == -1 || p2 == -1){\n    return [];\n  }\n  if(p1 > p2){\n    var tmp = p1;\n    p1 = p2;\n    p2 = tmp;\n  }\n  return planets.slice(p1+1, p2);\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "let planetsArray = [\n  \"Mercury\",\n  \"Venus\",\n  \"Earth\",\n  \"Mars\",\n  \"Jupiter\",\n  \"Saturn\",\n  \"Uranus\",\n  \"Neptune\"\n  ];\n  if (planetsArray.indexOf(planet1) === -1 || planetsArray.indexOf(planet2) === -1){\n    return [];\n  }\n  if (planetsArray.indexOf(planet1) > planetsArray.indexOf(planet2)){\n    let b = planetsArray.indexOf(planet1);\n    let a = planetsArray.indexOf(planet2);\n    return planetsArray.slice(a+1, b);\n  }\n  if (planetsArray.indexOf(planet1) < planetsArray.indexOf(planet2)){\n    let a = planetsArray.indexOf(planet1);\n    let b = planetsArray.indexOf(planet2);\n    return planetsArray.slice(a+1, b);\n  }\n  if (planetsArray.indexOf(planet1) === planetsArray.indexOf(planet2)){\n    return [];\n  }\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "const data = {\n        \"Mercury\": 1,\n        \"Venus\": 2,\n        \"Earth\": 3,\n        \"Mars\": 4,\n        \"Jupiter\": 5,\n        \"Saturn\": 6,\n        \"Uranus\": 7,\n        \"Neptune\": 8\n    }\n    if(!data[planet1] || !data[planet2]) return [];\n    let result = [];\n    for(let i = Math.min(data[planet1], data[planet2]); i <= Math.max(data[planet1], data[planet2]); i++){\n        if(data[planet1] > data[planet2]) result.unshift(Object.keys(data).find(el => data[el] === i));\n        else result.push(Object.keys(data).find(el => data[el] === i));\n    }\n    return result;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "let planet=[\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let k=-1;\n    for(let i=0;i<planet.length;i++){\n        if(planet[i]==planet1){\n            k=i;\n        }\n    }\n    let l=-1;\n    for(let i=0;i<planet.length;i++){\n        if(planet[i]==planet2){\n            l=i;\n        }\n    }\n    let arr=[];\n    if(k>l){\n        let temp=k;\n        k=l;\n        l=temp;\n    }\n    if(k==-1||l==-1){\n        return arr;\n    }\n    for(let i=k+1;i<l;i++){\n        arr.push(planet[i]);\n    }\n    return arr;\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "var solarsystem = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    if (!solarsystem.includes(planet1) || !solarsystem.includes(planet2)) {\n        return [];\n    } else {\n        var planet1index = solarsystem.indexOf(planet1);\n        var planet2index = solarsystem.indexOf(planet2);\n        var planetinbetween = [];\n        if (planet1index < planet2index) {\n            for (var i = planet1index; i < planet2index; i++) {\n                planetinbetween.push(solarsystem[i + 1]);\n            }\n        } else {\n            for (var i = planet2index; i < planet1index; i++) {\n                planetinbetween.push(solarsystem[i + 1]);\n            }\n        }\n        return planetinbetween;\n    }\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\tlet result = [];\n\tlet p1 = planets.indexOf(planet1);\n\tlet p2 = planets.indexOf(planet2);\n\tif(p1 < 0 || p2 < 0){\n\t\treturn result;\n\t}\n\tif(p1 > p2){\n\t\tfor(let i = p2 + 1; i < p1; i++){\n\t\t\tresult.push(planets[i]);\n\t\t}\n\t} else {\n\t\tfor(let i = p1 + 1; i < p2; i++){\n\t\t\tresult.push(planets[i]);\n\t\t}\n\t}\n\treturn result;\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "var list = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var index1 = list.indexOf(planet1);\n    var index2 = list.indexOf(planet2);\n    if (index1 != -1 && index2 != -1) {\n        if (index1 < index2) {\n            return list.slice(index1+1, index2);\n        } else {\n            return list.slice(index2+1, index1);\n        }\n    } else {\n        return [];\n    }\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "const planets = {\n    Mercury: 0,\n    Venus: 1,\n    Earth: 2,\n    Mars: 3,\n    Jupiter: 4,\n    Saturn: 5,\n    Uranus: 6,\n    Neptune: 7\n  }\n  if (!planets[planet1] || !planets[planet2]){\n    return [];\n  }\n  const i = planets[planet1];\n  const j = planets[planet2];\n  let res = [];\n  if (i < j){\n    for (let k = i+1; k < j; k++){\n      for (let p in planets){\n        if (planets[p] === k){\n          res.push(p);\n        }\n      }\n    }\n  } else {\n    for (let k = j+1; k < i; k++){\n      for (let p in planets){\n        if (planets[p] === k){\n          res.push(p);\n        }\n      }\n    }\n  }\n  return res;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "let d = {\"Mercury\":1, \"Venus\":2, \"Earth\":3, \"Mars\":4, \"Jupiter\":5, \"Saturn\":6, \"Uranus\":7, \"Neptune\":8};\n  if (d[planet1] == undefined || d[planet2] == undefined) return [];\n  if (d[planet1] > d[planet2]) {\n    [planet1, planet2] = [planet2, planet1];\n  }\n  return Object.keys(d).filter(function(el){\n    return d[el] > d[planet1] && d[el] < d[planet2];\n  });\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    const planet1Index = planets.indexOf(planet1);\n    const planet2Index = planets.indexOf(planet2);\n    if(planet1Index === -1 || planet2Index === -1){\n        return [];\n    }\n    if(planet1Index < planet2Index){\n        return planets.slice(planet1Index + 1, planet2Index)\n    }\n    else{\n        return planets.slice(planet2Index + 1, planet1Index)\n    }\n}",
        "grade-19": {
            "execution": 1
        }
    },
    {
        "intent": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n",
        "snippet": [
            "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n"
        ],
        "simplified": "Input to this function is a string represented multiple groups for nested parentheses separated by spaces. For each of the group, output the deepest level of nesting of parentheses. E.g. (()()) has maximum two levels of nesting while ((())) has three.",
        "task_id": "6",
        "3": "var ret = [];\n    var max_level = 0;\n    var level = 0;\n    var stack = [];\n    var inside_str = false;\n    for(var i = 0; i < paren_string.length; i++){\n        if(paren_string[i] == '('){\n            level++;\n            stack.push(paren_string[i]);\n        }\n        else if(paren_string[i] == ')'){\n            if(level == 0){\n                inside_str = false;\n                ret.push(max_level);\n                max_level = 0;\n                level = 0;\n                stack = [];\n            }\n            else{\n                stack.pop();\n                level--;\n            }\n        }\n        else if(paren_string[i] == ' '){\n            if(level == 0){\n                inside_str = false;\n                ret.push(max_level);\n                max_level = 0;\n                level = 0;\n                stack = [];\n            }\n            else{\n                if(level > max_level){\n                    max_level = level;\n                }\n            }\n        }\n        else{\n            if(!inside_str){\n                inside_str = true;\n                if(stack.length > 0){\n                    stack.push(paren_string[i]);\n                }\n            }\n            else{\n                if(stack.length > 0){\n                    stack.push(paren_string[i]);\n                }\n            }\n        }\n    }\n    if(stack.length > 0){\n        console.log(\"Invalid Parentheses String: \" + paren_string);\n    }\n    else{\n        ret.push(max_level);\n    }\n    return ret;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "var result = [];\n    var depth = 0;\n    var max_depth = 0;\n    for(var i = 0; i < paren_string.length; i++){\n        if(paren_string[i] == '('){\n            depth++;\n            if(depth > max_depth){\n                max_depth = depth;\n            }\n        }\n        else if(paren_string[i] == ')'){\n            depth--;\n        }\n        else if(paren_string[i] == ' '){\n            result.push(max_depth);\n            max_depth = 0;\n            depth = 0;\n        }\n    }\n    result.push(max_depth);\n    return result;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "var groups = paren_string.split(' ');\n    var count = 0;\n    var max = 0;\n    var result = [];\n    for(var i = 0; i < groups.length; i++){\n        count = 0;\n        for(var j = 0; j < groups[i].length; j++){\n            if(groups[i][j] == '('){\n                count++;\n            }\n            else if(groups[i][j] == ')'){\n                count--;\n            }\n            if(count > max){\n                max = count;\n            }\n        }\n        result.push(max);\n    }\n    return result;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "let levels = [];\n\tfor(let substring of paren_string.split(' ')){\n\t\tlet paren = 0;\n\t\tlet max_paren = 0;\n\t\tfor(let i = 0; i < substring.length; i++){\n\t\t\tif(substring[i] === '('){\n\t\t\t\tparen++;\n\t\t\t\tif(paren > max_paren){\n\t\t\t\t\tmax_paren = paren;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(substring[i] === ')'){\n\t\t\t\tparen--;\n\t\t\t}\n\t\t}\n\t\tlevels.push(max_paren);\n\t}\n\treturn levels;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "var depth = 0;\n    var max_depth = 0;\n    var result = [];\n    for(var i = 0; i < paren_string.length; i++){\n        var c = paren_string[i];\n        if(c == '('){\n            depth += 1;\n            max_depth = Math.max(max_depth, depth);\n        }else if(c == ')'){\n            depth -= 1;\n        }else if(c == ' '){\n            result.push(max_depth);\n            max_depth = 0;\n            depth = 0;\n        }\n    }\n    result.push(max_depth);\n    return result;\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "var tokens = paren_string.split(\" \"); //break the input string into groups\n  var max_counts = [];\n  for(var i = 0; i < tokens.length; i++){\n    var max_count = 0;\n    var count = 0;\n    for(var j = 0; j < tokens[i].length; j++){\n      if(tokens[i][j] == '('){\n        count++;\n        if(count > max_count){\n          max_count = count;\n        }\n      }\n      else if(tokens[i][j] == ')'){\n        count--;\n      }\n    }\n    max_counts.push(max_count);\n  }\n  return max_counts;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "var parens_regex = /\\(+\\)/g;\n    var parens_captured = paren_string.match(parens_regex);\n    var parens_counts = parens_captured.map(function(elem){\n        var open_parens = 0;\n        var close_parens = 0;\n        var max_parens = 0;\n        for(var i = 0; i < elem.length; i++){\n            if(elem[i] === '('){\n                open_parens++;\n                if(open_parens > max_parens){\n                    max_parens = open_parens;\n                }\n            }\n            else if(elem[i] === ')'){\n                close_parens++;\n            }\n        }\n        return max_parens;\n    });\n    return parens_counts;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "var paren_groups = paren_string.split(' ');\n\tvar output = [];\n\tfor(var i = 0; i < paren_groups.length; i++){\n\t\tvar parens = paren_groups[i];\n\t\tvar current_level = 0;\n\t\tvar max_level = 0;\n\t\tfor(var j = 0; j < parens.length; j++){\n\t\t\tif(parens[j] === '('){\n\t\t\t\tcurrent_level++;\n\t\t\t\tif(current_level > max_level){\n\t\t\t\t\tmax_level = current_level;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcurrent_level--;\n\t\t\t}\n\t\t}\n\t\toutput.push(max_level);\n\t}\n\treturn output;\n}\n\nmodule.exports = {\n\t\"parse_nested_parens\": parse_nested_parens\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "var paren_count = 0;\n    var max_paren = 0;\n    var paren_depth = [];\n    for (var i = 0; i < paren_string.length; i++){\n        if (paren_string[i] == '('){\n            paren_count += 1;\n            if (paren_count > max_paren){\n                max_paren = paren_count;\n            }\n        } else if (paren_string[i] == ')'){\n            paren_count -= 1;\n        } else if (paren_string[i] == ' '){\n            paren_depth.push(max_paren);\n            max_paren = 0;\n            paren_count = 0;\n        }\n    }\n    return paren_depth;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "let groups = paren_string.split(' ');\n    let output = [];\n    for(let i = 0; i < groups.length; i++){\n        let current_group = groups[i];\n        let count = 0;\n        let maximum = 0;\n        for(let j = 0; j < current_group.length; j++){\n            if(current_group[j] === '('){\n                count++;\n                if(count > maximum){\n                    maximum = count;\n                }\n            }\n            else if(current_group[j] === ')'){\n                count--;\n            }\n        }\n        output.push(maximum);\n    }\n    return output;\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "//*** The function should return a list of integers. ***\n    var items = paren_string.split(' ');\n    var results = [];\n    for (var i = 0; i < items.length; i++) {\n        var count = 0;\n        var max_count = 0;\n        for (var j = 0; j < items[i].length; j++) {\n            if (items[i][j] == '(') {\n                count += 1;\n                if (count > max_count) {\n                    max_count = count;\n                }\n            } else if (items[i][j] == ')') {\n                count -= 1;\n            }\n        }\n        results.push(max_count);\n    }\n    return results;\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "var counter = 0;\n\tvar parens = [];\n\tfor(var i = 0; i < paren_string.length; i++){\n\t\tif(paren_string[i] == '('){\n\t\t\tcounter++;\n\t\t}\n\t\telse if(paren_string[i] == ')'){\n\t\t\tcounter--;\n\t\t}\n\t\telse if(paren_string[i] == ' '){\n\t\t\tparens.push(counter);\n\t\t\tcounter = 0;\n\t\t}\n\t}\n\treturn parens;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "var group = [];\n    var group_arr = paren_string.split(' ');\n    for(var i = 0; i < group_arr.length; i++){\n        var paren = group_arr[i];\n        var count = 0;\n        var max = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j] === '('){\n                count++;\n                if(count > max){\n                    max = count;\n                }\n            }\n            else if(paren[j] === ')'){\n                count--;\n            }\n        }\n        group.push(max);\n    }\n    return group;\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "let parens = paren_string.split(' ')\n    let levels = []\n    for (let paren of parens){\n        let level = 0\n        let max_level = 0\n        for (let i = 0; i < paren.length; i++){\n            if (paren[i] === '('){\n                level += 1\n            }\n            else if (paren[i] === ')'){\n                level -= 1\n            }\n            if (level > max_level){\n                max_level = level\n            }\n        }\n        levels.push(max_level)\n    }\n    return levels\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "// TODO: complete this function\n    var max = 0;\n    var final = [];\n    var myarray = paren_string.split(\" \");\n    for (var i = 0; i < myarray.length; i++) {\n        if (myarray[i] === '()') {\n            final.push(1);\n        } else {\n            var string = myarray[i];\n            var counter = 0;\n            var max = 0;\n            for (var j = 0; j < string.length; j++) {\n                if (string[j] === '(') {\n                    counter++;\n                    if (counter > max) {\n                        max = counter;\n                    }\n                } else if (string[j] === ')') {\n                    counter--;\n                }\n            }\n            final.push(max);\n        }\n    }\n    return final;\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "}",
        "grade-9": {
            "execution": 0
        },
        "4": "var result = [];\n    var array = paren_string.split(' ');\n    for(var i = 0; i < array.length; i++){\n        var temp = 0;\n        var str = array[i];\n        for(var j = 0; j < str.length; j++){\n            if(str[j] == '('){\n                temp += 1;\n            }\n            else if(str[j] == ')'){\n                result.push(temp);\n                temp -= 1;\n            }\n        }\n    }\n    return result;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "let paren_groups = paren_string.split(' ');\n    let result = [];\n    for(let i = 0; i < paren_groups.length; i++){\n        let stack = [];\n        let level = 0;\n        let max_level = 0;\n        for(let char of paren_groups[i]){\n            if(char === '('){\n                stack.push(char);\n                level++;\n                if(level > max_level){\n                    max_level = level;\n                }\n            }\n            else if(char === ')'){\n                if(stack.length > 0){\n                    stack.pop();\n                    level--;\n                }\n            }\n        }\n        result.push(max_level);\n    }\n    return result;\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "//var paren_levels = [];\n  var paren_levels = new Array();\n  var paren_stack = [];\n  var i = 0;\n  while(i < paren_string.length){\n    if(paren_string[i] == '('){\n      paren_stack.push(paren_string[i]);\n    }\n    else if(paren_string[i] == ')'){\n      if(paren_stack.length > 0){\n        paren_stack.pop();\n      }\n      else{\n        paren_levels.push(0);\n      }\n    }\n    else if(paren_string[i] == ' '){\n      paren_levels.push(paren_stack.length);\n    }\n    i++;\n  }\n  return paren_levels;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "let result = [];\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      let count = 0;\n      while (paren_string[i] === '(') {\n        count += 1;\n        i += 1;\n      }\n      result.push(count);\n    }\n  }\n  return result;\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//triples_sum_to_zero takes a list of integers as an input.\n// it returns True if there are three distinct elements in the list that\n// sum to zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n// >>> triples_sum_to_zero([1])\n// False\nfunction triples_sum_to_zero(l){\n",
        "snippet": [
            "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n"
        ],
        "simplified": "triples_sum_to_zero takes a list of integers as an input. it returns True if there are three distinct elements in the list that sum to zero, and False otherwise.",
        "task_id": "40",
        "3": "var flag = false;\n\tvar len = l.length;\n\tfor(var i = 0; i < len; i++){\n\t\tfor(var j = i + 1; j < len; j++){\n\t\t\tfor(var k = j + 1; k < len; k++){\n\t\t\t\tif(l[i] + l[j] + l[k] == 0){\n\t\t\t\t\tflag = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn flag;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "// ... your code here ...\n    l.sort(function(a, b){return a-b});\n    var result = false;\n    var i = 0;\n    while(i < l.length){\n        var j = i + 1;\n        var k = l.length - 1;\n        while(j < k){\n            if(l[i] + l[j] + l[k] == 0){\n                result = true;\n                break;\n            }\n            else if(l[i] + l[j] + l[k] < 0){\n                j++;\n            }\n            else{\n                k--;\n            }\n        }\n        i++;\n    }\n    return result;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "}",
        "grade-8": {
            "execution": 0
        },
        "7": "var i;\n    for(i=0; i<l.length; i++){\n        var j;\n        for(j=0; j<l.length; j++){\n            var k;\n            for(k=0; k<l.length; k++){\n                if(l[i] + l[j] + l[k] == 0 && i != j && j != k && i != k){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "if (l.length < 3){\n        return false;\n    }\n    else{\n        var j = 0;\n        while (j < l.length - 2){\n            var k = j + 1;\n            while (k < l.length - 1){\n                var m = k + 1;\n                while (m < l.length){\n                    if (l[j] + l[k] + l[m] == 0){\n                        return true;\n                    }\n                    m++;\n                }\n                k++;\n            }\n            j++;\n        }\n        return false;\n    }\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "for(let i = 0; i < l.length; i++){\n        for(let j = 0; j < l.length; j++){\n            for(let k = 0; k < l.length; k++){\n                if(l[i] + l[j] + l[k] == 0 && i !== j && j !== k && i !== k){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "if (l.length < 3){\n        return false;\n    }\n    else{\n        for (var i = 0; i < l.length - 2; i++) {\n            for (var j = i + 1; j < l.length - 1; j++) {\n                for (var k = j + 1; k < l.length; k++) {\n                    if (l[i] + l[j] + l[k] == 0){\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "var l1 = l.slice();\n    var l2 = l.slice();\n    var l3 = l.slice();\n    l1.sort();\n    l2.sort();\n    l3.sort();\n    var i = 0;\n    var j = 1;\n    var k = 2;\n    var x = 0;\n    var t = 0;\n    while (i<l1.length){\n        j = i+1;\n        x = -l1[i];\n        while (j<l2.length){\n            k = j+1;\n            t = x-l2[j];\n            while (k<l3.length){\n                if (l3[k]==t){\n                    return true;\n                }\n                k = k+1;\n            }\n            j = j+1;\n        }\n        i = i+1;\n    }\n    return false;\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "// YOUR CODE HERE\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "if (l.length < 3){\n        return false;\n    }\n    for (var i = 0; i < l.length; i++){\n        for (var j = i + 1; j < l.length; j++){\n            for (var k = j + 1; k < l.length; k++){\n                if (l[i] + l[j] + l[k] == 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "var result = false;\n    for(var i = 0; i < l.length; i++){\n        for(var j = i + 1; j < l.length; j++){\n            for(var k = j + 1; k < l.length; k++){\n                if(l[i] + l[j] + l[k] == 0){\n                    result = true;\n                }\n            }\n        }\n    }\n    return result;\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "if (l.length < 3){\n        return false;\n    }\n    // else if(l.length == 3){\n    //     if(l[0] + l[1] + l[2] == 0){\n    //         return true;\n    //     }\n    //     else{\n    //         return false;\n    //     }\n    // }\n    else{\n        for(var i = 0; i < l.length; i++){\n            for(var j = i + 1; j < l.length; j++){\n                for(var k = j + 1; k < l.length; k++){\n                    if(l[i] + l[j] + l[k] == 0){\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "for(let i = 0; i < l.length; i++){\n        for(let j = 0; j < l.length; j++){\n            for(let k = 0; k < l.length; k++){\n                if(l[i] + l[j] + l[k] == 0 && i != j && j != k && i != k){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "// body...\n\tfor (var i = 0; i < l.length; i++) {\n\t\tvar a = l[i];\n\t\tfor (var j = i+1; j < l.length; j++) {\n\t\t\tvar b = l[j];\n\t\t\tfor (var k = j+1; k < l.length; k++) {\n\t\t\t\tvar c = l[k];\n\t\t\t\tif (a+b+c==0) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "function helper(index, first, second){\n    if (index === l.length){\n      return false;\n    }\n    if (first === undefined){\n      return helper(index + 1, l[index], second);\n    } else if (second === undefined){\n      return helper(index + 1, first, l[index]);\n    } else {\n      if (first + second + l[index] === 0){\n        return true;\n      } else {\n        return helper(index + 1, first, second);\n      }\n    }\n  }\n  return helper(0);\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "let s = new Set();\n    let r = new Set();\n    for(let x of l){\n        if(r.has(x)){\n            return true;\n        }\n        for(let y of s){\n            r.add(-x-y);\n        }\n        s.add(x);\n    }\n    return false;\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "var a = 0;\n  var b = 0;\n  var c = 0;\n  if (l.length < 3){\n    return false;\n  } else {\n    for (var i = 0; i < l.length; i++) {\n      a = l[i];\n      for (var j = i + 1; j < l.length; j++) {\n        b = l[j];\n        for (var k = j + 1; k < l.length; k++) {\n          c = l[k];\n          if (a + b + c == 0) {\n            return true;\n          }\n        }\n      }\n    }\n  }\n  return false;\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "if (l.length <= 2){\n\t\treturn false;\n\t}\n\tfor (var i = 0; i < l.length; i++){\n\t\tfor (var j = i + 1; j < l.length; j++){\n\t\t\tfor (var k = j + 1; k < l.length; k++){\n\t\t\t\tif (l[i] + l[j] + l[k] == 0){\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "var flag = false;\n    for(var i = 0; i < l.length; i++){\n        for(var j = 0; j < l.length; j++){\n            for(var k = 0; k < l.length; k++){\n                if(i != j && i != k && j != k){\n                    if(l[i] + l[j] + l[k] == 0){\n                        flag = true;\n                    }\n                }\n            }\n        }\n    }\n    return flag;\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "for(var i = 0; i < l.length; i++){\n        for(var j = 0; j < l.length; j++){\n            for(var k = 0; k < l.length; k++){\n                if(l[i] + l[j] + l[k] == 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//Given two lists operator, and operand. The first list has basic algebra operations, and \n// the second list is a list of integers. Use the two given lists to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list is equal to the length of operand list minus one.\n// Operand is a list of of non-negative integers.\n// Operator list has at least one operator, and operand list has at least two operands.\nfunction do_algebra(operator, operand){\n",
        "snippet": [
            "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n"
        ],
        "simplified": "Given two lists operator, and operand. The first list has basic algebra operations, and the second list is a list of integers. Use the two given lists to build the algebric expression and return the evaluation of this expression. The basic algebra operations: Addition ( + ) Subtraction ( - ) Multiplication ( * ) Floor division ( // ) Exponentiation ( ** )",
        "task_id": "160",
        "3": "let result = '';\n    operand.forEach((e, i) => {\n        result += `${e}${operator[i] ? operator[i] : ''}`;\n    });\n    return eval(result);\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "var result = operand[0];\n    for(let i = 0; i < operator.length; i++){\n        switch(operator[i]){\n            case '+':\n                result += operand[i+1];\n                break;\n            case '-':\n                result -= operand[i+1];\n                break;\n            case '*':\n                result *= operand[i+1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i+1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i+1]);\n                break;\n        }\n    }\n    return result;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "let operandArray = [];\n    let operatorArray = [];\n    let result;\n    let tempOperand = 0;\n    let tempOperator = 0;\n    for(let i = 0; i < operand.length; i++){\n        operandArray.push(operand[i]);\n    }\n    for(let i = 0; i < operator.length; i++){\n        operatorArray.push(operator[i]);\n    }\n    for(let i = 0; i < operatorArray.length; i++){\n        if(operatorArray[i] === '*' || operatorArray[i] === '/'){\n            if(operatorArray[i] === '*'){\n                result = operandArray[i] * operandArray[i + 1];\n                operandArray.splice(i, 2, result);\n                operatorArray.splice(i, 1);\n                i--;\n            }\n            else if(operatorArray[i] === '/'){\n                result = operandArray[i] / operandArray[i + 1];\n                operandArray.splice(i, 2, result);\n                operatorArray.splice(i, 1);\n                i--;\n            }\n        }\n    }\n    for(let i = 0; i < operatorArray.length; i++){\n        if(operatorArray[i] === '+' || operatorArray[i] === '-'){\n            if(operatorArray[i] === '+'){\n                result = operandArray[i] + operandArray[i + 1];\n                operandArray.splice(i, 2, result);\n                operatorArray.splice(i, 1);\n                i--;\n            }\n            else if(operatorArray[i] === '-'){\n                result = operandArray[i] - operandArray[i + 1];\n                operandArray.splice(i, 2, result);\n                operatorArray.splice(i, 1);\n                i--;\n            }\n        }\n    }\n    return result;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "// Your code here\n  var result = operand[0];\n  for(var i = 0; i < operator.length; i++){\n    if(operator[i] == '+'){\n      result += operand[i+1];\n    }\n    else if(operator[i] == '-'){\n      result -= operand[i+1];\n    }\n    else if(operator[i] == '*'){\n      result *= operand[i+1];\n    }\n    else if(operator[i] == '//'){\n      result = Math.floor(result / operand[i+1]);\n    }\n    else if(operator[i] == '**'){\n      result = Math.pow(result, operand[i+1]);\n    }\n  }\n  return result;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "let opr = operator;\n    let opd = operand;\n    let sum = opd[0];\n    for(let i = 0; i < opr.length; i++){\n        if(opr[i] == '+'){\n            sum += opd[i+1];\n        }\n        if(opr[i] == '-'){\n            sum -= opd[i+1];\n        }\n        if(opr[i] == '*'){\n            sum *= opd[i+1];\n        }\n        if(opr[i] == '//'){\n            sum /= opd[i+1];\n        }\n        if(opr[i] == '**'){\n            sum = Math.pow(sum, opd[i+1]);\n        }\n    }\n    return sum;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "let x = operand[0];\n    for(let i = 0; i < operator.length; i++){\n        if(operator[i] == '+'){\n            x += operand[i+1];\n        }else if(operator[i] == '-'){\n            x -= operand[i+1];\n        }else if(operator[i] == '*'){\n            x *= operand[i+1];\n        }else if(operator[i] == '//'){\n            x = Math.floor(x / operand[i+1]);\n        }else if(operator[i] == '**'){\n            x = Math.pow(x, operand[i+1]);\n        }\n    }\n    return x;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "if (operator.length === 0 || operand.length < 2) {\n    return 0;\n  }\n  let result = operand[0];\n  for (let i = 0; i < operator.length; i++) {\n    if (operator[i] === '+') {\n      result += operand[i + 1];\n    } else if (operator[i] === '-') {\n      result -= operand[i + 1];\n    } else if (operator[i] === '*') {\n      result *= operand[i + 1];\n    } else if (operator[i] === '//') {\n      result = Math.floor(result / operand[i + 1]);\n    } else if (operator[i] === '**') {\n      result = Math.pow(result, operand[i + 1]);\n    }\n  }\n  return result;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "let result = operand[0];\n  for (let i = 0; i < operator.length; i++) {\n    switch (operator[i]) {\n      case '+':\n        result += operand[i + 1];\n        break;\n      case '-':\n        result -= operand[i + 1];\n        break;\n      case '*':\n        result *= operand[i + 1];\n        break;\n      case '//':\n        result = Math.floor(result / operand[i + 1]);\n        break;\n      case '**':\n        result = Math.pow(result, operand[i + 1]);\n        break;\n    }\n  }\n  return result;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "var res = operand[0];\n    for(var i = 0; i < operator.length; i++){\n        switch(operator[i]){\n            case '+':\n                res += operand[i+1];\n                break;\n            case '-':\n                res -= operand[i+1];\n                break;\n            case '*':\n                res *= operand[i+1];\n                break;\n            case '//':\n                res = Math.floor(res / operand[i+1]);\n                break;\n            case '**':\n                res = Math.pow(res, operand[i+1]);\n                break;\n        }\n    }\n    return res;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "let res = operand[0];\n    for(let i = 0; i < operator.length; i++){\n        let opr = operator[i];\n        let num = operand[i+1];\n        if(opr === '+'){\n            res += num;\n        }\n        else if(opr === '-'){\n            res -= num;\n        }\n        else if(opr === '*'){\n            res *= num;\n        }\n        else if(opr === '//'){\n            res = Math.floor(res / num);\n        }\n        else if(opr === '**'){\n            res = Math.pow(res, num);\n        }\n    }\n    return res;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "// Your code is here...\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "let result = 0;\n    for(let i = 0; i < operator.length; i++){\n        if(i === 0){\n            if(operator[i] === '+'){\n                result = operand[i] + operand[i+1];\n            }else if(operator[i] === '-'){\n                result = operand[i] - operand[i+1];\n            }else if(operator[i] === '*'){\n                result = operand[i] * operand[i+1];\n            }else if(operator[i] === '//'){\n                result = operand[i] / operand[i+1];\n            }else if(operator[i] === '**'){\n                result = operand[i] ** operand[i+1];\n            }\n        }else{\n            if(operator[i] === '+'){\n                result += operand[i+1];\n            }else if(operator[i] === '-'){\n                result -= operand[i+1];\n            }else if(operator[i] === '*'){\n                result *= operand[i+1];\n            }else if(operator[i] === '//'){\n                result /= operand[i+1];\n            }else if(operator[i] === '**'){\n                result **= operand[i+1];\n            }\n        }\n    }\n    return result;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "if(operator.length == 0){\n        return operand[0];\n    }\n    let output = operand[0];\n    for(let i = 0; i < operator.length; i++){\n        if(operator[i] == '+'){\n            output += operand[i+1];\n        }\n        if(operator[i] == '-'){\n            output -= operand[i+1];\n        }\n        if(operator[i] == '*'){\n            output *= operand[i+1];\n        }\n        if(operator[i] == '//'){\n            output = Math.floor(output / operand[i+1]);\n        }\n        if(operator[i] == '**'){\n            output = Math.pow(output, operand[i+1]);\n        }\n    }\n    return output;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "let str = '';\n    for(let i = 0; i < operand.length; i++){\n        str += `${operand[i]} ${operator[i]} `;\n    }\n    str += operand[operand.length - 1];\n    return eval(str);\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "for(var i = 0; i < operator.length; i++){\n    if(operator[i] === '+'){\n      operand[i+1] = operand[i] + operand[i+1];\n    }\n    if(operator[i] === '-'){\n      operand[i+1] = operand[i] - operand[i+1];\n    }\n    if(operator[i] === '*'){\n      operand[i+1] = operand[i] * operand[i+1];\n    }\n    if(operator[i] === '//'){\n      operand[i+1] = Math.floor(operand[i] / operand[i+1]);\n    }\n    if(operator[i] === '**'){\n      operand[i+1] = Math.pow(operand[i], operand[i+1]);\n    }\n  }\n  return operand[operand.length-1];\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "if (operand.length < 2) return undefined;\n  let result = operand[0];\n  operand.shift();\n  operator.forEach((item, index) => {\n    switch (item) {\n      case '+':\n        result += operand[index];\n        break;\n      case '-':\n        result -= operand[index];\n        break;\n      case '*':\n        result *= operand[index];\n        break;\n      case '//':\n        result = Math.floor(result / operand[index]);\n        break;\n      case '**':\n        result = Math.pow(result, operand[index]);\n        break;\n    }\n  });\n  return result;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "let result = operand[0];\n    for(let i = 0; i < operator.length; i++){\n        switch(operator[i]){\n            case '+':\n                result += operand[i+1];\n                break;\n            case '-':\n                result -= operand[i+1];\n                break;\n            case '*':\n                result *= operand[i+1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i+1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i+1]);\n                break;\n        }\n    }\n    return result;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "let result = operand[0];\n    for(let i = 0; i < operator.length; i++){\n        let operatorFunc = operator[i];\n        let operand1 = operand[i];\n        let operand2 = operand[i+1];\n        switch(operatorFunc){\n            case '+':\n                result = operand1 + operand2;\n                break;\n            case '-':\n                result = operand1 - operand2;\n                break;\n            case '*':\n                result = operand1 * operand2;\n                break;\n            case '//':\n                result = operand1 / operand2;\n                break;\n            case '**':\n                result = operand1 ** operand2;\n                break;\n        }\n    }\n    return result;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "var arr = []\n    for(var i = 0; i < operator.length; i++){\n        if(operator[i] == '//'){\n            arr.push(Math.floor(operand[i+1] / operand[i]))\n        }\n        else if(operator[i] == '**'){\n            arr.push(Math.pow(operand[i], operand[i+1]))\n        }\n        else{\n            arr.push(operator[i], operand[i+1])\n        }\n    }\n    return eval(arr.join(''))\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n",
        "snippet": [
            "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n"
        ],
        "simplified": "The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3). Please write a function to efficiently compute the n-th element of the fibfib number sequence.",
        "task_id": "63",
        "0": "if(n == 0) return 0;\n    if(n == 1) return 0;\n    if(n == 2) return 1;\n    var sum = 0;\n    for(var i = 3; i <= n; i++){\n        sum += fibfib(i-1) + fibfib(i-2) + fibfib(i-3);\n    }\n    return sum;\n}",
        "grade-0": {
            "execution": 0
        },
        "1": "// Your code here\n}",
        "grade-1": {
            "execution": 0
        },
        "2": "if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2) return 1;\n  var n1 = 0;\n  var n2 = 0;\n  var n3 = 1;\n  var fib = 0;\n  for(var i = 3; i <= n; i++){\n    fib = n1 + n2 + n3;\n    n1 = n2;\n    n2 = n3;\n    n3 = fib;\n  }\n  return fib;\n}",
        "grade-2": {
            "execution": 1
        },
        "3": "// Write code here\n}",
        "grade-3": {
            "execution": 0
        },
        "4": "var firstNum = 0;\n    var secondNum = 0;\n    var thirdNum = 1;\n    var sum;\n    if(n == 0) {\n        return 0;\n    } else if(n == 1) {\n        return 0;\n    } else if(n == 2) {\n        return 1;\n    } else {\n        for(var i = 2; i < n; i++) {\n            sum = firstNum + secondNum + thirdNum;\n            firstNum = secondNum;\n            secondNum = thirdNum;\n            thirdNum = sum;\n        }\n        return sum;\n    }\n}",
        "grade-4": {
            "execution": 1
        },
        "5": "// base case\n\tif(n === 0) return 0;\n\tif(n === 1) return 0;\n\tif(n === 2) return 1;\n\t// recursive case\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}",
        "grade-5": {
            "execution": 1
        },
        "6": "if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}",
        "grade-6": {
            "execution": 1
        },
        "7": "var ret = 0;\n  if(n == 0){\n    ret = 0;\n  }else if(n == 1){\n    ret = 0;\n  }else if(n == 2){\n    ret = 1;\n  }else{\n    var one = 0;\n    var two = 0;\n    var three = 1;\n    for(var i = 3; i <= n; i++){\n      ret = one + two + three;\n      one = two;\n      two = three;\n      three = ret;\n    }\n  }\n  return ret;\n}",
        "grade-7": {
            "execution": 1
        },
        "8": "let fib = [0,0,1];\n\tfor(let i = 3; i <= n; i++){\n\t\tfib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n\t}\n\treturn fib[n];\n}",
        "grade-8": {
            "execution": 1
        },
        "9": "if(n == 0)\n        return 0;\n    if(n == 1)\n        return 0;\n    if(n == 2)\n        return 1;\n    var first = 0;\n    var second = 0;\n    var third = 1;\n    var sum = 0;\n    for(var i = 3; i <= n; i++){\n        sum = first + second + third;\n        first = second;\n        second = third;\n        third = sum;\n    }\n    return sum;\n}",
        "grade-9": {
            "execution": 1
        },
        "10": "var pre2 = 0;\n    var pre1 = 0;\n    var cur = 1;\n    if(n < 0){\n        return undefined;\n    }\n    if(n === 0){\n        return 0;\n    }\n    if(n === 1){\n        return 0;\n    }\n    if(n === 2){\n        return 1;\n    }\n    for(var i = 2; i < n; i++){\n        pre2 = pre1;\n        pre1 = cur;\n        cur = pre1 + pre2 + pre2;\n    }\n    return cur;\n}",
        "grade-10": {
            "execution": 0
        },
        "11": "let a = 0;\n    let b = 0;\n    let c = 1;\n    for(let i = 2; i <= n; i++){\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return c;\n}",
        "grade-11": {
            "execution": 0
        },
        "12": "// TODO: Implement me!\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n        return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    if(n >= 3){\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n    }\n}",
        "grade-12": {
            "execution": 1
        },
        "14": "if(n<=0){\n        return 0;\n    }\n    if(n==1){\n        return 0;\n    }\n    if(n==2){\n        return 1;\n    }\n    return fibfib(n-1)+fibfib(n-2)+fibfib(n-3);\n}",
        "grade-14": {
            "execution": 1
        },
        "15": "var a = 0, b = 0, c = 1, d = 0;\n  for(var i = 2; i <= n; i++){\n    d = a + b + c;\n    a = b;\n    b = c;\n    c = d;\n  }\n  return d;\n}",
        "grade-15": {
            "execution": 0
        },
        "16": "var a = 0, b = 0, c = 1, d;\n  if (n == 0) return a;\n  if (n == 1) return b;\n  if (n == 2) return c;\n  for (var i = 3; i <= n; i++) {\n    d = c + b + a;\n    a = b;\n    b = c;\n    c = d;\n  }\n  return d;\n}",
        "grade-16": {
            "execution": 1
        },
        "17": "}",
        "grade-17": {
            "execution": 0
        },
        "18": "//base cases\n\tif(n === 0){\n\t\treturn 0;\n\t}\n\tif(n === 1){\n\t\treturn 0;\n\t}\n\tif(n === 2){\n\t\treturn 1;\n\t}\n\t//recursive cases\n\telse{\n\t\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\t}\n}",
        "grade-18": {
            "execution": 1
        },
        "19": "let memo = [0,0,1];\n\tfor(let i = 3; i <= n; i++){\n\t\tlet num = memo[i-1] + memo[i-2] + memo[i-3];\n\t\tmemo.push(num);\n\t}\n\treturn memo[n];\n}",
        "grade-19": {
            "execution": 1
        }
    },
    {
        "intent": "//Concatenate list of strings into a single string\n// >>> concatenate([])\n// ''\n// >>> concatenate(['a', 'b', 'c'])\n// 'abc'\nfunction concatenate(strings){\n",
        "snippet": [
            "  return strings.join('');\n}\n\n"
        ],
        "simplified": "Concatenate list of strings into a single string",
        "task_id": "28",
        "0": "return strings.reduce(function(a, b){\n    return a + b;\n  }, '');\n}",
        "grade-0": {
            "execution": 1
        },
        "1": "// YOUR CODE HERE\n}",
        "grade-1": {
            "execution": 0
        },
        "2": "// your code here\n}",
        "grade-2": {
            "execution": 0
        },
        "3": "if(strings.length===0){\n\t\treturn '';\n\t}\n\telse{\n\t\treturn strings[0]+concatenate(strings.slice(1));\n\t}\n}",
        "grade-3": {
            "execution": 1
        },
        "4": "return strings.reduce(function(a, b){\n        return a + b;\n    }, '');\n}",
        "grade-4": {
            "execution": 1
        },
        "5": "var str = '';\n    for(var i = 0; i < strings.length; i++){\n        str += strings[i];\n    }\n    return str;\n}",
        "grade-5": {
            "execution": 1
        },
        "7": "var finalstring = \"\";\n  for (var i = 0; i < strings.length; i++) {\n    finalstring += strings[i];\n  }\n  return finalstring;\n}",
        "grade-7": {
            "execution": 1
        },
        "8": "var str = \"\";\n  for(var i = 0; i < strings.length; i++){\n    str += strings[i];\n  }\n  return str;\n}",
        "grade-8": {
            "execution": 1
        },
        "9": "return strings.reduce(\n        function(accumulator, value){\n            return accumulator + value;\n        }\n    )\n}",
        "grade-9": {
            "execution": 0
        },
        "10": "let result = strings.reduce((acc, val) => {\n    return acc + val;\n  });\n  return result;\n}",
        "grade-10": {
            "execution": 0
        },
        "11": "var result = \"\";\n\tfor(var i = 0; i < strings.length; i++){\n\t\tresult += strings[i];\n\t}\n\treturn result;\n}",
        "grade-11": {
            "execution": 1
        },
        "12": "if(strings.length === 0){\n        return '';\n    } else if(strings.length === 1){\n        return strings[0];\n    } else {\n        return strings[0] + concatenate(strings.slice(1));\n    }\n}",
        "grade-12": {
            "execution": 1
        },
        "13": "//base case\n  if(strings.length === 0){\n    return '';\n  }\n  //recursive case\n  return strings[0] + concatenate(strings.slice(1));\n}",
        "grade-13": {
            "execution": 1
        },
        "14": "return strings.join('');\n}",
        "grade-14": {
            "execution": 1
        },
        "15": "var newstring = \"\";\n\tfor (var i = 0; i < strings.length; i++){\n\t\tnewstring += strings[i];\n\t}\n\treturn newstring;\n}",
        "grade-15": {
            "execution": 1
        },
        "16": "var result = \"\";\n    strings.forEach(function(str){\n        result += str;\n    });\n    return result;\n}",
        "grade-16": {
            "execution": 1
        },
        "17": "let newString = '';\n  for (let i = 0; i < strings.length; i++){\n    newString += strings[i];\n  }\n  return newString;\n}",
        "grade-17": {
            "execution": 1
        },
        "18": "return strings.reduce(function(string, newStr){\n        return string + newStr;\n    }, '');\n}",
        "grade-18": {
            "execution": 1
        },
        "19": "var result = '';\n    for(var i = 0; i < strings.length; i++) {\n        result += strings[i];\n    }\n    return result;\n}",
        "grade-19": {
            "execution": 1
        }
    },
    {
        "intent": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n",
        "snippet": [
            "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n"
        ],
        "simplified": "Return a greatest common divisor of two integers a and b",
        "task_id": "13",
        "3": "if(b == 0){\n\t\treturn a;\n\t}\n\telse{\n\t\treturn greatest_common_divisor(b, a % b);\n\t}\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "if (a == 0) return b;\n  if (b == 0) return a;\n  return greatest_common_divisor(b, a % b);\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "var result;\n\tvar arr = [];\n\tfor(var i = 1; i <= a; i++){\n\t\tif(a % i === 0){\n\t\t\tarr.push(i);\n\t\t}\n\t}\n\tfor(var j = 0; j < arr.length; j++){\n\t\tif(b % arr[j] === 0){\n\t\t\tresult = arr[j];\n\t\t}\n\t}\n\treturn result;\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "// make sure a is greater than b\n    if (a < b){\n        let t = a;\n        a = b;\n        b = t;\n    }\n    // compute remainder by modulus, subtract when b > 0\n    let r = a % b;\n    while (r > 0){\n        a = b;\n        b = r;\n        r = a % b;\n    }\n    return b;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "if (a<b){\n\t\tvar tmp = a;\n\t\ta = b;\n\t\tb = tmp;\n\t}\n\tvar r = a % b;\n\tif (r==0){\n\t\treturn b;\n\t}\n\treturn greatest_common_divisor(b, r);\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "if (a % b === 0) {\n        return b;\n    }\n    else {\n        return greatest_common_divisor(b, a % b);\n    }\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "let r;\n    while (b != 0){\n        r = a % b;\n        a = b;\n        b = r;\n    }\n    return a;\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "while (a !== b){\n\t\tif (a > b){\n\t\t\ta = a - b;\n\t\t}\n\t\telse{\n\t\t\tb = b - a;\n\t\t}\n\t}\n\treturn a;\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "var divisor = 2, \n        greatestDivisor = 1;\n\n    //if u pass a -ve number this will not work. fix it dude!!\n    if (a < 2 || b < 2)\n       return 1;\n    \n    while(a >= divisor && b >= divisor){\n     if(a %divisor == 0 && b% divisor ==0){\n            greatestDivisor = divisor;      \n        }\n     divisor++;\n    }\n    return greatestDivisor;\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "var divisor = 2, \n      greatestDivisor = 1;\n\n  //if u pass a -ve number this will not work. fix it dude!!\n  if (a < 2 || b < 2)\n     return 1;\n  \n  while(a >= divisor && b >= divisor){\n   if(a %divisor == 0 && b% divisor ==0){\n      greatestDivisor = divisor;      \n    }\n   divisor++;\n  }\n  return greatestDivisor;\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "if(!b){\n\t\treturn a;\n\t}\n\treturn greatest_common_divisor(b, a % b);\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "var divisor = 2,\n        greatestDivisor = 1;\n\n    //if u pass a -ve number this will not work. fix it dude!!\n    if (a < 2 || b < 2)\n        return 1;\n\n    while(a >= divisor && b >= divisor){\n        if(a %divisor == 0 && b% divisor ==0){\n            greatestDivisor = divisor;\n        }\n        divisor++;\n    }\n    return greatestDivisor;\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "var arr = [a, b];\n  var num = 1;\n  var divisor = 1;\n  while(divisor <= Math.min(...arr)){\n    if(a % divisor === 0 && b % divisor === 0){\n      num = divisor;\n    }\n    divisor++;\n  }\n  return num;\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "if(b===0){\n        return a;\n    }else{\n        return greatest_common_divisor(b, a%b);\n    }\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "}",
        "grade-13": {
            "execution": 0
        },
        "9": "var gcd = 1;\n  for (var i = 2; i <= Math.min(a, b); i++) {\n    if (a % i == 0 && b % i == 0) {\n      gcd = i;\n    }\n  }\n  return gcd;\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "//...\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "while (a !== b) {\n      if (a > b) {\n          a = a - b;\n      } else {\n          b = b - a;\n      }\n  }\n  return a;\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "if(b==0){\n    return a;\n  }\n  else{\n    return greatest_common_divisor(b,a%b);\n  }\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "if(a < 0 || b < 0){\n    return -1;\n  }\n  else if(a < b){\n    if(a === 0){\n      return b;\n    }\n    return greatest_common_divisor(b%a, a);\n  }\n  else if(a > b){\n    if(b === 0){\n      return a;\n    }\n    return greatest_common_divisor(a%b, b);\n  }\n  else{\n    return a;\n  }\n}",
        "grade-19": {
            "execution": 1
        }
    },
    {
        "intent": "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n// 'hELLO'\nfunction flip_case(string){\n",
        "snippet": [
            "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n"
        ],
        "simplified": "For a given string, flip lowercase characters to uppercase and uppercase to lowercase.",
        "task_id": "27",
        "3": "var string = \"Hello\"\n    var newString = \"\";\n    for (var i = 0; i < string.length; i++){\n        if (string[i] === string[i].toUpperCase()){\n            newString += string[i].toLowerCase();\n        }\n        else {\n            newString += string[i].toUpperCase();\n        }\n    }\n    return newString;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "//TODO\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "var newstr = '';\n    for (var i = 0; i < string.length; i++){\n        if (string[i] == string[i].toUpperCase()){\n            newstr += string[i].toLowerCase();\n        } else {\n            newstr += string[i].toUpperCase();\n        }\n    }\n    return newstr;\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "var flipped = '';\n    for (var i = 0; i < string.length; i++){\n        if (string[i] === string[i].toUpperCase()){\n            flipped += string[i].toLowerCase();\n        }\n        else{\n            flipped += string[i].toUpperCase();\n        }\n    }\n    return flipped;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "var str = '';\n    for(var i = 0; i < string.length; i++){\n        if(string[i] === string[i].toUpperCase()){\n            str += string[i].toLowerCase();\n        }\n        else{\n            str += string[i].toUpperCase();\n        }\n    }\n    return str;\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "var result=\"\";\n  for(var i=0;i<string.length;i++){\n    if(string[i]===string[i].toUpperCase()){\n      result+=string[i].toLowerCase();\n    }\n    else{\n      result+=string[i].toUpperCase();\n    }\n  }\n  return result;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "var newString = '';\n    for (i=0; i<string.length; i++){\n        if (string[i] === string[i].toUpperCase()){\n            newString += string[i].toLowerCase();\n        } else {\n            newString += string[i].toUpperCase();\n        }\n    }\n    return newString;\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "var new_string = \"\";\n\tfor (var i = 0; i < string.length; i++){\n\t\tif (string[i] == string[i].toUpperCase()){\n\t\t\tnew_string += string[i].toLowerCase();\n\t\t} else {\n\t\t\tnew_string += string[i].toUpperCase();\n\t\t}\n\t}\n\treturn new_string;\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "var str = string.split('');\n  for(i = 0; i < str.length; i++){\n    if(str[i] == str[i].toUpperCase()){\n      str[i] = str[i].toLowerCase();\n    } else {\n      str[i] = str[i].toUpperCase();\n    }\n  }\n  return str.join('');\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "return string.split('').map(function(char){\n        if(char === char.toUpperCase()){\n            return char.toLowerCase();\n        }\n        return char.toUpperCase();\n    }).join('');\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "var splitString = string.split(\"\");\n    var newString = \"\";\n    for (var i = 0; i < splitString.length; i++){\n        if (splitString[i] === splitString[i].toUpperCase()){\n            newString += splitString[i].toLowerCase();\n        } else {\n            newString += splitString[i].toUpperCase();\n        }\n    }\n    return newString;\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "return string.split('').map(function(char){\n\t\treturn (char === char.toUpperCase()) ? char.toLowerCase() : char.toUpperCase();\n\t}).join('');\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "var result = \"\";\n  for (var i = 0; i < string.length; i++){\n    var letter = string[i];\n    if (letter === letter.toUpperCase()){\n      result += letter.toLowerCase();\n    } else {\n      result += letter.toUpperCase();\n    }\n  }\n  return result;\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "var newString = '';\n    for (var i = 0; i < string.length; i++){\n        if (string[i] === string[i].toUpperCase()){\n            newString += string[i].toLowerCase();\n        } else if (string[i] === string[i].toLowerCase()){\n            newString += string[i].toUpperCase();\n        }\n    }\n    return newString;\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "var flipped_string = '';\n    for (var i = 0; i < string.length; i++){\n        if (string[i] == string[i].toUpperCase()){\n            flipped_string += string[i].toLowerCase();\n        } else if (string[i] == string[i].toLowerCase()){\n            flipped_string += string[i].toUpperCase();\n        }\n    }\n    return flipped_string;\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "var convertedString = \"\";\n    for(var i = 0; i < string.length; i++){\n        if(string[i] === string[i].toUpperCase()){\n            convertedString += string[i].toLowerCase();\n        }\n        else{\n            convertedString += string[i].toUpperCase();\n        }\n    }\n    return convertedString;\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "//return array of characters as strings\n    let str_array = string.split('');\n    //create empty array to push flipped characters to\n    let result = [];\n    //iterate over string array, for each element\n    for (let i = 0; i < str_array.length; i++){\n        //compare each element with it's uppercase version, if the are equal push the element to the result array with .toLowerCase() called on it.\n        if (str_array[i] === str_array[i].toUpperCase()){\n            result.push(str_array[i].toLowerCase());\n        } else {\n            result.push(str_array[i].toUpperCase());\n        }\n    }\n    //print and return the result array joined together to a string\n    console.log(result.join(''));\n    return result.join('');\n}\n\nflip_case('Hello');",
        "grade-4": {
            "execution": 1
        },
        "14": "let newString = '';\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === string[i].toUpperCase()){\n            newString += string[i].toLowerCase();\n        } else {\n            newString += string[i].toUpperCase();\n        }\n    }\n    return newString;\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "var new_string = \"\";\n    for(var i = 0; i < string.length; i++){\n        if(string[i] === string[i].toUpperCase()){\n            new_string += string[i].toLowerCase();\n        }\n        else{\n            new_string += string[i].toUpperCase();\n        }\n    }\n    return new_string;\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "var res = \"\";\n    for(var i = 0; i < string.length; i++){\n        if(string[i] === string[i].toUpperCase()){\n            res += string[i].toLowerCase();\n        }\n        else{\n            res += string[i].toUpperCase();\n        }\n    }\n    return res;\n}",
        "grade-19": {
            "execution": 1
        }
    },
    {
        "intent": "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x, n){\n",
        "snippet": [
            "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n"
        ],
        "simplified": "Your task is to write a function that returns true if a number x is a simple power of n and false in other cases. x is a simple power of n if n**int=x",
        "task_id": "76",
        "3": "let powerNum = n;\n  let simplePower = true;\n  while(powerNum <= x){\n    if(powerNum === x){\n      simplePower = true;\n      break;\n    }\n    powerNum *= n;\n    simplePower = false;\n  }\n  return simplePower;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "return Math.round(Math.log(x)/Math.log(n)) === Math.log(x)/Math.log(n);\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "}",
        "grade-8": {
            "execution": 0
        },
        "7": "for(let i = 0; i < x; i++){\n        if(Math.pow(n, i) === x){\n            return true;\n        }\n    }\n    return false;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "return Math.log(x) / Math.log(n) % 1 === 0;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "return Math.round(Math.log(x)/Math.log(n)) == Math.log(x)/Math.log(n);\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "let test = Math.log(x) / Math.log(n);\n    return test % 1 === 0;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "for(var i = 1; i <= x; i++){\n        if(n**i === x){\n            return true;\n        }\n    }\n    return false;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "var x_root = Math.sqrt(x);\n  var x_root_int = parseInt(x_root);\n  return Math.pow(n, x_root_int) === x;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "if(x==n){\n        return true;\n    }\n    let product = 0;\n    let i = 2;\n    while(product < x){\n        product = n**i;\n        if(product == x){\n            return true;\n        }\n        i++;\n    }\n    return false;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "return Number.isInteger(Math.log(x)/Math.log(n));\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "return x == Math.pow(n, x.toString().split('').reverse().join(''));\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "let power = Math.log(x) / Math.log(n);\n    return Number.isInteger(power);\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "return Number.isInteger(Math.log2(x) / Math.log2(n));\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "let k = Math.log(x) / Math.log(n);\n    return k.toString().indexOf(\".\") == -1 ? true : false;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "if(n**Math.floor(Math.log(x)/Math.log(n)) == x) return true;\n  return false;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "//your code here\n    return Number.isInteger(Math.log2(x)/Math.log2(n));\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "let count = 0;\n    while(x > 1){\n        x = x / n;\n        count++;\n    }\n    return x === 1 && count === 1 ? true : false;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "return (Math.log(x) / Math.log(n)) % 1 === 0;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "return x === Math.pow(n, Math.log(x) / Math.log(n))\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered lists of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered list of the values on the cells that the minimum path go through.\n// Examples:\n// Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n// Output: [1, 2, 1]\n// Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n// Output: [1]\nfunction minPath(grid, k){\n",
        "snippet": [
            "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n"
        ],
        "simplified": "Given a grid with N rows and N columns (N >= 2) and a positive integer k, each cell of the grid contains a value. Every integer in the range [1, N * N] inclusive appears exactly once on the cells of the grid. You have to find the minimum path of length k in the grid. You can start from any cell, and in each step you can move to any of the neighbor cells, in other words, you can go to cells which share an edge with you current cell. Please note that a path of length k means visiting exactly k cells (not necessarily distinct). You CANNOT go off the grid. A path A (of length k) is considered less than a path B (of length k) if after making the ordered lists of the values on the cells that A and B go through (let's call them lst_A and lst_B), lst_A is lexicographically less than lst_B, in other words, there exist an integer index i (1 <= i <= k) such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have lst_A[j] = lst_B[j]. It is guaranteed that the answer is unique. Return an ordered list of the values on the cells that the minimum path go through.",
        "task_id": "129",
        "0": "var f = function(i, j, d, res){\n        if(d > k || i < 0 || i >= grid.length || j < 0 || j >= grid[0].length) return false;\n        if(d == k) return true;\n        res.push(grid[i][j]);\n        for(var next = 0; next < 4; next++){\n            var a = i + x[next], b = j + y[next];\n            if(f(a, b, d + 1, res)) return true;\n        }\n        res.pop();\n        return false;\n    }\n    var x = [0, 0, 1, -1], y = [1, -1, 0, 0];\n    var res = [];\n    for(var i = 0; i < grid.length; i++){\n        for(var j = 0; j < grid[0].length; j++){\n            var r = [];\n            if(f(i, j, 0, r)) return r;\n        }\n    }\n}",
        "grade-0": {
            "execution": 0
        },
        "1": "let result = [];\n\tlet curr = null;\n\tlet min = Number.MAX_SAFE_INTEGER;\n\tlet r = grid.length;\n\tlet c = grid[0].length;\n\tfor(let i = 0; i < r; i++){\n\t\tfor(let j = 0; j < c; j++){\n\t\t\tlet queue = [];\n\t\t\tlet path = new Set();\n\t\t\tpath.add(`${i},${j}`);\n\t\t\tqueue.push([[i,j], path]);\n\t\t\twhile(queue.length){\n\t\t\t\tlet [ [x,y], path ] = queue.shift();\n\t\t\t\tif(path.size === k){\n\t\t\t\t\tlet lst = [];\n\t\t\t\t\tpath.forEach( el => {\n\t\t\t\t\t\tlst.push(grid[el.split(',')[0]][el.split(',')[1]]);\n\t\t\t\t\t});\n\t\t\t\t\tif(lst < min){\n\t\t\t\t\t\tmin = lst;\n\t\t\t\t\t\tcurr = lst;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(path.size < k){\n\t\t\t\t\tif(x > 0 && !path.has(`${x-1},${y}`)){\n\t\t\t\t\t\tlet newPath = new Set(path);\n\t\t\t\t\t\tnewPath.add(`${x-1},${y}`);\n\t\t\t\t\t\tqueue.push([[x-1,y], newPath]);\n\t\t\t\t\t}\n\t\t\t\t\tif(x < r-1 && !path.has(`${x+1},${y}`)){\n\t\t\t\t\t\tlet newPath = new Set(path);\n\t\t\t\t\t\tnewPath.add(`${x+1},${y}`);\n\t\t\t\t\t\tqueue.push([[x+1,y], newPath]);\n\t\t\t\t\t}\n\t\t\t\t\tif(y > 0 && !",
        "grade-1": {
            "execution": 0
        },
        "2": "if(k === 0) return [];\n  var smallestPath = undefined;\n  for(var i = 0; i < grid.length; i++){\n    for(var j = 0; j < grid[i].length; j++){\n      var newPath = dfs(grid, i, j, k, [grid[i][j]]);\n      if(!smallestPath){\n        smallestPath = newPath;\n      }else{\n        if(lessThan(newPath, smallestPath)){\n          smallestPath = newPath;\n        }\n      }\n    }\n  }\n  return smallestPath;\n}",
        "grade-2": {
            "execution": 0
        },
        "3": "let n = grid.length;\n\tlet width = grid[0].length;\n\tfunction createQueue(path, start){\n\t\treturn new PriorityQueue((a,b)=>{\n\t\t\tlet sumA = (path[a.r] || 0) + a.val;\n\t\t\tlet sumB = (path[b.r] || 0) + b.val;\n\t\t\tif(sumA < sumB){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif(sumA > sumB){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn a.c < b.c;\n\t\t});\n\t}\n\tfunction createResult(path, start){\n\t\tlet result = [];\n\t\tlet current = start;\n\t\twhile(current){\n\t\t\tresult.push(current.val);\n\t\t\tcurrent = path[current.r];\n\t\t}\n\t\treturn result;\n\t}\n\tlet queue = createQueue([],{r:0,c:0,val:grid[0][0]});\n\tfor(let i = 0; i < n; i++){\n\t\tfor(let j = 0; j < width; j++){\n\t\t\tlet current = {r:i,c:j,val:grid[i][j]};\n\t\t\tqueue.push(current);\n\t\t}\n\t}\n\tfor(let i = 0; i < k; i++){\n\t\tlet current = queue.pop();\n\t\tconsole.log(current);\n\t\tif(i === k - 1){\n\t\t\treturn createResult([],current);\n\t\t}\n\t\tif(current.r - 1 >= 0){\n\t\t\tqueue.push({r:current.r - 1,c:current.c,val:grid[current.r - 1][current.c]});\n\t\t}\n\t\tif(current.r + 1 < n){\n\t\t\tqueue.push({r:current.r + 1,c:current.c,val:grid[current.r + 1][current.c]});\n\t\t}\n\t\tif(current.c - 1 >= 0",
        "grade-3": {
            "execution": 0
        },
        "4": "let path = [grid[0][0]];\n    let visited = new Set();\n    visited.add(grid[0][0]);\n    let col = 0;\n    let row = 0;\n    let num = grid[0][0];\n    let minPath = [];\n    let maxNum = Math.max(...grid.flat());\n    for(let i = 1; i < k; i++){\n        visited.add(num);\n        let nums = [\n            num+1,\n            num-1,\n            num-maxNum,\n            num+maxNum\n        ];\n        let min = Infinity;\n        let minIndex = -1;\n        nums.forEach((n, index) => {\n            if(n >= 1 && n <= maxNum){\n                if(!visited.has(n)){\n                    if(n < min){\n                        min = n;\n                        minIndex = index;\n                    }\n                }\n            }\n        });\n        if(minIndex === 0){\n            col++;\n        }\n        if(minIndex === 1){\n            col--;\n        }\n        if(minIndex === 2){\n            row--;\n        }\n        if(minIndex === 3){\n            row++;\n        }\n        path.push(min);\n        num = min;\n    }\n    return path;\n}\nlet grid = [\n    [1,2,3],\n    [4,5,6],\n    [7,8,9]\n];\nlet k = 3;",
        "grade-4": {
            "execution": 0
        },
        "5": "var memo = {};\n\tvar w = grid[0].length;\n\tvar h = grid.length;\n\tvar s = [0,0,1];\n\tvar vis = new Array(h);\n\tfor(var i = 0; i < h; i++){\n\t\tvis[i] = new Array(w);\n\t\tfor(var j = 0; j < w; j++){\n\t\t\tvis[i][j] = 0;\n\t\t}\n\t}\n\tvis[0][0] = 1;\n\tvar result = new Array(k);\n\tresult[0] = grid[0][0];\n\tvar curr;\n\twhile(s.length > 0){\n\t\tcurr = s.pop();\n\t\t// console.log(curr);\n\t\tvar x = curr[0];\n\t\tvar y = curr[1];\n\t\tvar count = curr[2];\n\t\tif(count >= k){\n\t\t\treturn result;\n\t\t}\n\t\tif(x < h-1 && vis[x+1][y] == 0){\n\t\t\tvis[x+1][y] = 1;\n\t\t\ts.push([x+1,y,count+1]);\n\t\t\tif(count == k-1){\n\t\t\t\tresult[count] = grid[x+1][y];\n\t\t\t}\n\t\t}\n\t\tif(x > 0 && vis[x-1][y] == 0){\n\t\t\tvis[x-1][y] = 1;\n\t\t\ts.push([x-1,y,count+1]);\n\t\t\tif(count == k-1){\n\t\t\t\tresult[count] = grid[x-1][y];\n\t\t\t}\n\t\t}\n\t\tif(y < w-1 && vis[x][y+1] == 0){\n\t\t\tvis[x][y+1] = 1;\n\t\t\ts.push([x,y+1,count+1]);\n\t\t\tif(count == k-1){\n\t\t\t\tresult[count] = grid[x][y+1];",
        "grade-5": {
            "execution": 0
        },
        "6": "//if k is 1 return the cell with the lowest value in the grid\n    if(k === 1){\n        let min = Infinity;\n        let minVal = 0;\n        for(let i = 0; i < grid.length; i++){\n            for(let j = 0; j < grid[i].length; j++){\n                if(grid[i][j] < min){\n                    min = grid[i][j];\n                    minVal = min;\n                }\n            }\n        }\n        return [minVal];\n    }\n\n    //loop through the grid and find the first smallest value\n    let min = Infinity;\n    let minCell;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] < min){\n                min = grid[i][j];\n                minCell = [i, j];\n            }\n        }\n    }\n\n    //create a set to keep track of visited cells\n    let visited = new Set();\n    visited.add(minCell.toString());\n\n    //get all the neighbors of the minimum cell\n    let neighbors = getNeighbors(grid, minCell[0], minCell[1]);\n\n    //create a result array to store the path\n    let result = [min];\n\n    //while k > 1 traverse the grid\n    while(k > 1){\n        //create a min variable to keep track of the smallest value\n        let min = Infinity;\n        let minCell;\n        let minVal;\n        //loop through the neighbors\n        for(let cell of neighbors){\n            //if the value of the cell is less than the minimum value and\n            //the cell has not been visited then change the minimum value and cell\n            if(grid[cell[0]][cell[1]] < min && !visited.has(cell.toString())){\n                min = grid[cell[0]][cell[1]];\n                minCell = cell;\n                minVal = min;\n            }\n        }\n        //add the min cell to the set\n        visited.add(minCell.toString());\n        //decrement k",
        "grade-6": {
            "execution": 0
        },
        "7": "if(grid.length < 1 || grid[0].length < 1 || k < 1) return [];\n    let n = grid.length;\n    let m = grid[0].length;\n    let queue = [];\n    let visited = new Array(n);\n    for(let i = 0; i < n; i++){\n        visited[i] = new Array(m).fill(false);\n    }\n    queue.push([0, 0, grid[0][0], [grid[0][0]]]);\n    visited[0][0] = true;\n    while(queue.length > 0){\n        let [i, j, sum, path] = queue.shift();\n        if(sum > k) continue;\n        if(sum === k) return path;\n        for(let [dx, dy] of [[0, 1], [0, -1], [1, 0], [-1, 0]]){\n            let x = i + dx;\n            let y = j + dy;\n            if(x < 0 || x >= n || y < 0 || y >= m || visited[x][y]) continue;\n            visited[x][y] = true;\n            queue.push([x, y, sum + grid[x][y], [...path, grid[x][y]]]);\n        }\n    }\n    return [];\n}",
        "grade-7": {
            "execution": 0
        },
        "8": "//check if k is less than the length of grid squared.\n    //if it is, return an empty array\n    if(k < grid.length * grid.length){\n        return [];\n    }\n\n    //function to create a 2D array\n    function create2DArray(rows, cols){\n        let array = new Array(rows);\n        for(let i = 0; i < rows; i++){\n            array[i] = new Array(cols);\n        }\n        return array;\n    }\n\n    //create a 2D array to store the number of steps required to reach\n    //each cell\n    let steps = create2DArray(grid.length, grid.length);\n\n    //fill the steps array with -1\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid.length; j++){\n            steps[i][j] = -1;\n        }\n    }\n\n    //function to find the next cell\n    function findNextCell(i, j, steps, grid){\n        //create an array to store the next cell\n        let next = [-1, -1];\n        //create a 2D array to store the neighbors of a cell\n        let neighbors = [\n            [-1, 0],\n            [0, 1],\n            [1, 0],\n            [0, -1]\n        ];\n        //set the minimum steps to grid length\n        let min = grid.length;\n        //loop through all the neighbors\n        for(let k = 0; k < neighbors.length; k++){\n            //check if the neighbor is within the grid bounds\n            if(i + neighbors[k][0] >= 0 && i + neighbors[k][0] < grid.length && j + neighbors[k][1] >= 0 && j + neighbors[k][1] < grid.length){\n                //check if the neighbor has not been visited\n                if(steps[i + neighbors[k][0]][j + neighbors[k][1]] == -1){\n                    //if the neighbor has not been visited, check if the current\n                    //cell has a smaller value\n                    if(grid[i][j] < grid[i + neighbors[k][",
        "grade-8": {
            "execution": 0
        },
        "9": "let v_hash = {};\n  let h_hash = {};\n  let min_path = [];\n  let min_sum = Infinity;\n  let N = grid.length;\n  let cells = new Set();\n  let results = [];\n  // check length of grid, if it is not square, return error\n  if (grid.length !== grid[0].length) return 'grid is not square';\n  for (let i = 0; i < N; i++){\n    for (let j = 0; j < N; j++){\n      if (v_hash[i]) v_hash[i].push(grid[i][j]);\n      else v_hash[i] = [grid[i][j]];\n      if (h_hash[j]) h_hash[j].push(grid[i][j]);\n      else h_hash[j] = [grid[i][j]];\n      cells.add(grid[i][j]);\n    }\n  }\n  // helper function to find minimum sum path\n  const dfs = (path, sum, row, col, step) => {\n    if (step === k){\n      if (sum < min_sum){\n        min_sum = sum;\n        min_path = path;\n      }\n      return;\n    }\n    let right = grid[row][col + 1];\n    let down = grid[row + 1][col];\n    if (right && col < N - 1){\n      let nums = v_hash[row].slice(col, col + 2);\n      let new_sum = sum + Math.min(...nums);\n      dfs(path.concat(nums), new_sum, row, col + 1, step + 1);\n    }\n    if (down && row < N - 1){\n      let nums = h_hash[col].slice(row, row + 2);\n      let new_sum = sum + Math.min(...nums);\n      dfs(path.concat(nums), new_sum, row + 1, col, step + 1);\n    }\n  }\n  // iterate through each cell in the grid\n  for (let i = 0; i <",
        "grade-9": {
            "execution": 0
        },
        "10": "}",
        "grade-10": {
            "execution": 0
        },
        "11": "let n = grid.length;\n  let result = [];\n  let visited = [];\n  let minPath = [];\n  let minPathSum = Number.MAX_SAFE_INTEGER;\n  for(let i = 0; i < n; i++){\n    visited.push([]);\n    for(let j = 0; j < n; j++){\n      visited[i].push(false);\n    }\n  }\n  for(let i = 0; i < n; i++){\n    for(let j = 0; j < n; j++){\n      let path = [];\n      path.push(grid[i][j]);\n      visited[i][j] = true;\n      dfs(grid, k, 1, i, j, visited, path, 0);\n      visited[i][j] = false;\n    }\n  }\n  return minPath;\n  function dfs(grid, k, depth, i, j, visited, path, sum){\n    if(depth === k){\n      if(sum < minPathSum){\n        minPathSum = sum;\n        minPath = path.slice();\n      }\n      return;\n    }\n    let dirs = [[0, 1], [0, -1], [1, 0], [-1, 0]];\n    for(let d = 0; d < dirs.length; d++){\n      let newI = i + dirs[d][0];\n      let newJ = j + dirs[d][1];\n      if(newI >= 0 && newI < n && newJ >= 0 && newJ < n && !visited[newI][newJ]){\n        path.push(grid[newI][newJ]);\n        visited[newI][newJ] = true;\n        dfs(grid, k, depth + 1, newI, newJ, visited, path, sum + grid[newI][newJ]);\n        visited[newI][newJ] = false;\n        path.pop();\n      }\n    }\n  }\n}",
        "grade-11": {
            "execution": 0
        },
        "12": "// let seen = new Set()\n    let paths = []\n    let recurse = (row, col, path) => {\n        // console.log(row, col, path, k, grid[row][col])\n        if(k === 0) {\n            // console.log('paths before push', paths)\n            // console.log('paths after push', paths)\n            paths.push(path)\n            return\n        }\n        if(row < 0 || row >= grid.length || col < 0 || col >= grid[0].length) return\n        // if(seen.has(`${row}-${col}`)) return\n        // seen.add(`${row}-${col}`)\n        let temp = grid[row][col]\n        grid[row][col] = -1\n        recurse(row - 1, col, path.concat(temp))\n        recurse(row + 1, col, path.concat(temp))\n        recurse(row, col - 1, path.concat(temp))\n        recurse(row, col + 1, path.concat(temp))\n        grid[row][col] = temp\n    }\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[0].length; j++){\n            recurse(i, j, [])\n        }\n    }\n    paths.sort((a, b) => {\n        for(let i = 0; i < Math.min(a.length, b.length); i++){\n            if(a[i] < b[i]) return -1\n            if(a[i] > b[i]) return 1\n        }\n        return a.length - b.length\n    })\n    // return paths\n    return paths[0]\n}\n\ngrid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3",
        "grade-12": {
            "execution": 0
        },
        "13": "var solution = [[]];\n  var current = 0;\n  var last = 0;\n  while(k > 0){\n    k--;\n    last = current;\n    current = 1 - current;\n    solution[current] = [];\n    for(var i = 0; i < grid.length; i++){\n      for(var j = 0; j < grid[0].length; j++){\n        var minValue = grid[i][j];\n        var minPath = [grid[i][j]];\n        if(i > 0){\n          if(solution[last][(i - 1) * grid[0].length + j][0] < minValue){\n            minValue = solution[last][(i - 1) * grid[0].length + j][0];\n            minPath = solution[last][(i - 1) * grid[0].length + j].slice();\n          }else if(solution[last][(i - 1) * grid[0].length + j][0] === minValue){\n            var newPath = solution[last][(i - 1) * grid[0].length + j].slice();\n            if(lexicographicalCompare(newPath, minPath)){\n              minPath = newPath;\n            }\n          }\n        }\n        if(i < grid.length - 1){\n          if(solution[last][(i + 1) * grid[0].length + j][0] < minValue){\n            minValue = solution[last][(i + 1) * grid[0].length + j][0];\n            minPath = solution[last][(i + 1) * grid[0].length + j].slice();\n          }else if(solution[last][(i + 1) * grid[0].length + j][0] === minValue){\n            var newPath = solution[last][(i + 1) * grid[0].length + j].slice();\n            if(lexicographicalCompare(newPath, minPath)){\n              minPath = newPath;\n            }\n          }\n        }\n        if(j > 0){\n          if(solution[last][i * grid[0].length + j - 1][0] < min",
        "grade-13": {
            "execution": 0
        },
        "14": "let result = []\n    let gridHash = {}\n    for(let r = 0; r < grid.length; r++){\n        for(let c = 0; c < grid[0].length; c++){\n            gridHash[grid[r][c]] = [r, c]\n        }\n    }\n    if(k === 1){\n        return [grid[0][0]]\n    }\n    else if(k === 2){\n        let validNeighbors = checkNeighbors(grid, gridHash[1][0], gridHash[1][1])\n        return findMin(grid, gridHash, validNeighbors, [1], k)\n    }\n    else{\n        let validNeighbors = checkNeighbors(grid, gridHash[1][0], gridHash[1][1])\n        return findMin(grid, gridHash, validNeighbors, [1], k)\n    }\n}",
        "grade-14": {
            "execution": 0
        },
        "15": "var n = grid.length;\n\tvar m = grid[0].length;\n\tvar visited = new Array(n);\n\tfor(var i = 0; i < n; i++){\n\t\tvisited[i] = new Array(m);\n\t\tfor(var j = 0; j < m; j++){\n\t\t\tvisited[i][j] = false;\n\t\t}\n\t}\n\tvar res = [];\n\tvar step = k;\n\tvar dx = [0, 0, 1, -1];\n\tvar dy = [1, -1, 0, 0];\n\tfor(var i = 0; i < n; i++){\n\t\tfor(var j = 0; j < m; j++){\n\t\t\thelper(grid, i, j, step, visited, res, dx, dy);\n\t\t}\n\t}\n\tconsole.log(res);\n\treturn res;\n}",
        "grade-15": {
            "execution": 0
        },
        "16": "//get all valid paths\n  //valid paths have length k\n  //sort the paths with lexicographic\n  //return the first path\n}\nmodule.exports = {minPath}",
        "grade-16": {
            "execution": 0
        },
        "17": "function gridHelper(grid, i, j, N, k, res){\n        if(k === 0){\n            res.push([]);\n            return;\n        }\n        for(let key in grid){\n            gridHelper(grid, key[0], key[1], N, k-1, res);\n        }\n    }\n    var N = grid.length;\n    var res = [];\n    gridHelper(grid, 0, 0, N, k, res);\n    for(let i = 0; i < res.length; i++){\n        for(let j = 0; j < res[i].length; j++){\n            res[i][j] = grid[res[i][j][0]][res[i][j][1]];\n        }\n    }\n    res.sort();\n    return res[0];\n}",
        "grade-17": {
            "execution": 0
        },
        "19": "const values = [];\n  const DFS = (row, col, count) => {\n    if(grid[row][col] === null) return;\n    values.push(grid[row][col]);\n    if(count === k) return;\n    const temp = grid[row][col];\n    grid[row][col] = null;\n    if(row > 0) DFS(row - 1, col, count + 1);\n    if(row < grid.length - 1) DFS(row + 1, col, count + 1);\n    if(col > 0) DFS(row, col - 1, count + 1);\n    if(col < grid[0].length - 1) DFS(row, col + 1, count + 1);\n    grid[row][col] = temp;\n  }\n  for(let i = 0; i < grid.length; i++){\n    for(let j = 0; j < grid[0].length; j++){\n      DFS(i, j, 0);\n      if(values.length === k) return values;\n      values.length = 0;\n    }\n  }\n  return null;\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n",
        "snippet": [
            "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n"
        ],
        "simplified": "From a list of integers, remove all elements that occur more than once. Keep order of elements left the same as in the input.",
        "task_id": "26",
        "3": "let arr = []\n    for(let i = 0; i < numbers.length; i++){\n        if(arr.indexOf(numbers[i]) == -1){\n            arr.push(numbers[i])\n        }\n    }\n    return arr\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "let result = []\n    numbers.forEach(num => {\n        if(result.indexOf(num) === -1){\n            result.push(num)\n        }\n    })\n    return result\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "var result = [];\n    var hash = {};\n    for(var i=0; i<numbers.length; i++){\n        if(hash[numbers[i]] == undefined){\n            hash[numbers[i]] = 1;\n            result.push(numbers[i]);\n        }\n    }\n    return result;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "var output = [];\n    for (var i = 0; i < numbers.length; i++){\n        for (var j = 0; j < numbers.length; j++){\n            if (numbers[i] == numbers[j] && i != j){\n                if (output.indexOf(numbers[i]) == -1){\n                    output.push(numbers[i]);\n                }\n            }\n        }\n    }\n    return output;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "var result = [];\n    for (var i = 0; i < numbers.length; i++){\n        var num = numbers[i];\n        if (result.indexOf(num) === -1){\n            result.push(num);\n        }\n    }\n    return result;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "var number_string = numbers.join('');\n    var dict = {};\n    var result = [];\n    for (var i = 0; i < number_string.length; i++){\n        var n = number_string[i];\n        if (!dict[n]){\n            dict[n] = 1;\n        }\n        else {\n            dict[n] += 1;\n        }\n    }\n    for (var key in dict){\n        if (dict[key] === 1){\n            result.push(key);\n        }\n    }\n    return result;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "let newNumbers = [];\n    for(let i = 0; i < numbers.length; i++){\n        if(numbers.indexOf(numbers[i]) === i){\n            newNumbers.push(numbers[i]);\n        }\n    }\n    return newNumbers;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "for(i=0; i<=numbers.length; i++){\n        for(j=0; j<=numbers.length; j++){\n            if(numbers[i] === numbers[j] && i !== j){\n                numbers.splice(j, 1);\n            }\n        }\n    }\n    return numbers;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "var exists = {},\n        outArr = [],\n        elm;\n\n    for(var i =0; i<numbers.length; i++)\n    {\n        elm = numbers[i];\n        if(!exists[elm])\n        {\n            outArr.push(elm);\n            exists[elm] = true;\n        }\n    }\n    return outArr;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "const uniques = new Set();\n    return numbers.filter(number => {\n        if(uniques.has(number)){\n            return false;\n        }\n        uniques.add(number);\n        return true;\n    });\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "for(var i = 0; i < numbers.length; i++){\n        for(var j = 0; j < numbers.length; j++){\n            if(numbers[i] === numbers[j] && i !== j){\n                numbers.splice(j, 1);\n            }\n        }\n    }\n    return numbers;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "if(!Array.isArray(numbers)){\n        throw \"Input is not an array\";\n    }\n    let found = [];\n    return numbers.filter(function(number){\n        if(found.indexOf(number) === -1){\n            found.push(number);\n            return true;\n        }\n        return false;\n    });\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "const set = new Set(numbers);\n    return [...set];\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "let output = [];\n    for(let i = 0; i < numbers.length; i++){\n        let found = false;\n        for(let j = 0; j < output.length; j++){\n            if(numbers[i] === output[j]){\n                found = true;\n            }\n        }\n        if(!found){\n            output.push(numbers[i]);\n        }\n    }\n    return output;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "let unique_numbers = [];\n    let unique_count = 0;\n    let unique_set = new Set();\n    for(let num of numbers){\n        if(!unique_set.has(num)){\n            unique_numbers[unique_count] = num;\n            unique_count++;\n            unique_set.add(num);\n        }\n    }\n    return unique_numbers;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "var new_array = [];\n  for (var i = 0; i < numbers.length; i++) {\n    if (new_array.indexOf(numbers[i]) === -1) {\n      new_array.push(numbers[i]);\n    }\n  }\n  return new_array;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "let obj = {};\n    let temp = [];\n    numbers.forEach(function(number){\n        if(obj[number] === undefined){\n            obj[number] = number;\n            temp.push(number);\n        }\n    });\n    return temp;\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "var new_numbers = [];\n    for (var i = 0; i < numbers.length; i++){\n        if (new_numbers.indexOf(numbers[i]) < 0){\n            new_numbers.push(numbers[i]);\n        }\n    }\n    return new_numbers;\n}\n\nvar numbers = [1, 2, 3, 2, 4];",
        "grade-14": {
            "execution": 0
        },
        "5": "return numbers.filter((element, index) => numbers.indexOf(element) === index);\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "var unique = [];\n    for (var i = 0; i < numbers.length; i++) {\n        var n = numbers[i];\n        if (unique.indexOf(n) == -1) {\n            unique.push(n);\n        }\n    }\n    return unique;\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(['1234567'])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count(['3',\"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n",
        "snippet": [
            "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n"
        ],
        "simplified": "Given a list of strings, where each string consists of only digits, return a list. Each element i of the output should be \"the number of odd elements in the string i of the input.\" where all the i's should be replaced by the number of odd digits in the i'th string of the input.",
        "task_id": "113",
        "3": "return lst.map(function(v){\n        var c = 0;\n        for(var i=0; i<v.length; i++){\n            if(v[i]%2 != 0){\n                c++;\n            }\n        }\n        return \"the number of odd elements \" + c + \"n the str\" + c + \"ng \" + c + \" of the \" + c + \"nput.\";\n    });\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "var ans = [];\n    for (var i = 0; i < lst.length; i++){\n        var counter = 0;\n        for (var j = 0; j < lst[i].length; j++){\n            if (parseInt(lst[i][j]) % 2 != 0){\n                counter += 1;\n            }\n        }\n        var str = \"the number of odd elements \" + counter + \"n the str\" + i + \"ng \" + i + \" of the \" + i + \"nput.\";\n        ans.push(str);\n    }\n    return ans;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "// your code here\n    let odd_digits = [];\n    for (let str of lst){\n        let str_odd = 0;\n        for (let ch of str){\n            if (parseInt(ch) % 2 !== 0){\n                str_odd++;\n            }\n        }\n        odd_digits.push(str_odd);\n    }\n    let str_arr = [];\n    for (let i = 0; i < lst.length; i++){\n        let str = \"the number of odd elements \" + odd_digits[i] + \"n the str\" + lst[i] + \"ng \" + i + \" of the \" + i + \"nput.\";\n        str_arr.push(str);\n    }\n    return str_arr;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "return lst.map(function(x) {\n    return \"the number of odd elements \" + x.replace(/[^13579]/g, \"\").length + \"n the str\" + x.replace(/[^13579]/g, \"\").length + \"ng \" + x.replace(/[^13579]/g, \"\").length + \" of the \" + x.replace(/[^13579]/g, \"\").length + \"nput.\";\n  });\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "var result = [];\n  var count = 0;\n  var count_odd = 0;\n  for(var i = 0; i < lst.length; i++){\n    var num = lst[i];\n    while(count < num.length){\n      if(Number(num[count]) % 2 !== 0){\n        count_odd += 1;\n      }\n      count += 1;\n    }\n    result.push(\"the number of odd elements \" + count_odd + \"n the str\" + count_odd + \"ng \" + count_odd + \" of the \" + count_odd + \"nput.\");\n    count = 0;\n    count_odd = 0;\n  }\n  return result;\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "return lst.map(function(num_str){\n        var count = 0;\n        for(var i = 0; i < num_str.length; i++){\n            if(parseInt(num_str[i]) % 2 === 1){\n                count++;\n            }\n        }\n        var num_str_array = num_str.split(\"\");\n        for(var i = 0; i < num_str_array.length; i++){\n            if(parseInt(num_str_array[i]) % 2 === 0){\n                num_str_array[i] = \"n\";\n            }\n        }\n        num_str_array[num_str_array.length - 1] = \"t\";\n        num_str_array.unshift(\"e\");\n        num_str_array.splice(2, 0, \"umber\");\n        num_str_array.splice(8, 0, \" \");\n        num_str_array.splice(num_str_array.length - 4, 0, \"the n\");\n        return num_str_array.join(\"\");\n    });\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "return lst.map(function(string){\n    var odd = 0;\n    string.split('').forEach(function(n){\n      if(n % 2 != 0){\n        odd++;\n      }\n    });\n    return \"the number of odd elements \" + odd + \"n the str\" + odd + \"ng \" + odd + \" of the \" + odd + \"nput.\";\n  });\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "var out = [];\n    for (var i = 0; i < lst.length; i++){\n        var current = lst[i];\n        var count = 0;\n        for (var j = 0; j < current.length; j++){\n            if (current[j] % 2 === 1){\n                count++;\n            }\n        }\n        out.push(\"the number of odd elements \" + count + \"n the str\" + i + \"ng \" + i + \" of the \" + i + \"nput.\");\n    }\n    return out;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "var new_lst = [];\n\tfor (var i = 0; i < lst.length; i++){\n\t\tvar word = lst[i];\n\t\tvar count = 0;\n\t\tfor (var j = 0; j < word.length; j++){\n\t\t\tif (word[j]%2 != 0){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tvar string = \"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"nput.\";\n\t\tnew_lst.push(string);\n\t}\n\treturn new_lst;\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "}",
        "grade-17": {
            "execution": 0
        },
        "12": "let count = 0;\n    let output = '';\n    for(let i = 0; i < lst.length; i++){\n        for(let k = 0; k < lst[i].length; k++){\n            if(lst[i][k] % 2 === 1){\n                count++;\n            }\n        }\n        let str = \"the number of odd elements \"+count+\"n the str\"+i+\"ng \"+i+\" of the \"+i+\"nput.\";\n        output += str;\n        count = 0;\n    }\n    return output;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "let newLst = []\n    for(let i = 0; i < lst.length; i++){\n        let oddCt = 0\n        for(let j = 0; j < lst[i].length; j++){\n            if(parseInt(lst[i][j]) % 2 == 1){\n                oddCt++\n            }\n        }\n        newLst.push(`the number of odd elements ${oddCt}n the str${oddCt}ng ${oddCt} of the ${oddCt}nput.`)\n    }\n    return newLst\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "var num = 1;\n  var ans = [];\n  for(var i = 0; i < lst.length; i++){\n    for(var j = 0; j < lst[i].length; j++){\n      var count = 0;\n      var x = parseInt(lst[i][j]);\n      if(x % 2 !== 0){\n        count += 1;\n      }\n    }\n    var str = \"the number of odd elements \" + count + \"n the str\" + num + \"ng \" + num + \" of the \" + num + \"nput.\";\n    ans.push(str);\n    num += 1;\n  }\n  return ans;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "let counter = \"\";\n    let result = [];\n    for(let string of lst){\n        for(let digit of string){\n            if(parseInt(digit) % 2 == 1){\n                counter++;\n            }\n        }\n        result.push(`the number of odd elements ${counter}n the str${counter}ng ${counter} of the ${counter}nput.`);\n        counter = \"\";\n    }\n    return result;\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "let res = [];\n    for (let i = 0; i < lst.length; i++){\n        let counter = 0;\n        for (let j = 0; j < lst[i].length; j++){\n            if (lst[i][j] % 2 === 1){\n                counter += 1;\n            }\n        }\n        res.push(`the number of odd elements ${counter}n the str${counter}ng ${counter} of the ${counter}nput.`);\n    }\n    return res;\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "var result = [];\n  for (var i = 0; i < lst.length; i++){\n    var sub = lst[i].split(\"\");\n    var count = 0;\n    for (var j = 0; j < sub.length; j++){\n      if (sub[j] % 2 == 1){\n        count += 1;\n      }\n    }\n    result.push(\"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"nput.\");\n  }\n  return result;\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "return lst.map(function(n){\n    var num = n.split('').reduce(function(a,b){\n      if(+b % 2){\n        a += +b;\n      }\n      return a;\n    },0);\n    return 'the number of odd elements ' + num + 'n the str' + num + 'ng ' + num + ' of the ' + num + 'nput.';\n  });\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "return lst.map(function(x){\n        var odd = 0;\n        for(var i = 0; i < x.length; i++){\n            if(x[i] % 2 != 0){\n                odd ++;\n            }\n        }\n        return \"the number of odd elements \" + odd + \"n the str\" + odd + \"ng \" + odd + \" of the \" + odd + \"nput.\";\n    });\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "var odds = 0;\n  var new_lst = [];\n  for (var i = 0; i < lst.length; i++){\n    for (var j = 0; j < lst[i].length; j++){\n      if (lst[i][j] % 2 === 1){\n        odds++;\n      }\n    }\n    new_lst.push(\"the number of odd elements \" + odds + \"n the str\" + i + \"ng \" + i + \" of the \" + i + \"nput.\");\n    odds = 0;\n  }\n  return new_lst;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "var arr = [];\n    for(var i = 0; i < lst.length; i++){\n        var num = 0;\n        for(var j = 0; j < lst[i].length; j++){\n            if(parseInt(lst[i][j]) % 2 == 1){\n                num++;\n            }\n        }\n        arr.push(num);\n    }\n    for(var i = 0; i < arr.length; i++){\n        var str = lst[i];\n        var spl = str.split('');\n        for(var j = 0; j < spl.length; j++){\n            if(parseInt(spl[j]) % 2 == 1){\n                spl[j] = arr[i];\n            }\n        }\n        lst[i] = spl.join('');\n    }\n    return lst;\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n",
        "snippet": [
            "  return x + y;\n}\n\n"
        ],
        "simplified": "Add two numbers x and y",
        "task_id": "53",
        "0": "return x + y;\n}",
        "grade-0": {
            "execution": 1
        },
        "1": "}",
        "grade-1": {
            "execution": 0
        },
        "2": "return x + y;\n}",
        "grade-2": {
            "execution": 1
        },
        "3": "//return parseInt(x) + parseInt(y);\n    return parseInt(x) + parseInt(y);\n}",
        "grade-3": {
            "execution": 1
        },
        "5": "return x + y;\n}",
        "grade-5": {
            "execution": 1
        },
        "7": "return x + y;\n}",
        "grade-7": {
            "execution": 1
        },
        "14": "return x + y;\n}",
        "grade-14": {
            "execution": 1
        },
        "16": "if(typeof x === 'number' && typeof y === 'number'){\n\t\treturn x + y;\n\t} else {\n\t\treturn 'Please enter valid numbers.';\n\t}\n}",
        "grade-16": {
            "execution": 1
        }
    },
    {
        "intent": "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome('')\n// ''\n// >>> make_palindrome('cat')\n// 'catac'\n// >>> make_palindrome('cata')\n// 'catac'\nfunction make_palindrome(string){\n",
        "snippet": [
            "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n"
        ],
        "simplified": "Test if given string is a palindrome",
        "task_id": "10",
        "3": "var reverse = string.split('').reverse().join(''),\n        palindrome_postfix_length = 0;\n    while(palindrome_postfix_length < string.length){\n        if(string.substr(0, string.length - palindrome_postfix_length) === reverse.substr(palindrome_postfix_length)){\n            break;\n        }\n        palindrome_postfix_length++;\n    }\n    return string + reverse.substr(palindrome_postfix_length);\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "var left = string.length;\n    var right = string.length;\n    var palindrome = \"\";\n    for(var i = 1; i <= string.length; i++){\n        if(is_palindrome(string.substring(i,string.length))){\n            left = i;\n            break;\n        }\n    }\n    for(var i = string.length - 1; i >= 0; i--){\n        if(is_palindrome(string.substring(0,i))){\n            right = i;\n            break;\n        }\n    }\n    if(left == string.length){\n        palindrome = string;\n    }\n    else if(right == 0){\n        palindrome = reverse(string);\n    }\n    else{\n        palindrome = string.substring(0,right) + reverse(string.substring(left,string.length));\n    }\n    return palindrome;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "if (string.length < 2) return string\n  const last_index = string.length - 1\n  for (let i = string.length - 1; i >= 0; i--){\n    let reverse_index = last_index - i\n    if (string[i] === string[reverse_index]) {\n      if (is_palindrome(string.slice(0, i))) {\n        let prefix = string.slice(0, reverse_index)\n        return string + prefix.split('').reverse().join('')\n      }\n    }\n  }\n  return string\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "//Find the first half of the palindrome.\n    if(string == \"\"){\n        return \"\";\n    }\n    var palindrome = string;\n    var index_at_palindrome = 0;\n    var found_palindrome = false;\n    while(!found_palindrome){\n        var one_half_of_palindrome = palindrome.substring(0,index_at_palindrome);\n        var reverse_of_one_half_of_palindrome = reverse(one_half_of_palindrome);\n        if(palindrome.endsWith(reverse_of_one_half_of_palindrome)){\n            found_palindrome = true;\n        }\n        else{\n            index_at_palindrome++;\n        }\n    }\n    var string_before_palindrome = string.substring(0,index_at_palindrome);\n    var reverse_of_string_before_palindrome = reverse(string_before_palindrome);\n    return string + reverse_of_string_before_palindrome;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "var reversed_string = string.split('').reverse().join('');\n    var min_length = string.length;\n    var prefix = '';\n    var suffix = '';\n    var longest_match = 0;\n    for (var i = 0; i < min_length; i++) {\n        var substring = string.substring(0, min_length - i);\n        if (reversed_string.indexOf(substring) === 0) {\n            longest_match = substring.length;\n            suffix = substring;\n            prefix = string.substring(longest_match);\n            break;\n        }\n    }\n    return prefix + suffix + reversed_string.substring(longest_match);\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "var longest_palindrome = longest_palindrome_postfix(string);\n    var palindrome_prefix = string.substring(0, string.length - longest_palindrome.length);\n    return string + reverse(palindrome_prefix);\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "var palindrome_postfix = get_palindrome_postfix(string);\n    var prefix = string.substring(0,string.length-palindrome_postfix.length);\n    return string + reverse(prefix);\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "// make the string palindromic - a string that's the same forwards and backwards\n  if(!string.length) return string;\n\n  // Find the longest palindromic postfix.\n  var palindrome_reversed = '';\n  for(var i = string.length - 1; i >= 0; i--){\n    // as we decrease i, test if the string ends in a palindrome\n    if(is_palindrome(string.substring(i))){\n      // we found a palindrome\n      palindrome_reversed = string.substring(i).split('').reverse().join('');\n      break;\n    }\n  }\n\n  // return the string with a reversed prefix appended to the end\n  return string + palindrome_reversed;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "var palindrome_end = 0;\n    var index = 0;\n    var copy = string;\n    var palindrome = \"\";\n    for(var i = 1; i < string.length; i++){\n        //If string[i] is equal to string[0]\n        if(string[i] == string[0]){\n            //Concatenate both characters to a new string\n            var new_string = string[0] + string[i];\n            //Check if new_string is a palindrome\n            if(check_palindrome(new_string)){\n                //If it is a palindrome, replace old palindrome_end with new one.\n                palindrome_end = i;\n            }\n        }\n    }\n    //Keep adding characters to palindrome to prepare it for final return.\n    while(index < string.length){\n        if(index < palindrome_end){\n            palindrome += string[index];\n        }else{\n            palindrome += string[string.length - 1 - index];\n        }\n        index += 1;\n    }\n    return palindrome;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "var tstring = string.substring(0, string.length/2);\n    var rtstring = tstring.split(\"\").reverse().join(\"\");\n    var suffix = string.substring(tstring.length, string.length);\n    var palindrome = string + rtstring;\n    if (suffix == rtstring) {\n        return palindrome;\n    }\n    for (var i = 0; i < tstring.length; i++) {\n        var tword = tstring.substring(0, tstring.length - i);\n        if (tword == rtstring.substring(i, rtstring.length)) {\n            return string + rtstring.substring(0, i) + rtstring;\n        }\n    }\n    return palindrome;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "if(string === ''){\n        return '';\n    }\n    var palindrome = string;\n    while(true){\n        if(is_palindrome(palindrome)){\n            break;\n        }\n        palindrome = palindrome.slice(0, palindrome.length - 1);\n    }\n    var prefix = string.slice(palindrome.length, string.length);\n    var reverse_prefix = prefix.split('').reverse().join('');\n    return string + reverse_prefix;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "var new_string = \"\";\n    var i = string.length;\n    var pal_length = 0;\n    for(i; i>0; i--){\n        for(j=0; j<i; j++){\n            if(string[j] === string[i-1]){\n                pal_length += 1;\n            }\n            else {\n                break;\n            }\n        }\n        if(pal_length === i){\n            break;\n        }\n        else {\n            pal_length = 0;\n        }\n    }\n    new_string = string + string.slice(pal_length).split(\"\").reverse().join(\"\");\n    return new_string;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "var longest_palindrome_postfix = longest_palindrome_postfix(string);\n    return string + reverse(string.substring(0, string.length - longest_palindrome_postfix.length));\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "if(string == \"\")\n    return \"\";\n  string += '^';\n  var first_half = string;\n  var second_half = string.split(\"\").reverse().join(\"\");\n  var z = compute_z(first_half+second_half);\n  var end = find_max(z);\n  var prefix = first_half.slice(0,first_half.length-end-1);\n  return first_half + prefix.split(\"\").reverse().join(\"\");\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "// Check if the supplied string is a palindrome.\n  if (is_palindrome(string)){\n    return string;\n  }\n  // Find the longest suffix that is a palindrome.\n  var palindrome_length = 0;\n  var last_index = string.length - 1;\n  for (var i = 0; i < last_index; i++){\n    var string_length = last_index - i + 1;\n    var prefix = string.substring(0, string_length);\n    if (is_palindrome(prefix)){\n      palindrome_length = string_length;\n      break;\n    }\n  }\n  // Append to the end of the string reverse of the prefix that comes before the palindromic suffix.\n  var prefix = string.substring(0, last_index - palindrome_length + 1);\n  var reverse_prefix = reverse(prefix);\n  var result = string + reverse_prefix;\n  return result;\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "// sanity checks\n    if (string.length == 0){\n        return '';\n    }\n\n    // search for the palindromic suffix\n    var suffix = string.length;\n    while (suffix > 0 && string.substring(0, suffix) != string.substring(string.length - suffix, string.length).split('').reverse().join('')){\n        suffix -= 1;\n    }\n\n    // compute the string prefix that comes before the palindromic suffix\n    var prefix = string.substring(0, string.length - suffix);\n\n    // reverse the string prefix\n    prefix = prefix.split('').reverse().join('');\n\n    // concatenate the string prefix and the original string\n    return prefix + string;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "var length = string.length;\n    if(length < 2){\n        return string;\n    }\n    if(string === string.split('').reverse().join('')){\n        return string;\n    }\n    var i;\n    var palindrome = [];\n    for(i = 0; i < length; i++){\n        palindrome.push(string[i]);\n        var reversed = palindrome.slice(0).reverse();\n        var joined = palindrome.concat(reversed);\n        var joined_string = joined.join('');\n        if(joined_string === joined_string.split('').reverse().join('')){\n            return joined_string;\n        }\n    }\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "function is_palindrome(string){\n\t\tvar is_palindrome = true;\n\t\tfor(var i = 0; i < string.length/2; i++){\n\t\t\tif(string[i] != string[string.length - 1 - i]){\n\t\t\t\tis_palindrome = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn is_palindrome;\n\t}\n\tvar suffix = \"\";\n\tfor(var i = string.length; i >= 0; i--){\n\t\tif(is_palindrome(string.substring(i))){\n\t\t\tsuffix = string.substring(i);\n\t\t\tbreak;\n\t\t}\n\t}\n\tvar prefix = string.substring(0, string.length - suffix.length);\n\tvar result = \"\";\n\tfor(var i = prefix.length - 1; i >= 0; i--){\n\t\tresult += prefix[i];\n\t}\n\treturn string + result;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "string = string.toLowerCase();\n    if(!is_palindrome(string)){\n        return string + reverse(string.substring(0, longest_postfix_palindrome(string)+1));\n    }\n    return string;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "var longest = find_largest_palindrome(string)\n  var prefix = string.substring(0, longest.start)\n  return prefix + string + reverse_string(prefix)\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//Given a list of numbers, return the sum of squares of the numbers\n// in the list that are odd. Ignore numbers that are negative or not integers.\n// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1, -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0]) == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n",
        "snippet": [
            "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n"
        ],
        "simplified": "Given a list of numbers, return the sum of squares of the numbers in the list that are odd. Ignore numbers that are negative or not integers. If the input list is empty, return 0.",
        "task_id": "151",
        "3": "if (lst.length === 0) return 0;\n    var sum_of_squares = 0;\n    for (var i = 0; i < lst.length; i++){\n        if (lst[i] % 2 === 1 && lst[i] >= 0 && lst[i] % 1 === 0){\n            sum_of_squares += Math.pow(lst[i], 2);\n        }\n    }\n    return sum_of_squares;\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "let sum=0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] % 2 !== 0 && lst[i] > 0 && lst[i] % 1 === 0){\n            sum += Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] % 2 == 1){\n            sum += Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "var sum = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(lst[i] % 2 != 0 && lst[i] > 0 && lst[i] === parseInt(lst[i])){\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "var squareSum = 0;\n    if(lst.length === 0){\n        return 0;\n    }\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] % 2 !== 0 && lst[i] >= 0 && lst[i] % 1 === 0){\n            squareSum += lst[i] * lst[i];\n        }\n    }\n    return squareSum;\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "var sum = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(lst[i] % 2 == 1){\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] % 2 != 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "var total = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(lst[i] % 2 == 1){\n      total += lst[i] * lst[i];\n    }\n  }\n  return total;\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "// Write your code here\n    if(lst.length < 1){\n        return 0;\n    }\n    else{\n        return lst.map(x => is_odd(x) ? Math.pow(x, 2) : 0).reduce((x, y) => x + y, 0);\n    }\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] % 2 != 0){\n            if(lst[i] >= 0){\n                sum += lst[i] ** 2;\n            }\n        }\n    }\n    return sum;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "let sum_squares = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (typeof lst[i] === 'number' && lst[i] % 2 != 0 && lst[i] >= 0) {\n            sum_squares += lst[i] ** 2;\n        }\n    }\n    return sum_squares;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "var sum = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(lst[i] % 2 == 1 && lst[i] > 0){\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "// Fill this in.\n  var odd_list = [];\n  for (var i = 0; i < lst.length; i++) {\n      if (typeof lst[i] === 'number' && lst[i] > 0 && lst[i] % 2 === 1) {\n          odd_list.push(lst[i]);\n      }\n  }\n  console.log(odd_list);\n  if (odd_list.length === 0) {\n      return 0;\n  }\n  var sum = 0;\n  for (var j = 0; j < odd_list.length; j++) {\n      sum += odd_list[j] * odd_list[j];\n  }\n  return sum;\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "}",
        "grade-15": {
            "execution": 0
        },
        "13": "var new_lst = [];\n  for(var i = 0; i < lst.length; i++){\n    if(lst[i] % 2 == 1){\n      new_lst.push(lst[i] * lst[i]);\n    }\n  }\n  return new_lst.reduce(function(a, b){return a + b;});\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "var lst = []\n    if(lst.length == 0){\n        return 0\n    }\n    var oddList = lst.filter(function(num){\n        return (num % 2 != 0) && (num > 0) && (Number.isInteger(num))\n    })\n    var doubleDifference = oddList.map(function(x){\n        return x * x\n    })\n    var total = doubleDifference.reduce(function(x,y){\n        return x + y\n    })\n    return total\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] % 2 == 1){\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "if (lst.length == 0) {\n        return 0;\n    }\n    sum = 0;\n    for (var i = 0; i < lst.length; i++) {\n        if (typeof lst[i] == \"number\" && lst[i] >= 0 && lst[i] % 2 != 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "return lst.reduce((acc,v)=>(v%2==1&&Number.isInteger(v)&&v>0?acc+v*v:acc),0);\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "return (lst.length == 0) ? 0 : lst.map(n => (typeof n === 'number' && (n >= 0) && (n % 1 === 0)) ? Math.pow(n, 2) : 0).reduce((prev, curr) => prev + curr);\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") = \"#A@c\"\nfunction solve(s){\n",
        "snippet": [
            "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n"
        ],
        "simplified": "You are given a string s. if s[i] is a letter, reverse its case from lower to upper or vise versa, otherwise keep it as it is. If the string contains no letters, reverse the string. The function should return the resulted string.",
        "task_id": "161",
        "3": "let str = \"\";\n    for(let i = 0; i < s.length; i++){\n      if(s[i] == s[i].toUpperCase()){\n        str += s[i].toLowerCase();\n      } else if(s[i] == s[i].toLowerCase()){\n        str += s[i].toUpperCase();\n      } else {\n        str += s[i];\n      }\n    }\n    return str;\n  }\n  console.log(solve(\"1234\"));\n  console.log(solve(\"ab\"));\n  console.log(solve(\"#a@C\"));\n  console.log(solve(\"#a@C.dE\"));",
        "grade-3": {
            "execution": 0
        },
        "0": "let str='';\n    for(let i=0;i<s.length;i++){\n        if((s[i]>='a' && s[i]<='z') || (s[i]>='A' && s[i]<='Z')){\n            str+=s[i].toUpperCase()\n        }else{\n            str+=s[i]\n        }\n    }\n    return str\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "return s.split('').map(e => e.charCodeAt() >=97 && e.charCodeAt() <= 122 ? String.fromCharCode(e.charCodeAt() - 32) : e.charCodeAt() >= 65 && e.charCodeAt() <= 90 ? String.fromCharCode(e.charCodeAt() + 32) : e).join('');\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "if(s.match(/[a-z]/i))\n    {\n        return s.split('').map(x => /[a-z]/i.test(x) ? (x.toUpperCase() === x ? x.toLowerCase() : x.toUpperCase()) : x).join('');\n    }\n    else{\n        return s.split('').reverse().join('');\n    }\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "return s.split('').map(el => el.charCodeAt(0) >= 97 && el.charCodeAt(0) <= 122 ? el.toUpperCase() : el.toLowerCase()).join('');\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "let tempStr = '';\n  for (let index = 0; index < s.length; index++) {\n    if(s[index] == s[index].toUpperCase()){\n      tempStr += s[index].toLowerCase();\n    }else{\n      tempStr += s[index].toUpperCase();\n    }\n  }\n  return tempStr.split('').reverse().join('');\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "if(s.match(/[a-z]/ig)){\n        return s.split('').map(v => v.match(/[a-z]/i) ? v === v.toUpperCase() ? v.toLowerCase() : v.toUpperCase() : v).join('');\n    }else{\n        return s.split('').reverse().join('');\n    }\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "let reverseCase = s.split('').map(i => {\n    if(i.toLowerCase() === i) return i.toUpperCase();\n    else if(i.toUpperCase() === i) return i.toLowerCase();\n    else return i;\n  }).join('');\n  if(!isNaN(reverseCase)) reverseCase = reverseCase.split('').reverse().join('');\n  return reverseCase;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "let isLowerCase = s.toLowerCase() == s;\nreturn isLowerCase ? s.toUpperCase() : s.toLowerCase();\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "return s.split('').map(x => x.match(/[a-z]/i) ? x == x.toUpperCase() ? x.toLowerCase() : x.toUpperCase() : x).join('');\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "return s.replace(/([a-z])|([A-Z])/g, function(match,p1,p2) {\n    return p1 ? match.toUpperCase() : match.toLowerCase();\n  }).split('').reverse().join('');\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "let res = [];\n  for (let i=0; i<s.length; i++) {\n    let letter = s[i];\n    if (/[a-z]/.test(letter)) {\n      res.push(letter.toUpperCase());\n    } else if (/[A-Z]/.test(letter)) {\n      res.push(letter.toLowerCase());\n    } else {\n      res.push(letter);\n    }\n  }\n  return res.join('');\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "let nums = /\\d/;\n  let arr = s.split('');\n  let newArr = [];\n  let answer = '';\n  for(let i = 0; i < arr.length; i++){\n    if(nums.test(arr[i])){\n      newArr.push(arr[i]);\n    }\n  }\n  if(newArr.length === arr.length){\n    for(let i = arr.length - 1; i >= 0; i--){\n      answer += arr[i];\n    }\n    return answer;\n  }\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] === arr[i].toUpperCase()){\n      arr[i] = arr[i].toLowerCase();\n    } else {\n      arr[i] = arr[i].toUpperCase();\n    }\n  }\n  return arr.join('');\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "return s.split('').reverse().map(x => x.toLowerCase() != x ? x.toUpperCase() : x.toLowerCase()).join('');\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "//..\n  return !/[a-z]/i.test(s) ? s.split('').reverse().join('') : s.split('').map(v => /[a-z]/i.test(v) ? v.toUpperCase() == v ? v.toLowerCase() : v.toUpperCase() : v).join('');\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "if(s.length == 0) return '';\n  let result = '';\n  for(let i = 0; i < s.length; i++){\n    if(s[i] == s[i].toUpperCase()){\n      result += s[i].toLowerCase();\n    }else if(s[i] == s[i].toLowerCase()){\n      result += s[i].toUpperCase();\n    }else{\n      result += s[i];\n    }\n  }\n  return result;\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "let sArr = s.split('');\n  let ans = \"\";\n  for(let char of sArr){\n    if(char !== char.toLowerCase()){\n      ans+=char.toLowerCase();\n    } else if(char !== char.toUpperCase()){\n      ans+=char.toUpperCase();\n    } else {\n      ans+=char;\n    }\n  }\n  if(ans == s){\n    return s.split('').reverse().join('');\n  }\n  return ans;\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "var result = s.split('').map(function(x){\n    if (x.toLowerCase() === x.toUpperCase()) {\n      return x;\n    }\n    if (x === x.toLowerCase()) {\n      return x.toUpperCase();\n    }\n    if (x === x.toUpperCase()) {\n      return x.toLowerCase();\n    }\n  }).join('');\n  return result;\n}\nsolve(\"ab\");",
        "grade-14": {
            "execution": 0
        },
        "5": "if(s.match(/[a-z]/ig))\n        return s.split('').map(e => {\n            if(e === e.toUpperCase())\n                return e.toLowerCase();\n            else\n                return e.toUpperCase();\n        }).join('');\n    else\n        return s.split('').reverse().join('');\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "//code\n    if(s.length === 0){\n        return \"\";\n    }\n    else{\n        let firstHalf = \"\";\n        let secondHalf = \"\";\n        let midOfString = s.length / 2;\n        for(let i = 0; i < s.length; i++){\n            if(i < midOfString){\n                firstHalf += s[i];\n            }\n            else{\n                secondHalf += s[i];\n            }\n        }\n        let result = \"\";\n        for(let i = secondHalf.length - 1; i >= 0; i--){\n            result += secondHalf[i];\n        }\n        return result + firstHalf;\n    }\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n",
        "snippet": [
            "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n"
        ],
        "simplified": "Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit. Note: Returned list should be sorted in increasing order.",
        "task_id": "104",
        "3": "var counter = 0;\n  var result = [];\n  for(var i = 0; i < x.length; i++){\n    for(var j = 0; j < x[i].toString().length; j++){\n      if(x[i].toString()[j] % 2 === 0){\n        counter++;\n      }\n    }\n    if(counter === 0){\n      result.push(x[i]);\n    }\n    counter = 0;\n  }\n  return result.sort();\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "var evens = [];\n  for (var i = 0; i < x.length; i++) {\n    if (x[i] % 2 !== 0) {\n      evens.push(x[i]);\n    }\n  }\n  return evens;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "for(i=0; i<10; i++){\n        if(x[i]%2 != 0){\n            return x;\n        }\n    }\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "let res = [];\n    for(let i = 0; i < x.length; i++){\n        let num = x[i];\n        let isEven = false;\n        while(num > 0){\n            if(num % 2 == 0){\n                isEven = true;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if(!isEven){\n            res.push(x[i]);\n        }\n    }\n    return res.sort((a, b) => a - b);\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "// Write your code here\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "var ret = [];\n\tvar i = 0;\n\tvar j = 0;\n\tvar k = 0;\n\tvar count = 0;\n\tvar even = false;\n\tvar len = x.length;\n\tvar len2 = 0;\n\tvar len3 = 0;\n\tvar temp = 0;\n\tfor(i = 0; i < len; i++){\n\t\tcount = 0;\n\t\teven = false;\n\t\tlen2 = 0;\n\t\ttemp = x[i];\n\t\twhile(temp > 0){\n\t\t\ttemp = temp/10;\n\t\t\tlen2++;\n\t\t}\n\t\tfor(j = 0; j < len2; j++){\n\t\t\ttemp = x[i]%10;\n\t\t\tif(temp%2 === 0){\n\t\t\t\teven = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tx[i] = x[i]/10;\n\t\t}\n\t\tif(even === false){\n\t\t\tret.push(x[i]);\n\t\t}\n\t}\n\tlen3 = ret.length;\n\tfor(i = 0; i < len3; i++){\n\t\tfor(j = 0; j < len3; j++){\n\t\t\tif(ret[i] < ret[j]){\n\t\t\t\ttemp = ret[i];\n\t\t\t\tret[i] = ret[j];\n\t\t\t\tret[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn ret;\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "var result = [];\n  var resultEven = [];\n  for(var i = 0; i < x.length; i++){\n    if(x[i] % 2 === 0){\n      resultEven.push(x[i]);\n    }\n    else{\n      result.push(x[i]);\n    }\n  }\n  return result;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "var i = 0;\n    var is_in = false;\n    var new_x = [];\n    var count = 0;\n    while(i < x.length){\n        count = 0;\n        while(count < x[i].toString().length){\n            if(x[i].toString()[count] % 2 === 0){\n                is_in = true;\n            }\n            count += 1;\n        }\n        if(is_in === false){\n            new_x.push(x[i]);\n        }\n        is_in = false;\n        i += 1;\n    }\n    new_x.sort(function(a, b){return a-b});\n    return new_x;\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "var odds = [];\n    for(i = 0; i < x.length; i++){\n        var digits = x[i].toString().split('');\n        for(j = 0; j < digits.length; j++){\n            if(digits[j] % 2 === 0){\n                break;\n            }\n            if(j === digits.length - 1){\n                odds.push(x[i]);\n            }\n        }\n    }\n    return odds.sort(function(a, b){return a - b});\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "var unique =[];\n    for(var i=0; i<x.length; i++){\n        var str = x[i].toString();\n        var flag = true;\n        for(var j=0; j<str.length; j++){\n            if(str[j]%2 == 0){\n                flag = false;\n                break;\n            }\n        }\n        if(flag){\n            unique.push(x[i]);\n        }\n    }\n    return unique.sort();\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "let a = [];\n     x.forEach(function(v){\n          if(a.indexOf(v)===-1 && v.toString().split('').every(function(m){\n               return m%2!==0;\n          })){\n               a.push(v);\n          }\n     });\n     return a.sort(function(x,y){\n          return x-y;\n     });\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "var y = [];\n\tfor (var i = 0; i < x.length; i++) {\n\t\tvar n = x[i].toString();\n\t\tif (n.length > 1){\n\t\t\tif (n.includes(\"2\") || n.includes(\"4\") || n.includes(\"6\") || n.includes(\"8\") || n.includes(\"0\")){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse {\n\t\t\t\ty.push(n);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (n == \"2\" || n == \"4\" || n == \"6\" || n == \"8\" || n == \"0\"){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse {\n\t\t\t\ty.push(n);\n\t\t\t}\n\t\t}\n\t}\n\treturn y;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "var y = [];\n    for (var i = 0; i < x.length; i++){\n        var found = false;\n        var num = x[i].toString();\n        for (var j = 0; j < num.length; j++){\n            if (num[j] == \"2\" || num[j] == \"4\" || num[j] == \"6\" || num[j] == \"8\" || num[j] == \"0\"){\n                found = true;\n            }\n        }\n        if (found == false){\n            y.push(x[i]);\n        }\n    }\n    return y;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "var output = [];\n  for (var i = 0; i < x.length; i++) {\n    var numString = x[i].toString();\n    var even_count = 0;\n    for (var j = 0; j < numString.length; j++) {\n      if (numString[j] % 2 === 0) {\n        even_count++;\n      }\n    }\n    if (even_count === 0) {\n      output.push(x[i]);\n    }\n  }\n  return output.sort(function(a, b){return a-b});\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "return x.filter(function(x){\n    return !x.toString().split('').some(function(x){\n      return x % 2 === 0;\n    });\n  });\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "function digits(n){\n\t\treturn n.toString().split('');\n\t}\n\tfunction unique(n){\n\t\tvar unique = true;\n\t\tvar d = digits(n);\n\t\tfor(var i = 0; i < d.length; i++){\n\t\t\tif(d[i] % 2 === 0){\n\t\t\t\tunique = false;\n\t\t\t}\n\t\t}\n\t\treturn unique;\n\t}\n\tfunction onlyUnique(value, index, self) { \n    \treturn self.indexOf(value) === index;\n\t}\n\tvar u = x.filter(unique);\n\treturn u.filter(onlyUnique).sort(function(a, b){return a-b});\n}",
        "grade-9": {
            "execution": 1
        },
        "4": "var unique = [];\n    for(i = 0; i < x.length; i++){\n        var num = x[i].toString();\n        for(j = 0; j < num.length; j++){\n            if(num[j] % 2 == 0){\n                break;\n            }\n            if(j == num.length - 1){\n                unique.push(num);\n            }\n        }\n    }\n    if(unique.length == 0){\n        return unique;\n    }\n    else{\n        return unique.sort();\n    }\n}",
        "grade-4": {
            "execution": 0
        },
        "14": "// write your code here\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "let y = [];\n  let i = 0;\n  while (i < x.length){\n    if (x[i].toString().split('').filter(num => num % 2 === 0).length === 0){\n      y.push(x[i]);\n    }\n    i++;\n  }\n  return y.sort(function(a, b){return a-b});\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "return x.filter(function(a){\n        return a.toString().split('').every(function(b){\n            return b % 2 === 1;\n        });\n    });\n}",
        "grade-19": {
            "execution": 0
        }
    },
    {
        "intent": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n",
        "snippet": [
            "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n"
        ],
        "simplified": "Given a string representing a space separated lowercase letters, return a dictionary of the letter with the most repetition and containing the corresponding count. If several letters have the same occurrence, return all of them.",
        "task_id": "111",
        "3": "var output = {};\n    var testArr = test.split(\" \");\n    for(var i = 0; i < testArr.length; i++){\n        if(output[testArr[i]] == undefined){\n            output[testArr[i]] = 1;\n        }\n        else{\n            output[testArr[i]]++;\n        }\n    }\n    return output;\n}",
        "grade-3": {
            "execution": 0
        },
        "0": "var testArr = test.split(\" \");\n  var results = {};\n  for(var i = 0; i < testArr.length; i++){\n    if(results[testArr[i]]){\n      results[testArr[i]]++;\n    } else {\n      results[testArr[i]] = 1;\n    }\n  }\n  return results;\n}",
        "grade-0": {
            "execution": 0
        },
        "8": "//Split the string into array of chars\n    let arr = test.split(' ');\n    let ocurrence = {};\n\n    //Go through each char and add it to ocurrence object if it doesn't exist, or increment the count if it does\n    for(let i = 0; i < arr.length; i++){\n        if(!ocurrence[arr[i]]){\n            ocurrence[arr[i]] = 1;\n        }else{\n            ocurrence[arr[i]] += 1;\n        }\n    }\n\n    let maxValue = Math.max(...Object.values(ocurrence));\n    let maxKeys = [];\n\n    //Add to maxKeys all keys whose values are the same as maxValue\n    for(let key in ocurrence){\n        if(ocurrence[key] === maxValue){\n            maxKeys.push(key);\n        }\n    }\n\n    //Go through maxKeys and delete every key that is not a maxKey\n    for(let key in ocurrence){\n        if(!maxKeys.includes(key)){\n            delete ocurrence[key];\n        }\n    }\n\n    return ocurrence;\n}",
        "grade-8": {
            "execution": 0
        },
        "7": "let count = 0;\n    let key = '';\n    let object = {};\n    let array = test.split(' ');\n    for(let i = 0; i < array.length; i++){\n        for(let j = 0; j < array.length; j++){\n            if(array[i] === array[j]){\n                count++;\n            }\n        }\n        if(count > 1){\n            object[array[i]] = count;\n        }\n        count = 0;\n    }\n    return object;\n}",
        "grade-7": {
            "execution": 0
        },
        "16": "var main = test.split(\" \");\n    var result = [];\n    var recc = {};\n    main.forEach(\n        function(i){\n            if(i in recc){\n                recc[i] = recc[i] + 1;\n            }\n            else{\n                recc[i] = 1;\n            }\n        }\n    );\n    var max = 0;\n    for(var key in recc){\n        if(recc[key] > max){\n            max = recc[key];\n        }\n    }\n    for(var key in recc){\n        if(recc[key] == max){\n            result.push(key);\n        }\n    }\n    var result1 = {};\n    result.forEach(\n        function(i){\n            result1[i] = max;\n        }\n    );\n    return result1;\n}",
        "grade-16": {
            "execution": 0
        },
        "2": "let testArr = test.split(' ');\n    let map = new Map();\n    for(let i = 0; i < testArr.length; i++){\n        if(map.has(testArr[i])){\n            map.set(testArr[i], map.get(testArr[i]) + 1);\n        } else {\n            map.set(testArr[i], 1);\n        }\n    }\n    let keys = map.keys();\n    let vals = map.values();\n    let maxKey = '';\n    let maxVal = 0;\n    let maxKeys = [];\n    for(let i = 0; i < map.size; i++){\n        if(vals.next().value > maxVal){\n            maxKey = keys.next().value;\n            maxVal = vals.next().value;\n            maxKeys = [maxKey];\n        } else if(vals.next().value === maxVal){\n            maxKeys.push(keys.next().value);\n        }\n    }\n    return {[maxKey]: maxVal};\n}",
        "grade-2": {
            "execution": 0
        },
        "11": "let stor = {};\n  let max = 0;\n  let final = {};\n  test.split(' ').forEach(char => {\n    if (stor[char]){\n      stor[char] += 1;\n    }\n    else {\n      stor[char] = 1;\n    }\n  });\n  for (let key in stor){\n    if (stor[key] > max){\n      max = stor[key];\n    }\n  }\n  for (let key in stor){\n    if (stor[key] === max){\n      final[key] = max;\n    }\n  }\n  return final;\n}",
        "grade-11": {
            "execution": 0
        },
        "1": "let words = test.split(' ');\n    let word_count = {};\n    for(let i = 0; i < words.length; i++){\n        if(word_count[words[i]]){\n            word_count[words[i]] += 1;\n        }else{\n            word_count[words[i]] = 1;\n        }\n    }\n    let result = {};\n    let max = 0;\n    for(let j in word_count){\n        if(word_count[j] > max){\n            max = word_count[j];\n        }\n    }\n    for(let k in word_count){\n        if(word_count[k] === max){\n            result[k] = max;\n        }\n    }\n    return result;\n}",
        "grade-1": {
            "execution": 0
        },
        "10": "let char_dict = {};\n    let max_cnt = 0;\n    let max_cnt_chars = [];\n    let test_array = test.split(' ');\n    for (let i = 0; i < test_array.length; i++){\n        if (char_dict[test_array[i]] === undefined){\n            char_dict[test_array[i]] = 1;\n        } else {\n            char_dict[test_array[i]]++;\n        }\n        if (char_dict[test_array[i]] > max_cnt){\n            max_cnt = char_dict[test_array[i]];\n            max_cnt_chars = [test_array[i]];\n        } else if (char_dict[test_array[i]] === max_cnt){\n            max_cnt_chars.push(test_array[i]);\n        }\n    }\n    let result = {};\n    for (let i = 0; i < max_cnt_chars.length; i++){\n        result[max_cnt_chars[i]] = max_cnt;\n    }\n    return result;\n}",
        "grade-10": {
            "execution": 0
        },
        "17": "let testArr = test.split(' ');\n  let myObj = {};\n  let myArr = [];\n  let myCount = 0;\n  for(let i = 0; i < testArr.length; i++){\n    if(!myObj[testArr[i]]){\n      myObj[testArr[i]] = 1;\n    } else {\n      myObj[testArr[i]] += 1;\n    }\n  }\n  for(let key in myObj){\n    if(myObj[key] > myCount){\n      myCount = myObj[key];\n    }\n  }\n  for(let key in myObj){\n    if(myObj[key] === myCount){\n      myArr.push(key);\n    }\n  }\n  for(let i = 0; i < myArr.length; i++){\n    myObj[myArr[i]] = myCount;\n  }\n  for(let key in myObj){\n    if(myObj[key] !== myCount){\n      delete myObj[key];\n    }\n  }\n  return myObj;\n}",
        "grade-17": {
            "execution": 0
        },
        "12": "let dict = {};\n  let splitted = test.split(' ');\n  for (let i = 0; i < splitted.length; i++){\n    if (splitted[i] in dict){\n      dict[splitted[i]] += 1;\n    } else {\n      dict[splitted[i]] = 1;\n    }\n  }\n  return dict;\n}",
        "grade-12": {
            "execution": 0
        },
        "6": "var histogram = {};\n    var max = 0;\n    test.split(\" \").forEach(function(letter){\n        if(histogram[letter]){\n            histogram[letter] = histogram[letter] + 1;\n        }else{\n            histogram[letter] = 1;\n        }\n        if(histogram[letter] > max){\n            max = histogram[letter];\n        }\n    });\n    var result = {};\n    for(var letter in histogram){\n        if(histogram[letter] === max){\n            result[letter] = histogram[letter];\n        }\n    }\n    return result;\n}",
        "grade-6": {
            "execution": 0
        },
        "18": "var h = {};\n  var max = 1;\n  var letter, count;\n  var t = test.split(' ');\n  for (var i = 0; i < t.length; i++){\n    count = 1;\n    letter = t[i];\n    if (letter in h){\n      h[letter] += 1;\n      if (h[letter] > max){\n        max = h[letter];\n      }\n    }\n    else {\n      h[letter] = 1;\n    }\n  }\n  var d = {};\n  for (var k in h){\n    if (h[k] == max){\n      d[k] = h[k];\n    }\n  }\n  return d;\n}",
        "grade-18": {
            "execution": 0
        },
        "15": "//Split string into array\n  test = test.split(' ');\n  //create an object\n  var obj = {};\n  //loop through array\n  for(var i = 0; i < test.length; i++){\n    //check to see if the letter exists\n    if(obj[test[i]]){\n      //if the letter does exist add to the count\n      obj[test[i]]++;\n    } else {\n      //if the letter does not exist add it to the object\n      obj[test[i]] = 1;\n    }\n  }\n  //create a variable to hold the most occurrences\n  var mostOccurrences = 0;\n  //loop through object\n  for(var key in obj){\n    //check to see if the value is greater than the most occurrences\n    if(obj[key] > mostOccurrences){\n      //if it is replace the most occurrences\n      mostOccurrences = obj[key];\n    }\n  }\n  //create a new object\n  var newObj = {};\n  //loop through object\n  for(var keys in obj){\n    //check to see if the value is equal to the most occurrences\n    if(obj[keys] === mostOccurrences){\n      //if it is add the key and value to the new object\n      newObj[keys] = obj[keys];\n    }\n  }\n  //return new object\n  return newObj;\n}",
        "grade-15": {
            "execution": 0
        },
        "13": "var alphabet = {};\n    var counter = 0;\n    var target = '';\n    var multi = [];\n    var howMany = 0;\n    var winner = '';\n    var letters = test.split(' ');\n    for(var i = 0; i < letters.length; i++){\n        alphabet[letters[i]] = alphabet[letters[i]] ? alphabet[letters[i]]+1 : 1;\n    }\n    for(var letter in alphabet){\n        counter = alphabet[letter];\n        if(counter >= howMany){\n            target = letter;\n            howMany = counter;\n        }\n    }\n    for(var letter in alphabet){\n        if(alphabet[letter] == howMany){\n            multi.push(letter);\n        }\n    }\n    if(multi.length > 1){\n        for(var i = 0; i < multi.length; i++){\n            winner += multi[i];\n            if(i != multi.length-1){\n                winner += ' ';\n            }\n        }\n        return {winner: howMany};\n    }else{\n        return {target: howMany};\n    }\n}",
        "grade-13": {
            "execution": 0
        },
        "9": "let obj={}\n  let str=test.split(' ')\n  for(let i=0;i<str.length;i++){\n    if(obj[str[i]]===undefined){\n      obj[str[i]]=1\n    }else{\n      obj[str[i]]+=1\n    }\n  }\n  return obj\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "if(test == ''){\n        return {}\n    }\n    else{\n        let testArray = test.split(' ');\n        let testDict = {}\n        let maxValue = 0;\n        let highestValueArray = [];\n        for(let i = 0; i < testArray.length; i++){\n            let indexElement = testArray[i];\n            if(testDict[indexElement] == undefined){\n                testDict[indexElement] = 1;\n            }\n            else{\n                testDict[indexElement] += 1;\n            }\n        }\n        let testDictKeys = Object.keys(testDict);\n        for(let i = 0; i < testDictKeys.length; i++){\n            let indexKey = testDictKeys[i];\n            if(testDict[indexKey] > maxValue){\n                maxValue = testDict[indexKey];\n                highestValueArray = [indexKey];\n            }\n            else if(testDict[indexKey] == maxValue){\n                highestValueArray.push(indexKey);\n            }\n        }\n        let keyToReturn = {};\n        for(let i = 0; i < highestValueArray.length; i++){\n            let indexKey = highestValueArray[i];\n            keyToReturn[indexKey] = maxValue;\n        }\n        return keyToReturn;\n    }\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "var kamus = {}\n    var tes = ''\n    var hasil = []\n    var tampung = []\n    for(var i = 0; i < test.length; i++){\n        if(test[i] !== ' '){\n            tes += test[i]\n        }else{\n            hasil.push(tes)\n            tes = ''\n        }\n    }\n    hasil.push(tes)\n    for(var j = 0; j < hasil.length; j++){\n        kamus[hasil[j]] = 0\n    }\n    for(var k = 0; k < hasil.length; k++){\n        for(var l = 0; l < hasil.length; l++){\n            if(hasil[k] === hasil[l]){\n                kamus[hasil[k]] += 1\n            }\n        }\n    }\n    for(var m = 0; m < hasil.length; m++){\n        if(kamus[hasil[m]] === max(kamus)){\n            tampung.push(hasil[m])\n        }\n    }\n    var o = 0\n    var output = {}\n    while(o < tampung.length){\n        output[tampung[o]] = max(kamus)\n        o++\n    }\n    return output\n}",
        "grade-14": {
            "execution": 0
        },
        "5": "var letters={};\n    var letterArr=test.split(' ');\n    var max=0;\n    var maxLetters= {};\n    for(i=0;i<letterArr.length;i++){\n        var letter=letterArr[i];\n        if(!letters[letter]){\n            letters[letter]=1;\n        }\n        else{\n            letters[letter]++;\n        }\n        if(letters[letter]>max){\n            max=letters[letter];\n            maxLetters={};\n            maxLetters[letter]=max;\n        }\n        else if(letters[letter]==max){\n            maxLetters[letter]=max;\n        }\n    }\n    return maxLetters;\n}",
        "grade-5": {
            "execution": 0
        },
        "19": "if(test == ''){\n        return {};\n    }\n    let maxCount = 1;\n    let result = {};\n    let arr = test.split(' ');\n    let testMap = new Map();\n    for(let i = 0; i < arr.length; i++){\n        if(testMap.has(arr[i])){\n            testMap.set(arr[i], testMap.get(arr[i]) + 1);\n        }\n        else{\n            testMap.set(arr[i], 1);\n        }\n    }\n    for(let item of testMap){\n        if(item[1] >= maxCount){\n            maxCount = item[1];\n        }\n    }\n    for(let item of testMap){\n        if(item[1] == maxCount){\n            result[item[0]] = item[1];\n        }\n    }\n    return result;\n}",
        "grade-19": {
            "execution": 1
        }
    },
    {
        "intent": "//Filter an input list of strings only for ones that contain given substring\n// >>> filter_by_substring([], 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n// ['abc', 'bacd', 'array']\nfunction filter_by_substring(strings, substring){\n",
        "snippet": [
            "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n"
        ],
        "simplified": "Filter an input list of strings only for ones that contain given substring",
        "task_id": "7",
        "3": "return strings.filter(function(string){\n        return string.includes(substring);\n    });\n}",
        "grade-3": {
            "execution": 1
        },
        "0": "var result = []\n    for (var i=0; i<strings.length; i++){\n        if (strings[i].indexOf(substring) != -1){\n            result.push(strings[i])\n        }\n    }\n    return result\n}",
        "grade-0": {
            "execution": 1
        },
        "8": "return strings.filter(string => string.includes(substring));\n}",
        "grade-8": {
            "execution": 1
        },
        "7": "var filteredStrings = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].includes(substring)){\n            filteredStrings.push(strings[i]);\n        }\n    }\n    return filteredStrings;\n}",
        "grade-7": {
            "execution": 1
        },
        "16": "var res=[];\n    for(var i=0;i<strings.length;i++){\n        if(strings[i].indexOf(substring)!=-1){\n            res.push(strings[i]);\n        }\n    }\n    return res;\n}",
        "grade-16": {
            "execution": 1
        },
        "2": "var results = [];\n\tfor(var i=0; i<strings.length; i++){\n\t\tif(strings[i].indexOf(substring) != -1){\n\t\t\tresults.push(strings[i]);\n\t\t}\n\t}\n\treturn results;\n}",
        "grade-2": {
            "execution": 1
        },
        "11": "return strings.filter(function(string){\n        return string.indexOf(substring) > -1;\n    });\n}",
        "grade-11": {
            "execution": 1
        },
        "1": "return strings.filter(function(x){return x.indexOf(substring) != -1;});\n}",
        "grade-1": {
            "execution": 1
        },
        "10": "return strings.filter(str => str.includes(substring));\n}",
        "grade-10": {
            "execution": 1
        },
        "17": "//Answer:\n    return strings.filter(x => x.includes(substring));\n}",
        "grade-17": {
            "execution": 1
        },
        "12": "return strings.filter(str => str.includes(substring));\n}",
        "grade-12": {
            "execution": 1
        },
        "6": "var my_strings = [];\n\tvar i = 0;\n\tfor (i = 0; i < strings.length; i++) {\n\t\tif (strings[i].indexOf(substring) >= 0) {\n\t\t\tmy_strings.push(strings[i]);\n\t\t}\n\t}\n\treturn my_strings;\n}",
        "grade-6": {
            "execution": 1
        },
        "18": "for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(substring) == -1){\n            strings.splice(i, 1);\n            i--;\n        }\n    }\n    return strings;\n}",
        "grade-18": {
            "execution": 1
        },
        "15": "var filtered = [];\n\tfor(var i = 0; i < strings.length; i++){\n\t\tif(strings[i].indexOf(substring) != -1){\n\t\t\tfiltered.push(strings[i]);\n\t\t}\n\t}\n\treturn filtered;\n}",
        "grade-15": {
            "execution": 1
        },
        "13": "var filtered_strings = [];\n  strings.forEach(function(element){\n    if (element.indexOf(substring) !== -1){\n      filtered_strings.push(element);\n    }\n  });\n  return filtered_strings;\n}",
        "grade-13": {
            "execution": 1
        },
        "9": "return _.filter(strings, function(string){\n\t\treturn string.indexOf(substring) > -1;\n\t});\n}",
        "grade-9": {
            "execution": 0
        },
        "4": "return strings.filter(function(element){\n\t\treturn element.indexOf(substring) != -1;\n\t});\n}",
        "grade-4": {
            "execution": 1
        },
        "14": "var new_strings = [];\n\tfor(var i=0; i<strings.length; i++){\n\t\tif(strings[i].includes(substring)){\n\t\t\tnew_strings.push(strings[i]);\n\t\t}\n\t}\n\treturn new_strings;\n}",
        "grade-14": {
            "execution": 1
        },
        "5": "return strings.filter(string => string.includes(substring));\n}",
        "grade-5": {
            "execution": 1
        },
        "19": "var filtered = []\n    for (i = 0; i < strings.length; i++){\n        if (strings[i].indexOf(substring) != -1){\n            filtered.push(strings[i])\n        }\n    }\n    return filtered\n}",
        "grade-19": {
            "execution": 1
        }
    }
]