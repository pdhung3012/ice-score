[
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> closest_integer(\"10\")\n    // 10\n    // >>> closest_integer(\"15.3\")\n    // 15\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static int closestInteger(String value) {\n",
        "snippet": [
            "        if (value.contains(\".\")) {\n            while (value.charAt(value.length() - 1) == '0') {\n                value = value.substring(0, value.length() - 1);\n            }\n        }\n        double num = Double.parseDouble(value);\n        int res = 0;\n        if (value.substring(Math.max(value.length() - 2, 0)).equals(\".5\")) {\n            if (num > 0) {\n                res = (int) Math.ceil(num);\n            } else {\n                res = (int) Math.floor(num);\n            }\n        } else if(value.length() > 0) {\n            res = (int) Math.round(num);\n        }\n        return res;\n    }\n}"
        ],
        "simplified": "Create a function that takes a value (string) representing a number and returns the closest integer to it. If the number is equidistant from two integers, round it away from zero.",
        "task_id": "99",
        "35": "double num = Double.parseDouble(value);\n        return (int) Math.round(num);",
        "grade-35": {
            "execution": 0
        },
        "6": "// Your code goes here\n        try {\n            // Attempt to parse the string into a decimal.\n            double decimal = Double.parseDouble(value);\n            // If the parse was successful, then we now have a decimal value.\n            // However, we want to round it and get an integer.\n            int rounded = (int) Math.round(decimal);\n            // Finally, we want to return the integer value.\n            return rounded;\n        } catch (NumberFormatException e) {\n            // If the parse failed, we should return an error message.\n            return -1;\n        }",
        "grade-6": {
            "execution": 0
        },
        "89": "return BigDecimal.valueOf(Double.parseDouble(value)).setScale(0, RoundingMode.HALF_UP).intValue();",
        "grade-89": {
            "execution": 1
        },
        "77": "// convert the string to a decimal value\n        // round the decimal value\n        // convert the decimal value to an integer\n        return (int)Math.round(Double.parseDouble(value));",
        "grade-77": {
            "execution": 0
        },
        "71": "double value_d = Double.parseDouble(value);\n        return value_d > 0 ? (int) Math.ceil(value_d) : (int) Math.floor(value_d);",
        "grade-71": {
            "execution": 0
        },
        "42": "// Your code here!\n        return 1;",
        "grade-42": {
            "execution": 0
        },
        "32": "return 0;",
        "grade-32": {
            "execution": 0
        },
        "185": "int flooredValue = (int) Math.floor(Double.parseDouble(value));\n        int ceiledValue = (int) Math.ceil(Double.parseDouble(value));\n        double floorDiff = Math.abs(Double.parseDouble(value) - flooredValue);\n        double ceilDiff = Math.abs(Double.parseDouble(value) - ceiledValue);\n        if (floorDiff < ceilDiff) {\n            return flooredValue;\n        } else {\n            return ceiledValue;\n        }",
        "grade-185": {
            "execution": 0
        },
        "28": "Double f = Double.parseDouble(value);\n        int a = (int)Math.floor(f);\n        int b = (int)Math.ceil(f);\n        int ca = Math.abs(a);\n        int cb = Math.abs(b);\n        int cfa = Math.abs(a - f.intValue());\n        int cfb = Math.abs(b - f.intValue());\n        if (cfa == cfb)\n            return f.intValue() > 0 ? a : b;\n        else if (cfa < cfb)\n            return a;\n        else\n            return b;",
        "grade-28": {
            "execution": 0
        },
        "141": "BigDecimal val = new BigDecimal(value);\n        BigDecimal ceil = val.setScale(0, RoundingMode.CEILING);\n        BigDecimal floor = val.setScale(0, RoundingMode.FLOOR);\n        BigDecimal diff_ceil = ceil.subtract(val).abs();\n        BigDecimal diff_floor = floor.subtract(val).abs();\n        return diff_ceil.compareTo(diff_floor) < 0 ? ceil.intValue() : floor.intValue();",
        "grade-141": {
            "execution": 0
        },
        "8": "double val = Double.parseDouble(value);\n        return (int) Math.round(val);",
        "grade-8": {
            "execution": 0
        },
        "7": "// Write your code here\n        double n = Double.parseDouble(value);\n        int a = (int) Math.floor(n);\n        int b = (int) Math.ceil(n);\n        if (Math.abs(n - a) < Math.abs(n - b)) {\n            return a;\n        } else {\n            return b;\n        }",
        "grade-7": {
            "execution": 0
        },
        "29": "BigDecimal bigDecimal = new BigDecimal(value);\n        BigDecimal nearestBigDecimal = bigDecimal.round(new MathContext(0, RoundingMode.HALF_UP));\n        return nearestBigDecimal.intValue();",
        "grade-29": {
            "execution": 0
        },
        "68": "double test = Double.parseDouble(value);\n        int high = (int)Math.ceil(test);\n        int low = (int)Math.floor(test);\n        if (test - low == 0.5) {\n            if (test < 0) {\n                return low;\n            } else {\n                return high;\n            }\n        } else if (test - low < 0.5) {\n            return low;\n        } else {\n            return high;\n        }",
        "grade-68": {
            "execution": 1
        },
        "74": "// 1. Create a BigDecimal instance of the given value.\n        // 2. Use the method BigDecimal.setScale() to round the number with the\n        //    RoundingMode.HALF_UP.\n        // 3. Convert the result to integer.\n        // 4. Return the result.\n        return (int)Double.parseDouble(value);",
        "grade-74": {
            "execution": 0
        },
        "170": "// write your code here\n        double val = Double.parseDouble(value);\n        int sign = val > 0 ? 1 : -1;\n        return (int) (val + 0.5 * sign);",
        "grade-170": {
            "execution": 1
        },
        "189": "return Double.valueOf(value).intValue();",
        "grade-189": {
            "execution": 0
        },
        "62": "double d = Double.parseDouble(value);\n        double d2 = d - Math.floor(d);\n        if (d2 > 0.5) {\n            return (int)Math.ceil(d);\n        } else {\n            return (int)Math.floor(d);\n        }",
        "grade-62": {
            "execution": 0
        },
        "140": "// Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        String temp = value.replaceAll(\"\\\\.\", \"\");\n        StringBuilder sb = new StringBuilder(temp);\n        sb.insert(temp.length() - value.length() + 2, \".\");\n        double decimal = Double.parseDouble(sb.toString());\n        int result = (int)decimal;\n        if ((decimal - result) >= 0.5) {\n            result += 1;\n        }\n        return result;",
        "grade-140": {
            "execution": 0
        },
        "69": "// Implement your function here\n        return 0;",
        "grade-69": {
            "execution": 0
        },
        "bleu-35": 0.0012681421329916117,
        "bleu-6": 0.10756103320044046,
        "bleu-89": 0.004670903599504251,
        "bleu-77": 0.01469164579501885,
        "bleu-71": 0.015601046939920387,
        "bleu-42": 1.665573917950305e-09,
        "bleu-32": 1.594580636992145e-24,
        "bleu-185": 0.16106463529308207,
        "bleu-28": 0.19918067333295333,
        "bleu-141": 0.03604447305335711,
        "bleu-8": 0.0009667505804671741,
        "bleu-7": 0.12112329719052589,
        "bleu-29": 0.009335339831071054,
        "bleu-68": 0.18238627426125795,
        "bleu-74": 0.03847050096358672,
        "bleu-170": 0.017598386266227995,
        "bleu-189": 3.7906794711774684e-06,
        "bleu-62": 0.07514927448074411,
        "bleu-140": 0.16352712970218772,
        "bleu-69": 2.801150273888992e-09,
        "codebleu-35": 0.07004382363580335,
        "codebleu-6": 0.27210446787958326,
        "codebleu-89": 0.08311114746448665,
        "codebleu-77": 0.10203234162485063,
        "codebleu-71": 0.11653541759968938,
        "codebleu-42": 0.013386896590637284,
        "codebleu-32": 0.005354752342704149,
        "codebleu-185": 0.31829562603558026,
        "codebleu-28": 0.43750101958033244,
        "codebleu-141": 0.31191841745801213,
        "codebleu-8": 0.06992078399966703,
        "codebleu-7": 0.2485238059046659,
        "codebleu-29": 0.11420500982422493,
        "codebleu-68": 0.2906969358145036,
        "codebleu-74": 0.15680236393672287,
        "codebleu-170": 0.10225559439715719,
        "codebleu-189": 0.04016073377128436,
        "codebleu-62": 0.20186228261322048,
        "codebleu-140": 0.41095192187914886,
        "codebleu-69": 0.016064272761989358,
        "chrf-35": 0.19174865244728706,
        "chrf-6": 0.2733744260704386,
        "chrf-89": 0.14323007623284914,
        "chrf-77": 0.20801593218847977,
        "chrf-71": 0.23650479212715542,
        "chrf-42": 0.021809597798548696,
        "chrf-32": 0.014326237454955601,
        "chrf-185": 0.3488369669054491,
        "chrf-28": 0.30579446770369506,
        "chrf-141": 0.1887762589645165,
        "chrf-8": 0.16572796362750822,
        "chrf-7": 0.2963121800152043,
        "chrf-29": 0.13251238349911063,
        "chrf-68": 0.3173246920934619,
        "chrf-74": 0.20618442629797903,
        "chrf-170": 0.16307396414849967,
        "chrf-189": 0.0700731477778701,
        "chrf-62": 0.25244349333376137,
        "chrf-140": 0.3158479867790244,
        "chrf-69": 0.03153565664750448,
        "rougel-35": 0.22340425531914893,
        "rougel-6": 0.24822695035460995,
        "rougel-89": 0.2121212121212121,
        "rougel-77": 0.15458937198067635,
        "rougel-71": 0.28712871287128716,
        "rougel-42": 0.022857142857142857,
        "rougel-32": 0.023668639053254437,
        "rougel-185": 0.35955056179775274,
        "rougel-28": 0.34246575342465757,
        "rougel-141": 0.3157894736842105,
        "rougel-8": 0.20212765957446807,
        "rougel-7": 0.35833333333333334,
        "rougel-29": 0.18867924528301885,
        "rougel-68": 0.37647058823529406,
        "rougel-74": 0.17721518987341772,
        "rougel-170": 0.22009569377990426,
        "rougel-189": 0.12222222222222223,
        "rougel-62": 0.3839285714285715,
        "rougel-140": 0.38436482084690554,
        "rougel-69": 0.022857142857142857,
        "meteor-35": 0.13014757190518766,
        "meteor-6": 0.14264215338826766,
        "meteor-89": 0.09135517693315862,
        "meteor-77": 0.07443811074918569,
        "meteor-71": 0.1458823529411765,
        "meteor-42": 0.00998003992015968,
        "meteor-32": 0.01002004008016032,
        "meteor-185": 0.2644340925120783,
        "meteor-28": 0.28212962962962973,
        "meteor-141": 0.17565872020075277,
        "meteor-8": 0.11381101583113457,
        "meteor-7": 0.1874248497903967,
        "meteor-29": 0.0779220779220779,
        "meteor-68": 0.258762134224579,
        "meteor-74": 0.11524010562691527,
        "meteor-170": 0.11733946994542774,
        "meteor-189": 0.04310344827586207,
        "meteor-62": 0.2129071247673253,
        "meteor-140": 0.25947823581553775,
        "meteor-69": 0.00998003992015968,
        "ruby-35": 0.12650602409638556,
        "ruby-6": 0.1807228915662651,
        "ruby-89": 0.12650602409638556,
        "ruby-77": 0.09036144578313254,
        "ruby-71": 0.17469879518072284,
        "ruby-42": 0.012048192771084376,
        "ruby-32": 0.012048192771084376,
        "ruby-185": 0.24096385542168675,
        "ruby-28": 0.22891566265060237,
        "ruby-141": 0.1987951807228916,
        "ruby-8": 0.11445783132530118,
        "ruby-7": 0.22891566265060237,
        "ruby-29": 0.11445783132530118,
        "ruby-68": 0.2530120481927711,
        "ruby-74": 0.12650602409638556,
        "ruby-170": 0.13855421686746983,
        "ruby-189": 0.0662650602409639,
        "ruby-62": 0.2530120481927711,
        "ruby-140": 0.2349397590361446,
        "ruby-69": 0.012048192771084376,
        "codebertscore_f1-35": 0.7115012407302856,
        "codebertscore_f3-35": 0.6512494087219238,
        "codebertscore_f1-6": 0.7039723992347717,
        "codebertscore_f3-6": 0.716777503490448,
        "codebertscore_f1-89": 0.6613368988037109,
        "codebertscore_f3-89": 0.6416594386100769,
        "codebertscore_f1-77": 0.6850997805595398,
        "codebertscore_f3-77": 0.6662858724594116,
        "codebertscore_f1-71": 0.7446913123130798,
        "codebertscore_f3-71": 0.698750913143158,
        "codebertscore_f1-42": 0.5485695600509644,
        "codebertscore_f3-42": 0.5100659728050232,
        "codebertscore_f1-32": 0.526367723941803,
        "codebertscore_f3-32": 0.45679062604904175,
        "codebertscore_f1-185": 0.727508544921875,
        "codebertscore_f3-185": 0.7164608240127563,
        "codebertscore_f1-28": 0.7437829375267029,
        "codebertscore_f3-28": 0.7368401885032654,
        "codebertscore_f1-141": 0.674940824508667,
        "codebertscore_f3-141": 0.6761011481285095,
        "codebertscore_f1-8": 0.7040384411811829,
        "codebertscore_f3-8": 0.6452896595001221,
        "codebertscore_f1-7": 0.7306036353111267,
        "codebertscore_f3-7": 0.7131801843643188,
        "codebertscore_f1-29": 0.6503653526306152,
        "codebertscore_f3-29": 0.642977774143219,
        "codebertscore_f1-68": 0.7707915306091309,
        "codebertscore_f3-68": 0.7494776248931885,
        "codebertscore_f1-74": 0.6715466380119324,
        "codebertscore_f3-74": 0.669384777545929,
        "codebertscore_f1-170": 0.7117642164230347,
        "codebertscore_f3-170": 0.6881903409957886,
        "codebertscore_f1-189": 0.650648295879364,
        "codebertscore_f3-189": 0.6034705638885498,
        "codebertscore_f1-62": 0.7671129107475281,
        "codebertscore_f3-62": 0.7352525591850281,
        "codebertscore_f1-140": 0.7348763942718506,
        "codebertscore_f3-140": 0.7574467062950134,
        "codebertscore_f1-69": 0.5597369074821472,
        "codebertscore_f3-69": 0.5282163023948669,
        "codebertscore_s_f1-35": 0.7586304545402527,
        "codebertscore_s_f3-35": 0.6951383948326111,
        "codebertscore_s_f1-6": 0.7170397043228149,
        "codebertscore_s_f3-6": 0.7320070266723633,
        "codebertscore_s_f1-89": 0.6800063848495483,
        "codebertscore_s_f3-89": 0.6725130677223206,
        "codebertscore_s_f1-77": 0.7172459363937378,
        "codebertscore_s_f3-77": 0.7102637887001038,
        "codebertscore_s_f1-71": 0.7843141555786133,
        "codebertscore_s_f3-71": 0.7398324608802795,
        "codebertscore_s_f1-42": 0.6025514006614685,
        "codebertscore_s_f3-42": 0.5817440748214722,
        "codebertscore_s_f1-32": 0.6251304745674133,
        "codebertscore_s_f3-32": 0.5589531660079956,
        "codebertscore_s_f1-185": 0.7540302872657776,
        "codebertscore_s_f3-185": 0.7453352808952332,
        "codebertscore_s_f1-28": 0.7590498328208923,
        "codebertscore_s_f3-28": 0.7582385540008545,
        "codebertscore_s_f1-141": 0.6919118165969849,
        "codebertscore_s_f3-141": 0.6978592276573181,
        "codebertscore_s_f1-8": 0.7498018145561218,
        "codebertscore_s_f3-8": 0.6912807822227478,
        "codebertscore_s_f1-7": 0.764011561870575,
        "codebertscore_s_f3-7": 0.7497361898422241,
        "codebertscore_s_f1-29": 0.6799653172492981,
        "codebertscore_s_f3-29": 0.6841729283332825,
        "codebertscore_s_f1-68": 0.7945380806922913,
        "codebertscore_s_f3-68": 0.7727707028388977,
        "codebertscore_s_f1-74": 0.6982357501983643,
        "codebertscore_s_f3-74": 0.7021193504333496,
        "codebertscore_s_f1-170": 0.7406705021858215,
        "codebertscore_s_f3-170": 0.7256788611412048,
        "codebertscore_s_f1-189": 0.6800864338874817,
        "codebertscore_s_f3-189": 0.6391342282295227,
        "codebertscore_s_f1-62": 0.799774169921875,
        "codebertscore_s_f3-62": 0.7722083330154419,
        "codebertscore_s_f1-140": 0.7490517497062683,
        "codebertscore_s_f3-140": 0.772240400314331,
        "codebertscore_s_f1-69": 0.6032732725143433,
        "codebertscore_s_f3-69": 0.5746967196464539,
        "gpt35_nsnr-35": 3,
        "raw_gpt35_nsnr-35": "3",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-89": 4,
        "raw_gpt35_nsnr-89": "4",
        "gpt35_nsnr-77": 3,
        "raw_gpt35_nsnr-77": "3",
        "gpt35_nsnr-71": 4,
        "raw_gpt35_nsnr-71": "4",
        "gpt35_nsnr-42": 2,
        "raw_gpt35_nsnr-42": "2",
        "gpt35_nsnr-32": 2,
        "raw_gpt35_nsnr-32": "2",
        "gpt35_nsnr-185": 4,
        "raw_gpt35_nsnr-185": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-141": 4,
        "raw_gpt35_nsnr-141": "4",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-29": 4,
        "raw_gpt35_nsnr-29": "4",
        "gpt35_nsnr-68": 4,
        "raw_gpt35_nsnr-68": "4",
        "gpt35_nsnr-74": 2,
        "raw_gpt35_nsnr-74": "2",
        "gpt35_nsnr-170": 4,
        "raw_gpt35_nsnr-170": "4",
        "gpt35_nsnr-189": 3,
        "raw_gpt35_nsnr-189": "3",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-140": 3,
        "raw_gpt35_nsnr-140": "3",
        "gpt35_nsnr-69": 2,
        "raw_gpt35_nsnr-69": "2",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-89": 3,
        "raw_gpt35_nswr-89": "3",
        "gpt35_nswr-77": 3,
        "raw_gpt35_nswr-77": "3",
        "gpt35_nswr-71": 3,
        "raw_gpt35_nswr-71": "3",
        "gpt35_nswr-42": 0,
        "raw_gpt35_nswr-42": "0",
        "gpt35_nswr-32": 0,
        "raw_gpt35_nswr-32": "0",
        "gpt35_nswr-185": 3,
        "raw_gpt35_nswr-185": "3",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-141": 3,
        "raw_gpt35_nswr-141": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-29": 3,
        "raw_gpt35_nswr-29": "3",
        "gpt35_nswr-68": 3,
        "raw_gpt35_nswr-68": "3",
        "gpt35_nswr-74": 3,
        "raw_gpt35_nswr-74": "3",
        "gpt35_nswr-170": 3,
        "raw_gpt35_nswr-170": "3",
        "gpt35_nswr-189": 2,
        "raw_gpt35_nswr-189": "2",
        "gpt35_nswr-62": 3,
        "raw_gpt35_nswr-62": "3",
        "gpt35_nswr-140": 3,
        "raw_gpt35_nswr-140": "3",
        "gpt35_nswr-69": 2,
        "raw_gpt35_nswr-69": "2"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // fix_spaces(\"Example\") == \"Example\"\n    // fix_spaces(\"Example 1\") == \"Example_1\"\n    // fix_spaces(\" Example 2\") == \"_Example_2\"\n    // fix_spaces(\" Example   3\") == \"_Example-3\"\n    public static String fixSpaces(String text) {\n",
        "snippet": [
            "        StringBuilder sb = new StringBuilder();\n        int start = 0, end = 0;\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == ' ') {\n                end += 1;\n            } else {\n                if (end - start > 2) {\n                    sb.append('-');\n                } else if (end - start > 0) {\n                    sb.append(\"_\".repeat(end - start));\n                }\n                sb.append(text.charAt(i));\n                start = i + 1;\n                end = i + 1;\n            }\n        }\n        if (end - start > 2) {\n            sb.append('-');\n        } else if (end - start > 0) {\n            sb.append(\"_\".repeat(end - start));\n        }\n        return sb.toString();\n    }\n}"
        ],
        "simplified": "Given a string text, replace all spaces in it with underscores, and if a string has more than 2 consecutive spaces, then replace all consecutive spaces with -",
        "task_id": "140",
        "32": "String result = text.replace(\" \", \"_\");\n        String result2 = result.replace(\"__\", \"-\");\n        return result2;",
        "grade-32": {
            "execution": 0
        },
        "6": "// Your code here.\n        if (text.length() == 0) {\n            return text;\n        }\n        text = text.replaceAll(\"\\\\s{2,}\", \"-\");\n        return text.replaceAll(\"\\\\s\", \"_\");",
        "grade-6": {
            "execution": 0
        },
        "84": "return text.replaceAll(\"\\\\s+\", \"_\");",
        "grade-84": {
            "execution": 0
        },
        "74": "String underscore = \"_\";\n        String dashes = \"-\";\n        StringBuilder buffer = new StringBuilder();\n        int consecutive_spaces = 0;\n        for (int i = 0; i < text.length(); i++) {\n            char current = text.charAt(i);\n            char previous = i > 0 ? text.charAt(i - 1) : ' ';\n            char next = i < text.length() - 1 ? text.charAt(i + 1) : ' ';\n            if (current == ' ') {\n                if (previous == ' ') {\n                    consecutive_spaces++;\n                } else {\n                    consecutive_spaces = 1;\n                }\n                if (consecutive_spaces == 1) {\n                    buffer.append(underscore);\n                } else if (consecutive_spaces == 2) {\n                    buffer.append(dashes);\n                }\n            } else {\n                consecutive_spaces = 0;\n                buffer.append(current);\n            }\n        }\n        return buffer.toString();",
        "grade-74": {
            "execution": 0
        },
        "68": "String[] words = text.split(\" \");\n        String res = \"\";\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].equals(\"\")) {\n                continue;\n            }\n            res += words[i];\n            if (i < words.length - 1) {\n                if (words[i + 1].equals(\"\")) {\n                    res += \"-\";\n                } else {\n                    res += \"_\";\n                }\n            }\n        }\n        return res;",
        "grade-68": {
            "execution": 0
        },
        "40": "throw new UnsupportedOperationException(\"Not implemented\");",
        "grade-40": {
            "execution": 0
        },
        "30": "StringBuilder sb = new StringBuilder();\n        int count = 0;\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c == ' ') {\n                count++;\n                if (count < 3) {\n                    sb.append(\"_\");\n                }\n            } else {\n                if (count >= 3) {\n                    sb.append(\"-\");\n                }\n                sb.append(c);\n                count = 0;\n            }\n        }\n        return sb.toString();",
        "grade-30": {
            "execution": 0
        },
        "193": "StringBuilder sb = new StringBuilder();\n        int count = 0;\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == ' ') {\n                count++;\n                if (count >= 2) {\n                    sb.append('-');\n                    count = 0;\n                }\n            } else {\n                sb.append(text.charAt(i));\n                count = 0;\n            }\n        }\n        return sb.toString();",
        "grade-193": {
            "execution": 0
        },
        "25": "return \"\";",
        "grade-25": {
            "execution": 0
        },
        "138": "return text.replaceAll(\" +\", \" \").replaceAll(\" \", \"_\").replaceAll(\" {2}\", \"-\");",
        "grade-138": {
            "execution": 0
        },
        "8": "if (text == null) return null;\n        if (text.length() == 0) return \"\";\n        text = text.trim();\n        if (text.length() == 0) return \"\";\n        return text.replaceAll(\"\\\\s+\", \"-\");",
        "grade-8": {
            "execution": 0
        },
        "7": "return null;",
        "grade-7": {
            "execution": 0
        },
        "27": "String[] s = text.split(\" \");\n        StringBuffer sb = new StringBuffer();\n        for (int i = 0; i < s.length; i++) {\n            if (i > 0) sb.append(\"_\");\n            if (s[i].length() > 0) {\n                sb.append(s[i]);\n            }\n        }\n        if (sb.length() > 0) {\n            StringBuffer sb2 = new StringBuffer();\n            String[] s2 = sb.toString().split(\"_\");\n            for (int i = 0; i < s2.length; i++) {\n                if (i > 0) sb2.append(\"-\");\n                if (s2[i].length() > 0) {\n                    sb2.append(s2[i]);\n                }\n            }\n            return sb2.toString();\n        }\n        return \"\";",
        "grade-27": {
            "execution": 0
        },
        "66": "// Implement me\n        return null;",
        "grade-66": {
            "execution": 0
        },
        "70": "StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == ' ') {\n                while (i < text.length() && text.charAt(i) == ' ') {\n                    sb.append('-');\n                    i++;\n                }\n                if (i == text.length())\n                    break;\n                sb.append('_');\n            } else {\n                sb.append(text.charAt(i));\n            }\n        }\n        return sb.toString();",
        "grade-70": {
            "execution": 0
        },
        "177": "StringBuilder builder = new StringBuilder();\n        String[] array = text.split(\" \");\n        for (int i = 0; i < array.length; i++) {\n            if (array[i].length() == 0) {\n                builder.append(\"-\");\n            } else {\n                builder.append(array[i]);\n                if (i != array.length - 1) {\n                    builder.append(\"_\");\n                }\n            }\n        }\n        return builder.toString();",
        "grade-177": {
            "execution": 0
        },
        "198": "// Good luck!\n        String result = text.replaceAll(\" +\", \"_\");\n        result = result.replaceAll(\"_+\", \"-\");\n        return result;",
        "grade-198": {
            "execution": 0
        },
        "60": "throw new RuntimeException(\"fixMe\");",
        "grade-60": {
            "execution": 0
        },
        "137": "text = text.replace(\" \",\"_\");\n        return text.replaceAll(\"__+\",\"-\");",
        "grade-137": {
            "execution": 0
        },
        "67": "StringBuilder build = new StringBuilder();\n        boolean f = false;\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == ' ') {\n                if (f) {\n                    build.append('-');\n                } else {\n                    build.append('_');\n                    f = true;\n                }\n            } else {\n                build.append(text.charAt(i));\n                f = false;\n            }\n        }\n        return build.toString();",
        "grade-67": {
            "execution": 0
        },
        "bleu-32": 0.0022724476079985425,
        "bleu-6": 0.031102886631320308,
        "bleu-84": 1.2091716691202214e-05,
        "bleu-74": 0.4161526632571793,
        "bleu-68": 0.15199463296954974,
        "bleu-40": 5.5160792294118235e-08,
        "bleu-30": 0.3789367621562753,
        "bleu-193": 0.3547714552425869,
        "bleu-25": 1.8898296640106784e-21,
        "bleu-138": 0.004242406959989059,
        "bleu-8": 0.03834464060942056,
        "bleu-7": 2.109317974461512e-28,
        "bleu-27": 0.3756296417845711,
        "bleu-66": 2.9984859398344106e-13,
        "bleu-70": 0.44031300254387773,
        "bleu-177": 0.2416579017124676,
        "bleu-198": 0.005667340655340147,
        "bleu-60": 1.4362907229571994e-08,
        "bleu-137": 0.0012380747278448517,
        "bleu-67": 0.3406372607367594,
        "codebleu-32": 0.09045440539588522,
        "codebleu-6": 0.12512784751891148,
        "codebleu-84": 0.031746032366890026,
        "codebleu-74": 0.6300849535531121,
        "codebleu-68": 0.3262694560168673,
        "codebleu-40": 0.02442002442036001,
        "codebleu-30": 0.43073723341890646,
        "codebleu-193": 0.38774197038004615,
        "codebleu-25": 0.009768009768009766,
        "codebleu-138": 0.07571810706076633,
        "codebleu-8": 0.16871212818132203,
        "codebleu-7": 0.004884004884004883,
        "codebleu-27": 0.6144595724307753,
        "codebleu-66": 0.009768009827666284,
        "codebleu-70": 0.46847585446708095,
        "codebleu-177": 0.35842222606699403,
        "codebleu-198": 0.0880970621945738,
        "codebleu-60": 0.02442002442036001,
        "codebleu-137": 0.0708350451978609,
        "codebleu-67": 0.4176200077171218,
        "chrf-32": 0.08651295863352465,
        "chrf-6": 0.1246970761574854,
        "chrf-84": 0.039149874624333926,
        "chrf-74": 0.44611666608358,
        "chrf-68": 0.20345521754591772,
        "chrf-40": 0.03680402295046861,
        "chrf-30": 0.46156235045795724,
        "chrf-193": 0.487345336478114,
        "chrf-25": 0.0138762332799824,
        "chrf-138": 0.05530429362706432,
        "chrf-8": 0.13979773842000837,
        "chrf-7": 0.015004922660453451,
        "chrf-27": 0.3912024597364099,
        "chrf-66": 0.021138667977880686,
        "chrf-70": 0.5108887911388179,
        "chrf-177": 0.341913753947933,
        "chrf-198": 0.07721075810004281,
        "chrf-60": 0.0220720810122847,
        "chrf-137": 0.06526466579681754,
        "chrf-67": 0.46405143980442987,
        "rougel-32": 0.20444444444444446,
        "rougel-6": 0.25396825396825395,
        "rougel-84": 0.10526315789473685,
        "rougel-74": 0.4999999999999999,
        "rougel-68": 0.42244224422442245,
        "rougel-40": 0.05911330049261083,
        "rougel-30": 0.6148867313915858,
        "rougel-193": 0.632996632996633,
        "rougel-25": 0.030769230769230767,
        "rougel-138": 0.208695652173913,
        "rougel-8": 0.30350194552529186,
        "rougel-7": 0.020618556701030927,
        "rougel-27": 0.509090909090909,
        "rougel-66": 0.0202020202020202,
        "rougel-70": 0.608695652173913,
        "rougel-177": 0.5049833887043189,
        "rougel-198": 0.20600858369098712,
        "rougel-60": 0.059405940594059396,
        "rougel-137": 0.19004524886877827,
        "rougel-67": 0.6158940397350994,
        "meteor-32": 0.07415858528237307,
        "meteor-6": 0.1523738545141001,
        "meteor-84": 0.05780898168303509,
        "meteor-74": 0.49585312419947053,
        "meteor-68": 0.2954955193437287,
        "meteor-40": 0.024632518133384684,
        "meteor-30": 0.4312585890717077,
        "meteor-193": 0.4401198915497137,
        "meteor-25": 0.011607661056297156,
        "meteor-138": 0.09839510631879542,
        "meteor-8": 0.16661335814602657,
        "meteor-7": 0.0058072009291521495,
        "meteor-27": 0.45332318707726443,
        "meteor-66": 0.005793742757821553,
        "meteor-70": 0.4994201814271018,
        "meteor-177": 0.34675181219904677,
        "meteor-198": 0.09534819038347875,
        "meteor-60": 0.02464675658317276,
        "meteor-137": 0.08728644939965693,
        "meteor-67": 0.40051390244957136,
        "ruby-32": 0.12041884816753923,
        "ruby-6": 0.15706806282722519,
        "ruby-84": 0.05759162303664922,
        "ruby-74": 0.31088082901554404,
        "ruby-68": 0.2827225130890052,
        "ruby-40": 0.03141361256544506,
        "ruby-30": 0.45549738219895286,
        "ruby-193": 0.47643979057591623,
        "ruby-25": 0.015706806282722474,
        "ruby-138": 0.11518324607329844,
        "ruby-8": 0.18848167539267013,
        "ruby-7": 0.010471204188481686,
        "ruby-27": 0.35567010309278346,
        "ruby-66": 0.010471204188481686,
        "ruby-70": 0.47120418848167545,
        "ruby-177": 0.3612565445026178,
        "ruby-198": 0.12565445026178013,
        "ruby-60": 0.03141361256544506,
        "ruby-137": 0.10994764397905754,
        "ruby-67": 0.47120418848167545,
        "codebertscore_f1-32": 0.6370601058006287,
        "codebertscore_f3-32": 0.5891615748405457,
        "codebertscore_f1-6": 0.6599243879318237,
        "codebertscore_f3-6": 0.6233226656913757,
        "codebertscore_f1-84": 0.5677578449249268,
        "codebertscore_f3-84": 0.5273218750953674,
        "codebertscore_f1-74": 0.7947990298271179,
        "codebertscore_f3-74": 0.8035163879394531,
        "codebertscore_f1-68": 0.7750135064125061,
        "codebertscore_f3-68": 0.7496132850646973,
        "codebertscore_f1-40": 0.5308725833892822,
        "codebertscore_f3-40": 0.49461132287979126,
        "codebertscore_f1-30": 0.8667582869529724,
        "codebertscore_f3-30": 0.8345710039138794,
        "codebertscore_f1-193": 0.8684995770454407,
        "codebertscore_f3-193": 0.8319408893585205,
        "codebertscore_f1-25": 0.46110808849334717,
        "codebertscore_f3-25": 0.41067415475845337,
        "codebertscore_f1-138": 0.5931404829025269,
        "codebertscore_f3-138": 0.5559349656105042,
        "codebertscore_f1-8": 0.6641043424606323,
        "codebertscore_f3-8": 0.6241160035133362,
        "codebertscore_f1-7": 0.46432262659072876,
        "codebertscore_f3-7": 0.4212857782840729,
        "codebertscore_f1-27": 0.7943562865257263,
        "codebertscore_f3-27": 0.780371367931366,
        "codebertscore_f1-66": 0.5133576393127441,
        "codebertscore_f3-66": 0.4751291275024414,
        "codebertscore_f1-70": 0.8645744919776917,
        "codebertscore_f3-70": 0.8290764689445496,
        "codebertscore_f1-177": 0.8198293447494507,
        "codebertscore_f3-177": 0.7886065244674683,
        "codebertscore_f1-198": 0.6287969350814819,
        "codebertscore_f3-198": 0.5984833240509033,
        "codebertscore_f1-60": 0.535262405872345,
        "codebertscore_f3-60": 0.48792240023612976,
        "codebertscore_f1-137": 0.6153605580329895,
        "codebertscore_f3-137": 0.5701742172241211,
        "codebertscore_f1-67": 0.833669126033783,
        "codebertscore_f3-67": 0.7949766516685486,
        "codebertscore_s_f1-32": 0.6931330561637878,
        "codebertscore_s_f3-32": 0.6565259695053101,
        "codebertscore_s_f1-6": 0.7036094069480896,
        "codebertscore_s_f3-6": 0.6785508990287781,
        "codebertscore_s_f1-84": 0.6428699493408203,
        "codebertscore_s_f3-84": 0.6116530299186707,
        "codebertscore_s_f1-74": 0.8114537596702576,
        "codebertscore_s_f3-74": 0.8225951790809631,
        "codebertscore_s_f1-68": 0.7869237065315247,
        "codebertscore_s_f3-68": 0.7638686895370483,
        "codebertscore_s_f1-40": 0.5823113918304443,
        "codebertscore_s_f3-40": 0.5530505180358887,
        "codebertscore_s_f1-30": 0.8770257234573364,
        "codebertscore_s_f3-30": 0.84832364320755,
        "codebertscore_s_f1-193": 0.884599506855011,
        "codebertscore_s_f3-193": 0.8527711033821106,
        "codebertscore_s_f1-25": 0.5771326422691345,
        "codebertscore_s_f3-25": 0.5302120447158813,
        "codebertscore_s_f1-138": 0.6588039398193359,
        "codebertscore_s_f3-138": 0.6319048404693604,
        "codebertscore_s_f1-8": 0.7195190787315369,
        "codebertscore_s_f3-8": 0.6889046430587769,
        "codebertscore_s_f1-7": 0.5805556178092957,
        "codebertscore_s_f3-7": 0.5383558869361877,
        "codebertscore_s_f1-27": 0.8145891427993774,
        "codebertscore_s_f3-27": 0.7937953472137451,
        "codebertscore_s_f1-66": 0.5747137069702148,
        "codebertscore_s_f3-66": 0.5488516092300415,
        "codebertscore_s_f1-70": 0.8790276050567627,
        "codebertscore_s_f3-70": 0.8457944393157959,
        "codebertscore_s_f1-177": 0.8401851058006287,
        "codebertscore_s_f3-177": 0.8155114650726318,
        "codebertscore_s_f1-198": 0.6759930849075317,
        "codebertscore_s_f3-198": 0.6581144332885742,
        "codebertscore_s_f1-60": 0.5914313793182373,
        "codebertscore_s_f3-60": 0.558227002620697,
        "codebertscore_s_f1-137": 0.682604968547821,
        "codebertscore_s_f3-137": 0.6421038508415222,
        "codebertscore_s_f1-67": 0.8467689156532288,
        "codebertscore_s_f3-67": 0.8139011263847351,
        "gpt35_nsnr-32": 3,
        "raw_gpt35_nsnr-32": "3",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-84": 3,
        "raw_gpt35_nsnr-84": "3",
        "gpt35_nsnr-74": 4,
        "raw_gpt35_nsnr-74": "4",
        "gpt35_nsnr-68": 3,
        "raw_gpt35_nsnr-68": "3",
        "gpt35_nsnr-40": 0,
        "raw_gpt35_nsnr-40": "0",
        "gpt35_nsnr-30": 4,
        "raw_gpt35_nsnr-30": "4",
        "gpt35_nsnr-193": 3,
        "raw_gpt35_nsnr-193": "3",
        "gpt35_nsnr-25": 2,
        "raw_gpt35_nsnr-25": "2",
        "gpt35_nsnr-138": 3,
        "raw_gpt35_nsnr-138": "3",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 0,
        "raw_gpt35_nsnr-7": "0",
        "gpt35_nsnr-27": 3,
        "raw_gpt35_nsnr-27": "3",
        "gpt35_nsnr-66": 0,
        "raw_gpt35_nsnr-66": "0",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-177": 2,
        "raw_gpt35_nsnr-177": "2",
        "gpt35_nsnr-198": 4,
        "raw_gpt35_nsnr-198": "4",
        "gpt35_nsnr-60": 0,
        "raw_gpt35_nsnr-60": "0",
        "gpt35_nsnr-137": 3,
        "raw_gpt35_nsnr-137": "3",
        "gpt35_nsnr-67": 4,
        "raw_gpt35_nsnr-67": "4",
        "gpt35_nswr-32": 2,
        "raw_gpt35_nswr-32": "2",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-84": 3,
        "raw_gpt35_nswr-84": "3",
        "gpt35_nswr-74": 3,
        "raw_gpt35_nswr-74": "3",
        "gpt35_nswr-68": 3,
        "raw_gpt35_nswr-68": "3",
        "gpt35_nswr-40": 0,
        "raw_gpt35_nswr-40": "0",
        "gpt35_nswr-30": 3,
        "raw_gpt35_nswr-30": "3",
        "gpt35_nswr-193": 3,
        "raw_gpt35_nswr-193": "3",
        "gpt35_nswr-25": 2,
        "raw_gpt35_nswr-25": "2",
        "gpt35_nswr-138": 2,
        "raw_gpt35_nswr-138": "2",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 0,
        "raw_gpt35_nswr-7": "0",
        "gpt35_nswr-27": 2,
        "raw_gpt35_nswr-27": "2",
        "gpt35_nswr-66": 0,
        "raw_gpt35_nswr-66": "0",
        "gpt35_nswr-70": 3,
        "raw_gpt35_nswr-70": "3",
        "gpt35_nswr-177": 2,
        "raw_gpt35_nswr-177": "2",
        "gpt35_nswr-198": 3,
        "raw_gpt35_nswr-198": "3",
        "gpt35_nswr-60": 0,
        "raw_gpt35_nswr-60": "0",
        "gpt35_nswr-137": 3,
        "raw_gpt35_nswr-137": "3",
        "gpt35_nswr-67": 3,
        "raw_gpt35_nswr-67": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array of numbers as input and returns \n    // the number of elements in the array that are greater than 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    public static int specialFilter(ArrayList<Integer> nums) {\n",
        "snippet": [
            "        int count = 0;\n        for (int num : nums) {\n            if (num > 10) {\n                String odd_digits = \"13579\";\n                String number_as_string = String.valueOf(num);\n                if (odd_digits.indexOf(number_as_string.charAt(0)) != -1 && odd_digits.indexOf(number_as_string.charAt(number_as_string.length() - 1)) != -1) {\n                    count += 1;\n                }\n            }\n        }\n        return count;\n    }\n}"
        ],
        "simplified": "Write a function that takes an array of numbers as input and returns the number of elements in the array that are greater than 10 and both first and last digits of a number are odd (1, 3, 5, 7, 9).",
        "task_id": "146",
        "188": "return (int) nums.stream().filter(num -> num > 10 && (num % 10) % 2 != 0 && (num / 10) % 2 != 0).count();",
        "grade-188": {
            "execution": 0
        },
        "32": "int result = 0;\n        for (int n : nums) {\n            String s = String.valueOf(n);\n            if (s.length() > 1) {\n                int i = Integer.parseInt(String.valueOf(s.charAt(0)));\n                int j = Integer.parseInt(String.valueOf(s.charAt(s.length() - 1)));\n                if (n > 10 && (i % 2 == 1 && j % 2 == 1)) {\n                    result++;\n                }\n            }\n        }\n        return result;",
        "grade-32": {
            "execution": 0
        },
        "7": "return nums.stream().filter(i -> i > 10 && (i % 10) % 2 != 0 && (i / 10) % 2 != 0).collect(Collectors.toList()).size();",
        "grade-7": {
            "execution": 0
        },
        "81": "int c = 0;\n        for (int num : nums) {\n            if (num > 10 && isOdd(num % 10) && isOdd(num / 100)) {\n                c++;\n            }\n        }\n        return c;",
        "grade-81": {
            "execution": 0
        },
        "73": "// your code here\n        return nums.stream().filter(i -> i > 10).filter(i -> isFirstOdd(i) && isLastOdd(i)).toArray().length;",
        "grade-73": {
            "execution": 0
        },
        "67": "// Type your solution here\n        return 0;",
        "grade-67": {
            "execution": 0
        },
        "40": "int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            int n = nums.get(i);\n            if (n > 10 && n%2 != 0 && n%10%2 != 0) {\n                int m = n;\n                while (m > 0) {\n                    m /= 10;\n                }\n                if (m%2 != 0) {\n                    count++;\n                }\n            }\n        }\n        return count;",
        "grade-40": {
            "execution": 0
        },
        "30": "int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10) {\n                if (nums.get(i) % 2 == 1) {\n                    if (nums.get(i) % 10 == 1 || nums.get(i) % 10 == 3 || nums.get(i) % 10 == 5 || nums.get(i) % 10 == 7 || nums.get(i) % 10 == 9) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;",
        "grade-30": {
            "execution": 0
        },
        "162": "// Your Code Here\n        return 0;",
        "grade-162": {
            "execution": 0
        },
        "25": "return (int) nums.stream().filter(x -> x > 10 &&\n                                               (x % 10) % 2 != 0 &&\n                                               (x / 10) % 2 != 0).count();",
        "grade-25": {
            "execution": 0
        },
        "175": "int counter = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10) {\n                if (isOdd(nums.get(i)) &&\n                    isOdd(nums.get(i) / 10)) {\n                    counter++;\n                }\n            }\n        }\n        return counter;",
        "grade-175": {
            "execution": 0
        },
        "128": "int count = 0;\n        for (int n : nums) {\n            if (n > 10 && n % 2 == 1 && (n % 10) % 2 == 1) {\n                count++;\n            }\n        }\n        return count;",
        "grade-128": {
            "execution": 0
        },
        "9": "// Your code goes here",
        "grade-9": {
            "execution": 0
        },
        "8": "//----------------------------\n        //-----YOUR CODE HERE---------\n        //----------------------------\n        //first, we filter out the numbers that are less than 10\n        ArrayList<Integer> nums2 = new ArrayList<Integer>();\n        for(int i = 0; i < nums.size(); i++){\n            if(nums.get(i) > 10){\n                nums2.add(nums.get(i));\n            }\n        }\n        //now, we take the first digit of the number, and check if it is odd\n        //if it is, we take the last digit of the number, and check if it is odd\n        //if it is, we add 1 to the count\n        int count = 0;\n        for(int i = 0; i < nums2.size(); i++){\n            String theNum = Integer.toString(nums2.get(i));\n            if(Integer.parseInt(theNum.substring(0,1)) % 2 != 0){\n                if(Integer.parseInt(theNum.substring(theNum.length()-1)) % 2 != 0){\n                    count++;\n                }\n            }\n        }\n        return count;",
        "grade-8": {
            "execution": 1
        },
        "26": "int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10) {\n                int first = nums.get(i) / 10;\n                int last = nums.get(i) % 10;\n                if (first % 2 != 0 && last % 2 != 0) {\n                    count++;\n                }\n            }\n        }\n        return count;",
        "grade-26": {
            "execution": 0
        },
        "65": "return nums.stream().filter(e -> e > 10 && e % 2 != 0 && e / 10 % 2 != 0).collect(Collectors.toList()).size();",
        "grade-65": {
            "execution": 0
        },
        "70": "// code here\n    \treturn 0;",
        "grade-70": {
            "execution": 0
        },
        "151": "// Write your code here.",
        "grade-151": {
            "execution": 0
        },
        "178": "int count = 0;\n        for (int n : nums) {\n            if (n > 10 && n % 2 == 1 && n % 10 == 1) {\n                count++;\n            }\n        }\n        return count;",
        "grade-178": {
            "execution": 0
        },
        "166": "int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            int curr = nums.get(i);\n            if (curr > 10) {\n                String str = Integer.toString(curr);\n                int first = Character.getNumericValue(str.charAt(0));\n                int last = Character.getNumericValue(str.charAt(str.length() - 1));\n                if (first % 2 != 0 && last % 2 != 0) {\n                    count++;\n                }\n            }\n        }\n        return count;",
        "grade-166": {
            "execution": 1
        },
        "bleu-188": 0.029883291046231296,
        "bleu-32": 0.3169456165866031,
        "bleu-7": 0.022077709454597527,
        "bleu-81": 0.1500858195587471,
        "bleu-73": 0.024168970232395802,
        "bleu-67": 5.983116180223469e-06,
        "bleu-40": 0.23033761595501773,
        "bleu-30": 0.19020821073334004,
        "bleu-162": 1.8015834571519963e-06,
        "bleu-25": 0.019337408997554643,
        "bleu-175": 0.17224524378833322,
        "bleu-128": 0.167659365789317,
        "bleu-9": 0.0,
        "bleu-8": 0.11028298565478586,
        "bleu-26": 0.2540866746859239,
        "bleu-65": 0.018896572980733495,
        "bleu-70": 3.790109868041011e-07,
        "bleu-151": 1.7123754353316507e-07,
        "bleu-178": 0.1498894388968033,
        "bleu-166": 0.3157111605172895,
        "codebleu-188": 0.22658773221249123,
        "codebleu-32": 0.6653738674897001,
        "codebleu-7": 0.27049156421480525,
        "codebleu-81": 0.2751248564683247,
        "codebleu-73": 0.24469101917146927,
        "codebleu-67": 0.03509638125011061,
        "codebleu-40": 0.50885613086243,
        "codebleu-30": 0.5613019921594623,
        "codebleu-162": 0.030079342052488224,
        "codebleu-25": 0.23148108470900708,
        "codebleu-175": 0.49220881934155214,
        "codebleu-128": 0.26840802201237346,
        "codebleu-9": 0.020050125313283207,
        "codebleu-8": 0.621646334685787,
        "codebleu-26": 0.5437804970165643,
        "codebleu-65": 0.23919177825457216,
        "codebleu-70": 0.02506437655410683,
        "codebleu-151": 0.025062660487381115,
        "codebleu-178": 0.24685421844058375,
        "codebleu-166": 0.6651099730685126,
        "chrf-188": 0.11602846750629511,
        "chrf-32": 0.3771658079977616,
        "chrf-7": 0.09419043622483453,
        "chrf-81": 0.1939491954989397,
        "chrf-73": 0.11934643591507202,
        "chrf-67": 0.03365868037338328,
        "chrf-40": 0.22971412460097393,
        "chrf-30": 0.270649006498957,
        "chrf-162": 0.029307781156246868,
        "chrf-25": 0.08738325493274055,
        "chrf-175": 0.239223494381445,
        "chrf-128": 0.211348488053895,
        "chrf-9": 0.01774289885775374,
        "chrf-8": 0.3447210797879881,
        "chrf-26": 0.25852824820461484,
        "chrf-65": 0.08752893467583776,
        "chrf-70": 0.028647123882751674,
        "chrf-151": 0.019251182127156406,
        "chrf-178": 0.2084242035158012,
        "chrf-166": 0.37305656159691986,
        "rougel-188": 0.30344827586206896,
        "rougel-32": 0.5388127853881279,
        "rougel-7": 0.27631578947368424,
        "rougel-81": 0.4444444444444444,
        "rougel-73": 0.24489795918367346,
        "rougel-67": 0.037735849056603765,
        "rougel-40": 0.3897435897435898,
        "rougel-30": 0.41409691629955947,
        "rougel-162": 0.0380952380952381,
        "rougel-25": 0.28965517241379307,
        "rougel-175": 0.4534883720930233,
        "rougel-128": 0.47945205479452063,
        "rougel-9": 0.0,
        "rougel-8": 0.2885085574572127,
        "rougel-26": 0.4623655913978494,
        "rougel-65": 0.24657534246575347,
        "rougel-70": 0.038461538461538464,
        "rougel-151": 0.019230769230769232,
        "rougel-178": 0.46478873239436624,
        "rougel-166": 0.5454545454545454,
        "meteor-188": 0.20039429835931308,
        "meteor-32": 0.5089304658024596,
        "meteor-7": 0.22996508274350766,
        "meteor-81": 0.2313179347826087,
        "meteor-73": 0.2121187865204514,
        "meteor-67": 0.017006802721088437,
        "meteor-40": 0.3714742848735786,
        "meteor-30": 0.47664258201956633,
        "meteor-162": 0.0170261066969353,
        "meteor-25": 0.18406224966980422,
        "meteor-175": 0.4047188495651425,
        "meteor-128": 0.3080938177874187,
        "meteor-9": 0.0,
        "meteor-8": 0.4362726676043132,
        "meteor-26": 0.4376939112225326,
        "meteor-65": 0.18761236107206325,
        "meteor-70": 0.017045454545454548,
        "meteor-151": 0.005681818181818183,
        "meteor-178": 0.2967514379838824,
        "meteor-166": 0.5819772882618861,
        "ruby-188": 0.20618556701030932,
        "ruby-32": 0.3770491803278688,
        "ruby-7": 0.15463917525773196,
        "ruby-81": 0.3298969072164949,
        "ruby-73": 0.14432989690721654,
        "ruby-67": 0.020618556701030966,
        "ruby-40": 0.26530612244897955,
        "ruby-30": 0.27692307692307694,
        "ruby-162": 0.020618556701030966,
        "ruby-25": 0.19587628865979378,
        "ruby-175": 0.3298969072164949,
        "ruby-128": 0.3608247422680413,
        "ruby-9": 0.0,
        "ruby-8": 0.16666666666666663,
        "ruby-26": 0.27835051546391754,
        "ruby-65": 0.14432989690721654,
        "ruby-70": 0.020618556701030966,
        "ruby-151": 0.010309278350515427,
        "ruby-178": 0.3402061855670103,
        "ruby-166": 0.4065040650406504,
        "codebertscore_f1-188": 0.7023523449897766,
        "codebertscore_f3-188": 0.663821816444397,
        "codebertscore_f1-32": 0.8278234004974365,
        "codebertscore_f3-32": 0.816207230091095,
        "codebertscore_f1-7": 0.6730285286903381,
        "codebertscore_f3-7": 0.6528294086456299,
        "codebertscore_f1-81": 0.7649322748184204,
        "codebertscore_f3-81": 0.7193477153778076,
        "codebertscore_f1-73": 0.6534555554389954,
        "codebertscore_f3-73": 0.6432385444641113,
        "codebertscore_f1-67": 0.5637192726135254,
        "codebertscore_f3-67": 0.5404113531112671,
        "codebertscore_f1-40": 0.7738731503486633,
        "codebertscore_f3-40": 0.7466755509376526,
        "codebertscore_f1-30": 0.7689647078514099,
        "codebertscore_f3-30": 0.7539074420928955,
        "codebertscore_f1-162": 0.5533669590950012,
        "codebertscore_f3-162": 0.5208230018615723,
        "codebertscore_f1-25": 0.7088646292686462,
        "codebertscore_f3-25": 0.6765829920768738,
        "codebertscore_f1-175": 0.7572135925292969,
        "codebertscore_f3-175": 0.734092652797699,
        "codebertscore_f1-128": 0.7850865125656128,
        "codebertscore_f3-128": 0.7268766760826111,
        "codebertscore_f1-9": 0.48367074131965637,
        "codebertscore_f3-9": 0.4576771557331085,
        "codebertscore_f1-8": 0.7035234570503235,
        "codebertscore_f3-8": 0.7302479147911072,
        "codebertscore_f1-26": 0.7809237241744995,
        "codebertscore_f3-26": 0.7564889192581177,
        "codebertscore_f1-65": 0.6604099273681641,
        "codebertscore_f3-65": 0.6402105093002319,
        "codebertscore_f1-70": 0.5594456791877747,
        "codebertscore_f3-70": 0.5206502079963684,
        "codebertscore_f1-151": 0.4967119097709656,
        "codebertscore_f3-151": 0.4718429148197174,
        "codebertscore_f1-178": 0.7856945991516113,
        "codebertscore_f3-178": 0.7240399718284607,
        "codebertscore_f1-166": 0.8197238445281982,
        "codebertscore_f3-166": 0.8190834522247314,
        "codebertscore_s_f1-188": 0.7318626046180725,
        "codebertscore_s_f3-188": 0.6915218234062195,
        "codebertscore_s_f1-32": 0.8306273818016052,
        "codebertscore_s_f3-32": 0.818314790725708,
        "codebertscore_s_f1-7": 0.7028213739395142,
        "codebertscore_s_f3-7": 0.680086612701416,
        "codebertscore_s_f1-81": 0.7918736338615417,
        "codebertscore_s_f3-81": 0.7452329397201538,
        "codebertscore_s_f1-73": 0.68548983335495,
        "codebertscore_s_f3-73": 0.6748886108398438,
        "codebertscore_s_f1-67": 0.5951362252235413,
        "codebertscore_s_f3-67": 0.561559796333313,
        "codebertscore_s_f1-40": 0.786095380783081,
        "codebertscore_s_f3-40": 0.755558967590332,
        "codebertscore_s_f1-30": 0.7879311442375183,
        "codebertscore_s_f3-30": 0.7699877023696899,
        "codebertscore_s_f1-162": 0.5896958112716675,
        "codebertscore_s_f3-162": 0.5590900778770447,
        "codebertscore_s_f1-25": 0.7267481088638306,
        "codebertscore_s_f3-25": 0.6907943487167358,
        "codebertscore_s_f1-175": 0.7793900966644287,
        "codebertscore_s_f3-175": 0.7516616582870483,
        "codebertscore_s_f1-128": 0.8121983408927917,
        "codebertscore_s_f3-128": 0.7522164583206177,
        "codebertscore_s_f1-9": 0.5286431312561035,
        "codebertscore_s_f3-9": 0.5004742741584778,
        "codebertscore_s_f1-8": 0.7409963607788086,
        "codebertscore_s_f3-8": 0.7642983198165894,
        "codebertscore_s_f1-26": 0.7949806451797485,
        "codebertscore_s_f3-26": 0.7676131129264832,
        "codebertscore_s_f1-65": 0.6947609782218933,
        "codebertscore_s_f3-65": 0.6749510169029236,
        "codebertscore_s_f1-70": 0.5993566513061523,
        "codebertscore_s_f3-70": 0.5541653633117676,
        "codebertscore_s_f1-151": 0.5267966389656067,
        "codebertscore_s_f3-151": 0.5025985240936279,
        "codebertscore_s_f1-178": 0.8121830224990845,
        "codebertscore_s_f3-178": 0.7498531937599182,
        "codebertscore_s_f1-166": 0.8271403908729553,
        "codebertscore_s_f3-166": 0.8234131336212158,
        "gpt35_nsnr-188": 4,
        "raw_gpt35_nsnr-188": "4",
        "gpt35_nsnr-32": 4,
        "raw_gpt35_nsnr-32": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-81": 4,
        "raw_gpt35_nsnr-81": "4",
        "gpt35_nsnr-73": 4,
        "raw_gpt35_nsnr-73": "4",
        "gpt35_nsnr-67": 0,
        "raw_gpt35_nsnr-67": "0",
        "gpt35_nsnr-40": 4,
        "raw_gpt35_nsnr-40": "4",
        "gpt35_nsnr-30": 4,
        "raw_gpt35_nsnr-30": "4",
        "gpt35_nsnr-162": 2,
        "raw_gpt35_nsnr-162": "2",
        "gpt35_nsnr-25": 4,
        "raw_gpt35_nsnr-25": "4",
        "gpt35_nsnr-175": 4,
        "raw_gpt35_nsnr-175": "4",
        "gpt35_nsnr-128": 4,
        "raw_gpt35_nsnr-128": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-65": 4,
        "raw_gpt35_nsnr-65": "4",
        "gpt35_nsnr-70": 2,
        "raw_gpt35_nsnr-70": "2",
        "gpt35_nsnr-151": 4,
        "raw_gpt35_nsnr-151": "4",
        "gpt35_nsnr-178": 4,
        "raw_gpt35_nsnr-178": "4",
        "gpt35_nsnr-166": 4,
        "raw_gpt35_nsnr-166": "4",
        "gpt35_nswr-188": 4,
        "raw_gpt35_nswr-188": "4",
        "gpt35_nswr-32": 4,
        "raw_gpt35_nswr-32": "4",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-81": 4,
        "raw_gpt35_nswr-81": "4",
        "gpt35_nswr-73": 3,
        "raw_gpt35_nswr-73": "3",
        "gpt35_nswr-67": 2,
        "raw_gpt35_nswr-67": "2",
        "gpt35_nswr-40": 3,
        "raw_gpt35_nswr-40": "3",
        "gpt35_nswr-30": 4,
        "raw_gpt35_nswr-30": "4",
        "gpt35_nswr-162": 2,
        "raw_gpt35_nswr-162": "2",
        "gpt35_nswr-25": 4,
        "raw_gpt35_nswr-25": "4",
        "gpt35_nswr-175": 4,
        "raw_gpt35_nswr-175": "4",
        "gpt35_nswr-128": 4,
        "raw_gpt35_nswr-128": "4",
        "gpt35_nswr-9": 4,
        "raw_gpt35_nswr-9": "4",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-26": 4,
        "raw_gpt35_nswr-26": "4",
        "gpt35_nswr-65": 2,
        "raw_gpt35_nswr-65": "2",
        "gpt35_nswr-70": 3,
        "raw_gpt35_nswr-70": "3",
        "gpt35_nswr-151": 4,
        "raw_gpt35_nswr-151": "4",
        "gpt35_nswr-178": 3,
        "raw_gpt35_nswr-178": "3",
        "gpt35_nswr-166": 4,
        "raw_gpt35_nswr-166": "4"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given the name of a class (a string) and a list of extensions.\n    // The extensions are to be used to load additional classes to the class. The\n    // strength of the extension is as follows: Let CAP be the number of the uppercase\n    // letters in the extension's name, and let SM be the number of lowercase letters \n    // in the extension's name, the strength is given by the fraction CAP - SM. \n    // You should find the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n    // If there are two or more extensions with the same strength, you should\n    // choose the one that comes first in the list.\n    // For example, if you are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    public static String StrongestExtension(String class_name, ArrayList<String> extensions) {\n",
        "snippet": [
            "        String strong = extensions.get(0);\n        int my_val = (int) (strong.chars().filter(Character::isUpperCase).count() - strong.chars().filter(Character::isLowerCase).count());\n        for (String s : extensions) {\n            int val = (int) (s.chars().filter(Character::isUpperCase).count() - s.chars().filter(Character::isLowerCase).count());\n            if (val > my_val) {\n                strong = s;\n                my_val = val;\n            }\n        }\n        return class_name + \".\" + strong;\n    }\n}"
        ],
        "simplified": "You will be given the name of a class (a string) and a list of extensions. The extensions are to be used to load additional classes to the class. The strength of the extension is as follows: Let CAP be the number of the uppercase letters in the extension's name, and let SM be the number of lowercase letters in the extension's name, the strength is given by the fraction CAP - SM. You should find the strongest extension and return a string in this format: ClassName.StrongestExtensionName. If there are two or more extensions with the same strength, you should choose the one that comes first in the list. For example, if you are given \"Slices\" as the class and a list of the extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension (its strength is -1).",
        "task_id": "153",
        "175": "float largest = 0.0f;\n        String strongest = \"\";\n        for (String extension : extensions) {\n            int upper_count = 0;\n            int lower_count = 0;\n            for (int i = 0; i < extension.length(); i++) {\n                if (Character.isUpperCase(extension.charAt(i))) {\n                    upper_count++;\n                } else {\n                    lower_count++;\n                }\n            }\n            float strength = (float) upper_count - (float) lower_count;\n            if (strength > largest) {\n                largest = strength;\n                strongest = extension;\n            }\n        }\n        return class_name + \".\" + strongest;",
        "grade-175": {
            "execution": 0
        },
        "30": "// Your code here.\n        int bestCap = 0;\n        int bestSm = 0;\n        String bestExtension = \"\";\n        for (String extension : extensions) {\n            int cap = 0;\n            int sm = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    cap++;\n                } else {\n                    sm++;\n                }\n            }\n            if (cap - sm > bestCap - bestSm) {\n                bestCap = cap;\n                bestSm = sm;\n                bestExtension = extension;\n            }\n        }\n        return class_name + \".\" + bestExtension;",
        "grade-30": {
            "execution": 0
        },
        "6": "// Write your code here\n        if (extensions.size() == 0) {\n            return class_name;\n        }\n        ArrayList<Double> strength = new ArrayList<Double>();\n        for (String ext : extensions) {\n            int cap = ext.chars().filter(Character::isUpperCase).count();\n            int sm = ext.chars().filter(Character::isLowerCase).count();\n            strength.add((double) cap - sm);\n        }\n        int max_index = 0;\n        for (int i = 1; i < strength.size(); i++) {\n            if (strength.get(i) > strength.get(max_index)) {\n                max_index = i;\n            }\n        }\n        return class_name + \".\" + extensions.get(max_index);",
        "grade-6": {
            "execution": 0
        },
        "73": "// write your code here",
        "grade-73": {
            "execution": 0
        },
        "65": "double max = 0;\n        String ans = class_name + \".\" + extensions.get(0);\n        for (String extension : extensions) {\n            double strength = 0;\n            for (int i = 0; i < extension.length(); i++) {\n                if (Character.isUpperCase(extension.charAt(i))) {\n                    strength++;\n                } else {\n                    strength--;\n                }\n            }\n            if (Math.abs(strength) > max) {\n                max = Math.abs(strength);\n                ans = class_name + \".\" + extension;\n            }\n        }\n        return ans;",
        "grade-65": {
            "execution": 0
        },
        "60": "var cnt = new HashMap<String, Integer>();\n        for (var i = 0; i < extensions.size(); i++) {\n            var cap = 0;\n            var sm = 0;\n            for (var j = 0; j < extensions.get(i).length(); j++) {\n                if (Character.isUpperCase(extensions.get(i).charAt(j))) cap++;\n                else sm++;\n            }\n            var val = cap - sm;\n            if (!cnt.containsKey(extensions.get(i))) {\n                cnt.put(extensions.get(i), val);\n            }\n        }\n        var max = Collections.max(cnt.values());\n        var max_keys = new ArrayList<String>();\n        for (var k : cnt.keySet()) {\n            if (cnt.get(k) == max) {\n                max_keys.add(k);\n            }\n        }\n        var res = class_name + \".\" + max_keys.get(0);\n        return res;",
        "grade-60": {
            "execution": 0
        },
        "38": "double max = Double.NEGATIVE_INFINITY;\n        String max_name = \"\";\n        for (String s : extensions) {\n            double strength = (double)s.replaceAll(\"[^A-Z]\", \"\").length() - s.replaceAll(\"[^a-z]\", \"\").length();\n            if (strength > max) {\n                max = strength;\n                max_name = s;\n            }\n        }\n        return class_name + \".\" + max_name;",
        "grade-38": {
            "execution": 1
        },
        "27": "String max_ext = \"\";\n        int max_ext_strength = 0;\n        for (String ext : extensions) {\n            int ext_strength = ext.chars().filter(Character::isUpperCase).count() - ext.chars().filter(Character::isLowerCase).count();\n            if (ext_strength >= max_ext_strength) {\n                max_ext_strength = ext_strength;\n                max_ext = ext;\n            }\n        }\n        return class_name + \".\" + max_ext;",
        "grade-27": {
            "execution": 0
        },
        "185": "int cap, sm, strongest_cap = -1, strongest_sm = 0;\n        String strongest_extension = \"\";\n        for (String extension : extensions) {\n            cap = extension.replaceAll(\"[^A-Z]\", \"\").length();\n            sm = extension.replaceAll(\"[^a-z]\", \"\").length();\n            if (cap - sm > strongest_cap) {\n                strongest_cap = cap - sm;\n                strongest_sm = sm;\n                strongest_extension = extension;\n            } else if (cap - sm == strongest_cap && sm < strongest_sm) {\n                strongest_cap = cap - sm;\n                strongest_sm = sm;\n                strongest_extension = extension;\n            }\n        }\n        return class_name + \".\" + strongest_extension;",
        "grade-185": {
            "execution": 0
        },
        "147": "try {\n            int max = 0;\n            String str = \"\";\n            for (String extension : extensions) {\n                int cap = 0;\n                int sm = 0;\n                for (int i = 0; i < extension.length(); i++) {\n                    if (Character.isUpperCase(extension.charAt(i))) {\n                        cap++;\n                    } else {\n                        sm++;\n                    }\n                }\n                if (cap - sm > max) {\n                    max = cap - sm;\n                    str = extension;\n                }\n            }\n            return class_name + \".\" + str;\n        } catch (Exception e) {\n            return \"\";\n        }",
        "grade-147": {
            "execution": 0
        },
        "23": "class_name = class_name.replace(\"_\", \"\");\n        int max = 0;\n        String max_ext = null;\n        for (String ext : extensions) {\n            int caps = ext.length() - ext.replaceAll(\"[A-Z]\", \"\").length();\n            int smalls = ext.length() - ext.replaceAll(\"[a-z]\", \"\").length();\n            int diff = caps - smalls;\n            if (max_ext == null || max < diff) {\n                max = diff;\n                max_ext = ext;\n            }\n        }\n        return class_name + \".\" + max_ext;",
        "grade-23": {
            "execution": 0
        },
        "161": "int strong = 0;\n        String best = \"\";\n        for (String ext : extensions) {\n            int caps = 0;\n            int lower = 0;\n            for (char c : ext.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    caps++;\n                } else {\n                    lower++;\n                }\n            }\n            int comp = caps - lower;\n            if (comp > strong) {\n                strong = comp;\n                best = ext;\n            }\n        }\n        return class_name + \".\" + best;",
        "grade-161": {
            "execution": 0
        },
        "113": "System.out.printf(\"Given class: %s, extensions: %s\\n\", class_name, extensions);\n        return \"\";",
        "grade-113": {
            "execution": 0
        },
        "8": "double max = 0;\n        String maxExtension = \"\";\n        for (String extension : extensions) {\n            double strength = 0;\n            for (int i = 0; i < extension.length(); i++) {\n                strength += Character.isUpperCase(extension.charAt(i)) ? 1 : -1;\n            }\n            if (strength > max) {\n                max = strength;\n                maxExtension = extension;\n            }\n        }\n        return class_name + \".\" + maxExtension;",
        "grade-8": {
            "execution": 0
        },
        "7": "// your code goes here\n        double max_strength = 0;\n        String max_extension = \"\";\n        for (String e : extensions) {\n            int cap = 0;\n            int sm = 0;\n            for (int i = 0; i < e.length(); i++) {\n                if (Character.isUpperCase(e.charAt(i))) {\n                    cap++;\n                } else {\n                    sm++;\n                }\n            }\n            double strength = cap - sm;\n            if (strength > max_strength) {\n                max_strength = strength;\n                max_extension = e;\n            }\n        }\n        return class_name + \".\" + max_extension;",
        "grade-7": {
            "execution": 0
        },
        "24": "// Your code is here...\n        double maxStrength = 0;\n        String ret = \"\";\n        for (String s : extensions) {\n            double strength = (double)s.replaceAll(\"[^A-Z]\", \"\").length() - \n                (double)s.replaceAll(\"[^a-z]\", \"\").length();\n            if (strength > maxStrength) {\n                maxStrength = strength;\n                ret = s;\n            }\n        }\n        return class_name + \".\" + ret;",
        "grade-24": {
            "execution": 0
        },
        "58": "if (extensions.size() == 0) return class_name;\n        int strength = 0;\n        String ext = \"\";\n        for (String extension : extensions) {\n            int temp = 0;\n            for (char c : extension.toCharArray())\n                if (Character.isUpperCase(c)) temp++;\n                else temp--;\n            if (temp > strength) {\n                strength = temp;\n                ext = extension;\n            }\n        }\n        return class_name + \".\" + ext;",
        "grade-58": {
            "execution": 0
        },
        "62": "// Your code here\n        return \"\";",
        "grade-62": {
            "execution": 0
        },
        "136": "return class_name + \".\" + extensions.stream().reduce((a, b) -> {\n            int a_cap = (int)a.chars().filter(c -> Character.isUpperCase(c)).count();\n            int a_sm = (int)a.chars().filter(c -> Character.isLowerCase(c)).count();\n            int b_cap = (int)b.chars().filter(c -> Character.isUpperCase(c)).count();\n            int b_sm = (int)b.chars().filter(c -> Character.isLowerCase(c)).count();\n            return (a_cap - a_sm > b_cap - b_sm) ? a : b;\n        }).get();",
        "grade-136": {
            "execution": 0
        },
        "166": "if (extensions.size() == 0) {\n            return class_name;\n        }\n        if (extensions.size() == 1) {\n            return class_name + \".\" + extensions.get(0);\n        }\n        ArrayList<Pair<String, Double>> extension_strengths = new ArrayList<>();\n        for (String ext : extensions) {\n            int lower = 0;\n            int upper = 0;\n            for (int i = 0; i < ext.length(); i++) {\n                if (Character.isUpperCase(ext.charAt(i))) {\n                    upper++;\n                } else {\n                    lower++;\n                }\n            }\n            double strength = (double) upper - (double) lower;\n            extension_strengths.add(new Pair<String, Double>(ext, strength));\n        }\n        extension_strengths.sort((a, b) -> Double.compare(b.getValue1(), a.getValue1()));\n        return class_name + \".\" + extension_strengths.get(0).getValue0();",
        "grade-166": {
            "execution": 0
        },
        "bleu-175": 0.16567082035438596,
        "bleu-30": 0.1576027409587652,
        "bleu-6": 0.3704397423390651,
        "bleu-73": 0.0,
        "bleu-65": 0.18163506428876042,
        "bleu-60": 0.12415015061147792,
        "bleu-38": 0.1817692125659394,
        "bleu-27": 0.337600401329631,
        "bleu-185": 0.1470203612507142,
        "bleu-147": 0.1602485196327096,
        "bleu-23": 0.16837182095133948,
        "bleu-161": 0.1665315701742826,
        "bleu-113": 0.0011875138131338659,
        "bleu-8": 0.12933552050366137,
        "bleu-7": 0.1604432862408562,
        "bleu-24": 0.18274762991480617,
        "bleu-58": 0.1506232693716333,
        "bleu-62": 2.575830100493908e-08,
        "bleu-136": 0.34354901267591376,
        "bleu-166": 0.14950175443768993,
        "codebleu-175": 0.4130127084910358,
        "codebleu-30": 0.368443956678494,
        "codebleu-6": 0.6571231953687122,
        "codebleu-73": 0.01282051282051282,
        "codebleu-65": 0.4393149302528323,
        "codebleu-60": 0.5756613567869485,
        "codebleu-38": 0.3418131403155641,
        "codebleu-27": 0.42780239185800994,
        "codebleu-185": 0.37917062617105574,
        "codebleu-147": 0.38589970869812895,
        "codebleu-23": 0.41722244926347807,
        "codebleu-161": 0.34050361470385315,
        "codebleu-113": 0.04810485150638027,
        "codebleu-8": 0.33186297093776124,
        "codebleu-7": 0.39899446433850505,
        "codebleu-24": 0.362657065763791,
        "codebleu-58": 0.3477773366565256,
        "codebleu-62": 0.022435936108044566,
        "codebleu-136": 0.5960100513973419,
        "codebleu-166": 0.5976697561496311,
        "chrf-175": 0.3772685706369171,
        "chrf-30": 0.30840553878635624,
        "chrf-6": 0.5034394534613701,
        "chrf-73": 0.013186884784715785,
        "chrf-65": 0.32958048029057585,
        "chrf-60": 0.32826468945780024,
        "chrf-38": 0.23289430285952803,
        "chrf-27": 0.46561389040324014,
        "chrf-185": 0.2912701206025099,
        "chrf-147": 0.32178301648507524,
        "chrf-23": 0.24518295265371853,
        "chrf-161": 0.3197555276692361,
        "chrf-113": 0.11869514157077893,
        "chrf-8": 0.29973930592337944,
        "chrf-7": 0.31540942444839704,
        "chrf-24": 0.2433959325155163,
        "chrf-58": 0.3154541143845791,
        "chrf-62": 0.021782628964749976,
        "chrf-136": 0.5357812508548855,
        "chrf-166": 0.34284926698569335,
        "rougel-175": 0.39543726235741444,
        "rougel-30": 0.3712121212121212,
        "rougel-6": 0.5048543689320388,
        "rougel-73": 0.0,
        "rougel-65": 0.38783269961977185,
        "rougel-60": 0.35261707988980723,
        "rougel-38": 0.4267782426778242,
        "rougel-27": 0.6233766233766234,
        "rougel-185": 0.33215547703180215,
        "rougel-147": 0.3909774436090226,
        "rougel-23": 0.3956043956043956,
        "rougel-161": 0.4115226337448559,
        "rougel-113": 0.1627906976744186,
        "rougel-8": 0.3933054393305439,
        "rougel-7": 0.38314176245210724,
        "rougel-24": 0.4126984126984127,
        "rougel-58": 0.4267782426778242,
        "rougel-62": 0.052980132450331126,
        "rougel-136": 0.5594855305466238,
        "rougel-166": 0.3426966292134831,
        "meteor-175": 0.36038296138396286,
        "meteor-30": 0.3295677045341114,
        "meteor-6": 0.5162389181220696,
        "meteor-73": 0.0,
        "meteor-65": 0.3310628304581587,
        "meteor-60": 0.36645658326501407,
        "meteor-38": 0.3067801471505176,
        "meteor-27": 0.5019930009885043,
        "meteor-185": 0.2737689260659448,
        "meteor-147": 0.25886132951809915,
        "meteor-23": 0.3026180900559893,
        "meteor-161": 0.3493764492072445,
        "meteor-113": 0.06116207951070337,
        "meteor-8": 0.29760000000000003,
        "meteor-7": 0.3182237374635813,
        "meteor-24": 0.32838716778738386,
        "meteor-58": 0.3421748796755516,
        "meteor-62": 0.015540015540015542,
        "meteor-136": 0.5231286550954959,
        "meteor-166": 0.36701363261286357,
        "ruby-175": 0.27464788732394363,
        "ruby-30": 0.19718309859154926,
        "ruby-6": 0.3293413173652695,
        "ruby-73": 0.0,
        "ruby-65": 0.22535211267605637,
        "ruby-60": 0.23529411764705888,
        "ruby-38": 0.33098591549295775,
        "ruby-27": 0.5,
        "ruby-185": 0.15492957746478875,
        "ruby-147": 0.18309859154929575,
        "ruby-23": 0.2535211267605634,
        "ruby-161": 0.295774647887324,
        "ruby-113": 0.09859154929577463,
        "ruby-8": 0.27464788732394363,
        "ruby-7": 0.24647887323943662,
        "ruby-24": 0.295774647887324,
        "ruby-58": 0.30281690140845074,
        "ruby-62": 0.028169014084507005,
        "ruby-136": 0.37869822485207105,
        "ruby-166": 0.2289719626168224,
        "codebertscore_f1-175": 0.7645270824432373,
        "codebertscore_f3-175": 0.7650938034057617,
        "codebertscore_f1-30": 0.7405911087989807,
        "codebertscore_f3-30": 0.7446621060371399,
        "codebertscore_f1-6": 0.799505889415741,
        "codebertscore_f3-6": 0.8272314667701721,
        "codebertscore_f1-73": 0.5065746307373047,
        "codebertscore_f3-73": 0.48563605546951294,
        "codebertscore_f1-65": 0.7613434791564941,
        "codebertscore_f3-65": 0.7568635940551758,
        "codebertscore_f1-60": 0.7101755738258362,
        "codebertscore_f3-60": 0.738212525844574,
        "codebertscore_f1-38": 0.7540554404258728,
        "codebertscore_f3-38": 0.7486404776573181,
        "codebertscore_f1-27": 0.8520230650901794,
        "codebertscore_f3-27": 0.862717866897583,
        "codebertscore_f1-185": 0.7255316972732544,
        "codebertscore_f3-185": 0.7243713736534119,
        "codebertscore_f1-147": 0.7354316115379333,
        "codebertscore_f3-147": 0.7330666184425354,
        "codebertscore_f1-23": 0.7540225386619568,
        "codebertscore_f3-23": 0.7442827224731445,
        "codebertscore_f1-161": 0.7769010663032532,
        "codebertscore_f3-161": 0.7681956887245178,
        "codebertscore_f1-113": 0.6350066065788269,
        "codebertscore_f3-113": 0.6096974611282349,
        "codebertscore_f1-8": 0.7703298330307007,
        "codebertscore_f3-8": 0.765453577041626,
        "codebertscore_f1-7": 0.7465376853942871,
        "codebertscore_f3-7": 0.7539068460464478,
        "codebertscore_f1-24": 0.7697571516036987,
        "codebertscore_f3-24": 0.7581164836883545,
        "codebertscore_f1-58": 0.7842440009117126,
        "codebertscore_f3-58": 0.7716461420059204,
        "codebertscore_f1-62": 0.553309977054596,
        "codebertscore_f3-62": 0.5193488597869873,
        "codebertscore_f1-136": 0.7943870425224304,
        "codebertscore_f3-136": 0.8070467114448547,
        "codebertscore_f1-166": 0.7002228498458862,
        "codebertscore_f3-166": 0.7144548296928406,
        "codebertscore_s_f1-175": 0.825295090675354,
        "codebertscore_s_f3-175": 0.8235182166099548,
        "codebertscore_s_f1-30": 0.7992095947265625,
        "codebertscore_s_f3-30": 0.8005821108818054,
        "codebertscore_s_f1-6": 0.8535575270652771,
        "codebertscore_s_f3-6": 0.8789022564888,
        "codebertscore_s_f1-73": 0.7643388509750366,
        "codebertscore_s_f3-73": 0.6976780295372009,
        "codebertscore_s_f1-65": 0.8219432234764099,
        "codebertscore_s_f3-65": 0.8144652843475342,
        "codebertscore_s_f1-60": 0.769717276096344,
        "codebertscore_s_f3-60": 0.7967616319656372,
        "codebertscore_s_f1-38": 0.8154335618019104,
        "codebertscore_s_f3-38": 0.8055914640426636,
        "codebertscore_s_f1-27": 0.8894761800765991,
        "codebertscore_s_f3-27": 0.8957151174545288,
        "codebertscore_s_f1-185": 0.7910658717155457,
        "codebertscore_s_f3-185": 0.7900219559669495,
        "codebertscore_s_f1-147": 0.7993626594543457,
        "codebertscore_s_f3-147": 0.7962237596511841,
        "codebertscore_s_f1-23": 0.8087461590766907,
        "codebertscore_s_f3-23": 0.7998554706573486,
        "codebertscore_s_f1-161": 0.8381803631782532,
        "codebertscore_s_f3-161": 0.827235221862793,
        "codebertscore_s_f1-113": 0.769385576248169,
        "codebertscore_s_f3-113": 0.7144362330436707,
        "codebertscore_s_f1-8": 0.8279694318771362,
        "codebertscore_s_f3-8": 0.8191702365875244,
        "codebertscore_s_f1-7": 0.8061144351959229,
        "codebertscore_s_f3-7": 0.8098498582839966,
        "codebertscore_s_f1-24": 0.8248381018638611,
        "codebertscore_s_f3-24": 0.8116899728775024,
        "codebertscore_s_f1-58": 0.8350104093551636,
        "codebertscore_s_f3-58": 0.8203675150871277,
        "codebertscore_s_f1-62": 0.7705576419830322,
        "codebertscore_s_f3-62": 0.701094925403595,
        "codebertscore_s_f1-136": 0.845046877861023,
        "codebertscore_s_f3-136": 0.8596794009208679,
        "codebertscore_s_f1-166": 0.7636749148368835,
        "codebertscore_s_f3-166": 0.7828255295753479,
        "gpt35_nsnr-175": 4,
        "raw_gpt35_nsnr-175": "4",
        "gpt35_nsnr-30": 4,
        "raw_gpt35_nsnr-30": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-73": 4,
        "raw_gpt35_nsnr-73": "4",
        "gpt35_nsnr-65": 4,
        "raw_gpt35_nsnr-65": "4",
        "gpt35_nsnr-60": 4,
        "raw_gpt35_nsnr-60": "4",
        "gpt35_nsnr-38": 4,
        "raw_gpt35_nsnr-38": "4",
        "gpt35_nsnr-27": 4,
        "raw_gpt35_nsnr-27": "4",
        "gpt35_nsnr-185": 4,
        "raw_gpt35_nsnr-185": "4",
        "gpt35_nsnr-147": 4,
        "raw_gpt35_nsnr-147": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-161": 4,
        "raw_gpt35_nsnr-161": "4",
        "gpt35_nsnr-113": 0,
        "raw_gpt35_nsnr-113": "3 - The code snippet correctly takes in a class name and a list of extensions, calculates the strength of each extension based on the number of uppercase and lowercase letters, and returns the name of the class concatenated with the name of the strongest extension (based on the strength calculation and order in the list). However, the code snippet only returns an empty string and does not actually implement the logic to find the strongest extension.",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-24": 4,
        "raw_gpt35_nsnr-24": "4",
        "gpt35_nsnr-58": 4,
        "raw_gpt35_nsnr-58": "4",
        "gpt35_nsnr-62": 0,
        "raw_gpt35_nsnr-62": "3 - The code snippet correctly implements the logic to find the strongest extension based on the given criteria. It correctly calculates the strength of each extension and returns the class name with the strongest extension. However, it does not handle the case where the extensions list is empty, which could result in an error.",
        "gpt35_nsnr-136": 4,
        "raw_gpt35_nsnr-136": "4",
        "gpt35_nsnr-166": 4,
        "raw_gpt35_nsnr-166": "4",
        "gpt35_nswr-175": 4,
        "raw_gpt35_nswr-175": "4",
        "gpt35_nswr-30": 4,
        "raw_gpt35_nswr-30": "4",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-73": 3,
        "raw_gpt35_nswr-73": "3",
        "gpt35_nswr-65": 3,
        "raw_gpt35_nswr-65": "3",
        "gpt35_nswr-60": 3,
        "raw_gpt35_nswr-60": "3",
        "gpt35_nswr-38": 3,
        "raw_gpt35_nswr-38": "3",
        "gpt35_nswr-27": 4,
        "raw_gpt35_nswr-27": "4",
        "gpt35_nswr-185": 3,
        "raw_gpt35_nswr-185": "3",
        "gpt35_nswr-147": 3,
        "raw_gpt35_nswr-147": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-161": 4,
        "raw_gpt35_nswr-161": "4",
        "gpt35_nswr-113": 3,
        "raw_gpt35_nswr-113": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-24": 3,
        "raw_gpt35_nswr-24": "3",
        "gpt35_nswr-58": 3,
        "raw_gpt35_nswr-58": "3",
        "gpt35_nswr-62": 3,
        "raw_gpt35_nswr-62": "3",
        "gpt35_nswr-136": 3,
        "raw_gpt35_nswr-136": "3",
        "gpt35_nswr-166": 3,
        "raw_gpt35_nswr-166": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    // which is similar to matrix, however, unlike matrices,\n    // each row may contain a different number of columns.\n    // Given lst, and integer x, find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    // Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates of the row by columns in descending order.\n    // Examples:\n    // get_row([\n    // [1,2,3,4,5,6],\n    // [1,2,3,4,1,6],\n    // [1,2,3,4,5,1]\n    // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    // get_row([], 1) == []\n    // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    public static ArrayList<Pair<Integer, Integer>> getRow(ArrayList<ArrayList<Integer>> lst, int x) {\n",
        "snippet": [
            "        List<List<Integer>> coords = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            List<List<Integer>> row = new ArrayList<>();\n            for (int j = lst.get(i).size() - 1; j >= 0; j--) {\n                if (lst.get(i).get(j) == x) {\n                    row.add(Arrays.asList(i, j));\n                }\n            }\n            coords.addAll(row);\n        }\n        return coords;\n    }\n}"
        ],
        "simplified": "You are given a 2 dimensional data, as a nested lists, which is similar to matrix, however, unlike matrices, each row may contain a different number of columns. Given lst, and integer x, find integers x in the list, and return list of tuples, [(x1, y1), (x2, y2) ...] such that each tuple is a coordinate - (row, columns), starting with 0. Sort coordinates initially by rows in ascending order. Also, sort coordinates of the row by columns in descending order.",
        "task_id": "87",
        "177": "ArrayList<Pair<Integer, Integer>> res = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Integer> row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    res.add(new Pair<>(i, j));\n                }\n            }\n        }\n        return res;",
        "grade-177": {
            "execution": 0
        },
        "29": "// your code here\n        ArrayList<Pair<Integer, Integer>> result = new ArrayList<Pair<Integer, Integer>>();\n        ArrayList<Pair<Integer, Integer>> temp = new ArrayList<Pair<Integer, Integer>>();\n        Pair<Integer, Integer> p = new Pair<Integer, Integer>(0, 0);\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    p = new Pair<Integer, Integer>(i, j);\n                    temp.add(p);\n                }\n            }\n        }\n        for (int i = 0; i < temp.size(); i++) {\n            for (int j = i + 1; j < temp.size(); j++) {\n                if (temp.get(i).getValue0() > temp.get(j).getValue0()) {\n                    p = temp.get(i);\n                    temp.set(i, temp.get(j));\n                    temp.set(j, p);\n                }\n            }\n        }\n        for (int i = 0; i < temp.size(); i++) {\n            for (int j = i + 1; j < temp.size(); j++) {\n                if (temp.get(i).getValue0() == temp.get(j).getValue0()) {\n                    if (temp.get(i).getValue1() < temp.get(j).getValue1()) {\n                        p = temp.get(i);\n                        temp.set(i, temp.get(j));\n                        temp.set(j, p);\n                    }\n                }\n            }\n        }\n        for (int i = 0; i < temp.size(); i++) {\n            result.add(temp.get(i));\n        }\n        return result;",
        "grade-29": {
            "execution": 0
        },
        "6": "int row = 0;\n        int col = 0;\n        ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n        while (row < lst.size()) {\n            col = 0;\n            while (col < lst.get(row).size()) {\n                if (lst.get(row).get(col) == x) {\n                    result.add(new Pair<>(row, col));\n                }\n                col++;\n            }\n            row++;\n        }\n        if (result.size() == 0) {\n            return result;\n        }\n        for (int i = 0; i < result.size(); i++) {\n            for (int j = i + 1; j < result.size(); j++) {\n                if (result.get(i).getValue0() > result.get(j).getValue0()) {\n                    Pair<Integer, Integer> temp = result.get(i);\n                    result.set(i, result.get(j));\n                    result.set(j, temp);\n                }\n            }\n        }\n        for (int i = 0; i < result.size(); i++) {\n            for (int j = i + 1; j < result.size(); j++) {\n                if (result.get(i).getValue0() == result.get(j).getValue0()) {\n                    if (result.get(i).getValue1() < result.get(j).getValue1()) {\n                        Pair<Integer, Integer> temp = result.get(i);\n                        result.set(i, result.get(j));\n                        result.set(j, temp);\n                    }\n                }\n            }\n        }\n        return result;",
        "grade-6": {
            "execution": 0
        },
        "73": "ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n        int row = 0;\n        for (ArrayList<Integer> r : lst) {\n            for (int i = 0; i < r.size(); i++) {\n                if (r.get(i) == x) {\n                    result.add(new Pair<>(row, i));\n                }\n            }\n            row++;\n        }\n        result.sort((a, b) -> {\n            if (a.getValue0() != b.getValue0()) {\n                return a.getValue0() - b.getValue0();\n            }\n            return b.getValue1() - a.getValue1();\n        });\n        return result;",
        "grade-73": {
            "execution": 0
        },
        "65": "ArrayList<Pair<Integer, Integer>> coords = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x)\n                    coords.add(new Pair<>(i, j));\n            }\n        }\n        Collections.sort(coords, new Comparator<Pair<Integer, Integer>>() {\n            @Override\n            public int compare(Pair<Integer, Integer> o1, Pair<Integer, Integer> o2) {\n                return o1.getValue0().compareTo(o2.getValue0());\n            }\n        });\n        ArrayList<Pair<Integer, Integer>> sorted = new ArrayList<>();\n        for (int i = 0; i < coords.size(); i++) {\n            Pair<Integer, Integer> curr = coords.get(i);\n            if (i > 0 && coords.get(i - 1).getValue0() == curr.getValue0()) {\n                sorted.add(new Pair<>(curr.getValue0(), curr.getValue1()));\n            } else {\n                ArrayList<Pair<Integer, Integer>> temp = new ArrayList<>();\n                for (int j = i; j < coords.size(); j++) {\n                    if (coords.get(j).getValue0() == curr.getValue0())\n                        temp.add(coords.get(j));\n                }\n                Collections.sort(temp, new Comparator<Pair<Integer, Integer>>() {\n                    @Override\n                    public int compare(Pair<Integer, Integer> o1, Pair<Integer, Integer> o2) {\n                        return o2.getValue1().compareTo(o1.getValue1());\n                    }\n                });\n                sorted.addAll(temp);\n                i += temp.size() - 1;\n            }\n        }\n        return sorted;",
        "grade-65": {
            "execution": 0
        },
        "60": "ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    result.add(new Pair<>(i, j));\n                }\n            }\n        }\n        Comparator<Pair<Integer, Integer>> comparator = Comparator.comparing(Pair::getValue0);\n        comparator = comparator.thenComparing(p -> -p.getValue1());\n        result.sort(comparator);\n        return result;",
        "grade-60": {
            "execution": 0
        },
        "36": "ArrayList<Pair<Integer, Integer>> pos = new ArrayList<>();\n        int i = 0;\n        for (ArrayList<Integer> l : lst) {\n            int j = 0;\n            for (int v : l) {\n                if (v == x) {\n                    pos.add(new Pair<>(i, j));\n                }\n                j++;\n            }\n            i++;\n        }\n        pos.sort((a, b) -> {\n            if (a.getValue0() != b.getValue0()) {\n                return a.getValue0() - b.getValue0();\n            }\n            return b.getValue1() - a.getValue1();\n        });\n        return pos;",
        "grade-36": {
            "execution": 0
        },
        "27": "ArrayList<Pair<Integer, Integer>> res = new ArrayList<>();\n        int row = 0;\n        for (ArrayList<Integer> e : lst) {\n            for (int i = 0; i < e.size(); i++) {\n                if (e.get(i) == x) {\n                    res.add(new Pair<>(row, i));\n                }\n            }\n            row++;\n        }\n        Collections.sort(res, new Comparator<Pair<Integer, Integer>>() {\n            @Override\n            public int compare(Pair<Integer, Integer> o1, Pair<Integer, Integer> o2) {\n                if (o1.getValue0().equals(o2.getValue0())) {\n                    return o2.getValue1().compareTo(o1.getValue1());\n                }\n                return o1.getValue0().compareTo(o2.getValue0());\n            }\n        });\n        return res;",
        "grade-27": {
            "execution": 0
        },
        "191": "// code here",
        "grade-191": {
            "execution": 0
        },
        "148": "ArrayList<Pair<Integer, Integer>> sol = new ArrayList<>();\n        for (int row = 0; row < lst.size(); row++) {\n            for (int col = 0; col < lst.get(row).size(); col++) {\n                if (lst.get(row).get(col) == x) {\n                    sol.add(new Pair<>(row, col));\n                }\n            }\n        }\n        sol.sort((a, b) -> {\n            if (a.getValue0() < b.getValue0()) {\n                return -1;\n            } else if (a.getValue0() > b.getValue0()) {\n                return 1;\n            } else {\n                if (a.getValue1() > b.getValue1()) {\n                    return -1;\n                } else if (a.getValue1() < b.getValue1()) {\n                    return 1;\n                } else {\n                    return 0;\n                }\n            }\n        });\n        return sol;",
        "grade-148": {
            "execution": 0
        },
        "23": "return new ArrayList<>();",
        "grade-23": {
            "execution": 0
        },
        "162": "// implement function here",
        "grade-162": {
            "execution": 0
        },
        "115": "ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    result.add(new Pair<>(i, j));\n                }\n            }\n        }\n        Collections.sort(result, (p1, p2) -> {\n            if (p1.getValue0() == p2.getValue0()) {\n                return p2.getValue1() - p1.getValue1();\n            }\n            return p1.getValue0() - p2.getValue0();\n        });\n        return result;",
        "grade-115": {
            "execution": 0
        },
        "8": "ArrayList<Pair<Integer, Integer>> res = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Integer> row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                int el = row.get(j);\n                if (el == x) {\n                    res.add(new Pair<>(i, j));\n                }\n            }\n        }\n        res.sort((a, b) -> (a.getValue0() - b.getValue0()));\n        res.sort((a, b) -> (b.getValue1() - a.getValue1()));\n        return res;",
        "grade-8": {
            "execution": 0
        },
        "7": "ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    result.add(new Pair<>(i, j));\n                }\n            }\n        }\n        Collections.sort(result, new Comparator<Pair<Integer, Integer>>() {\n            @Override\n            public int compare(Pair<Integer, Integer> o1, Pair<Integer, Integer> o2) {\n                return o1.getValue0().compareTo(o2.getValue0());\n            }\n        });\n        Collections.sort(result, new Comparator<Pair<Integer, Integer>>() {\n            @Override\n            public int compare(Pair<Integer, Integer> o1, Pair<Integer, Integer> o2) {\n                return o2.getValue1().compareTo(o1.getValue1());\n            }\n        });\n        return result;",
        "grade-7": {
            "execution": 0
        },
        "24": "// x is int\n        // lst is list\n        // return list of tuples (row, column)\n        // 0-indexed\n        // first sort by row, then sort by column\n        // if equal rows, sort row by column DESC\n        // return [] if no match\n        ArrayList<Pair<Integer, Integer>> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    result.add(new Pair<>(i, j));\n                }\n            }\n        }\n        // sort by row ascending\n        Collections.sort(result, new Comparator<Pair<Integer, Integer>>() {\n            @Override\n            public int compare(Pair<Integer, Integer> o1, Pair<Integer, Integer> o2) {\n                return o1.getValue0().compareTo(o2.getValue0());\n            }\n        });\n        // sort by col descending\n        Collections.sort(result, new Comparator<Pair<Integer, Integer>>() {\n            @Override\n            public int compare(Pair<Integer, Integer> o1, Pair<Integer, Integer> o2) {\n                return o2.getValue1().compareTo(o1.getValue1());\n            }\n        });\n        return result;",
        "grade-24": {
            "execution": 0
        },
        "58": "ArrayList<Pair<Integer, Integer>> res = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    res.add(new Pair<>(i, j));\n                }\n            }\n        }\n        // res.sort((a, b) -> {\n        //     int cmp = Integer.compare(a.getValue0(), b.getValue0());\n        //     if (cmp == 0) {\n        //         return Integer.compare(b.getValue1(), a.getValue1());\n        //     }\n        //     return cmp;\n        // });\n        res.sort(Comparator.comparing(Pair::getValue0).thenComparing(Pair::getValue1, Comparator.reverseOrder()));\n        return res;",
        "grade-58": {
            "execution": 0
        },
        "62": "if (lst.size() == 0) {\n            return new ArrayList<Pair<Integer, Integer>>();\n        }\n        ArrayList<Pair<Integer, Integer>> res = new ArrayList<Pair<Integer, Integer>>();\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    res.add(new Pair<Integer, Integer>(i, j));\n                }\n            }\n        }\n        Collections.sort(res, new Comparator<Pair<Integer, Integer>>() {\n            @Override\n            public int compare(Pair<Integer, Integer> o1, Pair<Integer, Integer> o2) {\n                if (o1.getValue0().equals(o2.getValue0())) {\n                    return o2.getValue1().compareTo(o1.getValue1());\n                }\n                return o1.getValue0().compareTo(o2.getValue0());\n            }\n        });\n        return res;",
        "grade-62": {
            "execution": 0
        },
        "138": "return Stream.of(lst)\n            .flatMap(List::stream)\n            .flatMap(i -> \n                Stream.of(i)\n                    .flatMap(j -> \n                        Stream.of(j)\n                            .filter(k -> k == x)\n                            .map(k -> \n                                Pair.with(\n                                    lst.indexOf(i),\n                                    i.indexOf(j)\n                                )\n                            )\n                    )\n            )\n            .collect(Collectors.toCollection(ArrayList::new));",
        "grade-138": {
            "execution": 0
        },
        "166": "ArrayList<Pair<Integer, Integer>> pairs = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            int start = 0;\n            while (true) {\n                int j = start + lst.get(i).subList(start, lst.get(i).size()).indexOf(x);\n                if (j == -1) {\n                    break;\n                }\n                start = j + 1;\n                pairs.add(new Pair<>(i, j));\n            }\n        }\n        Collections.sort(pairs, (a, b) -> {\n            if (a.getValue0() != b.getValue0()) {\n                return a.getValue0() - b.getValue0();\n            }\n            return b.getValue1() - a.getValue1();\n        });\n        return pairs;",
        "grade-166": {
            "execution": 0
        },
        "bleu-177": 0.5538540625107475,
        "bleu-29": 0.1901914868564411,
        "bleu-6": 0.20494992699789513,
        "bleu-73": 0.356976639037064,
        "bleu-65": 0.21947700267058548,
        "bleu-60": 0.5326332181563188,
        "bleu-36": 0.311207242455531,
        "bleu-27": 0.28641672967680853,
        "bleu-191": 0.0,
        "bleu-148": 0.2647497761409263,
        "bleu-23": 1.1531001467923503e-06,
        "bleu-162": 0.0,
        "bleu-115": 0.48242542735676713,
        "bleu-8": 0.4379087842038754,
        "bleu-7": 0.34874805620433563,
        "bleu-24": 0.27300212238118304,
        "bleu-58": 0.36183830575626375,
        "bleu-62": 0.3336563188655481,
        "bleu-138": 0.08857357166113265,
        "bleu-166": 0.3702634336468676,
        "codebleu-177": 0.6081720239873667,
        "codebleu-29": 0.7110995472536489,
        "codebleu-6": 0.7020653244242349,
        "codebleu-73": 0.6561493324754366,
        "codebleu-65": 0.7302051598776063,
        "codebleu-60": 0.7340175434336101,
        "codebleu-36": 0.6186791789607413,
        "codebleu-27": 0.6487431599197151,
        "codebleu-191": 0.007532956685499057,
        "codebleu-148": 0.7016597148487183,
        "codebleu-23": 0.037664902950746044,
        "codebleu-162": 0.011299435028248588,
        "codebleu-115": 0.7272129754446968,
        "codebleu-8": 0.6934647767716945,
        "codebleu-7": 0.7130313207007246,
        "codebleu-24": 0.7192120409654091,
        "codebleu-58": 0.7134547326636866,
        "codebleu-62": 0.6993399639301966,
        "codebleu-138": 0.3694846942042891,
        "codebleu-166": 0.6943611943998592,
        "chrf-177": 0.5842278915462711,
        "chrf-29": 0.42469856183039506,
        "chrf-6": 0.4091921690521034,
        "chrf-73": 0.45015878814199295,
        "chrf-65": 0.4649313126089566,
        "chrf-60": 0.5510603087878642,
        "chrf-36": 0.4168116280167686,
        "chrf-27": 0.4248906476924126,
        "chrf-191": 0.008569210063153537,
        "chrf-148": 0.4260401180394224,
        "chrf-23": 0.09221927501378784,
        "chrf-162": 0.01859642040683279,
        "chrf-115": 0.5462793547058665,
        "chrf-8": 0.5492845634908302,
        "chrf-7": 0.47619769342156476,
        "chrf-24": 0.4379055736922345,
        "chrf-58": 0.5115634790374802,
        "chrf-62": 0.5020938012817592,
        "chrf-138": 0.18818864507479735,
        "chrf-166": 0.48799311345603685,
        "rougel-177": 0.702928870292887,
        "rougel-29": 0.3543859649122807,
        "rougel-6": 0.3611111111111111,
        "rougel-73": 0.5103448275862068,
        "rougel-65": 0.3636363636363636,
        "rougel-60": 0.6360424028268551,
        "rougel-36": 0.475177304964539,
        "rougel-27": 0.45317220543806647,
        "rougel-191": 0.0,
        "rougel-148": 0.484149855907781,
        "rougel-23": 0.11428571428571428,
        "rougel-162": 0.0,
        "rougel-115": 0.6112956810631228,
        "rougel-8": 0.5666666666666667,
        "rougel-7": 0.5095890410958904,
        "rougel-24": 0.42956120092378763,
        "rougel-58": 0.5242165242165242,
        "rougel-62": 0.49867374005305043,
        "rougel-138": 0.33187772925764186,
        "rougel-166": 0.53125,
        "meteor-177": 0.5506748237081878,
        "meteor-29": 0.4387402081611456,
        "meteor-6": 0.4622683936648811,
        "meteor-73": 0.5147720503956317,
        "meteor-65": 0.47895427160493825,
        "meteor-60": 0.5508954086424203,
        "meteor-36": 0.4839506078435734,
        "meteor-27": 0.500646554339091,
        "meteor-191": 0.0,
        "meteor-148": 0.46121951889088897,
        "meteor-23": 0.049154092363968914,
        "meteor-162": 0.0,
        "meteor-115": 0.5435446915515652,
        "meteor-8": 0.57652764080842,
        "meteor-7": 0.4947275300778486,
        "meteor-24": 0.4928075781138978,
        "meteor-58": 0.4728265171698793,
        "meteor-62": 0.5134859308937163,
        "meteor-138": 0.2684318715740016,
        "meteor-166": 0.4679991157587174,
        "ruby-177": 0.6106870229007634,
        "ruby-29": 0.22323462414578588,
        "ruby-6": 0.2305630026809652,
        "ruby-73": 0.339622641509434,
        "ruby-65": 0.2335600907029478,
        "ruby-60": 0.4407894736842105,
        "ruby-36": 0.2847682119205298,
        "ruby-27": 0.35,
        "ruby-191": 0.0,
        "ruby-148": 0.34259259259259256,
        "ruby-23": 0.06106870229007633,
        "ruby-162": 0.0,
        "ruby-115": 0.4117647058823529,
        "ruby-8": 0.4201183431952663,
        "ruby-7": 0.3076923076923077,
        "ruby-24": 0.23841059602649006,
        "ruby-58": 0.35,
        "ruby-62": 0.30487804878048785,
        "ruby-138": 0.2137404580152672,
        "ruby-166": 0.3915343915343915,
        "codebertscore_f1-177": 0.8864874243736267,
        "codebertscore_f3-177": 0.8742022514343262,
        "codebertscore_f1-29": 0.7972773313522339,
        "codebertscore_f3-29": 0.8256492018699646,
        "codebertscore_f1-6": 0.7954220771789551,
        "codebertscore_f3-6": 0.8249940276145935,
        "codebertscore_f1-73": 0.8023965954780579,
        "codebertscore_f3-73": 0.8293414115905762,
        "codebertscore_f1-65": 0.8094805479049683,
        "codebertscore_f3-65": 0.8674635291099548,
        "codebertscore_f1-60": 0.8281447291374207,
        "codebertscore_f3-60": 0.8528682589530945,
        "codebertscore_f1-36": 0.7812449932098389,
        "codebertscore_f3-36": 0.8002217411994934,
        "codebertscore_f1-27": 0.7772791981697083,
        "codebertscore_f3-27": 0.8211629390716553,
        "codebertscore_f1-191": 0.46690741181373596,
        "codebertscore_f3-191": 0.45246464014053345,
        "codebertscore_f1-148": 0.7949920892715454,
        "codebertscore_f3-148": 0.8252723813056946,
        "codebertscore_f1-23": 0.6488356590270996,
        "codebertscore_f3-23": 0.5809532999992371,
        "codebertscore_f1-162": 0.5121191143989563,
        "codebertscore_f3-162": 0.503709614276886,
        "codebertscore_f1-115": 0.8262515068054199,
        "codebertscore_f3-115": 0.8536278009414673,
        "codebertscore_f1-8": 0.8356550335884094,
        "codebertscore_f3-8": 0.8587238192558289,
        "codebertscore_f1-7": 0.8058872222900391,
        "codebertscore_f3-7": 0.8498334288597107,
        "codebertscore_f1-24": 0.7573407888412476,
        "codebertscore_f3-24": 0.809511125087738,
        "codebertscore_f1-58": 0.7882136702537537,
        "codebertscore_f3-58": 0.838046133518219,
        "codebertscore_f1-62": 0.8025152683258057,
        "codebertscore_f3-62": 0.8395021557807922,
        "codebertscore_f1-138": 0.6985764503479004,
        "codebertscore_f3-138": 0.7053210735321045,
        "codebertscore_f1-166": 0.7990260720252991,
        "codebertscore_f3-166": 0.8374399542808533,
        "codebertscore_s_f1-177": 0.9636062383651733,
        "codebertscore_s_f3-177": 0.9567939043045044,
        "codebertscore_s_f1-29": 0.9131836891174316,
        "codebertscore_s_f3-29": 0.9382104873657227,
        "codebertscore_s_f1-6": 0.9244938492774963,
        "codebertscore_s_f3-6": 0.9466113448143005,
        "codebertscore_s_f1-73": 0.9265263676643372,
        "codebertscore_s_f3-73": 0.9383350014686584,
        "codebertscore_s_f1-65": 0.9098908305168152,
        "codebertscore_s_f3-65": 0.9507585763931274,
        "codebertscore_s_f1-60": 0.9334536790847778,
        "codebertscore_s_f3-60": 0.9477043151855469,
        "codebertscore_s_f1-36": 0.9207807779312134,
        "codebertscore_s_f3-36": 0.9285587072372437,
        "codebertscore_s_f1-27": 0.9136288166046143,
        "codebertscore_s_f3-27": 0.9352409839630127,
        "codebertscore_s_f1-191": 0.9298463463783264,
        "codebertscore_s_f3-191": 0.8918484449386597,
        "codebertscore_s_f1-148": 0.9183682799339294,
        "codebertscore_s_f3-148": 0.9365559816360474,
        "codebertscore_s_f1-23": 0.9352033734321594,
        "codebertscore_s_f3-23": 0.8981236219406128,
        "codebertscore_s_f1-162": 0.9283336997032166,
        "codebertscore_s_f3-162": 0.8914374113082886,
        "codebertscore_s_f1-115": 0.9342390894889832,
        "codebertscore_s_f3-115": 0.9482508301734924,
        "codebertscore_s_f1-8": 0.9384717345237732,
        "codebertscore_s_f3-8": 0.9488546848297119,
        "codebertscore_s_f1-7": 0.9207689762115479,
        "codebertscore_s_f3-7": 0.9455457329750061,
        "codebertscore_s_f1-24": 0.8982650637626648,
        "codebertscore_s_f3-24": 0.9286820888519287,
        "codebertscore_s_f1-58": 0.9174299240112305,
        "codebertscore_s_f3-58": 0.9438415765762329,
        "codebertscore_s_f1-62": 0.919386625289917,
        "codebertscore_s_f3-62": 0.9414252042770386,
        "codebertscore_s_f1-138": 0.9019427299499512,
        "codebertscore_s_f3-138": 0.9020203948020935,
        "codebertscore_s_f1-166": 0.9257400035858154,
        "codebertscore_s_f3-166": 0.9417670369148254,
        "gpt35_nsnr-177": 4,
        "raw_gpt35_nsnr-177": "4",
        "gpt35_nsnr-29": 4,
        "raw_gpt35_nsnr-29": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-73": 4,
        "raw_gpt35_nsnr-73": "4",
        "gpt35_nsnr-65": 4,
        "raw_gpt35_nsnr-65": "4",
        "gpt35_nsnr-60": 4,
        "raw_gpt35_nsnr-60": "4",
        "gpt35_nsnr-36": 4,
        "raw_gpt35_nsnr-36": "4",
        "gpt35_nsnr-27": 4,
        "raw_gpt35_nsnr-27": "4",
        "gpt35_nsnr-191": 0,
        "raw_gpt35_nsnr-191": "0",
        "gpt35_nsnr-148": 4,
        "raw_gpt35_nsnr-148": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-162": 4,
        "raw_gpt35_nsnr-162": "4",
        "gpt35_nsnr-115": 4,
        "raw_gpt35_nsnr-115": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-24": 4,
        "raw_gpt35_nsnr-24": "4",
        "gpt35_nsnr-58": 4,
        "raw_gpt35_nsnr-58": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-138": 3,
        "raw_gpt35_nsnr-138": "3",
        "gpt35_nsnr-166": 4,
        "raw_gpt35_nsnr-166": "4",
        "gpt35_nswr-177": 3,
        "raw_gpt35_nswr-177": "3",
        "gpt35_nswr-29": 3,
        "raw_gpt35_nswr-29": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-73": 4,
        "raw_gpt35_nswr-73": "4",
        "gpt35_nswr-65": 3,
        "raw_gpt35_nswr-65": "3",
        "gpt35_nswr-60": 3,
        "raw_gpt35_nswr-60": "3",
        "gpt35_nswr-36": 3,
        "raw_gpt35_nswr-36": "3",
        "gpt35_nswr-27": 4,
        "raw_gpt35_nswr-27": "4",
        "gpt35_nswr-191": 0,
        "raw_gpt35_nswr-191": "N/A (code snippet is missing)",
        "gpt35_nswr-148": 3,
        "raw_gpt35_nswr-148": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-162": 0,
        "raw_gpt35_nswr-162": "Score: 3",
        "gpt35_nswr-115": 3,
        "raw_gpt35_nswr-115": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-24": 3,
        "raw_gpt35_nswr-24": "3",
        "gpt35_nswr-58": 3,
        "raw_gpt35_nswr-58": "3",
        "gpt35_nswr-62": 3,
        "raw_gpt35_nswr-62": "3",
        "gpt35_nswr-138": 3,
        "raw_gpt35_nswr-138": "3",
        "gpt35_nswr-166": 3,
        "raw_gpt35_nswr-166": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return median of elements in the list l.\n    // >>> median([3, 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n    public static float median(ArrayList<Integer> l) {\n",
        "snippet": [
            "        List<Integer> list = l;\n        Collections.sort(list);\n        if (l.size() % 2 == 1) {\n            return l.get(l.size() / 2);\n        } else {\n            return (l.get(l.size() / 2 - 1) + l.get(l.size() / 2)) / 2.0;\n        }\n    }\n}"
        ],
        "simplified": "Return median of elements in the list l.",
        "task_id": "47",
        "194": "Collections.sort(l);\n        int n = l.size();\n        float m = n % 2 == 0 ? (l.get(n / 2) + l.get(n / 2 - 1)) / 2.0f : l.get(n / 2);\n        return m;",
        "grade-194": {
            "execution": 1
        },
        "30": "// TODO: fill me in\n        return 0;",
        "grade-30": {
            "execution": 0
        },
        "6": "//your code goes here\n        int n = l.size();\n        l.sort(null);\n        if(n%2 == 0)\n        {\n            return (float)(l.get(n/2-1)+l.get(n/2))/2;\n        }\n        else\n        {\n            return l.get(n/2);\n        }",
        "grade-6": {
            "execution": 1
        },
        "77": "Collections.sort(l);\n        int N = l.size();\n        if (N % 2 == 0) {\n            return (l.get(N / 2) + l.get(N / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(N / 2);\n        }",
        "grade-77": {
            "execution": 1
        },
        "68": "// Insert the elements of l into a sorted list\n        ArrayList<Integer> sortedList = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            int number = l.get(i);\n            if (sortedList.size() == 0) {\n                sortedList.add(number);\n            } else {\n                int j = 0;\n                while (j < sortedList.size() && number > sortedList.get(j)) {\n                    j++;\n                }\n                sortedList.add(j, number);\n            }\n        }\n        // Return the median\n        if (sortedList.size() % 2 == 0) {\n            return (sortedList.get(sortedList.size() / 2) + sortedList.get(sortedList.size() / 2 - 1)) / 2f;\n        } else {\n            return sortedList.get(sortedList.size() / 2);\n        }",
        "grade-68": {
            "execution": 1
        },
        "63": "//Float f = null;\n        float a = 0;\n        Collections.sort(l);\n        int x = l.size();\n        float y = (float)x/2;\n        int z = l.size()/2;\n        if(y - z == 0)\n        {\n            int sum = 0;\n            sum = l.get(x/2) + l.get((x/2)-1);\n            a = (float)sum/2;\n        }\n        else\n        {\n            a = l.get(x/2);\n        }\n        return a;",
        "grade-63": {
            "execution": 1
        },
        "37": "throw new RuntimeException(\"Not implemented\");",
        "grade-37": {
            "execution": 0
        },
        "26": "Collections.sort(l);\n        float mid = (float) (l.size()/2);\n        return l.size() % 2 == 0? (float) (l.get((int) mid) + l.get((int) mid - 1))/2 : l.get((int) mid);",
        "grade-26": {
            "execution": 1
        },
        "162": "// Replace with your code.\n        Collections.sort(l);\n        float med;\n        int n = l.size();\n        int a = (n - 1) / 2;\n        int b = n / 2;\n        if(n % 2 == 0) {\n            med = (float)(l.get(a) + l.get(b)) / 2;\n        } else {\n            med = l.get(b);\n        }\n        return med;",
        "grade-162": {
            "execution": 1
        },
        "22": "Collections.sort(l);\n        float m = 0;\n        int n = l.size();\n        if (n % 2 == 0) {\n            m = (l.get(n / 2) + l.get(n / 2 - 1)) / 2.0f;\n        } else {\n            m = l.get(n / 2);\n        }\n        return m;",
        "grade-22": {
            "execution": 1
        },
        "179": "// Your code here!\n        return -1;",
        "grade-179": {
            "execution": 0
        },
        "125": "Collections.sort(l);\n        int n = l.size();\n        if (n%2 == 0) {\n            int i = n/2-1;\n            int j = n/2;\n            return (l.get(i)+l.get(j))/2.0f;\n        } else {\n            int i = n/2;\n            return l.get(i);\n        }",
        "grade-125": {
            "execution": 1
        },
        "8": "int n = l.size();\n        if (n == 0)\n            return 0;\n        Collections.sort(l);\n        if (n % 2 == 0)\n            return (l.get(n / 2) + l.get(n / 2 - 1)) / 2.0f;\n        else\n            return l.get(n / 2);",
        "grade-8": {
            "execution": 1
        },
        "7": "l.sort(null);\n        int len = l.size();\n        if (len % 2 == 0) {\n            return (l.get(len / 2) + l.get(len / 2 - 1)) / 2.0f;\n        } else {\n            return l.get(len / 2);\n        }",
        "grade-7": {
            "execution": 1
        },
        "23": "Collections.sort(l);\n        int sz = l.size();\n        if (sz % 2 == 0) {\n            return (l.get(sz / 2) + l.get(sz / 2 - 1)) / 2;\n        } else {\n            return l.get(sz / 2);\n        }",
        "grade-23": {
            "execution": 0
        },
        "61": "return (l.size() % 2 == 0) ? (l.get(l.size() / 2) + l.get(l.size() / 2 - 1)) / 2.0f : l.get(l.size() / 2);",
        "grade-61": {
            "execution": 0
        },
        "65": "float med;\n        Collections.sort(l);\n        med = l.get(l.size()/2);\n        return med;",
        "grade-65": {
            "execution": 0
        },
        "151": "Collections.sort(l);\n        if(l.size() % 2 == 0) {\n            int n = l.size() / 2;\n            return (l.get(n - 1) + l.get(n)) / 2.0f;\n        } else {\n            return l.get(l.size() / 2);\n        }",
        "grade-151": {
            "execution": 1
        },
        "182": "float median = 0;\n        int size = l.size();\n        float middle = (float)Math.floor(size / 2);\n        if (size % 2 == 0) {\n            median = (float)(l.get((int)middle) + l.get((int)middle - 1)) / 2;\n        } else {\n            median = l.get((int)middle);\n        }\n        return median;",
        "grade-182": {
            "execution": 0
        },
        "167": "Collections.sort(l);\n        int n = l.size();\n        int middle = n / 2;\n        if (n % 2 == 1) {\n            return l.get(middle);\n        } else {\n            return (l.get(middle - 1) + l.get(middle)) / 2.0f;\n        }",
        "grade-167": {
            "execution": 1
        },
        "bleu-194": 0.3418367277554225,
        "bleu-30": 6.45034886790615e-05,
        "bleu-6": 0.46777439680541705,
        "bleu-77": 0.4679745952123217,
        "bleu-68": 0.23063329337925256,
        "bleu-63": 0.2965413494709626,
        "bleu-37": 0.00010881541290795798,
        "bleu-26": 0.41535777294015097,
        "bleu-162": 0.31970787882394935,
        "bleu-22": 0.4208431465908303,
        "bleu-179": 6.751161786488661e-05,
        "bleu-125": 0.4059347065662632,
        "bleu-8": 0.41782489320805394,
        "bleu-7": 0.4552750534783487,
        "bleu-23": 0.4518476036509809,
        "bleu-61": 0.5786457103811979,
        "bleu-65": 0.08503951590357127,
        "bleu-151": 0.6311243888620883,
        "bleu-182": 0.32972683695569344,
        "bleu-167": 0.466122370211737,
        "codebleu-194": 0.4863229503254423,
        "codebleu-30": 0.03129423975879285,
        "codebleu-6": 0.5952885638785644,
        "codebleu-77": 0.5589837243711132,
        "codebleu-68": 0.7665928015856078,
        "codebleu-63": 0.6239753063896398,
        "codebleu-37": 0.03125033415995486,
        "codebleu-26": 0.5783361235546735,
        "codebleu-162": 0.584083676260899,
        "codebleu-22": 0.5813823532915108,
        "codebleu-179": 0.03650889305766802,
        "codebleu-125": 0.5887738887771681,
        "codebleu-8": 0.5636795769405654,
        "codebleu-7": 0.5553640148517056,
        "codebleu-23": 0.5503548136390479,
        "codebleu-61": 0.6028567102093239,
        "codebleu-65": 0.23265653015643073,
        "codebleu-151": 0.6872496681176801,
        "codebleu-182": 0.5726991972231038,
        "codebleu-167": 0.5532194703030434,
        "chrf-194": 0.38227212556452445,
        "chrf-30": 0.04774697613673701,
        "chrf-6": 0.44594659377168033,
        "chrf-77": 0.521061875504147,
        "chrf-68": 0.4213797253213538,
        "chrf-63": 0.42371842853587444,
        "chrf-37": 0.05403829508352865,
        "chrf-26": 0.44164303431993657,
        "chrf-162": 0.3945337687149767,
        "chrf-22": 0.4264987000950665,
        "chrf-179": 0.054634326171311184,
        "chrf-125": 0.4711013204933968,
        "chrf-8": 0.47003864225338,
        "chrf-7": 0.47633169967145184,
        "chrf-23": 0.5168496519738156,
        "chrf-61": 0.531161426998828,
        "chrf-65": 0.29944625028853955,
        "chrf-151": 0.6603401934307525,
        "chrf-182": 0.3250684671439912,
        "chrf-167": 0.5303412949037422,
        "rougel-194": 0.527027027027027,
        "rougel-30": 0.0851063829787234,
        "rougel-6": 0.5443037974683543,
        "rougel-77": 0.5695364238410596,
        "rougel-68": 0.4097222222222222,
        "rougel-63": 0.4623115577889447,
        "rougel-37": 0.0631578947368421,
        "rougel-26": 0.5443037974683543,
        "rougel-162": 0.4293785310734463,
        "rougel-22": 0.5217391304347826,
        "rougel-179": 0.10638297872340424,
        "rougel-125": 0.4939759036144578,
        "rougel-8": 0.5222929936305732,
        "rougel-7": 0.5695364238410596,
        "rougel-23": 0.5771812080536913,
        "rougel-61": 0.689655172413793,
        "rougel-65": 0.4107142857142857,
        "rougel-151": 0.6751592356687898,
        "rougel-182": 0.47398843930635837,
        "rougel-167": 0.6447368421052632,
        "meteor-194": 0.5125749008355135,
        "meteor-30": 0.04856396866840731,
        "meteor-6": 0.5803480589022758,
        "meteor-77": 0.6210341568786284,
        "meteor-68": 0.6478133608815426,
        "meteor-63": 0.5136942433414619,
        "meteor-37": 0.019556714471968707,
        "meteor-26": 0.46225719203343985,
        "meteor-162": 0.4612146995485906,
        "meteor-22": 0.5613977851985379,
        "meteor-179": 0.055664345807948934,
        "meteor-125": 0.5614444624748012,
        "meteor-8": 0.5760686843883078,
        "meteor-7": 0.6133609181311637,
        "meteor-23": 0.5890162045501226,
        "meteor-61": 0.687779527490296,
        "meteor-65": 0.23017866000566897,
        "meteor-151": 0.6368618546545843,
        "meteor-182": 0.49202662721893486,
        "meteor-167": 0.555775708341589,
        "ruby-194": 0.40476190476190477,
        "ruby-30": 0.04761904761904767,
        "ruby-6": 0.36904761904761907,
        "ruby-77": 0.3928571428571429,
        "ruby-68": 0.2647058823529411,
        "ruby-63": 0.34782608695652173,
        "ruby-37": 0.0357142857142857,
        "ruby-26": 0.34523809523809523,
        "ruby-162": 0.27956989247311825,
        "ruby-22": 0.3214285714285714,
        "ruby-179": 0.059523809523809534,
        "ruby-125": 0.26190476190476186,
        "ruby-8": 0.33333333333333337,
        "ruby-7": 0.3928571428571429,
        "ruby-23": 0.40476190476190477,
        "ruby-61": 0.5357142857142857,
        "ruby-65": 0.27380952380952384,
        "ruby-151": 0.5119047619047619,
        "ruby-182": 0.2359550561797753,
        "ruby-167": 0.45238095238095233,
        "codebertscore_f1-194": 0.8457869291305542,
        "codebertscore_f3-194": 0.8487988710403442,
        "codebertscore_f1-30": 0.5919430255889893,
        "codebertscore_f3-30": 0.5766270756721497,
        "codebertscore_f1-6": 0.838777482509613,
        "codebertscore_f3-6": 0.8535826206207275,
        "codebertscore_f1-77": 0.8782990574836731,
        "codebertscore_f3-77": 0.8801993727684021,
        "codebertscore_f1-68": 0.7538201212882996,
        "codebertscore_f3-68": 0.787968099117279,
        "codebertscore_f1-63": 0.7953941822052002,
        "codebertscore_f3-63": 0.8244937658309937,
        "codebertscore_f1-37": 0.5807927250862122,
        "codebertscore_f3-37": 0.5740420818328857,
        "codebertscore_f1-26": 0.8330342173576355,
        "codebertscore_f3-26": 0.839030921459198,
        "codebertscore_f1-162": 0.8169195652008057,
        "codebertscore_f3-162": 0.8458240628242493,
        "codebertscore_f1-22": 0.8649752736091614,
        "codebertscore_f3-22": 0.8764245510101318,
        "codebertscore_f1-179": 0.5921619534492493,
        "codebertscore_f3-179": 0.5826027989387512,
        "codebertscore_f1-125": 0.8401038646697998,
        "codebertscore_f3-125": 0.8555485010147095,
        "codebertscore_f1-8": 0.8781182169914246,
        "codebertscore_f3-8": 0.8818954229354858,
        "codebertscore_f1-7": 0.8719654083251953,
        "codebertscore_f3-7": 0.8711413145065308,
        "codebertscore_f1-23": 0.8729373812675476,
        "codebertscore_f3-23": 0.8763723969459534,
        "codebertscore_f1-61": 0.8529120683670044,
        "codebertscore_f3-61": 0.833334743976593,
        "codebertscore_f1-65": 0.8170966506004333,
        "codebertscore_f3-65": 0.7990279793739319,
        "codebertscore_f1-151": 0.8919366002082825,
        "codebertscore_f3-151": 0.8964313864707947,
        "codebertscore_f1-182": 0.8164533972740173,
        "codebertscore_f3-182": 0.8360517024993896,
        "codebertscore_f1-167": 0.8814781904220581,
        "codebertscore_f3-167": 0.8871825933456421,
        "codebertscore_s_f1-194": 0.8623999953269958,
        "codebertscore_s_f3-194": 0.8632082939147949,
        "codebertscore_s_f1-30": 0.5952925086021423,
        "codebertscore_s_f3-30": 0.5847894549369812,
        "codebertscore_s_f1-6": 0.8543947339057922,
        "codebertscore_s_f3-6": 0.870602011680603,
        "codebertscore_s_f1-77": 0.8933596014976501,
        "codebertscore_s_f3-77": 0.8943647146224976,
        "codebertscore_s_f1-68": 0.770927369594574,
        "codebertscore_s_f3-68": 0.8038576245307922,
        "codebertscore_s_f1-63": 0.8131315112113953,
        "codebertscore_s_f3-63": 0.8457097411155701,
        "codebertscore_s_f1-37": 0.5621774792671204,
        "codebertscore_s_f3-37": 0.5556128621101379,
        "codebertscore_s_f1-26": 0.8500098586082458,
        "codebertscore_s_f3-26": 0.8541821241378784,
        "codebertscore_s_f1-162": 0.8370218276977539,
        "codebertscore_s_f3-162": 0.8685516715049744,
        "codebertscore_s_f1-22": 0.8786268830299377,
        "codebertscore_s_f3-22": 0.8889182209968567,
        "codebertscore_s_f1-179": 0.6221821904182434,
        "codebertscore_s_f3-179": 0.6099388003349304,
        "codebertscore_s_f1-125": 0.8601147532463074,
        "codebertscore_s_f3-125": 0.8763539791107178,
        "codebertscore_s_f1-8": 0.8912750482559204,
        "codebertscore_s_f3-8": 0.8971289396286011,
        "codebertscore_s_f1-7": 0.8867672681808472,
        "codebertscore_s_f3-7": 0.8857580423355103,
        "codebertscore_s_f1-23": 0.88709956407547,
        "codebertscore_s_f3-23": 0.8899479508399963,
        "codebertscore_s_f1-61": 0.8739438056945801,
        "codebertscore_s_f3-61": 0.8562383651733398,
        "codebertscore_s_f1-65": 0.8309164643287659,
        "codebertscore_s_f3-65": 0.8171749114990234,
        "codebertscore_s_f1-151": 0.9101690053939819,
        "codebertscore_s_f3-151": 0.9132360219955444,
        "codebertscore_s_f1-182": 0.8321731090545654,
        "codebertscore_s_f3-182": 0.8538995385169983,
        "codebertscore_s_f1-167": 0.8987412452697754,
        "codebertscore_s_f3-167": 0.9029110074043274,
        "gpt35_nsnr-194": 4,
        "raw_gpt35_nsnr-194": "4",
        "gpt35_nsnr-30": 2,
        "raw_gpt35_nsnr-30": "2",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-77": 4,
        "raw_gpt35_nsnr-77": "4",
        "gpt35_nsnr-68": 4,
        "raw_gpt35_nsnr-68": "4",
        "gpt35_nsnr-63": 4,
        "raw_gpt35_nsnr-63": "4",
        "gpt35_nsnr-37": 0,
        "raw_gpt35_nsnr-37": "0",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-162": 4,
        "raw_gpt35_nsnr-162": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-179": 2,
        "raw_gpt35_nsnr-179": "2",
        "gpt35_nsnr-125": 4,
        "raw_gpt35_nsnr-125": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-61": 4,
        "raw_gpt35_nsnr-61": "4",
        "gpt35_nsnr-65": 3,
        "raw_gpt35_nsnr-65": "3",
        "gpt35_nsnr-151": 4,
        "raw_gpt35_nsnr-151": "4",
        "gpt35_nsnr-182": 4,
        "raw_gpt35_nsnr-182": "4",
        "gpt35_nsnr-167": 4,
        "raw_gpt35_nsnr-167": "4",
        "gpt35_nswr-194": 4,
        "raw_gpt35_nswr-194": "4",
        "gpt35_nswr-30": 3,
        "raw_gpt35_nswr-30": "3",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-77": 4,
        "raw_gpt35_nswr-77": "4",
        "gpt35_nswr-68": 4,
        "raw_gpt35_nswr-68": "4",
        "gpt35_nswr-63": 4,
        "raw_gpt35_nswr-63": "4",
        "gpt35_nswr-37": 2,
        "raw_gpt35_nswr-37": "2",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-162": 4,
        "raw_gpt35_nswr-162": "4",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-179": 2,
        "raw_gpt35_nswr-179": "2",
        "gpt35_nswr-125": 4,
        "raw_gpt35_nswr-125": "4",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-61": 4,
        "raw_gpt35_nswr-61": "4",
        "gpt35_nswr-65": 3,
        "raw_gpt35_nswr-65": "3",
        "gpt35_nswr-151": 4,
        "raw_gpt35_nswr-151": "4",
        "gpt35_nswr-182": 4,
        "raw_gpt35_nswr-182": "4",
        "gpt35_nswr-167": 4,
        "raw_gpt35_nswr-167": "4"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> sort_numbers('three one five')\n    // 'one three five'\n    public static String sortNumbers(String numbers) {\n",
        "snippet": [
            "        String[] nums = numbers.split(\" \");\n        List<Integer> num = new ArrayList<>();\n        for (String string : nums) {\n            switch (string) {\n                case \"zero\" -> num.add(0);\n                case \"one\" -> num.add(1);\n                case \"two\" -> num.add(2);\n                case \"three\" -> num.add(3);\n                case \"four\" -> num.add(4);\n                case \"five\" -> num.add(5);\n                case \"six\" -> num.add(6);\n                case \"seven\" -> num.add(7);\n                case \"eight\" -> num.add(8);\n                case \"nine\" -> num.add(9);\n            }\n        }\n        Collections.sort(num);\n        List<String> result = new ArrayList<>();\n        for (int m : num) {\n            switch (m) {\n                case 0 -> result.add(\"zero\");\n                case 1 -> result.add(\"one\");\n                case 2 -> result.add(\"two\");\n                case 3 -> result.add(\"three\");\n                case 4 -> result.add(\"four\");\n                case 5 -> result.add(\"five\");\n                case 6 -> result.add(\"six\");\n                case 7 -> result.add(\"seven\");\n                case 8 -> result.add(\"eight\");\n                case 9 -> result.add(\"nine\");\n            }\n        }\n        return String.join(\" \", result);\n    }\n}"
        ],
        "simplified": "Input is a space-delimited string of numberals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Return the string with numbers sorted from smallest to largest",
        "task_id": "19",
        "181": "String[] s = numbers.split(\" \");\n        int[] map = new int[s.length];\n        for (int i = 0; i < s.length; i++) {\n            if (s[i].equals(\"zero\")) {\n                map[i] = 0;\n            } else if (s[i].equals(\"one\")) {\n                map[i] = 1;\n            } else if (s[i].equals(\"two\")) {\n                map[i] = 2;\n            } else if (s[i].equals(\"three\")) {\n                map[i] = 3;\n            } else if (s[i].equals(\"four\")) {\n                map[i] = 4;\n            } else if (s[i].equals(\"five\")) {\n                map[i] = 5;\n            } else if (s[i].equals(\"six\")) {\n                map[i] = 6;\n            } else if (s[i].equals(\"seven\")) {\n                map[i] = 7;\n            } else if (s[i].equals(\"eight\")) {\n                map[i] = 8;\n            } else if (s[i].equals(\"nine\")) {\n                map[i] = 9;\n            }\n        }\n        Arrays.sort(map);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < map.length; i++) {\n            if (map[i] == 0) {\n                sb.append(\"zero\");\n            } else if (map[i] == 1) {\n                sb.append(\"one\");\n            } else if (map[i] == 2) {\n                sb.append(\"two\");\n            } else if (map[i] == 3) {\n                sb.append(\"three\");\n            } else if (map[i] == 4) {\n                sb.append(\"four\");\n            } else if (map[i] == 5) {\n                sb.append(\"five\");\n            } else if (map[i] == 6) {\n                sb.append(\"six\");\n            } else if (map[i] == 7) {\n                sb",
        "grade-181": {
            "execution": 0
        },
        "29": "// Convert to Integer array and then sort\n        String[] numberStringArray = numbers.split(\" \");\n        Integer[] numberArray = Arrays.stream(numberStringArray).map(s -> convertNumeralsToIntegers(s)).toArray(Integer[]::new);\n        Arrays.sort(numberArray);\n        // Convert back to word form and return\n        return Arrays.stream(numberArray).map(i -> convertIntegersToNumerals(i)).collect(Collectors.joining(\" \"));",
        "grade-29": {
            "execution": 0
        },
        "6": "String[] numStr = numbers.split(\" \");\n        List<Integer> nums = new ArrayList<>();\n        for (String num : numStr) {\n            nums.add(numeralToInteger(num));\n        }\n        Collections.sort(nums);\n        StringBuilder sb = new StringBuilder();\n        for (int num : nums) {\n            sb.append(integerToNumeral(num) + \" \");\n        }\n        return sb.toString().trim();",
        "grade-6": {
            "execution": 0
        },
        "73": "if (numbers == null || numbers.length() == 0) {\n            return numbers;\n        }\n        String[] numbersWords = numbers.split(\" \");\n        if (numbersWords.length == 0) {\n            return numbers;\n        }\n        Map<String, Integer> map = new HashMap<>();\n        map.put(\"zero\", 0);\n        map.put(\"one\", 1);\n        map.put(\"two\", 2);\n        map.put(\"three\", 3);\n        map.put(\"four\", 4);\n        map.put(\"five\", 5);\n        map.put(\"six\", 6);\n        map.put(\"seven\", 7);\n        map.put(\"eight\", 8);\n        map.put(\"nine\", 9);\n        Arrays.sort(numbersWords, new Comparator<String>() {\n            @Override\n            public int compare(String s1, String s2) {\n                return map.get(s1) - map.get(s2);\n            }\n        });\n        StringBuilder sb = new StringBuilder();\n        sb.append(numbersWords[0]);\n        for (int i = 1; i < numbersWords.length; i++) {\n            sb.append(\" \");\n            sb.append(numbersWords[i]);\n        }\n        return sb.toString();",
        "grade-73": {
            "execution": 1
        },
        "65": "int zero = 0;\n        int one = 0;\n        int two = 0;\n        int three = 0;\n        int four = 0;\n        int five = 0;\n        int six = 0;\n        int seven = 0;\n        int eight = 0;\n        int nine = 0;\n        int sum = 0;\n        int carry = 0;\n        int borrowed = 0;\n        int temp = 0;\n        boolean done = false;\n        boolean borrow = false;\n        String num = \"\";\n        String[] parts = numbers.split(\" \");\n        for (int i = 0; i < parts.length; i++) {\n            switch (parts[i]) {\n                case \"zero\":\n                    zero++;\n                    break;\n                case \"one\":\n                    one++;\n                    break;\n                case \"two\":\n                    two++;\n                    break;\n                case \"three\":\n                    three++;\n                    break;\n                case \"four\":\n                    four++;\n                    break;\n                case \"five\":\n                    five++;\n                    break;\n                case \"six\":\n                    six++;\n                    break;\n                case \"seven\":\n                    seven++;\n                    break;\n                case \"eight\":\n                    eight++;\n                    break;\n                case \"nine\":\n                    nine++;\n                    break;\n            }\n        }\n        carry = (four + eight + nine) / 2;\n        borrowed = carry * 2;\n        if (five + borrowed >= 3) {\n            five -= 3;\n            borrowed -= 3;\n        } else {\n            five = 0;\n            borrowed = 0;\n        }\n        four -= borrowed;\n        borrow = false;\n        if (two - borrowed < 0) {\n            temp = 2 - borrowed;\n            borrowed = 2;\n            borrow = true;\n        } else {\n            borrowed -= two;\n        }\n        if (borrow) {\n            if (one - borrowed < 0) {\n                temp = 1 - borrowed;\n                borrowed = 1;\n            } else {\n                borrowed -= one;\n            }\n        }\n        done = false;\n        while (!done) {\n            switch (temp) {\n                case 0:\n                    done = true;\n                    break;",
        "grade-65": {
            "execution": 0
        },
        "60": "List<Integer> nums = Arrays.asList(numbers.split(\" \")).stream().map(x -> numeralToNumber(x)).collect(Collectors.toList());\n      Collections.sort(nums);\n      return nums.stream().map(x -> numberToNumeral(x)).collect(Collectors.joining(\" \"));",
        "grade-60": {
            "execution": 0
        },
        "36": "String[] num_tokens = numbers.split(\" \");\n        Map<String, Integer> numeral_map = new HashMap<String, Integer>();\n        numeral_map.put(\"zero\", 0);\n        numeral_map.put(\"one\", 1);\n        numeral_map.put(\"two\", 2);\n        numeral_map.put(\"three\", 3);\n        numeral_map.put(\"four\", 4);\n        numeral_map.put(\"five\", 5);\n        numeral_map.put(\"six\", 6);\n        numeral_map.put(\"seven\", 7);\n        numeral_map.put(\"eight\", 8);\n        numeral_map.put(\"nine\", 9);\n        List<Integer> numbers_list = new ArrayList<Integer>();\n        for (String num : num_tokens) {\n            numbers_list.add(numeral_map.get(num));\n        }\n        Collections.sort(numbers_list);\n        StringBuilder sb = new StringBuilder();\n        for (Integer num : numbers_list) {\n            for (Map.Entry<String, Integer> kv : numeral_map.entrySet()) {\n                if (kv.getValue().equals(num)) {\n                    sb.append(kv.getKey());\n                    sb.append(\" \");\n                }\n            }\n        }\n        return sb.toString().trim();",
        "grade-36": {
            "execution": 1
        },
        "27": "String[] nums = numbers.split(\" \");\n        String[] nums2 = new String[nums.length];\n        int j = 0;\n        for (int i = 0; i < nums.length; i++) {\n            if (nums[i].equals(\"zero\")) {\n                nums2[j] = \"0\";\n                j++;\n            } else if (nums[i].equals(\"one\")) {\n                nums2[j] = \"1\";\n                j++;\n            } else if (nums[i].equals(\"two\")) {\n                nums2[j] = \"2\";\n                j++;\n            } else if (nums[i].equals(\"three\")) {\n                nums2[j] = \"3\";\n                j++;\n            } else if (nums[i].equals(\"four\")) {\n                nums2[j] = \"4\";\n                j++;\n            } else if (nums[i].equals(\"five\")) {\n                nums2[j] = \"5\";\n                j++;\n            } else if (nums[i].equals(\"six\")) {\n                nums2[j] = \"6\";\n                j++;\n            } else if (nums[i].equals(\"seven\")) {\n                nums2[j] = \"7\";\n                j++;\n            } else if (nums[i].equals(\"eight\")) {\n                nums2[j] = \"8\";\n                j++;\n            } else if (nums[i].equals(\"nine\")) {\n                nums2[j] = \"9\";\n                j++;\n            }\n        }\n        String[] nums3 = Arrays.copyOf(nums2, j);\n        Arrays.sort(nums3);\n        String[] nums4 = new String[nums3.length];\n        for (int i = 0; i < nums3.length; i++) {\n            if (nums3[i].equals(\"0\")) {\n                nums4[i] = \"zero\";\n            } else if (nums3[i].equals(\"1\")) {\n                nums4[i] =",
        "grade-27": {
            "execution": 0
        },
        "192": "String result = \"\";\n        String[] nums = numbers.split(\" \");\n        ArrayList<Integer> numList = new ArrayList<Integer>();\n        for (String s : nums) {\n            switch (s) {\n                case \"zero\":\n                    numList.add(0);\n                    break;\n                case \"one\":\n                    numList.add(1);\n                    break;\n                case \"two\":\n                    numList.add(2);\n                    break;\n                case \"three\":\n                    numList.add(3);\n                    break;\n                case \"four\":\n                    numList.add(4);\n                    break;\n                case \"five\":\n                    numList.add(5);\n                    break;\n                case \"six\":\n                    numList.add(6);\n                    break;\n                case \"seven\":\n                    numList.add(7);\n                    break;\n                case \"eight\":\n                    numList.add(8);\n                    break;\n                case \"nine\":\n                    numList.add(9);\n                    break;\n            }\n        }\n        Collections.sort(numList);\n        for (int i = 0; i < numList.size(); i++) {\n            switch (numList.get(i)) {\n                case 0:\n                    result += \"zero\";\n                    break;\n                case 1:\n                    result += \"one\";\n                    break;\n                case 2:\n                    result += \"two\";\n                    break;\n                case 3:\n                    result += \"three\";\n                    break;\n                case 4:\n                    result += \"four\";\n                    break;\n                case 5:\n                    result += \"five\";\n                    break;\n                case 6:\n                    result += \"six\";\n                    break;\n                case 7:\n                    result += \"seven\";\n                    break;\n                case 8:\n                    result += \"eight\";\n                    break;\n                case 9:\n                    result += \"nine\";\n                    break;\n            }\n            if (i != numList.size() - 1) {\n                result += \" \";\n            }\n        }\n        return result;",
        "grade-192": {
            "execution": 1
        },
        "152": "// Your code here\n        int[] digits = Arrays.stream(numbers.split(\" \")).mapToInt(Integer::parseInt).toArray();\n        Arrays.sort(digits);\n        return Arrays.stream(digits).mapToObj(String::valueOf).collect(Collectors.joining(\" \"));",
        "grade-152": {
            "execution": 0
        },
        "22": "Map<String, Integer> numerals = new HashMap<>();\n        numerals.put(\"zero\", 0);\n        numerals.put(\"one\", 1);\n        numerals.put(\"two\", 2);\n        numerals.put(\"three\", 3);\n        numerals.put(\"four\", 4);\n        numerals.put(\"five\", 5);\n        numerals.put(\"six\", 6);\n        numerals.put(\"seven\", 7);\n        numerals.put(\"eight\", 8);\n        numerals.put(\"nine\", 9);\n        String[] split = numbers.split(\" \");\n        return Arrays.stream(split)\n            .map(numerals::get)\n            .sorted()\n            .mapToObj(Integer::toString)\n            .collect(Collectors.joining(\" \"));",
        "grade-22": {
            "execution": 0
        },
        "165": "if (numbers == null || numbers.isEmpty()) {\n            return numbers;\n        }\n        String[] nums = numbers.split(\" \");\n        List<Integer> numsInt = new ArrayList<>();\n        for (String num : nums) {\n            numsInt.add(str2Int(num));\n        }\n        Collections.sort(numsInt);\n        String ret = \"\";\n        for (int num : numsInt) {\n            ret += num2Str(num) + \" \";\n        }\n        ret = ret.trim();\n        return ret;",
        "grade-165": {
            "execution": 0
        },
        "115": "String[] arr = numbers.split(\" \");\n        // Arrays.sort(arr); // default is alphabetic sort\n        Arrays.sort(arr, new Comparator<String>() {\n            public int compare(String a, String b) {\n                int aValue = convertToNumber(a);\n                int bValue = convertToNumber(b);\n                if (aValue < bValue) {\n                    return -1;\n                } else if (aValue > bValue) {\n                    return 1;\n                } else {\n                    return 0;\n                }\n            }\n        });\n        String result = String.join(\" \", arr);\n        return result;",
        "grade-115": {
            "execution": 0
        },
        "8": "List<String> numbersList = Arrays.asList(numbers.split(\" \"));\n        ArrayList<Integer> intNumbers = new ArrayList<Integer>();\n        for (String number: numbersList) {\n            int integer = convertToInteger(number);\n            intNumbers.add(integer);\n        }\n        Collections.sort(intNumbers);\n        List<String> numbersList2 = new ArrayList<String>();\n        for (Integer integer: intNumbers) {\n            String number = convertToNumber(integer);\n            numbersList2.add(number);\n        }\n        String numbers2 = String.join(\" \", numbersList2);\n        return numbers2;",
        "grade-8": {
            "execution": 0
        },
        "7": "// TODO: implement sortNumbers\n        HashMap<String, Integer> numeralMap = new HashMap<String, Integer>();\n        numeralMap.put(\"zero\", 0);\n        numeralMap.put(\"one\", 1);\n        numeralMap.put(\"two\", 2);\n        numeralMap.put(\"three\", 3);\n        numeralMap.put(\"four\", 4);\n        numeralMap.put(\"five\", 5);\n        numeralMap.put(\"six\", 6);\n        numeralMap.put(\"seven\", 7);\n        numeralMap.put(\"eight\", 8);\n        numeralMap.put(\"nine\", 9);\n        String[] tokens = numbers.split(\" \");\n        int[] array = new int[tokens.length];\n        for (int i = 0; i < tokens.length; i++) {\n            array[i] = numeralMap.get(tokens[i]);\n        }\n        Arrays.sort(array);\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < array.length; i++) {\n            result.append(array[i]);\n            if (i < array.length - 1) {\n                result.append(\" \");\n            }\n        }\n        return result.toString();",
        "grade-7": {
            "execution": 0
        },
        "24": "String[] nums = numbers.split(\" \");\n        Arrays.sort(nums, String.CASE_INSENSITIVE_ORDER);\n        return String.join(\" \", nums);",
        "grade-24": {
            "execution": 0
        },
        "58": "// Good luck!\n        int[] sorted = Arrays.stream(numbers.split(\" \")).mapToInt(i -> Integer.parseInt(\n                i.replace(\"zero\", \"0\").replace(\"one\", \"1\").replace(\"two\", \"2\").replace(\"three\", \"3\").replace(\"four\", \"4\").replace(\"five\", \"5\").replace(\"six\", \"6\").replace(\"seven\", \"7\").replace(\"eight\", \"8\").replace(\"nine\", \"9\"))).sorted().toArray();\n        return Arrays.stream(sorted).mapToObj(i -> String.valueOf(i).replace(\"0\", \"zero\").replace(\"1\", \"one\").replace(\"2\", \"two\").replace(\"3\", \"three\").replace(\"4\", \"four\").replace(\"5\", \"five\").replace(\"6\", \"six\").replace(\"7\", \"seven\").replace(\"8\", \"eight\").replace(\"9\", \"nine\")).collect(Collectors.joining(\" \"));",
        "grade-58": {
            "execution": 0
        },
        "62": "String[] input = numbers.split(\" \");\n        String[] output = new String[input.length];\n        for (int i = 0; i < input.length; i++) {\n            output[Integer.parseInt(input[i])] = input[i];\n        }\n        return String.join(\" \", output);",
        "grade-62": {
            "execution": 0
        },
        "142": "// TODO: Write your code here\n        return null;",
        "grade-142": {
            "execution": 0
        },
        "170": "//your code here\n        return numbers;",
        "grade-170": {
            "execution": 0
        },
        "bleu-181": 0.1710647700524682,
        "bleu-29": 0.01854003408784595,
        "bleu-6": 0.040323623165514,
        "bleu-73": 0.18622051469152068,
        "bleu-65": 0.16855435754006923,
        "bleu-60": 0.009056382258391508,
        "bleu-36": 0.22453317153711227,
        "bleu-27": 0.15280998409643293,
        "bleu-192": 0.3948657841353371,
        "bleu-152": 0.004553617360791843,
        "bleu-22": 0.11249977880843533,
        "bleu-165": 0.05016079614003873,
        "bleu-115": 0.03689623648233867,
        "bleu-8": 0.07076695469399531,
        "bleu-7": 0.18629963011274345,
        "bleu-24": 7.58355261264305e-05,
        "bleu-58": 0.17849840793937413,
        "bleu-62": 0.007663822202063249,
        "bleu-142": 1.8595437574539664e-15,
        "bleu-170": 1.741935572761187e-20,
        "codebleu-181": 0.5518916797098378,
        "codebleu-29": 0.16054943020594445,
        "codebleu-6": 0.1743521772151854,
        "codebleu-73": 0.44368692901773377,
        "codebleu-65": 0.4111499517191781,
        "codebleu-60": 0.13895918668285595,
        "codebleu-36": 0.45535172983334615,
        "codebleu-27": 0.5290712387442456,
        "codebleu-192": 0.5900148233388691,
        "codebleu-152": 0.11682518264851816,
        "codebleu-22": 0.2919027566495819,
        "codebleu-165": 0.18285174045487199,
        "codebleu-115": 0.188815546290522,
        "codebleu-8": 0.2032872873370774,
        "codebleu-7": 0.4124352292534982,
        "codebleu-24": 0.0665462826533374,
        "codebleu-58": 0.3383644110394589,
        "codebleu-62": 0.10919650906906732,
        "codebleu-142": 0.012738853503297677,
        "codebleu-170": 0.008492569002123264,
        "chrf-181": 0.2787047204801008,
        "chrf-29": 0.16244057037738874,
        "chrf-6": 0.23390379379880813,
        "chrf-73": 0.282621569086799,
        "chrf-65": 0.2819599731292399,
        "chrf-60": 0.14807567375594072,
        "chrf-36": 0.32856801193972146,
        "chrf-27": 0.2637637822907881,
        "chrf-192": 0.5620274541728141,
        "chrf-152": 0.11719078442536197,
        "chrf-22": 0.24208050510972828,
        "chrf-165": 0.23459967522234407,
        "chrf-115": 0.1760316756018198,
        "chrf-8": 0.2606985247606298,
        "chrf-7": 0.2991566687502243,
        "chrf-24": 0.11044359366560572,
        "chrf-58": 0.2622430165890944,
        "chrf-62": 0.12774462822442942,
        "chrf-142": 0.015966552715033454,
        "chrf-170": 0.01951508629028599,
        "rougel-181": 0.3564593301435407,
        "rougel-29": 0.22746781115879824,
        "rougel-6": 0.32158590308370044,
        "rougel-73": 0.41368584758942456,
        "rougel-65": 0.29036635006784256,
        "rougel-60": 0.25229357798165136,
        "rougel-36": 0.4615384615384615,
        "rougel-27": 0.28785982478097616,
        "rougel-192": 0.665764546684709,
        "rougel-152": 0.18266978922716628,
        "rougel-22": 0.37593984962406013,
        "rougel-165": 0.29247311827956984,
        "rougel-115": 0.22916666666666666,
        "rougel-8": 0.3292181069958848,
        "rougel-7": 0.38485804416403796,
        "rougel-24": 0.15544041450777202,
        "rougel-58": 0.43119266055045874,
        "rougel-62": 0.18779342723004697,
        "rougel-142": 0.016574585635359115,
        "rougel-170": 0.011142061281337047,
        "meteor-181": 0.29904442127566283,
        "meteor-29": 0.13635796767231811,
        "meteor-6": 0.17425481604391851,
        "meteor-73": 0.40962039988409166,
        "meteor-65": 0.23402723906911144,
        "meteor-60": 0.13078216590294833,
        "meteor-36": 0.40529027185831906,
        "meteor-27": 0.31713357495394634,
        "meteor-192": 0.5881462085508566,
        "meteor-152": 0.10189551777434314,
        "meteor-22": 0.22485057021465013,
        "meteor-165": 0.16164648050429867,
        "meteor-115": 0.1652531459093674,
        "meteor-8": 0.19866222971270567,
        "meteor-7": 0.299747484620975,
        "meteor-24": 0.08801224518193836,
        "meteor-58": 0.31734166280430726,
        "meteor-62": 0.10713493681899704,
        "meteor-142": 0.006309148264984227,
        "meteor-170": 0.00473634354278497,
        "ruby-181": 0.2391752577319588,
        "ruby-29": 0.1339031339031339,
        "ruby-6": 0.20512820512820518,
        "ruby-73": 0.18803418803418803,
        "ruby-65": 0.11658031088082899,
        "ruby-60": 0.15384615384615385,
        "ruby-36": 0.29059829059829057,
        "ruby-27": 0.1986607142857143,
        "ruby-192": 0.5463917525773196,
        "ruby-152": 0.10256410256410253,
        "ruby-22": 0.23646723646723644,
        "ruby-165": 0.15954415954415957,
        "ruby-115": 0.15099715099715094,
        "ruby-8": 0.18518518518518523,
        "ruby-7": 0.22792022792022792,
        "ruby-24": 0.0854700854700855,
        "ruby-58": 0.27635327635327633,
        "ruby-62": 0.11396011396011396,
        "ruby-142": 0.008547008547008517,
        "ruby-170": 0.005698005698005715,
        "codebertscore_f1-181": 0.7901776432991028,
        "codebertscore_f3-181": 0.7956692576408386,
        "codebertscore_f1-29": 0.6618414521217346,
        "codebertscore_f3-29": 0.6469786167144775,
        "codebertscore_f1-6": 0.7328722476959229,
        "codebertscore_f3-6": 0.6915105581283569,
        "codebertscore_f1-73": 0.772546112537384,
        "codebertscore_f3-73": 0.7792761325836182,
        "codebertscore_f1-65": 0.7430078387260437,
        "codebertscore_f3-65": 0.7493061423301697,
        "codebertscore_f1-60": 0.657155454158783,
        "codebertscore_f3-60": 0.6176109910011292,
        "codebertscore_f1-36": 0.7750526070594788,
        "codebertscore_f3-36": 0.7763289213180542,
        "codebertscore_f1-27": 0.776374101638794,
        "codebertscore_f3-27": 0.7828069925308228,
        "codebertscore_f1-192": 0.8529807925224304,
        "codebertscore_f3-192": 0.8635493516921997,
        "codebertscore_f1-152": 0.6153228878974915,
        "codebertscore_f3-152": 0.5763766169548035,
        "codebertscore_f1-22": 0.7490307092666626,
        "codebertscore_f3-22": 0.7316222190856934,
        "codebertscore_f1-165": 0.734545111656189,
        "codebertscore_f3-165": 0.7055448293685913,
        "codebertscore_f1-115": 0.7024538516998291,
        "codebertscore_f3-115": 0.6945136189460754,
        "codebertscore_f1-8": 0.7492734789848328,
        "codebertscore_f3-8": 0.7243751287460327,
        "codebertscore_f1-7": 0.7679193615913391,
        "codebertscore_f3-7": 0.7704285383224487,
        "codebertscore_f1-24": 0.6396080255508423,
        "codebertscore_f3-24": 0.5800264477729797,
        "codebertscore_f1-58": 0.7212032675743103,
        "codebertscore_f3-58": 0.7180439829826355,
        "codebertscore_f1-62": 0.6749729514122009,
        "codebertscore_f3-62": 0.6198712587356567,
        "codebertscore_f1-142": 0.49365830421447754,
        "codebertscore_f3-142": 0.4491752088069916,
        "codebertscore_f1-170": 0.5336359739303589,
        "codebertscore_f3-170": 0.48197469115257263,
        "codebertscore_s_f1-181": 0.8262260556221008,
        "codebertscore_s_f3-181": 0.8336455821990967,
        "codebertscore_s_f1-29": 0.77860426902771,
        "codebertscore_s_f3-29": 0.7605509757995605,
        "codebertscore_s_f1-6": 0.826294481754303,
        "codebertscore_s_f3-6": 0.7904665470123291,
        "codebertscore_s_f1-73": 0.8186833262443542,
        "codebertscore_s_f3-73": 0.8178048133850098,
        "codebertscore_s_f1-65": 0.7964730858802795,
        "codebertscore_s_f3-65": 0.8070700168609619,
        "codebertscore_s_f1-60": 0.8049378991127014,
        "codebertscore_s_f3-60": 0.768675684928894,
        "codebertscore_s_f1-36": 0.8212704062461853,
        "codebertscore_s_f3-36": 0.8226108551025391,
        "codebertscore_s_f1-27": 0.812088131904602,
        "codebertscore_s_f3-27": 0.821824848651886,
        "codebertscore_s_f1-192": 0.8834483027458191,
        "codebertscore_s_f3-192": 0.8924329280853271,
        "codebertscore_s_f1-152": 0.7754345536231995,
        "codebertscore_s_f3-152": 0.7382792830467224,
        "codebertscore_s_f1-22": 0.8200525641441345,
        "codebertscore_s_f3-22": 0.8023508191108704,
        "codebertscore_s_f1-165": 0.8168179392814636,
        "codebertscore_s_f3-165": 0.7873492240905762,
        "codebertscore_s_f1-115": 0.7865501046180725,
        "codebertscore_s_f3-115": 0.7682410478591919,
        "codebertscore_s_f1-8": 0.8163974285125732,
        "codebertscore_s_f3-8": 0.7876942753791809,
        "codebertscore_s_f1-7": 0.8165520429611206,
        "codebertscore_s_f3-7": 0.8164596557617188,
        "codebertscore_s_f1-24": 0.8128815293312073,
        "codebertscore_s_f3-24": 0.7566320300102234,
        "codebertscore_s_f1-58": 0.7934890389442444,
        "codebertscore_s_f3-58": 0.7841541767120361,
        "codebertscore_s_f1-62": 0.8198122978210449,
        "codebertscore_s_f3-62": 0.7692064046859741,
        "codebertscore_s_f1-142": 0.7880535125732422,
        "codebertscore_s_f3-142": 0.7164650559425354,
        "codebertscore_s_f1-170": 0.8018567562103271,
        "codebertscore_s_f3-170": 0.7230509519577026,
        "gpt35_nsnr-181": 4,
        "raw_gpt35_nsnr-181": "4",
        "gpt35_nsnr-29": 4,
        "raw_gpt35_nsnr-29": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-73": 4,
        "raw_gpt35_nsnr-73": "4",
        "gpt35_nsnr-65": 2,
        "raw_gpt35_nsnr-65": "2",
        "gpt35_nsnr-60": 4,
        "raw_gpt35_nsnr-60": "4",
        "gpt35_nsnr-36": 4,
        "raw_gpt35_nsnr-36": "4",
        "gpt35_nsnr-27": 4,
        "raw_gpt35_nsnr-27": "4",
        "gpt35_nsnr-192": 4,
        "raw_gpt35_nsnr-192": "4",
        "gpt35_nsnr-152": 3,
        "raw_gpt35_nsnr-152": "3",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-165": 4,
        "raw_gpt35_nsnr-165": "4",
        "gpt35_nsnr-115": 4,
        "raw_gpt35_nsnr-115": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-24": 4,
        "raw_gpt35_nsnr-24": "4",
        "gpt35_nsnr-58": 4,
        "raw_gpt35_nsnr-58": "4",
        "gpt35_nsnr-62": 3,
        "raw_gpt35_nsnr-62": "3",
        "gpt35_nsnr-142": 0,
        "raw_gpt35_nsnr-142": "0",
        "gpt35_nsnr-170": 2,
        "raw_gpt35_nsnr-170": "2",
        "gpt35_nswr-181": 3,
        "raw_gpt35_nswr-181": "3",
        "gpt35_nswr-29": 2,
        "raw_gpt35_nswr-29": "2",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-73": 3,
        "raw_gpt35_nswr-73": "3",
        "gpt35_nswr-65": 1,
        "raw_gpt35_nswr-65": "1",
        "gpt35_nswr-60": 3,
        "raw_gpt35_nswr-60": "3",
        "gpt35_nswr-36": 4,
        "raw_gpt35_nswr-36": "4",
        "gpt35_nswr-27": 3,
        "raw_gpt35_nswr-27": "3",
        "gpt35_nswr-192": 4,
        "raw_gpt35_nswr-192": "4",
        "gpt35_nswr-152": 2,
        "raw_gpt35_nswr-152": "2",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-165": 3,
        "raw_gpt35_nswr-165": "3",
        "gpt35_nswr-115": 2,
        "raw_gpt35_nswr-115": "2",
        "gpt35_nswr-8": 2,
        "raw_gpt35_nswr-8": "2",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-24": 2,
        "raw_gpt35_nswr-24": "2",
        "gpt35_nswr-58": 3,
        "raw_gpt35_nswr-58": "3",
        "gpt35_nswr-62": 1,
        "raw_gpt35_nswr-62": "1",
        "gpt35_nswr-142": 0,
        "raw_gpt35_nswr-142": "0",
        "gpt35_nswr-170": 1,
        "raw_gpt35_nswr-170": "1"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given a rectangular grid of wells. Each row represents a single well,\n    // and each 1 in a row represents a single unit of water.\n    // Each well has a corresponding bucket that can be used to extract water from it, \n    // and all buckets have the same capacity.\n    // Your task is to use the buckets to empty the wells.\n    // Output the number of times you need to lower the buckets.\n    // Example 1:\n    // Input: \n    // grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output: 6\n    // Example 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n    // Input: \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n    // Output: 0\n    // Constraints:\n    // * all wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static int maxFill(ArrayList<ArrayList<Integer>> grid, int capacity) {\n",
        "snippet": [
            "        int sum = 0;\n        for (List<Integer> arr : grid) {\n            sum += Math.ceil((double) arr.stream().reduce(Integer::sum).get() / capacity);\n        }\n        return sum;\n    }\n}"
        ],
        "simplified": "You are given a rectangular grid of wells. Each row represents a single well, and each 1 in a row represents a single unit of water. Each well has a corresponding bucket that can be used to extract water from it, and all buckets have the same capacity. Your task is to use the buckets to empty the wells. Output the number of times you need to lower the buckets. Constraints: * all wells have the same length * 1 <= grid.length <= 10^2 * 1 <= grid[:,1].length <= 10^2 * grid[i][j] -> 0 | 1 * 1 <= capacity <= 10",
        "task_id": "115",
        "164": "int depth = 0;\n        boolean done = false;\n        int[] d = new int[2];\n        while(!done) {\n            d = minFill(grid, capacity);\n            if(d[0] != 0) {\n                depth++;\n            } else {\n                done = true;\n            }\n        }\n        return depth;",
        "grade-164": {
            "execution": 0
        },
        "29": "int sum = 0;\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(i).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    sum += capacity;\n                }\n            }\n        }\n        return sum;",
        "grade-29": {
            "execution": 0
        },
        "6": "if (grid.size() <= 0) {\n            return 0;\n        }\n        int fillCount = 0;\n        for (int i = 0; i < grid.size(); i++) {\n            ArrayList<Integer> row = grid.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                int level = row.get(j);\n                if (level > 0) {\n                    int toFill = capacity - level;\n                    if (toFill > 0) {\n                        fillCount += toFill;\n                    }\n                }\n            }\n        }\n        return fillCount;",
        "grade-6": {
            "execution": 0
        },
        "190": "int total = 0;\n        for (ArrayList<Integer> row : grid) {\n            int cap = capacity;\n            for (Integer cell : row) {\n                cap -= cell;\n                if (cap < 0) {\n                    // refill\n                    total++;\n                    cap = capacity - cell;\n                }\n            }\n        }\n        return total;",
        "grade-190": {
            "execution": 0
        },
        "71": "if (grid.size() == 0) return 0;\n        int k = grid.get(0).size();\n        int fill_count = 0;\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < k; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    grid.get(i).set(j, capacity);\n                    if (i == 0) {\n                        fill_count += capacity;\n                    } else {\n                        fill_count += capacity - grid.get(i - 1).get(j);\n                    }\n                }\n            }\n        }\n        return fill_count;",
        "grade-71": {
            "execution": 0
        },
        "63": "int rows = grid.size();\n        int cols = grid.get(0).size();\n        int total = rows * cols;\n        int lowers = 0;\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                int water = grid.get(i).get(j);\n                if (water > 0) {\n                    lowers += (water / capacity);\n                    if (water % capacity > 0) {\n                        lowers++;\n                    }\n                }\n            }\n        }\n        return lowers;",
        "grade-63": {
            "execution": 0
        },
        "58": "int cnt = 0;\n        for (ArrayList<Integer> row : grid) {\n            int capacity_left = capacity;\n            for (int depth : row) {\n                int depth_left = depth;\n                while (depth_left > 0) {\n                    cnt++;\n                    depth_left = Math.max(0, depth_left - capacity_left);\n                    capacity_left = Math.max(0, capacity_left - depth);\n                }\n            }\n        }\n        return cnt;",
        "grade-58": {
            "execution": 0
        },
        "36": "// for each row, count\n        // the number of 1's and\n        // their distance from each other.\n        // then calculate the number of buckets\n        // required to fill all the 1's\n        // this is done by taking the largest bucket count\n        // for all the 1's in a row and multiplying it\n        // by the number of rows.\n        // this accounts for all the 1's \n        // and then we add the number of rows\n        // to account for the rows without 1's\n        int times = 0;\n        int rows = grid.size();\n        int cols = grid.get(0).size();\n        for (int i = 0; i < rows; i++) {\n            int capacity_left = capacity;\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    if (capacity_left == 0) {\n                        times++;\n                        capacity_left = capacity;\n                    }\n                    capacity_left--;\n                }\n            }\n            times++;\n        }\n        return times;",
        "grade-36": {
            "execution": 0
        },
        "189": "// We can fill each row in parallel.\n        // Each row can be filled by repeatedly taking the bucket to the leftmost \n        // nonzero unit of water, extracting the water in it, and going right\n        // We count the number of times we need to extract water\n        // Every time we extract, we shift the array to the left.\n        // Once we shift the array to the left, we need to stop extraction.\n        // We can do this by setting a flag, or by just stopping when we see a 0 on the left\n        int nbSteps = 0;\n        for (ArrayList<Integer> row : grid) {\n            // Step 1. Find the first nonzero water unit.\n            int current = 0;\n            int firstNonZero = -1;\n            for (int i = 0; i < row.size(); i++) {\n                if (row.get(i) != 0) {\n                    firstNonZero = i;\n                    break;\n                }\n            }\n            if (firstNonZero == -1) continue;\n            // Step 2. Add water units to the bucket.\n            // If the bucket has water units that reach capacity, extract the water and\n            // shift the array to the left.\n            int nbLeft = 0;\n            while (true) {\n                int left = firstNonZero;\n                while (left < row.size() && row.get(left) == 0) left++;\n                if (left >= row.size()) break;\n                int right = left;\n                while (right < row.size() && current < capacity) {\n                    current += row.get(right);\n                    right++;\n                }\n                // Step 3. Extract water.\n                nbSteps++;\n                // Step 4. Shift the array.\n                for (int i = left; i < right; i++) row.set(i - left, row.get(i));\n                for (int i = right - left; i < row.size(); i++) row.set(i, 0);\n                // Step 5. Reset\n                current = 0;\n                firstNonZero = left - left;\n            }\n        }\n        return nbSteps;",
        "grade-189": {
            "execution": 0
        },
        "27": "int count = 0;\n        int[] max = new int[grid.size()];\n        for (int i = 0; i < grid.size(); i++) {\n            max[i] = Collections.max(grid.get(i));\n        }\n        for (int i = 0; i < grid.size(); i++) {\n            int maxFill = max[i];\n            ArrayList<Integer> row = grid.get(i);\n            int prev = 0;\n            while (maxFill > 0) {\n                maxFill -= capacity;\n                count++;\n                int j = prev;\n                while (j < row.size() && row.get(j) != 0) {\n                    row.set(j, row.get(j) - capacity);\n                    j++;\n                }\n                prev = j;\n            }\n        }\n        return count;",
        "grade-27": {
            "execution": 0
        },
        "174": "int water_count = 0;\n        int row_count = grid.size();\n        int column_count = grid.get(0).size();\n        int[][] grid_array = new int[row_count][column_count];\n        for (int i = 0; i < row_count; i++) {\n            for (int j = 0; j < column_count; j++) {\n                grid_array[i][j] = grid.get(i).get(j);\n            }\n        }\n        while (true) {\n            int max_water = -1;\n            int max_water_row = -1;\n            int max_water_column = -1;\n            for (int i = 0; i < row_count; i++) {\n                for (int j = 0; j < column_count; j++) {\n                    if (grid_array[i][j] > max_water) {\n                        max_water = grid_array[i][j];\n                        max_water_row = i;\n                        max_water_column = j;\n                    }\n                }\n            }\n            if (max_water == -1) {\n                break;\n            }\n            for (int i = 0; i < row_count; i++) {\n                for (int j = 0; j < column_count; j++) {\n                    int current_fill = Math.min(capacity, max_water);\n                    grid_array[i][j] -= current_fill;\n                    max_water -= current_fill;\n                    water_count += current_fill;\n                    if (max_water == 0) {\n                        break;\n                    }\n                }\n                if (max_water == 0) {\n                    break;\n                }\n            }\n        }\n        return water_count;",
        "grade-174": {
            "execution": 0
        },
        "140": "int n = grid.size();\n        int m = grid.get(0).size();\n        int count = 0;\n        for (int j = 0; j < m; j++) {\n            int currentCapacity = capacity;\n            for (int i = 0; i < n; i++) {\n                int water = grid.get(i).get(j);\n                if (water == 0) {\n                    continue;\n                }\n                if (currentCapacity >= water) {\n                    grid.get(i).set(j, 0);\n                    currentCapacity -= water;\n                } else {\n                    grid.get(i).set(j, water - currentCapacity);\n                    currentCapacity = 0;\n                }\n                count++;\n                if (currentCapacity == 0) {\n                    break;\n                }\n            }\n        }\n        return count;",
        "grade-140": {
            "execution": 0
        },
        "22": "int result = 0;\n        for (ArrayList<Integer> row : grid) {\n            int row_result = 0;\n            int last_index = -1;\n            for (int i = 0; i < row.size(); i++) {\n                if (row.get(i) == 1) {\n                    int diff = i - last_index - 1;\n                    if (diff > 0) {\n                        int fill = capacity - (diff % capacity);\n                        if (fill == capacity) {\n                            fill = 0;\n                        }\n                        row_result += fill;\n                    }\n                    last_index = i;\n                }\n            }\n            result += row_result;\n        }\n        return result;",
        "grade-22": {
            "execution": 0
        },
        "152": "int n = grid.size();\n        int m = grid.get(0).size();\n        int fill_count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                int fill = Math.min(capacity, grid.get(i).get(j));\n                fill_count += fill;\n                grid.get(i).set(j, grid.get(i).get(j) - fill);\n            }\n        }\n        return fill_count;",
        "grade-152": {
            "execution": 0
        },
        "109": "int n = grid.size();\n        int m = grid.get(0).size();\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    // bucket_capacity = bucket_capacity - 1\n                    grid.get(i).set(j, 0);\n                    for (int k = i + 1; k < n; k++) {\n                        if (grid.get(k).get(j) == 1) {\n                            grid.get(k).set(j, 0);\n                            capacity--;\n                        }\n                        if (capacity == 0) {\n                            break;\n                        }\n                    }\n                    for (int k = i - 1; k >= 0; k--) {\n                        if (grid.get(k).get(j) == 1) {\n                            grid.get(k).set(j, 0);\n                            capacity--;\n                        }\n                        if (capacity == 0) {\n                            break;\n                        }\n                    }\n                    for (int k = j + 1; k < m; k++) {\n                        if (grid.get(i).get(k) == 1) {\n                            grid.get(i).set(k, 0);\n                            capacity--;\n                        }\n                        if (capacity == 0) {\n                            break;\n                        }\n                    }\n                    for (int k = j - 1; k >= 0; k--) {\n                        if (grid.get(i).get(k) == 1) {\n                            grid.get(i).set(k, 0);\n                            capacity--;\n                        }\n                        if (capacity == 0) {\n                            break;\n                        }\n                    }\n                    count++;\n                    capacity = capacity + 1;\n                }\n            }\n        }\n        return count;",
        "grade-109": {
            "execution": 0
        },
        "8": "int num_tries = 0;\n        for (ArrayList<Integer> row : grid) {\n            if (row.size() > capacity) {\n                System.out.println(\"no capacity: \" + row);\n                return -1;\n            }\n            int sum = row.stream().mapToInt(i -> i).sum();\n            int water_to_remove = sum / capacity;\n            // tricky part: if mod = 0, then it fills the bucket perfectly and \n            // the number of operations required is just the water_to_remove.\n            // If mod > 0, then it fills the bucket +1, so it requires water_to_remove + 1\n            // operations.\n            num_tries += sum % capacity == 0 ? water_to_remove : water_to_remove + 1;\n        }\n        return num_tries;",
        "grade-8": {
            "execution": 0
        },
        "7": "// fill the first row completely\n        int maxFill = 0;\n        for (int i = 0; i < grid.get(0).size(); i++) {\n            if (grid.get(0).get(i) == 1) {\n                maxFill++;\n                fillBucket(grid, capacity, new Triplet<Integer, Integer, Integer>(0, i, capacity));\n            }\n        }\n        // fill the rest of the wells\n        for (int i = 1; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(i).size(); j++) {\n                if (grid.get(i).get(j) == 1) {\n                    maxFill++;\n                    if (grid.get(i-1).get(j) == 1) {\n                        fillBucket(grid, capacity, new Triplet<Integer, Integer, Integer>(i, j, capacity));\n                    } else {\n                        fillBucket(grid, capacity, new Triplet<Integer, Integer, Integer>(i, j, capacity-1));\n                    }\n                }\n            }\n        }\n        return maxFill;",
        "grade-7": {
            "execution": 0
        },
        "23": "return 0;",
        "grade-23": {
            "execution": 0
        },
        "56": "int fillCount = 0;\n        // The wells can be filled in any order, so just fill the wells in order from left to right\n        for (ArrayList<Integer> row : grid) {\n            int fillCountInRow = 0;\n            for (Integer value : row) {\n                // if the value is 0, fill it\n                if (value == 0) {\n                    fillCountInRow++;\n                }\n            }\n            // if the row has more than capacity wells, fill it capacity times, otherwise fill it as many times as there are wells\n            fillCount += fillCountInRow > capacity ? capacity : fillCountInRow;\n        }\n        return fillCount;",
        "grade-56": {
            "execution": 0
        },
        "60": "int n = grid.size();\n        int m = grid.get(0).size();\n        int maxFill = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                maxFill += grid.get(i).get(j);\n            }\n        }\n        int minFill = maxFill - capacity * m;\n        return minFill < 0 ? 0 : minFill;",
        "grade-60": {
            "execution": 0
        },
        "bleu-164": 0.06566406336076315,
        "bleu-29": 0.22011920377289848,
        "bleu-6": 0.08877800503064046,
        "bleu-190": 0.180992068939058,
        "bleu-71": 0.07780325800550972,
        "bleu-63": 0.10300903564459746,
        "bleu-58": 0.15993626831508873,
        "bleu-36": 0.0348448872489532,
        "bleu-189": 0.029680231583251424,
        "bleu-27": 0.04759759679510169,
        "bleu-174": 0.028634896332112577,
        "bleu-140": 0.06018117831591318,
        "bleu-22": 0.1107204752155751,
        "bleu-152": 0.09450063816200129,
        "bleu-109": 0.02631238556776173,
        "bleu-8": 0.11146968650282651,
        "bleu-7": 0.045200384617406185,
        "bleu-23": 3.639753490307552e-08,
        "bleu-56": 0.08858322185767901,
        "bleu-60": 0.10224726658841579,
        "codebleu-164": 0.38910256410256405,
        "codebleu-29": 0.6115723056267557,
        "codebleu-6": 0.573076923076923,
        "codebleu-190": 0.49711029262968803,
        "codebleu-71": 0.5664720297977115,
        "codebleu-63": 0.608403209763966,
        "codebleu-58": 0.5614703567791655,
        "codebleu-36": 0.5553780607013133,
        "codebleu-189": 0.6282979672273954,
        "codebleu-27": 0.573076923076923,
        "codebleu-174": 0.593091057767006,
        "codebleu-140": 0.5732342930131287,
        "codebleu-22": 0.5959414432376775,
        "codebleu-152": 0.5763594273223523,
        "codebleu-109": 0.5702264102958441,
        "codebleu-8": 0.6602014601086773,
        "codebleu-7": 0.5880382154697814,
        "codebleu-23": 0.016666752553389088,
        "codebleu-56": 0.5023612515345283,
        "codebleu-60": 0.5854256865380374,
        "chrf-164": 0.2136800216413255,
        "chrf-29": 0.3491760417781802,
        "chrf-6": 0.28973308706300727,
        "chrf-190": 0.342084047838792,
        "chrf-71": 0.24635461222703442,
        "chrf-63": 0.2647310543248317,
        "chrf-58": 0.301732713456809,
        "chrf-36": 0.19833649284812846,
        "chrf-189": 0.16312849392538178,
        "chrf-27": 0.27066700638640606,
        "chrf-174": 0.17058237523958483,
        "chrf-140": 0.2325551215457759,
        "chrf-22": 0.3162286892427981,
        "chrf-152": 0.261678949170425,
        "chrf-109": 0.16421117874396093,
        "chrf-8": 0.3177260112494208,
        "chrf-7": 0.2349210381160898,
        "chrf-23": 0.040984245808762934,
        "chrf-56": 0.28540843246878234,
        "chrf-60": 0.24037410029916,
        "rougel-164": 0.2905982905982906,
        "rougel-29": 0.46969696969696967,
        "rougel-6": 0.3163841807909604,
        "rougel-190": 0.4736842105263158,
        "rougel-71": 0.30612244897959184,
        "rougel-63": 0.31578947368421056,
        "rougel-58": 0.44274809160305345,
        "rougel-36": 0.1904761904761905,
        "rougel-189": 0.14516129032258063,
        "rougel-27": 0.2905982905982906,
        "rougel-174": 0.16231884057971013,
        "rougel-140": 0.28054298642533937,
        "rougel-22": 0.36571428571428577,
        "rougel-152": 0.3625730994152047,
        "rougel-109": 0.1552511415525114,
        "rougel-8": 0.3317073170731707,
        "rougel-7": 0.22666666666666666,
        "rougel-23": 0.07142857142857142,
        "rougel-56": 0.2918918918918919,
        "rougel-60": 0.2857142857142857,
        "meteor-164": 0.24442432549113302,
        "meteor-29": 0.5212674272561497,
        "meteor-6": 0.376788624753728,
        "meteor-190": 0.4454053887984269,
        "meteor-71": 0.37824394463667815,
        "meteor-63": 0.38058817391090843,
        "meteor-58": 0.4320647177790035,
        "meteor-36": 0.3061801962496057,
        "meteor-189": 0.2682474200139669,
        "meteor-27": 0.3804276633488825,
        "meteor-174": 0.2709547432130874,
        "meteor-140": 0.34318475452196384,
        "meteor-22": 0.369539510294936,
        "meteor-152": 0.41185193800703673,
        "meteor-109": 0.27097476440090523,
        "meteor-8": 0.39532118409123757,
        "meteor-7": 0.31980781591956053,
        "meteor-23": 0.03125,
        "meteor-56": 0.37554100904059634,
        "meteor-60": 0.36530483351492443,
        "ruby-164": 0.21875,
        "ruby-29": 0.3291139240506329,
        "ruby-6": 0.2016129032258065,
        "ruby-190": 0.360655737704918,
        "ruby-71": 0.19580419580419584,
        "ruby-63": 0.211864406779661,
        "ruby-58": 0.34615384615384615,
        "ruby-36": 0.11363636363636365,
        "ruby-189": 0.08126410835214448,
        "ruby-27": 0.17679558011049723,
        "ruby-174": 0.09589041095890416,
        "ruby-140": 0.1785714285714286,
        "ruby-22": 0.25409836065573765,
        "ruby-152": 0.2457627118644068,
        "ruby-109": 0.08831168831168834,
        "ruby-8": 0.21052631578947367,
        "ruby-7": 0.13765182186234814,
        "ruby-23": 0.037735849056603765,
        "ruby-56": 0.1742424242424242,
        "ruby-60": 0.17821782178217827,
        "codebertscore_f1-164": 0.7034627199172974,
        "codebertscore_f3-164": 0.7013454437255859,
        "codebertscore_f1-29": 0.773185670375824,
        "codebertscore_f3-29": 0.7703209519386292,
        "codebertscore_f1-6": 0.7026022672653198,
        "codebertscore_f3-6": 0.7106587290763855,
        "codebertscore_f1-190": 0.7640582323074341,
        "codebertscore_f3-190": 0.7577270269393921,
        "codebertscore_f1-71": 0.6859006285667419,
        "codebertscore_f3-71": 0.6914936900138855,
        "codebertscore_f1-63": 0.7012050151824951,
        "codebertscore_f3-63": 0.7117043137550354,
        "codebertscore_f1-58": 0.7296394109725952,
        "codebertscore_f3-58": 0.7466371059417725,
        "codebertscore_f1-36": 0.6342839598655701,
        "codebertscore_f3-36": 0.667308509349823,
        "codebertscore_f1-189": 0.6316409707069397,
        "codebertscore_f3-189": 0.688839852809906,
        "codebertscore_f1-27": 0.7052421569824219,
        "codebertscore_f3-27": 0.7329288721084595,
        "codebertscore_f1-174": 0.6563155055046082,
        "codebertscore_f3-174": 0.7040659189224243,
        "codebertscore_f1-140": 0.6743590235710144,
        "codebertscore_f3-140": 0.692784309387207,
        "codebertscore_f1-22": 0.7142606973648071,
        "codebertscore_f3-22": 0.7402632832527161,
        "codebertscore_f1-152": 0.7204452157020569,
        "codebertscore_f3-152": 0.7243741154670715,
        "codebertscore_f1-109": 0.6466817259788513,
        "codebertscore_f3-109": 0.6808168888092041,
        "codebertscore_f1-8": 0.6882768869400024,
        "codebertscore_f3-8": 0.7669350504875183,
        "codebertscore_f1-7": 0.6740726232528687,
        "codebertscore_f3-7": 0.7113244533538818,
        "codebertscore_f1-23": 0.5953187942504883,
        "codebertscore_f3-23": 0.5353504419326782,
        "codebertscore_f1-56": 0.6754692792892456,
        "codebertscore_f3-56": 0.7139659523963928,
        "codebertscore_f1-60": 0.7194505333900452,
        "codebertscore_f3-60": 0.7221779823303223,
        "codebertscore_s_f1-164": 0.7127367258071899,
        "codebertscore_s_f3-164": 0.7111355066299438,
        "codebertscore_s_f1-29": 0.784045934677124,
        "codebertscore_s_f3-29": 0.7735964059829712,
        "codebertscore_s_f1-6": 0.7358735203742981,
        "codebertscore_s_f3-6": 0.7356094717979431,
        "codebertscore_s_f1-190": 0.7719243764877319,
        "codebertscore_s_f3-190": 0.7618130445480347,
        "codebertscore_s_f1-71": 0.7322990298271179,
        "codebertscore_s_f3-71": 0.7277731895446777,
        "codebertscore_s_f1-63": 0.7248695492744446,
        "codebertscore_s_f3-63": 0.7243292927742004,
        "codebertscore_s_f1-58": 0.7466018199920654,
        "codebertscore_s_f3-58": 0.7575953006744385,
        "codebertscore_s_f1-36": 0.6786749958992004,
        "codebertscore_s_f3-36": 0.7043942213058472,
        "codebertscore_s_f1-189": 0.6977802515029907,
        "codebertscore_s_f3-189": 0.7400533556938171,
        "codebertscore_s_f1-27": 0.7568276524543762,
        "codebertscore_s_f3-27": 0.7648566365242004,
        "codebertscore_s_f1-174": 0.7132076621055603,
        "codebertscore_s_f3-174": 0.7287598848342896,
        "codebertscore_s_f1-140": 0.72202467918396,
        "codebertscore_s_f3-140": 0.7214778065681458,
        "codebertscore_s_f1-22": 0.7478925585746765,
        "codebertscore_s_f3-22": 0.7601776719093323,
        "codebertscore_s_f1-152": 0.7369670271873474,
        "codebertscore_s_f3-152": 0.7333263754844666,
        "codebertscore_s_f1-109": 0.7037591338157654,
        "codebertscore_s_f3-109": 0.7033520340919495,
        "codebertscore_s_f1-8": 0.7407343983650208,
        "codebertscore_s_f3-8": 0.7962456345558167,
        "codebertscore_s_f1-7": 0.7222751975059509,
        "codebertscore_s_f3-7": 0.7361984252929688,
        "codebertscore_s_f1-23": 0.6593908667564392,
        "codebertscore_s_f3-23": 0.587660551071167,
        "codebertscore_s_f1-56": 0.7150610089302063,
        "codebertscore_s_f3-56": 0.7431294918060303,
        "codebertscore_s_f1-60": 0.7333958745002747,
        "codebertscore_s_f3-60": 0.7265193462371826,
        "gpt35_nsnr-164": 3,
        "raw_gpt35_nsnr-164": "3",
        "gpt35_nsnr-29": 3,
        "raw_gpt35_nsnr-29": "3",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-190": 4,
        "raw_gpt35_nsnr-190": "4",
        "gpt35_nsnr-71": 3,
        "raw_gpt35_nsnr-71": "3",
        "gpt35_nsnr-63": 4,
        "raw_gpt35_nsnr-63": "4",
        "gpt35_nsnr-58": 4,
        "raw_gpt35_nsnr-58": "4",
        "gpt35_nsnr-36": 4,
        "raw_gpt35_nsnr-36": "4",
        "gpt35_nsnr-189": 4,
        "raw_gpt35_nsnr-189": "4",
        "gpt35_nsnr-27": 4,
        "raw_gpt35_nsnr-27": "4",
        "gpt35_nsnr-174": 4,
        "raw_gpt35_nsnr-174": "4",
        "gpt35_nsnr-140": 4,
        "raw_gpt35_nsnr-140": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-152": 4,
        "raw_gpt35_nsnr-152": "4",
        "gpt35_nsnr-109": 4,
        "raw_gpt35_nsnr-109": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-56": 4,
        "raw_gpt35_nsnr-56": "4",
        "gpt35_nsnr-60": 3,
        "raw_gpt35_nsnr-60": "3",
        "gpt35_nswr-164": 2,
        "raw_gpt35_nswr-164": "2",
        "gpt35_nswr-29": 3,
        "raw_gpt35_nswr-29": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-190": 4,
        "raw_gpt35_nswr-190": "4",
        "gpt35_nswr-71": 2,
        "raw_gpt35_nswr-71": "2",
        "gpt35_nswr-63": 4,
        "raw_gpt35_nswr-63": "4",
        "gpt35_nswr-58": 4,
        "raw_gpt35_nswr-58": "4",
        "gpt35_nswr-36": 3,
        "raw_gpt35_nswr-36": "3",
        "gpt35_nswr-189": 3,
        "raw_gpt35_nswr-189": "3",
        "gpt35_nswr-27": 3,
        "raw_gpt35_nswr-27": "3",
        "gpt35_nswr-174": 3,
        "raw_gpt35_nswr-174": "3",
        "gpt35_nswr-140": 3,
        "raw_gpt35_nswr-140": "3",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-152": 3,
        "raw_gpt35_nswr-152": "3",
        "gpt35_nswr-109": 2,
        "raw_gpt35_nswr-109": "2",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 0,
        "raw_gpt35_nswr-23": "0",
        "gpt35_nswr-56": 3,
        "raw_gpt35_nswr-56": "3",
        "gpt35_nswr-60": 3,
        "raw_gpt35_nswr-60": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given an array arr of integers, find the minimum number of elements that\n    // need to be changed to make the array palindromic. A palindromic array is an array that\n    // is read the same backwards and forwards. In one change, you can change one element to any other element.\n    // For example:\n    // smallest_change([1,2,3,5,4,7,9,6]) == 4\n    // smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    // smallest_change([1, 2, 3, 2, 1]) == 0\n    public static int smallestChange(ArrayList<Integer> arr) {\n",
        "snippet": [
            "        int ans = 0;\n        for (int i = 0; i < arr.size() / 2; i++) {\n            if (!Objects.equals(arr.get(i), arr.get(arr.size() - i - 1))) {\n                ans += 1;\n            }\n        }\n        return ans;\n    }\n}"
        ],
        "simplified": "Given an array arr of integers, find the minimum number of elements that need to be changed to make the array palindromic. A palindromic array is an array that is read the same backwards and forwards. In one change, you can change one element to any other element.",
        "task_id": "73",
        "34": "int sum = 0;\n        for (int i = 0; i < arr.size() / 2; i++) {\n            sum += arr.get(i) - arr.get(arr.size() - 1 - i);\n        }\n        return Math.abs(sum);",
        "grade-34": {
            "execution": 0
        },
        "6": "if (arr.size() == 0) {\n            return 0;\n        }\n        int smallestChange = 0;\n        int maxChange = 0;\n        int i = 0;\n        int j = arr.size() - 1;\n        while (i < j) {\n            if (arr.get(i) != arr.get(j)) {\n                maxChange++;\n            }\n            i++;\n            j--;\n        }\n        return maxChange;",
        "grade-6": {
            "execution": 1
        },
        "85": "// your code goes here\n        return 0;",
        "grade-85": {
            "execution": 0
        },
        "76": "// start by checking if the array is already a palindrome\n        int size = arr.size();\n        if (isPalindrome(arr)) {\n            return 0;\n        }\n        // if the array isn't a palindrome, make it one\n        int cost = 0;\n        for (int i = 0; i < size / 2; i++) {\n            cost += Math.abs(arr.get(i) - arr.get(size - i - 1));\n        }\n        return cost;",
        "grade-76": {
            "execution": 0
        },
        "69": "ArrayList<Integer> r = new ArrayList<Integer>(arr);\n        Collections.reverse(r);\n        return rearrange(arr, r);",
        "grade-69": {
            "execution": 0
        },
        "42": "int mid = arr.size() / 2;\n        int start = 0;\n        int end = arr.size() - 1;\n        int change = 0;\n        while (start < mid) {\n            if (arr.get(start) != arr.get(end)) {\n                change++;\n            }\n            start++;\n            end--;\n        }\n        return change;",
        "grade-42": {
            "execution": 1
        },
        "32": "return smallestChange(arr, 0, arr.size() - 1);",
        "grade-32": {
            "execution": 0
        },
        "172": "throw new NotImplementedException();",
        "grade-172": {
            "execution": 0
        },
        "28": "// You must fill in this method\n        ArrayList<Integer> arr1 = new ArrayList<Integer>();\n        ArrayList<Integer> arr2 = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size() / 2; i++) {\n            arr1.add(arr.get(i));\n        }\n        int count = 0;\n        if (arr.size() % 2 == 0) {\n            for (int i = arr.size() / 2; i < arr.size(); i++) {\n                arr2.add(arr.get(i));\n            }\n        } else {\n            for (int i = arr.size() / 2 + 1; i < arr.size(); i++) {\n                arr2.add(arr.get(i));\n            }\n        }\n        Collections.reverse(arr2);\n        for (int i = 0; i < arr1.size(); i++) {\n            if (arr1.get(i) != arr2.get(i)) {\n                count++;\n            }\n        }\n        return count;",
        "grade-28": {
            "execution": 1
        },
        "186": "//write your code here\n        return 0;",
        "grade-186": {
            "execution": 0
        },
        "131": "ArrayList<Integer> arrCopy = (ArrayList<Integer>) arr.clone();\n        Collections.reverse(arrCopy);\n        return arr.size() - findLCS(arr, arrCopy);",
        "grade-131": {
            "execution": 0
        },
        "8": "// Your code here\n        // Get palindrome\n        int change = 0;\n        int mid = arr.size() / 2;\n        for (int i = 0; i < mid; i++) {\n            change += Math.abs(arr.get(i) - arr.get(arr.size() - 1 - i));\n        }\n        return change;",
        "grade-8": {
            "execution": 0
        },
        "7": "int length = arr.size();\n        int count = 0;\n        for (int i = 0; i < length/2; i++) {\n            int x = arr.get(i);\n            int y = arr.get(length - i - 1);\n            if (x != y) {\n                count++;\n            }\n        }\n        return count;",
        "grade-7": {
            "execution": 1
        },
        "29": "int sz = arr.size();\n        int x = 0;\n        int y = sz - 1;\n        int d = 0;\n        while (x < y) {\n            if (arr.get(x) != arr.get(y)) {\n                d++;\n            }\n            x++;\n            y--;\n        }\n        return d;",
        "grade-29": {
            "execution": 1
        },
        "67": "for (int i = 0; i < arr.size() / 2; i++) {\n            int diff = Math.abs(arr.get(i) - arr.get(arr.size() - 1 - i));\n            if (diff > 1) {\n                return diff;\n            }\n        }\n        return 0;",
        "grade-67": {
            "execution": 0
        },
        "72": "int n = arr.size();\n        int[][] minChange = new int[n][n];\n        int[][] palindrome = new int[n][n];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == j) {\n                    minChange[i][j] = 0;\n                    palindrome[i][j] = 1;\n                } else {\n                    minChange[i][j] = -1;\n                    palindrome[i][j] = 0;\n                }\n            }\n        }\n        for (int d = 1; d < n; d++) {\n            for (int i = 0; i < n - d; i++) {\n                int j = i + d;\n                minChange[i][j] = minChange(i, j, minChange, palindrome, arr);\n                palindrome[i][j] = palindrome(i, j, minChange, palindrome, arr);\n            }\n        }\n        return minChange[0][n - 1];",
        "grade-72": {
            "execution": 0
        },
        "157": "// arr[i] == arr[~i]\n        return 0;",
        "grade-157": {
            "execution": 0
        },
        "189": "// Enter your code here.\n        int l = 0;\n        int r = arr.size() - 1;\n        int count = 0;\n        while (l < r) {\n            if (arr.get(l) != arr.get(r)) {\n                count++;\n            }\n            l++;\n            r--;\n        }\n        return count;",
        "grade-189": {
            "execution": 1
        },
        "177": "// TODO: Implement the smallest_change method.\n        return 0;",
        "grade-177": {
            "execution": 0
        },
        "61": "// we'll use a dynamic programming approach\n        // dp[i][j] will store the number of changes needed to make arr[i..j] palindromic\n        // base case: dp[i][i] = 0 (single element is already palindromic)\n        // dp[i][j] = 0 if arr[i] == arr[j]\n        // dp[i][j] = 1 + min(dp[i+1][j], dp[i][j-1]) if arr[i] != arr[j]\n        int[][] dp = new int[arr.size()][arr.size()];\n        for (int i = 0; i < arr.size(); i++) {\n            dp[i][i] = 0;\n        }\n        for (int diff = 1; diff < arr.size(); diff++) {\n            for (int i = 0; i + diff < arr.size(); i++) {\n                int j = i + diff;\n                if (arr.get(i) == arr.get(j)) {\n                    dp[i][j] = dp[i+1][j-1];\n                } else {\n                    dp[i][j] = 1 + Math.min(dp[i+1][j], dp[i][j-1]);\n                }\n            }\n        }\n        return dp[0][arr.size()-1];",
        "grade-61": {
            "execution": 0
        },
        "bleu-34": 0.5851211334173982,
        "bleu-6": 0.33411714024628564,
        "bleu-85": 0.00012913547546866558,
        "bleu-76": 0.37838900975946205,
        "bleu-69": 0.014150851366579911,
        "bleu-42": 0.3520764846789135,
        "bleu-32": 0.019757718736891604,
        "bleu-172": 5.264998620738826e-05,
        "bleu-28": 0.18915691969914225,
        "bleu-186": 0.00012913547546866558,
        "bleu-131": 0.09860937411118614,
        "bleu-8": 0.5125633956792819,
        "bleu-7": 0.4833864312574516,
        "bleu-29": 0.25382622866497734,
        "bleu-67": 0.6048335265886858,
        "bleu-72": 0.123459086387025,
        "bleu-157": 0.002502724063857175,
        "bleu-189": 0.2741821722729161,
        "bleu-177": 0.0006779160221208971,
        "bleu-61": 0.12128427894196132,
        "codebleu-34": 0.6959838120720588,
        "codebleu-6": 0.6554256488024646,
        "codebleu-85": 0.03819842255253614,
        "codebleu-76": 0.6756760871396507,
        "codebleu-69": 0.19775214861481533,
        "codebleu-42": 0.626953009860153,
        "codebleu-32": 0.11270483405831674,
        "codebleu-172": 0.044445130054467145,
        "codebleu-28": 0.6756979380073068,
        "codebleu-186": 0.03819842255253614,
        "codebleu-131": 0.33066334405113823,
        "codebleu-8": 0.6739498632396377,
        "codebleu-7": 0.6336420194136906,
        "codebleu-29": 0.5493084583898635,
        "codebleu-67": 0.730604156474383,
        "codebleu-72": 0.5691046227651856,
        "codebleu-157": 0.039228604726823775,
        "codebleu-189": 0.566221361825269,
        "codebleu-177": 0.06387075287290063,
        "codebleu-61": 0.6712610515942365,
        "chrf-34": 0.5852647814446781,
        "chrf-6": 0.43785022986384986,
        "chrf-85": 0.06136879582308123,
        "chrf-76": 0.44829177779154505,
        "chrf-69": 0.15845711240244745,
        "chrf-42": 0.42310355675105865,
        "chrf-32": 0.18135190067332416,
        "chrf-172": 0.03823083677292188,
        "chrf-28": 0.3950252250293807,
        "chrf-186": 0.06292666364452898,
        "chrf-131": 0.24288088591801116,
        "chrf-8": 0.5208455991290353,
        "chrf-7": 0.46105099136040906,
        "chrf-29": 0.3340781834881813,
        "chrf-67": 0.5946297394326411,
        "chrf-72": 0.2739559185565416,
        "chrf-157": 0.07008603549227323,
        "chrf-189": 0.3365802586412325,
        "chrf-177": 0.08447507785200103,
        "chrf-61": 0.33030061370691416,
        "rougel-34": 0.732824427480916,
        "rougel-6": 0.4936708860759494,
        "rougel-85": 0.0759493670886076,
        "rougel-76": 0.5263157894736842,
        "rougel-69": 0.23529411764705876,
        "rougel-42": 0.4861111111111111,
        "rougel-32": 0.2758620689655173,
        "rougel-172": 0.07692307692307691,
        "rougel-28": 0.3509933774834437,
        "rougel-186": 0.0759493670886076,
        "rougel-131": 0.34782608695652173,
        "rougel-8": 0.6068965517241379,
        "rougel-7": 0.6153846153846154,
        "rougel-29": 0.4492753623188406,
        "rougel-67": 0.7299270072992701,
        "rougel-72": 0.23178807947019867,
        "rougel-157": 0.16279069767441862,
        "rougel-189": 0.4857142857142857,
        "rougel-177": 0.09756097560975609,
        "rougel-61": 0.25510204081632654,
        "meteor-34": 0.6747844183181639,
        "meteor-6": 0.5417072834066792,
        "meteor-85": 0.03129890453834116,
        "meteor-76": 0.7163223443432015,
        "meteor-69": 0.12084592145015105,
        "meteor-42": 0.5298048556011297,
        "meteor-32": 0.16390404693562124,
        "meteor-172": 0.023510971786833854,
        "meteor-28": 0.55237800917934,
        "meteor-186": 0.03129890453834116,
        "meteor-131": 0.22140933800741755,
        "meteor-8": 0.7339944903581268,
        "meteor-7": 0.5794041404204225,
        "meteor-29": 0.4505925218437158,
        "meteor-67": 0.7503368357103144,
        "meteor-72": 0.39242446665966474,
        "meteor-157": 0.07739938080495355,
        "meteor-189": 0.4644829593222531,
        "meteor-177": 0.03894080996884735,
        "meteor-61": 0.48702948635075327,
        "ruby-34": 0.6428571428571428,
        "ruby-6": 0.2954545454545454,
        "ruby-85": 0.042857142857142816,
        "ruby-76": 0.27722772277227725,
        "ruby-69": 0.15714285714285714,
        "ruby-42": 0.32432432432432434,
        "ruby-32": 0.17142857142857137,
        "ruby-172": 0.042857142857142816,
        "ruby-28": 0.22413793103448276,
        "ruby-186": 0.042857142857142816,
        "ruby-131": 0.2142857142857143,
        "ruby-8": 0.43999999999999995,
        "ruby-7": 0.4246575342465754,
        "ruby-29": 0.2571428571428571,
        "ruby-67": 0.6428571428571428,
        "ruby-72": 0.14224137931034486,
        "ruby-157": 0.09999999999999998,
        "ruby-189": 0.30000000000000004,
        "ruby-177": 0.05714285714285716,
        "ruby-61": 0.14596273291925466,
        "codebertscore_f1-34": 0.9042384028434753,
        "codebertscore_f3-34": 0.8952149748802185,
        "codebertscore_f1-6": 0.7874059081077576,
        "codebertscore_f3-6": 0.7871668934822083,
        "codebertscore_f1-85": 0.5969026684761047,
        "codebertscore_f3-85": 0.5839616656303406,
        "codebertscore_f1-76": 0.7943781018257141,
        "codebertscore_f3-76": 0.8325697183609009,
        "codebertscore_f1-69": 0.6880013942718506,
        "codebertscore_f3-69": 0.6748331785202026,
        "codebertscore_f1-42": 0.8209959864616394,
        "codebertscore_f3-42": 0.817457377910614,
        "codebertscore_f1-32": 0.7415805459022522,
        "codebertscore_f3-32": 0.7083909511566162,
        "codebertscore_f1-172": 0.5762259364128113,
        "codebertscore_f3-172": 0.5698198080062866,
        "codebertscore_f1-28": 0.7632668018341064,
        "codebertscore_f3-28": 0.7898734211921692,
        "codebertscore_f1-186": 0.5925044417381287,
        "codebertscore_f3-186": 0.576915979385376,
        "codebertscore_f1-131": 0.7039401531219482,
        "codebertscore_f3-131": 0.6962374448776245,
        "codebertscore_f1-8": 0.8432759642601013,
        "codebertscore_f3-8": 0.8642812967300415,
        "codebertscore_f1-7": 0.8769360780715942,
        "codebertscore_f3-7": 0.8772217631340027,
        "codebertscore_f1-29": 0.8065485954284668,
        "codebertscore_f3-29": 0.8054062724113464,
        "codebertscore_f1-67": 0.8856678009033203,
        "codebertscore_f3-67": 0.8807593584060669,
        "codebertscore_f1-72": 0.7111932635307312,
        "codebertscore_f3-72": 0.7488455772399902,
        "codebertscore_f1-157": 0.7258438467979431,
        "codebertscore_f3-157": 0.6912962794303894,
        "codebertscore_f1-189": 0.7889207005500793,
        "codebertscore_f3-189": 0.7996220588684082,
        "codebertscore_f1-177": 0.6174272894859314,
        "codebertscore_f3-177": 0.6090189814567566,
        "codebertscore_f1-61": 0.716433048248291,
        "codebertscore_f3-61": 0.7425689697265625,
        "codebertscore_s_f1-34": 0.9078419804573059,
        "codebertscore_s_f3-34": 0.899831235408783,
        "codebertscore_s_f1-6": 0.7963827848434448,
        "codebertscore_s_f3-6": 0.7964521646499634,
        "codebertscore_s_f1-85": 0.6180970668792725,
        "codebertscore_s_f3-85": 0.6056531667709351,
        "codebertscore_s_f1-76": 0.7966226935386658,
        "codebertscore_s_f3-76": 0.8348888754844666,
        "codebertscore_s_f1-69": 0.7053086161613464,
        "codebertscore_s_f3-69": 0.6920278072357178,
        "codebertscore_s_f1-42": 0.8287481665611267,
        "codebertscore_s_f3-42": 0.8255430459976196,
        "codebertscore_s_f1-32": 0.7628885507583618,
        "codebertscore_s_f3-32": 0.731461226940155,
        "codebertscore_s_f1-172": 0.5817421078681946,
        "codebertscore_s_f3-172": 0.5787346959114075,
        "codebertscore_s_f1-28": 0.8140417337417603,
        "codebertscore_s_f3-28": 0.830790638923645,
        "codebertscore_s_f1-186": 0.6078528761863708,
        "codebertscore_s_f3-186": 0.6034701466560364,
        "codebertscore_s_f1-131": 0.7148710489273071,
        "codebertscore_s_f3-131": 0.7050129771232605,
        "codebertscore_s_f1-8": 0.852661669254303,
        "codebertscore_s_f3-8": 0.8750778436660767,
        "codebertscore_s_f1-7": 0.878159761428833,
        "codebertscore_s_f3-7": 0.8787165284156799,
        "codebertscore_s_f1-29": 0.816224992275238,
        "codebertscore_s_f3-29": 0.8162841200828552,
        "codebertscore_s_f1-67": 0.9023206830024719,
        "codebertscore_s_f3-67": 0.8987749218940735,
        "codebertscore_s_f1-72": 0.7497131824493408,
        "codebertscore_s_f3-72": 0.7740088105201721,
        "codebertscore_s_f1-157": 0.7304130792617798,
        "codebertscore_s_f3-157": 0.6973821520805359,
        "codebertscore_s_f1-189": 0.7976182103157043,
        "codebertscore_s_f3-189": 0.8093109726905823,
        "codebertscore_s_f1-177": 0.6209321618080139,
        "codebertscore_s_f3-177": 0.6118096113204956,
        "codebertscore_s_f1-61": 0.7777422666549683,
        "codebertscore_s_f3-61": 0.8110649585723877,
        "gpt35_nsnr-34": 3,
        "raw_gpt35_nsnr-34": "3",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-85": 0,
        "raw_gpt35_nsnr-85": "Score: 1",
        "gpt35_nsnr-76": 4,
        "raw_gpt35_nsnr-76": "4",
        "gpt35_nsnr-69": 3,
        "raw_gpt35_nsnr-69": "3",
        "gpt35_nsnr-42": 3,
        "raw_gpt35_nsnr-42": "3",
        "gpt35_nsnr-32": 3,
        "raw_gpt35_nsnr-32": "3",
        "gpt35_nsnr-172": 4,
        "raw_gpt35_nsnr-172": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-186": 4,
        "raw_gpt35_nsnr-186": "4",
        "gpt35_nsnr-131": 3,
        "raw_gpt35_nsnr-131": "3",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-29": 4,
        "raw_gpt35_nsnr-29": "4",
        "gpt35_nsnr-67": 3,
        "raw_gpt35_nsnr-67": "3",
        "gpt35_nsnr-72": 4,
        "raw_gpt35_nsnr-72": "4",
        "gpt35_nsnr-157": 0,
        "raw_gpt35_nsnr-157": "Score: 1",
        "gpt35_nsnr-189": 4,
        "raw_gpt35_nsnr-189": "4",
        "gpt35_nsnr-177": 2,
        "raw_gpt35_nsnr-177": "2",
        "gpt35_nsnr-61": 4,
        "raw_gpt35_nsnr-61": "4",
        "gpt35_nswr-34": 3,
        "raw_gpt35_nswr-34": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-85": 2,
        "raw_gpt35_nswr-85": "2",
        "gpt35_nswr-76": 3,
        "raw_gpt35_nswr-76": "3",
        "gpt35_nswr-69": 2,
        "raw_gpt35_nswr-69": "2",
        "gpt35_nswr-42": 4,
        "raw_gpt35_nswr-42": "4",
        "gpt35_nswr-32": 2,
        "raw_gpt35_nswr-32": "2",
        "gpt35_nswr-172": 0,
        "raw_gpt35_nswr-172": "0",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-186": 2,
        "raw_gpt35_nswr-186": "2",
        "gpt35_nswr-131": 3,
        "raw_gpt35_nswr-131": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-29": 4,
        "raw_gpt35_nswr-29": "4",
        "gpt35_nswr-67": 3,
        "raw_gpt35_nswr-67": "3",
        "gpt35_nswr-72": 2,
        "raw_gpt35_nswr-72": "2",
        "gpt35_nswr-157": 0,
        "raw_gpt35_nswr-157": "Score: 0",
        "gpt35_nswr-189": 4,
        "raw_gpt35_nswr-189": "4",
        "gpt35_nswr-177": 4,
        "raw_gpt35_nswr-177": "4",
        "gpt35_nswr-61": 4,
        "raw_gpt35_nswr-61": "4"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Filter an input list of strings only for ones that start with a given prefix.\n    // >>> filter_by_prefix([], 'a')\n    // []\n    // >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    // ['abc', 'array']\n    public static ArrayList<String> filterByPrefix(ArrayList<String> strings, String prefix) {\n",
        "snippet": [
            "        return strings.stream().filter(p -> p.startsWith(prefix)).collect(Collectors.toList());\n    }\n}"
        ],
        "simplified": "Filter an input list of strings only for ones that start with a given prefix.",
        "task_id": "29",
        "152": "ArrayList<String> res = new ArrayList<String>();\n        for (String string : strings) {\n            if (string.startsWith(prefix))\n                res.add(string);\n        }\n        return res;",
        "grade-152": {
            "execution": 1
        },
        "14": "// YOUR CODE HERE\n        return new ArrayList<String>();",
        "grade-14": {
            "execution": 0
        },
        "3": "// Write your code here.\n        return new ArrayList<String>();",
        "grade-3": {
            "execution": 0
        },
        "194": "return strings.stream().filter(item -> item.startsWith(prefix)).collect(Collectors.toCollection(ArrayList::new));",
        "grade-194": {
            "execution": 1
        },
        "56": "return (ArrayList<String>)strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toList());",
        "grade-56": {
            "execution": 1
        },
        "40": "ArrayList<String> res = new ArrayList<String>();\n        for (String s : strings) {\n            if (s.length() >= prefix.length() && s.substring(0, prefix.length()).equals(prefix)) {\n                res.add(s);\n            }\n        }\n        return res;",
        "grade-40": {
            "execution": 1
        },
        "34": "ArrayList<String> prefix_strings = new ArrayList<String>();\n        for (String s : strings) {\n            if (s.startsWith(prefix)) {\n                prefix_strings.add(s);\n            }\n        }\n        return prefix_strings;",
        "grade-34": {
            "execution": 1
        },
        "18": "ArrayList<String> out = new ArrayList<String>();\n        for (String s : strings) {\n            if (s.startsWith(prefix)) {\n                out.add(s);\n            }\n        }\n        return out;",
        "grade-18": {
            "execution": 1
        },
        "13": "ArrayList<String> arrayList = new ArrayList<String>();\n        for (String s : strings) {\n            if (s.startsWith(prefix)) {\n                arrayList.add(s);\n            }\n        }\n        return arrayList;",
        "grade-13": {
            "execution": 1
        },
        "161": "ArrayList<String> res = new ArrayList<String>();\n        for (String s : strings) {\n            if (s.startsWith(prefix))\n                res.add(s);\n        }\n        return res;",
        "grade-161": {
            "execution": 1
        },
        "126": "ArrayList<String> output = new ArrayList<String>();\n        for (String str : strings) {\n            if (str.startsWith(prefix)) {\n                output.add(str);\n            }\n        }\n        return output;",
        "grade-126": {
            "execution": 1
        },
        "11": "// Remove the line below and implement this function\n        return new ArrayList<String>();",
        "grade-11": {
            "execution": 0
        },
        "140": "return strings;",
        "grade-140": {
            "execution": 0
        },
        "96": "// TODO: implement this function\n        ArrayList<String> ans = new ArrayList<String>();\n        for (String str : strings) {\n            if (str.startsWith(prefix)) {\n                ans.add(str);\n            }\n        }\n        return ans;",
        "grade-96": {
            "execution": 1
        },
        "4": "// Write your code here\n        return new ArrayList<String>();",
        "grade-4": {
            "execution": 0
        },
        "33": "return strings.stream().filter(str -> str.startsWith(prefix)).collect(Collectors.toCollection(ArrayList::new));",
        "grade-33": {
            "execution": 1
        },
        "38": "ArrayList<String> myArrayList = new ArrayList<String>();\n        for (String word : strings) {\n            String word1 = word.substring(0, prefix.length());\n            if (word1.equals(prefix)) {\n                myArrayList.add(word);\n            }\n        }\n        return myArrayList;",
        "grade-38": {
            "execution": 1
        },
        "117": "ArrayList<String> result = new ArrayList<String>();\n        // Your code here.\n        for (String s : strings) {\n            if (s.startsWith(prefix)) {\n                result.add(s);\n            }\n        }\n        return result;",
        "grade-117": {
            "execution": 1
        },
        "147": "ArrayList<String> result = new ArrayList<String>();\n        for (String string : strings) {\n            if (string.startsWith(prefix))\n                result.add(string);\n        }\n        return result;",
        "grade-147": {
            "execution": 1
        },
        "133": "return new ArrayList<>(strings.stream().filter(str -> str.startsWith(prefix)).collect(Collectors.toList()));",
        "grade-133": {
            "execution": 1
        },
        "bleu-152": 0.1887219987098015,
        "bleu-14": 0.024776129550240195,
        "bleu-3": 0.029027839612281444,
        "bleu-194": 0.6154021424681301,
        "bleu-56": 0.6514164242827255,
        "bleu-40": 0.10430344972084833,
        "bleu-34": 0.20594083122536364,
        "bleu-18": 0.20594083122536364,
        "bleu-13": 0.1931952241791758,
        "bleu-161": 0.1887219987098015,
        "bleu-126": 0.20594083122536364,
        "bleu-11": 0.03128636774410616,
        "bleu-140": 2.8600163585751713e-05,
        "bleu-96": 0.1784686317148614,
        "bleu-4": 0.02645539622078217,
        "bleu-33": 0.6154021424681301,
        "bleu-38": 0.11620482793021887,
        "bleu-117": 0.18396877718786964,
        "bleu-147": 0.1887219987098015,
        "bleu-133": 0.6431164311622584,
        "codebleu-152": 0.4834844014211811,
        "codebleu-14": 0.1568432846779644,
        "codebleu-3": 0.20104677284354128,
        "codebleu-194": 0.6962753622118034,
        "codebleu-56": 0.7348928091196489,
        "codebleu-40": 0.6413097801944103,
        "codebleu-34": 0.5258780166759633,
        "codebleu-18": 0.5258780166759633,
        "codebleu-13": 0.5258780166759633,
        "codebleu-161": 0.4834844014211811,
        "codebleu-126": 0.5258780166759633,
        "codebleu-11": 0.21689677310685307,
        "codebleu-140": 0.03848393134767313,
        "codebleu-96": 0.5244394037315129,
        "codebleu-4": 0.17146500013698132,
        "codebleu-33": 0.6962753622118034,
        "codebleu-38": 0.5884011727236617,
        "codebleu-117": 0.554907904208053,
        "codebleu-147": 0.4834844014211811,
        "codebleu-133": 0.7331041147686803,
        "chrf-152": 0.36683683230393366,
        "chrf-14": 0.12467267084883912,
        "chrf-3": 0.16316332883093293,
        "chrf-194": 0.7953354567271744,
        "chrf-56": 0.839070982673683,
        "chrf-40": 0.2888905587335015,
        "chrf-34": 0.3775980281912875,
        "chrf-18": 0.3849388562042094,
        "chrf-13": 0.3648079064282409,
        "chrf-161": 0.38108719405129693,
        "chrf-126": 0.3723919171992111,
        "chrf-11": 0.16759855127165174,
        "chrf-140": 0.15384494021505316,
        "chrf-96": 0.36797037273700367,
        "chrf-4": 0.16145919623954336,
        "chrf-33": 0.7989502323159825,
        "chrf-38": 0.2705276621868303,
        "chrf-117": 0.38624853047238633,
        "chrf-147": 0.36503262913740786,
        "chrf-133": 0.8313043120638507,
        "rougel-152": 0.3846153846153846,
        "rougel-14": 0.20833333333333331,
        "rougel-3": 0.19999999999999998,
        "rougel-194": 0.8115942028985507,
        "rougel-56": 0.8169014084507042,
        "rougel-40": 0.36538461538461536,
        "rougel-34": 0.39999999999999997,
        "rougel-18": 0.39999999999999997,
        "rougel-13": 0.38554216867469876,
        "rougel-161": 0.3846153846153846,
        "rougel-126": 0.39999999999999997,
        "rougel-11": 0.18867924528301888,
        "rougel-140": 0.16666666666666669,
        "rougel-96": 0.36781609195402293,
        "rougel-4": 0.20408163265306123,
        "rougel-33": 0.8115942028985507,
        "rougel-38": 0.31683168316831684,
        "rougel-117": 0.39534883720930236,
        "rougel-147": 0.3846153846153846,
        "rougel-133": 0.8169014084507042,
        "meteor-152": 0.38664783652252327,
        "meteor-14": 0.15371533228676085,
        "meteor-3": 0.16943670382165604,
        "meteor-194": 0.867014457977597,
        "meteor-56": 0.8645358226702399,
        "meteor-40": 0.35151434207282,
        "meteor-34": 0.4335539592542764,
        "meteor-18": 0.4335539592542764,
        "meteor-13": 0.4298056541310406,
        "meteor-161": 0.38664783652252327,
        "meteor-126": 0.4335539592542764,
        "meteor-11": 0.15129080023176464,
        "meteor-140": 0.0851851851851852,
        "meteor-96": 0.42490758399849315,
        "meteor-4": 0.1532242289887201,
        "meteor-33": 0.867014457977597,
        "meteor-38": 0.34062606136080603,
        "meteor-117": 0.4411018093437754,
        "meteor-147": 0.38664783652252327,
        "meteor-133": 0.8479244680284665,
        "ruby-152": 0.24444444444444446,
        "ruby-14": 0.12121212121212122,
        "ruby-3": 0.12121212121212122,
        "ruby-194": 0.7222222222222222,
        "ruby-56": 0.7105263157894737,
        "ruby-40": 0.23943661971830987,
        "ruby-34": 0.276595744680851,
        "ruby-18": 0.276595744680851,
        "ruby-13": 0.28,
        "ruby-161": 0.24444444444444446,
        "ruby-126": 0.276595744680851,
        "ruby-11": 0.09090909090909094,
        "ruby-140": 0.09090909090909094,
        "ruby-96": 0.2407407407407407,
        "ruby-4": 0.09090909090909094,
        "ruby-33": 0.7222222222222222,
        "ruby-38": 0.22058823529411764,
        "ruby-117": 0.26415094339622647,
        "ruby-147": 0.24444444444444446,
        "ruby-133": 0.7105263157894737,
        "codebertscore_f1-152": 0.7437600493431091,
        "codebertscore_f3-152": 0.7428049445152283,
        "codebertscore_f1-14": 0.6653493642807007,
        "codebertscore_f3-14": 0.650621771812439,
        "codebertscore_f1-3": 0.6535932421684265,
        "codebertscore_f3-3": 0.646111786365509,
        "codebertscore_f1-194": 0.9387245178222656,
        "codebertscore_f3-194": 0.9548867344856262,
        "codebertscore_f1-56": 0.9395936131477356,
        "codebertscore_f3-56": 0.9527897834777832,
        "codebertscore_f1-40": 0.6975741386413574,
        "codebertscore_f3-40": 0.6973320841789246,
        "codebertscore_f1-34": 0.7552860975265503,
        "codebertscore_f3-34": 0.7489321231842041,
        "codebertscore_f1-18": 0.7458022236824036,
        "codebertscore_f3-18": 0.7456951141357422,
        "codebertscore_f1-13": 0.74249267578125,
        "codebertscore_f3-13": 0.7459924221038818,
        "codebertscore_f1-161": 0.7507323026657104,
        "codebertscore_f3-161": 0.7502619624137878,
        "codebertscore_f1-126": 0.7383361458778381,
        "codebertscore_f3-126": 0.7383239269256592,
        "codebertscore_f1-11": 0.6713672876358032,
        "codebertscore_f3-11": 0.6614153981208801,
        "codebertscore_f1-140": 0.6555524468421936,
        "codebertscore_f3-140": 0.5921600461006165,
        "codebertscore_f1-96": 0.7216665148735046,
        "codebertscore_f3-96": 0.7362018823623657,
        "codebertscore_f1-4": 0.6536368727684021,
        "codebertscore_f3-4": 0.6454535722732544,
        "codebertscore_f1-33": 0.9329535961151123,
        "codebertscore_f3-33": 0.9491082429885864,
        "codebertscore_f1-38": 0.6798320412635803,
        "codebertscore_f3-38": 0.6824780106544495,
        "codebertscore_f1-117": 0.7290626764297485,
        "codebertscore_f3-117": 0.7407357096672058,
        "codebertscore_f1-147": 0.7434974908828735,
        "codebertscore_f3-147": 0.7428057789802551,
        "codebertscore_f1-133": 0.9291117787361145,
        "codebertscore_f3-133": 0.9428139328956604,
        "codebertscore_s_f1-152": 0.7616237998008728,
        "codebertscore_s_f3-152": 0.7607511878013611,
        "codebertscore_s_f1-14": 0.6664561033248901,
        "codebertscore_s_f3-14": 0.6643156409263611,
        "codebertscore_s_f1-3": 0.6616208553314209,
        "codebertscore_s_f3-3": 0.6645851135253906,
        "codebertscore_s_f1-194": 0.9441262483596802,
        "codebertscore_s_f3-194": 0.9596675634384155,
        "codebertscore_s_f1-56": 0.9477192163467407,
        "codebertscore_s_f3-56": 0.961624026298523,
        "codebertscore_s_f1-40": 0.713893473148346,
        "codebertscore_s_f3-40": 0.714815080165863,
        "codebertscore_s_f1-34": 0.7708527445793152,
        "codebertscore_s_f3-34": 0.7646397948265076,
        "codebertscore_s_f1-18": 0.7632481455802917,
        "codebertscore_s_f3-18": 0.7647719979286194,
        "codebertscore_s_f1-13": 0.7598411440849304,
        "codebertscore_s_f3-13": 0.7618889808654785,
        "codebertscore_s_f1-161": 0.7655923962593079,
        "codebertscore_s_f3-161": 0.7666168808937073,
        "codebertscore_s_f1-126": 0.75522381067276,
        "codebertscore_s_f3-126": 0.7562560439109802,
        "codebertscore_s_f1-11": 0.6658791899681091,
        "codebertscore_s_f3-11": 0.6645742058753967,
        "codebertscore_s_f1-140": 0.7357953190803528,
        "codebertscore_s_f3-140": 0.6436276435852051,
        "codebertscore_s_f1-96": 0.7268703579902649,
        "codebertscore_s_f3-96": 0.7392500042915344,
        "codebertscore_s_f1-4": 0.6600964069366455,
        "codebertscore_s_f3-4": 0.6642155051231384,
        "codebertscore_s_f1-33": 0.9413801431655884,
        "codebertscore_s_f3-33": 0.9567156434059143,
        "codebertscore_s_f1-38": 0.697944164276123,
        "codebertscore_s_f3-38": 0.7013018131256104,
        "codebertscore_s_f1-117": 0.7383756041526794,
        "codebertscore_s_f3-117": 0.7513092160224915,
        "codebertscore_s_f1-147": 0.7615872621536255,
        "codebertscore_s_f3-147": 0.7607635855674744,
        "codebertscore_s_f1-133": 0.9389454126358032,
        "codebertscore_s_f3-133": 0.9516452550888062,
        "gpt35_nsnr-152": 4,
        "raw_gpt35_nsnr-152": "4",
        "gpt35_nsnr-14": 0,
        "raw_gpt35_nsnr-14": "3 - The code snippet correctly declares a method that takes in an ArrayList of Strings and a String prefix as input parameters. However, the method currently returns an empty ArrayList and does not implement the logic to filter the input list based on the given prefix. With the addition of the filtering logic, the code snippet should be able to pass all possible tests for the given problem.",
        "gpt35_nsnr-3": 0,
        "raw_gpt35_nsnr-3": "2 - The code snippet only returns an empty ArrayList and does not implement the required functionality of filtering the input list of strings based on a given prefix. The method needs to be completed with the logic to filter the strings and return the filtered list.",
        "gpt35_nsnr-194": 4,
        "raw_gpt35_nsnr-194": "4",
        "gpt35_nsnr-56": 4,
        "raw_gpt35_nsnr-56": "4",
        "gpt35_nsnr-40": 4,
        "raw_gpt35_nsnr-40": "4",
        "gpt35_nsnr-34": 4,
        "raw_gpt35_nsnr-34": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-161": 4,
        "raw_gpt35_nsnr-161": "4",
        "gpt35_nsnr-126": 4,
        "raw_gpt35_nsnr-126": "4",
        "gpt35_nsnr-11": 0,
        "raw_gpt35_nsnr-11": "3 - The code snippet correctly filters an input list of strings for ones that start with a given prefix. It returns an ArrayList of the filtered strings. However, the implementation is incomplete as it only returns an empty ArrayList. The logic for filtering the strings needs to be added.",
        "gpt35_nsnr-140": 0,
        "raw_gpt35_nsnr-140": "3 - The code snippet only returns the input list of strings without any filtering based on the given prefix. It does not cover the required functionality of filtering the list based on the prefix. However, the code snippet is functionally correct in the sense that it returns the input list as is.",
        "gpt35_nsnr-96": 4,
        "raw_gpt35_nsnr-96": "4",
        "gpt35_nsnr-4": 2,
        "raw_gpt35_nsnr-4": "2",
        "gpt35_nsnr-33": 4,
        "raw_gpt35_nsnr-33": "4",
        "gpt35_nsnr-38": 4,
        "raw_gpt35_nsnr-38": "4",
        "gpt35_nsnr-117": 4,
        "raw_gpt35_nsnr-117": "4",
        "gpt35_nsnr-147": 4,
        "raw_gpt35_nsnr-147": "4",
        "gpt35_nsnr-133": 4,
        "raw_gpt35_nsnr-133": "4",
        "gpt35_nswr-152": 4,
        "raw_gpt35_nswr-152": "4",
        "gpt35_nswr-14": 2,
        "raw_gpt35_nswr-14": "2",
        "gpt35_nswr-3": 2,
        "raw_gpt35_nswr-3": "2",
        "gpt35_nswr-194": 4,
        "raw_gpt35_nswr-194": "4",
        "gpt35_nswr-56": 4,
        "raw_gpt35_nswr-56": "4",
        "gpt35_nswr-40": 3,
        "raw_gpt35_nswr-40": "3",
        "gpt35_nswr-34": 4,
        "raw_gpt35_nswr-34": "4",
        "gpt35_nswr-18": 4,
        "raw_gpt35_nswr-18": "4",
        "gpt35_nswr-13": 4,
        "raw_gpt35_nswr-13": "4",
        "gpt35_nswr-161": 4,
        "raw_gpt35_nswr-161": "4",
        "gpt35_nswr-126": 4,
        "raw_gpt35_nswr-126": "4",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-140": 2,
        "raw_gpt35_nswr-140": "2",
        "gpt35_nswr-96": 4,
        "raw_gpt35_nswr-96": "4",
        "gpt35_nswr-4": 2,
        "raw_gpt35_nswr-4": "2",
        "gpt35_nswr-33": 4,
        "raw_gpt35_nswr-33": "4",
        "gpt35_nswr-38": 4,
        "raw_gpt35_nswr-38": "4",
        "gpt35_nswr-117": 4,
        "raw_gpt35_nswr-117": "4",
        "gpt35_nswr-147": 4,
        "raw_gpt35_nswr-147": "4",
        "gpt35_nswr-133": 4,
        "raw_gpt35_nswr-133": "4"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return true if a given number is prime, and false otherwise.\n    // >>> is_prime(6)\n    // False\n    // >>> is_prime(101)\n    // True\n    // >>> is_prime(11)\n    // True\n    // >>> is_prime(13441)\n    // True\n    // >>> is_prime(61)\n    // True\n    // >>> is_prime(4)\n    // False\n    // >>> is_prime(1)\n    // False\n    public static boolean isPrime(int n) {\n",
        "snippet": [
            "        if (n < 2) {\n            return false;\n        }\n        for (int k = 2; k < n; k++) {\n            if (n % k == 0) {\n                return false;\n            }\n        }\n         return true;\n    }\n}"
        ],
        "simplified": "Return true if a given number is prime, and false otherwise.",
        "task_id": "31",
        "29": "if (n == 1) {\n            return false;\n        }\n        for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;",
        "grade-29": {
            "execution": 1
        },
        "6": "if (n <= 1) {\n            return false;\n        }\n        if (n <= 3) {\n            return true;\n        }\n        if (n % 2 == 0 || n % 3 == 0) {\n            return false;\n        }\n        for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) {\n                return false;\n            }\n        }\n        return true;",
        "grade-6": {
            "execution": 1
        },
        "90": "if (n == 2) return true;\n        if (n == 1 || n % 2 == 0) return false;\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) return false;\n        }\n        return true;",
        "grade-90": {
            "execution": 1
        },
        "77": "// TODO: Complete this function.\n        if (n <= 1) {\n            return false;\n        }\n        if (n <= 3) {\n            return true;\n        }\n        if (n % 2 == 0 || n % 3 == 0) {\n            return false;\n        }\n        for (int i = 5; i * i <= n; i = i + 6) {\n            if (n % i == 0 || n % (i + 2) == 0) {\n                return false;\n            }\n        }\n        return true;",
        "grade-77": {
            "execution": 1
        },
        "70": "//####################################################################\n        //# Fill in your code here\n        //####################################################################",
        "grade-70": {
            "execution": 0
        },
        "39": "if (n == 1) return false;\n        if (n == 2) return true;\n        int i = 2;\n        while (i < n) {\n            if (n % i == 0) {\n                return false;\n            }\n            i++;\n        }\n        return true;",
        "grade-39": {
            "execution": 1
        },
        "27": "int max = (int) Math.sqrt(n);\n        for (int i = 2; i <= max; i++) {\n            if (n % i == 0) return false;\n        }\n        return true;",
        "grade-27": {
            "execution": 0
        },
        "189": "// TODO: Write this method.  Keep in mind there is a much easier\n        // way of accomplishing this using the BigInteger class.\n        if (n <= 1) {\n            return false;\n        }\n        if (n <= 3) {\n            return true;\n        }\n        if (n % 2 == 0 || n % 3 == 0) {\n            return false;\n        }\n        for (int i = 5; i * i <= n; i = i + 6) {\n            if (n % i == 0 || n % (i + 2) == 0) {\n                return false;\n            }\n        }\n        return true;",
        "grade-189": {
            "execution": 1
        },
        "23": "if (n <= 3) {\n            return n > 1;\n        }\n        if (n % 2 == 0 || n % 3 == 0) {\n            return false;\n        }\n        for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) {\n                return false;\n            }\n        }\n        return true;",
        "grade-23": {
            "execution": 1
        },
        "144": "if (n == 2) {\n            return true;\n        } else if (n == 1 || n % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;",
        "grade-144": {
            "execution": 1
        },
        "9": "if (n == 1) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        if (n % 3 == 0) {\n            return false;\n        }\n        for (int i = 3; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;",
        "grade-9": {
            "execution": 1
        },
        "8": "boolean isPrime = true;\n        if (n <= 1) {\n            isPrime = false;\n        } else {\n            for (int i = 2; i < n; i++) {\n                if (n % i == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n        }\n        return isPrime;",
        "grade-8": {
            "execution": 1
        },
        "24": "return true;",
        "grade-24": {
            "execution": 0
        },
        "67": "if (n <= 1) {\n            return false;\n        } else if (n == 2) {\n            return true;\n        } else if (n % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;",
        "grade-67": {
            "execution": 1
        },
        "72": "// TODO: implement this function\n        if (n <= 1) {\n            return false;\n        }\n        if (n <= 3) {\n            return true;\n        }\n        if (n % 2 == 0 || n % 3 == 0) {\n            return false;\n        }\n        for (int i = 5; i * i <= n; i = i + 6) {\n            if (n % i == 0 || n % (i + 2) == 0) {\n                return false;\n            }\n        }\n        return true;",
        "grade-72": {
            "execution": 1
        },
        "175": "// TODO: implement me\n        boolean prime = true;\n        if (n<=1) {\n            prime = false;\n        } else {\n            for (int i=2; i<n; i++) {\n                if (n%i == 0) {\n                    prime = false;\n                    break;\n                }\n            }\n        }\n        return prime;",
        "grade-175": {
            "execution": 1
        },
        "195": "// if(n==1)return false;\n        for(int i=2;i<n;i++){\n            if(n%i==0)return false;\n        }\n        return true;",
        "grade-195": {
            "execution": 0
        },
        "60": "if (n < 1) return false;\n        if (n == 1) return false;\n        if (n == 2) return true;\n        if (n == 3) return true;\n        if (n == 5) return true;\n        for (int i = 2; i < Math.sqrt(n) + 1; i++) {\n            if (n % i == 0) return false;\n        }\n        return true;",
        "grade-60": {
            "execution": 1
        },
        "143": "// If a number is less than 2, it's not prime, so return false\n        if (n < 2) {\n            return false;\n        }\n        // We only need to check up to the square root of the number for factors\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            // If n is divisible by i, it has a factor other than 1 and itself,\n            // so it is not prime, so return false\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        // If we didn't find any factors, the number is prime, so return true\n        return true;",
        "grade-143": {
            "execution": 1
        },
        "68": "if (n <= 1) {\n            return false;\n        } else if (n <= 3) {\n            return true;\n        } else if (n % 2 == 0 || n % 3 == 0) {\n            return false;\n        }\n\n        int i = 5;\n        while (i * i <= n) {\n            if (n % i == 0 || n % (i + 2) == 0) {\n                return false;\n            }\n            i += 6;\n        }\n        return true;",
        "grade-68": {
            "execution": 1
        },
        "bleu-29": 0.6040603503634937,
        "bleu-6": 0.30608775290865614,
        "bleu-90": 0.258052624049078,
        "bleu-77": 0.2794681721780146,
        "bleu-70": 0.0,
        "bleu-39": 0.3773661806887252,
        "bleu-27": 0.36143957177906944,
        "bleu-189": 0.23420610046433976,
        "bleu-23": 0.33277015312440594,
        "bleu-144": 0.4087583610064055,
        "bleu-9": 0.3340083186583282,
        "bleu-8": 0.3273928433340987,
        "bleu-24": 4.269210793550157e-07,
        "bleu-67": 0.38710945461596646,
        "bleu-72": 0.2821950138189151,
        "bleu-175": 0.31691286260010254,
        "bleu-195": 0.4123780284574232,
        "bleu-60": 0.2264575478232391,
        "bleu-143": 0.19952354357889934,
        "bleu-68": 0.24793498428696875,
        "codebleu-29": 0.7229913473541933,
        "codebleu-6": 0.6242255117891207,
        "codebleu-90": 0.5337710982683047,
        "codebleu-77": 0.658151545588278,
        "codebleu-70": 0.0,
        "codebleu-39": 0.6169029710356534,
        "codebleu-27": 0.5409359986250859,
        "codebleu-189": 0.6562919389382597,
        "codebleu-23": 0.6135130169184967,
        "codebleu-144": 0.6146905715194809,
        "codebleu-9": 0.73179909141031,
        "codebleu-8": 0.6480271299528267,
        "codebleu-24": 0.04040439279337894,
        "codebleu-67": 0.6252257357285798,
        "codebleu-72": 0.6380648016897241,
        "codebleu-175": 0.6459071358079315,
        "codebleu-195": 0.6180864392740775,
        "codebleu-60": 0.6155304977464308,
        "codebleu-143": 0.6904517909942678,
        "codebleu-68": 0.6110060536437585,
        "chrf-29": 0.7369318159114697,
        "chrf-6": 0.6308670878612028,
        "chrf-90": 0.5332012869856322,
        "chrf-77": 0.5928082088011961,
        "chrf-70": 0.026261010823738013,
        "chrf-39": 0.560524895066918,
        "chrf-27": 0.4614324248474282,
        "chrf-189": 0.5165219250577798,
        "chrf-23": 0.6549297299609479,
        "chrf-144": 0.6752221008488444,
        "chrf-9": 0.6309861654059026,
        "chrf-8": 0.4315627329729184,
        "chrf-24": 0.13461039439641712,
        "chrf-67": 0.6557961307277246,
        "chrf-72": 0.5928082088011961,
        "chrf-175": 0.42730076353977914,
        "chrf-195": 0.6001385485345093,
        "chrf-60": 0.49584826886023003,
        "chrf-143": 0.42172317075668814,
        "chrf-68": 0.5296039326749128,
        "rougel-29": 0.8125,
        "rougel-6": 0.5454545454545454,
        "rougel-90": 0.6126126126126127,
        "rougel-77": 0.5131578947368421,
        "rougel-70": 0.0,
        "rougel-39": 0.6534653465346535,
        "rougel-27": 0.6666666666666667,
        "rougel-189": 0.4534883720930233,
        "rougel-23": 0.5864661654135338,
        "rougel-144": 0.6440677966101696,
        "rougel-9": 0.5611510791366906,
        "rougel-8": 0.6788990825688074,
        "rougel-24": 0.12,
        "rougel-67": 0.624,
        "rougel-72": 0.5165562913907286,
        "rougel-175": 0.6666666666666667,
        "rougel-195": 0.7692307692307692,
        "rougel-60": 0.5333333333333333,
        "rougel-143": 0.44808743169398907,
        "rougel-68": 0.4827586206896552,
        "meteor-29": 0.8251125529661016,
        "meteor-6": 0.7141390805424169,
        "meteor-90": 0.6698068138959897,
        "meteor-77": 0.7019662553058985,
        "meteor-70": 0.0,
        "meteor-39": 0.7380634076197565,
        "meteor-27": 0.615541291609442,
        "meteor-189": 0.6763470489078729,
        "meteor-23": 0.7155386712641834,
        "meteor-144": 0.7838056680161944,
        "meteor-9": 0.7569293089404047,
        "meteor-8": 0.7216562624968652,
        "meteor-24": 0.06911841418883671,
        "meteor-67": 0.8105274711348279,
        "meteor-72": 0.7032982595854161,
        "meteor-175": 0.7186925817473916,
        "meteor-195": 0.730262640388061,
        "meteor-60": 0.637108521225515,
        "meteor-143": 0.6399312956871442,
        "meteor-68": 0.6440660077210667,
        "ruby-29": 0.7551020408163265,
        "ruby-6": 0.38541666666666663,
        "ruby-90": 0.453125,
        "ruby-77": 0.35238095238095235,
        "ruby-70": 0.0,
        "ruby-39": 0.5,
        "ruby-27": 0.5319148936170213,
        "ruby-189": 0.29600000000000004,
        "ruby-23": 0.43023255813953487,
        "ruby-144": 0.5070422535211268,
        "ruby-9": 0.40217391304347827,
        "ruby-8": 0.564516129032258,
        "ruby-24": 0.06382978723404253,
        "ruby-67": 0.47435897435897434,
        "ruby-72": 0.3557692307692307,
        "ruby-175": 0.546875,
        "ruby-195": 0.6808510638297872,
        "ruby-60": 0.36363636363636365,
        "ruby-143": 0.2941176470588235,
        "ruby-68": 0.326530612244898,
        "codebertscore_f1-29": 0.9499642848968506,
        "codebertscore_f3-29": 0.9576956629753113,
        "codebertscore_f1-6": 0.8473212718963623,
        "codebertscore_f3-6": 0.8662294149398804,
        "codebertscore_f1-90": 0.893640398979187,
        "codebertscore_f3-90": 0.9102999567985535,
        "codebertscore_f1-77": 0.8114513158798218,
        "codebertscore_f3-77": 0.8386256694793701,
        "codebertscore_f1-70": 0.563646137714386,
        "codebertscore_f3-70": 0.5528697371482849,
        "codebertscore_f1-39": 0.8942442536354065,
        "codebertscore_f3-39": 0.8967072367668152,
        "codebertscore_f1-27": 0.8722067475318909,
        "codebertscore_f3-27": 0.8952668905258179,
        "codebertscore_f1-189": 0.7692789435386658,
        "codebertscore_f3-189": 0.8202928900718689,
        "codebertscore_f1-23": 0.8558909893035889,
        "codebertscore_f3-23": 0.8790395259857178,
        "codebertscore_f1-144": 0.8772358894348145,
        "codebertscore_f3-144": 0.8949021697044373,
        "codebertscore_f1-9": 0.865263819694519,
        "codebertscore_f3-9": 0.8817344307899475,
        "codebertscore_f1-8": 0.8361842632293701,
        "codebertscore_f3-8": 0.8665065765380859,
        "codebertscore_f1-24": 0.597551703453064,
        "codebertscore_f3-24": 0.5357910990715027,
        "codebertscore_f1-67": 0.8611145615577698,
        "codebertscore_f3-67": 0.8770326972007751,
        "codebertscore_f1-72": 0.8122434616088867,
        "codebertscore_f3-72": 0.8389480113983154,
        "codebertscore_f1-175": 0.8060400485992432,
        "codebertscore_f3-175": 0.8427103757858276,
        "codebertscore_f1-195": 0.8955925107002258,
        "codebertscore_f3-195": 0.9014738202095032,
        "codebertscore_f1-60": 0.8607689738273621,
        "codebertscore_f3-60": 0.8859683871269226,
        "codebertscore_f1-143": 0.7619710564613342,
        "codebertscore_f3-143": 0.8365393877029419,
        "codebertscore_f1-68": 0.8180526494979858,
        "codebertscore_f3-68": 0.8373512625694275,
        "codebertscore_s_f1-29": 0.9529303312301636,
        "codebertscore_s_f3-29": 0.9603488445281982,
        "codebertscore_s_f1-6": 0.8552512526512146,
        "codebertscore_s_f3-6": 0.876159131526947,
        "codebertscore_s_f1-90": 0.9111894965171814,
        "codebertscore_s_f3-90": 0.9257261753082275,
        "codebertscore_s_f1-77": 0.8255012035369873,
        "codebertscore_s_f3-77": 0.8549186587333679,
        "codebertscore_s_f1-70": 0.5900081992149353,
        "codebertscore_s_f3-70": 0.5793870687484741,
        "codebertscore_s_f1-39": 0.9062304496765137,
        "codebertscore_s_f3-39": 0.9079297780990601,
        "codebertscore_s_f1-27": 0.8853641152381897,
        "codebertscore_s_f3-27": 0.9087139964103699,
        "codebertscore_s_f1-189": 0.7849825024604797,
        "codebertscore_s_f3-189": 0.8350405097007751,
        "codebertscore_s_f1-23": 0.8587636947631836,
        "codebertscore_s_f3-23": 0.8800917863845825,
        "codebertscore_s_f1-144": 0.8785898685455322,
        "codebertscore_s_f3-144": 0.8939499258995056,
        "codebertscore_s_f1-9": 0.8719432950019836,
        "codebertscore_s_f3-9": 0.8880966901779175,
        "codebertscore_s_f1-8": 0.8550118207931519,
        "codebertscore_s_f3-8": 0.8870141506195068,
        "codebertscore_s_f1-24": 0.7211233973503113,
        "codebertscore_s_f3-24": 0.6487411260604858,
        "codebertscore_s_f1-67": 0.8725912570953369,
        "codebertscore_s_f3-67": 0.887475848197937,
        "codebertscore_s_f1-72": 0.8278138041496277,
        "codebertscore_s_f3-72": 0.8565660119056702,
        "codebertscore_s_f1-175": 0.8285008668899536,
        "codebertscore_s_f3-175": 0.8622502088546753,
        "codebertscore_s_f1-195": 0.9059890508651733,
        "codebertscore_s_f3-195": 0.9130449891090393,
        "codebertscore_s_f1-60": 0.8757527470588684,
        "codebertscore_s_f3-60": 0.8974272608757019,
        "codebertscore_s_f1-143": 0.7818482518196106,
        "codebertscore_s_f3-143": 0.8612790107727051,
        "codebertscore_s_f1-68": 0.8343052268028259,
        "codebertscore_s_f3-68": 0.8566295504570007,
        "gpt35_nsnr-29": 4,
        "raw_gpt35_nsnr-29": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-90": 4,
        "raw_gpt35_nsnr-90": "4",
        "gpt35_nsnr-77": 4,
        "raw_gpt35_nsnr-77": "4",
        "gpt35_nsnr-70": 3,
        "raw_gpt35_nsnr-70": "3",
        "gpt35_nsnr-39": 4,
        "raw_gpt35_nsnr-39": "4",
        "gpt35_nsnr-27": 4,
        "raw_gpt35_nsnr-27": "4",
        "gpt35_nsnr-189": 4,
        "raw_gpt35_nsnr-189": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-144": 4,
        "raw_gpt35_nsnr-144": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-24": 0,
        "raw_gpt35_nsnr-24": "0",
        "gpt35_nsnr-67": 4,
        "raw_gpt35_nsnr-67": "4",
        "gpt35_nsnr-72": 4,
        "raw_gpt35_nsnr-72": "4",
        "gpt35_nsnr-175": 3,
        "raw_gpt35_nsnr-175": "3",
        "gpt35_nsnr-195": 3,
        "raw_gpt35_nsnr-195": "3",
        "gpt35_nsnr-60": 3,
        "raw_gpt35_nsnr-60": "3",
        "gpt35_nsnr-143": 4,
        "raw_gpt35_nsnr-143": "4",
        "gpt35_nsnr-68": 4,
        "raw_gpt35_nsnr-68": "4",
        "gpt35_nswr-29": 3,
        "raw_gpt35_nswr-29": "3",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-90": 4,
        "raw_gpt35_nswr-90": "4",
        "gpt35_nswr-77": 4,
        "raw_gpt35_nswr-77": "4",
        "gpt35_nswr-70": 3,
        "raw_gpt35_nswr-70": "3",
        "gpt35_nswr-39": 4,
        "raw_gpt35_nswr-39": "4",
        "gpt35_nswr-27": 4,
        "raw_gpt35_nswr-27": "4",
        "gpt35_nswr-189": 4,
        "raw_gpt35_nswr-189": "4",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-144": 4,
        "raw_gpt35_nswr-144": "4",
        "gpt35_nswr-9": 4,
        "raw_gpt35_nswr-9": "4",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-24": 4,
        "raw_gpt35_nswr-24": "4",
        "gpt35_nswr-67": 4,
        "raw_gpt35_nswr-67": "4",
        "gpt35_nswr-72": 4,
        "raw_gpt35_nswr-72": "4",
        "gpt35_nswr-175": 4,
        "raw_gpt35_nswr-175": "4",
        "gpt35_nswr-195": 3,
        "raw_gpt35_nswr-195": "3",
        "gpt35_nswr-60": 3,
        "raw_gpt35_nswr-60": "3",
        "gpt35_nswr-143": 4,
        "raw_gpt35_nswr-143": "4",
        "gpt35_nswr-68": 4,
        "raw_gpt35_nswr-68": "4"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // In this problem, you will implement a function that takes two lists of numbers,\n    // and determines whether it is possible to perform an exchange of elements\n    // between them to make lst1 a list of only even numbers.\n    // There is no limit on the number of exchanged elements between lst1 and lst2.\n    // If it is possible to exchange elements between the lst1 and lst2 to make\n    // all the elements of lst1 to be even, return \"YES\".\n    // Otherwise, return \"NO\".\n    // For example:\n    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    // exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    // It is assumed that the input lists will be non-empty.\n    public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n",
        "snippet": [
            "        int odd = 0, even = 0;\n        for (int i : lst1) {\n            if (i % 2 == 1) {\n                odd += 1;\n            }\n        }\n        for (int i : lst2) {\n            if (i % 2 == 0) {\n                even += 1;\n            }\n        }\n        if (even >= odd) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n}"
        ],
        "simplified": "In this problem, you will implement a function that takes two lists of numbers, and determines whether it is possible to perform an exchange of elements between them to make lst1 a list of only even numbers. There is no limit on the number of exchanged elements between lst1 and lst2. If it is possible to exchange elements between the lst1 and lst2 to make all the elements of lst1 to be even, return \"YES\". Otherwise, return \"NO\".",
        "task_id": "110",
        "37": "int check1 = 0;\n        int check2 = 0;\n        int check3 = 0;\n        for (int i : lst1) {\n            if (i % 2 == 0) {\n                check1 += 1;\n            }\n        }\n        for (int i : lst2) {\n            if (i % 2 == 0) {\n                check2 += 1;\n            }\n        }\n        if (check1 == lst1.size()) {\n            return \"YES\";\n        }\n        if (check2 == lst2.size()) {\n            return \"YES\";\n        }\n        if (check1 > 0 && check2 > 0) {\n            return \"YES\";\n        }\n        return \"NO\";",
        "grade-37": {
            "execution": 0
        },
        "8": "// your code here",
        "grade-8": {
            "execution": 0
        },
        "85": "long count = lst1.stream().filter(n -> n % 2 == 0).count();\n        if (count == lst1.size()) {\n            return \"YES\";\n        }\n        count = lst2.stream().filter(n -> n % 2 == 0).count();\n        if (count == lst2.size()) {\n            return \"YES\";\n        }\n        return \"NO\";",
        "grade-85": {
            "execution": 0
        },
        "77": "// IMPLEMENT ME\n        for (int i = 0; i < lst1.size(); i++) {\n            if (lst1.get(i) % 2 == 1) {\n                for (int j = 0; j < lst2.size(); j++) {\n                    if (lst2.get(j) % 2 == 0) {\n                        int temp = lst1.get(i);\n                        lst1.set(i, lst2.get(j));\n                        lst2.set(j, temp);\n                        break;\n                    }\n                }\n            }\n        }\n        boolean isEven = true;\n        for (int i = 0; i < lst1.size(); i++) {\n            if (lst1.get(i) % 2 == 1) {\n                isEven = false;\n                break;\n            }\n        }\n        if (isEven) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }",
        "grade-77": {
            "execution": 1
        },
        "72": "int count_lst1 = 0;\n        int count_lst2 = 0;\n        for (int i = 0; i < lst1.size(); i++) {\n            if (lst1.get(i) % 2 == 0) {\n                count_lst1 += 1;\n            }\n        }\n        for (int i = 0; i < lst2.size(); i++) {\n            if (lst2.get(i) % 2 == 0) {\n                count_lst2 += 1;\n            }\n        }\n        if (count_lst1 == lst1.size() || count_lst2 == lst2.size()) {\n            return \"YES\";\n        }\n        else {\n            return \"NO\";\n        }",
        "grade-72": {
            "execution": 0
        },
        "44": "int sum = 0;\n        for (int i = 0; i < lst1.size(); i++) {\n            sum += lst1.get(i);\n        }\n        if (sum % 2 == 0) {\n            return \"YES\";\n        }\n        else {\n            for (int i = 0; i < lst2.size(); i++) {\n                sum -= lst2.get(i);\n                if (sum % 2 == 0) {\n                    return \"YES\";\n                }\n                sum += lst2.get(i);\n            }\n        }\n        return \"NO\";",
        "grade-44": {
            "execution": 0
        },
        "34": "// Write your code here\n        return \"\";",
        "grade-34": {
            "execution": 0
        },
        "182": "// TODO: Implement this function\n        return \"\";",
        "grade-182": {
            "execution": 0
        },
        "30": "// You need to implement this function.\n        int size1 = lst1.size();\n        int size2 = lst2.size();\n        for (int i = 0; i < size1; i++) {\n            if (lst1.get(i) % 2 != 0) {\n                for (int j = 0; j < size2; j++) {\n                    if (lst2.get(j) % 2 == 0) {\n                        int temp = lst1.get(i);\n                        lst1.set(i, lst2.get(j));\n                        lst2.set(j, temp);\n                        break;\n                    }\n                }\n            }\n        }\n        for (int i = 0; i < size1; i++) {\n            if (lst1.get(i) % 2 != 0) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";",
        "grade-30": {
            "execution": 1
        },
        "196": "// Implement code below.\n        return \"YES\";",
        "grade-196": {
            "execution": 0
        },
        "141": "throw new UnsupportedOperationException(\"Remove this line and implement your method\");",
        "grade-141": {
            "execution": 0
        },
        "10": "return \"\";",
        "grade-10": {
            "execution": 0
        },
        "9": "// TODO: Implement your solution\n        return \"\";",
        "grade-9": {
            "execution": 0
        },
        "31": "// WRITE YOUR CODE HERE\n        int n = lst1.size();\n        boolean flag=true;\n        for(int i=0;i<n;i++){\n            if(lst1.get(i)%2!=0){\n                flag=false;\n                break;\n            }\n        }\n        if(flag)\n            return \"YES\";\n        else{\n            int count=0;\n            for(int i=0;i<n;i++){\n                if(lst1.get(i)%2!=0 && lst2.get(i)%2==0){\n                    lst1.set(i,lst2.get(i));\n                    count++;\n                }\n            }\n            if(count>0)\n                return \"YES\";\n            else\n                return \"NO\";\n        }",
        "grade-31": {
            "execution": 0
        },
        "69": "// Your code here\n        // check first if all numbers in lst1 are even\n        boolean isAllEven = true;\n        for (int i = 0; i < lst1.size(); i++) {\n            if (lst1.get(i) % 2 != 0) {\n                isAllEven = false;\n                break;\n            }\n        }\n        if (isAllEven) return \"YES\";\n        else {\n            // try to check if we can exchange some odd numbers in lst1 with even numbers in lst2\n            for (int i = 0; i < lst1.size(); i++) {\n                for (int j = 0; j < lst2.size(); j++) {\n                    if (lst1.get(i) % 2 != 0 && lst2.get(j) % 2 == 0) {\n                        int temp = lst1.get(i);\n                        lst1.set(i, lst2.get(j));\n                        lst2.set(j, temp);\n                        return exchange(lst1, lst2);\n                    }\n                }\n            }\n            return \"NO\";\n        }",
        "grade-69": {
            "execution": 1
        },
        "74": "int count1 = 0;\n        int count2 = 0;\n        int count3 = 0;\n        for (int i = 0; i < lst1.size(); i++) {\n            if (lst1.get(i) % 2 == 0) {\n                count1++;\n            }\n        }\n        for (int i = 0; i < lst2.size(); i++) {\n            if (lst2.get(i) % 2 == 0) {\n                count2++;\n            }\n        }\n        if (count1 == lst1.size()) {\n            return \"YES\";\n        }\n        if (count2 == lst2.size()) {\n            return \"YES\";\n        }\n        if (count1 == 0) {\n            count3 = lst1.size();\n        }\n        if (count2 == 0) {\n            count3 = lst2.size();\n        }\n        if (count3 % 2 == 0) {\n            return \"YES\";\n        }\n        return \"NO\";",
        "grade-74": {
            "execution": 0
        },
        "168": "// Write your code here\n        int oddSum = lst1.stream().mapToInt(x -> x).sum();\n        int evenSum = lst2.stream().mapToInt(x -> x).sum();\n        if (oddSum % 2 == 1) {\n            return \"NO\";\n        }\n        return \"YES\";",
        "grade-168": {
            "execution": 0
        },
        "199": "// IMPLEMENT THIS METHOD\n        return \"\";",
        "grade-199": {
            "execution": 0
        },
        "186": "// TODO: implement me!\n        return \"NO\";",
        "grade-186": {
            "execution": 0
        },
        "63": "for (int i = 0; i < lst1.size(); i++) {\n            if (lst1.get(i) % 2 == 1) {\n                for (int j = 0; j < lst2.size(); j++) {\n                    if (lst2.get(j) % 2 == 0) {\n                        lst1.set(i, lst2.get(j));\n                        lst2.set(j, i);\n                        break;\n                    }\n                }\n            }\n        }\n        for (int i = 0; i < lst1.size(); i++) {\n            if (lst1.get(i) % 2 == 1) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";",
        "grade-63": {
            "execution": 0
        },
        "bleu-37": 0.48781213283619557,
        "bleu-8": 0.0,
        "bleu-85": 0.2577770016805201,
        "bleu-77": 0.22410436207329618,
        "bleu-72": 0.3578202613351569,
        "bleu-44": 0.2961458112509441,
        "bleu-34": 0.00010822584679574266,
        "bleu-182": 0.0002115121728895495,
        "bleu-30": 0.207796984562344,
        "bleu-196": 0.0006620688805744583,
        "bleu-141": 0.0008405357726006548,
        "bleu-10": 2.5313490433883897e-09,
        "bleu-9": 0.0002115121728895495,
        "bleu-31": 0.21860221831070845,
        "bleu-69": 0.1601690870715051,
        "bleu-74": 0.225462617253298,
        "bleu-168": 0.24892226384235566,
        "bleu-199": 5.055378073968631e-05,
        "bleu-186": 0.0011478481768034182,
        "bleu-63": 0.2693711273060762,
        "codebleu-37": 0.7617339937890768,
        "codebleu-8": 0.017857142857142856,
        "codebleu-85": 0.4149029982363315,
        "codebleu-77": 0.587919184064655,
        "codebleu-72": 0.6092199390971939,
        "codebleu-44": 0.5781519690341822,
        "codebleu-34": 0.04765107889068154,
        "codebleu-182": 0.053633835971349526,
        "codebleu-30": 0.5654962881726743,
        "codebleu-196": 0.04765107889068154,
        "codebleu-141": 0.053571999913114156,
        "codebleu-10": 0.02380952386140155,
        "codebleu-9": 0.053633835971349526,
        "codebleu-31": 0.5600687430692817,
        "codebleu-69": 0.5624839646640751,
        "codebleu-74": 0.5899854254833565,
        "codebleu-168": 0.36303479098987007,
        "codebleu-199": 0.041684139583246495,
        "codebleu-186": 0.04768145501896856,
        "codebleu-63": 0.5663203855844056,
        "chrf-37": 0.6007554883634214,
        "chrf-8": 0.019203813411687858,
        "chrf-85": 0.31916423717608744,
        "chrf-77": 0.40376227367461953,
        "chrf-72": 0.45485602241714884,
        "chrf-44": 0.4068569247977344,
        "chrf-34": 0.07233078083225322,
        "chrf-182": 0.0772363383741477,
        "chrf-30": 0.37663556558067995,
        "chrf-196": 0.11125832519897007,
        "chrf-141": 0.09114717121897346,
        "chrf-10": 0.0492118768865134,
        "chrf-9": 0.07877954920324964,
        "chrf-31": 0.37154914709057274,
        "chrf-69": 0.336243090764445,
        "chrf-74": 0.38758147988755665,
        "chrf-168": 0.33371360560061136,
        "chrf-199": 0.05342598541218695,
        "chrf-186": 0.09616224001037497,
        "chrf-63": 0.42410537490247124,
        "rougel-37": 0.6862745098039217,
        "rougel-8": 0.0,
        "rougel-85": 0.4534883720930233,
        "rougel-77": 0.44106463878326996,
        "rougel-72": 0.6476190476190476,
        "rougel-44": 0.4873096446700507,
        "rougel-34": 0.0888888888888889,
        "rougel-182": 0.10989010989010987,
        "rougel-30": 0.398406374501992,
        "rougel-196": 0.10989010989010987,
        "rougel-141": 0.08247422680412371,
        "rougel-10": 0.09523809523809523,
        "rougel-9": 0.10989010989010987,
        "rougel-31": 0.4810126582278481,
        "rougel-69": 0.348993288590604,
        "rougel-74": 0.47761194029850745,
        "rougel-168": 0.3717948717948718,
        "rougel-199": 0.08988764044943821,
        "rougel-186": 0.13043478260869565,
        "rougel-63": 0.44247787610619466,
        "meteor-37": 0.7344337388830379,
        "meteor-8": 0.0,
        "meteor-85": 0.5035546476907056,
        "meteor-77": 0.6222016215730861,
        "meteor-72": 0.6172133881908152,
        "meteor-44": 0.6023605292427289,
        "meteor-34": 0.051369863013698634,
        "meteor-182": 0.0610123119015048,
        "meteor-30": 0.5621842002794383,
        "meteor-196": 0.0610123119015048,
        "meteor-141": 0.033921302578019,
        "meteor-10": 0.051795580110497244,
        "meteor-9": 0.0610123119015048,
        "meteor-31": 0.5938426453819841,
        "meteor-69": 0.5090559931221489,
        "meteor-74": 0.573568281938326,
        "meteor-168": 0.380789282522069,
        "meteor-199": 0.051440329218107,
        "meteor-186": 0.08044930176077716,
        "meteor-63": 0.5663159259084696,
        "ruby-37": 0.564516129032258,
        "ruby-8": 0.0,
        "ruby-85": 0.3152173913043478,
        "ruby-77": 0.29508196721311475,
        "ruby-72": 0.5153846153846153,
        "ruby-44": 0.3504273504273504,
        "ruby-34": 0.050000000000000044,
        "ruby-182": 0.0625,
        "ruby-30": 0.26900584795321636,
        "ruby-196": 0.0625,
        "ruby-141": 0.03749999999999998,
        "ruby-10": 0.050000000000000044,
        "ruby-9": 0.0625,
        "ruby-31": 0.3312101910828026,
        "ruby-69": 0.2339449541284404,
        "ruby-74": 0.32978723404255317,
        "ruby-168": 0.21250000000000002,
        "ruby-199": 0.050000000000000044,
        "ruby-186": 0.07499999999999996,
        "ruby-63": 0.31506849315068497,
        "codebertscore_f1-37": 0.8636538982391357,
        "codebertscore_f3-37": 0.8908383846282959,
        "codebertscore_f1-8": 0.4949217140674591,
        "codebertscore_f3-8": 0.47914963960647583,
        "codebertscore_f1-85": 0.7904759049415588,
        "codebertscore_f3-85": 0.7854384779930115,
        "codebertscore_f1-77": 0.7904447317123413,
        "codebertscore_f3-77": 0.8259497880935669,
        "codebertscore_f1-72": 0.8297092318534851,
        "codebertscore_f3-72": 0.8588277697563171,
        "codebertscore_f1-44": 0.8355164527893066,
        "codebertscore_f3-44": 0.8444523811340332,
        "codebertscore_f1-34": 0.5553440451622009,
        "codebertscore_f3-34": 0.5383010506629944,
        "codebertscore_f1-182": 0.5720930695533752,
        "codebertscore_f3-182": 0.5626723766326904,
        "codebertscore_f1-30": 0.7763475775718689,
        "codebertscore_f3-30": 0.8015965223312378,
        "codebertscore_f1-196": 0.5966259837150574,
        "codebertscore_f3-196": 0.5761151909828186,
        "codebertscore_f1-141": 0.5984016060829163,
        "codebertscore_f3-141": 0.5812388062477112,
        "codebertscore_f1-10": 0.5191641449928284,
        "codebertscore_f3-10": 0.4712848961353302,
        "codebertscore_f1-9": 0.5736399292945862,
        "codebertscore_f3-9": 0.5645291805267334,
        "codebertscore_f1-31": 0.7664039134979248,
        "codebertscore_f3-31": 0.793738842010498,
        "codebertscore_f1-69": 0.7598792314529419,
        "codebertscore_f3-69": 0.807361364364624,
        "codebertscore_f1-74": 0.8061268925666809,
        "codebertscore_f3-74": 0.8376165628433228,
        "codebertscore_f1-168": 0.7787716388702393,
        "codebertscore_f3-168": 0.8055108189582825,
        "codebertscore_f1-199": 0.55621737241745,
        "codebertscore_f3-199": 0.5423936247825623,
        "codebertscore_f1-186": 0.5806934833526611,
        "codebertscore_f3-186": 0.5600001215934753,
        "codebertscore_f1-63": 0.8008381724357605,
        "codebertscore_f3-63": 0.8190664649009705,
        "codebertscore_s_f1-37": 0.8779615759849548,
        "codebertscore_s_f3-37": 0.8982048630714417,
        "codebertscore_s_f1-8": 0.5257359743118286,
        "codebertscore_s_f3-8": 0.5197031497955322,
        "codebertscore_s_f1-85": 0.808704674243927,
        "codebertscore_s_f3-85": 0.806296706199646,
        "codebertscore_s_f1-77": 0.8200979828834534,
        "codebertscore_s_f3-77": 0.8431087732315063,
        "codebertscore_s_f1-72": 0.849519670009613,
        "codebertscore_s_f3-72": 0.8719435334205627,
        "codebertscore_s_f1-44": 0.8499526977539062,
        "codebertscore_s_f3-44": 0.8568776845932007,
        "codebertscore_s_f1-34": 0.5681564807891846,
        "codebertscore_s_f3-34": 0.5622051954269409,
        "codebertscore_s_f1-182": 0.5826253294944763,
        "codebertscore_s_f3-182": 0.5720207691192627,
        "codebertscore_s_f1-30": 0.8064829111099243,
        "codebertscore_s_f3-30": 0.8224835395812988,
        "codebertscore_s_f1-196": 0.6280815601348877,
        "codebertscore_s_f3-196": 0.6028307676315308,
        "codebertscore_s_f1-141": 0.5618113875389099,
        "codebertscore_s_f3-141": 0.5540439486503601,
        "codebertscore_s_f1-10": 0.6507357358932495,
        "codebertscore_s_f3-10": 0.5643239617347717,
        "codebertscore_s_f1-9": 0.576259434223175,
        "codebertscore_s_f3-9": 0.5645452737808228,
        "codebertscore_s_f1-31": 0.8003994822502136,
        "codebertscore_s_f3-31": 0.8159877061843872,
        "codebertscore_s_f1-69": 0.7966640591621399,
        "codebertscore_s_f3-69": 0.8283889293670654,
        "codebertscore_s_f1-74": 0.8339958190917969,
        "codebertscore_s_f3-74": 0.8512213230133057,
        "codebertscore_s_f1-168": 0.7732264995574951,
        "codebertscore_s_f3-168": 0.7901148200035095,
        "codebertscore_s_f1-199": 0.5691792368888855,
        "codebertscore_s_f3-199": 0.5603072047233582,
        "codebertscore_s_f1-186": 0.6184834241867065,
        "codebertscore_s_f3-186": 0.5973626971244812,
        "codebertscore_s_f1-63": 0.8386573791503906,
        "codebertscore_s_f3-63": 0.8435670137405396,
        "gpt35_nsnr-37": 4,
        "raw_gpt35_nsnr-37": "4",
        "gpt35_nsnr-8": 0,
        "raw_gpt35_nsnr-8": "3 - The code correctly checks if it is possible to exchange elements between lst1 and lst2 to make all the elements of lst1 even. However, it does not actually perform the exchange of elements and return \"YES\" or \"NO\" accordingly. The code snippet is missing the implementation of the exchange function.",
        "gpt35_nsnr-85": 3,
        "raw_gpt35_nsnr-85": "3",
        "gpt35_nsnr-77": 4,
        "raw_gpt35_nsnr-77": "4",
        "gpt35_nsnr-72": 3,
        "raw_gpt35_nsnr-72": "3",
        "gpt35_nsnr-44": 3,
        "raw_gpt35_nsnr-44": "3",
        "gpt35_nsnr-34": 0,
        "raw_gpt35_nsnr-34": "3 - The code snippet correctly identifies whether it is possible to exchange elements between lst1 and lst2 to make all the elements of lst1 even. However, it does not actually perform the exchange and always returns an empty string.",
        "gpt35_nsnr-182": 3,
        "raw_gpt35_nsnr-182": "3",
        "gpt35_nsnr-30": 4,
        "raw_gpt35_nsnr-30": "4",
        "gpt35_nsnr-196": 4,
        "raw_gpt35_nsnr-196": "4",
        "gpt35_nsnr-141": 4,
        "raw_gpt35_nsnr-141": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-9": 0,
        "raw_gpt35_nsnr-9": "3 - The code snippet correctly implements the logic to determine if it is possible to exchange elements between lst1 and lst2 to make all the elements of lst1 even. It iterates through lst1 and checks if each element is odd, and if so, it searches lst2 for an even element to swap with. If it cannot find an even element in lst2, it returns \"NO\". If it can find an even element, it swaps the elements and continues iterating through lst1. If it successfully makes all elements of lst1 even, it returns \"YES\". However, the code does not handle the case where lst1 is already a list of only even numbers, so it would return \"NO\" in that case.",
        "gpt35_nsnr-31": 4,
        "raw_gpt35_nsnr-31": "4",
        "gpt35_nsnr-69": 4,
        "raw_gpt35_nsnr-69": "4",
        "gpt35_nsnr-74": 3,
        "raw_gpt35_nsnr-74": "3",
        "gpt35_nsnr-168": 4,
        "raw_gpt35_nsnr-168": "4",
        "gpt35_nsnr-199": 0,
        "raw_gpt35_nsnr-199": "3 - The code snippet correctly implements the exchange function as described in the problem statement. It checks if lst1 already contains only even numbers, and if not, it checks if there are odd numbers in lst2 that can be exchanged with even numbers in lst1 to make lst1 all even. The logic seems correct and covers all required functionalities of the problem. However, there is no error handling for cases where the input lists are empty or null, which could be a potential issue.",
        "gpt35_nsnr-186": 3,
        "raw_gpt35_nsnr-186": "3",
        "gpt35_nsnr-63": 4,
        "raw_gpt35_nsnr-63": "4",
        "gpt35_nswr-37": 3,
        "raw_gpt35_nswr-37": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-85": 2,
        "raw_gpt35_nswr-85": "2",
        "gpt35_nswr-77": 3,
        "raw_gpt35_nswr-77": "3",
        "gpt35_nswr-72": 2,
        "raw_gpt35_nswr-72": "2",
        "gpt35_nswr-44": 2,
        "raw_gpt35_nswr-44": "2",
        "gpt35_nswr-34": 2,
        "raw_gpt35_nswr-34": "2",
        "gpt35_nswr-182": 2,
        "raw_gpt35_nswr-182": "2",
        "gpt35_nswr-30": 3,
        "raw_gpt35_nswr-30": "3",
        "gpt35_nswr-196": 2,
        "raw_gpt35_nswr-196": "2",
        "gpt35_nswr-141": 4,
        "raw_gpt35_nswr-141": "4",
        "gpt35_nswr-10": 2,
        "raw_gpt35_nswr-10": "2",
        "gpt35_nswr-9": 2,
        "raw_gpt35_nswr-9": "2",
        "gpt35_nswr-31": 3,
        "raw_gpt35_nswr-31": "3",
        "gpt35_nswr-69": 3,
        "raw_gpt35_nswr-69": "3",
        "gpt35_nswr-74": 3,
        "raw_gpt35_nswr-74": "3",
        "gpt35_nswr-168": 3,
        "raw_gpt35_nswr-168": "3",
        "gpt35_nswr-199": 2,
        "raw_gpt35_nswr-199": "2",
        "gpt35_nswr-186": 3,
        "raw_gpt35_nswr-186": "3",
        "gpt35_nswr-63": 3,
        "raw_gpt35_nswr-63": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return True if every opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"(\")\n    // False\n    // >>> correct_bracketing(\"()\")\n    // True\n    // >>> correct_bracketing(\"(()())\")\n    // True\n    // >>> correct_bracketing(\")(()\")\n    // False\n    public static boolean correctBracketing(String brackets) {\n",
        "snippet": [
            "        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '(') {\n                depth += 1;\n            } else {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}"
        ],
        "simplified": "brackets is a string of \"(\" and \")\". return True if every opening bracket has a corresponding closing bracket.",
        "task_id": "61",
        "35": "throw new RuntimeException(\"not implemented\");",
        "grade-35": {
            "execution": 0
        },
        "7": "int numOpen = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '(') {\n                numOpen++;\n            } else {\n                numOpen--;\n            }\n            if (numOpen < 0) {\n                return false;\n            }\n        }\n        return numOpen == 0;",
        "grade-7": {
            "execution": 1
        },
        "98": "throw new NotImplementedError();",
        "grade-98": {
            "execution": 0
        },
        "83": "// insert your code here\n        return false;",
        "grade-83": {
            "execution": 0
        },
        "76": "int open = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n            if (c == '(') {\n                open++;\n            } else if (c == ')') {\n                open--;\n            }\n            if (open < 0) {\n                return false;\n            }\n        }\n        return open == 0;",
        "grade-76": {
            "execution": 1
        },
        "45": "int n = brackets.length();\n        if (n % 2 == 1) {\n            return false;\n        }\n        int k = 0;\n        for (int i = 0; i < n; i++) {\n            char c = brackets.charAt(i);\n            if (c == '(') {\n                k++;\n            } else {\n                k--;\n            }\n            if (k < 0) {\n                return false;\n            }\n        }\n        return k == 0;",
        "grade-45": {
            "execution": 1
        },
        "31": "int n = brackets.length();\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (brackets.charAt(i) == '(') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                return false;\n            }\n        }\n        return count == 0;",
        "grade-31": {
            "execution": 1
        },
        "25": "// Complete this function\n        int n = brackets.length();\n        int cnt = 0;\n        for (int i = 0; i < n; i++) {\n            if (brackets.charAt(i) == '(') {\n                cnt++;\n            } else {\n                cnt--;\n            }\n            if (cnt < 0) {\n                return false;\n            }\n        }\n        return cnt == 0;",
        "grade-25": {
            "execution": 1
        },
        "151": "if (brackets.length() == 0) {\n            return true;\n        }\n        int stack = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '(') {\n                stack++;\n            } else {\n                stack--;\n            }\n            if (stack < 0) {\n                return false;\n            }\n        }\n        return stack == 0;",
        "grade-151": {
            "execution": 1
        },
        "9": "throw new Error(\"TODO\");",
        "grade-9": {
            "execution": 0
        },
        "8": "// STUDENT CODE GOES HERE\n        if (brackets.length() == 0) return true;\n        if (brackets.charAt(0) == ')') return false;\n        int count = 0;\n        for (int i = 0; i < brackets.length(); i++){\n            if (brackets.charAt(i) == '(') count++;\n            else count--;\n            if (count < 0) return false;\n        }\n        return count == 0;",
        "grade-8": {
            "execution": 1
        },
        "28": "// your code here\n        return false;",
        "grade-28": {
            "execution": 0
        },
        "73": "int score = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            score += brackets.charAt(i) == '(' ? 1 : -1;\n            if (score < 0) return false;\n        }\n        return score == 0;",
        "grade-73": {
            "execution": 1
        },
        "80": "// TODO: write code here\n        return true;",
        "grade-80": {
            "execution": 0
        },
        "188": "Stack<Character> s = new Stack<Character>();\n        if (brackets.length() % 2 != 0) return false;\n        for (int i = 0; i < brackets.length(); i++) {\n            char ch = brackets.charAt(i);\n            if (ch == '(') {\n                s.push(ch);\n            } else {\n                if (s.empty()) return false;\n                s.pop();\n            }\n        }\n        return s.empty();",
        "grade-188": {
            "execution": 1
        },
        "63": "throw new RuntimeException(\"Not implemented yet\");",
        "grade-63": {
            "execution": 0
        },
        "150": "// YOUR CODE HERE\n        throw new RuntimeException(\"not implemented\");",
        "grade-150": {
            "execution": 0
        },
        "74": "int N = brackets.length();\n        int openCount = 0;\n        for (int i = 0; i < N; i++) {\n            if (brackets.charAt(i) == '(') {\n                openCount++;\n            } else {\n                openCount--;\n            }\n            if (openCount < 0) {\n                return false;\n            }\n        }\n        return openCount == 0;",
        "grade-74": {
            "execution": 1
        },
        "161": "return brackets.replaceAll(\"[^()]\", \"\").chars().reduce(0, (x, y) -> x += y == '(' ? 1 : -1) == 0;",
        "grade-161": {
            "execution": 0
        },
        "99": "int open = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '(') {\n                open++;\n            } else {\n                open--;\n            }\n            if (open < 0) {\n                return false;\n            }\n        }\n        return open == 0;",
        "grade-99": {
            "execution": 1
        },
        "bleu-35": 0.0009920138782099216,
        "bleu-7": 0.3786261725981817,
        "bleu-98": 0.00012630075114061217,
        "bleu-83": 0.0004399141946810462,
        "bleu-76": 0.31338689545808207,
        "bleu-45": 0.297486551634654,
        "bleu-31": 0.38062426926495413,
        "bleu-25": 0.3566807409265544,
        "bleu-151": 0.3358573145539704,
        "bleu-9": 0.00035343956590390267,
        "bleu-8": 0.18060507346750548,
        "bleu-28": 0.00021241169775598463,
        "bleu-73": 0.2600154237313767,
        "bleu-80": 0.00027565567127850113,
        "bleu-188": 0.16751349742312968,
        "bleu-63": 0.0014446806137417031,
        "bleu-150": 0.0038762948592227396,
        "bleu-74": 0.3566807409265544,
        "bleu-161": 0.13096554046458167,
        "bleu-99": 0.4058722809462621,
        "codebleu-35": 0.0731766701994932,
        "codebleu-7": 0.652014972925384,
        "codebleu-98": 0.056912497051828416,
        "codebleu-83": 0.057101851935888355,
        "codebleu-76": 0.6772585536201972,
        "codebleu-45": 0.6818364619940094,
        "codebleu-31": 0.6528071550659994,
        "codebleu-25": 0.651908074267517,
        "codebleu-151": 0.6589360002010298,
        "codebleu-9": 0.0731766701994932,
        "codebleu-8": 0.5257452574525744,
        "codebleu-28": 0.0488991736911297,
        "codebleu-73": 0.5429399121577422,
        "codebleu-80": 0.06532711051038348,
        "codebleu-188": 0.5334080927016166,
        "codebleu-63": 0.0731766701994932,
        "codebleu-150": 0.09779524114986163,
        "codebleu-74": 0.6528071550659994,
        "codebleu-161": 0.28387813249527494,
        "codebleu-99": 0.652014972925384,
        "chrf-35": 0.05419987953192723,
        "chrf-7": 0.4456816095306079,
        "chrf-98": 0.04606661494182774,
        "chrf-83": 0.1282834559543569,
        "chrf-76": 0.43547355764982093,
        "chrf-45": 0.4366801437735318,
        "chrf-31": 0.4439111220780344,
        "chrf-25": 0.4433017311562844,
        "chrf-151": 0.4349815237397646,
        "chrf-9": 0.02905251506036623,
        "chrf-8": 0.3339748982834196,
        "chrf-28": 0.1169844396636607,
        "chrf-73": 0.3454535235627766,
        "chrf-80": 0.06860054895009186,
        "chrf-188": 0.3718070224579819,
        "chrf-63": 0.06006376183765203,
        "chrf-150": 0.05433238959455548,
        "chrf-74": 0.44163526577724965,
        "chrf-161": 0.18835185076535968,
        "chrf-99": 0.4591091826759903,
        "rougel-35": 0.13513513513513514,
        "rougel-7": 0.6474820143884892,
        "rougel-98": 0.08450704225352113,
        "rougel-83": 0.08333333333333333,
        "rougel-76": 0.6081081081081081,
        "rougel-45": 0.5569620253164558,
        "rougel-31": 0.5899280575539567,
        "rougel-25": 0.5694444444444445,
        "rougel-151": 0.6000000000000001,
        "rougel-9": 0.1388888888888889,
        "rougel-8": 0.4698795180722891,
        "rougel-28": 0.08450704225352113,
        "rougel-73": 0.576,
        "rougel-80": 0.0821917808219178,
        "rougel-188": 0.4,
        "rougel-63": 0.13333333333333333,
        "rougel-150": 0.12658227848101264,
        "rougel-74": 0.5694444444444445,
        "rougel-161": 0.33043478260869563,
        "rougel-99": 0.6716417910447761,
        "meteor-35": 0.043252595155709346,
        "meteor-7": 0.6655696207451148,
        "meteor-98": 0.02608695652173913,
        "meteor-83": 0.026041666666666668,
        "meteor-76": 0.6328647782943323,
        "meteor-45": 0.6851184996156529,
        "meteor-31": 0.6849424572317262,
        "meteor-25": 0.6796574074074073,
        "meteor-151": 0.6741849465096346,
        "meteor-9": 0.043402777777777776,
        "meteor-8": 0.5392039800995025,
        "meteor-28": 0.02608695652173913,
        "meteor-73": 0.5892498931661595,
        "meteor-80": 0.02599653379549393,
        "meteor-188": 0.42275050063666403,
        "meteor-63": 0.04317789291882556,
        "meteor-150": 0.042881646655231566,
        "meteor-74": 0.6796574074074073,
        "meteor-161": 0.2913582638224918,
        "meteor-99": 0.6707856836036188,
        "ruby-35": 0.06349206349206349,
        "ruby-7": 0.513157894736842,
        "ruby-98": 0.04761904761904767,
        "ruby-83": 0.04761904761904767,
        "ruby-76": 0.45882352941176474,
        "ruby-45": 0.41052631578947374,
        "ruby-31": 0.48684210526315785,
        "ruby-25": 0.45679012345679015,
        "ruby-151": 0.4482758620689655,
        "ruby-9": 0.07936507936507942,
        "ruby-8": 0.2621359223300971,
        "ruby-28": 0.04761904761904767,
        "ruby-73": 0.3650793650793651,
        "ruby-80": 0.04761904761904767,
        "ruby-188": 0.23364485981308414,
        "ruby-63": 0.06349206349206349,
        "ruby-150": 0.06349206349206349,
        "ruby-74": 0.45679012345679015,
        "ruby-161": 0.15873015873015872,
        "ruby-99": 0.5492957746478873,
        "codebertscore_f1-35": 0.5722237229347229,
        "codebertscore_f3-35": 0.5546004772186279,
        "codebertscore_f1-7": 0.8513064384460449,
        "codebertscore_f3-7": 0.8626317977905273,
        "codebertscore_f1-98": 0.5617601871490479,
        "codebertscore_f3-98": 0.5506619215011597,
        "codebertscore_f1-83": 0.58243727684021,
        "codebertscore_f3-83": 0.5767048597335815,
        "codebertscore_f1-76": 0.8494317531585693,
        "codebertscore_f3-76": 0.8574360609054565,
        "codebertscore_f1-45": 0.8167443871498108,
        "codebertscore_f3-45": 0.8274595141410828,
        "codebertscore_f1-31": 0.8466536402702332,
        "codebertscore_f3-31": 0.855787456035614,
        "codebertscore_f1-25": 0.8126834630966187,
        "codebertscore_f3-25": 0.8297868371009827,
        "codebertscore_f1-151": 0.817147433757782,
        "codebertscore_f3-151": 0.8260639905929565,
        "codebertscore_f1-9": 0.5594972968101501,
        "codebertscore_f3-9": 0.5404543876647949,
        "codebertscore_f1-8": 0.7939510941505432,
        "codebertscore_f3-8": 0.821114718914032,
        "codebertscore_f1-28": 0.5848582983016968,
        "codebertscore_f3-28": 0.5759810209274292,
        "codebertscore_f1-73": 0.8166815042495728,
        "codebertscore_f3-73": 0.8201600313186646,
        "codebertscore_f1-80": 0.5740032196044922,
        "codebertscore_f3-80": 0.5646296143531799,
        "codebertscore_f1-188": 0.767996609210968,
        "codebertscore_f3-188": 0.7766079902648926,
        "codebertscore_f1-63": 0.5886732935905457,
        "codebertscore_f3-63": 0.5716968178749084,
        "codebertscore_f1-150": 0.5855910181999207,
        "codebertscore_f3-150": 0.584014356136322,
        "codebertscore_f1-74": 0.8305888175964355,
        "codebertscore_f3-74": 0.8441499471664429,
        "codebertscore_f1-161": 0.6966791749000549,
        "codebertscore_f3-161": 0.6941907405853271,
        "codebertscore_f1-99": 0.8561683893203735,
        "codebertscore_f3-99": 0.8622829914093018,
        "codebertscore_s_f1-35": 0.5817455053329468,
        "codebertscore_s_f3-35": 0.5729933381080627,
        "codebertscore_s_f1-7": 0.8590036630630493,
        "codebertscore_s_f3-7": 0.8681928515434265,
        "codebertscore_s_f1-98": 0.5625284314155579,
        "codebertscore_s_f3-98": 0.5568984150886536,
        "codebertscore_s_f1-83": 0.6189467310905457,
        "codebertscore_s_f3-83": 0.6186981201171875,
        "codebertscore_s_f1-76": 0.8590161800384521,
        "codebertscore_s_f3-76": 0.8631797432899475,
        "codebertscore_s_f1-45": 0.8272532224655151,
        "codebertscore_s_f3-45": 0.8363013863563538,
        "codebertscore_s_f1-31": 0.8598232269287109,
        "codebertscore_s_f3-31": 0.8653121590614319,
        "codebertscore_s_f1-25": 0.8229164481163025,
        "codebertscore_s_f3-25": 0.8380911946296692,
        "codebertscore_s_f1-151": 0.8304068446159363,
        "codebertscore_s_f3-151": 0.835534930229187,
        "codebertscore_s_f1-9": 0.5745587348937988,
        "codebertscore_s_f3-9": 0.5685403347015381,
        "codebertscore_s_f1-8": 0.8100024461746216,
        "codebertscore_s_f3-8": 0.8309169411659241,
        "codebertscore_s_f1-28": 0.632432758808136,
        "codebertscore_s_f3-28": 0.6210147738456726,
        "codebertscore_s_f1-73": 0.8351498246192932,
        "codebertscore_s_f3-73": 0.8363767862319946,
        "codebertscore_s_f1-80": 0.6154007315635681,
        "codebertscore_s_f3-80": 0.621285617351532,
        "codebertscore_s_f1-188": 0.7838208079338074,
        "codebertscore_s_f3-188": 0.7907145023345947,
        "codebertscore_s_f1-63": 0.584874153137207,
        "codebertscore_s_f3-63": 0.5753340125083923,
        "codebertscore_s_f1-150": 0.5897006988525391,
        "codebertscore_s_f3-150": 0.5898329615592957,
        "codebertscore_s_f1-74": 0.8433283567428589,
        "codebertscore_s_f3-74": 0.8542530536651611,
        "codebertscore_s_f1-161": 0.7244182229042053,
        "codebertscore_s_f3-161": 0.7191838026046753,
        "codebertscore_s_f1-99": 0.8659518361091614,
        "codebertscore_s_f3-99": 0.8680359721183777,
        "gpt35_nsnr-35": 0,
        "raw_gpt35_nsnr-35": "0",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-98": 3,
        "raw_gpt35_nsnr-98": "3",
        "gpt35_nsnr-83": 2,
        "raw_gpt35_nsnr-83": "2",
        "gpt35_nsnr-76": 4,
        "raw_gpt35_nsnr-76": "4",
        "gpt35_nsnr-45": 4,
        "raw_gpt35_nsnr-45": "4",
        "gpt35_nsnr-31": 4,
        "raw_gpt35_nsnr-31": "4",
        "gpt35_nsnr-25": 4,
        "raw_gpt35_nsnr-25": "4",
        "gpt35_nsnr-151": 4,
        "raw_gpt35_nsnr-151": "4",
        "gpt35_nsnr-9": 0,
        "raw_gpt35_nsnr-9": "0",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-28": 2,
        "raw_gpt35_nsnr-28": "2",
        "gpt35_nsnr-73": 4,
        "raw_gpt35_nsnr-73": "4",
        "gpt35_nsnr-80": 2,
        "raw_gpt35_nsnr-80": "2",
        "gpt35_nsnr-188": 4,
        "raw_gpt35_nsnr-188": "4",
        "gpt35_nsnr-63": 0,
        "raw_gpt35_nsnr-63": "0",
        "gpt35_nsnr-150": 0,
        "raw_gpt35_nsnr-150": "0",
        "gpt35_nsnr-74": 4,
        "raw_gpt35_nsnr-74": "4",
        "gpt35_nsnr-161": 4,
        "raw_gpt35_nsnr-161": "4",
        "gpt35_nsnr-99": 4,
        "raw_gpt35_nsnr-99": "4",
        "gpt35_nswr-35": 2,
        "raw_gpt35_nswr-35": "2",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-98": 3,
        "raw_gpt35_nswr-98": "3",
        "gpt35_nswr-83": 3,
        "raw_gpt35_nswr-83": "3",
        "gpt35_nswr-76": 4,
        "raw_gpt35_nswr-76": "4",
        "gpt35_nswr-45": 4,
        "raw_gpt35_nswr-45": "4",
        "gpt35_nswr-31": 4,
        "raw_gpt35_nswr-31": "4",
        "gpt35_nswr-25": 4,
        "raw_gpt35_nswr-25": "4",
        "gpt35_nswr-151": 4,
        "raw_gpt35_nswr-151": "4",
        "gpt35_nswr-9": 2,
        "raw_gpt35_nswr-9": "2",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-73": 4,
        "raw_gpt35_nswr-73": "4",
        "gpt35_nswr-80": 1,
        "raw_gpt35_nswr-80": "1",
        "gpt35_nswr-188": 4,
        "raw_gpt35_nswr-188": "4",
        "gpt35_nswr-63": 2,
        "raw_gpt35_nswr-63": "2",
        "gpt35_nswr-150": 2,
        "raw_gpt35_nswr-150": "2",
        "gpt35_nswr-74": 4,
        "raw_gpt35_nswr-74": "4",
        "gpt35_nswr-161": 3,
        "raw_gpt35_nswr-161": "3",
        "gpt35_nswr-99": 4,
        "raw_gpt35_nswr-99": "4"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public static ArrayList<Integer> tri(int n) {\n",
        "snippet": [
            "        if (n == 0) {\n            return List.of(1);\n        }\n        List<Integer> my_tri = new ArrayList<>(Arrays.asList(1, 3));\n        for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                my_tri.add(i / 2 + 1);\n            } else {\n                my_tri.add(my_tri.get(my_tri.size() - 1) + my_tri.get(my_tri.size() - 2) + (i + 3) / 2);\n            }\n        }\n        return my_tri;\n    }\n}"
        ],
        "simplified": "Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in the last couple centuries. However, what people don't know is Tribonacci sequence. Tribonacci sequence is defined by the recurrence: tri(1) = 3 tri(n) = 1 + n / 2, if n is even. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.",
        "task_id": "130",
        "185": "ArrayList<Integer> res = new ArrayList<>();\n        if (n == 0) return res;\n        res.add(1);\n        if (n == 1) return res;\n        res.add(3);\n        if (n == 2) return res;\n        res.add(2);\n        int a = 1, b = 3, c = 2;\n        while (res.size() <= n) {\n            int d = a + b + c;\n            a = b;\n            b = c;\n            c = d;\n            res.add(d);\n        }\n        return res;",
        "grade-185": {
            "execution": 0
        },
        "30": "// your code here\n        return null;",
        "grade-30": {
            "execution": 0
        },
        "6": "ArrayList<Integer> result = new ArrayList<Integer>();\n        result.add(1);\n        result.add(3);\n        result.add(2);\n        int next = 0;\n        for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                next = 1 + i / 2;\n            } else {\n                next = result.get(i - 1) + result.get(i - 2) + result.get(i + 1);\n            }\n            result.add(next);\n        }\n        return result;",
        "grade-6": {
            "execution": 0
        },
        "82": "// Write your code here\n        return null;",
        "grade-82": {
            "execution": 0
        },
        "71": "// type your code here\n        return null;",
        "grade-71": {
            "execution": 0
        },
        "65": "ArrayList<Integer> list = new ArrayList<Integer>();\n        if (n == 0) {\n            return list;\n        }\n        list.add(1);\n        if (n == 1) {\n            return list;\n        }\n        list.add(3);\n        if (n == 2) {\n            return list;\n        }\n        list.add(2);\n        if (n == 3) {\n            return list;\n        }\n        for (int i = 3; i < n; i++) {\n            if (i % 2 == 0) {\n                list.add(1 + i / 2);\n            } else {\n                list.add(list.get(i - 1) + list.get(i - 2) + list.get(i + 1));\n            }\n        }\n        return list;",
        "grade-65": {
            "execution": 0
        },
        "37": "// YOUR CODE HERE\n        return null;",
        "grade-37": {
            "execution": 0
        },
        "28": "ArrayList<Integer> list = new ArrayList<Integer>();\n        if (n == 0) {\n            return list;\n        }\n        if (n == 1) {\n            list.add(1);\n            return list;\n        }\n        if (n == 2) {\n            list.add(1);\n            list.add(3);\n            return list;\n        }\n        list.add(1);\n        list.add(3);\n        list.add(2);\n        int i = 3;\n        while (i <= n) {\n            if (i % 2 == 0) {\n                list.add(1 + i / 2);\n            } else {\n                list.add(list.get(i - 1) + list.get(i - 2) + list.get(i + 1));\n            }\n            i++;\n        }\n        return list;",
        "grade-28": {
            "execution": 0
        },
        "196": "// Write your code here\n        if (n < 0) {\n            return new ArrayList<Integer>();\n        } else if (n == 0) {\n            return new ArrayList<Integer>(Arrays.asList(1));\n        } else if (n == 1) {\n            return new ArrayList<Integer>(Arrays.asList(1, 3));\n        } else if (n == 2) {\n            return new ArrayList<Integer>(Arrays.asList(1, 3, 2));\n        } else {\n            ArrayList<Integer> result = new ArrayList<Integer>(Arrays.asList(1, 3, 2));\n            for (int i = 3; i <= n; i++) {\n                if (i % 2 == 0) {\n                    result.add(1 + i / 2);\n                } else {\n                    result.add(result.get(i - 1) + result.get(i - 2) + result.get(i + 1));\n                }\n            }\n            return result;\n        }",
        "grade-196": {
            "execution": 0
        },
        "156": "ArrayList<Integer> list = new ArrayList<Integer>();\n        for (int i = 1; i <= n + 1; i++) {\n            if (i == 1) {\n                list.add(3);\n            } else if (i % 2 == 0) {\n                list.add(1 + i / 2);\n            } else {\n                list.add(list.get(i - 2) + list.get(i - 3) + list.get(i - 1));\n            }\n        }\n        return list;",
        "grade-156": {
            "execution": 0
        },
        "23": "ArrayList<Integer> tri = new ArrayList<>();\n        tri.add(1);\n        tri.add(3);\n        tri.add(2);\n        if (n == 2) {\n            return tri;\n        }\n        for (int i = 3; i <= n; i++) {\n            int a = tri.get(i - 3);\n            int b = tri.get(i - 2);\n            int c = tri.get(i - 1);\n            if (i % 2 == 0) {\n                tri.add(1 + i / 2);\n            } else {\n                tri.add(a + b + c);\n            }\n        }\n        return tri;",
        "grade-23": {
            "execution": 0
        },
        "169": "ArrayList<Integer> result = new ArrayList<Integer>();\n        result.add(1);\n        result.add(3);\n        result.add(2);\n        for (int i = 3; i <= n; i++) {\n            int x = result.get(i - 1);\n            int y = result.get(i - 2);\n            int z = result.get(i - 3);\n            result.add(i % 2 == 0 ? 1 + i / 2 : x + y + z);\n        }\n        return result;",
        "grade-169": {
            "execution": 0
        },
        "122": "// Write your code here.\n        return null;",
        "grade-122": {
            "execution": 0
        },
        "8": "ArrayList<Integer> res = new ArrayList<Integer>();\n        // fill in res with the first n + 1 terms of the sequence\n        return res;",
        "grade-8": {
            "execution": 0
        },
        "7": "ArrayList<Integer> list = new ArrayList<Integer>();\n        list.add(1);\n        if (n == 0) {\n            return list;\n        }\n        list.add(3);\n        if (n == 1) {\n            return list;\n        }\n        list.add(2);\n        if (n == 2) {\n            return list;\n        }\n        for (int i = 3; i <= n; i++) {\n            int x = list.get(i - 1) + list.get(i - 2) + list.get(i - 3);\n            list.add(x);\n        }\n        return list;",
        "grade-7": {
            "execution": 0
        },
        "25": "ArrayList<Integer> answer = new ArrayList<Integer>();\n        if (n == 0) {\n            return answer;\n        }\n        answer.add(1);\n        if (n == 1) {\n            return answer;\n        }\n        answer.add(3);\n        if (n == 2) {\n            return answer;\n        }\n        answer.add(2);\n        if (n == 3) {\n            return answer;\n        }\n        for (int i = 4; i <= n; i++) {\n            if (i % 2 == 0) {\n                answer.add(1 + i / 2);\n            } else {\n                answer.add(answer.get(i - 1) + answer.get(i - 2) + answer.get(i + 1));\n            }\n        }\n        return answer;",
        "grade-25": {
            "execution": 0
        },
        "63": "ArrayList<Integer> a = new ArrayList<>();\n        a.add(1);\n        a.add(3);\n        a.add(2);\n        if (n <= 2) return a;\n        while (a.size() < n + 1) {\n            int N = a.size();\n            int A = a.get(N - 3);\n            int B = a.get(N - 2);\n            int C = a.get(N - 1);\n            int D = (N % 2 == 0) ? (1 + N / 2) : (A + B + C);\n            a.add(D);\n        }\n        return a;",
        "grade-63": {
            "execution": 0
        },
        "68": "ArrayList<Integer> result = new ArrayList<Integer>();\n        result.add(1);\n        result.add(3);\n        result.add(2);\n        if (n == 0) {\n            return result;\n        }\n        result.add(8);\n        for (int i = 4; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(1 + i / 2);\n            } else {\n                result.add(result.get(i - 1) + result.get(i - 2) + result.get(i + 1));\n            }\n        }\n        return result;",
        "grade-68": {
            "execution": 0
        },
        "146": "ArrayList<Integer> ans = new ArrayList<>();\n        ans.add(1);\n        ans.add(3);\n        ans.add(2);\n        for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                ans.add(1 + i / 2);\n            } else {\n                ans.add(ans.get(i - 1) + ans.get(i - 2) + ans.get(i + 1));\n            }\n        }\n        return ans;",
        "grade-146": {
            "execution": 0
        },
        "173": "ArrayList<Integer> array = new ArrayList<Integer>();\n        array.add(1);\n        array.add(3);\n        array.add(2);\n        int lastEven = 2;\n        int lastOdd1 = 3;\n        int lastOdd2 = 1;\n        int lastOdd3 = 0;\n        for (int i = 3; i <= n; i++) {\n            int next;\n            if (i % 2 == 0) {\n                next = lastEven + 1;\n                lastEven = next;\n            } else {\n                next = lastOdd1 + lastOdd2 + lastOdd3;\n                lastOdd3 = lastOdd2;\n                lastOdd2 = lastOdd1;\n                lastOdd1 = next;\n            }\n            array.add(next);\n        }\n        return array;",
        "grade-173": {
            "execution": 0
        },
        "bleu-185": 0.2352179079589866,
        "bleu-30": 2.7071496597140418e-08,
        "bleu-6": 0.4422482334789165,
        "bleu-82": 1.3637706838766227e-07,
        "bleu-71": 1.3637706838766227e-07,
        "bleu-65": 0.39318312065986705,
        "bleu-37": 2.7071496597140418e-08,
        "bleu-28": 0.32974232513716073,
        "bleu-196": 0.3538980786940968,
        "bleu-156": 0.4331189891518157,
        "bleu-23": 0.4167438561191825,
        "bleu-169": 0.3493121646914805,
        "bleu-122": 5.204085644547617e-07,
        "bleu-8": 0.015324154988651452,
        "bleu-7": 0.3668717086263641,
        "bleu-25": 0.40985706042310766,
        "bleu-63": 0.24840056593396173,
        "bleu-68": 0.502655620162194,
        "bleu-146": 0.4767083231496432,
        "bleu-173": 0.2964068210733964,
        "codebleu-185": 0.4846741932851392,
        "codebleu-30": 0.022099608942113675,
        "codebleu-6": 0.614370705562748,
        "codebleu-82": 0.02578311126309585,
        "codebleu-71": 0.02578311126309585,
        "codebleu-65": 0.6931387251431553,
        "codebleu-37": 0.022099608942113675,
        "codebleu-28": 0.6621007319332773,
        "codebleu-196": 0.702540143520896,
        "codebleu-156": 0.5949192900201706,
        "codebleu-23": 0.6629977459006597,
        "codebleu-169": 0.5395230965066509,
        "codebleu-122": 0.033150283849188625,
        "codebleu-8": 0.10108015669897868,
        "codebleu-7": 0.6032706364404512,
        "codebleu-25": 0.6952775790274126,
        "codebleu-63": 0.593807565835066,
        "codebleu-68": 0.6916605644824615,
        "codebleu-146": 0.6284219601330264,
        "codebleu-173": 0.4953861669017403,
        "chrf-185": 0.3071540366799815,
        "chrf-30": 0.03442745689073688,
        "chrf-6": 0.4005795815364792,
        "chrf-82": 0.03949590750989185,
        "chrf-71": 0.03690510617438249,
        "chrf-65": 0.44365730753954724,
        "chrf-37": 0.02387570217987806,
        "chrf-28": 0.40269375112475125,
        "chrf-196": 0.46175247391293744,
        "chrf-156": 0.4191482092311351,
        "chrf-23": 0.5070990389235891,
        "chrf-169": 0.35801938510379067,
        "chrf-122": 0.04032688234808493,
        "chrf-8": 0.18782047706360874,
        "chrf-7": 0.39579810331804743,
        "chrf-25": 0.43128731212081056,
        "chrf-63": 0.33889576089183376,
        "chrf-68": 0.4536872639719823,
        "chrf-146": 0.4213708139926957,
        "chrf-173": 0.3309023769710784,
        "rougel-185": 0.37600000000000006,
        "rougel-30": 0.05925925925925926,
        "rougel-6": 0.596774193548387,
        "rougel-82": 0.058823529411764705,
        "rougel-71": 0.058823529411764705,
        "rougel-65": 0.5813148788927336,
        "rougel-37": 0.05925925925925926,
        "rougel-28": 0.548494983277592,
        "rougel-196": 0.5953757225433526,
        "rougel-156": 0.6166666666666667,
        "rougel-23": 0.49253731343283585,
        "rougel-169": 0.49795918367346936,
        "rougel-122": 0.058394160583941604,
        "rougel-8": 0.2236024844720497,
        "rougel-7": 0.46511627906976744,
        "rougel-25": 0.5862068965517242,
        "rougel-63": 0.4,
        "rougel-68": 0.6283524904214559,
        "rougel-146": 0.6804979253112033,
        "rougel-173": 0.4249084249084249,
        "meteor-185": 0.3675993304691908,
        "meteor-30": 0.01737619461337967,
        "meteor-6": 0.47685067864912967,
        "meteor-82": 0.017361111111111112,
        "meteor-71": 0.017361111111111112,
        "meteor-65": 0.583489887655958,
        "meteor-37": 0.01737619461337967,
        "meteor-28": 0.5300423876775044,
        "meteor-196": 0.6250883938252658,
        "meteor-156": 0.4977822404146891,
        "meteor-23": 0.5427208058716737,
        "meteor-169": 0.41767277594807656,
        "meteor-122": 0.02168256721595837,
        "meteor-8": 0.1267141563156084,
        "meteor-7": 0.49478699911600343,
        "meteor-25": 0.5918374398569755,
        "meteor-63": 0.4372434393569713,
        "meteor-68": 0.5968100129866728,
        "meteor-146": 0.5742563864580571,
        "meteor-173": 0.32135572204890006,
        "ruby-185": 0.1889763779527559,
        "ruby-30": 0.03149606299212604,
        "ruby-6": 0.40157480314960625,
        "ruby-82": 0.03149606299212604,
        "ruby-71": 0.03149606299212604,
        "ruby-65": 0.42592592592592593,
        "ruby-37": 0.03149606299212604,
        "ruby-28": 0.36627906976744184,
        "ruby-196": 0.410958904109589,
        "ruby-156": 0.39370078740157477,
        "ruby-23": 0.2907801418439716,
        "ruby-169": 0.2913385826771654,
        "ruby-122": 0.03149606299212604,
        "ruby-8": 0.13385826771653542,
        "ruby-7": 0.22137404580152675,
        "ruby-25": 0.4355828220858896,
        "ruby-63": 0.19580419580419584,
        "ruby-68": 0.4402985074626866,
        "ruby-146": 0.5196850393700787,
        "ruby-173": 0.26027397260273977,
        "codebertscore_f1-185": 0.7789091467857361,
        "codebertscore_f3-185": 0.7680563926696777,
        "codebertscore_f1-30": 0.572214663028717,
        "codebertscore_f3-30": 0.5265251398086548,
        "codebertscore_f1-6": 0.8522519469261169,
        "codebertscore_f3-6": 0.8418493866920471,
        "codebertscore_f1-82": 0.558867871761322,
        "codebertscore_f3-82": 0.5170950889587402,
        "codebertscore_f1-71": 0.569336473941803,
        "codebertscore_f3-71": 0.5264089107513428,
        "codebertscore_f1-65": 0.8209723830223083,
        "codebertscore_f3-65": 0.8132168650627136,
        "codebertscore_f1-37": 0.5759422183036804,
        "codebertscore_f3-37": 0.52974534034729,
        "codebertscore_f1-28": 0.8011953234672546,
        "codebertscore_f3-28": 0.7924404144287109,
        "codebertscore_f1-196": 0.8144729137420654,
        "codebertscore_f3-196": 0.8103932738304138,
        "codebertscore_f1-156": 0.8615437150001526,
        "codebertscore_f3-156": 0.8459904193878174,
        "codebertscore_f1-23": 0.8427077531814575,
        "codebertscore_f3-23": 0.8342487812042236,
        "codebertscore_f1-169": 0.8214942812919617,
        "codebertscore_f3-169": 0.8097679018974304,
        "codebertscore_f1-122": 0.55638587474823,
        "codebertscore_f3-122": 0.5144539475440979,
        "codebertscore_f1-8": 0.6922380328178406,
        "codebertscore_f3-8": 0.6662328839302063,
        "codebertscore_f1-7": 0.8231906294822693,
        "codebertscore_f3-7": 0.811859130859375,
        "codebertscore_f1-25": 0.8192004561424255,
        "codebertscore_f3-25": 0.8101209998130798,
        "codebertscore_f1-63": 0.8097832798957825,
        "codebertscore_f3-63": 0.8045511841773987,
        "codebertscore_f1-68": 0.8452064990997314,
        "codebertscore_f3-68": 0.8354752063751221,
        "codebertscore_f1-146": 0.8584458231925964,
        "codebertscore_f3-146": 0.8442174196243286,
        "codebertscore_f1-173": 0.7620480060577393,
        "codebertscore_f3-173": 0.7714972496032715,
        "codebertscore_s_f1-185": 0.7841198444366455,
        "codebertscore_s_f3-185": 0.7729705572128296,
        "codebertscore_s_f1-30": 0.579116702079773,
        "codebertscore_s_f3-30": 0.53751140832901,
        "codebertscore_s_f1-6": 0.8510241508483887,
        "codebertscore_s_f3-6": 0.8401436805725098,
        "codebertscore_s_f1-82": 0.5740527510643005,
        "codebertscore_s_f3-82": 0.5369123816490173,
        "codebertscore_s_f1-71": 0.576744556427002,
        "codebertscore_s_f3-71": 0.5390613675117493,
        "codebertscore_s_f1-65": 0.8282234072685242,
        "codebertscore_s_f3-65": 0.8194179534912109,
        "codebertscore_s_f1-37": 0.5731203556060791,
        "codebertscore_s_f3-37": 0.5348524451255798,
        "codebertscore_s_f1-28": 0.8081220388412476,
        "codebertscore_s_f3-28": 0.7981473207473755,
        "codebertscore_s_f1-196": 0.8222458362579346,
        "codebertscore_s_f3-196": 0.8172321915626526,
        "codebertscore_s_f1-156": 0.8518280386924744,
        "codebertscore_s_f3-156": 0.8352165222167969,
        "codebertscore_s_f1-23": 0.8418905138969421,
        "codebertscore_s_f3-23": 0.8316975831985474,
        "codebertscore_s_f1-169": 0.8241431713104248,
        "codebertscore_s_f3-169": 0.8119930028915405,
        "codebertscore_s_f1-122": 0.5740315914154053,
        "codebertscore_s_f3-122": 0.5348349213600159,
        "codebertscore_s_f1-8": 0.6790624856948853,
        "codebertscore_s_f3-8": 0.6518976092338562,
        "codebertscore_s_f1-7": 0.8231625556945801,
        "codebertscore_s_f3-7": 0.8108227252960205,
        "codebertscore_s_f1-25": 0.825282633304596,
        "codebertscore_s_f3-25": 0.8168789148330688,
        "codebertscore_s_f1-63": 0.8104199767112732,
        "codebertscore_s_f3-63": 0.8027880191802979,
        "codebertscore_s_f1-68": 0.8391830325126648,
        "codebertscore_s_f3-68": 0.8296508193016052,
        "codebertscore_s_f1-146": 0.8549560308456421,
        "codebertscore_s_f3-146": 0.8399732112884521,
        "codebertscore_s_f1-173": 0.7646965980529785,
        "codebertscore_s_f3-173": 0.7754506468772888,
        "gpt35_nsnr-185": 4,
        "raw_gpt35_nsnr-185": "4",
        "gpt35_nsnr-30": 0,
        "raw_gpt35_nsnr-30": "0",
        "gpt35_nsnr-6": 2,
        "raw_gpt35_nsnr-6": "2",
        "gpt35_nsnr-82": 0,
        "raw_gpt35_nsnr-82": "0",
        "gpt35_nsnr-71": 0,
        "raw_gpt35_nsnr-71": "0",
        "gpt35_nsnr-65": 3,
        "raw_gpt35_nsnr-65": "3",
        "gpt35_nsnr-37": 0,
        "raw_gpt35_nsnr-37": "0",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-196": 4,
        "raw_gpt35_nsnr-196": "4",
        "gpt35_nsnr-156": 4,
        "raw_gpt35_nsnr-156": "4",
        "gpt35_nsnr-23": 3,
        "raw_gpt35_nsnr-23": "3",
        "gpt35_nsnr-169": 3,
        "raw_gpt35_nsnr-169": "3",
        "gpt35_nsnr-122": 0,
        "raw_gpt35_nsnr-122": "0",
        "gpt35_nsnr-8": 2,
        "raw_gpt35_nsnr-8": "2",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-25": 3,
        "raw_gpt35_nsnr-25": "3",
        "gpt35_nsnr-63": 4,
        "raw_gpt35_nsnr-63": "4",
        "gpt35_nsnr-68": 2,
        "raw_gpt35_nsnr-68": "2",
        "gpt35_nsnr-146": 3,
        "raw_gpt35_nsnr-146": "3",
        "gpt35_nsnr-173": 3,
        "raw_gpt35_nsnr-173": "3",
        "gpt35_nswr-185": 3,
        "raw_gpt35_nswr-185": "3",
        "gpt35_nswr-30": 0,
        "raw_gpt35_nswr-30": "0",
        "gpt35_nswr-6": 2,
        "raw_gpt35_nswr-6": "2",
        "gpt35_nswr-82": 0,
        "raw_gpt35_nswr-82": "0",
        "gpt35_nswr-71": 0,
        "raw_gpt35_nswr-71": "0",
        "gpt35_nswr-65": 2,
        "raw_gpt35_nswr-65": "2",
        "gpt35_nswr-37": 0,
        "raw_gpt35_nswr-37": "0",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-196": 4,
        "raw_gpt35_nswr-196": "4",
        "gpt35_nswr-156": 3,
        "raw_gpt35_nswr-156": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-169": 3,
        "raw_gpt35_nswr-169": "3",
        "gpt35_nswr-122": 0,
        "raw_gpt35_nswr-122": "0",
        "gpt35_nswr-8": 2,
        "raw_gpt35_nswr-8": "2",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-25": 2,
        "raw_gpt35_nswr-25": "2",
        "gpt35_nswr-63": 3,
        "raw_gpt35_nswr-63": "3",
        "gpt35_nswr-68": 2,
        "raw_gpt35_nswr-68": "2",
        "gpt35_nswr-146": 2,
        "raw_gpt35_nswr-146": "2",
        "gpt35_nswr-173": 2,
        "raw_gpt35_nswr-173": "2"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return length of given string\n    // >>> strlen('')\n    // 0\n    // >>> strlen('abc')\n    // 3\n    public static int strlen(String string) {\n",
        "snippet": [
            "        return string.length();\n    }\n}"
        ],
        "simplified": "Return length of given string",
        "task_id": "23",
        "137": "// Write your code here\n        return 0;",
        "grade-137": {
            "execution": 0
        },
        "7": "return 0;",
        "grade-7": {
            "execution": 0
        },
        "0": "throw new RuntimeException(\"not implemented\");",
        "grade-0": {
            "execution": 0
        },
        "165": "int length = 0;\n\t\twhile (string.length() > length) {\n\t\t\tlength = length + 1;\n\t\t}\n\t\treturn length;",
        "grade-165": {
            "execution": 1
        },
        "48": "// TODO: implement this\n\treturn string.length();",
        "grade-48": {
            "execution": 1
        },
        "42": "int i = 0;\n        while(i < string.length() && string.charAt(i) != '\\0') {\n            i++;\n        }\n        return i;",
        "grade-42": {
            "execution": 1
        },
        "141": "// [Your code here]\n        return 0;",
        "grade-141": {
            "execution": 0
        },
        "27": "int counter = 0;\n        for (int i = 0; i < string.length(); i++) {\n            counter++;\n        }\n        return counter;",
        "grade-27": {
            "execution": 1
        },
        "195": "// TODO: write your code here\n        return 0;",
        "grade-195": {
            "execution": 0
        },
        "115": "// TODO implement strlen\n        return 0;",
        "grade-115": {
            "execution": 0
        },
        "3": "// The length of the string is an integer in the range of 0 to 2^31 - 1.\n        return string.length();",
        "grade-3": {
            "execution": 1
        },
        "82": "// TODO: Implement this function.\n        return 0;",
        "grade-82": {
            "execution": 0
        },
        "189": "// IMPLEMENT ME\n        return string.length();",
        "grade-189": {
            "execution": 1
        },
        "92": "throw new UnsupportedOperationException(\"Not implemented\");",
        "grade-92": {
            "execution": 0
        },
        "1": "return string.length();",
        "grade-1": {
            "execution": 1
        },
        "117": "int count = 0;\n        for (char c : string.toCharArray()) {\n            count += 1;\n        }\n        return count;",
        "grade-117": {
            "execution": 1
        },
        "78": "int len = 0;\n        try {\n            len = string.length();\n        } catch (Exception e) {\n            len = 0;\n        }\n        return len;",
        "grade-78": {
            "execution": 1
        },
        "158": "int length = 0;\n\t\tfor (int i = 0; i < string.length(); i++) {\n\t\t\tlength++;\n\t\t}\n\t\treturn length;",
        "grade-158": {
            "execution": 1
        },
        "107": "int length = 0;\n        for (int i = 0; i < string.length(); i++) {\n            length++;\n        }\n        return length;",
        "grade-107": {
            "execution": 1
        },
        "74": "return string.length();",
        "grade-74": {
            "execution": 1
        },
        "bleu-137": 0.05669791110976001,
        "bleu-7": 0.04691812222477093,
        "bleu-0": 0.08295193507109859,
        "bleu-165": 0.1608198681929369,
        "bleu-48": 0.47037095938668955,
        "bleu-42": 0.10500614219885059,
        "bleu-141": 0.04990049701936832,
        "bleu-27": 0.15562125171333174,
        "bleu-195": 0.04456882760699063,
        "bleu-115": 0.057955996129953655,
        "bleu-3": 0.19592801392877232,
        "bleu-82": 0.049323515694897076,
        "bleu-189": 0.5706745777055997,
        "bleu-92": 0.07495553473355845,
        "bleu-1": 0.7514772930752862,
        "bleu-117": 0.048075470019596486,
        "bleu-78": 0.20130088157694537,
        "bleu-158": 0.15562125171333174,
        "bleu-107": 0.15562125171333174,
        "bleu-74": 0.7514772930752862,
        "codebleu-137": 0.2547008547008547,
        "codebleu-7": 0.11092771941659581,
        "codebleu-0": 0.25616441078316815,
        "codebleu-165": 0.617998361706858,
        "codebleu-48": 0.6919796948301935,
        "codebleu-42": 0.6584477508826757,
        "codebleu-141": 0.2547008547008547,
        "codebleu-27": 0.6630063417210755,
        "codebleu-195": 0.2547008547008547,
        "codebleu-115": 0.2547008547008547,
        "codebleu-3": 0.6603520192703362,
        "codebleu-82": 0.26752136752136746,
        "codebleu-189": 0.7019849811722502,
        "codebleu-92": 0.25616441078316815,
        "codebleu-1": 0.7370249939216729,
        "codebleu-117": 0.5854700854700854,
        "codebleu-78": 0.721434289020443,
        "codebleu-158": 0.6630063417210755,
        "codebleu-107": 0.6630063417210755,
        "codebleu-74": 0.7370249939216729,
        "chrf-137": 0.20100738878590046,
        "chrf-7": 0.1926181203848711,
        "chrf-0": 0.12080041378929122,
        "chrf-165": 0.5253793313337475,
        "chrf-48": 0.7760734843886621,
        "chrf-42": 0.5356183918263122,
        "chrf-141": 0.18522747910619763,
        "chrf-27": 0.5526909656825777,
        "chrf-195": 0.19268295409263658,
        "chrf-115": 0.25958499662302964,
        "chrf-3": 0.6068452326880698,
        "chrf-82": 0.2293789744393769,
        "chrf-189": 0.8219764597553311,
        "chrf-92": 0.13251446477461093,
        "chrf-1": 0.9236776304455616,
        "chrf-117": 0.31068634766021763,
        "chrf-78": 0.5911825272212194,
        "chrf-158": 0.5634777654970409,
        "chrf-107": 0.5634777654970409,
        "chrf-74": 0.9236776304455616,
        "rougel-137": 0.2222222222222222,
        "rougel-7": 0.3333333333333333,
        "rougel-0": 0.3,
        "rougel-165": 0.39999999999999997,
        "rougel-48": 0.6363636363636364,
        "rougel-42": 0.29166666666666663,
        "rougel-141": 0.2105263157894737,
        "rougel-27": 0.3333333333333333,
        "rougel-195": 0.19999999999999998,
        "rougel-115": 0.23529411764705882,
        "rougel-3": 0.368421052631579,
        "rougel-82": 0.19999999999999998,
        "rougel-189": 0.7000000000000001,
        "rougel-92": 0.28571428571428575,
        "rougel-1": 0.8750000000000001,
        "rougel-117": 0.3243243243243243,
        "rougel-78": 0.41025641025641024,
        "rougel-158": 0.3333333333333333,
        "rougel-107": 0.3333333333333333,
        "rougel-74": 0.8750000000000001,
        "meteor-137": 0.1111111111111111,
        "meteor-7": 0.11904761904761904,
        "meteor-0": 0.27777777777777773,
        "meteor-165": 0.49722546728971967,
        "meteor-48": 0.7435953104646114,
        "meteor-42": 0.443359375,
        "meteor-141": 0.10989010989010987,
        "meteor-27": 0.6160910087719299,
        "meteor-195": 0.10869565217391303,
        "meteor-115": 0.11235955056179774,
        "meteor-3": 0.6354359925788496,
        "meteor-82": 0.16304347826086954,
        "meteor-189": 0.7597604259094942,
        "meteor-92": 0.27479091995221033,
        "meteor-1": 0.7942949907235621,
        "meteor-117": 0.4399925107657742,
        "meteor-78": 0.6200645089533978,
        "meteor-158": 0.4666940789473685,
        "meteor-107": 0.4666940789473685,
        "meteor-74": 0.7942949907235621,
        "ruby-137": 0.0,
        "ruby-7": 0.2222222222222222,
        "ruby-0": 0.09090909090909094,
        "ruby-165": 0.2692307692307693,
        "ruby-48": 0.3846153846153846,
        "ruby-42": 0.17948717948717952,
        "ruby-141": 0.0,
        "ruby-27": 0.21212121212121215,
        "ruby-195": 0.0,
        "ruby-115": 0.0,
        "ruby-3": 0.1724137931034483,
        "ruby-82": 0.0,
        "ruby-189": 0.4545454545454546,
        "ruby-92": 0.08333333333333337,
        "ruby-1": 0.7777777777777778,
        "ruby-117": 0.2142857142857143,
        "ruby-78": 0.2666666666666667,
        "ruby-158": 0.21212121212121215,
        "ruby-107": 0.21212121212121215,
        "ruby-74": 0.7777777777777778,
        "codebertscore_f1-137": 0.68047696352005,
        "codebertscore_f3-137": 0.7057222127914429,
        "codebertscore_f1-7": 0.7102448344230652,
        "codebertscore_f3-7": 0.696927011013031,
        "codebertscore_f1-0": 0.70200115442276,
        "codebertscore_f3-0": 0.7119483351707458,
        "codebertscore_f1-165": 0.7767502665519714,
        "codebertscore_f3-165": 0.8342772126197815,
        "codebertscore_f1-48": 0.8143581748008728,
        "codebertscore_f3-48": 0.9055269956588745,
        "codebertscore_f1-42": 0.7400507926940918,
        "codebertscore_f3-42": 0.8061789870262146,
        "codebertscore_f1-141": 0.6844524145126343,
        "codebertscore_f3-141": 0.7071308493614197,
        "codebertscore_f1-27": 0.7371914386749268,
        "codebertscore_f3-27": 0.8219628930091858,
        "codebertscore_f1-195": 0.6770159602165222,
        "codebertscore_f3-195": 0.7110214233398438,
        "codebertscore_f1-115": 0.7077444791793823,
        "codebertscore_f3-115": 0.7497010231018066,
        "codebertscore_f1-3": 0.7765686511993408,
        "codebertscore_f3-3": 0.8713056445121765,
        "codebertscore_f1-82": 0.6801533699035645,
        "codebertscore_f3-82": 0.7188811302185059,
        "codebertscore_f1-189": 0.8216055631637573,
        "codebertscore_f3-189": 0.9039478302001953,
        "codebertscore_f1-92": 0.6911222338676453,
        "codebertscore_f3-92": 0.7045906782150269,
        "codebertscore_f1-1": 0.91383957862854,
        "codebertscore_f3-1": 0.91383957862854,
        "codebertscore_f1-117": 0.721211314201355,
        "codebertscore_f3-117": 0.7736000418663025,
        "codebertscore_f1-78": 0.7559481859207153,
        "codebertscore_f3-78": 0.8242081999778748,
        "codebertscore_f1-158": 0.7592645883560181,
        "codebertscore_f3-158": 0.8396705985069275,
        "codebertscore_f1-107": 0.7449406981468201,
        "codebertscore_f3-107": 0.8242456316947937,
        "codebertscore_f1-74": 0.91383957862854,
        "codebertscore_f3-74": 0.91383957862854,
        "codebertscore_s_f1-137": 0.6799051761627197,
        "codebertscore_s_f3-137": 0.7313789129257202,
        "codebertscore_s_f1-7": 0.7752878069877625,
        "codebertscore_s_f3-7": 0.760021448135376,
        "codebertscore_s_f1-0": 0.6503272652626038,
        "codebertscore_s_f3-0": 0.6678485870361328,
        "codebertscore_s_f1-165": 0.8008684515953064,
        "codebertscore_s_f3-165": 0.8546854257583618,
        "codebertscore_s_f1-48": 0.8389162421226501,
        "codebertscore_s_f3-48": 0.9438738822937012,
        "codebertscore_s_f1-42": 0.7555073499679565,
        "codebertscore_s_f3-42": 0.81850665807724,
        "codebertscore_s_f1-141": 0.6992509365081787,
        "codebertscore_s_f3-141": 0.7404654026031494,
        "codebertscore_s_f1-27": 0.7574254870414734,
        "codebertscore_s_f3-27": 0.8303889036178589,
        "codebertscore_s_f1-195": 0.6683247089385986,
        "codebertscore_s_f3-195": 0.7278106808662415,
        "codebertscore_s_f1-115": 0.7238869071006775,
        "codebertscore_s_f3-115": 0.7724728584289551,
        "codebertscore_s_f1-3": 0.8010367155075073,
        "codebertscore_s_f3-3": 0.905690610408783,
        "codebertscore_s_f1-82": 0.6971461772918701,
        "codebertscore_s_f3-82": 0.7422504425048828,
        "codebertscore_s_f1-189": 0.8371241092681885,
        "codebertscore_s_f3-189": 0.9433393478393555,
        "codebertscore_s_f1-92": 0.6515915989875793,
        "codebertscore_s_f3-92": 0.6729925274848938,
        "codebertscore_s_f1-1": 0.9937019348144531,
        "codebertscore_s_f3-1": 0.9937019348144531,
        "codebertscore_s_f1-117": 0.7284644246101379,
        "codebertscore_s_f3-117": 0.7745181322097778,
        "codebertscore_s_f1-78": 0.75766921043396,
        "codebertscore_s_f3-78": 0.8233667016029358,
        "codebertscore_s_f1-158": 0.7885552644729614,
        "codebertscore_s_f3-158": 0.8562386631965637,
        "codebertscore_s_f1-107": 0.7720319628715515,
        "codebertscore_s_f3-107": 0.8356927037239075,
        "codebertscore_s_f1-74": 0.9937019348144531,
        "codebertscore_s_f3-74": 0.9937019348144531,
        "gpt35_nsnr-137": 2,
        "raw_gpt35_nsnr-137": "2",
        "gpt35_nsnr-7": 0,
        "raw_gpt35_nsnr-7": "2 (The code snippet only returns 0, which is correct for an empty string but not for a non-empty string. The implementation of the actual logic to count the length of the string is missing.)",
        "gpt35_nsnr-0": 0,
        "raw_gpt35_nsnr-0": "0",
        "gpt35_nsnr-165": 4,
        "raw_gpt35_nsnr-165": "4",
        "gpt35_nsnr-48": 4,
        "raw_gpt35_nsnr-48": "4",
        "gpt35_nsnr-42": 4,
        "raw_gpt35_nsnr-42": "4",
        "gpt35_nsnr-141": 2,
        "raw_gpt35_nsnr-141": "2",
        "gpt35_nsnr-27": 4,
        "raw_gpt35_nsnr-27": "4",
        "gpt35_nsnr-195": 2,
        "raw_gpt35_nsnr-195": "2",
        "gpt35_nsnr-115": 2,
        "raw_gpt35_nsnr-115": "2",
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-82": 2,
        "raw_gpt35_nsnr-82": "2",
        "gpt35_nsnr-189": 4,
        "raw_gpt35_nsnr-189": "4",
        "gpt35_nsnr-92": 0,
        "raw_gpt35_nsnr-92": "0",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-117": 4,
        "raw_gpt35_nsnr-117": "4",
        "gpt35_nsnr-78": 4,
        "raw_gpt35_nsnr-78": "4",
        "gpt35_nsnr-158": 4,
        "raw_gpt35_nsnr-158": "4",
        "gpt35_nsnr-107": 4,
        "raw_gpt35_nsnr-107": "4",
        "gpt35_nsnr-74": 4,
        "raw_gpt35_nsnr-74": "4",
        "gpt35_nswr-137": 0,
        "raw_gpt35_nswr-137": "0",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-0": 0,
        "raw_gpt35_nswr-0": "0",
        "gpt35_nswr-165": 4,
        "raw_gpt35_nswr-165": "4",
        "gpt35_nswr-48": 4,
        "raw_gpt35_nswr-48": "4",
        "gpt35_nswr-42": 3,
        "raw_gpt35_nswr-42": "3",
        "gpt35_nswr-141": 0,
        "raw_gpt35_nswr-141": "0",
        "gpt35_nswr-27": 3,
        "raw_gpt35_nswr-27": "3",
        "gpt35_nswr-195": 0,
        "raw_gpt35_nswr-195": "0",
        "gpt35_nswr-115": 0,
        "raw_gpt35_nswr-115": "0",
        "gpt35_nswr-3": 4,
        "raw_gpt35_nswr-3": "4",
        "gpt35_nswr-82": 0,
        "raw_gpt35_nswr-82": "0",
        "gpt35_nswr-189": 4,
        "raw_gpt35_nswr-189": "4",
        "gpt35_nswr-92": 0,
        "raw_gpt35_nswr-92": "0",
        "gpt35_nswr-1": 4,
        "raw_gpt35_nswr-1": "4",
        "gpt35_nswr-117": 3,
        "raw_gpt35_nswr-117": "3",
        "gpt35_nswr-78": 3,
        "raw_gpt35_nswr-78": "3",
        "gpt35_nswr-158": 3,
        "raw_gpt35_nswr-158": "3",
        "gpt35_nswr-107": 3,
        "raw_gpt35_nswr-107": "3",
        "gpt35_nswr-74": 4,
        "raw_gpt35_nswr-74": "4"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // encrypt('hi') returns 'lm'\n    // encrypt('asdfghjkl') returns 'ewhjklnop'\n    // encrypt('gf') returns 'kj'\n    // encrypt('et') returns 'ix'\n    public static String encrypt(String s) {\n",
        "snippet": [
            "        StringBuilder sb = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                sb.append((char) ('a' + (c - 'a' + 2 * 2) % 26));\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n}"
        ],
        "simplified": "Create a function encrypt that takes a string as an argument and returns a string encrypted with the alphabet being rotated. The alphabet should be rotated in a manner such that the letters shift down by two multiplied to two places.",
        "task_id": "89",
        "195": "String output = \"\";\n        // Your Code Here\n        String [] alphabet = {\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"};\n        for(int i = 0; i < s.length(); i++) {\n            char ch = s.charAt(i);\n            int indx = indexOf(alphabet, Character.toString(ch));\n            int newIndex = (indx + 4) % alphabet.length;\n            output += alphabet[newIndex];\n        }\n        return output;",
        "grade-195": {
            "execution": 0
        },
        "30": "char[] array = s.toCharArray();\n        for (int i = 0; i < array.length; i++) {\n            char c = array[i];\n            int index = c - 'a';\n            index = (index + 2 * 2) % 26;\n            array[i] = (char) ('a' + index);\n        }\n        return new String(array);",
        "grade-30": {
            "execution": 1
        },
        "6": "char[] letters = s.toCharArray();\n        for (int i = 0; i < letters.length; i++) {\n            letters[i] = (char) (((letters[i] - 'a' + 2) % 26) + 'a');\n        }\n        return new String(letters);",
        "grade-6": {
            "execution": 0
        },
        "83": "String e = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c < 'a' || c > 'z') throw new RuntimeException();\n            e += (char)((((c - 'a') * 2 + 2) % 26) + 'a');\n        }\n        return e;",
        "grade-83": {
            "execution": 0
        },
        "74": "char[] encrypted = new char[s.length()];\n        int c = 0;\n        for (char l : s.toCharArray()) {\n            int lnum = (int) l;\n            int nnum = lnum + 4;\n            encrypted[c] = (char) nnum;\n            c++;\n        }\n        return new String(encrypted);",
        "grade-74": {
            "execution": 0
        },
        "69": "// create a new string that will be the encrypted version of s\n        String enc = \"\";\n        // for every letter in s, \n        for (int i = 0; i < s.length(); i++) {\n            // declare a variable for storing the number representation of a letter\n            int n = (int) s.charAt(i);\n            // if n is either 90, 122, or a letter after 122 (ie, the one after z),\n            if (n == 90 || n == 122 || n > 122) {\n                // set n to itself minus 23\n                n -= 23;\n            }\n            // otherwise,\n            else {\n                // set n to itself plus 3\n                n += 3;\n            }\n            // concatenate the letter of n to enc\n            enc += (char) n;\n        }\n        // return enc\n        return enc;",
        "grade-69": {
            "execution": 0
        },
        "38": "char [] ca = s.toCharArray();\n        int size = ca.length;\n        char [] c = new char[size];\n        for (int i = 0; i < size; i++) {\n            c[i] = (char)(((ca[i] - 97 + 2) % 26) + 97);\n        }\n        return new String(c);",
        "grade-38": {
            "execution": 0
        },
        "27": "String alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            int index = alphabet.indexOf(s.charAt(i));\n            index = (index + (2 * 2)) % alphabet.length();\n            sb.append(alphabet.charAt(index));\n        }\n        return sb.toString();",
        "grade-27": {
            "execution": 1
        },
        "169": "return s.chars().map(Problem::encryptLetter).collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append).toString();",
        "grade-169": {
            "execution": 0
        },
        "23": "String encoded = \"\";\n        int charNum;\n        for (int i = 0; i < s.length(); i++) {\n            charNum = s.charAt(i);\n            if (charNum < 69)\n                charNum += 24;\n            encoded += Character.toString((char)(charNum - 2 * 2));\n        }\n        return encoded;",
        "grade-23": {
            "execution": 0
        },
        "182": "String ans = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            int pos = s.charAt(i) - 97;\n            if (pos < 24)\n                ans += (char)((pos + 97 + 2 * 2) % 26 + 97);\n            else if (pos < 25)\n                ans += (char)((pos + 97 + 2 * 1) % 26 + 97);\n            else\n                ans += (char)((pos + 97 + 2 * 0) % 26 + 97);\n        }\n        return ans;",
        "grade-182": {
            "execution": 0
        },
        "132": "char[] list = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};\n        String result = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            int count = 0;\n            for (int j = 0; j < list.length; j++) {\n                if (s.charAt(i) == list[j]) {\n                    if (j < 2) {\n                        count = j + 24;\n                    } else {\n                        count = j - 2;\n                    }\n                }\n            }\n            result += list[count];\n        }\n        return result;",
        "grade-132": {
            "execution": 0
        },
        "8": "StringBuilder sb = new StringBuilder();\n        int shift = (int) (2 * Math.pow(2, 2));\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            c = (char) (c + shift);\n            sb.append(c);\n        }\n        return sb.toString();",
        "grade-8": {
            "execution": 0
        },
        "7": "char[] arr = s.toCharArray();\n        for (int i = 0; i < arr.length; i++) {\n            char x = arr[i];\n            if (x == 'a' || x == 'b') {\n                arr[i] = 'e';\n            } else if (x == 'c' || x == 'd') {\n                arr[i] = 'f';\n            } else if (x == 'e' || x == 'f') {\n                arr[i] = 'g';\n            } else if (x == 'g' || x == 'h') {\n                arr[i] = 'i';\n            } else if (x == 'i' || x == 'j') {\n                arr[i] = 'l';\n            } else if (x == 'k' || x == 'l') {\n                arr[i] = 'm';\n            } else if (x == 'm' || x == 'n') {\n                arr[i] = 'o';\n            } else if (x == 'o' || x == 'p') {\n                arr[i] = 'q';\n            } else if (x == 'q' || x == 'r') {\n                arr[i] = 't';\n            } else if (x == 's' || x == 't') {\n                arr[i] = 'u';\n            } else if (x == 'u' || x == 'v') {\n                arr[i] = 'w';\n            } else if (x == 'w' || x == 'x') {\n                arr[i] = 'y';\n            } else if (x == 'y' || x == 'z') {\n                arr[i] = 'b';\n            }\n        }\n        return new String(arr);",
        "grade-7": {
            "execution": 0
        },
        "24": "// use a for loop to loop through the string\n        // for each character, add the 2 times 2 to the letter\n        // do toUpperCase because we don't want lowercase letters\n        // store the answer in a new variable\n        // return the new variable\n        char[] charArray = s.toCharArray();\n        for (int i = 0; i < charArray.length; i++) {\n            charArray[i] += 4;\n        }\n        return new String(charArray);",
        "grade-24": {
            "execution": 0
        },
        "67": "String allAlpha = \"abcdefghijklmnopqrstuvwxyz\";\n        String[] splitAlpha = allAlpha.split(\"\");\n        String alpha = String.join(\"\", Arrays.copyOfRange(splitAlpha, splitAlpha.length-2, splitAlpha.length));\n        String allRotation = alpha+allAlpha;\n        String[] splitRotation = allRotation.split(\"\");\n        String[] splitS = s.split(\"\");\n        String[] result = new String[splitS.length];\n        for (int i = 0; i < splitS.length; i++) {\n            for (int j = 0; j < splitAlpha.length; j++) {\n                if (splitS[i].equals(splitAlpha[j])) {\n                    result[i] = splitRotation[j];\n                }\n            }\n        }\n        return String.join(\"\", result);",
        "grade-67": {
            "execution": 0
        },
        "71": "String alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        String newAlphabet = \"cdefghijklmnopqrstuvwxyzab\";\n        String newString = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            int position = alphabet.indexOf(s.charAt(i));\n            char newChar = newAlphabet.charAt(position);\n            newString += newChar;\n        }\n        return newString;",
        "grade-71": {
            "execution": 0
        },
        "158": "// Code here",
        "grade-158": {
            "execution": 0
        },
        "185": "String alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        String shifted = alphabet.substring(2) + alphabet.substring(0, 2);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            sb.append(shifted.charAt(alphabet.indexOf(s.charAt(i))));\n        }\n        return sb.toString();",
        "grade-185": {
            "execution": 0
        },
        "174": "String lc = s.toLowerCase();\n        StringBuilder sb = new StringBuilder();\n        int len = lc.length();\n        char[] ca = lc.toCharArray();\n        for (int i = 0; i < len; i++) {\n            if (ca[i] + 2 >= 'a' && ca[i] + 2 <= 'm') {\n                sb.append((char)(ca[i] + 2));\n            } else if (ca[i] + 2 > 'm' && ca[i] + 2 <= 'z') {\n                sb.append((char)(ca[i] + 2 - 26));\n            } else if (ca[i] + 2 > 'z') {\n                sb.append((char)(ca[i] + 2 - 26 - 26));\n            }\n        }\n        return sb.toString();",
        "grade-174": {
            "execution": 0
        },
        "bleu-195": 0.04270900046758015,
        "bleu-30": 0.33678609184252173,
        "bleu-6": 0.2798539549683629,
        "bleu-83": 0.21431833124717556,
        "bleu-74": 0.19105648921766694,
        "bleu-69": 0.028704709699223584,
        "bleu-38": 0.232142326223629,
        "bleu-27": 0.3296648953682081,
        "bleu-169": 0.06748033214565981,
        "bleu-23": 0.18353331608026874,
        "bleu-182": 0.1268135296128707,
        "bleu-132": 0.05211455524972412,
        "bleu-8": 0.38435342819761753,
        "bleu-7": 0.04321897306370942,
        "bleu-24": 0.12191405630033017,
        "bleu-67": 0.05093745947009284,
        "bleu-71": 0.062083307934745556,
        "bleu-158": 0.0,
        "bleu-185": 0.33569020860597454,
        "bleu-174": 0.2529136016663055,
        "codebleu-195": 0.445303148581837,
        "codebleu-30": 0.45911572398035155,
        "codebleu-6": 0.42206907273699923,
        "codebleu-83": 0.5256084991844949,
        "codebleu-74": 0.4098932082216359,
        "codebleu-69": 0.4809263596148841,
        "codebleu-38": 0.4321738294538851,
        "codebleu-27": 0.5873791477545613,
        "codebleu-169": 0.18500083108918797,
        "codebleu-23": 0.45510560595561605,
        "codebleu-182": 0.5222938181019042,
        "codebleu-132": 0.49326047358834235,
        "codebleu-8": 0.5706306229266553,
        "codebleu-7": 0.522352328909706,
        "codebleu-24": 0.3319542024460057,
        "codebleu-67": 0.5269320843091335,
        "codebleu-71": 0.42202624895338015,
        "codebleu-158": 0.01092896174863388,
        "codebleu-185": 0.5397607624952402,
        "codebleu-174": 0.6306515181753071,
        "chrf-195": 0.2564770223501745,
        "chrf-30": 0.3510991130875049,
        "chrf-6": 0.3431583329855778,
        "chrf-83": 0.25894819988756573,
        "chrf-74": 0.30962357094135357,
        "chrf-69": 0.2090155708771447,
        "chrf-38": 0.3045144429049122,
        "chrf-27": 0.45240285961984583,
        "chrf-169": 0.3393332824301709,
        "chrf-23": 0.3040645502158296,
        "chrf-182": 0.24160431446644431,
        "chrf-132": 0.20423990598138717,
        "chrf-8": 0.49993151422262144,
        "chrf-7": 0.22319115573050807,
        "chrf-24": 0.2999944253937861,
        "chrf-67": 0.20322679277816383,
        "chrf-71": 0.24322253459826076,
        "chrf-158": 0.013389613367095226,
        "chrf-185": 0.45222934597334946,
        "chrf-174": 0.5850799563010448,
        "rougel-195": 0.19148936170212766,
        "rougel-30": 0.41420118343195267,
        "rougel-6": 0.45161290322580644,
        "rougel-83": 0.4157303370786517,
        "rougel-74": 0.41025641025641024,
        "rougel-69": 0.2366412213740458,
        "rougel-38": 0.3832335329341317,
        "rougel-27": 0.536312849162011,
        "rougel-169": 0.2635658914728682,
        "rougel-23": 0.3780487804878049,
        "rougel-182": 0.3557692307692308,
        "rougel-132": 0.20066889632107024,
        "rougel-8": 0.5465116279069768,
        "rougel-7": 0.16929133858267714,
        "rougel-24": 0.23157894736842108,
        "rougel-67": 0.24817518248175183,
        "rougel-71": 0.3431952662721893,
        "rougel-158": 0.0,
        "rougel-185": 0.44571428571428573,
        "rougel-174": 0.43661971830985924,
        "meteor-195": 0.24913631580298248,
        "meteor-30": 0.42920571748191494,
        "meteor-6": 0.42956714170902055,
        "meteor-83": 0.4718049807335521,
        "meteor-74": 0.2994275149324936,
        "meteor-69": 0.2853156699693324,
        "meteor-38": 0.32635860326027305,
        "meteor-27": 0.5802588248647946,
        "meteor-169": 0.26592127997612597,
        "meteor-23": 0.3194214113431367,
        "meteor-182": 0.3139819819819821,
        "meteor-132": 0.29625993764019515,
        "meteor-8": 0.6075264084507043,
        "meteor-7": 0.28694273192580366,
        "meteor-24": 0.24529608825974153,
        "meteor-67": 0.3223279769354717,
        "meteor-71": 0.21790341578327446,
        "meteor-158": 0.0,
        "meteor-185": 0.49335988576837614,
        "meteor-174": 0.6040015136779961,
        "ruby-195": 0.10659898477157359,
        "ruby-30": 0.21176470588235297,
        "ruby-6": 0.3058823529411765,
        "ruby-83": 0.21505376344086025,
        "ruby-74": 0.22352941176470587,
        "ruby-69": 0.1581920903954802,
        "ruby-38": 0.16470588235294115,
        "ruby-27": 0.32978723404255317,
        "ruby-169": 0.18823529411764706,
        "ruby-23": 0.15294117647058825,
        "ruby-182": 0.22764227642276424,
        "ruby-132": 0.11682242990654201,
        "ruby-8": 0.33333333333333337,
        "ruby-7": 0.09692671394799057,
        "ruby-24": 0.07619047619047614,
        "ruby-67": 0.14814814814814814,
        "ruby-71": 0.10588235294117643,
        "ruby-158": 0.0,
        "ruby-185": 0.1777777777777778,
        "ruby-174": 0.3015075376884422,
        "codebertscore_f1-195": 0.7151315808296204,
        "codebertscore_f3-195": 0.7328713536262512,
        "codebertscore_f1-30": 0.8242912292480469,
        "codebertscore_f3-30": 0.8198280930519104,
        "codebertscore_f1-6": 0.8090137243270874,
        "codebertscore_f3-6": 0.8004685640335083,
        "codebertscore_f1-83": 0.8140196800231934,
        "codebertscore_f3-83": 0.8097865581512451,
        "codebertscore_f1-74": 0.786163330078125,
        "codebertscore_f3-74": 0.7778280973434448,
        "codebertscore_f1-69": 0.685937762260437,
        "codebertscore_f3-69": 0.7074965834617615,
        "codebertscore_f1-38": 0.7968904376029968,
        "codebertscore_f3-38": 0.7933686971664429,
        "codebertscore_f1-27": 0.8041369318962097,
        "codebertscore_f3-27": 0.8413935303688049,
        "codebertscore_f1-169": 0.7048044800758362,
        "codebertscore_f3-169": 0.6952431797981262,
        "codebertscore_f1-23": 0.7869099974632263,
        "codebertscore_f3-23": 0.7794196009635925,
        "codebertscore_f1-182": 0.7702803611755371,
        "codebertscore_f3-182": 0.76784747838974,
        "codebertscore_f1-132": 0.6956343054771423,
        "codebertscore_f3-132": 0.7043972611427307,
        "codebertscore_f1-8": 0.8590139150619507,
        "codebertscore_f3-8": 0.8713011741638184,
        "codebertscore_f1-7": 0.7031816244125366,
        "codebertscore_f3-7": 0.7420549988746643,
        "codebertscore_f1-24": 0.7141489386558533,
        "codebertscore_f3-24": 0.7340940833091736,
        "codebertscore_f1-67": 0.6825914978981018,
        "codebertscore_f3-67": 0.7099786400794983,
        "codebertscore_f1-71": 0.7032607793807983,
        "codebertscore_f3-71": 0.7226158976554871,
        "codebertscore_f1-158": 0.5047744512557983,
        "codebertscore_f3-158": 0.48591211438179016,
        "codebertscore_f1-185": 0.7771418690681458,
        "codebertscore_f3-185": 0.8157705068588257,
        "codebertscore_f1-174": 0.8152589201927185,
        "codebertscore_f3-174": 0.8482509255409241,
        "codebertscore_s_f1-195": 0.7222035527229309,
        "codebertscore_s_f3-195": 0.7414243221282959,
        "codebertscore_s_f1-30": 0.8320649266242981,
        "codebertscore_s_f3-30": 0.8275898098945618,
        "codebertscore_s_f1-6": 0.81830233335495,
        "codebertscore_s_f3-6": 0.8063890933990479,
        "codebertscore_s_f1-83": 0.8244585394859314,
        "codebertscore_s_f3-83": 0.8215662240982056,
        "codebertscore_s_f1-74": 0.7952645421028137,
        "codebertscore_s_f3-74": 0.7873340845108032,
        "codebertscore_s_f1-69": 0.724733829498291,
        "codebertscore_s_f3-69": 0.7447518706321716,
        "codebertscore_s_f1-38": 0.80931156873703,
        "codebertscore_s_f3-38": 0.8053183555603027,
        "codebertscore_s_f1-27": 0.8155890703201294,
        "codebertscore_s_f3-27": 0.8528971672058105,
        "codebertscore_s_f1-169": 0.729651689529419,
        "codebertscore_s_f3-169": 0.7130202651023865,
        "codebertscore_s_f1-23": 0.7995820641517639,
        "codebertscore_s_f3-23": 0.7927025556564331,
        "codebertscore_s_f1-182": 0.7788252830505371,
        "codebertscore_s_f3-182": 0.7794607281684875,
        "codebertscore_s_f1-132": 0.7322229743003845,
        "codebertscore_s_f3-132": 0.7438036799430847,
        "codebertscore_s_f1-8": 0.8629056215286255,
        "codebertscore_s_f3-8": 0.8747897148132324,
        "codebertscore_s_f1-7": 0.7436482906341553,
        "codebertscore_s_f3-7": 0.7600464224815369,
        "codebertscore_s_f1-24": 0.729826033115387,
        "codebertscore_s_f3-24": 0.7494608759880066,
        "codebertscore_s_f1-67": 0.7021996974945068,
        "codebertscore_s_f3-67": 0.7241976261138916,
        "codebertscore_s_f1-71": 0.7030636668205261,
        "codebertscore_s_f3-71": 0.7198098301887512,
        "codebertscore_s_f1-158": 0.5507466793060303,
        "codebertscore_s_f3-158": 0.5308905243873596,
        "codebertscore_s_f1-185": 0.7858880162239075,
        "codebertscore_s_f3-185": 0.8223731517791748,
        "codebertscore_s_f1-174": 0.8284159898757935,
        "codebertscore_s_f3-174": 0.8570901155471802,
        "gpt35_nsnr-195": 4,
        "raw_gpt35_nsnr-195": "4",
        "gpt35_nsnr-30": 4,
        "raw_gpt35_nsnr-30": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-83": 4,
        "raw_gpt35_nsnr-83": "4",
        "gpt35_nsnr-74": 3,
        "raw_gpt35_nsnr-74": "3",
        "gpt35_nsnr-69": 4,
        "raw_gpt35_nsnr-69": "4",
        "gpt35_nsnr-38": 3,
        "raw_gpt35_nsnr-38": "3",
        "gpt35_nsnr-27": 4,
        "raw_gpt35_nsnr-27": "4",
        "gpt35_nsnr-169": 3,
        "raw_gpt35_nsnr-169": "3",
        "gpt35_nsnr-23": 3,
        "raw_gpt35_nsnr-23": "3",
        "gpt35_nsnr-182": 4,
        "raw_gpt35_nsnr-182": "4",
        "gpt35_nsnr-132": 4,
        "raw_gpt35_nsnr-132": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-24": 3,
        "raw_gpt35_nsnr-24": "3",
        "gpt35_nsnr-67": 4,
        "raw_gpt35_nsnr-67": "4",
        "gpt35_nsnr-71": 4,
        "raw_gpt35_nsnr-71": "4",
        "gpt35_nsnr-158": 0,
        "raw_gpt35_nsnr-158": "0",
        "gpt35_nsnr-185": 4,
        "raw_gpt35_nsnr-185": "4",
        "gpt35_nsnr-174": 4,
        "raw_gpt35_nsnr-174": "4",
        "gpt35_nswr-195": 2,
        "raw_gpt35_nswr-195": "2",
        "gpt35_nswr-30": 4,
        "raw_gpt35_nswr-30": "4",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-83": 3,
        "raw_gpt35_nswr-83": "3",
        "gpt35_nswr-74": 2,
        "raw_gpt35_nswr-74": "2",
        "gpt35_nswr-69": 2,
        "raw_gpt35_nswr-69": "2",
        "gpt35_nswr-38": 4,
        "raw_gpt35_nswr-38": "4",
        "gpt35_nswr-27": 3,
        "raw_gpt35_nswr-27": "3",
        "gpt35_nswr-169": 2,
        "raw_gpt35_nswr-169": "2",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-182": 3,
        "raw_gpt35_nswr-182": "3",
        "gpt35_nswr-132": 2,
        "raw_gpt35_nswr-132": "2",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 2,
        "raw_gpt35_nswr-7": "2",
        "gpt35_nswr-24": 2,
        "raw_gpt35_nswr-24": "2",
        "gpt35_nswr-67": 3,
        "raw_gpt35_nswr-67": "3",
        "gpt35_nswr-71": 3,
        "raw_gpt35_nswr-71": "3",
        "gpt35_nswr-158": 3,
        "raw_gpt35_nswr-158": "3",
        "gpt35_nswr-185": 3,
        "raw_gpt35_nswr-185": "3",
        "gpt35_nswr-174": 3,
        "raw_gpt35_nswr-174": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function vowels_count which takes a string representing\n    // a word as input and returns the number of vowels in the string.\n    // Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    // vowel, but only when it is at the end of the given word.\n    // Example:\n    // >>> vowels_count(\"abcde\")\n    // 2\n    // >>> vowels_count(\"ACEDY\")\n    // 3\n    public static int vowelsCount(String s) {\n",
        "snippet": [
            "        String vowels = \"aeiouAEIOU\";\n        int n_vowels = 0;\n        for (char c : s.toCharArray()) {\n            if (vowels.indexOf(c) != -1) {\n                n_vowels += 1;\n            }\n        }\n        if (s.charAt(s.length() - 1) == 'y' || s.charAt(s.length() - 1) == 'Y') {\n            n_vowels += 1;\n        }\n        return n_vowels;\n    }\n}"
        ],
        "simplified": "Add more test cases.",
        "task_id": "64",
        "196": "if (s == null) return 0;\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            } else if (c == 'y' && i == s.length() - 1) {\n                count++;\n            }\n        }\n        return count;",
        "grade-196": {
            "execution": 0
        },
        "31": "int c = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char ch = s.charAt(i);\n            if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {\n                c++;\n            }\n        }\n        if (s.charAt(s.length() - 1) == 'y') {\n            c++;\n        }\n        return c;",
        "grade-31": {
            "execution": 0
        },
        "6": "String[] vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"};\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            for (int j = 0; j < vowels.length; j++) {\n                if (s.charAt(i) == vowels[j].charAt(0)) {\n                    count++;\n                }\n            }\n        }\n        if (s.charAt(s.length() - 1) == 'y') {\n            count++;\n        }\n        return count;",
        "grade-6": {
            "execution": 0
        },
        "78": "// Write your code here",
        "grade-78": {
            "execution": 0
        },
        "70": "int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.toLowerCase(c) == 'a' ||\n                Character.toLowerCase(c) == 'e' ||\n                Character.toLowerCase(c) == 'i' ||\n                Character.toLowerCase(c) == 'o' ||\n                Character.toLowerCase(c) == 'u') {\n                count += 1;\n            }\n        }\n        if (Character.toLowerCase(s.charAt(s.length() - 1)) == 'y') {\n            count += 1;\n        }\n        return count;",
        "grade-70": {
            "execution": 1
        },
        "64": "throw new UnsupportedOperationException(\"Not implemented\");",
        "grade-64": {
            "execution": 0
        },
        "38": "String[] a = s.split(\"\");\n        int count = 0;\n        for (int i = 0; i < a.length; i++) {\n            switch (a[i]) {\n                case \"a\":\n                case \"e\":\n                case \"i\":\n                case \"o\":\n                case \"u\":\n                case \"y\":\n                    count++;\n                    break;\n                default:\n                    break;\n            }\n        }\n        return count;",
        "grade-38": {
            "execution": 0
        },
        "29": "int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        if (s.charAt(s.length() - 1) == 'y') {\n            count++;\n        }\n        return count;",
        "grade-29": {
            "execution": 0
        },
        "161": "String vowels = \"aeiou\";\n        int count = 0;\n        String[] arr = s.split(\"\");\n        for (int i = 0; i < arr.length; i++) {\n            String c = arr[i].toLowerCase();\n            if (vowels.contains(c)) {\n                count++;\n            }\n        }\n        return count;",
        "grade-161": {
            "execution": 0
        },
        "24": "s = s.toLowerCase();\n        int n = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                n++;\n            }\n        }\n        if (s.charAt(s.length() - 1) == 'y') {\n            n++;\n        }\n        return n;",
        "grade-24": {
            "execution": 1
        },
        "176": "// Uncomment the line below to add your implementation here\n        // You need to return the correct result\n        // using the loop below\n        if (s.length() == 0) return 0;\n        int count = 0;\n        int i = 0;\n        while (i < s.length()) {\n            if (isVowel(s.charAt(i))) {\n                count++;\n            }\n            i++;\n        }\n        return count;",
        "grade-176": {
            "execution": 0
        },
        "122": "String[] vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"};\n        return Arrays.stream(s.split(\"\"))\n                     .filter(Arrays.asList(vowels)::contains)\n                     .collect(Collectors.toList())\n                     .size();",
        "grade-122": {
            "execution": 0
        },
        "8": "int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n                count++;\n            else if (c == 'y' && i == s.length() - 1)\n                count++;\n        }\n        return count;",
        "grade-8": {
            "execution": 0
        },
        "7": "// TODO: Write your code here\n        return 0;",
        "grade-7": {
            "execution": 0
        },
        "26": "if (s == null) return 0;\n        s = s.toLowerCase();\n        int cnt = 0;\n        boolean lastWasY = false;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                cnt++;\n                lastWasY = false;\n            } else if (s.charAt(i) == 'y') {\n                if (lastWasY) {\n                    lastWasY = false;\n                } else {\n                    lastWasY = true;\n                }\n            } else {\n                lastWasY = false;\n            }\n        }\n        if (lastWasY) cnt++;\n        return cnt;",
        "grade-26": {
            "execution": 1
        },
        "59": "int count = 0;\n        int size = s.length();\n        for (int i = 0; i < size; i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count += 1;\n            } else if (c == 'y' && i == size - 1) {\n                count += 1;\n            }\n        }\n        return count;",
        "grade-59": {
            "execution": 0
        },
        "67": "// *** WRITE YOUR CODE HERE ***\n        int n = 0;\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if ((c == 'a') || (c == 'e') || (c == 'i') || (c == 'o') || (c == 'u')) {\n                count++;\n            }\n            if (c == 'y') {\n                n = i;\n            }\n        }\n        if (n == s.length() - 1) {\n            count++;\n        }\n        return count;",
        "grade-67": {
            "execution": 0
        },
        "148": "int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            }\n        }\n        if (s.endsWith(\"y\")) {\n            count++;\n        }\n        return count;",
        "grade-148": {
            "execution": 0
        },
        "179": "return 5;",
        "grade-179": {
            "execution": 0
        },
        "167": "if (s == null) {\n            return 0;\n        }\n\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            } else if (c == 'y' && i == s.length() - 1) {\n                count++;\n            }\n        }\n        return count;",
        "grade-167": {
            "execution": 0
        },
        "bleu-196": 0.2525030815093239,
        "bleu-31": 0.36512869093572176,
        "bleu-6": 0.3300192330022268,
        "bleu-78": 0.0,
        "bleu-70": 0.30681388474191845,
        "bleu-64": 4.7103944856192994e-05,
        "bleu-38": 0.0852441093427391,
        "bleu-29": 0.35489773376787526,
        "bleu-161": 0.1358314523761529,
        "bleu-24": 0.3543304701149269,
        "bleu-176": 0.22864803832703143,
        "bleu-122": 0.04735395494714131,
        "bleu-8": 0.2530827939059297,
        "bleu-7": 2.2764672188822288e-05,
        "bleu-26": 0.192243129097031,
        "bleu-59": 0.24892363093323852,
        "bleu-67": 0.22915537938416136,
        "bleu-148": 0.2535261169485851,
        "bleu-179": 1.6151456173117037e-15,
        "bleu-167": 0.24940082115397402,
        "codebleu-196": 0.528690090820268,
        "codebleu-31": 0.5584398285892977,
        "codebleu-6": 0.6184858642106694,
        "codebleu-78": 0.01932367149758454,
        "codebleu-70": 0.636127637381097,
        "codebleu-64": 0.043478294298907705,
        "codebleu-38": 0.3397147761164075,
        "codebleu-29": 0.6060575646090798,
        "codebleu-161": 0.4166236320450916,
        "codebleu-24": 0.589017890425665,
        "codebleu-176": 0.42170055590601974,
        "codebleu-122": 0.3240060287490867,
        "codebleu-8": 0.49439827821973936,
        "codebleu-7": 0.03866839074630948,
        "codebleu-26": 0.5815373425688012,
        "codebleu-59": 0.5172943925791793,
        "codebleu-67": 0.5666540834883657,
        "codebleu-148": 0.4762413408293719,
        "codebleu-179": 0.009661835748986315,
        "codebleu-167": 0.5387730789777951,
        "chrf-196": 0.29460622625438004,
        "chrf-31": 0.3578165665273282,
        "chrf-6": 0.4339102719495954,
        "chrf-78": 0.022644326548788455,
        "chrf-70": 0.37703188397869647,
        "chrf-64": 0.05409544083569585,
        "chrf-38": 0.1746175047459187,
        "chrf-29": 0.38574208024779144,
        "chrf-161": 0.28626454532048995,
        "chrf-24": 0.3918060596907299,
        "chrf-176": 0.2748133309029953,
        "chrf-122": 0.1965597345858799,
        "chrf-8": 0.2798428600209008,
        "chrf-7": 0.04778427654687238,
        "chrf-26": 0.3067744731252199,
        "chrf-59": 0.25655317306976805,
        "chrf-67": 0.30009911809537554,
        "chrf-148": 0.25533249700424954,
        "chrf-179": 0.023161199780763954,
        "chrf-167": 0.2948379717813861,
        "rougel-196": 0.3876651982378854,
        "rougel-31": 0.4537037037037037,
        "rougel-6": 0.4915254237288136,
        "rougel-78": 0.0,
        "rougel-70": 0.45384615384615384,
        "rougel-64": 0.08771929824561403,
        "rougel-38": 0.2722513089005235,
        "rougel-29": 0.5021276595744681,
        "rougel-161": 0.38202247191011235,
        "rougel-24": 0.4601769911504424,
        "rougel-176": 0.32460732984293195,
        "rougel-122": 0.30857142857142855,
        "rougel-8": 0.3755868544600939,
        "rougel-7": 0.05309734513274336,
        "rougel-26": 0.3853820598006645,
        "rougel-59": 0.3818181818181818,
        "rougel-67": 0.376,
        "rougel-148": 0.37681159420289856,
        "rougel-179": 0.03809523809523809,
        "rougel-167": 0.3842794759825327,
        "meteor-196": 0.4951820764838582,
        "meteor-31": 0.561675754950425,
        "meteor-6": 0.605534750510419,
        "meteor-78": 0.0,
        "meteor-70": 0.599805712362507,
        "meteor-64": 0.04,
        "meteor-38": 0.27450420750888904,
        "meteor-29": 0.6006184586108468,
        "meteor-161": 0.29060457419070634,
        "meteor-24": 0.5836404422368211,
        "meteor-176": 0.3694141012909633,
        "meteor-122": 0.20686175580222,
        "meteor-8": 0.44535022435313404,
        "meteor-7": 0.021528525296017224,
        "meteor-26": 0.5057685640288505,
        "meteor-59": 0.48186062641844957,
        "meteor-67": 0.5048338544923912,
        "meteor-148": 0.4481139485138419,
        "meteor-179": 0.010857763300760043,
        "meteor-167": 0.49943606385492345,
        "ruby-196": 0.24,
        "ruby-31": 0.3070175438596491,
        "ruby-6": 0.33582089552238803,
        "ruby-78": 0.0,
        "ruby-70": 0.3291139240506329,
        "ruby-64": 0.0490196078431373,
        "ruby-38": 0.1470588235294118,
        "ruby-29": 0.3533834586466166,
        "ruby-161": 0.27450980392156865,
        "ruby-24": 0.3306451612903226,
        "ruby-176": 0.2450980392156863,
        "ruby-122": 0.1470588235294118,
        "ruby-8": 0.19819819819819817,
        "ruby-7": 0.02941176470588236,
        "ruby-26": 0.2562814070351759,
        "ruby-59": 0.22881355932203384,
        "ruby-67": 0.22297297297297303,
        "ruby-148": 0.19047619047619047,
        "ruby-179": 0.019607843137254943,
        "ruby-167": 0.2362204724409449,
        "codebertscore_f1-196": 0.7883558869361877,
        "codebertscore_f3-196": 0.7776085138320923,
        "codebertscore_f1-31": 0.807706892490387,
        "codebertscore_f3-31": 0.7923509478569031,
        "codebertscore_f1-6": 0.8059515357017517,
        "codebertscore_f3-6": 0.7969124913215637,
        "codebertscore_f1-78": 0.5103943943977356,
        "codebertscore_f3-78": 0.49273836612701416,
        "codebertscore_f1-70": 0.7842620015144348,
        "codebertscore_f3-70": 0.7797534465789795,
        "codebertscore_f1-64": 0.5453741550445557,
        "codebertscore_f3-64": 0.5289539694786072,
        "codebertscore_f1-38": 0.7236477136611938,
        "codebertscore_f3-38": 0.7048164010047913,
        "codebertscore_f1-29": 0.8071196675300598,
        "codebertscore_f3-29": 0.7892749309539795,
        "codebertscore_f1-161": 0.8085094690322876,
        "codebertscore_f3-161": 0.7919560670852661,
        "codebertscore_f1-24": 0.8152759671211243,
        "codebertscore_f3-24": 0.802909791469574,
        "codebertscore_f1-176": 0.7228177189826965,
        "codebertscore_f3-176": 0.735744059085846,
        "codebertscore_f1-122": 0.7091503739356995,
        "codebertscore_f3-122": 0.7051317691802979,
        "codebertscore_f1-8": 0.7896135449409485,
        "codebertscore_f3-8": 0.7747364640235901,
        "codebertscore_f1-7": 0.5455261468887329,
        "codebertscore_f3-7": 0.5184935927391052,
        "codebertscore_f1-26": 0.750986635684967,
        "codebertscore_f3-26": 0.749236524105072,
        "codebertscore_f1-59": 0.7896120548248291,
        "codebertscore_f3-59": 0.7755038738250732,
        "codebertscore_f1-67": 0.7679969668388367,
        "codebertscore_f3-67": 0.7576140761375427,
        "codebertscore_f1-148": 0.7831484079360962,
        "codebertscore_f3-148": 0.7614335417747498,
        "codebertscore_f1-179": 0.5202159285545349,
        "codebertscore_f3-179": 0.4805220365524292,
        "codebertscore_f1-167": 0.7828575968742371,
        "codebertscore_f3-167": 0.7705076932907104,
        "codebertscore_s_f1-196": 0.7990774512290955,
        "codebertscore_s_f3-196": 0.7857264280319214,
        "codebertscore_s_f1-31": 0.8225135207176208,
        "codebertscore_s_f3-31": 0.8048579692840576,
        "codebertscore_s_f1-6": 0.8203040361404419,
        "codebertscore_s_f3-6": 0.8132439255714417,
        "codebertscore_s_f1-78": 0.5196416974067688,
        "codebertscore_s_f3-78": 0.5059011578559875,
        "codebertscore_s_f1-70": 0.8041573762893677,
        "codebertscore_s_f3-70": 0.803266704082489,
        "codebertscore_s_f1-64": 0.548398494720459,
        "codebertscore_s_f3-64": 0.5353379845619202,
        "codebertscore_s_f1-38": 0.7394419312477112,
        "codebertscore_s_f3-38": 0.7214598655700684,
        "codebertscore_s_f1-29": 0.8212069869041443,
        "codebertscore_s_f3-29": 0.8012531995773315,
        "codebertscore_s_f1-161": 0.81658935546875,
        "codebertscore_s_f3-161": 0.8000659346580505,
        "codebertscore_s_f1-24": 0.824164628982544,
        "codebertscore_s_f3-24": 0.8100234866142273,
        "codebertscore_s_f1-176": 0.7398205399513245,
        "codebertscore_s_f3-176": 0.7498212456703186,
        "codebertscore_s_f1-122": 0.7242825031280518,
        "codebertscore_s_f3-122": 0.7233593463897705,
        "codebertscore_s_f1-8": 0.8009892702102661,
        "codebertscore_s_f3-8": 0.7849651575088501,
        "codebertscore_s_f1-7": 0.5739455819129944,
        "codebertscore_s_f3-7": 0.5592759251594543,
        "codebertscore_s_f1-26": 0.7695469856262207,
        "codebertscore_s_f3-26": 0.7669767737388611,
        "codebertscore_s_f1-59": 0.8045716881752014,
        "codebertscore_s_f3-59": 0.7910169959068298,
        "codebertscore_s_f1-67": 0.7849017381668091,
        "codebertscore_s_f3-67": 0.7753857374191284,
        "codebertscore_s_f1-148": 0.7970892190933228,
        "codebertscore_s_f3-148": 0.7749314308166504,
        "codebertscore_s_f1-179": 0.6174079775810242,
        "codebertscore_s_f3-179": 0.5548144578933716,
        "codebertscore_s_f1-167": 0.792669951915741,
        "codebertscore_s_f3-167": 0.7787731289863586,
        "gpt35_nsnr-196": 4,
        "raw_gpt35_nsnr-196": "4",
        "gpt35_nsnr-31": 4,
        "raw_gpt35_nsnr-31": "4",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-78": 3,
        "raw_gpt35_nsnr-78": "3",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-64": 0,
        "raw_gpt35_nsnr-64": "0",
        "gpt35_nsnr-38": 4,
        "raw_gpt35_nsnr-38": "4",
        "gpt35_nsnr-29": 4,
        "raw_gpt35_nsnr-29": "4",
        "gpt35_nsnr-161": 4,
        "raw_gpt35_nsnr-161": "4",
        "gpt35_nsnr-24": 4,
        "raw_gpt35_nsnr-24": "4",
        "gpt35_nsnr-176": 4,
        "raw_gpt35_nsnr-176": "4",
        "gpt35_nsnr-122": 3,
        "raw_gpt35_nsnr-122": "3",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nsnr-67": 4,
        "raw_gpt35_nsnr-67": "4",
        "gpt35_nsnr-148": 4,
        "raw_gpt35_nsnr-148": "4",
        "gpt35_nsnr-179": 0,
        "raw_gpt35_nsnr-179": "0",
        "gpt35_nsnr-167": 4,
        "raw_gpt35_nsnr-167": "4",
        "gpt35_nswr-196": 4,
        "raw_gpt35_nswr-196": "4",
        "gpt35_nswr-31": 4,
        "raw_gpt35_nswr-31": "4",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-78": 4,
        "raw_gpt35_nswr-78": "4",
        "gpt35_nswr-70": 4,
        "raw_gpt35_nswr-70": "4",
        "gpt35_nswr-64": 4,
        "raw_gpt35_nswr-64": "4",
        "gpt35_nswr-38": 3,
        "raw_gpt35_nswr-38": "3",
        "gpt35_nswr-29": 4,
        "raw_gpt35_nswr-29": "4",
        "gpt35_nswr-161": 4,
        "raw_gpt35_nswr-161": "4",
        "gpt35_nswr-24": 4,
        "raw_gpt35_nswr-24": "4",
        "gpt35_nswr-176": 3,
        "raw_gpt35_nswr-176": "3",
        "gpt35_nswr-122": 3,
        "raw_gpt35_nswr-122": "3",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-59": 4,
        "raw_gpt35_nswr-59": "4",
        "gpt35_nswr-67": 3,
        "raw_gpt35_nswr-67": "3",
        "gpt35_nswr-148": 4,
        "raw_gpt35_nswr-148": "4",
        "gpt35_nswr-179": 0,
        "raw_gpt35_nswr-179": "0",
        "gpt35_nswr-167": 4,
        "raw_gpt35_nswr-167": "4"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sum_product([])\n    // (0, 1)\n    // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    public static Pair<Integer, Integer> sumProduct(ArrayList<Integer> numbers) {\n",
        "snippet": [
            "        int sum = 0;\n        int product = 1;\n\n        for (int n : numbers) {\n            sum += n;\n            product *= n;\n        }\n        return Arrays.asList(sum, product);\n    }\n}"
        ],
        "simplified": "For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list. Empty sum should be equal to 0 and empty product should be equal to 1.",
        "task_id": "8",
        "135": "// int result = numbers.stream().reduce(0, (subtotal, element) -> subtotal + element);\n        int sum = numbers.stream().reduce(0, (subtotal, element) -> subtotal + element);\n        int product = numbers.stream().reduce(1, (subtotal, element) -> subtotal * element);\n        return new Pair<Integer, Integer>(sum, product);",
        "grade-135": {
            "execution": 0
        },
        "21": "return Pair.with(numbers.stream().reduce(0, (x, y) -> x + y), numbers.stream().reduce(1, (x, y) -> x * y));",
        "grade-21": {
            "execution": 0
        },
        "4": "return new Pair<Integer, Integer>(numbers.stream().reduce(0, (i,j) -> i+j),\n                                          numbers.stream().reduce(1, (i,j) -> i*j));",
        "grade-4": {
            "execution": 0
        },
        "154": "// 1. Return the sum of numbers.\n        // 2. Return the product of numbers.\n        // 3. Return a tuple (sum, product).\n        // 4. Your solution should work for empty list.\n        int s = 0;\n        int p = 1;\n        for (int i = 0; i < numbers.size(); i++) {\n            s += numbers.get(i);\n            p *= numbers.get(i);\n        }\n        return new Pair<Integer, Integer>(s, p);",
        "grade-154": {
            "execution": 0
        },
        "48": "Integer sum = 0;\n        Integer product = 1;\n        for (Integer i: numbers) {\n            sum += i;\n            product *= i;\n        }\n        return new Pair<Integer, Integer>(sum, product);",
        "grade-48": {
            "execution": 0
        },
        "42": "// Write your code here\n        return new Pair<Integer, Integer>(0, 1);",
        "grade-42": {
            "execution": 0
        },
        "39": "int prod = 1;\n\t\tint sum = 0;\n\t\tfor (int i = 0; i < numbers.size(); i++) {\n\t\t\tprod *= numbers.get(i);\n\t\t\tsum += numbers.get(i);\n\t\t}\n\t\treturn new Pair<Integer, Integer>(sum, prod);",
        "grade-39": {
            "execution": 0
        },
        "25": "return new Pair<Integer, Integer>(numbers.stream().reduce(0, (x, y) -> x + y), numbers.stream().reduce(1, (x, y) -> x * y));",
        "grade-25": {
            "execution": 0
        },
        "20": "return Pair.with(1, 2);",
        "grade-20": {
            "execution": 0
        },
        "143": "int sum = 0;\n      int product = 1;\n      for (int i = 0; i < numbers.size(); i++) {\n        sum += numbers.get(i);\n        product *= numbers.get(i);\n      }\n      return new Pair<Integer, Integer>(sum, product);",
        "grade-143": {
            "execution": 0
        },
        "105": "throw new UnsupportedOperationException(\"Not implemented\");",
        "grade-105": {
            "execution": 0
        },
        "18": "// USE_SOLUTION_CODE\n        // BEGIN_SOLUTION\n        if (numbers.isEmpty()) {\n            return new Pair<>(0, 1);\n        } else {\n            int sum = 0;\n            int product = 1;\n            for (int i = 0; i < numbers.size(); i++) {\n                sum += numbers.get(i);\n                product *= numbers.get(i);\n            }\n            return new Pair<>(sum, product);\n        }\n        // END_SOLUTION",
        "grade-18": {
            "execution": 0
        },
        "119": "return new Pair<Integer, Integer>(\n            numbers.stream().reduce(0, (x, y) -> x + y),\n            numbers.stream().reduce(1, (x, y) -> x * y)\n        );",
        "grade-119": {
            "execution": 0
        },
        "80": "// YOUR CODE HERE\n        Integer resultSum = 0;\n        Integer resultProduct = 1;\n        for (Integer num : numbers) {\n            resultSum += num;\n            resultProduct *= num;\n        }\n        return new Pair<Integer, Integer>(resultSum, resultProduct);",
        "grade-80": {
            "execution": 0
        },
        "5": "return new Pair<Integer, Integer>(numbers.stream().reduce(0, (a, b) -> a + b),\n                numbers.stream().reduce(1, (a, b) -> a * b));",
        "grade-5": {
            "execution": 0
        },
        "37": "// Your code here\n        int product = 1;\n        int sum = 0;\n        if(numbers.size() == 0){\n            return new Pair<Integer, Integer>(sum, product);\n        }\n        for(int num : numbers){\n            product *= num;\n            sum += num;\n        }\n        return new Pair<Integer, Integer>(sum, product);",
        "grade-37": {
            "execution": 0
        },
        "40": "return new Pair<Integer, Integer>(\n            numbers.stream().reduce(0, (acc, x) -> acc + x),\n            numbers.stream().reduce(1, (acc, x) -> acc * x)\n        );",
        "grade-40": {
            "execution": 0
        },
        "97": "if (numbers.size() == 0) {\n            return new Pair<Integer, Integer>(0, 1);\n        } else {\n            int product = 1;\n            int sum = 0;\n            for (int i : numbers) {\n                product *= i;\n                sum += i;\n            }\n            return new Pair<Integer, Integer>(sum, product);\n        }",
        "grade-97": {
            "execution": 0
        },
        "121": "int sum = 0;\n        int product = 1;\n        for (int a : numbers) {\n            sum += a;\n            product *= a;\n        }\n        return new Pair<Integer, Integer>(sum, product);",
        "grade-121": {
            "execution": 0
        },
        "107": "Integer sum=0;\n        Integer product=1;\n        if(numbers.size() == 0){\n            return new Pair<Integer, Integer>(sum, product);\n        }\n        for(Integer number: numbers){\n            sum += number;\n            product *= number;\n        }\n        return new Pair<Integer, Integer>(sum, product);",
        "grade-107": {
            "execution": 0
        },
        "bleu-135": 0.10321520980461107,
        "bleu-21": 0.023285579278722813,
        "bleu-4": 0.02151060146656323,
        "bleu-154": 0.12768440426740943,
        "bleu-48": 0.4786919932390649,
        "bleu-42": 0.017434192116214334,
        "bleu-39": 0.18011199438399875,
        "bleu-25": 0.02151060146656323,
        "bleu-20": 0.004678989138535617,
        "bleu-143": 0.3692334986486936,
        "bleu-105": 0.006152724965457744,
        "bleu-18": 0.2580325192507368,
        "bleu-119": 0.02151060146656323,
        "bleu-80": 0.17461391742177657,
        "bleu-5": 0.02151060146656323,
        "bleu-37": 0.2628428217213686,
        "bleu-40": 0.02151060146656323,
        "bleu-97": 0.28607621833944546,
        "bleu-121": 0.5994841147688862,
        "bleu-107": 0.28422874345665816,
        "codebleu-135": 0.5001248726703004,
        "codebleu-21": 0.3619929453262786,
        "codebleu-4": 0.3738977072310405,
        "codebleu-154": 0.6024047242251389,
        "codebleu-48": 0.6950707760090904,
        "codebleu-42": 0.1934336137491067,
        "codebleu-39": 0.653761220050528,
        "codebleu-25": 0.3738977072310405,
        "codebleu-20": 0.1210749603224772,
        "codebleu-143": 0.6772326257075386,
        "codebleu-105": 0.07156064766846955,
        "codebleu-18": 0.6372868976618956,
        "codebleu-119": 0.3738977072310405,
        "codebleu-80": 0.6501795227272829,
        "codebleu-5": 0.3738977072310405,
        "codebleu-37": 0.7350619359121948,
        "codebleu-40": 0.3738977072310405,
        "codebleu-97": 0.6562578993462922,
        "codebleu-121": 0.7380945741143249,
        "codebleu-107": 0.7215427653782714,
        "chrf-135": 0.3276722396243792,
        "chrf-21": 0.17424894603163957,
        "chrf-4": 0.18261807608225852,
        "chrf-154": 0.38786138399095316,
        "chrf-48": 0.5756239219592154,
        "chrf-42": 0.10533650783136746,
        "chrf-39": 0.44789269953884897,
        "chrf-25": 0.177434813194629,
        "chrf-20": 0.07027041225022436,
        "chrf-143": 0.6302122701847732,
        "chrf-105": 0.08503472829677877,
        "chrf-18": 0.5549097818818566,
        "chrf-119": 0.177434813194629,
        "chrf-80": 0.42760330519671114,
        "chrf-5": 0.17571304951393174,
        "chrf-37": 0.5594604193865317,
        "chrf-40": 0.1745199252851035,
        "chrf-97": 0.5619729198637732,
        "chrf-121": 0.6948100610637471,
        "chrf-107": 0.5047691576755636,
        "rougel-135": 0.3007518796992481,
        "rougel-21": 0.1956521739130435,
        "rougel-4": 0.1875,
        "rougel-154": 0.34210526315789475,
        "rougel-48": 0.7058823529411765,
        "rougel-42": 0.16129032258064516,
        "rougel-39": 0.42990654205607476,
        "rougel-25": 0.1875,
        "rougel-20": 0.23076923076923073,
        "rougel-143": 0.5981308411214953,
        "rougel-105": 0.11111111111111112,
        "rougel-18": 0.4782608695652174,
        "rougel-119": 0.1875,
        "rougel-80": 0.5,
        "rougel-5": 0.1875,
        "rougel-37": 0.4444444444444445,
        "rougel-40": 0.1875,
        "rougel-97": 0.4869565217391304,
        "rougel-121": 0.7764705882352941,
        "rougel-107": 0.5357142857142858,
        "meteor-135": 0.4199753729880873,
        "meteor-21": 0.1961543963379744,
        "meteor-4": 0.1943381519274376,
        "meteor-154": 0.4360911885245901,
        "meteor-48": 0.7058326735286355,
        "meteor-42": 0.12050046149112911,
        "meteor-39": 0.5162629221348154,
        "meteor-25": 0.1943381519274376,
        "meteor-20": 0.12360614348832315,
        "meteor-143": 0.68938583267592,
        "meteor-105": 0.06552706552706553,
        "meteor-18": 0.672826483304683,
        "meteor-119": 0.1943381519274376,
        "meteor-80": 0.6722222222222223,
        "meteor-5": 0.1943381519274376,
        "meteor-37": 0.6769683590875644,
        "meteor-40": 0.1943381519274376,
        "meteor-97": 0.7218679697255834,
        "meteor-121": 0.7801072700662421,
        "meteor-107": 0.6768373671782765,
        "ruby-135": 0.18681318681318682,
        "ruby-21": 0.09999999999999998,
        "ruby-4": 0.09259259259259256,
        "ruby-154": 0.21818181818181814,
        "ruby-48": 0.6511627906976745,
        "ruby-42": 0.09523809523809523,
        "ruby-39": 0.32307692307692304,
        "ruby-25": 0.09259259259259256,
        "ruby-20": 0.1428571428571429,
        "ruby-143": 0.46153846153846156,
        "ruby-105": 0.0714285714285714,
        "ruby-18": 0.34375,
        "ruby-119": 0.09259259259259256,
        "ruby-80": 0.40740740740740744,
        "ruby-5": 0.09259259259259256,
        "ruby-37": 0.31999999999999995,
        "ruby-40": 0.09259259259259256,
        "ruby-97": 0.36986301369863017,
        "ruby-121": 0.7209302325581395,
        "ruby-107": 0.4,
        "codebertscore_f1-135": 0.7603328824043274,
        "codebertscore_f3-135": 0.7914287447929382,
        "codebertscore_f1-21": 0.7057932615280151,
        "codebertscore_f3-21": 0.7041779160499573,
        "codebertscore_f1-4": 0.708916962146759,
        "codebertscore_f3-4": 0.7109503149986267,
        "codebertscore_f1-154": 0.7681121826171875,
        "codebertscore_f3-154": 0.8011696338653564,
        "codebertscore_f1-48": 0.9144571423530579,
        "codebertscore_f3-48": 0.9076818823814392,
        "codebertscore_f1-42": 0.6525976061820984,
        "codebertscore_f3-42": 0.6573618650436401,
        "codebertscore_f1-39": 0.8418212532997131,
        "codebertscore_f3-39": 0.8497210144996643,
        "codebertscore_f1-25": 0.7095208168029785,
        "codebertscore_f3-25": 0.7085863351821899,
        "codebertscore_f1-20": 0.6260605454444885,
        "codebertscore_f3-20": 0.6103430390357971,
        "codebertscore_f1-143": 0.8813977241516113,
        "codebertscore_f3-143": 0.8944147825241089,
        "codebertscore_f1-105": 0.5808300971984863,
        "codebertscore_f3-105": 0.5789080858230591,
        "codebertscore_f1-18": 0.7560809254646301,
        "codebertscore_f3-18": 0.8045786023139954,
        "codebertscore_f1-119": 0.7086617350578308,
        "codebertscore_f3-119": 0.7066421508789062,
        "codebertscore_f1-80": 0.8455169796943665,
        "codebertscore_f3-80": 0.8628438115119934,
        "codebertscore_f1-5": 0.7079751491546631,
        "codebertscore_f3-5": 0.7106561660766602,
        "codebertscore_f1-37": 0.807341992855072,
        "codebertscore_f3-37": 0.8265926241874695,
        "codebertscore_f1-40": 0.7122259140014648,
        "codebertscore_f3-40": 0.7150356769561768,
        "codebertscore_f1-97": 0.8053677678108215,
        "codebertscore_f3-97": 0.813232958316803,
        "codebertscore_f1-121": 0.9249340891838074,
        "codebertscore_f3-121": 0.9180910587310791,
        "codebertscore_f1-107": 0.8388182520866394,
        "codebertscore_f3-107": 0.8489463925361633,
        "codebertscore_s_f1-135": 0.7712400555610657,
        "codebertscore_s_f3-135": 0.804183840751648,
        "codebertscore_s_f1-21": 0.7287073731422424,
        "codebertscore_s_f3-21": 0.7242084741592407,
        "codebertscore_s_f1-4": 0.7334898710250854,
        "codebertscore_s_f3-4": 0.7348180413246155,
        "codebertscore_s_f1-154": 0.7783786058425903,
        "codebertscore_s_f3-154": 0.8099737167358398,
        "codebertscore_s_f1-48": 0.9091323614120483,
        "codebertscore_s_f3-48": 0.9004697799682617,
        "codebertscore_s_f1-42": 0.6825277209281921,
        "codebertscore_s_f3-42": 0.6880764961242676,
        "codebertscore_s_f1-39": 0.8473007082939148,
        "codebertscore_s_f3-39": 0.8505814671516418,
        "codebertscore_s_f1-25": 0.7323490977287292,
        "codebertscore_s_f3-25": 0.7280210256576538,
        "codebertscore_s_f1-20": 0.6956346035003662,
        "codebertscore_s_f3-20": 0.6667743921279907,
        "codebertscore_s_f1-143": 0.8869105577468872,
        "codebertscore_s_f3-143": 0.8943045139312744,
        "codebertscore_s_f1-105": 0.5659088492393494,
        "codebertscore_s_f3-105": 0.5637674927711487,
        "codebertscore_s_f1-18": 0.7786230444908142,
        "codebertscore_s_f3-18": 0.8282126188278198,
        "codebertscore_s_f1-119": 0.7357268333435059,
        "codebertscore_s_f3-119": 0.7325149774551392,
        "codebertscore_s_f1-80": 0.8502047061920166,
        "codebertscore_s_f3-80": 0.8682781457901001,
        "codebertscore_s_f1-5": 0.7334896326065063,
        "codebertscore_s_f3-5": 0.7329692840576172,
        "codebertscore_s_f1-37": 0.8235445022583008,
        "codebertscore_s_f3-37": 0.8430349230766296,
        "codebertscore_s_f1-40": 0.7312244176864624,
        "codebertscore_s_f3-40": 0.7316836714744568,
        "codebertscore_s_f1-97": 0.8225452303886414,
        "codebertscore_s_f3-97": 0.8291898369789124,
        "codebertscore_s_f1-121": 0.9237690567970276,
        "codebertscore_s_f3-121": 0.9149124026298523,
        "codebertscore_s_f1-107": 0.8471364378929138,
        "codebertscore_s_f3-107": 0.8548585176467896,
        "gpt35_nsnr-135": 4,
        "raw_gpt35_nsnr-135": "4",
        "gpt35_nsnr-21": 4,
        "raw_gpt35_nsnr-21": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-154": 4,
        "raw_gpt35_nsnr-154": "4",
        "gpt35_nsnr-48": 4,
        "raw_gpt35_nsnr-48": "4",
        "gpt35_nsnr-42": 3,
        "raw_gpt35_nsnr-42": "3",
        "gpt35_nsnr-39": 4,
        "raw_gpt35_nsnr-39": "4",
        "gpt35_nsnr-25": 4,
        "raw_gpt35_nsnr-25": "4",
        "gpt35_nsnr-20": 2,
        "raw_gpt35_nsnr-20": "2",
        "gpt35_nsnr-143": 4,
        "raw_gpt35_nsnr-143": "4",
        "gpt35_nsnr-105": 4,
        "raw_gpt35_nsnr-105": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-119": 4,
        "raw_gpt35_nsnr-119": "4",
        "gpt35_nsnr-80": 4,
        "raw_gpt35_nsnr-80": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-37": 4,
        "raw_gpt35_nsnr-37": "4",
        "gpt35_nsnr-40": 4,
        "raw_gpt35_nsnr-40": "4",
        "gpt35_nsnr-97": 4,
        "raw_gpt35_nsnr-97": "4",
        "gpt35_nsnr-121": 4,
        "raw_gpt35_nsnr-121": "4",
        "gpt35_nsnr-107": 4,
        "raw_gpt35_nsnr-107": "4",
        "gpt35_nswr-135": 4,
        "raw_gpt35_nswr-135": "4",
        "gpt35_nswr-21": 4,
        "raw_gpt35_nswr-21": "4",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-154": 3,
        "raw_gpt35_nswr-154": "3",
        "gpt35_nswr-48": 4,
        "raw_gpt35_nswr-48": "4",
        "gpt35_nswr-42": 2,
        "raw_gpt35_nswr-42": "2",
        "gpt35_nswr-39": 4,
        "raw_gpt35_nswr-39": "4",
        "gpt35_nswr-25": 3,
        "raw_gpt35_nswr-25": "3",
        "gpt35_nswr-20": 2,
        "raw_gpt35_nswr-20": "2",
        "gpt35_nswr-143": 4,
        "raw_gpt35_nswr-143": "4",
        "gpt35_nswr-105": 2,
        "raw_gpt35_nswr-105": "2",
        "gpt35_nswr-18": 4,
        "raw_gpt35_nswr-18": "4",
        "gpt35_nswr-119": 3,
        "raw_gpt35_nswr-119": "3",
        "gpt35_nswr-80": 4,
        "raw_gpt35_nswr-80": "4",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-37": 4,
        "raw_gpt35_nswr-37": "4",
        "gpt35_nswr-40": 4,
        "raw_gpt35_nswr-40": "4",
        "gpt35_nswr-97": 4,
        "raw_gpt35_nswr-97": "4",
        "gpt35_nswr-121": 4,
        "raw_gpt35_nswr-121": "4",
        "gpt35_nswr-107": 4,
        "raw_gpt35_nswr-107": "4"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    // >>> fizz_buzz(50)\n    // 0\n    // >>> fizz_buzz(78)\n    // 2\n    // >>> fizz_buzz(79)\n    // 3\n    public static int fizzBuzz(int n) {\n",
        "snippet": [
            "        int result = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                char[] digits = String.valueOf(i).toCharArray();\n                for (char c : digits) {\n                    if (c == '7') {\n                        result += 1;\n                    }\n                }\n            }\n        }\n        return result;\n    }\n}"
        ],
        "simplified": "Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.",
        "task_id": "36",
        "188": "if (n <= 0) {\n            return 0;\n        }\n        int count = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String s = String.valueOf(i);\n                for (int j = 0; j < s.length(); j++) {\n                    if (s.charAt(j) == '7') {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;",
        "grade-188": {
            "execution": 1
        },
        "33": "int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (i % 11 == 0) count++;\n            if (i % 13 == 0) count++;\n            if (i % 11 == 0 && i % 13 == 0) count--;\n        }\n        return count;",
        "grade-33": {
            "execution": 0
        },
        "6": "int count = 0;\n        for (int i = 1; i < n; i++) {\n            String num = String.valueOf(i);\n            if (num.contains(\"7\")) {\n                if (i % 11 == 0 || i % 13 == 0) {\n                    count++;\n                }\n            }\n        }\n        return count;",
        "grade-6": {
            "execution": 0
        },
        "77": "int i = 1;\n        int fizzBuzz = 0;\n        while (i < n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                if (i % 10 == 7) {\n                    fizzBuzz += 1;\n                }\n                if (i / 10 == 7) {\n                    fizzBuzz += 1;\n                }\n            }\n            i += 1;\n        }\n        return fizzBuzz;",
        "grade-77": {
            "execution": 0
        },
        "68": "int result = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String s = String.valueOf(i);\n                for (int j = 0; j < s.length(); j++) {\n                    if (s.charAt(j) == '7') {\n                        result++;\n                    }\n                }\n            }\n        }\n        return result;",
        "grade-68": {
            "execution": 1
        },
        "63": "return IntStream.range(0, n).filter(x -> (x % 11 == 0 || x % 13 == 0) && hasSeven(x)).map(x -> 1).sum();",
        "grade-63": {
            "execution": 0
        },
        "40": "int tot = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                tot += i;\n            }\n        }\n        return tot;",
        "grade-40": {
            "execution": 0
        },
        "31": "int c = 0;\n        for (int i = 0; i < n; i++) {\n            int j = i;\n            while (j > 0) {\n                if (j % 10 == 7) {\n                    c++;\n                }\n                j /= 10;\n            }\n        }\n        return c;",
        "grade-31": {
            "execution": 0
        },
        "160": "int fizz = 0;\n        int buzz = 0;\n        int i = 1;\n        for (i = 1; i < n; i++) {\n            if (i % 11 == 0) {\n                fizz++;\n            }\n            if (i % 13 == 0) {\n                buzz++;\n            }\n        }\n        return fizz+buzz;",
        "grade-160": {
            "execution": 0
        },
        "27": "String s = String.valueOf(n);\n        int cnt = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == '7') {\n                cnt++;\n            }\n        }\n        return cnt;",
        "grade-27": {
            "execution": 0
        },
        "174": "int c=0;\n        for(int i=1;i<n;i++) {\n            if(i%11==0||i%13==0) {\n                String d=i+\"\";\n                int j=0;\n                while(j<d.length()) {\n                    if(d.charAt(j)=='7') {\n                        c++;\n                    }\n                    j++;\n                }\n            }\n        }\n        return c;",
        "grade-174": {
            "execution": 1
        },
        "123": "int count = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count += numDigit7(i);\n            }\n        }\n        return count;",
        "grade-123": {
            "execution": 0
        },
        "8": "return 0;",
        "grade-8": {
            "execution": 0
        },
        "7": "int c = 0;\n        for (int i = 11; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String s = String.valueOf(i);\n                for (int j = 0; j < s.length(); j++) {\n                    if (s.charAt(j) == '7') c++;\n                }\n            }\n        }\n        return c;",
        "grade-7": {
            "execution": 1
        },
        "28": "int cnt = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                if (Integer.toString(i).contains(\"7\")) {\n                    cnt++;\n                }\n            }\n        }\n        return cnt;",
        "grade-28": {
            "execution": 0
        },
        "61": "int cnt = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String s = String.valueOf(i);\n                for (int j = 0; j < s.length(); j++) {\n                    if (s.charAt(j) == '7') {\n                        cnt++;\n                    }\n                }\n            }\n        }\n        return cnt;",
        "grade-61": {
            "execution": 1
        },
        "65": "int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                char[] arr = Integer.toString(i).toCharArray();\n                for (char c : arr) {\n                    if (c == '7') {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;",
        "grade-65": {
            "execution": 1
        },
        "150": "int count = 0;\n        // Add your code here\n        return count;",
        "grade-150": {
            "execution": 0
        },
        "177": "int count = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                int j = i;\n                while (j > 0) {\n                    if (j % 10 == 7) {\n                        count++;\n                    }\n                    j /= 10;\n                }\n            }\n        }\n        return count;",
        "grade-177": {
            "execution": 1
        },
        "165": "int count = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String x = i + \"\";\n                for (int j = 0; j < x.length(); j++) {\n                    if (x.charAt(j) == '7') {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;",
        "grade-165": {
            "execution": 1
        },
        "bleu-188": 0.5488098025808399,
        "bleu-33": 0.36053310529715665,
        "bleu-6": 0.5556371416858699,
        "bleu-77": 0.40288965658522163,
        "bleu-68": 0.6701613710012359,
        "bleu-63": 0.1275720046954706,
        "bleu-40": 0.3557640855939196,
        "bleu-31": 0.24082010117892047,
        "bleu-160": 0.38253423975405043,
        "bleu-27": 0.30988955504604176,
        "bleu-174": 0.5542721367749511,
        "bleu-123": 0.39048242294394947,
        "bleu-8": 1.6024089465123276e-13,
        "bleu-7": 0.5820554867715074,
        "bleu-28": 0.5181316215488245,
        "bleu-61": 0.6131836255647035,
        "bleu-65": 0.7408057369323129,
        "bleu-150": 0.0005517951345254371,
        "bleu-177": 0.5030034099483757,
        "bleu-165": 0.5700666748644054,
        "codebleu-188": 0.7031178480145369,
        "codebleu-33": 0.44902501954048,
        "codebleu-6": 0.5932562288703073,
        "codebleu-77": 0.49237702725439825,
        "codebleu-68": 0.7064132134036711,
        "codebleu-63": 0.2884874457676855,
        "codebleu-40": 0.41525819224544025,
        "codebleu-31": 0.4067218033155277,
        "codebleu-160": 0.4761041537463592,
        "codebleu-27": 0.4373832922844826,
        "codebleu-174": 0.6837790899018811,
        "codebleu-123": 0.44660183344145116,
        "codebleu-8": 0.016806722693953415,
        "codebleu-7": 0.6802191704274465,
        "codebleu-28": 0.5796988887775674,
        "codebleu-61": 0.6965571841246364,
        "codebleu-65": 0.7729248071713353,
        "codebleu-150": 0.08431112312551048,
        "codebleu-177": 0.5876638853313096,
        "codebleu-165": 0.6956483614874489,
        "chrf-188": 0.5668643146246137,
        "chrf-33": 0.32084446779227077,
        "chrf-6": 0.49100031717749715,
        "chrf-77": 0.3096176941618673,
        "chrf-68": 0.682806764766126,
        "chrf-63": 0.16692112751240085,
        "chrf-40": 0.38260618925526324,
        "chrf-31": 0.24511992285124282,
        "chrf-160": 0.32733246125954674,
        "chrf-27": 0.37031497098118993,
        "chrf-174": 0.4610305301162329,
        "chrf-123": 0.40405380546100667,
        "chrf-8": 0.03205084642998578,
        "chrf-7": 0.5370013932841695,
        "chrf-28": 0.44060080447380445,
        "chrf-61": 0.5684731638367272,
        "chrf-65": 0.641357911997677,
        "chrf-150": 0.08083453128038692,
        "chrf-177": 0.4123093071928167,
        "chrf-165": 0.48704020599243053,
        "rougel-188": 0.6934673366834171,
        "rougel-33": 0.5432098765432098,
        "rougel-6": 0.5679012345679012,
        "rougel-77": 0.5730994152046783,
        "rougel-68": 0.7700534759358288,
        "rougel-63": 0.3496503496503497,
        "rougel-40": 0.6474820143884893,
        "rougel-31": 0.5270270270270271,
        "rougel-160": 0.5384615384615385,
        "rougel-27": 0.4900662251655629,
        "rougel-174": 0.6739130434782609,
        "rougel-123": 0.6573426573426574,
        "rougel-8": 0.043010752688172046,
        "rougel-7": 0.7135135135135134,
        "rougel-28": 0.7133757961783439,
        "rougel-61": 0.7379679144385027,
        "rougel-65": 0.8700564971751412,
        "rougel-150": 0.11538461538461539,
        "rougel-177": 0.7065868263473054,
        "rougel-165": 0.6847826086956521,
        "meteor-188": 0.6573058736470788,
        "meteor-33": 0.39257097174381733,
        "meteor-6": 0.6302357368728742,
        "meteor-77": 0.46662457912457916,
        "meteor-68": 0.7113236309162041,
        "meteor-63": 0.2655970853590152,
        "meteor-40": 0.4871581013663842,
        "meteor-31": 0.36234283438584514,
        "meteor-160": 0.4372179892464401,
        "meteor-27": 0.39148794489093003,
        "meteor-174": 0.663093726100732,
        "meteor-123": 0.47379940775074025,
        "meteor-8": 0.01845018450184502,
        "meteor-7": 0.6182655088329583,
        "meteor-28": 0.5559328131468687,
        "meteor-61": 0.659396702488909,
        "meteor-65": 0.8472201149715943,
        "meteor-150": 0.03640776699029127,
        "meteor-177": 0.5430539897281723,
        "meteor-165": 0.671483876460809,
        "ruby-188": 0.5688073394495412,
        "ruby-33": 0.4222222222222223,
        "ruby-6": 0.4111111111111111,
        "ruby-77": 0.4222222222222223,
        "ruby-68": 0.6701030927835052,
        "ruby-63": 0.2666666666666667,
        "ruby-40": 0.5,
        "ruby-31": 0.3666666666666667,
        "ruby-160": 0.33333333333333337,
        "ruby-27": 0.2777777777777778,
        "ruby-174": 0.5638297872340425,
        "ruby-123": 0.5222222222222221,
        "ruby-8": 0.022222222222222254,
        "ruby-7": 0.6,
        "ruby-28": 0.6111111111111112,
        "ruby-61": 0.6391752577319587,
        "ruby-65": 0.8555555555555556,
        "ruby-150": 0.06666666666666665,
        "ruby-177": 0.5777777777777777,
        "ruby-165": 0.5957446808510638,
        "codebertscore_f1-188": 0.8658572435379028,
        "codebertscore_f3-188": 0.8707414269447327,
        "codebertscore_f1-33": 0.8327087759971619,
        "codebertscore_f3-33": 0.8092402815818787,
        "codebertscore_f1-6": 0.8831484913825989,
        "codebertscore_f3-6": 0.8723740577697754,
        "codebertscore_f1-77": 0.8162007331848145,
        "codebertscore_f3-77": 0.8099808096885681,
        "codebertscore_f1-68": 0.9217318296432495,
        "codebertscore_f3-68": 0.9250277876853943,
        "codebertscore_f1-63": 0.7230863571166992,
        "codebertscore_f3-63": 0.706052839756012,
        "codebertscore_f1-40": 0.8873212337493896,
        "codebertscore_f3-40": 0.8486505746841431,
        "codebertscore_f1-31": 0.8329978585243225,
        "codebertscore_f3-31": 0.808613657951355,
        "codebertscore_f1-160": 0.8110234141349792,
        "codebertscore_f3-160": 0.8001478910446167,
        "codebertscore_f1-27": 0.8157309293746948,
        "codebertscore_f3-27": 0.8060458302497864,
        "codebertscore_f1-174": 0.8707539439201355,
        "codebertscore_f3-174": 0.8704062104225159,
        "codebertscore_f1-123": 0.8831475377082825,
        "codebertscore_f3-123": 0.8577410578727722,
        "codebertscore_f1-8": 0.5587738752365112,
        "codebertscore_f3-8": 0.5137939453125,
        "codebertscore_f1-7": 0.9018628597259521,
        "codebertscore_f3-7": 0.9036783576011658,
        "codebertscore_f1-28": 0.8800455331802368,
        "codebertscore_f3-28": 0.869962751865387,
        "codebertscore_f1-61": 0.9016391038894653,
        "codebertscore_f3-61": 0.9076372981071472,
        "codebertscore_f1-65": 0.9382511377334595,
        "codebertscore_f3-65": 0.9337745904922485,
        "codebertscore_f1-150": 0.6617140173912048,
        "codebertscore_f3-150": 0.6468935608863831,
        "codebertscore_f1-177": 0.8798831701278687,
        "codebertscore_f3-177": 0.8656978011131287,
        "codebertscore_f1-165": 0.8895055055618286,
        "codebertscore_f3-165": 0.8876235485076904,
        "codebertscore_s_f1-188": 0.8767735362052917,
        "codebertscore_s_f3-188": 0.8801212310791016,
        "codebertscore_s_f1-33": 0.8566970825195312,
        "codebertscore_s_f3-33": 0.8312017321586609,
        "codebertscore_s_f1-6": 0.8943387866020203,
        "codebertscore_s_f3-6": 0.8826065063476562,
        "codebertscore_s_f1-77": 0.8304735422134399,
        "codebertscore_s_f3-77": 0.823799192905426,
        "codebertscore_s_f1-68": 0.9272044897079468,
        "codebertscore_s_f3-68": 0.9296103715896606,
        "codebertscore_s_f1-63": 0.7434682250022888,
        "codebertscore_s_f3-63": 0.7267783880233765,
        "codebertscore_s_f1-40": 0.8963638544082642,
        "codebertscore_s_f3-40": 0.8585008978843689,
        "codebertscore_s_f1-31": 0.8456942439079285,
        "codebertscore_s_f3-31": 0.8224448561668396,
        "codebertscore_s_f1-160": 0.8257843255996704,
        "codebertscore_s_f3-160": 0.8143091201782227,
        "codebertscore_s_f1-27": 0.8361601829528809,
        "codebertscore_s_f3-27": 0.8263548016548157,
        "codebertscore_s_f1-174": 0.8769769072532654,
        "codebertscore_s_f3-174": 0.8782022595405579,
        "codebertscore_s_f1-123": 0.8925459980964661,
        "codebertscore_s_f3-123": 0.8673033118247986,
        "codebertscore_s_f1-8": 0.6469061970710754,
        "codebertscore_s_f3-8": 0.5814723968505859,
        "codebertscore_s_f1-7": 0.9076277613639832,
        "codebertscore_s_f3-7": 0.9079923033714294,
        "codebertscore_s_f1-28": 0.8914879560470581,
        "codebertscore_s_f3-28": 0.8823356032371521,
        "codebertscore_s_f1-61": 0.9086956977844238,
        "codebertscore_s_f3-61": 0.9138020277023315,
        "codebertscore_s_f1-65": 0.9438089728355408,
        "codebertscore_s_f3-65": 0.9400101900100708,
        "codebertscore_s_f1-150": 0.6876918077468872,
        "codebertscore_s_f3-150": 0.6748098731040955,
        "codebertscore_s_f1-177": 0.8880555033683777,
        "codebertscore_s_f3-177": 0.8735931515693665,
        "codebertscore_s_f1-165": 0.8955801129341125,
        "codebertscore_s_f3-165": 0.8939704895019531,
        "gpt35_nsnr-188": 3,
        "raw_gpt35_nsnr-188": "3",
        "gpt35_nsnr-33": 4,
        "raw_gpt35_nsnr-33": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-77": 4,
        "raw_gpt35_nsnr-77": "4",
        "gpt35_nsnr-68": 3,
        "raw_gpt35_nsnr-68": "3",
        "gpt35_nsnr-63": 3,
        "raw_gpt35_nsnr-63": "3",
        "gpt35_nsnr-40": 2,
        "raw_gpt35_nsnr-40": "2",
        "gpt35_nsnr-31": 2,
        "raw_gpt35_nsnr-31": "2",
        "gpt35_nsnr-160": 3,
        "raw_gpt35_nsnr-160": "3",
        "gpt35_nsnr-27": 2,
        "raw_gpt35_nsnr-27": "2",
        "gpt35_nsnr-174": 4,
        "raw_gpt35_nsnr-174": "4",
        "gpt35_nsnr-123": 3,
        "raw_gpt35_nsnr-123": "3",
        "gpt35_nsnr-8": 2,
        "raw_gpt35_nsnr-8": "2",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-28": 3,
        "raw_gpt35_nsnr-28": "3",
        "gpt35_nsnr-61": 4,
        "raw_gpt35_nsnr-61": "4",
        "gpt35_nsnr-65": 3,
        "raw_gpt35_nsnr-65": "3",
        "gpt35_nsnr-150": 2,
        "raw_gpt35_nsnr-150": "2",
        "gpt35_nsnr-177": 4,
        "raw_gpt35_nsnr-177": "4",
        "gpt35_nsnr-165": 4,
        "raw_gpt35_nsnr-165": "4",
        "gpt35_nswr-188": 4,
        "raw_gpt35_nswr-188": "4",
        "gpt35_nswr-33": 3,
        "raw_gpt35_nswr-33": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-77": 3,
        "raw_gpt35_nswr-77": "3",
        "gpt35_nswr-68": 4,
        "raw_gpt35_nswr-68": "4",
        "gpt35_nswr-63": 2,
        "raw_gpt35_nswr-63": "2",
        "gpt35_nswr-40": 2,
        "raw_gpt35_nswr-40": "2",
        "gpt35_nswr-31": 2,
        "raw_gpt35_nswr-31": "2",
        "gpt35_nswr-160": 3,
        "raw_gpt35_nswr-160": "3",
        "gpt35_nswr-27": 3,
        "raw_gpt35_nswr-27": "3",
        "gpt35_nswr-174": 4,
        "raw_gpt35_nswr-174": "4",
        "gpt35_nswr-123": 3,
        "raw_gpt35_nswr-123": "3",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-61": 4,
        "raw_gpt35_nswr-61": "4",
        "gpt35_nswr-65": 4,
        "raw_gpt35_nswr-65": "4",
        "gpt35_nswr-150": 2,
        "raw_gpt35_nswr-150": "2",
        "gpt35_nswr-177": 4,
        "raw_gpt35_nswr-177": "4",
        "gpt35_nswr-165": 4,
        "raw_gpt35_nswr-165": "4"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> string_xor('010', '110')\n    // '100'\n    public static String stringXor(String a, String b) {\n",
        "snippet": [
            "        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == b.charAt(i)) {\n                result.append(\"0\");\n            } else {\n                result.append(\"1\");\n            }\n        }\n        return result.toString();\n    }\n}"
        ],
        "simplified": "Input are two strings a and b consisting only of 1s and 0s. Perform binary XOR on these inputs and return result also as a string.",
        "task_id": "11",
        "31": "if (a.length() == 0) return b;\n        if (b.length() == 0) return a;\n        char[] chars = new char[a.length()];\n        for (int i = 0; i < chars.length; i++) {\n            chars[i] = a.charAt(i) == b.charAt(i) ? '0' : '1';\n        }\n        return new String(chars);",
        "grade-31": {
            "execution": 1
        },
        "6": "throw new UnsupportedOperationException(\"Problem solution not yet implemented\");",
        "grade-6": {
            "execution": 0
        },
        "83": "// ...",
        "grade-83": {
            "execution": 0
        },
        "73": "return Integer.toBinaryString(Integer.parseInt(a, 2) ^ Integer.parseInt(b, 2));",
        "grade-73": {
            "execution": 0
        },
        "68": "StringBuilder res = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == b.charAt(i)) {\n                res.append('0');\n            } else {\n                res.append('1');\n            }\n        }\n        return res.toString();",
        "grade-68": {
            "execution": 1
        },
        "42": "// Note: StringBuilder is used to efficiently build strings.\n        StringBuilder output = new StringBuilder();\n        int length = Math.max(a.length(), b.length());\n        // Pad shorter string with zeros.\n        a = String.format(\"%0\" + length + \"d\", Integer.parseInt(a));\n        b = String.format(\"%0\" + length + \"d\", Integer.parseInt(b));\n        for (int i = 0; i < length; i++) {\n            // Perform XOR for current digit.\n            if (a.charAt(i) == b.charAt(i)) {\n                output.append('0');\n            } else {\n                output.append('1');\n            }\n        }\n        return output.toString();",
        "grade-42": {
            "execution": 1
        },
        "29": "// Your code here.\n        return null;",
        "grade-29": {
            "execution": 0
        },
        "175": "if (a.length() != b.length())\n            throw new IllegalArgumentException(\"Inputs must be of equal length.\");\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            char c = a.charAt(i);\n            char d = b.charAt(i);\n            if (c == d)\n                sb.append('0');\n            else\n                sb.append('1');\n        }\n        return sb.toString();",
        "grade-175": {
            "execution": 1
        },
        "24": "StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            char charA = a.charAt(i);\n            char charB = b.charAt(i);\n            boolean boolA = (charA == '1');\n            boolean boolB = (charB == '1');\n            if (boolA ^ boolB) {\n                sb.append('1');\n            } else {\n                sb.append('0');\n            }\n        }\n        return sb.toString();",
        "grade-24": {
            "execution": 1
        },
        "188": "char[] a_chars = a.toCharArray();\n\tchar[] b_chars = b.toCharArray();\n\tint a_length = a_chars.length;\n\tint b_length = b_chars.length;\n\tchar[] result = new char[Math.max(a_length, b_length)];\n\tfor (int i = 0; i < result.length; i++) {\n\t    if (i >= a_length)\n\t\tresult[i] = b_chars[i];\n\t    else if (i >= b_length)\n\t\tresult[i] = a_chars[i];\n\t    else\n\t\tresult[i] = (a_chars[i] == b_chars[i]) ? '0' : '1';\n\t}\n\treturn new String(result);",
        "grade-188": {
            "execution": 1
        },
        "129": "// Note: string a and b will have the same length.\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            sb.append(a.charAt(i) ^ b.charAt(i));\n        }\n        return sb.toString();",
        "grade-129": {
            "execution": 1
        },
        "8": "char[] a_array = a.toCharArray();\n        char[] b_array = b.toCharArray();\n        char[] out = new char[a_array.length];\n        for (int i = 0; i < a_array.length; i++) {\n            if (a_array[i] == b_array[i]) {\n                out[i] = '0';\n            } else {\n                out[i] = '1';\n            }\n        }\n        return new String(out);",
        "grade-8": {
            "execution": 1
        },
        "7": "return \"\";",
        "grade-7": {
            "execution": 0
        },
        "25": "int length = Math.max(a.length(), b.length());\n        int[] A = new int[length];\n        int[] B = new int[length];\n        for (int i = 0; i < length; i++) {\n            if (i < a.length()) {\n                A[i] = Character.getNumericValue(a.charAt(i));\n            }\n            if (i < b.length()) {\n                B[i] = Character.getNumericValue(b.charAt(i));\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < length; i++) {\n            sb.append(A[i] ^ B[i]);\n        }\n        return sb.toString();",
        "grade-25": {
            "execution": 1
        },
        "66": "// >>> string_xor('010', '110')\n        // '100'\n        BigInteger aBin = new BigInteger(a, 2);\n        BigInteger bBin = new BigInteger(b, 2);\n        BigInteger cBin = aBin.xor(bBin);\n        String c = String.format(\"%1$\" + b.length() + \"s\", cBin.toString(2)).replace(' ', '0');\n        return c;",
        "grade-66": {
            "execution": 1
        },
        "70": "StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            int ax = Integer.parseInt(a.substring(i, i + 1));\n            int bx = Integer.parseInt(b.substring(i, i + 1));\n            int c = (ax == bx) ? 0 : 1;\n            sb.append(Integer.toString(c));\n        }\n        return sb.toString();",
        "grade-70": {
            "execution": 1
        },
        "165": "StringBuilder result = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i) ^ b.charAt(i));\n        }\n        return result.toString();",
        "grade-165": {
            "execution": 1
        },
        "194": "byte[] bytea = a.getBytes();\n      byte[] byteb = b.getBytes();\n      byte[] bytec = new byte[bytea.length];\n      for (int i = 0; i < bytea.length; i++) {\n        bytec[i] = (byte) (bytea[i] ^ byteb[i]);\n      }\n      return new String(bytec);",
        "grade-194": {
            "execution": 0
        },
        "180": "if (a.length() != b.length()) {\n            throw new IllegalArgumentException(\"Strings must be of same length\");\n        }\n        char[] chars = new char[a.length()];\n        for (int i = 0; i < chars.length; i++) {\n            chars[i] = (a.charAt(i) == b.charAt(i)) ? '0' : '1';\n        }\n        return String.valueOf(chars);",
        "grade-180": {
            "execution": 1
        },
        "60": "int length = Math.max(a.length(), b.length());\n        StringBuffer buffer = new StringBuffer();\n        for (int i = 0; i < length; i++) {\n            char chara = a.charAt(a.length() - 1 - i);\n            char charb = b.charAt(b.length() - 1 - i);\n            buffer.append(Character.getNumericValue(chara) ^ Character.getNumericValue(charb));\n        }\n        return buffer.reverse().toString();",
        "grade-60": {
            "execution": 1
        },
        "bleu-31": 0.41271339658444267,
        "bleu-6": 0.0013833211046053622,
        "bleu-83": 2.3601852449595004e-08,
        "bleu-73": 0.009269484540366073,
        "bleu-68": 0.8536152159885861,
        "bleu-42": 0.36606872040003036,
        "bleu-29": 1.685482056360748e-05,
        "bleu-175": 0.5063395263242024,
        "bleu-24": 0.5231658551582388,
        "bleu-188": 0.1952535529266225,
        "bleu-129": 0.5664646948454404,
        "bleu-8": 0.2973180456968503,
        "bleu-7": 5.978623107048192e-10,
        "bleu-25": 0.2995827339687707,
        "bleu-66": 0.12023520320898996,
        "bleu-70": 0.37708395575922177,
        "bleu-165": 0.6206059448862149,
        "bleu-194": 0.2623106272355599,
        "bleu-180": 0.41089939405252046,
        "bleu-60": 0.32066661512277483,
        "codebleu-31": 0.6497464399574439,
        "codebleu-6": 0.056497746307810244,
        "codebleu-83": 0.0,
        "codebleu-73": 0.12710632900648217,
        "codebleu-68": 0.839624044479714,
        "codebleu-42": 0.7530543637221248,
        "codebleu-29": 0.04522948954136143,
        "codebleu-175": 0.7596452996992429,
        "codebleu-24": 0.7520469728976253,
        "codebleu-188": 0.636623382333127,
        "codebleu-129": 0.5962755907457056,
        "codebleu-8": 0.5875141210669081,
        "codebleu-7": 0.02259887008323024,
        "codebleu-25": 0.6644510058656197,
        "codebleu-66": 0.4897211840807167,
        "codebleu-70": 0.6382446575682513,
        "codebleu-165": 0.5601214186991736,
        "codebleu-194": 0.5159605905152496,
        "codebleu-180": 0.6987193197047405,
        "codebleu-60": 0.6361394357974769,
        "chrf-31": 0.4099365805832002,
        "chrf-6": 0.08348278728386108,
        "chrf-83": 0.004405286343612335,
        "chrf-73": 0.12631921657405104,
        "chrf-68": 0.8046298629395473,
        "chrf-42": 0.5580005821610541,
        "chrf-29": 0.050197898071394055,
        "chrf-175": 0.6049703269452388,
        "chrf-24": 0.6284534009475138,
        "chrf-188": 0.3632294335466389,
        "chrf-129": 0.6091040894920227,
        "chrf-8": 0.34576674903581717,
        "chrf-7": 0.029529690242234237,
        "chrf-25": 0.5214627650383125,
        "chrf-66": 0.24868289918471015,
        "chrf-70": 0.5099109054476393,
        "chrf-165": 0.7569165640929169,
        "chrf-194": 0.27016371997791033,
        "chrf-180": 0.41893181038491584,
        "chrf-60": 0.4469387357266379,
        "rougel-31": 0.5604395604395604,
        "rougel-6": 0.12244897959183673,
        "rougel-83": 0.06818181818181818,
        "rougel-73": 0.1981981981981982,
        "rougel-68": 0.9390243902439024,
        "rougel-42": 0.5593869731800766,
        "rougel-29": 0.06521739130434782,
        "rougel-175": 0.6930693069306931,
        "rougel-24": 0.702439024390244,
        "rougel-188": 0.40174672489082974,
        "rougel-129": 0.6878980891719745,
        "rougel-8": 0.5108695652173914,
        "rougel-7": 0.0689655172413793,
        "rougel-25": 0.4296875,
        "rougel-66": 0.31413612565445026,
        "rougel-70": 0.6137566137566138,
        "rougel-165": 0.7832167832167832,
        "rougel-194": 0.4096385542168675,
        "rougel-180": 0.5549738219895288,
        "rougel-60": 0.5320197044334974,
        "meteor-31": 0.5480520933876087,
        "meteor-6": 0.05595654709827938,
        "meteor-83": 0.019946808510638295,
        "meteor-73": 0.12139616935483871,
        "meteor-68": 0.9292092091358042,
        "meteor-42": 0.8164085826423488,
        "meteor-29": 0.01984126984126984,
        "meteor-175": 0.8137031372632295,
        "meteor-24": 0.7647709246800604,
        "meteor-188": 0.4882891831889083,
        "meteor-129": 0.5650853312309343,
        "meteor-8": 0.5133573015053957,
        "meteor-7": 0.02663115845539281,
        "meteor-25": 0.6265295809849705,
        "meteor-66": 0.2978826551332034,
        "meteor-70": 0.5245686705305264,
        "meteor-165": 0.6171900780551672,
        "meteor-194": 0.34329378003507416,
        "meteor-180": 0.5485643173678141,
        "meteor-60": 0.5659518709444562,
        "ruby-31": 0.303030303030303,
        "ruby-6": 0.07228915662650603,
        "ruby-83": 0.03614457831325302,
        "ruby-73": 0.1325301204819277,
        "ruby-68": 0.927710843373494,
        "ruby-42": 0.3876404494382022,
        "ruby-29": 0.03614457831325302,
        "ruby-175": 0.5378151260504201,
        "ruby-24": 0.5737704918032787,
        "ruby-188": 0.23287671232876717,
        "ruby-129": 0.45783132530120485,
        "ruby-8": 0.3267326732673267,
        "ruby-7": 0.03614457831325302,
        "ruby-25": 0.2832369942196532,
        "ruby-66": 0.15740740740740744,
        "ruby-70": 0.49056603773584906,
        "ruby-165": 0.6506024096385542,
        "ruby-194": 0.1686746987951807,
        "ruby-180": 0.32407407407407407,
        "ruby-60": 0.375,
        "codebertscore_f1-31": 0.8394439220428467,
        "codebertscore_f3-31": 0.8349373936653137,
        "codebertscore_f1-6": 0.6153587102890015,
        "codebertscore_f3-6": 0.6018086075782776,
        "codebertscore_f1-83": 0.5003301501274109,
        "codebertscore_f3-83": 0.46849215030670166,
        "codebertscore_f1-73": 0.6951731443405151,
        "codebertscore_f3-73": 0.678360641002655,
        "codebertscore_f1-68": 0.9896991848945618,
        "codebertscore_f3-68": 0.9896991848945618,
        "codebertscore_f1-42": 0.8118603229522705,
        "codebertscore_f3-42": 0.8675042390823364,
        "codebertscore_f1-29": 0.5906419157981873,
        "codebertscore_f3-29": 0.5753892660140991,
        "codebertscore_f1-175": 0.8594918847084045,
        "codebertscore_f3-175": 0.8943881988525391,
        "codebertscore_f1-24": 0.88551265001297,
        "codebertscore_f3-24": 0.9183406829833984,
        "codebertscore_f1-188": 0.8057358264923096,
        "codebertscore_f3-188": 0.8182497024536133,
        "codebertscore_f1-129": 0.8744214177131653,
        "codebertscore_f3-129": 0.8898472189903259,
        "codebertscore_f1-8": 0.8284313678741455,
        "codebertscore_f3-8": 0.832567572593689,
        "codebertscore_f1-7": 0.5358057022094727,
        "codebertscore_f3-7": 0.500071108341217,
        "codebertscore_f1-25": 0.7983488440513611,
        "codebertscore_f3-25": 0.8203223943710327,
        "codebertscore_f1-66": 0.7109974026679993,
        "codebertscore_f3-66": 0.7208602428436279,
        "codebertscore_f1-70": 0.8525075912475586,
        "codebertscore_f3-70": 0.8777036666870117,
        "codebertscore_f1-165": 0.9426284432411194,
        "codebertscore_f3-165": 0.9271611571311951,
        "codebertscore_f1-194": 0.7910249829292297,
        "codebertscore_f3-194": 0.7890427112579346,
        "codebertscore_f1-180": 0.8155384659767151,
        "codebertscore_f3-180": 0.8283704519271851,
        "codebertscore_f1-60": 0.8345411419868469,
        "codebertscore_f3-60": 0.8694376349449158,
        "codebertscore_s_f1-31": 0.8575170040130615,
        "codebertscore_s_f3-31": 0.8518106937408447,
        "codebertscore_s_f1-6": 0.5960071682929993,
        "codebertscore_s_f3-6": 0.5836355090141296,
        "codebertscore_s_f1-83": 0.5104040503501892,
        "codebertscore_s_f3-83": 0.47870850563049316,
        "codebertscore_s_f1-73": 0.7048965692520142,
        "codebertscore_s_f3-73": 0.6927355527877808,
        "codebertscore_s_f1-68": 0.9897079467773438,
        "codebertscore_s_f3-68": 0.9897079467773438,
        "codebertscore_s_f1-42": 0.8367286324501038,
        "codebertscore_s_f3-42": 0.8920832872390747,
        "codebertscore_s_f1-29": 0.5920647978782654,
        "codebertscore_s_f3-29": 0.5819538831710815,
        "codebertscore_s_f1-175": 0.8706986904144287,
        "codebertscore_s_f3-175": 0.9038084149360657,
        "codebertscore_s_f1-24": 0.8989201188087463,
        "codebertscore_s_f3-24": 0.9274745583534241,
        "codebertscore_s_f1-188": 0.8273980617523193,
        "codebertscore_s_f3-188": 0.8357037901878357,
        "codebertscore_s_f1-129": 0.893532395362854,
        "codebertscore_s_f3-129": 0.9102796316146851,
        "codebertscore_s_f1-8": 0.8446010947227478,
        "codebertscore_s_f3-8": 0.8468259572982788,
        "codebertscore_s_f1-7": 0.6237390041351318,
        "codebertscore_s_f3-7": 0.5685884356498718,
        "codebertscore_s_f1-25": 0.8132720589637756,
        "codebertscore_s_f3-25": 0.8315613269805908,
        "codebertscore_s_f1-66": 0.729981005191803,
        "codebertscore_s_f3-66": 0.7385295033454895,
        "codebertscore_s_f1-70": 0.8610777854919434,
        "codebertscore_s_f3-70": 0.8867573738098145,
        "codebertscore_s_f1-165": 0.9540403485298157,
        "codebertscore_s_f3-165": 0.9401600956916809,
        "codebertscore_s_f1-194": 0.8088399767875671,
        "codebertscore_s_f3-194": 0.8065306544303894,
        "codebertscore_s_f1-180": 0.828117847442627,
        "codebertscore_s_f3-180": 0.8396709561347961,
        "codebertscore_s_f1-60": 0.8520820736885071,
        "codebertscore_s_f3-60": 0.8829885125160217,
        "gpt35_nsnr-31": 4,
        "raw_gpt35_nsnr-31": "4",
        "gpt35_nsnr-6": 0,
        "raw_gpt35_nsnr-6": "0",
        "gpt35_nsnr-83": 4,
        "raw_gpt35_nsnr-83": "4",
        "gpt35_nsnr-73": 4,
        "raw_gpt35_nsnr-73": "4",
        "gpt35_nsnr-68": 4,
        "raw_gpt35_nsnr-68": "4",
        "gpt35_nsnr-42": 4,
        "raw_gpt35_nsnr-42": "4",
        "gpt35_nsnr-29": 0,
        "raw_gpt35_nsnr-29": "0",
        "gpt35_nsnr-175": 4,
        "raw_gpt35_nsnr-175": "4",
        "gpt35_nsnr-24": 4,
        "raw_gpt35_nsnr-24": "4",
        "gpt35_nsnr-188": 4,
        "raw_gpt35_nsnr-188": "4",
        "gpt35_nsnr-129": 4,
        "raw_gpt35_nsnr-129": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 2,
        "raw_gpt35_nsnr-7": "2",
        "gpt35_nsnr-25": 4,
        "raw_gpt35_nsnr-25": "4",
        "gpt35_nsnr-66": 4,
        "raw_gpt35_nsnr-66": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-165": 4,
        "raw_gpt35_nsnr-165": "4",
        "gpt35_nsnr-194": 4,
        "raw_gpt35_nsnr-194": "4",
        "gpt35_nsnr-180": 4,
        "raw_gpt35_nsnr-180": "4",
        "gpt35_nsnr-60": 4,
        "raw_gpt35_nsnr-60": "4",
        "gpt35_nswr-31": 4,
        "raw_gpt35_nswr-31": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-83": 4,
        "raw_gpt35_nswr-83": "4",
        "gpt35_nswr-73": 3,
        "raw_gpt35_nswr-73": "3",
        "gpt35_nswr-68": 4,
        "raw_gpt35_nswr-68": "4",
        "gpt35_nswr-42": 3,
        "raw_gpt35_nswr-42": "3",
        "gpt35_nswr-29": 1,
        "raw_gpt35_nswr-29": "1",
        "gpt35_nswr-175": 4,
        "raw_gpt35_nswr-175": "4",
        "gpt35_nswr-24": 4,
        "raw_gpt35_nswr-24": "4",
        "gpt35_nswr-188": 3,
        "raw_gpt35_nswr-188": "3",
        "gpt35_nswr-129": 4,
        "raw_gpt35_nswr-129": "4",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 2,
        "raw_gpt35_nswr-7": "2",
        "gpt35_nswr-25": 4,
        "raw_gpt35_nswr-25": "4",
        "gpt35_nswr-66": 4,
        "raw_gpt35_nswr-66": "4",
        "gpt35_nswr-70": 4,
        "raw_gpt35_nswr-70": "4",
        "gpt35_nswr-165": 3,
        "raw_gpt35_nswr-165": "3",
        "gpt35_nswr-194": 4,
        "raw_gpt35_nswr-194": "4",
        "gpt35_nswr-180": 4,
        "raw_gpt35_nswr-180": "4",
        "gpt35_nswr-60": 3,
        "raw_gpt35_nswr-60": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize(8)\n    // [2, 2, 2]\n    // >>> factorize(25)\n    // [5, 5]\n    // >>> factorize(70)\n    // [2, 5, 7]\n    public static ArrayList<Integer> factorize(int n) {\n",
        "snippet": [
            "        List<Integer> fact = new ArrayList<>();\n        int i = 2;\n        while (n > 1) {\n            if (n % i == 0) {\n                fact.add(i);\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        return fact;\n    }\n}"
        ],
        "simplified": "Return list of prime factors of given integer in the order from smallest to largest. Each of the factors should be listed number of times corresponding to how many times it appeares in factorization. Input number should be equal to the product of all factors",
        "task_id": "25",
        "198": "ArrayList<Integer> f = new ArrayList<Integer>();\n        for (int i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                f.add(i);\n                n /= i;\n            }\n        }\n        return f;",
        "grade-198": {
            "execution": 1
        },
        "28": "ArrayList<Integer> factors = new ArrayList<Integer>();\n        if (n == 1) {\n            factors.add(1);\n            return factors;\n        }\n        //Assume n is even.\n        while (n % 2 == 0) {\n            factors.add(2);\n            n /= 2;\n        }\n        // n must be odd at this point.  So we can skip one element (Note i = i +2)\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            // While i divides n, print i and divide n\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        // This condition is to handle the case when n is a prime number greater than 2\n        if (n > 2)\n            factors.add(n);\n        return factors;",
        "grade-28": {
            "execution": 1
        },
        "6": "ArrayList<Integer> factors = new ArrayList<Integer>();\n        int n1 = n;\n        while (n1 % 2 == 0) {\n            factors.add(2);\n            n1 /= 2;\n        }\n        int f = 3;\n        while (f * f <= n1) {\n            if (n1 % f == 0) {\n                factors.add(f);\n                n1 /= f;\n            } else {\n                f += 2;\n            }\n        }\n        if (n1 > 1) {\n            factors.add(n1);\n        }\n        return factors;",
        "grade-6": {
            "execution": 1
        },
        "73": "ArrayList<Integer> result = new ArrayList<Integer>();\n        int i = 2;\n        while (n > 1) {\n            if (n % i == 0) {\n                result.add(i);\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        return result;",
        "grade-73": {
            "execution": 1
        },
        "65": "ArrayList<Integer> r = new ArrayList<Integer>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                while (n % i == 0) {\n                    r.add(i);\n                    n /= i;\n                }\n            }\n        }\n        return r;",
        "grade-65": {
            "execution": 0
        },
        "60": "// This solution is soooooo slow, you can do better!\n        ArrayList<Integer> factors = new ArrayList<Integer>();\n        if (n <= 1) {\n            return factors;\n        }\n        int prime = 2;\n        while (prime <= n) {\n            if (n % prime == 0) {\n                factors.add(prime);\n                n /= prime;\n            } else {\n                prime++;\n            }\n        }\n        return factors;",
        "grade-60": {
            "execution": 1
        },
        "36": "ArrayList<Integer> result = new ArrayList<Integer>();\n        // WRITE YOUR CODE HERE\n        return result;",
        "grade-36": {
            "execution": 0
        },
        "26": "ArrayList<Integer> ret = new ArrayList<Integer>();\n        for (int i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                ret.add(i);\n                n /= i;\n            }\n        }\n        return ret;",
        "grade-26": {
            "execution": 1
        },
        "165": "ArrayList<Integer> res = new ArrayList<>();\n        for (int i = 2; i * i <= n; i++) {\n            while (n % i == 0) {\n                res.add(i);\n                n /= i;\n            }\n        }\n        if (n > 1) res.add(n);\n        return res;",
        "grade-165": {
            "execution": 1
        },
        "22": "ArrayList<Integer> factors = new ArrayList<Integer>();\n        while (n % 2 == 0) {\n            factors.add(2);\n            n /= 2;\n        }\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        if (n > 2) {\n            factors.add(n);\n        }\n        return factors;",
        "grade-22": {
            "execution": 1
        },
        "184": "ArrayList<Integer> res = new ArrayList<>();\n        int i = 2;\n        while (n > 1) {\n            while (n % i == 0) {\n                res.add(i);\n                n /= i;\n            }\n            i++;\n        }\n        return res;",
        "grade-184": {
            "execution": 1
        },
        "121": "if (n == 1) {\n            return new ArrayList<Integer>();\n        }\n        int i = 2;\n        ArrayList<Integer> list = new ArrayList<Integer>();\n        while (n > 1) {\n            if (n % i == 0) {\n                list.add(i);\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        return list;",
        "grade-121": {
            "execution": 1
        },
        "8": "ArrayList<Integer> result = new ArrayList<Integer>();\n        int number = n;\n        int divisor = 2;\n        while (number > 1) {\n            while (number % divisor == 0) {\n                result.add(divisor);\n                number /= divisor;\n            }\n            divisor += 1;\n        }\n        return result;",
        "grade-8": {
            "execution": 1
        },
        "7": "ArrayList<Integer> factors = new ArrayList<Integer>();\n        if (n == 1) {\n            factors.add(1);\n            return factors;\n        }\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                factors.add(i);\n                for (int j = 2; j <= n / i; j++) {\n                    factors.add(i);\n                }\n                return factors;\n            }\n        }\n        return factors;",
        "grade-7": {
            "execution": 0
        },
        "23": "assert n > 0;\n        ArrayList<Integer> ans = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                ans.add(i);\n                n /= i;\n            }\n        }\n        return ans;",
        "grade-23": {
            "execution": 1
        },
        "58": "ArrayList<Integer> factors = new ArrayList<Integer>();\n        int x = n;\n        for (int i = 2; i <= x; i++) {\n            while (x % i == 0) {\n                factors.add(i);\n                x /= i;\n            }\n        }\n        return factors;",
        "grade-58": {
            "execution": 1
        },
        "62": "ArrayList<Integer> res = new ArrayList<>();\n        for (int i = 2; i*i <= n; i++) {\n            while (n % i == 0) {\n                res.add(i);\n                n /= i;\n            }\n        }\n        if (n > 1) res.add(n);\n        return res;",
        "grade-62": {
            "execution": 1
        },
        "148": "ArrayList<Integer> ret = new ArrayList<Integer>();\n        for (int p = 2; p <= n; p++) {\n            while (n % p == 0) {\n                ret.add(p);\n                n /= p;\n            }\n        }\n        return ret;",
        "grade-148": {
            "execution": 1
        },
        "188": "ArrayList<Integer> ret = new ArrayList<Integer>();\n        int i = 2;\n        while (n > 1) {\n            if (n % i == 0) {\n                ret.add(i);\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        return ret;",
        "grade-188": {
            "execution": 1
        },
        "172": "ArrayList<Integer> factors = new ArrayList<Integer>();\n        if (n < 2) {\n            return factors;\n        }\n        // Strategy: try to divide by 2, then 3, 5, and so on.\n        while (n > 1) {\n            int f = smallestFactor(n);\n            factors.add(f);\n            n /= f;\n        }\n        return factors;",
        "grade-172": {
            "execution": 0
        },
        "bleu-198": 0.5643542226486025,
        "bleu-28": 0.1920418039066239,
        "bleu-6": 0.23018626424812738,
        "bleu-73": 0.8269168310824178,
        "bleu-65": 0.5230126656610461,
        "bleu-60": 0.36470166538083965,
        "bleu-36": 0.0793392751627749,
        "bleu-26": 0.5643542226486025,
        "bleu-165": 0.532714128295202,
        "bleu-22": 0.3414709293064277,
        "bleu-184": 0.7235195761401532,
        "bleu-121": 0.6033967123167147,
        "bleu-8": 0.3418286547494644,
        "bleu-7": 0.326080517874657,
        "bleu-23": 0.5827734731934221,
        "bleu-58": 0.4680301385570234,
        "bleu-62": 0.532714128295202,
        "bleu-148": 0.36447335847907686,
        "bleu-188": 0.8269168310824178,
        "bleu-172": 0.2780697882677288,
        "codebleu-198": 0.611611982202288,
        "codebleu-28": 0.6768559068272971,
        "codebleu-6": 0.6564902607401976,
        "codebleu-73": 0.7939251521052254,
        "codebleu-65": 0.6358467533033367,
        "codebleu-60": 0.7341616751865061,
        "codebleu-36": 0.19245776755125263,
        "codebleu-26": 0.611611982202288,
        "codebleu-165": 0.6964750827468029,
        "codebleu-22": 0.6571306052136641,
        "codebleu-184": 0.7163373326766131,
        "codebleu-121": 0.7899172844964599,
        "codebleu-8": 0.6198811712872374,
        "codebleu-7": 0.6369042610825353,
        "codebleu-23": 0.6519932885113121,
        "codebleu-58": 0.6079233838536079,
        "codebleu-62": 0.6964750827468029,
        "codebleu-148": 0.5752593810549285,
        "codebleu-188": 0.7939251521052254,
        "codebleu-172": 0.5551183513804101,
        "chrf-198": 0.6049051684067746,
        "chrf-28": 0.44294375078240733,
        "chrf-6": 0.5496559497897986,
        "chrf-73": 0.7831758547593498,
        "chrf-65": 0.575441052284285,
        "chrf-60": 0.5640361087651726,
        "chrf-36": 0.30801889897654916,
        "chrf-26": 0.5899280900444009,
        "chrf-165": 0.587915670997659,
        "chrf-22": 0.5943724571066527,
        "chrf-184": 0.6785728861585253,
        "chrf-121": 0.7064218623785183,
        "chrf-8": 0.4450320984170599,
        "chrf-7": 0.5532100858253021,
        "chrf-23": 0.5962062847713491,
        "chrf-58": 0.621547205920661,
        "chrf-62": 0.587915670997659,
        "chrf-148": 0.4725248011165996,
        "chrf-188": 0.7966009059468194,
        "chrf-172": 0.48893848005193286,
        "rougel-198": 0.7377049180327869,
        "rougel-28": 0.36885245901639346,
        "rougel-6": 0.5380116959064328,
        "rougel-73": 0.9193548387096774,
        "rougel-65": 0.7121212121212119,
        "rougel-60": 0.6666666666666667,
        "rougel-36": 0.367816091954023,
        "rougel-26": 0.7377049180327869,
        "rougel-165": 0.6617647058823529,
        "rougel-22": 0.5662650602409639,
        "rougel-184": 0.8833333333333333,
        "rougel-121": 0.7412587412587414,
        "rougel-8": 0.6929133858267716,
        "rougel-7": 0.5939393939393939,
        "rougel-23": 0.7142857142857143,
        "rougel-58": 0.6614173228346457,
        "rougel-62": 0.6617647058823529,
        "rougel-148": 0.6721311475409835,
        "rougel-188": 0.9193548387096774,
        "rougel-172": 0.5285714285714286,
        "meteor-198": 0.7131380335497214,
        "meteor-28": 0.5543556021395357,
        "meteor-6": 0.5191118396972217,
        "meteor-73": 0.9160510926438904,
        "meteor-65": 0.719668895088698,
        "meteor-60": 0.7421180867239453,
        "meteor-36": 0.21655231560891938,
        "meteor-26": 0.7131380335497214,
        "meteor-165": 0.6674409847024709,
        "meteor-22": 0.6114934644552685,
        "meteor-184": 0.8540411617574308,
        "meteor-121": 0.8861269745570796,
        "meteor-8": 0.5892883692845462,
        "meteor-7": 0.6190620272314675,
        "meteor-23": 0.7071350814275199,
        "meteor-58": 0.6399582664526483,
        "meteor-62": 0.6674409847024709,
        "meteor-148": 0.651084203571494,
        "meteor-188": 0.9160510926438904,
        "meteor-172": 0.5613011962951248,
        "ruby-198": 0.6129032258064516,
        "ruby-28": 0.2362637362637363,
        "ruby-6": 0.42201834862385323,
        "ruby-73": 0.8870967741935484,
        "ruby-65": 0.5571428571428572,
        "ruby-60": 0.5340909090909092,
        "ruby-36": 0.24193548387096775,
        "ruby-26": 0.6129032258064516,
        "ruby-165": 0.5810810810810811,
        "ruby-22": 0.42307692307692313,
        "ruby-184": 0.8387096774193549,
        "ruby-121": 0.617283950617284,
        "ruby-8": 0.6,
        "ruby-7": 0.4563106796116505,
        "ruby-23": 0.5625,
        "ruby-58": 0.5076923076923077,
        "ruby-62": 0.5810810810810811,
        "ruby-148": 0.5483870967741935,
        "ruby-188": 0.8870967741935484,
        "ruby-172": 0.3076923076923077,
        "codebertscore_f1-198": 0.8994274735450745,
        "codebertscore_f3-198": 0.895592212677002,
        "codebertscore_f1-28": 0.7582328915596008,
        "codebertscore_f3-28": 0.8173391819000244,
        "codebertscore_f1-6": 0.8338999152183533,
        "codebertscore_f3-6": 0.8534052968025208,
        "codebertscore_f1-73": 0.9604963660240173,
        "codebertscore_f3-73": 0.9628960490226746,
        "codebertscore_f1-65": 0.8884904384613037,
        "codebertscore_f3-65": 0.8933408856391907,
        "codebertscore_f1-60": 0.8213262557983398,
        "codebertscore_f3-60": 0.8599836230278015,
        "codebertscore_f1-36": 0.719101071357727,
        "codebertscore_f3-36": 0.694314181804657,
        "codebertscore_f1-26": 0.8943741917610168,
        "codebertscore_f3-26": 0.89055997133255,
        "codebertscore_f1-165": 0.8849585652351379,
        "codebertscore_f3-165": 0.8923443555831909,
        "codebertscore_f1-22": 0.8379641175270081,
        "codebertscore_f3-22": 0.8477513790130615,
        "codebertscore_f1-184": 0.9449399709701538,
        "codebertscore_f3-184": 0.9399610757827759,
        "codebertscore_f1-121": 0.8983469009399414,
        "codebertscore_f3-121": 0.9051926732063293,
        "codebertscore_f1-8": 0.8620695471763611,
        "codebertscore_f3-8": 0.8709981441497803,
        "codebertscore_f1-7": 0.8375819325447083,
        "codebertscore_f3-7": 0.8503864407539368,
        "codebertscore_f1-23": 0.8831319212913513,
        "codebertscore_f3-23": 0.8849590420722961,
        "codebertscore_f1-58": 0.8865053057670593,
        "codebertscore_f3-58": 0.8841171860694885,
        "codebertscore_f1-62": 0.8843418955802917,
        "codebertscore_f3-62": 0.8924548625946045,
        "codebertscore_f1-148": 0.8795962929725647,
        "codebertscore_f3-148": 0.876009464263916,
        "codebertscore_f1-188": 0.9593908786773682,
        "codebertscore_f3-188": 0.9617559909820557,
        "codebertscore_f1-172": 0.8119373917579651,
        "codebertscore_f3-172": 0.8391814827919006,
        "codebertscore_s_f1-198": 0.9184157252311707,
        "codebertscore_s_f3-198": 0.9134882688522339,
        "codebertscore_s_f1-28": 0.7977117896080017,
        "codebertscore_s_f3-28": 0.8589003682136536,
        "codebertscore_s_f1-6": 0.8718382120132446,
        "codebertscore_s_f3-6": 0.8899311423301697,
        "codebertscore_s_f1-73": 0.9693524241447449,
        "codebertscore_s_f3-73": 0.972144365310669,
        "codebertscore_s_f1-65": 0.8999244570732117,
        "codebertscore_s_f3-65": 0.9042904376983643,
        "codebertscore_s_f1-60": 0.8437711000442505,
        "codebertscore_s_f3-60": 0.8812116384506226,
        "codebertscore_s_f1-36": 0.7435647249221802,
        "codebertscore_s_f3-36": 0.7187225222587585,
        "codebertscore_s_f1-26": 0.9108120799064636,
        "codebertscore_s_f3-26": 0.905872106552124,
        "codebertscore_s_f1-165": 0.9050014615058899,
        "codebertscore_s_f3-165": 0.9121906757354736,
        "codebertscore_s_f1-22": 0.8625419735908508,
        "codebertscore_s_f3-22": 0.8735184669494629,
        "codebertscore_s_f1-184": 0.9560093283653259,
        "codebertscore_s_f3-184": 0.9512724280357361,
        "codebertscore_s_f1-121": 0.9165421724319458,
        "codebertscore_s_f3-121": 0.9216998815536499,
        "codebertscore_s_f1-8": 0.8711004257202148,
        "codebertscore_s_f3-8": 0.8816965818405151,
        "codebertscore_s_f1-7": 0.8595485091209412,
        "codebertscore_s_f3-7": 0.8715371489524841,
        "codebertscore_s_f1-23": 0.9019885659217834,
        "codebertscore_s_f3-23": 0.902583122253418,
        "codebertscore_s_f1-58": 0.9041699171066284,
        "codebertscore_s_f3-58": 0.9012017846107483,
        "codebertscore_s_f1-62": 0.904331624507904,
        "codebertscore_s_f3-62": 0.9122480750083923,
        "codebertscore_s_f1-148": 0.8964225053787231,
        "codebertscore_s_f3-148": 0.8921606540679932,
        "codebertscore_s_f1-188": 0.9678981304168701,
        "codebertscore_s_f3-188": 0.9705988168716431,
        "codebertscore_s_f1-172": 0.8292554616928101,
        "codebertscore_s_f3-172": 0.8583095073699951,
        "gpt35_nsnr-198": 4,
        "raw_gpt35_nsnr-198": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-73": 4,
        "raw_gpt35_nsnr-73": "4",
        "gpt35_nsnr-65": 3,
        "raw_gpt35_nsnr-65": "3",
        "gpt35_nsnr-60": 4,
        "raw_gpt35_nsnr-60": "4",
        "gpt35_nsnr-36": 2,
        "raw_gpt35_nsnr-36": "2",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-165": 4,
        "raw_gpt35_nsnr-165": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-184": 4,
        "raw_gpt35_nsnr-184": "4",
        "gpt35_nsnr-121": 4,
        "raw_gpt35_nsnr-121": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 2,
        "raw_gpt35_nsnr-7": "2",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-58": 4,
        "raw_gpt35_nsnr-58": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-148": 4,
        "raw_gpt35_nsnr-148": "4",
        "gpt35_nsnr-188": 4,
        "raw_gpt35_nsnr-188": "4",
        "gpt35_nsnr-172": 4,
        "raw_gpt35_nsnr-172": "4",
        "gpt35_nswr-198": 3,
        "raw_gpt35_nswr-198": "3",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-73": 4,
        "raw_gpt35_nswr-73": "4",
        "gpt35_nswr-65": 3,
        "raw_gpt35_nswr-65": "3",
        "gpt35_nswr-60": 3,
        "raw_gpt35_nswr-60": "3",
        "gpt35_nswr-36": 2,
        "raw_gpt35_nswr-36": "2",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-165": 3,
        "raw_gpt35_nswr-165": "3",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-184": 4,
        "raw_gpt35_nswr-184": "4",
        "gpt35_nswr-121": 4,
        "raw_gpt35_nswr-121": "4",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 2,
        "raw_gpt35_nswr-7": "2",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-58": 3,
        "raw_gpt35_nswr-58": "3",
        "gpt35_nswr-62": 3,
        "raw_gpt35_nswr-62": "3",
        "gpt35_nswr-148": 3,
        "raw_gpt35_nswr-148": "3",
        "gpt35_nswr-188": 4,
        "raw_gpt35_nswr-188": "4",
        "gpt35_nswr-172": 3,
        "raw_gpt35_nswr-172": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You're given a list of deposit and withdrawal operations on a bank account that starts with\n    // zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    // at that point function should return True. Otherwise it should return False.\n    // >>> below_zero([1, 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n    // True\n    public static boolean belowZero(ArrayList<Integer> operations) {\n",
        "snippet": [
            "        int balance = 0;\n\n        for (int op : operations) {\n            balance += op;\n            if (balance < 0) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}"
        ],
        "simplified": "You're given a list of deposit and withdrawal operations on a bank account that starts with zero balance. Your task is to detect if at any point the balance of account fallls below zero, and at that point function should return True. Otherwise it should return False.",
        "task_id": "3",
        "153": "int x = 0;\n        for (int o : operations) {\n            x += o;\n            if (x < 0) {\n                return true;\n            }\n        }\n        return false;",
        "grade-153": {
            "execution": 1
        },
        "18": "// Iterate over the operations\n        int balance = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            balance += operations.get(i);\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;",
        "grade-18": {
            "execution": 1
        },
        "3": "int currentSum = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            currentSum += operations.get(i);\n            if (currentSum < 0) {\n                return true;\n            }\n        }\n        return false;",
        "grade-3": {
            "execution": 1
        },
        "185": "boolean below = false;\n        int balance = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            balance += operations.get(i);\n            if (balance < 0) {\n                below = true;\n                break;\n            }\n        }\n        return below;",
        "grade-185": {
            "execution": 1
        },
        "52": "int balance = 0;\n        boolean negative = false;\n        for (int i = 0; i < operations.size(); i++) {\n            balance += operations.get(i);\n            if (balance < 0) {\n                negative = true;\n                break;\n            }\n        }\n        return negative;",
        "grade-52": {
            "execution": 1
        },
        "48": "int sum = 0;\n        for (int x : operations) {\n            sum += x;\n            if (sum < 0) {\n                return true;\n            }\n        }\n        return false;",
        "grade-48": {
            "execution": 1
        },
        "41": "for (int i = 0; i < operations.size(); i++) {\n            int account = 0;\n            for (int j = 0; j <= i; j++) {\n                account += operations.get(j);\n            }\n            if (account < 0) {\n                return true;\n            }\n        }\n        return false;",
        "grade-41": {
            "execution": 1
        },
        "25": "return operations.stream().reduce(0, (acc, val) -> acc + val) < 0;",
        "grade-25": {
            "execution": 0
        },
        "16": "int balance = 0;\n        for (int op : operations) {\n            balance += op;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;",
        "grade-16": {
            "execution": 1
        },
        "173": "boolean result = false;\n        int balance = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            balance += operations.get(i);\n            if (balance < 0) {\n                result = true;\n                break;\n            }\n        }\n        return result;",
        "grade-173": {
            "execution": 1
        },
        "126": "// use sum of elements of collection to check whether it's\n        // below zero.\n        // Have a start value of zero\n        // add the integer to the start value and check if it is below zero.\n        // if it is below zero, return true.\n        int sum = 0;\n        for (int i : operations) {\n            sum += i;\n            if (sum < 0) {\n                return true;\n            }\n        }\n        return false;",
        "grade-126": {
            "execution": 1
        },
        "14": "int currentBalance = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            currentBalance += operations.get(i);\n            if (currentBalance < 0) {\n                return true;\n            }\n        }\n        return false;",
        "grade-14": {
            "execution": 1
        },
        "140": "// your code\n        return false;",
        "grade-140": {
            "execution": 0
        },
        "87": "int current_sum = 0;\n        for (int op : operations) {\n            current_sum += op;\n            if (current_sum < 0) {\n                return true;\n            }\n        }\n        return false;",
        "grade-87": {
            "execution": 1
        },
        "4": "return belowZeroHelper(operations, 0);",
        "grade-4": {
            "execution": 0
        },
        "39": "int bal = 0;\n        for (int op : operations) {\n            bal += op;\n            if (bal < 0) {\n                return true;\n            }\n        }\n        return false;",
        "grade-39": {
            "execution": 1
        },
        "44": "int sum = 0;\n        for (int i : operations) {\n            sum += i;\n            if (sum < 0) {\n                return true;\n            }\n        }\n        return false;",
        "grade-44": {
            "execution": 1
        },
        "115": "// inputs: List of integers\n        // outputs: Boolean, true if the balance of the account falls below zero at any point\n        // constraints: none\n\n        // IMPLEMENTATION\n        // Loop through the list of operations\n        // keep track of the balance using a local variable\n        // return false if balance is ever negative\n\n        int balance = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            balance += operations.get(i);\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;",
        "grade-115": {
            "execution": 1
        },
        "149": "int x = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            x += operations.get(i);\n            if (x < 0) {\n                return true;\n            }\n        }\n        return false;",
        "grade-149": {
            "execution": 1
        },
        "129": "int total = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            total += operations.get(i);\n            if (total < 0) {\n                return true;\n            }\n        }\n        return false;",
        "grade-129": {
            "execution": 1
        },
        "bleu-153": 0.5742958157603555,
        "bleu-18": 0.4491671868638562,
        "bleu-3": 0.3429349259905969,
        "bleu-185": 0.3468695169044068,
        "bleu-52": 0.32767720759579616,
        "bleu-48": 0.5742958157603555,
        "bleu-41": 0.2633989717763262,
        "bleu-25": 0.0367739210111584,
        "bleu-16": 0.9411939401248329,
        "bleu-173": 0.3468695169044068,
        "bleu-126": 0.22208203125454037,
        "bleu-14": 0.3429349259905969,
        "bleu-140": 0.004477468761653064,
        "bleu-87": 0.7317378402398451,
        "bleu-4": 0.009066120289249184,
        "bleu-39": 0.7317378402398451,
        "bleu-44": 0.5742958157603555,
        "bleu-115": 0.22332285547267564,
        "bleu-149": 0.3641583489231248,
        "bleu-129": 0.3641583489231248,
        "codebleu-153": 0.7860892144757243,
        "codebleu-18": 0.7164956962404481,
        "codebleu-3": 0.6907744937522472,
        "codebleu-185": 0.6679603919514189,
        "codebleu-52": 0.6679603919514189,
        "codebleu-48": 0.7860892144757243,
        "codebleu-41": 0.648481985988965,
        "codebleu-25": 0.23694045843912198,
        "codebleu-16": 0.8424669781317392,
        "codebleu-173": 0.6679603919514189,
        "codebleu-126": 0.751406482556163,
        "codebleu-14": 0.6907744937522472,
        "codebleu-140": 0.05629953011391203,
        "codebleu-87": 0.8116329490609286,
        "codebleu-4": 0.08345088829906248,
        "codebleu-39": 0.8116329490609286,
        "codebleu-44": 0.7860892144757243,
        "codebleu-115": 0.6893355300408817,
        "codebleu-149": 0.6907744937522472,
        "codebleu-129": 0.6907744937522472,
        "chrf-153": 0.6042554039853623,
        "chrf-18": 0.7636988792868119,
        "chrf-3": 0.5173144428676837,
        "chrf-185": 0.6407428525346869,
        "chrf-52": 0.6116503092707101,
        "chrf-48": 0.5773446316846628,
        "chrf-41": 0.5082994914169984,
        "chrf-25": 0.2073036573486519,
        "chrf-16": 0.9811910479640159,
        "chrf-173": 0.6541204026572452,
        "chrf-126": 0.4513666054670098,
        "chrf-14": 0.6747737118733936,
        "chrf-140": 0.14883258904009722,
        "chrf-87": 0.6498129393524572,
        "chrf-4": 0.18424110842878177,
        "chrf-39": 0.7725063543263961,
        "chrf-44": 0.5773446316846628,
        "chrf-115": 0.5332741422777508,
        "chrf-149": 0.5398927470525459,
        "chrf-129": 0.5436590241125696,
        "rougel-153": 0.823529411764706,
        "rougel-18": 0.6593406593406593,
        "rougel-3": 0.6136363636363636,
        "rougel-185": 0.6021505376344086,
        "rougel-52": 0.6021505376344086,
        "rougel-48": 0.823529411764706,
        "rougel-41": 0.5048543689320388,
        "rougel-25": 0.23333333333333334,
        "rougel-16": 0.9705882352941176,
        "rougel-173": 0.6021505376344086,
        "rougel-126": 0.4552845528455285,
        "rougel-14": 0.6136363636363636,
        "rougel-140": 0.14285714285714285,
        "rougel-87": 0.8823529411764706,
        "rougel-4": 0.22222222222222224,
        "rougel-39": 0.8823529411764706,
        "rougel-44": 0.823529411764706,
        "rougel-115": 0.4081632653061224,
        "rougel-149": 0.6352941176470589,
        "rougel-129": 0.6352941176470589,
        "meteor-153": 0.7952146375791697,
        "meteor-18": 0.7827493261455525,
        "meteor-3": 0.6825535277628675,
        "meteor-185": 0.6681532581217944,
        "meteor-52": 0.6681532581217944,
        "meteor-48": 0.7952146375791697,
        "meteor-41": 0.6492613363883413,
        "meteor-25": 0.2019931939718036,
        "meteor-16": 0.9479196352237104,
        "meteor-173": 0.6681532581217944,
        "meteor-126": 0.686686585304097,
        "meteor-14": 0.764266304347826,
        "meteor-140": 0.0914423740510697,
        "meteor-87": 0.8586206896551725,
        "meteor-4": 0.14756671899529042,
        "meteor-39": 0.8586206896551725,
        "meteor-44": 0.7952146375791697,
        "meteor-115": 0.6992252898156924,
        "meteor-149": 0.6881635567581788,
        "meteor-129": 0.6881635567581788,
        "ruby-153": 0.8,
        "ruby-18": 0.5,
        "ruby-3": 0.4716981132075472,
        "ruby-185": 0.4482758620689655,
        "ruby-52": 0.4482758620689655,
        "ruby-48": 0.8,
        "ruby-41": 0.3529411764705882,
        "ruby-25": 0.1428571428571429,
        "ruby-16": 0.9428571428571428,
        "ruby-173": 0.4482758620689655,
        "ruby-126": 0.2954545454545454,
        "ruby-14": 0.4716981132075472,
        "ruby-140": 0.08571428571428574,
        "ruby-87": 0.8571428571428572,
        "ruby-4": 0.1428571428571429,
        "ruby-39": 0.8571428571428572,
        "ruby-44": 0.8,
        "ruby-115": 0.25,
        "ruby-149": 0.5,
        "ruby-129": 0.5,
        "codebertscore_f1-153": 0.9439821839332581,
        "codebertscore_f3-153": 0.9439821243286133,
        "codebertscore_f1-18": 0.8679923415184021,
        "codebertscore_f3-18": 0.9115437269210815,
        "codebertscore_f1-3": 0.8778607249259949,
        "codebertscore_f3-3": 0.9053165316581726,
        "codebertscore_f1-185": 0.8420802354812622,
        "codebertscore_f3-185": 0.8724515438079834,
        "codebertscore_f1-52": 0.8504555821418762,
        "codebertscore_f3-52": 0.8825573921203613,
        "codebertscore_f1-48": 0.9492911696434021,
        "codebertscore_f3-48": 0.9492911100387573,
        "codebertscore_f1-41": 0.8389525413513184,
        "codebertscore_f3-41": 0.8700392842292786,
        "codebertscore_f1-25": 0.7035778760910034,
        "codebertscore_f3-25": 0.7040116190910339,
        "codebertscore_f1-16": 0.9953394532203674,
        "codebertscore_f3-16": 0.9953393936157227,
        "codebertscore_f1-173": 0.8466495871543884,
        "codebertscore_f3-173": 0.8762462139129639,
        "codebertscore_f1-126": 0.783365786075592,
        "codebertscore_f3-126": 0.845660924911499,
        "codebertscore_f1-14": 0.8946340680122375,
        "codebertscore_f3-14": 0.9247793555259705,
        "codebertscore_f1-140": 0.6537827849388123,
        "codebertscore_f3-140": 0.6332343220710754,
        "codebertscore_f1-87": 0.936238706111908,
        "codebertscore_f3-87": 0.9470238089561462,
        "codebertscore_f1-4": 0.6515194773674011,
        "codebertscore_f3-4": 0.6359213590621948,
        "codebertscore_f1-39": 0.9740374684333801,
        "codebertscore_f3-39": 0.9740374684333801,
        "codebertscore_f1-44": 0.9476071000099182,
        "codebertscore_f3-44": 0.9476071000099182,
        "codebertscore_f1-115": 0.7656841278076172,
        "codebertscore_f3-115": 0.8372519016265869,
        "codebertscore_f1-149": 0.8823544979095459,
        "codebertscore_f3-149": 0.9072688817977905,
        "codebertscore_f1-129": 0.8883717656135559,
        "codebertscore_f3-129": 0.9135014414787292,
        "codebertscore_s_f1-153": 0.9494102597236633,
        "codebertscore_s_f3-153": 0.9493874907493591,
        "codebertscore_s_f1-18": 0.8833011984825134,
        "codebertscore_s_f3-18": 0.9257151484489441,
        "codebertscore_s_f1-3": 0.8851033449172974,
        "codebertscore_s_f3-3": 0.9097210764884949,
        "codebertscore_s_f1-185": 0.8618907332420349,
        "codebertscore_s_f3-185": 0.8933092951774597,
        "codebertscore_s_f1-52": 0.8658486604690552,
        "codebertscore_s_f3-52": 0.8963122367858887,
        "codebertscore_s_f1-48": 0.9492515921592712,
        "codebertscore_s_f3-48": 0.9492515325546265,
        "codebertscore_s_f1-41": 0.8515364527702332,
        "codebertscore_s_f3-41": 0.8792545795440674,
        "codebertscore_s_f1-25": 0.7289431691169739,
        "codebertscore_s_f3-25": 0.730714738368988,
        "codebertscore_s_f1-16": 0.9978575706481934,
        "codebertscore_s_f3-16": 0.9978574514389038,
        "codebertscore_s_f1-173": 0.8664573431015015,
        "codebertscore_s_f3-173": 0.8967427015304565,
        "codebertscore_s_f1-126": 0.8016257286071777,
        "codebertscore_s_f3-126": 0.8613349199295044,
        "codebertscore_s_f1-14": 0.9058449268341064,
        "codebertscore_s_f3-14": 0.9336460828781128,
        "codebertscore_s_f1-140": 0.6731091737747192,
        "codebertscore_s_f3-140": 0.6582587361335754,
        "codebertscore_s_f1-87": 0.9368796348571777,
        "codebertscore_s_f3-87": 0.9490978121757507,
        "codebertscore_s_f1-4": 0.7130988836288452,
        "codebertscore_s_f3-4": 0.6964477300643921,
        "codebertscore_s_f1-39": 0.973295271396637,
        "codebertscore_s_f3-39": 0.9732953310012817,
        "codebertscore_s_f1-44": 0.948420524597168,
        "codebertscore_s_f3-44": 0.948420524597168,
        "codebertscore_s_f1-115": 0.786984384059906,
        "codebertscore_s_f3-115": 0.8630038499832153,
        "codebertscore_s_f1-149": 0.8971768021583557,
        "codebertscore_s_f3-149": 0.9177076816558838,
        "codebertscore_s_f1-129": 0.8969092965126038,
        "codebertscore_s_f3-129": 0.9170954823493958,
        "gpt35_nsnr-153": 4,
        "raw_gpt35_nsnr-153": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-185": 4,
        "raw_gpt35_nsnr-185": "4",
        "gpt35_nsnr-52": 4,
        "raw_gpt35_nsnr-52": "4",
        "gpt35_nsnr-48": 4,
        "raw_gpt35_nsnr-48": "4",
        "gpt35_nsnr-41": 4,
        "raw_gpt35_nsnr-41": "4",
        "gpt35_nsnr-25": 4,
        "raw_gpt35_nsnr-25": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-173": 4,
        "raw_gpt35_nsnr-173": "4",
        "gpt35_nsnr-126": 4,
        "raw_gpt35_nsnr-126": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-140": 0,
        "raw_gpt35_nsnr-140": "3 - The code snippet correctly defines the method signature and returns a boolean value. However, it does not implement the required functionality of detecting if the balance falls below zero.",
        "gpt35_nsnr-87": 4,
        "raw_gpt35_nsnr-87": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-39": 4,
        "raw_gpt35_nsnr-39": "4",
        "gpt35_nsnr-44": 4,
        "raw_gpt35_nsnr-44": "4",
        "gpt35_nsnr-115": 4,
        "raw_gpt35_nsnr-115": "4",
        "gpt35_nsnr-149": 4,
        "raw_gpt35_nsnr-149": "4",
        "gpt35_nsnr-129": 4,
        "raw_gpt35_nsnr-129": "4",
        "gpt35_nswr-153": 4,
        "raw_gpt35_nswr-153": "4",
        "gpt35_nswr-18": 4,
        "raw_gpt35_nswr-18": "4",
        "gpt35_nswr-3": 4,
        "raw_gpt35_nswr-3": "4",
        "gpt35_nswr-185": 4,
        "raw_gpt35_nswr-185": "4",
        "gpt35_nswr-52": 4,
        "raw_gpt35_nswr-52": "4",
        "gpt35_nswr-48": 4,
        "raw_gpt35_nswr-48": "4",
        "gpt35_nswr-41": 4,
        "raw_gpt35_nswr-41": "4",
        "gpt35_nswr-25": 3,
        "raw_gpt35_nswr-25": "3",
        "gpt35_nswr-16": 4,
        "raw_gpt35_nswr-16": "4",
        "gpt35_nswr-173": 4,
        "raw_gpt35_nswr-173": "4",
        "gpt35_nswr-126": 4,
        "raw_gpt35_nswr-126": "4",
        "gpt35_nswr-14": 4,
        "raw_gpt35_nswr-14": "4",
        "gpt35_nswr-140": 4,
        "raw_gpt35_nswr-140": "4",
        "gpt35_nswr-87": 4,
        "raw_gpt35_nswr-87": "4",
        "gpt35_nswr-4": 4,
        "raw_gpt35_nswr-4": "4",
        "gpt35_nswr-39": 4,
        "raw_gpt35_nswr-39": "4",
        "gpt35_nswr-44": 4,
        "raw_gpt35_nswr-44": "4",
        "gpt35_nswr-115": 4,
        "raw_gpt35_nswr-115": "4",
        "gpt35_nswr-149": 4,
        "raw_gpt35_nswr-149": "4",
        "gpt35_nswr-129": 4,
        "raw_gpt35_nswr-129": "4"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that returns True if the object q will fly, and False otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // will_it_fly([1, 2], 5) \u279e False \n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // will_it_fly([3, 2, 3], 1) \u279e False\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // will_it_fly([3, 2, 3], 9) \u279e True\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // will_it_fly([3], 5) \u279e True\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    public static boolean willItFly(ArrayList<Integer> q, int w) {\n",
        "snippet": [
            "        if (q.stream().reduce(0, Integer::sum) > w) {\n            return false;\n        }\n        int i = 0, j = q.size() - 1;\n        while (i < j) {\n            if (!Objects.equals(q.get(i), q.get(j))) {\n                return false;\n            }\n            i += 1;\n            j -= 1;\n        }\n        return true;\n    }\n}"
        ],
        "simplified": "Write a function that returns True if the object q will fly, and False otherwise. The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.",
        "task_id": "72",
        "174": "return q.stream().mapToInt(Integer::intValue).sum() <= w &&\n            IntStream.range(0, q.size()/2).map(i -> q.get(i) == q.get(q.size() - 1 - i) ? 1 : 0).sum() == q.size()/2;",
        "grade-174": {
            "execution": 1
        },
        "30": "// make sure there are only positive numbers\n        // if (q.stream().anyMatch( x -> x < 0)) {\n        //     return false;\n        // }\n        return q.stream().mapToInt( x -> x).sum() <= w &&\n            IntStream.range(0, q.size() / 2).allMatch( i -> q.get(i) == q.get(q.size() - 1 - i));",
        "grade-30": {
            "execution": 1
        },
        "6": "int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n            sum += q.get(i);\n        }\n        if (sum > w) {\n            return false;\n        }\n        boolean isPalindrome = true;\n        for (int i = 0; i < q.size() / 2; i++) {\n            if (q.get(i) != q.get(q.size() - 1 - i)) {\n                isPalindrome = false;\n            }\n        }\n        return isPalindrome;",
        "grade-6": {
            "execution": 1
        },
        "72": "if (q.size() == 1) return true;\n      int sum = 0;\n      for (int i = 0; i < q.size(); i++) {\n        sum += q.get(i);\n      }\n      if (sum > w) return false;\n      int first = 0;\n      int last = q.size() - 1;\n      while (first < last) {\n        if (q.get(first).intValue() != q.get(last).intValue()) return false;\n        first++;\n        last--;\n      }\n      return true;",
        "grade-72": {
            "execution": 1
        },
        "64": "Integer length = q.size();\n        Integer sum = 0;\n        Integer mid = (length - 1) / 2;\n        Integer i = 0;\n        for (Integer e : q) {\n            sum += e;\n        }\n        if (sum > w) {\n            return false;\n        }\n        if (length % 2 == 0) {\n            while (i < mid) {\n                if (q.get(i) != q.get(length - 1 - i)) {\n                    return false;\n                }\n                i++;\n            }\n        } else {\n            while (i < mid) {\n                if (q.get(i) != q.get(length - 1 - i)) {\n                    return false;\n                }\n                i++;\n            }\n        }\n        return true;",
        "grade-64": {
            "execution": 0
        },
        "59": "return w >= q.stream().reduce(0, Integer::sum) && Problem.isPalindrome(q);",
        "grade-59": {
            "execution": 0
        },
        "37": "return q.stream().reduce(0, (a, b) -> a + b) <= w && isPalindrome(q);",
        "grade-37": {
            "execution": 0
        },
        "27": "return true;",
        "grade-27": {
            "execution": 0
        },
        "184": "ArrayList<Integer> copy = new ArrayList<Integer>(q);\n        Collections.reverse(copy);\n        return q.equals(copy) && q.stream().mapToInt(i -> i).sum() <= w;",
        "grade-184": {
            "execution": 1
        },
        "148": "int weight = 0;\n        for (int i = 0; i < q.size(); i++) {\n            weight += q.get(i);\n        }\n        if (weight > w) {\n            return false;\n        }\n        for (int i = 0; i < q.size() / 2; i++) {\n            if (q.get(i) != q.get(q.size() - 1 - i)) {\n                return false;\n            }\n        }\n        return true;",
        "grade-148": {
            "execution": 1
        },
        "23": "int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n            sum += q.get(i);\n        }\n        if (sum > w) {\n            return false;\n        }\n        if (isPalindrome(q)) {\n            return true;\n        }\n        return false;",
        "grade-23": {
            "execution": 0
        },
        "160": "int sum = 0;\n        ArrayList<Integer> q_reversed = (ArrayList<Integer>) q.clone();\n        Collections.reverse(q_reversed);\n        return q.equals(q_reversed) && q.stream().mapToInt(i -> i).sum() <= w;",
        "grade-160": {
            "execution": 1
        },
        "112": "int s = 0;\n        for (int i = 0; i < q.size(); i++) s += q.get(i);\n        boolean balanced = true;\n        for (int i = 0; i < q.size()/2; i++) {\n            if (q.get(i) != q.get(q.size()-1-i)) {\n                balanced = false;\n                break;\n            }\n        }\n        return balanced && s <= w;",
        "grade-112": {
            "execution": 1
        },
        "8": "int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n            sum += q.get(i);\n        }\n        if (sum > w) {\n            return false;\n        }\n        for (int i = 0; i < q.size() / 2; i++) {\n            if (q.get(i) != q.get(q.size() - 1 - i)) {\n                return false;\n            }\n        }\n        return true;",
        "grade-8": {
            "execution": 1
        },
        "7": "return q.size() == 1 || q.equals(reverse(q)) && sum(q) <= w;",
        "grade-7": {
            "execution": 0
        },
        "24": "return (q.equals(reverse(q)) && sum(q) <= w);",
        "grade-24": {
            "execution": 0
        },
        "57": "// A palindrome is a word that is the same forwards and backwards.\n        // If a list is a palindrome, it can be written the same way forwards and backwards. For example, [4, 7, 1, 2, 1, 7, 4] is a palindrome.\n        // We should compute the sum of the integers in the list. If the sum is less than or equal to the maximum possible weight, then we should return True. Otherwise, we should return False.\n        if (q.isEmpty()) return false;\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n            sum += q.get(i);\n        }\n        if (sum > w) return false;\n        // Reverse the list, and compare it to itself. If it's the same, it's a palindrome. If it's not, it's not a palindrome.\n        // Use Collections.reverse(), which will reverse the list.\n        // Use the Collections.equals() method, which will check if two collections are equal.\n        // If the list is a palindrome, and the sum is less than or equal to the maximum possible weight, then the list is balanced and the sum is less than or equal to the maximum possible weight.\n        // If the list is not a palindrome, and the sum is greater than the maximum possible weight, then the list is unbalanced and the sum is greater than the maximum possible weight.\n        // Otherwise, the list is balanced and the sum is less than or equal to the maximum possible weight.\n        ArrayList<Integer> reversed = new ArrayList<Integer>(q);\n        Collections.reverse(reversed);\n        return reversed.equals(q);",
        "grade-57": {
            "execution": 1
        },
        "61": "boolean result = true;\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n            sum += q.get(i);\n        }\n        for (int i = 0; i < q.size() / 2; i++) {\n            if (q.get(i) != q.get(q.size() - 1 - i)) {\n                result = false;\n            }\n        }\n        if (sum > w) {\n            result = false;\n        }\n        return result;",
        "grade-61": {
            "execution": 1
        },
        "136": "// Check for the palindrome\n        for (int i = 0; i < q.size() / 2; i++) {\n            if (q.get(i) != q.get(q.size() - 1 - i)) {\n                return false;\n            }\n        }\n        // Sum up the numbers\n        Integer sum = 0;\n        for (Integer integer : q) {\n            sum += integer;\n        }\n        // Check if the sum is less than or equal to the weight\n        return sum <= w;",
        "grade-136": {
            "execution": 1
        },
        "163": "int n = q.size();\n        if (n == 1) return true;\n        for (int i = 0; i < n/2; i++)\n            if (q.get(i) != q.get(n-i-1)) return false;\n        return IntStream.range(0,n).map(i -> q.get(i)).sum() <= w;",
        "grade-163": {
            "execution": 1
        },
        "bleu-174": 0.27738987423190314,
        "bleu-30": 0.2512965982826682,
        "bleu-6": 0.3178186712930732,
        "bleu-72": 0.2939873790044582,
        "bleu-64": 0.2819870273428807,
        "bleu-59": 0.0707816792862942,
        "bleu-37": 0.06290692394131508,
        "bleu-27": 2.543665647376924e-13,
        "bleu-184": 0.08972425736012166,
        "bleu-148": 0.3907683302343047,
        "bleu-23": 0.29128011784975905,
        "bleu-160": 0.10200773898459158,
        "bleu-112": 0.26826429305917443,
        "bleu-8": 0.39213706688072014,
        "bleu-7": 0.03254666129663144,
        "bleu-24": 0.007542090771093911,
        "bleu-57": 0.06586957935839578,
        "bleu-61": 0.2927279018417766,
        "bleu-136": 0.3031813893595092,
        "bleu-163": 0.27972164924059195,
        "codebleu-174": 0.5097788604045793,
        "codebleu-30": 0.5598695543368494,
        "codebleu-6": 0.6443610824818492,
        "codebleu-72": 0.6543822397736753,
        "codebleu-64": 0.6677839563510403,
        "codebleu-59": 0.19271482119274064,
        "codebleu-37": 0.18184846157212795,
        "codebleu-27": 0.02099737533248199,
        "codebleu-184": 0.3360211468522267,
        "codebleu-148": 0.6521917501294342,
        "codebleu-23": 0.4578175896507078,
        "codebleu-160": 0.4094575439138198,
        "codebleu-112": 0.5890539206034348,
        "codebleu-8": 0.6537091801879146,
        "codebleu-7": 0.15588848668351082,
        "codebleu-24": 0.11154041823685913,
        "codebleu-57": 0.6021542087175551,
        "codebleu-61": 0.6258395715570801,
        "codebleu-136": 0.5764751007079038,
        "codebleu-163": 0.6022625825665555,
        "chrf-174": 0.31853144726493204,
        "chrf-30": 0.35830345534816455,
        "chrf-6": 0.40371768102521943,
        "chrf-72": 0.4469967847010085,
        "chrf-64": 0.45948401499727887,
        "chrf-59": 0.2772186652003668,
        "chrf-37": 0.18994553822042629,
        "chrf-27": 0.06642686077918752,
        "chrf-184": 0.23985408537842504,
        "chrf-148": 0.4594957039397294,
        "chrf-23": 0.4276019835276248,
        "chrf-160": 0.2636076249101625,
        "chrf-112": 0.32150132974357215,
        "chrf-8": 0.47098090347665356,
        "chrf-7": 0.15114433188762394,
        "chrf-24": 0.11259325647224745,
        "chrf-57": 0.20309630938729092,
        "chrf-61": 0.3863272670991699,
        "chrf-136": 0.3844571830745779,
        "chrf-163": 0.3818808420587158,
        "rougel-174": 0.43820224719101125,
        "rougel-30": 0.42,
        "rougel-6": 0.504950495049505,
        "rougel-72": 0.5420560747663551,
        "rougel-64": 0.4873949579831932,
        "rougel-59": 0.3361344537815126,
        "rougel-37": 0.29268292682926833,
        "rougel-27": 0.06451612903225806,
        "rougel-184": 0.3013698630136986,
        "rougel-148": 0.5492227979274612,
        "rougel-23": 0.4183006535947712,
        "rougel-160": 0.31168831168831174,
        "rougel-112": 0.4536082474226804,
        "rougel-8": 0.5492227979274612,
        "rougel-7": 0.2833333333333333,
        "rougel-24": 0.2321428571428571,
        "rougel-57": 0.17294900221729492,
        "rougel-61": 0.47,
        "rougel-136": 0.422680412371134,
        "rougel-163": 0.4088397790055248,
        "meteor-174": 0.359278768578701,
        "meteor-30": 0.38991334074342143,
        "meteor-6": 0.5778191643598808,
        "meteor-72": 0.5070775104528308,
        "meteor-64": 0.6077384859385031,
        "meteor-59": 0.19644338498212158,
        "meteor-37": 0.18713105491096177,
        "meteor-27": 0.03621702883695504,
        "meteor-184": 0.2304829640826145,
        "meteor-148": 0.6285833554111018,
        "meteor-23": 0.4334384141319475,
        "meteor-160": 0.27874860924267303,
        "meteor-112": 0.5072779770305439,
        "meteor-8": 0.6348843144675121,
        "meteor-7": 0.18174285714285718,
        "meteor-24": 0.13127929895589177,
        "meteor-57": 0.3754979030985999,
        "meteor-61": 0.4812047101449276,
        "meteor-136": 0.4452384343480119,
        "meteor-163": 0.42513196602006986,
        "ruby-174": 0.2666666666666667,
        "ruby-30": 0.24545454545454548,
        "ruby-6": 0.3125,
        "ruby-72": 0.3870967741935484,
        "ruby-64": 0.31081081081081086,
        "ruby-59": 0.19999999999999996,
        "ruby-37": 0.19999999999999996,
        "ruby-27": 0.033333333333333326,
        "ruby-184": 0.16666666666666663,
        "ruby-148": 0.3203883495145631,
        "ruby-23": 0.3222222222222222,
        "ruby-160": 0.18888888888888888,
        "ruby-112": 0.2692307692307693,
        "ruby-8": 0.3203883495145631,
        "ruby-7": 0.1777777777777778,
        "ruby-24": 0.1444444444444445,
        "ruby-57": 0.08310249307479223,
        "ruby-61": 0.31818181818181823,
        "ruby-136": 0.1826923076923077,
        "ruby-163": 0.15384615384615385,
        "codebertscore_f1-174": 0.7644339799880981,
        "codebertscore_f3-174": 0.7442998886108398,
        "codebertscore_f1-30": 0.7536544799804688,
        "codebertscore_f3-30": 0.7696794867515564,
        "codebertscore_f1-6": 0.7721221446990967,
        "codebertscore_f3-6": 0.7761102318763733,
        "codebertscore_f1-72": 0.8367961049079895,
        "codebertscore_f3-72": 0.8314239382743835,
        "codebertscore_f1-64": 0.7933242321014404,
        "codebertscore_f3-64": 0.7977403998374939,
        "codebertscore_f1-59": 0.7322846055030823,
        "codebertscore_f3-59": 0.6966463923454285,
        "codebertscore_f1-37": 0.7231296300888062,
        "codebertscore_f3-37": 0.6987371444702148,
        "codebertscore_f1-27": 0.5338335037231445,
        "codebertscore_f3-27": 0.4789637625217438,
        "codebertscore_f1-184": 0.7072789669036865,
        "codebertscore_f3-184": 0.6955430507659912,
        "codebertscore_f1-148": 0.8031948208808899,
        "codebertscore_f3-148": 0.7917778491973877,
        "codebertscore_f1-23": 0.7690595984458923,
        "codebertscore_f3-23": 0.7552641034126282,
        "codebertscore_f1-160": 0.7099040746688843,
        "codebertscore_f3-160": 0.7065279483795166,
        "codebertscore_f1-112": 0.7861806154251099,
        "codebertscore_f3-112": 0.776370644569397,
        "codebertscore_f1-8": 0.8078110814094543,
        "codebertscore_f3-8": 0.7959372997283936,
        "codebertscore_f1-7": 0.7130399346351624,
        "codebertscore_f3-7": 0.6735993027687073,
        "codebertscore_f1-24": 0.6935744285583496,
        "codebertscore_f3-24": 0.6483469009399414,
        "codebertscore_f1-57": 0.6773644089698792,
        "codebertscore_f3-57": 0.7382462620735168,
        "codebertscore_f1-61": 0.7964314818382263,
        "codebertscore_f3-61": 0.7868817448616028,
        "codebertscore_f1-136": 0.7626222968101501,
        "codebertscore_f3-136": 0.782183825969696,
        "codebertscore_f1-163": 0.7981787323951721,
        "codebertscore_f3-163": 0.7937308549880981,
        "codebertscore_s_f1-174": 0.9391642808914185,
        "codebertscore_s_f3-174": 0.9361687898635864,
        "codebertscore_s_f1-30": 0.9293107390403748,
        "codebertscore_s_f3-30": 0.9396684169769287,
        "codebertscore_s_f1-6": 0.9335018396377563,
        "codebertscore_s_f3-6": 0.9412756562232971,
        "codebertscore_s_f1-72": 0.9488028883934021,
        "codebertscore_s_f3-72": 0.9537690877914429,
        "codebertscore_s_f1-64": 0.9314354062080383,
        "codebertscore_s_f3-64": 0.9413878917694092,
        "codebertscore_s_f1-59": 0.9494404792785645,
        "codebertscore_s_f3-59": 0.9310705065727234,
        "codebertscore_s_f1-37": 0.9439626932144165,
        "codebertscore_s_f3-37": 0.92841637134552,
        "codebertscore_s_f1-27": 0.9504709243774414,
        "codebertscore_s_f3-27": 0.9193772673606873,
        "codebertscore_s_f1-184": 0.9345434904098511,
        "codebertscore_s_f3-184": 0.9240285754203796,
        "codebertscore_s_f1-148": 0.9456797242164612,
        "codebertscore_s_f3-148": 0.9453707337379456,
        "codebertscore_s_f1-23": 0.941210925579071,
        "codebertscore_s_f3-23": 0.9335412979125977,
        "codebertscore_s_f1-160": 0.9267498254776001,
        "codebertscore_s_f3-160": 0.9249993562698364,
        "codebertscore_s_f1-112": 0.9418507218360901,
        "codebertscore_s_f3-112": 0.9422988295555115,
        "codebertscore_s_f1-8": 0.946389377117157,
        "codebertscore_s_f3-8": 0.9465619921684265,
        "codebertscore_s_f1-7": 0.9460497498512268,
        "codebertscore_s_f3-7": 0.9245764017105103,
        "codebertscore_s_f1-24": 0.9485841989517212,
        "codebertscore_s_f3-24": 0.9239954352378845,
        "codebertscore_s_f1-57": 0.8665890097618103,
        "codebertscore_s_f3-57": 0.921723484992981,
        "codebertscore_s_f1-61": 0.9418717622756958,
        "codebertscore_s_f3-61": 0.9439498782157898,
        "codebertscore_s_f1-136": 0.9300980567932129,
        "codebertscore_s_f3-136": 0.939078152179718,
        "codebertscore_s_f1-163": 0.9410536885261536,
        "codebertscore_s_f3-163": 0.9424548149108887,
        "gpt35_nsnr-174": 4,
        "raw_gpt35_nsnr-174": "4",
        "gpt35_nsnr-30": 4,
        "raw_gpt35_nsnr-30": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-72": 4,
        "raw_gpt35_nsnr-72": "4",
        "gpt35_nsnr-64": 4,
        "raw_gpt35_nsnr-64": "4",
        "gpt35_nsnr-59": 3,
        "raw_gpt35_nsnr-59": "3",
        "gpt35_nsnr-37": 3,
        "raw_gpt35_nsnr-37": "3",
        "gpt35_nsnr-27": 2,
        "raw_gpt35_nsnr-27": "2",
        "gpt35_nsnr-184": 4,
        "raw_gpt35_nsnr-184": "4",
        "gpt35_nsnr-148": 4,
        "raw_gpt35_nsnr-148": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-160": 4,
        "raw_gpt35_nsnr-160": "4",
        "gpt35_nsnr-112": 4,
        "raw_gpt35_nsnr-112": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-24": 4,
        "raw_gpt35_nsnr-24": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-61": 4,
        "raw_gpt35_nsnr-61": "4",
        "gpt35_nsnr-136": 4,
        "raw_gpt35_nsnr-136": "4",
        "gpt35_nsnr-163": 3,
        "raw_gpt35_nsnr-163": "3",
        "gpt35_nswr-174": 3,
        "raw_gpt35_nswr-174": "3",
        "gpt35_nswr-30": 3,
        "raw_gpt35_nswr-30": "3",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-72": 3,
        "raw_gpt35_nswr-72": "3",
        "gpt35_nswr-64": 3,
        "raw_gpt35_nswr-64": "3",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3",
        "gpt35_nswr-37": 3,
        "raw_gpt35_nswr-37": "3",
        "gpt35_nswr-27": 2,
        "raw_gpt35_nswr-27": "2",
        "gpt35_nswr-184": 3,
        "raw_gpt35_nswr-184": "3",
        "gpt35_nswr-148": 4,
        "raw_gpt35_nswr-148": "4",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-160": 3,
        "raw_gpt35_nswr-160": "3",
        "gpt35_nswr-112": 4,
        "raw_gpt35_nswr-112": "4",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-24": 2,
        "raw_gpt35_nswr-24": "2",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-61": 3,
        "raw_gpt35_nswr-61": "3",
        "gpt35_nswr-136": 3,
        "raw_gpt35_nswr-136": "3",
        "gpt35_nswr-163": 3,
        "raw_gpt35_nswr-163": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Task\n    // Write a function that takes a string as input and returns the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n    // digitSum(\"\") => 0\n    // digitSum(\"abAB\") => 131\n    // digitSum(\"abcCd\") => 67\n    // digitSum(\"helloE\") => 69\n    // digitSum(\"woArBld\") => 131\n    // digitSum(\"aAaaaXa\") => 153\n    public static int digitSum(String s) {\n",
        "snippet": [
            "        int sum = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}"
        ],
        "simplified": "Task Write a function that takes a string as input and returns the sum of the upper characters only' ASCII codes.",
        "task_id": "66",
        "197": "return Arrays.stream(s.split(\"\")).mapToInt(ch -> ch.charAt(0)).sum();",
        "grade-197": {
            "execution": 0
        },
        "28": "// Your code here\n        return 0;",
        "grade-28": {
            "execution": 0
        },
        "6": "int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            sum += Character.isUpperCase(s.charAt(i)) ? s.charAt(i) : 0;\n        }\n        return sum;",
        "grade-6": {
            "execution": 1
        },
        "75": "// Write your code here\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sum += (int) c;\n            }\n        }\n        return sum;",
        "grade-75": {
            "execution": 1
        },
        "66": "int res = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            int a = (int) c;\n            if (a > 64 && a < 91) {\n                res += a;\n            }\n        }\n        return res;",
        "grade-66": {
            "execution": 1
        },
        "60": "return s.codePoints().filter(Character::isUpperCase).sum();",
        "grade-60": {
            "execution": 1
        },
        "35": "return s.chars().map(x -> x <= 90 ? x : 0).sum();",
        "grade-35": {
            "execution": 0
        },
        "26": "int result = 0;\n        for (int i = 0; i < s.length(); i++) {\n            result += (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') ? s.charAt(i) : 0;\n        }\n        return result;",
        "grade-26": {
            "execution": 1
        },
        "162": "return s.chars().map(c -> c > 64 && c < 91 ? c : 0).sum();",
        "grade-162": {
            "execution": 1
        },
        "22": "return 0;",
        "grade-22": {
            "execution": 0
        },
        "176": "// Write your code here\n        return s.chars().filter(i -> (i >= 65 && i <= 90)).sum();",
        "grade-176": {
            "execution": 1
        },
        "120": "int ans = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c)) {\n                ans += (int) c;\n            }\n        }\n        return ans;",
        "grade-120": {
            "execution": 1
        },
        "8": "return (int)IntStream.range(0, s.length())\n                           .mapToObj(s::charAt)\n                           .filter(Character::isUpperCase)\n                           .reduce(0, (a,b) -> a + b);",
        "grade-8": {
            "execution": 0
        },
        "7": "int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i))) {\n                sum += (int) s.charAt(i);\n            }\n        }\n        return sum;",
        "grade-7": {
            "execution": 1
        },
        "23": "var c = s.toCharArray();\n        int r = 0;\n        for (char k : c) {\n            if (Character.isUpperCase(k)) {\n                r += (int) k;\n            }\n        }\n        return r;",
        "grade-23": {
            "execution": 1
        },
        "57": "return s.chars().map(c -> c >= 65 && c <= 90 ? c : 0).sum();",
        "grade-57": {
            "execution": 1
        },
        "63": "return s.chars().map(i -> (i >= 65 && i <= 90) ? i : 0).sum();",
        "grade-63": {
            "execution": 1
        },
        "148": "return (int)s.chars().map(i -> Character.isUpperCase(i) ? i : 0).sum();",
        "grade-148": {
            "execution": 1
        },
        "182": "return s.chars().map(c -> (c >= 65 && c <= 90) ? c : 0).sum();",
        "grade-182": {
            "execution": 1
        },
        "167": "int sum = 0;\n        for (char c : s.toCharArray()) {\n            if (c > 64 && c < 91) {\n                sum += c;\n            }\n        }\n        return sum;",
        "grade-167": {
            "execution": 1
        },
        "bleu-197": 0.03973617507331658,
        "bleu-28": 0.00153865813800282,
        "bleu-6": 0.3193157502957164,
        "bleu-75": 0.4081710375580155,
        "bleu-66": 0.1393640231732556,
        "bleu-60": 0.04802164311287432,
        "bleu-35": 0.029568747706723162,
        "bleu-26": 0.08955590288565625,
        "bleu-162": 0.03887319115204159,
        "bleu-22": 1.0202820454884362e-06,
        "bleu-176": 0.037368082476418506,
        "bleu-120": 0.3411914195485625,
        "bleu-8": 0.06337012549241523,
        "bleu-7": 0.39915823582535814,
        "bleu-23": 0.4927180065205621,
        "bleu-57": 0.040844580691734425,
        "bleu-63": 0.03441253706271813,
        "bleu-148": 0.15204899014302062,
        "bleu-182": 0.042531518488994155,
        "bleu-167": 0.7328069081384854,
        "codebleu-197": 0.3106602115616435,
        "codebleu-28": 0.07004370066070711,
        "codebleu-6": 0.5934770238141543,
        "codebleu-75": 0.6316487413998036,
        "codebleu-66": 0.5985778297292031,
        "codebleu-60": 0.23449097931189028,
        "codebleu-35": 0.26782211194119604,
        "codebleu-26": 0.5501655951685174,
        "codebleu-162": 0.29315472980562657,
        "codebleu-22": 0.03448391134002896,
        "codebleu-176": 0.3407128754970054,
        "codebleu-120": 0.6170750611381163,
        "codebleu-8": 0.40697447886226373,
        "codebleu-7": 0.6272978979741991,
        "codebleu-23": 0.6799746408161524,
        "codebleu-57": 0.29315472980562657,
        "codebleu-63": 0.31758956698352836,
        "codebleu-148": 0.37740207913452756,
        "codebleu-182": 0.32384869168623004,
        "codebleu-167": 0.6511649162940644,
        "chrf-197": 0.19724413754453846,
        "chrf-28": 0.08551855460783196,
        "chrf-6": 0.5610931807187086,
        "chrf-75": 0.6508130855224978,
        "chrf-66": 0.2709617391977678,
        "chrf-60": 0.3348471727319736,
        "chrf-35": 0.13432093766772632,
        "chrf-26": 0.23932349867863778,
        "chrf-162": 0.14333444240490958,
        "chrf-22": 0.0581461205373492,
        "chrf-176": 0.17625920049119465,
        "chrf-120": 0.5288314637667156,
        "chrf-8": 0.3228305782919966,
        "chrf-7": 0.62858414168529,
        "chrf-23": 0.6579903988908531,
        "chrf-57": 0.14685313563118588,
        "chrf-63": 0.1439201771431797,
        "chrf-148": 0.37218699476749173,
        "chrf-182": 0.15248393705440744,
        "chrf-167": 0.6904017267094202,
        "rougel-197": 0.33766233766233766,
        "rougel-28": 0.07843137254901962,
        "rougel-6": 0.52,
        "rougel-75": 0.6363636363636362,
        "rougel-66": 0.4403669724770642,
        "rougel-60": 0.36923076923076914,
        "rougel-35": 0.2608695652173913,
        "rougel-26": 0.3859649122807017,
        "rougel-162": 0.273972602739726,
        "rougel-22": 0.08695652173913045,
        "rougel-176": 0.25316455696202533,
        "rougel-120": 0.6153846153846153,
        "rougel-8": 0.32653061224489793,
        "rougel-7": 0.6285714285714286,
        "rougel-23": 0.6086956521739131,
        "rougel-57": 0.29333333333333333,
        "rougel-63": 0.2597402597402597,
        "rougel-148": 0.4210526315789474,
        "rougel-182": 0.28571428571428575,
        "rougel-167": 0.8095238095238095,
        "meteor-197": 0.22565320665083136,
        "meteor-28": 0.03797468354430379,
        "meteor-6": 0.561491243309425,
        "meteor-75": 0.7178343929613042,
        "meteor-66": 0.4208609271523178,
        "meteor-60": 0.299574453684825,
        "meteor-35": 0.1937046004842615,
        "meteor-26": 0.2838427947598253,
        "meteor-162": 0.21582733812949642,
        "meteor-22": 0.03846153846153846,
        "meteor-176": 0.20094562647754136,
        "meteor-120": 0.621118804664723,
        "meteor-8": 0.3223233455080447,
        "meteor-7": 0.6538430071360392,
        "meteor-23": 0.7328224579650316,
        "meteor-57": 0.23866348448687352,
        "meteor-63": 0.22565320665083136,
        "meteor-148": 0.3270365997638725,
        "meteor-182": 0.2612826603325416,
        "meteor-167": 0.7529993855706109,
        "ruby-197": 0.18604651162790697,
        "ruby-28": 0.046511627906976716,
        "ruby-6": 0.368421052631579,
        "ruby-75": 0.4776119402985075,
        "ruby-66": 0.31818181818181823,
        "ruby-60": 0.2558139534883721,
        "ruby-35": 0.13953488372093026,
        "ruby-26": 0.23943661971830987,
        "ruby-162": 0.16279069767441856,
        "ruby-22": 0.046511627906976716,
        "ruby-176": 0.16279069767441856,
        "ruby-120": 0.47540983606557374,
        "ruby-8": 0.18181818181818177,
        "ruby-7": 0.467741935483871,
        "ruby-23": 0.4285714285714286,
        "ruby-57": 0.13953488372093026,
        "ruby-63": 0.11627906976744184,
        "ruby-148": 0.2558139534883721,
        "ruby-182": 0.16279069767441856,
        "ruby-167": 0.7674418604651163,
        "codebertscore_f1-197": 0.6970381736755371,
        "codebertscore_f3-197": 0.7010587453842163,
        "codebertscore_f1-28": 0.603945255279541,
        "codebertscore_f3-28": 0.5834766030311584,
        "codebertscore_f1-6": 0.8698822259902954,
        "codebertscore_f3-6": 0.8812257051467896,
        "codebertscore_f1-75": 0.862995445728302,
        "codebertscore_f3-75": 0.8992235064506531,
        "codebertscore_f1-66": 0.8134081959724426,
        "codebertscore_f3-66": 0.8199657201766968,
        "codebertscore_f1-60": 0.7416701912879944,
        "codebertscore_f3-60": 0.7213197946548462,
        "codebertscore_f1-35": 0.7030556201934814,
        "codebertscore_f3-35": 0.6835648417472839,
        "codebertscore_f1-26": 0.7927260398864746,
        "codebertscore_f3-26": 0.7914835214614868,
        "codebertscore_f1-162": 0.7117939591407776,
        "codebertscore_f3-162": 0.6951832175254822,
        "codebertscore_f1-22": 0.5888831615447998,
        "codebertscore_f3-22": 0.5343818664550781,
        "codebertscore_f1-176": 0.6738613247871399,
        "codebertscore_f3-176": 0.675876796245575,
        "codebertscore_f1-120": 0.8846540451049805,
        "codebertscore_f3-120": 0.900766134262085,
        "codebertscore_f1-8": 0.7368905544281006,
        "codebertscore_f3-8": 0.7553192973136902,
        "codebertscore_f1-7": 0.8883328437805176,
        "codebertscore_f3-7": 0.9046614170074463,
        "codebertscore_f1-23": 0.9188768863677979,
        "codebertscore_f3-23": 0.9291898608207703,
        "codebertscore_f1-57": 0.7135302424430847,
        "codebertscore_f3-57": 0.6977216005325317,
        "codebertscore_f1-63": 0.7037191987037659,
        "codebertscore_f3-63": 0.6898782849311829,
        "codebertscore_f1-148": 0.7859740257263184,
        "codebertscore_f3-148": 0.7733711004257202,
        "codebertscore_f1-182": 0.7168152928352356,
        "codebertscore_f3-182": 0.699857234954834,
        "codebertscore_f1-167": 0.9201411604881287,
        "codebertscore_f3-167": 0.9135074019432068,
        "codebertscore_s_f1-197": 0.7247501015663147,
        "codebertscore_s_f3-197": 0.7294813394546509,
        "codebertscore_s_f1-28": 0.63511061668396,
        "codebertscore_s_f3-28": 0.6173553466796875,
        "codebertscore_s_f1-6": 0.8861973881721497,
        "codebertscore_s_f3-6": 0.8981070518493652,
        "codebertscore_s_f1-75": 0.8767143487930298,
        "codebertscore_s_f3-75": 0.9098868370056152,
        "codebertscore_s_f1-66": 0.8271748423576355,
        "codebertscore_s_f3-66": 0.8319745659828186,
        "codebertscore_s_f1-60": 0.7842070460319519,
        "codebertscore_s_f3-60": 0.7603303790092468,
        "codebertscore_s_f1-35": 0.7282906770706177,
        "codebertscore_s_f3-35": 0.7098226547241211,
        "codebertscore_s_f1-26": 0.8097578883171082,
        "codebertscore_s_f3-26": 0.8087444305419922,
        "codebertscore_s_f1-162": 0.7381597757339478,
        "codebertscore_s_f3-162": 0.7215379476547241,
        "codebertscore_s_f1-22": 0.6680712699890137,
        "codebertscore_s_f3-22": 0.5983919501304626,
        "codebertscore_s_f1-176": 0.703787624835968,
        "codebertscore_s_f3-176": 0.7066816687583923,
        "codebertscore_s_f1-120": 0.8969493508338928,
        "codebertscore_s_f3-120": 0.9107270836830139,
        "codebertscore_s_f1-8": 0.7631775736808777,
        "codebertscore_s_f3-8": 0.7826296091079712,
        "codebertscore_s_f1-7": 0.8989286422729492,
        "codebertscore_s_f3-7": 0.913533627986908,
        "codebertscore_s_f1-23": 0.9274388551712036,
        "codebertscore_s_f3-23": 0.937932014465332,
        "codebertscore_s_f1-57": 0.7382446527481079,
        "codebertscore_s_f3-57": 0.7217947244644165,
        "codebertscore_s_f1-63": 0.7292137145996094,
        "codebertscore_s_f3-63": 0.7153335213661194,
        "codebertscore_s_f1-148": 0.8129074573516846,
        "codebertscore_s_f3-148": 0.7995420694351196,
        "codebertscore_s_f1-182": 0.7409952878952026,
        "codebertscore_s_f3-182": 0.7236966490745544,
        "codebertscore_s_f1-167": 0.9286075234413147,
        "codebertscore_s_f3-167": 0.9227291345596313,
        "gpt35_nsnr-197": 3,
        "raw_gpt35_nsnr-197": "3",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-75": 4,
        "raw_gpt35_nsnr-75": "4",
        "gpt35_nsnr-66": 4,
        "raw_gpt35_nsnr-66": "4",
        "gpt35_nsnr-60": 4,
        "raw_gpt35_nsnr-60": "4",
        "gpt35_nsnr-35": 3,
        "raw_gpt35_nsnr-35": "3",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-162": 4,
        "raw_gpt35_nsnr-162": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-176": 4,
        "raw_gpt35_nsnr-176": "4",
        "gpt35_nsnr-120": 4,
        "raw_gpt35_nsnr-120": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-63": 4,
        "raw_gpt35_nsnr-63": "4",
        "gpt35_nsnr-148": 4,
        "raw_gpt35_nsnr-148": "4",
        "gpt35_nsnr-182": 4,
        "raw_gpt35_nsnr-182": "4",
        "gpt35_nsnr-167": 4,
        "raw_gpt35_nsnr-167": "4",
        "gpt35_nswr-197": 2,
        "raw_gpt35_nswr-197": "2",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-75": 4,
        "raw_gpt35_nswr-75": "4",
        "gpt35_nswr-66": 4,
        "raw_gpt35_nswr-66": "4",
        "gpt35_nswr-60": 4,
        "raw_gpt35_nswr-60": "4",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-26": 4,
        "raw_gpt35_nswr-26": "4",
        "gpt35_nswr-162": 4,
        "raw_gpt35_nswr-162": "4",
        "gpt35_nswr-22": 2,
        "raw_gpt35_nswr-22": "2",
        "gpt35_nswr-176": 4,
        "raw_gpt35_nswr-176": "4",
        "gpt35_nswr-120": 4,
        "raw_gpt35_nswr-120": "4",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-63": 3,
        "raw_gpt35_nswr-63": "3",
        "gpt35_nswr-148": 3,
        "raw_gpt35_nswr-148": "3",
        "gpt35_nswr-182": 3,
        "raw_gpt35_nswr-182": "3",
        "gpt35_nswr-167": 4,
        "raw_gpt35_nswr-167": "4"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given an array arr of integers and you need to return\n    // sum of magnitudes of integers multiplied by product of all signs\n    // of each number in the array, represented by 1, -1 or 0.\n    // Note: return None for empty arr.\n    // Example:\n    // >>> prod_signs([1, 2, 2, -4]) == -9\n    // >>> prod_signs([0, 1]) == 0\n    // >>> prod_signs([]) == None\n    public static Optional<Integer> prodSigns(ArrayList<Integer> arr) {\n",
        "snippet": [
            "        if (arr.size() == 0) {\n            return Optional.empty();\n        }\n        if (arr.contains(0)) {\n            return Optional.of(0);\n        }\n        int prod = (int) (-2 * (arr.stream().filter(p -> p < 0).count() % 2) + 1);\n        return Optional.of(prod * (arr.stream().map(Math::abs).reduce(Integer::sum)).get());\n    }\n}"
        ],
        "simplified": "You are given an array arr of integers and you need to return sum of magnitudes of integers multiplied by product of all signs of each number in the array, represented by 1, -1 or 0. Note: return None for empty arr.",
        "task_id": "128",
        "176": "// Write your code here\n        return null;",
        "grade-176": {
            "execution": 0
        },
        "28": "Optional<Integer> result = Optional.empty();\n        if (arr.size() == 0) return result;\n        int prod = 1;\n        int mag = 0;\n        for (int x : arr) {\n            mag += Math.abs(x);\n            if (x != 0) {\n                prod *= Math.signum(x);\n            }\n        }\n        result = Optional.of(mag * prod);\n        return result;",
        "grade-28": {
            "execution": 0
        },
        "6": "if (arr.size() == 0) {\n            return Optional.empty();\n        }\n        int prodSigns = 1;\n        int sumMagnitudes = 0;\n        for (int i : arr) {\n            int sign = Math.signum(i);\n            prodSigns *= sign;\n            sumMagnitudes += Math.abs(i);\n        }\n        return Optional.of(sumMagnitudes * prodSigns);",
        "grade-6": {
            "execution": 0
        },
        "72": "if (arr.size() == 0) return Optional.empty();\n        else {\n            int prodSigns = Arrays.stream(arr.toArray())\n                                  .mapToInt(x -> x)\n                                  .sum();\n            return Optional.of(prodSigns);\n        }",
        "grade-72": {
            "execution": 0
        },
        "63": "if (arr.size() == 0) return Optional.empty();\n        int ret = 0;\n        int prod = 1;\n        for (int i : arr) {\n            if (i < 0) prod *= -1;\n            ret += Math.abs(i);\n        }\n        return Optional.of(ret * prod);",
        "grade-63": {
            "execution": 0
        },
        "58": "if (arr.size() == 0) return Optional.empty();\n        return Optional.of(arr.stream().mapToInt(i -> i == 0 ? 0 : Math.abs(i)).sum() * arr.stream().mapToInt(i -> i == 0 ? 1 : i).reduce(1, (a, b) -> a * b));",
        "grade-58": {
            "execution": 0
        },
        "35": "if (arr.size() == 0) {\n            return Optional.empty();\n        }\n        int sum = 0;\n        int prod = 1;\n        for (int i : arr) {\n            sum += Math.abs(i);\n            prod *= Math.signum(i);\n        }\n        return Optional.of(sum * prod);",
        "grade-35": {
            "execution": 0
        },
        "26": "// Start writing your code here\n        int m = 1;\n        int s = 1;\n        int n = 0;\n        if (arr.size() == 0) {\n            return Optional.empty();\n        } else {\n            for (int i : arr) {\n                if (i < 0) {\n                    s *= -1;\n                } else if (i > 0) {\n                    s *= 1;\n                } else {\n                    s *= 0;\n                }\n                m *= Math.abs(i);\n            }\n            n = m * s;\n            return Optional.of(n);\n        }",
        "grade-26": {
            "execution": 0
        },
        "187": "Integer prod = arr.stream().reduce(1, (x, y) -> x * Math.signum(y));\n        Integer sum = arr.stream().reduce(0, (x, y) -> x + Math.abs(y));\n        return Optional.of(prod * sum);",
        "grade-187": {
            "execution": 0
        },
        "147": "int sum = 0;\n        Optional<Integer> result = Optional.empty();\n        if (arr.size() == 0) {\n            return result;\n        }\n        for (int i = 0; i < arr.size(); i++) {\n            sum += Math.abs(arr.get(i));\n        }\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == 0) {\n                sum = 0;\n                break;\n            }\n            if (arr.get(i) < 0) {\n                sum *= -1;\n            }\n        }\n        result = Optional.of(sum);\n        return result;",
        "grade-147": {
            "execution": 0
        },
        "22": "return arr.stream().map(x -> x >= 0 ? x : -x).reduce((a, b) -> a + b).map(x -> x * ((int)arr.stream().filter(y -> y >= 0).count() - (int)arr.stream().filter(y -> y < 0).count()));",
        "grade-22": {
            "execution": 0
        },
        "162": "// Enter your code here\n        return Optional.empty();",
        "grade-162": {
            "execution": 0
        },
        "113": "// Write your code here\n        return Optional.empty();",
        "grade-113": {
            "execution": 0
        },
        "8": "return new ProdSigns().apply(arr);",
        "grade-8": {
            "execution": 0
        },
        "7": "int product = 1;\n        int sum = 0;\n        for (int i : arr) {\n            sum += Math.abs(i);\n            product *= Integer.signum(i);\n        }\n        return sum == 0 ? Optional.empty() : Optional.of(sum * product);",
        "grade-7": {
            "execution": 0
        },
        "23": "if (arr.size() == 0) return Optional.empty();\n        if (arr.size() == 1) return Optional.of(arr.get(0));\n        int prod = 1;\n        int sum = 0;\n        for (int i : arr) {\n            sum += Math.abs(i);\n            if (i == 0) continue;\n            if (i > 0) {\n                prod *= 1;\n            } else {\n                prod *= -1;\n            }\n        }\n        return Optional.of(sum * prod);",
        "grade-23": {
            "execution": 0
        },
        "55": "if (arr.size() == 0) {\n            return Optional.empty();\n        }\n        Integer prod = 1;\n        Integer sum = 0;\n        for (Integer i : arr) {\n            if (i > 0) {\n                prod *= 1;\n            } else if (i < 0) {\n                prod *= -1;\n            } else {\n                prod *= 0;\n            }\n            sum += Math.abs(i);\n        }\n        return Optional.of(sum * prod);",
        "grade-55": {
            "execution": 0
        },
        "60": "// your code here\n        return Optional.empty();",
        "grade-60": {
            "execution": 0
        },
        "135": "// replace the body of this function\n        return Optional.empty();",
        "grade-135": {
            "execution": 0
        },
        "165": "//return null;\n        if (arr.size() == 0) {\n            return Optional.empty();\n        }\n        int prod = 1;\n        int sum = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int value = arr.get(i);\n            if (value > 0) {\n                prod *= 1;\n            } else if (value < 0) {\n                prod *= -1;\n            } else {\n                prod *= 0;\n            }\n            sum += Math.abs(value);\n        }\n        return Optional.of(sum * prod);",
        "grade-165": {
            "execution": 0
        },
        "bleu-176": 4.861811350149192e-07,
        "bleu-28": 0.23394585614627314,
        "bleu-6": 0.2524327747973383,
        "bleu-72": 0.20902919012711763,
        "bleu-63": 0.2019522304866987,
        "bleu-58": 0.3443488423926469,
        "bleu-35": 0.23472401063140555,
        "bleu-26": 0.2813158222460991,
        "bleu-187": 0.18813798730636666,
        "bleu-147": 0.26915539307249703,
        "bleu-22": 0.259927631596369,
        "bleu-162": 0.00019874968496121008,
        "bleu-113": 0.00019874968496121008,
        "bleu-8": 3.897829061696761e-05,
        "bleu-7": 0.07498997189161163,
        "bleu-23": 0.33866419759803607,
        "bleu-55": 0.27327244193704403,
        "bleu-60": 0.00010492104686506408,
        "bleu-135": 0.0005628442768505119,
        "bleu-165": 0.30455095116233954,
        "codebleu-176": 0.026366822807717794,
        "codebleu-28": 0.4151062685789812,
        "codebleu-6": 0.3700397312343763,
        "codebleu-72": 0.305561571728821,
        "codebleu-63": 0.33412983333830204,
        "codebleu-58": 0.488534440281763,
        "codebleu-35": 0.35568140139208454,
        "codebleu-26": 0.4531435959850177,
        "codebleu-187": 0.3516851380890634,
        "codebleu-147": 0.5674485450249346,
        "codebleu-22": 0.44608368718670977,
        "codebleu-162": 0.056662003010587506,
        "codebleu-113": 0.056662003010587506,
        "codebleu-8": 0.04520068892993653,
        "codebleu-7": 0.25289728087524876,
        "codebleu-23": 0.5415576849075481,
        "codebleu-55": 0.43886633336542774,
        "codebleu-60": 0.05283949683603563,
        "codebleu-135": 0.06437218182524504,
        "codebleu-165": 0.5178886869641034,
        "chrf-176": 0.04462930655603382,
        "chrf-28": 0.3982322965193416,
        "chrf-6": 0.3778280824612195,
        "chrf-72": 0.3965693512784656,
        "chrf-63": 0.36606179115015036,
        "chrf-58": 0.4598986900142264,
        "chrf-35": 0.38860315291310266,
        "chrf-26": 0.36458908697769404,
        "chrf-187": 0.3411383729628493,
        "chrf-147": 0.4327195701948824,
        "chrf-22": 0.3301696279632381,
        "chrf-162": 0.13213378653290825,
        "chrf-113": 0.129478883434503,
        "chrf-8": 0.05525328201989679,
        "chrf-7": 0.2782044106321598,
        "chrf-23": 0.47518623359708095,
        "chrf-55": 0.39486509885120924,
        "chrf-60": 0.12575887656448356,
        "chrf-135": 0.141894409455408,
        "chrf-165": 0.42595853980118414,
        "rougel-176": 0.032520325203252036,
        "rougel-28": 0.38613861386138615,
        "rougel-6": 0.4329896907216495,
        "rougel-72": 0.5172413793103448,
        "rougel-63": 0.46994535519125685,
        "rougel-58": 0.5454545454545454,
        "rougel-35": 0.48087431693989063,
        "rougel-26": 0.39473684210526316,
        "rougel-187": 0.40217391304347827,
        "rougel-147": 0.4,
        "rougel-22": 0.4615384615384615,
        "rougel-162": 0.11023622047244096,
        "rougel-113": 0.11023622047244096,
        "rougel-8": 0.12698412698412698,
        "rougel-7": 0.3218390804597701,
        "rougel-23": 0.504424778761062,
        "rougel-55": 0.44019138755980863,
        "rougel-60": 0.1111111111111111,
        "rougel-135": 0.10852713178294573,
        "rougel-165": 0.4322033898305085,
        "meteor-176": 0.00966183574879227,
        "meteor-28": 0.2998448323528406,
        "meteor-6": 0.28259158797133477,
        "meteor-72": 0.3476156287813938,
        "meteor-63": 0.29741122824160193,
        "meteor-58": 0.4422451331729241,
        "meteor-35": 0.28543040757652627,
        "meteor-26": 0.3123586744639376,
        "meteor-187": 0.33073467801148876,
        "meteor-147": 0.39596041995709114,
        "meteor-22": 0.37536330669834067,
        "meteor-162": 0.05509614818015753,
        "meteor-113": 0.05509614818015753,
        "meteor-8": 0.0562572849021147,
        "meteor-7": 0.21146764912993635,
        "meteor-23": 0.4158650596395627,
        "meteor-55": 0.3147704730706287,
        "meteor-60": 0.055149227320986184,
        "meteor-135": 0.06611638856275422,
        "meteor-165": 0.34679910448607143,
        "ruby-176": 0.01754385964912286,
        "ruby-28": 0.26315789473684215,
        "ruby-6": 0.3157894736842105,
        "ruby-72": 0.3508771929824561,
        "ruby-63": 0.33333333333333337,
        "ruby-58": 0.3421052631578947,
        "ruby-35": 0.35964912280701755,
        "ruby-26": 0.21052631578947367,
        "ruby-187": 0.26315789473684215,
        "ruby-147": 0.25531914893617025,
        "ruby-22": 0.3157894736842105,
        "ruby-162": 0.06140350877192979,
        "ruby-113": 0.06140350877192979,
        "ruby-8": 0.07017543859649122,
        "ruby-7": 0.19298245614035092,
        "ruby-23": 0.32456140350877194,
        "ruby-55": 0.3157894736842105,
        "ruby-60": 0.06140350877192979,
        "ruby-135": 0.06140350877192979,
        "ruby-165": 0.2622950819672131,
        "codebertscore_f1-176": 0.5756108164787292,
        "codebertscore_f3-176": 0.5532042384147644,
        "codebertscore_f1-28": 0.789875328540802,
        "codebertscore_f3-28": 0.7793422937393188,
        "codebertscore_f1-6": 0.7836630344390869,
        "codebertscore_f3-6": 0.7845621705055237,
        "codebertscore_f1-72": 0.8130571842193604,
        "codebertscore_f3-72": 0.8009418845176697,
        "codebertscore_f1-63": 0.8149138689041138,
        "codebertscore_f3-63": 0.7970386743545532,
        "codebertscore_f1-58": 0.8230714797973633,
        "codebertscore_f3-58": 0.8152207732200623,
        "codebertscore_f1-35": 0.8176849484443665,
        "codebertscore_f3-35": 0.7970222234725952,
        "codebertscore_f1-26": 0.7511225938796997,
        "codebertscore_f3-26": 0.7657710909843445,
        "codebertscore_f1-187": 0.7783017158508301,
        "codebertscore_f3-187": 0.7712885737419128,
        "codebertscore_f1-147": 0.7684850096702576,
        "codebertscore_f3-147": 0.7694351673126221,
        "codebertscore_f1-22": 0.7626040577888489,
        "codebertscore_f3-22": 0.7381560802459717,
        "codebertscore_f1-162": 0.6349452137947083,
        "codebertscore_f3-162": 0.5973934531211853,
        "codebertscore_f1-113": 0.6326333284378052,
        "codebertscore_f3-113": 0.5938276648521423,
        "codebertscore_f1-8": 0.6095423698425293,
        "codebertscore_f3-8": 0.5901454091072083,
        "codebertscore_f1-7": 0.7626065611839294,
        "codebertscore_f3-7": 0.7447942495346069,
        "codebertscore_f1-23": 0.8106361627578735,
        "codebertscore_f3-23": 0.7996323108673096,
        "codebertscore_f1-55": 0.7976970672607422,
        "codebertscore_f3-55": 0.7899167537689209,
        "codebertscore_f1-60": 0.6448615789413452,
        "codebertscore_f3-60": 0.6000374555587769,
        "codebertscore_f1-135": 0.6680023074150085,
        "codebertscore_f3-135": 0.6382105946540833,
        "codebertscore_f1-165": 0.7827028632164001,
        "codebertscore_f3-165": 0.7837876081466675,
        "codebertscore_s_f1-176": 0.6067473292350769,
        "codebertscore_s_f3-176": 0.5804008841514587,
        "codebertscore_s_f1-28": 0.8103829622268677,
        "codebertscore_s_f3-28": 0.7991990447044373,
        "codebertscore_s_f1-6": 0.7916997075080872,
        "codebertscore_s_f3-6": 0.7937120199203491,
        "codebertscore_s_f1-72": 0.8234091401100159,
        "codebertscore_s_f3-72": 0.810417115688324,
        "codebertscore_s_f1-63": 0.8245446085929871,
        "codebertscore_s_f3-63": 0.8046244382858276,
        "codebertscore_s_f1-58": 0.8332375884056091,
        "codebertscore_s_f3-58": 0.8266754746437073,
        "codebertscore_s_f1-35": 0.8273757100105286,
        "codebertscore_s_f3-35": 0.8055574297904968,
        "codebertscore_s_f1-26": 0.7702759504318237,
        "codebertscore_s_f3-26": 0.7774416208267212,
        "codebertscore_s_f1-187": 0.7957620620727539,
        "codebertscore_s_f3-187": 0.7871451377868652,
        "codebertscore_s_f1-147": 0.790773868560791,
        "codebertscore_s_f3-147": 0.7924143671989441,
        "codebertscore_s_f1-22": 0.776054859161377,
        "codebertscore_s_f3-22": 0.7533992528915405,
        "codebertscore_s_f1-162": 0.6638017892837524,
        "codebertscore_s_f3-162": 0.6231656074523926,
        "codebertscore_s_f1-113": 0.660457968711853,
        "codebertscore_s_f3-113": 0.6217705607414246,
        "codebertscore_s_f1-8": 0.6458096504211426,
        "codebertscore_s_f3-8": 0.6219220757484436,
        "codebertscore_s_f1-7": 0.774964451789856,
        "codebertscore_s_f3-7": 0.7557055950164795,
        "codebertscore_s_f1-23": 0.8304393291473389,
        "codebertscore_s_f3-23": 0.819010853767395,
        "codebertscore_s_f1-55": 0.8159038424491882,
        "codebertscore_s_f3-55": 0.8056489825248718,
        "codebertscore_s_f1-60": 0.6741804480552673,
        "codebertscore_s_f3-60": 0.6275812983512878,
        "codebertscore_s_f1-135": 0.6716924905776978,
        "codebertscore_s_f3-135": 0.6347222924232483,
        "codebertscore_s_f1-165": 0.8058552145957947,
        "codebertscore_s_f3-165": 0.8059563636779785,
        "gpt35_nsnr-176": 0,
        "raw_gpt35_nsnr-176": "0",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-72": 2,
        "raw_gpt35_nsnr-72": "2",
        "gpt35_nsnr-63": 4,
        "raw_gpt35_nsnr-63": "4",
        "gpt35_nsnr-58": 4,
        "raw_gpt35_nsnr-58": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-187": 4,
        "raw_gpt35_nsnr-187": "4",
        "gpt35_nsnr-147": 3,
        "raw_gpt35_nsnr-147": "3",
        "gpt35_nsnr-22": 3,
        "raw_gpt35_nsnr-22": "3",
        "gpt35_nsnr-162": 0,
        "raw_gpt35_nsnr-162": "3 - The code snippet correctly defines the method signature and returns an Optional<Integer> as required by the problem. However, the method implementation is incomplete and returns an empty Optional. The logic to calculate the sum of magnitudes of integers multiplied by product of all signs of each number in the array is missing.",
        "gpt35_nsnr-113": 0,
        "raw_gpt35_nsnr-113": "3 - The code snippet is missing the implementation to calculate the sum of magnitudes of integers multiplied by product of all signs of each number in the array, but it correctly returns Optional.empty() for an empty array.",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-60": 0,
        "raw_gpt35_nsnr-60": "3 - The code snippet correctly defines the method signature and returns an Optional<Integer> as required by the problem. However, the method body is incomplete and returns an empty Optional, so it does not yet implement the required functionality of calculating the sum of magnitudes of integers multiplied by product of all signs of each number in the array.",
        "gpt35_nsnr-135": 0,
        "raw_gpt35_nsnr-135": "3 - The code snippet correctly defines the function prodSigns() and returns an Optional<Integer>. The function correctly handles the case where the input ArrayList is empty and returns Optional.empty(). However, the function does not implement the required functionality of calculating the sum of magnitudes of integers multiplied by product of all signs of each number in the array. The body of the function needs to be replaced with the correct implementation.",
        "gpt35_nsnr-165": 4,
        "raw_gpt35_nsnr-165": "4",
        "gpt35_nswr-176": 0,
        "raw_gpt35_nswr-176": "0",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-72": 1,
        "raw_gpt35_nswr-72": "1",
        "gpt35_nswr-63": 3,
        "raw_gpt35_nswr-63": "3",
        "gpt35_nswr-58": 3,
        "raw_gpt35_nswr-58": "3",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-187": 3,
        "raw_gpt35_nswr-187": "3",
        "gpt35_nswr-147": 2,
        "raw_gpt35_nswr-147": "2",
        "gpt35_nswr-22": 2,
        "raw_gpt35_nswr-22": "2",
        "gpt35_nswr-162": 2,
        "raw_gpt35_nswr-162": "2",
        "gpt35_nswr-113": 2,
        "raw_gpt35_nswr-113": "2",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-60": 2,
        "raw_gpt35_nswr-60": "2",
        "gpt35_nswr-135": 3,
        "raw_gpt35_nswr-135": "3",
        "gpt35_nswr-165": 3,
        "raw_gpt35_nswr-165": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3, 5, 7]\n    public static ArrayList<Integer> makeAPile(int n) {\n",
        "snippet": [
            "        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            result.add(n + 2 * i);\n        }\n        return result;\n    }\n}"
        ],
        "simplified": "Given a positive integer n, you have to make a pile of n levels of stones. The first level has n stones. The number of stones in the next level is: - the next odd number if n is odd. - the next even number if n is even. Return the number of stones in each level in a list, where element at index i represents the number of stones in the level (i+1).",
        "task_id": "100",
        "184": "ArrayList<Integer> r = new ArrayList<Integer>();\n        for (int i = 0; i < n; i++) {\n            r.add(n - i);\n        }\n        return r;",
        "grade-184": {
            "execution": 0
        },
        "28": "ArrayList<Integer> result = new ArrayList<Integer>();\n        int firstLevel = n;\n        result.add(firstLevel);\n        while (firstLevel > 1) {\n            if (firstLevel % 2 == 0) {\n                firstLevel -= 1;\n            } else {\n                firstLevel -= 2;\n            }\n            result.add(firstLevel);\n        }\n        return result;",
        "grade-28": {
            "execution": 0
        },
        "6": "// @TODO\n        return null;",
        "grade-6": {
            "execution": 0
        },
        "76": "return new ArrayList<>();",
        "grade-76": {
            "execution": 0
        },
        "67": "ArrayList<Integer> levelOfStones = new ArrayList<Integer>();\n        levelOfStones.add(n);\n        for (int i = 1; i < n; i++) {\n            levelOfStones.add(isEven(n) ? levelOfStones.get(i - 1) + 2 : levelOfStones.get(i - 1) + 1);\n        }\n        return levelOfStones;",
        "grade-67": {
            "execution": 0
        },
        "62": "// Your code here.\n        return null;",
        "grade-62": {
            "execution": 0
        },
        "35": "ArrayList<Integer> pile = new ArrayList<Integer>();\n        while (n > 0) {\n            pile.add(n);\n            if (n % 2 == 0) {\n                n -= 1;\n            } else {\n                n -= 2;\n            }\n        }\n        return pile;",
        "grade-35": {
            "execution": 0
        },
        "26": "ArrayList<Integer> result = new ArrayList<Integer>();\n        result.add(n);\n        int k = 1;\n        while (n > 0) {\n            int next = k % 2 == 0 ? (n + 1) : (n - 1);\n            result.add(next);\n            n = next;\n            k++;\n        }\n        return result;",
        "grade-26": {
            "execution": 0
        },
        "194": "ArrayList<Integer> pile = new ArrayList<Integer>();\n        while (n > 0) {\n            pile.add(n);\n            if (n % 2 == 0) {\n                n = n - 1;\n            } else {\n                n = n - 2;\n            }\n        }\n        return pile;",
        "grade-194": {
            "execution": 0
        },
        "158": "ArrayList<Integer> result = new ArrayList<Integer>();\n        int i = n;\n        while (i > 0) {\n            result.add(i);\n            if (i % 2 == 0) {\n                i -= 1;\n            } else {\n                i -= 2;\n            }\n        }\n        return result;",
        "grade-158": {
            "execution": 0
        },
        "22": "ArrayList<Integer> result = new ArrayList<Integer>();\n        result.add(n);\n        for (int i = 1; i < n; i++) {\n            if (result.get(i - 1) % 2 == 0) {\n                result.add(result.get(i - 1) + 2);\n            } else {\n                result.add(result.get(i - 1) + 1);\n            }\n        }\n        return result;",
        "grade-22": {
            "execution": 0
        },
        "171": "ArrayList<Integer> result = new ArrayList<Integer>();\n        result.add(n);\n        int m = n;\n        while (m > 0) {\n            if (m % 2 == 0) {\n                result.add(m + 2);\n                m -= 2;\n            } else {\n                result.add(m + 1);\n                m -= 1;\n            }\n        }\n        return result;",
        "grade-171": {
            "execution": 0
        },
        "120": "ArrayList<Integer> pile = new ArrayList<Integer>();\n        pile.add(n);\n        for (int i = 1; i < n; i++) {\n            pile.add(n + i * 2);\n        }\n        return pile;",
        "grade-120": {
            "execution": 1
        },
        "8": "ArrayList<Integer> ans = new ArrayList<>();\n        int level = 1;\n        while (n > 0) {\n            ans.add(n);\n            if (level % 2 == 1) {\n                n -= 2;\n            } else {\n                n -= 1;\n            }\n            level++;\n        }\n        return ans;",
        "grade-8": {
            "execution": 0
        },
        "7": "ArrayList<Integer> lst = new ArrayList<Integer>();\n        while (n > 0) {\n            lst.add(n);\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = (n + 1) / 2;\n            }\n        }\n        return lst;",
        "grade-7": {
            "execution": 0
        },
        "23": "ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < n; i++) {\n            result.add(i+n);\n        }\n        return result;",
        "grade-23": {
            "execution": 0
        },
        "58": "ArrayList<Integer> arr = new ArrayList<Integer>();\n        if (n > 0) {\n            arr.add(n);\n            int count = n;\n            while (count > 1) {\n                if (count % 2 == 0) {\n                    count /= 2;\n                    count -= 1;\n                } else {\n                    count /= 2;\n                    count += 1;\n                }\n                arr.add(count);\n            }\n        }\n        return arr;",
        "grade-58": {
            "execution": 0
        },
        "64": "ArrayList<Integer> arr = new ArrayList<Integer>();\n        arr.add(n);\n        int i = n;\n        while (i > 0) {\n            i = (i % 2 == 0) ? i + 1 : i + 2;\n            arr.add(i);\n        }\n        return arr;",
        "grade-64": {
            "execution": 0
        },
        "146": "ArrayList<Integer> result = new ArrayList<Integer>();\n        int k = n;\n        while (k > 0) {\n            result.add(0, k);\n            if (k % 2 == 0) {\n                k = k + 1;\n            } else {\n                k = k + 2;\n            }\n        }\n        return result;",
        "grade-146": {
            "execution": 0
        },
        "175": "int x = n;\n        ArrayList<Integer> list = new ArrayList<Integer>();\n        for (int i = 0; i < n; i++) {\n            list.add(x);\n            if (x % 2 == 0) {\n                x++;\n            } else {\n                x += 2;\n            }\n        }\n        return list;",
        "grade-175": {
            "execution": 0
        },
        "bleu-184": 0.6636947656806075,
        "bleu-28": 0.2673341360754711,
        "bleu-6": 0.00025760834657848655,
        "bleu-76": 0.013040138132799273,
        "bleu-67": 0.3083476455490012,
        "bleu-62": 0.0009202420219135653,
        "bleu-35": 0.2385970630532939,
        "bleu-26": 0.2816638325112029,
        "bleu-194": 0.23043686444796763,
        "bleu-158": 0.368803367567047,
        "bleu-22": 0.3648743637032975,
        "bleu-171": 0.2828364964928017,
        "bleu-120": 0.5239365895110992,
        "bleu-8": 0.2514238535304505,
        "bleu-7": 0.22527070247244108,
        "bleu-23": 0.7915529769945161,
        "bleu-58": 0.16393915102242004,
        "bleu-64": 0.26733305738092644,
        "bleu-146": 0.3266001386976858,
        "bleu-175": 0.41519748159437436,
        "codebleu-184": 0.6842546640510959,
        "codebleu-28": 0.5798494719416628,
        "codebleu-6": 0.03121874943232785,
        "codebleu-76": 0.08372685439413173,
        "codebleu-67": 0.6595844732136098,
        "codebleu-62": 0.08319914981964494,
        "codebleu-35": 0.5402411370728966,
        "codebleu-26": 0.5976315561926192,
        "codebleu-194": 0.5730292167807792,
        "codebleu-158": 0.6091562401720714,
        "codebleu-22": 0.7076820189980834,
        "codebleu-171": 0.6191581656940118,
        "codebleu-120": 0.7011385205861845,
        "codebleu-8": 0.6256879671880091,
        "codebleu-7": 0.5866548532839702,
        "codebleu-23": 0.7179930040658108,
        "codebleu-58": 0.5706934922381205,
        "codebleu-64": 0.5917357589856362,
        "codebleu-146": 0.6182178020541443,
        "codebleu-175": 0.702038978792107,
        "chrf-184": 0.6659318822673019,
        "chrf-28": 0.5332600592320694,
        "chrf-6": 0.059984811199082985,
        "chrf-76": 0.2394542050251124,
        "chrf-67": 0.48095819049664285,
        "chrf-62": 0.08228597322703637,
        "chrf-35": 0.4138087334481502,
        "chrf-26": 0.5863008243109965,
        "chrf-194": 0.41203684035330546,
        "chrf-158": 0.6439048368209671,
        "chrf-22": 0.6722384908810145,
        "chrf-171": 0.5952540222567374,
        "chrf-120": 0.5697829833156706,
        "chrf-8": 0.4379700878097651,
        "chrf-7": 0.4397550018198778,
        "chrf-23": 0.8536832612367575,
        "chrf-58": 0.3841368611163461,
        "chrf-64": 0.44615914462411643,
        "chrf-146": 0.6229285947043436,
        "chrf-175": 0.5973056245221503,
        "rougel-184": 0.8478260869565217,
        "rougel-28": 0.48387096774193544,
        "rougel-6": 0.07407407407407407,
        "rougel-76": 0.2857142857142857,
        "rougel-67": 0.5925925925925926,
        "rougel-62": 0.10714285714285714,
        "rougel-35": 0.5333333333333333,
        "rougel-26": 0.5203252032520325,
        "rougel-194": 0.5233644859813084,
        "rougel-158": 0.6,
        "rougel-22": 0.5874125874125874,
        "rougel-171": 0.53125,
        "rougel-120": 0.7722772277227723,
        "rougel-8": 0.5309734513274336,
        "rougel-7": 0.5045045045045045,
        "rougel-23": 0.891304347826087,
        "rougel-58": 0.4148148148148148,
        "rougel-64": 0.5535714285714286,
        "rougel-146": 0.5438596491228069,
        "rougel-175": 0.6610169491525424,
        "meteor-184": 0.8179012345679013,
        "meteor-28": 0.591101108033241,
        "meteor-6": 0.023255813953488372,
        "meteor-76": 0.15932213077274807,
        "meteor-67": 0.6005931996086106,
        "meteor-62": 0.03472222222222222,
        "meteor-35": 0.4875493673071528,
        "meteor-26": 0.6074314005762865,
        "meteor-194": 0.4855305293472888,
        "meteor-158": 0.6123456790123456,
        "meteor-22": 0.6739002953913845,
        "meteor-171": 0.637676694711198,
        "meteor-120": 0.83399743339357,
        "meteor-8": 0.4839002432206774,
        "meteor-7": 0.5537191467962955,
        "meteor-23": 0.9130252897153924,
        "meteor-58": 0.5215996010212987,
        "meteor-64": 0.6056363811815993,
        "meteor-146": 0.6147808235720323,
        "meteor-175": 0.5353585428773399,
        "ruby-184": 0.7872340425531915,
        "ruby-28": 0.3116883116883117,
        "ruby-6": 0.04255319148936165,
        "ruby-76": 0.17021276595744683,
        "ruby-67": 0.44318181818181823,
        "ruby-62": 0.06382978723404253,
        "ruby-35": 0.3620689655172413,
        "ruby-26": 0.381578947368421,
        "ruby-194": 0.35,
        "ruby-158": 0.4444444444444444,
        "ruby-22": 0.42708333333333337,
        "ruby-171": 0.3950617283950617,
        "ruby-120": 0.6851851851851851,
        "ruby-8": 0.3939393939393939,
        "ruby-7": 0.359375,
        "ruby-23": 0.8297872340425532,
        "ruby-58": 0.28409090909090906,
        "ruby-64": 0.41538461538461535,
        "ruby-146": 0.3880597014925373,
        "ruby-175": 0.5492957746478873,
        "codebertscore_f1-184": 0.9387463927268982,
        "codebertscore_f3-184": 0.9327898621559143,
        "codebertscore_f1-28": 0.7967965006828308,
        "codebertscore_f3-28": 0.8152137398719788,
        "codebertscore_f1-6": 0.5924068689346313,
        "codebertscore_f3-6": 0.5886783599853516,
        "codebertscore_f1-76": 0.7083078026771545,
        "codebertscore_f3-76": 0.6461705565452576,
        "codebertscore_f1-67": 0.8184811472892761,
        "codebertscore_f3-67": 0.8610780239105225,
        "codebertscore_f1-62": 0.6126872301101685,
        "codebertscore_f3-62": 0.6045941710472107,
        "codebertscore_f1-35": 0.802158534526825,
        "codebertscore_f3-35": 0.7980035543441772,
        "codebertscore_f1-26": 0.8306958079338074,
        "codebertscore_f3-26": 0.8371732234954834,
        "codebertscore_f1-194": 0.8080897927284241,
        "codebertscore_f3-194": 0.8021458387374878,
        "codebertscore_f1-158": 0.8427641987800598,
        "codebertscore_f3-158": 0.8511295914649963,
        "codebertscore_f1-22": 0.8574177622795105,
        "codebertscore_f3-22": 0.8858329057693481,
        "codebertscore_f1-171": 0.8196210861206055,
        "codebertscore_f3-171": 0.833187460899353,
        "codebertscore_f1-120": 0.9117725491523743,
        "codebertscore_f3-120": 0.9156515002250671,
        "codebertscore_f1-8": 0.7934749722480774,
        "codebertscore_f3-8": 0.8075380921363831,
        "codebertscore_f1-7": 0.814953088760376,
        "codebertscore_f3-7": 0.8161886930465698,
        "codebertscore_f1-23": 0.9469060301780701,
        "codebertscore_f3-23": 0.9407894015312195,
        "codebertscore_f1-58": 0.77157062292099,
        "codebertscore_f3-58": 0.7904708385467529,
        "codebertscore_f1-64": 0.8530852198600769,
        "codebertscore_f3-64": 0.8497534394264221,
        "codebertscore_f1-146": 0.8345450162887573,
        "codebertscore_f3-146": 0.8465584516525269,
        "codebertscore_f1-175": 0.8548835515975952,
        "codebertscore_f3-175": 0.8710106015205383,
        "codebertscore_s_f1-184": 0.9509724974632263,
        "codebertscore_s_f3-184": 0.9461919665336609,
        "codebertscore_s_f1-28": 0.8220335245132446,
        "codebertscore_s_f3-28": 0.8432633280754089,
        "codebertscore_s_f1-6": 0.6088119745254517,
        "codebertscore_s_f3-6": 0.6064221262931824,
        "codebertscore_s_f1-76": 0.7670987248420715,
        "codebertscore_s_f3-76": 0.6990485787391663,
        "codebertscore_s_f1-67": 0.824241578578949,
        "codebertscore_s_f3-67": 0.870650589466095,
        "codebertscore_s_f1-62": 0.6179314851760864,
        "codebertscore_s_f3-62": 0.6150004267692566,
        "codebertscore_s_f1-35": 0.8248583078384399,
        "codebertscore_s_f3-35": 0.8247087001800537,
        "codebertscore_s_f1-26": 0.8477178812026978,
        "codebertscore_s_f3-26": 0.8584007024765015,
        "codebertscore_s_f1-194": 0.8306894302368164,
        "codebertscore_s_f3-194": 0.8302801847457886,
        "codebertscore_s_f1-158": 0.8647533655166626,
        "codebertscore_s_f3-158": 0.8785746097564697,
        "codebertscore_s_f1-22": 0.8699259161949158,
        "codebertscore_s_f3-22": 0.9031606912612915,
        "codebertscore_s_f1-171": 0.8427574038505554,
        "codebertscore_s_f3-171": 0.8599370718002319,
        "codebertscore_s_f1-120": 0.918290913105011,
        "codebertscore_s_f3-120": 0.922646701335907,
        "codebertscore_s_f1-8": 0.8183910250663757,
        "codebertscore_s_f3-8": 0.8333739638328552,
        "codebertscore_s_f1-7": 0.8368043303489685,
        "codebertscore_s_f3-7": 0.8434705138206482,
        "codebertscore_s_f1-23": 0.9632595181465149,
        "codebertscore_s_f3-23": 0.9585157632827759,
        "codebertscore_s_f1-58": 0.7953006625175476,
        "codebertscore_s_f3-58": 0.8172165751457214,
        "codebertscore_s_f1-64": 0.8679791688919067,
        "codebertscore_s_f3-64": 0.8690587878227234,
        "codebertscore_s_f1-146": 0.8532832264900208,
        "codebertscore_s_f3-146": 0.8703013062477112,
        "codebertscore_s_f1-175": 0.874946653842926,
        "codebertscore_s_f3-175": 0.8926077485084534,
        "gpt35_nsnr-184": 2,
        "raw_gpt35_nsnr-184": "2",
        "gpt35_nsnr-28": 3,
        "raw_gpt35_nsnr-28": "3",
        "gpt35_nsnr-6": 0,
        "raw_gpt35_nsnr-6": "0",
        "gpt35_nsnr-76": 3,
        "raw_gpt35_nsnr-76": "3",
        "gpt35_nsnr-67": 4,
        "raw_gpt35_nsnr-67": "4",
        "gpt35_nsnr-62": 0,
        "raw_gpt35_nsnr-62": "0",
        "gpt35_nsnr-35": 3,
        "raw_gpt35_nsnr-35": "3",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-194": 3,
        "raw_gpt35_nsnr-194": "3",
        "gpt35_nsnr-158": 3,
        "raw_gpt35_nsnr-158": "3",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-171": 4,
        "raw_gpt35_nsnr-171": "4",
        "gpt35_nsnr-120": 4,
        "raw_gpt35_nsnr-120": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-23": 2,
        "raw_gpt35_nsnr-23": "2",
        "gpt35_nsnr-58": 3,
        "raw_gpt35_nsnr-58": "3",
        "gpt35_nsnr-64": 3,
        "raw_gpt35_nsnr-64": "3",
        "gpt35_nsnr-146": 4,
        "raw_gpt35_nsnr-146": "4",
        "gpt35_nsnr-175": 4,
        "raw_gpt35_nsnr-175": "4",
        "gpt35_nswr-184": 2,
        "raw_gpt35_nswr-184": "2",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 2,
        "raw_gpt35_nswr-6": "2",
        "gpt35_nswr-76": 4,
        "raw_gpt35_nswr-76": "4",
        "gpt35_nswr-67": 3,
        "raw_gpt35_nswr-67": "3",
        "gpt35_nswr-62": 0,
        "raw_gpt35_nswr-62": "0",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-194": 3,
        "raw_gpt35_nswr-194": "3",
        "gpt35_nswr-158": 2,
        "raw_gpt35_nswr-158": "2",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-171": 3,
        "raw_gpt35_nswr-171": "3",
        "gpt35_nswr-120": 4,
        "raw_gpt35_nswr-120": "4",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 2,
        "raw_gpt35_nswr-7": "2",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-58": 2,
        "raw_gpt35_nswr-58": "2",
        "gpt35_nswr-64": 3,
        "raw_gpt35_nswr-64": "3",
        "gpt35_nswr-146": 3,
        "raw_gpt35_nswr-146": "3",
        "gpt35_nswr-175": 4,
        "raw_gpt35_nswr-175": "4"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // For N = 1000, the sum of digits will be 1 the output should be \"1\".\n    // For N = 150, the sum of digits will be 6 the output should be \"110\".\n    // For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static String solve(int N) {\n",
        "snippet": [
            "        int sum = 0;\n        for (char c : String.valueOf(N).toCharArray()) {\n            sum += (c - '0');\n        }\n        return Integer.toBinaryString(sum);\n    }\n}"
        ],
        "simplified": "Given a positive integer N, return the total sum of its digits in binary.",
        "task_id": "84",
        "197": "// For N = 147, the sum of digits will be 12 the output should be \"1100\".\n        // 1+0+0+0 = 1+1 = 2\n        String binaryString = Integer.toBinaryString(N);\n        int sumOfBinaryDigits = binaryString.chars().map(c -> c - '0').sum();\n        StringBuilder sb = new StringBuilder();\n        while (sumOfBinaryDigits > 0) {\n            sb.append(sumOfBinaryDigits % 2);\n            sumOfBinaryDigits /= 2;\n        }\n        return sb.reverse().toString();",
        "grade-197": {
            "execution": 0
        },
        "29": "String binary = Integer.toBinaryString(N);\n        // convert string to list\n        List<String> list = new ArrayList<String>(Arrays.asList(binary.split(\"\")));\n        // convert list to stream and sum\n        String sumOfDigits = list.stream().mapToInt(Integer::parseInt).sum() + \"\";\n        return sumOfDigits;",
        "grade-29": {
            "execution": 0
        },
        "6": "// Convert to binary.\n        String binaryString = Integer.toBinaryString(N);\n        // Create sum variable.\n        int sum = 0;\n        // Calculate sum of the digits.\n        for (int i = 0; i < binaryString.length(); i++) {\n            sum += Integer.parseInt(String.valueOf(binaryString.charAt(i)));\n        }\n        // Return sum.\n        return Integer.toString(sum);",
        "grade-6": {
            "execution": 0
        },
        "81": "// Write your code here.\n        int number = N;\n        int binaryNumber = 0;\n        int i = 1;\n        while (number > 0) {\n            int rem = number % 2;\n            number = number / 2;\n            binaryNumber = binaryNumber + rem * i;\n            i = i * 10;\n        }\n        return String.valueOf(binaryNumber);",
        "grade-81": {
            "execution": 0
        },
        "70": "String binary = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0; i < binary.length(); i++) {\n            char c = binary.charAt(i);\n            sum += Character.getNumericValue(c);\n        }\n        return Integer.toString(sum);",
        "grade-70": {
            "execution": 0
        },
        "60": "return Integer.toBinaryString(N).chars().reduce(0, (a, b) -> a + b - '0');",
        "grade-60": {
            "execution": 0
        },
        "37": "return Integer.toBinaryString(N);",
        "grade-37": {
            "execution": 0
        },
        "27": "// Write your code here\n        return \"\";",
        "grade-27": {
            "execution": 0
        },
        "167": "return new BigInteger(Integer.toString(N, 2)).toString();",
        "grade-167": {
            "execution": 0
        },
        "23": "// Convert int N to binary\n        String bin = Integer.toBinaryString(N);\n        // convert bin to a char array\n        char[] charArray = bin.toCharArray();\n        // sum of digits\n        int sum = 0;\n        // loop through the char array, adding each value as it is found\n        for (char value : charArray) {\n            int charToInt = Character.getNumericValue(value);\n            sum += charToInt;\n        }\n        // convert the sum to string\n        String finalAnswer = Integer.toString(sum);\n        return finalAnswer;",
        "grade-23": {
            "execution": 0
        },
        "183": "// write your code here\n        return Integer.toBinaryString(N).chars().map(c -> c - '0').sum() + \"\";",
        "grade-183": {
            "execution": 0
        },
        "126": "String binary = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0; i < binary.length(); i++) {\n            char curr = binary.charAt(i);\n            sum += Integer.parseInt(Character.toString(curr));\n        }\n        return Integer.toString(sum);",
        "grade-126": {
            "execution": 0
        },
        "8": "String res = \"\";\n        // The solution is simply to convert the number to binary,\n        // and add all the resulting digits of the binary number\n        String bin = Integer.toBinaryString(N);\n        for (int i = 0; i < bin.length(); i++) {\n            res += bin.charAt(i);\n        }\n        return res;",
        "grade-8": {
            "execution": 0
        },
        "7": "String result = \"\";\n        while (N > 0) {\n            int remainder = N % 2;\n            result = remainder + result;\n            N = N / 2;\n        }\n        return result;",
        "grade-7": {
            "execution": 0
        },
        "24": "// your code here\n        return Integer.toBinaryString(N);",
        "grade-24": {
            "execution": 0
        },
        "58": "String s = new String();\n        s = Integer.toBinaryString(N);\n        String[] sa = s.split(\"\");\n        int n = sa.length;\n        int S = 0;\n        for (int i = 0; i < n; i++) {\n            S += Integer.parseInt(sa[i]);\n        }\n        s = Integer.toString(S);\n        return s;",
        "grade-58": {
            "execution": 0
        },
        "63": "String answer = \"\";\n        while (N > 0) {\n            answer = Integer.toString(N % 2) + answer;\n            N /= 2;\n        }\n        int sum = 0;\n        for (int i = 0; i < answer.length(); i++) {\n            sum += Integer.parseInt(answer.substring(i, i + 1));\n        }\n        return Integer.toString(sum);",
        "grade-63": {
            "execution": 0
        },
        "157": "String result = \"\";\n        while (N > 0) {\n            result = Integer.toString(N % 2) + result;\n            N /= 2;\n        }\n        return result;",
        "grade-157": {
            "execution": 0
        },
        "186": "String binaryString = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0; i < binaryString.length(); i++) {\n            char c = binaryString.charAt(i);\n            if (c == '1') {\n                sum += 1;\n            }\n        }\n        return Integer.toString(sum);",
        "grade-186": {
            "execution": 0
        },
        "173": "// Solve here\n        // convert N to binary number\n        String binary = \"\";\n        while (N > 0) {\n            int rem = N % 2;\n            binary = rem + binary;\n            N = N / 2;\n        }\n        // convert binary to int\n        int binaryInt = Integer.parseInt(binary);\n        // sum all its digits\n        int sum = 0;\n        while (binaryInt > 0) {\n            sum += binaryInt % 10;\n            binaryInt = binaryInt / 10;\n        }\n        return String.valueOf(sum);",
        "grade-173": {
            "execution": 0
        },
        "bleu-197": 0.1250222545490396,
        "bleu-29": 0.10508623644231227,
        "bleu-6": 0.23353458229487267,
        "bleu-81": 0.09999377369656479,
        "bleu-70": 0.32529571731456997,
        "bleu-60": 0.2642224128902269,
        "bleu-37": 0.016377866405810407,
        "bleu-27": 0.0012011960372823307,
        "bleu-167": 0.046904279023152126,
        "bleu-23": 0.1730499770549481,
        "bleu-183": 0.2918404419567305,
        "bleu-126": 0.29638802133678266,
        "bleu-8": 0.1580910160061567,
        "bleu-7": 0.04880342659565268,
        "bleu-24": 0.05252627932825221,
        "bleu-58": 0.1561234310434728,
        "bleu-63": 0.23893313589705867,
        "bleu-157": 0.07119684794249526,
        "bleu-186": 0.31544791355571766,
        "bleu-173": 0.15047771923358588,
        "codebleu-197": 0.5627325890483784,
        "codebleu-29": 0.5106326422115895,
        "codebleu-6": 0.6059667942984955,
        "codebleu-81": 0.4237107921318447,
        "codebleu-70": 0.6254760692653724,
        "codebleu-60": 0.3710766384926166,
        "codebleu-37": 0.10138782005404028,
        "codebleu-27": 0.0816117003549689,
        "codebleu-167": 0.2015656025976204,
        "codebleu-23": 0.6185564434448559,
        "codebleu-183": 0.4081063740484819,
        "codebleu-126": 0.6172854459006957,
        "codebleu-8": 0.5728335991493886,
        "codebleu-7": 0.3223151878561796,
        "codebleu-24": 0.1354022923138693,
        "codebleu-58": 0.616161616161616,
        "codebleu-63": 0.6121373721118438,
        "codebleu-157": 0.34585372277331883,
        "codebleu-186": 0.6572121995688528,
        "codebleu-173": 0.5627303113944546,
        "chrf-197": 0.35484025899312677,
        "chrf-29": 0.32696583572203025,
        "chrf-6": 0.4896833450756474,
        "chrf-81": 0.2741392647547181,
        "chrf-70": 0.5493937114229319,
        "chrf-60": 0.3872241054075666,
        "chrf-37": 0.3230675860590682,
        "chrf-27": 0.07734261236011856,
        "chrf-167": 0.264433758833918,
        "chrf-23": 0.4261897055112687,
        "chrf-183": 0.40426417663594516,
        "chrf-126": 0.5276482395919267,
        "chrf-8": 0.37977770969384894,
        "chrf-7": 0.18846528278927585,
        "chrf-24": 0.331193396874211,
        "chrf-58": 0.3610307210157421,
        "chrf-63": 0.4335864811522681,
        "chrf-157": 0.27489648824537344,
        "chrf-186": 0.5494271465675044,
        "chrf-173": 0.36927217078430763,
        "rougel-197": 0.28729281767955805,
        "rougel-29": 0.2773722627737226,
        "rougel-6": 0.3945578231292517,
        "rougel-81": 0.26890756302521,
        "rougel-70": 0.5042016806722688,
        "rougel-60": 0.3614457831325301,
        "rougel-37": 0.30508474576271183,
        "rougel-27": 0.10169491525423728,
        "rougel-167": 0.3428571428571428,
        "rougel-23": 0.31952662721893493,
        "rougel-183": 0.4090909090909091,
        "rougel-126": 0.46774193548387094,
        "rougel-8": 0.3149606299212598,
        "rougel-7": 0.2823529411764706,
        "rougel-24": 0.28125,
        "rougel-58": 0.35036496350364965,
        "rougel-63": 0.40875912408759124,
        "rougel-157": 0.35294117647058826,
        "rougel-186": 0.47619047619047616,
        "rougel-173": 0.2692307692307692,
        "meteor-197": 0.49147834261621526,
        "meteor-29": 0.34026465028355385,
        "meteor-6": 0.6035173617591199,
        "meteor-81": 0.2788002323181131,
        "meteor-70": 0.6745705135443794,
        "meteor-60": 0.4435705263157894,
        "meteor-37": 0.2187361419068736,
        "meteor-27": 0.04434589800443458,
        "meteor-167": 0.27326839826839827,
        "meteor-23": 0.52244812261609,
        "meteor-183": 0.41035093735711015,
        "meteor-126": 0.6043518757113102,
        "meteor-8": 0.4400849357083876,
        "meteor-7": 0.17819706498951784,
        "meteor-24": 0.2163377192982456,
        "meteor-58": 0.4317657497781722,
        "meteor-63": 0.5746482413375993,
        "meteor-157": 0.31266784482907983,
        "meteor-186": 0.7155177274160508,
        "meteor-173": 0.476631938705326,
        "ruby-197": 0.16666666666666663,
        "ruby-29": 0.1477272727272727,
        "ruby-6": 0.23469387755102045,
        "ruby-81": 0.1428571428571429,
        "ruby-70": 0.3285714285714286,
        "ruby-60": 0.22448979591836737,
        "ruby-37": 0.18367346938775508,
        "ruby-27": 0.061224489795918324,
        "ruby-167": 0.24489795918367352,
        "ruby-23": 0.19166666666666665,
        "ruby-183": 0.2857142857142857,
        "ruby-126": 0.31999999999999995,
        "ruby-8": 0.16666666666666663,
        "ruby-7": 0.16326530612244894,
        "ruby-24": 0.18367346938775508,
        "ruby-58": 0.23863636363636365,
        "ruby-63": 0.2727272727272727,
        "ruby-157": 0.20408163265306123,
        "ruby-186": 0.2987012987012987,
        "ruby-173": 0.15887850467289721,
        "codebertscore_f1-197": 0.7573549747467041,
        "codebertscore_f3-197": 0.7997553944587708,
        "codebertscore_f1-29": 0.7422885894775391,
        "codebertscore_f3-29": 0.7594538331031799,
        "codebertscore_f1-6": 0.794353187084198,
        "codebertscore_f3-6": 0.8293201327323914,
        "codebertscore_f1-81": 0.725039541721344,
        "codebertscore_f3-81": 0.7396629452705383,
        "codebertscore_f1-70": 0.8448110222816467,
        "codebertscore_f3-70": 0.8578923940658569,
        "codebertscore_f1-60": 0.7897551655769348,
        "codebertscore_f3-60": 0.7860536575317383,
        "codebertscore_f1-37": 0.7706969380378723,
        "codebertscore_f3-37": 0.7148926258087158,
        "codebertscore_f1-27": 0.5839151740074158,
        "codebertscore_f3-27": 0.57587069272995,
        "codebertscore_f1-167": 0.7427145838737488,
        "codebertscore_f3-167": 0.7098511457443237,
        "codebertscore_f1-23": 0.7749502658843994,
        "codebertscore_f3-23": 0.8226054906845093,
        "codebertscore_f1-183": 0.7893760800361633,
        "codebertscore_f3-183": 0.8017604351043701,
        "codebertscore_f1-126": 0.8351526856422424,
        "codebertscore_f3-126": 0.8450936079025269,
        "codebertscore_f1-8": 0.7724357843399048,
        "codebertscore_f3-8": 0.8051279783248901,
        "codebertscore_f1-7": 0.7377074360847473,
        "codebertscore_f3-7": 0.7153711318969727,
        "codebertscore_f1-24": 0.7526686787605286,
        "codebertscore_f3-24": 0.7333012223243713,
        "codebertscore_f1-58": 0.7925158143043518,
        "codebertscore_f3-58": 0.8012046813964844,
        "codebertscore_f1-63": 0.7766406536102295,
        "codebertscore_f3-63": 0.7836118936538696,
        "codebertscore_f1-157": 0.7782529592514038,
        "codebertscore_f3-157": 0.7611304521560669,
        "codebertscore_f1-186": 0.8295474052429199,
        "codebertscore_f3-186": 0.8421197533607483,
        "codebertscore_f1-173": 0.7189900279045105,
        "codebertscore_f3-173": 0.7504199743270874,
        "codebertscore_s_f1-197": 0.7733981013298035,
        "codebertscore_s_f3-197": 0.8198995590209961,
        "codebertscore_s_f1-29": 0.753175675868988,
        "codebertscore_s_f3-29": 0.7743922472000122,
        "codebertscore_s_f1-6": 0.808229386806488,
        "codebertscore_s_f3-6": 0.8451792001724243,
        "codebertscore_s_f1-81": 0.7403581738471985,
        "codebertscore_s_f3-81": 0.7561663389205933,
        "codebertscore_s_f1-70": 0.8533145189285278,
        "codebertscore_s_f3-70": 0.8682942390441895,
        "codebertscore_s_f1-60": 0.8080791234970093,
        "codebertscore_s_f3-60": 0.8059050440788269,
        "codebertscore_s_f1-37": 0.8226405382156372,
        "codebertscore_s_f3-37": 0.7621909976005554,
        "codebertscore_s_f1-27": 0.6043257117271423,
        "codebertscore_s_f3-27": 0.6095601916313171,
        "codebertscore_s_f1-167": 0.7616747617721558,
        "codebertscore_s_f3-167": 0.7285764813423157,
        "codebertscore_s_f1-23": 0.7893940210342407,
        "codebertscore_s_f3-23": 0.8350014686584473,
        "codebertscore_s_f1-183": 0.8036558628082275,
        "codebertscore_s_f3-183": 0.8182918429374695,
        "codebertscore_s_f1-126": 0.8420665860176086,
        "codebertscore_s_f3-126": 0.853543221950531,
        "codebertscore_s_f1-8": 0.7810846567153931,
        "codebertscore_s_f3-8": 0.812781572341919,
        "codebertscore_s_f1-7": 0.7575368285179138,
        "codebertscore_s_f3-7": 0.7354583144187927,
        "codebertscore_s_f1-24": 0.7773962020874023,
        "codebertscore_s_f3-24": 0.7631015777587891,
        "codebertscore_s_f1-58": 0.8014879822731018,
        "codebertscore_s_f3-58": 0.8107049465179443,
        "codebertscore_s_f1-63": 0.7907664775848389,
        "codebertscore_s_f3-63": 0.8006187677383423,
        "codebertscore_s_f1-157": 0.7988244891166687,
        "codebertscore_s_f3-157": 0.7839934825897217,
        "codebertscore_s_f1-186": 0.8441954255104065,
        "codebertscore_s_f3-186": 0.8587737083435059,
        "codebertscore_s_f1-173": 0.7349221706390381,
        "codebertscore_s_f3-173": 0.7660083770751953,
        "gpt35_nsnr-197": 3,
        "raw_gpt35_nsnr-197": "3",
        "gpt35_nsnr-29": 0,
        "raw_gpt35_nsnr-29": "3 - The code correctly converts the input integer to binary and calculates the sum of its digits in binary. However, the conversion from list to stream and then to sum could be simplified by using a for loop or a forEach method on the list.",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-81": 3,
        "raw_gpt35_nsnr-81": "3",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-60": 4,
        "raw_gpt35_nsnr-60": "4",
        "gpt35_nsnr-37": 4,
        "raw_gpt35_nsnr-37": "4",
        "gpt35_nsnr-27": 3,
        "raw_gpt35_nsnr-27": "3",
        "gpt35_nsnr-167": 4,
        "raw_gpt35_nsnr-167": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-183": 4,
        "raw_gpt35_nsnr-183": "4",
        "gpt35_nsnr-126": 4,
        "raw_gpt35_nsnr-126": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-24": 4,
        "raw_gpt35_nsnr-24": "4",
        "gpt35_nsnr-58": 3,
        "raw_gpt35_nsnr-58": "3",
        "gpt35_nsnr-63": 4,
        "raw_gpt35_nsnr-63": "4",
        "gpt35_nsnr-157": 4,
        "raw_gpt35_nsnr-157": "4",
        "gpt35_nsnr-186": 4,
        "raw_gpt35_nsnr-186": "4",
        "gpt35_nsnr-173": 4,
        "raw_gpt35_nsnr-173": "4",
        "gpt35_nswr-197": 3,
        "raw_gpt35_nswr-197": "3",
        "gpt35_nswr-29": 3,
        "raw_gpt35_nswr-29": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-81": 3,
        "raw_gpt35_nswr-81": "3",
        "gpt35_nswr-70": 4,
        "raw_gpt35_nswr-70": "4",
        "gpt35_nswr-60": 3,
        "raw_gpt35_nswr-60": "3",
        "gpt35_nswr-37": 3,
        "raw_gpt35_nswr-37": "3",
        "gpt35_nswr-27": 2,
        "raw_gpt35_nswr-27": "2",
        "gpt35_nswr-167": 2,
        "raw_gpt35_nswr-167": "2",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-183": 3,
        "raw_gpt35_nswr-183": "3",
        "gpt35_nswr-126": 3,
        "raw_gpt35_nswr-126": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-24": 3,
        "raw_gpt35_nswr-24": "3",
        "gpt35_nswr-58": 3,
        "raw_gpt35_nswr-58": "3",
        "gpt35_nswr-63": 3,
        "raw_gpt35_nswr-63": "3",
        "gpt35_nswr-157": 3,
        "raw_gpt35_nswr-157": "3",
        "gpt35_nswr-186": 3,
        "raw_gpt35_nswr-186": "3",
        "gpt35_nswr-173": 3,
        "raw_gpt35_nswr-173": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // digits(1)  == 1\n    // digits(4)  == 0\n    // digits(235) == 15\n    public static int digits(int n) {\n",
        "snippet": [
            "        int product = 1, odd_count = 0;\n        for (char digit : String.valueOf(n).toCharArray()) {\n            int int_digit = digit - '0';\n            if (int_digit % 2 == 1) {\n                product *= int_digit;\n                odd_count += 1;\n            }\n        }\n        if (odd_count == 0) {\n            return 0;\n        } else {\n            return product;\n        }\n    }\n}"
        ],
        "simplified": "Given a positive integer n, return the product of the odd digits. Return 0 if all digits are even.",
        "task_id": "131",
        "34": "int[] tab = Integer.toString(n).chars().map(c -> c-'0').toArray();\n      int res = 1;\n      for (int i : tab)\n        if (i % 2 == 1)\n          res *= i;\n      return res;",
        "grade-34": {
            "execution": 0
        },
        "6": "int product = 1;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 == 1) {\n                product *= digit;\n            }\n            n /= 10;\n        }\n        return product;",
        "grade-6": {
            "execution": 0
        },
        "80": "int mul = 1;\n        while (n > 0) {\n            int x = n % 10;\n            if (x % 2 == 1) {\n                mul *= x;\n            }\n            n /= 10;\n        }\n        return mul;",
        "grade-80": {
            "execution": 0
        },
        "71": "return (n == 0) ? 0 : (n % 10) * digits(n / 10);",
        "grade-71": {
            "execution": 0
        },
        "64": "int mult = 1;\n        while (n > 0) {\n            int dig = n % 10;\n            if (dig % 2 == 1) mult *= dig;\n            n /= 10;\n        }\n        return mult;",
        "grade-64": {
            "execution": 0
        },
        "42": "int ans = 1;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 == 1) {\n                ans *= digit;\n            }\n            n /= 10;\n        }\n        return ans;",
        "grade-42": {
            "execution": 0
        },
        "32": "return Stream.of(String.valueOf(n).split(\"\"))\n                .mapToInt(Integer::parseInt)\n                .filter(i -> i % 2 != 0)\n                .reduce(1, (a, b) -> a * b);",
        "grade-32": {
            "execution": 0
        },
        "181": "// Implement a function that given a positive integer n,\n        // returns the product of the odd digits.\n        // The return value should be 0 if all digits are even.\n        // Work out how to do this in constant space.\n        // Your code here\n        if (n == 0) return 0;\n        int rem = n % 10;\n        if (rem % 2 == 0) return digits(n / 10);\n        else return rem * digits(n / 10);",
        "grade-181": {
            "execution": 0
        },
        "27": "int d;\n        int p = 1;\n        while (n > 0) {\n            d = n % 10;\n            if (d % 2 == 1) {\n                p *= d;\n            }\n            n /= 10;\n        }\n        return p;",
        "grade-27": {
            "execution": 0
        },
        "136": "int prod = 1;\n        while (n > 0) {\n            int d = n % 10;\n            if (d % 2 == 1) prod *= d;\n            n /= 10;\n        }\n        return prod;",
        "grade-136": {
            "execution": 0
        },
        "9": "int product = 1;\n        while (n > 0) {\n            int remainder = n % 10;\n            if (remainder % 2 == 1) {\n                product *= remainder;\n            }\n            n /= 10;\n        }\n        return product;",
        "grade-9": {
            "execution": 0
        },
        "7": "// IMPLEMENT THIS\n        int pro = 1;\n        for(int i = 0; i < getNumberOfDigits(n); i++) {\n            int digit = (int)Math.pow(10, i);\n            int getDigit = n/digit;\n            if(getDigit%2 != 0) {\n                pro *= getDigit;\n            }\n        }\n        return pro;",
        "grade-7": {
            "execution": 0
        },
        "29": "// Solution goes here.\n        return 0;",
        "grade-29": {
            "execution": 0
        },
        "62": "return \n            1\n            + 2\n            + 3\n            + 4\n            + 5\n            + 6\n            + 7\n            + 8\n            + 9\n            + 10\n            + 11\n            + 12\n            + 13\n            + 14\n            + 15\n            + 16\n            + 17\n            + 18\n            + 19\n            + 20\n            + 21\n            + 22\n            + 23\n            + 24\n            + 25\n            + 26\n            + 27\n            + 28\n            + 29\n            + 30\n            + 31\n            + 32\n            + 33\n            + 34\n            + 35\n            + 36\n            + 37\n            + 38\n            + 39\n            + 40\n            + 41\n            + 42\n            + 43\n            + 44\n            + 45\n            + 46\n            + 47\n            + 48\n            + 49\n            + 50\n            + 51\n            + 52\n            + 53\n            + 54\n            + 55\n            + 56\n            + 57\n            + 58\n            + 59\n            + 60\n            + 61\n            + 62\n            + 63\n            + 64\n            + 65\n            + 66\n            + 67\n            + 68\n            + 69\n            + 70\n            + 71\n            + 72\n            + 73\n            + 74\n            + 75\n            + 76\n            + 77\n            + 78\n            + 79\n            + 80\n            + 81\n            + 82\n            + 83\n            + 84\n            + 85\n            + 86\n            + 87\n            + 88\n            + 89\n            + 90\n            + 91\n            + 92\n            + 93\n            + 94\n            + 95\n            + 96\n            + 97\n            + 98\n            + 99\n            + 100\n            + 101\n            + 102\n            + 103\n            + 104\n            + 105\n            + 106\n            + 107\n            + 108\n            + 109\n            + 110\n            + 111\n            + 112\n            + 113\n            + 114\n            + 115\n            + 116\n            + 117\n            + 118\n            + 119\n            + 120\n            + 121\n            + 122\n            + 123\n            + 124\n            + 125\n            + 126\n            + 127",
        "grade-62": {
            "execution": 0
        },
        "67": "return new BigInteger(String.valueOf(n)).abs().toString().chars().filter(c -> ((c - '0') & 1) == 1).reduce(1, (a, b) -> a * (b - '0'));",
        "grade-67": {
            "execution": 0
        },
        "167": "int ans = 1;\n        while (n > 0) {\n            int a = n % 10;\n            if (a % 2 == 1) {\n                ans *= a;\n            }\n            n /= 10;\n        }\n        return ans;",
        "grade-167": {
            "execution": 0
        },
        "188": "String str = String.valueOf(n);\n        int len = str.length();\n        int total = 1;\n        for (int i = 0; i < len; i++) {\n            int x = Character.getNumericValue(str.charAt(i));\n            if (x % 2 != 0) {\n                total *= x;\n            }\n        }\n        return total;",
        "grade-188": {
            "execution": 0
        },
        "57": "int prod = 1;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 == 1) prod *= digit;\n            n /= 10;\n        }\n        return prod;",
        "grade-57": {
            "execution": 0
        },
        "134": "// Insert code here",
        "grade-134": {
            "execution": 0
        },
        "63": "return n == 0 ? 0 : \n            n % 2 == 0 ? digits(n / 10) : n % 10 * digits(n / 10);",
        "grade-63": {
            "execution": 0
        },
        "bleu-34": 0.18378768346625565,
        "bleu-6": 0.1850523967781492,
        "bleu-80": 0.12089205236455342,
        "bleu-71": 0.013141880694573348,
        "bleu-64": 0.10014807225192753,
        "bleu-42": 0.12462662308375329,
        "bleu-32": 0.1286976055890823,
        "bleu-181": 0.09033029291656869,
        "bleu-27": 0.12048549745448486,
        "bleu-136": 0.10014807225192753,
        "bleu-9": 0.18042027351085974,
        "bleu-7": 0.11861708129420669,
        "bleu-29": 7.14938423513001e-05,
        "bleu-62": 0.0019802174320121767,
        "bleu-67": 0.16877794161937182,
        "bleu-167": 0.12089205236455342,
        "bleu-188": 0.21069241342227887,
        "bleu-57": 0.10354772954961915,
        "bleu-134": 0.0,
        "bleu-63": 0.03371286081250344,
        "codebleu-34": 0.438297495563755,
        "codebleu-6": 0.30202930741674544,
        "codebleu-80": 0.2839522863856793,
        "codebleu-71": 0.12625405842723766,
        "codebleu-64": 0.2662470399234496,
        "codebleu-42": 0.2919957844756456,
        "codebleu-32": 0.3224044999594724,
        "codebleu-181": 0.4182692307692307,
        "codebleu-27": 0.3000170959512808,
        "codebleu-136": 0.2662470399234496,
        "codebleu-9": 0.30610233766038597,
        "codebleu-7": 0.44030982057015383,
        "codebleu-29": 0.04942706704087585,
        "codebleu-62": 0.056030389363722684,
        "codebleu-67": 0.302120172408046,
        "codebleu-167": 0.2839522863856793,
        "codebleu-188": 0.45370370370370366,
        "codebleu-57": 0.26789260761265665,
        "codebleu-134": 0.018518518518518517,
        "codebleu-63": 0.15717148772011352,
        "chrf-34": 0.20737422202021244,
        "chrf-6": 0.32600879183049825,
        "chrf-80": 0.11843979446024971,
        "chrf-71": 0.0665571688789436,
        "chrf-64": 0.13793614126649703,
        "chrf-42": 0.19408003309931965,
        "chrf-32": 0.1762850035147067,
        "chrf-181": 0.2628497081386546,
        "chrf-27": 0.1309555827399839,
        "chrf-136": 0.16491791856919202,
        "chrf-9": 0.2736634610296707,
        "chrf-7": 0.2632906967850851,
        "chrf-29": 0.05593813757184354,
        "chrf-62": 0.021130622066462258,
        "chrf-67": 0.18834515958581163,
        "chrf-167": 0.12236140068923279,
        "chrf-188": 0.2609989580636378,
        "chrf-57": 0.23207235081116206,
        "chrf-134": 0.01773475739378551,
        "chrf-63": 0.08938251519794138,
        "rougel-34": 0.37762237762237766,
        "rougel-6": 0.5161290322580645,
        "rougel-80": 0.46774193548387094,
        "rougel-71": 0.23300970873786406,
        "rougel-64": 0.4426229508196722,
        "rougel-42": 0.46774193548387094,
        "rougel-32": 0.3,
        "rougel-181": 0.2696629213483146,
        "rougel-27": 0.4444444444444444,
        "rougel-136": 0.4426229508196722,
        "rougel-9": 0.5161290322580645,
        "rougel-7": 0.39743589743589747,
        "rougel-29": 0.08988764044943821,
        "rougel-62": 0.017964071856287425,
        "rougel-67": 0.3466666666666667,
        "rougel-167": 0.46774193548387094,
        "rougel-188": 0.37735849056603776,
        "rougel-57": 0.4426229508196722,
        "rougel-134": 0.0,
        "rougel-63": 0.247787610619469,
        "meteor-34": 0.3530341468217768,
        "meteor-6": 0.34083769633507854,
        "meteor-80": 0.24954188481675393,
        "meteor-71": 0.15021399265113378,
        "meteor-64": 0.23668079436499004,
        "meteor-42": 0.26297524337369116,
        "meteor-32": 0.2541921746073995,
        "meteor-181": 0.2793704156479218,
        "meteor-27": 0.2555948302328678,
        "meteor-136": 0.23668079436499004,
        "meteor-9": 0.32631166495992764,
        "meteor-7": 0.3732954707374299,
        "meteor-29": 0.027434842249657067,
        "meteor-62": 0.020533880903490762,
        "meteor-67": 0.25432036194620256,
        "meteor-167": 0.24954188481675393,
        "meteor-188": 0.36938534278959817,
        "meteor-57": 0.25019685039370076,
        "meteor-134": 0.0,
        "meteor-63": 0.15174302788844624,
        "ruby-34": 0.25,
        "ruby-6": 0.4,
        "ruby-80": 0.36250000000000004,
        "ruby-71": 0.13749999999999996,
        "ruby-64": 0.3375,
        "ruby-42": 0.36250000000000004,
        "ruby-32": 0.19999999999999996,
        "ruby-181": 0.12244897959183676,
        "ruby-27": 0.3375,
        "ruby-136": 0.3375,
        "ruby-9": 0.4,
        "ruby-7": 0.1875,
        "ruby-29": 0.050000000000000044,
        "ruby-62": 0.003937007874015741,
        "ruby-67": 0.16249999999999998,
        "ruby-167": 0.36250000000000004,
        "ruby-188": 0.16249999999999998,
        "ruby-57": 0.3375,
        "ruby-134": 0.0,
        "ruby-63": 0.15000000000000002,
        "codebertscore_f1-34": 0.7888616323471069,
        "codebertscore_f3-34": 0.7780145406723022,
        "codebertscore_f1-6": 0.8292738795280457,
        "codebertscore_f3-6": 0.7934329509735107,
        "codebertscore_f1-80": 0.7943307757377625,
        "codebertscore_f3-80": 0.7624990344047546,
        "codebertscore_f1-71": 0.6843783259391785,
        "codebertscore_f3-71": 0.6481221914291382,
        "codebertscore_f1-64": 0.7961270809173584,
        "codebertscore_f3-64": 0.7645195722579956,
        "codebertscore_f1-42": 0.8163223266601562,
        "codebertscore_f3-42": 0.7838258147239685,
        "codebertscore_f1-32": 0.7210550904273987,
        "codebertscore_f3-32": 0.7148869037628174,
        "codebertscore_f1-181": 0.7168781757354736,
        "codebertscore_f3-181": 0.7385237216949463,
        "codebertscore_f1-27": 0.7930610179901123,
        "codebertscore_f3-27": 0.763052761554718,
        "codebertscore_f1-136": 0.7971850037574768,
        "codebertscore_f3-136": 0.7642524242401123,
        "codebertscore_f1-9": 0.8000894784927368,
        "codebertscore_f3-9": 0.7696164846420288,
        "codebertscore_f1-7": 0.7754843831062317,
        "codebertscore_f3-7": 0.779721736907959,
        "codebertscore_f1-29": 0.5953330397605896,
        "codebertscore_f3-29": 0.5717061758041382,
        "codebertscore_f1-62": 0.5997270345687866,
        "codebertscore_f3-62": 0.6128881573677063,
        "codebertscore_f1-67": 0.7211290597915649,
        "codebertscore_f3-67": 0.7083934545516968,
        "codebertscore_f1-167": 0.794502317905426,
        "codebertscore_f3-167": 0.7616563439369202,
        "codebertscore_f1-188": 0.7844568490982056,
        "codebertscore_f3-188": 0.7826731204986572,
        "codebertscore_f1-57": 0.8175576329231262,
        "codebertscore_f3-57": 0.7835756540298462,
        "codebertscore_f1-134": 0.48859649896621704,
        "codebertscore_f3-134": 0.47619152069091797,
        "codebertscore_f1-63": 0.6947402954101562,
        "codebertscore_f3-63": 0.6640792489051819,
        "codebertscore_s_f1-34": 0.8074746131896973,
        "codebertscore_s_f3-34": 0.7977483868598938,
        "codebertscore_s_f1-6": 0.8421541452407837,
        "codebertscore_s_f3-6": 0.805478036403656,
        "codebertscore_s_f1-80": 0.8056760430335999,
        "codebertscore_s_f3-80": 0.7730820178985596,
        "codebertscore_s_f1-71": 0.7146705389022827,
        "codebertscore_s_f3-71": 0.6751912832260132,
        "codebertscore_s_f1-64": 0.8117247223854065,
        "codebertscore_s_f3-64": 0.780025064945221,
        "codebertscore_s_f1-42": 0.8263393640518188,
        "codebertscore_s_f3-42": 0.7936214804649353,
        "codebertscore_s_f1-32": 0.7393683195114136,
        "codebertscore_s_f3-32": 0.7333328127861023,
        "codebertscore_s_f1-181": 0.730251669883728,
        "codebertscore_s_f3-181": 0.7480908632278442,
        "codebertscore_s_f1-27": 0.8077979683876038,
        "codebertscore_s_f3-27": 0.7765244245529175,
        "codebertscore_s_f1-136": 0.8110730051994324,
        "codebertscore_s_f3-136": 0.7779301404953003,
        "codebertscore_s_f1-9": 0.8111779093742371,
        "codebertscore_s_f3-9": 0.7796401977539062,
        "codebertscore_s_f1-7": 0.7930396199226379,
        "codebertscore_s_f3-7": 0.7957829236984253,
        "codebertscore_s_f1-29": 0.6182679533958435,
        "codebertscore_s_f3-29": 0.5893361568450928,
        "codebertscore_s_f1-62": 0.6307306885719299,
        "codebertscore_s_f3-62": 0.6430234313011169,
        "codebertscore_s_f1-67": 0.7433387637138367,
        "codebertscore_s_f3-67": 0.7302374839782715,
        "codebertscore_s_f1-167": 0.8064753413200378,
        "codebertscore_s_f3-167": 0.7738808989524841,
        "codebertscore_s_f1-188": 0.7963960766792297,
        "codebertscore_s_f3-188": 0.7915710806846619,
        "codebertscore_s_f1-57": 0.8293009400367737,
        "codebertscore_s_f3-57": 0.7954595685005188,
        "codebertscore_s_f1-134": 0.5071200728416443,
        "codebertscore_s_f3-134": 0.4987659752368927,
        "codebertscore_s_f1-63": 0.7291736006736755,
        "codebertscore_s_f3-63": 0.6916152238845825,
        "gpt35_nsnr-34": 4,
        "raw_gpt35_nsnr-34": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-80": 4,
        "raw_gpt35_nsnr-80": "4",
        "gpt35_nsnr-71": 4,
        "raw_gpt35_nsnr-71": "4",
        "gpt35_nsnr-64": 4,
        "raw_gpt35_nsnr-64": "4",
        "gpt35_nsnr-42": 4,
        "raw_gpt35_nsnr-42": "4",
        "gpt35_nsnr-32": 3,
        "raw_gpt35_nsnr-32": "3",
        "gpt35_nsnr-181": 4,
        "raw_gpt35_nsnr-181": "4",
        "gpt35_nsnr-27": 4,
        "raw_gpt35_nsnr-27": "4",
        "gpt35_nsnr-136": 4,
        "raw_gpt35_nsnr-136": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-29": 2,
        "raw_gpt35_nsnr-29": "2",
        "gpt35_nsnr-62": 0,
        "raw_gpt35_nsnr-62": "0",
        "gpt35_nsnr-67": 4,
        "raw_gpt35_nsnr-67": "4",
        "gpt35_nsnr-167": 4,
        "raw_gpt35_nsnr-167": "4",
        "gpt35_nsnr-188": 4,
        "raw_gpt35_nsnr-188": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-134": 0,
        "raw_gpt35_nsnr-134": "3 - The code correctly calculates the product of the odd digits in a positive integer n and returns 0 if all digits are even. It uses a while loop to iterate through each digit of the integer and checks if it is odd before multiplying it with the product. The code handles both single-digit and multi-digit integers. However, it does not handle negative integers, which is not specified in the problem statement.",
        "gpt35_nsnr-63": 4,
        "raw_gpt35_nsnr-63": "4",
        "gpt35_nswr-34": 4,
        "raw_gpt35_nswr-34": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-80": 4,
        "raw_gpt35_nswr-80": "4",
        "gpt35_nswr-71": 2,
        "raw_gpt35_nswr-71": "2",
        "gpt35_nswr-64": 4,
        "raw_gpt35_nswr-64": "4",
        "gpt35_nswr-42": 4,
        "raw_gpt35_nswr-42": "4",
        "gpt35_nswr-32": 3,
        "raw_gpt35_nswr-32": "3",
        "gpt35_nswr-181": 3,
        "raw_gpt35_nswr-181": "3",
        "gpt35_nswr-27": 3,
        "raw_gpt35_nswr-27": "3",
        "gpt35_nswr-136": 4,
        "raw_gpt35_nswr-136": "4",
        "gpt35_nswr-9": 4,
        "raw_gpt35_nswr-9": "4",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-29": 2,
        "raw_gpt35_nswr-29": "2",
        "gpt35_nswr-62": 0,
        "raw_gpt35_nswr-62": "0",
        "gpt35_nswr-67": 3,
        "raw_gpt35_nswr-67": "3",
        "gpt35_nswr-167": 4,
        "raw_gpt35_nswr-167": "4",
        "gpt35_nswr-188": 4,
        "raw_gpt35_nswr-188": "4",
        "gpt35_nswr-57": 4,
        "raw_gpt35_nswr-57": "4",
        "gpt35_nswr-134": 4,
        "raw_gpt35_nswr-134": "4",
        "gpt35_nswr-63": 4,
        "raw_gpt35_nswr-63": "4"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    // but now you need to eat more carrots to complete the day's meals.\n    // you should return an array of [ total number of eaten carrots after your meals,\n    // the number of carrots left after your meals ]\n    // if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    // Example:\n    // * eat(5, 6, 10) -> [11, 4]\n    // * eat(4, 8, 9) -> [12, 1]\n    // * eat(1, 10, 10) -> [11, 0]\n    // * eat(2, 11, 5) -> [7, 0]\n    // Variables:\n    // @number : integer\n    // the number of carrots that you have eaten.\n    // @need : integer\n    // the number of carrots that you need to eat.\n    // @remaining : integer\n    // the number of remaining carrots thet exist in stock\n    // Constrain:\n    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining <= 1000\n    // Have fun :)\n    public static ArrayList<Integer> eat(int number, int need, int remaining) {\n",
        "snippet": [
            "        if (need <= remaining) {\n            return Arrays.asList(number + need, remaining - need);\n        } else {\n            return Arrays.asList(number + remaining, 0);\n        }\n    }\n}"
        ],
        "simplified": "You're a hungry rabbit, and you already have eaten a certain number of carrots, but now you need to eat more carrots to complete the day's meals. you should return an array of [ total number of eaten carrots after your meals, the number of carrots left after your meals ] if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.",
        "task_id": "159",
        "173": "ArrayList<Integer> result = new ArrayList<Integer>();\n        result.add(0);\n        result.add(0);\n        // your code here\n        return result;",
        "grade-173": {
            "execution": 0
        },
        "28": "return new ArrayList<Integer>(Arrays.asList(new Integer[]{}));",
        "grade-28": {
            "execution": 0
        },
        "6": "return new ArrayList<Integer>(Arrays.asList(0,0));",
        "grade-6": {
            "execution": 0
        },
        "71": "ArrayList<Integer> result = new ArrayList<Integer>();\n        if (need > remaining) {\n            result.add(number + remaining);\n            result.add(0);\n        } else {\n            result.add(number + need);\n            result.add(remaining - need);\n        }\n        return result;",
        "grade-71": {
            "execution": 1
        },
        "63": "// your code is here\n        return new ArrayList<Integer>();",
        "grade-63": {
            "execution": 0
        },
        "58": "if (remaining <= 0) return new ArrayList<Integer>(List.of(number, remaining));\n        if (need < remaining) {\n            return new ArrayList<Integer>(List.of(number + need, remaining - need));\n        } else {\n            return new ArrayList<Integer>(List.of(number + remaining, 0));\n        }",
        "grade-58": {
            "execution": 1
        },
        "35": "// start coding here",
        "grade-35": {
            "execution": 0
        },
        "26": "ArrayList<Integer> returned = new ArrayList<Integer>();\n        returned.add(number + need);\n        returned.add(remaining - need);\n        return returned;",
        "grade-26": {
            "execution": 0
        },
        "186": "int[] arr = new int[2];\n        if(remaining >= need){\n            arr[0] = number + need;\n            arr[1] = remaining - need;\n        }\n        else{\n            arr[0] = number + remaining;\n            arr[1] = 0;\n        }\n        return new ArrayList<Integer>(Arrays.asList(arr[0], arr[1]));",
        "grade-186": {
            "execution": 1
        },
        "146": "ArrayList<Integer> arrayList = new ArrayList<>();\n        int total;\n        int remainingCarrots;\n        if (remaining >= need) {\n            total = number + need;\n            remainingCarrots = remaining - need;\n        } else {\n            total = number + remaining;\n            remainingCarrots = 0;\n        }\n        arrayList.add(total);\n        arrayList.add(remainingCarrots);\n        return arrayList;",
        "grade-146": {
            "execution": 1
        },
        "22": "ArrayList<Integer> li = new ArrayList<Integer>();\n        if (number > 0 && number <= 1000 && need > 0 && need <= 1000 && remaining > 0 && remaining <= 1000) {\n            if (number + need <= remaining) {\n                li.add(number + need);\n                li.add(remaining - (number + need));\n            } else {\n                li.add(remaining);\n                li.add(0);\n            }\n        }\n        return li;",
        "grade-22": {
            "execution": 0
        },
        "160": "ArrayList<Integer> result = new ArrayList<Integer>();\n        if (remaining > need) {\n            result.add(number + need);\n            result.add(remaining - need);\n        } else {\n            result.add(number + remaining);\n            result.add(0);\n        }\n        return result;",
        "grade-160": {
            "execution": 1
        },
        "112": "ArrayList<Integer> result = new ArrayList<Integer>();\n        int total = number + need;\n        if (remaining < need) {\n            result.add(number + remaining);\n            result.add(0);\n        } else {\n            result.add(total);\n            result.add(remaining - need);\n        }\n        return result;",
        "grade-112": {
            "execution": 1
        },
        "8": "// ... your code is here\n        int total = 0;\n        if(remaining <= 0){\n            total = number + remaining;\n            remaining = 0;\n        }\n        else if(remaining < need){\n            total = number + remaining;\n            remaining = 0;\n        }\n        else{\n            total = number + need;\n            remaining = remaining - need;\n        }\n        ArrayList<Integer> list = new ArrayList<Integer>();\n        list.add(total);\n        list.add(remaining);\n        return list;",
        "grade-8": {
            "execution": 1
        },
        "7": "ArrayList<Integer> eaten = new ArrayList<Integer>();\n        if (remaining < need) {\n            eaten.add(number + remaining);\n            eaten.add(0);\n        } else {\n            eaten.add(number + need);\n            eaten.add(remaining - need);\n        }\n        return eaten;",
        "grade-7": {
            "execution": 1
        },
        "23": "return new ArrayList<Integer>(new Pair<Integer, Integer>(number + need > remaining ? number + remaining : number + need,\n                remaining - need < 0 ? 0 : remaining - need));",
        "grade-23": {
            "execution": 0
        },
        "56": "ArrayList<Integer> result = new ArrayList<Integer>();\n        // write your code here\n        int total = number + need;\n        if (total > remaining) {\n            result.add(remaining);\n            result.add(0);\n        } else {\n            result.add(total);\n            result.add(remaining - total);\n        }\n        return result;",
        "grade-56": {
            "execution": 0
        },
        "60": "return new ArrayList<Integer>(Arrays.asList(number+Math.min(need, remaining), remaining-Math.min(need, remaining)));",
        "grade-60": {
            "execution": 1
        },
        "134": "ArrayList<Integer> solution = new ArrayList<Integer>();\n        // your code\n        return solution;",
        "grade-134": {
            "execution": 0
        },
        "163": "return new ArrayList<Integer>(Arrays.asList(number + need > remaining ? number + remaining : number + need,\n                number + need > remaining ? 0 : remaining - need));",
        "grade-163": {
            "execution": 0
        },
        "bleu-173": 0.054607039914120074,
        "bleu-28": 0.08910308979951242,
        "bleu-6": 0.090303662372963,
        "bleu-71": 0.2638639002392655,
        "bleu-63": 0.012675529937456315,
        "bleu-58": 0.31033283265619294,
        "bleu-35": 0.0,
        "bleu-26": 0.17444113154315155,
        "bleu-186": 0.13963819757019044,
        "bleu-146": 0.09132199284647091,
        "bleu-22": 0.1624852900149808,
        "bleu-160": 0.25065373560400084,
        "bleu-112": 0.2166831333668782,
        "bleu-8": 0.07654069113747568,
        "bleu-7": 0.25065373560400084,
        "bleu-23": 0.24973115240766894,
        "bleu-56": 0.13194326445586063,
        "bleu-60": 0.23570488394582056,
        "bleu-134": 0.020997769887129626,
        "bleu-163": 0.309225969509486,
        "codebleu-173": 0.3505392912172573,
        "codebleu-28": 0.21732465782557467,
        "codebleu-6": 0.19077570053211856,
        "codebleu-71": 0.5784459912639439,
        "codebleu-63": 0.13028462935881913,
        "codebleu-58": 0.6887337462745337,
        "codebleu-35": 0.03389830508474576,
        "codebleu-26": 0.4241297643061611,
        "codebleu-186": 0.5065913370998116,
        "codebleu-146": 0.5379643896593048,
        "codebleu-22": 0.5858719562334567,
        "codebleu-160": 0.5766243286342648,
        "codebleu-112": 0.5830287280300276,
        "codebleu-8": 0.5630885122410545,
        "codebleu-7": 0.5766243286342648,
        "codebleu-23": 0.4089386767857301,
        "codebleu-56": 0.5278633795582947,
        "codebleu-60": 0.39456013379482113,
        "codebleu-134": 0.1722647846278577,
        "codebleu-163": 0.4372781260968373,
        "chrf-173": 0.19956603142094656,
        "chrf-28": 0.23778041574106168,
        "chrf-6": 0.22331364973496654,
        "chrf-71": 0.5912903366927892,
        "chrf-63": 0.12276259606524455,
        "chrf-58": 0.6297702106865822,
        "chrf-35": 0.03105451717761387,
        "chrf-26": 0.38612179486798615,
        "chrf-186": 0.5594619651787605,
        "chrf-146": 0.4555462834188727,
        "chrf-22": 0.49682797177033067,
        "chrf-160": 0.5689165183887805,
        "chrf-112": 0.5455816842743751,
        "chrf-8": 0.4526604410781754,
        "chrf-7": 0.5452940285607956,
        "chrf-23": 0.49903264876020365,
        "chrf-56": 0.4476922970692188,
        "chrf-60": 0.5169470399692704,
        "chrf-134": 0.1668831016228276,
        "chrf-163": 0.5761959028700953,
        "rougel-173": 0.3,
        "rougel-28": 0.31249999999999994,
        "rougel-6": 0.39344262295081966,
        "rougel-71": 0.4528301886792453,
        "rougel-63": 0.17241379310344826,
        "rougel-58": 0.55,
        "rougel-35": 0.0,
        "rougel-26": 0.379746835443038,
        "rougel-186": 0.3870967741935484,
        "rougel-146": 0.34426229508196726,
        "rougel-22": 0.3945578231292517,
        "rougel-160": 0.5094339622641509,
        "rougel-112": 0.3783783783783784,
        "rougel-8": 0.2816901408450704,
        "rougel-7": 0.4339622641509434,
        "rougel-23": 0.3255813953488372,
        "rougel-56": 0.33043478260869563,
        "rougel-60": 0.430379746835443,
        "rougel-134": 0.24615384615384614,
        "rougel-163": 0.4096385542168674,
        "meteor-173": 0.25043773741690406,
        "meteor-28": 0.3194444444444444,
        "meteor-6": 0.3370277078085642,
        "meteor-71": 0.51675131591098,
        "meteor-63": 0.12172381643012534,
        "meteor-58": 0.7409440759099966,
        "meteor-35": 0.0,
        "meteor-26": 0.3555890227576975,
        "meteor-186": 0.6933038110574342,
        "meteor-146": 0.5887799661349257,
        "meteor-22": 0.6049510518109551,
        "meteor-160": 0.6100932680764615,
        "meteor-112": 0.5109710998493359,
        "meteor-8": 0.5126895113383956,
        "meteor-7": 0.51675131591098,
        "meteor-23": 0.42763049631384936,
        "meteor-56": 0.41721521618625274,
        "meteor-60": 0.4614493476866044,
        "meteor-134": 0.1371571072319202,
        "meteor-163": 0.5337977150442726,
        "ruby-173": 0.09523809523809523,
        "ruby-28": 0.19047619047619047,
        "ruby-6": 0.23809523809523814,
        "ruby-71": 0.28125,
        "ruby-63": 0.11904761904761907,
        "ruby-58": 0.39743589743589747,
        "ruby-35": 0.0,
        "ruby-26": 0.16666666666666663,
        "ruby-186": 0.24390243902439024,
        "ruby-146": 0.19999999999999996,
        "ruby-22": 0.23809523809523814,
        "ruby-160": 0.34375,
        "ruby-112": 0.23188405797101452,
        "ruby-8": 0.18000000000000005,
        "ruby-7": 0.265625,
        "ruby-23": 0.13636363636363635,
        "ruby-56": 0.20547945205479456,
        "ruby-60": 0.30952380952380953,
        "ruby-134": 0.11904761904761907,
        "ruby-163": 0.2142857142857143,
        "codebertscore_f1-173": 0.6634982228279114,
        "codebertscore_f3-173": 0.6638068556785583,
        "codebertscore_f1-28": 0.7348178625106812,
        "codebertscore_f3-28": 0.7103742361068726,
        "codebertscore_f1-6": 0.7544865608215332,
        "codebertscore_f3-6": 0.7273486852645874,
        "codebertscore_f1-71": 0.8068390488624573,
        "codebertscore_f3-71": 0.8180566430091858,
        "codebertscore_f1-63": 0.6619284749031067,
        "codebertscore_f3-63": 0.665054440498352,
        "codebertscore_f1-58": 0.864335834980011,
        "codebertscore_f3-58": 0.8788954019546509,
        "codebertscore_f1-35": 0.5140082836151123,
        "codebertscore_f3-35": 0.5018965005874634,
        "codebertscore_f1-26": 0.7663036584854126,
        "codebertscore_f3-26": 0.7719449400901794,
        "codebertscore_f1-186": 0.8110594153404236,
        "codebertscore_f3-186": 0.8568170666694641,
        "codebertscore_f1-146": 0.7536804676055908,
        "codebertscore_f3-146": 0.7846428155899048,
        "codebertscore_f1-22": 0.7646692991256714,
        "codebertscore_f3-22": 0.7782307267189026,
        "codebertscore_f1-160": 0.8051534295082092,
        "codebertscore_f3-160": 0.8166496157646179,
        "codebertscore_f1-112": 0.7835279107093811,
        "codebertscore_f3-112": 0.7983105778694153,
        "codebertscore_f1-8": 0.7429099678993225,
        "codebertscore_f3-8": 0.7581048607826233,
        "codebertscore_f1-7": 0.7843705415725708,
        "codebertscore_f3-7": 0.8004700541496277,
        "codebertscore_f1-23": 0.8089304566383362,
        "codebertscore_f3-23": 0.8053722977638245,
        "codebertscore_f1-56": 0.7514988780021667,
        "codebertscore_f3-56": 0.7800887227058411,
        "codebertscore_f1-60": 0.8135643601417542,
        "codebertscore_f3-60": 0.8275790214538574,
        "codebertscore_f1-134": 0.6663567423820496,
        "codebertscore_f3-134": 0.6630384922027588,
        "codebertscore_f1-163": 0.8652937412261963,
        "codebertscore_f3-163": 0.8661715388298035,
        "codebertscore_s_f1-173": 0.6904042363166809,
        "codebertscore_s_f3-173": 0.6806066632270813,
        "codebertscore_s_f1-28": 0.7553144097328186,
        "codebertscore_s_f3-28": 0.7226228713989258,
        "codebertscore_s_f1-6": 0.789900541305542,
        "codebertscore_s_f3-6": 0.7591533064842224,
        "codebertscore_s_f1-71": 0.8257758021354675,
        "codebertscore_s_f3-71": 0.8372853994369507,
        "codebertscore_s_f1-63": 0.6710034012794495,
        "codebertscore_s_f3-63": 0.6663445830345154,
        "codebertscore_s_f1-58": 0.8715131878852844,
        "codebertscore_s_f3-58": 0.8829014301300049,
        "codebertscore_s_f1-35": 0.5519965291023254,
        "codebertscore_s_f3-35": 0.5343391299247742,
        "codebertscore_s_f1-26": 0.7984704375267029,
        "codebertscore_s_f3-26": 0.7984861731529236,
        "codebertscore_s_f1-186": 0.8267967700958252,
        "codebertscore_s_f3-186": 0.8765650391578674,
        "codebertscore_s_f1-146": 0.7719061970710754,
        "codebertscore_s_f3-146": 0.8016692996025085,
        "codebertscore_s_f1-22": 0.7923531532287598,
        "codebertscore_s_f3-22": 0.8087908625602722,
        "codebertscore_s_f1-160": 0.8229987025260925,
        "codebertscore_s_f3-160": 0.8320726752281189,
        "codebertscore_s_f1-112": 0.809357762336731,
        "codebertscore_s_f3-112": 0.8260209560394287,
        "codebertscore_s_f1-8": 0.7626082897186279,
        "codebertscore_s_f3-8": 0.7760233879089355,
        "codebertscore_s_f1-7": 0.8028256893157959,
        "codebertscore_s_f3-7": 0.8230288028717041,
        "codebertscore_s_f1-23": 0.8328673839569092,
        "codebertscore_s_f3-23": 0.8262675404548645,
        "codebertscore_s_f1-56": 0.7762443423271179,
        "codebertscore_s_f3-56": 0.8082007169723511,
        "codebertscore_s_f1-60": 0.8463582396507263,
        "codebertscore_s_f3-60": 0.8588855266571045,
        "codebertscore_s_f1-134": 0.6761026382446289,
        "codebertscore_s_f3-134": 0.6665608286857605,
        "codebertscore_s_f1-163": 0.8926122784614563,
        "codebertscore_s_f3-163": 0.8931267857551575,
        "gpt35_nsnr-173": 0,
        "raw_gpt35_nsnr-173": "Score: 1",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-71": 4,
        "raw_gpt35_nsnr-71": "4",
        "gpt35_nsnr-63": 4,
        "raw_gpt35_nsnr-63": "4",
        "gpt35_nsnr-58": 4,
        "raw_gpt35_nsnr-58": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-186": 4,
        "raw_gpt35_nsnr-186": "4",
        "gpt35_nsnr-146": 4,
        "raw_gpt35_nsnr-146": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-160": 4,
        "raw_gpt35_nsnr-160": "4",
        "gpt35_nsnr-112": 4,
        "raw_gpt35_nsnr-112": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-56": 4,
        "raw_gpt35_nsnr-56": "4",
        "gpt35_nsnr-60": 4,
        "raw_gpt35_nsnr-60": "4",
        "gpt35_nsnr-134": 2,
        "raw_gpt35_nsnr-134": "2",
        "gpt35_nsnr-163": 4,
        "raw_gpt35_nsnr-163": "4",
        "gpt35_nswr-173": 3,
        "raw_gpt35_nswr-173": "3",
        "gpt35_nswr-28": 2,
        "raw_gpt35_nswr-28": "2",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-71": 4,
        "raw_gpt35_nswr-71": "4",
        "gpt35_nswr-63": 2,
        "raw_gpt35_nswr-63": "2",
        "gpt35_nswr-58": 3,
        "raw_gpt35_nswr-58": "3",
        "gpt35_nswr-35": 4,
        "raw_gpt35_nswr-35": "4",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-186": 4,
        "raw_gpt35_nswr-186": "4",
        "gpt35_nswr-146": 4,
        "raw_gpt35_nswr-146": "4",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-160": 4,
        "raw_gpt35_nswr-160": "4",
        "gpt35_nswr-112": 4,
        "raw_gpt35_nswr-112": "4",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-56": 4,
        "raw_gpt35_nswr-56": "4",
        "gpt35_nswr-60": 4,
        "raw_gpt35_nswr-60": "4",
        "gpt35_nswr-134": 3,
        "raw_gpt35_nswr-134": "3",
        "gpt35_nswr-163": 4,
        "raw_gpt35_nswr-163": "4"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an integer a and returns True \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // iscube(1) ==> True\n    // iscube(2) ==> False\n    // iscube(-1) ==> True\n    // iscube(64) ==> True\n    // iscube(0) ==> True\n    // iscube(180) ==> False\n    public static boolean iscube(int a) {\n",
        "snippet": [
            "        a = Math.abs(a);\n        return Math.round(Math.pow(Math.round(Math.pow(a, 1. / 3)), 3)) == a;\n    }\n}"
        ],
        "simplified": "Write a function that takes an integer a and returns True if this ingeger is a cube of some integer number. Note: you may assume the input is always valid.",
        "task_id": "77",
        "40": "// your code here\n        return ((double)Math.sqrt(a) == Math.floor(Math.sqrt(a)));",
        "grade-40": {
            "execution": 0
        },
        "6": "return (Math.pow(Math.round(Math.cbrt(a)), 3) == a);",
        "grade-6": {
            "execution": 1
        },
        "102": "double x = (double) a;\n        return Math.cbrt(x) % 1 == 0;",
        "grade-102": {
            "execution": 1
        },
        "87": "// insert your solution here\n        return false;",
        "grade-87": {
            "execution": 0
        },
        "79": "// Write your code here.\n        for(int i = 0; i < Math.abs(a); i++) {\n            if(i * i * i == a) {\n                return true;\n            }\n        }\n        return false;",
        "grade-79": {
            "execution": 0
        },
        "50": "// TODO: write your code here\n        return false;",
        "grade-50": {
            "execution": 0
        },
        "36": "return Math.abs(a) == Math.pow(Math.round(Math.cbrt(Math.abs(a))), 3);",
        "grade-36": {
            "execution": 1
        },
        "27": "return Math.sqrt(a) % 1 == 0;",
        "grade-27": {
            "execution": 0
        },
        "154": "// Implementation here.",
        "grade-154": {
            "execution": 0
        },
        "8": "// write your code here\n        return Math.cbrt(a) == Math.round(Math.cbrt(a));",
        "grade-8": {
            "execution": 1
        },
        "7": "return Math.cbrt(a) == Math.floor(Math.cbrt(a));",
        "grade-7": {
            "execution": 1
        },
        "29": "if (a < 0) {\n            a = -a;\n        }\n        for (int i = 0; i < a; i++) {\n            if (i * i * i == a) {\n                return true;\n            }\n        }\n        return false;",
        "grade-29": {
            "execution": 0
        },
        "77": "// Write code here\n\t\treturn false;",
        "grade-77": {
            "execution": 0
        },
        "84": "// This is your job.\n        return Math.sqrt(a)%1 == 0;",
        "grade-84": {
            "execution": 0
        },
        "186": "if (a == 0) return true;\n        else if (a < 0) a = -a;\n        // System.out.println(a);\n        int l = 0, r = 1000000;\n        while (l < r) {\n            int mid = (l + r) / 2;\n            if (mid * mid * mid <= a) l = mid + 1;\n            else r = mid;\n        }\n        return (l * l * l == a);",
        "grade-186": {
            "execution": 0
        },
        "71": "// your code here\n        // calculate the sqrt of a; \n        // if it is an interger\n        // return true;\n        // else return false;\n        double sqrt = Math.sqrt(a);\n        if(sqrt - (int)sqrt == 0) {\n            return true;\n        } else {\n            return false;\n        }",
        "grade-71": {
            "execution": 0
        },
        "153": "// Write your code here\n        if (a==0) return true;\n        else return (Math.pow(Math.round(Math.pow(a, 1.0/3.0)), 3) == a);",
        "grade-153": {
            "execution": 0
        },
        "78": "return false;",
        "grade-78": {
            "execution": 0
        },
        "161": "return a == 0 || a == 1 || a == -1 || (a > 0 && (int)Math.cbrt(a) * (int)Math.cbrt(a) * (int)Math.cbrt(a) == a);",
        "grade-161": {
            "execution": 1
        },
        "103": "double cube = Math.pow(a, 1/3);\n        return (Math.floor(cube) == cube);",
        "grade-103": {
            "execution": 0
        },
        "bleu-40": 0.11029150402007568,
        "bleu-6": 0.33966377205211307,
        "bleu-102": 0.05909589286406793,
        "bleu-87": 0.0012843011998689168,
        "bleu-79": 0.18837227000249868,
        "bleu-50": 0.002455673248045251,
        "bleu-36": 0.47573327850448494,
        "bleu-27": 0.021403651802865086,
        "bleu-154": 5.204994022101803e-05,
        "bleu-8": 0.19264882285832546,
        "bleu-7": 0.08449174045297286,
        "bleu-29": 0.08073097285821378,
        "bleu-77": 0.0008073890055259527,
        "bleu-84": 0.0453950165258593,
        "bleu-186": 0.05505588134978215,
        "bleu-71": 0.07394872640424692,
        "bleu-153": 0.5051331750834357,
        "bleu-78": 4.0232004088914637e-07,
        "bleu-161": 0.09943287076927802,
        "bleu-103": 0.2241696007759642,
        "codebleu-40": 0.39304427588114904,
        "codebleu-6": 0.39453278340551073,
        "codebleu-102": 0.25331101158372654,
        "codebleu-87": 0.0743642385671417,
        "codebleu-79": 0.4622146070254236,
        "codebleu-50": 0.08577748262696355,
        "codebleu-36": 0.561991406138299,
        "codebleu-27": 0.14967185021790705,
        "codebleu-154": 0.031251422690899235,
        "codebleu-8": 0.3737027424476439,
        "codebleu-7": 0.2836430530654792,
        "codebleu-29": 0.3645833333333333,
        "codebleu-77": 0.06353723059099717,
        "codebleu-84": 0.18327233588621092,
        "codebleu-186": 0.4964849002874502,
        "codebleu-71": 0.402241368842298,
        "codebleu-153": 0.6012051918305026,
        "codebleu-78": 0.031250945831870054,
        "codebleu-161": 0.4583333333333333,
        "codebleu-103": 0.3991138541448795,
        "chrf-40": 0.2644209760862303,
        "chrf-6": 0.47208704632460274,
        "chrf-102": 0.1928397699488874,
        "chrf-87": 0.09229430452300923,
        "chrf-79": 0.24209039180773093,
        "chrf-50": 0.08511021960044353,
        "chrf-36": 0.6289275779362133,
        "chrf-27": 0.16571290520023146,
        "chrf-154": 0.035111660059366105,
        "chrf-8": 0.38228949674466867,
        "chrf-7": 0.28198835272630185,
        "chrf-29": 0.13598126324563897,
        "chrf-77": 0.07754142541013359,
        "chrf-84": 0.18169694781133056,
        "chrf-186": 0.14708832511479514,
        "chrf-71": 0.16904305008747753,
        "chrf-153": 0.543486622245861,
        "chrf-78": 0.06322220267247139,
        "chrf-161": 0.2274897722380097,
        "chrf-103": 0.32325357377604313,
        "rougel-40": 0.4266666666666667,
        "rougel-6": 0.6666666666666666,
        "rougel-102": 0.3692307692307692,
        "rougel-87": 0.07547169811320754,
        "rougel-79": 0.32608695652173914,
        "rougel-50": 0.07272727272727272,
        "rougel-36": 0.6493506493506495,
        "rougel-27": 0.3157894736842105,
        "rougel-154": 0.04081632653061225,
        "rougel-8": 0.4507042253521127,
        "rougel-7": 0.4615384615384615,
        "rougel-29": 0.2795698924731183,
        "rougel-77": 0.07692307692307693,
        "rougel-84": 0.3125,
        "rougel-186": 0.2589928057553957,
        "rougel-71": 0.2962962962962963,
        "rougel-153": 0.702127659574468,
        "rougel-78": 0.08510638297872342,
        "rougel-161": 0.40384615384615385,
        "rougel-103": 0.4507042253521127,
        "meteor-40": 0.36155886011784866,
        "meteor-6": 0.5247715426233834,
        "meteor-102": 0.2300200655801889,
        "meteor-87": 0.037037037037037035,
        "meteor-79": 0.33590667113394385,
        "meteor-50": 0.036855036855036855,
        "meteor-36": 0.5549531980333229,
        "meteor-27": 0.15537897310513443,
        "meteor-154": 0.02493765586034913,
        "meteor-8": 0.3517730496453901,
        "meteor-7": 0.30675459632294166,
        "meteor-29": 0.2994802203616671,
        "meteor-77": 0.03712871287128712,
        "meteor-84": 0.17736712072649571,
        "meteor-186": 0.3691295387989732,
        "meteor-71": 0.23744429724196084,
        "meteor-153": 0.7478426202734872,
        "meteor-78": 0.025062656641604012,
        "meteor-161": 0.3728232378282986,
        "meteor-103": 0.37766445890236994,
        "ruby-40": 0.31818181818181823,
        "ruby-6": 0.5,
        "ruby-102": 0.2272727272727273,
        "ruby-87": 0.045454545454545414,
        "ruby-79": 0.14583333333333337,
        "ruby-50": 0.045454545454545414,
        "ruby-36": 0.5681818181818181,
        "ruby-27": 0.20454545454545459,
        "ruby-154": 0.022727272727272707,
        "ruby-8": 0.34090909090909094,
        "ruby-7": 0.34090909090909094,
        "ruby-29": 0.12244897959183676,
        "ruby-77": 0.045454545454545414,
        "ruby-84": 0.20454545454545459,
        "ruby-186": 0.16842105263157892,
        "ruby-71": 0.15625,
        "ruby-153": 0.56,
        "ruby-78": 0.045454545454545414,
        "ruby-161": 0.25,
        "ruby-103": 0.25,
        "codebertscore_f1-40": 0.7780225276947021,
        "codebertscore_f3-40": 0.7925180196762085,
        "codebertscore_f1-6": 0.8844584822654724,
        "codebertscore_f3-6": 0.8806136846542358,
        "codebertscore_f1-102": 0.7826045751571655,
        "codebertscore_f3-102": 0.7756012678146362,
        "codebertscore_f1-87": 0.6141403317451477,
        "codebertscore_f3-87": 0.6057808995246887,
        "codebertscore_f1-79": 0.7210626006126404,
        "codebertscore_f3-79": 0.7425762414932251,
        "codebertscore_f1-50": 0.5980609655380249,
        "codebertscore_f3-50": 0.5908324122428894,
        "codebertscore_f1-36": 0.8763704895973206,
        "codebertscore_f3-36": 0.8803679347038269,
        "codebertscore_f1-27": 0.7873135209083557,
        "codebertscore_f3-27": 0.7795389294624329,
        "codebertscore_f1-154": 0.5408875346183777,
        "codebertscore_f3-154": 0.5231759548187256,
        "codebertscore_f1-8": 0.7692793011665344,
        "codebertscore_f3-8": 0.7868800759315491,
        "codebertscore_f1-7": 0.7810807228088379,
        "codebertscore_f3-7": 0.7713585495948792,
        "codebertscore_f1-29": 0.7006500363349915,
        "codebertscore_f3-29": 0.6927249431610107,
        "codebertscore_f1-77": 0.6002582907676697,
        "codebertscore_f3-77": 0.5827631950378418,
        "codebertscore_f1-84": 0.7631016969680786,
        "codebertscore_f3-84": 0.7839104533195496,
        "codebertscore_f1-186": 0.6863376498222351,
        "codebertscore_f3-186": 0.7011326551437378,
        "codebertscore_f1-71": 0.6957693099975586,
        "codebertscore_f3-71": 0.72371506690979,
        "codebertscore_f1-153": 0.8572084903717041,
        "codebertscore_f3-153": 0.9018480777740479,
        "codebertscore_f1-78": 0.5634322166442871,
        "codebertscore_f3-78": 0.5345802903175354,
        "codebertscore_f1-161": 0.7668403387069702,
        "codebertscore_f3-161": 0.7771602272987366,
        "codebertscore_f1-103": 0.86104816198349,
        "codebertscore_f3-103": 0.8617371916770935,
        "codebertscore_s_f1-40": 0.7929668426513672,
        "codebertscore_s_f3-40": 0.8095694184303284,
        "codebertscore_s_f1-6": 0.8888223767280579,
        "codebertscore_s_f3-6": 0.8901629447937012,
        "codebertscore_s_f1-102": 0.7952857613563538,
        "codebertscore_s_f3-102": 0.7930819392204285,
        "codebertscore_s_f1-87": 0.6197994351387024,
        "codebertscore_s_f3-87": 0.6107407808303833,
        "codebertscore_s_f1-79": 0.7434064149856567,
        "codebertscore_s_f3-79": 0.7701047658920288,
        "codebertscore_s_f1-50": 0.6074913740158081,
        "codebertscore_s_f3-50": 0.6048283576965332,
        "codebertscore_s_f1-36": 0.8962740302085876,
        "codebertscore_s_f3-36": 0.8979980945587158,
        "codebertscore_s_f1-27": 0.8129898905754089,
        "codebertscore_s_f3-27": 0.7991937398910522,
        "codebertscore_s_f1-154": 0.5716072916984558,
        "codebertscore_s_f3-154": 0.558887243270874,
        "codebertscore_s_f1-8": 0.7882059812545776,
        "codebertscore_s_f3-8": 0.8109002113342285,
        "codebertscore_s_f1-7": 0.8134399056434631,
        "codebertscore_s_f3-7": 0.8052217960357666,
        "codebertscore_s_f1-29": 0.716983437538147,
        "codebertscore_s_f3-29": 0.7063691020011902,
        "codebertscore_s_f1-77": 0.6223704814910889,
        "codebertscore_s_f3-77": 0.6010109782218933,
        "codebertscore_s_f1-84": 0.7680589556694031,
        "codebertscore_s_f3-84": 0.7939437031745911,
        "codebertscore_s_f1-186": 0.7067180275917053,
        "codebertscore_s_f3-186": 0.7257866263389587,
        "codebertscore_s_f1-71": 0.7090229392051697,
        "codebertscore_s_f3-71": 0.7397955656051636,
        "codebertscore_s_f1-153": 0.878615140914917,
        "codebertscore_s_f3-153": 0.9224485158920288,
        "codebertscore_s_f1-78": 0.6463503241539001,
        "codebertscore_s_f3-78": 0.5979465842247009,
        "codebertscore_s_f1-161": 0.790573239326477,
        "codebertscore_s_f3-161": 0.8009721636772156,
        "codebertscore_s_f1-103": 0.8696705102920532,
        "codebertscore_s_f3-103": 0.8752512335777283,
        "gpt35_nsnr-40": 3,
        "raw_gpt35_nsnr-40": "3",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-102": 4,
        "raw_gpt35_nsnr-102": "4",
        "gpt35_nsnr-87": 2,
        "raw_gpt35_nsnr-87": "2",
        "gpt35_nsnr-79": 3,
        "raw_gpt35_nsnr-79": "3",
        "gpt35_nsnr-50": 2,
        "raw_gpt35_nsnr-50": "2",
        "gpt35_nsnr-36": 4,
        "raw_gpt35_nsnr-36": "4",
        "gpt35_nsnr-27": 3,
        "raw_gpt35_nsnr-27": "3",
        "gpt35_nsnr-154": 3,
        "raw_gpt35_nsnr-154": "3",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-29": 3,
        "raw_gpt35_nsnr-29": "3",
        "gpt35_nsnr-77": 2,
        "raw_gpt35_nsnr-77": "2",
        "gpt35_nsnr-84": 3,
        "raw_gpt35_nsnr-84": "3",
        "gpt35_nsnr-186": 3,
        "raw_gpt35_nsnr-186": "3",
        "gpt35_nsnr-71": 4,
        "raw_gpt35_nsnr-71": "4",
        "gpt35_nsnr-153": 4,
        "raw_gpt35_nsnr-153": "4",
        "gpt35_nsnr-78": 1,
        "raw_gpt35_nsnr-78": "1",
        "gpt35_nsnr-161": 4,
        "raw_gpt35_nsnr-161": "4",
        "gpt35_nsnr-103": 4,
        "raw_gpt35_nsnr-103": "4",
        "gpt35_nswr-40": 3,
        "raw_gpt35_nswr-40": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-102": 3,
        "raw_gpt35_nswr-102": "3",
        "gpt35_nswr-87": 2,
        "raw_gpt35_nswr-87": "2",
        "gpt35_nswr-79": 3,
        "raw_gpt35_nswr-79": "3",
        "gpt35_nswr-50": 2,
        "raw_gpt35_nswr-50": "2",
        "gpt35_nswr-36": 4,
        "raw_gpt35_nswr-36": "4",
        "gpt35_nswr-27": 2,
        "raw_gpt35_nswr-27": "2",
        "gpt35_nswr-154": 4,
        "raw_gpt35_nswr-154": "4",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-29": 3,
        "raw_gpt35_nswr-29": "3",
        "gpt35_nswr-77": 2,
        "raw_gpt35_nswr-77": "2",
        "gpt35_nswr-84": 2,
        "raw_gpt35_nswr-84": "2",
        "gpt35_nswr-186": 3,
        "raw_gpt35_nswr-186": "3",
        "gpt35_nswr-71": 2,
        "raw_gpt35_nswr-71": "2",
        "gpt35_nswr-153": 3,
        "raw_gpt35_nswr-153": "3",
        "gpt35_nswr-78": 0,
        "raw_gpt35_nswr-78": "0",
        "gpt35_nswr-161": 4,
        "raw_gpt35_nswr-161": "4",
        "gpt35_nswr-103": 3,
        "raw_gpt35_nswr-103": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Create a function that takes integers, floats, or strings representing\n    // real numbers, and returns the larger variable in its given variable type.\n    // Return None if the values are equal.\n    // Note: If a real number is represented as a string, the floating point might be . or ,\n    // compare_one(1, 2.5) \u279e 2.5\n    // compare_one(1, \"2,3\") \u279e \"2,3\"\n    // compare_one(\"5,1\", \"6\") \u279e \"6\"\n    // compare_one(\"1\", 1) \u279e None\n    public static Union_int_float_String_Optional.empty() compareOne(Union_int_float_String a, Union_int_float_String b) {\n",
        "snippet": [
            "        double temp_a = 0, temp_b = 0;\n        if (a instanceof Integer) {\n            temp_a = (Integer) a * 1.0;\n        } else if (a instanceof Double) {\n            temp_a = (double) a;\n        } else if (a instanceof String) {\n            temp_a = Double.parseDouble(((String) a).replace(',', '.'));\n        }\n        if (b instanceof Integer) {\n            temp_b = (Integer) b * 1.0;\n        } else if (b instanceof Double) {\n            temp_b = (double) b;\n        } else if (b instanceof String) {\n            temp_b = Double.parseDouble(((String) b).replace(',', '.'));\n        }\n        if (temp_a == temp_b) {\n            return Optional.empty();\n        } else if (temp_a > temp_b) {\n            return Optional.of(a);\n        } else {\n            return Optional.of(b);\n        }\n    }\n}"
        ],
        "simplified": "Create a function that takes integers, floats, or strings representing real numbers, and returns the larger variable in its given variable type. Return None if the values are equal. Note: If a real number is represented as a string, the floating point might be . or ,",
        "task_id": "137",
        "197": "// return Union_int_float_String_Optional.of(b);\n        return null;",
        "grade-197": {
            "execution": 0
        },
        "29": "Union_int_float_String_Optional.empty() r = new Union_int_float_String_Optional.empty();\n        Union_float_String x = (Union_float_String)a;\n        Union_float_String y = (Union_float_String)b;\n        if (x.tag == 0 && y.tag == 0) {\n            if (((Float)x.value).floatValue() > ((Float)y.value).floatValue()) {\n                r.setValue(x);\n            } else if (((Float)x.value).floatValue() < ((Float)y.value).floatValue()) {\n                r.setValue(y);\n            }\n        } else if (x.tag == 1 && y.tag == 1) {\n            if (((String)x.value).compareTo((String)y.value) > 0) {\n                r.setValue(x);\n            } else if (((String)x.value).compareTo((String)y.value) < 0) {\n                r.setValue(y);\n            }\n        } else if (x.tag == 0 && y.tag == 1) {\n            if (((Float)x.value).floatValue() > Float.parseFloat((String)y.value)) {\n                r.setValue(x);\n            } else if (((Float)x.value).floatValue() < Float.parseFloat((String)y.value)) {\n                r.setValue(y);\n            }\n        } else if (x.tag == 1 && y.tag == 0) {\n            if (Float.parseFloat((String)x.value) > ((Float)y.value).floatValue()) {\n                r.setValue(x);\n            } else if (Float.parseFloat((String)x.value) < ((Float)y.value).floatValue()) {\n                r.setValue(y);\n            }\n        }\n        return r;",
        "grade-29": {
            "execution": 0
        },
        "6": "// A switch for the type of value of a and b\n        switch(a.types) {\n            case a:\n                switch(b.types) {\n                    case a:\n                        if(a.a() >= b.a()) {\n                            return new Union_int_float_String_Optional.a(a.a());\n                        } else {\n                            return new Union_int_float_String_Optional.a(b.a());\n                        }\n                    case b:\n                        if(a.a() >= b.b()) {\n                            return new Union_int_float_String_Optional.b(a.a());\n                        } else {\n                            return new Union_int_float_String_Optional.b(b.b());\n                        }\n                    case c:\n                        return new Union_int_float_String_Optional.c(b.c());\n                }\n            case b:\n                switch(b.types) {\n                    case a:\n                        if(a.b() >= b.a()) {\n                            return new Union_int_float_String_Optional.b(a.b());\n                        } else {\n                            return new Union_int_float_String_Optional.b(b.a());\n                        }\n                    case b:\n                        if(a.b() >= b.b()) {\n                            return new Union_int_float_String_Optional.b(a.b());\n                        } else {\n                            return new Union_int_float_String_Optional.b(b.b());\n                        }\n                    case c:\n                        return new Union_int_float_String_Optional.c(b.c());\n                }\n            case c:\n                switch(b.types) {\n                    case a:\n                        return new Union_int_float_String_Optional.c(a.c());\n                    case b:\n                        return new Union_int_float_String_Optional.c(a.c());\n                    case c:\n                        if(Float.parseFloat(a.c()) >= Float.parseFloat(b.c())) {\n                            return new Union_int_float_String_Optional.c(a.c());\n                        } else {\n                            return new Union_int_",
        "grade-6": {
            "execution": 0
        },
        "77": "// First check for equal values\n        if (a.equals(b)) {\n            return new Union_int_float_String_Optional.empty();\n        }\n        // If values are equal, return None\n        // If not, return larger value\n        return a.greaterThan(b);",
        "grade-77": {
            "execution": 0
        },
        "66": "throw new Error(\"Method not implemented.\");",
        "grade-66": {
            "execution": 0
        },
        "59": "if (a.compare(b) >= 0) {\n            return new Union_int_float_String_Optional.empty();\n        } else {\n            return b;\n        }",
        "grade-59": {
            "execution": 0
        },
        "36": "// Tuple that holds 2 numbers as a tuple\n        Pair<Union_int_float_String, Union_int_float_String> tup = new Pair<>(a, b);\n        Optional<Union_int_float_String> result = Optional.empty();\n\n        // if the tuple only contains integers, return the max.\n        if (tup.containsAll(int.class)) {\n            int int_a = (int) a.value();\n            int int_b = (int) b.value();\n            if (int_a == int_b) {\n                return Union_int_float_String_Optional.empty();\n            } else {\n                return Union_int_float_String_Optional.WithValue(Math.max(int_a, int_b));\n            }\n        }\n\n        // if the tuple only contains floats, return the max.\n        if (tup.containsAll(float.class)) {\n            float float_a = (float) a.value();\n            float float_b = (float) b.value();\n            if (float_a == float_b) {\n                return Union_int_float_String_Optional.empty();\n            } else {\n                return Union_int_float_String_Optional.WithValue(Math.max(float_a, float_b));\n            }\n        }\n\n        // if the tuple only contains floats, return the max.\n        if (tup.containsAll(String.class)) {\n            float float_a = 0;\n            float float_b = 0;\n            if (containsCommaOrDot((String) a.value())) {\n                float_a = parseString((String) a.value());\n            } else {\n                float_a = Integer.parseInt((String) a.value());\n            }\n            if (containsCommaOrDot((String) b.value())) {\n                float_b = parseString((String) b.value());\n            } else {\n                float_b = Integer.parseInt((String) b.value());\n            }\n            if (float_a == float_b) {\n                return Union_int_float_String_Optional.empty();\n            } else {",
        "grade-36": {
            "execution": 0
        },
        "27": "//if(a == b) return Optional<Union_int_float_String.empty()>;\n        //else if(a instanceof Float && b instanceof Float)\n        //{\n        //  if(a > b) return Optional<Union_int_float_String.f1(a)>;\n        //  else return Optional<Union_int_float_String.f1(b)>;\n        //}\n        //else if(a instanceof Integer && b instanceof Integer)\n        //{\n        //  if(a > b) return Optional<Union_int_float_String.f0(a)>;\n        //  else return Optional<Union_int_float_String.f0(b)>;\n        //}\n        //else if(a instanceof String && b instanceof String)\n        //{\n        //  if(a > b) return Optional<Union_int_float_String.f2(a)>;\n        //  else return Optional<Union_int_float_String.f2(b)>;\n        //}\n        //else if(a instanceof Float && b instanceof Integer)\n        //{\n        //  if(a > b) return Optional<Union_int_float_String.f1(a)>;\n        //  else return Optional<Union_int_float_String.f0(b)>;\n        //}\n        //else if(a instanceof Integer && b instanceof Float)\n        //{\n        //  if(a > b) return Optional<Union_int_float_String.f0(a)>;\n        //  else return Optional<Union_int_float_String.f1(b)>;\n        //}\n        //else if(a instanceof Float && b instanceof String)\n        //{\n        //  if(a > b) return Optional<Union_int_float_String.f1(a)>;\n        //  else return Optional<Union_int_float_String.f2(b)>;\n        //}\n        //else if(a instanceof String && b instanceof Float)\n        //{\n        //  if(a > b) return Optional<Union_int_float",
        "grade-27": {
            "execution": 0
        },
        "165": "if(a.is_int()){\n            int a_i = (int) a.get_int();\n            if(b.is_int()){\n                int b_i = (int) b.get_int();\n                if(a_i == b_i){\n                    return new Union_int_float_String_Optional.empty();\n                }else if(a_i > b_i){\n                    return new Union_int_float_String_Optional.int_t(a_i);\n                }else{\n                    return new Union_int_float_String_Optional.int_t(b_i);\n                }\n            }else if(b.is_float()){\n                float b_f = (float) b.get_float();\n                if(a_i == b_f){\n                    return new Union_int_float_String_Optional.empty();\n                }else if(a_i > b_f){\n                    return new Union_int_float_String_Optional.int_t(a_i);\n                }else{\n                    return new Union_int_float_String_Optional.float_t(b_f);\n                }\n            }else{\n                String b_s = (String) b.get_String();\n                float b_f = Float.parseFloat(b_s);\n                if(a_i == b_f){\n                    return new Union_int_float_String_Optional.empty();\n                }else if(a_i > b_f){\n                    return new Union_int_float_String_Optional.int_t(a_i);\n                }else{\n                    return new Union_int_float_String_Optional.String_t(b_s);\n                }\n            }\n        }else if(a.is_float()){\n            float a_f = (float) a.get_float();\n            if(b.is_int()){\n                int b_i = (int) b.get_int();\n                if(a_f == b_i){\n                    return new Union_int_float_String_Optional.empty();\n                }else if(a_f > b_i){\n                    return new Union_int_float",
        "grade-165": {
            "execution": 0
        },
        "22": "return a.get_int() > b.get_int() ? a : b;",
        "grade-22": {
            "execution": 0
        },
        "183": "//TODO: modify this\n        return Union_int_float_String_Optional.empty();",
        "grade-183": {
            "execution": 0
        },
        "125": "// write code here\n        return new Union_int_float_String_Optional.empty();",
        "grade-125": {
            "execution": 0
        },
        "8": "if(a.get_int() == b.get_int()) {\n            return Union_int_float_String_Optional.empty();\n        } else if(a.get_int() < b.get_int()) {\n            return Union_int_float_String_Optional.of_left(b.get_int());\n        } else {\n            return Union_int_float_String_Optional.of_left(a.get_int());\n        }",
        "grade-8": {
            "execution": 0
        },
        "7": "double first = a.which == 0 ? (double)a.val0 : a.which == 1 ? a.val1 : Double.parseDouble(a.val2.replace(\",\", \".\"));\n        double second = b.which == 0 ? (double)b.val0 : b.which == 1 ? b.val1 : Double.parseDouble(b.val2.replace(\",\", \".\"));\n        if (first == second) return Union_int_float_String_Optional.empty();\n        if (first > second) return Union_int_float_String_Optional.ofA(a);\n        else return Union_int_float_String_Optional.ofA(b);",
        "grade-7": {
            "execution": 0
        },
        "23": "if (a.isint()) {\n            if (b.isint()) {\n                if (a.intValue() == b.intValue()) {\n                    return Optional.empty();\n                } else {\n                    return b;\n                }\n            } else if (b.isfloat()) {\n                if (a.intValue() == b.floatValue()) {\n                    return Optional.empty();\n                } else {\n                    return b;\n                }\n            } else if (b.isString()) {\n                if (a.intValue() == Float.parseFloat(b.StringValue())) {\n                    return Optional.empty();\n                } else {\n                    return b;\n                }\n            }\n        } else if (a.isfloat()) {\n            if (b.isint()) {\n                if (a.floatValue() == b.intValue()) {\n                    return Optional.empty();\n                } else {\n                    return a;\n                }\n            } else if (b.isfloat()) {\n                if (a.floatValue() == b.floatValue()) {\n                    return Optional.empty();\n                } else {\n                    return a;\n                }\n            } else if (b.isString()) {\n                if (a.floatValue() == Float.parseFloat(b.StringValue())) {\n                    return Optional.empty();\n                } else {\n                    return a;\n                }\n            }\n        } else if (a.isString()) {\n            if (b.isint()) {\n                if (Float.parseFloat(a.StringValue()) == b.intValue()) {\n                    return Optional.empty();\n                } else {\n                    return a;\n                }\n            } else if (b.isfloat()) {\n                if (Float.parseFloat(a.StringValue()) == b.floatValue()) {\n                    return Optional.empty();\n                } else {\n                    return a;\n                }\n            } else if (b.isString()) {\n                if (Float.parseFloat(a.StringValue()) == Float.parseFloat(b.StringValue())) {\n                    return Optional.empty();\n                } else {\n                    return a;\n                }\n            }\n        }\n        return Optional.empty();",
        "grade-23": {
            "execution": 0
        },
        "57": "if (\n            a.isint() && b.isint() &&\n            a.getint() > b.getint()\n        ) {\n            return new Union_int_float_String_Optional.ofint(a.getint());\n        } else if (\n            a.isint() && b.isfloat() &&\n            a.getint() > b.getfloat()\n        ) {\n            return new Union_int_float_String_Optional.ofint(a.getint());\n        } else if (\n            a.isint() && b.isString() &&\n            a.getint() > Double.parseDouble(b.getString())\n        ) {\n            return new Union_int_float_String_Optional.ofint(a.getint());\n        } else if (\n            a.isfloat() && b.isint() &&\n            a.getfloat() > b.getint()\n        ) {\n            return new Union_int_float_String_Optional.offloat(a.getfloat());\n        } else if (\n            a.isfloat() && b.isfloat() &&\n            a.getfloat() > b.getfloat()\n        ) {\n            return new Union_int_float_String_Optional.offloat(a.getfloat());\n        } else if (\n            a.isfloat() && b.isString() &&\n            a.getfloat() > Double.parseDouble(b.getString())\n        ) {\n            return new Union_int_float_String_Optional.offloat(a.getfloat());\n        } else if (\n            a.isString() && b.isint() &&\n            Double.parseDouble(a.getString()) > b.getint()\n        ) {\n            return new Union_int_float_String_Optional.ofString(a.getString());\n        } else if (\n            a.isString() && b.isfloat() &&\n            Double.parseDouble(a.getString()) > b.getfloat()\n        ) {\n            return new Union_int_float_String_Optional.ofString(a.getString());\n        } else if (\n            a.isString() && b.isString()",
        "grade-57": {
            "execution": 0
        },
        "61": "Class<?> aa = a.getClass();\n        Class<?> bb = b.getClass();\n        Class<?> un_type = null;\n        if (aa.getName().equals(\"i\")) {\n            un_type = int.class;\n        } else if (aa.getName().equals(\"f\")) {\n            un_type = float.class;\n        } else if (aa.getName().equals(\"S\")) {\n            un_type = String.class;\n        }\n        if (un_type.equals(int.class)) {\n            if (a.value().intValue() > b.value().intValue()) {\n                return Union_int_float_String_Optional.ofA(a.value().intValue());\n            } else if (a.value().intValue() < b.value().intValue()) {\n                return Union_int_float_String_Optional.ofA(b.value().intValue());\n            } else {\n                return Union_int_float_String_Optional.empty();\n            }\n        } else if (un_type.equals(float.class)) {\n            if (a.value().floatValue() > b.value().floatValue()) {\n                return Union_int_float_String_Optional.ofB(a.value().floatValue());\n            } else if (a.value().floatValue() < b.value().floatValue()) {\n                return Union_int_float_String_Optional.ofB(b.value().floatValue());\n            } else {\n                return Union_int_float_String_Optional.empty();\n            }\n        } else if (un_type.equals(String.class)) {\n            if (Float.parseFloat(a.value().toString()) > Float.parseFloat(b.value().toString())) {\n                return Union_int_float_String_Optional.ofC(a.value().toString());\n            } else if (Float.parseFloat(a.value().toString()) < Float.parseFloat(b.value().toString())) {\n                return Union_int_float_String_Optional.ofC(b.value().toString());\n            } else {\n                return Union",
        "grade-61": {
            "execution": 0
        },
        "152": "Union_int_float_String_Optional.empty();\n        return null;",
        "grade-152": {
            "execution": 0
        },
        "187": "// Comparing both values as floats and returning the larger value\n        return Math.max(Float.parseFloat(a.toString()), Float.parseFloat(b.toString())) == Float.parseFloat(a.toString()) ? a : b;",
        "grade-187": {
            "execution": 0
        },
        "169": "float aAsFloat = Union_int_float_String.getFloat(a);\n        float bAsFloat = Union_int_float_String.getFloat(b);\n        if (aAsFloat > bAsFloat) {\n            return Union_int_float_String.union_int_float_String_optional_empty(a);\n        } else if (aAsFloat < bAsFloat) {\n            return Union_int_float_String.union_int_float_String_optional_empty(b);\n        } else {\n            return Union_int_float_String.union_int_float_String_optional_empty();\n        }",
        "grade-169": {
            "execution": 0
        },
        "bleu-197": 3.502243778235026e-07,
        "bleu-29": 0.11429540948583622,
        "bleu-6": 0.08002532999412937,
        "bleu-77": 0.013383167702588938,
        "bleu-66": 4.247176920280485e-08,
        "bleu-59": 0.0012556484189804266,
        "bleu-36": 0.14460932111488192,
        "bleu-27": 0.09431253321992146,
        "bleu-165": 0.17165062911396206,
        "bleu-22": 2.4629471775014754e-06,
        "bleu-183": 2.5167411812339437e-07,
        "bleu-125": 2.5167411812339437e-07,
        "bleu-8": 0.055543382225919,
        "bleu-7": 0.24635355595899486,
        "bleu-23": 0.12358616809556153,
        "bleu-57": 0.1195120983228286,
        "bleu-61": 0.11923133421575968,
        "bleu-152": 5.137627123756635e-10,
        "bleu-187": 0.005011759481052846,
        "bleu-169": 0.07117306106038415,
        "codebleu-197": 0.027304672930241993,
        "codebleu-29": 0.5733275746208031,
        "codebleu-6": 0.525326204388883,
        "codebleu-77": 0.11848624664663535,
        "codebleu-66": 0.022753128555310424,
        "codebleu-59": 0.07094081641045355,
        "codebleu-36": 0.6207115103920192,
        "codebleu-27": 0.5338152789797295,
        "codebleu-165": 0.6296241101599483,
        "codebleu-22": 0.04095665328793988,
        "codebleu-183": 0.029579707833933315,
        "codebleu-125": 0.031855020689450946,
        "codebleu-8": 0.17813749959863653,
        "codebleu-7": 0.3433153343189593,
        "codebleu-23": 0.5497063374372639,
        "codebleu-57": 0.5052675715678004,
        "codebleu-61": 0.5999209423587385,
        "codebleu-152": 0.025028490800882496,
        "codebleu-187": 0.12722824092350415,
        "codebleu-169": 0.19190127944337787,
        "chrf-197": 0.06859533154788412,
        "chrf-29": 0.27133924272703863,
        "chrf-6": 0.24461183683467233,
        "chrf-77": 0.13213361280480415,
        "chrf-66": 0.017241523876340117,
        "chrf-59": 0.11393664563303962,
        "chrf-36": 0.32593589871973533,
        "chrf-27": 0.3490599278541501,
        "chrf-165": 0.29070646348359264,
        "chrf-22": 0.02448523155838507,
        "chrf-183": 0.06755469552118198,
        "chrf-125": 0.07001508545825459,
        "chrf-8": 0.2309358912130144,
        "chrf-7": 0.3272702981058568,
        "chrf-23": 0.3019467816380699,
        "chrf-57": 0.3122681967591708,
        "chrf-61": 0.2741020157034959,
        "chrf-152": 0.0650381081776223,
        "chrf-187": 0.1114758115122652,
        "chrf-169": 0.22391088887922883,
        "rougel-197": 0.07692307692307693,
        "rougel-29": 0.3186991869918699,
        "rougel-6": 0.34470377019748655,
        "rougel-77": 0.18623481781376516,
        "rougel-66": 0.057971014492753624,
        "rougel-59": 0.21524663677130046,
        "rougel-36": 0.3374340949033392,
        "rougel-27": 0.3672014260249554,
        "rougel-165": 0.41600000000000004,
        "rougel-22": 0.10377358490566038,
        "rougel-183": 0.057692307692307696,
        "rougel-125": 0.057692307692307696,
        "rougel-8": 0.35741444866920147,
        "rougel-7": 0.536144578313253,
        "rougel-23": 0.3617021276595745,
        "rougel-57": 0.37061769616026713,
        "rougel-61": 0.3252279635258359,
        "rougel-152": 0.06862745098039215,
        "rougel-187": 0.21789883268482488,
        "rougel-169": 0.32352941176470584,
        "meteor-197": 0.04654069605049997,
        "meteor-29": 0.3337228358477012,
        "meteor-6": 0.34597286620327883,
        "meteor-77": 0.1061631071908564,
        "meteor-66": 0.024130667169716406,
        "meteor-59": 0.09866068424004489,
        "meteor-36": 0.4024655145621929,
        "meteor-27": 0.37058210691199,
        "meteor-165": 0.38289194002412813,
        "meteor-22": 0.03668171557562076,
        "meteor-183": 0.024117018602312718,
        "meteor-125": 0.024117018602312718,
        "meteor-8": 0.21046268205581736,
        "meteor-7": 0.4384735086573769,
        "meteor-23": 0.43259544268325323,
        "meteor-57": 0.3570173379649403,
        "meteor-61": 0.4034441128501782,
        "meteor-152": 0.019841269841269837,
        "meteor-187": 0.12022496062884092,
        "meteor-169": 0.22396970524017468,
        "ruby-197": 0.04102564102564099,
        "ruby-29": 0.21666666666666667,
        "ruby-6": 0.22651933701657456,
        "ruby-77": 0.10769230769230764,
        "ruby-66": 0.03076923076923077,
        "ruby-59": 0.11794871794871797,
        "ruby-36": 0.22192513368983957,
        "ruby-27": 0.23497267759562845,
        "ruby-165": 0.2754098360655738,
        "ruby-22": 0.05641025641025643,
        "ruby-183": 0.03076923076923077,
        "ruby-125": 0.02564102564102566,
        "ruby-8": 0.23076923076923073,
        "ruby-7": 0.42051282051282046,
        "ruby-23": 0.24838012958963285,
        "ruby-57": 0.25495049504950495,
        "ruby-61": 0.21814254859611226,
        "ruby-152": 0.03589743589743588,
        "ruby-187": 0.14358974358974363,
        "ruby-169": 0.20512820512820518,
        "codebertscore_f1-197": 0.6360023617744446,
        "codebertscore_f3-197": 0.5874418020248413,
        "codebertscore_f1-29": 0.7428885102272034,
        "codebertscore_f3-29": 0.7490861415863037,
        "codebertscore_f1-6": 0.7428382039070129,
        "codebertscore_f3-6": 0.7421783208847046,
        "codebertscore_f1-77": 0.6697179675102234,
        "codebertscore_f3-77": 0.6556370258331299,
        "codebertscore_f1-66": 0.5278581380844116,
        "codebertscore_f3-66": 0.4901261627674103,
        "codebertscore_f1-59": 0.6854340434074402,
        "codebertscore_f3-59": 0.6532722115516663,
        "codebertscore_f1-36": 0.7636384963989258,
        "codebertscore_f3-36": 0.7916301488876343,
        "codebertscore_f1-27": 0.7846978306770325,
        "codebertscore_f3-27": 0.7986708879470825,
        "codebertscore_f1-165": 0.7653321623802185,
        "codebertscore_f3-165": 0.7728569507598877,
        "codebertscore_f1-22": 0.6464490294456482,
        "codebertscore_f3-22": 0.5904073715209961,
        "codebertscore_f1-183": 0.5858281850814819,
        "codebertscore_f3-183": 0.5498294234275818,
        "codebertscore_f1-125": 0.5941190719604492,
        "codebertscore_f3-125": 0.5502095222473145,
        "codebertscore_f1-8": 0.7210082411766052,
        "codebertscore_f3-8": 0.7066177725791931,
        "codebertscore_f1-7": 0.7569484114646912,
        "codebertscore_f3-7": 0.747340202331543,
        "codebertscore_f1-23": 0.808304488658905,
        "codebertscore_f3-23": 0.7970573306083679,
        "codebertscore_f1-57": 0.7625651955604553,
        "codebertscore_f3-57": 0.7737174034118652,
        "codebertscore_f1-61": 0.7675660252571106,
        "codebertscore_f3-61": 0.7827212810516357,
        "codebertscore_f1-152": 0.6075504422187805,
        "codebertscore_f3-152": 0.5531297326087952,
        "codebertscore_f1-187": 0.6672026515007019,
        "codebertscore_f3-187": 0.6337903141975403,
        "codebertscore_f1-169": 0.7354153394699097,
        "codebertscore_f3-169": 0.7332258820533752,
        "codebertscore_s_f1-197": 0.8718918561935425,
        "codebertscore_s_f3-197": 0.8128484487533569,
        "codebertscore_s_f1-29": 0.8369982242584229,
        "codebertscore_s_f3-29": 0.8493061065673828,
        "codebertscore_s_f1-6": 0.8387921452522278,
        "codebertscore_s_f3-6": 0.8420989513397217,
        "codebertscore_s_f1-77": 0.8540999889373779,
        "codebertscore_s_f3-77": 0.8255133032798767,
        "codebertscore_s_f1-66": 0.8663058876991272,
        "codebertscore_s_f3-66": 0.8058752417564392,
        "codebertscore_s_f1-59": 0.8816198706626892,
        "codebertscore_s_f3-59": 0.8315834999084473,
        "codebertscore_s_f1-36": 0.8444128036499023,
        "codebertscore_s_f3-36": 0.8672545552253723,
        "codebertscore_s_f1-27": 0.8611366748809814,
        "codebertscore_s_f3-27": 0.87484210729599,
        "codebertscore_s_f1-165": 0.8513969779014587,
        "codebertscore_s_f3-165": 0.8597036004066467,
        "codebertscore_s_f1-22": 0.873291015625,
        "codebertscore_s_f3-22": 0.8132394552230835,
        "codebertscore_s_f1-183": 0.8630964756011963,
        "codebertscore_s_f3-183": 0.8086912035942078,
        "codebertscore_s_f1-125": 0.8643792867660522,
        "codebertscore_s_f3-125": 0.8077535033226013,
        "codebertscore_s_f1-8": 0.8732463121414185,
        "codebertscore_s_f3-8": 0.8428899645805359,
        "codebertscore_s_f1-7": 0.8685882687568665,
        "codebertscore_s_f3-7": 0.8534619212150574,
        "codebertscore_s_f1-23": 0.8755773305892944,
        "codebertscore_s_f3-23": 0.8777196407318115,
        "codebertscore_s_f1-57": 0.8471828103065491,
        "codebertscore_s_f3-57": 0.8648208379745483,
        "codebertscore_s_f1-61": 0.8469992280006409,
        "codebertscore_s_f3-61": 0.8658584952354431,
        "codebertscore_s_f1-152": 0.8736188411712646,
        "codebertscore_s_f3-152": 0.809140682220459,
        "codebertscore_s_f1-187": 0.8570780158042908,
        "codebertscore_s_f3-187": 0.8226215243339539,
        "codebertscore_s_f1-169": 0.8679061532020569,
        "codebertscore_s_f3-169": 0.8493144512176514,
        "gpt35_nsnr-197": 2,
        "raw_gpt35_nsnr-197": "2",
        "gpt35_nsnr-29": 3,
        "raw_gpt35_nsnr-29": "3",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-77": 3,
        "raw_gpt35_nsnr-77": "3",
        "gpt35_nsnr-66": 0,
        "raw_gpt35_nsnr-66": "0",
        "gpt35_nsnr-59": 3,
        "raw_gpt35_nsnr-59": "3",
        "gpt35_nsnr-36": 3,
        "raw_gpt35_nsnr-36": "3",
        "gpt35_nsnr-27": 0,
        "raw_gpt35_nsnr-27": "0",
        "gpt35_nsnr-165": 4,
        "raw_gpt35_nsnr-165": "4",
        "gpt35_nsnr-22": 2,
        "raw_gpt35_nsnr-22": "2",
        "gpt35_nsnr-183": 3,
        "raw_gpt35_nsnr-183": "3",
        "gpt35_nsnr-125": 0,
        "raw_gpt35_nsnr-125": "3 - The code snippet defines a function named \"compareOne\" that takes two parameters of type Union_int_float_String and returns a Union_int_float_String_Optional. The function compares the two input values and returns the larger one, while taking into account that the input values can be integers, floats, or strings representing real numbers. The function correctly handles cases where the input values are equal and returns None. However, the code snippet does not contain any implementation for the \"compareOne\" function, so it cannot be fully evaluated for correctness.",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-61": 3,
        "raw_gpt35_nsnr-61": "3",
        "gpt35_nsnr-152": 2,
        "raw_gpt35_nsnr-152": "2",
        "gpt35_nsnr-187": 2,
        "raw_gpt35_nsnr-187": "2",
        "gpt35_nsnr-169": 3,
        "raw_gpt35_nsnr-169": "3",
        "gpt35_nswr-197": 2,
        "raw_gpt35_nswr-197": "2",
        "gpt35_nswr-29": 0,
        "raw_gpt35_nswr-29": "0",
        "gpt35_nswr-6": 0,
        "raw_gpt35_nswr-6": "Score: 0",
        "gpt35_nswr-77": 2,
        "raw_gpt35_nswr-77": "2",
        "gpt35_nswr-66": 0,
        "raw_gpt35_nswr-66": "0",
        "gpt35_nswr-59": 0,
        "raw_gpt35_nswr-59": "0",
        "gpt35_nswr-36": 3,
        "raw_gpt35_nswr-36": "3",
        "gpt35_nswr-27": 0,
        "raw_gpt35_nswr-27": "0",
        "gpt35_nswr-165": 2,
        "raw_gpt35_nswr-165": "2",
        "gpt35_nswr-22": 2,
        "raw_gpt35_nswr-22": "2",
        "gpt35_nswr-183": 3,
        "raw_gpt35_nswr-183": "3",
        "gpt35_nswr-125": 2,
        "raw_gpt35_nswr-125": "2",
        "gpt35_nswr-8": 2,
        "raw_gpt35_nswr-8": "2",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 2,
        "raw_gpt35_nswr-23": "2",
        "gpt35_nswr-57": 2,
        "raw_gpt35_nswr-57": "2",
        "gpt35_nswr-61": 1,
        "raw_gpt35_nswr-61": "1",
        "gpt35_nswr-152": 0,
        "raw_gpt35_nswr-152": "0",
        "gpt35_nswr-187": 1,
        "raw_gpt35_nswr-187": "1",
        "gpt35_nswr-169": 2,
        "raw_gpt35_nswr-169": "2"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // triangle_area(3, 4, 5) == 6.00\n    // triangle_area(1, 2, 10) == -1\n    public static float triangleArea(int a, int b, int c) {\n",
        "snippet": [
            "        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n        }\n        double s = (a + b + c) / 2;\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        area = (double) Math.round(area * 100) / 100;\n        return area;\n    }\n}"
        ],
        "simplified": "Given the lengths of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise return -1 Three sides make a valid triangle when the sum of any two sides is greater than the third side.",
        "task_id": "71",
        "177": "float t_area;\n        float s = (a + b + c) / 2.0f;\n        float area = (float) Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        t_area = (float) Math.round(area * 100) / 100;\n        return (t_area > 0) ? t_area : -1;",
        "grade-177": {
            "execution": 1
        },
        "28": "float s = (a + b + c) / 2.0f;\n        float result = (float) Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return Float.isNaN(result) ? -1 : result;",
        "grade-28": {
            "execution": 0
        },
        "6": "if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n        }\n        double s = (a + b + c) / 2.0;\n        return (float) Math.sqrt(s * (s - a) * (s - b) * (s - c));",
        "grade-6": {
            "execution": 0
        },
        "70": "double s = (a + b + c) / 2.0;\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        if (area == 0) {\n            return -1;\n        }\n        return (float) area;",
        "grade-70": {
            "execution": 0
        },
        "62": "// Write your code here\n        int sum = a + b + c;\n        if(sum - a <= a || sum - b <= b || sum - c <= c) {\n            return -1;\n        } else {\n            float s = (float) (sum) / 2;\n            float area = (float) (Math.sqrt(s * (s - a) * (s - b) * (s - c)));\n            return Math.round(area * 100) / 100.0f;\n        }",
        "grade-62": {
            "execution": 1
        },
        "57": "float semiPerimeter = (a + b + c) / 2.0f;\n        float triangleArea = (float) Math.sqrt(semiPerimeter * (semiPerimeter - a) * (semiPerimeter - b) * (semiPerimeter - c));\n        return (triangleArea > 0) ? Float.parseFloat(String.format(\"%.2f\", triangleArea)) : -1;",
        "grade-57": {
            "execution": 1
        },
        "35": "// Determine the maximum length\n        int max = Math.max(a, Math.max(b, c));\n        // Find the other two sides\n        int small1 = a, small2 = b;\n        if (small1 == max) {\n            small1 = b;\n            small2 = c;\n        } else if (small2 == max) {\n            small2 = c;\n        }\n        // Verify that the two smaller sides add up to greater than the largest side\n        if (small1 + small2 > max) {\n            // We have a valid triangle, so calculate the area\n            double p = (a + b + c) / 2.0;\n            double s = Math.sqrt(p * (p - a) * (p - b) * (p - c));\n            return (float)s;\n        }\n        return -1;",
        "grade-35": {
            "execution": 0
        },
        "26": "//Write your code here\n        if (a + b > c && a + c > b && b + c > a) {\n            return (float)Math.sqrt((a + b + c) * (a + b - c) * (a - b + c) * (-a + b + c)) / 4;\n        }\n        return -1;",
        "grade-26": {
            "execution": 0
        },
        "189": "float area = -1;\n        if (a+b > c && a+c > b && b+c > a) {\n            float s = (a+b+c)/2.0f;\n            area = (float)Math.sqrt(s*(s-a)*(s-b)*(s-c));\n        }\n        return area;",
        "grade-189": {
            "execution": 0
        },
        "150": "float s = (a + b + c) / 2.0f;\n        float area = (float)Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return area < 0 ? -1 : Math.round(area * 100) / 100.0f;",
        "grade-150": {
            "execution": 0
        },
        "22": "float area = -1.0f;\n        if (a+b>c && a+c>b && b+c>a) {\n            float p = (a+b+c)/2.0f;\n            area = (float)Math.sqrt(p*(p-a)*(p-b)*(p-c));\n        }\n        return area;",
        "grade-22": {
            "execution": 0
        },
        "164": "if ((a + b) > c && (a + c) > b && (b + c) > a) {\n            float s = (a + b + c) / 2.0f;\n            return (float)Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        }\n        return -1;",
        "grade-164": {
            "execution": 0
        },
        "112": "// TODO: Implement this function.\n        return -1;",
        "grade-112": {
            "execution": 0
        },
        "8": "// TODO\n        throw new UnsupportedOperationException(\"Method triangleArea is not implemented\");",
        "grade-8": {
            "execution": 0
        },
        "7": "if(a+b<=c||a+c<=b||b+c<=a) return -1;\n        return (float)Math.sqrt((a+b+c)*(a+b-c)*(a-b+c)*(-a+b+c))/4;",
        "grade-7": {
            "execution": 0
        },
        "23": "if (a + b > c && a + c > b && b + c > a) {\n            float s = (a + b + c) / 2.0f;\n            float area = (float) Math.sqrt(s * (s - a) * (s - b) * (s - c));\n            return area;\n        }\n        return -1;",
        "grade-23": {
            "execution": 0
        },
        "55": "float result = -1;\n      // check that the input makes a valid triangle\n      if(Math.abs(a) + Math.abs(b) > Math.abs(c) && Math.abs(a) + Math.abs(c) > Math.abs(b) && Math.abs(b) + Math.abs(c) > Math.abs(a)){\n        // if yes, calculate the area\n        float s = (a + b + c) / 2.0f;\n        // returns -1 if the area cannot be computed because we have a NaN\n        result = (float) Math.sqrt(s * (s - a) * (s - b) * (s - c));\n      }\n      return result;",
        "grade-55": {
            "execution": 0
        },
        "59": "float x = Heron(a, b, c);\n        if (x == -1) {\n            return -1;\n        }\n        return x;",
        "grade-59": {
            "execution": 0
        },
        "138": "float A = (float) a;\n        float B = (float) b;\n        float C = (float) c;\n        float s = (A + B + C) / 2;\n        if (A + B <= C || A + C <= B || B + C <= A) {\n            return -1;\n        }\n        else {\n            return (float) Math.sqrt(s * (s - A) * (s - B) * (s - C));\n        }",
        "grade-138": {
            "execution": 0
        },
        "167": "if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n        }\n        double s = (a + b + c) / 2.0;\n        return (float)Math.sqrt(s * (s - a) * (s - b) * (s - c));",
        "grade-167": {
            "execution": 0
        },
        "bleu-177": 0.5187476061343199,
        "bleu-28": 0.362754055282109,
        "bleu-6": 0.7158407940605969,
        "bleu-70": 0.4677481297515414,
        "bleu-62": 0.524586187854946,
        "bleu-57": 0.2715119453193893,
        "bleu-35": 0.20181008851637308,
        "bleu-26": 0.26555611150031383,
        "bleu-189": 0.5134279699851383,
        "bleu-150": 0.475581633907554,
        "bleu-22": 0.36878594958885524,
        "bleu-164": 0.4852401982718299,
        "bleu-112": 0.00028550943170821267,
        "bleu-8": 0.0010359970835485894,
        "bleu-7": 0.44615287069819637,
        "bleu-23": 0.5237960620124437,
        "bleu-55": 0.2690199347968696,
        "bleu-59": 0.032240074946498914,
        "bleu-138": 0.30965522011439534,
        "bleu-167": 0.7158407940605969,
        "codebleu-177": 0.6299080047950357,
        "codebleu-28": 0.45817659874694766,
        "codebleu-6": 0.670010829972292,
        "codebleu-70": 0.5315120402867908,
        "codebleu-62": 0.7452981067989332,
        "codebleu-57": 0.47343089424866946,
        "codebleu-35": 0.616940812533751,
        "codebleu-26": 0.4925951722612667,
        "codebleu-189": 0.6191532450062602,
        "codebleu-150": 0.5322766505057067,
        "codebleu-22": 0.5813618610479901,
        "codebleu-164": 0.5812227925670336,
        "codebleu-112": 0.0443563968500993,
        "codebleu-8": 0.03432384592748608,
        "codebleu-7": 0.5267753532006959,
        "codebleu-23": 0.6081140446438907,
        "codebleu-55": 0.6231228010082424,
        "codebleu-59": 0.15060119456807708,
        "codebleu-138": 0.7103581889669386,
        "codebleu-167": 0.670010829972292,
        "chrf-177": 0.5455300842494712,
        "chrf-28": 0.3585859430813651,
        "chrf-6": 0.643618445936485,
        "chrf-70": 0.5649400233199813,
        "chrf-62": 0.5482433557037939,
        "chrf-57": 0.2835122847655509,
        "chrf-35": 0.32594961133278494,
        "chrf-26": 0.30162490096295635,
        "chrf-189": 0.46116489231274005,
        "chrf-150": 0.5352571847655371,
        "chrf-22": 0.35665835803943496,
        "chrf-164": 0.4191975920027868,
        "chrf-112": 0.08159846843687235,
        "chrf-8": 0.0730678932907542,
        "chrf-7": 0.40431344104611516,
        "chrf-23": 0.48592708070914126,
        "chrf-55": 0.355884614388101,
        "chrf-59": 0.14369725774312544,
        "chrf-138": 0.3056204104950023,
        "chrf-167": 0.643618445936485,
        "rougel-177": 0.6588235294117646,
        "rougel-28": 0.5454545454545455,
        "rougel-6": 0.8214285714285714,
        "rougel-70": 0.6193548387096774,
        "rougel-62": 0.6766169154228856,
        "rougel-57": 0.4431818181818182,
        "rougel-35": 0.421875,
        "rougel-26": 0.5029239766081871,
        "rougel-189": 0.6783625730994153,
        "rougel-150": 0.6375,
        "rougel-22": 0.6127167630057804,
        "rougel-164": 0.6432748538011697,
        "rougel-112": 0.0761904761904762,
        "rougel-8": 0.07142857142857142,
        "rougel-7": 0.6385542168674698,
        "rougel-23": 0.6941176470588235,
        "rougel-55": 0.4541832669322709,
        "rougel-59": 0.24590163934426232,
        "rougel-138": 0.48704663212435234,
        "rougel-167": 0.8214285714285714,
        "meteor-177": 0.5179841356673961,
        "meteor-28": 0.4057858063943716,
        "meteor-6": 0.7186420792551842,
        "meteor-70": 0.5540293581652057,
        "meteor-62": 0.7155203628302241,
        "meteor-57": 0.34130385576790595,
        "meteor-35": 0.47232970538562585,
        "meteor-26": 0.35260364391658305,
        "meteor-189": 0.6058562095322264,
        "meteor-150": 0.5132024966157047,
        "meteor-22": 0.5468605494322185,
        "meteor-164": 0.5008364818135245,
        "meteor-112": 0.04122497055359246,
        "meteor-8": 0.035046728971962614,
        "meteor-7": 0.4491927825261159,
        "meteor-23": 0.5131594942864091,
        "meteor-55": 0.5088355883763191,
        "meteor-59": 0.13775641126350466,
        "meteor-138": 0.6248123999466382,
        "meteor-167": 0.7186420792551842,
        "ruby-177": 0.4731182795698925,
        "ruby-28": 0.4193548387096774,
        "ruby-6": 0.7096774193548387,
        "ruby-70": 0.4516129032258065,
        "ruby-62": 0.5648148148148149,
        "ruby-57": 0.22580645161290325,
        "ruby-35": 0.245398773006135,
        "ruby-26": 0.33333333333333337,
        "ruby-189": 0.5053763440860215,
        "ruby-150": 0.4838709677419355,
        "ruby-22": 0.4301075268817204,
        "ruby-164": 0.5161290322580645,
        "ruby-112": 0.043010752688172005,
        "ruby-8": 0.043010752688172005,
        "ruby-7": 0.4838709677419355,
        "ruby-23": 0.5591397849462365,
        "ruby-55": 0.25316455696202533,
        "ruby-59": 0.15053763440860213,
        "ruby-138": 0.18000000000000005,
        "ruby-167": 0.7096774193548387,
        "codebertscore_f1-177": 0.8788015246391296,
        "codebertscore_f3-177": 0.8855652809143066,
        "codebertscore_f1-28": 0.8469186425209045,
        "codebertscore_f3-28": 0.8468712568283081,
        "codebertscore_f1-6": 0.9539542198181152,
        "codebertscore_f3-6": 0.9404393434524536,
        "codebertscore_f1-70": 0.8780110478401184,
        "codebertscore_f3-70": 0.8708537817001343,
        "codebertscore_f1-62": 0.8692421913146973,
        "codebertscore_f3-62": 0.8905121684074402,
        "codebertscore_f1-57": 0.8166100978851318,
        "codebertscore_f3-57": 0.8379292488098145,
        "codebertscore_f1-35": 0.7404797077178955,
        "codebertscore_f3-35": 0.7721179723739624,
        "codebertscore_f1-26": 0.8526226282119751,
        "codebertscore_f3-26": 0.848425567150116,
        "codebertscore_f1-189": 0.9009699821472168,
        "codebertscore_f3-189": 0.8947223424911499,
        "codebertscore_f1-150": 0.8698850870132446,
        "codebertscore_f3-150": 0.8728094696998596,
        "codebertscore_f1-22": 0.8858122825622559,
        "codebertscore_f3-22": 0.8844757676124573,
        "codebertscore_f1-164": 0.91111159324646,
        "codebertscore_f3-164": 0.9000821709632874,
        "codebertscore_f1-112": 0.6395602822303772,
        "codebertscore_f3-112": 0.6179767847061157,
        "codebertscore_f1-8": 0.6187549233436584,
        "codebertscore_f3-8": 0.6146235466003418,
        "codebertscore_f1-7": 0.8536584973335266,
        "codebertscore_f3-7": 0.8387499451637268,
        "codebertscore_f1-23": 0.9341782331466675,
        "codebertscore_f3-23": 0.927921712398529,
        "codebertscore_f1-55": 0.7998589873313904,
        "codebertscore_f3-55": 0.8314714431762695,
        "codebertscore_f1-59": 0.7554435133934021,
        "codebertscore_f3-59": 0.7209054827690125,
        "codebertscore_f1-138": 0.8635807037353516,
        "codebertscore_f3-138": 0.8627377152442932,
        "codebertscore_f1-167": 0.9530927538871765,
        "codebertscore_f3-167": 0.9394575357437134,
        "codebertscore_s_f1-177": 0.890316367149353,
        "codebertscore_s_f3-177": 0.8988590836524963,
        "codebertscore_s_f1-28": 0.858771026134491,
        "codebertscore_s_f3-28": 0.8585056662559509,
        "codebertscore_s_f1-6": 0.9545698761940002,
        "codebertscore_s_f3-6": 0.9393569827079773,
        "codebertscore_s_f1-70": 0.8842711448669434,
        "codebertscore_s_f3-70": 0.8774541616439819,
        "codebertscore_s_f1-62": 0.8791179060935974,
        "codebertscore_s_f3-62": 0.9010370969772339,
        "codebertscore_s_f1-57": 0.8210471272468567,
        "codebertscore_s_f3-57": 0.8464955687522888,
        "codebertscore_s_f1-35": 0.7655889987945557,
        "codebertscore_s_f3-35": 0.7986208200454712,
        "codebertscore_s_f1-26": 0.8651799559593201,
        "codebertscore_s_f3-26": 0.8587750792503357,
        "codebertscore_s_f1-189": 0.9145681262016296,
        "codebertscore_s_f3-189": 0.90778648853302,
        "codebertscore_s_f1-150": 0.8826153874397278,
        "codebertscore_s_f3-150": 0.8865999579429626,
        "codebertscore_s_f1-22": 0.8940631747245789,
        "codebertscore_s_f3-22": 0.8916962146759033,
        "codebertscore_s_f1-164": 0.9157015085220337,
        "codebertscore_s_f3-164": 0.9035201072692871,
        "codebertscore_s_f1-112": 0.6643732190132141,
        "codebertscore_s_f3-112": 0.6282156705856323,
        "codebertscore_s_f1-8": 0.6176465749740601,
        "codebertscore_s_f3-8": 0.5960447192192078,
        "codebertscore_s_f1-7": 0.864084780216217,
        "codebertscore_s_f3-7": 0.848091721534729,
        "codebertscore_s_f1-23": 0.940280556678772,
        "codebertscore_s_f3-23": 0.9339296221733093,
        "codebertscore_s_f1-55": 0.8171727657318115,
        "codebertscore_s_f3-55": 0.8499634265899658,
        "codebertscore_s_f1-59": 0.7827699184417725,
        "codebertscore_s_f3-59": 0.7446208000183105,
        "codebertscore_s_f1-138": 0.870398223400116,
        "codebertscore_s_f3-138": 0.8662799596786499,
        "codebertscore_s_f1-167": 0.9537551403045654,
        "codebertscore_s_f3-167": 0.9384166598320007,
        "gpt35_nsnr-177": 4,
        "raw_gpt35_nsnr-177": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-189": 4,
        "raw_gpt35_nsnr-189": "4",
        "gpt35_nsnr-150": 4,
        "raw_gpt35_nsnr-150": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-164": 4,
        "raw_gpt35_nsnr-164": "4",
        "gpt35_nsnr-112": 2,
        "raw_gpt35_nsnr-112": "2",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 3,
        "raw_gpt35_nsnr-59": "3",
        "gpt35_nsnr-138": 4,
        "raw_gpt35_nsnr-138": "4",
        "gpt35_nsnr-167": 4,
        "raw_gpt35_nsnr-167": "4",
        "gpt35_nswr-177": 4,
        "raw_gpt35_nswr-177": "4",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-70": 3,
        "raw_gpt35_nswr-70": "3",
        "gpt35_nswr-62": 3,
        "raw_gpt35_nswr-62": "3",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-189": 4,
        "raw_gpt35_nswr-189": "4",
        "gpt35_nswr-150": 4,
        "raw_gpt35_nswr-150": "4",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-164": 4,
        "raw_gpt35_nswr-164": "4",
        "gpt35_nswr-112": 2,
        "raw_gpt35_nswr-112": "2",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3",
        "gpt35_nswr-138": 4,
        "raw_gpt35_nswr-138": "4",
        "gpt35_nswr-167": 4,
        "raw_gpt35_nswr-167": "4"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given an array arr of integers and a positive integer k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4, -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output: [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will be in the range of [1, 1000].\n    // 2. The elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n",
        "snippet": [
            "        if (k == 0) {\n            return List.of();\n        }\n        List<Integer> arr_sort = new ArrayList<>(arr);\n        Collections.sort(arr_sort);\n        return arr_sort.subList(arr_sort.size() - k, arr_sort.size());\n    }\n}"
        ],
        "simplified": "Given an array arr of integers and a positive integer k, return a sorted list of length k with the maximum k numbers in arr. Note: 1. The length of the array will be in the range of [1, 1000]. 2. The elements in the array will be in the range of [-1000, 1000]. 3. 0 <= k <= len(arr)",
        "task_id": "120",
        "165": "// With an arraylist, add the first k elements.\n        // Sort the arraylist.\n        // for each element in the array, compare it to the last element of the\n        // arraylist, and replace it if the element is greater.\n        // The arraylist is now sorted, so the last k elements are the greatest\n        // k elements in the array.\n        ArrayList<Integer> result = new ArrayList<>();\n        if (arr.size() == 0) {\n            return result;\n        }\n        for (int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n        }\n        Collections.sort(result);\n        for (int i = k; i < arr.size(); i++) {\n            int end = result.size() - 1;\n            if (arr.get(i) > result.get(end)) {\n                result.remove(end);\n                result.add(arr.get(i));\n                Collections.sort(result);\n            }\n        }\n        return result;",
        "grade-165": {
            "execution": 0
        },
        "28": "// The idea is to use a k-size heap to store the biggest k elements.\n        // However, it is not straight-forward to use a max-heap to store the\n        // smallest k elements.\n        // Thus, we can use a min-heap to store the biggest k elements in the\n        // following way:\n        // Pop the min element.\n        // Then, push the maximum element of the remaining elements.\n        Comparator<Integer> comparator = (Integer x, Integer y) -> Integer.compare(x, y);\n        PriorityQueue<Integer> queue = new PriorityQueue<>(k, comparator);\n        int end = arr.size();\n        int start = 0;\n        while (start < end) {\n            int max = arr.get(start);\n            for (int i = start + 1; i < end; i++) {\n                int current = arr.get(i);\n                if (current > max) {\n                    max = current;\n                }\n            }\n            if (queue.size() < k) {\n                queue.add(max);\n            } else {\n                if (queue.peek() < max) {\n                    queue.poll();\n                    queue.add(max);\n                }\n            }\n            start++;\n        }\n        ArrayList<Integer> result = new ArrayList<>(k);\n        while (!queue.isEmpty()) {\n            result.add(queue.poll());\n        }\n        return result;",
        "grade-28": {
            "execution": 0
        },
        "6": "PriorityQueue<Integer> pq = new PriorityQueue<>(k, Collections.reverseOrder());\n        for (int i = 0; i < arr.size(); i++) {\n            if (pq.size() == k) {\n                if (arr.get(i) > pq.peek()) {\n                    pq.poll();\n                    pq.add(arr.get(i));\n                }\n            } else {\n                pq.add(arr.get(i));\n            }\n        }\n        ArrayList<Integer> l = new ArrayList<>();\n        while (pq.size() > 0) {\n            l.add(pq.poll());\n        }\n        return l;",
        "grade-6": {
            "execution": 0
        },
        "192": "TreeMap<Integer, Integer> map = new TreeMap<>();\n        for (int i = 0; i < arr.size(); i++) {\n            map.put(arr.get(i), i);\n        }\n        Integer[] arr2 = new Integer[k];\n        int i = 0;\n        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {\n            if (i == k) {\n                break;\n            }\n            arr2[i] = entry.getKey();\n            i++;\n        }\n        ArrayList<Integer> arr3 = new ArrayList<>(Arrays.asList(arr2));\n        Collections.reverse(arr3);\n        return arr3;",
        "grade-192": {
            "execution": 0
        },
        "70": "if (arr.size() == 0) {\n            return new ArrayList<Integer>();\n        }\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        MinHeap minHeap = new MinHeap(k);\n        for (int i = 0; i < arr.size(); i++) {\n            if (minHeap.size < k) {\n                minHeap.insert(arr.get(i));\n            } else {\n                if (arr.get(i) > minHeap.peek()) {\n                    minHeap.delete();\n                    minHeap.insert(arr.get(i));\n                }\n            }\n        }\n        return minHeap.elements;",
        "grade-70": {
            "execution": 0
        },
        "62": "return null;",
        "grade-62": {
            "execution": 0
        },
        "57": "// We can use a max heap to solve this problem. In a max heap, the minimum element\n        // is at the root of the heap.\n        // We will add all of the elements to the heap and then poll the root k times to\n        // get the maximum k elements.\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>(arr.size(), Collections.reverseOrder());\n        heap.addAll(arr);\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < k; i++) {\n            result.add(heap.poll());\n        }\n        return result;",
        "grade-57": {
            "execution": 0
        },
        "35": "ArrayList<Integer> list = new ArrayList<Integer>();\n        int max_i = 0;\n        for (int i = 0; i < k; i++) {\n            for (int j = 0; j < arr.size(); j++) {\n                if (arr.get(j) > arr.get(max_i))\n                    max_i = j;\n            }\n            list.add(arr.get(max_i));\n            arr.remove(max_i);\n        }\n        return list;",
        "grade-35": {
            "execution": 0
        },
        "191": "ArrayList<Integer> res = new ArrayList<Integer>();\n        int i, j;\n        for (i = 0; i < k; i++) {\n            int idx = i;\n            for (j = i + 1; j < arr.size(); j++) {\n                if (arr.get(j) > arr.get(idx)) {\n                    idx = j;\n                }\n            }\n            int tmp = arr.get(i);\n            arr.set(i, arr.get(idx));\n            arr.set(idx, tmp);\n            res.add(arr.get(i));\n        }\n        return res;",
        "grade-191": {
            "execution": 0
        },
        "26": "// Edge cases\n        if (arr == null || arr.size() == 0) return new ArrayList<Integer>();\n        if (k == 0) return new ArrayList<Integer>();\n        // Using a double ended queue\n        ArrayDeque<Integer> deque = new ArrayDeque<Integer>();\n        for (int i : arr) {\n            // Inserting the first element\n            if (deque.size() == 0) {\n                deque.addLast(i);\n            } else {\n                // If the number is less than the first element do nothing.\n                if (i < deque.getFirst()) {\n                    // do nothing\n                } else {\n                    // If the number is greater than the first element remove all the \n                    // numbers until the number is less than the current element or the\n                    // queue is empty.\n                    while (deque.size() > 0 && i > deque.getLast()) {\n                        deque.removeLast();\n                    }\n                    // Remove the first element if the size is equal to k.\n                    if (deque.size() == k) {\n                        deque.removeFirst();\n                    }\n                    // If the queue is still not empty then add the current element to the\n                    // queue.\n                    if (deque.size() < k) {\n                        deque.addLast(i);\n                    }\n                }\n            }\n        }\n        // Return the queue converted to an array list.\n        return new ArrayList<Integer>(deque);",
        "grade-26": {
            "execution": 0
        },
        "176": "// Return a sorted list of length k with the maximum k numbers in arr.\n        // There will be k maximum numbers in arr, not necessarily distinct.\n        // Therefore, the maximum k numbers in arr will be the k last numbers in the sorted array.\n        // Method:\n        // Sort the array in descending order.\n        // Return the sublist arr.subList(arr.size() - k, arr.size()).\n        // Time complexity is O(n log n) due to sorting.\n        // Space complexity is O(n) due to the array size.\n        Collections.sort(arr, Collections.reverseOrder());\n        return new ArrayList<Integer>(arr.subList(arr.size() - k, arr.size()));",
        "grade-176": {
            "execution": 0
        },
        "140": "assert k > 0 && k <= arr.size();\n        ArrayList<Integer> result = new ArrayList<>();\n        // Build a max heap. Note that the Java API is a min heap.\n        PriorityQueue<Integer> queue = new PriorityQueue<>(arr.size(),\n            new Comparator<Integer>() {\n                @Override\n                public int compare(Integer x, Integer y) {\n                    return y - x;\n                }\n            });\n        for (int i = 0; i < arr.size(); i++) {\n            if (i < k) {\n                queue.add(arr.get(i));\n            } else {\n                if (arr.get(i) > queue.peek()) {\n                    queue.remove();\n                    queue.add(arr.get(i));\n                }\n            }\n        }\n        while (!queue.isEmpty()) {\n            result.add(queue.remove());\n        }\n        return result;",
        "grade-140": {
            "execution": 0
        },
        "22": "assert (arr.size() >= k);\n        // Hash-based algorithm. Use a priority queue to store the top K elements.\n        // Use a hash to store whether an element is in the priority queue or not.\n        // O(n log k) time and O(k) space.\n        // Since every element is retrieved (and polled) at most once,\n        // the time complexity is O(n log k).\n        PriorityQueue<Integer> q = new PriorityQueue<>(k);\n        HashSet<Integer> set = new HashSet<>();\n        for (int i = 0; i < arr.size(); i++) {\n            int e = arr.get(i);\n            if (set.contains(e)) continue;\n            set.add(e);\n            if (q.size() < k) {\n                q.add(e);\n            } else {\n                if (e > q.peek()) {\n                    q.poll();\n                    q.add(e);\n                }\n            }\n        }\n        ArrayList<Integer> result = new ArrayList<>();\n        while (!q.isEmpty()) {\n            result.add(q.poll());\n        }\n        return result;",
        "grade-22": {
            "execution": 0
        },
        "152": "ArrayList<Integer> res = new ArrayList<Integer>();\n        if (arr.size() == 0) {\n            return res;\n        }\n        if (arr.size() == 1) {\n            res.add(arr.get(0));\n            return res;\n        }\n        if (arr.size() == k) {\n            return arr;\n        }\n        PriorityQueue<Integer> pq = new PriorityQueue<Integer>(k, new Comparator<Integer>() {\n            public int compare(Integer a, Integer b) {\n                return -Integer.compare(a, b);\n            }\n        });\n        for (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n        }\n        for (int i = 0; i < k; i++) {\n            res.add(pq.poll());\n        }\n        return res;",
        "grade-152": {
            "execution": 0
        },
        "108": "PriorityQueue<Integer> pq = new PriorityQueue<>(k, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer a, Integer b) {\n                return b - a;\n            }\n        });\n        for (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n        }\n        ArrayList<Integer> res = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            res.add(pq.poll());\n        }\n        return res;",
        "grade-108": {
            "execution": 0
        },
        "8": "PriorityQueue<Integer> pq = new PriorityQueue<Integer>(k + 1, new Comparator<Integer>() {\n            public int compare(Integer i1, Integer i2) {\n                return i2 - i1;\n            }\n        });\n        for (int i = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n            if (pq.size() > k) {\n                pq.poll();\n            }\n        }\n        return new ArrayList<Integer>(pq);",
        "grade-8": {
            "execution": 0
        },
        "7": "// build a max heap\n        PriorityQueue<Integer> pq = new PriorityQueue<Integer>(k, Collections.reverseOrder());\n        for (int e : arr) {\n            pq.add(e);\n        }\n        ArrayList<Integer> list = new ArrayList<Integer>();\n        while (k-- > 0) {\n            list.add(pq.poll());\n        }\n        return list;",
        "grade-7": {
            "execution": 0
        },
        "23": "int N = arr.size();\n        // Step 1: Extract all possible elements from the array\n        ArrayList<Integer> map = new ArrayList<Integer>();\n        for (int i = 0; i < N; i++) {\n            for (int j = i; j < N; j++) {\n                for (int l = i; l <= j; l++) {\n                    map.add(arr.get(l));\n                }\n            }\n        }\n        Collections.sort(map);\n        return new ArrayList<Integer>(map.subList(0, k));",
        "grade-23": {
            "execution": 0
        },
        "55": "// Find k elements of the maximum value\n        // If a duplicate value exists, the following value must be unique.\n        // This is the opposite of sorting by value.\n        // All values in the array must be unique.\n        // Time Complexity: O(k * log(k))\n        ArrayList<Integer> new_arr = new ArrayList<Integer>();\n        if (arr.size() < k) {\n            return new_arr;\n        }\n        // Max heap\n        PriorityQueue<Integer> pq = new PriorityQueue<Integer>(new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                if (o1 > o2) {\n                    return -1;\n                } else if (o1 < o2) {\n                    return 1;\n                } else {\n                    return 0;\n                }\n            }\n        });\n        for (int i = 0; i < arr.size(); i++) {\n            if (pq.size() < k) {\n                pq.add(arr.get(i));\n            } else {\n                int top = pq.peek();\n                if (top < arr.get(i)) {\n                    pq.poll();\n                    pq.add(arr.get(i));\n                }\n            }\n        }\n        while (!pq.isEmpty()) {\n            new_arr.add(pq.poll());\n        }\n        return new_arr;",
        "grade-55": {
            "execution": 0
        },
        "59": "ArrayList<Integer> q = new ArrayList<>();\n        int i = 0;\n        for (; i < k; i++) {\n            q.add(arr.get(i));\n        }\n        for (; i < arr.size(); i++) {\n            int j = 0;\n            for (; j < k; j++) {\n                if (arr.get(i) > q.get(j)) {\n                    break;\n                }\n            }\n            if (j < k) {\n                q.remove(k - 1);\n                q.add(j, arr.get(i));\n            }\n        }\n        return q;",
        "grade-59": {
            "execution": 0
        },
        "bleu-165": 0.13652352112656338,
        "bleu-28": 0.0763049787352899,
        "bleu-6": 0.15855160920293565,
        "bleu-192": 0.13750195161659928,
        "bleu-70": 0.16775795851019065,
        "bleu-62": 1.3917768314574892e-09,
        "bleu-57": 0.12908810160487397,
        "bleu-35": 0.14256550767553164,
        "bleu-191": 0.11847658409903797,
        "bleu-26": 0.08038182353779674,
        "bleu-176": 0.13496786903182317,
        "bleu-140": 0.11760952396949166,
        "bleu-22": 0.08576384919358632,
        "bleu-152": 0.13021857576026588,
        "bleu-108": 0.1662586731346131,
        "bleu-8": 0.1689654049383395,
        "bleu-7": 0.18373333709610626,
        "bleu-23": 0.1653933340424025,
        "bleu-55": 0.0754402207754163,
        "bleu-59": 0.14593441968372448,
        "codebleu-165": 0.6800142174367784,
        "codebleu-28": 0.6672399492752252,
        "codebleu-6": 0.6647507368385305,
        "codebleu-192": 0.6576244791893108,
        "codebleu-70": 0.6704134698160988,
        "codebleu-62": 0.023255822824655735,
        "codebleu-57": 0.617584856657264,
        "codebleu-35": 0.5885777837350182,
        "codebleu-191": 0.6058445082176371,
        "codebleu-26": 0.6588540707022412,
        "codebleu-176": 0.5734071699015183,
        "codebleu-140": 0.672587177951088,
        "codebleu-22": 0.6815101259009168,
        "codebleu-152": 0.6956403065387116,
        "codebleu-108": 0.6380096095251194,
        "codebleu-8": 0.6748488942952465,
        "codebleu-7": 0.5977144418031686,
        "codebleu-23": 0.6031949238735919,
        "codebleu-55": 0.6786962744069893,
        "codebleu-59": 0.6342529947623081,
        "chrf-165": 0.3886961948633039,
        "chrf-28": 0.2510890160794025,
        "chrf-6": 0.3833204636187265,
        "chrf-192": 0.3984309496937739,
        "chrf-70": 0.3751518495930452,
        "chrf-62": 0.03605700181843165,
        "chrf-57": 0.32735390137328646,
        "chrf-35": 0.3373634167129116,
        "chrf-191": 0.3241742158282948,
        "chrf-26": 0.25053270707038966,
        "chrf-176": 0.4047106336034078,
        "chrf-140": 0.3328715286579773,
        "chrf-22": 0.28511986996013683,
        "chrf-152": 0.3606399928468307,
        "chrf-108": 0.3435821185032419,
        "chrf-8": 0.34039446480120406,
        "chrf-7": 0.3464271567371426,
        "chrf-23": 0.41322256985635236,
        "chrf-55": 0.27546797921406124,
        "chrf-59": 0.3273078405744133,
        "rougel-165": 0.2652329749103943,
        "rougel-28": 0.20168067226890757,
        "rougel-6": 0.33492822966507174,
        "rougel-192": 0.2966507177033493,
        "rougel-70": 0.42156862745098034,
        "rougel-62": 0.0625,
        "rougel-57": 0.29556650246305416,
        "rougel-35": 0.34567901234567905,
        "rougel-191": 0.3076923076923077,
        "rougel-26": 0.23626373626373626,
        "rougel-176": 0.28444444444444444,
        "rougel-140": 0.2748091603053435,
        "rougel-22": 0.22429906542056077,
        "rougel-152": 0.3107569721115538,
        "rougel-108": 0.36756756756756753,
        "rougel-8": 0.3431952662721894,
        "rougel-7": 0.43537414965986393,
        "rougel-23": 0.3617021276595745,
        "rougel-55": 0.2182890855457227,
        "rougel-59": 0.32820512820512815,
        "meteor-165": 0.4179734258898688,
        "meteor-28": 0.4285893491124262,
        "meteor-6": 0.5117965553568365,
        "meteor-192": 0.525782239227199,
        "meteor-70": 0.4151750354500653,
        "meteor-62": 0.018115942028985508,
        "meteor-57": 0.4628541687754248,
        "meteor-35": 0.4383597498909408,
        "meteor-191": 0.41717984982300377,
        "meteor-26": 0.3583661971830986,
        "meteor-176": 0.5284346870337403,
        "meteor-140": 0.38980533333333345,
        "meteor-22": 0.4529916201994533,
        "meteor-152": 0.3956075778078485,
        "meteor-108": 0.43854218259864625,
        "meteor-8": 0.44922205310333174,
        "meteor-7": 0.48625396305613033,
        "meteor-23": 0.5357366863905326,
        "meteor-55": 0.3815029728898205,
        "meteor-59": 0.41324464677891654,
        "ruby-165": 0.1651376146788991,
        "ruby-28": 0.1216216216216216,
        "ruby-6": 0.20270270270270274,
        "ruby-192": 0.18918918918918914,
        "ruby-70": 0.30069930069930073,
        "ruby-62": 0.032786885245901676,
        "ruby-57": 0.1901408450704225,
        "ruby-35": 0.2178217821782178,
        "ruby-191": 0.20149253731343286,
        "ruby-26": 0.13531353135313529,
        "ruby-176": 0.17682926829268297,
        "ruby-140": 0.1691542288557214,
        "ruby-22": 0.1384615384615384,
        "ruby-152": 0.19999999999999996,
        "ruby-108": 0.2338709677419355,
        "ruby-8": 0.2222222222222222,
        "ruby-7": 0.2441860465116279,
        "ruby-23": 0.1889763779527559,
        "ruby-55": 0.13309352517985606,
        "ruby-59": 0.23134328358208955,
        "codebertscore_f1-165": 0.7110105752944946,
        "codebertscore_f3-165": 0.7527452707290649,
        "codebertscore_f1-28": 0.6590121984481812,
        "codebertscore_f3-28": 0.6873543858528137,
        "codebertscore_f1-6": 0.7212868928909302,
        "codebertscore_f3-6": 0.7466930747032166,
        "codebertscore_f1-192": 0.7217562794685364,
        "codebertscore_f3-192": 0.7419852018356323,
        "codebertscore_f1-70": 0.7398888468742371,
        "codebertscore_f3-70": 0.7718615531921387,
        "codebertscore_f1-62": 0.5518906116485596,
        "codebertscore_f3-62": 0.5125563144683838,
        "codebertscore_f1-57": 0.7181859612464905,
        "codebertscore_f3-57": 0.7515612244606018,
        "codebertscore_f1-35": 0.7378708720207214,
        "codebertscore_f3-35": 0.7523523569107056,
        "codebertscore_f1-191": 0.7177236080169678,
        "codebertscore_f3-191": 0.7400079369544983,
        "codebertscore_f1-26": 0.6859457492828369,
        "codebertscore_f3-26": 0.7448186874389648,
        "codebertscore_f1-176": 0.756213903427124,
        "codebertscore_f3-176": 0.8011926412582397,
        "codebertscore_f1-140": 0.7167771458625793,
        "codebertscore_f3-140": 0.7564260363578796,
        "codebertscore_f1-22": 0.6799677014350891,
        "codebertscore_f3-22": 0.7120550870895386,
        "codebertscore_f1-152": 0.7107714414596558,
        "codebertscore_f3-152": 0.7533294558525085,
        "codebertscore_f1-108": 0.714367151260376,
        "codebertscore_f3-108": 0.7292397022247314,
        "codebertscore_f1-8": 0.731688916683197,
        "codebertscore_f3-8": 0.7400738000869751,
        "codebertscore_f1-7": 0.7482460737228394,
        "codebertscore_f3-7": 0.7487685084342957,
        "codebertscore_f1-23": 0.7551469206809998,
        "codebertscore_f3-23": 0.780000627040863,
        "codebertscore_f1-55": 0.6859346032142639,
        "codebertscore_f3-55": 0.7429069876670837,
        "codebertscore_f1-59": 0.7142338752746582,
        "codebertscore_f3-59": 0.7378104329109192,
        "codebertscore_s_f1-165": 0.7496792674064636,
        "codebertscore_s_f3-165": 0.7860627174377441,
        "codebertscore_s_f1-28": 0.7069065570831299,
        "codebertscore_s_f3-28": 0.742409348487854,
        "codebertscore_s_f1-6": 0.7557101249694824,
        "codebertscore_s_f3-6": 0.7797076106071472,
        "codebertscore_s_f1-192": 0.7465400099754333,
        "codebertscore_s_f3-192": 0.7628298401832581,
        "codebertscore_s_f1-70": 0.752078115940094,
        "codebertscore_s_f3-70": 0.7803568243980408,
        "codebertscore_s_f1-62": 0.6118598580360413,
        "codebertscore_s_f3-62": 0.5429646372795105,
        "codebertscore_s_f1-57": 0.7263465523719788,
        "codebertscore_s_f3-57": 0.7604139447212219,
        "codebertscore_s_f1-35": 0.7549892067909241,
        "codebertscore_s_f3-35": 0.7713954448699951,
        "codebertscore_s_f1-191": 0.7459110021591187,
        "codebertscore_s_f3-191": 0.7665026783943176,
        "codebertscore_s_f1-26": 0.7296022176742554,
        "codebertscore_s_f3-26": 0.7638631463050842,
        "codebertscore_s_f1-176": 0.7703304886817932,
        "codebertscore_s_f3-176": 0.8179752826690674,
        "codebertscore_s_f1-140": 0.7502974271774292,
        "codebertscore_s_f3-140": 0.7853153347969055,
        "codebertscore_s_f1-22": 0.71214759349823,
        "codebertscore_s_f3-22": 0.7425897121429443,
        "codebertscore_s_f1-152": 0.759852945804596,
        "codebertscore_s_f3-152": 0.7841079235076904,
        "codebertscore_s_f1-108": 0.7316731214523315,
        "codebertscore_s_f3-108": 0.7515891790390015,
        "codebertscore_s_f1-8": 0.7418980598449707,
        "codebertscore_s_f3-8": 0.7586526870727539,
        "codebertscore_s_f1-7": 0.7391381859779358,
        "codebertscore_s_f3-7": 0.7466899752616882,
        "codebertscore_s_f1-23": 0.7663108706474304,
        "codebertscore_s_f3-23": 0.792701005935669,
        "codebertscore_s_f1-55": 0.7228344678878784,
        "codebertscore_s_f3-55": 0.7576931715011597,
        "codebertscore_s_f1-59": 0.7559942007064819,
        "codebertscore_s_f3-59": 0.774566113948822,
        "gpt35_nsnr-165": 4,
        "raw_gpt35_nsnr-165": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-192": 4,
        "raw_gpt35_nsnr-192": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 2,
        "raw_gpt35_nsnr-62": "2",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-191": 4,
        "raw_gpt35_nsnr-191": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-176": 4,
        "raw_gpt35_nsnr-176": "4",
        "gpt35_nsnr-140": 4,
        "raw_gpt35_nsnr-140": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-152": 4,
        "raw_gpt35_nsnr-152": "4",
        "gpt35_nsnr-108": 4,
        "raw_gpt35_nsnr-108": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 3,
        "raw_gpt35_nsnr-23": "3",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-165": 4,
        "raw_gpt35_nswr-165": "4",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-192": 3,
        "raw_gpt35_nswr-192": "3",
        "gpt35_nswr-70": 3,
        "raw_gpt35_nswr-70": "3",
        "gpt35_nswr-62": 0,
        "raw_gpt35_nswr-62": "0",
        "gpt35_nswr-57": 4,
        "raw_gpt35_nswr-57": "4",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-191": 3,
        "raw_gpt35_nswr-191": "3",
        "gpt35_nswr-26": 4,
        "raw_gpt35_nswr-26": "4",
        "gpt35_nswr-176": 4,
        "raw_gpt35_nswr-176": "4",
        "gpt35_nswr-140": 4,
        "raw_gpt35_nswr-140": "4",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-152": 3,
        "raw_gpt35_nswr-152": "3",
        "gpt35_nswr-108": 4,
        "raw_gpt35_nswr-108": "4",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-23": 2,
        "raw_gpt35_nswr-23": "2",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return True if every opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\")\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    // >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String brackets) {\n",
        "snippet": [
            "        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '<') {\n                depth += 1;\n            } else {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}"
        ],
        "simplified": "brackets is a string of \"<\" and \">\". return True if every opening bracket has a corresponding closing bracket.",
        "task_id": "56",
        "34": "int balance = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '<') {\n                balance++;\n            } else {\n                balance--;\n            }\n            if (balance < 0) {\n                return false;\n            }\n        }\n        return balance == 0;",
        "grade-34": {
            "execution": 1
        },
        "6": "int n = brackets.length();\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (brackets.charAt(i) == '<') {\n                count += 1;\n            } else {\n                count -= 1;\n            }\n            if (count < 0) {\n                return false;\n            }\n        }\n        return count == 0;",
        "grade-6": {
            "execution": 1
        },
        "95": "int counter = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '<') {\n                counter++;\n            } else {\n                counter--;\n            }\n            if (counter < 0) {\n                return false;\n            }\n        }\n        return counter == 0;",
        "grade-95": {
            "execution": 1
        },
        "81": "int cnt = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '<') cnt++;\n            else cnt--;\n            if (cnt < 0) return false;\n        }\n        return cnt == 0;",
        "grade-81": {
            "execution": 1
        },
        "73": "int a = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '<') {\n                a++;\n            } else {\n                a--;\n            }\n            if (a < 0) {\n                return false;\n            }\n        }\n        return a == 0;",
        "grade-73": {
            "execution": 1
        },
        "43": "//return brackets.length() == 0 || (brackets.charAt(0) == '<' && correctBracketing(brackets.substring(1)));\n        //System.out.println(brackets);\n        if (brackets.length() == 0) {\n            return true;\n        }\n        else if (brackets.charAt(0) == '<') {\n            return correctBracketing(brackets.substring(1));\n        }\n        else if (brackets.charAt(0) == '>') {\n            return false;\n        }\n        else {\n            throw new RuntimeException(\"something went wrong\");\n        }",
        "grade-43": {
            "execution": 0
        },
        "32": "Stack<Character> s = new Stack<Character>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                s.push(c);\n            } else {\n                if (s.isEmpty()) {\n                    return false;\n                }\n                s.pop();\n            }\n        }\n        return s.isEmpty();",
        "grade-32": {
            "execution": 1
        },
        "26": "boolean result = true;\n        LinkedList<String> stack = new LinkedList<String>();\n        for (String bracket : brackets.split(\"\")) {\n            if (bracket.equals(\"<\")) {\n                stack.push(bracket);\n            } else if (bracket.equals(\">\")) {\n                if (stack.isEmpty()) {\n                    result = false;\n                    break;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        if (!stack.isEmpty()) {\n            result = false;\n        }\n        return result;",
        "grade-26": {
            "execution": 1
        },
        "152": "int count = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            char ch = brackets.charAt(i);\n            if (ch == '<') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                return false;\n            }\n        }\n        return count == 0;",
        "grade-152": {
            "execution": 1
        },
        "8": "throw new UnsupportedOperationException(\"Problem 0\");",
        "grade-8": {
            "execution": 0
        },
        "7": "int n = brackets.length();\n        int open = 0;\n        for (int i = 0; i < n; i++) {\n            if (brackets.charAt(i) == '<') {\n                open++;\n            } else {\n                open--;\n            }\n            if (open < 0) {\n                return false;\n            }\n        }\n        return open == 0;",
        "grade-7": {
            "execution": 1
        },
        "29": "int count = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n            if (c == '<') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                return false;\n            }\n        }\n        return count == 0;",
        "grade-29": {
            "execution": 1
        },
        "71": "List<String> list = Arrays.asList(brackets.split(\"\"));\n        int count = 0;\n        for (String bracket : list) {\n            if (bracket.equals(\"<\")) {\n                count += 1;\n            } else if (bracket.equals(\">\")) {\n                count -= 1;\n            }\n            if (count < 0) {\n                return false;\n            }\n        }\n        return count == 0;",
        "grade-71": {
            "execution": 1
        },
        "75": "if (brackets.length() == 0) {\n            return true;\n        }\n        if (brackets.charAt(0) == '>') {\n            return false;\n        }\n        int count = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '<') {\n                count += 1;\n            } else {\n                count -= 1;\n            }\n            if (count < 0) {\n                return false;\n            }\n        }\n        return count == 0;",
        "grade-75": {
            "execution": 1
        },
        "189": "if (brackets.length() == 0) return true;\n        if (brackets.charAt(0) == '>') return false;\n        int open = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n            if (c == '<') open++;\n            else if (c == '>') open--;\n            if (open < 0) return false;\n        }\n        return open == 0;",
        "grade-189": {
            "execution": 1
        },
        "63": "int open = 0;\n\t\tfor (int i = 0; i < brackets.length(); i++) {\n\t\t\tif (brackets.charAt(i) == '<') {\n\t\t\t\topen++;\n\t\t\t} else {\n\t\t\t\topen--;\n\t\t\t}\n\t\t\tif (open < 0) return false;\n\t\t}\n\t\treturn open == 0;",
        "grade-63": {
            "execution": 1
        },
        "150": "return 0 == brackets.chars().reduce(0, (count, c) -> {\n            if (count < 0) {\n                return count;\n            }\n            if (c == '<') {\n                return count + 1;\n            }\n            return count - 1;\n        });",
        "grade-150": {
            "execution": 1
        },
        "72": "if (brackets.length() % 2 != 0) {\n            return false;\n        }\n        for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '<') {\n                brackets = brackets.substring(0, i) + brackets.substring(i + 1);\n                i--;\n            } else {\n                brackets = brackets.substring(0, i - 1) + brackets.substring(i + 1);\n                i -= 2;\n            }\n        }\n        return brackets.length() == 0;",
        "grade-72": {
            "execution": 0
        },
        "161": "// TODO: implement this method\n        return false;",
        "grade-161": {
            "execution": 0
        },
        "96": "// fill me in\n      return false;",
        "grade-96": {
            "execution": 0
        },
        "bleu-34": 0.4058722809462621,
        "bleu-6": 0.44525200073900356,
        "bleu-95": 0.4058722809462621,
        "bleu-81": 0.286976865614592,
        "bleu-73": 0.4058722809462621,
        "bleu-43": 0.14708527787810563,
        "bleu-32": 0.36953720841044385,
        "bleu-26": 0.1420731090817694,
        "bleu-152": 0.364020725522616,
        "bleu-8": 0.0012714803640719564,
        "bleu-7": 0.38062426926495413,
        "bleu-29": 0.364020725522616,
        "bleu-71": 0.3565941063487365,
        "bleu-75": 0.3219905547604064,
        "bleu-189": 0.1541425799832658,
        "bleu-63": 0.341488299735267,
        "bleu-150": 0.27418166993455256,
        "bleu-72": 0.20576315820578753,
        "bleu-161": 0.0008378120639585995,
        "bleu-96": 0.00021241169775598463,
        "codebleu-34": 0.652014972925384,
        "codebleu-6": 0.7121627281298877,
        "codebleu-95": 0.652014972925384,
        "codebleu-81": 0.5338753387533874,
        "codebleu-73": 0.652014972925384,
        "codebleu-43": 0.5262125035043453,
        "codebleu-32": 0.5832661121508118,
        "codebleu-26": 0.5428010667092641,
        "codebleu-152": 0.6629501759494968,
        "codebleu-8": 0.0731766701994932,
        "codebleu-7": 0.6528071550659994,
        "codebleu-29": 0.6629501759494968,
        "codebleu-71": 0.69141074725383,
        "codebleu-75": 0.7178189128088267,
        "codebleu-189": 0.5539669189795347,
        "codebleu-63": 0.5903186618073076,
        "codebleu-150": 0.5416492734861701,
        "codebleu-72": 0.5817213344547237,
        "codebleu-161": 0.06536803338236624,
        "codebleu-96": 0.0488991736911297,
        "chrf-34": 0.441805635942908,
        "chrf-6": 0.4848506790037832,
        "chrf-95": 0.4469836932005238,
        "chrf-81": 0.36976777771760444,
        "chrf-73": 0.4582734700578506,
        "chrf-43": 0.30336284674972663,
        "chrf-32": 0.5049596001280381,
        "chrf-26": 0.27533105108646233,
        "chrf-152": 0.4429008339498041,
        "chrf-8": 0.06420171741621965,
        "chrf-7": 0.4566055058030024,
        "chrf-29": 0.4364609511012041,
        "chrf-71": 0.4254485221004037,
        "chrf-75": 0.4547303836127512,
        "chrf-189": 0.3352285832257625,
        "chrf-63": 0.4142656459379299,
        "chrf-150": 0.3024365622021712,
        "chrf-72": 0.35591350559114,
        "chrf-161": 0.12367923715074883,
        "chrf-96": 0.10500608983927845,
        "rougel-34": 0.6716417910447761,
        "rougel-6": 0.6382978723404256,
        "rougel-95": 0.6716417910447761,
        "rougel-81": 0.609375,
        "rougel-73": 0.6716417910447761,
        "rougel-43": 0.346938775510204,
        "rougel-32": 0.5531914893617021,
        "rougel-26": 0.3820224719101124,
        "rougel-152": 0.6474820143884892,
        "rougel-8": 0.13333333333333333,
        "rougel-7": 0.5899280575539567,
        "rougel-29": 0.6474820143884892,
        "rougel-71": 0.5827814569536424,
        "rougel-75": 0.5697674418604651,
        "rougel-189": 0.4482758620689656,
        "rougel-63": 0.6515151515151516,
        "rougel-150": 0.43333333333333335,
        "rougel-72": 0.4153005464480874,
        "rougel-161": 0.1095890410958904,
        "rougel-96": 0.08450704225352113,
        "meteor-34": 0.6707856836036188,
        "meteor-6": 0.7421767441860466,
        "meteor-95": 0.6707856836036188,
        "meteor-81": 0.5529117689342854,
        "meteor-73": 0.6707856836036188,
        "meteor-43": 0.41434068421393005,
        "meteor-32": 0.5325106786900805,
        "meteor-26": 0.40641495601173017,
        "meteor-152": 0.6857184370409035,
        "meteor-8": 0.05181347150259067,
        "meteor-7": 0.6849424572317262,
        "meteor-29": 0.6857184370409035,
        "meteor-71": 0.672393893129771,
        "meteor-75": 0.7377438537583128,
        "meteor-189": 0.532841691248771,
        "meteor-63": 0.5864053856294006,
        "meteor-150": 0.42630709134615385,
        "meteor-72": 0.4963406113537118,
        "meteor-161": 0.03466204506065858,
        "meteor-96": 0.02608695652173913,
        "ruby-34": 0.5492957746478873,
        "ruby-6": 0.5512820512820513,
        "ruby-95": 0.5492957746478873,
        "ruby-81": 0.41538461538461535,
        "ruby-73": 0.5492957746478873,
        "ruby-43": 0.22556390977443608,
        "ruby-32": 0.4358974358974359,
        "ruby-26": 0.26956521739130435,
        "ruby-152": 0.513157894736842,
        "ruby-8": 0.06349206349206349,
        "ruby-7": 0.48684210526315785,
        "ruby-29": 0.513157894736842,
        "ruby-71": 0.43181818181818177,
        "ruby-75": 0.4128440366972477,
        "ruby-189": 0.2702702702702703,
        "ruby-63": 0.5072463768115942,
        "ruby-150": 0.23809523809523814,
        "ruby-72": 0.275,
        "ruby-161": 0.06349206349206349,
        "ruby-96": 0.04761904761904767,
        "codebertscore_f1-34": 0.861751139163971,
        "codebertscore_f3-34": 0.8681322336196899,
        "codebertscore_f1-6": 0.8666737079620361,
        "codebertscore_f3-6": 0.8816394209861755,
        "codebertscore_f1-95": 0.8615792989730835,
        "codebertscore_f3-95": 0.8683058023452759,
        "codebertscore_f1-81": 0.8347790241241455,
        "codebertscore_f3-81": 0.8436537981033325,
        "codebertscore_f1-73": 0.8555327653884888,
        "codebertscore_f3-73": 0.8623162508010864,
        "codebertscore_f1-43": 0.7102828621864319,
        "codebertscore_f3-43": 0.7333978414535522,
        "codebertscore_f1-32": 0.827966034412384,
        "codebertscore_f3-32": 0.8332524299621582,
        "codebertscore_f1-26": 0.7342893481254578,
        "codebertscore_f3-26": 0.7478103637695312,
        "codebertscore_f1-152": 0.866407036781311,
        "codebertscore_f3-152": 0.8739838004112244,
        "codebertscore_f1-8": 0.5958519577980042,
        "codebertscore_f3-8": 0.5824887752532959,
        "codebertscore_f1-7": 0.8373080492019653,
        "codebertscore_f3-7": 0.8456507921218872,
        "codebertscore_f1-29": 0.8707274794578552,
        "codebertscore_f3-29": 0.8787879943847656,
        "codebertscore_f1-71": 0.8294655680656433,
        "codebertscore_f3-71": 0.8565142154693604,
        "codebertscore_f1-75": 0.8160401582717896,
        "codebertscore_f3-75": 0.8318976759910583,
        "codebertscore_f1-189": 0.8111494183540344,
        "codebertscore_f3-189": 0.8248489499092102,
        "codebertscore_f1-63": 0.8287582993507385,
        "codebertscore_f3-63": 0.8357326984405518,
        "codebertscore_f1-150": 0.7657666206359863,
        "codebertscore_f3-150": 0.7663334012031555,
        "codebertscore_f1-72": 0.7632797956466675,
        "codebertscore_f3-72": 0.7934837341308594,
        "codebertscore_f1-161": 0.5780408978462219,
        "codebertscore_f3-161": 0.5671203136444092,
        "codebertscore_f1-96": 0.5987574458122253,
        "codebertscore_f3-96": 0.5824629664421082,
        "codebertscore_s_f1-34": 0.873573899269104,
        "codebertscore_s_f3-34": 0.8758438229560852,
        "codebertscore_s_f1-6": 0.8803903460502625,
        "codebertscore_s_f3-6": 0.891562283039093,
        "codebertscore_s_f1-95": 0.8739869594573975,
        "codebertscore_s_f3-95": 0.8766432404518127,
        "codebertscore_s_f1-81": 0.8451112508773804,
        "codebertscore_s_f3-81": 0.851065456867218,
        "codebertscore_s_f1-73": 0.8685502409934998,
        "codebertscore_s_f3-73": 0.8713634610176086,
        "codebertscore_s_f1-43": 0.7333335876464844,
        "codebertscore_s_f3-43": 0.7507922053337097,
        "codebertscore_s_f1-32": 0.8324185013771057,
        "codebertscore_s_f3-32": 0.836552619934082,
        "codebertscore_s_f1-26": 0.7511863708496094,
        "codebertscore_s_f3-26": 0.7644369006156921,
        "codebertscore_s_f1-152": 0.8766716122627258,
        "codebertscore_s_f3-152": 0.8807719945907593,
        "codebertscore_s_f1-8": 0.6056505441665649,
        "codebertscore_s_f3-8": 0.6001141667366028,
        "codebertscore_s_f1-7": 0.8498910069465637,
        "codebertscore_s_f3-7": 0.8540868163108826,
        "codebertscore_s_f1-29": 0.8811599016189575,
        "codebertscore_s_f3-29": 0.885797917842865,
        "codebertscore_s_f1-71": 0.8494600653648376,
        "codebertscore_s_f3-71": 0.872620701789856,
        "codebertscore_s_f1-75": 0.8330070376396179,
        "codebertscore_s_f3-75": 0.8437268733978271,
        "codebertscore_s_f1-189": 0.8261469602584839,
        "codebertscore_s_f3-189": 0.8322511911392212,
        "codebertscore_s_f1-63": 0.840175211429596,
        "codebertscore_s_f3-63": 0.8426836729049683,
        "codebertscore_s_f1-150": 0.7889935374259949,
        "codebertscore_s_f3-150": 0.7895525097846985,
        "codebertscore_s_f1-72": 0.7790558934211731,
        "codebertscore_s_f3-72": 0.804320216178894,
        "codebertscore_s_f1-161": 0.6339234709739685,
        "codebertscore_s_f3-161": 0.6295340061187744,
        "codebertscore_s_f1-96": 0.6392014026641846,
        "codebertscore_s_f3-96": 0.6210126280784607,
        "gpt35_nsnr-34": 4,
        "raw_gpt35_nsnr-34": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-95": 4,
        "raw_gpt35_nsnr-95": "4",
        "gpt35_nsnr-81": 4,
        "raw_gpt35_nsnr-81": "4",
        "gpt35_nsnr-73": 4,
        "raw_gpt35_nsnr-73": "4",
        "gpt35_nsnr-43": 3,
        "raw_gpt35_nsnr-43": "3",
        "gpt35_nsnr-32": 4,
        "raw_gpt35_nsnr-32": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-152": 4,
        "raw_gpt35_nsnr-152": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-29": 4,
        "raw_gpt35_nsnr-29": "4",
        "gpt35_nsnr-71": 4,
        "raw_gpt35_nsnr-71": "4",
        "gpt35_nsnr-75": 4,
        "raw_gpt35_nsnr-75": "4",
        "gpt35_nsnr-189": 4,
        "raw_gpt35_nsnr-189": "4",
        "gpt35_nsnr-63": 4,
        "raw_gpt35_nsnr-63": "4",
        "gpt35_nsnr-150": 4,
        "raw_gpt35_nsnr-150": "4",
        "gpt35_nsnr-72": 3,
        "raw_gpt35_nsnr-72": "3",
        "gpt35_nsnr-161": 0,
        "raw_gpt35_nsnr-161": "0",
        "gpt35_nsnr-96": 2,
        "raw_gpt35_nsnr-96": "2",
        "gpt35_nswr-34": 4,
        "raw_gpt35_nswr-34": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-95": 4,
        "raw_gpt35_nswr-95": "4",
        "gpt35_nswr-81": 4,
        "raw_gpt35_nswr-81": "4",
        "gpt35_nswr-73": 4,
        "raw_gpt35_nswr-73": "4",
        "gpt35_nswr-43": 2,
        "raw_gpt35_nswr-43": "2",
        "gpt35_nswr-32": 3,
        "raw_gpt35_nswr-32": "3",
        "gpt35_nswr-26": 4,
        "raw_gpt35_nswr-26": "4",
        "gpt35_nswr-152": 4,
        "raw_gpt35_nswr-152": "4",
        "gpt35_nswr-8": 0,
        "raw_gpt35_nswr-8": "0",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-29": 4,
        "raw_gpt35_nswr-29": "4",
        "gpt35_nswr-71": 3,
        "raw_gpt35_nswr-71": "3",
        "gpt35_nswr-75": 3,
        "raw_gpt35_nswr-75": "3",
        "gpt35_nswr-189": 4,
        "raw_gpt35_nswr-189": "4",
        "gpt35_nswr-63": 4,
        "raw_gpt35_nswr-63": "4",
        "gpt35_nswr-150": 3,
        "raw_gpt35_nswr-150": "3",
        "gpt35_nswr-72": 2,
        "raw_gpt35_nswr-72": "2",
        "gpt35_nswr-161": 3,
        "raw_gpt35_nswr-161": "3",
        "gpt35_nswr-96": 3,
        "raw_gpt35_nswr-96": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns a list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    public static ArrayList<String> selectWords(String s, int n) {\n",
        "snippet": [
            "        List<String> result = new ArrayList<>();\n        for (String word : s.split(\" \")) {\n            int n_consonants = 0;\n            for (char c : word.toCharArray()) {\n                c = Character.toLowerCase(c);\n                if (\"aeiou\".indexOf(c) == -1) {\n                    n_consonants += 1;\n                }\n            }\n            if (n_consonants == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n}"
        ],
        "simplified": "Given a string s and a natural number n, you have been tasked to implement a function that returns a list of all words from string s that contain exactly n consonants, in order these words appear in the string s. If the string s is empty then the function should return an empty list. Note: you may assume the input string contains only letters and spaces.",
        "task_id": "117",
        "186": "String[] splitted = s.split(\" \");\n        ArrayList<String> words = new ArrayList<String>();\n        for (String word : splitted) {\n            int consonants = 0;\n            word = word.toLowerCase();\n            for (int i = 0; i < word.length(); i++) {\n                if (!isVowel(word.charAt(i))) {\n                    consonants++;\n                }\n            }\n            if (consonants == n) {\n                words.add(word);\n            }\n        }\n        return words;",
        "grade-186": {
            "execution": 0
        },
        "30": "return new ArrayList<String>();",
        "grade-30": {
            "execution": 0
        },
        "6": "// Write your code here.\n        ArrayList<String> words = new ArrayList<>();\n        int start = 0;\n        int end = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == ' ') {\n                end = i;\n                words.add(s.substring(start, end));\n                start = i + 1;\n            }\n        }\n        if (start != s.length()) {\n            words.add(s.substring(start, s.length()));\n        }\n        words.removeIf(word -> (countConsonants(word) != n));\n        return words;",
        "grade-6": {
            "execution": 0
        },
        "77": "ArrayList<String> words = new ArrayList<String>();\n        String[] split_s = s.split(\" \");\n        for (String w : split_s) {\n            int count = 0;\n            for (int i = 0; i < w.length(); i++) {\n                String c = w.substring(i, i + 1);\n                if (c.equals(\"a\") || c.equals(\"e\") || c.equals(\"i\") || c.equals(\"o\") || c.equals(\"u\"))\n                    count++;\n            }\n            if (count == n)\n                words.add(w);\n        }\n        return words;",
        "grade-77": {
            "execution": 0
        },
        "68": "ArrayList<String> words = new ArrayList<String>();\n        // int n = 4;\n        // String s = \"Mary had a little lamb\";\n        Pattern p = Pattern.compile(\"[bcdfghjklmnpqrstvwxyz]\", Pattern.CASE_INSENSITIVE);\n        for (String word : s.split(\" \")) {\n            int count = 0;\n            for (int i = 0; i < word.length(); i++) {\n                if (p.matcher(String.valueOf(word.charAt(i))).matches()) {\n                    count++;\n                }\n            }\n            if (count == n) {\n                words.add(word);\n            }\n        }\n        return words;",
        "grade-68": {
            "execution": 0
        },
        "60": "ArrayList<String> words = new ArrayList<>();\n        int cons = 0;\n        String temp = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == ' ') {\n                words.add(temp);\n                temp = \"\";\n                cons = 0;\n            } else {\n                temp += s.charAt(i);\n                if (!isVowel(s.charAt(i))) cons++;\n            }\n        }\n        words.add(temp);\n        for (int i = 0; i < words.size(); i++) {\n            if (countConsonants(words.get(i)) != n) {\n                words.remove(i);\n                i--;\n            }\n        }\n        return words;",
        "grade-60": {
            "execution": 0
        },
        "37": "ArrayList<String> result = new ArrayList<String>();\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            int consonants = 0;\n            for (int i = 0; i < word.length(); i++) {\n                char c = word.charAt(i);\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                    consonants++;\n                }\n            }\n            if (consonants == n) {\n                result.add(word);\n            }\n        }\n        return result;",
        "grade-37": {
            "execution": 0
        },
        "28": "ArrayList<String> result = new ArrayList<String>();\n        if (s.length() == 0) return result;\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            int numberOfConsonants = 0;\n            for (char c : word.toCharArray()) {\n                if (isConsonant(c)) numberOfConsonants++;\n            }\n            if (numberOfConsonants == n) result.add(word);\n        }\n        return result;",
        "grade-28": {
            "execution": 0
        },
        "197": "String[] words = s.split(\" \");\n        ArrayList<String> result = new ArrayList<String>();\n        if (s.isEmpty()) {\n            return result;\n        }\n        for (String word : words) {\n            if (countConsonants(word) == n) {\n                result.add(word);\n            }\n        }\n        return result;",
        "grade-197": {
            "execution": 0
        },
        "157": "ArrayList<String> result = new ArrayList<String>();\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            int consonants = 0;\n            for (int i = 0; i < word.length(); i++) {\n                String letter = word.substring(i, i + 1);\n                if (!letter.matches(\"[aeiouAEIOU]\")) {\n                    consonants++;\n                }\n            }\n            if (consonants == n) {\n                result.add(word);\n            }\n        }\n        return result;",
        "grade-157": {
            "execution": 1
        },
        "22": "// your code here\n        // ...\n        // ...\n        return new ArrayList<String>();",
        "grade-22": {
            "execution": 0
        },
        "172": "ArrayList<String> res = new ArrayList<>();\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            String onlyLetters = word.replaceAll(\"[^a-zA-Z]\", \"\");\n            int noOfConsonants = onlyLetters.length() - vowelCount(onlyLetters);\n            if (noOfConsonants == n) {\n                res.add(word);\n            }\n        }\n        return res;",
        "grade-172": {
            "execution": 0
        },
        "120": "ArrayList<String> result = new ArrayList<String>();\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            int consonants = 0;\n            for (char c : word.toCharArray()) {\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                    consonants++;\n                }\n            }\n            if (consonants == n) {\n                result.add(word);\n            }\n        }\n        return result;",
        "grade-120": {
            "execution": 0
        },
        "8": "ArrayList<String> result = new ArrayList<String>();\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            int c = 0;\n            for (int i = 0; i < word.length(); i++) {\n                char ch = word.charAt(i);\n                if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u')\n                    c++;\n            }\n            if (word.length() - c == n)\n                result.add(word);\n        }\n        return result;",
        "grade-8": {
            "execution": 0
        },
        "7": "ArrayList<String>  result = new ArrayList<String>();\n        ArrayList<String>  words = new ArrayList<String>(Arrays.asList(s.split(\" \")));\n        HashSet<Character> vowels = new HashSet<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u'));\n        for (String w : words) {\n            int count = 0;\n            for (int i = 0; i < w.length(); i++) {\n                if (!vowels.contains(w.charAt(i))) {\n                    count++;\n                }\n            }\n            if (count == n) {\n                result.add(w);\n            }\n        }\n        return result;",
        "grade-7": {
            "execution": 0
        },
        "24": "var list = new ArrayList<String>();\n        var count = 0;\n        var word = new StringBuilder();\n        for (var i = 0; i < s.length(); i++) {\n            var ch = s.charAt(i);\n            if (ch != ' ') {\n                word.append(ch);\n                if (isConsonant(ch)) {\n                    count++;\n                }\n            } else {\n                if (count == n) {\n                    list.add(word.toString());\n                }\n                word = new StringBuilder();\n                count = 0;\n            }\n        }\n        if (count == n) {\n            list.add(word.toString());\n        }\n        return list;",
        "grade-24": {
            "execution": 0
        },
        "58": "String[] words = s.split(\" \");\n        ArrayList<String> res = new ArrayList<>();\n        for (String word : words) {\n            if (numConsonants(word) == n) res.add(word);\n        }\n        return res;",
        "grade-58": {
            "execution": 0
        },
        "64": "// Your code here:\n        return null;",
        "grade-64": {
            "execution": 0
        },
        "144": "// Implement this function\n        ArrayList<String> res = new ArrayList<String>();\n        String[] words = s.split(\" \");\n        for (String w : words) {\n            int vowels = 0;\n            for (int i = 0; i < w.length(); i++) {\n                if (isVowel(w.charAt(i))) vowels++;\n            }\n            if (w.length() - vowels == n) res.add(w);\n        }\n        return res;",
        "grade-144": {
            "execution": 0
        },
        "177": "ArrayList<String> words = new ArrayList<>();\n        List<Pair<Integer, Integer>> word_ranges = wordRanges(s);\n        for (Pair<Integer, Integer> range : word_ranges) {\n            int word_start = range.getValue0();\n            int word_end = range.getValue1();\n            String word = s.substring(word_start, word_end);\n            int num_consonants = numConsonants(word);\n            if (num_consonants == n) {\n                words.add(word);\n            }\n        }\n        return words;",
        "grade-177": {
            "execution": 0
        },
        "bleu-186": 0.40067963773877535,
        "bleu-30": 6.0480428439971994e-05,
        "bleu-6": 0.21292054325311252,
        "bleu-77": 0.22756925058503177,
        "bleu-68": 0.3352645532888004,
        "bleu-60": 0.17888404673873246,
        "bleu-37": 0.37566648167684735,
        "bleu-28": 0.5340860182051721,
        "bleu-197": 0.4025784490064907,
        "bleu-157": 0.45669433496242534,
        "bleu-22": 0.012321609280915247,
        "bleu-172": 0.3661531495018378,
        "bleu-120": 0.4939326793794819,
        "bleu-8": 0.31957538144060527,
        "bleu-7": 0.29065439348432526,
        "bleu-24": 0.216456266478594,
        "bleu-58": 0.2519868378496683,
        "bleu-64": 1.6344451180544574e-06,
        "bleu-144": 0.2842212628175689,
        "bleu-177": 0.28926774899023416,
        "codebleu-186": 0.6421452297063776,
        "codebleu-30": 0.049026357973081254,
        "codebleu-6": 0.5815586954084806,
        "codebleu-77": 0.5993991069662461,
        "codebleu-68": 0.6881179617931432,
        "codebleu-60": 0.6417931332801485,
        "codebleu-37": 0.6623539691535175,
        "codebleu-28": 0.6350857914973986,
        "codebleu-197": 0.5091854058384063,
        "codebleu-157": 0.6741766289800927,
        "codebleu-22": 0.06986317230197789,
        "codebleu-172": 0.5688162414547844,
        "codebleu-120": 0.6504057655085268,
        "codebleu-8": 0.635043131996768,
        "codebleu-7": 0.6555622234152556,
        "codebleu-24": 0.602977437464737,
        "codebleu-58": 0.36770930497443866,
        "codebleu-64": 0.03431813037014442,
        "codebleu-144": 0.5817060335191874,
        "codebleu-177": 0.547362517643752,
        "chrf-186": 0.5528415746110558,
        "chrf-30": 0.11596674653497162,
        "chrf-6": 0.3570788264139788,
        "chrf-77": 0.36506910986809016,
        "chrf-68": 0.43669773082145513,
        "chrf-60": 0.37554408428151975,
        "chrf-37": 0.6084923807081549,
        "chrf-28": 0.6386465043445132,
        "chrf-197": 0.5054924802936495,
        "chrf-157": 0.6111306678254044,
        "chrf-22": 0.13225819169401512,
        "chrf-172": 0.4912402097979177,
        "chrf-120": 0.6759350231107484,
        "chrf-8": 0.4750744693284539,
        "chrf-7": 0.4833667319210009,
        "chrf-24": 0.36999965361975984,
        "chrf-58": 0.41331084192393436,
        "chrf-64": 0.03853126037078503,
        "chrf-144": 0.3930840945000826,
        "chrf-177": 0.42784441493605024,
        "rougel-186": 0.5688073394495413,
        "rougel-30": 0.14035087719298248,
        "rougel-6": 0.41434262948207173,
        "rougel-77": 0.5196850393700788,
        "rougel-68": 0.5461847389558233,
        "rougel-60": 0.4057971014492754,
        "rougel-37": 0.6040816326530611,
        "rougel-28": 0.6540284360189573,
        "rougel-197": 0.5363128491620112,
        "rougel-157": 0.6486486486486487,
        "rougel-22": 0.124031007751938,
        "rougel-172": 0.5339805825242718,
        "rougel-120": 0.6578947368421053,
        "rougel-8": 0.5506072874493927,
        "rougel-7": 0.481203007518797,
        "rougel-24": 0.4426877470355731,
        "rougel-58": 0.45679012345679015,
        "rougel-64": 0.05309734513274337,
        "rougel-144": 0.5327102803738317,
        "rougel-177": 0.48571428571428565,
        "meteor-186": 0.6506753471088177,
        "meteor-30": 0.06717758985200846,
        "meteor-6": 0.40632185303518686,
        "meteor-77": 0.463405425359479,
        "meteor-68": 0.560792356868764,
        "meteor-60": 0.48957664446768623,
        "meteor-37": 0.6180509628281592,
        "meteor-28": 0.6354745925215725,
        "meteor-197": 0.5109624000716365,
        "meteor-157": 0.6906522319359052,
        "meteor-22": 0.09263498670366516,
        "meteor-172": 0.4920716899818723,
        "meteor-120": 0.6686501251443975,
        "meteor-8": 0.6196343532233807,
        "meteor-7": 0.5983814116165763,
        "meteor-24": 0.4314923211924829,
        "meteor-58": 0.397087385423653,
        "meteor-64": 0.015873015873015876,
        "meteor-144": 0.484116456475571,
        "meteor-177": 0.45695762371649806,
        "ruby-186": 0.39473684210526316,
        "ruby-30": 0.07692307692307687,
        "ruby-6": 0.25850340136054417,
        "ruby-77": 0.38,
        "ruby-68": 0.40689655172413797,
        "ruby-60": 0.2790697674418605,
        "ruby-37": 0.475177304964539,
        "ruby-28": 0.4112149532710281,
        "ruby-197": 0.3173076923076923,
        "ruby-157": 0.5169491525423728,
        "ruby-22": 0.06730769230769229,
        "ruby-172": 0.375,
        "ruby-120": 0.564516129032258,
        "ruby-8": 0.4055944055944056,
        "ruby-7": 0.33333333333333337,
        "ruby-24": 0.31543624161073824,
        "ruby-58": 0.28846153846153844,
        "ruby-64": 0.028846153846153855,
        "ruby-144": 0.3363636363636363,
        "ruby-177": 0.34905660377358494,
        "codebertscore_f1-186": 0.84074866771698,
        "codebertscore_f3-186": 0.8379736542701721,
        "codebertscore_f1-30": 0.6452951431274414,
        "codebertscore_f3-30": 0.5664722919464111,
        "codebertscore_f1-6": 0.7642250061035156,
        "codebertscore_f3-6": 0.7721131443977356,
        "codebertscore_f1-77": 0.7899078726768494,
        "codebertscore_f3-77": 0.7908006310462952,
        "codebertscore_f1-68": 0.7526032328605652,
        "codebertscore_f3-68": 0.7686856389045715,
        "codebertscore_f1-60": 0.7636409997940063,
        "codebertscore_f3-60": 0.7679061889648438,
        "codebertscore_f1-37": 0.8432967066764832,
        "codebertscore_f3-37": 0.8368924856185913,
        "codebertscore_f1-28": 0.8728029727935791,
        "codebertscore_f3-28": 0.8643729090690613,
        "codebertscore_f1-197": 0.8071755766868591,
        "codebertscore_f3-197": 0.7787534594535828,
        "codebertscore_f1-157": 0.849707305431366,
        "codebertscore_f3-157": 0.8422667980194092,
        "codebertscore_f1-22": 0.6250948905944824,
        "codebertscore_f3-22": 0.5939422249794006,
        "codebertscore_f1-172": 0.8019791841506958,
        "codebertscore_f3-172": 0.8050461411476135,
        "codebertscore_f1-120": 0.8748763799667358,
        "codebertscore_f3-120": 0.8678024411201477,
        "codebertscore_f1-8": 0.8241877555847168,
        "codebertscore_f3-8": 0.8155156373977661,
        "codebertscore_f1-7": 0.7848748564720154,
        "codebertscore_f3-7": 0.7866371273994446,
        "codebertscore_f1-24": 0.7824680209159851,
        "codebertscore_f3-24": 0.7822265625,
        "codebertscore_f1-58": 0.8005079627037048,
        "codebertscore_f3-58": 0.7632279396057129,
        "codebertscore_f1-64": 0.534466564655304,
        "codebertscore_f3-64": 0.5094050168991089,
        "codebertscore_f1-144": 0.7927388548851013,
        "codebertscore_f3-144": 0.7864891290664673,
        "codebertscore_f1-177": 0.7803763747215271,
        "codebertscore_f3-177": 0.7857993841171265,
        "codebertscore_s_f1-186": 0.8456738591194153,
        "codebertscore_s_f3-186": 0.84466153383255,
        "codebertscore_s_f1-30": 0.7347986102104187,
        "codebertscore_s_f3-30": 0.6466969847679138,
        "codebertscore_s_f1-6": 0.7803540229797363,
        "codebertscore_s_f3-6": 0.7851951718330383,
        "codebertscore_s_f1-77": 0.7995194792747498,
        "codebertscore_s_f3-77": 0.7996427416801453,
        "codebertscore_s_f1-68": 0.75823974609375,
        "codebertscore_s_f3-68": 0.776633620262146,
        "codebertscore_s_f1-60": 0.7804070115089417,
        "codebertscore_s_f3-60": 0.7831611037254333,
        "codebertscore_s_f1-37": 0.853029727935791,
        "codebertscore_s_f3-37": 0.8513230085372925,
        "codebertscore_s_f1-28": 0.8770385980606079,
        "codebertscore_s_f3-28": 0.8692771792411804,
        "codebertscore_s_f1-197": 0.8311459422111511,
        "codebertscore_s_f3-197": 0.8000771403312683,
        "codebertscore_s_f1-157": 0.8611528873443604,
        "codebertscore_s_f3-157": 0.8574149012565613,
        "codebertscore_s_f1-22": 0.6764414310455322,
        "codebertscore_s_f3-22": 0.64600670337677,
        "codebertscore_s_f1-172": 0.8095365762710571,
        "codebertscore_s_f3-172": 0.8149284720420837,
        "codebertscore_s_f1-120": 0.8833823204040527,
        "codebertscore_s_f3-120": 0.8757421374320984,
        "codebertscore_s_f1-8": 0.8316327929496765,
        "codebertscore_s_f3-8": 0.824100911617279,
        "codebertscore_s_f1-7": 0.7983392477035522,
        "codebertscore_s_f3-7": 0.7979112863540649,
        "codebertscore_s_f1-24": 0.7957831025123596,
        "codebertscore_s_f3-24": 0.7957759499549866,
        "codebertscore_s_f1-58": 0.8297238945960999,
        "codebertscore_s_f3-58": 0.784379780292511,
        "codebertscore_s_f1-64": 0.5739239454269409,
        "codebertscore_s_f3-64": 0.5537979602813721,
        "codebertscore_s_f1-144": 0.8062395453453064,
        "codebertscore_s_f3-144": 0.8022443056106567,
        "codebertscore_s_f1-177": 0.7922369837760925,
        "codebertscore_s_f3-177": 0.7979016304016113,
        "gpt35_nsnr-186": 4,
        "raw_gpt35_nsnr-186": "4",
        "gpt35_nsnr-30": 4,
        "raw_gpt35_nsnr-30": "4",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-77": 3,
        "raw_gpt35_nsnr-77": "3",
        "gpt35_nsnr-68": 4,
        "raw_gpt35_nsnr-68": "4",
        "gpt35_nsnr-60": 3,
        "raw_gpt35_nsnr-60": "3",
        "gpt35_nsnr-37": 4,
        "raw_gpt35_nsnr-37": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-197": 4,
        "raw_gpt35_nsnr-197": "4",
        "gpt35_nsnr-157": 4,
        "raw_gpt35_nsnr-157": "4",
        "gpt35_nsnr-22": 2,
        "raw_gpt35_nsnr-22": "2",
        "gpt35_nsnr-172": 4,
        "raw_gpt35_nsnr-172": "4",
        "gpt35_nsnr-120": 4,
        "raw_gpt35_nsnr-120": "4",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-24": 3,
        "raw_gpt35_nsnr-24": "3",
        "gpt35_nsnr-58": 3,
        "raw_gpt35_nsnr-58": "3",
        "gpt35_nsnr-64": 0,
        "raw_gpt35_nsnr-64": "0",
        "gpt35_nsnr-144": 4,
        "raw_gpt35_nsnr-144": "4",
        "gpt35_nsnr-177": 4,
        "raw_gpt35_nsnr-177": "4",
        "gpt35_nswr-186": 4,
        "raw_gpt35_nswr-186": "4",
        "gpt35_nswr-30": 0,
        "raw_gpt35_nswr-30": "0",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-77": 3,
        "raw_gpt35_nswr-77": "3",
        "gpt35_nswr-68": 3,
        "raw_gpt35_nswr-68": "3",
        "gpt35_nswr-60": 3,
        "raw_gpt35_nswr-60": "3",
        "gpt35_nswr-37": 4,
        "raw_gpt35_nswr-37": "4",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-197": 4,
        "raw_gpt35_nswr-197": "4",
        "gpt35_nswr-157": 4,
        "raw_gpt35_nswr-157": "4",
        "gpt35_nswr-22": 2,
        "raw_gpt35_nswr-22": "2",
        "gpt35_nswr-172": 3,
        "raw_gpt35_nswr-172": "3",
        "gpt35_nswr-120": 4,
        "raw_gpt35_nswr-120": "4",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-24": 3,
        "raw_gpt35_nswr-24": "3",
        "gpt35_nswr-58": 3,
        "raw_gpt35_nswr-58": "3",
        "gpt35_nswr-64": 2,
        "raw_gpt35_nswr-64": "2",
        "gpt35_nswr-144": 3,
        "raw_gpt35_nswr-144": "3",
        "gpt35_nswr-177": 3,
        "raw_gpt35_nswr-177": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\" the output should be 2.\n    public static int hexKey(String num) {\n",
        "snippet": [
            "        String primes = \"2357BD\";\n        int total = 0;\n        for (char c : num.toCharArray()) {\n            if (primes.indexOf(c) != -1) {\n                total += 1;\n            }\n        }\n        return total;\n    }\n}"
        ],
        "simplified": "You have been tasked to write a function that receives a hexadecimal number as a string and counts the number of hexadecimal digits that are primes (prime number, or a prime, is a natural number greater than 1 that is not a product of two smaller natural numbers). Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Prime numbers are 2, 3, 5, 7, 11, 13, 17,... So you have to determine a number of the following digits: 2, 3, 5, 7, B (=decimal 11), D (=decimal 13). Note: you may assume the input is always correct or empty string, and symbols A,B,C,D,E,F are always uppercase.",
        "task_id": "78",
        "170": "int result = 0;\n        char[] hexArray = \"0123456789ABCDEF\".toCharArray();\n        Map<Character, Integer> map = new HashMap<Character, Integer>();\n        for (int i = 0; i < hexArray.length; i++) {\n            map.put(hexArray[i], i);\n        }\n        char[] nums = num.toCharArray();\n        for (int i = 0; i < nums.length; i++) {\n            int n = map.get(nums[i]);\n            if (n == 1 || n == 2 || n == 3 || n == 5 || n == 7 || n == 11 || n == 13) {\n                result++;\n            }\n        }\n        return result;",
        "grade-170": {
            "execution": 0
        },
        "28": "int result = 0;\n        for (int i = 0; i < num.length(); i++) {\n            char ch = num.charAt(i);\n            int x = Character.digit(ch, 16);\n            if (x == 2 || x == 3 || x == 5 || x == 7 || x == 11 || x == 13) {\n                result++;\n            }\n        }\n        return result;",
        "grade-28": {
            "execution": 1
        },
        "6": "HashSet<String> nums = new HashSet<>();\n        nums.add(\"A\");\n        nums.add(\"B\");\n        nums.add(\"D\");\n        nums.add(\"E\");\n        nums.add(\"F\");\n        nums.add(\"3\");\n        nums.add(\"5\");\n        nums.add(\"7\");\n        nums.add(\"2\");\n        return num.chars().filter(x -> nums.contains(String.valueOf((char)x))).toArray().length;",
        "grade-6": {
            "execution": 0
        },
        "196": "int n = 0;\n        for (char c : num.toCharArray()) {\n            if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n                n++;\n            }\n        }\n        return n;",
        "grade-196": {
            "execution": 1
        },
        "73": "// Your code here...\n        return -1;",
        "grade-73": {
            "execution": 0
        },
        "65": "if (num.length() == 0) return 0;\n        String regex = \"[0-9A-F]*\";\n        if (!num.matches(regex)) {\n            throw new IllegalArgumentException(\"Invalid hex number\");\n        }\n        int result = 0;\n        for (int i = 0; i < num.length(); i++) {\n            char c = num.charAt(i);\n            if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n                result++;\n            }\n        }\n        return result;",
        "grade-65": {
            "execution": 1
        },
        "60": "char[] hex = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};\n        char[] prime = {'2', '3', '5', '7', 'B', 'D'};\n        //String hex = \"0123456789ABCDEF\";\n        //String prime = \"2357BD\";\n        int count = 0;\n        char[] newNum = num.toCharArray();\n        for (int i = 0; i < num.length(); i++) {\n            if (new String(prime).contains(new String(newNum[i] + \"\"))) {\n                count++;\n            }\n        }\n        return count;",
        "grade-60": {
            "execution": 1
        },
        "35": "char[] primes = {'2', '3', '5', '7', 'B', 'D'};\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            for (int j = 0; j < primes.length; j++) {\n                if (num.charAt(i) == primes[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;",
        "grade-35": {
            "execution": 1
        },
        "195": "// Set of \"prime\" hex values\n        HashSet<String> keys = new HashSet<String>();\n        keys.add(\"2\");\n        keys.add(\"3\");\n        keys.add(\"5\");\n        keys.add(\"7\");\n        keys.add(\"B\");\n        keys.add(\"D\");\n        keys.add(\"F\");\n        int result = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (keys.contains(String.valueOf(num.charAt(i)))) {\n                result++;\n            }\n        }\n        return result;",
        "grade-195": {
            "execution": 0
        },
        "26": "if (num.isEmpty()) return 0;\n        int cnt = 0;\n        for (int i = 0; i < num.length(); i++) {\n            switch (num.charAt(i)) {\n                case '2':\n                case '3':\n                case '5':\n                case '7':\n                case 'B':\n                case 'D':\n                    cnt++;\n            }\n        }\n        return cnt;",
        "grade-26": {
            "execution": 1
        },
        "180": "Set<Character> hexKey = \n        new HashSet<Character>(Arrays.asList('2','3','5','7','B','D'));\n        int count = 0;\n        for (char c : num.toCharArray()) {\n            if (hexKey.contains(c)) count++;\n        }\n        return count;",
        "grade-180": {
            "execution": 1
        },
        "144": "int primes = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (isPrime(Integer.parseInt(num.substring(i, i + 1), 16))) {\n                primes++;\n            }\n        }\n        return primes;",
        "grade-144": {
            "execution": 0
        },
        "22": "// [2-B] [2-7] [A-D]\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            char c = num.charAt(i);\n            if (c == '2' || c == '3' || c == '5' || c == '7'\n                || c == 'B' || c == 'D') {\n                count++;\n            }\n        }\n        return count;",
        "grade-22": {
            "execution": 1
        },
        "157": "Map<Character, Integer> hm = new HashMap<>();\n        //         hm.put('0', 0);\n        //         hm.put('1', 1);\n        //         hm.put('2', 2);\n        //         hm.put('3', 3);\n        //         hm.put('4', 4);\n        //         hm.put('5', 5);\n        //         hm.put('6', 6);\n        //         hm.put('7', 7);\n        //         hm.put('8', 8);\n        //         hm.put('9', 9);\n        //         hm.put('A', 10);\n        //         hm.put('B', 11);\n        //         hm.put('C', 12);\n        //         hm.put('D', 13);\n        //         hm.put('E', 14);\n        //         hm.put('F', 15);\n        hm.put('0', 2);\n        hm.put('1', 3);\n        hm.put('2', 5);\n        hm.put('3', 7);\n        hm.put('4', 11);\n        hm.put('5', 13);\n        hm.put('6', 17);\n        hm.put('7', 19);\n        hm.put('8', 23);\n        hm.put('9', 29);\n        hm.put('A', 31);\n        hm.put('B', 37);\n        hm.put('C', 41);\n        hm.put('D', 43);\n        hm.put('E', 47);\n        hm.put('F', 53);\n        String[] numbers = num.split(\"\");\n        int count = 0;\n        for (String n : numbers) {\n            if (hm.get(n.charAt(0)) != null) {\n                count++;\n            }\n        }\n        return count;",
        "grade-157": {
            "execution": 0
        },
        "112": "int count = 0;\n        Set<Character> set = new HashSet<Character>();\n        set.add('2'); set.add('3'); set.add('5'); set.add('7');\n        set.add('B'); set.add('D');\n        //\n        for (char c : num.toCharArray()) {\n            if (set.contains(c)) {\n                count++;\n            }\n        }\n        return count;",
        "grade-112": {
            "execution": 1
        },
        "8": "// #1\n        // HashSet<Character> hs = new HashSet<Character>();\n        // hs.add('2');\n        // hs.add('3');\n        // hs.add('5');\n        // hs.add('7');\n        // hs.add('B');\n        // hs.add('D');\n        // int counter = 0;\n        // for (char letter : num.toCharArray()) {\n        //     if (hs.contains(letter)) counter++;\n        // }\n        // return counter;\n        // #2\n        char[] arr = new char[] {'2', '3', '5', '7', 'B', 'D'};\n        Set<Character> hs = new HashSet<Character>(Arrays.asList(arr));\n        int counter = 0;\n        for (char letter : num.toCharArray()) {\n            if (hs.contains(letter)) counter++;\n        }\n        return counter;",
        "grade-8": {
            "execution": 0
        },
        "7": "HashSet<Character> hexKeys = new HashSet<>();\n        hexKeys.add('2');\n        hexKeys.add('3');\n        hexKeys.add('5');\n        hexKeys.add('7');\n        hexKeys.add('B');\n        hexKeys.add('D');\n        char[] charArray = num.toCharArray();\n        int count = 0;\n        for (char c : charArray) {\n            if (hexKeys.contains(c)) {\n                count++;\n            }\n        }\n        return count;",
        "grade-7": {
            "execution": 1
        },
        "23": "int count = 0;\n        Set<Character> hexPrimes = new HashSet<>(Arrays.asList('2', '3', '5', '7', 'B', 'D'));\n        for (int i = 0; i < num.length(); i++) {\n            if (hexPrimes.contains(num.charAt(i))) {\n                count++;\n            }\n        }\n        return count;",
        "grade-23": {
            "execution": 1
        },
        "58": "// Your code here\n        Set<Character> hexPrimes = new HashSet<Character>();\n        hexPrimes.add('2');\n        hexPrimes.add('3');\n        hexPrimes.add('5');\n        hexPrimes.add('7');\n        hexPrimes.add('B');\n        hexPrimes.add('D');\n        return num.chars().mapToObj(c -> (char) c).filter(c -> hexPrimes.contains(c)).toArray().length;",
        "grade-58": {
            "execution": 1
        },
        "62": "int result = 0;\n        final String[] match = new String[]{\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"};\n        for (String s : match) {\n            result += StringUtils.countMatches(num, s);\n        }\n        return result;",
        "grade-62": {
            "execution": 0
        },
        "bleu-170": 0.07915012680647684,
        "bleu-28": 0.09354237835233337,
        "bleu-6": 0.023437292542508915,
        "bleu-196": 0.2962157348888249,
        "bleu-73": 0.0034791986389791875,
        "bleu-65": 0.07190468278140429,
        "bleu-60": 0.09962680512088996,
        "bleu-35": 0.10701558211822836,
        "bleu-195": 0.08001003834822351,
        "bleu-26": 0.11428738009957451,
        "bleu-180": 0.2706423917673731,
        "bleu-144": 0.19033614810672705,
        "bleu-22": 0.08525553704665728,
        "bleu-157": 0.02670169273209274,
        "bleu-112": 0.1988258030818976,
        "bleu-8": 0.08236698747212903,
        "bleu-7": 0.1647956120345524,
        "bleu-23": 0.09443302082793231,
        "bleu-58": 0.031209667858098797,
        "bleu-62": 0.05798795811242047,
        "codebleu-170": 0.5603090972953987,
        "codebleu-28": 0.5186512118018967,
        "codebleu-6": 0.3968739023533544,
        "codebleu-196": 0.5272174831279391,
        "codebleu-73": 0.08313744005326848,
        "codebleu-65": 0.558868984896382,
        "codebleu-60": 0.5446083596768528,
        "codebleu-35": 0.5928345626975763,
        "codebleu-195": 0.5343519494204425,
        "codebleu-26": 0.5591851071303126,
        "codebleu-180": 0.579720606212997,
        "codebleu-144": 0.5003863716192484,
        "codebleu-22": 0.5603090972953987,
        "codebleu-157": 0.5486125746399718,
        "codebleu-112": 0.5951931510625403,
        "codebleu-8": 0.6112500571515129,
        "codebleu-7": 0.5637511207428055,
        "codebleu-23": 0.53178784685634,
        "codebleu-58": 0.4085704250087811,
        "codebleu-62": 0.4422198805760449,
        "chrf-170": 0.2694980079599582,
        "chrf-28": 0.26097916628426293,
        "chrf-6": 0.20925595602832422,
        "chrf-196": 0.39815175584886053,
        "chrf-73": 0.07221804507939451,
        "chrf-65": 0.2558089368581488,
        "chrf-60": 0.37788956047507755,
        "chrf-35": 0.304396413816019,
        "chrf-195": 0.2612403745234865,
        "chrf-26": 0.24048494776126042,
        "chrf-180": 0.3876731501467606,
        "chrf-144": 0.28672414283805336,
        "chrf-22": 0.228469980939144,
        "chrf-157": 0.16769121730720576,
        "chrf-112": 0.35706758751371,
        "chrf-8": 0.2632247487190876,
        "chrf-7": 0.3210351231232888,
        "chrf-23": 0.29867382598198045,
        "chrf-58": 0.22841819008190023,
        "chrf-62": 0.22227823345543432,
        "rougel-170": 0.28699551569506726,
        "rougel-28": 0.3378378378378378,
        "rougel-6": 0.2054054054054054,
        "rougel-196": 0.4580152671755725,
        "rougel-73": 0.15384615384615385,
        "rougel-65": 0.2885572139303483,
        "rougel-60": 0.26829268292682923,
        "rougel-35": 0.4025974025974026,
        "rougel-195": 0.3147208121827411,
        "rougel-26": 0.3571428571428571,
        "rougel-180": 0.5037037037037037,
        "rougel-144": 0.46017699115044247,
        "rougel-22": 0.30303030303030304,
        "rougel-157": 0.11439842209072977,
        "rougel-112": 0.4074074074074074,
        "rougel-8": 0.23943661971830987,
        "rougel-7": 0.33898305084745767,
        "rougel-23": 0.36486486486486486,
        "rougel-58": 0.2057142857142857,
        "rougel-62": 0.2833333333333333,
        "meteor-170": 0.39499907949325036,
        "meteor-28": 0.38115580470952376,
        "meteor-6": 0.284037104939971,
        "meteor-196": 0.4756382680258113,
        "meteor-73": 0.06134969325153374,
        "meteor-65": 0.44228117913832204,
        "meteor-60": 0.4452016775626003,
        "meteor-35": 0.47035277737966047,
        "meteor-195": 0.40105723308993463,
        "meteor-26": 0.4064012139447342,
        "meteor-180": 0.5765362021900204,
        "meteor-144": 0.36459150830237746,
        "meteor-22": 0.43389542348409665,
        "meteor-157": 0.3148156786118437,
        "meteor-112": 0.620651044646844,
        "meteor-8": 0.4964046488335905,
        "meteor-7": 0.5843126039933445,
        "meteor-23": 0.3869828088578089,
        "meteor-58": 0.2830072319630879,
        "meteor-62": 0.31251359641489734,
        "ruby-170": 0.16470588235294115,
        "ruby-28": 0.19999999999999996,
        "ruby-6": 0.12121212121212122,
        "ruby-196": 0.2564102564102564,
        "ruby-73": 0.09433962264150941,
        "ruby-65": 0.16891891891891897,
        "ruby-60": 0.14507772020725385,
        "ruby-35": 0.26732673267326734,
        "ruby-195": 0.17361111111111116,
        "ruby-26": 0.2068965517241379,
        "ruby-180": 0.29268292682926833,
        "ruby-144": 0.2833333333333333,
        "ruby-22": 0.1785714285714286,
        "ruby-157": 0.0506607929515418,
        "ruby-112": 0.22935779816513757,
        "ruby-8": 0.1341991341991342,
        "ruby-7": 0.17741935483870963,
        "ruby-23": 0.18947368421052635,
        "ruby-58": 0.1311475409836066,
        "ruby-62": 0.11940298507462688,
        "codebertscore_f1-170": 0.7466708421707153,
        "codebertscore_f3-170": 0.7735655903816223,
        "codebertscore_f1-28": 0.7585291862487793,
        "codebertscore_f3-28": 0.7615803480148315,
        "codebertscore_f1-6": 0.6873514652252197,
        "codebertscore_f3-6": 0.694897472858429,
        "codebertscore_f1-196": 0.8013119101524353,
        "codebertscore_f3-196": 0.7974618673324585,
        "codebertscore_f1-73": 0.5936213135719299,
        "codebertscore_f3-73": 0.5835376381874084,
        "codebertscore_f1-65": 0.7200172543525696,
        "codebertscore_f3-65": 0.7375469207763672,
        "codebertscore_f1-60": 0.7449228763580322,
        "codebertscore_f3-60": 0.7797244787216187,
        "codebertscore_f1-35": 0.7860119938850403,
        "codebertscore_f3-35": 0.7882192730903625,
        "codebertscore_f1-195": 0.7182581424713135,
        "codebertscore_f3-195": 0.7324027419090271,
        "codebertscore_f1-26": 0.7242361903190613,
        "codebertscore_f3-26": 0.7256884574890137,
        "codebertscore_f1-180": 0.8094155192375183,
        "codebertscore_f3-180": 0.8244995474815369,
        "codebertscore_f1-144": 0.771016001701355,
        "codebertscore_f3-144": 0.7682915329933167,
        "codebertscore_f1-22": 0.7469000816345215,
        "codebertscore_f3-22": 0.7554848194122314,
        "codebertscore_f1-157": 0.6350305676460266,
        "codebertscore_f3-157": 0.6966437101364136,
        "codebertscore_f1-112": 0.768145740032196,
        "codebertscore_f3-112": 0.7823359966278076,
        "codebertscore_f1-8": 0.7065279483795166,
        "codebertscore_f3-8": 0.7427511215209961,
        "codebertscore_f1-7": 0.7538090348243713,
        "codebertscore_f3-7": 0.7747563719749451,
        "codebertscore_f1-23": 0.7769654393196106,
        "codebertscore_f3-23": 0.7924991846084595,
        "codebertscore_f1-58": 0.7130293846130371,
        "codebertscore_f3-58": 0.7226368188858032,
        "codebertscore_f1-62": 0.7536308765411377,
        "codebertscore_f3-62": 0.7559083104133606,
        "codebertscore_s_f1-170": 0.7531562447547913,
        "codebertscore_s_f3-170": 0.776531994342804,
        "codebertscore_s_f1-28": 0.7654640674591064,
        "codebertscore_s_f3-28": 0.7670760750770569,
        "codebertscore_s_f1-6": 0.7161151766777039,
        "codebertscore_s_f3-6": 0.7205148339271545,
        "codebertscore_s_f1-196": 0.8084997534751892,
        "codebertscore_s_f3-196": 0.8021277785301208,
        "codebertscore_s_f1-73": 0.6218140721321106,
        "codebertscore_s_f3-73": 0.613690197467804,
        "codebertscore_s_f1-65": 0.7356401085853577,
        "codebertscore_s_f3-65": 0.7502179741859436,
        "codebertscore_s_f1-60": 0.7610462307929993,
        "codebertscore_s_f3-60": 0.7932596206665039,
        "codebertscore_s_f1-35": 0.7924955487251282,
        "codebertscore_s_f3-35": 0.7947575449943542,
        "codebertscore_s_f1-195": 0.7283392548561096,
        "codebertscore_s_f3-195": 0.7415154576301575,
        "codebertscore_s_f1-26": 0.743531346321106,
        "codebertscore_s_f3-26": 0.7417481541633606,
        "codebertscore_s_f1-180": 0.8103734850883484,
        "codebertscore_s_f3-180": 0.8213480114936829,
        "codebertscore_s_f1-144": 0.7854614853858948,
        "codebertscore_s_f3-144": 0.7798347473144531,
        "codebertscore_s_f1-22": 0.7628072500228882,
        "codebertscore_s_f3-22": 0.772138774394989,
        "codebertscore_s_f1-157": 0.6637872457504272,
        "codebertscore_s_f3-157": 0.6961536407470703,
        "codebertscore_s_f1-112": 0.776368260383606,
        "codebertscore_s_f3-112": 0.7870914936065674,
        "codebertscore_s_f1-8": 0.7555815577507019,
        "codebertscore_s_f3-8": 0.7834078073501587,
        "codebertscore_s_f1-7": 0.7607859373092651,
        "codebertscore_s_f3-7": 0.7787731289863586,
        "codebertscore_s_f1-23": 0.7879406213760376,
        "codebertscore_s_f3-23": 0.8007540106773376,
        "codebertscore_s_f1-58": 0.730288028717041,
        "codebertscore_s_f3-58": 0.7392472624778748,
        "codebertscore_s_f1-62": 0.7638134956359863,
        "codebertscore_s_f3-62": 0.7639590501785278,
        "gpt35_nsnr-170": 3,
        "raw_gpt35_nsnr-170": "3",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-196": 4,
        "raw_gpt35_nsnr-196": "4",
        "gpt35_nsnr-73": 4,
        "raw_gpt35_nsnr-73": "4",
        "gpt35_nsnr-65": 4,
        "raw_gpt35_nsnr-65": "4",
        "gpt35_nsnr-60": 4,
        "raw_gpt35_nsnr-60": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-195": 4,
        "raw_gpt35_nsnr-195": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-180": 4,
        "raw_gpt35_nsnr-180": "4",
        "gpt35_nsnr-144": 3,
        "raw_gpt35_nsnr-144": "3",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-157": 4,
        "raw_gpt35_nsnr-157": "4",
        "gpt35_nsnr-112": 4,
        "raw_gpt35_nsnr-112": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-58": 4,
        "raw_gpt35_nsnr-58": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nswr-170": 3,
        "raw_gpt35_nswr-170": "3",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-196": 4,
        "raw_gpt35_nswr-196": "4",
        "gpt35_nswr-73": 2,
        "raw_gpt35_nswr-73": "2",
        "gpt35_nswr-65": 4,
        "raw_gpt35_nswr-65": "4",
        "gpt35_nswr-60": 3,
        "raw_gpt35_nswr-60": "3",
        "gpt35_nswr-35": 4,
        "raw_gpt35_nswr-35": "4",
        "gpt35_nswr-195": 3,
        "raw_gpt35_nswr-195": "3",
        "gpt35_nswr-26": 4,
        "raw_gpt35_nswr-26": "4",
        "gpt35_nswr-180": 4,
        "raw_gpt35_nswr-180": "4",
        "gpt35_nswr-144": 2,
        "raw_gpt35_nswr-144": "2",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-157": 2,
        "raw_gpt35_nswr-157": "2",
        "gpt35_nswr-112": 4,
        "raw_gpt35_nswr-112": "4",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-58": 4,
        "raw_gpt35_nswr-58": "4",
        "gpt35_nswr-62": 3,
        "raw_gpt35_nswr-62": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given a string s.\n    // Your task is to check if the string is happy or not.\n    // A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    // For example:\n    // is_happy(a) => False\n    // is_happy(aa) => False\n    // is_happy(abcd) => True\n    // is_happy(aabb) => False\n    // is_happy(adb) => True\n    // is_happy(xyy) => False\n    public static boolean isHappy(String s) {\n",
        "snippet": [
            "        if (s.length() < 3) {\n            return false;\n        }\n\n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2) || s.charAt(i) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"
        ],
        "simplified": "You are given a string s. Your task is to check if the string is happy or not. A string is happy if its length is at least 3 and every 3 consecutive letters are distinct",
        "task_id": "80",
        "31": "boolean isHappy = true;\n        for (int i = 0; i < s.length() - 2; i++) {\n            isHappy = isHappy && (s.charAt(i) != s.charAt(i + 1) && s.charAt(i) != s.charAt(i + 2) && s.charAt(i + 1) != s.charAt(i + 2));\n        }\n        return isHappy;",
        "grade-31": {
            "execution": 0
        },
        "6": "boolean result = true;\n        if (s.length() >= 3) {\n            result = IntStream.range(0, s.length() - 2).allMatch(i -> s.charAt(i) != s.charAt(i + 1) && s.charAt(i) != s.charAt(i + 2) && s.charAt(i + 1) != s.charAt(i + 2));\n        } else {\n            result = false;\n        }\n        return result;",
        "grade-6": {
            "execution": 1
        },
        "91": "// Write your code here.\n        for (int i = 2; i < s.length(); i++) {\n            if (s.charAt(i) == s.charAt(i - 1) && s.charAt(i) == s.charAt(i - 2)) {\n                return false;\n            }\n        }\n        return true;",
        "grade-91": {
            "execution": 0
        },
        "78": "// throw new UnsupportedOperationException(\"Not implemented yet\");\n        if (s.length() < 3) {\n            return false;\n        }\n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) && s.charAt(i) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        return true;",
        "grade-78": {
            "execution": 0
        },
        "70": "boolean result = true;\n        // Your code here\n        return result;",
        "grade-70": {
            "execution": 0
        },
        "42": "// Write your code here.\n        int n = s.length();\n        if (n < 3) {\n            return false;\n        }\n        for (int i = 0; i < n - 2; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        return true;",
        "grade-42": {
            "execution": 1
        },
        "29": "if (s.length() < 3) return false;\n        for (int i = 0; i < s.length() - 2; i++) {\n            char a = s.charAt(i);\n            char b = s.charAt(i + 1);\n            char c = s.charAt(i + 2);\n            if (a == b || b == c || a == c) {\n                return false;\n            }\n        }\n        return true;",
        "grade-29": {
            "execution": 1
        },
        "198": "if (s.length() < 3) {\n            return false;\n        }\n        int i = 0;\n        while (i < s.length() - 2) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n            }\n            i++;\n        }\n        return true;",
        "grade-198": {
            "execution": 1
        },
        "24": "// Write your code here\n        boolean b = true;\n        if(s.length() < 3) {\n            b = false;\n        }\n        else{\n            for(int i = 0; i < s.length() - 2; i++) {\n                if(s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)){\n                    b = false;\n                    break;\n                }\n            }\n        }\n        return b;",
        "grade-24": {
            "execution": 1
        },
        "149": "// Write your code here\n        int len = s.length();\n        for (int i = 0; i <= len - 3; i++){\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)){\n                return false;\n            }\n        }\n        return true;",
        "grade-149": {
            "execution": 0
        },
        "8": "if (s.length() >= 3) {\n            for (int i = 0; i < s.length() - 2; i++) {\n                if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;",
        "grade-8": {
            "execution": 1
        },
        "7": "if (s.length() < 3) {\n            return false;\n        }\n        for (int i = 2; i < s.length(); i++) {\n            if (s.charAt(i - 2) == s.charAt(i - 1) || s.charAt(i - 2) == s.charAt(i) || s.charAt(i - 1) == s.charAt(i)) {\n                return false;\n            }\n        }\n        return true;",
        "grade-7": {
            "execution": 1
        },
        "26": "if (s.length() < 3) return false;\n        else {\n            for (int i = 0; i < s.length() - 2; i++) {\n                char a = s.charAt(i);\n                char b = s.charAt(i + 1);\n                char c = s.charAt(i + 2);\n                if (a == b || b == c || a == c) return false;\n            }\n            return true;\n        }",
        "grade-26": {
            "execution": 1
        },
        "68": "// TODO: Implement this method\n        return false;",
        "grade-68": {
            "execution": 0
        },
        "73": "int cnt = 0;\n        char c[] = s.toCharArray();\n        for (int i = 0; i < c.length; i++) {\n            if (i == 0) {\n                if (c[i] == c[i + 1] || c[i] == c[i + 2]) {\n                    return false;\n                }\n            } else if (i == c.length - 1) {\n                if (c[i] == c[i - 1] || c[i] == c[i - 2]) {\n                    return false;\n                }\n            } else {\n                if (c[i] == c[i - 1] || c[i] == c[i - 2] || c[i] == c[i + 1] || c[i] == c[i + 2]) {\n                    return false;\n                }\n            }\n        }\n        return true;",
        "grade-73": {
            "execution": 0
        },
        "183": "// Implement me!\n        return false;",
        "grade-183": {
            "execution": 0
        },
        "62": "for (int i = 0; i <= s.length() - 3; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        return true;",
        "grade-62": {
            "execution": 0
        },
        "148": "for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) && s.charAt(i) == s.charAt(i + 2))\n                return false;\n        }\n        return true;",
        "grade-148": {
            "execution": 0
        },
        "69": "// 1. Check length\n        if (s.length() < 3) return false;\n        // 2. Check individual letters\n        boolean flag = true;\n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                flag = false;\n                break;\n            }\n        }\n        return flag;",
        "grade-69": {
            "execution": 1
        },
        "161": "if (s.length() < 3) {\n            return false;\n        }\n        for (int i = 0; i < s.length() - 2; i++) {\n            char a = s.charAt(i);\n            char b = s.charAt(i + 1);\n            char c = s.charAt(i + 2);\n            if (a == b || b == c || a == c) {\n                return false;\n            }\n        }\n        return true;",
        "grade-161": {
            "execution": 1
        },
        "bleu-31": 0.6235859014934275,
        "bleu-6": 0.5469024425985559,
        "bleu-91": 0.48775610784164575,
        "bleu-78": 0.7511351357836921,
        "bleu-70": 4.134551779796247e-05,
        "bleu-42": 0.8519698667234189,
        "bleu-29": 0.5987162562578336,
        "bleu-198": 0.8901951700048982,
        "bleu-24": 0.7911647155841572,
        "bleu-149": 0.8046286978430406,
        "bleu-8": 0.9307376263816792,
        "bleu-7": 0.8177262467053984,
        "bleu-26": 0.5756936549270912,
        "bleu-68": 6.4165031579619065e-06,
        "bleu-73": 0.20668434486142329,
        "bleu-183": 5.265159581620436e-07,
        "bleu-62": 0.8014332064203367,
        "bleu-148": 0.5089223761325838,
        "bleu-69": 0.775397679506532,
        "bleu-161": 0.6492172887031914,
        "codebleu-31": 0.6120327589149941,
        "codebleu-6": 0.6375902325291992,
        "codebleu-91": 0.4492031929451763,
        "codebleu-78": 0.6761775813314382,
        "codebleu-70": 0.05199214442260906,
        "codebleu-42": 0.7914923348613936,
        "codebleu-29": 0.6537497449211329,
        "codebleu-198": 0.8049878374887027,
        "codebleu-24": 0.8040571986668926,
        "codebleu-149": 0.7053815599848996,
        "codebleu-8": 0.81517592507534,
        "codebleu-7": 0.724299150692986,
        "codebleu-26": 0.6416128097090164,
        "codebleu-68": 0.03463663402771435,
        "codebleu-73": 0.5847689390648437,
        "codebleu-183": 0.025974999800030357,
        "codebleu-62": 0.675713942845733,
        "codebleu-148": 0.4571361618513159,
        "codebleu-69": 0.7943550477785556,
        "codebleu-161": 0.6886326007482854,
        "chrf-31": 0.5940173580963531,
        "chrf-6": 0.5737757855451634,
        "chrf-91": 0.5856433492067484,
        "chrf-78": 0.7762214138429235,
        "chrf-70": 0.07338654666630388,
        "chrf-42": 0.8794407434084746,
        "chrf-29": 0.6774267685782648,
        "chrf-198": 0.8944409949778235,
        "chrf-24": 0.8322450842980725,
        "chrf-149": 0.7979531798878011,
        "chrf-8": 0.9435174944526105,
        "chrf-7": 0.8435156708395969,
        "chrf-26": 0.6558046070281052,
        "chrf-68": 0.08590644979913177,
        "chrf-73": 0.41586491150221455,
        "chrf-183": 0.07595495841565769,
        "chrf-62": 0.8118025667632169,
        "chrf-148": 0.6294092201548495,
        "chrf-69": 0.8314958819952316,
        "chrf-161": 0.7167296246290917,
        "rougel-31": 0.7476635514018692,
        "rougel-6": 0.7022222222222222,
        "rougel-91": 0.7021276595744681,
        "rougel-78": 0.7981220657276996,
        "rougel-70": 0.06451612903225806,
        "rougel-42": 0.8771929824561403,
        "rougel-29": 0.7298578199052133,
        "rougel-198": 0.9181818181818182,
        "rougel-24": 0.8739495798319327,
        "rougel-149": 0.847926267281106,
        "rougel-8": 0.9321266968325792,
        "rougel-7": 0.908256880733945,
        "rougel-26": 0.7169811320754719,
        "rougel-68": 0.049586776859504134,
        "rougel-73": 0.39739413680781766,
        "rougel-183": 0.05042016806722689,
        "rougel-62": 0.8834951456310679,
        "rougel-148": 0.7513812154696132,
        "rougel-69": 0.8619246861924686,
        "rougel-161": 0.7417840375586854,
        "meteor-31": 0.7602873667882867,
        "meteor-6": 0.7713985608597735,
        "meteor-91": 0.6048368943028775,
        "meteor-78": 0.7572680716757931,
        "meteor-70": 0.024703557312252957,
        "meteor-42": 0.9365331317712271,
        "meteor-29": 0.6305002030786087,
        "meteor-198": 0.9632035285218364,
        "meteor-24": 0.9441843494701859,
        "meteor-149": 0.8557175267294218,
        "meteor-8": 0.9685068296429883,
        "meteor-7": 0.9364546495982109,
        "meteor-26": 0.6078049701163887,
        "meteor-68": 0.014866204162537167,
        "meteor-73": 0.5162768277533035,
        "meteor-183": 0.014895729890764648,
        "meteor-62": 0.8578128530202602,
        "meteor-148": 0.6114385513738868,
        "meteor-69": 0.9250308695304703,
        "meteor-161": 0.6471962636448279,
        "ruby-31": 0.6396396396396397,
        "ruby-6": 0.5877192982456141,
        "ruby-91": 0.5855855855855856,
        "ruby-78": 0.6306306306306306,
        "ruby-70": 0.036036036036036,
        "ruby-42": 0.7863247863247863,
        "ruby-29": 0.6396396396396397,
        "ruby-198": 0.8378378378378378,
        "ruby-24": 0.7874015748031495,
        "ruby-149": 0.7567567567567568,
        "ruby-8": 0.8828828828828829,
        "ruby-7": 0.8558558558558559,
        "ruby-26": 0.6216216216216216,
        "ruby-68": 0.027027027027026973,
        "ruby-73": 0.23979591836734693,
        "ruby-183": 0.027027027027026973,
        "ruby-62": 0.7927927927927928,
        "ruby-148": 0.6126126126126126,
        "ruby-69": 0.765625,
        "ruby-161": 0.6576576576576576,
        "codebertscore_f1-31": 0.8973577618598938,
        "codebertscore_f3-31": 0.9060819149017334,
        "codebertscore_f1-6": 0.8836718797683716,
        "codebertscore_f3-6": 0.8964309692382812,
        "codebertscore_f1-91": 0.8888218998908997,
        "codebertscore_f3-91": 0.8963732719421387,
        "codebertscore_f1-78": 0.9269886016845703,
        "codebertscore_f3-78": 0.950266420841217,
        "codebertscore_f1-70": 0.6165252923965454,
        "codebertscore_f3-70": 0.5941056609153748,
        "codebertscore_f1-42": 0.9304111003875732,
        "codebertscore_f3-42": 0.9477794170379639,
        "codebertscore_f1-29": 0.9154186248779297,
        "codebertscore_f3-29": 0.9259051084518433,
        "codebertscore_f1-198": 0.9581409096717834,
        "codebertscore_f3-198": 0.9584787487983704,
        "codebertscore_f1-24": 0.8896926641464233,
        "codebertscore_f3-24": 0.9103233814239502,
        "codebertscore_f1-149": 0.9287595152854919,
        "codebertscore_f3-149": 0.9420862197875977,
        "codebertscore_f1-8": 0.9631399512290955,
        "codebertscore_f3-8": 0.9640688896179199,
        "codebertscore_f1-7": 0.9594289064407349,
        "codebertscore_f3-7": 0.9566565752029419,
        "codebertscore_f1-26": 0.9127344489097595,
        "codebertscore_f3-26": 0.9277205467224121,
        "codebertscore_f1-68": 0.5811797380447388,
        "codebertscore_f3-68": 0.5545487403869629,
        "codebertscore_f1-73": 0.826903223991394,
        "codebertscore_f3-73": 0.8431413173675537,
        "codebertscore_f1-183": 0.5893314480781555,
        "codebertscore_f3-183": 0.5494799613952637,
        "codebertscore_f1-62": 0.9339999556541443,
        "codebertscore_f3-62": 0.9317339658737183,
        "codebertscore_f1-148": 0.9125811457633972,
        "codebertscore_f3-148": 0.9063863754272461,
        "codebertscore_f1-69": 0.9224547743797302,
        "codebertscore_f3-69": 0.9441225528717041,
        "codebertscore_f1-161": 0.919181227684021,
        "codebertscore_f3-161": 0.9312092661857605,
        "codebertscore_s_f1-31": 0.904521107673645,
        "codebertscore_s_f3-31": 0.9139208793640137,
        "codebertscore_s_f1-6": 0.8902269601821899,
        "codebertscore_s_f3-6": 0.905114471912384,
        "codebertscore_s_f1-91": 0.8932845592498779,
        "codebertscore_s_f3-91": 0.8993647694587708,
        "codebertscore_s_f1-78": 0.9328234791755676,
        "codebertscore_s_f3-78": 0.9536981582641602,
        "codebertscore_s_f1-70": 0.6413114070892334,
        "codebertscore_s_f3-70": 0.6109304428100586,
        "codebertscore_s_f1-42": 0.9412566423416138,
        "codebertscore_s_f3-42": 0.9578253626823425,
        "codebertscore_s_f1-29": 0.9198954105377197,
        "codebertscore_s_f3-29": 0.9286173582077026,
        "codebertscore_s_f1-198": 0.9628626704216003,
        "codebertscore_s_f3-198": 0.9628934860229492,
        "codebertscore_s_f1-24": 0.8983007073402405,
        "codebertscore_s_f3-24": 0.9174003005027771,
        "codebertscore_s_f1-149": 0.9336596727371216,
        "codebertscore_s_f3-149": 0.947525680065155,
        "codebertscore_s_f1-8": 0.9650208950042725,
        "codebertscore_s_f3-8": 0.9654768705368042,
        "codebertscore_s_f1-7": 0.9582700729370117,
        "codebertscore_s_f3-7": 0.9558066129684448,
        "codebertscore_s_f1-26": 0.915473222732544,
        "codebertscore_s_f3-26": 0.9291573166847229,
        "codebertscore_s_f1-68": 0.6387601494789124,
        "codebertscore_s_f3-68": 0.5954763889312744,
        "codebertscore_s_f1-73": 0.8534175753593445,
        "codebertscore_s_f3-73": 0.8597204089164734,
        "codebertscore_s_f1-183": 0.6541039347648621,
        "codebertscore_s_f3-183": 0.5969165563583374,
        "codebertscore_s_f1-62": 0.9323695302009583,
        "codebertscore_s_f3-62": 0.9299771189689636,
        "codebertscore_s_f1-148": 0.9133656024932861,
        "codebertscore_s_f3-148": 0.9060370922088623,
        "codebertscore_s_f1-69": 0.9317409992218018,
        "codebertscore_s_f3-69": 0.9530254602432251,
        "codebertscore_s_f1-161": 0.9232125878334045,
        "codebertscore_s_f3-161": 0.9341574907302856,
        "gpt35_nsnr-31": 4,
        "raw_gpt35_nsnr-31": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-91": 4,
        "raw_gpt35_nsnr-91": "4",
        "gpt35_nsnr-78": 4,
        "raw_gpt35_nsnr-78": "4",
        "gpt35_nsnr-70": 2,
        "raw_gpt35_nsnr-70": "2",
        "gpt35_nsnr-42": 4,
        "raw_gpt35_nsnr-42": "4",
        "gpt35_nsnr-29": 4,
        "raw_gpt35_nsnr-29": "4",
        "gpt35_nsnr-198": 4,
        "raw_gpt35_nsnr-198": "4",
        "gpt35_nsnr-24": 4,
        "raw_gpt35_nsnr-24": "4",
        "gpt35_nsnr-149": 4,
        "raw_gpt35_nsnr-149": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-68": 2,
        "raw_gpt35_nsnr-68": "2",
        "gpt35_nsnr-73": 3,
        "raw_gpt35_nsnr-73": "3",
        "gpt35_nsnr-183": 0,
        "raw_gpt35_nsnr-183": "3 - The code snippet correctly defines the method signature and returns false by default. However, it does not implement the logic to check if the string is happy or not.",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-148": 4,
        "raw_gpt35_nsnr-148": "4",
        "gpt35_nsnr-69": 4,
        "raw_gpt35_nsnr-69": "4",
        "gpt35_nsnr-161": 4,
        "raw_gpt35_nsnr-161": "4",
        "gpt35_nswr-31": 3,
        "raw_gpt35_nswr-31": "3",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-91": 3,
        "raw_gpt35_nswr-91": "3",
        "gpt35_nswr-78": 3,
        "raw_gpt35_nswr-78": "3",
        "gpt35_nswr-70": 2,
        "raw_gpt35_nswr-70": "2",
        "gpt35_nswr-42": 4,
        "raw_gpt35_nswr-42": "4",
        "gpt35_nswr-29": 4,
        "raw_gpt35_nswr-29": "4",
        "gpt35_nswr-198": 4,
        "raw_gpt35_nswr-198": "4",
        "gpt35_nswr-24": 4,
        "raw_gpt35_nswr-24": "4",
        "gpt35_nswr-149": 4,
        "raw_gpt35_nswr-149": "4",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-26": 4,
        "raw_gpt35_nswr-26": "4",
        "gpt35_nswr-68": 2,
        "raw_gpt35_nswr-68": "2",
        "gpt35_nswr-73": 3,
        "raw_gpt35_nswr-73": "3",
        "gpt35_nswr-183": 2,
        "raw_gpt35_nswr-183": "2",
        "gpt35_nswr-62": 3,
        "raw_gpt35_nswr-62": "3",
        "gpt35_nswr-148": 3,
        "raw_gpt35_nswr-148": "3",
        "gpt35_nswr-69": 4,
        "raw_gpt35_nswr-69": "4",
        "gpt35_nswr-161": 4,
        "raw_gpt35_nswr-161": "4"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // A simple program which should return the value of x if n is \n    // a prime number and should return the value of y otherwise.\n    // Examples:\n    // for x_or_y(7, 34, 12) == 34\n    // for x_or_y(15, 8, 5) == 5\n    public static int xOrY(int n, int x, int y) {\n",
        "snippet": [
            "        if (n == 1) {\n            return y;\n        }\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return y;\n            }\n        }\n        return x;\n    }\n}"
        ],
        "simplified": "A simple program which should return the value of x if n is a prime number and should return the value of y otherwise.",
        "task_id": "150",
        "131": "int q = 0;\n        // write your code here\n        // start\n        boolean isPrime = true;\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            q = x;\n        } else {\n            q = y;\n        }\n        // end\n        return q;",
        "grade-131": {
            "execution": 0
        },
        "19": "if (n%2 == 0) {\n            return x;\n        } else {\n            return y;\n        }",
        "grade-19": {
            "execution": 0
        },
        "3": "if (isPrime(n))\n            return x;\n        else\n            return y;",
        "grade-3": {
            "execution": 0
        },
        "153": "if (n == 1) {\n            throw new IllegalArgumentException(\"n == 1\");\n        }\n        if (n == 2) {\n            return x;\n        }\n        boolean prime = true;\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                prime = false;\n                break;\n            }\n        }\n        if (prime) {\n            return x;\n        } else {\n            return y;\n        }",
        "grade-153": {
            "execution": 0
        },
        "54": "boolean bool = true;\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                bool = false;\n                break;\n            }\n        }\n        if (bool)\n            return x;\n        else\n            return y;",
        "grade-54": {
            "execution": 0
        },
        "46": "if (n % 2 == 0)\n            return y;\n        else\n            return x;",
        "grade-46": {
            "execution": 0
        },
        "43": "if (n == 0) {\n\t    return x;\n\t} else if (n == 1) {\n\t    return y;\n\t}\n\tint count = 2;\n\tint i = 2;\n\twhile (i <= Math.sqrt(n)) {\n\t    if (n % i == 0) {\n\t\tcount++;\n\t    }\n\t    i++;\n\t}\n\tif (count == 2) {\n\t    return x;\n\t} else {\n\t    return y;\n\t}",
        "grade-43": {
            "execution": 1
        },
        "25": "int result = n%2 == 0 ? y : x;\n        return result;",
        "grade-25": {
            "execution": 0
        },
        "17": "if (n == 2) {\n            return y;\n        } else if (n % 2 == 0) {\n            return x;\n        }\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) {\n                return x;\n            }\n        }\n        return y;",
        "grade-17": {
            "execution": 0
        },
        "140": "if (new BigInteger(String.valueOf(n)).isProbablePrime(1)) {\n            return x;\n        } else {\n            return y;\n        }",
        "grade-140": {
            "execution": 1
        },
        "194": "return (new Prime(n)).isPrime() ? x : y;",
        "grade-194": {
            "execution": 0
        },
        "116": "// TODO: implement this function.\n        if (n > 2 && n % 2 == 0) {\n            return y;\n        }\n        int to = (int) Math.sqrt(n) + 1;\n        for (int i = 3; i < to; i += 2) {\n            if (n % i == 0) {\n                return y;\n            }\n        }\n        return x;",
        "grade-116": {
            "execution": 0
        },
        "14": "return (int) (n/n);",
        "grade-14": {
            "execution": 0
        },
        "122": "return null;",
        "grade-122": {
            "execution": 0
        },
        "87": "// Your code should appear here...\n        return (Problem.isPrime(n) ? x : y);",
        "grade-87": {
            "execution": 0
        },
        "4": "return new int[]{x, y}[n % 2];",
        "grade-4": {
            "execution": 0
        },
        "42": "",
        "grade-42": {
            "execution": 0
        },
        "44": "return n == 3 ? x : y;",
        "grade-44": {
            "execution": 0
        },
        "109": "/* Start of user code xOrY */\n\t\t/* TODO: Replace with correct code */\n        return 0;\n        /* End of user code */",
        "grade-109": {
            "execution": 0
        },
        "125": "if (Problem.isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }",
        "grade-125": {
            "execution": 0
        },
        "bleu-131": 0.39305851113358625,
        "bleu-19": 0.1625344274960586,
        "bleu-3": 0.023991051922015023,
        "bleu-153": 0.44632428099543675,
        "bleu-54": 0.6158133470950452,
        "bleu-46": 0.060975940134829196,
        "bleu-43": 0.39320091965940973,
        "bleu-25": 0.02358291719998959,
        "bleu-17": 0.49339530457863,
        "bleu-140": 0.1613832802634862,
        "bleu-194": 0.014774944898503426,
        "bleu-116": 0.4209794884111007,
        "bleu-14": 0.0032517635917195665,
        "bleu-122": 1.060504113849811e-07,
        "bleu-87": 0.017484844143863146,
        "bleu-4": 0.009898465688854706,
        "bleu-42": 0.0,
        "bleu-44": 0.004779370068597064,
        "bleu-109": 0.0099498156035159,
        "bleu-125": 0.10653659801132015,
        "codebleu-131": 0.682706414271943,
        "codebleu-19": 0.2511659128746516,
        "codebleu-3": 0.14756987243427105,
        "codebleu-153": 0.7590706876236593,
        "codebleu-54": 0.6592066310478769,
        "codebleu-46": 0.170136263406578,
        "codebleu-43": 0.7064131362284699,
        "codebleu-25": 0.1611142156342336,
        "codebleu-17": 0.6618690179271698,
        "codebleu-140": 0.32026635651711466,
        "codebleu-194": 0.14896049216659416,
        "codebleu-116": 0.6867740224883433,
        "codebleu-14": 0.09195057081129716,
        "codebleu-122": 0.040404272372106934,
        "codebleu-87": 0.17452774960750517,
        "codebleu-4": 0.11634344594070162,
        "codebleu-42": 0.0,
        "codebleu-44": 0.08152910535576206,
        "codebleu-109": 0.18294922097110936,
        "codebleu-125": 0.23795114996928246,
        "chrf-131": 0.4813543826840478,
        "chrf-19": 0.36457077707662916,
        "chrf-3": 0.22666864766346012,
        "chrf-153": 0.6389221895217525,
        "chrf-54": 0.5992155834572093,
        "chrf-46": 0.2607990258307802,
        "chrf-43": 0.6078607129783685,
        "chrf-25": 0.14460598019143858,
        "chrf-17": 0.6888326657876698,
        "chrf-140": 0.32228942600986893,
        "chrf-194": 0.11463616182291206,
        "chrf-116": 0.6121420428845589,
        "chrf-14": 0.11044981009056777,
        "chrf-122": 0.07160820787681739,
        "chrf-87": 0.11059216716670024,
        "chrf-4": 0.10714745840668231,
        "chrf-42": 0.0,
        "chrf-44": 0.09087572623530676,
        "chrf-109": 0.1022148035138233,
        "chrf-125": 0.2987737888248206,
        "rougel-131": 0.5669291338582677,
        "rougel-19": 0.4411764705882353,
        "rougel-3": 0.3174603174603175,
        "rougel-153": 0.656934306569343,
        "rougel-54": 0.6938775510204083,
        "rougel-46": 0.43750000000000006,
        "rougel-43": 0.5970149253731343,
        "rougel-25": 0.3384615384615385,
        "rougel-17": 0.706896551724138,
        "rougel-140": 0.345679012345679,
        "rougel-194": 0.24242424242424243,
        "rougel-116": 0.6719999999999999,
        "rougel-14": 0.27586206896551724,
        "rougel-122": 0.0784313725490196,
        "rougel-87": 0.1917808219178082,
        "rougel-4": 0.1875,
        "rougel-42": 0,
        "rougel-44": 0.20689655172413793,
        "rougel-109": 0.075,
        "rougel-125": 0.37681159420289856,
        "meteor-131": 0.6566700391833185,
        "meteor-19": 0.3530323830068884,
        "meteor-3": 0.16506649266716383,
        "meteor-153": 0.6637216968795426,
        "meteor-54": 0.6367284751037344,
        "meteor-46": 0.32862103174603174,
        "meteor-43": 0.6276796747598016,
        "meteor-25": 0.22363964628826713,
        "meteor-17": 0.8132049382716049,
        "meteor-140": 0.20430107526881722,
        "meteor-194": 0.12222222222222222,
        "meteor-116": 0.8665941224313957,
        "meteor-14": 0.13211552427238704,
        "meteor-122": 0.022988505747126436,
        "meteor-87": 0.12777912850852313,
        "meteor-4": 0.14185267857142858,
        "meteor-42": 0.0,
        "meteor-44": 0.10850494043771357,
        "meteor-109": 0.0538793103448276,
        "meteor-125": 0.20768660320088297,
        "ruby-131": 0.4177215189873418,
        "ruby-19": 0.29166666666666663,
        "ruby-3": 0.20833333333333337,
        "ruby-153": 0.5056179775280899,
        "ruby-54": 0.54,
        "ruby-46": 0.29166666666666663,
        "ruby-43": 0.4534883720930233,
        "ruby-25": 0.20833333333333337,
        "ruby-17": 0.5735294117647058,
        "ruby-140": 0.25,
        "ruby-194": 0.125,
        "ruby-116": 0.5194805194805194,
        "ruby-14": 0.16666666666666663,
        "ruby-122": 0.04166666666666663,
        "ruby-87": 0.10416666666666663,
        "ruby-4": 0.10416666666666663,
        "ruby-42": 0.0,
        "ruby-44": 0.125,
        "ruby-109": 0.02083333333333337,
        "ruby-125": 0.25,
        "codebertscore_f1-131": 0.7888997197151184,
        "codebertscore_f3-131": 0.849254310131073,
        "codebertscore_f1-19": 0.8173656463623047,
        "codebertscore_f3-19": 0.7909618020057678,
        "codebertscore_f1-3": 0.7729141116142273,
        "codebertscore_f3-3": 0.7567614912986755,
        "codebertscore_f1-153": 0.83864426612854,
        "codebertscore_f3-153": 0.8831844329833984,
        "codebertscore_f1-54": 0.8562711477279663,
        "codebertscore_f3-54": 0.8830704689025879,
        "codebertscore_f1-46": 0.8326470851898193,
        "codebertscore_f3-46": 0.8051406145095825,
        "codebertscore_f1-43": 0.8418845534324646,
        "codebertscore_f3-43": 0.8657867908477783,
        "codebertscore_f1-25": 0.7688939571380615,
        "codebertscore_f3-25": 0.7508642673492432,
        "codebertscore_f1-17": 0.8740414977073669,
        "codebertscore_f3-17": 0.8935430645942688,
        "codebertscore_f1-140": 0.7409541010856628,
        "codebertscore_f3-140": 0.766557514667511,
        "codebertscore_f1-194": 0.7027000188827515,
        "codebertscore_f3-194": 0.6958007216453552,
        "codebertscore_f1-116": 0.8394452929496765,
        "codebertscore_f3-116": 0.879279613494873,
        "codebertscore_f1-14": 0.6839282512664795,
        "codebertscore_f3-14": 0.657952606678009,
        "codebertscore_f1-122": 0.5733422040939331,
        "codebertscore_f3-122": 0.5371317863464355,
        "codebertscore_f1-87": 0.6924869418144226,
        "codebertscore_f3-87": 0.7068758606910706,
        "codebertscore_f1-4": 0.7402182221412659,
        "codebertscore_f3-4": 0.72051602602005,
        "codebertscore_f1-42": 0.0,
        "codebertscore_f3-42": 0.0,
        "codebertscore_f1-44": 0.7315630316734314,
        "codebertscore_f3-44": 0.7001805305480957,
        "codebertscore_f1-109": 0.6511397361755371,
        "codebertscore_f3-109": 0.6694815158843994,
        "codebertscore_f1-125": 0.7702069878578186,
        "codebertscore_f3-125": 0.7591304183006287,
        "codebertscore_s_f1-131": 0.8181612491607666,
        "codebertscore_s_f3-131": 0.8791030645370483,
        "codebertscore_s_f1-19": 0.8420261144638062,
        "codebertscore_s_f3-19": 0.8169548511505127,
        "codebertscore_s_f1-3": 0.7998899221420288,
        "codebertscore_s_f3-3": 0.7791740894317627,
        "codebertscore_s_f1-153": 0.8594561219215393,
        "codebertscore_s_f3-153": 0.901826024055481,
        "codebertscore_s_f1-54": 0.8822329044342041,
        "codebertscore_s_f3-54": 0.9136812686920166,
        "codebertscore_s_f1-46": 0.8518815040588379,
        "codebertscore_s_f3-46": 0.8245526552200317,
        "codebertscore_s_f1-43": 0.8742697238922119,
        "codebertscore_s_f3-43": 0.8992759585380554,
        "codebertscore_s_f1-25": 0.8080556392669678,
        "codebertscore_s_f3-25": 0.7809916138648987,
        "codebertscore_s_f1-17": 0.8940204977989197,
        "codebertscore_s_f3-17": 0.9121108651161194,
        "codebertscore_s_f1-140": 0.7575716972351074,
        "codebertscore_s_f3-140": 0.7822108268737793,
        "codebertscore_s_f1-194": 0.7262964844703674,
        "codebertscore_s_f3-194": 0.7154443264007568,
        "codebertscore_s_f1-116": 0.8643519878387451,
        "codebertscore_s_f3-116": 0.9039424657821655,
        "codebertscore_s_f1-14": 0.7298285961151123,
        "codebertscore_s_f3-14": 0.6958275437355042,
        "codebertscore_s_f1-122": 0.645050585269928,
        "codebertscore_s_f3-122": 0.597694456577301,
        "codebertscore_s_f1-87": 0.7130781412124634,
        "codebertscore_s_f3-87": 0.7300440669059753,
        "codebertscore_s_f1-4": 0.7621357440948486,
        "codebertscore_s_f3-4": 0.7387908101081848,
        "codebertscore_s_f1-42": 0,
        "codebertscore_s_f3-42": 0,
        "codebertscore_s_f1-44": 0.7929100394248962,
        "codebertscore_s_f3-44": 0.7466425895690918,
        "codebertscore_s_f1-109": 0.6648143529891968,
        "codebertscore_s_f3-109": 0.6835441589355469,
        "codebertscore_s_f1-125": 0.7915101647377014,
        "codebertscore_s_f3-125": 0.7803996205329895,
        "gpt35_nsnr-131": 4,
        "raw_gpt35_nsnr-131": "4",
        "gpt35_nsnr-19": 3,
        "raw_gpt35_nsnr-19": "3",
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-153": 4,
        "raw_gpt35_nsnr-153": "4",
        "gpt35_nsnr-54": 4,
        "raw_gpt35_nsnr-54": "4",
        "gpt35_nsnr-46": 3,
        "raw_gpt35_nsnr-46": "3",
        "gpt35_nsnr-43": 4,
        "raw_gpt35_nsnr-43": "4",
        "gpt35_nsnr-25": 3,
        "raw_gpt35_nsnr-25": "3",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-140": 4,
        "raw_gpt35_nsnr-140": "4",
        "gpt35_nsnr-194": 4,
        "raw_gpt35_nsnr-194": "4",
        "gpt35_nsnr-116": 4,
        "raw_gpt35_nsnr-116": "4",
        "gpt35_nsnr-14": 2,
        "raw_gpt35_nsnr-14": "2",
        "gpt35_nsnr-122": 0,
        "raw_gpt35_nsnr-122": "0",
        "gpt35_nsnr-87": 4,
        "raw_gpt35_nsnr-87": "4",
        "gpt35_nsnr-4": 3,
        "raw_gpt35_nsnr-4": "3",
        "gpt35_nsnr-42": 0,
        "raw_gpt35_nsnr-42": "3 - The code snippet correctly implements the logic to check if n is a prime number and returns x if it is, and y otherwise. However, there are no comments or explanations in the code to indicate this logic, which could make it difficult for others to understand the purpose of the function.",
        "gpt35_nsnr-44": 2,
        "raw_gpt35_nsnr-44": "2",
        "gpt35_nsnr-109": 0,
        "raw_gpt35_nsnr-109": "3 - The code snippet correctly implements the logic to check if n is a prime number and returns x if it is, and y otherwise. However, the implementation is incomplete as the TODO comment suggests that the code needs to be replaced with correct code.",
        "gpt35_nsnr-125": 4,
        "raw_gpt35_nsnr-125": "4",
        "gpt35_nswr-131": 4,
        "raw_gpt35_nswr-131": "4",
        "gpt35_nswr-19": 2,
        "raw_gpt35_nswr-19": "2",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-153": 4,
        "raw_gpt35_nswr-153": "4",
        "gpt35_nswr-54": 3,
        "raw_gpt35_nswr-54": "3",
        "gpt35_nswr-46": 3,
        "raw_gpt35_nswr-46": "3",
        "gpt35_nswr-43": 3,
        "raw_gpt35_nswr-43": "3",
        "gpt35_nswr-25": 2,
        "raw_gpt35_nswr-25": "2",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-140": 3,
        "raw_gpt35_nswr-140": "3",
        "gpt35_nswr-194": 3,
        "raw_gpt35_nswr-194": "3",
        "gpt35_nswr-116": 3,
        "raw_gpt35_nswr-116": "3",
        "gpt35_nswr-14": 4,
        "raw_gpt35_nswr-14": "4",
        "gpt35_nswr-122": 0,
        "raw_gpt35_nswr-122": "0",
        "gpt35_nswr-87": 3,
        "raw_gpt35_nswr-87": "3",
        "gpt35_nswr-4": 2,
        "raw_gpt35_nswr-4": "2",
        "gpt35_nswr-42": 3,
        "raw_gpt35_nswr-42": "3",
        "gpt35_nswr-44": 2,
        "raw_gpt35_nswr-44": "2",
        "gpt35_nswr-109": 3,
        "raw_gpt35_nswr-109": "3",
        "gpt35_nswr-125": 3,
        "raw_gpt35_nswr-125": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that accepts a list of strings as a parameter,\n    // deletes the strings that have odd lengths from it,\n    // and returns the resulted list with a sorted order,\n    // The list is always a list of strings and never an array of numbers,\n    // and it may contain duplicates.\n    // The order of the list should be ascending by length of each word, and you\n    // should return the list sorted by that rule.\n    // If two words have the same length, sort the list alphabetically.\n    // The function should return a list of strings in sorted order.\n    // You may assume that all words will have the same length.\n    // For example:\n    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    // assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    public static ArrayList<String> sortedListSum(ArrayList<String> lst) {\n",
        "snippet": [
            "        List<String> lst_sorted = new ArrayList<>(lst);\n        Collections.sort(lst_sorted);\n        List<String> new_lst = new ArrayList<>();\n        for (String i : lst_sorted) {\n            if (i.length() % 2 == 0) {\n                new_lst.add(i);\n            }\n        }\n        new_lst.sort(Comparator.comparingInt(String::length));\n        return new_lst;\n    }\n}"
        ],
        "simplified": "Write a function that accepts a list of strings as a parameter, deletes the strings that have odd lengths from it, and returns the resulted list with a sorted order, The list is always a list of strings and never an array of numbers, and it may contain duplicates. The order of the list should be ascending by length of each word, and you should return the list sorted by that rule. If two words have the same length, sort the list alphabetically. The function should return a list of strings in sorted order. You may assume that all words will have the same length.",
        "task_id": "149",
        "170": "ArrayList<String> tmp = new ArrayList<String>();\n        for (String str : lst) {\n            if (str.length() % 2 == 0) {\n                tmp.add(str);\n            }\n        }\n        Collections.sort(tmp, new Comparator<String>() {\n            @Override\n            public int compare(String a, String b) {\n                return a.length() - b.length();\n            }\n        });\n        return tmp;",
        "grade-170": {
            "execution": 0
        },
        "28": "return lst.stream()\n            .map(s -> s.length())\n            .distinct()\n            .map(l -> lst.stream()\n                        .filter(s -> s.length() == l)\n                        .sorted(String::compareTo)\n                        .collect(Collectors.toList()))\n            .flatMap(List::stream)\n            .collect(Collectors.toCollection(ArrayList::new));",
        "grade-28": {
            "execution": 0
        },
        "6": "// Iterate through the list\n        for (int i = 0; i < lst.size(); i++) {\n            // Remove the elements that have odd length\n            if (lst.get(i).length() % 2 != 0) {\n                lst.remove(i);\n            }\n        }\n        // Sort the list by length\n        lst.sort(new Comparator<String>() {\n            @Override\n            public int compare(String s1, String s2) {\n                return s1.length() - s2.length();\n            }\n        });\n        // Sort the list alphabetically\n        Collections.sort(lst);\n        return lst;",
        "grade-6": {
            "execution": 0
        },
        "71": "ArrayList<String> sortedList = new ArrayList<String>();\n        boolean uniqueElement = true;\n        for (int i = 0; i < lst.size(); i++) {\n            uniqueElement = true;\n            for (int j = 0; j < sortedList.size(); j++) {\n                if (lst.get(i).equals(sortedList.get(j))) {\n                    uniqueElement = false;\n                }\n            }\n            if (uniqueElement) {\n                sortedList.add(lst.get(i));\n            }\n        }\n        return sortedList;",
        "grade-71": {
            "execution": 0
        },
        "63": "return new ArrayList<String>(Arrays.asList(\"aa\"));",
        "grade-63": {
            "execution": 0
        },
        "58": "// Code goes here.\n        return null;",
        "grade-58": {
            "execution": 0
        },
        "35": "// your code goes here\n        return lst;",
        "grade-35": {
            "execution": 0
        },
        "198": "String[] arr = lst.toArray(new String[lst.size()]);\n        int sum = 0;\n        HashMap<Integer, String> map = new HashMap<>();\n        for (int i = 0; i < arr.length; i++) {\n            int currentSum = 0;\n            for (int j = 0; j < arr[i].length(); j++) {\n                currentSum += arr[i].charAt(j);\n            }\n            if (map.containsKey(currentSum)) {\n                map.put(currentSum, map.get(currentSum) + \" \" + arr[i]);\n            } else {\n                map.put(currentSum, arr[i]);\n            }\n        }\n        int largestSum = Integer.MIN_VALUE;\n        for (int i : map.keySet()) {\n            if (i > largestSum) {\n                largestSum = i;\n            }\n        }\n        return new ArrayList<String>(Arrays.asList(map.get(largestSum).split(\" \")));",
        "grade-198": {
            "execution": 0
        },
        "26": "ArrayList<String> lst2 = new ArrayList<String>();\n        for (String s : lst) {\n            if (s.length() % 2 == 0) {\n                lst2.add(s);\n            }\n        }\n        lst2.sort(new Comparator<String>() {\n            @Override\n            public int compare(String s1, String s2) {\n                if (s1.length() < s2.length()) {\n                    return -1;\n                } else if (s1.length() > s2.length()) {\n                    return 1;\n                } else {\n                    return s1.compareTo(s2);\n                }\n            }\n        });\n        return lst2;",
        "grade-26": {
            "execution": 1
        },
        "180": "var sorted = lst.stream().sorted(new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                return o1.length() - o2.length();\n            }\n        }).toArray(String[]::new);\n        ArrayList<String> result = new ArrayList<String>();\n        for (int i = 0; i < sorted.length; i++) {\n            if (sorted[i].length() % 2 == 0)\n                result.add(sorted[i]);\n        }\n        return result;",
        "grade-180": {
            "execution": 0
        },
        "146": "ArrayList<String> newLst = new ArrayList<String>();\n        ArrayList<String> temp = new ArrayList<String>();\n        for (String str : lst) {\n            if (str.length() % 2 == 0) {\n                newLst.add(str);\n            }\n        }\n        Collections.sort(newLst);\n        return newLst;",
        "grade-146": {
            "execution": 0
        },
        "22": "ArrayList<String> res = new ArrayList<String>();\n        ArrayList<String> lst2 = new ArrayList<String>();\n        ArrayList<String> lst3 = new ArrayList<String>();\n        int length = lst.get(0).length();\n        for (String str : lst) {\n            if (str.length() == length) {\n                lst2.add(str);\n            } else {\n                lst3.add(str);\n            }\n        }\n        Collections.sort(lst2);\n        res.add(lst2.get(0));\n        return res;",
        "grade-22": {
            "execution": 0
        },
        "158": "return new ArrayList<>(\n            lst.stream()\n                .filter(e -> e.length() % 2 == 0)\n                .collect(Collectors.toList())\n        );",
        "grade-158": {
            "execution": 0
        },
        "112": "ArrayList<String> result = new ArrayList<String>();\n        for (String s : lst) {\n            if (s.length() % 2 == 0) {\n                result.add(s);\n            }\n        }\n        Collections.sort(result, new StringLengthComparator());\n        return result;",
        "grade-112": {
            "execution": 0
        },
        "8": "ArrayList<String> result = new ArrayList<String>();\n        if (lst.size() == 0) return result;\n        int max = 0;\n        int count = 0;\n        int temp_length = 0;\n        int size = lst.size();\n        ArrayList<String> temp = new ArrayList<String>();\n        // get max length\n        for (int i = 0; i < size; i++) {\n            temp_length = lst.get(i).length();\n            if (temp_length % 2 == 0) {\n                if (temp_length > max) max = temp_length;\n            }\n        }\n        // get count\n        for (int i = 0; i < size; i++) {\n            temp_length = lst.get(i).length();\n            if (temp_length == max) count++;\n        }\n        // sort list\n        for (int i = 0; i < size; i++) {\n            temp_length = lst.get(i).length();\n            if (temp_length == max) {\n                temp.add(lst.get(i));\n            }\n        }\n        Collections.sort(temp);\n        // add to result\n        for (int i = 0; i < count; i++) {\n            result.add(temp.get(i));\n        }\n        return result;",
        "grade-8": {
            "execution": 0
        },
        "7": "ArrayList<String> result = new ArrayList<String>();\n        lst.forEach(word -> {\n            if (word.length() % 2 == 0) {\n                result.add(word);\n            }\n        });\n        Collections.sort(result, new Comparator<String>() {\n            @Override\n            public int compare(String s1, String s2) {\n                if (s1.length() == s2.length()) {\n                    return s1.compareTo(s2);\n                }\n                return s1.length() - s2.length();\n            }\n        });\n        return result;",
        "grade-7": {
            "execution": 1
        },
        "23": "ArrayList<String> list = new ArrayList<String>();\n        for (String s : lst) {\n            if (s.length() % 2 == 0) {\n                list.add(s);\n            }\n        }\n        Collections.sort(list, new Comparator<String>() {\n            @Override\n            public int compare(String a, String b) {\n                if (a.length() > b.length()) {\n                    return 1;\n                } else if (a.length() < b.length()) {\n                    return -1;\n                } else {\n                    return a.compareTo(b);\n                }\n            }\n        });\n        return list;",
        "grade-23": {
            "execution": 1
        },
        "55": "ArrayList<String> result = new ArrayList<String>();\n        List<String> tmp = lst.stream().filter(x -> x.length() % 2 == 0).collect(Collectors.toList());\n        tmp.sort(new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                return o1.length() - o2.length();\n            }\n        });\n        result.addAll(tmp);\n        return result;",
        "grade-55": {
            "execution": 0
        },
        "60": "ArrayList<String> result = new ArrayList<String>();\n        HashMap<Integer, ArrayList<String>> map = new HashMap<Integer, ArrayList<String>>();\n        for (String item : lst) {\n            if (map.containsKey(item.length())) {\n                map.get(item.length()).add(item);\n            } else {\n                ArrayList<String> al = new ArrayList<String>();\n                al.add(item);\n                map.put(item.length(), al);\n            }\n        }\n        ArrayList<Integer> keys = new ArrayList<Integer>(map.keySet());\n        Collections.sort(keys);\n        for (Integer item : keys) {\n            ArrayList<String> al = map.get(item);\n            Collections.sort(al);\n            result.addAll(al);\n        }\n        return result;",
        "grade-60": {
            "execution": 0
        },
        "134": "ArrayList<String> oddSortedList = new ArrayList<String>();\n        for (String str : lst) {\n            if (str.length() % 2 == 0) {\n                oddSortedList.add(str);\n            }\n        }\n        Collections.sort(oddSortedList);\n        return oddSortedList;",
        "grade-134": {
            "execution": 0
        },
        "bleu-170": 0.39467593578353727,
        "bleu-28": 0.09010975823445405,
        "bleu-6": 0.19740493332785364,
        "bleu-71": 0.19312865083086453,
        "bleu-63": 0.008769625664593234,
        "bleu-58": 9.670510954285403e-06,
        "bleu-35": 9.670510954285403e-06,
        "bleu-198": 0.11279809002491545,
        "bleu-26": 0.277881899637085,
        "bleu-180": 0.2665180232356192,
        "bleu-146": 0.4272561321169474,
        "bleu-22": 0.27454275834195074,
        "bleu-158": 0.1399761378765235,
        "bleu-112": 0.3781931132333414,
        "bleu-8": 0.13243297194124004,
        "bleu-7": 0.29452081401875807,
        "bleu-23": 0.2822167177394757,
        "bleu-55": 0.2954384356040379,
        "bleu-60": 0.17968582186790447,
        "bleu-134": 0.36484191214313716,
        "codebleu-170": 0.6704132619460981,
        "codebleu-28": 0.470034583119356,
        "codebleu-6": 0.6231022758767376,
        "codebleu-71": 0.6254054278721252,
        "codebleu-63": 0.08224493802821013,
        "codebleu-58": 0.04373656820256909,
        "codebleu-35": 0.038272087328252144,
        "codebleu-198": 0.6396402794423375,
        "codebleu-26": 0.6802637799232559,
        "codebleu-180": 0.6092186298987496,
        "codebleu-146": 0.6026730455148948,
        "codebleu-22": 0.6590109121148912,
        "codebleu-158": 0.2580376660816787,
        "codebleu-112": 0.5226314064723818,
        "codebleu-8": 0.6475127944653178,
        "codebleu-7": 0.6550702083919976,
        "codebleu-23": 0.6834548555296115,
        "codebleu-55": 0.6056600282413802,
        "codebleu-60": 0.6285215961252157,
        "codebleu-134": 0.49907555183173047,
        "chrf-170": 0.4991904974960421,
        "chrf-28": 0.30166650081351537,
        "chrf-6": 0.4019955831070536,
        "chrf-71": 0.3816170180882659,
        "chrf-63": 0.15113956368980602,
        "chrf-58": 0.038261958581935596,
        "chrf-35": 0.03984364431240888,
        "chrf-198": 0.32191981723914737,
        "chrf-26": 0.4697644960170208,
        "chrf-180": 0.47703685590823336,
        "chrf-146": 0.5364086244545018,
        "chrf-22": 0.492516339780292,
        "chrf-158": 0.24479845177200324,
        "chrf-112": 0.48549650803063826,
        "chrf-8": 0.39325072644258363,
        "chrf-7": 0.4838802648992681,
        "chrf-23": 0.5123932700802527,
        "chrf-55": 0.46449878289804614,
        "chrf-60": 0.4313811429905132,
        "chrf-134": 0.47613089847330575,
        "rougel-170": 0.5714285714285714,
        "rougel-28": 0.34254143646408847,
        "rougel-6": 0.3888888888888889,
        "rougel-71": 0.41904761904761906,
        "rougel-63": 0.22429906542056074,
        "rougel-58": 0.06185567010309277,
        "rougel-35": 0.041237113402061855,
        "rougel-198": 0.3130990415335463,
        "rougel-26": 0.49315068493150677,
        "rougel-180": 0.4811320754716981,
        "rougel-146": 0.715151515151515,
        "rougel-22": 0.5876777251184835,
        "rougel-158": 0.43410852713178294,
        "rougel-112": 0.6578947368421052,
        "rougel-8": 0.3743016759776536,
        "rougel-7": 0.4834123222748815,
        "rougel-23": 0.48868778280542985,
        "rougel-55": 0.4795918367346938,
        "rougel-60": 0.40425531914893614,
        "rougel-134": 0.6143790849673202,
        "meteor-170": 0.5592668137420151,
        "meteor-28": 0.3161860919299714,
        "meteor-6": 0.45554154875225106,
        "meteor-71": 0.4508382009873954,
        "meteor-63": 0.12475681600219206,
        "meteor-58": 0.018726591760299623,
        "meteor-35": 0.018726591760299623,
        "meteor-198": 0.44917223526578776,
        "meteor-26": 0.5486303504587728,
        "meteor-180": 0.5397903930131005,
        "meteor-146": 0.5770668858795679,
        "meteor-22": 0.5894234415077505,
        "meteor-158": 0.31690184724408793,
        "meteor-112": 0.6133177570093458,
        "meteor-8": 0.43604681492610514,
        "meteor-7": 0.491790270600746,
        "meteor-23": 0.552571685258666,
        "meteor-55": 0.5565623582766439,
        "meteor-60": 0.48033508596647456,
        "meteor-134": 0.48550811631059193,
        "ruby-170": 0.3191489361702128,
        "ruby-28": 0.17204301075268813,
        "ruby-6": 0.234375,
        "ruby-71": 0.2704918032786885,
        "ruby-63": 0.13636363636363635,
        "ruby-58": 0.03409090909090906,
        "ruby-35": 0.022727272727272707,
        "ruby-198": 0.1955555555555556,
        "ruby-26": 0.30534351145038163,
        "ruby-180": 0.24193548387096775,
        "ruby-146": 0.6022727272727273,
        "ruby-22": 0.44715447154471544,
        "ruby-158": 0.31818181818181823,
        "ruby-112": 0.5454545454545454,
        "ruby-8": 0.23333333333333328,
        "ruby-7": 0.3414634146341463,
        "ruby-23": 0.3007518796992481,
        "ruby-55": 0.2685185185185185,
        "ruby-60": 0.28350515463917525,
        "ruby-134": 0.4772727272727273,
        "codebertscore_f1-170": 0.8138195276260376,
        "codebertscore_f3-170": 0.8130574226379395,
        "codebertscore_f1-28": 0.7216235399246216,
        "codebertscore_f3-28": 0.7361911535263062,
        "codebertscore_f1-6": 0.7742689847946167,
        "codebertscore_f3-6": 0.7974991202354431,
        "codebertscore_f1-71": 0.763386070728302,
        "codebertscore_f3-71": 0.7705636620521545,
        "codebertscore_f1-63": 0.6806801557540894,
        "codebertscore_f3-63": 0.6416491270065308,
        "codebertscore_f1-58": 0.5611908435821533,
        "codebertscore_f3-58": 0.5391668677330017,
        "codebertscore_f1-35": 0.6246395111083984,
        "codebertscore_f3-35": 0.6170031428337097,
        "codebertscore_f1-198": 0.7186031341552734,
        "codebertscore_f3-198": 0.7392894625663757,
        "codebertscore_f1-26": 0.7993888258934021,
        "codebertscore_f3-26": 0.8261135220527649,
        "codebertscore_f1-180": 0.7795484066009521,
        "codebertscore_f3-180": 0.7903725504875183,
        "codebertscore_f1-146": 0.87013840675354,
        "codebertscore_f3-146": 0.8504605293273926,
        "codebertscore_f1-22": 0.8157269358634949,
        "codebertscore_f3-22": 0.8103208541870117,
        "codebertscore_f1-158": 0.7390596866607666,
        "codebertscore_f3-158": 0.7250353097915649,
        "codebertscore_f1-112": 0.8386500477790833,
        "codebertscore_f3-112": 0.81825190782547,
        "codebertscore_f1-8": 0.7456596493721008,
        "codebertscore_f3-8": 0.7810800075531006,
        "codebertscore_f1-7": 0.7842057943344116,
        "codebertscore_f3-7": 0.7985906004905701,
        "codebertscore_f1-23": 0.7920207977294922,
        "codebertscore_f3-23": 0.8097371459007263,
        "codebertscore_f1-55": 0.7832093238830566,
        "codebertscore_f3-55": 0.7899067997932434,
        "codebertscore_f1-60": 0.7570887207984924,
        "codebertscore_f3-60": 0.764580249786377,
        "codebertscore_f1-134": 0.8271388411521912,
        "codebertscore_f3-134": 0.8161739110946655,
        "codebertscore_s_f1-170": 0.8162709474563599,
        "codebertscore_s_f3-170": 0.8189160823822021,
        "codebertscore_s_f1-28": 0.7275829911231995,
        "codebertscore_s_f3-28": 0.7469624280929565,
        "codebertscore_s_f1-6": 0.7891189455986023,
        "codebertscore_s_f3-6": 0.8149616718292236,
        "codebertscore_s_f1-71": 0.7789236903190613,
        "codebertscore_s_f3-71": 0.7926515340805054,
        "codebertscore_s_f1-63": 0.7254753708839417,
        "codebertscore_s_f3-63": 0.6752393841743469,
        "codebertscore_s_f1-58": 0.5815329551696777,
        "codebertscore_s_f3-58": 0.5474281907081604,
        "codebertscore_s_f1-35": 0.6698565483093262,
        "codebertscore_s_f3-35": 0.6559941172599792,
        "codebertscore_s_f1-198": 0.7493380904197693,
        "codebertscore_s_f3-198": 0.7667630314826965,
        "codebertscore_s_f1-26": 0.809342086315155,
        "codebertscore_s_f3-26": 0.8341200947761536,
        "codebertscore_s_f1-180": 0.7948950529098511,
        "codebertscore_s_f3-180": 0.8116220235824585,
        "codebertscore_s_f1-146": 0.873231828212738,
        "codebertscore_s_f3-146": 0.851574718952179,
        "codebertscore_s_f1-22": 0.8291332721710205,
        "codebertscore_s_f3-22": 0.8221086859703064,
        "codebertscore_s_f1-158": 0.7348962426185608,
        "codebertscore_s_f3-158": 0.7266918420791626,
        "codebertscore_s_f1-112": 0.832571804523468,
        "codebertscore_s_f3-112": 0.8192879557609558,
        "codebertscore_s_f1-8": 0.7709081768989563,
        "codebertscore_s_f3-8": 0.8004780411720276,
        "codebertscore_s_f1-7": 0.793865442276001,
        "codebertscore_s_f3-7": 0.8120476007461548,
        "codebertscore_s_f1-23": 0.8018251657485962,
        "codebertscore_s_f3-23": 0.8185696601867676,
        "codebertscore_s_f1-55": 0.791873574256897,
        "codebertscore_s_f3-55": 0.80230712890625,
        "codebertscore_s_f1-60": 0.7898154854774475,
        "codebertscore_s_f3-60": 0.7891750931739807,
        "codebertscore_s_f1-134": 0.8205180764198303,
        "codebertscore_s_f3-134": 0.8135586977005005,
        "gpt35_nsnr-170": 4,
        "raw_gpt35_nsnr-170": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-71": 2,
        "raw_gpt35_nsnr-71": "2",
        "gpt35_nsnr-63": 3,
        "raw_gpt35_nsnr-63": "3",
        "gpt35_nsnr-58": 0,
        "raw_gpt35_nsnr-58": "0",
        "gpt35_nsnr-35": 2,
        "raw_gpt35_nsnr-35": "2",
        "gpt35_nsnr-198": 1,
        "raw_gpt35_nsnr-198": "1",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-180": 4,
        "raw_gpt35_nsnr-180": "4",
        "gpt35_nsnr-146": 3,
        "raw_gpt35_nsnr-146": "3",
        "gpt35_nsnr-22": 3,
        "raw_gpt35_nsnr-22": "3",
        "gpt35_nsnr-158": 0,
        "raw_gpt35_nsnr-158": "3 - The code correctly filters out strings with odd lengths, but it does not sort the resulting list by ascending length and alphabetical order.",
        "gpt35_nsnr-112": 3,
        "raw_gpt35_nsnr-112": "3",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-60": 4,
        "raw_gpt35_nsnr-60": "4",
        "gpt35_nsnr-134": 3,
        "raw_gpt35_nsnr-134": "3",
        "gpt35_nswr-170": 4,
        "raw_gpt35_nswr-170": "4",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-71": 3,
        "raw_gpt35_nswr-71": "3",
        "gpt35_nswr-63": 4,
        "raw_gpt35_nswr-63": "4",
        "gpt35_nswr-58": 0,
        "raw_gpt35_nswr-58": "0",
        "gpt35_nswr-35": 2,
        "raw_gpt35_nswr-35": "2",
        "gpt35_nswr-198": 1,
        "raw_gpt35_nswr-198": "1",
        "gpt35_nswr-26": 4,
        "raw_gpt35_nswr-26": "4",
        "gpt35_nswr-180": 3,
        "raw_gpt35_nswr-180": "3",
        "gpt35_nswr-146": 3,
        "raw_gpt35_nswr-146": "3",
        "gpt35_nswr-22": 2,
        "raw_gpt35_nswr-22": "2",
        "gpt35_nswr-158": 3,
        "raw_gpt35_nswr-158": "3",
        "gpt35_nswr-112": 3,
        "raw_gpt35_nswr-112": "3",
        "gpt35_nswr-8": 2,
        "raw_gpt35_nswr-8": "2",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-60": 2,
        "raw_gpt35_nswr-60": "2",
        "gpt35_nswr-134": 3,
        "raw_gpt35_nswr-134": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given an integer. return a tuple that has the number of even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12) ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer, Integer> evenOddCount(int num) {\n",
        "snippet": [
            "        int even_count = 0, odd_count = 0;\n        for (char i : String.valueOf(Math.abs(num)).toCharArray()) {\n            if ((i - '0') % 2 == 0) {\n                even_count += 1;\n            } else {\n                odd_count += 1;\n            }\n        }\n        return Arrays.asList(even_count, odd_count);\n    }\n}"
        ],
        "simplified": "Given an integer. return a tuple that has the number of even and odd digits respectively.",
        "task_id": "155",
        "31": "int even = 0;\n        int odd = 0;\n        while (num != 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                even += 1;\n            } else {\n                odd += 1;\n            }\n            num /= 10;\n        }\n        return new Pair<Integer, Integer>(even, odd);",
        "grade-31": {
            "execution": 0
        },
        "6": "// Your code goes here\n        int temp = num;\n        int even = 0;\n        int odd = 0;\n        while(temp != 0){\n            int digit = temp % 10;\n            if(digit % 2 == 0){\n                even++;\n            }\n            else{\n                odd++;\n            }\n            temp /= 10;\n        }\n        return new Pair<Integer, Integer>(even, odd);",
        "grade-6": {
            "execution": 0
        },
        "87": "// TODO: Implement this method\n        if (num == 0) {\n            return new Pair<Integer, Integer>(1, 0);\n        }\n        int evenCount = 0;\n        int oddCount = 0;\n        while (num != 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n            num /= 10;\n        }\n        return new Pair<Integer, Integer>(evenCount, oddCount);",
        "grade-87": {
            "execution": 0
        },
        "77": "String str = String.valueOf(num);\n        int even = 0;\n        int odd = 0;\n        for (int i = 0; i < str.length(); i++) {\n            int digit = str.charAt(i) - '0';\n            if (digit % 2 == 0) even++;\n            else odd++;\n        }\n        return new Pair<Integer, Integer>(even, odd);",
        "grade-77": {
            "execution": 0
        },
        "71": "return Pair.with(new Long(String.valueOf(num).chars().filter(c -> c % 2 == 0).count()).intValue(),\n                new Long(String.valueOf(num).chars().filter(c -> c % 2 != 0).count()).intValue());",
        "grade-71": {
            "execution": 0
        },
        "41": "return Pair.with(0, 0);",
        "grade-41": {
            "execution": 0
        },
        "29": "Pair<Integer, Integer> result = new Pair<Integer, Integer>(0, 0);\n        List<Integer> digits = Problem.intToDigits(num);\n        for (int digit : digits) {\n            if (digit % 2 == 0) {\n                result = result.setAt0(result.getValue0() + 1);\n            } else {\n                result = result.setAt1(result.getValue1() + 1);\n            }\n        }\n        return result;",
        "grade-29": {
            "execution": 0
        },
        "176": "int even = 0;\n        int odd = 0;\n        for (int d : getDigits(num)) {\n            if (d % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n        }\n        return new Pair<Integer, Integer>(even, odd);",
        "grade-176": {
            "execution": 0
        },
        "24": "if (num == 0) {\n            return new Pair<Integer, Integer>(1, 0);\n        }\n        int even = 0;\n        int odd = 0;\n        if (num < 0) {\n            num = -num;\n        }\n        while (num > 0) {\n            int ld = num % 10;\n            if (ld % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n            num /= 10;\n        }\n        return new Pair<Integer, Integer>(even, odd);",
        "grade-24": {
            "execution": 0
        },
        "193": "Pair<Integer, Integer> result = new Pair<Integer, Integer>(0, 0);\n        // your code goes here\n        return result;",
        "grade-193": {
            "execution": 0
        },
        "140": "// TODO: Write code here",
        "grade-140": {
            "execution": 0
        },
        "8": "// Your code here\n        return null;",
        "grade-8": {
            "execution": 0
        },
        "7": "// TODO: Return a tuple with the count of even digits and odd digits respectively\n        return null;",
        "grade-7": {
            "execution": 0
        },
        "26": "String num_str = String.valueOf(num);\n        int even_cnt = 0;\n        int odd_cnt = 0;\n        for (int i = 0; i < num_str.length(); i++) {\n            int digit = Integer.parseInt(String.valueOf(num_str.charAt(i)));\n            if (digit % 2 == 0) {\n                even_cnt++;\n            } else {\n                odd_cnt++;\n            }\n        }\n        return new Pair<Integer, Integer>(even_cnt, odd_cnt);",
        "grade-26": {
            "execution": 0
        },
        "68": "int even = 0;\n        int odd = 0;\n        // write your code here\n        if (num < 0) {\n            num = num * -1;\n        }\n        String s = String.valueOf(num);\n        char[] c = s.toCharArray();\n        for (int i = 0; i < c.length; i++) {\n            if (c[i] % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n        }\n        return new Pair<Integer, Integer>(even, odd);",
        "grade-68": {
            "execution": 0
        },
        "74": "String numstr = String.valueOf(num);\n      int evencount = 0;\n      int oddcount = 0;\n      for (int i = 0; i < numstr.length(); i++) {\n        if (numstr.charAt(i) % 2 == 0) {\n          evencount++;\n        } else {\n          oddcount++;\n        }\n      }\n      return new Pair<Integer, Integer>(evencount, oddcount);",
        "grade-74": {
            "execution": 0
        },
        "163": "int num_copy = num;\n        int even_count = 0;\n        int odd_count = 0;\n        if (num == 0) {\n            even_count++;\n        }\n        while (num_copy != 0) {\n            if (num_copy % 2 == 0) {\n                even_count++;\n            } else {\n                odd_count++;\n            }\n            num_copy /= 10;\n        }\n        return new Pair<Integer, Integer>(even_count, odd_count);",
        "grade-163": {
            "execution": 0
        },
        "181": "int even_count = 0;\n        int odd_count = 0;\n        while (num != 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0)\n                even_count++;\n            else\n                odd_count++;\n            num /= 10;\n        }\n        return new Pair<Integer, Integer>(even_count, odd_count);",
        "grade-181": {
            "execution": 0
        },
        "60": "int even = 0;\n        int odd = 0;\n        char[] evenDigits = new char[]{'0', '2', '4', '6', '8'};\n        char[] oddDigits = new char[]{'1', '3', '5', '7', '9'};\n        String numString = Integer.toString(num);\n        for (int i = 0; i < numString.length(); i++) {\n            char currChar = numString.charAt(i);\n            if (Arrays.asList(evenDigits).contains(currChar)) {\n                even++;\n            } else if (Arrays.asList(oddDigits).contains(currChar)) {\n                odd++;\n            }\n        }\n        return new Pair<Integer, Integer>(even, odd);",
        "grade-60": {
            "execution": 0
        },
        "139": "int even = 0;\n        int odd = 0;\n        for (int i = 0; i < Integer.toString(num).length(); i++) {\n            if (Integer.toString(num).charAt(i) % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n        }\n        return new Pair<Integer, Integer>(even, odd);",
        "grade-139": {
            "execution": 0
        },
        "bleu-31": 0.24997229131447934,
        "bleu-6": 0.16702001149584603,
        "bleu-87": 0.1372192386159934,
        "bleu-77": 0.22132471419026126,
        "bleu-71": 0.16198338613286226,
        "bleu-41": 0.0001739683332550821,
        "bleu-29": 0.20117672465620762,
        "bleu-176": 0.2561626717385048,
        "bleu-24": 0.14088890965884837,
        "bleu-193": 0.009865665441809874,
        "bleu-140": 2.5846295013068953e-06,
        "bleu-8": 1.0406590570753259e-05,
        "bleu-7": 0.0013864527288749737,
        "bleu-26": 0.22885565858796994,
        "bleu-68": 0.24195281616481876,
        "bleu-74": 0.2974533951869242,
        "bleu-163": 0.3384484067117951,
        "bleu-181": 0.2306947955735928,
        "bleu-60": 0.08755381234811281,
        "bleu-139": 0.26562589109319396,
        "codebleu-31": 0.42108843537414964,
        "codebleu-6": 0.3910430839002267,
        "codebleu-87": 0.4456916099773242,
        "codebleu-77": 0.5117913832199547,
        "codebleu-71": 0.4005581367166032,
        "codebleu-41": 0.06988746066551474,
        "codebleu-29": 0.5583900226757369,
        "codebleu-176": 0.42413253224632846,
        "codebleu-24": 0.47154195011337857,
        "codebleu-193": 0.15255888045008237,
        "codebleu-140": 0.03174609867833746,
        "codebleu-8": 0.03811833350736054,
        "codebleu-7": 0.1026767092636172,
        "codebleu-26": 0.5537414965986394,
        "codebleu-68": 0.5444444444444444,
        "codebleu-74": 0.5151927437641722,
        "codebleu-163": 0.4508432826562161,
        "codebleu-181": 0.3840412955700367,
        "codebleu-60": 0.5507936507936508,
        "codebleu-139": 0.5295918367346939,
        "chrf-31": 0.2803276829128245,
        "chrf-6": 0.2577694258950252,
        "chrf-87": 0.3328977627723161,
        "chrf-77": 0.32248980882069006,
        "chrf-71": 0.2562972777523158,
        "chrf-41": 0.04327661666205949,
        "chrf-29": 0.23266068526448458,
        "chrf-176": 0.30625722322549664,
        "chrf-24": 0.2644573295354293,
        "chrf-193": 0.09452322151071431,
        "chrf-140": 0.021551632415127208,
        "chrf-8": 0.04641423783356779,
        "chrf-7": 0.11281156874229234,
        "chrf-26": 0.4388349004942722,
        "chrf-68": 0.41647978172779543,
        "chrf-74": 0.4859005980232583,
        "chrf-163": 0.4815927993574207,
        "chrf-181": 0.4414894748493073,
        "chrf-60": 0.332156151848785,
        "chrf-139": 0.33738779368975136,
        "rougel-31": 0.5034013605442177,
        "rougel-6": 0.41025641025641024,
        "rougel-87": 0.36464088397790057,
        "rougel-77": 0.4431137724550898,
        "rougel-71": 0.32499999999999996,
        "rougel-41": 0.13636363636363635,
        "rougel-29": 0.3908045977011494,
        "rougel-176": 0.5401459854014599,
        "rougel-24": 0.3888888888888889,
        "rougel-193": 0.16666666666666669,
        "rougel-140": 0.02352941176470588,
        "rougel-8": 0.04651162790697674,
        "rougel-7": 0.06122448979591837,
        "rougel-26": 0.4692737430167597,
        "rougel-68": 0.481675392670157,
        "rougel-74": 0.49382716049382713,
        "rougel-163": 0.5256410256410257,
        "rougel-181": 0.5106382978723405,
        "rougel-60": 0.2846153846153846,
        "rougel-139": 0.5398773006134969,
        "meteor-31": 0.3382561987770009,
        "meteor-6": 0.320924874978929,
        "meteor-87": 0.3562734202556337,
        "meteor-77": 0.48514538558786346,
        "meteor-71": 0.29793398841017893,
        "meteor-41": 0.07472349016853932,
        "meteor-29": 0.480889724310777,
        "meteor-176": 0.3764910582008656,
        "meteor-24": 0.3905467006299421,
        "meteor-193": 0.06830601092896174,
        "meteor-140": 0.007052186177715092,
        "meteor-8": 0.014084507042253521,
        "meteor-7": 0.027700831024930744,
        "meteor-26": 0.5301185506787124,
        "meteor-68": 0.5592655078391275,
        "meteor-74": 0.5548104220553909,
        "meteor-163": 0.48087526053027,
        "meteor-181": 0.3689952860390266,
        "meteor-60": 0.41623872125090355,
        "meteor-139": 0.5269522437310376,
        "ruby-31": 0.33333333333333337,
        "ruby-6": 0.20512820512820518,
        "ruby-87": 0.22330097087378642,
        "ruby-77": 0.2808988764044944,
        "ruby-71": 0.1097560975609756,
        "ruby-41": 0.07692307692307687,
        "ruby-29": 0.23958333333333337,
        "ruby-176": 0.42307692307692313,
        "ruby-24": 0.2647058823529411,
        "ruby-193": 0.10256410256410253,
        "ruby-140": 0.012820512820512775,
        "ruby-8": 0.02564102564102566,
        "ruby-7": 0.038461538461538436,
        "ruby-26": 0.3168316831683168,
        "ruby-68": 0.327433628318584,
        "ruby-74": 0.34523809523809523,
        "ruby-163": 0.3076923076923077,
        "ruby-181": 0.33333333333333337,
        "ruby-60": 0.17582417582417587,
        "ruby-139": 0.4117647058823529,
        "codebertscore_f1-31": 0.8300370573997498,
        "codebertscore_f3-31": 0.8051062822341919,
        "codebertscore_f1-6": 0.7639614939689636,
        "codebertscore_f3-6": 0.7545375227928162,
        "codebertscore_f1-87": 0.7764785885810852,
        "codebertscore_f3-87": 0.7775837182998657,
        "codebertscore_f1-77": 0.8222688436508179,
        "codebertscore_f3-77": 0.8154878616333008,
        "codebertscore_f1-71": 0.7073650360107422,
        "codebertscore_f3-71": 0.6904853582382202,
        "codebertscore_f1-41": 0.6005203723907471,
        "codebertscore_f3-41": 0.5686425566673279,
        "codebertscore_f1-29": 0.7393068075180054,
        "codebertscore_f3-29": 0.7389069199562073,
        "codebertscore_f1-176": 0.826644778251648,
        "codebertscore_f3-176": 0.7986934185028076,
        "codebertscore_f1-24": 0.7616700530052185,
        "codebertscore_f3-24": 0.7507476210594177,
        "codebertscore_f1-193": 0.6433987617492676,
        "codebertscore_f3-193": 0.6338868737220764,
        "codebertscore_f1-140": 0.5306267142295837,
        "codebertscore_f3-140": 0.5136747360229492,
        "codebertscore_f1-8": 0.5764107704162598,
        "codebertscore_f3-8": 0.5546951293945312,
        "codebertscore_f1-7": 0.6604458093643188,
        "codebertscore_f3-7": 0.656701385974884,
        "codebertscore_f1-26": 0.814767062664032,
        "codebertscore_f3-26": 0.8141976594924927,
        "codebertscore_f1-68": 0.7998260855674744,
        "codebertscore_f3-68": 0.8099616765975952,
        "codebertscore_f1-74": 0.846247136592865,
        "codebertscore_f3-74": 0.8443347215652466,
        "codebertscore_f1-163": 0.8073275089263916,
        "codebertscore_f3-163": 0.7907686233520508,
        "codebertscore_f1-181": 0.8474187850952148,
        "codebertscore_f3-181": 0.8260756134986877,
        "codebertscore_f1-60": 0.7738469839096069,
        "codebertscore_f3-60": 0.7956557869911194,
        "codebertscore_f1-139": 0.8275845646858215,
        "codebertscore_f3-139": 0.8166748881340027,
        "codebertscore_s_f1-31": 0.8393136262893677,
        "codebertscore_s_f3-31": 0.8126152753829956,
        "codebertscore_s_f1-6": 0.7796184420585632,
        "codebertscore_s_f3-6": 0.7688813209533691,
        "codebertscore_s_f1-87": 0.7894455790519714,
        "codebertscore_s_f3-87": 0.7896268963813782,
        "codebertscore_s_f1-77": 0.8328274488449097,
        "codebertscore_s_f3-77": 0.8257915377616882,
        "codebertscore_s_f1-71": 0.7304765582084656,
        "codebertscore_s_f3-71": 0.7141152620315552,
        "codebertscore_s_f1-41": 0.6574676036834717,
        "codebertscore_s_f3-41": 0.6130942106246948,
        "codebertscore_s_f1-29": 0.7484992742538452,
        "codebertscore_s_f3-29": 0.7519193291664124,
        "codebertscore_s_f1-176": 0.834595799446106,
        "codebertscore_s_f3-176": 0.8072200417518616,
        "codebertscore_s_f1-24": 0.7762377858161926,
        "codebertscore_s_f3-24": 0.762525737285614,
        "codebertscore_s_f1-193": 0.657356858253479,
        "codebertscore_s_f3-193": 0.6484740972518921,
        "codebertscore_s_f1-140": 0.5118467807769775,
        "codebertscore_s_f3-140": 0.4921303689479828,
        "codebertscore_s_f1-8": 0.5796416997909546,
        "codebertscore_s_f3-8": 0.5573606491088867,
        "codebertscore_s_f1-7": 0.6685634255409241,
        "codebertscore_s_f3-7": 0.663463294506073,
        "codebertscore_s_f1-26": 0.8268147706985474,
        "codebertscore_s_f3-26": 0.8261117935180664,
        "codebertscore_s_f1-68": 0.8165672421455383,
        "codebertscore_s_f3-68": 0.823868453502655,
        "codebertscore_s_f1-74": 0.8586238622665405,
        "codebertscore_s_f3-74": 0.8556852340698242,
        "codebertscore_s_f1-163": 0.8260317444801331,
        "codebertscore_s_f3-163": 0.808470606803894,
        "codebertscore_s_f1-181": 0.8572382926940918,
        "codebertscore_s_f3-181": 0.835875928401947,
        "codebertscore_s_f1-60": 0.7842034697532654,
        "codebertscore_s_f3-60": 0.8036911487579346,
        "codebertscore_s_f1-139": 0.8416274785995483,
        "codebertscore_s_f3-139": 0.8294742703437805,
        "gpt35_nsnr-31": 4,
        "raw_gpt35_nsnr-31": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-87": 4,
        "raw_gpt35_nsnr-87": "4",
        "gpt35_nsnr-77": 4,
        "raw_gpt35_nsnr-77": "4",
        "gpt35_nsnr-71": 4,
        "raw_gpt35_nsnr-71": "4",
        "gpt35_nsnr-41": 2,
        "raw_gpt35_nsnr-41": "2",
        "gpt35_nsnr-29": 4,
        "raw_gpt35_nsnr-29": "4",
        "gpt35_nsnr-176": 4,
        "raw_gpt35_nsnr-176": "4",
        "gpt35_nsnr-24": 4,
        "raw_gpt35_nsnr-24": "4",
        "gpt35_nsnr-193": 3,
        "raw_gpt35_nsnr-193": "3",
        "gpt35_nsnr-140": 0,
        "raw_gpt35_nsnr-140": "0",
        "gpt35_nsnr-8": 0,
        "raw_gpt35_nsnr-8": "0",
        "gpt35_nsnr-7": 0,
        "raw_gpt35_nsnr-7": "0",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-68": 4,
        "raw_gpt35_nsnr-68": "4",
        "gpt35_nsnr-74": 4,
        "raw_gpt35_nsnr-74": "4",
        "gpt35_nsnr-163": 4,
        "raw_gpt35_nsnr-163": "4",
        "gpt35_nsnr-181": 4,
        "raw_gpt35_nsnr-181": "4",
        "gpt35_nsnr-60": 4,
        "raw_gpt35_nsnr-60": "4",
        "gpt35_nsnr-139": 4,
        "raw_gpt35_nsnr-139": "4",
        "gpt35_nswr-31": 4,
        "raw_gpt35_nswr-31": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-87": 4,
        "raw_gpt35_nswr-87": "4",
        "gpt35_nswr-77": 4,
        "raw_gpt35_nswr-77": "4",
        "gpt35_nswr-71": 3,
        "raw_gpt35_nswr-71": "3",
        "gpt35_nswr-41": 2,
        "raw_gpt35_nswr-41": "2",
        "gpt35_nswr-29": 3,
        "raw_gpt35_nswr-29": "3",
        "gpt35_nswr-176": 4,
        "raw_gpt35_nswr-176": "4",
        "gpt35_nswr-24": 4,
        "raw_gpt35_nswr-24": "4",
        "gpt35_nswr-193": 3,
        "raw_gpt35_nswr-193": "3",
        "gpt35_nswr-140": 3,
        "raw_gpt35_nswr-140": "3",
        "gpt35_nswr-8": 2,
        "raw_gpt35_nswr-8": "2",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-26": 4,
        "raw_gpt35_nswr-26": "4",
        "gpt35_nswr-68": 4,
        "raw_gpt35_nswr-68": "4",
        "gpt35_nswr-74": 4,
        "raw_gpt35_nswr-74": "4",
        "gpt35_nswr-163": 3,
        "raw_gpt35_nswr-163": "3",
        "gpt35_nswr-181": 4,
        "raw_gpt35_nswr-181": "4",
        "gpt35_nswr-60": 3,
        "raw_gpt35_nswr-60": "3",
        "gpt35_nswr-139": 4,
        "raw_gpt35_nswr-139": "4"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // This function takes a list l and returns a list l' such that\n    // l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    // to the values of the corresponding indicies of l, but sorted.\n    // >>> sort_third([1, 2, 3])\n    // [1, 2, 3]\n    // >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    // [2, 6, 3, 4, 8, 9, 5]\n    public static ArrayList<Integer> sortThird(ArrayList<Integer> l) {\n",
        "snippet": [
            "        List<Integer> thirds = new ArrayList<>();\n        for (int i = 0; i < l.size(); i += 3) {\n            thirds.add(l.get(i));\n        }\n        Collections.sort(thirds);\n        List<Integer> result = l;\n        for (int i = 0; i < l.size(); i += 3) {\n            result.set(i, thirds.get(i / 3));\n        }\n        return result;\n    }\n}"
        ],
        "simplified": "This function takes a list l and returns a list l' such that l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal to the values of the corresponding indicies of l, but sorted.",
        "task_id": "33",
        "168": "ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                ArrayList<Integer> curr = new ArrayList<Integer>();\n                curr.add(l.get(i));\n                curr.add(l.get(i + 1));\n                curr.add(l.get(i + 2));\n                Collections.sort(curr);\n                result.add(curr.get(0));\n                result.add(curr.get(1));\n                result.add(curr.get(2));\n            } else {\n                result.add(l.get(i));\n            }\n        }\n        return result;",
        "grade-168": {
            "execution": 0
        },
        "28": "ArrayList<Integer> l1 = (ArrayList<Integer>) l.clone();\n        Collections.sort(l1);\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                l.set(i, l1.get(i));\n            }\n        }\n        return l;",
        "grade-28": {
            "execution": 0
        },
        "6": "ArrayList<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                ArrayList<Integer> temp = new ArrayList<>();\n                int j = i;\n                while (j < l.size() && j % 3 == 0) {\n                    temp.add(l.get(j));\n                    j++;\n                }\n                Collections.sort(temp);\n                for (int k = 0; k < temp.size(); k++) {\n                    result.add(temp.get(k));\n                }\n                i = j - 1;\n            } else {\n                result.add(l.get(i));\n            }\n        }\n        return result;",
        "grade-6": {
            "execution": 0
        },
        "196": "if (l.size() == 0) {\n            return l;\n        }\n        for (int i = 0; i < l.size(); i+=3) {\n            // if (i + 2 < l.size()) {\n            if (i + 1 < l.size()) {\n                List<Integer> temp = l.subList(i, i + 3);\n                Collections.sort(temp);\n                l.set(i, temp.get(0));\n                l.set(i + 1, temp.get(1));\n                l.set(i + 2, temp.get(2));\n            }\n        }\n        return l;",
        "grade-196": {
            "execution": 0
        },
        "70": "ArrayList<Integer> list = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                ArrayList<Integer> sublist = new ArrayList<Integer>();\n                sublist.add(l.get(i));\n                if (i + 1 < l.size()) {\n                    sublist.add(l.get(i + 1));\n                }\n                if (i + 2 < l.size()) {\n                    sublist.add(l.get(i + 2));\n                }\n                Collections.sort(sublist);\n                list.add(sublist.get(0));\n                if (i + 1 < l.size()) {\n                    list.add(sublist.get(1));\n                }\n                if (i + 2 < l.size()) {\n                    list.add(sublist.get(2));\n                }\n            } else {\n                list.add(l.get(i));\n            }\n        }\n        return list;",
        "grade-70": {
            "execution": 0
        },
        "62": "ArrayList<Integer> result = new ArrayList<>();\n        ArrayList<Integer> thirds = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) thirds.add(l.get(i));\n            else result.add(l.get(i));\n        }\n        Collections.sort(thirds);\n        int pointer = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) result.add(pointer, thirds.get(pointer));\n            pointer++;\n        }\n        return result;",
        "grade-62": {
            "execution": 0
        },
        "57": "ArrayList<Integer> l_copy = new ArrayList<Integer>(l);\n        int num_entries = l.size();\n        ArrayList<Integer> l_split = new ArrayList<Integer>();\n        ArrayList<Integer> l_not_split = new ArrayList<Integer>();\n        // split l into a sublist l_split of the elements at the indicies of l that are divisible by three, and l_not_split which is the rest of l.\n        for (int i = 0; i < num_entries; i++) {\n            if (i % 3 == 0) {\n                l_split.add(l.get(i));\n            } else {\n                l_not_split.add(l.get(i));\n            }\n        }\n        // sort l_split\n        Collections.sort(l_split);\n        // write l_split back into l_copy\n        int split_index = 0;\n        for (int i = 0; i < num_entries; i++) {\n            if (i % 3 == 0) {\n                l_copy.set(i, l_split.get(split_index));\n                split_index += 1;\n            }\n        }\n        return l_copy;",
        "grade-57": {
            "execution": 1
        },
        "35": "int len = l.size();\n      for (int i = 2; i < len; i+=3) {\n        int n = Math.min(i+3, len);\n        ArrayList<Integer> sub = new ArrayList<Integer>(l.subList(i, n));\n        Collections.sort(sub);\n        for (int j = 0; j < sub.size(); j++) {\n          l.set(i+j, sub.get(j));\n        }\n      }\n      return l;",
        "grade-35": {
            "execution": 0
        },
        "195": "ArrayList<Integer> ret = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            ret.add(l.get(i));\n        }\n        for (int i = 2; i < l.size(); i += 3) {\n            ArrayList<Integer> copy = new ArrayList<Integer>();\n            for (int j = i; j >= i - 2; j--) {\n                copy.add(l.get(j));\n            }\n            Collections.sort(copy);\n            for (int j = i; j >= i - 2; j--) {\n                ret.set(j, copy.get(i - j));\n            }\n        }\n        return ret;",
        "grade-195": {
            "execution": 0
        },
        "26": "ArrayList<Integer> res = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                ArrayList<Integer> sub = new ArrayList<Integer>();\n                while (i < l.size() && i % 3 == 0) {\n                    sub.add(l.get(i));\n                    i++;\n                }\n                Collections.sort(sub);\n                for (int j = 0; j < sub.size(); j++) {\n                    res.add(sub.get(j));\n                }\n                i--;\n            } else {\n                res.add(l.get(i));\n            }\n        }\n        return res;",
        "grade-26": {
            "execution": 0
        },
        "178": "// Your code here\n        // >>> sort_third([1, 2, 3])\n        // [1, 2, 3]\n        // >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n        // [2, 6, 3, 4, 8, 9, 5]\n        ArrayList<Integer> lst = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                ArrayList<Integer> lst2 = new ArrayList<Integer>();\n                for (int j = i; j < i + 3; j++) {\n                    lst2.add(l.get(j));\n                }\n                Collections.sort(lst2);\n                for (int j = i; j < i + 3; j++) {\n                    lst.add(lst2.get(j - i));\n                }\n            } else {\n                lst.add(l.get(i));\n            }\n        }\n        return lst;",
        "grade-178": {
            "execution": 0
        },
        "143": "// Fill in your code here",
        "grade-143": {
            "execution": 0
        },
        "22": "// write your code in Java SE 8\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                ArrayList<Integer> vals = new ArrayList<Integer>();\n                vals.add(l.get(i));\n                vals.add(l.get(i + 1));\n                vals.add(l.get(i + 2));\n                Collections.sort(vals);\n                result.add(vals.get(0));\n                result.add(vals.get(1));\n                result.add(vals.get(2));\n            } else {\n                result.add(l.get(i));\n            }\n        }\n        return result;",
        "grade-22": {
            "execution": 0
        },
        "155": "int lSize = l.size();\n        int i = 0;\n        while (i < lSize) {\n            if (i % 3 == 0) {\n                ArrayList<Integer> index3 = new ArrayList<Integer>();\n                for (int n = i; n < i + 3; n++) {\n                    index3.add(l.get(n));\n                }\n                Collections.sort(index3);\n                for (int n = i; n < i + 3; n++) {\n                    l.set(n, index3.get(n - i));\n                }\n            }\n            i++;\n        }\n        return l;",
        "grade-155": {
            "execution": 0
        },
        "110": "ArrayList<Integer> l2 = new ArrayList<Integer>();\n        ArrayList<Integer> l3 = new ArrayList<Integer>();\n        ArrayList<Integer> l4 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                l2.add(l.get(i));\n            } else {\n                l3.add(l.get(i));\n            }\n        }\n        Collections.sort(l2);\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                l4.add(l2.get(0));\n                l2.remove(0);\n            } else {\n                l4.add(l3.get(0));\n                l3.remove(0);\n            }\n        }\n        return l4;",
        "grade-110": {
            "execution": 1
        },
        "8": "// >>> Enter your implementation here.\n        return l;",
        "grade-8": {
            "execution": 0
        },
        "7": "if (l.size() < 3) return l;\n        // The two lists to be zipped together\n        ArrayList<Integer> l1 = new ArrayList<Integer>();\n        ArrayList<Integer> l2 = new ArrayList<Integer>();\n        // Traverse the list\n        for (int i = 0; i < l.size(); i++) {\n            // If the index is divisible by three, then the value should be sorted\n            if (i % 3 == 0) {\n                l1.add(l.get(i));\n                // Sort the values in l1\n                Collections.sort(l1);\n                // Retrieve the value at index 0 of l1 and add it to l2\n                l2.add(l1.get(0));\n                // Clear l1\n                l1.clear();\n            }\n            // If the index is not divisible by three, then the value should be the same as the value in l\n            else {\n                l2.add(l.get(i));\n            }\n        }\n        return l2;",
        "grade-7": {
            "execution": 0
        },
        "23": "// TODO: Replace the line below with your code\n        return null;",
        "grade-23": {
            "execution": 0
        },
        "55": "ArrayList<Integer> l_prime = new ArrayList<Integer>();\n        int size = l.size();\n        int chunk_size = size / 3;\n        ArrayList<Integer> chunks = new ArrayList<Integer>();\n        ArrayList<Integer> positions = new ArrayList<Integer>();\n        for (int i = 0; i < chunk_size; i++) {\n            int chunk_start = i * 3;\n            ArrayList<Integer> chunk = new ArrayList<Integer>();\n            chunk.add(l.get(chunk_start));\n            chunk.add(l.get(chunk_start + 1));\n            chunk.add(l.get(chunk_start + 2));\n            Collections.sort(chunk);\n            for (int j = 0; j < 3; j++) {\n                l_prime.add(chunk.get(j));\n            }\n        }\n        return l_prime;",
        "grade-55": {
            "execution": 0
        },
        "59": "ArrayList<Integer> lPrime = new ArrayList<Integer>();\n        // Add non-divisible by three indicies here\n        int index = 0;\n        while (index < l.size()) {\n            if (index % 3 != 0) {\n                lPrime.add(l.get(index));\n            }\n            index++;\n        }\n        // Add divisible by three indicies here\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                Integer[] a = new Integer[3];\n                a[0] = l.get(i);\n                a[1] = l.get(i + 1);\n                a[2] = l.get(i + 2);\n                Arrays.sort(a);\n                lPrime.add(a[0]);\n                lPrime.add(a[1]);\n                lPrime.add(a[2]);\n            }\n        }\n        return lPrime;",
        "grade-59": {
            "execution": 0
        },
        "bleu-168": 0.35267193200403063,
        "bleu-28": 0.380781403819499,
        "bleu-6": 0.4069540693193728,
        "bleu-196": 0.33878229010545236,
        "bleu-70": 0.2682099839407411,
        "bleu-62": 0.5568939800384162,
        "bleu-57": 0.2776316595135929,
        "bleu-35": 0.4193180872742005,
        "bleu-195": 0.4279390843416761,
        "bleu-26": 0.39692974640281703,
        "bleu-178": 0.26029632225283444,
        "bleu-143": 4.7339140607106196e-08,
        "bleu-22": 0.3351854293120755,
        "bleu-155": 0.38244886369788034,
        "bleu-110": 0.3607221539881659,
        "bleu-8": 6.831164916770591e-05,
        "bleu-7": 0.2551576214010004,
        "bleu-23": 5.2316517084488514e-05,
        "bleu-55": 0.26124561689975256,
        "bleu-59": 0.25406664334652534,
        "codebleu-168": 0.7000188907979699,
        "codebleu-28": 0.5185507578660395,
        "codebleu-6": 0.7551944856942957,
        "codebleu-196": 0.6900615986154589,
        "codebleu-70": 0.7020602249547468,
        "codebleu-62": 0.7722215796133721,
        "codebleu-57": 0.7303137475751021,
        "codebleu-35": 0.6915075755432064,
        "codebleu-195": 0.771042181945233,
        "codebleu-26": 0.7371699047352939,
        "codebleu-178": 0.7222199123565312,
        "codebleu-143": 0.018018018018018018,
        "codebleu-22": 0.6978889658331031,
        "codebleu-155": 0.7123982458674772,
        "codebleu-110": 0.7416135812607687,
        "codebleu-8": 0.045072650878085915,
        "codebleu-7": 0.696935593236824,
        "codebleu-23": 0.04058280449293032,
        "codebleu-55": 0.7127716972015574,
        "codebleu-59": 0.7098660748588983,
        "chrf-168": 0.5497539433380275,
        "chrf-28": 0.46328189321723184,
        "chrf-6": 0.6419311702411072,
        "chrf-196": 0.44822424232978636,
        "chrf-70": 0.4893682488173827,
        "chrf-62": 0.7754724060733842,
        "chrf-57": 0.4370120514710269,
        "chrf-35": 0.5068617012482313,
        "chrf-195": 0.6088262303105392,
        "chrf-26": 0.5999444804550207,
        "chrf-178": 0.5127695633218831,
        "chrf-143": 0.022525145436572844,
        "chrf-22": 0.5548293537127714,
        "chrf-155": 0.5142709240512874,
        "chrf-110": 0.5534339550792754,
        "chrf-8": 0.06330787024217979,
        "chrf-7": 0.444862950161405,
        "chrf-23": 0.05888633216474549,
        "chrf-55": 0.43682491018244657,
        "chrf-59": 0.43011800859723337,
        "rougel-168": 0.5461254612546126,
        "rougel-28": 0.6153846153846154,
        "rougel-6": 0.5934065934065934,
        "rougel-196": 0.5182186234817813,
        "rougel-70": 0.47706422018348627,
        "rougel-62": 0.7007874015748032,
        "rougel-57": 0.47678018575851383,
        "rougel-35": 0.5753424657534246,
        "rougel-195": 0.6125461254612546,
        "rougel-26": 0.5970149253731344,
        "rougel-178": 0.45731707317073167,
        "rougel-143": 0.017699115044247787,
        "rougel-22": 0.5285714285714286,
        "rougel-155": 0.5569620253164557,
        "rougel-110": 0.560810810810811,
        "rougel-8": 0.10084033613445378,
        "rougel-7": 0.4416403785488959,
        "rougel-23": 0.05,
        "rougel-55": 0.46366782006920415,
        "rougel-59": 0.4536741214057508,
        "meteor-168": 0.5518700027536064,
        "meteor-28": 0.5346504670838916,
        "meteor-6": 0.5942452274659876,
        "meteor-196": 0.48772621699767754,
        "meteor-70": 0.48064654541156754,
        "meteor-62": 0.6621957635198572,
        "meteor-57": 0.6493295918900858,
        "meteor-35": 0.7123659458876493,
        "meteor-195": 0.5858559903356529,
        "meteor-26": 0.5354967781649936,
        "meteor-178": 0.5619589415627363,
        "meteor-143": 0.005202913631633715,
        "meteor-22": 0.5521038590121107,
        "meteor-155": 0.5836133627787634,
        "meteor-110": 0.5330109641051469,
        "meteor-8": 0.04136504653567735,
        "meteor-7": 0.5056826397674391,
        "meteor-23": 0.015495867768595042,
        "meteor-55": 0.567238245628457,
        "meteor-59": 0.4908420972077719,
        "ruby-168": 0.4,
        "ruby-28": 0.41509433962264153,
        "ruby-6": 0.40718562874251496,
        "ruby-196": 0.4042553191489362,
        "ruby-70": 0.33484162895927605,
        "ruby-62": 0.5405405405405406,
        "ruby-57": 0.33640552995391704,
        "ruby-35": 0.38053097345132747,
        "ruby-195": 0.47878787878787876,
        "ruby-26": 0.4135802469135802,
        "ruby-178": 0.28378378378378377,
        "ruby-143": 0.009433962264150941,
        "ruby-22": 0.3793103448275862,
        "ruby-155": 0.3740458015267175,
        "ruby-110": 0.42105263157894735,
        "ruby-8": 0.05660377358490565,
        "ruby-7": 0.3033175355450237,
        "ruby-23": 0.018867924528301883,
        "ruby-55": 0.28415300546448086,
        "ruby-59": 0.3285024154589372,
        "codebertscore_f1-168": 0.8197540044784546,
        "codebertscore_f3-168": 0.8366474509239197,
        "codebertscore_f1-28": 0.8362102508544922,
        "codebertscore_f3-28": 0.8316882252693176,
        "codebertscore_f1-6": 0.8276064991950989,
        "codebertscore_f3-6": 0.8427541255950928,
        "codebertscore_f1-196": 0.8071436285972595,
        "codebertscore_f3-196": 0.8163298964500427,
        "codebertscore_f1-70": 0.7924001216888428,
        "codebertscore_f3-70": 0.8223291039466858,
        "codebertscore_f1-62": 0.871561586856842,
        "codebertscore_f3-62": 0.8843122124671936,
        "codebertscore_f1-57": 0.7689659595489502,
        "codebertscore_f3-57": 0.8102092146873474,
        "codebertscore_f1-35": 0.837846577167511,
        "codebertscore_f3-35": 0.8449013233184814,
        "codebertscore_f1-195": 0.8648813962936401,
        "codebertscore_f3-195": 0.873674213886261,
        "codebertscore_f1-26": 0.8385518789291382,
        "codebertscore_f3-26": 0.8520052433013916,
        "codebertscore_f1-178": 0.7740347981452942,
        "codebertscore_f3-178": 0.8078334331512451,
        "codebertscore_f1-143": 0.5246887803077698,
        "codebertscore_f3-143": 0.5132943987846375,
        "codebertscore_f1-22": 0.8007411956787109,
        "codebertscore_f3-22": 0.8265342116355896,
        "codebertscore_f1-155": 0.8239331245422363,
        "codebertscore_f3-155": 0.8334030508995056,
        "codebertscore_f1-110": 0.8059015870094299,
        "codebertscore_f3-110": 0.8304923176765442,
        "codebertscore_f1-8": 0.5987803339958191,
        "codebertscore_f3-8": 0.5780691504478455,
        "codebertscore_f1-7": 0.7538973093032837,
        "codebertscore_f3-7": 0.8069759607315063,
        "codebertscore_f1-23": 0.5958016514778137,
        "codebertscore_f3-23": 0.5816963315010071,
        "codebertscore_f1-55": 0.8030723929405212,
        "codebertscore_f3-55": 0.8229414224624634,
        "codebertscore_f1-59": 0.7650533318519592,
        "codebertscore_f3-59": 0.8007737398147583,
        "codebertscore_s_f1-168": 0.8379296064376831,
        "codebertscore_s_f3-168": 0.8544899225234985,
        "codebertscore_s_f1-28": 0.8516309857368469,
        "codebertscore_s_f3-28": 0.8444441556930542,
        "codebertscore_s_f1-6": 0.8528084754943848,
        "codebertscore_s_f3-6": 0.8627511262893677,
        "codebertscore_s_f1-196": 0.8162030577659607,
        "codebertscore_s_f3-196": 0.8298206329345703,
        "codebertscore_s_f1-70": 0.8274559378623962,
        "codebertscore_s_f3-70": 0.8494913578033447,
        "codebertscore_s_f1-62": 0.8804919123649597,
        "codebertscore_s_f3-62": 0.8894513845443726,
        "codebertscore_s_f1-57": 0.8092671632766724,
        "codebertscore_s_f3-57": 0.8452411890029907,
        "codebertscore_s_f1-35": 0.853257417678833,
        "codebertscore_s_f3-35": 0.8611122965812683,
        "codebertscore_s_f1-195": 0.873218834400177,
        "codebertscore_s_f3-195": 0.8852848410606384,
        "codebertscore_s_f1-26": 0.8595736026763916,
        "codebertscore_s_f3-26": 0.8680893778800964,
        "codebertscore_s_f1-178": 0.809403121471405,
        "codebertscore_s_f3-178": 0.8408353924751282,
        "codebertscore_s_f1-143": 0.5275904536247253,
        "codebertscore_s_f3-143": 0.5225324034690857,
        "codebertscore_s_f1-22": 0.8194714188575745,
        "codebertscore_s_f3-22": 0.8430340886116028,
        "codebertscore_s_f1-155": 0.8335728049278259,
        "codebertscore_s_f3-155": 0.8450804948806763,
        "codebertscore_s_f1-110": 0.8365159034729004,
        "codebertscore_s_f3-110": 0.8493059277534485,
        "codebertscore_s_f1-8": 0.6215247511863708,
        "codebertscore_s_f3-8": 0.6190242171287537,
        "codebertscore_s_f1-7": 0.7886518836021423,
        "codebertscore_s_f3-7": 0.8290697932243347,
        "codebertscore_s_f1-23": 0.5764298439025879,
        "codebertscore_s_f3-23": 0.5581278800964355,
        "codebertscore_s_f1-55": 0.8307573795318604,
        "codebertscore_s_f3-55": 0.8509583473205566,
        "codebertscore_s_f1-59": 0.8016837239265442,
        "codebertscore_s_f3-59": 0.8271510004997253,
        "gpt35_nsnr-168": 3,
        "raw_gpt35_nsnr-168": "3",
        "gpt35_nsnr-28": 3,
        "raw_gpt35_nsnr-28": "3",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-196": 3,
        "raw_gpt35_nsnr-196": "3",
        "gpt35_nsnr-70": 3,
        "raw_gpt35_nsnr-70": "3",
        "gpt35_nsnr-62": 3,
        "raw_gpt35_nsnr-62": "3",
        "gpt35_nsnr-57": 3,
        "raw_gpt35_nsnr-57": "3",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-195": 3,
        "raw_gpt35_nsnr-195": "3",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-178": 4,
        "raw_gpt35_nsnr-178": "4",
        "gpt35_nsnr-143": 3,
        "raw_gpt35_nsnr-143": "3",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-155": 3,
        "raw_gpt35_nsnr-155": "3",
        "gpt35_nsnr-110": 4,
        "raw_gpt35_nsnr-110": "4",
        "gpt35_nsnr-8": 0,
        "raw_gpt35_nsnr-8": "3 - The code snippet returns the input list without any modification. It does not implement the required functionality of sorting the values at the indices that are divisible by three.",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-23": 0,
        "raw_gpt35_nsnr-23": "0",
        "gpt35_nsnr-55": 2,
        "raw_gpt35_nsnr-55": "2",
        "gpt35_nsnr-59": 3,
        "raw_gpt35_nsnr-59": "3",
        "gpt35_nswr-168": 3,
        "raw_gpt35_nswr-168": "3",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-196": 3,
        "raw_gpt35_nswr-196": "3",
        "gpt35_nswr-70": 2,
        "raw_gpt35_nswr-70": "2",
        "gpt35_nswr-62": 3,
        "raw_gpt35_nswr-62": "3",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-195": 2,
        "raw_gpt35_nswr-195": "2",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-178": 3,
        "raw_gpt35_nswr-178": "3",
        "gpt35_nswr-143": 3,
        "raw_gpt35_nswr-143": "3",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-155": 3,
        "raw_gpt35_nswr-155": "3",
        "gpt35_nswr-110": 3,
        "raw_gpt35_nswr-110": "3",
        "gpt35_nswr-8": 2,
        "raw_gpt35_nswr-8": "2",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 2,
        "raw_gpt35_nswr-23": "2",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Create a function that returns True if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and False otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    // check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    // check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    // check_if_last_char_is_a_letter(\"\") \u279e False\n    public static boolean checkIfLastCharIsALetter(String txt) {\n",
        "snippet": [
            "        String[] words = txt.split(\" \", -1);\n        String check = words[words.length - 1];\n        return check.length() == 1 && Character.isLetter(check.charAt(0));\n    }\n}"
        ],
        "simplified": "Create a function that returns True if the last character of a given string is an alphabetical character and is not a part of a word, and False otherwise. Note: \"word\" is a group of characters separated by space.",
        "task_id": "134",
        "177": "// Return the answer\n        if (txt.equals(\"\")) return false;\n        if (txt.trim().length() == 0) return false;\n        char last = txt.trim().charAt(txt.trim().length() - 1);\n        if (Character.isAlphabetic(last)) {\n            return true;\n        }\n        return false;",
        "grade-177": {
            "execution": 0
        },
        "30": "if (txt.length() == 0) {\n            return false;\n        }\n        char last = txt.charAt(txt.length() - 1);\n        return last >= 'a' && last <= 'z' && !txt.substring(0, txt.length() - 1).contains(last + \"\");",
        "grade-30": {
            "execution": 0
        },
        "6": "txt = txt.trim();\n        return txt.length() > 0 && !txt.substring(txt.length() - 1).matches(\"\\\\w\");",
        "grade-6": {
            "execution": 0
        },
        "75": "if (txt.length() == 0) return false;\n        String lastChar = txt.substring(txt.length() - 1);\n        String regex = \"[A-Za-z]\";\n        return lastChar.matches(regex) && !lastChar.equals(\" \");",
        "grade-75": {
            "execution": 0
        },
        "66": "char lastChar = txt.charAt(txt.length() - 1);\n        String letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n        return (letters.indexOf(lastChar) >= 0 && txt.lastIndexOf(\" \") == txt.length() - 2);",
        "grade-66": {
            "execution": 0
        },
        "60": "// if the length of the string is 1, return true\n        if (txt.length() == 1) {\n            return true;\n        }\n        // check if the last character is an alphabetical character\n        boolean isLetter = Character.isLetter(txt.charAt(txt.length() - 1));\n        // check if the last character is part of a word\n        boolean isPartOfWord = Character.isLetter(txt.charAt(txt.length() - 2));\n        return isLetter && !isPartOfWord;",
        "grade-60": {
            "execution": 0
        },
        "37": "if (txt.isEmpty()) {\n            return false;\n        }\n        if (txt.charAt(txt.length() - 1) != ' ') {\n            return false;\n        }\n        String last = txt.substring(txt.length() - 2);\n        if (last.length() == 1) {\n            return false;\n        }\n        if (last.charAt(0) == ' ') {\n            return true;\n        }\n        return false;",
        "grade-37": {
            "execution": 0
        },
        "27": "if (txt.length() > 0) {\n            return Character.isLetter(txt.charAt(txt.length() - 1)) &&\n                !txt.contains(\" \" + txt.charAt(txt.length() - 1));\n        }\n        return false;",
        "grade-27": {
            "execution": 0
        },
        "189": "String lastChar = txt.substring(txt.length() - 1);\n        if(lastChar.matches(\"[a-zA-Z]\")) {\n            return true;\n        }\n        return false;",
        "grade-189": {
            "execution": 0
        },
        "152": "if (txt.length() == 0) {\n            return false;\n        }\n        String[] words = txt.split(\" \");\n        String lastWord = words[words.length - 1];\n        if (lastWord.length() == 0) {\n            return false;\n        }\n        String lastCharacter = lastWord.substring(lastWord.length() - 1);\n        return !Character.isLetter(lastCharacter.charAt(0));",
        "grade-152": {
            "execution": 0
        },
        "23": "return txt.isEmpty() ? false : Character.isLetter(txt.charAt(txt.length() - 1)) && !Character.isLetter(txt.charAt(txt.length() - 2));",
        "grade-23": {
            "execution": 0
        },
        "165": "if (txt.length() == 0) {\n            return false;\n        }\n        txt = txt.trim();\n        String[] words = txt.split(\" \");\n        char lastChar = words[words.length - 1].charAt(words[words.length - 1].length() - 1);\n        return Character.isLetter(lastChar);",
        "grade-165": {
            "execution": 0
        },
        "117": "char[] tmp = txt.toCharArray();\n        if (tmp.length == 0) {\n            return false;\n        }\n        if (Character.isLetter(tmp[tmp.length - 1])) {\n            return true;\n        }\n        return false;",
        "grade-117": {
            "execution": 0
        },
        "8": "if (txt.isEmpty()) {\n            return false;\n        }\n        String tmp = txt.trim();\n        if (Character.isLetter(tmp.charAt(tmp.length() - 1))) {\n            return true;\n        }\n        return false;",
        "grade-8": {
            "execution": 0
        },
        "7": "// Given a string, return true if the last character is an alphabetical character and is not a part of a word and false otherwise.\n        // A \"word\" is a group of characters separated by space.\n        // Examples:\n        // checkIfLastCharIsALetter(\"apple pie\") \u279e false\n        // checkIfLastCharIsALetter(\"apple pi e\") \u279e true\n        // checkIfLastCharIsALetter(\"apple pi e \") \u279e false\n        // checkIfLastCharIsALetter(\"\") \u279e false\n        if (txt.equals(\"\")) return false;\n        if (txt.endsWith(\" \")) return false;\n        String[] words = txt.split(\" \");\n        String lastWord = words[words.length - 1];\n        String lastChar = lastWord.substring(lastWord.length() - 1);\n        return lastChar.matches(\"[a-zA-Z]\");",
        "grade-7": {
            "execution": 0
        },
        "24": "return txt.isEmpty() ? false : txt.trim().charAt(txt.trim().length() - 1) >= 'a' && txt.trim().charAt(txt.trim().length() - 1) <= 'z';",
        "grade-24": {
            "execution": 0
        },
        "58": "if (txt.isEmpty()) {\n            return false;\n        }\n        int lastIndex = txt.length() - 1;\n        while (lastIndex >= 0 && txt.charAt(lastIndex) == ' ') {\n            lastIndex--;\n        }\n        if (lastIndex < 0) {\n            return false;\n        }\n        if (Character.isAlphabetic(txt.charAt(lastIndex))) {\n            return true;\n        }\n        return false;",
        "grade-58": {
            "execution": 0
        },
        "63": "// Pattern pattern = Pattern.compile(\"[\\\\W&&[^\\\\s]]\\\\z\");\n        // return pattern.matcher(txt).find();\n        return txt.matches(\"[\\\\w\\\\s]*[\\\\W&&[^\\\\s]]\\\\z\");",
        "grade-63": {
            "execution": 0
        },
        "139": "// return txt.matches(\".*[a-zA-Z]\\\\s+$\");\n        // return txt.matches(\".*[a-zA-Z]\\\\b.*\");\n        // return txt.matches(\".*[a-zA-Z]\\\\s+.*\");\n        return txt.matches(\".*[a-zA-Z]$\");",
        "grade-139": {
            "execution": 0
        },
        "168": "int len = txt.length();\n        if (len == 0) {\n            return false;\n        }\n        char lastChar = txt.charAt(len - 1);\n        return !txt.endsWith(\" \") && Character.isLetter(lastChar);",
        "grade-168": {
            "execution": 0
        },
        "bleu-177": 0.1803090304712823,
        "bleu-30": 0.19084152284724581,
        "bleu-6": 0.1101851550881566,
        "bleu-75": 0.20911556898119682,
        "bleu-66": 0.22116325852346674,
        "bleu-60": 0.14954219322264856,
        "bleu-37": 0.170938255145222,
        "bleu-27": 0.24349471760093494,
        "bleu-189": 0.1353246529727994,
        "bleu-152": 0.38556494072210873,
        "bleu-23": 0.21391291773879395,
        "bleu-165": 0.4131028510562663,
        "bleu-117": 0.21546875054755302,
        "bleu-8": 0.21770823142682566,
        "bleu-7": 0.13174813896322923,
        "bleu-24": 0.12549310621989482,
        "bleu-58": 0.10858882461573147,
        "bleu-63": 0.028929839558229344,
        "bleu-139": 0.02059383751907633,
        "bleu-168": 0.30515822712553764,
        "codebleu-177": 0.4827957678874248,
        "codebleu-30": 0.553281713477086,
        "codebleu-6": 0.39497902813329355,
        "codebleu-75": 0.5196011988306046,
        "codebleu-66": 0.5376246590003048,
        "codebleu-60": 0.5493858095542565,
        "codebleu-37": 0.5398877372821551,
        "codebleu-27": 0.49151602521852406,
        "codebleu-189": 0.3643179519995516,
        "codebleu-152": 0.6777802794370745,
        "codebleu-23": 0.43013653025781845,
        "codebleu-165": 0.6476547942334715,
        "codebleu-117": 0.5244634325955058,
        "codebleu-8": 0.44896067286870617,
        "codebleu-7": 0.6061616539944157,
        "codebleu-24": 0.4504058947389805,
        "codebleu-58": 0.5307181464215396,
        "codebleu-63": 0.3008412418215166,
        "codebleu-139": 0.28848095446029154,
        "codebleu-168": 0.5138502124635678,
        "chrf-177": 0.3268885559280904,
        "chrf-30": 0.30645898211012057,
        "chrf-6": 0.2438686145731336,
        "chrf-75": 0.3357298344698505,
        "chrf-66": 0.3369436692093914,
        "chrf-60": 0.3743485173437637,
        "chrf-37": 0.31318781057467104,
        "chrf-27": 0.3757784951104959,
        "chrf-189": 0.2605667591289694,
        "chrf-152": 0.6106717207756884,
        "chrf-23": 0.35869658697846823,
        "chrf-165": 0.6213268789352898,
        "chrf-117": 0.35669676778295295,
        "chrf-8": 0.3597393073524249,
        "chrf-7": 0.40047747943952106,
        "chrf-24": 0.2511145447559176,
        "chrf-58": 0.274034518142513,
        "chrf-63": 0.1707040582570973,
        "chrf-139": 0.1452898176967223,
        "chrf-168": 0.38484175754573463,
        "rougel-177": 0.3582089552238806,
        "rougel-30": 0.3565891472868217,
        "rougel-6": 0.4166666666666667,
        "rougel-75": 0.4201680672268907,
        "rougel-66": 0.43478260869565216,
        "rougel-60": 0.32142857142857145,
        "rougel-37": 0.40540540540540543,
        "rougel-27": 0.3826086956521739,
        "rougel-189": 0.3434343434343434,
        "rougel-152": 0.5866666666666668,
        "rougel-23": 0.4485981308411215,
        "rougel-165": 0.5074626865671641,
        "rougel-117": 0.4112149532710281,
        "rougel-8": 0.42592592592592593,
        "rougel-7": 0.2578125,
        "rougel-24": 0.35000000000000003,
        "rougel-58": 0.38095238095238093,
        "rougel-63": 0.25757575757575757,
        "rougel-139": 0.2597402597402597,
        "rougel-168": 0.4324324324324324,
        "meteor-177": 0.3798277357035672,
        "meteor-30": 0.4684312761368781,
        "meteor-6": 0.3579043557721596,
        "meteor-75": 0.4952514630895098,
        "meteor-66": 0.4960516071627182,
        "meteor-60": 0.4992324561403509,
        "meteor-37": 0.47776195942219113,
        "meteor-27": 0.4512667769810626,
        "meteor-189": 0.3209250406464607,
        "meteor-152": 0.7238516654896423,
        "meteor-23": 0.3877364474126031,
        "meteor-165": 0.6190741707585219,
        "meteor-117": 0.4578666567175316,
        "meteor-8": 0.3479014598540145,
        "meteor-7": 0.4746268170262695,
        "meteor-24": 0.326975248996581,
        "meteor-58": 0.49373882377243483,
        "meteor-63": 0.32613648354389096,
        "meteor-139": 0.2912097591051217,
        "meteor-168": 0.4545427608429941,
        "ruby-177": 0.25316455696202533,
        "ruby-30": 0.18918918918918914,
        "ruby-6": 0.23636363636363633,
        "ruby-75": 0.234375,
        "ruby-66": 0.25,
        "ruby-60": 0.22123893805309736,
        "ruby-37": 0.32258064516129037,
        "ruby-27": 0.19999999999999996,
        "ruby-189": 0.18181818181818177,
        "ruby-152": 0.41052631578947374,
        "ruby-23": 0.23636363636363633,
        "ruby-165": 0.2911392405063291,
        "ruby-117": 0.21818181818181814,
        "ruby-8": 0.1454545454545455,
        "ruby-7": 0.12935323383084574,
        "ruby-24": 0.15384615384615385,
        "ruby-58": 0.2282608695652174,
        "ruby-63": 0.1428571428571429,
        "ruby-139": 0.1515151515151515,
        "ruby-168": 0.2142857142857143,
        "codebertscore_f1-177": 0.7627807259559631,
        "codebertscore_f3-177": 0.7817056775093079,
        "codebertscore_f1-30": 0.7891569137573242,
        "codebertscore_f3-30": 0.7942119836807251,
        "codebertscore_f1-6": 0.7880866527557373,
        "codebertscore_f3-6": 0.7794598340988159,
        "codebertscore_f1-75": 0.7784953117370605,
        "codebertscore_f3-75": 0.7944478392601013,
        "codebertscore_f1-66": 0.7446102499961853,
        "codebertscore_f3-66": 0.7908964157104492,
        "codebertscore_f1-60": 0.7589117884635925,
        "codebertscore_f3-60": 0.7797614336013794,
        "codebertscore_f1-37": 0.7612919211387634,
        "codebertscore_f3-37": 0.7736733555793762,
        "codebertscore_f1-27": 0.821309506893158,
        "codebertscore_f3-27": 0.8105932474136353,
        "codebertscore_f1-189": 0.7676059603691101,
        "codebertscore_f3-189": 0.7835681438446045,
        "codebertscore_f1-152": 0.8207579255104065,
        "codebertscore_f3-152": 0.8429273962974548,
        "codebertscore_f1-23": 0.8140493631362915,
        "codebertscore_f3-23": 0.7990686893463135,
        "codebertscore_f1-165": 0.8212758898735046,
        "codebertscore_f3-165": 0.8291513323783875,
        "codebertscore_f1-117": 0.7988296151161194,
        "codebertscore_f3-117": 0.8042565584182739,
        "codebertscore_f1-8": 0.8123232126235962,
        "codebertscore_f3-8": 0.8241020441055298,
        "codebertscore_f1-7": 0.6763227581977844,
        "codebertscore_f3-7": 0.7154468297958374,
        "codebertscore_f1-24": 0.7622385621070862,
        "codebertscore_f3-24": 0.7659589648246765,
        "codebertscore_f1-58": 0.7598507404327393,
        "codebertscore_f3-58": 0.7805002927780151,
        "codebertscore_f1-63": 0.7003133296966553,
        "codebertscore_f3-63": 0.6994709372520447,
        "codebertscore_f1-139": 0.6685290932655334,
        "codebertscore_f3-139": 0.6669957637786865,
        "codebertscore_f1-168": 0.8226281404495239,
        "codebertscore_f3-168": 0.8280837535858154,
        "codebertscore_s_f1-177": 0.915317714214325,
        "codebertscore_s_f3-177": 0.932637631893158,
        "codebertscore_s_f1-30": 0.9297929406166077,
        "codebertscore_s_f3-30": 0.9393322467803955,
        "codebertscore_s_f1-6": 0.9446505904197693,
        "codebertscore_s_f3-6": 0.9411256313323975,
        "codebertscore_s_f1-75": 0.9240617752075195,
        "codebertscore_s_f3-75": 0.9382475018501282,
        "codebertscore_s_f1-66": 0.8930327296257019,
        "codebertscore_s_f3-66": 0.9326117038726807,
        "codebertscore_s_f1-60": 0.8993130326271057,
        "codebertscore_s_f3-60": 0.9310517311096191,
        "codebertscore_s_f1-37": 0.9209362268447876,
        "codebertscore_s_f3-37": 0.9325776100158691,
        "codebertscore_s_f1-27": 0.9466339349746704,
        "codebertscore_s_f3-27": 0.9477214217185974,
        "codebertscore_s_f1-189": 0.9329791069030762,
        "codebertscore_s_f3-189": 0.9383012652397156,
        "codebertscore_s_f1-152": 0.9347953200340271,
        "codebertscore_s_f3-152": 0.9512569308280945,
        "codebertscore_s_f1-23": 0.9489161372184753,
        "codebertscore_s_f3-23": 0.9459109902381897,
        "codebertscore_s_f1-165": 0.936779797077179,
        "codebertscore_s_f3-165": 0.9452704787254333,
        "codebertscore_s_f1-117": 0.9416965246200562,
        "codebertscore_s_f3-117": 0.941983699798584,
        "codebertscore_s_f1-8": 0.9444799423217773,
        "codebertscore_s_f3-8": 0.9471232295036316,
        "codebertscore_s_f1-7": 0.8537944555282593,
        "codebertscore_s_f3-7": 0.8930245041847229,
        "codebertscore_s_f1-24": 0.9278003573417664,
        "codebertscore_s_f3-24": 0.9362040758132935,
        "codebertscore_s_f1-58": 0.9120620489120483,
        "codebertscore_s_f3-58": 0.9325524568557739,
        "codebertscore_s_f1-63": 0.9049937129020691,
        "codebertscore_s_f3-63": 0.9132688641548157,
        "codebertscore_s_f1-139": 0.8717561364173889,
        "codebertscore_s_f3-139": 0.9023975729942322,
        "codebertscore_s_f1-168": 0.9457110166549683,
        "codebertscore_s_f3-168": 0.9486087560653687,
        "gpt35_nsnr-177": 4,
        "raw_gpt35_nsnr-177": "4",
        "gpt35_nsnr-30": 3,
        "raw_gpt35_nsnr-30": "3",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-75": 3,
        "raw_gpt35_nsnr-75": "3",
        "gpt35_nsnr-66": 3,
        "raw_gpt35_nsnr-66": "3",
        "gpt35_nsnr-60": 4,
        "raw_gpt35_nsnr-60": "4",
        "gpt35_nsnr-37": 2,
        "raw_gpt35_nsnr-37": "2",
        "gpt35_nsnr-27": 3,
        "raw_gpt35_nsnr-27": "3",
        "gpt35_nsnr-189": 3,
        "raw_gpt35_nsnr-189": "3",
        "gpt35_nsnr-152": 4,
        "raw_gpt35_nsnr-152": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-165": 4,
        "raw_gpt35_nsnr-165": "4",
        "gpt35_nsnr-117": 3,
        "raw_gpt35_nsnr-117": "3",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-24": 4,
        "raw_gpt35_nsnr-24": "4",
        "gpt35_nsnr-58": 4,
        "raw_gpt35_nsnr-58": "4",
        "gpt35_nsnr-63": 4,
        "raw_gpt35_nsnr-63": "4",
        "gpt35_nsnr-139": 3,
        "raw_gpt35_nsnr-139": "3",
        "gpt35_nsnr-168": 4,
        "raw_gpt35_nsnr-168": "4",
        "gpt35_nswr-177": 3,
        "raw_gpt35_nswr-177": "3",
        "gpt35_nswr-30": 3,
        "raw_gpt35_nswr-30": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-75": 3,
        "raw_gpt35_nswr-75": "3",
        "gpt35_nswr-66": 2,
        "raw_gpt35_nswr-66": "2",
        "gpt35_nswr-60": 3,
        "raw_gpt35_nswr-60": "3",
        "gpt35_nswr-37": 1,
        "raw_gpt35_nswr-37": "1",
        "gpt35_nswr-27": 3,
        "raw_gpt35_nswr-27": "3",
        "gpt35_nswr-189": 3,
        "raw_gpt35_nswr-189": "3",
        "gpt35_nswr-152": 3,
        "raw_gpt35_nswr-152": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-165": 3,
        "raw_gpt35_nswr-165": "3",
        "gpt35_nswr-117": 3,
        "raw_gpt35_nswr-117": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-24": 3,
        "raw_gpt35_nswr-24": "3",
        "gpt35_nswr-58": 3,
        "raw_gpt35_nswr-58": "3",
        "gpt35_nswr-63": 3,
        "raw_gpt35_nswr-63": "3",
        "gpt35_nswr-139": 3,
        "raw_gpt35_nswr-139": "3",
        "gpt35_nswr-168": 3,
        "raw_gpt35_nswr-168": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> how_many_times('', 'a')\n    // 0\n    // >>> how_many_times('aaa', 'a')\n    // 3\n    // >>> how_many_times('aaaa', 'aa')\n    // 3\n    public static int howManyTimes(String string, String substring) {\n",
        "snippet": [
            "        int times = 0;\n\n        for (int i = 0; i < string.length() - substring.length() + 1; i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                times += 1;\n            }\n        }\n\n        return times;\n    }\n}"
        ],
        "simplified": "Find how many times a given substring can be found in the original string. Count overlaping cases.",
        "task_id": "18",
        "31": "if (string.length() == 0 || substring.length() == 0) {\n            return 0;\n        }\n        else {\n            return (string.length() - string.replace(substring, \"\").length()) / substring.length();\n        }",
        "grade-31": {
            "execution": 0
        },
        "6": "int count = 0;\n        if (string.isEmpty() || substring.isEmpty()) {\n            return count;\n        }\n        // string = \"aaa\"\n        // substring = \"aa\"\n        // index(0) = \"a\"\n        // index(1) = \"a\"\n        // index(2) = \"a\"\n        // index(3) = \"\"\n        for (int index = 0; index < string.length(); index++) {\n            // string = \"aaa\"\n            // substring = \"aa\"\n            // index(0) = \"a\"\n            // substringAtIndex(0) = \"aa\"\n            String substringAtIndex = string.substring(index, index + substring.length());\n            if (substringAtIndex.equals(substring)) {\n                count++;\n            }\n        }\n        return count;",
        "grade-6": {
            "execution": 0
        },
        "84": "int count = 0;\n        int index = 0;\n        while (index >= 0) {\n            index = string.indexOf(substring, index);\n            if (index >= 0) {\n                count++;\n                index++;\n            }\n        }\n        return count;",
        "grade-84": {
            "execution": 1
        },
        "73": "int count = 0;\n        int endIndex = substring.length();\n        for (int i = 0; i < string.length(); i++) {\n            if (string.substring(i, endIndex).equals(substring)) {\n                count++;\n            }\n            endIndex++;\n        }\n        return count;",
        "grade-73": {
            "execution": 0
        },
        "65": "int count = 0;\n        int index = 0;\n        while (index != -1) {\n            index = string.indexOf(substring, index);\n            if (index != -1) {\n                count++;\n                index += substring.length();\n            }\n        }\n        return count;",
        "grade-65": {
            "execution": 0
        },
        "40": "if (string.isEmpty() || substring.isEmpty()) {\n            return 0;\n        }\n        int result = 0;\n        int index = string.indexOf(substring);\n        while (index != -1) {\n            result += 1;\n            index = string.indexOf(substring, index + 1);\n        }\n        return result;",
        "grade-40": {
            "execution": 1
        },
        "29": "// Your code here\n        if (string.length() < substring.length()) {\n            return 0;\n        } else if (string.length() == substring.length()) {\n            return string.equals(substring) ? 1 : 0;\n        } else {\n            if (string.substring(0, substring.length()).equals(substring)) {\n                return 1 + howManyTimes(string.substring(1), substring);\n            } else {\n                return howManyTimes(string.substring(1), substring);\n            }\n        }",
        "grade-29": {
            "execution": 1
        },
        "176": "if (string.length() < substring.length()) return 0;\n        int count = 0;\n        for (int i = 0; i <= string.length() - substring.length(); i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                count++;\n            }\n        }\n        return count;",
        "grade-176": {
            "execution": 1
        },
        "23": "// Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        int count = 0;\n        int index = 0;\n        while ((index = string.indexOf(substring, index)) != -1) {\n            count++;\n            index += substring.length();\n        }\n        return count;",
        "grade-23": {
            "execution": 0
        },
        "193": "int count = 0;\n        int start = 0;\n        while(start <= string.length() - substring.length()) {\n            if(string.substring(start, start + substring.length()).equals(substring)) {\n                count += 1;\n                start += substring.length();\n            } else {\n                start += 1;\n            }\n        }\n        return count;",
        "grade-193": {
            "execution": 0
        },
        "132": "int count = 0;\n        int index = string.indexOf(substring);\n        while (index != -1) {\n            count += 1;\n            index = string.indexOf(substring, index + 1);\n        }\n        return count;",
        "grade-132": {
            "execution": 1
        },
        "8": "int total = 0;\n        for (int i = 0; i < string.length(); i++) {\n            if (string.substring(i).startsWith(substring)) {\n                total++;\n            }\n        }\n        return total;",
        "grade-8": {
            "execution": 1
        },
        "7": "int number_of_times = 0;\n        int step = substring.length();\n        while (string.contains(substring)) {\n            string = string.substring(string.indexOf(substring) + step);\n            number_of_times++;\n        }\n        return number_of_times;",
        "grade-7": {
            "execution": 0
        },
        "26": "int count = 0;\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == substring.charAt(0)) {\n                if (string.substring(i, i + substring.length()).equals(substring)) {\n                    count++;\n                }\n            }\n        }\n        return count;",
        "grade-26": {
            "execution": 0
        },
        "63": "int n = string.length();\n        int m = substring.length();\n        int result = 0;\n        for (int i = 0; i < n; i++) {\n            if (string.substring(i, i + m).equals(substring)) {\n                result++;\n            }\n        }\n        return result;",
        "grade-63": {
            "execution": 0
        },
        "69": "int occurences = 0;\n        int fromIndex = 0;\n        while (fromIndex < string.length()) {\n            int index = string.indexOf(substring, fromIndex);\n            if (index == -1) {\n                break;\n            }\n            occurences++;\n            fromIndex = index + 1;\n        }\n        return occurences;",
        "grade-69": {
            "execution": 1
        },
        "163": "int count = 0;\n        for (int i = 0; i < string.length(); ++i) {\n            if (string.substring(i).startsWith(substring)) {\n                ++count;\n            }\n        }\n        return count;",
        "grade-163": {
            "execution": 1
        },
        "182": "int cnt = 0;\n        for (int i = 0; i < string.length(); i++) {\n            int index = string.indexOf(substring, i);\n            if (index == -1) {\n                break;\n            }\n            cnt++;\n            i = index;\n        }\n        return cnt;",
        "grade-182": {
            "execution": 1
        },
        "57": "if (string.isEmpty() || substring.isEmpty()) {\n            return 0;\n        }\n\n        // Guard against substrings of length > string length.\n        int maxLength = string.length() - substring.length() + 1;\n        int count = 0;\n        for (int i = 0; i < maxLength; i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                count++;\n            }\n        }\n        return count;",
        "grade-57": {
            "execution": 1
        },
        "131": "if (string.equals(\"\") || substring.equals(\"\")) {\n            return 0;\n        }\n        int occurrences = 0;\n        for (int i = 0; i < string.length(); i++) {\n            if (string.substring(i).startsWith(substring)) {\n                occurrences++;\n            }\n        }\n        return occurrences;",
        "grade-131": {
            "execution": 1
        },
        "bleu-31": 0.27893437574717317,
        "bleu-6": 0.16917529673554277,
        "bleu-84": 0.09247601967962121,
        "bleu-73": 0.5944329218320236,
        "bleu-65": 0.1641713431496137,
        "bleu-40": 0.16379705262600036,
        "bleu-29": 0.25359985849220235,
        "bleu-176": 0.640003867146345,
        "bleu-23": 0.10387617341406287,
        "bleu-193": 0.5079549861025234,
        "bleu-132": 0.09057428954700346,
        "bleu-8": 0.49100714254421013,
        "bleu-7": 0.19697161581841727,
        "bleu-26": 0.623519375789134,
        "bleu-63": 0.623056183932759,
        "bleu-69": 0.20353115738941166,
        "bleu-163": 0.4458945919801696,
        "bleu-182": 0.38448543544509584,
        "bleu-57": 0.5210556913199483,
        "bleu-131": 0.5130225836430553,
        "codebleu-31": 0.4809010238942218,
        "codebleu-6": 0.7062776725296178,
        "codebleu-84": 0.3670487569790691,
        "codebleu-73": 0.6769923610443731,
        "codebleu-65": 0.4673267453032813,
        "codebleu-40": 0.5645546237587116,
        "codebleu-29": 0.6102872069434518,
        "codebleu-176": 0.7901689268647454,
        "codebleu-23": 0.5411535739232707,
        "codebleu-193": 0.7303450861689025,
        "codebleu-132": 0.3621326570094464,
        "codebleu-8": 0.5507903847404096,
        "codebleu-7": 0.4648201992911802,
        "codebleu-26": 0.7612600900806483,
        "codebleu-63": 0.6759608084375995,
        "codebleu-69": 0.5095168555982538,
        "codebleu-163": 0.5368009315867617,
        "codebleu-182": 0.5736056795755607,
        "codebleu-57": 0.8096081783647714,
        "codebleu-131": 0.6659467169295792,
        "chrf-31": 0.5014993531337903,
        "chrf-6": 0.48643416182783056,
        "chrf-84": 0.24027713086025795,
        "chrf-73": 0.6297905882622018,
        "chrf-65": 0.33700941004399676,
        "chrf-40": 0.399141174450906,
        "chrf-29": 0.530671161728262,
        "chrf-176": 0.7622586600546069,
        "chrf-23": 0.3223355756983708,
        "chrf-193": 0.6578078296826032,
        "chrf-132": 0.2988104666846808,
        "chrf-8": 0.5409476752616629,
        "chrf-7": 0.5157665379843592,
        "chrf-26": 0.7267818991444736,
        "chrf-63": 0.6660433763280916,
        "chrf-69": 0.3313275558432151,
        "chrf-163": 0.5058902551185568,
        "chrf-182": 0.40506548630057226,
        "chrf-57": 0.7198048901089805,
        "chrf-131": 0.6155525384924058,
        "rougel-31": 0.4444444444444445,
        "rougel-6": 0.3836734693877551,
        "rougel-84": 0.4201680672268907,
        "rougel-73": 0.6814814814814815,
        "rougel-65": 0.4444444444444445,
        "rougel-40": 0.37681159420289856,
        "rougel-29": 0.48351648351648346,
        "rougel-176": 0.7919463087248322,
        "rougel-23": 0.3291139240506329,
        "rougel-193": 0.6986301369863015,
        "rougel-132": 0.43103448275862066,
        "rougel-8": 0.7457627118644068,
        "rougel-7": 0.4957264957264957,
        "rougel-26": 0.7260273972602739,
        "rougel-63": 0.6370370370370371,
        "rougel-69": 0.4696969696969697,
        "rougel-163": 0.728813559322034,
        "rougel-182": 0.5999999999999999,
        "rougel-57": 0.6011560693641619,
        "rougel-131": 0.619718309859155,
        "meteor-31": 0.35611060344535833,
        "meteor-6": 0.5256164965986394,
        "meteor-84": 0.3209841628959276,
        "meteor-73": 0.6081928762341133,
        "meteor-65": 0.3335639357453364,
        "meteor-40": 0.40643515132044467,
        "meteor-29": 0.43050454035302516,
        "meteor-176": 0.872288749203557,
        "meteor-23": 0.37673378943220215,
        "meteor-193": 0.5472943737426454,
        "meteor-132": 0.29275537746612124,
        "meteor-8": 0.5457200402819739,
        "meteor-7": 0.36899518483285204,
        "meteor-26": 0.8075162902289785,
        "meteor-63": 0.6964398300855659,
        "meteor-69": 0.3935142381656805,
        "meteor-163": 0.5457200402819739,
        "meteor-182": 0.4581176061433869,
        "meteor-57": 0.8400916025276788,
        "meteor-131": 0.6019868264766224,
        "ruby-31": 0.27941176470588236,
        "ruby-6": 0.23728813559322037,
        "ruby-84": 0.2941176470588235,
        "ruby-73": 0.47058823529411764,
        "ruby-65": 0.27941176470588236,
        "ruby-40": 0.09999999999999998,
        "ruby-29": 0.35964912280701755,
        "ruby-176": 0.6666666666666667,
        "ruby-23": 0.15555555555555556,
        "ruby-193": 0.5512820512820513,
        "ruby-132": 0.27941176470588236,
        "ruby-8": 0.6323529411764706,
        "ruby-7": 0.36764705882352944,
        "ruby-26": 0.6282051282051282,
        "ruby-63": 0.4411764705882353,
        "ruby-69": 0.25,
        "ruby-163": 0.6029411764705883,
        "ruby-182": 0.4411764705882353,
        "ruby-57": 0.4571428571428572,
        "ruby-131": 0.33783783783783783,
        "codebertscore_f1-31": 0.7850020527839661,
        "codebertscore_f3-31": 0.7609846591949463,
        "codebertscore_f1-6": 0.7569973468780518,
        "codebertscore_f3-6": 0.7972221374511719,
        "codebertscore_f1-84": 0.8043487071990967,
        "codebertscore_f3-84": 0.7897703051567078,
        "codebertscore_f1-73": 0.8983526825904846,
        "codebertscore_f3-73": 0.8965017795562744,
        "codebertscore_f1-65": 0.8160682916641235,
        "codebertscore_f3-65": 0.8153680562973022,
        "codebertscore_f1-40": 0.7941262722015381,
        "codebertscore_f3-40": 0.7964076995849609,
        "codebertscore_f1-29": 0.7961020469665527,
        "codebertscore_f3-29": 0.7931496500968933,
        "codebertscore_f1-176": 0.9301769733428955,
        "codebertscore_f3-176": 0.9304662942886353,
        "codebertscore_f1-23": 0.7369542121887207,
        "codebertscore_f3-23": 0.7710601687431335,
        "codebertscore_f1-193": 0.8900159597396851,
        "codebertscore_f3-193": 0.8920755386352539,
        "codebertscore_f1-132": 0.8194811940193176,
        "codebertscore_f3-132": 0.8136547207832336,
        "codebertscore_f1-8": 0.8969824910163879,
        "codebertscore_f3-8": 0.8782657384872437,
        "codebertscore_f1-7": 0.8378840684890747,
        "codebertscore_f3-7": 0.8338766098022461,
        "codebertscore_f1-26": 0.9142559766769409,
        "codebertscore_f3-26": 0.916327953338623,
        "codebertscore_f1-63": 0.9069947004318237,
        "codebertscore_f3-63": 0.9056757092475891,
        "codebertscore_f1-69": 0.7918621301651001,
        "codebertscore_f3-69": 0.8041931986808777,
        "codebertscore_f1-163": 0.8854432702064514,
        "codebertscore_f3-163": 0.8679729104042053,
        "codebertscore_f1-182": 0.8419016599655151,
        "codebertscore_f3-182": 0.8408145308494568,
        "codebertscore_f1-57": 0.8534548878669739,
        "codebertscore_f3-57": 0.8803307414054871,
        "codebertscore_f1-131": 0.8526067733764648,
        "codebertscore_f3-131": 0.8527504801750183,
        "codebertscore_s_f1-31": 0.8028082847595215,
        "codebertscore_s_f3-31": 0.7791987061500549,
        "codebertscore_s_f1-6": 0.7728245258331299,
        "codebertscore_s_f3-6": 0.813441812992096,
        "codebertscore_s_f1-84": 0.8246098756790161,
        "codebertscore_s_f3-84": 0.8107002973556519,
        "codebertscore_s_f1-73": 0.9068197011947632,
        "codebertscore_s_f3-73": 0.9045253396034241,
        "codebertscore_s_f1-65": 0.8298358917236328,
        "codebertscore_s_f3-65": 0.8285502195358276,
        "codebertscore_s_f1-40": 0.8138832449913025,
        "codebertscore_s_f3-40": 0.8157944679260254,
        "codebertscore_s_f1-29": 0.8163220882415771,
        "codebertscore_s_f3-29": 0.8151920437812805,
        "codebertscore_s_f1-176": 0.9361422657966614,
        "codebertscore_s_f3-176": 0.9348257184028625,
        "codebertscore_s_f1-23": 0.7550496459007263,
        "codebertscore_s_f3-23": 0.7873916625976562,
        "codebertscore_s_f1-193": 0.9017679691314697,
        "codebertscore_s_f3-193": 0.9060956239700317,
        "codebertscore_s_f1-132": 0.8386216759681702,
        "codebertscore_s_f3-132": 0.8308329582214355,
        "codebertscore_s_f1-8": 0.9068358540534973,
        "codebertscore_s_f3-8": 0.8898008465766907,
        "codebertscore_s_f1-7": 0.8517196178436279,
        "codebertscore_s_f3-7": 0.8476921916007996,
        "codebertscore_s_f1-26": 0.9264816045761108,
        "codebertscore_s_f3-26": 0.9287031888961792,
        "codebertscore_s_f1-63": 0.9102303385734558,
        "codebertscore_s_f3-63": 0.90939861536026,
        "codebertscore_s_f1-69": 0.8214426040649414,
        "codebertscore_s_f3-69": 0.8319355845451355,
        "codebertscore_s_f1-163": 0.8980644941329956,
        "codebertscore_s_f3-163": 0.8815903067588806,
        "codebertscore_s_f1-182": 0.8598482012748718,
        "codebertscore_s_f3-182": 0.8594185709953308,
        "codebertscore_s_f1-57": 0.8745837211608887,
        "codebertscore_s_f3-57": 0.8997119069099426,
        "codebertscore_s_f1-131": 0.8662094473838806,
        "codebertscore_s_f3-131": 0.8646718859672546,
        "gpt35_nsnr-31": 4,
        "raw_gpt35_nsnr-31": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-84": 4,
        "raw_gpt35_nsnr-84": "4",
        "gpt35_nsnr-73": 4,
        "raw_gpt35_nsnr-73": "4",
        "gpt35_nsnr-65": 4,
        "raw_gpt35_nsnr-65": "4",
        "gpt35_nsnr-40": 4,
        "raw_gpt35_nsnr-40": "4",
        "gpt35_nsnr-29": 4,
        "raw_gpt35_nsnr-29": "4",
        "gpt35_nsnr-176": 4,
        "raw_gpt35_nsnr-176": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-193": 4,
        "raw_gpt35_nsnr-193": "4",
        "gpt35_nsnr-132": 4,
        "raw_gpt35_nsnr-132": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-63": 4,
        "raw_gpt35_nsnr-63": "4",
        "gpt35_nsnr-69": 4,
        "raw_gpt35_nsnr-69": "4",
        "gpt35_nsnr-163": 4,
        "raw_gpt35_nsnr-163": "4",
        "gpt35_nsnr-182": 4,
        "raw_gpt35_nsnr-182": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-131": 4,
        "raw_gpt35_nsnr-131": "4",
        "gpt35_nswr-31": 3,
        "raw_gpt35_nswr-31": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-84": 4,
        "raw_gpt35_nswr-84": "4",
        "gpt35_nswr-73": 3,
        "raw_gpt35_nswr-73": "3",
        "gpt35_nswr-65": 4,
        "raw_gpt35_nswr-65": "4",
        "gpt35_nswr-40": 4,
        "raw_gpt35_nswr-40": "4",
        "gpt35_nswr-29": 3,
        "raw_gpt35_nswr-29": "3",
        "gpt35_nswr-176": 4,
        "raw_gpt35_nswr-176": "4",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-193": 4,
        "raw_gpt35_nswr-193": "4",
        "gpt35_nswr-132": 4,
        "raw_gpt35_nswr-132": "4",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-63": 4,
        "raw_gpt35_nswr-63": "4",
        "gpt35_nswr-69": 4,
        "raw_gpt35_nswr-69": "4",
        "gpt35_nswr-163": 3,
        "raw_gpt35_nswr-163": "3",
        "gpt35_nswr-182": 3,
        "raw_gpt35_nswr-182": "3",
        "gpt35_nswr-57": 4,
        "raw_gpt35_nswr-57": "4",
        "gpt35_nswr-131": 3,
        "raw_gpt35_nswr-131": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    // numbers in the array will be randomly ordered. Your task is to determine if\n    // it is possible to get an array sorted in non-decreasing order by performing \n    // the following operation on the given array:\n    // You are allowed to perform right shift operation any number of times.\n    // One right shift operation means shifting all elements of the array by one\n    // position in the right direction. The last element of the array will be moved to\n    // the starting position in the array i.e. 0th index. \n    // If it is possible to obtain the sorted array by performing the above operation\n    // then return True else return False.\n    // If the given array is empty then return True.\n    // Note: The given list is guaranteed to have unique elements.\n    // For Example:\n    // move_one_ball([3, 4, 5, 1, 2])==>True\n    // Explanation: By performin 2 right shift operations, non-decreasing order can\n    // be achieved for the given array.\n    // move_one_ball([3, 5, 4, 1, 2])==>False\n    // Explanation:It is not possible to get non-decreasing order for the given\n    // array by performing any number of right shift operations.\n    public static boolean moveOneBall(ArrayList<Integer> arr) {\n",
        "snippet": [
            "        if (arr.size() == 0) {\n            return true;\n        }\n        List<Integer> sorted_arr = new ArrayList<>(arr);\n        Collections.sort(sorted_arr);\n\n        int min_value = Collections.min(arr);\n        int min_index = arr.indexOf(min_value);\n        List<Integer> my_arr = new ArrayList<>(arr.subList(min_index, arr.size()));\n        my_arr.addAll(arr.subList(0, min_index));\n        for (int i = 0; i < arr.size(); i++) {\n            if (my_arr.get(i) != sorted_arr.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"
        ],
        "simplified": "We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The numbers in the array will be randomly ordered. Your task is to determine if it is possible to get an array sorted in non-decreasing order by performing the following operation on the given array: You are allowed to perform right shift operation any number of times. One right shift operation means shifting all elements of the array by one position in the right direction. The last element of the array will be moved to the starting position in the array i.e. 0th index. If it is possible to obtain the sorted array by performing the above operation then return True else return False. If the given array is empty then return True. Note: The given list is guaranteed to have unique elements. For",
        "task_id": "109",
        "176": "int c = 0;\n        int l = arr.size();\n        if (l < 2) return true;\n        ArrayList<Integer> p = (ArrayList<Integer>) arr.clone();\n        Collections.sort(p);\n        for (int i = 0; i < l; i++) {\n            if (arr.get(i) != p.get(i)) c++;\n        }\n        return c < 3;",
        "grade-176": {
            "execution": 0
        },
        "28": "int n = arr.size();\n        if (n == 0) {\n            return true;\n        }\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = arr.get(i);\n        }\n        for (int i = 0; i < n; i++) {\n            if (a[i] == i + 1) {\n                continue;\n            }\n            a[i] = a[a[i] - 1];\n            a[a[i] - 1] = a[i];\n            i--;\n        }\n        for (int i = 0; i < n; i++) {\n            if (a[i] != i + 1) {\n                return false;\n            }\n        }\n        return true;",
        "grade-28": {
            "execution": 0
        },
        "6": "ArrayList<Integer> copy = new ArrayList<>(arr);\n        Collections.sort(copy);\n        int len = arr.size();\n        for (int i = 0; i < len; i++) {\n            if (arr.equals(copy)) {\n                return true;\n            }\n            int end = arr.get(len - 1);\n            for (int j = len - 1; j > 0; j--) {\n                arr.set(j, arr.get(j - 1));\n            }\n            arr.set(0, end);\n        }\n        return false;",
        "grade-6": {
            "execution": 0
        },
        "76": "// arr.add(arr.remove(0));\n        return false;",
        "grade-76": {
            "execution": 0
        },
        "68": "if (arr.size() < 2) return true;\n        int min = arr.get(0);\n        int idx = 0;\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < min) {\n                min = arr.get(i);\n                idx = i;\n            }\n        }\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) < min) return false;\n        }\n        return true;",
        "grade-68": {
            "execution": 0
        },
        "62": "return Arrays.asList(arr).stream().allMatch(i -> i > 0);",
        "grade-62": {
            "execution": 0
        },
        "35": "ArrayList<Integer> arr_sorted = new ArrayList<Integer>(arr);\n        Collections.sort(arr_sorted);\n        int moves = 0;\n        for (int i = arr.size() - 1; i >= 0; i--) {\n            if (arr.get(i) != arr_sorted.get(i)) {\n                moves++;\n            }\n        }\n        if (moves == 1) {\n            return true;\n        }\n        return false;",
        "grade-35": {
            "execution": 0
        },
        "26": "throw new UnsupportedOperationException(\"Unimplemented\");",
        "grade-26": {
            "execution": 0
        },
        "188": "if (arr.size() <= 1) return true;\n        ArrayList<Integer> _copy = new ArrayList<Integer>(arr);\n        Collections.sort(_copy);\n        if (arr.equals(_copy)) return true;\n        int count = 0;\n        while (count < arr.size()) {\n            Integer e = arr.remove(arr.size() - 1);\n            arr.add(0, e);\n            if (arr.equals(_copy)) return true;\n            count++;\n        }\n        return false;",
        "grade-188": {
            "execution": 1
        },
        "149": "if (arr.size() <= 1) {\n            return true;\n        }\n        // We store the array in a list so we can rotate it.\n        List<Integer> list = new ArrayList<Integer>(arr);\n        int max = Collections.max(list);\n        for (int i = 0; i < list.size(); i++) {\n            int temp = Collections.max(list);\n            if (temp < max) {\n                return false;\n            }\n            max = temp;\n            // Rotate list\n            Collections.rotate(list, 1);\n        }\n        return true;",
        "grade-149": {
            "execution": 0
        },
        "22": "int n = arr.size();\n        int[] count = new int[n];\n        for (int i = 0; i < n; i++) {\n            if (arr.get(i) > n) return false;\n            count[arr.get(i) - 1]++;\n        }\n        for (int i = 0; i < n; i++) {\n            if (count[i] > 1) return false;\n        }\n        return true;",
        "grade-22": {
            "execution": 0
        },
        "161": "// use a priority queue\n        int[] count = new int[arr.size()];\n        PriorityQueue<Integer> pq = new PriorityQueue<>();\n        for (int i : arr) {\n            pq.add(i);\n        }\n        for (int i = 0; i < arr.size(); i++) {\n            // get the next smallest element\n            int next = pq.poll();\n            if (arr.get(i) != next) {\n                // if the smallest element is not in the correct position, then\n                // we need to swap\n                for (int j = 0; j < arr.size(); j++) {\n                    if (arr.get(j) == next) {\n                        // swap the elements\n                        int temp = arr.get(i);\n                        arr.set(i, arr.get(j));\n                        arr.set(j, temp);\n                        count[j]++;\n                        // if the element has already been swapped twice, then\n                        // it is not possible to sort the array\n                        if (count[j] == 2) {\n                            return false;\n                        }\n                        break;\n                    }\n                }\n            }\n        }\n        return true;",
        "grade-161": {
            "execution": 0
        },
        "116": "ArrayList<Integer> clone = new ArrayList<Integer>(arr);\n        Collections.sort(clone);\n        return clone.equals(arr);",
        "grade-116": {
            "execution": 0
        },
        "8": "if (arr.size() == 0) {\n            return true;\n        }\n        ArrayList<Integer> copy = new ArrayList<Integer>(arr);\n        Collections.sort(copy);\n        if (copy.equals(arr)) {\n            return true;\n        }\n        for (int i = 0; i < arr.size(); i++) {\n            int t = arr.remove(0);\n            arr.add(t);\n            Collections.sort(arr);\n            if (arr.equals(copy)) {\n                return true;\n            }\n        }\n        return false;",
        "grade-8": {
            "execution": 0
        },
        "7": "if (arr.size() < 2) {\n            return true;\n        }\n        int indexOfSmallest = arr.indexOf(Collections.min(arr));\n        if (indexOfSmallest != 0) {\n            int indexOfSmallestAfterShift = indexOfSmallest - 1;\n            Collections.rotate(arr, indexOfSmallestAfterShift);\n        }\n        for (int i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                return false;\n            }\n        }\n        return true;",
        "grade-7": {
            "execution": 1
        },
        "23": "int n = arr.size();\n        int[] ts = new int[n];\n        ts[0] = arr.get(0);\n        for (int i = 1; i < n; i++) {\n            ts[i] = ts[i - 1] + arr.get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            if (ts[i] < ts[i - 1]) {\n                return false;\n            }\n        }\n        return true;",
        "grade-23": {
            "execution": 0
        },
        "60": "if (arr.size() == 0) return true;\n        int min = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            int elem = arr.get(i);\n            if (elem >= min) {\n                min = elem;\n            } else {\n                return false;\n            }\n        }\n        return true;",
        "grade-60": {
            "execution": 0
        },
        "65": "if (arr.size() == 0) return true;\n        ArrayList<Integer> minima = new ArrayList<Integer>();\n        minima.add(0);\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(minima.get(minima.size() - 1)))\n                minima.add(i);\n        }\n        if (minima.size() == 1) return true;\n        for (int i = 1; i < minima.size(); i++) {\n            if (minima.get(i) - minima.get(i - 1) != 1) return false;\n        }\n        if (minima.get(minima.size() - 1) == arr.size() - 1) return true;\n        return false;",
        "grade-65": {
            "execution": 0
        },
        "139": "// Your code goes here.\n        return true;",
        "grade-139": {
            "execution": 0
        },
        "164": "return arr.isEmpty() || arr.get(0) <= arr.get(arr.size() - 1);",
        "grade-164": {
            "execution": 0
        },
        "bleu-176": 0.2878103681186926,
        "bleu-28": 0.27578812357899485,
        "bleu-6": 0.37678315891484154,
        "bleu-76": 9.854670809342665e-05,
        "bleu-68": 0.35342960050981015,
        "bleu-62": 0.0006578756983665941,
        "bleu-35": 0.2998645351351177,
        "bleu-26": 2.8983992396160135e-07,
        "bleu-188": 0.291690297174866,
        "bleu-149": 0.3397197034424969,
        "bleu-22": 0.23057581238893202,
        "bleu-161": 0.2673906894071896,
        "bleu-116": 0.015131672964319014,
        "bleu-8": 0.4425931368824795,
        "bleu-7": 0.4022683614093976,
        "bleu-23": 0.23367323794050002,
        "bleu-60": 0.2373266289448953,
        "bleu-65": 0.3536685712946311,
        "bleu-139": 1.3956760212976628e-07,
        "bleu-164": 0.006187734555011643,
        "codebleu-176": 0.43815204032300853,
        "codebleu-28": 0.4968854139297582,
        "codebleu-6": 0.5685991153370752,
        "codebleu-76": 0.057167639107576544,
        "codebleu-68": 0.5574708911979366,
        "codebleu-62": 0.07941953001889995,
        "codebleu-35": 0.41282883058274794,
        "codebleu-26": 0.019047619119251576,
        "codebleu-188": 0.5131394866090891,
        "codebleu-149": 0.5463141252517354,
        "codebleu-22": 0.3947844725332638,
        "codebleu-161": 0.7085325972293017,
        "codebleu-116": 0.12996292404959722,
        "codebleu-8": 0.6049811908527621,
        "codebleu-7": 0.4954489960242408,
        "codebleu-23": 0.39108064123853603,
        "codebleu-60": 0.35731103038795253,
        "codebleu-65": 0.666422459338056,
        "codebleu-139": 0.028571622692041856,
        "codebleu-164": 0.10290146135175324,
        "chrf-176": 0.3487589789691852,
        "chrf-28": 0.27751003415684045,
        "chrf-6": 0.4046607222401492,
        "chrf-76": 0.06363309793463982,
        "chrf-68": 0.353507164494416,
        "chrf-62": 0.05645679825747741,
        "chrf-35": 0.41259123099991263,
        "chrf-26": 0.04339738332464751,
        "chrf-188": 0.41469708463697613,
        "chrf-149": 0.4245612381891113,
        "chrf-22": 0.2539190269131494,
        "chrf-161": 0.394188321036638,
        "chrf-116": 0.21458031067130437,
        "chrf-8": 0.503429112265938,
        "chrf-7": 0.4360801922692874,
        "chrf-23": 0.23622060426082658,
        "chrf-60": 0.30661111405467856,
        "chrf-65": 0.44254236560196575,
        "chrf-139": 0.03877827888736218,
        "chrf-164": 0.09355090485698515,
        "rougel-176": 0.5267489711934157,
        "rougel-28": 0.40634920634920635,
        "rougel-6": 0.45588235294117646,
        "rougel-76": 0.16766467065868262,
        "rougel-68": 0.5551330798479088,
        "rougel-62": 0.1724137931034483,
        "rougel-35": 0.5062240663900415,
        "rougel-26": 0.04968944099378882,
        "rougel-188": 0.5593869731800767,
        "rougel-149": 0.5055762081784386,
        "rougel-22": 0.42105263157894735,
        "rougel-161": 0.39999999999999997,
        "rougel-116": 0.2747252747252747,
        "rougel-8": 0.5864661654135338,
        "rougel-7": 0.5724907063197026,
        "rougel-23": 0.40466926070038906,
        "rougel-60": 0.5110132158590308,
        "rougel-65": 0.5861027190332326,
        "rougel-139": 0.05,
        "rougel-164": 0.23333333333333336,
        "meteor-176": 0.44465138600693804,
        "meteor-28": 0.39583333333333337,
        "meteor-6": 0.36517304498792275,
        "meteor-76": 0.06141483660033142,
        "meteor-68": 0.43696180758080644,
        "meteor-62": 0.0727802037845706,
        "meteor-35": 0.3692097501734906,
        "meteor-26": 0.014695077149155036,
        "meteor-188": 0.41030052652742066,
        "meteor-149": 0.4595743502004022,
        "meteor-22": 0.31680758073922616,
        "meteor-161": 0.4607983299406818,
        "meteor-116": 0.11177327298502612,
        "meteor-8": 0.448735020584485,
        "meteor-7": 0.5306742640075973,
        "meteor-23": 0.35056308455812174,
        "meteor-60": 0.33977933155552636,
        "meteor-65": 0.4214661452432051,
        "meteor-139": 0.02757352941176471,
        "meteor-164": 0.09057971014492755,
        "ruby-176": 0.4,
        "ruby-28": 0.2909090909090909,
        "ruby-6": 0.32666666666666666,
        "ruby-76": 0.09333333333333338,
        "ruby-68": 0.43999999999999995,
        "ruby-62": 0.09999999999999998,
        "ruby-35": 0.33333333333333337,
        "ruby-26": 0.026666666666666616,
        "ruby-188": 0.41333333333333333,
        "ruby-149": 0.30666666666666664,
        "ruby-22": 0.30666666666666664,
        "ruby-161": 0.2571428571428571,
        "ruby-116": 0.16000000000000003,
        "ruby-8": 0.45333333333333337,
        "ruby-7": 0.45333333333333337,
        "ruby-23": 0.31333333333333335,
        "ruby-60": 0.33999999999999997,
        "ruby-65": 0.43646408839779005,
        "ruby-139": 0.026666666666666616,
        "ruby-164": 0.14,
        "codebertscore_f1-176": 0.806026041507721,
        "codebertscore_f3-176": 0.791575014591217,
        "codebertscore_f1-28": 0.7882077097892761,
        "codebertscore_f3-28": 0.7702960968017578,
        "codebertscore_f1-6": 0.8021624088287354,
        "codebertscore_f3-6": 0.7988801598548889,
        "codebertscore_f1-76": 0.6615794897079468,
        "codebertscore_f3-76": 0.6175264716148376,
        "codebertscore_f1-68": 0.8195181488990784,
        "codebertscore_f3-68": 0.7946540117263794,
        "codebertscore_f1-62": 0.664396345615387,
        "codebertscore_f3-62": 0.6395778656005859,
        "codebertscore_f1-35": 0.806407630443573,
        "codebertscore_f3-35": 0.7994191646575928,
        "codebertscore_f1-26": 0.5652210116386414,
        "codebertscore_f3-26": 0.526903510093689,
        "codebertscore_f1-188": 0.8152669668197632,
        "codebertscore_f3-188": 0.8053772449493408,
        "codebertscore_f1-149": 0.8039289712905884,
        "codebertscore_f3-149": 0.8056162595748901,
        "codebertscore_f1-22": 0.7802181839942932,
        "codebertscore_f3-22": 0.7608649730682373,
        "codebertscore_f1-161": 0.7538487911224365,
        "codebertscore_f3-161": 0.7703423500061035,
        "codebertscore_f1-116": 0.726551353931427,
        "codebertscore_f3-116": 0.6806572079658508,
        "codebertscore_f1-8": 0.8489880561828613,
        "codebertscore_f3-8": 0.8314066529273987,
        "codebertscore_f1-7": 0.8204182386398315,
        "codebertscore_f3-7": 0.8197743892669678,
        "codebertscore_f1-23": 0.7728066444396973,
        "codebertscore_f3-23": 0.7571250796318054,
        "codebertscore_f1-60": 0.7938689589500427,
        "codebertscore_f3-60": 0.7650017142295837,
        "codebertscore_f1-65": 0.8204563856124878,
        "codebertscore_f3-65": 0.8187887668609619,
        "codebertscore_f1-139": 0.5442232489585876,
        "codebertscore_f3-139": 0.49694812297821045,
        "codebertscore_f1-164": 0.688616931438446,
        "codebertscore_f3-164": 0.6448982357978821,
        "codebertscore_s_f1-176": 0.961797297000885,
        "codebertscore_s_f3-176": 0.9525536894798279,
        "codebertscore_s_f1-28": 0.9489130973815918,
        "codebertscore_s_f3-28": 0.9469479322433472,
        "codebertscore_s_f1-6": 0.9549352526664734,
        "codebertscore_s_f3-6": 0.9510416984558105,
        "codebertscore_s_f1-76": 0.9580162763595581,
        "codebertscore_s_f3-76": 0.9333552718162537,
        "codebertscore_s_f1-68": 0.9626398682594299,
        "codebertscore_s_f3-68": 0.9537941813468933,
        "codebertscore_s_f1-62": 0.9551819562911987,
        "codebertscore_s_f3-62": 0.9334791898727417,
        "codebertscore_s_f1-35": 0.9605089426040649,
        "codebertscore_s_f3-35": 0.9531821012496948,
        "codebertscore_s_f1-26": 0.9512163996696472,
        "codebertscore_s_f3-26": 0.9279557466506958,
        "codebertscore_s_f1-188": 0.9589754343032837,
        "codebertscore_s_f3-188": 0.9520775079727173,
        "codebertscore_s_f1-149": 0.9571605920791626,
        "codebertscore_s_f3-149": 0.9530654549598694,
        "codebertscore_s_f1-22": 0.9558961987495422,
        "codebertscore_s_f3-22": 0.9466037154197693,
        "codebertscore_s_f1-161": 0.9307676553726196,
        "codebertscore_s_f3-161": 0.9431777000427246,
        "codebertscore_s_f1-116": 0.9592982530593872,
        "codebertscore_s_f3-116": 0.9381524324417114,
        "codebertscore_s_f1-8": 0.9663033485412598,
        "codebertscore_s_f3-8": 0.9585907459259033,
        "codebertscore_s_f1-7": 0.956012487411499,
        "codebertscore_s_f3-7": 0.9553224444389343,
        "codebertscore_s_f1-23": 0.9523029327392578,
        "codebertscore_s_f3-23": 0.9441142082214355,
        "codebertscore_s_f1-60": 0.961394727230072,
        "codebertscore_s_f3-60": 0.9489662051200867,
        "codebertscore_s_f1-65": 0.9530163407325745,
        "codebertscore_s_f3-65": 0.9557853937149048,
        "codebertscore_s_f1-139": 0.9553571343421936,
        "codebertscore_s_f3-139": 0.929929256439209,
        "codebertscore_s_f1-164": 0.9573188424110413,
        "codebertscore_s_f3-164": 0.93485426902771,
        "gpt35_nsnr-176": 3,
        "raw_gpt35_nsnr-176": "3",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-76": 2,
        "raw_gpt35_nsnr-76": "2",
        "gpt35_nsnr-68": 4,
        "raw_gpt35_nsnr-68": "4",
        "gpt35_nsnr-62": 2,
        "raw_gpt35_nsnr-62": "2",
        "gpt35_nsnr-35": 3,
        "raw_gpt35_nsnr-35": "3",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-188": 4,
        "raw_gpt35_nsnr-188": "4",
        "gpt35_nsnr-149": 4,
        "raw_gpt35_nsnr-149": "4",
        "gpt35_nsnr-22": 3,
        "raw_gpt35_nsnr-22": "3",
        "gpt35_nsnr-161": 4,
        "raw_gpt35_nsnr-161": "4",
        "gpt35_nsnr-116": 4,
        "raw_gpt35_nsnr-116": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-60": 4,
        "raw_gpt35_nsnr-60": "4",
        "gpt35_nsnr-65": 4,
        "raw_gpt35_nsnr-65": "4",
        "gpt35_nsnr-139": 2,
        "raw_gpt35_nsnr-139": "2",
        "gpt35_nsnr-164": 4,
        "raw_gpt35_nsnr-164": "4",
        "gpt35_nswr-176": 3,
        "raw_gpt35_nswr-176": "3",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-76": 0,
        "raw_gpt35_nswr-76": "0",
        "gpt35_nswr-68": 3,
        "raw_gpt35_nswr-68": "3",
        "gpt35_nswr-62": 1,
        "raw_gpt35_nswr-62": "1",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-26": 4,
        "raw_gpt35_nswr-26": "4",
        "gpt35_nswr-188": 4,
        "raw_gpt35_nswr-188": "4",
        "gpt35_nswr-149": 3,
        "raw_gpt35_nswr-149": "3",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-161": 3,
        "raw_gpt35_nswr-161": "3",
        "gpt35_nswr-116": 3,
        "raw_gpt35_nswr-116": "3",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-60": 4,
        "raw_gpt35_nswr-60": "4",
        "gpt35_nswr-65": 3,
        "raw_gpt35_nswr-65": "3",
        "gpt35_nswr-139": 2,
        "raw_gpt35_nswr-139": "2",
        "gpt35_nswr-164": 3,
        "raw_gpt35_nswr-164": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a dictionary, return True if all keys are strings in lower \n    // case or all keys are strings in upper case, else return False.\n    // The function should return False is the given dictionary is empty.\n    // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    public static boolean checkDictCase(HashMap<String,String> dict) {\n",
        "snippet": [
            "        if (dict.isEmpty()) {\n            return false;\n        }\n        String state = \"start\";\n        for (Map.Entry entry : dict.entrySet()) {\n            if (!(entry.getKey() instanceof String key)) {\n                state = \"mixed\";\n                break;\n            }\n            boolean is_upper = true, is_lower = true;\n            for (char c : key.toCharArray()) {\n                if (Character.isLowerCase(c)) {\n                    is_upper = false;\n                } else if (Character.isUpperCase(c)) {\n                    is_lower = false;\n                } else {\n                    is_upper = false;\n                    is_lower = false;\n                }\n            }\n            if (state.equals(\"start\")) {\n                if (is_upper) {\n                    state = \"upper\";\n                } else if (is_lower) {\n                    state = \"lower\";\n                } else {\n                    break;\n                }\n            } else if ((state.equals(\"upper\") && !is_upper) || (state.equals(\"lower\") && !is_lower)) {\n                state = \"mixed\";\n                break;\n            }\n        }\n        return state.equals(\"upper\") || state.equals(\"lower\");\n    }\n}"
        ],
        "simplified": "Given a dictionary, return True if all keys are strings in lower case or all keys are strings in upper case, else return False. The function should return False is the given dictionary is empty.",
        "task_id": "95",
        "194": "boolean firstIsUpper = false;\n        boolean firstIsLower = false;\n        Set<String> firstKeys = dict.keySet();\n        if (firstKeys.size() > 0) {\n            String firstKey = firstKeys.toArray(new String[0])[0];\n            firstIsUpper = firstKey.toUpperCase().equals(firstKey);\n            firstIsLower = firstKey.toLowerCase().equals(firstKey);\n        }\n        for (String key : dict.keySet()) {\n            if (firstIsUpper && !key.toUpperCase().equals(key)) {\n                return false;\n            }\n            if (firstIsLower && !key.toLowerCase().equals(key)) {\n                return false;\n            }\n        }\n        return true;",
        "grade-194": {
            "execution": 0
        },
        "32": "String x = \"\";\n        String y = \"\";\n        if (dict.isEmpty()) {\n            return false;\n        }\n        for (String key : dict.keySet()) {\n            x = key;\n            break;\n        }\n        for (String key : dict.keySet()) {\n            y = key;\n            break;\n        }\n        if (x.toUpperCase().equals(x) && y.toUpperCase().equals(y)) {\n            return true;\n        }\n        else if (x.toLowerCase().equals(x) && y.toLowerCase().equals(y)) {\n            return true;\n        }\n        else {\n            return false;\n        }",
        "grade-32": {
            "execution": 0
        },
        "6": "// TODO: write your code here.\n        return false;",
        "grade-6": {
            "execution": 0
        },
        "85": "String [] d = dict.keySet().toArray(new String[0]);\n        for (int i = 0; i < d.length; i++) {\n            if (Character.isLowerCase(d[i].charAt(0))) {\n                for (int j = i; j < d.length; j++) {\n                    if (Character.isUpperCase(d[j].charAt(0))) {\n                        return false;\n                    }\n                }\n            } else {\n                for (int j = i; j < d.length; j++) {\n                    if (Character.isLowerCase(d[j].charAt(0))) {\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;",
        "grade-85": {
            "execution": 0
        },
        "76": "if (dict.isEmpty()) return false;\n        boolean lower = true;\n        boolean upper = true;\n        for (String k : dict.keySet()) {\n            if (k.length() == 0) return false;\n            if (Character.isLowerCase(k.charAt(0))) {\n                upper = false;\n            } else {\n                lower = false;\n            }\n        }\n        return lower || upper;",
        "grade-76": {
            "execution": 0
        },
        "68": "if (dict.isEmpty()) {\n            return false;\n        }\n        String firstKey = dict.keySet().iterator().next();\n        if (Character.isLowerCase(firstKey.charAt(0))) {\n            for (String key : dict.keySet()) {\n                if (!key.equals(key.toLowerCase())) {\n                    return false;\n                }\n            }\n        } else {\n            for (String key : dict.keySet()) {\n                if (!key.equals(key.toUpperCase())) {\n                    return false;\n                }\n            }\n        }\n        return true;",
        "grade-68": {
            "execution": 0
        },
        "41": "// Write your code here.\n        // return true;\n        if (dict.size()==0) {\n            return false;\n        }\n        int lowerCount = 0;\n        int upperCount = 0;\n        Set<String> keys = dict.keySet();\n        for (String key : keys) {\n            if (key.equals(key.toLowerCase())) {\n                lowerCount++;\n            } else if (key.equals(key.toUpperCase())) {\n                upperCount++;\n            }\n        }\n        if (lowerCount == dict.size() || upperCount == dict.size()) {\n            return true;\n        }\n        return false;",
        "grade-41": {
            "execution": 0
        },
        "29": "return dict.keySet().stream().allMatch( x -> x.equals(x.toLowerCase()) ) ||\n               dict.keySet().stream().allMatch( x -> x.equals(x.toUpperCase()) );",
        "grade-29": {
            "execution": 0
        },
        "165": "String [] values = new String[2];\n        for (String key : dict.keySet()) {\n            String value = dict.get(key);\n            if (key.equals(key.toLowerCase())) {\n                values[0] = key;\n            } else if (key.equals(key.toUpperCase())) {\n                values[1] = key;\n            } else {\n                return false;\n            }\n        }\n        return values[0] != null || values[1] != null;",
        "grade-165": {
            "execution": 0
        },
        "25": "boolean lowerCase = true;\n        boolean upperCase = true;\n        if (dict.size() == 0) {\n            return false;\n        }\n        for (Map.Entry<String,String> entry : dict.entrySet()) {\n            if (entry.getKey().toLowerCase().equals(entry.getKey())) {\n                upperCase = false;\n            }\n            if (entry.getKey().toUpperCase().equals(entry.getKey())) {\n                lowerCase = false;\n            }\n        }\n        return (lowerCase || upperCase);",
        "grade-25": {
            "execution": 0
        },
        "178": "// Your code goes here\n        boolean upperCase = true;\n        boolean lowerCase = true;\n        for (String key : dict.keySet()) {\n            if (!key.equals(key.toUpperCase())) {\n                upperCase = false;\n            }\n            if (!key.equals(key.toLowerCase())) {\n                lowerCase = false;\n            }\n        }\n        return upperCase || lowerCase;",
        "grade-178": {
            "execution": 0
        },
        "128": "if (dict.isEmpty()) {\n            return false;\n        }\n        boolean all_upper = true;\n        boolean all_lower = true;\n        for (String k : dict.keySet()) {\n            if (Character.isUpperCase(k.charAt(0))) {\n                all_lower = false;\n            } else {\n                all_upper = false;\n            }\n        }\n        return (all_upper || all_lower);",
        "grade-128": {
            "execution": 0
        },
        "9": "if (dict.isEmpty()) {\n            return false;\n        }\n\n        // get the first key and determine if it is uppercase or lowercase\n        String firstKey = dict.keySet().iterator().next();\n        boolean isFirstUpper = firstKey.toUpperCase().equals(firstKey);\n\n        // check all the keys to determine if they all match the first key\n        for (String key : dict.keySet()) {\n            if (isFirstUpper && !key.toUpperCase().equals(key)) {\n                return false;\n            } else if (!isFirstUpper && !key.toLowerCase().equals(key)) {\n                return false;\n            }\n        }\n\n        return true;",
        "grade-9": {
            "execution": 0
        },
        "8": "return false;",
        "grade-8": {
            "execution": 0
        },
        "26": "// use only Java's standard library classes, no extra packages\n        return false;",
        "grade-26": {
            "execution": 0
        },
        "65": "return dict.keySet().stream().allMatch(s -> Character.isUpperCase(s.charAt(0))) ||\n               dict.keySet().stream().allMatch(s -> Character.isLowerCase(s.charAt(0)));",
        "grade-65": {
            "execution": 0
        },
        "71": "// TODO: your code here!\n        return false;",
        "grade-71": {
            "execution": 0
        },
        "153": "if (dict.isEmpty()) {\n            return false;\n        }\n\n        List<Boolean> caseList = new ArrayList<>();\n        for (String key : dict.keySet()) {\n            caseList.add(Character.isUpperCase(key.charAt(0)));\n        }\n\n        HashSet<Boolean> caseSet = new HashSet<>(caseList);\n        if (caseSet.size() > 1) {\n            return false;\n        }\n\n        return true;",
        "grade-153": {
            "execution": 0
        },
        "182": "// Your code here\n        return false;",
        "grade-182": {
            "execution": 0
        },
        "170": "boolean allUpper = true;\n        boolean allLower = true;\n        for (String s : dict.keySet()) {\n            if (s.equals(s.toUpperCase()))\n                allLower = false;\n            else\n                allUpper = false;\n        }\n        return dict.size() != 0 && (allUpper || allLower);",
        "grade-170": {
            "execution": 0
        },
        "bleu-194": 0.14423112150566011,
        "bleu-32": 0.1725443730223527,
        "bleu-6": 7.383325718635775e-10,
        "bleu-85": 0.15950183367680748,
        "bleu-76": 0.07842830865836137,
        "bleu-68": 0.1759850179470745,
        "bleu-41": 0.12352297762390363,
        "bleu-29": 0.00812325761329583,
        "bleu-165": 0.07970484718561135,
        "bleu-25": 0.1542521884304203,
        "bleu-178": 0.059364000782764076,
        "bleu-128": 0.06549453186753705,
        "bleu-9": 0.17110833154592553,
        "bleu-8": 3.515370487151309e-35,
        "bleu-26": 1.8326392511006683e-07,
        "bleu-65": 0.01915333589580971,
        "bleu-71": 1.3163106716911063e-10,
        "bleu-153": 0.08115239323014607,
        "bleu-182": 4.614516548830351e-14,
        "bleu-170": 0.02812906773463374,
        "codebleu-194": 0.34491098298685124,
        "codebleu-32": 0.36479322229924815,
        "codebleu-6": 0.02202202329579245,
        "codebleu-85": 0.3075021044873487,
        "codebleu-76": 0.19654953640450043,
        "codebleu-68": 0.3143938343195612,
        "codebleu-41": 0.29359711196910204,
        "codebleu-29": 0.13501964556216203,
        "codebleu-165": 0.21719237733975777,
        "codebleu-25": 0.2779728686614775,
        "codebleu-178": 0.1865857779903402,
        "codebleu-128": 0.18464854068441333,
        "codebleu-9": 0.3473321707345621,
        "codebleu-8": 0.008008008008008008,
        "codebleu-26": 0.032032094889200106,
        "codebleu-65": 0.13314919184597432,
        "codebleu-71": 0.020020020424304008,
        "codebleu-153": 0.2009081056253464,
        "codebleu-182": 0.014014014016888853,
        "codebleu-170": 0.1455346136095275,
        "chrf-194": 0.31397405046280424,
        "chrf-32": 0.28780772552300465,
        "chrf-6": 0.028913867770817867,
        "chrf-85": 0.2462714071754978,
        "chrf-76": 0.2743755654687273,
        "chrf-68": 0.29613071392453444,
        "chrf-41": 0.251285085770988,
        "chrf-29": 0.10964210654956498,
        "chrf-165": 0.20145895623114554,
        "chrf-25": 0.30436718077988434,
        "chrf-178": 0.22187514074608614,
        "chrf-128": 0.2906001732861957,
        "chrf-9": 0.3273981394220653,
        "chrf-8": 0.019851974405319606,
        "chrf-26": 0.04249989045769243,
        "chrf-65": 0.1405055946032098,
        "chrf-71": 0.025876902417292694,
        "chrf-153": 0.21536480303361014,
        "chrf-182": 0.025253013126076165,
        "chrf-170": 0.1888700109498869,
        "rougel-194": 0.32273838630806845,
        "rougel-32": 0.418848167539267,
        "rougel-6": 0.03162055335968379,
        "rougel-85": 0.33668341708542715,
        "rougel-76": 0.37920489296636084,
        "rougel-68": 0.41081081081081083,
        "rougel-41": 0.3588390501319261,
        "rougel-29": 0.22295081967213115,
        "rougel-165": 0.33237822349570195,
        "rougel-25": 0.4230769230769231,
        "rougel-178": 0.3241590214067278,
        "rougel-128": 0.3596214511041009,
        "rougel-9": 0.3705583756345177,
        "rougel-8": 0.02459016393442623,
        "rougel-26": 0.031007751937984496,
        "rougel-65": 0.22653721682847897,
        "rougel-71": 0.031746031746031744,
        "rougel-153": 0.3216374269005848,
        "rougel-182": 0.024096385542168672,
        "rougel-170": 0.27476038338658143,
        "meteor-194": 0.29606948550867324,
        "meteor-32": 0.27999410797142366,
        "meteor-6": 0.011462631820265934,
        "meteor-85": 0.25596525051890917,
        "meteor-76": 0.18991996571401645,
        "meteor-68": 0.27201592366953553,
        "meteor-41": 0.23348510521935276,
        "meteor-29": 0.1263977132781012,
        "meteor-165": 0.17311620039107858,
        "meteor-25": 0.26244235991642423,
        "meteor-178": 0.16591522677557072,
        "meteor-128": 0.17566979876385388,
        "meteor-9": 0.2805041299953094,
        "meteor-8": 0.006906077348066298,
        "meteor-26": 0.011436413540713633,
        "meteor-65": 0.138764929481921,
        "meteor-71": 0.011467889908256881,
        "meteor-153": 0.15629096611435447,
        "meteor-182": 0.006890215893431327,
        "meteor-170": 0.15889731766572462,
        "ruby-194": 0.21991701244813278,
        "ruby-32": 0.27800829875518673,
        "ruby-6": 0.016597510373444035,
        "ruby-85": 0.19917012448132776,
        "ruby-76": 0.24481327800829877,
        "ruby-68": 0.27385892116182575,
        "ruby-41": 0.2116182572614108,
        "ruby-29": 0.13692946058091282,
        "ruby-165": 0.21991701244813278,
        "ruby-25": 0.2365145228215768,
        "ruby-178": 0.2116182572614108,
        "ruby-128": 0.23236514522821572,
        "ruby-9": 0.2365145228215768,
        "ruby-8": 0.012448132780082943,
        "ruby-26": 0.016597510373444035,
        "ruby-65": 0.13278008298755184,
        "ruby-71": 0.016597510373444035,
        "ruby-153": 0.2116182572614108,
        "ruby-182": 0.012448132780082943,
        "ruby-170": 0.17842323651452285,
        "codebertscore_f1-194": 0.7716692686080933,
        "codebertscore_f3-194": 0.7624734044075012,
        "codebertscore_f1-32": 0.7770806550979614,
        "codebertscore_f3-32": 0.7516840696334839,
        "codebertscore_f1-6": 0.5283897519111633,
        "codebertscore_f3-6": 0.47330281138420105,
        "codebertscore_f1-85": 0.739379346370697,
        "codebertscore_f3-85": 0.7304086089134216,
        "codebertscore_f1-76": 0.7745340466499329,
        "codebertscore_f3-76": 0.7308348417282104,
        "codebertscore_f1-68": 0.7702000737190247,
        "codebertscore_f3-68": 0.7365296483039856,
        "codebertscore_f1-41": 0.7527490258216858,
        "codebertscore_f3-41": 0.7404327988624573,
        "codebertscore_f1-29": 0.6476315855979919,
        "codebertscore_f3-29": 0.6077961921691895,
        "codebertscore_f1-165": 0.7367379069328308,
        "codebertscore_f3-165": 0.7085374593734741,
        "codebertscore_f1-25": 0.7832643389701843,
        "codebertscore_f3-25": 0.7479779720306396,
        "codebertscore_f1-178": 0.7395070195198059,
        "codebertscore_f3-178": 0.7139143347740173,
        "codebertscore_f1-128": 0.789703369140625,
        "codebertscore_f3-128": 0.7502008080482483,
        "codebertscore_f1-9": 0.7650517821311951,
        "codebertscore_f3-9": 0.7653394937515259,
        "codebertscore_f1-8": 0.49246877431869507,
        "codebertscore_f3-8": 0.4129573106765747,
        "codebertscore_f1-26": 0.5756309628486633,
        "codebertscore_f3-26": 0.5234585404396057,
        "codebertscore_f1-65": 0.6622717976570129,
        "codebertscore_f3-65": 0.6321854591369629,
        "codebertscore_f1-71": 0.5259983539581299,
        "codebertscore_f3-71": 0.4703751802444458,
        "codebertscore_f1-153": 0.7048548460006714,
        "codebertscore_f3-153": 0.6750289797782898,
        "codebertscore_f1-182": 0.5361613631248474,
        "codebertscore_f3-182": 0.47308021783828735,
        "codebertscore_f1-170": 0.739482045173645,
        "codebertscore_f3-170": 0.7133690714836121,
        "codebertscore_s_f1-194": 0.7850309014320374,
        "codebertscore_s_f3-194": 0.772962749004364,
        "codebertscore_s_f1-32": 0.7890492677688599,
        "codebertscore_s_f3-32": 0.7605273127555847,
        "codebertscore_s_f1-6": 0.6063611507415771,
        "codebertscore_s_f3-6": 0.5751482248306274,
        "codebertscore_s_f1-85": 0.7563738822937012,
        "codebertscore_s_f3-85": 0.7446805238723755,
        "codebertscore_s_f1-76": 0.7983895540237427,
        "codebertscore_s_f3-76": 0.7602870464324951,
        "codebertscore_s_f1-68": 0.7844698429107666,
        "codebertscore_s_f3-68": 0.7520685791969299,
        "codebertscore_s_f1-41": 0.7642597556114197,
        "codebertscore_s_f3-41": 0.7441792488098145,
        "codebertscore_s_f1-29": 0.7142780423164368,
        "codebertscore_s_f3-29": 0.6748349070549011,
        "codebertscore_s_f1-165": 0.7672497630119324,
        "codebertscore_s_f3-165": 0.7441211938858032,
        "codebertscore_s_f1-25": 0.7858369946479797,
        "codebertscore_s_f3-25": 0.755524218082428,
        "codebertscore_s_f1-178": 0.7728803157806396,
        "codebertscore_s_f3-178": 0.7512156367301941,
        "codebertscore_s_f1-128": 0.8047834038734436,
        "codebertscore_s_f3-128": 0.7693639397621155,
        "codebertscore_s_f1-9": 0.7762395143508911,
        "codebertscore_s_f3-9": 0.7737977504730225,
        "codebertscore_s_f1-8": 0.6814161539077759,
        "codebertscore_s_f3-8": 0.5800273418426514,
        "codebertscore_s_f1-26": 0.6218262910842896,
        "codebertscore_s_f3-26": 0.589206874370575,
        "codebertscore_s_f1-65": 0.7233178615570068,
        "codebertscore_s_f3-65": 0.6886459589004517,
        "codebertscore_s_f1-71": 0.6126459836959839,
        "codebertscore_s_f3-71": 0.5776278972625732,
        "codebertscore_s_f1-153": 0.7314493656158447,
        "codebertscore_s_f3-153": 0.7104125618934631,
        "codebertscore_s_f1-182": 0.6239950656890869,
        "codebertscore_s_f3-182": 0.5785344243049622,
        "codebertscore_s_f1-170": 0.7817942500114441,
        "codebertscore_s_f3-170": 0.7540091276168823,
        "gpt35_nsnr-194": 4,
        "raw_gpt35_nsnr-194": "4",
        "gpt35_nsnr-32": 4,
        "raw_gpt35_nsnr-32": "4",
        "gpt35_nsnr-6": 2,
        "raw_gpt35_nsnr-6": "2",
        "gpt35_nsnr-85": 4,
        "raw_gpt35_nsnr-85": "4",
        "gpt35_nsnr-76": 4,
        "raw_gpt35_nsnr-76": "4",
        "gpt35_nsnr-68": 4,
        "raw_gpt35_nsnr-68": "4",
        "gpt35_nsnr-41": 4,
        "raw_gpt35_nsnr-41": "4",
        "gpt35_nsnr-29": 4,
        "raw_gpt35_nsnr-29": "4",
        "gpt35_nsnr-165": 3,
        "raw_gpt35_nsnr-165": "3",
        "gpt35_nsnr-25": 4,
        "raw_gpt35_nsnr-25": "4",
        "gpt35_nsnr-178": 4,
        "raw_gpt35_nsnr-178": "4",
        "gpt35_nsnr-128": 4,
        "raw_gpt35_nsnr-128": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-8": 0,
        "raw_gpt35_nsnr-8": "Score: 1",
        "gpt35_nsnr-26": 0,
        "raw_gpt35_nsnr-26": "0",
        "gpt35_nsnr-65": 4,
        "raw_gpt35_nsnr-65": "4",
        "gpt35_nsnr-71": 2,
        "raw_gpt35_nsnr-71": "2",
        "gpt35_nsnr-153": 4,
        "raw_gpt35_nsnr-153": "4",
        "gpt35_nsnr-182": 2,
        "raw_gpt35_nsnr-182": "2",
        "gpt35_nsnr-170": 4,
        "raw_gpt35_nsnr-170": "4",
        "gpt35_nswr-194": 3,
        "raw_gpt35_nswr-194": "3",
        "gpt35_nswr-32": 2,
        "raw_gpt35_nswr-32": "2",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-85": 3,
        "raw_gpt35_nswr-85": "3",
        "gpt35_nswr-76": 3,
        "raw_gpt35_nswr-76": "3",
        "gpt35_nswr-68": 3,
        "raw_gpt35_nswr-68": "3",
        "gpt35_nswr-41": 3,
        "raw_gpt35_nswr-41": "3",
        "gpt35_nswr-29": 3,
        "raw_gpt35_nswr-29": "3",
        "gpt35_nswr-165": 2,
        "raw_gpt35_nswr-165": "2",
        "gpt35_nswr-25": 2,
        "raw_gpt35_nswr-25": "2",
        "gpt35_nswr-178": 3,
        "raw_gpt35_nswr-178": "3",
        "gpt35_nswr-128": 3,
        "raw_gpt35_nswr-128": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-26": 4,
        "raw_gpt35_nswr-26": "4",
        "gpt35_nswr-65": 2,
        "raw_gpt35_nswr-65": "2",
        "gpt35_nswr-71": 2,
        "raw_gpt35_nswr-71": "2",
        "gpt35_nswr-153": 3,
        "raw_gpt35_nswr-153": "3",
        "gpt35_nswr-182": 4,
        "raw_gpt35_nswr-182": "4",
        "gpt35_nswr-170": 3,
        "raw_gpt35_nswr-170": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return list of all prefixes from shortest to longest of the input string\n    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n    public static ArrayList<String> allPrefixes(String string) {\n",
        "snippet": [
            "        List<String> result = new ArrayList<>();\n\n        for (int i = 1; i <= string.length(); i++) {\n            result.add(string.substring(0, i));\n        }\n        return result;\n    }\n}"
        ],
        "simplified": "Return list of all prefixes from shortest to longest of the input string",
        "task_id": "14",
        "139": "ArrayList<String> output = new ArrayList<String>();\n        for (int i = 0; i < string.length(); i++) {\n            output.add(string.substring(0, i + 1));\n        }\n        return output;",
        "grade-139": {
            "execution": 1
        },
        "12": "int N = string.length();\n        ArrayList<String> ret = new ArrayList<String>();\n        for (int i = 0; i < N; i++) {\n            ret.add(string.substring(0, i + 1));\n        }\n        return ret;",
        "grade-12": {
            "execution": 1
        },
        "1": "ArrayList<String> prefixes = new ArrayList<String>();\n        for (int length = 1; length <= string.length(); length++) {\n            prefixes.add(string.substring(0, length));\n        }\n        return prefixes;",
        "grade-1": {
            "execution": 1
        },
        "168": "int prefixSize = string.length();\n        ArrayList<String> prefixes = new ArrayList<String>();\n        while (prefixSize > 0) {\n            prefixes.add(string.substring(0, prefixSize));\n            prefixSize--;\n        }\n        return prefixes;",
        "grade-168": {
            "execution": 0
        },
        "46": "ArrayList<String> res = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            res.add(string.substring(0, i + 1));\n        }\n        return res;",
        "grade-46": {
            "execution": 1
        },
        "36": "ArrayList<String> out = new ArrayList<String>();\n        for (int i = 0; i < string.length(); i++) {\n            out.add(string.substring(0, i + 1));\n        }\n        return out;",
        "grade-36": {
            "execution": 1
        },
        "35": "ArrayList<String> result = new ArrayList<String>();\n        // Add each substring of the string from length 1 to length string.length()\n        for (int length = 1; length <= string.length(); length++) {\n            result.add(string.substring(0, length));\n        }\n        return result;",
        "grade-35": {
            "execution": 1
        },
        "13": "int length = string.length();\n        ArrayList<String> res = new ArrayList<String>();\n        for (int i = 1; i <= length; i++) {\n            res.add(string.substring(0, i));\n        }\n        return res;",
        "grade-13": {
            "execution": 1
        },
        "10": "ArrayList<String> allPrefixes = new ArrayList<String>();\n        for (int i = 0; i < string.length(); i++) {\n            allPrefixes.add(string.substring(0, i + 1));\n        }\n        return allPrefixes;",
        "grade-10": {
            "execution": 1
        },
        "113": "return new ArrayList<String>(Arrays.asList(string.split(\"\")));",
        "grade-113": {
            "execution": 0
        },
        "8": "ArrayList<String> list = new ArrayList<String>();\n        for (int i = 0; i < string.length(); i++) {\n            list.add(string.substring(0, i + 1));\n        }\n        return list;",
        "grade-8": {
            "execution": 1
        },
        "132": "// ArrayList<String> prefixes = new ArrayList<String>();\n        ArrayList<String> prefixes = new ArrayList<String>();\n        for (int i = 0; i < string.length(); i++) {\n            prefixes.add(string.substring(0, i + 1));\n        }\n        return prefixes;",
        "grade-132": {
            "execution": 1
        },
        "74": "ArrayList<String> pref = new ArrayList<String>();\n        for (int i = 0; i < string.length(); i++) {\n            pref.add(string.substring(0, i + 1));\n        }\n        return pref;",
        "grade-74": {
            "execution": 1
        },
        "2": "ArrayList<String> result = new ArrayList<String>();\n        for (int i = 0; i < string.length(); i++) {\n            result.add(string.substring(0, i + 1));\n        }\n        return result;",
        "grade-2": {
            "execution": 1
        },
        "184": "int len = string.length();\n        ArrayList<String> result = new ArrayList<String>();\n        for (int i = 0; i < len; i++) {\n            result.add(string.substring(0, i + 1));\n        }\n        return result;",
        "grade-184": {
            "execution": 1
        },
        "142": "ArrayList<String> toReturn = new ArrayList<String>();\n        for (int i = 0; i < string.length(); i++) {\n            toReturn.add(string.substring(0, i + 1));\n        }\n        return toReturn;",
        "grade-142": {
            "execution": 1
        },
        "34": "ArrayList<String> ret = new ArrayList<String>();\n        int len = string.length();\n        for (int i = 0; i < len; i++) {\n            ret.add(string.substring(0, i + 1));\n        }\n        return ret;",
        "grade-34": {
            "execution": 1
        },
        "153": "ArrayList<String> output = new ArrayList<String>();\n        for (int index = 0; index < string.length(); index++) {\n            output.add(string.substring(0, index + 1));\n        }\n        return output;",
        "grade-153": {
            "execution": 1
        },
        "94": "ArrayList<String> prefixes = new ArrayList<String>();\n        int length = string.length();\n        for (int i = 1; i <= length; i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        return prefixes;",
        "grade-94": {
            "execution": 1
        },
        "196": "ArrayList<String> all_prefixes = new ArrayList<String>();\n        for (int i = 0; i < string.length(); i++) {\n            all_prefixes.add(string.substring(0, i + 1));\n        }\n        return all_prefixes;",
        "grade-196": {
            "execution": 1
        },
        "bleu-139": 0.6608923933576324,
        "bleu-12": 0.6061940645813884,
        "bleu-1": 0.5965341301249644,
        "bleu-168": 0.4277972007454008,
        "bleu-46": 0.7064844041476809,
        "bleu-36": 0.6608923933576324,
        "bleu-35": 0.5271265914540747,
        "bleu-13": 0.7052835239185637,
        "bleu-10": 0.6263976472323726,
        "bleu-113": 0.07898191965796687,
        "bleu-8": 0.6608923933576324,
        "bleu-132": 0.49927861475524277,
        "bleu-74": 0.6608923933576324,
        "bleu-2": 0.7955304302397456,
        "bleu-184": 0.7309137543137,
        "bleu-142": 0.6263976472323726,
        "bleu-34": 0.6061940645813884,
        "bleu-153": 0.5371038484190211,
        "bleu-94": 0.7052835239185637,
        "bleu-196": 0.6608923933576324,
        "codebleu-139": 0.7409443264041837,
        "codebleu-12": 0.7273316298653889,
        "codebleu-1": 0.7990558480390759,
        "codebleu-168": 0.6635805097563742,
        "codebleu-46": 0.7711985895849781,
        "codebleu-36": 0.7409443264041837,
        "codebleu-35": 0.8021924134495284,
        "codebleu-13": 0.8156782710461964,
        "codebleu-10": 0.7409443264041837,
        "codebleu-113": 0.1853953637199539,
        "codebleu-8": 0.7409443264041837,
        "codebleu-132": 0.726858967380797,
        "codebleu-74": 0.7409443264041837,
        "codebleu-2": 0.7616176914205499,
        "codebleu-184": 0.7557085876382929,
        "codebleu-142": 0.7409443264041837,
        "codebleu-34": 0.7361035596899502,
        "codebleu-153": 0.7102319963176232,
        "codebleu-94": 0.8156782710461964,
        "codebleu-196": 0.7409443264041837,
        "chrf-139": 0.7011651124510041,
        "chrf-12": 0.7395820410408426,
        "chrf-1": 0.6435340256633549,
        "chrf-168": 0.5477450273864458,
        "chrf-46": 0.7889893474696283,
        "chrf-36": 0.7117773491622116,
        "chrf-35": 0.720959523479695,
        "chrf-13": 0.791866805891527,
        "chrf-10": 0.6825704857695938,
        "chrf-113": 0.30418542314967223,
        "chrf-8": 0.7123094807455636,
        "chrf-132": 0.6391943694095099,
        "chrf-74": 0.694195875403253,
        "chrf-2": 0.8719700977372775,
        "chrf-184": 0.8507462437139179,
        "chrf-142": 0.6831842057966695,
        "chrf-34": 0.7373518408809637,
        "chrf-153": 0.6585549426470297,
        "chrf-94": 0.7204413550105966,
        "chrf-196": 0.6792778036492766,
        "rougel-139": 0.8648648648648648,
        "rougel-12": 0.7413793103448276,
        "rougel-1": 0.8363636363636363,
        "rougel-168": 0.5486725663716814,
        "rougel-46": 0.8727272727272727,
        "rougel-36": 0.8648648648648648,
        "rougel-35": 0.7656250000000001,
        "rougel-13": 0.8,
        "rougel-10": 0.8421052631578948,
        "rougel-113": 0.358974358974359,
        "rougel-8": 0.8648648648648648,
        "rougel-132": 0.744186046511628,
        "rougel-74": 0.8648648648648648,
        "rougel-2": 0.918918918918919,
        "rougel-184": 0.793103448275862,
        "rougel-142": 0.8421052631578948,
        "rougel-34": 0.7413793103448276,
        "rougel-153": 0.7927927927927927,
        "rougel-94": 0.8,
        "rougel-196": 0.8648648648648648,
        "meteor-139": 0.8672505633239628,
        "meteor-12": 0.8430755395683452,
        "meteor-1": 0.821863722289053,
        "meteor-168": 0.6350305153707052,
        "meteor-46": 0.8781303244860096,
        "meteor-36": 0.8672505633239628,
        "meteor-35": 0.8658591549295774,
        "meteor-13": 0.8831963963963965,
        "meteor-10": 0.8625542606344828,
        "meteor-113": 0.2657419324085991,
        "meteor-8": 0.8542908996629505,
        "meteor-132": 0.8546256590509667,
        "meteor-74": 0.8672505633239628,
        "meteor-2": 0.9299928049055509,
        "meteor-184": 0.914285659404125,
        "meteor-142": 0.8625542606344828,
        "meteor-34": 0.8495539568345323,
        "meteor-153": 0.7859604310904976,
        "meteor-94": 0.8798846846846848,
        "meteor-196": 0.8672505633239628,
        "ruby-139": 0.8035714285714286,
        "ruby-12": 0.5901639344262295,
        "ruby-1": 0.8,
        "ruby-168": 0.3275862068965517,
        "ruby-46": 0.8181818181818181,
        "ruby-36": 0.8035714285714286,
        "ruby-35": 0.6438356164383562,
        "ruby-13": 0.6666666666666667,
        "ruby-10": 0.7627118644067796,
        "ruby-113": 0.23636363636363633,
        "ruby-8": 0.8035714285714286,
        "ruby-132": 0.6081081081081081,
        "ruby-74": 0.8035714285714286,
        "ruby-2": 0.8571428571428572,
        "ruby-184": 0.639344262295082,
        "ruby-142": 0.7627118644067796,
        "ruby-34": 0.5901639344262295,
        "ruby-153": 0.7321428571428572,
        "ruby-94": 0.6666666666666667,
        "ruby-196": 0.8035714285714286,
        "codebertscore_f1-139": 0.9474667310714722,
        "codebertscore_f3-139": 0.956074059009552,
        "codebertscore_f1-12": 0.917857825756073,
        "codebertscore_f3-12": 0.9316584467887878,
        "codebertscore_f1-1": 0.9118476510047913,
        "codebertscore_f3-1": 0.9241217970848083,
        "codebertscore_f1-168": 0.8396496176719666,
        "codebertscore_f3-168": 0.8503512144088745,
        "codebertscore_f1-46": 0.9514129757881165,
        "codebertscore_f3-46": 0.9594273567199707,
        "codebertscore_f1-36": 0.9458212852478027,
        "codebertscore_f3-36": 0.9542906284332275,
        "codebertscore_f1-35": 0.8954343795776367,
        "codebertscore_f3-35": 0.9255461692810059,
        "codebertscore_f1-13": 0.9361836314201355,
        "codebertscore_f3-13": 0.9452347159385681,
        "codebertscore_f1-10": 0.9006121754646301,
        "codebertscore_f3-10": 0.9291001558303833,
        "codebertscore_f1-113": 0.7284651398658752,
        "codebertscore_f3-113": 0.7073367238044739,
        "codebertscore_f1-8": 0.9411152005195618,
        "codebertscore_f3-8": 0.9493229389190674,
        "codebertscore_f1-132": 0.8808123469352722,
        "codebertscore_f3-132": 0.910048246383667,
        "codebertscore_f1-74": 0.9353546500205994,
        "codebertscore_f3-74": 0.9431298971176147,
        "codebertscore_f1-2": 0.9568665027618408,
        "codebertscore_f3-2": 0.9659172296524048,
        "codebertscore_f1-184": 0.926365077495575,
        "codebertscore_f3-184": 0.9411560893058777,
        "codebertscore_f1-142": 0.9299243092536926,
        "codebertscore_f3-142": 0.9411066174507141,
        "codebertscore_f1-34": 0.9285826683044434,
        "codebertscore_f3-34": 0.9416212439537048,
        "codebertscore_f1-153": 0.9364110827445984,
        "codebertscore_f3-153": 0.9444975256919861,
        "codebertscore_f1-94": 0.9204827547073364,
        "codebertscore_f3-94": 0.9365699291229248,
        "codebertscore_f1-196": 0.908136248588562,
        "codebertscore_f3-196": 0.9307966828346252,
        "codebertscore_s_f1-139": 0.9580098390579224,
        "codebertscore_s_f3-139": 0.9675473570823669,
        "codebertscore_s_f1-12": 0.9364569187164307,
        "codebertscore_s_f3-12": 0.949193000793457,
        "codebertscore_s_f1-1": 0.9277055263519287,
        "codebertscore_s_f3-1": 0.9384870529174805,
        "codebertscore_s_f1-168": 0.8622949123382568,
        "codebertscore_s_f3-168": 0.8729197978973389,
        "codebertscore_s_f1-46": 0.9613718390464783,
        "codebertscore_s_f3-46": 0.9704833626747131,
        "codebertscore_s_f1-36": 0.9565420746803284,
        "codebertscore_s_f3-36": 0.9659297466278076,
        "codebertscore_s_f1-35": 0.9086155891418457,
        "codebertscore_s_f3-35": 0.9394863247871399,
        "codebertscore_s_f1-13": 0.9523887634277344,
        "codebertscore_s_f3-13": 0.9597615599632263,
        "codebertscore_s_f1-10": 0.9141967296600342,
        "codebertscore_s_f3-10": 0.9416356086730957,
        "codebertscore_s_f1-113": 0.7641610503196716,
        "codebertscore_s_f3-113": 0.7437013387680054,
        "codebertscore_s_f1-8": 0.9535694718360901,
        "codebertscore_s_f3-8": 0.962790846824646,
        "codebertscore_s_f1-132": 0.8984286189079285,
        "codebertscore_s_f3-132": 0.9217474460601807,
        "codebertscore_s_f1-74": 0.9450647830963135,
        "codebertscore_s_f3-74": 0.9539415240287781,
        "codebertscore_s_f1-2": 0.9678991436958313,
        "codebertscore_s_f3-2": 0.9779632687568665,
        "codebertscore_s_f1-184": 0.9434258341789246,
        "codebertscore_s_f3-184": 0.9569840431213379,
        "codebertscore_s_f1-142": 0.9433271884918213,
        "codebertscore_s_f3-142": 0.955702543258667,
        "codebertscore_s_f1-34": 0.941663384437561,
        "codebertscore_s_f3-34": 0.955047070980072,
        "codebertscore_s_f1-153": 0.9466208219528198,
        "codebertscore_s_f3-153": 0.9555960297584534,
        "codebertscore_s_f1-94": 0.9325436353683472,
        "codebertscore_s_f3-94": 0.9474285244941711,
        "codebertscore_s_f1-196": 0.921770453453064,
        "codebertscore_s_f3-196": 0.9440751075744629,
        "gpt35_nsnr-139": 4,
        "raw_gpt35_nsnr-139": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-168": 4,
        "raw_gpt35_nsnr-168": "4",
        "gpt35_nsnr-46": 4,
        "raw_gpt35_nsnr-46": "4",
        "gpt35_nsnr-36": 4,
        "raw_gpt35_nsnr-36": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-113": 2,
        "raw_gpt35_nsnr-113": "2",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-132": 4,
        "raw_gpt35_nsnr-132": "4",
        "gpt35_nsnr-74": 4,
        "raw_gpt35_nsnr-74": "4",
        "gpt35_nsnr-2": 4,
        "raw_gpt35_nsnr-2": "4",
        "gpt35_nsnr-184": 4,
        "raw_gpt35_nsnr-184": "4",
        "gpt35_nsnr-142": 4,
        "raw_gpt35_nsnr-142": "4",
        "gpt35_nsnr-34": 4,
        "raw_gpt35_nsnr-34": "4",
        "gpt35_nsnr-153": 4,
        "raw_gpt35_nsnr-153": "4",
        "gpt35_nsnr-94": 4,
        "raw_gpt35_nsnr-94": "4",
        "gpt35_nsnr-196": 4,
        "raw_gpt35_nsnr-196": "4",
        "gpt35_nswr-139": 4,
        "raw_gpt35_nswr-139": "4",
        "gpt35_nswr-12": 4,
        "raw_gpt35_nswr-12": "4",
        "gpt35_nswr-1": 4,
        "raw_gpt35_nswr-1": "4",
        "gpt35_nswr-168": 3,
        "raw_gpt35_nswr-168": "3",
        "gpt35_nswr-46": 4,
        "raw_gpt35_nswr-46": "4",
        "gpt35_nswr-36": 4,
        "raw_gpt35_nswr-36": "4",
        "gpt35_nswr-35": 4,
        "raw_gpt35_nswr-35": "4",
        "gpt35_nswr-13": 4,
        "raw_gpt35_nswr-13": "4",
        "gpt35_nswr-10": 4,
        "raw_gpt35_nswr-10": "4",
        "gpt35_nswr-113": 2,
        "raw_gpt35_nswr-113": "2",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-132": 4,
        "raw_gpt35_nswr-132": "4",
        "gpt35_nswr-74": 4,
        "raw_gpt35_nswr-74": "4",
        "gpt35_nswr-2": 4,
        "raw_gpt35_nswr-2": "4",
        "gpt35_nswr-184": 4,
        "raw_gpt35_nswr-184": "4",
        "gpt35_nswr-142": 4,
        "raw_gpt35_nswr-142": "4",
        "gpt35_nswr-34": 4,
        "raw_gpt35_nswr-34": "4",
        "gpt35_nswr-153": 4,
        "raw_gpt35_nswr-153": "4",
        "gpt35_nswr-94": 4,
        "raw_gpt35_nswr-94": "4",
        "gpt35_nswr-196": 4,
        "raw_gpt35_nswr-196": "4"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given list of numbers (of at least two elements), apply a linear transform to that list,\n    // such that the smallest number will become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float> rescaleToUnit(ArrayList<Float> numbers) {\n",
        "snippet": [
            "        double min_number = Collections.min(numbers);\n        double max_number = Collections.max(numbers);\n        List<Double> result = new ArrayList<>();\n        for (double x : numbers) {\n            result.add((x - min_number) / (max_number - min_number));\n        }\n        return result;\n    }\n}"
        ],
        "simplified": "Given list of numbers (of at least two elements), apply a linear transform to that list, such that the smallest number will become 0 and the largest will become 1",
        "task_id": "21",
        "168": "Float max = numbers.stream().max(Float::compare).get();\n        Float min = numbers.stream().min(Float::compare).get();\n        return numbers.stream().map(e -> (e - min) / (max - min)).collect(Collectors.toCollection(ArrayList::new));",
        "grade-168": {
            "execution": 1
        },
        "29": "Float min = Collections.min(numbers);\n        Float max = Collections.max(numbers);\n        ArrayList<Float> rescaled = new ArrayList<Float>();\n        for (Float number : numbers) {\n            Float newNumber = (number - min) / (max - min);\n            rescaled.add(newNumber);\n        }\n        return rescaled;",
        "grade-29": {
            "execution": 1
        },
        "6": "ArrayList<Float> result = new ArrayList<Float>();\n        Float min = Collections.min(numbers);\n        Float max = Collections.max(numbers);\n        for (Float number : numbers) {\n            Float normalizedNumber = (number - min) / (max - min);\n            result.add(normalizedNumber);\n        }\n        return result;",
        "grade-6": {
            "execution": 1
        },
        "195": "// find the smallest number\n        float min = numbers.get(0);\n        for (float num : numbers) {\n            if (num < min) {\n                min = num;\n            }\n        }\n        // find the largest number\n        float max = numbers.get(0);\n        for (float num : numbers) {\n            if (num > max) {\n                max = num;\n            }\n        }\n        // scale each number to be between 0 and 1\n        ArrayList<Float> result = new ArrayList<Float>();\n        for (float num : numbers) {\n            result.add((num - min) / (max - min));\n        }\n        return result;",
        "grade-195": {
            "execution": 1
        },
        "71": "Float max = numbers.stream().max(Float::compare).get();\n        Float min = numbers.stream().min(Float::compare).get();\n        return (ArrayList<Float>) numbers.stream().map(x -> (x - min) / (max - min)).collect(Collectors.toList());",
        "grade-71": {
            "execution": 1
        },
        "63": "float max = numbers.stream().max(Float::compare).get();\n        float min = numbers.stream().min(Float::compare).get();\n        float transform = 0.0f;\n        float divisor = (max - min);\n        ArrayList<Float> out = new ArrayList<Float>();\n        for (Float i : numbers) {\n            transform = ((i - min) / divisor);\n            out.add(transform);\n        }\n        return out;",
        "grade-63": {
            "execution": 1
        },
        "58": "float min = numbers.get(0);\n        float max = numbers.get(0);\n        for (int i = 1; i < numbers.size(); i++) {\n            float number = numbers.get(i);\n            if (number < min) {\n                min = number;\n            }\n            if (number > max) {\n                max = number;\n            }\n        }\n        if (min == max) {\n            return new ArrayList<>(Collections.nCopies(numbers.size(), 0.0f));\n        }\n        float ratio = 1 / (max - min);\n        ArrayList<Float> result = new ArrayList<>(numbers.size());\n        for (int i = 0; i < numbers.size(); i++) {\n            float number = numbers.get(i);\n            result.add((number - min) * ratio);\n        }\n        return result;",
        "grade-58": {
            "execution": 1
        },
        "36": "ArrayList<Float> list = new ArrayList<Float>();\n        float max = Collections.max(numbers);\n        float min = Collections.min(numbers);\n        for (float number : numbers) {\n            list.add((number - min) / (max - min));\n        }\n        return list;",
        "grade-36": {
            "execution": 1
        },
        "193": "if (numbers.size() < 2) {\n            throw new IllegalArgumentException(\"List must contain at least two elements\");\n        }\n        Float min = Collections.min(numbers);\n        Float max = Collections.max(numbers);\n        if (min.equals(max)) {\n            throw new IllegalArgumentException(\"Min and max values must not be equal\");\n        }\n        ArrayList<Float> rescaled = new ArrayList<>();\n        for (Float num : numbers) {\n            Float rescaledNum = (num - min) / (max - min);\n            rescaled.add(rescaledNum);\n        }\n        return rescaled;",
        "grade-193": {
            "execution": 1
        },
        "27": "Float min = Collections.min(numbers);\n        Float max = Collections.max(numbers);\n        ArrayList<Float> result = new ArrayList<Float>();\n        for (Float number : numbers) {\n            result.add((number - min) / (max - min));\n        }\n        return result;",
        "grade-27": {
            "execution": 1
        },
        "178": "ArrayList<Float> transformed = new ArrayList<Float>();\n        float maximum = numbers.get(0);\n        float minimum = numbers.get(0);\n        for (int i = 0; i < numbers.size(); i++) {\n            if (numbers.get(i) > maximum) {\n                maximum = numbers.get(i);\n            }\n            if (numbers.get(i) < minimum) {\n                minimum = numbers.get(i);\n            }\n        }\n        for (int i = 0; i < numbers.size(); i++) {\n            transformed.add((numbers.get(i) - minimum) / (maximum - minimum));\n        }\n        return transformed;",
        "grade-178": {
            "execution": 1
        },
        "143": "float largest = numbers.get(0);\n        float smallest = numbers.get(0);\n        for (float number : numbers) {\n            if (number > largest) {\n                largest = number;\n            }\n            if (number < smallest) {\n                smallest = number;\n            }\n        }\n        float diff = largest - smallest;\n        ArrayList<Float> output = new ArrayList<Float>();\n        for (float number : numbers) {\n            output.add((number - smallest) / diff);\n        }\n        return output;",
        "grade-143": {
            "execution": 1
        },
        "23": "ArrayList<Float> ans = new ArrayList<Float>();\n        float max = Collections.max(numbers);\n        float min = Collections.min(numbers);\n        for (float n : numbers) {\n            ans.add((n - min) / (max - min));\n        }\n        return ans;",
        "grade-23": {
            "execution": 1
        },
        "156": "float max = Collections.max(numbers);\n        float min = Collections.min(numbers);\n        float range = max - min;\n        return numbers.stream().map(n -> (n - min) / range).collect(Collectors.toCollection(ArrayList::new));",
        "grade-156": {
            "execution": 1
        },
        "110": "float maxNumber = Collections.max(numbers);\n        float minNumber = Collections.min(numbers);\n        float maxMinusMin = maxNumber - minNumber;\n        ArrayList<Float> rescaled = new ArrayList<Float>();\n        for (float number : numbers) {\n            rescaled.add((number - minNumber) / maxMinusMin);\n        }\n        return rescaled;",
        "grade-110": {
            "execution": 1
        },
        "8": "float min = Float.MAX_VALUE;\n        float max = Float.MIN_VALUE;\n        for (float number : numbers) {\n            if (number < min) {\n                min = number;\n            }\n            if (number > max) {\n                max = number;\n            }\n        }\n        for (int i = 0; i < numbers.size(); i++) {\n            numbers.set(i, (numbers.get(i) - min) / (max - min));\n        }\n        return numbers;",
        "grade-8": {
            "execution": 1
        },
        "7": "ArrayList<Float> rescaled = new ArrayList<Float>();\n        float min = Float.MAX_VALUE;\n        float max = Float.MIN_VALUE;\n        for (float number : numbers) {\n            if (number < min) {\n                min = number;\n            }\n            if (number > max) {\n                max = number;\n            }\n        }\n        float delta = max - min;\n        if (delta == 0) {\n            return numbers;\n        }\n        for (float number : numbers) {\n            rescaled.add((number - min) / delta);\n        }\n        return rescaled;",
        "grade-7": {
            "execution": 1
        },
        "24": "float min = numbers.get(0);\n        float max = numbers.get(0);\n        for (float val : numbers) {\n            if (val < min) {\n                min = val;\n            }\n            if (val > max) {\n                max = val;\n            }\n        }\n        if (min == max) {\n            System.out.println(\"Warning: all numbers are the same\");\n            return numbers;\n        }\n        for (int i = 0; i < numbers.size(); i++) {\n            numbers.set(i, (numbers.get(i) - min) / (max - min));\n        }\n        return numbers;",
        "grade-24": {
            "execution": 1
        },
        "56": "float max = Collections.max(numbers);\n        float min = Collections.min(numbers);\n        return numbers.stream().map(x -> (x - min) / (max - min)).collect(Collectors.toCollection(ArrayList::new));",
        "grade-56": {
            "execution": 1
        },
        "60": "float min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n        ArrayList<Float> scaled = new ArrayList<Float>();\n        for (float n : numbers) {\n            scaled.add((n - min) / (max - min));\n        }\n        return scaled;",
        "grade-60": {
            "execution": 1
        },
        "bleu-168": 0.07265951222543947,
        "bleu-29": 0.41151103703140945,
        "bleu-6": 0.4769442650632364,
        "bleu-195": 0.22440269390012701,
        "bleu-71": 0.08339652259987329,
        "bleu-63": 0.17974603193282504,
        "bleu-58": 0.13723793430427558,
        "bleu-36": 0.4792667721265764,
        "bleu-193": 0.24919993717113492,
        "bleu-27": 0.5926761300137113,
        "bleu-178": 0.12717130930122583,
        "bleu-143": 0.19143366381258303,
        "bleu-23": 0.4792667721265764,
        "bleu-156": 0.2829227542795504,
        "bleu-110": 0.38574294963120936,
        "bleu-8": 0.12486982178832179,
        "bleu-7": 0.16322119733002757,
        "bleu-24": 0.10323181181922392,
        "bleu-56": 0.3031810390070895,
        "bleu-60": 0.4857889076975754,
        "codebleu-168": 0.5265801490026435,
        "codebleu-29": 0.7483143759614926,
        "codebleu-6": 0.7630147186369076,
        "codebleu-195": 0.6891576014113939,
        "codebleu-71": 0.5404470079307858,
        "codebleu-63": 0.6744822892403817,
        "codebleu-58": 0.6743948381370927,
        "codebleu-36": 0.7982096820075536,
        "codebleu-193": 0.7022639063047583,
        "codebleu-27": 0.8134782304058288,
        "codebleu-178": 0.6598215239073991,
        "codebleu-143": 0.6463129813278705,
        "codebleu-23": 0.7982096820075536,
        "codebleu-156": 0.6361840386895227,
        "codebleu-110": 0.7314996896432135,
        "codebleu-8": 0.6463514809880045,
        "codebleu-7": 0.6706245879801336,
        "codebleu-24": 0.6444238842673532,
        "codebleu-56": 0.6148831646842026,
        "codebleu-60": 0.7982096820075536,
        "chrf-168": 0.31164128526269813,
        "chrf-29": 0.5737475987952781,
        "chrf-6": 0.6237499213510636,
        "chrf-195": 0.4870500383655609,
        "chrf-71": 0.3016445437585853,
        "chrf-63": 0.33901829980993187,
        "chrf-58": 0.4713583413449321,
        "chrf-36": 0.5419163789776192,
        "chrf-193": 0.4798090569328279,
        "chrf-27": 0.6349386711615375,
        "chrf-178": 0.3670582694576903,
        "chrf-143": 0.3911323533090836,
        "chrf-23": 0.49506231414028823,
        "chrf-156": 0.40433408739054644,
        "chrf-110": 0.5979715918920032,
        "chrf-8": 0.3376943073467061,
        "chrf-7": 0.43089694549694824,
        "chrf-24": 0.33452775732050877,
        "chrf-56": 0.41734053484029,
        "chrf-60": 0.49975676405074465,
        "rougel-168": 0.3673469387755102,
        "rougel-29": 0.6715328467153284,
        "rougel-6": 0.510948905109489,
        "rougel-195": 0.49230769230769234,
        "rougel-71": 0.38926174496644295,
        "rougel-63": 0.47058823529411764,
        "rougel-58": 0.350597609561753,
        "rougel-36": 0.5692307692307692,
        "rougel-193": 0.4742268041237113,
        "rougel-27": 0.8000000000000002,
        "rougel-178": 0.3490566037735849,
        "rougel-143": 0.4939759036144579,
        "rougel-23": 0.5692307692307692,
        "rougel-156": 0.43750000000000006,
        "rougel-110": 0.619718309859155,
        "rougel-8": 0.4,
        "rougel-7": 0.39534883720930236,
        "rougel-24": 0.3589743589743589,
        "rougel-56": 0.44800000000000006,
        "rougel-60": 0.7538461538461538,
        "meteor-168": 0.32750937550615283,
        "meteor-29": 0.6513870108662234,
        "meteor-6": 0.6903324912413428,
        "meteor-195": 0.6818181818181819,
        "meteor-71": 0.349118655793361,
        "meteor-63": 0.563272121295622,
        "meteor-58": 0.49676129517494383,
        "meteor-36": 0.6584019479063211,
        "meteor-193": 0.5779101336805387,
        "meteor-27": 0.7883477469276287,
        "meteor-178": 0.4369292768084953,
        "meteor-143": 0.5040801808662416,
        "meteor-23": 0.6835164835164834,
        "meteor-156": 0.4736159336419754,
        "meteor-110": 0.5504466074654769,
        "meteor-8": 0.41150689905591864,
        "meteor-7": 0.4688286190965711,
        "meteor-24": 0.391363204696538,
        "meteor-56": 0.37474321705426356,
        "meteor-60": 0.7318713356614232,
        "ruby-168": 0.23170731707317072,
        "ruby-29": 0.6111111111111112,
        "ruby-6": 0.36111111111111116,
        "ruby-195": 0.3538461538461538,
        "ruby-71": 0.26190476190476186,
        "ruby-63": 0.34285714285714286,
        "ruby-58": 0.21505376344086025,
        "ruby-36": 0.4461538461538461,
        "ruby-193": 0.3410852713178295,
        "ruby-27": 0.7692307692307692,
        "ruby-178": 0.23809523809523814,
        "ruby-143": 0.3465346534653465,
        "ruby-23": 0.4461538461538461,
        "ruby-156": 0.29230769230769227,
        "ruby-110": 0.5194805194805194,
        "ruby-8": 0.28421052631578947,
        "ruby-7": 0.25233644859813087,
        "ruby-24": 0.25384615384615383,
        "ruby-56": 0.3076923076923077,
        "ruby-60": 0.7230769230769231,
        "codebertscore_f1-168": 0.7795857191085815,
        "codebertscore_f3-168": 0.7945492267608643,
        "codebertscore_f1-29": 0.9113044142723083,
        "codebertscore_f3-29": 0.9186607599258423,
        "codebertscore_f1-6": 0.9072631597518921,
        "codebertscore_f3-6": 0.9147014617919922,
        "codebertscore_f1-195": 0.7709377408027649,
        "codebertscore_f3-195": 0.7976462244987488,
        "codebertscore_f1-71": 0.7980112433433533,
        "codebertscore_f3-71": 0.8132257461547852,
        "codebertscore_f1-63": 0.814749002456665,
        "codebertscore_f3-63": 0.8354315757751465,
        "codebertscore_f1-58": 0.7688144445419312,
        "codebertscore_f3-58": 0.8123182058334351,
        "codebertscore_f1-36": 0.9022457599639893,
        "codebertscore_f3-36": 0.8987826704978943,
        "codebertscore_f1-193": 0.7908690571784973,
        "codebertscore_f3-193": 0.8325443267822266,
        "codebertscore_f1-27": 0.944905698299408,
        "codebertscore_f3-27": 0.9388139247894287,
        "codebertscore_f1-178": 0.7640402317047119,
        "codebertscore_f3-178": 0.7845075130462646,
        "codebertscore_f1-143": 0.8018786907196045,
        "codebertscore_f3-143": 0.8104918599128723,
        "codebertscore_f1-23": 0.8991193175315857,
        "codebertscore_f3-23": 0.8942676782608032,
        "codebertscore_f1-156": 0.8239666223526001,
        "codebertscore_f3-156": 0.8301665186882019,
        "codebertscore_f1-110": 0.8936187624931335,
        "codebertscore_f3-110": 0.9115833640098572,
        "codebertscore_f1-8": 0.7988824844360352,
        "codebertscore_f3-8": 0.8047292232513428,
        "codebertscore_f1-7": 0.789866030216217,
        "codebertscore_f3-7": 0.8107708096504211,
        "codebertscore_f1-24": 0.754791259765625,
        "codebertscore_f3-24": 0.7832594513893127,
        "codebertscore_f1-56": 0.8354442119598389,
        "codebertscore_f3-56": 0.8369524478912354,
        "codebertscore_f1-60": 0.9343798160552979,
        "codebertscore_f3-60": 0.9276917576789856,
        "codebertscore_s_f1-168": 0.7857796549797058,
        "codebertscore_s_f3-168": 0.803290605545044,
        "codebertscore_s_f1-29": 0.9082234501838684,
        "codebertscore_s_f3-29": 0.9161719679832458,
        "codebertscore_s_f1-6": 0.9082722663879395,
        "codebertscore_s_f3-6": 0.9171566367149353,
        "codebertscore_s_f1-195": 0.8126534223556519,
        "codebertscore_s_f3-195": 0.8393679857254028,
        "codebertscore_s_f1-71": 0.8006818890571594,
        "codebertscore_s_f3-71": 0.8177084922790527,
        "codebertscore_s_f1-63": 0.8194503784179688,
        "codebertscore_s_f3-63": 0.8441561460494995,
        "codebertscore_s_f1-58": 0.7929674983024597,
        "codebertscore_s_f3-58": 0.8371750116348267,
        "codebertscore_s_f1-36": 0.9080792665481567,
        "codebertscore_s_f3-36": 0.9060866236686707,
        "codebertscore_s_f1-193": 0.8047928810119629,
        "codebertscore_s_f3-193": 0.8478763103485107,
        "codebertscore_s_f1-27": 0.941983163356781,
        "codebertscore_s_f3-27": 0.9370300769805908,
        "codebertscore_s_f1-178": 0.7927327752113342,
        "codebertscore_s_f3-178": 0.8114650845527649,
        "codebertscore_s_f1-143": 0.8182254433631897,
        "codebertscore_s_f3-143": 0.8249424695968628,
        "codebertscore_s_f1-23": 0.9067680239677429,
        "codebertscore_s_f3-23": 0.9037368297576904,
        "codebertscore_s_f1-156": 0.8333986401557922,
        "codebertscore_s_f3-156": 0.8414905071258545,
        "codebertscore_s_f1-110": 0.8981376886367798,
        "codebertscore_s_f3-110": 0.9157074689865112,
        "codebertscore_s_f1-8": 0.8107417225837708,
        "codebertscore_s_f3-8": 0.8160600066184998,
        "codebertscore_s_f1-7": 0.8185204863548279,
        "codebertscore_s_f3-7": 0.8338584899902344,
        "codebertscore_s_f1-24": 0.7810931205749512,
        "codebertscore_s_f3-24": 0.799104630947113,
        "codebertscore_s_f1-56": 0.8414275646209717,
        "codebertscore_s_f3-56": 0.8446798920631409,
        "codebertscore_s_f1-60": 0.9309267401695251,
        "codebertscore_s_f3-60": 0.9252956509590149,
        "gpt35_nsnr-168": 4,
        "raw_gpt35_nsnr-168": "4",
        "gpt35_nsnr-29": 4,
        "raw_gpt35_nsnr-29": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-195": 4,
        "raw_gpt35_nsnr-195": "4",
        "gpt35_nsnr-71": 4,
        "raw_gpt35_nsnr-71": "4",
        "gpt35_nsnr-63": 4,
        "raw_gpt35_nsnr-63": "4",
        "gpt35_nsnr-58": 4,
        "raw_gpt35_nsnr-58": "4",
        "gpt35_nsnr-36": 4,
        "raw_gpt35_nsnr-36": "4",
        "gpt35_nsnr-193": 4,
        "raw_gpt35_nsnr-193": "4",
        "gpt35_nsnr-27": 4,
        "raw_gpt35_nsnr-27": "4",
        "gpt35_nsnr-178": 4,
        "raw_gpt35_nsnr-178": "4",
        "gpt35_nsnr-143": 4,
        "raw_gpt35_nsnr-143": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-156": 4,
        "raw_gpt35_nsnr-156": "4",
        "gpt35_nsnr-110": 4,
        "raw_gpt35_nsnr-110": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-24": 4,
        "raw_gpt35_nsnr-24": "4",
        "gpt35_nsnr-56": 4,
        "raw_gpt35_nsnr-56": "4",
        "gpt35_nsnr-60": 4,
        "raw_gpt35_nsnr-60": "4",
        "gpt35_nswr-168": 4,
        "raw_gpt35_nswr-168": "4",
        "gpt35_nswr-29": 4,
        "raw_gpt35_nswr-29": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-195": 4,
        "raw_gpt35_nswr-195": "4",
        "gpt35_nswr-71": 4,
        "raw_gpt35_nswr-71": "4",
        "gpt35_nswr-63": 4,
        "raw_gpt35_nswr-63": "4",
        "gpt35_nswr-58": 4,
        "raw_gpt35_nswr-58": "4",
        "gpt35_nswr-36": 4,
        "raw_gpt35_nswr-36": "4",
        "gpt35_nswr-193": 4,
        "raw_gpt35_nswr-193": "4",
        "gpt35_nswr-27": 4,
        "raw_gpt35_nswr-27": "4",
        "gpt35_nswr-178": 4,
        "raw_gpt35_nswr-178": "4",
        "gpt35_nswr-143": 3,
        "raw_gpt35_nswr-143": "3",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-156": 4,
        "raw_gpt35_nswr-156": "4",
        "gpt35_nswr-110": 4,
        "raw_gpt35_nswr-110": "4",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-24": 4,
        "raw_gpt35_nswr-24": "4",
        "gpt35_nswr-56": 4,
        "raw_gpt35_nswr-56": "4",
        "gpt35_nswr-60": 4,
        "raw_gpt35_nswr-60": "4"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    // 1.0\n    public static float meanAbsoluteDeviation(ArrayList<Float> numbers) {\n",
        "snippet": [
            "        double sum = 0.0;\n        for (double num : numbers) {\n            sum += num;\n        }\n        double mean = sum / numbers.size();\n        double sum_abs_diff = 0.0;\n        for (double num : numbers) {\n            sum_abs_diff += Math.abs(num - mean);\n        }\n        return sum_abs_diff / numbers.size();\n    }\n}"
        ],
        "simplified": "For a given list of input numbers, calculate Mean Absolute Deviation around the mean of this dataset. Mean Absolute Deviation is the average absolute difference between each element and a centerpoint (mean in this case): MAD = average | x - x_mean |",
        "task_id": "4",
        "169": "float mean = mean(numbers);\n        float sum_absolute_deviations = 0;\n        for (Float f : numbers) {\n            sum_absolute_deviations += Math.abs(f - mean);\n        }\n        return sum_absolute_deviations / numbers.size();",
        "grade-169": {
            "execution": 0
        },
        "28": "float mean = 0;\n        for (Float i : numbers) {\n            mean += i;\n        }\n        mean /= numbers.size();\n        float meanAbsoluteDeviation = 0;\n        for (Float i : numbers) {\n            meanAbsoluteDeviation += Math.abs(i - mean);\n        }\n        meanAbsoluteDeviation /= numbers.size();\n        return meanAbsoluteDeviation;",
        "grade-28": {
            "execution": 1
        },
        "6": "// Your code here!\n        float mean = (float) 0.0;\n        float mad = (float) 0.0;\n        float absoluteDifference = (float) 0.0;\n        for (int i = 0; i < numbers.size(); i++) {\n            mean += numbers.get(i);\n        }\n        mean = mean / numbers.size();\n        for (int i = 0; i < numbers.size(); i++) {\n            absoluteDifference += Math.abs(numbers.get(i) - mean);\n        }\n        mad = absoluteDifference / numbers.size();\n        return mad;",
        "grade-6": {
            "execution": 1
        },
        "196": "float avg = 0;\n        float numerator = 0;\n        float denominator = numbers.size();\n        for (int i = 0; i < numbers.size(); i++) {\n            avg += numbers.get(i);\n        }\n        avg = avg / denominator;\n        for (int i = 0; i < numbers.size(); i++) {\n            numerator += Math.abs(numbers.get(i) - avg);\n        }\n        numerator = numerator / denominator;\n        return numerator;",
        "grade-196": {
            "execution": 1
        },
        "71": "// TODO: implement this method\n        return -1;",
        "grade-71": {
            "execution": 0
        },
        "63": "// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n        // 1.0\n        float sum = 0.0f;\n        for (float i : numbers) {\n            sum += i;\n        }\n        float mean = sum / numbers.size();\n        float sum_of_diffs = 0.0f;\n        for (float i : numbers) {\n            sum_of_diffs += Math.abs(i - mean);\n        }\n        return sum_of_diffs / numbers.size();",
        "grade-63": {
            "execution": 1
        },
        "58": "float mean = mean(numbers);\n        float sum = 0;\n        for (float num : numbers) {\n            sum += Math.abs(num - mean);\n        }\n        return sum / numbers.size();",
        "grade-58": {
            "execution": 0
        },
        "35": "float sum = 0;\n        float mean = 0;\n        float mad = 0;\n        float abs = 0;\n        for (float x : numbers) {\n            sum += x;\n        }\n        mean = sum / numbers.size();\n        for (float x : numbers) {\n            abs += Math.abs(x - mean);\n        }\n        mad = abs / numbers.size();\n        return mad;",
        "grade-35": {
            "execution": 1
        },
        "195": "float sum = numbers.stream().reduce(0.0f, (acc, x) -> acc + x);\n        float mean = sum / numbers.size();\n        float sum_squared_differences = numbers.stream().reduce(0.0f, (acc, x) -> acc + (x - mean) * (x - mean));\n        float mean_of_squared_differences = sum_squared_differences / numbers.size();\n        return (float) Math.sqrt(mean_of_squared_differences);",
        "grade-195": {
            "execution": 0
        },
        "26": "// Insert code here!\n        float total = 0.0f;\n        float mean = numbers.stream().reduce(0.0f, (subtotal, element) -> subtotal + element) / numbers.size();\n        for (float num : numbers) {\n            total += Math.abs(num - mean);\n        }\n        return total / numbers.size();",
        "grade-26": {
            "execution": 1
        },
        "180": "// Calculate mean of this dataset\n        float sum = 0;\n        for (Float n : numbers) {\n            sum += n;\n        }\n        float mean = sum / numbers.size();\n        // Calculate absolute difference between each element and mean\n        ArrayList<Float> absoluteDifferences = new ArrayList<Float>();\n        for (Float n : numbers) {\n            absoluteDifferences.add(Math.abs(n - mean));\n        }\n        // Calculate mean of the absolute differences\n        float MAD = 0;\n        for (Float n : absoluteDifferences) {\n            MAD += n;\n        }\n        MAD = MAD / absoluteDifferences.size();\n        return MAD;",
        "grade-180": {
            "execution": 1
        },
        "143": "float mean = numbers.stream().reduce(0.0f, (a, b) -> a + b);\n        mean /= numbers.size();\n        float mad = 0.0f;\n        for (Float number : numbers) {\n            mad += Math.abs(number - mean);\n        }\n        mad /= numbers.size();\n        return mad;",
        "grade-143": {
            "execution": 1
        },
        "22": "float mean = numbers.stream().reduce(0.0f, (a, b) -> a + b) / numbers.size();\n        return numbers.stream().map(n -> Math.abs(n - mean)).reduce(0.0f, (a, b) -> a + b) / numbers.size();",
        "grade-22": {
            "execution": 1
        },
        "157": "float sum = 0;\n        float mean = mean(numbers);\n        for (float f : numbers) {\n            sum += Math.abs(f - mean);\n        }\n        return sum / numbers.size();",
        "grade-157": {
            "execution": 0
        },
        "110": "float mean = numbers.stream().reduce(0f, (a, b) -> a + b)/numbers.size();\n        float sum = numbers.stream().map(a -> Math.abs(a - mean)).reduce(0f, (a, b) -> a + b);\n        return sum/numbers.size();",
        "grade-110": {
            "execution": 1
        },
        "8": "// calculate mean\n        float mean = 0;\n        for (float number : numbers)\n            mean += number;\n        mean /= numbers.size();\n        // find absolute differences from mean\n        float sumAbsoluteDifferences = 0;\n        for (float number : numbers)\n            sumAbsoluteDifferences += Math.abs(number - mean);\n        // return average absolute difference\n        return sumAbsoluteDifferences / numbers.size();",
        "grade-8": {
            "execution": 1
        },
        "7": "float mean = mean(numbers);\n        float deviations_sum = numbers.stream().map(a -> Math.abs(a - mean)).reduce(0.0f, (a, b) -> a + b);\n        return deviations_sum / numbers.size();",
        "grade-7": {
            "execution": 0
        },
        "23": "// Find mean of this dataset\n        float sum = 0.0f;\n        for (float number : numbers) {\n            sum += number;\n        }\n        float mean = sum / numbers.size();\n        // Find mean absolute deviation of this dataset\n        float meanAbsoluteDeviation = 0.0f;\n        for (float number : numbers) {\n            meanAbsoluteDeviation += Math.abs(number - mean);\n        }\n        meanAbsoluteDeviation /= numbers.size();\n        return meanAbsoluteDeviation;",
        "grade-23": {
            "execution": 1
        },
        "55": "return 1.0f;",
        "grade-55": {
            "execution": 0
        },
        "60": "//>>> numbers = [1.0, 2.0, 3.0, 4.0]\n        //>>> numbers_mean = sum(numbers) / len(numbers)\n        //>>> numbers_mean\n        //2.5\n        //>>> numbers_diff = [abs(num - numbers_mean) for num in numbers]\n        //>>> numbers_diff\n        //[1.5, 0.5, 0.5, 1.5]\n        //>>> numbers_mad = sum(numbers_diff) / len(numbers_diff)\n        //>>> numbers_mad\n        //1.0\n        float numbers_mean = 0;\n        for (float number : numbers) {\n            numbers_mean += number;\n        }\n        numbers_mean /= numbers.size();\n        float numbers_mad = 0;\n        for (float number : numbers) {\n            numbers_mad += Math.abs(number - numbers_mean);\n        }\n        numbers_mad /= numbers.size();\n        return numbers_mad;",
        "grade-60": {
            "execution": 1
        },
        "bleu-169": 0.259020300440242,
        "bleu-28": 0.38724564629338315,
        "bleu-6": 0.2337708659557547,
        "bleu-196": 0.21061676167742457,
        "bleu-71": 0.00025086064322775697,
        "bleu-63": 0.38524991929692765,
        "bleu-58": 0.36392005719337256,
        "bleu-35": 0.4658958415164232,
        "bleu-195": 0.20458762358235863,
        "bleu-26": 0.4031370042569907,
        "bleu-180": 0.24709325315534617,
        "bleu-143": 0.3158465737103201,
        "bleu-22": 0.2198482873164987,
        "bleu-157": 0.30564801370751127,
        "bleu-110": 0.2329201870597462,
        "bleu-8": 0.32023159564171594,
        "bleu-7": 0.17621578383693307,
        "bleu-23": 0.3705926758819932,
        "bleu-55": 2.601673824617643e-07,
        "bleu-60": 0.15626256196509625,
        "codebleu-169": 0.465785282196659,
        "codebleu-28": 0.6987227374892595,
        "codebleu-6": 0.6489715220045954,
        "codebleu-196": 0.6331707818681841,
        "codebleu-71": 0.04939675094775751,
        "codebleu-63": 0.7675160335025545,
        "codebleu-58": 0.4657629611120348,
        "codebleu-35": 0.7296067308158826,
        "codebleu-195": 0.5433128623878145,
        "codebleu-26": 0.664308049653425,
        "codebleu-180": 0.7129838044101415,
        "codebleu-143": 0.618894907220931,
        "codebleu-22": 0.504930166061827,
        "codebleu-157": 0.45304492779112815,
        "codebleu-110": 0.5187500744611419,
        "codebleu-8": 0.6340878952411901,
        "codebleu-7": 0.4621707008552755,
        "codebleu-23": 0.7355084071090736,
        "codebleu-55": 0.028070197734996454,
        "codebleu-60": 0.7356802054316788,
        "chrf-169": 0.4332487524678168,
        "chrf-28": 0.3950600278647627,
        "chrf-6": 0.4056326918155597,
        "chrf-196": 0.3530837736760468,
        "chrf-71": 0.05194601429318228,
        "chrf-63": 0.5483840077934728,
        "chrf-58": 0.4377707974749631,
        "chrf-35": 0.47944950402368464,
        "chrf-195": 0.3794532377072832,
        "chrf-26": 0.44300014596278425,
        "chrf-180": 0.396329760817118,
        "chrf-143": 0.3997123750940791,
        "chrf-22": 0.3348498825470969,
        "chrf-157": 0.39229034855574435,
        "chrf-110": 0.3596152701757768,
        "chrf-8": 0.4370832710193578,
        "chrf-7": 0.31700384484984034,
        "chrf-23": 0.4703606207530434,
        "chrf-55": 0.027929398864441214,
        "chrf-60": 0.4156499558780035,
        "rougel-169": 0.5789473684210527,
        "rougel-28": 0.6620689655172414,
        "rougel-6": 0.4653465346534653,
        "rougel-196": 0.4022988505747126,
        "rougel-71": 0.09756097560975611,
        "rougel-63": 0.6470588235294117,
        "rougel-58": 0.6315789473684211,
        "rougel-35": 0.6711409395973156,
        "rougel-195": 0.4285714285714286,
        "rougel-26": 0.5578231292517007,
        "rougel-180": 0.4776119402985075,
        "rougel-143": 0.5850340136054422,
        "rougel-22": 0.4,
        "rougel-157": 0.5964912280701755,
        "rougel-110": 0.42384105960264906,
        "rougel-8": 0.5882352941176471,
        "rougel-7": 0.4307692307692308,
        "rougel-23": 0.6467065868263473,
        "rougel-55": 0.07894736842105261,
        "rougel-60": 0.37837837837837834,
        "meteor-169": 0.4846003003581975,
        "meteor-28": 0.6004572230014025,
        "meteor-6": 0.497406439714132,
        "meteor-196": 0.45954986522911045,
        "meteor-71": 0.04615384615384615,
        "meteor-63": 0.7556755007377715,
        "meteor-58": 0.5555796560759341,
        "meteor-35": 0.7164793618958701,
        "meteor-195": 0.39813309779669387,
        "meteor-26": 0.6450517412616539,
        "meteor-180": 0.5193500198819976,
        "meteor-143": 0.580908241064491,
        "meteor-22": 0.3703435039031603,
        "meteor-157": 0.511290001263846,
        "meteor-110": 0.3984835817675364,
        "meteor-8": 0.6488570123058988,
        "meteor-7": 0.3571663496122992,
        "meteor-23": 0.6599111710800022,
        "meteor-55": 0.023291925465838505,
        "meteor-60": 0.5627841750363991,
        "ruby-169": 0.46478873239436624,
        "ruby-28": 0.5675675675675675,
        "ruby-6": 0.3435114503816794,
        "ruby-196": 0.27184466019417475,
        "ruby-71": 0.05633802816901412,
        "ruby-63": 0.5353535353535354,
        "ruby-58": 0.5070422535211268,
        "ruby-35": 0.5384615384615384,
        "ruby-195": 0.3402061855670103,
        "ruby-26": 0.4078947368421053,
        "ruby-180": 0.3538461538461538,
        "ruby-143": 0.48684210526315785,
        "ruby-22": 0.240506329113924,
        "ruby-157": 0.47887323943661975,
        "ruby-110": 0.26249999999999996,
        "ruby-8": 0.4390243902439024,
        "ruby-7": 0.2535211267605634,
        "ruby-23": 0.5625,
        "ruby-55": 0.04225352112676062,
        "ruby-60": 0.23404255319148937,
        "codebertscore_f1-169": 0.846881628036499,
        "codebertscore_f3-169": 0.851331353187561,
        "codebertscore_f1-28": 0.8897651433944702,
        "codebertscore_f3-28": 0.8996719717979431,
        "codebertscore_f1-6": 0.8139837384223938,
        "codebertscore_f3-6": 0.8312010169029236,
        "codebertscore_f1-196": 0.8117167353630066,
        "codebertscore_f3-196": 0.827548086643219,
        "codebertscore_f1-71": 0.5863970518112183,
        "codebertscore_f3-71": 0.5774269700050354,
        "codebertscore_f1-63": 0.8480589389801025,
        "codebertscore_f3-63": 0.8713455200195312,
        "codebertscore_f1-58": 0.8703277707099915,
        "codebertscore_f3-58": 0.8553147912025452,
        "codebertscore_f1-35": 0.8765228986740112,
        "codebertscore_f3-35": 0.8742935061454773,
        "codebertscore_f1-195": 0.8215433955192566,
        "codebertscore_f3-195": 0.846441924571991,
        "codebertscore_f1-26": 0.8314725160598755,
        "codebertscore_f3-26": 0.8499645590782166,
        "codebertscore_f1-180": 0.8183069825172424,
        "codebertscore_f3-180": 0.8617489337921143,
        "codebertscore_f1-143": 0.8396309018135071,
        "codebertscore_f3-143": 0.8495017886161804,
        "codebertscore_f1-22": 0.7656477093696594,
        "codebertscore_f3-22": 0.7719497084617615,
        "codebertscore_f1-157": 0.8645960092544556,
        "codebertscore_f3-157": 0.849209725856781,
        "codebertscore_f1-110": 0.7839792966842651,
        "codebertscore_f3-110": 0.8000457882881165,
        "codebertscore_f1-8": 0.886315643787384,
        "codebertscore_f3-8": 0.9062246084213257,
        "codebertscore_f1-7": 0.7894154787063599,
        "codebertscore_f3-7": 0.7990034818649292,
        "codebertscore_f1-23": 0.8603743314743042,
        "codebertscore_f3-23": 0.8902960419654846,
        "codebertscore_f1-55": 0.6292346119880676,
        "codebertscore_f3-55": 0.5831478238105774,
        "codebertscore_f1-60": 0.7733020186424255,
        "codebertscore_f3-60": 0.7940453290939331,
        "codebertscore_s_f1-169": 0.8542761206626892,
        "codebertscore_s_f3-169": 0.8580335378646851,
        "codebertscore_s_f1-28": 0.891246497631073,
        "codebertscore_s_f3-28": 0.8990983963012695,
        "codebertscore_s_f1-6": 0.8348638415336609,
        "codebertscore_s_f3-6": 0.852429986000061,
        "codebertscore_s_f1-196": 0.8168565034866333,
        "codebertscore_s_f3-196": 0.8321293592453003,
        "codebertscore_s_f1-71": 0.622066080570221,
        "codebertscore_s_f3-71": 0.6046605110168457,
        "codebertscore_s_f1-63": 0.8633613586425781,
        "codebertscore_s_f3-63": 0.8875544667243958,
        "codebertscore_s_f1-58": 0.8839190602302551,
        "codebertscore_s_f3-58": 0.8669375777244568,
        "codebertscore_s_f1-35": 0.8817519545555115,
        "codebertscore_s_f3-35": 0.8790446519851685,
        "codebertscore_s_f1-195": 0.8251482248306274,
        "codebertscore_s_f3-195": 0.8505560159683228,
        "codebertscore_s_f1-26": 0.8395954966545105,
        "codebertscore_s_f3-26": 0.8550935387611389,
        "codebertscore_s_f1-180": 0.8261221647262573,
        "codebertscore_s_f3-180": 0.867865264415741,
        "codebertscore_s_f1-143": 0.8434584736824036,
        "codebertscore_s_f3-143": 0.8506022095680237,
        "codebertscore_s_f1-22": 0.7876073122024536,
        "codebertscore_s_f3-22": 0.7960249781608582,
        "codebertscore_s_f1-157": 0.8755468130111694,
        "codebertscore_s_f3-157": 0.8567375540733337,
        "codebertscore_s_f1-110": 0.7927424907684326,
        "codebertscore_s_f3-110": 0.8067843317985535,
        "codebertscore_s_f1-8": 0.8939170837402344,
        "codebertscore_s_f3-8": 0.9137112498283386,
        "codebertscore_s_f1-7": 0.8025392889976501,
        "codebertscore_s_f3-7": 0.8092670440673828,
        "codebertscore_s_f1-23": 0.8738520741462708,
        "codebertscore_s_f3-23": 0.9036202430725098,
        "codebertscore_s_f1-55": 0.6890325546264648,
        "codebertscore_s_f3-55": 0.6315176486968994,
        "codebertscore_s_f1-60": 0.7875516414642334,
        "codebertscore_s_f3-60": 0.8110818266868591,
        "gpt35_nsnr-169": 4,
        "raw_gpt35_nsnr-169": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-196": 4,
        "raw_gpt35_nsnr-196": "4",
        "gpt35_nsnr-71": 2,
        "raw_gpt35_nsnr-71": "2",
        "gpt35_nsnr-63": 4,
        "raw_gpt35_nsnr-63": "4",
        "gpt35_nsnr-58": 4,
        "raw_gpt35_nsnr-58": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-195": 4,
        "raw_gpt35_nsnr-195": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-180": 4,
        "raw_gpt35_nsnr-180": "4",
        "gpt35_nsnr-143": 4,
        "raw_gpt35_nsnr-143": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-157": 4,
        "raw_gpt35_nsnr-157": "4",
        "gpt35_nsnr-110": 4,
        "raw_gpt35_nsnr-110": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-60": 4,
        "raw_gpt35_nsnr-60": "4",
        "gpt35_nswr-169": 3,
        "raw_gpt35_nswr-169": "3",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-196": 4,
        "raw_gpt35_nswr-196": "4",
        "gpt35_nswr-71": 2,
        "raw_gpt35_nswr-71": "2",
        "gpt35_nswr-63": 4,
        "raw_gpt35_nswr-63": "4",
        "gpt35_nswr-58": 3,
        "raw_gpt35_nswr-58": "3",
        "gpt35_nswr-35": 4,
        "raw_gpt35_nswr-35": "4",
        "gpt35_nswr-195": 3,
        "raw_gpt35_nswr-195": "3",
        "gpt35_nswr-26": 4,
        "raw_gpt35_nswr-26": "4",
        "gpt35_nswr-180": 4,
        "raw_gpt35_nswr-180": "4",
        "gpt35_nswr-143": 4,
        "raw_gpt35_nswr-143": "4",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-157": 4,
        "raw_gpt35_nswr-157": "4",
        "gpt35_nswr-110": 4,
        "raw_gpt35_nswr-110": "4",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-55": 4,
        "raw_gpt35_nswr-55": "4",
        "gpt35_nswr-60": 4,
        "raw_gpt35_nswr-60": "4"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> special_factorial(4)\n    // 288\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    public static int specialFactorial(int n) {\n",
        "snippet": [
            "        long fact_i = 1, special_fact = 1;\n        for (int i = 1; i <= n; i++) {\n            fact_i *= i;\n            special_fact *= fact_i;\n        }\n        return special_fact;\n    }\n}"
        ],
        "simplified": "The Brazilian factorial is defined as: brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1! where n > 0",
        "task_id": "139",
        "30": "int brazilianFactorial = 1;\n        for (int i = n; i > 0; i--) {\n            brazilianFactorial *= i;\n        }\n        return brazilianFactorial;",
        "grade-30": {
            "execution": 0
        },
        "6": "if (n == 0) {\n            return 1;\n        }\n        int factorial = 1;\n        for (int i = 1; i <= n; i++) {\n            factorial *= i;\n        }\n        return factorial * specialFactorial(n - 1);",
        "grade-6": {
            "execution": 0
        },
        "81": "// TODO",
        "grade-81": {
            "execution": 0
        },
        "71": "return Arrays.stream(IntStream.rangeClosed(1, n).toArray()).reduce(1, (acc, val) -> acc * val);",
        "grade-71": {
            "execution": 0
        },
        "66": "// Write your code here.",
        "grade-66": {
            "execution": 0
        },
        "39": "int result = 1;\n        for (int i = n; i > 0; i--) {\n            result *= factorial(i);\n        }\n        return result;",
        "grade-39": {
            "execution": 0
        },
        "28": "int result = 1;\n        while (n > 0) {\n            result *= factorial(n);\n            n--;\n        }\n        return result;",
        "grade-28": {
            "execution": 0
        },
        "174": "int ret = n;\n        for (int i = 1; i < n; i++) {\n            ret *= (n - i);\n        }\n        return ret;",
        "grade-174": {
            "execution": 0
        },
        "23": "int prod = 1;\n        for (int i = n; i > 0; i--) {\n            prod *= factorial(i);\n        }\n        return prod;",
        "grade-23": {
            "execution": 0
        },
        "192": "int fact = 1;\n        for (int i = 1; i <= n; i++) {\n            fact *= i;\n        }\n        return fact;",
        "grade-192": {
            "execution": 0
        },
        "127": "// Your code here!",
        "grade-127": {
            "execution": 0
        },
        "9": "// Your code here\n        // Write your code here\n        if (n == 0) {\n            return 1;\n        }\n        int fact = 1;\n        for (int i = 1; i <= n; i++) {\n            fact = fact * i;\n        }\n        return specialFactorial(n - 1) * fact;",
        "grade-9": {
            "execution": 0
        },
        "8": "if (n == 0) {\n            return 1;\n        }\n        int result = 1;\n        for (int i = n; i > 0; i--) {\n            int temp = 1;\n            for (int j = i; j > 0; j--) {\n                temp *= j;\n            }\n            result *= temp;\n        }\n        return result;",
        "grade-8": {
            "execution": 0
        },
        "24": "int a = 1;\n        for (int i = 1; i <= n; i++) {\n            a *= i;\n        }\n        return a;",
        "grade-24": {
            "execution": 0
        },
        "63": "List<BigInteger> factorials = new ArrayList<>();\n        factorials.add(BigInteger.ONE);\n        for (int i = 1; i <= n; i++) {\n            factorials.add(factorials.get(i - 1).multiply(BigInteger.valueOf(i)));\n        }\n        return factorials.stream().reduce(BigInteger.ONE, BigInteger::multiply).intValue();",
        "grade-63": {
            "execution": 0
        },
        "68": "int ret = 1;\n        for (int i = 1; i <= n; i++) {\n            ret *= i;\n        }\n        return ret;",
        "grade-68": {
            "execution": 0
        },
        "157": "int result = 1;\n        while (n > 0) {\n            int tempResult = 1;\n            for (int i = 1; i <= n; i++) {\n                tempResult *= i;\n            }\n            result *= tempResult;\n            n--;\n        }\n        return result;",
        "grade-157": {
            "execution": 0
        },
        "199": "int rv = 1;\n        for (int i = n; i > 0; i--) {\n            rv *= factorial(i);\n        }\n        return rv;",
        "grade-199": {
            "execution": 0
        },
        "182": "if (n < 0) {\n            throw new IllegalArgumentException(\"Input can't be negative.\");\n        }\n        int product = 1;\n        for (int i = n; i > 0; i--) {\n            product *= factorial(i);\n        }\n        return product;",
        "grade-182": {
            "execution": 0
        },
        "57": "int brazilianFactorial = n;\n        for (int i = n-1; i > 0; i--) {\n            brazilianFactorial *= i;\n        }\n        return brazilianFactorial;",
        "grade-57": {
            "execution": 0
        },
        "bleu-30": 0.3150358048222591,
        "bleu-6": 0.4775205461960747,
        "bleu-81": 0.0,
        "bleu-71": 0.025408788342631224,
        "bleu-66": 0.0,
        "bleu-39": 0.2794127750425488,
        "bleu-28": 0.07055935438592949,
        "bleu-174": 0.40712832576910124,
        "bleu-23": 0.2794127750425488,
        "bleu-192": 0.5292397594849406,
        "bleu-127": 0.0,
        "bleu-9": 0.36187430207097543,
        "bleu-8": 0.21332268710460686,
        "bleu-24": 0.5292397594849406,
        "bleu-63": 0.20341539937283348,
        "bleu-68": 0.5292397594849406,
        "bleu-157": 0.4421170763987536,
        "bleu-199": 0.2794127750425488,
        "bleu-182": 0.21461004536419442,
        "bleu-57": 0.25944761024014573,
        "codebleu-30": 0.43944776086943704,
        "codebleu-6": 0.6092954245914997,
        "codebleu-81": 0.01212121212121212,
        "codebleu-71": 0.24153893869398527,
        "codebleu-66": 0.04848484848484848,
        "codebleu-39": 0.47059901206249527,
        "codebleu-28": 0.3009401972198735,
        "codebleu-174": 0.5582448074108274,
        "codebleu-23": 0.47059901206249527,
        "codebleu-192": 0.5331173704705506,
        "codebleu-127": 0.03636363636363636,
        "codebleu-9": 0.6203477837282204,
        "codebleu-8": 0.5619924455631063,
        "codebleu-24": 0.5331173704705506,
        "codebleu-63": 0.574068158708399,
        "codebleu-68": 0.5331173704705506,
        "codebleu-157": 0.6426279143769231,
        "codebleu-199": 0.47059901206249527,
        "codebleu-182": 0.5522499060191609,
        "codebleu-57": 0.45156325869438957,
        "chrf-30": 0.2793022057991713,
        "chrf-6": 0.46920088679629834,
        "chrf-81": 0.0,
        "chrf-71": 0.11859649705582259,
        "chrf-66": 0.029251896318431635,
        "chrf-39": 0.2876631091112251,
        "chrf-28": 0.18882323451538363,
        "chrf-174": 0.27806717780292833,
        "chrf-23": 0.2552667986443782,
        "chrf-192": 0.4635606186339386,
        "chrf-127": 0.021718122812089385,
        "chrf-9": 0.5122081362278262,
        "chrf-8": 0.2596764218185299,
        "chrf-24": 0.3454945097748925,
        "chrf-63": 0.3319995022319678,
        "chrf-68": 0.361326285486663,
        "chrf-157": 0.35110383728353123,
        "chrf-199": 0.2532413718060986,
        "chrf-182": 0.29956371155660133,
        "chrf-57": 0.2610221567040554,
        "rougel-30": 0.56,
        "rougel-6": 0.6236559139784946,
        "rougel-81": 0.0,
        "rougel-71": 0.175,
        "rougel-66": 0.0,
        "rougel-39": 0.56,
        "rougel-28": 0.4,
        "rougel-174": 0.6578947368421053,
        "rougel-23": 0.56,
        "rougel-192": 0.7397260273972603,
        "rougel-127": 0.0,
        "rougel-9": 0.5333333333333333,
        "rougel-8": 0.4684684684684685,
        "rougel-24": 0.7397260273972603,
        "rougel-63": 0.35036496350364965,
        "rougel-68": 0.7397260273972603,
        "rougel-157": 0.6530612244897959,
        "rougel-199": 0.56,
        "rougel-182": 0.42000000000000004,
        "rougel-57": 0.5454545454545454,
        "meteor-30": 0.4504484124590296,
        "meteor-6": 0.5082077396126983,
        "meteor-81": 0.0,
        "meteor-71": 0.1201923076923077,
        "meteor-66": 0.0,
        "meteor-39": 0.38869115843236607,
        "meteor-28": 0.21926655719759164,
        "meteor-174": 0.4514563106796116,
        "meteor-23": 0.38869115843236607,
        "meteor-192": 0.5623471882640587,
        "meteor-127": 0.0,
        "meteor-9": 0.49437895758242073,
        "meteor-8": 0.5326060893876858,
        "meteor-24": 0.5623471882640587,
        "meteor-63": 0.35498554601544635,
        "meteor-68": 0.5623471882640587,
        "meteor-157": 0.7083931057538098,
        "meteor-199": 0.38869115843236607,
        "meteor-182": 0.40346788990825694,
        "meteor-57": 0.4097962899965981,
        "ruby-30": 0.45238095238095233,
        "ruby-6": 0.5098039215686274,
        "ruby-81": 0.0,
        "ruby-71": 0.0714285714285714,
        "ruby-66": 0.0,
        "ruby-39": 0.47619047619047616,
        "ruby-28": 0.26190476190476186,
        "ruby-174": 0.5714285714285714,
        "ruby-23": 0.47619047619047616,
        "ruby-192": 0.6428571428571428,
        "ruby-127": 0.0,
        "ruby-9": 0.38095238095238093,
        "ruby-8": 0.34782608695652173,
        "ruby-24": 0.6428571428571428,
        "ruby-63": 0.2421052631578947,
        "ruby-68": 0.6428571428571428,
        "ruby-157": 0.5535714285714286,
        "ruby-199": 0.47619047619047616,
        "ruby-182": 0.2586206896551724,
        "ruby-57": 0.40476190476190477,
        "codebertscore_f1-30": 0.8409551978111267,
        "codebertscore_f3-30": 0.8633044362068176,
        "codebertscore_f1-6": 0.8566593527793884,
        "codebertscore_f3-6": 0.8691843152046204,
        "codebertscore_f1-81": 0.5155165791511536,
        "codebertscore_f3-81": 0.5074538588523865,
        "codebertscore_f1-71": 0.7006750702857971,
        "codebertscore_f3-71": 0.7216644287109375,
        "codebertscore_f1-66": 0.5433936715126038,
        "codebertscore_f3-66": 0.5388200879096985,
        "codebertscore_f1-39": 0.8424780964851379,
        "codebertscore_f3-39": 0.8388556838035583,
        "codebertscore_f1-28": 0.7902111411094666,
        "codebertscore_f3-28": 0.7825105786323547,
        "codebertscore_f1-174": 0.8626405596733093,
        "codebertscore_f3-174": 0.8492552042007446,
        "codebertscore_f1-23": 0.8466972708702087,
        "codebertscore_f3-23": 0.8426890969276428,
        "codebertscore_f1-192": 0.9113351702690125,
        "codebertscore_f3-192": 0.8923444747924805,
        "codebertscore_f1-127": 0.521745502948761,
        "codebertscore_f3-127": 0.5160696506500244,
        "codebertscore_f1-9": 0.7969178557395935,
        "codebertscore_f3-9": 0.8289556503295898,
        "codebertscore_f1-8": 0.7882018685340881,
        "codebertscore_f3-8": 0.7938026785850525,
        "codebertscore_f1-24": 0.8900240659713745,
        "codebertscore_f3-24": 0.8695873618125916,
        "codebertscore_f1-63": 0.7716179490089417,
        "codebertscore_f3-63": 0.8173943161964417,
        "codebertscore_f1-68": 0.8832350373268127,
        "codebertscore_f3-68": 0.8635808229446411,
        "codebertscore_f1-157": 0.8448303937911987,
        "codebertscore_f3-157": 0.8512532711029053,
        "codebertscore_f1-199": 0.8364213705062866,
        "codebertscore_f3-199": 0.8375453948974609,
        "codebertscore_f1-182": 0.7764660716056824,
        "codebertscore_f3-182": 0.8105546236038208,
        "codebertscore_f1-57": 0.8348656892776489,
        "codebertscore_f3-57": 0.8559396266937256,
        "codebertscore_s_f1-30": 0.9385998249053955,
        "codebertscore_s_f3-30": 0.9482043385505676,
        "codebertscore_s_f1-6": 0.9431787729263306,
        "codebertscore_s_f3-6": 0.9475396871566772,
        "codebertscore_s_f1-81": 0.926653265953064,
        "codebertscore_s_f3-81": 0.8984025120735168,
        "codebertscore_s_f1-71": 0.9014647006988525,
        "codebertscore_s_f3-71": 0.9086427688598633,
        "codebertscore_s_f1-66": 0.9198715090751648,
        "codebertscore_s_f3-66": 0.8971759080886841,
        "codebertscore_s_f1-39": 0.950066328048706,
        "codebertscore_s_f3-39": 0.9447992444038391,
        "codebertscore_s_f1-28": 0.9376842975616455,
        "codebertscore_s_f3-28": 0.9278988838195801,
        "codebertscore_s_f1-174": 0.9550300240516663,
        "codebertscore_s_f3-174": 0.948404848575592,
        "codebertscore_s_f1-23": 0.9500772356987,
        "codebertscore_s_f3-23": 0.9451010823249817,
        "codebertscore_s_f1-192": 0.9706842303276062,
        "codebertscore_s_f3-192": 0.9625229835510254,
        "codebertscore_s_f1-127": 0.9239807724952698,
        "codebertscore_s_f3-127": 0.8979095220565796,
        "codebertscore_s_f1-9": 0.9172380566596985,
        "codebertscore_s_f3-9": 0.9329004287719727,
        "codebertscore_s_f1-8": 0.9182925224304199,
        "codebertscore_s_f3-8": 0.9270514249801636,
        "codebertscore_s_f1-24": 0.9635125398635864,
        "codebertscore_s_f3-24": 0.9536982774734497,
        "codebertscore_s_f1-63": 0.8938306570053101,
        "codebertscore_s_f3-63": 0.9302603602409363,
        "codebertscore_s_f1-68": 0.9609471559524536,
        "codebertscore_s_f3-68": 0.9524888396263123,
        "codebertscore_s_f1-157": 0.9384298920631409,
        "codebertscore_s_f3-157": 0.9440945386886597,
        "codebertscore_s_f1-199": 0.9463415741920471,
        "codebertscore_s_f3-199": 0.9446867108345032,
        "codebertscore_s_f1-182": 0.9159111380577087,
        "codebertscore_s_f3-182": 0.9305017590522766,
        "codebertscore_s_f1-57": 0.9342348575592041,
        "codebertscore_s_f3-57": 0.9443401098251343,
        "gpt35_nsnr-30": 3,
        "raw_gpt35_nsnr-30": "3",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-81": 0,
        "raw_gpt35_nsnr-81": "0",
        "gpt35_nsnr-71": 3,
        "raw_gpt35_nsnr-71": "3",
        "gpt35_nsnr-66": 0,
        "raw_gpt35_nsnr-66": "3 - The code snippet correctly calculates the special factorial of the input integer by multiplying the factorials of all numbers from n down to 1. However, the method name does not match the problem description (should be \"brazilianFactorial\" instead of \"specialFactorial\"). Additionally, the code does not handle the case where n is 0, which should return 1 according to the problem description.",
        "gpt35_nsnr-39": 3,
        "raw_gpt35_nsnr-39": "3",
        "gpt35_nsnr-28": 3,
        "raw_gpt35_nsnr-28": "3",
        "gpt35_nsnr-174": 2,
        "raw_gpt35_nsnr-174": "2",
        "gpt35_nsnr-23": 3,
        "raw_gpt35_nsnr-23": "3",
        "gpt35_nsnr-192": 3,
        "raw_gpt35_nsnr-192": "3",
        "gpt35_nsnr-127": 0,
        "raw_gpt35_nsnr-127": "0",
        "gpt35_nsnr-9": 3,
        "raw_gpt35_nsnr-9": "3",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-24": 3,
        "raw_gpt35_nsnr-24": "3",
        "gpt35_nsnr-63": 4,
        "raw_gpt35_nsnr-63": "4",
        "gpt35_nsnr-68": 3,
        "raw_gpt35_nsnr-68": "3",
        "gpt35_nsnr-157": 3,
        "raw_gpt35_nsnr-157": "3",
        "gpt35_nsnr-199": 3,
        "raw_gpt35_nsnr-199": "3",
        "gpt35_nsnr-182": 3,
        "raw_gpt35_nsnr-182": "3",
        "gpt35_nsnr-57": 3,
        "raw_gpt35_nsnr-57": "3",
        "gpt35_nswr-30": 3,
        "raw_gpt35_nswr-30": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-81": 3,
        "raw_gpt35_nswr-81": "3",
        "gpt35_nswr-71": 3,
        "raw_gpt35_nswr-71": "3",
        "gpt35_nswr-66": 3,
        "raw_gpt35_nswr-66": "3",
        "gpt35_nswr-39": 3,
        "raw_gpt35_nswr-39": "3",
        "gpt35_nswr-28": 2,
        "raw_gpt35_nswr-28": "2",
        "gpt35_nswr-174": 3,
        "raw_gpt35_nswr-174": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-192": 3,
        "raw_gpt35_nswr-192": "3",
        "gpt35_nswr-127": 3,
        "raw_gpt35_nswr-127": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-24": 3,
        "raw_gpt35_nswr-24": "3",
        "gpt35_nswr-63": 3,
        "raw_gpt35_nswr-63": "3",
        "gpt35_nswr-68": 3,
        "raw_gpt35_nswr-68": "3",
        "gpt35_nswr-157": 3,
        "raw_gpt35_nswr-157": "3",
        "gpt35_nswr-199": 3,
        "raw_gpt35_nswr-199": "3",
        "gpt35_nswr-182": 3,
        "raw_gpt35_nswr-182": "3",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns True if the date is valid otherwise False.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000') => True\n    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040') => False\n    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020') => False\n    public static boolean validDate(String date) {\n",
        "snippet": [
            "        try {\n            date = date.strip();\n            String[] dates = date.split(\"-\" );\n            String m = dates[0];\n            while (!m.isEmpty() && m.charAt(0) == '0') {\n                m = m.substring(1);\n            }\n            String d = dates[1];\n            while (!d.isEmpty() && d.charAt(0) == '0') {\n                d = d.substring(1);\n            }\n            String y = dates[2];\n            while (!y.isEmpty() && y.charAt(0) == '0') {\n                y = y.substring(1);\n            }\n            int month = Integer.parseInt(m), day = Integer.parseInt(d), year = Integer.parseInt(y);\n            if (month < 1 || month > 12) {\n                return false;\n            }\n            if (Arrays.asList(1, 3, 5, 7, 8, 10, 12).contains(month) && (day < 1 || day > 31)) {\n                return false;\n            }\n            if (Arrays.asList(4, 6, 9, 11).contains(month) && (day < 1 || day > 30)) {\n                return false;\n            }\n            if (month == 2 && (day < 1 || day > 29)) {\n                return false;\n            }\n            return true;\n        } catch (Exception e) {\n            return false;\n        }\n    }\n}"
        ],
        "simplified": "You have to write a function which validates a given date string and returns True if the date is valid otherwise False. The date is valid if all of the following rules are satisfied: 1. The date string is not empty. 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2. 3. The months should not be less than 1 or higher than 12. 4. The date should be in the format: mm-dd-yyyy",
        "task_id": "124",
        "180": "// TODO: implement me!\n        // If the month is in the range 1-12, and\n        // if the day is in the range 1-30, and\n        // if the year is in the range 1800-9999, then the date is valid.\n        boolean isValid = false;\n        String regex = \"(0?[1-9]|[12][0-9]|3[01])-(0?[1-9]|1[012])-((19|20)\\\\d\\\\d)\";\n        Pattern pattern = Pattern.compile(regex);\n        Matcher matcher = pattern.matcher(date);\n        if (matcher.matches()) {\n            isValid = true;\n        }\n        return isValid;",
        "grade-180": {
            "execution": 0
        },
        "31": "// fill in your code here\n        return false;",
        "grade-31": {
            "execution": 0
        },
        "6": "return false;",
        "grade-6": {
            "execution": 0
        },
        "74": "try {\n            String[] parts = date.split(\"-\");\n            int dd = Integer.parseInt(parts[0]);\n            int mm = Integer.parseInt(parts[1]);\n            if (mm < 1 || mm > 12) return false;\n            int yyyy = Integer.parseInt(parts[2]);\n            int days;\n            switch (mm) {\n                case 1:\n                case 3:\n                case 5:\n                case 7:\n                case 8:\n                case 10:\n                case 12:\n                    days = 31;\n                    break;\n                case 4:\n                case 6:\n                case 9:\n                case 11:\n                    days = 30;\n                    break;\n                case 2:\n                    days = 28;\n                    break;\n                default:\n                    days = 0;\n            }\n            if (dd < 1 || dd > days) return false;\n            return true;\n        } catch (Exception e) {\n            return false;\n        }",
        "grade-74": {
            "execution": 0
        },
        "66": "int[] days = {31,28,31,30,31,30,31,31,30,31,30,31};\n        int[] days_leap = {31,29,31,30,31,30,31,31,30,31,30,31};\n        boolean[] leap_year = {false,false,true,false,true,false,true,false,true,false,true,false};\n        String[] month = {\"\",\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"};\n        String[] day = {\"\",\"1st\",\"2nd\",\"3rd\",\"4th\",\"5th\",\"6th\",\"7th\",\"8th\",\"9th\",\"10th\",\"11th\",\"12th\",\"13th\",\"14th\",\"15th\",\"16th\",\"17th\",\"18th\",\"19th\",\"20th\",\"21st\",\"22nd\",\"23rd\",\"24th\",\"25th\",\"26th\",\"27th\",\"28th\",\"29th\",\"30th\",\"31st\"};\n        String[] week = {\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"};\n        String[] time = {\"millisecond\",\"second\",\"minute\",\"hour\",\"day\",\"week\",\"month\",\"year\"};\n        String[] time_plural = {\"milliseconds\",\"seconds\",\"minutes\",\"hours\",\"days\",\"weeks\",\"months\",\"years\"};\n        String[] time_short = {\"msec\",\"sec\",\"min\",\"hr\",\"day\",\"wk\",\"mth\",\"yr\"};\n        String[] time_short_plural = {\"msecs\",\"secs\",\"mins\",\"hrs\",\"days\",\"wks\",\"mths\",\"yrs\"};\n        int[] year = {2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025,2026,2027,2028,2029,2030,2031,2032,2033,2034,2035,2036,2037,2038,2039,2040,2041,2042,2043,2044,2045,2046,2047,2048,2049,20",
        "grade-66": {
            "execution": 0
        },
        "61": "// write your code here\n        return false;",
        "grade-61": {
            "execution": 0
        },
        "38": "if (date.isEmpty()) {\n            return false;\n        }\n        String[] dateSplit = date.split(\"-\");\n        if (dateSplit.length != 3) {\n            return false;\n        }\n        int[] dateElements = new int[3];\n        for (int i = 0; i < dateSplit.length; i++) {\n            try {\n                dateElements[i] = Integer.parseInt(dateSplit[i]);\n            } catch (NumberFormatException e) {\n                return false;\n            }\n        }\n        if (dateElements[0] < 1 || dateElements[0] > 12) {\n            return false;\n        }\n        if (dateElements[0] == 2) {\n            if (dateElements[1] < 1 || dateElements[1] > 29) {\n                return false;\n            }\n        } else if (dateElements[0] == 1 || dateElements[0] == 3 || dateElements[0] == 5 || dateElements[0] == 7 || dateElements[0] == 8 || dateElements[0] == 10 || dateElements[0] == 12) {\n            if (dateElements[1] < 1 || dateElements[1] > 31) {\n                return false;\n            }\n        } else {\n            if (dateElements[1] < 1 || dateElements[1] > 30) {\n                return false;\n            }\n        }\n        return true;",
        "grade-38": {
            "execution": 1
        },
        "29": "// Try to split the date by '-' and check if the length is 3\n        String[] parts = date.split(\"-\");\n        if (parts.length != 3) {\n            return false;\n        }\n        int month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n        if (day > 31 || day < 1) {\n            return false;\n        }\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        return true;",
        "grade-29": {
            "execution": 0
        },
        "190": "// check that date is a not empty\n        if (date.length() < 10) {\n            return false;\n        }\n        // check format\n        String[] dates = date.split(\"-\");\n        if (dates.length != 3) {\n            return false;\n        }\n        for (String d : dates) {\n            for (char c : d.toCharArray()) {\n                if (!Character.isDigit(c)) {\n                    return false;\n                }\n            }\n        }\n        // check month\n        int month = Integer.parseInt(dates[0]);\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        // check days\n        int days = Integer.parseInt(dates[1]);\n        if (days < 1 || days > 31) {\n            return false;\n        }\n        if (month == 2) {\n            if (days > 29) {\n                return false;\n            }\n        } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (days > 30) {\n                return false;\n            }\n        }\n        // check year\n        int year = Integer.parseInt(dates[2]);\n        if (year < 1950 || year > 2020) {\n            return false;\n        }\n        return true;",
        "grade-190": {
            "execution": 1
        },
        "150": "// TODO: Write your code here\n        return false;",
        "grade-150": {
            "execution": 0
        },
        "25": "String regex = \"^(((0?[1-9]|1[012])-(0?[1-9]|1\\\\d|2[0-8])|(0?[13456789]|1[012])-(29|30)|(0?[13578]|1[02])-31)-(19|[2-9]\\\\d)\\\\d{2}|0?2-29-((19|[2-9]\\\\d)(0[48]|[2468][048]|[13579][26])|(([2468][048]|[3579][26])00)))$\";\n        return date.matches(regex);",
        "grade-25": {
            "execution": 1
        },
        "164": "// Your code here\n        return false;",
        "grade-164": {
            "execution": 0
        },
        "115": "String[] parts = date.split(\"-\");\n      int month = Integer.parseInt(parts[0]);\n      int day = Integer.parseInt(parts[1]);\n      int year = Integer.parseInt(parts[2]);\n      int maxDays;\n      switch (month) {\n        case 1:\n        case 3:\n        case 5:\n        case 7:\n        case 8:\n        case 10:\n        case 12:\n          maxDays = 31;\n          break;\n        case 4:\n        case 6:\n        case 9:\n        case 11:\n          maxDays = 30;\n          break;\n        case 2:\n          maxDays = 28;\n          break;\n        default:\n          return false;\n      }\n      return month >= 1 && month <= 12 && day >= 1 && day <= maxDays && year >= 1;",
        "grade-115": {
            "execution": 0
        },
        "9": "return Pattern.matches(\"^(?:(?:([0][1-9]|[1][0-2])-([0][1-9]|[1-2][0-9]|[3][0-1])-([1-9][0-9]{3}))|(?:([0][1-9]|[1][0-2])-([0][1-9]|[1-2][0-9]|[3][0])-([1-9][0-9]{3}))|(?:([0][1-9]|[1][0-2])-([0][1-9]|[1-2][0-9])-([1-9][0-9]{3}))|(?:([0][1-9]|[1][0-2])-([0][1-9]|[1-2][0-9])-([1-9][0-9]{2}))|(?:([0][1-9]|[1][0-2])-([0][1-9]|[1-2][0-9])-([1-9][0-9])))$\", date);",
        "grade-9": {
            "execution": 0
        },
        "7": "int[] daysInMonth = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n        String[] splitted = date.split(\"-\");\n        if (splitted.length != 3) {\n            return false;\n        }\n        try {\n            int month = Integer.parseInt(splitted[0]);\n            int day = Integer.parseInt(splitted[1]);\n            int year = Integer.parseInt(splitted[2]);\n            if (month <= 0 || month > 12) {\n                return false;\n            }\n            if (month == 2 && year % 4 == 0) {\n                return (day > 0 && day <= 29);\n            }\n            return (day > 0 && day <= daysInMonth[month - 1]);\n        } catch (NumberFormatException e) {\n            return false;\n        }",
        "grade-7": {
            "execution": 1
        },
        "26": "boolean res = false;\n        try {\n            String[] sa = date.split(\"-\");\n            if (sa.length != 3) {\n                return false;\n            }\n            int d = Integer.parseInt(sa[0]);\n            int m = Integer.parseInt(sa[1]);\n            if (m > 12 || m < 1) {\n                return false;\n            }\n            int y = Integer.parseInt(sa[2]);\n            Calendar cal = Calendar.getInstance();\n            cal.set(y, m-1, d);\n            int m1 = cal.get(Calendar.MONTH)+1;\n            int d1 = cal.get(Calendar.DAY_OF_MONTH);\n            if (m1 == m && d1 == d) {\n                res = true;\n            }\n        } catch (Exception e) {\n            res = false;\n        }\n        return res;",
        "grade-26": {
            "execution": 0
        },
        "59": "try {\n            final String[] fields = date.split(\"-\");\n            final int day = Integer.parseInt(fields[1]);\n            final int month = Integer.parseInt(fields[0]);\n            final int year = Integer.parseInt(fields[2]);\n            if (day < 1 || day > 31) return false;\n            if (month < 1 || month > 12) return false;\n            if (month == 2 && day > 29) return false;\n            if (month % 2 == 0 && month != 2 && day > 30) return false;\n            if (month == 2 && year % 4 != 0 && day > 28) return false;\n            return true;\n        } catch (Exception e) {\n            return false;\n        }",
        "grade-59": {
            "execution": 1
        },
        "63": "String[] all_date = date.split(\"-\");\n        if (all_date.length != 3) return false;\n        int month = Integer.parseInt(all_date[0]);\n        int day = Integer.parseInt(all_date[1]);\n        int year = Integer.parseInt(all_date[2]);\n        if (month < 1 || month > 12) return false;\n        if (month == 2) {\n            if (day < 1 || day > 29) return false;\n        } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 || day > 30) return false;\n        } else {\n            if (day < 1 || day > 31) return false;\n        }\n        return true;",
        "grade-63": {
            "execution": 1
        },
        "138": "// split into 3 parts, mm dd yyyy\n        String[] parts = date.split(\"-\");\n        if (parts.length != 3) return false;\n        try {\n            int month = Integer.parseInt(parts[0]);\n            int day = Integer.parseInt(parts[1]);\n            int year = Integer.parseInt(parts[2]);\n            // month must be between 1 and 12 inclusive\n            if (month < 1 || month > 12) return false;\n            // year must be at least 1900\n            if (year < 1900) return false;\n            // day must be between 1 and 31 inclusive and must be less than the number of days allowed in the month\n            if (day < 1 || day > 31) return false;\n            if (month == 2) {\n                // Feburary, must be before 29\n                if (day > 29) return false;\n                // if it's a leap year, can be 29\n                if (day == 29 && (year % 4 != 0 || (year % 100 == 0 && year % 400 != 0))) return false;\n            } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n                // April, June, September, November, must be before 30\n                if (day > 30) return false;\n            }\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }",
        "grade-138": {
            "execution": 1
        },
        "169": "int d, m, y;\n        if (date.length() != 10) return false;\n        if (date.charAt(2) != '-' || date.charAt(5) != '-') return false;\n        try {\n            d = Integer.parseInt(date.substring(0, 2));\n            m = Integer.parseInt(date.substring(3, 5));\n            y = Integer.parseInt(date.substring(6, 10));\n        } catch (NumberFormatException e) {\n            return false;\n        }\n        if (m < 1 || m > 12) return false;\n        if (m == 2) {\n            if (d < 1 || d > 29) return false;\n        } else if (m % 2 == 0) {\n            if (d < 1 || d > 30) return false;\n        } else {\n            if (d < 1 || d > 31) return false;\n        }\n        return true;",
        "grade-169": {
            "execution": 0
        },
        "bleu-180": 0.020838707845444535,
        "bleu-31": 4.4023528067360254e-15,
        "bleu-6": 6.60724013141192e-47,
        "bleu-74": 0.14006031700740196,
        "bleu-66": 0.010159279430405161,
        "bleu-61": 1.3974551716050126e-16,
        "bleu-38": 0.26350887647542043,
        "bleu-29": 0.11458660228941887,
        "bleu-190": 0.32290381109362265,
        "bleu-150": 7.343609506666196e-14,
        "bleu-25": 0.008305179589322465,
        "bleu-164": 1.848819778535822e-18,
        "bleu-115": 0.10300303733098116,
        "bleu-9": 0.016492876770319763,
        "bleu-7": 0.21503362255875447,
        "bleu-26": 0.15511040661846098,
        "bleu-59": 0.20761959954426737,
        "bleu-63": 0.22086141029151451,
        "bleu-138": 0.29953236453152376,
        "bleu-169": 0.2097776923455644,
        "codebleu-180": 0.14789301228149404,
        "codebleu-31": 0.009132420091463585,
        "codebleu-6": 0.0030441400304413997,
        "codebleu-74": 0.292607672931212,
        "codebleu-66": 0.24360482609721545,
        "codebleu-61": 0.009132420091341893,
        "codebleu-38": 0.4306485232410833,
        "codebleu-29": 0.23548556234286866,
        "codebleu-190": 0.5049677529102667,
        "codebleu-150": 0.010654490107362583,
        "codebleu-25": 0.025875190346685548,
        "codebleu-164": 0.007610350076105042,
        "codebleu-115": 0.22832793792567305,
        "codebleu-9": 0.018264840182650826,
        "codebleu-7": 0.3374326824826676,
        "codebleu-26": 0.35037314906108596,
        "codebleu-59": 0.3236246425276272,
        "codebleu-63": 0.32092306226062967,
        "codebleu-138": 0.4891169619631215,
        "codebleu-169": 0.3908280208923628,
        "chrf-180": 0.1598906091196559,
        "chrf-31": 0.027318357232916674,
        "chrf-6": 0.018934033901326922,
        "chrf-74": 0.32177911047275776,
        "chrf-66": 0.18617703480552855,
        "chrf-61": 0.02700096369305601,
        "chrf-38": 0.3653959129820064,
        "chrf-29": 0.34307406930802187,
        "chrf-190": 0.47497411412477286,
        "chrf-150": 0.026619987592248717,
        "chrf-25": 0.06287290005049267,
        "chrf-164": 0.02409284480998001,
        "chrf-115": 0.2758944722483171,
        "chrf-9": 0.0520690419072811,
        "chrf-7": 0.394136186636053,
        "chrf-26": 0.3195400431924585,
        "chrf-59": 0.42842959080360865,
        "chrf-63": 0.4278828655991322,
        "chrf-138": 0.4362256581295373,
        "chrf-169": 0.3985429921540123,
        "rougel-180": 0.1962421711899791,
        "rougel-31": 0.018072289156626505,
        "rougel-6": 0.01846153846153846,
        "rougel-74": 0.3543788187372709,
        "rougel-66": 0.11712707182320443,
        "rougel-61": 0.018126888217522657,
        "rougel-38": 0.34516129032258064,
        "rougel-29": 0.3550561797752809,
        "rougel-190": 0.42611683848797255,
        "rougel-150": 0.018018018018018018,
        "rougel-25": 0.20773930753564154,
        "rougel-164": 0.01818181818181818,
        "rougel-115": 0.29521829521829523,
        "rougel-9": 0.2027231467473525,
        "rougel-7": 0.39447731755424065,
        "rougel-26": 0.3534136546184739,
        "rougel-59": 0.4394250513347023,
        "rougel-63": 0.4662576687116565,
        "rougel-138": 0.38782051282051283,
        "rougel-169": 0.41603053435114506,
        "meteor-180": 0.15168968569424496,
        "meteor-31": 0.010125324774568241,
        "meteor-6": 0.010149756788846758,
        "meteor-74": 0.2815478062411045,
        "meteor-66": 0.13784524210828322,
        "meteor-61": 0.01012880785842602,
        "meteor-38": 0.3768007097747443,
        "meteor-29": 0.2363814185807827,
        "meteor-190": 0.4105370479250189,
        "meteor-150": 0.010121844085405446,
        "meteor-25": 0.1461864719481645,
        "meteor-164": 0.010132293339450945,
        "meteor-115": 0.22302124012290137,
        "meteor-9": 0.1544164016777395,
        "meteor-7": 0.32146553740545564,
        "meteor-26": 0.2789402736784845,
        "meteor-59": 0.36630326288757964,
        "meteor-63": 0.3629627294036111,
        "meteor-138": 0.4429965041572184,
        "meteor-169": 0.40235080645161286,
        "ruby-180": 0.11180124223602483,
        "ruby-31": 0.009316770186335366,
        "ruby-6": 0.009316770186335366,
        "ruby-74": 0.23291925465838514,
        "ruby-66": 0.0634648370497427,
        "ruby-61": 0.009316770186335366,
        "ruby-38": 0.15217391304347827,
        "ruby-29": 0.22049689440993792,
        "ruby-190": 0.22049689440993792,
        "ruby-150": 0.009316770186335366,
        "ruby-25": 0.13043478260869568,
        "ruby-164": 0.009316770186335366,
        "ruby-115": 0.16770186335403725,
        "ruby-9": 0.08554572271386429,
        "ruby-7": 0.23913043478260865,
        "ruby-26": 0.23913043478260865,
        "ruby-59": 0.30434782608695654,
        "ruby-63": 0.3012422360248447,
        "ruby-138": 0.18322981366459623,
        "ruby-169": 0.2919254658385093,
        "codebertscore_f1-180": 0.6686151623725891,
        "codebertscore_f3-180": 0.6673336029052734,
        "codebertscore_f1-31": 0.509997546672821,
        "codebertscore_f3-31": 0.4556804895401001,
        "codebertscore_f1-6": 0.4627748727798462,
        "codebertscore_f3-6": 0.3871726095676422,
        "codebertscore_f1-74": 0.777052104473114,
        "codebertscore_f3-74": 0.7598322033882141,
        "codebertscore_f1-66": 0.6767341494560242,
        "codebertscore_f3-66": 0.6781201958656311,
        "codebertscore_f1-61": 0.5081275701522827,
        "codebertscore_f3-61": 0.45222827792167664,
        "codebertscore_f1-38": 0.7791457176208496,
        "codebertscore_f3-38": 0.7735348343849182,
        "codebertscore_f1-29": 0.7653670310974121,
        "codebertscore_f3-29": 0.7407731413841248,
        "codebertscore_f1-190": 0.8156437277793884,
        "codebertscore_f3-190": 0.8041198253631592,
        "codebertscore_f1-150": 0.5039524435997009,
        "codebertscore_f3-150": 0.4515426456928253,
        "codebertscore_f1-25": 0.6259053349494934,
        "codebertscore_f3-25": 0.6057538390159607,
        "codebertscore_f1-164": 0.5127594470977783,
        "codebertscore_f3-164": 0.4520145654678345,
        "codebertscore_f1-115": 0.7503929138183594,
        "codebertscore_f3-115": 0.7355359792709351,
        "codebertscore_f1-9": 0.6654413342475891,
        "codebertscore_f3-9": 0.65080326795578,
        "codebertscore_f1-7": 0.7759777307510376,
        "codebertscore_f3-7": 0.7696291208267212,
        "codebertscore_f1-26": 0.7629580497741699,
        "codebertscore_f3-26": 0.757988691329956,
        "codebertscore_f1-59": 0.7873367071151733,
        "codebertscore_f3-59": 0.762651801109314,
        "codebertscore_f1-63": 0.7874552011489868,
        "codebertscore_f3-63": 0.7623382806777954,
        "codebertscore_f1-138": 0.7793566584587097,
        "codebertscore_f3-138": 0.7843353748321533,
        "codebertscore_f1-169": 0.7957327961921692,
        "codebertscore_f3-169": 0.7749961018562317,
        "codebertscore_s_f1-180": 0.6992509365081787,
        "codebertscore_s_f3-180": 0.6980728507041931,
        "codebertscore_s_f1-31": 0.5721915364265442,
        "codebertscore_s_f3-31": 0.5470221042633057,
        "codebertscore_s_f1-6": 0.6361306309700012,
        "codebertscore_s_f3-6": 0.5577269196510315,
        "codebertscore_s_f1-74": 0.7935057282447815,
        "codebertscore_s_f3-74": 0.7749975919723511,
        "codebertscore_s_f1-66": 0.684754490852356,
        "codebertscore_s_f3-66": 0.6861929297447205,
        "codebertscore_s_f1-61": 0.5749381184577942,
        "codebertscore_s_f3-61": 0.5483486652374268,
        "codebertscore_s_f1-38": 0.7894585728645325,
        "codebertscore_s_f3-38": 0.7824746370315552,
        "codebertscore_s_f1-29": 0.8018810749053955,
        "codebertscore_s_f3-29": 0.7758826017379761,
        "codebertscore_s_f1-190": 0.8157985806465149,
        "codebertscore_s_f3-190": 0.8039245009422302,
        "codebertscore_s_f1-150": 0.5661031603813171,
        "codebertscore_s_f3-150": 0.5437395572662354,
        "codebertscore_s_f1-25": 0.6707155108451843,
        "codebertscore_s_f3-25": 0.6586498022079468,
        "codebertscore_s_f1-164": 0.581575334072113,
        "codebertscore_s_f3-164": 0.5482996106147766,
        "codebertscore_s_f1-115": 0.7711483240127563,
        "codebertscore_s_f3-115": 0.7510523200035095,
        "codebertscore_s_f1-9": 0.6852203011512756,
        "codebertscore_s_f3-9": 0.670376181602478,
        "codebertscore_s_f1-7": 0.7961717844009399,
        "codebertscore_s_f3-7": 0.7826076745986938,
        "codebertscore_s_f1-26": 0.7740688920021057,
        "codebertscore_s_f3-26": 0.7677853107452393,
        "codebertscore_s_f1-59": 0.8285635113716125,
        "codebertscore_s_f3-59": 0.7985420227050781,
        "codebertscore_s_f1-63": 0.8323985934257507,
        "codebertscore_s_f3-63": 0.8000766634941101,
        "codebertscore_s_f1-138": 0.7939875721931458,
        "codebertscore_s_f3-138": 0.7989248037338257,
        "codebertscore_s_f1-169": 0.8134436011314392,
        "codebertscore_s_f3-169": 0.7936827540397644,
        "gpt35_nsnr-180": 3,
        "raw_gpt35_nsnr-180": "3",
        "gpt35_nsnr-31": 0,
        "raw_gpt35_nsnr-31": "0",
        "gpt35_nsnr-6": 0,
        "raw_gpt35_nsnr-6": "0",
        "gpt35_nsnr-74": 3,
        "raw_gpt35_nsnr-74": "3",
        "gpt35_nsnr-66": 3,
        "raw_gpt35_nsnr-66": "3",
        "gpt35_nsnr-61": 2,
        "raw_gpt35_nsnr-61": "2",
        "gpt35_nsnr-38": 4,
        "raw_gpt35_nsnr-38": "4",
        "gpt35_nsnr-29": 3,
        "raw_gpt35_nsnr-29": "3",
        "gpt35_nsnr-190": 4,
        "raw_gpt35_nsnr-190": "4",
        "gpt35_nsnr-150": 0,
        "raw_gpt35_nsnr-150": "0",
        "gpt35_nsnr-25": 4,
        "raw_gpt35_nsnr-25": "4",
        "gpt35_nsnr-164": 2,
        "raw_gpt35_nsnr-164": "2",
        "gpt35_nsnr-115": 4,
        "raw_gpt35_nsnr-115": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-26": 3,
        "raw_gpt35_nsnr-26": "3",
        "gpt35_nsnr-59": 3,
        "raw_gpt35_nsnr-59": "3",
        "gpt35_nsnr-63": 4,
        "raw_gpt35_nsnr-63": "4",
        "gpt35_nsnr-138": 4,
        "raw_gpt35_nsnr-138": "4",
        "gpt35_nsnr-169": 4,
        "raw_gpt35_nsnr-169": "4",
        "gpt35_nswr-180": 3,
        "raw_gpt35_nswr-180": "3",
        "gpt35_nswr-31": 3,
        "raw_gpt35_nswr-31": "3",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-74": 3,
        "raw_gpt35_nswr-74": "3",
        "gpt35_nswr-66": 0,
        "raw_gpt35_nswr-66": "0",
        "gpt35_nswr-61": 2,
        "raw_gpt35_nswr-61": "2",
        "gpt35_nswr-38": 3,
        "raw_gpt35_nswr-38": "3",
        "gpt35_nswr-29": 3,
        "raw_gpt35_nswr-29": "3",
        "gpt35_nswr-190": 3,
        "raw_gpt35_nswr-190": "3",
        "gpt35_nswr-150": 2,
        "raw_gpt35_nswr-150": "2",
        "gpt35_nswr-25": 3,
        "raw_gpt35_nswr-25": "3",
        "gpt35_nswr-164": 2,
        "raw_gpt35_nswr-164": "2",
        "gpt35_nswr-115": 3,
        "raw_gpt35_nswr-115": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3",
        "gpt35_nswr-63": 3,
        "raw_gpt35_nswr-63": "3",
        "gpt35_nswr-138": 2,
        "raw_gpt35_nswr-138": "2",
        "gpt35_nswr-169": 3,
        "raw_gpt35_nswr-169": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    // zero, and has a frequency greater than or equal to the value of the integer itself. \n    // The frequency of an integer is the number of times it appears in the list.\n    // If no such a value exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1]) == 2\n    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5, 4, 4, 4]) == -1\n    public static int search(ArrayList<Integer> lst) {\n",
        "snippet": [
            "        int[] frq = new int[Collections.max(lst) + 1];\n        for (int i : lst) {\n            frq[i] += 1;\n        }\n        int ans = -1;\n        for (int i = 1; i < frq.length; i++) {\n            if (frq[i] >= i) {\n                ans = i;\n            }\n        }\n        return ans;\n    }\n}"
        ],
        "simplified": "You are given a non-empty list of positive integers. Return the greatest integer that is greater than zero, and has a frequency greater than or equal to the value of the integer itself. The frequency of an integer is the number of times it appears in the list. If no such a value exist, return -1.",
        "task_id": "69",
        "168": "int index = -1;\n        int val = 0;\n        int count = 0;\n        // find the most repeated element\n        for (int i = 0; i < lst.size(); i++) {\n            count = Collections.frequency(lst, lst.get(i));\n            if (count > val) {\n                val = count;\n                index = i;\n            }\n        }\n        if (val >= lst.get(index)) {\n            return lst.get(index);\n        }\n        return -1;",
        "grade-168": {
            "execution": 0
        },
        "28": "if (lst.size() == 0) {\n            return -1;\n        }\n        HashMap<Integer, Integer> mp = new HashMap<Integer, Integer>();\n        for (int num : lst) {\n            mp.put(num, mp.getOrDefault(num, 0) + 1);\n        }\n        ArrayList<Pair<Integer, Integer>> pairs = new ArrayList<Pair<Integer, Integer>>();\n        for (Map.Entry<Integer, Integer> entry : mp.entrySet()) {\n            pairs.add(new Pair<Integer, Integer>(entry.getKey(), entry.getValue()));\n        }\n        Collections.sort(pairs, new PairComparator<Integer, Integer>());\n        for (int i = 0; i < pairs.size(); i++) {\n            if (pairs.get(i).a() >= pairs.get(i).b()) {\n                return pairs.get(i).a();\n            }\n        }\n        return -1;",
        "grade-28": {
            "execution": 0
        },
        "6": "int[] freq = new int[lst.size() + 1];\n        for (int x : lst) {\n            freq[x]++;\n        }\n        for (int i = lst.size(); i >= 1; i--) {\n            if (freq[i] >= i) {\n                return i;\n            }\n        }\n        return -1;",
        "grade-6": {
            "execution": 0
        },
        "195": "int freq[] = new int[lst.size() + 1];\n        for (int i = 0; i < lst.size(); i++) {\n            freq[lst.get(i)]++;\n        }\n        for (int i = lst.size(); i >= 1; i--) {\n            if (freq[i] >= i) {\n                return i;\n            }\n        }\n        return -1;",
        "grade-195": {
            "execution": 0
        },
        "71": "int res = -1;\n        Collections.sort(lst);\n        int lastValue = lst.get(0);\n        int count = 1;\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) == lastValue) {\n                count++;\n            } else {\n                if (count >= lastValue) {\n                    res = lastValue;\n                }\n                lastValue = lst.get(i);\n                count = 1;\n            }\n        }\n        if (count >= lastValue) {\n            res = lastValue;\n        }\n        return res;",
        "grade-71": {
            "execution": 1
        },
        "63": "// Iterate through the list and create a mapping of all numbers to their frequencies.\n        // A Java HashMap might be useful here.\n        // https://docs.oracle.com/javase/8/docs/api/java/util/HashMap.html\n        HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n        for (int i = 0; i < lst.size(); i++) {\n            count.put(lst.get(i), count.getOrDefault(lst.get(i), 0) + 1);\n        }\n        // Iterate through the list again and keep track of the max value.\n        // If the current value exists in the mapping of numbers to frequencies\n        // and it's frequency is greater than or equal to the current value,\n        // update the max value.\n        int max = -1;\n        for (int i = 0; i < lst.size(); i++) {\n            if (count.containsKey(lst.get(i)) && count.get(lst.get(i)) >= lst.get(i)) {\n                max = Math.max(max, lst.get(i));\n            }\n        }\n        return max;",
        "grade-63": {
            "execution": 1
        },
        "58": "int max = -1;\n        HashMap<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < lst.size(); i++) {\n            int key = lst.get(i);\n            if (map.containsKey(key)) {\n                map.put(key, map.get(key) + 1);\n            } else {\n                map.put(key, 1);\n            }\n        }\n        List<Integer> keys = new ArrayList<Integer>(map.keySet());\n        for (int i = 0; i < keys.size(); i++) {\n            int key = keys.get(i);\n            if (key > 0 && map.get(key) >= key) {\n                max = Math.max(max, key);\n            }\n        }\n        return max;",
        "grade-58": {
            "execution": 1
        },
        "35": "// code here\n        // lst.stream().filter(x -> Collections.frequency(lst, x) >= x).max(Integer::compareTo).orElse(-1);\n        List<Integer> result = lst.stream().filter(x -> Collections.frequency(lst, x) >= x).collect(Collectors.toList());\n        return result.size() == 0 ? -1 : Collections.max(result);",
        "grade-35": {
            "execution": 1
        },
        "194": "// code\n        ArrayList<Integer> resultList = new ArrayList<Integer>();\n        Collections.sort(lst);\n        for (int i = 0; i < lst.size(); i++) {\n            int count = 1;\n            for (int j = i+1; j < lst.size(); j++) {\n                if (lst.get(i) == lst.get(j)) {\n                    count++;\n                }\n            }\n            resultList.add(count);\n        }\n        for (int i = 0; i < resultList.size(); i++) {\n            if (resultList.get(i) >= lst.get(i)) {\n                return lst.get(i);\n            }\n        }\n        return -1;",
        "grade-194": {
            "execution": 0
        },
        "26": "HashMap<Integer, Integer> map = new HashMap<>();\n        for (int i : lst) {\n            if (map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n            } else {\n                map.put(i, 1);\n            }\n        }\n        int ans = -1;\n        for (int i : map.keySet()) {\n            if (i <= map.get(i)) {\n                ans = i;\n            }\n        }\n        return ans;",
        "grade-26": {
            "execution": 1
        },
        "179": "int[] freq = new int[5001];\n        for (int i : lst) freq[i]++;\n        for (int i = 5000; i >= 1; i--) {\n            if (freq[i] >= i) return i;\n        }\n        return -1;",
        "grade-179": {
            "execution": 1
        },
        "141": "// count how many times each element appears in the list.\n        HashMap<Integer, Integer> hm = new HashMap<Integer, Integer>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (hm.containsKey(lst.get(i))) {\n                int cur = hm.get(lst.get(i));\n                hm.put(lst.get(i), cur + 1);\n            } else {\n                hm.put(lst.get(i), 1);\n            }\n        }\n        // if the element is greater than 1, AND\n        // the frequency is greater than or equal to the element,\n        // return the element.\n        // if you get through the list without finding such a value,\n        // return -1.\n        for (int i = 1; i < lst.size(); i++) {\n            if (hm.containsKey(i) && hm.get(i) >= i) {\n                return i;\n            }\n        }\n        return -1;",
        "grade-141": {
            "execution": 0
        },
        "22": "HashMap<Integer, Integer> freq = new HashMap<>();\n        int bestValue = -1;\n        for (int n : lst) {\n            if (freq.containsKey(n)) {\n                freq.put(n, freq.get(n) + 1);\n            } else {\n                freq.put(n, 1);\n            }\n            if (freq.get(n) >= n && n > bestValue) {\n                bestValue = n;\n            }\n        }\n        return bestValue;",
        "grade-22": {
            "execution": 1
        },
        "153": "// Find the frequency of each element in the list.\n        Map<Integer, Integer> frequency = new HashMap<>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (frequency.containsKey(lst.get(i))) {\n                int currentFreq = frequency.get(lst.get(i));\n                frequency.put(lst.get(i), currentFreq + 1);\n            } else {\n                frequency.put(lst.get(i), 1);\n            }\n        }\n        // Create a new list of pairs containing the element and its frequency.\n        ArrayList<Pair<Integer, Integer>> pairs = new ArrayList<>();\n        for (Map.Entry<Integer, Integer> entry : frequency.entrySet()) {\n            pairs.add(new Pair<>(entry.getKey(), entry.getValue()));\n        }\n        // Sort the pairs from smallest to largest frequency.\n        Collections.sort(pairs, new Comparator<Pair<Integer, Integer>>() {\n            @Override\n            public int compare(Pair<Integer, Integer> o1, Pair<Integer, Integer> o2) {\n                return o1.getValue1().compareTo(o2.getValue1());\n            }\n        });\n        // Find the smallest key with a frequency greater than or equal to the key.\n        for (int i = 0; i < pairs.size(); i++) {\n            int key = pairs.get(i).getValue0();\n            int freq = pairs.get(i).getValue1();\n            if (freq >= key) {\n                return key;\n            }\n        }\n        return -1;",
        "grade-153": {
            "execution": 0
        },
        "109": "// calculate and put into map the frequency of each integer \n        HashMap<Integer, Integer> freq = new HashMap<Integer, Integer>();\n        for (int i : lst) {\n            if (freq.containsKey(i)) {\n                freq.put(i, freq.get(i) + 1);\n            } else {\n                freq.put(i, 1);\n            }\n        }\n        // find largest frequency\n        int maxFreq = 0;\n        for (int i : freq.keySet()) {\n            if (freq.get(i) > maxFreq) {\n                maxFreq = freq.get(i);\n            }\n        }\n        // if there is a key with a frequency equal to maxFreq, return that key\n        for (int i : freq.keySet()) {\n            if (freq.get(i) == maxFreq) {\n                return i;\n            }\n        }\n        // otherwise return -1\n        return -1;",
        "grade-109": {
            "execution": 0
        },
        "8": "// Loop through list, and make a map that keeps track of each number, and how many times it appears.\n        // Then, loop through the map and return the key if that key is greater than the frequency of the number.\n        // Otherwise, return -1.\n        Map<Integer, Integer> freq = new HashMap<Integer, Integer>();\n        for (int i = 0; i < lst.size(); i++) {\n            freq.put(lst.get(i), freq.getOrDefault(lst.get(i), 0) + 1);\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) <= freq.get(lst.get(i))) {\n                return lst.get(i);\n            }\n        }\n        return -1;",
        "grade-8": {
            "execution": 0
        },
        "7": "int currentMaxFreq = -1;\n        int currentMaxFreqValue = -1;\n        Map<Integer, Integer> freqMap = new HashMap<>();\n        for (int i=0; i<lst.size(); i++) {\n            if (freqMap.containsKey(lst.get(i))) {\n                freqMap.put(lst.get(i), freqMap.get(lst.get(i)) + 1);\n            } else {\n                freqMap.put(lst.get(i), 1);\n            }\n        }\n        for (Map.Entry<Integer, Integer> m: freqMap.entrySet()) {\n            if (m.getValue() >= m.getKey() && m.getValue() > currentMaxFreq) {\n                currentMaxFreq = m.getValue();\n                currentMaxFreqValue = m.getKey();\n            }\n        }\n        return currentMaxFreqValue;",
        "grade-7": {
            "execution": 0
        },
        "23": "return lst.stream()\n            .collect(Collectors.groupingBy(x -> x, Collectors.counting()))\n            .entrySet()\n            .stream()\n            .filter(x -> x.getKey() >= x.getValue())\n            .map(x -> x.getKey())\n            .max(Integer::compareTo)\n            .orElse(-1);",
        "grade-23": {
            "execution": 0
        },
        "56": "HashMap<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (map.containsKey(lst.get(i))) {\n                map.put(lst.get(i), map.get(lst.get(i)) + 1);\n            } else {\n                map.put(lst.get(i), 1);\n            }\n        }\n        int max = -1;\n        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {\n            if (entry.getKey() > entry.getValue() && entry.getKey() > max) {\n                max = entry.getKey();\n            }\n        }\n        return max;",
        "grade-56": {
            "execution": 0
        },
        "60": "int[] arr = new int[lst.size() + 1];\n        for (int i = 0; i < lst.size(); i++) {\n            arr[lst.get(i)]++;\n        }\n        int res = -1;\n        for (int i = 1; i < arr.length; i++) {\n            if (arr[i] >= i) {\n                res = i;\n            }\n        }\n        return res;",
        "grade-60": {
            "execution": 0
        },
        "bleu-168": 0.19534450613770396,
        "bleu-28": 0.11702585190485937,
        "bleu-6": 0.4212981020243081,
        "bleu-195": 0.41039452193965364,
        "bleu-71": 0.23613297155441657,
        "bleu-63": 0.10588525176393765,
        "bleu-58": 0.14276231831241407,
        "bleu-35": 0.041333613949537946,
        "bleu-194": 0.1744611489213288,
        "bleu-26": 0.32931881701183896,
        "bleu-179": 0.3747840644857,
        "bleu-141": 0.13963938039246987,
        "bleu-22": 0.16609196733614595,
        "bleu-153": 0.07009475717913699,
        "bleu-109": 0.12160600501976133,
        "bleu-8": 0.12621837791007923,
        "bleu-7": 0.12023132639602611,
        "bleu-23": 0.02938510252453747,
        "bleu-56": 0.15583019017078614,
        "bleu-60": 0.49381265586274364,
        "codebleu-168": 0.5475232932587345,
        "codebleu-28": 0.5957167287709442,
        "codebleu-6": 0.6404431260578972,
        "codebleu-195": 0.6835332518367819,
        "codebleu-71": 0.5773532539514279,
        "codebleu-63": 0.5821985607897872,
        "codebleu-58": 0.5958164881628331,
        "codebleu-35": 0.36629941165141494,
        "codebleu-194": 0.5937913080215401,
        "codebleu-26": 0.5860595305981484,
        "codebleu-179": 0.5165883610859595,
        "codebleu-141": 0.5815820396477427,
        "codebleu-22": 0.5320908314764432,
        "codebleu-153": 0.5999397820739195,
        "codebleu-109": 0.5681322225003077,
        "codebleu-8": 0.5473516369477526,
        "codebleu-7": 0.5887699732343459,
        "codebleu-23": 0.29924036896364625,
        "codebleu-56": 0.5729579702560442,
        "codebleu-60": 0.741908801378004,
        "chrf-168": 0.30952979493882316,
        "chrf-28": 0.26712414274696933,
        "chrf-6": 0.45007897687853027,
        "chrf-195": 0.42304285146903936,
        "chrf-71": 0.33834702517727,
        "chrf-63": 0.22939805208655145,
        "chrf-58": 0.2752092204239651,
        "chrf-35": 0.2073888971240194,
        "chrf-194": 0.33082696594737704,
        "chrf-26": 0.41304278516663984,
        "chrf-179": 0.4240985526779447,
        "chrf-141": 0.265208445477752,
        "chrf-22": 0.2802442246635888,
        "chrf-153": 0.21142761857253678,
        "chrf-109": 0.2605932064031869,
        "chrf-8": 0.2552859192210583,
        "chrf-7": 0.2530000696159304,
        "chrf-23": 0.15752366082966843,
        "chrf-56": 0.2700848081174986,
        "chrf-60": 0.5197422955924613,
        "rougel-168": 0.41530054644808745,
        "rougel-28": 0.30921052631578944,
        "rougel-6": 0.6838709677419356,
        "rougel-195": 0.627906976744186,
        "rougel-71": 0.45999999999999996,
        "rougel-63": 0.3014492753623188,
        "rougel-58": 0.36153846153846153,
        "rougel-35": 0.22459893048128343,
        "rougel-194": 0.4297520661157025,
        "rougel-26": 0.5,
        "rougel-179": 0.6524822695035462,
        "rougel-141": 0.32558139534883723,
        "rougel-22": 0.34972677595628415,
        "rougel-153": 0.2054794520547945,
        "rougel-109": 0.3173431734317343,
        "rougel-8": 0.3409090909090909,
        "rougel-7": 0.2695035460992908,
        "rougel-23": 0.16766467065868265,
        "rougel-56": 0.3170731707317073,
        "rougel-60": 0.7542857142857142,
        "meteor-168": 0.3245581283880911,
        "meteor-28": 0.43090666552863066,
        "meteor-6": 0.609680711221807,
        "meteor-195": 0.6299021254675355,
        "meteor-71": 0.43143717660586417,
        "meteor-63": 0.39599837753161016,
        "meteor-58": 0.4033174877490866,
        "meteor-35": 0.17365269461077845,
        "meteor-194": 0.47904658069192907,
        "meteor-26": 0.5026390159062559,
        "meteor-179": 0.5806044180141302,
        "meteor-141": 0.4209317538623792,
        "meteor-22": 0.3182516488344235,
        "meteor-153": 0.35846520523998615,
        "meteor-109": 0.39033762076599315,
        "meteor-8": 0.4026352037117588,
        "meteor-7": 0.36858870967741936,
        "meteor-23": 0.14019938650306749,
        "meteor-56": 0.3608862798475095,
        "meteor-60": 0.7925382493390634,
        "ruby-168": 0.17647058823529416,
        "ruby-28": 0.19730941704035876,
        "ruby-6": 0.5925925925925926,
        "ruby-195": 0.4725274725274725,
        "ruby-71": 0.26890756302521013,
        "ruby-63": 0.1742424242424242,
        "ruby-58": 0.23463687150837986,
        "ruby-35": 0.12264150943396224,
        "ruby-194": 0.2981366459627329,
        "ruby-26": 0.30841121495327106,
        "ruby-179": 0.5555555555555556,
        "ruby-141": 0.19999999999999996,
        "ruby-22": 0.2450980392156863,
        "ruby-153": 0.1204481792717087,
        "ruby-109": 0.18947368421052635,
        "ruby-8": 0.21311475409836067,
        "ruby-7": 0.15920398009950254,
        "ruby-23": 0.06976744186046513,
        "ruby-56": 0.19999999999999996,
        "ruby-60": 0.6595744680851063,
        "codebertscore_f1-168": 0.7835964560508728,
        "codebertscore_f3-168": 0.7887109518051147,
        "codebertscore_f1-28": 0.7320092916488647,
        "codebertscore_f3-28": 0.7664023637771606,
        "codebertscore_f1-6": 0.8850237131118774,
        "codebertscore_f3-6": 0.8728212714195251,
        "codebertscore_f1-195": 0.8768547177314758,
        "codebertscore_f3-195": 0.8731674551963806,
        "codebertscore_f1-71": 0.807604193687439,
        "codebertscore_f3-71": 0.8222733736038208,
        "codebertscore_f1-63": 0.7251406311988831,
        "codebertscore_f3-63": 0.7796175479888916,
        "codebertscore_f1-58": 0.7717710733413696,
        "codebertscore_f3-58": 0.7953018546104431,
        "codebertscore_f1-35": 0.7251941561698914,
        "codebertscore_f3-35": 0.7364554405212402,
        "codebertscore_f1-194": 0.7951493263244629,
        "codebertscore_f3-194": 0.8110632300376892,
        "codebertscore_f1-26": 0.8109516501426697,
        "codebertscore_f3-26": 0.818269670009613,
        "codebertscore_f1-179": 0.8538347482681274,
        "codebertscore_f3-179": 0.8398284316062927,
        "codebertscore_f1-141": 0.7528530359268188,
        "codebertscore_f3-141": 0.7962284684181213,
        "codebertscore_f1-22": 0.7999649047851562,
        "codebertscore_f3-22": 0.8116886019706726,
        "codebertscore_f1-153": 0.7147412300109863,
        "codebertscore_f3-153": 0.7805507779121399,
        "codebertscore_f1-109": 0.7516307830810547,
        "codebertscore_f3-109": 0.7928628325462341,
        "codebertscore_f1-8": 0.7637810111045837,
        "codebertscore_f3-8": 0.7953281402587891,
        "codebertscore_f1-7": 0.7621461153030396,
        "codebertscore_f3-7": 0.8000038266181946,
        "codebertscore_f1-23": 0.6889961361885071,
        "codebertscore_f3-23": 0.6991353034973145,
        "codebertscore_f1-56": 0.7781996726989746,
        "codebertscore_f3-56": 0.7975096702575684,
        "codebertscore_f1-60": 0.9047950506210327,
        "codebertscore_f3-60": 0.9019557237625122,
        "codebertscore_s_f1-168": 0.7900986671447754,
        "codebertscore_s_f3-168": 0.797883152961731,
        "codebertscore_s_f1-28": 0.7676196098327637,
        "codebertscore_s_f3-28": 0.8027322888374329,
        "codebertscore_s_f1-6": 0.8813802003860474,
        "codebertscore_s_f3-6": 0.8710529208183289,
        "codebertscore_s_f1-195": 0.8742060661315918,
        "codebertscore_s_f3-195": 0.8697426915168762,
        "codebertscore_s_f1-71": 0.8116543292999268,
        "codebertscore_s_f3-71": 0.8258442878723145,
        "codebertscore_s_f1-63": 0.7478185296058655,
        "codebertscore_s_f3-63": 0.7973136305809021,
        "codebertscore_s_f1-58": 0.7910208702087402,
        "codebertscore_s_f3-58": 0.8080191016197205,
        "codebertscore_s_f1-35": 0.7334334850311279,
        "codebertscore_s_f3-35": 0.7417502999305725,
        "codebertscore_s_f1-194": 0.8171803951263428,
        "codebertscore_s_f3-194": 0.8276079297065735,
        "codebertscore_s_f1-26": 0.8049362301826477,
        "codebertscore_s_f3-26": 0.8131809830665588,
        "codebertscore_s_f1-179": 0.8525180220603943,
        "codebertscore_s_f3-179": 0.8393906950950623,
        "codebertscore_s_f1-141": 0.7797925472259521,
        "codebertscore_s_f3-141": 0.812068521976471,
        "codebertscore_s_f1-22": 0.7998802065849304,
        "codebertscore_s_f3-22": 0.8152573108673096,
        "codebertscore_s_f1-153": 0.7619157433509827,
        "codebertscore_s_f3-153": 0.8008797764778137,
        "codebertscore_s_f1-109": 0.7796986699104309,
        "codebertscore_s_f3-109": 0.8120185732841492,
        "codebertscore_s_f1-8": 0.7677597999572754,
        "codebertscore_s_f3-8": 0.7956287264823914,
        "codebertscore_s_f1-7": 0.7781183123588562,
        "codebertscore_s_f3-7": 0.8051239848136902,
        "codebertscore_s_f1-23": 0.6919479966163635,
        "codebertscore_s_f3-23": 0.7017925977706909,
        "codebertscore_s_f1-56": 0.7844154238700867,
        "codebertscore_s_f3-56": 0.8063552379608154,
        "codebertscore_s_f1-60": 0.9092704057693481,
        "codebertscore_s_f3-60": 0.9050996899604797,
        "gpt35_nsnr-168": 3,
        "raw_gpt35_nsnr-168": "3",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-195": 4,
        "raw_gpt35_nsnr-195": "4",
        "gpt35_nsnr-71": 4,
        "raw_gpt35_nsnr-71": "4",
        "gpt35_nsnr-63": 4,
        "raw_gpt35_nsnr-63": "4",
        "gpt35_nsnr-58": 4,
        "raw_gpt35_nsnr-58": "4",
        "gpt35_nsnr-35": 3,
        "raw_gpt35_nsnr-35": "3",
        "gpt35_nsnr-194": 3,
        "raw_gpt35_nsnr-194": "3",
        "gpt35_nsnr-26": 3,
        "raw_gpt35_nsnr-26": "3",
        "gpt35_nsnr-179": 4,
        "raw_gpt35_nsnr-179": "4",
        "gpt35_nsnr-141": 4,
        "raw_gpt35_nsnr-141": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-153": 4,
        "raw_gpt35_nsnr-153": "4",
        "gpt35_nsnr-109": 3,
        "raw_gpt35_nsnr-109": "3",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-56": 3,
        "raw_gpt35_nsnr-56": "3",
        "gpt35_nsnr-60": 4,
        "raw_gpt35_nsnr-60": "4",
        "gpt35_nswr-168": 3,
        "raw_gpt35_nswr-168": "3",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-195": 4,
        "raw_gpt35_nswr-195": "4",
        "gpt35_nswr-71": 2,
        "raw_gpt35_nswr-71": "2",
        "gpt35_nswr-63": 3,
        "raw_gpt35_nswr-63": "3",
        "gpt35_nswr-58": 3,
        "raw_gpt35_nswr-58": "3",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-194": 2,
        "raw_gpt35_nswr-194": "2",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-179": 4,
        "raw_gpt35_nswr-179": "4",
        "gpt35_nswr-141": 2,
        "raw_gpt35_nswr-141": "2",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-153": 3,
        "raw_gpt35_nswr-153": "3",
        "gpt35_nswr-109": 2,
        "raw_gpt35_nswr-109": "2",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-56": 2,
        "raw_gpt35_nswr-56": "2",
        "gpt35_nswr-60": 4,
        "raw_gpt35_nswr-60": "4"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    // (2.0, 2.2)\n    // >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    // (2.0, 2.0)\n    public static Pair<Float, Float> findClosestElements(ArrayList<Float> numbers) {\n",
        "snippet": [
            "        List<Double> closest_pair = new ArrayList<>();\n        closest_pair.add(numbers.get(0));\n        closest_pair.add(numbers.get(1));\n        double distance = Math.abs(numbers.get(1) - numbers.get(0));\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < distance) {\n                    closest_pair.clear();\n                    closest_pair.add(numbers.get(i));\n                    closest_pair.add(numbers.get(j));\n                    distance = Math.abs(numbers.get(i) - numbers.get(j));\n                }\n            }\n        }\n        Collections.sort(closest_pair);\n        return closest_pair;\n    }\n}"
        ],
        "simplified": "From a supplied list of numbers (of length at least two) select and return two that are the closest to each other and return them in order (smaller number, larger number).",
        "task_id": "20",
        "182": "return Pair.with(0f, 0f);",
        "grade-182": {
            "execution": 0
        },
        "28": "float minDifference = Float.MAX_VALUE;\n        Pair<Float, Float> minPair = null;\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                float difference = Math.abs(numbers.get(i) - numbers.get(j));\n                if (difference < minDifference) {\n                    minDifference = difference;\n                    minPair = Pair.with(numbers.get(i), numbers.get(j));\n                }\n            }\n        }\n        return minPair;",
        "grade-28": {
            "execution": 0
        },
        "6": "// Replace with your code\n        return new Pair<Float, Float>(0.0f, 0.0f);",
        "grade-6": {
            "execution": 0
        },
        "74": "// Make sure you implement this method and return the right tuple.\n        return new Pair<Float, Float>(0.0f, 0.0f);",
        "grade-74": {
            "execution": 0
        },
        "65": "throw new RuntimeException(\"findClosestElements not implemented\");",
        "grade-65": {
            "execution": 0
        },
        "60": "// Your code here\n        float m = Float.MAX_VALUE;\n        Pair<Float, Float> pair = null;\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                float diff = Math.abs(numbers.get(i) - numbers.get(j));\n                if (diff < m) {\n                    m = diff;\n                    pair = Pair.with(numbers.get(i), numbers.get(j));\n                }\n            }\n        }\n        return pair;",
        "grade-60": {
            "execution": 0
        },
        "36": "return new Pair<Float, Float>(0f, 0f);",
        "grade-36": {
            "execution": 0
        },
        "26": "if (numbers.size() < 2) {\n            return new Pair<>(0.0f, 0.0f);\n        }\n        float distance = Float.MAX_VALUE;\n        float prev = numbers.get(0);\n        float next = numbers.get(1);\n        for (int i = 1; i < numbers.size(); i++) {\n            float curr = numbers.get(i);\n            float currDistance = Math.abs(curr - prev);\n            if (currDistance < distance) {\n                distance = currDistance;\n                next = curr;\n            }\n            prev = curr;\n        }\n        return new Pair<>(prev, next);",
        "grade-26": {
            "execution": 0
        },
        "193": "// initialize to the first two elements in the list\n        float closest = Math.abs(numbers.get(0) - numbers.get(1));\n        Pair<Float, Float> closestPair = new Pair<Float, Float>(numbers.get(0), numbers.get(1));\n        float temp;\n        // iterate over the numbers and replace the closestPair variable if a new closest pair is found\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                temp = Math.abs(numbers.get(i) - numbers.get(j));\n                if (temp < closest) {\n                    closest = temp;\n                    closestPair = new Pair<Float, Float>(numbers.get(i), numbers.get(j));\n                }\n            }\n        }\n        return closestPair;",
        "grade-193": {
            "execution": 0
        },
        "154": "// Write your implementation here.\n        return new Pair<>(0f, 0f);",
        "grade-154": {
            "execution": 0
        },
        "22": "// find difference between each number and return the smallest\n        // if there is a smallest, check if it's the same number next to it\n\n        // find difference between each number\n        // return the smallest\n        // if the smallest is zero, return the numbers\n\n        int n = numbers.size();\n        float smallestDifference = Float.MAX_VALUE;\n        int indexSmallestDifference = 0;\n        float difference;\n\n        for (int i = 0; i < n - 1; i++) {\n            difference = Math.abs(numbers.get(i) - numbers.get(i + 1));\n            if (difference < smallestDifference) {\n                smallestDifference = difference;\n                indexSmallestDifference = i;\n            }\n        }\n\n        if (smallestDifference == 0) {\n            // System.out.println(\"same number\");\n            return new Pair<Float, Float>(numbers.get(indexSmallestDifference), numbers.get(indexSmallestDifference + 1));\n        } else {\n            // System.out.println(\"different number\");\n            return new Pair<Float, Float>(numbers.get(indexSmallestDifference), numbers.get(indexSmallestDifference + 1));\n        }",
        "grade-22": {
            "execution": 0
        },
        "169": "throw new UnsupportedOperationException(\"Not Implemented Yet\");",
        "grade-169": {
            "execution": 0
        },
        "117": "Collections.sort(numbers);\n        float minDiff = Float.MAX_VALUE;\n        float minDiffLower = 0.0f;\n        float minDiffUpper = 0.0f;\n        int n = numbers.size();\n        for (int i = 0; i < n - 1; i++) {\n            float diff = numbers.get(i + 1) - numbers.get(i);\n            if (diff < minDiff) {\n                minDiff = diff;\n                minDiffLower = numbers.get(i);\n                minDiffUpper = numbers.get(i + 1);\n            }\n        }\n        return new Pair<Float, Float>(minDiffLower, minDiffUpper);",
        "grade-117": {
            "execution": 0
        },
        "8": "if (numbers.size() == 0)\n            return null;\n        float closest = Math.abs(numbers.get(0) - numbers.get(1));\n        float first = numbers.get(0);\n        float second = numbers.get(1);\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                float temp = Math.abs(numbers.get(i) - numbers.get(j));\n                if (temp < closest) {\n                    closest = temp;\n                    first = numbers.get(i);\n                    second = numbers.get(j);\n                }\n            }\n        }\n        return new Pair<Float, Float>(first, second);",
        "grade-8": {
            "execution": 0
        },
        "7": "return null;",
        "grade-7": {
            "execution": 0
        },
        "23": "float diff = Float.MAX_VALUE;\n        Pair<Float, Float> result = new Pair<Float, Float>(Float.MAX_VALUE, Float.MAX_VALUE);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                float newDiff = Math.abs(numbers.get(i) - numbers.get(j));\n                if (newDiff < diff) {\n                    diff = newDiff;\n                    result = new Pair<Float, Float>(numbers.get(i), numbers.get(j));\n                }\n            }\n        }\n        return result;",
        "grade-23": {
            "execution": 0
        },
        "58": "// This is a one-liner (in fact, there are two correct one-liners).\n        // Your answer here:\n        return null;",
        "grade-58": {
            "execution": 0
        },
        "62": "// >>> Your code goes here.\n        if (numbers.size() < 2) return null;\n        float closest = numbers.get(0);\n        float closest1 = numbers.get(1);\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < Math.abs(closest - closest1)) {\n                    closest = numbers.get(i);\n                    closest1 = numbers.get(j);\n                }\n            }\n        }\n        return new Pair<>(closest, closest1);",
        "grade-62": {
            "execution": 0
        },
        "140": "Pair<Float, Float> closest = new Pair<Float, Float>(numbers.get(0), numbers.get(1));\n        float smallestDifference = Math.abs(numbers.get(0) - numbers.get(1));\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                float currentDifference = Math.abs(numbers.get(i) - numbers.get(j));\n                if (currentDifference < smallestDifference) {\n                    closest = new Pair<Float, Float>(numbers.get(i), numbers.get(j));\n                    smallestDifference = currentDifference;\n                }\n            }\n        }\n        return closest;",
        "grade-140": {
            "execution": 0
        },
        "172": "Float firstNumber = numbers.get(0);\n        Float secondNumber = numbers.get(1);\n        Float smallestDifference = secondNumber - firstNumber;\n        for (int i = 1; i < numbers.size() - 1; i++) {\n            Float currentDifference = numbers.get(i + 1) - numbers.get(i);\n            if (currentDifference < smallestDifference) {\n                smallestDifference = currentDifference;\n                firstNumber = numbers.get(i);\n                secondNumber = numbers.get(i + 1);\n            }\n        }\n        return new Pair<Float, Float>(firstNumber, secondNumber);",
        "grade-172": {
            "execution": 0
        },
        "bleu-182": 1.3158391373410068e-09,
        "bleu-28": 0.3706898276405374,
        "bleu-6": 5.782948857693701e-05,
        "bleu-74": 0.0003219756196885672,
        "bleu-65": 2.0315945739528282e-07,
        "bleu-60": 0.3692108357313304,
        "bleu-36": 2.7787793019187483e-07,
        "bleu-26": 0.24651925502174,
        "bleu-193": 0.5433858246770746,
        "bleu-154": 7.163613607346828e-06,
        "bleu-22": 0.25474236213056806,
        "bleu-169": 7.695064015204263e-08,
        "bleu-117": 0.23808406534233864,
        "bleu-8": 0.5538565048120032,
        "bleu-7": 1.511392372657754e-28,
        "bleu-23": 0.401796867955075,
        "bleu-58": 9.120718505101494e-05,
        "bleu-62": 0.4819234314107358,
        "bleu-140": 0.5573184414869722,
        "bleu-172": 0.24426611312501684,
        "codebleu-182": 0.032295278669332766,
        "codebleu-28": 0.45259902082522807,
        "codebleu-6": 0.03922482222536839,
        "codebleu-74": 0.057734265504171364,
        "codebleu-65": 0.013840830450098467,
        "codebleu-60": 0.4632958075514777,
        "codebleu-36": 0.03690917207900912,
        "codebleu-26": 0.4095198479704189,
        "codebleu-193": 0.6742826824728124,
        "codebleu-154": 0.04152845422744192,
        "codebleu-22": 0.5607603510708178,
        "codebleu-169": 0.013840830450098467,
        "codebleu-117": 0.385797037789836,
        "codebleu-8": 0.6612035193567289,
        "codebleu-7": 0.006920415224913494,
        "codebleu-23": 0.5006302615004735,
        "codebleu-58": 0.057728920618347015,
        "codebleu-62": 0.5840106783571107,
        "codebleu-140": 0.6415846518833986,
        "codebleu-172": 0.3931942055641804,
        "chrf-182": 0.01955602061656477,
        "chrf-28": 0.3850893699040591,
        "chrf-6": 0.03451561095121142,
        "chrf-74": 0.052753102236443944,
        "chrf-65": 0.038293011220444144,
        "chrf-60": 0.37107447840996616,
        "chrf-36": 0.024617048650151782,
        "chrf-26": 0.3264767310676286,
        "chrf-193": 0.5766372209295492,
        "chrf-154": 0.0367674587632663,
        "chrf-22": 0.3643749307949905,
        "chrf-169": 0.031086042481005546,
        "chrf-117": 0.2939077435495098,
        "chrf-8": 0.5300531479031138,
        "chrf-7": 0.012254139103250293,
        "chrf-23": 0.3671936900749822,
        "chrf-58": 0.05258550342735284,
        "chrf-62": 0.5178846598118907,
        "chrf-140": 0.5465004190885263,
        "chrf-172": 0.3416000206515829,
        "rougel-182": 0.039603960396039604,
        "rougel-28": 0.5705329153605014,
        "rougel-6": 0.0925925925925926,
        "rougel-74": 0.0892857142857143,
        "rougel-65": 0.03883495145631068,
        "rougel-60": 0.5723270440251571,
        "rougel-36": 0.05825242718446602,
        "rougel-26": 0.41486068111455104,
        "rougel-193": 0.5979381443298969,
        "rougel-154": 0.05714285714285714,
        "rougel-22": 0.36321839080459767,
        "rougel-169": 0.03902439024390244,
        "rougel-117": 0.4085365853658537,
        "rougel-8": 0.64804469273743,
        "rougel-7": 0.020512820512820513,
        "rougel-23": 0.573134328358209,
        "rougel-58": 0.06306306306306307,
        "rougel-62": 0.6529411764705882,
        "rougel-140": 0.6946778711484594,
        "rougel-172": 0.4610591900311527,
        "meteor-182": 0.014384349827387802,
        "meteor-28": 0.34348923572949713,
        "meteor-6": 0.03139269406392694,
        "meteor-74": 0.03693181818181818,
        "meteor-65": 0.014351320321469574,
        "meteor-60": 0.34367450500443214,
        "meteor-36": 0.020091848450057407,
        "meteor-26": 0.30247179290643633,
        "meteor-193": 0.4427364686623946,
        "meteor-154": 0.02290950744558992,
        "meteor-22": 0.3973326026552546,
        "meteor-169": 0.011487650775416426,
        "meteor-117": 0.2794584194351719,
        "meteor-8": 0.47801230886341195,
        "meteor-7": 0.005777007510109762,
        "meteor-23": 0.3571156435504223,
        "meteor-58": 0.025597269624573375,
        "meteor-62": 0.4247459672497878,
        "meteor-140": 0.4139844457135939,
        "meteor-172": 0.2913739211962226,
        "ruby-182": 0.02083333333333337,
        "ruby-28": 0.44791666666666663,
        "ruby-6": 0.04166666666666663,
        "ruby-74": 0.03645833333333337,
        "ruby-65": 0.02083333333333337,
        "ruby-60": 0.453125,
        "ruby-36": 0.02604166666666663,
        "ruby-26": 0.296875,
        "ruby-193": 0.41836734693877553,
        "ruby-154": 0.02604166666666663,
        "ruby-22": 0.22633744855967075,
        "ruby-169": 0.02083333333333337,
        "ruby-117": 0.296875,
        "ruby-8": 0.515625,
        "ruby-7": 0.01041666666666663,
        "ruby-23": 0.453125,
        "ruby-58": 0.03645833333333337,
        "ruby-62": 0.5416666666666667,
        "ruby-140": 0.5885416666666667,
        "ruby-172": 0.33854166666666663,
        "codebertscore_f1-182": 0.5797725319862366,
        "codebertscore_f3-182": 0.5321071147918701,
        "codebertscore_f1-28": 0.8331102132797241,
        "codebertscore_f3-28": 0.8329053521156311,
        "codebertscore_f1-6": 0.5984407067298889,
        "codebertscore_f3-6": 0.5566912889480591,
        "codebertscore_f1-74": 0.6103690266609192,
        "codebertscore_f3-74": 0.5762481093406677,
        "codebertscore_f1-65": 0.5867175459861755,
        "codebertscore_f3-65": 0.5473174452781677,
        "codebertscore_f1-60": 0.8325515985488892,
        "codebertscore_f3-60": 0.8270003199577332,
        "codebertscore_f1-36": 0.5985687971115112,
        "codebertscore_f3-36": 0.5454679727554321,
        "codebertscore_f1-26": 0.7899660468101501,
        "codebertscore_f3-26": 0.7919309735298157,
        "codebertscore_f1-193": 0.851075291633606,
        "codebertscore_f3-193": 0.8727688789367676,
        "codebertscore_f1-154": 0.5672798156738281,
        "codebertscore_f3-154": 0.5294594764709473,
        "codebertscore_f1-22": 0.7559897899627686,
        "codebertscore_f3-22": 0.7894066572189331,
        "codebertscore_f1-169": 0.5515800714492798,
        "codebertscore_f3-169": 0.5136833190917969,
        "codebertscore_f1-117": 0.7851324677467346,
        "codebertscore_f3-117": 0.7880641222000122,
        "codebertscore_f1-8": 0.8705259561538696,
        "codebertscore_f3-8": 0.859943151473999,
        "codebertscore_f1-7": 0.47226133942604065,
        "codebertscore_f3-7": 0.42253366112709045,
        "codebertscore_f1-23": 0.8270392417907715,
        "codebertscore_f3-23": 0.8252236247062683,
        "codebertscore_f1-58": 0.5844308137893677,
        "codebertscore_f3-58": 0.5575327277183533,
        "codebertscore_f1-62": 0.8505987524986267,
        "codebertscore_f3-62": 0.8466390371322632,
        "codebertscore_f1-140": 0.8735461235046387,
        "codebertscore_f3-140": 0.8718440532684326,
        "codebertscore_f1-172": 0.7921870350837708,
        "codebertscore_f3-172": 0.7823958992958069,
        "codebertscore_s_f1-182": 0.6344859600067139,
        "codebertscore_s_f3-182": 0.5982847213745117,
        "codebertscore_s_f1-28": 0.846259593963623,
        "codebertscore_s_f3-28": 0.847286581993103,
        "codebertscore_s_f1-6": 0.6454347968101501,
        "codebertscore_s_f3-6": 0.6204721331596375,
        "codebertscore_s_f1-74": 0.645094633102417,
        "codebertscore_s_f3-74": 0.6237517595291138,
        "codebertscore_s_f1-65": 0.6311231851577759,
        "codebertscore_s_f3-65": 0.6070144772529602,
        "codebertscore_s_f1-60": 0.8456870913505554,
        "codebertscore_s_f3-60": 0.8426678776741028,
        "codebertscore_s_f1-36": 0.6606881022453308,
        "codebertscore_s_f3-36": 0.6152686476707458,
        "codebertscore_s_f1-26": 0.8068860173225403,
        "codebertscore_s_f3-26": 0.8131090402603149,
        "codebertscore_s_f1-193": 0.8517584204673767,
        "codebertscore_s_f3-193": 0.8723211288452148,
        "codebertscore_s_f1-154": 0.6204441785812378,
        "codebertscore_s_f3-154": 0.6015985608100891,
        "codebertscore_s_f1-22": 0.7664612531661987,
        "codebertscore_s_f3-22": 0.7983478903770447,
        "codebertscore_s_f1-169": 0.5666933655738831,
        "codebertscore_s_f3-169": 0.5473891496658325,
        "codebertscore_s_f1-117": 0.7967715263366699,
        "codebertscore_s_f3-117": 0.8020504713058472,
        "codebertscore_s_f1-8": 0.8794622421264648,
        "codebertscore_s_f3-8": 0.8693745732307434,
        "codebertscore_s_f1-7": 0.5751325488090515,
        "codebertscore_s_f3-7": 0.5320737957954407,
        "codebertscore_s_f1-23": 0.8404906392097473,
        "codebertscore_s_f3-23": 0.8396362662315369,
        "codebertscore_s_f1-58": 0.6070547103881836,
        "codebertscore_s_f3-58": 0.595503568649292,
        "codebertscore_s_f1-62": 0.8605291247367859,
        "codebertscore_s_f3-62": 0.8579396605491638,
        "codebertscore_s_f1-140": 0.8800354599952698,
        "codebertscore_s_f3-140": 0.8779051303863525,
        "codebertscore_s_f1-172": 0.8074686527252197,
        "codebertscore_s_f3-172": 0.8012056946754456,
        "gpt35_nsnr-182": 2,
        "raw_gpt35_nsnr-182": "2",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 2,
        "raw_gpt35_nsnr-6": "2",
        "gpt35_nsnr-74": 0,
        "raw_gpt35_nsnr-74": "Score: 0",
        "gpt35_nsnr-65": 0,
        "raw_gpt35_nsnr-65": "0",
        "gpt35_nsnr-60": 4,
        "raw_gpt35_nsnr-60": "4",
        "gpt35_nsnr-36": 2,
        "raw_gpt35_nsnr-36": "2",
        "gpt35_nsnr-26": 3,
        "raw_gpt35_nsnr-26": "3",
        "gpt35_nsnr-193": 4,
        "raw_gpt35_nsnr-193": "4",
        "gpt35_nsnr-154": 2,
        "raw_gpt35_nsnr-154": "2",
        "gpt35_nsnr-22": 3,
        "raw_gpt35_nsnr-22": "3",
        "gpt35_nsnr-169": 0,
        "raw_gpt35_nsnr-169": "0",
        "gpt35_nsnr-117": 4,
        "raw_gpt35_nsnr-117": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 0,
        "raw_gpt35_nsnr-7": "0",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-58": 0,
        "raw_gpt35_nsnr-58": "0",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-140": 4,
        "raw_gpt35_nsnr-140": "4",
        "gpt35_nsnr-172": 4,
        "raw_gpt35_nsnr-172": "4",
        "gpt35_nswr-182": 1,
        "raw_gpt35_nswr-182": "1",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 2,
        "raw_gpt35_nswr-6": "2",
        "gpt35_nswr-74": 2,
        "raw_gpt35_nswr-74": "2",
        "gpt35_nswr-65": 0,
        "raw_gpt35_nswr-65": "0",
        "gpt35_nswr-60": 4,
        "raw_gpt35_nswr-60": "4",
        "gpt35_nswr-36": 1,
        "raw_gpt35_nswr-36": "1",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-193": 4,
        "raw_gpt35_nswr-193": "4",
        "gpt35_nswr-154": 2,
        "raw_gpt35_nswr-154": "2",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-169": 0,
        "raw_gpt35_nswr-169": "0",
        "gpt35_nswr-117": 3,
        "raw_gpt35_nswr-117": "3",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 0,
        "raw_gpt35_nswr-7": "0",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-58": 0,
        "raw_gpt35_nswr-58": "0",
        "gpt35_nswr-62": 4,
        "raw_gpt35_nswr-62": "4",
        "gpt35_nswr-140": 4,
        "raw_gpt35_nswr-140": "4",
        "gpt35_nswr-172": 3,
        "raw_gpt35_nswr-172": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return sorted unique common elements for two lists.\n    // >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    // [1, 5, 653]\n    // >>> common([5, 3, 2, 8], [3, 2])\n    // [2, 3]\n    public static ArrayList<Integer> common(ArrayList<Integer> l1, ArrayList<Integer> l2) {\n",
        "snippet": [
            "        Set<Integer> ret = new HashSet<>(l1);\n        ret.retainAll(new HashSet<>(l2));\n        List<Integer> result = new ArrayList<>(ret);\n        Collections.sort(result);\n        return result;\n    }\n}"
        ],
        "simplified": "Return sorted unique common elements for two lists.",
        "task_id": "58",
        "175": "HashSet<Integer> set = new HashSet<Integer>();\n        for (int num : l1) {\n            set.add(num);\n        }\n        ArrayList<Integer> common = new ArrayList<Integer>();\n        for (int num : l2) {\n            if (set.contains(num)) {\n                common.add(num);\n            }\n        }\n        Collections.sort(common);\n        return common;",
        "grade-175": {
            "execution": 0
        },
        "29": "return null;",
        "grade-29": {
            "execution": 0
        },
        "7": "// Your code here\n        HashSet<Integer> set = new HashSet<>();\n        for (int i = 0; i < l1.size(); i++) {\n            set.add(l1.get(i));\n        }\n        ArrayList<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l2.size(); i++) {\n            if (set.contains(l2.get(i))) {\n                result.add(l2.get(i));\n            }\n        }\n        Collections.sort(result);\n        return result;",
        "grade-7": {
            "execution": 0
        },
        "72": "throw new UnsupportedOperationException(\"Not implemented\");",
        "grade-72": {
            "execution": 0
        },
        "64": "ArrayList<Integer> l3 = new ArrayList<Integer>();\n        l1.retainAll(l2);\n        l1.sort(null);\n        for (int i = 0; i < l1.size(); i++) {\n            if (i == 0) {\n                l3.add(l1.get(i));\n            } else if (l1.get(i) != l1.get(i - 1)) {\n                l3.add(l1.get(i));\n            }\n        }\n        return l3;",
        "grade-64": {
            "execution": 1
        },
        "58": "HashSet<Integer> set = new HashSet<>();\n        set.addAll(l1);\n        set.retainAll(l2);\n        l1.clear();\n        l1.addAll(set);\n        Collections.sort(l1);\n        return l1;",
        "grade-58": {
            "execution": 1
        },
        "36": "HashSet<Integer> temp = new HashSet<Integer>();\n        temp.addAll(l1);\n        temp.retainAll(l2);\n        return new ArrayList<Integer>(temp);",
        "grade-36": {
            "execution": 1
        },
        "27": "ArrayList<Integer> res = new ArrayList<Integer>();\n        int n1 = l1.size();\n        int n2 = l2.size();\n        int i = 0;\n        int j = 0;\n        while (i < n1 && j < n2) {\n            if (l1.get(i) == l2.get(j)) {\n                res.add(l1.get(i));\n                i++;\n                j++;\n            } else if (l1.get(i) < l2.get(j)) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return res;",
        "grade-27": {
            "execution": 0
        },
        "185": "HashSet<Integer> s1 = new HashSet<>(l1);\n        HashSet<Integer> s2 = new HashSet<>(l2);\n        s1.retainAll(s2);\n        ArrayList<Integer> result = new ArrayList<>(s1);\n        Collections.sort(result);\n        return result;",
        "grade-185": {
            "execution": 1
        },
        "148": "throw new UnsupportedOperationException(\"Not implemented.\");",
        "grade-148": {
            "execution": 0
        },
        "23": "return new ArrayList<Integer>(\n            (Set<Integer>) l1.stream()\n                .filter(l2::contains)\n                .collect(Collectors.toSet())\n        );",
        "grade-23": {
            "execution": 1
        },
        "162": "HashSet<Integer> set1 = new HashSet<>(l1);\n        HashSet<Integer> set2 = new HashSet<>(l2);\n        ArrayList<Integer> uniques = new ArrayList<>();\n        uniques.addAll(set1);\n        uniques.addAll(set2);\n        uniques.sort(Comparator.naturalOrder());\n        return uniques;",
        "grade-162": {
            "execution": 0
        },
        "112": "// type your code here\n        throw new UnsupportedOperationException(\"Problem not implemented\");",
        "grade-112": {
            "execution": 0
        },
        "9": "throw new RuntimeException(\"Not implemented yet\");",
        "grade-9": {
            "execution": 0
        },
        "8": "ArrayList<Integer> l = new ArrayList<Integer>();\n        ArrayList<Integer> max = l1.size() > l2.size() ? l1 : l2;\n        ArrayList<Integer> min = l1.size() > l2.size() ? l2 : l1;\n        for (int i = 0; i < min.size(); i++) {\n            if (max.contains(min.get(i)))\n                l.add(min.get(i));\n        }\n        return l;",
        "grade-8": {
            "execution": 0
        },
        "24": "ArrayList<Integer> result = new ArrayList<Integer>();\n        int p1 = 0;\n        int p2 = 0;\n        int len1 = l1.size();\n        int len2 = l2.size();\n        int t1 = 0;\n        int t2 = 0;\n        while (p1 < len1 && p2 < len2) {\n            t1 = l1.get(p1);\n            t2 = l2.get(p2);\n            if (t1 == t2) {\n                if (result.size() == 0 || t1 != result.get(result.size() - 1)) {\n                    result.add(t1);\n                }\n                p1 += 1;\n                p2 += 1;\n            } else if (t1 < t2) {\n                p1 += 1;\n            } else {\n                p2 += 1;\n            }\n        }\n        return result;",
        "grade-24": {
            "execution": 0
        },
        "56": "ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int elem : l1) {\n            if (l2.contains(elem) && !result.contains(elem))\n                result.add(elem);\n        }\n        Collections.sort(result);\n        return result;",
        "grade-56": {
            "execution": 1
        },
        "60": "ArrayList<Integer> al = new ArrayList<Integer>();\n        Set<Integer> s1 = new HashSet<Integer>(l1);\n        Set<Integer> s2 = new HashSet<Integer>(l2);\n        Set<Integer> s3 = new HashSet<Integer>(s1);\n        s3.retainAll(s2);\n        al.addAll(s3);\n        Collections.sort(al);\n        return al;",
        "grade-60": {
            "execution": 1
        },
        "136": "ArrayList<Integer> all = new ArrayList<Integer>();\n        ArrayList<Integer> common = new ArrayList<Integer>();\n        for (int num : l1) {\n            all.add(num);\n        }\n        for (int num : l2) {\n            all.add(num);\n        }\n        Collections.sort(all);\n        int prev = -1;\n        for (int num : all) {\n            if (num == prev) {\n                common.add(num);\n            }\n            prev = num;\n        }\n        return common;",
        "grade-136": {
            "execution": 0
        },
        "165": "ArrayList<Integer> l3 = new ArrayList<Integer>();\n        l1.sort(null);\n        l2.sort(null);\n        for (int i = 0; i < l1.size(); i++) {\n            for (int j = 0; j < l2.size(); j++) {\n                if (l1.get(i) == l2.get(j)) {\n                    l3.add(l1.get(i));\n                }\n            }\n        }\n        ArrayList<Integer> l4 = new ArrayList<Integer>();\n        for (int i = 0; i < l3.size(); i++) {\n            if (!l4.contains(l3.get(i))) {\n                l4.add(l3.get(i));\n            }\n        }\n        return l4;",
        "grade-165": {
            "execution": 0
        },
        "bleu-175": 0.23239845031624445,
        "bleu-29": 5.2799390820641505e-09,
        "bleu-7": 0.25775835985463214,
        "bleu-72": 0.001894235989768983,
        "bleu-64": 0.1346897452805889,
        "bleu-58": 0.36268286027199254,
        "bleu-36": 0.3161785984420933,
        "bleu-27": 0.08819173391016615,
        "bleu-185": 0.6368584333811688,
        "bleu-148": 0.0026328183642332715,
        "bleu-23": 0.15272472861519987,
        "bleu-162": 0.38998374642098876,
        "bleu-112": 0.006516355732893806,
        "bleu-9": 0.001894235989768983,
        "bleu-8": 0.09528043781419374,
        "bleu-24": 0.09808158561369158,
        "bleu-56": 0.3749594277265359,
        "bleu-60": 0.3135457037130255,
        "bleu-136": 0.12125625610343532,
        "bleu-165": 0.07327022574555779,
        "codebleu-175": 0.605124374902201,
        "codebleu-29": 0.0360360648941723,
        "codebleu-7": 0.6524353311017446,
        "codebleu-72": 0.05407796106081014,
        "codebleu-64": 0.5875793826613499,
        "codebleu-58": 0.5666414100246884,
        "codebleu-36": 0.49023438346390513,
        "codebleu-27": 0.5903116230985083,
        "codebleu-185": 0.7786982887648448,
        "codebleu-148": 0.05407796106081014,
        "codebleu-23": 0.37436592009919656,
        "codebleu-162": 0.7243029849474026,
        "codebleu-112": 0.09093284112799518,
        "codebleu-9": 0.05407796106081014,
        "codebleu-8": 0.5867670949638163,
        "codebleu-24": 0.607889977151975,
        "codebleu-56": 0.5986496810609606,
        "codebleu-60": 0.6752107493573362,
        "codebleu-136": 0.6110211508302786,
        "codebleu-165": 0.6012405848471423,
        "chrf-175": 0.508605348576206,
        "chrf-29": 0.03994901740082635,
        "chrf-7": 0.639654342701038,
        "chrf-72": 0.07891919055296263,
        "chrf-64": 0.376725504229552,
        "chrf-58": 0.5012647024473428,
        "chrf-36": 0.4681401645513656,
        "chrf-27": 0.3528994285574545,
        "chrf-185": 0.804780740230164,
        "chrf-148": 0.08010301941708703,
        "chrf-23": 0.3554793433446406,
        "chrf-162": 0.5349686206668303,
        "chrf-112": 0.09993437993039174,
        "chrf-9": 0.0667977559929868,
        "chrf-8": 0.317044071084712,
        "chrf-24": 0.3917643208143849,
        "chrf-56": 0.5712484728385233,
        "chrf-60": 0.5781748166010071,
        "chrf-136": 0.37979761413069,
        "chrf-165": 0.3285827628758702,
        "rougel-175": 0.5352112676056338,
        "rougel-29": 0.06666666666666667,
        "rougel-7": 0.47826086956521735,
        "rougel-72": 0.11594202898550725,
        "rougel-64": 0.35928143712574845,
        "rougel-58": 0.5892857142857143,
        "rougel-36": 0.58,
        "rougel-27": 0.3010752688172043,
        "rougel-185": 0.7804878048780488,
        "rougel-148": 0.14285714285714285,
        "rougel-23": 0.3541666666666667,
        "rougel-162": 0.6370370370370372,
        "rougel-112": 0.10526315789473684,
        "rougel-9": 0.11594202898550725,
        "rougel-8": 0.36686390532544383,
        "rougel-24": 0.26008968609865474,
        "rougel-56": 0.4957264957264957,
        "rougel-60": 0.5578231292517006,
        "rougel-136": 0.3855421686746988,
        "rougel-165": 0.3406113537117904,
        "meteor-175": 0.639750649613393,
        "meteor-29": 0.01937984496124031,
        "meteor-7": 0.668946875,
        "meteor-72": 0.03809523809523809,
        "meteor-64": 0.4443749082937978,
        "meteor-58": 0.5511609394018431,
        "meteor-36": 0.495159428013145,
        "meteor-27": 0.37188046849577544,
        "meteor-185": 0.8824098629549008,
        "meteor-148": 0.04752851711026616,
        "meteor-23": 0.3267224009168884,
        "meteor-162": 0.7018549710881268,
        "meteor-112": 0.037593984962406006,
        "meteor-9": 0.03809523809523809,
        "meteor-8": 0.41727284681130833,
        "meteor-24": 0.42370673784977914,
        "meteor-56": 0.5744080322323486,
        "meteor-60": 0.6231027287552244,
        "meteor-136": 0.4251882961115851,
        "meteor-165": 0.4123675080439606,
        "ruby-175": 0.388235294117647,
        "ruby-29": 0.03508771929824561,
        "ruby-7": 0.31496062992125984,
        "ruby-72": 0.07017543859649122,
        "ruby-64": 0.24545454545454548,
        "ruby-58": 0.49122807017543857,
        "ruby-36": 0.4035087719298246,
        "ruby-27": 0.21705426356589153,
        "ruby-185": 0.696969696969697,
        "ruby-148": 0.08771929824561409,
        "ruby-23": 0.19298245614035092,
        "ruby-162": 0.5128205128205128,
        "ruby-112": 0.07017543859649122,
        "ruby-9": 0.07017543859649122,
        "ruby-8": 0.2410714285714286,
        "ruby-24": 0.17469879518072284,
        "ruby-56": 0.3666666666666667,
        "ruby-60": 0.4222222222222223,
        "ruby-136": 0.25688073394495414,
        "ruby-165": 0.22093023255813948,
        "codebertscore_f1-175": 0.8132568001747131,
        "codebertscore_f3-175": 0.8295090794563293,
        "codebertscore_f1-29": 0.5709543824195862,
        "codebertscore_f3-29": 0.5333453416824341,
        "codebertscore_f1-7": 0.784757137298584,
        "codebertscore_f3-7": 0.8233780264854431,
        "codebertscore_f1-72": 0.6244470477104187,
        "codebertscore_f3-72": 0.620378315448761,
        "codebertscore_f1-64": 0.781570315361023,
        "codebertscore_f3-64": 0.8087050318717957,
        "codebertscore_f1-58": 0.8606910109519958,
        "codebertscore_f3-58": 0.8653334975242615,
        "codebertscore_f1-36": 0.8862250447273254,
        "codebertscore_f3-36": 0.8739581108093262,
        "codebertscore_f1-27": 0.7278314828872681,
        "codebertscore_f3-27": 0.7485958337783813,
        "codebertscore_f1-185": 0.9178026914596558,
        "codebertscore_f3-185": 0.9263006448745728,
        "codebertscore_f1-148": 0.60866379737854,
        "codebertscore_f3-148": 0.6057277917861938,
        "codebertscore_f1-23": 0.7832368612289429,
        "codebertscore_f3-23": 0.7814087271690369,
        "codebertscore_f1-162": 0.8362006545066833,
        "codebertscore_f3-162": 0.8493338227272034,
        "codebertscore_f1-112": 0.6313576698303223,
        "codebertscore_f3-112": 0.6345570683479309,
        "codebertscore_f1-9": 0.6374298334121704,
        "codebertscore_f3-9": 0.6267899870872498,
        "codebertscore_f1-8": 0.7562395930290222,
        "codebertscore_f3-8": 0.7650623321533203,
        "codebertscore_f1-24": 0.7103853821754456,
        "codebertscore_f3-24": 0.7432823777198792,
        "codebertscore_f1-56": 0.8133491277694702,
        "codebertscore_f3-56": 0.8281812071800232,
        "codebertscore_f1-60": 0.8408308625221252,
        "codebertscore_f3-60": 0.8508972525596619,
        "codebertscore_f1-136": 0.7671669721603394,
        "codebertscore_f3-136": 0.792709231376648,
        "codebertscore_f1-165": 0.726067066192627,
        "codebertscore_f3-165": 0.7590184807777405,
        "codebertscore_s_f1-175": 0.8327409625053406,
        "codebertscore_s_f3-175": 0.8516825437545776,
        "codebertscore_s_f1-29": 0.6296655535697937,
        "codebertscore_s_f3-29": 0.58913254737854,
        "codebertscore_s_f1-7": 0.8115448355674744,
        "codebertscore_s_f3-7": 0.8559101223945618,
        "codebertscore_s_f1-72": 0.5956497192382812,
        "codebertscore_s_f3-72": 0.5806572437286377,
        "codebertscore_s_f1-64": 0.7984619736671448,
        "codebertscore_s_f3-64": 0.8314807415008545,
        "codebertscore_s_f1-58": 0.877906322479248,
        "codebertscore_s_f3-58": 0.8850632309913635,
        "codebertscore_s_f1-36": 0.8973044753074646,
        "codebertscore_s_f3-36": 0.8835961818695068,
        "codebertscore_s_f1-27": 0.7679892778396606,
        "codebertscore_s_f3-27": 0.7851462364196777,
        "codebertscore_s_f1-185": 0.9304584264755249,
        "codebertscore_s_f3-185": 0.9399753212928772,
        "codebertscore_s_f1-148": 0.597091019153595,
        "codebertscore_s_f3-148": 0.5825469493865967,
        "codebertscore_s_f1-23": 0.798641562461853,
        "codebertscore_s_f3-23": 0.7981793284416199,
        "codebertscore_s_f1-162": 0.8500003218650818,
        "codebertscore_s_f3-162": 0.8642666935920715,
        "codebertscore_s_f1-112": 0.6111282110214233,
        "codebertscore_s_f3-112": 0.6125209331512451,
        "codebertscore_s_f1-9": 0.6030851006507874,
        "codebertscore_s_f3-9": 0.5848708152770996,
        "codebertscore_s_f1-8": 0.7816574573516846,
        "codebertscore_s_f3-8": 0.7933290004730225,
        "codebertscore_s_f1-24": 0.7445403337478638,
        "codebertscore_s_f3-24": 0.7742894291877747,
        "codebertscore_s_f1-56": 0.8277235627174377,
        "codebertscore_s_f3-56": 0.843874990940094,
        "codebertscore_s_f1-60": 0.8684043288230896,
        "codebertscore_s_f3-60": 0.880803644657135,
        "codebertscore_s_f1-136": 0.7904287576675415,
        "codebertscore_s_f3-136": 0.8119075894355774,
        "codebertscore_s_f1-165": 0.7705317139625549,
        "codebertscore_s_f3-165": 0.7934494614601135,
        "gpt35_nsnr-175": 4,
        "raw_gpt35_nsnr-175": "4",
        "gpt35_nsnr-29": 0,
        "raw_gpt35_nsnr-29": "0",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-72": 0,
        "raw_gpt35_nsnr-72": "0",
        "gpt35_nsnr-64": 4,
        "raw_gpt35_nsnr-64": "4",
        "gpt35_nsnr-58": 4,
        "raw_gpt35_nsnr-58": "4",
        "gpt35_nsnr-36": 4,
        "raw_gpt35_nsnr-36": "4",
        "gpt35_nsnr-27": 4,
        "raw_gpt35_nsnr-27": "4",
        "gpt35_nsnr-185": 4,
        "raw_gpt35_nsnr-185": "4",
        "gpt35_nsnr-148": 4,
        "raw_gpt35_nsnr-148": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-162": 2,
        "raw_gpt35_nsnr-162": "2",
        "gpt35_nsnr-112": 0,
        "raw_gpt35_nsnr-112": "0",
        "gpt35_nsnr-9": 0,
        "raw_gpt35_nsnr-9": "0",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-24": 4,
        "raw_gpt35_nsnr-24": "4",
        "gpt35_nsnr-56": 4,
        "raw_gpt35_nsnr-56": "4",
        "gpt35_nsnr-60": 4,
        "raw_gpt35_nsnr-60": "4",
        "gpt35_nsnr-136": 3,
        "raw_gpt35_nsnr-136": "3",
        "gpt35_nsnr-165": 4,
        "raw_gpt35_nsnr-165": "4",
        "gpt35_nswr-175": 3,
        "raw_gpt35_nswr-175": "3",
        "gpt35_nswr-29": 0,
        "raw_gpt35_nswr-29": "0",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-72": 0,
        "raw_gpt35_nswr-72": "0",
        "gpt35_nswr-64": 3,
        "raw_gpt35_nswr-64": "3",
        "gpt35_nswr-58": 3,
        "raw_gpt35_nswr-58": "3",
        "gpt35_nswr-36": 4,
        "raw_gpt35_nswr-36": "4",
        "gpt35_nswr-27": 3,
        "raw_gpt35_nswr-27": "3",
        "gpt35_nswr-185": 4,
        "raw_gpt35_nswr-185": "4",
        "gpt35_nswr-148": 4,
        "raw_gpt35_nswr-148": "4",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-162": 2,
        "raw_gpt35_nswr-162": "2",
        "gpt35_nswr-112": 0,
        "raw_gpt35_nswr-112": "0",
        "gpt35_nswr-9": 0,
        "raw_gpt35_nswr-9": "0",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-24": 3,
        "raw_gpt35_nswr-24": "3",
        "gpt35_nswr-56": 3,
        "raw_gpt35_nswr-56": "3",
        "gpt35_nswr-60": 4,
        "raw_gpt35_nswr-60": "4",
        "gpt35_nswr-136": 3,
        "raw_gpt35_nswr-136": "3",
        "gpt35_nswr-165": 3,
        "raw_gpt35_nswr-165": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static Optional<String> stringToMd5(String text) {\n",
        "snippet": [
            "        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n\n        String md5 = new BigInteger(1, java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())).toString(16);\n        md5 = \"0\".repeat(32 - md5.length()) + md5;\n        return Optional.of(md5);\n    }\n}"
        ],
        "simplified": "Given a string 'text', return its md5 hash equivalent string. If 'text' is an empty string, return None.",
        "task_id": "162",
        "192": "try {\n            byte[] bytesOfMessage = text.getBytes(\"UTF-8\");\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[] hash = md.digest(bytesOfMessage);\n            return Optional.of(String.format(\"%032x\", new BigInteger(1, hash)));\n        } catch (Exception e) {\n            return Optional.empty();\n        }",
        "grade-192": {
            "execution": 0
        },
        "29": "// Ensure text is not empty\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        // Compute text md5 hash\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[] hash = md.digest(text.getBytes(StandardCharsets.UTF_8));\n            StringBuilder sb = new StringBuilder(2 * hash.length);\n            for (byte b : hash) {\n                sb.append(String.format(\"%02x\", b & 0xff));\n            }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n            return Optional.empty();\n        }",
        "grade-29": {
            "execution": 0
        },
        "6": "String result = null;\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            md.update(text.getBytes());\n            byte[] digest = md.digest();\n            result = DatatypeConverter.printHexBinary(digest).toLowerCase();\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n        return result == null ? Optional.empty() : Optional.of(result);",
        "grade-6": {
            "execution": 0
        },
        "74": "try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[] md5bytes = md.digest(text.getBytes(\"UTF-8\"));\n            String result = DatatypeConverter.printHexBinary(md5bytes);\n            return Optional.of(result);\n        } catch (NoSuchAlgorithmException | UnsupportedEncodingException e) {\n            return Optional.empty();\n        }",
        "grade-74": {
            "execution": 0
        },
        "66": "throw new UnsupportedOperationException(\"Please implement the (static) stringToMd5 method\");",
        "grade-66": {
            "execution": 0
        },
        "60": "if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            md.update(text.getBytes());\n            byte[] digest = md.digest();\n            StringBuffer hex = new StringBuffer();\n            for (int i = 0; i < digest.length; i++) {\n                hex.append(Integer.toHexString(0xFF & digest[i]));\n            }\n            return Optional.of(hex.toString());\n        } catch (NoSuchAlgorithmException nsae) {\n            return Optional.empty();\n        }",
        "grade-60": {
            "execution": 0
        },
        "37": "try {\n            byte[] bytesOfMessage = text.getBytes(\"UTF-8\");\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[] digest = md.digest(bytesOfMessage);\n            BigInteger bigInt = new BigInteger(1, digest);\n            String hashtext = bigInt.toString(16);\n            while (hashtext.length() < 32) {\n                hashtext = \"0\" + hashtext;\n            }\n            return Optional.of(hashtext);\n        } catch (Exception e) {\n            return Optional.empty();\n        }",
        "grade-37": {
            "execution": 0
        },
        "27": "// TODO: Implement this method.\n        return Optional.empty();",
        "grade-27": {
            "execution": 0
        },
        "160": "try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            md.update(text.getBytes());\n            byte[] digest = md.digest();\n            String myHash = DatatypeConverter.printHexBinary(digest).toLowerCase();\n            return Optional.of(myHash);\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n            return Optional.empty();\n        }",
        "grade-160": {
            "execution": 0
        },
        "23": "try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[] digest = md.digest(text.getBytes());\n            StringBuilder sb = new StringBuilder();\n            for (byte b : digest) {\n                sb.append(String.format(\"%02x\", b & 0xff));\n            }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException e) {\n            System.out.println(\"No such algorithm.\");\n            return Optional.empty();\n        }",
        "grade-23": {
            "execution": 0
        },
        "176": "// Implement this\n        return Optional.empty();",
        "grade-176": {
            "execution": 0
        },
        "118": "try {\n            if (text.isEmpty()) {\n                return Optional.empty();\n            }\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[] messageDigest = md.digest(text.getBytes());\n            BigInteger no = new BigInteger(1, messageDigest);\n            String hashtext = no.toString(16);\n            while (hashtext.length() < 32) {\n                hashtext = \"0\" + hashtext;\n            }\n            return Optional.of(hashtext);\n        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n        }",
        "grade-118": {
            "execution": 0
        },
        "8": "try {\n            return Optional.of(String.format(\"%032x\", new BigInteger(1, MessageDigest.getInstance(\"MD5\").digest(text.getBytes(\"UTF-8\")))));\n        } catch (NoSuchAlgorithmException | UnsupportedEncodingException e) {\n            return Optional.empty();\n        }",
        "grade-8": {
            "execution": 0
        },
        "7": "if (text.isEmpty()) return Optional.empty();\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[] array = md.digest(text.getBytes());\n            StringBuffer sb = new StringBuffer();\n            for (int i = 0; i < array.length; ++i) {\n                sb.append(Integer.toHexString((array[i] & 0xFF) | 0x100).substring(1,3));\n            }\n            return Optional.of(sb.toString());\n        } catch (java.security.NoSuchAlgorithmException e) {\n            return Optional.empty();\n        }",
        "grade-7": {
            "execution": 0
        },
        "24": "if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        try {\n            MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n            byte[] hash = digest.digest(text.getBytes());\n            StringBuilder sb = new StringBuilder();\n            for (byte b : hash) {\n                sb.append(String.format(\"%02x\", b));\n            }\n            return Optional.of(sb.toString());\n        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n        }",
        "grade-24": {
            "execution": 0
        },
        "58": "if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[] messageDigest = md.digest(text.getBytes());\n            BigInteger no = new BigInteger(1, messageDigest);\n            String hashtext = no.toString(16);\n            while (hashtext.length() < 32) {\n                hashtext = \"0\" + hashtext;\n            }\n            return Optional.of(hashtext);\n        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n        }",
        "grade-58": {
            "execution": 0
        },
        "62": "// TODO: implement me\n        return Optional.empty();",
        "grade-62": {
            "execution": 0
        },
        "144": "try {\n            MessageDigest messageDigest = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = messageDigest.digest(text.getBytes());\n            BigInteger number = new BigInteger(1, bytes);\n            String md5 = number.toString(16);\n            while (md5.length() < 32) {\n                md5 = \"0\" + md5;\n            }\n            return Optional.of(md5);\n        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n        }",
        "grade-144": {
            "execution": 0
        },
        "180": "try {\n            MessageDigest m = MessageDigest.getInstance(\"MD5\");\n            byte[] digest = m.digest(text.getBytes(StandardCharsets.UTF_8));\n            String result = DatatypeConverter.printHexBinary(digest).toLowerCase();\n            return Optional.of(result);\n        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n        }",
        "grade-180": {
            "execution": 0
        },
        "165": "if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        try {\n            MessageDigest m = MessageDigest.getInstance(\"MD5\");\n            m.update(text.getBytes(), 0, text.length());\n            return Optional.of(new BigInteger(1, m.digest()).toString(16));\n        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n        }",
        "grade-165": {
            "execution": 0
        },
        "bleu-192": 0.3932893981481971,
        "bleu-29": 0.30611212636005336,
        "bleu-6": 0.2960405230875454,
        "bleu-74": 0.36603887271200164,
        "bleu-66": 0.0023784981580683403,
        "bleu-60": 0.32974920367217053,
        "bleu-37": 0.37008545884734123,
        "bleu-27": 0.003185410126732852,
        "bleu-160": 0.3517486945699684,
        "bleu-23": 0.3232076714001624,
        "bleu-176": 0.0005203878556101758,
        "bleu-118": 0.4458673861389606,
        "bleu-8": 0.4248570498476759,
        "bleu-7": 0.3360841826119711,
        "bleu-24": 0.3871319110523318,
        "bleu-58": 0.4458673861389606,
        "bleu-62": 0.001468572571823176,
        "bleu-144": 0.5143333347294793,
        "bleu-180": 0.3812127250246809,
        "bleu-165": 0.5531757542850904,
        "codebleu-192": 0.49727626298326444,
        "codebleu-29": 0.6571392751454254,
        "codebleu-6": 0.5477593739435985,
        "codebleu-74": 0.4729182200523143,
        "codebleu-66": 0.05249370855788712,
        "codebleu-60": 0.6289650838805724,
        "codebleu-37": 0.5770389173977343,
        "codebleu-27": 0.07500979589510294,
        "codebleu-160": 0.5792504673417468,
        "codebleu-23": 0.5980335919199193,
        "codebleu-176": 0.06868927562822871,
        "codebleu-118": 0.6547745707200616,
        "codebleu-8": 0.4073312155791917,
        "codebleu-7": 0.6386542968751276,
        "codebleu-24": 0.6304765899498527,
        "codebleu-58": 0.6646826421059739,
        "codebleu-62": 0.07961148287584281,
        "codebleu-144": 0.6178123797149976,
        "codebleu-180": 0.49399082769027614,
        "codebleu-165": 0.6397427368794921,
        "chrf-192": 0.5326194622890384,
        "chrf-29": 0.5494315880411967,
        "chrf-6": 0.4548861156263516,
        "chrf-74": 0.5047714106352647,
        "chrf-66": 0.11678432792873968,
        "chrf-60": 0.5783921616283837,
        "chrf-37": 0.5668954724311177,
        "chrf-27": 0.14165488285855482,
        "chrf-160": 0.508663372295281,
        "chrf-23": 0.5184280950917293,
        "chrf-176": 0.1333430968689494,
        "chrf-118": 0.6293965416441837,
        "chrf-8": 0.5698022228650212,
        "chrf-7": 0.6100840901988006,
        "chrf-24": 0.5758141343745976,
        "chrf-58": 0.6293965416441837,
        "chrf-62": 0.13196276159956158,
        "chrf-144": 0.6681872476707152,
        "chrf-180": 0.5022827723011868,
        "chrf-165": 0.6703731067965336,
        "rougel-192": 0.40449438202247195,
        "rougel-29": 0.502092050209205,
        "rougel-6": 0.4232804232804233,
        "rougel-74": 0.43529411764705883,
        "rougel-66": 0.14814814814814814,
        "rougel-60": 0.5398230088495576,
        "rougel-37": 0.43478260869565216,
        "rougel-27": 0.1553398058252427,
        "rougel-160": 0.44808743169398907,
        "rougel-23": 0.4097560975609756,
        "rougel-176": 0.1414141414141414,
        "rougel-118": 0.6009389671361502,
        "rougel-8": 0.546583850931677,
        "rougel-7": 0.5064377682403434,
        "rougel-24": 0.5700483091787439,
        "rougel-58": 0.6009389671361502,
        "rougel-62": 0.1386138613861386,
        "rougel-144": 0.5154639175257733,
        "rougel-180": 0.456140350877193,
        "rougel-165": 0.5913978494623656,
        "meteor-192": 0.4764242826503742,
        "meteor-29": 0.569777963152856,
        "meteor-6": 0.4170457726763718,
        "meteor-74": 0.46531807780320367,
        "meteor-66": 0.0845784309734153,
        "meteor-60": 0.5559486841122929,
        "meteor-37": 0.5383420327516298,
        "meteor-27": 0.08703144361833953,
        "meteor-160": 0.4507396777709419,
        "meteor-23": 0.5647811383945256,
        "meteor-176": 0.07904033344346456,
        "meteor-118": 0.6145187320450584,
        "meteor-8": 0.48101786783604306,
        "meteor-7": 0.5689165338780869,
        "meteor-24": 0.5141457021886691,
        "meteor-58": 0.6145187320450584,
        "meteor-62": 0.07884395994422613,
        "meteor-144": 0.6548854202423696,
        "meteor-180": 0.414268808114962,
        "meteor-165": 0.5975430018033014,
        "ruby-192": 0.1777777777777778,
        "ruby-29": 0.3509933774834437,
        "ruby-6": 0.16831683168316836,
        "ruby-74": 0.18181818181818177,
        "ruby-66": 0.09090909090909094,
        "ruby-60": 0.34782608695652173,
        "ruby-37": 0.24369747899159666,
        "ruby-27": 0.07954545454545459,
        "ruby-160": 0.19999999999999996,
        "ruby-23": 0.23931623931623935,
        "ruby-176": 0.07954545454545459,
        "ruby-118": 0.392,
        "ruby-8": 0.40909090909090906,
        "ruby-7": 0.3172413793103448,
        "ruby-24": 0.38655462184873945,
        "ruby-58": 0.40800000000000003,
        "ruby-62": 0.07954545454545459,
        "ruby-144": 0.26415094339622647,
        "ruby-180": 0.20454545454545459,
        "ruby-165": 0.4387755102040817,
        "codebertscore_f1-192": 0.8130859732627869,
        "codebertscore_f3-192": 0.811723530292511,
        "codebertscore_f1-29": 0.7576113343238831,
        "codebertscore_f3-29": 0.7932209372520447,
        "codebertscore_f1-6": 0.75028395652771,
        "codebertscore_f3-6": 0.7681916356086731,
        "codebertscore_f1-74": 0.7795994281768799,
        "codebertscore_f3-74": 0.7969436049461365,
        "codebertscore_f1-66": 0.6476340293884277,
        "codebertscore_f3-66": 0.634612500667572,
        "codebertscore_f1-60": 0.7875450253486633,
        "codebertscore_f3-60": 0.8151311874389648,
        "codebertscore_f1-37": 0.8088154196739197,
        "codebertscore_f3-37": 0.8191383481025696,
        "codebertscore_f1-27": 0.6371179819107056,
        "codebertscore_f3-27": 0.5991286039352417,
        "codebertscore_f1-160": 0.7657843828201294,
        "codebertscore_f3-160": 0.7830271124839783,
        "codebertscore_f1-23": 0.7664084434509277,
        "codebertscore_f3-23": 0.7779829502105713,
        "codebertscore_f1-176": 0.6435908675193787,
        "codebertscore_f3-176": 0.5852879285812378,
        "codebertscore_f1-118": 0.8171254396438599,
        "codebertscore_f3-118": 0.8437380194664001,
        "codebertscore_f1-8": 0.7964240312576294,
        "codebertscore_f3-8": 0.8007684350013733,
        "codebertscore_f1-7": 0.7922407388687134,
        "codebertscore_f3-7": 0.8243994116783142,
        "codebertscore_f1-24": 0.7939621210098267,
        "codebertscore_f3-24": 0.804712176322937,
        "codebertscore_f1-58": 0.8234325051307678,
        "codebertscore_f3-58": 0.8508345484733582,
        "codebertscore_f1-62": 0.6385476589202881,
        "codebertscore_f3-62": 0.5934491753578186,
        "codebertscore_f1-144": 0.8417519927024841,
        "codebertscore_f3-144": 0.8533414602279663,
        "codebertscore_f1-180": 0.7684524655342102,
        "codebertscore_f3-180": 0.7816348671913147,
        "codebertscore_f1-165": 0.8470780849456787,
        "codebertscore_f3-165": 0.8441044688224792,
        "codebertscore_s_f1-192": 0.8199490308761597,
        "codebertscore_s_f3-192": 0.8194034695625305,
        "codebertscore_s_f1-29": 0.7790716290473938,
        "codebertscore_s_f3-29": 0.8164761066436768,
        "codebertscore_s_f1-6": 0.7652050256729126,
        "codebertscore_s_f3-6": 0.7846291065216064,
        "codebertscore_s_f1-74": 0.7870572209358215,
        "codebertscore_s_f3-74": 0.8046392798423767,
        "codebertscore_s_f1-66": 0.653186023235321,
        "codebertscore_s_f3-66": 0.63938307762146,
        "codebertscore_s_f1-60": 0.7992091774940491,
        "codebertscore_s_f3-60": 0.8263711929321289,
        "codebertscore_s_f1-37": 0.8222676515579224,
        "codebertscore_s_f3-37": 0.8336636424064636,
        "codebertscore_s_f1-27": 0.6522071361541748,
        "codebertscore_s_f3-27": 0.6042868494987488,
        "codebertscore_s_f1-160": 0.7761156558990479,
        "codebertscore_s_f3-160": 0.7941247224807739,
        "codebertscore_s_f1-23": 0.7767753005027771,
        "codebertscore_s_f3-23": 0.789854884147644,
        "codebertscore_s_f1-176": 0.6680999994277954,
        "codebertscore_s_f3-176": 0.5965155363082886,
        "codebertscore_s_f1-118": 0.8319785594940186,
        "codebertscore_s_f3-118": 0.8605366349220276,
        "codebertscore_s_f1-8": 0.8068174123764038,
        "codebertscore_s_f3-8": 0.811330258846283,
        "codebertscore_s_f1-7": 0.8028836846351624,
        "codebertscore_s_f3-7": 0.8361231088638306,
        "codebertscore_s_f1-24": 0.8084532022476196,
        "codebertscore_s_f3-24": 0.8192272782325745,
        "codebertscore_s_f1-58": 0.8385076522827148,
        "codebertscore_s_f3-58": 0.8664869070053101,
        "codebertscore_s_f1-62": 0.6481510996818542,
        "codebertscore_s_f3-62": 0.5980178117752075,
        "codebertscore_s_f1-144": 0.8526514172554016,
        "codebertscore_s_f3-144": 0.8644192814826965,
        "codebertscore_s_f1-180": 0.7774625420570374,
        "codebertscore_s_f3-180": 0.790399968624115,
        "codebertscore_s_f1-165": 0.8575778603553772,
        "codebertscore_s_f3-165": 0.8557236194610596,
        "gpt35_nsnr-192": 4,
        "raw_gpt35_nsnr-192": "4",
        "gpt35_nsnr-29": 4,
        "raw_gpt35_nsnr-29": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-74": 4,
        "raw_gpt35_nsnr-74": "4",
        "gpt35_nsnr-66": 4,
        "raw_gpt35_nsnr-66": "4",
        "gpt35_nsnr-60": 4,
        "raw_gpt35_nsnr-60": "4",
        "gpt35_nsnr-37": 4,
        "raw_gpt35_nsnr-37": "4",
        "gpt35_nsnr-27": 0,
        "raw_gpt35_nsnr-27": "0",
        "gpt35_nsnr-160": 4,
        "raw_gpt35_nsnr-160": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-176": 0,
        "raw_gpt35_nsnr-176": "2 - The code snippet defines the method signature for stringToMd5, but does not implement the functionality to convert a string to its md5 hash equivalent. It always returns an empty Optional, regardless of the input string. The method signature is correct and the problem requirements are identified, but the implementation is incomplete.",
        "gpt35_nsnr-118": 4,
        "raw_gpt35_nsnr-118": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-24": 4,
        "raw_gpt35_nsnr-24": "4",
        "gpt35_nsnr-58": 4,
        "raw_gpt35_nsnr-58": "4",
        "gpt35_nsnr-62": 0,
        "raw_gpt35_nsnr-62": "2 - The code snippet has the basic structure to implement the required functionality, but it is incomplete. It returns an empty Optional object, which is not the expected output. The implementation of the md5 hash function is missing, but the necessary libraries are imported.",
        "gpt35_nsnr-144": 4,
        "raw_gpt35_nsnr-144": "4",
        "gpt35_nsnr-180": 4,
        "raw_gpt35_nsnr-180": "4",
        "gpt35_nsnr-165": 4,
        "raw_gpt35_nsnr-165": "4",
        "gpt35_nswr-192": 3,
        "raw_gpt35_nswr-192": "3",
        "gpt35_nswr-29": 4,
        "raw_gpt35_nswr-29": "4",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-74": 3,
        "raw_gpt35_nswr-74": "3",
        "gpt35_nswr-66": 4,
        "raw_gpt35_nswr-66": "4",
        "gpt35_nswr-60": 4,
        "raw_gpt35_nswr-60": "4",
        "gpt35_nswr-37": 4,
        "raw_gpt35_nswr-37": "4",
        "gpt35_nswr-27": 2,
        "raw_gpt35_nswr-27": "2",
        "gpt35_nswr-160": 3,
        "raw_gpt35_nswr-160": "3",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-176": 2,
        "raw_gpt35_nswr-176": "2",
        "gpt35_nswr-118": 4,
        "raw_gpt35_nswr-118": "4",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-24": 4,
        "raw_gpt35_nswr-24": "4",
        "gpt35_nswr-58": 4,
        "raw_gpt35_nswr-58": "4",
        "gpt35_nswr-62": 2,
        "raw_gpt35_nswr-62": "2",
        "gpt35_nswr-144": 4,
        "raw_gpt35_nswr-144": "4",
        "gpt35_nswr-180": 3,
        "raw_gpt35_nswr-180": "3",
        "gpt35_nswr-165": 4,
        "raw_gpt35_nswr-165": "4"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return the count of the numbers of n-digit\n    // positive integers that start or end with 1.\n    public static int startsOneEnds(int n) {\n",
        "snippet": [
            "        if (n == 1) {\n            return 1;\n        }\n        return 18 * (int) Math.pow(10, n - 2);\n    }\n}"
        ],
        "simplified": "Given a positive integer n, return the count of the numbers of n-digit positive integers that start or end with 1.",
        "task_id": "83",
        "166": "int[] dp = new int[n + 1];\n        dp[0] = 1; // empty string.\n        for (int i = 1; i <= n; i++) {\n            dp[i] = dp[i - 1] * 9;\n            if (i > 1) {\n                dp[i] += dp[i - 2] * 9;\n            }\n        }\n        return dp[n];",
        "grade-166": {
            "execution": 0
        },
        "28": "if (n == 1) {\n            return 2;\n        }\n        // We have n digits, one of which has to be 1.\n        // Thus there are 9 choices for each other digit.\n        return 9 * (int) Math.pow(10, n - 2);",
        "grade-28": {
            "execution": 0
        },
        "6": "// How many numbers in [0, 10^n) start with 1?\n        // This is 10^(n-1).\n        // Now how many numbers in [0, 10^n) end with 1?\n        // This is 9 * 10^(n-1).\n        // Now we need to subtract out the numbers in [0, 10^n) that start and\n        // end with 1.\n        // This is 10^(n-2).\n        // The answer is 10^(n-1) + 9 * 10^(n-1) - 10^(n-2).\n        return (int)Math.pow(10, n-1) + 9 * (int)Math.pow(10, n-1) - (int)Math.pow(10, n-2);",
        "grade-6": {
            "execution": 0
        },
        "197": "return -1;",
        "grade-197": {
            "execution": 0
        },
        "71": "if (n == 1) {\n            return 1;\n        }\n        int[] count = new int[n];\n        for (int i = 0; i < n; i++) {\n            if (i == 0) {\n                count[i] = 1;\n            } else if (i == 1) {\n                count[i] = 10;\n            } else {\n                count[i] = (10 * count[i - 1]) - count[i - 2];\n            }\n        }\n        return count[n - 1];",
        "grade-71": {
            "execution": 0
        },
        "62": "if (n == 1) {\n            return 1;\n        } else {\n            return (int)Math.pow(10, n - 1) + 9 * (int)Math.pow(10, n - 2);\n        }",
        "grade-62": {
            "execution": 0
        },
        "57": "if (n < 1) return 0;\n        // Dynamic Programming\n        // dp[i] -> count of numbers of i-digit positive integers that start or end with 1\n        int[] dp = new int[n + 1];\n        // base case\n        dp[1] = 2;\n        // induction hypothesis\n        // dp[n] = dp[n - 1] + dp[n - 2]\n        for (int i = 2; i <= n; i++) {\n            dp[i] = dp[i - 1] + dp[i - 2];\n        }\n        return dp[n];",
        "grade-57": {
            "execution": 0
        },
        "35": "if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        if (n == 3) {\n            return 2;\n        }\n        if (n == 4) {\n            return 2;\n        }\n        return 2 * startsOneEnds(n - 1) - startsOneEnds(n - 2);",
        "grade-35": {
            "execution": 0
        },
        "196": "if (n == 1) {\n            return 1;\n        }\n        int result = 0;\n        if (n % 2 == 0) {\n            int half = n / 2;\n            result += Math.pow(3, half - 1);\n            result += Math.pow(4, half - 1);\n        } else {\n            int half = n / 2;\n            result += Math.pow(4, half);\n            result += Math.pow(3, half);\n        }\n        return result;",
        "grade-196": {
            "execution": 0
        },
        "26": "// This is 1 because the following call would return 0.\n        if (n == 1) return 1;\n        if (n % 2 == 0) {\n            // n even\n            return 9 * (int) Math.pow(10, n / 2 - 1);\n        } else {\n            // n odd\n            return 9 * (int) Math.pow(10, n / 2 - 1) + startsOneEnds(n - 1);\n        }",
        "grade-26": {
            "execution": 0
        },
        "179": "// There are n * 9 * (10^(n-1)) such numbers.\n        return n * 9 * (int) Math.pow(10, n - 1);",
        "grade-179": {
            "execution": 0
        },
        "142": "int[] a = new int[n];\n        int[] b = new int[n];\n        int[] c = new int[n];\n        int[] d = new int[n];\n        a[0] = b[0] = c[0] = d[0] = 1;\n        if (n == 1) return 4;\n        a[1] = 1;\n        b[1] = c[1] = d[1] = 3;\n        if (n == 2) return 7;\n        for (int i = 2; i < n; i++) {\n            a[i] = a[i - 1] + b[i - 1];\n            b[i] = a[i - 1] + b[i - 1] + c[i - 1] + d[i - 1];\n            c[i] = a[i - 1] + b[i - 1] + c[i - 1] + d[i - 1];\n            d[i] = c[i - 1] + d[i - 1];\n        }\n        return a[n - 1] + b[n - 1] + c[n - 1] + d[n - 1];",
        "grade-142": {
            "execution": 0
        },
        "22": "if (n == 1) return 2;\n        int sum = 0;\n        sum += startsOneEnds(n - 1);\n        sum += (int) Math.pow(10, n - 1);\n        return sum;",
        "grade-22": {
            "execution": 0
        },
        "154": "if (n == 1) {\n            return 10;\n        } else {\n            return (int) Math.pow(10, n - 1) + 9 * (int) Math.pow(10, n - 2);\n        }",
        "grade-154": {
            "execution": 0
        },
        "110": "// Can start with 1\n        int can_start = 9 * (int) Math.pow(10, n - 1);\n        // Can end with 1\n        int can_end = (int) Math.pow(10, n - 1);\n        return can_start + can_end;",
        "grade-110": {
            "execution": 0
        },
        "8": "// S[n] = n*10^(n-1) - n*10^(n-2) + 9*10^(n-2) + S[n-1]\n        int[][] S = new int[n+1][2];\n        S[1][0] = 10;\n        S[1][1] = 1;\n        for (int i = 2; i <= n; i++) {\n            S[i][0] = (i-1)*10*(int)Math.pow(10,i-2) + S[i-1][0];\n            S[i][1] = (int)Math.pow(10,i-1) - (i-1)*(int)Math.pow(10,i-2) + 9*(int)Math.pow(10,i-2) + S[i-1][1];\n        }\n        return S[n][0] + S[n][1];",
        "grade-8": {
            "execution": 0
        },
        "7": "if (n == 1) return 1;\n        // Let x1, x2, ... xn be the digits.\n        // For starts with 1, x1 must be 1 and x2, ... xn can be any\n        // number (except 0). This can be represented as\n        // f(n) = 1 * 9 * 9 * 9 * ... * 9 + f(n - 1).\n        // For ends with 1, xn must be 1 and x1, ... xn-1 can be any\n        // number. This can be represented as\n        // f(n) = 9 * 9 * 9 * ... * 9 + f(n - 1).\n        int count = 0;\n        int power = 1;\n        for (int i = 0; i < n; i++) power *= 9;\n        for (int i = 0; i < n; i++) {\n            count += 2 * power;\n            power /= 9;\n        }\n        return count;",
        "grade-7": {
            "execution": 0
        },
        "23": "int count = 0;\n        for (int i = 1; i <= n; i++) {\n            count += pow(9, n - i) * pow(10, i - 1);\n        }\n        return count;",
        "grade-23": {
            "execution": 0
        },
        "55": "if (n == 1) {\n            return 10;\n        } else {\n            // There are 10 numbers that start with 1.\n            int sum = 10;\n            // There are 9*10^(n-2) numbers that end with 1.\n            sum += 9 * (int) Math.pow(10, n - 2);\n            // There are 9*10^(n-1) numbers that start and end with 1.\n            sum += 9 * (int) Math.pow(10, n - 1);\n            return sum;\n        }",
        "grade-55": {
            "execution": 0
        },
        "59": "// Returns the number of n-digit positive integers.\n        return (int) Math.pow(10, n) - 1;",
        "grade-59": {
            "execution": 0
        },
        "bleu-166": 0.045581328763277806,
        "bleu-28": 0.4027096212189022,
        "bleu-6": 0.08671204965159852,
        "bleu-197": 0.00044483805973966935,
        "bleu-71": 0.13907279777393744,
        "bleu-62": 0.5646488496810603,
        "bleu-57": 0.032300887113069686,
        "bleu-35": 0.2345854304246018,
        "bleu-196": 0.16312686726850179,
        "bleu-26": 0.2090457447800392,
        "bleu-179": 0.3361336783650558,
        "bleu-142": 0.03521176813123821,
        "bleu-22": 0.3593720797451724,
        "bleu-154": 0.5160272836221279,
        "bleu-110": 0.24875600646518095,
        "bleu-8": 0.06489748592084615,
        "bleu-7": 0.047528592074030165,
        "bleu-23": 0.13670363985498662,
        "bleu-55": 0.20248268399834665,
        "bleu-59": 0.33725869859198243,
        "codebleu-166": 0.5310938845822566,
        "codebleu-28": 0.7100015135254553,
        "codebleu-6": 0.4667430198944583,
        "codebleu-197": 0.059430315520368114,
        "codebleu-71": 0.6213608957795004,
        "codebleu-62": 0.7165467552686295,
        "codebleu-57": 0.435142118863049,
        "codebleu-35": 0.6367095452280062,
        "codebleu-196": 0.6977687652790153,
        "codebleu-26": 0.6656875416572704,
        "codebleu-179": 0.5004479992710243,
        "codebleu-142": 0.5169681309216192,
        "codebleu-22": 0.6289193018688201,
        "codebleu-154": 0.7139817604252404,
        "codebleu-110": 0.5276252072919637,
        "codebleu-8": 0.5557812844351451,
        "codebleu-7": 0.5878552971576226,
        "codebleu-23": 0.49234856975335944,
        "codebleu-55": 0.7288993564024985,
        "codebleu-59": 0.3684160779437423,
        "chrf-166": 0.2101970822957236,
        "chrf-28": 0.5887943505575314,
        "chrf-6": 0.2626568632128158,
        "chrf-197": 0.10550369947464647,
        "chrf-71": 0.35373702044026567,
        "chrf-62": 0.7577173258857803,
        "chrf-57": 0.19428621640363436,
        "chrf-35": 0.41973516614158557,
        "chrf-196": 0.40058468538569625,
        "chrf-26": 0.45203407146376073,
        "chrf-179": 0.4552136157128918,
        "chrf-142": 0.19455628470222688,
        "chrf-22": 0.5394133917480652,
        "chrf-154": 0.7265707612284822,
        "chrf-110": 0.38237994676734194,
        "chrf-8": 0.2781576647686384,
        "chrf-7": 0.19874002195863588,
        "chrf-23": 0.3063927788556441,
        "chrf-55": 0.460894611419118,
        "chrf-59": 0.43555644044579667,
        "rougel-166": 0.25641025641025644,
        "rougel-28": 0.6206896551724138,
        "rougel-6": 0.2028985507246377,
        "rougel-197": 0.1714285714285714,
        "rougel-71": 0.3188405797101449,
        "rougel-62": 0.7532467532467533,
        "rougel-57": 0.18987341772151897,
        "rougel-35": 0.44000000000000006,
        "rougel-196": 0.38167938931297707,
        "rougel-26": 0.4552845528455284,
        "rougel-179": 0.5428571428571428,
        "rougel-142": 0.1168384879725086,
        "rougel-22": 0.5897435897435898,
        "rougel-154": 0.7272727272727272,
        "rougel-110": 0.42857142857142855,
        "rougel-8": 0.18823529411764706,
        "rougel-7": 0.16806722689075632,
        "rougel-23": 0.38461538461538464,
        "rougel-55": 0.37762237762237766,
        "rougel-59": 0.48275862068965514,
        "meteor-166": 0.40860975885882495,
        "meteor-28": 0.8260737130673166,
        "meteor-6": 0.44878024469861205,
        "meteor-197": 0.07067137809187278,
        "meteor-71": 0.44043366955881896,
        "meteor-62": 0.8421110399707308,
        "meteor-57": 0.2814347290640395,
        "meteor-35": 0.5874840357598978,
        "meteor-196": 0.47585953906628614,
        "meteor-26": 0.5866940588633093,
        "meteor-179": 0.6088050314465409,
        "meteor-142": 0.23066514359312473,
        "meteor-22": 0.7129570552147239,
        "meteor-154": 0.8521174426049574,
        "meteor-110": 0.6302241100507893,
        "meteor-8": 0.4566682743774042,
        "meteor-7": 0.28684773662551444,
        "meteor-23": 0.5066568476231343,
        "meteor-55": 0.6669839522429455,
        "meteor-59": 0.5266074134382703,
        "ruby-166": 0.16279069767441856,
        "ruby-28": 0.4464285714285714,
        "ruby-6": 0.10795454545454541,
        "ruby-197": 0.09677419354838712,
        "ruby-71": 0.20560747663551404,
        "ruby-62": 0.6086956521739131,
        "ruby-57": 0.11023622047244097,
        "ruby-35": 0.2753623188405797,
        "ruby-196": 0.25,
        "ruby-26": 0.2934782608695652,
        "ruby-179": 0.3846153846153846,
        "ruby-142": 0.06153846153846154,
        "ruby-22": 0.44680851063829785,
        "ruby-154": 0.5869565217391304,
        "ruby-110": 0.3207547169811321,
        "ruby-8": 0.1071428571428571,
        "ruby-7": 0.09178743961352653,
        "ruby-23": 0.276595744680851,
        "ruby-55": 0.2410714285714286,
        "ruby-59": 0.3870967741935484,
        "codebertscore_f1-166": 0.7429868578910828,
        "codebertscore_f3-166": 0.7611129283905029,
        "codebertscore_f1-28": 0.8437499403953552,
        "codebertscore_f3-28": 0.9139207005500793,
        "codebertscore_f1-6": 0.7466288208961487,
        "codebertscore_f3-6": 0.7930088043212891,
        "codebertscore_f1-197": 0.6623818278312683,
        "codebertscore_f3-197": 0.6290037631988525,
        "codebertscore_f1-71": 0.7548273205757141,
        "codebertscore_f3-71": 0.7834029793739319,
        "codebertscore_f1-62": 0.9211167097091675,
        "codebertscore_f3-62": 0.9347738027572632,
        "codebertscore_f1-57": 0.7259713411331177,
        "codebertscore_f3-57": 0.7682774066925049,
        "codebertscore_f1-35": 0.7654320001602173,
        "codebertscore_f3-35": 0.7726391553878784,
        "codebertscore_f1-196": 0.7955226898193359,
        "codebertscore_f3-196": 0.8423904776573181,
        "codebertscore_f1-26": 0.8320057988166809,
        "codebertscore_f3-26": 0.8854369521141052,
        "codebertscore_f1-179": 0.8546158671379089,
        "codebertscore_f3-179": 0.8746867179870605,
        "codebertscore_f1-142": 0.6671019792556763,
        "codebertscore_f3-142": 0.713534951210022,
        "codebertscore_f1-22": 0.8645002841949463,
        "codebertscore_f3-22": 0.8970882296562195,
        "codebertscore_f1-154": 0.9078902006149292,
        "codebertscore_f3-154": 0.9205337166786194,
        "codebertscore_f1-110": 0.8186297416687012,
        "codebertscore_f3-110": 0.8530081510543823,
        "codebertscore_f1-8": 0.7511763572692871,
        "codebertscore_f3-8": 0.7887650728225708,
        "codebertscore_f1-7": 0.7086920738220215,
        "codebertscore_f3-7": 0.7630695104598999,
        "codebertscore_f1-23": 0.7925797700881958,
        "codebertscore_f3-23": 0.8039199709892273,
        "codebertscore_f1-55": 0.7843146324157715,
        "codebertscore_f3-55": 0.8494014739990234,
        "codebertscore_f1-59": 0.8332585096359253,
        "codebertscore_f3-59": 0.8553459048271179,
        "codebertscore_s_f1-166": 0.7586324214935303,
        "codebertscore_s_f3-166": 0.7728860974311829,
        "codebertscore_s_f1-28": 0.8391450047492981,
        "codebertscore_s_f3-28": 0.9089093208312988,
        "codebertscore_s_f1-6": 0.7552171945571899,
        "codebertscore_s_f3-6": 0.7998435497283936,
        "codebertscore_s_f1-197": 0.7269551157951355,
        "codebertscore_s_f3-197": 0.677213728427887,
        "codebertscore_s_f1-71": 0.7796339988708496,
        "codebertscore_s_f3-71": 0.8079470992088318,
        "codebertscore_s_f1-62": 0.9191206693649292,
        "codebertscore_s_f3-62": 0.9329543709754944,
        "codebertscore_s_f1-57": 0.741442859172821,
        "codebertscore_s_f3-57": 0.7791561484336853,
        "codebertscore_s_f1-35": 0.7960923910140991,
        "codebertscore_s_f3-35": 0.802424967288971,
        "codebertscore_s_f1-196": 0.801040768623352,
        "codebertscore_s_f3-196": 0.8479363918304443,
        "codebertscore_s_f1-26": 0.8437574505805969,
        "codebertscore_s_f3-26": 0.8971308469772339,
        "codebertscore_s_f1-179": 0.871532142162323,
        "codebertscore_s_f3-179": 0.8948800563812256,
        "codebertscore_s_f1-142": 0.6914953589439392,
        "codebertscore_s_f3-142": 0.731054961681366,
        "codebertscore_s_f1-22": 0.8736371397972107,
        "codebertscore_s_f3-22": 0.9077615737915039,
        "codebertscore_s_f1-154": 0.9094783067703247,
        "codebertscore_s_f3-154": 0.9232508540153503,
        "codebertscore_s_f1-110": 0.8269618153572083,
        "codebertscore_s_f3-110": 0.8650074005126953,
        "codebertscore_s_f1-8": 0.7672531604766846,
        "codebertscore_s_f3-8": 0.8025007247924805,
        "codebertscore_s_f1-7": 0.7214859127998352,
        "codebertscore_s_f3-7": 0.7741761207580566,
        "codebertscore_s_f1-23": 0.8076863884925842,
        "codebertscore_s_f3-23": 0.8168846368789673,
        "codebertscore_s_f1-55": 0.7948558926582336,
        "codebertscore_s_f3-55": 0.8585898280143738,
        "codebertscore_s_f1-59": 0.8491932153701782,
        "codebertscore_s_f3-59": 0.8711472153663635,
        "gpt35_nsnr-166": 4,
        "raw_gpt35_nsnr-166": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-197": 0,
        "raw_gpt35_nsnr-197": "0",
        "gpt35_nsnr-71": 4,
        "raw_gpt35_nsnr-71": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 2,
        "raw_gpt35_nsnr-35": "2",
        "gpt35_nsnr-196": 4,
        "raw_gpt35_nsnr-196": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-179": 4,
        "raw_gpt35_nsnr-179": "4",
        "gpt35_nsnr-142": 4,
        "raw_gpt35_nsnr-142": "4",
        "gpt35_nsnr-22": 3,
        "raw_gpt35_nsnr-22": "3",
        "gpt35_nsnr-154": 4,
        "raw_gpt35_nsnr-154": "4",
        "gpt35_nsnr-110": 4,
        "raw_gpt35_nsnr-110": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 2,
        "raw_gpt35_nsnr-59": "2",
        "gpt35_nswr-166": 0,
        "raw_gpt35_nswr-166": "Score: 2",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-197": 0,
        "raw_gpt35_nswr-197": "0",
        "gpt35_nswr-71": 3,
        "raw_gpt35_nswr-71": "3",
        "gpt35_nswr-62": 4,
        "raw_gpt35_nswr-62": "4",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-196": 3,
        "raw_gpt35_nswr-196": "3",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-179": 3,
        "raw_gpt35_nswr-179": "3",
        "gpt35_nswr-142": 2,
        "raw_gpt35_nswr-142": "2",
        "gpt35_nswr-22": 2,
        "raw_gpt35_nswr-22": "2",
        "gpt35_nswr-154": 3,
        "raw_gpt35_nswr-154": "3",
        "gpt35_nswr-110": 4,
        "raw_gpt35_nswr-110": "4",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-55": 4,
        "raw_gpt35_nswr-55": "4",
        "gpt35_nswr-59": 2,
        "raw_gpt35_nswr-59": "2"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return True is list elements are monotonically increasing or decreasing.\n    // >>> monotonic([1, 2, 4, 20])\n    // True\n    // >>> monotonic([1, 20, 4, 10])\n    // False\n    // >>> monotonic([4, 1, 0, -10])\n    // True\n    public static boolean monotonic(ArrayList<Integer> l) {\n",
        "snippet": [
            "        List<Integer> l1 = new ArrayList<>(l), l2 = new ArrayList<>(l);\n        Collections.sort(l1);\n        l2.sort(Collections.reverseOrder());\n        return l.equals(l1) || l.equals(l2);\n    }\n}"
        ],
        "simplified": "Return True is list elements are monotonically increasing or decreasing.",
        "task_id": "57",
        "187": "return l.stream().allMatch(i -> l.stream().allMatch(j -> i <= j)) ||\n               l.stream().allMatch(i -> l.stream().allMatch(j -> i >= j));",
        "grade-187": {
            "execution": 0
        },
        "29": "if (l.size() <= 1) {\n            return true;\n        }\n        if (l.get(0) < l.get(1)) {\n            for (int i = 1; i < l.size() - 1; i++) {\n                if (l.get(i) > l.get(i + 1)) {\n                    return false;\n                }\n            }\n        } else if (l.get(0) > l.get(1)) {\n            for (int i = 1; i < l.size() - 1; i++) {\n                if (l.get(i) < l.get(i + 1)) {\n                    return false;\n                }\n            }\n        } else {\n            return monotonic(new ArrayList<Integer>(l.subList(1, l.size())));\n        }\n        return true;",
        "grade-29": {
            "execution": 1
        },
        "7": "System.out.println(l);\n        boolean decreasing = false;\n        boolean increasing = false;\n        for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1))\n                decreasing = true;\n            if (l.get(i) < l.get(i + 1))\n                increasing = true;\n        }\n        return (decreasing && !increasing) || (!decreasing && increasing);",
        "grade-7": {
            "execution": 0
        },
        "77": "for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) <= l.get(i + 1))\n                continue;\n            else\n                return false;\n        }\n        return true;",
        "grade-77": {
            "execution": 0
        },
        "67": "// Place your code here.\n        return true;",
        "grade-67": {
            "execution": 0
        },
        "62": "return l.stream().collect(Collectors.toList()).equals(\n            l.stream().sorted().collect(Collectors.toList())\n        ) ||\n        l.stream().collect(Collectors.toList()).equals(\n            l.stream().sorted(Collections.reverseOrder()).collect(Collectors.toList())\n        );",
        "grade-62": {
            "execution": 1
        },
        "36": "return monotonic_(l,0,0);",
        "grade-36": {
            "execution": 0
        },
        "27": "if (l.size() < 2) return true;\n        boolean increasing = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1; i++) {\n            if (increasing) {\n                if (l.get(i) > l.get(i + 1)) {\n                    return false;\n                }\n            } else {\n                if (l.get(i) < l.get(i + 1)) {\n                    return false;\n                }\n            }\n        }\n        return true;",
        "grade-27": {
            "execution": 1
        },
        "197": "boolean decreasing = true;\n        boolean increasing = true;\n        for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) < l.get(i + 1)) {\n                decreasing = false;\n            }\n            if (l.get(i) > l.get(i + 1)) {\n                increasing = false;\n            }\n        }\n        return decreasing || increasing;",
        "grade-197": {
            "execution": 1
        },
        "159": "int n = l.size();\n        int k = 1;\n        int sign = l.get(1) - l.get(0);\n        for (; k < n; k++) {\n            int s = l.get(k) - l.get(k - 1);\n            if (s == 0) continue;\n            if (s * sign < 0) return false;\n            break;\n        }\n        sign = l.get(k) - l.get(k - 1);\n        for (; k < n; k++) {\n            int s = l.get(k) - l.get(k - 1);\n            if (s * sign < 0) return false;\n        }\n        return true;",
        "grade-159": {
            "execution": 0
        },
        "23": "boolean direction = true; // Initialized to true, meaning that if the function is monotonic, it is increasing.\n        boolean wasDirectionChosen = false; // Stores if the direction has already been defined.\n        int previous = l.get(0); // Stores the previous element.\n        for (int i = 1; i < l.size(); i++) {\n            int current = l.get(i);\n            if (current == previous) {\n                continue;\n            }\n            if (!wasDirectionChosen) {\n                wasDirectionChosen = true;\n                direction = current > previous;\n            }\n            if (direction && current < previous) {\n                return false;\n            }\n            if (!direction && current > previous) {\n                return false;\n            }\n            previous = current;\n        }\n        return true;",
        "grade-23": {
            "execution": 1
        },
        "173": "if (l.size() == 0) {\n            return true;\n        }\n        int direction = 0;\n        for (int i = 1; i < l.size(); i++) {\n            int this_dir = Integer.signum(l.get(i) - l.get(i - 1));\n            if (this_dir != 0) {\n                if (direction == 0) {\n                    direction = this_dir;\n                } else if (direction != this_dir) {\n                    return false;\n                }\n            }\n        }\n        return true;",
        "grade-173": {
            "execution": 1
        },
        "122": "int d = l.get(1) - l.get(0);\n        for (int i = 2; i < l.size(); i++) {\n            if (l.get(i) - l.get(i - 1) * d < 0) {\n                return false;\n            }\n        }\n        return true;",
        "grade-122": {
            "execution": 0
        },
        "9": "return monotonic(l, 0, 0);",
        "grade-9": {
            "execution": 0
        },
        "8": "ArrayList<Integer> sorted = new ArrayList<Integer>(l);\n        Collections.sort(sorted);\n        if (sorted.equals(l)) {\n            return true;\n        }\n        Collections.reverse(sorted);\n        if (sorted.equals(l)) {\n            return true;\n        }\n        return false;",
        "grade-8": {
            "execution": 1
        },
        "24": "if (l.size() <= 1) return true;\n        int left = 0;\n        int right = l.size() - 1;\n        while (left < right) {\n            if (l.get(left) > l.get(left + 1)) {\n                // Decreasing\n                while (left < right) {\n                    if (l.get(left) < l.get(left + 1)) return false;\n                    left += 1;\n                }\n            } else if (l.get(left) < l.get(left + 1)) {\n                // Increasing\n                while (left < right) {\n                    if (l.get(left) > l.get(left + 1)) return false;\n                    left += 1;\n                }\n            } else {\n                // Equal\n                left += 1;\n            }\n        }\n        return true;",
        "grade-24": {
            "execution": 1
        },
        "60": "if (l.size() == 0) return true;\n        boolean increasing = true;\n        boolean decreasing = true;\n        int last = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            int x = l.get(i);\n            if (x > last) decreasing = false;\n            if (x < last) increasing = false;\n            last = x;\n        }\n        return increasing || decreasing;",
        "grade-60": {
            "execution": 1
        },
        "64": "boolean increasing = true;\n        boolean decreasing = true;\n        for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) < l.get(i + 1))\n                decreasing = false;\n            if (l.get(i) > l.get(i + 1))\n                increasing = false;\n        }\n        return increasing || decreasing;",
        "grade-64": {
            "execution": 1
        },
        "148": "int t = 0;\n        for (int i = 0; i < l.size() - 1; i++) {\n            int a = Integer.compare(l.get(i), l.get(i + 1));\n            if (t == 0) {\n                t = a;\n            } else if (t != a) {\n                return false;\n            }\n        }\n        return true;",
        "grade-148": {
            "execution": 0
        },
        "177": "if (l.size() <= 1) return true;\n        boolean inc = l.get(0) < l.get(1);\n        for (int i = 1; i < l.size() - 1; i++) {\n            if (inc) {\n                if (l.get(i) > l.get(i + 1)) return false;\n            } else {\n                if (l.get(i) < l.get(i + 1)) return false;\n            }\n        }\n        return true;",
        "grade-177": {
            "execution": 1
        },
        "bleu-187": 0.11813500400164394,
        "bleu-29": 0.05948888135008599,
        "bleu-7": 0.05854006805702303,
        "bleu-77": 0.03356041645989178,
        "bleu-67": 0.00027565567127850113,
        "bleu-62": 0.18802524759407777,
        "bleu-36": 0.0006556233711504895,
        "bleu-27": 0.032582715346696434,
        "bleu-197": 0.04201695548228532,
        "bleu-159": 0.016490638352356174,
        "bleu-23": 0.015235561725105186,
        "bleu-173": 0.04189591713119192,
        "bleu-122": 0.05135993615504825,
        "bleu-9": 0.0006556233711504895,
        "bleu-8": 0.34086275328217674,
        "bleu-24": 0.021075473516538018,
        "bleu-60": 0.02679319981973782,
        "bleu-64": 0.030057917460318384,
        "bleu-148": 0.052223375259275805,
        "bleu-177": 0.033500638097169036,
        "codebleu-187": 0.45276758762416874,
        "codebleu-29": 0.6063223209793728,
        "codebleu-7": 0.6023566129760493,
        "codebleu-77": 0.40216475699756327,
        "codebleu-67": 0.06778770091972802,
        "codebleu-62": 0.4965621331544524,
        "codebleu-36": 0.05265462051314373,
        "codebleu-27": 0.5938845100340991,
        "codebleu-197": 0.6038627089272737,
        "codebleu-159": 0.5764156744368046,
        "codebleu-23": 0.5789032366258594,
        "codebleu-173": 0.5589468388395104,
        "codebleu-122": 0.5514562021353904,
        "codebleu-9": 0.05265462051314373,
        "codebleu-8": 0.6138244560192139,
        "codebleu-24": 0.6038627089272737,
        "codebleu-60": 0.5464531276203253,
        "codebleu-64": 0.5863938733299793,
        "codebleu-148": 0.5414780032422158,
        "codebleu-177": 0.5938845100340991,
        "chrf-187": 0.15066011701815424,
        "chrf-29": 0.267393537365447,
        "chrf-7": 0.18134739734408115,
        "chrf-77": 0.13821294705198117,
        "chrf-67": 0.06509112204690622,
        "chrf-62": 0.4168765048686853,
        "chrf-36": 0.052192171094648465,
        "chrf-27": 0.17332175093595448,
        "chrf-197": 0.17533523207901022,
        "chrf-159": 0.15451448319873884,
        "chrf-23": 0.16025102844981287,
        "chrf-173": 0.20414523928345252,
        "chrf-122": 0.1440529867046014,
        "chrf-9": 0.05227870539584992,
        "chrf-8": 0.5691797504150257,
        "chrf-24": 0.16240408560390848,
        "chrf-60": 0.17353672675941595,
        "chrf-64": 0.17298994733023687,
        "chrf-148": 0.1762023108995817,
        "chrf-177": 0.1695721544915882,
        "rougel-187": 0.31496062992125984,
        "rougel-29": 0.27499999999999997,
        "rougel-7": 0.32335329341317365,
        "rougel-77": 0.3333333333333333,
        "rougel-67": 0.0821917808219178,
        "rougel-62": 0.348993288590604,
        "rougel-36": 0.13698630136986303,
        "rougel-27": 0.3448275862068966,
        "rougel-197": 0.36000000000000004,
        "rougel-159": 0.26415094339622647,
        "rougel-23": 0.20909090909090908,
        "rougel-173": 0.2874251497005988,
        "rougel-122": 0.36641221374045796,
        "rougel-9": 0.13698630136986303,
        "rougel-8": 0.5599999999999999,
        "rougel-24": 0.26956521739130435,
        "rougel-60": 0.2911392405063291,
        "rougel-64": 0.3561643835616438,
        "rougel-148": 0.3194444444444444,
        "rougel-177": 0.3508771929824561,
        "meteor-187": 0.34271483553801874,
        "meteor-29": 0.3854840098196036,
        "meteor-7": 0.38127173373075013,
        "meteor-77": 0.2552612933494187,
        "meteor-67": 0.03466204506065858,
        "meteor-62": 0.45260421748333907,
        "meteor-36": 0.07389755440015404,
        "meteor-27": 0.3264810717797444,
        "meteor-197": 0.36505697366099055,
        "meteor-159": 0.28396420020522173,
        "meteor-23": 0.30172479760028176,
        "meteor-173": 0.31467391024087377,
        "meteor-122": 0.35152439855052714,
        "meteor-9": 0.07389755440015404,
        "meteor-8": 0.5410326650457864,
        "meteor-24": 0.3322967536437537,
        "meteor-60": 0.32666625562611756,
        "meteor-64": 0.34054487179487186,
        "meteor-148": 0.3364523461324808,
        "meteor-177": 0.3279320987654321,
        "ruby-187": 0.109375,
        "ruby-29": 0.1694915254237288,
        "ruby-7": 0.20192307692307687,
        "ruby-77": 0.2063492063492064,
        "ruby-67": 0.04761904761904767,
        "ruby-62": 0.2093023255813954,
        "ruby-36": 0.07936507936507942,
        "ruby-27": 0.2432432432432432,
        "ruby-197": 0.2183908045977011,
        "ruby-159": 0.16778523489932884,
        "ruby-23": 0.14012738853503182,
        "ruby-173": 0.1923076923076923,
        "ruby-122": 0.17647058823529416,
        "ruby-9": 0.07936507936507942,
        "ruby-8": 0.38095238095238093,
        "ruby-24": 0.17365269461077848,
        "ruby-60": 0.17894736842105263,
        "ruby-64": 0.2168674698795181,
        "ruby-148": 0.18518518518518523,
        "ruby-177": 0.25,
        "codebertscore_f1-187": 0.7115588188171387,
        "codebertscore_f3-187": 0.7081999182701111,
        "codebertscore_f1-29": 0.6682661771774292,
        "codebertscore_f3-29": 0.6936488151550293,
        "codebertscore_f1-7": 0.6876979470252991,
        "codebertscore_f3-7": 0.6969598531723022,
        "codebertscore_f1-77": 0.695479154586792,
        "codebertscore_f3-77": 0.6910412311553955,
        "codebertscore_f1-67": 0.5898255705833435,
        "codebertscore_f3-67": 0.5781223177909851,
        "codebertscore_f1-62": 0.7638065218925476,
        "codebertscore_f3-62": 0.7757940888404846,
        "codebertscore_f1-36": 0.6603133678436279,
        "codebertscore_f3-36": 0.6467911005020142,
        "codebertscore_f1-27": 0.6887599229812622,
        "codebertscore_f3-27": 0.6957204937934875,
        "codebertscore_f1-197": 0.6947481632232666,
        "codebertscore_f3-197": 0.6963192820549011,
        "codebertscore_f1-159": 0.6685817241668701,
        "codebertscore_f3-159": 0.6879636645317078,
        "codebertscore_f1-23": 0.6349327564239502,
        "codebertscore_f3-23": 0.6561053395271301,
        "codebertscore_f1-173": 0.6721376180648804,
        "codebertscore_f3-173": 0.6806641817092896,
        "codebertscore_f1-122": 0.7051782011985779,
        "codebertscore_f3-122": 0.7047105431556702,
        "codebertscore_f1-9": 0.6562906503677368,
        "codebertscore_f3-9": 0.6439173221588135,
        "codebertscore_f1-8": 0.8203988671302795,
        "codebertscore_f3-8": 0.8263977766036987,
        "codebertscore_f1-24": 0.6621021628379822,
        "codebertscore_f3-24": 0.6904424428939819,
        "codebertscore_f1-60": 0.6842940449714661,
        "codebertscore_f3-60": 0.6888837814331055,
        "codebertscore_f1-64": 0.7008469104766846,
        "codebertscore_f3-64": 0.7010308504104614,
        "codebertscore_f1-148": 0.6935857534408569,
        "codebertscore_f3-148": 0.6952388286590576,
        "codebertscore_f1-177": 0.6978386044502258,
        "codebertscore_f3-177": 0.7026010155677795,
        "codebertscore_s_f1-187": 0.735062837600708,
        "codebertscore_s_f3-187": 0.735000491142273,
        "codebertscore_s_f1-29": 0.7095037698745728,
        "codebertscore_s_f3-29": 0.7297069430351257,
        "codebertscore_s_f1-7": 0.7059145569801331,
        "codebertscore_s_f3-7": 0.7209625840187073,
        "codebertscore_s_f1-77": 0.7207342386245728,
        "codebertscore_s_f3-77": 0.7231675386428833,
        "codebertscore_s_f1-67": 0.5949411392211914,
        "codebertscore_s_f3-67": 0.592621386051178,
        "codebertscore_s_f1-62": 0.7863414883613586,
        "codebertscore_s_f3-62": 0.8048094511032104,
        "codebertscore_s_f1-36": 0.6857939958572388,
        "codebertscore_s_f3-36": 0.6696030497550964,
        "codebertscore_s_f1-27": 0.7147446870803833,
        "codebertscore_s_f3-27": 0.7236671447753906,
        "codebertscore_s_f1-197": 0.7181026935577393,
        "codebertscore_s_f3-197": 0.7277933359146118,
        "codebertscore_s_f1-159": 0.7034962177276611,
        "codebertscore_s_f3-159": 0.7216659188270569,
        "codebertscore_s_f1-23": 0.6726453900337219,
        "codebertscore_s_f3-23": 0.6943190693855286,
        "codebertscore_s_f1-173": 0.6962311863899231,
        "codebertscore_s_f3-173": 0.7131754159927368,
        "codebertscore_s_f1-122": 0.725842297077179,
        "codebertscore_s_f3-122": 0.7310763001441956,
        "codebertscore_s_f1-9": 0.690548837184906,
        "codebertscore_s_f3-9": 0.6757743954658508,
        "codebertscore_s_f1-8": 0.8350319862365723,
        "codebertscore_s_f3-8": 0.8437973856925964,
        "codebertscore_s_f1-24": 0.6982589960098267,
        "codebertscore_s_f3-24": 0.7206718921661377,
        "codebertscore_s_f1-60": 0.709246814250946,
        "codebertscore_s_f3-60": 0.7184264659881592,
        "codebertscore_s_f1-64": 0.7233287692070007,
        "codebertscore_s_f3-64": 0.7309952974319458,
        "codebertscore_s_f1-148": 0.7166447043418884,
        "codebertscore_s_f3-148": 0.7258815765380859,
        "codebertscore_s_f1-177": 0.720495879650116,
        "codebertscore_s_f3-177": 0.7288575768470764,
        "gpt35_nsnr-187": 3,
        "raw_gpt35_nsnr-187": "3",
        "gpt35_nsnr-29": 4,
        "raw_gpt35_nsnr-29": "4",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-77": 4,
        "raw_gpt35_nsnr-77": "4",
        "gpt35_nsnr-67": 2,
        "raw_gpt35_nsnr-67": "2",
        "gpt35_nsnr-62": 3,
        "raw_gpt35_nsnr-62": "3",
        "gpt35_nsnr-36": 3,
        "raw_gpt35_nsnr-36": "3",
        "gpt35_nsnr-27": 4,
        "raw_gpt35_nsnr-27": "4",
        "gpt35_nsnr-197": 4,
        "raw_gpt35_nsnr-197": "4",
        "gpt35_nsnr-159": 4,
        "raw_gpt35_nsnr-159": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-173": 4,
        "raw_gpt35_nsnr-173": "4",
        "gpt35_nsnr-122": 3,
        "raw_gpt35_nsnr-122": "3",
        "gpt35_nsnr-9": 3,
        "raw_gpt35_nsnr-9": "3",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-24": 4,
        "raw_gpt35_nsnr-24": "4",
        "gpt35_nsnr-60": 4,
        "raw_gpt35_nsnr-60": "4",
        "gpt35_nsnr-64": 4,
        "raw_gpt35_nsnr-64": "4",
        "gpt35_nsnr-148": 4,
        "raw_gpt35_nsnr-148": "4",
        "gpt35_nsnr-177": 4,
        "raw_gpt35_nsnr-177": "4",
        "gpt35_nswr-187": 3,
        "raw_gpt35_nswr-187": "3",
        "gpt35_nswr-29": 3,
        "raw_gpt35_nswr-29": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-77": 3,
        "raw_gpt35_nswr-77": "3",
        "gpt35_nswr-67": 2,
        "raw_gpt35_nswr-67": "2",
        "gpt35_nswr-62": 3,
        "raw_gpt35_nswr-62": "3",
        "gpt35_nswr-36": 3,
        "raw_gpt35_nswr-36": "3",
        "gpt35_nswr-27": 4,
        "raw_gpt35_nswr-27": "4",
        "gpt35_nswr-197": 4,
        "raw_gpt35_nswr-197": "4",
        "gpt35_nswr-159": 4,
        "raw_gpt35_nswr-159": "4",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-173": 3,
        "raw_gpt35_nswr-173": "3",
        "gpt35_nswr-122": 3,
        "raw_gpt35_nswr-122": "3",
        "gpt35_nswr-9": 0,
        "raw_gpt35_nswr-9": "Score: 0",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-24": 3,
        "raw_gpt35_nswr-24": "3",
        "gpt35_nswr-60": 4,
        "raw_gpt35_nswr-60": "4",
        "gpt35_nswr-64": 4,
        "raw_gpt35_nswr-64": "4",
        "gpt35_nswr-148": 4,
        "raw_gpt35_nswr-148": "4",
        "gpt35_nswr-177": 4,
        "raw_gpt35_nswr-177": "4"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer, obtain its roman numeral equivalent as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <= 1000\n    // Examples:\n    // >>> int_to_mini_roman(19) == 'xix'\n    // >>> int_to_mini_roman(152) == 'clii'\n    // >>> int_to_mini_roman(426) == 'cdxxvi'\n    public static String intToMiniRoman(int number) {\n",
        "snippet": [
            "        List<Integer> num = Arrays.asList(1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000);\n        List<String> sym = Arrays.asList(\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\");\n        int i = 12;\n        String res = \"\";\n        while (number > 0) {\n            int div = number / num.get(i);\n            number %= num.get(i);\n            while (div != 0) {\n                res += sym.get(i);\n                div -= 1;\n            }\n            i -= 1;\n        }\n        return res.toLowerCase();\n    }\n}"
        ],
        "simplified": "Given a positive integer, obtain its roman numeral equivalent as a string, and return it in lowercase. Restrictions: 1 <= num <= 1000",
        "task_id": "156",
        "36": "// S T U D E N T S\n        // #Y O U R  C O D E H E R E#\n        String res = \"\";\n        while (number >= 100) {\n            res += \"c\";\n            number -= 100;\n        }\n        while (number >= 50) {\n            res += \"l\";\n            number -= 50;\n        }\n        while (number >= 10) {\n            res += \"x\";\n            number -= 10;\n        }\n        while (number >= 5) {\n            res += \"v\";\n            number -= 5;\n        }\n        while (number >= 1) {\n            res += \"i\";\n            number -= 1;\n        }\n        return res;",
        "grade-36": {
            "execution": 0
        },
        "7": "String roman = \"\";\n        int x = number / 100;\n        for (int i = 0; i < x; i++) {\n            roman += \"c\";\n        }\n        number = number % 100;\n        x = number / 50;\n        for (int i = 0; i < x; i++) {\n            roman += \"l\";\n        }\n        number = number % 50;\n        x = number / 10;\n        for (int i = 0; i < x; i++) {\n            roman += \"x\";\n        }\n        number = number % 10;\n        x = number / 5;\n        for (int i = 0; i < x; i++) {\n            roman += \"v\";\n        }\n        number = number % 5;\n        for (int i = 0; i < number; i++) {\n            roman += \"i\";\n        }\n        return roman;",
        "grade-7": {
            "execution": 0
        },
        "88": "String roman = \"\";\n        while (number > 0) {\n            if (number >= 1000) {\n                roman += \"m\";\n                number -= 1000;\n            } else if (number >= 900) {\n                roman += \"cm\";\n                number -= 900;\n            } else if (number >= 500) {\n                roman += \"d\";\n                number -= 500;\n            } else if (number >= 400) {\n                roman += \"cd\";\n                number -= 400;\n            } else if (number >= 100) {\n                roman += \"c\";\n                number -= 100;\n            } else if (number >= 90) {\n                roman += \"xc\";\n                number -= 90;\n            } else if (number >= 50) {\n                roman += \"l\";\n                number -= 50;\n            } else if (number >= 40) {\n                roman += \"xl\";\n                number -= 40;\n            } else if (number >= 10) {\n                roman += \"x\";\n                number -= 10;\n            } else if (number >= 9) {\n                roman += \"ix\";\n                number -= 9;\n            } else if (number >= 5) {\n                roman += \"v\";\n                number -= 5;\n            } else if (number >= 4) {\n                roman += \"iv\";\n                number -= 4;\n            } else if (number >= 1) {\n                roman += \"i\";\n                number -= 1;\n            }\n        }\n        return roman;",
        "grade-88": {
            "execution": 1
        },
        "77": "// BEGIN\n        // END",
        "grade-77": {
            "execution": 0
        },
        "72": "assert(number >= 1 && number <= 1000);\n        var result = new StringBuilder();\n        var numeralMap = Map.of(1, \"i\", 5, \"v\", 10, \"x\", 50, \"l\", 100, \"c\", 500, \"d\", 1000, \"m\");\n        int currentPlace = 0;\n        while (number > 0) {\n            int currentDigit = number % 10;\n            var currentRomanDigit = new StringBuilder();\n            if (currentDigit == 9) {\n                currentRomanDigit.append(numeralMap.get(1 * (int) Math.pow(10, currentPlace)));\n                currentRomanDigit.append(numeralMap.get(1 * (int) Math.pow(10, currentPlace + 1)));\n            } else if (currentDigit == 4) {\n                currentRomanDigit.append(numeralMap.get(1 * (int) Math.pow(10, currentPlace)));\n                currentRomanDigit.append(numeralMap.get(5 * (int) Math.pow(10, currentPlace)));\n            } else {\n                if (currentDigit >= 5) {\n                    currentRomanDigit.append(numeralMap.get(5 * (int) Math.pow(10, currentPlace)));\n                    currentDigit -= 5;\n                }\n                for (int j = 0; j < currentDigit; j++) {\n                    currentRomanDigit.append(numeralMap.get(1 * (int) Math.pow(10, currentPlace)));\n                }\n            }\n            result.insert(0, currentRomanDigit);\n            number /= 10;\n            currentPlace++;\n        }\n        return result.toString();",
        "grade-72": {
            "execution": 1
        },
        "43": "// your code here",
        "grade-43": {
            "execution": 0
        },
        "34": "throw new UnsupportedOperationException(\"Waiting to be implemented.\");",
        "grade-34": {
            "execution": 0
        },
        "173": "StringBuilder builder = new StringBuilder();\n        int[] numerals = {100, 10, 1};\n        String[] chars = {\"c\", \"x\", \"i\"};\n        int[] places = {1, 10, 100};\n        for (int i = 0; i < numerals.length; i++) {\n            int remainder = number % numerals[i];\n            int times = (number - remainder) / numerals[i];\n            switch (times) {\n                case 9:\n                    builder.append(chars[i + 1] + chars[i - 1]);\n                    break;\n                case 4:\n                    builder.append(chars[i + 1] + chars[i]);\n                    break;\n                default:\n                    for (int j = 0; j < times; j++) {\n                        builder.append(chars[i]);\n                    }\n                    break;\n            }\n            number = remainder;\n        }\n        return builder.toString();",
        "grade-173": {
            "execution": 0
        },
        "27": "int[] numerals = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n      String[] romans = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n      String result = \"\";\n      int x = 0;\n      while (number > 0) {\n        int factor = number / numerals[x];\n        number = number - factor * numerals[x];\n        while (factor > 0) {\n          result += romans[x];\n          factor--;\n        }\n        x++;\n      }\n      return result;",
        "grade-27": {
            "execution": 1
        },
        "189": "String[] ones = {\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"};\n        String[] tens = {\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"};\n        String[] hundreds = {\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"};\n        String[] thousands = {\"\", \"m\", \"mm\", \"mmm\"};\n        return thousands[number / 1000] + hundreds[(number % 1000) / 100] + tens[(number % 100) / 10] + ones[number % 10];",
        "grade-189": {
            "execution": 1
        },
        "134": "String roman = \"\";\n        if (number >= 500) {\n            roman += \"d\";\n            number -= 500;\n        }\n        for (int i = 0; i < number / 100; i++) {\n            roman += \"c\";\n        }\n        number %= 100;\n        if (number >= 50) {\n            roman += \"l\";\n            number -= 50;\n        }\n        for (int i = 0; i < number / 10; i++) {\n            roman += \"x\";\n        }\n        number %= 10;\n        if (number >= 5) {\n            roman += \"v\";\n            number -= 5;\n        }\n        for (int i = 0; i < number; i++) {\n            roman += \"i\";\n        }\n        return roman;",
        "grade-134": {
            "execution": 0
        },
        "9": "String[][] symbols = {\n            {\"i\", \"v\", \"x\"},\n            {\"x\", \"l\", \"c\"},\n            {\"c\", \"d\", \"m\"},\n            {\"m\", \"\", \"\"},\n        };\n        return \"\";",
        "grade-9": {
            "execution": 0
        },
        "8": "return null;",
        "grade-8": {
            "execution": 0
        },
        "28": "StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < number; i++) {\n            sb.append('i');\n        }\n        return sb.toString().replaceAll(\"iiiii\", \"v\").replaceAll(\"iiii\", \"iv\").replaceAll(\"viv\", \"ix\").replaceAll(\"vv\", \"x\").replaceAll(\"viv\", \"ix\").replaceAll(\"ixx\", \"xx\").replaceAll(\"lx\", \"xc\").replaceAll(\"llx\", \"lxc\").replaceAll(\"lllx\", \"xc\").replaceAll(\"ddccc\", \"cm\").replaceAll(\"ddcc\", \"cdc\").replaceAll(\"dddcc\", \"cm\").replaceAll(\"dddc\", \"mcd\").replaceAll(\"ccccc\", \"d\").replaceAll(\"cccc\", \"cd\").replaceAll(\"dcd\", \"cm\").replaceAll(\"dccc\", \"cm\").replaceAll(\"xxx\", \"c\");",
        "grade-28": {
            "execution": 0
        },
        "70": "String result = \"\";\n        while (number > 0) {\n            switch (number) {\n                case 1:\n                    result += \"i\";\n                    number -= 1;\n                    break;\n                case 2:\n                    result += \"ii\";\n                    number -= 2;\n                    break;\n                case 3:\n                    result += \"iii\";\n                    number -= 3;\n                    break;\n                case 4:\n                    result += \"iv\";\n                    number -= 4;\n                    break;\n                case 5:\n                    result += \"v\";\n                    number -= 5;\n                    break;\n                case 6:\n                    result += \"vi\";\n                    number -= 6;\n                    break;\n                case 7:\n                    result += \"vii\";\n                    number -= 7;\n                    break;\n                case 8:\n                    result += \"viii\";\n                    number -= 8;\n                    break;\n                case 9:\n                    result += \"ix\";\n                    number -= 9;\n                    break;\n                case 10:\n                    result += \"x\";\n                    number -= 10;\n                    break;\n                case 20:\n                    result += \"xx\";\n                    number -= 20;\n                    break;\n                case 30:\n                    result += \"xxx\";\n                    number -= 30;\n                    break;\n                case 40:\n                    result += \"xl\";\n                    number -= 40;\n                    break;\n                case 50:\n                    result += \"l\";\n                    number -= 50;\n                    break;\n                case 60:\n                    result += \"lx\";\n                    number -= 60;\n                    break;\n                case 70:\n                    result += \"lxx\";\n                    number -= 70;\n                    break;\n                case 80:\n                    result += \"lxxx\";\n                    number -= 80;\n                    break;\n                case 90:\n                    result += \"xc\";\n                    number -= 90;\n                    break;\n                case 100:\n                    result += \"c\";\n                    number -= 100;\n                    break;\n                case 200:\n                    result += \"cc\";\n                    number -= 200;\n                    break;\n                case 300:\n                    result += \"ccc\";\n                    number -= 300;\n                    break;\n                case 400:\n                    result += \"cd\";\n                    number -= 400;",
        "grade-70": {
            "execution": 0
        },
        "74": "if(number < 1 || number > 1000) throw new IllegalArgumentException(\"Number out of range\");\n        return IntStream.range(0, number).mapToObj(i -> \"i\").collect(Collectors.joining(\"\"));",
        "grade-74": {
            "execution": 0
        },
        "161": "String result = \"\";\n        String[] romanNumerals = new String[]{\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n        int[] decimalNumbers = new int[]{1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        for (int i = 0; i < romanNumerals.length; i++) {\n            while (number >= decimalNumbers[i]) {\n                result += romanNumerals[i];\n                number -= decimalNumbers[i];\n            }\n        }\n        return result;",
        "grade-161": {
            "execution": 1
        },
        "195": "// Solution from challenge \"Integer to Roman\" on LeetCode:\n        // https://leetcode.com/problems/integer-to-roman/\n        int[] numbers = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        String[] romanNumeral = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        StringBuilder stringBuilder = new StringBuilder();\n        int i = 0;\n        while (number > 0) {\n            int k = number / numbers[i];\n            for (int j = 0; j < k; j++) {\n                stringBuilder.append(romanNumeral[i]);\n                number -= numbers[i];\n            }\n            i++;\n        }\n        return stringBuilder.toString().toLowerCase();",
        "grade-195": {
            "execution": 1
        },
        "181": "/* Code here */\n        return \"\";",
        "grade-181": {
            "execution": 0
        },
        "61": "String result = \"\";\n        // iterate from highest to lowest value\n        for (int i = 0; i < 10; i++) {\n            int value = (int)Math.pow(10, i);\n            if (number >= value) {\n                int frequency = number / value;\n                if (frequency > 0) {\n                    int maxRep = (i + 1) / 2;\n                    if (frequency > maxRep) {\n                        result += intToMiniRoman((int)Math.pow(10, i + 1));\n                        frequency -= maxRep;\n                    }\n                    while (frequency > 0) {\n                        result += valueToSymbol.get(value);\n                        frequency--;\n                    }\n                }\n                number = number % value;\n            }\n        }\n        return result;",
        "grade-61": {
            "execution": 0
        },
        "bleu-36": 0.13357987424680545,
        "bleu-7": 0.04855500901770261,
        "bleu-88": 0.07825348665414242,
        "bleu-77": 1.2522532432798489e-14,
        "bleu-72": 0.09572709004101726,
        "bleu-43": 3.69637597840017e-17,
        "bleu-34": 1.8296295007758543e-06,
        "bleu-173": 0.05540512188129711,
        "bleu-27": 0.20496134743448713,
        "bleu-189": 0.05672157586189565,
        "bleu-134": 0.054826831807694314,
        "bleu-9": 0.022112349741890663,
        "bleu-8": 3.0357127306441533e-27,
        "bleu-28": 0.05017753291220279,
        "bleu-70": 0.048678277519503495,
        "bleu-74": 0.0078949280042834,
        "bleu-161": 0.13857345008840963,
        "bleu-195": 0.4171207703994362,
        "bleu-181": 5.443025012474144e-09,
        "bleu-61": 0.09466101868879288,
        "codebleu-36": 0.31258044733967094,
        "codebleu-7": 0.3701585306236469,
        "codebleu-88": 0.47518453699356156,
        "codebleu-77": 0.009009009009009009,
        "codebleu-72": 0.5713861315237307,
        "codebleu-43": 0.009009009009009009,
        "codebleu-34": 0.027027027027762114,
        "codebleu-173": 0.4194706334241217,
        "codebleu-27": 0.5228026469771231,
        "codebleu-189": 0.3579655533264656,
        "codebleu-134": 0.38138548971339337,
        "codebleu-9": 0.18810614888613664,
        "codebleu-8": 0.006006006006006005,
        "codebleu-28": 0.44148090413163804,
        "codebleu-70": 0.43949791949858885,
        "codebleu-74": 0.14580473166095617,
        "codebleu-161": 0.46741760155013895,
        "codebleu-195": 0.6215855574517698,
        "codebleu-181": 0.030030041387269862,
        "codebleu-61": 0.3937791063507146,
        "chrf-36": 0.24845509160267118,
        "chrf-7": 0.18083741220744234,
        "chrf-88": 0.20631706445807702,
        "chrf-77": 0.0019778481012658225,
        "chrf-72": 0.2509882829632632,
        "chrf-43": 0.009881533622919004,
        "chrf-34": 0.04307545651326779,
        "chrf-173": 0.2215876855187069,
        "chrf-27": 0.37039523701464383,
        "chrf-189": 0.20157947884600605,
        "chrf-134": 0.2012090313708547,
        "chrf-9": 0.08384721826524871,
        "chrf-8": 0.017913432753627306,
        "chrf-28": 0.15452621101146244,
        "chrf-70": 0.16704328297403137,
        "chrf-74": 0.14696293618301937,
        "chrf-161": 0.3252213428853284,
        "chrf-195": 0.4748677539002828,
        "chrf-181": 0.024983911583749022,
        "chrf-61": 0.23556700424471635,
        "rougel-36": 0.2972136222910217,
        "rougel-7": 0.24930747922437674,
        "rougel-88": 0.24742268041237114,
        "rougel-77": 0.010582010582010581,
        "rougel-72": 0.3107861060329068,
        "rougel-43": 0.010638297872340425,
        "rougel-34": 0.050505050505050504,
        "rougel-173": 0.32446808510638303,
        "rougel-27": 0.5321637426900584,
        "rougel-189": 0.35263157894736846,
        "rougel-134": 0.2873900293255132,
        "rougel-9": 0.3346613545816733,
        "rougel-8": 0.021505376344086023,
        "rougel-28": 0.29345372460496616,
        "rougel-70": 0.19546247818499127,
        "rougel-74": 0.19008264462809918,
        "rougel-161": 0.39999999999999997,
        "rougel-195": 0.507537688442211,
        "rougel-181": 0.031088082901554407,
        "rougel-61": 0.30357142857142855,
        "meteor-36": 0.27620327522423,
        "meteor-7": 0.2273972602739726,
        "meteor-88": 0.3221751461277662,
        "meteor-77": 0.006049606775559589,
        "meteor-72": 0.35214956790904467,
        "meteor-43": 0.0030266343825665855,
        "meteor-34": 0.02885630786610673,
        "meteor-173": 0.29579240979699184,
        "meteor-27": 0.546392358458278,
        "meteor-189": 0.3952289387443533,
        "meteor-134": 0.268609967533974,
        "meteor-9": 0.2121420489236447,
        "meteor-8": 0.006060606060606061,
        "meteor-28": 0.3092602712741849,
        "meteor-70": 0.2281953611277781,
        "meteor-74": 0.1369052642003274,
        "meteor-161": 0.37254675225535216,
        "meteor-195": 0.48099398967891266,
        "meteor-181": 0.022450211225105612,
        "meteor-61": 0.2641475723551628,
        "ruby-36": 0.21311475409836067,
        "ruby-7": 0.09289617486338797,
        "ruby-88": 0.17218543046357615,
        "ruby-77": 0.005464480874316946,
        "ruby-72": 0.17582417582417587,
        "ruby-43": 0.005464480874316946,
        "ruby-34": 0.02732240437158473,
        "ruby-173": 0.12435233160621761,
        "ruby-27": 0.4699453551912568,
        "ruby-189": 0.24873096446700504,
        "ruby-134": 0.14754098360655743,
        "ruby-9": 0.1912568306010929,
        "ruby-8": 0.010928961748633892,
        "ruby-28": 0.19615384615384612,
        "ruby-70": 0.12307692307692308,
        "ruby-74": 0.10382513661202186,
        "ruby-161": 0.24590163934426235,
        "ruby-195": 0.38139534883720927,
        "ruby-181": 0.016393442622950838,
        "ruby-61": 0.14754098360655743,
        "codebertscore_f1-36": 0.7322549223899841,
        "codebertscore_f3-36": 0.7112200856208801,
        "codebertscore_f1-7": 0.7170990109443665,
        "codebertscore_f3-7": 0.7042604684829712,
        "codebertscore_f1-88": 0.7163551449775696,
        "codebertscore_f3-88": 0.7096948027610779,
        "codebertscore_f1-77": 0.4978857934474945,
        "codebertscore_f3-77": 0.4661271274089813,
        "codebertscore_f1-72": 0.7454077005386353,
        "codebertscore_f3-72": 0.7751113772392273,
        "codebertscore_f1-43": 0.46294674277305603,
        "codebertscore_f3-43": 0.44038230180740356,
        "codebertscore_f1-34": 0.5379772782325745,
        "codebertscore_f3-34": 0.5102760195732117,
        "codebertscore_f1-173": 0.7428024411201477,
        "codebertscore_f3-173": 0.7434423565864563,
        "codebertscore_f1-27": 0.82903653383255,
        "codebertscore_f3-27": 0.8098092675209045,
        "codebertscore_f1-189": 0.7440826296806335,
        "codebertscore_f3-189": 0.7206295728683472,
        "codebertscore_f1-134": 0.7282262444496155,
        "codebertscore_f3-134": 0.7136504054069519,
        "codebertscore_f1-9": 0.6956474184989929,
        "codebertscore_f3-9": 0.6372519731521606,
        "codebertscore_f1-8": 0.4825201630592346,
        "codebertscore_f3-8": 0.43562012910842896,
        "codebertscore_f1-28": 0.683106541633606,
        "codebertscore_f3-28": 0.6820734143257141,
        "codebertscore_f1-70": 0.7048085331916809,
        "codebertscore_f3-70": 0.6966644525527954,
        "codebertscore_f1-74": 0.654937744140625,
        "codebertscore_f3-74": 0.6445562243461609,
        "codebertscore_f1-161": 0.7889941930770874,
        "codebertscore_f3-161": 0.786547064781189,
        "codebertscore_f1-195": 0.7851895093917847,
        "codebertscore_f3-195": 0.8073786497116089,
        "codebertscore_f1-181": 0.5339621901512146,
        "codebertscore_f3-181": 0.5017355680465698,
        "codebertscore_f1-61": 0.7351654171943665,
        "codebertscore_f3-61": 0.7273508906364441,
        "codebertscore_s_f1-36": 0.7480515241622925,
        "codebertscore_s_f3-36": 0.7307906150817871,
        "codebertscore_s_f1-7": 0.7345858216285706,
        "codebertscore_s_f3-7": 0.7254046201705933,
        "codebertscore_s_f1-88": 0.7388265132904053,
        "codebertscore_s_f3-88": 0.7426106333732605,
        "codebertscore_s_f1-77": 0.5366648435592651,
        "codebertscore_s_f3-77": 0.5169149041175842,
        "codebertscore_s_f1-72": 0.7508466839790344,
        "codebertscore_s_f3-72": 0.7845151424407959,
        "codebertscore_s_f1-43": 0.538966715335846,
        "codebertscore_s_f3-43": 0.5216062664985657,
        "codebertscore_s_f1-34": 0.5682344436645508,
        "codebertscore_s_f3-34": 0.5422483682632446,
        "codebertscore_s_f1-173": 0.7541435360908508,
        "codebertscore_s_f3-173": 0.7569683790206909,
        "codebertscore_s_f1-27": 0.8298829793930054,
        "codebertscore_s_f3-27": 0.8119560480117798,
        "codebertscore_s_f1-189": 0.7493075132369995,
        "codebertscore_s_f3-189": 0.7303013205528259,
        "codebertscore_s_f1-134": 0.7432645559310913,
        "codebertscore_s_f3-134": 0.7333797216415405,
        "codebertscore_s_f1-9": 0.7368861436843872,
        "codebertscore_s_f3-9": 0.68210369348526,
        "codebertscore_s_f1-8": 0.6048159599304199,
        "codebertscore_s_f3-8": 0.5466796159744263,
        "codebertscore_s_f1-28": 0.7048907279968262,
        "codebertscore_s_f3-28": 0.7111748456954956,
        "codebertscore_s_f1-70": 0.7264305949211121,
        "codebertscore_s_f3-70": 0.7260404825210571,
        "codebertscore_s_f1-74": 0.6869585514068604,
        "codebertscore_s_f3-74": 0.6807231307029724,
        "codebertscore_s_f1-161": 0.7908856868743896,
        "codebertscore_s_f3-161": 0.7867356538772583,
        "codebertscore_s_f1-195": 0.7849056124687195,
        "codebertscore_s_f3-195": 0.8043767213821411,
        "codebertscore_s_f1-181": 0.5845382809638977,
        "codebertscore_s_f3-181": 0.5572497248649597,
        "codebertscore_s_f1-61": 0.7454922199249268,
        "codebertscore_s_f3-61": 0.7413803339004517,
        "gpt35_nsnr-36": 3,
        "raw_gpt35_nsnr-36": "3",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-88": 4,
        "raw_gpt35_nsnr-88": "4",
        "gpt35_nsnr-77": 0,
        "raw_gpt35_nsnr-77": "0",
        "gpt35_nsnr-72": 4,
        "raw_gpt35_nsnr-72": "4",
        "gpt35_nsnr-43": 0,
        "raw_gpt35_nsnr-43": "0",
        "gpt35_nsnr-34": 4,
        "raw_gpt35_nsnr-34": "4",
        "gpt35_nsnr-173": 3,
        "raw_gpt35_nsnr-173": "3",
        "gpt35_nsnr-27": 4,
        "raw_gpt35_nsnr-27": "4",
        "gpt35_nsnr-189": 4,
        "raw_gpt35_nsnr-189": "4",
        "gpt35_nsnr-134": 3,
        "raw_gpt35_nsnr-134": "3",
        "gpt35_nsnr-9": 3,
        "raw_gpt35_nsnr-9": "3",
        "gpt35_nsnr-8": 0,
        "raw_gpt35_nsnr-8": "0",
        "gpt35_nsnr-28": 3,
        "raw_gpt35_nsnr-28": "3",
        "gpt35_nsnr-70": 3,
        "raw_gpt35_nsnr-70": "3",
        "gpt35_nsnr-74": 3,
        "raw_gpt35_nsnr-74": "3",
        "gpt35_nsnr-161": 4,
        "raw_gpt35_nsnr-161": "4",
        "gpt35_nsnr-195": 4,
        "raw_gpt35_nsnr-195": "4",
        "gpt35_nsnr-181": 3,
        "raw_gpt35_nsnr-181": "3",
        "gpt35_nsnr-61": 3,
        "raw_gpt35_nsnr-61": "3",
        "gpt35_nswr-36": 3,
        "raw_gpt35_nswr-36": "3",
        "gpt35_nswr-7": 2,
        "raw_gpt35_nswr-7": "2",
        "gpt35_nswr-88": 3,
        "raw_gpt35_nswr-88": "3",
        "gpt35_nswr-77": 4,
        "raw_gpt35_nswr-77": "4",
        "gpt35_nswr-72": 3,
        "raw_gpt35_nswr-72": "3",
        "gpt35_nswr-43": 4,
        "raw_gpt35_nswr-43": "4",
        "gpt35_nswr-34": 4,
        "raw_gpt35_nswr-34": "4",
        "gpt35_nswr-173": 2,
        "raw_gpt35_nswr-173": "2",
        "gpt35_nswr-27": 3,
        "raw_gpt35_nswr-27": "3",
        "gpt35_nswr-189": 2,
        "raw_gpt35_nswr-189": "2",
        "gpt35_nswr-134": 2,
        "raw_gpt35_nswr-134": "2",
        "gpt35_nswr-9": 0,
        "raw_gpt35_nswr-9": "0",
        "gpt35_nswr-8": 0,
        "raw_gpt35_nswr-8": "0",
        "gpt35_nswr-28": 1,
        "raw_gpt35_nswr-28": "1",
        "gpt35_nswr-70": 1,
        "raw_gpt35_nswr-70": "1",
        "gpt35_nswr-74": 2,
        "raw_gpt35_nswr-74": "2",
        "gpt35_nswr-161": 3,
        "raw_gpt35_nswr-161": "3",
        "gpt35_nswr-195": 3,
        "raw_gpt35_nswr-195": "3",
        "gpt35_nswr-181": 2,
        "raw_gpt35_nswr-181": "2",
        "gpt35_nswr-61": 2,
        "raw_gpt35_nswr-61": "2"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given two positive integers n and m, and your task is to compute the\n    // average of the integers from n through m (including n and m). \n    // Round the answer to the nearest integer and convert that to binary.\n    // If n is greater than m, return -1.\n    // Example:\n    // rounded_avg(1, 5) => \"0b11\"\n    // rounded_avg(7, 5) => -1\n    // rounded_avg(10, 20) => \"0b1111\"\n    // rounded_avg(20, 33) => \"0b11010\"\n    public static Union_String_int roundedAvg(int n, int m) {\n",
        "snippet": [
            "        if (n > m) {\n            return -1;\n        }\n        return Integer.toBinaryString((int) Math.round((double) (m + n) / 2));\n    }\n}"
        ],
        "simplified": "You are given two positive integers n and m, and your task is to compute the average of the integers from n through m (including n and m). Round the answer to the nearest integer and convert that to binary. If n is greater than m, return -1.",
        "task_id": "103",
        "168": "//return new Union_String_int();\n        if (n > m) return new Union_String_int(new Union_String_int.L_int(-1));\n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        double avg = (double) sum / (m - n + 1);\n        String out = \"0b\" + Integer.toBinaryString((int) Math.round(avg));\n        return new Union_String_int(new Union_String_int.L_String(out));",
        "grade-168": {
            "execution": 0
        },
        "30": "if (n > m) {\n            return new Union_String_int(\"\", -1);\n        }\n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        double avg = (double) sum / (m - n + 1);\n        int rounded = (int) Math.round(avg);\n        String binary = String.format(\"%10s\", Integer.toBinaryString(rounded)).replace(' ', '0');\n        return new Union_String_int(binary, -1);",
        "grade-30": {
            "execution": 0
        },
        "6": "if (n > m) {\n            return new Union_String_int(new Variant_int(-1));\n        }\n        double sum = 0;\n        int avg = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        avg = (int) Math.round(sum / (m - n + 1));\n        return new Union_String_int(new Variant_String(\"0b\" + Integer.toBinaryString(avg)));",
        "grade-6": {
            "execution": 0
        },
        "195": "if (n > m) {\n            return new Union_String_int(2);\n        }\n        double x = (double) (n + m) / 2;\n        String y = Integer.toBinaryString((int) Math.round(x));\n        return new Union_String_int(1, y);",
        "grade-195": {
            "execution": 0
        },
        "72": "if (n > m) {\n            return new Union_String_int(-1);\n        }\n        else {\n            int avg = (n + m) / 2;\n            String binary = Integer.toBinaryString(avg);\n            return new Union_String_int(\"0b\" + binary);\n        }",
        "grade-72": {
            "execution": 0
        },
        "64": "if (n > m) {\n            return new Union_String_int(\n                (int)0,\n                new Union_String_int(\n                    (int)0,\n                    new Union_String_int(\n                        (int)0,\n                        new Union_String_int(\n                            (int)0,\n                            new Union_String_int(\n                                (int)0,\n                                new Union_String_int(\n                                    (int)0,\n                                    new Union_String_int(\n                                        (int)0,\n                                        new Union_String_int(\n                                            (int)0,\n                                            new Union_String_int(\n                                                (int)0,\n                                                new Union_String_int(\n                                                    (int)0,\n                                                    new Union_String_int(\n                                                        (int)0,\n                                                        new Union_String_int(\n                                                            (int)0,\n                                                            new Union_String_int(\n                                                                (int)0,\n                                                                new Union_String_int(\n                                                                    (int)0,\n                                                                    new Union_String_int(\n                                                                        (int)0,\n                                                                        new Union_String_int(\n                                                                            (int)0,\n                                                                            new Union_String_int(\n                                                                                (int)0,\n                                                                                new Union_String_int(\n                                                                                    (int)0,\n                                                                                    new Union_String_int(\n                                                                                        (int)0,\n                                                                                        new Union_String_int(\n                                                                                            (int)0,\n                                                                                            new Union_String_int(\n                                                                                                (int)0,\n                                                                                                new Union_String_int(\n                                                                                                    (int)0,\n                                                                                                    new Union_String_int(\n                                                                                                        (int)0,\n                                                                                                        new Union_String_int(",
        "grade-64": {
            "execution": 0
        },
        "59": "if (n > m) return new Union_String_int(new Union_Void_int(), true);\n        float sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        float avg = sum / (m - n + 1);\n        int rounded = Math.round(avg);\n        int bin = Integer.parseInt(Integer.toBinaryString(rounded));\n        return new Union_String_int(new Union_Void_int(), false, \"0b\" + bin);",
        "grade-59": {
            "execution": 0
        },
        "37": "if (n > m) {\n            return new Union_String_int(\"\", -1);\n        }\n        BigInteger sum = BigInteger.ZERO;\n        BigInteger count = BigInteger.ZERO;\n        for (int i = n; i <= m; i++) {\n            sum = sum.add(BigInteger.valueOf(i));\n            count = count.add(BigInteger.ONE);\n        }\n        BigInteger avg = sum.divide(count);\n        String binary = \"0b\" + avg.toString(2);\n        return new Union_String_int(binary, 0);",
        "grade-37": {
            "execution": 0
        },
        "194": "if (n > m) {\n            return new Union_String_int(2, -1);\n        } else {\n            int sum = 0;\n            for (int i = n; i <= m; i++) {\n                sum += i;\n            }\n            String s = Integer.toBinaryString(Math.round((float) sum / (m - n + 1)));\n            return new Union_String_int(1, s);\n        }",
        "grade-194": {
            "execution": 0
        },
        "27": "if (n > m) {\n            return new Union_String_int(1, -1);\n        }\n        double sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        int avg = (int)Math.round(sum / (m - n + 1));\n        return new Union_String_int(0, \"0b\" + Integer.toBinaryString(avg));",
        "grade-27": {
            "execution": 0
        },
        "178": "// Your code here\n        return null;",
        "grade-178": {
            "execution": 0
        },
        "142": "if (n > m) {\n            return new Union_String_int(null, -1);\n        } else {\n            BigInteger sum = BigInteger.ZERO;\n            BigInteger count = BigInteger.ZERO;\n            for (int i = n; i <= m; i++) {\n                sum = sum.add(BigInteger.valueOf(i));\n                count = count.add(BigInteger.ONE);\n            }\n            BigInteger avg = sum.divide(count);\n            String avgBin = \"0b\" + avg.toString(2);\n            return new Union_String_int(avgBin, null);\n        }",
        "grade-142": {
            "execution": 0
        },
        "23": "return new Union_String_int();",
        "grade-23": {
            "execution": 0
        },
        "154": "if (n > m) return new Union_String_int(new TYPE_String(), \"-1\");\n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        int avg = (int) Math.round((double) sum / (m - n + 1));\n        return new Union_String_int(new TYPE_String(), \"0b\" + Integer.toBinaryString(avg));",
        "grade-154": {
            "execution": 0
        },
        "111": "if (n > m) {\n            return new Union_String_int(true, -1);\n        }\n        int average = (int) Math.round((n + m) / 2.0);\n        String binary = Integer.toBinaryString(average);\n        return new Union_String_int(false, \"0b\" + binary);",
        "grade-111": {
            "execution": 0
        },
        "8": "// IMPLEMENT ME\n        return null;",
        "grade-8": {
            "execution": 0
        },
        "7": "if (n > m) {\n            return new Union_String_int(new Variant1<>(-1));\n        } else {\n            int avg = (n + m) / 2;\n            StringBuilder result = new StringBuilder();\n            while (avg != 0) {\n                int rem = avg % 2;\n                result.append(rem);\n                avg = avg / 2;\n            }\n            result.reverse();\n            return new Union_String_int(new Variant1<>(\"0b\" + result.toString()));\n        }",
        "grade-7": {
            "execution": 0
        },
        "24": "if (n > m) {\n            return new Union_String_int(true, -1);\n        }\n        int total = 0;\n        for (int i = n; i <= m; i++) {\n            total += i;\n        }\n        int average = total / (m - n + 1);\n        String averageBinary = Integer.toBinaryString(average);\n        return new Union_String_int(false, \"0b\" + averageBinary);",
        "grade-24": {
            "execution": 0
        },
        "57": "if (n > m) return new Union_String_int(-1);\n      double avg = Math.round((double)(n + m) / 2);\n      return new Union_String_int(Integer.toBinaryString((int)avg));",
        "grade-57": {
            "execution": 0
        },
        "61": "return m >= n ? new Union_String_int(Integer.toBinaryString(Math.round((n + m) / 2))) : new Union_String_int(-1);",
        "grade-61": {
            "execution": 0
        },
        "bleu-168": 0.19913334805217223,
        "bleu-30": 0.18306743894821131,
        "bleu-6": 0.22810587551480002,
        "bleu-195": 0.4379330092538739,
        "bleu-72": 0.3023784352944752,
        "bleu-64": 0.05172174408763173,
        "bleu-59": 0.1473826984576158,
        "bleu-37": 0.10661991073981564,
        "bleu-194": 0.2281135497433162,
        "bleu-27": 0.24451050641205732,
        "bleu-178": 0.0011747440712973887,
        "bleu-142": 0.10380887900106703,
        "bleu-23": 0.0005653044421149885,
        "bleu-154": 0.22653095695622968,
        "bleu-111": 0.3439475038351743,
        "bleu-8": 0.0006717925108227308,
        "bleu-7": 0.13084718030908335,
        "bleu-24": 0.18160889524643728,
        "bleu-57": 0.47802189231910236,
        "bleu-61": 0.3476990488681833,
        "codebleu-168": 0.6560557058173264,
        "codebleu-30": 0.657144802876613,
        "codebleu-6": 0.6573365933124499,
        "codebleu-195": 0.6922623093307378,
        "codebleu-72": 0.6470331256620886,
        "codebleu-64": 0.4541816887635484,
        "codebleu-59": 0.5984717917305147,
        "codebleu-37": 0.6251591886859682,
        "codebleu-194": 0.6847567214770118,
        "codebleu-27": 0.659874752386996,
        "codebleu-178": 0.0668076837602912,
        "codebleu-142": 0.6391043654470915,
        "codebleu-23": 0.06576930910301343,
        "codebleu-154": 0.6370590909775627,
        "codebleu-111": 0.6470768566540321,
        "codebleu-8": 0.05549479369399123,
        "codebleu-7": 0.6738552352915826,
        "codebleu-24": 0.6179108113750582,
        "codebleu-57": 0.7175589822353808,
        "codebleu-61": 0.4826846635397436,
        "chrf-168": 0.47300496462213376,
        "chrf-30": 0.49863582118472854,
        "chrf-6": 0.5278234029273862,
        "chrf-195": 0.6615288701887494,
        "chrf-72": 0.45804665762550534,
        "chrf-64": 0.12258135914531292,
        "chrf-59": 0.4050587047170836,
        "chrf-37": 0.3082780755942167,
        "chrf-194": 0.5191778631547173,
        "chrf-27": 0.5651016730849469,
        "chrf-178": 0.09470876035154972,
        "chrf-142": 0.29226820259820174,
        "chrf-23": 0.13678616357041917,
        "chrf-154": 0.5329836009540575,
        "chrf-111": 0.5540708859621447,
        "chrf-8": 0.06675476656684916,
        "chrf-7": 0.28844045390135914,
        "chrf-24": 0.40023192510415356,
        "chrf-57": 0.6375645551112253,
        "chrf-61": 0.48758338719553507,
        "rougel-168": 0.3866666666666667,
        "rougel-30": 0.32704402515723274,
        "rougel-6": 0.411764705882353,
        "rougel-195": 0.5454545454545454,
        "rougel-72": 0.5106382978723404,
        "rougel-64": 0.16101694915254236,
        "rougel-59": 0.31506849315068497,
        "rougel-37": 0.339622641509434,
        "rougel-194": 0.5039370078740157,
        "rougel-27": 0.421875,
        "rougel-178": 0.0816326530612245,
        "rougel-142": 0.3435582822085889,
        "rougel-23": 0.1702127659574468,
        "rougel-154": 0.4087591240875913,
        "rougel-111": 0.5142857142857142,
        "rougel-8": 0.08333333333333334,
        "rougel-7": 0.375,
        "rougel-24": 0.3622047244094488,
        "rougel-57": 0.5494505494505494,
        "rougel-61": 0.48717948717948717,
        "meteor-168": 0.6359600829865901,
        "meteor-30": 0.5114097366506148,
        "meteor-6": 0.5367597882518307,
        "meteor-195": 0.7303174891499673,
        "meteor-72": 0.5806917135407272,
        "meteor-64": 0.21622856132492488,
        "meteor-59": 0.4777425389809926,
        "meteor-37": 0.5032147565087333,
        "meteor-194": 0.6745123626373627,
        "meteor-27": 0.619038144341788,
        "meteor-178": 0.039787798408488055,
        "meteor-142": 0.4991152472907394,
        "meteor-23": 0.08416666666666667,
        "meteor-154": 0.524528639084979,
        "meteor-111": 0.6616852085239231,
        "meteor-8": 0.0398936170212766,
        "meteor-7": 0.5192067508893073,
        "meteor-24": 0.44685355460865667,
        "meteor-57": 0.6704630838669412,
        "meteor-61": 0.6450602079912425,
        "ruby-168": 0.23853211009174313,
        "ruby-30": 0.2033898305084746,
        "ruby-6": 0.26315789473684215,
        "ruby-195": 0.4137931034482759,
        "ruby-72": 0.339622641509434,
        "ruby-64": 0.09743589743589742,
        "ruby-59": 0.18095238095238098,
        "ruby-37": 0.22033898305084743,
        "ruby-194": 0.32558139534883723,
        "ruby-27": 0.28735632183908044,
        "ruby-178": 0.04878048780487809,
        "ruby-142": 0.2213114754098361,
        "ruby-23": 0.09756097560975607,
        "ruby-154": 0.25,
        "ruby-111": 0.3125,
        "ruby-8": 0.04878048780487809,
        "ruby-7": 0.24271844660194175,
        "ruby-24": 0.2325581395348837,
        "ruby-57": 0.31999999999999995,
        "ruby-61": 0.29268292682926833,
        "codebertscore_f1-168": 0.7685095071792603,
        "codebertscore_f3-168": 0.8198355436325073,
        "codebertscore_f1-30": 0.7771461009979248,
        "codebertscore_f3-30": 0.8286842107772827,
        "codebertscore_f1-6": 0.7739606499671936,
        "codebertscore_f3-6": 0.818564236164093,
        "codebertscore_f1-195": 0.861122727394104,
        "codebertscore_f3-195": 0.8895189166069031,
        "codebertscore_f1-72": 0.8139175176620483,
        "codebertscore_f3-72": 0.8457491993904114,
        "codebertscore_f1-64": 0.6442399024963379,
        "codebertscore_f3-64": 0.6886473298072815,
        "codebertscore_f1-59": 0.7670139074325562,
        "codebertscore_f3-59": 0.8157745003700256,
        "codebertscore_f1-37": 0.7217546105384827,
        "codebertscore_f3-37": 0.7584913372993469,
        "codebertscore_f1-194": 0.8019091486930847,
        "codebertscore_f3-194": 0.846041202545166,
        "codebertscore_f1-27": 0.7980655431747437,
        "codebertscore_f3-27": 0.8409697413444519,
        "codebertscore_f1-178": 0.6241327524185181,
        "codebertscore_f3-178": 0.6026361584663391,
        "codebertscore_f1-142": 0.6981620788574219,
        "codebertscore_f3-142": 0.7414165139198303,
        "codebertscore_f1-23": 0.6455464959144592,
        "codebertscore_f3-23": 0.6273061037063599,
        "codebertscore_f1-154": 0.7976664304733276,
        "codebertscore_f3-154": 0.8488480448722839,
        "codebertscore_f1-111": 0.8500795960426331,
        "codebertscore_f3-111": 0.8960123658180237,
        "codebertscore_f1-8": 0.6271578669548035,
        "codebertscore_f3-8": 0.6052522659301758,
        "codebertscore_f1-7": 0.7218608260154724,
        "codebertscore_f3-7": 0.7627941966056824,
        "codebertscore_f1-24": 0.7746796011924744,
        "codebertscore_f3-24": 0.814929723739624,
        "codebertscore_f1-57": 0.867996335029602,
        "codebertscore_f3-57": 0.8982700705528259,
        "codebertscore_f1-61": 0.8399738073348999,
        "codebertscore_f3-61": 0.8532091975212097,
        "codebertscore_s_f1-168": 0.7827604413032532,
        "codebertscore_s_f3-168": 0.832524299621582,
        "codebertscore_s_f1-30": 0.8087212443351746,
        "codebertscore_s_f3-30": 0.860749363899231,
        "codebertscore_s_f1-6": 0.7999804615974426,
        "codebertscore_s_f3-6": 0.8524251580238342,
        "codebertscore_s_f1-195": 0.8759588003158569,
        "codebertscore_s_f3-195": 0.9056805968284607,
        "codebertscore_s_f1-72": 0.8392723798751831,
        "codebertscore_s_f3-72": 0.8701913952827454,
        "codebertscore_s_f1-64": 0.7049644589424133,
        "codebertscore_s_f3-64": 0.7342643737792969,
        "codebertscore_s_f1-59": 0.7733936905860901,
        "codebertscore_s_f3-59": 0.8192571997642517,
        "codebertscore_s_f1-37": 0.749279260635376,
        "codebertscore_s_f3-37": 0.7906078100204468,
        "codebertscore_s_f1-194": 0.8165417909622192,
        "codebertscore_s_f3-194": 0.8627618551254272,
        "codebertscore_s_f1-27": 0.8155620694160461,
        "codebertscore_s_f3-27": 0.8613147139549255,
        "codebertscore_s_f1-178": 0.6259849667549133,
        "codebertscore_s_f3-178": 0.5999425053596497,
        "codebertscore_s_f1-142": 0.7446595430374146,
        "codebertscore_s_f3-142": 0.785591721534729,
        "codebertscore_s_f1-23": 0.6808837056159973,
        "codebertscore_s_f3-23": 0.6492834091186523,
        "codebertscore_s_f1-154": 0.8103106617927551,
        "codebertscore_s_f3-154": 0.8589881658554077,
        "codebertscore_s_f1-111": 0.8667142391204834,
        "codebertscore_s_f3-111": 0.9132336974143982,
        "codebertscore_s_f1-8": 0.6213801503181458,
        "codebertscore_s_f3-8": 0.6020622849464417,
        "codebertscore_s_f1-7": 0.7621887922286987,
        "codebertscore_s_f3-7": 0.8016106486320496,
        "codebertscore_s_f1-24": 0.794345498085022,
        "codebertscore_s_f3-24": 0.8399527668952942,
        "codebertscore_s_f1-57": 0.8990275263786316,
        "codebertscore_s_f3-57": 0.9291797280311584,
        "codebertscore_s_f1-61": 0.8621488213539124,
        "codebertscore_s_f3-61": 0.8747807741165161,
        "gpt35_nsnr-168": 3,
        "raw_gpt35_nsnr-168": "3",
        "gpt35_nsnr-30": 4,
        "raw_gpt35_nsnr-30": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-195": 4,
        "raw_gpt35_nsnr-195": "4",
        "gpt35_nsnr-72": 4,
        "raw_gpt35_nsnr-72": "4",
        "gpt35_nsnr-64": 1,
        "raw_gpt35_nsnr-64": "1",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nsnr-37": 4,
        "raw_gpt35_nsnr-37": "4",
        "gpt35_nsnr-194": 4,
        "raw_gpt35_nsnr-194": "4",
        "gpt35_nsnr-27": 4,
        "raw_gpt35_nsnr-27": "4",
        "gpt35_nsnr-178": 0,
        "raw_gpt35_nsnr-178": "0",
        "gpt35_nsnr-142": 4,
        "raw_gpt35_nsnr-142": "4",
        "gpt35_nsnr-23": 2,
        "raw_gpt35_nsnr-23": "2",
        "gpt35_nsnr-154": 4,
        "raw_gpt35_nsnr-154": "4",
        "gpt35_nsnr-111": 4,
        "raw_gpt35_nsnr-111": "4",
        "gpt35_nsnr-8": 0,
        "raw_gpt35_nsnr-8": "0",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-24": 4,
        "raw_gpt35_nsnr-24": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-61": 4,
        "raw_gpt35_nsnr-61": "4",
        "gpt35_nswr-168": 3,
        "raw_gpt35_nswr-168": "3",
        "gpt35_nswr-30": 3,
        "raw_gpt35_nswr-30": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-195": 3,
        "raw_gpt35_nswr-195": "3",
        "gpt35_nswr-72": 4,
        "raw_gpt35_nswr-72": "4",
        "gpt35_nswr-64": 0,
        "raw_gpt35_nswr-64": "0",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3",
        "gpt35_nswr-37": 3,
        "raw_gpt35_nswr-37": "3",
        "gpt35_nswr-194": 3,
        "raw_gpt35_nswr-194": "3",
        "gpt35_nswr-27": 3,
        "raw_gpt35_nswr-27": "3",
        "gpt35_nswr-178": 2,
        "raw_gpt35_nswr-178": "2",
        "gpt35_nswr-142": 3,
        "raw_gpt35_nswr-142": "3",
        "gpt35_nswr-23": 0,
        "raw_gpt35_nswr-23": "0",
        "gpt35_nswr-154": 3,
        "raw_gpt35_nswr-154": "3",
        "gpt35_nswr-111": 4,
        "raw_gpt35_nswr-111": "4",
        "gpt35_nswr-8": 0,
        "raw_gpt35_nswr-8": "0",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-24": 3,
        "raw_gpt35_nswr-24": "3",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-61": 3,
        "raw_gpt35_nswr-61": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return True if all numbers in the list l are below threshold t.\n    // >>> below_threshold([1, 2, 4, 10], 100)\n    // True\n    // >>> below_threshold([1, 20, 4, 10], 5)\n    // False\n    public static boolean belowThreshold(ArrayList<Integer> l, int t) {\n",
        "snippet": [
            "        for (int e : l) {\n            if (e >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"
        ],
        "simplified": "Return True if all numbers in the list l are below threshold t.",
        "task_id": "52",
        "150": "for (int i = 0; i < l.size(); i++) {\n        if (l.get(i) >= t) return false;\n      }\n      return true;",
        "grade-150": {
            "execution": 1
        },
        "14": "return l.stream().allMatch( x -> x < t);",
        "grade-14": {
            "execution": 1
        },
        "3": "return l.stream().allMatch(x -> x<t);",
        "grade-3": {
            "execution": 1
        },
        "178": "// FIXME\n        return true;",
        "grade-178": {
            "execution": 0
        },
        "46": "for (int i = 0; i < l.size(); i++) {\n\t    if (l.get(i) >= t) {\n\t\treturn false;\n\t    }\n\t}\n\treturn true;",
        "grade-46": {
            "execution": 1
        },
        "41": "boolean isLessThan = true;\n        for (int number : l) {\n            if (number >= t) {\n                isLessThan = false;\n            }\n        }\n        return isLessThan;",
        "grade-41": {
            "execution": 1
        },
        "34": "return l.stream().allMatch(x -> x < t);",
        "grade-34": {
            "execution": 1
        },
        "18": "throw new UnsupportedOperationException(\"Replace this line with your code.\");",
        "grade-18": {
            "execution": 0
        },
        "13": "boolean below_threshold = true;\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) > t) {\n                below_threshold = false;\n            }\n        }\n        return below_threshold;",
        "grade-13": {
            "execution": 0
        },
        "161": "// Write your code here.\n        return l.stream().allMatch(x -> x < t);",
        "grade-161": {
            "execution": 1
        },
        "132": "// Fill in your code here\n        return l.stream().allMatch(x -> x < t);",
        "grade-132": {
            "execution": 1
        },
        "11": "return l.stream().allMatch(number -> number < t);",
        "grade-11": {
            "execution": 1
        },
        "140": "return l.stream().reduce(0, (x, y) -> x + y) < t;",
        "grade-140": {
            "execution": 0
        },
        "99": "boolean res = true;\n        for (int e : l) {\n            if (e >= t) {\n                res = false;\n                break;\n            }\n        }\n        return res;",
        "grade-99": {
            "execution": 1
        },
        "4": "for (int i : l) {\n            if (i >= t) {\n                return false;\n            }\n        }\n        return true;",
        "grade-4": {
            "execution": 1
        },
        "33": "// TODO: Fill in this method.\n        return l.stream().allMatch(x -> x < t);",
        "grade-33": {
            "execution": 1
        },
        "38": "// YOUR CODE HERE\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) > t) {\n                return false;\n            }\n        }\n        return true;",
        "grade-38": {
            "execution": 0
        },
        "124": "int flag = 0;\n      for(int i = 0; i < l.size(); i++) {\n        if(l.get(i) >= t) {\n          flag = 1;\n          break;\n        }\n      }\n      if(flag == 1)\n        return false;\n      else\n        return true;",
        "grade-124": {
            "execution": 1
        },
        "143": "return l.stream().mapToInt(x -> x).allMatch(x -> x < t);",
        "grade-143": {
            "execution": 1
        },
        "135": "if (l.isEmpty()) return true;\n        int head = l.get(0);\n        if (head > t) return false;\n        return belowThreshold(new ArrayList<Integer>(l.subList(1, l.size())), t);",
        "grade-135": {
            "execution": 0
        },
        "bleu-150": 0.26391126429550105,
        "bleu-14": 0.040113004646191074,
        "bleu-3": 0.040113004646191074,
        "bleu-178": 0.010778452582485743,
        "bleu-46": 0.3878146593316464,
        "bleu-41": 0.3678041711548479,
        "bleu-34": 0.040113004646191074,
        "bleu-18": 0.017726282342575568,
        "bleu-13": 0.18940208900425673,
        "bleu-161": 0.04215420561319033,
        "bleu-132": 0.04215420561319033,
        "bleu-11": 0.040113004646191074,
        "bleu-140": 0.025065040621246787,
        "bleu-99": 0.5878191511877687,
        "bleu-4": 0.7030293139922857,
        "bleu-33": 0.041505477314112894,
        "bleu-38": 0.31231140439368094,
        "bleu-124": 0.16418824157367445,
        "bleu-143": 0.03889818545474848,
        "bleu-135": 0.053516940878981734,
        "codebleu-150": 0.45924495924495917,
        "codebleu-14": 0.24426151668052826,
        "codebleu-3": 0.24426151668052826,
        "codebleu-178": 0.09429119452593719,
        "codebleu-46": 0.5032175032175032,
        "codebleu-41": 0.6377664736681529,
        "codebleu-34": 0.24426151668052826,
        "codebleu-18": 0.10936286078146362,
        "codebleu-13": 0.46932646932646926,
        "codebleu-161": 0.28185328185328185,
        "codebleu-132": 0.29987129987129985,
        "codebleu-11": 0.24426151668052826,
        "codebleu-140": 0.29800413030712475,
        "codebleu-99": 0.6650619455239336,
        "codebleu-4": 0.7542618070385431,
        "codebleu-33": 0.3038395538395538,
        "codebleu-38": 0.48916773916773915,
        "codebleu-124": 0.5032175032175032,
        "codebleu-143": 0.2960638910441248,
        "codebleu-135": 0.38138138138138133,
        "chrf-150": 0.5851382370270611,
        "chrf-14": 0.15089047791535726,
        "chrf-3": 0.15089047791535726,
        "chrf-178": 0.21379804663294208,
        "chrf-46": 0.7038558459827904,
        "chrf-41": 0.4892626142249824,
        "chrf-34": 0.15089047791535726,
        "chrf-18": 0.11163267866764093,
        "chrf-13": 0.40404597075469245,
        "chrf-161": 0.18252952634036407,
        "chrf-132": 0.17914199016496768,
        "chrf-11": 0.17259582659449696,
        "chrf-140": 0.14673642704180093,
        "chrf-99": 0.6740376248132282,
        "chrf-4": 0.8061638519593282,
        "chrf-33": 0.17309988606596427,
        "chrf-38": 0.6365380850230076,
        "chrf-124": 0.5001729664786098,
        "chrf-143": 0.15518975983656969,
        "chrf-135": 0.3553594152692749,
        "rougel-150": 0.5846153846153846,
        "rougel-14": 0.3181818181818182,
        "rougel-3": 0.3181818181818182,
        "rougel-178": 0.1875,
        "rougel-46": 0.6268656716417911,
        "rougel-41": 0.6451612903225806,
        "rougel-34": 0.3181818181818182,
        "rougel-18": 0.13953488372093026,
        "rougel-13": 0.5,
        "rougel-161": 0.27450980392156865,
        "rougel-132": 0.27450980392156865,
        "rougel-11": 0.3181818181818182,
        "rougel-140": 0.23529411764705882,
        "rougel-99": 0.7586206896551724,
        "rougel-4": 0.8799999999999999,
        "rougel-33": 0.3018867924528302,
        "rougel-38": 0.5633802816901408,
        "rougel-124": 0.44186046511627913,
        "rougel-143": 0.2592592592592593,
        "rougel-135": 0.32558139534883723,
        "meteor-150": 0.6083021318478382,
        "meteor-14": 0.23172643543013915,
        "meteor-3": 0.23172643543013915,
        "meteor-178": 0.12268518518518519,
        "meteor-46": 0.7224077509791796,
        "meteor-41": 0.7357856722936088,
        "meteor-34": 0.23172643543013915,
        "meteor-18": 0.059760956175298814,
        "meteor-13": 0.5636160714285714,
        "meteor-161": 0.22546355879689214,
        "meteor-132": 0.22546355879689214,
        "meteor-11": 0.23172643543013915,
        "meteor-140": 0.17374517374517373,
        "meteor-99": 0.8387580482396919,
        "meteor-4": 0.8477080530463194,
        "meteor-33": 0.24348659003831422,
        "meteor-38": 0.6824665350010971,
        "meteor-124": 0.5841316118284048,
        "meteor-143": 0.24255725190839694,
        "meteor-135": 0.398264774659864,
        "ruby-150": 0.3846153846153846,
        "ruby-14": 0.11538461538461542,
        "ruby-3": 0.11538461538461542,
        "ruby-178": 0.11538461538461542,
        "ruby-46": 0.46341463414634143,
        "ruby-41": 0.5277777777777778,
        "ruby-34": 0.11538461538461542,
        "ruby-18": 0.07692307692307687,
        "ruby-13": 0.32608695652173914,
        "ruby-161": 0.0,
        "ruby-132": 0.0,
        "ruby-11": 0.11538461538461542,
        "ruby-140": 0.07692307692307687,
        "ruby-99": 0.625,
        "ruby-4": 0.8461538461538461,
        "ruby-33": 0.03703703703703709,
        "ruby-38": 0.37777777777777777,
        "ruby-124": 0.30000000000000004,
        "ruby-143": 0.0714285714285714,
        "ruby-135": 0.16666666666666663,
        "codebertscore_f1-150": 0.8690313696861267,
        "codebertscore_f3-150": 0.905888020992279,
        "codebertscore_f1-14": 0.7034730911254883,
        "codebertscore_f3-14": 0.7050832509994507,
        "codebertscore_f1-3": 0.6978457570075989,
        "codebertscore_f3-3": 0.6988847255706787,
        "codebertscore_f1-178": 0.6456904411315918,
        "codebertscore_f3-178": 0.6354289054870605,
        "codebertscore_f1-46": 0.8680550456047058,
        "codebertscore_f3-46": 0.9047046303749084,
        "codebertscore_f1-41": 0.7943344712257385,
        "codebertscore_f3-41": 0.8525017499923706,
        "codebertscore_f1-34": 0.7039481997489929,
        "codebertscore_f3-34": 0.7054006457328796,
        "codebertscore_f1-18": 0.6243583559989929,
        "codebertscore_f3-18": 0.6297449469566345,
        "codebertscore_f1-13": 0.7800991535186768,
        "codebertscore_f3-13": 0.8318630456924438,
        "codebertscore_f1-161": 0.6956593990325928,
        "codebertscore_f3-161": 0.7215830683708191,
        "codebertscore_f1-132": 0.6954812407493591,
        "codebertscore_f3-132": 0.7233608961105347,
        "codebertscore_f1-11": 0.6933905482292175,
        "codebertscore_f3-11": 0.6962485909461975,
        "codebertscore_f1-140": 0.6982985734939575,
        "codebertscore_f3-140": 0.7145178914070129,
        "codebertscore_f1-99": 0.8659168481826782,
        "codebertscore_f3-99": 0.8980633616447449,
        "codebertscore_f1-4": 0.9749091267585754,
        "codebertscore_f3-4": 0.9749090671539307,
        "codebertscore_f1-33": 0.7006929516792297,
        "codebertscore_f3-33": 0.7295182347297668,
        "codebertscore_f1-38": 0.8359044790267944,
        "codebertscore_f3-38": 0.8926794528961182,
        "codebertscore_f1-124": 0.8109012842178345,
        "codebertscore_f3-124": 0.8593953847885132,
        "codebertscore_f1-143": 0.7068713307380676,
        "codebertscore_f3-143": 0.7212426066398621,
        "codebertscore_f1-135": 0.7735903263092041,
        "codebertscore_f3-135": 0.8211395740509033,
        "codebertscore_s_f1-150": 0.8892948031425476,
        "codebertscore_s_f3-150": 0.9265801906585693,
        "codebertscore_s_f1-14": 0.7628418803215027,
        "codebertscore_s_f3-14": 0.7645623087882996,
        "codebertscore_s_f1-3": 0.7601903080940247,
        "codebertscore_s_f3-3": 0.7619531750679016,
        "codebertscore_s_f1-178": 0.6902266144752502,
        "codebertscore_s_f3-178": 0.6964952945709229,
        "codebertscore_s_f1-46": 0.8889608383178711,
        "codebertscore_s_f3-46": 0.925677478313446,
        "codebertscore_s_f1-41": 0.8220787644386292,
        "codebertscore_s_f3-41": 0.8809292316436768,
        "codebertscore_s_f1-34": 0.762779176235199,
        "codebertscore_s_f3-34": 0.765014111995697,
        "codebertscore_s_f1-18": 0.6057599186897278,
        "codebertscore_s_f3-18": 0.6118605136871338,
        "codebertscore_s_f1-13": 0.8125208020210266,
        "codebertscore_s_f3-13": 0.8648440837860107,
        "codebertscore_s_f1-161": 0.7324600219726562,
        "codebertscore_s_f3-161": 0.7707961797714233,
        "codebertscore_s_f1-132": 0.7277228236198425,
        "codebertscore_s_f3-132": 0.7705221176147461,
        "codebertscore_s_f1-11": 0.7517231702804565,
        "codebertscore_s_f3-11": 0.7555750608444214,
        "codebertscore_s_f1-140": 0.733902633190155,
        "codebertscore_s_f3-140": 0.7520694136619568,
        "codebertscore_s_f1-99": 0.8940116167068481,
        "codebertscore_s_f3-99": 0.9261692762374878,
        "codebertscore_s_f1-4": 0.9796311855316162,
        "codebertscore_s_f3-4": 0.9796311855316162,
        "codebertscore_s_f1-33": 0.7296924591064453,
        "codebertscore_s_f3-33": 0.7708637714385986,
        "codebertscore_s_f1-38": 0.8552359342575073,
        "codebertscore_s_f3-38": 0.9153842926025391,
        "codebertscore_s_f1-124": 0.8326464295387268,
        "codebertscore_s_f3-124": 0.8808443546295166,
        "codebertscore_s_f1-143": 0.74642014503479,
        "codebertscore_s_f3-143": 0.7632805705070496,
        "codebertscore_s_f1-135": 0.8061211109161377,
        "codebertscore_s_f3-135": 0.8544077277183533,
        "gpt35_nsnr-150": 4,
        "raw_gpt35_nsnr-150": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-3": 3,
        "raw_gpt35_nsnr-3": "3",
        "gpt35_nsnr-178": 2,
        "raw_gpt35_nsnr-178": "2",
        "gpt35_nsnr-46": 4,
        "raw_gpt35_nsnr-46": "4",
        "gpt35_nsnr-41": 3,
        "raw_gpt35_nsnr-41": "3",
        "gpt35_nsnr-34": 4,
        "raw_gpt35_nsnr-34": "4",
        "gpt35_nsnr-18": 0,
        "raw_gpt35_nsnr-18": "3 - The code snippet correctly defines the method signature for checking if all numbers in an ArrayList are below a given threshold. However, the method body is not implemented and instead throws an UnsupportedOperationException. With a proper implementation, the code should be able to pass all possible tests for the given problem.",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-161": 4,
        "raw_gpt35_nsnr-161": "4",
        "gpt35_nsnr-132": 4,
        "raw_gpt35_nsnr-132": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-140": 3,
        "raw_gpt35_nsnr-140": "3",
        "gpt35_nsnr-99": 4,
        "raw_gpt35_nsnr-99": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-33": 4,
        "raw_gpt35_nsnr-33": "4",
        "gpt35_nsnr-38": 4,
        "raw_gpt35_nsnr-38": "4",
        "gpt35_nsnr-124": 4,
        "raw_gpt35_nsnr-124": "4",
        "gpt35_nsnr-143": 4,
        "raw_gpt35_nsnr-143": "4",
        "gpt35_nsnr-135": 3,
        "raw_gpt35_nsnr-135": "3",
        "gpt35_nswr-150": 4,
        "raw_gpt35_nswr-150": "4",
        "gpt35_nswr-14": 4,
        "raw_gpt35_nswr-14": "4",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-178": 3,
        "raw_gpt35_nswr-178": "3",
        "gpt35_nswr-46": 4,
        "raw_gpt35_nswr-46": "4",
        "gpt35_nswr-41": 4,
        "raw_gpt35_nswr-41": "4",
        "gpt35_nswr-34": 4,
        "raw_gpt35_nswr-34": "4",
        "gpt35_nswr-18": 4,
        "raw_gpt35_nswr-18": "4",
        "gpt35_nswr-13": 4,
        "raw_gpt35_nswr-13": "4",
        "gpt35_nswr-161": 3,
        "raw_gpt35_nswr-161": "3",
        "gpt35_nswr-132": 3,
        "raw_gpt35_nswr-132": "3",
        "gpt35_nswr-11": 4,
        "raw_gpt35_nswr-11": "4",
        "gpt35_nswr-140": 3,
        "raw_gpt35_nswr-140": "3",
        "gpt35_nswr-99": 4,
        "raw_gpt35_nswr-99": "4",
        "gpt35_nswr-4": 4,
        "raw_gpt35_nswr-4": "4",
        "gpt35_nswr-33": 3,
        "raw_gpt35_nswr-33": "3",
        "gpt35_nswr-38": 4,
        "raw_gpt35_nswr-38": "4",
        "gpt35_nswr-124": 4,
        "raw_gpt35_nswr-124": "4",
        "gpt35_nswr-143": 3,
        "raw_gpt35_nswr-143": "3",
        "gpt35_nswr-135": 3,
        "raw_gpt35_nswr-135": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a string and returns True if the string\n    // length is a prime number or False otherwise\n    // Examples\n    // prime_length('Hello') == True\n    // prime_length('abcdcba') == True\n    // prime_length('kittens') == True\n    // prime_length('orange') == False\n    public static boolean primeLength(String string) {\n",
        "snippet": [
            "        int l = string.length();\n        if (l == 0 || l == 1) {\n            return false;\n        }\n        for (int i = 2; i < l; i++) {\n            if (l % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"
        ],
        "simplified": "Write a function that takes a string and returns True if the string length is a prime number or False otherwise",
        "task_id": "82",
        "33": "throw new UnsupportedOperationException(\"Delete this line and write your code here\");",
        "grade-33": {
            "execution": 0
        },
        "6": "int length = string.length();\n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;",
        "grade-6": {
            "execution": 0
        },
        "92": "// TODO write code here to make the test cases pass\n        return false;",
        "grade-92": {
            "execution": 0
        },
        "77": "return true;",
        "grade-77": {
            "execution": 0
        },
        "71": "// Write your code here\n        int len = string.length();\n        if (len == 2 || len == 3) {\n            return true;\n        }\n        if (len % 2 == 0 || len % 3 == 0) {\n            return false;\n        }\n        int i = 5;\n        int w = 2;\n        while (i * i <= len) {\n            if (len % i == 0) {\n                return false;\n            }\n            i += w;\n            w = 6 - w;\n        }\n        return true;",
        "grade-71": {
            "execution": 0
        },
        "43": "// First, we have to convert the string to a length number\n        int length = string.length();\n        // Now we can check if the length is a prime number\n        // You do that by dividing the length by a range of numbers\n        // If the length is evenly divisible by any number other than\n        // 1 and itself, then the length is not a prime number\n        // We can do this with a for loop\n        for (int i = 2; i < length; i++) {\n            // We need an if statement to check if the length is divisible\n            // by i\n            if (length % i == 0) {\n                // If length is divisible by i, then we return False\n                return false;\n            }\n        }\n        // If we reach this line, we know the length is a prime number\n        return true;",
        "grade-43": {
            "execution": 0
        },
        "31": "int length = string.length();\n        if (length == 1) {\n            return false;\n        } else if (length == 2) {\n            return true;\n        }\n        for (int i = 2; i < length; i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;",
        "grade-31": {
            "execution": 0
        },
        "26": "return 0 < 1;",
        "grade-26": {
            "execution": 0
        },
        "158": "int length = string.length();\n        for (int i = 2; i <= length / 2; i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;",
        "grade-158": {
            "execution": 0
        },
        "8": "return Arrays.stream(new int[]{2, 3, 5, 7, 11}).anyMatch(x -> x == string.length());",
        "grade-8": {
            "execution": 1
        },
        "7": "if (string.length() == 0) {\n            return false;\n        }\n        int count = 0;\n        for (int i = 1; i <= string.length(); i++) {\n            if (string.length() % i == 0) {\n                count++;\n            }\n        }\n        if (count == 2) {\n            return true;\n        }\n        return false;",
        "grade-7": {
            "execution": 1
        },
        "27": "throw new UnsupportedOperationException(\"Prime Length not implemented\");",
        "grade-27": {
            "execution": 0
        },
        "69": "int length = string.length();\n        for (int i = 2; i <= length / 2; i++) {\n            if (length % i == 0)\n                return false;\n        }\n        return true;",
        "grade-69": {
            "execution": 0
        },
        "74": "int num = string.length();\n        int count = 0;\n        for (int i = 2; i <= num; i++) {\n            if (num % i == 0) {\n                count++;\n            }\n        }\n        if (count == 1) {\n            return true;\n        } else {\n            return false;\n        }",
        "grade-74": {
            "execution": 1
        },
        "188": "boolean result = false;\n        if (string.length() == 2 || string.length() == 3 || string.length() == 5 || string.length() == 7 || string.length() == 11 || string.length() == 13 || string.length() == 17 || string.length() == 19 || string.length() == 23 || string.length() == 29 || string.length() == 31 || string.length() == 37 || string.length() == 41 || string.length() == 43 || string.length() == 47 || string.length() == 53 || string.length() == 59 || string.length() == 61 || string.length() == 67 || string.length() == 71 || string.length() == 73 || string.length() == 79 || string.length() == 83 || string.length() == 89 || string.length() == 97) {\n            result = true;\n        } else {\n            result = false;\n        }\n        return result;",
        "grade-188": {
            "execution": 1
        },
        "63": "return BigInteger.valueOf(string.length()).isProbablePrime(1);",
        "grade-63": {
            "execution": 1
        },
        "156": "int length = string.length();\n        return Problem.isPrime(length);",
        "grade-156": {
            "execution": 0
        },
        "70": "// Enter code here\n        return true;",
        "grade-70": {
            "execution": 0
        },
        "166": "return null;",
        "grade-166": {
            "execution": 0
        },
        "96": "if (string.length() <= 1) {\n            return false;\n        }\n        for (int i = 2; i < string.length(); i++) {\n            if (string.length() % i == 0) {\n                return false;\n            }\n        }\n        return true;",
        "grade-96": {
            "execution": 1
        },
        "bleu-33": 0.003902010602547117,
        "bleu-6": 0.5301613946415654,
        "bleu-92": 0.003987511956721895,
        "bleu-77": 2.0611536224385587e-09,
        "bleu-71": 0.3392207114253363,
        "bleu-43": 0.17077471317968723,
        "bleu-31": 0.6822782242391203,
        "bleu-26": 1.464152137997935e-06,
        "bleu-158": 0.5142464896184498,
        "bleu-8": 0.08727161875226513,
        "bleu-7": 0.4624153990820558,
        "bleu-27": 0.001898085626643965,
        "bleu-69": 0.4337901225938268,
        "bleu-74": 0.5832344599789548,
        "bleu-188": 0.03447203238708028,
        "bleu-63": 0.03169298344512037,
        "bleu-156": 0.0307164662519237,
        "bleu-70": 0.00021241169775598463,
        "bleu-166": 7.145620511432126e-10,
        "bleu-96": 0.6528368128411453,
        "codebleu-33": 0.04546048394672158,
        "codebleu-6": 0.621075913342609,
        "codebleu-92": 0.09958560517137585,
        "codebleu-77": 0.030303035570280266,
        "codebleu-71": 0.6906981836209146,
        "codebleu-43": 0.5630287825787711,
        "codebleu-31": 0.7608435160781416,
        "codebleu-26": 0.03788007842757904,
        "codebleu-158": 0.5882719730241425,
        "codebleu-8": 0.24740613618702353,
        "codebleu-7": 0.6541597337112693,
        "codebleu-27": 0.04546048394672158,
        "codebleu-69": 0.5161735461991414,
        "codebleu-74": 0.7043555509749857,
        "codebleu-188": 0.4861534749182543,
        "codebleu-63": 0.14266843972843024,
        "codebleu-156": 0.17795213527152234,
        "codebleu-70": 0.05314898891655468,
        "codebleu-166": 0.030303034817815988,
        "codebleu-96": 0.6153839640535333,
        "chrf-33": 0.09112142413458595,
        "chrf-6": 0.6320302008080246,
        "chrf-92": 0.14630202754199312,
        "chrf-77": 0.09935354545438484,
        "chrf-71": 0.6097424552255384,
        "chrf-43": 0.35066581986549117,
        "chrf-31": 0.7768421027252833,
        "chrf-26": 0.048382184114954804,
        "chrf-158": 0.6319477455142727,
        "chrf-8": 0.22800690514753652,
        "chrf-7": 0.6461915192009442,
        "chrf-27": 0.09304491042448347,
        "chrf-69": 0.5732510369106832,
        "chrf-74": 0.6292050262174388,
        "chrf-188": 0.2039310108114366,
        "chrf-63": 0.22364889909388241,
        "chrf-156": 0.24214480210172978,
        "chrf-70": 0.11801075413584089,
        "chrf-166": 0.05208502148247506,
        "chrf-96": 0.7412018456200048,
        "rougel-33": 0.07407407407407407,
        "rougel-6": 0.7142857142857143,
        "rougel-92": 0.07692307692307693,
        "rougel-77": 0.0909090909090909,
        "rougel-71": 0.5868263473053892,
        "rougel-43": 0.36363636363636365,
        "rougel-31": 0.7786259541984734,
        "rougel-26": 0.08823529411764705,
        "rougel-158": 0.7339449541284404,
        "rougel-8": 0.19801980198019803,
        "rougel-7": 0.6285714285714286,
        "rougel-27": 0.07792207792207793,
        "rougel-69": 0.7102803738317757,
        "rougel-74": 0.671875,
        "rougel-188": 0.16119402985074624,
        "rougel-63": 0.21428571428571427,
        "rougel-156": 0.2962962962962963,
        "rougel-70": 0.08450704225352113,
        "rougel-166": 0.06060606060606061,
        "rougel-96": 0.7438016528925621,
        "meteor-33": 0.02564102564102564,
        "meteor-6": 0.667941779691374,
        "meteor-92": 0.034364261168384876,
        "meteor-77": 0.05165692007797271,
        "meteor-71": 0.6845044401473069,
        "meteor-43": 0.5368808680496993,
        "meteor-31": 0.8287914627955454,
        "meteor-26": 0.043706293706293704,
        "meteor-158": 0.648967007714083,
        "meteor-8": 0.2025222339786668,
        "meteor-7": 0.6638827575586468,
        "meteor-27": 0.034423407917383825,
        "meteor-69": 0.6013949819816621,
        "meteor-74": 0.6444954283474006,
        "meteor-188": 0.27223370873975344,
        "meteor-63": 0.1020408163265306,
        "meteor-156": 0.10256410256410256,
        "meteor-70": 0.051207729468599035,
        "meteor-166": 0.017543859649122806,
        "meteor-96": 0.7271598008148484,
        "ruby-33": 0.04761904761904767,
        "ruby-6": 0.5555555555555556,
        "ruby-92": 0.04761904761904767,
        "ruby-77": 0.04761904761904767,
        "ruby-71": 0.4326923076923077,
        "ruby-43": 0.23809523809523814,
        "ruby-31": 0.7205882352941176,
        "ruby-26": 0.04761904761904767,
        "ruby-158": 0.5873015873015873,
        "ruby-8": 0.09523809523809523,
        "ruby-7": 0.4285714285714286,
        "ruby-27": 0.04761904761904767,
        "ruby-69": 0.5555555555555556,
        "ruby-74": 0.46153846153846156,
        "ruby-188": 0.09558823529411764,
        "ruby-63": 0.09523809523809523,
        "ruby-156": 0.19047619047619047,
        "ruby-70": 0.04761904761904767,
        "ruby-166": 0.031746031746031744,
        "ruby-96": 0.5873015873015873,
        "codebertscore_f1-33": 0.6249584555625916,
        "codebertscore_f3-33": 0.6139819025993347,
        "codebertscore_f1-6": 0.8902716636657715,
        "codebertscore_f3-6": 0.8948560357093811,
        "codebertscore_f1-92": 0.6432049870491028,
        "codebertscore_f3-92": 0.6476587653160095,
        "codebertscore_f1-77": 0.5826718211174011,
        "codebertscore_f3-77": 0.5241435170173645,
        "codebertscore_f1-71": 0.8166909217834473,
        "codebertscore_f3-71": 0.8442262411117554,
        "codebertscore_f1-43": 0.7389720678329468,
        "codebertscore_f3-43": 0.8088501691818237,
        "codebertscore_f1-31": 0.9222062230110168,
        "codebertscore_f3-31": 0.924536943435669,
        "codebertscore_f1-26": 0.6859228610992432,
        "codebertscore_f3-26": 0.6427546739578247,
        "codebertscore_f1-158": 0.903448760509491,
        "codebertscore_f3-158": 0.8976090550422668,
        "codebertscore_f1-8": 0.6893547177314758,
        "codebertscore_f3-8": 0.6865836381912231,
        "codebertscore_f1-7": 0.8767188787460327,
        "codebertscore_f3-7": 0.874556839466095,
        "codebertscore_f1-27": 0.6195403337478638,
        "codebertscore_f3-27": 0.6109200716018677,
        "codebertscore_f1-69": 0.9003798961639404,
        "codebertscore_f3-69": 0.8946417570114136,
        "codebertscore_f1-74": 0.8816571831703186,
        "codebertscore_f3-74": 0.8853045105934143,
        "codebertscore_f1-188": 0.7159501314163208,
        "codebertscore_f3-188": 0.7291629314422607,
        "codebertscore_f1-63": 0.6657074689865112,
        "codebertscore_f3-63": 0.6570892333984375,
        "codebertscore_f1-156": 0.7370630502700806,
        "codebertscore_f3-156": 0.703978419303894,
        "codebertscore_f1-70": 0.625751256942749,
        "codebertscore_f3-70": 0.6069417595863342,
        "codebertscore_f1-166": 0.5524803996086121,
        "codebertscore_f3-166": 0.52403324842453,
        "codebertscore_f1-96": 0.9192506670951843,
        "codebertscore_f3-96": 0.9018614292144775,
        "codebertscore_s_f1-33": 0.6110483407974243,
        "codebertscore_s_f3-33": 0.601960301399231,
        "codebertscore_s_f1-6": 0.9023678302764893,
        "codebertscore_s_f3-6": 0.9076360464096069,
        "codebertscore_s_f1-92": 0.6555749773979187,
        "codebertscore_s_f3-92": 0.6549040079116821,
        "codebertscore_s_f1-77": 0.6931176781654358,
        "codebertscore_s_f3-77": 0.6258926391601562,
        "codebertscore_s_f1-71": 0.8297197818756104,
        "codebertscore_s_f3-71": 0.8576331734657288,
        "codebertscore_s_f1-43": 0.7576030492782593,
        "codebertscore_s_f3-43": 0.830879807472229,
        "codebertscore_s_f1-31": 0.9300087690353394,
        "codebertscore_s_f3-31": 0.9325191378593445,
        "codebertscore_s_f1-26": 0.7341153621673584,
        "codebertscore_s_f3-26": 0.6733315587043762,
        "codebertscore_s_f1-158": 0.9103062748908997,
        "codebertscore_s_f3-158": 0.9062013626098633,
        "codebertscore_s_f1-8": 0.715835452079773,
        "codebertscore_s_f3-8": 0.7161256670951843,
        "codebertscore_s_f1-7": 0.8939814567565918,
        "codebertscore_s_f3-7": 0.8930511474609375,
        "codebertscore_s_f1-27": 0.6331470608711243,
        "codebertscore_s_f3-27": 0.6216799020767212,
        "codebertscore_s_f1-69": 0.9084191918373108,
        "codebertscore_s_f3-69": 0.9043915867805481,
        "codebertscore_s_f1-74": 0.8863074779510498,
        "codebertscore_s_f3-74": 0.8907327055931091,
        "codebertscore_s_f1-188": 0.748542308807373,
        "codebertscore_s_f3-188": 0.7603103518486023,
        "codebertscore_s_f1-63": 0.6931799650192261,
        "codebertscore_s_f3-63": 0.6860991716384888,
        "codebertscore_s_f1-156": 0.7669199705123901,
        "codebertscore_s_f3-156": 0.7307847738265991,
        "codebertscore_s_f1-70": 0.6582056283950806,
        "codebertscore_s_f3-70": 0.650046169757843,
        "codebertscore_s_f1-166": 0.6407922506332397,
        "codebertscore_s_f3-166": 0.5980496406555176,
        "codebertscore_s_f1-96": 0.9338429570198059,
        "codebertscore_s_f3-96": 0.9177089333534241,
        "gpt35_nsnr-33": 0,
        "raw_gpt35_nsnr-33": "0",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-92": 2,
        "raw_gpt35_nsnr-92": "2",
        "gpt35_nsnr-77": 1,
        "raw_gpt35_nsnr-77": "1",
        "gpt35_nsnr-71": 4,
        "raw_gpt35_nsnr-71": "4",
        "gpt35_nsnr-43": 4,
        "raw_gpt35_nsnr-43": "4",
        "gpt35_nsnr-31": 3,
        "raw_gpt35_nsnr-31": "3",
        "gpt35_nsnr-26": 0,
        "raw_gpt35_nsnr-26": "Score: 0",
        "gpt35_nsnr-158": 3,
        "raw_gpt35_nsnr-158": "3",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-27": 0,
        "raw_gpt35_nsnr-27": "0",
        "gpt35_nsnr-69": 3,
        "raw_gpt35_nsnr-69": "3",
        "gpt35_nsnr-74": 4,
        "raw_gpt35_nsnr-74": "4",
        "gpt35_nsnr-188": 2,
        "raw_gpt35_nsnr-188": "2",
        "gpt35_nsnr-63": 4,
        "raw_gpt35_nsnr-63": "4",
        "gpt35_nsnr-156": 3,
        "raw_gpt35_nsnr-156": "3",
        "gpt35_nsnr-70": 2,
        "raw_gpt35_nsnr-70": "2",
        "gpt35_nsnr-166": 0,
        "raw_gpt35_nsnr-166": "0",
        "gpt35_nsnr-96": 3,
        "raw_gpt35_nsnr-96": "3",
        "gpt35_nswr-33": 4,
        "raw_gpt35_nswr-33": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-92": 3,
        "raw_gpt35_nswr-92": "3",
        "gpt35_nswr-77": 4,
        "raw_gpt35_nswr-77": "4",
        "gpt35_nswr-71": 3,
        "raw_gpt35_nswr-71": "3",
        "gpt35_nswr-43": 4,
        "raw_gpt35_nswr-43": "4",
        "gpt35_nswr-31": 3,
        "raw_gpt35_nswr-31": "3",
        "gpt35_nswr-26": 0,
        "raw_gpt35_nswr-26": "Score: 0",
        "gpt35_nswr-158": 3,
        "raw_gpt35_nswr-158": "3",
        "gpt35_nswr-8": 2,
        "raw_gpt35_nswr-8": "2",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-27": 0,
        "raw_gpt35_nswr-27": "0",
        "gpt35_nswr-69": 3,
        "raw_gpt35_nswr-69": "3",
        "gpt35_nswr-74": 3,
        "raw_gpt35_nswr-74": "3",
        "gpt35_nswr-188": 2,
        "raw_gpt35_nswr-188": "2",
        "gpt35_nswr-63": 3,
        "raw_gpt35_nswr-63": "3",
        "gpt35_nswr-156": 3,
        "raw_gpt35_nswr-156": "3",
        "gpt35_nswr-70": 2,
        "raw_gpt35_nswr-70": "2",
        "gpt35_nswr-166": 0,
        "raw_gpt35_nswr-166": "0",
        "gpt35_nswr-96": 3,
        "raw_gpt35_nswr-96": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Check if in given list of numbers, are any two numbers closer to each other than\n    // given threshold.\n    // >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    // False\n    // >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    // True\n    public static boolean hasCloseElements(ArrayList<Float> numbers, float threshold) {\n",
        "snippet": [
            "        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                double distance = Math.abs(numbers.get(i) - numbers.get(j));\n                if (distance < threshold) return true;\n            }\n        }\n        return false;\n    }\n}"
        ],
        "simplified": "Check if in given list of numbers, are any two numbers closer to each other than given threshold.",
        "task_id": "0",
        "33": "float dist = 0.0f;\n        float minDist = Float.MAX_VALUE;\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                dist = Math.abs(numbers.get(i) - numbers.get(j));\n                if (dist < minDist) {\n                    minDist = dist;\n                }\n            }\n        }\n        if (minDist <= threshold) {\n            return true;\n        }\n        return false;",
        "grade-33": {
            "execution": 1
        },
        "7": "int length = numbers.size();\n        for (int i = 0; i < length; i++) {\n            for (int j = i + 1; j < length; j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;",
        "grade-7": {
            "execution": 1
        },
        "101": "if (numbers.size() <= 1) return false;\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            float num1 = numbers.get(i);\n            for (int j = i + 1; j < numbers.size(); j++) {\n                float num2 = numbers.get(j);\n                if (Math.abs(num1 - num2) < threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;",
        "grade-101": {
            "execution": 1
        },
        "91": "Collections.sort(numbers);\n\tfor (int i = 0; i < numbers.size() - 1; i++) {\n\t    if (numbers.get(i + 1) - numbers.get(i) < threshold) {\n\t\treturn true;\n\t    }\n\t}\n\treturn false;",
        "grade-91": {
            "execution": 1
        },
        "80": "// Let's say we have two numbers a and b.\n        // Let's suppose we already know that a < b.\n        // If a - b < threshold, then a < b - threshold.\n        // If a - b > threshold, then a > b - threshold.\n        // Therefore, if b is closer to a than threshold,\n        // then b is closer to a than a - threshold.\n        // This allows us to find the closeness by sorting.\n        numbers.sort(Comparator.naturalOrder());\n        int length = numbers.size();\n        for (int i = 0; i < length - 1; i++) {\n            float a = numbers.get(i);\n            float b = numbers.get(i + 1);\n            if (b < a - threshold) {\n                return true;\n            }\n        }\n        return false;",
        "grade-80": {
            "execution": 0
        },
        "43": "// generate combinations of 2 numbers\n        Iterator<Pair<Float, Float>> it = combinations(numbers, 2);\n        while (it.hasNext()) {\n            Pair<Float, Float> p = it.next();\n            float v1 = p.getValue0();\n            float v2 = p.getValue1();\n            float diff = Math.abs(v1 - v2);\n            if (diff < threshold) {\n                return true;\n            }\n        }\n        return false;",
        "grade-43": {
            "execution": 0
        },
        "31": "for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                float dist = Math.abs(numbers.get(i) - numbers.get(j));\n                if (dist < threshold)\n                    return true;\n            }\n        }\n        return false;",
        "grade-31": {
            "execution": 1
        },
        "27": "for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (numbers.get(i) + threshold > numbers.get(j)\n                        && numbers.get(i) - threshold < numbers.get(j)) {\n                    return true;\n                }\n            }\n        }\n        return false;",
        "grade-27": {
            "execution": 1
        },
        "161": "throw new RuntimeException(\"not implemented\");",
        "grade-161": {
            "execution": 0
        },
        "9": "// Sort the list of numbers\n        Collections.sort(numbers);\n        int l = numbers.size();\n        // For each number in list, check if it has a close number\n        for (int i = 0; i < l; i++) {\n            // Check if there is a number after this one\n            if (i + 1 < l) {\n                // Get the difference between this number and the next one\n                float diff = numbers.get(i + 1) - numbers.get(i);\n                // If difference is smaller than threshold, return true\n                if (diff < threshold) {\n                    return true;\n                }\n            }\n        }\n        // There is no close numbers, return false\n        return false;",
        "grade-9": {
            "execution": 1
        },
        "8": "try {\n            boolean hasCloseElements = false;\n            for (Float i : numbers) {\n                for (Float j : numbers) {\n                    if (Math.abs(i - j) < threshold) {\n                        hasCloseElements = true;\n                    }\n                }\n            }\n            return hasCloseElements;\n        } catch (Exception exception) {\n            System.out.println(exception);\n            return false;\n        }",
        "grade-8": {
            "execution": 0
        },
        "28": "// return true if in numbers are any two numbers closer to each other than threshold,\n        // false otherwise\n        boolean answer = false;\n        if (numbers.size() >= 2) {\n            for (int i = 0; i < numbers.size() - 1; i++) {\n                for (int j = i + 1; j < numbers.size(); j++) {\n                    if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold) {\n                        answer = true;\n                        break;\n                    }\n                }\n            }\n        }\n        return answer;",
        "grade-28": {
            "execution": 1
        },
        "76": "boolean hasCloseElements = false;\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold) {\n                    hasCloseElements = true;\n                    break;\n                }\n            }\n        }\n        return hasCloseElements;",
        "grade-76": {
            "execution": 1
        },
        "83": "ArrayList<Float> sortedNums = new ArrayList<>(numbers);\n        Collections.sort(sortedNums);\n        for (int i = 0; i < sortedNums.size() - 1; i++) {\n            if (sortedNums.get(i + 1) - sortedNums.get(i) < threshold) {\n                return true;\n            }\n        }\n        return false;",
        "grade-83": {
            "execution": 1
        },
        "195": "Collections.sort(numbers);\n        int l = numbers.size();\n        for (int i = 0; i < l - 1; i++) {\n            if (numbers.get(i + 1) - numbers.get(i) < threshold) {\n                return true;\n            }\n        }\n        return false;",
        "grade-195": {
            "execution": 1
        },
        "68": "// Implement this.\n        // You can edit code here to test this method.\n        Collections.sort(numbers);\n        int n = numbers.size();\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 0; i < n - 1; i++) {\n            if (Math.abs(numbers.get(i) - numbers.get(i + 1)) < threshold) {\n                return true;\n            }\n        }\n        return false;",
        "grade-68": {
            "execution": 1
        },
        "159": "Collections.sort(numbers);\n        boolean hasCloseElements = false;\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (Math.abs(numbers.get(i) - numbers.get(i + 1)) < threshold) {\n                hasCloseElements = true;\n                break;\n            }\n        }\n        return hasCloseElements;",
        "grade-159": {
            "execution": 1
        },
        "79": "// YOUR CODE HERE\n        // Sort in O(nlogn)\n        Collections.sort(numbers);\n        // Compare in O(n)\n        // Note: You can also use for each loop for better syntax\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (Math.abs(numbers.get(i) - numbers.get(i + 1)) < threshold) {\n                return true;\n            }\n        }\n        return false;",
        "grade-79": {
            "execution": 1
        },
        "173": "int size = numbers.size();\n        float number = 0;\n        int index = 0;\n        while (index < size) {\n            int i = 0;\n            number = numbers.get(index);\n            while (i < size) {\n                float number2 = numbers.get(i);\n                float distance = number - number2;\n                distance = Math.abs(distance);\n                if (distance <= threshold) {\n                    return true;\n                }\n                i = i + 1;\n            }\n            index = index + 1;\n        }\n        return false;",
        "grade-173": {
            "execution": 0
        },
        "102": "boolean hasClose = false;\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                float diff = Math.abs(numbers.get(i) - numbers.get(j));\n                if (diff < threshold) {\n                    hasClose = true;\n                    break;\n                }\n            }\n        }\n        return hasClose;",
        "grade-102": {
            "execution": 1
        },
        "bleu-33": 0.6285144662232605,
        "bleu-7": 0.7249693436523308,
        "bleu-101": 0.6059965405688584,
        "bleu-91": 0.45775979916161025,
        "bleu-80": 0.21487415012628708,
        "bleu-43": 0.20774901654164465,
        "bleu-31": 0.8973169979299201,
        "bleu-27": 0.7082862850493289,
        "bleu-161": 0.00015653652209635493,
        "bleu-9": 0.2544500776637596,
        "bleu-8": 0.18026545674594363,
        "bleu-28": 0.5294201085688655,
        "bleu-76": 0.7229743071282251,
        "bleu-83": 0.39802040358256874,
        "bleu-195": 0.4625708726653134,
        "bleu-68": 0.4747515232498341,
        "bleu-159": 0.5086709277220706,
        "bleu-79": 0.4454520112226449,
        "bleu-173": 0.3474834910660753,
        "bleu-102": 0.7395078976787123,
        "codebleu-33": 0.8414314065160973,
        "codebleu-7": 0.7987872230500145,
        "codebleu-101": 0.800499250683899,
        "codebleu-91": 0.5647694587200413,
        "codebleu-80": 0.6616287367042657,
        "codebleu-43": 0.5817216617144801,
        "codebleu-31": 0.9232943339703752,
        "codebleu-27": 0.8011485008569007,
        "codebleu-161": 0.03478318003733776,
        "codebleu-9": 0.6882326540510276,
        "codebleu-8": 0.47671611443575634,
        "codebleu-28": 0.8049765748188803,
        "codebleu-76": 0.8338216946472035,
        "codebleu-83": 0.6370876935250637,
        "codebleu-195": 0.6132843366416512,
        "codebleu-68": 0.7110589936862645,
        "codebleu-159": 0.6753847613085925,
        "codebleu-79": 0.6705972975554239,
        "codebleu-173": 0.6580772289227756,
        "codebleu-102": 0.8648449920739527,
        "chrf-33": 0.7848082465685543,
        "chrf-7": 0.6886964283544299,
        "chrf-101": 0.7352498656138649,
        "chrf-91": 0.578788164140576,
        "chrf-80": 0.45630365588696364,
        "chrf-43": 0.39761301516579506,
        "chrf-31": 0.8763138896154272,
        "chrf-27": 0.728576548387183,
        "chrf-161": 0.051402139722703334,
        "chrf-9": 0.4677464075346467,
        "chrf-8": 0.3537370327649771,
        "chrf-28": 0.6848411332965975,
        "chrf-76": 0.7232602574175472,
        "chrf-83": 0.4539551274608876,
        "chrf-195": 0.5736161719174223,
        "chrf-68": 0.6191370282995229,
        "chrf-159": 0.5544508331408531,
        "chrf-79": 0.5923112867014968,
        "chrf-173": 0.578030732443658,
        "chrf-102": 0.7623399571267331,
        "rougel-33": 0.7789473684210527,
        "rougel-7": 0.7820512820512822,
        "rougel-101": 0.6961325966850829,
        "rougel-91": 0.6376811594202898,
        "rougel-80": 0.359375,
        "rougel-43": 0.4090909090909091,
        "rougel-31": 0.9493670886075949,
        "rougel-27": 0.7904191616766467,
        "rougel-161": 0.06593406593406594,
        "rougel-9": 0.44144144144144143,
        "rougel-8": 0.40522875816993464,
        "rougel-28": 0.69,
        "rougel-76": 0.8165680473372781,
        "rougel-83": 0.5534591194968553,
        "rougel-195": 0.6153846153846154,
        "rougel-68": 0.5681818181818181,
        "rougel-159": 0.5987261146496815,
        "rougel-79": 0.5617977528089888,
        "rougel-173": 0.5054945054945055,
        "rougel-102": 0.8538011695906434,
        "meteor-33": 0.7929322281536333,
        "meteor-7": 0.8122117231665169,
        "meteor-101": 0.8296194341067747,
        "meteor-91": 0.542188563408691,
        "meteor-80": 0.5833575162869381,
        "meteor-43": 0.4742284264724728,
        "meteor-31": 0.9397103870788082,
        "meteor-27": 0.5933434014869888,
        "meteor-161": 0.020519835841313266,
        "meteor-9": 0.549668446848529,
        "meteor-8": 0.42337120241223436,
        "meteor-28": 0.9027881518605083,
        "meteor-76": 0.9137019640159317,
        "meteor-83": 0.5070528856671314,
        "meteor-195": 0.5605457932433873,
        "meteor-68": 0.6604884379681925,
        "meteor-159": 0.6481593305802064,
        "meteor-79": 0.6636211388401955,
        "meteor-173": 0.5304650128804076,
        "meteor-102": 0.900723934785587,
        "ruby-33": 0.6454545454545455,
        "ruby-7": 0.625,
        "ruby-101": 0.5148514851485149,
        "ruby-91": 0.475,
        "ruby-80": 0.19318181818181823,
        "ruby-43": 0.28125,
        "ruby-31": 0.9375,
        "ruby-27": 0.6896551724137931,
        "ruby-161": 0.03749999999999998,
        "ruby-9": 0.2816901408450704,
        "ruby-8": 0.22499999999999998,
        "ruby-28": 0.5166666666666666,
        "ruby-76": 0.7191011235955056,
        "ruby-83": 0.35,
        "ruby-195": 0.475,
        "ruby-68": 0.38541666666666663,
        "ruby-159": 0.42500000000000004,
        "ruby-79": 0.40816326530612246,
        "ruby-173": 0.3137254901960784,
        "ruby-102": 0.7802197802197802,
        "codebertscore_f1-33": 0.8932617902755737,
        "codebertscore_f3-33": 0.9213320016860962,
        "codebertscore_f1-7": 0.9415999054908752,
        "codebertscore_f3-7": 0.9402755498886108,
        "codebertscore_f1-101": 0.8878817558288574,
        "codebertscore_f3-101": 0.8989787101745605,
        "codebertscore_f1-91": 0.8801723718643188,
        "codebertscore_f3-91": 0.8773047924041748,
        "codebertscore_f1-80": 0.737001895904541,
        "codebertscore_f3-80": 0.7734415531158447,
        "codebertscore_f1-43": 0.7618604302406311,
        "codebertscore_f3-43": 0.7733599543571472,
        "codebertscore_f1-31": 0.9907354116439819,
        "codebertscore_f3-31": 0.9907355308532715,
        "codebertscore_f1-27": 0.9321653842926025,
        "codebertscore_f3-27": 0.9255444407463074,
        "codebertscore_f1-161": 0.5841933488845825,
        "codebertscore_f3-161": 0.5708968043327332,
        "codebertscore_f1-9": 0.7806154489517212,
        "codebertscore_f3-9": 0.8284169435501099,
        "codebertscore_f1-8": 0.7608662247657776,
        "codebertscore_f3-8": 0.7836335897445679,
        "codebertscore_f1-28": 0.8325085043907166,
        "codebertscore_f3-28": 0.8600578904151917,
        "codebertscore_f1-76": 0.8879343271255493,
        "codebertscore_f3-76": 0.9159936904907227,
        "codebertscore_f1-83": 0.8416067957878113,
        "codebertscore_f3-83": 0.8641740679740906,
        "codebertscore_f1-195": 0.886491060256958,
        "codebertscore_f3-195": 0.8883131146430969,
        "codebertscore_f1-68": 0.8215546607971191,
        "codebertscore_f3-68": 0.8508315086364746,
        "codebertscore_f1-159": 0.8506844639778137,
        "codebertscore_f3-159": 0.8821004629135132,
        "codebertscore_f1-79": 0.8023089170455933,
        "codebertscore_f3-79": 0.8535165786743164,
        "codebertscore_f1-173": 0.8123860359191895,
        "codebertscore_f3-173": 0.820864200592041,
        "codebertscore_f1-102": 0.9139315485954285,
        "codebertscore_f3-102": 0.935411810874939,
        "codebertscore_s_f1-33": 0.9021276235580444,
        "codebertscore_s_f3-33": 0.9300066232681274,
        "codebertscore_s_f1-7": 0.9534289240837097,
        "codebertscore_s_f3-7": 0.9511052370071411,
        "codebertscore_s_f1-101": 0.8982154130935669,
        "codebertscore_s_f3-101": 0.9102339744567871,
        "codebertscore_s_f1-91": 0.8918078541755676,
        "codebertscore_s_f3-91": 0.889222264289856,
        "codebertscore_s_f1-80": 0.7557557225227356,
        "codebertscore_s_f3-80": 0.7912691235542297,
        "codebertscore_s_f1-43": 0.7737511992454529,
        "codebertscore_s_f3-43": 0.7881200909614563,
        "codebertscore_s_f1-31": 0.9912937879562378,
        "codebertscore_s_f3-31": 0.9912938475608826,
        "codebertscore_s_f1-27": 0.93964684009552,
        "codebertscore_s_f3-27": 0.9319385886192322,
        "codebertscore_s_f1-161": 0.5942339301109314,
        "codebertscore_s_f3-161": 0.5827074646949768,
        "codebertscore_s_f1-9": 0.7977170944213867,
        "codebertscore_s_f3-9": 0.8489769697189331,
        "codebertscore_s_f1-8": 0.7799738645553589,
        "codebertscore_s_f3-8": 0.8043039441108704,
        "codebertscore_s_f1-28": 0.8476310968399048,
        "codebertscore_s_f3-28": 0.8735326528549194,
        "codebertscore_s_f1-76": 0.8981003761291504,
        "codebertscore_s_f3-76": 0.9246166944503784,
        "codebertscore_s_f1-83": 0.8550089001655579,
        "codebertscore_s_f3-83": 0.8753235340118408,
        "codebertscore_s_f1-195": 0.896083652973175,
        "codebertscore_s_f3-195": 0.8985421061515808,
        "codebertscore_s_f1-68": 0.8351194858551025,
        "codebertscore_s_f3-68": 0.8639408946037292,
        "codebertscore_s_f1-159": 0.8630778193473816,
        "codebertscore_s_f3-159": 0.8943193554878235,
        "codebertscore_s_f1-79": 0.812240719795227,
        "codebertscore_s_f3-79": 0.8636277318000793,
        "codebertscore_s_f1-173": 0.8296576738357544,
        "codebertscore_s_f3-173": 0.838437557220459,
        "codebertscore_s_f1-102": 0.9249910712242126,
        "codebertscore_s_f3-102": 0.9458063840866089,
        "gpt35_nsnr-33": 3,
        "raw_gpt35_nsnr-33": "3",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-101": 4,
        "raw_gpt35_nsnr-101": "4",
        "gpt35_nsnr-91": 4,
        "raw_gpt35_nsnr-91": "4",
        "gpt35_nsnr-80": 4,
        "raw_gpt35_nsnr-80": "4",
        "gpt35_nsnr-43": 4,
        "raw_gpt35_nsnr-43": "4",
        "gpt35_nsnr-31": 4,
        "raw_gpt35_nsnr-31": "4",
        "gpt35_nsnr-27": 4,
        "raw_gpt35_nsnr-27": "4",
        "gpt35_nsnr-161": 0,
        "raw_gpt35_nsnr-161": "0",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-76": 4,
        "raw_gpt35_nsnr-76": "4",
        "gpt35_nsnr-83": 4,
        "raw_gpt35_nsnr-83": "4",
        "gpt35_nsnr-195": 4,
        "raw_gpt35_nsnr-195": "4",
        "gpt35_nsnr-68": 4,
        "raw_gpt35_nsnr-68": "4",
        "gpt35_nsnr-159": 4,
        "raw_gpt35_nsnr-159": "4",
        "gpt35_nsnr-79": 4,
        "raw_gpt35_nsnr-79": "4",
        "gpt35_nsnr-173": 3,
        "raw_gpt35_nsnr-173": "3",
        "gpt35_nsnr-102": 4,
        "raw_gpt35_nsnr-102": "4",
        "gpt35_nswr-33": 3,
        "raw_gpt35_nswr-33": "3",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-101": 4,
        "raw_gpt35_nswr-101": "4",
        "gpt35_nswr-91": 3,
        "raw_gpt35_nswr-91": "3",
        "gpt35_nswr-80": 3,
        "raw_gpt35_nswr-80": "3",
        "gpt35_nswr-43": 4,
        "raw_gpt35_nswr-43": "4",
        "gpt35_nswr-31": 4,
        "raw_gpt35_nswr-31": "4",
        "gpt35_nswr-27": 3,
        "raw_gpt35_nswr-27": "3",
        "gpt35_nswr-161": 0,
        "raw_gpt35_nswr-161": "0",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-76": 4,
        "raw_gpt35_nswr-76": "4",
        "gpt35_nswr-83": 3,
        "raw_gpt35_nswr-83": "3",
        "gpt35_nswr-195": 4,
        "raw_gpt35_nswr-195": "4",
        "gpt35_nswr-68": 4,
        "raw_gpt35_nswr-68": "4",
        "gpt35_nswr-159": 4,
        "raw_gpt35_nswr-159": "4",
        "gpt35_nswr-79": 4,
        "raw_gpt35_nswr-79": "4",
        "gpt35_nswr-173": 3,
        "raw_gpt35_nswr-173": "3",
        "gpt35_nswr-102": 4,
        "raw_gpt35_nswr-102": "4"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Task\n    // We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    // then check if the result string is palindrome.\n    // A string is called palindrome if it reads the same backward as forward.\n    // You should return a tuple containing the result string and True/False for the check.\n    // Example\n    // For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    // For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    // For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    public static Pair<String, Boolean> reverseDelete(String s, String c) {\n",
        "snippet": [
            "        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (c.indexOf(ch) == -1) {\n                sb.append(ch);\n            }\n        }\n        return Arrays.asList(sb.toString(), sb.toString().equals(sb.reverse().toString()));\n    }\n}"
        ],
        "simplified": "Task We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a tuple containing the result string and True/False for the check.",
        "task_id": "112",
        "31": "s = s.replace(\"a\", \"\");\n        s = s.replace(\"b\", \"\");\n        s = s.replace(\"c\", \"\");\n        s = s.replace(\"d\", \"\");\n        s = s.replace(\"e\", \"\");\n        s = s.replace(\"f\", \"\");\n        s = s.replace(\"g\", \"\");\n        s = s.replace(\"h\", \"\");\n        s = s.replace(\"i\", \"\");\n        s = s.replace(\"j\", \"\");\n        s = s.replace(\"k\", \"\");\n        s = s.replace(\"l\", \"\");\n        s = s.replace(\"m\", \"\");\n        s = s.replace(\"n\", \"\");\n        s = s.replace(\"o\", \"\");\n        s = s.replace(\"p\", \"\");\n        s = s.replace(\"q\", \"\");\n        s = s.replace(\"r\", \"\");\n        s = s.replace(\"s\", \"\");\n        s = s.replace(\"t\", \"\");\n        s = s.replace(\"u\", \"\");\n        s = s.replace(\"v\", \"\");\n        s = s.replace(\"w\", \"\");\n        s = s.replace(\"x\", \"\");\n        s = s.replace(\"y\", \"\");\n        s = s.replace(\"z\", \"\");\n        StringBuffer t = new StringBuffer(s);\n        t.reverse();\n        return new Pair<String, Boolean>(t.toString(), true);",
        "grade-31": {
            "execution": 0
        },
        "6": "// Your code here\n        return new Pair<>(\"\",false);",
        "grade-6": {
            "execution": 0
        },
        "84": "for (char ch : c.toCharArray()) {\n            s = s.replace(Character.toString(ch), \"\");\n        }\n        return new Pair<String, Boolean>(s, isPalindrome(s));",
        "grade-84": {
            "execution": 0
        },
        "75": "StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            if (c.indexOf(s.charAt(i)) == -1) {\n                sb.append(s.charAt(i));\n            }\n        }\n        String palindrome = sb.toString();\n        boolean isPalindrome = checkPalindrome(palindrome);\n        return new Pair<String, Boolean>(palindrome, isPalindrome);",
        "grade-75": {
            "execution": 0
        },
        "68": "// We will iterate over the second string and then we will go over the first string\n        // and build a string without the characters in the second string.\n        // In the end we will check if the built string is palindrome.\n        // Let's assume that the length of the second string is q.\n        // So the complexity of this algorithm is O(n * q).\n        StringBuilder result = new StringBuilder();\n        // Iterating over the second string\n        for (int i = 0; i < s.length(); i++) {\n            char character = s.charAt(i);\n            if (c.indexOf(character) == -1) {\n                result.append(character);\n            }\n        }\n        // Checking if the string is palindrome\n        // We will iterate over the first and the last character and check if they are equal.\n        // The complexity of this algorithm is O(n / 2).\n        for (int i = 0; i < result.length() / 2; i++) {\n            char first = result.charAt(i);\n            char last = result.charAt(result.length() - i - 1);\n            if (first != last) {\n                return new Pair<>(result.toString(), false);\n            }\n        }\n        return new Pair<>(result.toString(), true);",
        "grade-68": {
            "execution": 0
        },
        "38": "// Your code here\n        StringBuilder sb = new StringBuilder();\n        StringBuilder cs = new StringBuilder();\n        String s_str = s.toLowerCase();\n        String c_str = c.toLowerCase();\n        for (int i = 0; i < s_str.length(); i++) {\n            if (!c_str.contains(String.valueOf(s_str.charAt(i)))) {\n                sb.append(s_str.charAt(i));\n            }\n        }\n        cs.append(sb.toString());\n        cs.reverse();\n        boolean check = cs.toString().equals(sb.toString());\n        return new Pair<String, Boolean>(sb.toString(), check);",
        "grade-38": {
            "execution": 0
        },
        "28": "for (int i = 0; i < c.length(); i++) {\n            s = s.replaceAll(c.substring(i, i + 1), \"\");\n        }\n        boolean result = true;\n        for (int i = 0; i < s.length() / 2; i++) {\n            if (s.charAt(i) != s.charAt(s.length() - i - 1))\n                result = false;\n        }\n        return new Pair<String, Boolean>(s, result);",
        "grade-28": {
            "execution": 0
        },
        "173": "StringBuilder newString = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            if (c.indexOf(s.charAt(i)) == -1)\n                newString.append(s.charAt(i));\n        }\n        StringBuilder reversed = new StringBuilder(newString);\n        reversed.reverse();\n        return Pair.with(newString.toString(), reversed.toString().equals(newString.toString()));",
        "grade-173": {
            "execution": 0
        },
        "23": "// Your code here\n        // Please, do not use the method reverse()\n        // You can use substring, indexOf\n        // For the algorithm, you can use the method reverse()\n        // It is forbidden to use regular expressions\n        return null;",
        "grade-23": {
            "execution": 0
        },
        "187": "if (s == null || c == null) return new Pair<String, Boolean>(null, false);\n        if (s.isEmpty() || c.isEmpty()) return new Pair<String, Boolean>(s, true);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            if (c.indexOf(s.charAt(i)) == -1) sb.append(s.charAt(i));\n        }\n        StringBuffer reverse = new StringBuffer(sb.toString());\n        return new Pair<String, Boolean>(sb.toString(), reverse.reverse().toString().equals(sb.toString()));",
        "grade-187": {
            "execution": 0
        },
        "134": "String s2 = new String(s);\n        for (int i = 0; i < c.length(); i++) {\n            int index = s2.indexOf(c.charAt(i));\n            while (index != -1) {\n                s2 = s2.substring(0, index) + s2.substring(index + 1);\n                index = s2.indexOf(c.charAt(i));\n            }\n        }\n        return new Pair<String, Boolean>(s2, isPalindrome(s2));",
        "grade-134": {
            "execution": 0
        },
        "8": "String result = \"\";\n        String temp = \"\";\n        String[] sArray = s.split(\"\");\n        String[] cArray = c.split(\"\");\n        for (int i = 0; i < sArray.length; i++) {\n            int j = 0;\n            while (j < cArray.length) {\n                if (sArray[i].equals(cArray[j])) {\n                    break;\n                }\n                j++;\n            }\n            if (j == cArray.length) {\n                result += sArray[i];\n            }\n        }\n        String[] resultArray = result.split(\"\");\n        for (int i = resultArray.length - 1; i >= 0; i--) {\n            temp += resultArray[i];\n        }\n        boolean check = result.equals(temp);\n        return new Pair<String, Boolean>(result, check);",
        "grade-8": {
            "execution": 0
        },
        "7": "// Implement this\n        for(int i = 0; i < c.length(); i++){\n            s = s.replaceAll(String.valueOf(c.charAt(i)),\"\");\n        }\n        return Pair.with(s,new StringBuilder(s).reverse().toString().equals(s));",
        "grade-7": {
            "execution": 0
        },
        "24": "boolean result = true;\n        String temp = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            if (!(c.contains(String.valueOf(s.charAt(i))))) {\n                temp += String.valueOf(s.charAt(i));\n            }\n        }\n        for (int i = 0; i < temp.length() / 2; i++) {\n            if (temp.charAt(i) != temp.charAt(temp.length() - 1 - i)) {\n                result = false;\n            }\n        }\n        return new Pair<String, Boolean>(temp, result);",
        "grade-24": {
            "execution": 0
        },
        "66": "StringBuilder sb = new StringBuilder();\n        StringBuilder temp = new StringBuilder();\n        boolean result = false;\n        char[] sArray = s.toCharArray();\n        char[] cArray = c.toCharArray();\n        for (int i = 0; i < sArray.length; i++) {\n            int j = 0;\n            while (j < cArray.length) {\n                if (sArray[i] == cArray[j])\n                    break;\n                j++;\n            }\n            if (j == cArray.length)\n                sb.append(sArray[i]);\n        }\n        for (int i = sb.length() - 1; i >= 0; i--)\n            temp.append(sb.charAt(i));\n        if (sb.toString().equals(temp.toString()))\n            result = true;\n        return new Pair<String, Boolean>(sb.toString(), result);",
        "grade-66": {
            "execution": 0
        },
        "71": "String removed = s.replaceAll(\"[\" + c + \"]\", \"\");\n        String reversed = new StringBuilder(removed).reverse().toString();\n        return new Pair<String, Boolean>(removed, removed.equals(reversed));",
        "grade-71": {
            "execution": 0
        },
        "162": "String a = s;\n        StringBuilder sb = new StringBuilder();\n        String cc = c;\n        String b = cc;\n        String result = \"\";\n        int index = 0;\n        boolean resultBool = false;\n        while (index < a.length()) {\n            if (b.indexOf(a.charAt(index)) != -1) {\n                index++;\n            } else {\n                sb.append(a.charAt(index));\n                index++;\n            }\n        }\n        result = sb.toString();\n        if (result.equals(new StringBuilder(result).reverse().toString())) {\n            resultBool = true;\n        }\n        return new Pair<String, Boolean>(result, resultBool);",
        "grade-162": {
            "execution": 0
        },
        "190": "// write your code here and return the tuple",
        "grade-190": {
            "execution": 0
        },
        "177": "HashSet<Character> set = new HashSet<Character>();\n      for(int i = 0; i < c.length(); i++)\n        set.add(c.charAt(i));\n      String s2 = \"\";\n      for(int i = 0; i < s.length(); i++)\n        if(!set.contains(s.charAt(i)))\n          s2 += s.charAt(i);\n      boolean isPalindrome = true;\n      for(int i = 0; i < s2.length()/2; i++)\n        if(s2.charAt(i) != s2.charAt(s2.length()-1-i))\n          isPalindrome = false;\n      return new Pair<String, Boolean>(s2, isPalindrome);",
        "grade-177": {
            "execution": 0
        },
        "57": "StringBuffer buff = new StringBuffer(s);\n        for (int i = 0; i < buff.length(); i++) {\n            if (c.indexOf(buff.charAt(i)) != -1) {\n                buff.deleteCharAt(i);\n                i--;\n            }\n        }\n        return new Pair<String, Boolean>(buff.toString(), buff.toString().equals(buff.reverse().toString()));",
        "grade-57": {
            "execution": 0
        },
        "bleu-31": 0.030699788826398483,
        "bleu-6": 0.0011025298045907058,
        "bleu-84": 0.1829822283981933,
        "bleu-75": 0.3958517568648153,
        "bleu-68": 0.12578629827622226,
        "bleu-38": 0.30171119422722137,
        "bleu-28": 0.08181593543040927,
        "bleu-173": 0.3865627121401621,
        "bleu-23": 0.0227410655229624,
        "bleu-187": 0.3158158261505767,
        "bleu-134": 0.174980927463353,
        "bleu-8": 0.05951343402070264,
        "bleu-7": 0.26250108470469014,
        "bleu-24": 0.11415485981612875,
        "bleu-66": 0.22790788078646965,
        "bleu-71": 0.18514001001522304,
        "bleu-162": 0.2785636200507892,
        "bleu-190": 2.3208055700169624e-05,
        "bleu-177": 0.060199970521870094,
        "bleu-57": 0.4004764655150649,
        "codebleu-31": 0.5082155694215518,
        "codebleu-6": 0.06662729653696438,
        "codebleu-84": 0.33801615965213083,
        "codebleu-75": 0.6199572203232746,
        "codebleu-68": 0.6588296894436353,
        "codebleu-38": 0.6737212148393,
        "codebleu-28": 0.5469410577421377,
        "codebleu-173": 0.6708152494412664,
        "codebleu-23": 0.19941023248781642,
        "codebleu-187": 0.6753411770802957,
        "codebleu-134": 0.5759519488905708,
        "codebleu-8": 0.5728118266372092,
        "codebleu-7": 0.524860847045193,
        "codebleu-24": 0.616888961623435,
        "codebleu-66": 0.6636974371280432,
        "codebleu-71": 0.3319435786893896,
        "codebleu-162": 0.6646398290149444,
        "codebleu-190": 0.03857205651534161,
        "codebleu-177": 0.5706297902517524,
        "codebleu-57": 0.6707723273529312,
        "chrf-31": 0.21349129668367223,
        "chrf-6": 0.06478646361654902,
        "chrf-84": 0.3068549899918647,
        "chrf-75": 0.5136018581356548,
        "chrf-68": 0.34739273965040146,
        "chrf-38": 0.5355850216147515,
        "chrf-28": 0.24785733875619273,
        "chrf-173": 0.5533243875823156,
        "chrf-23": 0.18757307629612818,
        "chrf-187": 0.5820905826653835,
        "chrf-134": 0.3447185684736961,
        "chrf-8": 0.26231152552261927,
        "chrf-7": 0.39461696502582183,
        "chrf-24": 0.27483929566764176,
        "chrf-66": 0.5108729316993009,
        "chrf-71": 0.35152864546632556,
        "chrf-162": 0.5093893570581636,
        "chrf-190": 0.05966358170209794,
        "chrf-177": 0.23329962177622185,
        "chrf-57": 0.5252473769289773,
        "rougel-31": 0.17731958762886596,
        "rougel-6": 0.09803921568627451,
        "rougel-84": 0.4264705882352941,
        "rougel-75": 0.5698924731182795,
        "rougel-68": 0.32258064516129037,
        "rougel-38": 0.49392712550607293,
        "rougel-28": 0.31840796019900497,
        "rougel-173": 0.6069651741293532,
        "rougel-23": 0.145985401459854,
        "rougel-187": 0.49808429118773945,
        "rougel-134": 0.40816326530612246,
        "rougel-8": 0.2743682310469314,
        "rougel-7": 0.42682926829268286,
        "rougel-24": 0.3739130434782609,
        "rougel-66": 0.416382252559727,
        "rougel-71": 0.3448275862068966,
        "rougel-162": 0.4937238493723849,
        "rougel-190": 0.021052631578947368,
        "rougel-177": 0.3166023166023166,
        "rougel-57": 0.6421052631578948,
        "meteor-31": 0.27715652447969,
        "meteor-6": 0.05452543336175049,
        "meteor-84": 0.30676642461221154,
        "meteor-75": 0.4914838337182447,
        "meteor-68": 0.4293010063547055,
        "meteor-38": 0.5344016366048223,
        "meteor-28": 0.3930165687605526,
        "meteor-173": 0.5263629672128289,
        "meteor-23": 0.09654313298037995,
        "meteor-187": 0.6187645687413266,
        "meteor-134": 0.43108803411235774,
        "meteor-8": 0.32889382329037514,
        "meteor-7": 0.382567951444122,
        "meteor-24": 0.4378150739343967,
        "meteor-66": 0.50282293209573,
        "meteor-71": 0.2621249226963513,
        "meteor-162": 0.508335684251535,
        "meteor-190": 0.0064516129032258064,
        "meteor-177": 0.34682140034563813,
        "meteor-57": 0.6970646907950984,
        "ruby-31": 0.10250000000000004,
        "ruby-6": 0.05882352941176472,
        "ruby-84": 0.3176470588235294,
        "ruby-75": 0.4257425742574258,
        "ruby-68": 0.20209059233449478,
        "ruby-38": 0.345679012345679,
        "ruby-28": 0.19827586206896552,
        "ruby-173": 0.4568965517241379,
        "ruby-23": 0.08235294117647063,
        "ruby-187": 0.34090909090909094,
        "ruby-134": 0.2792792792792793,
        "ruby-8": 0.171875,
        "ruby-7": 0.23529411764705888,
        "ruby-24": 0.2551724137931034,
        "ruby-66": 0.27884615384615385,
        "ruby-71": 0.24705882352941178,
        "ruby-162": 0.3441558441558441,
        "ruby-190": 0.0117647058823529,
        "ruby-177": 0.2183908045977011,
        "ruby-57": 0.5523809523809524,
        "codebertscore_f1-31": 0.6767295002937317,
        "codebertscore_f3-31": 0.6963393092155457,
        "codebertscore_f1-6": 0.595809817314148,
        "codebertscore_f3-6": 0.5743721723556519,
        "codebertscore_f1-84": 0.7693573236465454,
        "codebertscore_f3-84": 0.7517725229263306,
        "codebertscore_f1-75": 0.8069198131561279,
        "codebertscore_f3-75": 0.8406186103820801,
        "codebertscore_f1-68": 0.6822860836982727,
        "codebertscore_f3-68": 0.7416199445724487,
        "codebertscore_f1-38": 0.7797842025756836,
        "codebertscore_f3-38": 0.8005920052528381,
        "codebertscore_f1-28": 0.7050736546516418,
        "codebertscore_f3-28": 0.7078769207000732,
        "codebertscore_f1-173": 0.8542934060096741,
        "codebertscore_f3-173": 0.8638688325881958,
        "codebertscore_f1-23": 0.6360507607460022,
        "codebertscore_f3-23": 0.6284792423248291,
        "codebertscore_f1-187": 0.8001234531402588,
        "codebertscore_f3-187": 0.8255438804626465,
        "codebertscore_f1-134": 0.7505001425743103,
        "codebertscore_f3-134": 0.7575522065162659,
        "codebertscore_f1-8": 0.6763060688972473,
        "codebertscore_f3-8": 0.6997138857841492,
        "codebertscore_f1-7": 0.7589347958564758,
        "codebertscore_f3-7": 0.76613849401474,
        "codebertscore_f1-24": 0.709773063659668,
        "codebertscore_f3-24": 0.717802107334137,
        "codebertscore_f1-66": 0.7444840669631958,
        "codebertscore_f3-66": 0.7713456749916077,
        "codebertscore_f1-71": 0.7383836507797241,
        "codebertscore_f3-71": 0.7332170605659485,
        "codebertscore_f1-162": 0.7513557076454163,
        "codebertscore_f3-162": 0.7841241359710693,
        "codebertscore_f1-190": 0.5831652283668518,
        "codebertscore_f3-190": 0.5724499225616455,
        "codebertscore_f1-177": 0.7172018885612488,
        "codebertscore_f3-177": 0.731877863407135,
        "codebertscore_f1-57": 0.8305674195289612,
        "codebertscore_f3-57": 0.8419866561889648,
        "codebertscore_s_f1-31": 0.7046230435371399,
        "codebertscore_s_f3-31": 0.7043533325195312,
        "codebertscore_s_f1-6": 0.6068213582038879,
        "codebertscore_s_f3-6": 0.5796887874603271,
        "codebertscore_s_f1-84": 0.7626028656959534,
        "codebertscore_s_f3-84": 0.7388307452201843,
        "codebertscore_s_f1-75": 0.8138835430145264,
        "codebertscore_s_f3-75": 0.8455918431282043,
        "codebertscore_s_f1-68": 0.7178630828857422,
        "codebertscore_s_f3-68": 0.7560902237892151,
        "codebertscore_s_f1-38": 0.7855204939842224,
        "codebertscore_s_f3-38": 0.8006927967071533,
        "codebertscore_s_f1-28": 0.713983416557312,
        "codebertscore_s_f3-28": 0.7148783802986145,
        "codebertscore_s_f1-173": 0.8531294465065002,
        "codebertscore_s_f3-173": 0.8635098338127136,
        "codebertscore_s_f1-23": 0.6261988282203674,
        "codebertscore_s_f3-23": 0.6085267663002014,
        "codebertscore_s_f1-187": 0.799938976764679,
        "codebertscore_s_f3-187": 0.8186615705490112,
        "codebertscore_s_f1-134": 0.7553188800811768,
        "codebertscore_s_f3-134": 0.7656809687614441,
        "codebertscore_s_f1-8": 0.72495436668396,
        "codebertscore_s_f3-8": 0.7289460301399231,
        "codebertscore_s_f1-7": 0.7427563667297363,
        "codebertscore_s_f3-7": 0.7385627627372742,
        "codebertscore_s_f1-24": 0.7235335111618042,
        "codebertscore_s_f3-24": 0.7264890074729919,
        "codebertscore_s_f1-66": 0.7839308977127075,
        "codebertscore_s_f3-66": 0.8018481731414795,
        "codebertscore_s_f1-71": 0.7356035113334656,
        "codebertscore_s_f3-71": 0.7245239019393921,
        "codebertscore_s_f1-162": 0.7778698205947876,
        "codebertscore_s_f3-162": 0.803463876247406,
        "codebertscore_s_f1-190": 0.5704632997512817,
        "codebertscore_s_f3-190": 0.5528196096420288,
        "codebertscore_s_f1-177": 0.727769136428833,
        "codebertscore_s_f3-177": 0.7374185919761658,
        "codebertscore_s_f1-57": 0.8311728239059448,
        "codebertscore_s_f3-57": 0.8410028219223022,
        "gpt35_nsnr-31": 2,
        "raw_gpt35_nsnr-31": "2",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-84": 3,
        "raw_gpt35_nsnr-84": "3",
        "gpt35_nsnr-75": 4,
        "raw_gpt35_nsnr-75": "4",
        "gpt35_nsnr-68": 4,
        "raw_gpt35_nsnr-68": "4",
        "gpt35_nsnr-38": 4,
        "raw_gpt35_nsnr-38": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-173": 4,
        "raw_gpt35_nsnr-173": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-187": 4,
        "raw_gpt35_nsnr-187": "4",
        "gpt35_nsnr-134": 3,
        "raw_gpt35_nsnr-134": "3",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-24": 3,
        "raw_gpt35_nsnr-24": "3",
        "gpt35_nsnr-66": 4,
        "raw_gpt35_nsnr-66": "4",
        "gpt35_nsnr-71": 4,
        "raw_gpt35_nsnr-71": "4",
        "gpt35_nsnr-162": 3,
        "raw_gpt35_nsnr-162": "3",
        "gpt35_nsnr-190": 3,
        "raw_gpt35_nsnr-190": "3",
        "gpt35_nsnr-177": 4,
        "raw_gpt35_nsnr-177": "4",
        "gpt35_nsnr-57": 3,
        "raw_gpt35_nsnr-57": "3",
        "gpt35_nswr-31": 1,
        "raw_gpt35_nswr-31": "1",
        "gpt35_nswr-6": 2,
        "raw_gpt35_nswr-6": "2",
        "gpt35_nswr-84": 2,
        "raw_gpt35_nswr-84": "2",
        "gpt35_nswr-75": 3,
        "raw_gpt35_nswr-75": "3",
        "gpt35_nswr-68": 3,
        "raw_gpt35_nswr-68": "3",
        "gpt35_nswr-38": 3,
        "raw_gpt35_nswr-38": "3",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-173": 3,
        "raw_gpt35_nswr-173": "3",
        "gpt35_nswr-23": 2,
        "raw_gpt35_nswr-23": "2",
        "gpt35_nswr-187": 4,
        "raw_gpt35_nswr-187": "4",
        "gpt35_nswr-134": 3,
        "raw_gpt35_nswr-134": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-24": 3,
        "raw_gpt35_nswr-24": "3",
        "gpt35_nswr-66": 3,
        "raw_gpt35_nswr-66": "3",
        "gpt35_nswr-71": 3,
        "raw_gpt35_nswr-71": "3",
        "gpt35_nswr-162": 3,
        "raw_gpt35_nswr-162": "3",
        "gpt35_nswr-190": 4,
        "raw_gpt35_nswr-190": "4",
        "gpt35_nswr-177": 3,
        "raw_gpt35_nswr-177": "3",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Create a function that takes a string as input which contains only square brackets.\n    // The function should return True if and only if there is a valid subsequence of brackets \n    // where at least one bracket in the subsequence is nested.\n    // is_nested('[[]]') \u279e True\n    // is_nested('[]]]]]]][[[[[]') \u279e False\n    // is_nested('[][]') \u279e False\n    // is_nested('[]') \u279e False\n    // is_nested('[[][]]') \u279e True\n    // is_nested('[[]][[') \u279e True\n    public static boolean isNested(String string) {\n",
        "snippet": [
            "        List<Integer> opening_bracket_index = new ArrayList<>(), closing_bracket_index = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == '[') {\n                opening_bracket_index.add(i);\n            } else {\n                closing_bracket_index.add(i);\n            }\n        }\n        Collections.reverse(closing_bracket_index);\n        int i = 0, l = closing_bracket_index.size();\n        for (int idx : opening_bracket_index) {\n            if (i < l && idx < closing_bracket_index.get(i)) {\n                i += 1;\n            }\n        }\n        return i >= 2;\n    }\n}"
        ],
        "simplified": "Create a function that takes a string as input which contains only square brackets. The function should return True if and only if there is a valid subsequence of brackets where at least one bracket in the subsequence is nested.",
        "task_id": "132",
        "186": "// Create counter and results\n        int closeCount = 0;\n        int openCount = 0;\n        // Iterate over string\n        for (char c : string.toCharArray()) {\n            // If open bracket\n            if (c == '[') {\n                // Increment counter\n                openCount++;\n            }\n            // Else if close bracket\n            else if (c == ']') {\n                // Increment counter\n                closeCount++;\n            }\n            // If closeCount > openCount\n            if (closeCount > openCount) {\n                // Return false\n                return false;\n            }\n        }\n        // If close count is greater than 0 and open is greater than 0\n        if (closeCount > 0 && openCount > 0) {\n            // Return true\n            return true;\n        }\n        // Otherwise return false\n        return false;",
        "grade-186": {
            "execution": 0
        },
        "30": "var stack = new Stack<Character>();\n        for (var c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();",
        "grade-30": {
            "execution": 0
        },
        "6": "for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == '[') {\n                for (int j = i + 1; j < string.length(); j++) {\n                    if (string.charAt(j) == ']') {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;",
        "grade-6": {
            "execution": 0
        },
        "75": "int c1 = 0;\n        int c2 = 0;\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == '[') {\n                c1++;\n            } else {\n                c2++;\n            }\n        }\n        if (c1 != c2) {\n            return false;\n        }\n        return true;",
        "grade-75": {
            "execution": 0
        },
        "66": "if (string.length() % 2 != 0) {\n            return false;\n        }\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == '[') {\n                stack.push(c);\n            } else {\n                if (stack.empty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return true;",
        "grade-66": {
            "execution": 0
        },
        "60": "if (string.length() == 0) {\n            return false;\n        }\n        Stack<Character> stack = new Stack<>();\n        for (char ch : string.toCharArray()) {\n            if (ch == '[') {\n                stack.push(ch);\n            } else {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char pop = stack.pop();\n                if (pop != '[') {\n                    return false;\n                }\n            }\n        }\n        return true;",
        "grade-60": {
            "execution": 0
        },
        "37": "Stack<String> stack = new Stack<>();\n        boolean result = false;\n        for (int i = 0; i < string.length(); i++) {\n            String s = string.substring(i, i + 1);\n            if (s.equals(\"[\")) {\n                stack.push(s);\n            } else {\n                if (stack.size() == 0) {\n                    return false;\n                }\n                stack.pop();\n                if (stack.size() == 0) {\n                    result = true;\n                }\n            }\n        }\n        return result;",
        "grade-37": {
            "execution": 0
        },
        "27": "if(string.isEmpty()) return false;\n        Stack<Character> stack = new Stack<>();\n        for(int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if(c == '[') {\n                stack.push(c);\n            } else if(c == ']') {\n                if(stack.isEmpty()) {\n                    return false;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return !stack.isEmpty();",
        "grade-27": {
            "execution": 0
        },
        "197": "return string.indexOf(\"[\") > -1 && string.indexOf(\"]\") > -1;",
        "grade-197": {
            "execution": 0
        },
        "154": "boolean result = false;\n        if(string.length() > 0) {\n            Stack<Character> stack = new Stack<>();\n            for(int i = 0; i < string.length(); i++) {\n                char c = string.charAt(i);\n                if(c == '[') {\n                    stack.push(c);\n                } else if(c == ']') {\n                    if(stack.size() > 0) {\n                        char temp = stack.pop();\n                        if(temp == '[') {\n                            result = true;\n                        }\n                    }\n                }\n            }\n        }\n        return result;",
        "grade-154": {
            "execution": 0
        },
        "22": "int [] pos = new int[string.length()];\n        int count = 0;\n        for (int i = 0; i < string.length(); i++) {\n            pos[i] = count;\n            if (string.charAt(i) == '[') count++;\n            else count--;\n        }\n        for (int i = 0; i < string.length(); i++) {\n            if (pos[i] == 0) return false;\n            if (string.charAt(i) == ']' && pos[i] > pos[i+1]) return true;\n        }\n        return false;",
        "grade-22": {
            "execution": 0
        },
        "172": "int d = 0;\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == '[') {\n                d++;\n            } else {\n                d--;\n            }\n            if (d < 0) {\n                return false;\n            }\n        }\n        return d > 0;",
        "grade-172": {
            "execution": 0
        },
        "119": "int count = 0;\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == '[') count++;\n            else if (string.charAt(i) == ']') count--;\n            if (count < 0) return false;\n        }\n        return count == 0;",
        "grade-119": {
            "execution": 0
        },
        "8": "int counter = 0;\n        int temp = 0;\n        int nested = 0;\n        char current = ' ';\n        char next = ' ';\n        for (int i = 0; i < string.length(); i++) {\n            current = string.charAt(i);\n            if (i < string.length() - 1) {\n                next = string.charAt(i + 1);\n            }\n            if (current == '[' && next == '[') {\n                temp = i;\n                nested = 0;\n            }\n            if (current == ']' && next == ']') {\n                if (temp < i) {\n                    nested = 1;\n                }\n            }\n            if (current == '[' && next == ']') {\n                if (temp < i) {\n                    nested = 1;\n                }\n            }\n            if (current == ']' && next == '[') {\n                if (temp < i) {\n                    nested = 1;\n                }\n            }\n            counter += nested;\n        }\n        if (counter > 0) {\n            return true;\n        }\n        return false;",
        "grade-8": {
            "execution": 0
        },
        "7": "String[] arr = string.split(\"\");\n        int open = 0;\n        int close = 0;\n        for (String i : arr) {\n            if (i.equals(\"[\")) {\n                open++;\n            } else if (i.equals(\"]\")) {\n                close++;\n            }\n        }\n        if (open < close) {\n            return false;\n        }\n        int count = 0;\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i].equals(\"[\")) {\n                count++;\n            } else if (arr[i].equals(\"]\")) {\n                count--;\n            }\n            if (count < 0) {\n                return false;\n            }\n        }\n        return true;",
        "grade-7": {
            "execution": 0
        },
        "23": "char[] chars = string.toCharArray();\n        int i = 0;\n        int count = 0;\n        for (char ch : chars) {\n            if (ch == '[') {\n                count++;\n            } else if (ch == ']') {\n                count--;\n            }\n            if (count < 0) {\n                return false;\n            }\n        }\n        return count == 0;",
        "grade-23": {
            "execution": 0
        },
        "58": "int depth = 0;\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == '[') {\n                depth++;\n            } else if (c == ']') {\n                depth--;\n            }\n            if (depth < 0) return false;\n        }\n        return depth > 0;",
        "grade-58": {
            "execution": 0
        },
        "62": "// TODO: implement this function\n        return false;",
        "grade-62": {
            "execution": 0
        },
        "142": "Stack<Character> brackets = new Stack<>();\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == '[') {\n                brackets.push(string.charAt(i));\n            } else if (string.charAt(i) == ']') {\n                if (brackets.empty()) return false;\n                brackets.pop();\n            }\n        }\n        return brackets.empty();",
        "grade-142": {
            "execution": 0
        },
        "175": "int count = 0;\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == '[') {\n                count++;\n            } else if (string.charAt(i) == ']') {\n                count--;\n            }\n            if (count < 0) {\n                return false;\n            }\n        }\n        return true;",
        "grade-175": {
            "execution": 0
        },
        "bleu-186": 0.095084623757685,
        "bleu-30": 0.16526229878360546,
        "bleu-6": 0.2909861940629489,
        "bleu-75": 0.2522109559969946,
        "bleu-66": 0.3693115559492264,
        "bleu-60": 0.22640035032584102,
        "bleu-37": 0.3258981048924932,
        "bleu-27": 0.3856895038739432,
        "bleu-197": 0.002856432309249204,
        "bleu-154": 0.3894578194078626,
        "bleu-22": 0.35969094087894704,
        "bleu-172": 0.2396984615934158,
        "bleu-119": 0.25122111397735847,
        "bleu-8": 0.2419570830708566,
        "bleu-7": 0.2270983555651195,
        "bleu-23": 0.14023791120166712,
        "bleu-58": 0.23820451798856102,
        "bleu-62": 1.3795227582735958e-07,
        "bleu-142": 0.3968693452196393,
        "bleu-175": 0.28391419715101934,
        "codebleu-186": 0.4158212073262801,
        "codebleu-30": 0.3481223048491348,
        "codebleu-6": 0.3869308887180411,
        "codebleu-75": 0.32928496993441814,
        "codebleu-66": 0.531711127361518,
        "codebleu-60": 0.4503740735206375,
        "codebleu-37": 0.5952203065123619,
        "codebleu-27": 0.5588726611050286,
        "codebleu-197": 0.07611542100910372,
        "codebleu-154": 0.596119766203406,
        "codebleu-22": 0.5652654080321018,
        "codebleu-172": 0.31438627951355447,
        "codebleu-119": 0.3305580019985692,
        "codebleu-8": 0.6033309035074607,
        "codebleu-7": 0.5576439874889264,
        "codebleu-23": 0.2772030576598936,
        "codebleu-58": 0.3369210573244332,
        "codebleu-62": 0.024180051468744235,
        "codebleu-142": 0.5205736359921463,
        "codebleu-175": 0.3580189399744361,
        "chrf-186": 0.2212542613093918,
        "chrf-30": 0.17942788014351416,
        "chrf-6": 0.2444292304661105,
        "chrf-75": 0.23459624095555276,
        "chrf-66": 0.2853659201856835,
        "chrf-60": 0.22756637223531204,
        "chrf-37": 0.25997213287988885,
        "chrf-27": 0.2889226615662329,
        "chrf-197": 0.0632084848582972,
        "chrf-154": 0.2951828062837895,
        "chrf-22": 0.28378509343119757,
        "chrf-172": 0.2288011082569435,
        "chrf-119": 0.230125640236058,
        "chrf-8": 0.2744410555300046,
        "chrf-7": 0.2369417586170726,
        "chrf-23": 0.15262053691957525,
        "chrf-58": 0.2145734356878811,
        "chrf-62": 0.033106942825124795,
        "chrf-142": 0.3422248159363104,
        "chrf-175": 0.2439124580070073,
        "rougel-186": 0.2809364548494983,
        "rougel-30": 0.42152466367713004,
        "rougel-6": 0.5112107623318386,
        "rougel-75": 0.5070422535211269,
        "rougel-66": 0.5306122448979591,
        "rougel-60": 0.43442622950819665,
        "rougel-37": 0.5447470817120622,
        "rougel-27": 0.5116279069767442,
        "rougel-197": 0.16766467065868262,
        "rougel-154": 0.525925925925926,
        "rougel-22": 0.5017921146953405,
        "rougel-172": 0.5263157894736842,
        "rougel-119": 0.5114155251141553,
        "rougel-8": 0.40331491712707185,
        "rougel-7": 0.3986486486486487,
        "rougel-23": 0.37442922374429227,
        "rougel-58": 0.47963800904977383,
        "rougel-62": 0.04026845637583893,
        "rougel-142": 0.5795918367346938,
        "rougel-175": 0.5315315315315315,
        "meteor-186": 0.24028537483471252,
        "meteor-30": 0.2492228798425274,
        "meteor-6": 0.3553505322623842,
        "meteor-75": 0.2784329140461216,
        "meteor-66": 0.3911017058747973,
        "meteor-60": 0.34451363851560507,
        "meteor-37": 0.4820058797536275,
        "meteor-27": 0.35565880945707484,
        "meteor-197": 0.08539826171329318,
        "meteor-154": 0.4212909737401481,
        "meteor-22": 0.3822992855853158,
        "meteor-172": 0.27155206168353346,
        "meteor-119": 0.26132469257373475,
        "meteor-8": 0.4472618724559024,
        "meteor-7": 0.3505089962121213,
        "meteor-23": 0.23861012971046436,
        "meteor-58": 0.2543455843149133,
        "meteor-62": 0.011895321173671687,
        "meteor-142": 0.3304008175866033,
        "meteor-175": 0.2858946266511714,
        "ruby-186": 0.11250000000000004,
        "ruby-30": 0.29496402877697847,
        "ruby-6": 0.38129496402877694,
        "ruby-75": 0.38848920863309355,
        "ruby-66": 0.3597122302158273,
        "ruby-60": 0.28776978417266186,
        "ruby-37": 0.38848920863309355,
        "ruby-27": 0.36690647482014394,
        "ruby-197": 0.08633093525179858,
        "ruby-154": 0.38848920863309355,
        "ruby-22": 0.30714285714285716,
        "ruby-172": 0.39568345323741005,
        "ruby-119": 0.38848920863309355,
        "ruby-8": 0.2869955156950673,
        "ruby-7": 0.20382165605095537,
        "ruby-23": 0.28057553956834536,
        "ruby-58": 0.3381294964028777,
        "ruby-62": 0.021582733812949617,
        "ruby-142": 0.4532374100719424,
        "ruby-175": 0.41007194244604317,
        "codebertscore_f1-186": 0.7216701507568359,
        "codebertscore_f3-186": 0.7293369174003601,
        "codebertscore_f1-30": 0.7110652327537537,
        "codebertscore_f3-30": 0.6848907470703125,
        "codebertscore_f1-6": 0.7538911700248718,
        "codebertscore_f3-6": 0.6923636198043823,
        "codebertscore_f1-75": 0.771980345249176,
        "codebertscore_f3-75": 0.7319145202636719,
        "codebertscore_f1-66": 0.7606104016304016,
        "codebertscore_f3-66": 0.730793833732605,
        "codebertscore_f1-60": 0.7226686477661133,
        "codebertscore_f3-60": 0.7032266855239868,
        "codebertscore_f1-37": 0.7517402768135071,
        "codebertscore_f3-37": 0.7251966595649719,
        "codebertscore_f1-27": 0.7585663199424744,
        "codebertscore_f3-27": 0.7311394214630127,
        "codebertscore_f1-197": 0.6144510507583618,
        "codebertscore_f3-197": 0.5740586519241333,
        "codebertscore_f1-154": 0.7650039196014404,
        "codebertscore_f3-154": 0.7369697093963623,
        "codebertscore_f1-22": 0.7893490195274353,
        "codebertscore_f3-22": 0.7579057812690735,
        "codebertscore_f1-172": 0.7687223553657532,
        "codebertscore_f3-172": 0.7134078741073608,
        "codebertscore_f1-119": 0.7555413842201233,
        "codebertscore_f3-119": 0.6980558633804321,
        "codebertscore_f1-8": 0.7534781694412231,
        "codebertscore_f3-8": 0.7363057136535645,
        "codebertscore_f1-7": 0.7630158066749573,
        "codebertscore_f3-7": 0.7460246086120605,
        "codebertscore_f1-23": 0.7282224893569946,
        "codebertscore_f3-23": 0.6916301250457764,
        "codebertscore_f1-58": 0.7555550336837769,
        "codebertscore_f3-58": 0.705877959728241,
        "codebertscore_f1-62": 0.5271794199943542,
        "codebertscore_f3-62": 0.4899887442588806,
        "codebertscore_f1-142": 0.7912304401397705,
        "codebertscore_f3-142": 0.7539272308349609,
        "codebertscore_f1-175": 0.7652395367622375,
        "codebertscore_f3-175": 0.7100872993469238,
        "codebertscore_s_f1-186": 0.8274950385093689,
        "codebertscore_s_f3-186": 0.8368518352508545,
        "codebertscore_s_f1-30": 0.8571980595588684,
        "codebertscore_s_f3-30": 0.8228171467781067,
        "codebertscore_s_f1-6": 0.8866628408432007,
        "codebertscore_s_f3-6": 0.8418176770210266,
        "codebertscore_s_f1-75": 0.8839986324310303,
        "codebertscore_s_f3-75": 0.850265383720398,
        "codebertscore_s_f1-66": 0.8788161873817444,
        "codebertscore_s_f3-66": 0.8492369651794434,
        "codebertscore_s_f1-60": 0.8584873676300049,
        "codebertscore_s_f3-60": 0.8286873698234558,
        "codebertscore_s_f1-37": 0.8707420229911804,
        "codebertscore_s_f3-37": 0.8460472226142883,
        "codebertscore_s_f1-27": 0.8772475123405457,
        "codebertscore_s_f3-27": 0.8511812090873718,
        "codebertscore_s_f1-197": 0.8586212396621704,
        "codebertscore_s_f3-197": 0.8007000684738159,
        "codebertscore_s_f1-154": 0.8763720393180847,
        "codebertscore_s_f3-154": 0.8512760400772095,
        "codebertscore_s_f1-22": 0.879866898059845,
        "codebertscore_s_f3-22": 0.8548848628997803,
        "codebertscore_s_f1-172": 0.8888339996337891,
        "codebertscore_s_f3-172": 0.8461949229240417,
        "codebertscore_s_f1-119": 0.886056125164032,
        "codebertscore_s_f3-119": 0.8445358276367188,
        "codebertscore_s_f1-8": 0.8537086844444275,
        "codebertscore_s_f3-8": 0.8437270522117615,
        "codebertscore_s_f1-7": 0.8672868013381958,
        "codebertscore_s_f3-7": 0.8498435020446777,
        "codebertscore_s_f1-23": 0.8663264513015747,
        "codebertscore_s_f3-23": 0.8281053304672241,
        "codebertscore_s_f1-58": 0.8818066716194153,
        "codebertscore_s_f3-58": 0.8434159159660339,
        "codebertscore_s_f1-62": 0.8497399687767029,
        "codebertscore_s_f3-62": 0.7869721055030823,
        "codebertscore_s_f1-142": 0.8905987739562988,
        "codebertscore_s_f3-142": 0.859885036945343,
        "codebertscore_s_f1-175": 0.8866322040557861,
        "codebertscore_s_f3-175": 0.8448499441146851,
        "gpt35_nsnr-186": 3,
        "raw_gpt35_nsnr-186": "3",
        "gpt35_nsnr-30": 4,
        "raw_gpt35_nsnr-30": "4",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-75": 3,
        "raw_gpt35_nsnr-75": "3",
        "gpt35_nsnr-66": 3,
        "raw_gpt35_nsnr-66": "3",
        "gpt35_nsnr-60": 3,
        "raw_gpt35_nsnr-60": "3",
        "gpt35_nsnr-37": 3,
        "raw_gpt35_nsnr-37": "3",
        "gpt35_nsnr-27": 4,
        "raw_gpt35_nsnr-27": "4",
        "gpt35_nsnr-197": 2,
        "raw_gpt35_nsnr-197": "2",
        "gpt35_nsnr-154": 4,
        "raw_gpt35_nsnr-154": "4",
        "gpt35_nsnr-22": 3,
        "raw_gpt35_nsnr-22": "3",
        "gpt35_nsnr-172": 4,
        "raw_gpt35_nsnr-172": "4",
        "gpt35_nsnr-119": 4,
        "raw_gpt35_nsnr-119": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-58": 4,
        "raw_gpt35_nsnr-58": "4",
        "gpt35_nsnr-62": 2,
        "raw_gpt35_nsnr-62": "2",
        "gpt35_nsnr-142": 4,
        "raw_gpt35_nsnr-142": "4",
        "gpt35_nsnr-175": 4,
        "raw_gpt35_nsnr-175": "4",
        "gpt35_nswr-186": 3,
        "raw_gpt35_nswr-186": "3",
        "gpt35_nswr-30": 3,
        "raw_gpt35_nswr-30": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-75": 3,
        "raw_gpt35_nswr-75": "3",
        "gpt35_nswr-66": 3,
        "raw_gpt35_nswr-66": "3",
        "gpt35_nswr-60": 3,
        "raw_gpt35_nswr-60": "3",
        "gpt35_nswr-37": 3,
        "raw_gpt35_nswr-37": "3",
        "gpt35_nswr-27": 3,
        "raw_gpt35_nswr-27": "3",
        "gpt35_nswr-197": 2,
        "raw_gpt35_nswr-197": "2",
        "gpt35_nswr-154": 3,
        "raw_gpt35_nswr-154": "3",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-172": 3,
        "raw_gpt35_nswr-172": "3",
        "gpt35_nswr-119": 4,
        "raw_gpt35_nswr-119": "4",
        "gpt35_nswr-8": 2,
        "raw_gpt35_nswr-8": "2",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-58": 4,
        "raw_gpt35_nswr-58": "4",
        "gpt35_nswr-62": 0,
        "raw_gpt35_nswr-62": "0",
        "gpt35_nswr-142": 3,
        "raw_gpt35_nswr-142": "3",
        "gpt35_nswr-175": 3,
        "raw_gpt35_nswr-175": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // This function takes a list l and returns a list l' such that\n    // l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    // to the values of the even indicies of l, but sorted.\n    // >>> sort_even([1, 2, 3])\n    // [1, 2, 3]\n    // >>> sort_even([5, 6, 3, 4])\n    // [3, 6, 5, 4]\n    public static ArrayList<Integer> sortEven(ArrayList<Integer> l) {\n",
        "snippet": [
            "        List<Integer> even = new ArrayList<>();\n        for (int i = 0; i < l.size(); i += 2) {\n            even.add(l.get(i));\n        }\n        Collections.sort(even);\n        List<Integer> result = l;\n        for (int i = 0; i < l.size(); i += 2) {\n            result.set(i, even.get(i / 2));\n        }\n        return result;\n    }\n}"
        ],
        "simplified": "This function takes a list l and returns a list l' such that l' is identical to l in the odd indicies, while its values at the even indicies are equal to the values of the even indicies of l, but sorted.",
        "task_id": "37",
        "179": "ArrayList<Integer> lp = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                lp.add(l.get(i));\n            } else {\n                lp.add(Math.min(l.get(i), l.get(i-1)));\n            }\n        }\n        return lp;",
        "grade-179": {
            "execution": 0
        },
        "30": "ArrayList<Integer> s = new ArrayList<>();\n        int size = l.size();\n        ArrayList<Integer> even_indicies = new ArrayList<>();\n        for (int i = 0; i < size; i++) {\n            if (i % 2 == 0) {\n                even_indicies.add(l.get(i));\n            }\n        }\n        ArrayList<Integer> sorted_even_indicies = new ArrayList<>(even_indicies);\n        Collections.sort(sorted_even_indicies);\n        int n = 0;\n        for (int i = 0; i < size; i++) {\n            if (i % 2 == 0) {\n                s.add(sorted_even_indicies.get(n));\n                n++;\n            } else {\n                s.add(l.get(i));\n            }\n        }\n        return s;",
        "grade-30": {
            "execution": 1
        },
        "6": "ArrayList<Integer> l2 = new ArrayList<Integer>();\n\tArrayList<Integer> l3 = new ArrayList<Integer>();\n\tfor (int i = 0; i < l.size(); i++) {\n\t    if (i % 2 == 0) {\n\t\tl2.add(l.get(i));\n\t    } else {\n\t\tl3.add(l.get(i));\n\t    }\n\t}\n\tCollections.sort(l2);\n\tfor (int i = 0; i < l2.size(); i++) {\n\t    l3.add(i * 2, l2.get(i));\n\t}\n\treturn l3;",
        "grade-6": {
            "execution": 1
        },
        "77": "ArrayList<Integer> out = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0)\n                out.add(l.get(i));\n            else {\n                ArrayList<Integer> temp = new ArrayList<Integer>();\n                for (int j = 0; j < i; j++)\n                    if (j % 2 == 1)\n                        temp.add(out.get(j));\n                temp.add(l.get(i));\n                Collections.sort(temp);\n                out.addAll(temp);\n            }\n        }\n        return out;",
        "grade-77": {
            "execution": 0
        },
        "69": "// Write code here to implement this function.\n        return null;",
        "grade-69": {
            "execution": 0
        },
        "64": "ArrayList<Integer> ret = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                ret.add(l.get(i));\n            } else {\n                ArrayList<Integer> sublist = new ArrayList<>();\n                for (int j = i; j < l.size(); j++) {\n                    sublist.add(l.get(j));\n                }\n                Collections.sort(sublist);\n                for (int j = 0; j < sublist.size(); j++) {\n                    ret.add(sublist.get(j));\n                }\n                return ret;\n            }\n        }\n        return ret;",
        "grade-64": {
            "execution": 0
        },
        "39": "for (int i = 0; i < l.size(); i += 2) {\n            int start = i;\n            int end = i + 1;\n            while (end < l.size() && l.get(end) < l.get(end - 1)) {\n                Collections.swap(l, end, end - 1);\n                end++;\n            }\n        }\n        return l;",
        "grade-39": {
            "execution": 0
        },
        "28": "throw new UnsupportedOperationException(\"Student has not implemented this.\");",
        "grade-28": {
            "execution": 0
        },
        "190": "ArrayList<Integer> new_l = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                new_l.add(l.get(i));\n            } else {\n                ArrayList<Integer> evens = new ArrayList<Integer>();\n                for (int j = 0; j < l.size(); j++) {\n                    if (j % 2 == 0) {\n                        evens.add(l.get(j));\n                    }\n                }\n                Collections.sort(evens);\n                new_l.add(evens.get(i / 2));\n            }\n        }\n        return new_l;",
        "grade-190": {
            "execution": 0
        },
        "152": "ArrayList<Integer> l1 = new ArrayList<Integer>();\n        ArrayList<Integer> evens = new ArrayList<Integer>();\n        ArrayList<Integer> odds = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                odds.add(l.get(i));\n            } else {\n                evens.add(l.get(i));\n            }\n        }\n        Collections.sort(evens);\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l1.add(odds.get(i / 2));\n            } else {\n                l1.add(evens.get(i / 2));\n            }\n        }\n        return l1;",
        "grade-152": {
            "execution": 0
        },
        "23": "ArrayList<Integer> l1 = new ArrayList<Integer>();\n        ArrayList<Integer> l2 = new ArrayList<Integer>();\n        ArrayList<Integer> ret = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l1.add(l.get(i));\n            } else {\n                l2.add(l.get(i));\n            }\n        }\n        Collections.sort(l2);\n        int index = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                ret.add(l1.get(index));\n            } else {\n                ret.add(l2.get(index));\n                index++;\n            }\n        }\n        return ret;",
        "grade-23": {
            "execution": 0
        },
        "166": "// TODO: Your code here\n        ArrayList<Integer> l1 = new ArrayList<Integer>();\n        ArrayList<Integer> l2 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l1.add(l.get(i));\n            } else {\n                l2.add(l.get(i));\n            }\n        }\n        Collections.sort(l1);\n        for (int i = 0; i < l1.size(); i++) {\n            l.set(2 * i + 1, l1.get(i));\n        }\n        return l;",
        "grade-166": {
            "execution": 0
        },
        "117": "// TODO: Fill in this function\n        return l;",
        "grade-117": {
            "execution": 0
        },
        "8": "// TODO: Write your code here\n        ArrayList<Integer> sorted = new ArrayList<>();\n        int i = 0;\n        for (int num : l) {\n            if (i % 2 == 0) {\n                sorted.add(num);\n            } else {\n                ArrayList<Integer> temp = new ArrayList<>();\n                temp.add(num);\n                Collections.sort(temp);\n                sorted.add(temp.get(0));\n            }\n            i++;\n        }\n        return sorted;",
        "grade-8": {
            "execution": 0
        },
        "7": "// We can just do this in one pass by iterating through the list and\n        // if the index is even, we perform an insertion sort.\n        // If it is odd, we simply add that element.\n        // This is O(n^2) unfortunately, but we'll try to be as efficient as possible\n        ArrayList<Integer> results = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                // Insertion sort\n                // We first add the element to the results\n                results.add(l.get(i));\n                // Then we go through the results backwards until we've either\n                // reached the beginning of the list or we've found a number that\n                // is smaller than the one we inserted\n                for (int j = results.size() - 1; j > 0; j--) {\n                    if (results.get(j) < results.get(j - 1)) {\n                        // Swap the elements\n                        int tmp = results.get(j);\n                        results.set(j, results.get(j - 1));\n                        results.set(j - 1, tmp);\n                    } else {\n                        // We've found the right place in the list to put our number\n                        break;\n                    }\n                }\n            } else {\n                // Simply add the number to the results\n                results.add(l.get(i));\n            }\n        }\n        return results;",
        "grade-7": {
            "execution": 0
        },
        "24": "return l;",
        "grade-24": {
            "execution": 0
        },
        "62": "int n = l.size();\n        for (int i = 0; i < n; i += 2) {\n            int min_idx = i;\n            for (int j = i + 2; j < n; j += 2) {\n                if (l.get(j) < l.get(min_idx)) {\n                    min_idx = j;\n                }\n            }\n            int temp = l.get(i);\n            l.set(i, l.get(min_idx));\n            l.set(min_idx, temp);\n        }\n        return l;",
        "grade-62": {
            "execution": 1
        },
        "66": "ArrayList<Integer> sorted = new ArrayList<Integer>();\n        int index = 0;\n        while (index < l.size()) {\n            sorted.add(l.get(index));\n            index++;\n            if (index < l.size()) {\n                ArrayList<Integer> sublist = new ArrayList<Integer>();\n                while (index < l.size() && l.get(index) % 2 == 0) {\n                    sublist.add(l.get(index));\n                    index++;\n                }\n                Collections.sort(sublist);\n                sorted.addAll(sublist);\n            }\n        }\n        return sorted;",
        "grade-66": {
            "execution": 0
        },
        "141": "for (int i = 1; i < l.size(); i += 2) {\n            int index = i;\n            for (int j = i + 2; j < l.size(); j += 2) {\n                if (l.get(j) < l.get(index)) {\n                    index = j;\n                }\n            }\n            int tmp = l.get(i);\n            l.set(i, l.get(index));\n            l.set(index, tmp);\n        }\n        return l;",
        "grade-141": {
            "execution": 0
        },
        "169": "ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            int curr = l.get(i);\n            if (i % 2 == 0) {\n                result.add(curr);\n            } else {\n                result.add(curr);\n                int min = curr;\n                int minIdx = i;\n                for (int j = i + 1; j < l.size(); j++) {\n                    int val = l.get(j);\n                    if (j % 2 == 1) {\n                        if (val < min) {\n                            min = val;\n                            minIdx = j;\n                        }\n                    }\n                }\n                if (minIdx != i) {\n                    result.set(i, min);\n                    result.set(minIdx, curr);\n                }\n            }\n        }\n        return result;",
        "grade-169": {
            "execution": 0
        },
        "bleu-179": 0.4600577733912941,
        "bleu-30": 0.3633933192229409,
        "bleu-6": 0.48473258098398064,
        "bleu-77": 0.38020732914758404,
        "bleu-69": 3.415582458385295e-05,
        "bleu-64": 0.40639589223253303,
        "bleu-39": 0.3213927090487041,
        "bleu-28": 0.00022181600857833797,
        "bleu-190": 0.44168744185539294,
        "bleu-152": 0.40374361855424373,
        "bleu-23": 0.3705514555714904,
        "bleu-166": 0.4648539186993987,
        "bleu-117": 1.582472365405063e-05,
        "bleu-8": 0.30693789276839284,
        "bleu-7": 0.17581184047334747,
        "bleu-24": 7.736350263429618e-16,
        "bleu-62": 0.4116041141054585,
        "bleu-66": 0.2933623480107631,
        "bleu-141": 0.4327977641716908,
        "bleu-169": 0.34130243649393954,
        "codebleu-179": 0.6446798733967248,
        "codebleu-30": 0.7446835204210355,
        "codebleu-6": 0.759337901093028,
        "codebleu-77": 0.7031017724992832,
        "codebleu-69": 0.054087448157165305,
        "codebleu-64": 0.7423545586957128,
        "codebleu-39": 0.524774216981319,
        "codebleu-28": 0.027027052345108465,
        "codebleu-190": 0.766290469413047,
        "codebleu-152": 0.7688511603267216,
        "codebleu-23": 0.7442412464456996,
        "codebleu-166": 0.7598122814868623,
        "codebleu-117": 0.03154449260814384,
        "codebleu-8": 0.602086375795592,
        "codebleu-7": 0.7171145808546935,
        "codebleu-24": 0.009009009009087002,
        "codebleu-62": 0.6738301724509029,
        "codebleu-66": 0.6663442690167972,
        "codebleu-141": 0.7011832908598853,
        "codebleu-169": 0.7268567595317614,
        "chrf-179": 0.46488677032337294,
        "chrf-30": 0.5509318737167371,
        "chrf-6": 0.6127607647605324,
        "chrf-77": 0.5318038524586132,
        "chrf-69": 0.07883081751198433,
        "chrf-64": 0.6035581760843057,
        "chrf-39": 0.35591249906988076,
        "chrf-28": 0.0786590098505478,
        "chrf-190": 0.6334951321136683,
        "chrf-152": 0.6304323299614347,
        "chrf-23": 0.5839679960232464,
        "chrf-166": 0.6135189340864213,
        "chrf-117": 0.05842238431656078,
        "chrf-8": 0.4299984746516596,
        "chrf-7": 0.3947835727860341,
        "chrf-24": 0.024999341381473132,
        "chrf-62": 0.3409699362580782,
        "chrf-66": 0.46563586252531136,
        "chrf-141": 0.3740207574932153,
        "chrf-169": 0.5494774805437611,
        "rougel-179": 0.6464646464646465,
        "rougel-30": 0.56,
        "rougel-6": 0.680327868852459,
        "rougel-77": 0.5783132530120482,
        "rougel-69": 0.05042016806722689,
        "rougel-64": 0.6106870229007634,
        "rougel-39": 0.46560846560846564,
        "rougel-28": 0.0819672131147541,
        "rougel-190": 0.6482213438735177,
        "rougel-152": 0.6013986013986015,
        "rougel-23": 0.584192439862543,
        "rougel-166": 0.6640316205533597,
        "rougel-117": 0.05128205128205128,
        "rougel-8": 0.5,
        "rougel-7": 0.3444976076555024,
        "rougel-24": 0.03669724770642202,
        "rougel-62": 0.49074074074074076,
        "rougel-66": 0.5454545454545455,
        "rougel-141": 0.5023255813953489,
        "rougel-169": 0.5473684210526315,
        "meteor-179": 0.5492394243497346,
        "meteor-30": 0.5489266769513692,
        "meteor-6": 0.7490497498807748,
        "meteor-77": 0.542985358497361,
        "meteor-69": 0.020682523267838676,
        "meteor-64": 0.7081025597509114,
        "meteor-39": 0.3179972656943773,
        "meteor-28": 0.025773195876288662,
        "meteor-190": 0.6197259808110532,
        "meteor-152": 0.6344685230742155,
        "meteor-23": 0.5353507839651344,
        "meteor-166": 0.7929848522849056,
        "meteor-117": 0.02072538860103627,
        "meteor-8": 0.4390384456358449,
        "meteor-7": 0.5166377258148046,
        "meteor-24": 0.01567398119122257,
        "meteor-62": 0.4200899190777733,
        "meteor-66": 0.498488388761468,
        "meteor-141": 0.4252241760590566,
        "meteor-169": 0.5634929390997353,
        "ruby-179": 0.4716981132075472,
        "ruby-30": 0.3905325443786982,
        "ruby-6": 0.5579710144927537,
        "ruby-77": 0.46853146853146854,
        "ruby-69": 0.028301886792452824,
        "ruby-64": 0.46794871794871795,
        "ruby-39": 0.34905660377358494,
        "ruby-28": 0.047169811320754707,
        "ruby-190": 0.5306122448979591,
        "ruby-152": 0.46111111111111114,
        "ruby-23": 0.4378378378378378,
        "ruby-166": 0.5306122448979591,
        "ruby-117": 0.018867924528301883,
        "ruby-8": 0.3113207547169812,
        "ruby-7": 0.22435897435897434,
        "ruby-24": 0.018867924528301883,
        "ruby-62": 0.26363636363636367,
        "ruby-66": 0.3970588235294118,
        "ruby-141": 0.3119266055045872,
        "ruby-169": 0.4134078212290503,
        "codebertscore_f1-179": 0.8415971398353577,
        "codebertscore_f3-179": 0.8426196575164795,
        "codebertscore_f1-30": 0.8130406737327576,
        "codebertscore_f3-30": 0.8515463471412659,
        "codebertscore_f1-6": 0.8710664510726929,
        "codebertscore_f3-6": 0.8811097741127014,
        "codebertscore_f1-77": 0.8341373801231384,
        "codebertscore_f3-77": 0.8452135920524597,
        "codebertscore_f1-69": 0.5786773562431335,
        "codebertscore_f3-69": 0.5635300278663635,
        "codebertscore_f1-64": 0.833066999912262,
        "codebertscore_f3-64": 0.8426252007484436,
        "codebertscore_f1-39": 0.800161600112915,
        "codebertscore_f3-39": 0.7967763543128967,
        "codebertscore_f1-28": 0.5986840128898621,
        "codebertscore_f3-28": 0.5815558433532715,
        "codebertscore_f1-190": 0.8418664932250977,
        "codebertscore_f3-190": 0.8552960157394409,
        "codebertscore_f1-152": 0.8363515734672546,
        "codebertscore_f3-152": 0.8578103184700012,
        "codebertscore_f1-23": 0.8240844011306763,
        "codebertscore_f3-23": 0.8436599969863892,
        "codebertscore_f1-166": 0.8271253108978271,
        "codebertscore_f3-166": 0.8426765203475952,
        "codebertscore_f1-117": 0.6147652268409729,
        "codebertscore_f3-117": 0.6001455187797546,
        "codebertscore_f1-8": 0.7764908671379089,
        "codebertscore_f3-8": 0.7887979745864868,
        "codebertscore_f1-7": 0.7293091416358948,
        "codebertscore_f3-7": 0.8015830516815186,
        "codebertscore_f1-24": 0.57610023021698,
        "codebertscore_f3-24": 0.516575276851654,
        "codebertscore_f1-62": 0.7834447622299194,
        "codebertscore_f3-62": 0.7809802293777466,
        "codebertscore_f1-66": 0.8158048391342163,
        "codebertscore_f3-66": 0.8201553821563721,
        "codebertscore_f1-141": 0.7955194711685181,
        "codebertscore_f3-141": 0.777171790599823,
        "codebertscore_f1-169": 0.7884049415588379,
        "codebertscore_f3-169": 0.8189122676849365,
        "codebertscore_s_f1-179": 0.8620659112930298,
        "codebertscore_s_f3-179": 0.8640639781951904,
        "codebertscore_s_f1-30": 0.8338505625724792,
        "codebertscore_s_f3-30": 0.8650944232940674,
        "codebertscore_s_f1-6": 0.881537675857544,
        "codebertscore_s_f3-6": 0.8905090689659119,
        "codebertscore_s_f1-77": 0.8510175347328186,
        "codebertscore_s_f3-77": 0.8596487641334534,
        "codebertscore_s_f1-69": 0.5912109613418579,
        "codebertscore_s_f3-69": 0.5748289823532104,
        "codebertscore_s_f1-64": 0.8588167428970337,
        "codebertscore_s_f3-64": 0.8647639155387878,
        "codebertscore_s_f1-39": 0.8183624148368835,
        "codebertscore_s_f3-39": 0.8169407248497009,
        "codebertscore_s_f1-28": 0.5874347686767578,
        "codebertscore_s_f3-28": 0.5691642165184021,
        "codebertscore_s_f1-190": 0.8672603964805603,
        "codebertscore_s_f3-190": 0.8776882886886597,
        "codebertscore_s_f1-152": 0.8579608201980591,
        "codebertscore_s_f3-152": 0.8707125186920166,
        "codebertscore_s_f1-23": 0.8517446517944336,
        "codebertscore_s_f3-23": 0.8600967526435852,
        "codebertscore_s_f1-166": 0.8362278342247009,
        "codebertscore_s_f3-166": 0.8514542579650879,
        "codebertscore_s_f1-117": 0.6353014707565308,
        "codebertscore_s_f3-117": 0.6278536319732666,
        "codebertscore_s_f1-8": 0.7871466279029846,
        "codebertscore_s_f3-8": 0.7997835278511047,
        "codebertscore_s_f1-7": 0.7642395496368408,
        "codebertscore_s_f3-7": 0.8300231099128723,
        "codebertscore_s_f1-24": 0.6866092085838318,
        "codebertscore_s_f3-24": 0.6158925294876099,
        "codebertscore_s_f1-62": 0.7929926514625549,
        "codebertscore_s_f3-62": 0.7952919602394104,
        "codebertscore_s_f1-66": 0.8311866521835327,
        "codebertscore_s_f3-66": 0.8342568278312683,
        "codebertscore_s_f1-141": 0.8058059215545654,
        "codebertscore_s_f3-141": 0.7926687002182007,
        "codebertscore_s_f1-169": 0.8152860403060913,
        "codebertscore_s_f3-169": 0.8409062027931213,
        "gpt35_nsnr-179": 3,
        "raw_gpt35_nsnr-179": "3",
        "gpt35_nsnr-30": 4,
        "raw_gpt35_nsnr-30": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-77": 3,
        "raw_gpt35_nsnr-77": "3",
        "gpt35_nsnr-69": 0,
        "raw_gpt35_nsnr-69": "0",
        "gpt35_nsnr-64": 3,
        "raw_gpt35_nsnr-64": "3",
        "gpt35_nsnr-39": 3,
        "raw_gpt35_nsnr-39": "3",
        "gpt35_nsnr-28": 0,
        "raw_gpt35_nsnr-28": "0",
        "gpt35_nsnr-190": 3,
        "raw_gpt35_nsnr-190": "3",
        "gpt35_nsnr-152": 4,
        "raw_gpt35_nsnr-152": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-166": 4,
        "raw_gpt35_nsnr-166": "4",
        "gpt35_nsnr-117": 3,
        "raw_gpt35_nsnr-117": "3",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-24": 4,
        "raw_gpt35_nsnr-24": "4",
        "gpt35_nsnr-62": 3,
        "raw_gpt35_nsnr-62": "3",
        "gpt35_nsnr-66": 4,
        "raw_gpt35_nsnr-66": "4",
        "gpt35_nsnr-141": 3,
        "raw_gpt35_nsnr-141": "3",
        "gpt35_nsnr-169": 4,
        "raw_gpt35_nsnr-169": "4",
        "gpt35_nswr-179": 2,
        "raw_gpt35_nswr-179": "2",
        "gpt35_nswr-30": 3,
        "raw_gpt35_nswr-30": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-77": 2,
        "raw_gpt35_nswr-77": "2",
        "gpt35_nswr-69": 0,
        "raw_gpt35_nswr-69": "0",
        "gpt35_nswr-64": 2,
        "raw_gpt35_nswr-64": "2",
        "gpt35_nswr-39": 3,
        "raw_gpt35_nswr-39": "3",
        "gpt35_nswr-28": 0,
        "raw_gpt35_nswr-28": "0",
        "gpt35_nswr-190": 2,
        "raw_gpt35_nswr-190": "2",
        "gpt35_nswr-152": 3,
        "raw_gpt35_nswr-152": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-166": 3,
        "raw_gpt35_nswr-166": "3",
        "gpt35_nswr-117": 2,
        "raw_gpt35_nswr-117": "2",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 2,
        "raw_gpt35_nswr-7": "2",
        "gpt35_nswr-24": 2,
        "raw_gpt35_nswr-24": "2",
        "gpt35_nswr-62": 3,
        "raw_gpt35_nswr-62": "3",
        "gpt35_nswr-66": 3,
        "raw_gpt35_nswr-66": "3",
        "gpt35_nswr-141": 3,
        "raw_gpt35_nswr-141": "3",
        "gpt35_nswr-169": 2,
        "raw_gpt35_nswr-169": "2"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Create a function that takes 3 numbers.\n    // Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    // Returns false in any other cases.\n    // Examples\n    // any_int(5, 2, 7) \u279e True\n    // any_int(3, 2, 2) \u279e False\n    // any_int(3, -2, 1) \u279e True\n    // any_int(3.6, -2.2, 2) \u279e False\n    public static boolean anyInt(float x, float y, float z) {\n",
        "snippet": [
            "        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            return (int) x + (int) y == (int) z || (int) x + (int) z == (int) y || (int) y + (int) z == (int) x;\n        }\n        return false;\n    }\n}"
        ],
        "simplified": "Create a function that takes 3 numbers. Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers. Returns false in any other cases.",
        "task_id": "92",
        "32": "if (isInt(x) && isInt(y) && isInt(z))\n            return x + y == z || x + z == y || y + z == x;\n        return false;",
        "grade-32": {
            "execution": 0
        },
        "6": "return (x + y == z) || (x + z == y) || (y + z == x);",
        "grade-6": {
            "execution": 0
        },
        "77": "return Integer.valueOf((int)x) == Integer.valueOf((int)y) || Integer.valueOf((int)x) == Integer.valueOf((int)z) || Integer.valueOf((int)y) == Integer.valueOf((int)z);",
        "grade-77": {
            "execution": 0
        },
        "69": "// Code goes here\n        return false;",
        "grade-69": {
            "execution": 0
        },
        "64": "boolean xyz = Math.floor(x) == x;\n        boolean yz = Math.floor(y) == y;\n        boolean zx = Math.floor(z) == z;\n        boolean sumxy = x + y == z;\n        boolean sumxz = x + z == y;\n        boolean sumyz = y + z == x;\n        return xyz && yz && zx && (sumxy || sumxz || sumyz);",
        "grade-64": {
            "execution": 0
        },
        "39": "return (Math.ceil(x) == Math.ceil(y + z) || Math.ceil(y) == Math.ceil(x + z) || Math.ceil(z) == Math.ceil(x + y));",
        "grade-39": {
            "execution": 0
        },
        "30": "try {\n            Integer.parseInt(Float.toString(x));\n            Integer.parseInt(Float.toString(y));\n            Integer.parseInt(Float.toString(z));\n        } catch (NumberFormatException e) {\n            return false;\n        }\n        return (x == y + z) || (y == x + z) || (z == x + y);",
        "grade-30": {
            "execution": 0
        },
        "169": "return (Math.round(x) + Math.round(y) == Math.round(z)) || (Math.round(x) + Math.round(z) == Math.round(y)) || (Math.round(y) + Math.round(z) == Math.round(x));",
        "grade-169": {
            "execution": 0
        },
        "23": "// y+z=x\n        // x+z=y\n        // x+y=z\n        double xr = (double)x;\n        double yr = (double)y;\n        double zr = (double)z;\n        if (xr==yr+zr || yr==xr+zr || zr==xr+yr) {\n            return true;\n        }\n        return false;",
        "grade-23": {
            "execution": 0
        },
        "185": "float max = Math.max(x, Math.max(y, z));\n        if(max == x) {\n            return y + z == x;\n        }\n        if(max == y) {\n            return x + z == y;\n        }\n        if(max == z) {\n            return x + y == z;\n        }\n        return false;",
        "grade-185": {
            "execution": 0
        },
        "128": "if(Float.isNaN(x) || Float.isNaN(y) || Float.isNaN(z)) return false;\n        if(x > (y + z) || x < (y + z)) return false;\n        if(y > (x + z) || y < (x + z)) return false;\n        if(z > (x + y) || z < (x + y)) return false;\n        return true;",
        "grade-128": {
            "execution": 0
        },
        "8": "try {\n            if (Integer.valueOf(String.valueOf(x)) == Integer.valueOf(String.valueOf(y))\n                    || Integer.valueOf(String.valueOf(x)) == Integer.valueOf(String.valueOf(z))\n                    || Integer.valueOf(String.valueOf(y)) == Integer.valueOf(String.valueOf(z))) {\n                return true;\n            }\n        } catch (Exception e) {\n            System.out.println(e);\n        }\n        return false;",
        "grade-8": {
            "execution": 0
        },
        "7": "// Write your code here.\n        if(x % 1 == 0 && y % 1 == 0 && z % 1 == 0) {\n            if((x + y == z) || (x + z == y) || (y + z == x)) {\n                return true;\n            }\n        }\n        return false;",
        "grade-7": {
            "execution": 0
        },
        "24": "if (((int)x + (int)y == (int)z) || ((int)x + (int)z == (int)y) || ((int)y + (int)z == (int)x)) {\n            return true;\n        }\n        return false;",
        "grade-24": {
            "execution": 0
        },
        "62": "boolean anyIntResult = false;\n        if ( (x % 1 == 0) && (y % 1 == 0) && (z % 1 == 0) ) {\n            if ( (x == y + z) || (y == x + z) || (z == x + y) ) {\n                anyIntResult = true;\n            }\n        }\n        return anyIntResult;",
        "grade-62": {
            "execution": 0
        },
        "66": "int count = 0;\n        if (isInteger(x)) count++;\n        if (isInteger(y)) count++;\n        if (isInteger(z)) count++;\n        if (count != 3) return false;\n        float sum = x + y + z;\n        if (sum == x || sum == y || sum == z) return true;\n        return false;",
        "grade-66": {
            "execution": 0
        },
        "156": "float max = Float.max(x, Float.max(y, z));\n        if (max != Math.round(max)) {\n            return false;\n        }\n        float sum = x + y + z;\n        return Math.abs(max - (sum - max)) < 0.000001;",
        "grade-156": {
            "execution": 0
        },
        "188": "if ((int)x == (int)y + (int)z) return true;\n        if ((int)y == (int)x + (int)z) return true;\n        if ((int)z == (int)x + (int)y) return true;\n        return false;",
        "grade-188": {
            "execution": 0
        },
        "173": "if ((float)Math.ceil(x) == x && (float)Math.ceil(y) == y && (float)Math.ceil(z) == z) {\n            if (x == y + z || y == x + z || z == x + y) {\n                return true;\n            }\n        }\n        return false;",
        "grade-173": {
            "execution": 0
        },
        "57": "// The problem statement didn't specify what to do if the number is\n        // negative, so I'm simply just checking if they are integers.\n        // I checked if any of the number is equal to the sum of the other two.\n        return ((x == (y + z)) || (y == (x + z)) || (z == (x + y))) && (x % 1 == 0) && (y % 1 == 0) && (z % 1 == 0);",
        "grade-57": {
            "execution": 0
        },
        "bleu-32": 0.09010582293756589,
        "bleu-6": 0.04691509806540323,
        "bleu-77": 0.2304577502849609,
        "bleu-69": 5.370608780482313e-05,
        "bleu-64": 0.06260197455580528,
        "bleu-39": 0.034936038782805295,
        "bleu-30": 0.11519810851153699,
        "bleu-169": 0.06069972333027776,
        "bleu-23": 0.1315424482004194,
        "bleu-185": 0.14578477949094515,
        "bleu-128": 0.04420018257242436,
        "bleu-8": 0.07948147354639128,
        "bleu-7": 0.15263241718743373,
        "bleu-24": 0.6605334090194239,
        "bleu-62": 0.08804297940916067,
        "bleu-66": 0.05867567328895005,
        "bleu-156": 0.07345964718361858,
        "bleu-188": 0.56802874197951,
        "bleu-173": 0.1290807740444174,
        "bleu-57": 0.09230028460229998,
        "codebleu-32": 0.34701211843986207,
        "codebleu-6": 0.1740180298825136,
        "codebleu-77": 0.5126701658653297,
        "codebleu-69": 0.03149071067682059,
        "codebleu-64": 0.4689191165715957,
        "codebleu-39": 0.3437704064030395,
        "codebleu-30": 0.5463653649261372,
        "codebleu-169": 0.4513571287144519,
        "codebleu-23": 0.49265028521281257,
        "codebleu-185": 0.39491004826678366,
        "codebleu-128": 0.4941129150212081,
        "codebleu-8": 0.5153941787333625,
        "codebleu-7": 0.41282726341962844,
        "codebleu-24": 0.6422704574096796,
        "codebleu-62": 0.4563770659646043,
        "codebleu-66": 0.4800716688606113,
        "codebleu-156": 0.351250699311981,
        "codebleu-188": 0.6191402891967214,
        "codebleu-173": 0.5502413339183851,
        "codebleu-57": 0.5197455024133392,
        "chrf-32": 0.20745600106201478,
        "chrf-6": 0.09667045338146325,
        "chrf-77": 0.30986006339815786,
        "chrf-69": 0.09339538327242075,
        "chrf-64": 0.13324296137869265,
        "chrf-39": 0.11991587712020929,
        "chrf-30": 0.31574283097435696,
        "chrf-169": 0.1225263829665605,
        "chrf-23": 0.20535749047155474,
        "chrf-185": 0.20286492012615726,
        "chrf-128": 0.18356565480613102,
        "chrf-8": 0.2836464115733487,
        "chrf-7": 0.22656589011771777,
        "chrf-24": 0.5438169828076729,
        "chrf-62": 0.19501919393620024,
        "chrf-66": 0.2869212636885013,
        "chrf-156": 0.1690096201135965,
        "chrf-188": 0.4948236809884552,
        "chrf-173": 0.23553022007745772,
        "chrf-57": 0.21439206712011946,
        "rougel-32": 0.6016260162601625,
        "rougel-6": 0.5192307692307692,
        "rougel-77": 0.4931506849315069,
        "rougel-69": 0.07317073170731707,
        "rougel-64": 0.33128834355828224,
        "rougel-39": 0.38461538461538464,
        "rougel-30": 0.36024844720496896,
        "rougel-169": 0.44295302013422816,
        "rougel-23": 0.35526315789473684,
        "rougel-185": 0.39455782312925164,
        "rougel-128": 0.3728813559322034,
        "rougel-8": 0.34374999999999994,
        "rougel-7": 0.5578231292517007,
        "rougel-24": 0.8000000000000002,
        "rougel-62": 0.430379746835443,
        "rougel-66": 0.36477987421383645,
        "rougel-156": 0.27737226277372257,
        "rougel-188": 0.5714285714285714,
        "rougel-173": 0.4342105263157895,
        "rougel-57": 0.31088082901554404,
        "meteor-32": 0.5708091530397769,
        "meteor-6": 0.3762851213282247,
        "meteor-77": 0.44056649258208286,
        "meteor-69": 0.04368611935377514,
        "meteor-64": 0.4180463576158941,
        "meteor-39": 0.3691653685898666,
        "meteor-30": 0.5304969912555084,
        "meteor-169": 0.3870446738269705,
        "meteor-23": 0.4319745351269404,
        "meteor-185": 0.39660811473291807,
        "meteor-128": 0.3638812631443754,
        "meteor-8": 0.4282069970845482,
        "meteor-7": 0.5779059304991732,
        "meteor-24": 0.6804267663804917,
        "meteor-62": 0.48093537414965976,
        "meteor-66": 0.4542092025447551,
        "meteor-156": 0.251174402521379,
        "meteor-188": 0.5438850922191939,
        "meteor-173": 0.5783072997330266,
        "meteor-57": 0.4544491885726725,
        "ruby-32": 0.3918918918918919,
        "ruby-6": 0.3648648648648649,
        "ruby-77": 0.22972972972972971,
        "ruby-69": 0.04054054054054057,
        "ruby-64": 0.1235955056179775,
        "ruby-39": 0.22972972972972971,
        "ruby-30": 0.14942528735632188,
        "ruby-169": 0.17333333333333334,
        "ruby-23": 0.21794871794871795,
        "ruby-185": 0.14864864864864868,
        "ruby-128": 0.21359223300970875,
        "ruby-8": 0.22881355932203384,
        "ruby-7": 0.29729729729729726,
        "ruby-24": 0.6351351351351351,
        "ruby-62": 0.22619047619047616,
        "ruby-66": 0.17647058823529416,
        "ruby-156": 0.1216216216216216,
        "ruby-188": 0.3918918918918919,
        "ruby-173": 0.2564102564102564,
        "ruby-57": 0.17647058823529416,
        "codebertscore_f1-32": 0.8840991854667664,
        "codebertscore_f3-32": 0.8713841438293457,
        "codebertscore_f1-6": 0.7944119572639465,
        "codebertscore_f3-6": 0.7555243968963623,
        "codebertscore_f1-77": 0.8008361458778381,
        "codebertscore_f3-77": 0.8028427362442017,
        "codebertscore_f1-69": 0.6286627054214478,
        "codebertscore_f3-69": 0.5971033573150635,
        "codebertscore_f1-64": 0.7573511004447937,
        "codebertscore_f3-64": 0.7561507821083069,
        "codebertscore_f1-39": 0.767996072769165,
        "codebertscore_f3-39": 0.7645682692527771,
        "codebertscore_f1-30": 0.7783751487731934,
        "codebertscore_f3-30": 0.789821445941925,
        "codebertscore_f1-169": 0.7864241600036621,
        "codebertscore_f3-169": 0.7768747210502625,
        "codebertscore_f1-23": 0.7768742442131042,
        "codebertscore_f3-23": 0.7771875262260437,
        "codebertscore_f1-185": 0.7833411693572998,
        "codebertscore_f3-185": 0.7669761776924133,
        "codebertscore_f1-128": 0.7929084897041321,
        "codebertscore_f3-128": 0.7903684377670288,
        "codebertscore_f1-8": 0.7433610558509827,
        "codebertscore_f3-8": 0.7717462778091431,
        "codebertscore_f1-7": 0.815321147441864,
        "codebertscore_f3-7": 0.8138894438743591,
        "codebertscore_f1-24": 0.882117748260498,
        "codebertscore_f3-24": 0.858651876449585,
        "codebertscore_f1-62": 0.7900813817977905,
        "codebertscore_f3-62": 0.7962629199028015,
        "codebertscore_f1-66": 0.7691234946250916,
        "codebertscore_f3-66": 0.7789584398269653,
        "codebertscore_f1-156": 0.7408924698829651,
        "codebertscore_f3-156": 0.7458050847053528,
        "codebertscore_f1-188": 0.8342265486717224,
        "codebertscore_f3-188": 0.8230956792831421,
        "codebertscore_f1-173": 0.8082457184791565,
        "codebertscore_f3-173": 0.8076967000961304,
        "codebertscore_f1-57": 0.7438260316848755,
        "codebertscore_f3-57": 0.7746463418006897,
        "codebertscore_s_f1-32": 0.9527799487113953,
        "codebertscore_s_f3-32": 0.9438093900680542,
        "codebertscore_s_f1-6": 0.935366690158844,
        "codebertscore_s_f3-6": 0.9106959104537964,
        "codebertscore_s_f1-77": 0.9216093420982361,
        "codebertscore_s_f3-77": 0.9198436737060547,
        "codebertscore_s_f1-69": 0.9179466366767883,
        "codebertscore_s_f3-69": 0.8880879878997803,
        "codebertscore_s_f1-64": 0.8853102922439575,
        "codebertscore_s_f3-64": 0.8983575105667114,
        "codebertscore_s_f1-39": 0.9075283408164978,
        "codebertscore_s_f3-39": 0.9068557024002075,
        "codebertscore_s_f1-30": 0.9017823338508606,
        "codebertscore_s_f3-30": 0.9089588522911072,
        "codebertscore_s_f1-169": 0.9141208529472351,
        "codebertscore_s_f3-169": 0.9117538928985596,
        "codebertscore_s_f1-23": 0.8940106630325317,
        "codebertscore_s_f3-23": 0.9006906151771545,
        "codebertscore_s_f1-185": 0.9160069227218628,
        "codebertscore_s_f3-185": 0.909252405166626,
        "codebertscore_s_f1-128": 0.9074661135673523,
        "codebertscore_s_f3-128": 0.914192795753479,
        "codebertscore_s_f1-8": 0.876463770866394,
        "codebertscore_s_f3-8": 0.8999383449554443,
        "codebertscore_s_f1-7": 0.9285111427307129,
        "codebertscore_s_f3-7": 0.9287171959877014,
        "codebertscore_s_f1-24": 0.9527255892753601,
        "codebertscore_s_f3-24": 0.940737783908844,
        "codebertscore_s_f1-62": 0.9166953563690186,
        "codebertscore_s_f3-62": 0.9177678227424622,
        "codebertscore_s_f1-66": 0.9030044674873352,
        "codebertscore_s_f3-66": 0.9119938015937805,
        "codebertscore_s_f1-156": 0.8974756002426147,
        "codebertscore_s_f3-156": 0.8992441892623901,
        "codebertscore_s_f1-188": 0.9386634230613708,
        "codebertscore_s_f3-188": 0.9300717115402222,
        "codebertscore_s_f1-173": 0.9192554354667664,
        "codebertscore_s_f3-173": 0.9181585907936096,
        "codebertscore_s_f1-57": 0.8693134784698486,
        "codebertscore_s_f3-57": 0.9012468457221985,
        "gpt35_nsnr-32": 4,
        "raw_gpt35_nsnr-32": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-77": 3,
        "raw_gpt35_nsnr-77": "3",
        "gpt35_nsnr-69": 3,
        "raw_gpt35_nsnr-69": "3",
        "gpt35_nsnr-64": 4,
        "raw_gpt35_nsnr-64": "4",
        "gpt35_nsnr-39": 4,
        "raw_gpt35_nsnr-39": "4",
        "gpt35_nsnr-30": 4,
        "raw_gpt35_nsnr-30": "4",
        "gpt35_nsnr-169": 4,
        "raw_gpt35_nsnr-169": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-185": 4,
        "raw_gpt35_nsnr-185": "4",
        "gpt35_nsnr-128": 4,
        "raw_gpt35_nsnr-128": "4",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-24": 4,
        "raw_gpt35_nsnr-24": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-66": 4,
        "raw_gpt35_nsnr-66": "4",
        "gpt35_nsnr-156": 4,
        "raw_gpt35_nsnr-156": "4",
        "gpt35_nsnr-188": 4,
        "raw_gpt35_nsnr-188": "4",
        "gpt35_nsnr-173": 4,
        "raw_gpt35_nsnr-173": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nswr-32": 4,
        "raw_gpt35_nswr-32": "4",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-77": 2,
        "raw_gpt35_nswr-77": "2",
        "gpt35_nswr-69": 4,
        "raw_gpt35_nswr-69": "4",
        "gpt35_nswr-64": 4,
        "raw_gpt35_nswr-64": "4",
        "gpt35_nswr-39": 3,
        "raw_gpt35_nswr-39": "3",
        "gpt35_nswr-30": 4,
        "raw_gpt35_nswr-30": "4",
        "gpt35_nswr-169": 3,
        "raw_gpt35_nswr-169": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-185": 3,
        "raw_gpt35_nswr-185": "3",
        "gpt35_nswr-128": 3,
        "raw_gpt35_nswr-128": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-24": 4,
        "raw_gpt35_nswr-24": "4",
        "gpt35_nswr-62": 4,
        "raw_gpt35_nswr-62": "4",
        "gpt35_nswr-66": 3,
        "raw_gpt35_nswr-66": "3",
        "gpt35_nswr-156": 4,
        "raw_gpt35_nswr-156": "4",
        "gpt35_nswr-188": 3,
        "raw_gpt35_nswr-188": "3",
        "gpt35_nswr-173": 4,
        "raw_gpt35_nswr-173": "4",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // In this Kata, you have to sort an array of non-negative integers according to\n    // number of ones in their binary representation in ascending order.\n    // For similar number of ones, sort based on decimal value.\n    // It must be implemented like this:\n    // >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> arr) {\n",
        "snippet": [
            "                List < Integer > sorted_arr = new ArrayList<>(arr);\n        sorted_arr.sort(new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                int cnt1 = (int) Integer.toBinaryString(Math.abs(o1)).chars().filter(ch -> ch == '1').count();\n                int cnt2 = (int) Integer.toBinaryString(Math.abs(o2)).chars().filter(ch -> ch == '1').count();\n                if (cnt1 > cnt2) {\n                    return 1;\n                } else if (cnt1 < cnt2) {\n                    return -1;\n                } else {\n                    return o1.compareTo(o2);\n                }\n            }\n        });\n        return sorted_arr;\n    }\n}"
        ],
        "simplified": "In this Kata, you have to sort an array of non-negative integers according to number of ones in their binary representation in ascending order. For similar number of ones, sort based on decimal value. It must be implemented like this:",
        "task_id": "116",
        "164": "return arr.stream()\n                .sorted(Comparator\n                        .comparingInt(x -> Integer.bitCount(x))\n                        .thenComparingInt(x -> x))\n                .collect(Collectors.toCollection(ArrayList::new));",
        "grade-164": {
            "execution": 0
        },
        "28": "ArrayList<Pair<Integer, Integer>> pairs = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            String s = Integer.toBinaryString(arr.get(i));\n            int cnt = 0;\n            for (int j = 0; j < s.length(); j++)\n                if (s.charAt(j) == '1')\n                    cnt++;\n            pairs.add(new Pair<>(cnt, arr.get(i)));\n        }\n        pairs.sort((a, b) -> {\n            if (a.getValue0() < b.getValue0())\n                return -1;\n            else if (a.getValue0() > b.getValue0())\n                return 1;\n            else {\n                if (a.getValue1() < b.getValue1())\n                    return -1;\n                else if (a.getValue1() > b.getValue1())\n                    return 1;\n                else\n                    return 0;\n            }\n        });\n        for (int i = 0; i < arr.size(); i++)\n            arr.set(i, pairs.get(i).getValue1());\n        return arr;",
        "grade-28": {
            "execution": 0
        },
        "6": "return arr.stream()\n            .map(i -> new Pair<Integer,Integer>(i,Integer.bitCount(i)))\n            .sorted((x,y) -> x.getValue1().equals(y.getValue1()) ? x.getValue0().compareTo(y.getValue0()) : x.getValue1().compareTo(y.getValue1()))\n            .map(x -> x.getValue0())\n            .collect(Collectors.toCollection(ArrayList::new));",
        "grade-6": {
            "execution": 0
        },
        "190": "ArrayList<Integer> temp = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size(); i++) {\n            temp.add(numberOfOnes(arr.get(i)));\n        }\n        Integer[] order = insertionSort(temp);\n        return insertionSort2(order, arr);",
        "grade-190": {
            "execution": 0
        },
        "70": "Collections.sort(arr, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer i1, Integer i2) {\n                String b1 = Integer.toBinaryString(i1);\n                String b2 = Integer.toBinaryString(i2);\n                int b1c = b1.length() - b1.replace(\"1\", \"\").length();\n                int b2c = b2.length() - b2.replace(\"1\", \"\").length();\n                if (b1c == b2c) return i1 - i2;\n                return b1c - b2c;\n            }\n        });\n        return arr;",
        "grade-70": {
            "execution": 0
        },
        "62": "ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer> oneCount = new ArrayList<Integer>();\n        int total = 0;\n        int max = arr.get(0);\n        for (int i = 0; i < arr.size(); i++) {\n            int value = arr.get(i);\n            String bin = Integer.toBinaryString(value);\n            total = 0;\n            for (int j = 0; j < bin.length(); j++) {\n                char c = bin.charAt(j);\n                if (c == '1') {\n                    total++;\n                }\n            }\n            oneCount.add(total);\n            if (max < value) {\n                max = value;\n            }\n        }\n        for (int i = max; i >= 0; i--) {\n            for (int j = 0; j < arr.size(); j++) {\n                if (oneCount.get(j) == i) {\n                    sorted.add(arr.get(j));\n                }\n            }\n        }\n        return sorted;",
        "grade-62": {
            "execution": 0
        },
        "57": "if (arr.size() == 0) {\n            return arr;\n        }\n        ArrayList<Pair<Integer, Integer>> res = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            res.add(Pair.with(i, arr.get(i)));\n        }\n        Collections.sort(res, (pair1, pair2) -> {\n            String str1 = Integer.toBinaryString(pair1.getValue1());\n            String str2 = Integer.toBinaryString(pair2.getValue1());\n            int count1 = count1(str1);\n            int count2 = count1(str2);\n            if (count1 == count2) {\n                return pair1.getValue1() - pair2.getValue1();\n            }\n            return count1 - count2;\n        });\n        for (int i = 0; i < res.size(); i++) {\n            arr.set(i, res.get(i).getValue1());\n        }\n        return arr;",
        "grade-57": {
            "execution": 0
        },
        "35": "if (arr.size() <= 1) {\n            return arr;\n        }\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size(); i++) {\n            int count = countOne(arr.get(i));\n            Pair<Integer, Integer> pair = new Pair<Integer, Integer>(count, arr.get(i));\n            result.add(pair);\n        }\n        result.sort(new Comparator<Pair<Integer, Integer>>() {\n            @Override\n            public int compare(Pair<Integer, Integer> o1, Pair<Integer, Integer> o2) {\n                if (o1.getValue0() > o2.getValue0()) {\n                    return 1;\n                } else if (o1.getValue0() < o2.getValue0()) {\n                    return -1;\n                } else {\n                    if (o1.getValue1() > o2.getValue1()) {\n                        return 1;\n                    } else if (o1.getValue1() < o2.getValue1()) {\n                        return -1;\n                    } else {\n                        return 0;\n                    }\n                }\n            }\n        });\n        for (int i = 0; i < result.size(); i++) {\n            Pair<Integer, Integer> pair = result.get(i);\n            result.set(i, pair.getValue1());\n        }\n        return result;",
        "grade-35": {
            "execution": 0
        },
        "189": "int n = arr.size();\n        Integer[] result = new Integer[n];\n        for (int i = 0; i < n; i++) {\n            String binary = Integer.toBinaryString(arr.get(i));\n            int count = 0;\n            for (int j = 0; j < binary.length(); j++) {\n                if (binary.charAt(j) == '1') {\n                    count++;\n                }\n            }\n            result[i] = arr.get(i);\n            arr.set(i, count);\n        }\n        ArrayList<Integer> copy = new ArrayList<>(arr);\n        Arrays.sort(arr.toArray());\n        ArrayList<Integer> result2 = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            int max = Collections.max(copy);\n            int maxIndex = copy.indexOf(max);\n            int count = 0;\n            for (int j = 0; j < arr.size(); j++) {\n                if (arr.get(j) == max) {\n                    if (count == 0) {\n                        result2.add(result[maxIndex]);\n                        copy.set(maxIndex, -1);\n                        arr.remove(j);\n                        count++;\n                    }\n                }\n            }\n        }\n        return result2;",
        "grade-189": {
            "execution": 0
        },
        "26": "arr.sort(new Comparator<Integer>() {\n            @Override\n            public int compare(Integer n1, Integer n2) {\n                // count the number of ones in each number\n                String b1 = Integer.toBinaryString(n1);\n                String b2 = Integer.toBinaryString(n2);\n                int c1 = b1.replaceAll(\"0\", \"\").length();\n                int c2 = b2.replaceAll(\"0\", \"\").length();\n                if (c1 != c2) {\n                    return Integer.compare(c1, c2);\n                } else {\n                    return Integer.compare(n1, n2);\n                }\n            }\n        });\n        return arr;",
        "grade-26": {
            "execution": 0
        },
        "174": "ArrayList<Integer> sorted = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n        }\n        Collections.sort(sorted, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer a, Integer b) {\n                int aBitCount = countBits(a);\n                int bBitCount = countBits(b);\n                if (aBitCount == bBitCount) {\n                    return a.compareTo(b);\n                } else {\n                    return aBitCount - bBitCount;\n                }\n            }\n        });\n        return sorted;",
        "grade-174": {
            "execution": 0
        },
        "139": "ArrayList<Integer> result = new ArrayList<>();\n        while (arr.size() > 0) {\n            int min = arr.get(0);\n            int min_index = 0;\n            for (int i = 1; i < arr.size(); i++) {\n                int ones = countOnes(arr.get(i));\n                if (countOnes(min) > ones) {\n                    min = arr.get(i);\n                    min_index = i;\n                } else if (countOnes(min) == ones) {\n                    if (min > arr.get(i)) {\n                        min = arr.get(i);\n                        min_index = i;\n                    }\n                }\n            }\n            result.add(min);\n            arr.remove(min_index);\n        }\n        return result;",
        "grade-139": {
            "execution": 0
        },
        "22": "ArrayList<Triplet<Integer, Integer, Integer>> triplets = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            Triplet<Integer, Integer, Integer> triplet = new Triplet<>(arr.get(i), arr.get(i), Problem.ones(arr.get(i)));\n            triplets.add(triplet);\n        }\n        Collections.sort(triplets, (a, b) -> {\n            return (a.getValue2() > b.getValue2()) ? 1 : (a.getValue2() < b.getValue2()) ? -1 : a.getValue0().compareTo(b.getValue0());\n        });\n        ArrayList<Integer> newArr = new ArrayList<>();\n        for (int i = 0; i < triplets.size(); i++) {\n            newArr.add(triplets.get(i).getValue0());\n        }\n        return newArr;",
        "grade-22": {
            "execution": 0
        },
        "152": "ArrayList<Integer> sortedList = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) >= 0) {\n                sortedList.add(arr.get(i));\n            }\n        }\n        Collections.sort(sortedList, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer integer, Integer t1) {\n                int count1 = Integer.bitCount(integer);\n                int count2 = Integer.bitCount(t1);\n                if (count1 < count2) {\n                    return -1;\n                } else if (count1 > count2) {\n                    return 1;\n                } else {\n                    return Integer.compare(integer, t1);\n                }\n            }\n        });\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) < 0) {\n                sortedList.add(arr.get(i));\n            }\n        }\n        return sortedList;",
        "grade-152": {
            "execution": 0
        },
        "108": "ArrayList<Integer> result = new ArrayList<>();\n        ArrayList<Integer> isZero = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            int n = arr.get(i);\n            if (n < 0) {\n                result.add(n);\n            } else if (n == 0) {\n                isZero.add(n);\n            } else {\n                result.add(Integer.MAX_VALUE);\n            }\n        }\n        result.sort(new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                int ones1 = countOnes(o1);\n                int ones2 = countOnes(o2);\n                if (ones1 == ones2) {\n                    return o1 - o2;\n                } else {\n                    return ones1 - ones2;\n                }\n            }\n        });\n        isZero.addAll(result);\n        return isZero;",
        "grade-108": {
            "execution": 0
        },
        "8": "ArrayList<Integer> res = new ArrayList<>();\n        ArrayList<Integer> neg = new ArrayList<>();\n        ArrayList<Integer> nonNeg = new ArrayList<>();\n        arr.forEach(e -> {\n            if (e >= 0) {\n                nonNeg.add(e);\n            } else {\n                neg.add(e);\n            }\n        });\n        Collections.sort(nonNeg, (a, b) -> {\n            // System.out.println(Integer.bitCount(a) + \" \" + Integer.bitCount(b));\n            int countA = Integer.bitCount(a);\n            int countB = Integer.bitCount(b);\n            if (countA == countB) {\n                return a.compareTo(b);\n            } else {\n                return countA - countB;\n            }\n        });\n        Collections.sort(neg, (a, b) -> {\n            // System.out.println(Integer.bitCount(a) + \" \" + Integer.bitCount(b));\n            int countA = Integer.bitCount(a);\n            int countB = Integer.bitCount(b);\n            if (countA == countB) {\n                return a.compareTo(b);\n            } else {\n                return countA - countB;\n            }\n        });\n        Collections.reverse(neg);\n        res.addAll(nonNeg);\n        res.addAll(neg);\n        return res;",
        "grade-8": {
            "execution": 0
        },
        "7": "ArrayList<Integer> sorted = new ArrayList<>();\n        ArrayList<Integer> negs = new ArrayList<>();\n        for (int i : arr) {\n            if (i < 0) {\n                negs.add(i);\n            } else {\n                sorted.add(i);\n            }\n        }\n        Collections.sort(sorted, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer a, Integer b) {\n                int oneCountA = Integer.bitCount(a);\n                int oneCountB = Integer.bitCount(b);\n                return oneCountA != oneCountB ? Integer.compare(oneCountA, oneCountB) : Integer.compare(a, b);\n            }\n        });\n        Collections.sort(negs);\n        ArrayList<Integer> result = new ArrayList<>();\n        for (int i : negs) {\n            result.add(i);\n        }\n        for (int i : sorted) {\n            result.add(i);\n        }\n        return result;",
        "grade-7": {
            "execution": 0
        },
        "23": "ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer> sortedIndices = new ArrayList<Integer>();\n        ArrayList<Integer> zeroBits = new ArrayList<Integer>();\n        ArrayList<Integer> zeroBitsIndices = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size(); i++) {\n            int zeroCount = 0;\n            int num = arr.get(i);\n            while (num > 0) {\n                if (num % 2 == 0) {\n                    zeroCount++;\n                }\n                num /= 2;\n            }\n            if (zeroCount == 0) {\n                sorted.add(arr.get(i));\n                sortedIndices.add(i);\n            } else {\n                zeroBits.add(zeroCount);\n                zeroBitsIndices.add(i);\n            }\n        }\n        for (int i = 0; i < zeroBits.size(); i++) {\n            for (int j = i + 1; j < zeroBits.size(); j++) {\n                if (zeroBits.get(i) > zeroBits.get(j)) {\n                    int temp = zeroBits.get(i);\n                    zeroBits.set(i, zeroBits.get(j));\n                    zeroBits.set(j, temp);\n                    temp = zeroBitsIndices.get(i);\n                    zeroBitsIndices.set(i, zeroBitsIndices.get(j));\n                    zeroBitsIndices.set(j, temp);\n                }\n            }\n        }\n        for (int i = 0; i < zeroBits.size(); i++) {\n            sorted.add(arr.get(zeroBitsIndices.get(i)));\n            sortedIndices.add(zeroBitsIndices.get(i));\n        }\n        ArrayList<Integer> out = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size(); i++) {\n            out.add(arr.get(sortedIndices.get(i)));\n        }\n        return out;",
        "grade-23": {
            "execution": 0
        },
        "55": "ArrayList<Pair<Integer, Integer>> pairs = new ArrayList<>();\n        for (int n : arr) {\n            pairs.add(new Pair<>(countOnes(n), n));\n        }\n        Collections.sort(pairs, new Comparator<Pair<Integer, Integer>>() {\n            @Override\n            public int compare(Pair<Integer, Integer> p1, Pair<Integer, Integer> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        ArrayList<Integer> ret = new ArrayList<>();\n        for (Pair<Integer, Integer> p : pairs) {\n            ret.add(p.getValue1());\n        }\n        return ret;",
        "grade-55": {
            "execution": 0
        },
        "59": "ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Pair<Integer, Integer>> binarr = new ArrayList<Pair<Integer, Integer>>();\n        for (int i : arr) {\n            int ones = Integer.bitCount(i);\n            binarr.add(new Pair<Integer, Integer>(ones, i));\n        }\n        Comparator<Pair<Integer, Integer>> comp = (a, b) -> {\n            if (a.getValue0() == b.getValue0()) {\n                return a.getValue1() - b.getValue1();\n            }\n            return a.getValue0() - b.getValue0();\n        };\n        Collections.sort(binarr, comp);\n        for (Pair<Integer, Integer> p : binarr) {\n            sorted.add(p.getValue1());\n        }\n        return sorted;",
        "grade-59": {
            "execution": 0
        },
        "bleu-164": 0.010790560502084918,
        "bleu-28": 0.1460582401036276,
        "bleu-6": 0.061792148636845595,
        "bleu-190": 0.0649103451527515,
        "bleu-70": 0.25663908943762875,
        "bleu-62": 0.16871386333721003,
        "bleu-57": 0.16839363618987946,
        "bleu-35": 0.20180903003651376,
        "bleu-189": 0.14385566364779984,
        "bleu-26": 0.29819787415767196,
        "bleu-174": 0.2732913838145039,
        "bleu-139": 0.17254177805434862,
        "bleu-22": 0.12179646490921053,
        "bleu-152": 0.2903495515379538,
        "bleu-108": 0.34027275308208504,
        "bleu-8": 0.12490055295522443,
        "bleu-7": 0.2168217204634957,
        "bleu-23": 0.0653849569930341,
        "bleu-55": 0.22389478741866686,
        "bleu-59": 0.12725532170396045,
        "codebleu-164": 0.14245518631554538,
        "codebleu-28": 0.5775968927132196,
        "codebleu-6": 0.33077162586906234,
        "codebleu-190": 0.22048764323664974,
        "codebleu-70": 0.43609976804994005,
        "codebleu-62": 0.5760807497986775,
        "codebleu-57": 0.5490760252877289,
        "codebleu-35": 0.6271531184582121,
        "codebleu-189": 0.5701516584998766,
        "codebleu-26": 0.47637759227911247,
        "codebleu-174": 0.47902786352966714,
        "codebleu-139": 0.5109352200125961,
        "codebleu-22": 0.5277314593294895,
        "codebleu-152": 0.6370374207720839,
        "codebleu-108": 0.6091879999736236,
        "codebleu-8": 0.6071621548603231,
        "codebleu-7": 0.5740912545439589,
        "codebleu-23": 0.5656094347920366,
        "codebleu-55": 0.4709922246336789,
        "codebleu-59": 0.5250194206507937,
        "chrf-164": 0.17157000665117256,
        "chrf-28": 0.3480548435959957,
        "chrf-6": 0.22806157181008488,
        "chrf-190": 0.21021193040143257,
        "chrf-70": 0.4004130902135044,
        "chrf-62": 0.3660773774051,
        "chrf-57": 0.3904009970361595,
        "chrf-35": 0.4297436461289062,
        "chrf-189": 0.357913570344281,
        "chrf-26": 0.47574710019790734,
        "chrf-174": 0.4607678278447839,
        "chrf-139": 0.2549223117620039,
        "chrf-22": 0.302266806494681,
        "chrf-152": 0.5321172184045838,
        "chrf-108": 0.4756953280823419,
        "chrf-8": 0.36185490763593636,
        "chrf-7": 0.4337371349453251,
        "chrf-23": 0.27720464257443483,
        "chrf-55": 0.383389225004583,
        "chrf-59": 0.35895908031977813,
        "rougel-164": 0.24657534246575347,
        "rougel-28": 0.39443155452436196,
        "rougel-6": 0.3586206896551724,
        "rougel-190": 0.3153526970954357,
        "rougel-70": 0.5068493150684931,
        "rougel-62": 0.3969849246231156,
        "rougel-57": 0.38219895287958117,
        "rougel-35": 0.3904555314533623,
        "rougel-189": 0.3333333333333333,
        "rougel-26": 0.5114754098360655,
        "rougel-174": 0.4444444444444445,
        "rougel-139": 0.3987730061349694,
        "rougel-22": 0.36828644501278773,
        "rougel-152": 0.44385026737967914,
        "rougel-108": 0.41573033707865165,
        "rougel-8": 0.3556485355648535,
        "rougel-7": 0.41379310344827586,
        "rougel-23": 0.27586206896551724,
        "rougel-55": 0.40123456790123463,
        "rougel-59": 0.3830985915492957,
        "meteor-164": 0.1554401125401929,
        "meteor-28": 0.4046209213668118,
        "meteor-6": 0.2695650494399512,
        "meteor-190": 0.19179059745678445,
        "meteor-70": 0.3626823791575717,
        "meteor-62": 0.40602235100479,
        "meteor-57": 0.4056937620861085,
        "meteor-35": 0.47218402469578674,
        "meteor-189": 0.41031577982829115,
        "meteor-26": 0.41539493165320873,
        "meteor-174": 0.456117399491643,
        "meteor-139": 0.32947312867532624,
        "meteor-22": 0.3683204067189508,
        "meteor-152": 0.4463859649122806,
        "meteor-108": 0.5072354895260883,
        "meteor-8": 0.43054819420520063,
        "meteor-7": 0.40510486671231793,
        "meteor-23": 0.34212086847277534,
        "meteor-55": 0.3248170801791879,
        "meteor-59": 0.37749348199416094,
        "ruby-164": 0.15568862275449102,
        "ruby-28": 0.2537878787878788,
        "ruby-6": 0.20958083832335328,
        "ruby-190": 0.20958083832335328,
        "ruby-70": 0.35928143712574845,
        "ruby-62": 0.2597402597402597,
        "ruby-57": 0.2325581395348837,
        "ruby-35": 0.2517006802721088,
        "ruby-189": 0.19723183391003463,
        "ruby-26": 0.37125748502994016,
        "ruby-174": 0.28742514970059885,
        "ruby-139": 0.25149700598802394,
        "ruby-22": 0.2455357142857143,
        "ruby-152": 0.2560386473429952,
        "ruby-108": 0.28042328042328046,
        "ruby-8": 0.23472668810289388,
        "ruby-7": 0.2571428571428571,
        "ruby-23": 0.17873303167420818,
        "ruby-55": 0.18562874251497008,
        "ruby-59": 0.23404255319148937,
        "codebertscore_f1-164": 0.6803420782089233,
        "codebertscore_f3-164": 0.6541369557380676,
        "codebertscore_f1-28": 0.7632467746734619,
        "codebertscore_f3-28": 0.7694636583328247,
        "codebertscore_f1-6": 0.7009828686714172,
        "codebertscore_f3-6": 0.6911168098449707,
        "codebertscore_f1-190": 0.6694344878196716,
        "codebertscore_f3-190": 0.6399487257003784,
        "codebertscore_f1-70": 0.8358226418495178,
        "codebertscore_f3-70": 0.8198816180229187,
        "codebertscore_f1-62": 0.7360876798629761,
        "codebertscore_f3-62": 0.7369123697280884,
        "codebertscore_f1-57": 0.774337649345398,
        "codebertscore_f3-57": 0.7810787558555603,
        "codebertscore_f1-35": 0.774429202079773,
        "codebertscore_f3-35": 0.7750993967056274,
        "codebertscore_f1-189": 0.721356987953186,
        "codebertscore_f3-189": 0.7307741045951843,
        "codebertscore_f1-26": 0.8424223065376282,
        "codebertscore_f3-26": 0.8297450542449951,
        "codebertscore_f1-174": 0.8106204271316528,
        "codebertscore_f3-174": 0.8028458952903748,
        "codebertscore_f1-139": 0.7187365889549255,
        "codebertscore_f3-139": 0.7094582319259644,
        "codebertscore_f1-22": 0.7263093590736389,
        "codebertscore_f3-22": 0.7250103950500488,
        "codebertscore_f1-152": 0.8034939765930176,
        "codebertscore_f3-152": 0.8020955324172974,
        "codebertscore_f1-108": 0.7652978897094727,
        "codebertscore_f3-108": 0.7600737810134888,
        "codebertscore_f1-8": 0.7659680843353271,
        "codebertscore_f3-8": 0.7630243301391602,
        "codebertscore_f1-7": 0.7831535935401917,
        "codebertscore_f3-7": 0.7772414684295654,
        "codebertscore_f1-23": 0.7075604200363159,
        "codebertscore_f3-23": 0.7178246378898621,
        "codebertscore_f1-55": 0.7501819133758545,
        "codebertscore_f3-55": 0.746978223323822,
        "codebertscore_f1-59": 0.7509721517562866,
        "codebertscore_f3-59": 0.7413879036903381,
        "codebertscore_s_f1-164": 0.7093327045440674,
        "codebertscore_s_f3-164": 0.683899462223053,
        "codebertscore_s_f1-28": 0.7688161730766296,
        "codebertscore_s_f3-28": 0.7727485299110413,
        "codebertscore_s_f1-6": 0.7231029868125916,
        "codebertscore_s_f3-6": 0.7106379270553589,
        "codebertscore_s_f1-190": 0.7046354413032532,
        "codebertscore_s_f3-190": 0.6753443479537964,
        "codebertscore_s_f1-70": 0.8323158621788025,
        "codebertscore_s_f3-70": 0.8156654238700867,
        "codebertscore_s_f1-62": 0.7409723997116089,
        "codebertscore_s_f3-62": 0.7366585731506348,
        "codebertscore_s_f1-57": 0.7753728628158569,
        "codebertscore_s_f3-57": 0.7773180603981018,
        "codebertscore_s_f1-35": 0.7857567071914673,
        "codebertscore_s_f3-35": 0.7844384908676147,
        "codebertscore_s_f1-189": 0.7409186959266663,
        "codebertscore_s_f3-189": 0.7423654794692993,
        "codebertscore_s_f1-26": 0.8435995578765869,
        "codebertscore_s_f3-26": 0.830312192440033,
        "codebertscore_s_f1-174": 0.8121015429496765,
        "codebertscore_s_f3-174": 0.7980733513832092,
        "codebertscore_s_f1-139": 0.7258424162864685,
        "codebertscore_s_f3-139": 0.7166245579719543,
        "codebertscore_s_f1-22": 0.7386041283607483,
        "codebertscore_s_f3-22": 0.7312549948692322,
        "codebertscore_s_f1-152": 0.8054488897323608,
        "codebertscore_s_f3-152": 0.8005672097206116,
        "codebertscore_s_f1-108": 0.7869053483009338,
        "codebertscore_s_f3-108": 0.7808033227920532,
        "codebertscore_s_f1-8": 0.7743473052978516,
        "codebertscore_s_f3-8": 0.7731780409812927,
        "codebertscore_s_f1-7": 0.7926660776138306,
        "codebertscore_s_f3-7": 0.7835440635681152,
        "codebertscore_s_f1-23": 0.7209880948066711,
        "codebertscore_s_f3-23": 0.7306172251701355,
        "codebertscore_s_f1-55": 0.7585339546203613,
        "codebertscore_s_f3-55": 0.746979832649231,
        "codebertscore_s_f1-59": 0.7586352229118347,
        "codebertscore_s_f3-59": 0.7449682950973511,
        "gpt35_nsnr-164": 4,
        "raw_gpt35_nsnr-164": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-190": 3,
        "raw_gpt35_nsnr-190": "3",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 3,
        "raw_gpt35_nsnr-62": "3",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 3,
        "raw_gpt35_nsnr-35": "3",
        "gpt35_nsnr-189": 3,
        "raw_gpt35_nsnr-189": "3",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-174": 4,
        "raw_gpt35_nsnr-174": "4",
        "gpt35_nsnr-139": 4,
        "raw_gpt35_nsnr-139": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-152": 4,
        "raw_gpt35_nsnr-152": "4",
        "gpt35_nsnr-108": 3,
        "raw_gpt35_nsnr-108": "3",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 3,
        "raw_gpt35_nsnr-23": "3",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-164": 4,
        "raw_gpt35_nswr-164": "4",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-190": 3,
        "raw_gpt35_nswr-190": "3",
        "gpt35_nswr-70": 4,
        "raw_gpt35_nswr-70": "4",
        "gpt35_nswr-62": 2,
        "raw_gpt35_nswr-62": "2",
        "gpt35_nswr-57": 2,
        "raw_gpt35_nswr-57": "2",
        "gpt35_nswr-35": 2,
        "raw_gpt35_nswr-35": "2",
        "gpt35_nswr-189": 1,
        "raw_gpt35_nswr-189": "1",
        "gpt35_nswr-26": 4,
        "raw_gpt35_nswr-26": "4",
        "gpt35_nswr-174": 4,
        "raw_gpt35_nswr-174": "4",
        "gpt35_nswr-139": 2,
        "raw_gpt35_nswr-139": "2",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-152": 4,
        "raw_gpt35_nswr-152": "4",
        "gpt35_nswr-108": 2,
        "raw_gpt35_nswr-108": "2",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-23": 2,
        "raw_gpt35_nswr-23": "2",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-59": 4,
        "raw_gpt35_nswr-59": "4"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return only positive numbers in the list.\n    // >>> get_positive([-1, 2, -4, 5, 6])\n    // [2, 5, 6]\n    // >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    // [5, 3, 2, 3, 9, 123, 1]\n    public static ArrayList<Integer> getPositive(ArrayList<Integer> l) {\n",
        "snippet": [
            "        return l.stream().filter(p -> p > 0).collect(Collectors.toList());\n    }\n}"
        ],
        "simplified": "Return only positive numbers in the list.",
        "task_id": "30",
        "122": "ArrayList<Integer> ret = new ArrayList<Integer>();\n        for (int i : l)\n            if (i > 0)\n                ret.add(i);\n        return ret;",
        "grade-122": {
            "execution": 1
        },
        "16": "ArrayList<Integer> a = new ArrayList<Integer>();\n        for (int i : l) {\n            if (i > 0) {\n                a.add(i);\n            }\n        }\n        return a;",
        "grade-16": {
            "execution": 1
        },
        "3": "return (ArrayList<Integer>) l.stream().filter(x -> x > 0).collect(Collectors.toList());",
        "grade-3": {
            "execution": 1
        },
        "145": "// Your code here.\n        return l.stream().filter(n -> n > 0).collect(Collectors.toCollection(ArrayList::new));",
        "grade-145": {
            "execution": 1
        },
        "44": "ArrayList<Integer> a = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) > 0) {\n                a.add(l.get(i));\n            }\n        }\n        return a;",
        "grade-44": {
            "execution": 1
        },
        "39": "ArrayList<Integer> ans = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) > 0) {\n                ans.add(l.get(i));\n            }\n        }\n        return ans;",
        "grade-39": {
            "execution": 1
        },
        "33": "ArrayList<Integer> numbers = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) > 0) {\n                numbers.add(l.get(i));\n            }\n        }\n        return numbers;",
        "grade-33": {
            "execution": 1
        },
        "19": "return new ArrayList<Integer>(l.stream().filter(x -> x > 0).collect(Collectors.toList()));",
        "grade-19": {
            "execution": 1
        },
        "15": "ArrayList<Integer> filtered = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            int num = l.get(i);\n            if (num > 0) {\n                filtered.add(num);\n            }\n        }\n        return filtered;",
        "grade-15": {
            "execution": 1
        },
        "130": "// l.stream().filter(e -> e > 0).collect(Collectors.toCollection(ArrayList::new));\n        return l.stream().filter(e -> e > 0).collect(Collectors.toCollection(ArrayList::new));",
        "grade-130": {
            "execution": 1
        },
        "195": "ArrayList<Integer> positives = new ArrayList<Integer>();\n        for (int i : l) {\n            if (i > 0) {\n                positives.add(i);\n            }\n        }\n        return positives;",
        "grade-195": {
            "execution": 1
        },
        "101": "ArrayList<Integer> results = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            int num = l.get(i);\n            if (num > 0) {\n                results.add(num);\n            }\n        }\n        return results;",
        "grade-101": {
            "execution": 1
        },
        "13": "// YOUR CODE HERE",
        "grade-13": {
            "execution": 0
        },
        "113": "ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int n : l) {\n            if (n > 0) {\n                result.add(n);\n            }\n        }\n        return result;",
        "grade-113": {
            "execution": 1
        },
        "73": "ArrayList<Integer> newL = new ArrayList<Integer>();\n        for (int i : l) {\n            if (i > 0) {\n                newL.add(i);\n            }\n        }\n        return newL;",
        "grade-73": {
            "execution": 1
        },
        "4": "ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) > 0) {\n                result.add(l.get(i));\n            }\n        }\n        return result;",
        "grade-4": {
            "execution": 1
        },
        "32": "ArrayList<Integer> l2 = new ArrayList<Integer>();\n        int n = l.size();\n        for (int i = 0; i < n; i++) {\n            int x = l.get(i);\n            if (x > 0) {\n                l2.add(x);\n            }\n        }\n        return l2;",
        "grade-32": {
            "execution": 1
        },
        "34": "return l.stream().filter(x -> x > 0).collect(Collectors.toCollection(ArrayList::new));",
        "grade-34": {
            "execution": 1
        },
        "92": "ArrayList<Integer> out = new ArrayList<Integer>();\n        for (int i : l) {\n            if (i > 0) {\n                out.add(i);\n            }\n        }\n        return out;",
        "grade-92": {
            "execution": 1
        },
        "117": "ArrayList<Integer> positives = new ArrayList<Integer>();\n        for (int number : l) {\n            if (number > 0) {\n                positives.add(number);\n            }\n        }\n        return positives;",
        "grade-117": {
            "execution": 1
        },
        "bleu-122": 0.06345259492219073,
        "bleu-16": 0.10226943438848317,
        "bleu-3": 0.6071022123892075,
        "bleu-145": 0.46870821155797265,
        "bleu-44": 0.09821584453553746,
        "bleu-39": 0.09821584453553746,
        "bleu-33": 0.09821584453553746,
        "bleu-19": 0.5795328348246753,
        "bleu-15": 0.07372315572460937,
        "bleu-130": 0.27280619922345184,
        "bleu-195": 0.10226943438848317,
        "bleu-101": 0.07372315572460937,
        "bleu-13": 0.0,
        "bleu-113": 0.10226943438848317,
        "bleu-73": 0.09537035147453611,
        "bleu-4": 0.09821584453553746,
        "bleu-32": 0.06834041280676516,
        "bleu-34": 0.5610270450354139,
        "bleu-92": 0.10226943438848317,
        "bleu-117": 0.10226943438848317,
        "codebleu-122": 0.4292929292929292,
        "codebleu-16": 0.4828722002635045,
        "codebleu-3": 0.723270369759777,
        "codebleu-145": 0.6454910969915305,
        "codebleu-44": 0.5704874835309618,
        "codebleu-39": 0.5704874835309618,
        "codebleu-33": 0.5704874835309618,
        "codebleu-19": 0.7186464927786598,
        "codebleu-15": 0.5509442248572682,
        "codebleu-130": 0.6673651227426047,
        "codebleu-195": 0.4828722002635045,
        "codebleu-101": 0.5509442248572682,
        "codebleu-13": 0.043478260869565216,
        "codebleu-113": 0.4828722002635045,
        "codebleu-73": 0.4828722002635045,
        "codebleu-4": 0.5704874835309618,
        "codebleu-32": 0.5509442248572682,
        "codebleu-34": 0.679646776561454,
        "codebleu-92": 0.4828722002635045,
        "codebleu-117": 0.4828722002635045,
        "chrf-122": 0.18268581864360642,
        "chrf-16": 0.19653514578700604,
        "chrf-3": 0.7781992092710227,
        "chrf-145": 0.7033025773080804,
        "chrf-44": 0.22016123219298606,
        "chrf-39": 0.21883066882882946,
        "chrf-33": 0.2185074781550619,
        "chrf-19": 0.7630832692087879,
        "chrf-15": 0.22888280174029213,
        "chrf-130": 0.5979792277051103,
        "chrf-195": 0.2041932315272005,
        "chrf-101": 0.20615262065263493,
        "chrf-13": 0.0031328320802005015,
        "chrf-113": 0.20474250876884742,
        "chrf-73": 0.19132767547274368,
        "chrf-4": 0.22239691651990207,
        "chrf-32": 0.21656186846777234,
        "chrf-34": 0.7361290021716124,
        "chrf-92": 0.20280774284138506,
        "chrf-117": 0.19814377304708722,
        "rougel-122": 0.29411764705882354,
        "rougel-16": 0.3333333333333333,
        "rougel-3": 0.7936507936507937,
        "rougel-145": 0.716417910447761,
        "rougel-44": 0.3829787234042553,
        "rougel-39": 0.3829787234042553,
        "rougel-33": 0.3829787234042553,
        "rougel-19": 0.7812500000000001,
        "rougel-15": 0.3191489361702128,
        "rougel-130": 0.5106382978723405,
        "rougel-195": 0.3333333333333333,
        "rougel-101": 0.3191489361702128,
        "rougel-13": 0.0,
        "rougel-113": 0.3333333333333333,
        "rougel-73": 0.32,
        "rougel-4": 0.3829787234042553,
        "rougel-32": 0.30303030303030304,
        "rougel-34": 0.7868852459016394,
        "rougel-92": 0.3333333333333333,
        "rougel-117": 0.3333333333333333,
        "meteor-122": 0.3546875,
        "meteor-16": 0.4207785087719298,
        "meteor-3": 0.845722033898305,
        "meteor-145": 0.8303411371237458,
        "meteor-44": 0.47330384096378847,
        "meteor-39": 0.47330384096378847,
        "meteor-33": 0.47330384096378847,
        "meteor-19": 0.8248918918918919,
        "meteor-15": 0.4056244174561441,
        "meteor-130": 0.7615705521472391,
        "meteor-195": 0.4207785087719298,
        "meteor-101": 0.38987730061349696,
        "meteor-13": 0.0,
        "meteor-113": 0.4207785087719298,
        "meteor-73": 0.4166666666666667,
        "meteor-4": 0.47330384096378847,
        "meteor-32": 0.383987915407855,
        "meteor-34": 0.8473447098976108,
        "meteor-92": 0.4207785087719298,
        "meteor-117": 0.4207785087719298,
        "ruby-122": 0.15384615384615385,
        "ruby-16": 0.2093023255813954,
        "ruby-3": 0.6764705882352942,
        "ruby-145": 0.5789473684210527,
        "ruby-44": 0.24615384615384617,
        "ruby-39": 0.24615384615384617,
        "ruby-33": 0.24615384615384617,
        "ruby-19": 0.6571428571428571,
        "ruby-15": 0.18461538461538463,
        "ruby-130": 0.3538461538461538,
        "ruby-195": 0.2093023255813954,
        "ruby-101": 0.18461538461538463,
        "ruby-13": 0.0,
        "ruby-113": 0.2093023255813954,
        "ruby-73": 0.21739130434782605,
        "ruby-4": 0.24615384615384617,
        "ruby-32": 0.19999999999999996,
        "ruby-34": 0.6875,
        "ruby-92": 0.2093023255813954,
        "ruby-117": 0.2093023255813954,
        "codebertscore_f1-122": 0.7060492634773254,
        "codebertscore_f3-122": 0.7001118063926697,
        "codebertscore_f1-16": 0.706931471824646,
        "codebertscore_f3-16": 0.6986992359161377,
        "codebertscore_f1-3": 0.927323579788208,
        "codebertscore_f3-3": 0.9466217160224915,
        "codebertscore_f1-145": 0.8768649697303772,
        "codebertscore_f3-145": 0.9183533191680908,
        "codebertscore_f1-44": 0.7020500302314758,
        "codebertscore_f3-44": 0.6946774125099182,
        "codebertscore_f1-39": 0.6996985673904419,
        "codebertscore_f3-39": 0.6938683986663818,
        "codebertscore_f1-33": 0.6980600953102112,
        "codebertscore_f3-33": 0.6937656402587891,
        "codebertscore_f1-19": 0.9148063659667969,
        "codebertscore_f3-19": 0.9392226934432983,
        "codebertscore_f1-15": 0.6998639106750488,
        "codebertscore_f3-15": 0.699360191822052,
        "codebertscore_f1-130": 0.8435023427009583,
        "codebertscore_f3-130": 0.8666816353797913,
        "codebertscore_f1-195": 0.701525092124939,
        "codebertscore_f3-195": 0.6970489025115967,
        "codebertscore_f1-101": 0.694492757320404,
        "codebertscore_f3-101": 0.6914971470832825,
        "codebertscore_f1-13": 0.5296736359596252,
        "codebertscore_f3-13": 0.5157442688941956,
        "codebertscore_f1-113": 0.7023302912712097,
        "codebertscore_f3-113": 0.6973718404769897,
        "codebertscore_f1-73": 0.7015591263771057,
        "codebertscore_f3-73": 0.6950222849845886,
        "codebertscore_f1-4": 0.6998556852340698,
        "codebertscore_f3-4": 0.6943323016166687,
        "codebertscore_f1-32": 0.6898266673088074,
        "codebertscore_f3-32": 0.6820126175880432,
        "codebertscore_f1-34": 0.9309626817703247,
        "codebertscore_f3-34": 0.9512225985527039,
        "codebertscore_f1-92": 0.7059822678565979,
        "codebertscore_f3-92": 0.6998682618141174,
        "codebertscore_f1-117": 0.6933140158653259,
        "codebertscore_f3-117": 0.6886771321296692,
        "codebertscore_s_f1-122": 0.7218400239944458,
        "codebertscore_s_f3-122": 0.7159296870231628,
        "codebertscore_s_f1-16": 0.7175267934799194,
        "codebertscore_s_f3-16": 0.7087520360946655,
        "codebertscore_s_f1-3": 0.9376382231712341,
        "codebertscore_s_f3-3": 0.9561216235160828,
        "codebertscore_s_f1-145": 0.8926035165786743,
        "codebertscore_s_f3-145": 0.9393894076347351,
        "codebertscore_s_f1-44": 0.706836462020874,
        "codebertscore_s_f3-44": 0.6999743580818176,
        "codebertscore_s_f1-39": 0.7043037414550781,
        "codebertscore_s_f3-39": 0.698421061038971,
        "codebertscore_s_f1-33": 0.7030444145202637,
        "codebertscore_s_f3-33": 0.6988028883934021,
        "codebertscore_s_f1-19": 0.926665186882019,
        "codebertscore_s_f3-19": 0.9489412903785706,
        "codebertscore_s_f1-15": 0.7080785632133484,
        "codebertscore_s_f3-15": 0.7074626684188843,
        "codebertscore_s_f1-130": 0.8823217153549194,
        "codebertscore_s_f3-130": 0.9100630879402161,
        "codebertscore_s_f1-195": 0.7106528878211975,
        "codebertscore_s_f3-195": 0.7080267071723938,
        "codebertscore_s_f1-101": 0.6989708542823792,
        "codebertscore_s_f3-101": 0.6936764717102051,
        "codebertscore_s_f1-13": 0.5502309203147888,
        "codebertscore_s_f3-13": 0.5479859709739685,
        "codebertscore_s_f1-113": 0.7146352529525757,
        "codebertscore_s_f3-113": 0.7080562710762024,
        "codebertscore_s_f1-73": 0.7148463129997253,
        "codebertscore_s_f3-73": 0.7083409428596497,
        "codebertscore_s_f1-4": 0.7064965963363647,
        "codebertscore_s_f3-4": 0.7009707093238831,
        "codebertscore_s_f1-32": 0.7039210796356201,
        "codebertscore_s_f3-32": 0.6993746161460876,
        "codebertscore_s_f1-34": 0.9407878518104553,
        "codebertscore_s_f3-34": 0.9588685631752014,
        "codebertscore_s_f1-92": 0.7181668281555176,
        "codebertscore_s_f3-92": 0.7109649181365967,
        "codebertscore_s_f1-117": 0.7032046914100647,
        "codebertscore_s_f3-117": 0.700610339641571,
        "gpt35_nsnr-122": 4,
        "raw_gpt35_nsnr-122": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-145": 4,
        "raw_gpt35_nsnr-145": "4",
        "gpt35_nsnr-44": 4,
        "raw_gpt35_nsnr-44": "4",
        "gpt35_nsnr-39": 4,
        "raw_gpt35_nsnr-39": "4",
        "gpt35_nsnr-33": 4,
        "raw_gpt35_nsnr-33": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-130": 4,
        "raw_gpt35_nsnr-130": "4",
        "gpt35_nsnr-195": 4,
        "raw_gpt35_nsnr-195": "4",
        "gpt35_nsnr-101": 4,
        "raw_gpt35_nsnr-101": "4",
        "gpt35_nsnr-13": 0,
        "raw_gpt35_nsnr-13": "3 - The code snippet correctly filters out all negative numbers from the input ArrayList and returns only the positive ones. However, it does not handle the case where the input ArrayList is empty, which could result in a NullPointerException.",
        "gpt35_nsnr-113": 4,
        "raw_gpt35_nsnr-113": "4",
        "gpt35_nsnr-73": 4,
        "raw_gpt35_nsnr-73": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-32": 4,
        "raw_gpt35_nsnr-32": "4",
        "gpt35_nsnr-34": 4,
        "raw_gpt35_nsnr-34": "4",
        "gpt35_nsnr-92": 4,
        "raw_gpt35_nsnr-92": "4",
        "gpt35_nsnr-117": 4,
        "raw_gpt35_nsnr-117": "4",
        "gpt35_nswr-122": 4,
        "raw_gpt35_nswr-122": "4",
        "gpt35_nswr-16": 4,
        "raw_gpt35_nswr-16": "4",
        "gpt35_nswr-3": 4,
        "raw_gpt35_nswr-3": "4",
        "gpt35_nswr-145": 4,
        "raw_gpt35_nswr-145": "4",
        "gpt35_nswr-44": 4,
        "raw_gpt35_nswr-44": "4",
        "gpt35_nswr-39": 4,
        "raw_gpt35_nswr-39": "4",
        "gpt35_nswr-33": 4,
        "raw_gpt35_nswr-33": "4",
        "gpt35_nswr-19": 4,
        "raw_gpt35_nswr-19": "4",
        "gpt35_nswr-15": 4,
        "raw_gpt35_nswr-15": "4",
        "gpt35_nswr-130": 4,
        "raw_gpt35_nswr-130": "4",
        "gpt35_nswr-195": 4,
        "raw_gpt35_nswr-195": "4",
        "gpt35_nswr-101": 4,
        "raw_gpt35_nswr-101": "4",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-113": 4,
        "raw_gpt35_nswr-113": "4",
        "gpt35_nswr-73": 4,
        "raw_gpt35_nswr-73": "4",
        "gpt35_nswr-4": 4,
        "raw_gpt35_nswr-4": "4",
        "gpt35_nswr-32": 4,
        "raw_gpt35_nswr-32": "4",
        "gpt35_nswr-34": 4,
        "raw_gpt35_nswr-34": "4",
        "gpt35_nswr-92": 4,
        "raw_gpt35_nswr-92": "4",
        "gpt35_nswr-117": 4,
        "raw_gpt35_nswr-117": "4"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a string and returns an ordered version of it.\n    // Ordered version of string, is a string where all words (separated by space)\n    // are replaced by a new word where all the characters arranged in\n    // ascending order based on ascii value.\n    // Note: You should keep the order of words and blank spaces in the sentence.\n    // For example:\n    // anti_shuffle('Hi') returns 'Hi'\n    // anti_shuffle('hello') returns 'ehllo'\n    // anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    public static String antiShuffle(String s) {\n",
        "snippet": [
            "        String[] strings = s.split(\" \");\n        List<String> result = new ArrayList<>();\n        for (String string : strings) {\n            char[] chars = string.toCharArray();\n            Arrays.sort(chars);\n            result.add(String.copyValueOf(chars));\n        }\n        return String.join(\" \", result);\n    }\n}"
        ],
        "simplified": "Write a function that takes a string and returns an ordered version of it. Ordered version of string, is a string where all words (separated by space) are replaced by a new word where all the characters arranged in ascending order based on ascii value. Note: You should keep the order of words and blank spaces in the sentence.",
        "task_id": "86",
        "197": "String[] words = s.split(\" \");\n        StringBuilder sb = new StringBuilder();\n        for (String word : words) {\n            for (char c : word.toCharArray()) {\n                int pos = 0;\n                for (int i = 0; i < sb.length(); i++) {\n                    if (c < sb.charAt(i)) {\n                        pos = i;\n                        break;\n                    }\n                }\n                sb.insert(pos, c);\n            }\n            sb.append(\" \");\n        }\n        return sb.toString().trim();",
        "grade-197": {
            "execution": 0
        },
        "31": "// YOUR CODE HERE\n        StringBuilder sb = new StringBuilder();\n        for (String str : s.split(\" \")) {\n            char[] temp = str.toCharArray();\n            Arrays.sort(temp);\n            sb.append(new String(temp));\n            sb.append(\" \");\n        }\n        return sb.toString().trim();",
        "grade-31": {
            "execution": 1
        },
        "6": "return null;",
        "grade-6": {
            "execution": 0
        },
        "81": "// TODO: Implement this method\n        return \"\";",
        "grade-81": {
            "execution": 0
        },
        "72": "// YOUR CODE HERE\n        return null;",
        "grade-72": {
            "execution": 0
        },
        "67": "// Your code here\n        return \"\";",
        "grade-67": {
            "execution": 0
        },
        "39": "String[] words = s.split(\" \");\n        StringBuilder sb = new StringBuilder();\n        for (String word : words) {\n            char[] chars = word.toCharArray();\n            Arrays.sort(chars);\n            for (char c : chars) {\n                sb.append(c);\n            }\n            sb.append(\" \");\n        }\n        return sb.toString().trim();",
        "grade-39": {
            "execution": 1
        },
        "29": "String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for (int i = 0; i < words.length; i++) {\n            newWords[i] = sortWord(words[i]);\n        }\n        return String.join(\" \", newWords);",
        "grade-29": {
            "execution": 0
        },
        "169": "StringBuilder result = new StringBuilder();\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            if (word.length() > 1) {\n                char[] chars = word.toCharArray();\n                Arrays.sort(chars);\n                result.append(chars);\n            } else {\n                result.append(word);\n            }\n            result.append(\" \");\n        }\n        return result.toString().trim();",
        "grade-169": {
            "execution": 1
        },
        "23": "String[] str = s.split(\" \");\n        String result = \"\";\n        for (int i = 0; i < str.length; i++) {\n            result += sorted(str[i]);\n            if (i < str.length - 1) {\n                result += \" \";\n            }\n        }\n        return result;",
        "grade-23": {
            "execution": 0
        },
        "182": "// TODO\n        return null;",
        "grade-182": {
            "execution": 0
        },
        "130": "StringBuilder sb = new StringBuilder();\n        sb.append(s);\n        int beginIndex = 0;\n        int endIndex = 0;\n        int i = 0;\n        while (sb.indexOf(\" \", endIndex) != -1) {\n            endIndex = sb.indexOf(\" \", endIndex);\n            String ans = sb.substring(beginIndex, endIndex);\n            ans = sort(ans);\n            sb.replace(beginIndex, endIndex, ans);\n            beginIndex = endIndex + 1;\n            endIndex = beginIndex;\n        }\n        String ans = sb.substring(beginIndex, sb.length());\n        ans = sort(ans);\n        sb.replace(beginIndex, sb.length(), ans);\n        return sb.toString();",
        "grade-130": {
            "execution": 0
        },
        "8": "StringBuilder str = new StringBuilder();\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            char[] chrs = word.toCharArray();\n            Arrays.sort(chrs);\n            for (char chr : chrs) {\n                str.append(chr);\n            }\n            str.append(\" \");\n        }\n        return str.toString().trim();",
        "grade-8": {
            "execution": 1
        },
        "7": "StringBuilder sb = new StringBuilder();\n        int index = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == ' ') {\n                String word = s.substring(index, i);\n                if (word.length() > 1) {\n                    String sorted = sort(word);\n                    sb.append(sorted);\n                } else {\n                    sb.append(word);\n                }\n                sb.append(\" \");\n                index = i + 1;\n            }\n        }\n        String word = s.substring(index, s.length());\n        if (word.length() > 1) {\n            String sorted = sort(word);\n            sb.append(sorted);\n        } else {\n            sb.append(word);\n        }\n        return sb.toString();",
        "grade-7": {
            "execution": 0
        },
        "24": "if (s == null || s.length() == 0) return \"\";\n        // split string\n        String[] arr = s.split(\" \");\n        // loop over the words in the string\n        for (int i = 0; i < arr.length; i++) {\n            // sort the characters in each word\n            char[] ch = arr[i].toCharArray();\n            Arrays.sort(ch);\n            // put the sorted array into a string\n            arr[i] = new String(ch);\n        }\n        return String.join(\" \", arr);",
        "grade-24": {
            "execution": 1
        },
        "65": "// Implement me!\n        return null;",
        "grade-65": {
            "execution": 0
        },
        "69": "String[] words = s.split(\" \");\n        int index = 0;\n        StringBuilder result = new StringBuilder();\n        for (String word : words) {\n            char[] charArray = word.toCharArray();\n            Arrays.sort(charArray);\n            String sorted = new String(charArray);\n            result.append(sorted);\n            index += word.length();\n            if (index != s.length()) {\n                result.append(s.charAt(index));\n                index++;\n            }\n        }\n        return result.toString();",
        "grade-69": {
            "execution": 1
        },
        "157": "if (s == null || s.length() == 0) {\n            return s;\n        }\n        String[] words = s.split(\" \");\n        StringBuilder sb = new StringBuilder();\n        for (String word : words) {\n            char[] chars = word.toCharArray();\n            Arrays.sort(chars);\n            sb.append(chars);\n            sb.append(\" \");\n        }\n        return sb.substring(0, sb.length() - 1);",
        "grade-157": {
            "execution": 1
        },
        "187": "return Stream.of(s.split(\" \"))\n            .map(word -> {\n                char[] chars = word.toCharArray();\n                Arrays.sort(chars);\n                return new String(chars);\n            })\n            .collect(Collectors.joining(\" \"));",
        "grade-187": {
            "execution": 1
        },
        "173": "// ---->Your code goes here.",
        "grade-173": {
            "execution": 0
        },
        "bleu-197": 0.22670685074191804,
        "bleu-31": 0.3832586144290006,
        "bleu-6": 9.093758194395561e-13,
        "bleu-81": 0.00013540475580785732,
        "bleu-72": 5.570246534913643e-06,
        "bleu-67": 3.0460099263520272e-05,
        "bleu-39": 0.44524463793620334,
        "bleu-29": 0.28262547821975276,
        "bleu-169": 0.419315843482092,
        "bleu-23": 0.1793705477647958,
        "bleu-182": 2.577454629062573e-07,
        "bleu-130": 0.053559526474992056,
        "bleu-8": 0.382082357437907,
        "bleu-7": 0.08548005299777817,
        "bleu-24": 0.2696849809617379,
        "bleu-65": 5.570246534913643e-06,
        "bleu-69": 0.2838876928721651,
        "bleu-157": 0.37424807048563635,
        "bleu-187": 0.3413988506628061,
        "bleu-173": 0.00010850074261863962,
        "codebleu-197": 0.6612656207348724,
        "codebleu-31": 0.6041510501673787,
        "codebleu-6": 0.017857142885001526,
        "codebleu-81": 0.05958013624035455,
        "codebleu-72": 0.03572940814502346,
        "codebleu-67": 0.04763417004978536,
        "codebleu-39": 0.6897226108114343,
        "codebleu-29": 0.5324307760516125,
        "codebleu-169": 0.707887619583812,
        "codebleu-23": 0.4819748589702166,
        "codebleu-182": 0.02381235136187583,
        "codebleu-130": 0.5593358395989975,
        "codebleu-8": 0.672053355219398,
        "codebleu-7": 0.6041979949874686,
        "codebleu-24": 0.6638783935002848,
        "codebleu-65": 0.02977702719264251,
        "codebleu-69": 0.6701943040883559,
        "codebleu-157": 0.6688368437024319,
        "codebleu-187": 0.5109384316649223,
        "codebleu-173": 0.03571680611940867,
        "chrf-197": 0.38017371163104274,
        "chrf-31": 0.4212938593807436,
        "chrf-6": 0.02640760430775156,
        "chrf-81": 0.041733256853256684,
        "chrf-72": 0.027884906909580766,
        "chrf-67": 0.03657194659241904,
        "chrf-39": 0.5004547674985546,
        "chrf-29": 0.31240978386778046,
        "chrf-169": 0.5528353809213641,
        "chrf-23": 0.2839567425738537,
        "chrf-182": 0.02718297322684299,
        "chrf-130": 0.2441623719352551,
        "chrf-8": 0.47157471184303806,
        "chrf-7": 0.29300098605802244,
        "chrf-24": 0.469490994826089,
        "chrf-65": 0.03361804514306587,
        "chrf-69": 0.5223281606179974,
        "chrf-157": 0.49756166547260716,
        "chrf-187": 0.41067464477156745,
        "chrf-173": 0.020090970779351344,
        "rougel-197": 0.4878048780487805,
        "rougel-31": 0.524390243902439,
        "rougel-6": 0.046511627906976744,
        "rougel-81": 0.10638297872340424,
        "rougel-72": 0.04395604395604395,
        "rougel-67": 0.08695652173913043,
        "rougel-39": 0.6549707602339182,
        "rougel-29": 0.4871794871794871,
        "rougel-169": 0.5652173913043479,
        "rougel-23": 0.41830065359477125,
        "rougel-182": 0.0449438202247191,
        "rougel-130": 0.29838709677419356,
        "rougel-8": 0.5614035087719298,
        "rougel-7": 0.3088803088803089,
        "rougel-24": 0.4644549763033175,
        "rougel-65": 0.04395604395604395,
        "rougel-69": 0.5436893203883495,
        "rougel-157": 0.5957446808510639,
        "rougel-187": 0.5694444444444444,
        "rougel-173": 0.042105263157894736,
        "meteor-197": 0.47174946165961923,
        "meteor-31": 0.533665458937198,
        "meteor-6": 0.013333333333333334,
        "meteor-81": 0.04907651715039578,
        "meteor-72": 0.013245033112582783,
        "meteor-67": 0.041749338624338626,
        "meteor-39": 0.5769941598284911,
        "meteor-29": 0.42339939024390244,
        "meteor-169": 0.6120484490272246,
        "meteor-23": 0.3299775656959699,
        "meteor-182": 0.013280212483399733,
        "meteor-130": 0.3738881578947369,
        "meteor-8": 0.5170701327793218,
        "meteor-7": 0.40196175682099544,
        "meteor-24": 0.5227530845845102,
        "meteor-65": 0.013245033112582783,
        "meteor-69": 0.5685187034462275,
        "meteor-157": 0.6046996263294049,
        "meteor-187": 0.568574608940184,
        "meteor-173": 0.013175230566534914,
        "ruby-197": 0.34426229508196726,
        "ruby-31": 0.3493975903614458,
        "ruby-6": 0.02409638554216864,
        "ruby-81": 0.06024096385542166,
        "ruby-72": 0.02409638554216864,
        "ruby-67": 0.048192771084337394,
        "ruby-39": 0.5454545454545454,
        "ruby-29": 0.37349397590361444,
        "ruby-169": 0.4356435643564357,
        "ruby-23": 0.27710843373493976,
        "ruby-182": 0.02409638554216864,
        "ruby-130": 0.17575757575757578,
        "ruby-8": 0.40909090909090906,
        "ruby-7": 0.1875,
        "ruby-24": 0.3359375,
        "ruby-65": 0.02409638554216864,
        "ruby-69": 0.4227642276422764,
        "ruby-157": 0.4666666666666667,
        "ruby-187": 0.45783132530120485,
        "ruby-173": 0.02409638554216864,
        "codebertscore_f1-197": 0.7591710686683655,
        "codebertscore_f3-197": 0.7795681357383728,
        "codebertscore_f1-31": 0.8251270055770874,
        "codebertscore_f3-31": 0.8416162133216858,
        "codebertscore_f1-6": 0.5383573174476624,
        "codebertscore_f3-6": 0.5051402449607849,
        "codebertscore_f1-81": 0.5786100029945374,
        "codebertscore_f3-81": 0.5664001107215881,
        "codebertscore_f1-72": 0.5853784084320068,
        "codebertscore_f3-72": 0.5661203265190125,
        "codebertscore_f1-67": 0.5857124924659729,
        "codebertscore_f3-67": 0.564976692199707,
        "codebertscore_f1-39": 0.8558029532432556,
        "codebertscore_f3-39": 0.8624573945999146,
        "codebertscore_f1-29": 0.8022689819335938,
        "codebertscore_f3-29": 0.7909298539161682,
        "codebertscore_f1-169": 0.8475790023803711,
        "codebertscore_f3-169": 0.8605616688728333,
        "codebertscore_f1-23": 0.771386444568634,
        "codebertscore_f3-23": 0.7584131956100464,
        "codebertscore_f1-182": 0.5732668042182922,
        "codebertscore_f3-182": 0.552796483039856,
        "codebertscore_f1-130": 0.6916978359222412,
        "codebertscore_f3-130": 0.7154403924942017,
        "codebertscore_f1-8": 0.8499849438667297,
        "codebertscore_f3-8": 0.851163387298584,
        "codebertscore_f1-7": 0.693165123462677,
        "codebertscore_f3-7": 0.7204301357269287,
        "codebertscore_f1-24": 0.7710419297218323,
        "codebertscore_f3-24": 0.7964150309562683,
        "codebertscore_f1-65": 0.5817162394523621,
        "codebertscore_f3-65": 0.561661958694458,
        "codebertscore_f1-69": 0.8331544995307922,
        "codebertscore_f3-69": 0.860909104347229,
        "codebertscore_f1-157": 0.7992112040519714,
        "codebertscore_f3-157": 0.8230648636817932,
        "codebertscore_f1-187": 0.8309198021888733,
        "codebertscore_f3-187": 0.8229819536209106,
        "codebertscore_f1-173": 0.5503841042518616,
        "codebertscore_f3-173": 0.5321866273880005,
        "codebertscore_s_f1-197": 0.823805570602417,
        "codebertscore_s_f3-197": 0.8419276475906372,
        "codebertscore_s_f1-31": 0.8650137186050415,
        "codebertscore_s_f3-31": 0.8781836628913879,
        "codebertscore_s_f1-6": 0.8078949451446533,
        "codebertscore_s_f3-6": 0.7306636571884155,
        "codebertscore_s_f1-81": 0.7809951901435852,
        "codebertscore_s_f3-81": 0.7366704344749451,
        "codebertscore_s_f1-72": 0.7813286781311035,
        "codebertscore_s_f3-72": 0.7328678369522095,
        "codebertscore_s_f1-67": 0.7912587523460388,
        "codebertscore_s_f3-67": 0.738264262676239,
        "codebertscore_s_f1-39": 0.8896042108535767,
        "codebertscore_s_f3-39": 0.8959144353866577,
        "codebertscore_s_f1-29": 0.854279100894928,
        "codebertscore_s_f3-29": 0.8440845012664795,
        "codebertscore_s_f1-169": 0.8879780769348145,
        "codebertscore_s_f3-169": 0.8981384038925171,
        "codebertscore_s_f1-23": 0.8324280381202698,
        "codebertscore_s_f3-23": 0.8211616277694702,
        "codebertscore_s_f1-182": 0.7903647422790527,
        "codebertscore_s_f3-182": 0.7343882918357849,
        "codebertscore_s_f1-130": 0.7693865299224854,
        "codebertscore_s_f3-130": 0.7969813942909241,
        "codebertscore_s_f1-8": 0.8846847414970398,
        "codebertscore_s_f3-8": 0.8872144222259521,
        "codebertscore_s_f1-7": 0.7715486884117126,
        "codebertscore_s_f3-7": 0.7952075600624084,
        "codebertscore_s_f1-24": 0.8257522583007812,
        "codebertscore_s_f3-24": 0.8548057675361633,
        "codebertscore_s_f1-65": 0.7916996479034424,
        "codebertscore_s_f3-65": 0.7345262765884399,
        "codebertscore_s_f1-69": 0.8739314675331116,
        "codebertscore_s_f3-69": 0.8949469327926636,
        "codebertscore_s_f1-157": 0.8504955172538757,
        "codebertscore_s_f3-157": 0.8685630559921265,
        "codebertscore_s_f1-187": 0.8814219832420349,
        "codebertscore_s_f3-187": 0.8738003969192505,
        "codebertscore_s_f1-173": 0.772283673286438,
        "codebertscore_s_f3-173": 0.7266572713851929,
        "gpt35_nsnr-197": 3,
        "raw_gpt35_nsnr-197": "3",
        "gpt35_nsnr-31": 4,
        "raw_gpt35_nsnr-31": "4",
        "gpt35_nsnr-6": 0,
        "raw_gpt35_nsnr-6": "0",
        "gpt35_nsnr-81": 3,
        "raw_gpt35_nsnr-81": "3",
        "gpt35_nsnr-72": 0,
        "raw_gpt35_nsnr-72": "0",
        "gpt35_nsnr-67": 4,
        "raw_gpt35_nsnr-67": "4",
        "gpt35_nsnr-39": 4,
        "raw_gpt35_nsnr-39": "4",
        "gpt35_nsnr-29": 4,
        "raw_gpt35_nsnr-29": "4",
        "gpt35_nsnr-169": 4,
        "raw_gpt35_nsnr-169": "4",
        "gpt35_nsnr-23": 3,
        "raw_gpt35_nsnr-23": "3",
        "gpt35_nsnr-182": 0,
        "raw_gpt35_nsnr-182": "0",
        "gpt35_nsnr-130": 3,
        "raw_gpt35_nsnr-130": "3",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-24": 4,
        "raw_gpt35_nsnr-24": "4",
        "gpt35_nsnr-65": 0,
        "raw_gpt35_nsnr-65": "0",
        "gpt35_nsnr-69": 4,
        "raw_gpt35_nsnr-69": "4",
        "gpt35_nsnr-157": 4,
        "raw_gpt35_nsnr-157": "4",
        "gpt35_nsnr-187": 4,
        "raw_gpt35_nsnr-187": "4",
        "gpt35_nsnr-173": 3,
        "raw_gpt35_nsnr-173": "3",
        "gpt35_nswr-197": 3,
        "raw_gpt35_nswr-197": "3",
        "gpt35_nswr-31": 4,
        "raw_gpt35_nswr-31": "4",
        "gpt35_nswr-6": 0,
        "raw_gpt35_nswr-6": "0",
        "gpt35_nswr-81": 2,
        "raw_gpt35_nswr-81": "2",
        "gpt35_nswr-72": 0,
        "raw_gpt35_nswr-72": "0",
        "gpt35_nswr-67": 2,
        "raw_gpt35_nswr-67": "2",
        "gpt35_nswr-39": 4,
        "raw_gpt35_nswr-39": "4",
        "gpt35_nswr-29": 3,
        "raw_gpt35_nswr-29": "3",
        "gpt35_nswr-169": 3,
        "raw_gpt35_nswr-169": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-182": 0,
        "raw_gpt35_nswr-182": "0",
        "gpt35_nswr-130": 3,
        "raw_gpt35_nswr-130": "3",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-24": 4,
        "raw_gpt35_nswr-24": "4",
        "gpt35_nswr-65": 0,
        "raw_gpt35_nswr-65": "0",
        "gpt35_nswr-69": 3,
        "raw_gpt35_nswr-69": "3",
        "gpt35_nswr-157": 3,
        "raw_gpt35_nswr-157": "3",
        "gpt35_nswr-187": 4,
        "raw_gpt35_nswr-187": "4",
        "gpt35_nswr-173": 3,
        "raw_gpt35_nswr-173": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // I think we all remember that feeling when the result of some long-awaited\n    // event is finally known. The feelings and thoughts you have at that moment are\n    // definitely worth noting down and comparing.\n    // Your task is to determine if a person correctly guessed the results of a number of matches.\n    // You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    // Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    // the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    public static ArrayList<Integer> compare(ArrayList<Integer> game, ArrayList<Integer> guess) {\n",
        "snippet": [
            "        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            result.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return result;\n    }\n}"
        ],
        "simplified": "I think we all remember that feeling when the result of some long-awaited event is finally known. The feelings and thoughts you have at that moment are definitely worth noting down and comparing. Your task is to determine if a person correctly guessed the results of a number of matches. You are given two arrays of scores and guesses of equal length, where each index shows a match. Return an array of the same length denoting how far off each guess was. If they have guessed correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.",
        "task_id": "152",
        "36": "ArrayList<Integer> errors = new ArrayList<Integer>();\n        for (int i = 0; i < game.size(); i++) {\n            int difference = Math.abs(game.get(i) - guess.get(i));\n            errors.add(difference);\n        }\n        return errors;",
        "grade-36": {
            "execution": 1
        },
        "7": "ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < game.size(); i++) {\n            if (game.get(i) == guess.get(i)) {\n                result.add(0);\n            } else {\n                result.add(Math.abs(game.get(i) - guess.get(i)));\n            }\n        }\n        return result;",
        "grade-7": {
            "execution": 1
        },
        "104": "ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < game.size(); i++) {\n            int score = game.get(i);\n            int guessScore = guess.get(i);\n            if (score == guessScore) {\n                result.add(0);\n            } else {\n                result.add(Math.abs(score - guessScore));\n            }\n        }\n        return result;",
        "grade-104": {
            "execution": 1
        },
        "92": "ArrayList<Integer> ans = new ArrayList<Integer>();\n        for (int i = 0; i < game.size(); i++) {\n            ans.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return ans;",
        "grade-92": {
            "execution": 1
        },
        "86": "ArrayList<Integer> res = new ArrayList<Integer>();\n        for (int i = 0; i < game.size(); i++) {\n            res.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return res;",
        "grade-86": {
            "execution": 1
        },
        "53": "ArrayList<Integer> output = new ArrayList<Integer>();\n        for (int i = 0; i < game.size(); i++) {\n            int distance = Math.abs(game.get(i) - guess.get(i));\n            output.add(distance);\n        }\n        return output;",
        "grade-53": {
            "execution": 1
        },
        "31": "var result = new ArrayList<Integer>();\n        for (int i = 0; i < game.size(); i++) {\n            result.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return result;",
        "grade-31": {
            "execution": 1
        },
        "26": "ArrayList<Integer> difference = new ArrayList<Integer>();\n        for (int i = 0; i < game.size(); i++) {\n            if (game.get(i) == guess.get(i)) {\n                difference.add(0);\n            } else {\n                difference.add(Math.abs(game.get(i) - guess.get(i)));\n            }\n        }\n        return difference;",
        "grade-26": {
            "execution": 1
        },
        "163": "ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < game.size(); i++) {\n            int x = Math.abs(game.get(i) - guess.get(i));\n            result.add(x);\n        }\n        return result;",
        "grade-163": {
            "execution": 1
        },
        "9": "return game.stream().map(a -> a - guess.get(game.indexOf(a))).map(Math::abs).collect(Collectors.toCollection(ArrayList::new));",
        "grade-9": {
            "execution": 0
        },
        "8": "ArrayList<Integer> diffs = new ArrayList<Integer>();\n        for (int i = 0; i < game.size(); i++) {\n            if (game.get(i) == guess.get(i)) {\n                diffs.add(0);\n            } else {\n                diffs.add(Math.abs(game.get(i) - guess.get(i)));\n            }\n        }\n        return diffs;",
        "grade-8": {
            "execution": 1
        },
        "27": "ArrayList<Integer> solution = new ArrayList<Integer>();\n        for (int i = 0; i < game.size(); i++) {\n            solution.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return solution;",
        "grade-27": {
            "execution": 1
        },
        "84": "ArrayList<Integer> result = new ArrayList<Integer>();\n        // result.add(guess.get(0));\n        // guess.remove(0);\n        // guess.add(result.get(0));\n        // guess.remove(result.get(0));\n        // result.remove(0);\n        for (int i = 0; i < game.size(); i++) {\n            // if (game.get(i) - guess.get(i) == 0) {\n            //     result.add(0);\n            // } else {\n            //     result.add(Math.abs(game.get(i) - guess.get(i)));\n            // }\n            result.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return result;",
        "grade-84": {
            "execution": 1
        },
        "89": "ArrayList<Integer> res = new ArrayList<Integer>();\n        for (int i = 0; i < game.size(); i++) {\n            if (game.get(i) == guess.get(i)) res.add(0);\n            else res.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return res;",
        "grade-89": {
            "execution": 1
        },
        "196": "ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < game.size(); i++) {\n            int difference = game.get(i) - guess.get(i);\n            difference = Math.abs(difference);\n            result.add(difference);\n        }\n        return result;",
        "grade-196": {
            "execution": 1
        },
        "77": "ArrayList<Integer> difference = new ArrayList<Integer>();\n        for (int i = 0; i < game.size(); i++) {\n            int diff = Math.abs(game.get(i) - guess.get(i));\n            difference.add(diff);\n        }\n        return difference;",
        "grade-77": {
            "execution": 1
        },
        "162": "ArrayList<Integer> output = new ArrayList<Integer>();\n        for (int i = 0; i < game.size(); i++) {\n            int diff = Math.abs(game.get(i) - guess.get(i));\n            output.add(diff);\n        }\n        return output;",
        "grade-162": {
            "execution": 1
        },
        "85": "ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int index = 0; index < game.size(); index++) {\n            result.add(Math.abs(game.get(index) - guess.get(index)));\n        }\n        return result;",
        "grade-85": {
            "execution": 1
        },
        "170": "ArrayList<Integer> ret = new ArrayList<Integer>();\n        for (int i = 0; i < game.size(); i++) {\n            if (game.get(i) > guess.get(i)) {\n                ret.add(game.get(i) - guess.get(i));\n            } else if (game.get(i) < guess.get(i)) {\n                ret.add(guess.get(i) - game.get(i));\n            } else {\n                ret.add(0);\n            }\n        }\n        return ret;",
        "grade-170": {
            "execution": 1
        },
        "105": "ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < game.size(); i++) {\n            int gm = game.get(i);\n            int gs = guess.get(i);\n            if (gm != gs) {\n                result.add(Math.abs(gm - gs));\n            } else {\n                result.add(0);\n            }\n        }\n        return result;",
        "grade-105": {
            "execution": 1
        },
        "bleu-36": 0.7261211983458719,
        "bleu-7": 0.645922201454765,
        "bleu-104": 0.5676965359638504,
        "bleu-92": 0.832593258111798,
        "bleu-86": 0.832593258111798,
        "bleu-53": 0.7261211983458719,
        "bleu-31": 0.9029349885582547,
        "bleu-26": 0.5754882032828325,
        "bleu-163": 0.8070786943662921,
        "bleu-9": 0.1316351142513024,
        "bleu-8": 0.5754882032828325,
        "bleu-27": 0.832593258111798,
        "bleu-84": 0.30712296228519226,
        "bleu-89": 0.5946628476270115,
        "bleu-196": 0.724188780677129,
        "bleu-77": 0.7261211983458719,
        "bleu-162": 0.7261211983458719,
        "bleu-85": 0.7334042834026465,
        "bleu-170": 0.3828055969262183,
        "bleu-105": 0.5838119501467964,
        "codebleu-36": 0.8125484259473192,
        "codebleu-7": 0.8463631815823568,
        "codebleu-104": 0.7918091910000628,
        "codebleu-92": 0.8782855125603434,
        "codebleu-86": 0.8782855125603434,
        "codebleu-53": 0.8125484259473192,
        "codebleu-31": 0.8770583226039507,
        "codebleu-26": 0.8328227246315758,
        "codebleu-163": 0.8287230982145711,
        "codebleu-9": 0.41996990954916835,
        "codebleu-8": 0.8328227246315758,
        "codebleu-27": 0.8782855125603434,
        "codebleu-84": 0.7917671819833428,
        "codebleu-89": 0.8050538353267312,
        "codebleu-196": 0.7944191232222126,
        "codebleu-77": 0.8125484259473192,
        "codebleu-162": 0.8125484259473192,
        "codebleu-85": 0.8501033989663316,
        "codebleu-170": 0.7804087314432773,
        "codebleu-105": 0.7918091910000628,
        "chrf-36": 0.7163150110877256,
        "chrf-7": 0.8668735278787486,
        "chrf-104": 0.7783248980207754,
        "chrf-92": 0.7874783776491077,
        "chrf-86": 0.8477280137088531,
        "chrf-53": 0.7355469237223001,
        "chrf-31": 0.931319803292105,
        "chrf-26": 0.7081098391750047,
        "chrf-163": 0.8829206001850547,
        "chrf-9": 0.3038146178639747,
        "chrf-8": 0.7249122438566757,
        "chrf-27": 0.7794288630974567,
        "chrf-84": 0.6827033826573835,
        "chrf-89": 0.7831500807677694,
        "chrf-196": 0.8067314977029466,
        "chrf-77": 0.7138908575370473,
        "chrf-162": 0.7407278796955186,
        "chrf-85": 0.8279781835166777,
        "chrf-170": 0.6488371178318636,
        "chrf-105": 0.8162929180874979,
        "rougel-36": 0.8421052631578948,
        "rougel-7": 0.7898089171974522,
        "rougel-104": 0.675,
        "rougel-92": 0.921875,
        "rougel-86": 0.921875,
        "rougel-53": 0.8421052631578948,
        "rougel-31": 0.9354838709677419,
        "rougel-26": 0.7515923566878981,
        "rougel-163": 0.8721804511278196,
        "rougel-9": 0.33043478260869563,
        "rougel-8": 0.7515923566878981,
        "rougel-27": 0.921875,
        "rougel-84": 0.49011857707509887,
        "rougel-89": 0.7712418300653595,
        "rougel-196": 0.7883211678832116,
        "rougel-77": 0.8421052631578948,
        "rougel-162": 0.8421052631578948,
        "rougel-85": 0.890625,
        "rougel-170": 0.6031746031746033,
        "rougel-105": 0.6878980891719746,
        "meteor-36": 0.8108291077365722,
        "meteor-7": 0.8968609865470852,
        "meteor-104": 0.7386688959030878,
        "meteor-92": 0.9202388860959494,
        "meteor-86": 0.9202388860959494,
        "meteor-53": 0.8108291077365722,
        "meteor-31": 0.9273906507744648,
        "meteor-26": 0.8396271474992055,
        "meteor-163": 0.8671522719389526,
        "meteor-9": 0.3394138755980861,
        "meteor-8": 0.8396271474992055,
        "meteor-27": 0.9202388860959494,
        "meteor-84": 0.7738842933006537,
        "meteor-89": 0.8164406995656335,
        "meteor-196": 0.8537969244286816,
        "meteor-77": 0.8108291077365722,
        "meteor-162": 0.8108291077365722,
        "meteor-85": 0.8874244959987688,
        "meteor-170": 0.6422105573316077,
        "meteor-105": 0.7285681754484306,
        "ruby-36": 0.7681159420289855,
        "ruby-7": 0.6451612903225806,
        "ruby-104": 0.5208333333333333,
        "ruby-92": 0.890625,
        "ruby-86": 0.890625,
        "ruby-53": 0.7681159420289855,
        "ruby-31": 0.890625,
        "ruby-26": 0.6129032258064516,
        "ruby-163": 0.7971014492753623,
        "ruby-9": 0.1875,
        "ruby-8": 0.6129032258064516,
        "ruby-27": 0.890625,
        "ruby-84": 0.3227513227513228,
        "ruby-89": 0.6404494382022472,
        "ruby-196": 0.6438356164383562,
        "ruby-77": 0.7681159420289855,
        "ruby-162": 0.7681159420289855,
        "ruby-85": 0.859375,
        "ruby-170": 0.45599999999999996,
        "ruby-105": 0.5483870967741935,
        "codebertscore_f1-36": 0.9359811544418335,
        "codebertscore_f3-36": 0.9472594857215881,
        "codebertscore_f1-7": 0.926560640335083,
        "codebertscore_f3-7": 0.9402749538421631,
        "codebertscore_f1-104": 0.896463930606842,
        "codebertscore_f3-104": 0.9257820844650269,
        "codebertscore_f1-92": 0.9641797542572021,
        "codebertscore_f3-92": 0.9668455123901367,
        "codebertscore_f1-86": 0.9712586402893066,
        "codebertscore_f3-86": 0.9740757942199707,
        "codebertscore_f1-53": 0.9518492817878723,
        "codebertscore_f3-53": 0.9609876275062561,
        "codebertscore_f1-31": 0.9702603816986084,
        "codebertscore_f3-31": 0.971888542175293,
        "codebertscore_f1-26": 0.9077532887458801,
        "codebertscore_f3-26": 0.9204677939414978,
        "codebertscore_f1-163": 0.9618955254554749,
        "codebertscore_f3-163": 0.9705853462219238,
        "codebertscore_f1-9": 0.7373203635215759,
        "codebertscore_f3-9": 0.7428985834121704,
        "codebertscore_f1-8": 0.8999459147453308,
        "codebertscore_f3-8": 0.9202234745025635,
        "codebertscore_f1-27": 0.9659294486045837,
        "codebertscore_f3-27": 0.9685846567153931,
        "codebertscore_f1-84": 0.8174929022789001,
        "codebertscore_f3-84": 0.8608723282814026,
        "codebertscore_f1-89": 0.9289313554763794,
        "codebertscore_f3-89": 0.941361665725708,
        "codebertscore_f1-196": 0.9359435439109802,
        "codebertscore_f3-196": 0.9552229642868042,
        "codebertscore_f1-77": 0.9412840604782104,
        "codebertscore_f3-77": 0.9504011869430542,
        "codebertscore_f1-162": 0.9509159326553345,
        "codebertscore_f3-162": 0.9606016278266907,
        "codebertscore_f1-85": 0.9659695029258728,
        "codebertscore_f3-85": 0.9685786962509155,
        "codebertscore_f1-170": 0.8807085156440735,
        "codebertscore_f3-170": 0.9003101587295532,
        "codebertscore_f1-105": 0.8928388357162476,
        "codebertscore_f3-105": 0.9280358552932739,
        "codebertscore_s_f1-36": 0.939086377620697,
        "codebertscore_s_f3-36": 0.9520837068557739,
        "codebertscore_s_f1-7": 0.9436670541763306,
        "codebertscore_s_f3-7": 0.9587255120277405,
        "codebertscore_s_f1-104": 0.9117263555526733,
        "codebertscore_s_f3-104": 0.9440293312072754,
        "codebertscore_s_f1-92": 0.972311794757843,
        "codebertscore_s_f3-92": 0.975063681602478,
        "codebertscore_s_f1-86": 0.9813154935836792,
        "codebertscore_s_f3-86": 0.9841634631156921,
        "codebertscore_s_f1-53": 0.9588358402252197,
        "codebertscore_s_f3-53": 0.9703047871589661,
        "codebertscore_s_f1-31": 0.9807615280151367,
        "codebertscore_s_f3-31": 0.9846283197402954,
        "codebertscore_s_f1-26": 0.9215216636657715,
        "codebertscore_s_f3-26": 0.935222864151001,
        "codebertscore_s_f1-163": 0.9699830412864685,
        "codebertscore_s_f3-163": 0.9807719588279724,
        "codebertscore_s_f1-9": 0.7306876182556152,
        "codebertscore_s_f3-9": 0.7404026985168457,
        "codebertscore_s_f1-8": 0.91318279504776,
        "codebertscore_s_f3-8": 0.9361453652381897,
        "codebertscore_s_f1-27": 0.9747142791748047,
        "codebertscore_s_f3-27": 0.9774118661880493,
        "codebertscore_s_f1-84": 0.8549116253852844,
        "codebertscore_s_f3-84": 0.8989132642745972,
        "codebertscore_s_f1-89": 0.945282518863678,
        "codebertscore_s_f3-89": 0.9589588642120361,
        "codebertscore_s_f1-196": 0.9422272443771362,
        "codebertscore_s_f3-196": 0.96361243724823,
        "codebertscore_s_f1-77": 0.9455000162124634,
        "codebertscore_s_f3-77": 0.955766499042511,
        "codebertscore_s_f1-162": 0.9590457677841187,
        "codebertscore_s_f3-162": 0.9703280329704285,
        "codebertscore_s_f1-85": 0.9747614860534668,
        "codebertscore_s_f3-85": 0.9774777889251709,
        "codebertscore_s_f1-170": 0.8996705412864685,
        "codebertscore_s_f3-170": 0.9170615077018738,
        "codebertscore_s_f1-105": 0.9072967767715454,
        "codebertscore_s_f3-105": 0.9438539743423462,
        "gpt35_nsnr-36": 4,
        "raw_gpt35_nsnr-36": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-104": 4,
        "raw_gpt35_nsnr-104": "4",
        "gpt35_nsnr-92": 4,
        "raw_gpt35_nsnr-92": "4",
        "gpt35_nsnr-86": 4,
        "raw_gpt35_nsnr-86": "4",
        "gpt35_nsnr-53": 4,
        "raw_gpt35_nsnr-53": "4",
        "gpt35_nsnr-31": 4,
        "raw_gpt35_nsnr-31": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-163": 4,
        "raw_gpt35_nsnr-163": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-27": 4,
        "raw_gpt35_nsnr-27": "4",
        "gpt35_nsnr-84": 3,
        "raw_gpt35_nsnr-84": "3",
        "gpt35_nsnr-89": 4,
        "raw_gpt35_nsnr-89": "4",
        "gpt35_nsnr-196": 4,
        "raw_gpt35_nsnr-196": "4",
        "gpt35_nsnr-77": 4,
        "raw_gpt35_nsnr-77": "4",
        "gpt35_nsnr-162": 4,
        "raw_gpt35_nsnr-162": "4",
        "gpt35_nsnr-85": 4,
        "raw_gpt35_nsnr-85": "4",
        "gpt35_nsnr-170": 4,
        "raw_gpt35_nsnr-170": "4",
        "gpt35_nsnr-105": 4,
        "raw_gpt35_nsnr-105": "4",
        "gpt35_nswr-36": 4,
        "raw_gpt35_nswr-36": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-104": 4,
        "raw_gpt35_nswr-104": "4",
        "gpt35_nswr-92": 4,
        "raw_gpt35_nswr-92": "4",
        "gpt35_nswr-86": 4,
        "raw_gpt35_nswr-86": "4",
        "gpt35_nswr-53": 4,
        "raw_gpt35_nswr-53": "4",
        "gpt35_nswr-31": 4,
        "raw_gpt35_nswr-31": "4",
        "gpt35_nswr-26": 4,
        "raw_gpt35_nswr-26": "4",
        "gpt35_nswr-163": 4,
        "raw_gpt35_nswr-163": "4",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-27": 4,
        "raw_gpt35_nswr-27": "4",
        "gpt35_nswr-84": 4,
        "raw_gpt35_nswr-84": "4",
        "gpt35_nswr-89": 4,
        "raw_gpt35_nswr-89": "4",
        "gpt35_nswr-196": 4,
        "raw_gpt35_nswr-196": "4",
        "gpt35_nswr-77": 4,
        "raw_gpt35_nswr-77": "4",
        "gpt35_nswr-162": 4,
        "raw_gpt35_nswr-162": "4",
        "gpt35_nswr-85": 4,
        "raw_gpt35_nswr-85": "4",
        "gpt35_nswr-170": 3,
        "raw_gpt35_nswr-170": "3",
        "gpt35_nswr-105": 4,
        "raw_gpt35_nswr-105": "4"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Out of list of strings, return the longest one. Return the first one in case of multiple\n    // strings of the same length. Return None in case the input list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b', 'c'])\n    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n    public static Optional<String> longest(ArrayList<String> strings) {\n",
        "snippet": [
            "        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}"
        ],
        "simplified": "Out of list of strings, return the longest one. Return the first one in case of multiple strings of the same length. Return None in case the input list is empty.",
        "task_id": "12",
        "30": "if (strings.size() > 0) {\n            strings.sort((s1, s2) -> Integer.compare(s2.length(), s1.length()));\n            return Optional.of(strings.get(0));\n        } else {\n            return Optional.empty();\n        }",
        "grade-30": {
            "execution": 0
        },
        "6": "// FILL IN\n        //throw new UnsupportedOperationException(\"longest\");\n        return strings.stream().max(Comparator.comparing(String::length));",
        "grade-6": {
            "execution": 0
        },
        "80": "if (strings.size() == 0) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);",
        "grade-80": {
            "execution": 0
        },
        "70": "if (strings.size() == 0) {\n            return Optional.empty();\n        }\n        int max_length = 0;\n        String max_string = null;\n        for (String s : strings) {\n            if (s.length() > max_length) {\n                max_length = s.length();\n                max_string = s;\n            }\n        }\n        return Optional.of(max_string);",
        "grade-70": {
            "execution": 0
        },
        "64": "Optional<String> longest = Optional.empty();\n        if (strings.size() > 0) {\n            longest = Optional.of(strings.get(0));\n            for (String s : strings) {\n                if (s.length() > longest.get().length()) {\n                    longest = Optional.of(s);\n                }\n            }\n        }\n        return longest;",
        "grade-64": {
            "execution": 0
        },
        "38": "if (strings.size() == 0) {\n            return Optional.empty();\n        }\n        Optional<String> maxStr = Optional.of(strings.get(0));\n        for (String s : strings) {\n            if (s.length() > maxStr.get().length()) {\n                maxStr = Optional.of(s);\n            }\n        }\n        return maxStr;",
        "grade-38": {
            "execution": 0
        },
        "28": "if (strings.size() == 0) return Optional.empty();\n        String res = \"\";\n        for (String str : strings) {\n            if (str.length() > res.length()) res = str;\n        }\n        return Optional.of(res);",
        "grade-28": {
            "execution": 0
        },
        "172": "int max_length = 0;\n        String longest_string = null;\n        for (String s : strings) {\n            if (s.length() > max_length) {\n                max_length = s.length();\n                longest_string = s;\n            }\n        }\n        return Optional.ofNullable(longest_string);",
        "grade-172": {
            "execution": 0
        },
        "23": "// Add code here\n        return Optional.empty();",
        "grade-23": {
            "execution": 0
        },
        "186": "Optional<String> res = Optional.empty();\n        int len = 0;\n        for (String s : strings) {\n            if (s.length() > len) {\n                res = Optional.of(s);\n                len = s.length();\n            }\n        }\n        return res;",
        "grade-186": {
            "execution": 0
        },
        "130": "if (strings.size() == 0) return Optional.empty();\n        return strings.stream().reduce((a, b) -> a.length() >= b.length() ? a : b);",
        "grade-130": {
            "execution": 0
        },
        "8": "return strings.stream().reduce((left, right) -> left.length() >= right.length() ? left : right);",
        "grade-8": {
            "execution": 0
        },
        "7": "if (strings.size() == 0) {\n            return Optional.empty();\n        }\n        int maxLength = strings.get(0).length();\n        String longest = strings.get(0);\n        for (int i = 1; i < strings.size(); i++) {\n            String s = strings.get(i);\n            if (s.length() > maxLength) {\n                maxLength = s.length();\n                longest = s;\n            }\n        }\n        return Optional.of(longest);",
        "grade-7": {
            "execution": 0
        },
        "24": "if (strings.size() == 0) {\n            return Optional.empty();\n        }\n        ArrayList<Integer> lengths = new ArrayList<Integer>();\n        for (String string : strings) {\n            lengths.add(string.length());\n        }\n        int maxLength = Collections.max(lengths);\n        int index = lengths.indexOf(maxLength);\n        return Optional.of(strings.get(index));",
        "grade-24": {
            "execution": 0
        },
        "61": "// Write your code here\n        return Optional.empty();",
        "grade-61": {
            "execution": 0
        },
        "67": "// Write your code here\n        return null;",
        "grade-67": {
            "execution": 0
        },
        "159": "if (strings.size() == 0) {\n            return Optional.empty();\n        }\n        else {\n            Optional<String> result = Optional.of(strings.get(0));\n            for (String s : strings) {\n                if (s.length() > result.get().length()) {\n                    result = Optional.of(s);\n                }\n            }\n            return result;\n        }",
        "grade-159": {
            "execution": 0
        },
        "190": "if (strings.size() == 0) return Optional.empty();\n        int max = strings.get(0).length();\n        String output = \"\";\n        for (String item : strings) {\n            if (item.length() > max) {\n                max = item.length();\n                output = item;\n            }\n        }\n        return Optional.of(output);",
        "grade-190": {
            "execution": 0
        },
        "176": "int maxLength = 0;\n        Optional<String> maxString = Optional.empty();\n        for (String s : strings) {\n            if (s.length() > maxLength) {\n                maxLength = s.length();\n                maxString = Optional.of(s);\n            }\n        }\n        return maxString;",
        "grade-176": {
            "execution": 0
        },
        "55": "if (strings.size() == 0) {\n\t    return Optional.empty();\n\t}\n\telse {\n\t    String longestString = strings.get(0);\n\t    for (String str : strings) {\n\t\tif (str.length() > longestString.length()) {\n\t\t    longestString = str;\n\t\t}\n\t    }\n\t    return Optional.of(longestString);\n\t}",
        "grade-55": {
            "execution": 0
        },
        "bleu-30": 0.41385279740472647,
        "bleu-6": 0.024339421882921236,
        "bleu-80": 0.8958892368390511,
        "bleu-70": 0.5751356589835873,
        "bleu-64": 0.5706115245101049,
        "bleu-38": 0.5320595232100557,
        "bleu-28": 0.42061333669839707,
        "bleu-172": 0.41555081256987725,
        "bleu-23": 0.005270469882688059,
        "bleu-186": 0.46102873091488983,
        "bleu-130": 0.24395462209971047,
        "bleu-8": 0.08840589758757027,
        "bleu-7": 0.4159613776081727,
        "bleu-24": 0.32021047982262096,
        "bleu-61": 0.007386658774932466,
        "bleu-67": 9.011153704173474e-05,
        "bleu-159": 0.5437340012754143,
        "bleu-190": 0.43973620538416663,
        "bleu-176": 0.46882573569390185,
        "bleu-55": 0.6131843979442969,
        "codebleu-30": 0.627224808485228,
        "codebleu-6": 0.21892881345952173,
        "codebleu-80": 0.8816584686441097,
        "codebleu-70": 0.7022584459162536,
        "codebleu-64": 0.7422529670081109,
        "codebleu-38": 0.7675521933646294,
        "codebleu-28": 0.6386477903391012,
        "codebleu-172": 0.5051257885513186,
        "codebleu-23": 0.09418800563020965,
        "codebleu-186": 0.5910434998605267,
        "codebleu-130": 0.4749092889016949,
        "codebleu-8": 0.2762934756818437,
        "codebleu-7": 0.7505734841768115,
        "codebleu-24": 0.682082276138266,
        "codebleu-61": 0.10139748471047548,
        "codebleu-67": 0.045859221041845435,
        "codebleu-159": 0.7790926434310099,
        "codebleu-190": 0.6946236954006222,
        "codebleu-176": 0.5779716044356902,
        "codebleu-55": 0.7690912959636276,
        "chrf-30": 0.521674309475595,
        "chrf-6": 0.23420891228685023,
        "chrf-80": 0.9259663375391475,
        "chrf-70": 0.6245951490183407,
        "chrf-64": 0.7319222286357155,
        "chrf-38": 0.6514945821084672,
        "chrf-28": 0.5745782625637063,
        "chrf-172": 0.559225620133789,
        "chrf-23": 0.1546192369248518,
        "chrf-186": 0.5297587729334172,
        "chrf-130": 0.37095845435782565,
        "chrf-8": 0.22096112908974969,
        "chrf-7": 0.7065280861010159,
        "chrf-24": 0.5456735196879623,
        "chrf-61": 0.1649269471019775,
        "chrf-67": 0.04990238603325767,
        "chrf-159": 0.6661674305661349,
        "chrf-190": 0.596647269975146,
        "chrf-176": 0.5267774817423607,
        "chrf-55": 0.7867774000925662,
        "rougel-30": 0.5038167938931298,
        "rougel-6": 0.28846153846153844,
        "rougel-80": 0.9402985074626865,
        "rougel-70": 0.7391304347826085,
        "rougel-64": 0.6986301369863013,
        "rougel-38": 0.7466666666666666,
        "rougel-28": 0.7301587301587301,
        "rougel-172": 0.6050420168067226,
        "rougel-23": 0.17721518987341772,
        "rougel-186": 0.576,
        "rougel-130": 0.5210084033613446,
        "rougel-8": 0.37623762376237624,
        "rougel-7": 0.655367231638418,
        "rougel-24": 0.5534591194968554,
        "rougel-61": 0.17500000000000002,
        "rougel-67": 0.052631578947368425,
        "rougel-159": 0.7516778523489933,
        "rougel-190": 0.6986301369863013,
        "rougel-176": 0.549618320610687,
        "rougel-55": 0.8652482269503546,
        "meteor-30": 0.4454920460374727,
        "meteor-6": 0.17066308864265928,
        "meteor-80": 0.9396535839321909,
        "meteor-70": 0.7253976830990789,
        "meteor-64": 0.7574530593437311,
        "meteor-38": 0.6935839957520334,
        "meteor-28": 0.6426709465124134,
        "meteor-172": 0.5609959297569397,
        "meteor-23": 0.10320225651236105,
        "meteor-186": 0.5492593553468949,
        "meteor-130": 0.3534974942378042,
        "meteor-8": 0.21562852731683899,
        "meteor-7": 0.7256509715337648,
        "meteor-24": 0.44244732373588486,
        "meteor-61": 0.10303472038165915,
        "meteor-67": 0.016339869281045753,
        "meteor-159": 0.6785563665855636,
        "meteor-190": 0.6929711290523717,
        "meteor-176": 0.573569547929249,
        "meteor-55": 0.8851553937351857,
        "ruby-30": 0.31343283582089554,
        "ruby-6": 0.19402985074626866,
        "ruby-80": 0.8955223880597015,
        "ruby-70": 0.647887323943662,
        "ruby-64": 0.5316455696202531,
        "ruby-38": 0.6144578313253012,
        "ruby-28": 0.6417910447761195,
        "ruby-172": 0.4477611940298507,
        "ruby-23": 0.10447761194029848,
        "ruby-186": 0.4328358208955224,
        "ruby-130": 0.4029850746268657,
        "ruby-8": 0.26865671641791045,
        "ruby-7": 0.49090909090909096,
        "ruby-24": 0.42391304347826086,
        "ruby-61": 0.10447761194029848,
        "ruby-67": 0.02985074626865669,
        "ruby-159": 0.6097560975609756,
        "ruby-190": 0.5696202531645569,
        "ruby-176": 0.4029850746268657,
        "ruby-55": 0.7972972972972973,
        "codebertscore_f1-30": 0.7954680323600769,
        "codebertscore_f3-30": 0.8055849075317383,
        "codebertscore_f1-6": 0.6697247624397278,
        "codebertscore_f3-6": 0.6924323439598083,
        "codebertscore_f1-80": 0.9792625904083252,
        "codebertscore_f3-80": 0.9792625904083252,
        "codebertscore_f1-70": 0.8741143941879272,
        "codebertscore_f3-70": 0.8842467069625854,
        "codebertscore_f1-64": 0.8963592648506165,
        "codebertscore_f3-64": 0.8984391689300537,
        "codebertscore_f1-38": 0.9049709439277649,
        "codebertscore_f3-38": 0.9149652123451233,
        "codebertscore_f1-28": 0.8747085928916931,
        "codebertscore_f3-28": 0.8650349974632263,
        "codebertscore_f1-172": 0.8523047566413879,
        "codebertscore_f3-172": 0.8625867962837219,
        "codebertscore_f1-23": 0.6763821244239807,
        "codebertscore_f3-23": 0.643246591091156,
        "codebertscore_f1-186": 0.8280956149101257,
        "codebertscore_f3-186": 0.8234553933143616,
        "codebertscore_f1-130": 0.7796350717544556,
        "codebertscore_f3-130": 0.7773424983024597,
        "codebertscore_f1-8": 0.6796209812164307,
        "codebertscore_f3-8": 0.6696353554725647,
        "codebertscore_f1-7": 0.8856959342956543,
        "codebertscore_f3-7": 0.9117594957351685,
        "codebertscore_f1-24": 0.8269459009170532,
        "codebertscore_f3-24": 0.8613607883453369,
        "codebertscore_f1-61": 0.6559735536575317,
        "codebertscore_f3-61": 0.6322507858276367,
        "codebertscore_f1-67": 0.585883378982544,
        "codebertscore_f3-67": 0.5749074816703796,
        "codebertscore_f1-159": 0.8843940496444702,
        "codebertscore_f3-159": 0.8872184157371521,
        "codebertscore_f1-190": 0.8939024806022644,
        "codebertscore_f3-190": 0.8991870880126953,
        "codebertscore_f1-176": 0.8393172025680542,
        "codebertscore_f3-176": 0.839713990688324,
        "codebertscore_f1-55": 0.9253470301628113,
        "codebertscore_f3-55": 0.9377246499061584,
        "codebertscore_s_f1-30": 0.8138948678970337,
        "codebertscore_s_f3-30": 0.8240315914154053,
        "codebertscore_s_f1-6": 0.6975873708724976,
        "codebertscore_s_f3-6": 0.7191153168678284,
        "codebertscore_s_f1-80": 0.983111560344696,
        "codebertscore_s_f3-80": 0.9831116199493408,
        "codebertscore_s_f1-70": 0.8856536746025085,
        "codebertscore_s_f3-70": 0.8971237540245056,
        "codebertscore_s_f1-64": 0.9159396886825562,
        "codebertscore_s_f3-64": 0.9162355661392212,
        "codebertscore_s_f1-38": 0.9130488634109497,
        "codebertscore_s_f3-38": 0.9222521781921387,
        "codebertscore_s_f1-28": 0.8930215835571289,
        "codebertscore_s_f3-28": 0.8837632536888123,
        "codebertscore_s_f1-172": 0.8664047718048096,
        "codebertscore_s_f3-172": 0.8772668242454529,
        "codebertscore_s_f1-23": 0.6985510587692261,
        "codebertscore_s_f3-23": 0.669643223285675,
        "codebertscore_s_f1-186": 0.8573260307312012,
        "codebertscore_s_f3-186": 0.853584885597229,
        "codebertscore_s_f1-130": 0.8027039766311646,
        "codebertscore_s_f3-130": 0.7996373772621155,
        "codebertscore_s_f1-8": 0.7098785042762756,
        "codebertscore_s_f3-8": 0.701167106628418,
        "codebertscore_s_f1-7": 0.8916329145431519,
        "codebertscore_s_f3-7": 0.9176533818244934,
        "codebertscore_s_f1-24": 0.8373626470565796,
        "codebertscore_s_f3-24": 0.8750661015510559,
        "codebertscore_s_f1-61": 0.6836459040641785,
        "codebertscore_s_f3-61": 0.6654404997825623,
        "codebertscore_s_f1-67": 0.623371422290802,
        "codebertscore_s_f3-67": 0.6148320436477661,
        "codebertscore_s_f1-159": 0.8982201814651489,
        "codebertscore_s_f3-159": 0.9012006521224976,
        "codebertscore_s_f1-190": 0.898551881313324,
        "codebertscore_s_f3-190": 0.9043453335762024,
        "codebertscore_s_f1-176": 0.8599674701690674,
        "codebertscore_s_f3-176": 0.862809956073761,
        "codebertscore_s_f1-55": 0.933849036693573,
        "codebertscore_s_f3-55": 0.9449874758720398,
        "gpt35_nsnr-30": 4,
        "raw_gpt35_nsnr-30": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-80": 4,
        "raw_gpt35_nsnr-80": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-64": 4,
        "raw_gpt35_nsnr-64": "4",
        "gpt35_nsnr-38": 4,
        "raw_gpt35_nsnr-38": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-172": 4,
        "raw_gpt35_nsnr-172": "4",
        "gpt35_nsnr-23": 2,
        "raw_gpt35_nsnr-23": "2",
        "gpt35_nsnr-186": 4,
        "raw_gpt35_nsnr-186": "4",
        "gpt35_nsnr-130": 4,
        "raw_gpt35_nsnr-130": "4",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-24": 3,
        "raw_gpt35_nsnr-24": "3",
        "gpt35_nsnr-61": 0,
        "raw_gpt35_nsnr-61": "2 - The code snippet only returns an empty Optional, which does not cover any of the required functionalities of the problem. It does not handle any cases and fails all possible tests.",
        "gpt35_nsnr-67": 0,
        "raw_gpt35_nsnr-67": "0",
        "gpt35_nsnr-159": 4,
        "raw_gpt35_nsnr-159": "4",
        "gpt35_nsnr-190": 4,
        "raw_gpt35_nsnr-190": "4",
        "gpt35_nsnr-176": 4,
        "raw_gpt35_nsnr-176": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nswr-30": 4,
        "raw_gpt35_nswr-30": "4",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-80": 4,
        "raw_gpt35_nswr-80": "4",
        "gpt35_nswr-70": 4,
        "raw_gpt35_nswr-70": "4",
        "gpt35_nswr-64": 4,
        "raw_gpt35_nswr-64": "4",
        "gpt35_nswr-38": 4,
        "raw_gpt35_nswr-38": "4",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-172": 4,
        "raw_gpt35_nswr-172": "4",
        "gpt35_nswr-23": 2,
        "raw_gpt35_nswr-23": "2",
        "gpt35_nswr-186": 4,
        "raw_gpt35_nswr-186": "4",
        "gpt35_nswr-130": 4,
        "raw_gpt35_nswr-130": "4",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-24": 3,
        "raw_gpt35_nswr-24": "3",
        "gpt35_nswr-61": 2,
        "raw_gpt35_nswr-61": "2",
        "gpt35_nswr-67": 0,
        "raw_gpt35_nswr-67": "0",
        "gpt35_nswr-159": 4,
        "raw_gpt35_nswr-159": "4",
        "gpt35_nswr-190": 4,
        "raw_gpt35_nswr-190": "4",
        "gpt35_nswr-176": 4,
        "raw_gpt35_nswr-176": "4",
        "gpt35_nswr-55": 4,
        "raw_gpt35_nswr-55": "4"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    // should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    // split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    // split_words(\"abcdef\") == 3\n    public static Union_ArrayList_String__int splitWords(String txt) {\n",
        "snippet": [
            "        if (txt.contains(\" \" )) {\n            return Arrays.asList(txt.split(\" \" ));\n        } else if (txt.contains(\",\" )) {\n            return Arrays.asList(txt.split(\"[,\\s]\" ));\n        } else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c) && (c - 'a') % 2 == 1) {\n                    count += 1;\n                }\n            }\n            return count;\n        }\n    }\n}"
        ],
        "simplified": "Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25",
        "task_id": "125",
        "173": "int x = 0;\n        ArrayList<String> list = new ArrayList<String>();\n        if(txt.indexOf(\" \") == -1) {\n            if(txt.indexOf(\",\") == -1) {\n                for(int i = 0; i < txt.length(); i++) {\n                    int c = txt.charAt(i);\n                    if(Character.isLowerCase(c)) {\n                        if(i % 2 == 0) {\n                            x++;\n                        }\n                    }\n                }\n                return Union_ArrayList_String__int.int_(x);\n            }\n            String[] arr = txt.split(\",\");\n            for(int i = 0; i < arr.length; i++) {\n                list.add(arr[i]);\n            }\n            return Union_ArrayList_String__int.ArrayList_String_(list);\n        }\n        String[] arr = txt.split(\" \");\n        for(int i = 0; i < arr.length; i++) {\n            list.add(arr[i]);\n        }\n        return Union_ArrayList_String__int.ArrayList_String_(list);",
        "grade-173": {
            "execution": 0
        },
        "31": "ArrayList<String> list = new ArrayList<String>();\n        String[] ans = txt.split(\" |,\");\n        int count = 0;\n        for (int i = 0; i < ans.length; i++) {\n            list.add(ans[i]);\n        }\n        if (ans.length == 1) {\n            for (int i = 0; i < ans[0].length(); i++) {\n                if (i % 2 == 0) {\n                    count++;\n                }\n            }\n            return Union_ArrayList_String__int.createObj(count);\n        }\n        return Union_ArrayList_String__int.createObj(list);",
        "grade-31": {
            "execution": 0
        },
        "6": "if (txt.contains(\" \")) {\n            return new Union_ArrayList_String__int(new ArrayList<String>(Arrays.asList(txt.split(\" \"))));\n        } else if (txt.contains(\",\")) {\n            return new Union_ArrayList_String__int(new ArrayList<String>(Arrays.asList(txt.split(\",\"))));\n        } else {\n            int cnt = 0;\n            for (int i = 0; i < txt.length(); i++) {\n                int x = txt.charAt(i) - 'a';\n                if (x % 2 == 1) {\n                    cnt++;\n                }\n            }\n            return new Union_ArrayList_String__int(cnt);\n        }",
        "grade-6": {
            "execution": 0
        },
        "75": "if(txt.contains(\" \")) {\n            return new Union_ArrayList_String__int(Arrays.asList(txt.split(\" \")));\n        }\n        if(txt.contains(\",\")) {\n            return new Union_ArrayList_String__int(Arrays.asList(txt.split(\",\")));\n        }\n        int odd = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            if((int)txt.charAt(i) % 2 == 1) odd++;\n        }\n        return new Union_ArrayList_String__int(odd);",
        "grade-75": {
            "execution": 0
        },
        "65": "Union_ArrayList_String__int ret = new Union_ArrayList_String__int();\n        ArrayList<String> arr = new ArrayList<String>();\n        String [] tmp = txt.split(\"\\\\s+\");\n        if (tmp.length > 1) {\n            arr.addAll(Arrays.asList(tmp));\n            ret.set_ArrayList_String(arr);\n            return ret;\n        }\n        else {\n            tmp = txt.split(\",\");\n            if (tmp.length > 1) {\n                arr.addAll(Arrays.asList(tmp));\n                ret.set_ArrayList_String(arr);\n                return ret;\n            }\n            else {\n                int counter = 0;\n                for (int i = 0; i < txt.length(); i++) {\n                    int val = (int)txt.charAt(i) - (int)'a';\n                    if (val >= 0 && val <= 25) {\n                        if (i % 2 == 0) {\n                            counter++;\n                        }\n                    }\n                }\n                ret.set_int(counter);\n                return ret;\n            }\n        }",
        "grade-65": {
            "execution": 0
        },
        "60": "// TODO: implement method\n        Union_ArrayList_String__int union_ArrayList_String__int = new Union_ArrayList_String__int();\n        return union_ArrayList_String__int;",
        "grade-60": {
            "execution": 0
        },
        "38": "if (txt.indexOf(\" \") != -1) {\n            return new Union_ArrayList_String__int(Arrays.asList(txt.split(\" \")));\n        } else if (txt.indexOf(\",\") != -1) {\n            return new Union_ArrayList_String__int(Arrays.asList(txt.split(\",\")));\n        } else {\n            int[] a = new int[26];\n            int sum = 0;\n            for (int i = 0; i < txt.length(); i++) {\n                a[txt.charAt(i) - 'a']++;\n            }\n            for (int i = 0; i < 26; i++) {\n                if (a[i] % 2 == 1) {\n                    sum++;\n                }\n            }\n            return new Union_ArrayList_String__int(sum);\n        }",
        "grade-38": {
            "execution": 0
        },
        "29": "if(txt.contains(\" \")) return Union_ArrayList_String__int.value(Arrays.asList(txt.split(\" \")));\n        if(txt.contains(\",\")) return Union_ArrayList_String__int.value(Arrays.asList(txt.split(\",\")));\n        var res = 0;\n        for(var ch : txt.toCharArray()) {\n            var p = (int) ch - 'a';\n            if(p % 2 == 1) res++;\n        }\n        return Union_ArrayList_String__int.value(res);",
        "grade-29": {
            "execution": 0
        },
        "183": "// Implement me\n        return new Union_ArrayList_String__int(new Pair<>(\"ArrayList<String>\", null), new Pair<>(\"int\", null));",
        "grade-183": {
            "execution": 0
        },
        "148": "return\n        txt.contains(\" \") ?\n        txt.contains(\",\") ? new Union_ArrayList_String__int(txt.split(\",\")) : new Union_ArrayList_String__int(txt.split(\" \")) :\n        Arrays.stream(txt.split(\"\")).map(x -> x.toLowerCase()).collect(Collectors.toList()).indexOf(\"a\") % 2 == 0 ?\n        Arrays.stream(txt.split(\"\")).map(x -> x.toLowerCase()).collect(Collectors.toList()).indexOf(\"b\") % 2 == 0 ?\n        Arrays.stream(txt.split(\"\")).map(x -> x.toLowerCase()).collect(Collectors.toList()).indexOf(\"c\") % 2 == 0 ?\n        Arrays.stream(txt.split(\"\")).map(x -> x.toLowerCase()).collect(Collectors.toList()).indexOf(\"d\") % 2 == 0 ?\n        Arrays.stream(txt.split(\"\")).map(x -> x.toLowerCase()).collect(Collectors.toList()).indexOf(\"e\") % 2 == 0 ?\n        Arrays.stream(txt.split(\"\")).map(x -> x.toLowerCase()).collect(Collectors.toList()).indexOf(\"f\") % 2 == 0 ?\n        Arrays.stream(txt.split(\"\")).map(x -> x.toLowerCase()).collect(Collectors.toList()).indexOf(\"g\") % 2 == 0 ?\n        Arrays.stream(txt.split(\"\")).map(x -> x.toLowerCase()).collect(Collectors.toList()).indexOf(\"h\") % 2 == 0 ?\n        Arrays.stream(txt.split(\"\")).map(x -> x.toLowerCase()).collect(Collectors.toList()).indexOf(\"i\") % 2 == 0 ?\n        Arrays.stream(txt.split(\"\")).map(x -> x.toLowerCase()).collect(Collectors.toList()).indexOf(\"j\") % 2 == 0 ?\n        Arrays.stream(txt.split(\"\")).map(x -> x.toLowerCase()",
        "grade-148": {
            "execution": 0
        },
        "25": "int count = 0;\n      String[] split = txt.split(\" \");\n      if (split.length > 1) {\n        return new Union_ArrayList_String__int(new ArrayList<String>(Arrays.asList(split)));\n      }\n      split = txt.split(\",\");\n      if (split.length > 1) {\n        return new Union_ArrayList_String__int(new ArrayList<String>(Arrays.asList(split)));\n      }\n      char[] characters = txt.toCharArray();\n      for (char c : characters) {\n        if (c - 'a' < 26 && c - 'a' >= 0 && ((c - 'a') % 2) == 1) {\n          count++;\n        }\n      }\n      return new Union_ArrayList_String__int(count);",
        "grade-25": {
            "execution": 0
        },
        "160": "if (txt.chars().allMatch(x -> x == ' ')) {\n            return new Union_ArrayList_String__int(new ArrayList<String>());\n        }\n        else if (txt.chars().allMatch(x -> x == ',')) {\n            return new Union_ArrayList_String__int(new ArrayList<String>());\n        }\n        else if (txt.chars().allMatch(x -> x >= 'a' && x <= 'z')) {\n            return new Union_ArrayList_String__int(txt.chars().filter(x -> x - 'a' % 2 == 1).count());\n        }\n        else {\n            return new Union_ArrayList_String__int(new ArrayList<String>(Arrays.asList(txt.split(\" \"))));\n        }",
        "grade-160": {
            "execution": 0
        },
        "116": "int numOddLetters = 0;\n        for (int i = 0; i < txt.length(); i++) {\n            if (i % 2 == 0 && txt.charAt(i) >= 'a' && txt.charAt(i) <= 'z')\n                numOddLetters++;\n        }\n        if (txt.indexOf(',') != -1) {\n            return new Union_ArrayList_String__int(Arrays.asList(txt.split(\",\")));\n        } else if (txt.indexOf(' ') != -1) {\n            return new Union_ArrayList_String__int(Arrays.asList(txt.split(\" \")));\n        } else {\n            return new Union_ArrayList_String__int(numOddLetters);\n        }",
        "grade-116": {
            "execution": 0
        },
        "8": "// txt = txt.toLowerCase();\n        // int oddCount = 0;\n        // for (int i = 0; i < txt.length(); i += 2) {\n        //     char c = txt.charAt(i);\n        //     if (c >= 'a' && c <= 'z') {\n        //         oddCount++;\n        //     }\n        // }\n        // return oddCount;\n        String[] tokens = txt.split(\" \");\n        if (tokens.length > 1) {\n            ArrayList<String> list = new ArrayList<>();\n            for (String token : tokens) {\n                list.add(token);\n            }\n            return new Union_ArrayList_String__int(list);\n        }\n        tokens = txt.split(\",\");\n        if (tokens.length > 1) {\n            ArrayList<String> list = new ArrayList<>();\n            for (String token : tokens) {\n                list.add(token);\n            }\n            return new Union_ArrayList_String__int(list);\n        }\n        int oddCount = 0;\n        for (int i = 0; i < txt.length(); i += 2) {\n            char c = txt.charAt(i);\n            if (c >= 'a' && c <= 'z') {\n                oddCount++;\n            }\n        }\n        return new Union_ArrayList_String__int(oddCount);",
        "grade-8": {
            "execution": 0
        },
        "7": "return null;",
        "grade-7": {
            "execution": 0
        },
        "26": "ArrayList<String> res = new ArrayList<String>();\n      String[] words = txt.split(\"\\\\s+\");\n      if (words.length == 1) {\n        String[] commaSplit = txt.split(\",\");\n        if (commaSplit.length == 1) {\n          res.add(txt);\n          int counter = 0;\n          for (int i = 0; i < txt.length(); i++) {\n            if (txt.charAt(i) - 'a' % 2 == 1) {\n              counter++;\n            }\n          }\n          return new Union_ArrayList_String__int(res, counter);\n        } else {\n          return new Union_ArrayList_String__int(res, -1);\n        }\n      } else {\n        return new Union_ArrayList_String__int(res, -1);\n      }",
        "grade-26": {
            "execution": 0
        },
        "58": "// TODO implement this function\n        return null;",
        "grade-58": {
            "execution": 0
        },
        "62": "if (txt.matches(\".*[,.!?\\\\s].*\")) {\n            return Union_ArrayList_String__int.withArrayList_String(Arrays.asList(txt.split(\"[,.!?\\\\s]+\")));\n        } else {\n            int count = 0;\n            for (int i = 0; i < txt.length(); i++) {\n                if (txt.charAt(i) - 'a' % 2 == 1) {\n                    count++;\n                }\n            }\n            return Union_ArrayList_String__int.withInt(count);\n        }",
        "grade-62": {
            "execution": 0
        },
        "138": "if(txt.contains(\" \")){\n            ArrayList<String> x = new ArrayList<String>(Arrays.asList(txt.split(\" \")));\n            return new Union_ArrayList_String__int(x);\n        }\n        else if(txt.contains(\",\")){\n            ArrayList<String> x = new ArrayList<String>(Arrays.asList(txt.split(\",\")));\n            return new Union_ArrayList_String__int(x);\n        }\n        else{\n            int sum = 0;\n            for(int i = 0; i < txt.length(); i++){\n                int index = txt.charAt(i) - 'a';\n                if(index % 2 == 1){\n                    sum++;\n                }\n            }\n            return new Union_ArrayList_String__int(sum);\n        }",
        "grade-138": {
            "execution": 0
        },
        "163": "if (txt.contains(\" \")) {\n            String[] words = txt.split(\" \");\n            return new Union_ArrayList_String__int(Arrays.asList(words));\n        } else if (txt.contains(\",\")) {\n            String[] words = txt.split(\",\");\n            return new Union_ArrayList_String__int(Arrays.asList(words));\n        } else {\n            int count = 0;\n            for (int i = 0; i < txt.length(); i++) {\n                if (txt.charAt(i) == 'a' || txt.charAt(i) == 'c' || txt.charAt(i) == 'e' || txt.charAt(i) == 'g' || txt.charAt(i) == 'i' || txt.charAt(i) == 'k' || txt.charAt(i) == 'm' || txt.charAt(i) == 'o' || txt.charAt(i) == 'q' || txt.charAt(i) == 's' || txt.charAt(i) == 'u' || txt.charAt(i) == 'w' || txt.charAt(i) == 'y') {\n                    count++;\n                }\n            }\n            return new Union_ArrayList_String__int(count);\n        }",
        "grade-163": {
            "execution": 0
        },
        "bleu-173": 0.2057275079148055,
        "bleu-31": 0.20937841332985932,
        "bleu-6": 0.4783231938711268,
        "bleu-75": 0.514841260489125,
        "bleu-65": 0.19708623092600225,
        "bleu-60": 0.0005050934092377484,
        "bleu-38": 0.36295187458065037,
        "bleu-29": 0.5258845376837626,
        "bleu-183": 0.007878031031670073,
        "bleu-148": 0.0746144281897827,
        "bleu-25": 0.37200627481136456,
        "bleu-160": 0.29309368252498247,
        "bleu-116": 0.36493979172243207,
        "bleu-8": 0.11535019667691321,
        "bleu-7": 2.8686658577846518e-18,
        "bleu-26": 0.2447153900961791,
        "bleu-58": 2.2336416858495115e-07,
        "bleu-62": 0.42472627769585153,
        "bleu-138": 0.4122409658512515,
        "bleu-163": 0.21659668700693685,
        "codebleu-173": 0.6230787875811848,
        "codebleu-31": 0.4621381877009411,
        "codebleu-6": 0.694890653774767,
        "codebleu-75": 0.6270325681566995,
        "codebleu-65": 0.6163211368483104,
        "codebleu-60": 0.07092607732177174,
        "codebleu-38": 0.6794413353860105,
        "codebleu-29": 0.6180458243396623,
        "codebleu-183": 0.10085547742373513,
        "codebleu-148": 0.5226921482880407,
        "codebleu-25": 0.6350482202661628,
        "codebleu-160": 0.5947207697893477,
        "codebleu-116": 0.6572783163119066,
        "codebleu-8": 0.622279393470311,
        "codebleu-7": 0.01666666666666784,
        "codebleu-26": 0.5769648827068129,
        "codebleu-58": 0.03333400518245144,
        "codebleu-62": 0.48789549636824353,
        "codebleu-138": 0.6895889850044827,
        "codebleu-163": 0.6438661582086722,
        "chrf-173": 0.38940699362249664,
        "chrf-31": 0.3190430519015174,
        "chrf-6": 0.5894347360006301,
        "chrf-75": 0.5379997262188957,
        "chrf-65": 0.4130422174592063,
        "chrf-60": 0.13204037423532597,
        "chrf-38": 0.4960233649421791,
        "chrf-29": 0.552100856573268,
        "chrf-183": 0.11510615863988281,
        "chrf-148": 0.2502046028505554,
        "chrf-25": 0.4989924256761389,
        "chrf-160": 0.3982295204684253,
        "chrf-116": 0.4664982577538636,
        "chrf-8": 0.3377142796103175,
        "chrf-7": 0.022664881314574135,
        "chrf-26": 0.40580542408602005,
        "chrf-58": 0.04395337577105582,
        "chrf-62": 0.4603304893227932,
        "chrf-138": 0.5316019285192363,
        "chrf-163": 0.4926874759714693,
        "rougel-173": 0.3418803418803419,
        "rougel-31": 0.375,
        "rougel-6": 0.6789667896678966,
        "rougel-75": 0.6995884773662552,
        "rougel-65": 0.44970414201183434,
        "rougel-60": 0.08450704225352113,
        "rougel-38": 0.610738255033557,
        "rougel-29": 0.7029288702928871,
        "rougel-183": 0.17610062893081763,
        "rougel-148": 0.19392185238784374,
        "rougel-25": 0.5314685314685316,
        "rougel-160": 0.4391891891891892,
        "rougel-116": 0.4680851063829787,
        "rougel-8": 0.32195121951219513,
        "rougel-7": 0.03225806451612903,
        "rougel-26": 0.4444444444444445,
        "rougel-58": 0.03076923076923077,
        "rougel-62": 0.6090534979423868,
        "rougel-138": 0.6228373702422145,
        "rougel-163": 0.3878504672897196,
        "meteor-173": 0.44712610865797625,
        "meteor-31": 0.3826689008936907,
        "meteor-6": 0.701313962873285,
        "meteor-75": 0.5483687958641127,
        "meteor-65": 0.5387810107197549,
        "meteor-60": 0.031531531531531536,
        "meteor-38": 0.6024676145339654,
        "meteor-29": 0.6458831553289706,
        "meteor-183": 0.07542147293700088,
        "meteor-148": 0.29403956259736613,
        "meteor-25": 0.6029533156620707,
        "meteor-160": 0.4161033187149476,
        "meteor-116": 0.5097380258225739,
        "meteor-8": 0.49982946547848717,
        "meteor-7": 0.00915750915750916,
        "meteor-26": 0.46590636413359915,
        "meteor-58": 0.009107468123861567,
        "meteor-62": 0.5903999954282971,
        "meteor-138": 0.6470771678599841,
        "meteor-163": 0.45200996931215126,
        "ruby-173": 0.19999999999999996,
        "ruby-31": 0.1777777777777778,
        "ruby-6": 0.5333333333333333,
        "ruby-75": 0.5245901639344263,
        "ruby-65": 0.30414746543778803,
        "ruby-60": 0.04132231404958675,
        "ruby-38": 0.4463276836158192,
        "ruby-29": 0.5371900826446281,
        "ruby-183": 0.1074380165289256,
        "ruby-148": 0.11403508771929827,
        "ruby-25": 0.35757575757575755,
        "ruby-160": 0.2857142857142857,
        "ruby-116": 0.26086956521739135,
        "ruby-8": 0.20415224913494812,
        "ruby-7": 0.016528925619834656,
        "ruby-26": 0.25149700598802394,
        "ruby-58": 0.016528925619834656,
        "ruby-62": 0.4180327868852459,
        "ruby-138": 0.4642857142857143,
        "ruby-163": 0.24429967426710097,
        "codebertscore_f1-173": 0.7559841871261597,
        "codebertscore_f3-173": 0.7870335578918457,
        "codebertscore_f1-31": 0.7411749958992004,
        "codebertscore_f3-31": 0.7475465536117554,
        "codebertscore_f1-6": 0.8460131883621216,
        "codebertscore_f3-6": 0.8639761805534363,
        "codebertscore_f1-75": 0.8383884429931641,
        "codebertscore_f3-75": 0.8487878441810608,
        "codebertscore_f1-65": 0.7554767727851868,
        "codebertscore_f3-65": 0.7795827984809875,
        "codebertscore_f1-60": 0.6301689743995667,
        "codebertscore_f3-60": 0.6136747598648071,
        "codebertscore_f1-38": 0.8174543976783752,
        "codebertscore_f3-38": 0.8405486941337585,
        "codebertscore_f1-29": 0.8497427105903625,
        "codebertscore_f3-29": 0.86458820104599,
        "codebertscore_f1-183": 0.6382598280906677,
        "codebertscore_f3-183": 0.6232458353042603,
        "codebertscore_f1-148": 0.7101297974586487,
        "codebertscore_f3-148": 0.7381765246391296,
        "codebertscore_f1-25": 0.8211063742637634,
        "codebertscore_f3-25": 0.8374738693237305,
        "codebertscore_f1-160": 0.7636891007423401,
        "codebertscore_f3-160": 0.7821172475814819,
        "codebertscore_f1-116": 0.7625972628593445,
        "codebertscore_f3-116": 0.7819379568099976,
        "codebertscore_f1-8": 0.7359499335289001,
        "codebertscore_f3-8": 0.7574983835220337,
        "codebertscore_f1-7": 0.5070493817329407,
        "codebertscore_f3-7": 0.4584101736545563,
        "codebertscore_f1-26": 0.7686958312988281,
        "codebertscore_f3-26": 0.7871111631393433,
        "codebertscore_f1-58": 0.5665526390075684,
        "codebertscore_f3-58": 0.5390594005584717,
        "codebertscore_f1-62": 0.8272215127944946,
        "codebertscore_f3-62": 0.8489417433738708,
        "codebertscore_f1-138": 0.8139459490776062,
        "codebertscore_f3-138": 0.8367698788642883,
        "codebertscore_f1-163": 0.7784169316291809,
        "codebertscore_f3-163": 0.8207431435585022,
        "codebertscore_s_f1-173": 0.8705233931541443,
        "codebertscore_s_f3-173": 0.8925091028213501,
        "codebertscore_s_f1-31": 0.8643988966941833,
        "codebertscore_s_f3-31": 0.8682920336723328,
        "codebertscore_s_f1-6": 0.9035653471946716,
        "codebertscore_s_f3-6": 0.9149106740951538,
        "codebertscore_s_f1-75": 0.9058292508125305,
        "codebertscore_s_f3-75": 0.9084811806678772,
        "codebertscore_s_f1-65": 0.8601678609848022,
        "codebertscore_s_f3-65": 0.880743145942688,
        "codebertscore_s_f1-60": 0.8484123945236206,
        "codebertscore_s_f3-60": 0.819538950920105,
        "codebertscore_s_f1-38": 0.8878929018974304,
        "codebertscore_s_f3-38": 0.9033690690994263,
        "codebertscore_s_f1-29": 0.9139226078987122,
        "codebertscore_s_f3-29": 0.9210199117660522,
        "codebertscore_s_f1-183": 0.857362687587738,
        "codebertscore_s_f3-183": 0.8239783644676208,
        "codebertscore_s_f1-148": 0.809908390045166,
        "codebertscore_s_f3-148": 0.8540355563163757,
        "codebertscore_s_f1-25": 0.8905133008956909,
        "codebertscore_s_f3-25": 0.9028626680374146,
        "codebertscore_s_f1-160": 0.8666052222251892,
        "codebertscore_s_f3-160": 0.881845235824585,
        "codebertscore_s_f1-116": 0.863330602645874,
        "codebertscore_s_f3-116": 0.8799616694450378,
        "codebertscore_s_f1-8": 0.8509287238121033,
        "codebertscore_s_f3-8": 0.8764311075210571,
        "codebertscore_s_f1-7": 0.8797609806060791,
        "codebertscore_s_f3-7": 0.818674623966217,
        "codebertscore_s_f1-26": 0.8744996190071106,
        "codebertscore_s_f3-26": 0.8878505229949951,
        "codebertscore_s_f1-58": 0.8655272722244263,
        "codebertscore_s_f3-58": 0.8197841644287109,
        "codebertscore_s_f1-62": 0.9081564545631409,
        "codebertscore_s_f3-62": 0.9137094616889954,
        "codebertscore_s_f1-138": 0.8887909650802612,
        "codebertscore_s_f3-138": 0.9048688411712646,
        "codebertscore_s_f1-163": 0.8619405627250671,
        "codebertscore_s_f3-163": 0.8970288038253784,
        "gpt35_nsnr-173": 3,
        "raw_gpt35_nsnr-173": "3",
        "gpt35_nsnr-31": 3,
        "raw_gpt35_nsnr-31": "3",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-75": 4,
        "raw_gpt35_nsnr-75": "4",
        "gpt35_nsnr-65": 4,
        "raw_gpt35_nsnr-65": "4",
        "gpt35_nsnr-60": 2,
        "raw_gpt35_nsnr-60": "2",
        "gpt35_nsnr-38": 4,
        "raw_gpt35_nsnr-38": "4",
        "gpt35_nsnr-29": 4,
        "raw_gpt35_nsnr-29": "4",
        "gpt35_nsnr-183": 3,
        "raw_gpt35_nsnr-183": "3",
        "gpt35_nsnr-148": 2,
        "raw_gpt35_nsnr-148": "2",
        "gpt35_nsnr-25": 4,
        "raw_gpt35_nsnr-25": "4",
        "gpt35_nsnr-160": 3,
        "raw_gpt35_nsnr-160": "3",
        "gpt35_nsnr-116": 3,
        "raw_gpt35_nsnr-116": "3",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 0,
        "raw_gpt35_nsnr-7": "0",
        "gpt35_nsnr-26": 3,
        "raw_gpt35_nsnr-26": "3",
        "gpt35_nsnr-58": 0,
        "raw_gpt35_nsnr-58": "0",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-138": 4,
        "raw_gpt35_nsnr-138": "4",
        "gpt35_nsnr-163": 4,
        "raw_gpt35_nsnr-163": "4",
        "gpt35_nswr-173": 3,
        "raw_gpt35_nswr-173": "3",
        "gpt35_nswr-31": 2,
        "raw_gpt35_nswr-31": "2",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-75": 3,
        "raw_gpt35_nswr-75": "3",
        "gpt35_nswr-65": 3,
        "raw_gpt35_nswr-65": "3",
        "gpt35_nswr-60": 2,
        "raw_gpt35_nswr-60": "2",
        "gpt35_nswr-38": 3,
        "raw_gpt35_nswr-38": "3",
        "gpt35_nswr-29": 3,
        "raw_gpt35_nswr-29": "3",
        "gpt35_nswr-183": 2,
        "raw_gpt35_nswr-183": "2",
        "gpt35_nswr-148": 0,
        "raw_gpt35_nswr-148": "0",
        "gpt35_nswr-25": 3,
        "raw_gpt35_nswr-25": "3",
        "gpt35_nswr-160": 2,
        "raw_gpt35_nswr-160": "2",
        "gpt35_nswr-116": 2,
        "raw_gpt35_nswr-116": "2",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 0,
        "raw_gpt35_nswr-7": "0",
        "gpt35_nswr-26": 2,
        "raw_gpt35_nswr-26": "2",
        "gpt35_nswr-58": 0,
        "raw_gpt35_nswr-58": "0",
        "gpt35_nswr-62": 3,
        "raw_gpt35_nswr-62": "3",
        "gpt35_nswr-138": 3,
        "raw_gpt35_nswr-138": "3",
        "gpt35_nswr-163": 3,
        "raw_gpt35_nswr-163": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given an array of non-negative integers, return a copy of the given array after sorting,\n    // you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    // or sort it in descending order if the sum( first index value, last index value) is even.\n    // Note:\n    // * don't change the given array.\n    // Examples:\n    // * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static ArrayList<Integer> sortArray(ArrayList<Integer> array) {\n",
        "snippet": [
            "        if (array.size() == 0) {\n            return array;\n        }\n        List<Integer> result = new ArrayList<>(array);\n        if ((result.get(0) + result.get(result.size() - 1)) % 2 == 1) {\n            Collections.sort(result);\n        } else {\n            result.sort(Collections.reverseOrder());\n        }\n        return result;\n    }\n}"
        ],
        "simplified": "Given an array of non-negative integers, return a copy of the given array after sorting, you will sort the given array in ascending order if the sum( first index value, last index value) is odd, or sort it in descending order if the sum( first index value, last index value) is even. Note: * don't change the given array.",
        "task_id": "88",
        "177": "int first = array.get(0);\n        int last = array.get(array.size() - 1);\n        int sum = first + last;\n        if (sum % 2 == 0) {\n            array.sort(Comparator.reverseOrder());\n        } else {\n            array.sort(Comparator.naturalOrder());\n        }\n        return array;",
        "grade-177": {
            "execution": 0
        },
        "30": "// Write your code here\n        if (array.size() == 0) {\n            return array;\n        }\n        if (array.size() == 1) {\n            return array;\n        }\n        int first = array.get(0);\n        int last = array.get(array.size() - 1);\n        int sum = first + last;\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        if (sum % 2 == 0) {\n            int i = array.size() - 1;\n            while (i >= 0) {\n                result.add(array.get(i));\n                i--;\n            }\n        } else {\n            for (int i = 0; i < array.size(); i++) {\n                result.add(array.get(i));\n            }\n        }\n        return result;",
        "grade-30": {
            "execution": 0
        },
        "6": "ArrayList<Integer> result = new ArrayList<>();\n        int first = array.get(0);\n        int last = array.get(array.size() - 1);\n        if ((first + last) % 2 == 0) {\n            result = array.stream().sorted(Comparator.reverseOrder()).collect(Collectors.toCollection(ArrayList::new));\n        } else {\n            result = array.stream().sorted().collect(Collectors.toCollection(ArrayList::new));\n        }\n        return result;",
        "grade-6": {
            "execution": 0
        },
        "78": "// Write code here.\n        int first = array.get(0);\n        int last = array.get(array.size() - 1);\n        boolean isEven = (first + last) % 2 == 0;\n        Comparator<Integer> comparator = isEven ? new EvenComparator() : new OddComparator();\n        array.sort(comparator);\n        return array;",
        "grade-78": {
            "execution": 0
        },
        "70": "// TODO: Write code here\n        return array;",
        "grade-70": {
            "execution": 0
        },
        "65": "ArrayList<Integer> aux = new ArrayList<Integer>();\n        ArrayList<Integer> res = new ArrayList<Integer>();\n        aux.addAll(array);\n        int sum = aux.get(0) + aux.get(aux.size() - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(aux, Collections.reverseOrder());\n        } else {\n            Collections.sort(aux);\n        }\n        for (int i = 0; i < aux.size(); i++) {\n            res.add(aux.get(i));\n        }\n        return res;",
        "grade-65": {
            "execution": 0
        },
        "38": "// type your solution here\n        return null;",
        "grade-38": {
            "execution": 0
        },
        "28": "if (array.size() < 2) {\n            return array;\n        }\n        int i, j, min;\n        for (i = 0; i < array.size() - 1; i++) {\n            min = i;\n            for (j = i + 1; j < array.size(); j++) {\n                if (array.get(j) < array.get(min)) {\n                    min = j;\n                }\n            }\n            Collections.swap(array, i, min);\n        }\n        if ((array.get(0) + array.get(array.size() - 1)) % 2 == 0) {\n            Collections.reverse(array);\n        }\n        return array;",
        "grade-28": {
            "execution": 1
        },
        "188": "// Write your code here\n        return null;",
        "grade-188": {
            "execution": 0
        },
        "150": "if (array.size() == 0) {\n            return array;\n        } else if (array.size() == 1) {\n            return array;\n        } else {\n            int first = array.get(0);\n            int last = array.get(array.size() - 1);\n            Integer[] array_ = array.toArray(new Integer[array.size()]);\n            if ((first + last) % 2 == 0) {\n                Arrays.sort(array_, Collections.reverseOrder());\n            } else {\n                Arrays.sort(array_);\n            }\n            ArrayList<Integer> ret = new ArrayList<>(Arrays.asList(array_));\n            return ret;\n        }",
        "grade-150": {
            "execution": 1
        },
        "23": "// We will have to write a separate Comparator to achieve the desired output.\n        Collections.sort(array, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer a, Integer b) {\n                return (array.indexOf(a) + array.indexOf(b)) % 2 == 0 ? b - a : a - b;\n            }\n        });\n        return array;",
        "grade-23": {
            "execution": 0
        },
        "164": "if (array.size() == 0) {\n            return array;\n        }\n        // return array;\n        ArrayList<Integer> newArray = new ArrayList<>();\n        for (int i = 0; i < array.size(); i++) {\n            newArray.add(array.get(i));\n        }\n        // System.out.println(newArray);\n        if ((array.get(0) + array.get(array.size() - 1)) % 2 == 0) {\n            // System.out.println(\"Even\");\n            Collections.sort(newArray, Collections.reverseOrder());\n        } else {\n            // System.out.println(\"Odd\");\n            Collections.sort(newArray);\n        }\n        return newArray;",
        "grade-164": {
            "execution": 1
        },
        "116": "int len = array.size();\n        int i = 0;\n        int j = len - 1;\n        int first = array.get(i);\n        int last = array.get(j);\n        boolean isOdd = (first + last) % 2 == 1;\n        // System.out.println(isOdd);\n        ArrayList<Integer> ans = new ArrayList<Integer>();\n        while (i < j) {\n            if (isOdd) {\n                if (array.get(i) > array.get(j)) {\n                    ans.add(array.get(i));\n                    i++;\n                } else {\n                    ans.add(array.get(j));\n                    j--;\n                }\n            } else {\n                if (array.get(i) < array.get(j)) {\n                    ans.add(array.get(i));\n                    i++;\n                } else {\n                    ans.add(array.get(j));\n                    j--;\n                }\n            }\n        }\n        if (i == j) {\n            ans.add(array.get(i));\n        }\n        Collections.reverse(ans);\n        return ans;",
        "grade-116": {
            "execution": 0
        },
        "8": "int n = array.size();\n        if (n == 0) {\n            return array;\n        }\n        int sum = array.get(0) + array.get(n - 1);\n        Collections.sort(array);\n        if (sum % 2 == 0) {\n            Collections.reverse(array);\n        }\n        return array;",
        "grade-8": {
            "execution": 1
        },
        "7": "ArrayList<Integer> result = new ArrayList<Integer>();\n        // find value of the sum( first index value, last index value)\n        int first = array.get(0);\n        int last = array.get(array.size() - 1);\n        int sum = first + last;\n        if (sum % 2 == 0) {\n            // sort in descending order if the sum( first index value, last index value) is even.\n            array.sort(Collections.reverseOrder());\n        } else {\n            // sort in ascending order if the sum( first index value, last index value) is odd.\n            array.sort(Collections.reverseOrder());\n        }\n        return array;",
        "grade-7": {
            "execution": 0
        },
        "24": "if (array.size() == 0) {\n            return array;\n        }\n        if (array.size() == 1) {\n            return array;\n        }\n        if (array.size() == 2) {\n            if (array.get(0) + array.get(1) % 2 == 0) {\n                return array;\n            } else {\n                Collections.reverse(array);\n                return array;\n            }\n        }\n        int sum = array.get(0) + array.get(array.size() - 1);\n        Collections.sort(array);\n        if (sum % 2 == 0) {\n            Collections.reverse(array);\n        }\n        return array;",
        "grade-24": {
            "execution": 1
        },
        "62": "if (array.size() == 0) return array;\n        int first_index = array.get(0);\n        int last_index = array.get(array.size() - 1);\n        if ((first_index + last_index) % 2 == 0) {\n            return new ArrayList<Integer>(array.stream().sorted(Collections.reverseOrder()).collect(Collectors.toList()));\n        } else {\n            return new ArrayList<Integer>(array.stream().sorted().collect(Collectors.toList()));\n        }",
        "grade-62": {
            "execution": 1
        },
        "67": "int first = array.get(0);\n      int last = array.get(array.size() - 1);\n      int sum = first + last;\n      if (sum % 2 == 0) {\n        Collections.sort(array, Collections.reverseOrder());\n      } else {\n        Collections.sort(array);\n      }\n      return array;",
        "grade-67": {
            "execution": 0
        },
        "139": "Pair<Integer, Integer> p = pair(array.get(0), array.get(array.size() - 1));\n        int[] range = range(array.size());\n        int[] order = {1, -1};\n        int ord = p.sum() % 2 == 0 ? 1 : 0;\n        IntStream.range(0, range.length)\n                .mapToObj(i -> new Pair<>(range[i], array.get(i)))\n                .sorted(Comparator.comparingInt(a -> a.value * order[ord]))\n                .mapToInt(a -> a.value)\n                .forEach(System.out::println);\n        return array;",
        "grade-139": {
            "execution": 0
        },
        "167": "if (array.size() <= 1) {\n            return array;\n        }\n        int firstIndex = array.get(0);\n        int lastIndex = array.get(array.size() - 1);\n        int sum = firstIndex + lastIndex;\n        if (sum % 2 == 0) {\n            Collections.sort(array, Collections.reverseOrder());\n        } else {\n            Collections.sort(array);\n        }\n        return array;",
        "grade-167": {
            "execution": 1
        },
        "bleu-177": 0.3872447336174888,
        "bleu-30": 0.30384578618747654,
        "bleu-6": 0.4030919676200876,
        "bleu-78": 0.2561810761701445,
        "bleu-70": 5.7909027619767825e-05,
        "bleu-65": 0.35738427839989806,
        "bleu-38": 7.819368204661669e-06,
        "bleu-28": 0.2957051124119263,
        "bleu-188": 7.819368204661669e-06,
        "bleu-150": 0.38993795575048723,
        "bleu-23": 0.16988826031500173,
        "bleu-164": 0.34880455098864127,
        "bleu-116": 0.12657953153586585,
        "bleu-8": 0.3642904462179364,
        "bleu-7": 0.32651392354481873,
        "bleu-24": 0.3614923838640845,
        "bleu-62": 0.3990561535692325,
        "bleu-67": 0.431353648585114,
        "bleu-139": 0.17708752986721263,
        "bleu-167": 0.5267108178579059,
        "codebleu-177": 0.6117836874733323,
        "codebleu-30": 0.7502677363287875,
        "codebleu-6": 0.6692333432007662,
        "codebleu-78": 0.524173675505154,
        "codebleu-70": 0.04202357826179722,
        "codebleu-65": 0.701792315016093,
        "codebleu-38": 0.04200871727280948,
        "codebleu-28": 0.7337363197929194,
        "codebleu-188": 0.04200871727280948,
        "codebleu-150": 0.7638067323629079,
        "codebleu-23": 0.416885067519959,
        "codebleu-164": 0.7815056782944012,
        "codebleu-116": 0.6461739662041945,
        "codebleu-8": 0.5413603125280171,
        "codebleu-7": 0.6720714535606843,
        "codebleu-24": 0.7362983515288293,
        "codebleu-62": 0.7021630418551267,
        "codebleu-67": 0.5809113231609875,
        "codebleu-139": 0.6285978909531464,
        "codebleu-167": 0.6963473656851312,
        "chrf-177": 0.4049895138367354,
        "chrf-30": 0.5192020446305475,
        "chrf-6": 0.5930567746064936,
        "chrf-78": 0.30987453032240203,
        "chrf-70": 0.0707721011116265,
        "chrf-65": 0.573423847422097,
        "chrf-38": 0.05534609430741612,
        "chrf-28": 0.455293562454044,
        "chrf-188": 0.046111923384763276,
        "chrf-150": 0.5663498318530624,
        "chrf-23": 0.326297084986902,
        "chrf-164": 0.5933339355213223,
        "chrf-116": 0.37293606165302357,
        "chrf-8": 0.45507697715049994,
        "chrf-7": 0.5307712588344043,
        "chrf-24": 0.5066335600924107,
        "chrf-62": 0.5565504621694893,
        "chrf-67": 0.5020170012658376,
        "chrf-139": 0.31898660029833864,
        "chrf-167": 0.5450928994078833,
        "rougel-177": 0.5398773006134969,
        "rougel-30": 0.47328244274809156,
        "rougel-6": 0.5213270142180094,
        "rougel-78": 0.40718562874251496,
        "rougel-70": 0.0606060606060606,
        "rougel-65": 0.5291479820627802,
        "rougel-38": 0.04081632653061224,
        "rougel-28": 0.4721030042918455,
        "rougel-188": 0.04081632653061224,
        "rougel-150": 0.516949152542373,
        "rougel-23": 0.3274853801169591,
        "rougel-164": 0.5791505791505792,
        "rougel-116": 0.3536585365853659,
        "rougel-8": 0.5605095541401274,
        "rougel-7": 0.48945147679324896,
        "rougel-24": 0.5178571428571429,
        "rougel-62": 0.5213270142180094,
        "rougel-67": 0.5125,
        "rougel-139": 0.321285140562249,
        "rougel-167": 0.6,
        "meteor-177": 0.5080669271275693,
        "meteor-30": 0.5691478439425051,
        "meteor-6": 0.6005477308294209,
        "meteor-78": 0.31148142198998435,
        "meteor-70": 0.01849568434032059,
        "meteor-65": 0.5454782773787299,
        "meteor-38": 0.012345679012345677,
        "meteor-28": 0.4816111029459795,
        "meteor-188": 0.012345679012345677,
        "meteor-150": 0.6016645476370087,
        "meteor-23": 0.31893215211675124,
        "meteor-164": 0.5412518594804899,
        "meteor-116": 0.4864316239316239,
        "meteor-8": 0.45958592093124984,
        "meteor-7": 0.6228673425007808,
        "meteor-24": 0.5681765722274982,
        "meteor-62": 0.5340891046030978,
        "meteor-67": 0.513353085353009,
        "meteor-139": 0.43610637341526626,
        "meteor-167": 0.5982617078410817,
        "ruby-177": 0.3595505617977528,
        "ruby-30": 0.32947976878612717,
        "ruby-6": 0.30327868852459017,
        "ruby-78": 0.1685393258426966,
        "ruby-70": 0.0337078651685393,
        "ruby-65": 0.4104477611940298,
        "ruby-38": 0.022471910112359605,
        "ruby-28": 0.29166666666666663,
        "ruby-188": 0.022471910112359605,
        "ruby-150": 0.38095238095238093,
        "ruby-23": 0.1348314606741573,
        "ruby-164": 0.42352941176470593,
        "ruby-116": 0.2301255230125523,
        "ruby-8": 0.3932584269662921,
        "ruby-7": 0.28378378378378377,
        "ruby-24": 0.3555555555555555,
        "ruby-62": 0.319672131147541,
        "ruby-67": 0.3033707865168539,
        "ruby-139": 0.1875,
        "ruby-167": 0.3846153846153846,
        "codebertscore_f1-177": 0.8105799555778503,
        "codebertscore_f3-177": 0.809799313545227,
        "codebertscore_f1-30": 0.7802451252937317,
        "codebertscore_f3-30": 0.8058261275291443,
        "codebertscore_f1-6": 0.8271249532699585,
        "codebertscore_f3-6": 0.8553236722946167,
        "codebertscore_f1-78": 0.7734991312026978,
        "codebertscore_f3-78": 0.7858996391296387,
        "codebertscore_f1-70": 0.6114113926887512,
        "codebertscore_f3-70": 0.5957982540130615,
        "codebertscore_f1-65": 0.855869710445404,
        "codebertscore_f3-65": 0.8808977007865906,
        "codebertscore_f1-38": 0.602643609046936,
        "codebertscore_f3-38": 0.5846184492111206,
        "codebertscore_f1-28": 0.7855973839759827,
        "codebertscore_f3-28": 0.7950862646102905,
        "codebertscore_f1-188": 0.5759645700454712,
        "codebertscore_f3-188": 0.5578305721282959,
        "codebertscore_f1-150": 0.8371908664703369,
        "codebertscore_f3-150": 0.8564441204071045,
        "codebertscore_f1-23": 0.7430083155632019,
        "codebertscore_f3-23": 0.7640388607978821,
        "codebertscore_f1-164": 0.8286112546920776,
        "codebertscore_f3-164": 0.8715275526046753,
        "codebertscore_f1-116": 0.7486594915390015,
        "codebertscore_f3-116": 0.7838904857635498,
        "codebertscore_f1-8": 0.8585693836212158,
        "codebertscore_f3-8": 0.8492771983146667,
        "codebertscore_f1-7": 0.7995842695236206,
        "codebertscore_f3-7": 0.8435976505279541,
        "codebertscore_f1-24": 0.8281840085983276,
        "codebertscore_f3-24": 0.828473687171936,
        "codebertscore_f1-62": 0.8418847322463989,
        "codebertscore_f3-62": 0.8670756220817566,
        "codebertscore_f1-67": 0.8371366262435913,
        "codebertscore_f3-67": 0.8315492272377014,
        "codebertscore_f1-139": 0.7295629978179932,
        "codebertscore_f3-139": 0.7513364553451538,
        "codebertscore_f1-167": 0.8618446588516235,
        "codebertscore_f3-167": 0.869044840335846,
        "codebertscore_s_f1-177": 0.8145949244499207,
        "codebertscore_s_f3-177": 0.8183914422988892,
        "codebertscore_s_f1-30": 0.7998205423355103,
        "codebertscore_s_f3-30": 0.8155261278152466,
        "codebertscore_s_f1-6": 0.834510862827301,
        "codebertscore_s_f3-6": 0.8665198087692261,
        "codebertscore_s_f1-78": 0.7685388922691345,
        "codebertscore_s_f3-78": 0.7867465019226074,
        "codebertscore_s_f1-70": 0.640902578830719,
        "codebertscore_s_f3-70": 0.6193357706069946,
        "codebertscore_s_f1-65": 0.8632352352142334,
        "codebertscore_s_f3-65": 0.8876919150352478,
        "codebertscore_s_f1-38": 0.6020630598068237,
        "codebertscore_s_f3-38": 0.5738019943237305,
        "codebertscore_s_f1-28": 0.8113719820976257,
        "codebertscore_s_f3-28": 0.823599636554718,
        "codebertscore_s_f1-188": 0.5885359048843384,
        "codebertscore_s_f3-188": 0.5648422241210938,
        "codebertscore_s_f1-150": 0.8428253531455994,
        "codebertscore_s_f3-150": 0.8624817728996277,
        "codebertscore_s_f1-23": 0.7136250734329224,
        "codebertscore_s_f3-23": 0.7257275581359863,
        "codebertscore_s_f1-164": 0.8299008011817932,
        "codebertscore_s_f3-164": 0.8656652569770813,
        "codebertscore_s_f1-116": 0.7654781937599182,
        "codebertscore_s_f3-116": 0.7864322662353516,
        "codebertscore_s_f1-8": 0.8537967801094055,
        "codebertscore_s_f3-8": 0.847114086151123,
        "codebertscore_s_f1-7": 0.8041011691093445,
        "codebertscore_s_f3-7": 0.8492109179496765,
        "codebertscore_s_f1-24": 0.8440476655960083,
        "codebertscore_s_f3-24": 0.8396779894828796,
        "codebertscore_s_f1-62": 0.8354572653770447,
        "codebertscore_s_f3-62": 0.8615716695785522,
        "codebertscore_s_f1-67": 0.8323749899864197,
        "codebertscore_s_f3-67": 0.8303638100624084,
        "codebertscore_s_f1-139": 0.7361310124397278,
        "codebertscore_s_f3-139": 0.7598914504051208,
        "codebertscore_s_f1-167": 0.8597140312194824,
        "codebertscore_s_f3-167": 0.8689315319061279,
        "gpt35_nsnr-177": 4,
        "raw_gpt35_nsnr-177": "4",
        "gpt35_nsnr-30": 4,
        "raw_gpt35_nsnr-30": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-78": 4,
        "raw_gpt35_nsnr-78": "4",
        "gpt35_nsnr-70": 3,
        "raw_gpt35_nsnr-70": "3",
        "gpt35_nsnr-65": 4,
        "raw_gpt35_nsnr-65": "4",
        "gpt35_nsnr-38": 0,
        "raw_gpt35_nsnr-38": "0",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-188": 0,
        "raw_gpt35_nsnr-188": "0",
        "gpt35_nsnr-150": 4,
        "raw_gpt35_nsnr-150": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-164": 3,
        "raw_gpt35_nsnr-164": "3",
        "gpt35_nsnr-116": 3,
        "raw_gpt35_nsnr-116": "3",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-24": 4,
        "raw_gpt35_nsnr-24": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-67": 4,
        "raw_gpt35_nsnr-67": "4",
        "gpt35_nsnr-139": 3,
        "raw_gpt35_nsnr-139": "3",
        "gpt35_nsnr-167": 4,
        "raw_gpt35_nsnr-167": "4",
        "gpt35_nswr-177": 3,
        "raw_gpt35_nswr-177": "3",
        "gpt35_nswr-30": 3,
        "raw_gpt35_nswr-30": "3",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-78": 3,
        "raw_gpt35_nswr-78": "3",
        "gpt35_nswr-70": 2,
        "raw_gpt35_nswr-70": "2",
        "gpt35_nswr-65": 4,
        "raw_gpt35_nswr-65": "4",
        "gpt35_nswr-38": 0,
        "raw_gpt35_nswr-38": "0",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-188": 0,
        "raw_gpt35_nswr-188": "0",
        "gpt35_nswr-150": 3,
        "raw_gpt35_nswr-150": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-164": 3,
        "raw_gpt35_nswr-164": "3",
        "gpt35_nswr-116": 3,
        "raw_gpt35_nswr-116": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-24": 3,
        "raw_gpt35_nswr-24": "3",
        "gpt35_nswr-62": 4,
        "raw_gpt35_nswr-62": "4",
        "gpt35_nswr-67": 4,
        "raw_gpt35_nswr-67": "4",
        "gpt35_nswr-139": 2,
        "raw_gpt35_nswr-139": "2",
        "gpt35_nswr-167": 4,
        "raw_gpt35_nswr-167": "4"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // Input: sentence = \"This is a test\"\n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence = \"lets go for swimming\"\n    // Output: \"go for\"\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static String wordsInSentence(String sentence) {\n",
        "snippet": [
            "        List<String> new_lst = new ArrayList<>();\n        for (String word : sentence.split(\" \" )) {\n            boolean flg = true;\n            if (word.length() == 1) {\n                continue;\n            }\n            for (int i = 2; i < word.length(); i++) {\n                if (word.length() % i == 0) {\n                    flg = false;\n                    break;\n                }\n            }\n            if (flg) {\n                new_lst.add(word);\n            }\n        }\n        return String.join(\" \", new_lst);\n    }\n}"
        ],
        "simplified": "You are given a string representing a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words from the original sentence, whose lengths are prime numbers, the order of the words in the new string should be the same as the original one. Constraints: * 1 <= len(sentence) <= 100 * sentence contains only letters",
        "task_id": "143",
        "183": "StringBuilder sb = new StringBuilder();\n        for (String word : sentence.split(\" \")) {\n            if (isPrime(word.length())) {\n                sb.append(word).append(\" \");\n            }\n        }\n        sb.deleteCharAt(sb.length() - 1);\n        return sb.toString();",
        "grade-183": {
            "execution": 0
        },
        "28": "String[] words = sentence.split(\" \");\n        // build a list of words whose lengths are prime numbers\n        List<String> list = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                list.add(word);\n            }\n        }\n        // return a string contains the words from the original sentence,\n        // whose lengths are prime numbers,\n        // the order of the words in the new string should be the same as the original one.\n        String result = \"\";\n        for (String word : words) {\n            if (list.contains(word)) {\n                result += word + \" \";\n            }\n        }\n        return result.trim();",
        "grade-28": {
            "execution": 0
        },
        "6": "String[] words = sentence.split(\" \");\n        String result = \"\";\n        for (String word : words) {\n            int length = word.length();\n            boolean isPrime = true;\n            for (int i = 2; i < length; i++) {\n                if (length % i == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                result += word + \" \";\n            }\n        }\n        return result.trim();",
        "grade-6": {
            "execution": 0
        },
        "74": "// Note that there are only 26 letters in the English alphabet\n        boolean[] notPrime = new boolean[26];\n        notPrime[1] = true;\n        for (int i = 2; i < notPrime.length; i++) {\n            if (!notPrime[i]) {\n                int j = i + i;\n                while (j < notPrime.length) {\n                    notPrime[j] = true;\n                    j += i;\n                }\n            }\n        }\n        List<String> result = new ArrayList<>();\n        for (String word : sentence.split(\" \")) {\n            if (!notPrime[word.length()]) {\n                result.add(word);\n            }\n        }\n        return String.join(\" \", result);",
        "grade-74": {
            "execution": 1
        },
        "65": "StringBuilder sb = new StringBuilder();\n        String[] words = sentence.split(\" \");\n        for (String word : words) {\n            int length = word.length();\n            if (isPrime(length)) {\n                sb.append(word);\n                sb.append(\" \");\n            }\n        }\n        return sb.toString().trim();",
        "grade-65": {
            "execution": 0
        },
        "59": "if (sentence == null || sentence.isEmpty()) {\n            return \"\";\n        }\n        String[] words = sentence.split(\" \");\n        StringBuilder builder = new StringBuilder();\n        for (String word : words) {\n            if (word.length() == 1) {\n                builder.append(word).append(\" \");\n            } else if (word.length() == 2) {\n                builder.append(word).append(\" \");\n            } else if (word.length() == 3) {\n                builder.append(word).append(\" \");\n            } else if (word.length() == 5) {\n                builder.append(word).append(\" \");\n            } else if (word.length() == 7) {\n                builder.append(word).append(\" \");\n            } else if (word.length() == 11) {\n                builder.append(word).append(\" \");\n            } else if (word.length() == 13) {\n                builder.append(word).append(\" \");\n            } else if (word.length() == 17) {\n                builder.append(word).append(\" \");\n            } else if (word.length() == 19) {\n                builder.append(word).append(\" \");\n            } else if (word.length() == 23) {\n                builder.append(word).append(\" \");\n            } else if (word.length() == 29) {\n                builder.append(word).append(\" \");\n            } else if (word.length() == 31) {\n                builder.append(word).append(\" \");\n            } else if (word.length() == 37) {\n                builder.append(word).append(\" \");\n            } else if (word.length() == 41) {\n                builder.append(word).append(\" \");\n            } else if (word.length() == 43) {\n                builder.append(word).append(\" \");\n            } else if (word.length() == 47) {\n                builder.append(word).append(\" \");\n            } else if (word.length() == 53) {\n                builder.append(word).append(\" \");\n            } else if (word.length() == 59) {\n                builder",
        "grade-59": {
            "execution": 0
        },
        "36": "String result = \"\";\n        String[] words = sentence.split(\" \");\n        for (String word : words) {\n            int length = word.length();\n            if (length > 1 && length % 2 == 1) {\n                int limit = (int) Math.sqrt(length);\n                boolean isPrime = true;\n                for (int i = 3; i <= limit; i += 2) {\n                    if (length % i == 0) {\n                        isPrime = false;\n                        break;\n                    }\n                }\n                if (isPrime) {\n                    result += word + \" \";\n                }\n            }\n        }\n        if (result.length() > 0) {\n            result = result.substring(0, result.length() - 1);\n        }\n        return result;",
        "grade-36": {
            "execution": 0
        },
        "26": "return null;",
        "grade-26": {
            "execution": 0
        },
        "194": "List<String> result = new ArrayList<>();\n        for (String word : sentence.split(\" \")) {\n            int length = word.length();\n            if (isPrime(length)) {\n                result.add(word);\n            }\n        }\n        return String.join(\" \", result);",
        "grade-194": {
            "execution": 0
        },
        "158": "// \"Lazy evaluation\"\n        return Arrays.stream(sentence.split(\" \"))\n            .filter(w -> isPrimeNumber(w.length()))\n            .collect(Collectors.joining(\" \"));",
        "grade-158": {
            "execution": 0
        },
        "22": "// note that there's also a shortcut method to find prime numbers,\n        // which is called the Sieve of Eratosthenes, which calculates all the prime numbers\n        // between 1 and n in O(nloglogn) time, so it's faster than the prime number test\n        // in this example\n        StringBuilder result = new StringBuilder();\n        // another way to do it would be to just use the split function,\n        // but i wanna show you how a simple loop can also do the same thing\n        // note that sb's value starts with an empty string, and if we add\n        // a space at the end it'll look like this \" \", which we want to avoid\n        // (unless the result is an empty string)\n        // so we'll just add a space at the beginning\n        result.append(\" \");\n        // to avoid adding more than one space to the string, we can set the\n        // value of this boolean to true right before we append a space,\n        // and the next time we're going to append a space, we'll check this boolean\n        // and if it's true, we'll skip adding the space, since it's already there\n        boolean lastCharWasSpace = false;\n        for (int i = 0; i < sentence.length(); i++) {\n            char c = sentence.charAt(i);\n            if (c == ' ') {\n                // if the last character we added was a space\n                // we just skip this character\n                if (lastCharWasSpace) continue;\n                // if the last character we added wasn't a space\n                // we can just set lastCharWasSpace to true,\n                // and don't forget to add the space to the string\n                lastCharWasSpace = true;\n                result.append(\" \");\n            } else {\n                // if it's not a space, we can just set lastCharWasSpace to false\n                lastCharWasSpace = false;\n                // and append the character to the string\n                result.append(c);\n            }\n        }\n        // now we just have to check if the last character is a space,\n        // and if it is, we just remove it\n        int len = result.length();\n        if (result.charAt(len - 1) == '",
        "grade-22": {
            "execution": 0
        },
        "170": "// Given a string, the sentence.\n        // Split the string into words by whitespace.\n        String[] words = sentence.split(\"\\\\s+\");\n        // Assume a prime number.\n        int isPrime = 1;\n        // Assume the input string is empty.\n        String result = \"\";\n        // Iterate over all words in the string.\n        for (int i = 0; i < words.length; i++) {\n            // Calculate the length of the word.\n            int length = words[i].length();\n            // Iterate over all numbers from 2 to n - 1.\n            for (int j = 2; j < length; j++) {\n                // If n is divisible by j, assume n is not prime.\n                if (length % j == 0) {\n                    isPrime = 0;\n                    break;\n                }\n            }\n            // If the number is prime,\n            // add the current word to the result string.\n            if (isPrime == 1) {\n                result += words[i] + \" \";\n            }\n            // Assume a prime number for the next word.\n            isPrime = 1;\n        }\n        // Return the result string.\n        return result;",
        "grade-170": {
            "execution": 0
        },
        "118": "String[] words = sentence.split(\" \");\n        String result = \"\";\n        for (String w : words) {\n            if (isPrime(w.length())) {\n                result += w + \" \";\n            }\n        }\n        return result.trim();",
        "grade-118": {
            "execution": 0
        },
        "8": "return Stream.of(sentence.split(\" \"))\n        .filter(s -> new BigInteger(s.length() + \"\").isProbablePrime(Integer.MAX_VALUE))\n        .collect(Collectors.joining(\" \"));",
        "grade-8": {
            "execution": 1
        },
        "7": "boolean[] primes = sieve(sentence.length());\n        String[] words = sentence.split(\" \");\n        StringBuilder sb = new StringBuilder();\n        for (String word : words) {\n            if (primes[word.length()]) {\n                sb.append(word);\n                sb.append(\" \");\n            }\n        }\n        sb.deleteCharAt(sb.length() - 1);\n        return sb.toString();",
        "grade-7": {
            "execution": 0
        },
        "23": "return Arrays.stream(sentence.split(\" \"))\n            .filter(w -> isPrime(w.length()))\n            .collect(Collectors.joining(\" \"));",
        "grade-23": {
            "execution": 0
        },
        "57": "String[] words = sentence.split(\" \");\n        List<Integer> primes = new ArrayList<>();\n        boolean[] isNotPrime = new boolean[100];\n        int x = 2;\n        while (x < 100) {\n            if (!isNotPrime[x]) {\n                primes.add(x);\n                for (int j = x; j < 100; j += x) {\n                    isNotPrime[j] = true;\n                }\n            }\n            x++;\n        }\n        StringBuilder sb = new StringBuilder();\n        for (String word : words) {\n            if (primes.contains(word.length())) {\n                sb.append(word);\n                sb.append(\" \");\n            }\n        }\n        return sb.toString().trim();",
        "grade-57": {
            "execution": 1
        },
        "61": "int[] isPrime = new int[101];\n        for (int i = 2; i < isPrime.length; i++) {\n            isPrime[i] = 1;\n        }\n        for (int i = 2; i < isPrime.length; i++) {\n            if (isPrime[i] == 1) {\n                for (int j = i * 2; j < isPrime.length; j += i) {\n                    isPrime[j] = 0;\n                }\n            }\n        }\n        String[] words = sentence.split(\" \");\n        StringBuilder sb = new StringBuilder();\n        for (String word : words) {\n            if (isPrime[word.length()] == 1) {\n                sb.append(word);\n                sb.append(\" \");\n            }\n        }\n        return sb.toString().trim();",
        "grade-61": {
            "execution": 1
        },
        "147": "return (Arrays.stream(sentence.split(\" \"))\n                      .filter(x -> isPrime(x.length()))\n                      .collect(Collectors.joining(\" \")));",
        "grade-147": {
            "execution": 0
        },
        "173": "final var words = sentence.split(\" \");\n        var result = new StringBuilder();\n        var primes = primeNumbersLessThan(100);\n        for (var word : words) {\n            if (primes.contains(word.length())) {\n                result.append(word).append(\" \");\n            }\n        }\n        return result.toString().trim();",
        "grade-173": {
            "execution": 0
        },
        "bleu-183": 0.2596210354222886,
        "bleu-28": 0.29270532098449115,
        "bleu-6": 0.42163063796634914,
        "bleu-74": 0.4166566952168758,
        "bleu-65": 0.22738222128690608,
        "bleu-59": 0.08753446171758883,
        "bleu-36": 0.34606929182351837,
        "bleu-26": 1.0882765565251437e-17,
        "bleu-194": 0.3323981422741559,
        "bleu-158": 0.06155153864947525,
        "bleu-22": 0.07131705231704337,
        "bleu-170": 0.13959705387480137,
        "bleu-118": 0.11730148909037971,
        "bleu-8": 0.07374223979909134,
        "bleu-7": 0.2740984677323761,
        "bleu-23": 0.04779779970444584,
        "bleu-57": 0.2790243884004372,
        "bleu-61": 0.28604915594769753,
        "bleu-147": 0.05279476612780739,
        "bleu-173": 0.20863996127992426,
        "codebleu-183": 0.42265931006224533,
        "codebleu-28": 0.5809391903261384,
        "codebleu-6": 0.5491258023269209,
        "codebleu-74": 0.6687919714165205,
        "codebleu-65": 0.4312802120263642,
        "codebleu-59": 0.62119061514972,
        "codebleu-36": 0.6700347101651543,
        "codebleu-26": 0.011834319526630832,
        "codebleu-194": 0.4170401350869388,
        "codebleu-158": 0.21372493683870541,
        "codebleu-22": 0.6173691453503002,
        "codebleu-170": 0.5401111742835479,
        "codebleu-118": 0.28121469118827797,
        "codebleu-8": 0.2416355874851187,
        "codebleu-7": 0.5091246428520455,
        "codebleu-23": 0.20704364974512932,
        "codebleu-57": 0.6524821048641835,
        "codebleu-61": 0.6531782948044121,
        "codebleu-147": 0.21144835215094906,
        "codebleu-173": 0.43954868524290946,
        "chrf-183": 0.37210072858529186,
        "chrf-28": 0.449727839068509,
        "chrf-6": 0.49130044090483566,
        "chrf-74": 0.5645890343613224,
        "chrf-65": 0.38094587626238874,
        "chrf-59": 0.272644987707475,
        "chrf-36": 0.47853205045594566,
        "chrf-26": 0.02223245700809145,
        "chrf-194": 0.521630249298116,
        "chrf-158": 0.20840763689179392,
        "chrf-22": 0.22225642730316456,
        "chrf-170": 0.32039123660048185,
        "chrf-118": 0.2707814885613723,
        "chrf-8": 0.21935009317537874,
        "chrf-7": 0.3980836264919073,
        "chrf-23": 0.19867577519799862,
        "chrf-57": 0.45710769804912954,
        "chrf-61": 0.43601325937758983,
        "chrf-147": 0.197564027554886,
        "chrf-173": 0.33026116301736785,
        "rougel-183": 0.5,
        "rougel-28": 0.3955223880597016,
        "rougel-6": 0.6082949308755762,
        "rougel-74": 0.40875912408759124,
        "rougel-65": 0.482051282051282,
        "rougel-59": 0.2464898595943838,
        "rougel-36": 0.5054945054945056,
        "rougel-26": 0.03333333333333333,
        "rougel-194": 0.6448087431693988,
        "rougel-158": 0.3151515151515151,
        "rougel-22": 0.1915966386554622,
        "rougel-170": 0.3111111111111111,
        "rougel-118": 0.37931034482758624,
        "rougel-8": 0.3508771929824561,
        "rougel-7": 0.4112149532710281,
        "rougel-23": 0.3291139240506329,
        "rougel-57": 0.398576512455516,
        "rougel-61": 0.40404040404040403,
        "rougel-147": 0.33749999999999997,
        "rougel-173": 0.42424242424242425,
        "meteor-183": 0.3393948545719804,
        "meteor-28": 0.44080150736885376,
        "meteor-6": 0.5162185602775369,
        "meteor-74": 0.6329097975493573,
        "meteor-65": 0.35075214878170535,
        "meteor-59": 0.3419044656608845,
        "meteor-36": 0.5864250159875827,
        "meteor-26": 0.00946969696969697,
        "meteor-194": 0.4738977553911704,
        "meteor-158": 0.2264324359939916,
        "meteor-22": 0.3336507798878278,
        "meteor-170": 0.36820077825368835,
        "meteor-118": 0.2474871565780657,
        "meteor-8": 0.23523035230352302,
        "meteor-7": 0.40274513027040354,
        "meteor-23": 0.2227660463322669,
        "meteor-57": 0.4662078417529246,
        "meteor-61": 0.4787329908984412,
        "meteor-147": 0.2325418950319501,
        "meteor-173": 0.32982400759879926,
        "ruby-183": 0.3589743589743589,
        "ruby-28": 0.19867549668874174,
        "ruby-6": 0.46153846153846156,
        "ruby-74": 0.24840764331210186,
        "ruby-65": 0.3504273504273504,
        "ruby-59": 0.14885496183206104,
        "ruby-36": 0.33974358974358976,
        "ruby-26": 0.017094017094017144,
        "ruby-194": 0.5042735042735043,
        "ruby-158": 0.2222222222222222,
        "ruby-22": 0.10669456066945604,
        "ruby-170": 0.2098765432098766,
        "ruby-118": 0.24786324786324787,
        "ruby-8": 0.23931623931623935,
        "ruby-7": 0.28205128205128205,
        "ruby-23": 0.2222222222222222,
        "ruby-57": 0.2682926829268293,
        "ruby-61": 0.24444444444444446,
        "ruby-147": 0.23076923076923073,
        "ruby-173": 0.28205128205128205,
        "codebertscore_f1-183": 0.7478533983230591,
        "codebertscore_f3-183": 0.7391896843910217,
        "codebertscore_f1-28": 0.7449983358383179,
        "codebertscore_f3-28": 0.7607213258743286,
        "codebertscore_f1-6": 0.8367553949356079,
        "codebertscore_f3-6": 0.8263789415359497,
        "codebertscore_f1-74": 0.7809053063392639,
        "codebertscore_f3-74": 0.7926574349403381,
        "codebertscore_f1-65": 0.7571369409561157,
        "codebertscore_f3-65": 0.7456303238868713,
        "codebertscore_f1-59": 0.7302259206771851,
        "codebertscore_f3-59": 0.7392996549606323,
        "codebertscore_f1-36": 0.8166601657867432,
        "codebertscore_f3-36": 0.8177354335784912,
        "codebertscore_f1-26": 0.47138768434524536,
        "codebertscore_f3-26": 0.4353353977203369,
        "codebertscore_f1-194": 0.8068863153457642,
        "codebertscore_f3-194": 0.7700125575065613,
        "codebertscore_f1-158": 0.6420454978942871,
        "codebertscore_f3-158": 0.6234190464019775,
        "codebertscore_f1-22": 0.6879420280456543,
        "codebertscore_f3-22": 0.734697163105011,
        "codebertscore_f1-170": 0.7439188957214355,
        "codebertscore_f3-170": 0.7690288424491882,
        "codebertscore_f1-118": 0.7405385971069336,
        "codebertscore_f3-118": 0.7070266008377075,
        "codebertscore_f1-8": 0.6295750737190247,
        "codebertscore_f3-8": 0.6142732501029968,
        "codebertscore_f1-7": 0.7445368766784668,
        "codebertscore_f3-7": 0.744817852973938,
        "codebertscore_f1-23": 0.6388823390007019,
        "codebertscore_f3-23": 0.6141427755355835,
        "codebertscore_f1-57": 0.7635730504989624,
        "codebertscore_f3-57": 0.7756071090698242,
        "codebertscore_f1-61": 0.7686872482299805,
        "codebertscore_f3-61": 0.7725239396095276,
        "codebertscore_f1-147": 0.640723466873169,
        "codebertscore_f3-147": 0.6163852214813232,
        "codebertscore_f1-173": 0.7076300978660583,
        "codebertscore_f3-173": 0.7081428170204163,
        "codebertscore_s_f1-183": 0.7535519003868103,
        "codebertscore_s_f3-183": 0.7477360367774963,
        "codebertscore_s_f1-28": 0.7557212710380554,
        "codebertscore_s_f3-28": 0.767507791519165,
        "codebertscore_s_f1-6": 0.8252691626548767,
        "codebertscore_s_f3-6": 0.8159719705581665,
        "codebertscore_s_f1-74": 0.7941386699676514,
        "codebertscore_s_f3-74": 0.8108839392662048,
        "codebertscore_s_f1-65": 0.7639752626419067,
        "codebertscore_s_f3-65": 0.7507177591323853,
        "codebertscore_s_f1-59": 0.7470815777778625,
        "codebertscore_s_f3-59": 0.7503246665000916,
        "codebertscore_s_f1-36": 0.8108070492744446,
        "codebertscore_s_f3-36": 0.814233660697937,
        "codebertscore_s_f1-26": 0.6010870933532715,
        "codebertscore_s_f3-26": 0.5646769404411316,
        "codebertscore_s_f1-194": 0.8143765330314636,
        "codebertscore_s_f3-194": 0.7753629088401794,
        "codebertscore_s_f1-158": 0.6738039255142212,
        "codebertscore_s_f3-158": 0.6589005589485168,
        "codebertscore_s_f1-22": 0.7134987115859985,
        "codebertscore_s_f3-22": 0.7599954605102539,
        "codebertscore_s_f1-170": 0.7500117421150208,
        "codebertscore_s_f3-170": 0.7782549858093262,
        "codebertscore_s_f1-118": 0.7497262358665466,
        "codebertscore_s_f3-118": 0.7212541699409485,
        "codebertscore_s_f1-8": 0.6705752611160278,
        "codebertscore_s_f3-8": 0.658625066280365,
        "codebertscore_s_f1-7": 0.7579689621925354,
        "codebertscore_s_f3-7": 0.7557315826416016,
        "codebertscore_s_f1-23": 0.681651771068573,
        "codebertscore_s_f3-23": 0.6587748527526855,
        "codebertscore_s_f1-57": 0.7771165370941162,
        "codebertscore_s_f3-57": 0.7906118035316467,
        "codebertscore_s_f1-61": 0.7817312479019165,
        "codebertscore_s_f3-61": 0.7883381247520447,
        "codebertscore_s_f1-147": 0.6824303865432739,
        "codebertscore_s_f3-147": 0.6590113043785095,
        "codebertscore_s_f1-173": 0.7162256240844727,
        "codebertscore_s_f3-173": 0.7160235047340393,
        "gpt35_nsnr-183": 3,
        "raw_gpt35_nsnr-183": "3",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-74": 4,
        "raw_gpt35_nsnr-74": "4",
        "gpt35_nsnr-65": 3,
        "raw_gpt35_nsnr-65": "3",
        "gpt35_nsnr-59": 2,
        "raw_gpt35_nsnr-59": "2",
        "gpt35_nsnr-36": 4,
        "raw_gpt35_nsnr-36": "4",
        "gpt35_nsnr-26": 2,
        "raw_gpt35_nsnr-26": "2",
        "gpt35_nsnr-194": 4,
        "raw_gpt35_nsnr-194": "4",
        "gpt35_nsnr-158": 4,
        "raw_gpt35_nsnr-158": "4",
        "gpt35_nsnr-22": 2,
        "raw_gpt35_nsnr-22": "2",
        "gpt35_nsnr-170": 3,
        "raw_gpt35_nsnr-170": "3",
        "gpt35_nsnr-118": 4,
        "raw_gpt35_nsnr-118": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-61": 4,
        "raw_gpt35_nsnr-61": "4",
        "gpt35_nsnr-147": 4,
        "raw_gpt35_nsnr-147": "4",
        "gpt35_nsnr-173": 4,
        "raw_gpt35_nsnr-173": "4",
        "gpt35_nswr-183": 3,
        "raw_gpt35_nswr-183": "3",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-74": 3,
        "raw_gpt35_nswr-74": "3",
        "gpt35_nswr-65": 3,
        "raw_gpt35_nswr-65": "3",
        "gpt35_nswr-59": 2,
        "raw_gpt35_nswr-59": "2",
        "gpt35_nswr-36": 3,
        "raw_gpt35_nswr-36": "3",
        "gpt35_nswr-26": 0,
        "raw_gpt35_nswr-26": "0",
        "gpt35_nswr-194": 3,
        "raw_gpt35_nswr-194": "3",
        "gpt35_nswr-158": 3,
        "raw_gpt35_nswr-158": "3",
        "gpt35_nswr-22": 2,
        "raw_gpt35_nswr-22": "2",
        "gpt35_nswr-170": 2,
        "raw_gpt35_nswr-170": "2",
        "gpt35_nswr-118": 3,
        "raw_gpt35_nswr-118": "3",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-61": 4,
        "raw_gpt35_nswr-61": "4",
        "gpt35_nswr-147": 3,
        "raw_gpt35_nswr-147": "3",
        "gpt35_nswr-173": 3,
        "raw_gpt35_nswr-173": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given a list of numbers.\n    // You need to return the sum of squared numbers in the given list,\n    // round each element in the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst = [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output should be 6\n    public static int sumSquares(ArrayList<Float> lst) {\n",
        "snippet": [
            "        return lst.stream().map(p -> (int) Math.ceil(p)).map(p -> p * p).reduce(Integer::sum).get();\n    }\n}"
        ],
        "simplified": "You are given a list of numbers. You need to return the sum of squared numbers in the given list, round each element in the list to the upper int(Ceiling) first.",
        "task_id": "133",
        "28": "int result = 0;\n        for (Float i : lst) {\n            result += Math.ceil(i) * Math.ceil(i);\n        }\n        return result;",
        "grade-28": {
            "execution": 1
        },
        "6": "int sum = 0;\n        for (Float num : lst) {\n            sum += Math.ceil(num) * Math.ceil(num);\n        }\n        return sum;",
        "grade-6": {
            "execution": 1
        },
        "81": "return lst.stream().mapToInt(value -> (int) Math.ceil(value) * (int) Math.ceil(value)).sum();",
        "grade-81": {
            "execution": 1
        },
        "71": "// Write your code here\n        int sum = 0;\n        for (float i : lst) {\n            int rounded = (int) Math.ceil(i);\n            sum += Math.pow(rounded, 2);\n        }\n        return sum;",
        "grade-71": {
            "execution": 1
        },
        "63": "return lst.stream().map(x -> Math.round(x)).map(x -> (int) Math.pow(x, 2)).reduce(0, (x, y) -> x + y);",
        "grade-63": {
            "execution": 0
        },
        "35": "// Python:\n        // sum([i**2 for i in lst])\n        return lst.stream().mapToInt(i -> (int) Math.ceil(i)).map(i -> i * i).sum();",
        "grade-35": {
            "execution": 1
        },
        "26": "// Code here\n        return 0;",
        "grade-26": {
            "execution": 0
        },
        "167": "return lst.stream().map(i -> (int)Math.ceil(i)).map(i -> i*i).reduce(0,(total,i) -> total+i);",
        "grade-167": {
            "execution": 1
        },
        "22": "// YOUR CODE HERE\n        int sum = 0;\n        for (Float f : lst) {\n            int fInt = (int) Math.ceil(f);\n            sum += fInt * fInt;\n        }\n        return sum;",
        "grade-22": {
            "execution": 1
        },
        "183": "int sum = 0;\n        for (float number : lst) {\n            sum += Math.round(number) * Math.round(number);\n        }\n        return sum;",
        "grade-183": {
            "execution": 0
        },
        "128": "return lst.stream().map(x -> Math.round(x * x)).reduce(0, (x, y) -> x + y);",
        "grade-128": {
            "execution": 0
        },
        "8": "int sum = 0;\n        for (float num : lst) {\n            // int converted = (int) Math.ceil(num);\n            int converted = (int) Math.round(num);\n            sum += converted * converted;\n        }\n        return sum;",
        "grade-8": {
            "execution": 0
        },
        "7": "int sum = 0;\n        // code here\n        return sum;",
        "grade-7": {
            "execution": 0
        },
        "23": "// Your code here\n        return -1;",
        "grade-23": {
            "execution": 0
        },
        "61": "return lst.stream().mapToInt(f -> (int) Math.ceil(f)).map(f -> f * f).sum();",
        "grade-61": {
            "execution": 1
        },
        "68": "ArrayList<Integer> squares = new ArrayList<Integer>();\n        for (Float i : lst) {\n            squares.add((int) Math.ceil(i));\n        }\n        return squares.stream().mapToInt(x -> x * x).sum();",
        "grade-68": {
            "execution": 1
        },
        "155": "// write your code here\n        // List<Float> squared = new ArrayList<Float>();\n        // for (int i = 0; i < lst.size(); i++) {\n        // squared.add(new Float(Math.ceil(lst.get(i))));\n        // }\n        // return squared.stream().mapToInt(a -> a.intValue()).map(a -> a * a).sum();\n        return lst.stream().mapToInt(a -> (int) Math.ceil(a)).map(a -> a * a).sum();",
        "grade-155": {
            "execution": 1
        },
        "187": "return lst.stream().map(n -> (int)Math.ceil(n))\n                .map(n -> n * n)\n                .reduce(0, (a,b) -> a + b);",
        "grade-187": {
            "execution": 1
        },
        "172": "// Write your code here\n        // Use lst.size() to get number of elements in the list\n        // Use lst.get(i) to get the i-th element in the list\n        // You can use Math.ceil(x) to round x to the upper integer\n        // You can use Math.pow(x,y) to get x^y\n        // You can use ArrayList.add(e) to add e to ArrayList\n        return 0;",
        "grade-172": {
            "execution": 0
        },
        "53": "int sum = 0;\n        for (float i : lst) {\n            sum += (int)Math.ceil(i) * (int)Math.ceil(i);\n        }\n        return sum;",
        "grade-53": {
            "execution": 1
        },
        "bleu-28": 0.08393732805168402,
        "bleu-6": 0.08514536984810395,
        "bleu-81": 0.3836857368890702,
        "bleu-71": 0.16718078002864897,
        "bleu-63": 0.38556510790926396,
        "bleu-35": 0.36356632231919933,
        "bleu-26": 0.00025760834657848655,
        "bleu-167": 0.4671890924565624,
        "bleu-22": 0.15885266857983052,
        "bleu-183": 0.04720142828952108,
        "bleu-128": 0.28255282696694306,
        "bleu-8": 0.15256354265624858,
        "bleu-7": 0.002591633918908352,
        "bleu-23": 0.0009202420219135653,
        "bleu-61": 0.43640866730322164,
        "bleu-68": 0.2413539926202924,
        "bleu-155": 0.15498397812976208,
        "bleu-187": 0.4671890924565624,
        "bleu-172": 0.04804656364817998,
        "bleu-53": 0.1758538833832918,
        "codebleu-28": 0.32361299123432535,
        "codebleu-6": 0.3352243714736548,
        "codebleu-81": 0.5434058251072148,
        "codebleu-71": 0.3676299571008895,
        "codebleu-63": 0.6202842010456415,
        "codebleu-35": 0.7144399221106116,
        "codebleu-26": 0.036005074218652636,
        "codebleu-167": 0.7168590475542046,
        "codebleu-22": 0.34592845499180896,
        "codebleu-183": 0.32008665889743443,
        "codebleu-128": 0.4680113857400453,
        "codebleu-8": 0.4203852407422752,
        "codebleu-7": 0.06571467456407563,
        "codebleu-23": 0.054481201101696214,
        "codebleu-61": 0.6341663660414999,
        "codebleu-68": 0.6256866329777176,
        "codebleu-155": 0.7054439828885118,
        "codebleu-187": 0.6581436590303106,
        "codebleu-172": 0.45439026533674093,
        "codebleu-53": 0.406625846468926,
        "chrf-28": 0.23386064897426453,
        "chrf-6": 0.23157490970915784,
        "chrf-81": 0.48638876408550524,
        "chrf-71": 0.27695846987319844,
        "chrf-63": 0.5149787277766847,
        "chrf-35": 0.5085504099327791,
        "chrf-26": 0.0703036571742412,
        "chrf-167": 0.5708177411641563,
        "chrf-22": 0.2559722634518348,
        "chrf-183": 0.17898364790548307,
        "chrf-128": 0.4106827699132053,
        "chrf-8": 0.2686060113746157,
        "chrf-7": 0.10417566877587474,
        "chrf-23": 0.07840596455521656,
        "chrf-61": 0.5356894715482102,
        "chrf-68": 0.41227339283524467,
        "chrf-155": 0.4044050522518388,
        "chrf-187": 0.5799593422931153,
        "chrf-172": 0.24010429981016052,
        "chrf-53": 0.2785199292554408,
        "rougel-28": 0.3209876543209876,
        "rougel-6": 0.3209876543209876,
        "rougel-81": 0.6511627906976744,
        "rougel-71": 0.3368421052631579,
        "rougel-63": 0.5742574257425743,
        "rougel-35": 0.6095238095238096,
        "rougel-26": 0.07407407407407407,
        "rougel-167": 0.6875000000000001,
        "rougel-22": 0.2826086956521739,
        "rougel-183": 0.2962962962962963,
        "rougel-128": 0.5176470588235293,
        "rougel-8": 0.3434343434343434,
        "rougel-7": 0.10169491525423728,
        "rougel-23": 0.10714285714285714,
        "rougel-61": 0.7441860465116279,
        "rougel-68": 0.4545454545454546,
        "rougel-155": 0.3282051282051282,
        "rougel-187": 0.6875000000000001,
        "rougel-172": 0.2620689655172414,
        "rougel-53": 0.4137931034482758,
        "meteor-28": 0.18599562363238512,
        "meteor-6": 0.19693654266958424,
        "meteor-81": 0.5153136838880855,
        "meteor-71": 0.20169851380042458,
        "meteor-63": 0.5587608503560477,
        "meteor-35": 0.5413721413721413,
        "meteor-26": 0.023255813953488372,
        "meteor-167": 0.6614406779661017,
        "meteor-22": 0.18162393162393162,
        "meteor-183": 0.18599562363238512,
        "meteor-128": 0.43563644765046405,
        "meteor-8": 0.23157894736842108,
        "meteor-7": 0.04597701149425287,
        "meteor-23": 0.03472222222222222,
        "meteor-61": 0.5275022828733766,
        "meteor-68": 0.5889392794154699,
        "meteor-155": 0.49198604577976957,
        "meteor-187": 0.6470294997360858,
        "meteor-172": 0.23032629558541265,
        "meteor-53": 0.23758099352051837,
        "ruby-28": 0.19148936170212771,
        "ruby-6": 0.19148936170212771,
        "ruby-81": 0.5319148936170213,
        "ruby-71": 0.14583333333333337,
        "ruby-63": 0.4444444444444444,
        "ruby-35": 0.3793103448275862,
        "ruby-26": 0.021276595744680882,
        "ruby-167": 0.6326530612244898,
        "ruby-22": 0.06382978723404253,
        "ruby-183": 0.19148936170212771,
        "ruby-128": 0.4042553191489362,
        "ruby-8": 0.23076923076923073,
        "ruby-7": 0.06382978723404253,
        "ruby-23": 0.04255319148936165,
        "ruby-61": 0.6382978723404256,
        "ruby-68": 0.25396825396825395,
        "ruby-155": 0.18243243243243246,
        "ruby-187": 0.6326530612244898,
        "ruby-172": 0.173469387755102,
        "ruby-53": 0.21276595744680848,
        "codebertscore_f1-28": 0.7732334136962891,
        "codebertscore_f3-28": 0.7555503845214844,
        "codebertscore_f1-6": 0.769406795501709,
        "codebertscore_f3-6": 0.749468207359314,
        "codebertscore_f1-81": 0.8694788217544556,
        "codebertscore_f3-81": 0.8616635203361511,
        "codebertscore_f1-71": 0.73164963722229,
        "codebertscore_f3-71": 0.7393454313278198,
        "codebertscore_f1-63": 0.8750888705253601,
        "codebertscore_f3-63": 0.8777191638946533,
        "codebertscore_f1-35": 0.8460684418678284,
        "codebertscore_f3-35": 0.8631603717803955,
        "codebertscore_f1-26": 0.6083047986030579,
        "codebertscore_f3-26": 0.5899505019187927,
        "codebertscore_f1-167": 0.9135468602180481,
        "codebertscore_f3-167": 0.9206474423408508,
        "codebertscore_f1-22": 0.754608154296875,
        "codebertscore_f3-22": 0.7564060688018799,
        "codebertscore_f1-183": 0.7544483542442322,
        "codebertscore_f3-183": 0.7361174821853638,
        "codebertscore_f1-128": 0.8750694990158081,
        "codebertscore_f3-128": 0.8692328333854675,
        "codebertscore_f1-8": 0.7573884725570679,
        "codebertscore_f3-8": 0.7481762170791626,
        "codebertscore_f1-7": 0.6635684370994568,
        "codebertscore_f3-7": 0.6461978554725647,
        "codebertscore_f1-23": 0.6041070222854614,
        "codebertscore_f3-23": 0.6004328727722168,
        "codebertscore_f1-61": 0.9183287024497986,
        "codebertscore_f3-61": 0.9100562930107117,
        "codebertscore_f1-68": 0.8065330982208252,
        "codebertscore_f3-68": 0.8299950361251831,
        "codebertscore_f1-155": 0.777133584022522,
        "codebertscore_f3-155": 0.8108839392662048,
        "codebertscore_f1-187": 0.8999134302139282,
        "codebertscore_f3-187": 0.9052936434745789,
        "codebertscore_f1-172": 0.6838223934173584,
        "codebertscore_f3-172": 0.7038306593894958,
        "codebertscore_f1-53": 0.7859148383140564,
        "codebertscore_f3-53": 0.7686578631401062,
        "codebertscore_s_f1-28": 0.7839150428771973,
        "codebertscore_s_f3-28": 0.7642140984535217,
        "codebertscore_s_f1-6": 0.7828323841094971,
        "codebertscore_s_f3-6": 0.7597584128379822,
        "codebertscore_s_f1-81": 0.8981556296348572,
        "codebertscore_s_f3-81": 0.8851864337921143,
        "codebertscore_s_f1-71": 0.7358295917510986,
        "codebertscore_s_f3-71": 0.7412227392196655,
        "codebertscore_s_f1-63": 0.8745890259742737,
        "codebertscore_s_f3-63": 0.8801051378250122,
        "codebertscore_s_f1-35": 0.8600708246231079,
        "codebertscore_s_f3-35": 0.8777640461921692,
        "codebertscore_s_f1-26": 0.6207299828529358,
        "codebertscore_s_f3-26": 0.6001685261726379,
        "codebertscore_s_f1-167": 0.9167813658714294,
        "codebertscore_s_f3-167": 0.9228981137275696,
        "codebertscore_s_f1-22": 0.7581306099891663,
        "codebertscore_s_f3-22": 0.757098376750946,
        "codebertscore_s_f1-183": 0.7657947540283203,
        "codebertscore_s_f3-183": 0.7437180280685425,
        "codebertscore_s_f1-128": 0.8829339742660522,
        "codebertscore_s_f3-128": 0.8783613443374634,
        "codebertscore_s_f1-8": 0.7625447511672974,
        "codebertscore_s_f3-8": 0.7537561655044556,
        "codebertscore_s_f1-7": 0.6734281778335571,
        "codebertscore_s_f3-7": 0.6500077247619629,
        "codebertscore_s_f1-23": 0.6272602677345276,
        "codebertscore_s_f3-23": 0.6239694952964783,
        "codebertscore_s_f1-61": 0.9309923052787781,
        "codebertscore_s_f3-61": 0.920863687992096,
        "codebertscore_s_f1-68": 0.8133823275566101,
        "codebertscore_s_f3-68": 0.8361273407936096,
        "codebertscore_s_f1-155": 0.7820283770561218,
        "codebertscore_s_f3-155": 0.8159075975418091,
        "codebertscore_s_f1-187": 0.9001174569129944,
        "codebertscore_s_f3-187": 0.9094159603118896,
        "codebertscore_s_f1-172": 0.681641697883606,
        "codebertscore_s_f3-172": 0.7043798565864563,
        "codebertscore_s_f1-53": 0.7963164448738098,
        "codebertscore_s_f3-53": 0.7747172117233276,
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-81": 4,
        "raw_gpt35_nsnr-81": "4",
        "gpt35_nsnr-71": 4,
        "raw_gpt35_nsnr-71": "4",
        "gpt35_nsnr-63": 4,
        "raw_gpt35_nsnr-63": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-26": 0,
        "raw_gpt35_nsnr-26": "0",
        "gpt35_nsnr-167": 4,
        "raw_gpt35_nsnr-167": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-183": 4,
        "raw_gpt35_nsnr-183": "4",
        "gpt35_nsnr-128": 4,
        "raw_gpt35_nsnr-128": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 2,
        "raw_gpt35_nsnr-7": "2",
        "gpt35_nsnr-23": 0,
        "raw_gpt35_nsnr-23": "0",
        "gpt35_nsnr-61": 4,
        "raw_gpt35_nsnr-61": "4",
        "gpt35_nsnr-68": 4,
        "raw_gpt35_nsnr-68": "4",
        "gpt35_nsnr-155": 4,
        "raw_gpt35_nsnr-155": "4",
        "gpt35_nsnr-187": 4,
        "raw_gpt35_nsnr-187": "4",
        "gpt35_nsnr-172": 4,
        "raw_gpt35_nsnr-172": "4",
        "gpt35_nsnr-53": 4,
        "raw_gpt35_nsnr-53": "4",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-81": 4,
        "raw_gpt35_nswr-81": "4",
        "gpt35_nswr-71": 4,
        "raw_gpt35_nswr-71": "4",
        "gpt35_nswr-63": 4,
        "raw_gpt35_nswr-63": "4",
        "gpt35_nswr-35": 4,
        "raw_gpt35_nswr-35": "4",
        "gpt35_nswr-26": 2,
        "raw_gpt35_nswr-26": "2",
        "gpt35_nswr-167": 4,
        "raw_gpt35_nswr-167": "4",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-183": 3,
        "raw_gpt35_nswr-183": "3",
        "gpt35_nswr-128": 3,
        "raw_gpt35_nswr-128": "3",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 2,
        "raw_gpt35_nswr-7": "2",
        "gpt35_nswr-23": 2,
        "raw_gpt35_nswr-23": "2",
        "gpt35_nswr-61": 4,
        "raw_gpt35_nswr-61": "4",
        "gpt35_nswr-68": 4,
        "raw_gpt35_nswr-68": "4",
        "gpt35_nswr-155": 4,
        "raw_gpt35_nswr-155": "4",
        "gpt35_nswr-187": 4,
        "raw_gpt35_nswr-187": "4",
        "gpt35_nswr-172": 2,
        "raw_gpt35_nswr-172": "2",
        "gpt35_nswr-53": 4,
        "raw_gpt35_nswr-53": "4"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a non-empty list of integers lst. add the even elements that are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n    public static int add(ArrayList<Integer> lst) {\n",
        "snippet": [
            "        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"
        ],
        "simplified": "Given a non-empty list of integers lst. add the even elements that are at odd indices..",
        "task_id": "85",
        "126": "return -1;",
        "grade-126": {
            "execution": 0
        },
        "18": "return lst.stream().filter(x -> x % 2 == 0).reduce(0, Integer::sum);",
        "grade-18": {
            "execution": 0
        },
        "3": "int count = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 1 && lst.get(i) % 2 == 0)\n                count += lst.get(i);\n        }\n        return count;",
        "grade-3": {
            "execution": 1
        },
        "158": "return lst.stream().filter(x -> x % 2 == 0).filter(x -> x % 2 == 0).reduce(0, (sum, x) -> sum + x);",
        "grade-158": {
            "execution": 0
        },
        "46": "int result = 0;\n        for (int i = 0; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 0) {\n                result += lst.get(i);\n            }\n        }\n        return result;",
        "grade-46": {
            "execution": 0
        },
        "37": "ArrayList<Integer> odds = new ArrayList<Integer>();\n        ArrayList<Integer> evens = new ArrayList<Integer>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                evens.add(lst.get(i));\n            } else {\n                odds.add(lst.get(i));\n            }\n        }\n        int evensSum = 0;\n        for (int i = 0; i < evens.size(); i++) {\n            evensSum += evens.get(i);\n        }\n        int oddsSum = 0;\n        for (int i = 0; i < odds.size(); i++) {\n            oddsSum += odds.get(i);\n        }\n        return evensSum - oddsSum;",
        "grade-37": {
            "execution": 0
        },
        "34": "ArrayList<Integer> x = new ArrayList<Integer>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 1 && lst.get(i) % 2 == 0) {\n                x.add(lst.get(i));\n            }\n        }\n        int y = 0;\n        for (int i = 0; i < x.size(); i++) {\n            y += x.get(i);\n        }\n        return y;",
        "grade-34": {
            "execution": 1
        },
        "21": "return lst.stream().filter(x -> x % 2 == 0).reduce(0, (a, b) -> a + b);",
        "grade-21": {
            "execution": 0
        },
        "17": "return lst.stream().filter(x -> (x % 2 == 0 && lst.indexOf(x) % 2 != 0)).reduce(0, (x, y) -> x + y);",
        "grade-17": {
            "execution": 0
        },
        "132": "return IntStream.range(0, lst.size())\n                        .filter(i -> (i % 2 == 1 && lst.get(i) % 2 == 0))\n                        .map(i -> lst.get(i))\n                        .sum();",
        "grade-132": {
            "execution": 1
        },
        "193": "return lst.stream().filter(e -> e % 2 == 0).mapToInt(e -> e).sum();",
        "grade-193": {
            "execution": 0
        },
        "105": "int result = 0;\n        int i = 0;\n        while (i < lst.size()) {\n            if (i % 2 == 1 && lst.get(i) % 2 == 0) {\n                result += lst.get(i);\n            }\n            i++;\n        }\n        return result;",
        "grade-105": {
            "execution": 1
        },
        "15": "return lst.stream().reduce(0, (a,b) -> a + (b % 2 == 0 ? b : 0));",
        "grade-15": {
            "execution": 0
        },
        "114": "// return 1;\n        return lst.stream().filter(x -> (x%2 == 0 && lst.indexOf(x)%2 != 0)).reduce(0, (x, y) -> x + y);",
        "grade-114": {
            "execution": 0
        },
        "79": "// create a list of booleans to hold the results of each odd index.\n        ArrayList<Boolean> oddIndices = new ArrayList<Boolean>();\n        // For each element in the list, check if it is odd, and if it is odd, add it to the new odd indices list.\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 1) {\n                oddIndices.add(true);\n            } else {\n                oddIndices.add(false);\n            }\n        }\n        // Create a list to hold the results of the even elements at odd indices.\n        ArrayList<Integer> results = new ArrayList<Integer>();\n        // For each element in the list, check if it is odd and also if it is even.\n        // If it is even and at an odd index, add it to the results list.\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) % 2 == 0 && oddIndices.get(i)) {\n                results.add(lst.get(i));\n            }\n        }\n        // create a variable to hold the sum of the results list.\n        int sum = 0;\n        // For each element in the results list, add it to the variable that holds the sum.\n        for (int i = 0; i < results.size(); i++) {\n            sum += results.get(i);\n        }\n        // return the sum of the even elements at odd indices.\n        return sum;",
        "grade-79": {
            "execution": 1
        },
        "4": "int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 1 && lst.get(i) % 2 == 0)\n                sum += lst.get(i);\n        }\n        return sum;",
        "grade-4": {
            "execution": 1
        },
        "33": "return lst.stream().filter(i -> i % 2 == 0).filter(i -> lst.indexOf(i) % 2 != 0).reduce(0, (a, b) -> a + b);",
        "grade-33": {
            "execution": 0
        },
        "35": "int r = 0;\n        int index = 0;\n        for (int i : lst) {\n            if (index % 2 == 1 && i % 2 == 0) {\n                r += i;\n            }\n            index++;\n        }\n        return r;",
        "grade-35": {
            "execution": 1
        },
        "97": "return lst.stream().filter(i -> i % 2 == 0).reduce(0, (a, b) -> a + b);",
        "grade-97": {
            "execution": 0
        },
        "117": "int cnt = 0;\n        int ans = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 == 0) {\n                ans += lst.get(i);\n            }\n        }\n        return ans;",
        "grade-117": {
            "execution": 0
        },
        "bleu-126": 4.847072333557499e-07,
        "bleu-18": 0.09024111028374687,
        "bleu-3": 0.6509714152836541,
        "bleu-158": 0.13342683778315823,
        "bleu-46": 0.8114632013549293,
        "bleu-37": 0.22377491273525596,
        "bleu-34": 0.36726333273538975,
        "bleu-21": 0.10547015834995838,
        "bleu-17": 0.12906120198424728,
        "bleu-132": 0.3638561405446311,
        "bleu-193": 0.10638144065759875,
        "bleu-105": 0.5401801013572353,
        "bleu-15": 0.08460204583905724,
        "bleu-114": 0.1348220060765869,
        "bleu-79": 0.13254263246510528,
        "bleu-4": 0.7245483284863974,
        "bleu-33": 0.19493132199786434,
        "bleu-35": 0.2934780676990419,
        "bleu-97": 0.11112067324269871,
        "bleu-117": 0.6154348454507239,
        "codebleu-126": 0.024096758217527905,
        "codebleu-18": 0.2333748807013135,
        "codebleu-3": 0.7161003605314912,
        "codebleu-158": 0.3500385590489506,
        "codebleu-46": 0.8115052017072046,
        "codebleu-37": 0.7056517733386471,
        "codebleu-34": 0.7278367144634792,
        "codebleu-21": 0.2732576808010207,
        "codebleu-17": 0.38419187909905184,
        "codebleu-132": 0.5373040525976949,
        "codebleu-193": 0.2514174018202569,
        "codebleu-105": 0.7088853648824852,
        "codebleu-15": 0.25613856738746144,
        "codebleu-114": 0.404057911834668,
        "codebleu-79": 0.7138812266221368,
        "codebleu-4": 0.7302717554035952,
        "codebleu-33": 0.428442002269993,
        "codebleu-35": 0.44943973186235,
        "codebleu-97": 0.2753673935719144,
        "codebleu-117": 0.7612606702582538,
        "chrf-126": 0.05601584242163884,
        "chrf-18": 0.18881351689621012,
        "chrf-3": 0.6448287732084372,
        "chrf-158": 0.21273206223350244,
        "chrf-46": 0.7739568542312072,
        "chrf-37": 0.4355164881090786,
        "chrf-34": 0.5609776161706841,
        "chrf-21": 0.17348719371332205,
        "chrf-17": 0.19863789436644402,
        "chrf-132": 0.4237148363545628,
        "chrf-193": 0.19177666811856844,
        "chrf-105": 0.5650727075925775,
        "chrf-15": 0.15564473979773094,
        "chrf-114": 0.20723617263364424,
        "chrf-79": 0.29013105610293266,
        "chrf-4": 0.7843052910613075,
        "chrf-33": 0.23130493479226008,
        "chrf-35": 0.3109019817994844,
        "chrf-97": 0.1816131861669749,
        "chrf-117": 0.6772083689314071,
        "rougel-126": 0.06451612903225806,
        "rougel-18": 0.36363636363636365,
        "rougel-3": 0.8067226890756303,
        "rougel-158": 0.35514018691588783,
        "rougel-46": 0.912280701754386,
        "rougel-37": 0.3879310344827586,
        "rougel-34": 0.5411764705882354,
        "rougel-21": 0.3404255319148936,
        "rougel-17": 0.32727272727272727,
        "rougel-132": 0.47457627118644075,
        "rougel-193": 0.3695652173913043,
        "rougel-105": 0.7438016528925621,
        "rougel-15": 0.32608695652173914,
        "rougel-114": 0.34782608695652173,
        "rougel-79": 0.25706940874035983,
        "rougel-4": 0.8571428571428572,
        "rougel-33": 0.3893805309734513,
        "rougel-35": 0.537037037037037,
        "rougel-97": 0.36170212765957444,
        "rougel-117": 0.7936507936507937,
        "meteor-126": 0.028517110266159697,
        "meteor-18": 0.19787024770163397,
        "meteor-3": 0.8442491112073928,
        "meteor-158": 0.27052655563100897,
        "meteor-46": 0.8973217941893084,
        "meteor-37": 0.6306140173988106,
        "meteor-34": 0.6454258675078863,
        "meteor-21": 0.2137940002763352,
        "meteor-17": 0.274828361132301,
        "meteor-132": 0.35156138447040003,
        "meteor-193": 0.2145630434427968,
        "meteor-105": 0.8117982855408891,
        "meteor-15": 0.22859712230215828,
        "meteor-114": 0.28999682774664265,
        "meteor-79": 0.5103481731261145,
        "meteor-4": 0.9027145435251653,
        "meteor-33": 0.3085692278066628,
        "meteor-35": 0.44726107226107226,
        "meteor-97": 0.23182307864300666,
        "meteor-117": 0.8741695880674105,
        "ruby-126": 0.03448275862068961,
        "ruby-18": 0.24137931034482762,
        "ruby-3": 0.7049180327868853,
        "ruby-158": 0.18965517241379315,
        "ruby-46": 0.896551724137931,
        "ruby-37": 0.25287356321839083,
        "ruby-34": 0.4017857142857143,
        "ruby-21": 0.2068965517241379,
        "ruby-17": 0.18965517241379315,
        "ruby-132": 0.33333333333333337,
        "ruby-193": 0.22413793103448276,
        "ruby-105": 0.6190476190476191,
        "ruby-15": 0.2068965517241379,
        "ruby-114": 0.18965517241379315,
        "ruby-79": 0.14501510574018128,
        "ruby-4": 0.7540983606557377,
        "ruby-33": 0.2068965517241379,
        "ruby-35": 0.39655172413793105,
        "ruby-97": 0.22413793103448276,
        "ruby-117": 0.6911764705882353,
        "codebertscore_f1-126": 0.6161851286888123,
        "codebertscore_f3-126": 0.589133620262146,
        "codebertscore_f1-18": 0.7441276907920837,
        "codebertscore_f3-18": 0.7479730248451233,
        "codebertscore_f1-3": 0.9454120397567749,
        "codebertscore_f3-3": 0.9508107900619507,
        "codebertscore_f1-158": 0.7496698498725891,
        "codebertscore_f3-158": 0.7586361765861511,
        "codebertscore_f1-46": 0.9750242829322815,
        "codebertscore_f3-46": 0.9736104607582092,
        "codebertscore_f1-37": 0.7807472944259644,
        "codebertscore_f3-37": 0.8389706611633301,
        "codebertscore_f1-34": 0.8696187734603882,
        "codebertscore_f3-34": 0.8956442475318909,
        "codebertscore_f1-21": 0.7378692030906677,
        "codebertscore_f3-21": 0.7471117973327637,
        "codebertscore_f1-17": 0.7502568364143372,
        "codebertscore_f3-17": 0.7539735436439514,
        "codebertscore_f1-132": 0.8136441111564636,
        "codebertscore_f3-132": 0.8173550963401794,
        "codebertscore_f1-193": 0.7462904453277588,
        "codebertscore_f3-193": 0.7547582387924194,
        "codebertscore_f1-105": 0.920775294303894,
        "codebertscore_f3-105": 0.9245799779891968,
        "codebertscore_f1-15": 0.7500889301300049,
        "codebertscore_f3-15": 0.7501153349876404,
        "codebertscore_f1-114": 0.7553528547286987,
        "codebertscore_f3-114": 0.7618045210838318,
        "codebertscore_f1-79": 0.7224025130271912,
        "codebertscore_f3-79": 0.8120661377906799,
        "codebertscore_f1-4": 0.9611178040504456,
        "codebertscore_f3-4": 0.9670667052268982,
        "codebertscore_f1-33": 0.7520956993103027,
        "codebertscore_f3-33": 0.7609012126922607,
        "codebertscore_f1-35": 0.8649803400039673,
        "codebertscore_f3-35": 0.8616853356361389,
        "codebertscore_f1-97": 0.7470811009407043,
        "codebertscore_f3-97": 0.7575967311859131,
        "codebertscore_f1-117": 0.9182169437408447,
        "codebertscore_f3-117": 0.9275779724121094,
        "codebertscore_s_f1-126": 0.6389177441596985,
        "codebertscore_s_f3-126": 0.6048416495323181,
        "codebertscore_s_f1-18": 0.758499801158905,
        "codebertscore_s_f3-18": 0.7635862231254578,
        "codebertscore_s_f1-3": 0.9484320282936096,
        "codebertscore_s_f3-3": 0.9530087113380432,
        "codebertscore_s_f1-158": 0.7677645087242126,
        "codebertscore_s_f3-158": 0.7784963250160217,
        "codebertscore_s_f1-46": 0.9741694331169128,
        "codebertscore_s_f3-46": 0.9728999733924866,
        "codebertscore_s_f1-37": 0.8250993490219116,
        "codebertscore_s_f3-37": 0.8744649291038513,
        "codebertscore_s_f1-34": 0.8908944725990295,
        "codebertscore_s_f3-34": 0.915787935256958,
        "codebertscore_s_f1-21": 0.7469505667686462,
        "codebertscore_s_f3-21": 0.757305920124054,
        "codebertscore_s_f1-17": 0.7676286101341248,
        "codebertscore_s_f3-17": 0.7708054184913635,
        "codebertscore_s_f1-132": 0.8394519090652466,
        "codebertscore_s_f3-132": 0.8431851863861084,
        "codebertscore_s_f1-193": 0.7580831050872803,
        "codebertscore_s_f3-193": 0.7676202058792114,
        "codebertscore_s_f1-105": 0.9267899394035339,
        "codebertscore_s_f3-105": 0.9305087924003601,
        "codebertscore_s_f1-15": 0.7591797709465027,
        "codebertscore_s_f3-15": 0.7598235607147217,
        "codebertscore_s_f1-114": 0.7753910422325134,
        "codebertscore_s_f3-114": 0.7830779552459717,
        "codebertscore_s_f1-79": 0.7632369995117188,
        "codebertscore_s_f3-79": 0.8467935919761658,
        "codebertscore_s_f1-4": 0.9657453894615173,
        "codebertscore_s_f3-4": 0.9709863066673279,
        "codebertscore_s_f1-33": 0.772312581539154,
        "codebertscore_s_f3-33": 0.7784034609794617,
        "codebertscore_s_f1-35": 0.8790025115013123,
        "codebertscore_s_f3-35": 0.8775214552879333,
        "codebertscore_s_f1-97": 0.7576177716255188,
        "codebertscore_s_f3-97": 0.7693411111831665,
        "codebertscore_s_f1-117": 0.9269837737083435,
        "codebertscore_s_f3-117": 0.9354919791221619,
        "gpt35_nsnr-126": 2,
        "raw_gpt35_nsnr-126": "2",
        "gpt35_nsnr-18": 2,
        "raw_gpt35_nsnr-18": "2",
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-158": 3,
        "raw_gpt35_nsnr-158": "3",
        "gpt35_nsnr-46": 4,
        "raw_gpt35_nsnr-46": "4",
        "gpt35_nsnr-37": 3,
        "raw_gpt35_nsnr-37": "3",
        "gpt35_nsnr-34": 4,
        "raw_gpt35_nsnr-34": "4",
        "gpt35_nsnr-21": 2,
        "raw_gpt35_nsnr-21": "2",
        "gpt35_nsnr-17": 3,
        "raw_gpt35_nsnr-17": "3",
        "gpt35_nsnr-132": 4,
        "raw_gpt35_nsnr-132": "4",
        "gpt35_nsnr-193": 2,
        "raw_gpt35_nsnr-193": "2",
        "gpt35_nsnr-105": 4,
        "raw_gpt35_nsnr-105": "4",
        "gpt35_nsnr-15": 3,
        "raw_gpt35_nsnr-15": "3",
        "gpt35_nsnr-114": 4,
        "raw_gpt35_nsnr-114": "4",
        "gpt35_nsnr-79": 4,
        "raw_gpt35_nsnr-79": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-33": 3,
        "raw_gpt35_nsnr-33": "3",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-97": 2,
        "raw_gpt35_nsnr-97": "2",
        "gpt35_nsnr-117": 4,
        "raw_gpt35_nsnr-117": "4",
        "gpt35_nswr-126": 2,
        "raw_gpt35_nswr-126": "2",
        "gpt35_nswr-18": 2,
        "raw_gpt35_nswr-18": "2",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-158": 2,
        "raw_gpt35_nswr-158": "2",
        "gpt35_nswr-46": 3,
        "raw_gpt35_nswr-46": "3",
        "gpt35_nswr-37": 2,
        "raw_gpt35_nswr-37": "2",
        "gpt35_nswr-34": 3,
        "raw_gpt35_nswr-34": "3",
        "gpt35_nswr-21": 2,
        "raw_gpt35_nswr-21": "2",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-132": 3,
        "raw_gpt35_nswr-132": "3",
        "gpt35_nswr-193": 2,
        "raw_gpt35_nswr-193": "2",
        "gpt35_nswr-105": 3,
        "raw_gpt35_nswr-105": "3",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-114": 2,
        "raw_gpt35_nswr-114": "2",
        "gpt35_nswr-79": 3,
        "raw_gpt35_nswr-79": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-33": 3,
        "raw_gpt35_nswr-33": "3",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-97": 2,
        "raw_gpt35_nswr-97": "2",
        "gpt35_nswr-117": 3,
        "raw_gpt35_nswr-117": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // sum_to_n is a function that sums numbers from 1 to n.\n    // >>> sum_to_n(30)\n    // 465\n    // >>> sum_to_n(100)\n    // 5050\n    // >>> sum_to_n(5)\n    // 15\n    // >>> sum_to_n(10)\n    // 55\n    // >>> sum_to_n(1)\n    // 1\n    public static int sumToN(int n) {\n",
        "snippet": [
            "        int result = 0;\n        for (int i = 1; i <= n; i++) {\n            result += i;\n        }\n        return result;\n    }\n}"
        ],
        "simplified": "sum_to_n is a function that sums numbers from 1 to n.",
        "task_id": "60",
        "185": "// Fill in here\n        return n*(n+1)/2;",
        "grade-185": {
            "execution": 1
        },
        "16": "// TODO: Implement the method sumToN\n        // You cannot use any loops or any multiplication or division operators (i.e., +, -, /, *)\n        // Write a recursive function that adds the numbers 1 to n.\n        if (n==1) return 1;\n        return sumToN(n-1)+n;",
        "grade-16": {
            "execution": 1
        },
        "3": "int res = n;\n        if (n != 1) {\n            res = res + sumToN(n - 1);\n        }\n        return res;",
        "grade-3": {
            "execution": 1
        },
        "60": "//INSERT YOUR CODE HERE\n        int res = 0;\n        for (int i = 0; i <= n; i++) {\n            res += i;\n        }\n        return res;",
        "grade-60": {
            "execution": 1
        },
        "50": "// TODO: Please implement this method to return the sum of numbers from 1 to n\n        // >>> sum_to_n(30)\n        // 465\n        // >>> sum_to_n(100)\n        // 5050\n        // >>> sum_to_n(5)\n        // 15\n        // >>> sum_to_n(10)\n        // 55\n        // >>> sum_to_n(1)\n        // 1\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;",
        "grade-50": {
            "execution": 1
        },
        "40": "// STUDENTS:\n        // Do not change any code above this line.\n        // Your function should be one line long.\n        // Your function must use recursion to solve this problem.\n        // Remember that a factorial of n, n!, is equal to:\n        // 1 * 2 * 3 * 4 * ... * n\n        // If you need help, watch the video titled\n        // \"Recursion\" at ece250.com.\n        if (n==1) {\n            return 1;\n        }\n        return n + sumToN(n-1);",
        "grade-40": {
            "execution": 1
        },
        "20": "// if 1 <= n <= 100, return the sum of numbers from 1 to n\n        // else, return -1\n        if (n < 1 || n > 100) {\n            return -1;\n        }\n        int sum = 0;\n        int i = 1;\n        while (i <= n) {\n            sum += i;\n            i += 1;\n        }\n        return sum;",
        "grade-20": {
            "execution": 1
        },
        "15": "return n == 1 ? 1 : sumToN(n - 1) + n;",
        "grade-15": {
            "execution": 1
        },
        "199": "return IntStream.rangeClosed(1, n).sum();",
        "grade-199": {
            "execution": 1
        },
        "152": "return n == 1 ? 1 : n + sumToN(n - 1);",
        "grade-152": {
            "execution": 1
        },
        "13": "if (n <= 0) {\n            return 0;\n        }\n        return n + sumToN(n - 1);",
        "grade-13": {
            "execution": 1
        },
        "166": "// BEGIN SOLUTION\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n        // END SOLUTION",
        "grade-166": {
            "execution": 1
        },
        "112": "int ans = 0;\n        for (int i = 1; i <= n; i++) {\n            ans += i;\n        }\n        return ans;",
        "grade-112": {
            "execution": 1
        },
        "4": "return (n * (n + 1)) / 2;",
        "grade-4": {
            "execution": 1
        },
        "39": "return ((n * (n + 1)) / 2);",
        "grade-39": {
            "execution": 1
        },
        "43": "return n;",
        "grade-43": {
            "execution": 0
        },
        "140": "// Implement this function.\n        return n*(n+1)/2;",
        "grade-140": {
            "execution": 1
        },
        "177": "// base case:\n        if (n == 1) {\n            return 1;\n        } else {\n            // recursive case:\n            return n + sumToN(n - 1);\n        }",
        "grade-177": {
            "execution": 1
        },
        "155": "// Your code here\n        return 0;",
        "grade-155": {
            "execution": 0
        },
        "36": "// YOUR CODE HERE\n        int i = 1;\n        int sum = 0;\n        while (i <= n) {\n            sum += i;\n            i++;\n        }\n        return sum;",
        "grade-36": {
            "execution": 1
        },
        "bleu-185": 0.013747412750414238,
        "bleu-16": 0.020372775155902842,
        "bleu-3": 0.09786353904824285,
        "bleu-60": 0.5809679982515488,
        "bleu-50": 0.21693044807028816,
        "bleu-40": 0.020990717372524476,
        "bleu-20": 0.15851366457674082,
        "bleu-15": 0.03356529099446197,
        "bleu-199": 0.013227698110391085,
        "bleu-152": 0.028224932874190863,
        "bleu-13": 0.07642940132004401,
        "bleu-166": 0.6221102834483426,
        "bleu-112": 0.7416119924956236,
        "bleu-4": 0.010788345312216141,
        "bleu-39": 0.012874790324150242,
        "bleu-43": 2.8600163585751713e-05,
        "bleu-140": 0.01451391980614072,
        "bleu-177": 0.04758203869726478,
        "bleu-155": 0.005370444595919494,
        "bleu-36": 0.3708163623065083,
        "codebleu-185": 0.1729169917493936,
        "codebleu-16": 0.35994087213599407,
        "codebleu-3": 0.4216555801921655,
        "codebleu-60": 0.7793507976750984,
        "codebleu-50": 0.7582678871281042,
        "codebleu-40": 0.35994087213599407,
        "codebleu-20": 0.5769695786433602,
        "codebleu-15": 0.17094840474107775,
        "codebleu-199": 0.13345578836302374,
        "codebleu-152": 0.17094840474107775,
        "codebleu-13": 0.2609466635185785,
        "codebleu-166": 0.7618209429393952,
        "codebleu-112": 0.8051176906459361,
        "codebleu-4": 0.1327216600843905,
        "codebleu-39": 0.13666536624605097,
        "codebleu-43": 0.030323238517346963,
        "codebleu-140": 0.20516169216115407,
        "codebleu-177": 0.36400591278640054,
        "codebleu-155": 0.07960857975211351,
        "codebleu-36": 0.6072751930664542,
        "chrf-185": 0.12230093480422104,
        "chrf-16": 0.15219815043000398,
        "chrf-3": 0.33125515449918375,
        "chrf-60": 0.6173318129217646,
        "chrf-50": 0.39536262466659605,
        "chrf-40": 0.14749579836426469,
        "chrf-20": 0.3161392132786504,
        "chrf-15": 0.11966911731232627,
        "chrf-199": 0.13874590266455936,
        "chrf-152": 0.11643914048747671,
        "chrf-13": 0.20233820123182356,
        "chrf-166": 0.5426602931083432,
        "chrf-112": 0.5806111914201266,
        "chrf-4": 0.09429485445740941,
        "chrf-39": 0.09353252590530482,
        "chrf-43": 0.08477765264866136,
        "chrf-140": 0.1319702346735066,
        "chrf-177": 0.1815077908546012,
        "chrf-155": 0.10583214091367481,
        "chrf-36": 0.3500922654550616,
        "rougel-185": 0.20408163265306123,
        "rougel-16": 0.16981132075471697,
        "rougel-3": 0.4126984126984127,
        "rougel-60": 0.7714285714285715,
        "rougel-50": 0.3943661971830987,
        "rougel-40": 0.1232876712328767,
        "rougel-20": 0.40366972477064217,
        "rougel-15": 0.2692307692307693,
        "rougel-199": 0.20408163265306123,
        "rougel-152": 0.2692307692307693,
        "rougel-13": 0.3157894736842105,
        "rougel-166": 0.7777777777777778,
        "rougel-112": 0.875,
        "rougel-4": 0.21739130434782608,
        "rougel-39": 0.20833333333333331,
        "rougel-43": 0.1111111111111111,
        "rougel-140": 0.19999999999999998,
        "rougel-177": 0.2857142857142857,
        "rougel-155": 0.0975609756097561,
        "rougel-36": 0.5507246376811594,
        "meteor-185": 0.11182108626198084,
        "meteor-16": 0.20270270270270271,
        "meteor-3": 0.24464831804281348,
        "meteor-60": 0.7934131736526947,
        "meteor-50": 0.686262189604906,
        "meteor-40": 0.22946836890243907,
        "meteor-20": 0.5280655494139757,
        "meteor-15": 0.1740506329113924,
        "meteor-199": 0.11182108626198084,
        "meteor-152": 0.1740506329113924,
        "meteor-13": 0.20249221183800623,
        "meteor-166": 0.8292334791059279,
        "meteor-112": 0.8494586859133897,
        "meteor-4": 0.11290322580645162,
        "meteor-39": 0.11217948717948717,
        "meteor-43": 0.05,
        "meteor-140": 0.11146496815286625,
        "meteor-177": 0.2665335994677312,
        "meteor-155": 0.04918032786885245,
        "meteor-36": 0.5602104161774943,
        "ruby-185": 0.12121212121212122,
        "ruby-16": 0.0821917808219178,
        "ruby-3": 0.33333333333333337,
        "ruby-60": 0.6756756756756757,
        "ruby-50": 0.23853211009174313,
        "ruby-40": 0.053097345132743334,
        "ruby-20": 0.21052631578947367,
        "ruby-15": 0.1515151515151515,
        "ruby-199": 0.1515151515151515,
        "ruby-152": 0.18181818181818177,
        "ruby-13": 0.12121212121212122,
        "ruby-166": 0.717948717948718,
        "ruby-112": 0.8484848484848485,
        "ruby-4": 0.1515151515151515,
        "ruby-39": 0.1515151515151515,
        "ruby-43": 0.06060606060606055,
        "ruby-140": 0.12121212121212122,
        "ruby-177": 0.1351351351351351,
        "ruby-155": 0.06060606060606055,
        "ruby-36": 0.38888888888888884,
        "codebertscore_f1-185": 0.7066355347633362,
        "codebertscore_f3-185": 0.716000497341156,
        "codebertscore_f1-16": 0.6872386932373047,
        "codebertscore_f3-16": 0.7111321687698364,
        "codebertscore_f1-3": 0.8190373778343201,
        "codebertscore_f3-3": 0.8128471970558167,
        "codebertscore_f1-60": 0.8757825493812561,
        "codebertscore_f3-60": 0.9228944182395935,
        "codebertscore_f1-50": 0.7438020706176758,
        "codebertscore_f3-50": 0.803211510181427,
        "codebertscore_f1-40": 0.6422644853591919,
        "codebertscore_f3-40": 0.6683292984962463,
        "codebertscore_f1-20": 0.7857946157455444,
        "codebertscore_f3-20": 0.8110713958740234,
        "codebertscore_f1-15": 0.7511778473854065,
        "codebertscore_f3-15": 0.7365145683288574,
        "codebertscore_f1-199": 0.7014038562774658,
        "codebertscore_f3-199": 0.7049334049224854,
        "codebertscore_f1-152": 0.7438279986381531,
        "codebertscore_f3-152": 0.7274773120880127,
        "codebertscore_f1-13": 0.7603461146354675,
        "codebertscore_f3-13": 0.7492266893386841,
        "codebertscore_f1-166": 0.8766670227050781,
        "codebertscore_f3-166": 0.9297431707382202,
        "codebertscore_f1-112": 0.9726848006248474,
        "codebertscore_f3-112": 0.9726846814155579,
        "codebertscore_f1-4": 0.7234713435173035,
        "codebertscore_f3-4": 0.7133128643035889,
        "codebertscore_f1-39": 0.7217313647270203,
        "codebertscore_f3-39": 0.7102425694465637,
        "codebertscore_f1-43": 0.6310866475105286,
        "codebertscore_f3-43": 0.5915377140045166,
        "codebertscore_f1-140": 0.7163929343223572,
        "codebertscore_f3-140": 0.7206441164016724,
        "codebertscore_f1-177": 0.7276674509048462,
        "codebertscore_f3-177": 0.7299278974533081,
        "codebertscore_f1-155": 0.6445623636245728,
        "codebertscore_f3-155": 0.6399841904640198,
        "codebertscore_f1-36": 0.8389306664466858,
        "codebertscore_f3-36": 0.8644365072250366,
        "codebertscore_s_f1-185": 0.7332461476325989,
        "codebertscore_s_f3-185": 0.7491752505302429,
        "codebertscore_s_f1-16": 0.7023605704307556,
        "codebertscore_s_f3-16": 0.7238737940788269,
        "codebertscore_s_f1-3": 0.8398451805114746,
        "codebertscore_s_f3-3": 0.8357906937599182,
        "codebertscore_s_f1-60": 0.8975437879562378,
        "codebertscore_s_f3-60": 0.9425236582756042,
        "codebertscore_s_f1-50": 0.7610834240913391,
        "codebertscore_s_f3-50": 0.8191908597946167,
        "codebertscore_s_f1-40": 0.6673393845558167,
        "codebertscore_s_f3-40": 0.6967991590499878,
        "codebertscore_s_f1-20": 0.8021005392074585,
        "codebertscore_s_f3-20": 0.8253210186958313,
        "codebertscore_s_f1-15": 0.7825950980186462,
        "codebertscore_s_f3-15": 0.7665619850158691,
        "codebertscore_s_f1-199": 0.7145780324935913,
        "codebertscore_s_f3-199": 0.7349161505699158,
        "codebertscore_s_f1-152": 0.7820652723312378,
        "codebertscore_s_f3-152": 0.7643810510635376,
        "codebertscore_s_f1-13": 0.7868674993515015,
        "codebertscore_s_f3-13": 0.7763129472732544,
        "codebertscore_s_f1-166": 0.8871908783912659,
        "codebertscore_s_f3-166": 0.944920003414154,
        "codebertscore_s_f1-112": 0.9712084531784058,
        "codebertscore_s_f3-112": 0.9712084531784058,
        "codebertscore_s_f1-4": 0.7610055804252625,
        "codebertscore_s_f3-4": 0.7505981922149658,
        "codebertscore_s_f1-39": 0.7632490992546082,
        "codebertscore_s_f3-39": 0.7523053884506226,
        "codebertscore_s_f1-43": 0.7787361741065979,
        "codebertscore_s_f3-43": 0.7217543721199036,
        "codebertscore_s_f1-140": 0.7377898693084717,
        "codebertscore_s_f3-140": 0.7493650913238525,
        "codebertscore_s_f1-177": 0.752400815486908,
        "codebertscore_s_f3-177": 0.7652719020843506,
        "codebertscore_s_f1-155": 0.6794130802154541,
        "codebertscore_s_f3-155": 0.6831161975860596,
        "codebertscore_s_f1-36": 0.8533061146736145,
        "codebertscore_s_f3-36": 0.8785696029663086,
        "gpt35_nsnr-185": 4,
        "raw_gpt35_nsnr-185": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-60": 4,
        "raw_gpt35_nsnr-60": "4",
        "gpt35_nsnr-50": 4,
        "raw_gpt35_nsnr-50": "4",
        "gpt35_nsnr-40": 4,
        "raw_gpt35_nsnr-40": "4",
        "gpt35_nsnr-20": 4,
        "raw_gpt35_nsnr-20": "4",
        "gpt35_nsnr-15": 3,
        "raw_gpt35_nsnr-15": "3",
        "gpt35_nsnr-199": 4,
        "raw_gpt35_nsnr-199": "4",
        "gpt35_nsnr-152": 4,
        "raw_gpt35_nsnr-152": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-166": 4,
        "raw_gpt35_nsnr-166": "4",
        "gpt35_nsnr-112": 4,
        "raw_gpt35_nsnr-112": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-39": 4,
        "raw_gpt35_nsnr-39": "4",
        "gpt35_nsnr-43": 1,
        "raw_gpt35_nsnr-43": "1",
        "gpt35_nsnr-140": 4,
        "raw_gpt35_nsnr-140": "4",
        "gpt35_nsnr-177": 4,
        "raw_gpt35_nsnr-177": "4",
        "gpt35_nsnr-155": 2,
        "raw_gpt35_nsnr-155": "2",
        "gpt35_nsnr-36": 4,
        "raw_gpt35_nsnr-36": "4",
        "gpt35_nswr-185": 3,
        "raw_gpt35_nswr-185": "3",
        "gpt35_nswr-16": 4,
        "raw_gpt35_nswr-16": "4",
        "gpt35_nswr-3": 4,
        "raw_gpt35_nswr-3": "4",
        "gpt35_nswr-60": 3,
        "raw_gpt35_nswr-60": "3",
        "gpt35_nswr-50": 4,
        "raw_gpt35_nswr-50": "4",
        "gpt35_nswr-40": 3,
        "raw_gpt35_nswr-40": "3",
        "gpt35_nswr-20": 4,
        "raw_gpt35_nswr-20": "4",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-199": 4,
        "raw_gpt35_nswr-199": "4",
        "gpt35_nswr-152": 4,
        "raw_gpt35_nswr-152": "4",
        "gpt35_nswr-13": 4,
        "raw_gpt35_nswr-13": "4",
        "gpt35_nswr-166": 4,
        "raw_gpt35_nswr-166": "4",
        "gpt35_nswr-112": 4,
        "raw_gpt35_nswr-112": "4",
        "gpt35_nswr-4": 4,
        "raw_gpt35_nswr-4": "4",
        "gpt35_nswr-39": 4,
        "raw_gpt35_nswr-39": "4",
        "gpt35_nswr-43": 0,
        "raw_gpt35_nswr-43": "0",
        "gpt35_nswr-140": 3,
        "raw_gpt35_nswr-140": "3",
        "gpt35_nswr-177": 4,
        "raw_gpt35_nswr-177": "4",
        "gpt35_nswr-155": 3,
        "raw_gpt35_nswr-155": "3",
        "gpt35_nswr-36": 4,
        "raw_gpt35_nswr-36": "4"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given number n, find the largest number that divides n evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public static int largestDivisor(int n) {\n",
        "snippet": [
            "        for (int i = n - 1; i > 0; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return 1;\n    }\n}"
        ],
        "simplified": "For a given number n, find the largest number that divides n evenly, smaller than n",
        "task_id": "24",
        "34": "// >>> (2 ** 15 - 1) / 15\n        // 127\n        for (int i = (int)Math.pow(2, n) - 1; i > 0; i--) {\n            if (n % i == 0) return i;\n        }\n        return 0;",
        "grade-34": {
            "execution": 0
        },
        "6": "for (int i = n - 1; i > 0; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return 1;",
        "grade-6": {
            "execution": 1
        },
        "93": "int largestDivisor = 1;\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) largestDivisor = i;\n        }\n        return largestDivisor;",
        "grade-93": {
            "execution": 1
        },
        "81": "// Write your code here.\n        int largestDivisor = 1;\n        if (n == 1) return n;\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                largestDivisor = i;\n            }\n        }\n        return largestDivisor;",
        "grade-81": {
            "execution": 1
        },
        "73": "int cur = n - 1;\n        while (n % cur != 0) cur--;\n        return cur;",
        "grade-73": {
            "execution": 1
        },
        "46": "for (int i = n - 1; i > 0; i--) {\n            if (n % i == 0) return i;\n        }\n        return 1;",
        "grade-46": {
            "execution": 1
        },
        "32": "int divisor = 1;\n        for (int i = 2; i < n / 2; i++) {\n            if (n % i == 0) {\n                divisor = i;\n            }\n        }\n        return divisor;",
        "grade-32": {
            "execution": 0
        },
        "27": "// Iterate over all numbers starting from n - 1 and going backwards to 2\n        for (int i = n - 1; i >= 2; i--) {\n            // If the number is divisible by n (modulo operator is 0), return the number\n            if (n % i == 0) return i;\n        }\n        // If no numbers are divisible, return 1\n        return 1;",
        "grade-27": {
            "execution": 1
        },
        "152": "int x = n-1;\n        for (;x > 0;x--) {\n            if (n % x == 0)\n                return x;\n        }\n        return 0;",
        "grade-152": {
            "execution": 1
        },
        "8": "int result = 1;\n        int sqrt = (int) Math.sqrt(n);\n        for (int i = 2; i <= sqrt; i++) {\n            if (n % i == 0) {\n                result = n / i;\n            }\n        }\n        return result;",
        "grade-8": {
            "execution": 0
        },
        "7": "if (n == 1) return 1;\n        return n / 2;",
        "grade-7": {
            "execution": 0
        },
        "28": "int maxDivisor = n;\n        for (int i = n - 1; i > 0; i--) {\n            if (n % i == 0) {\n                maxDivisor = i;\n                break;\n            }\n        }\n        return maxDivisor;",
        "grade-28": {
            "execution": 1
        },
        "71": "// Your code here\n        int result = 1;\n        for (int i = 1; i <= n / 2; i++) {\n            if (n % i == 0) {\n                result = i;\n            }\n        }\n        return result;",
        "grade-71": {
            "execution": 1
        },
        "75": "int largestDivisor = 0;\n        // Check if it is divisible by i, if so set largestDivisor to i\n        for (int i = 1; i < n; i++) {\n            if (n % i == 0) {\n                largestDivisor = i;\n            }\n        }\n        return largestDivisor;",
        "grade-75": {
            "execution": 1
        },
        "190": "for (int i = n - 1; i > 0; i--) {\n        if (n % i == 0) return i;\n      }\n      return 0;",
        "grade-190": {
            "execution": 1
        },
        "63": "// >>> n = 15\n        // >>> n % i\n        // 15 % 1 = 0\n        // 15 % 2 = 1\n        // 15 % 3 = 0\n        // 15 % 4 = 3\n        // 15 % 5 = 0\n        // 15 % 6 = 3\n        // 15 % 7 = 1\n        // 15 % 8 = 7\n        // 15 % 9 = 6\n        // 15 % 10 = 5\n        // 15 % 11 = 4\n        // 15 % 12 = 3\n        // 15 % 13 = 2\n        // 15 % 14 = 1\n        // 15 % 15 = 0\n        for (int i = n-1; i > 0; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return 1;",
        "grade-63": {
            "execution": 1
        },
        "151": "// Finds all of the numbers that divide n evenly (other than 1), finds the largest\n        // of these numbers, and returns it.\n        return IntStream.range(2, n)\n                        .filter(i -> n % i == 0)\n                        .reduce(0, Math::max);",
        "grade-151": {
            "execution": 0
        },
        "72": "// prime factorization using a sieve\n        boolean[] primes = new boolean[n];\n        Arrays.fill(primes, true);\n        for (int i = 2; i < n; i++) {\n            if (primes[i]) {\n                for (int j = i * 2; j < n; j += i) {\n                    primes[j] = false;\n                }\n            }\n        }\n        // if n is prime, return 1\n        if (primes[n]) return 1;\n        // otherwise, return the largest prime factor\n        for (int i = n - 1; i >= 2; i--) {\n            if (primes[i] && n % i == 0) return i;\n        }\n        return 1;",
        "grade-72": {
            "execution": 0
        },
        "166": "int i = n - 1;\n        while(i > 0 && n % i != 0) {\n            i--;\n        }\n        return i;",
        "grade-166": {
            "execution": 1
        },
        "95": "// You can assume n is a natural number greater than 1\n        // Your solution should not contain any loops\n        int divisor = n-1;\n        while(divisor > 0) {\n            if(n % divisor == 0) {\n                return divisor;\n            }\n            divisor--;\n        }\n        return 1;",
        "grade-95": {
            "execution": 1
        },
        "bleu-34": 0.4350965849720798,
        "bleu-6": 0.9459594689067659,
        "bleu-93": 0.41225057029770085,
        "bleu-81": 0.33180688972758404,
        "bleu-73": 0.15173556083295728,
        "bleu-46": 0.8237216098268466,
        "bleu-32": 0.47144557853830016,
        "bleu-27": 0.319215316106806,
        "bleu-152": 0.4121143671000803,
        "bleu-8": 0.3541948202229668,
        "bleu-7": 0.045548508486253504,
        "bleu-28": 0.650672987618075,
        "bleu-71": 0.4296391338100765,
        "bleu-75": 0.33785769382200764,
        "bleu-190": 0.7825554874010966,
        "bleu-63": 0.2217541126838899,
        "bleu-151": 0.11338082773030375,
        "bleu-72": 0.18709956371872072,
        "bleu-166": 0.34530294768936753,
        "bleu-95": 0.29168776404462515,
        "codebleu-34": 0.6730109265747822,
        "codebleu-6": 0.8697522039154956,
        "codebleu-93": 0.5586560129141042,
        "codebleu-81": 0.6337088926872069,
        "codebleu-73": 0.3081211215121717,
        "codebleu-46": 0.7489205159711945,
        "codebleu-32": 0.6111386227918787,
        "codebleu-27": 0.6451239304192798,
        "codebleu-152": 0.6330040065771645,
        "codebleu-8": 0.5792602084573127,
        "codebleu-7": 0.15670197135673405,
        "codebleu-28": 0.7374784240215961,
        "codebleu-71": 0.6128031472396082,
        "codebleu-75": 0.5961384733976035,
        "codebleu-190": 0.7417494359676571,
        "codebleu-63": 0.8044072745030957,
        "codebleu-151": 0.3585858585858585,
        "codebleu-72": 0.6771666667340775,
        "codebleu-166": 0.4391228716202154,
        "codebleu-95": 0.6083036576746901,
        "chrf-34": 0.6460934707072767,
        "chrf-6": 0.9680269825647545,
        "chrf-93": 0.4086815321845529,
        "chrf-81": 0.4560693842243342,
        "chrf-73": 0.22123037148379396,
        "chrf-46": 0.8494011789394975,
        "chrf-32": 0.4899168283909173,
        "chrf-27": 0.4410150000972052,
        "chrf-152": 0.4495340125302663,
        "chrf-8": 0.48495494516604,
        "chrf-7": 0.2573648437053098,
        "chrf-28": 0.669723956520069,
        "chrf-71": 0.5189676437227726,
        "chrf-75": 0.40323841380401076,
        "chrf-190": 0.8123049184617688,
        "chrf-63": 0.616179001167558,
        "chrf-151": 0.22012525831906335,
        "chrf-72": 0.374951971063719,
        "chrf-166": 0.38848463347729756,
        "chrf-95": 0.36300021516466896,
        "rougel-34": 0.66,
        "rougel-6": 0.972972972972973,
        "rougel-93": 0.6329113924050632,
        "rougel-81": 0.5510204081632654,
        "rougel-73": 0.49180327868852464,
        "rougel-46": 0.9444444444444444,
        "rougel-32": 0.6749999999999999,
        "rougel-27": 0.5593220338983051,
        "rougel-152": 0.7123287671232877,
        "rougel-8": 0.5744680851063829,
        "rougel-7": 0.3773584905660377,
        "rougel-28": 0.8,
        "rougel-71": 0.6511627906976745,
        "rougel-75": 0.5714285714285714,
        "rougel-190": 0.9166666666666667,
        "rougel-63": 0.3692307692307692,
        "rougel-151": 0.23529411764705882,
        "rougel-72": 0.35294117647058826,
        "rougel-166": 0.6470588235294117,
        "rougel-95": 0.5416666666666666,
        "meteor-34": 0.7681511014423242,
        "meteor-6": 0.9521053791887124,
        "meteor-93": 0.6316102389983059,
        "meteor-81": 0.7181315068776825,
        "meteor-73": 0.4026638858605489,
        "meteor-46": 0.901770595597438,
        "meteor-32": 0.7127241874752279,
        "meteor-27": 0.7459125272634841,
        "meteor-152": 0.6266747415146429,
        "meteor-8": 0.6674573820350266,
        "meteor-7": 0.25384118144299145,
        "meteor-28": 0.8284928972345025,
        "meteor-71": 0.7211538461538461,
        "meteor-75": 0.7181315068776825,
        "meteor-190": 0.8508318191587052,
        "meteor-63": 0.7212341349365398,
        "meteor-151": 0.3130541871921182,
        "meteor-72": 0.7101828530793136,
        "meteor-166": 0.6012398994719095,
        "meteor-95": 0.7464229968782518,
        "ruby-34": 0.467741935483871,
        "ruby-6": 0.9473684210526316,
        "ruby-93": 0.4878048780487805,
        "ruby-81": 0.4,
        "ruby-73": 0.39473684210526316,
        "ruby-46": 0.8947368421052632,
        "ruby-32": 0.5476190476190477,
        "ruby-27": 0.38749999999999996,
        "ruby-152": 0.6052631578947368,
        "ruby-8": 0.4107142857142857,
        "ruby-7": 0.23684210526315785,
        "ruby-28": 0.6808510638297872,
        "ruby-71": 0.5,
        "ruby-75": 0.4,
        "ruby-190": 0.868421052631579,
        "ruby-63": 0.21656050955414008,
        "ruby-151": 0.171875,
        "ruby-72": 0.19463087248322153,
        "ruby-166": 0.4736842105263158,
        "ruby-95": 0.3448275862068966,
        "codebertscore_f1-34": 0.8536598086357117,
        "codebertscore_f3-34": 0.8976448774337769,
        "codebertscore_f1-6": 0.995949387550354,
        "codebertscore_f3-6": 0.9959492683410645,
        "codebertscore_f1-93": 0.8358755111694336,
        "codebertscore_f3-93": 0.8697932362556458,
        "codebertscore_f1-81": 0.792506754398346,
        "codebertscore_f3-81": 0.8367446064949036,
        "codebertscore_f1-73": 0.8558586239814758,
        "codebertscore_f3-73": 0.8485726714134216,
        "codebertscore_f1-46": 0.9864936470985413,
        "codebertscore_f3-46": 0.9864935874938965,
        "codebertscore_f1-32": 0.8399670720100403,
        "codebertscore_f3-32": 0.8705847859382629,
        "codebertscore_f1-27": 0.820646345615387,
        "codebertscore_f3-27": 0.8878473043441772,
        "codebertscore_f1-152": 0.9190176725387573,
        "codebertscore_f3-152": 0.9190176725387573,
        "codebertscore_f1-8": 0.8112388253211975,
        "codebertscore_f3-8": 0.835440993309021,
        "codebertscore_f1-7": 0.7860046029090881,
        "codebertscore_f3-7": 0.767628014087677,
        "codebertscore_f1-28": 0.8700316548347473,
        "codebertscore_f3-28": 0.9131522178649902,
        "codebertscore_f1-71": 0.8472897410392761,
        "codebertscore_f3-71": 0.8747765421867371,
        "codebertscore_f1-75": 0.788527250289917,
        "codebertscore_f3-75": 0.8414711356163025,
        "codebertscore_f1-190": 0.9689695239067078,
        "codebertscore_f3-190": 0.9689695835113525,
        "codebertscore_f1-63": 0.7335147857666016,
        "codebertscore_f3-63": 0.7922052145004272,
        "codebertscore_f1-151": 0.7144836187362671,
        "codebertscore_f3-151": 0.7546351552009583,
        "codebertscore_f1-72": 0.7548522353172302,
        "codebertscore_f3-72": 0.815352201461792,
        "codebertscore_f1-166": 0.8882008790969849,
        "codebertscore_f3-166": 0.8855472803115845,
        "codebertscore_f1-95": 0.7753120064735413,
        "codebertscore_f3-95": 0.8211979269981384,
        "codebertscore_s_f1-34": 0.8662079572677612,
        "codebertscore_s_f3-34": 0.9095191359519958,
        "codebertscore_s_f1-6": 0.9976325035095215,
        "codebertscore_s_f3-6": 0.9976324439048767,
        "codebertscore_s_f1-93": 0.8545077443122864,
        "codebertscore_s_f3-93": 0.8897161483764648,
        "codebertscore_s_f1-81": 0.8093386292457581,
        "codebertscore_s_f3-81": 0.853071928024292,
        "codebertscore_s_f1-73": 0.8794923424720764,
        "codebertscore_s_f3-73": 0.8721402883529663,
        "codebertscore_s_f1-46": 0.9877427816390991,
        "codebertscore_s_f3-46": 0.9877428412437439,
        "codebertscore_s_f1-32": 0.8633230924606323,
        "codebertscore_s_f3-32": 0.8929013013839722,
        "codebertscore_s_f1-27": 0.8363040685653687,
        "codebertscore_s_f3-27": 0.9058426022529602,
        "codebertscore_s_f1-152": 0.9317659139633179,
        "codebertscore_s_f3-152": 0.9317659735679626,
        "codebertscore_s_f1-8": 0.8410366773605347,
        "codebertscore_s_f3-8": 0.8660795092582703,
        "codebertscore_s_f1-7": 0.8129205703735352,
        "codebertscore_s_f3-7": 0.7903363704681396,
        "codebertscore_s_f1-28": 0.881669282913208,
        "codebertscore_s_f3-28": 0.9244634509086609,
        "codebertscore_s_f1-71": 0.8608950972557068,
        "codebertscore_s_f3-71": 0.8905583620071411,
        "codebertscore_s_f1-75": 0.7990739345550537,
        "codebertscore_s_f3-75": 0.8479282259941101,
        "codebertscore_s_f1-190": 0.9708291888237,
        "codebertscore_s_f3-190": 0.9708825349807739,
        "codebertscore_s_f1-63": 0.7514781355857849,
        "codebertscore_s_f3-63": 0.8084561824798584,
        "codebertscore_s_f1-151": 0.7275058627128601,
        "codebertscore_s_f3-151": 0.766864538192749,
        "codebertscore_s_f1-72": 0.7670570015907288,
        "codebertscore_s_f3-72": 0.8240560293197632,
        "codebertscore_s_f1-166": 0.9097362756729126,
        "codebertscore_s_f3-166": 0.9065936803817749,
        "codebertscore_s_f1-95": 0.7952935695648193,
        "codebertscore_s_f3-95": 0.8410483598709106,
        "gpt35_nsnr-34": 2,
        "raw_gpt35_nsnr-34": "2",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-93": 4,
        "raw_gpt35_nsnr-93": "4",
        "gpt35_nsnr-81": 3,
        "raw_gpt35_nsnr-81": "3",
        "gpt35_nsnr-73": 3,
        "raw_gpt35_nsnr-73": "3",
        "gpt35_nsnr-46": 4,
        "raw_gpt35_nsnr-46": "4",
        "gpt35_nsnr-32": 3,
        "raw_gpt35_nsnr-32": "3",
        "gpt35_nsnr-27": 4,
        "raw_gpt35_nsnr-27": "4",
        "gpt35_nsnr-152": 3,
        "raw_gpt35_nsnr-152": "3",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 2,
        "raw_gpt35_nsnr-7": "2",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-71": 4,
        "raw_gpt35_nsnr-71": "4",
        "gpt35_nsnr-75": 4,
        "raw_gpt35_nsnr-75": "4",
        "gpt35_nsnr-190": 4,
        "raw_gpt35_nsnr-190": "4",
        "gpt35_nsnr-63": 4,
        "raw_gpt35_nsnr-63": "4",
        "gpt35_nsnr-151": 3,
        "raw_gpt35_nsnr-151": "3",
        "gpt35_nsnr-72": 3,
        "raw_gpt35_nsnr-72": "3",
        "gpt35_nsnr-166": 3,
        "raw_gpt35_nsnr-166": "3",
        "gpt35_nsnr-95": 4,
        "raw_gpt35_nsnr-95": "4",
        "gpt35_nswr-34": 2,
        "raw_gpt35_nswr-34": "2",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-93": 3,
        "raw_gpt35_nswr-93": "3",
        "gpt35_nswr-81": 4,
        "raw_gpt35_nswr-81": "4",
        "gpt35_nswr-73": 3,
        "raw_gpt35_nswr-73": "3",
        "gpt35_nswr-46": 4,
        "raw_gpt35_nswr-46": "4",
        "gpt35_nswr-32": 3,
        "raw_gpt35_nswr-32": "3",
        "gpt35_nswr-27": 4,
        "raw_gpt35_nswr-27": "4",
        "gpt35_nswr-152": 3,
        "raw_gpt35_nswr-152": "3",
        "gpt35_nswr-8": 2,
        "raw_gpt35_nswr-8": "2",
        "gpt35_nswr-7": 1,
        "raw_gpt35_nswr-7": "1",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-71": 3,
        "raw_gpt35_nswr-71": "3",
        "gpt35_nswr-75": 4,
        "raw_gpt35_nswr-75": "4",
        "gpt35_nswr-190": 3,
        "raw_gpt35_nswr-190": "3",
        "gpt35_nswr-63": 4,
        "raw_gpt35_nswr-63": "4",
        "gpt35_nswr-151": 3,
        "raw_gpt35_nswr-151": "3",
        "gpt35_nswr-72": 2,
        "raw_gpt35_nswr-72": "2",
        "gpt35_nswr-166": 4,
        "raw_gpt35_nswr-166": "4",
        "gpt35_nswr-95": 4,
        "raw_gpt35_nswr-95": "4"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given length of a side and high return area for a triangle.\n    // >>> triangle_area(5, 3)\n    // 7.5\n    public static float triangleArea(int a, int h) {\n",
        "snippet": [
            "        return a * h / 2;\n    }\n}"
        ],
        "simplified": "Given length of a side and high return area for a triangle.",
        "task_id": "45",
        "17": "// ...",
        "grade-17": {
            "execution": 0
        },
        "3": "return (float) a * h / 2;",
        "grade-3": {
            "execution": 1
        },
        "97": "return (float) 0.5 * a * h;",
        "grade-97": {
            "execution": 1
        },
        "21": "float area = (float) (a * h / 2.0);\n        return area;",
        "grade-21": {
            "execution": 1
        },
        "19": "return (a * h) / 2.0f;",
        "grade-19": {
            "execution": 1
        },
        "187": "// (1/2)*a*h\n        return (float) (0.5 * a * h);",
        "grade-187": {
            "execution": 1
        },
        "10": "float result = a * h / 2.0f;\n        return result;",
        "grade-10": {
            "execution": 1
        },
        "163": "float area = 0.5f * a * h;\n        return area;",
        "grade-163": {
            "execution": 1
        },
        "6": "return (float) (a * h) / 2;",
        "grade-6": {
            "execution": 1
        },
        "87": "// WRITE YOUR CODE HERE\n        return 0;",
        "grade-87": {
            "execution": 0
        },
        "135": "float result = 0.5f * a * h;\n        return result;",
        "grade-135": {
            "execution": 1
        },
        "58": "return (float) (0.5*a*h);",
        "grade-58": {
            "execution": 1
        },
        "5": "return (float) (0.5 * a * h);",
        "grade-5": {
            "execution": 1
        },
        "73": "return (float) a*h/2;",
        "grade-73": {
            "execution": 1
        },
        "46": "//return ...;\n        return (float)a*h/2;",
        "grade-46": {
            "execution": 1
        },
        "2": "float area = (a * h) / 2;\n        return area;",
        "grade-2": {
            "execution": 0
        },
        "1": "return (a * h) / 2;",
        "grade-1": {
            "execution": 0
        },
        "116": "return (float) ((1.0 / 2.0) * a * h);",
        "grade-116": {
            "execution": 1
        },
        "16": "return (a*h)/2.0f;",
        "grade-16": {
            "execution": 1
        },
        "146": "return (float) ((float)a * (float)h * (1.0/2.0));",
        "grade-146": {
            "execution": 1
        },
        "bleu-17": 0.047998106991192106,
        "bleu-3": 0.537284965911771,
        "bleu-97": 0.14323145079400493,
        "bleu-21": 0.20614773521563748,
        "bleu-19": 0.19081654556856684,
        "bleu-187": 0.07668702374725506,
        "bleu-10": 0.2891784933232572,
        "bleu-163": 0.12011055432195765,
        "bleu-6": 0.2203359678996931,
        "bleu-87": 0.06274655310994741,
        "bleu-135": 0.12011055432195765,
        "bleu-58": 0.12011055432195765,
        "bleu-5": 0.12011055432195765,
        "bleu-73": 0.537284965911771,
        "bleu-46": 0.2928298013714698,
        "bleu-2": 0.18476860420522187,
        "bleu-1": 0.3102016197007,
        "bleu-116": 0.0974812453975988,
        "bleu-16": 0.19081654556856684,
        "bleu-146": 0.046994431862176785,
        "codebleu-17": 0.0,
        "codebleu-3": 0.5543386754704853,
        "codebleu-97": 0.35347985347985345,
        "codebleu-21": 0.48250880413589375,
        "codebleu-19": 0.4615384615384615,
        "codebleu-187": 0.4743589743589743,
        "codebleu-10": 0.4879459637672431,
        "codebleu-163": 0.35347985347985345,
        "codebleu-6": 0.5219780219780219,
        "codebleu-87": 0.315018315018315,
        "codebleu-135": 0.35347985347985345,
        "codebleu-58": 0.35347985347985345,
        "codebleu-5": 0.35347985347985345,
        "codebleu-73": 0.5543386754704853,
        "codebleu-46": 0.5201919342810145,
        "codebleu-2": 0.5219780219780219,
        "codebleu-1": 0.5219780219780219,
        "codebleu-116": 0.4139194139194139,
        "codebleu-16": 0.4615384615384615,
        "codebleu-146": 0.4139194139194139,
        "chrf-17": 0.01639344262295082,
        "chrf-3": 0.5323830860914862,
        "chrf-97": 0.33717551616165053,
        "chrf-21": 0.4126608056609339,
        "chrf-19": 0.3931210592580678,
        "chrf-187": 0.31204091232194814,
        "chrf-10": 0.3768910105448328,
        "chrf-163": 0.35766954426087383,
        "chrf-6": 0.39441645539456816,
        "chrf-87": 0.25727312258407586,
        "chrf-135": 0.2836932523942522,
        "chrf-58": 0.32765408256010337,
        "chrf-5": 0.32765408256010337,
        "chrf-73": 0.5323830860914862,
        "chrf-46": 0.44987197413600816,
        "chrf-2": 0.4139847081362369,
        "chrf-1": 0.4388814888814888,
        "chrf-116": 0.3321486914792626,
        "chrf-16": 0.3931210592580678,
        "chrf-146": 0.2631699918321927,
        "rougel-17": 0.14285714285714285,
        "rougel-3": 0.7368421052631577,
        "rougel-97": 0.4761904761904762,
        "rougel-21": 0.42857142857142855,
        "rougel-19": 0.7000000000000001,
        "rougel-187": 0.29411764705882354,
        "rougel-10": 0.5217391304347826,
        "rougel-163": 0.34782608695652173,
        "rougel-6": 0.6666666666666666,
        "rougel-87": 0.2222222222222222,
        "rougel-135": 0.34782608695652173,
        "rougel-58": 0.43478260869565216,
        "rougel-5": 0.43478260869565216,
        "rougel-73": 0.7368421052631577,
        "rougel-46": 0.5384615384615384,
        "rougel-2": 0.5217391304347826,
        "rougel-1": 0.7777777777777778,
        "rougel-116": 0.3448275862068966,
        "rougel-16": 0.7000000000000001,
        "rougel-146": 0.39999999999999997,
        "meteor-17": 0.05813953488372093,
        "meteor-3": 0.7602601480152501,
        "meteor-97": 0.4795698924731184,
        "meteor-21": 0.6724489795918367,
        "meteor-19": 0.6898846495119787,
        "meteor-187": 0.5987678090103965,
        "meteor-10": 0.7078410311493017,
        "meteor-163": 0.4694736842105264,
        "meteor-6": 0.7230634189159536,
        "meteor-87": 0.16666666666666666,
        "meteor-135": 0.4694736842105264,
        "meteor-58": 0.4694736842105264,
        "meteor-5": 0.4694736842105264,
        "meteor-73": 0.7602601480152501,
        "meteor-46": 0.7059558517284464,
        "meteor-2": 0.6680988184747583,
        "meteor-1": 0.7471655328798186,
        "meteor-116": 0.6284097797534854,
        "meteor-16": 0.6898846495119787,
        "meteor-146": 0.44821666984550834,
        "ruby-17": 0.11111111111111116,
        "ruby-3": 0.5,
        "ruby-97": 0.08333333333333337,
        "ruby-21": 0.3157894736842105,
        "ruby-19": 0.5454545454545454,
        "ruby-187": 0.12,
        "ruby-10": 0.4285714285714286,
        "ruby-163": 0.1428571428571429,
        "ruby-6": 0.41666666666666663,
        "ruby-87": 0.0,
        "ruby-135": 0.1428571428571429,
        "ruby-58": 0.1428571428571429,
        "ruby-5": 0.1428571428571429,
        "ruby-73": 0.5,
        "ruby-46": 0.2941176470588235,
        "ruby-2": 0.4285714285714286,
        "ruby-1": 0.5555555555555556,
        "ruby-116": 0.15000000000000002,
        "ruby-16": 0.5454545454545454,
        "ruby-146": 0.23076923076923073,
        "codebertscore_f1-17": 0.5948377847671509,
        "codebertscore_f3-17": 0.5685905814170837,
        "codebertscore_f1-3": 0.9430923461914062,
        "codebertscore_f3-3": 0.9593563675880432,
        "codebertscore_f1-97": 0.8627302646636963,
        "codebertscore_f3-97": 0.8716995120048523,
        "codebertscore_f1-21": 0.8529134392738342,
        "codebertscore_f3-21": 0.887676477432251,
        "codebertscore_f1-19": 0.8907783627510071,
        "codebertscore_f3-19": 0.9203611016273499,
        "codebertscore_f1-187": 0.8282666206359863,
        "codebertscore_f3-187": 0.8539995551109314,
        "codebertscore_f1-10": 0.8658036589622498,
        "codebertscore_f3-10": 0.9098876118659973,
        "codebertscore_f1-163": 0.8215177059173584,
        "codebertscore_f3-163": 0.8406280279159546,
        "codebertscore_f1-6": 0.9101701378822327,
        "codebertscore_f3-6": 0.9244971871376038,
        "codebertscore_f1-87": 0.6776924729347229,
        "codebertscore_f3-87": 0.6842060685157776,
        "codebertscore_f1-135": 0.8185986876487732,
        "codebertscore_f3-135": 0.8415958285331726,
        "codebertscore_f1-58": 0.8296566009521484,
        "codebertscore_f3-58": 0.8350057601928711,
        "codebertscore_f1-5": 0.8618419170379639,
        "codebertscore_f3-5": 0.871339738368988,
        "codebertscore_f1-73": 0.9137713313102722,
        "codebertscore_f3-73": 0.9279635548591614,
        "codebertscore_f1-46": 0.8596878051757812,
        "codebertscore_f3-46": 0.8861773610115051,
        "codebertscore_f1-2": 0.8790929317474365,
        "codebertscore_f3-2": 0.8986888527870178,
        "codebertscore_f1-1": 0.9407548904418945,
        "codebertscore_f3-1": 0.9407548904418945,
        "codebertscore_f1-116": 0.8611215949058533,
        "codebertscore_f3-116": 0.8909828662872314,
        "codebertscore_f1-16": 0.8603406548500061,
        "codebertscore_f3-16": 0.8859973549842834,
        "codebertscore_f1-146": 0.8282927870750427,
        "codebertscore_f3-146": 0.8691558837890625,
        "codebertscore_s_f1-17": 0.6236840486526489,
        "codebertscore_s_f3-17": 0.5958181619644165,
        "codebertscore_s_f1-3": 0.9597628712654114,
        "codebertscore_s_f3-3": 0.9752097129821777,
        "codebertscore_s_f1-97": 0.8817967772483826,
        "codebertscore_s_f3-97": 0.8908126354217529,
        "codebertscore_s_f1-21": 0.8866271376609802,
        "codebertscore_s_f3-21": 0.9260497689247131,
        "codebertscore_s_f1-19": 0.9244251847267151,
        "codebertscore_s_f3-19": 0.9540174007415771,
        "codebertscore_s_f1-187": 0.8646947145462036,
        "codebertscore_s_f3-187": 0.8939538598060608,
        "codebertscore_s_f1-10": 0.890055239200592,
        "codebertscore_s_f3-10": 0.9364346265792847,
        "codebertscore_s_f1-163": 0.8393814563751221,
        "codebertscore_s_f3-163": 0.8624966740608215,
        "codebertscore_s_f1-6": 0.9415773153305054,
        "codebertscore_s_f3-6": 0.9564731121063232,
        "codebertscore_s_f1-87": 0.664395809173584,
        "codebertscore_s_f3-87": 0.6912760734558105,
        "codebertscore_s_f1-135": 0.8366021513938904,
        "codebertscore_s_f3-135": 0.8608220815658569,
        "codebertscore_s_f1-58": 0.8607829809188843,
        "codebertscore_s_f3-58": 0.8683669567108154,
        "codebertscore_s_f1-5": 0.8748664259910583,
        "codebertscore_s_f3-5": 0.8832967281341553,
        "codebertscore_s_f1-73": 0.9359456300735474,
        "codebertscore_s_f3-73": 0.9500095248222351,
        "codebertscore_s_f1-46": 0.8931142091751099,
        "codebertscore_s_f3-46": 0.9237472414970398,
        "codebertscore_s_f1-2": 0.9054814577102661,
        "codebertscore_s_f3-2": 0.9330179691314697,
        "codebertscore_s_f1-1": 0.9737376570701599,
        "codebertscore_s_f3-1": 0.9737377166748047,
        "codebertscore_s_f1-116": 0.8855340480804443,
        "codebertscore_s_f3-116": 0.9161033630371094,
        "codebertscore_s_f1-16": 0.894959568977356,
        "codebertscore_s_f3-16": 0.9204789400100708,
        "codebertscore_s_f1-146": 0.8597630262374878,
        "codebertscore_s_f3-146": 0.9014198780059814,
        "gpt35_nsnr-17": 0,
        "raw_gpt35_nsnr-17": "3 - The code snippet defines a function that takes in two integer parameters representing the length of a side and the height of a triangle, respectively. It then calculates and returns the area of the triangle using the formula (a*h)/2. The function does not have any input validation or error handling, but it correctly implements the required functionality for calculating the area of a triangle given its side length and height.",
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-97": 4,
        "raw_gpt35_nsnr-97": "4",
        "gpt35_nsnr-21": 4,
        "raw_gpt35_nsnr-21": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nsnr-187": 4,
        "raw_gpt35_nsnr-187": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-163": 4,
        "raw_gpt35_nsnr-163": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-87": 2,
        "raw_gpt35_nsnr-87": "2",
        "gpt35_nsnr-135": 4,
        "raw_gpt35_nsnr-135": "4",
        "gpt35_nsnr-58": 4,
        "raw_gpt35_nsnr-58": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-73": 4,
        "raw_gpt35_nsnr-73": "4",
        "gpt35_nsnr-46": 4,
        "raw_gpt35_nsnr-46": "4",
        "gpt35_nsnr-2": 3,
        "raw_gpt35_nsnr-2": "3",
        "gpt35_nsnr-1": 4,
        "raw_gpt35_nsnr-1": "4",
        "gpt35_nsnr-116": 4,
        "raw_gpt35_nsnr-116": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-146": 4,
        "raw_gpt35_nsnr-146": "4",
        "gpt35_nswr-17": 4,
        "raw_gpt35_nswr-17": "4",
        "gpt35_nswr-3": 4,
        "raw_gpt35_nswr-3": "4",
        "gpt35_nswr-97": 4,
        "raw_gpt35_nswr-97": "4",
        "gpt35_nswr-21": 4,
        "raw_gpt35_nswr-21": "4",
        "gpt35_nswr-19": 4,
        "raw_gpt35_nswr-19": "4",
        "gpt35_nswr-187": 4,
        "raw_gpt35_nswr-187": "4",
        "gpt35_nswr-10": 4,
        "raw_gpt35_nswr-10": "4",
        "gpt35_nswr-163": 4,
        "raw_gpt35_nswr-163": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-87": 4,
        "raw_gpt35_nswr-87": "4",
        "gpt35_nswr-135": 4,
        "raw_gpt35_nswr-135": "4",
        "gpt35_nswr-58": 4,
        "raw_gpt35_nswr-58": "4",
        "gpt35_nswr-5": 4,
        "raw_gpt35_nswr-5": "4",
        "gpt35_nswr-73": 4,
        "raw_gpt35_nswr-73": "4",
        "gpt35_nswr-46": 4,
        "raw_gpt35_nswr-46": "4",
        "gpt35_nswr-2": 4,
        "raw_gpt35_nswr-2": "4",
        "gpt35_nswr-1": 4,
        "raw_gpt35_nswr-1": "4",
        "gpt35_nswr-116": 4,
        "raw_gpt35_nswr-116": "4",
        "gpt35_nswr-16": 4,
        "raw_gpt35_nswr-16": "4",
        "gpt35_nswr-146": 4,
        "raw_gpt35_nswr-146": "4"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    // as follows: start with any positive integer n. Then each term is obtained from the \n    // previous term as follows: if the previous term is even, the next term is one half of \n    // the previous term. If the previous term is odd, the next term is 3 times the previous\n    // term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1) is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    public static ArrayList<Integer> getOddCollatz(int n) {\n",
        "snippet": [
            "        List<Integer> odd_collatz = new ArrayList<>();\n        if (n % 2 == 1) {\n            odd_collatz.add(n);\n        }\n        while (n > 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = n * 3 + 1;\n            }\n            if (n % 2 == 1) {\n                odd_collatz.add(n);\n            }\n        }\n        Collections.sort(odd_collatz);\n        return odd_collatz;\n    }\n}"
        ],
        "simplified": "Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence. The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined as follows: start with any positive integer n. Then each term is obtained from the previous term as follows: if the previous term is even, the next term is one half of the previous term. If the previous term is odd, the next term is 3 times the previous term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1. Note: 1. Collatz(1) is [1]. 2. returned list sorted in increasing order.",
        "task_id": "123",
        "170": "if (n <= 0) {\n            return new ArrayList<Integer>();\n        }\n        ArrayList<Integer> sequence = new ArrayList<Integer>();\n        sequence.add(n);\n        while (n != 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = n * 3 + 1;\n            }\n            sequence.add(n);\n        }\n        ArrayList<Integer> odds = new ArrayList<Integer>();\n        for (int i : sequence) {\n            if (i % 2 == 1) {\n                odds.add(i);\n            }\n        }\n        return odds;",
        "grade-170": {
            "execution": 0
        },
        "28": "ArrayList<Integer> list = new ArrayList<Integer>();\n        if (n < 1) {\n            return list;\n        }\n        list.add(n);\n        while (n != 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = n * 3 + 1;\n            }\n            list.add(n);\n        }\n        ArrayList<Integer> results = new ArrayList<Integer>();\n        for (int i = 0; i < list.size(); i++) {\n            if (list.get(i) % 2 != 0) {\n                results.add(list.get(i));\n            }\n        }\n        return results;",
        "grade-28": {
            "execution": 0
        },
        "6": "ArrayList<Integer> result = new ArrayList<Integer>();\n        result.add(n);\n        while (n != 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n            if (n % 2 != 0) {\n                result.add(n);\n            }\n        }\n        return result;",
        "grade-6": {
            "execution": 0
        },
        "197": "ArrayList<Integer> oddCollatz = new ArrayList<Integer>();\n        if (n == 1) {\n            oddCollatz.add(1);\n            return oddCollatz;\n        }\n        ArrayList<Integer> collatzSeq = getCollatz(n);\n        for (int i = 0; i < collatzSeq.size(); i++) {\n            if (collatzSeq.get(i) % 2 != 0) {\n                oddCollatz.add(collatzSeq.get(i));\n            }\n        }\n        return oddCollatz;",
        "grade-197": {
            "execution": 0
        },
        "72": "if (n <= 0)\n            return new ArrayList<Integer>();\n        ArrayList<Integer> collatz = new ArrayList<Integer>();\n        HashSet<Integer> collatzSet = new HashSet<Integer>();\n        int cur = n;\n        while (cur != 1) {\n            if (cur % 2 == 1) {\n                collatz.add(cur);\n                collatzSet.add(cur);\n            }\n            cur = cur % 2 == 0 ? cur / 2 : 3 * cur + 1;\n        }\n        collatz.add(1);\n        collatzSet.add(1);\n        ArrayList<Integer> ans = new ArrayList<Integer>();\n        int i = 0;\n        while (i < collatz.size()) {\n            int el = collatz.get(i);\n            if (el % 2 == 1) {\n                ans.add(el);\n            }\n            i++;\n        }\n        return ans;",
        "grade-72": {
            "execution": 0
        },
        "63": "ArrayList<Integer> ans = new ArrayList<>();\n        while (n > 1) {\n            ans.add(n);\n            if (n % 2 == 0) n /= 2;\n            else n = n * 3 + 1;\n        }\n        ans.add(1);\n        return ans;",
        "grade-63": {
            "execution": 0
        },
        "58": "ArrayList<Integer> collatz = new ArrayList<Integer>();\n        ArrayList<Integer> oddCollatz = new ArrayList<Integer>();\n        int i = n;\n        int counter = 0;\n        //Generate Collatz sequence\n        while(i != 1){\n            collatz.add(i);\n            if(i % 2 == 0){\n                i = i / 2;\n            }\n            else{\n                i = 3 * i + 1;\n            }\n        }\n        //Get odd numbers\n        for(int j = 0; j < collatz.size(); j++){\n            if(collatz.get(j) % 2 != 0){\n                oddCollatz.add(collatz.get(j));\n            }\n        }\n        return oddCollatz;",
        "grade-58": {
            "execution": 0
        },
        "35": "// You have to fill in the details here.\n        ArrayList<Integer> collatz = new ArrayList<Integer>();\n        while (n > 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n            collatz.add(n);\n        }\n        return collatz;",
        "grade-35": {
            "execution": 0
        },
        "196": "// TODO: Implement your solution here.\n        throw new UnsupportedOperationException(\"Not implemented yet\");",
        "grade-196": {
            "execution": 0
        },
        "26": "assert n >= 1;\n        ArrayList<Integer> list = new ArrayList<>();\n        int val = n;\n        do {\n            if (val % 2 == 1) {\n                list.add(val);\n            }\n            if (val % 2 == 0) {\n                val /= 2;\n            } else {\n                val = 3 * val + 1;\n            }\n        } while (val != 1);\n        list.add(1);\n        return list;",
        "grade-26": {
            "execution": 0
        },
        "180": "ArrayList<Integer> output = new ArrayList<Integer>();\n        while (n != 1) {\n            output.add(n);\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n        }\n        output.add(1);\n        return output;",
        "grade-180": {
            "execution": 0
        },
        "144": "if (n <= 0) {\n            throw new IllegalArgumentException(\"n must be positive!\");\n        }\n        ArrayList<Integer> res = new ArrayList<>();\n        HashSet<Integer> visited = new HashSet<>();\n        int curr = n;\n        while (curr != 1) {\n            if (visited.contains(curr)) {\n                throw new IllegalArgumentException(\"The given integer is not in Collatz Sequence!\");\n            }\n            visited.add(curr);\n            if (curr % 2 == 1) {\n                res.add(curr);\n            }\n            curr = curr % 2 == 0 ? curr / 2 : curr * 3 + 1;\n        }\n        res.add(1);\n        return res;",
        "grade-144": {
            "execution": 0
        },
        "22": "ArrayList<Integer> ans = new ArrayList<>();\n        HashSet<Integer> odd_nums = new HashSet<>();\n        while (n > 1) {\n            if (n % 2 == 1) {\n                odd_nums.add(n);\n            }\n            n = n % 2 == 0 ? n / 2 : 3 * n + 1;\n        }\n        odd_nums.add(1);\n        for (int i : odd_nums) {\n            ans.add(i);\n        }\n        return ans;",
        "grade-22": {
            "execution": 0
        },
        "157": "ArrayList<Integer> result = new ArrayList<Integer>();\n        // write your code here\n        while (n != 1) {\n            if (n % 2 == 1) {\n                result.add(n);\n            }\n            n = (n % 2 == 0) ? n / 2 : 3 * n + 1;\n        }\n        result.add(1);\n        return result;",
        "grade-157": {
            "execution": 0
        },
        "110": "ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            int num = i;\n            int count = 0;\n            while (num != 1) {\n                if (num % 2 == 0) {\n                    num = num / 2;\n                } else {\n                    num = num * 3 + 1;\n                }\n                count++;\n            }\n            // count is the number of times you have to run the while loop to get to 1.\n            // if count is odd, then it means i generated an odd number (at least 1, since 1 is odd).\n            if (count % 2 == 1) {\n                result.add(i);\n            }\n        }\n        return result;",
        "grade-110": {
            "execution": 0
        },
        "8": "ArrayList<Integer> res = new ArrayList<>();\n        while (n != 1) {\n            if (n % 2 == 1) {\n                res.add(n);\n            }\n            n = n % 2 == 0 ? n / 2 : 3 * n + 1;\n        }\n        res.add(1);\n        return res;",
        "grade-8": {
            "execution": 0
        },
        "7": "ArrayList<Integer> list = new ArrayList<Integer>();\n        list.add(n);\n        while (n != 1) {\n            if (n % 2 == 0)\n                n = n / 2;\n            else\n                n = 3 * n + 1;\n            if (n != 1 && n % 2 != 0)\n                list.add(n);\n        }\n        list.add(1);\n        return list;",
        "grade-7": {
            "execution": 0
        },
        "23": "ArrayList<Integer> result = new ArrayList<Integer>();\n        // Initialize collatz list with n.\n        ArrayList<Integer> collatz = new ArrayList<Integer>();\n        collatz.add(n);\n        int current = n;\n        while (current != 1) {\n            // If odd add to result and divide by 2.\n            if (current % 2 == 1) {\n                result.add(current);\n                current = current / 2;\n            }\n            // Else, multiply by 3 and add 1.\n            else {\n                current = current * 3 + 1;\n            }\n            collatz.add(current);\n        }\n        result.add(1);\n        return result;",
        "grade-23": {
            "execution": 0
        },
        "56": "ArrayList<Integer> collatz = new ArrayList<Integer>();\n        ArrayList<Integer> oddCollatz = new ArrayList<Integer>();\n        collatz.add(n);\n        while (n != 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n            collatz.add(n);\n        }\n        for (int i = 0; i < collatz.size(); i++) {\n            if (collatz.get(i) % 2 != 0) {\n                oddCollatz.add(collatz.get(i));\n            }\n        }\n        return oddCollatz;",
        "grade-56": {
            "execution": 0
        },
        "60": "ArrayList<Integer> list = new ArrayList<Integer>();\n        while (n > 1) {\n            if (n % 2 == 1) list.add(n);\n            n = n % 2 == 0 ? n / 2 : n * 3 + 1;\n        }\n        list.add(1);\n        return list;",
        "grade-60": {
            "execution": 0
        },
        "bleu-170": 0.4726624148199186,
        "bleu-28": 0.41743406427085816,
        "bleu-6": 0.5403246062354108,
        "bleu-197": 0.2730563526996287,
        "bleu-72": 0.20681574442448006,
        "bleu-63": 0.3778622846391939,
        "bleu-58": 0.2379332963351581,
        "bleu-35": 0.43345823687245966,
        "bleu-196": 0.0014367092715415674,
        "bleu-26": 0.40487995273105376,
        "bleu-180": 0.4278993546143062,
        "bleu-144": 0.2765279077925645,
        "bleu-22": 0.4606129479913142,
        "bleu-157": 0.4185970145059833,
        "bleu-110": 0.26284580102030236,
        "bleu-8": 0.4084087966740957,
        "bleu-7": 0.4482421864949946,
        "bleu-23": 0.25196798256855835,
        "bleu-56": 0.3794759655017025,
        "bleu-60": 0.40934364248469296,
        "codebleu-170": 0.7284133984872604,
        "codebleu-28": 0.7257735158435283,
        "codebleu-6": 0.6060865242713769,
        "codebleu-197": 0.527341342822949,
        "codebleu-72": 0.6997500383417532,
        "codebleu-63": 0.45895831800075276,
        "codebleu-58": 0.6569660329646267,
        "codebleu-35": 0.4900072916149646,
        "codebleu-196": 0.058077848171362405,
        "codebleu-26": 0.5823410756048611,
        "codebleu-180": 0.5014454371669115,
        "codebleu-144": 0.668573504220312,
        "codebleu-22": 0.6545090649623219,
        "codebleu-157": 0.5318839236135952,
        "codebleu-110": 0.6485238855122767,
        "codebleu-8": 0.48046185824279525,
        "codebleu-7": 0.5903357242820955,
        "codebleu-23": 0.6156864067463107,
        "codebleu-56": 0.6768374011696123,
        "codebleu-60": 0.4654057826542597,
        "chrf-170": 0.48169194412821503,
        "chrf-28": 0.43940163788341347,
        "chrf-6": 0.4460071612144201,
        "chrf-197": 0.4794468316399787,
        "chrf-72": 0.421174514455913,
        "chrf-63": 0.38869715423940404,
        "chrf-58": 0.4830441178050562,
        "chrf-35": 0.4957832628053037,
        "chrf-196": 0.08313918186410628,
        "chrf-26": 0.3792948182585021,
        "chrf-180": 0.41086455055954085,
        "chrf-144": 0.3498032709099265,
        "chrf-22": 0.44074257641701087,
        "chrf-157": 0.36704223779069034,
        "chrf-110": 0.36152119196270427,
        "chrf-8": 0.3715701457338964,
        "chrf-7": 0.38993768122321076,
        "chrf-23": 0.4090266280113211,
        "chrf-56": 0.5749378123587326,
        "chrf-60": 0.3829743566805067,
        "rougel-170": 0.6173913043478261,
        "rougel-28": 0.6147540983606556,
        "rougel-6": 0.770949720670391,
        "rougel-197": 0.5024154589371982,
        "rougel-72": 0.40689655172413797,
        "rougel-63": 0.670807453416149,
        "rougel-58": 0.5060240963855422,
        "rougel-35": 0.6432748538011696,
        "rougel-196": 0.08333333333333334,
        "rougel-26": 0.631578947368421,
        "rougel-180": 0.6904761904761905,
        "rougel-144": 0.40800000000000003,
        "rougel-22": 0.5728643216080402,
        "rougel-157": 0.6067415730337078,
        "rougel-110": 0.52,
        "rougel-8": 0.6153846153846154,
        "rougel-7": 0.7204301075268817,
        "rougel-23": 0.5213675213675214,
        "rougel-56": 0.5847457627118644,
        "rougel-60": 0.6227544910179641,
        "meteor-170": 0.6345344070579595,
        "meteor-28": 0.5642190421404532,
        "meteor-6": 0.5810283338461342,
        "meteor-197": 0.4355526267015384,
        "meteor-72": 0.5161131802193254,
        "meteor-63": 0.47043233993293443,
        "meteor-58": 0.5412703111374236,
        "meteor-35": 0.3756233230198406,
        "meteor-196": 0.033185840707964605,
        "meteor-26": 0.4978081171763205,
        "meteor-180": 0.4757008623555243,
        "meteor-144": 0.4993837456973934,
        "meteor-22": 0.5676500508646999,
        "meteor-157": 0.4819668097774605,
        "meteor-110": 0.5687496202878607,
        "meteor-8": 0.5148796139652084,
        "meteor-7": 0.597576679493648,
        "meteor-23": 0.5126824034660069,
        "meteor-56": 0.5748806467031257,
        "meteor-60": 0.4751967617221268,
        "ruby-170": 0.4545454545454546,
        "ruby-28": 0.4726027397260274,
        "ruby-6": 0.6734693877551021,
        "ruby-197": 0.35779816513761464,
        "ruby-72": 0.27083333333333337,
        "ruby-63": 0.5306122448979591,
        "ruby-58": 0.36423841059602646,
        "ruby-35": 0.4693877551020408,
        "ruby-196": 0.04081632653061229,
        "ruby-26": 0.44897959183673475,
        "ruby-180": 0.5714285714285714,
        "ruby-144": 0.3026315789473685,
        "ruby-22": 0.4257425742574258,
        "ruby-157": 0.41836734693877553,
        "ruby-110": 0.35526315789473684,
        "ruby-8": 0.4387755102040817,
        "ruby-7": 0.5918367346938775,
        "ruby-23": 0.38235294117647056,
        "ruby-56": 0.47101449275362317,
        "ruby-60": 0.4387755102040817,
        "codebertscore_f1-170": 0.8464534282684326,
        "codebertscore_f3-170": 0.8422642350196838,
        "codebertscore_f1-28": 0.834044337272644,
        "codebertscore_f3-28": 0.8414042592048645,
        "codebertscore_f1-6": 0.8644335865974426,
        "codebertscore_f3-6": 0.8392100930213928,
        "codebertscore_f1-197": 0.8233332633972168,
        "codebertscore_f3-197": 0.829522967338562,
        "codebertscore_f1-72": 0.8039745688438416,
        "codebertscore_f3-72": 0.8199074268341064,
        "codebertscore_f1-63": 0.8383159041404724,
        "codebertscore_f3-63": 0.8132106065750122,
        "codebertscore_f1-58": 0.8301393389701843,
        "codebertscore_f3-58": 0.8508687019348145,
        "codebertscore_f1-35": 0.856569766998291,
        "codebertscore_f3-35": 0.8636966347694397,
        "codebertscore_f1-196": 0.5774075388908386,
        "codebertscore_f3-196": 0.5495169162750244,
        "codebertscore_f1-26": 0.827252209186554,
        "codebertscore_f3-26": 0.8154561519622803,
        "codebertscore_f1-180": 0.8576592206954956,
        "codebertscore_f3-180": 0.829171895980835,
        "codebertscore_f1-144": 0.7665749192237854,
        "codebertscore_f3-144": 0.7805076241493225,
        "codebertscore_f1-22": 0.8511992692947388,
        "codebertscore_f3-22": 0.8506706953048706,
        "codebertscore_f1-157": 0.8294355273246765,
        "codebertscore_f3-157": 0.817091703414917,
        "codebertscore_f1-110": 0.7834071516990662,
        "codebertscore_f3-110": 0.8063492178916931,
        "codebertscore_f1-8": 0.8497083783149719,
        "codebertscore_f3-8": 0.8193548917770386,
        "codebertscore_f1-7": 0.8567720651626587,
        "codebertscore_f3-7": 0.838090181350708,
        "codebertscore_f1-23": 0.812336266040802,
        "codebertscore_f3-23": 0.8247924447059631,
        "codebertscore_f1-56": 0.8830714821815491,
        "codebertscore_f3-56": 0.8946866393089294,
        "codebertscore_f1-60": 0.8360796570777893,
        "codebertscore_f3-60": 0.8061823844909668,
        "codebertscore_s_f1-170": 0.877382218837738,
        "codebertscore_s_f3-170": 0.8634624481201172,
        "codebertscore_s_f1-28": 0.8622558116912842,
        "codebertscore_s_f3-28": 0.8623375296592712,
        "codebertscore_s_f1-6": 0.8724744319915771,
        "codebertscore_s_f3-6": 0.8466431498527527,
        "codebertscore_s_f1-197": 0.8452365398406982,
        "codebertscore_s_f3-197": 0.8552082180976868,
        "codebertscore_s_f1-72": 0.8300526142120361,
        "codebertscore_s_f3-72": 0.8441907167434692,
        "codebertscore_s_f1-63": 0.8497205376625061,
        "codebertscore_s_f3-63": 0.8248957991600037,
        "codebertscore_s_f1-58": 0.8582490086555481,
        "codebertscore_s_f3-58": 0.8782498836517334,
        "codebertscore_s_f1-35": 0.8675462603569031,
        "codebertscore_s_f3-35": 0.8731945157051086,
        "codebertscore_s_f1-196": 0.5769586563110352,
        "codebertscore_s_f3-196": 0.5628917813301086,
        "codebertscore_s_f1-26": 0.8374780416488647,
        "codebertscore_s_f3-26": 0.8239111304283142,
        "codebertscore_s_f1-180": 0.8619136214256287,
        "codebertscore_s_f3-180": 0.8327876329421997,
        "codebertscore_s_f1-144": 0.7873921394348145,
        "codebertscore_s_f3-144": 0.8122542500495911,
        "codebertscore_s_f1-22": 0.8593199849128723,
        "codebertscore_s_f3-22": 0.8562148809432983,
        "codebertscore_s_f1-157": 0.8403055667877197,
        "codebertscore_s_f3-157": 0.8258811235427856,
        "codebertscore_s_f1-110": 0.8000078201293945,
        "codebertscore_s_f3-110": 0.8261682987213135,
        "codebertscore_s_f1-8": 0.8568134307861328,
        "codebertscore_s_f3-8": 0.826836109161377,
        "codebertscore_s_f1-7": 0.866671621799469,
        "codebertscore_s_f3-7": 0.8454053401947021,
        "codebertscore_s_f1-23": 0.8288922905921936,
        "codebertscore_s_f3-23": 0.843488335609436,
        "codebertscore_s_f1-56": 0.9018004536628723,
        "codebertscore_s_f3-56": 0.9115896821022034,
        "codebertscore_s_f1-60": 0.8622092604637146,
        "codebertscore_s_f3-60": 0.832046627998352,
        "gpt35_nsnr-170": 4,
        "raw_gpt35_nsnr-170": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-197": 4,
        "raw_gpt35_nsnr-197": "4",
        "gpt35_nsnr-72": 4,
        "raw_gpt35_nsnr-72": "4",
        "gpt35_nsnr-63": 3,
        "raw_gpt35_nsnr-63": "3",
        "gpt35_nsnr-58": 4,
        "raw_gpt35_nsnr-58": "4",
        "gpt35_nsnr-35": 3,
        "raw_gpt35_nsnr-35": "3",
        "gpt35_nsnr-196": 3,
        "raw_gpt35_nsnr-196": "3",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-180": 3,
        "raw_gpt35_nsnr-180": "3",
        "gpt35_nsnr-144": 4,
        "raw_gpt35_nsnr-144": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-157": 4,
        "raw_gpt35_nsnr-157": "4",
        "gpt35_nsnr-110": 4,
        "raw_gpt35_nsnr-110": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 3,
        "raw_gpt35_nsnr-23": "3",
        "gpt35_nsnr-56": 4,
        "raw_gpt35_nsnr-56": "4",
        "gpt35_nsnr-60": 4,
        "raw_gpt35_nsnr-60": "4",
        "gpt35_nswr-170": 3,
        "raw_gpt35_nswr-170": "3",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-197": 3,
        "raw_gpt35_nswr-197": "3",
        "gpt35_nswr-72": 3,
        "raw_gpt35_nswr-72": "3",
        "gpt35_nswr-63": 3,
        "raw_gpt35_nswr-63": "3",
        "gpt35_nswr-58": 3,
        "raw_gpt35_nswr-58": "3",
        "gpt35_nswr-35": 2,
        "raw_gpt35_nswr-35": "2",
        "gpt35_nswr-196": 3,
        "raw_gpt35_nswr-196": "3",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-180": 3,
        "raw_gpt35_nswr-180": "3",
        "gpt35_nswr-144": 3,
        "raw_gpt35_nswr-144": "3",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-157": 3,
        "raw_gpt35_nswr-157": "3",
        "gpt35_nswr-110": 3,
        "raw_gpt35_nswr-110": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-56": 3,
        "raw_gpt35_nswr-56": "3",
        "gpt35_nswr-60": 3,
        "raw_gpt35_nswr-60": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given a list of two strings, both strings consist of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your job is to check if it is possible to concatenate the two strings in\n    // some order, that the resulting string will be good.\n    // A string S is considered to be good if and only if all parentheses in S\n    // are balanced. For example: the string '(())()' is good, while the string\n    // '())' is not.\n    // Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n    // Examples:\n    // match_parens(['()(', ')']) == 'Yes'\n    // match_parens([')', ')']) == 'No'\n    public static String matchParens(ArrayList<String> lst) {\n",
        "snippet": [
            "        List<String> S = Arrays.asList(lst.get(0) + lst.get(1), lst.get(1) + lst.get(0));\n        for (String s : S) {\n            int val = 0;\n            for (char i : s.toCharArray()) {\n                if (i == '(') {\n                    val += 1;\n                } else {\n                    val -= 1;\n                }\n                if (val < 0) {\n                    break;\n                }\n            }\n            if (val == 0) {\n                return \"Yes\";\n            }\n        }\n        return \"No\";\n    }\n}"
        ],
        "simplified": "You are given a list of two strings, both strings consist of open parentheses '(' or close parentheses ')' only. Your job is to check if it is possible to concatenate the two strings in some order, that the resulting string will be good. A string S is considered to be good if and only if all parentheses in S are balanced. For example: the string '(())()' is good, while the string '())' is not. Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.",
        "task_id": "119",
        "180": "int s0 = 0;\n        int s1 = 0;\n        int i;\n        for (i = 0; i < lst.get(0).length(); i++) {\n            if (lst.get(0).charAt(i) == '(') {\n                s0++;\n            } else {\n                s0--;\n            }\n        }\n        for (i = 0; i < lst.get(1).length(); i++) {\n            if (lst.get(1).charAt(i) == '(') {\n                s1++;\n            } else {\n                s1--;\n            }\n        }\n        if (s0 == 0 && s1 == 0) {\n            return \"Yes\";\n        }\n        if (s0 == 0 && s1 != 0) {\n            if (lst.get(0).charAt(lst.get(0).length() - 1) == '(') {\n                return \"Yes\";\n            }\n        }\n        if (s0 != 0 && s1 == 0) {\n            if (lst.get(1).charAt(lst.get(1).length() - 1) == ')') {\n                return \"Yes\";\n            }\n        }\n        return \"No\";",
        "grade-180": {
            "execution": 0
        },
        "30": "int diff = 0;\n        for (String string : lst) {\n            for (char c : string.toCharArray()) {\n                if (c == '(')\n                    diff++;\n                else\n                    diff--;\n                if (diff < 0)\n                    return \"No\";\n            }\n        }\n        return diff == 0 ? \"Yes\" : \"No\";",
        "grade-30": {
            "execution": 0
        },
        "6": "int sum = lst.stream().mapToInt(s -> s.equals(\"(\") ? 1 : -1).sum();\n        if (sum != 0) return \"No\";\n        int balance = 0;\n        for (String paren : lst) {\n            if (paren.equals(\"(\")) {\n                balance++;\n            } else {\n                balance--;\n            }\n            if (balance < 0) return \"No\";\n        }\n        return \"Yes\";",
        "grade-6": {
            "execution": 0
        },
        "74": "for (String s : lst) {\n            if (s.charAt(0) == ')') {\n                return \"No\";\n            }\n        }\n        int count = 0;\n        for (String s : lst) {\n            for (int i = 0; i < s.length(); i++) {\n                if (s.charAt(i) == '(') {\n                    count++;\n                } else {\n                    count--;\n                }\n                if (count < 0) {\n                    return \"No\";\n                }\n            }\n        }\n        return count == 0 ? \"Yes\" : \"No\";",
        "grade-74": {
            "execution": 0
        },
        "65": "String str1 = lst.get(0);\n        String str2 = lst.get(1);\n        int x = str1.length();\n        int y = str2.length();\n        int dp[][] = new int[x + 1][y + 1];\n        for (int i = 0; i <= x; i++) {\n            for (int j = 0; j <= y; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 0;\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + 1;\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        if (dp[x][y] == 0) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }",
        "grade-65": {
            "execution": 0
        },
        "60": "Stack<Character> open_stack = new Stack<Character>();\n        for (String s : lst) {\n            for (int i = 0; i < s.length(); i++) {\n                char c = s.charAt(i);\n                if (c == '(') {\n                    open_stack.push(c);\n                } else {\n                    if (open_stack.isEmpty()) {\n                        return \"No\";\n                    } else {\n                        open_stack.pop();\n                    }\n                }\n            }\n        }\n        return \"Yes\";",
        "grade-60": {
            "execution": 0
        },
        "37": "// v1\n        // return matchParens_v1(lst);\n        // v2\n        return matchParens_v2(lst);",
        "grade-37": {
            "execution": 0
        },
        "28": "int len1 = lst.get(0).length();\n        int len2 = lst.get(1).length();\n        int sum1 = 0;\n        int sum2 = 0;\n        for (int i = 0; i < len1; i++) {\n            if (lst.get(0).charAt(i) == '(') {\n                sum1++;\n            } else {\n                sum1--;\n            }\n        }\n        for (int i = 0; i < len2; i++) {\n            if (lst.get(1).charAt(i) == '(') {\n                sum2++;\n            } else {\n                sum2--;\n            }\n        }\n        if (sum1 == 0) {\n            if (sum2 > 0) {\n                return \"Yes\";\n            } else {\n                return \"No\";\n            }\n        } else if (sum1 > 0) {\n            if (sum2 >= 0) {\n                return \"Yes\";\n            } else {\n                return \"No\";\n            }\n        } else {\n            if (sum2 <= 0) {\n                return \"Yes\";\n            } else {\n                return \"No\";\n            }\n        }",
        "grade-28": {
            "execution": 0
        },
        "191": "StringBuilder res = new StringBuilder();\n        String s1 = lst.get(0);\n        String s2 = lst.get(1);\n        boolean reversed = false;\n        int parens = 0;\n        for (int i = 0; i < s1.length(); i++) {\n            if (s1.charAt(i) == '(') {\n                parens++;\n            } else {\n                parens--;\n            }\n            if (parens < 0) {\n                reversed = true;\n                break;\n            }\n        }\n        if (reversed) {\n            String t = s1;\n            s1 = s2;\n            s2 = t;\n        }\n        parens = 0;\n        for (int i = 0; i < s1.length(); i++) {\n            res.append(s1.charAt(i));\n            if (s1.charAt(i) == '(') {\n                parens++;\n            } else {\n                parens--;\n            }\n        }\n        for (int i = 0; i < s2.length(); i++) {\n            res.append(s2.charAt(i));\n            if (s2.charAt(i) == '(') {\n                parens++;\n            } else {\n                parens--;\n            }\n            if (parens < 0) {\n                return \"No\";\n            }\n        }\n        return parens == 0 ? \"Yes\" : \"No\";",
        "grade-191": {
            "execution": 1
        },
        "152": "if (lst.get(0).length() > lst.get(1).length()) {\n            if (lst.get(0).charAt(0) == '(') {\n                return matchParens(new ArrayList<String>(Arrays.asList(lst.get(0).substring(1), lst.get(1) + \"(\")));\n            } else {\n                return matchParens(new ArrayList<String>(Arrays.asList(lst.get(0).substring(1), lst.get(1) + \")\")));\n            }\n        } else {\n            int score = 0;\n            for (int i = 0; i < lst.get(0).length(); i++) {\n                score += lst.get(0).charAt(i) == '(' ? 1 : -1;\n            }\n            for (int i = 0; i < lst.get(1).length(); i++) {\n                score += lst.get(1).charAt(i) == '(' ? 1 : -1;\n            }\n            return score == 0 ? \"Yes\" : \"No\";\n        }",
        "grade-152": {
            "execution": 0
        },
        "23": "String res = \"No\";\n        String s = String.join(\"\", lst);\n        boolean balanced = s.equals(\"\") || s.equals(\"()\");\n        while (!balanced && !s.equals(\"\")) {\n            int firstClose = s.indexOf(\")\");\n            int lastOpen = s.lastIndexOf(\"(\");\n            if (firstClose < lastOpen) {\n                s = s.substring(0, firstClose) + s.substring(firstClose + 1);\n            } else {\n                s = s.substring(0, lastOpen) + s.substring(lastOpen + 1);\n            }\n            balanced = s.equals(\"\") || s.equals(\"()\");\n        }\n        if (balanced) {\n            res = \"Yes\";\n        }\n        return res;",
        "grade-23": {
            "execution": 0
        },
        "165": "int count = 0;\n        for (String s : lst) {\n            for (char c : s.toCharArray()) {\n                if (c == '(') {\n                    count++;\n                } else {\n                    count--;\n                }\n                if (count < 0) {\n                    return \"No\";\n                }\n            }\n        }\n        return count == 0 ? \"Yes\" : \"No\";",
        "grade-165": {
            "execution": 0
        },
        "119": "throw new UnsupportedOperationException(\"Not Implemented\");",
        "grade-119": {
            "execution": 0
        },
        "8": "int diff = 0;\n        for (String s : lst) {\n            for (int i = 0; i < s.length(); i++) {\n                if (s.charAt(i) == '(') {\n                    diff++;\n                } else {\n                    diff--;\n                }\n                if (diff < 0) {\n                    return \"No\";\n                }\n            }\n        }\n        return diff == 0 ? \"Yes\" : \"No\";",
        "grade-8": {
            "execution": 0
        },
        "7": "List<String> arg1 = getArgs(lst.get(0));\n        List<String> arg2 = getArgs(lst.get(1));\n        Stack<String> pairs = new Stack<>();\n        boolean canGenerateGood = false;\n        for (String str : arg1) {\n            if (pairs.isEmpty()) {\n                pairs.push(str);\n            } else {\n                String curr = pairs.peek();\n                String c = curr.substring(0, 1);\n                String s = str.substring(0, 1);\n                if (c.equals(\"(\") && s.equals(\")\")) {\n                    pairs.pop();\n                } else {\n                    pairs.push(str);\n                }\n            }\n        }\n        for (String str : arg2) {\n            if (pairs.isEmpty()) {\n                pairs.push(str);\n            } else {\n                String curr = pairs.peek();\n                String c = curr.substring(0, 1);\n                String s = str.substring(0, 1);\n                if (c.equals(\"(\") && s.equals(\")\")) {\n                    pairs.pop();\n                } else {\n                    pairs.push(str);\n                }\n            }\n        }\n        if (pairs.isEmpty()) {\n            canGenerateGood = true;\n        }\n        return canGenerateGood ? \"Yes\" : \"No\";",
        "grade-7": {
            "execution": 0
        },
        "24": "return isGood(lst.get(0) + lst.get(1)) ? \"Yes\" : \"No\";",
        "grade-24": {
            "execution": 0
        },
        "57": "final Stack<String> stk = new Stack<>();\n        for (String s : lst) {\n            for (int i = 0; i < s.length(); i++) {\n                String c = String.valueOf(s.charAt(i));\n                if (c.equals(\"(\")) {\n                    stk.push(c);\n                } else {\n                    if (stk.empty()) return \"No\";\n                    stk.pop();\n                }\n            }\n        }\n        return stk.empty() ? \"Yes\" : \"No\";",
        "grade-57": {
            "execution": 0
        },
        "62": "if (canBeBalanced(lst.get(0)) && canBeBalanced(lst.get(1))) {\n            return \"Yes\";\n        }\n        return \"No\";",
        "grade-62": {
            "execution": 0
        },
        "140": "int l = 0;\n        int r = 0;\n        String s1 = lst.get(0);\n        String s2 = lst.get(1);\n        for (int i = 0; i < s1.length(); i++) {\n            char c = s1.charAt(i);\n            if (c == '(') {\n                l++;\n            } else {\n                r++;\n            }\n        }\n        for (int i = 0; i < s2.length(); i++) {\n            char c = s2.charAt(i);\n            if (c == '(') {\n                l++;\n            } else {\n                r++;\n            }\n        }\n        if (l == r) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }",
        "grade-140": {
            "execution": 0
        },
        "169": "int[] cnt = {0, 0};\n        for (String s : lst) {\n            for (char c : s.toCharArray()) {\n                if (c == '(') {\n                    cnt[0]++;\n                } else {\n                    cnt[1]++;\n                }\n            }\n        }\n        int diff = cnt[0] - cnt[1];\n        if (diff < 0) {\n            return \"No\";\n        }\n        return \"Yes\";",
        "grade-169": {
            "execution": 0
        },
        "bleu-180": 0.23493603506443317,
        "bleu-30": 0.21716457802987088,
        "bleu-6": 0.2391150698945927,
        "bleu-74": 0.34123852826300877,
        "bleu-65": 0.19015684192146054,
        "bleu-60": 0.29053459472163623,
        "bleu-37": 0.0005954310330787203,
        "bleu-28": 0.26314106637706247,
        "bleu-191": 0.1849606269877336,
        "bleu-152": 0.24052293733333044,
        "bleu-23": 0.12090660327797663,
        "bleu-165": 0.3097563711278681,
        "bleu-119": 9.911309622819166e-06,
        "bleu-8": 0.28564896721506466,
        "bleu-7": 0.1428439651141124,
        "bleu-24": 0.018289174669156166,
        "bleu-57": 0.22022184467667308,
        "bleu-62": 0.06883213131698923,
        "bleu-140": 0.2737628868715267,
        "bleu-169": 0.32531759939607424,
        "codebleu-180": 0.6724667967824324,
        "codebleu-30": 0.33143793450010656,
        "codebleu-6": 0.444675716929967,
        "codebleu-74": 0.5667647932351518,
        "codebleu-65": 0.6097930499506304,
        "codebleu-60": 0.5548043581832143,
        "codebleu-37": 0.05643130901340161,
        "codebleu-28": 0.6751671422844714,
        "codebleu-191": 0.6664371170379859,
        "codebleu-152": 0.6733284115845256,
        "codebleu-23": 0.49421017402945105,
        "codebleu-165": 0.3791907534036027,
        "codebleu-119": 0.036144579714218736,
        "codebleu-8": 0.4427572377933802,
        "codebleu-7": 0.6540188801857441,
        "codebleu-24": 0.130497594771692,
        "codebleu-57": 0.5502601383212022,
        "codebleu-62": 0.16662441346877357,
        "codebleu-140": 0.6336620077355253,
        "codebleu-169": 0.43804308297941935,
        "chrf-180": 0.4068211946565704,
        "chrf-30": 0.3551388020467975,
        "chrf-6": 0.30379381209423173,
        "chrf-74": 0.3711283430869624,
        "chrf-65": 0.3539234526716129,
        "chrf-60": 0.34605713440506203,
        "chrf-37": 0.08378920136536533,
        "chrf-28": 0.39651925628041385,
        "chrf-191": 0.3602252003142016,
        "chrf-152": 0.4485847330565964,
        "chrf-23": 0.23965556593792406,
        "chrf-165": 0.3856263533632912,
        "chrf-119": 0.0424452855572893,
        "chrf-8": 0.3223273687139453,
        "chrf-7": 0.29706904960878977,
        "chrf-24": 0.1657466800418807,
        "chrf-57": 0.3201260184306468,
        "chrf-62": 0.23760581798052346,
        "chrf-140": 0.3978188809165294,
        "chrf-169": 0.38804897619003037,
        "rougel-180": 0.40625,
        "rougel-30": 0.5306122448979592,
        "rougel-6": 0.4888888888888889,
        "rougel-74": 0.5306122448979592,
        "rougel-65": 0.4010840108401084,
        "rougel-60": 0.45217391304347826,
        "rougel-37": 0.0958904109589041,
        "rougel-28": 0.4597701149425288,
        "rougel-191": 0.39401496259351626,
        "rougel-152": 0.4051948051948052,
        "rougel-23": 0.37377049180327865,
        "rougel-165": 0.5841584158415841,
        "rougel-119": 0.07352941176470587,
        "rougel-8": 0.5420560747663551,
        "rougel-7": 0.3398058252427184,
        "rougel-24": 0.2913907284768212,
        "rougel-57": 0.4214876033057851,
        "rougel-62": 0.34355828220858897,
        "rougel-140": 0.4929577464788733,
        "rougel-169": 0.5321100917431193,
        "meteor-180": 0.5342701376036051,
        "meteor-30": 0.3742075431284706,
        "meteor-6": 0.39659417511184153,
        "meteor-74": 0.5864989239895467,
        "meteor-65": 0.5193240264511387,
        "meteor-60": 0.44275965296102066,
        "meteor-37": 0.04393673110720562,
        "meteor-28": 0.5675507137702008,
        "meteor-191": 0.4971250496454369,
        "meteor-152": 0.5249545364518626,
        "meteor-23": 0.34568535810718626,
        "meteor-165": 0.4347754551851962,
        "meteor-119": 0.022163120567375884,
        "meteor-8": 0.5107606301364829,
        "meteor-7": 0.43662801486347536,
        "meteor-24": 0.15788282541071255,
        "meteor-57": 0.4102849610047272,
        "meteor-62": 0.23236077138262357,
        "meteor-140": 0.5388956536006978,
        "meteor-169": 0.45201137080903037,
        "ruby-180": 0.26538461538461533,
        "ruby-30": 0.4032258064516129,
        "ruby-6": 0.3548387096774194,
        "ruby-74": 0.3870967741935484,
        "ruby-65": 0.24489795918367352,
        "ruby-60": 0.29032258064516125,
        "ruby-37": 0.056451612903225756,
        "ruby-28": 0.3080357142857143,
        "ruby-191": 0.25270758122743686,
        "ruby-152": 0.26819923371647514,
        "ruby-23": 0.2320441988950276,
        "ruby-165": 0.4516129032258065,
        "ruby-119": 0.032258064516129004,
        "ruby-8": 0.3709677419354839,
        "ruby-7": 0.21875,
        "ruby-24": 0.17741935483870963,
        "ruby-57": 0.25,
        "ruby-62": 0.217741935483871,
        "ruby-140": 0.32499999999999996,
        "ruby-169": 0.3790322580645161,
        "codebertscore_f1-180": 0.7761502265930176,
        "codebertscore_f3-180": 0.7814261317253113,
        "codebertscore_f1-30": 0.8158039450645447,
        "codebertscore_f3-30": 0.7868645787239075,
        "codebertscore_f1-6": 0.7802113890647888,
        "codebertscore_f3-6": 0.7806215286254883,
        "codebertscore_f1-74": 0.81251060962677,
        "codebertscore_f3-74": 0.7945625185966492,
        "codebertscore_f1-65": 0.7731053233146667,
        "codebertscore_f3-65": 0.7935245037078857,
        "codebertscore_f1-60": 0.7705974578857422,
        "codebertscore_f3-60": 0.761337161064148,
        "codebertscore_f1-37": 0.6592949032783508,
        "codebertscore_f3-37": 0.6367594003677368,
        "codebertscore_f1-28": 0.7994283437728882,
        "codebertscore_f3-28": 0.8024165630340576,
        "codebertscore_f1-191": 0.768230676651001,
        "codebertscore_f3-191": 0.8041336536407471,
        "codebertscore_f1-152": 0.7716359496116638,
        "codebertscore_f3-152": 0.7898916602134705,
        "codebertscore_f1-23": 0.7315245270729065,
        "codebertscore_f3-23": 0.7478499412536621,
        "codebertscore_f1-165": 0.822369396686554,
        "codebertscore_f3-165": 0.7910835146903992,
        "codebertscore_f1-119": 0.5662562847137451,
        "codebertscore_f3-119": 0.5420407056808472,
        "codebertscore_f1-8": 0.7977448105812073,
        "codebertscore_f3-8": 0.7741170525550842,
        "codebertscore_f1-7": 0.7407928109169006,
        "codebertscore_f3-7": 0.7768135666847229,
        "codebertscore_f1-24": 0.7375034093856812,
        "codebertscore_f3-24": 0.6850686073303223,
        "codebertscore_f1-57": 0.765683114528656,
        "codebertscore_f3-57": 0.7592788338661194,
        "codebertscore_f1-62": 0.7329568266868591,
        "codebertscore_f3-62": 0.7025224566459656,
        "codebertscore_f1-140": 0.7895466685295105,
        "codebertscore_f3-140": 0.7933734655380249,
        "codebertscore_f1-169": 0.8050851225852966,
        "codebertscore_f3-169": 0.7941120266914368,
        "codebertscore_s_f1-180": 0.7971022725105286,
        "codebertscore_s_f3-180": 0.8016625046730042,
        "codebertscore_s_f1-30": 0.8229939937591553,
        "codebertscore_s_f3-30": 0.8007484674453735,
        "codebertscore_s_f1-6": 0.7949658632278442,
        "codebertscore_s_f3-6": 0.7935152649879456,
        "codebertscore_s_f1-74": 0.8130573034286499,
        "codebertscore_s_f3-74": 0.7997168898582458,
        "codebertscore_s_f1-65": 0.7855090498924255,
        "codebertscore_s_f3-65": 0.8030498027801514,
        "codebertscore_s_f1-60": 0.7822465300559998,
        "codebertscore_s_f3-60": 0.7771350145339966,
        "codebertscore_s_f1-37": 0.6825546026229858,
        "codebertscore_s_f3-37": 0.669216513633728,
        "codebertscore_s_f1-28": 0.8052400350570679,
        "codebertscore_s_f3-28": 0.8099599480628967,
        "codebertscore_s_f1-191": 0.7931610345840454,
        "codebertscore_s_f3-191": 0.8255410194396973,
        "codebertscore_s_f1-152": 0.805759072303772,
        "codebertscore_s_f3-152": 0.8195471167564392,
        "codebertscore_s_f1-23": 0.7465306520462036,
        "codebertscore_s_f3-23": 0.7659316062927246,
        "codebertscore_s_f1-165": 0.8308520317077637,
        "codebertscore_s_f3-165": 0.8066319823265076,
        "codebertscore_s_f1-119": 0.5603035092353821,
        "codebertscore_s_f3-119": 0.5515371561050415,
        "codebertscore_s_f1-8": 0.8116430044174194,
        "codebertscore_s_f3-8": 0.792048454284668,
        "codebertscore_s_f1-7": 0.7582274675369263,
        "codebertscore_s_f3-7": 0.789349377155304,
        "codebertscore_s_f1-24": 0.7923987507820129,
        "codebertscore_s_f3-24": 0.7396222352981567,
        "codebertscore_s_f1-57": 0.7755305171012878,
        "codebertscore_s_f3-57": 0.7719734311103821,
        "codebertscore_s_f1-62": 0.765007734298706,
        "codebertscore_s_f3-62": 0.7393766045570374,
        "codebertscore_s_f1-140": 0.8020774722099304,
        "codebertscore_s_f3-140": 0.8076961636543274,
        "codebertscore_s_f1-169": 0.8197402954101562,
        "codebertscore_s_f3-169": 0.8100504279136658,
        "gpt35_nsnr-180": 4,
        "raw_gpt35_nsnr-180": "4",
        "gpt35_nsnr-30": 4,
        "raw_gpt35_nsnr-30": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-74": 4,
        "raw_gpt35_nsnr-74": "4",
        "gpt35_nsnr-65": 2,
        "raw_gpt35_nsnr-65": "2",
        "gpt35_nsnr-60": 4,
        "raw_gpt35_nsnr-60": "4",
        "gpt35_nsnr-37": 0,
        "raw_gpt35_nsnr-37": "N/A (The code snippet is incomplete and does not contain the implementation of the matchParens method.)",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-191": 4,
        "raw_gpt35_nsnr-191": "4",
        "gpt35_nsnr-152": 4,
        "raw_gpt35_nsnr-152": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-165": 4,
        "raw_gpt35_nsnr-165": "4",
        "gpt35_nsnr-119": 4,
        "raw_gpt35_nsnr-119": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-24": 3,
        "raw_gpt35_nsnr-24": "3",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-140": 4,
        "raw_gpt35_nsnr-140": "4",
        "gpt35_nsnr-169": 4,
        "raw_gpt35_nsnr-169": "4",
        "gpt35_nswr-180": 3,
        "raw_gpt35_nswr-180": "3",
        "gpt35_nswr-30": 3,
        "raw_gpt35_nswr-30": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-74": 3,
        "raw_gpt35_nswr-74": "3",
        "gpt35_nswr-65": 1,
        "raw_gpt35_nswr-65": "1",
        "gpt35_nswr-60": 3,
        "raw_gpt35_nswr-60": "3",
        "gpt35_nswr-37": 4,
        "raw_gpt35_nswr-37": "4",
        "gpt35_nswr-28": 2,
        "raw_gpt35_nswr-28": "2",
        "gpt35_nswr-191": 3,
        "raw_gpt35_nswr-191": "3",
        "gpt35_nswr-152": 3,
        "raw_gpt35_nswr-152": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-165": 3,
        "raw_gpt35_nswr-165": "3",
        "gpt35_nswr-119": 4,
        "raw_gpt35_nswr-119": "4",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-24": 2,
        "raw_gpt35_nswr-24": "2",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-62": 2,
        "raw_gpt35_nswr-62": "2",
        "gpt35_nswr-140": 2,
        "raw_gpt35_nswr-140": "2",
        "gpt35_nswr-169": 3,
        "raw_gpt35_nswr-169": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it returns True if there are two distinct elements in the list that\n    // sum to zero, and False otherwise.\n    // >>> pairs_sum_to_zero([1, 3, 5, 0])\n    // False\n    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n    // False\n    // >>> pairs_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    // True\n    // >>> pairs_sum_to_zero([1])\n    // False\n    public static boolean pairsSumToZero(ArrayList<Integer> l) {\n",
        "snippet": [
            "        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                if (l.get(i) + l.get(j) == 0) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}"
        ],
        "simplified": "pairs_sum_to_zero takes a list of integers as an input. it returns True if there are two distinct elements in the list that sum to zero, and False otherwise.",
        "task_id": "43",
        "32": "// Fill in your code below here ...\n        return true;",
        "grade-32": {
            "execution": 0
        },
        "6": "// e.g. l = [1, 2, 3, 7], c = new ArrayList<Integer>()\n        // for (i in [0, 1, 2, 3])\n        //   a = l[i]\n        //   for (j in [0, 1, 2, 3])\n        //     b = l[j]\n        //     if (a+b == 0)\n        //       return True\n        // return False\n        // e.g. l = [2, 4, -5, 3, 5, 7], c = new ArrayList<Integer>()\n        // for (i in [0, 1, 2, 3, 4, 5])\n        //   a = l[i]\n        //   for (j in [0, 1, 2, 3, 4, 5])\n        //     b = l[j]\n        //     if (a+b == 0)\n        //       return True\n        // return False\n        // e.g. l = [1], c = new ArrayList<Integer>()\n        // for (i in [0])\n        //   a = l[i]\n        //   for (j in [0])\n        //     b = l[j]\n        //     if (a+b == 0)\n        //       return True\n        // return False\n        ArrayList<Integer> c = new ArrayList<Integer>();\n        int a = 0;\n        int b = 0;\n        boolean found = false;\n        for (int i = 0; i < l.size(); i++) {\n            a = l.get(i);\n            for (int j = 0; j < l.size(); j++) {\n                b = l.get(j);\n                if (a + b == 0) {\n                    found = true;\n                }\n            }\n        }\n        return found;",
        "grade-6": {
            "execution": 0
        },
        "85": "HashSet<Integer> s = new HashSet<Integer>();\n        for (int x : l) {\n            if (s.contains(-x)) {\n                return true;\n            }\n            s.add(x);\n        }\n        return false;",
        "grade-85": {
            "execution": 1
        },
        "71": "// fill in this function\n        return false;",
        "grade-71": {
            "execution": 0
        },
        "65": "throw new java.lang.UnsupportedOperationException(\"pairsSumToZero not implemented yet.\");",
        "grade-65": {
            "execution": 0
        },
        "41": "// your code here\n        if (l.size() == 0) return false;\n        HashSet<Integer> set = new HashSet<Integer>();\n        for (int x : l) {\n            if (set.contains(-x)) return true;\n            set.add(x);\n        }\n        return false;",
        "grade-41": {
            "execution": 1
        },
        "30": "for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                if (l.get(i) + l.get(j) == 0)\n                    return true;\n            }\n        }\n        return false;",
        "grade-30": {
            "execution": 1
        },
        "189": "if (l.size() < 2) {\n            return false;\n        }\n        HashSet<Integer> s = new HashSet<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (s.contains(-l.get(i))) {\n                return true;\n            }\n            s.add(l.get(i));\n        }\n        return false;",
        "grade-189": {
            "execution": 1
        },
        "25": "return true;",
        "grade-25": {
            "execution": 0
        },
        "138": "//throw new UnsupportedOperationException(\"Delete this line and implement your code here!\");\n        int[] a = new int[l.size()];\n        HashMap<Integer, Integer> hash = new HashMap<Integer, Integer>();\n        for(int i = 0; i < l.size(); i++) {\n            a[i] = l.get(i);\n            if(hash.containsKey(a[i])) {\n                hash.put(a[i], hash.get(a[i]) + 1);\n            }\n            else {\n                hash.put(a[i], 1);\n            }\n        }\n        for(int i = 0; i < l.size(); i++) {\n            if(hash.containsKey(-a[i])) {\n                if(hash.get(-a[i]) > 1) {\n                    return true;\n                }\n                else if(a[i] == 0) {\n                    return true;\n                }\n            }\n        }\n        return false;",
        "grade-138": {
            "execution": 0
        },
        "9": "boolean[] seen = new boolean[1000000];\n        for (int i = 0; i < l.size(); i++) {\n            int val = l.get(i);\n            if (seen[val+500000]) {\n                return true;\n            }\n            seen[val+500000] = true;\n        }\n        return false;",
        "grade-9": {
            "execution": 0
        },
        "7": "return false;",
        "grade-7": {
            "execution": 0
        },
        "26": "// your code here\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                if (l.get(i) + l.get(j) == 0)\n                    return true;\n            }\n        }\n        return false;",
        "grade-26": {
            "execution": 1
        },
        "62": "ArrayList<Integer> unique_l = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (!unique_l.contains(l.get(i))) {\n                unique_l.add(l.get(i));\n            }\n        }\n        for (int i = 0; i < unique_l.size(); i++) {\n            if (unique_l.contains(-unique_l.get(i))) {\n                return true;\n            }\n        }\n        return false;",
        "grade-62": {
            "execution": 0
        },
        "68": "HashSet<Integer> set = new HashSet<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            int num = l.get(i);\n            if (set.contains(-num)) {\n                return true;\n            }\n            set.add(num);\n        }\n        return false;",
        "grade-68": {
            "execution": 1
        },
        "177": "// Your code here.",
        "grade-177": {
            "execution": 0
        },
        "193": "if (l.size() < 2) {\n            return false;\n        }\n        HashSet<Integer> seen = new HashSet<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (seen.contains(-l.get(i))) {\n                return true;\n            }\n            seen.add(l.get(i));\n        }\n        return false;",
        "grade-193": {
            "execution": 1
        },
        "57": "l.sort(Comparator.naturalOrder());\n        int first = 0;\n        int last = l.size() - 1;\n        while (first < last) {\n            int sum = l.get(first) + l.get(last);\n            if (sum == 0) {\n                return true;\n            } else if (sum < 0) {\n                first += 1;\n            } else {\n                last -= 1;\n            }\n        }\n        return false;",
        "grade-57": {
            "execution": 1
        },
        "137": "if (l.size() == 0) {\n            return false;\n        }\n        for (int i = 0; i < l.size(); i += 1) {\n            for (int j = i + 1; j < l.size(); j += 1) {\n                if (l.get(i) + l.get(j) == 0) {\n                    return true;\n                }\n            }\n        }\n        return false;",
        "grade-137": {
            "execution": 1
        },
        "64": "// IMPLEMENT ME\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                if (l.get(i) + l.get(j) == 0) {\n                    return true;\n                }\n            }\n        }\n        return false;",
        "grade-64": {
            "execution": 1
        },
        "bleu-32": 0.0018583839752969713,
        "bleu-6": 0.13709438746049193,
        "bleu-85": 0.16587975998129423,
        "bleu-71": 0.0001448166681261623,
        "bleu-65": 0.004475951284766396,
        "bleu-41": 0.2461354801268863,
        "bleu-30": 0.9186213986065497,
        "bleu-189": 0.49476219750539535,
        "bleu-25": 7.352958061453841e-11,
        "bleu-138": 0.23778155019813965,
        "bleu-9": 0.4506663353302386,
        "bleu-7": 7.352958061453841e-11,
        "bleu-26": 0.9062977016724776,
        "bleu-62": 0.42547113495167366,
        "bleu-68": 0.4726747565848443,
        "bleu-177": 1.1475131385400856e-06,
        "bleu-193": 0.49476219750539535,
        "bleu-57": 0.31134524704678745,
        "bleu-137": 0.7476495345252191,
        "bleu-64": 0.9455652714164146,
        "codebleu-32": 0.05055620813706235,
        "codebleu-6": 0.7310717224517789,
        "codebleu-85": 0.3554810559507724,
        "codebleu-71": 0.044096765274813376,
        "codebleu-65": 0.0629442303625127,
        "codebleu-41": 0.5058373854424053,
        "codebleu-30": 0.853418275067678,
        "codebleu-189": 0.7002836176959419,
        "codebleu-25": 0.018867924900732694,
        "codebleu-138": 0.7300258237100179,
        "codebleu-9": 0.5670005142267618,
        "codebleu-7": 0.018867924900732694,
        "codebleu-26": 0.8456946515639734,
        "codebleu-62": 0.732558792579317,
        "codebleu-68": 0.6349641840033595,
        "codebleu-177": 0.025157256033914877,
        "codebleu-193": 0.7002836176959419,
        "codebleu-57": 0.6497017040547329,
        "codebleu-137": 0.7645337321795871,
        "codebleu-64": 0.917211563396191,
        "chrf-32": 0.12848896473537375,
        "chrf-6": 0.39927920686335144,
        "chrf-85": 0.33517536573314805,
        "chrf-71": 0.13968994782003322,
        "chrf-65": 0.08020600700368526,
        "chrf-41": 0.3651768587839055,
        "chrf-30": 0.9361703691776717,
        "chrf-189": 0.594683917070749,
        "chrf-25": 0.0975291115456611,
        "chrf-138": 0.47422627872768497,
        "chrf-9": 0.5084577637694718,
        "chrf-7": 0.10878976167168436,
        "chrf-26": 0.9120165384357624,
        "chrf-62": 0.5731075458967451,
        "chrf-68": 0.5176278823971829,
        "chrf-177": 0.020366979530856436,
        "chrf-193": 0.5857050579315807,
        "chrf-57": 0.44296730779849924,
        "chrf-137": 0.8766255927342625,
        "chrf-64": 0.9613523711701515,
        "rougel-32": 0.13793103448275865,
        "rougel-6": 0.24675324675324675,
        "rougel-85": 0.4227642276422764,
        "rougel-71": 0.07317073170731707,
        "rougel-65": 0.1263157894736842,
        "rougel-41": 0.38571428571428573,
        "rougel-30": 0.971830985915493,
        "rougel-189": 0.5375,
        "rougel-25": 0.07894736842105263,
        "rougel-138": 0.4137931034482759,
        "rougel-9": 0.5673758865248226,
        "rougel-7": 0.07894736842105263,
        "rougel-26": 0.9387755102040816,
        "rougel-62": 0.5792349726775957,
        "rougel-68": 0.5793103448275863,
        "rougel-177": 0.02531645569620253,
        "rougel-193": 0.5375,
        "rougel-57": 0.5030674846625767,
        "rougel-137": 0.8518518518518519,
        "rougel-64": 0.9594594594594594,
        "meteor-32": 0.044709388971684055,
        "meteor-6": 0.5602453760616104,
        "meteor-85": 0.33673963501597665,
        "meteor-71": 0.04421087754421088,
        "meteor-65": 0.05154639175257731,
        "meteor-41": 0.3828383977900552,
        "meteor-30": 0.9496725865517753,
        "meteor-189": 0.5647933028193953,
        "meteor-25": 0.022727272727272724,
        "meteor-138": 0.5721924908743952,
        "meteor-9": 0.48241965973534967,
        "meteor-7": 0.04461279461279461,
        "meteor-26": 0.9431768780254294,
        "meteor-62": 0.7078820816696544,
        "meteor-68": 0.4499582998514622,
        "meteor-177": 0.007541478129713424,
        "meteor-193": 0.5647933028193953,
        "meteor-57": 0.569859700394921,
        "meteor-137": 0.9327351315861465,
        "meteor-64": 0.9698586346060664,
        "ruby-32": 0.0821917808219178,
        "ruby-6": 0.13367609254498714,
        "ruby-85": 0.2465753424657534,
        "ruby-71": 0.04109589041095896,
        "ruby-65": 0.0821917808219178,
        "ruby-41": 0.23287671232876717,
        "ruby-30": 0.9452054794520548,
        "ruby-189": 0.3563218390804598,
        "ruby-25": 0.04109589041095896,
        "ruby-138": 0.26728110599078336,
        "ruby-9": 0.34246575342465757,
        "ruby-7": 0.04109589041095896,
        "ruby-26": 0.8783783783783784,
        "ruby-62": 0.4,
        "ruby-68": 0.3835616438356164,
        "ruby-177": 0.013698630136986356,
        "ruby-193": 0.3563218390804598,
        "ruby-57": 0.30000000000000004,
        "ruby-137": 0.752808988764045,
        "ruby-64": 0.92,
        "codebertscore_f1-32": 0.579923152923584,
        "codebertscore_f3-32": 0.5740287899971008,
        "codebertscore_f1-6": 0.7277774214744568,
        "codebertscore_f3-6": 0.7869651913642883,
        "codebertscore_f1-85": 0.7636330127716064,
        "codebertscore_f3-85": 0.7581596970558167,
        "codebertscore_f1-71": 0.6475725173950195,
        "codebertscore_f3-71": 0.6210157871246338,
        "codebertscore_f1-65": 0.6089799404144287,
        "codebertscore_f3-65": 0.6067143082618713,
        "codebertscore_f1-41": 0.7585732936859131,
        "codebertscore_f3-41": 0.7702583074569702,
        "codebertscore_f1-30": 0.9953941702842712,
        "codebertscore_f3-30": 0.9953941702842712,
        "codebertscore_f1-189": 0.8225727677345276,
        "codebertscore_f3-189": 0.8417820334434509,
        "codebertscore_f1-25": 0.5585473775863647,
        "codebertscore_f3-25": 0.5136680603027344,
        "codebertscore_f1-138": 0.7658551335334778,
        "codebertscore_f3-138": 0.8238747715950012,
        "codebertscore_f1-9": 0.8324737548828125,
        "codebertscore_f3-9": 0.8674458265304565,
        "codebertscore_f1-7": 0.5680390000343323,
        "codebertscore_f3-7": 0.5200305581092834,
        "codebertscore_f1-26": 0.9563319683074951,
        "codebertscore_f3-26": 0.974259078502655,
        "codebertscore_f1-62": 0.8203620910644531,
        "codebertscore_f3-62": 0.8476950526237488,
        "codebertscore_f1-68": 0.835832953453064,
        "codebertscore_f3-68": 0.8610879182815552,
        "codebertscore_f1-177": 0.5131224989891052,
        "codebertscore_f3-177": 0.4947156012058258,
        "codebertscore_f1-193": 0.820595920085907,
        "codebertscore_f3-193": 0.842651903629303,
        "codebertscore_f1-57": 0.8105767369270325,
        "codebertscore_f3-57": 0.8345381021499634,
        "codebertscore_f1-137": 0.9141150712966919,
        "codebertscore_f3-137": 0.9185138940811157,
        "codebertscore_f1-64": 0.949266254901886,
        "codebertscore_f3-64": 0.971595048904419,
        "codebertscore_s_f1-32": 0.6053377985954285,
        "codebertscore_s_f3-32": 0.6105585098266602,
        "codebertscore_s_f1-6": 0.7921808362007141,
        "codebertscore_s_f3-6": 0.8521255254745483,
        "codebertscore_s_f1-85": 0.7762715220451355,
        "codebertscore_s_f3-85": 0.7728003859519958,
        "codebertscore_s_f1-71": 0.6354124546051025,
        "codebertscore_s_f3-71": 0.6152663826942444,
        "codebertscore_s_f1-65": 0.5903531312942505,
        "codebertscore_s_f3-65": 0.5840821266174316,
        "codebertscore_s_f1-41": 0.7686216831207275,
        "codebertscore_s_f3-41": 0.7842166423797607,
        "codebertscore_s_f1-30": 0.9970012307167053,
        "codebertscore_s_f3-30": 0.9970013499259949,
        "codebertscore_s_f1-189": 0.8222572803497314,
        "codebertscore_s_f3-189": 0.8459174633026123,
        "codebertscore_s_f1-25": 0.6662905216217041,
        "codebertscore_s_f3-25": 0.6021767258644104,
        "codebertscore_s_f1-138": 0.8028116822242737,
        "codebertscore_s_f3-138": 0.8616340756416321,
        "codebertscore_s_f1-9": 0.8403390049934387,
        "codebertscore_s_f3-9": 0.8835188150405884,
        "codebertscore_s_f1-7": 0.6840953230857849,
        "codebertscore_s_f3-7": 0.607789158821106,
        "codebertscore_s_f1-26": 0.9530690908432007,
        "codebertscore_s_f3-26": 0.9720394611358643,
        "codebertscore_s_f1-62": 0.836951732635498,
        "codebertscore_s_f3-62": 0.8659344911575317,
        "codebertscore_s_f1-68": 0.8488605618476868,
        "codebertscore_s_f3-68": 0.880439817905426,
        "codebertscore_s_f1-177": 0.5310495495796204,
        "codebertscore_s_f3-177": 0.5205913186073303,
        "codebertscore_s_f1-193": 0.8205881118774414,
        "codebertscore_s_f3-193": 0.8470467925071716,
        "codebertscore_s_f1-57": 0.8209012746810913,
        "codebertscore_s_f3-57": 0.8472205996513367,
        "codebertscore_s_f1-137": 0.8933501243591309,
        "codebertscore_s_f3-137": 0.8987032771110535,
        "codebertscore_s_f1-64": 0.9476140737533569,
        "codebertscore_s_f3-64": 0.9693294763565063,
        "gpt35_nsnr-32": 0,
        "raw_gpt35_nsnr-32": "0",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-85": 4,
        "raw_gpt35_nsnr-85": "4",
        "gpt35_nsnr-71": 0,
        "raw_gpt35_nsnr-71": "Score: 0",
        "gpt35_nsnr-65": 0,
        "raw_gpt35_nsnr-65": "0",
        "gpt35_nsnr-41": 4,
        "raw_gpt35_nsnr-41": "4",
        "gpt35_nsnr-30": 4,
        "raw_gpt35_nsnr-30": "4",
        "gpt35_nsnr-189": 4,
        "raw_gpt35_nsnr-189": "4",
        "gpt35_nsnr-25": 0,
        "raw_gpt35_nsnr-25": "Score: 0",
        "gpt35_nsnr-138": 4,
        "raw_gpt35_nsnr-138": "4",
        "gpt35_nsnr-9": 3,
        "raw_gpt35_nsnr-9": "3",
        "gpt35_nsnr-7": 0,
        "raw_gpt35_nsnr-7": "2 (The code snippet only returns false, which is incorrect for some test cases. It does not implement the required functionality of checking if there are two distinct elements in the list that sum to zero.)",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-68": 4,
        "raw_gpt35_nsnr-68": "4",
        "gpt35_nsnr-177": 0,
        "raw_gpt35_nsnr-177": "3 - The code correctly checks if there are two distinct elements in the list that sum to zero. However, it does not handle the case where the list is empty (which is not explicitly mentioned in the problem statement).",
        "gpt35_nsnr-193": 4,
        "raw_gpt35_nsnr-193": "4",
        "gpt35_nsnr-57": 3,
        "raw_gpt35_nsnr-57": "3",
        "gpt35_nsnr-137": 4,
        "raw_gpt35_nsnr-137": "4",
        "gpt35_nsnr-64": 4,
        "raw_gpt35_nsnr-64": "4",
        "gpt35_nswr-32": 0,
        "raw_gpt35_nswr-32": "0",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-85": 3,
        "raw_gpt35_nswr-85": "3",
        "gpt35_nswr-71": 3,
        "raw_gpt35_nswr-71": "3",
        "gpt35_nswr-65": 2,
        "raw_gpt35_nswr-65": "2",
        "gpt35_nswr-41": 3,
        "raw_gpt35_nswr-41": "3",
        "gpt35_nswr-30": 4,
        "raw_gpt35_nswr-30": "4",
        "gpt35_nswr-189": 4,
        "raw_gpt35_nswr-189": "4",
        "gpt35_nswr-25": 2,
        "raw_gpt35_nswr-25": "2",
        "gpt35_nswr-138": 3,
        "raw_gpt35_nswr-138": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-26": 4,
        "raw_gpt35_nswr-26": "4",
        "gpt35_nswr-62": 3,
        "raw_gpt35_nswr-62": "3",
        "gpt35_nswr-68": 3,
        "raw_gpt35_nswr-68": "3",
        "gpt35_nswr-177": 3,
        "raw_gpt35_nswr-177": "3",
        "gpt35_nswr-193": 3,
        "raw_gpt35_nswr-193": "3",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-137": 4,
        "raw_gpt35_nswr-137": "4",
        "gpt35_nswr-64": 4,
        "raw_gpt35_nswr-64": "4"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // In this task, you will be given a string that represents a number of apples and oranges \n    // that are distributed in a basket of fruit this basket contains \n    // apples, oranges, and mango fruits. Given the string that represents the total number of \n    // the oranges and apples and an integer that represent the total number of the fruits \n    // in the basket return the number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    public static int fruitDistribution(String s, int n) {\n",
        "snippet": [
            "        List<Integer> lis = new ArrayList<>();\n        for (String i : s.split(\" \")) {\n            try {\n                lis.add(Integer.parseInt(i));\n            } catch (NumberFormatException ignored) {\n\n            }\n        }\n        return n - lis.stream().mapToInt(Integer::intValue).sum();\n    }\n}"
        ],
        "simplified": "In this task, you will be given a string that represents a number of apples and oranges that are distributed in a basket of fruit this basket contains apples, oranges, and mango fruits. Given the string that represents the total number of the oranges and apples and an integer that represent the total number of the fruits in the basket return the number of the mango fruits in the basket.",
        "task_id": "67",
        "186": "String[] arr = s.split(\" \");\n        int apples = Integer.parseInt(arr[0]);\n        int oranges = Integer.parseInt(arr[4]);\n        return n - apples - oranges;",
        "grade-186": {
            "execution": 0
        },
        "30": "int count1 = 0;\n        int count2 = 0;\n        int count3 = 0;\n        String[] words = s.split(\" \");\n        if (words[0].contains(\"apples\")) {\n            count1 = Integer.parseInt(words[0].replaceAll(\"[^0-9]\", \"\"));\n        }\n        if (words[2].contains(\"apples\")) {\n            count1 = Integer.parseInt(words[2].replaceAll(\"[^0-9]\", \"\"));\n        }\n        if (words[0].contains(\"oranges\")) {\n            count2 = Integer.parseInt(words[0].replaceAll(\"[^0-9]\", \"\"));\n        }\n        if (words[2].contains(\"oranges\")) {\n            count2 = Integer.parseInt(words[2].replaceAll(\"[^0-9]\", \"\"));\n        }\n        if (words[0].contains(\"mangoes\")) {\n            count3 = Integer.parseInt(words[0].replaceAll(\"[^0-9]\", \"\"));\n        }\n        if (words[2].contains(\"mangoes\")) {\n            count3 = Integer.parseInt(words[2].replaceAll(\"[^0-9]\", \"\"));\n        }\n        int result = n - count1 - count2 - count3;\n        return result;",
        "grade-30": {
            "execution": 0
        },
        "6": "String[] nums = s.split(\" \");\n        int apples = Integer.parseInt(nums[0]);\n        int oranges = Integer.parseInt(nums[3]);\n        return n - apples - oranges;",
        "grade-6": {
            "execution": 1
        },
        "77": "String[] split = s.split(\" \");\n        int apples = Integer.parseInt(split[0]);\n        int oranges = Integer.parseInt(split[3]);\n        return n - apples - oranges;",
        "grade-77": {
            "execution": 1
        },
        "67": "String[] sa = s.split(\" and \");\n        int sum1 = Integer.parseInt(sa[0].split(\" \")[0]);\n        int sum2 = Integer.parseInt(sa[1].split(\" \")[0]);\n        return n - sum1 - sum2;",
        "grade-67": {
            "execution": 1
        },
        "62": "// Hint: use s.split(\" \")\n        // Hint: you can use the rest operator \"...\"\n        // Hint: use Integer.parseInt() to convert the integer passed as a string\n\n        // write your code here\n        int num_apples = 0;\n        int num_oranges = 0;\n        String [] input_split = s.split(\" \");\n        num_apples = Integer.parseInt(input_split[0]);\n        num_oranges = Integer.parseInt(input_split[2]);\n        return n - num_apples - num_oranges;",
        "grade-62": {
            "execution": 0
        },
        "37": "Scanner sc = new Scanner(s);\n        int apples = sc.nextInt();\n        sc.next();\n        int oranges = sc.nextInt();\n        return n - apples - oranges;",
        "grade-37": {
            "execution": 0
        },
        "28": "//return 0;\n        String[] arr=s.split(\" \");\n        // int apple=Integer.parseInt(arr[0]);\n        // int orange=Integer.parseInt(arr[3]);\n        return n-(Integer.parseInt(arr[0])+Integer.parseInt(arr[3]));",
        "grade-28": {
            "execution": 1
        },
        "198": "// write your code here\n        // remember to return a valid result\n        int apples = 0;\n        int oranges = 0;\n        int mangoes = 0;\n        String[] arr = s.split(\" and \");\n        int applesAndOranges = Integer.parseInt(arr[0].split(\" \")[0]) + Integer.parseInt(arr[1].split(\" \")[0]);\n        return n - applesAndOranges;",
        "grade-198": {
            "execution": 1
        },
        "158": "String[] x = s.split(\" \");\n        int a = Integer.parseInt(x[0]);\n        int o = Integer.parseInt(x[3]);\n        return n - a - o;",
        "grade-158": {
            "execution": 1
        },
        "24": "// YOUR CODE HERE\n        //System.out.println(s);\n        String[] numbers = s.split(\" and \");\n        String[] num1 = numbers[0].split(\" \");\n        String[] num2 = numbers[1].split(\" \");\n        int a = Integer.parseInt(num1[0]);\n        int b = Integer.parseInt(num2[0]);\n        //System.out.println(a);\n        //System.out.println(b);\n        return n - a - b;",
        "grade-24": {
            "execution": 1
        },
        "172": "String[] split = s.split(\"and\");\n        String[] split1 = split[0].split(\" \");\n        String[] split2 = split[1].split(\" \");\n        int x = Integer.parseInt(split1[0]);\n        int y = Integer.parseInt(split2[1]);\n        return n - x - y;",
        "grade-172": {
            "execution": 1
        },
        "122": "throw new UnsupportedOperationException(\"Not implemented yet.\");",
        "grade-122": {
            "execution": 0
        },
        "8": "//write your code here\n        int numOfApples = 0;\n        int numOfOranges = 0;\n        int numOfMangoes = 0;\n        String num = \"\";\n        for(int i = 0; i < s.length(); i++) {\n            if(s.charAt(i) == ' ') {\n                if(s.substring(i - 5, i).equals(\"apple\")) {\n                    numOfApples = Integer.parseInt(num);\n                    num = \"\";\n                } else if(s.substring(i - 7, i).equals(\"orange\")) {\n                    numOfOranges = Integer.parseInt(num);\n                    num = \"\";\n                }\n            } else {\n                num += s.charAt(i);\n            }\n        }\n        numOfMangoes = n - numOfApples - numOfOranges;\n        return numOfMangoes;",
        "grade-8": {
            "execution": 0
        },
        "7": "return 0;",
        "grade-7": {
            "execution": 0
        },
        "25": "String[] splitedStr = s.split(\" \");\n        int sum = Integer.parseInt(splitedStr[0]) + Integer.parseInt(splitedStr[2]);\n        return n - sum;",
        "grade-25": {
            "execution": 0
        },
        "60": "throw new UnsupportedOperationException(\"Remove this line and implement the method\");",
        "grade-60": {
            "execution": 0
        },
        "64": "//write your code here\n        return 0;",
        "grade-64": {
            "execution": 0
        },
        "146": "String [] splitted_string = s.split(\" \");\n        String fruit1 = splitted_string[0];\n        String fruit2 = splitted_string[4];\n        int num_fruit1 = Integer.parseInt(fruit1);\n        int num_fruit2 = Integer.parseInt(fruit2);\n        return n - num_fruit1 - num_fruit2;",
        "grade-146": {
            "execution": 0
        },
        "175": "int orange_num = 0;\n        int apple_num = 0;\n        int mango_num = 0;\n        String[] words = s.split(\" \");\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].equals(\"apples\")) {\n                apple_num = Integer.parseInt(words[i - 1]);\n            }\n            if (words[i].equals(\"oranges\")) {\n                orange_num = Integer.parseInt(words[i - 1]);\n            }\n        }\n        mango_num = n - orange_num - apple_num;\n        return mango_num;",
        "grade-175": {
            "execution": 1
        },
        "bleu-186": 0.13649362309735358,
        "bleu-30": 0.060594756425656066,
        "bleu-6": 0.13649362309735358,
        "bleu-77": 0.13649362309735358,
        "bleu-67": 0.1634228612116211,
        "bleu-62": 0.12833079806731684,
        "bleu-37": 0.044114402971361315,
        "bleu-28": 0.19041297715330985,
        "bleu-198": 0.13676317703680888,
        "bleu-158": 0.13649362309735358,
        "bleu-24": 0.11604467819910269,
        "bleu-172": 0.16346799867534667,
        "bleu-122": 0.0009478305707359308,
        "bleu-8": 0.08856309179203319,
        "bleu-7": 2.471939765222599e-12,
        "bleu-25": 0.13173088937156413,
        "bleu-60": 0.002023676184637522,
        "bleu-64": 2.1255246500762238e-05,
        "bleu-146": 0.1497178547124151,
        "bleu-175": 0.16930887910486628,
        "codebleu-186": 0.2763295202807024,
        "codebleu-30": 0.5273479681921418,
        "codebleu-6": 0.2763295202807024,
        "codebleu-77": 0.2763295202807024,
        "codebleu-67": 0.3470260936384083,
        "codebleu-62": 0.4282832043882847,
        "codebleu-37": 0.2807007339160153,
        "codebleu-28": 0.3861072773049257,
        "codebleu-198": 0.39157009279752497,
        "codebleu-158": 0.2763295202807024,
        "codebleu-24": 0.4507577207014211,
        "codebleu-172": 0.39301947846938395,
        "codebleu-122": 0.0600609543340027,
        "codebleu-8": 0.5699177438307872,
        "codebleu-7": 0.012012012072911972,
        "codebleu-25": 0.25322913089563454,
        "codebleu-60": 0.0600609543340027,
        "codebleu-64": 0.036073637963606305,
        "codebleu-146": 0.3344667605260419,
        "codebleu-175": 0.5188899626585362,
        "chrf-186": 0.282416328965234,
        "chrf-30": 0.23283165108290174,
        "chrf-6": 0.2833508418897247,
        "chrf-77": 0.28427899139771656,
        "chrf-67": 0.2791584501663605,
        "chrf-62": 0.3036379276278159,
        "chrf-37": 0.15649073285429468,
        "chrf-28": 0.3038203375830835,
        "chrf-198": 0.30278766940763335,
        "chrf-158": 0.25920301658217954,
        "chrf-24": 0.29473625662493247,
        "chrf-172": 0.27657653121140785,
        "chrf-122": 0.1073779740499993,
        "chrf-8": 0.27900815884236774,
        "chrf-7": 0.024393990397426353,
        "chrf-25": 0.282788374189643,
        "chrf-60": 0.11823600894003454,
        "chrf-64": 0.04842826808872629,
        "chrf-146": 0.27917298105680843,
        "chrf-175": 0.30048331392601096,
        "rougel-186": 0.32812500000000006,
        "rougel-30": 0.2040816326530612,
        "rougel-6": 0.32812500000000006,
        "rougel-77": 0.32812500000000006,
        "rougel-67": 0.32653061224489793,
        "rougel-62": 0.2872340425531915,
        "rougel-37": 0.31147540983606553,
        "rougel-28": 0.3821656050955414,
        "rougel-198": 0.2857142857142857,
        "rougel-158": 0.32812500000000006,
        "rougel-24": 0.31155778894472363,
        "rougel-172": 0.32298136645962733,
        "rougel-122": 0.1276595744680851,
        "rougel-8": 0.2900763358778626,
        "rougel-7": 0.04819277108433735,
        "rougel-25": 0.34920634920634924,
        "rougel-60": 0.12371134020618556,
        "rougel-64": 0.04494382022471911,
        "rougel-146": 0.30434782608695654,
        "rougel-175": 0.34,
        "meteor-186": 0.21202167638317332,
        "meteor-30": 0.3007918093517997,
        "meteor-6": 0.21202167638317332,
        "meteor-77": 0.21202167638317332,
        "meteor-67": 0.26829249526254934,
        "meteor-62": 0.2857816653803275,
        "meteor-37": 0.20260581794005425,
        "meteor-28": 0.30748505196957726,
        "meteor-198": 0.2802504069112308,
        "meteor-158": 0.21202167638317332,
        "meteor-24": 0.29637309272155954,
        "meteor-172": 0.25383067084511707,
        "meteor-122": 0.07248382152588556,
        "meteor-8": 0.36934260245220657,
        "meteor-7": 0.013831258644536654,
        "meteor-25": 0.25731675892494016,
        "meteor-60": 0.06507351923130175,
        "meteor-64": 0.013717421124828533,
        "meteor-146": 0.20929646203377517,
        "meteor-175": 0.3782738095238095,
        "ruby-186": 0.21250000000000002,
        "ruby-30": 0.125,
        "ruby-6": 0.21250000000000002,
        "ruby-77": 0.21250000000000002,
        "ruby-67": 0.16249999999999998,
        "ruby-62": 0.12962962962962965,
        "ruby-37": 0.1875,
        "ruby-28": 0.16249999999999998,
        "ruby-198": 0.1578947368421053,
        "ruby-158": 0.21250000000000002,
        "ruby-24": 0.2100840336134454,
        "ruby-172": 0.14814814814814814,
        "ruby-122": 0.07499999999999996,
        "ruby-8": 0.17582417582417587,
        "ruby-7": 0.025000000000000022,
        "ruby-25": 0.22499999999999998,
        "ruby-60": 0.0625,
        "ruby-64": 0.025000000000000022,
        "ruby-146": 0.17500000000000004,
        "ruby-175": 0.21666666666666667,
        "codebertscore_f1-186": 0.7459325194358826,
        "codebertscore_f3-186": 0.7152724862098694,
        "codebertscore_f1-30": 0.6699885129928589,
        "codebertscore_f3-30": 0.7096230387687683,
        "codebertscore_f1-6": 0.7450211644172668,
        "codebertscore_f3-6": 0.7195211052894592,
        "codebertscore_f1-77": 0.7405477166175842,
        "codebertscore_f3-77": 0.7073712944984436,
        "codebertscore_f1-67": 0.7412198185920715,
        "codebertscore_f3-67": 0.7189784646034241,
        "codebertscore_f1-62": 0.7005199790000916,
        "codebertscore_f3-62": 0.7126015424728394,
        "codebertscore_f1-37": 0.7000898718833923,
        "codebertscore_f3-37": 0.6786066293716431,
        "codebertscore_f1-28": 0.735612690448761,
        "codebertscore_f3-28": 0.7128114700317383,
        "codebertscore_f1-198": 0.7117178440093994,
        "codebertscore_f3-198": 0.7189693450927734,
        "codebertscore_f1-158": 0.7549787759780884,
        "codebertscore_f3-158": 0.7196518182754517,
        "codebertscore_f1-24": 0.7139583230018616,
        "codebertscore_f3-24": 0.7152208685874939,
        "codebertscore_f1-172": 0.7479256391525269,
        "codebertscore_f3-172": 0.7253625988960266,
        "codebertscore_f1-122": 0.5832165479660034,
        "codebertscore_f3-122": 0.5690779685974121,
        "codebertscore_f1-8": 0.6684507727622986,
        "codebertscore_f3-8": 0.6964152455329895,
        "codebertscore_f1-7": 0.520771324634552,
        "codebertscore_f3-7": 0.48697370290756226,
        "codebertscore_f1-25": 0.7408466339111328,
        "codebertscore_f3-25": 0.716037929058075,
        "codebertscore_f1-60": 0.6096076369285583,
        "codebertscore_f3-60": 0.5939265489578247,
        "codebertscore_f1-64": 0.5539578199386597,
        "codebertscore_f3-64": 0.5364011526107788,
        "codebertscore_f1-146": 0.732771098613739,
        "codebertscore_f3-146": 0.7232803702354431,
        "codebertscore_f1-175": 0.7178372740745544,
        "codebertscore_f3-175": 0.7336044907569885,
        "codebertscore_s_f1-186": 0.7340863347053528,
        "codebertscore_s_f3-186": 0.6973171234130859,
        "codebertscore_s_f1-30": 0.6970656514167786,
        "codebertscore_s_f3-30": 0.7214834094047546,
        "codebertscore_s_f1-6": 0.7338180541992188,
        "codebertscore_s_f3-6": 0.7008659243583679,
        "codebertscore_s_f1-77": 0.7324091196060181,
        "codebertscore_s_f3-77": 0.691286563873291,
        "codebertscore_s_f1-67": 0.7321540117263794,
        "codebertscore_s_f3-67": 0.7036218047142029,
        "codebertscore_s_f1-62": 0.7044036984443665,
        "codebertscore_s_f3-62": 0.7175049781799316,
        "codebertscore_s_f1-37": 0.6864612102508545,
        "codebertscore_s_f3-37": 0.6590564846992493,
        "codebertscore_s_f1-28": 0.7320632934570312,
        "codebertscore_s_f3-28": 0.711821973323822,
        "codebertscore_s_f1-198": 0.7077072858810425,
        "codebertscore_s_f3-198": 0.7145107984542847,
        "codebertscore_s_f1-158": 0.7487645149230957,
        "codebertscore_s_f3-158": 0.7058178782463074,
        "codebertscore_s_f1-24": 0.720333993434906,
        "codebertscore_s_f3-24": 0.72197425365448,
        "codebertscore_s_f1-172": 0.7549968957901001,
        "codebertscore_s_f3-172": 0.7289753556251526,
        "codebertscore_s_f1-122": 0.5775179862976074,
        "codebertscore_s_f3-122": 0.5480028390884399,
        "codebertscore_s_f1-8": 0.6925109624862671,
        "codebertscore_s_f3-8": 0.7156549096107483,
        "codebertscore_s_f1-7": 0.5981374382972717,
        "codebertscore_s_f3-7": 0.5448499917984009,
        "codebertscore_s_f1-25": 0.7369150519371033,
        "codebertscore_s_f3-25": 0.7050279974937439,
        "codebertscore_s_f1-60": 0.5784406065940857,
        "codebertscore_s_f3-60": 0.5553255677223206,
        "codebertscore_s_f1-64": 0.5613523721694946,
        "codebertscore_s_f3-64": 0.5480428338050842,
        "codebertscore_s_f1-146": 0.7406774163246155,
        "codebertscore_s_f3-146": 0.7338404059410095,
        "codebertscore_s_f1-175": 0.7225061058998108,
        "codebertscore_s_f3-175": 0.7357295751571655,
        "gpt35_nsnr-186": 4,
        "raw_gpt35_nsnr-186": "4",
        "gpt35_nsnr-30": 4,
        "raw_gpt35_nsnr-30": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-77": 4,
        "raw_gpt35_nsnr-77": "4",
        "gpt35_nsnr-67": 4,
        "raw_gpt35_nsnr-67": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-37": 4,
        "raw_gpt35_nsnr-37": "4",
        "gpt35_nsnr-28": 3,
        "raw_gpt35_nsnr-28": "3",
        "gpt35_nsnr-198": 4,
        "raw_gpt35_nsnr-198": "4",
        "gpt35_nsnr-158": 4,
        "raw_gpt35_nsnr-158": "4",
        "gpt35_nsnr-24": 4,
        "raw_gpt35_nsnr-24": "4",
        "gpt35_nsnr-172": 4,
        "raw_gpt35_nsnr-172": "4",
        "gpt35_nsnr-122": 4,
        "raw_gpt35_nsnr-122": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 0,
        "raw_gpt35_nsnr-7": "0",
        "gpt35_nsnr-25": 4,
        "raw_gpt35_nsnr-25": "4",
        "gpt35_nsnr-60": 0,
        "raw_gpt35_nsnr-60": "Score: 0",
        "gpt35_nsnr-64": 4,
        "raw_gpt35_nsnr-64": "4",
        "gpt35_nsnr-146": 4,
        "raw_gpt35_nsnr-146": "4",
        "gpt35_nsnr-175": 4,
        "raw_gpt35_nsnr-175": "4",
        "gpt35_nswr-186": 3,
        "raw_gpt35_nswr-186": "3",
        "gpt35_nswr-30": 3,
        "raw_gpt35_nswr-30": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-77": 3,
        "raw_gpt35_nswr-77": "3",
        "gpt35_nswr-67": 4,
        "raw_gpt35_nswr-67": "4",
        "gpt35_nswr-62": 4,
        "raw_gpt35_nswr-62": "4",
        "gpt35_nswr-37": 3,
        "raw_gpt35_nswr-37": "3",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-198": 3,
        "raw_gpt35_nswr-198": "3",
        "gpt35_nswr-158": 3,
        "raw_gpt35_nswr-158": "3",
        "gpt35_nswr-24": 4,
        "raw_gpt35_nswr-24": "4",
        "gpt35_nswr-172": 4,
        "raw_gpt35_nswr-172": "4",
        "gpt35_nswr-122": 0,
        "raw_gpt35_nswr-122": "0",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 0,
        "raw_gpt35_nswr-7": "0",
        "gpt35_nswr-25": 3,
        "raw_gpt35_nswr-25": "3",
        "gpt35_nswr-60": 0,
        "raw_gpt35_nswr-60": "0",
        "gpt35_nswr-64": 1,
        "raw_gpt35_nswr-64": "1",
        "gpt35_nswr-146": 3,
        "raw_gpt35_nswr-146": "3",
        "gpt35_nswr-175": 3,
        "raw_gpt35_nswr-175": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    // >>> string_sequence(0)\n    // '0'\n    // >>> string_sequence(5)\n    // '0 1 2 3 4 5'\n    public static String stringSequence(int n) {\n",
        "snippet": [
            "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n        }\n        sb.append(n);\n        return sb.toString();\n    }\n}"
        ],
        "simplified": "Return a string containing space-delimited numbers starting from 0 upto n inclusive.",
        "task_id": "15",
        "153": "// Write your code here\n        StringBuilder str = new StringBuilder();\n        str.append(0);\n        for(int i = 1; i<=n; i++){\n            str.append(\" \" + i);\n        }\n        return str.toString();",
        "grade-153": {
            "execution": 1
        },
        "18": "return IntStream.rangeClosed(0, n).mapToObj(x -> Integer.toString(x)).collect(Collectors.joining(\" \"));",
        "grade-18": {
            "execution": 1
        },
        "3": "StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n        }\n        return sb.toString().trim();",
        "grade-3": {
            "execution": 1
        },
        "184": "throw new UnsupportedOperationException(\"Waiting to be implemented.\");",
        "grade-184": {
            "execution": 0
        },
        "54": "// Feel free to modify the return statement below\n        return \"\";",
        "grade-54": {
            "execution": 0
        },
        "47": "if (n == 0) return \"0\";\n        int i = 0;\n        String output = \"\";\n        while (i <= n) {\n            output += i + \" \";\n            i++;\n        }\n        return output.trim();",
        "grade-47": {
            "execution": 1
        },
        "43": "String ans = \"\";\n        int i = 0;\n        while (i < n) {\n            ans += i + \" \";\n            i++;\n        }\n        ans += n;\n        return ans;",
        "grade-43": {
            "execution": 1
        },
        "27": "StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            sb.append(i);\n            if (i != n) sb.append(\" \");\n        }\n        return sb.toString();",
        "grade-27": {
            "execution": 1
        },
        "17": "throw new RuntimeException(\"TODO: Implement me!\");",
        "grade-17": {
            "execution": 0
        },
        "164": "// Don't forget to return the result!\n        // Replace the following line with your solution.\n        return \"\";",
        "grade-164": {
            "execution": 0
        },
        "117": "List<String> nums = new ArrayList<>();\n        for (int i = 0; i <= n; i++) {\n            nums.add(Integer.toString(i));\n        }\n        return String.join(\" \", nums);",
        "grade-117": {
            "execution": 1
        },
        "13": "return \"\";",
        "grade-13": {
            "execution": 0
        },
        "136": "throw new RuntimeException(\"Function not implemented\");",
        "grade-136": {
            "execution": 0
        },
        "88": "String res = \"\";\n        for (int i = 0; i <= n; i++) {\n            res += String.valueOf(i) + \" \";\n        }\n        return res.trim();",
        "grade-88": {
            "execution": 1
        },
        "4": "return IntStream.rangeClosed(0, n).mapToObj(String::valueOf).collect(Collectors.joining(\" \"));",
        "grade-4": {
            "execution": 1
        },
        "41": "throw new UnsupportedOperationException(\"Problem.stringSequence\");",
        "grade-41": {
            "execution": 0
        },
        "44": "// YOUR CODE HERE\n        return IntStream.rangeClosed(0, n).mapToObj(Integer::toString).collect(Collectors.joining(\" \"));",
        "grade-44": {
            "execution": 1
        },
        "102": "String result = \"\";\n        if (n == 0) {\n            result = \"0\";\n        } else {\n            for (int i = 0; i <= n; i++) {\n                result += Integer.toString(i) + \" \";\n            }\n        }\n        return result.trim();",
        "grade-102": {
            "execution": 1
        },
        "140": "String[] arr = new String[n + 1];\n        for (int i = 0; i <= n; i++) {\n            arr[i] = Integer.toString(i);\n        }\n        return String.join(\" \", arr);",
        "grade-140": {
            "execution": 1
        },
        "122": "if (n < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative!\");\n        }\n        return IntStream.rangeClosed(0, n).mapToObj(i -> Integer.toString(i)).collect(Collectors.joining(\" \"));",
        "grade-122": {
            "execution": 1
        },
        "bleu-153": 0.5052150906829517,
        "bleu-18": 0.09785824834526649,
        "bleu-3": 0.7954770050668594,
        "bleu-184": 0.007362560185932482,
        "bleu-54": 0.0028698693467913094,
        "bleu-47": 0.16924530016757064,
        "bleu-43": 0.1500153974444187,
        "bleu-27": 0.7769631586686206,
        "bleu-17": 0.005590526991051708,
        "bleu-164": 0.010175350518656236,
        "bleu-117": 0.41419429958704446,
        "bleu-13": 4.05639804268867e-07,
        "bleu-136": 0.003302705094940624,
        "bleu-88": 0.30980949357750487,
        "bleu-4": 0.0547933798518562,
        "bleu-41": 0.0058101781123916915,
        "bleu-44": 0.06287812523792803,
        "bleu-102": 0.3415194208925141,
        "bleu-140": 0.39245578951042687,
        "bleu-122": 0.15760275870979268,
        "codebleu-153": 0.6445379772808986,
        "codebleu-18": 0.31946366181609714,
        "codebleu-3": 0.7513607259982327,
        "codebleu-184": 0.07753633128571549,
        "codebleu-54": 0.1019601589182881,
        "codebleu-47": 0.4071390454853863,
        "codebleu-43": 0.32944669527032566,
        "codebleu-27": 0.7141052459822758,
        "codebleu-17": 0.07753633128571549,
        "codebleu-164": 0.16112213411933698,
        "codebleu-117": 0.603530644969146,
        "codebleu-13": 0.03875970585836136,
        "codebleu-136": 0.07753633128571549,
        "codebleu-88": 0.48968376205920283,
        "codebleu-4": 0.2588762802331367,
        "codebleu-41": 0.07753633128571549,
        "codebleu-44": 0.2898285098869947,
        "codebleu-102": 0.5759047283707381,
        "codebleu-140": 0.5394882561012997,
        "codebleu-122": 0.45092677683908133,
        "chrf-153": 0.6224546432504006,
        "chrf-18": 0.20529769626342959,
        "chrf-3": 0.836347873447027,
        "chrf-184": 0.10739822075774877,
        "chrf-54": 0.09984680981237987,
        "chrf-47": 0.2077517892643996,
        "chrf-43": 0.20175906195707224,
        "chrf-27": 0.8186568293925005,
        "chrf-17": 0.06457087525559144,
        "chrf-164": 0.12108670884434321,
        "chrf-117": 0.3946627120621187,
        "chrf-13": 0.04401099729999849,
        "chrf-136": 0.07829172157095231,
        "chrf-88": 0.3076577641882441,
        "chrf-4": 0.17901922360658162,
        "chrf-41": 0.11402730564496368,
        "chrf-44": 0.18881132159925765,
        "chrf-102": 0.33770974325595127,
        "chrf-140": 0.389578515427843,
        "chrf-122": 0.23513586740073983,
        "rougel-153": 0.6610169491525424,
        "rougel-18": 0.30612244897959184,
        "rougel-3": 0.8771929824561402,
        "rougel-184": 0.16216216216216214,
        "rougel-54": 0.08219178082191782,
        "rougel-47": 0.4181818181818182,
        "rougel-43": 0.4489795918367347,
        "rougel-27": 0.8547008547008546,
        "rougel-17": 0.16438356164383564,
        "rougel-164": 0.09523809523809523,
        "rougel-117": 0.591304347826087,
        "rougel-13": 0.09523809523809525,
        "rougel-136": 0.16901408450704228,
        "rougel-88": 0.6153846153846154,
        "rougel-4": 0.3010752688172043,
        "rougel-41": 0.16438356164383564,
        "rougel-44": 0.28571428571428575,
        "rougel-102": 0.5573770491803278,
        "rougel-140": 0.5614035087719298,
        "rougel-122": 0.3252032520325203,
        "meteor-153": 0.6603481144468296,
        "meteor-18": 0.2708519881935462,
        "meteor-3": 0.8139457885854463,
        "meteor-184": 0.09744162087912088,
        "meteor-54": 0.06825688073394495,
        "meteor-47": 0.41873892557989684,
        "meteor-43": 0.34555868409019813,
        "meteor-27": 0.82612521841933,
        "meteor-17": 0.07823649337410807,
        "meteor-164": 0.0766886490807354,
        "meteor-117": 0.508470565966307,
        "meteor-13": 0.05899532710280373,
        "meteor-136": 0.07852465725393903,
        "meteor-88": 0.3979345219875523,
        "meteor-4": 0.23404169927558044,
        "meteor-41": 0.09762041284403668,
        "meteor-44": 0.25241675617615467,
        "meteor-102": 0.48433817340067337,
        "meteor-140": 0.4074185337445184,
        "meteor-122": 0.3664220509140295,
        "ruby-153": 0.38983050847457623,
        "ruby-18": 0.18644067796610164,
        "ruby-3": 0.7966101694915254,
        "ruby-184": 0.10169491525423724,
        "ruby-54": 0.05084745762711862,
        "ruby-47": 0.23728813559322037,
        "ruby-43": 0.30508474576271183,
        "ruby-27": 0.7627118644067796,
        "ruby-17": 0.0847457627118644,
        "ruby-164": 0.06779661016949157,
        "ruby-117": 0.44067796610169496,
        "ruby-13": 0.05084745762711862,
        "ruby-136": 0.0847457627118644,
        "ruby-88": 0.4576271186440678,
        "ruby-4": 0.18644067796610164,
        "ruby-41": 0.10169491525423724,
        "ruby-44": 0.1694915254237288,
        "ruby-102": 0.3015873015873016,
        "ruby-140": 0.423728813559322,
        "ruby-122": 0.125,
        "codebertscore_f1-153": 0.8679416179656982,
        "codebertscore_f3-153": 0.892397403717041,
        "codebertscore_f1-18": 0.6767094731330872,
        "codebertscore_f3-18": 0.6835358142852783,
        "codebertscore_f1-3": 0.962979793548584,
        "codebertscore_f3-3": 0.9678137898445129,
        "codebertscore_f1-184": 0.6202525496482849,
        "codebertscore_f3-184": 0.6152481436729431,
        "codebertscore_f1-54": 0.6207683682441711,
        "codebertscore_f3-54": 0.6212499141693115,
        "codebertscore_f1-47": 0.7827653884887695,
        "codebertscore_f3-47": 0.7817592024803162,
        "codebertscore_f1-43": 0.809737503528595,
        "codebertscore_f3-43": 0.7924433946609497,
        "codebertscore_f1-27": 0.9695757031440735,
        "codebertscore_f3-27": 0.9720372557640076,
        "codebertscore_f1-17": 0.6168317794799805,
        "codebertscore_f3-17": 0.6150190234184265,
        "codebertscore_f1-164": 0.622104287147522,
        "codebertscore_f3-164": 0.6263768076896667,
        "codebertscore_f1-117": 0.841561496257782,
        "codebertscore_f3-117": 0.8431691527366638,
        "codebertscore_f1-13": 0.5635961890220642,
        "codebertscore_f3-13": 0.5217165946960449,
        "codebertscore_f1-136": 0.631393313407898,
        "codebertscore_f3-136": 0.6180936694145203,
        "codebertscore_f1-88": 0.8304197788238525,
        "codebertscore_f3-88": 0.8220301866531372,
        "codebertscore_f1-4": 0.6513980031013489,
        "codebertscore_f3-4": 0.6614894270896912,
        "codebertscore_f1-41": 0.6301224231719971,
        "codebertscore_f3-41": 0.6234530210494995,
        "codebertscore_f1-44": 0.6600142121315002,
        "codebertscore_f3-44": 0.6672558188438416,
        "codebertscore_f1-102": 0.8039926290512085,
        "codebertscore_f3-102": 0.8017767667770386,
        "codebertscore_f1-140": 0.843062162399292,
        "codebertscore_f3-140": 0.8331587314605713,
        "codebertscore_f1-122": 0.6835953593254089,
        "codebertscore_f3-122": 0.700052797794342,
        "codebertscore_s_f1-153": 0.8835784196853638,
        "codebertscore_s_f3-153": 0.9071123600006104,
        "codebertscore_s_f1-18": 0.6840341687202454,
        "codebertscore_s_f3-18": 0.689258337020874,
        "codebertscore_s_f1-3": 0.970511794090271,
        "codebertscore_s_f3-3": 0.9756330847740173,
        "codebertscore_s_f1-184": 0.6080403327941895,
        "codebertscore_s_f3-184": 0.6021129488945007,
        "codebertscore_s_f1-54": 0.6262274980545044,
        "codebertscore_s_f3-54": 0.6262723207473755,
        "codebertscore_s_f1-47": 0.8007860779762268,
        "codebertscore_s_f3-47": 0.7962263226509094,
        "codebertscore_s_f1-43": 0.8243715763092041,
        "codebertscore_s_f3-43": 0.8088611364364624,
        "codebertscore_s_f1-27": 0.9739221930503845,
        "codebertscore_s_f3-27": 0.9758527278900146,
        "codebertscore_s_f1-17": 0.611141562461853,
        "codebertscore_s_f3-17": 0.6040668487548828,
        "codebertscore_s_f1-164": 0.6395127773284912,
        "codebertscore_s_f3-164": 0.6464102864265442,
        "codebertscore_s_f1-117": 0.857363224029541,
        "codebertscore_s_f3-117": 0.8592550158500671,
        "codebertscore_s_f1-13": 0.6464117169380188,
        "codebertscore_s_f3-13": 0.5947315096855164,
        "codebertscore_s_f1-136": 0.6183772683143616,
        "codebertscore_s_f3-136": 0.6064645648002625,
        "codebertscore_s_f1-88": 0.8403563499450684,
        "codebertscore_s_f3-88": 0.8318179845809937,
        "codebertscore_s_f1-4": 0.6678617000579834,
        "codebertscore_s_f3-4": 0.6797494292259216,
        "codebertscore_s_f1-41": 0.6286702156066895,
        "codebertscore_s_f3-41": 0.6214573383331299,
        "codebertscore_s_f1-44": 0.6749778389930725,
        "codebertscore_s_f3-44": 0.692653238773346,
        "codebertscore_s_f1-102": 0.8128515481948853,
        "codebertscore_s_f3-102": 0.8096326589584351,
        "codebertscore_s_f1-140": 0.8498715162277222,
        "codebertscore_s_f3-140": 0.8392542600631714,
        "codebertscore_s_f1-122": 0.709749162197113,
        "codebertscore_s_f3-122": 0.7264205813407898,
        "gpt35_nsnr-153": 4,
        "raw_gpt35_nsnr-153": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-184": 3,
        "raw_gpt35_nsnr-184": "3",
        "gpt35_nsnr-54": 3,
        "raw_gpt35_nsnr-54": "3",
        "gpt35_nsnr-47": 4,
        "raw_gpt35_nsnr-47": "4",
        "gpt35_nsnr-43": 4,
        "raw_gpt35_nsnr-43": "4",
        "gpt35_nsnr-27": 4,
        "raw_gpt35_nsnr-27": "4",
        "gpt35_nsnr-17": 0,
        "raw_gpt35_nsnr-17": "0",
        "gpt35_nsnr-164": 3,
        "raw_gpt35_nsnr-164": "3",
        "gpt35_nsnr-117": 4,
        "raw_gpt35_nsnr-117": "4",
        "gpt35_nsnr-13": 2,
        "raw_gpt35_nsnr-13": "2",
        "gpt35_nsnr-136": 0,
        "raw_gpt35_nsnr-136": "0",
        "gpt35_nsnr-88": 4,
        "raw_gpt35_nsnr-88": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-41": 4,
        "raw_gpt35_nsnr-41": "4",
        "gpt35_nsnr-44": 4,
        "raw_gpt35_nsnr-44": "4",
        "gpt35_nsnr-102": 4,
        "raw_gpt35_nsnr-102": "4",
        "gpt35_nsnr-140": 4,
        "raw_gpt35_nsnr-140": "4",
        "gpt35_nsnr-122": 4,
        "raw_gpt35_nsnr-122": "4",
        "gpt35_nswr-153": 4,
        "raw_gpt35_nswr-153": "4",
        "gpt35_nswr-18": 4,
        "raw_gpt35_nswr-18": "4",
        "gpt35_nswr-3": 4,
        "raw_gpt35_nswr-3": "4",
        "gpt35_nswr-184": 4,
        "raw_gpt35_nswr-184": "4",
        "gpt35_nswr-54": 3,
        "raw_gpt35_nswr-54": "3",
        "gpt35_nswr-47": 4,
        "raw_gpt35_nswr-47": "4",
        "gpt35_nswr-43": 3,
        "raw_gpt35_nswr-43": "3",
        "gpt35_nswr-27": 4,
        "raw_gpt35_nswr-27": "4",
        "gpt35_nswr-17": 0,
        "raw_gpt35_nswr-17": "0",
        "gpt35_nswr-164": 3,
        "raw_gpt35_nswr-164": "3",
        "gpt35_nswr-117": 4,
        "raw_gpt35_nswr-117": "4",
        "gpt35_nswr-13": 4,
        "raw_gpt35_nswr-13": "4",
        "gpt35_nswr-136": 0,
        "raw_gpt35_nswr-136": "0",
        "gpt35_nswr-88": 4,
        "raw_gpt35_nswr-88": "4",
        "gpt35_nswr-4": 4,
        "raw_gpt35_nswr-4": "4",
        "gpt35_nswr-41": 4,
        "raw_gpt35_nswr-41": "4",
        "gpt35_nswr-44": 4,
        "raw_gpt35_nswr-44": "4",
        "gpt35_nswr-102": 4,
        "raw_gpt35_nswr-102": "4",
        "gpt35_nswr-140": 4,
        "raw_gpt35_nswr-140": "4",
        "gpt35_nswr-122": 4,
        "raw_gpt35_nswr-122": "4"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is less then 100. \n    // Example:\n    // is_multiply_prime(30) == True\n    // 30 = 2 * 3 * 5\n    public static boolean isMultiplyPrime(int a) {\n",
        "snippet": [
            "        class IsPrime {\n            public static boolean is_prime(int n) {\n                for (int j = 2; j < n; j++) {\n                    if (n % j == 0) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        }\n        for (int i = 2; i < 101; i++) {\n            if (!IsPrime.is_prime(i)) {\n                continue;\n            }\n            for (int j = i; j < 101; j++) {\n                if (!IsPrime.is_prime(j)) {\n                    continue;\n                }\n                for (int k = j; k < 101; k++) {\n                    if (!IsPrime.is_prime(k)) {\n                        continue;\n                    }\n                    if (i * j * k == a) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}"
        ],
        "simplified": "Write a function that returns true if the given number is the multiplication of 3 prime numbers and false otherwise. Knowing that (a) is less then 100.",
        "task_id": "75",
        "34": "int count = 0;\n        for (int i = 2; i <= a; i++) {\n            if (a % i == 0) {\n                while (a % i == 0) {\n                    a /= i;\n                }\n                count++;\n            }\n        }\n        return count == 3;",
        "grade-34": {
            "execution": 0
        },
        "6": "// TODO:\n        return false;",
        "grade-6": {
            "execution": 0
        },
        "92": "if (a == 1) return false;\n        if (a == 2) return true;\n        return MathUtils.isProductPrimeNumbers(a);",
        "grade-92": {
            "execution": 0
        },
        "81": "if (a == 1) return false;\n        int i = 2;\n        while (i < a) {\n            if (a % i == 0) {\n                if (isPrime(i)) {\n                    a /= i;\n                    if (isPrime(a)) {\n                        return true;\n                    }\n                }\n            }\n            i++;\n        }\n        return false;",
        "grade-81": {
            "execution": 0
        },
        "76": "if (a == 1) {\n            return false;\n        }\n        int max = (int) Math.sqrt(a);\n        for (int i = 2; i <= max; i++) {\n            if (a % i == 0) {\n                int x = a / i;\n                if (isPrime(i) && isPrime(x)) {\n                    return true;\n                }\n            }\n        }\n        return false;",
        "grade-76": {
            "execution": 0
        },
        "44": "// Write your code here\n        return false;",
        "grade-44": {
            "execution": 0
        },
        "31": "int m = a;\n        for (int i = 2; i <= m; i++) {\n            if (a % i == 0) {\n                m = a / i;\n                for (int j = 2; j <= m; j++) {\n                    if (m % j == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;",
        "grade-31": {
            "execution": 0
        },
        "27": "int counter = 0;\n        for (int i = 2; i <= a; i++) {\n            if (counter > 3) return false;\n            if (a % i == 0) {\n                a /= i;\n                i--;\n                counter++;\n            }\n        }\n        return counter == 3;",
        "grade-27": {
            "execution": 1
        },
        "149": "List<Integer> primes = new ArrayList<>();\n        // get all primes less then 100\n        for (int i = 2; i < 100; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        // primes after 3\n        primes = primes.subList(2, primes.size());\n        // first\n        for (int i = 0; i < primes.size(); i++) {\n            // second\n            for (int j = 0; j < primes.size(); j++) {\n                // third\n                for (int k = 0; k < primes.size(); k++) {\n                    // first * second * third == a\n                    if (primes.get(i) * primes.get(j) * primes.get(k) == a) {\n                        System.out.println(primes.get(i) + \" * \" + primes.get(j) + \" * \" + primes.get(k) + \" == \" + a);\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;",
        "grade-149": {
            "execution": 0
        },
        "9": "// TODO: Implementation\n        return false;",
        "grade-9": {
            "execution": 0
        },
        "8": "//return a == 6;\n        for (int i = 2; i <= a / 2; i++) {\n            if (a % i == 0) {\n                return isPrime(i) && isMultiplyPrime(a / i);\n            }\n        }\n        return isPrime(a);",
        "grade-8": {
            "execution": 0
        },
        "28": "// get all prime numbers (1-100)\n        // try to divide a by prime numbers\n        // if a is divided by three prime numbers then return true\n        // otherwise return false\n        ArrayList<Integer> primes = new ArrayList<Integer>();\n        primes.add(2);\n        primes.add(3);\n        primes.add(5);\n        primes.add(7);\n        primes.add(11);\n        primes.add(13);\n        primes.add(17);\n        primes.add(19);\n        primes.add(23);\n        primes.add(29);\n        primes.add(31);\n        primes.add(37);\n        primes.add(41);\n        primes.add(43);\n        primes.add(47);\n        primes.add(53);\n        primes.add(59);\n        primes.add(61);\n        primes.add(67);\n        primes.add(71);\n        primes.add(73);\n        primes.add(79);\n        primes.add(83);\n        primes.add(89);\n        primes.add(97);\n        int counter = 0;\n        for (int i = 0; i < primes.size(); i++) {\n            if (a % primes.get(i) == 0) {\n                counter++;\n            }\n        }\n        if (counter == 3) {\n            return true;\n        }\n        return false;",
        "grade-28": {
            "execution": 0
        },
        "74": "int div = 2;\n        while (a != 1) {\n            while (a % div == 0) {\n                a /= div;\n            }\n            div++;\n        }\n        return div == 4;",
        "grade-74": {
            "execution": 0
        },
        "78": "// Your code here",
        "grade-78": {
            "execution": 0
        },
        "185": "int[] prime = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        int prime_index = 0;\n        while (a != 1) {\n            if (a % prime[prime_index] == 0) {\n                a /= prime[prime_index];\n            } else {\n                prime_index++;\n            }\n        }\n        return prime_index == 2;",
        "grade-185": {
            "execution": 0
        },
        "67": "if (a == 1) return false;\n        // change code here\n        return false;",
        "grade-67": {
            "execution": 0
        },
        "148": "return IntStream.range(1, 100).filter(n -> a % n == 0).filter(n -> isPrime(n)).distinct().toArray().length == 3;",
        "grade-148": {
            "execution": 0
        },
        "75": "// Please write your code here",
        "grade-75": {
            "execution": 0
        },
        "159": "if (a == 1) return false;\n        if (a == 2) return true;\n        if (a == 3) return true;\n        if (a == 4) return false;\n        if (a == 5) return true;\n        if (a == 6) return true;\n        if (a == 7) return true;\n        if (a == 8) return false;\n        if (a == 9) return false;\n        if (a == 10) return true;\n        if (a == 11) return true;\n        if (a == 12) return true;\n        if (a == 13) return true;\n        if (a == 14) return false;\n        if (a == 15) return true;\n        if (a == 16) return false;\n        if (a == 17) return true;\n        if (a == 18) return true;\n        if (a == 19) return true;\n        if (a == 20) return true;\n        if (a == 21) return false;\n        if (a == 22) return false;\n        if (a == 23) return true;\n        if (a == 24) return true;\n        if (a == 25) return true;\n        if (a == 26) return false;\n        if (a == 27) return false;\n        if (a == 28) return false;\n        if (a == 29) return true;\n        if (a == 30) return true;\n        if (a == 31) return true;\n        if (a == 32) return false;\n        if (a == 33) return false;\n        if (a == 34) return false;\n        if (a == 35) return true;\n        if (a == 36) return true;\n        if (a == 37) return true;\n        if (a == 38) return false;\n        if (a == 39) return false;\n        if (a == 40) return true;\n        if (a == 41) return true;\n        if (a == 42) return true;\n        if (a == 43) return true;\n        if (a == 44) return false;\n        if (a == 45) return true;\n        if (a == 46) return false;\n        if (a ==",
        "grade-159": {
            "execution": 0
        },
        "93": "// Write your code here.\n        return true;",
        "grade-93": {
            "execution": 0
        },
        "bleu-34": 0.07131473192935892,
        "bleu-6": 3.338270664747939e-11,
        "bleu-92": 0.001960816425401166,
        "bleu-81": 0.11174677889539375,
        "bleu-76": 0.17705185291350195,
        "bleu-44": 4.710954447800429e-09,
        "bleu-31": 0.1877881448218911,
        "bleu-27": 0.07824267235754694,
        "bleu-149": 0.2544594649919695,
        "bleu-9": 5.440476962791377e-10,
        "bleu-8": 0.08060273552809155,
        "bleu-28": 0.10558216810547368,
        "bleu-74": 0.008017744606866148,
        "bleu-78": 0.0,
        "bleu-185": 0.06272522719707208,
        "bleu-67": 4.75317951729181e-05,
        "bleu-148": 0.009018452533617119,
        "bleu-75": 0.0,
        "bleu-159": 0.014513896209605354,
        "bleu-93": 2.817821289486322e-08,
        "codebleu-34": 0.19174239169198976,
        "codebleu-6": 0.015015015852037284,
        "codebleu-92": 0.08444087605943007,
        "codebleu-81": 0.23607946911795033,
        "codebleu-76": 0.3064564993173681,
        "codebleu-44": 0.02102103433430148,
        "codebleu-31": 0.28517752674143965,
        "codebleu-27": 0.1989152856580269,
        "codebleu-149": 0.6049938549580234,
        "codebleu-9": 0.015015018800546554,
        "codebleu-8": 0.1945638202552601,
        "codebleu-28": 0.5023816306918861,
        "codebleu-74": 0.11842820189214519,
        "codebleu-78": 0.009009009009009009,
        "codebleu-185": 0.15829323922268396,
        "codebleu-67": 0.0450607615357106,
        "codebleu-148": 0.12132187668155062,
        "codebleu-75": 0.015015015015015013,
        "codebleu-159": 0.3865403865403865,
        "codebleu-93": 0.0270270711242154,
        "chrf-34": 0.13558292643135786,
        "chrf-6": 0.037114418148513295,
        "chrf-92": 0.1270820109434173,
        "chrf-81": 0.24798252441920549,
        "chrf-76": 0.2875940973042565,
        "chrf-44": 0.047650528897752474,
        "chrf-31": 0.25758699504257776,
        "chrf-27": 0.1737408212895441,
        "chrf-149": 0.36258771443285637,
        "chrf-9": 0.052071478499256314,
        "chrf-8": 0.20287442557854937,
        "chrf-28": 0.26280515150332806,
        "chrf-74": 0.05816878097592259,
        "chrf-78": 0.007783715546321771,
        "chrf-185": 0.14655216536291582,
        "chrf-67": 0.08838062587284252,
        "chrf-148": 0.08771196757847832,
        "chrf-75": 0.018015264666917507,
        "chrf-159": 0.16129869249433834,
        "chrf-93": 0.045057200227158596,
        "rougel-34": 0.336283185840708,
        "rougel-6": 0.03468208092485549,
        "rougel-92": 0.19191919191919193,
        "rougel-81": 0.41702127659574467,
        "rougel-76": 0.43200000000000005,
        "rougel-44": 0.03428571428571429,
        "rougel-31": 0.45643153526970953,
        "rougel-27": 0.32456140350877194,
        "rougel-149": 0.4577114427860696,
        "rougel-9": 0.03448275862068965,
        "rougel-8": 0.314410480349345,
        "rougel-28": 0.28070175438596495,
        "rougel-74": 0.22330097087378642,
        "rougel-78": 0.0,
        "rougel-185": 0.1911764705882353,
        "rougel-67": 0.11956521739130434,
        "rougel-148": 0.21296296296296297,
        "rougel-75": 0.0,
        "rougel-159": 0.20285261489698894,
        "rougel-93": 0.045454545454545456,
        "meteor-34": 0.20581224621867347,
        "meteor-6": 0.019616551928344068,
        "meteor-92": 0.12549245038659293,
        "meteor-81": 0.2796591042999435,
        "meteor-76": 0.3335318323838315,
        "meteor-44": 0.0195904487321653,
        "meteor-31": 0.3307948277725216,
        "meteor-27": 0.21518444062941974,
        "meteor-149": 0.4557332655179288,
        "meteor-9": 0.01960349164077526,
        "meteor-8": 0.2223812441092144,
        "meteor-28": 0.358556312358541,
        "meteor-74": 0.1284906371163652,
        "meteor-78": 0.0,
        "meteor-185": 0.16208544021415822,
        "meteor-67": 0.07171425440656211,
        "meteor-148": 0.11859205922155783,
        "meteor-75": 0.0,
        "meteor-159": 0.2077324803440954,
        "meteor-93": 0.01329787234042553,
        "ruby-34": 0.2168674698795181,
        "ruby-6": 0.01807228915662651,
        "ruby-92": 0.11445783132530118,
        "ruby-81": 0.27108433734939763,
        "ruby-76": 0.30722891566265065,
        "ruby-44": 0.01807228915662651,
        "ruby-31": 0.3192771084337349,
        "ruby-27": 0.2168674698795181,
        "ruby-149": 0.30932203389830504,
        "ruby-9": 0.01807228915662651,
        "ruby-8": 0.19277108433734935,
        "ruby-28": 0.18620689655172418,
        "ruby-74": 0.13855421686746983,
        "ruby-78": 0.0,
        "ruby-185": 0.12048192771084343,
        "ruby-67": 0.0662650602409639,
        "ruby-148": 0.1325301204819277,
        "ruby-75": 0.0,
        "ruby-159": 0.13548387096774195,
        "ruby-93": 0.02409638554216864,
        "codebertscore_f1-34": 0.7494677901268005,
        "codebertscore_f3-34": 0.7104243636131287,
        "codebertscore_f1-6": 0.5283980965614319,
        "codebertscore_f3-6": 0.48056918382644653,
        "codebertscore_f1-92": 0.6911599040031433,
        "codebertscore_f3-92": 0.6503928899765015,
        "codebertscore_f1-81": 0.7929102182388306,
        "codebertscore_f3-81": 0.7638134956359863,
        "codebertscore_f1-76": 0.8021242022514343,
        "codebertscore_f3-76": 0.7862861752510071,
        "codebertscore_f1-44": 0.532669186592102,
        "codebertscore_f3-44": 0.4901186525821686,
        "codebertscore_f1-31": 0.7925490140914917,
        "codebertscore_f3-31": 0.7534506916999817,
        "codebertscore_f1-27": 0.7545648217201233,
        "codebertscore_f3-27": 0.7221508026123047,
        "codebertscore_f1-149": 0.7871502041816711,
        "codebertscore_f3-149": 0.8116617202758789,
        "codebertscore_f1-9": 0.5325419306755066,
        "codebertscore_f3-9": 0.4872417449951172,
        "codebertscore_f1-8": 0.759275496006012,
        "codebertscore_f3-8": 0.7364609837532043,
        "codebertscore_f1-28": 0.7334093451499939,
        "codebertscore_f3-28": 0.7537288069725037,
        "codebertscore_f1-74": 0.6895700097084045,
        "codebertscore_f3-74": 0.6415010094642639,
        "codebertscore_f1-78": 0.45426419377326965,
        "codebertscore_f3-78": 0.4217812716960907,
        "codebertscore_f1-185": 0.6980916261672974,
        "codebertscore_f3-185": 0.6880462169647217,
        "codebertscore_f1-67": 0.640099823474884,
        "codebertscore_f3-67": 0.5921878814697266,
        "codebertscore_f1-148": 0.652773380279541,
        "codebertscore_f3-148": 0.6276049613952637,
        "codebertscore_f1-75": 0.4798510670661926,
        "codebertscore_f3-75": 0.4429977536201477,
        "codebertscore_f1-159": 0.7139800190925598,
        "codebertscore_f3-159": 0.6983867883682251,
        "codebertscore_f1-93": 0.5255159139633179,
        "codebertscore_f3-93": 0.47871705889701843,
        "codebertscore_s_f1-34": 0.7925050854682922,
        "codebertscore_s_f3-34": 0.7670125961303711,
        "codebertscore_s_f1-6": 0.6185454726219177,
        "codebertscore_s_f3-6": 0.5832465887069702,
        "codebertscore_s_f1-92": 0.7449824810028076,
        "codebertscore_s_f3-92": 0.7236182689666748,
        "codebertscore_s_f1-81": 0.8122722506523132,
        "codebertscore_s_f3-81": 0.7913736701011658,
        "codebertscore_s_f1-76": 0.8248556852340698,
        "codebertscore_s_f3-76": 0.8162208795547485,
        "codebertscore_s_f1-44": 0.6020002961158752,
        "codebertscore_s_f3-44": 0.5816434621810913,
        "codebertscore_s_f1-31": 0.8282569050788879,
        "codebertscore_s_f3-31": 0.7974697947502136,
        "codebertscore_s_f1-27": 0.7972065806388855,
        "codebertscore_s_f3-27": 0.7781258225440979,
        "codebertscore_s_f1-149": 0.8009167313575745,
        "codebertscore_s_f3-149": 0.8310637474060059,
        "codebertscore_s_f1-9": 0.6116790771484375,
        "codebertscore_s_f3-9": 0.5838531851768494,
        "codebertscore_s_f1-8": 0.8031809329986572,
        "codebertscore_s_f3-8": 0.7976332902908325,
        "codebertscore_s_f1-28": 0.7521913647651672,
        "codebertscore_s_f3-28": 0.7822338342666626,
        "codebertscore_s_f1-74": 0.7398489117622375,
        "codebertscore_s_f3-74": 0.7088636159896851,
        "codebertscore_s_f1-78": 0.516217827796936,
        "codebertscore_s_f3-78": 0.4975333511829376,
        "codebertscore_s_f1-185": 0.7265669107437134,
        "codebertscore_s_f3-185": 0.7213541865348816,
        "codebertscore_s_f1-67": 0.7004715204238892,
        "codebertscore_s_f3-67": 0.6744985580444336,
        "codebertscore_s_f1-148": 0.6991245746612549,
        "codebertscore_s_f3-148": 0.6940547823905945,
        "codebertscore_s_f1-75": 0.5348547697067261,
        "codebertscore_s_f3-75": 0.5119688510894775,
        "codebertscore_s_f1-159": 0.733943521976471,
        "codebertscore_s_f3-159": 0.7167487740516663,
        "codebertscore_s_f1-93": 0.6105583310127258,
        "codebertscore_s_f3-93": 0.5920682549476624,
        "gpt35_nsnr-34": 3,
        "raw_gpt35_nsnr-34": "3",
        "gpt35_nsnr-6": 2,
        "raw_gpt35_nsnr-6": "2",
        "gpt35_nsnr-92": 3,
        "raw_gpt35_nsnr-92": "3",
        "gpt35_nsnr-81": 3,
        "raw_gpt35_nsnr-81": "3",
        "gpt35_nsnr-76": 3,
        "raw_gpt35_nsnr-76": "3",
        "gpt35_nsnr-44": 2,
        "raw_gpt35_nsnr-44": "2",
        "gpt35_nsnr-31": 2,
        "raw_gpt35_nsnr-31": "2",
        "gpt35_nsnr-27": 4,
        "raw_gpt35_nsnr-27": "4",
        "gpt35_nsnr-149": 4,
        "raw_gpt35_nsnr-149": "4",
        "gpt35_nsnr-9": 2,
        "raw_gpt35_nsnr-9": "2",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-74": 3,
        "raw_gpt35_nsnr-74": "3",
        "gpt35_nsnr-78": 0,
        "raw_gpt35_nsnr-78": "3 - The code correctly checks if the given number is the multiplication of 3 prime numbers. However, it does not handle the case where the given number is less than 2, which should return false.",
        "gpt35_nsnr-185": 3,
        "raw_gpt35_nsnr-185": "3",
        "gpt35_nsnr-67": 2,
        "raw_gpt35_nsnr-67": "2",
        "gpt35_nsnr-148": 3,
        "raw_gpt35_nsnr-148": "3",
        "gpt35_nsnr-75": 0,
        "raw_gpt35_nsnr-75": "3 - The code correctly checks if the given number is the multiplication of 3 prime numbers. However, it does not handle the case where the given number is less than 2, which should return false according to the problem statement.",
        "gpt35_nsnr-159": 1,
        "raw_gpt35_nsnr-159": "1",
        "gpt35_nsnr-93": 2,
        "raw_gpt35_nsnr-93": "2",
        "gpt35_nswr-34": 3,
        "raw_gpt35_nswr-34": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-92": 3,
        "raw_gpt35_nswr-92": "3",
        "gpt35_nswr-81": 2,
        "raw_gpt35_nswr-81": "2",
        "gpt35_nswr-76": 3,
        "raw_gpt35_nswr-76": "3",
        "gpt35_nswr-44": 3,
        "raw_gpt35_nswr-44": "3",
        "gpt35_nswr-31": 2,
        "raw_gpt35_nswr-31": "2",
        "gpt35_nswr-27": 3,
        "raw_gpt35_nswr-27": "3",
        "gpt35_nswr-149": 3,
        "raw_gpt35_nswr-149": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-74": 3,
        "raw_gpt35_nswr-74": "3",
        "gpt35_nswr-78": 3,
        "raw_gpt35_nswr-78": "3",
        "gpt35_nswr-185": 3,
        "raw_gpt35_nswr-185": "3",
        "gpt35_nswr-67": 0,
        "raw_gpt35_nswr-67": "0",
        "gpt35_nswr-148": 2,
        "raw_gpt35_nswr-148": "2",
        "gpt35_nswr-75": 3,
        "raw_gpt35_nswr-75": "3",
        "gpt35_nswr-159": 0,
        "raw_gpt35_nswr-159": "0",
        "gpt35_nswr-93": 0,
        "raw_gpt35_nswr-93": "0"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive floating point number, it can be decomposed into\n    // and integer part (largest integer smaller than given number) and decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public static float truncateNumber(float number) {\n",
        "snippet": [
            "        return number % 1.0;\n    }\n}"
        ],
        "simplified": "Given a positive floating point number, it can be decomposed into and integer part (largest integer smaller than given number) and decimals (leftover part always smaller than 1). Return the decimal part of the number.",
        "task_id": "2",
        "138": "int integerPart = (int) number;\n        float decimalPart = number - integerPart;\n        return decimalPart;",
        "grade-138": {
            "execution": 1
        },
        "14": "// Insert your code here\n        return number - (int)number;",
        "grade-14": {
            "execution": 1
        },
        "3": "// >>> truncate_number(4.4)\n        // 0.4\n        // >>> truncate_number(4.5)\n        // 0.5\n        // >>> truncate_number(4.6)\n        // 0.6\n        // >>> truncate_number(4.9999)\n        // 0.9999\n        // >>> truncate_number(5.0)\n        // 0.0\n        return 0;",
        "grade-3": {
            "execution": 0
        },
        "171": "int whole = (int) number;\n        float decimals = number - whole;\n        return decimals;",
        "grade-171": {
            "execution": 1
        },
        "50": "return (number - (int)number);",
        "grade-50": {
            "execution": 1
        },
        "39": "BigDecimal bd = new BigDecimal(Float.toString(number));\n        bd = bd.setScale(2, BigDecimal.ROUND_FLOOR);\n        return Float.parseFloat(bd.toString());",
        "grade-39": {
            "execution": 0
        },
        "34": "// Your code goes here!\n        return number - (int)number;",
        "grade-34": {
            "execution": 1
        },
        "17": "// if (number < 0) {\n        //     return truncateNumber(-number);\n        // }\n        // String[] nums = String.valueOf(number).split(\"\\\\.\");\n        // String decimals = nums[1];\n        // return Float.parseFloat(\"0.\" + decimals);\n        return number - Math.floor(number);",
        "grade-17": {
            "execution": 0
        },
        "13": "// BEGIN SOLUTION\n        // 1. Use Math.floor to truncate the number\n        float truncatedNumber = (float) Math.floor(number);\n        // 2. Calculate decimal part\n        float decimalPart = number - truncatedNumber;\n        // 3. Return it\n        return decimalPart;\n        // END SOLUTION",
        "grade-13": {
            "execution": 1
        },
        "152": "// Start by subtracting a factor of 1.0 to get the remainder,\n        // and then reverse the operation to get the desired result.\n        // Note that any number divided by 1.0 is the same number.\n        // >>> 3.5 - 3.0\n        // 0.5\n        // >>> (3.5 - 3.0) + 3.0\n        // 3.5\n        return (number - (int) number) + (int) number;",
        "grade-152": {
            "execution": 0
        },
        "117": "return (number - (int)number);",
        "grade-117": {
            "execution": 1
        },
        "11": "// ... your code here\n        int integral = (int)number;\n        return number - integral;",
        "grade-11": {
            "execution": 1
        },
        "127": "// >>> 3.5\n        // 3.5\n        // >>> int(3.5)\n        // 3\n        // >>> 3.5 - int(3.5)\n        // 0.5\n        return number - (int) number;",
        "grade-127": {
            "execution": 1
        },
        "90": "// >>> truncate_number(3.5)\n        // 0.5\n        return number - (int) number;",
        "grade-90": {
            "execution": 1
        },
        "4": "return number % 1;",
        "grade-4": {
            "execution": 1
        },
        "33": "return number;",
        "grade-33": {
            "execution": 0
        },
        "35": "// Your code here...\n        return 0;",
        "grade-35": {
            "execution": 0
        },
        "107": "int integer = (int) number;\n        float decimals = number - integer;\n        return decimals;",
        "grade-107": {
            "execution": 1
        },
        "133": "// TODO\n        return 0;",
        "grade-133": {
            "execution": 0
        },
        "119": "double integer_part = Math.floor(number);\n        double decimal_part = number - integer_part;\n        return (float)decimal_part;",
        "grade-119": {
            "execution": 1
        },
        "bleu-138": 0.022731543567022866,
        "bleu-14": 0.06285596338261262,
        "bleu-3": 0.01227109341807888,
        "bleu-171": 0.028265205879007452,
        "bleu-50": 0.05522397783539471,
        "bleu-39": 0.011239503708631486,
        "bleu-34": 0.05816635421147513,
        "bleu-17": 0.012015670928740571,
        "bleu-13": 0.015201746165198808,
        "bleu-152": 0.01589020724534756,
        "bleu-117": 0.05522397783539471,
        "bleu-11": 0.04319402267866687,
        "bleu-127": 0.01662306444973684,
        "bleu-90": 0.03956623635711305,
        "bleu-4": 0.3177235575108144,
        "bleu-33": 0.08525588607164655,
        "bleu-35": 0.08913765521398126,
        "bleu-107": 0.028265205879007452,
        "bleu-133": 0.1089644800332157,
        "bleu-119": 0.023287349035853482,
        "codebleu-138": 0.2715617715617715,
        "codebleu-14": 0.2715617715617715,
        "codebleu-3": 0.33216783216783213,
        "codebleu-171": 0.2715617715617715,
        "codebleu-50": 0.2715617715617715,
        "codebleu-39": 0.2843822843822843,
        "codebleu-34": 0.2715617715617715,
        "codebleu-17": 0.38344988344988346,
        "codebleu-13": 0.34498834498834496,
        "codebleu-152": 0.34498834498834496,
        "codebleu-117": 0.2715617715617715,
        "codebleu-11": 0.2715617715617715,
        "codebleu-127": 0.33216783216783213,
        "codebleu-90": 0.33216783216783213,
        "codebleu-4": 0.3667218501188527,
        "codebleu-33": 0.20753015076717318,
        "codebleu-35": 0.21095571095571092,
        "codebleu-107": 0.2715617715617715,
        "codebleu-133": 0.2715617715617715,
        "codebleu-119": 0.2843822843822843,
        "chrf-138": 0.24165200464654565,
        "chrf-14": 0.4415785700459891,
        "chrf-3": 0.1689709073637416,
        "chrf-171": 0.2750562736153539,
        "chrf-50": 0.3803087332070736,
        "chrf-39": 0.18567414816818634,
        "chrf-34": 0.44565677800122844,
        "chrf-17": 0.19631762015531776,
        "chrf-13": 0.14055381658324406,
        "chrf-152": 0.1389280378794482,
        "chrf-117": 0.3803087332070736,
        "chrf-11": 0.38516522228262157,
        "chrf-127": 0.35504026467932887,
        "chrf-90": 0.4173163175647288,
        "chrf-4": 0.7385244328778371,
        "chrf-33": 0.6257253058054789,
        "chrf-35": 0.2570410150326047,
        "chrf-107": 0.2668579745565102,
        "chrf-133": 0.24457568780738712,
        "chrf-119": 0.21508675458009907,
        "rougel-138": 0.1290322580645161,
        "rougel-14": 0.2608695652173913,
        "rougel-3": 0.06521739130434782,
        "rougel-171": 0.14814814814814814,
        "rougel-50": 0.3157894736842105,
        "rougel-39": 0.10909090909090909,
        "rougel-34": 0.25,
        "rougel-17": 0.13186813186813187,
        "rougel-13": 0.08695652173913045,
        "rougel-152": 0.09174311926605504,
        "rougel-117": 0.3157894736842105,
        "rougel-11": 0.2,
        "rougel-127": 0.09375,
        "rougel-90": 0.18181818181818182,
        "rougel-4": 0.7142857142857143,
        "rougel-33": 0.5,
        "rougel-35": 0.3,
        "rougel-107": 0.14814814814814814,
        "rougel-133": 0.4,
        "rougel-119": 0.125,
        "meteor-138": 0.145631067961165,
        "meteor-14": 0.15789473684210528,
        "meteor-3": 0.19245426829268295,
        "meteor-171": 0.15151515151515152,
        "meteor-50": 0.1648351648351648,
        "meteor-39": 0.15748031496062992,
        "meteor-34": 0.15625,
        "meteor-17": 0.21472392638036808,
        "meteor-13": 0.1773049645390071,
        "meteor-152": 0.16574585635359115,
        "meteor-117": 0.1648351648351648,
        "meteor-11": 0.30943627450980393,
        "meteor-127": 0.18382352941176472,
        "meteor-90": 0.23809523809523814,
        "meteor-4": 0.5627906976744186,
        "meteor-33": 0.3042328042328042,
        "meteor-35": 0.34307065217391297,
        "meteor-107": 0.15151515151515152,
        "meteor-133": 0.2937420178799489,
        "meteor-119": 0.19230769230769232,
        "ruby-138": 0.09090909090909094,
        "ruby-14": 0.0714285714285714,
        "ruby-3": 0.02409638554216864,
        "ruby-171": 0.11111111111111116,
        "ruby-50": 0.19999999999999996,
        "ruby-39": 0.06521739130434778,
        "ruby-34": 0.06666666666666665,
        "ruby-17": 0.07317073170731703,
        "ruby-13": 0.050000000000000044,
        "ruby-152": 0.040000000000000036,
        "ruby-117": 0.19999999999999996,
        "ruby-11": 0.09523809523809523,
        "ruby-127": 0.036363636363636376,
        "ruby-90": 0.08333333333333337,
        "ruby-4": 0.5555555555555556,
        "ruby-33": 0.33333333333333337,
        "ruby-35": 0.09090909090909094,
        "ruby-107": 0.11111111111111116,
        "ruby-133": 0.2222222222222222,
        "ruby-119": 0.08695652173913049,
        "codebertscore_f1-138": 0.730320394039154,
        "codebertscore_f3-138": 0.7441145777702332,
        "codebertscore_f1-14": 0.7329375743865967,
        "codebertscore_f3-14": 0.7732357978820801,
        "codebertscore_f1-3": 0.6773921847343445,
        "codebertscore_f3-3": 0.7168766856193542,
        "codebertscore_f1-171": 0.7219415307044983,
        "codebertscore_f3-171": 0.7443887591362,
        "codebertscore_f1-50": 0.798880398273468,
        "codebertscore_f3-50": 0.7947465777397156,
        "codebertscore_f1-39": 0.690162181854248,
        "codebertscore_f3-39": 0.7290171384811401,
        "codebertscore_f1-34": 0.7365089654922485,
        "codebertscore_f3-34": 0.7734506726264954,
        "codebertscore_f1-17": 0.7068381905555725,
        "codebertscore_f3-17": 0.7753285765647888,
        "codebertscore_f1-13": 0.6730385422706604,
        "codebertscore_f3-13": 0.7078741788864136,
        "codebertscore_f1-152": 0.7186073064804077,
        "codebertscore_f3-152": 0.7951740622520447,
        "codebertscore_f1-117": 0.798880398273468,
        "codebertscore_f3-117": 0.7947465777397156,
        "codebertscore_f1-11": 0.7295879125595093,
        "codebertscore_f3-11": 0.7564198970794678,
        "codebertscore_f1-127": 0.7263769507408142,
        "codebertscore_f3-127": 0.768038809299469,
        "codebertscore_f1-90": 0.764593243598938,
        "codebertscore_f3-90": 0.7988871335983276,
        "codebertscore_f1-4": 0.8852494955062866,
        "codebertscore_f3-4": 0.8640285730361938,
        "codebertscore_f1-33": 0.7458584308624268,
        "codebertscore_f3-33": 0.7089905738830566,
        "codebertscore_f1-35": 0.6938635110855103,
        "codebertscore_f3-35": 0.7163556218147278,
        "codebertscore_f1-107": 0.7346921563148499,
        "codebertscore_f3-107": 0.7517864108085632,
        "codebertscore_f1-133": 0.7038217782974243,
        "codebertscore_f3-133": 0.730876088142395,
        "codebertscore_f1-119": 0.7231060266494751,
        "codebertscore_f3-119": 0.7413961887359619,
        "codebertscore_s_f1-138": 0.7480182647705078,
        "codebertscore_s_f3-138": 0.7690470218658447,
        "codebertscore_s_f1-14": 0.7432082295417786,
        "codebertscore_s_f3-14": 0.7958812117576599,
        "codebertscore_s_f1-3": 0.6801579594612122,
        "codebertscore_s_f3-3": 0.731124222278595,
        "codebertscore_s_f1-171": 0.7393530607223511,
        "codebertscore_s_f3-171": 0.7691727876663208,
        "codebertscore_s_f1-50": 0.8193185329437256,
        "codebertscore_s_f3-50": 0.8139585256576538,
        "codebertscore_s_f1-39": 0.6986498236656189,
        "codebertscore_s_f3-39": 0.7592459917068481,
        "codebertscore_s_f1-34": 0.7476118803024292,
        "codebertscore_s_f3-34": 0.7972894906997681,
        "codebertscore_s_f1-17": 0.7259367108345032,
        "codebertscore_s_f3-17": 0.8127263784408569,
        "codebertscore_s_f1-13": 0.6789842844009399,
        "codebertscore_s_f3-13": 0.7277465462684631,
        "codebertscore_s_f1-152": 0.7329450845718384,
        "codebertscore_s_f3-152": 0.8249444961547852,
        "codebertscore_s_f1-117": 0.8193185329437256,
        "codebertscore_s_f3-117": 0.8139585256576538,
        "codebertscore_s_f1-11": 0.7455069422721863,
        "codebertscore_s_f3-11": 0.7810914516448975,
        "codebertscore_s_f1-127": 0.7242516875267029,
        "codebertscore_s_f3-127": 0.7743590474128723,
        "codebertscore_s_f1-90": 0.7592941522598267,
        "codebertscore_s_f3-90": 0.7972807884216309,
        "codebertscore_s_f1-4": 0.9456636309623718,
        "codebertscore_s_f3-4": 0.9191067218780518,
        "codebertscore_s_f1-33": 0.8641785979270935,
        "codebertscore_s_f3-33": 0.8129258751869202,
        "codebertscore_s_f1-35": 0.7055298089981079,
        "codebertscore_s_f3-35": 0.7487902641296387,
        "codebertscore_s_f1-107": 0.7483565211296082,
        "codebertscore_s_f3-107": 0.772036612033844,
        "codebertscore_s_f1-133": 0.7141461372375488,
        "codebertscore_s_f3-133": 0.750278890132904,
        "codebertscore_s_f1-119": 0.7416759133338928,
        "codebertscore_s_f3-119": 0.7705525159835815,
        "gpt35_nsnr-138": 4,
        "raw_gpt35_nsnr-138": "4",
        "gpt35_nsnr-14": 3,
        "raw_gpt35_nsnr-14": "3",
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-171": 4,
        "raw_gpt35_nsnr-171": "4",
        "gpt35_nsnr-50": 3,
        "raw_gpt35_nsnr-50": "3",
        "gpt35_nsnr-39": 3,
        "raw_gpt35_nsnr-39": "3",
        "gpt35_nsnr-34": 3,
        "raw_gpt35_nsnr-34": "3",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-152": 4,
        "raw_gpt35_nsnr-152": "4",
        "gpt35_nsnr-117": 3,
        "raw_gpt35_nsnr-117": "3",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-127": 3,
        "raw_gpt35_nsnr-127": "3",
        "gpt35_nsnr-90": 4,
        "raw_gpt35_nsnr-90": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-33": 0,
        "raw_gpt35_nsnr-33": "3 - The code snippet returns the input number, but it does not implement the required functionality of decomposing the number into integer and decimal parts and returning the decimal part.",
        "gpt35_nsnr-35": 2,
        "raw_gpt35_nsnr-35": "2",
        "gpt35_nsnr-107": 4,
        "raw_gpt35_nsnr-107": "4",
        "gpt35_nsnr-133": 3,
        "raw_gpt35_nsnr-133": "3",
        "gpt35_nsnr-119": 4,
        "raw_gpt35_nsnr-119": "4",
        "gpt35_nswr-138": 4,
        "raw_gpt35_nswr-138": "4",
        "gpt35_nswr-14": 4,
        "raw_gpt35_nswr-14": "4",
        "gpt35_nswr-3": 4,
        "raw_gpt35_nswr-3": "4",
        "gpt35_nswr-171": 4,
        "raw_gpt35_nswr-171": "4",
        "gpt35_nswr-50": 4,
        "raw_gpt35_nswr-50": "4",
        "gpt35_nswr-39": 3,
        "raw_gpt35_nswr-39": "3",
        "gpt35_nswr-34": 4,
        "raw_gpt35_nswr-34": "4",
        "gpt35_nswr-17": 4,
        "raw_gpt35_nswr-17": "4",
        "gpt35_nswr-13": 4,
        "raw_gpt35_nswr-13": "4",
        "gpt35_nswr-152": 4,
        "raw_gpt35_nswr-152": "4",
        "gpt35_nswr-117": 4,
        "raw_gpt35_nswr-117": "4",
        "gpt35_nswr-11": 4,
        "raw_gpt35_nswr-11": "4",
        "gpt35_nswr-127": 4,
        "raw_gpt35_nswr-127": "4",
        "gpt35_nswr-90": 4,
        "raw_gpt35_nswr-90": "4",
        "gpt35_nswr-4": 4,
        "raw_gpt35_nswr-4": "4",
        "gpt35_nswr-33": 3,
        "raw_gpt35_nswr-33": "3",
        "gpt35_nswr-35": 4,
        "raw_gpt35_nswr-35": "4",
        "gpt35_nswr-107": 4,
        "raw_gpt35_nswr-107": "4",
        "gpt35_nswr-133": 4,
        "raw_gpt35_nswr-133": "4",
        "gpt35_nswr-119": 4,
        "raw_gpt35_nswr-119": "4"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given a word. Your task is to find the closest vowel that stands between \n    // two consonants from the right side of the word (case sensitive).\n    // Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    // find any vowel met the above condition. \n    // You may assume that the given string contains English letter only.\n    // Example:\n    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"FULL\") ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"ab\") ==> \"\"\n    public static String getClosestVowel(String word) {\n",
        "snippet": [
            "        if (word.length() < 3) {\n            return \"\";\n        }\n\n        String vowels = \"aeiouAEIOU\";\n        for (int i = word.length() - 2; i > 0; i--) {\n            if (vowels.indexOf(word.charAt(i)) != -1 && vowels.indexOf(word.charAt(i + 1)) == -1 && vowels.indexOf(word.charAt(i - 1)) == -1) {\n                return String.valueOf(word.charAt(i));\n            }\n        }\n        return \"\";\n    }\n}"
        ],
        "simplified": "You are given a word. Your task is to find the closest vowel that stands between two consonants from the right side of the word (case sensitive). Vowels in the beginning and ending doesn't count. Return empty string if you didn't find any vowel met the above condition. You may assume that the given string contains English letter only.",
        "task_id": "118",
        "173": "char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        char[] strChars = word.toCharArray();\n        int len = strChars.length;\n        for (int i = len - 1; i >= 0; i--) {\n            if (Arrays.binarySearch(vowels, strChars[i]) >= 0) {\n                if (i < len - 1 && Arrays.binarySearch(vowels, strChars[i + 1]) < 0) {\n                    return Character.toString(strChars[i]);\n                }\n            }\n        }\n        return \"\";",
        "grade-173": {
            "execution": 0
        },
        "29": "String vowel = \"AEIOUaeiou\";\n        String res = \"\";\n        int ix = word.length() - 1;\n        while (ix >= 0) {\n            if (vowel.indexOf(word.charAt(ix)) >= 0)\n                res = Character.toString(word.charAt(ix));\n            else if (res.length() > 0)\n                return res;\n            ix--;\n        }\n        return res;",
        "grade-29": {
            "execution": 0
        },
        "6": "// code here\n        return \"\";",
        "grade-6": {
            "execution": 0
        },
        "72": "// TODO: write your code here\n        return \"\";",
        "grade-72": {
            "execution": 0
        },
        "63": "String vowels = \"aeiouAEIOU\";\n        String cons = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n        String candidates = \"\";\n        int right_cons = 0;\n        // int left_cons = 0;\n        for (int i = word.length() - 1; i >= 0; i--) {\n            char c = word.charAt(i);\n            if (cons.indexOf(c) > -1) right_cons++;\n            else if (vowels.indexOf(c) > -1) {\n                if (right_cons == 1) candidates += c;\n                else right_cons = 0;\n            }\n        }\n        if (candidates.length() == 0) return \"\";\n        return \"\" + candidates.charAt(candidates.length() - 1);",
        "grade-63": {
            "execution": 0
        },
        "58": "final String VOWELS = \"aeiouAEIOU\";\n        final String CONSONANTS = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n        var res = \"\";\n        for (int i = word.length() - 1; i >= 0; i--) {\n            char cur = word.charAt(i);\n            if (VOWELS.indexOf(cur) != -1) {\n                if (i + 1 < word.length() && CONSONANTS.indexOf(word.charAt(i + 1)) != -1)\n                    res = String.valueOf(cur);\n                else if (i - 1 >= 0 && CONSONANTS.indexOf(word.charAt(i - 1)) != -1)\n                    res = String.valueOf(cur);\n            }\n        }\n        return res;",
        "grade-58": {
            "execution": 0
        },
        "36": "String vowels = \"aeiou\";\n        StringBuilder result = new StringBuilder();\n        for (int i = word.length() - 1; i >= 0; i--) {\n            if (vowels.contains(String.valueOf(word.charAt(i)))) {\n                if (i + 1 < word.length() && !vowels.contains(String.valueOf(word.charAt(i + 1)))) {\n                    result.append(word.charAt(i));\n                    break;\n                }\n            }\n        }\n        return result.toString();",
        "grade-36": {
            "execution": 0
        },
        "27": "String empty = \"\";\n        String[] vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        String[] consonants = {\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"};\n        HashSet<String> vowelSet = new HashSet<String>(Arrays.asList(vowels));\n        HashSet<String> consonantSet = new HashSet<String>(Arrays.asList(consonants));\n        int min = word.length();\n        String result = empty;\n        int wordLength = word.length();\n        if (wordLength <= 2) return empty;\n        int index = wordLength - 1;\n        while (index >= 0) {\n            String letter = word.substring(index, index + 1);\n            int distance = wordLength - index;\n            if (vowelSet.contains(letter)) {\n                if (distance < min) {\n                    min = distance;\n                    result = letter;\n                }\n            }\n            index--;\n        }\n        return result;",
        "grade-27": {
            "execution": 0
        },
        "185": "final int idx = word.length() - 1;\n        for (int i = 0; i < idx; i++) {\n            final char c0 = word.charAt(i);\n            final char c1 = word.charAt(i + 1);\n            if (isVowel(c0) && isVowel(c1)) {\n                return c0 == 'u' || c0 == 'U' ? \"\" + c0 : \"\" + c1;\n            }\n        }\n        return \"\";",
        "grade-185": {
            "execution": 0
        },
        "147": "// TODO: write your code here\n        String result = \"\";\n        for (int i = word.length() - 1; i >= 0; i--) {\n            char letter = word.charAt(i);\n            if (letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u') {\n                if (i == word.length() - 1) {\n                    continue;\n                }\n                char previous = word.charAt(i - 1);\n                if (previous == 'a' || previous == 'e' || previous == 'i' || previous == 'o' || previous == 'u') {\n                    continue;\n                }\n                result = Character.toString(letter);\n                break;\n            }\n        }\n        return result;",
        "grade-147": {
            "execution": 0
        },
        "23": "char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        String word_lower = word.toLowerCase();\n        StringBuilder ret = new StringBuilder();\n        for (int i = word_lower.length() - 1; i >= 0; i--) {\n            char c = word_lower.charAt(i);\n            if (Arrays.asList(vowels).contains(c)) {\n                ret.append(c);\n                break;\n            }\n        }\n        return ret.reverse().toString();",
        "grade-23": {
            "execution": 0
        },
        "161": "int L = word.length();\n      int[] d = new int[L];\n      int n = 0;\n      for (int i = 0; i < L; i++) {\n        char c = word.charAt(i);\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n          d[n++] = i;\n        }\n      }\n      if (n == 0) {\n        return \"\";\n      }\n      for (int i = L - 1; i >= 0; i--) {\n        char c = word.charAt(i);\n        if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n          int x = Math.abs(d[n - 1] - i);\n          for (int j = n - 2; j >= 0; j--) {\n            int y = Math.abs(d[j] - i);\n            if (y > x) {\n              break;\n            }\n            x = y;\n          }\n          return Character.toString(word.charAt(d[n - 1 - x]));\n        }\n      }\n      return \"\";",
        "grade-161": {
            "execution": 0
        },
        "113": "word = word.toLowerCase();\n        int vowelPos = -1;\n        int minDist = Integer.MAX_VALUE;\n        for (int i = word.length() - 1; i >= 0; i--) {\n            if (\"aeiou\".indexOf(word.charAt(i)) >= 0) {\n                if (i < word.length() - 1 && \"aeiou\".indexOf(word.charAt(i + 1)) >= 0) {\n                    continue;\n                }\n                if (i > 0 && \"aeiou\".indexOf(word.charAt(i - 1)) >= 0) {\n                    continue;\n                }\n                int dist = word.length() - i;\n                if (dist < minDist) {\n                    minDist = dist;\n                    vowelPos = i;\n                }\n            }\n        }\n        if (vowelPos == -1) {\n            return \"\";\n        }\n        return String.valueOf(word.charAt(vowelPos));",
        "grade-113": {
            "execution": 0
        },
        "8": "// Solution 1: Return an empty string if the word is empty.\n        if (word.length() == 0) {\n            return \"\";\n        }\n        // Solution 2: Convert the word to upper case.\n        word = word.toUpperCase();\n        // Solution 3: Return an empty string if the word is length is 1.\n        if (word.length() == 1) {\n            return \"\";\n        }\n        // Solution 4: Create an array with the vowels.\n        char[] vowels = {'A', 'E', 'I', 'O', 'U'};\n        // Solution 5: Create a variable to hold the closest vowel and initialize it with\n        // an empty string.\n        String closestVowel = \"\";\n        // Solution 6: Create a variable to hold the closest distance.\n        int closestDistance = Integer.MAX_VALUE;\n        // Solution 7: Loop over the word backwards.\n        for (int i = word.length() - 1; i >= 0; i--) {\n            // Solution 8: If the character is a vowel.\n            if (vowels.equals(word.charAt(i))) {\n                // Solution 9: Get the distance.\n                int distance = word.length() - i;\n                // Solution 10: If the distance is less than the closest distance.\n                if (distance < closestDistance) {\n                    // Solution 11: Set the closest distance.\n                    closestDistance = distance;\n                    // Solution 12: Set the closest vowel.\n                    closestVowel = String.valueOf(word.charAt(i));\n                }\n            }\n        }\n        // Solution 13: Return the closest vowel.\n        return closestVowel;",
        "grade-8": {
            "execution": 0
        },
        "7": "return \"\";",
        "grade-7": {
            "execution": 0
        },
        "24": "String s = word.toLowerCase();\n        int currentDistance = Integer.MAX_VALUE;\n        String closestVowel = \"\";\n        int size = s.length();\n        for (int i = size - 1; i >= 0; i--) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                for (int j = size - 1; j >= 0; j--) {\n                    if (j == i) {\n                        break;\n                    }\n                    if (s.charAt(j) != 'a' && s.charAt(j) != 'e' && s.charAt(j) != 'i' && s.charAt(j) != 'o' && s.charAt(j) != 'u') {\n                        int distance = i - j;\n                        if (distance < currentDistance) {\n                            currentDistance = distance;\n                            closestVowel = String.valueOf(s.charAt(i));\n                        }\n                        break;\n                    }\n                }\n            }\n        }\n        return closestVowel;",
        "grade-24": {
            "execution": 0
        },
        "56": "// Your code here\n        return \"\";",
        "grade-56": {
            "execution": 0
        },
        "60": "if (word.length() < 3) {\n            return \"\";\n        }\n        word = word.substring(1, word.length() - 1);\n        for (int i = 0; i < word.length(); i++) {\n            if (isVowel(word.charAt(i))) {\n                if (isConsonant(word.charAt(i - 1)) && isConsonant(word.charAt(i + 1))) {\n                    return Character.toString(word.charAt(i));\n                }\n            }\n        }\n        return \"\";",
        "grade-60": {
            "execution": 0
        },
        "137": "String vowels = \"aeiouAEIOU\";\n        String consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n        int wordLength = word.length();\n        if (wordLength < 3) {\n            return \"\";\n        }\n        for (int i = wordLength - 1; i > 0; i--) {\n            if (consonants.contains(String.valueOf(word.charAt(i)))\n            && consonants.contains(String.valueOf(word.charAt(i - 1)))\n            && vowels.contains(String.valueOf(word.charAt(i - 2)))) {\n                return String.valueOf(word.charAt(i - 2));\n            }\n        }\n        return \"\";",
        "grade-137": {
            "execution": 0
        },
        "164": "if (word.length() <= 2) {\n            return \"\";\n        }\n        char vowel = 'a';\n        for (int i = word.length() - 1; i >= 0; i--) {\n            char c = word.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                vowel = c;\n                break;\n            }\n        }\n        for (int i = word.length() - 1; i >= 0; i--) {\n            char c = word.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                if (i + 1 < word.length() && i - 1 >= 0) {\n                    if (word.charAt(i + 1) != 'a' && word.charAt(i + 1) != 'e' && word.charAt(i + 1) != 'i'\n                            && word.charAt(i + 1) != 'o' && word.charAt(i + 1) != 'u'\n                            && word.charAt(i - 1) != 'a' && word.charAt(i - 1) != 'e' && word.charAt(i - 1) != 'i'\n                            && word.charAt(i - 1) != 'o' && word.charAt(i - 1) != 'u') {\n                        vowel = c;\n                        break;\n                    }\n                }\n            }\n        }\n        if (vowel == 'a') {\n            return \"\";\n        }\n        return Character.toString(vowel);",
        "grade-164": {
            "execution": 0
        },
        "bleu-173": 0.2368515895673045,
        "bleu-29": 0.2126474118824748,
        "bleu-6": 6.41447357701476e-08,
        "bleu-72": 9.625069657804002e-06,
        "bleu-63": 0.37819623856812634,
        "bleu-58": 0.504018828597126,
        "bleu-36": 0.5153946685097973,
        "bleu-27": 0.08033572452703823,
        "bleu-185": 0.27307891046817345,
        "bleu-147": 0.2680527220750918,
        "bleu-23": 0.22250353137463974,
        "bleu-161": 0.1519073295310031,
        "bleu-113": 0.4415264287366699,
        "bleu-8": 0.19697268967539228,
        "bleu-7": 1.2664165549094182e-14,
        "bleu-24": 0.1899310260490703,
        "bleu-56": 3.463773173807581e-07,
        "bleu-60": 0.5582967098238193,
        "bleu-137": 0.5863032021925833,
        "bleu-164": 0.18453707350481977,
        "codebleu-173": 0.4991288514190843,
        "codebleu-29": 0.4155375652411079,
        "codebleu-6": 0.02867386737195833,
        "codebleu-72": 0.039427924152992046,
        "codebleu-63": 0.6132283792738945,
        "codebleu-58": 0.70678625432422,
        "codebleu-36": 0.6396504558779266,
        "codebleu-27": 0.5402386421650393,
        "codebleu-185": 0.41379409249103416,
        "codebleu-147": 0.5404053975069002,
        "codebleu-23": 0.501371641287275,
        "codebleu-161": 0.64191198018339,
        "codebleu-113": 0.7343647101805525,
        "codebleu-8": 0.6419644220076605,
        "codebleu-7": 0.0215053763440861,
        "codebleu-24": 0.6481343121817094,
        "codebleu-56": 0.03225817157831358,
        "codebleu-60": 0.6638000124720943,
        "codebleu-137": 0.6895868981112621,
        "codebleu-164": 0.7172873049910764,
        "chrf-173": 0.3116237996184302,
        "chrf-29": 0.41566867926993,
        "chrf-6": 0.039627902345851514,
        "chrf-72": 0.049393594912968686,
        "chrf-63": 0.4784789173805331,
        "chrf-58": 0.5816296102578189,
        "chrf-36": 0.5727586987323207,
        "chrf-27": 0.3013801748378343,
        "chrf-185": 0.3376601752815901,
        "chrf-147": 0.3709278258345447,
        "chrf-23": 0.3363214329807304,
        "chrf-161": 0.3719484482941891,
        "chrf-113": 0.6431588034227765,
        "chrf-8": 0.3907085895471177,
        "chrf-7": 0.03191744788036893,
        "chrf-24": 0.3593856061178208,
        "chrf-56": 0.04347624022146293,
        "chrf-60": 0.5597912542260067,
        "chrf-137": 0.6397944790137776,
        "chrf-164": 0.46255304634662214,
        "rougel-173": 0.41044776119402987,
        "rougel-29": 0.497737556561086,
        "rougel-6": 0.05714285714285715,
        "rougel-72": 0.05555555555555555,
        "rougel-63": 0.45774647887323944,
        "rougel-58": 0.6258503401360545,
        "rougel-36": 0.6171875,
        "rougel-27": 0.24213075060532688,
        "rougel-185": 0.4188034188034188,
        "rougel-147": 0.39490445859872614,
        "rougel-23": 0.40316205533596833,
        "rougel-161": 0.30241935483870963,
        "rougel-113": 0.5850746268656716,
        "rougel-8": 0.34947368421052627,
        "rougel-7": 0.05882352941176471,
        "rougel-24": 0.411764705882353,
        "rougel-56": 0.056737588652482275,
        "rougel-60": 0.6692913385826772,
        "rougel-137": 0.6881720430107526,
        "rougel-164": 0.39399624765478425,
        "meteor-173": 0.42269653003120605,
        "meteor-29": 0.32076778267620093,
        "meteor-6": 0.03318352842809364,
        "meteor-72": 0.03307291666666667,
        "meteor-63": 0.48883095416741357,
        "meteor-58": 0.6238937757201645,
        "meteor-36": 0.5064488088207516,
        "meteor-27": 0.3198337431089023,
        "meteor-185": 0.3961453883879133,
        "meteor-147": 0.39356448346512024,
        "meteor-23": 0.34531191684551354,
        "meteor-161": 0.48421031110054435,
        "meteor-113": 0.7096123681823208,
        "meteor-8": 0.5048593706422012,
        "meteor-7": 0.033294882550335574,
        "meteor-24": 0.5730884663035296,
        "meteor-56": 0.033155806182121966,
        "meteor-60": 0.6487186477644493,
        "meteor-137": 0.769293566602983,
        "meteor-164": 0.5366757569400741,
        "ruby-173": 0.25735294117647056,
        "ruby-29": 0.38636363636363635,
        "ruby-6": 0.030303030303030276,
        "ruby-72": 0.030303030303030276,
        "ruby-63": 0.29605263157894735,
        "ruby-58": 0.4629629629629629,
        "ruby-36": 0.4545454545454546,
        "ruby-27": 0.14234875444839856,
        "ruby-185": 0.28787878787878785,
        "ruby-147": 0.2417582417582418,
        "ruby-23": 0.16666666666666663,
        "ruby-161": 0.17582417582417587,
        "ruby-113": 0.4482758620689655,
        "ruby-8": 0.21865889212827994,
        "ruby-7": 0.030303030303030276,
        "ruby-24": 0.2753623188405797,
        "ruby-56": 0.030303030303030276,
        "ruby-60": 0.5378787878787878,
        "ruby-137": 0.5102040816326531,
        "ruby-164": 0.25935162094763087,
        "codebertscore_f1-173": 0.8113822340965271,
        "codebertscore_f3-173": 0.8182731866836548,
        "codebertscore_f1-29": 0.8287066221237183,
        "codebertscore_f3-29": 0.8239813446998596,
        "codebertscore_f1-6": 0.5731846690177917,
        "codebertscore_f3-6": 0.5231842398643494,
        "codebertscore_f1-72": 0.5587282180786133,
        "codebertscore_f3-72": 0.5302608013153076,
        "codebertscore_f1-63": 0.7956939339637756,
        "codebertscore_f3-63": 0.8337091207504272,
        "codebertscore_f1-58": 0.8231652975082397,
        "codebertscore_f3-58": 0.8587329387664795,
        "codebertscore_f1-36": 0.8647801280021667,
        "codebertscore_f3-36": 0.8657416105270386,
        "codebertscore_f1-27": 0.7202354669570923,
        "codebertscore_f3-27": 0.7291921973228455,
        "codebertscore_f1-185": 0.7888368368148804,
        "codebertscore_f3-185": 0.7864272594451904,
        "codebertscore_f1-147": 0.7686483263969421,
        "codebertscore_f3-147": 0.7798076868057251,
        "codebertscore_f1-23": 0.7860521078109741,
        "codebertscore_f3-23": 0.7945666909217834,
        "codebertscore_f1-161": 0.7550469636917114,
        "codebertscore_f3-161": 0.7657143473625183,
        "codebertscore_f1-113": 0.839486300945282,
        "codebertscore_f3-113": 0.8643265962600708,
        "codebertscore_f1-8": 0.7253727912902832,
        "codebertscore_f3-8": 0.7749549746513367,
        "codebertscore_f1-7": 0.5191516280174255,
        "codebertscore_f3-7": 0.45258674025535583,
        "codebertscore_f1-24": 0.7792666554450989,
        "codebertscore_f3-24": 0.790263831615448,
        "codebertscore_f1-56": 0.5630078911781311,
        "codebertscore_f3-56": 0.5215619802474976,
        "codebertscore_f1-60": 0.8596754670143127,
        "codebertscore_f3-60": 0.8469561338424683,
        "codebertscore_f1-137": 0.8308293223381042,
        "codebertscore_f3-137": 0.8521495461463928,
        "codebertscore_f1-164": 0.8011717796325684,
        "codebertscore_f3-164": 0.809817373752594,
        "codebertscore_s_f1-173": 0.8134936690330505,
        "codebertscore_s_f3-173": 0.8216195702552795,
        "codebertscore_s_f1-29": 0.8270356059074402,
        "codebertscore_s_f3-29": 0.8200742602348328,
        "codebertscore_s_f1-6": 0.5899961590766907,
        "codebertscore_s_f3-6": 0.5360684394836426,
        "codebertscore_s_f1-72": 0.5620896816253662,
        "codebertscore_s_f3-72": 0.5293188095092773,
        "codebertscore_s_f1-63": 0.7987428307533264,
        "codebertscore_s_f3-63": 0.8300336599349976,
        "codebertscore_s_f1-58": 0.823253870010376,
        "codebertscore_s_f3-58": 0.8540301322937012,
        "codebertscore_s_f1-36": 0.8674834966659546,
        "codebertscore_s_f3-36": 0.8713283538818359,
        "codebertscore_s_f1-27": 0.7448801398277283,
        "codebertscore_s_f3-27": 0.7534658312797546,
        "codebertscore_s_f1-185": 0.7786046862602234,
        "codebertscore_s_f3-185": 0.7692006230354309,
        "codebertscore_s_f1-147": 0.7707045674324036,
        "codebertscore_s_f3-147": 0.7836641669273376,
        "codebertscore_s_f1-23": 0.7735387682914734,
        "codebertscore_s_f3-23": 0.7721835374832153,
        "codebertscore_s_f1-161": 0.7751786708831787,
        "codebertscore_s_f3-161": 0.7818573117256165,
        "codebertscore_s_f1-113": 0.8480364084243774,
        "codebertscore_s_f3-113": 0.8693272471427917,
        "codebertscore_s_f1-8": 0.7568955421447754,
        "codebertscore_s_f3-8": 0.804509162902832,
        "codebertscore_s_f1-7": 0.6332713961601257,
        "codebertscore_s_f3-7": 0.5248461365699768,
        "codebertscore_s_f1-24": 0.7948375940322876,
        "codebertscore_s_f3-24": 0.8036413788795471,
        "codebertscore_s_f1-56": 0.5798424482345581,
        "codebertscore_s_f3-56": 0.5348891615867615,
        "codebertscore_s_f1-60": 0.8584206104278564,
        "codebertscore_s_f3-60": 0.8464584350585938,
        "codebertscore_s_f1-137": 0.8218473792076111,
        "codebertscore_s_f3-137": 0.8375822305679321,
        "codebertscore_s_f1-164": 0.8220224976539612,
        "codebertscore_s_f3-164": 0.8274499773979187,
        "gpt35_nsnr-173": 3,
        "raw_gpt35_nsnr-173": "3",
        "gpt35_nsnr-29": 4,
        "raw_gpt35_nsnr-29": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-72": 4,
        "raw_gpt35_nsnr-72": "4",
        "gpt35_nsnr-63": 4,
        "raw_gpt35_nsnr-63": "4",
        "gpt35_nsnr-58": 4,
        "raw_gpt35_nsnr-58": "4",
        "gpt35_nsnr-36": 3,
        "raw_gpt35_nsnr-36": "3",
        "gpt35_nsnr-27": 3,
        "raw_gpt35_nsnr-27": "3",
        "gpt35_nsnr-185": 3,
        "raw_gpt35_nsnr-185": "3",
        "gpt35_nsnr-147": 4,
        "raw_gpt35_nsnr-147": "4",
        "gpt35_nsnr-23": 3,
        "raw_gpt35_nsnr-23": "3",
        "gpt35_nsnr-161": 3,
        "raw_gpt35_nsnr-161": "3",
        "gpt35_nsnr-113": 4,
        "raw_gpt35_nsnr-113": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-24": 4,
        "raw_gpt35_nsnr-24": "4",
        "gpt35_nsnr-56": 3,
        "raw_gpt35_nsnr-56": "3",
        "gpt35_nsnr-60": 4,
        "raw_gpt35_nsnr-60": "4",
        "gpt35_nsnr-137": 4,
        "raw_gpt35_nsnr-137": "4",
        "gpt35_nsnr-164": 3,
        "raw_gpt35_nsnr-164": "3",
        "gpt35_nswr-173": 3,
        "raw_gpt35_nswr-173": "3",
        "gpt35_nswr-29": 3,
        "raw_gpt35_nswr-29": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-72": 2,
        "raw_gpt35_nswr-72": "2",
        "gpt35_nswr-63": 3,
        "raw_gpt35_nswr-63": "3",
        "gpt35_nswr-58": 3,
        "raw_gpt35_nswr-58": "3",
        "gpt35_nswr-36": 3,
        "raw_gpt35_nswr-36": "3",
        "gpt35_nswr-27": 2,
        "raw_gpt35_nswr-27": "2",
        "gpt35_nswr-185": 2,
        "raw_gpt35_nswr-185": "2",
        "gpt35_nswr-147": 3,
        "raw_gpt35_nswr-147": "3",
        "gpt35_nswr-23": 2,
        "raw_gpt35_nswr-23": "2",
        "gpt35_nswr-161": 2,
        "raw_gpt35_nswr-161": "2",
        "gpt35_nswr-113": 3,
        "raw_gpt35_nswr-113": "3",
        "gpt35_nswr-8": 2,
        "raw_gpt35_nswr-8": "2",
        "gpt35_nswr-7": 2,
        "raw_gpt35_nswr-7": "2",
        "gpt35_nswr-24": 2,
        "raw_gpt35_nswr-24": "2",
        "gpt35_nswr-56": 2,
        "raw_gpt35_nswr-56": "2",
        "gpt35_nswr-60": 3,
        "raw_gpt35_nswr-60": "3",
        "gpt35_nswr-137": 3,
        "raw_gpt35_nswr-137": "3",
        "gpt35_nswr-164": 2,
        "raw_gpt35_nswr-164": "2"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a number in decimal form and your task is to convert it to\n    // binary format. The function should return a string, with each character representing a binary\n    // number. Each character in the string will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    // The extra characters are there to help with the format.\n    // Examples:\n    // decimal_to_binary(15)   # returns \"db1111db\"\n    // decimal_to_binary(32)   # returns \"db100000db\"\n    public static String decimalToBinary(int decimal) {\n",
        "snippet": [
            "        return \"db\" + Integer.toBinaryString(decimal) + \"db\";\n    }\n}"
        ],
        "simplified": "You will be given a number in decimal form and your task is to convert it to binary format. The function should return a string, with each character representing a binary number. Each character in the string will be '0' or '1'. There will be an extra couple of characters 'db' at the beginning and at the end of the string. The extra characters are there to help with the format.",
        "task_id": "79",
        "126": "int bits = (int) (Math.log(decimal) / Math.log(2)) + 1;\n        int[] array = new int[bits];\n        for (int bit = bits; bit > 0; bit--) {\n            array[bit - 1] = decimal % 2;\n            decimal /= 2;\n        }\n        StringBuilder sb = new StringBuilder(\"db\");\n        for (int i = 0; i < array.length; i++) {\n            sb.append(array[i]);\n        }\n        sb.append(\"db\");\n        return sb.toString();",
        "grade-126": {
            "execution": 0
        },
        "21": "// Type your solution here\n        if (decimal == 0) {\n            return \"db0db\";\n        }\n        List<String> result = new ArrayList<>();\n        while (decimal != 0) {\n            result.add(decimal % 2 == 0 ? \"0\" : \"1\");\n            decimal /= 2;\n        }\n        return \"db\" + String.join(\"\", result) + \"db\";",
        "grade-21": {
            "execution": 0
        },
        "3": "return \"db\" + Integer.toBinaryString(decimal) + \"db\";",
        "grade-3": {
            "execution": 1
        },
        "146": "String bin = Integer.toBinaryString(decimal);\n        return \"db\" + bin + \"db\";",
        "grade-146": {
            "execution": 1
        },
        "49": "StringBuilder sb = new StringBuilder();\n        sb.append(\"db\");\n        while (decimal != 0) {\n            sb.append(decimal % 2);\n            decimal /= 2;\n        }\n        sb.append(\"db\");\n        return sb.reverse().toString();",
        "grade-49": {
            "execution": 0
        },
        "44": "String d2b = \"db\";\n        String str = Integer.toBinaryString(decimal);\n        return d2b.concat(str).concat(d2b);",
        "grade-44": {
            "execution": 1
        },
        "40": "String s = Integer.toBinaryString(decimal);\n        return \"db\" + s + \"db\";",
        "grade-40": {
            "execution": 1
        },
        "25": "// return Integer.toBinaryString(decimal);\n        return decimalToBinary(decimal, new StringBuilder()).toString();",
        "grade-25": {
            "execution": 0
        },
        "19": "String binary = \"\";\n      while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n        decimal /= 2;\n      }\n      binary = \"db\" + binary + \"db\";\n      return binary;",
        "grade-19": {
            "execution": 0
        },
        "134": "return \"db\" + toBinary(decimal) + \"db\";",
        "grade-134": {
            "execution": 0
        },
        "192": "//Your code here\n        if (decimal == 0) return \"db0db\";\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"db\");\n        int input = decimal;\n        while (input != 0) {\n            int remainder = input % 2;\n            sb.append(remainder);\n            input = input / 2;\n        }\n        sb.append(\"db\");\n        return sb.reverse().toString();",
        "grade-192": {
            "execution": 0
        },
        "109": "String result = \"db\";\n        result += Integer.toBinaryString(decimal);\n        result += \"db\";\n        return result;",
        "grade-109": {
            "execution": 1
        },
        "17": "StringBuffer buffer = new StringBuffer();\n        buffer.append(\"db\");\n        for (int i = 0; i < 5; i++) {\n            buffer.append(decimal % 2);\n            decimal /= 2;\n        }\n        buffer.append(\"db\");\n        return buffer.reverse().toString();",
        "grade-17": {
            "execution": 0
        },
        "119": "String result = \"db\";\n        String binary = Integer.toBinaryString(decimal);\n        for (int i = 0; i < (8 - binary.length()); i++) {\n            result += \"0\";\n        }\n        result += binary;\n        result += \"db\";\n        return result;",
        "grade-119": {
            "execution": 0
        },
        "82": "StringBuilder sb = new StringBuilder(\"db\");\n        for (int i = 0; i < 8; i++) {\n            sb.append(decimal % 2);\n            decimal = decimal / 2;\n        }\n        sb.append(\"db\");\n        return sb.reverse().toString();",
        "grade-82": {
            "execution": 0
        },
        "5": "String binary = \"\";\n        while (decimal > 0) {\n            binary = (decimal % 2) + binary;\n            decimal /= 2;\n        }\n        StringBuilder sb = new StringBuilder(binary);\n        sb.insert(0, \"db\");\n        sb.append(\"db\");\n        return sb.toString();",
        "grade-5": {
            "execution": 0
        },
        "39": "String binaryString = \"db\";\n        String binaryDigit = \"\";\n        int binary, count = 0;\n        binary = decimal;\n        while (binary > 0) {\n            binaryDigit = binaryDigit + \"\" + binary % 2;\n            binary = binary / 2;\n            count++;\n        }\n        for (int i = 0; i < 8 - count; i++) {\n            binaryString = binaryString + \"0\";\n        }\n        for (int i = binaryDigit.length() - 1; i >= 0; i--) {\n            binaryString = binaryString + \"\" + binaryDigit.charAt(i);\n        }\n        binaryString = binaryString + \"db\";\n        return binaryString;",
        "grade-39": {
            "execution": 0
        },
        "42": "return null;",
        "grade-42": {
            "execution": 0
        },
        "96": "return toBinary(decimal, false);",
        "grade-96": {
            "execution": 0
        },
        "122": "return String.format(\"db%sdb\", Integer.toBinaryString(decimal));",
        "grade-122": {
            "execution": 1
        },
        "bleu-126": 0.032300887113069686,
        "bleu-21": 0.1087793402696869,
        "bleu-3": 0.89483931681437,
        "bleu-146": 0.6086209927462802,
        "bleu-49": 0.05382598430511781,
        "bleu-44": 0.29160060199573634,
        "bleu-40": 0.6086209927462802,
        "bleu-25": 0.22963869978965584,
        "bleu-19": 0.1621089749782086,
        "bleu-134": 0.5496072627753009,
        "bleu-192": 0.03910512420503918,
        "bleu-109": 0.37821486365532614,
        "bleu-17": 0.04914237357372589,
        "bleu-119": 0.17108723083491278,
        "bleu-82": 0.05295296385067158,
        "bleu-5": 0.053489648471569444,
        "bleu-39": 0.0429182341225431,
        "bleu-42": 0.0011992991392354546,
        "bleu-96": 0.04568879443242545,
        "bleu-122": 0.3839014914894329,
        "codebleu-126": 0.6356837606837606,
        "codebleu-21": 0.5913461538461537,
        "codebleu-3": 0.6457630144034816,
        "codebleu-146": 0.5844017094017093,
        "codebleu-49": 0.4866452991452991,
        "codebleu-44": 0.44230769230769224,
        "codebleu-40": 0.5844017094017093,
        "codebleu-25": 0.3584401709401709,
        "codebleu-19": 0.500534188034188,
        "codebleu-134": 0.4381655509493945,
        "codebleu-192": 0.5379273504273504,
        "codebleu-109": 0.5192307692307692,
        "codebleu-17": 0.5518162393162394,
        "codebleu-119": 0.6169871794871794,
        "codebleu-82": 0.5518162393162394,
        "codebleu-5": 0.5518162393162394,
        "codebleu-39": 0.6426282051282051,
        "codebleu-42": 0.07768622854344084,
        "codebleu-96": 0.19789810625656118,
        "codebleu-122": 0.42387442423030935,
        "chrf-126": 0.2549856858062998,
        "chrf-21": 0.33689597444471386,
        "chrf-3": 0.9659853376253118,
        "chrf-146": 0.8090623253707075,
        "chrf-49": 0.30093879911559956,
        "chrf-44": 0.6229123016256206,
        "chrf-40": 0.8222139847290799,
        "chrf-25": 0.5616741238603895,
        "chrf-19": 0.3723689892564094,
        "chrf-134": 0.5946388188356909,
        "chrf-192": 0.27534165420814727,
        "chrf-109": 0.6687938207641906,
        "chrf-17": 0.2956950700339067,
        "chrf-119": 0.5378288236068878,
        "chrf-82": 0.3108956953598734,
        "chrf-5": 0.31610902162422516,
        "chrf-39": 0.22526488384894164,
        "chrf-42": 0.09840426048970528,
        "chrf-96": 0.34380819368474796,
        "chrf-122": 0.6815428760823508,
        "rougel-126": 0.14965986394557823,
        "rougel-21": 0.24299065420560748,
        "rougel-3": 0.9473684210526316,
        "rougel-146": 0.6046511627906976,
        "rougel-49": 0.2650602409638554,
        "rougel-44": 0.4615384615384615,
        "rougel-40": 0.6046511627906976,
        "rougel-25": 0.39215686274509803,
        "rougel-19": 0.3125,
        "rougel-134": 0.8571428571428571,
        "rougel-192": 0.19819819819819817,
        "rougel-109": 0.6938775510204082,
        "rougel-17": 0.26373626373626374,
        "rougel-119": 0.372093023255814,
        "rougel-82": 0.27906976744186046,
        "rougel-5": 0.22727272727272727,
        "rougel-39": 0.15950920245398773,
        "rougel-42": 0.1739130434782609,
        "rougel-96": 0.48275862068965514,
        "rougel-122": 0.6341463414634146,
        "meteor-126": 0.49945711183496205,
        "meteor-21": 0.5247333566605757,
        "meteor-3": 0.9090129691981544,
        "meteor-146": 0.8846469622331692,
        "meteor-49": 0.5506172839506173,
        "meteor-44": 0.5114714748241599,
        "meteor-40": 0.8846469622331692,
        "meteor-25": 0.35260663507109,
        "meteor-19": 0.6270926339285715,
        "meteor-134": 0.7661538461538462,
        "meteor-192": 0.4937269372693727,
        "meteor-109": 0.8359176560930948,
        "meteor-17": 0.5855470850163361,
        "meteor-119": 0.49574353084251066,
        "meteor-82": 0.5974484485329283,
        "meteor-5": 0.592630315883469,
        "meteor-39": 0.45230860375339227,
        "meteor-42": 0.0546448087431694,
        "meteor-96": 0.30288305798509874,
        "meteor-122": 0.6149724749035886,
        "ruby-126": 0.07874015748031493,
        "ruby-21": 0.11494252873563215,
        "ruby-3": 0.9,
        "ruby-146": 0.3913043478260869,
        "ruby-49": 0.15873015873015872,
        "ruby-44": 0.34375,
        "ruby-40": 0.3913043478260869,
        "ruby-25": 0.19354838709677424,
        "ruby-19": 0.20454545454545459,
        "ruby-134": 0.75,
        "ruby-192": 0.1208791208791209,
        "ruby-109": 0.5862068965517242,
        "ruby-17": 0.15492957746478875,
        "ruby-119": 0.24242424242424243,
        "ruby-82": 0.16666666666666663,
        "ruby-5": 0.13235294117647056,
        "ruby-39": 0.09090909090909094,
        "ruby-42": 0.09999999999999998,
        "ruby-96": 0.30000000000000004,
        "ruby-122": 0.38095238095238093,
        "codebertscore_f1-126": 0.6712387800216675,
        "codebertscore_f3-126": 0.7308036684989929,
        "codebertscore_f1-21": 0.7163698077201843,
        "codebertscore_f3-21": 0.7478638291358948,
        "codebertscore_f1-3": 0.9916362166404724,
        "codebertscore_f3-3": 0.9916362166404724,
        "codebertscore_f1-146": 0.9282782673835754,
        "codebertscore_f3-146": 0.9470781683921814,
        "codebertscore_f1-49": 0.7125934958457947,
        "codebertscore_f3-49": 0.7421959042549133,
        "codebertscore_f1-44": 0.8200564980506897,
        "codebertscore_f3-44": 0.8631245493888855,
        "codebertscore_f1-40": 0.9273456335067749,
        "codebertscore_f3-40": 0.9473404288291931,
        "codebertscore_f1-25": 0.8379986882209778,
        "codebertscore_f3-25": 0.8411579728126526,
        "codebertscore_f1-19": 0.7651771306991577,
        "codebertscore_f3-19": 0.7738802433013916,
        "codebertscore_f1-134": 0.9303810596466064,
        "codebertscore_f3-134": 0.9125813841819763,
        "codebertscore_f1-192": 0.6909856200218201,
        "codebertscore_f3-192": 0.7362631559371948,
        "codebertscore_f1-109": 0.8757777214050293,
        "codebertscore_f3-109": 0.9055048823356628,
        "codebertscore_f1-17": 0.7046611309051514,
        "codebertscore_f3-17": 0.7409842610359192,
        "codebertscore_f1-119": 0.7802073955535889,
        "codebertscore_f3-119": 0.8462839722633362,
        "codebertscore_f1-82": 0.7089455723762512,
        "codebertscore_f3-82": 0.747277021408081,
        "codebertscore_f1-5": 0.7292968034744263,
        "codebertscore_f3-5": 0.7714236974716187,
        "codebertscore_f1-39": 0.6532287001609802,
        "codebertscore_f3-39": 0.7109593749046326,
        "codebertscore_f1-42": 0.6100901365280151,
        "codebertscore_f3-42": 0.5699554085731506,
        "codebertscore_f1-96": 0.7642744779586792,
        "codebertscore_f3-96": 0.7404756546020508,
        "codebertscore_f1-122": 0.8941159844398499,
        "codebertscore_f3-122": 0.900440514087677,
        "codebertscore_s_f1-126": 0.6902174353599548,
        "codebertscore_s_f3-126": 0.757222056388855,
        "codebertscore_s_f1-21": 0.7377235293388367,
        "codebertscore_s_f3-21": 0.7751436829566956,
        "codebertscore_s_f1-3": 0.9972667098045349,
        "codebertscore_s_f3-3": 0.9972666501998901,
        "codebertscore_s_f1-146": 0.9440611004829407,
        "codebertscore_s_f3-146": 0.9628491401672363,
        "codebertscore_s_f1-49": 0.7382792234420776,
        "codebertscore_s_f3-49": 0.7670227885246277,
        "codebertscore_s_f1-44": 0.8466828465461731,
        "codebertscore_s_f3-44": 0.8961103558540344,
        "codebertscore_s_f1-40": 0.946328341960907,
        "codebertscore_s_f3-40": 0.9638358950614929,
        "codebertscore_s_f1-25": 0.8551782965660095,
        "codebertscore_s_f3-25": 0.8623090386390686,
        "codebertscore_s_f1-19": 0.7823091149330139,
        "codebertscore_s_f3-19": 0.7953940629959106,
        "codebertscore_s_f1-134": 0.9412105679512024,
        "codebertscore_s_f3-134": 0.9240572452545166,
        "codebertscore_s_f1-192": 0.7138229608535767,
        "codebertscore_s_f3-192": 0.7603684067726135,
        "codebertscore_s_f1-109": 0.9011553525924683,
        "codebertscore_s_f3-109": 0.9260969161987305,
        "codebertscore_s_f1-17": 0.7203210592269897,
        "codebertscore_s_f3-17": 0.7594388127326965,
        "codebertscore_s_f1-119": 0.8113674521446228,
        "codebertscore_s_f3-119": 0.883344292640686,
        "codebertscore_s_f1-82": 0.7336804270744324,
        "codebertscore_s_f3-82": 0.7697479128837585,
        "codebertscore_s_f1-5": 0.7509674429893494,
        "codebertscore_s_f3-5": 0.7999763488769531,
        "codebertscore_s_f1-39": 0.6769976615905762,
        "codebertscore_s_f3-39": 0.7514156699180603,
        "codebertscore_s_f1-42": 0.6729254722595215,
        "codebertscore_s_f3-42": 0.6184139251708984,
        "codebertscore_s_f1-96": 0.8302716612815857,
        "codebertscore_s_f3-96": 0.8077285885810852,
        "codebertscore_s_f1-122": 0.9115641713142395,
        "codebertscore_s_f3-122": 0.9206314086914062,
        "gpt35_nsnr-126": 4,
        "raw_gpt35_nsnr-126": "4",
        "gpt35_nsnr-21": 4,
        "raw_gpt35_nsnr-21": "4",
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-146": 4,
        "raw_gpt35_nsnr-146": "4",
        "gpt35_nsnr-49": 4,
        "raw_gpt35_nsnr-49": "4",
        "gpt35_nsnr-44": 4,
        "raw_gpt35_nsnr-44": "4",
        "gpt35_nsnr-40": 4,
        "raw_gpt35_nsnr-40": "4",
        "gpt35_nsnr-25": 4,
        "raw_gpt35_nsnr-25": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nsnr-134": 4,
        "raw_gpt35_nsnr-134": "4",
        "gpt35_nsnr-192": 4,
        "raw_gpt35_nsnr-192": "4",
        "gpt35_nsnr-109": 4,
        "raw_gpt35_nsnr-109": "4",
        "gpt35_nsnr-17": 3,
        "raw_gpt35_nsnr-17": "3",
        "gpt35_nsnr-119": 4,
        "raw_gpt35_nsnr-119": "4",
        "gpt35_nsnr-82": 4,
        "raw_gpt35_nsnr-82": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-39": 4,
        "raw_gpt35_nsnr-39": "4",
        "gpt35_nsnr-42": 0,
        "raw_gpt35_nsnr-42": "0",
        "gpt35_nsnr-96": 4,
        "raw_gpt35_nsnr-96": "4",
        "gpt35_nsnr-122": 4,
        "raw_gpt35_nsnr-122": "4",
        "gpt35_nswr-126": 4,
        "raw_gpt35_nswr-126": "4",
        "gpt35_nswr-21": 3,
        "raw_gpt35_nswr-21": "3",
        "gpt35_nswr-3": 4,
        "raw_gpt35_nswr-3": "4",
        "gpt35_nswr-146": 4,
        "raw_gpt35_nswr-146": "4",
        "gpt35_nswr-49": 3,
        "raw_gpt35_nswr-49": "3",
        "gpt35_nswr-44": 4,
        "raw_gpt35_nswr-44": "4",
        "gpt35_nswr-40": 4,
        "raw_gpt35_nswr-40": "4",
        "gpt35_nswr-25": 2,
        "raw_gpt35_nswr-25": "2",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3",
        "gpt35_nswr-134": 3,
        "raw_gpt35_nswr-134": "3",
        "gpt35_nswr-192": 4,
        "raw_gpt35_nswr-192": "4",
        "gpt35_nswr-109": 4,
        "raw_gpt35_nswr-109": "4",
        "gpt35_nswr-17": 4,
        "raw_gpt35_nswr-17": "4",
        "gpt35_nswr-119": 3,
        "raw_gpt35_nswr-119": "3",
        "gpt35_nswr-82": 4,
        "raw_gpt35_nswr-82": "4",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-39": 3,
        "raw_gpt35_nswr-39": "3",
        "gpt35_nswr-42": 2,
        "raw_gpt35_nswr-42": "2",
        "gpt35_nswr-96": 3,
        "raw_gpt35_nswr-96": "3",
        "gpt35_nswr-122": 4,
        "raw_gpt35_nswr-122": "4"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a list of numbers, return whether or not they are sorted\n    // in ascending order. If list has more than 1 duplicate of the same\n    // number, return False. Assume no negative numbers and only integers.\n    // Examples\n    // is_sorted([5]) \u279e True\n    // is_sorted([1, 2, 3, 4, 5]) \u279e True\n    // is_sorted([1, 3, 2, 4, 5]) \u279e False\n    // is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    // is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    public static boolean isSorted(ArrayList<Integer> lst) {\n",
        "snippet": [
            "        List<Integer> sorted_lst = new ArrayList<>(lst);\n        Collections.sort(sorted_lst);\n        if (!lst.equals(sorted_lst)) {\n            return false;\n        }\n        for (int i = 0; i < lst.size() - 2; i++) {\n            if (lst.get(i) == lst.get(i + 1) && lst.get(i) == lst.get(i + 2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"
        ],
        "simplified": "Given a list of numbers, return whether or not they are sorted in ascending order. If list has more than 1 duplicate of the same number, return False. Assume no negative numbers and only integers.",
        "task_id": "126",
        "182": "// Your code here\n        return false;",
        "grade-182": {
            "execution": 0
        },
        "29": "//if list has more than 1 duplicate of the same number, return False\n        int i;\n        boolean sorted = true;\n        for(i = 0; i < lst.size() - 1; i++) {\n            if(lst.get(i) > lst.get(i + 1)) {\n                sorted = false;\n                break;\n            }\n        }\n        return sorted;",
        "grade-29": {
            "execution": 0
        },
        "6": "boolean duplicate = false;\n        for (int i = 0; i < lst.size() - 1; i++) {\n            if (lst.get(i).equals(lst.get(i + 1))) {\n                if (duplicate) {\n                    return false;\n                }\n                duplicate = true;\n            }\n            if (lst.get(i) > lst.get(i + 1)) {\n                return false;\n            }\n        }\n        return true;",
        "grade-6": {
            "execution": 0
        },
        "73": "ArrayList<Integer> copy = new ArrayList<Integer>(lst);\n        Collections.sort(copy);\n        HashSet<Integer> unique = new HashSet<Integer>(copy);\n        if (copy.equals(lst) && unique.size() == lst.size()) {\n            return true;\n        }\n        return false;",
        "grade-73": {
            "execution": 0
        },
        "65": "// Given an arraylist of numbers as input, return true if the list is\n        // sorted, false otherwise.\n        // Assume lst is NOT empty, and there are no negative numbers.\n        // Assume that an array list that is all equal values is NOT sorted.\n        // Assume the array only contains integers, no decimals.\n        // Assume that duplicates of the same number are sorted only if the\n        // duplicates are in sequential order.\n        // Assume that the list is not empty.\n        // Assume that the list will not have more than 100 elements.\n        // Assume that the list does not have null elements.\n        if (lst.size() == 1) {\n            return true;\n        }\n        else {\n            Integer prev = lst.get(0);\n            for (int i = 1; i < lst.size(); i++) {\n                if (lst.get(i) < prev) {\n                    return false;\n                }\n                else {\n                    prev = lst.get(i);\n                }\n            }\n            return true;\n        }",
        "grade-65": {
            "execution": 0
        },
        "60": "boolean isSorted = true;\n        ArrayList<Integer> lstCopy = new ArrayList<Integer>(lst);\n        Collections.sort(lstCopy);\n        int count = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int lstCopyInt = lstCopy.get(i);\n            int lstInt = lst.get(i);\n            if (lstCopyInt != lstInt) {\n                isSorted = false;\n            }\n            for (int j = 0; j < lst.size(); j++) {\n                if (lstCopyInt == lst.get(j)) {\n                    count++;\n                }\n            }\n            if (count > 1) {\n                isSorted = false;\n            }\n            count = 0;\n        }\n        return isSorted;",
        "grade-60": {
            "execution": 0
        },
        "36": "ArrayList<Integer> seen_nums = new ArrayList<Integer>();\n        for (int elem : lst) {\n            if (seen_nums.size() != 0 && seen_nums.get(seen_nums.size() - 1) > elem) {\n                return false;\n            }\n            if (seen_nums.contains(elem)) {\n                return false;\n            }\n            seen_nums.add(elem);\n        }\n        return true;",
        "grade-36": {
            "execution": 0
        },
        "27": "boolean duplicate = false;\n        if (lst.size() == 1) {\n            return true;\n        }\n        for (int i = 0; i < lst.size() - 1; i++) {\n            if (lst.get(i) > lst.get(i + 1)) {\n                return false;\n            }\n            if (lst.get(i) == lst.get(i + 1)) {\n                duplicate = true;\n            }\n        }\n        return !duplicate;",
        "grade-27": {
            "execution": 0
        },
        "193": "int prev = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < prev) {\n                return false;\n            }\n            prev = lst.get(i);\n        }\n        return true;",
        "grade-193": {
            "execution": 0
        },
        "152": "// your code here\n        HashSet<Integer> temp = new HashSet<>();\n        for(int x: lst) {\n            if(temp.contains(x)) return false;\n            temp.add(x);\n        }\n        for(int i = 0; i < lst.size() - 1; i++) {\n            if(lst.get(i) > lst.get(i + 1)) return false;\n        }\n        return true;",
        "grade-152": {
            "execution": 0
        },
        "22": "// write your code here\n        return true;",
        "grade-22": {
            "execution": 0
        },
        "167": "HashSet<Integer> set = new HashSet<Integer>();\n        ArrayList<Integer> sortedLst = new ArrayList<Integer>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (!set.contains(lst.get(i))) {\n                set.add(lst.get(i));\n                sortedLst.add(lst.get(i));\n            }\n        }\n        Collections.sort(sortedLst);\n        for (int i = 0; i < sortedLst.size(); i++) {\n            if (sortedLst.get(i) != lst.get(i)) {\n                return false;\n            }\n        }\n        return true;",
        "grade-167": {
            "execution": 0
        },
        "115": "ArrayList<Integer> lst2 = new ArrayList<Integer>(lst);\n        Collections.sort(lst2);\n        // use for debugging\n        for (int i = 0; i < lst.size(); i++) {\n            System.out.println(lst.get(i) + \" \" + lst2.get(i));\n        }\n        return (lst.equals(lst2));",
        "grade-115": {
            "execution": 0
        },
        "8": "for (int i = 0; i < lst.size() - 1; i++) {\n            if (lst.get(i) >= lst.get(i + 1)) {\n                return false;\n            }\n        }\n        return true;",
        "grade-8": {
            "execution": 0
        },
        "7": "HashSet<Integer> hs = new HashSet<>();\n        for (int i = 0; i < lst.size(); i++) {\n            hs.add(lst.get(i));\n        }\n        if (hs.size() == lst.size()) {\n            for (int i = 0; i < lst.size() - 1; i++) {\n                if (lst.get(i) > lst.get(i + 1)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;",
        "grade-7": {
            "execution": 0
        },
        "23": "// Your code here...\n        return false;",
        "grade-23": {
            "execution": 0
        },
        "58": "if (lst.size() == 1) {\n            return true;\n        }\n        for (int i = 0; i < lst.size() - 1; i++) {\n            if (lst.get(i) >= lst.get(i + 1)) {\n                return false;\n            }\n        }\n        return true;",
        "grade-58": {
            "execution": 0
        },
        "62": "ArrayList<Integer> copy = new ArrayList<>(lst);\n        Collections.sort(copy);\n        if (copy.equals(lst)) {\n            return true;\n        }\n        return false;",
        "grade-62": {
            "execution": 0
        },
        "140": "Set<Integer> s = new HashSet<>(lst);\n        if (s.size() != lst.size()) return false;\n        for (int i = 0; i < lst.size() - 1; i++) {\n            if (lst.get(i) > lst.get(i + 1)) return false;\n        }\n        return true;",
        "grade-140": {
            "execution": 0
        },
        "171": "// Your code here\n        return lst.equals(sort(lst));",
        "grade-171": {
            "execution": 0
        },
        "bleu-182": 8.6807805958482e-07,
        "bleu-29": 0.3260876366109825,
        "bleu-6": 0.5603412884124495,
        "bleu-73": 0.26819840376656645,
        "bleu-65": 0.2336972223571356,
        "bleu-60": 0.37237701245105065,
        "bleu-36": 0.27667988315947967,
        "bleu-27": 0.6002709409936716,
        "bleu-193": 0.30429181701340263,
        "bleu-152": 0.4508596869515798,
        "bleu-22": 3.312458976946301e-06,
        "bleu-167": 0.4042354387347044,
        "bleu-115": 0.41107205804969205,
        "bleu-8": 0.28208275680973527,
        "bleu-7": 0.5258641137468958,
        "bleu-23": 2.6893673600119505e-05,
        "bleu-58": 0.4150661988890611,
        "bleu-62": 0.11990127372191883,
        "bleu-140": 0.44894641006289626,
        "bleu-171": 0.0009446707283298505,
        "codebleu-182": 0.030304316842360495,
        "codebleu-29": 0.4756004777999606,
        "codebleu-6": 0.6881310290781858,
        "codebleu-73": 0.40439858754567365,
        "codebleu-65": 0.5807108954315608,
        "codebleu-60": 0.6842971799382825,
        "codebleu-36": 0.48060439927420023,
        "codebleu-27": 0.7013016767536613,
        "codebleu-193": 0.4100516291685214,
        "codebleu-152": 0.6411718518781213,
        "codebleu-22": 0.03463492840734202,
        "codebleu-167": 0.687836657006507,
        "codebleu-115": 0.5548405903381834,
        "codebleu-8": 0.3496864210611178,
        "codebleu-7": 0.7275455320511935,
        "codebleu-23": 0.03896393273634634,
        "codebleu-58": 0.46855048623198803,
        "codebleu-62": 0.23463760476934922,
        "codebleu-140": 0.564147847293792,
        "codebleu-171": 0.06980436002131986,
        "chrf-182": 0.06308490787452055,
        "chrf-29": 0.3858904206122672,
        "chrf-6": 0.5346539594511236,
        "chrf-73": 0.4403679603900839,
        "chrf-65": 0.40087423116442344,
        "chrf-60": 0.5514819792087284,
        "chrf-36": 0.4014587239400153,
        "chrf-27": 0.53902247664497,
        "chrf-193": 0.367678593241237,
        "chrf-152": 0.46986500124448904,
        "chrf-22": 0.0636325901607371,
        "chrf-167": 0.6151178736487282,
        "chrf-115": 0.4935602925637353,
        "chrf-8": 0.37708863613838245,
        "chrf-7": 0.5368603881836163,
        "chrf-23": 0.06554828378585816,
        "chrf-58": 0.4381816392717009,
        "chrf-62": 0.4035827313039325,
        "chrf-140": 0.4941423332082786,
        "chrf-171": 0.1195965592380981,
        "rougel-182": 0.05217391304347826,
        "rougel-29": 0.5164835164835164,
        "rougel-6": 0.6395939086294415,
        "rougel-73": 0.5474860335195532,
        "rougel-65": 0.35256410256410253,
        "rougel-60": 0.5447761194029851,
        "rougel-36": 0.4680851063829787,
        "rougel-27": 0.70935960591133,
        "rougel-193": 0.5542168674698795,
        "rougel-152": 0.6633663366336633,
        "rougel-22": 0.05172413793103448,
        "rougel-167": 0.5482625482625483,
        "rougel-115": 0.6178010471204188,
        "rougel-8": 0.6114649681528662,
        "rougel-7": 0.6339285714285714,
        "rougel-23": 0.10169491525423728,
        "rougel-58": 0.6820809248554912,
        "rougel-62": 0.4625850340136054,
        "rougel-140": 0.7272727272727272,
        "rougel-171": 0.14634146341463414,
        "meteor-182": 0.01544799176107106,
        "meteor-29": 0.4561054913294797,
        "meteor-6": 0.6492781042260208,
        "meteor-73": 0.3753411653020054,
        "meteor-65": 0.5272153062430224,
        "meteor-60": 0.5438196833484957,
        "meteor-36": 0.4389515142331178,
        "meteor-27": 0.6692815228074233,
        "meteor-193": 0.45623877990005013,
        "meteor-152": 0.5558479275781171,
        "meteor-22": 0.030292638317329677,
        "meteor-167": 0.7036760541364618,
        "meteor-115": 0.49571832356741785,
        "meteor-8": 0.4502428430404738,
        "meteor-7": 0.6059198006237521,
        "meteor-23": 0.030800821355236135,
        "meteor-58": 0.5568683946793003,
        "meteor-62": 0.25506812894649383,
        "meteor-140": 0.5815213933572434,
        "meteor-171": 0.07015085388193383,
        "ruby-182": 0.028037383177570097,
        "ruby-29": 0.4112149532710281,
        "ruby-6": 0.42056074766355145,
        "ruby-73": 0.4299065420560748,
        "ruby-65": 0.18536585365853664,
        "ruby-60": 0.3726708074534162,
        "ruby-36": 0.3271028037383178,
        "ruby-27": 0.5794392523364487,
        "ruby-193": 0.4299065420560748,
        "ruby-152": 0.485981308411215,
        "ruby-22": 0.028037383177570097,
        "ruby-167": 0.375,
        "ruby-115": 0.4953271028037384,
        "ruby-8": 0.44859813084112155,
        "ruby-7": 0.4358974358974359,
        "ruby-23": 0.05607476635514019,
        "ruby-58": 0.5420560747663552,
        "ruby-62": 0.30841121495327106,
        "ruby-140": 0.6074766355140186,
        "ruby-171": 0.08411214953271029,
        "codebertscore_f1-182": 0.5708917379379272,
        "codebertscore_f3-182": 0.5479321479797363,
        "codebertscore_f1-29": 0.8078979253768921,
        "codebertscore_f3-29": 0.8138478994369507,
        "codebertscore_f1-6": 0.8457658290863037,
        "codebertscore_f3-6": 0.838134229183197,
        "codebertscore_f1-73": 0.808733344078064,
        "codebertscore_f3-73": 0.7895938754081726,
        "codebertscore_f1-65": 0.7268534302711487,
        "codebertscore_f3-65": 0.7608863711357117,
        "codebertscore_f1-60": 0.8225371241569519,
        "codebertscore_f3-60": 0.837426483631134,
        "codebertscore_f1-36": 0.7899306416511536,
        "codebertscore_f3-36": 0.7851226925849915,
        "codebertscore_f1-27": 0.8567259311676025,
        "codebertscore_f3-27": 0.8447237014770508,
        "codebertscore_f1-193": 0.8197562098503113,
        "codebertscore_f3-193": 0.7974640130996704,
        "codebertscore_f1-152": 0.8595656156539917,
        "codebertscore_f3-152": 0.866557776927948,
        "codebertscore_f1-22": 0.5495063066482544,
        "codebertscore_f3-22": 0.5282930731773376,
        "codebertscore_f1-167": 0.8427832722663879,
        "codebertscore_f3-167": 0.8428926467895508,
        "codebertscore_f1-115": 0.8404483199119568,
        "codebertscore_f3-115": 0.837621808052063,
        "codebertscore_f1-8": 0.8596323728561401,
        "codebertscore_f3-8": 0.8296456933021545,
        "codebertscore_f1-7": 0.8697595596313477,
        "codebertscore_f3-7": 0.8633862137794495,
        "codebertscore_f1-23": 0.5663406848907471,
        "codebertscore_f3-23": 0.5429052114486694,
        "codebertscore_f1-58": 0.8549025058746338,
        "codebertscore_f3-58": 0.8301356434822083,
        "codebertscore_f1-62": 0.8230170607566833,
        "codebertscore_f3-62": 0.7793422937393188,
        "codebertscore_f1-140": 0.8673736453056335,
        "codebertscore_f3-140": 0.8512949347496033,
        "codebertscore_f1-171": 0.7125155329704285,
        "codebertscore_f3-171": 0.6901016235351562,
        "codebertscore_s_f1-182": 0.9328947067260742,
        "codebertscore_s_f3-182": 0.9014309048652649,
        "codebertscore_s_f1-29": 0.9420495629310608,
        "codebertscore_s_f3-29": 0.941169023513794,
        "codebertscore_s_f1-6": 0.9477255940437317,
        "codebertscore_s_f3-6": 0.9454598426818848,
        "codebertscore_s_f1-73": 0.9450423717498779,
        "codebertscore_s_f3-73": 0.9329303503036499,
        "codebertscore_s_f1-65": 0.8798384070396423,
        "codebertscore_s_f3-65": 0.9166348576545715,
        "codebertscore_s_f1-60": 0.9349503517150879,
        "codebertscore_s_f3-60": 0.9452535510063171,
        "codebertscore_s_f1-36": 0.9299935698509216,
        "codebertscore_s_f3-36": 0.9269323945045471,
        "codebertscore_s_f1-27": 0.9562110304832458,
        "codebertscore_s_f3-27": 0.9532723426818848,
        "codebertscore_s_f1-193": 0.9476733803749084,
        "codebertscore_s_f3-193": 0.9356422424316406,
        "codebertscore_s_f1-152": 0.9548372030258179,
        "codebertscore_s_f3-152": 0.956068217754364,
        "codebertscore_s_f1-22": 0.9310691356658936,
        "codebertscore_s_f3-22": 0.9007909297943115,
        "codebertscore_s_f1-167": 0.9448467493057251,
        "codebertscore_s_f3-167": 0.9473732709884644,
        "codebertscore_s_f1-115": 0.9507104158401489,
        "codebertscore_s_f3-115": 0.9472724795341492,
        "codebertscore_s_f1-8": 0.9554862976074219,
        "codebertscore_s_f3-8": 0.9410163760185242,
        "codebertscore_s_f1-7": 0.9549825191497803,
        "codebertscore_s_f3-7": 0.9545964002609253,
        "codebertscore_s_f1-23": 0.9330076575279236,
        "codebertscore_s_f3-23": 0.9013499617576599,
        "codebertscore_s_f1-58": 0.9626274108886719,
        "codebertscore_s_f3-58": 0.951411247253418,
        "codebertscore_s_f1-62": 0.9511728286743164,
        "codebertscore_s_f3-62": 0.9298200011253357,
        "codebertscore_s_f1-140": 0.9595413208007812,
        "codebertscore_s_f3-140": 0.9520004391670227,
        "codebertscore_s_f1-171": 0.9366046190261841,
        "codebertscore_s_f3-171": 0.9105488657951355,
        "gpt35_nsnr-182": 0,
        "raw_gpt35_nsnr-182": "Score: 1",
        "gpt35_nsnr-29": 3,
        "raw_gpt35_nsnr-29": "3",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-73": 4,
        "raw_gpt35_nsnr-73": "4",
        "gpt35_nsnr-65": 4,
        "raw_gpt35_nsnr-65": "4",
        "gpt35_nsnr-60": 3,
        "raw_gpt35_nsnr-60": "3",
        "gpt35_nsnr-36": 4,
        "raw_gpt35_nsnr-36": "4",
        "gpt35_nsnr-27": 4,
        "raw_gpt35_nsnr-27": "4",
        "gpt35_nsnr-193": 3,
        "raw_gpt35_nsnr-193": "3",
        "gpt35_nsnr-152": 4,
        "raw_gpt35_nsnr-152": "4",
        "gpt35_nsnr-22": 0,
        "raw_gpt35_nsnr-22": "Score: 0",
        "gpt35_nsnr-167": 3,
        "raw_gpt35_nsnr-167": "3",
        "gpt35_nsnr-115": 3,
        "raw_gpt35_nsnr-115": "3",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 2,
        "raw_gpt35_nsnr-23": "2",
        "gpt35_nsnr-58": 3,
        "raw_gpt35_nsnr-58": "3",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-140": 4,
        "raw_gpt35_nsnr-140": "4",
        "gpt35_nsnr-171": 3,
        "raw_gpt35_nsnr-171": "3",
        "gpt35_nswr-182": 0,
        "raw_gpt35_nswr-182": "Score: 0",
        "gpt35_nswr-29": 3,
        "raw_gpt35_nswr-29": "3",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-73": 3,
        "raw_gpt35_nswr-73": "3",
        "gpt35_nswr-65": 3,
        "raw_gpt35_nswr-65": "3",
        "gpt35_nswr-60": 3,
        "raw_gpt35_nswr-60": "3",
        "gpt35_nswr-36": 3,
        "raw_gpt35_nswr-36": "3",
        "gpt35_nswr-27": 3,
        "raw_gpt35_nswr-27": "3",
        "gpt35_nswr-193": 3,
        "raw_gpt35_nswr-193": "3",
        "gpt35_nswr-152": 3,
        "raw_gpt35_nswr-152": "3",
        "gpt35_nswr-22": 2,
        "raw_gpt35_nswr-22": "2",
        "gpt35_nswr-167": 3,
        "raw_gpt35_nswr-167": "3",
        "gpt35_nswr-115": 3,
        "raw_gpt35_nswr-115": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 2,
        "raw_gpt35_nswr-23": "2",
        "gpt35_nswr-58": 3,
        "raw_gpt35_nswr-58": "3",
        "gpt35_nswr-62": 3,
        "raw_gpt35_nswr-62": "3",
        "gpt35_nswr-140": 3,
        "raw_gpt35_nswr-140": "3",
        "gpt35_nswr-171": 2,
        "raw_gpt35_nswr-171": "2"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    public static ArrayList<String> byLength(ArrayList<Integer> arr) {\n",
        "snippet": [
            "        List<Integer> sorted_arr = new ArrayList<>(arr);\n        sorted_arr.sort(Collections.reverseOrder());\n        List<String> new_arr = new ArrayList<>();\n        for (int var : sorted_arr) {\n            if (var >= 1 && var <= 9) {\n                switch (var) {\n                    case 1 -> new_arr.add(\"One\");\n                    case 2 -> new_arr.add(\"Two\");\n                    case 3 -> new_arr.add(\"Three\");\n                    case 4 -> new_arr.add(\"Four\");\n                    case 5 -> new_arr.add(\"Five\");\n                    case 6 -> new_arr.add(\"Six\");\n                    case 7 -> new_arr.add(\"Seven\");\n                    case 8 -> new_arr.add(\"Eight\");\n                    case 9 -> new_arr.add(\"Nine\");\n                }\n            }\n        }\n        return new_arr;\n    }\n}"
        ],
        "simplified": "Given an array of integers, sort the integers that are between 1 and 9 inclusive, reverse the resulting array, and then replace each digit by its corresponding name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".",
        "task_id": "105",
        "167": "ArrayList<String> result = new ArrayList<String>();\n        // Sort and reverse the array.\n        arr.sort(null);\n        Collections.reverse(arr);\n        // Convert each element in the array to its corresponding string.\n        for (int i = 0; i < arr.size(); i++) {\n            int number = arr.get(i);\n            switch (number) {\n                case 1:\n                    result.add(\"One\");\n                    break;\n                case 2:\n                    result.add(\"Two\");\n                    break;\n                case 3:\n                    result.add(\"Three\");\n                    break;\n                case 4:\n                    result.add(\"Four\");\n                    break;\n                case 5:\n                    result.add(\"Five\");\n                    break;\n                case 6:\n                    result.add(\"Six\");\n                    break;\n                case 7:\n                    result.add(\"Seven\");\n                    break;\n                case 8:\n                    result.add(\"Eight\");\n                    break;\n                case 9:\n                    result.add(\"Nine\");\n                    break;\n                default:\n                    break;\n            }\n        }\n        return result;",
        "grade-167": {
            "execution": 1
        },
        "28": "// TODO: Solve it!\n        return null;",
        "grade-28": {
            "execution": 0
        },
        "6": "ArrayList<String> result = new ArrayList<String>();\n        ArrayList<Integer> nums = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0 && arr.get(i) < 10)\n                nums.add(arr.get(i));\n        }\n        Collections.sort(nums);\n        Collections.reverse(nums);\n        for (int i = 0; i < nums.size(); i++) {\n            switch (nums.get(i)) {\n                case 1:\n                    result.add(\"One\");\n                    break;\n                case 2:\n                    result.add(\"Two\");\n                    break;\n                case 3:\n                    result.add(\"Three\");\n                    break;\n                case 4:\n                    result.add(\"Four\");\n                    break;\n                case 5:\n                    result.add(\"Five\");\n                    break;\n                case 6:\n                    result.add(\"Six\");\n                    break;\n                case 7:\n                    result.add(\"Seven\");\n                    break;\n                case 8:\n                    result.add(\"Eight\");\n                    break;\n                case 9:\n                    result.add(\"Nine\");\n                    break;\n            }\n        }\n        return result;",
        "grade-6": {
            "execution": 1
        },
        "196": "ArrayList<String> nums = new ArrayList<>();\n        for (int n : arr) {\n            if (n < 1 || n > 9) {\n                continue;\n            }\n            nums.add(Integer.toString(n));\n        }\n        nums.sort((a, b) -> a.length() - b.length());\n        Collections.reverse(nums);\n        return nums;",
        "grade-196": {
            "execution": 0
        },
        "70": "Collections.sort(arr);\n        Collections.reverse(arr);\n        HashMap<Integer, String> map = new HashMap<>();\n        map.put(1, \"One\");\n        map.put(2, \"Two\");\n        map.put(3, \"Three\");\n        map.put(4, \"Four\");\n        map.put(5, \"Five\");\n        map.put(6, \"Six\");\n        map.put(7, \"Seven\");\n        map.put(8, \"Eight\");\n        map.put(9, \"Nine\");\n        ArrayList<String> str = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0 && arr.get(i) < 10) {\n                str.add(map.get(arr.get(i)));\n            }\n        }\n        return str;",
        "grade-70": {
            "execution": 1
        },
        "62": "if (arr.size() == 0) {\n            return new ArrayList<String>();\n        }\n        ArrayList<Integer> nums = new ArrayList<Integer>();\n        ArrayList<String> strs = new ArrayList<String>();\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0 && arr.get(i) < 10) {\n                nums.add(arr.get(i));\n            }\n        }\n        Collections.sort(nums);\n        Collections.reverse(nums);\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) == 1) {\n                strs.add(\"One\");\n            } else if (nums.get(i) == 2) {\n                strs.add(\"Two\");\n            } else if (nums.get(i) == 3) {\n                strs.add(\"Three\");\n            } else if (nums.get(i) == 4) {\n                strs.add(\"Four\");\n            } else if (nums.get(i) == 5) {\n                strs.add(\"Five\");\n            } else if (nums.get(i) == 6) {\n                strs.add(\"Six\");\n            } else if (nums.get(i) == 7) {\n                strs.add(\"Seven\");\n            } else if (nums.get(i) == 8) {\n                strs.add(\"Eight\");\n            } else if (nums.get(i) == 9) {\n                strs.add(\"Nine\");\n            }\n        }\n        return strs;",
        "grade-62": {
            "execution": 1
        },
        "57": "ArrayList<String> res = new ArrayList<>();\n        if (arr.size() == 0) {\n            return res;\n        }\n        Collections.sort(arr);\n        Collections.reverse(arr);\n        HashMap<Integer, String> map = new HashMap<>();\n        map.put(1, \"One\");\n        map.put(2, \"Two\");\n        map.put(3, \"Three\");\n        map.put(4, \"Four\");\n        map.put(5, \"Five\");\n        map.put(6, \"Six\");\n        map.put(7, \"Seven\");\n        map.put(8, \"Eight\");\n        map.put(9, \"Nine\");\n        for (int a : arr) {\n            if (a > 0 && a < 10) {\n                res.add(map.get(a));\n            }\n        }\n        return res;",
        "grade-57": {
            "execution": 1
        },
        "35": "ArrayList<String> result = new ArrayList<String>();\n        ArrayList<Integer> newArr = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0 && arr.get(i) < 10) {\n                newArr.add(arr.get(i));\n            }\n        }\n        newArr.sort(null);\n        Collections.reverse(newArr);\n        for (int i = 0; i < newArr.size(); i++) {\n            if (newArr.get(i) == 1) {\n                result.add(\"One\");\n            } else if (newArr.get(i) == 2) {\n                result.add(\"Two\");\n            } else if (newArr.get(i) == 3) {\n                result.add(\"Three\");\n            } else if (newArr.get(i) == 4) {\n                result.add(\"Four\");\n            } else if (newArr.get(i) == 5) {\n                result.add(\"Five\");\n            } else if (newArr.get(i) == 6) {\n                result.add(\"Six\");\n            } else if (newArr.get(i) == 7) {\n                result.add(\"Seven\");\n            } else if (newArr.get(i) == 8) {\n                result.add(\"Eight\");\n            } else if (newArr.get(i) == 9) {\n                result.add(\"Nine\");\n            }\n        }\n        return result;",
        "grade-35": {
            "execution": 1
        },
        "195": "String[] names = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n        ArrayList<String> arrString = new ArrayList<String>();\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) >= 1 && arr.get(i) <= 9) {\n                arrString.add(names[arr.get(i) - 1]);\n            }\n        }\n        Collections.sort(arrString);\n        Collections.reverse(arrString);\n        return arrString;",
        "grade-195": {
            "execution": 0
        },
        "26": "ArrayList<String> output = new ArrayList<String>();\n        // a map of the numbers sorted by length.\n        //Map<Integer, String> numMap = new TreeMap<Integer, String>();\n        //ArrayList<Integer> numMap = new ArrayList<Integer>();\n        Map<Integer, String> numMap = new TreeMap<Integer, String>();\n        // Add numbers to the map.\n        // Make a list of numbers.\n        ArrayList<Integer> myList = new ArrayList<Integer>();\n        int counter = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) < 10 && arr.get(i) > 0) {\n                // if it's between 1 and 9, add it to the list.\n                myList.add(arr.get(i));\n            }\n        }\n        // Now, sort the list and then reverse it.\n        Collections.sort(myList);\n        Collections.reverse(myList);\n        // Now, create the map with the numbers and the word for the number.\n        for (int i = 0; i < myList.size(); i++) {\n            if (myList.get(i) == 1) {\n                numMap.put(myList.get(i), \"One\");\n            } else if (myList.get(i) == 2) {\n                numMap.put(myList.get(i), \"Two\");\n            } else if (myList.get(i) == 3) {\n                numMap.put(myList.get(i), \"Three\");\n            } else if (myList.get(i) == 4) {\n                numMap.put(myList.get(i), \"Four\");\n            } else if (myList.get(i) == 5) {\n                numMap.put(myList.get(i), \"Five\");\n            } else if (myList.get(i) == 6) {\n                numMap.put(myList.get(i), \"Six\");\n            } else if (myList.get(i) == 7) {\n                numMap.put(myList.get(i), \"Seven\");",
        "grade-26": {
            "execution": 0
        },
        "178": "// The function should return the expected output\n        HashMap<Integer, String> map = new HashMap<>();\n        map.put(1, \"One\");\n        map.put(2, \"Two\");\n        map.put(3, \"Three\");\n        map.put(4, \"Four\");\n        map.put(5, \"Five\");\n        map.put(6, \"Six\");\n        map.put(7, \"Seven\");\n        map.put(8, \"Eight\");\n        map.put(9, \"Nine\");\n        ArrayList<String> result = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) >= 1 && arr.get(i) <= 9) {\n                result.add(map.get(arr.get(i)));\n            }\n        }\n        Collections.sort(result);\n        Collections.reverse(result);\n        return result;",
        "grade-178": {
            "execution": 0
        },
        "141": "ArrayList<String> result = new ArrayList<String>();\n        if (arr.size() == 0) return result;\n        HashMap<Integer, String> h = new HashMap<Integer, String>();\n        h.put(1, \"One\");\n        h.put(2, \"Two\");\n        h.put(3, \"Three\");\n        h.put(4, \"Four\");\n        h.put(5, \"Five\");\n        h.put(6, \"Six\");\n        h.put(7, \"Seven\");\n        h.put(8, \"Eight\");\n        h.put(9, \"Nine\");\n        Collections.sort(arr);\n        Collections.reverse(arr);\n        for (int x : arr) {\n            if (h.containsKey(x)) result.add(h.get(x));\n        }\n        return result;",
        "grade-141": {
            "execution": 1
        },
        "22": "ArrayList<String> ret = new ArrayList<String>();\n        arr.sort(Comparator.naturalOrder());\n        Collections.reverse(arr);\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) >= 1 && arr.get(i) <= 9) {\n                switch (arr.get(i)) {\n                    case 1:\n                        ret.add(\"One\");\n                        break;\n                    case 2:\n                        ret.add(\"Two\");\n                        break;\n                    case 3:\n                        ret.add(\"Three\");\n                        break;\n                    case 4:\n                        ret.add(\"Four\");\n                        break;\n                    case 5:\n                        ret.add(\"Five\");\n                        break;\n                    case 6:\n                        ret.add(\"Six\");\n                        break;\n                    case 7:\n                        ret.add(\"Seven\");\n                        break;\n                    case 8:\n                        ret.add(\"Eight\");\n                        break;\n                    case 9:\n                        ret.add(\"Nine\");\n                        break;\n                }\n            }\n        }\n        return ret;",
        "grade-22": {
            "execution": 1
        },
        "154": "ArrayList<String> res = new ArrayList<>();\n        if (arr.size() == 0) return res;\n        Collections.sort(arr);\n        Collections.reverse(arr);\n        int i = 0;\n        while (i < arr.size()) {\n            if (arr.get(i) > 9 || arr.get(i) < 1) arr.remove(i);\n            else {\n                switch (arr.get(i)) {\n                    case 1:\n                        res.add(\"One\");\n                        break;\n                    case 2:\n                        res.add(\"Two\");\n                        break;\n                    case 3:\n                        res.add(\"Three\");\n                        break;\n                    case 4:\n                        res.add(\"Four\");\n                        break;\n                    case 5:\n                        res.add(\"Five\");\n                        break;\n                    case 6:\n                        res.add(\"Six\");\n                        break;\n                    case 7:\n                        res.add(\"Seven\");\n                        break;\n                    case 8:\n                        res.add(\"Eight\");\n                        break;\n                    case 9:\n                        res.add(\"Nine\");\n                        break;\n                }\n                i++;\n            }\n        }\n        return res;",
        "grade-154": {
            "execution": 1
        },
        "108": "ArrayList<String> result = new ArrayList<String>();\n        return result;",
        "grade-108": {
            "execution": 0
        },
        "8": "HashMap<Integer, String> map = new HashMap<>();\n        map.put(1, \"One\");\n        map.put(2, \"Two\");\n        map.put(3, \"Three\");\n        map.put(4, \"Four\");\n        map.put(5, \"Five\");\n        map.put(6, \"Six\");\n        map.put(7, \"Seven\");\n        map.put(8, \"Eight\");\n        map.put(9, \"Nine\");\n        ArrayList<String> output = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            if (map.containsKey(arr.get(i))) {\n                output.add(map.get(arr.get(i)));\n            }\n        }\n        Collections.sort(output);\n        Collections.reverse(output);\n        return output;",
        "grade-8": {
            "execution": 0
        },
        "7": "ArrayList<String> strings = new ArrayList<String>();\n        for (int number : arr) {\n            switch (number) {\n                case 1: strings.add(\"One\"); break;\n                case 2: strings.add(\"Two\"); break;\n                case 3: strings.add(\"Three\"); break;\n                case 4: strings.add(\"Four\"); break;\n                case 5: strings.add(\"Five\"); break;\n                case 6: strings.add(\"Six\"); break;\n                case 7: strings.add(\"Seven\"); break;\n                case 8: strings.add(\"Eight\"); break;\n                case 9: strings.add(\"Nine\"); break;\n            }\n        }\n        return strings;",
        "grade-7": {
            "execution": 0
        },
        "23": "ArrayList<String> res = new ArrayList<>();\n        HashMap<Integer, String> map = new HashMap<>();\n        map.put(1, \"One\");\n        map.put(2, \"Two\");\n        map.put(3, \"Three\");\n        map.put(4, \"Four\");\n        map.put(5, \"Five\");\n        map.put(6, \"Six\");\n        map.put(7, \"Seven\");\n        map.put(8, \"Eight\");\n        map.put(9, \"Nine\");\n        Collections.sort(arr);\n        for (int i = arr.size() - 1; i >= 0; i--) {\n            if (arr.get(i) > 0 && arr.get(i) < 10) {\n                res.add(map.get(arr.get(i)));\n            }\n        }\n        return res;",
        "grade-23": {
            "execution": 1
        },
        "55": "List<Integer> list = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9);\n        Set<Integer> set = new HashSet<Integer>(list);\n        String[] dict = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n        ArrayList<String> res = new ArrayList<String>();\n        for (int i = 0; i < arr.size(); i++) {\n            int cur = arr.get(i);\n            if (set.contains(cur)) {\n                res.add(dict[cur - 1]);\n            }\n        }\n        Collections.sort(res);\n        Collections.reverse(res);\n        return res;",
        "grade-55": {
            "execution": 0
        },
        "59": "var ans = new ArrayList<String>();\n        var dict = Map.of(1, \"One\", 2, \"Two\", 3, \"Three\", 4, \"Four\", 5, \"Five\", 6, \"Six\", 7, \"Seven\", 8, \"Eight\", 9, \"Nine\");\n        Arrays.sort(arr.toArray());\n        Collections.reverse(arr);\n        for (int n : arr) {\n            var name = dict.get(n);\n            if (name != null) {\n                ans.add(name);\n            }\n        }\n        return ans;",
        "grade-59": {
            "execution": 0
        },
        "bleu-167": 0.4012427445552174,
        "bleu-28": 6.230726199918983e-10,
        "bleu-6": 0.3819516087306627,
        "bleu-196": 0.09494771306175835,
        "bleu-70": 0.3022715485295501,
        "bleu-62": 0.2547511316067565,
        "bleu-57": 0.3211380669757836,
        "bleu-35": 0.2607823577296841,
        "bleu-195": 0.1974698421956588,
        "bleu-26": 0.11380647425259277,
        "bleu-178": 0.3035562943749406,
        "bleu-141": 0.29191611670209294,
        "bleu-22": 0.46823929177001733,
        "bleu-154": 0.39878500651930265,
        "bleu-108": 5.227496599132272e-05,
        "bleu-8": 0.2993102543085114,
        "bleu-7": 0.4383481349144162,
        "bleu-23": 0.30714484086073013,
        "bleu-55": 0.18645310344302404,
        "bleu-59": 0.1733096705648015,
        "codebleu-167": 0.5746046149984605,
        "codebleu-28": 0.017676773196076787,
        "codebleu-6": 0.6354477348015082,
        "codebleu-196": 0.2617947232410394,
        "codebleu-70": 0.5434163933400333,
        "codebleu-62": 0.6057391357159357,
        "codebleu-57": 0.5585585348823081,
        "codebleu-35": 0.6029616980016962,
        "codebleu-195": 0.383344096790719,
        "codebleu-26": 0.5830106134101697,
        "codebleu-178": 0.5473349588264389,
        "codebleu-141": 0.5166587349616559,
        "codebleu-22": 0.6366909873745565,
        "codebleu-154": 0.5998927291847486,
        "codebleu-108": 0.05051775791186084,
        "codebleu-8": 0.5289467595369124,
        "codebleu-7": 0.4981849096373898,
        "codebleu-23": 0.5535654992757187,
        "codebleu-55": 0.4752026402349703,
        "codebleu-59": 0.3549414489550503,
        "chrf-167": 0.48413860756433186,
        "chrf-28": 0.0210215434218607,
        "chrf-6": 0.5107894302766993,
        "chrf-196": 0.23298561093233583,
        "chrf-70": 0.3631012071613155,
        "chrf-62": 0.4381895319713894,
        "chrf-57": 0.35904305306049655,
        "chrf-35": 0.4613654597837563,
        "chrf-195": 0.30561502893611564,
        "chrf-26": 0.30349892195173633,
        "chrf-178": 0.35386854501812304,
        "chrf-141": 0.3436524040733336,
        "chrf-22": 0.5313586072443887,
        "chrf-154": 0.4954363458879314,
        "chrf-108": 0.09554069805379266,
        "chrf-8": 0.33705264270456664,
        "chrf-7": 0.4454524728665979,
        "chrf-23": 0.3397425464628864,
        "chrf-55": 0.32510548440071607,
        "chrf-59": 0.2882072856864645,
        "rougel-167": 0.6183574879227054,
        "rougel-28": 0.029556650246305417,
        "rougel-6": 0.5991189427312775,
        "rougel-196": 0.3942652329749104,
        "rougel-70": 0.43283582089552236,
        "rougel-62": 0.45601436265709155,
        "rougel-57": 0.5063938618925832,
        "rougel-35": 0.4562043795620438,
        "rougel-195": 0.3086053412462908,
        "rougel-26": 0.29640287769784174,
        "rougel-178": 0.37772397094430993,
        "rougel-141": 0.482051282051282,
        "rougel-22": 0.6763285024154589,
        "rougel-154": 0.6214953271028038,
        "rougel-108": 0.15094339622641512,
        "rougel-8": 0.3939393939393939,
        "rougel-7": 0.668555240793201,
        "rougel-23": 0.45226130653266333,
        "rougel-55": 0.3197831978319783,
        "rougel-59": 0.345679012345679,
        "meteor-167": 0.6722148537658168,
        "meteor-28": 0.008586147681740123,
        "meteor-6": 0.7130582032329223,
        "meteor-196": 0.22322980197152098,
        "meteor-70": 0.4817889222012077,
        "meteor-62": 0.5041728048644523,
        "meteor-57": 0.5033218939404231,
        "meteor-35": 0.4989585915185422,
        "meteor-195": 0.43873241408602304,
        "meteor-26": 0.3300740349238052,
        "meteor-178": 0.49985970167602545,
        "meteor-141": 0.4655260392967942,
        "meteor-22": 0.7123591028844596,
        "meteor-154": 0.6806743091553351,
        "meteor-108": 0.06667986546127562,
        "meteor-8": 0.4995910868110396,
        "meteor-7": 0.6238957859961876,
        "meteor-23": 0.49916158482377904,
        "meteor-55": 0.4724139104291101,
        "meteor-59": 0.4022815261663814,
        "ruby-167": 0.5067873303167421,
        "ruby-28": 0.015544041450777257,
        "ruby-6": 0.4367816091954023,
        "ruby-196": 0.27979274611398963,
        "ruby-70": 0.2009569377990431,
        "ruby-62": 0.3296703296703297,
        "ruby-57": 0.2525252525252525,
        "ruby-35": 0.3154929577464789,
        "ruby-195": 0.1658031088082902,
        "ruby-26": 0.19123505976095623,
        "ruby-178": 0.19090909090909092,
        "ruby-141": 0.24365482233502533,
        "ruby-22": 0.5610859728506787,
        "ruby-154": 0.5021276595744681,
        "ruby-108": 0.08290155440414504,
        "ruby-8": 0.19704433497536944,
        "ruby-7": 0.5181347150259068,
        "ruby-23": 0.21463414634146338,
        "ruby-55": 0.18652849740932642,
        "ruby-59": 0.21243523316062174,
        "codebertscore_f1-167": 0.8201550841331482,
        "codebertscore_f3-167": 0.828115701675415,
        "codebertscore_f1-28": 0.5234754681587219,
        "codebertscore_f3-28": 0.4812638461589813,
        "codebertscore_f1-6": 0.8204061985015869,
        "codebertscore_f3-6": 0.8276186585426331,
        "codebertscore_f1-196": 0.7356469035148621,
        "codebertscore_f3-196": 0.7117223739624023,
        "codebertscore_f1-70": 0.7747790217399597,
        "codebertscore_f3-70": 0.7701987028121948,
        "codebertscore_f1-62": 0.8000217080116272,
        "codebertscore_f3-62": 0.8121247887611389,
        "codebertscore_f1-57": 0.7879778146743774,
        "codebertscore_f3-57": 0.7818261981010437,
        "codebertscore_f1-35": 0.8154377341270447,
        "codebertscore_f3-35": 0.8237018585205078,
        "codebertscore_f1-195": 0.7620407938957214,
        "codebertscore_f3-195": 0.7425097227096558,
        "codebertscore_f1-26": 0.7564529776573181,
        "codebertscore_f3-26": 0.7727450728416443,
        "codebertscore_f1-178": 0.7550395131111145,
        "codebertscore_f3-178": 0.7532942891120911,
        "codebertscore_f1-141": 0.7646653652191162,
        "codebertscore_f3-141": 0.7578773498535156,
        "codebertscore_f1-22": 0.8412026166915894,
        "codebertscore_f3-22": 0.8431913256645203,
        "codebertscore_f1-154": 0.8238543272018433,
        "codebertscore_f3-154": 0.8293439745903015,
        "codebertscore_f1-108": 0.6536296606063843,
        "codebertscore_f3-108": 0.5725553035736084,
        "codebertscore_f1-8": 0.7549680471420288,
        "codebertscore_f3-8": 0.7473651170730591,
        "codebertscore_f1-7": 0.832604706287384,
        "codebertscore_f3-7": 0.8171054720878601,
        "codebertscore_f1-23": 0.7599661946296692,
        "codebertscore_f3-23": 0.7540062665939331,
        "codebertscore_f1-55": 0.7467944622039795,
        "codebertscore_f3-55": 0.7381994128227234,
        "codebertscore_f1-59": 0.7398391962051392,
        "codebertscore_f3-59": 0.7277486324310303,
        "codebertscore_s_f1-167": 0.8743058443069458,
        "codebertscore_s_f3-167": 0.8818961381912231,
        "codebertscore_s_f1-28": 0.8235397338867188,
        "codebertscore_s_f3-28": 0.7629125714302063,
        "codebertscore_s_f1-6": 0.8717795014381409,
        "codebertscore_s_f3-6": 0.8816514611244202,
        "codebertscore_s_f1-196": 0.8458601832389832,
        "codebertscore_s_f3-196": 0.8232479691505432,
        "codebertscore_s_f1-70": 0.8477161526679993,
        "codebertscore_s_f3-70": 0.842756450176239,
        "codebertscore_s_f1-62": 0.8440724015235901,
        "codebertscore_s_f3-62": 0.8613802194595337,
        "codebertscore_s_f1-57": 0.8554101586341858,
        "codebertscore_s_f3-57": 0.848293662071228,
        "codebertscore_s_f1-35": 0.8601169586181641,
        "codebertscore_s_f3-35": 0.873199999332428,
        "codebertscore_s_f1-195": 0.8552067279815674,
        "codebertscore_s_f3-195": 0.8380047678947449,
        "codebertscore_s_f1-26": 0.8073369264602661,
        "codebertscore_s_f3-26": 0.8351789116859436,
        "codebertscore_s_f1-178": 0.8360174298286438,
        "codebertscore_s_f3-178": 0.8368070721626282,
        "codebertscore_s_f1-141": 0.842461884021759,
        "codebertscore_s_f3-141": 0.8366397619247437,
        "codebertscore_s_f1-22": 0.8901405334472656,
        "codebertscore_s_f3-22": 0.8924685120582581,
        "codebertscore_s_f1-154": 0.8741732239723206,
        "codebertscore_s_f3-154": 0.8803731799125671,
        "codebertscore_s_f1-108": 0.8535187244415283,
        "codebertscore_s_f3-108": 0.7839148044586182,
        "codebertscore_s_f1-8": 0.8409281969070435,
        "codebertscore_s_f3-8": 0.8356650471687317,
        "codebertscore_s_f1-7": 0.8850386142730713,
        "codebertscore_s_f3-7": 0.8710026741027832,
        "codebertscore_s_f1-23": 0.8400667905807495,
        "codebertscore_s_f3-23": 0.8353655338287354,
        "codebertscore_s_f1-55": 0.8350590467453003,
        "codebertscore_s_f3-55": 0.8245832324028015,
        "codebertscore_s_f1-59": 0.8453838229179382,
        "codebertscore_s_f3-59": 0.8294653296470642,
        "gpt35_nsnr-167": 4,
        "raw_gpt35_nsnr-167": "4",
        "gpt35_nsnr-28": 0,
        "raw_gpt35_nsnr-28": "0",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-196": 4,
        "raw_gpt35_nsnr-196": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-195": 4,
        "raw_gpt35_nsnr-195": "4",
        "gpt35_nsnr-26": 3,
        "raw_gpt35_nsnr-26": "3",
        "gpt35_nsnr-178": 4,
        "raw_gpt35_nsnr-178": "4",
        "gpt35_nsnr-141": 4,
        "raw_gpt35_nsnr-141": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-154": 4,
        "raw_gpt35_nsnr-154": "4",
        "gpt35_nsnr-108": 0,
        "raw_gpt35_nsnr-108": "Score: 0",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-23": 3,
        "raw_gpt35_nsnr-23": "3",
        "gpt35_nsnr-55": 3,
        "raw_gpt35_nsnr-55": "3",
        "gpt35_nsnr-59": 3,
        "raw_gpt35_nsnr-59": "3",
        "gpt35_nswr-167": 3,
        "raw_gpt35_nswr-167": "3",
        "gpt35_nswr-28": 0,
        "raw_gpt35_nswr-28": "0",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-196": 3,
        "raw_gpt35_nswr-196": "3",
        "gpt35_nswr-70": 3,
        "raw_gpt35_nswr-70": "3",
        "gpt35_nswr-62": 3,
        "raw_gpt35_nswr-62": "3",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-195": 3,
        "raw_gpt35_nswr-195": "3",
        "gpt35_nswr-26": 2,
        "raw_gpt35_nswr-26": "2",
        "gpt35_nswr-178": 3,
        "raw_gpt35_nswr-178": "3",
        "gpt35_nswr-141": 3,
        "raw_gpt35_nswr-141": "3",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-154": 3,
        "raw_gpt35_nswr-154": "3",
        "gpt35_nswr-108": 4,
        "raw_gpt35_nswr-108": "4",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-55": 2,
        "raw_gpt35_nswr-55": "2",
        "gpt35_nswr-59": 2,
        "raw_gpt35_nswr-59": "2"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // \"Given an array representing a branch of a tree that has non-negative integer nodes\n    // your task is to pluck one of the nodes and return it.\n    // The plucked node should be the node with the smallest even value.\n    // If multiple nodes with the same smallest even value are found return the node that has smallest index.\n    // The plucked node should be returned in a list, [ smalest_value, its index ],\n    // If there are no even values or the given array is empty, return [].\n    // Example 1:\n    // Input: [4,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n    // Input: [1,2,3]\n    // Output: [2, 1]\n    // Explanation: 2 has the smallest even value, and 2 has the smallest index. \n    // Example 3:\n    // Input: []\n    // Output: []\n    // Example 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    // Output: [0, 1]\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n    // so we will choose the first zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Integer> pluck(ArrayList<Integer> arr) {\n",
        "snippet": [
            "        List<Integer> result = new ArrayList<>();\n        if (arr.size() == 0) {\n            return result;\n        }\n        int min = Integer.MAX_VALUE;\n        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                if (arr.get(i) < min) {\n                    min = arr.get(i);\n                    minIndex = i;\n                }\n            }\n        }\n        if (minIndex != -1) {\n            result.add(min);\n            result.add(minIndex);\n        }\n        return result;\n    }\n}"
        ],
        "simplified": "\"Given an array representing a branch of a tree that has non-negative integer nodes your task is to pluck one of the nodes and return it. The plucked node should be the node with the smallest even value. If multiple nodes with the same smallest even value are found return the node that has smallest index. The plucked node should be returned in a list, [ smalest_value, its index ], If there are no even values or the given array is empty, return []. Constraints: * 1 <= nodes.length <= 10000 * 0 <= node.value",
        "task_id": "68",
        "167": "// \"Given an array representing a branch of a tree that has non-negative integer nodes\n        // your task is to pluck one of the nodes and return it.\n        // The plucked node should be the node with the smallest even value.\n        // If multiple nodes with the same smallest even value are found return the node that has smallest index.\n        // The plucked node should be returned in a list, [ smalest_value, its index ],\n        // If there are no even values or the given array is empty, return [].\n        // Example 1:\n        // Input: [4,2,3]\n        // Output: [2, 1]\n        // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n        // Example 2:\n        // Input: [1,2,3]\n        // Output: [2, 1]\n        // Explanation: 2 has the smallest even value, and 2 has the smallest index. \n        // Example 3:\n        // Input: []\n        // Output: []\n        // Example 4:\n        // Input: [5, 0, 3, 0, 4, 2]\n        // Output: [0, 1]\n        // Explanation: 0 is the smallest value, but  there are two zeros,\n        // so we will choose the first zero, which has the smallest index.\n        // Constraints:\n        // * 1 <= nodes.length <= 10000\n        // * 0 <= node.value\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        ArrayList<Integer> evens = new ArrayList<Integer>();\n        ArrayList<Integer> evensIndex = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                evens.add(arr.get(i));\n                evensIndex.add(i);\n            }\n        }\n        int smallestEven = Integer.MAX_VALUE;\n        int smallestEvenIndex = Integer.MAX_VALUE;\n        for (int i = 0; i < evens.size(); i++) {\n            if (evens.get(i) < smallestEven) {\n                smallestEven = even",
        "grade-167": {
            "execution": 0
        },
        "28": "ArrayList<Integer> res = new ArrayList<Integer>();\n        int minEven = Integer.MAX_VALUE;\n        int idx = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            int node = arr.get(i);\n            if (node % 2 == 0 && node < minEven) {\n                minEven = node;\n                idx = i;\n            }\n        }\n        if (idx != -1) {\n            res.add(minEven);\n            res.add(idx);\n        }\n        return res;",
        "grade-28": {
            "execution": 1
        },
        "6": "//write your code here\n        if (arr.size() <= 0) {\n            return new ArrayList<Integer>();\n        }\n        ArrayList<Integer> ans = new ArrayList<Integer>();\n        ArrayList<Integer> evens = new ArrayList<Integer>();\n        int min = Integer.MAX_VALUE;\n        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                if (arr.get(i) < min) {\n                    min = arr.get(i);\n                    minIndex = i;\n                }\n            }\n        }\n        if (minIndex == -1) {\n            return new ArrayList<Integer>();\n        }\n        ans.add(min);\n        ans.add(minIndex);\n        return ans;",
        "grade-6": {
            "execution": 1
        },
        "195": "return arr.stream().filter(x -> x % 2 == 0).min(Comparator.comparing(a -> a)).map(x -> Arrays.asList(x, arr.indexOf(x))).orElse(new ArrayList<Integer>());",
        "grade-195": {
            "execution": 0
        },
        "71": "int i, len = arr.size();\n        ArrayList<Integer> ret = new ArrayList<Integer>();\n        Integer[] arr2 = new Integer[len];\n        arr2 = arr.toArray(arr2);\n        // loop once to find the minimum even value,\n        // if it's not even or if the array is empty return [].\n        int min = Integer.MAX_VALUE;\n        boolean gotEven = false;\n        for (i = 0; i < len; i++) {\n            if (arr2[i] % 2 == 0) {\n                if (arr2[i] < min) {\n                    min = arr2[i];\n                }\n                gotEven = true;\n            }\n        }\n        if (!gotEven) {\n            return ret;\n        }\n        // loop again to find the index of the minimum value\n        int min_i = 0;\n        for (i = 0; i < len; i++) {\n            if (arr2[i] == min) {\n                min_i = i;\n                break;\n            }\n        }\n        ret.add(min);\n        ret.add(min_i);\n        return ret;",
        "grade-71": {
            "execution": 1
        },
        "62": "// TODO: implement this method\n        // return a list of two ints that is the smallest even value and its index\n        // return an empty list if no even value is found.\n        ArrayList<Integer> res = new ArrayList<Integer>();\n        return res;",
        "grade-62": {
            "execution": 0
        },
        "57": "ArrayList<Integer> ret = new ArrayList<Integer>();\n        ArrayList<Integer> candidates = new ArrayList<Integer>();\n        ArrayList<Integer> idx = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                candidates.add(arr.get(i));\n                idx.add(i);\n            }\n        }\n        if (candidates.size() < 1) {\n            return ret;\n        }\n        int min = candidates.get(0);\n        int first_idx = 0;\n        for (int i = 1; i < candidates.size(); i++) {\n            if (candidates.get(i) < min) {\n                min = candidates.get(i);\n                first_idx = i;\n            }\n        }\n        ret.add(min);\n        ret.add(idx.get(first_idx));\n        return ret;",
        "grade-57": {
            "execution": 1
        },
        "35": "return new ArrayList<Integer>();",
        "grade-35": {
            "execution": 0
        },
        "194": "ArrayList<Integer> result = new ArrayList<Integer>();\n        // your code goes here\n        int minEvenValue = Integer.MAX_VALUE;\n        int minEvenIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0 && arr.get(i) < minEvenValue) {\n                minEvenValue = arr.get(i);\n                minEvenIndex = i;\n            }\n        }\n        if (minEvenIndex != -1) {\n            result.add(minEvenValue);\n            result.add(minEvenIndex);\n        }\n        return result;",
        "grade-194": {
            "execution": 1
        },
        "26": "if (arr.size() == 0) {\n            return new ArrayList<Integer>();\n        }\n        HashMap<Integer,ArrayList<Integer>> dict = new HashMap<Integer,ArrayList<Integer>>();\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            int x = arr.get(i);\n            if (x%2 == 0) {\n                if (x < min) {\n                    min = x;\n                }\n                if (dict.containsKey(x)) {\n                    dict.get(x).add(i);\n                } else {\n                    ArrayList<Integer> tmp = new ArrayList<Integer>();\n                    tmp.add(i);\n                    dict.put(x,tmp);\n                }\n            }\n        }\n        if (min == Integer.MAX_VALUE) {\n            return new ArrayList<Integer>();\n        }\n        ArrayList<Integer> res = new ArrayList<Integer>();\n        res.add(min);\n        res.add(dict.get(min).get(0));\n        return res;",
        "grade-26": {
            "execution": 1
        },
        "177": "// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254,",
        "grade-177": {
            "execution": 0
        },
        "142": "int smallestIndex = -1;\n        int smallestValue = Integer.MAX_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            int v = arr.get(i);\n            if (v != 0 && v % 2 == 0 && v < smallestValue) {\n                smallestIndex = i;\n                smallestValue = v;\n            }\n        }\n        if (smallestIndex == -1) {\n            return new ArrayList<Integer>();\n        }\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        result.add(smallestValue);\n        result.add(smallestIndex);\n        return result;",
        "grade-142": {
            "execution": 0
        },
        "22": "ArrayList<Integer> evens = new ArrayList<Integer>();\n        ArrayList<Integer> evenIndexes = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                evens.add(arr.get(i));\n                evenIndexes.add(i);\n            }\n        }\n        Collections.sort(evens);\n        ArrayList<Integer> output = new ArrayList<Integer>();\n        if (evens.size() == 0) {\n            return output;\n        }\n        output.add(evens.get(0));\n        output.add(evenIndexes.get(0));\n        return output;",
        "grade-22": {
            "execution": 0
        },
        "155": "ArrayList<Integer> res = new ArrayList<Integer>();\n        int min = Integer.MAX_VALUE;\n        int idx = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            int node = arr.get(i);\n            if (node < min && node % 2 == 0) {\n                min = node;\n                idx = i;\n            }\n        }\n        if (idx > -1) {\n            res.add(min);\n            res.add(idx);\n        }\n        return res;",
        "grade-155": {
            "execution": 1
        },
        "110": "ArrayList<Integer> res = new ArrayList<Integer>();\n        if (arr.size() < 1) return res;\n        // find the smallest non-negative even integer in the array\n        int min = arr.get(0);\n        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n            if (num % 2 == 0 && num < min) min = num;\n        }\n        if (min % 2 != 0) return res;\n        res.add(min);\n        // find the first index of the minimum even\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == min) {\n                res.add(i);\n                break;\n            }\n        }\n        return res;",
        "grade-110": {
            "execution": 0
        },
        "8": "// System.out.println(\"arr=\" + arr);\n        if (arr.size() <= 0) return new ArrayList<Integer>();\n        int minEven = Integer.MAX_VALUE;\n        int minEvenIdx = Integer.MAX_VALUE;\n        boolean atLeastOneEven = false;\n        for (int i = 0; i < arr.size(); i++) {\n            // System.out.println(\"i=\" + i + \" arr.get(i)=\" + arr.get(i));\n            if (arr.get(i) % 2 == 0) {\n                atLeastOneEven = true;\n                if (arr.get(i) < minEven) {\n                    minEven = arr.get(i);\n                    minEvenIdx = i;\n                }\n            }\n        }\n        if (!atLeastOneEven) return new ArrayList<Integer>();\n        ArrayList<Integer> answer = new ArrayList<Integer>();\n        answer.add(minEven);\n        answer.add(minEvenIdx);\n        return answer;",
        "grade-8": {
            "execution": 1
        },
        "7": "if (arr.size() == 0) {\n            return new ArrayList<Integer>();\n        } else {\n            ArrayList<Integer> ans = new ArrayList<Integer>();\n            ArrayList<Integer> evens = new ArrayList<Integer>();\n            int min = Integer.MAX_VALUE;\n            for (int i = 0; i < arr.size(); i++) {\n                int val = arr.get(i);\n                if (val % 2 == 0) {\n                    evens.add(val);\n                    if (val < min) {\n                        min = val;\n                    }\n                }\n            }\n            if (evens.size() == 0) {\n                return new ArrayList<Integer>();\n            } else {\n                for (int i = 0; i < arr.size(); i++) {\n                    if (arr.get(i) == min) {\n                        ans.add(min);\n                        ans.add(i);\n                        return ans;\n                    }\n                }\n            }\n        }\n        throw new RuntimeException(\"Problem never thought you'd get here\");",
        "grade-7": {
            "execution": 1
        },
        "23": "ArrayList<Integer> res = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size(); i++) {\n            int val = arr.get(i);\n            if (val % 2 == 0) {\n                if (res.size() == 0) {\n                    res.add(val);\n                    res.add(i);\n                } else {\n                    if (val < res.get(0)) {\n                        res.set(0, val);\n                        res.set(1, i);\n                    }\n                }\n            }\n        }\n        return res;",
        "grade-23": {
            "execution": 1
        },
        "55": "ArrayList<Integer> ans = new ArrayList<Integer>();\n        int smallest_even = Integer.MAX_VALUE;\n        int smallest_even_idx = Integer.MAX_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n            if (num % 2 == 0 && num < smallest_even) {\n                smallest_even = num;\n                smallest_even_idx = i;\n            }\n        }\n        if (smallest_even != Integer.MAX_VALUE) {\n            ans.add(smallest_even);\n            ans.add(smallest_even_idx);\n        }\n        return ans;",
        "grade-55": {
            "execution": 1
        },
        "59": "try {\n            ArrayList<Integer> res = new ArrayList<Integer>();\n            // smallest even value\n            res.add(0);\n            // index of the smallest even value\n            res.add(0);\n            int smallestEven = Integer.MAX_VALUE;\n            for (int i = 0; i < arr.size(); i++) {\n                if (arr.get(i) % 2 == 0 && arr.get(i) < smallestEven) {\n                    smallestEven = arr.get(i);\n                    res.set(0, smallestEven);\n                    res.set(1, i);\n                }\n            }\n            if (smallestEven == Integer.MAX_VALUE) {\n                return new ArrayList<Integer>();\n            }\n            return res;\n        } catch (Exception e) {\n            throw e;\n        }",
        "grade-59": {
            "execution": 1
        },
        "bleu-167": 0.16656753478936157,
        "bleu-28": 0.4697189715993128,
        "bleu-6": 0.6421419252026983,
        "bleu-195": 0.0714180186766687,
        "bleu-71": 0.27542747447143806,
        "bleu-62": 0.035602980576139996,
        "bleu-57": 0.4201162647647886,
        "bleu-35": 1.8263506871479309e-06,
        "bleu-194": 0.7060364809367912,
        "bleu-26": 0.3645856775235231,
        "bleu-177": 0.0008252192736412304,
        "bleu-142": 0.5166299265345231,
        "bleu-22": 0.4520764792261706,
        "bleu-155": 0.48802773081103823,
        "bleu-110": 0.44343155140795715,
        "bleu-8": 0.3913074242661681,
        "bleu-7": 0.4013980145272895,
        "bleu-23": 0.46623388487289946,
        "bleu-55": 0.4064084627488193,
        "bleu-59": 0.43512331938907195,
        "codebleu-167": 0.6739057471143064,
        "codebleu-28": 0.5996166323988673,
        "codebleu-6": 0.8198946775467157,
        "codebleu-195": 0.24217975304722386,
        "codebleu-71": 0.6169374367446099,
        "codebleu-62": 0.1591186331774829,
        "codebleu-57": 0.7279446777221679,
        "codebleu-35": 0.03741515744269916,
        "codebleu-194": 0.6933978668466741,
        "codebleu-26": 0.7322449318353066,
        "codebleu-177": 0.022270360658229772,
        "codebleu-142": 0.6401888088315593,
        "codebleu-22": 0.6765293126234039,
        "codebleu-155": 0.5965248145875722,
        "codebleu-110": 0.6984195406342094,
        "codebleu-8": 0.699233020640767,
        "codebleu-7": 0.7380708478916086,
        "codebleu-23": 0.6426417092742149,
        "codebleu-55": 0.5851672918209638,
        "codebleu-59": 0.6614758273014877,
        "chrf-167": 0.36385947797652674,
        "chrf-28": 0.5475299546952908,
        "chrf-6": 0.7481260066034155,
        "chrf-195": 0.19856791409329613,
        "chrf-71": 0.49830132170095337,
        "chrf-62": 0.23422326838768828,
        "chrf-57": 0.5402214355119997,
        "chrf-35": 0.1046266529693731,
        "chrf-194": 0.7492940824442361,
        "chrf-26": 0.5554733021205099,
        "chrf-177": 0.0024813895781637717,
        "chrf-142": 0.5704694744334915,
        "chrf-22": 0.490632955122784,
        "chrf-155": 0.5579311219152353,
        "chrf-110": 0.5585950118036997,
        "chrf-8": 0.5607587169830006,
        "chrf-7": 0.5474793307324264,
        "chrf-23": 0.4703926479221714,
        "chrf-55": 0.4371377086114589,
        "chrf-59": 0.5182528371663994,
        "rougel-167": 0.2709030100334448,
        "rougel-28": 0.7086614173228347,
        "rougel-6": 0.7444794952681387,
        "rougel-195": 0.28019323671497587,
        "rougel-71": 0.47091412742382266,
        "rougel-62": 0.15384615384615385,
        "rougel-57": 0.5380116959064328,
        "rougel-35": 0.10738255033557048,
        "rougel-194": 0.8375451263537906,
        "rougel-26": 0.5080213903743315,
        "rougel-177": 0.006153846153846154,
        "rougel-142": 0.5328467153284672,
        "rougel-22": 0.5608108108108107,
        "rougel-155": 0.6907630522088354,
        "rougel-110": 0.550632911392405,
        "rougel-8": 0.5966850828729281,
        "rougel-7": 0.5111111111111112,
        "rougel-23": 0.5747126436781609,
        "rougel-55": 0.6507936507936507,
        "rougel-59": 0.6032786885245901,
        "meteor-167": 0.3920839244725885,
        "meteor-28": 0.5635491735857636,
        "meteor-6": 0.7680894263275124,
        "meteor-195": 0.21015069992459684,
        "meteor-71": 0.5240517083174521,
        "meteor-62": 0.12637347538266397,
        "meteor-57": 0.589297092224472,
        "meteor-35": 0.05900079302141158,
        "meteor-194": 0.8204539831819398,
        "meteor-26": 0.4879731662180349,
        "meteor-177": 0.005675368898978434,
        "meteor-142": 0.5754918670839115,
        "meteor-22": 0.45351382081251773,
        "meteor-155": 0.5454284316408068,
        "meteor-110": 0.5202694765495843,
        "meteor-8": 0.6498945997286294,
        "meteor-7": 0.5483577596932544,
        "meteor-23": 0.5662048613116705,
        "meteor-55": 0.49632219286978013,
        "meteor-59": 0.5454249702872707,
        "ruby-167": 0.15032679738562094,
        "ruby-28": 0.5683453237410072,
        "ruby-6": 0.6292134831460674,
        "ruby-195": 0.17266187050359716,
        "ruby-71": 0.3153153153153153,
        "ruby-62": 0.07194244604316546,
        "ruby-57": 0.41871921182266014,
        "ruby-35": 0.05755395683453235,
        "ruby-194": 0.7338129496402878,
        "ruby-26": 0.34468085106382984,
        "ruby-177": 0.0,
        "ruby-142": 0.2517985611510791,
        "ruby-22": 0.4140127388535032,
        "ruby-155": 0.5611510791366907,
        "ruby-110": 0.423728813559322,
        "ruby-8": 0.452914798206278,
        "ruby-7": 0.37104072398190047,
        "ruby-23": 0.41007194244604317,
        "ruby-55": 0.525179856115108,
        "ruby-59": 0.4819277108433735,
        "codebertscore_f1-167": 0.7270243763923645,
        "codebertscore_f3-167": 0.7711705565452576,
        "codebertscore_f1-28": 0.888404369354248,
        "codebertscore_f3-28": 0.8924797177314758,
        "codebertscore_f1-6": 0.8877012133598328,
        "codebertscore_f3-6": 0.9103416204452515,
        "codebertscore_f1-195": 0.676414966583252,
        "codebertscore_f3-195": 0.6713547706604004,
        "codebertscore_f1-71": 0.8122879862785339,
        "codebertscore_f3-71": 0.8467090725898743,
        "codebertscore_f1-62": 0.6763043403625488,
        "codebertscore_f3-62": 0.666633129119873,
        "codebertscore_f1-57": 0.8345746994018555,
        "codebertscore_f3-57": 0.8466296195983887,
        "codebertscore_f1-35": 0.6403498649597168,
        "codebertscore_f3-35": 0.5631204843521118,
        "codebertscore_f1-194": 0.8976556062698364,
        "codebertscore_f3-194": 0.918204665184021,
        "codebertscore_f1-26": 0.840950608253479,
        "codebertscore_f3-26": 0.8649712800979614,
        "codebertscore_f1-177": 0.564007580280304,
        "codebertscore_f3-177": 0.5605928301811218,
        "codebertscore_f1-142": 0.8438989520072937,
        "codebertscore_f3-142": 0.854462742805481,
        "codebertscore_f1-22": 0.8126093149185181,
        "codebertscore_f3-22": 0.819930911064148,
        "codebertscore_f1-155": 0.8955175876617432,
        "codebertscore_f3-155": 0.8949337005615234,
        "codebertscore_f1-110": 0.8513879776000977,
        "codebertscore_f3-110": 0.8661699891090393,
        "codebertscore_f1-8": 0.8381869196891785,
        "codebertscore_f3-8": 0.8725050687789917,
        "codebertscore_f1-7": 0.8382533192634583,
        "codebertscore_f3-7": 0.8594052791595459,
        "codebertscore_f1-23": 0.830731987953186,
        "codebertscore_f3-23": 0.8215861916542053,
        "codebertscore_f1-55": 0.8463496565818787,
        "codebertscore_f3-55": 0.8526934385299683,
        "codebertscore_f1-59": 0.8270851969718933,
        "codebertscore_f3-59": 0.845238447189331,
        "codebertscore_s_f1-167": 0.7720286846160889,
        "codebertscore_s_f3-167": 0.8286455869674683,
        "codebertscore_s_f1-28": 0.8823572397232056,
        "codebertscore_s_f3-28": 0.8887270092964172,
        "codebertscore_s_f1-6": 0.8907850384712219,
        "codebertscore_s_f3-6": 0.908214271068573,
        "codebertscore_s_f1-195": 0.7106489539146423,
        "codebertscore_s_f3-195": 0.7141831517219543,
        "codebertscore_s_f1-71": 0.8317837119102478,
        "codebertscore_s_f3-71": 0.8660589456558228,
        "codebertscore_s_f1-62": 0.7179195284843445,
        "codebertscore_s_f3-62": 0.7097078561782837,
        "codebertscore_s_f1-57": 0.8533065915107727,
        "codebertscore_s_f3-57": 0.8617026209831238,
        "codebertscore_s_f1-35": 0.7281885147094727,
        "codebertscore_s_f3-35": 0.645201563835144,
        "codebertscore_s_f1-194": 0.8993496894836426,
        "codebertscore_s_f3-194": 0.919004499912262,
        "codebertscore_s_f1-26": 0.8645447492599487,
        "codebertscore_s_f3-26": 0.8788477778434753,
        "codebertscore_s_f1-177": 0.6017705202102661,
        "codebertscore_s_f3-177": 0.6118736267089844,
        "codebertscore_s_f1-142": 0.8550042510032654,
        "codebertscore_s_f3-142": 0.863136351108551,
        "codebertscore_s_f1-22": 0.8295551538467407,
        "codebertscore_s_f3-22": 0.8321725130081177,
        "codebertscore_s_f1-155": 0.8904828429222107,
        "codebertscore_s_f3-155": 0.8910256624221802,
        "codebertscore_s_f1-110": 0.853640079498291,
        "codebertscore_s_f3-110": 0.8675212860107422,
        "codebertscore_s_f1-8": 0.849539577960968,
        "codebertscore_s_f3-8": 0.8806023597717285,
        "codebertscore_s_f1-7": 0.8489122986793518,
        "codebertscore_s_f3-7": 0.8642059564590454,
        "codebertscore_s_f1-23": 0.8371154069900513,
        "codebertscore_s_f3-23": 0.8296418786048889,
        "codebertscore_s_f1-55": 0.8501002192497253,
        "codebertscore_s_f3-55": 0.856846809387207,
        "codebertscore_s_f1-59": 0.8413280844688416,
        "codebertscore_s_f3-59": 0.8579237461090088,
        "gpt35_nsnr-167": 3,
        "raw_gpt35_nsnr-167": "3",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-195": 3,
        "raw_gpt35_nsnr-195": "3",
        "gpt35_nsnr-71": 4,
        "raw_gpt35_nsnr-71": "4",
        "gpt35_nsnr-62": 3,
        "raw_gpt35_nsnr-62": "3",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 3,
        "raw_gpt35_nsnr-35": "3",
        "gpt35_nsnr-194": 4,
        "raw_gpt35_nsnr-194": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-177": 0,
        "raw_gpt35_nsnr-177": "0",
        "gpt35_nsnr-142": 4,
        "raw_gpt35_nsnr-142": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-155": 4,
        "raw_gpt35_nsnr-155": "4",
        "gpt35_nsnr-110": 4,
        "raw_gpt35_nsnr-110": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 3,
        "raw_gpt35_nsnr-59": "3",
        "gpt35_nswr-167": 3,
        "raw_gpt35_nswr-167": "3",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-195": 3,
        "raw_gpt35_nswr-195": "3",
        "gpt35_nswr-71": 4,
        "raw_gpt35_nswr-71": "4",
        "gpt35_nswr-62": 2,
        "raw_gpt35_nswr-62": "2",
        "gpt35_nswr-57": 4,
        "raw_gpt35_nswr-57": "4",
        "gpt35_nswr-35": 4,
        "raw_gpt35_nswr-35": "4",
        "gpt35_nswr-194": 4,
        "raw_gpt35_nswr-194": "4",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-177": 2,
        "raw_gpt35_nswr-177": "2",
        "gpt35_nswr-142": 4,
        "raw_gpt35_nswr-142": "4",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-155": 4,
        "raw_gpt35_nswr-155": "4",
        "gpt35_nswr-110": 4,
        "raw_gpt35_nswr-110": "4",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-55": 4,
        "raw_gpt35_nswr-55": "4",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given array will not contain\n    // duplicate values.\n    // Examples:\n    // can_arrange([1,2,4,3,5]) = 3\n    // can_arrange([1,2,3]) = -1\n    public static int canArrange(ArrayList<Integer> arr) {\n",
        "snippet": [
            "        int ind = -1, i = 1;\n        while (i < arr.size()) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                ind = i;\n            }\n            i += 1;\n        }\n        return ind;\n    }\n}"
        ],
        "simplified": "Create a function which returns the largest index of an element which is not greater than or equal to the element immediately preceding it. If no such element exists then return -1. The given array will not contain duplicate values.",
        "task_id": "135",
        "183": "return IntStream.range(0, arr.size()).filter(i -> arr.get(i) < arr.get(i - 1)).max().orElse(-1);",
        "grade-183": {
            "execution": 0
        },
        "28": "int largestIndex = -1;\n        int index = arr.size() - 1;\n        int currentMax = arr.get(index);\n        while (index > 0) {\n            index -= 1;\n            int prev = arr.get(index);\n            if (prev <= currentMax) {\n                largestIndex = index;\n                currentMax = prev;\n            }\n        }\n        return largestIndex;",
        "grade-28": {
            "execution": 0
        },
        "6": "// Do not modify this line\n        int n = arr.size();\n        int index = -1;\n        for (int i = 1; i < n; i++) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                index = i;\n            }\n        }\n        return index;",
        "grade-6": {
            "execution": 1
        },
        "76": "// TODO: return the largest index of an element which is not greater\n        // than or equal to the element immediately preceding it. If no such\n        // element exists then return -1.\n        return -1;",
        "grade-76": {
            "execution": 0
        },
        "65": "int result = -1;\n        int length = arr.size();\n        for (int i = length - 1; i > 0; i--) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                result = i - 1;\n                break;\n            }\n        }\n        return result;",
        "grade-65": {
            "execution": 0
        },
        "60": "int index = -1;\n        for (int i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i) >= arr.get(i + 1)) {\n                index = i;\n            }\n        }\n        return index;",
        "grade-60": {
            "execution": 0
        },
        "35": "int answer = -1;\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                answer = i - 1;\n                break;\n            }\n        }\n        return answer;",
        "grade-35": {
            "execution": 0
        },
        "26": "int index = -1;\n        for (int i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                index = i;\n            }\n        }\n        return index;",
        "grade-26": {
            "execution": 0
        },
        "197": "int last = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) >= last) {\n                last = arr.get(i);\n            } else {\n                return i - 1;\n            }\n        }\n        return -1;",
        "grade-197": {
            "execution": 0
        },
        "152": "// Insert code here\n        return -1;",
        "grade-152": {
            "execution": 0
        },
        "22": "// Insert code here to solve the problem.\n        int ans = -1;\n        for (int i = arr.size() - 1; i > 0; i--) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                ans = i;\n            }\n        }\n        return ans;",
        "grade-22": {
            "execution": 0
        },
        "166": "int max = -1;\n        for (int i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i) <= arr.get(i + 1)) {\n                max = i + 1;\n            }\n        }\n        return max;",
        "grade-166": {
            "execution": 0
        },
        "120": "// Your code here\n        int counter = -1;\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                counter = i - 1;\n                break;\n            }\n        }\n        return counter;",
        "grade-120": {
            "execution": 0
        },
        "8": "int largest = -1;\n        for (int i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i) <= arr.get(i + 1)) {\n                largest = i;\n            }\n        }\n        return largest;",
        "grade-8": {
            "execution": 0
        },
        "7": "if (arr.size() < 2) {\n            return -1;\n        }\n        int largestIndex = -1;\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) <= arr.get(i - 1)) {\n                largestIndex = i;\n            }\n        }\n        return largestIndex;",
        "grade-7": {
            "execution": 1
        },
        "23": "// Write your code here\n        int len = arr.size();\n        for (int i = len - 1; i > 0; i--) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                return i - 1;\n            }\n        }\n        return -1;",
        "grade-23": {
            "execution": 0
        },
        "58": "// your code here\n        if (arr.size() == 1) {\n            return -1;\n        }\n        for (int i = arr.size() - 1; i > 0; i--) {\n            if (arr.get(i - 1) >= arr.get(i)) {\n                return i;\n            }\n        }\n        return -1;",
        "grade-58": {
            "execution": 1
        },
        "62": "int maxIndex = -1;\n        int maxVal = -1;\n        for (int i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i) > maxVal && arr.get(i) < arr.get(i + 1)) {\n                maxVal = arr.get(i);\n                maxIndex = i;\n            }\n        }\n        return maxIndex;",
        "grade-62": {
            "execution": 0
        },
        "141": "int largest_index = -1;\n        for (int i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i) <= arr.get(i + 1)) {\n                if (i > largest_index) {\n                    largest_index = i;\n                }\n            }\n        }\n        return largest_index;",
        "grade-141": {
            "execution": 0
        },
        "171": "if (arr.size() == 0) {\n            return -1;\n        }\n        int max_index = -1;\n        int max_element = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < max_element) {\n                max_index = i;\n                max_element = arr.get(i);\n            }\n        }\n        return max_index;",
        "grade-171": {
            "execution": 0
        },
        "bleu-183": 0.3802106975835046,
        "bleu-28": 0.19364424068681266,
        "bleu-6": 0.464130014644627,
        "bleu-76": 0.023447232152626056,
        "bleu-65": 0.46265458066653553,
        "bleu-60": 0.4856437967053515,
        "bleu-35": 0.5789203496907706,
        "bleu-26": 0.4919065275815375,
        "bleu-197": 0.41558507694522795,
        "bleu-152": 0.0007275657706981703,
        "bleu-22": 0.43452109207976414,
        "bleu-166": 0.47365433046058064,
        "bleu-120": 0.49523914953636816,
        "bleu-8": 0.5053408914067821,
        "bleu-7": 0.4524351801518502,
        "bleu-23": 0.46521159451899147,
        "bleu-58": 0.36069976165708634,
        "bleu-62": 0.3563230150536393,
        "bleu-141": 0.453902361413975,
        "bleu-171": 0.34033300407516365,
        "codebleu-183": 0.5238836593936996,
        "codebleu-28": 0.6265721975339608,
        "codebleu-6": 0.6902200334164756,
        "codebleu-76": 0.21470497592793775,
        "codebleu-65": 0.6919280317841615,
        "codebleu-60": 0.6746685961888712,
        "codebleu-35": 0.7181034772142021,
        "codebleu-26": 0.6746685961888712,
        "codebleu-197": 0.6504626183443771,
        "codebleu-152": 0.0662920693501683,
        "codebleu-22": 0.6632058223830949,
        "codebleu-166": 0.6575021722013166,
        "codebleu-120": 0.6870946817138617,
        "codebleu-8": 0.6746685961888712,
        "codebleu-7": 0.7276798705492451,
        "codebleu-23": 0.6719424369775276,
        "codebleu-58": 0.6620013030919275,
        "codebleu-62": 0.6616826136205658,
        "codebleu-141": 0.6939298165646184,
        "codebleu-171": 0.6796673328383114,
        "chrf-183": 0.4308798165011649,
        "chrf-28": 0.414014283248466,
        "chrf-6": 0.5896014163268632,
        "chrf-76": 0.14525379516812525,
        "chrf-65": 0.5193095549094091,
        "chrf-60": 0.5803113970099926,
        "chrf-35": 0.5647569014882985,
        "chrf-26": 0.579767881611092,
        "chrf-197": 0.4856609248835077,
        "chrf-152": 0.08382619634551566,
        "chrf-22": 0.49418107550046514,
        "chrf-166": 0.5035628031793246,
        "chrf-120": 0.5182995870928879,
        "chrf-8": 0.49964679186736416,
        "chrf-7": 0.5259712283339849,
        "chrf-23": 0.5341347907058965,
        "chrf-58": 0.47685758909104403,
        "chrf-62": 0.4943747014625467,
        "chrf-141": 0.49874311796156334,
        "chrf-171": 0.4552063665914164,
        "rougel-183": 0.5,
        "rougel-28": 0.4393939393939394,
        "rougel-6": 0.6178861788617885,
        "rougel-76": 0.12121212121212122,
        "rougel-65": 0.6280991735537191,
        "rougel-60": 0.7079646017699114,
        "rougel-35": 0.7543859649122806,
        "rougel-26": 0.7142857142857143,
        "rougel-197": 0.6440677966101694,
        "rougel-152": 0.09230769230769231,
        "rougel-22": 0.6504065040650405,
        "rougel-166": 0.7304347826086958,
        "rougel-120": 0.7166666666666668,
        "rougel-8": 0.7256637168141592,
        "rougel-7": 0.6615384615384615,
        "rougel-23": 0.5714285714285714,
        "rougel-58": 0.5426356589147286,
        "rougel-62": 0.6013986013986014,
        "rougel-141": 0.6776859504132231,
        "rougel-171": 0.5323741007194244,
        "meteor-183": 0.3071038622208146,
        "meteor-28": 0.5226004635992533,
        "meteor-6": 0.7479377979665305,
        "meteor-76": 0.08226691042047532,
        "meteor-65": 0.7289917186521667,
        "meteor-60": 0.7583746285048445,
        "meteor-35": 0.786223556741795,
        "meteor-26": 0.7288009721847151,
        "meteor-197": 0.6973584118570866,
        "meteor-152": 0.038986354775828465,
        "meteor-22": 0.7241507453841799,
        "meteor-166": 0.8253332869741219,
        "meteor-120": 0.7982369435270514,
        "meteor-8": 0.7951721566151713,
        "meteor-7": 0.7890934256055364,
        "meteor-23": 0.6980556099897663,
        "meteor-58": 0.7188843811318596,
        "meteor-62": 0.6357545608111679,
        "meteor-141": 0.7006924428822495,
        "meteor-171": 0.7649247509732954,
        "ruby-183": 0.4107142857142857,
        "ruby-28": 0.3026315789473685,
        "ruby-6": 0.4328358208955224,
        "ruby-76": 0.0535714285714286,
        "ruby-65": 0.4769230769230769,
        "ruby-60": 0.543859649122807,
        "ruby-35": 0.6206896551724138,
        "ruby-26": 0.5535714285714286,
        "ruby-197": 0.4354838709677419,
        "ruby-152": 0.0535714285714286,
        "ruby-22": 0.4626865671641791,
        "ruby-166": 0.576271186440678,
        "ruby-120": 0.5625,
        "ruby-8": 0.5614035087719298,
        "ruby-7": 0.45945945945945943,
        "ruby-23": 0.39682539682539686,
        "ruby-58": 0.34246575342465757,
        "ruby-62": 0.45977011494252873,
        "ruby-141": 0.5538461538461539,
        "ruby-171": 0.32530120481927716,
        "codebertscore_f1-183": 0.7804158329963684,
        "codebertscore_f3-183": 0.794651210308075,
        "codebertscore_f1-28": 0.8388251662254333,
        "codebertscore_f3-28": 0.8683816194534302,
        "codebertscore_f1-6": 0.8622409701347351,
        "codebertscore_f3-6": 0.8934266567230225,
        "codebertscore_f1-76": 0.6797617673873901,
        "codebertscore_f3-76": 0.6978018283843994,
        "codebertscore_f1-65": 0.8928513526916504,
        "codebertscore_f3-65": 0.9074954390525818,
        "codebertscore_f1-60": 0.9083379507064819,
        "codebertscore_f3-60": 0.9144657850265503,
        "codebertscore_f1-35": 0.909633219242096,
        "codebertscore_f3-35": 0.9164460897445679,
        "codebertscore_f1-26": 0.9086641669273376,
        "codebertscore_f3-26": 0.9146838188171387,
        "codebertscore_f1-197": 0.8694012761116028,
        "codebertscore_f3-197": 0.8797993063926697,
        "codebertscore_f1-152": 0.6429990530014038,
        "codebertscore_f3-152": 0.6306295394897461,
        "codebertscore_f1-22": 0.8562254309654236,
        "codebertscore_f3-22": 0.8871045708656311,
        "codebertscore_f1-166": 0.8977263569831848,
        "codebertscore_f3-166": 0.9062130451202393,
        "codebertscore_f1-120": 0.872226357460022,
        "codebertscore_f3-120": 0.8951374888420105,
        "codebertscore_f1-8": 0.8909093141555786,
        "codebertscore_f3-8": 0.8963290452957153,
        "codebertscore_f1-7": 0.8560064435005188,
        "codebertscore_f3-7": 0.8702353835105896,
        "codebertscore_f1-23": 0.856168270111084,
        "codebertscore_f3-23": 0.8803776502609253,
        "codebertscore_f1-58": 0.8395823240280151,
        "codebertscore_f3-58": 0.8521727323532104,
        "codebertscore_f1-62": 0.8652796745300293,
        "codebertscore_f3-62": 0.8870556950569153,
        "codebertscore_f1-141": 0.8803719282150269,
        "codebertscore_f3-141": 0.8990121483802795,
        "codebertscore_f1-171": 0.8170610070228577,
        "codebertscore_f3-171": 0.8323550820350647,
        "codebertscore_s_f1-183": 0.8061964511871338,
        "codebertscore_s_f3-183": 0.8165623545646667,
        "codebertscore_s_f1-28": 0.8469436764717102,
        "codebertscore_s_f3-28": 0.8740413188934326,
        "codebertscore_s_f1-6": 0.8710918426513672,
        "codebertscore_s_f3-6": 0.8972600698471069,
        "codebertscore_s_f1-76": 0.6897469162940979,
        "codebertscore_s_f3-76": 0.7018854022026062,
        "codebertscore_s_f1-65": 0.8964141011238098,
        "codebertscore_s_f3-65": 0.9093566536903381,
        "codebertscore_s_f1-60": 0.9190992712974548,
        "codebertscore_s_f3-60": 0.9230282306671143,
        "codebertscore_s_f1-35": 0.9180005192756653,
        "codebertscore_s_f3-35": 0.924034833908081,
        "codebertscore_s_f1-26": 0.9196552038192749,
        "codebertscore_s_f3-26": 0.9237279891967773,
        "codebertscore_s_f1-197": 0.8819677233695984,
        "codebertscore_s_f3-197": 0.8899716138839722,
        "codebertscore_s_f1-152": 0.663908064365387,
        "codebertscore_s_f3-152": 0.6615445017814636,
        "codebertscore_s_f1-22": 0.8708505034446716,
        "codebertscore_s_f3-22": 0.9022112488746643,
        "codebertscore_s_f1-166": 0.9093492031097412,
        "codebertscore_s_f3-166": 0.9168375730514526,
        "codebertscore_s_f1-120": 0.8840823173522949,
        "codebertscore_s_f3-120": 0.9079684019088745,
        "codebertscore_s_f1-8": 0.9036535620689392,
        "codebertscore_s_f3-8": 0.9078544974327087,
        "codebertscore_s_f1-7": 0.8707863688468933,
        "codebertscore_s_f3-7": 0.881430983543396,
        "codebertscore_s_f1-23": 0.8625043630599976,
        "codebertscore_s_f3-23": 0.885238766670227,
        "codebertscore_s_f1-58": 0.8503541946411133,
        "codebertscore_s_f3-58": 0.8614220023155212,
        "codebertscore_s_f1-62": 0.8743618726730347,
        "codebertscore_s_f3-62": 0.8969266414642334,
        "codebertscore_s_f1-141": 0.8876146674156189,
        "codebertscore_s_f3-141": 0.9052587151527405,
        "codebertscore_s_f1-171": 0.8306111097335815,
        "codebertscore_s_f3-171": 0.84283447265625,
        "gpt35_nsnr-183": 3,
        "raw_gpt35_nsnr-183": "3",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-76": 4,
        "raw_gpt35_nsnr-76": "4",
        "gpt35_nsnr-65": 4,
        "raw_gpt35_nsnr-65": "4",
        "gpt35_nsnr-60": 4,
        "raw_gpt35_nsnr-60": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-197": 4,
        "raw_gpt35_nsnr-197": "4",
        "gpt35_nsnr-152": 4,
        "raw_gpt35_nsnr-152": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-166": 4,
        "raw_gpt35_nsnr-166": "4",
        "gpt35_nsnr-120": 4,
        "raw_gpt35_nsnr-120": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-58": 4,
        "raw_gpt35_nsnr-58": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-141": 4,
        "raw_gpt35_nsnr-141": "4",
        "gpt35_nsnr-171": 4,
        "raw_gpt35_nsnr-171": "4",
        "gpt35_nswr-183": 3,
        "raw_gpt35_nswr-183": "3",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-76": 4,
        "raw_gpt35_nswr-76": "4",
        "gpt35_nswr-65": 4,
        "raw_gpt35_nswr-65": "4",
        "gpt35_nswr-60": 3,
        "raw_gpt35_nswr-60": "3",
        "gpt35_nswr-35": 4,
        "raw_gpt35_nswr-35": "4",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-197": 3,
        "raw_gpt35_nswr-197": "3",
        "gpt35_nswr-152": 4,
        "raw_gpt35_nswr-152": "4",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-166": 2,
        "raw_gpt35_nswr-166": "2",
        "gpt35_nswr-120": 4,
        "raw_gpt35_nswr-120": "4",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-58": 3,
        "raw_gpt35_nswr-58": "3",
        "gpt35_nswr-62": 2,
        "raw_gpt35_nswr-62": "2",
        "gpt35_nswr-141": 3,
        "raw_gpt35_nswr-141": "3",
        "gpt35_nswr-171": 4,
        "raw_gpt35_nswr-171": "4"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // f(5) == [1, 2, 6, 24, 15]\n    public static ArrayList<Integer> f(int n) {\n",
        "snippet": [
            "        List<Integer> ret = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                int x = 1;\n                for (int j = 1; j <= i; j++) {\n                    x *= j;\n                }\n                ret.add(x);\n            } else {\n                int x = 0;\n                for (int j = 1; j <= i; j++) {\n                    x += j;\n                }\n                ret.add(x);\n            }\n        }\n        return ret;\n    }\n}"
        ],
        "simplified": "Implement the function f that takes n as a parameter, and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even or the sum of numbers from 1 to i otherwise. i starts from 1. the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).",
        "task_id": "106",
        "36": "ArrayList<Integer> ret = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                ret.add(factorial(i));\n            } else {\n                ret.add(sum(i));\n            }\n        }\n        return ret;",
        "grade-36": {
            "execution": 0
        },
        "6": "ArrayList<Integer> l = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            int k = i % 2 == 0 ? 1 : 0;\n            for (int j = 1; j <= i; j++) {\n                k = i % 2 == 0 ? k * j : k + j;\n            }\n            l.add(k);\n        }\n        return l;",
        "grade-6": {
            "execution": 1
        },
        "89": "ArrayList<Integer> l = new ArrayList<Integer>();\n        // Start coding here\n        int i = 1;\n        while (i <= n) {\n            int temp = 0;\n            if (i % 2 == 0) {\n                for (int j = 1; j <= i; j++) {\n                    temp *= j;\n                }\n            } else {\n                for (int j = 1; j <= i; j++) {\n                    temp += j;\n                }\n            }\n            l.add(temp);\n            i++;\n        }\n        return l;",
        "grade-89": {
            "execution": 0
        },
        "80": "// Implement the function f here.\n        return null;",
        "grade-80": {
            "execution": 0
        },
        "73": "// Assume that the contract of the function is respected.\n        // TODO: Implement the function.\n        ArrayList<Integer> list = new ArrayList<Integer>();\n        int sum = 0;\n        for(int i = 1; i <= n; i++){\n            if(i % 2 == 0){\n                int j = 1;\n                while(j <= i){\n                    sum *= j;\n                    j++;\n                }\n                list.add(sum);\n            }else{\n                list.add(i);\n            }\n        }\n        return list;",
        "grade-73": {
            "execution": 0
        },
        "46": "ArrayList<Integer> ans = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i ++) {\n            if (i % 2 == 0) {\n                int p = 1;\n                for (int j = 1; j <= i; j ++) {\n                    p *= j;\n                }\n                ans.add(p);\n            } else {\n                int s = 0;\n                for (int j = 1; j <= i; j ++) {\n                    s += j;\n                }\n                ans.add(s);\n            }\n        }\n        return ans;",
        "grade-46": {
            "execution": 1
        },
        "34": "ArrayList<Integer> res = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                int factorial = 1;\n                for (int j = 1; j <= i; j++) {\n                    factorial *= j;\n                }\n                res.add(factorial);\n            } else {\n                int sum = 0;\n                for (int j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                res.add(sum);\n            }\n        }\n        return res;",
        "grade-34": {
            "execution": 1
        },
        "182": "ArrayList<Integer> r = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0)\n                r.add(f_i(i));\n            else\n                r.add(sum_of_number_from_1_to_i(i));\n        }\n        return r;",
        "grade-182": {
            "execution": 0
        },
        "28": "ArrayList<Integer> res = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                res.add(factorial(i));\n            } else {\n                res.add(sum(i));\n            }\n        }\n        return res;",
        "grade-28": {
            "execution": 0
        },
        "140": "ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            } else {\n                int sum = 0;\n                for (int j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                result.add(sum);\n            }\n        }\n        return result;",
        "grade-140": {
            "execution": 0
        },
        "10": "int factorial = 1;\n        ArrayList<Integer> fact = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                for (int j = 1; j <= i; j++) {\n                    factorial *= j;\n                }\n                fact.add(factorial);\n                factorial = 1;\n            } else {\n                fact.add(i);\n            }\n        }\n        return fact;",
        "grade-10": {
            "execution": 0
        },
        "7": "ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                int factorial = 1;\n                for (int j = 1; j <= i; j++) {\n                    factorial *= j;\n                }\n                result.add(factorial);\n            } else {\n                int sum = 0;\n                for (int j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                result.add(sum);\n            }\n        }\n        return result;",
        "grade-7": {
            "execution": 1
        },
        "29": "// implement\n        int factorial = 1;\n        ArrayList<Integer> nums = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                nums.add(factorial(i));\n            } else {\n                nums.add(sumNumbers(i));\n            }\n        }\n        return nums;",
        "grade-29": {
            "execution": 0
        },
        "71": "ArrayList<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(sum(i));\n            }\n        }\n        return result;",
        "grade-71": {
            "execution": 0
        },
        "76": "ArrayList<Integer> arr = new ArrayList<Integer>();\n        // Implement the function here\n        int sum = 0;\n        int fact = 1;\n        for(int i = 1; i <= n; i++) {\n            if(i % 2 == 0) {\n                fact = 1;\n                for(int j = 1; j <= i; j++) {\n                    fact *= j;\n                }\n                arr.add(fact);\n            } else {\n                sum = 0;\n                for(int j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                arr.add(sum);\n            }\n        }\n        return arr;",
        "grade-76": {
            "execution": 1
        },
        "168": "ArrayList<Integer> lst = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                int factorial = 1;\n                for (int j = 2; j <= i; j++) {\n                    factorial *= j;\n                }\n                lst.add(factorial);\n            } else {\n                int sum = 0;\n                for (int j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                lst.add(sum);\n            }\n        }\n        return lst;",
        "grade-168": {
            "execution": 1
        },
        "186": "// Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Integer> res = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                int factorial = 1;\n                for (int j = 1; j <= i; j++) {\n                    factorial *= j;\n                }\n                res.add(factorial);\n            } else {\n                int sum = 0;\n                for (int j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                res.add(sum);\n            }\n        }\n        return res;",
        "grade-186": {
            "execution": 1
        },
        "64": "// TODO: Implement the function f.\n        // Hint: You might need to use the modulo operator\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(sum(i));\n            }\n        }\n        return result;",
        "grade-64": {
            "execution": 0
        },
        "139": "ArrayList<Integer> list = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            int value = 0;\n            if (i % 2 == 0) {\n                value = 1;\n                for (int j = 1; j <= i; j++) {\n                    value *= j;\n                }\n            } else {\n                value = (i * (i + 1)) / 2;\n            }\n            list.add(value);\n        }\n        return list;",
        "grade-139": {
            "execution": 1
        },
        "72": "return IntStream.range(1, n + 1)\n                .map(x -> x % 2 == 0 ? fatorial(x) : sum(x))\n                .boxed()\n                .collect(Collectors.toCollection(ArrayList::new));",
        "grade-72": {
            "execution": 0
        },
        "bleu-36": 0.37562606826808276,
        "bleu-6": 0.4422432685842937,
        "bleu-89": 0.5876698913018435,
        "bleu-80": 2.2392841481871464e-06,
        "bleu-73": 0.4926671561549209,
        "bleu-46": 0.7604848916193175,
        "bleu-34": 0.7604848916193175,
        "bleu-182": 0.27907806639387356,
        "bleu-28": 0.3375510350937633,
        "bleu-140": 0.5513053476099715,
        "bleu-10": 0.5424473309854773,
        "bleu-7": 0.7604848916193175,
        "bleu-29": 0.36340746664703816,
        "bleu-71": 0.3375510350937633,
        "bleu-76": 0.6620725793115593,
        "bleu-168": 0.7520873235356627,
        "bleu-186": 0.5627005858324129,
        "bleu-64": 0.3721353130303982,
        "bleu-139": 0.5375566148418331,
        "bleu-72": 0.04435605246116083,
        "codebleu-36": 0.41986730877362954,
        "codebleu-6": 0.4899514826443424,
        "codebleu-89": 0.6557456515875858,
        "codebleu-80": 0.04219795052392404,
        "codebleu-73": 0.5927376873844894,
        "codebleu-46": 0.8412089617964997,
        "codebleu-34": 0.8412089617964997,
        "codebleu-182": 0.3737930903042607,
        "codebleu-28": 0.4181560231733009,
        "codebleu-140": 0.6117063370938683,
        "codebleu-10": 0.6048236435485181,
        "codebleu-7": 0.8412089617964997,
        "codebleu-29": 0.44951547736851055,
        "codebleu-71": 0.4181560231733009,
        "codebleu-76": 0.7986134821060494,
        "codebleu-168": 0.850863092250735,
        "codebleu-186": 0.8257722953944947,
        "codebleu-64": 0.4902128295414576,
        "codebleu-139": 0.6031906809452926,
        "codebleu-72": 0.21102765812080293,
        "chrf-36": 0.5564071683623332,
        "chrf-6": 0.5051801253261909,
        "chrf-89": 0.5767318400554042,
        "chrf-80": 0.05189458318720216,
        "chrf-73": 0.5104352093689836,
        "chrf-46": 0.7320770465631328,
        "chrf-34": 0.7501779451144388,
        "chrf-182": 0.44589311546192206,
        "chrf-28": 0.5101919908214716,
        "chrf-140": 0.6461611277739964,
        "chrf-10": 0.5844902209332439,
        "chrf-7": 0.7549307811809407,
        "chrf-29": 0.47218590915150993,
        "chrf-71": 0.522878086452858,
        "chrf-76": 0.6670746936454528,
        "chrf-168": 0.7245148920874026,
        "chrf-186": 0.6605791993144214,
        "chrf-64": 0.48196450031413496,
        "chrf-139": 0.5672848905226469,
        "chrf-72": 0.1617943783950303,
        "rougel-36": 0.6354166666666665,
        "rougel-6": 0.6635514018691588,
        "rougel-89": 0.7574468085106383,
        "rougel-80": 0.04545454545454545,
        "rougel-73": 0.623931623931624,
        "rougel-46": 0.9008264462809917,
        "rougel-34": 0.9008264462809917,
        "rougel-182": 0.5744680851063829,
        "rougel-28": 0.5968586387434555,
        "rougel-140": 0.7757009345794392,
        "rougel-10": 0.7339449541284403,
        "rougel-7": 0.9008264462809917,
        "rougel-29": 0.5671641791044777,
        "rougel-71": 0.5968586387434555,
        "rougel-76": 0.8359375000000001,
        "rougel-168": 0.8962655601659751,
        "rougel-186": 0.767605633802817,
        "rougel-64": 0.5352112676056339,
        "rougel-139": 0.737777777777778,
        "rougel-72": 0.25000000000000006,
        "meteor-36": 0.47139559536337866,
        "meteor-6": 0.4847879784955308,
        "meteor-89": 0.6367876180717815,
        "meteor-80": 0.013636363636363636,
        "meteor-73": 0.5246910300223003,
        "meteor-46": 0.8980440330801106,
        "meteor-34": 0.8980440330801106,
        "meteor-182": 0.38943737083863056,
        "meteor-28": 0.4233652045805381,
        "meteor-140": 0.6523063258016123,
        "meteor-10": 0.5168798932897724,
        "meteor-7": 0.8980440330801106,
        "meteor-29": 0.4312880778239213,
        "meteor-71": 0.4233652045805381,
        "meteor-76": 0.8829752617597274,
        "meteor-168": 0.8883987378611033,
        "meteor-186": 0.8679179552930781,
        "meteor-64": 0.40795099361286213,
        "meteor-139": 0.5272650129872819,
        "meteor-72": 0.18654510208564262,
        "ruby-36": 0.47107438016528924,
        "ruby-6": 0.5537190082644627,
        "ruby-89": 0.6198347107438016,
        "ruby-80": 0.024793388429752095,
        "ruby-73": 0.3471074380165289,
        "ruby-46": 0.884297520661157,
        "ruby-34": 0.884297520661157,
        "ruby-182": 0.4297520661157025,
        "ruby-28": 0.4628099173553719,
        "ruby-140": 0.6694214876033058,
        "ruby-10": 0.6033057851239669,
        "ruby-7": 0.884297520661157,
        "ruby-29": 0.38842975206611574,
        "ruby-71": 0.4628099173553719,
        "ruby-76": 0.762962962962963,
        "ruby-168": 0.884297520661157,
        "ruby-186": 0.656441717791411,
        "ruby-64": 0.28099173553719003,
        "ruby-139": 0.628099173553719,
        "ruby-72": 0.14876033057851235,
        "codebertscore_f1-36": 0.8537759184837341,
        "codebertscore_f3-36": 0.8285031914710999,
        "codebertscore_f1-6": 0.8784124255180359,
        "codebertscore_f3-6": 0.8650569915771484,
        "codebertscore_f1-89": 0.900485634803772,
        "codebertscore_f3-89": 0.9078624844551086,
        "codebertscore_f1-80": 0.5792637467384338,
        "codebertscore_f3-80": 0.5536544919013977,
        "codebertscore_f1-73": 0.8225290179252625,
        "codebertscore_f3-73": 0.8484485149383545,
        "codebertscore_f1-46": 0.9420327544212341,
        "codebertscore_f3-46": 0.9428658485412598,
        "codebertscore_f1-34": 0.9432119727134705,
        "codebertscore_f3-34": 0.9487961530685425,
        "codebertscore_f1-182": 0.8313783407211304,
        "codebertscore_f3-182": 0.8181917667388916,
        "codebertscore_f1-28": 0.8472995758056641,
        "codebertscore_f3-28": 0.8243521451950073,
        "codebertscore_f1-140": 0.9047256708145142,
        "codebertscore_f3-140": 0.8988887667655945,
        "codebertscore_f1-10": 0.8829801678657532,
        "codebertscore_f3-10": 0.8840233683586121,
        "codebertscore_f1-7": 0.9440956115722656,
        "codebertscore_f3-7": 0.9496702551841736,
        "codebertscore_f1-29": 0.8156184554100037,
        "codebertscore_f3-29": 0.8152416348457336,
        "codebertscore_f1-71": 0.8484938144683838,
        "codebertscore_f3-71": 0.8249252438545227,
        "codebertscore_f1-76": 0.8874675631523132,
        "codebertscore_f3-76": 0.9011065363883972,
        "codebertscore_f1-168": 0.9280093908309937,
        "codebertscore_f3-168": 0.9363721609115601,
        "codebertscore_f1-186": 0.8333978652954102,
        "codebertscore_f3-186": 0.8754281997680664,
        "codebertscore_f1-64": 0.7965528964996338,
        "codebertscore_f3-64": 0.8231158256530762,
        "codebertscore_f1-139": 0.9064069390296936,
        "codebertscore_f3-139": 0.9072005152702332,
        "codebertscore_f1-72": 0.6792534589767456,
        "codebertscore_f3-72": 0.6706091165542603,
        "codebertscore_s_f1-36": 0.9269489049911499,
        "codebertscore_s_f3-36": 0.9115347862243652,
        "codebertscore_s_f1-6": 0.9296604990959167,
        "codebertscore_s_f3-6": 0.9234071969985962,
        "codebertscore_s_f1-89": 0.9341740608215332,
        "codebertscore_s_f3-89": 0.9391234517097473,
        "codebertscore_s_f1-80": 0.8159172534942627,
        "codebertscore_s_f3-80": 0.7657195329666138,
        "codebertscore_s_f1-73": 0.8824575543403625,
        "codebertscore_s_f3-73": 0.9014275670051575,
        "codebertscore_s_f1-46": 0.9616479873657227,
        "codebertscore_s_f3-46": 0.9622678756713867,
        "codebertscore_s_f1-34": 0.9620803594589233,
        "codebertscore_s_f3-34": 0.9667471051216125,
        "codebertscore_s_f1-182": 0.9098883271217346,
        "codebertscore_s_f3-182": 0.9030517935752869,
        "codebertscore_s_f1-28": 0.9221981167793274,
        "codebertscore_s_f3-28": 0.9075252413749695,
        "codebertscore_s_f1-140": 0.950809121131897,
        "codebertscore_s_f3-140": 0.9453983902931213,
        "codebertscore_s_f1-10": 0.925995945930481,
        "codebertscore_s_f3-10": 0.9287928342819214,
        "codebertscore_s_f1-7": 0.962692379951477,
        "codebertscore_s_f3-7": 0.9674043655395508,
        "codebertscore_s_f1-29": 0.8895909190177917,
        "codebertscore_s_f3-29": 0.892074465751648,
        "codebertscore_s_f1-71": 0.922853410243988,
        "codebertscore_s_f3-71": 0.9080570340156555,
        "codebertscore_s_f1-76": 0.9252160787582397,
        "codebertscore_s_f3-76": 0.9346986413002014,
        "codebertscore_s_f1-168": 0.9500446319580078,
        "codebertscore_s_f3-168": 0.9578965306282043,
        "codebertscore_s_f1-186": 0.8874841928482056,
        "codebertscore_s_f3-186": 0.920870840549469,
        "codebertscore_s_f1-64": 0.8737693428993225,
        "codebertscore_s_f3-64": 0.8928875923156738,
        "codebertscore_s_f1-139": 0.9446285367012024,
        "codebertscore_s_f3-139": 0.9467724561691284,
        "codebertscore_s_f1-72": 0.8125246167182922,
        "codebertscore_s_f3-72": 0.8052294850349426,
        "gpt35_nsnr-36": 3,
        "raw_gpt35_nsnr-36": "3",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-89": 2,
        "raw_gpt35_nsnr-89": "2",
        "gpt35_nsnr-80": 0,
        "raw_gpt35_nsnr-80": "0",
        "gpt35_nsnr-73": 2,
        "raw_gpt35_nsnr-73": "2",
        "gpt35_nsnr-46": 4,
        "raw_gpt35_nsnr-46": "4",
        "gpt35_nsnr-34": 4,
        "raw_gpt35_nsnr-34": "4",
        "gpt35_nsnr-182": 3,
        "raw_gpt35_nsnr-182": "3",
        "gpt35_nsnr-28": 3,
        "raw_gpt35_nsnr-28": "3",
        "gpt35_nsnr-140": 3,
        "raw_gpt35_nsnr-140": "3",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-29": 0,
        "raw_gpt35_nsnr-29": "3 - The code snippet correctly implements the function f as described in the problem statement. It correctly calculates the factorial of even indices and the sum of numbers from 1 to i for odd indices. However, the helper functions factorial() and sumNumbers() are not provided and their implementation is not clear from the code snippet.",
        "gpt35_nsnr-71": 3,
        "raw_gpt35_nsnr-71": "3",
        "gpt35_nsnr-76": 4,
        "raw_gpt35_nsnr-76": "4",
        "gpt35_nsnr-168": 4,
        "raw_gpt35_nsnr-168": "4",
        "gpt35_nsnr-186": 4,
        "raw_gpt35_nsnr-186": "4",
        "gpt35_nsnr-64": 3,
        "raw_gpt35_nsnr-64": "3",
        "gpt35_nsnr-139": 4,
        "raw_gpt35_nsnr-139": "4",
        "gpt35_nsnr-72": 3,
        "raw_gpt35_nsnr-72": "3",
        "gpt35_nswr-36": 3,
        "raw_gpt35_nswr-36": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-89": 3,
        "raw_gpt35_nswr-89": "3",
        "gpt35_nswr-80": 0,
        "raw_gpt35_nswr-80": "0",
        "gpt35_nswr-73": 2,
        "raw_gpt35_nswr-73": "2",
        "gpt35_nswr-46": 4,
        "raw_gpt35_nswr-46": "4",
        "gpt35_nswr-34": 4,
        "raw_gpt35_nswr-34": "4",
        "gpt35_nswr-182": 3,
        "raw_gpt35_nswr-182": "3",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-140": 3,
        "raw_gpt35_nswr-140": "3",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-29": 3,
        "raw_gpt35_nswr-29": "3",
        "gpt35_nswr-71": 3,
        "raw_gpt35_nswr-71": "3",
        "gpt35_nswr-76": 4,
        "raw_gpt35_nswr-76": "4",
        "gpt35_nswr-168": 4,
        "raw_gpt35_nswr-168": "4",
        "gpt35_nswr-186": 4,
        "raw_gpt35_nswr-186": "4",
        "gpt35_nswr-64": 3,
        "raw_gpt35_nswr-64": "3",
        "gpt35_nswr-139": 4,
        "raw_gpt35_nswr-139": "4",
        "gpt35_nswr-72": 3,
        "raw_gpt35_nswr-72": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return sorted unique elements in a list\n    // >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    // [0, 2, 3, 5, 9, 123]\n    public static ArrayList<Integer> unique(ArrayList<Integer> l) {\n",
        "snippet": [
            "        List<Integer> result = new ArrayList<>(new HashSet<>(l));\n        Collections.sort(result);\n        return result;\n    }\n}"
        ],
        "simplified": "Return sorted unique elements in a list",
        "task_id": "34",
        "30": "ArrayList<Integer> res = new ArrayList<Integer>();\n        for (int el : l) {\n            if (!res.contains(el)) {\n                res.add(el);\n            }\n        }\n        Collections.sort(res);\n        return res;",
        "grade-30": {
            "execution": 1
        },
        "7": "ArrayList<Integer> a = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (!a.contains(l.get(i))) {\n                a.add(l.get(i));\n            }\n        }\n        Collections.sort(a);\n        return a;",
        "grade-7": {
            "execution": 1
        },
        "90": "ArrayList<Integer> results = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (!results.contains(l.get(i))) {\n                results.add(l.get(i));\n            }\n        }\n        Collections.sort(results);\n        return results;",
        "grade-90": {
            "execution": 1
        },
        "79": "ArrayList<Integer> res = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (!res.contains(l.get(i)))\n                res.add(l.get(i));\n        }\n        Collections.sort(res);\n        return res;",
        "grade-79": {
            "execution": 1
        },
        "70": "Set<Integer> s = new HashSet<>(l);\n        return new ArrayList<>(s);",
        "grade-70": {
            "execution": 1
        },
        "39": "ArrayList<Integer> ret = new ArrayList<Integer>();\n        Collections.sort(l);\n        for (int i : l) {\n            if (ret.size() == 0 || ret.get(ret.size() - 1) != i) {\n                ret.add(i);\n            }\n        }\n        return ret;",
        "grade-39": {
            "execution": 1
        },
        "28": "ArrayList<Integer> res = new ArrayList<Integer>();\n        for (int x : l) {\n            if (!res.contains(x))\n                res.add(x);\n        }\n        Collections.sort(res);\n        return res;",
        "grade-28": {
            "execution": 1
        },
        "189": "ArrayList<Integer> set = new ArrayList<Integer>();\n        for (int i : l) {\n            if (!set.contains(i)) {\n                set.add(i);\n            }\n        }\n        Collections.sort(set);\n        return set;",
        "grade-189": {
            "execution": 1
        },
        "24": "l.sort(null);\n        for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i).equals(l.get(i + 1))) {\n                l.remove(i);\n                i--;\n            }\n        }\n        return l;",
        "grade-24": {
            "execution": 1
        },
        "138": "ArrayList<Integer> m = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (!m.contains(l.get(i))) {\n                m.add(l.get(i));\n            }\n        }\n        Collections.sort(m);\n        return m;",
        "grade-138": {
            "execution": 1
        },
        "9": "HashSet<Integer> elements = new HashSet<Integer>();\n        for (int elem : l) {\n            elements.add(elem);\n        }\n        ArrayList<Integer> l_unique = new ArrayList<Integer>(elements);\n        Collections.sort(l_unique);\n        return l_unique;",
        "grade-9": {
            "execution": 1
        },
        "8": "ArrayList<Integer> ans = new ArrayList<>();\n        Collections.sort(l);\n        for (int i = 0; i < l.size(); i++) {\n            if (i == 0 || l.get(i) != l.get(i - 1)) {\n                ans.add(l.get(i));\n            }\n        }\n        return ans;",
        "grade-8": {
            "execution": 1
        },
        "25": "ArrayList<Integer> ans = new ArrayList<>();\n        HashSet<Integer> x = new HashSet<>();\n        for (int i : l) {\n            if (!x.contains(i)) {\n                x.add(i);\n                ans.add(i);\n            }\n        }\n        Collections.sort(ans);\n        return ans;",
        "grade-25": {
            "execution": 1
        },
        "68": "ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i : l) {\n            if (!result.contains(i))\n                result.add(i);\n        }\n        Collections.sort(result);\n        return result;",
        "grade-68": {
            "execution": 1
        },
        "75": "ArrayList<Integer> r = new ArrayList<>();\n        for (int i : l) {\n            if (!r.contains(i)) r.add(i);\n        }\n        Collections.sort(r);\n        return r;",
        "grade-75": {
            "execution": 1
        },
        "173": "Collections.sort(l);\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i=0; i<l.size(); i++) {\n            if (i == 0 || l.get(i) != l.get(i-1)) {\n                result.add(l.get(i));\n            }\n        }\n        return result;",
        "grade-173": {
            "execution": 1
        },
        "193": "HashSet<Integer> s = new HashSet<Integer>(l);\n        ArrayList<Integer> result = new ArrayList<Integer>(s);\n        Collections.sort(result);\n        return result;",
        "grade-193": {
            "execution": 1
        },
        "60": "ArrayList<Integer> ans = new ArrayList<>();\n        HashSet<Integer> set = new HashSet<>();\n        for (int i : l) {\n            if (!set.contains(i)) {\n                set.add(i);\n                ans.add(i);\n            }\n        }\n        Collections.sort(ans);\n        return ans;",
        "grade-60": {
            "execution": 1
        },
        "136": "ArrayList<Integer> unique_l = new ArrayList<Integer>();\n        for (int i : l) {\n            if (!unique_l.contains(i)) {\n                unique_l.add(i);\n            }\n        }\n        Collections.sort(unique_l);\n        return unique_l;",
        "grade-136": {
            "execution": 1
        },
        "69": "l.sort(null);\n        ArrayList<Integer> u = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i == 0 || l.get(i) != l.get(i - 1)) {\n                u.add(l.get(i));\n            }\n        }\n        return u;",
        "grade-69": {
            "execution": 1
        },
        "bleu-30": 0.2170582519582118,
        "bleu-7": 0.15851366457674082,
        "bleu-90": 0.15851366457674082,
        "bleu-79": 0.1549333232074355,
        "bleu-70": 0.41502107353207235,
        "bleu-39": 0.18806715430392426,
        "bleu-28": 0.21389460275371086,
        "bleu-189": 0.2170582519582118,
        "bleu-24": 0.052144284167468295,
        "bleu-138": 0.15851366457674082,
        "bleu-9": 0.2638269986736795,
        "bleu-8": 0.18782586885071675,
        "bleu-25": 0.24223650458067472,
        "bleu-68": 0.3860100130841356,
        "bleu-75": 0.2590279130887695,
        "bleu-173": 0.19515145818351287,
        "bleu-193": 0.5692639242547299,
        "bleu-60": 0.24223650458067472,
        "bleu-136": 0.2170582519582118,
        "bleu-69": 0.11830618616387095,
        "codebleu-30": 0.6217719295244415,
        "codebleu-7": 0.6380280209121663,
        "codebleu-90": 0.6380280209121663,
        "codebleu-79": 0.6191354467036804,
        "codebleu-70": 0.4830926619822417,
        "codebleu-39": 0.6344141040368353,
        "codebleu-28": 0.6179726141784586,
        "codebleu-189": 0.6217719295244415,
        "codebleu-24": 0.5365497076023391,
        "codebleu-138": 0.6380280209121663,
        "codebleu-9": 0.6155609889597424,
        "codebleu-8": 0.6387607205953533,
        "codebleu-25": 0.6634557248658924,
        "codebleu-68": 0.6541564205572443,
        "codebleu-75": 0.6348610044546884,
        "codebleu-173": 0.6454212240510941,
        "codebleu-193": 0.694730714080938,
        "codebleu-60": 0.6634557248658924,
        "codebleu-136": 0.6217719295244415,
        "codebleu-69": 0.6073099415204678,
        "chrf-30": 0.5764067654277205,
        "chrf-7": 0.48236577602562164,
        "chrf-90": 0.6069666913736762,
        "chrf-79": 0.5475508875711685,
        "chrf-70": 0.4803924940903829,
        "chrf-39": 0.5289496174016902,
        "chrf-28": 0.5704274900537334,
        "chrf-189": 0.51714618606102,
        "chrf-24": 0.17976606206323356,
        "chrf-138": 0.48236577602562164,
        "chrf-9": 0.5332947992440253,
        "chrf-8": 0.5001011775728905,
        "chrf-25": 0.570263674539826,
        "chrf-68": 0.7010922033316433,
        "chrf-75": 0.5373789371329434,
        "chrf-173": 0.6153328689519609,
        "chrf-193": 0.8107781865870529,
        "chrf-60": 0.5701173685439335,
        "chrf-136": 0.47499715413551763,
        "chrf-69": 0.3829100687883723,
        "rougel-30": 0.5454545454545455,
        "rougel-7": 0.4545454545454546,
        "rougel-90": 0.4545454545454546,
        "rougel-79": 0.462962962962963,
        "rougel-70": 0.5423728813559322,
        "rougel-39": 0.41509433962264153,
        "rougel-28": 0.558139534883721,
        "rougel-189": 0.5454545454545455,
        "rougel-24": 0.2772277227722772,
        "rougel-138": 0.4545454545454546,
        "rougel-9": 0.49462365591397844,
        "rougel-8": 0.36974789915966383,
        "rougel-25": 0.5321100917431193,
        "rougel-68": 0.627906976744186,
        "rougel-75": 0.5647058823529412,
        "rougel-173": 0.4,
        "rougel-193": 0.641025641025641,
        "rougel-60": 0.5321100917431193,
        "rougel-136": 0.5454545454545455,
        "rougel-69": 0.3666666666666667,
        "meteor-30": 0.6023997370151216,
        "meteor-7": 0.6332636689433276,
        "meteor-90": 0.7362565445026179,
        "meteor-79": 0.6044845842416692,
        "meteor-70": 0.5960837432273851,
        "meteor-39": 0.44975501706270926,
        "meteor-28": 0.5680000000000001,
        "meteor-189": 0.6193225118122238,
        "meteor-24": 0.29921982986539514,
        "meteor-138": 0.6332636689433276,
        "meteor-9": 0.700152207001522,
        "meteor-8": 0.5502054104876876,
        "meteor-25": 0.7340068443577746,
        "meteor-68": 0.6946008151864098,
        "meteor-75": 0.5901848739495799,
        "meteor-173": 0.6143990929705216,
        "meteor-193": 0.8571428571428571,
        "meteor-60": 0.7044007636402368,
        "meteor-136": 0.6023997370151216,
        "meteor-69": 0.5123173529766936,
        "ruby-30": 0.38888888888888884,
        "ruby-7": 0.3026315789473685,
        "ruby-90": 0.3026315789473685,
        "ruby-79": 0.31081081081081086,
        "ruby-70": 0.4117647058823529,
        "ruby-39": 0.29166666666666663,
        "ruby-28": 0.40384615384615385,
        "ruby-189": 0.38888888888888884,
        "ruby-24": 0.20895522388059706,
        "ruby-138": 0.3026315789473685,
        "ruby-9": 0.3389830508474576,
        "ruby-8": 0.2588235294117647,
        "ruby-25": 0.36,
        "ruby-68": 0.46153846153846156,
        "ruby-75": 0.4117647058823529,
        "ruby-173": 0.2674418604651163,
        "ruby-193": 0.5,
        "ruby-60": 0.36,
        "ruby-136": 0.38888888888888884,
        "ruby-69": 0.2441860465116279,
        "codebertscore_f1-30": 0.8283219933509827,
        "codebertscore_f3-30": 0.8516517877578735,
        "codebertscore_f1-7": 0.8014436364173889,
        "codebertscore_f3-7": 0.8384395837783813,
        "codebertscore_f1-90": 0.8060262799263,
        "codebertscore_f3-90": 0.842900276184082,
        "codebertscore_f1-79": 0.8072323799133301,
        "codebertscore_f3-79": 0.8431147336959839,
        "codebertscore_f1-70": 0.8597986102104187,
        "codebertscore_f3-70": 0.8446459174156189,
        "codebertscore_f1-39": 0.8118690252304077,
        "codebertscore_f3-39": 0.8513491153717041,
        "codebertscore_f1-28": 0.8298541307449341,
        "codebertscore_f3-28": 0.8519801497459412,
        "codebertscore_f1-189": 0.8224170207977295,
        "codebertscore_f3-189": 0.8453245759010315,
        "codebertscore_f1-24": 0.692862868309021,
        "codebertscore_f3-24": 0.702889084815979,
        "codebertscore_f1-138": 0.800195574760437,
        "codebertscore_f3-138": 0.8364511728286743,
        "codebertscore_f1-9": 0.815731942653656,
        "codebertscore_f3-9": 0.8421844244003296,
        "codebertscore_f1-8": 0.7882481217384338,
        "codebertscore_f3-8": 0.834865391254425,
        "codebertscore_f1-25": 0.8172723650932312,
        "codebertscore_f3-25": 0.853621780872345,
        "codebertscore_f1-68": 0.845528244972229,
        "codebertscore_f3-68": 0.867816150188446,
        "codebertscore_f1-75": 0.8418490886688232,
        "codebertscore_f3-75": 0.8655948638916016,
        "codebertscore_f1-173": 0.7919794321060181,
        "codebertscore_f3-173": 0.8383510112762451,
        "codebertscore_f1-193": 0.9037256240844727,
        "codebertscore_f3-193": 0.9158691763877869,
        "codebertscore_f1-60": 0.8172481060028076,
        "codebertscore_f3-60": 0.8522306084632874,
        "codebertscore_f1-136": 0.800961971282959,
        "codebertscore_f3-136": 0.8276028037071228,
        "codebertscore_f1-69": 0.7615410685539246,
        "codebertscore_f3-69": 0.7941322922706604,
        "codebertscore_s_f1-30": 0.8453824520111084,
        "codebertscore_s_f3-30": 0.8687493801116943,
        "codebertscore_s_f1-7": 0.8195406794548035,
        "codebertscore_s_f3-7": 0.8557974696159363,
        "codebertscore_s_f1-90": 0.8267894387245178,
        "codebertscore_s_f3-90": 0.8639278411865234,
        "codebertscore_s_f1-79": 0.8237537145614624,
        "codebertscore_s_f3-79": 0.8600161075592041,
        "codebertscore_s_f1-70": 0.8784965872764587,
        "codebertscore_s_f3-70": 0.8589093089103699,
        "codebertscore_s_f1-39": 0.8291289806365967,
        "codebertscore_s_f3-39": 0.8720694184303284,
        "codebertscore_s_f1-28": 0.8489059209823608,
        "codebertscore_s_f3-28": 0.8719339966773987,
        "codebertscore_s_f1-189": 0.8384178280830383,
        "codebertscore_s_f3-189": 0.8631995320320129,
        "codebertscore_s_f1-24": 0.71938157081604,
        "codebertscore_s_f3-24": 0.7330366969108582,
        "codebertscore_s_f1-138": 0.8202419877052307,
        "codebertscore_s_f3-138": 0.8569366335868835,
        "codebertscore_s_f1-9": 0.8307966589927673,
        "codebertscore_s_f3-9": 0.8541147112846375,
        "codebertscore_s_f1-8": 0.8035409450531006,
        "codebertscore_s_f3-8": 0.8541873693466187,
        "codebertscore_s_f1-25": 0.8330216407775879,
        "codebertscore_s_f3-25": 0.8722735643386841,
        "codebertscore_s_f1-68": 0.8631772994995117,
        "codebertscore_s_f3-68": 0.8858035802841187,
        "codebertscore_s_f1-75": 0.8549743890762329,
        "codebertscore_s_f3-75": 0.8785524964332581,
        "codebertscore_s_f1-173": 0.809240460395813,
        "codebertscore_s_f3-173": 0.8559428453445435,
        "codebertscore_s_f1-193": 0.9260405898094177,
        "codebertscore_s_f3-193": 0.9351691603660583,
        "codebertscore_s_f1-60": 0.8320657014846802,
        "codebertscore_s_f3-60": 0.8709350228309631,
        "codebertscore_s_f1-136": 0.8238356709480286,
        "codebertscore_s_f3-136": 0.8472719192504883,
        "codebertscore_s_f1-69": 0.7756291031837463,
        "codebertscore_s_f3-69": 0.8077612519264221,
        "gpt35_nsnr-30": 4,
        "raw_gpt35_nsnr-30": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-90": 4,
        "raw_gpt35_nsnr-90": "4",
        "gpt35_nsnr-79": 4,
        "raw_gpt35_nsnr-79": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-39": 4,
        "raw_gpt35_nsnr-39": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-189": 4,
        "raw_gpt35_nsnr-189": "4",
        "gpt35_nsnr-24": 3,
        "raw_gpt35_nsnr-24": "3",
        "gpt35_nsnr-138": 4,
        "raw_gpt35_nsnr-138": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-25": 4,
        "raw_gpt35_nsnr-25": "4",
        "gpt35_nsnr-68": 4,
        "raw_gpt35_nsnr-68": "4",
        "gpt35_nsnr-75": 4,
        "raw_gpt35_nsnr-75": "4",
        "gpt35_nsnr-173": 4,
        "raw_gpt35_nsnr-173": "4",
        "gpt35_nsnr-193": 4,
        "raw_gpt35_nsnr-193": "4",
        "gpt35_nsnr-60": 4,
        "raw_gpt35_nsnr-60": "4",
        "gpt35_nsnr-136": 4,
        "raw_gpt35_nsnr-136": "4",
        "gpt35_nsnr-69": 4,
        "raw_gpt35_nsnr-69": "4",
        "gpt35_nswr-30": 3,
        "raw_gpt35_nswr-30": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-90": 3,
        "raw_gpt35_nswr-90": "3",
        "gpt35_nswr-79": 3,
        "raw_gpt35_nswr-79": "3",
        "gpt35_nswr-70": 4,
        "raw_gpt35_nswr-70": "4",
        "gpt35_nswr-39": 3,
        "raw_gpt35_nswr-39": "3",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-189": 4,
        "raw_gpt35_nswr-189": "4",
        "gpt35_nswr-24": 3,
        "raw_gpt35_nswr-24": "3",
        "gpt35_nswr-138": 4,
        "raw_gpt35_nswr-138": "4",
        "gpt35_nswr-9": 4,
        "raw_gpt35_nswr-9": "4",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-25": 4,
        "raw_gpt35_nswr-25": "4",
        "gpt35_nswr-68": 4,
        "raw_gpt35_nswr-68": "4",
        "gpt35_nswr-75": 3,
        "raw_gpt35_nswr-75": "3",
        "gpt35_nswr-173": 3,
        "raw_gpt35_nswr-173": "3",
        "gpt35_nswr-193": 4,
        "raw_gpt35_nswr-193": "4",
        "gpt35_nswr-60": 4,
        "raw_gpt35_nswr-60": "4",
        "gpt35_nswr-136": 3,
        "raw_gpt35_nswr-136": "3",
        "gpt35_nswr-69": 4,
        "raw_gpt35_nswr-69": "4"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp(3, 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0, 101)\n    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n    // 1\n    public static int modp(int n, int p) {\n",
        "snippet": [
            "        int ret = 1;\n        for (int i = 0; i < n; i++) {\n            ret = (ret * 2) % p;\n        }\n        return ret;\n    }\n}"
        ],
        "simplified": "Return 2^n modulo p (be aware of numerics).",
        "task_id": "49",
        "194": "BigInteger Bn = BigInteger.valueOf(n);\n        BigInteger Bp = BigInteger.valueOf(p);\n        BigInteger result = Bn.modPow(Bn, Bp);\n        return result.intValue();",
        "grade-194": {
            "execution": 0
        },
        "28": "if (n == 0) return 1;\n        if (n == 1) return 2;\n        long tmp = modp(n / 2, p);\n        if (n % 2 == 0) return (int) ((tmp * tmp) % p);\n        else return (int) ((2 * tmp * tmp) % p);",
        "grade-28": {
            "execution": 1
        },
        "6": "if (n == 0) {\n            return 1;\n        } else if (n % 2 == 0) {\n            int tmp = modp(n / 2, p);\n            return (tmp * tmp) % p;\n        } else {\n            return (2 * modp(n - 1, p)) % p;\n        }",
        "grade-6": {
            "execution": 1
        },
        "73": "if (n == 0) return 1;\n        if (n == 1) return 2;\n        return (int) (Math.pow(2, modp(n - 1, p)) % p);",
        "grade-73": {
            "execution": 0
        },
        "64": "if (n == 0) return 1;\n        long r = modp(n/2, p);\n        r = (r*r) % p;\n        if (n % 2 == 1) r = (r*2) % p;\n        return (int) r;",
        "grade-64": {
            "execution": 1
        },
        "59": "if (n == 0) {\n            return 1;\n        }\n        int recurse = modp(n/2, p);\n        recurse = (recurse * recurse) % p;\n        if (n % 2 == 1) {\n            recurse = (recurse * 2) % p;\n        }\n        return recurse;",
        "grade-59": {
            "execution": 1
        },
        "35": "int res = 1;\n        while (n > 0) {\n            if ((n & 1) != 0) {\n                res = (res * 2) % p;\n            }\n            n >>= 1;\n        }\n        return res;",
        "grade-35": {
            "execution": 0
        },
        "26": "if (n == 0) return 1;\n        int res = modp(n/2, p);\n        res = (res * res) % p;\n        if (n % 2 == 1) res = (res * 2) % p;\n        return res;",
        "grade-26": {
            "execution": 1
        },
        "164": "if (n == 0) {\n            return 1;\n        }\n        if (n % 2 == 0) {\n            int sq = modp(n / 2, p);\n            return (sq * sq) % p;\n        } else {\n            return (modp(n - 1, p) * n) % p;\n        }",
        "grade-164": {
            "execution": 0
        },
        "22": "if (n == 0) {\n            return 1;\n        }\n        if (n % 2 == 0) {\n            return modp(n / 2, p) * modp(n / 2, p) % p;\n        } else {\n            return 2 * modp(n - 1, p) % p;\n        }",
        "grade-22": {
            "execution": 1
        },
        "177": "if (n == 0) return 1;\n        int z = modp(n/2, p);\n        if (n % 2 == 0) return z*z % p;\n        else return z*z*2 % p;",
        "grade-177": {
            "execution": 1
        },
        "125": "BigInteger a = BigInteger.valueOf(2);\n        BigInteger b = BigInteger.valueOf(n);\n        BigInteger c = BigInteger.valueOf(p);\n        BigInteger d = a.modPow(b, c);\n        return d.intValue();",
        "grade-125": {
            "execution": 1
        },
        "8": "int a = 1;\n        for (int i = 0; i < n; i++) {\n            a = (a * 2) % p;\n        }\n        return a;",
        "grade-8": {
            "execution": 1
        },
        "7": "if (n == 0) return 1;\n        int l = modp(n / 2, p);\n        int r = (int) ((long) l * l % p);\n        if (n % 2 == 1) r = (int) ((long) r * 2 % p);\n        return r;",
        "grade-7": {
            "execution": 1
        },
        "23": "// TODO: Implement this method\n        int power = n;\n        int result = 1;\n        while (power > 0) {\n            if ((power & 1) == 1) {\n                result = (result * n) % p;\n            }\n            n = (n * n) % p;\n            power >>= 1;\n        }\n        return result;",
        "grade-23": {
            "execution": 0
        },
        "57": "if (n == 0) {\n            return 1;\n        }\n        if (n % 2 == 0) {\n            int t = modp(n / 2, p);\n            return (int) ((long) t * t % p);\n        }\n        return (int) ((long) modp(n - 1, p) * n % p);",
        "grade-57": {
            "execution": 0
        },
        "61": "if (n == 0) return 1;\n        return (2 * modp(n - 1, p)) % p;",
        "grade-61": {
            "execution": 1
        },
        "152": "if (n == 0) return 1;\n        int ans = 1;\n        for (int i = 0; i < n; i++) {\n            ans = (2 * ans) % p;\n        }\n        return ans;",
        "grade-152": {
            "execution": 1
        },
        "180": "if (n == 0) {\n            return 1;\n        }\n        long mod = 1;\n        for (int i = 0; i < n; i++) {\n            mod = mod * 2 % p;\n        }\n        return (int) mod;",
        "grade-180": {
            "execution": 1
        },
        "168": "if (n == 0) return 1;\n        if (n % 2 == 0) return modp(n / 2, p) * modp(n / 2, p) % p;\n        return 2 * modp(n - 1, p) % p;",
        "grade-168": {
            "execution": 1
        },
        "bleu-194": 0.014967541158901365,
        "bleu-28": 0.04043444532718813,
        "bleu-6": 0.09322933958386904,
        "bleu-73": 0.06380575767530809,
        "bleu-64": 0.1276865939249325,
        "bleu-59": 0.17412277132969536,
        "bleu-35": 0.21996904578092058,
        "bleu-26": 0.1314770573188977,
        "bleu-164": 0.09474576106278237,
        "bleu-22": 0.09582431136283714,
        "bleu-177": 0.05720251726917801,
        "bleu-125": 0.020295486255221436,
        "bleu-8": 0.7046135583106878,
        "bleu-7": 0.031983770923076235,
        "bleu-23": 0.1094518141903962,
        "bleu-57": 0.0444051472233622,
        "bleu-61": 0.09518684099700157,
        "bleu-152": 0.5367730757744297,
        "bleu-180": 0.49327439206691986,
        "bleu-168": 0.06978423773483025,
        "codebleu-194": 0.35757575757575755,
        "codebleu-28": 0.4404040404040403,
        "codebleu-6": 0.4814256439224237,
        "codebleu-73": 0.337037037037037,
        "codebleu-64": 0.4989338667234297,
        "codebleu-59": 0.594062561265199,
        "codebleu-35": 0.5691510006660427,
        "codebleu-26": 0.49925968854967706,
        "codebleu-164": 0.48115971018481085,
        "codebleu-22": 0.4458687242859504,
        "codebleu-177": 0.42087542087542074,
        "codebleu-125": 0.3892255892255892,
        "codebleu-8": 0.851454305111762,
        "codebleu-7": 0.47205387205387195,
        "codebleu-23": 0.5631494722793243,
        "codebleu-57": 0.44781144781144777,
        "codebleu-61": 0.27163038058331385,
        "codebleu-152": 0.6826659915673301,
        "codebleu-180": 0.7146116852791065,
        "codebleu-168": 0.3712206708243104,
        "chrf-194": 0.17773356382122632,
        "chrf-28": 0.22188484372111272,
        "chrf-6": 0.24199996491201747,
        "chrf-73": 0.2092620363750298,
        "chrf-64": 0.2425273521069496,
        "chrf-59": 0.34328540453886885,
        "chrf-35": 0.3646873178204664,
        "chrf-26": 0.29493649850729264,
        "chrf-164": 0.2395470268390262,
        "chrf-22": 0.2265507874400696,
        "chrf-177": 0.21039057516161916,
        "chrf-125": 0.14729781637548683,
        "chrf-8": 0.6315637861768155,
        "chrf-7": 0.23265164391636317,
        "chrf-23": 0.3233774623114152,
        "chrf-57": 0.25861758367714116,
        "chrf-61": 0.17997933088937418,
        "chrf-152": 0.56803340447685,
        "chrf-180": 0.5646090403196269,
        "chrf-168": 0.18629828767144413,
        "rougel-194": 0.2588235294117647,
        "rougel-28": 0.3119266055045871,
        "rougel-6": 0.37623762376237624,
        "rougel-73": 0.3209876543209877,
        "rougel-64": 0.3829787234042553,
        "rougel-59": 0.4210526315789474,
        "rougel-35": 0.4878048780487805,
        "rougel-26": 0.3956043956043956,
        "rougel-164": 0.37999999999999995,
        "rougel-22": 0.3877551020408163,
        "rougel-177": 0.3529411764705882,
        "rougel-125": 0.24489795918367346,
        "rougel-8": 0.8611111111111112,
        "rougel-7": 0.3461538461538462,
        "rougel-23": 0.3461538461538462,
        "rougel-57": 0.3302752293577982,
        "rougel-61": 0.31746031746031744,
        "rougel-152": 0.7317073170731707,
        "rougel-180": 0.6588235294117648,
        "rougel-168": 0.3516483516483516,
        "meteor-194": 0.19685039370078744,
        "meteor-28": 0.31940068613036476,
        "meteor-6": 0.4151536523929472,
        "meteor-73": 0.3030835543766579,
        "meteor-64": 0.3824168255986438,
        "meteor-59": 0.5200613810741688,
        "meteor-35": 0.49206349206349215,
        "meteor-26": 0.45913682277318646,
        "meteor-164": 0.41620202020202024,
        "meteor-22": 0.36159116425014154,
        "meteor-177": 0.3335958005249344,
        "meteor-125": 0.2157360406091371,
        "meteor-8": 0.8375418495226891,
        "meteor-7": 0.3561672967863894,
        "meteor-23": 0.4070816186556927,
        "meteor-57": 0.3769481481481481,
        "meteor-61": 0.31088856974872536,
        "meteor-152": 0.8100716295305267,
        "meteor-180": 0.8117387426181102,
        "meteor-168": 0.3151237947991153,
        "ruby-194": 0.125,
        "ruby-28": 0.2222222222222222,
        "ruby-6": 0.25,
        "ruby-73": 0.15909090909090906,
        "ruby-64": 0.26315789473684215,
        "ruby-59": 0.31034482758620685,
        "ruby-35": 0.4222222222222223,
        "ruby-26": 0.2592592592592593,
        "ruby-164": 0.25396825396825395,
        "ruby-22": 0.2622950819672131,
        "ruby-177": 0.1875,
        "ruby-125": 0.14754098360655743,
        "ruby-8": 0.8378378378378378,
        "ruby-7": 0.19402985074626866,
        "ruby-23": 0.25373134328358204,
        "ruby-57": 0.19444444444444442,
        "ruby-61": 0.18918918918918914,
        "ruby-152": 0.6222222222222222,
        "ruby-180": 0.5208333333333333,
        "ruby-168": 0.2407407407407407,
        "codebertscore_f1-194": 0.698702871799469,
        "codebertscore_f3-194": 0.7038902044296265,
        "codebertscore_f1-28": 0.7563760280609131,
        "codebertscore_f3-28": 0.7511727809906006,
        "codebertscore_f1-6": 0.7677196264266968,
        "codebertscore_f3-6": 0.7668525576591492,
        "codebertscore_f1-73": 0.755811333656311,
        "codebertscore_f3-73": 0.7483984231948853,
        "codebertscore_f1-64": 0.7829307913780212,
        "codebertscore_f3-64": 0.7785882353782654,
        "codebertscore_f1-59": 0.7750208377838135,
        "codebertscore_f3-59": 0.7766469717025757,
        "codebertscore_f1-35": 0.8515864610671997,
        "codebertscore_f3-35": 0.8449710607528687,
        "codebertscore_f1-26": 0.8079322576522827,
        "codebertscore_f3-26": 0.8040141463279724,
        "codebertscore_f1-164": 0.759199857711792,
        "codebertscore_f3-164": 0.7568111419677734,
        "codebertscore_f1-22": 0.7459973692893982,
        "codebertscore_f3-22": 0.7377333045005798,
        "codebertscore_f1-177": 0.7725042104721069,
        "codebertscore_f3-177": 0.7665337920188904,
        "codebertscore_f1-125": 0.7055988311767578,
        "codebertscore_f3-125": 0.7182742953300476,
        "codebertscore_f1-8": 0.9622173309326172,
        "codebertscore_f3-8": 0.9622173309326172,
        "codebertscore_f1-7": 0.7818638682365417,
        "codebertscore_f3-7": 0.7881269454956055,
        "codebertscore_f1-23": 0.7755173444747925,
        "codebertscore_f3-23": 0.7901507019996643,
        "codebertscore_f1-57": 0.7559457421302795,
        "codebertscore_f3-57": 0.7564025521278381,
        "codebertscore_f1-61": 0.7734878063201904,
        "codebertscore_f3-61": 0.7519519329071045,
        "codebertscore_f1-152": 0.9064546823501587,
        "codebertscore_f3-152": 0.917516827583313,
        "codebertscore_f1-180": 0.8748149871826172,
        "codebertscore_f3-180": 0.8849267363548279,
        "codebertscore_f1-168": 0.7575137615203857,
        "codebertscore_f3-168": 0.7481237649917603,
        "codebertscore_s_f1-194": 0.7259896993637085,
        "codebertscore_s_f3-194": 0.7348762154579163,
        "codebertscore_s_f1-28": 0.7843288779258728,
        "codebertscore_s_f3-28": 0.7834252119064331,
        "codebertscore_s_f1-6": 0.7919325828552246,
        "codebertscore_s_f3-6": 0.7933565378189087,
        "codebertscore_s_f1-73": 0.7815678119659424,
        "codebertscore_s_f3-73": 0.7759929895401001,
        "codebertscore_s_f1-64": 0.8068882822990417,
        "codebertscore_s_f3-64": 0.8022124767303467,
        "codebertscore_s_f1-59": 0.7986827492713928,
        "codebertscore_s_f3-59": 0.8060843348503113,
        "codebertscore_s_f1-35": 0.869807243347168,
        "codebertscore_s_f3-35": 0.8666791319847107,
        "codebertscore_s_f1-26": 0.8443635702133179,
        "codebertscore_s_f3-26": 0.8423939347267151,
        "codebertscore_s_f1-164": 0.7851355075836182,
        "codebertscore_s_f3-164": 0.7833305597305298,
        "codebertscore_s_f1-22": 0.7751258611679077,
        "codebertscore_s_f3-22": 0.7665160298347473,
        "codebertscore_s_f1-177": 0.8000023365020752,
        "codebertscore_s_f3-177": 0.7977361679077148,
        "codebertscore_s_f1-125": 0.7236939072608948,
        "codebertscore_s_f3-125": 0.7369796633720398,
        "codebertscore_s_f1-8": 0.9645728468894958,
        "codebertscore_s_f3-8": 0.9645727872848511,
        "codebertscore_s_f1-7": 0.814214289188385,
        "codebertscore_s_f3-7": 0.8219358325004578,
        "codebertscore_s_f1-23": 0.8014179468154907,
        "codebertscore_s_f3-23": 0.8178235292434692,
        "codebertscore_s_f1-57": 0.7837580442428589,
        "codebertscore_s_f3-57": 0.7842243909835815,
        "codebertscore_s_f1-61": 0.8005121946334839,
        "codebertscore_s_f3-61": 0.7824337482452393,
        "codebertscore_s_f1-152": 0.9187230467796326,
        "codebertscore_s_f3-152": 0.9280669689178467,
        "codebertscore_s_f1-180": 0.879450798034668,
        "codebertscore_s_f3-180": 0.8872835040092468,
        "codebertscore_s_f1-168": 0.7887293100357056,
        "codebertscore_s_f3-168": 0.7786935567855835,
        "gpt35_nsnr-194": 3,
        "raw_gpt35_nsnr-194": "3",
        "gpt35_nsnr-28": 3,
        "raw_gpt35_nsnr-28": "3",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-73": 3,
        "raw_gpt35_nsnr-73": "3",
        "gpt35_nsnr-64": 3,
        "raw_gpt35_nsnr-64": "3",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-164": 3,
        "raw_gpt35_nsnr-164": "3",
        "gpt35_nsnr-22": 3,
        "raw_gpt35_nsnr-22": "3",
        "gpt35_nsnr-177": 3,
        "raw_gpt35_nsnr-177": "3",
        "gpt35_nsnr-125": 3,
        "raw_gpt35_nsnr-125": "3",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 3,
        "raw_gpt35_nsnr-23": "3",
        "gpt35_nsnr-57": 3,
        "raw_gpt35_nsnr-57": "3",
        "gpt35_nsnr-61": 3,
        "raw_gpt35_nsnr-61": "3",
        "gpt35_nsnr-152": 3,
        "raw_gpt35_nsnr-152": "3",
        "gpt35_nsnr-180": 3,
        "raw_gpt35_nsnr-180": "3",
        "gpt35_nsnr-168": 3,
        "raw_gpt35_nsnr-168": "3",
        "gpt35_nswr-194": 2,
        "raw_gpt35_nswr-194": "2",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-73": 2,
        "raw_gpt35_nswr-73": "2",
        "gpt35_nswr-64": 4,
        "raw_gpt35_nswr-64": "4",
        "gpt35_nswr-59": 4,
        "raw_gpt35_nswr-59": "4",
        "gpt35_nswr-35": 4,
        "raw_gpt35_nswr-35": "4",
        "gpt35_nswr-26": 4,
        "raw_gpt35_nswr-26": "4",
        "gpt35_nswr-164": 3,
        "raw_gpt35_nswr-164": "3",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-177": 4,
        "raw_gpt35_nswr-177": "4",
        "gpt35_nswr-125": 4,
        "raw_gpt35_nswr-125": "4",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-61": 3,
        "raw_gpt35_nswr-61": "3",
        "gpt35_nswr-152": 4,
        "raw_gpt35_nswr-152": "4",
        "gpt35_nswr-180": 3,
        "raw_gpt35_nswr-180": "3",
        "gpt35_nswr-168": 3,
        "raw_gpt35_nswr-168": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static int minSubArraySum(ArrayList<Integer> nums) {\n",
        "snippet": [
            "        int minSum = Integer.MAX_VALUE;\n        int sum = 0;\n        for (Integer num : nums) {\n            sum += num;\n            if (minSum > sum) {\n                minSum = sum;\n            }\n            if (sum > 0) {\n                sum = 0;\n            }\n        }\n        return minSum;\n    }\n}"
        ],
        "simplified": "Given an array of integers nums, find the minimum sum of any non-empty sub-array of nums.",
        "task_id": "114",
        "30": "int best = Integer.MAX_VALUE;\n        for (int i = 0; i < nums.size(); i++) {\n            int s = 0;\n            for (int j = i; j < nums.size(); j++) {\n                s += nums.get(j);\n                best = Math.min(best, s);\n            }\n        }\n        return best;",
        "grade-30": {
            "execution": 0
        },
        "6": "int min = Integer.MAX_VALUE;\n        int sum = 0;\n        int head = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            while (sum < 0) {\n                sum -= nums.get(head);\n                head++;\n            }\n            min = Math.min(min, sum);\n        }\n        return min;",
        "grade-6": {
            "execution": 0
        },
        "81": "int minSum = 0;\n        int[] dp = new int[nums.size()];\n        dp[0] = nums.get(0);\n        minSum = dp[0];\n        for (int i = 1; i < nums.size(); i++) {\n            dp[i] = Math.min(dp[i - 1] + nums.get(i), nums.get(i));\n            minSum = Math.min(minSum, dp[i]);\n        }\n        return minSum;",
        "grade-81": {
            "execution": 0
        },
        "71": "int sum = 0;\n        int minSum = 0;\n        int runningSum = 0;\n        for (int num : nums) {\n            sum += num;\n            runningSum += num;\n            if (runningSum < minSum) {\n                minSum = runningSum;\n            }\n        }\n        return Math.abs(minSum) < sum ? Math.abs(minSum) : sum;",
        "grade-71": {
            "execution": 0
        },
        "66": "ArrayList<Integer> sums = new ArrayList<>();\n        int sum = 0;\n        int s = nums.size();\n        for (int i = 0; i < s; i++) {\n            sum += nums.get(i);\n            sums.add(sum);\n        }\n        int minSum = sums.get(s - 1);\n        for (int i = s - 2; i >= 0; i--) {\n            for (int j = i + 1; j < s; j++) {\n                minSum = Math.min(minSum, sums.get(j) - sums.get(i));\n            }\n        }\n        return minSum;",
        "grade-66": {
            "execution": 0
        },
        "40": "Integer minSum = nums.get(0);\n        Integer sum = nums.get(0);\n        for (int i = 1; i < nums.size(); i++) {\n            sum = Math.min(nums.get(i), sum + nums.get(i));\n            minSum = Math.min(minSum, sum);\n        }\n        return minSum;",
        "grade-40": {
            "execution": 0
        },
        "28": "int minSum = Integer.MAX_VALUE;\n        int sum = 0;\n        int startIndex = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if (sum < minSum) {\n                minSum = sum;\n            }\n            if (sum > 0) {\n                // Start over\n                sum = 0;\n                startIndex = i + 1;\n            }\n        }\n        return minSum;",
        "grade-28": {
            "execution": 0
        },
        "167": "// We will keep track of the minimum sum by iterating through each num and adding\n        // it to an accumulator.\n        //\n        // We will also keep track of the minimum sum so far, and every time we find a new\n        // minimum sum, we will update the minimum sum so far.\n        //\n        // If we ever find that the accumulator is less than 0, we will reset the accumulator\n        // to 0.\n        int minSum = Integer.MAX_VALUE;\n        int curSum = 0;\n        for (int num : nums) {\n            curSum += num;\n            if (curSum < minSum) {\n                minSum = curSum;\n            }\n            if (curSum < 0) {\n                curSum = 0;\n            }\n        }\n        return minSum;",
        "grade-167": {
            "execution": 0
        },
        "23": "int min_sum = Integer.MAX_VALUE;\n        int sum = 0;\n        for (int num : nums) {\n            sum += num;\n            min_sum = Math.min(min_sum, sum);\n            if (sum > 0) {\n                sum = 0;\n            }\n        }\n        return min_sum;",
        "grade-23": {
            "execution": 0
        },
        "186": "int minSum = Integer.MAX_VALUE;\n        int currSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) < minSum) {\n                minSum = nums.get(i);\n            }\n            if (nums.get(i) > 0) {\n                currSum = nums.get(i);\n            } else {\n                currSum += nums.get(i);\n                if (currSum < minSum) {\n                    minSum = currSum;\n                }\n            }\n        }\n        return minSum;",
        "grade-186": {
            "execution": 0
        },
        "127": "// Your code here.\n        return -1;",
        "grade-127": {
            "execution": 0
        },
        "9": "if (nums.size() == 0) {\n            return 0;\n        }\n        int min = nums.get(0);\n        int sum = nums.get(0);\n        for (int i = 1; i < nums.size(); i++) {\n            sum = sum + nums.get(i);\n            if (sum < min) {\n                min = sum;\n            }\n            if (sum > 0) {\n                sum = 0;\n            }\n        }\n        return min;",
        "grade-9": {
            "execution": 0
        },
        "7": "int[] numsArray = nums.stream().mapToInt(i -> i).toArray();\n        return minSubArraySum(numsArray);",
        "grade-7": {
            "execution": 0
        },
        "24": "int runningSum = nums.get(0);\n        int minSum = nums.get(0);\n        for (int i = 1; i < nums.size(); i++) {\n            runningSum = Math.min(runningSum + nums.get(i), nums.get(i));\n            minSum = Math.min(minSum, runningSum);\n        }\n        return minSum;",
        "grade-24": {
            "execution": 0
        },
        "64": "// Think about the first one being the min?\n        int min_sum = nums.get(0);\n        // Min is the min of what it was and the sum from\n        // start to i\n        int min_index = 0;\n        for (int i = 1; i < nums.size(); i++) {\n            if (nums.get(i) < min_sum) {\n                min_sum = nums.get(i);\n                min_index = i;\n            }\n            int sum = 0;\n            for (int j = i; j >= min_index; j--) {\n                sum += nums.get(j);\n                if (sum < min_sum) {\n                    min_sum = sum;\n                }\n            }\n        }\n        return min_sum;",
        "grade-64": {
            "execution": 0
        },
        "68": "var min = Integer.MAX_VALUE;\n        var sum = 0;\n        for (var i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            min = Math.min(min, sum);\n            if (sum < 0) {\n                sum = 0;\n            }\n        }\n        return min;",
        "grade-68": {
            "execution": 0
        },
        "154": "// Assume there exists a valid solution\n        int minSum = nums.get(0);\n        int sum = 0;\n        int i = 0;\n        while (i < nums.size()) {\n            sum += nums.get(i);\n            minSum = Math.min(minSum, sum);\n            if (sum < 0) {\n                sum = 0;\n            }\n            i++;\n        }\n        return minSum;",
        "grade-154": {
            "execution": 0
        },
        "190": "int m = nums.size();\n        int ret = Integer.MAX_VALUE;\n        for (int start = 0; start < m; start++) {\n            int sum = 0;\n            for (int i = start; i < m; i++) {\n                sum += nums.get(i);\n                ret = Math.min(ret, sum);\n            }\n        }\n        return ret;",
        "grade-190": {
            "execution": 0
        },
        "172": "// Implement me\n        int minSum = Integer.MAX_VALUE;\n        int sum = 0;\n        int n = nums.size();\n        for (int i = 0; i < n; i++) {\n            sum = 0;\n            for (int j = i; j < n; j++) {\n                sum += nums.get(j);\n                if (sum < minSum)\n                    minSum = sum;\n            }\n        }\n        return minSum;",
        "grade-172": {
            "execution": 0
        },
        "56": "int min = Integer.MAX_VALUE;\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            min = Math.min(min, sum);\n            if (sum < 0) sum = 0;\n        }\n        return min;",
        "grade-56": {
            "execution": 0
        },
        "bleu-30": 0.16231048041279977,
        "bleu-6": 0.2682843317327167,
        "bleu-81": 0.10527536110543353,
        "bleu-71": 0.40463015723106,
        "bleu-66": 0.1720137931776084,
        "bleu-40": 0.1515445829079063,
        "bleu-28": 0.4497443481596663,
        "bleu-167": 0.23093988059271633,
        "bleu-23": 0.5833294797763293,
        "bleu-186": 0.2535659634430664,
        "bleu-127": 0.0004112299384581512,
        "bleu-9": 0.3007168921608353,
        "bleu-7": 0.018493348376695782,
        "bleu-24": 0.1302932679925395,
        "bleu-64": 0.13442133631394382,
        "bleu-68": 0.3633447798055222,
        "bleu-154": 0.3053712238002374,
        "bleu-190": 0.2293598673782014,
        "bleu-172": 0.3811180512672466,
        "bleu-56": 0.3523560178080764,
        "codebleu-30": 0.5129945554662976,
        "codebleu-6": 0.5749659942465155,
        "codebleu-81": 0.47627705627705624,
        "codebleu-71": 0.5750970610988847,
        "codebleu-66": 0.5742589283239546,
        "codebleu-40": 0.4765079365079364,
        "codebleu-28": 0.6934481653802643,
        "codebleu-167": 0.6801032783100319,
        "codebleu-23": 0.6777918966346039,
        "codebleu-186": 0.6415018788878556,
        "codebleu-127": 0.06971608255575927,
        "codebleu-9": 0.6729198349931275,
        "codebleu-7": 0.21538221889171258,
        "codebleu-24": 0.4653968253968253,
        "codebleu-64": 0.6175846872882444,
        "codebleu-68": 0.6127881199397656,
        "codebleu-154": 0.5598205607504281,
        "codebleu-190": 0.5338897510530913,
        "codebleu-172": 0.6042649178848604,
        "codebleu-56": 0.5816879404925162,
        "chrf-30": 0.3409768145328938,
        "chrf-6": 0.4811138370170607,
        "chrf-81": 0.33900150477726015,
        "chrf-71": 0.5298757231539422,
        "chrf-66": 0.465240770317994,
        "chrf-40": 0.41480994696267187,
        "chrf-28": 0.6988543160291537,
        "chrf-167": 0.49858011284250947,
        "chrf-23": 0.6822461637552385,
        "chrf-186": 0.5536045492787601,
        "chrf-127": 0.04911007594242883,
        "chrf-9": 0.4720098447449336,
        "chrf-7": 0.1715234839404153,
        "chrf-24": 0.34874228116959083,
        "chrf-64": 0.37614119368338206,
        "chrf-68": 0.5020937063875655,
        "chrf-154": 0.4783905806957501,
        "chrf-190": 0.4174629702732926,
        "chrf-172": 0.6520807514870615,
        "chrf-56": 0.5210288203983577,
        "rougel-30": 0.3941605839416058,
        "rougel-6": 0.5034965034965035,
        "rougel-81": 0.32558139534883723,
        "rougel-71": 0.5714285714285714,
        "rougel-66": 0.3448275862068965,
        "rougel-40": 0.4397163120567376,
        "rougel-28": 0.6799999999999999,
        "rougel-167": 0.4593301435406698,
        "rougel-23": 0.7567567567567568,
        "rougel-186": 0.48,
        "rougel-127": 0.08695652173913043,
        "rougel-9": 0.5714285714285715,
        "rougel-7": 0.31249999999999994,
        "rougel-24": 0.4,
        "rougel-64": 0.3316582914572865,
        "rougel-68": 0.6093750000000001,
        "rougel-154": 0.5734265734265734,
        "rougel-190": 0.42028985507246386,
        "rougel-172": 0.49664429530201337,
        "rougel-56": 0.619047619047619,
        "meteor-30": 0.31128983613149686,
        "meteor-6": 0.4260187798158974,
        "meteor-81": 0.37532511645962735,
        "meteor-71": 0.47487789178751266,
        "meteor-66": 0.45987725518675165,
        "meteor-40": 0.4191410726842338,
        "meteor-28": 0.7185733958028798,
        "meteor-167": 0.7756813892262849,
        "meteor-23": 0.6768566689820394,
        "meteor-186": 0.5756134080370944,
        "meteor-127": 0.027726432532347505,
        "meteor-9": 0.6234121405750799,
        "meteor-7": 0.19229643790722173,
        "meteor-24": 0.4082046108556874,
        "meteor-64": 0.4322481057373339,
        "meteor-68": 0.5302295918367348,
        "meteor-154": 0.5969539090475972,
        "meteor-190": 0.37122944832293525,
        "meteor-172": 0.5140398550724639,
        "meteor-56": 0.49911742846525453,
        "ruby-30": 0.28205128205128205,
        "ruby-6": 0.33333333333333337,
        "ruby-81": 0.20353982300884954,
        "ruby-71": 0.43243243243243246,
        "ruby-66": 0.2222222222222222,
        "ruby-40": 0.2682926829268293,
        "ruby-28": 0.5164835164835164,
        "ruby-167": 0.30000000000000004,
        "ruby-23": 0.6610169491525424,
        "ruby-186": 0.3448275862068966,
        "ruby-127": 0.05084745762711862,
        "ruby-9": 0.3894736842105263,
        "ruby-7": 0.1694915254237288,
        "ruby-24": 0.2558139534883721,
        "ruby-64": 0.2142857142857143,
        "ruby-68": 0.46376811594202894,
        "ruby-154": 0.44047619047619047,
        "ruby-190": 0.26582278481012656,
        "ruby-172": 0.3666666666666667,
        "ruby-56": 0.4477611940298507,
        "codebertscore_f1-30": 0.8124440908432007,
        "codebertscore_f3-30": 0.8196906447410583,
        "codebertscore_f1-6": 0.8544973134994507,
        "codebertscore_f3-6": 0.8753089308738708,
        "codebertscore_f1-81": 0.7966066598892212,
        "codebertscore_f3-81": 0.8228194713592529,
        "codebertscore_f1-71": 0.8740281462669373,
        "codebertscore_f3-71": 0.8822013735771179,
        "codebertscore_f1-66": 0.7948139905929565,
        "codebertscore_f3-66": 0.8315228223800659,
        "codebertscore_f1-40": 0.8244398236274719,
        "codebertscore_f3-40": 0.8371375203132629,
        "codebertscore_f1-28": 0.8830510973930359,
        "codebertscore_f3-28": 0.9194750785827637,
        "codebertscore_f1-167": 0.7904666066169739,
        "codebertscore_f3-167": 0.8524425625801086,
        "codebertscore_f1-23": 0.9506573677062988,
        "codebertscore_f3-23": 0.9565203189849854,
        "codebertscore_f1-186": 0.8565040826797485,
        "codebertscore_f3-186": 0.8968124985694885,
        "codebertscore_f1-127": 0.5934513211250305,
        "codebertscore_f3-127": 0.5938242673873901,
        "codebertscore_f1-9": 0.8200638294219971,
        "codebertscore_f3-9": 0.8344501256942749,
        "codebertscore_f1-7": 0.7066348195075989,
        "codebertscore_f3-7": 0.7123702168464661,
        "codebertscore_f1-24": 0.8162068724632263,
        "codebertscore_f3-24": 0.8253267407417297,
        "codebertscore_f1-64": 0.7718788385391235,
        "codebertscore_f3-64": 0.8109848499298096,
        "codebertscore_f1-68": 0.8799813985824585,
        "codebertscore_f3-68": 0.8984339237213135,
        "codebertscore_f1-154": 0.8475682139396667,
        "codebertscore_f3-154": 0.8739572763442993,
        "codebertscore_f1-190": 0.8099058866500854,
        "codebertscore_f3-190": 0.8259999752044678,
        "codebertscore_f1-172": 0.8478593230247498,
        "codebertscore_f3-172": 0.8794383406639099,
        "codebertscore_f1-56": 0.8928740620613098,
        "codebertscore_f3-56": 0.9080767631530762,
        "codebertscore_s_f1-30": 0.8254080414772034,
        "codebertscore_s_f3-30": 0.8309199810028076,
        "codebertscore_s_f1-6": 0.8704996109008789,
        "codebertscore_s_f3-6": 0.8887835741043091,
        "codebertscore_s_f1-81": 0.8128160834312439,
        "codebertscore_s_f3-81": 0.8426328301429749,
        "codebertscore_s_f1-71": 0.8876357674598694,
        "codebertscore_s_f3-71": 0.8951957821846008,
        "codebertscore_s_f1-66": 0.8089255690574646,
        "codebertscore_s_f3-66": 0.8491244316101074,
        "codebertscore_s_f1-40": 0.840337336063385,
        "codebertscore_s_f3-40": 0.8499661684036255,
        "codebertscore_s_f1-28": 0.891915500164032,
        "codebertscore_s_f3-28": 0.9264874458312988,
        "codebertscore_s_f1-167": 0.8070681095123291,
        "codebertscore_s_f3-167": 0.8721463680267334,
        "codebertscore_s_f1-23": 0.9547644853591919,
        "codebertscore_s_f3-23": 0.961288332939148,
        "codebertscore_s_f1-186": 0.8694064617156982,
        "codebertscore_s_f3-186": 0.904778242111206,
        "codebertscore_s_f1-127": 0.6293808817863464,
        "codebertscore_s_f3-127": 0.6417885422706604,
        "codebertscore_s_f1-9": 0.8413012623786926,
        "codebertscore_s_f3-9": 0.8532954454421997,
        "codebertscore_s_f1-7": 0.731176495552063,
        "codebertscore_s_f3-7": 0.7361970543861389,
        "codebertscore_s_f1-24": 0.827106237411499,
        "codebertscore_s_f3-24": 0.8355612754821777,
        "codebertscore_s_f1-64": 0.7875444889068604,
        "codebertscore_s_f3-64": 0.8263748288154602,
        "codebertscore_s_f1-68": 0.88863605260849,
        "codebertscore_s_f3-68": 0.9066264033317566,
        "codebertscore_s_f1-154": 0.8589037656784058,
        "codebertscore_s_f3-154": 0.8861152529716492,
        "codebertscore_s_f1-190": 0.8250592350959778,
        "codebertscore_s_f3-190": 0.8394104242324829,
        "codebertscore_s_f1-172": 0.8697866201400757,
        "codebertscore_s_f3-172": 0.9043366312980652,
        "codebertscore_s_f1-56": 0.9042861461639404,
        "codebertscore_s_f3-56": 0.9177221059799194,
        "gpt35_nsnr-30": 4,
        "raw_gpt35_nsnr-30": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-81": 4,
        "raw_gpt35_nsnr-81": "4",
        "gpt35_nsnr-71": 4,
        "raw_gpt35_nsnr-71": "4",
        "gpt35_nsnr-66": 4,
        "raw_gpt35_nsnr-66": "4",
        "gpt35_nsnr-40": 4,
        "raw_gpt35_nsnr-40": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-167": 4,
        "raw_gpt35_nsnr-167": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-186": 4,
        "raw_gpt35_nsnr-186": "4",
        "gpt35_nsnr-127": 2,
        "raw_gpt35_nsnr-127": "2",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-7": 0,
        "raw_gpt35_nsnr-7": "3 - The code correctly converts the ArrayList of integers to an array of integers and then calls a method to find the minimum sum of any non-empty sub-array. However, the implementation of the actual method \"minSubArraySum\" is missing from the code snippet, so it cannot be evaluated for correctness.",
        "gpt35_nsnr-24": 4,
        "raw_gpt35_nsnr-24": "4",
        "gpt35_nsnr-64": 4,
        "raw_gpt35_nsnr-64": "4",
        "gpt35_nsnr-68": 4,
        "raw_gpt35_nsnr-68": "4",
        "gpt35_nsnr-154": 4,
        "raw_gpt35_nsnr-154": "4",
        "gpt35_nsnr-190": 4,
        "raw_gpt35_nsnr-190": "4",
        "gpt35_nsnr-172": 4,
        "raw_gpt35_nsnr-172": "4",
        "gpt35_nsnr-56": 4,
        "raw_gpt35_nsnr-56": "4",
        "gpt35_nswr-30": 4,
        "raw_gpt35_nswr-30": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-81": 4,
        "raw_gpt35_nswr-81": "4",
        "gpt35_nswr-71": 3,
        "raw_gpt35_nswr-71": "3",
        "gpt35_nswr-66": 3,
        "raw_gpt35_nswr-66": "3",
        "gpt35_nswr-40": 4,
        "raw_gpt35_nswr-40": "4",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-167": 4,
        "raw_gpt35_nswr-167": "4",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-186": 2,
        "raw_gpt35_nswr-186": "2",
        "gpt35_nswr-127": 2,
        "raw_gpt35_nswr-127": "2",
        "gpt35_nswr-9": 4,
        "raw_gpt35_nswr-9": "4",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-24": 4,
        "raw_gpt35_nswr-24": "4",
        "gpt35_nswr-64": 2,
        "raw_gpt35_nswr-64": "2",
        "gpt35_nswr-68": 4,
        "raw_gpt35_nswr-68": "4",
        "gpt35_nswr-154": 4,
        "raw_gpt35_nswr-154": "4",
        "gpt35_nswr-190": 3,
        "raw_gpt35_nswr-190": "3",
        "gpt35_nswr-172": 3,
        "raw_gpt35_nswr-172": "3",
        "gpt35_nswr-56": 4,
        "raw_gpt35_nswr-56": "4"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given list of integers, return list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    // strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    // strange_sort_list([]) == []\n    public static ArrayList<Integer> strangeSortList(ArrayList<Integer> lst) {\n",
        "snippet": [
            "        List<Integer> res = new ArrayList<>();\n        boolean _switch = true;\n        List<Integer> l = new ArrayList<>(lst);\n        while (l.size() != 0) {\n            if (_switch) {\n                res.add(Collections.min(l));\n            } else {\n                res.add(Collections.max(l));\n            }\n            l.remove(res.get(res.size() - 1));\n            _switch = !_switch;\n        }\n        return res;\n    }\n}"
        ],
        "simplified": "Given list of integers, return list in strange order. Strange sorting, is when you start with the minimum value, then maximum of the remaining integers, then minimum and so on.",
        "task_id": "70",
        "170": "if (lst.size() <= 1) {\n            return lst;\n        }\n        ArrayList<Integer> ans = new ArrayList<Integer>();\n        Collections.sort(lst);\n        int n = lst.size();\n        if (n % 2 == 0) {\n            for (int i = 0; i < n / 2; i++) {\n                ans.add(lst.get(i));\n                ans.add(lst.get(n - i - 1));\n            }\n        } else {\n            ans.add(lst.get(0));\n            for (int i = 1; i < n / 2 + 1; i++) {\n                ans.add(lst.get(n - i));\n                ans.add(lst.get(i));\n            }\n        }\n        return ans;",
        "grade-170": {
            "execution": 1
        },
        "28": "if (lst.size() == 0) return lst;\n        ArrayList<Integer> res = new ArrayList<Integer>();\n        boolean isMin = true;\n        while (!lst.isEmpty()) {\n            int min = Integer.MAX_VALUE;\n            int max = Integer.MIN_VALUE;\n            int minPos = -1;\n            int maxPos = -1;\n            for (int i = 0; i < lst.size(); i++) {\n                if (lst.get(i) < min) {\n                    min = lst.get(i);\n                    minPos = i;\n                }\n                if (lst.get(i) > max) {\n                    max = lst.get(i);\n                    maxPos = i;\n                }\n            }\n            if (isMin) {\n                res.add(min);\n                lst.remove(minPos);\n            } else {\n                res.add(max);\n                lst.remove(maxPos);\n            }\n            isMin = !isMin;\n        }\n        return res;",
        "grade-28": {
            "execution": 1
        },
        "6": "// Remove duplicates in list.\n        ArrayList<Integer> tmp = new ArrayList<Integer>();\n        for (int num : lst) {\n            if (!tmp.contains(num)) {\n                tmp.add(num);\n            }\n        }\n        lst = tmp;\n        // Sort list in ascending order.\n        lst.sort(null);\n        // Prepare list for sorting in strange order.\n        ArrayList<Integer> sorted = new ArrayList<Integer>();\n        // Check if list is odd or even in size.\n        int size = lst.size();\n        boolean odd = size % 2 == 1;\n        if (odd) {\n            // Loop half the size of list.\n            for (int i = 0; i < size / 2; i++) {\n                // Add minimum and maximum of list.\n                sorted.add(lst.get(i));\n                sorted.add(lst.get(size - i - 1));\n            }\n            // Remove duplicates from list.\n            for (int i = sorted.size() - 1; i >= 0; i--) {\n                if (sorted.get(i) == sorted.get(sorted.size() - 1)) {\n                    sorted.remove(i);\n                }\n            }\n            // Add minimum of list.\n            sorted.add(lst.get(size / 2));\n        } else {\n            // Loop half the size of list.\n            for (int i = 0; i < size / 2; i++) {\n                // Add minimum and maximum of list.\n                sorted.add(lst.get(i));\n                sorted.add(lst.get(size - i - 1));\n            }\n        }\n        return sorted;",
        "grade-6": {
            "execution": 0
        },
        "198": "Collections.sort(lst);\n        if (lst.size() % 2 == 0) {\n            return strangeSortEven(lst);\n        } else {\n            return strangeSortOdd(lst);\n        }",
        "grade-198": {
            "execution": 0
        },
        "71": "ArrayList<Integer> lst1 = new ArrayList<Integer>();\n        ArrayList<Integer> lst2 = new ArrayList<Integer>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                lst1.add(lst.get(i));\n            } else {\n                lst2.add(lst.get(i));\n            }\n        }\n        Collections.sort(lst1);\n        Collections.sort(lst2);\n        Collections.reverse(lst2);\n        lst.clear();\n        for (int i = 0; i < lst1.size(); i++) {\n            lst.add(lst1.get(i));\n        }\n        for (int i = 0; i < lst2.size(); i++) {\n            lst.add(lst2.get(i));\n        }\n        return lst;",
        "grade-71": {
            "execution": 0
        },
        "63": "if (lst.size() < 2) {\n            return lst;\n        }\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        Collections.sort(lst);\n        int mid = lst.size() / 2;\n        for (int i = 0; i < mid; i++) {\n            result.add(lst.get(i));\n            result.add(lst.get(lst.size() - 1 - i));\n        }\n        if (lst.size() % 2 == 1) {\n            result.add(lst.get(mid));\n        }\n        return result;",
        "grade-63": {
            "execution": 1
        },
        "58": "if (lst.size() == 0) {\n            return lst;\n        }\n        Collections.sort(lst);\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        int pivot = 0;\n        int direction = 1;\n        while (result.size() < lst.size()) {\n            result.add(lst.get(pivot));\n            pivot += direction;\n            direction *= -1;\n        }\n        return result;",
        "grade-58": {
            "execution": 0
        },
        "35": "if (lst.size() == 0) return lst;\n        Collections.sort(lst);\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        int i = 0;\n        int j = lst.size() - 1;\n        boolean go_small = true;\n        while (i < j) {\n            if (go_small) {\n                result.add(lst.get(i));\n                i++;\n            } else {\n                result.add(lst.get(j));\n                j--;\n            }\n            go_small = !go_small;\n        }\n        if (i == j) {\n            result.add(lst.get(i));\n        }\n        return result;",
        "grade-35": {
            "execution": 1
        },
        "196": "// List to return.\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        // If list is empty, return empty list.\n        if (lst.size() == 0) {\n            return result;\n        }\n        // Sort the list.\n        Collections.sort(lst);\n        // Iterate while there are elements in list.\n        while (lst.size() > 0) {\n            // Get minimum value and add it to result.\n            result.add(lst.get(0));\n            // Remove the element from list.\n            lst.remove(0);\n            // If there is still something left in list,\n            // then get maximum value and add it to result.\n            if (lst.size() > 0) {\n                result.add(lst.get(lst.size() - 1));\n                // Remove the element from list.\n                lst.remove(lst.size() - 1);\n            }\n        }\n        // Return the result.\n        return result;",
        "grade-196": {
            "execution": 1
        },
        "26": "// Type your solution here\n        return lst;",
        "grade-26": {
            "execution": 0
        },
        "180": "ArrayList<Integer> list_to_sort = new ArrayList<Integer>(lst);\n        ArrayList<Integer> sorted_list = new ArrayList<Integer>();\n        int max = Collections.max(list_to_sort);\n        int min = Collections.min(list_to_sort);\n        boolean starting_with_min = true;\n        while(list_to_sort.size() > 0) {\n            if(starting_with_min) {\n                sorted_list.add(min);\n                list_to_sort.remove(list_to_sort.indexOf(min));\n                starting_with_min = false;\n            } else {\n                sorted_list.add(max);\n                list_to_sort.remove(list_to_sort.indexOf(max));\n                starting_with_min = true;\n            }\n            if(list_to_sort.size() > 0) {\n                max = Collections.max(list_to_sort);\n                min = Collections.min(list_to_sort);\n            }\n        }\n        return sorted_list;",
        "grade-180": {
            "execution": 0
        },
        "145": "if (lst.size() == 0) return lst;\n        ArrayList<Integer> answer = new ArrayList<Integer>();\n        ArrayList<Integer> lst1 = new ArrayList<Integer>(lst);\n        boolean is_odd = true;\n        while (!lst1.isEmpty()) {\n            Integer max = get_max(lst1);\n            Integer min = get_min(lst1);\n            if (is_odd) {\n                answer.add(min);\n                lst1.remove(min);\n            } else {\n                answer.add(max);\n                lst1.remove(max);\n            }\n            is_odd = !is_odd;\n        }\n        return answer;",
        "grade-145": {
            "execution": 0
        },
        "22": "Collections.sort(lst);\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        boolean is_first = true;\n        while (!lst.isEmpty()) {\n            if (is_first) {\n                result.add(lst.get(0));\n                lst.remove(0);\n                is_first = false;\n            } else {\n                result.add(lst.get(lst.size() - 1));\n                lst.remove(lst.size() - 1);\n                is_first = true;\n            }\n        }\n        return result;",
        "grade-22": {
            "execution": 1
        },
        "157": "ArrayList<Integer> odd = new ArrayList<Integer>();\n        ArrayList<Integer> even = new ArrayList<Integer>();\n        lst.sort(Comparator.naturalOrder());\n        if (lst.size() % 2 == 0) {\n            for (int i = 0; i < lst.size(); i++) {\n                if (i % 2 == 0)\n                    odd.add(lst.get(i));\n                else\n                    even.add(lst.get(i));\n            }\n        } else {\n            for (int i = 0; i < lst.size(); i++) {\n                if (i % 2 == 0)\n                    even.add(lst.get(i));\n                else\n                    odd.add(lst.get(i));\n            }\n        }\n        Collections.reverse(odd);\n        odd.addAll(even);\n        return odd;",
        "grade-157": {
            "execution": 0
        },
        "113": "if (lst.size() <= 1) return lst;\n        ArrayList<Integer> new_lst = new ArrayList<Integer>();\n        int min = Collections.min(lst);\n        lst.remove(lst.indexOf(min));\n        new_lst.add(min);\n        while (lst.size() > 0) {\n            if (lst.size() > 1) {\n                int max = Collections.max(lst);\n                lst.remove(lst.indexOf(max));\n                new_lst.add(max);\n            }\n            if (lst.size() > 0) {\n                int min2 = Collections.min(lst);\n                lst.remove(lst.indexOf(min2));\n                new_lst.add(min2);\n            }\n        }\n        return new_lst;",
        "grade-113": {
            "execution": 1
        },
        "8": "int min = Integer.MAX_VALUE;\n        int max = Integer.MIN_VALUE;\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        ArrayList<Integer> lstCopy = new ArrayList<Integer>(lst);\n        int lstSize = lst.size();\n        while (lstCopy.size() > 0) {\n            for (int i = 0; i < lstCopy.size(); i++) {\n                if (lstCopy.get(i) > max) {\n                    max = lstCopy.get(i);\n                }\n                if (lstCopy.get(i) < min) {\n                    min = lstCopy.get(i);\n                }\n            }\n            result.add(min);\n            result.add(max);\n            lstCopy.remove(new Integer(min));\n            lstCopy.remove(new Integer(max));\n            max = Integer.MIN_VALUE;\n            min = Integer.MAX_VALUE;\n        }\n        return result;",
        "grade-8": {
            "execution": 0
        },
        "7": "ArrayList<Integer> result = new ArrayList<Integer>();\n        if (lst.size() == 0) return result;\n        boolean is_min = true;\n        int min_value = lst.get(0);\n        int max_value = lst.get(0);\n        int min_value_index = 0;\n        int max_value_index = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int current_value = lst.get(i);\n            if (is_min) {\n                if (current_value < min_value) {\n                    min_value = current_value;\n                    min_value_index = i;\n                }\n            } else {\n                if (current_value > max_value) {\n                    max_value = current_value;\n                    max_value_index = i;\n                }\n            }\n        }\n        if (is_min) {\n            result.add(min_value);\n            lst.remove(min_value_index);\n        } else {\n            result.add(max_value);\n            lst.remove(max_value_index);\n        }\n        is_min = !is_min;\n        result.addAll(strangeSortList(lst));\n        return result;",
        "grade-7": {
            "execution": 0
        },
        "23": "if (lst.size() == 0) {\n            return lst;\n        }\n        int min = Collections.min(lst);\n        int max = Collections.max(lst);\n        ArrayList<Integer> res = new ArrayList<Integer>();\n        res.add(min);\n        lst.remove(new Integer(min));\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                res.add(Collections.max(lst));\n                lst.remove(new Integer(Collections.max(lst)));\n            } else {\n                res.add(Collections.min(lst));\n                lst.remove(new Integer(Collections.min(lst)));\n            }\n        }\n        return res;",
        "grade-23": {
            "execution": 0
        },
        "56": "ArrayList<Integer> ans = new ArrayList<Integer>();\n        Collections.sort(lst);\n        while (lst.size() > 0) {\n            if (lst.size() == 1) {\n                ans.add(lst.get(0));\n                lst.remove(0);\n            } else {\n                ans.add(lst.get(0));\n                ans.add(lst.get(lst.size() - 1));\n                lst.remove(0);\n                lst.remove(lst.size() - 1);\n            }\n        }\n        return ans;",
        "grade-56": {
            "execution": 1
        },
        "60": "ArrayList<Integer> new_lst = new ArrayList<Integer>();\n        ArrayList<Integer> copy_lst = new ArrayList<Integer>(lst);\n        Collections.sort(copy_lst);\n        int max = 0;\n        int min = 0;\n        int curr_max = Collections.max(copy_lst);\n        int curr_min = Collections.min(copy_lst);\n        boolean first = true;\n        for (int i = 0; i < lst.size(); i++) {\n            if (first) {\n                first = false;\n                new_lst.add(curr_min);\n                copy_lst.remove(copy_lst.indexOf(curr_min));\n                new_lst.add(curr_max);\n                copy_lst.remove(copy_lst.indexOf(curr_max));\n            } else {\n                new_lst.add(curr_min);\n                copy_lst.remove(copy_lst.indexOf(curr_min));\n                new_lst.add(curr_max);\n                copy_lst.remove(copy_lst.indexOf(curr_max));\n            }\n            curr_max = Collections.max(copy_lst);\n            curr_min = Collections.min(copy_lst);\n        }\n        return new_lst;",
        "grade-60": {
            "execution": 0
        },
        "bleu-170": 0.20680531209916506,
        "bleu-28": 0.24331616632326303,
        "bleu-6": 0.1229795752643959,
        "bleu-198": 0.06137909597583606,
        "bleu-71": 0.20646300632654216,
        "bleu-63": 0.2579024966333518,
        "bleu-58": 0.25263633266991303,
        "bleu-35": 0.27769963278822923,
        "bleu-196": 0.17345525201017364,
        "bleu-26": 1.0479741556615998e-06,
        "bleu-180": 0.2674051118157943,
        "bleu-145": 0.2834758132651754,
        "bleu-22": 0.3630336025884361,
        "bleu-157": 0.18807288748119746,
        "bleu-113": 0.2338079556049695,
        "bleu-8": 0.19398611664715845,
        "bleu-7": 0.17150302588325303,
        "bleu-23": 0.33836385136949526,
        "bleu-56": 0.33763954559013926,
        "bleu-60": 0.19756266162925779,
        "codebleu-170": 0.6713344250911678,
        "codebleu-28": 0.6804609986909151,
        "codebleu-6": 0.6781441872586446,
        "codebleu-198": 0.20514786503078264,
        "codebleu-71": 0.6695985171284649,
        "codebleu-63": 0.6537283564216032,
        "codebleu-58": 0.5565305424735728,
        "codebleu-35": 0.6772124130331032,
        "codebleu-196": 0.6318225867006344,
        "codebleu-26": 0.030306087905107536,
        "codebleu-180": 0.7196868509264971,
        "codebleu-145": 0.6343317986874033,
        "codebleu-22": 0.7035069374421281,
        "codebleu-157": 0.6697599489759989,
        "codebleu-113": 0.6469668769710122,
        "codebleu-8": 0.6635481519557912,
        "codebleu-7": 0.6637989199565513,
        "codebleu-23": 0.6782258702378843,
        "codebleu-56": 0.6582925438145393,
        "codebleu-60": 0.6595665662513819,
        "chrf-170": 0.4007265530460517,
        "chrf-28": 0.46110765972732604,
        "chrf-6": 0.33446103238805397,
        "chrf-198": 0.20628798865238018,
        "chrf-71": 0.43787145270796723,
        "chrf-63": 0.4243482140114792,
        "chrf-58": 0.43365808231728026,
        "chrf-35": 0.48843672430551266,
        "chrf-196": 0.39659221107209336,
        "chrf-26": 0.04551000455331807,
        "chrf-180": 0.46545175538395533,
        "chrf-145": 0.44468906381882223,
        "chrf-22": 0.5126606428281595,
        "chrf-157": 0.3914334045635911,
        "chrf-113": 0.45578902342382727,
        "chrf-8": 0.4001070647091383,
        "chrf-7": 0.36978224036513807,
        "chrf-23": 0.5371668757189473,
        "chrf-56": 0.46981365949779325,
        "chrf-60": 0.4108432388909453,
        "rougel-170": 0.4372759856630824,
        "rougel-28": 0.4207119741100324,
        "rougel-6": 0.32537960954446854,
        "rougel-198": 0.3087248322147651,
        "rougel-71": 0.49491525423728816,
        "rougel-63": 0.4576271186440678,
        "rougel-58": 0.42211055276381904,
        "rougel-35": 0.4836065573770492,
        "rougel-196": 0.38977635782747605,
        "rougel-26": 0.034188034188034185,
        "rougel-180": 0.5447761194029851,
        "rougel-145": 0.5579399141630902,
        "rougel-22": 0.5779816513761468,
        "rougel-157": 0.47651006711409394,
        "rougel-113": 0.4419475655430712,
        "rougel-8": 0.4635761589403973,
        "rougel-7": 0.396039603960396,
        "rougel-23": 0.5,
        "rougel-56": 0.5800865800865801,
        "rougel-60": 0.45911949685534587,
        "meteor-170": 0.4184930937470342,
        "meteor-28": 0.48146606211303655,
        "meteor-6": 0.4161244731981591,
        "meteor-198": 0.16575336946229624,
        "meteor-71": 0.4233169036956169,
        "meteor-63": 0.42098337950138504,
        "meteor-58": 0.3828296603895417,
        "meteor-35": 0.4634822496130455,
        "meteor-196": 0.423205678417756,
        "meteor-26": 0.01529051987767584,
        "meteor-180": 0.48083369163880757,
        "meteor-145": 0.4992283551400361,
        "meteor-22": 0.5267866689215465,
        "meteor-157": 0.4019972129531128,
        "meteor-113": 0.47040782493368694,
        "meteor-8": 0.42077555007137224,
        "meteor-7": 0.4488477650808269,
        "meteor-23": 0.5013804278960964,
        "meteor-56": 0.5056540052365954,
        "meteor-60": 0.4518275868125692,
        "ruby-170": 0.32163742690058483,
        "ruby-28": 0.2885572139303483,
        "ruby-6": 0.20113314447592068,
        "ruby-198": 0.19444444444444442,
        "ruby-71": 0.3582887700534759,
        "ruby-63": 0.3203125,
        "ruby-58": 0.2777777777777778,
        "ruby-35": 0.3602941176470589,
        "ruby-196": 0.2731707317073171,
        "ruby-26": 0.01851851851851849,
        "ruby-180": 0.39375000000000004,
        "ruby-145": 0.352,
        "ruby-22": 0.3545454545454545,
        "ruby-157": 0.3315789473684211,
        "ruby-113": 0.3144654088050315,
        "ruby-8": 0.31958762886597936,
        "ruby-7": 0.2564102564102564,
        "ruby-23": 0.3597560975609756,
        "ruby-56": 0.43089430894308944,
        "ruby-60": 0.3142857142857143,
        "codebertscore_f1-170": 0.7843641042709351,
        "codebertscore_f3-170": 0.7970743775367737,
        "codebertscore_f1-28": 0.7826542258262634,
        "codebertscore_f3-28": 0.805741548538208,
        "codebertscore_f1-6": 0.7343457341194153,
        "codebertscore_f3-6": 0.7715994715690613,
        "codebertscore_f1-198": 0.7202184796333313,
        "codebertscore_f3-198": 0.6999233961105347,
        "codebertscore_f1-71": 0.7729542851448059,
        "codebertscore_f3-71": 0.7963115572929382,
        "codebertscore_f1-63": 0.8026466369628906,
        "codebertscore_f3-63": 0.8037133812904358,
        "codebertscore_f1-58": 0.7947385311126709,
        "codebertscore_f3-58": 0.7965136170387268,
        "codebertscore_f1-35": 0.8057721853256226,
        "codebertscore_f3-35": 0.8229460716247559,
        "codebertscore_f1-196": 0.7588223814964294,
        "codebertscore_f3-196": 0.7952138781547546,
        "codebertscore_f1-26": 0.6031009554862976,
        "codebertscore_f3-26": 0.5768831968307495,
        "codebertscore_f1-180": 0.7799627184867859,
        "codebertscore_f3-180": 0.8099560737609863,
        "codebertscore_f1-145": 0.8175474405288696,
        "codebertscore_f3-145": 0.8191336393356323,
        "codebertscore_f1-22": 0.8303722739219666,
        "codebertscore_f3-22": 0.8399817943572998,
        "codebertscore_f1-157": 0.7695556282997131,
        "codebertscore_f3-157": 0.78383469581604,
        "codebertscore_f1-113": 0.787796676158905,
        "codebertscore_f3-113": 0.8025227785110474,
        "codebertscore_f1-8": 0.773065447807312,
        "codebertscore_f3-8": 0.781842827796936,
        "codebertscore_f1-7": 0.7641780972480774,
        "codebertscore_f3-7": 0.7919289469718933,
        "codebertscore_f1-23": 0.8063700795173645,
        "codebertscore_f3-23": 0.8114608526229858,
        "codebertscore_f1-56": 0.8335651755332947,
        "codebertscore_f3-56": 0.8299380540847778,
        "codebertscore_f1-60": 0.774177610874176,
        "codebertscore_f3-60": 0.8085494637489319,
        "codebertscore_s_f1-170": 0.8007347583770752,
        "codebertscore_s_f3-170": 0.8106723427772522,
        "codebertscore_s_f1-28": 0.8026584982872009,
        "codebertscore_s_f3-28": 0.8223556876182556,
        "codebertscore_s_f1-6": 0.769589900970459,
        "codebertscore_s_f3-6": 0.8057887554168701,
        "codebertscore_s_f1-198": 0.7460640072822571,
        "codebertscore_s_f3-198": 0.7224557399749756,
        "codebertscore_s_f1-71": 0.7956132888793945,
        "codebertscore_s_f3-71": 0.8064203262329102,
        "codebertscore_s_f1-63": 0.8054794073104858,
        "codebertscore_s_f3-63": 0.8070092797279358,
        "codebertscore_s_f1-58": 0.8041538000106812,
        "codebertscore_s_f3-58": 0.8046087026596069,
        "codebertscore_s_f1-35": 0.8218368887901306,
        "codebertscore_s_f3-35": 0.8353012800216675,
        "codebertscore_s_f1-196": 0.7864600419998169,
        "codebertscore_s_f3-196": 0.8166620135307312,
        "codebertscore_s_f1-26": 0.6441683769226074,
        "codebertscore_s_f3-26": 0.626552402973175,
        "codebertscore_s_f1-180": 0.7986567616462708,
        "codebertscore_s_f3-180": 0.8232170343399048,
        "codebertscore_s_f1-145": 0.8233984708786011,
        "codebertscore_s_f3-145": 0.825764536857605,
        "codebertscore_s_f1-22": 0.8408750295639038,
        "codebertscore_s_f3-22": 0.8539437055587769,
        "codebertscore_s_f1-157": 0.7901639342308044,
        "codebertscore_s_f3-157": 0.7966086268424988,
        "codebertscore_s_f1-113": 0.8130751252174377,
        "codebertscore_s_f3-113": 0.8222956657409668,
        "codebertscore_s_f1-8": 0.7946285009384155,
        "codebertscore_s_f3-8": 0.7993832230567932,
        "codebertscore_s_f1-7": 0.7902277112007141,
        "codebertscore_s_f3-7": 0.8129174709320068,
        "codebertscore_s_f1-23": 0.8225827813148499,
        "codebertscore_s_f3-23": 0.825165331363678,
        "codebertscore_s_f1-56": 0.8426685333251953,
        "codebertscore_s_f3-56": 0.84213787317276,
        "codebertscore_s_f1-60": 0.7935154438018799,
        "codebertscore_s_f3-60": 0.8206533193588257,
        "gpt35_nsnr-170": 3,
        "raw_gpt35_nsnr-170": "3",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-198": 3,
        "raw_gpt35_nsnr-198": "3",
        "gpt35_nsnr-71": 3,
        "raw_gpt35_nsnr-71": "3",
        "gpt35_nsnr-63": 3,
        "raw_gpt35_nsnr-63": "3",
        "gpt35_nsnr-58": 4,
        "raw_gpt35_nsnr-58": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-196": 4,
        "raw_gpt35_nsnr-196": "4",
        "gpt35_nsnr-26": 3,
        "raw_gpt35_nsnr-26": "3",
        "gpt35_nsnr-180": 4,
        "raw_gpt35_nsnr-180": "4",
        "gpt35_nsnr-145": 4,
        "raw_gpt35_nsnr-145": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-157": 3,
        "raw_gpt35_nsnr-157": "3",
        "gpt35_nsnr-113": 4,
        "raw_gpt35_nsnr-113": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-56": 4,
        "raw_gpt35_nsnr-56": "4",
        "gpt35_nsnr-60": 4,
        "raw_gpt35_nsnr-60": "4",
        "gpt35_nswr-170": 2,
        "raw_gpt35_nswr-170": "2",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-198": 2,
        "raw_gpt35_nswr-198": "2",
        "gpt35_nswr-71": 2,
        "raw_gpt35_nswr-71": "2",
        "gpt35_nswr-63": 3,
        "raw_gpt35_nswr-63": "3",
        "gpt35_nswr-58": 3,
        "raw_gpt35_nswr-58": "3",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-196": 4,
        "raw_gpt35_nswr-196": "4",
        "gpt35_nswr-26": 2,
        "raw_gpt35_nswr-26": "2",
        "gpt35_nswr-180": 4,
        "raw_gpt35_nswr-180": "4",
        "gpt35_nswr-145": 4,
        "raw_gpt35_nswr-145": "4",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-157": 2,
        "raw_gpt35_nswr-157": "2",
        "gpt35_nswr-113": 3,
        "raw_gpt35_nswr-113": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 2,
        "raw_gpt35_nswr-7": "2",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-56": 3,
        "raw_gpt35_nswr-56": "3",
        "gpt35_nswr-60": 3,
        "raw_gpt35_nswr-60": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given a positive integer n. You have to create an integer array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example :\n    // Input: n = 5\n    // Output: 1\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static int getMaxTriples(int n) {\n",
        "snippet": [
            "        List<Integer> A = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            A.add(i * i - i + 1);\n        }\n        int count = 0;\n        for (int i = 0; i < A.size(); i++) {\n            for (int j = i + 1; j < A.size(); j++) {\n                for (int k = j + 1; k < A.size(); k++) {\n                    if ((A.get(i) + A.get(j) + A.get(k)) % 3 == 0) {\n                        count += 1;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}"
        ],
        "simplified": "You are given a positive integer n. You have to create an integer array a of length n. For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1. Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiple of 3.",
        "task_id": "147",
        "192": "// Idea: we can construct all triples (a[i], a[j], a[k]) with\n        // a[i] = i * i - i + 1\n        // a[j] = j * j - j + 1\n        // a[k] = k * k - k + 1\n        // \n        // and then test each triple to see if it satisfies the problem condition.\n        // For all i, j, k such that 1 \u2264 i, j, k \u2264 n, we have the following constraints\n        // on a[i], a[j], a[k] :\n        // i < j < k\n        // 1 \u2264 a[i] \u2264 a[j] \u2264 a[k] \u2264 n\u00b2 - n + 1\n        // \n        // Using the above constraints, we can iterate over all possible triples in O(n\u00b3) time\n        // and check whether they satisfy the problem condition.\n        // \n        // However, the following optimisations can be made:\n        // - Instead of testing each triple, we can compute the number of triples \n        //   that satisfy the problem condition.\n        // - The problem condition is a[i] + a[j] + a[k] mod 3 = 0. \n        //   We can construct a precomputed table of the remainders of each integer.\n        //   We can then use this precomputed table to test triples in O(1) time.\n        // \n        // Time complexity : O(n\u00b2)\n\n        // Build a table of remainders for each integer.\n        int[] rem = new int[n + 1];\n        for (int i = 1; i <= n; i++) {\n            rem[i] = i * i - i + 1 % 3;\n        }\n\n        // Iterate over triples to see which ones satisfy the problem condition.\n        int maxTriples = 0;\n        for (int i = 1; i <= n; i++) {\n            for (int j = i + 1; j <= n; j++) {\n                for (int k = j + 1; k <= n; k++) {\n                    if ((rem[i] + rem[j] + rem[k]) % 3 == 0) {\n                        max",
        "grade-192": {
            "execution": 0
        },
        "30": "if (n < 3) return 0;\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for (int i = 0; i < n - 2; i++) {\n            for (int j = i + 1; j < n - 1; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) count++;\n                }\n            }\n        }\n        return count;",
        "grade-30": {
            "execution": 0
        },
        "6": "if (n <= 3) return 0;\n        // Since a[i] = i * i - i + 1, and a[i] is an integer, we need i^2 >= 3i + 2.\n        // That is i >= (3 + sqrt(9 - 8)) / 2 ~= 1.9.\n        // As n >= 4, we can safely assume i >= 2.\n        int count = 0;\n        for (int i = 2; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;",
        "grade-6": {
            "execution": 0
        },
        "80": "int sum = 0;\n        for (int i = 1; i < n - 1; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k <= n; k++) {\n                    int x = k * k - k + 1;\n                    int y = j * j - j + 1;\n                    int z = i * i - i + 1;\n                    int triples = x + y + z;\n                    if (triples % 3 == 0) {\n                        sum++;\n                    }\n                }\n            }\n        }\n        return sum;",
        "grade-80": {
            "execution": 1
        },
        "71": "// Write your code here\n        // Return the number of triples.\n        int[] a = new int[n];\n        List<Triplet<Integer, Integer, Integer>> triplets = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        Triplet<Integer, Integer, Integer> triplet = new Triplet<>(a[i], a[j], a[k]);\n                        triplets.add(triplet);\n                    }\n                }\n            }\n        }\n        return triplets.size();",
        "grade-71": {
            "execution": 0
        },
        "65": "if (n < 3) return 0;\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            int a = i * i - i + 1;\n            for (int j = i + 1; j < n; j++) {\n                int b = j * j - j + 1;\n                for (int k = j + 1; k < n; k++) {\n                    int c = k * k - k + 1;\n                    if ((a + b + c) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;",
        "grade-65": {
            "execution": 0
        },
        "38": "if (n <= 2) return 0;\n        List<Integer> nums = new ArrayList<>();\n        for (int i = 1; i <= n; i++) nums.add(i * i - i + 1);\n        Collections.sort(nums);\n        int max = 0;\n        int total = 0;\n        for (int i = 0; i < nums.size() - 2; i++) {\n            int a = nums.get(i);\n            int lo = i + 1;\n            int hi = nums.size() - 1;\n            while (lo < hi) {\n                int b = nums.get(lo);\n                int c = nums.get(hi);\n                int sum = a + b + c;\n                if (sum % 3 == 0) {\n                    max = Math.max(max, sum);\n                    total++;\n                    lo++;\n                    hi--;\n                } else if (sum % 3 == 1) lo++;\n                else hi--;\n            }\n        }\n        return total;",
        "grade-38": {
            "execution": 0
        },
        "28": "if (n < 3) {\n            return 0;\n        }\n        long[][] dp = new long[n + 1][n + 1];\n        long[] array = new long[n + 1];\n        for (int i = 1; i <= n; i++) {\n            array[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            int tmp = 0;\n            for (int j = 1; j <= n; j++) {\n                if (i == j) {\n                    continue;\n                }\n                if ((array[i] + array[j]) % 3 == 0) {\n                    dp[i][j] = 1;\n                    tmp += 1;\n                }\n            }\n            for (int j = 1; j <= n; j++) {\n                if (i == j) {\n                    continue;\n                }\n                for (int k = 1; k <= n; k++) {\n                    if (i == k || j == k) {\n                        continue;\n                    }\n                    if ((array[i] + array[j] + array[k]) % 3 == 0) {\n                        dp[i][j] += dp[j][k];\n                    }\n                }\n                count += tmp * dp[i][j];\n            }\n        }\n        return count;",
        "grade-28": {
            "execution": 0
        },
        "162": "int count = 0;\n        // a[i] is strictly increasing, so all pairs i and j with i < j that a[i] + a[j] % 3 == 0\n        // will be counted.\n        // Given any i, the smallest j for which a[i] + a[j] is a multiple of 3 is j = i + i % 3 + 1\n        // The largest j for which a[i] + a[j] is a multiple of 3 is given by j = n - (n - 1 - i) % 3.\n        // For example, consider i = 2 and n = 5:\n        // a[2] = 7, a[2] + a[3] = 10, a[2] + a[4] = 18. The only j for which a[2] + a[j] is a multiple of 3 is 4.\n        // The largest j such that i < j and a[i] + a[j] is a multiple of 3 is 4.\n        // This means that 7 (a[2]) + the values of a[i] with i < 4 form 4 pairs that are multiples of 3.\n        // The number of pairs that 7 forms with values of a[i] with i < 4 is 3 (i.e. when i = 3, 4, 5).\n        // Thus the number of pairs that are multiples of 3 is (4 - 2) + (3 - 2) = 4.\n        // The count is incremented by 4, and the loop continues with i = 3.\n        // The final count is 5.\n        // Since i is incremented by one each time, the smallest j is equal to i + i % 3 + 1.\n        // Since j is decremented by one each time, the largest j is equal to n - (n - 1 - i) % 3.\n        for (int i = 1; i < n; i++) {\n            int j = i + i % 3 + 1;\n            for (; j <= n - (n - 1 - i) % 3; j++) {\n                count++;\n            }\n        }\n        return count;",
        "grade-162": {
            "execution": 0
        },
        "23": "int []a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int cnt = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        cnt++;\n                    }\n                }\n            }\n        }\n        return cnt;",
        "grade-23": {
            "execution": 0
        },
        "175": "int t = 0;\n        for (int i = 1; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n                        t++;\n                    }\n                }\n            }\n        }\n        return t;",
        "grade-175": {
            "execution": 0
        },
        "125": "int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int res = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        res++;\n                    }\n                }\n            }\n        }\n        return res;",
        "grade-125": {
            "execution": 0
        },
        "8": "int result = 0;\n        List<Integer> a = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            a.add(i * i - i + 1);\n        }\n        // a = [1, 3, 7, 13, 21]\n        // The only valid triple is (1, 7, 13).\n        for (int i = 0; i < a.size(); i++) {\n            for (int j = i + 1; j < a.size(); j++) {\n                for (int k = j + 1; k < a.size(); k++) {\n                    if ((a.get(i) + a.get(j) + a.get(k)) % 3 == 0) {\n                        result++;\n                    }\n                }\n            }\n        }\n        return result;",
        "grade-8": {
            "execution": 1
        },
        "7": "int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        // To get the number of triples, we need to find the number of triples that satisfy\n        // a[i] + a[j] + a[k] = 0 mod 3.\n        // (a[i] + a[j] + a[k]) % 3 = 0 iff (a[i] + a[j]) % 3 = a[k] % 3.\n        // Thus we only need to find the number of pairs i, j such that a[i] % 3 = a[j] % 3,\n        // and a[i] + a[j] = 0 mod 3.\n        // Let cnt_0 = # of a[i] such that a[i] % 3 = 0, and similar for cnt_1 and cnt_2.\n        // Then, let cnt_sum_0 = # of pairs (a[i], a[j]) such that a[i] % 3 = a[j] % 3 = 0,\n        // and a[i] + a[j] = 0 mod 3.\n        // This can be interpreted as the number of ways to pick 2 of cnt_0 from cnt_0, \n        // and the number of ways to pick 2 of cnt_1 from cnt_1, and so on.\n        // Thus cnt_sum_0 = cnt_0 * (cnt_0 - 1) / 2 + cnt_1 * (cnt_1 - 1) / 2 + cnt_2 * (cnt_2 - 1) / 2.\n        // We can do the same for cnt_sum_1 and cnt_sum_2.\n        // The number of triples that sum to 0 mod 3 is cnt_sum_0 * (n - 2).\n        // We can do the same for cnt_sum_1 and cnt_sum_2.\n        // The total number of triples is cnt_sum_0 * (n - 2) + cnt_sum_1 * (n - 2) + cnt_sum_2 * (",
        "grade-7": {
            "execution": 0
        },
        "24": "int[] a = new int[n];\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;",
        "grade-24": {
            "execution": 0
        },
        "63": "// create the first n elements of the series\n        // 1, 3, 7, 13, 21, 31, 43, 57, 73, 91, 111, 133, 157, 183, 211, 241, 273, 307, 343, 381, 421, 463, 507, 553, 601, 651, 703, 757, 813, 871, 931, 993, 1057, 1123, 1191, 1261, 1333, 1407, 1483, 1561, 1641, 1723, 1807, 1891, 1977, 2066, 2157, 2249, 2343, 2439, 2537, 2637, 2739, 2843, 2949, 3057, 3167, 3279, 3393, 3509, 3627, 3747, 3869, 3993, 4119, 4247, 4377, 4509, 4643, 4779, 4917, 5057, 5199, 5343, 5489, 5637, 5787, 5939, 6093, 6249, 6407, 6567, 6729, 6893, 7059, 7227, 7397, 7569, 7743, 7919, 8097, 8277, 8459, 8643, 8829, 9017, 9207, 9399, 9593, 9789, 9987, 10187, 10389, 10593, 10793, 10997, 11203, 11511, 11821, 12133, 12447, 12763, 13081, 13401, 13723, 14047, 14373, 14701, 15031, 15363, 15697, 16033, 16371, 16711, 17053, 17397, 17743, 18091, 18441, 18793, 19147, 19503, 19861, 20221, 20583, 20947, 21313, 21681, 22051, 22423, 22797, 23173, 23541, 23911, 24283, 24657, 25033, 25411, 25791, 26173, 26557, 26943, 27331, 27721, 28113, 28507, 28903, 29301, 29701, 30103, 30507, 30913, 31321, 31731, 32143, 32557, 32973, 33391, 33811, 34233, 34657, 35083",
        "grade-63": {
            "execution": 0
        },
        "67": "// make the array\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        // no need to iterate more than half way through the array because \n        // it will already be checked\n        for (int i = 0; i < n / 2; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if ((a[i] + a[j]) % 3 == 0) {\n                    // only iterate through the numbers ahead of the j value\n                    for (int k = j + 1; k < n; k++) {\n                        if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                            count++;\n                        }\n                    }\n                }\n            }\n        }\n        return count;",
        "grade-67": {
            "execution": 0
        },
        "151": "// Given the size, find the max number of possible triples from a permutation of (1..n)\n        // that satisfy a[i] + a[j] + a[k] % 3 == 0 for i < j < k.\n        // The only variables are the size and the number of elements that satisfy the congruence.\n        // \n        // The max number of values that satisfy a[i] % 3 == 0 is n / 3.\n        // The max number of values that satisfy a[i] % 3 == 1 is n / 3.\n        // The max number of values that satisfy a[i] % 3 == 2 is n / 3.\n        // \n        // The max number of combinations of 3 values that satisfy\n        // (1, 1, 1)\n        // (1, 1, 2)\n        // (1, 2, 2)\n        // (2, 2, 2)\n        // is n choose 3.\n        // \n        // The max number of combinations of 3 values that satisfy\n        // (0, 0, 0)\n        // (0, 0, 1)\n        // (0, 0, 2)\n        // (0, 1, 1)\n        // (0, 1, 2)\n        // (0, 2, 2)\n        // (1, 1, 1)\n        // (1, 1, 2)\n        // (1, 2, 2)\n        // (2, 2, 2)\n        // is (n / 3) choose 3.\n        //\n        // The max number of combinations of 3 values that satisfy\n        // (0, 0, 0)\n        // (0, 0, 1)\n        // (0, 0, 2)\n        // (0, 1, 1)\n        // (0, 1, 2)\n        // (0, 2, 2)\n        // (1, 1, 1)\n        // (1, 1, 2)\n        // (1, 2, 2)\n        // (2, 2, 2)\n        // is (n / 3) choose 3.\n        // \n        // The max number of combinations of 3 values that satisfy\n        // (0, 0, 0)\n        // (0, 0, 1)\n        // (",
        "grade-151": {
            "execution": 0
        },
        "178": "int result = 0;\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        result++;\n                    }\n                }\n            }\n        }\n        return result;",
        "grade-178": {
            "execution": 0
        },
        "166": "int[] a = new int[n];\n        int tripleCount = 0;\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        tripleCount++;\n                    }\n                }\n            }\n        }\n        return tripleCount;",
        "grade-166": {
            "execution": 0
        },
        "bleu-192": 0.17796027320853888,
        "bleu-30": 0.5329014031689705,
        "bleu-6": 0.4142472078458946,
        "bleu-80": 0.41492225488755485,
        "bleu-71": 0.46335851537873696,
        "bleu-65": 0.4461907124599957,
        "bleu-38": 0.38204888015460914,
        "bleu-28": 0.2946224478911217,
        "bleu-162": 0.10447158055339532,
        "bleu-23": 0.5024609133240223,
        "bleu-175": 0.39634594659225897,
        "bleu-125": 0.5024609133240223,
        "bleu-8": 0.6684840283125755,
        "bleu-7": 0.08280781367471751,
        "bleu-24": 0.5287293404682912,
        "bleu-63": 0.0013162793685740466,
        "bleu-67": 0.4369990732453754,
        "bleu-151": 0.0174061152382833,
        "bleu-178": 0.4882803305648686,
        "bleu-166": 0.4958696168602904,
        "codebleu-192": 0.5940642687625091,
        "codebleu-30": 0.5816658566501675,
        "codebleu-6": 0.5659052814667643,
        "codebleu-80": 0.5045348321975073,
        "codebleu-71": 0.6582960406798136,
        "codebleu-65": 0.5186272261422055,
        "codebleu-38": 0.711229676548973,
        "codebleu-28": 0.6086689130405114,
        "codebleu-162": 0.5217211520269182,
        "codebleu-23": 0.5649928431415316,
        "codebleu-175": 0.4415467734595304,
        "codebleu-125": 0.5649928431415316,
        "codebleu-8": 0.8450274470812642,
        "codebleu-7": 0.4775016542147656,
        "codebleu-24": 0.5677960336855729,
        "codebleu-63": 0.05384615384615384,
        "codebleu-67": 0.5945237388449891,
        "codebleu-151": 0.35875823388712463,
        "codebleu-178": 0.5619762518896463,
        "codebleu-166": 0.5619762518896463,
        "chrf-192": 0.2865613154323387,
        "chrf-30": 0.5125097187576539,
        "chrf-6": 0.47753900055908,
        "chrf-80": 0.3961109257494553,
        "chrf-71": 0.5204087189067368,
        "chrf-65": 0.460780767990225,
        "chrf-38": 0.4799399208652332,
        "chrf-28": 0.43434298466511984,
        "chrf-162": 0.22664756876930034,
        "chrf-23": 0.4793715130952052,
        "chrf-175": 0.40570041855235933,
        "chrf-125": 0.45843703424209453,
        "chrf-8": 0.7261383904934614,
        "chrf-7": 0.16705893242277342,
        "chrf-24": 0.52374869924986,
        "chrf-63": 0.02080803869190914,
        "chrf-67": 0.47278941570722244,
        "chrf-151": 0.10367141113874016,
        "chrf-178": 0.44917065916128357,
        "chrf-166": 0.4778771446118794,
        "rougel-192": 0.3183279742765273,
        "rougel-30": 0.6973684210526315,
        "rougel-6": 0.5329512893982807,
        "rougel-80": 0.5177304964539008,
        "rougel-71": 0.6094182825484765,
        "rougel-65": 0.5824561403508772,
        "rougel-38": 0.5737265415549597,
        "rougel-28": 0.48000000000000004,
        "rougel-162": 0.2094926350245499,
        "rougel-23": 0.7098976109215017,
        "rougel-175": 0.5823754789272031,
        "rougel-125": 0.7098976109215017,
        "rougel-8": 0.8173913043478261,
        "rougel-7": 0.2313167259786477,
        "rougel-24": 0.6962457337883958,
        "rougel-63": 0.011673151750972761,
        "rougel-67": 0.6045197740112995,
        "rougel-151": 0.13804173354735153,
        "rougel-178": 0.6825938566552902,
        "rougel-166": 0.6756756756756758,
        "meteor-192": 0.4896009197528164,
        "meteor-30": 0.5641606107063744,
        "meteor-6": 0.48265674754546767,
        "meteor-80": 0.39115934482073283,
        "meteor-71": 0.5843125710180535,
        "meteor-65": 0.4442136319845857,
        "meteor-38": 0.5765214663909054,
        "meteor-28": 0.49363355531272984,
        "meteor-162": 0.37159341315742184,
        "meteor-23": 0.5662930869735118,
        "meteor-175": 0.3817575831702544,
        "meteor-125": 0.5662930869735118,
        "meteor-8": 0.8995469268220636,
        "meteor-7": 0.33232591672426115,
        "meteor-24": 0.5827263635800447,
        "meteor-63": 0.0083986562150056,
        "meteor-67": 0.5442192365990176,
        "meteor-151": 0.237467018469657,
        "meteor-178": 0.5555744847688548,
        "meteor-166": 0.5709743500354897,
        "ruby-192": 0.1533477321814255,
        "ruby-30": 0.610062893081761,
        "ruby-6": 0.38421052631578945,
        "ruby-80": 0.3836477987421384,
        "ruby-71": 0.4158415841584159,
        "ruby-65": 0.48427672955974843,
        "ruby-38": 0.46261682242990654,
        "ruby-28": 0.3264604810996563,
        "ruby-162": 0.11725663716814161,
        "ruby-23": 0.6477987421383649,
        "ruby-175": 0.4591194968553459,
        "ruby-125": 0.6477987421383649,
        "ruby-8": 0.7419354838709677,
        "ruby-7": 0.12903225806451613,
        "ruby-24": 0.6163522012578616,
        "ruby-63": 0.0,
        "ruby-67": 0.441025641025641,
        "ruby-151": 0.08620689655172409,
        "ruby-178": 0.5974842767295597,
        "ruby-166": 0.5849056603773585,
        "codebertscore_f1-192": 0.7438365817070007,
        "codebertscore_f3-192": 0.7859545350074768,
        "codebertscore_f1-30": 0.9108791947364807,
        "codebertscore_f3-30": 0.906516969203949,
        "codebertscore_f1-6": 0.831847071647644,
        "codebertscore_f3-6": 0.8488245606422424,
        "codebertscore_f1-80": 0.8396959900856018,
        "codebertscore_f3-80": 0.8272329568862915,
        "codebertscore_f1-71": 0.8447739481925964,
        "codebertscore_f3-71": 0.8671683073043823,
        "codebertscore_f1-65": 0.8729221820831299,
        "codebertscore_f3-65": 0.8612574338912964,
        "codebertscore_f1-38": 0.8371153473854065,
        "codebertscore_f3-38": 0.8645738959312439,
        "codebertscore_f1-28": 0.8317097425460815,
        "codebertscore_f3-28": 0.8379981517791748,
        "codebertscore_f1-162": 0.7466538548469543,
        "codebertscore_f3-162": 0.7836113572120667,
        "codebertscore_f1-23": 0.9305250644683838,
        "codebertscore_f3-23": 0.9201785326004028,
        "codebertscore_f1-175": 0.8408289551734924,
        "codebertscore_f3-175": 0.8217512965202332,
        "codebertscore_f1-125": 0.9290299415588379,
        "codebertscore_f3-125": 0.9179165959358215,
        "codebertscore_f1-8": 0.9071688055992126,
        "codebertscore_f3-8": 0.9246891736984253,
        "codebertscore_f1-7": 0.7582589983940125,
        "codebertscore_f3-7": 0.8092160224914551,
        "codebertscore_f1-24": 0.9342014789581299,
        "codebertscore_f3-24": 0.922598123550415,
        "codebertscore_f1-63": 0.6266963481903076,
        "codebertscore_f3-63": 0.6367952227592468,
        "codebertscore_f1-67": 0.8552095890045166,
        "codebertscore_f3-67": 0.8838972449302673,
        "codebertscore_f1-151": 0.694509744644165,
        "codebertscore_f3-151": 0.7245502471923828,
        "codebertscore_f1-178": 0.9233030080795288,
        "codebertscore_f3-178": 0.9116451740264893,
        "codebertscore_f1-166": 0.9268589615821838,
        "codebertscore_f3-166": 0.919662594795227,
        "codebertscore_s_f1-192": 0.7857809662818909,
        "codebertscore_s_f3-192": 0.8376532793045044,
        "codebertscore_s_f1-30": 0.918666660785675,
        "codebertscore_s_f3-30": 0.9126383662223816,
        "codebertscore_s_f1-6": 0.8369725346565247,
        "codebertscore_s_f3-6": 0.8469051718711853,
        "codebertscore_s_f1-80": 0.8427229523658752,
        "codebertscore_s_f3-80": 0.8310120105743408,
        "codebertscore_s_f1-71": 0.8586065769195557,
        "codebertscore_s_f3-71": 0.8764326572418213,
        "codebertscore_s_f1-65": 0.8794549107551575,
        "codebertscore_s_f3-65": 0.8669427633285522,
        "codebertscore_s_f1-38": 0.8432386517524719,
        "codebertscore_s_f3-38": 0.8680256009101868,
        "codebertscore_s_f1-28": 0.8353787064552307,
        "codebertscore_s_f3-28": 0.8393446207046509,
        "codebertscore_s_f1-162": 0.7727311849594116,
        "codebertscore_s_f3-162": 0.8124027848243713,
        "codebertscore_s_f1-23": 0.9317048192024231,
        "codebertscore_s_f3-23": 0.9212487936019897,
        "codebertscore_s_f1-175": 0.8437867164611816,
        "codebertscore_s_f3-175": 0.8249874114990234,
        "codebertscore_s_f1-125": 0.9312034249305725,
        "codebertscore_s_f3-125": 0.9196931719779968,
        "codebertscore_s_f1-8": 0.9020028114318848,
        "codebertscore_s_f3-8": 0.9169612526893616,
        "codebertscore_s_f1-7": 0.7747930288314819,
        "codebertscore_s_f3-7": 0.8203049302101135,
        "codebertscore_s_f1-24": 0.9347227811813354,
        "codebertscore_s_f3-24": 0.9228085279464722,
        "codebertscore_s_f1-63": 0.6468743085861206,
        "codebertscore_s_f3-63": 0.6545511484146118,
        "codebertscore_s_f1-67": 0.853988528251648,
        "codebertscore_s_f3-67": 0.8800770044326782,
        "codebertscore_s_f1-151": 0.7187803983688354,
        "codebertscore_s_f3-151": 0.7446386814117432,
        "codebertscore_s_f1-178": 0.9255744218826294,
        "codebertscore_s_f3-178": 0.914158821105957,
        "codebertscore_s_f1-166": 0.9265872836112976,
        "codebertscore_s_f3-166": 0.9191363453865051,
        "gpt35_nsnr-192": 4,
        "raw_gpt35_nsnr-192": "4",
        "gpt35_nsnr-30": 4,
        "raw_gpt35_nsnr-30": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-80": 3,
        "raw_gpt35_nsnr-80": "3",
        "gpt35_nsnr-71": 4,
        "raw_gpt35_nsnr-71": "4",
        "gpt35_nsnr-65": 4,
        "raw_gpt35_nsnr-65": "4",
        "gpt35_nsnr-38": 4,
        "raw_gpt35_nsnr-38": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-162": 4,
        "raw_gpt35_nsnr-162": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-175": 4,
        "raw_gpt35_nsnr-175": "4",
        "gpt35_nsnr-125": 4,
        "raw_gpt35_nsnr-125": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-24": 4,
        "raw_gpt35_nsnr-24": "4",
        "gpt35_nsnr-63": 2,
        "raw_gpt35_nsnr-63": "2",
        "gpt35_nsnr-67": 4,
        "raw_gpt35_nsnr-67": "4",
        "gpt35_nsnr-151": 4,
        "raw_gpt35_nsnr-151": "4",
        "gpt35_nsnr-178": 4,
        "raw_gpt35_nsnr-178": "4",
        "gpt35_nsnr-166": 4,
        "raw_gpt35_nsnr-166": "4",
        "gpt35_nswr-192": 3,
        "raw_gpt35_nswr-192": "3",
        "gpt35_nswr-30": 4,
        "raw_gpt35_nswr-30": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-80": 3,
        "raw_gpt35_nswr-80": "3",
        "gpt35_nswr-71": 4,
        "raw_gpt35_nswr-71": "4",
        "gpt35_nswr-65": 4,
        "raw_gpt35_nswr-65": "4",
        "gpt35_nswr-38": 3,
        "raw_gpt35_nswr-38": "3",
        "gpt35_nswr-28": 2,
        "raw_gpt35_nswr-28": "2",
        "gpt35_nswr-162": 3,
        "raw_gpt35_nswr-162": "3",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-175": 4,
        "raw_gpt35_nswr-175": "4",
        "gpt35_nswr-125": 4,
        "raw_gpt35_nswr-125": "4",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-24": 4,
        "raw_gpt35_nswr-24": "4",
        "gpt35_nswr-63": 0,
        "raw_gpt35_nswr-63": "0",
        "gpt35_nswr-67": 3,
        "raw_gpt35_nswr-67": "3",
        "gpt35_nswr-151": 4,
        "raw_gpt35_nswr-151": "4",
        "gpt35_nswr-178": 4,
        "raw_gpt35_nswr-178": "4",
        "gpt35_nswr-166": 4,
        "raw_gpt35_nswr-166": "4"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19, 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    // multiply(14,-15) should return 20.\n    public static int multiply(int a, int b) {\n",
        "snippet": [
            "        return Math.abs(a % 10) * Math.abs(b % 10);\n    }\n}"
        ],
        "simplified": "Complete the function that takes two integers and returns the product of their unit digits. Assume the input is always valid.",
        "task_id": "97",
        "38": "int ud_a = a % 10;\n        int ud_b = b % 10;\n        return ud_a * ud_b;",
        "grade-38": {
            "execution": 0
        },
        "7": "if (a < 0) a = -a;\n        if (b < 0) b = -b;\n        return (a % 10) * (b % 10);",
        "grade-7": {
            "execution": 1
        },
        "101": "// Your code here\n        return (Math.abs(a) % 10) * (Math.abs(b) % 10);",
        "grade-101": {
            "execution": 1
        },
        "89": "String aS = String.valueOf(a);\n        String bS = String.valueOf(b);\n        char a1 = aS.charAt(aS.length()-1);\n        char b1 = bS.charAt(bS.length()-1);\n        int a2 = Integer.parseInt(String.valueOf(a1));\n        int b2 = Integer.parseInt(String.valueOf(b1));\n        int result = a2 * b2;\n        return result;",
        "grade-89": {
            "execution": 1
        },
        "82": "return getUnitDigit(a) * getUnitDigit(b);",
        "grade-82": {
            "execution": 0
        },
        "54": "// just multiply the unit digits\n        return a % 10 * b % 10;",
        "grade-54": {
            "execution": 0
        },
        "36": "// if (a == 0 || b == 0) return 0;\n        // return (Math.abs(a) % 10) * (Math.abs(b) % 10);\n        int aUnits = Math.abs(a) % 10;\n        int bUnits = Math.abs(b) % 10;\n        int product = aUnits * bUnits;\n        return product;",
        "grade-36": {
            "execution": 1
        },
        "30": "// Your code here\n        return a%10 * b%10;",
        "grade-30": {
            "execution": 0
        },
        "161": "int aa = a % 10;\n        int bb = b % 10;\n        return aa * bb;",
        "grade-161": {
            "execution": 0
        },
        "9": "int c = Math.abs(a%10);\n        int d = Math.abs(b%10);\n        return (c*d);",
        "grade-9": {
            "execution": 1
        },
        "8": "int sum = 0;\n        int a1 = a % 10;\n        int b1 = b % 10;\n        sum = a1 * b1;\n        return sum;",
        "grade-8": {
            "execution": 0
        },
        "31": "return (a%10)*(b%10);",
        "grade-31": {
            "execution": 0
        },
        "80": "return (int) (a % 10) * (int) (b % 10);",
        "grade-80": {
            "execution": 0
        },
        "85": "int p = a*b;\n        String s = String.valueOf(p);\n        return Integer.parseInt(s.substring(s.length()-1));",
        "grade-85": {
            "execution": 0
        },
        "194": "String c = String.valueOf(a);\n        String d = String.valueOf(b);\n        a = Character.getNumericValue(c.charAt(c.length()-1));\n        b = Character.getNumericValue(d.charAt(d.length()-1));\n        return a*b;",
        "grade-194": {
            "execution": 1
        },
        "75": "// Write your code here\n        int unitA = a % 10;\n        int unitB = b % 10;\n        return unitA * unitB;",
        "grade-75": {
            "execution": 0
        },
        "160": "int prod = Math.abs(a % 10) * Math.abs(b % 10);\n      return prod;",
        "grade-160": {
            "execution": 1
        },
        "81": "if (a < 0) a = -a;\n        if (b < 0) b = -b;\n        return ((a % 10) * (b % 10));",
        "grade-81": {
            "execution": 1
        },
        "171": "int s = Math.abs(a) % 10 * Math.abs(b) % 10;\n        return s;",
        "grade-171": {
            "execution": 0
        },
        "102": "return (a%10) * (b%10);",
        "grade-102": {
            "execution": 0
        },
        "bleu-38": 0.1262442667018563,
        "bleu-7": 0.2654565388308499,
        "bleu-101": 0.4245212493948325,
        "bleu-89": 0.01363843556267274,
        "bleu-82": 0.0725687032143088,
        "bleu-54": 0.12396181950714866,
        "bleu-36": 0.14139499822535273,
        "bleu-30": 0.1193347848469297,
        "bleu-161": 0.1262442667018563,
        "bleu-9": 0.48198717221616,
        "bleu-8": 0.0925159978069645,
        "bleu-31": 0.4196707333829689,
        "bleu-80": 0.4580703548784583,
        "bleu-85": 0.02968155899432701,
        "bleu-194": 0.019934394648661993,
        "bleu-75": 0.08914609827874222,
        "bleu-160": 0.7425200370833559,
        "bleu-81": 0.23146751684272027,
        "bleu-171": 0.4115364617040483,
        "bleu-102": 0.4196707333829689,
        "codebleu-38": 0.38969696969696965,
        "codebleu-7": 0.5558654661772762,
        "codebleu-101": 0.6411230757138247,
        "codebleu-89": 0.48383838383838385,
        "codebleu-82": 0.2631606567931101,
        "codebleu-54": 0.3608358771034786,
        "codebleu-36": 0.6011415906133164,
        "codebleu-30": 0.3311222540846591,
        "codebleu-161": 0.38969696969696965,
        "codebleu-9": 0.7674635833213019,
        "codebleu-8": 0.38969696969696965,
        "codebleu-31": 0.44393705800954525,
        "codebleu-80": 0.5679495470091892,
        "codebleu-85": 0.46363636363636357,
        "codebleu-194": 0.48383838383838385,
        "codebleu-75": 0.38969696969696965,
        "codebleu-160": 0.8240271634302929,
        "codebleu-81": 0.5309830400041319,
        "codebleu-171": 0.6357919160577131,
        "codebleu-102": 0.44393705800954525,
        "chrf-38": 0.21702195875144137,
        "chrf-7": 0.3560799281436402,
        "chrf-101": 0.5986742156555578,
        "chrf-89": 0.10941439806316558,
        "chrf-82": 0.15837463856039705,
        "chrf-54": 0.21598585732728917,
        "chrf-36": 0.39522409059036057,
        "chrf-30": 0.20893683269948743,
        "chrf-161": 0.23563358451122743,
        "chrf-9": 0.7175724592739104,
        "chrf-8": 0.21531682121843407,
        "chrf-31": 0.3844141183577621,
        "chrf-80": 0.3711897837338617,
        "chrf-85": 0.15421271672694764,
        "chrf-194": 0.12753419769873786,
        "chrf-75": 0.18184694730070924,
        "chrf-160": 0.8198753880016063,
        "chrf-81": 0.33382583833199897,
        "chrf-171": 0.5938455768450006,
        "chrf-102": 0.3844141183577621,
        "rougel-38": 0.35,
        "rougel-7": 0.4642857142857143,
        "rougel-101": 0.7755102040816326,
        "rougel-89": 0.1417322834645669,
        "rougel-82": 0.5,
        "rougel-54": 0.4864864864864864,
        "rougel-36": 0.3725490196078431,
        "rougel-30": 0.5142857142857143,
        "rougel-161": 0.35,
        "rougel-9": 0.6538461538461537,
        "rougel-8": 0.28571428571428575,
        "rougel-31": 0.7647058823529412,
        "rougel-80": 0.6500000000000001,
        "rougel-85": 0.23728813559322035,
        "rougel-194": 0.19148936170212766,
        "rougel-75": 0.28,
        "rougel-160": 0.7999999999999999,
        "rougel-81": 0.4482758620689656,
        "rougel-171": 0.7111111111111111,
        "rougel-102": 0.7647058823529412,
        "meteor-38": 0.3955959164292498,
        "meteor-7": 0.5767909974640745,
        "meteor-101": 0.8290462999604274,
        "meteor-89": 0.1864406779661017,
        "meteor-82": 0.4033526991043331,
        "meteor-54": 0.40138512496236073,
        "meteor-36": 0.6354262850107726,
        "meteor-30": 0.4053396582132215,
        "meteor-161": 0.3955959164292498,
        "meteor-9": 0.8006799294887937,
        "meteor-8": 0.37918871252204583,
        "meteor-31": 0.6396098189700627,
        "meteor-80": 0.5942762858443331,
        "meteor-85": 0.3025448720282521,
        "meteor-194": 0.20992366412213742,
        "meteor-75": 0.31572091969645494,
        "meteor-160": 0.8902630928693119,
        "meteor-81": 0.5469445462638111,
        "meteor-171": 0.8587257617728532,
        "meteor-102": 0.6396098189700627,
        "ruby-38": 0.19047619047619047,
        "ruby-7": 0.19999999999999996,
        "ruby-101": 0.6071428571428572,
        "ruby-89": 0.08490566037735847,
        "ruby-82": 0.4285714285714286,
        "ruby-54": 0.23809523809523814,
        "ruby-36": 0.23456790123456794,
        "ruby-30": 0.33333333333333337,
        "ruby-161": 0.19047619047619047,
        "ruby-9": 0.5483870967741935,
        "ruby-8": 0.1785714285714286,
        "ruby-31": 0.6190476190476191,
        "ruby-80": 0.6190476190476191,
        "ruby-85": 0.13157894736842102,
        "ruby-194": 0.12328767123287676,
        "ruby-75": 0.1724137931034483,
        "ruby-160": 0.75,
        "ruby-81": 0.18918918918918914,
        "ruby-171": 0.5833333333333333,
        "ruby-102": 0.6190476190476191,
        "codebertscore_f1-38": 0.7882914543151855,
        "codebertscore_f3-38": 0.7965869307518005,
        "codebertscore_f1-7": 0.8161913156509399,
        "codebertscore_f3-7": 0.8138740658760071,
        "codebertscore_f1-101": 0.8753488063812256,
        "codebertscore_f3-101": 0.9152867197990417,
        "codebertscore_f1-89": 0.6993198990821838,
        "codebertscore_f3-89": 0.7249703407287598,
        "codebertscore_f1-82": 0.7987245321273804,
        "codebertscore_f3-82": 0.8051108717918396,
        "codebertscore_f1-54": 0.7930220365524292,
        "codebertscore_f3-54": 0.8034977316856384,
        "codebertscore_f1-36": 0.8290391564369202,
        "codebertscore_f3-36": 0.8852737545967102,
        "codebertscore_f1-30": 0.7928956151008606,
        "codebertscore_f3-30": 0.8036207556724548,
        "codebertscore_f1-161": 0.8106791377067566,
        "codebertscore_f3-161": 0.7917394638061523,
        "codebertscore_f1-9": 0.8571998476982117,
        "codebertscore_f3-9": 0.8828881978988647,
        "codebertscore_f1-8": 0.7740322947502136,
        "codebertscore_f3-8": 0.7799851894378662,
        "codebertscore_f1-31": 0.8550819158554077,
        "codebertscore_f3-31": 0.8186171054840088,
        "codebertscore_f1-80": 0.8833441734313965,
        "codebertscore_f3-80": 0.8658768534660339,
        "codebertscore_f1-85": 0.6951420903205872,
        "codebertscore_f3-85": 0.7252680659294128,
        "codebertscore_f1-194": 0.7063466310501099,
        "codebertscore_f3-194": 0.7300796508789062,
        "codebertscore_f1-75": 0.7603282928466797,
        "codebertscore_f3-75": 0.7789469957351685,
        "codebertscore_f1-160": 0.9274885058403015,
        "codebertscore_f3-160": 0.9524564743041992,
        "codebertscore_f1-81": 0.8167096376419067,
        "codebertscore_f3-81": 0.8141530156135559,
        "codebertscore_f1-171": 0.9113439917564392,
        "codebertscore_f3-171": 0.9328118562698364,
        "codebertscore_f1-102": 0.871776282787323,
        "codebertscore_f3-102": 0.8322505354881287,
        "codebertscore_s_f1-38": 0.8046865463256836,
        "codebertscore_s_f3-38": 0.815298318862915,
        "codebertscore_s_f1-7": 0.8345571160316467,
        "codebertscore_s_f3-7": 0.8281408548355103,
        "codebertscore_s_f1-101": 0.9031085968017578,
        "codebertscore_s_f3-101": 0.9494141340255737,
        "codebertscore_s_f1-89": 0.7147044539451599,
        "codebertscore_s_f3-89": 0.7444922924041748,
        "codebertscore_s_f1-82": 0.7840151190757751,
        "codebertscore_s_f3-82": 0.7934386730194092,
        "codebertscore_s_f1-54": 0.8074464201927185,
        "codebertscore_s_f3-54": 0.8172991871833801,
        "codebertscore_s_f1-36": 0.8425079584121704,
        "codebertscore_s_f3-36": 0.9052384495735168,
        "codebertscore_s_f1-30": 0.7939221262931824,
        "codebertscore_s_f3-30": 0.8046861290931702,
        "codebertscore_s_f1-161": 0.8371239900588989,
        "codebertscore_s_f3-161": 0.8154868483543396,
        "codebertscore_s_f1-9": 0.8944780230522156,
        "codebertscore_s_f3-9": 0.9254400730133057,
        "codebertscore_s_f1-8": 0.7899770140647888,
        "codebertscore_s_f3-8": 0.7958777546882629,
        "codebertscore_s_f1-31": 0.8718396425247192,
        "codebertscore_s_f3-31": 0.8269141912460327,
        "codebertscore_s_f1-80": 0.888765811920166,
        "codebertscore_s_f3-80": 0.867180585861206,
        "codebertscore_s_f1-85": 0.725999116897583,
        "codebertscore_s_f3-85": 0.7578831911087036,
        "codebertscore_s_f1-194": 0.7250702381134033,
        "codebertscore_s_f3-194": 0.7550110220909119,
        "codebertscore_s_f1-75": 0.788404107093811,
        "codebertscore_s_f3-75": 0.8117740750312805,
        "codebertscore_s_f1-160": 0.9396054744720459,
        "codebertscore_s_f3-160": 0.9654912352561951,
        "codebertscore_s_f1-81": 0.8340765237808228,
        "codebertscore_s_f3-81": 0.8273884057998657,
        "codebertscore_s_f1-171": 0.9273961782455444,
        "codebertscore_s_f3-171": 0.9481322169303894,
        "codebertscore_s_f1-102": 0.8850492238998413,
        "codebertscore_s_f3-102": 0.836988091468811,
        "gpt35_nsnr-38": 4,
        "raw_gpt35_nsnr-38": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-101": 4,
        "raw_gpt35_nsnr-101": "4",
        "gpt35_nsnr-89": 4,
        "raw_gpt35_nsnr-89": "4",
        "gpt35_nsnr-82": 4,
        "raw_gpt35_nsnr-82": "4",
        "gpt35_nsnr-54": 4,
        "raw_gpt35_nsnr-54": "4",
        "gpt35_nsnr-36": 4,
        "raw_gpt35_nsnr-36": "4",
        "gpt35_nsnr-30": 4,
        "raw_gpt35_nsnr-30": "4",
        "gpt35_nsnr-161": 4,
        "raw_gpt35_nsnr-161": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-31": 4,
        "raw_gpt35_nsnr-31": "4",
        "gpt35_nsnr-80": 4,
        "raw_gpt35_nsnr-80": "4",
        "gpt35_nsnr-85": 3,
        "raw_gpt35_nsnr-85": "3",
        "gpt35_nsnr-194": 4,
        "raw_gpt35_nsnr-194": "4",
        "gpt35_nsnr-75": 4,
        "raw_gpt35_nsnr-75": "4",
        "gpt35_nsnr-160": 4,
        "raw_gpt35_nsnr-160": "4",
        "gpt35_nsnr-81": 4,
        "raw_gpt35_nsnr-81": "4",
        "gpt35_nsnr-171": 4,
        "raw_gpt35_nsnr-171": "4",
        "gpt35_nsnr-102": 4,
        "raw_gpt35_nsnr-102": "4",
        "gpt35_nswr-38": 4,
        "raw_gpt35_nswr-38": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-101": 4,
        "raw_gpt35_nswr-101": "4",
        "gpt35_nswr-89": 4,
        "raw_gpt35_nswr-89": "4",
        "gpt35_nswr-82": 3,
        "raw_gpt35_nswr-82": "3",
        "gpt35_nswr-54": 3,
        "raw_gpt35_nswr-54": "3",
        "gpt35_nswr-36": 4,
        "raw_gpt35_nswr-36": "4",
        "gpt35_nswr-30": 3,
        "raw_gpt35_nswr-30": "3",
        "gpt35_nswr-161": 4,
        "raw_gpt35_nswr-161": "4",
        "gpt35_nswr-9": 4,
        "raw_gpt35_nswr-9": "4",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-31": 4,
        "raw_gpt35_nswr-31": "4",
        "gpt35_nswr-80": 4,
        "raw_gpt35_nswr-80": "4",
        "gpt35_nswr-85": 3,
        "raw_gpt35_nswr-85": "3",
        "gpt35_nswr-194": 4,
        "raw_gpt35_nswr-194": "4",
        "gpt35_nswr-75": 4,
        "raw_gpt35_nswr-75": "4",
        "gpt35_nswr-160": 4,
        "raw_gpt35_nswr-160": "4",
        "gpt35_nswr-81": 4,
        "raw_gpt35_nswr-81": "4",
        "gpt35_nswr-171": 4,
        "raw_gpt35_nswr-171": "4",
        "gpt35_nswr-102": 4,
        "raw_gpt35_nswr-102": "4"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    public static int addElements(ArrayList<Integer> arr, int k) {\n",
        "snippet": [
            "        arr = arr.subList(0, k);\n        Optional<Integer> sum = arr.stream().filter(p -> String.valueOf(Math.abs(p)).length() <= 2).reduce(Integer::sum);\n        return sum.orElse(0);\n    }\n}"
        ],
        "simplified": "Given a non-empty array of integers arr and an integer k, return the sum of the elements with at most two digits from the first k elements of arr.",
        "task_id": "122",
        "31": "// TODO: Implement your solution here\n        return -1;",
        "grade-31": {
            "execution": 0
        },
        "6": "int s = 0;\n        for (int i = 0; i < k; i++) {\n            int x = arr.get(i);\n            if (x < 100) {\n                s += x;\n            }\n        }\n        return s;",
        "grade-6": {
            "execution": 1
        },
        "81": "int sum = 0;\n        int i = 0;\n        while (i < k) {\n            int digits = 1;\n            int number = arr.get(i);\n            while (number >= 10) {\n                number /= 10;\n                digits++;\n            }\n            if (digits <= 2) {\n                sum += arr.get(i);\n            }\n            i++;\n        }\n        return sum;",
        "grade-81": {
            "execution": 1
        },
        "72": "return arr.stream().limit(k).filter(n -> n < 100).mapToInt(n -> n).sum();",
        "grade-72": {
            "execution": 1
        },
        "65": "int sum = 0;\n        int currentSize = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int current = arr.get(i);\n            if (current < 10) {\n                sum += current;\n                currentSize++;\n            } else if (current >= 10 && current < 100) {\n                sum += current;\n                currentSize++;\n            }\n            if (currentSize == k) {\n                break;\n            }\n        }\n        return sum;",
        "grade-65": {
            "execution": 0
        },
        "40": "int sum = 0;\n        // 1. Get the first k elements of arr\n        // 2. Sum the values that have 2 digits\n        // 3. Return the sum\n        return sum;",
        "grade-40": {
            "execution": 0
        },
        "29": "int sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i) >= 10 && arr.get(i) < 100) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;",
        "grade-29": {
            "execution": 0
        },
        "170": "int sum = 0;\n        for (int i = 0; i < k; i++) {\n            int digitCount = String.valueOf(arr.get(i)).length();\n            if (digitCount <= 2) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;",
        "grade-170": {
            "execution": 1
        },
        "24": "int result = 0;\n        int digits;\n        for (int i = 0; i < k; i++) {\n            digits = arr.get(i).toString().length();\n            if (digits <= 2) {\n                result += arr.get(i);\n            }\n        }\n        return result;",
        "grade-24": {
            "execution": 1
        },
        "188": "Integer sum = 0;\n        ArrayList<Integer> singleDigitArr = new ArrayList<Integer>();\n        ArrayList<Integer> twoDigitArr = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) < 10) {\n                singleDigitArr.add(arr.get(i));\n            } else if (arr.get(i) < 100) {\n                twoDigitArr.add(arr.get(i));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (i < singleDigitArr.size()) {\n                sum += singleDigitArr.get(i);\n            } else if (i - singleDigitArr.size() < twoDigitArr.size()) {\n                sum += twoDigitArr.get(i - singleDigitArr.size());\n            }\n        }\n        return sum;",
        "grade-188": {
            "execution": 0
        },
        "129": "int sum = 0;\n        int i = 0;\n        while (i < k) {\n            int x = arr.get(i);\n            if (x < 100) {\n                sum += x;\n            }\n            i++;\n        }\n        return sum;",
        "grade-129": {
            "execution": 1
        },
        "8": "// replace line below with code\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            int n = arr.get(i);\n            if (n < 100) {\n                sum += n;\n            }\n        }\n        return sum;",
        "grade-8": {
            "execution": 1
        },
        "7": "return arr.stream().limit(k).filter(x -> x < 100).reduce(0, (x, y) -> x + y);",
        "grade-7": {
            "execution": 1
        },
        "25": "throw new UnsupportedOperationException(\"Not yet implemented\");",
        "grade-25": {
            "execution": 0
        },
        "63": "int i = 0;\n        int sum = 0;\n        for (int element : arr) {\n            if (element < 100) {\n                sum += element;\n                i++;\n            }\n            if (i == k) {\n                break;\n            }\n        }\n        return sum;",
        "grade-63": {
            "execution": 0
        },
        "69": "int sum = 0;\n        int i = 0;\n        while (i < k) {\n            int num = arr.get(i);\n            int num_digits = (int) Math.log10(num) + 1;\n            if (num_digits < 3) {\n                sum += num;\n            }\n            i++;\n        }\n        return sum;",
        "grade-69": {
            "execution": 1
        },
        "159": "// We'll just do an O(n) traversal on arr\n        // if arr[i] < 100 then we can add it to the sum\n        // if arr[i] >= 100 then we shouldn't because it's more than 2 digits\n        // if arr[i] < 10 then we should add it to the sum\n        // if i >= k then we should break out of the loop\n        int result = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) < 100 && arr.get(i) >= 10) {\n                result += arr.get(i);\n            }\n            if (i >= k) {\n                break;\n            }\n        }\n        return result;",
        "grade-159": {
            "execution": 0
        },
        "192": "if (arr == null || arr.size() == 0) {\n            return 0;\n        }\n        if (k == 0) {\n            return 0;\n        }\n        int len = arr.size();\n        int answer = 0;\n        int count = 0;\n        for (int i = 0; i < len; i++) {\n            if (arr.get(i) >= 0 && arr.get(i) <= 99) {\n                count++;\n                answer += arr.get(i);\n            }\n            if (count == k) {\n                break;\n            }\n        }\n        return answer;",
        "grade-192": {
            "execution": 0
        },
        "177": "// write your code here\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i) < 100) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;",
        "grade-177": {
            "execution": 1
        },
        "58": "int sum = 0;\n        for (int i = 0; i < k; i++) {\n            int num = arr.get(i);\n            if (num < 100) sum += num;\n        }\n        return sum;",
        "grade-58": {
            "execution": 1
        },
        "bleu-31": 0.00041434977288658926,
        "bleu-6": 0.04497974357783519,
        "bleu-81": 0.09014829121872749,
        "bleu-72": 0.11004944582191699,
        "bleu-65": 0.04464878543333803,
        "bleu-40": 0.016232977105170354,
        "bleu-29": 0.08081941715313352,
        "bleu-170": 0.24149299121307205,
        "bleu-24": 0.18395518463663474,
        "bleu-188": 0.03619040906206357,
        "bleu-129": 0.04247866086756954,
        "bleu-8": 0.0527172697936685,
        "bleu-7": 0.14315028990457818,
        "bleu-25": 0.000920601116113475,
        "bleu-63": 0.03925361101969765,
        "bleu-69": 0.04933904180608155,
        "bleu-159": 0.031411242805575015,
        "bleu-192": 0.05089980037471678,
        "bleu-177": 0.07633826710391581,
        "bleu-58": 0.03971577245168206,
        "codebleu-31": 0.06647973871110138,
        "codebleu-6": 0.2964183749503354,
        "codebleu-81": 0.4123912391239124,
        "codebleu-72": 0.2997016991707089,
        "codebleu-65": 0.4233209035189233,
        "codebleu-40": 0.17937656701270163,
        "codebleu-29": 0.397891800605878,
        "codebleu-170": 0.5056892678105754,
        "codebleu-24": 0.4484150847971318,
        "codebleu-188": 0.6031674596031031,
        "codebleu-129": 0.30380933213132305,
        "codebleu-8": 0.34188166332155207,
        "codebleu-7": 0.31846439241392543,
        "codebleu-25": 0.03960712984567287,
        "codebleu-63": 0.28322527038879974,
        "codebleu-69": 0.39918991899189915,
        "codebleu-159": 0.49571385709999566,
        "codebleu-192": 0.5243881531010244,
        "codebleu-177": 0.3654995992775703,
        "codebleu-58": 0.2890378629438336,
        "chrf-31": 0.08165671171729309,
        "chrf-6": 0.11753794498791324,
        "chrf-81": 0.21284848134439982,
        "chrf-72": 0.2242547709268182,
        "chrf-65": 0.19556763481778333,
        "chrf-40": 0.17121089777066362,
        "chrf-29": 0.18061112094737664,
        "chrf-170": 0.3156170348821866,
        "chrf-24": 0.24717666928721507,
        "chrf-188": 0.23194391603325562,
        "chrf-129": 0.14753703115658082,
        "chrf-8": 0.16878352461526686,
        "chrf-7": 0.24510966959598424,
        "chrf-25": 0.09326999910969844,
        "chrf-63": 0.16219793544946243,
        "chrf-69": 0.19126727773400712,
        "chrf-159": 0.196796516825552,
        "chrf-192": 0.20854023417980153,
        "chrf-177": 0.18464476238089061,
        "chrf-58": 0.1596870963382574,
        "rougel-31": 0.07407407407407408,
        "rougel-6": 0.27350427350427353,
        "rougel-81": 0.3424657534246575,
        "rougel-72": 0.4,
        "rougel-65": 0.272189349112426,
        "rougel-40": 0.20754716981132074,
        "rougel-29": 0.34375,
        "rougel-170": 0.4444444444444445,
        "rougel-24": 0.417910447761194,
        "rougel-188": 0.28363636363636363,
        "rougel-129": 0.2905982905982906,
        "rougel-8": 0.2903225806451613,
        "rougel-7": 0.37383177570093457,
        "rougel-25": 0.07317073170731707,
        "rougel-63": 0.28571428571428575,
        "rougel-69": 0.3333333333333333,
        "rougel-159": 0.25217391304347825,
        "rougel-192": 0.3541666666666667,
        "rougel-177": 0.3089430894308943,
        "rougel-58": 0.3130434782608696,
        "meteor-31": 0.0315955766192733,
        "meteor-6": 0.20531445725086167,
        "meteor-81": 0.2644171186087785,
        "meteor-72": 0.2587631605018328,
        "meteor-65": 0.28899333915515146,
        "meteor-40": 0.14298181041033434,
        "meteor-29": 0.2915733767555465,
        "meteor-170": 0.3872134279475982,
        "meteor-24": 0.33295055631582093,
        "meteor-188": 0.39663796927656103,
        "meteor-129": 0.22819730941704033,
        "meteor-8": 0.24381065088757403,
        "meteor-7": 0.2830805289637415,
        "meteor-25": 0.04030844724851034,
        "meteor-63": 0.21992465640006625,
        "meteor-69": 0.24783820459925393,
        "meteor-159": 0.31797573502990845,
        "meteor-192": 0.31804733727810636,
        "meteor-177": 0.2562645880125072,
        "meteor-58": 0.22124354489421955,
        "ruby-31": 0.04347826086956519,
        "ruby-6": 0.17391304347826086,
        "ruby-81": 0.20779220779220775,
        "ruby-72": 0.2753623188405797,
        "ruby-65": 0.19999999999999996,
        "ruby-40": 0.13043478260869568,
        "ruby-29": 0.21739130434782605,
        "ruby-170": 0.30434782608695654,
        "ruby-24": 0.21739130434782605,
        "ruby-188": 0.17961165048543692,
        "ruby-129": 0.17391304347826086,
        "ruby-8": 0.1594202898550725,
        "ruby-7": 0.26086956521739135,
        "ruby-25": 0.04347826086956519,
        "ruby-63": 0.1594202898550725,
        "ruby-69": 0.17391304347826086,
        "ruby-159": 0.1428571428571429,
        "ruby-192": 0.2357723577235772,
        "ruby-177": 0.17391304347826086,
        "ruby-58": 0.18840579710144922,
        "codebertscore_f1-31": 0.6057643294334412,
        "codebertscore_f3-31": 0.5984752178192139,
        "codebertscore_f1-6": 0.709585428237915,
        "codebertscore_f3-6": 0.6834909915924072,
        "codebertscore_f1-81": 0.6750426888465881,
        "codebertscore_f3-81": 0.6659494042396545,
        "codebertscore_f1-72": 0.7616347074508667,
        "codebertscore_f3-72": 0.7296804189682007,
        "codebertscore_f1-65": 0.671968400478363,
        "codebertscore_f3-65": 0.6701178550720215,
        "codebertscore_f1-40": 0.703268826007843,
        "codebertscore_f3-40": 0.6892269849777222,
        "codebertscore_f1-29": 0.7202528119087219,
        "codebertscore_f3-29": 0.6970638632774353,
        "codebertscore_f1-170": 0.7530715465545654,
        "codebertscore_f3-170": 0.7399939894676208,
        "codebertscore_f1-24": 0.7157107591629028,
        "codebertscore_f3-24": 0.697869062423706,
        "codebertscore_f1-188": 0.6522113680839539,
        "codebertscore_f3-188": 0.6786355376243591,
        "codebertscore_f1-129": 0.7035574913024902,
        "codebertscore_f3-129": 0.6796393990516663,
        "codebertscore_f1-8": 0.7013276219367981,
        "codebertscore_f3-8": 0.6864137649536133,
        "codebertscore_f1-7": 0.7662087082862854,
        "codebertscore_f3-7": 0.7358283400535583,
        "codebertscore_f1-25": 0.5860327482223511,
        "codebertscore_f3-25": 0.5788333415985107,
        "codebertscore_f1-63": 0.697489321231842,
        "codebertscore_f3-63": 0.6747028231620789,
        "codebertscore_f1-69": 0.6960837841033936,
        "codebertscore_f3-69": 0.6853765845298767,
        "codebertscore_f1-159": 0.6698615550994873,
        "codebertscore_f3-159": 0.677603006362915,
        "codebertscore_f1-192": 0.6712862849235535,
        "codebertscore_f3-192": 0.6654853820800781,
        "codebertscore_f1-177": 0.7002180814743042,
        "codebertscore_f3-177": 0.6886058449745178,
        "codebertscore_f1-58": 0.7225621938705444,
        "codebertscore_f3-58": 0.6979740262031555,
        "codebertscore_s_f1-31": 0.6193512678146362,
        "codebertscore_s_f3-31": 0.6151307225227356,
        "codebertscore_s_f1-6": 0.7301497459411621,
        "codebertscore_s_f3-6": 0.7074758410453796,
        "codebertscore_s_f1-81": 0.7055197954177856,
        "codebertscore_s_f3-81": 0.6944735050201416,
        "codebertscore_s_f1-72": 0.7766184210777283,
        "codebertscore_s_f3-72": 0.7424769997596741,
        "codebertscore_s_f1-65": 0.7046094536781311,
        "codebertscore_s_f3-65": 0.7032989263534546,
        "codebertscore_s_f1-40": 0.718318521976471,
        "codebertscore_s_f3-40": 0.7048243284225464,
        "codebertscore_s_f1-29": 0.7404842376708984,
        "codebertscore_s_f3-29": 0.7168705463409424,
        "codebertscore_s_f1-170": 0.7694486975669861,
        "codebertscore_s_f3-170": 0.7557412981987,
        "codebertscore_s_f1-24": 0.7309414744377136,
        "codebertscore_s_f3-24": 0.7129630446434021,
        "codebertscore_s_f1-188": 0.6815933585166931,
        "codebertscore_s_f3-188": 0.6969286799430847,
        "codebertscore_s_f1-129": 0.7280609607696533,
        "codebertscore_s_f3-129": 0.7056111693382263,
        "codebertscore_s_f1-8": 0.7194120287895203,
        "codebertscore_s_f3-8": 0.7091935873031616,
        "codebertscore_s_f1-7": 0.7874765396118164,
        "codebertscore_s_f3-7": 0.7550473809242249,
        "codebertscore_s_f1-25": 0.5633649826049805,
        "codebertscore_s_f3-25": 0.557932436466217,
        "codebertscore_s_f1-63": 0.7218704223632812,
        "codebertscore_s_f3-63": 0.7012512683868408,
        "codebertscore_s_f1-69": 0.7236562371253967,
        "codebertscore_s_f3-69": 0.7170189023017883,
        "codebertscore_s_f1-159": 0.6872026324272156,
        "codebertscore_s_f3-159": 0.694923460483551,
        "codebertscore_s_f1-192": 0.7008797526359558,
        "codebertscore_s_f3-192": 0.689863383769989,
        "codebertscore_s_f1-177": 0.7153947949409485,
        "codebertscore_s_f3-177": 0.7054703235626221,
        "codebertscore_s_f1-58": 0.7442793250083923,
        "codebertscore_s_f3-58": 0.7204282283782959,
        "gpt35_nsnr-31": 4,
        "raw_gpt35_nsnr-31": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-81": 4,
        "raw_gpt35_nsnr-81": "4",
        "gpt35_nsnr-72": 4,
        "raw_gpt35_nsnr-72": "4",
        "gpt35_nsnr-65": 4,
        "raw_gpt35_nsnr-65": "4",
        "gpt35_nsnr-40": 2,
        "raw_gpt35_nsnr-40": "2",
        "gpt35_nsnr-29": 4,
        "raw_gpt35_nsnr-29": "4",
        "gpt35_nsnr-170": 4,
        "raw_gpt35_nsnr-170": "4",
        "gpt35_nsnr-24": 4,
        "raw_gpt35_nsnr-24": "4",
        "gpt35_nsnr-188": 4,
        "raw_gpt35_nsnr-188": "4",
        "gpt35_nsnr-129": 4,
        "raw_gpt35_nsnr-129": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-25": 4,
        "raw_gpt35_nsnr-25": "4",
        "gpt35_nsnr-63": 4,
        "raw_gpt35_nsnr-63": "4",
        "gpt35_nsnr-69": 4,
        "raw_gpt35_nsnr-69": "4",
        "gpt35_nsnr-159": 4,
        "raw_gpt35_nsnr-159": "4",
        "gpt35_nsnr-192": 4,
        "raw_gpt35_nsnr-192": "4",
        "gpt35_nsnr-177": 4,
        "raw_gpt35_nsnr-177": "4",
        "gpt35_nsnr-58": 4,
        "raw_gpt35_nsnr-58": "4",
        "gpt35_nswr-31": 2,
        "raw_gpt35_nswr-31": "2",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-81": 3,
        "raw_gpt35_nswr-81": "3",
        "gpt35_nswr-72": 3,
        "raw_gpt35_nswr-72": "3",
        "gpt35_nswr-65": 3,
        "raw_gpt35_nswr-65": "3",
        "gpt35_nswr-40": 0,
        "raw_gpt35_nswr-40": "Score: 0",
        "gpt35_nswr-29": 3,
        "raw_gpt35_nswr-29": "3",
        "gpt35_nswr-170": 3,
        "raw_gpt35_nswr-170": "3",
        "gpt35_nswr-24": 3,
        "raw_gpt35_nswr-24": "3",
        "gpt35_nswr-188": 3,
        "raw_gpt35_nswr-188": "3",
        "gpt35_nswr-129": 3,
        "raw_gpt35_nswr-129": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-25": 4,
        "raw_gpt35_nswr-25": "4",
        "gpt35_nswr-63": 3,
        "raw_gpt35_nswr-63": "3",
        "gpt35_nswr-69": 3,
        "raw_gpt35_nswr-69": "3",
        "gpt35_nswr-159": 3,
        "raw_gpt35_nswr-159": "3",
        "gpt35_nswr-192": 3,
        "raw_gpt35_nswr-192": "3",
        "gpt35_nswr-177": 3,
        "raw_gpt35_nswr-177": "3",
        "gpt35_nswr-58": 3,
        "raw_gpt35_nswr-58": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to implement a function that will simplify the expression\n    // x * n. The function returns True if x * n evaluates to a whole number and False\n    // otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    // <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n    // You can assume that x, and n are valid fractions, and do not have zero as denominator.\n    // simplify(\"1/5\", \"5/1\") = True\n    // simplify(\"1/6\", \"2/1\") = False\n    // simplify(\"7/10\", \"10/2\") = False\n    public static boolean simplify(String x, String n) {\n",
        "snippet": [
            "        String[] a = x.split(\"/\");\n        String[] b = n.split(\"/\");\n        int numerator = Integer.parseInt(a[0]) * Integer.parseInt(b[0]);\n        int denom = Integer.parseInt(a[1]) * Integer.parseInt(b[1]);\n        return numerator / denom * denom == numerator;\n    }\n}"
        ],
        "simplified": "Your task is to implement a function that will simplify the expression x * n. The function returns True if x * n evaluates to a whole number and False otherwise. Both x and n, are string representation of a fraction, and have the following format, <numerator>/<denominator> where both numerator and denominator are positive whole numbers. You can assume that x, and n are valid fractions, and do not have zero as denominator.",
        "task_id": "144",
        "171": "Fraction fx = new Fraction(x);\n        Fraction fn = new Fraction(n);\n        Fraction product = fx.multiply(fn);\n        return product.isWholeNumber();",
        "grade-171": {
            "execution": 0
        },
        "29": "// Your code goes here\n        String[] x_arr = x.split(\"/\");\n        String[] n_arr = n.split(\"/\");\n        int x_n = Integer.parseInt(x_arr[0]);\n        int x_d = Integer.parseInt(x_arr[1]);\n        int n_n = Integer.parseInt(n_arr[0]);\n        int n_d = Integer.parseInt(n_arr[1]);\n        return (x_n * n_d) % (x_d * n_n) == 0;",
        "grade-29": {
            "execution": 0
        },
        "6": "List<Integer> listX = Arrays.stream(x.split(\"/\")).map(Integer::parseInt).collect(Collectors.toList());\n        List<Integer> listN = Arrays.stream(n.split(\"/\")).map(Integer::parseInt).collect(Collectors.toList());\n        int numerator = listX.get(0) * listN.get(1);\n        int denominator = listX.get(1) * listN.get(0);\n        if (numerator == denominator) {\n            return true;\n        }\n        return (numerator % denominator == 0);",
        "grade-6": {
            "execution": 0
        },
        "197": "// Implement me!\n        // eg.\n        // x: 1/5, n: 5/1, return True\n        // x: 1/6, n: 2/1, return False\n        // x: 7/10, n: 10/2, return False\n        Fraction xf = new Fraction(x);\n        Fraction nf = new Fraction(n);\n        if (xf.multiply(nf).denominator == 1) {\n            return true;\n        }\n        return false;",
        "grade-197": {
            "execution": 0
        },
        "74": "// As a first step, you can convert your strings to Fraction objects.\n        // The Fraction class, that implements a fraction,\n        // is provided in the attached test file.\n        Fraction xFraction = new Fraction(x);\n        Fraction nFraction = new Fraction(n);\n        // Then, you can convert a fraction to a double value, using the doubleValue() method.\n        // A fraction x * n is a whole number, if x * n.doubleValue() is a whole number.\n        double xnDouble = xFraction.multiply(nFraction).doubleValue();\n        return xnDouble % 1 == 0;",
        "grade-74": {
            "execution": 0
        },
        "66": "// you code here\n        boolean answer = false;\n        int num1 = Integer.parseInt(x.split(\"/\")[0]);\n        int den1 = Integer.parseInt(x.split(\"/\")[1]);\n        int num2 = Integer.parseInt(n.split(\"/\")[0]);\n        int den2 = Integer.parseInt(n.split(\"/\")[1]);\n        if (num1 * den2 % den1 == 0) {\n            answer = true;\n        }\n        return answer;",
        "grade-66": {
            "execution": 0
        },
        "60": "Fraction fx = new Fraction(x);\n        Fraction fn = new Fraction(n);\n        Fraction result = fx.multiply(fn);\n        return result.getDenominator() == 1;",
        "grade-60": {
            "execution": 0
        },
        "37": "return new Rational(x).multiply(new Rational(n)).isWhole();",
        "grade-37": {
            "execution": 0
        },
        "196": "String[] xArr = x.split(\"/\");\n        String[] nArr = n.split(\"/\");\n        int top = Integer.parseInt(xArr[0]) * Integer.parseInt(nArr[0]);\n        int bottom = Integer.parseInt(xArr[1]) * Integer.parseInt(nArr[1]);\n        return top % bottom == 0;",
        "grade-196": {
            "execution": 1
        },
        "27": "int gcd = gcd(Integer.parseInt(x.split(\"/\")[0]), Integer.parseInt(x.split(\"/\")[1]));\n        x = (Integer.parseInt(x.split(\"/\")[0]) / gcd) + \"/\" + (Integer.parseInt(x.split(\"/\")[1]) / gcd);\n        gcd = gcd(Integer.parseInt(n.split(\"/\")[0]), Integer.parseInt(n.split(\"/\")[1]));\n        n = (Integer.parseInt(n.split(\"/\")[0]) / gcd) + \"/\" + (Integer.parseInt(n.split(\"/\")[1]) / gcd);\n        double x_ = Double.parseDouble(x.split(\"/\")[0]) / Double.parseDouble(x.split(\"/\")[1]);\n        double n_ = Double.parseDouble(n.split(\"/\")[0]) / Double.parseDouble(n.split(\"/\")[1]);\n        if (Math.ceil(x_ * n_) == x_ * n_)\n            return true;\n        return false;",
        "grade-27": {
            "execution": 0
        },
        "181": "// your code goes here\n        String[] xArr = x.split(\"/\");\n        String[] nArr = n.split(\"/\");\n        BigInteger numX = new BigInteger(xArr[0]);\n        BigInteger denX = new BigInteger(xArr[1]);\n        BigInteger numN = new BigInteger(nArr[0]);\n        BigInteger denN = new BigInteger(nArr[1]);\n        BigInteger gcd = numX.gcd(denX);\n        numX = numX.divide(gcd);\n        denX = denX.divide(gcd);\n        gcd = numN.gcd(denN);\n        numN = numN.divide(gcd);\n        denN = denN.divide(gcd);\n        BigInteger numerator = numX.multiply(numN);\n        BigInteger denominator = denX.multiply(denN);\n        if (denominator.equals(numerator)) return true;\n        return false;",
        "grade-181": {
            "execution": 0
        },
        "146": "int xDen = Integer.parseInt(x.split(\"/\")[1]);\n        int nDen = Integer.parseInt(n.split(\"/\")[1]);\n        int den = xDen * nDen;\n        return den % Integer.parseInt(x.split(\"/\")[0]) == 0 && den % Integer.parseInt(n.split(\"/\")[0]) == 0;",
        "grade-146": {
            "execution": 0
        },
        "22": "// Write your code here\n        String[] x_frac = x.split(\"/\");\n        String[] n_frac = n.split(\"/\");\n        int x_numerator = Integer.parseInt(x_frac[0]);\n        int x_denominator = Integer.parseInt(x_frac[1]);\n        int n_numerator = Integer.parseInt(n_frac[0]);\n        int n_denominator = Integer.parseInt(n_frac[1]);\n        int num = x_numerator * n_numerator;\n        int den = x_denominator * n_denominator;\n        if (num % den == 0) {\n            return true;\n        }\n        return false;",
        "grade-22": {
            "execution": 1
        },
        "158": "String[] xs = x.split(\"/\");\n        String[] ns = n.split(\"/\");\n        double dx = Double.parseDouble(xs[0]) / Double.parseDouble(xs[1]);\n        double dn = Double.parseDouble(ns[0]) / Double.parseDouble(ns[1]);\n        double dxs = dx * dn;\n        return dxs == Math.floor(dxs);",
        "grade-158": {
            "execution": 1
        },
        "115": "// Split strings into pairs of numerator and denominator\n        Pair<Integer, Integer> xPair = getPair(x);\n        Pair<Integer, Integer> nPair = getPair(n);\n        // Calculate the product of the pairs (numerator and denominator)\n        int num = xPair.getValue0() * nPair.getValue0();\n        int den = xPair.getValue1() * nPair.getValue1();\n        // Simplify the fraction\n        Pair<Integer, Integer> productPair = simplifyFraction(num, den);\n        // Check if the fraction is a whole number\n        return productPair.getValue1() == 1;",
        "grade-115": {
            "execution": 0
        },
        "8": "return (float) Integer.parseInt(x.split(\"/\")[0]) / Integer.parseInt(x.split(\"/\")[1]) * Integer.parseInt(n.split(\"/\")[0]) / Integer.parseInt(n.split(\"/\")[1]) == (int) (float) Integer.parseInt(x.split(\"/\")[0]) / Integer.parseInt(x.split(\"/\")[1]) * Integer.parseInt(n.split(\"/\")[0]) / Integer.parseInt(n.split(\"/\")[1]);",
        "grade-8": {
            "execution": 0
        },
        "7": "Fraction fx = new Fraction(x);\n        Fraction fn = new Fraction(n);\n        if (fx.getNumerator() * fn.getDenominator() % fx.getDenominator() == 0) {\n            return true;\n        }\n        return false;",
        "grade-7": {
            "execution": 0
        },
        "24": "BigDecimal bx = new BigDecimal(x);\n        BigDecimal bn = new BigDecimal(n);\n        BigDecimal product = bx.multiply(bn);\n        return product.compareTo(product.setScale(0, RoundingMode.FLOOR)) == 0;",
        "grade-24": {
            "execution": 0
        },
        "58": "Fraction fractionX = Fraction.getFractionFromString(x);\n        Fraction fractionN = Fraction.getFractionFromString(n);\n        int multiplicationDenominator = fractionX.denominator * fractionN.denominator;\n        int multiplicationNumerator = fractionX.numerator * fractionN.numerator;\n        return multiplicationDenominator % multiplicationNumerator == 0;",
        "grade-58": {
            "execution": 0
        },
        "62": "String xn = multiply(x, n);\n        System.out.println(xn);\n        String[] xnArray = xn.split(\"/\");\n        BigInteger numerator = new BigInteger(xnArray[0]);\n        BigInteger denominator = new BigInteger(xnArray[1]);\n        BigInteger GCD = numerator.gcd(denominator);\n        if (GCD.equals(denominator)) {\n            return true;\n        }\n        return false;",
        "grade-62": {
            "execution": 0
        },
        "bleu-171": 0.017890900624673158,
        "bleu-29": 0.5005955404129314,
        "bleu-6": 0.17207469372787748,
        "bleu-197": 0.020256219869210893,
        "bleu-74": 0.026359516294456698,
        "bleu-66": 0.38937572686225586,
        "bleu-60": 0.01986805258582694,
        "bleu-37": 0.002210411236684565,
        "bleu-196": 0.6345411186372764,
        "bleu-27": 0.1440357001169506,
        "bleu-181": 0.175264907055714,
        "bleu-146": 0.4308288918199226,
        "bleu-22": 0.4337844440560591,
        "bleu-158": 0.3885050614381468,
        "bleu-115": 0.028413618929593105,
        "bleu-8": 0.2836644481747397,
        "bleu-7": 0.019679567892220834,
        "bleu-24": 0.028926149798858814,
        "bleu-58": 0.035336682631812395,
        "bleu-62": 0.22922066405183256,
        "codebleu-171": 0.21442983616356343,
        "codebleu-29": 0.7377653928266122,
        "codebleu-6": 0.5273603240318595,
        "codebleu-197": 0.3270932981472318,
        "codebleu-74": 0.37405849689372694,
        "codebleu-66": 0.5892545215911361,
        "codebleu-60": 0.22674453009627296,
        "codebleu-37": 0.11488914952546488,
        "codebleu-196": 0.7652110015017155,
        "codebleu-27": 0.6225997868245106,
        "codebleu-181": 0.6714554971838769,
        "codebleu-146": 0.5636396653079426,
        "codebleu-22": 0.7383702894441465,
        "codebleu-158": 0.7264745805258263,
        "codebleu-115": 0.417477596349442,
        "codebleu-8": 0.5756724154434052,
        "codebleu-7": 0.28318045486949844,
        "codebleu-24": 0.2951978470265011,
        "codebleu-58": 0.32128845454183247,
        "codebleu-62": 0.5361229015441263,
        "chrf-171": 0.11113522316405393,
        "chrf-29": 0.6041778194226021,
        "chrf-6": 0.44109178723575654,
        "chrf-197": 0.16048333042778018,
        "chrf-74": 0.16870320758542998,
        "chrf-66": 0.5488915570816247,
        "chrf-60": 0.12820246857228157,
        "chrf-37": 0.06814048930089463,
        "chrf-196": 0.6643921288033383,
        "chrf-27": 0.39121752999192155,
        "chrf-181": 0.3962633329950659,
        "chrf-146": 0.5371185231274159,
        "chrf-22": 0.6555887947056415,
        "chrf-158": 0.3521043982746614,
        "chrf-115": 0.30575931140926776,
        "chrf-8": 0.4770013093271393,
        "chrf-7": 0.17448800729162778,
        "chrf-24": 0.13078324270510822,
        "chrf-58": 0.25530618166634106,
        "chrf-62": 0.40294758785311574,
        "rougel-171": 0.2677165354330709,
        "rougel-29": 0.7244897959183672,
        "rougel-6": 0.41739130434782606,
        "rougel-197": 0.20320855614973263,
        "rougel-74": 0.24324324324324326,
        "rougel-66": 0.5196078431372548,
        "rougel-60": 0.29457364341085274,
        "rougel-37": 0.19819819819819817,
        "rougel-196": 0.8131868131868132,
        "rougel-27": 0.34316353887399464,
        "rougel-181": 0.3812709030100334,
        "rougel-146": 0.5026178010471205,
        "rougel-22": 0.6729857819905214,
        "rougel-158": 0.6451612903225806,
        "rougel-115": 0.2844444444444445,
        "rougel-8": 0.46530612244897956,
        "rougel-7": 0.30985915492957744,
        "rougel-24": 0.28767123287671226,
        "rougel-58": 0.3333333333333333,
        "rougel-62": 0.4725274725274725,
        "meteor-171": 0.15005903187721367,
        "meteor-29": 0.6823309073265406,
        "meteor-6": 0.3608289473684212,
        "meteor-197": 0.18512476655491306,
        "meteor-74": 0.26198261827266395,
        "meteor-66": 0.4346200778147848,
        "meteor-60": 0.18184409101333493,
        "meteor-37": 0.08423586040914562,
        "meteor-196": 0.8004744347031757,
        "meteor-27": 0.4632990059226416,
        "meteor-181": 0.44465800674753647,
        "meteor-146": 0.47136322255231045,
        "meteor-22": 0.6441326530612245,
        "meteor-158": 0.5058116786527318,
        "meteor-115": 0.29867311507936506,
        "meteor-8": 0.4695404237054297,
        "meteor-7": 0.19084171178138698,
        "meteor-24": 0.20825723476457556,
        "meteor-58": 0.22633549793809546,
        "meteor-62": 0.34414317877057354,
        "ruby-171": 0.18888888888888888,
        "ruby-29": 0.6509433962264151,
        "ruby-6": 0.25,
        "ruby-197": 0.061855670103092786,
        "ruby-74": 0.12121212121212122,
        "ruby-66": 0.3421052631578947,
        "ruby-60": 0.21111111111111114,
        "ruby-37": 0.12222222222222223,
        "ruby-196": 0.7608695652173914,
        "ruby-27": 0.21908127208480566,
        "ruby-181": 0.2535885167464115,
        "ruby-146": 0.27722772277227725,
        "ruby-22": 0.5867768595041323,
        "ruby-158": 0.6145833333333333,
        "ruby-115": 0.15555555555555556,
        "ruby-8": 0.3290322580645161,
        "ruby-7": 0.23333333333333328,
        "ruby-24": 0.21111111111111114,
        "ruby-58": 0.1777777777777778,
        "ruby-62": 0.2934782608695652,
        "codebertscore_f1-171": 0.7053480744361877,
        "codebertscore_f3-171": 0.6970881819725037,
        "codebertscore_f1-29": 0.8183813095092773,
        "codebertscore_f3-29": 0.8337889909744263,
        "codebertscore_f1-6": 0.8001012206077576,
        "codebertscore_f3-6": 0.835227906703949,
        "codebertscore_f1-197": 0.6965793371200562,
        "codebertscore_f3-197": 0.70257169008255,
        "codebertscore_f1-74": 0.6794363260269165,
        "codebertscore_f3-74": 0.7020962834358215,
        "codebertscore_f1-66": 0.8251426815986633,
        "codebertscore_f3-66": 0.8323165774345398,
        "codebertscore_f1-60": 0.7130536437034607,
        "codebertscore_f3-60": 0.7052245736122131,
        "codebertscore_f1-37": 0.672574520111084,
        "codebertscore_f3-37": 0.6714974045753479,
        "codebertscore_f1-196": 0.883821427822113,
        "codebertscore_f3-196": 0.8908975720405579,
        "codebertscore_f1-27": 0.7751795649528503,
        "codebertscore_f3-27": 0.7887566685676575,
        "codebertscore_f1-181": 0.7287079691886902,
        "codebertscore_f3-181": 0.7732563614845276,
        "codebertscore_f1-146": 0.8429200053215027,
        "codebertscore_f3-146": 0.8408090472221375,
        "codebertscore_f1-22": 0.8165206909179688,
        "codebertscore_f3-22": 0.8456549048423767,
        "codebertscore_f1-158": 0.8663191199302673,
        "codebertscore_f3-158": 0.8693099021911621,
        "codebertscore_f1-115": 0.7283603549003601,
        "codebertscore_f3-115": 0.7656418681144714,
        "codebertscore_f1-8": 0.8142120838165283,
        "codebertscore_f3-8": 0.7966774106025696,
        "codebertscore_f1-7": 0.7333181500434875,
        "codebertscore_f3-7": 0.7333433032035828,
        "codebertscore_f1-24": 0.7142369747161865,
        "codebertscore_f3-24": 0.7169745564460754,
        "codebertscore_f1-58": 0.7743130326271057,
        "codebertscore_f3-58": 0.7843047380447388,
        "codebertscore_f1-62": 0.7770183682441711,
        "codebertscore_f3-62": 0.7979219555854797,
        "codebertscore_s_f1-171": 0.7013646960258484,
        "codebertscore_s_f3-171": 0.6886972784996033,
        "codebertscore_s_f1-29": 0.8432523012161255,
        "codebertscore_s_f3-29": 0.8595132827758789,
        "codebertscore_s_f1-6": 0.8138912916183472,
        "codebertscore_s_f3-6": 0.8509787321090698,
        "codebertscore_s_f1-197": 0.7075979709625244,
        "codebertscore_s_f3-197": 0.7107593417167664,
        "codebertscore_s_f1-74": 0.7024739384651184,
        "codebertscore_s_f3-74": 0.725959062576294,
        "codebertscore_s_f1-66": 0.837816596031189,
        "codebertscore_s_f3-66": 0.8443259000778198,
        "codebertscore_s_f1-60": 0.7157955169677734,
        "codebertscore_s_f3-60": 0.7034913897514343,
        "codebertscore_s_f1-37": 0.679988443851471,
        "codebertscore_s_f3-37": 0.6708235740661621,
        "codebertscore_s_f1-196": 0.8831517100334167,
        "codebertscore_s_f3-196": 0.8862142562866211,
        "codebertscore_s_f1-27": 0.807531476020813,
        "codebertscore_s_f3-27": 0.8140530586242676,
        "codebertscore_s_f1-181": 0.761810839176178,
        "codebertscore_s_f3-181": 0.7954356670379639,
        "codebertscore_s_f1-146": 0.8451027274131775,
        "codebertscore_s_f3-146": 0.839473307132721,
        "codebertscore_s_f1-22": 0.8512604832649231,
        "codebertscore_s_f3-22": 0.8768283724784851,
        "codebertscore_s_f1-158": 0.8611262440681458,
        "codebertscore_s_f3-158": 0.8644619584083557,
        "codebertscore_s_f1-115": 0.75013667345047,
        "codebertscore_s_f3-115": 0.7814023494720459,
        "codebertscore_s_f1-8": 0.8336089253425598,
        "codebertscore_s_f3-8": 0.8172557950019836,
        "codebertscore_s_f1-7": 0.7440948486328125,
        "codebertscore_s_f3-7": 0.7404987812042236,
        "codebertscore_s_f1-24": 0.709000825881958,
        "codebertscore_s_f3-24": 0.7069516181945801,
        "codebertscore_s_f1-58": 0.7710312008857727,
        "codebertscore_s_f3-58": 0.7797904014587402,
        "codebertscore_s_f1-62": 0.791677713394165,
        "codebertscore_s_f3-62": 0.8108240962028503,
        "gpt35_nsnr-171": 4,
        "raw_gpt35_nsnr-171": "4",
        "gpt35_nsnr-29": 4,
        "raw_gpt35_nsnr-29": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-197": 4,
        "raw_gpt35_nsnr-197": "4",
        "gpt35_nsnr-74": 4,
        "raw_gpt35_nsnr-74": "4",
        "gpt35_nsnr-66": 4,
        "raw_gpt35_nsnr-66": "4",
        "gpt35_nsnr-60": 4,
        "raw_gpt35_nsnr-60": "4",
        "gpt35_nsnr-37": 4,
        "raw_gpt35_nsnr-37": "4",
        "gpt35_nsnr-196": 4,
        "raw_gpt35_nsnr-196": "4",
        "gpt35_nsnr-27": 4,
        "raw_gpt35_nsnr-27": "4",
        "gpt35_nsnr-181": 4,
        "raw_gpt35_nsnr-181": "4",
        "gpt35_nsnr-146": 4,
        "raw_gpt35_nsnr-146": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-158": 3,
        "raw_gpt35_nsnr-158": "3",
        "gpt35_nsnr-115": 4,
        "raw_gpt35_nsnr-115": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-24": 4,
        "raw_gpt35_nsnr-24": "4",
        "gpt35_nsnr-58": 4,
        "raw_gpt35_nsnr-58": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nswr-171": 3,
        "raw_gpt35_nswr-171": "3",
        "gpt35_nswr-29": 4,
        "raw_gpt35_nswr-29": "4",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-197": 3,
        "raw_gpt35_nswr-197": "3",
        "gpt35_nswr-74": 4,
        "raw_gpt35_nswr-74": "4",
        "gpt35_nswr-66": 3,
        "raw_gpt35_nswr-66": "3",
        "gpt35_nswr-60": 3,
        "raw_gpt35_nswr-60": "3",
        "gpt35_nswr-37": 3,
        "raw_gpt35_nswr-37": "3",
        "gpt35_nswr-196": 4,
        "raw_gpt35_nswr-196": "4",
        "gpt35_nswr-27": 3,
        "raw_gpt35_nswr-27": "3",
        "gpt35_nswr-181": 4,
        "raw_gpt35_nswr-181": "4",
        "gpt35_nswr-146": 3,
        "raw_gpt35_nswr-146": "3",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-158": 3,
        "raw_gpt35_nswr-158": "3",
        "gpt35_nswr-115": 4,
        "raw_gpt35_nswr-115": "4",
        "gpt35_nswr-8": 2,
        "raw_gpt35_nswr-8": "2",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-24": 3,
        "raw_gpt35_nswr-24": "3",
        "gpt35_nswr-58": 3,
        "raw_gpt35_nswr-58": "3",
        "gpt35_nswr-62": 3,
        "raw_gpt35_nswr-62": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    // >>> derivative([3, 1, 2, 4, 5])\n    // [1, 4, 12, 20]\n    // >>> derivative([1, 2, 3])\n    // [2, 6]\n    public static ArrayList<Integer> derivative(ArrayList<Integer> xs) {\n",
        "snippet": [
            "        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(i * xs.get(i));\n        }\n        return result;\n    }\n}"
        ],
        "simplified": "xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 + .... Return derivative of this polynomial in the same form.",
        "task_id": "62",
        "184": "ArrayList<Integer> ret = new ArrayList<>();\n        if (xs.size() <= 1) {\n            return ret;\n        }\n        for (int i = 1; i < xs.size(); i++) {\n            ret.add(xs.get(i) * i);\n        }\n        return ret;",
        "grade-184": {
            "execution": 1
        },
        "14": "ArrayList<Integer> ys = new ArrayList<Integer>();\n        for (int i = 1; i < xs.size(); i++) {\n            ys.add(xs.get(i) * i);\n        }\n        return ys;",
        "grade-14": {
            "execution": 1
        },
        "3": "ArrayList<Integer> ans = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            ans.add(xs.get(i) * i);\n        }\n        return ans;",
        "grade-3": {
            "execution": 1
        },
        "54": "ArrayList<Integer> ret = new ArrayList<>();\n        int n = xs.size();\n        for (int i = 1; i < n; i++) {\n            ret.add(xs.get(i) * i);\n        }\n        return ret;",
        "grade-54": {
            "execution": 1
        },
        "47": "// return xs;\n        // return new ArrayList<>();\n        if (xs.size() <= 1) return new ArrayList<>();\n        int[] dx = new int[xs.size() - 1];\n        int k = 0;\n        for (int i = 0; i < xs.size() - 1; i++) {\n            dx[k++] = xs.get(i + 1) * (i + 1);\n        }\n        ArrayList<Integer> dxList = new ArrayList<>();\n        for (int i = 0; i < dx.length; i++) {\n            dxList.add(dx[i]);\n        }\n        return dxList;",
        "grade-47": {
            "execution": 1
        },
        "38": "return new ArrayList<Integer>();",
        "grade-38": {
            "execution": 0
        },
        "18": "ArrayList<Integer> ret = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            ret.add(xs.get(i) * i);\n        }\n        return ret;",
        "grade-18": {
            "execution": 1
        },
        "13": "ArrayList<Integer> ans = new ArrayList<>();\n        int n = xs.size();\n        for (int i = 1; i < n; i++) {\n            ans.add(xs.get(i) * i);\n        }\n        return ans;",
        "grade-13": {
            "execution": 1
        },
        "196": "// return (ArrayList<Integer>) xs.stream().mapToInt(e -> e.intValue()).boxed().collect(Collectors.toList());\n        ArrayList<Integer> res = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            res.add(xs.get(i) * i);\n        }\n        return res;",
        "grade-196": {
            "execution": 1
        },
        "153": "ArrayList<Integer> result = new ArrayList<Integer>();\n        int n = xs.size();\n        for (int i = 1; i < n; i++) {\n            result.add(xs.get(i) * i);\n        }\n        return result;",
        "grade-153": {
            "execution": 1
        },
        "11": "ArrayList<Integer> derivative = new ArrayList<Integer>();\n        if (xs.size() < 2) return derivative;\n        int i = 1;\n        while (i < xs.size()) {\n            derivative.add(xs.get(i) * i);\n            i++;\n        }\n        return derivative;",
        "grade-11": {
            "execution": 1
        },
        "174": "ArrayList<Integer> diff = new ArrayList<Integer>();\n        for (int i = 1; i < xs.size(); i++) {\n            diff.add(xs.get(i) * i);\n        }\n        return diff;",
        "grade-174": {
            "execution": 1
        },
        "116": "// ...\n        ArrayList<Integer> ans = new ArrayList<Integer>();\n        for (int i = 1; i < xs.size(); i++) {\n            ans.add(xs.get(i) * i);\n        }\n        return ans;",
        "grade-116": {
            "execution": 1
        },
        "4": "// Fill in the correct implementation.\n        return null;",
        "grade-4": {
            "execution": 0
        },
        "35": "// Write your code here.\n        ArrayList<Integer> solution = new ArrayList<Integer>();\n        for (int i = 1; i < xs.size(); i++) {\n            solution.add(xs.get(i) * i);\n        }\n        return solution;",
        "grade-35": {
            "execution": 1
        },
        "39": "ArrayList<Integer> derivative_xs = new ArrayList<Integer>();\n        for (int i = 1; i < xs.size(); i++) {\n            derivative_xs.add(xs.get(i) * i);\n        }\n        return derivative_xs;",
        "grade-39": {
            "execution": 1
        },
        "137": "ArrayList<Integer> ret = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++)\n            ret.add(xs.get(i) * i);\n        return ret;",
        "grade-137": {
            "execution": 1
        },
        "179": "if (xs.size() == 0) {\n            return new ArrayList<Integer>();\n        }\n        ArrayList<Integer> ret = new ArrayList<Integer>();\n        for (int i = 1; i < xs.size(); i++) {\n            ret.add(xs.get(i) * i);\n        }\n        return ret;",
        "grade-179": {
            "execution": 1
        },
        "160": "ArrayList<Integer> d = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            d.add(xs.get(i) * i);\n        }\n        return d;",
        "grade-160": {
            "execution": 1
        },
        "33": "return null;",
        "grade-33": {
            "execution": 0
        },
        "bleu-184": 0.5538007211469452,
        "bleu-14": 0.7041455964262171,
        "bleu-3": 0.737499871385471,
        "bleu-54": 0.6374886374864807,
        "bleu-47": 0.23274130814789956,
        "bleu-38": 0.008976091448653562,
        "bleu-18": 0.737499871385471,
        "bleu-13": 0.6374886374864807,
        "bleu-196": 0.4062132029965808,
        "bleu-153": 0.7246242754143105,
        "bleu-11": 0.4288284028349089,
        "bleu-174": 0.7041455964262171,
        "bleu-116": 0.6428912767631794,
        "bleu-4": 0.0009893669844754415,
        "bleu-35": 0.6212737186057085,
        "bleu-39": 0.7041455964262171,
        "bleu-137": 0.6889016729273592,
        "bleu-179": 0.4951062141012768,
        "bleu-160": 0.737499871385471,
        "bleu-33": 1.4352362462145712e-08,
        "codebleu-184": 0.7902549270084271,
        "codebleu-14": 0.770735212440153,
        "codebleu-3": 0.8008342986994451,
        "codebleu-54": 0.7753978065604229,
        "codebleu-47": 0.696781887717553,
        "codebleu-38": 0.07909790502320299,
        "codebleu-18": 0.8008342986994451,
        "codebleu-13": 0.7753978065604229,
        "codebleu-196": 0.7643130352876525,
        "codebleu-153": 0.7655065209609382,
        "codebleu-11": 0.6852211762413499,
        "codebleu-174": 0.770735212440153,
        "codebleu-116": 0.7663961364437465,
        "codebleu-4": 0.07893730098993984,
        "codebleu-35": 0.7439228619982198,
        "codebleu-39": 0.770735212440153,
        "codebleu-137": 0.7591786111601152,
        "codebleu-179": 0.7478280547459695,
        "codebleu-160": 0.8008342986994451,
        "codebleu-33": 0.01731607378045932,
        "chrf-184": 0.7170530139583731,
        "chrf-14": 0.6738439914729494,
        "chrf-3": 0.697699535053192,
        "chrf-54": 0.7185626126255733,
        "chrf-47": 0.5157642144124505,
        "chrf-38": 0.26767065103257365,
        "chrf-18": 0.7718940142092631,
        "chrf-13": 0.6469662056342707,
        "chrf-196": 0.6605744335361896,
        "chrf-153": 0.8216600732370816,
        "chrf-11": 0.5089400998941926,
        "chrf-174": 0.6613106693196176,
        "chrf-116": 0.6634741941405742,
        "chrf-4": 0.09967742809482184,
        "chrf-35": 0.6421452731456864,
        "chrf-39": 0.6375296300640929,
        "chrf-137": 0.7251703038253291,
        "chrf-179": 0.6826194806908926,
        "chrf-160": 0.7011744044197549,
        "chrf-33": 0.0530679916778986,
        "rougel-184": 0.7642276422764227,
        "rougel-14": 0.8703703703703703,
        "rougel-3": 0.8785046728971964,
        "rougel-54": 0.75,
        "rougel-47": 0.41545893719806765,
        "rougel-38": 0.25,
        "rougel-18": 0.8785046728971964,
        "rougel-13": 0.75,
        "rougel-196": 0.6184210526315789,
        "rougel-153": 0.7964601769911505,
        "rougel-11": 0.694214876033058,
        "rougel-174": 0.8703703703703703,
        "rougel-116": 0.8318584070796461,
        "rougel-4": 0.0923076923076923,
        "rougel-35": 0.817391304347826,
        "rougel-39": 0.8703703703703703,
        "rougel-137": 0.8571428571428571,
        "rougel-179": 0.7175572519083969,
        "rougel-160": 0.8785046728971964,
        "rougel-33": 0.07017543859649122,
        "meteor-184": 0.8625297297297297,
        "meteor-14": 0.8943919971616765,
        "meteor-3": 0.9024146556127279,
        "meteor-54": 0.8701107994218096,
        "meteor-47": 0.5505852895148671,
        "meteor-38": 0.15,
        "meteor-18": 0.9024146556127279,
        "meteor-13": 0.8701107994218096,
        "meteor-196": 0.832879279752158,
        "meteor-153": 0.922707100591716,
        "meteor-11": 0.7907507346292947,
        "meteor-174": 0.8943919971616765,
        "meteor-116": 0.8861865659950556,
        "meteor-4": 0.030181086519114685,
        "meteor-35": 0.882946395735476,
        "meteor-39": 0.8943919971616765,
        "meteor-137": 0.8696225783636098,
        "meteor-179": 0.8735488454706929,
        "meteor-160": 0.9024146556127279,
        "meteor-33": 0.02044989775051125,
        "ruby-184": 0.6231884057971014,
        "ruby-14": 0.7962962962962963,
        "ruby-3": 0.8148148148148149,
        "ruby-54": 0.5862068965517242,
        "ruby-47": 0.2679738562091504,
        "ruby-38": 0.12962962962962965,
        "ruby-18": 0.8148148148148149,
        "ruby-13": 0.5862068965517242,
        "ruby-196": 0.4387755102040817,
        "ruby-153": 0.6271186440677966,
        "ruby-11": 0.5223880597014925,
        "ruby-174": 0.7962962962962963,
        "ruby-116": 0.728813559322034,
        "ruby-4": 0.05555555555555558,
        "ruby-35": 0.7049180327868853,
        "ruby-39": 0.7962962962962963,
        "ruby-137": 0.7777777777777778,
        "ruby-179": 0.5584415584415585,
        "ruby-160": 0.8148148148148149,
        "ruby-33": 0.03703703703703709,
        "codebertscore_f1-184": 0.9095242619514465,
        "codebertscore_f3-184": 0.918647825717926,
        "codebertscore_f1-14": 0.9184930324554443,
        "codebertscore_f3-14": 0.9264342784881592,
        "codebertscore_f1-3": 0.9460890889167786,
        "codebertscore_f3-3": 0.9474902749061584,
        "codebertscore_f1-54": 0.9318570494651794,
        "codebertscore_f3-54": 0.9394091367721558,
        "codebertscore_f1-47": 0.7953100204467773,
        "codebertscore_f3-47": 0.8244357705116272,
        "codebertscore_f1-38": 0.7246392369270325,
        "codebertscore_f3-38": 0.6673397421836853,
        "codebertscore_f1-18": 0.9526594281196594,
        "codebertscore_f3-18": 0.9541220664978027,
        "codebertscore_f1-13": 0.9247211217880249,
        "codebertscore_f3-13": 0.9319469332695007,
        "codebertscore_f1-196": 0.8504926562309265,
        "codebertscore_f3-196": 0.8944015502929688,
        "codebertscore_f1-153": 0.9385555386543274,
        "codebertscore_f3-153": 0.9466561675071716,
        "codebertscore_f1-11": 0.8665644526481628,
        "codebertscore_f3-11": 0.874703586101532,
        "codebertscore_f1-174": 0.9400991797447205,
        "codebertscore_f3-174": 0.942160427570343,
        "codebertscore_f1-116": 0.9304855465888977,
        "codebertscore_f3-116": 0.9372638463973999,
        "codebertscore_f1-4": 0.6328187584877014,
        "codebertscore_f3-4": 0.6245134472846985,
        "codebertscore_f1-35": 0.8977856636047363,
        "codebertscore_f3-35": 0.9234636425971985,
        "codebertscore_f1-39": 0.9059615135192871,
        "codebertscore_f3-39": 0.9153739213943481,
        "codebertscore_f1-137": 0.9469538331031799,
        "codebertscore_f3-137": 0.9484989643096924,
        "codebertscore_f1-179": 0.8904022574424744,
        "codebertscore_f3-179": 0.9027411937713623,
        "codebertscore_f1-160": 0.9485543370246887,
        "codebertscore_f3-160": 0.9501946568489075,
        "codebertscore_f1-33": 0.5816807150840759,
        "codebertscore_f3-33": 0.5442289113998413,
        "codebertscore_s_f1-184": 0.9657385945320129,
        "codebertscore_s_f3-184": 0.9705221056938171,
        "codebertscore_s_f1-14": 0.974587082862854,
        "codebertscore_s_f3-14": 0.9790851473808289,
        "codebertscore_s_f1-3": 0.9834990501403809,
        "codebertscore_s_f3-3": 0.9842903017997742,
        "codebertscore_s_f1-54": 0.9772133231163025,
        "codebertscore_s_f3-54": 0.9807712435722351,
        "codebertscore_s_f1-47": 0.8991100788116455,
        "codebertscore_s_f3-47": 0.9349769353866577,
        "codebertscore_s_f1-38": 0.9360513091087341,
        "codebertscore_s_f3-38": 0.9035431742668152,
        "codebertscore_s_f1-18": 0.986814022064209,
        "codebertscore_s_f3-18": 0.9876148700714111,
        "codebertscore_s_f1-13": 0.9743286967277527,
        "codebertscore_s_f3-13": 0.977789580821991,
        "codebertscore_s_f1-196": 0.9335423707962036,
        "codebertscore_s_f3-196": 0.959202229976654,
        "codebertscore_s_f1-153": 0.9800088405609131,
        "codebertscore_s_f3-153": 0.9838235378265381,
        "codebertscore_s_f1-11": 0.9508683681488037,
        "codebertscore_s_f3-11": 0.9563428163528442,
        "codebertscore_s_f1-174": 0.9814716577529907,
        "codebertscore_s_f3-174": 0.9824951887130737,
        "codebertscore_s_f1-116": 0.9783156514167786,
        "codebertscore_s_f3-116": 0.9807341694831848,
        "codebertscore_s_f1-4": 0.9131484031677246,
        "codebertscore_s_f3-4": 0.8929402828216553,
        "codebertscore_s_f1-35": 0.9646091461181641,
        "codebertscore_s_f3-35": 0.9763892292976379,
        "codebertscore_s_f1-39": 0.9719364643096924,
        "codebertscore_s_f3-39": 0.9747457504272461,
        "codebertscore_s_f1-137": 0.9847081899642944,
        "codebertscore_s_f3-137": 0.9854196310043335,
        "codebertscore_s_f1-179": 0.9585921764373779,
        "codebertscore_s_f3-179": 0.9655466079711914,
        "codebertscore_s_f1-160": 0.9849355816841125,
        "codebertscore_s_f3-160": 0.9857082962989807,
        "codebertscore_s_f1-33": 0.928718090057373,
        "codebertscore_s_f3-33": 0.8923730254173279,
        "gpt35_nsnr-184": 3,
        "raw_gpt35_nsnr-184": "3",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-54": 4,
        "raw_gpt35_nsnr-54": "4",
        "gpt35_nsnr-47": 3,
        "raw_gpt35_nsnr-47": "3",
        "gpt35_nsnr-38": 2,
        "raw_gpt35_nsnr-38": "2",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-196": 3,
        "raw_gpt35_nsnr-196": "3",
        "gpt35_nsnr-153": 4,
        "raw_gpt35_nsnr-153": "4",
        "gpt35_nsnr-11": 3,
        "raw_gpt35_nsnr-11": "3",
        "gpt35_nsnr-174": 4,
        "raw_gpt35_nsnr-174": "4",
        "gpt35_nsnr-116": 4,
        "raw_gpt35_nsnr-116": "4",
        "gpt35_nsnr-4": 0,
        "raw_gpt35_nsnr-4": "0",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-39": 4,
        "raw_gpt35_nsnr-39": "4",
        "gpt35_nsnr-137": 4,
        "raw_gpt35_nsnr-137": "4",
        "gpt35_nsnr-179": 3,
        "raw_gpt35_nsnr-179": "3",
        "gpt35_nsnr-160": 4,
        "raw_gpt35_nsnr-160": "4",
        "gpt35_nsnr-33": 0,
        "raw_gpt35_nsnr-33": "0",
        "gpt35_nswr-184": 4,
        "raw_gpt35_nswr-184": "4",
        "gpt35_nswr-14": 4,
        "raw_gpt35_nswr-14": "4",
        "gpt35_nswr-3": 4,
        "raw_gpt35_nswr-3": "4",
        "gpt35_nswr-54": 4,
        "raw_gpt35_nswr-54": "4",
        "gpt35_nswr-47": 3,
        "raw_gpt35_nswr-47": "3",
        "gpt35_nswr-38": 2,
        "raw_gpt35_nswr-38": "2",
        "gpt35_nswr-18": 4,
        "raw_gpt35_nswr-18": "4",
        "gpt35_nswr-13": 4,
        "raw_gpt35_nswr-13": "4",
        "gpt35_nswr-196": 4,
        "raw_gpt35_nswr-196": "4",
        "gpt35_nswr-153": 4,
        "raw_gpt35_nswr-153": "4",
        "gpt35_nswr-11": 4,
        "raw_gpt35_nswr-11": "4",
        "gpt35_nswr-174": 4,
        "raw_gpt35_nswr-174": "4",
        "gpt35_nswr-116": 4,
        "raw_gpt35_nswr-116": "4",
        "gpt35_nswr-4": 2,
        "raw_gpt35_nswr-4": "2",
        "gpt35_nswr-35": 4,
        "raw_gpt35_nswr-35": "4",
        "gpt35_nswr-39": 4,
        "raw_gpt35_nswr-39": "4",
        "gpt35_nswr-137": 4,
        "raw_gpt35_nswr-137": "4",
        "gpt35_nswr-179": 4,
        "raw_gpt35_nswr-179": "4",
        "gpt35_nswr-160": 4,
        "raw_gpt35_nswr-160": "4",
        "gpt35_nswr-33": 2,
        "raw_gpt35_nswr-33": "2"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> remove_vowels('')\n    // ''\n    // >>> remove_vowels('abcdef')\n    // 'bcdf'\n    // >>> remove_vowels('aaaaa')\n    // ''\n    // >>> remove_vowels('aaBAA')\n    // 'B'\n    // >>> remove_vowels('zbcd')\n    // 'zbcd'\n    public static String removeVowels(String text) {\n",
        "snippet": [
            "        StringBuilder sb = new StringBuilder();\n        for (char ch : text.toCharArray()) {\n            if (\"aeiou\".indexOf(Character.toLowerCase(ch)) == -1) {\n                sb.append(ch);\n            }\n        }\n        return sb.toString();\n    }\n}"
        ],
        "simplified": "remove_vowels is a function that takes string and returns string without vowels.",
        "task_id": "51",
        "118": "// TODO: Implement this method.\n        String str=\"\";\n        StringBuilder sb=new StringBuilder();\n        for(int i=0;i<text.length();i++){\n            char ch=text.charAt(i);\n            if(ch=='a'||ch=='e'||ch=='i'||ch=='o'||ch=='u'||ch=='A'||ch=='E'||ch=='I'||ch=='O'||ch=='U'){\n                sb.append(\"\");\n            }\n            else{\n                sb.append(ch);\n            }\n        }\n        str=sb.toString();\n        return str;",
        "grade-118": {
            "execution": 1
        },
        "16": "// your code here.\n        // Delete these comments and enter your own code.\n        List<Character> vowels = Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U');\n        return text.chars()\n            .mapToObj(i -> (char) i)\n            .filter(i -> !vowels.contains(i))\n            .map(Object::toString)\n            .collect(Collectors.joining());",
        "grade-16": {
            "execution": 1
        },
        "3": "return text.replaceAll(\"[aeiou]\", \"\");",
        "grade-3": {
            "execution": 0
        },
        "142": "StringBuilder str = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) != 'a' && text.charAt(i) != 'A' && text.charAt(i) != 'e' && text.charAt(i) != 'E' && text.charAt(i) != 'i' && text.charAt(i) != 'I' && text.charAt(i) != 'o' && text.charAt(i) != 'O' && text.charAt(i) != 'u' && text.charAt(i) != 'U') {\n                str.append(text.charAt(i));\n            }\n        }\n        return str.toString();",
        "grade-142": {
            "execution": 1
        },
        "46": "String vowelChars = \"aeiouAEIOU\";\n        String ans = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            if (vowelChars.indexOf(text.charAt(i)) == -1) {\n                ans += text.charAt(i);\n            }\n        }\n        return ans;",
        "grade-46": {
            "execution": 1
        },
        "40": "// Implement me!\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            if (!isVowel(text.charAt(i))) {\n                sb.append(text.charAt(i));\n            }\n        }\n        return sb.toString();",
        "grade-40": {
            "execution": 0
        },
        "36": "// TODO: replace this line with your code\n        return null;",
        "grade-36": {
            "execution": 0
        },
        "19": "// TODO\n        return \"\";",
        "grade-19": {
            "execution": 0
        },
        "15": "StringBuilder result = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) != 'a' && text.charAt(i) != 'e' && text.charAt(i) != 'i' && text.charAt(i) != 'o' && text.charAt(i) != 'u') {\n                result.append(text.charAt(i));\n            }\n        }\n        return result.toString();",
        "grade-15": {
            "execution": 0
        },
        "126": "// text: string\n        // return: string\n        return text.replaceAll(\"[aeiouAEIOU]\", \"\");",
        "grade-126": {
            "execution": 1
        },
        "183": "if (text.isEmpty()) {\n            return text;\n        } else {\n            String vowels = \"aeiouAEIOU\";\n            String current = \"\";\n            String remaining = \"\";\n            String remainder = \"\";\n            String initial = \"\";\n            String finals = \"\";\n            String first = \"\";\n            String second = \"\";\n            String third = \"\";\n            String fourth = \"\";\n            String fifth = \"\";\n            String sixth = \"\";\n            String seventh = \"\";\n            String eighth = \"\";\n            String ninth = \"\";\n            String tenth = \"\";\n            String eleventh = \"\";\n            String twelfth = \"\";\n            String thirteenth = \"\";\n            String fourteenth = \"\";\n            String fifteenth = \"\";\n            String sixteenth = \"\";\n            String seventeenth = \"\";\n            String eighteenth = \"\";\n            String nineteenth = \"\";\n            String twentieth = \"\";\n            String twentyfirst = \"\";\n            String twentysecond = \"\";\n            String twentythird = \"\";\n            String twentyfourth = \"\";\n            String twentyfifth = \"\";\n            String twentysixth = \"\";\n            String twentyseventh = \"\";\n            String twentyeighth = \"\";\n            String twentyninth = \"\";\n            String thirtieth = \"\";\n            String thirtyfirst = \"\";\n            String thirtysecond = \"\";\n            String thirtythird = \"\";\n            String thirtyfourth = \"\";\n            String thirtyfifth = \"\";\n            String thirtysixth = \"\";\n            String thirtyseventh = \"\";\n            String thirtyeighth = \"\";\n            String thirtyninth = \"\";\n            String fortieth = \"\";\n            String fortyfirst = \"\";\n            String fortysecond = \"\";\n            String fortythird = \"\";\n            String fortyfourth = \"\";\n            String fortyfifth = \"\";\n            String fortysixth = \"\";\n            String fortyseventh = \"\";\n            String fortyeighth = \"\";\n            String fortyninth = \"\";\n            String fiftieth = \"\";\n            String fiftyfirst = \"\";\n            String fiftysecond = \"\";\n            String fiftythird = \"\";\n            String fiftyfourth = \"\";\n            String fiftyfifth = \"\";",
        "grade-183": {
            "execution": 0
        },
        "99": "List<Character> vowels = new ArrayList<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n        StringBuilder filteredText = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            if (!vowels.contains(text.charAt(i))) {\n                filteredText.append(text.charAt(i));\n            }\n        }\n        return filteredText.toString();",
        "grade-99": {
            "execution": 1
        },
        "12": "String vowels = \"aeiou\";\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            if (vowels.indexOf(text.charAt(i)) == -1) {\n                result.append(text.charAt(i));\n            }\n        }\n        return result.toString();",
        "grade-12": {
            "execution": 0
        },
        "106": "StringBuilder stringBuilder = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                stringBuilder.append(c);\n            }\n        }\n        return stringBuilder.toString();",
        "grade-106": {
            "execution": 0
        },
        "76": "// Your code goes here.\n        StringBuilder sb = new StringBuilder();\n        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        Arrays.sort(vowels);\n        for (char c : text.toCharArray()) {\n            if (Arrays.binarySearch(vowels, c) < 0) {\n                sb.append(c);\n            }\n        }\n        return sb.toString();",
        "grade-76": {
            "execution": 0
        },
        "4": "throw new UnsupportedOperationException(\"Problem.removeVowels is not implemented yet.\");",
        "grade-4": {
            "execution": 0
        },
        "34": "String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (!isVowel(c))\n                result += c;\n        }\n        return result;",
        "grade-34": {
            "execution": 0
        },
        "37": "String vowels = \"aeiouAEIOU\";\n        StringBuilder builder = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            char ch = text.charAt(i);\n            if (vowels.indexOf(ch) == -1) {\n                builder.append(ch);\n            }\n        }\n        return builder.toString();",
        "grade-37": {
            "execution": 1
        },
        "89": "StringBuffer b = new StringBuffer();\n        for (int i = 0; i < text.length(); i++) {\n            if (!isVowel(text.charAt(i))) {\n                b.append(text.charAt(i));\n            }\n        }\n        return b.toString();",
        "grade-89": {
            "execution": 0
        },
        "110": "StringBuilder sb = new StringBuilder();\n        String vowels = \"aeiouAEIOU\";\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (vowels.indexOf(c) == -1) {\n                sb.append(c);\n            }\n        }\n        return sb.toString();",
        "grade-110": {
            "execution": 1
        },
        "bleu-118": 0.18976178399923918,
        "bleu-16": 0.030217834207526058,
        "bleu-3": 0.0038697608430032777,
        "bleu-142": 0.11594825609323646,
        "bleu-46": 0.2625895643310636,
        "bleu-40": 0.42827176391497906,
        "bleu-36": 0.000638430366887983,
        "bleu-19": 1.7594464455813712e-05,
        "bleu-15": 0.1816723277276683,
        "bleu-126": 0.012416136939859641,
        "bleu-183": 0.011074761536349826,
        "bleu-99": 0.17944388954117863,
        "bleu-12": 0.3882180568494508,
        "bleu-106": 0.20220105142767736,
        "bleu-76": 0.4019377873190748,
        "bleu-4": 0.005444321200137687,
        "bleu-34": 0.06296853710176195,
        "bleu-37": 0.4069501872583709,
        "bleu-89": 0.27748025979243246,
        "bleu-110": 0.44880178822474887,
        "codebleu-118": 0.6686247621891901,
        "codebleu-16": 0.48991010823702075,
        "codebleu-3": 0.07983994290709606,
        "codebleu-142": 0.6302513300311868,
        "codebleu-46": 0.5744985106763182,
        "codebleu-40": 0.619326435044587,
        "codebleu-36": 0.07307331348661834,
        "codebleu-19": 0.04349837893644441,
        "codebleu-15": 0.6230049532195927,
        "codebleu-126": 0.11212167393566909,
        "codebleu-183": 0.3571017099350162,
        "codebleu-99": 0.6272243625022931,
        "codebleu-12": 0.6692216473980257,
        "codebleu-106": 0.5991561181434599,
        "codebleu-76": 0.6858741898463657,
        "codebleu-4": 0.06522268013724612,
        "codebleu-34": 0.42641319646335835,
        "codebleu-37": 0.6892418451637192,
        "codebleu-89": 0.6012658227848101,
        "codebleu-110": 0.6839000529895551,
        "chrf-118": 0.48089293192855054,
        "chrf-16": 0.2680402744265733,
        "chrf-3": 0.0871571023394171,
        "chrf-142": 0.4000269864473237,
        "chrf-46": 0.3452598500495918,
        "chrf-40": 0.5342670490582673,
        "chrf-36": 0.07940089349140782,
        "chrf-19": 0.03318688021858255,
        "chrf-15": 0.432580674583147,
        "chrf-126": 0.13895584699587277,
        "chrf-183": 0.10943564498840143,
        "chrf-99": 0.46301745105063596,
        "chrf-12": 0.5321380026136379,
        "chrf-106": 0.45924879244204275,
        "chrf-76": 0.6258089867493585,
        "chrf-4": 0.10228546222954053,
        "chrf-34": 0.21090341420183914,
        "chrf-37": 0.5635545419624819,
        "chrf-89": 0.4211083917322144,
        "chrf-110": 0.6023470443145528,
        "rougel-118": 0.364406779661017,
        "rougel-16": 0.24468085106382978,
        "rougel-3": 0.19277108433734938,
        "rougel-142": 0.3435114503816794,
        "rougel-46": 0.5142857142857142,
        "rougel-40": 0.6099290780141844,
        "rougel-36": 0.075,
        "rougel-19": 0.08108108108108107,
        "rougel-15": 0.46875,
        "rougel-126": 0.19148936170212766,
        "rougel-183": 0.0665188470066519,
        "rougel-99": 0.4120603015075377,
        "rougel-12": 0.6351351351351352,
        "rougel-106": 0.45882352941176474,
        "rougel-76": 0.5609756097560976,
        "rougel-4": 0.1627906976744186,
        "rougel-34": 0.34426229508196726,
        "rougel-37": 0.6216216216216215,
        "rougel-89": 0.5588235294117646,
        "rougel-110": 0.6351351351351352,
        "meteor-118": 0.6207765246642698,
        "meteor-16": 0.3368864878101039,
        "meteor-3": 0.09433774107979817,
        "meteor-142": 0.4746240601503759,
        "meteor-46": 0.3836341780216762,
        "meteor-40": 0.6224612259970459,
        "meteor-36": 0.024350649350649352,
        "meteor-19": 0.03278688524590165,
        "meteor-15": 0.520260989010989,
        "meteor-126": 0.11711860670194002,
        "meteor-183": 0.1165146909827761,
        "meteor-99": 0.5533170068027211,
        "meteor-12": 0.6539802415308489,
        "meteor-106": 0.5117091595845138,
        "meteor-76": 0.7052910052910053,
        "meteor-4": 0.08553557073954983,
        "meteor-34": 0.25000844309354947,
        "meteor-37": 0.7451573147745396,
        "meteor-89": 0.5200003541167685,
        "meteor-110": 0.7510463486540042,
        "ruby-118": 0.24852071005917165,
        "ruby-16": 0.12396694214876036,
        "ruby-3": 0.10447761194029848,
        "ruby-142": 0.2153846153846154,
        "ruby-46": 0.34246575342465757,
        "ruby-40": 0.41891891891891897,
        "ruby-36": 0.04477611940298509,
        "ruby-19": 0.04477611940298509,
        "ruby-15": 0.31999999999999995,
        "ruby-126": 0.10447761194029848,
        "ruby-183": 0.02864583333333337,
        "ruby-99": 0.23484848484848486,
        "ruby-12": 0.49382716049382713,
        "ruby-106": 0.3398058252427184,
        "ruby-76": 0.3608247422680413,
        "ruby-4": 0.10447761194029848,
        "ruby-34": 0.17910447761194026,
        "ruby-37": 0.45679012345679015,
        "ruby-89": 0.3913043478260869,
        "ruby-110": 0.4691358024691358,
        "codebertscore_f1-118": 0.7567914128303528,
        "codebertscore_f3-118": 0.7789386510848999,
        "codebertscore_f1-16": 0.6713030934333801,
        "codebertscore_f3-16": 0.6899489760398865,
        "codebertscore_f1-3": 0.6827898621559143,
        "codebertscore_f3-3": 0.6273350119590759,
        "codebertscore_f1-142": 0.7574198842048645,
        "codebertscore_f3-142": 0.7870562076568604,
        "codebertscore_f1-46": 0.7838888764381409,
        "codebertscore_f3-46": 0.7849661111831665,
        "codebertscore_f1-40": 0.8252113461494446,
        "codebertscore_f3-40": 0.8304934501647949,
        "codebertscore_f1-36": 0.597065269947052,
        "codebertscore_f3-36": 0.5834966897964478,
        "codebertscore_f1-19": 0.5783951282501221,
        "codebertscore_f3-19": 0.5528291463851929,
        "codebertscore_f1-15": 0.7902148365974426,
        "codebertscore_f3-15": 0.8034475445747375,
        "codebertscore_f1-126": 0.7000221610069275,
        "codebertscore_f3-126": 0.6597200036048889,
        "codebertscore_f1-183": 0.5933071374893188,
        "codebertscore_f3-183": 0.6505276560783386,
        "codebertscore_f1-99": 0.7599350214004517,
        "codebertscore_f3-99": 0.7755914926528931,
        "codebertscore_f1-12": 0.8452721834182739,
        "codebertscore_f3-12": 0.8594417572021484,
        "codebertscore_f1-106": 0.818044126033783,
        "codebertscore_f3-106": 0.8274932503700256,
        "codebertscore_f1-76": 0.8103423118591309,
        "codebertscore_f3-76": 0.8414537310600281,
        "codebertscore_f1-4": 0.6145384907722473,
        "codebertscore_f3-4": 0.6082725524902344,
        "codebertscore_f1-34": 0.7629969120025635,
        "codebertscore_f3-34": 0.7501357197761536,
        "codebertscore_f1-37": 0.8440179824829102,
        "codebertscore_f3-37": 0.860481858253479,
        "codebertscore_f1-89": 0.8242955207824707,
        "codebertscore_f3-89": 0.8236624598503113,
        "codebertscore_f1-110": 0.859878659248352,
        "codebertscore_f3-110": 0.879056990146637,
        "codebertscore_s_f1-118": 0.7775017619132996,
        "codebertscore_s_f3-118": 0.8036587238311768,
        "codebertscore_s_f1-16": 0.6849626898765564,
        "codebertscore_s_f3-16": 0.7043237686157227,
        "codebertscore_s_f1-3": 0.7384584546089172,
        "codebertscore_s_f3-3": 0.6809956431388855,
        "codebertscore_s_f1-142": 0.7608721852302551,
        "codebertscore_s_f3-142": 0.7834462523460388,
        "codebertscore_s_f1-46": 0.7912417054176331,
        "codebertscore_s_f3-46": 0.7929602861404419,
        "codebertscore_s_f1-40": 0.8352432250976562,
        "codebertscore_s_f3-40": 0.8400228023529053,
        "codebertscore_s_f1-36": 0.605436384677887,
        "codebertscore_s_f3-36": 0.5907319188117981,
        "codebertscore_s_f1-19": 0.6104320883750916,
        "codebertscore_s_f3-19": 0.5821107029914856,
        "codebertscore_s_f1-15": 0.7989296913146973,
        "codebertscore_s_f3-15": 0.808725118637085,
        "codebertscore_s_f1-126": 0.7257089614868164,
        "codebertscore_s_f3-126": 0.6875202655792236,
        "codebertscore_s_f1-183": 0.6615473628044128,
        "codebertscore_s_f3-183": 0.6916587948799133,
        "codebertscore_s_f1-99": 0.7601368427276611,
        "codebertscore_s_f3-99": 0.7710162401199341,
        "codebertscore_s_f1-12": 0.8516982793807983,
        "codebertscore_s_f3-12": 0.8641082644462585,
        "codebertscore_s_f1-106": 0.8251850605010986,
        "codebertscore_s_f3-106": 0.8341691493988037,
        "codebertscore_s_f1-76": 0.814664363861084,
        "codebertscore_s_f3-76": 0.8436585068702698,
        "codebertscore_s_f1-4": 0.6189979910850525,
        "codebertscore_s_f3-4": 0.6073349118232727,
        "codebertscore_s_f1-34": 0.7718713283538818,
        "codebertscore_s_f3-34": 0.7606023550033569,
        "codebertscore_s_f1-37": 0.8511782288551331,
        "codebertscore_s_f3-37": 0.8663533329963684,
        "codebertscore_s_f1-89": 0.8290940523147583,
        "codebertscore_s_f3-89": 0.8271410465240479,
        "codebertscore_s_f1-110": 0.8659660816192627,
        "codebertscore_s_f3-110": 0.8842352032661438,
        "gpt35_nsnr-118": 4,
        "raw_gpt35_nsnr-118": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-142": 4,
        "raw_gpt35_nsnr-142": "4",
        "gpt35_nsnr-46": 4,
        "raw_gpt35_nsnr-46": "4",
        "gpt35_nsnr-40": 4,
        "raw_gpt35_nsnr-40": "4",
        "gpt35_nsnr-36": 0,
        "raw_gpt35_nsnr-36": "0",
        "gpt35_nsnr-19": 3,
        "raw_gpt35_nsnr-19": "3",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-126": 4,
        "raw_gpt35_nsnr-126": "4",
        "gpt35_nsnr-183": 2,
        "raw_gpt35_nsnr-183": "2",
        "gpt35_nsnr-99": 4,
        "raw_gpt35_nsnr-99": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-106": 4,
        "raw_gpt35_nsnr-106": "4",
        "gpt35_nsnr-76": 4,
        "raw_gpt35_nsnr-76": "4",
        "gpt35_nsnr-4": 0,
        "raw_gpt35_nsnr-4": "0",
        "gpt35_nsnr-34": 4,
        "raw_gpt35_nsnr-34": "4",
        "gpt35_nsnr-37": 4,
        "raw_gpt35_nsnr-37": "4",
        "gpt35_nsnr-89": 4,
        "raw_gpt35_nsnr-89": "4",
        "gpt35_nsnr-110": 4,
        "raw_gpt35_nsnr-110": "4",
        "gpt35_nswr-118": 3,
        "raw_gpt35_nswr-118": "3",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-142": 3,
        "raw_gpt35_nswr-142": "3",
        "gpt35_nswr-46": 4,
        "raw_gpt35_nswr-46": "4",
        "gpt35_nswr-40": 3,
        "raw_gpt35_nswr-40": "3",
        "gpt35_nswr-36": 0,
        "raw_gpt35_nswr-36": "0",
        "gpt35_nswr-19": 2,
        "raw_gpt35_nswr-19": "2",
        "gpt35_nswr-15": 4,
        "raw_gpt35_nswr-15": "4",
        "gpt35_nswr-126": 3,
        "raw_gpt35_nswr-126": "3",
        "gpt35_nswr-183": 1,
        "raw_gpt35_nswr-183": "1",
        "gpt35_nswr-99": 3,
        "raw_gpt35_nswr-99": "3",
        "gpt35_nswr-12": 4,
        "raw_gpt35_nswr-12": "4",
        "gpt35_nswr-106": 4,
        "raw_gpt35_nswr-106": "4",
        "gpt35_nswr-76": 4,
        "raw_gpt35_nswr-76": "4",
        "gpt35_nswr-4": 0,
        "raw_gpt35_nswr-4": "0",
        "gpt35_nswr-34": 3,
        "raw_gpt35_nswr-34": "3",
        "gpt35_nswr-37": 4,
        "raw_gpt35_nswr-37": "4",
        "gpt35_nswr-89": 3,
        "raw_gpt35_nswr-89": "3",
        "gpt35_nswr-110": 4,
        "raw_gpt35_nswr-110": "4"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return an array of the words.\n    // For example:\n    // words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    // words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    public static ArrayList<String> wordsString(String s) {\n",
        "snippet": [
            "        if (s.length() == 0) {\n            return List.of();\n        }\n        StringBuilder sb = new StringBuilder();\n\n        for (char letter : s.toCharArray()) {\n            if (letter == ',') {\n                sb.append(' ');\n            } else {\n                sb.append(letter);\n            }\n        }\n\n        return new ArrayList<>(Arrays.asList(sb.toString().split(\"\\s+\" )));\n    }\n}"
        ],
        "simplified": "You will be given a string of words separated by commas or spaces. Your task is to split the string into words and return an array of the words.",
        "task_id": "101",
        "32": "var array = new ArrayList<String>();\n        var temp = \"\";\n        var first_letter = false;\n        for (int i = 0; i < s.length(); i++) {\n            if (!first_letter && s.charAt(i) != ' ' && s.charAt(i) != ',') {\n                first_letter = true;\n                temp += s.charAt(i);\n            } else if (first_letter && s.charAt(i) != ' ' && s.charAt(i) != ',') {\n                temp += s.charAt(i);\n            } else if (first_letter && (s.charAt(i) == ' ' || s.charAt(i) == ',')) {\n                array.add(temp);\n                temp = \"\";\n                first_letter = false;\n            }\n        }\n        if (temp != \"\") {\n            array.add(temp);\n        }\n        return array;",
        "grade-32": {
            "execution": 1
        },
        "6": "return new ArrayList<String>(Arrays.asList(s.split(\"\\\\s|,\")));",
        "grade-6": {
            "execution": 0
        },
        "88": "ArrayList<String> array = new ArrayList<String>();\n        String word = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == ' ' || s.charAt(i) == ',') {\n                array.add(word);\n                word = \"\";\n            } else {\n                word += s.charAt(i);\n            }\n        }\n        array.add(word);\n        return array;",
        "grade-88": {
            "execution": 0
        },
        "77": "ArrayList<String> al = new ArrayList<>();\n        if(s.indexOf(\",\") > -1) {\n            String[] t = s.split(\",\");\n            al.addAll(Arrays.asList(t));\n        } else {\n            String[] t = s.split(\" \");\n            al.addAll(Arrays.asList(t));\n        }\n        return al;",
        "grade-77": {
            "execution": 0
        },
        "72": "String[] strings = s.split(\"[, ]+\");\n        ArrayList<String> arrlist = new ArrayList<String>(Arrays.asList(strings));\n        return arrlist;",
        "grade-72": {
            "execution": 0
        },
        "40": "ArrayList<String> words = new ArrayList<String>();\n        String[] tokens = s.split(\"[, ]+\");\n        for (String token : tokens) {\n            words.add(token);\n        }\n        return words;",
        "grade-40": {
            "execution": 0
        },
        "30": "ArrayList<String> res = new ArrayList<String>();\n        for (String w : s.split(\"[ ,]+\")) {\n            res.add(w);\n        }\n        return res;",
        "grade-30": {
            "execution": 0
        },
        "187": "ArrayList<String> arrayList = new ArrayList<String>();\n        String[] str_array = s.split(\"[, ]+\");\n        for (String str : str_array) {\n            arrayList.add(str);\n        }\n        return arrayList;",
        "grade-187": {
            "execution": 0
        },
        "25": "return (ArrayList<String>) Arrays.asList(s.split(\"[, ]+\"));",
        "grade-25": {
            "execution": 0
        },
        "143": "ArrayList<String> ret = new ArrayList<String>();\n        Scanner sc = new Scanner(s);\n        while (sc.hasNext()) {\n            ret.add(sc.next());\n        }\n        return ret;",
        "grade-143": {
            "execution": 0
        },
        "8": "return new ArrayList<String>(Arrays.asList(s.split(\"[ ,]+\")));",
        "grade-8": {
            "execution": 0
        },
        "7": "return new ArrayList<String>(Arrays.asList(s.split(\"\\\\s*(\\\\s|,)\\\\s*\")));",
        "grade-7": {
            "execution": 0
        },
        "27": "ArrayList<String> a = new ArrayList<>();\n        for (String word : s.split(\"[ ,]+\"))\n            a.add(word);\n        return a;",
        "grade-27": {
            "execution": 0
        },
        "70": "ArrayList<String> words = new ArrayList<String>();\n        String current = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == ' ' || s.charAt(i) == ',') {\n                if (current.length() > 0) {\n                    words.add(current);\n                    current = \"\";\n                }\n            } else {\n                current += s.charAt(i);\n            }\n        }\n        if (current.length() > 0) {\n            words.add(current);\n        }\n        return words;",
        "grade-70": {
            "execution": 1
        },
        "74": "return new ArrayList<String>(Arrays.asList(s.split(\"[ ,]\")));",
        "grade-74": {
            "execution": 0
        },
        "172": "ArrayList<String> words = new ArrayList<String>();\n        Pattern p = Pattern.compile(\"\\\\w+\");\n        Matcher m = p.matcher(s);\n        while (m.find()) {\n            words.add(m.group());\n        }\n        return words;",
        "grade-172": {
            "execution": 0
        },
        "195": "// Write your code here\n        return new ArrayList<String>(Arrays.asList(s.split(\"\\\\W+\")));",
        "grade-195": {
            "execution": 0
        },
        "61": "ArrayList<String> res = new ArrayList<String>();\n        String[] arr = s.split(\"[ ,]+\");\n        for (String i : arr)\n            res.add(i);\n        return res;",
        "grade-61": {
            "execution": 0
        },
        "142": "ArrayList<String> result = new ArrayList<String>();\n        // We need to remove all the spaces or commas at the start and end of the string.\n        // Split on \",\" or \" \"\n        String trimmedString = s.trim();\n        String[] words = trimmedString.split(\"[, ]+\");\n        for (String word : words) {\n            result.add(word);\n        }\n        return result;",
        "grade-142": {
            "execution": 0
        },
        "71": "ArrayList<String> list = new ArrayList<String>();\n        String[] words = s.split(\" |,\");\n        for (String word : words) {\n            list.add(word);\n        }\n        return list;",
        "grade-71": {
            "execution": 0
        },
        "bleu-32": 0.14217807635623306,
        "bleu-6": 0.04052283977244664,
        "bleu-88": 0.2598642438186987,
        "bleu-77": 0.2845631193926879,
        "bleu-72": 0.08118348592091093,
        "bleu-40": 0.08558649215555354,
        "bleu-30": 0.08591195771524279,
        "bleu-187": 0.09200526746872136,
        "bleu-25": 0.02063416033671149,
        "bleu-143": 0.07114558429939201,
        "bleu-8": 0.03482809666207756,
        "bleu-7": 0.07960303475163329,
        "bleu-27": 0.08090478578127035,
        "bleu-70": 0.2332917317455129,
        "bleu-74": 0.029162854079701393,
        "bleu-172": 0.10942162606319344,
        "bleu-195": 0.060627441381976475,
        "bleu-61": 0.07575897110683746,
        "bleu-142": 0.13772511609990723,
        "bleu-71": 0.08157880196339069,
        "codebleu-32": 0.6010967951881677,
        "codebleu-6": 0.1033370261841734,
        "codebleu-88": 0.5155375413032297,
        "codebleu-77": 0.4762118745585494,
        "codebleu-72": 0.17769680897754764,
        "codebleu-40": 0.2437816271296421,
        "codebleu-30": 0.21492651596359577,
        "codebleu-187": 0.23915199750001245,
        "codebleu-25": 0.11144863745469819,
        "codebleu-143": 0.26099037886968174,
        "codebleu-8": 0.11722591507306228,
        "codebleu-7": 0.1033370261841734,
        "codebleu-27": 0.1897516201726922,
        "codebleu-70": 0.6288110535620693,
        "codebleu-74": 0.11722591507306228,
        "codebleu-172": 0.3380763774760808,
        "codebleu-195": 0.12514051708165408,
        "codebleu-61": 0.21911410257358568,
        "codebleu-142": 0.38481716621076684,
        "codebleu-71": 0.2437816271296421,
        "chrf-32": 0.3228555307571941,
        "chrf-6": 0.23451696686534437,
        "chrf-88": 0.32765722670684666,
        "chrf-77": 0.33686532355675,
        "chrf-72": 0.2865527161219522,
        "chrf-40": 0.2541986167852856,
        "chrf-30": 0.2484635509989266,
        "chrf-187": 0.2700917165631696,
        "chrf-25": 0.19372415146219343,
        "chrf-143": 0.23249690381112575,
        "chrf-8": 0.23301571226180431,
        "chrf-7": 0.23551082498389564,
        "chrf-27": 0.22490092124132624,
        "chrf-70": 0.35210746964137224,
        "chrf-74": 0.22795172198593477,
        "chrf-172": 0.2457944453138933,
        "chrf-195": 0.25247070732856003,
        "chrf-61": 0.2431339109033378,
        "chrf-142": 0.2849042296133106,
        "chrf-71": 0.24989800578509672,
        "rougel-32": 0.3227848101265822,
        "rougel-6": 0.34328358208955223,
        "rougel-88": 0.39999999999999997,
        "rougel-77": 0.40201005025125636,
        "rougel-72": 0.3221476510067114,
        "rougel-40": 0.3164556962025316,
        "rougel-30": 0.3576158940397351,
        "rougel-187": 0.32298136645962733,
        "rougel-25": 0.30303030303030304,
        "rougel-143": 0.3205128205128205,
        "rougel-8": 0.3308270676691729,
        "rougel-7": 0.3194444444444444,
        "rougel-27": 0.3243243243243244,
        "rougel-70": 0.401673640167364,
        "rougel-74": 0.3181818181818182,
        "rougel-172": 0.3508771929824561,
        "rougel-195": 0.33093525179856115,
        "rougel-61": 0.2948717948717949,
        "rougel-142": 0.3015075376884422,
        "rougel-71": 0.3205128205128205,
        "meteor-32": 0.4056313441569035,
        "meteor-6": 0.24821792260692463,
        "meteor-88": 0.39203047512862504,
        "meteor-77": 0.44290904881996385,
        "meteor-72": 0.2500522688358925,
        "meteor-40": 0.24245111051144655,
        "meteor-30": 0.24531089731707012,
        "meteor-187": 0.23955339444995047,
        "meteor-25": 0.2150031887755102,
        "meteor-143": 0.19381194358368992,
        "meteor-8": 0.24075025484199794,
        "meteor-7": 0.2721114936135936,
        "meteor-27": 0.24059046101762419,
        "meteor-70": 0.4179389641023356,
        "meteor-74": 0.22959183673469388,
        "meteor-172": 0.26208701341184165,
        "meteor-195": 0.23928672745694018,
        "meteor-61": 0.23264964832029905,
        "meteor-142": 0.29162177650429805,
        "meteor-71": 0.2306183851850217,
        "ruby-32": 0.2047619047619048,
        "ruby-6": 0.18867924528301883,
        "ruby-88": 0.1651376146788991,
        "ruby-77": 0.18867924528301883,
        "ruby-72": 0.18867924528301883,
        "ruby-40": 0.18867924528301883,
        "ruby-30": 0.21698113207547165,
        "ruby-187": 0.18867924528301883,
        "ruby-25": 0.16981132075471694,
        "ruby-143": 0.21698113207547165,
        "ruby-8": 0.18867924528301883,
        "ruby-7": 0.160377358490566,
        "ruby-27": 0.18867924528301883,
        "ruby-70": 0.23308270676691734,
        "ruby-74": 0.18867924528301883,
        "ruby-172": 0.21698113207547165,
        "ruby-195": 0.19811320754716977,
        "ruby-61": 0.16981132075471694,
        "ruby-142": 0.14150943396226412,
        "ruby-71": 0.19811320754716977,
        "codebertscore_f1-32": 0.7139860391616821,
        "codebertscore_f3-32": 0.7263708114624023,
        "codebertscore_f1-6": 0.729295015335083,
        "codebertscore_f3-6": 0.6921196579933167,
        "codebertscore_f1-88": 0.7526184320449829,
        "codebertscore_f3-88": 0.7452802062034607,
        "codebertscore_f1-77": 0.7598512768745422,
        "codebertscore_f3-77": 0.7464073896408081,
        "codebertscore_f1-72": 0.7355775833129883,
        "codebertscore_f3-72": 0.709252119064331,
        "codebertscore_f1-40": 0.7327985763549805,
        "codebertscore_f3-40": 0.7053350210189819,
        "codebertscore_f1-30": 0.7234635353088379,
        "codebertscore_f3-30": 0.6934900283813477,
        "codebertscore_f1-187": 0.7303473949432373,
        "codebertscore_f3-187": 0.7100759744644165,
        "codebertscore_f1-25": 0.7307817935943604,
        "codebertscore_f3-25": 0.6857361197471619,
        "codebertscore_f1-143": 0.6904431581497192,
        "codebertscore_f3-143": 0.6684843897819519,
        "codebertscore_f1-8": 0.735039234161377,
        "codebertscore_f3-8": 0.6929776072502136,
        "codebertscore_f1-7": 0.7223862409591675,
        "codebertscore_f3-7": 0.6968557834625244,
        "codebertscore_f1-27": 0.7295206785202026,
        "codebertscore_f3-27": 0.7003610730171204,
        "codebertscore_f1-70": 0.7407551407814026,
        "codebertscore_f3-70": 0.7331937551498413,
        "codebertscore_f1-74": 0.7338455319404602,
        "codebertscore_f3-74": 0.6864575147628784,
        "codebertscore_f1-172": 0.7053573131561279,
        "codebertscore_f3-172": 0.6946344971656799,
        "codebertscore_f1-195": 0.7138105630874634,
        "codebertscore_f3-195": 0.7009011507034302,
        "codebertscore_f1-61": 0.7271659970283508,
        "codebertscore_f3-61": 0.700661301612854,
        "codebertscore_f1-142": 0.7138362526893616,
        "codebertscore_f3-142": 0.7217437028884888,
        "codebertscore_f1-71": 0.7302208542823792,
        "codebertscore_f3-71": 0.7039250731468201,
        "codebertscore_s_f1-32": 0.7374218702316284,
        "codebertscore_s_f3-32": 0.7523521184921265,
        "codebertscore_s_f1-6": 0.7932130694389343,
        "codebertscore_s_f3-6": 0.742737352848053,
        "codebertscore_s_f1-88": 0.7777009606361389,
        "codebertscore_s_f3-88": 0.7715432643890381,
        "codebertscore_s_f1-77": 0.7910358309745789,
        "codebertscore_s_f3-77": 0.7759300470352173,
        "codebertscore_s_f1-72": 0.7772908806800842,
        "codebertscore_s_f3-72": 0.7433996796607971,
        "codebertscore_s_f1-40": 0.7759180068969727,
        "codebertscore_s_f3-40": 0.7499088048934937,
        "codebertscore_s_f1-30": 0.76738041639328,
        "codebertscore_s_f3-30": 0.7394710183143616,
        "codebertscore_s_f1-187": 0.7756751775741577,
        "codebertscore_s_f3-187": 0.7494257092475891,
        "codebertscore_s_f1-25": 0.7850872278213501,
        "codebertscore_s_f3-25": 0.7303152680397034,
        "codebertscore_s_f1-143": 0.7336279153823853,
        "codebertscore_s_f3-143": 0.7162125706672668,
        "codebertscore_s_f1-8": 0.7906865477561951,
        "codebertscore_s_f3-8": 0.7372140288352966,
        "codebertscore_s_f1-7": 0.7819894552230835,
        "codebertscore_s_f3-7": 0.7410115599632263,
        "codebertscore_s_f1-27": 0.7743840217590332,
        "codebertscore_s_f3-27": 0.7475364208221436,
        "codebertscore_s_f1-70": 0.7681612968444824,
        "codebertscore_s_f3-70": 0.7613837122917175,
        "codebertscore_s_f1-74": 0.7913913130760193,
        "codebertscore_s_f3-74": 0.7328338623046875,
        "codebertscore_s_f1-172": 0.7423893809318542,
        "codebertscore_s_f3-172": 0.7345691323280334,
        "codebertscore_s_f1-195": 0.7619004845619202,
        "codebertscore_s_f3-195": 0.7396975755691528,
        "codebertscore_s_f1-61": 0.7664218544960022,
        "codebertscore_s_f3-61": 0.7409446239471436,
        "codebertscore_s_f1-142": 0.7473821640014648,
        "codebertscore_s_f3-142": 0.758335292339325,
        "codebertscore_s_f1-71": 0.7734295129776001,
        "codebertscore_s_f3-71": 0.7463283538818359,
        "gpt35_nsnr-32": 4,
        "raw_gpt35_nsnr-32": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-88": 4,
        "raw_gpt35_nsnr-88": "4",
        "gpt35_nsnr-77": 4,
        "raw_gpt35_nsnr-77": "4",
        "gpt35_nsnr-72": 4,
        "raw_gpt35_nsnr-72": "4",
        "gpt35_nsnr-40": 4,
        "raw_gpt35_nsnr-40": "4",
        "gpt35_nsnr-30": 4,
        "raw_gpt35_nsnr-30": "4",
        "gpt35_nsnr-187": 4,
        "raw_gpt35_nsnr-187": "4",
        "gpt35_nsnr-25": 4,
        "raw_gpt35_nsnr-25": "4",
        "gpt35_nsnr-143": 4,
        "raw_gpt35_nsnr-143": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-27": 4,
        "raw_gpt35_nsnr-27": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-74": 4,
        "raw_gpt35_nsnr-74": "4",
        "gpt35_nsnr-172": 4,
        "raw_gpt35_nsnr-172": "4",
        "gpt35_nsnr-195": 4,
        "raw_gpt35_nsnr-195": "4",
        "gpt35_nsnr-61": 4,
        "raw_gpt35_nsnr-61": "4",
        "gpt35_nsnr-142": 4,
        "raw_gpt35_nsnr-142": "4",
        "gpt35_nsnr-71": 4,
        "raw_gpt35_nsnr-71": "4",
        "gpt35_nswr-32": 3,
        "raw_gpt35_nswr-32": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-88": 3,
        "raw_gpt35_nswr-88": "3",
        "gpt35_nswr-77": 4,
        "raw_gpt35_nswr-77": "4",
        "gpt35_nswr-72": 3,
        "raw_gpt35_nswr-72": "3",
        "gpt35_nswr-40": 3,
        "raw_gpt35_nswr-40": "3",
        "gpt35_nswr-30": 3,
        "raw_gpt35_nswr-30": "3",
        "gpt35_nswr-187": 3,
        "raw_gpt35_nswr-187": "3",
        "gpt35_nswr-25": 3,
        "raw_gpt35_nswr-25": "3",
        "gpt35_nswr-143": 3,
        "raw_gpt35_nswr-143": "3",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-27": 3,
        "raw_gpt35_nswr-27": "3",
        "gpt35_nswr-70": 4,
        "raw_gpt35_nswr-70": "4",
        "gpt35_nswr-74": 3,
        "raw_gpt35_nswr-74": "3",
        "gpt35_nswr-172": 3,
        "raw_gpt35_nswr-172": "3",
        "gpt35_nswr-195": 3,
        "raw_gpt35_nswr-195": "3",
        "gpt35_nswr-61": 3,
        "raw_gpt35_nswr-61": "3",
        "gpt35_nswr-142": 4,
        "raw_gpt35_nswr-142": "4",
        "gpt35_nswr-71": 3,
        "raw_gpt35_nswr-71": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // This function takes two positive numbers x and y and returns the\n    // biggest even integer number that is in the range [x, y] inclusive. If \n    // there's no such number, then the function should return -1.\n    // For example:\n    // choose_num(12, 15) = 14\n    // choose_num(13, 12) = -1\n    public static int chooseNum(int x, int y) {\n",
        "snippet": [
            "        if (x > y) {\n            return -1;\n        }\n        if (y % 2 == 0) {\n            return y;\n        }\n        if (x == y) {\n            return -1;\n        }\n        return y - 1;\n    }\n}"
        ],
        "simplified": "This function takes two positive numbers x and y and returns the biggest even integer number that is in the range [x, y] inclusive. If there's no such number, then the function should return -1.",
        "task_id": "102",
        "28": "return -1;",
        "grade-28": {
            "execution": 0
        },
        "6": "int min = Math.min(x, y);\n        int max = Math.max(x, y);\n        for (int i = max; i >= min; i--) {\n            if (i % 2 == 0) {\n                return i;\n            }\n        }\n        return -1;",
        "grade-6": {
            "execution": 0
        },
        "86": "int i = x;\n        while (i <= y) {\n            if (i % 2 == 0) {\n                return i;\n            }\n            i++;\n        }\n        return -1;",
        "grade-86": {
            "execution": 0
        },
        "77": "if (x % 2 == 0) {\n            return x > y ? -1 : x;\n        } else {\n            return y % 2 == 0 ? y : -1;\n        }",
        "grade-77": {
            "execution": 0
        },
        "70": "if (x % 2 == 0)\n            return Math.max(x, y);\n        return Math.max(x - 1, y);",
        "grade-70": {
            "execution": 0
        },
        "35": "// (write your code here)\n        return Stream.iterate(x, i -> i < y, i -> i + 1).filter(i -> i % 2 == 0).max(Integer::compare).orElse(-1);",
        "grade-35": {
            "execution": 0
        },
        "26": "return IntStream.rangeClosed(x, y).filter(n -> n % 2 == 0).max().orElse(-1);",
        "grade-26": {
            "execution": 1
        },
        "175": "// TODO: Your code here\n        return 0;",
        "grade-175": {
            "execution": 0
        },
        "22": "if (x == y) {\n            if (x % 2 == 0) {\n                return x;\n            } else {\n                return -1;\n            }\n        }\n        if (x > y) {\n            int t = x;\n            x = y;\n            y = t;\n        }\n        if (x % 2 == 0) {\n            return y;\n        } else {\n            return y - 1;\n        }",
        "grade-22": {
            "execution": 0
        },
        "191": "return Stream.iterate(x, a -> a + 1).limit(y - x + 1).filter(a -> a % 2 == 0).max(Integer::compare).orElse(-1);",
        "grade-191": {
            "execution": 0
        },
        "139": "// Your code here!\n        if (x%2==0) {\n            return x;\n        } else if (x%2!=0) {\n            return x+1;\n        } else {\n            return -1;\n        }",
        "grade-139": {
            "execution": 0
        },
        "8": "// The number of even numbers in the range [x, y] inclusive is:\n        // num_even = (y - x + 1)/2\n        // The biggest even number in the range [x, y] inclusive is:\n        // num_biggest = x + 2*(num_even - 1)\n        // Proof: Say we have x = 12, y = 14.\n        // The number of even numbers in [12, 14] is 2.\n        // The biggest even number in [12, 14] is 12 + 2*(2 - 1) = 14.\n        // Say we have x = 12, y = 15.\n        // The number of even numbers in [12, 15] is 3.\n        // The biggest even number in [12, 15] is 12 + 2*(3 - 1) = 16.\n        // Say we have x = 12, y = 16.\n        // The number of even numbers in [12, 16] is 4.\n        // The biggest even number in [12, 16] is 12 + 2*(4 - 1) = 18.\n        int num_even = (y - x + 1)/2;\n        int num_biggest = x + 2*(num_even - 1);\n        if (num_even == 0) {\n            return -1;\n        } else {\n            return num_biggest;\n        }",
        "grade-8": {
            "execution": 0
        },
        "7": "// WRITE YOUR CODE HERE\n        int ans = 0;\n        if (x % 2 == 0) {\n            ans = x;\n        } else {\n            ans = x + 1;\n        }\n        if (ans <= y) {\n            return ans;\n        } else {\n            return -1;\n        }",
        "grade-7": {
            "execution": 0
        },
        "23": "return IntStream.rangeClosed(x, y).filter(v -> v % 2 == 0).max().orElse(-1);",
        "grade-23": {
            "execution": 1
        },
        "68": "int result = -1;\n        // int low = Math.min(x, y);\n        // int high = Math.max(x, y);\n        // for (int i = low; i <= high; i++) {\n        //     if (i % 2 == 0) {\n        //         result = i;\n        //     }\n        // }\n        for (int i = Math.min(x, y); i <= Math.max(x, y); i++) {\n            if (i % 2 == 0) {\n                result = i;\n            }\n        }\n        return result;",
        "grade-68": {
            "execution": 0
        },
        "72": "int r = -1;\n        for (int i = x; i <= y; i++) {\n            if (i % 2 == 0) {\n                r = i;\n            }\n        }\n        return r;",
        "grade-72": {
            "execution": 1
        },
        "165": "int big = Math.max(x, y);\n        int small = Math.min(x, y);\n        for (int i = big; i >= small; i--) {\n            if (i % 2 == 0) {\n                return i;\n            }\n        }\n        return -1;",
        "grade-165": {
            "execution": 0
        },
        "194": "for (int n = y; n >= x; n--) {\n            if (n % 2 == 0) {\n                return n;\n            }\n        }\n        return -1;",
        "grade-194": {
            "execution": 1
        },
        "180": "int diff = y - x;\n        if (diff < 0) return -1;\n        int index = diff % 2 == 0 ? diff : diff - 1;\n        int result = x + index;\n        return result % 2 == 0 ? result : -1;",
        "grade-180": {
            "execution": 0
        },
        "59": "// Your implementation goes here\n        if (x % 2 == 0) {\n            return x;\n        } else if (x + 1 < y) {\n            return x + 1;\n        } else {\n            return -1;\n        }",
        "grade-59": {
            "execution": 0
        },
        "bleu-28": 2.7536449349747168e-05,
        "bleu-6": 0.23192031774008895,
        "bleu-86": 0.2983664877873642,
        "bleu-77": 0.3254354306007493,
        "bleu-70": 0.1623022051781238,
        "bleu-35": 0.11472584199920878,
        "bleu-26": 0.14355819920563415,
        "bleu-175": 0.0015089246428097618,
        "bleu-22": 0.4872459147497289,
        "bleu-191": 0.13983084974691748,
        "bleu-139": 0.36347923116857805,
        "bleu-8": 0.05067506768046603,
        "bleu-7": 0.3614405157205489,
        "bleu-23": 0.14355819920563415,
        "bleu-68": 0.09428389744034861,
        "bleu-72": 0.22732463852186066,
        "bleu-165": 0.23192031774008895,
        "bleu-194": 0.2805963149551016,
        "bleu-180": 0.18593663760128987,
        "bleu-59": 0.388400171039914,
        "codebleu-28": 0.06253556069833013,
        "codebleu-6": 0.4342513837130025,
        "codebleu-86": 0.4183509627061669,
        "codebleu-77": 0.40704872059360736,
        "codebleu-70": 0.3555016127214119,
        "codebleu-35": 0.32629504504504503,
        "codebleu-26": 0.2880457702750674,
        "codebleu-175": 0.07416197023121689,
        "codebleu-22": 0.6942289228864903,
        "codebleu-191": 0.3434684684684684,
        "codebleu-139": 0.5101861110464739,
        "codebleu-8": 0.47634935018624286,
        "codebleu-7": 0.4984436397157496,
        "codebleu-23": 0.2880457702750674,
        "codebleu-68": 0.4808558558558558,
        "codebleu-72": 0.36373873873873874,
        "codebleu-165": 0.4342513837130025,
        "codebleu-194": 0.3974331594645294,
        "codebleu-180": 0.3893487894898345,
        "codebleu-59": 0.5165480727153955,
        "chrf-28": 0.11855635825646756,
        "chrf-6": 0.34070019283329134,
        "chrf-86": 0.3756223602075989,
        "chrf-77": 0.36437126678315124,
        "chrf-70": 0.23348024905505485,
        "chrf-35": 0.1792387704053872,
        "chrf-26": 0.18444275847927355,
        "chrf-175": 0.08703186321694543,
        "chrf-22": 0.6978598005895948,
        "chrf-191": 0.18433495546087525,
        "chrf-139": 0.44531309656484114,
        "chrf-8": 0.15218650319282098,
        "chrf-7": 0.3848032262311705,
        "chrf-23": 0.179562067415805,
        "chrf-68": 0.23680641531879437,
        "chrf-72": 0.2552186423432386,
        "chrf-165": 0.3347601525640428,
        "chrf-194": 0.3694829452592801,
        "chrf-180": 0.273683251251713,
        "chrf-59": 0.45133227457720243,
        "rougel-28": 0.16,
        "rougel-6": 0.4528301886792453,
        "rougel-86": 0.5365853658536586,
        "rougel-77": 0.5542168674698795,
        "rougel-70": 0.49350649350649356,
        "rougel-35": 0.34615384615384615,
        "rougel-26": 0.3902439024390244,
        "rougel-175": 0.10714285714285714,
        "rougel-22": 0.5882352941176471,
        "rougel-191": 0.36734693877551017,
        "rougel-139": 0.6222222222222223,
        "rougel-8": 0.1708860759493671,
        "rougel-7": 0.52,
        "rougel-23": 0.3902439024390244,
        "rougel-68": 0.30057803468208094,
        "rougel-72": 0.4318181818181818,
        "rougel-165": 0.4528301886792453,
        "rougel-194": 0.5121951219512195,
        "rougel-180": 0.38383838383838387,
        "rougel-59": 0.6292134831460675,
        "meteor-28": 0.08971291866028708,
        "meteor-6": 0.6038491345905451,
        "meteor-86": 0.508843537414966,
        "meteor-77": 0.507715281234445,
        "meteor-70": 0.35899340700157856,
        "meteor-35": 0.31598000420226924,
        "meteor-26": 0.2961526623576485,
        "meteor-175": 0.03537735849056603,
        "meteor-22": 0.7297164288017377,
        "meteor-191": 0.33129964221099006,
        "meteor-139": 0.47524780750717854,
        "meteor-8": 0.341491589054942,
        "meteor-7": 0.5003839476495726,
        "meteor-23": 0.2961526623576485,
        "meteor-68": 0.519268081590108,
        "meteor-72": 0.4717770076769428,
        "meteor-165": 0.6038491345905451,
        "meteor-194": 0.5387501651473114,
        "meteor-180": 0.451169164882227,
        "meteor-59": 0.527011913445174,
        "ruby-28": 0.08695652173913049,
        "ruby-6": 0.2833333333333333,
        "ruby-86": 0.3913043478260869,
        "ruby-77": 0.32608695652173914,
        "ruby-70": 0.34782608695652173,
        "ruby-35": 0.13793103448275867,
        "ruby-26": 0.19565217391304346,
        "ruby-175": 0.06521739130434778,
        "ruby-22": 0.4383561643835616,
        "ruby-191": 0.17307692307692313,
        "ruby-139": 0.4565217391304348,
        "ruby-8": 0.09259259259259256,
        "ruby-7": 0.40740740740740744,
        "ruby-23": 0.19565217391304346,
        "ruby-68": 0.19685039370078738,
        "ruby-72": 0.21739130434782605,
        "ruby-165": 0.2833333333333333,
        "ruby-194": 0.32608695652173914,
        "ruby-180": 0.26415094339622647,
        "ruby-59": 0.4782608695652174,
        "codebertscore_f1-28": 0.6982945203781128,
        "codebertscore_f3-28": 0.6554968357086182,
        "codebertscore_f1-6": 0.8030583262443542,
        "codebertscore_f3-6": 0.8393308520317078,
        "codebertscore_f1-86": 0.8290256261825562,
        "codebertscore_f3-86": 0.839238166809082,
        "codebertscore_f1-77": 0.8767187595367432,
        "codebertscore_f3-77": 0.868756115436554,
        "codebertscore_f1-70": 0.8253411650657654,
        "codebertscore_f3-70": 0.8265894055366516,
        "codebertscore_f1-35": 0.7243015170097351,
        "codebertscore_f3-35": 0.7682486176490784,
        "codebertscore_f1-26": 0.7353115081787109,
        "codebertscore_f3-26": 0.771327793598175,
        "codebertscore_f1-175": 0.6374576687812805,
        "codebertscore_f3-175": 0.6419483423233032,
        "codebertscore_f1-22": 0.861680805683136,
        "codebertscore_f3-22": 0.8869801759719849,
        "codebertscore_f1-191": 0.7315871715545654,
        "codebertscore_f3-191": 0.764099657535553,
        "codebertscore_f1-139": 0.8214210271835327,
        "codebertscore_f3-139": 0.8401503562927246,
        "codebertscore_f1-8": 0.7053501009941101,
        "codebertscore_f3-8": 0.7774173021316528,
        "codebertscore_f1-7": 0.8012099862098694,
        "codebertscore_f3-7": 0.8433871865272522,
        "codebertscore_f1-23": 0.7366325259208679,
        "codebertscore_f3-23": 0.7737727761268616,
        "codebertscore_f1-68": 0.7485286593437195,
        "codebertscore_f3-68": 0.7900224328041077,
        "codebertscore_f1-72": 0.8019493222236633,
        "codebertscore_f3-72": 0.8174276947975159,
        "codebertscore_f1-165": 0.8040464520454407,
        "codebertscore_f3-165": 0.8395054936408997,
        "codebertscore_f1-194": 0.8211256265640259,
        "codebertscore_f3-194": 0.8327820301055908,
        "codebertscore_f1-180": 0.8229306936264038,
        "codebertscore_f3-180": 0.8428159356117249,
        "codebertscore_f1-59": 0.83463054895401,
        "codebertscore_f3-59": 0.8630731105804443,
        "codebertscore_s_f1-28": 0.7910164594650269,
        "codebertscore_s_f3-28": 0.7262009978294373,
        "codebertscore_s_f1-6": 0.8229503035545349,
        "codebertscore_s_f3-6": 0.8608164191246033,
        "codebertscore_s_f1-86": 0.861128568649292,
        "codebertscore_s_f3-86": 0.8749921917915344,
        "codebertscore_s_f1-77": 0.8954716324806213,
        "codebertscore_s_f3-77": 0.8886246681213379,
        "codebertscore_s_f1-70": 0.8393918871879578,
        "codebertscore_s_f3-70": 0.8451806902885437,
        "codebertscore_s_f1-35": 0.7486819624900818,
        "codebertscore_s_f3-35": 0.7990238666534424,
        "codebertscore_s_f1-26": 0.764255702495575,
        "codebertscore_s_f3-26": 0.8027011156082153,
        "codebertscore_s_f1-175": 0.6558472514152527,
        "codebertscore_s_f3-175": 0.6745520234107971,
        "codebertscore_s_f1-22": 0.8940139412879944,
        "codebertscore_s_f3-22": 0.9199802875518799,
        "codebertscore_s_f1-191": 0.757197916507721,
        "codebertscore_s_f3-191": 0.7942545413970947,
        "codebertscore_s_f1-139": 0.8433448076248169,
        "codebertscore_s_f3-139": 0.8623307347297668,
        "codebertscore_s_f1-8": 0.731821596622467,
        "codebertscore_s_f3-8": 0.7904817461967468,
        "codebertscore_s_f1-7": 0.8273378610610962,
        "codebertscore_s_f3-7": 0.8731773495674133,
        "codebertscore_s_f1-23": 0.7627996802330017,
        "codebertscore_s_f3-23": 0.8018457889556885,
        "codebertscore_s_f1-68": 0.7724714279174805,
        "codebertscore_s_f3-68": 0.8230774402618408,
        "codebertscore_s_f1-72": 0.8287886381149292,
        "codebertscore_s_f3-72": 0.8518175482749939,
        "codebertscore_s_f1-165": 0.8226418495178223,
        "codebertscore_s_f3-165": 0.8608027696609497,
        "codebertscore_s_f1-194": 0.8477461934089661,
        "codebertscore_s_f3-194": 0.8636742234230042,
        "codebertscore_s_f1-180": 0.8512482047080994,
        "codebertscore_s_f3-180": 0.8774362802505493,
        "codebertscore_s_f1-59": 0.8542046546936035,
        "codebertscore_s_f3-59": 0.8865092396736145,
        "gpt35_nsnr-28": 0,
        "raw_gpt35_nsnr-28": "2 - The code snippet only returns -1, which is incorrect for most cases. However, it is correct for the case where x is greater than y, which is one of the cases mentioned in the problem statement. Therefore, the code snippet partially covers the required functionality.",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-86": 3,
        "raw_gpt35_nsnr-86": "3",
        "gpt35_nsnr-77": 3,
        "raw_gpt35_nsnr-77": "3",
        "gpt35_nsnr-70": 3,
        "raw_gpt35_nsnr-70": "3",
        "gpt35_nsnr-35": 3,
        "raw_gpt35_nsnr-35": "3",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-175": 2,
        "raw_gpt35_nsnr-175": "2",
        "gpt35_nsnr-22": 3,
        "raw_gpt35_nsnr-22": "3",
        "gpt35_nsnr-191": 4,
        "raw_gpt35_nsnr-191": "4",
        "gpt35_nsnr-139": 2,
        "raw_gpt35_nsnr-139": "2",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-68": 4,
        "raw_gpt35_nsnr-68": "4",
        "gpt35_nsnr-72": 3,
        "raw_gpt35_nsnr-72": "3",
        "gpt35_nsnr-165": 4,
        "raw_gpt35_nsnr-165": "4",
        "gpt35_nsnr-194": 4,
        "raw_gpt35_nsnr-194": "4",
        "gpt35_nsnr-180": 4,
        "raw_gpt35_nsnr-180": "4",
        "gpt35_nsnr-59": 3,
        "raw_gpt35_nsnr-59": "3",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-86": 3,
        "raw_gpt35_nswr-86": "3",
        "gpt35_nswr-77": 3,
        "raw_gpt35_nswr-77": "3",
        "gpt35_nswr-70": 2,
        "raw_gpt35_nswr-70": "2",
        "gpt35_nswr-35": 2,
        "raw_gpt35_nswr-35": "2",
        "gpt35_nswr-26": 2,
        "raw_gpt35_nswr-26": "2",
        "gpt35_nswr-175": 2,
        "raw_gpt35_nswr-175": "2",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-191": 2,
        "raw_gpt35_nswr-191": "2",
        "gpt35_nswr-139": 2,
        "raw_gpt35_nswr-139": "2",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 2,
        "raw_gpt35_nswr-23": "2",
        "gpt35_nswr-68": 3,
        "raw_gpt35_nswr-68": "3",
        "gpt35_nswr-72": 3,
        "raw_gpt35_nswr-72": "3",
        "gpt35_nswr-165": 3,
        "raw_gpt35_nswr-165": "3",
        "gpt35_nswr-194": 2,
        "raw_gpt35_nswr-194": "2",
        "gpt35_nswr-180": 3,
        "raw_gpt35_nswr-180": "3",
        "gpt35_nswr-59": 2,
        "raw_gpt35_nswr-59": "2"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    // >>> prime_fib(1)\n    // 2\n    // >>> prime_fib(2)\n    // 3\n    // >>> prime_fib(3)\n    // 5\n    // >>> prime_fib(4)\n    // 13\n    // >>> prime_fib(5)\n    // 89\n    public static int primeFib(int n) {\n",
        "snippet": [
            "        int f0 = 0, f1 = 1;\n        while (true) {\n            int p = f0 + f1;\n            boolean is_prime = p >= 2;\n            for (int k = 2; k < Math.min(Math.sqrt(p) + 1, p - 1); k++) {\n                if (p % k == 0) {\n                    is_prime = false;\n                    break;\n                }\n            }\n            if (is_prime) {\n                n -= 1;\n            }\n            if (n == 0) {\n                return p;\n            }\n            f0 = f1;\n            f1 = p;\n        }\n    }\n}"
        ],
        "simplified": "prime_fib returns n-th number that is a Fibonacci number and it's also prime.",
        "task_id": "39",
        "170": "// Your code goes here\n        int i = 0;\n        int f0 = 0;\n        int f1 = 1;\n        int f2 = 1;\n        while (true) {\n            if (f2 > 1 && isPrime(f2)) {\n                i += 1;\n                if (i == n) return f2;\n            }\n            f0 = f1;\n            f1 = f2;\n            f2 = f0 + f1;\n        }",
        "grade-170": {
            "execution": 0
        },
        "28": "if (n < 1)\n            throw new IllegalArgumentException(\"n should be greater than or equal to 1\");\n        ArrayList<Integer> fibs = new ArrayList<Integer>();\n        fibs.add(2);\n        fibs.add(3);\n        int i = 2;\n        while (fibs.size() < n) {\n            BigInteger next = BigInteger.valueOf(fibs.get(i - 1)).add(BigInteger.valueOf(fibs.get(i - 2)));\n            if (next.isProbablePrime(16))\n                fibs.add(next.intValue());\n            i += 1;\n        }\n        return fibs.get(n - 1);",
        "grade-28": {
            "execution": 0
        },
        "6": "int num1 = 0;\n        int num2 = 1;\n        int num;\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            num = num1 + num2;\n            num1 = num2;\n            num2 = num;\n            if (isPrime(num)) {\n                count++;\n            }\n            if (count == n) {\n                return num;\n            }\n        }\n        return 0;",
        "grade-6": {
            "execution": 0
        },
        "199": "if (n == 1) return 2;\n        if (n == 2) return 3;\n        int a = 1;\n        int b = 1;\n        int c = 2;\n        int i = 3;\n        while (true) {\n            int next = a + b;\n            a = b;\n            b = c;\n            c = next;\n            if (isPrime(c)) {\n                i += 1;\n                if (i == n) return c;\n            }\n        }",
        "grade-199": {
            "execution": 0
        },
        "73": "if (n == 1) {\n            return 2;\n        }\n        int sum = 0;\n        int i = 1;\n        int j = 2;\n        for (int k = 1; k < n; k++) {\n            sum = i + j;\n            i = j;\n            j = sum;\n        }\n        return sum;",
        "grade-73": {
            "execution": 0
        },
        "65": "ArrayList<Integer> fibs = new ArrayList<Integer>();\n        fibs.add(2);\n        fibs.add(3);\n        int i = 2;\n        while (fibs.size() < n) {\n            int a = fibs.get(i - 1);\n            int b = fibs.get(i - 2);\n            int f = a + b;\n            if (isPrime(f)) {\n                fibs.add(f);\n            }\n            i += 1;\n        }\n        return fibs.get(n - 1);",
        "grade-65": {
            "execution": 0
        },
        "59": "int fib = 2;\n        int fib1 = 2;\n        int fib2 = 3;\n        int count = 1;\n        while (count < n) {\n            fib = fib1 + fib2;\n            fib1 = fib2;\n            fib2 = fib;\n            if (isPrime(fib)) {\n                count++;\n            }\n        }\n        return fib;",
        "grade-59": {
            "execution": 0
        },
        "35": "// your code here\n        long first = 1;\n        long second = 1;\n        int i = 2;\n        long fib;\n        for (;;) {\n            fib = first + second;\n            if (isPrime(fib)) {\n                i++;\n                if (i == n) {\n                    return (int) fib;\n                }\n            }\n            first = second;\n            second = fib;\n        }",
        "grade-35": {
            "execution": 0
        },
        "198": "int curr = 2;\n        int cnt = 0;\n        int i = 1;\n        int prev = 1;\n        while (cnt != n) {\n            if (isPrime(curr)) {\n                cnt++;\n            }\n            int tmp = curr;\n            curr = curr + prev;\n            prev = tmp;\n            i++;\n        }\n        return curr;",
        "grade-198": {
            "execution": 0
        },
        "26": "// YOUR CODE HERE\n        return 0;",
        "grade-26": {
            "execution": 0
        },
        "183": "int i = 1;\n        int j = 1;\n        int idx = 0;\n        for (int x = 1; x < n; x++) {\n            if (i == 1) {\n                idx = 2;\n            } else {\n                idx = i + j;\n            }\n            j = i;\n            i = idx;\n        }\n        return idx;",
        "grade-183": {
            "execution": 0
        },
        "144": "// TODO: Please implement this method.\n        if (n == 1) return 2;\n        int a = 2, b = 3, c = 5;\n        for (int i = 4; i <= n; i++) {\n            a = b;\n            b = c;\n            c = a + b;\n            while (!isPrime(c)) {\n                a = b;\n                b = c;\n                c = a + b;\n            }\n        }\n        return c;",
        "grade-144": {
            "execution": 0
        },
        "22": "int index = 2;\n        int result = 0;\n        boolean found = false;\n        if (n == 1) {\n            return 2;\n        }\n        if (n == 2) {\n            return 3;\n        }\n        int num1 = 1;\n        int num2 = 1;\n        int temp = 1;\n        while (!found) {\n            temp = num1 + num2;\n            num1 = num2;\n            num2 = temp;\n            if (isPrime(temp)) {\n                index++;\n            }\n            if (index == n) {\n                result = temp;\n                found = true;\n            }\n        }\n        return result;",
        "grade-22": {
            "execution": 0
        },
        "158": "int i = 2;\n        int ans = 0;\n        int fib = fib(i);\n        int tmp = fib;\n        int count = 0;\n        for (int j = 0; j < n - 1; ++j) {\n            ans = fib;\n            fib = fib + tmp;\n            tmp = ans;\n        }\n        while (count < n) {\n            if (isPrime(fib)) {\n                count++;\n            }\n            fib = fib + tmp;\n            tmp = ans;\n            ans = fib - tmp;\n        }\n        return fib;",
        "grade-158": {
            "execution": 0
        },
        "112": "int i = 0;\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        while (i < n) {\n            c = a + b;\n            a = b;\n            b = c;\n            if (isPrime(c)) {\n                i++;\n            }\n        }\n        return c;",
        "grade-112": {
            "execution": 0
        },
        "8": "int a = 2;\n        int b = 3;\n        int count = 2;\n        while (true) {\n            int c = a + b;\n            if (isPrime(c)) {\n                count++;\n                if (count == n) {\n                    return c;\n                }\n            }\n            a = b;\n            b = c;\n        }",
        "grade-8": {
            "execution": 0
        },
        "7": "int[] fibs = { 2, 3, 5, 13, 89 };\n        if (n > 5) {\n            if (n > 45) {\n                throw new IllegalArgumentException();\n            }\n            return fibs[n - 6];\n        }\n        return fibs[n - 1];",
        "grade-7": {
            "execution": 0
        },
        "23": "int a = 2;\n        int b = 3;\n        int primeFib = 0;\n        int counter = 1;\n        while (counter < n) {\n            primeFib = b;\n            int c = a + b;\n            a = b;\n            b = c;\n            while (!isPrime(b)) {\n                b += c;\n            }\n            counter++;\n        }\n        return primeFib;",
        "grade-23": {
            "execution": 0
        },
        "57": "int fib = 1;\n      int prev = 0;\n      int idx = 0;\n      for (int i = 0; i < n; i++) {\n        if (isPrime(fib)) idx++;\n        if (idx == n) return fib;\n        int tmp = fib;\n        fib += prev;\n        prev = tmp;\n      }\n      return -1;",
        "grade-57": {
            "execution": 0
        },
        "61": "int first = 1;\n        int second = 1;\n        int counter = 1;\n        int number = 1;\n        int temp = 0;\n        while (counter < n) {\n            if (isPrime(number)) {\n                counter++;\n            }\n            temp = second;\n            second = first + second;\n            first = temp;\n            number = second;\n        }\n        return number;",
        "grade-61": {
            "execution": 0
        },
        "bleu-170": 0.22434937804986532,
        "bleu-28": 0.0686305977046243,
        "bleu-6": 0.10937191737165343,
        "bleu-199": 0.15865762944382605,
        "bleu-73": 0.15807511980797848,
        "bleu-65": 0.09593649278164705,
        "bleu-59": 0.0630618535309604,
        "bleu-35": 0.05924143999805508,
        "bleu-198": 0.08251554445773798,
        "bleu-26": 1.4497493569079906e-07,
        "bleu-183": 0.10333293136837135,
        "bleu-144": 0.12249174674729313,
        "bleu-22": 0.19235238273745167,
        "bleu-158": 0.09575657817895541,
        "bleu-112": 0.037036422543217554,
        "bleu-8": 0.0968886403589007,
        "bleu-7": 0.037846758170454846,
        "bleu-23": 0.06519412516459541,
        "bleu-57": 0.10113676575479356,
        "bleu-61": 0.05845248188025724,
        "codebleu-170": 0.39015673856064387,
        "codebleu-28": 0.45308898098429745,
        "codebleu-6": 0.42076611494333904,
        "codebleu-199": 0.45773384109641335,
        "codebleu-73": 0.34340347563455687,
        "codebleu-65": 0.47125519500897245,
        "codebleu-59": 0.29527583918576655,
        "codebleu-35": 0.3711795965115157,
        "codebleu-198": 0.30990436070793403,
        "codebleu-26": 0.02164579902507012,
        "codebleu-183": 0.3536702084803493,
        "codebleu-144": 0.4770601438661585,
        "codebleu-22": 0.5184212950170396,
        "codebleu-158": 0.46645789198980686,
        "codebleu-112": 0.29595921571356476,
        "codebleu-8": 0.3439962306059673,
        "codebleu-7": 0.2185281700743957,
        "codebleu-23": 0.32822886929297185,
        "codebleu-57": 0.3728756853473281,
        "codebleu-61": 0.34724385364162286,
        "chrf-170": 0.3053826289725519,
        "chrf-28": 0.17531071917282354,
        "chrf-6": 0.19246161511850088,
        "chrf-199": 0.2396952072077089,
        "chrf-73": 0.2046373993044608,
        "chrf-65": 0.19700746668682903,
        "chrf-59": 0.18169668488969287,
        "chrf-35": 0.18827340143080323,
        "chrf-198": 0.18324094323362522,
        "chrf-26": 0.024884449463966406,
        "chrf-183": 0.16878574033757732,
        "chrf-144": 0.21280989670733788,
        "chrf-22": 0.29539966054523187,
        "chrf-158": 0.21847494665937434,
        "chrf-112": 0.1510460602688584,
        "chrf-8": 0.21085578763803534,
        "chrf-7": 0.12267153910531314,
        "chrf-23": 0.20088027196968192,
        "chrf-57": 0.2081466962703554,
        "chrf-61": 0.18035831924718507,
        "rougel-170": 0.4126984126984127,
        "rougel-28": 0.27480916030534347,
        "rougel-6": 0.4293193717277487,
        "rougel-199": 0.3940886699507389,
        "rougel-73": 0.3908045977011494,
        "rougel-65": 0.3139013452914798,
        "rougel-59": 0.313953488372093,
        "rougel-35": 0.3763440860215053,
        "rougel-198": 0.3258426966292135,
        "rougel-26": 0.033057851239669415,
        "rougel-183": 0.4269662921348315,
        "rougel-144": 0.34146341463414637,
        "rougel-22": 0.38738738738738737,
        "rougel-158": 0.39999999999999997,
        "rougel-112": 0.32558139534883723,
        "rougel-8": 0.3885714285714286,
        "rougel-7": 0.2352941176470588,
        "rougel-23": 0.3225806451612903,
        "rougel-57": 0.39999999999999997,
        "rougel-61": 0.34254143646408847,
        "meteor-170": 0.282654461601658,
        "meteor-28": 0.2270171526586621,
        "meteor-6": 0.3246930072832937,
        "meteor-199": 0.32167017966475964,
        "meteor-73": 0.2539816047580669,
        "meteor-65": 0.2615206186733789,
        "meteor-59": 0.24722641728624534,
        "meteor-35": 0.2801174311926606,
        "meteor-198": 0.24682686383240915,
        "meteor-26": 0.014634146341463414,
        "meteor-183": 0.24375370794489687,
        "meteor-144": 0.28762615676086584,
        "meteor-22": 0.39507104795737114,
        "meteor-158": 0.3029871884645035,
        "meteor-112": 0.2553073827152908,
        "meteor-8": 0.2865443018099097,
        "meteor-7": 0.13966480446927376,
        "meteor-23": 0.2403683941163091,
        "meteor-57": 0.2777353279975658,
        "meteor-61": 0.238446595175664,
        "ruby-170": 0.2743362831858407,
        "ruby-28": 0.1476510067114094,
        "ruby-6": 0.31858407079646023,
        "ruby-199": 0.24778761061946908,
        "ruby-73": 0.2566371681415929,
        "ruby-65": 0.1504424778761062,
        "ruby-59": 0.21238938053097345,
        "ruby-35": 0.2566371681415929,
        "ruby-198": 0.23893805309734517,
        "ruby-26": 0.017699115044247815,
        "ruby-183": 0.327433628318584,
        "ruby-144": 0.21238938053097345,
        "ruby-22": 0.23893805309734517,
        "ruby-158": 0.22123893805309736,
        "ruby-112": 0.22123893805309736,
        "ruby-8": 0.2831858407079646,
        "ruby-7": 0.15929203539823011,
        "ruby-23": 0.22123893805309736,
        "ruby-57": 0.2920353982300885,
        "ruby-61": 0.2566371681415929,
        "codebertscore_f1-170": 0.7975273132324219,
        "codebertscore_f3-170": 0.7888264656066895,
        "codebertscore_f1-28": 0.7152687907218933,
        "codebertscore_f3-28": 0.7321903109550476,
        "codebertscore_f1-6": 0.799652099609375,
        "codebertscore_f3-6": 0.7849037647247314,
        "codebertscore_f1-199": 0.7695199251174927,
        "codebertscore_f3-199": 0.755188524723053,
        "codebertscore_f1-73": 0.767672061920166,
        "codebertscore_f3-73": 0.7394572496414185,
        "codebertscore_f1-65": 0.7515987753868103,
        "codebertscore_f3-65": 0.7503597736358643,
        "codebertscore_f1-59": 0.7672293186187744,
        "codebertscore_f3-59": 0.7506899237632751,
        "codebertscore_f1-35": 0.759339451789856,
        "codebertscore_f3-35": 0.7503919005393982,
        "codebertscore_f1-198": 0.754503607749939,
        "codebertscore_f3-198": 0.7393359541893005,
        "codebertscore_f1-26": 0.5599821209907532,
        "codebertscore_f3-26": 0.5303449034690857,
        "codebertscore_f1-183": 0.7629203200340271,
        "codebertscore_f3-183": 0.7459354996681213,
        "codebertscore_f1-144": 0.738579273223877,
        "codebertscore_f3-144": 0.7347406148910522,
        "codebertscore_f1-22": 0.7806292772293091,
        "codebertscore_f3-22": 0.770689070224762,
        "codebertscore_f1-158": 0.7644408345222473,
        "codebertscore_f3-158": 0.7574677467346191,
        "codebertscore_f1-112": 0.7774394750595093,
        "codebertscore_f3-112": 0.7514890432357788,
        "codebertscore_f1-8": 0.7934605479240417,
        "codebertscore_f3-8": 0.7647498250007629,
        "codebertscore_f1-7": 0.6971096992492676,
        "codebertscore_f3-7": 0.6799244284629822,
        "codebertscore_f1-23": 0.7563745975494385,
        "codebertscore_f3-23": 0.7435188293457031,
        "codebertscore_f1-57": 0.7397128939628601,
        "codebertscore_f3-57": 0.7209551334381104,
        "codebertscore_f1-61": 0.7510880827903748,
        "codebertscore_f3-61": 0.7298105955123901,
        "codebertscore_s_f1-170": 0.8145424723625183,
        "codebertscore_s_f3-170": 0.8054858446121216,
        "codebertscore_s_f1-28": 0.7311672568321228,
        "codebertscore_s_f3-28": 0.7483728528022766,
        "codebertscore_s_f1-6": 0.8052026629447937,
        "codebertscore_s_f3-6": 0.7909393906593323,
        "codebertscore_s_f1-199": 0.7866432666778564,
        "codebertscore_s_f3-199": 0.7725635170936584,
        "codebertscore_s_f1-73": 0.7902705669403076,
        "codebertscore_s_f3-73": 0.7608991265296936,
        "codebertscore_s_f1-65": 0.7672032117843628,
        "codebertscore_s_f3-65": 0.7659135460853577,
        "codebertscore_s_f1-59": 0.7831106781959534,
        "codebertscore_s_f3-59": 0.7672995924949646,
        "codebertscore_s_f1-35": 0.7653409838676453,
        "codebertscore_s_f3-35": 0.7570269107818604,
        "codebertscore_s_f1-198": 0.7746841907501221,
        "codebertscore_s_f3-198": 0.7603458166122437,
        "codebertscore_s_f1-26": 0.5991833806037903,
        "codebertscore_s_f3-26": 0.5780577063560486,
        "codebertscore_s_f1-183": 0.7807258367538452,
        "codebertscore_s_f3-183": 0.7634482383728027,
        "codebertscore_s_f1-144": 0.7573983073234558,
        "codebertscore_s_f3-144": 0.751945436000824,
        "codebertscore_s_f1-22": 0.7933924198150635,
        "codebertscore_s_f3-22": 0.7844178676605225,
        "codebertscore_s_f1-158": 0.778464138507843,
        "codebertscore_s_f3-158": 0.7723404765129089,
        "codebertscore_s_f1-112": 0.7924235463142395,
        "codebertscore_s_f3-112": 0.7652669548988342,
        "codebertscore_s_f1-8": 0.8017459511756897,
        "codebertscore_s_f3-8": 0.7750795483589172,
        "codebertscore_s_f1-7": 0.7173432111740112,
        "codebertscore_s_f3-7": 0.7032107710838318,
        "codebertscore_s_f1-23": 0.7785733938217163,
        "codebertscore_s_f3-23": 0.7625224590301514,
        "codebertscore_s_f1-57": 0.7642996311187744,
        "codebertscore_s_f3-57": 0.7464149594306946,
        "codebertscore_s_f1-61": 0.7721028923988342,
        "codebertscore_s_f3-61": 0.7507266402244568,
        "gpt35_nsnr-170": 3,
        "raw_gpt35_nsnr-170": "3",
        "gpt35_nsnr-28": 3,
        "raw_gpt35_nsnr-28": "3",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-199": 4,
        "raw_gpt35_nsnr-199": "4",
        "gpt35_nsnr-73": 2,
        "raw_gpt35_nsnr-73": "2",
        "gpt35_nsnr-65": 3,
        "raw_gpt35_nsnr-65": "3",
        "gpt35_nsnr-59": 3,
        "raw_gpt35_nsnr-59": "3",
        "gpt35_nsnr-35": 3,
        "raw_gpt35_nsnr-35": "3",
        "gpt35_nsnr-198": 3,
        "raw_gpt35_nsnr-198": "3",
        "gpt35_nsnr-26": 0,
        "raw_gpt35_nsnr-26": "0",
        "gpt35_nsnr-183": 3,
        "raw_gpt35_nsnr-183": "3",
        "gpt35_nsnr-144": 4,
        "raw_gpt35_nsnr-144": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-158": 3,
        "raw_gpt35_nsnr-158": "3",
        "gpt35_nsnr-112": 3,
        "raw_gpt35_nsnr-112": "3",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-23": 3,
        "raw_gpt35_nsnr-23": "3",
        "gpt35_nsnr-57": 3,
        "raw_gpt35_nsnr-57": "3",
        "gpt35_nsnr-61": 3,
        "raw_gpt35_nsnr-61": "3",
        "gpt35_nswr-170": 3,
        "raw_gpt35_nswr-170": "3",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 2,
        "raw_gpt35_nswr-6": "2",
        "gpt35_nswr-199": 3,
        "raw_gpt35_nswr-199": "3",
        "gpt35_nswr-73": 2,
        "raw_gpt35_nswr-73": "2",
        "gpt35_nswr-65": 2,
        "raw_gpt35_nswr-65": "2",
        "gpt35_nswr-59": 2,
        "raw_gpt35_nswr-59": "2",
        "gpt35_nswr-35": 2,
        "raw_gpt35_nswr-35": "2",
        "gpt35_nswr-198": 2,
        "raw_gpt35_nswr-198": "2",
        "gpt35_nswr-26": 2,
        "raw_gpt35_nswr-26": "2",
        "gpt35_nswr-183": 2,
        "raw_gpt35_nswr-183": "2",
        "gpt35_nswr-144": 3,
        "raw_gpt35_nswr-144": "3",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-158": 2,
        "raw_gpt35_nswr-158": "2",
        "gpt35_nswr-112": 3,
        "raw_gpt35_nswr-112": "3",
        "gpt35_nswr-8": 2,
        "raw_gpt35_nswr-8": "2",
        "gpt35_nswr-7": 2,
        "raw_gpt35_nswr-7": "2",
        "gpt35_nswr-23": 2,
        "raw_gpt35_nswr-23": "2",
        "gpt35_nswr-57": 2,
        "raw_gpt35_nswr-57": "2",
        "gpt35_nswr-61": 2,
        "raw_gpt35_nswr-61": "2"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    // Example\n    // is_equal_to_sum_even(4) == False\n    // is_equal_to_sum_even(6) == False\n    // is_equal_to_sum_even(8) == True\n    public static boolean isEqualToSumEven(int n) {\n",
        "snippet": [
            "        return n % 2 == 0 && n >= 8;\n    }\n}"
        ],
        "simplified": "Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers",
        "task_id": "138",
        "30": "int a, b, c, d;\n        for (a = 0; a <= n; a += 2) {\n            for (b = 0; b <= n; b += 2) {\n                for (c = 0; c <= n; c += 2) {\n                    for (d = 0; d <= n; d += 2) {\n                        if (a + b + c + d == n) {\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n        return false;",
        "grade-30": {
            "execution": 0
        },
        "6": "if (n % 2 != 0) {\n            return false;\n        }\n        // Create a list of all even numbers smaller than n\n        List<Integer> evens = IntStream.range(2, n).filter(x -> x % 2 == 0).boxed().collect(Collectors.toList());\n        // Check whether the list contains n and if so, return true\n        return evens.contains(n);",
        "grade-6": {
            "execution": 0
        },
        "79": "// We are given that the number is positive, so we can assume this\n        // We also know that the number is even, so we can assume this\n        // And as even numbers are divisible by 2, we can also assume this\n\n        // I'm going to start by making a greedy algorithm.\n        // As the only even numbers we can add are 2, 4, 6, ..., n\n        // we can start by adding the largest number we can,\n        // and then subtract it from the total, then repeat.\n        // This is efficient because it only requires O(n) steps.\n        // We will stop early if we go over n by more than 2\n\n        int sum = 0;\n        for (int i = n; i >= 2; i -= 2) {\n            if (sum + i <= n) {\n                sum += i;\n            }\n        }\n\n        return sum == n;",
        "grade-79": {
            "execution": 0
        },
        "71": "return n % 2 == 0 && n >= 8;",
        "grade-71": {
            "execution": 1
        },
        "65": "if (n % 2 != 0) {\n            return false;\n        }\n        int sum = 0;\n        for (int i = 0; i < 4; i++) {\n            sum += 2;\n        }\n        return sum == n;",
        "grade-65": {
            "execution": 0
        },
        "37": "if (n % 2 != 0) return false;\n        for (int a = 2; a <= n / 4; a += 2) {\n            for (int b = a; b <= n / 3; b += 2) {\n                for (int c = b; c <= n / 2; c += 2) {\n                    int d = n - a - b - c;\n                    if (d % 2 == 0 && a + b + c + d == n) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;",
        "grade-37": {
            "execution": 1
        },
        "28": "boolean result=false;\n      if(n==0) return true;\n      if(n%2!=0) return false;\n      n=n/2;\n      int fact=1;\n      while(n!=0){\n        fact=fact*n;\n        n--;\n      }\n      return fact%4==0;",
        "grade-28": {
            "execution": 1
        },
        "182": "return IntStream.rangeClosed(1, n/2).filter(x -> x % 2 == 0).anyMatch(x -> IntStream.rangeClosed(1, n/2).filter(y -> y % 2 == 0).anyMatch(y -> IntStream.rangeClosed(1, n/2).filter(z -> z % 2 == 0).anyMatch(z -> IntStream.rangeClosed(1, n/2).filter(w -> w % 2 == 0).anyMatch(w -> x + y + z + w == n))));",
        "grade-182": {
            "execution": 1
        },
        "23": "// return 1;\n        // return n == 8;\n        // return n % 2 == 0;\n        // return n == 4;\n        // return n % 4 == 0;\n        // return n >= 0;\n        // return n > 0;\n        // return n >= 8;\n        // return n == 4 || n == 8;\n        // return n % 4 == 0 || n % 8 == 0;\n        // return n % 4 == 0 && n % 8 == 0;\n        // return n % 4 == 0 || n % 4 == 8;\n        // return n % 4 == 0 && n == 8;\n        // return n % 4 == 0 && n % 8 == 0;\n        // return n % 4 == 0 || n % 8 == 0;\n        // return n % 4 == 0 && n == 8;\n        // return n % 4 == 0 && n == 8;\n        // return n == 2 || n == 4 || n == 6 || n == 8;\n        // return n == 2 || n == 4 || n == 6 || n == 8;\n        // return n == 2 || n == 4 || n == 6 || n == 8;\n        // return n == 2 || n == 4 || n == 6 || n == 8;\n        // return n % 2 == 0 && n % 4 == 0 && n % 6 == 0 && n % 8 == 0;\n        // return n % 2 == 0 && n % 4 == 0 && n % 6 == 0 && n % 8 == 0;\n        // return n % 2 == 0 && n % 4 == 0 && n % 6 == 0 && n % 8 == 0;\n        // return n % 2 == 0 && n % 4 == 0 && n % 6 == 0 && n % 8 == 0;\n        // return n % 2 == 0 && n % 4 == 0 && n % 6 == 0 && n % 8 == 0;\n        // return n % 2 == 0 && n % 4 == 0 && n % 6 == 0 && n % 8 == 0;\n        // return n % 2 == 0 && n % 4 == 0 && n % 6 == 0 && n % 8 == 0;\n        // return n % 2 == 0 && n % 4 == 0 && n % 6 == 0 && n % 8 == 0;\n        // return n % 2 ==",
        "grade-23": {
            "execution": 0
        },
        "194": "// Fill in the code here",
        "grade-194": {
            "execution": 0
        },
        "130": "boolean isPossible = false;\n        List<Integer> evenNumbers = new ArrayList<>();\n        // find all numbers that are less than n and are even\n        for (int i = 2; i < n; i++) {\n            if (i % 2 == 0) {\n                evenNumbers.add(i);\n            }\n        }\n        List<int[]> pairs = new ArrayList<>();\n        // find pairs of even numbers that add up to less than n\n        for (int i = 0; i < evenNumbers.size(); i++) {\n            for (int j = i + 1; j < evenNumbers.size(); j++) {\n                if (evenNumbers.get(i) + evenNumbers.get(j) < n) {\n                    pairs.add(new int[]{evenNumbers.get(i), evenNumbers.get(j)});\n                }\n            }\n        }\n        // check whether each even number can be divided into a sum of three pairs\n        for (int i = 0; i < evenNumbers.size(); i++) {\n            int evenNumber = evenNumbers.get(i);\n            int sum = 0;\n            int pairIndex = 0;\n            boolean found = false;\n            // go through each pair, and see if the sum of three pairs equals the current even number\n            while (pairIndex < pairs.size() && !found) {\n                sum = 0;\n                for (int[] pair : pairs) {\n                    sum += pair[0] + pair[1];\n                    if (sum == evenNumber) {\n                        found = true;\n                        break;\n                    }\n                }\n                pairIndex++;\n            }\n            if (found) {\n                isPossible = true;\n                break;\n            }\n        }\n        return isPossible;",
        "grade-130": {
            "execution": 0
        },
        "8": "if (n < 0) {\n            throw new RuntimeException(\"Input has to be positive\");\n        }\n\n        int k = 4;\n\n        if (n % 2 != 0) {\n            return false;\n        }\n\n        n = n / 2;\n\n        // dynamic programming\n        boolean[][] dp = new boolean[n + 1][k + 1];\n\n        for (int i = 0; i <= n; i++) {\n            for (int j = 0; j <= k; j++) {\n                if (j == 0) {\n                    dp[i][j] = true;\n                } else if (i < j) {\n                    dp[i][j] = false;\n                } else if (j == 1) {\n                    dp[i][j] = i % 2 == 0;\n                } else {\n                    dp[i][j] = (dp[i - 2][j - 1] || dp[i - 1][j]);\n                }\n            }\n        }\n\n        return dp[n][k];",
        "grade-8": {
            "execution": 0
        },
        "7": "// your code here...",
        "grade-7": {
            "execution": 0
        },
        "24": "// You have to complete this method\n        int i,j,k,l;\n        for(i=0;i<=n;i+=2)\n        {\n            for(j=0;j<=n;j+=2)\n            {\n                for(k=0;k<=n;k+=2)\n                {\n                    for(l=0;l<=n;l+=2)\n                    {\n                        if(i+j+k+l==n)\n                        {\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n        return false;",
        "grade-24": {
            "execution": 0
        },
        "62": "return isEqualToSumEven(n, 3);",
        "grade-62": {
            "execution": 0
        },
        "67": "for (int k1 = 0; k1 <= n; k1++) {\n            for (int k2 = 0; k2 <= n; k2++) {\n                for (int k3 = 0; k3 <= n; k3++) {\n                    for (int k4 = 0; k4 <= n; k4++) {\n                        if (k1 + k2 + k3 + k4 == n)\n                            return true;\n                    }\n                }\n            }\n        }\n        return false;",
        "grade-67": {
            "execution": 0
        },
        "167": "// TODO: YOUR CODE HERE\n        return false;",
        "grade-167": {
            "execution": 0
        },
        "197": "boolean result = false;\n        int i = 2;\n        int m = 0;\n        for (; m < n; i += 2) {\n            m += i;\n        }\n        if (m == n) {\n            result = true;\n        }\n        return result;",
        "grade-197": {
            "execution": 0
        },
        "186": "throw new RuntimeException(\"Method not implemented\");",
        "grade-186": {
            "execution": 0
        },
        "56": "return n == 4;",
        "grade-56": {
            "execution": 0
        },
        "bleu-30": 0.021550953268306857,
        "bleu-6": 0.05474147254108984,
        "bleu-79": 0.012685042228891285,
        "bleu-71": 0.866877899750182,
        "bleu-65": 0.051451743240202186,
        "bleu-37": 0.06790587577755158,
        "bleu-28": 0.04289278839477662,
        "bleu-182": 0.02828782033951228,
        "bleu-23": 0.019358123163525406,
        "bleu-194": 0.0,
        "bleu-130": 0.014851279659996471,
        "bleu-8": 0.025216098780930025,
        "bleu-7": 0.0,
        "bleu-24": 0.019961767417214046,
        "bleu-62": 0.03193496045597428,
        "bleu-67": 0.023630252036737208,
        "bleu-167": 0.027385973411104617,
        "bleu-197": 0.029392037516467934,
        "bleu-186": 0.02426532257432171,
        "bleu-56": 0.04584877552694835,
        "codebleu-30": 0.4583333333333333,
        "codebleu-6": 0.4803030303030302,
        "codebleu-79": 0.4803030303030302,
        "codebleu-71": 0.542803615955059,
        "codebleu-65": 0.5189393939393939,
        "codebleu-37": 0.6045454545454545,
        "codebleu-28": 0.4886363636363636,
        "codebleu-182": 0.42499999999999993,
        "codebleu-23": 0.6114759827074809,
        "codebleu-194": 0.0909090909090909,
        "codebleu-130": 0.6128787878787877,
        "codebleu-8": 0.5272727272727272,
        "codebleu-7": 0.0909090909090909,
        "codebleu-24": 0.4583333333333333,
        "codebleu-62": 0.17831499125058053,
        "codebleu-67": 0.44999999999999996,
        "codebleu-167": 0.19121128440604904,
        "codebleu-197": 0.428030303030303,
        "codebleu-186": 0.12427778322188324,
        "codebleu-56": 0.16253289501400928,
        "chrf-30": 0.14430983961409977,
        "chrf-6": 0.12402606087578755,
        "chrf-79": 0.05833762171708932,
        "chrf-71": 0.9108205265629917,
        "chrf-65": 0.20825488621831237,
        "chrf-37": 0.21129107939810704,
        "chrf-28": 0.15848504692060952,
        "chrf-182": 0.1023398536050931,
        "chrf-23": 0.09014793450356862,
        "chrf-194": 0.040865889098753966,
        "chrf-130": 0.04473012384905559,
        "chrf-8": 0.09552608172655651,
        "chrf-7": 0.050364633883317154,
        "chrf-24": 0.12664174258435867,
        "chrf-62": 0.19207054432057183,
        "chrf-67": 0.14084488690098748,
        "chrf-167": 0.17218032635729108,
        "chrf-197": 0.16868617993960644,
        "chrf-186": 0.05663679491804492,
        "chrf-56": 0.3006658099093974,
        "rougel-30": 0.1694915254237288,
        "rougel-6": 0.16822429906542055,
        "rougel-79": 0.09900990099009901,
        "rougel-71": 0.9333333333333333,
        "rougel-65": 0.2857142857142857,
        "rougel-37": 0.1984732824427481,
        "rougel-28": 0.2469135802469136,
        "rougel-182": 0.13750000000000004,
        "rougel-23": 0.04220779220779221,
        "rougel-194": 0.0,
        "rougel-130": 0.06315789473684211,
        "rougel-8": 0.09523809523809525,
        "rougel-7": 0.0,
        "rougel-24": 0.15873015873015875,
        "rougel-62": 0.21428571428571427,
        "rougel-67": 0.16822429906542055,
        "rougel-167": 0.15384615384615385,
        "rougel-197": 0.24242424242424243,
        "rougel-186": 0.07142857142857144,
        "rougel-56": 0.45454545454545453,
        "meteor-30": 0.2791775851642815,
        "meteor-6": 0.31397754137115846,
        "meteor-79": 0.22359006734006737,
        "meteor-71": 0.8859144923792301,
        "meteor-65": 0.38630744618964524,
        "meteor-37": 0.44204554408636043,
        "meteor-28": 0.26315789473684215,
        "meteor-182": 0.23846418732782373,
        "meteor-23": 0.12892253675663817,
        "meteor-194": 0.0,
        "meteor-130": 0.2196850393700788,
        "meteor-8": 0.26375348189415043,
        "meteor-7": 0.0,
        "meteor-24": 0.2703845903559576,
        "meteor-62": 0.09615384615384616,
        "meteor-67": 0.27042553191489366,
        "meteor-167": 0.06493506493506494,
        "meteor-197": 0.35400869046604755,
        "meteor-186": 0.032051282051282055,
        "meteor-56": 0.16666666666666669,
        "ruby-30": 0.0980392156862745,
        "ruby-6": 0.09890109890109888,
        "ruby-79": 0.053763440860215006,
        "ruby-71": 0.875,
        "ruby-65": 0.19148936170212771,
        "ruby-37": 0.11304347826086958,
        "ruby-28": 0.15384615384615385,
        "ruby-182": 0.06944444444444442,
        "ruby-23": 0.021666666666666612,
        "ruby-194": 0.0,
        "ruby-130": 0.03296703296703296,
        "ruby-8": 0.051162790697674376,
        "ruby-7": 0.0,
        "ruby-24": 0.09090909090909094,
        "ruby-62": 0.1875,
        "ruby-67": 0.09890109890109888,
        "ruby-167": 0.0625,
        "ruby-197": 0.16000000000000003,
        "ruby-186": 0.0625,
        "ruby-56": 0.3125,
        "codebertscore_f1-30": 0.6891546845436096,
        "codebertscore_f3-30": 0.7231440544128418,
        "codebertscore_f1-6": 0.7212545275688171,
        "codebertscore_f3-6": 0.7952178716659546,
        "codebertscore_f1-79": 0.6473330855369568,
        "codebertscore_f3-79": 0.714133620262146,
        "codebertscore_f1-71": 0.9816821813583374,
        "codebertscore_f3-71": 0.9816821813583374,
        "codebertscore_f1-65": 0.7633770704269409,
        "codebertscore_f3-65": 0.800845205783844,
        "codebertscore_f1-37": 0.7369312644004822,
        "codebertscore_f3-37": 0.8047030568122864,
        "codebertscore_f1-28": 0.7574992179870605,
        "codebertscore_f3-28": 0.7955260276794434,
        "codebertscore_f1-182": 0.7130695581436157,
        "codebertscore_f3-182": 0.7700932025909424,
        "codebertscore_f1-23": 0.702012300491333,
        "codebertscore_f3-23": 0.7927151918411255,
        "codebertscore_f1-194": 0.6273610591888428,
        "codebertscore_f3-194": 0.634768545627594,
        "codebertscore_f1-130": 0.6334930658340454,
        "codebertscore_f3-130": 0.741442084312439,
        "codebertscore_f1-8": 0.6789748072624207,
        "codebertscore_f3-8": 0.7674143314361572,
        "codebertscore_f1-7": 0.6089314818382263,
        "codebertscore_f3-7": 0.6101444959640503,
        "codebertscore_f1-24": 0.656121015548706,
        "codebertscore_f3-24": 0.6999725699424744,
        "codebertscore_f1-62": 0.7546784281730652,
        "codebertscore_f3-62": 0.7814023494720459,
        "codebertscore_f1-67": 0.6892329454421997,
        "codebertscore_f3-67": 0.720619261264801,
        "codebertscore_f1-167": 0.6521002054214478,
        "codebertscore_f3-167": 0.6731693744659424,
        "codebertscore_f1-197": 0.7157369256019592,
        "codebertscore_f3-197": 0.7446468472480774,
        "codebertscore_f1-186": 0.687832772731781,
        "codebertscore_f3-186": 0.6973323225975037,
        "codebertscore_f1-56": 0.8080595135688782,
        "codebertscore_f3-56": 0.7835205793380737,
        "codebertscore_s_f1-30": 0.7169236540794373,
        "codebertscore_s_f3-30": 0.7528087496757507,
        "codebertscore_s_f1-6": 0.7391742467880249,
        "codebertscore_s_f3-6": 0.8289826512336731,
        "codebertscore_s_f1-79": 0.6883328557014465,
        "codebertscore_s_f3-79": 0.763602077960968,
        "codebertscore_s_f1-71": 0.9953439831733704,
        "codebertscore_s_f3-71": 0.9953440427780151,
        "codebertscore_s_f1-65": 0.7916532158851624,
        "codebertscore_s_f3-65": 0.8411095142364502,
        "codebertscore_s_f1-37": 0.76270991563797,
        "codebertscore_s_f3-37": 0.8247758150100708,
        "codebertscore_s_f1-28": 0.7687715291976929,
        "codebertscore_s_f3-28": 0.8121069073677063,
        "codebertscore_s_f1-182": 0.7194952964782715,
        "codebertscore_s_f3-182": 0.787369430065155,
        "codebertscore_s_f1-23": 0.7972778677940369,
        "codebertscore_s_f3-23": 0.8597203493118286,
        "codebertscore_s_f1-194": 0.5799771547317505,
        "codebertscore_s_f3-194": 0.5865848660469055,
        "codebertscore_s_f1-130": 0.70994633436203,
        "codebertscore_s_f3-130": 0.7922276854515076,
        "codebertscore_s_f1-8": 0.7426106333732605,
        "codebertscore_s_f3-8": 0.8107183575630188,
        "codebertscore_s_f1-7": 0.6042479872703552,
        "codebertscore_s_f3-7": 0.6133180856704712,
        "codebertscore_s_f1-24": 0.6938489675521851,
        "codebertscore_s_f3-24": 0.7245561480522156,
        "codebertscore_s_f1-62": 0.7652214169502258,
        "codebertscore_s_f3-62": 0.7980606555938721,
        "codebertscore_s_f1-67": 0.7124460935592651,
        "codebertscore_s_f3-67": 0.745259702205658,
        "codebertscore_s_f1-167": 0.6479905843734741,
        "codebertscore_s_f3-167": 0.6840736865997314,
        "codebertscore_s_f1-197": 0.7324367761611938,
        "codebertscore_s_f3-197": 0.7603378295898438,
        "codebertscore_s_f1-186": 0.6329957842826843,
        "codebertscore_s_f3-186": 0.6401575207710266,
        "codebertscore_s_f1-56": 0.874230682849884,
        "codebertscore_s_f3-56": 0.8428612351417542,
        "gpt35_nsnr-30": 4,
        "raw_gpt35_nsnr-30": "4",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-79": 4,
        "raw_gpt35_nsnr-79": "4",
        "gpt35_nsnr-71": 4,
        "raw_gpt35_nsnr-71": "4",
        "gpt35_nsnr-65": 4,
        "raw_gpt35_nsnr-65": "4",
        "gpt35_nsnr-37": 4,
        "raw_gpt35_nsnr-37": "4",
        "gpt35_nsnr-28": 3,
        "raw_gpt35_nsnr-28": "3",
        "gpt35_nsnr-182": 4,
        "raw_gpt35_nsnr-182": "4",
        "gpt35_nsnr-23": 1,
        "raw_gpt35_nsnr-23": "1",
        "gpt35_nsnr-194": 3,
        "raw_gpt35_nsnr-194": "3",
        "gpt35_nsnr-130": 3,
        "raw_gpt35_nsnr-130": "3",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 0,
        "raw_gpt35_nsnr-7": "3 - The code snippet correctly checks if a given number can be written as the sum of exactly 4 positive even numbers. It uses a loop to generate all possible combinations of 4 even numbers that add up to the given number, and returns true if any of those combinations are found. However, it does not handle the case where the given number is less than 8, which should return false.",
        "gpt35_nsnr-24": 3,
        "raw_gpt35_nsnr-24": "3",
        "gpt35_nsnr-62": 3,
        "raw_gpt35_nsnr-62": "3",
        "gpt35_nsnr-67": 3,
        "raw_gpt35_nsnr-67": "3",
        "gpt35_nsnr-167": 0,
        "raw_gpt35_nsnr-167": "3 - The code snippet correctly defines the problem and returns the correct output for some test cases. However, it does not contain any logic to actually solve the problem.",
        "gpt35_nsnr-197": 1,
        "raw_gpt35_nsnr-197": "1",
        "gpt35_nsnr-186": 0,
        "raw_gpt35_nsnr-186": "0",
        "gpt35_nsnr-56": 2,
        "raw_gpt35_nsnr-56": "2",
        "gpt35_nswr-30": 3,
        "raw_gpt35_nswr-30": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-79": 2,
        "raw_gpt35_nswr-79": "2",
        "gpt35_nswr-71": 4,
        "raw_gpt35_nswr-71": "4",
        "gpt35_nswr-65": 3,
        "raw_gpt35_nswr-65": "3",
        "gpt35_nswr-37": 3,
        "raw_gpt35_nswr-37": "3",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-182": 2,
        "raw_gpt35_nswr-182": "2",
        "gpt35_nswr-23": 1,
        "raw_gpt35_nswr-23": "1",
        "gpt35_nswr-194": 4,
        "raw_gpt35_nswr-194": "4",
        "gpt35_nswr-130": 2,
        "raw_gpt35_nswr-130": "2",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-24": 3,
        "raw_gpt35_nswr-24": "3",
        "gpt35_nswr-62": 0,
        "raw_gpt35_nswr-62": "0",
        "gpt35_nswr-67": 2,
        "raw_gpt35_nswr-67": "2",
        "gpt35_nswr-167": 3,
        "raw_gpt35_nswr-167": "3",
        "gpt35_nswr-197": 0,
        "raw_gpt35_nswr-197": "0",
        "gpt35_nswr-186": 4,
        "raw_gpt35_nswr-186": "4",
        "gpt35_nswr-56": 1,
        "raw_gpt35_nswr-56": "1"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    public static ArrayList<Integer> parseMusic(String music_string) {\n",
        "snippet": [
            "        String[] notes = string.split(\" \");\n        List<Integer> result = new ArrayList<>();\n        for (String s : notes) {\n            switch (s) {\n                case \"o\" -> result.add(4);\n                case \"o|\" -> result.add(2);\n                case \".|\" -> result.add(1);\n            }\n        }\n        return result;\n    }\n}"
        ],
        "simplified": "Input to this function is a string representing musical notes in a special ASCII format. Your task is to parse this string and return list of integers corresponding to how many beats does each not last. Here is a legend: 'o' - whole note, lasts four beats 'o|' - half note, lasts two beats '.|' - quater note, lasts one beat",
        "task_id": "17",
        "178": "// return new ArrayList<>();\n        var result = new ArrayList<Integer>();\n        for (int i = 0; i < music_string.length(); i++) {\n            char c = music_string.charAt(i);\n            if (c == 'o') {\n                result.add(4);\n            } else if (c == '|') {\n                result.add(1);\n            } else if (c == '.') {\n                result.add(2);\n            }\n        }\n        return result;",
        "grade-178": {
            "execution": 0
        },
        "30": "ArrayList<Integer> res = new ArrayList<>();\n        String[] notes = music_string.split(\" \");\n        for (String note : notes) {\n            if (note.equals(\"o\")) {\n                res.add(4);\n            } else if (note.equals(\"o|\")) {\n                res.add(2);\n            } else if (note.equals(\".|\")) {\n                res.add(1);\n            }\n        }\n        return res;",
        "grade-30": {
            "execution": 1
        },
        "6": "ArrayList<Integer> beats = new ArrayList<Integer>();\n        String[] notes = music_string.split(\" \");\n        for (String note : notes) {\n            char lastCharacter = note.charAt(note.length() - 1);\n            if (lastCharacter == 'o') {\n                beats.add(4);\n            } else if (lastCharacter == '|') {\n                beats.add(2);\n            } else {\n                beats.add(1);\n            }\n        }\n        return beats;",
        "grade-6": {
            "execution": 0
        },
        "76": "final int WHOLE_NOTE = 4;\n        final int HALF_NOTE = 2;\n        final int QUARTER_NOTE = 1;\n        final char WHOLE_NOTE_CHAR = 'o';\n        final char HALF_NOTE_CHAR = '|';\n        final char QUARTER_NOTE_CHAR = '.';\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        char[] music = music_string.toCharArray();\n        int index = 0;\n        for (int i = 0; i < music.length; i++) {\n            if (music[i] == WHOLE_NOTE_CHAR) {\n                result.add(WHOLE_NOTE);\n            } else if (music[i] == HALF_NOTE_CHAR) {\n                result.add(HALF_NOTE);\n            } else if (music[i] == QUARTER_NOTE_CHAR) {\n                result.add(QUARTER_NOTE);\n            }\n        }\n        return result;",
        "grade-76": {
            "execution": 0
        },
        "67": "ArrayList<Integer> duration = new ArrayList<Integer>();\n        StringBuilder sb = new StringBuilder();\n        String[] music = music_string.split(\" \");\n        for (String note : music) {\n            if (note.equals(\"o\")) {\n                duration.add(4);\n            } else if (note.equals(\"o|\")) {\n                duration.add(2);\n            } else if (note.equals(\".|\")) {\n                duration.add(1);\n            }\n        }\n        return duration;",
        "grade-67": {
            "execution": 1
        },
        "61": "ArrayList<Integer> notes = new ArrayList<Integer>();\n        String[] split_notes = music_string.split(\" \");\n        for (String note : split_notes) {\n            if (note.equals(\"o\")) {\n                notes.add(4);\n            } else if (note.equals(\"o|\")) {\n                notes.add(2);\n            } else if (note.equals(\".|\")) {\n                notes.add(1);\n            }\n        }\n        return notes;",
        "grade-61": {
            "execution": 1
        },
        "37": "ArrayList<Integer> ret = new ArrayList<Integer>();\n\t// TODO: your code here.\n\tStringTokenizer st = new StringTokenizer(music_string);\n\twhile (st.hasMoreTokens()) {\n\t    String cur = st.nextToken();\n\t    ret.add(cur.length());\n\t}\n\treturn ret;",
        "grade-37": {
            "execution": 0
        },
        "28": "ArrayList<Integer> notes = new ArrayList<Integer>();\n        // Write your code here!\n        return notes;",
        "grade-28": {
            "execution": 0
        },
        "191": "ArrayList<Integer> result = new ArrayList<Integer>();\n        String[] note_strs = music_string.split(\" \");\n        for (String note_str : note_strs) {\n            char note_type = note_str.charAt(0);\n            switch (note_type) {\n                case 'o':\n                    result.add(4);\n                    break;\n                case 'o':\n                    result.add(2);\n                    break;\n                case '.':\n                    result.add(1);\n                    break;\n            }\n        }\n        return result;",
        "grade-191": {
            "execution": 0
        },
        "153": "ArrayList<Integer> result = new ArrayList<Integer>();\n        StringTokenizer st = new StringTokenizer(music_string, \" \", false);\n        while (st.hasMoreTokens()) {\n            String note = st.nextToken();\n            char last = note.charAt(note.length() - 1);\n            int len = 1;\n            if (last == '|') {\n                len = note.length() == 1 ? 1 : 2;\n            } else {\n                len = 4;\n            }\n            result.add(len);\n        }\n        return result;",
        "grade-153": {
            "execution": 0
        },
        "23": "ArrayList<Integer> a=new ArrayList<Integer>();\n        String x[]=music_string.split(\" \");\n        for(int i=0;i<x.length;i++)\n        {\n            if(x[i].equals(\"o\"))\n            {\n                a.add(4);\n            }\n            else if(x[i].equals(\"o|\"))\n            {\n                a.add(2);\n            }\n            else if(x[i].equals(\".|\"))\n            {\n                a.add(1);\n            }\n        }\n        return a;",
        "grade-23": {
            "execution": 1
        },
        "165": "// TODO: Implement this function\n        return null;",
        "grade-165": {
            "execution": 0
        },
        "122": "String[] notes = music_string.split(\"\\\\s+\");\n        ArrayList<Integer> res = new ArrayList<>();\n        for (String s : notes) {\n            if (s.equals(\"o\")) {\n                res.add(4);\n            } else if (s.equals(\"o|\")) {\n                res.add(2);\n            } else if (s.equals(\".|\")) {\n                res.add(1);\n            }\n        }\n        return res;",
        "grade-122": {
            "execution": 1
        },
        "8": "ArrayList<Integer> parsed_music = new ArrayList<Integer>();\n        for (int i = 0; i < music_string.length(); i++) {\n            if (music_string.charAt(i) == ' ') continue;\n            if (music_string.charAt(i) == 'o') {\n                if (i + 1 < music_string.length() && music_string.charAt(i + 1) == '|') {\n                    parsed_music.add(2);\n                    i++;\n                } else {\n                    parsed_music.add(4);\n                }\n            } else if (music_string.charAt(i) == '.') {\n                parsed_music.add(1);\n            }\n        }\n        return parsed_music;",
        "grade-8": {
            "execution": 1
        },
        "7": "ArrayList<Integer> answer = new ArrayList<Integer>();\n        int total = 0;\n        for (int i = 0; i < music_string.length(); i++) {\n            if (music_string.charAt(i) == 'o') {\n                if (i + 1 < music_string.length() && music_string.charAt(i + 1) == '|') {\n                    answer.add(2);\n                    total += 2;\n                    i++;\n                } else {\n                    answer.add(4);\n                    total += 4;\n                }\n            } else if (music_string.charAt(i) == '.') {\n                answer.add(1);\n                total += 1;\n            }\n        }\n        return answer;",
        "grade-7": {
            "execution": 1
        },
        "24": "ArrayList<Integer> beats = new ArrayList<Integer>();\n        String[] note_list = music_string.split(\" \");\n        for (String note : note_list) {\n            if (note.equals(\"o\")) {\n                beats.add(4);\n            } else if (note.equals(\"o|\")) {\n                beats.add(2);\n            } else if (note.equals(\".|\")) {\n                beats.add(1);\n            }\n        }\n        return beats;",
        "grade-24": {
            "execution": 1
        },
        "58": "// // Your code here\n        // String[] music_array = music_string.split(\"\\\\s+\");\n        // ArrayList<Integer> music_beat = new ArrayList<Integer>();\n        // for (String notes : music_array) {\n        //     if (notes.equals(\"o\")) {\n        //         music_beat.add(4);\n        //     } else if (notes.equals(\"o|\")) {\n        //         music_beat.add(2);\n        //     } else if (notes.equals(\".|\")) {\n        //         music_beat.add(1);\n        //     }\n        // }\n        // return music_beat;\n        return music_string.chars().map(c -> c == 'o' ? 4 : c == 'o' ? 2 : 1).boxed().collect(Collectors.toCollection(ArrayList::new));",
        "grade-58": {
            "execution": 0
        },
        "63": "ArrayList<Integer> res = new ArrayList<>();\n        ArrayList<Character> list = new ArrayList<>();\n        for (char c : music_string.toCharArray()) {\n            list.add(c);\n        }\n        //System.out.println(list);\n        int i = 0;\n        while (i < list.size()) {\n            if (list.get(i) == 'o') {\n                if (i + 1 < list.size() && list.get(i + 1) == '|') {\n                    i += 2;\n                    res.add(2);\n                } else {\n                    i++;\n                    res.add(4);\n                }\n            } else {\n                i += 2;\n                res.add(1);\n            }\n        }\n        return res;",
        "grade-63": {
            "execution": 0
        },
        "143": "ArrayList<Integer> result = new ArrayList<Integer>();\n        // Do your magic here\n        return result;",
        "grade-143": {
            "execution": 0
        },
        "168": "ArrayList<Integer> counts = new ArrayList<Integer>();\n        int count = 0;\n        for (int i = 0; i < music_string.length(); i++) {\n            if (music_string.charAt(i) == 'o') {\n                count++;\n            } else if (music_string.charAt(i) == '|') {\n                counts.add(count);\n                count = 0;\n            }\n        }\n        return counts;",
        "grade-168": {
            "execution": 0
        },
        "bleu-178": 0.3563386638649119,
        "bleu-30": 0.45788855802410305,
        "bleu-6": 0.38931637745903286,
        "bleu-76": 0.1979151060165702,
        "bleu-67": 0.3647735799310749,
        "bleu-61": 0.40493049179242974,
        "bleu-37": 0.145476040901206,
        "bleu-28": 0.03201927527597288,
        "bleu-191": 0.5172430381578047,
        "bleu-153": 0.19550105385477662,
        "bleu-23": 0.32387690621820625,
        "bleu-165": 2.2627195397565643e-05,
        "bleu-122": 0.4577525498117261,
        "bleu-8": 0.2241884841510291,
        "bleu-7": 0.19613541074768473,
        "bleu-24": 0.4000213361782329,
        "bleu-58": 0.18444880179862666,
        "bleu-63": 0.2049119073804289,
        "bleu-143": 0.04123513028665557,
        "bleu-168": 0.17784825603955348,
        "codebleu-178": 0.6050303434684772,
        "codebleu-30": 0.6967152014301171,
        "codebleu-6": 0.674346672915893,
        "codebleu-76": 0.5787072239941846,
        "codebleu-67": 0.6769147414639508,
        "codebleu-61": 0.6677163621837037,
        "codebleu-37": 0.41586439095310324,
        "codebleu-28": 0.12500385213870113,
        "codebleu-191": 0.6982276263124627,
        "codebleu-153": 0.5264022366648458,
        "codebleu-23": 0.629632789497086,
        "codebleu-165": 0.04304869558358203,
        "codebleu-122": 0.6898588331123887,
        "codebleu-8": 0.5917570823106693,
        "codebleu-7": 0.5853316927195803,
        "codebleu-24": 0.663606646458901,
        "codebleu-58": 0.6537007534121932,
        "codebleu-63": 0.5837127321238557,
        "codebleu-143": 0.1323251374663474,
        "codebleu-168": 0.5035999917629236,
        "chrf-178": 0.5308440753786787,
        "chrf-30": 0.5829366448080798,
        "chrf-6": 0.5029675822644668,
        "chrf-76": 0.3859610561205876,
        "chrf-67": 0.46768236017435383,
        "chrf-61": 0.5081179614053105,
        "chrf-37": 0.3340430552583908,
        "chrf-28": 0.23219511519059768,
        "chrf-191": 0.6539396106276192,
        "chrf-153": 0.4080212738629376,
        "chrf-23": 0.4427382232624008,
        "chrf-165": 0.05592227130016959,
        "chrf-122": 0.5978128452323376,
        "chrf-8": 0.3509817151122869,
        "chrf-7": 0.35083533034657727,
        "chrf-24": 0.5033895369525907,
        "chrf-58": 0.4069198106455091,
        "chrf-63": 0.40919363944845083,
        "chrf-143": 0.2886699977747609,
        "chrf-168": 0.31213868168555503,
        "rougel-178": 0.5148514851485149,
        "rougel-30": 0.5625,
        "rougel-6": 0.5102040816326532,
        "rougel-76": 0.39183673469387753,
        "rougel-67": 0.5221674876847291,
        "rougel-61": 0.5492227979274611,
        "rougel-37": 0.40251572327044033,
        "rougel-28": 0.2631578947368421,
        "rougel-191": 0.6595744680851063,
        "rougel-153": 0.38647342995169087,
        "rougel-23": 0.4811320754716981,
        "rougel-165": 0.06122448979591835,
        "rougel-122": 0.6938775510204083,
        "rougel-8": 0.39662447257383965,
        "rougel-7": 0.3900414937759336,
        "rougel-24": 0.5492227979274611,
        "rougel-58": 0.4571428571428572,
        "rougel-63": 0.38910505836575876,
        "rougel-143": 0.3008849557522124,
        "rougel-168": 0.42622950819672134,
        "meteor-178": 0.5415897043143969,
        "meteor-30": 0.6774724398688046,
        "meteor-6": 0.6159538130244301,
        "meteor-76": 0.4539901858698973,
        "meteor-67": 0.6461043697469067,
        "meteor-61": 0.6545719291060906,
        "meteor-37": 0.32632339550300277,
        "meteor-28": 0.17967276080574612,
        "meteor-191": 0.7693099017391092,
        "meteor-153": 0.49606160307106756,
        "meteor-23": 0.5904231376889177,
        "meteor-165": 0.01870324189526184,
        "meteor-122": 0.6956875857338821,
        "meteor-8": 0.4639730192466643,
        "meteor-7": 0.4682013114867738,
        "meteor-24": 0.6545719291060906,
        "meteor-58": 0.4148130264376393,
        "meteor-63": 0.44864630081958207,
        "meteor-143": 0.19264081181468196,
        "meteor-168": 0.39664487034949275,
        "ruby-178": 0.3771929824561403,
        "ruby-30": 0.42307692307692313,
        "ruby-6": 0.33333333333333337,
        "ruby-76": 0.28025477707006374,
        "ruby-67": 0.3826086956521739,
        "ruby-61": 0.419047619047619,
        "ruby-37": 0.26136363636363635,
        "ruby-28": 0.17045454545454541,
        "ruby-191": 0.45999999999999996,
        "ruby-153": 0.2100840336134454,
        "ruby-23": 0.3467741935483871,
        "ruby-165": 0.03409090909090906,
        "ruby-122": 0.6111111111111112,
        "ruby-8": 0.2348993288590604,
        "ruby-7": 0.23529411764705888,
        "ruby-24": 0.4095238095238095,
        "ruby-58": 0.33333333333333337,
        "ruby-63": 0.2781065088757396,
        "ruby-143": 0.19318181818181823,
        "ruby-168": 0.2210526315789474,
        "codebertscore_f1-178": 0.8196088671684265,
        "codebertscore_f3-178": 0.831321120262146,
        "codebertscore_f1-30": 0.8677805662155151,
        "codebertscore_f3-30": 0.8782800436019897,
        "codebertscore_f1-6": 0.8171687722206116,
        "codebertscore_f3-6": 0.8297736644744873,
        "codebertscore_f1-76": 0.7230833768844604,
        "codebertscore_f3-76": 0.7812221646308899,
        "codebertscore_f1-67": 0.8284649848937988,
        "codebertscore_f3-67": 0.8420173525810242,
        "codebertscore_f1-61": 0.8473434448242188,
        "codebertscore_f3-61": 0.856035590171814,
        "codebertscore_f1-37": 0.7390556931495667,
        "codebertscore_f3-37": 0.7422218322753906,
        "codebertscore_f1-28": 0.7073372006416321,
        "codebertscore_f3-28": 0.6756934523582458,
        "codebertscore_f1-191": 0.8424897789955139,
        "codebertscore_f3-191": 0.8572071194648743,
        "codebertscore_f1-153": 0.7758941054344177,
        "codebertscore_f3-153": 0.7944496273994446,
        "codebertscore_f1-23": 0.8099845051765442,
        "codebertscore_f3-23": 0.8257607817649841,
        "codebertscore_f1-165": 0.585400402545929,
        "codebertscore_f3-165": 0.5772764086723328,
        "codebertscore_f1-122": 0.8856576085090637,
        "codebertscore_f3-122": 0.9006218314170837,
        "codebertscore_f1-8": 0.7495696544647217,
        "codebertscore_f3-8": 0.7756666541099548,
        "codebertscore_f1-7": 0.7545208930969238,
        "codebertscore_f3-7": 0.782733142375946,
        "codebertscore_f1-24": 0.840592622756958,
        "codebertscore_f3-24": 0.8501428961753845,
        "codebertscore_f1-58": 0.7637190818786621,
        "codebertscore_f3-58": 0.8150180578231812,
        "codebertscore_f1-63": 0.7518028020858765,
        "codebertscore_f3-63": 0.7731578946113586,
        "codebertscore_f1-143": 0.714790940284729,
        "codebertscore_f3-143": 0.6870643496513367,
        "codebertscore_f1-168": 0.7688777446746826,
        "codebertscore_f3-168": 0.7782652974128723,
        "codebertscore_s_f1-178": 0.9075507521629333,
        "codebertscore_s_f3-178": 0.9182141423225403,
        "codebertscore_s_f1-30": 0.9322813153266907,
        "codebertscore_s_f3-30": 0.9380638599395752,
        "codebertscore_s_f1-6": 0.9052563905715942,
        "codebertscore_s_f3-6": 0.9154456853866577,
        "codebertscore_s_f1-76": 0.8405353426933289,
        "codebertscore_s_f3-76": 0.8927470445632935,
        "codebertscore_s_f1-67": 0.9052662253379822,
        "codebertscore_s_f3-67": 0.9159350991249084,
        "codebertscore_s_f1-61": 0.9201159477233887,
        "codebertscore_s_f3-61": 0.9241312146186829,
        "codebertscore_s_f1-37": 0.8759605884552002,
        "codebertscore_s_f3-37": 0.885097086429596,
        "codebertscore_s_f1-28": 0.8912502527236938,
        "codebertscore_s_f3-28": 0.8626840710639954,
        "codebertscore_s_f1-191": 0.921013593673706,
        "codebertscore_s_f3-191": 0.932296633720398,
        "codebertscore_s_f1-153": 0.8740955591201782,
        "codebertscore_s_f3-153": 0.8943321108818054,
        "codebertscore_s_f1-23": 0.8975198268890381,
        "codebertscore_s_f3-23": 0.9118672609329224,
        "codebertscore_s_f1-165": 0.8707306385040283,
        "codebertscore_s_f3-165": 0.8383871912956238,
        "codebertscore_s_f1-122": 0.9367793798446655,
        "codebertscore_s_f3-122": 0.9455593228340149,
        "codebertscore_s_f1-8": 0.8589458465576172,
        "codebertscore_s_f3-8": 0.8850470781326294,
        "codebertscore_s_f1-7": 0.8620108962059021,
        "codebertscore_s_f3-7": 0.8904353380203247,
        "codebertscore_s_f1-24": 0.914983332157135,
        "codebertscore_s_f3-24": 0.9211244583129883,
        "codebertscore_s_f1-58": 0.8638371825218201,
        "codebertscore_s_f3-58": 0.9045757055282593,
        "codebertscore_s_f1-63": 0.861615002155304,
        "codebertscore_s_f3-63": 0.8890594840049744,
        "codebertscore_s_f1-143": 0.8972806334495544,
        "codebertscore_s_f3-143": 0.8713446259498596,
        "codebertscore_s_f1-168": 0.8805944323539734,
        "codebertscore_s_f3-168": 0.8888766169548035,
        "gpt35_nsnr-178": 0,
        "raw_gpt35_nsnr-178": "3 - The code correctly handles the 'o', '|' and '.' characters and returns a list of integers representing the duration of each note. However, the code does not handle the 'o|' case, which should represent a half note lasting two beats.",
        "gpt35_nsnr-30": 3,
        "raw_gpt35_nsnr-30": "3",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-76": 4,
        "raw_gpt35_nsnr-76": "4",
        "gpt35_nsnr-67": 4,
        "raw_gpt35_nsnr-67": "4",
        "gpt35_nsnr-61": 4,
        "raw_gpt35_nsnr-61": "4",
        "gpt35_nsnr-37": 2,
        "raw_gpt35_nsnr-37": "2",
        "gpt35_nsnr-28": 0,
        "raw_gpt35_nsnr-28": "2 - The code snippet does not contain any logic to parse the input string and convert it into a list of integers representing the duration of each note. The function only initializes an empty ArrayList and returns it.",
        "gpt35_nsnr-191": 2,
        "raw_gpt35_nsnr-191": "2",
        "gpt35_nsnr-153": 4,
        "raw_gpt35_nsnr-153": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-165": 0,
        "raw_gpt35_nsnr-165": "0",
        "gpt35_nsnr-122": 3,
        "raw_gpt35_nsnr-122": "3",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-24": 4,
        "raw_gpt35_nsnr-24": "4",
        "gpt35_nsnr-58": 2,
        "raw_gpt35_nsnr-58": "2",
        "gpt35_nsnr-63": 4,
        "raw_gpt35_nsnr-63": "4",
        "gpt35_nsnr-143": 2,
        "raw_gpt35_nsnr-143": "2",
        "gpt35_nsnr-168": 3,
        "raw_gpt35_nsnr-168": "3",
        "gpt35_nswr-178": 3,
        "raw_gpt35_nswr-178": "3",
        "gpt35_nswr-30": 4,
        "raw_gpt35_nswr-30": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-76": 4,
        "raw_gpt35_nswr-76": "4",
        "gpt35_nswr-67": 4,
        "raw_gpt35_nswr-67": "4",
        "gpt35_nswr-61": 4,
        "raw_gpt35_nswr-61": "4",
        "gpt35_nswr-37": 2,
        "raw_gpt35_nswr-37": "2",
        "gpt35_nswr-28": 0,
        "raw_gpt35_nswr-28": "0",
        "gpt35_nswr-191": 3,
        "raw_gpt35_nswr-191": "3",
        "gpt35_nswr-153": 3,
        "raw_gpt35_nswr-153": "3",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-165": 0,
        "raw_gpt35_nswr-165": "0",
        "gpt35_nswr-122": 4,
        "raw_gpt35_nswr-122": "4",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-24": 4,
        "raw_gpt35_nswr-24": "4",
        "gpt35_nswr-58": 2,
        "raw_gpt35_nswr-58": "2",
        "gpt35_nswr-63": 3,
        "raw_gpt35_nswr-63": "3",
        "gpt35_nswr-143": 2,
        "raw_gpt35_nswr-143": "2",
        "gpt35_nswr-168": 3,
        "raw_gpt35_nswr-168": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    // True\n    // >>> same_chars('abcd', 'dddddddabc')\n    // True\n    // >>> same_chars('dddddddabc', 'abcd')\n    // True\n    // >>> same_chars('eabcd', 'dddddddabc')\n    // False\n    // >>> same_chars('abcd', 'dddddddabce')\n    // False\n    // >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    // False\n    public static boolean sameChars(String s0, String s1) {\n",
        "snippet": [
            "        Set<Character> set0 = new HashSet<>();\n        for (char c : s0.toCharArray()) {\n            set0.add(c);\n        }\n        Set<Character> set1 = new HashSet<>();\n        for (char c : s1.toCharArray()) {\n            set1.add(c);\n        }\n        return set0.equals(set1);\n    }\n}"
        ],
        "simplified": "Check if two words have the same characters.",
        "task_id": "54",
        "168": "int[] a = new int[26];\n        int[] b = new int[26];\n        for (int i = 0; i < s0.length(); i++) {\n            char c = s0.charAt(i);\n            a[c - 'a']++;\n        }\n        for (int i = 0; i < s1.length(); i++) {\n            char c = s1.charAt(i);\n            b[c - 'a']++;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (a[i] != b[i]) {\n                return false;\n            }\n        }\n        return true;",
        "grade-168": {
            "execution": 0
        },
        "28": "if (s0.length() != s1.length()) return false;\n        int[] a = new int[26];\n        for (int i = 0; i < s0.length(); i++) {\n            a[s0.charAt(i) - 'a']++;\n            a[s1.charAt(i) - 'a']--;\n        }\n        for (int n : a) if (n != 0) return false;\n        return true;",
        "grade-28": {
            "execution": 0
        },
        "6": "// 3. Count the number of each letter in s0.\n        Map<Character, Integer> counts0 = new HashMap<>();\n        for (int i = 0; i < s0.length(); i++) {\n            char c = s0.charAt(i);\n            if (counts0.containsKey(c)) {\n                counts0.put(c, counts0.get(c) + 1);\n            } else {\n                counts0.put(c, 1);\n            }\n        }\n        // counts0:\n        // { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'z': 4 }\n        // 4. Loop through the letters in s1.\n        for (int i = 0; i < s1.length(); i++) {\n            char c = s1.charAt(i);\n            // 5. If the letter isn't in s0, return False.\n            if (!counts0.containsKey(c)) {\n                return false;\n            }\n            // 6. Decrement the count in counts0.\n            int count = counts0.get(c);\n            if (count == 1) {\n                counts0.remove(c);\n            } else {\n                counts0.put(c, count - 1);\n            }\n        }\n        // 7. Return True if counts0 is empty.\n        return counts0.isEmpty();",
        "grade-6": {
            "execution": 0
        },
        "198": "int [] cnts0 = new int[26];\n        int [] cnts1 = new int[26];\n        for (int i = 0; i < s0.length(); i++) {\n            cnts0[s0.charAt(i) - 'a']++;\n        }\n        for (int i = 0; i < s1.length(); i++) {\n            cnts1[s1.charAt(i) - 'a']++;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (cnts0[i] != cnts1[i]) {\n                return false;\n            }\n        }\n        return true;",
        "grade-198": {
            "execution": 0
        },
        "72": "String s0_sorted = String.valueOf(s0.chars().sorted().toArray());\n        String s1_sorted = String.valueOf(s1.chars().sorted().toArray());\n        return s0_sorted.equals(s1_sorted);",
        "grade-72": {
            "execution": 0
        },
        "63": "int[] frequency_s0 = new int[26];\n        int[] frequency_s1 = new int[26];\n        for (int i = 0; i < s0.length(); i++) {\n            frequency_s0[s0.charAt(i) - 'a']++;\n        }\n        for (int i = 0; i < s1.length(); i++) {\n            frequency_s1[s1.charAt(i) - 'a']++;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (frequency_s0[i] != frequency_s1[i]) {\n                return false;\n            }\n        }\n        return true;",
        "grade-63": {
            "execution": 0
        },
        "58": "String min = s0.length() < s1.length() ? s0 : s1;\n        String max = s0.length() < s1.length() ? s1 : s0;\n        int l = min.length();\n        for (int i = 0; i < l; i++) {\n            char c = min.charAt(i);\n            int j = max.indexOf(c);\n            if (j == -1) {\n                return false;\n            }\n            max = max.substring(0, j) + max.substring(j + 1);\n        }\n        return true;",
        "grade-58": {
            "execution": 0
        },
        "35": "char[] chars0 = s0.toCharArray();\n        char[] chars1 = s1.toCharArray();\n        Arrays.sort(chars0);\n        Arrays.sort(chars1);\n        String s0_sorted = new String(chars0);\n        String s1_sorted = new String(chars1);\n        return s0_sorted.equals(s1_sorted);",
        "grade-35": {
            "execution": 0
        },
        "197": "// first sum all the ord values of the characters\n        int sum0 = 0;\n        for (int i = 0; i < s0.length(); i++) {\n            sum0 += s0.charAt(i);\n        }\n        int sum1 = 0;\n        for (int i = 0; i < s1.length(); i++) {\n            sum1 += s1.charAt(i);\n        }\n        // then subtract the ord values of s0 from s1\n        // then sum the ord values of the characters left\n        if (sum0 == sum1) {\n            return true;\n        }\n        int sum2 = 0;\n        for (int i = 0; i < s1.length(); i++) {\n            sum2 += s1.charAt(i) - s0.charAt(i);\n        }\n        // if sum2 == sum0 the two word have the same characters.\n        if (sum2 == sum0) {\n            return true;\n        }\n        return false;",
        "grade-197": {
            "execution": 0
        },
        "26": "// ...\n        int[] alphabet = new int[26];\n        for (int i = 0; i < s0.length(); i++) {\n            alphabet[s0.charAt(i) - 'a']++;\n        }\n        for (int i = 0; i < s1.length(); i++) {\n            alphabet[s1.charAt(i) - 'a']--;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (alphabet[i] != 0) {\n                return false;\n            }\n        }\n        return true;",
        "grade-26": {
            "execution": 0
        },
        "179": "return true;",
        "grade-179": {
            "execution": 0
        },
        "144": "// Check if one string is a subsequence of the other.\n        return isSubsequence(s0, s1) || isSubsequence(s1, s0);",
        "grade-144": {
            "execution": 0
        },
        "22": "final Set<Character> set0 = new HashSet<>();\n        for (int i = 0; i < s0.length(); i++) {\n            set0.add(s0.charAt(i));\n        }\n        final Set<Character> set1 = new HashSet<>();\n        for (int i = 0; i < s1.length(); i++) {\n            set1.add(s1.charAt(i));\n        }\n        return set0.equals(set1);",
        "grade-22": {
            "execution": 1
        },
        "156": "int[] a = new int[256];\n        for (int i = 0; i < s0.length(); i++) {\n            a[s0.charAt(i)]++;\n        }\n        for (int i = 0; i < s1.length(); i++) {\n            a[s1.charAt(i)]--;\n        }\n        for (int i = 0; i < 256; i++) {\n            if (a[i] != 0) {\n                return false;\n            }\n        }\n        return true;",
        "grade-156": {
            "execution": 0
        },
        "110": "if (s0.length() > s1.length()) {\n            return sameChars(s1, s0);\n        }\n        char c = s0.charAt(0);\n        int idx = s1.indexOf(c);\n        if (idx == -1) {\n            return false;\n        }\n        if (s0.length() == 1) {\n            return true;\n        }\n        String s1_prime = s1.substring(0, idx) + s1.substring(idx + 1);\n        return sameChars(s0.substring(1), s1_prime);",
        "grade-110": {
            "execution": 0
        },
        "8": "Map<Character, Integer> map = new HashMap<>();\n        for (char c : s0.toCharArray()) {\n            map.put(c, map.getOrDefault(c, 0) + 1);\n        }\n        for (char c : s1.toCharArray()) {\n            map.put(c, map.getOrDefault(c, 0) - 1);\n        }\n        for (char c : map.keySet()) {\n            if (map.get(c) != 0) return false;\n        }\n        return true;",
        "grade-8": {
            "execution": 0
        },
        "7": "char[] c0 = s0.toCharArray();\n        char[] c1 = s1.toCharArray();\n        if (c0.length != c1.length) {\n            return false;\n        }\n        int[] counter = new int[26];\n        for (int i = 0; i < c0.length; i++) {\n            int index = c0[i] - 'a';\n            counter[index]++;\n        }\n        for (int i = 0; i < c1.length; i++) {\n            int index = c1[i] - 'a';\n            counter[index]--;\n        }\n        for (int i = 0; i < counter.length; i++) {\n            if (counter[i] != 0) {\n                return false;\n            }\n        }\n        return true;",
        "grade-7": {
            "execution": 0
        },
        "23": "int[] cnt = new int[26];\n        for (int i = 0; i < s0.length(); i++) {\n            char c = s0.charAt(i);\n            cnt[c - 'a'] += 1;\n        }\n        for (int i = 0; i < s1.length(); i++) {\n            char c = s1.charAt(i);\n            cnt[c - 'a'] -= 1;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (cnt[i] != 0) {\n                return false;\n            }\n        }\n        return true;",
        "grade-23": {
            "execution": 0
        },
        "55": "// First create character counts for the two strings.\n        List<Integer> c0 = new ArrayList<>();\n        List<Integer> c1 = new ArrayList<>();\n        for (int i = 0; i < 26; i++) {\n            c0.add(0);\n            c1.add(0);\n        }\n        for (int i = 0; i < s0.length(); i++) {\n            c0.set(s0.charAt(i) - 'a', c0.get(s0.charAt(i) - 'a') + 1);\n        }\n        for (int i = 0; i < s1.length(); i++) {\n            c1.set(s1.charAt(i) - 'a', c1.get(s1.charAt(i) - 'a') + 1);\n        }\n        // Return true if the two lists are equal.\n        return c0.equals(c1);",
        "grade-55": {
            "execution": 0
        },
        "60": "boolean result = false;\n        Map<Character, Integer> map0 = new HashMap<>();\n        Map<Character, Integer> map1 = new HashMap<>();\n        for (int i = 0; i < s0.length(); i++) {\n            if (map0.containsKey(s0.charAt(i))) {\n                map0.put(s0.charAt(i), map0.get(s0.charAt(i)) + 1);\n            } else {\n                map0.put(s0.charAt(i), 1);\n            }\n        }\n        for (int i = 0; i < s1.length(); i++) {\n            if (map1.containsKey(s1.charAt(i))) {\n                map1.put(s1.charAt(i), map1.get(s1.charAt(i)) + 1);\n            } else {\n                map1.put(s1.charAt(i), 1);\n            }\n        }\n        if (map0.size() == map1.size()) {\n            result = true;\n            for (char c : map0.keySet()) {\n                if (!map1.containsKey(c) || !map1.get(c).equals(map0.get(c))) {\n                    result = false;\n                    break;\n                }\n            }\n        }\n        return result;",
        "grade-60": {
            "execution": 0
        },
        "bleu-168": 0.04715821327486208,
        "bleu-28": 0.05219428444856593,
        "bleu-6": 0.07884041307449813,
        "bleu-198": 0.047170608056152606,
        "bleu-72": 0.1020342661537526,
        "bleu-63": 0.047170608056152606,
        "bleu-58": 0.10825582907894123,
        "bleu-35": 0.20919446604147476,
        "bleu-197": 0.04046118015540674,
        "bleu-26": 0.04983636600005711,
        "bleu-179": 1.2691361926826919e-12,
        "bleu-144": 0.006742080224779462,
        "bleu-22": 0.4967035343013279,
        "bleu-156": 0.0552843011850337,
        "bleu-110": 0.08682884714477977,
        "bleu-8": 0.3414804437715556,
        "bleu-7": 0.11699913654679443,
        "bleu-23": 0.05057340740497879,
        "bleu-55": 0.09741158138893695,
        "bleu-60": 0.10708223997493686,
        "codebleu-168": 0.5464276333070659,
        "codebleu-28": 0.5613343840294195,
        "codebleu-6": 0.6685407663183942,
        "codebleu-198": 0.554307853953244,
        "codebleu-72": 0.37449977800161727,
        "codebleu-63": 0.554307853953244,
        "codebleu-58": 0.567521594427545,
        "codebleu-35": 0.45276752385665847,
        "codebleu-197": 0.593117940635671,
        "codebleu-26": 0.552534804307854,
        "codebleu-179": 0.012345679048497463,
        "codebleu-144": 0.14063393727935614,
        "codebleu-22": 0.7194614053533135,
        "codebleu-156": 0.552534804307854,
        "codebleu-110": 0.5318757166499153,
        "codebleu-8": 0.6863348980912556,
        "codebleu-7": 0.5357893354347255,
        "codebleu-23": 0.5570002626740215,
        "codebleu-55": 0.6461665795835224,
        "codebleu-60": 0.6897491191739807,
        "chrf-168": 0.2068116531866063,
        "chrf-28": 0.18277870281414285,
        "chrf-6": 0.24957392890634736,
        "chrf-198": 0.19871699851104058,
        "chrf-72": 0.24827235477428677,
        "chrf-63": 0.20553129427640238,
        "chrf-58": 0.20424267612883346,
        "chrf-35": 0.3498122762470697,
        "chrf-197": 0.23813793715885745,
        "chrf-26": 0.19576765598330648,
        "chrf-179": 0.030605052171037293,
        "chrf-144": 0.10084998913242607,
        "chrf-22": 0.6785141829496338,
        "chrf-156": 0.17981712681242512,
        "chrf-110": 0.20363188061035628,
        "chrf-8": 0.48669423149325325,
        "chrf-7": 0.2934292058068524,
        "chrf-23": 0.20287613832032977,
        "chrf-55": 0.33323234911794003,
        "chrf-60": 0.33412645815656544,
        "rougel-168": 0.3070175438596491,
        "rougel-28": 0.3010752688172043,
        "rougel-6": 0.28108108108108104,
        "rougel-198": 0.3119266055045872,
        "rougel-72": 0.40579710144927533,
        "rougel-63": 0.3119266055045872,
        "rougel-58": 0.34313725490196084,
        "rougel-35": 0.40540540540540543,
        "rougel-197": 0.2753623188405797,
        "rougel-26": 0.3253588516746412,
        "rougel-179": 0.047058823529411764,
        "rougel-144": 0.12389380530973451,
        "rougel-22": 0.7021276595744681,
        "rougel-156": 0.3469387755102041,
        "rougel-110": 0.3419689119170985,
        "rougel-8": 0.56,
        "rougel-7": 0.2661290322580645,
        "rougel-23": 0.32407407407407407,
        "rougel-55": 0.3087719298245615,
        "rougel-60": 0.2794520547945205,
        "meteor-168": 0.3511506190622821,
        "meteor-28": 0.283365919606164,
        "meteor-6": 0.3916434423732944,
        "meteor-198": 0.2902590615023872,
        "meteor-72": 0.3356894157706344,
        "meteor-63": 0.2902590615023872,
        "meteor-58": 0.32231252697737584,
        "meteor-35": 0.42100824004975124,
        "meteor-197": 0.29475685362013365,
        "meteor-26": 0.2932790979804467,
        "meteor-179": 0.013495276653171389,
        "meteor-144": 0.08263979193758125,
        "meteor-22": 0.672671380721232,
        "meteor-156": 0.29185096806735733,
        "meteor-110": 0.31456615626226936,
        "meteor-8": 0.5694066698306075,
        "meteor-7": 0.358882084529676,
        "meteor-23": 0.3501467889908257,
        "meteor-55": 0.4028843825230759,
        "meteor-60": 0.39332904201847324,
        "ruby-168": 0.1986301369863014,
        "ruby-28": 0.15384615384615385,
        "ruby-6": 0.18055555555555558,
        "ruby-198": 0.19852941176470584,
        "ruby-72": 0.31707317073170727,
        "ruby-63": 0.19852941176470584,
        "ruby-58": 0.19672131147540983,
        "ruby-35": 0.30487804878048785,
        "ruby-197": 0.18041237113402064,
        "ruby-26": 0.20472440944881887,
        "ruby-179": 0.024390243902439046,
        "ruby-144": 0.08536585365853655,
        "ruby-22": 0.5660377358490566,
        "ruby-156": 0.2192982456140351,
        "ruby-110": 0.22522522522522526,
        "ruby-8": 0.4491525423728814,
        "ruby-7": 0.1807228915662651,
        "ruby-23": 0.20895522388059706,
        "ruby-55": 0.1921182266009852,
        "ruby-60": 0.176678445229682,
        "codebertscore_f1-168": 0.7573835849761963,
        "codebertscore_f3-168": 0.7676184177398682,
        "codebertscore_f1-28": 0.7535640001296997,
        "codebertscore_f3-28": 0.759573221206665,
        "codebertscore_f1-6": 0.6993387341499329,
        "codebertscore_f3-6": 0.7547877430915833,
        "codebertscore_f1-198": 0.7704668641090393,
        "codebertscore_f3-198": 0.782240092754364,
        "codebertscore_f1-72": 0.7740355730056763,
        "codebertscore_f3-72": 0.770250141620636,
        "codebertscore_f1-63": 0.7638065218925476,
        "codebertscore_f3-63": 0.7752384543418884,
        "codebertscore_f1-58": 0.7253761291503906,
        "codebertscore_f3-58": 0.7301934361457825,
        "codebertscore_f1-35": 0.801684558391571,
        "codebertscore_f3-35": 0.803070068359375,
        "codebertscore_f1-197": 0.7392274737358093,
        "codebertscore_f3-197": 0.7780887484550476,
        "codebertscore_f1-26": 0.7541521787643433,
        "codebertscore_f3-26": 0.7644448280334473,
        "codebertscore_f1-179": 0.514528214931488,
        "codebertscore_f3-179": 0.4828816056251526,
        "codebertscore_f1-144": 0.7034177184104919,
        "codebertscore_f3-144": 0.7034043669700623,
        "codebertscore_f1-22": 0.9000781178474426,
        "codebertscore_f3-22": 0.9145405292510986,
        "codebertscore_f1-156": 0.7711282968521118,
        "codebertscore_f3-156": 0.7771919369697571,
        "codebertscore_f1-110": 0.7281575202941895,
        "codebertscore_f3-110": 0.7345767021179199,
        "codebertscore_f1-8": 0.8287026286125183,
        "codebertscore_f3-8": 0.8547283411026001,
        "codebertscore_f1-7": 0.7546645402908325,
        "codebertscore_f3-7": 0.7811072468757629,
        "codebertscore_f1-23": 0.7662938833236694,
        "codebertscore_f3-23": 0.7806429862976074,
        "codebertscore_f1-55": 0.7554665803909302,
        "codebertscore_f3-55": 0.7921629548072815,
        "codebertscore_f1-60": 0.7426726222038269,
        "codebertscore_f3-60": 0.7857506275177002,
        "codebertscore_s_f1-168": 0.761051595211029,
        "codebertscore_s_f3-168": 0.7731205224990845,
        "codebertscore_s_f1-28": 0.7547739744186401,
        "codebertscore_s_f3-28": 0.7614182233810425,
        "codebertscore_s_f1-6": 0.7419085502624512,
        "codebertscore_s_f3-6": 0.7772482633590698,
        "codebertscore_s_f1-198": 0.7715965509414673,
        "codebertscore_s_f3-198": 0.7838220000267029,
        "codebertscore_s_f1-72": 0.7618010640144348,
        "codebertscore_s_f3-72": 0.752021312713623,
        "codebertscore_s_f1-63": 0.7665303349494934,
        "codebertscore_s_f3-63": 0.7775009274482727,
        "codebertscore_s_f1-58": 0.7394556999206543,
        "codebertscore_s_f3-58": 0.7455781102180481,
        "codebertscore_s_f1-35": 0.8091018795967102,
        "codebertscore_s_f3-35": 0.8100034594535828,
        "codebertscore_s_f1-197": 0.7652096152305603,
        "codebertscore_s_f3-197": 0.7894875407218933,
        "codebertscore_s_f1-26": 0.7639197707176208,
        "codebertscore_s_f3-26": 0.7757253646850586,
        "codebertscore_s_f1-179": 0.5890563130378723,
        "codebertscore_s_f3-179": 0.548527181148529,
        "codebertscore_s_f1-144": 0.6943787932395935,
        "codebertscore_s_f3-144": 0.686595618724823,
        "codebertscore_s_f1-22": 0.896510899066925,
        "codebertscore_s_f3-22": 0.912947952747345,
        "codebertscore_s_f1-156": 0.7757914662361145,
        "codebertscore_s_f3-156": 0.7807323932647705,
        "codebertscore_s_f1-110": 0.7407624125480652,
        "codebertscore_s_f3-110": 0.7477308511734009,
        "codebertscore_s_f1-8": 0.8345868587493896,
        "codebertscore_s_f3-8": 0.8580175638198853,
        "codebertscore_s_f1-7": 0.7775436639785767,
        "codebertscore_s_f3-7": 0.7957955598831177,
        "codebertscore_s_f1-23": 0.7730265259742737,
        "codebertscore_s_f3-23": 0.7864376902580261,
        "codebertscore_s_f1-55": 0.7750574946403503,
        "codebertscore_s_f3-55": 0.8051633238792419,
        "codebertscore_s_f1-60": 0.7841368913650513,
        "codebertscore_s_f3-60": 0.814566433429718,
        "gpt35_nsnr-168": 4,
        "raw_gpt35_nsnr-168": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-198": 4,
        "raw_gpt35_nsnr-198": "4",
        "gpt35_nsnr-72": 4,
        "raw_gpt35_nsnr-72": "4",
        "gpt35_nsnr-63": 4,
        "raw_gpt35_nsnr-63": "4",
        "gpt35_nsnr-58": 4,
        "raw_gpt35_nsnr-58": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-197": 3,
        "raw_gpt35_nsnr-197": "3",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-179": 0,
        "raw_gpt35_nsnr-179": "0",
        "gpt35_nsnr-144": 3,
        "raw_gpt35_nsnr-144": "3",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-156": 4,
        "raw_gpt35_nsnr-156": "4",
        "gpt35_nsnr-110": 4,
        "raw_gpt35_nsnr-110": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-60": 4,
        "raw_gpt35_nsnr-60": "4",
        "gpt35_nswr-168": 4,
        "raw_gpt35_nswr-168": "4",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-198": 4,
        "raw_gpt35_nswr-198": "4",
        "gpt35_nswr-72": 3,
        "raw_gpt35_nswr-72": "3",
        "gpt35_nswr-63": 4,
        "raw_gpt35_nswr-63": "4",
        "gpt35_nswr-58": 3,
        "raw_gpt35_nswr-58": "3",
        "gpt35_nswr-35": 4,
        "raw_gpt35_nswr-35": "4",
        "gpt35_nswr-197": 2,
        "raw_gpt35_nswr-197": "2",
        "gpt35_nswr-26": 4,
        "raw_gpt35_nswr-26": "4",
        "gpt35_nswr-179": 0,
        "raw_gpt35_nswr-179": "0",
        "gpt35_nswr-144": 2,
        "raw_gpt35_nswr-144": "2",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-156": 3,
        "raw_gpt35_nswr-156": "3",
        "gpt35_nswr-110": 4,
        "raw_gpt35_nswr-110": "4",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-60": 3,
        "raw_gpt35_nswr-60": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String> words) {\n",
        "snippet": [
            "        List<String> words_sort = new ArrayList<>(words);\n        words_sort.sort(new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                Set<Character> s1 = new HashSet<>();\n                for (char ch : o1.toCharArray()) {\n                    s1.add(ch);\n                }\n                Set<Character> s2 = new HashSet<>();\n                for (char ch : o2.toCharArray()) {\n                    s2.add(ch);\n                }\n                if (s1.size() > s2.size()) {\n                    return 1;\n                } else if (s1.size() < s2.size()) {\n                    return -1;\n                } else {\n                    return -o1.compareTo(o2);\n                }\n            }\n        });\n        return words_sort.get(words_sort.size() - 1);\n    }\n}"
        ],
        "simplified": "Write a function that accepts a list of strings. The list contains different words. Return the word with maximum number of unique characters. If multiple strings have maximum number of unique characters, return the one which comes first in lexicographical order.",
        "task_id": "158",
        "199": "int max = -1;\n        String maxWord = \"\";\n        for (String word : words) {\n            String wordChar = String.join(\"\", word.split(\"\"));\n            Set<String> wordSet = new HashSet<>(Arrays.asList(wordChar.split(\"\")));\n            int unique = wordSet.size();\n            if (unique > max) {\n                max = unique;\n                maxWord = word;\n            }\n        }\n        return maxWord;",
        "grade-199": {
            "execution": 0
        },
        "34": "// Fill your code here\n        return \"\";",
        "grade-34": {
            "execution": 0
        },
        "6": "// TODO: write your code here.\n        int num = 0;\n        String max = \"\";\n        for (String word : words) {\n            int count = 0;\n            HashSet<Character> set = new HashSet<>();\n            for (int i = 0; i < word.length(); i++) {\n                if (!set.contains(word.charAt(i))) {\n                    count++;\n                    set.add(word.charAt(i));\n                }\n            }\n            if (count > num) {\n                num = count;\n                max = word;\n            }\n        }\n        return max;",
        "grade-6": {
            "execution": 0
        },
        "85": "return new String();",
        "grade-85": {
            "execution": 0
        },
        "75": "String result = \"\";\n        String unique = \"\";\n        int max = 0;\n        for (String word : words) {\n            unique = new String(new LinkedHashSet<String>(Arrays.asList(word.split(\"\"))).toArray(new String[0]));\n            if (unique.length() > max) {\n                max = unique.length();\n                result = word;\n            }\n        }\n        return result;",
        "grade-75": {
            "execution": 0
        },
        "70": "int max_len = 0;\n        String max_word = \"\";\n        for (String word : words) {\n            Set<Character> set = new HashSet<>();\n            for (char c : word.toCharArray()) {\n                set.add(c);\n            }\n            if (set.size() > max_len) {\n                max_len = set.size();\n                max_word = word;\n            }\n        }\n        return max_word;",
        "grade-70": {
            "execution": 0
        },
        "41": "// write code here\n        Map<String, Integer> map = new HashMap<>();\n        for (String word : words) {\n            Set<Character> set = new HashSet<>();\n            for (char c : word.toCharArray()) {\n                set.add(c);\n            }\n            map.put(word, set.size());\n        }\n        int max = 0;\n        String s = \"\";\n        for (String word : words) {\n            if (map.get(word) > max) {\n                max = map.get(word);\n                s = word;\n            }\n        }\n        return s;",
        "grade-41": {
            "execution": 0
        },
        "30": "String res = \"\";\n        int max_count = 0;\n        for (String word : words) {\n            Set<Character> s = new HashSet<>();\n            for (char c : word.toCharArray())\n                s.add(c);\n            if (s.size() > max_count) {\n                max_count = s.size();\n                res = word;\n            }\n        }\n        return res;",
        "grade-30": {
            "execution": 0
        },
        "165": "int max = 0;\n        int maxIndex = 0;\n        for (int i = 0; i < words.size(); i++) {\n            if (uniqueChars(words.get(i)) > max) {\n                max = uniqueChars(words.get(i));\n                maxIndex = i;\n            }\n        }\n        return words.get(maxIndex);",
        "grade-165": {
            "execution": 0
        },
        "26": "return words.stream()\n            .map(word -> Pair.with(word, word.chars().distinct().count()))\n            .max(Comparator.comparing(Pair::getValue1))\n            .map(Pair::getValue0)\n            .orElse(null);",
        "grade-26": {
            "execution": 0
        },
        "183": "//<Fill in your code here>\n      return \"\";",
        "grade-183": {
            "execution": 0
        },
        "128": "var anagrams = new Anagrams();\n        return anagrams.FindMax(words);",
        "grade-128": {
            "execution": 0
        },
        "9": "if (words.size() == 0) {\n            return \"\";\n        }\n        int max = 0;\n        String ret = \"\";\n        for (String s : words) {\n            StringBuilder sb = new StringBuilder();\n            for (int i = 0; i < s.length(); i++) {\n                if (sb.indexOf(s.substring(i, i + 1)) == -1) {\n                    sb.append(s.substring(i, i + 1));\n                }\n            }\n            if (sb.length() > max) {\n                max = sb.length();\n                ret = s;\n            }\n        }\n        return ret;",
        "grade-9": {
            "execution": 0
        },
        "7": "// TODO\n        if (words.size() == 0) return \"\";\n        String max_word = words.get(0);\n        for (int i = 1; i < words.size(); i++) {\n            String word = words.get(i);\n            if (word.length() > max_word.length()) {\n                max_word = word;\n            } else if (word.length() == max_word.length()) {\n                if (word.compareTo(max_word) < 0) {\n                    max_word = word;\n                }\n            }\n        }\n        return max_word;",
        "grade-7": {
            "execution": 0
        },
        "27": "HashMap<String, Integer> unique = new HashMap<>();\n        for (String word : words) {\n            String key = String.valueOf(word.chars().distinct().count());\n            int val = unique.getOrDefault(key, 0);\n            unique.put(key, val + 1);\n        }\n        String res = \"\";\n        int max = Integer.MIN_VALUE;\n        for (String word : words) {\n            int cur = word.chars().distinct().count();\n            if (unique.get(String.valueOf(cur)) == 1) {\n                if (cur > max) {\n                    max = cur;\n                    res = word;\n                }\n            }\n        }\n        return res;",
        "grade-27": {
            "execution": 0
        },
        "68": "List<String> uWords = new ArrayList<String>();\n        for (String str : words) {\n            if (new HashSet<String>(Arrays.asList(str.split(\"\"))).size() == str.length()) {\n                uWords.add(str);\n            }\n        }\n        if (uWords.size() == 0) {\n            return \"\";\n        }\n        Collections.sort(uWords);\n        return uWords.get(0);",
        "grade-68": {
            "execution": 0
        },
        "72": "String max = \"\";\n        int uc = 0;\n        for (String word : words) {\n            if (uniqueChars(word) > uc) {\n                max = word;\n                uc = uniqueChars(word);\n            }\n        }\n        return max;",
        "grade-72": {
            "execution": 0
        },
        "155": "String result = \"\";\n        int max = 0;\n        for (String word : words) {\n            HashSet<Character> hs = new HashSet<Character>();\n            for (char c : word.toCharArray()) {\n                hs.add(c);\n            }\n            if (hs.size() > max) {\n                max = hs.size();\n                result = word;\n            }\n        }\n        return result;",
        "grade-155": {
            "execution": 0
        },
        "187": "String max = words.get(0);\n        int maxCount = 0;\n        for (String word : words) {\n            int uCount = uniqueCount(word);\n            if (uCount > maxCount) {\n                max = word;\n                maxCount = uCount;\n            }\n        }\n        return max;",
        "grade-187": {
            "execution": 0
        },
        "171": "int max = Integer.MIN_VALUE;\n        int indexOfMax = -1;\n        int i = 0;\n        for (String word : words) {\n            int unique = uniqueChars(word);\n            if (unique > max) {\n                max = unique;\n                indexOfMax = i;\n            }\n            i++;\n        }\n        return words.get(indexOfMax);",
        "grade-171": {
            "execution": 0
        },
        "bleu-199": 0.0805650406120642,
        "bleu-34": 1.2530010588683895e-09,
        "bleu-6": 0.13532429694601714,
        "bleu-85": 3.9720082690963776e-14,
        "bleu-75": 0.040760953750687196,
        "bleu-70": 0.13420337648885958,
        "bleu-41": 0.220051809842726,
        "bleu-30": 0.1183230859707522,
        "bleu-165": 0.026768020140253288,
        "bleu-26": 0.008340881546673222,
        "bleu-183": 7.839540628661584e-08,
        "bleu-128": 1.3838508309535963e-05,
        "bleu-9": 0.10566548102174143,
        "bleu-7": 0.13020644511070384,
        "bleu-27": 0.1238124206566092,
        "bleu-68": 0.15453824001264166,
        "bleu-72": 0.0064891115985769255,
        "bleu-155": 0.13201029258298091,
        "bleu-187": 0.009905527256420486,
        "bleu-171": 0.015066235495995927,
        "codebleu-199": 0.2585590448436795,
        "codebleu-34": 0.015094342016429792,
        "codebleu-6": 0.37528782691371054,
        "codebleu-85": 0.020125786163587855,
        "codebleu-75": 0.25406480561106853,
        "codebleu-70": 0.2735986951266893,
        "codebleu-41": 0.425338230272646,
        "codebleu-30": 0.26032302380799305,
        "codebleu-165": 0.22278774529909076,
        "codebleu-26": 0.18101820416222303,
        "codebleu-183": 0.022641579112515717,
        "codebleu-128": 0.055357609351119254,
        "codebleu-9": 0.4030738609060792,
        "codebleu-7": 0.393631234085288,
        "codebleu-27": 0.4793002905384499,
        "codebleu-68": 0.33958654777316605,
        "codebleu-72": 0.12356197863909643,
        "codebleu-155": 0.27530664114862397,
        "codebleu-187": 0.14340256678476876,
        "codebleu-171": 0.18289333269090413,
        "chrf-199": 0.23126228209034833,
        "chrf-34": 0.02129128994377848,
        "chrf-6": 0.25364908147187454,
        "chrf-85": 0.026306159911487246,
        "chrf-75": 0.19579759340320332,
        "chrf-70": 0.2832468926459019,
        "chrf-41": 0.3390761073381292,
        "chrf-30": 0.263860092818645,
        "chrf-165": 0.1301014029074316,
        "chrf-26": 0.13865704567411402,
        "chrf-183": 0.023650342506359466,
        "chrf-128": 0.05811728428864908,
        "chrf-9": 0.20470445777185375,
        "chrf-7": 0.21877071618840835,
        "chrf-27": 0.2394583971268114,
        "chrf-68": 0.28692933605782733,
        "chrf-72": 0.10762984006150823,
        "chrf-155": 0.28904778452341345,
        "chrf-187": 0.11740463785266657,
        "chrf-171": 0.12322655145102768,
        "rougel-199": 0.3275261324041812,
        "rougel-34": 0.020512820512820513,
        "rougel-6": 0.3624595469255663,
        "rougel-85": 0.05235602094240838,
        "rougel-75": 0.33212996389891697,
        "rougel-70": 0.4477611940298508,
        "rougel-41": 0.4600638977635783,
        "rougel-30": 0.443609022556391,
        "rougel-165": 0.2835249042145594,
        "rougel-26": 0.25806451612903225,
        "rougel-183": 0.04040404040404041,
        "rougel-128": 0.09900990099009901,
        "rougel-9": 0.3364485981308411,
        "rougel-7": 0.38283828382838286,
        "rougel-27": 0.37388724035608306,
        "rougel-68": 0.45517241379310347,
        "rougel-72": 0.22413793103448276,
        "rougel-155": 0.45185185185185184,
        "rougel-187": 0.23868312757201648,
        "rougel-171": 0.24313725490196075,
        "meteor-199": 0.22319111387937296,
        "meteor-34": 0.005970149253731343,
        "meteor-6": 0.27158122414389346,
        "meteor-85": 0.0255169891615134,
        "meteor-75": 0.18440212965186903,
        "meteor-70": 0.25295790286108893,
        "meteor-41": 0.30642581572967414,
        "meteor-30": 0.2347939760493752,
        "meteor-165": 0.16952262428999942,
        "meteor-26": 0.16297285319391863,
        "meteor-183": 0.011918951132300359,
        "meteor-128": 0.056294589774078474,
        "meteor-9": 0.26680720704770744,
        "meteor-7": 0.2478615192849921,
        "meteor-27": 0.2950137614886142,
        "meteor-68": 0.2744965028211443,
        "meteor-72": 0.09901946959456172,
        "meteor-155": 0.25266880811496195,
        "meteor-187": 0.10129781358821822,
        "meteor-171": 0.1288114334002164,
        "ruby-199": 0.22702702702702704,
        "ruby-34": 0.010810810810810811,
        "ruby-6": 0.23783783783783785,
        "ruby-85": 0.027027027027026973,
        "ruby-75": 0.21081081081081077,
        "ruby-70": 0.32432432432432434,
        "ruby-41": 0.3513513513513513,
        "ruby-30": 0.3189189189189189,
        "ruby-165": 0.1945945945945946,
        "ruby-26": 0.16756756756756752,
        "ruby-183": 0.021621621621621623,
        "ruby-128": 0.05405405405405406,
        "ruby-9": 0.21621621621621623,
        "ruby-7": 0.2648648648648648,
        "ruby-27": 0.21621621621621623,
        "ruby-68": 0.31351351351351353,
        "ruby-72": 0.1351351351351351,
        "ruby-155": 0.32432432432432434,
        "ruby-187": 0.1567567567567567,
        "ruby-171": 0.1567567567567567,
        "codebertscore_f1-199": 0.7063912749290466,
        "codebertscore_f3-199": 0.6842986345291138,
        "codebertscore_f1-34": 0.5105478763580322,
        "codebertscore_f3-34": 0.4707562029361725,
        "codebertscore_f1-6": 0.7248578071594238,
        "codebertscore_f3-6": 0.7163726687431335,
        "codebertscore_f1-85": 0.5396327376365662,
        "codebertscore_f3-85": 0.4634254276752472,
        "codebertscore_f1-75": 0.6902483701705933,
        "codebertscore_f3-75": 0.6668086051940918,
        "codebertscore_f1-70": 0.7487543225288391,
        "codebertscore_f3-70": 0.7209091782569885,
        "codebertscore_f1-41": 0.7498488426208496,
        "codebertscore_f3-41": 0.7303489446640015,
        "codebertscore_f1-30": 0.7507310509681702,
        "codebertscore_f3-30": 0.7215085625648499,
        "codebertscore_f1-165": 0.6592140197753906,
        "codebertscore_f3-165": 0.6319029927253723,
        "codebertscore_f1-26": 0.6431254744529724,
        "codebertscore_f3-26": 0.6203823685646057,
        "codebertscore_f1-183": 0.5117464661598206,
        "codebertscore_f3-183": 0.4737597405910492,
        "codebertscore_f1-128": 0.6053478121757507,
        "codebertscore_f3-128": 0.5565746426582336,
        "codebertscore_f1-9": 0.7154219150543213,
        "codebertscore_f3-9": 0.7067685127258301,
        "codebertscore_f1-7": 0.7047268748283386,
        "codebertscore_f3-7": 0.6888993978500366,
        "codebertscore_f1-27": 0.7037482857704163,
        "codebertscore_f3-27": 0.6922656297683716,
        "codebertscore_f1-68": 0.7220584154129028,
        "codebertscore_f3-68": 0.6927080750465393,
        "codebertscore_f1-72": 0.6602869033813477,
        "codebertscore_f3-72": 0.6241220235824585,
        "codebertscore_f1-155": 0.749324381351471,
        "codebertscore_f3-155": 0.7200788855552673,
        "codebertscore_f1-187": 0.6741206645965576,
        "codebertscore_f3-187": 0.6435633301734924,
        "codebertscore_f1-171": 0.6568913459777832,
        "codebertscore_f3-171": 0.6368447542190552,
        "codebertscore_s_f1-199": 0.7819885015487671,
        "codebertscore_s_f3-199": 0.7558450102806091,
        "codebertscore_s_f1-34": 0.7434412240982056,
        "codebertscore_s_f3-34": 0.6754001379013062,
        "codebertscore_s_f1-6": 0.7766057848930359,
        "codebertscore_s_f3-6": 0.7600576877593994,
        "codebertscore_s_f1-85": 0.7755847573280334,
        "codebertscore_s_f3-85": 0.6798969507217407,
        "codebertscore_s_f1-75": 0.7726774215698242,
        "codebertscore_s_f3-75": 0.7449674010276794,
        "codebertscore_s_f1-70": 0.8119934797286987,
        "codebertscore_s_f3-70": 0.7824999094009399,
        "codebertscore_s_f1-41": 0.8042473196983337,
        "codebertscore_s_f3-41": 0.7818635702133179,
        "codebertscore_s_f1-30": 0.8201836347579956,
        "codebertscore_s_f3-30": 0.7889894843101501,
        "codebertscore_s_f1-165": 0.762611985206604,
        "codebertscore_s_f3-165": 0.7371973395347595,
        "codebertscore_s_f1-26": 0.7499489188194275,
        "codebertscore_s_f3-26": 0.7274038791656494,
        "codebertscore_s_f1-183": 0.7386766672134399,
        "codebertscore_s_f3-183": 0.674351155757904,
        "codebertscore_s_f1-128": 0.7563024163246155,
        "codebertscore_s_f3-128": 0.6981008052825928,
        "codebertscore_s_f1-9": 0.770706057548523,
        "codebertscore_s_f3-9": 0.7602311968803406,
        "codebertscore_s_f1-7": 0.7760964035987854,
        "codebertscore_s_f3-7": 0.7550345063209534,
        "codebertscore_s_f1-27": 0.7558891177177429,
        "codebertscore_s_f3-27": 0.7434149980545044,
        "codebertscore_s_f1-68": 0.8016294836997986,
        "codebertscore_s_f3-68": 0.7727237343788147,
        "codebertscore_s_f1-72": 0.7712468504905701,
        "codebertscore_s_f3-72": 0.7282623052597046,
        "codebertscore_s_f1-155": 0.8161177039146423,
        "codebertscore_s_f3-155": 0.7849489450454712,
        "codebertscore_s_f1-187": 0.7758498787879944,
        "codebertscore_s_f3-187": 0.7376766204833984,
        "codebertscore_s_f1-171": 0.7477953433990479,
        "codebertscore_s_f3-171": 0.7229384779930115,
        "gpt35_nsnr-199": 3,
        "raw_gpt35_nsnr-199": "3",
        "gpt35_nsnr-34": 3,
        "raw_gpt35_nsnr-34": "3",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-85": 2,
        "raw_gpt35_nsnr-85": "2",
        "gpt35_nsnr-75": 4,
        "raw_gpt35_nsnr-75": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-41": 4,
        "raw_gpt35_nsnr-41": "4",
        "gpt35_nsnr-30": 4,
        "raw_gpt35_nsnr-30": "4",
        "gpt35_nsnr-165": 3,
        "raw_gpt35_nsnr-165": "3",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-183": 3,
        "raw_gpt35_nsnr-183": "3",
        "gpt35_nsnr-128": 0,
        "raw_gpt35_nsnr-128": "3 - The code snippet correctly calls a method from an external class to find the word with the maximum number of unique characters in a list of strings. However, it does not handle the case where multiple strings have the same maximum number of unique characters and instead always returns the first one in the list.",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-27": 4,
        "raw_gpt35_nsnr-27": "4",
        "gpt35_nsnr-68": 4,
        "raw_gpt35_nsnr-68": "4",
        "gpt35_nsnr-72": 4,
        "raw_gpt35_nsnr-72": "4",
        "gpt35_nsnr-155": 4,
        "raw_gpt35_nsnr-155": "4",
        "gpt35_nsnr-187": 3,
        "raw_gpt35_nsnr-187": "3",
        "gpt35_nsnr-171": 3,
        "raw_gpt35_nsnr-171": "3",
        "gpt35_nswr-199": 3,
        "raw_gpt35_nswr-199": "3",
        "gpt35_nswr-34": 2,
        "raw_gpt35_nswr-34": "2",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-85": 0,
        "raw_gpt35_nswr-85": "0",
        "gpt35_nswr-75": 3,
        "raw_gpt35_nswr-75": "3",
        "gpt35_nswr-70": 3,
        "raw_gpt35_nswr-70": "3",
        "gpt35_nswr-41": 3,
        "raw_gpt35_nswr-41": "3",
        "gpt35_nswr-30": 3,
        "raw_gpt35_nswr-30": "3",
        "gpt35_nswr-165": 3,
        "raw_gpt35_nswr-165": "3",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-183": 2,
        "raw_gpt35_nswr-183": "2",
        "gpt35_nswr-128": 0,
        "raw_gpt35_nswr-128": "3 - The code snippet correctly sorts the list of words based on the number of unique characters in each word and returns the word with the maximum number of unique characters. However, it does not handle the case where multiple words have the same maximum number of unique characters and instead returns the last word in the sorted list. The reference code handles this case by also comparing the lexicographical order of the words.",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-27": 3,
        "raw_gpt35_nswr-27": "3",
        "gpt35_nswr-68": 3,
        "raw_gpt35_nswr-68": "3",
        "gpt35_nswr-72": 3,
        "raw_gpt35_nswr-72": "3",
        "gpt35_nswr-155": 3,
        "raw_gpt35_nswr-155": "3",
        "gpt35_nswr-187": 3,
        "raw_gpt35_nswr-187": "3",
        "gpt35_nswr-171": 3,
        "raw_gpt35_nswr-171": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Create a function which takes a string representing a file's name, and returns\n    // 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    // A file's name is considered to be valid if and only if all the following conditions \n    // are met:\n    // - There should not be more than three digits ('0'-'9') in the file's name.\n    // - The file's name contains exactly one dot '.'\n    // - The substring before the dot should not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    // file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    public static String fileNameCheck(String file_name) {\n",
        "snippet": [
            "        List<String> suf = Arrays.asList(\"txt\", \"exe\", \"dll\");\n        String[] lst = file_name.split(\"\\\\.\" );\n        if (lst.length != 2 || !suf.contains(lst[1]) || lst[0].isEmpty() || !Character.isLetter(lst[0].charAt(0))) {\n            return \"No\";\n        }\n        int t = (int) lst[0].chars().map(x -> (char) x).filter(Character::isDigit).count();\n        if (t > 3) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}"
        ],
        "simplified": "Create a function which takes a string representing a file's name, and returns 'Yes' if the the file's name is valid, and returns 'No' otherwise. A file's name is considered to be valid if and only if all the following conditions are met: - There should not be more than three digits ('0'-'9') in the file's name. - The file's name contains exactly one dot '.' - The substring before the dot should not be empty, and it starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dot should be one of these: ['txt', 'exe', 'dll']",
        "task_id": "141",
        "190": "// your code goes here",
        "grade-190": {
            "execution": 0
        },
        "28": "// throw new UnsupportedOperationException(\"Waiting to be implemented.\");\n        Pattern p = Pattern.compile(\"[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)\");\n        Matcher m = p.matcher(file_name);\n        if (m.matches()) {\n            return \"Yes\";\n        }\n        return \"No\";",
        "grade-28": {
            "execution": 0
        },
        "6": "// check if the name contains exactly one dot\n        if (file_name.indexOf('.') == file_name.lastIndexOf('.')) {\n            String[] name_components = file_name.split(\"\\\\.\");\n            // check if there is anything before the dot\n            if (name_components[0].length() > 0) {\n                // check if the first character is a letter\n                if (Character.isLetter(name_components[0].charAt(0))) {\n                    // check if the substring after the dot is valid\n                    if (name_components[1].equals(\"txt\") || name_components[1].equals(\"exe\") || name_components[1].equals(\"dll\")) {\n                        // check if there are more than three digits\n                        if (file_name.replaceAll(\"[^0-9]\", \"\").length() > 3) {\n                            return \"No\";\n                        }\n                        else {\n                            return \"Yes\";\n                        }\n                    }\n                    else {\n                        return \"No\";\n                    }\n                }\n                else {\n                    return \"No\";\n                }\n            }\n            else {\n                return \"No\";\n            }\n        }\n        else {\n            return \"No\";\n        }",
        "grade-6": {
            "execution": 0
        },
        "75": "int digitCount = 0;\n        int dotCount = 0;\n        int length = file_name.length();\n        char firstChar = file_name.charAt(0);\n        if (!((firstChar >= 'a' && firstChar <= 'z') || (firstChar >= 'A' && firstChar <= 'Z')))\n            return \"No\";\n        if (length < 3)\n            return \"No\";\n        if (file_name.charAt(length - 1) == '.')\n            return \"No\";\n        for (int i = 0; i < length; i++) {\n            char c = file_name.charAt(i);\n            if (c >= '0' && c <= '9')\n                digitCount++;\n            if (c == '.')\n                dotCount++;\n        }\n        if (digitCount > 3 || dotCount != 1)\n            return \"No\";\n        if (file_name.indexOf('.') == length - 1)\n            return \"No\";\n        String suffix = file_name.substring(file_name.indexOf('.') + 1);\n        if (suffix.equals(\"txt\") || suffix.equals(\"exe\") || suffix.equals(\"dll\"))\n            return \"Yes\";\n        return \"No\";",
        "grade-75": {
            "execution": 1
        },
        "66": "// create a regex that represents the conditions from the problem\n        String regex = \"^[a-zA-Z]{1}[^0-9]*[0-9]{0,3}\\\\.(txt|exe|dll)$\";\n        // regex is hard. I had to refer to online regex testers.\n        // regex101.com\n        // regexr.com\n        // regex.com\n        // This is a good explaination of the regex.\n        // https://stackoverflow.com/questions/57117135/how-to-validate-file-name-according-to-some-rules-in-python\n        // and this is the regex that I derived.\n        // https://regex101.com/r/yAY6qY/1/\n        if (file_name.matches(regex)) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }",
        "grade-66": {
            "execution": 0
        },
        "61": "if(file_name.length() < 5) return \"No\";\n        // System.out.println(file_name.substring(0, 4));\n        // System.out.println(file_name.substring(0, 4).matches(\"[a-zA-Z][a-zA-Z0-9]*\"));\n        if(!file_name.substring(0, 4).matches(\"[a-zA-Z][a-zA-Z0-9]*\") || file_name.substring(file_name.length() - 4, file_name.length()).matches(\"[0-9][0-9][0-9][a-zA-Z]\")) return \"No\";\n        return \"Yes\";",
        "grade-61": {
            "execution": 0
        },
        "35": "int dotIndex = file_name.indexOf('.');\n        if (dotIndex == -1) {\n            return \"No\";\n        }\n        else {\n            String ext = file_name.substring(dotIndex + 1);\n            if (!(ext.equals(\"txt\") || ext.equals(\"exe\") || ext.equals(\"dll\"))) {\n                return \"No\";\n            }\n            else {\n                for (int i = 0; i < file_name.length(); i++) {\n                    if (i != dotIndex && Character.isDigit(file_name.charAt(i))) {\n                        return \"No\";\n                    }\n                }\n                if (Character.isDigit(file_name.charAt(0))) {\n                    return \"No\";\n                }\n                return \"Yes\";\n            }\n        }",
        "grade-35": {
            "execution": 0
        },
        "26": "int cnt=0;\n        for(int i=0;i<file_name.length();i++) {\n            if('0'<=file_name.charAt(i) && file_name.charAt(i)<='9') cnt++;\n        }\n        if(cnt>3) return \"No\";\n        int idx = file_name.indexOf('.');\n        if(idx==-1) return \"No\";\n        String s = file_name.substring(0,idx);\n        if(s.length()==0) return \"No\";\n        if(!('a'<=s.charAt(0) && s.charAt(0)<='z') && !('A'<=s.charAt(0) && s.charAt(0)<='Z')) return \"No\";\n        s = file_name.substring(idx+1);\n        if(!s.equals(\"txt\") && !s.equals(\"exe\") && !s.equals(\"dll\")) return \"No\";\n        return \"Yes\";",
        "grade-26": {
            "execution": 1
        },
        "161": "if(file_name.length() == 0) {\n            return \"No\";\n        }\n        String[] parts = file_name.split(\"\\\\.\");\n        if(parts.length != 2) {\n            return \"No\";\n        }\n        String prefix = parts[0];\n        String suffix = parts[1];\n        if(prefix.length() == 0) {\n            return \"No\";\n        }\n        if(!(suffix.equals(\"txt\") || suffix.equals(\"exe\") || suffix.equals(\"dll\"))) {\n            return \"No\";\n        }\n        String pattern = \"^[a-zA-Z]+[\\\\w\\\\d]*$\";\n        if(!prefix.matches(pattern)) {\n            return \"No\";\n        }\n        if(prefix.matches(\"\\\\d+\")) {\n            return \"No\";\n        }\n        int count = 0;\n        for(int i = 0; i < prefix.length(); i++) {\n            if(Character.isDigit(prefix.charAt(i))) {\n                count++;\n            }\n        }\n        if(count > 3) {\n            return \"No\";\n        }\n        return \"Yes\";",
        "grade-161": {
            "execution": 0
        },
        "22": "return \"\";",
        "grade-22": {
            "execution": 0
        },
        "177": "// Write code here\n        return \"\";",
        "grade-177": {
            "execution": 0
        },
        "120": "Pattern pattern = Pattern.compile(\"(\\\\d{1,3})?([a-z]\\\\w*)(\\\\.txt|\\\\.exe|\\\\.dll)\");\n        Matcher matcher = pattern.matcher(file_name);\n        if (matcher.matches()) {\n            return \"Yes\";\n        }\n        return \"No\";",
        "grade-120": {
            "execution": 0
        },
        "8": "String fileName = file_name;\n        String[] parts = fileName.split(\"\\\\.\");\n        // format is invalid\n        if (parts.length != 2) {\n            return \"No\";\n        }\n        // extension is invalid\n        if (!(parts[1].equals(\"txt\") || parts[1].equals(\"exe\") || parts[1].equals(\"dll\"))) {\n            return \"No\";\n        }\n        // filename is invalid\n        if (parts[0].length() == 0 || parts[0].matches(\"[^0-9]*[0-9][^0-9]*[0-9][^0-9]*[0-9].*\")) {\n            return \"No\";\n        }\n        // all checks passed\n        return \"Yes\";",
        "grade-8": {
            "execution": 0
        },
        "7": "String[] splitted = file_name.split(\"\\\\.\");\n        if (splitted.length != 2) return \"No\";\n        else if (splitted[0].matches(\"[0-9]+\")) return \"No\";\n        else if (splitted[0].equals(\"\")) return \"No\";\n        else if (splitted[1].equals(\"txt\") || splitted[1].equals(\"exe\") || splitted[1].equals(\"dll\")) {\n            return \"Yes\";\n        }\n        return \"No\";",
        "grade-7": {
            "execution": 0
        },
        "23": "String[] parts = file_name.split(\"\\\\.\");\n        System.out.println(Arrays.toString(parts));\n        if (parts.length != 2) return \"No\";\n        // before dot\n        String s = parts[0];\n        if (s.matches(\"[0-9]+\")) return \"No\";\n        int c = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char ch = s.charAt(i);\n            if (ch >= '0' && ch <= '9') c++;\n        }\n        if (c > 3) return \"No\";\n        // after dot\n        s = parts[1];\n        if (!s.equals(\"txt\") && !s.equals(\"exe\") && !s.equals(\"dll\")) return \"No\";\n        return \"Yes\";",
        "grade-23": {
            "execution": 0
        },
        "59": "if(file_name.contains(\"\\\\\") || file_name.contains(\"/\"))\n            return \"No\";\n        String[] split = file_name.split(\"\\\\.\");\n        if(split.length != 2)\n            return \"No\";\n        if(!split[0].matches(\"[a-zA-Z]+[a-zA-Z0-9]*\"))\n            return \"No\";\n        if(split[1].length() < 3)\n            return \"No\";\n        if(split[1].matches(\"[0-9]+\"))\n            return \"No\";\n        if(!(split[1].equals(\"txt\") || split[1].equals(\"exe\") || split[1].equals(\"dll\")))\n            return \"No\";\n        return \"Yes\";",
        "grade-59": {
            "execution": 0
        },
        "63": "// Your code here\n        String result = \"No\";\n        String regex = \"[a-zA-Z]{1}\\\\d{0,3}(\\\\.txt|\\\\.exe|\\\\.dll)\";\n        if (file_name.matches(regex)) {\n            result = \"Yes\";\n        }\n        return result;",
        "grade-63": {
            "execution": 0
        },
        "147": "// write your code here\n        if (file_name.chars().filter(c -> c >= '0' && c <= '9').count() > 3)\n            return \"No\";\n        String[] parts = file_name.split(\"\\\\.\");\n        if (parts.length != 2)\n            return \"No\";\n        if (parts[0].chars().filter(c -> c >= '0' && c <= '9').count() > 0)\n            return \"No\";\n        String[] endings = {\"txt\", \"exe\", \"dll\"};\n        return Arrays.stream(endings).filter(parts[1]::equals).findFirst().orElse(\"No\");",
        "grade-147": {
            "execution": 0
        },
        "180": "if(!file_name.matches(\"[a-zA-Z][a-zA-Z0-9]*\\\\.[a-zA-Z]{3}\")) {\n            return \"No\";\n        }\n        int digit_count = file_name.length() - file_name.replaceAll(\"[0-9]\", \"\").length();\n        if(digit_count > 3) {\n            return \"No\";\n        }\n        return \"Yes\";",
        "grade-180": {
            "execution": 0
        },
        "166": "String arr[] = file_name.split(\"\\\\.\");\n        int cnt=0;\n        for(int i=0;i<arr[0].length();i++)\n            if(arr[0].charAt(i)>='0' && arr[0].charAt(i)<='9') cnt++;\n        if(cnt>3) return \"No\";\n        if(!arr[0].matches(\"[a-zA-Z]+\")) return \"No\";\n        if(!arr[1].equals(\"txt\") && !arr[1].equals(\"exe\") && !arr[1].equals(\"dll\")) return \"No\";\n        return \"Yes\";",
        "grade-166": {
            "execution": 0
        },
        "bleu-190": 0.0,
        "bleu-28": 0.12592338577134599,
        "bleu-6": 0.2688324186354776,
        "bleu-75": 0.13465556625026698,
        "bleu-66": 0.10646240628781062,
        "bleu-61": 0.13412998460686815,
        "bleu-35": 0.3174521651452119,
        "bleu-26": 0.15133298249473476,
        "bleu-161": 0.25840403120874145,
        "bleu-22": 1.1045445999850385e-17,
        "bleu-177": 9.730229260758514e-09,
        "bleu-120": 0.10084926839258278,
        "bleu-8": 0.28995589506259123,
        "bleu-7": 0.31771617318165896,
        "bleu-23": 0.24282101094276434,
        "bleu-59": 0.2583605728857986,
        "bleu-63": 0.05824354802648406,
        "bleu-147": 0.35053838614844635,
        "bleu-180": 0.20215424283989442,
        "bleu-166": 0.2777878293598549,
        "codebleu-190": 0.012345679012345678,
        "codebleu-28": 0.18362418899923721,
        "codebleu-6": 0.641586669647151,
        "codebleu-75": 0.5167274355529968,
        "codebleu-66": 0.30262421910941995,
        "codebleu-61": 0.3993158854001089,
        "codebleu-35": 0.5286950540041482,
        "codebleu-26": 0.504877502718608,
        "codebleu-161": 0.6101186029480866,
        "codebleu-22": 0.012345679012345678,
        "codebleu-177": 0.02160494718761349,
        "codebleu-120": 0.1412063491341371,
        "codebleu-8": 0.5422233735733609,
        "codebleu-7": 0.43563836275856893,
        "codebleu-23": 0.5539521146937612,
        "codebleu-59": 0.5985356919755611,
        "codebleu-63": 0.1279201644010761,
        "codebleu-147": 0.577024088704081,
        "codebleu-180": 0.23060051707965573,
        "codebleu-166": 0.5222298020148073,
        "chrf-190": 0.014873440034637489,
        "chrf-28": 0.2314096999086026,
        "chrf-6": 0.421432970029745,
        "chrf-75": 0.32202505691577454,
        "chrf-66": 0.24607918128171072,
        "chrf-61": 0.270133925633688,
        "chrf-35": 0.4211445255884511,
        "chrf-26": 0.327807241603095,
        "chrf-161": 0.442988453115216,
        "chrf-22": 0.020558293308045532,
        "chrf-177": 0.03309134279127624,
        "chrf-120": 0.21441788777754806,
        "chrf-8": 0.3724580773771089,
        "chrf-7": 0.3600451310375917,
        "chrf-23": 0.3944633819511479,
        "chrf-59": 0.3777397684610461,
        "chrf-63": 0.18348703924389548,
        "chrf-147": 0.4422944074719288,
        "chrf-180": 0.29503298483862406,
        "chrf-166": 0.3705197709845796,
        "rougel-190": 0.0,
        "rougel-28": 0.31451612903225806,
        "rougel-6": 0.41396508728179554,
        "rougel-75": 0.2922374429223744,
        "rougel-66": 0.21511627906976746,
        "rougel-61": 0.303951367781155,
        "rougel-35": 0.4478527607361963,
        "rougel-26": 0.3564356435643565,
        "rougel-161": 0.42718446601941745,
        "rougel-22": 0.04968944099378882,
        "rougel-177": 0.04819277108433735,
        "rougel-120": 0.3305084745762712,
        "rougel-8": 0.456140350877193,
        "rougel-7": 0.45774647887323944,
        "rougel-23": 0.38997214484679665,
        "rougel-59": 0.4540229885057472,
        "rougel-63": 0.26956521739130435,
        "rougel-147": 0.42201834862385323,
        "rougel-180": 0.3984375,
        "rougel-166": 0.4108761329305136,
        "meteor-190": 0.0,
        "meteor-28": 0.2586075993922844,
        "meteor-6": 0.5178909335920074,
        "meteor-75": 0.39635066574696076,
        "meteor-66": 0.24966353879706157,
        "meteor-61": 0.37638501446932754,
        "meteor-35": 0.5341191048145184,
        "meteor-26": 0.4009124960201995,
        "meteor-161": 0.5451587569920269,
        "meteor-22": 0.02646436132674665,
        "meteor-177": 0.026371308016877638,
        "meteor-120": 0.2536137637648727,
        "meteor-8": 0.5076061864823387,
        "meteor-7": 0.37139610389610384,
        "meteor-23": 0.4392106349118595,
        "meteor-59": 0.4344473283910406,
        "meteor-63": 0.2183239599023063,
        "meteor-147": 0.41080594995569003,
        "meteor-180": 0.3626148449380773,
        "meteor-166": 0.4358163988657845,
        "ruby-190": 0.0,
        "ruby-28": 0.22292993630573243,
        "ruby-6": 0.2909836065573771,
        "ruby-75": 0.1779359430604982,
        "ruby-66": 0.13903743315508021,
        "ruby-61": 0.15697674418604646,
        "ruby-35": 0.26627218934911245,
        "ruby-26": 0.21862348178137647,
        "ruby-161": 0.28627450980392155,
        "ruby-22": 0.02547770700636942,
        "ruby-177": 0.02547770700636942,
        "ruby-120": 0.2420382165605095,
        "ruby-8": 0.24864864864864866,
        "ruby-7": 0.356687898089172,
        "ruby-23": 0.19801980198019797,
        "ruby-59": 0.31413612565445026,
        "ruby-63": 0.15923566878980888,
        "ruby-147": 0.23529411764705888,
        "ruby-180": 0.2866242038216561,
        "ruby-166": 0.2068965517241379,
        "codebertscore_f1-190": 0.4874032735824585,
        "codebertscore_f3-190": 0.475844144821167,
        "codebertscore_f1-28": 0.6843390464782715,
        "codebertscore_f3-28": 0.6909999847412109,
        "codebertscore_f1-6": 0.7369462251663208,
        "codebertscore_f3-6": 0.7532861828804016,
        "codebertscore_f1-75": 0.7529318332672119,
        "codebertscore_f3-75": 0.7572730183601379,
        "codebertscore_f1-66": 0.6496712565422058,
        "codebertscore_f3-66": 0.669337809085846,
        "codebertscore_f1-61": 0.7036958336830139,
        "codebertscore_f3-61": 0.7069975733757019,
        "codebertscore_f1-35": 0.7607244253158569,
        "codebertscore_f3-35": 0.7549593448638916,
        "codebertscore_f1-26": 0.7480560541152954,
        "codebertscore_f3-26": 0.7467796802520752,
        "codebertscore_f1-161": 0.7727208733558655,
        "codebertscore_f3-161": 0.7823686003684998,
        "codebertscore_f1-22": 0.5053107738494873,
        "codebertscore_f3-22": 0.4536653161048889,
        "codebertscore_f1-177": 0.5551005601882935,
        "codebertscore_f3-177": 0.5235927700996399,
        "codebertscore_f1-120": 0.7057147026062012,
        "codebertscore_f3-120": 0.6894075870513916,
        "codebertscore_f1-8": 0.7465482354164124,
        "codebertscore_f3-8": 0.7461751699447632,
        "codebertscore_f1-7": 0.7749605774879456,
        "codebertscore_f3-7": 0.7510989308357239,
        "codebertscore_f1-23": 0.7756179571151733,
        "codebertscore_f3-23": 0.7824956178665161,
        "codebertscore_f1-59": 0.7548176050186157,
        "codebertscore_f3-59": 0.7502070665359497,
        "codebertscore_f1-63": 0.6923902034759521,
        "codebertscore_f3-63": 0.6811401844024658,
        "codebertscore_f1-147": 0.7698826193809509,
        "codebertscore_f3-147": 0.7636610865592957,
        "codebertscore_f1-180": 0.7073621153831482,
        "codebertscore_f3-180": 0.7056136131286621,
        "codebertscore_f1-166": 0.7708624005317688,
        "codebertscore_f3-166": 0.7687807083129883,
        "codebertscore_s_f1-190": 0.4946124255657196,
        "codebertscore_s_f3-190": 0.4762493073940277,
        "codebertscore_s_f1-28": 0.6677128076553345,
        "codebertscore_s_f3-28": 0.6814537048339844,
        "codebertscore_s_f1-6": 0.7451261281967163,
        "codebertscore_s_f3-6": 0.760104775428772,
        "codebertscore_s_f1-75": 0.766532301902771,
        "codebertscore_s_f3-75": 0.7684650421142578,
        "codebertscore_s_f1-66": 0.6481711864471436,
        "codebertscore_s_f3-66": 0.6704947352409363,
        "codebertscore_s_f1-61": 0.7059198617935181,
        "codebertscore_s_f3-61": 0.7144997119903564,
        "codebertscore_s_f1-35": 0.7731469869613647,
        "codebertscore_s_f3-35": 0.7677754163742065,
        "codebertscore_s_f1-26": 0.7565268874168396,
        "codebertscore_s_f3-26": 0.7563837170600891,
        "codebertscore_s_f1-161": 0.7888085246086121,
        "codebertscore_s_f3-161": 0.7965291738510132,
        "codebertscore_s_f1-22": 0.5995455980300903,
        "codebertscore_s_f3-22": 0.5166004300117493,
        "codebertscore_s_f1-177": 0.546431839466095,
        "codebertscore_s_f3-177": 0.5114245414733887,
        "codebertscore_s_f1-120": 0.6995671391487122,
        "codebertscore_s_f3-120": 0.6888387203216553,
        "codebertscore_s_f1-8": 0.7457270622253418,
        "codebertscore_s_f3-8": 0.7484845519065857,
        "codebertscore_s_f1-7": 0.7687486410140991,
        "codebertscore_s_f3-7": 0.7527808547019958,
        "codebertscore_s_f1-23": 0.7797971963882446,
        "codebertscore_s_f3-23": 0.787078857421875,
        "codebertscore_s_f1-59": 0.7537539601325989,
        "codebertscore_s_f3-59": 0.7492131590843201,
        "codebertscore_s_f1-63": 0.6762017607688904,
        "codebertscore_s_f3-63": 0.6700073480606079,
        "codebertscore_s_f1-147": 0.7762848138809204,
        "codebertscore_s_f3-147": 0.7705283164978027,
        "codebertscore_s_f1-180": 0.7039873600006104,
        "codebertscore_s_f3-180": 0.7084514498710632,
        "codebertscore_s_f1-166": 0.7726045250892639,
        "codebertscore_s_f3-166": 0.7738499641418457,
        "gpt35_nsnr-190": 4,
        "raw_gpt35_nsnr-190": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-75": 4,
        "raw_gpt35_nsnr-75": "4",
        "gpt35_nsnr-66": 4,
        "raw_gpt35_nsnr-66": "4",
        "gpt35_nsnr-61": 3,
        "raw_gpt35_nsnr-61": "3",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-161": 4,
        "raw_gpt35_nsnr-161": "4",
        "gpt35_nsnr-22": 0,
        "raw_gpt35_nsnr-22": "3 - The code snippet includes a function that takes a string representing a file's name and returns 'Yes' if the file's name is valid, and 'No' otherwise. The function checks if the file name meets the following conditions: \n- There should not be more than three digits ('0'-'9') in the file's name.\n- The file's name contains exactly one dot '.'\n- The substring before the dot should not be empty, and it starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z').\n- The substring after the dot should be one of these: ['txt', 'exe', 'dll'].\n\nHowever, the code snippet does not implement any logic to check if the file name starts with a letter from the latin alphabet.",
        "gpt35_nsnr-177": 3,
        "raw_gpt35_nsnr-177": "3",
        "gpt35_nsnr-120": 4,
        "raw_gpt35_nsnr-120": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nsnr-63": 4,
        "raw_gpt35_nsnr-63": "4",
        "gpt35_nsnr-147": 4,
        "raw_gpt35_nsnr-147": "4",
        "gpt35_nsnr-180": 4,
        "raw_gpt35_nsnr-180": "4",
        "gpt35_nsnr-166": 4,
        "raw_gpt35_nsnr-166": "4",
        "gpt35_nswr-190": 4,
        "raw_gpt35_nswr-190": "4",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-75": 3,
        "raw_gpt35_nswr-75": "3",
        "gpt35_nswr-66": 4,
        "raw_gpt35_nswr-66": "4",
        "gpt35_nswr-61": 2,
        "raw_gpt35_nswr-61": "2",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-26": 4,
        "raw_gpt35_nswr-26": "4",
        "gpt35_nswr-161": 3,
        "raw_gpt35_nswr-161": "3",
        "gpt35_nswr-22": 2,
        "raw_gpt35_nswr-22": "2",
        "gpt35_nswr-177": 2,
        "raw_gpt35_nswr-177": "2",
        "gpt35_nswr-120": 3,
        "raw_gpt35_nswr-120": "3",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3",
        "gpt35_nswr-63": 3,
        "raw_gpt35_nswr-63": "3",
        "gpt35_nswr-147": 3,
        "raw_gpt35_nswr-147": "3",
        "gpt35_nswr-180": 3,
        "raw_gpt35_nswr-180": "3",
        "gpt35_nswr-166": 3,
        "raw_gpt35_nswr-166": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return True if the three\n    // sides form a right-angled triangle, False otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n    // right_angle_triangle(1, 2, 3) == False\n    public static boolean rightAngleTriangle(int a, int b, int c) {\n",
        "snippet": [
            "        return a * a == b * b + c * c || b * b == a * a + c * c || c * c == a * a + b * b;\n    }\n}"
        ],
        "simplified": "Given the lengths of the three sides of a triangle. Return True if the three sides form a right-angled triangle, False otherwise. A right-angled triangle is a triangle in which one angle is right angle or 90 degree.",
        "task_id": "157",
        "199": "double[][] sides = new double[][]{\n            {a, b, c},\n            {a, c, b},\n            {b, a, c},\n            {b, c, a},\n            {c, a, b},\n            {c, b, a}\n        };\n        for (double[] side : sides) {\n            if (side[0] * side[0] + side[1] * side[1] == side[2] * side[2]) {\n                return true;\n            }\n        }\n        return false;",
        "grade-199": {
            "execution": 1
        },
        "30": "throw new UnsupportedOperationException(\"Implement me\");",
        "grade-30": {
            "execution": 0
        },
        "6": "return Math.pow(a, 2) + Math.pow(b, 2) == Math.pow(c, 2);",
        "grade-6": {
            "execution": 0
        },
        "79": "// Solution starts here\n        if (a == 0 || b == 0 || c == 0) return false;\n        else {\n            Integer[] sides = {a, b, c};\n            Arrays.sort(sides);\n            int minSide = sides[0];\n            int otherSide = sides[1];\n            int maxSide = sides[2];\n            return (int)Math.pow(minSide, 2) + (int)Math.pow(otherSide, 2) == (int)Math.pow(maxSide, 2);\n        }\n        // Solution ends here",
        "grade-79": {
            "execution": 1
        },
        "71": "// First, sort them from smallest to largest.\n        int[] arr = new int[]{a, b, c};\n        Arrays.sort(arr);\n        // Now, since we have the square of the hypotenuse at the end, \n        // we can square the first two, then check.\n        return (arr[0] * arr[0] + arr[1] * arr[1]) == arr[2] * arr[2];",
        "grade-71": {
            "execution": 1
        },
        "66": "if(a == 0 || b == 0 || c == 0)\n            return false;\n        List<Integer> l = Arrays.asList(a, b, c);\n        l.sort(null);\n        if(l.get(0) * l.get(0) + l.get(1) * l.get(1) == l.get(2) * l.get(2))\n            return true;\n        return false;",
        "grade-66": {
            "execution": 1
        },
        "39": "int longest = Math.max(Math.max(a, b), c);\n        int sum = a + b + c;\n        int shortest = sum - longest;\n        return longest * longest == shortest * shortest + (sum - shortest) * (sum - shortest);",
        "grade-39": {
            "execution": 0
        },
        "27": "int[] ar = {a, b, c};\n        Arrays.sort(ar);\n        return ar[0] * ar[0] + ar[1] * ar[1] == ar[2] * ar[2];",
        "grade-27": {
            "execution": 1
        },
        "166": "// Write your code here.",
        "grade-166": {
            "execution": 0
        },
        "22": "// Write your code here\n        return (int)Math.pow(a, 2) + (int)Math.pow(b, 2) == (int)Math.pow(c, 2);",
        "grade-22": {
            "execution": 0
        },
        "183": "// your code here...",
        "grade-183": {
            "execution": 0
        },
        "123": "// Your code here",
        "grade-123": {
            "execution": 0
        },
        "8": "// TODO: Implement this method\n        return false;",
        "grade-8": {
            "execution": 0
        },
        "7": "// throw new UnsupportedOperationException(\"Not implemented yet.\");\n        return false;",
        "grade-7": {
            "execution": 0
        },
        "23": "// Order the sides by their length, shortest first.\n        List<Integer> sides = Arrays.asList(a, b, c);\n        Collections.sort(sides);\n        int x = sides.get(0);\n        int y = sides.get(1);\n        int z = sides.get(2);\n        return (x * x) + (y * y) == (z * z);",
        "grade-23": {
            "execution": 1
        },
        "64": "return (c * c == a * a + b * b) || (a * a == b * b + c * c) || (b * b == a * a + c * c);",
        "grade-64": {
            "execution": 1
        },
        "68": "//   return a*a + b*b == c*c;\n        \n        if (a <= 0 || b <= 0 || c <= 0) return false;\n        int biggest = Math.max(a, Math.max(b, c));\n        int sum = a + b + c;\n        if (sum - biggest <= biggest) return false;\n        return biggest * biggest == sum - biggest - biggest;",
        "grade-68": {
            "execution": 0
        },
        "152": "// Type your solution here\n        return (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b * b + c * c == a * a);",
        "grade-152": {
            "execution": 1
        },
        "189": "// return the result\n        // what is the defn of right-angled triangle?\n        // it has one angle that is 90 degree\n        // that means\n        // when two sides are squared and added, they equal the third side squared\n        int d = a*a + b*b;\n        int d1 = c*c;\n        return d == d1;",
        "grade-189": {
            "execution": 0
        },
        "172": "// Implement your code here\n        int[] arr = {a, b, c};\n        Arrays.sort(arr);\n        return (Math.pow(arr[0], 2) + Math.pow(arr[1], 2)) == Math.pow(arr[2], 2);",
        "grade-172": {
            "execution": 1
        },
        "bleu-199": 0.022628070584390616,
        "bleu-30": 0.0023530560808965478,
        "bleu-6": 0.021696597773539876,
        "bleu-79": 0.04034875210451955,
        "bleu-71": 0.011823327916470868,
        "bleu-66": 0.05018714727200676,
        "bleu-39": 0.05888726441884808,
        "bleu-27": 0.02236291640216015,
        "bleu-166": 0.0,
        "bleu-22": 0.023537559464014497,
        "bleu-183": 0.0,
        "bleu-123": 0.0,
        "bleu-8": 0.0016653427581818253,
        "bleu-7": 0.0064583807517987315,
        "bleu-23": 0.013687411971872265,
        "bleu-64": 0.710596768579206,
        "bleu-68": 0.17469820370831737,
        "bleu-152": 0.5619247757747736,
        "bleu-189": 0.13796212600536528,
        "bleu-172": 0.016395816509296363,
        "codebleu-199": 0.40871415770609315,
        "codebleu-30": 0.04304932559281871,
        "codebleu-6": 0.16048504585055118,
        "codebleu-79": 0.4239471326164874,
        "codebleu-71": 0.33165322580645157,
        "codebleu-66": 0.4451164874551971,
        "codebleu-39": 0.395497311827957,
        "codebleu-27": 0.2886424731182795,
        "codebleu-166": 0.04301075268817204,
        "codebleu-22": 0.2497759856630824,
        "codebleu-183": 0.03225806451612903,
        "codebleu-123": 0.03225806451612903,
        "codebleu-8": 0.07718807564658793,
        "codebleu-7": 0.06752998687890378,
        "codebleu-23": 0.37085573476702505,
        "codebleu-64": 0.7774721575215217,
        "codebleu-68": 0.5714369393944955,
        "codebleu-152": 0.7761131833340084,
        "codebleu-189": 0.4056137196640564,
        "codebleu-172": 0.2997311827956989,
        "chrf-199": 0.11838271297985802,
        "chrf-30": 0.030120481927710843,
        "chrf-6": 0.11150435061661437,
        "chrf-79": 0.11165170745938706,
        "chrf-71": 0.0981648167502926,
        "chrf-66": 0.143856179044085,
        "chrf-39": 0.12632165617755164,
        "chrf-27": 0.15410388038323852,
        "chrf-166": 0.03104750491796154,
        "chrf-22": 0.1006053831785117,
        "chrf-183": 0.02757529748000769,
        "chrf-123": 0.027972364009140806,
        "chrf-8": 0.0847580889778804,
        "chrf-7": 0.07928192205403715,
        "chrf-23": 0.0883399298846273,
        "chrf-64": 0.6957554500281841,
        "chrf-68": 0.2519053560889523,
        "chrf-152": 0.527815795017341,
        "chrf-189": 0.16285520736280726,
        "chrf-172": 0.09821006050288285,
        "rougel-199": 0.22641509433962265,
        "rougel-30": 0.03571428571428572,
        "rougel-6": 0.2191780821917808,
        "rougel-79": 0.20359281437125748,
        "rougel-71": 0.14184397163120566,
        "rougel-66": 0.2535211267605634,
        "rougel-39": 0.2772277227722772,
        "rougel-27": 0.20833333333333331,
        "rougel-166": 0.0,
        "rougel-22": 0.18181818181818182,
        "rougel-183": 0.0,
        "rougel-123": 0.0,
        "rougel-8": 0.07407407407407407,
        "rougel-7": 0.06349206349206349,
        "rougel-23": 0.18320610687022898,
        "rougel-64": 0.6086956521739131,
        "rougel-68": 0.373134328358209,
        "rougel-152": 0.6122448979591836,
        "rougel-189": 0.2608695652173913,
        "rougel-172": 0.1272727272727273,
        "meteor-199": 0.3385099743805134,
        "meteor-30": 0.012254901960784314,
        "meteor-6": 0.12518382352941176,
        "meteor-79": 0.29729682495991333,
        "meteor-71": 0.159991358306228,
        "meteor-66": 0.33435249458530725,
        "meteor-39": 0.2411134144178851,
        "meteor-27": 0.1760619188503804,
        "meteor-166": 0.0,
        "meteor-22": 0.12091619318181819,
        "meteor-183": 0.0,
        "meteor-123": 0.0,
        "meteor-8": 0.024630541871921183,
        "meteor-7": 0.024096385542168672,
        "meteor-23": 0.19478681418219465,
        "meteor-64": 0.7735797021511307,
        "meteor-68": 0.43445718883050677,
        "meteor-152": 0.8093537414965986,
        "meteor-189": 0.25072771680942185,
        "meteor-172": 0.1375541125541125,
        "ruby-199": 0.14782608695652177,
        "ruby-30": 0.022727272727272707,
        "ruby-6": 0.13636363636363635,
        "ruby-79": 0.10569105691056913,
        "ruby-71": 0.07216494845360821,
        "ruby-66": 0.13265306122448983,
        "ruby-39": 0.17543859649122806,
        "ruby-27": 0.13461538461538458,
        "ruby-166": 0.0,
        "ruby-22": 0.0,
        "ruby-183": 0.0,
        "ruby-123": 0.0,
        "ruby-8": 0.022727272727272707,
        "ruby-7": 0.022727272727272707,
        "ruby-23": 0.09195402298850575,
        "ruby-64": 0.5416666666666667,
        "ruby-68": 0.2222222222222222,
        "ruby-152": 0.37037037037037035,
        "ruby-189": 0.14084507042253525,
        "ruby-172": 0.09090909090909094,
        "codebertscore_f1-199": 0.72889643907547,
        "codebertscore_f3-199": 0.7721382975578308,
        "codebertscore_f1-30": 0.6434147953987122,
        "codebertscore_f3-30": 0.6342617273330688,
        "codebertscore_f1-6": 0.7479481101036072,
        "codebertscore_f3-6": 0.757741391658783,
        "codebertscore_f1-79": 0.675226092338562,
        "codebertscore_f3-79": 0.7308579087257385,
        "codebertscore_f1-71": 0.7177670001983643,
        "codebertscore_f3-71": 0.7729677557945251,
        "codebertscore_f1-66": 0.7417863607406616,
        "codebertscore_f3-66": 0.7841912508010864,
        "codebertscore_f1-39": 0.7752458453178406,
        "codebertscore_f3-39": 0.8099408149719238,
        "codebertscore_f1-27": 0.7643460631370544,
        "codebertscore_f3-27": 0.7933149337768555,
        "codebertscore_f1-166": 0.5877850651741028,
        "codebertscore_f3-166": 0.5791487693786621,
        "codebertscore_f1-22": 0.725246787071228,
        "codebertscore_f3-22": 0.7573649287223816,
        "codebertscore_f1-183": 0.591117262840271,
        "codebertscore_f3-183": 0.5819777846336365,
        "codebertscore_f1-123": 0.5466381907463074,
        "codebertscore_f3-123": 0.5343484282493591,
        "codebertscore_f1-8": 0.6051422357559204,
        "codebertscore_f3-8": 0.6040000915527344,
        "codebertscore_f1-7": 0.6352959871292114,
        "codebertscore_f3-7": 0.6275970935821533,
        "codebertscore_f1-23": 0.7228615283966064,
        "codebertscore_f3-23": 0.7712739706039429,
        "codebertscore_f1-64": 0.9166815280914307,
        "codebertscore_f3-64": 0.9161425232887268,
        "codebertscore_f1-68": 0.7801845073699951,
        "codebertscore_f3-68": 0.8237729668617249,
        "codebertscore_f1-152": 0.883445143699646,
        "codebertscore_f3-152": 0.9005452394485474,
        "codebertscore_f1-189": 0.7210317254066467,
        "codebertscore_f3-189": 0.7729659080505371,
        "codebertscore_f1-172": 0.7017467021942139,
        "codebertscore_f3-172": 0.7319777607917786,
        "codebertscore_s_f1-199": 0.7606745958328247,
        "codebertscore_s_f3-199": 0.8037471175193787,
        "codebertscore_s_f1-30": 0.5836946368217468,
        "codebertscore_s_f3-30": 0.5779762864112854,
        "codebertscore_s_f1-6": 0.772969126701355,
        "codebertscore_s_f3-6": 0.7895717024803162,
        "codebertscore_s_f1-79": 0.7091155648231506,
        "codebertscore_s_f3-79": 0.7715043425559998,
        "codebertscore_s_f1-71": 0.7323166131973267,
        "codebertscore_s_f3-71": 0.8045012950897217,
        "codebertscore_s_f1-66": 0.7690264582633972,
        "codebertscore_s_f3-66": 0.8235312700271606,
        "codebertscore_s_f1-39": 0.7870488166809082,
        "codebertscore_s_f3-39": 0.8331778049468994,
        "codebertscore_s_f1-27": 0.7961448431015015,
        "codebertscore_s_f3-27": 0.8321337699890137,
        "codebertscore_s_f1-166": 0.5624909996986389,
        "codebertscore_s_f3-166": 0.5550092458724976,
        "codebertscore_s_f1-22": 0.734446108341217,
        "codebertscore_s_f3-22": 0.7734811305999756,
        "codebertscore_s_f1-183": 0.5820242762565613,
        "codebertscore_s_f3-183": 0.5684083104133606,
        "codebertscore_s_f1-123": 0.5671665668487549,
        "codebertscore_s_f3-123": 0.5571857690811157,
        "codebertscore_s_f1-8": 0.6318117380142212,
        "codebertscore_s_f3-8": 0.6280454397201538,
        "codebertscore_s_f1-7": 0.6237285137176514,
        "codebertscore_s_f3-7": 0.6286023855209351,
        "codebertscore_s_f1-23": 0.7489736080169678,
        "codebertscore_s_f3-23": 0.8109692931175232,
        "codebertscore_s_f1-64": 0.935806155204773,
        "codebertscore_s_f3-64": 0.9364436864852905,
        "codebertscore_s_f1-68": 0.8080446124076843,
        "codebertscore_s_f3-68": 0.8603370785713196,
        "codebertscore_s_f1-152": 0.904883623123169,
        "codebertscore_s_f3-152": 0.9238121509552002,
        "codebertscore_s_f1-189": 0.7407833337783813,
        "codebertscore_s_f3-189": 0.7942541837692261,
        "codebertscore_s_f1-172": 0.7204200625419617,
        "codebertscore_s_f3-172": 0.7621873617172241,
        "gpt35_nsnr-199": 4,
        "raw_gpt35_nsnr-199": "4",
        "gpt35_nsnr-30": 0,
        "raw_gpt35_nsnr-30": "0",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-79": 3,
        "raw_gpt35_nsnr-79": "3",
        "gpt35_nsnr-71": 4,
        "raw_gpt35_nsnr-71": "4",
        "gpt35_nsnr-66": 4,
        "raw_gpt35_nsnr-66": "4",
        "gpt35_nsnr-39": 4,
        "raw_gpt35_nsnr-39": "4",
        "gpt35_nsnr-27": 4,
        "raw_gpt35_nsnr-27": "4",
        "gpt35_nsnr-166": 0,
        "raw_gpt35_nsnr-166": "3 - The code snippet correctly checks if the given sides form a right-angled triangle by using the Pythagorean theorem. However, it does not handle the case where any of the sides is 0 or negative, which should also return False.",
        "gpt35_nsnr-22": 3,
        "raw_gpt35_nsnr-22": "3",
        "gpt35_nsnr-183": 3,
        "raw_gpt35_nsnr-183": "3",
        "gpt35_nsnr-123": 0,
        "raw_gpt35_nsnr-123": "3 - The code snippet correctly checks if the given sides form a right-angled triangle by using the Pythagorean theorem. However, it does not handle the case where any of the sides is 0 or negative, which should also return False according to the problem statement.",
        "gpt35_nsnr-8": 2,
        "raw_gpt35_nsnr-8": "2",
        "gpt35_nsnr-7": 2,
        "raw_gpt35_nsnr-7": "2",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-64": 4,
        "raw_gpt35_nsnr-64": "4",
        "gpt35_nsnr-68": 4,
        "raw_gpt35_nsnr-68": "4",
        "gpt35_nsnr-152": 4,
        "raw_gpt35_nsnr-152": "4",
        "gpt35_nsnr-189": 3,
        "raw_gpt35_nsnr-189": "3",
        "gpt35_nsnr-172": 4,
        "raw_gpt35_nsnr-172": "4",
        "gpt35_nswr-199": 3,
        "raw_gpt35_nswr-199": "3",
        "gpt35_nswr-30": 0,
        "raw_gpt35_nswr-30": "0",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-79": 3,
        "raw_gpt35_nswr-79": "3",
        "gpt35_nswr-71": 4,
        "raw_gpt35_nswr-71": "4",
        "gpt35_nswr-66": 4,
        "raw_gpt35_nswr-66": "4",
        "gpt35_nswr-39": 4,
        "raw_gpt35_nswr-39": "4",
        "gpt35_nswr-27": 3,
        "raw_gpt35_nswr-27": "3",
        "gpt35_nswr-166": 4,
        "raw_gpt35_nswr-166": "4",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-183": 4,
        "raw_gpt35_nswr-183": "4",
        "gpt35_nswr-123": 4,
        "raw_gpt35_nswr-123": "4",
        "gpt35_nswr-8": 2,
        "raw_gpt35_nswr-8": "2",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-64": 4,
        "raw_gpt35_nswr-64": "4",
        "gpt35_nswr-68": 2,
        "raw_gpt35_nswr-68": "2",
        "gpt35_nswr-152": 4,
        "raw_gpt35_nswr-152": "4",
        "gpt35_nswr-189": 3,
        "raw_gpt35_nswr-189": "3",
        "gpt35_nswr-172": 4,
        "raw_gpt35_nswr-172": "4"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Filter given list of any python values only for integers\n    // >>> filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    public static ArrayList<Long> filterIntegers(ArrayList<Object> values) {\n",
        "snippet": [
            "        List<Integer> result = new ArrayList<>();\n        for (Object x : values) {\n            if (x instanceof Integer) {\n                result.add((Integer) x);\n            }\n        }\n        return result;\n    }\n}"
        ],
        "simplified": "Filter given list of any python values only for integers",
        "task_id": "22",
        "3": "// YOUR CODE GOES HERE\n        return new ArrayList<Long>();",
        "grade-3": {
            "execution": 0
        },
        "0": "ArrayList<Long> res = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Long) {\n                res.add((Long) value);\n            }\n        }\n        return res;",
        "grade-0": {
            "execution": 0
        },
        "8": "ArrayList<Long> integers = new ArrayList<>();\n        // YOUR CODE HERE\n        return integers;",
        "grade-8": {
            "execution": 0
        },
        "7": "ArrayList<Long> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;",
        "grade-7": {
            "execution": 0
        },
        "16": "ArrayList<Long> arrL = new ArrayList<Long>();\n        for (Object o : values) {\n            if (o instanceof Long) {\n                arrL.add((Long) o);\n            }\n        }\n        return arrL;",
        "grade-16": {
            "execution": 0
        },
        "2": "// insert code here\n        return new ArrayList<Long>();",
        "grade-2": {
            "execution": 0
        },
        "11": "return values.stream().filter(value -> value instanceof Long).map(value -> (Long) value).collect(Collectors.toCollection(ArrayList::new));",
        "grade-11": {
            "execution": 0
        },
        "1": "return (ArrayList<Long>) values.stream().filter(v -> v instanceof Long).collect(Collectors.toList());",
        "grade-1": {
            "execution": 0
        },
        "10": "// TODO: Write your code here\n        ArrayList<Long> res = new ArrayList<>();\n        for(Object obj : values) {\n            if(obj instanceof Long)\n                res.add((Long)obj);\n        }\n        return res;",
        "grade-10": {
            "execution": 0
        },
        "17": "ArrayList<Long> nums = new ArrayList<>();\n        values.forEach(x -> {\n            if (x instanceof Integer) {\n                nums.add((Integer) x);\n            }\n        });\n        return nums;",
        "grade-17": {
            "execution": 0
        },
        "12": "ArrayList<Long> out = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Long) {\n                out.add((Long) value);\n            }\n        }\n        return out;",
        "grade-12": {
            "execution": 0
        },
        "6": "ArrayList<Long> res = new ArrayList<>();\n        for (Object val : values) {\n            if (val instanceof Long) {\n                res.add((Long) val);\n            }\n        }\n        return res;",
        "grade-6": {
            "execution": 0
        },
        "18": "ArrayList<Long> res = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                res.add((long) value);\n            }\n        }\n        return res;",
        "grade-18": {
            "execution": 0
        },
        "15": "ArrayList<Long> result = new ArrayList<>();\n        // Add your code here\n        return result;",
        "grade-15": {
            "execution": 0
        },
        "13": "return null;",
        "grade-13": {
            "execution": 0
        },
        "9": "ArrayList<Long> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Long) {\n                result.add((Long) value);\n            }\n        }\n        return result;",
        "grade-9": {
            "execution": 0
        },
        "4": "ArrayList<Long> ints = new ArrayList<Long>();\n        for (Object v : values) {\n            if (v instanceof Long) {\n                ints.add((Long) v);\n            }\n        }\n        return ints;",
        "grade-4": {
            "execution": 0
        },
        "14": "ArrayList<Long> ret = new ArrayList<>();\n        for (Object o : values) {\n            if (o instanceof Long) {\n                ret.add((Long) o);\n            }\n        }\n        return ret;",
        "grade-14": {
            "execution": 0
        },
        "5": "ArrayList<Long> res = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Long)\n                res.add((Long) value);\n        }\n        return res;",
        "grade-5": {
            "execution": 0
        },
        "19": "ArrayList<Long> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Long) value);\n            }\n        }\n        return result;",
        "grade-19": {
            "execution": 0
        },
        "bleu-3": 0.04836131771633143,
        "bleu-0": 0.502593081201044,
        "bleu-8": 0.14613711358617268,
        "bleu-7": 0.7270410574896147,
        "bleu-16": 0.4284539111163864,
        "bleu-2": 0.04290353077027561,
        "bleu-11": 0.04046758720301476,
        "bleu-1": 0.055068821815622726,
        "bleu-10": 0.4089442799486988,
        "bleu-17": 0.5453256759998611,
        "bleu-12": 0.502593081201044,
        "bleu-6": 0.502593081201044,
        "bleu-18": 0.5376562059216485,
        "bleu-15": 0.20208765856636945,
        "bleu-13": 2.065579963223799e-07,
        "bleu-9": 0.6443748881817096,
        "bleu-4": 0.45735611907858376,
        "bleu-14": 0.502593081201044,
        "bleu-5": 0.4549550592306913,
        "bleu-19": 0.6858675130253978,
        "codebleu-3": 0.16319665335478276,
        "codebleu-0": 0.7421379613799621,
        "codebleu-8": 0.26279546389692654,
        "codebleu-7": 0.8318009630486668,
        "codebleu-16": 0.7574264904597663,
        "codebleu-2": 0.15176874306628058,
        "codebleu-11": 0.39117661131888826,
        "codebleu-1": 0.3262186407871465,
        "codebleu-10": 0.6919123767654967,
        "codebleu-17": 0.7490875583890567,
        "codebleu-12": 0.7421379613799621,
        "codebleu-6": 0.7926430118850127,
        "codebleu-18": 0.801319469315883,
        "codebleu-15": 0.28497577916069505,
        "codebleu-13": 0.03030347443931014,
        "codebleu-9": 0.7629233372584794,
        "codebleu-4": 0.7574264904597663,
        "codebleu-14": 0.7926430118850127,
        "codebleu-5": 0.6772547534256724,
        "codebleu-19": 0.8217633187401895,
        "chrf-3": 0.16003893612852754,
        "chrf-0": 0.5653075261760656,
        "chrf-8": 0.2851501265138396,
        "chrf-7": 0.8024524819028815,
        "chrf-16": 0.4855345255447601,
        "chrf-2": 0.19106190737006337,
        "chrf-11": 0.2735151603740635,
        "chrf-1": 0.28336581340604483,
        "chrf-10": 0.5211206296389406,
        "chrf-17": 0.570458952952018,
        "chrf-12": 0.5298957256408208,
        "chrf-6": 0.56268959839865,
        "chrf-18": 0.6407327208294809,
        "chrf-15": 0.36059058395663607,
        "chrf-13": 0.04648807166524107,
        "chrf-9": 0.6725140811448199,
        "chrf-4": 0.4926087855753844,
        "chrf-14": 0.5628706409822221,
        "chrf-5": 0.5371382312011398,
        "chrf-19": 0.7462542087827962,
        "rougel-3": 0.25806451612903225,
        "rougel-0": 0.7692307692307693,
        "rougel-8": 0.4057971014492754,
        "rougel-7": 0.8791208791208792,
        "rougel-16": 0.7368421052631581,
        "rougel-2": 0.26229508196721313,
        "rougel-11": 0.2696629213483146,
        "rougel-1": 0.39999999999999997,
        "rougel-10": 0.6804123711340206,
        "rougel-17": 0.7659574468085107,
        "rougel-12": 0.7692307692307693,
        "rougel-6": 0.7692307692307693,
        "rougel-18": 0.7912087912087912,
        "rougel-15": 0.4571428571428571,
        "rougel-13": 0.08163265306122448,
        "rougel-9": 0.8351648351648352,
        "rougel-4": 0.7608695652173914,
        "rougel-14": 0.7692307692307693,
        "rougel-5": 0.7415730337078652,
        "rougel-19": 0.8571428571428571,
        "meteor-3": 0.17829457364341086,
        "meteor-0": 0.747161086656885,
        "meteor-8": 0.33355084382151023,
        "meteor-7": 0.8691244553376908,
        "meteor-16": 0.7365716048838542,
        "meteor-2": 0.17871017871017872,
        "meteor-11": 0.2610438777991138,
        "meteor-1": 0.234375,
        "meteor-10": 0.6825834098561371,
        "meteor-17": 0.7531013538631267,
        "meteor-12": 0.747161086656885,
        "meteor-6": 0.747161086656885,
        "meteor-18": 0.7658473197234998,
        "meteor-15": 0.36790380938838063,
        "meteor-13": 0.023980815347721823,
        "meteor-9": 0.8223872805508785,
        "meteor-4": 0.7413753327417923,
        "meteor-14": 0.747161086656885,
        "meteor-5": 0.6945323535735312,
        "meteor-19": 0.842511305055297,
        "ruby-3": 0.13043478260869568,
        "ruby-0": 0.7391304347826086,
        "ruby-8": 0.28260869565217395,
        "ruby-7": 0.8478260869565217,
        "ruby-16": 0.6734693877551021,
        "ruby-2": 0.15217391304347827,
        "ruby-11": 0.08695652173913049,
        "ruby-1": 0.19565217391304346,
        "ruby-10": 0.5686274509803921,
        "ruby-17": 0.6666666666666667,
        "ruby-12": 0.7391304347826086,
        "ruby-6": 0.7391304347826086,
        "ruby-18": 0.7608695652173914,
        "ruby-15": 0.32608695652173914,
        "ruby-13": 0.04347826086956519,
        "ruby-9": 0.8043478260869565,
        "ruby-4": 0.7173913043478262,
        "ruby-14": 0.7391304347826086,
        "ruby-5": 0.6956521739130435,
        "ruby-19": 0.8260869565217391,
        "codebertscore_f1-3": 0.6831451058387756,
        "codebertscore_f3-3": 0.6862724423408508,
        "codebertscore_f1-0": 0.9458374977111816,
        "codebertscore_f3-0": 0.94771409034729,
        "codebertscore_f1-8": 0.7336687445640564,
        "codebertscore_f3-8": 0.7201976776123047,
        "codebertscore_f1-7": 0.9512003064155579,
        "codebertscore_f3-7": 0.953263521194458,
        "codebertscore_f1-16": 0.9128178954124451,
        "codebertscore_f3-16": 0.921931266784668,
        "codebertscore_f1-2": 0.6992025971412659,
        "codebertscore_f3-2": 0.6859195828437805,
        "codebertscore_f1-11": 0.7324041724205017,
        "codebertscore_f3-11": 0.7517992854118347,
        "codebertscore_f1-1": 0.7483522295951843,
        "codebertscore_f3-1": 0.7607884407043457,
        "codebertscore_f1-10": 0.8791601657867432,
        "codebertscore_f3-10": 0.9190759658813477,
        "codebertscore_f1-17": 0.8854467868804932,
        "codebertscore_f3-17": 0.8970920443534851,
        "codebertscore_f1-12": 0.9421829581260681,
        "codebertscore_f3-12": 0.9439811110496521,
        "codebertscore_f1-6": 0.9464700818061829,
        "codebertscore_f3-6": 0.9483521580696106,
        "codebertscore_f1-18": 0.9372994899749756,
        "codebertscore_f3-18": 0.939757227897644,
        "codebertscore_f1-15": 0.7606896758079529,
        "codebertscore_f3-15": 0.7510815262794495,
        "codebertscore_f1-13": 0.573431670665741,
        "codebertscore_f3-13": 0.5388616323471069,
        "codebertscore_f1-9": 0.9566636681556702,
        "codebertscore_f3-9": 0.9586924910545349,
        "codebertscore_f1-4": 0.9179530739784241,
        "codebertscore_f3-4": 0.9295628070831299,
        "codebertscore_f1-14": 0.9497331976890564,
        "codebertscore_f3-14": 0.9516574144363403,
        "codebertscore_f1-5": 0.9442973732948303,
        "codebertscore_f3-5": 0.9461646676063538,
        "codebertscore_f1-19": 0.951862633228302,
        "codebertscore_f3-19": 0.9537805318832397,
        "codebertscore_s_f1-3": 0.7067821621894836,
        "codebertscore_s_f3-3": 0.7189409732818604,
        "codebertscore_s_f1-0": 0.9503878951072693,
        "codebertscore_s_f3-0": 0.9531471729278564,
        "codebertscore_s_f1-8": 0.7589030861854553,
        "codebertscore_s_f3-8": 0.7494421005249023,
        "codebertscore_s_f1-7": 0.9688135981559753,
        "codebertscore_s_f3-7": 0.9726332426071167,
        "codebertscore_s_f1-16": 0.9188585877418518,
        "codebertscore_s_f3-16": 0.930659830570221,
        "codebertscore_s_f1-2": 0.7212466597557068,
        "codebertscore_s_f3-2": 0.7201529741287231,
        "codebertscore_s_f1-11": 0.7569705843925476,
        "codebertscore_s_f3-11": 0.7732144594192505,
        "codebertscore_s_f1-1": 0.7687737941741943,
        "codebertscore_s_f3-1": 0.779333770275116,
        "codebertscore_s_f1-10": 0.884490966796875,
        "codebertscore_s_f3-10": 0.9239477515220642,
        "codebertscore_s_f1-17": 0.9055836796760559,
        "codebertscore_s_f3-17": 0.9216773509979248,
        "codebertscore_s_f1-12": 0.9471060633659363,
        "codebertscore_s_f3-12": 0.9498735666275024,
        "codebertscore_s_f1-6": 0.9506667256355286,
        "codebertscore_s_f3-6": 0.9534340500831604,
        "codebertscore_s_f1-18": 0.948823094367981,
        "codebertscore_s_f3-18": 0.9537299871444702,
        "codebertscore_s_f1-15": 0.7874013781547546,
        "codebertscore_s_f3-15": 0.7801947593688965,
        "codebertscore_s_f1-13": 0.6347567439079285,
        "codebertscore_s_f3-13": 0.5985074043273926,
        "codebertscore_s_f1-9": 0.9609799981117249,
        "codebertscore_s_f3-9": 0.9640339612960815,
        "codebertscore_s_f1-4": 0.9211483001708984,
        "codebertscore_s_f3-4": 0.9350956082344055,
        "codebertscore_s_f1-14": 0.952897846698761,
        "codebertscore_s_f3-14": 0.9556558728218079,
        "codebertscore_s_f1-5": 0.949350118637085,
        "codebertscore_s_f3-5": 0.9520694017410278,
        "codebertscore_s_f1-19": 0.9613342881202698,
        "codebertscore_s_f3-19": 0.9650214314460754,
        "gpt35_nsnr-3": 2,
        "raw_gpt35_nsnr-3": "2",
        "gpt35_nsnr-0": 4,
        "raw_gpt35_nsnr-0": "4",
        "gpt35_nsnr-8": 0,
        "raw_gpt35_nsnr-8": "0",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-2": 2,
        "raw_gpt35_nsnr-2": "2",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-1": 3,
        "raw_gpt35_nsnr-1": "3",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-17": 3,
        "raw_gpt35_nsnr-17": "3",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-15": 2,
        "raw_gpt35_nsnr-15": "2",
        "gpt35_nsnr-13": 0,
        "raw_gpt35_nsnr-13": "0",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-19": 3,
        "raw_gpt35_nsnr-19": "3",
        "gpt35_nswr-3": 2,
        "raw_gpt35_nswr-3": "2",
        "gpt35_nswr-0": 3,
        "raw_gpt35_nswr-0": "3",
        "gpt35_nswr-8": 0,
        "raw_gpt35_nswr-8": "0",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-16": 3,
        "raw_gpt35_nswr-16": "3",
        "gpt35_nswr-2": 2,
        "raw_gpt35_nswr-2": "2",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-1": 3,
        "raw_gpt35_nswr-1": "3",
        "gpt35_nswr-10": 4,
        "raw_gpt35_nswr-10": "4",
        "gpt35_nswr-17": 2,
        "raw_gpt35_nswr-17": "2",
        "gpt35_nswr-12": 3,
        "raw_gpt35_nswr-12": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-15": 2,
        "raw_gpt35_nswr-15": "2",
        "gpt35_nswr-13": 0,
        "raw_gpt35_nswr-13": "0",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-14": 3,
        "raw_gpt35_nswr-14": "3",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-19": 2,
        "raw_gpt35_nswr-19": "2"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    // cycpattern_check(\"abcd\",\"abd\") => False\n    // cycpattern_check(\"hello\",\"ell\") => True\n    // cycpattern_check(\"whassup\",\"psus\") => False\n    // cycpattern_check(\"abab\",\"baa\") => True\n    // cycpattern_check(\"efef\",\"eeff\") => False\n    // cycpattern_check(\"himenss\",\"simen\") => True\n    public static boolean cycpatternCheck(String a, String b) {\n",
        "snippet": [
            "        int l = b.length();\n        String pat = b + b;\n        for (int i = 0; i <= a.length() - l; i++) {\n            for (int j = 0; j <= l; j++) {\n                if (a.substring(i, i + l).equals(pat.substring(j, j + l))) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}"
        ],
        "simplified": "You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word",
        "task_id": "154",
        "30": "String c=b+b;\n        return a.contains(c);",
        "grade-30": {
            "execution": 0
        },
        "6": "StringBuilder sb = new StringBuilder(b);\n        String new_b = sb.reverse().toString();\n        System.out.println(new_b);\n        for(int i = 0; i < b.length(); i++) {\n            if(a.contains(new_b)) {\n                return true;\n            }\n            new_b = new_b.substring(1) + new_b.charAt(0);\n        }\n        return false;",
        "grade-6": {
            "execution": 0
        },
        "84": "int l = b.length();\n        int n = a.length();\n        if (l > n) {\n            return false;\n        }\n        int j = 0;\n        for (int i = 0; i < n; i++) {\n            if (a.charAt(i) == b.charAt(j)) {\n                j++;\n            } else {\n                j = 0;\n            }\n            if (j == l) {\n                return true;\n            }\n        }\n        return false;",
        "grade-84": {
            "execution": 0
        },
        "75": "String s = a+a;\n        int i = a.indexOf(b);\n        if(i != -1) {\n            return true;\n        }\n        return false;",
        "grade-75": {
            "execution": 0
        },
        "68": "// Write your code here\n        int n = a.length();\n        int m = b.length();\n        boolean[] rotate_arr = new boolean[n];\n        boolean[] rotate_brr = new boolean[m];\n        for(int i = 0; i < n; i++) {\n            rotate_arr[i] = true;\n        }\n        for(int i = 0; i < m; i++) {\n            rotate_brr[i] = true;\n        }\n        //char[] arr = a.toCharArray();\n        //char[] brr = b.toCharArray();\n        for(int i = 0; i < n - m; i++) {\n            int j = 0;\n            for(j = 0; j < m; j++) {\n                if(a.charAt(i + j) != b.charAt(j)) {\n                    break;\n                }\n            }\n            if(j == m) {\n                //we have found the string\n                return true;\n            }\n        }\n        for(int i = n - m; i < n; i++) {\n            int j = 0;\n            for(j = 0; j < m; j++) {\n                if(a.charAt(i + j) != b.charAt(j)) {\n                    break;\n                }\n            }\n            if(j == m) {\n                //we have found the string\n                return true;\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            System.out.print(a.charAt(i) + \" \");\n        }\n        System.out.println();\n        for(int i = 0; i < m; i++) {\n            System.out.print(b.charAt(i) + \" \");\n        }\n        System.out.println();\n        return false;",
        "grade-68": {
            "execution": 0
        },
        "38": "// Solution:\n        // Multiply string b by length of string a and check if a is a substring of the result\n        for (int i = 0; i < a.length(); i++) {\n            if (b.repeat(a.length()).contains(a)) {\n                return true;\n            }\n            // Cycle b\n            char first = b.charAt(0);\n            b = b.substring(1) + first;\n        }\n        return false;",
        "grade-38": {
            "execution": 0
        },
        "28": "b = b + b;\n        return b.contains(a);",
        "grade-28": {
            "execution": 0
        },
        "180": "if (a.length() < b.length()) return false;\n        if (a.length() == b.length()) return a.equals(b);\n        int bLen = b.length();\n        for (int i = 0; i < bLen; i++) {\n            if (a.contains(b)) return true;\n            b = b.substring(1) + b.charAt(0);\n        }\n        return false;",
        "grade-180": {
            "execution": 1
        },
        "23": "for (int i = 0; i < b.length(); i++) {\n            char c = b.charAt(0);\n            b = b.substring(1);\n            b += c;\n            if (a.contains(b)) {\n                return true;\n            }\n        }\n        return false;",
        "grade-23": {
            "execution": 1
        },
        "195": "// Write your code here.\n        // a = \"himenss\"\n        // b = \"simen\"\n        // s = \"sssimen\"\n        // int length = b.length();\n        String s = a + a;\n        int bLength = b.length();\n        int sLength = s.length();\n        for (int i = 0; i < sLength; i++) {\n            String substring = s.substring(i, i + bLength);\n            if (substring.equals(b)) {\n                return true;\n            }\n        }\n        return false;",
        "grade-195": {
            "execution": 0
        },
        "135": "boolean flg = false;\n        for(int i = 0; i < b.length(); i++) {\n            b = b.substring(1) + b.charAt(0);\n            if(a.contains(b))\n                flg = true;\n        }\n        return flg;",
        "grade-135": {
            "execution": 1
        },
        "8": "return false;",
        "grade-8": {
            "execution": 0
        },
        "7": "// Your Code Here\n        if(a.length() != b.length())\n        {\n            return false;\n        }\n        if(b.equals(a))\n        {\n            return true;\n        }\n        return isSubstring(a,b);",
        "grade-7": {
            "execution": 0
        },
        "25": "for (int i = 0; i < b.length(); i++) {\n            if (a.contains(b)) {\n                return true;\n            }\n            b = b.substring(1) + b.charAt(0);\n        }\n        return false;",
        "grade-25": {
            "execution": 1
        },
        "65": "int wordLen = b.length();\n        int aLen = a.length();\n        int bLen = b.length();\n        if (aLen < bLen) {\n            return false;\n        }\n        for (int i = 0; i < aLen; i++) {\n            if (a.charAt(i) == b.charAt(0)) {\n                if (aLen - i < bLen) {\n                    break;\n                }\n                String substring = a.substring(i, i + bLen);\n                String substring_rot = \"\";\n                for (int j = 0; j < wordLen; j++) {\n                    substring_rot += substring.charAt(wordLen - j - 1);\n                }\n                if (substring_rot.equals(b)) {\n                    return true;\n                }\n            }\n        }\n        return false;",
        "grade-65": {
            "execution": 0
        },
        "70": "if (a.length() == 0 || b.length() == 0) return false;\n        // convert b to a list of chars\n        char[] bChars = b.toCharArray();\n        // loop from 0 to b.length\n        for (int i = 0; i < b.length(); i++) {\n            // push back the first element in the list and rotate the list to the left\n            char temp = bChars[0];\n            for (int j = 0; j < bChars.length - 1; j++) {\n                bChars[j] = bChars[j + 1];\n            }\n            bChars[bChars.length - 1] = temp;\n            // check if the rotated list is a substring of a\n            String c = new String(bChars);\n            if (a.contains(c)) return true;\n        }\n        return false;",
        "grade-70": {
            "execution": 1
        },
        "164": "if (a.length() < b.length()) {\n            return false;\n        }\n        int[] hash = new int[26];\n        int[] rotHash = new int[26];\n        char[] aArr = a.toCharArray();\n        char[] bArr = b.toCharArray();\n        for (int i = 0; i < b.length(); i++) {\n            hash[aArr[i] - 'a']++;\n            rotHash[bArr[i] - 'a']++;\n        }\n        if (Arrays.equals(hash, rotHash)) {\n            return true;\n        }\n        for (int i = b.length(); i < a.length(); i++) {\n            hash[aArr[i - b.length()] - 'a']--;\n            hash[aArr[i] - 'a']++;\n            if (Arrays.equals(hash, rotHash)) {\n                return true;\n            }\n        }\n        return false;",
        "grade-164": {
            "execution": 0
        },
        "199": "if (a.length() != b.length()) {\n            return false;\n        }\n        return a.contains(b) || cycpatternCheckRecurse(a, b, 0);",
        "grade-199": {
            "execution": 0
        },
        "186": "// Your code goes here.\n        int c = 0;\n        int l = a.length();\n        int r = b.length();\n        if(r > l) {\n            return false;\n        }\n        for(int i = 0; i < l; i++) {\n            if(a.charAt(i) == b.charAt(c)) {\n                c++;\n            } else {\n                c = 0;\n            }\n            if(c == r) {\n                return true;\n            }\n        }\n        return false;",
        "grade-186": {
            "execution": 0
        },
        "59": "String search = a;\n        String pattern = b;\n        char[] start = search.toCharArray();\n        char[] end = new char[start.length];\n        char[] patternChar = pattern.toCharArray();\n        for (int i = 0; i < start.length; i++) {\n            end[(i + 1) % start.length] = start[i];\n        }\n        String endString = String.valueOf(end);\n        String cycle = \"\";\n        int searchTimes = search.length() - pattern.length() + 1;\n        for (int i = 0; i < searchTimes; i++) {\n            cycle = search.substring(i, i + pattern.length());\n            if (cycle.equals(pattern)) {\n                return true;\n            }\n        }\n        if (endString.contains(pattern)) {\n            return true;\n        }\n        return false;",
        "grade-59": {
            "execution": 0
        },
        "bleu-30": 0.001636054348884122,
        "bleu-6": 0.3694989396183349,
        "bleu-84": 0.4992144350534346,
        "bleu-75": 0.05511861432240764,
        "bleu-68": 0.13014660642052683,
        "bleu-38": 0.3625840681169637,
        "bleu-28": 0.0011688062255310742,
        "bleu-180": 0.3617374993089979,
        "bleu-23": 0.3146257368735344,
        "bleu-195": 0.36347529829153674,
        "bleu-135": 0.24428528708985112,
        "bleu-8": 4.8043638256551297e-14,
        "bleu-7": 0.16641027153823298,
        "bleu-25": 0.28830988228578763,
        "bleu-65": 0.36663174836171175,
        "bleu-70": 0.23464193851026546,
        "bleu-164": 0.2010498739065239,
        "bleu-199": 0.10552878451450332,
        "bleu-186": 0.4224808947573073,
        "bleu-59": 0.23255230445131722,
        "codebleu-30": 0.09854519158534948,
        "codebleu-6": 0.5930466484669131,
        "codebleu-84": 0.6614553885895403,
        "codebleu-75": 0.17974105533042167,
        "codebleu-68": 0.7009425699255802,
        "codebleu-38": 0.5773888308824644,
        "codebleu-28": 0.08857845937384638,
        "codebleu-180": 0.5795794727496282,
        "codebleu-23": 0.4313967085853408,
        "codebleu-195": 0.6533218406574548,
        "codebleu-135": 0.40520606228022565,
        "codebleu-8": 0.01459854014732215,
        "codebleu-7": 0.3053679256642943,
        "codebleu-25": 0.3953950893285571,
        "codebleu-65": 0.7243430272414101,
        "codebleu-70": 0.6406637238616261,
        "codebleu-164": 0.6864847326652708,
        "codebleu-199": 0.22828798672068584,
        "codebleu-186": 0.6716848311823459,
        "codebleu-59": 0.6724356945427243,
        "chrf-30": 0.09102534117491326,
        "chrf-6": 0.4617126750017802,
        "chrf-84": 0.5093290839461367,
        "chrf-75": 0.2358006012652761,
        "chrf-68": 0.3510090173475696,
        "chrf-38": 0.4776263640469757,
        "chrf-28": 0.06939909853771015,
        "chrf-180": 0.477854779397592,
        "chrf-23": 0.42332351030008913,
        "chrf-195": 0.5240991643997162,
        "chrf-135": 0.35868322204030023,
        "chrf-8": 0.07277934612568589,
        "chrf-7": 0.39048007490830833,
        "chrf-25": 0.42864504361653194,
        "chrf-65": 0.576475606285461,
        "chrf-70": 0.42905417638027626,
        "chrf-164": 0.40240074177897467,
        "chrf-199": 0.28737646126508204,
        "chrf-186": 0.4688330198583479,
        "chrf-59": 0.447326992923488,
        "rougel-30": 0.2,
        "rougel-6": 0.45652173913043476,
        "rougel-84": 0.5595854922279793,
        "rougel-75": 0.37209302325581395,
        "rougel-68": 0.3067226890756303,
        "rougel-38": 0.4270833333333333,
        "rougel-28": 0.2018348623853211,
        "rougel-180": 0.46153846153846156,
        "rougel-23": 0.5189873417721519,
        "rougel-195": 0.5213270142180095,
        "rougel-135": 0.4805194805194805,
        "rougel-8": 0.061224489795918366,
        "rougel-7": 0.3776223776223776,
        "rougel-25": 0.4666666666666667,
        "rougel-65": 0.47908745247148293,
        "rougel-70": 0.4295774647887323,
        "rougel-164": 0.38730158730158726,
        "rougel-199": 0.31111111111111106,
        "rougel-186": 0.51,
        "rougel-59": 0.42105263157894735,
        "meteor-30": 0.06896551724137931,
        "meteor-6": 0.4624985287193973,
        "meteor-84": 0.601279528417332,
        "meteor-75": 0.24484082771460938,
        "meteor-68": 0.413748807371256,
        "meteor-38": 0.45914619750085267,
        "meteor-28": 0.06904487917146146,
        "meteor-180": 0.4798590375490838,
        "meteor-23": 0.43972889414872796,
        "meteor-195": 0.49958132621923207,
        "meteor-135": 0.3198621444201313,
        "meteor-8": 0.034317534317534315,
        "meteor-7": 0.29516876646941714,
        "meteor-25": 0.40879120879120884,
        "meteor-65": 0.578393827774339,
        "meteor-70": 0.4885270012922532,
        "meteor-164": 0.5206246762780264,
        "meteor-199": 0.19501243889664802,
        "meteor-186": 0.5828440473894033,
        "meteor-59": 0.5350547668946972,
        "ruby-30": 0.11578947368421055,
        "ruby-6": 0.3157894736842105,
        "ruby-84": 0.34693877551020413,
        "ruby-75": 0.2421052631578947,
        "ruby-68": 0.18110236220472442,
        "ruby-38": 0.24742268041237114,
        "ruby-28": 0.11578947368421055,
        "ruby-180": 0.31999999999999995,
        "ruby-23": 0.4,
        "ruby-195": 0.3362068965517241,
        "ruby-135": 0.368421052631579,
        "ruby-8": 0.03157894736842104,
        "ruby-7": 0.21052631578947367,
        "ruby-25": 0.33684210526315794,
        "ruby-65": 0.33333333333333337,
        "ruby-70": 0.2592592592592593,
        "ruby-164": 0.24545454545454548,
        "ruby-199": 0.2210526315789474,
        "ruby-186": 0.3142857142857143,
        "ruby-59": 0.2894736842105263,
        "codebertscore_f1-30": 0.710138738155365,
        "codebertscore_f3-30": 0.6731032729148865,
        "codebertscore_f1-6": 0.7934852242469788,
        "codebertscore_f3-6": 0.8183634877204895,
        "codebertscore_f1-84": 0.8268594145774841,
        "codebertscore_f3-84": 0.8225556015968323,
        "codebertscore_f1-75": 0.75165194272995,
        "codebertscore_f3-75": 0.7242364287376404,
        "codebertscore_f1-68": 0.7438162565231323,
        "codebertscore_f3-68": 0.7836187481880188,
        "codebertscore_f1-38": 0.779394268989563,
        "codebertscore_f3-38": 0.8097043633460999,
        "codebertscore_f1-28": 0.6919043064117432,
        "codebertscore_f3-28": 0.6494210958480835,
        "codebertscore_f1-180": 0.8253118395805359,
        "codebertscore_f3-180": 0.8289526104927063,
        "codebertscore_f1-23": 0.8162673711776733,
        "codebertscore_f3-23": 0.8104298114776611,
        "codebertscore_f1-195": 0.7861941456794739,
        "codebertscore_f3-195": 0.816338300704956,
        "codebertscore_f1-135": 0.7930432558059692,
        "codebertscore_f3-135": 0.798557460308075,
        "codebertscore_f1-8": 0.5291052460670471,
        "codebertscore_f3-8": 0.4832684099674225,
        "codebertscore_f1-7": 0.7544515132904053,
        "codebertscore_f3-7": 0.7422435283660889,
        "codebertscore_f1-25": 0.820480465888977,
        "codebertscore_f3-25": 0.8125952482223511,
        "codebertscore_f1-65": 0.799148678779602,
        "codebertscore_f3-65": 0.8390229940414429,
        "codebertscore_f1-70": 0.7431569695472717,
        "codebertscore_f3-70": 0.7821293473243713,
        "codebertscore_f1-164": 0.7371746301651001,
        "codebertscore_f3-164": 0.7639832496643066,
        "codebertscore_f1-199": 0.7151336073875427,
        "codebertscore_f3-199": 0.7054193615913391,
        "codebertscore_f1-186": 0.7905130386352539,
        "codebertscore_f3-186": 0.7984437346458435,
        "codebertscore_f1-59": 0.7815665602684021,
        "codebertscore_f3-59": 0.8163480162620544,
        "codebertscore_s_f1-30": 0.7472131252288818,
        "codebertscore_s_f3-30": 0.6970756649971008,
        "codebertscore_s_f1-6": 0.8062896728515625,
        "codebertscore_s_f3-6": 0.8289459943771362,
        "codebertscore_s_f1-84": 0.8319965600967407,
        "codebertscore_s_f3-84": 0.828762948513031,
        "codebertscore_s_f1-75": 0.7698171138763428,
        "codebertscore_s_f3-75": 0.7409943342208862,
        "codebertscore_s_f1-68": 0.7857709527015686,
        "codebertscore_s_f3-68": 0.8167710900306702,
        "codebertscore_s_f1-38": 0.7895483374595642,
        "codebertscore_s_f3-38": 0.8151097893714905,
        "codebertscore_s_f1-28": 0.7374140620231628,
        "codebertscore_s_f3-28": 0.6822248101234436,
        "codebertscore_s_f1-180": 0.8274264931678772,
        "codebertscore_s_f3-180": 0.8291603922843933,
        "codebertscore_s_f1-23": 0.8235968947410583,
        "codebertscore_s_f3-23": 0.8158197999000549,
        "codebertscore_s_f1-195": 0.7865667343139648,
        "codebertscore_s_f3-195": 0.8122963905334473,
        "codebertscore_s_f1-135": 0.8063375949859619,
        "codebertscore_s_f3-135": 0.8120527267456055,
        "codebertscore_s_f1-8": 0.6418106555938721,
        "codebertscore_s_f3-8": 0.5661416053771973,
        "codebertscore_s_f1-7": 0.7638771533966064,
        "codebertscore_s_f3-7": 0.7487495541572571,
        "codebertscore_s_f1-25": 0.8243483304977417,
        "codebertscore_s_f3-25": 0.8163864612579346,
        "codebertscore_s_f1-65": 0.8352406620979309,
        "codebertscore_s_f3-65": 0.8633939027786255,
        "codebertscore_s_f1-70": 0.7639327049255371,
        "codebertscore_s_f3-70": 0.7973417639732361,
        "codebertscore_s_f1-164": 0.7711302042007446,
        "codebertscore_s_f3-164": 0.7908923029899597,
        "codebertscore_s_f1-199": 0.719294548034668,
        "codebertscore_s_f3-199": 0.7066782712936401,
        "codebertscore_s_f1-186": 0.7984171509742737,
        "codebertscore_s_f3-186": 0.8073276877403259,
        "codebertscore_s_f1-59": 0.8108038902282715,
        "codebertscore_s_f3-59": 0.8410761952400208,
        "gpt35_nsnr-30": 3,
        "raw_gpt35_nsnr-30": "3",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-84": 3,
        "raw_gpt35_nsnr-84": "3",
        "gpt35_nsnr-75": 4,
        "raw_gpt35_nsnr-75": "4",
        "gpt35_nsnr-68": 3,
        "raw_gpt35_nsnr-68": "3",
        "gpt35_nsnr-38": 4,
        "raw_gpt35_nsnr-38": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-180": 4,
        "raw_gpt35_nsnr-180": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-195": 4,
        "raw_gpt35_nsnr-195": "4",
        "gpt35_nsnr-135": 4,
        "raw_gpt35_nsnr-135": "4",
        "gpt35_nsnr-8": 0,
        "raw_gpt35_nsnr-8": "2 (The code snippet does not provide any logic to check if the second word or any of its rotations is a substring in the first word. It simply returns false, which is incorrect for some test cases.)",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-25": 4,
        "raw_gpt35_nsnr-25": "4",
        "gpt35_nsnr-65": 4,
        "raw_gpt35_nsnr-65": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-164": 4,
        "raw_gpt35_nsnr-164": "4",
        "gpt35_nsnr-199": 3,
        "raw_gpt35_nsnr-199": "3",
        "gpt35_nsnr-186": 4,
        "raw_gpt35_nsnr-186": "4",
        "gpt35_nsnr-59": 3,
        "raw_gpt35_nsnr-59": "3",
        "gpt35_nswr-30": 3,
        "raw_gpt35_nswr-30": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-84": 3,
        "raw_gpt35_nswr-84": "3",
        "gpt35_nswr-75": 3,
        "raw_gpt35_nswr-75": "3",
        "gpt35_nswr-68": 2,
        "raw_gpt35_nswr-68": "2",
        "gpt35_nswr-38": 3,
        "raw_gpt35_nswr-38": "3",
        "gpt35_nswr-28": 2,
        "raw_gpt35_nswr-28": "2",
        "gpt35_nswr-180": 3,
        "raw_gpt35_nswr-180": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-195": 4,
        "raw_gpt35_nswr-195": "4",
        "gpt35_nswr-135": 3,
        "raw_gpt35_nswr-135": "3",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 2,
        "raw_gpt35_nswr-7": "2",
        "gpt35_nswr-25": 2,
        "raw_gpt35_nswr-25": "2",
        "gpt35_nswr-65": 3,
        "raw_gpt35_nswr-65": "3",
        "gpt35_nswr-70": 3,
        "raw_gpt35_nswr-70": "3",
        "gpt35_nswr-164": 3,
        "raw_gpt35_nswr-164": "3",
        "gpt35_nswr-199": 3,
        "raw_gpt35_nswr-199": "3",
        "gpt35_nswr-186": 3,
        "raw_gpt35_nswr-186": "3",
        "gpt35_nswr-59": 2,
        "raw_gpt35_nswr-59": "2"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    public static int countDistinctCharacters(String string) {\n",
        "snippet": [
            "        Set<Character> set = new HashSet<>();\n        for (char c : string.toLowerCase().toCharArray()) {\n            set.add(c);\n        }\n        return set.size();\n    }\n}"
        ],
        "simplified": "Given a string, find out how many distinct characters (regardless of case) does it consist of",
        "task_id": "16",
        "124": "return (int) Arrays.stream(string.split(\"\")).map(s -> s.toLowerCase()).distinct().count();",
        "grade-124": {
            "execution": 0
        },
        "16": "Set<Character> set = new HashSet<>();\n        for (char c : string.toCharArray()) {\n            set.add(c);\n        }\n        return set.size();",
        "grade-16": {
            "execution": 0
        },
        "4": "return (int) string.toLowerCase().chars().distinct().count();",
        "grade-4": {
            "execution": 1
        },
        "143": "if (string == null)\n            return 0;\n        return (int) string.chars().distinct().count();",
        "grade-143": {
            "execution": 0
        },
        "47": "HashSet<Character> seen = new HashSet<>();\n        for (char c : string.toCharArray()) {\n            seen.add(c);\n        }\n        return seen.size();",
        "grade-47": {
            "execution": 0
        },
        "43": "Set<Character> distinct = new HashSet<>();\n        string.chars().forEach(distinct::add);\n        return distinct.size();",
        "grade-43": {
            "execution": 0
        },
        "34": "// TODO: your code here\n        return -1;",
        "grade-34": {
            "execution": 0
        },
        "19": "return 0;",
        "grade-19": {
            "execution": 0
        },
        "15": "Set<Character> characters = new HashSet<>();\n        for (int i = 0; i < string.length(); i++) {\n            characters.add(string.charAt(i));\n        }\n        return characters.size();",
        "grade-15": {
            "execution": 0
        },
        "130": "Set<Character> distinct = new HashSet<>();\n        for (int i = 0; i < string.length(); i++) {\n            distinct.add(string.charAt(i));\n        }\n        return distinct.size();",
        "grade-130": {
            "execution": 0
        },
        "180": "int[] charArray = new int[26];\n        for (int i = 0; i < string.length(); i++) {\n            int c = string.charAt(i);\n            if (Character.isUpperCase(c)) {\n                charArray[c - 'A'] = 1;\n            } else {\n                charArray[c - 'a'] = 1;\n            }\n        }\n        int count = 0;\n        for (int i = 0; i < 26; i++) {\n            if (charArray[i] == 1) {\n                count++;\n            }\n        }\n        return count;",
        "grade-180": {
            "execution": 0
        },
        "98": "return string.length() - string.toLowerCase().chars().distinct().count();",
        "grade-98": {
            "execution": 0
        },
        "13": "var set = new HashSet<Character>();\n        var chars = string.toCharArray();\n        for (var c : chars) {\n            set.add(c);\n        }\n        return set.size();",
        "grade-13": {
            "execution": 0
        },
        "111": "throw new UnsupportedOperationException(\"Please Implement\");",
        "grade-111": {
            "execution": 0
        },
        "80": "return string.toLowerCase().chars().distinct().toArray().length;",
        "grade-80": {
            "execution": 1
        },
        "5": "return (int) string.chars().distinct().count();",
        "grade-5": {
            "execution": 0
        },
        "32": "return (int) string.chars().map(Character::toLowerCase).distinct().count();",
        "grade-32": {
            "execution": 1
        },
        "35": "Set<Character> charSet = new HashSet<>();\n        for (char c : string.toCharArray()) {\n            charSet.add(c);\n        }\n        return charSet.size();",
        "grade-35": {
            "execution": 0
        },
        "91": "Set<Character> ans = new HashSet<>();\n        for (char ch : string.toCharArray()) {\n            ans.add(ch);\n        }\n        return ans.size();",
        "grade-91": {
            "execution": 0
        },
        "115": "Set<Character> chars = new HashSet<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            chars.add(c);\n        }\n        return chars.size();",
        "grade-115": {
            "execution": 0
        },
        "bleu-124": 0.16744330036295388,
        "bleu-16": 0.8249966414512047,
        "bleu-4": 0.13533063693410052,
        "bleu-143": 0.053549479639697334,
        "bleu-47": 0.6704836392373504,
        "bleu-43": 0.30723330641462776,
        "bleu-34": 0.0012995750452303087,
        "bleu-19": 3.901376607630841e-08,
        "bleu-15": 0.3934978775728061,
        "bleu-130": 0.3934978775728061,
        "bleu-180": 0.04988413029572025,
        "bleu-98": 0.15116841210091037,
        "bleu-13": 0.6348739325387663,
        "bleu-111": 0.0031230671680578326,
        "bleu-80": 0.1496706222788411,
        "bleu-5": 0.02940221874564468,
        "bleu-32": 0.06695766463606914,
        "bleu-35": 0.6734266008065025,
        "bleu-91": 0.5571546494867851,
        "bleu-115": 0.4156871756952695,
        "codebleu-124": 0.39065810530287826,
        "codebleu-16": 0.7524427769951793,
        "codebleu-4": 0.28809080237384466,
        "codebleu-143": 0.28820194980483094,
        "codebleu-47": 0.7196859593203164,
        "codebleu-43": 0.5184329189447102,
        "codebleu-34": 0.05937808708726371,
        "codebleu-19": 0.009661969466162223,
        "codebleu-15": 0.707056660976343,
        "codebleu-130": 0.707056660976343,
        "codebleu-180": 0.5864243019733071,
        "codebleu-98": 0.3221959752485312,
        "codebleu-13": 0.6813667803378858,
        "codebleu-111": 0.05802334125810427,
        "codebleu-80": 0.2655715922997928,
        "codebleu-5": 0.24132088305207966,
        "codebleu-32": 0.3165657580051955,
        "codebleu-35": 0.725894282004411,
        "codebleu-91": 0.6993445339066555,
        "codebleu-115": 0.7210526787040129,
        "chrf-124": 0.28626029077567405,
        "chrf-16": 0.8723494721255461,
        "chrf-4": 0.2909838428138096,
        "chrf-143": 0.17040254952564557,
        "chrf-47": 0.7683621510833276,
        "chrf-43": 0.45261856781348897,
        "chrf-34": 0.0666348055146804,
        "chrf-19": 0.04171253963086974,
        "chrf-15": 0.5037379162321747,
        "chrf-130": 0.5111687045166328,
        "chrf-180": 0.3127006302779095,
        "chrf-98": 0.301175956071624,
        "chrf-13": 0.7123887764400432,
        "chrf-111": 0.08576956339346413,
        "chrf-80": 0.3446081844039096,
        "chrf-5": 0.1548425561330332,
        "chrf-32": 0.30207991804345924,
        "chrf-35": 0.7565764195869114,
        "chrf-91": 0.670069958054848,
        "chrf-115": 0.5362028813018934,
        "rougel-124": 0.42222222222222217,
        "rougel-16": 0.9148936170212766,
        "rougel-4": 0.5066666666666667,
        "rougel-143": 0.379746835443038,
        "rougel-47": 0.8421052631578948,
        "rougel-43": 0.6436781609195402,
        "rougel-34": 0.0967741935483871,
        "rougel-19": 0.07407407407407407,
        "rougel-15": 0.6226415094339622,
        "rougel-130": 0.6226415094339622,
        "rougel-180": 0.27118644067796605,
        "rougel-98": 0.4871794871794872,
        "rougel-13": 0.7010309278350515,
        "rougel-111": 0.12698412698412698,
        "rougel-80": 0.4533333333333333,
        "rougel-5": 0.3768115942028985,
        "rougel-32": 0.40506329113924044,
        "rougel-35": 0.8247422680412372,
        "rougel-91": 0.8085106382978724,
        "rougel-115": 0.6306306306306307,
        "meteor-124": 0.38027108433734946,
        "meteor-16": 0.8526467413202786,
        "meteor-4": 0.33863372816345316,
        "meteor-143": 0.2504166500765043,
        "meteor-47": 0.7742606858846919,
        "meteor-43": 0.5289208421362427,
        "meteor-34": 0.031914893617021274,
        "meteor-19": 0.021645021645021644,
        "meteor-15": 0.5949555613032319,
        "meteor-130": 0.5949555613032319,
        "meteor-180": 0.378383190883191,
        "meteor-98": 0.3365433965081231,
        "meteor-13": 0.7559900990099011,
        "meteor-111": 0.06701167728237793,
        "meteor-80": 0.31945559452214295,
        "meteor-5": 0.21211274167249014,
        "meteor-32": 0.3391583825978271,
        "meteor-35": 0.833412762585074,
        "meteor-91": 0.7230841178223395,
        "meteor-115": 0.68747591522158,
        "ruby-124": 0.27450980392156865,
        "ruby-16": 0.8431372549019608,
        "ruby-4": 0.3529411764705882,
        "ruby-143": 0.27450980392156865,
        "ruby-47": 0.7647058823529411,
        "ruby-43": 0.5490196078431373,
        "ruby-34": 0.05882352941176472,
        "ruby-19": 0.039215686274509776,
        "ruby-15": 0.49090909090909096,
        "ruby-130": 0.49090909090909096,
        "ruby-180": 0.18253968253968256,
        "ruby-98": 0.37254901960784315,
        "ruby-13": 0.5882352941176471,
        "ruby-111": 0.07843137254901966,
        "ruby-80": 0.2941176470588235,
        "ruby-5": 0.23529411764705888,
        "ruby-32": 0.2941176470588235,
        "ruby-35": 0.7254901960784313,
        "ruby-91": 0.7450980392156863,
        "ruby-115": 0.5166666666666666,
        "codebertscore_f1-124": 0.7306812405586243,
        "codebertscore_f3-124": 0.7305992841720581,
        "codebertscore_f1-16": 0.9703592658042908,
        "codebertscore_f3-16": 0.9579243063926697,
        "codebertscore_f1-4": 0.7500881552696228,
        "codebertscore_f3-4": 0.7267966866493225,
        "codebertscore_f1-143": 0.7078251838684082,
        "codebertscore_f3-143": 0.6884137392044067,
        "codebertscore_f1-47": 0.9336031079292297,
        "codebertscore_f3-47": 0.9244675040245056,
        "codebertscore_f1-43": 0.8403069376945496,
        "codebertscore_f3-43": 0.8159860372543335,
        "codebertscore_f1-34": 0.5951533317565918,
        "codebertscore_f3-34": 0.5949246883392334,
        "codebertscore_f1-19": 0.5537148118019104,
        "codebertscore_f3-19": 0.5220224857330322,
        "codebertscore_f1-15": 0.8522112965583801,
        "codebertscore_f3-15": 0.851830244064331,
        "codebertscore_f1-130": 0.8539597392082214,
        "codebertscore_f3-130": 0.853860080242157,
        "codebertscore_f1-180": 0.7313209176063538,
        "codebertscore_f3-180": 0.7645248174667358,
        "codebertscore_f1-98": 0.7469934225082397,
        "codebertscore_f3-98": 0.7277892231941223,
        "codebertscore_f1-13": 0.9002366065979004,
        "codebertscore_f3-13": 0.9057738780975342,
        "codebertscore_f1-111": 0.6084568500518799,
        "codebertscore_f3-111": 0.60207200050354,
        "codebertscore_f1-80": 0.761074423789978,
        "codebertscore_f3-80": 0.7345942258834839,
        "codebertscore_f1-5": 0.6791028380393982,
        "codebertscore_f3-5": 0.6526328325271606,
        "codebertscore_f1-32": 0.7498480081558228,
        "codebertscore_f3-32": 0.735424816608429,
        "codebertscore_f1-35": 0.950469434261322,
        "codebertscore_f3-35": 0.9474992752075195,
        "codebertscore_f1-91": 0.9356545805931091,
        "codebertscore_f3-91": 0.9249181151390076,
        "codebertscore_f1-115": 0.863274097442627,
        "codebertscore_f3-115": 0.8645607829093933,
        "codebertscore_s_f1-124": 0.7485251426696777,
        "codebertscore_s_f3-124": 0.7479791641235352,
        "codebertscore_s_f1-16": 0.972157895565033,
        "codebertscore_s_f3-16": 0.9581946134567261,
        "codebertscore_s_f1-4": 0.7843934297561646,
        "codebertscore_s_f3-4": 0.7616246938705444,
        "codebertscore_s_f1-143": 0.7354961037635803,
        "codebertscore_s_f3-143": 0.7148809432983398,
        "codebertscore_s_f1-47": 0.9379869103431702,
        "codebertscore_s_f3-47": 0.9290308356285095,
        "codebertscore_s_f1-43": 0.8470291495323181,
        "codebertscore_s_f3-43": 0.824327826499939,
        "codebertscore_s_f1-34": 0.6132143139839172,
        "codebertscore_s_f3-34": 0.6160660982131958,
        "codebertscore_s_f1-19": 0.6326099634170532,
        "codebertscore_s_f3-19": 0.5823262929916382,
        "codebertscore_s_f1-15": 0.863956868648529,
        "codebertscore_s_f3-15": 0.8612898588180542,
        "codebertscore_s_f1-130": 0.8626749515533447,
        "codebertscore_s_f3-130": 0.8604735136032104,
        "codebertscore_s_f1-180": 0.7442980408668518,
        "codebertscore_s_f3-180": 0.7744480967521667,
        "codebertscore_s_f1-98": 0.7674619555473328,
        "codebertscore_s_f3-98": 0.7491843700408936,
        "codebertscore_s_f1-13": 0.9125512838363647,
        "codebertscore_s_f3-13": 0.9212242960929871,
        "codebertscore_s_f1-111": 0.5997139811515808,
        "codebertscore_s_f3-111": 0.5903936624526978,
        "codebertscore_s_f1-80": 0.799308180809021,
        "codebertscore_s_f3-80": 0.7701188325881958,
        "codebertscore_s_f1-5": 0.7258354425430298,
        "codebertscore_s_f3-5": 0.6992874145507812,
        "codebertscore_s_f1-32": 0.7818438410758972,
        "codebertscore_s_f3-32": 0.7652332782745361,
        "codebertscore_s_f1-35": 0.9531423449516296,
        "codebertscore_s_f3-35": 0.9492264986038208,
        "codebertscore_s_f1-91": 0.9365377426147461,
        "codebertscore_s_f3-91": 0.9246269464492798,
        "codebertscore_s_f1-115": 0.8691733479499817,
        "codebertscore_s_f3-115": 0.8684073090553284,
        "gpt35_nsnr-124": 4,
        "raw_gpt35_nsnr-124": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-143": 4,
        "raw_gpt35_nsnr-143": "4",
        "gpt35_nsnr-47": 4,
        "raw_gpt35_nsnr-47": "4",
        "gpt35_nsnr-43": 4,
        "raw_gpt35_nsnr-43": "4",
        "gpt35_nsnr-34": 2,
        "raw_gpt35_nsnr-34": "2",
        "gpt35_nsnr-19": 2,
        "raw_gpt35_nsnr-19": "2",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-130": 4,
        "raw_gpt35_nsnr-130": "4",
        "gpt35_nsnr-180": 4,
        "raw_gpt35_nsnr-180": "4",
        "gpt35_nsnr-98": 3,
        "raw_gpt35_nsnr-98": "3",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-111": 0,
        "raw_gpt35_nsnr-111": "0",
        "gpt35_nsnr-80": 4,
        "raw_gpt35_nsnr-80": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-32": 4,
        "raw_gpt35_nsnr-32": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-91": 4,
        "raw_gpt35_nsnr-91": "4",
        "gpt35_nsnr-115": 4,
        "raw_gpt35_nsnr-115": "4",
        "gpt35_nswr-124": 3,
        "raw_gpt35_nswr-124": "3",
        "gpt35_nswr-16": 4,
        "raw_gpt35_nswr-16": "4",
        "gpt35_nswr-4": 4,
        "raw_gpt35_nswr-4": "4",
        "gpt35_nswr-143": 3,
        "raw_gpt35_nswr-143": "3",
        "gpt35_nswr-47": 4,
        "raw_gpt35_nswr-47": "4",
        "gpt35_nswr-43": 3,
        "raw_gpt35_nswr-43": "3",
        "gpt35_nswr-34": 2,
        "raw_gpt35_nswr-34": "2",
        "gpt35_nswr-19": 4,
        "raw_gpt35_nswr-19": "4",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-130": 4,
        "raw_gpt35_nswr-130": "4",
        "gpt35_nswr-180": 3,
        "raw_gpt35_nswr-180": "3",
        "gpt35_nswr-98": 3,
        "raw_gpt35_nswr-98": "3",
        "gpt35_nswr-13": 4,
        "raw_gpt35_nswr-13": "4",
        "gpt35_nswr-111": 0,
        "raw_gpt35_nswr-111": "0",
        "gpt35_nswr-80": 3,
        "raw_gpt35_nswr-80": "3",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-32": 3,
        "raw_gpt35_nswr-32": "3",
        "gpt35_nswr-35": 4,
        "raw_gpt35_nswr-35": "4",
        "gpt35_nswr-91": 4,
        "raw_gpt35_nswr-91": "4",
        "gpt35_nswr-115": 4,
        "raw_gpt35_nswr-115": "4"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that accepts two lists of strings and returns the list that has \n    // total number of chars in the all strings of the list less than the other list.\n    // if the two lists have the same number of chars, return the first list.\n    // Examples\n    // total_match([], []) \u279e []\n    // total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    // total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    // total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    // total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    public static ArrayList<String> totalMatch(ArrayList<String> lst1, ArrayList<String> lst2) {\n",
        "snippet": [
            "        int l1 = 0;\n        for (String st : lst1) {\n            l1 += st.length();\n        }\n\n        int l2 = 0;\n        for (String st : lst2) {\n            l2 += st.length();\n        }\n\n        if (l1 <= l2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n}"
        ],
        "simplified": "Write a function that accepts two lists of strings and returns the list that has total number of chars in the all strings of the list less than the other list. if the two lists have the same number of chars, return the first list.",
        "task_id": "74",
        "179": "int s1 = lst1.stream().reduce(\"\", (a, b) -> a + b).length();\n        int s2 = lst2.stream().reduce(\"\", (a, b) -> a + b).length();\n        if (s1 < s2) {\n            return lst1;\n        } else if (s2 < s1) {\n            return lst2;\n        } else {\n            return lst1;\n        }",
        "grade-179": {
            "execution": 1
        },
        "28": "int total1 = lst1.stream().mapToInt(i -> i.length()).sum();\n        int total2 = lst2.stream().mapToInt(i -> i.length()).sum();\n        return total1 <= total2 ? lst1 : lst2;",
        "grade-28": {
            "execution": 1
        },
        "6": "int sum1 = 0;\n        int sum2 = 0;\n        ArrayList<String> result = new ArrayList<String>();\n        for (String word : lst1) {\n            sum1 += word.length();\n        }\n        for (String word : lst2) {\n            sum2 += word.length();\n        }\n        if (sum1 == sum2) {\n            return lst1;\n        } else if (sum1 < sum2) {\n            return lst1;\n        } else {\n            return lst2;\n        }",
        "grade-6": {
            "execution": 1
        },
        "73": "int s1 = 0;\n        int s2 = 0;\n        for (String str : lst1) s1 += str.length();\n        for (String str : lst2) s2 += str.length();\n        if (s1 < s2) return lst1;\n        else if (s2 < s1) return lst2;\n        else return lst1;",
        "grade-73": {
            "execution": 1
        },
        "65": "if (lst1.size() == 0 && lst2.size() == 0) {\n            return new ArrayList<String>();\n        }\n        int len1 = lst1.stream().mapToInt(String::length).sum();\n        int len2 = lst2.stream().mapToInt(String::length).sum();\n        if (len1 <= len2) {\n            return lst1;\n        } else {\n            return lst2;\n        }",
        "grade-65": {
            "execution": 1
        },
        "60": "int lst1TotalChar = 0;\n        int lst2TotalChar = 0;\n        for (String string : lst1) {\n            lst1TotalChar += string.length();\n        }\n        for (String string : lst2) {\n            lst2TotalChar += string.length();\n        }\n        if (lst1TotalChar > lst2TotalChar) {\n            return lst2;\n        } else {\n            return lst1;\n        }",
        "grade-60": {
            "execution": 1
        },
        "35": "ArrayList<String> answer = new ArrayList<String>();\n        int sum1 = 0;\n        int sum2 = 0;\n        for (String i : lst1) {\n            sum1 += i.length();\n        }\n        for (String i : lst2) {\n            sum2 += i.length();\n        }\n        if (sum1 < sum2) {\n            answer = lst1;\n        } else if (sum1 > sum2) {\n            answer = lst2;\n        } else {\n            answer = lst1;\n        }\n        return answer;",
        "grade-35": {
            "execution": 1
        },
        "26": "int lst1CharCount = lst1.stream().mapToInt(String::length).sum();\n        int lst2CharCount = lst2.stream().mapToInt(String::length).sum();\n        return lst1CharCount > lst2CharCount ? lst2 : lst1;",
        "grade-26": {
            "execution": 1
        },
        "189": "Integer list1count = 0;\n        Integer list2count = 0;\n        for (String word : lst1) {\n            list1count += word.length();\n        }\n        for (String word : lst2) {\n            list2count += word.length();\n        }\n        if (list1count <= list2count) {\n            return lst1;\n        } else {\n            return lst2;\n        }",
        "grade-189": {
            "execution": 1
        },
        "152": "int sum1 = 0;\n        int sum2 = 0;\n        for (String x : lst1) {\n            sum1 += x.length();\n        }\n        for (String x : lst2) {\n            sum2 += x.length();\n        }\n        return sum1 < sum2 ? lst1 : lst2;",
        "grade-152": {
            "execution": 0
        },
        "22": "// get the total number of chars of all strings in the lists\n        int lst1total = lst1.stream().mapToInt(String::length).sum();\n        int lst2total = lst2.stream().mapToInt(String::length).sum();\n        // if lst1 has the smallest amount of chars then return lst1\n        if (lst1total < lst2total) {\n            return lst1;\n        }\n        // if lst2 has the smallest amount of chars then return lst2\n        else if (lst2total < lst1total) {\n            return lst2;\n        }\n        // if the two lists have the same amount of chars then return lst1\n        else {\n            return lst1;\n        }",
        "grade-22": {
            "execution": 1
        },
        "164": "// Write code here\n        int c1 = 0;\n        int c2 = 0;\n        for(String s: lst1) {\n            c1 += s.length();\n        }\n        for(String s: lst2) {\n            c2 += s.length();\n        }\n        if(c1 == c2) return lst1;\n        if(c1 > c2) return lst2;\n        return lst1;",
        "grade-164": {
            "execution": 1
        },
        "116": "int length1 = 0;\n        int length2 = 0;\n        for (String str : lst1) {\n            length1 += str.length();\n        }\n        for (String str : lst2) {\n            length2 += str.length();\n        }\n        if (length1 > length2) {\n            return lst2;\n        } else {\n            return lst1;\n        }",
        "grade-116": {
            "execution": 1
        },
        "8": "int lst1total = lst1.stream().mapToInt(s -> s.length()).sum();\n        int lst2total = lst2.stream().mapToInt(s -> s.length()).sum();\n        return lst1total <= lst2total ? lst1 : lst2;",
        "grade-8": {
            "execution": 1
        },
        "7": "int count1 = 0;\n        int count2 = 0;\n        for (String i : lst1) {\n            count1 += i.length();\n        }\n        for (String i : lst2) {\n            count2 += i.length();\n        }\n        if (count1 < count2) {\n            return lst1;\n        } else {\n            return lst2;\n        }",
        "grade-7": {
            "execution": 0
        },
        "23": "int totalLst1 = 0;\n        int totalLst2 = 0;\n        for (String str: lst1) {\n            totalLst1 += str.length();\n        }\n        for (String str: lst2) {\n            totalLst2 += str.length();\n        }\n        return totalLst1 < totalLst2 ? lst1 : lst2;",
        "grade-23": {
            "execution": 0
        },
        "58": "int lst1Total = lst1.stream().mapToInt(s -> s.length()).sum();\n        int lst2Total = lst2.stream().mapToInt(s -> s.length()).sum();\n        if (lst1Total == lst2Total) {\n            return lst1;\n        } else if (lst1Total < lst2Total) {\n            return lst1;\n        } else {\n            return lst2;\n        }",
        "grade-58": {
            "execution": 1
        },
        "62": "int total_lst1 = 0;\n        int total_lst2 = 0;\n        for (String str : lst1) {\n            total_lst1 += str.length();\n        }\n        for (String str : lst2) {\n            total_lst2 += str.length();\n        }\n        return total_lst1 < total_lst2 ? lst1 : lst2;",
        "grade-62": {
            "execution": 0
        },
        "140": "int sum1 = lst1.stream().reduce(\"\", (a, b) -> a + b).length();\n        int sum2 = lst2.stream().reduce(\"\", (a, b) -> a + b).length();\n        if (sum1 == sum2) return lst1;\n        return sum1 < sum2 ? lst1 : lst2;",
        "grade-140": {
            "execution": 1
        },
        "169": "long sum1 = lst1.stream().mapToInt(x -> x.length()).sum();\n        long sum2 = lst2.stream().mapToInt(x -> x.length()).sum();\n        ArrayList<String> toReturn = sum1 < sum2 ? lst1 : lst2;\n        return toReturn;",
        "grade-169": {
            "execution": 0
        },
        "bleu-179": 0.23172526076391342,
        "bleu-28": 0.12200026323354612,
        "bleu-6": 0.37140456263178023,
        "bleu-73": 0.3183460818788683,
        "bleu-65": 0.21378825800925283,
        "bleu-60": 0.4889228810460437,
        "bleu-35": 0.30288382681554427,
        "bleu-26": 0.060805186448639734,
        "bleu-189": 0.534195923343271,
        "bleu-152": 0.3382245341464435,
        "bleu-22": 0.1099908442681927,
        "bleu-164": 0.3628919766411041,
        "bleu-116": 0.5116824563976173,
        "bleu-8": 0.12200026323354612,
        "bleu-7": 0.5333176151739969,
        "bleu-23": 0.3422037294316636,
        "bleu-58": 0.24048321679283727,
        "bleu-62": 0.3382245341464435,
        "bleu-140": 0.13709949470122956,
        "bleu-169": 0.10595182816792188,
        "codebleu-179": 0.5327835174437254,
        "codebleu-28": 0.41809592733304346,
        "codebleu-6": 0.7603704333020161,
        "codebleu-73": 0.5920548151855685,
        "codebleu-65": 0.5602339181286549,
        "codebleu-60": 0.703449924213815,
        "codebleu-35": 0.6672950227326464,
        "codebleu-26": 0.3765735890831192,
        "codebleu-189": 0.7203352863051632,
        "codebleu-152": 0.5639008509398283,
        "codebleu-22": 0.542495126705653,
        "codebleu-164": 0.6171932515499043,
        "codebleu-116": 0.703449924213815,
        "codebleu-8": 0.41809592733304346,
        "codebleu-7": 0.7055281443344315,
        "codebleu-23": 0.5639008509398283,
        "codebleu-58": 0.527027455918073,
        "codebleu-62": 0.5639008509398283,
        "codebleu-140": 0.44914267319122525,
        "codebleu-169": 0.41611293297328306,
        "chrf-179": 0.4329628400920243,
        "chrf-28": 0.28993513695293166,
        "chrf-6": 0.5784350565503585,
        "chrf-73": 0.5744111069371568,
        "chrf-65": 0.4660410076263142,
        "chrf-60": 0.6286718064134247,
        "chrf-35": 0.5032060608019439,
        "chrf-26": 0.3132356083547154,
        "chrf-189": 0.6141292482152024,
        "chrf-152": 0.4771755229083461,
        "chrf-22": 0.32896497652581674,
        "chrf-164": 0.577404854062508,
        "chrf-116": 0.6998983222773806,
        "chrf-8": 0.3013113363700677,
        "chrf-7": 0.6424446641457924,
        "chrf-23": 0.5075404034224339,
        "chrf-58": 0.41147755328498314,
        "chrf-62": 0.5054652585987683,
        "chrf-140": 0.3300012090050864,
        "chrf-169": 0.30627284491890366,
        "rougel-179": 0.46451612903225803,
        "rougel-28": 0.35384615384615387,
        "rougel-6": 0.620253164556962,
        "rougel-73": 0.6259541984732825,
        "rougel-65": 0.4539877300613497,
        "rougel-60": 0.6814814814814815,
        "rougel-35": 0.588957055214724,
        "rougel-26": 0.36800000000000005,
        "rougel-189": 0.7538461538461539,
        "rougel-152": 0.6280991735537191,
        "rougel-22": 0.3673469387755102,
        "rougel-164": 0.6330935251798561,
        "rougel-116": 0.7131782945736433,
        "rougel-8": 0.35384615384615387,
        "rougel-7": 0.7596899224806201,
        "rougel-23": 0.5984251968503937,
        "rougel-58": 0.4533333333333333,
        "rougel-62": 0.6280991735537191,
        "rougel-140": 0.4137931034482758,
        "rougel-169": 0.3142857142857143,
        "meteor-179": 0.4058199121522694,
        "meteor-28": 0.2995511205721948,
        "meteor-6": 0.6356865768739609,
        "meteor-73": 0.46059686393525545,
        "meteor-65": 0.5624569662720394,
        "meteor-60": 0.7090105045204244,
        "meteor-35": 0.5238451857013255,
        "meteor-26": 0.27265611706653053,
        "meteor-189": 0.7603505332637902,
        "meteor-152": 0.4339246383961346,
        "meteor-22": 0.3478760288645845,
        "meteor-164": 0.4785888305847076,
        "meteor-116": 0.729692974160835,
        "meteor-8": 0.2995511205721948,
        "meteor-7": 0.7643647050982572,
        "meteor-23": 0.42994975621235326,
        "meteor-58": 0.4526594764011799,
        "meteor-62": 0.4339246383961346,
        "meteor-140": 0.37214422173029676,
        "meteor-169": 0.28168272829341323,
        "ruby-179": 0.3707865168539326,
        "ruby-28": 0.21212121212121215,
        "ruby-6": 0.4782608695652174,
        "ruby-73": 0.4545454545454546,
        "ruby-65": 0.35051546391752575,
        "ruby-60": 0.5652173913043479,
        "ruby-35": 0.4329896907216495,
        "ruby-26": 0.19696969696969702,
        "ruby-189": 0.6666666666666667,
        "ruby-152": 0.5,
        "ruby-22": 0.2153846153846154,
        "ruby-164": 0.5205479452054795,
        "ruby-116": 0.6212121212121212,
        "ruby-8": 0.21212121212121215,
        "ruby-7": 0.6666666666666667,
        "ruby-23": 0.43939393939393945,
        "ruby-58": 0.34523809523809523,
        "ruby-62": 0.5,
        "ruby-140": 0.30379746835443033,
        "ruby-169": 0.21621621621621623,
        "codebertscore_f1-179": 0.8245335817337036,
        "codebertscore_f3-179": 0.8357391953468323,
        "codebertscore_f1-28": 0.78014075756073,
        "codebertscore_f3-28": 0.7845555543899536,
        "codebertscore_f1-6": 0.8766555190086365,
        "codebertscore_f3-6": 0.890803873538971,
        "codebertscore_f1-73": 0.8853356838226318,
        "codebertscore_f3-73": 0.8893283009529114,
        "codebertscore_f1-65": 0.8249074220657349,
        "codebertscore_f3-65": 0.8370972871780396,
        "codebertscore_f1-60": 0.8945549130439758,
        "codebertscore_f3-60": 0.9148216247558594,
        "codebertscore_f1-35": 0.8624070882797241,
        "codebertscore_f3-35": 0.8795792460441589,
        "codebertscore_f1-26": 0.7886831760406494,
        "codebertscore_f3-26": 0.7939748764038086,
        "codebertscore_f1-189": 0.9040190577507019,
        "codebertscore_f3-189": 0.9119132161140442,
        "codebertscore_f1-152": 0.892798125743866,
        "codebertscore_f3-152": 0.8882037401199341,
        "codebertscore_f1-22": 0.7938454151153564,
        "codebertscore_f3-22": 0.8276758193969727,
        "codebertscore_f1-164": 0.8932847380638123,
        "codebertscore_f3-164": 0.9044276475906372,
        "codebertscore_f1-116": 0.9310413002967834,
        "codebertscore_f3-116": 0.9312160015106201,
        "codebertscore_f1-8": 0.7977973818778992,
        "codebertscore_f3-8": 0.80552738904953,
        "codebertscore_f1-7": 0.9285080432891846,
        "codebertscore_f3-7": 0.9286766648292542,
        "codebertscore_f1-23": 0.8879887461662292,
        "codebertscore_f3-23": 0.8940457105636597,
        "codebertscore_f1-58": 0.8331961631774902,
        "codebertscore_f3-58": 0.8477294445037842,
        "codebertscore_f1-62": 0.8892931938171387,
        "codebertscore_f3-62": 0.8958039879798889,
        "codebertscore_f1-140": 0.8022180795669556,
        "codebertscore_f3-140": 0.8095459342002869,
        "codebertscore_f1-169": 0.779025673866272,
        "codebertscore_f3-169": 0.7903927564620972,
        "codebertscore_s_f1-179": 0.9360045194625854,
        "codebertscore_s_f3-179": 0.9453524351119995,
        "codebertscore_s_f1-28": 0.9269415140151978,
        "codebertscore_s_f3-28": 0.9290683269500732,
        "codebertscore_s_f1-6": 0.9549217820167542,
        "codebertscore_s_f3-6": 0.962456464767456,
        "codebertscore_s_f1-73": 0.9596785306930542,
        "codebertscore_s_f3-73": 0.9633742570877075,
        "codebertscore_s_f1-65": 0.9403993487358093,
        "codebertscore_s_f3-65": 0.9474221467971802,
        "codebertscore_s_f1-60": 0.9593987464904785,
        "codebertscore_s_f3-60": 0.9706467986106873,
        "codebertscore_s_f1-35": 0.9488664865493774,
        "codebertscore_s_f3-35": 0.9588613510131836,
        "codebertscore_s_f1-26": 0.9211810231208801,
        "codebertscore_s_f3-26": 0.9263847470283508,
        "codebertscore_s_f1-189": 0.9666563272476196,
        "codebertscore_s_f3-189": 0.9706181883811951,
        "codebertscore_s_f1-152": 0.9657824635505676,
        "codebertscore_s_f3-152": 0.9636250138282776,
        "codebertscore_s_f1-22": 0.8962717056274414,
        "codebertscore_s_f3-22": 0.932776689529419,
        "codebertscore_s_f1-164": 0.9634963870048523,
        "codebertscore_s_f3-164": 0.9695587754249573,
        "codebertscore_s_f1-116": 0.978726327419281,
        "codebertscore_s_f3-116": 0.9787313938140869,
        "codebertscore_s_f1-8": 0.9262871146202087,
        "codebertscore_s_f3-8": 0.9325764179229736,
        "codebertscore_s_f1-7": 0.9781764149665833,
        "codebertscore_s_f3-7": 0.9783017039299011,
        "codebertscore_s_f1-23": 0.9598884582519531,
        "codebertscore_s_f3-23": 0.9631014466285706,
        "codebertscore_s_f1-58": 0.9343127608299255,
        "codebertscore_s_f3-58": 0.9468179941177368,
        "codebertscore_s_f1-62": 0.9597381353378296,
        "codebertscore_s_f3-62": 0.962944746017456,
        "codebertscore_s_f1-140": 0.9257607460021973,
        "codebertscore_s_f3-140": 0.9336883425712585,
        "codebertscore_s_f1-169": 0.9208081364631653,
        "codebertscore_s_f3-169": 0.926608145236969,
        "gpt35_nsnr-179": 4,
        "raw_gpt35_nsnr-179": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-73": 4,
        "raw_gpt35_nsnr-73": "4",
        "gpt35_nsnr-65": 4,
        "raw_gpt35_nsnr-65": "4",
        "gpt35_nsnr-60": 4,
        "raw_gpt35_nsnr-60": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-189": 4,
        "raw_gpt35_nsnr-189": "4",
        "gpt35_nsnr-152": 4,
        "raw_gpt35_nsnr-152": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-164": 4,
        "raw_gpt35_nsnr-164": "4",
        "gpt35_nsnr-116": 4,
        "raw_gpt35_nsnr-116": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-58": 4,
        "raw_gpt35_nsnr-58": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nsnr-140": 4,
        "raw_gpt35_nsnr-140": "4",
        "gpt35_nsnr-169": 4,
        "raw_gpt35_nsnr-169": "4",
        "gpt35_nswr-179": 4,
        "raw_gpt35_nswr-179": "4",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-73": 4,
        "raw_gpt35_nswr-73": "4",
        "gpt35_nswr-65": 4,
        "raw_gpt35_nswr-65": "4",
        "gpt35_nswr-60": 3,
        "raw_gpt35_nswr-60": "3",
        "gpt35_nswr-35": 4,
        "raw_gpt35_nswr-35": "4",
        "gpt35_nswr-26": 4,
        "raw_gpt35_nswr-26": "4",
        "gpt35_nswr-189": 4,
        "raw_gpt35_nswr-189": "4",
        "gpt35_nswr-152": 4,
        "raw_gpt35_nswr-152": "4",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-164": 4,
        "raw_gpt35_nswr-164": "4",
        "gpt35_nswr-116": 3,
        "raw_gpt35_nswr-116": "3",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-58": 4,
        "raw_gpt35_nswr-58": "4",
        "gpt35_nswr-62": 4,
        "raw_gpt35_nswr-62": "4",
        "gpt35_nswr-140": 3,
        "raw_gpt35_nswr-140": "3",
        "gpt35_nswr-169": 3,
        "raw_gpt35_nswr-169": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given two intervals,\n    // where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    // The given intervals are closed which means that the interval (start, end)\n    // includes both start and end.\n    // For each given interval, it is assumed that its start is less or equal its end.\n    // Your task is to determine whether the length of intersection of these two \n    // intervals is a prime number.\n    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    // which its length is 1, which not a prime number.\n    // If the length of the intersection is a prime number, return \"YES\",\n    // otherwise, return \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    // [input/output] samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n    // intersection((-1, 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    public static String intersection(Pair<Integer, Integer> interval1, Pair<Integer, Integer> interval2) {\n",
        "snippet": [
            "        int l = Math.max(interval1.get(0), interval2.get(0));\n        int r = Math.min(interval1.get(1), interval2.get(1));\n        int length = r - l;\n        if (length <= 0) {\n            return \"NO\";\n        }\n        if (length == 1) {\n            return \"NO\";\n        }\n        if (length == 2) {\n            return \"YES\";\n        }\n        for (int i = 2; i < length; i++) {\n            if (length % i == 0) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";\n    }\n}"
        ],
        "simplified": "You are given two intervals, where each interval is a pair of integers. For example, interval = (start, end) = (1, 2). The given intervals are closed which means that the interval (start, end) includes both start and end. For each given interval, it is assumed that its start is less or equal its end. Your task is to determine whether the length of intersection of these two intervals is a prime number. Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3) which its length is 1, which not a prime number. If the length of the intersection is a prime number, return \"YES\", otherwise, return \"NO\". If the two intervals don't intersect, return \"NO\".",
        "task_id": "127",
        "169": "int minStart = Math.max(interval1.getValue0(), interval2.getValue0());\n        int maxEnd = Math.min(interval1.getValue1(), interval2.getValue1());\n        int diff = maxEnd - minStart;\n        if (diff < 0) {\n            return \"NO\";\n        }\n        return isPrime(diff) ? \"YES\" : \"NO\";",
        "grade-169": {
            "execution": 0
        },
        "28": "int start = Math.max(interval1.getValue0(), interval2.getValue0());\n        int end = Math.min(interval1.getValue1(), interval2.getValue1());\n        int distance = end - start;\n        return isPrime(distance) ? \"YES\" : \"NO\";",
        "grade-28": {
            "execution": 0
        },
        "6": "int s1 = interval1.getValue0();\n        int e1 = interval1.getValue1();\n        int s2 = interval2.getValue0();\n        int e2 = interval2.getValue1();\n        int a = Math.max(s1, s2);\n        int b = Math.min(e1, e2);\n        if (a <= b) {\n            return isPrime(b - a + 1) ? \"YES\" : \"NO\";\n        }\n        return \"NO\";",
        "grade-6": {
            "execution": 0
        },
        "197": "int start = Math.max(interval1.getValue0(), interval2.getValue0());\n        int end = Math.min(interval1.getValue1(), interval2.getValue1());\n        int intersectionLen = end - start + 1;\n        if (intersectionLen < 1) {\n            return \"NO\";\n        }\n        for (int i = 2; i < intersectionLen; i++) {\n            if (intersectionLen % i == 0) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";",
        "grade-197": {
            "execution": 0
        },
        "70": "Integer intersectStart = Math.max(interval1.getValue0(), interval2.getValue0());\n        Integer intersectEnd = Math.min(interval1.getValue1(), interval2.getValue1());\n        if (intersectStart <= intersectEnd) {\n            Integer intersectSize = intersectEnd - intersectStart + 1;\n            boolean isPrime = checkPrime(intersectSize);\n            return isPrime ? \"YES\" : \"NO\";\n        }\n        return \"NO\";",
        "grade-70": {
            "execution": 0
        },
        "62": "return Integer.toString(intersectionInInterval(interval1, interval2).size());",
        "grade-62": {
            "execution": 0
        },
        "57": "int start = Math.max(interval1.getValue0(), interval2.getValue0());\n        int end = Math.min(interval1.getValue1(), interval2.getValue1());\n        if (start > end) {\n            return \"NO\";\n        }\n        if (start <= 2 && end >= 2) {\n            return \"YES\";\n        }\n        for (int i = 2; i <= Math.sqrt(end); i++) {\n            if (start % i == 0 || end % i == 0) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";",
        "grade-57": {
            "execution": 0
        },
        "35": "int low = Math.max(interval1.getValue0(), interval2.getValue0());\n        int high = Math.min(interval1.getValue1(), interval2.getValue1());\n        if (low > high) {\n            return \"NO\";\n        }\n        int length = high - low + 1;\n        for (int i = 2; i < length; i++) {\n            if (length % i == 0) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";",
        "grade-35": {
            "execution": 0
        },
        "196": "boolean a = interval1.getValue0() > interval2.getValue0();\n        boolean b = interval1.getValue1() < interval2.getValue1();\n        int intersectionStart = (a) ? interval1.getValue0() : interval2.getValue0();\n        int intersectionEnd = (b) ? interval1.getValue1() : interval2.getValue1();\n        int intersectionSize = intersectionEnd - intersectionStart;\n        if (intersectionSize < 0) {\n            return \"NO\";\n        }\n        return (isPrime(intersectionSize)) ? \"YES\" : \"NO\";",
        "grade-196": {
            "execution": 0
        },
        "26": "int min = Math.max(interval1.getValue0(), interval2.getValue0());\n        int max = Math.min(interval1.getValue1(), interval2.getValue1());\n        if (min > max) {\n            return \"NO\";\n        }\n        return isPrime(max - min + 1) ? \"YES\" : \"NO\";",
        "grade-26": {
            "execution": 0
        },
        "181": "int min = Math.max(interval1.getValue0(), interval2.getValue0());\n      int max = Math.min(interval1.getValue1(), interval2.getValue1());\n      int distance = max - min;\n      if (distance > 0) {\n        if (isPrime(distance)) {\n          return \"YES\";\n        }\n      }\n      return \"NO\";",
        "grade-181": {
            "execution": 0
        },
        "144": "if (interval1.getValue0() >= interval2.getValue1() || interval2.getValue0() >= interval1.getValue1()) {\n            return \"NO\";\n        }\n        int start = Math.max(interval1.getValue0(), interval2.getValue0());\n        int end = Math.min(interval1.getValue1(), interval2.getValue1());\n        int len = end - start + 1;\n        return isPrime(len) ? \"YES\" : \"NO\";",
        "grade-144": {
            "execution": 0
        },
        "22": "int start;\n        int end;\n        if (interval1.getValue0() <= interval2.getValue0()) {\n            start = interval2.getValue0();\n        } else {\n            start = interval1.getValue0();\n        }\n        if (interval1.getValue1() >= interval2.getValue1()) {\n            end = interval2.getValue1();\n        } else {\n            end = interval1.getValue1();\n        }\n        int length = end - start;\n        if (length <= 0) {\n            return \"NO\";\n        }\n        if (length == 1) {\n            return \"NO\";\n        }\n        if (length == 2) {\n            return \"YES\";\n        }\n        if (length % 2 == 0) {\n            return \"NO\";\n        }\n        for (int i = 3; i <= Math.sqrt(length); i += 2) {\n            if (length % i == 0) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";",
        "grade-22": {
            "execution": 0
        },
        "157": "int start = Math.max(interval1.getValue0(), interval2.getValue0());\n        int end = Math.min(interval1.getValue1(), interval2.getValue1());\n        if (start <= end) {\n            int len = end - start + 1;\n            if (isPrime(len)) {\n                return \"YES\";\n            }\n        }\n        return \"NO\";",
        "grade-157": {
            "execution": 0
        },
        "111": "int l = 0;\n        int r = 0;\n        int tmp = interval1.getValue0();\n        interval1.setValue0(Math.min(interval1.getValue0(), interval1.getValue1()));\n        interval1.setValue1(Math.max(tmp, interval1.getValue1()));\n        tmp = interval2.getValue0();\n        interval2.setValue0(Math.min(interval2.getValue0(), interval2.getValue1()));\n        interval2.setValue1(Math.max(tmp, interval2.getValue1()));\n        if (interval1.getValue0() < interval2.getValue0()) {\n            l = interval2.getValue0();\n        } else {\n            l = interval1.getValue0();\n        }\n        if (interval1.getValue1() < interval2.getValue1()) {\n            r = interval1.getValue1();\n        } else {\n            r = interval2.getValue1();\n        }\n        if (l <= r) {\n            int cnt = r - l + 1;\n            for (int i = 2; i * i <= cnt; i++) {\n                if (cnt % i == 0) {\n                    return \"NO\";\n                }\n            }\n            return \"YES\";\n        }\n        return \"NO\";",
        "grade-111": {
            "execution": 0
        },
        "8": "// your code here\n        int s1 = interval1.getValue0();\n        int e1 = interval1.getValue1();\n        int s2 = interval2.getValue0();\n        int e2 = interval2.getValue1();\n        int s = Math.max(s1, s2);\n        int e = Math.min(e1, e2);\n        if (s > e) return \"NO\";\n        int c = e - s + 1;\n        // check if is prime\n        if (c < 2) return \"NO\";\n        if (c == 2) return \"YES\";\n        for (int i = 2; i < c; i++) {\n            if (c % i == 0) return \"NO\";\n        }\n        return \"YES\";",
        "grade-8": {
            "execution": 0
        },
        "7": "Integer s1 = interval1.getValue0();\n        Integer e1 = interval1.getValue1();\n        Integer s2 = interval2.getValue0();\n        Integer e2 = interval2.getValue1();\n        Integer maxStart = s1 > s2 ? s1 : s2;\n        Integer minEnd = e1 < e2 ? e1 : e2;\n        Integer len = minEnd - maxStart;\n        if (len < 0) {\n            return \"NO\";\n        }\n        for (int i = 2; i <= Math.sqrt(len); i++) {\n            if (len % i == 0) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";",
        "grade-7": {
            "execution": 0
        },
        "23": "// your code here\n        return \"\";",
        "grade-23": {
            "execution": 0
        },
        "55": "int start = Math.max(interval1.getValue0(), interval2.getValue0());\n        int end = Math.min(interval1.getValue1(), interval2.getValue1());\n        if (start > end) {\n            return \"NO\";\n        }\n        if (isPrime(end - start + 1)) {\n            return \"YES\";\n        }\n        return \"NO\";",
        "grade-55": {
            "execution": 0
        },
        "59": "// write your code here\n        if (interval1.getValue0() > interval2.getValue1() || interval2.getValue0() > interval1.getValue1()) {\n            return \"NO\";\n        } else {\n            int start = Math.max(interval1.getValue0(), interval2.getValue0());\n            int end = Math.min(interval1.getValue1(), interval2.getValue1());\n            if (start > end) {\n                return \"NO\";\n            } else {\n                return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n            }\n        }",
        "grade-59": {
            "execution": 0
        },
        "bleu-169": 0.25687905037117753,
        "bleu-28": 0.1641940435292452,
        "bleu-6": 0.18971612664040735,
        "bleu-197": 0.5050512217433817,
        "bleu-70": 0.24813433639545288,
        "bleu-62": 0.00043013349061529364,
        "bleu-57": 0.5893261158574418,
        "bleu-35": 0.5202737457489397,
        "bleu-196": 0.1672826595494869,
        "bleu-26": 0.22922743748186405,
        "bleu-181": 0.27410920604591393,
        "bleu-144": 0.2806198431227534,
        "bleu-22": 0.45602084013237876,
        "bleu-157": 0.2678681745019053,
        "bleu-111": 0.2703467703303121,
        "bleu-8": 0.3803640677906684,
        "bleu-7": 0.4060310693803415,
        "bleu-23": 1.4003664310740857e-07,
        "bleu-55": 0.29832161868622536,
        "bleu-59": 0.35135981512097314,
        "codebleu-169": 0.3517490694933549,
        "codebleu-28": 0.28607516514772385,
        "codebleu-6": 0.4130171928368618,
        "codebleu-197": 0.5551432778865493,
        "codebleu-70": 0.37455671909831456,
        "codebleu-62": 0.06454131604587039,
        "codebleu-57": 0.59158109524583,
        "codebleu-35": 0.5593965176625789,
        "codebleu-196": 0.418888131681296,
        "codebleu-26": 0.321507348592801,
        "codebleu-181": 0.37309309977228433,
        "codebleu-144": 0.4112197431101439,
        "codebleu-22": 0.6518430539426109,
        "codebleu-157": 0.37477317008258826,
        "codebleu-111": 0.6286387602423423,
        "codebleu-8": 0.60087971972284,
        "codebleu-7": 0.5423019827848917,
        "codebleu-23": 0.03225814520573196,
        "codebleu-55": 0.3677809086691954,
        "codebleu-59": 0.48704419308261715,
        "chrf-169": 0.430847136562156,
        "chrf-28": 0.37555757898196956,
        "chrf-6": 0.3910662635768325,
        "chrf-197": 0.5616405837103778,
        "chrf-70": 0.39901386759903235,
        "chrf-62": 0.14886666226857043,
        "chrf-57": 0.6218790515137872,
        "chrf-35": 0.6482858842400122,
        "chrf-196": 0.3360002259048913,
        "chrf-26": 0.41537086610349694,
        "chrf-181": 0.44934145047992563,
        "chrf-144": 0.43949773747113163,
        "chrf-22": 0.6715545319031111,
        "chrf-157": 0.4616174146783452,
        "chrf-111": 0.45677454256329075,
        "chrf-8": 0.5359006937488737,
        "chrf-7": 0.49911491716127643,
        "chrf-23": 0.03326023988368899,
        "chrf-55": 0.48048493149551486,
        "chrf-59": 0.4616076055360852,
        "rougel-169": 0.5925925925925926,
        "rougel-28": 0.5226130653266331,
        "rougel-6": 0.4347826086956521,
        "rougel-197": 0.7468879668049793,
        "rougel-70": 0.5217391304347826,
        "rougel-62": 0.14379084967320263,
        "rougel-57": 0.7404580152671756,
        "rougel-35": 0.7594936708860758,
        "rougel-196": 0.4426877470355731,
        "rougel-26": 0.5550239234449761,
        "rougel-181": 0.5943396226415095,
        "rougel-144": 0.4315352697095436,
        "rougel-22": 0.6808510638297872,
        "rougel-157": 0.586046511627907,
        "rougel-111": 0.4771573604060913,
        "rougel-8": 0.6202090592334495,
        "rougel-7": 0.5551330798479087,
        "rougel-23": 0.056338028169014086,
        "rougel-55": 0.6074766355140186,
        "rougel-59": 0.471042471042471,
        "meteor-169": 0.38780117034912104,
        "meteor-28": 0.3375589139224256,
        "meteor-6": 0.3361516974427349,
        "meteor-197": 0.665429934471238,
        "meteor-70": 0.40736672672233243,
        "meteor-62": 0.06481161844286804,
        "meteor-57": 0.7103429405950414,
        "meteor-35": 0.6802137260998882,
        "meteor-196": 0.32452601073930704,
        "meteor-26": 0.3764392791555033,
        "meteor-181": 0.43040010387490485,
        "meteor-144": 0.4287588394588714,
        "meteor-22": 0.7476536950626146,
        "meteor-157": 0.44937383498678407,
        "meteor-111": 0.6277863511659809,
        "meteor-8": 0.7200684678016285,
        "meteor-7": 0.5821990391861341,
        "meteor-23": 0.03109452736318408,
        "meteor-55": 0.4497254577058661,
        "meteor-59": 0.4727587771742784,
        "ruby-169": 0.42105263157894735,
        "ruby-28": 0.3609022556390977,
        "ruby-6": 0.3007518796992481,
        "ruby-197": 0.6165413533834587,
        "ruby-70": 0.3609022556390977,
        "ruby-62": 0.08270676691729328,
        "ruby-57": 0.5939849624060151,
        "ruby-35": 0.6390977443609023,
        "ruby-196": 0.23308270676691734,
        "ruby-26": 0.3984962406015038,
        "ruby-181": 0.443609022556391,
        "ruby-144": 0.21804511278195493,
        "ruby-22": 0.5510204081632653,
        "ruby-157": 0.43609022556390975,
        "ruby-111": 0.3486590038314177,
        "ruby-8": 0.461038961038961,
        "ruby-7": 0.40601503759398494,
        "ruby-23": 0.03007518796992481,
        "ruby-55": 0.45112781954887216,
        "ruby-59": 0.21804511278195493,
        "codebertscore_f1-169": 0.8654198050498962,
        "codebertscore_f3-169": 0.8506489992141724,
        "codebertscore_f1-28": 0.8496578335762024,
        "codebertscore_f3-28": 0.8172121644020081,
        "codebertscore_f1-6": 0.8106951117515564,
        "codebertscore_f3-6": 0.8078396916389465,
        "codebertscore_f1-197": 0.9123786687850952,
        "codebertscore_f3-197": 0.9205688238143921,
        "codebertscore_f1-70": 0.8308485150337219,
        "codebertscore_f3-70": 0.829902708530426,
        "codebertscore_f1-62": 0.6914533376693726,
        "codebertscore_f3-62": 0.6524288058280945,
        "codebertscore_f1-57": 0.8919554352760315,
        "codebertscore_f3-57": 0.8981199860572815,
        "codebertscore_f1-35": 0.9119344353675842,
        "codebertscore_f3-35": 0.9160909652709961,
        "codebertscore_f1-196": 0.8138087391853333,
        "codebertscore_f3-196": 0.8112837076187134,
        "codebertscore_f1-26": 0.8585939407348633,
        "codebertscore_f3-26": 0.8392413258552551,
        "codebertscore_f1-181": 0.8701502084732056,
        "codebertscore_f3-181": 0.8516844511032104,
        "codebertscore_f1-144": 0.8126235008239746,
        "codebertscore_f3-144": 0.802517294883728,
        "codebertscore_f1-22": 0.8429744243621826,
        "codebertscore_f3-22": 0.8560981154441833,
        "codebertscore_f1-157": 0.8700328469276428,
        "codebertscore_f3-157": 0.8572371602058411,
        "codebertscore_f1-111": 0.7895652651786804,
        "codebertscore_f3-111": 0.8122203946113586,
        "codebertscore_f1-8": 0.8475623726844788,
        "codebertscore_f3-8": 0.8679585456848145,
        "codebertscore_f1-7": 0.8471611738204956,
        "codebertscore_f3-7": 0.8653260469436646,
        "codebertscore_f1-23": 0.5559032559394836,
        "codebertscore_f3-23": 0.5249501466751099,
        "codebertscore_f1-55": 0.8737200498580933,
        "codebertscore_f3-55": 0.8583951592445374,
        "codebertscore_f1-59": 0.8158831000328064,
        "codebertscore_f3-59": 0.8228886127471924,
        "codebertscore_s_f1-169": 0.8805175423622131,
        "codebertscore_s_f3-169": 0.8670128583908081,
        "codebertscore_s_f1-28": 0.8674907684326172,
        "codebertscore_s_f3-28": 0.8364900946617126,
        "codebertscore_s_f1-6": 0.8207552433013916,
        "codebertscore_s_f3-6": 0.8165971636772156,
        "codebertscore_s_f1-197": 0.9187869429588318,
        "codebertscore_s_f3-197": 0.9256300330162048,
        "codebertscore_s_f1-70": 0.8452814221382141,
        "codebertscore_s_f3-70": 0.8445847630500793,
        "codebertscore_s_f1-62": 0.7129847407341003,
        "codebertscore_s_f3-62": 0.6731237173080444,
        "codebertscore_s_f1-57": 0.8999828696250916,
        "codebertscore_s_f3-57": 0.9052476286888123,
        "codebertscore_s_f1-35": 0.9206609129905701,
        "codebertscore_s_f3-35": 0.9240907430648804,
        "codebertscore_s_f1-196": 0.8275061249732971,
        "codebertscore_s_f3-196": 0.8203070759773254,
        "codebertscore_s_f1-26": 0.8739570379257202,
        "codebertscore_s_f3-26": 0.8548677563667297,
        "codebertscore_s_f1-181": 0.888737142086029,
        "codebertscore_s_f3-181": 0.8725616931915283,
        "codebertscore_s_f1-144": 0.8313278555870056,
        "codebertscore_s_f3-144": 0.8205813765525818,
        "codebertscore_s_f1-22": 0.8778874278068542,
        "codebertscore_s_f3-22": 0.8918913006782532,
        "codebertscore_s_f1-157": 0.8816549777984619,
        "codebertscore_s_f3-157": 0.8687233328819275,
        "codebertscore_s_f1-111": 0.8208792805671692,
        "codebertscore_s_f3-111": 0.8412249684333801,
        "codebertscore_s_f1-8": 0.8604666590690613,
        "codebertscore_s_f3-8": 0.8815631866455078,
        "codebertscore_s_f1-7": 0.8532992005348206,
        "codebertscore_s_f3-7": 0.8703584671020508,
        "codebertscore_s_f1-23": 0.5702793002128601,
        "codebertscore_s_f3-23": 0.5455838441848755,
        "codebertscore_s_f1-55": 0.8848448991775513,
        "codebertscore_s_f3-55": 0.8687623739242554,
        "codebertscore_s_f1-59": 0.8276152610778809,
        "codebertscore_s_f3-59": 0.8342176675796509,
        "gpt35_nsnr-169": 4,
        "raw_gpt35_nsnr-169": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-197": 4,
        "raw_gpt35_nsnr-197": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-62": 3,
        "raw_gpt35_nsnr-62": "3",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-196": 4,
        "raw_gpt35_nsnr-196": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-181": 4,
        "raw_gpt35_nsnr-181": "4",
        "gpt35_nsnr-144": 4,
        "raw_gpt35_nsnr-144": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-157": 4,
        "raw_gpt35_nsnr-157": "4",
        "gpt35_nsnr-111": 4,
        "raw_gpt35_nsnr-111": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 0,
        "raw_gpt35_nsnr-23": "3 - The code correctly determines whether the two intervals intersect and calculates the length of the intersection. However, it does not check if the length of the intersection is a prime number or not, and always returns an empty string.",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nswr-169": 3,
        "raw_gpt35_nswr-169": "3",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-197": 3,
        "raw_gpt35_nswr-197": "3",
        "gpt35_nswr-70": 3,
        "raw_gpt35_nswr-70": "3",
        "gpt35_nswr-62": 2,
        "raw_gpt35_nswr-62": "2",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-35": 4,
        "raw_gpt35_nswr-35": "4",
        "gpt35_nswr-196": 3,
        "raw_gpt35_nswr-196": "3",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-181": 3,
        "raw_gpt35_nswr-181": "3",
        "gpt35_nswr-144": 4,
        "raw_gpt35_nswr-144": "4",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-157": 3,
        "raw_gpt35_nswr-157": "3",
        "gpt35_nswr-111": 3,
        "raw_gpt35_nswr-111": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 2,
        "raw_gpt35_nswr-23": "2",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-59": 4,
        "raw_gpt35_nswr-59": "4"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n    // 14\n    public static int fib4(int n) {\n",
        "snippet": [
            "        List<Integer> results = new ArrayList<>();\n        results.add(0);\n        results.add(0);\n        results.add(2);\n        results.add(0);\n        if (n < 4) {\n            return results.get(n);\n        }\n\n        for (int i = 4; i <= n; i++) {\n            results.add(results.get(0) + results.get(1) + results.get(2) + results.get(3));\n            results.remove(0);\n        }\n        return results.get(3);\n    }\n}"
        ],
        "simplified": "The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). Please write a function to efficiently compute the n-th element of the fib4 number sequence. Do not use recursion.",
        "task_id": "46",
        "36": "int f_one = 0;\n        int f_two = 0;\n        int f_three = 2;\n        int f_four = 0;\n        if (n == 0) return f_one;\n        if (n == 1) return f_two;\n        if (n == 2) return f_three;\n        if (n == 3) return f_four;\n        for (int i = 4; i <= n; i++) {\n            int temp = f_one + f_two + f_three + f_four;\n            f_one = f_two;\n            f_two = f_three;\n            f_three = f_four;\n            f_four = temp;\n        }\n        return f_four;",
        "grade-36": {
            "execution": 1
        },
        "6": "// TODO: Implement this function.\n        if (n == 0 || n == 1) {\n            return 0;\n        } else if (n == 2) {\n            return 2;\n        } else if (n == 3) {\n            return 0;\n        } else {\n            int a = 0;\n            int b = 0;\n            int c = 2;\n            int d = 0;\n            int e = 0;\n            for (int i = 4; i <= n; i++) {\n                e = a + b + c + d;\n                a = b;\n                b = c;\n                c = d;\n                d = e;\n            }\n            return e;\n        }",
        "grade-6": {
            "execution": 1
        },
        "90": "// Use Java 8 streams to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n        int a = 0;\n        int b = 0;\n        int c = 2;\n        int d = 0;\n        if (n == 0){\n            return a;\n        }\n        if (n == 1){\n            return b;\n        }\n        if (n == 2){\n            return c;\n        }\n        if (n == 3){\n            return d;\n        }\n        for (int i = 3; i < n; i++){\n            int temp = a;\n            a = b;\n            b = c;\n            c = d;\n            d = temp + b + c + d;\n        }\n        return d;",
        "grade-90": {
            "execution": 0
        },
        "80": "// TODO:\n        return -1;",
        "grade-80": {
            "execution": 0
        },
        "74": "int f1 = 0;\n        int f2 = 0;\n        int f3 = 2;\n        int f4 = 0;\n        int f5 = 4;\n        if (n == 0) return f1;\n        if (n == 1) return f2;\n        if (n == 2) return f3;\n        if (n == 3) return f4;\n        if (n == 4) return f5;\n        for (int i = 4; i < n; i++) {\n            int temp = f1 + f2 + f3 + f4;\n            f1 = f2;\n            f2 = f3;\n            f3 = f4;\n            f4 = temp;\n        }\n        return f1 + f2 + f3 + f4;",
        "grade-74": {
            "execution": 1
        },
        "46": "if (n < 4) {\n            return n*n - n/2;\n        }\n        int n1 = 0;\n        int n2 = 0;\n        int n3 = 2;\n        int n4 = 0;\n        int result = 0;\n        for (int i = 4; i <= n; i++) {\n            result = n1 + n2 + n3 + n4;\n            n1 = n2;\n            n2 = n3;\n            n3 = n4;\n            n4 = result;\n        }\n        return result;",
        "grade-46": {
            "execution": 1
        },
        "34": "if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 0;\n        } else if (n == 2) {\n            return 2;\n        } else if (n == 3) {\n            return 0;\n        } else {\n            int a = 0;\n            int b = 0;\n            int c = 2;\n            int d = 0;\n            for (int i = 4; i <= n; i++) {\n                int e = a + b + c + d;\n                a = b;\n                b = c;\n                c = d;\n                d = e;\n            }\n            return a + b + c + d;\n        }",
        "grade-34": {
            "execution": 0
        },
        "174": "// write your solution here\n        return -1;",
        "grade-174": {
            "execution": 0
        },
        "28": "if (n < 0) {\n            throw new IllegalArgumentException(\"Fib4 only takes non-negative integers\");\n        }\n        int[] seq = new int[n+1];\n        seq[0] = 0;\n        seq[1] = 0;\n        seq[2] = 2;\n        seq[3] = 0;\n        for (int i = 4; i <= n; i++) {\n            seq[i] = seq[i-1] + seq[i-2] + seq[i-3] + seq[i-4];\n        }\n        return seq[n];",
        "grade-28": {
            "execution": 1
        },
        "190": "int n1 = 0;\n        int n2 = 0;\n        int n3 = 2;\n        int n4 = 0;\n        int n5 = 0;\n        for (int i = 0; i < n - 2; i++) {\n            n5 = n1 + n2 + n3 + n4;\n            n1 = n2;\n            n2 = n3;\n            n3 = n4;\n            n4 = n5;\n        }\n        return n5;",
        "grade-190": {
            "execution": 0
        },
        "136": "int[] numbers = new int[5];\n        numbers[0] = 0;\n        numbers[1] = 0;\n        numbers[2] = 2;\n        numbers[3] = 0;\n        numbers[4] = 0;\n        for (int i = 4; i < n; i++) {\n            numbers[0] = numbers[1];\n            numbers[1] = numbers[2];\n            numbers[2] = numbers[3];\n            numbers[3] = numbers[4];\n            numbers[4] = numbers[0] + numbers[1] + numbers[2] + numbers[3];\n        }\n        return numbers[4];",
        "grade-136": {
            "execution": 0
        },
        "9": "// TODO: Write your code here\n        if (n == 0) {\n            return 0;\n        }\n        int a = 0;\n        int b = 0;\n        int c = 2;\n        int d = 0;\n        int e = 0;\n        for (int i = 4; i <= n; i++) {\n            e = a + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n            d = e;\n        }\n        return e;",
        "grade-9": {
            "execution": 1
        },
        "7": "// f0 = 0\n        // f1 = 0\n        // f2 = 2\n        // f3 = 0\n        // f4 = f0 + f1 + f2 + f3\n        // f5 = f1 + f2 + f3 + f4\n        // f6 = f2 + f3 + f4 + f5\n        // f7 = f3 + f4 + f5 + f6\n        // f8 = f4 + f5 + f6 + f7\n        // f9 = f5 + f6 + f7 + f8\n        // f10 = f6 + f7 + f8 + f9\n        // f11 = f7 + f8 + f9 + f10\n        // f12 = f8 + f9 + f10 + f11\n        // f13 = f9 + f10 + f11 + f12\n        // f14 = f10 + f11 + f12 + f13\n        // f15 = f11 + f12 + f13 + f14\n        // f16 = f12 + f13 + f14 + f15\n        // ...\n        // fk = f(k-4) + f(k-3) + f(k-2) + f(k-1)\n        int a = 0;\n        int b = 0;\n        int c = 2;\n        int d = 0;\n        int fk = 0;\n        if (n == 0) {\n            return a;\n        } else if (n == 1) {\n            return b;\n        } else if (n == 2) {\n            return c;\n        } else if (n == 3) {\n            return d;\n        } else {\n            for (int i = 0; i < n - 3; i++) {\n                fk = a + b + c + d;\n                a = b;\n                b = c;\n                c = d;\n                d = fk;\n            }\n            return fk;\n        }",
        "grade-7": {
            "execution": 1
        },
        "30": "int[] arr = new int[n+1];\n        arr[0] = 0;\n        arr[1] = 0;\n        arr[2] = 2;\n        arr[3] = 0;\n        for(int i = 4; i < n+1; i++) {\n            arr[i] = arr[i-1] + arr[i-2] + arr[i-3] + arr[i-4];\n        }\n        return arr[n];",
        "grade-30": {
            "execution": 1
        },
        "72": "// TODO: Implement me!\n        return 0;",
        "grade-72": {
            "execution": 0
        },
        "76": "throw new RuntimeException(\"Not implemented.\");",
        "grade-76": {
            "execution": 0
        },
        "160": "assert n >= 0;\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n == 3) return 0;\n        int[] dp = new int[n+1];\n        dp[0] = 0;\n        dp[1] = 0;\n        dp[2] = 2;\n        dp[3] = 0;\n        for (int i = 4; i <= n; i++) {\n            dp[i] = dp[i-1] + dp[i-2] + dp[i-3] + dp[i-4];\n        }\n        return dp[n];",
        "grade-160": {
            "execution": 1
        },
        "194": "int f[] = new int[n + 1];\n        int i;\n        f[0] = 0;\n        f[1] = 0;\n        f[2] = 2;\n        f[3] = 0;\n        for (i = 4; i <= n; i++)\n            f[i] = f[i - 1] + f[i - 2] + f[i - 3] + f[i - 4];\n        return f[n];",
        "grade-194": {
            "execution": 1
        },
        "178": "throw new NotImplementedException();",
        "grade-178": {
            "execution": 0
        },
        "65": "if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 0;\n        }\n        int fib0 = 0;\n        int fib1 = 0;\n        int fib2 = 2;\n        int fib3 = 0;\n        int fib = 0;\n        for (int i = 4; i <= n; i++) {\n            fib = fib0 + fib1 + fib2 + fib3;\n            fib0 = fib1;\n            fib1 = fib2;\n            fib2 = fib3;\n            fib3 = fib;\n        }\n        return fib;",
        "grade-65": {
            "execution": 1
        },
        "bleu-36": 0.19537861466830947,
        "bleu-6": 0.1997837490875236,
        "bleu-90": 0.15482666503168005,
        "bleu-80": 2.8547257449495543e-08,
        "bleu-74": 0.17253336728890978,
        "bleu-46": 0.20268692303461147,
        "bleu-34": 0.20083749061843847,
        "bleu-174": 5.061878259838217e-07,
        "bleu-28": 0.20108194688504166,
        "bleu-190": 0.0826365613249727,
        "bleu-136": 0.13327872240817673,
        "bleu-9": 0.17441768001878952,
        "bleu-7": 0.06228223995801077,
        "bleu-30": 0.1289237826814751,
        "bleu-72": 5.061878259838217e-07,
        "bleu-76": 6.374825718674664e-06,
        "bleu-160": 0.1781759566864479,
        "bleu-194": 0.1263574953886602,
        "bleu-178": 8.676489975043989e-08,
        "bleu-65": 0.2039410285923222,
        "codebleu-36": 0.37925005633675385,
        "codebleu-6": 0.4118448024939951,
        "codebleu-90": 0.42091324279910675,
        "codebleu-80": 0.014337120091762029,
        "codebleu-74": 0.3994024802814828,
        "codebleu-46": 0.3629494071966473,
        "codebleu-34": 0.4132119959881318,
        "codebleu-174": 0.02509078555933607,
        "codebleu-28": 0.3694978199295176,
        "codebleu-190": 0.2700233998807989,
        "codebleu-136": 0.3147649416213234,
        "codebleu-9": 0.3493128203095875,
        "codebleu-7": 0.43105425149642895,
        "codebleu-30": 0.29083258524424405,
        "codebleu-72": 0.02150655616865507,
        "codebleu-76": 0.021505377921541256,
        "codebleu-160": 0.3893157814633758,
        "codebleu-194": 0.28355872044028274,
        "codebleu-178": 0.02150537651034858,
        "codebleu-65": 0.4065117464093073,
        "chrf-36": 0.1913339925449682,
        "chrf-6": 0.19515150036100717,
        "chrf-90": 0.19632002802546425,
        "chrf-80": 0.018010610389578307,
        "chrf-74": 0.16081356675665023,
        "chrf-46": 0.25317537102814347,
        "chrf-34": 0.1962220094324506,
        "chrf-174": 0.03614280339373667,
        "chrf-28": 0.1880524309469519,
        "chrf-190": 0.10270055488434951,
        "chrf-136": 0.15475617679725054,
        "chrf-9": 0.17504220108736898,
        "chrf-7": 0.14539027648428282,
        "chrf-30": 0.12938519756489142,
        "chrf-72": 0.02552721985138022,
        "chrf-76": 0.031109296830616192,
        "chrf-160": 0.17969935139660975,
        "chrf-194": 0.10903530528567656,
        "chrf-178": 0.026808062170606887,
        "chrf-65": 0.17274959664233036,
        "rougel-36": 0.39316239316239315,
        "rougel-6": 0.3478260869565218,
        "rougel-90": 0.33834586466165417,
        "rougel-80": 0.04477611940298507,
        "rougel-74": 0.3700787401574803,
        "rougel-46": 0.34418604651162793,
        "rougel-34": 0.36220472440944884,
        "rougel-174": 0.044117647058823525,
        "rougel-28": 0.3132530120481927,
        "rougel-190": 0.3316582914572864,
        "rougel-136": 0.30769230769230765,
        "rougel-9": 0.33944954128440363,
        "rougel-7": 0.2168141592920354,
        "rougel-30": 0.32,
        "rougel-72": 0.044117647058823525,
        "rougel-76": 0.07246376811594202,
        "rougel-160": 0.3481481481481482,
        "rougel-194": 0.3035714285714286,
        "rougel-178": 0.05970149253731343,
        "rougel-65": 0.3658536585365853,
        "meteor-36": 0.2435215557080106,
        "meteor-6": 0.2663095372962825,
        "meteor-90": 0.2755291452094505,
        "meteor-80": 0.013134851138353764,
        "meteor-74": 0.22957918036436983,
        "meteor-46": 0.2874077106929802,
        "meteor-34": 0.2375106030430429,
        "meteor-174": 0.01311188811188811,
        "meteor-28": 0.23049238315022647,
        "meteor-190": 0.20207607056712112,
        "meteor-136": 0.22471122825639714,
        "meteor-9": 0.23815278029524908,
        "meteor-7": 0.275060925959494,
        "meteor-30": 0.18625617757916535,
        "meteor-72": 0.01311188811188811,
        "meteor-76": 0.032460732984293195,
        "meteor-160": 0.2345370743664477,
        "meteor-194": 0.18234228215095566,
        "meteor-178": 0.027637915936952716,
        "meteor-65": 0.2819883728179398,
        "ruby-36": 0.25396825396825395,
        "ruby-6": 0.12598425196850394,
        "ruby-90": 0.15000000000000002,
        "ruby-80": 0.023809523809523836,
        "ruby-74": 0.1796875,
        "ruby-46": 0.26190476190476186,
        "ruby-34": 0.15625,
        "ruby-174": 0.023809523809523836,
        "ruby-28": 0.19047619047619047,
        "ruby-190": 0.23809523809523814,
        "ruby-136": 0.14179104477611937,
        "ruby-9": 0.26190476190476186,
        "ruby-7": 0.09815950920245398,
        "ruby-30": 0.25396825396825395,
        "ruby-72": 0.023809523809523836,
        "ruby-76": 0.03968253968253965,
        "ruby-160": 0.17361111111111116,
        "ruby-194": 0.24603174603174605,
        "ruby-178": 0.031746031746031744,
        "ruby-65": 0.1428571428571429,
        "codebertscore_f1-36": 0.7994548082351685,
        "codebertscore_f3-36": 0.7992433905601501,
        "codebertscore_f1-6": 0.7694942951202393,
        "codebertscore_f3-6": 0.7659804821014404,
        "codebertscore_f1-90": 0.7511112093925476,
        "codebertscore_f3-90": 0.7610476016998291,
        "codebertscore_f1-80": 0.5894866585731506,
        "codebertscore_f3-80": 0.5626572966575623,
        "codebertscore_f1-74": 0.7829777002334595,
        "codebertscore_f3-74": 0.783597469329834,
        "codebertscore_f1-46": 0.8015381693840027,
        "codebertscore_f3-46": 0.796295166015625,
        "codebertscore_f1-34": 0.7722306847572327,
        "codebertscore_f3-34": 0.7646554708480835,
        "codebertscore_f1-174": 0.5786218047142029,
        "codebertscore_f3-174": 0.5594058632850647,
        "codebertscore_f1-28": 0.8112609386444092,
        "codebertscore_f3-28": 0.8212728500366211,
        "codebertscore_f1-190": 0.7821818590164185,
        "codebertscore_f3-190": 0.778580904006958,
        "codebertscore_f1-136": 0.8348076343536377,
        "codebertscore_f3-136": 0.8221928477287292,
        "codebertscore_f1-9": 0.7750690579414368,
        "codebertscore_f3-9": 0.7695707082748413,
        "codebertscore_f1-7": 0.7327944040298462,
        "codebertscore_f3-7": 0.7522052526473999,
        "codebertscore_f1-30": 0.8252905607223511,
        "codebertscore_f3-30": 0.8165557980537415,
        "codebertscore_f1-72": 0.5739551782608032,
        "codebertscore_f3-72": 0.5468498468399048,
        "codebertscore_f1-76": 0.5562616586685181,
        "codebertscore_f3-76": 0.5271375775337219,
        "codebertscore_f1-160": 0.8170340061187744,
        "codebertscore_f3-160": 0.8134573101997375,
        "codebertscore_f1-194": 0.8228662610054016,
        "codebertscore_f3-194": 0.813727617263794,
        "codebertscore_f1-178": 0.5721012949943542,
        "codebertscore_f3-178": 0.546384334564209,
        "codebertscore_f1-65": 0.7877649068832397,
        "codebertscore_f3-65": 0.7786398530006409,
        "codebertscore_s_f1-36": 0.8041048049926758,
        "codebertscore_s_f3-36": 0.8043955564498901,
        "codebertscore_s_f1-6": 0.781690776348114,
        "codebertscore_s_f3-6": 0.7788228392601013,
        "codebertscore_s_f1-90": 0.7624859809875488,
        "codebertscore_s_f3-90": 0.7716225981712341,
        "codebertscore_s_f1-80": 0.6315781474113464,
        "codebertscore_s_f3-80": 0.618320882320404,
        "codebertscore_s_f1-74": 0.7899269461631775,
        "codebertscore_s_f3-74": 0.7917550802230835,
        "codebertscore_s_f1-46": 0.8058763146400452,
        "codebertscore_s_f3-46": 0.8014969229698181,
        "codebertscore_s_f1-34": 0.7851526737213135,
        "codebertscore_s_f3-34": 0.7769955992698669,
        "codebertscore_s_f1-174": 0.6260151267051697,
        "codebertscore_s_f3-174": 0.6188428997993469,
        "codebertscore_s_f1-28": 0.8137953281402588,
        "codebertscore_s_f3-28": 0.8244197964668274,
        "codebertscore_s_f1-190": 0.7749960422515869,
        "codebertscore_s_f3-190": 0.7693362832069397,
        "codebertscore_s_f1-136": 0.8291136026382446,
        "codebertscore_s_f3-136": 0.8163148164749146,
        "codebertscore_s_f1-9": 0.7771971821784973,
        "codebertscore_s_f3-9": 0.7725907564163208,
        "codebertscore_s_f1-7": 0.7470502853393555,
        "codebertscore_s_f3-7": 0.7641011476516724,
        "codebertscore_s_f1-30": 0.8203019499778748,
        "codebertscore_s_f3-30": 0.810338020324707,
        "codebertscore_s_f1-72": 0.6232621669769287,
        "codebertscore_s_f3-72": 0.61268150806427,
        "codebertscore_s_f1-76": 0.5827952027320862,
        "codebertscore_s_f3-76": 0.5579913258552551,
        "codebertscore_s_f1-160": 0.8195942044258118,
        "codebertscore_s_f3-160": 0.8150895237922668,
        "codebertscore_s_f1-194": 0.8171796202659607,
        "codebertscore_s_f3-194": 0.8068280220031738,
        "codebertscore_s_f1-178": 0.5872036814689636,
        "codebertscore_s_f3-178": 0.5750463008880615,
        "codebertscore_s_f1-65": 0.800912618637085,
        "codebertscore_s_f3-65": 0.791274905204773,
        "gpt35_nsnr-36": 4,
        "raw_gpt35_nsnr-36": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-90": 4,
        "raw_gpt35_nsnr-90": "4",
        "gpt35_nsnr-80": 0,
        "raw_gpt35_nsnr-80": "0",
        "gpt35_nsnr-74": 4,
        "raw_gpt35_nsnr-74": "4",
        "gpt35_nsnr-46": 4,
        "raw_gpt35_nsnr-46": "4",
        "gpt35_nsnr-34": 4,
        "raw_gpt35_nsnr-34": "4",
        "gpt35_nsnr-174": 0,
        "raw_gpt35_nsnr-174": "0",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-190": 4,
        "raw_gpt35_nsnr-190": "4",
        "gpt35_nsnr-136": 4,
        "raw_gpt35_nsnr-136": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-30": 4,
        "raw_gpt35_nsnr-30": "4",
        "gpt35_nsnr-72": 2,
        "raw_gpt35_nsnr-72": "2",
        "gpt35_nsnr-76": 0,
        "raw_gpt35_nsnr-76": "0",
        "gpt35_nsnr-160": 4,
        "raw_gpt35_nsnr-160": "4",
        "gpt35_nsnr-194": 4,
        "raw_gpt35_nsnr-194": "4",
        "gpt35_nsnr-178": 0,
        "raw_gpt35_nsnr-178": "0",
        "gpt35_nsnr-65": 4,
        "raw_gpt35_nsnr-65": "4",
        "gpt35_nswr-36": 4,
        "raw_gpt35_nswr-36": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-90": 3,
        "raw_gpt35_nswr-90": "3",
        "gpt35_nswr-80": 0,
        "raw_gpt35_nswr-80": "0",
        "gpt35_nswr-74": 2,
        "raw_gpt35_nswr-74": "2",
        "gpt35_nswr-46": 3,
        "raw_gpt35_nswr-46": "3",
        "gpt35_nswr-34": 4,
        "raw_gpt35_nswr-34": "4",
        "gpt35_nswr-174": 0,
        "raw_gpt35_nswr-174": "0",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-190": 3,
        "raw_gpt35_nswr-190": "3",
        "gpt35_nswr-136": 3,
        "raw_gpt35_nswr-136": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-30": 4,
        "raw_gpt35_nswr-30": "4",
        "gpt35_nswr-72": 0,
        "raw_gpt35_nswr-72": "0",
        "gpt35_nswr-76": 0,
        "raw_gpt35_nswr-76": "0",
        "gpt35_nswr-160": 3,
        "raw_gpt35_nswr-160": "3",
        "gpt35_nswr-194": 3,
        "raw_gpt35_nswr-194": "3",
        "gpt35_nswr-178": 0,
        "raw_gpt35_nswr-178": "0",
        "gpt35_nswr-65": 4,
        "raw_gpt35_nswr-65": "4"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string s, count the number of uppercase vowels in even indices.\n    // For example:\n    // count_upper('aBCdEf') returns 1\n    // count_upper('abcdefg') returns 0\n    // count_upper('dBBE') returns 0\n    public static int countUpper(String s) {\n",
        "snippet": [
            "        int count = 0;\n        for (int i = 0; i < s.length(); i += 2) {\n            if (\"AEIOU\".indexOf(s.charAt(i)) != -1) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n}"
        ],
        "simplified": "Given a string s, count the number of uppercase vowels in even indices.",
        "task_id": "98",
        "32": "return (int)IntStream.range(0, s.length())\n            .filter(i -> i % 2 == 0)\n            .filter(i -> Character.isUpperCase(s.charAt(i)))\n            .count();",
        "grade-32": {
            "execution": 0
        },
        "6": "// Hint: you can use the Character class\n        // check out Character.isUpperCase(c)\n        // http://docs.oracle.com/javase/8/docs/api/java/lang/Character.html#isUpperCase-char-\n        int count = 0;\n        // YOUR CODE HERE\n        return count;",
        "grade-6": {
            "execution": 0
        },
        "94": "// Your code here.\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (i % 2 == 0 && Character.isUpperCase(c)) {\n                count++;\n            }\n        }\n        return count;",
        "grade-94": {
            "execution": 0
        },
        "83": "// Your code here\n        return -1;",
        "grade-83": {
            "execution": 0
        },
        "76": "// TODO: Implement this function\n        return 0;",
        "grade-76": {
            "execution": 0
        },
        "41": "int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (i % 2 == 0 && Character.isUpperCase(s.charAt(i))) {\n                count++;\n            }\n        }\n        return count;",
        "grade-41": {
            "execution": 0
        },
        "29": "return (int) IntStream.range(0, s.length())\n                              .filter(n -> n % 2 == 0)\n                              .filter(n -> s.charAt(n) >= 'A' && s.charAt(n) <= 'Z')\n                              .filter(n -> s.charAt(n) == 'A' || s.charAt(n) == 'E' || s.charAt(n) == 'I' || s.charAt(n) == 'O' || s.charAt(n) == 'U')\n                              .count();",
        "grade-29": {
            "execution": 1
        },
        "25": "throw new RuntimeException(\"Not yet implemented\");",
        "grade-25": {
            "execution": 0
        },
        "162": "// TODO: Implement this method!\n        return 0;",
        "grade-162": {
            "execution": 0
        },
        "8": "int count = 0;\n        String vowels = \"AEIOU\";\n        // Implement this method\n        for (int i = 0; i < s.length(); i+=2) {\n            char ch = s.charAt(i);\n            if (Character.isUpperCase(ch) && vowels.indexOf(ch) != -1) {\n                count++;\n            }\n        }\n        return count;",
        "grade-8": {
            "execution": 1
        },
        "7": "return IntStream.range(0, s.length())\n            .filter(i -> {\n                char c = s.charAt(i);\n                return (c >= 'A' && c <= 'Z') && i % 2 == 0;\n            })\n            .count();",
        "grade-7": {
            "execution": 0
        },
        "26": "// TODO: Implement your solution here\n        return 0;",
        "grade-26": {
            "execution": 0
        },
        "71": "// TODO implement this method\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if ((s.charAt(i) == 'A' || s.charAt(i) == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U') && i % 2 == 0) {\n                count++;\n            }\n        }\n        return count;",
        "grade-71": {
            "execution": 1
        },
        "78": "// your code here\n        return 0;",
        "grade-78": {
            "execution": 0
        },
        "189": "int count = 0;\n        for (int i = 0; i < s.length(); i+=2) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c)) {\n                count++;\n            }\n        }\n        return count;",
        "grade-189": {
            "execution": 0
        },
        "65": "int vowelCount = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (i % 2 == 0) {\n                if (s.charAt(i) == 'A' || s.charAt(i) == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U') {\n                    vowelCount++;\n                }\n            }\n        }\n        return vowelCount;",
        "grade-65": {
            "execution": 1
        },
        "161": "int n = 0;\n        // Start with the second character.\n        // Then every other character after that.\n        for (int i = 1; i < s.length(); i += 2) {\n            if (Character.isUpperCase(s.charAt(i))) {\n                n++;\n            }\n        }\n        return n;",
        "grade-161": {
            "execution": 0
        },
        "74": "int result = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (i % 2 == 0 && s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n                result++;\n            }\n        }\n        return result;",
        "grade-74": {
            "execution": 0
        },
        "172": "return s.chars().filter(c -> (c >= 'A' && c <= 'Z') && c % 2 == 0).count();",
        "grade-172": {
            "execution": 0
        },
        "96": "return (int)s.chars().filter(x -> isUpper(x) && isEven(x)).count();",
        "grade-96": {
            "execution": 0
        },
        "bleu-32": 0.24062990404243279,
        "bleu-6": 0.0767518652563997,
        "bleu-94": 0.511023846613322,
        "bleu-83": 0.000417443349749542,
        "bleu-76": 0.0005662371053023578,
        "bleu-41": 0.636863814060965,
        "bleu-29": 0.07306538315300264,
        "bleu-25": 0.0017066884863088936,
        "bleu-162": 0.0009462270929046325,
        "bleu-8": 0.5474632536814749,
        "bleu-7": 0.21695478486860373,
        "bleu-26": 0.0008805635304711051,
        "bleu-71": 0.31208138471959285,
        "bleu-78": 0.00016217337461129928,
        "bleu-189": 0.6459152221840532,
        "bleu-65": 0.2729824191054298,
        "bleu-161": 0.47073609527516536,
        "bleu-74": 0.44563051368473944,
        "bleu-172": 0.0417817391505049,
        "bleu-96": 0.03569804215389197,
        "codebleu-32": 0.4256396757310677,
        "codebleu-6": 0.31720315635895313,
        "codebleu-94": 0.6336894535154068,
        "codebleu-83": 0.06456481261034837,
        "codebleu-76": 0.05662307559271646,
        "codebleu-41": 0.6504872863721392,
        "codebleu-29": 0.4239959783381147,
        "codebleu-25": 0.07229824416370484,
        "codebleu-162": 0.05686114881215453,
        "codebleu-8": 0.7252833444066049,
        "codebleu-7": 0.47764359076675655,
        "codebleu-26": 0.06481374617449064,
        "codebleu-71": 0.635867144152441,
        "codebleu-78": 0.048362422740122354,
        "codebleu-189": 0.6766166959317369,
        "codebleu-65": 0.6435416529760112,
        "codebleu-161": 0.6281928287036544,
        "codebleu-74": 0.6414778589348987,
        "codebleu-172": 0.26377391534764255,
        "codebleu-96": 0.25201547116134476,
        "chrf-32": 0.30640844510521004,
        "chrf-6": 0.2318603102475403,
        "chrf-94": 0.609871829088972,
        "chrf-83": 0.07563183270153138,
        "chrf-76": 0.09579003618319755,
        "chrf-41": 0.6556336683369518,
        "chrf-29": 0.2373733984213736,
        "chrf-25": 0.08034062192076932,
        "chrf-162": 0.08475765384751822,
        "chrf-8": 0.6882143185115299,
        "chrf-7": 0.2998301115554228,
        "chrf-26": 0.09120455076835815,
        "chrf-71": 0.5682952531402458,
        "chrf-78": 0.07194627757625345,
        "chrf-189": 0.660974857403442,
        "chrf-65": 0.5053233459292363,
        "chrf-161": 0.4578403463090764,
        "chrf-74": 0.4851173171271025,
        "chrf-172": 0.16430059769502045,
        "chrf-96": 0.17963008083303023,
        "rougel-32": 0.4273504273504274,
        "rougel-6": 0.2,
        "rougel-94": 0.6363636363636364,
        "rougel-83": 0.0857142857142857,
        "rougel-76": 0.056338028169014086,
        "rougel-41": 0.7603305785123967,
        "rougel-29": 0.27450980392156865,
        "rougel-25": 0.136986301369863,
        "rougel-162": 0.08333333333333333,
        "rougel-8": 0.6666666666666666,
        "rougel-7": 0.38095238095238093,
        "rougel-26": 0.05555555555555556,
        "rougel-71": 0.53551912568306,
        "rougel-78": 0.05797101449275363,
        "rougel-189": 0.7394957983193277,
        "rougel-65": 0.5193370165745856,
        "rougel-161": 0.6717557251908397,
        "rougel-74": 0.6466165413533835,
        "rougel-172": 0.23300970873786406,
        "rougel-96": 0.29787234042553196,
        "meteor-32": 0.3193695026903141,
        "meteor-6": 0.16371808701905788,
        "meteor-94": 0.7111563790601629,
        "meteor-83": 0.03584229390681004,
        "meteor-76": 0.02683363148479427,
        "meteor-41": 0.7756190476190478,
        "meteor-29": 0.30110433169200024,
        "meteor-25": 0.0445632798573975,
        "meteor-162": 0.03571428571428572,
        "meteor-8": 0.767207513659146,
        "meteor-7": 0.3577151803932435,
        "meteor-26": 0.02678571428571428,
        "meteor-71": 0.615444058067009,
        "meteor-78": 0.026929982046678635,
        "meteor-189": 0.7146184970979281,
        "meteor-65": 0.5969808150811003,
        "meteor-161": 0.6996190590159358,
        "meteor-74": 0.7100111997057988,
        "meteor-172": 0.21996615905245345,
        "meteor-96": 0.19632731958762883,
        "ruby-32": 0.2295081967213115,
        "ruby-6": 0.10144927536231885,
        "ruby-94": 0.47887323943661975,
        "ruby-83": 0.049180327868852514,
        "ruby-76": 0.032786885245901676,
        "ruby-41": 0.639344262295082,
        "ruby-29": 0.18181818181818177,
        "ruby-25": 0.06557377049180324,
        "ruby-162": 0.049180327868852514,
        "ruby-8": 0.5060240963855422,
        "ruby-7": 0.16923076923076918,
        "ruby-26": 0.032786885245901676,
        "ruby-71": 0.3688524590163934,
        "ruby-78": 0.032786885245901676,
        "ruby-189": 0.6229508196721312,
        "ruby-65": 0.3666666666666667,
        "ruby-161": 0.5,
        "ruby-74": 0.5277777777777778,
        "ruby-172": 0.1311475409836066,
        "ruby-96": 0.19672131147540983,
        "codebertscore_f1-32": 0.7632904052734375,
        "codebertscore_f3-32": 0.7630005478858948,
        "codebertscore_f1-6": 0.6673235297203064,
        "codebertscore_f3-6": 0.6999581456184387,
        "codebertscore_f1-94": 0.8461142778396606,
        "codebertscore_f3-94": 0.8596898913383484,
        "codebertscore_f1-83": 0.6127711534500122,
        "codebertscore_f3-83": 0.5986438989639282,
        "codebertscore_f1-76": 0.6009762287139893,
        "codebertscore_f3-76": 0.5910791158676147,
        "codebertscore_f1-41": 0.8926580548286438,
        "codebertscore_f3-41": 0.8884024024009705,
        "codebertscore_f1-29": 0.7306435108184814,
        "codebertscore_f3-29": 0.737659215927124,
        "codebertscore_f1-25": 0.5924052000045776,
        "codebertscore_f3-25": 0.5854296088218689,
        "codebertscore_f1-162": 0.5925992131233215,
        "codebertscore_f3-162": 0.5792995095252991,
        "codebertscore_f1-8": 0.8665852546691895,
        "codebertscore_f3-8": 0.9122399091720581,
        "codebertscore_f1-7": 0.7621471285820007,
        "codebertscore_f3-7": 0.7625060677528381,
        "codebertscore_f1-26": 0.5988835096359253,
        "codebertscore_f3-26": 0.5889009237289429,
        "codebertscore_f1-71": 0.82984459400177,
        "codebertscore_f3-71": 0.8506317138671875,
        "codebertscore_f1-78": 0.6121332049369812,
        "codebertscore_f3-78": 0.5922776460647583,
        "codebertscore_f1-189": 0.8878143429756165,
        "codebertscore_f3-189": 0.8811126351356506,
        "codebertscore_f1-65": 0.8440104126930237,
        "codebertscore_f3-65": 0.8582347631454468,
        "codebertscore_f1-161": 0.8305151462554932,
        "codebertscore_f3-161": 0.8539612293243408,
        "codebertscore_f1-74": 0.873427152633667,
        "codebertscore_f3-74": 0.8636021018028259,
        "codebertscore_f1-172": 0.7070693969726562,
        "codebertscore_f3-172": 0.6995804309844971,
        "codebertscore_f1-96": 0.6824098229408264,
        "codebertscore_f3-96": 0.6768108606338501,
        "codebertscore_s_f1-32": 0.7825318574905396,
        "codebertscore_s_f3-32": 0.7801167368888855,
        "codebertscore_s_f1-6": 0.6832196712493896,
        "codebertscore_s_f3-6": 0.7146199345588684,
        "codebertscore_s_f1-94": 0.8567712306976318,
        "codebertscore_s_f3-94": 0.8698357343673706,
        "codebertscore_s_f1-83": 0.633151113986969,
        "codebertscore_s_f3-83": 0.6218195557594299,
        "codebertscore_s_f1-76": 0.6238199472427368,
        "codebertscore_s_f3-76": 0.6119016408920288,
        "codebertscore_s_f1-41": 0.9006778001785278,
        "codebertscore_s_f3-41": 0.8949639797210693,
        "codebertscore_s_f1-29": 0.748451828956604,
        "codebertscore_s_f3-29": 0.7571544647216797,
        "codebertscore_s_f1-25": 0.571776807308197,
        "codebertscore_s_f3-25": 0.5616915225982666,
        "codebertscore_s_f1-162": 0.6278592348098755,
        "codebertscore_s_f3-162": 0.6154894232749939,
        "codebertscore_s_f1-8": 0.8754118084907532,
        "codebertscore_s_f3-8": 0.917172908782959,
        "codebertscore_s_f1-7": 0.7731810808181763,
        "codebertscore_s_f3-7": 0.7721667289733887,
        "codebertscore_s_f1-26": 0.6183486580848694,
        "codebertscore_s_f3-26": 0.6123682856559753,
        "codebertscore_s_f1-71": 0.8421978950500488,
        "codebertscore_s_f3-71": 0.8659313917160034,
        "codebertscore_s_f1-78": 0.6318504810333252,
        "codebertscore_s_f3-78": 0.6116405725479126,
        "codebertscore_s_f1-189": 0.8958216905593872,
        "codebertscore_s_f3-189": 0.888279378414154,
        "codebertscore_s_f1-65": 0.853455662727356,
        "codebertscore_s_f3-65": 0.8696445822715759,
        "codebertscore_s_f1-161": 0.8399176597595215,
        "codebertscore_s_f3-161": 0.8607968688011169,
        "codebertscore_s_f1-74": 0.883853018283844,
        "codebertscore_s_f3-74": 0.875443160533905,
        "codebertscore_s_f1-172": 0.7266137599945068,
        "codebertscore_s_f3-172": 0.717754065990448,
        "codebertscore_s_f1-96": 0.6998307108879089,
        "codebertscore_s_f3-96": 0.692561149597168,
        "gpt35_nsnr-32": 4,
        "raw_gpt35_nsnr-32": "4",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-94": 4,
        "raw_gpt35_nsnr-94": "4",
        "gpt35_nsnr-83": 0,
        "raw_gpt35_nsnr-83": "0",
        "gpt35_nsnr-76": 2,
        "raw_gpt35_nsnr-76": "2",
        "gpt35_nsnr-41": 4,
        "raw_gpt35_nsnr-41": "4",
        "gpt35_nsnr-29": 4,
        "raw_gpt35_nsnr-29": "4",
        "gpt35_nsnr-25": 2,
        "raw_gpt35_nsnr-25": "2",
        "gpt35_nsnr-162": 0,
        "raw_gpt35_nsnr-162": "3 - The code snippet correctly defines the method countUpper() with the correct input parameter and return type. However, the method is not implemented and always returns 0.",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-26": 2,
        "raw_gpt35_nsnr-26": "2",
        "gpt35_nsnr-71": 4,
        "raw_gpt35_nsnr-71": "4",
        "gpt35_nsnr-78": 2,
        "raw_gpt35_nsnr-78": "2",
        "gpt35_nsnr-189": 4,
        "raw_gpt35_nsnr-189": "4",
        "gpt35_nsnr-65": 4,
        "raw_gpt35_nsnr-65": "4",
        "gpt35_nsnr-161": 4,
        "raw_gpt35_nsnr-161": "4",
        "gpt35_nsnr-74": 4,
        "raw_gpt35_nsnr-74": "4",
        "gpt35_nsnr-172": 4,
        "raw_gpt35_nsnr-172": "4",
        "gpt35_nsnr-96": 3,
        "raw_gpt35_nsnr-96": "3",
        "gpt35_nswr-32": 4,
        "raw_gpt35_nswr-32": "4",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-94": 4,
        "raw_gpt35_nswr-94": "4",
        "gpt35_nswr-83": 2,
        "raw_gpt35_nswr-83": "2",
        "gpt35_nswr-76": 4,
        "raw_gpt35_nswr-76": "4",
        "gpt35_nswr-41": 4,
        "raw_gpt35_nswr-41": "4",
        "gpt35_nswr-29": 4,
        "raw_gpt35_nswr-29": "4",
        "gpt35_nswr-25": 0,
        "raw_gpt35_nswr-25": "0",
        "gpt35_nswr-162": 4,
        "raw_gpt35_nswr-162": "4",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-71": 4,
        "raw_gpt35_nswr-71": "4",
        "gpt35_nswr-78": 3,
        "raw_gpt35_nswr-78": "3",
        "gpt35_nswr-189": 4,
        "raw_gpt35_nswr-189": "4",
        "gpt35_nswr-65": 4,
        "raw_gpt35_nswr-65": "4",
        "gpt35_nswr-161": 4,
        "raw_gpt35_nswr-161": "4",
        "gpt35_nswr-74": 4,
        "raw_gpt35_nswr-74": "4",
        "gpt35_nswr-172": 3,
        "raw_gpt35_nswr-172": "3",
        "gpt35_nswr-96": 2,
        "raw_gpt35_nswr-96": "2"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separate_paren_groups('( ) (( )) (( )( ))')\n    // ['()', '(())', '(()())']\n    public static ArrayList<String> separateParenGroups(String paren_string) {\n",
        "snippet": [
            "        List<String> result = new ArrayList<>();\n        StringBuilder current_string = new StringBuilder();\n        int current_depth = 0;\n\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                current_depth += 1;\n                current_string.append(c);\n            } else if (c == ')') {\n                current_depth -= 1;\n                current_string.append(c);\n\n                if (current_depth == 0) {\n                    result.add(current_string.toString());\n                    current_string.setLength(0);\n                }\n            }\n        }\n        return result;\n\n    }\n}"
        ],
        "simplified": "Input to this function is a string containing multiple groups of nested parentheses. Your goal is to separate those group into separate strings and return the list of those. Separate groups are balanced (each open brace is properly closed) and not nested within each other Ignore any spaces in the input string.",
        "task_id": "1",
        "183": "ArrayList<String> result = new ArrayList<String>();\n        int start = 0;\n        int end = paren_string.length();\n        int open = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') open++;\n            if (paren_string.charAt(i) == ')') open--;\n            if (open == 0) {\n                result.add(paren_string.substring(start, i + 1));\n                start = i + 1;\n            }\n        }\n        return result;",
        "grade-183": {
            "execution": 0
        },
        "29": "ArrayList<String> result = new ArrayList<String>();\n      int i = 0;\n      int last_index = 0;\n      while (i < paren_string.length()) {\n        if (paren_string.charAt(i) == '(') {\n          int j = i + 1;\n          int count = 1;\n          while (j < paren_string.length() && count > 0) {\n            if (paren_string.charAt(j) == '(') {\n              count += 1;\n            } else if (paren_string.charAt(j) == ')') {\n              count -= 1;\n            }\n            j += 1;\n          }\n          if (count == 0) {\n            result.add(paren_string.substring(i, j));\n            last_index = j;\n          }\n        }\n        i += 1;\n      }\n      return result;",
        "grade-29": {
            "execution": 0
        },
        "6": "// Start writing your code here\n        ArrayList<String> strArr = new ArrayList<String>();\n        StringBuilder tempString = new StringBuilder();\n        int i = 0;\n        while(i < paren_string.length()) {\n            if(paren_string.charAt(i) == '(') {\n                tempString.append('(');\n                int openBrackets = 1;\n                int closeBrackets = 0;\n                i++;\n                while(i < paren_string.length() && openBrackets != closeBrackets) {\n                    if(paren_string.charAt(i) == '(') {\n                        openBrackets++;\n                    } else if(paren_string.charAt(i) == ')') {\n                        closeBrackets++;\n                    }\n                    tempString.append(paren_string.charAt(i));\n                    i++;\n                }\n                strArr.add(tempString.toString());\n                tempString.setLength(0);\n            } else {\n                i++;\n            }\n        }\n        return strArr;",
        "grade-6": {
            "execution": 0
        },
        "75": "StringBuilder builder = new StringBuilder();\n        ArrayList<String> result = new ArrayList<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == ' ') {\n                continue;\n            }\n            if (paren_string.charAt(i) == '(') {\n                builder.append('(');\n            } else {\n                builder.append(')');\n            }\n        }\n        String s = builder.toString();\n        int left = 0;\n        int right = 0;\n        StringBuilder temp = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == '(') {\n                left++;\n            } else {\n                right++;\n            }\n            temp.append(s.charAt(i));\n            if (left == right) {\n                result.add(temp.toString());\n                temp = new StringBuilder();\n                left = 0;\n                right = 0;\n            }\n        }\n        return result;",
        "grade-75": {
            "execution": 1
        },
        "66": "// FILL IN YOUR CODE HERE.\n        return null;",
        "grade-66": {
            "execution": 0
        },
        "61": "ArrayList<String> groups = new ArrayList<String>();\n        return groups;",
        "grade-61": {
            "execution": 0
        },
        "37": "ArrayList<String> result = new ArrayList<String>();\n        // IMPLEMENT ME\n        String paren = \"\";\n        String curr = \"\";\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                curr += paren_string.charAt(i);\n                paren += paren_string.charAt(i);\n            } else if (paren_string.charAt(i) == ')') {\n                curr += paren_string.charAt(i);\n                if (paren.equals(curr)) {\n                    result.add(curr);\n                    curr = \"\";\n                    paren = \"\";\n                } else {\n                    if (paren.contains(curr)) {\n                        result.add(curr);\n                        curr = \"\";\n                    } else {\n                        curr = \"\";\n                    }\n                }\n            }\n        }\n        return result;",
        "grade-37": {
            "execution": 0
        },
        "27": "ArrayList<String> list = new ArrayList<String>();\n        int index = 0;\n        int prev = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                index += 1;\n            } else if (paren_string.charAt(i) == ')') {\n                index -= 1;\n            }\n            if (index == 0) {\n                list.add(paren_string.substring(prev, i + 1));\n                prev = i + 1;\n            }\n        }\n        return list;",
        "grade-27": {
            "execution": 0
        },
        "194": "// Your code here\n        ArrayList<String> output = new ArrayList<String>();\n        if (paren_string.length() == 0) return output;\n        if (paren_string.indexOf(' ') == -1) {\n            output.add(paren_string);\n            return output;\n        }\n        String[] paren_string_split = paren_string.split(\" \");\n        int start = 0;\n        int end = 0;\n        int current_open = 0;\n        int open_parens = 0;\n        int close_parens = 0;\n        while (start < paren_string_split.length) {\n            String current_char = paren_string_split[start];\n            if (current_char.equals(\"(\")) {\n                current_open++;\n                if (open_parens == 0) {\n                    open_parens++;\n                }\n            } else if (current_char.equals(\")\")) {\n                current_open--;\n                if (current_open == 0) {\n                    close_parens++;\n                }\n            }\n            start++;\n            if (open_parens == close_parens) {\n                String temp = String.join(\"\", Arrays.copyOfRange(paren_string_split, end, start));\n                output.add(temp);\n                end = start;\n                open_parens = 0;\n                close_parens = 0;\n            }\n        }\n        return output;",
        "grade-194": {
            "execution": 0
        },
        "156": "ArrayList<String> al = new ArrayList<String>();\n        int start_idx = 0;\n        int end_idx = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                start_idx = i;\n            }\n            if (paren_string.charAt(i) == ')') {\n                end_idx = i;\n                String s = paren_string.substring(start_idx, end_idx + 1);\n                al.add(s);\n            }\n        }\n        return al;",
        "grade-156": {
            "execution": 0
        },
        "23": "int cnt = 0;\n        String tmp = \"\";\n        String ans = \"\";\n        ArrayList<String> ans2 = new ArrayList<String>();\n        int start = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                tmp += \"(\";\n                cnt++;\n            } else if (paren_string.charAt(i) == ')') {\n                tmp += \")\";\n                cnt--;\n            }\n            if (cnt == 0) {\n                ans2.add(tmp);\n                tmp = \"\";\n            }\n        }\n        return ans2;",
        "grade-23": {
            "execution": 0
        },
        "170": "// WRITE YOUR CODE HERE!\n        return null;",
        "grade-170": {
            "execution": 0
        },
        "119": "ArrayList<String> all = new ArrayList<String>();\n        Stack<Character> stack = new Stack<Character>();\n        boolean in_parens = false;\n        String temp = \"\";\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                if (in_parens) {\n                    temp += c;\n                }\n                in_parens = true;\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.peek() == '(') {\n                    stack.pop();\n                    if (stack.empty()) {\n                        all.add(temp);\n                        temp = \"\";\n                        in_parens = false;\n                    } else {\n                        temp += c;\n                    }\n                }\n            } else if (c == ' ') {\n                if (in_parens) {\n                    temp += c;\n                }\n            }\n        }\n        return all;",
        "grade-119": {
            "execution": 0
        },
        "8": "// YOUR CODE HERE\n        //Do a for loop for the size of the string\n        // Initialize a counter\n        // If the index of the string is '(' then increment the counter\n        // If the index of the string is ')' then decrement the counter\n        // If the counter is 0 then add the index of the string to the final result\n        // If the counter is 0 then add the index of the string to the final result\n        int counter = 0;\n        ArrayList<String> finalResult = new ArrayList<String>();\n        String temp = \"\";\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                counter++;\n            } else if (paren_string.charAt(i) == ')') {\n                counter--;\n            }\n            if (counter == 0) {\n                finalResult.add(temp);\n                temp = \"\";\n            } else {\n                temp += paren_string.charAt(i);\n            }\n        }\n        return finalResult;",
        "grade-8": {
            "execution": 0
        },
        "7": "ArrayList<String> result = new ArrayList<String>();\n        String temp = \"\";\n        int open = 0;\n        int close = 0;\n        int size = paren_string.length();\n        for (int i = 0; i < size; i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n            } else if (paren_string.charAt(i) == ')') {\n                close++;\n            }\n            if (paren_string.charAt(i) != ' ') {\n                temp += paren_string.charAt(i);\n            }\n            if (open == close) {\n                result.add(temp);\n                temp = \"\";\n                open = 0;\n                close = 0;\n            }\n        }\n        return result;",
        "grade-7": {
            "execution": 0
        },
        "24": "throw new RuntimeException(\"Not implemented\");",
        "grade-24": {
            "execution": 0
        },
        "59": "ArrayList<String> ret = new ArrayList<String>();\n        int i = 0;\n        while (i < paren_string.length()) {\n            StringBuilder sb = new StringBuilder();\n            int c = 0;\n            while (i < paren_string.length()) {\n                if (paren_string.charAt(i) == '(') {\n                    sb.append(paren_string.charAt(i));\n                    c++;\n                } else if (paren_string.charAt(i) == ')') {\n                    sb.append(paren_string.charAt(i));\n                    c--;\n                }\n                i++;\n                if (c == 0) break;\n            }\n            ret.add(sb.toString());\n        }\n        return ret;",
        "grade-59": {
            "execution": 0
        },
        "63": "ArrayList<String> result = new ArrayList<String>();\n        int pos = 0;\n        while (pos < paren_string.length()) {\n            int lpos = paren_string.indexOf('(', pos);\n            if (lpos == -1) break;\n            pos = lpos + 1;\n            int rpos = findMatchingParen(paren_string, pos);\n            result.add(paren_string.substring(lpos, rpos + 1));\n            pos = rpos + 1;\n        }\n        return result;",
        "grade-63": {
            "execution": 0
        },
        "145": "ArrayList<String> arr = new ArrayList<String>();\n        int begin = 0;\n        int end = 0;\n        int paren_count = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                if (paren_count == 0) {\n                    begin = i;\n                }\n                paren_count++;\n            } else if (c == ')') {\n                paren_count--;\n                if (paren_count == 0) {\n                    end = i;\n                    arr.add(paren_string.substring(begin, end + 1));\n                }\n            }\n        }\n        return arr;",
        "grade-145": {
            "execution": 0
        },
        "173": "ArrayList<String> parens = new ArrayList<String>();\n        char[] chars = paren_string.toCharArray();\n        int left = 0;\n        int right = 0;\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] == '(') {\n                left++;\n            } else if (chars[i] == ')') {\n                right++;\n            }\n            if (left == right) {\n                parens.add(paren_string.substring(0, i + 1));\n                paren_string = paren_string.substring(i + 1, paren_string.length());\n                chars = paren_string.toCharArray();\n                i = -1;\n                left = 0;\n                right = 0;\n            }\n        }\n        return parens;",
        "grade-173": {
            "execution": 0
        },
        "bleu-183": 0.3690299510247062,
        "bleu-29": 0.3195135732482031,
        "bleu-6": 0.2833655265257744,
        "bleu-75": 0.2650951467792255,
        "bleu-66": 1.5566247795721505e-06,
        "bleu-61": 0.0017961678919062995,
        "bleu-37": 0.2752709842722643,
        "bleu-27": 0.36188235298445015,
        "bleu-194": 0.1419710663093417,
        "bleu-156": 0.2910806670586848,
        "bleu-23": 0.29869140015609497,
        "bleu-170": 5.054967054243939e-07,
        "bleu-119": 0.27051416184134314,
        "bleu-8": 0.18883756064127946,
        "bleu-7": 0.3004775676279484,
        "bleu-24": 4.097266840625619e-06,
        "bleu-59": 0.353815913007113,
        "bleu-63": 0.22910447565207057,
        "bleu-145": 0.37730180452030837,
        "bleu-173": 0.29102794505334467,
        "codebleu-183": 0.6250708931602955,
        "codebleu-29": 0.6652587160148026,
        "codebleu-6": 0.6704289563798422,
        "codebleu-75": 0.6877505946128495,
        "codebleu-66": 0.03968536082943651,
        "codebleu-61": 0.07179956173184249,
        "codebleu-37": 0.6272918969813563,
        "codebleu-27": 0.6156205923597523,
        "codebleu-194": 0.6283615072423631,
        "codebleu-156": 0.548655830010502,
        "codebleu-23": 0.5934416546038835,
        "codebleu-170": 0.027778994523235536,
        "codebleu-119": 0.6654196211995799,
        "codebleu-8": 0.5975168696237656,
        "codebleu-7": 0.655821382182966,
        "codebleu-24": 0.0357142877057186,
        "codebleu-59": 0.6464074362332392,
        "codebleu-63": 0.4544071375783727,
        "codebleu-145": 0.6324945637526213,
        "codebleu-173": 0.6208252449263442,
        "chrf-183": 0.43590653173871985,
        "chrf-29": 0.4625386552879124,
        "chrf-6": 0.5101714397329964,
        "chrf-75": 0.4944024327252109,
        "chrf-66": 0.017814872795485333,
        "chrf-61": 0.11697141103518874,
        "chrf-37": 0.5058889883117915,
        "chrf-27": 0.3782534484326758,
        "chrf-194": 0.42804388176792274,
        "chrf-156": 0.3586729885328579,
        "chrf-23": 0.35467313513939613,
        "chrf-170": 0.01610893126512425,
        "chrf-119": 0.3794294386865769,
        "chrf-8": 0.4067399929248794,
        "chrf-7": 0.43717041443285287,
        "chrf-24": 0.026159719200284627,
        "chrf-59": 0.5055961461957629,
        "chrf-63": 0.3608634725471692,
        "chrf-145": 0.39945025679200347,
        "chrf-173": 0.4362689849832513,
        "rougel-183": 0.5770750988142291,
        "rougel-29": 0.5646258503401361,
        "rougel-6": 0.5222551928783382,
        "rougel-75": 0.45125348189415043,
        "rougel-66": 0.044117647058823525,
        "rougel-61": 0.20833333333333334,
        "rougel-37": 0.527331189710611,
        "rougel-27": 0.5976095617529881,
        "rougel-194": 0.4022038567493113,
        "rougel-156": 0.5294117647058824,
        "rougel-23": 0.5207547169811321,
        "rougel-170": 0.029629629629629627,
        "rougel-119": 0.5077399380804954,
        "rougel-8": 0.4034582132564842,
        "rougel-7": 0.519298245614035,
        "rougel-24": 0.08823529411764705,
        "rougel-59": 0.5815602836879432,
        "rougel-63": 0.4955752212389381,
        "rougel-145": 0.5606060606060607,
        "rougel-173": 0.4930555555555555,
        "meteor-183": 0.4886728559584036,
        "meteor-29": 0.46797853797525946,
        "meteor-6": 0.5801610982151155,
        "meteor-75": 0.532710851095829,
        "meteor-66": 0.013204225352112676,
        "meteor-61": 0.10710310450794883,
        "meteor-37": 0.46579405034324944,
        "meteor-27": 0.41639527883865746,
        "meteor-194": 0.4237196180555555,
        "meteor-156": 0.40688569450397283,
        "meteor-23": 0.3940970639489512,
        "meteor-170": 0.008810572687224669,
        "meteor-119": 0.4457742534541729,
        "meteor-8": 0.43535125133280744,
        "meteor-7": 0.5089987244214341,
        "meteor-24": 0.02640845070422535,
        "meteor-59": 0.5524527647772578,
        "meteor-63": 0.3299691796913754,
        "meteor-145": 0.4548840247866513,
        "meteor-173": 0.5126369932559157,
        "ruby-183": 0.3828125,
        "ruby-29": 0.4023668639053254,
        "ruby-6": 0.3915094339622641,
        "ruby-75": 0.31196581196581197,
        "ruby-66": 0.02400000000000002,
        "ruby-61": 0.11199999999999999,
        "ruby-37": 0.3817204301075269,
        "ruby-27": 0.4126984126984127,
        "ruby-194": 0.2773109243697479,
        "ruby-156": 0.36,
        "ruby-23": 0.34285714285714286,
        "ruby-170": 0.016000000000000014,
        "ruby-119": 0.38888888888888884,
        "ruby-8": 0.2072072072072072,
        "ruby-7": 0.38125,
        "ruby-24": 0.04800000000000004,
        "ruby-59": 0.4012738853503185,
        "ruby-63": 0.352,
        "ruby-145": 0.40287769784172667,
        "ruby-173": 0.34355828220858897,
        "codebertscore_f1-183": 0.804194450378418,
        "codebertscore_f3-183": 0.79849773645401,
        "codebertscore_f1-29": 0.7990493178367615,
        "codebertscore_f3-29": 0.8004359602928162,
        "codebertscore_f1-6": 0.7968617081642151,
        "codebertscore_f3-6": 0.8249062299728394,
        "codebertscore_f1-75": 0.7990357875823975,
        "codebertscore_f3-75": 0.80898517370224,
        "codebertscore_f1-66": 0.5235576033592224,
        "codebertscore_f3-66": 0.5005121231079102,
        "codebertscore_f1-61": 0.6714021563529968,
        "codebertscore_f3-61": 0.6055291295051575,
        "codebertscore_f1-37": 0.7848270535469055,
        "codebertscore_f3-37": 0.7921237945556641,
        "codebertscore_f1-27": 0.8193153142929077,
        "codebertscore_f3-27": 0.8150772452354431,
        "codebertscore_f1-194": 0.7576360702514648,
        "codebertscore_f3-194": 0.7845571637153625,
        "codebertscore_f1-156": 0.782869815826416,
        "codebertscore_f3-156": 0.7804624438285828,
        "codebertscore_f1-23": 0.7955493927001953,
        "codebertscore_f3-23": 0.7928785085678101,
        "codebertscore_f1-170": 0.5157594680786133,
        "codebertscore_f3-170": 0.4908066391944885,
        "codebertscore_f1-119": 0.773169755935669,
        "codebertscore_f3-119": 0.7761316299438477,
        "codebertscore_f1-8": 0.7504817843437195,
        "codebertscore_f3-8": 0.7710059285163879,
        "codebertscore_f1-7": 0.7990242838859558,
        "codebertscore_f3-7": 0.7966896891593933,
        "codebertscore_f1-24": 0.5373256206512451,
        "codebertscore_f3-24": 0.5023837089538574,
        "codebertscore_f1-59": 0.8219901919364929,
        "codebertscore_f3-59": 0.8249579668045044,
        "codebertscore_f1-63": 0.7728638052940369,
        "codebertscore_f3-63": 0.7702619433403015,
        "codebertscore_f1-145": 0.8035067319869995,
        "codebertscore_f3-145": 0.8035334348678589,
        "codebertscore_f1-173": 0.7992954254150391,
        "codebertscore_f3-173": 0.8060579299926758,
        "codebertscore_s_f1-183": 0.8069091439247131,
        "codebertscore_s_f3-183": 0.7995754480361938,
        "codebertscore_s_f1-29": 0.8115954995155334,
        "codebertscore_s_f3-29": 0.809892475605011,
        "codebertscore_s_f1-6": 0.8153753876686096,
        "codebertscore_s_f3-6": 0.8371081352233887,
        "codebertscore_s_f1-75": 0.8250994682312012,
        "codebertscore_s_f3-75": 0.8249223232269287,
        "codebertscore_s_f1-66": 0.5762169361114502,
        "codebertscore_s_f3-66": 0.563847005367279,
        "codebertscore_s_f1-61": 0.750609278678894,
        "codebertscore_s_f3-61": 0.6801899671554565,
        "codebertscore_s_f1-37": 0.8059098720550537,
        "codebertscore_s_f3-37": 0.8114039301872253,
        "codebertscore_s_f1-27": 0.8301898241043091,
        "codebertscore_s_f3-27": 0.825125515460968,
        "codebertscore_s_f1-194": 0.7902541160583496,
        "codebertscore_s_f3-194": 0.8147549629211426,
        "codebertscore_s_f1-156": 0.7928044199943542,
        "codebertscore_s_f3-156": 0.7909810543060303,
        "codebertscore_s_f1-23": 0.8040936589241028,
        "codebertscore_s_f3-23": 0.8002258539199829,
        "codebertscore_s_f1-170": 0.5772995352745056,
        "codebertscore_s_f3-170": 0.5618405342102051,
        "codebertscore_s_f1-119": 0.7895498275756836,
        "codebertscore_s_f3-119": 0.7934119701385498,
        "codebertscore_s_f1-8": 0.7543756365776062,
        "codebertscore_s_f3-8": 0.7727891802787781,
        "codebertscore_s_f1-7": 0.8121339082717896,
        "codebertscore_s_f3-7": 0.8087545037269592,
        "codebertscore_s_f1-24": 0.587409496307373,
        "codebertscore_s_f3-24": 0.5599234700202942,
        "codebertscore_s_f1-59": 0.8289746046066284,
        "codebertscore_s_f3-59": 0.8283438682556152,
        "codebertscore_s_f1-63": 0.7828493118286133,
        "codebertscore_s_f3-63": 0.7827575206756592,
        "codebertscore_s_f1-145": 0.8150544762611389,
        "codebertscore_s_f3-145": 0.8119400143623352,
        "codebertscore_s_f1-173": 0.8129721879959106,
        "codebertscore_s_f3-173": 0.8141335248947144,
        "gpt35_nsnr-183": 4,
        "raw_gpt35_nsnr-183": "4",
        "gpt35_nsnr-29": 4,
        "raw_gpt35_nsnr-29": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-75": 4,
        "raw_gpt35_nsnr-75": "4",
        "gpt35_nsnr-66": 0,
        "raw_gpt35_nsnr-66": "0",
        "gpt35_nsnr-61": 2,
        "raw_gpt35_nsnr-61": "2",
        "gpt35_nsnr-37": 3,
        "raw_gpt35_nsnr-37": "3",
        "gpt35_nsnr-27": 4,
        "raw_gpt35_nsnr-27": "4",
        "gpt35_nsnr-194": 4,
        "raw_gpt35_nsnr-194": "4",
        "gpt35_nsnr-156": 3,
        "raw_gpt35_nsnr-156": "3",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-170": 0,
        "raw_gpt35_nsnr-170": "0",
        "gpt35_nsnr-119": 2,
        "raw_gpt35_nsnr-119": "2",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-24": 0,
        "raw_gpt35_nsnr-24": "0",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nsnr-63": 4,
        "raw_gpt35_nsnr-63": "4",
        "gpt35_nsnr-145": 4,
        "raw_gpt35_nsnr-145": "4",
        "gpt35_nsnr-173": 4,
        "raw_gpt35_nsnr-173": "4",
        "gpt35_nswr-183": 3,
        "raw_gpt35_nswr-183": "3",
        "gpt35_nswr-29": 3,
        "raw_gpt35_nswr-29": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-75": 3,
        "raw_gpt35_nswr-75": "3",
        "gpt35_nswr-66": 2,
        "raw_gpt35_nswr-66": "2",
        "gpt35_nswr-61": 2,
        "raw_gpt35_nswr-61": "2",
        "gpt35_nswr-37": 3,
        "raw_gpt35_nswr-37": "3",
        "gpt35_nswr-27": 4,
        "raw_gpt35_nswr-27": "4",
        "gpt35_nswr-194": 2,
        "raw_gpt35_nswr-194": "2",
        "gpt35_nswr-156": 3,
        "raw_gpt35_nswr-156": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-170": 2,
        "raw_gpt35_nswr-170": "2",
        "gpt35_nswr-119": 3,
        "raw_gpt35_nswr-119": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-24": 0,
        "raw_gpt35_nswr-24": "0",
        "gpt35_nswr-59": 4,
        "raw_gpt35_nswr-59": "4",
        "gpt35_nswr-63": 3,
        "raw_gpt35_nswr-63": "3",
        "gpt35_nswr-145": 3,
        "raw_gpt35_nswr-145": "3",
        "gpt35_nswr-173": 3,
        "raw_gpt35_nswr-173": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // Input: 3\n    // Output: (1, 2)\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // Input: 12\n    // Output: (4, 6)\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    public static Pair<Integer, Integer> evenOddPalindrome(int n) {\n",
        "snippet": [
            "        int even_palindrome_count = 0, odd_palindrome_count = 0;\n\n        for (int i = 1; i <= n; i++) {\n            if (String.valueOf(i).equals(new StringBuilder(String.valueOf(i)).reverse().toString())) {\n                if (i % 2 == 1) {\n                    odd_palindrome_count += 1;\n                } else {\n                    even_palindrome_count += 1;\n                }\n            }\n        }\n        return Arrays.asList(even_palindrome_count, odd_palindrome_count);\n    }\n}"
        ],
        "simplified": "Given a positive integer n, return a tuple that has the number of even and odd integer palindromes that fall within the range(1, n), inclusive. Note: 1. 1 <= n <= 10^3 2. returned tuple has the number of even and odd integer palindromes respectively.",
        "task_id": "107",
        "33": "int[] evens = new int[n + 1];\n        int[] odds = new int[n + 1];\n        int e = 0;\n        int o = 0;\n        for (int i = 1; i <= n; i++) {\n            e = e + evens[i];\n            o = o + odds[i];\n            int j = i;\n            int s = i;\n            int d = 0;\n            if (i % 10 == 0) {\n                odds[i] = odds[i / 10];\n                evens[i] = evens[i / 10];\n                continue;\n            }\n            while (j > 0) {\n                d = d * 10 + j % 10;\n                j = j / 10;\n            }\n            if (s == d) {\n                evens[i] = 1;\n                odds[i] = 0;\n            } else {\n                odds[i] = 1;\n                evens[i] = 0;\n            }\n        }\n        return new Pair<Integer, Integer>(e, o);",
        "grade-33": {
            "execution": 0
        },
        "6": "int evenCount = 0;\n        int oddCount = 0;\n        for (int i = 1; i <= n; i++) {\n            String s = String.valueOf(i);\n            if (s.length() % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n        return new Pair<Integer, Integer>(evenCount, oddCount);",
        "grade-6": {
            "execution": 0
        },
        "87": "// Write your code here.\n        int evenCount = 0;\n        int oddCount = 0;\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n        return new Pair<Integer, Integer>(evenCount, oddCount);",
        "grade-87": {
            "execution": 0
        },
        "79": "int even = 0;\n        int odd = 0;\n        if (n <= 0) {\n            return Pair.with(even, odd);\n        }\n        if (n == 1) {\n            odd = 1;\n            return Pair.with(even, odd);\n        }\n        even = 1;\n        odd = n / 2;\n        if (n % 2 == 1) {\n            odd++;\n        }\n        return Pair.with(even, odd);",
        "grade-79": {
            "execution": 0
        },
        "73": "int evenPalindrome = 0;\n        int oddPalindrome = 0;\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenPalindrome++;\n                } else {\n                    oddPalindrome++;\n                }\n            }\n        }\n        return new Pair<Integer, Integer>(evenPalindrome, oddPalindrome);",
        "grade-73": {
            "execution": 0
        },
        "43": "int odd = 0;\n        int even = 0;\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        return new Pair<Integer, Integer>(even, odd);",
        "grade-43": {
            "execution": 0
        },
        "31": "if (n < 1 || n > (int) Math.pow(10, 3))\n            throw new IllegalArgumentException(\"Invalid Value for n\");\n        int countEven = 0;\n        int countOdd = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i == reverse(i)) {\n                if (i % 2 == 0) {\n                    countEven++;\n                } else {\n                    countOdd++;\n                }\n            }\n        }\n        return new Pair<Integer, Integer>(countEven, countOdd);",
        "grade-31": {
            "execution": 0
        },
        "191": "List<Integer> evens = new ArrayList<>();\n        List<Integer> odds = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evens.add(i);\n                } else {\n                    odds.add(i);\n                }\n            }\n        }\n        return new Pair<>(evens.size(), odds.size());",
        "grade-191": {
            "execution": 0
        },
        "25": "throw new UnsupportedOperationException(\"Method not implemented\");",
        "grade-25": {
            "execution": 0
        },
        "141": "int e = 0;\n        int o = 0;\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    e++;\n                } else {\n                    o++;\n                }\n            }\n        }\n        return new Pair<Integer, Integer>(e, o);",
        "grade-141": {
            "execution": 0
        },
        "8": "int odd = n / 2;\n        int even = odd;\n        if (n % 2 == 1) {\n            odd += 1;\n        }\n        return new Pair<Integer, Integer>(even, odd);",
        "grade-8": {
            "execution": 0
        },
        "7": "// Fill in your code here\n        return null;",
        "grade-7": {
            "execution": 0
        },
        "26": "// 1. Check whether the input is valid\n        if (n < 1 || n > Math.pow(10, 3)) {\n            throw new IllegalArgumentException(\"Not a valid input\");\n        }\n        // 2. Construct the list of integers from 1 to n\n        List<Integer> list = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            list.add(i);\n        }\n        // 3. Filter the list\n        List<Integer> even = list.stream().filter(ele -> ele % 2 == 0).collect(Collectors.toList());\n        List<Integer> odd = list.stream().filter(ele -> ele % 2 != 0).collect(Collectors.toList());\n        // 4. Count the number of palindromes\n        int evenCount = 0;\n        int oddCount = 0;\n        for (int i = 0; i < even.size(); i++) {\n            String str = Integer.toString(even.get(i));\n            StringBuilder sb = new StringBuilder(str);\n            if (str.equals(sb.reverse().toString())) {\n                evenCount++;\n            }\n        }\n        for (int i = 0; i < odd.size(); i++) {\n            String str = Integer.toString(odd.get(i));\n            StringBuilder sb = new StringBuilder(str);\n            if (str.equals(sb.reverse().toString())) {\n                oddCount++;\n            }\n        }\n        // 5. Return the result\n        return new Pair<Integer, Integer>(evenCount, oddCount);",
        "grade-26": {
            "execution": 0
        },
        "71": "// TODO: implement this method\n        // 1. Please do not change the method signature.\n        // 2. Hint: you can use String.valueOf(n) to get a string of n.\n        // 3. Hint: iterate over the range(1, n) and use String.valueOf(i) and String.valueOf(i).reverse() to check for\n        // a palindrome.\n        // 4. Hint: you can use Integer.parseInt() to convert a string to a int.\n        // 5. You do not need to use BigInteger or BigDecimal.\n        // 6. Please do not use any other methods from the JDK.\n        // 7. You can create your own classes if you need to.\n        // 8. You can also use any other third-party libraries.\n        // 9. Please do not change the access modifiers of any of the methods.\n        int even_counter = 0;\n        int odd_counter = 0;\n        for (int i = 1; i <= n; i++) {\n            String num = String.valueOf(i);\n            if (num.equals(new StringBuilder(num).reverse().toString())) {\n                if (i % 2 == 0)\n                    even_counter++;\n                else\n                    odd_counter++;\n            }\n        }\n        return new Pair<Integer, Integer>(even_counter, odd_counter);",
        "grade-71": {
            "execution": 0
        },
        "76": "int odd = 0;\n        int even = 0;\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (isEven(i)) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        return new Pair<Integer, Integer>(even, odd);",
        "grade-76": {
            "execution": 0
        },
        "173": "// Fill this in.\n        return null;",
        "grade-173": {
            "execution": 0
        },
        "65": "//\n        return null;",
        "grade-65": {
            "execution": 0
        },
        "140": "// ignore\n        return null;",
        "grade-140": {
            "execution": 0
        },
        "72": "// YOUR CODE HERE\n        return new Pair<Integer, Integer>(0, 0);",
        "grade-72": {
            "execution": 0
        },
        "152": "return new Pair<Integer, Integer>(evenPalindrome(n), oddPalindrome(n));",
        "grade-152": {
            "execution": 0
        },
        "bleu-33": 0.16488767209557456,
        "bleu-6": 0.349231592606056,
        "bleu-87": 0.3965180064390513,
        "bleu-79": 0.1493144898809778,
        "bleu-73": 0.38844429825900173,
        "bleu-43": 0.37967456183289355,
        "bleu-31": 0.36924389843343386,
        "bleu-191": 0.41500875745003557,
        "bleu-25": 8.438662355302635e-05,
        "bleu-141": 0.37967456183289355,
        "bleu-8": 0.07162622089469524,
        "bleu-7": 5.572179343726326e-06,
        "bleu-26": 0.13500467529059404,
        "bleu-71": 0.21505665651526049,
        "bleu-76": 0.34285242193875576,
        "bleu-173": 2.2810519148781024e-06,
        "bleu-65": 5.827243168021728e-10,
        "bleu-140": 1.2832390983220596e-08,
        "bleu-72": 0.0009616403905753422,
        "bleu-152": 0.001808641301450786,
        "codebleu-33": 0.5122735318858638,
        "codebleu-6": 0.4776045778397156,
        "codebleu-87": 0.5064873840028256,
        "codebleu-79": 0.4588571428571428,
        "codebleu-73": 0.4732487938284538,
        "codebleu-43": 0.4732487938284538,
        "codebleu-31": 0.6005882687865247,
        "codebleu-191": 0.6087658184968218,
        "codebleu-25": 0.028571476250235095,
        "codebleu-141": 0.4732487938284538,
        "codebleu-8": 0.22410923780304437,
        "codebleu-7": 0.03334252195599399,
        "codebleu-26": 0.638929812374724,
        "codebleu-71": 0.6287710297060674,
        "codebleu-76": 0.4501433745704095,
        "codebleu-173": 0.028577039301417216,
        "codebleu-65": 0.014285785803924074,
        "codebleu-140": 0.01904790987499385,
        "codebleu-72": 0.07670517690255454,
        "codebleu-152": 0.10050226450633021,
        "chrf-33": 0.24503030614798008,
        "chrf-6": 0.348664523935372,
        "chrf-87": 0.35516467470278124,
        "chrf-79": 0.17766253506261553,
        "chrf-73": 0.3999236670840746,
        "chrf-43": 0.2866315036640683,
        "chrf-31": 0.3317316273560548,
        "chrf-191": 0.2990343396543238,
        "chrf-25": 0.04664602528686709,
        "chrf-141": 0.25100409285377584,
        "chrf-8": 0.1335289973157597,
        "chrf-7": 0.03685180171242785,
        "chrf-26": 0.37228737728808187,
        "chrf-71": 0.45427457212215067,
        "chrf-76": 0.2775579322164964,
        "chrf-173": 0.027993168619365575,
        "chrf-65": 0.018392444960641255,
        "chrf-140": 0.02460435842471548,
        "chrf-72": 0.04105254563416122,
        "chrf-152": 0.11163806044921173,
        "rougel-33": 0.3498349834983498,
        "rougel-6": 0.5913978494623656,
        "rougel-87": 0.574468085106383,
        "rougel-79": 0.4042553191489362,
        "rougel-73": 0.5966850828729282,
        "rougel-43": 0.6171428571428571,
        "rougel-31": 0.5045871559633027,
        "rougel-191": 0.4901960784313726,
        "rougel-25": 0.07017543859649122,
        "rougel-141": 0.6171428571428571,
        "rougel-8": 0.34965034965034963,
        "rougel-7": 0.036036036036036036,
        "rougel-26": 0.2672413793103448,
        "rougel-71": 0.36458333333333337,
        "rougel-76": 0.5747126436781609,
        "rougel-173": 0.05454545454545454,
        "rougel-65": 0.03773584905660377,
        "rougel-140": 0.037383177570093455,
        "rougel-72": 0.08333333333333334,
        "rougel-152": 0.13008130081300814,
        "meteor-33": 0.3524493968647645,
        "meteor-6": 0.3903773112677791,
        "meteor-87": 0.4636814200917821,
        "meteor-79": 0.3396284038761355,
        "meteor-73": 0.4610549843290041,
        "meteor-43": 0.46386915513874366,
        "meteor-31": 0.5782727830619331,
        "meteor-191": 0.473904977010567,
        "meteor-25": 0.0342326464208243,
        "meteor-141": 0.46386915513874366,
        "meteor-8": 0.23837477541007585,
        "meteor-7": 0.010881392818280738,
        "meteor-26": 0.507036073332984,
        "meteor-71": 0.5305369127516778,
        "meteor-76": 0.4262560805238087,
        "meteor-173": 0.01633986928104575,
        "meteor-65": 0.010940919037199124,
        "meteor-140": 0.01092896174863388,
        "meteor-72": 0.06848060344827586,
        "meteor-152": 0.08472152486033341,
        "ruby-33": 0.24257425742574257,
        "ruby-6": 0.4455445544554455,
        "ruby-87": 0.36633663366336633,
        "ruby-79": 0.29702970297029707,
        "ruby-73": 0.4356435643564357,
        "ruby-43": 0.49504950495049505,
        "ruby-31": 0.2649572649572649,
        "ruby-191": 0.22330097087378642,
        "ruby-25": 0.03960396039603964,
        "ruby-141": 0.49504950495049505,
        "ruby-8": 0.2376237623762376,
        "ruby-7": 0.01980198019801982,
        "ruby-26": 0.15977961432506882,
        "ruby-71": 0.19787985865724378,
        "ruby-76": 0.4455445544554455,
        "ruby-173": 0.02970297029702973,
        "ruby-65": 0.01980198019801982,
        "ruby-140": 0.01980198019801982,
        "ruby-72": 0.04950495049504955,
        "ruby-152": 0.07920792079207917,
        "codebertscore_f1-33": 0.7291396260261536,
        "codebertscore_f3-33": 0.7243179678916931,
        "codebertscore_f1-6": 0.8385368585586548,
        "codebertscore_f3-6": 0.808177649974823,
        "codebertscore_f1-87": 0.8242586851119995,
        "codebertscore_f3-87": 0.806624174118042,
        "codebertscore_f1-79": 0.7460198402404785,
        "codebertscore_f3-79": 0.7106854915618896,
        "codebertscore_f1-73": 0.8590775728225708,
        "codebertscore_f3-73": 0.8358819484710693,
        "codebertscore_f1-43": 0.8229409456253052,
        "codebertscore_f3-43": 0.7861828804016113,
        "codebertscore_f1-31": 0.7711612582206726,
        "codebertscore_f3-31": 0.7593050599098206,
        "codebertscore_f1-191": 0.7948829531669617,
        "codebertscore_f3-191": 0.7756305932998657,
        "codebertscore_f1-25": 0.5675470232963562,
        "codebertscore_f3-25": 0.5409153699874878,
        "codebertscore_f1-141": 0.8046300411224365,
        "codebertscore_f3-141": 0.7722644209861755,
        "codebertscore_f1-8": 0.7329189777374268,
        "codebertscore_f3-8": 0.6845624446868896,
        "codebertscore_f1-7": 0.5359704494476318,
        "codebertscore_f3-7": 0.5100259184837341,
        "codebertscore_f1-26": 0.7159467935562134,
        "codebertscore_f3-26": 0.7399016618728638,
        "codebertscore_f1-71": 0.7242971658706665,
        "codebertscore_f3-71": 0.760870099067688,
        "codebertscore_f1-76": 0.8142690062522888,
        "codebertscore_f3-76": 0.7791817784309387,
        "codebertscore_f1-173": 0.5492984652519226,
        "codebertscore_f3-173": 0.5141133069992065,
        "codebertscore_f1-65": 0.5226818919181824,
        "codebertscore_f3-65": 0.4910532832145691,
        "codebertscore_f1-140": 0.5445032715797424,
        "codebertscore_f3-140": 0.5035191774368286,
        "codebertscore_f1-72": 0.6126182675361633,
        "codebertscore_f3-72": 0.587289571762085,
        "codebertscore_f1-152": 0.7167683839797974,
        "codebertscore_f3-152": 0.6798802018165588,
        "codebertscore_s_f1-33": 0.737102746963501,
        "codebertscore_s_f3-33": 0.7200717926025391,
        "codebertscore_s_f1-6": 0.8375566601753235,
        "codebertscore_s_f3-6": 0.8022100925445557,
        "codebertscore_s_f1-87": 0.8267553448677063,
        "codebertscore_s_f3-87": 0.8059302568435669,
        "codebertscore_s_f1-79": 0.756071925163269,
        "codebertscore_s_f3-79": 0.7175427079200745,
        "codebertscore_s_f1-73": 0.8626023530960083,
        "codebertscore_s_f3-73": 0.8366429209709167,
        "codebertscore_s_f1-43": 0.8315086960792542,
        "codebertscore_s_f3-43": 0.7941305637359619,
        "codebertscore_s_f1-31": 0.7617387175559998,
        "codebertscore_s_f3-31": 0.7485412955284119,
        "codebertscore_s_f1-191": 0.8012621402740479,
        "codebertscore_s_f3-191": 0.7812623381614685,
        "codebertscore_s_f1-25": 0.5510258078575134,
        "codebertscore_s_f3-25": 0.5368548631668091,
        "codebertscore_s_f1-141": 0.8147792816162109,
        "codebertscore_s_f3-141": 0.7801200151443481,
        "codebertscore_s_f1-8": 0.740644633769989,
        "codebertscore_s_f3-8": 0.6934784054756165,
        "codebertscore_s_f1-7": 0.5554304718971252,
        "codebertscore_s_f3-7": 0.5396261811256409,
        "codebertscore_s_f1-26": 0.7680073976516724,
        "codebertscore_s_f3-26": 0.8034182786941528,
        "codebertscore_s_f1-71": 0.7691450715065002,
        "codebertscore_s_f3-71": 0.8240246772766113,
        "codebertscore_s_f1-76": 0.8241155743598938,
        "codebertscore_s_f3-76": 0.7894471287727356,
        "codebertscore_s_f1-173": 0.5755440592765808,
        "codebertscore_s_f3-173": 0.5477802157402039,
        "codebertscore_s_f1-65": 0.5784611701965332,
        "codebertscore_s_f3-65": 0.538901150226593,
        "codebertscore_s_f1-140": 0.5805522799491882,
        "codebertscore_s_f3-140": 0.5427008867263794,
        "codebertscore_s_f1-72": 0.6235367655754089,
        "codebertscore_s_f3-72": 0.601608157157898,
        "codebertscore_s_f1-152": 0.7454537153244019,
        "codebertscore_s_f3-152": 0.7044920325279236,
        "gpt35_nsnr-33": 4,
        "raw_gpt35_nsnr-33": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-87": 4,
        "raw_gpt35_nsnr-87": "4",
        "gpt35_nsnr-79": 4,
        "raw_gpt35_nsnr-79": "4",
        "gpt35_nsnr-73": 4,
        "raw_gpt35_nsnr-73": "4",
        "gpt35_nsnr-43": 4,
        "raw_gpt35_nsnr-43": "4",
        "gpt35_nsnr-31": 4,
        "raw_gpt35_nsnr-31": "4",
        "gpt35_nsnr-191": 4,
        "raw_gpt35_nsnr-191": "4",
        "gpt35_nsnr-25": 0,
        "raw_gpt35_nsnr-25": "0",
        "gpt35_nsnr-141": 4,
        "raw_gpt35_nsnr-141": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 0,
        "raw_gpt35_nsnr-7": "0",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-71": 4,
        "raw_gpt35_nsnr-71": "4",
        "gpt35_nsnr-76": 4,
        "raw_gpt35_nsnr-76": "4",
        "gpt35_nsnr-173": 0,
        "raw_gpt35_nsnr-173": "0",
        "gpt35_nsnr-65": 0,
        "raw_gpt35_nsnr-65": "0",
        "gpt35_nsnr-140": 0,
        "raw_gpt35_nsnr-140": "0",
        "gpt35_nsnr-72": 3,
        "raw_gpt35_nsnr-72": "3",
        "gpt35_nsnr-152": 3,
        "raw_gpt35_nsnr-152": "3",
        "gpt35_nswr-33": 1,
        "raw_gpt35_nswr-33": "1",
        "gpt35_nswr-6": 2,
        "raw_gpt35_nswr-6": "2",
        "gpt35_nswr-87": 4,
        "raw_gpt35_nswr-87": "4",
        "gpt35_nswr-79": 2,
        "raw_gpt35_nswr-79": "2",
        "gpt35_nswr-73": 3,
        "raw_gpt35_nswr-73": "3",
        "gpt35_nswr-43": 3,
        "raw_gpt35_nswr-43": "3",
        "gpt35_nswr-31": 4,
        "raw_gpt35_nswr-31": "4",
        "gpt35_nswr-191": 3,
        "raw_gpt35_nswr-191": "3",
        "gpt35_nswr-25": 0,
        "raw_gpt35_nswr-25": "0",
        "gpt35_nswr-141": 4,
        "raw_gpt35_nswr-141": "4",
        "gpt35_nswr-8": 2,
        "raw_gpt35_nswr-8": "2",
        "gpt35_nswr-7": 2,
        "raw_gpt35_nswr-7": "2",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-71": 4,
        "raw_gpt35_nswr-71": "4",
        "gpt35_nswr-76": 3,
        "raw_gpt35_nswr-76": "3",
        "gpt35_nswr-173": 2,
        "raw_gpt35_nswr-173": "2",
        "gpt35_nswr-65": 2,
        "raw_gpt35_nswr-65": "2",
        "gpt35_nswr-140": 0,
        "raw_gpt35_nswr-140": "0",
        "gpt35_nswr-72": 2,
        "raw_gpt35_nswr-72": "2",
        "gpt35_nswr-152": 3,
        "raw_gpt35_nswr-152": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two positive integers a and b, return the even digits between a\n    // and b, in ascending order.\n    // For example:\n    // generate_integers(2, 8) => [2, 4, 6, 8]\n    // generate_integers(8, 2) => [2, 4, 6, 8]\n    // generate_integers(10, 14) => []\n    public static ArrayList<Integer> generateIntegers(int a, int b) {\n",
        "snippet": [
            "        int lower = Math.max(2, Math.min(a, b));\n        int upper = Math.min(8, Math.max(a, b));\n\n        List<Integer> result = new ArrayList<>();\n        for (int i = lower; i <= upper; i += 2) {\n            result.add(i);\n        }\n        return result;\n    }\n}"
        ],
        "simplified": "Given two positive integers a and b, return the even digits between a and b, in ascending order.",
        "task_id": "163",
        "29": "ArrayList<Integer> out = new ArrayList<Integer>();\n        if (a < b) {\n            int temp = a;\n            a = b;\n            b = temp;\n        }\n        for (int i = b; i <= a; i++) {\n            if (i % 2 == 0)\n                out.add(i);\n        }\n        return out;",
        "grade-29": {
            "execution": 0
        },
        "6": "ArrayList<Integer> list = new ArrayList<Integer>();\n        int min = Math.min(a, b);\n        int max = Math.max(a, b);\n        for (int i = min; i <= max; i++) {\n            if (i % 2 == 0) {\n                list.add(i);\n            }\n        }\n        return list;",
        "grade-6": {
            "execution": 0
        },
        "80": "ArrayList<Integer> output = new ArrayList<Integer>();\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                output.add(i);\n            }\n        }\n        return output;",
        "grade-80": {
            "execution": 0
        },
        "70": "// //your code here\n        // if (a == b) {\n        //     return new ArrayList<Integer>();\n        // }\n        // ArrayList<Integer> retval = new ArrayList<Integer>();\n        // int min = Math.min(a, b);\n        // int max = Math.max(a, b);\n        // if (min % 2 == 0) {\n        //     retval.add(min);\n        // }\n        // min++;\n        // while (min <= max) {\n        //     retval.add(min);\n        //     min += 2;\n        // }\n        // return retval;\n        return IntStream.rangeClosed(Math.min(a, b), Math.max(a, b))\n            .filter(x -> x % 2 == 0)\n            .boxed()\n            .collect(Collectors.toCollection(ArrayList::new));",
        "grade-70": {
            "execution": 0
        },
        "65": "ArrayList<Integer> evens = new ArrayList<Integer>();\n        if (a <= b) {\n            for (int i = a; i <= b; i++) {\n                if (i % 2 == 0) {\n                    evens.add(i);\n                }\n            }\n        } else {\n            for (int i = b; i <= a; i++) {\n                if (i % 2 == 0) {\n                    evens.add(i);\n                }\n            }\n        }\n        return evens;",
        "grade-65": {
            "execution": 0
        },
        "37": "// code here\n        ArrayList<Integer> v = new ArrayList<Integer>();\n        if (a <= b) {\n            int i = a;\n            while (i <= b) {\n                if (i % 2 == 0) {\n                    v.add(i);\n                }\n                i++;\n            }\n        } else {\n            int i = b;\n            while (i <= a) {\n                if (i % 2 == 0) {\n                    v.add(i);\n                }\n                i++;\n            }\n        }\n        return v;",
        "grade-37": {
            "execution": 0
        },
        "27": "ArrayList<Integer> result = new ArrayList<Integer>();\n        int min = Math.min(a, b);\n        int max = Math.max(a, b);\n        for (int i = min; i <= max; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;",
        "grade-27": {
            "execution": 0
        },
        "170": "int lower = Math.min(a, b);\n        int upper = Math.max(a, b);\n        ArrayList<Integer> answer = new ArrayList<Integer>();\n        for (int i = lower; i <= upper; i++) {\n            if (i % 2 == 0) {\n                answer.add(i);\n            }\n        }\n        return answer;",
        "grade-170": {
            "execution": 0
        },
        "23": "int min = Math.min(a, b);\n        int max = Math.max(a, b);\n        ArrayList<Integer> list = new ArrayList<Integer>();\n        for (int i = min; i <= max; i++) {\n            if (i % 2 == 0) list.add(i);\n        }\n        return list;",
        "grade-23": {
            "execution": 0
        },
        "187": "ArrayList<Integer> result = new ArrayList<Integer>();\n        // Implement your solution here.\n        return result;",
        "grade-187": {
            "execution": 0
        },
        "130": "ArrayList<Integer> result = new ArrayList<Integer>();\n        // Todo: Implement solution\n        return result;",
        "grade-130": {
            "execution": 0
        },
        "9": "if (a > b) {\n            int c = a;\n            a = b;\n            b = c;\n        }\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;",
        "grade-9": {
            "execution": 0
        },
        "7": "return generateIntegersRec(a, b, new ArrayList<Integer>());",
        "grade-7": {
            "execution": 0
        },
        "24": "ArrayList<Integer> output = new ArrayList<Integer>();\n        if (a > b) {\n            int temp = a;\n            a = b;\n            b = temp;\n        }\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                output.add(i);\n            }\n        }\n        return output;",
        "grade-24": {
            "execution": 0
        },
        "63": "ArrayList<Integer> ret = new ArrayList<Integer>();\n        int smaller, larger;\n        if (a < b) {\n            smaller = a;\n            larger = b;\n        } else {\n            smaller = b;\n            larger = a;\n        }\n        while (smaller <= larger) {\n            if (smaller % 2 == 0)\n                ret.add(smaller);\n            smaller++;\n        }\n        return ret;",
        "grade-63": {
            "execution": 0
        },
        "67": "ArrayList<Integer> result = new ArrayList<Integer>();\n        int start = a < b ? a : b;\n        int end = a < b ? b : a;\n        for (int i = start; i <= end; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;",
        "grade-67": {
            "execution": 0
        },
        "157": "ArrayList<Integer> ans = new ArrayList<Integer>();\n        if (a > b) {\n            return generateIntegers(b, a);\n        }\n        for (int x = a; x <= b; x++) {\n            if (x % 2 == 0) {\n                ans.add(x);\n            }\n        }\n        return ans;",
        "grade-157": {
            "execution": 0
        },
        "190": "// Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        ArrayList<Integer> results = new ArrayList<Integer>();\n        int start = (a <= b) ? a : b;\n        int end = (a <= b) ? b : a;\n        for (int i = start; i <= end; i++) {\n            if (i % 2 == 0) {\n                results.add(i);\n            }\n        }\n        return results;",
        "grade-190": {
            "execution": 0
        },
        "174": "// Enter your code here\n        ArrayList<Integer> list = new ArrayList<Integer>();\n        if (a>b) {\n            int temp = a;\n            a = b;\n            b = temp;\n        }\n        if (a%2!=0) a++;\n        for (int i=a; i<=b; i+=2) {\n            list.add(i);\n        }\n        return list;",
        "grade-174": {
            "execution": 0
        },
        "56": "ArrayList<Integer> result = new ArrayList<Integer>();\n        int min, max;\n        if (a < b) {\n            min = a;\n            max = b;\n        } else {\n            min = b;\n            max = a;\n        }\n        for (int i = min; i <= max; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;",
        "grade-56": {
            "execution": 0
        },
        "bleu-29": 0.29830388255990486,
        "bleu-6": 0.502172792331529,
        "bleu-80": 0.27809630142796843,
        "bleu-70": 0.18508006028056426,
        "bleu-65": 0.24694337332821456,
        "bleu-37": 0.2009202634988788,
        "bleu-27": 0.5894829189363998,
        "bleu-170": 0.6322066690950116,
        "bleu-23": 0.5066937771240815,
        "bleu-187": 0.05567376106335248,
        "bleu-130": 0.050364701865215064,
        "bleu-9": 0.417916876303744,
        "bleu-7": 0.01624960053650772,
        "bleu-24": 0.2963724265560446,
        "bleu-63": 0.17388754909917986,
        "bleu-67": 0.39929200086767497,
        "bleu-157": 0.18364535993143716,
        "bleu-190": 0.219305965282049,
        "bleu-174": 0.3532673334066898,
        "bleu-56": 0.3897869429550046,
        "codebleu-29": 0.5213750632730269,
        "codebleu-6": 0.6818873643426008,
        "codebleu-80": 0.3946209296391589,
        "codebleu-70": 0.6763418484871666,
        "codebleu-65": 0.6025056200389716,
        "codebleu-37": 0.5695333734783669,
        "codebleu-27": 0.6967022112868452,
        "codebleu-170": 0.7002914464134248,
        "codebleu-23": 0.6572204412354634,
        "codebleu-187": 0.1523391957198732,
        "codebleu-130": 0.13345570317890365,
        "codebleu-9": 0.5480540732470232,
        "codebleu-7": 0.1012071633570805,
        "codebleu-24": 0.5377525830591106,
        "codebleu-63": 0.5096178633319408,
        "codebleu-67": 0.5606832579111758,
        "codebleu-157": 0.4883359511810288,
        "codebleu-190": 0.6350968977613094,
        "codebleu-174": 0.5707585718329875,
        "codebleu-56": 0.5911310750865622,
        "chrf-29": 0.363791310131723,
        "chrf-6": 0.49801212576375953,
        "chrf-80": 0.3567363445691033,
        "chrf-70": 0.41396682060999196,
        "chrf-65": 0.3314672766774152,
        "chrf-37": 0.31193604013095394,
        "chrf-27": 0.6147896775692807,
        "chrf-170": 0.6446591557420682,
        "chrf-23": 0.5118756669250307,
        "chrf-187": 0.32654816988604923,
        "chrf-130": 0.32055384263209613,
        "chrf-9": 0.4832983523696929,
        "chrf-7": 0.1996894413670204,
        "chrf-24": 0.3575078818438915,
        "chrf-63": 0.3210889208348489,
        "chrf-67": 0.47885229682107505,
        "chrf-157": 0.31316504372905013,
        "chrf-190": 0.42059923670310917,
        "chrf-174": 0.3936028010600765,
        "chrf-56": 0.48556402095518325,
        "rougel-29": 0.45859872611464975,
        "rougel-6": 0.5679012345679012,
        "rougel-80": 0.5362318840579711,
        "rougel-70": 0.2756183745583039,
        "rougel-65": 0.4193548387096774,
        "rougel-37": 0.39999999999999997,
        "rougel-27": 0.5925925925925926,
        "rougel-170": 0.7777777777777778,
        "rougel-23": 0.7250000000000001,
        "rougel-187": 0.33027522935779813,
        "rougel-130": 0.3148148148148148,
        "rougel-9": 0.6163522012578617,
        "rougel-7": 0.2745098039215686,
        "rougel-24": 0.4654088050314465,
        "rougel-63": 0.35582822085889576,
        "rougel-67": 0.5,
        "rougel-157": 0.4258064516129032,
        "rougel-190": 0.4423076923076923,
        "rougel-174": 0.47619047619047616,
        "rougel-56": 0.4823529411764706,
        "meteor-29": 0.44151669561582424,
        "meteor-6": 0.607834147599467,
        "meteor-80": 0.44310710826240185,
        "meteor-70": 0.506432773743077,
        "meteor-65": 0.4953089882893691,
        "meteor-37": 0.44828734889601146,
        "meteor-27": 0.703953004432082,
        "meteor-170": 0.774177249592331,
        "meteor-23": 0.612864077669903,
        "meteor-187": 0.18899829108970978,
        "meteor-130": 0.18148161428545814,
        "meteor-9": 0.5655194565675602,
        "meteor-7": 0.13891155352480417,
        "meteor-24": 0.4949223702497656,
        "meteor-63": 0.37177601857449943,
        "meteor-67": 0.5319017439769868,
        "meteor-157": 0.4474605869857848,
        "meteor-190": 0.5791284403669725,
        "meteor-174": 0.5669148958019552,
        "meteor-56": 0.5745889716606184,
        "ruby-29": 0.2530120481927711,
        "ruby-6": 0.3493975903614458,
        "ruby-80": 0.3132530120481928,
        "ruby-70": 0.17000000000000004,
        "ruby-65": 0.30097087378640774,
        "ruby-37": 0.28971962616822433,
        "ruby-27": 0.37349397590361444,
        "ruby-170": 0.6144578313253012,
        "ruby-23": 0.5662650602409638,
        "ruby-187": 0.20481927710843373,
        "ruby-130": 0.19277108433734935,
        "ruby-9": 0.42168674698795183,
        "ruby-7": 0.15662650602409633,
        "ruby-24": 0.2530120481927711,
        "ruby-63": 0.1807228915662651,
        "ruby-67": 0.3012048192771084,
        "ruby-157": 0.22891566265060237,
        "ruby-190": 0.31200000000000006,
        "ruby-174": 0.3294117647058824,
        "ruby-56": 0.29885057471264365,
        "codebertscore_f1-29": 0.8236353397369385,
        "codebertscore_f3-29": 0.809445858001709,
        "codebertscore_f1-6": 0.9004319906234741,
        "codebertscore_f3-6": 0.8998629450798035,
        "codebertscore_f1-80": 0.8442977070808411,
        "codebertscore_f3-80": 0.8176845908164978,
        "codebertscore_f1-70": 0.7670835852622986,
        "codebertscore_f3-70": 0.8179371953010559,
        "codebertscore_f1-65": 0.7965192198753357,
        "codebertscore_f3-65": 0.7925546765327454,
        "codebertscore_f1-37": 0.7789909243583679,
        "codebertscore_f3-37": 0.7832080721855164,
        "codebertscore_f1-27": 0.9093784093856812,
        "codebertscore_f3-27": 0.9087178111076355,
        "codebertscore_f1-170": 0.934201180934906,
        "codebertscore_f3-170": 0.9321371912956238,
        "codebertscore_f1-23": 0.9188876748085022,
        "codebertscore_f3-23": 0.9165154099464417,
        "codebertscore_f1-187": 0.7307226061820984,
        "codebertscore_f3-187": 0.7035956978797913,
        "codebertscore_f1-130": 0.7322127223014832,
        "codebertscore_f3-130": 0.7042181491851807,
        "codebertscore_f1-9": 0.8440488576889038,
        "codebertscore_f3-9": 0.8279677033424377,
        "codebertscore_f1-7": 0.7241798043251038,
        "codebertscore_f3-7": 0.7031451463699341,
        "codebertscore_f1-24": 0.8247846364974976,
        "codebertscore_f3-24": 0.8103082776069641,
        "codebertscore_f1-63": 0.7721312642097473,
        "codebertscore_f3-63": 0.7673991918563843,
        "codebertscore_f1-67": 0.863959550857544,
        "codebertscore_f3-67": 0.8477411270141602,
        "codebertscore_f1-157": 0.8190739154815674,
        "codebertscore_f3-157": 0.8077665567398071,
        "codebertscore_f1-190": 0.7761338949203491,
        "codebertscore_f3-190": 0.8007642030715942,
        "codebertscore_f1-174": 0.7931269407272339,
        "codebertscore_f3-174": 0.7921625971794128,
        "codebertscore_f1-56": 0.8177486062049866,
        "codebertscore_f3-56": 0.8125508427619934,
        "codebertscore_s_f1-29": 0.8401576280593872,
        "codebertscore_s_f3-29": 0.8273133635520935,
        "codebertscore_s_f1-6": 0.9089362621307373,
        "codebertscore_s_f3-6": 0.9104145169258118,
        "codebertscore_s_f1-80": 0.8587046265602112,
        "codebertscore_s_f3-80": 0.834025502204895,
        "codebertscore_s_f1-70": 0.7805579900741577,
        "codebertscore_s_f3-70": 0.8337355852127075,
        "codebertscore_s_f1-65": 0.817769467830658,
        "codebertscore_s_f3-65": 0.8142860531806946,
        "codebertscore_s_f1-37": 0.7982236742973328,
        "codebertscore_s_f3-37": 0.8001843690872192,
        "codebertscore_s_f1-27": 0.9198153018951416,
        "codebertscore_s_f3-27": 0.9212284684181213,
        "codebertscore_s_f1-170": 0.942431628704071,
        "codebertscore_s_f3-170": 0.9425185322761536,
        "codebertscore_s_f1-23": 0.9267420172691345,
        "codebertscore_s_f3-23": 0.9267660975456238,
        "codebertscore_s_f1-187": 0.7447472214698792,
        "codebertscore_s_f3-187": 0.7162806391716003,
        "codebertscore_s_f1-130": 0.7456570267677307,
        "codebertscore_s_f3-130": 0.7168282270431519,
        "codebertscore_s_f1-9": 0.8607591986656189,
        "codebertscore_s_f3-9": 0.8440244197845459,
        "codebertscore_s_f1-7": 0.7333223819732666,
        "codebertscore_s_f3-7": 0.7130317091941833,
        "codebertscore_s_f1-24": 0.8421300649642944,
        "codebertscore_s_f3-24": 0.8289739489555359,
        "codebertscore_s_f1-63": 0.79608154296875,
        "codebertscore_s_f3-63": 0.7921175360679626,
        "codebertscore_s_f1-67": 0.8798583149909973,
        "codebertscore_s_f3-67": 0.8624094128608704,
        "codebertscore_s_f1-157": 0.8342593908309937,
        "codebertscore_s_f3-157": 0.8241506814956665,
        "codebertscore_s_f1-190": 0.7923104166984558,
        "codebertscore_s_f3-190": 0.8159164786338806,
        "codebertscore_s_f1-174": 0.8109225034713745,
        "codebertscore_s_f3-174": 0.8107867240905762,
        "codebertscore_s_f1-56": 0.8390913605690002,
        "codebertscore_s_f3-56": 0.8353087902069092,
        "gpt35_nsnr-29": 4,
        "raw_gpt35_nsnr-29": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-80": 4,
        "raw_gpt35_nsnr-80": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-65": 4,
        "raw_gpt35_nsnr-65": "4",
        "gpt35_nsnr-37": 4,
        "raw_gpt35_nsnr-37": "4",
        "gpt35_nsnr-27": 4,
        "raw_gpt35_nsnr-27": "4",
        "gpt35_nsnr-170": 4,
        "raw_gpt35_nsnr-170": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-187": 2,
        "raw_gpt35_nsnr-187": "2",
        "gpt35_nsnr-130": 2,
        "raw_gpt35_nsnr-130": "2",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-24": 4,
        "raw_gpt35_nsnr-24": "4",
        "gpt35_nsnr-63": 4,
        "raw_gpt35_nsnr-63": "4",
        "gpt35_nsnr-67": 4,
        "raw_gpt35_nsnr-67": "4",
        "gpt35_nsnr-157": 4,
        "raw_gpt35_nsnr-157": "4",
        "gpt35_nsnr-190": 4,
        "raw_gpt35_nsnr-190": "4",
        "gpt35_nsnr-174": 4,
        "raw_gpt35_nsnr-174": "4",
        "gpt35_nsnr-56": 4,
        "raw_gpt35_nsnr-56": "4",
        "gpt35_nswr-29": 3,
        "raw_gpt35_nswr-29": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-80": 3,
        "raw_gpt35_nswr-80": "3",
        "gpt35_nswr-70": 3,
        "raw_gpt35_nswr-70": "3",
        "gpt35_nswr-65": 3,
        "raw_gpt35_nswr-65": "3",
        "gpt35_nswr-37": 4,
        "raw_gpt35_nswr-37": "4",
        "gpt35_nswr-27": 3,
        "raw_gpt35_nswr-27": "3",
        "gpt35_nswr-170": 3,
        "raw_gpt35_nswr-170": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-187": 2,
        "raw_gpt35_nswr-187": "2",
        "gpt35_nswr-130": 2,
        "raw_gpt35_nswr-130": "2",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-24": 3,
        "raw_gpt35_nswr-24": "3",
        "gpt35_nswr-63": 3,
        "raw_gpt35_nswr-63": "3",
        "gpt35_nswr-67": 3,
        "raw_gpt35_nswr-67": "3",
        "gpt35_nswr-157": 3,
        "raw_gpt35_nswr-157": "3",
        "gpt35_nswr-190": 3,
        "raw_gpt35_nswr-190": "3",
        "gpt35_nswr-174": 4,
        "raw_gpt35_nswr-174": "4",
        "gpt35_nswr-56": 4,
        "raw_gpt35_nswr-56": "4"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    // >>> intersperse([], 4)\n    // []\n    // >>> intersperse([1, 2, 3], 4)\n    // [1, 4, 2, 4, 3]\n    public static ArrayList<Integer> intersperse(ArrayList<Integer> numbers, int delimeter) {\n",
        "snippet": [
            "        if (numbers.size() == 0) {\n            return List.of();\n        }\n        List<Integer> result = new ArrayList<>(List.of());\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            result.add(numbers.get(i));\n            result.add(delimiter);\n        }\n\n        result.add(numbers.get(numbers.size() - 1));\n\n        return result;\n    }\n}"
        ],
        "simplified": "Insert a number 'delimeter' between every two consecutive elements of input list `numbers'",
        "task_id": "5",
        "34": "if (numbers.size() == 0) return numbers;\n        ArrayList<Integer> ret = new ArrayList<>();\n        ret.add(numbers.get(0));\n        for (int i = 1; i < numbers.size(); i++) {\n            ret.add(delimeter);\n            ret.add(numbers.get(i));\n        }\n        return ret;",
        "grade-34": {
            "execution": 1
        },
        "6": "ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i < numbers.size() - 1)\n                result.add(delimeter);\n        }\n        return result;",
        "grade-6": {
            "execution": 1
        },
        "93": "if (numbers.size() == 0) return numbers;\n        ArrayList<Integer> result = new ArrayList<>();\n        result.add(numbers.get(0));\n        for (int i = 1; i < numbers.size(); i++) {\n            result.add(delimeter);\n            result.add(numbers.get(i));\n        }\n        return result;",
        "grade-93": {
            "execution": 1
        },
        "76": "if (numbers.size() == 0) return numbers;\n        return intersperseHelper(numbers, delimeter, 0);",
        "grade-76": {
            "execution": 0
        },
        "70": "return intersperse(numbers, delimeter, new ArrayList<Integer>());",
        "grade-70": {
            "execution": 0
        },
        "42": "ArrayList<Integer> ans = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            ans.add(numbers.get(i));\n            if (i < numbers.size() - 1) ans.add(delimeter);\n        }\n        return ans;",
        "grade-42": {
            "execution": 1
        },
        "31": "ArrayList<Integer> result = new ArrayList<Integer>();\n        if (numbers.size() == 0) {\n            return result;\n        }\n        result.add(numbers.get(0));\n        for (int i = 1; i < numbers.size(); i++) {\n            result.add(delimeter);\n            result.add(numbers.get(i));\n        }\n        return result;",
        "grade-31": {
            "execution": 1
        },
        "199": "// >>> intersperse([1, 2, 3], 4)\n        // [1, 4, 2, 4, 3]\n        if (numbers.size() <= 1) {\n            return numbers;\n        } else {\n            ArrayList<Integer> result = new ArrayList<Integer>();\n            result.add(numbers.get(0));\n            for (int i = 1; i < numbers.size(); i++) {\n                result.add(delimeter);\n                result.add(numbers.get(i));\n            }\n            return result;\n        }",
        "grade-199": {
            "execution": 1
        },
        "23": "ArrayList<Integer> l = new ArrayList<Integer>();\n        for (int i = 0; i < numbers.size(); i++) {\n            l.add(numbers.get(i));\n            if (i != numbers.size() - 1) {\n                l.add(delimeter);\n            }\n        }\n        return l;",
        "grade-23": {
            "execution": 1
        },
        "153": "ArrayList<Integer> newNumbers = new ArrayList<Integer>();\n        for (int i = 0; i < numbers.size(); i++) {\n            newNumbers.add(numbers.get(i));\n            if (i != numbers.size() - 1) {\n                newNumbers.add(delimeter);\n            }\n        }\n        return newNumbers;",
        "grade-153": {
            "execution": 1
        },
        "8": "ArrayList<Integer> res = new ArrayList<Integer>();\n        for (int i = 0; i < numbers.size(); i++) {\n            res.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                res.add(delimeter);\n            }\n        }\n        return res;",
        "grade-8": {
            "execution": 1
        },
        "7": "// YOUR CODE HERE\n        return null;",
        "grade-7": {
            "execution": 0
        },
        "26": "ArrayList<Integer> result = new ArrayList<Integer>();\n        int size = numbers.size();\n        if (size == 0) return result;\n        for (int i = 0; i < size - 1; i++) {\n            result.add(numbers.get(i));\n            result.add(delimeter);\n        }\n        result.add(numbers.get(size - 1));\n        return result;",
        "grade-26": {
            "execution": 1
        },
        "68": "ArrayList<Integer> output = new ArrayList<Integer>();\n        int n = numbers.size();\n        if (n == 0) {\n            return output;\n        }\n        if (n == 1) {\n            output.add(numbers.get(0));\n            return output;\n        }\n        for (int i = 0; i < n; i++) {\n            if (i == 0) {\n                output.add(numbers.get(i));\n            } else {\n                output.add(delimeter);\n                output.add(numbers.get(i));\n            }\n        }\n        return output;",
        "grade-68": {
            "execution": 1
        },
        "72": "ArrayList<Integer> a = new ArrayList<Integer>();\n        if (numbers.size() == 0) {\n            return a;\n        }\n        a.add(numbers.get(0));\n        for (int i = 1; i < numbers.size(); i++) {\n            a.add(delimeter);\n            a.add(numbers.get(i));\n        }\n        return a;",
        "grade-72": {
            "execution": 1
        },
        "185": "// YOUR CODE HERE\n        // add your code here\n        if (numbers.size() <= 1) {\n            return numbers;\n        }\n        ArrayList<Integer> newNums = new ArrayList<Integer>();\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            newNums.add(numbers.get(i));\n            newNums.add(delimeter);\n        }\n        newNums.add(numbers.get(numbers.size() - 1));\n        return newNums;",
        "grade-185": {
            "execution": 1
        },
        "61": "ArrayList<Integer> result = new ArrayList<Integer>();\n        if (numbers.size() < 2) {\n            return numbers;\n        }\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            result.add(numbers.get(i));\n            result.add(delimeter);\n        }\n        result.add(numbers.get(numbers.size() - 1));\n        return result;",
        "grade-61": {
            "execution": 1
        },
        "152": "// your code here\n        if (numbers.size() == 0) {\n            return numbers;\n        }\n        for (int i = numbers.size() - 1; i > 0; i--) {\n            numbers.add(i, delimeter);\n        }\n        return numbers;",
        "grade-152": {
            "execution": 1
        },
        "69": "if (numbers.size() <= 1) {\n            return numbers;\n        }\n        ArrayList<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            result.add(numbers.get(i));\n            result.add(delimeter);\n        }\n        result.add(numbers.get(numbers.size() - 1));\n        return result;",
        "grade-69": {
            "execution": 1
        },
        "165": "ArrayList<Integer> output = new ArrayList<Integer>();\n        for (int i = 0; i < numbers.size(); i++) {\n            output.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                output.add(delimeter);\n            }\n        }\n        return output;",
        "grade-165": {
            "execution": 1
        },
        "bleu-34": 0.5243140473268878,
        "bleu-6": 0.47814563033285973,
        "bleu-93": 0.6201910571235433,
        "bleu-76": 0.021141240001417625,
        "bleu-70": 0.0026948899617103487,
        "bleu-42": 0.4205600225756489,
        "bleu-31": 0.6499804509977111,
        "bleu-199": 0.5327587118297877,
        "bleu-23": 0.4286224452212691,
        "bleu-153": 0.4365627968590192,
        "bleu-8": 0.4246820357204225,
        "bleu-7": 4.035073056100254e-07,
        "bleu-26": 0.6216354629262496,
        "bleu-68": 0.4285696165758795,
        "bleu-72": 0.5339073816808545,
        "bleu-185": 0.601501159778607,
        "bleu-61": 0.7469298098002827,
        "bleu-152": 0.22568020922048176,
        "bleu-69": 0.7748948010951486,
        "bleu-165": 0.4246820357204225,
        "codebleu-34": 0.618208596262895,
        "codebleu-6": 0.49704308198666736,
        "codebleu-93": 0.6347046173881609,
        "codebleu-76": 0.116933153160352,
        "codebleu-70": 0.060583809127209766,
        "codebleu-42": 0.482527133339337,
        "codebleu-31": 0.6607888529450358,
        "codebleu-199": 0.6655787923846337,
        "codebleu-23": 0.513243159726943,
        "codebleu-153": 0.513243159726943,
        "codebleu-8": 0.513243159726943,
        "codebleu-7": 0.03010919040005732,
        "codebleu-26": 0.6439247499912706,
        "codebleu-68": 0.6891207111355909,
        "codebleu-72": 0.6438713288590421,
        "codebleu-185": 0.7806133240777839,
        "codebleu-61": 0.7896381703949656,
        "codebleu-152": 0.355567717227047,
        "codebleu-69": 0.7977020623174128,
        "codebleu-165": 0.513243159726943,
        "chrf-34": 0.6538543106444601,
        "chrf-6": 0.6362813330419042,
        "chrf-93": 0.7577067744584383,
        "chrf-76": 0.23244985881447164,
        "chrf-70": 0.19018956997875766,
        "chrf-42": 0.5127573951548997,
        "chrf-31": 0.7522873596165147,
        "chrf-199": 0.721388801449016,
        "chrf-23": 0.5060706740917021,
        "chrf-153": 0.5353047484448753,
        "chrf-8": 0.5509975748389444,
        "chrf-7": 0.025190841609381547,
        "chrf-26": 0.7085054770816716,
        "chrf-68": 0.5618222678538893,
        "chrf-72": 0.5922064559400373,
        "chrf-185": 0.6530013357076686,
        "chrf-61": 0.8326318051784161,
        "chrf-152": 0.3939359153227492,
        "chrf-69": 0.8506160083575215,
        "chrf-165": 0.519658981070911,
        "rougel-34": 0.6914893617021277,
        "rougel-6": 0.6857142857142857,
        "rougel-93": 0.7340425531914893,
        "rougel-76": 0.27906976744186046,
        "rougel-70": 0.18181818181818185,
        "rougel-42": 0.6551724137931034,
        "rougel-31": 0.6387434554973822,
        "rougel-199": 0.6250000000000001,
        "rougel-23": 0.6404494382022471,
        "rougel-153": 0.6263736263736265,
        "rougel-8": 0.6440677966101694,
        "rougel-7": 0.03571428571428572,
        "rougel-26": 0.7319587628865979,
        "rougel-68": 0.5614035087719298,
        "rougel-72": 0.5968586387434556,
        "rougel-185": 0.7813953488372093,
        "rougel-61": 0.7979797979797979,
        "rougel-152": 0.5,
        "rougel-69": 0.898989898989899,
        "rougel-165": 0.6440677966101694,
        "meteor-34": 0.6173469387755103,
        "meteor-6": 0.5098173334663593,
        "meteor-93": 0.6826301162939894,
        "meteor-76": 0.132258064516129,
        "meteor-70": 0.10536642306760961,
        "meteor-42": 0.4601303742172813,
        "meteor-31": 0.6422510165738033,
        "meteor-199": 0.6465718570234525,
        "meteor-23": 0.45388175181154483,
        "meteor-153": 0.45050114720444406,
        "meteor-8": 0.4792864222001982,
        "meteor-7": 0.010593220338983052,
        "meteor-26": 0.6519184334865514,
        "meteor-68": 0.5362445376747758,
        "meteor-72": 0.5889395963837651,
        "meteor-185": 0.7921522359154348,
        "meteor-61": 0.8575520645010251,
        "meteor-152": 0.29751904121863804,
        "meteor-69": 0.8674050101881816,
        "meteor-165": 0.4792864222001982,
        "ruby-34": 0.5480769230769231,
        "ruby-6": 0.5192307692307692,
        "ruby-93": 0.5865384615384616,
        "ruby-76": 0.17307692307692313,
        "ruby-70": 0.09615384615384615,
        "ruby-42": 0.5,
        "ruby-31": 0.41346153846153844,
        "ruby-199": 0.375,
        "ruby-23": 0.47115384615384615,
        "ruby-153": 0.4326923076923077,
        "ruby-8": 0.47115384615384615,
        "ruby-7": 0.019230769230769273,
        "ruby-26": 0.5769230769230769,
        "ruby-68": 0.3870967741935484,
        "ruby-72": 0.375,
        "ruby-185": 0.6576576576576576,
        "ruby-61": 0.6538461538461539,
        "ruby-152": 0.3173076923076923,
        "ruby-69": 0.8461538461538461,
        "ruby-165": 0.47115384615384615,
        "codebertscore_f1-34": 0.9045352339744568,
        "codebertscore_f3-34": 0.8916003704071045,
        "codebertscore_f1-6": 0.8908872604370117,
        "codebertscore_f3-6": 0.8798976540565491,
        "codebertscore_f1-93": 0.9114470481872559,
        "codebertscore_f3-93": 0.8979415893554688,
        "codebertscore_f1-76": 0.7397188544273376,
        "codebertscore_f3-76": 0.7135621905326843,
        "codebertscore_f1-70": 0.7061980962753296,
        "codebertscore_f3-70": 0.6785622239112854,
        "codebertscore_f1-42": 0.8724220395088196,
        "codebertscore_f3-42": 0.8622464537620544,
        "codebertscore_f1-31": 0.8998625874519348,
        "codebertscore_f3-31": 0.8898943662643433,
        "codebertscore_f1-199": 0.8396782279014587,
        "codebertscore_f3-199": 0.8541091084480286,
        "codebertscore_f1-23": 0.8776820302009583,
        "codebertscore_f3-23": 0.867609977722168,
        "codebertscore_f1-153": 0.8672531247138977,
        "codebertscore_f3-153": 0.860421895980835,
        "codebertscore_f1-8": 0.8861904740333557,
        "codebertscore_f3-8": 0.8755335211753845,
        "codebertscore_f1-7": 0.5857152938842773,
        "codebertscore_f3-7": 0.5590946674346924,
        "codebertscore_f1-26": 0.9124091863632202,
        "codebertscore_f3-26": 0.9095528721809387,
        "codebertscore_f1-68": 0.8437901139259338,
        "codebertscore_f3-68": 0.846945583820343,
        "codebertscore_f1-72": 0.8868392705917358,
        "codebertscore_f3-72": 0.8782654404640198,
        "codebertscore_f1-185": 0.8727805018424988,
        "codebertscore_f3-185": 0.8934499621391296,
        "codebertscore_f1-61": 0.9350638389587402,
        "codebertscore_f3-61": 0.9304791688919067,
        "codebertscore_f1-152": 0.825955331325531,
        "codebertscore_f3-152": 0.8126309514045715,
        "codebertscore_f1-69": 0.952355146408081,
        "codebertscore_f3-69": 0.9449386596679688,
        "codebertscore_f1-165": 0.8859124183654785,
        "codebertscore_f3-165": 0.8752323389053345,
        "codebertscore_s_f1-34": 0.9142088890075684,
        "codebertscore_s_f3-34": 0.9015746116638184,
        "codebertscore_s_f1-6": 0.907082736492157,
        "codebertscore_s_f3-6": 0.8957652449607849,
        "codebertscore_s_f1-93": 0.9211634397506714,
        "codebertscore_s_f3-93": 0.9078410863876343,
        "codebertscore_s_f1-76": 0.7734155654907227,
        "codebertscore_s_f3-76": 0.7403262853622437,
        "codebertscore_s_f1-70": 0.7337667346000671,
        "codebertscore_s_f3-70": 0.7086908221244812,
        "codebertscore_s_f1-42": 0.8896753787994385,
        "codebertscore_s_f3-42": 0.8798931241035461,
        "codebertscore_s_f1-31": 0.9154046773910522,
        "codebertscore_s_f3-31": 0.9035239219665527,
        "codebertscore_s_f1-199": 0.8538684248924255,
        "codebertscore_s_f3-199": 0.8676027059555054,
        "codebertscore_s_f1-23": 0.8935773968696594,
        "codebertscore_s_f3-23": 0.883413553237915,
        "codebertscore_s_f1-153": 0.8840191960334778,
        "codebertscore_s_f3-153": 0.8780032396316528,
        "codebertscore_s_f1-8": 0.9014018177986145,
        "codebertscore_s_f3-8": 0.8903769850730896,
        "codebertscore_s_f1-7": 0.5971896052360535,
        "codebertscore_s_f3-7": 0.5755203366279602,
        "codebertscore_s_f1-26": 0.9241189360618591,
        "codebertscore_s_f3-26": 0.9200738668441772,
        "codebertscore_s_f1-68": 0.8596377968788147,
        "codebertscore_s_f3-68": 0.8634031414985657,
        "codebertscore_s_f1-72": 0.9023874402046204,
        "codebertscore_s_f3-72": 0.8921294808387756,
        "codebertscore_s_f1-185": 0.8856266736984253,
        "codebertscore_s_f3-185": 0.907501220703125,
        "codebertscore_s_f1-61": 0.9469009637832642,
        "codebertscore_s_f3-61": 0.941886305809021,
        "codebertscore_s_f1-152": 0.8450820446014404,
        "codebertscore_s_f3-152": 0.8320403099060059,
        "codebertscore_s_f1-69": 0.9586408138275146,
        "codebertscore_s_f3-69": 0.9513022303581238,
        "codebertscore_s_f1-165": 0.9006107449531555,
        "codebertscore_s_f3-165": 0.8896005749702454,
        "gpt35_nsnr-34": 3,
        "raw_gpt35_nsnr-34": "3",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-93": 3,
        "raw_gpt35_nsnr-93": "3",
        "gpt35_nsnr-76": 3,
        "raw_gpt35_nsnr-76": "3",
        "gpt35_nsnr-70": 3,
        "raw_gpt35_nsnr-70": "3",
        "gpt35_nsnr-42": 3,
        "raw_gpt35_nsnr-42": "3",
        "gpt35_nsnr-31": 3,
        "raw_gpt35_nsnr-31": "3",
        "gpt35_nsnr-199": 4,
        "raw_gpt35_nsnr-199": "4",
        "gpt35_nsnr-23": 3,
        "raw_gpt35_nsnr-23": "3",
        "gpt35_nsnr-153": 3,
        "raw_gpt35_nsnr-153": "3",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 0,
        "raw_gpt35_nsnr-7": "0",
        "gpt35_nsnr-26": 3,
        "raw_gpt35_nsnr-26": "3",
        "gpt35_nsnr-68": 4,
        "raw_gpt35_nsnr-68": "4",
        "gpt35_nsnr-72": 3,
        "raw_gpt35_nsnr-72": "3",
        "gpt35_nsnr-185": 4,
        "raw_gpt35_nsnr-185": "4",
        "gpt35_nsnr-61": 3,
        "raw_gpt35_nsnr-61": "3",
        "gpt35_nsnr-152": 2,
        "raw_gpt35_nsnr-152": "2",
        "gpt35_nsnr-69": 3,
        "raw_gpt35_nsnr-69": "3",
        "gpt35_nsnr-165": 3,
        "raw_gpt35_nsnr-165": "3",
        "gpt35_nswr-34": 3,
        "raw_gpt35_nswr-34": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-93": 3,
        "raw_gpt35_nswr-93": "3",
        "gpt35_nswr-76": 3,
        "raw_gpt35_nswr-76": "3",
        "gpt35_nswr-70": 3,
        "raw_gpt35_nswr-70": "3",
        "gpt35_nswr-42": 3,
        "raw_gpt35_nswr-42": "3",
        "gpt35_nswr-31": 3,
        "raw_gpt35_nswr-31": "3",
        "gpt35_nswr-199": 4,
        "raw_gpt35_nswr-199": "4",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-153": 3,
        "raw_gpt35_nswr-153": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 0,
        "raw_gpt35_nswr-7": "0",
        "gpt35_nswr-26": 4,
        "raw_gpt35_nswr-26": "4",
        "gpt35_nswr-68": 3,
        "raw_gpt35_nswr-68": "3",
        "gpt35_nswr-72": 3,
        "raw_gpt35_nswr-72": "3",
        "gpt35_nswr-185": 4,
        "raw_gpt35_nswr-185": "4",
        "gpt35_nswr-61": 3,
        "raw_gpt35_nswr-61": "3",
        "gpt35_nswr-152": 2,
        "raw_gpt35_nswr-152": "2",
        "gpt35_nswr-69": 3,
        "raw_gpt35_nswr-69": "3",
        "gpt35_nswr-165": 3,
        "raw_gpt35_nswr-165": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a given list of integers, generate a list of rolling maximum element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static ArrayList<Integer> rollingMax(ArrayList<Integer> numbers) {\n",
        "snippet": [
            "        List<Integer> result = new ArrayList<>();\n        if (numbers.size() == 0) {\n            return result;\n        }\n        int rollingMax = numbers.get(0);\n        result.add(rollingMax);\n\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) > rollingMax) {\n                rollingMax = numbers.get(i);\n            }\n            result.add(rollingMax);\n        }\n\n        return result;\n    }\n}"
        ],
        "simplified": "From a given list of integers, generate a list of rolling maximum element found until given moment in the sequence.",
        "task_id": "9",
        "170": "ArrayList<Integer> result = new ArrayList<>();\n        int max = 0;\n        for (int i = 0; i < numbers.size(); i++) {\n            max = Math.max(max, numbers.get(i));\n            result.add(max);\n        }\n        return result;",
        "grade-170": {
            "execution": 1
        },
        "28": "ArrayList<Integer> max_values = new ArrayList<Integer>();\n        // Use a special data structure that maintains the order of items based on the inserted\n        // element.\n        TreeSet<Integer> rolling_maximums = new TreeSet<Integer>();\n        for (int number : numbers) {\n            // Add the new number to the rolling maximums list.\n            rolling_maximums.add(number);\n            // The maximum element in the list is the last element of the set (that is, the largest\n            // element).\n            max_values.add(rolling_maximums.last());\n        }\n        return max_values;",
        "grade-28": {
            "execution": 1
        },
        "6": "ArrayList<Integer> result = new ArrayList<Integer>();\n        Deque<Integer> q = new ArrayDeque<Integer>();\n\n        int max = numbers.get(0);\n        q.add(numbers.get(0));\n        result.add(numbers.get(0));\n\n        for (int i = 1; i < numbers.size(); i++) {\n            int curr = numbers.get(i);\n            max = Math.max(max, curr);\n            while (q.peek() < curr) {\n                q.removeFirst();\n            }\n            q.add(curr);\n            result.add(max);\n        }\n        return result;",
        "grade-6": {
            "execution": 0
        },
        "199": "if (numbers.size() == 0) {\n            return numbers;\n        }\n        // TODO: Write your code here.\n        ArrayList<Integer> result = new ArrayList<>();\n        int max = numbers.get(0);\n        result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n            max = Math.max(max, numbers.get(i));\n            result.add(max);\n        }\n        return result;",
        "grade-199": {
            "execution": 1
        },
        "71": "ArrayList<Integer> result = new ArrayList<Integer>();\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < numbers.size(); i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n            result.add(max);\n        }\n        return result;",
        "grade-71": {
            "execution": 1
        },
        "63": "ArrayList<Integer> result = new ArrayList<Integer>();\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < numbers.size(); i++) {\n            max = Math.max(max, numbers.get(i));\n            result.add(max);\n        }\n        return result;",
        "grade-63": {
            "execution": 1
        },
        "58": "return null;",
        "grade-58": {
            "execution": 0
        },
        "35": "// Check if list empty\n        if (numbers.size() == 0) {\n            return numbers;\n        }\n        // Prepare result list\n        ArrayList<Integer> rollingMaxs = new ArrayList<Integer>();\n        // For each element in list\n        for (int i = 0; i < numbers.size(); i++) {\n            // Add element to result list\n            rollingMaxs.add(numbers.get(i));\n            // Check next elements in list and replace if found bigger number\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (numbers.get(j) > rollingMaxs.get(i)) {\n                    rollingMaxs.set(i, numbers.get(j));\n                }\n            }\n        }\n        return rollingMaxs;",
        "grade-35": {
            "execution": 0
        },
        "198": "int[] a = numbers.stream().mapToInt(i -> i).toArray();\n        ArrayList<Integer> answer = new ArrayList<>();\n        int max = a[0];\n        answer.add(max);\n        for (int i = 1; i < a.length; i++) {\n            if (a[i] > max) max = a[i];\n            answer.add(max);\n        }\n        return answer;",
        "grade-198": {
            "execution": 0
        },
        "26": "ArrayList<Integer> result = new ArrayList<Integer>();\n        Deque<Integer> deque = new ArrayDeque<Integer>();\n        int i = 0;\n        while (i < numbers.size()) {\n            if (deque.isEmpty()) {\n                deque.addLast(i);\n            } else {\n                while (!deque.isEmpty() && numbers.get(deque.peekLast()) < numbers.get(i)) {\n                    deque.removeLast();\n                }\n                deque.addLast(i);\n            }\n            result.add(numbers.get(deque.peekFirst()));\n            i++;\n        }\n        return result;",
        "grade-26": {
            "execution": 1
        },
        "181": "ArrayList<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            int max = 0;\n            for (int j = 0; j <= i; j++) {\n                if (numbers.get(j) > max) {\n                    max = numbers.get(j);\n                }\n            }\n            result.add(max);\n        }\n        return result;",
        "grade-181": {
            "execution": 1
        },
        "144": "ArrayList<Integer> maxes = new ArrayList<Integer>();\n        Integer max = Integer.MIN_VALUE;\n        for (Integer num : numbers) {\n            if (num > max) {\n                max = num;\n            }\n            maxes.add(max);\n        }\n        return maxes;",
        "grade-144": {
            "execution": 1
        },
        "22": "ArrayList<Integer> result = new ArrayList<>();\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < numbers.size(); i++) {\n            max = Math.max(max, numbers.get(i));\n            result.add(max);\n        }\n        return result;",
        "grade-22": {
            "execution": 1
        },
        "157": "var result = new ArrayList<Integer>();\n        if (numbers.size() == 0) return result;\n        var localMax = numbers.get(0);\n        result.add(localMax);\n        for (int i = 1; i < numbers.size(); i++) {\n            var number = numbers.get(i);\n            if (number > localMax) {\n                localMax = number;\n            }\n            result.add(localMax);\n        }\n        return result;",
        "grade-157": {
            "execution": 1
        },
        "109": "ArrayList<Integer> result = new ArrayList<Integer>();\n        ArrayList<Integer> state = new ArrayList<Integer>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (state.size() == 0) {\n                state.add(numbers.get(i));\n            } else {\n                if (numbers.get(i) > state.get(state.size() - 1)) {\n                    state.add(numbers.get(i));\n                } else {\n                    state.add(state.get(state.size() - 1));\n                }\n            }\n            result.add(state.get(state.size() - 1));\n        }\n        return result;",
        "grade-109": {
            "execution": 1
        },
        "8": "ArrayList<Integer> result = new ArrayList<>();\n        Integer max = 0;\n        for (Integer n : numbers) {\n            max = Math.max(max, n);\n            result.add(max);\n        }\n        return result;",
        "grade-8": {
            "execution": 1
        },
        "7": "ArrayList<Integer> result = new ArrayList<Integer>();\n        int max = numbers.get(0);\n        result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n            result.add(max);\n        }\n        return result;",
        "grade-7": {
            "execution": 0
        },
        "23": "// TODO: Fill in this function\n        ArrayList<Integer> res = new ArrayList<Integer>();\n        if (numbers.size() == 0) {\n            return res;\n        }\n        res.add(numbers.get(0));\n        for (int i = 1; i < numbers.size(); i++) {\n            res.add(Math.max(res.get(i - 1), numbers.get(i)));\n        }\n        return res;",
        "grade-23": {
            "execution": 1
        },
        "56": "ArrayList<Integer> max = new ArrayList<Integer>();\n        max.add(numbers.get(0));\n        for (int i = 1; i < numbers.size(); i++) {\n            max.add(Math.max(max.get(i - 1), numbers.get(i)));\n        }\n        return max;",
        "grade-56": {
            "execution": 0
        },
        "60": "ArrayList<Integer> result = new ArrayList<Integer>();\n        // roll the result\n        int lastMax = numbers.get(0);\n        result.add(lastMax);\n        for (int i = 1; i < numbers.size(); i++) {\n            lastMax = Math.max(lastMax, numbers.get(i));\n            result.add(lastMax);\n        }\n        return result;",
        "grade-60": {
            "execution": 0
        },
        "bleu-170": 0.3703939544750898,
        "bleu-28": 0.15684038335710215,
        "bleu-6": 0.44515102235232573,
        "bleu-199": 0.6480583760948888,
        "bleu-71": 0.4845472180527878,
        "bleu-63": 0.36391538570456683,
        "bleu-58": 3.050616021401947e-16,
        "bleu-35": 0.3680367588847322,
        "bleu-198": 0.3443008624928301,
        "bleu-26": 0.3572346240812822,
        "bleu-181": 0.49587935943566686,
        "bleu-144": 0.11333576309866507,
        "bleu-22": 0.37644483073462726,
        "bleu-157": 0.6853561815209547,
        "bleu-109": 0.4219455468057047,
        "bleu-8": 0.1611893788782861,
        "bleu-7": 0.6262619277206289,
        "bleu-23": 0.5696710520090145,
        "bleu-56": 0.4177371792583346,
        "bleu-60": 0.5446502827328742,
        "codebleu-170": 0.4627719115246878,
        "codebleu-28": 0.4294575567231634,
        "codebleu-6": 0.705673939560235,
        "codebleu-199": 0.746702406007448,
        "codebleu-71": 0.5668141082872938,
        "codebleu-63": 0.47412686176040436,
        "codebleu-58": 0.017777777777824973,
        "codebleu-35": 0.711241927849634,
        "codebleu-198": 0.5832867199153272,
        "codebleu-26": 0.6661665950115053,
        "codebleu-181": 0.6234172968920412,
        "codebleu-144": 0.2939526514581509,
        "codebleu-22": 0.47868058375946027,
        "codebleu-157": 0.7090831438080754,
        "codebleu-109": 0.7150171374425425,
        "codebleu-8": 0.2829214228999958,
        "codebleu-7": 0.6897170350344518,
        "codebleu-23": 0.7019591405282348,
        "codebleu-56": 0.5412598842998071,
        "codebleu-60": 0.623870107818907,
        "chrf-170": 0.4651959955966349,
        "chrf-28": 0.36863800897099513,
        "chrf-6": 0.5961696335368997,
        "chrf-199": 0.6773761168085631,
        "chrf-71": 0.5465544255846643,
        "chrf-63": 0.45733913981489765,
        "chrf-58": 0.02368892467428904,
        "chrf-35": 0.6356612489003384,
        "chrf-198": 0.35441320543628463,
        "chrf-26": 0.476536924834961,
        "chrf-181": 0.5293362950767039,
        "chrf-144": 0.27642909018631173,
        "chrf-22": 0.46518915983687653,
        "chrf-157": 0.7103711661302724,
        "chrf-109": 0.5459899981991553,
        "chrf-8": 0.3391661745460506,
        "chrf-7": 0.6647252657111757,
        "chrf-23": 0.5888363694051655,
        "chrf-56": 0.4350617590681317,
        "chrf-60": 0.592856181318095,
        "rougel-170": 0.6436781609195402,
        "rougel-28": 0.3245614035087719,
        "rougel-6": 0.616,
        "rougel-199": 0.6540284360189573,
        "rougel-71": 0.7322404371584699,
        "rougel-63": 0.632768361581921,
        "rougel-58": 0.03636363636363636,
        "rougel-35": 0.5054945054945055,
        "rougel-198": 0.5192307692307693,
        "rougel-26": 0.48387096774193544,
        "rougel-181": 0.6565656565656566,
        "rougel-144": 0.45962732919254656,
        "rougel-22": 0.6363636363636362,
        "rougel-157": 0.8173076923076922,
        "rougel-109": 0.4962406015037594,
        "rougel-8": 0.47133757961783435,
        "rougel-7": 0.8186528497409326,
        "rougel-23": 0.6985645933014355,
        "rougel-56": 0.6486486486486486,
        "rougel-60": 0.7411167512690354,
        "meteor-170": 0.5271316083889563,
        "meteor-28": 0.2743587124452559,
        "meteor-6": 0.5583567206883232,
        "meteor-199": 0.7179939127373136,
        "meteor-71": 0.6801411613731151,
        "meteor-63": 0.5188921829622458,
        "meteor-58": 0.010351966873706002,
        "meteor-35": 0.7091207851173954,
        "meteor-198": 0.6181512113617377,
        "meteor-26": 0.5111739366640377,
        "meteor-181": 0.6755397601768559,
        "meteor-144": 0.3034356974517109,
        "meteor-22": 0.5193949854651163,
        "meteor-157": 0.6201748584424023,
        "meteor-109": 0.5296670137379577,
        "meteor-8": 0.33125211255940346,
        "meteor-7": 0.7953584992942203,
        "meteor-23": 0.5981432465135782,
        "meteor-56": 0.5235141007999534,
        "meteor-60": 0.612013447511283,
        "ruby-170": 0.5046728971962617,
        "ruby-28": 0.2148760330578512,
        "ruby-6": 0.4755244755244755,
        "ruby-199": 0.4299065420560748,
        "ruby-71": 0.6074766355140186,
        "ruby-63": 0.4953271028037384,
        "ruby-58": 0.01869158878504673,
        "ruby-35": 0.3674698795180723,
        "ruby-198": 0.3271028037383178,
        "ruby-26": 0.34751773049645385,
        "ruby-181": 0.5514018691588785,
        "ruby-144": 0.3271028037383178,
        "ruby-22": 0.5046728971962617,
        "ruby-157": 0.7383177570093458,
        "ruby-109": 0.3584905660377359,
        "ruby-8": 0.3271028037383178,
        "ruby-7": 0.719626168224299,
        "ruby-23": 0.5420560747663552,
        "ruby-56": 0.4953271028037384,
        "ruby-60": 0.6448598130841121,
        "codebertscore_f1-170": 0.8599437475204468,
        "codebertscore_f3-170": 0.8441871404647827,
        "codebertscore_f1-28": 0.7550896406173706,
        "codebertscore_f3-28": 0.7772485017776489,
        "codebertscore_f1-6": 0.8569163680076599,
        "codebertscore_f3-6": 0.8710837364196777,
        "codebertscore_f1-199": 0.8857104182243347,
        "codebertscore_f3-199": 0.9007477164268494,
        "codebertscore_f1-71": 0.8740614652633667,
        "codebertscore_f3-71": 0.8663821220397949,
        "codebertscore_f1-63": 0.8520404100418091,
        "codebertscore_f3-63": 0.842015266418457,
        "codebertscore_f1-58": 0.5132814645767212,
        "codebertscore_f3-58": 0.4785815477371216,
        "codebertscore_f1-35": 0.8342365026473999,
        "codebertscore_f3-35": 0.8659436106681824,
        "codebertscore_f1-198": 0.844109833240509,
        "codebertscore_f3-198": 0.8479642868041992,
        "codebertscore_f1-26": 0.7908672094345093,
        "codebertscore_f3-26": 0.8081099987030029,
        "codebertscore_f1-181": 0.8821987509727478,
        "codebertscore_f3-181": 0.872887909412384,
        "codebertscore_f1-144": 0.7911669015884399,
        "codebertscore_f3-144": 0.7712547779083252,
        "codebertscore_f1-22": 0.8518471121788025,
        "codebertscore_f3-22": 0.8417022824287415,
        "codebertscore_f1-157": 0.9215103387832642,
        "codebertscore_f3-157": 0.9267033338546753,
        "codebertscore_f1-109": 0.8356117606163025,
        "codebertscore_f3-109": 0.8390407562255859,
        "codebertscore_f1-8": 0.8156206607818604,
        "codebertscore_f3-8": 0.7870540618896484,
        "codebertscore_f1-7": 0.9134018421173096,
        "codebertscore_f3-7": 0.9002538919448853,
        "codebertscore_f1-23": 0.866041362285614,
        "codebertscore_f3-23": 0.8727350831031799,
        "codebertscore_f1-56": 0.8434236645698547,
        "codebertscore_f3-56": 0.8307830095291138,
        "codebertscore_f1-60": 0.8843775987625122,
        "codebertscore_f3-60": 0.883904218673706,
        "codebertscore_s_f1-170": 0.8806719183921814,
        "codebertscore_s_f3-170": 0.8681289553642273,
        "codebertscore_s_f1-28": 0.7676687240600586,
        "codebertscore_s_f3-28": 0.791533887386322,
        "codebertscore_s_f1-6": 0.870734453201294,
        "codebertscore_s_f3-6": 0.8843726515769958,
        "codebertscore_s_f1-199": 0.8999773263931274,
        "codebertscore_s_f3-199": 0.9156655669212341,
        "codebertscore_s_f1-71": 0.8947939276695251,
        "codebertscore_s_f3-71": 0.8884504437446594,
        "codebertscore_s_f1-63": 0.8742057681083679,
        "codebertscore_s_f3-63": 0.866425633430481,
        "codebertscore_s_f1-58": 0.5910444855690002,
        "codebertscore_s_f3-58": 0.5400820970535278,
        "codebertscore_s_f1-35": 0.8460788726806641,
        "codebertscore_s_f3-35": 0.8787643909454346,
        "codebertscore_s_f1-198": 0.8623273372650146,
        "codebertscore_s_f3-198": 0.8679405450820923,
        "codebertscore_s_f1-26": 0.8035280108451843,
        "codebertscore_s_f3-26": 0.8219843506813049,
        "codebertscore_s_f1-181": 0.8937252163887024,
        "codebertscore_s_f3-181": 0.8860089778900146,
        "codebertscore_s_f1-144": 0.8119720220565796,
        "codebertscore_s_f3-144": 0.7923492789268494,
        "codebertscore_s_f1-22": 0.8742237687110901,
        "codebertscore_s_f3-22": 0.8669708371162415,
        "codebertscore_s_f1-157": 0.9321422576904297,
        "codebertscore_s_f3-157": 0.9407280087471008,
        "codebertscore_s_f1-109": 0.8460189700126648,
        "codebertscore_s_f3-109": 0.8526474237442017,
        "codebertscore_s_f1-8": 0.8414063453674316,
        "codebertscore_s_f3-8": 0.8136938810348511,
        "codebertscore_s_f1-7": 0.9240692257881165,
        "codebertscore_s_f3-7": 0.9126139283180237,
        "codebertscore_s_f1-23": 0.8821910619735718,
        "codebertscore_s_f3-23": 0.8885133862495422,
        "codebertscore_s_f1-56": 0.8629291653633118,
        "codebertscore_s_f3-56": 0.8526302576065063,
        "codebertscore_s_f1-60": 0.8988544344902039,
        "codebertscore_s_f3-60": 0.9000624418258667,
        "gpt35_nsnr-170": 4,
        "raw_gpt35_nsnr-170": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-199": 4,
        "raw_gpt35_nsnr-199": "4",
        "gpt35_nsnr-71": 4,
        "raw_gpt35_nsnr-71": "4",
        "gpt35_nsnr-63": 4,
        "raw_gpt35_nsnr-63": "4",
        "gpt35_nsnr-58": 0,
        "raw_gpt35_nsnr-58": "0",
        "gpt35_nsnr-35": 3,
        "raw_gpt35_nsnr-35": "3",
        "gpt35_nsnr-198": 4,
        "raw_gpt35_nsnr-198": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-181": 3,
        "raw_gpt35_nsnr-181": "3",
        "gpt35_nsnr-144": 4,
        "raw_gpt35_nsnr-144": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-157": 4,
        "raw_gpt35_nsnr-157": "4",
        "gpt35_nsnr-109": 4,
        "raw_gpt35_nsnr-109": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-56": 4,
        "raw_gpt35_nsnr-56": "4",
        "gpt35_nsnr-60": 4,
        "raw_gpt35_nsnr-60": "4",
        "gpt35_nswr-170": 4,
        "raw_gpt35_nswr-170": "4",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-199": 4,
        "raw_gpt35_nswr-199": "4",
        "gpt35_nswr-71": 4,
        "raw_gpt35_nswr-71": "4",
        "gpt35_nswr-63": 4,
        "raw_gpt35_nswr-63": "4",
        "gpt35_nswr-58": 0,
        "raw_gpt35_nswr-58": "0",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-198": 3,
        "raw_gpt35_nswr-198": "3",
        "gpt35_nswr-26": 4,
        "raw_gpt35_nswr-26": "4",
        "gpt35_nswr-181": 3,
        "raw_gpt35_nswr-181": "3",
        "gpt35_nswr-144": 4,
        "raw_gpt35_nswr-144": "4",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-157": 4,
        "raw_gpt35_nswr-157": "4",
        "gpt35_nswr-109": 4,
        "raw_gpt35_nswr-109": "4",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-56": 4,
        "raw_gpt35_nswr-56": "4",
        "gpt35_nswr-60": 4,
        "raw_gpt35_nswr-60": "4"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n    // 2\n    public static int largestPrimeFactor(int n) {\n",
        "snippet": [
            "        int largest = 1;\n        for (int j = 2; j <= n; j++) {\n            if (n % j == 0) {\n                boolean is_prime = j >= 2;\n                for (int i = 2; i < j - 1; i++) {\n                    if (j % i == 0) {\n                        is_prime = false;\n                        break;\n                    }\n                }\n                if (is_prime) {\n                    largest = Math.max(largest, j);\n                }\n            }\n        }\n        return largest;\n    }\n}"
        ],
        "simplified": "Return the largest prime factor of n. Assume n > 1 and is not a prime.",
        "task_id": "59",
        "190": "int result = 0;\n        if (n % 2 == 0) {\n            result = 2;\n            n /= 2;\n            while (n % 2 == 0) {\n                n /= 2;\n            }\n        }\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) {\n                result = i;\n                n /= i;\n                while (n % i == 0) {\n                    n /= i;\n                }\n            }\n        }\n        if (n > 2) {\n            result = n;\n        }\n        return result;",
        "grade-190": {
            "execution": 1
        },
        "29": "for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                int d = n / i;\n                if (isPrime(d)) {\n                    return d;\n                }\n            }\n        }\n        return -1;",
        "grade-29": {
            "execution": 0
        },
        "6": "for (int i = 2; i < Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return largestPrimeFactor(n / i);\n            }\n        }\n        return n;",
        "grade-6": {
            "execution": 0
        },
        "77": "int best = 0;\n        for (int i = 2; i <= n / i; i++) {\n            while (n % i == 0) {\n                best = i;\n                n /= i;\n            }\n        }\n        if (n > 1) best = n;\n        return best;",
        "grade-77": {
            "execution": 1
        },
        "69": "// YOUR CODE HERE\n        return -1;",
        "grade-69": {
            "execution": 0
        },
        "64": "if (n < 4) {\n            return 1;\n        }\n\n        int largestPrimeFactor = 1;\n        for (int i = 2; i <= n / 2; i++) {\n            if (isPrime(i) && n % i == 0) {\n                largestPrimeFactor = i;\n            }\n        }\n\n        return largestPrimeFactor;",
        "grade-64": {
            "execution": 0
        },
        "36": "ArrayList<Integer> primes = Utils.getPrimes(n);\n        int m = -1;\n        for (int i = primes.size() - 1; i >= 0; i--) {\n            if (n % primes.get(i) == 0) {\n                m = primes.get(i);\n                break;\n            }\n        }\n        return m;",
        "grade-36": {
            "execution": 0
        },
        "26": "// The largest prime factor of n has to be <= sqrt(n).\n        // Try all primes <= sqrt(n).\n        int limit = (int) Math.sqrt(n);\n        int largest = -1;\n        for (int i = 2; i <= limit; i++) {\n            if (n % i == 0 && Problem.isPrime(i)) {\n                largest = i;\n            }\n        }\n        return largest;",
        "grade-26": {
            "execution": 0
        },
        "159": "int ans = 0;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            while (n % i == 0) {\n                ans = i;\n                n /= i;\n            }\n        }\n        if (n > 1) ans = n;\n        return ans;",
        "grade-159": {
            "execution": 1
        },
        "22": "return 0;",
        "grade-22": {
            "execution": 0
        },
        "177": "throw new UnsupportedOperationException(\"Delete this line and implement this function.\");",
        "grade-177": {
            "execution": 0
        },
        "119": "if (n < 2) return 0;\n        int maxPrime = 2;\n        // Divide out all 2's:\n        while (n % 2 == 0) {\n            n /= 2;\n        }\n        // Try dividing out all other primes:\n        for (int i = 3; i <= n; i += 2) {\n            while (n % i == 0) {\n                maxPrime = i;\n                n /= i;\n            }\n        }\n        return maxPrime;",
        "grade-119": {
            "execution": 1
        },
        "8": "int prime = 1;\n        int curr = n;\n        while (curr % 2 == 0) {\n            prime = 2;\n            curr /= 2;\n        }\n        int i = 3;\n        while (i * i <= curr) {\n            if (curr % i == 0) {\n                prime = i;\n                curr /= i;\n            } else {\n                i += 2;\n            }\n        }\n        return prime;",
        "grade-8": {
            "execution": 0
        },
        "7": "int max = 1;\n        while (n % 2 == 0) {\n            max = 2;\n            n /= 2;\n        }\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n                max = i;\n                n /= i;\n            }\n        }\n        if (n > 2) {\n            max = n;\n        }\n        return max;",
        "grade-7": {
            "execution": 1
        },
        "23": "List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                factors.add(i);\n            }\n        }\n        return largestPrimeFactorHelper(n, factors);",
        "grade-23": {
            "execution": 0
        },
        "61": "ArrayList<Integer> factors = new ArrayList<Integer>();\n        for (int i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        return factors.get(factors.size() - 1);",
        "grade-61": {
            "execution": 1
        },
        "66": "int largestPrimeFactor = 1;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                n /= i;\n                largestPrimeFactor = i;\n            }\n        }\n        return largestPrimeFactor;",
        "grade-66": {
            "execution": 0
        },
        "148": "int f = 2;\n        while (n % f != 0) {\n            f += 1;\n        }\n        return f;",
        "grade-148": {
            "execution": 0
        },
        "180": "int i;\n        for (i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                n /= i;\n                i--;\n            }\n        }\n        return i;",
        "grade-180": {
            "execution": 1
        },
        "164": "return largestPrimeFactorHelper(n, 2);",
        "grade-164": {
            "execution": 0
        },
        "bleu-190": 0.28631293734192886,
        "bleu-29": 0.22318484151971738,
        "bleu-6": 0.18215012420538737,
        "bleu-77": 0.23025748099701895,
        "bleu-69": 7.747646368148259e-06,
        "bleu-64": 0.29655399740308547,
        "bleu-36": 0.22769055234375507,
        "bleu-26": 0.338079606689303,
        "bleu-159": 0.24897535097997436,
        "bleu-22": 3.601126887662132e-15,
        "bleu-177": 0.0005367928151345036,
        "bleu-119": 0.2471714761646851,
        "bleu-8": 0.21487611472503654,
        "bleu-7": 0.28096514963845576,
        "bleu-23": 0.2769342849884618,
        "bleu-61": 0.2511323282265612,
        "bleu-66": 0.2409933811010106,
        "bleu-148": 0.01051956244493651,
        "bleu-180": 0.15513883499567935,
        "bleu-164": 4.273284883416297e-05,
        "codebleu-190": 0.5770062908994577,
        "codebleu-29": 0.34938477853891753,
        "codebleu-6": 0.28485690190955204,
        "codebleu-77": 0.3722512010122315,
        "codebleu-69": 0.03334013949979028,
        "codebleu-64": 0.3678421786702447,
        "codebleu-36": 0.40232843253931105,
        "codebleu-26": 0.45444214513628284,
        "codebleu-159": 0.3944875911118336,
        "codebleu-22": 0.014285714286058373,
        "codebleu-177": 0.028571468142106687,
        "codebleu-119": 0.4563102198901879,
        "codebleu-8": 0.4049949172171787,
        "codebleu-7": 0.49026034236921173,
        "codebleu-23": 0.3795156231650124,
        "codebleu-61": 0.40099864903336685,
        "codebleu-66": 0.30015228965428054,
        "codebleu-148": 0.11166236087889357,
        "codebleu-180": 0.25198818040610044,
        "codebleu-164": 0.038095819972924876,
        "chrf-190": 0.2769063771804738,
        "chrf-29": 0.25724123113309216,
        "chrf-6": 0.28317879384094813,
        "chrf-77": 0.24916875240241654,
        "chrf-69": 0.030256864952749,
        "chrf-64": 0.3904200294810474,
        "chrf-36": 0.29160328178351563,
        "chrf-26": 0.4263126928565198,
        "chrf-159": 0.23940446075021005,
        "chrf-22": 0.026331714179371534,
        "chrf-177": 0.0794250777599607,
        "chrf-119": 0.2634091930821376,
        "chrf-8": 0.25120366433299957,
        "chrf-7": 0.24559186217063492,
        "chrf-23": 0.31800768948302865,
        "chrf-61": 0.24777156685241422,
        "chrf-66": 0.3686714575466731,
        "chrf-148": 0.08030083422551815,
        "chrf-180": 0.19535889366288328,
        "chrf-164": 0.10148015220572193,
        "rougel-190": 0.5185185185185185,
        "rougel-29": 0.48684210526315785,
        "rougel-6": 0.452054794520548,
        "rougel-77": 0.4936708860759494,
        "rougel-69": 0.055045871559633024,
        "rougel-64": 0.46706586826347307,
        "rougel-36": 0.4114285714285714,
        "rougel-26": 0.4639175257731959,
        "rougel-159": 0.49689440993788825,
        "rougel-22": 0.038834951456310676,
        "rougel-177": 0.06779661016949154,
        "rougel-119": 0.46632124352331605,
        "rougel-8": 0.5310734463276836,
        "rougel-7": 0.5543478260869565,
        "rougel-23": 0.45783132530120485,
        "rougel-61": 0.43274853801169594,
        "rougel-66": 0.513157894736842,
        "rougel-148": 0.2741935483870968,
        "rougel-180": 0.4755244755244755,
        "rougel-164": 0.10810810810810809,
        "meteor-190": 0.4357365485564305,
        "meteor-29": 0.3646927521008403,
        "meteor-6": 0.3184382701377334,
        "meteor-77": 0.3338541029476185,
        "meteor-69": 0.034722222222222224,
        "meteor-64": 0.35806369914999675,
        "meteor-36": 0.30503060952887945,
        "meteor-26": 0.4129314814482991,
        "meteor-159": 0.38709677419354843,
        "meteor-22": 0.01661129568106312,
        "meteor-177": 0.02178649237472767,
        "meteor-119": 0.3432910025456744,
        "meteor-8": 0.31621425438138406,
        "meteor-7": 0.4135649684899216,
        "meteor-23": 0.3236099865221789,
        "meteor-61": 0.3092021818921141,
        "meteor-66": 0.29581627134358335,
        "meteor-148": 0.09740259740259741,
        "meteor-180": 0.24553643555223947,
        "meteor-164": 0.0584007958287596,
        "ruby-190": 0.39655172413793105,
        "ruby-29": 0.36,
        "ruby-6": 0.32999999999999996,
        "ruby-77": 0.35,
        "ruby-69": 0.030000000000000027,
        "ruby-64": 0.31000000000000005,
        "ruby-36": 0.26,
        "ruby-26": 0.31000000000000005,
        "ruby-159": 0.35,
        "ruby-22": 0.020000000000000018,
        "ruby-177": 0.040000000000000036,
        "ruby-119": 0.29000000000000004,
        "ruby-8": 0.4,
        "ruby-7": 0.38,
        "ruby-23": 0.31999999999999995,
        "ruby-61": 0.31000000000000005,
        "ruby-66": 0.35,
        "ruby-148": 0.17000000000000004,
        "ruby-180": 0.33999999999999997,
        "ruby-164": 0.06000000000000005,
        "codebertscore_f1-190": 0.7874161005020142,
        "codebertscore_f3-190": 0.7842251062393188,
        "codebertscore_f1-29": 0.7994217872619629,
        "codebertscore_f3-29": 0.7796338200569153,
        "codebertscore_f1-6": 0.7900673151016235,
        "codebertscore_f3-6": 0.7754957675933838,
        "codebertscore_f1-77": 0.8112573623657227,
        "codebertscore_f3-77": 0.7947025299072266,
        "codebertscore_f1-69": 0.5670443773269653,
        "codebertscore_f3-69": 0.5455443859100342,
        "codebertscore_f1-64": 0.8182273507118225,
        "codebertscore_f3-64": 0.8123612403869629,
        "codebertscore_f1-36": 0.7599537968635559,
        "codebertscore_f3-36": 0.7669468522071838,
        "codebertscore_f1-26": 0.7887007594108582,
        "codebertscore_f3-26": 0.8112146258354187,
        "codebertscore_f1-159": 0.795455813407898,
        "codebertscore_f3-159": 0.7865331768989563,
        "codebertscore_f1-22": 0.5273554921150208,
        "codebertscore_f3-22": 0.48190411925315857,
        "codebertscore_f1-177": 0.5873342752456665,
        "codebertscore_f3-177": 0.5670487880706787,
        "codebertscore_f1-119": 0.7837562561035156,
        "codebertscore_f3-119": 0.7923539876937866,
        "codebertscore_f1-8": 0.7855511903762817,
        "codebertscore_f3-8": 0.7795778512954712,
        "codebertscore_f1-7": 0.81121426820755,
        "codebertscore_f3-7": 0.8033888936042786,
        "codebertscore_f1-23": 0.7749738097190857,
        "codebertscore_f3-23": 0.7779368758201599,
        "codebertscore_f1-61": 0.7671339511871338,
        "codebertscore_f3-61": 0.765316367149353,
        "codebertscore_f1-66": 0.825219452381134,
        "codebertscore_f3-66": 0.8079071640968323,
        "codebertscore_f1-148": 0.7459704279899597,
        "codebertscore_f3-148": 0.7040748596191406,
        "codebertscore_f1-180": 0.7983402609825134,
        "codebertscore_f3-180": 0.7657217979431152,
        "codebertscore_f1-164": 0.6436841487884521,
        "codebertscore_f3-164": 0.6173008680343628,
        "codebertscore_s_f1-190": 0.8036221265792847,
        "codebertscore_s_f3-190": 0.800487756729126,
        "codebertscore_s_f1-29": 0.8264493346214294,
        "codebertscore_s_f3-29": 0.8074942827224731,
        "codebertscore_s_f1-6": 0.814715564250946,
        "codebertscore_s_f3-6": 0.8028321266174316,
        "codebertscore_s_f1-77": 0.8294107913970947,
        "codebertscore_s_f3-77": 0.814667284488678,
        "codebertscore_s_f1-69": 0.5965269207954407,
        "codebertscore_s_f3-69": 0.5816397070884705,
        "codebertscore_s_f1-64": 0.8332367539405823,
        "codebertscore_s_f3-64": 0.8274171352386475,
        "codebertscore_s_f1-36": 0.7813808917999268,
        "codebertscore_s_f3-36": 0.78875333070755,
        "codebertscore_s_f1-26": 0.8044657111167908,
        "codebertscore_s_f3-26": 0.8252876996994019,
        "codebertscore_s_f1-159": 0.8185284733772278,
        "codebertscore_s_f3-159": 0.8096092939376831,
        "codebertscore_s_f1-22": 0.6029648184776306,
        "codebertscore_s_f3-22": 0.547656238079071,
        "codebertscore_s_f1-177": 0.5737732648849487,
        "codebertscore_s_f3-177": 0.5573573112487793,
        "codebertscore_s_f1-119": 0.8035612106323242,
        "codebertscore_s_f3-119": 0.8092783689498901,
        "codebertscore_s_f1-8": 0.8014897704124451,
        "codebertscore_s_f3-8": 0.7962186932563782,
        "codebertscore_s_f1-7": 0.8284409642219543,
        "codebertscore_s_f3-7": 0.8189247250556946,
        "codebertscore_s_f1-23": 0.797327995300293,
        "codebertscore_s_f3-23": 0.8029085397720337,
        "codebertscore_s_f1-61": 0.7878768444061279,
        "codebertscore_s_f3-61": 0.7891163229942322,
        "codebertscore_s_f1-66": 0.8437670469284058,
        "codebertscore_s_f3-66": 0.828082263469696,
        "codebertscore_s_f1-148": 0.7783312201499939,
        "codebertscore_s_f3-148": 0.736316978931427,
        "codebertscore_s_f1-180": 0.8210551142692566,
        "codebertscore_s_f3-180": 0.7909022569656372,
        "codebertscore_s_f1-164": 0.6722375750541687,
        "codebertscore_s_f3-164": 0.6447573900222778,
        "gpt35_nsnr-190": 4,
        "raw_gpt35_nsnr-190": "4",
        "gpt35_nsnr-29": 3,
        "raw_gpt35_nsnr-29": "3",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-77": 4,
        "raw_gpt35_nsnr-77": "4",
        "gpt35_nsnr-69": 0,
        "raw_gpt35_nsnr-69": "0",
        "gpt35_nsnr-64": 2,
        "raw_gpt35_nsnr-64": "2",
        "gpt35_nsnr-36": 3,
        "raw_gpt35_nsnr-36": "3",
        "gpt35_nsnr-26": 3,
        "raw_gpt35_nsnr-26": "3",
        "gpt35_nsnr-159": 4,
        "raw_gpt35_nsnr-159": "4",
        "gpt35_nsnr-22": 0,
        "raw_gpt35_nsnr-22": "0",
        "gpt35_nsnr-177": 0,
        "raw_gpt35_nsnr-177": "0",
        "gpt35_nsnr-119": 4,
        "raw_gpt35_nsnr-119": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 3,
        "raw_gpt35_nsnr-23": "3",
        "gpt35_nsnr-61": 4,
        "raw_gpt35_nsnr-61": "4",
        "gpt35_nsnr-66": 4,
        "raw_gpt35_nsnr-66": "4",
        "gpt35_nsnr-148": 2,
        "raw_gpt35_nsnr-148": "2",
        "gpt35_nsnr-180": 3,
        "raw_gpt35_nsnr-180": "3",
        "gpt35_nsnr-164": 3,
        "raw_gpt35_nsnr-164": "3",
        "gpt35_nswr-190": 3,
        "raw_gpt35_nswr-190": "3",
        "gpt35_nswr-29": 2,
        "raw_gpt35_nswr-29": "2",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-77": 4,
        "raw_gpt35_nswr-77": "4",
        "gpt35_nswr-69": 0,
        "raw_gpt35_nswr-69": "0",
        "gpt35_nswr-64": 2,
        "raw_gpt35_nswr-64": "2",
        "gpt35_nswr-36": 2,
        "raw_gpt35_nswr-36": "2",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-159": 3,
        "raw_gpt35_nswr-159": "3",
        "gpt35_nswr-22": 0,
        "raw_gpt35_nswr-22": "0",
        "gpt35_nswr-177": 0,
        "raw_gpt35_nswr-177": "0",
        "gpt35_nswr-119": 4,
        "raw_gpt35_nswr-119": "4",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-61": 3,
        "raw_gpt35_nswr-61": "3",
        "gpt35_nswr-66": 3,
        "raw_gpt35_nswr-66": "3",
        "gpt35_nswr-148": 2,
        "raw_gpt35_nswr-148": "2",
        "gpt35_nswr-180": 3,
        "raw_gpt35_nswr-180": "3",
        "gpt35_nswr-164": 3,
        "raw_gpt35_nswr-164": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    // For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    // For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    // For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    // For lst = [0,81,12,3,1,21] the output should be 3\n    // For lst = [0,8,1,2,1,7] the output should be 7\n    public static int skjkasdkd(ArrayList<Integer> lst) {\n",
        "snippet": [
            "        int maxx = 0;\n        for (int i : lst) {\n            if (i > maxx) {\n                boolean isPrime = i != 1;\n                for (int j = 2; j < Math.sqrt(i) + 1; j++) {\n                    if (i % j == 0) {\n                        isPrime = false;\n                        break;\n                    }\n                }\n                if (isPrime) {\n                    maxx = i;\n                }\n            }\n        }\n        int sum = 0;\n        for (char c : String.valueOf(maxx).toCharArray()) {\n            sum += (c - '0');\n        }\n        return sum;\n    }\n}"
        ],
        "simplified": "You are given a list of integers. You need to find the largest prime value and return the sum of its digits.",
        "task_id": "94",
        "168": "if (lst.size() == 0) {\n            return 0;\n        }\n        // 1. Get the largest prime number.\n        int max = lst.stream().max(Comparator.naturalOrder()).get();\n        // 2. Write a method that checks if a given number is prime.\n        boolean isPrime = max == 2 || max % 2 != 0 && IntStream.rangeClosed(3, (int) Math.sqrt(max)).filter(n -> max % n == 0).count() == 0;\n        // 3. If the max number is not prime, get the next highest prime number.\n        if (!isPrime) {\n            return skjkasdkd(new ArrayList<Integer>(lst.stream().filter(e -> e < max).collect(Collectors.toList())));\n        }\n        // 4. Find the sum of digits for the found prime number.\n        return max;",
        "grade-168": {
            "execution": 0
        },
        "29": "// your code here\n        lst.sort(Comparator.reverseOrder());\n        boolean notprime = true;\n        int i = 0;\n        for (; i < lst.size(); i++) {\n            if (lst.get(i) <= 1) {\n                continue;\n            }\n            int cur = lst.get(i);\n            for (int j = 2; j <= Math.sqrt(cur); j++) {\n                if (cur % j == 0) {\n                    notprime = false;\n                    break;\n                }\n            }\n            if (notprime) {\n                break;\n            }\n            notprime = true;\n        }\n        return i < lst.size() ? lst.get(i) : 0;",
        "grade-29": {
            "execution": 0
        },
        "6": "ArrayList<Integer> primes = new ArrayList<Integer>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (isPrime(lst.get(i))) {\n                primes.add(lst.get(i));\n            }\n        }\n        int prime = Collections.max(primes);\n        int sum = 0;\n        while (prime > 0) {\n            sum += prime % 10;\n            prime /= 10;\n        }\n        return sum;",
        "grade-6": {
            "execution": 0
        },
        "199": "int ans = 0;\n        // Write your code here\n        return ans;",
        "grade-199": {
            "execution": 0
        },
        "72": "// TODO add code here\n        int sum = 0;\n        for (int i : lst) {\n            if (isPrime(i))\n                sum += i;\n        }\n        return sum;",
        "grade-72": {
            "execution": 0
        },
        "64": "// Math.sqrt\n        // Integer.valueOf\n        // Character.getNumericValue\n        // String.valueOf\n        // String.toCharArray\n        // String.split\n        // String.format\n        // arraylist.size\n        // arraylist.get\n        // StringBuilder.append\n        // StringBuilder.toString\n        // arraylist.set\n        // arraylist.remove\n        // arraylist.add\n        // arraylist.contains\n        // arraylist.indexOf\n        // arraylist.lastIndexOf\n        // arraylist.sort\n        // arraylist.stream\n        // arraylist.map\n        // arraylist.collect\n        // arraylist.reduce\n        // arraylist.count\n        // arraylist.filter\n        // arraylist.forEach\n        // arraylist.iterator\n        // arraylist.spliterator\n        // Optional.ofNullable\n        // Integer.bitCount\n        // Integer.rotateLeft\n        // Integer.rotateRight\n        // Integer.toBinaryString\n        // Integer.toHexString\n        // Integer.toUnsignedString\n        // Integer.highestOneBit\n        // Integer.lowestOneBit\n        // Integer.numberOfLeadingZeros\n        // Integer.numberOfTrailingZeros\n        // Integer.reverse\n        // Integer.reverseBytes\n        // Integer.signum\n        // Integer.sum\n        // Integer.toUnsignedLong\n        // Integer.divideUnsigned\n        // Integer.remainderUnsigned\n        // Integer.compareUnsigned\n        // Integer.parseUnsignedInt\n        // Integer.toUnsignedString\n        // Integer.hashCode\n        // Arrays.binarySearch\n        // Arrays.copyOf\n        // Arrays.copyOfRange\n        // Arrays.equals\n        // Arrays.fill\n        // Arrays.sort\n        // Arrays.hashCode\n        // Arrays.stream\n        // Character.charCount\n        // Character.codePointAt\n        // Character.codePointBefore\n        // Character.codePointCount\n        // Character.compare\n        // Character.digit\n        // Character.forDigit\n        // Character.getDirectionality\n        // Character.get",
        "grade-64": {
            "execution": 0
        },
        "59": "int largest_prime = 2;\n        for (int item : lst) {\n            if (isPrime(item) && item > largest_prime) {\n                largest_prime = item;\n            }\n        }\n        return Integer.toString(largest_prime).chars().map(c -> c - '0').sum();",
        "grade-59": {
            "execution": 0
        },
        "36": "// Write your code here.\n        int result = -1;\n        return result;",
        "grade-36": {
            "execution": 0
        },
        "198": "// sort\n        Collections.sort(lst);\n        // now find the first prime\n        int i;\n        for (i = lst.size() - 1; i >= 0; i--) {\n            if (isPrime(lst.get(i))) {\n                break;\n            }\n        }\n        // now if not found, just return 0\n        if (i < 0) {\n            return 0;\n        }\n        // otherwise just add the digits\n        return addDigits(lst.get(i));",
        "grade-198": {
            "execution": 0
        },
        "27": "// implement me\n        return 0;",
        "grade-27": {
            "execution": 0
        },
        "180": "lst.sort(Collections.reverseOrder());\n        int largestPrime = 0;\n        while (lst.size() > 0) {\n            int value = lst.get(0);\n            if (isPrime(value)) {\n                largestPrime = value;\n                break;\n            }\n            lst.remove(0);\n        }\n        return sumDigits(largestPrime);",
        "grade-180": {
            "execution": 0
        },
        "142": "int largestPrime = 0;\n        int largestPrimeSumOfDigits = 0;\n        ArrayList<Integer> listOfPrimes = new ArrayList<Integer>();\n        for (int x = 0; x < lst.size(); x++) {\n            for (int y = 0; y < lst.size(); y++) {\n                if (x != y) {\n                    if (isPrime(lst.get(x) + lst.get(y))) {\n                        if (lst.get(x) + lst.get(y) > largestPrime) {\n                            largestPrime = lst.get(x) + lst.get(y);\n                        }\n                    }\n                }\n            }\n        }\n        while (largestPrime > 0) {\n            largestPrimeSumOfDigits += largestPrime % 10;\n            largestPrime /= 10;\n        }\n        return largestPrimeSumOfDigits;",
        "grade-142": {
            "execution": 0
        },
        "23": "int ret = 0;\n        return ret;",
        "grade-23": {
            "execution": 0
        },
        "155": "ArrayList<Integer> primes = new ArrayList<Integer>();\n        for (int i = 2; i < 100000; i++) {\n            boolean isPrime = true;\n            for (int j = 2; j < i; j++) {\n                if (i % j == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                primes.add(i);\n            }\n        }\n        System.out.println(primes);\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        return max;",
        "grade-155": {
            "execution": 0
        },
        "111": "// first find the largest prime number\n        HashSet<Integer> primes = new HashSet<Integer>();\n        for (int i = 0; i < lst.size(); i++) {\n            int num = lst.get(i);\n            if (isPrime(num)) {\n                primes.add(num);\n            }\n        }\n        // now return the sum of the digits in that number\n        int val = 0;\n        // find the largest prime\n        for (int num : primes) {\n            if (num > val) {\n                val = num;\n            }\n        }\n        // we have the largest number, we need to sum it\n        int rtn = 0;\n        while (val > 0) {\n            rtn += val % 10;\n            val /= 10;\n        }\n        return rtn;",
        "grade-111": {
            "execution": 0
        },
        "8": "int max = lst.stream().max(Integer::compare).get();\n        for (int i = 2; i < max; i++) {\n            boolean isPrime = true;\n            for (int j = 2; j < i; j++) {\n                if (i % j == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                System.out.println(i);\n            }\n        }\n        return 0;",
        "grade-8": {
            "execution": 0
        },
        "7": "// Type your code here\n      List<Integer> copy = new ArrayList<Integer>(lst);\n      Set<Integer> primes = new HashSet<Integer>();\n      for (int i = 0; i < copy.size(); i++) {\n        int candidate = copy.get(i);\n        for (int j = 2; j <= Math.sqrt(candidate); j++) {\n          if (candidate % j == 0) {\n            primes.add(candidate);\n            break;\n          }\n        }\n      }\n      primes.forEach(e -> copy.remove(e));\n      copy.sort((a, b) -> b - a);\n      int sum = 0;\n      while (copy.get(0) > 0) {\n        sum += copy.get(0) % 10;\n        copy.set(0, copy.get(0) / 10);\n      }\n      return sum;",
        "grade-7": {
            "execution": 1
        },
        "24": "// int max = Collections.max(lst);\n        // int sum = 0;\n        // for (int i = 0; i < lst.size(); i++) {\n        //     if (isPrime(lst.get(i))) {\n        //         if (lst.get(i) > max) {\n        //             max = lst.get(i);\n        //         }\n        //     }\n        // }\n        // String temp = String.valueOf(max);\n        // for (int i = 0; i < temp.length(); i++) {\n        //     sum += Character.getNumericValue(temp.charAt(i));\n        // }\n        // return sum;\n        int largest = -1;\n        for (int i = 0; i < lst.size(); i++) {\n            if (isPrime(lst.get(i))) {\n                if (lst.get(i) > largest) {\n                    largest = lst.get(i);\n                }\n            }\n        }\n        String s = String.valueOf(largest);\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            sum += Character.getNumericValue(s.charAt(i));\n        }\n        return sum;",
        "grade-24": {
            "execution": 0
        },
        "57": "Integer max = Collections.max(lst);\n        return getDigitSum(getPrime(max));",
        "grade-57": {
            "execution": 0
        },
        "61": "// Ok so if the question was find the greatest prime number, then use a isPrime function,\n        // and have a max_prime, and just check every number.\n        // That was not the question.\n        // The question was find the largest prime and sum its digits.\n        // That means we have to iterate through the list twice, once to find the prime, and once to get the sum.\n        int biggestPrime = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int num = lst.get(i);\n            if (isPrime(num) && num > biggestPrime) {\n                biggestPrime = num;\n            }\n        }\n        // System.out.println(biggestPrime);\n        int sum = 0;\n        String str = String.valueOf(biggestPrime);\n        for (int i = 0; i < str.length(); i++) {\n            char c = str.charAt(i);\n            sum += Character.getNumericValue(c);\n        }\n        return sum;",
        "grade-61": {
            "execution": 0
        },
        "bleu-168": 0.09245120524141112,
        "bleu-29": 0.3379968719861695,
        "bleu-6": 0.2327257315277083,
        "bleu-199": 4.217165331135057e-05,
        "bleu-72": 0.05500850795121209,
        "bleu-64": 0.015228166980572291,
        "bleu-59": 0.11461538787901648,
        "bleu-36": 7.147510129095394e-05,
        "bleu-198": 0.12490186840700587,
        "bleu-27": 6.0177175970894705e-09,
        "bleu-180": 0.09800904298979787,
        "bleu-142": 0.14975380238077293,
        "bleu-23": 9.602114581842285e-08,
        "bleu-155": 0.41086040501228593,
        "bleu-111": 0.1475396041102221,
        "bleu-8": 0.4271532195063506,
        "bleu-7": 0.2562507652846286,
        "bleu-24": 0.15942246542534855,
        "bleu-57": 0.0006424788004737735,
        "bleu-61": 0.16041546858466077,
        "codebleu-168": 0.4662902621903569,
        "codebleu-29": 0.6381271500885265,
        "codebleu-6": 0.4768749574247885,
        "codebleu-199": 0.05492626227624182,
        "codebleu-72": 0.16173785570908433,
        "codebleu-64": 0.17549019607843136,
        "codebleu-59": 0.2939291221860923,
        "codebleu-36": 0.054960685418512664,
        "codebleu-198": 0.4285983678829487,
        "codebleu-27": 0.015686337414327598,
        "codebleu-180": 0.31818063831739973,
        "codebleu-142": 0.5763689999869216,
        "codebleu-23": 0.039216420115979284,
        "codebleu-155": 0.6579825504489603,
        "codebleu-111": 0.5821961982472488,
        "codebleu-8": 0.5404712321783371,
        "codebleu-7": 0.6001038846150171,
        "codebleu-24": 0.6148583518948679,
        "codebleu-57": 0.0903741669111801,
        "codebleu-61": 0.5478711415910582,
        "chrf-168": 0.2838610697149915,
        "chrf-29": 0.4047433567526927,
        "chrf-6": 0.3092282965362463,
        "chrf-199": 0.053767187795607546,
        "chrf-72": 0.24202416795427653,
        "chrf-64": 0.12459999828924943,
        "chrf-59": 0.26839702522655373,
        "chrf-36": 0.05949121638272488,
        "chrf-198": 0.23745683377752255,
        "chrf-27": 0.037483531867881156,
        "chrf-180": 0.25758570406777903,
        "chrf-142": 0.2843370733995776,
        "chrf-23": 0.03848233278598679,
        "chrf-155": 0.4993138810488736,
        "chrf-111": 0.26904463622173197,
        "chrf-8": 0.49088925193424787,
        "chrf-7": 0.36306683484609864,
        "chrf-24": 0.37368251212971954,
        "chrf-57": 0.09928564197786352,
        "chrf-61": 0.32494788420508075,
        "rougel-168": 0.3021148036253777,
        "rougel-29": 0.5263157894736842,
        "rougel-6": 0.3947368421052631,
        "rougel-199": 0.08571428571428572,
        "rougel-72": 0.345679012345679,
        "rougel-64": 0.04669260700389105,
        "rougel-59": 0.39361702127659576,
        "rougel-36": 0.09859154929577463,
        "rougel-198": 0.3274336283185841,
        "rougel-27": 0.03007518796992481,
        "rougel-180": 0.3535353535353536,
        "rougel-142": 0.34868421052631576,
        "rougel-23": 0.08955223880597014,
        "rougel-155": 0.572463768115942,
        "rougel-111": 0.36042402826855124,
        "rougel-8": 0.5714285714285714,
        "rougel-7": 0.4528301886792453,
        "rougel-24": 0.3781094527363184,
        "rougel-57": 0.14864864864864863,
        "rougel-61": 0.3508771929824561,
        "meteor-168": 0.3262864129389155,
        "meteor-29": 0.4128372016135744,
        "meteor-6": 0.3821437745838397,
        "meteor-199": 0.02613240418118467,
        "meteor-72": 0.19863722697056027,
        "meteor-64": 0.07227332457293036,
        "meteor-59": 0.27185457485416153,
        "meteor-36": 0.034782608695652174,
        "meteor-198": 0.2941033905870137,
        "meteor-27": 0.013146362839614375,
        "meteor-180": 0.23951985633960374,
        "meteor-142": 0.391666886517432,
        "meteor-23": 0.026269702276707527,
        "meteor-155": 0.5561577102803739,
        "meteor-111": 0.3839463520406113,
        "meteor-8": 0.46284908842065176,
        "meteor-7": 0.4741655368705574,
        "meteor-24": 0.4592308510638297,
        "meteor-57": 0.06055363321799308,
        "meteor-61": 0.45278024006200684,
        "ruby-168": 0.18536585365853664,
        "ruby-29": 0.2928571428571428,
        "ruby-6": 0.2777777777777778,
        "ruby-199": 0.04761904761904767,
        "ruby-72": 0.19841269841269837,
        "ruby-64": 0.01804123711340211,
        "ruby-59": 0.2777777777777778,
        "ruby-36": 0.05555555555555558,
        "ruby-198": 0.18253968253968256,
        "ruby-27": 0.015873015873015928,
        "ruby-180": 0.2222222222222222,
        "ruby-142": 0.2247191011235955,
        "ruby-23": 0.04761904761904767,
        "ruby-155": 0.41333333333333333,
        "ruby-111": 0.197452229299363,
        "ruby-8": 0.3650793650793651,
        "ruby-7": 0.30729166666666663,
        "ruby-24": 0.24637681159420288,
        "ruby-57": 0.08730158730158732,
        "ruby-61": 0.18981481481481477,
        "codebertscore_f1-168": 0.7301555871963501,
        "codebertscore_f3-168": 0.7505529522895813,
        "codebertscore_f1-29": 0.7855848073959351,
        "codebertscore_f3-29": 0.7886924743652344,
        "codebertscore_f1-6": 0.7512573599815369,
        "codebertscore_f3-6": 0.7336099743843079,
        "codebertscore_f1-199": 0.6203295588493347,
        "codebertscore_f3-199": 0.5803418755531311,
        "codebertscore_f1-72": 0.7488583922386169,
        "codebertscore_f3-72": 0.7199794054031372,
        "codebertscore_f1-64": 0.6360362768173218,
        "codebertscore_f3-64": 0.6530712246894836,
        "codebertscore_f1-59": 0.759369969367981,
        "codebertscore_f3-59": 0.7399387359619141,
        "codebertscore_f1-36": 0.6165902614593506,
        "codebertscore_f3-36": 0.584551990032196,
        "codebertscore_f1-198": 0.7371415495872498,
        "codebertscore_f3-198": 0.7402098178863525,
        "codebertscore_f1-27": 0.5500092506408691,
        "codebertscore_f3-27": 0.5017194747924805,
        "codebertscore_f1-180": 0.7315025329589844,
        "codebertscore_f3-180": 0.7140735387802124,
        "codebertscore_f1-142": 0.7538595795631409,
        "codebertscore_f3-142": 0.7581707835197449,
        "codebertscore_f1-23": 0.6423875689506531,
        "codebertscore_f3-23": 0.5672683715820312,
        "codebertscore_f1-155": 0.8054789304733276,
        "codebertscore_f3-155": 0.8112229108810425,
        "codebertscore_f1-111": 0.7436488270759583,
        "codebertscore_f3-111": 0.7514161467552185,
        "codebertscore_f1-8": 0.8234046697616577,
        "codebertscore_f3-8": 0.8010258674621582,
        "codebertscore_f1-7": 0.7779009938240051,
        "codebertscore_f3-7": 0.7945238947868347,
        "codebertscore_f1-24": 0.7707256078720093,
        "codebertscore_f3-24": 0.7853599786758423,
        "codebertscore_f1-57": 0.6600071787834167,
        "codebertscore_f3-57": 0.6108846068382263,
        "codebertscore_f1-61": 0.7551957964897156,
        "codebertscore_f3-61": 0.7855896949768066,
        "codebertscore_s_f1-168": 0.7432514429092407,
        "codebertscore_s_f3-168": 0.7691181302070618,
        "codebertscore_s_f1-29": 0.8077980279922485,
        "codebertscore_s_f3-29": 0.8109952807426453,
        "codebertscore_s_f1-6": 0.7857566475868225,
        "codebertscore_s_f3-6": 0.7751265168190002,
        "codebertscore_s_f1-199": 0.6613841652870178,
        "codebertscore_s_f3-199": 0.6426714658737183,
        "codebertscore_s_f1-72": 0.7898848652839661,
        "codebertscore_s_f3-72": 0.7713709473609924,
        "codebertscore_s_f1-64": 0.654496967792511,
        "codebertscore_s_f3-64": 0.6762278079986572,
        "codebertscore_s_f1-59": 0.7992821335792542,
        "codebertscore_s_f3-59": 0.7825056314468384,
        "codebertscore_s_f1-36": 0.6511318683624268,
        "codebertscore_s_f3-36": 0.6411617398262024,
        "codebertscore_s_f1-198": 0.7588102221488953,
        "codebertscore_s_f3-198": 0.7688546180725098,
        "codebertscore_s_f1-27": 0.5970130562782288,
        "codebertscore_s_f3-27": 0.5630548596382141,
        "codebertscore_s_f1-180": 0.7662215828895569,
        "codebertscore_s_f3-180": 0.7565503120422363,
        "codebertscore_s_f1-142": 0.7730284333229065,
        "codebertscore_s_f3-142": 0.7799268364906311,
        "codebertscore_s_f1-23": 0.7071863412857056,
        "codebertscore_s_f3-23": 0.6418985724449158,
        "codebertscore_s_f1-155": 0.8284025192260742,
        "codebertscore_s_f3-155": 0.834007978439331,
        "codebertscore_s_f1-111": 0.7607195973396301,
        "codebertscore_s_f3-111": 0.7710346579551697,
        "codebertscore_s_f1-8": 0.8463009595870972,
        "codebertscore_s_f3-8": 0.8338058590888977,
        "codebertscore_s_f1-7": 0.7908448576927185,
        "codebertscore_s_f3-7": 0.8115148544311523,
        "codebertscore_s_f1-24": 0.7889741063117981,
        "codebertscore_s_f3-24": 0.8009821772575378,
        "codebertscore_s_f1-57": 0.6964031457901001,
        "codebertscore_s_f3-57": 0.657645046710968,
        "codebertscore_s_f1-61": 0.7693220376968384,
        "codebertscore_s_f3-61": 0.8001633882522583,
        "gpt35_nsnr-168": 4,
        "raw_gpt35_nsnr-168": "4",
        "gpt35_nsnr-29": 3,
        "raw_gpt35_nsnr-29": "3",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-199": 2,
        "raw_gpt35_nsnr-199": "2",
        "gpt35_nsnr-72": 2,
        "raw_gpt35_nsnr-72": "2",
        "gpt35_nsnr-64": 3,
        "raw_gpt35_nsnr-64": "3",
        "gpt35_nsnr-59": 3,
        "raw_gpt35_nsnr-59": "3",
        "gpt35_nsnr-36": 2,
        "raw_gpt35_nsnr-36": "2",
        "gpt35_nsnr-198": 3,
        "raw_gpt35_nsnr-198": "3",
        "gpt35_nsnr-27": 0,
        "raw_gpt35_nsnr-27": "0",
        "gpt35_nsnr-180": 4,
        "raw_gpt35_nsnr-180": "4",
        "gpt35_nsnr-142": 2,
        "raw_gpt35_nsnr-142": "2",
        "gpt35_nsnr-23": 2,
        "raw_gpt35_nsnr-23": "2",
        "gpt35_nsnr-155": 2,
        "raw_gpt35_nsnr-155": "2",
        "gpt35_nsnr-111": 4,
        "raw_gpt35_nsnr-111": "4",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-24": 4,
        "raw_gpt35_nsnr-24": "4",
        "gpt35_nsnr-57": 0,
        "raw_gpt35_nsnr-57": "3 - The code correctly finds the largest prime value in the given list and returns the sum of its digits. However, the implementation of the getPrime() method is missing and it is unclear how it handles finding prime numbers. Without this method, it is impossible to determine if the code passes all possible tests.",
        "gpt35_nsnr-61": 4,
        "raw_gpt35_nsnr-61": "4",
        "gpt35_nswr-168": 4,
        "raw_gpt35_nswr-168": "4",
        "gpt35_nswr-29": 3,
        "raw_gpt35_nswr-29": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-199": 0,
        "raw_gpt35_nswr-199": "0",
        "gpt35_nswr-72": 2,
        "raw_gpt35_nswr-72": "2",
        "gpt35_nswr-64": 4,
        "raw_gpt35_nswr-64": "4",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3",
        "gpt35_nswr-36": 2,
        "raw_gpt35_nswr-36": "2",
        "gpt35_nswr-198": 3,
        "raw_gpt35_nswr-198": "3",
        "gpt35_nswr-27": 4,
        "raw_gpt35_nswr-27": "4",
        "gpt35_nswr-180": 3,
        "raw_gpt35_nswr-180": "3",
        "gpt35_nswr-142": 2,
        "raw_gpt35_nswr-142": "2",
        "gpt35_nswr-23": 0,
        "raw_gpt35_nswr-23": "0",
        "gpt35_nswr-155": 2,
        "raw_gpt35_nswr-155": "2",
        "gpt35_nswr-111": 4,
        "raw_gpt35_nswr-111": "4",
        "gpt35_nswr-8": 2,
        "raw_gpt35_nswr-8": "2",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-24": 3,
        "raw_gpt35_nswr-24": "3",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-61": 4,
        "raw_gpt35_nswr-61": "4"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given a list of integers.\n    // Write a function next_smallest() that returns the 2nd smallest element of the list.\n    // Return None if there is no such element.\n    // next_smallest([1, 2, 3, 4, 5]) == 2\n    // next_smallest([5, 1, 4, 3, 2]) == 2\n    // next_smallest([]) == None\n    // next_smallest([1, 1]) == None\n    public static Optional<Integer> nextSmallest(ArrayList<Integer> lst) {\n",
        "snippet": [
            "                Set < Integer > set = new HashSet<>(lst);\n        List<Integer> l = new ArrayList<>(set);\n        Collections.sort(l);\n        if (l.size() < 2) {\n            return Optional.empty();\n        } else {\n            return Optional.of(l.get(1));\n        }\n    }\n}"
        ],
        "simplified": "You are given a list of integers. Write a function next_smallest() that returns the 2nd smallest element of the list. Return None if there is no such element.",
        "task_id": "90",
        "187": "if (lst.size() <= 1) {\n            return Optional.empty();\n        }\n        lst.sort(null);\n        // int sma = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) != lst.get(i - 1)) {\n                return Optional.of(lst.get(i));\n            }\n        }\n        return Optional.empty();",
        "grade-187": {
            "execution": 0
        },
        "30": "// replace this by your code\n        return null;",
        "grade-30": {
            "execution": 0
        },
        "6": "return lst.stream().distinct().sorted().skip(1).findFirst();",
        "grade-6": {
            "execution": 0
        },
        "83": "ArrayList<Integer> sorted = new ArrayList<>(lst);\n        Collections.sort(sorted);\n        Integer min = sorted.get(0);\n        Integer min2 = null;\n        for (Integer i : sorted) {\n            if (i > min) {\n                min2 = i;\n                break;\n            }\n        }\n        return Optional.ofNullable(min2);",
        "grade-83": {
            "execution": 0
        },
        "71": "if (lst.size() == 0) {\n            return Optional.empty();\n        }\n        if (lst.size() == 1) {\n            return Optional.empty();\n        }\n        if (lst.size() == 2) {\n            if (lst.get(0) == lst.get(1)) {\n                return Optional.empty();\n            }\n        }\n        // System.out.println(lst);\n        HashSet<Integer> set = new HashSet<>();\n        for (int i = 0; i < lst.size(); i++) {\n            set.add(lst.get(i));\n        }\n        ArrayList<Integer> arr = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            arr.add(lst.get(i));\n        }\n        Collections.sort(arr);\n        // System.out.println(arr);\n        // System.out.println(set);\n        int count = 0;\n        int idx = 0;\n        while (idx < arr.size()) {\n            if (set.contains(arr.get(idx))) {\n                count++;\n                if (count == 2) {\n                    return Optional.of(arr.get(idx));\n                }\n            }\n            idx++;\n        }\n        return Optional.empty();",
        "grade-71": {
            "execution": 0
        },
        "64": "throw new RuntimeException(\"Not implemented yet\");",
        "grade-64": {
            "execution": 0
        },
        "37": "int smallest = lst.get(0);\n        int second_smallest = -1;\n        for (int i = 1; i < lst.size(); i++) {\n            int n = lst.get(i);\n            if (n < smallest) {\n                second_smallest = smallest;\n                smallest = n;\n            } else if (n > smallest && (second_smallest == -1 || n < second_smallest)) {\n                second_smallest = n;\n            }\n        }\n        if (second_smallest == -1) {\n            return Optional.empty();\n        } else {\n            return Optional.of(second_smallest);\n        }",
        "grade-37": {
            "execution": 0
        },
        "28": "if (lst.size() <= 1) return Optional.empty();\n        HashSet<Integer> seen = new HashSet<Integer>();\n        Optional<Integer> min = Optional.empty();\n        int minIdx = -1;\n        for (int i = 0; i < lst.size(); i++) {\n            int cur = lst.get(i);\n            if (seen.contains(cur)) return Optional.empty();\n            if (!min.isPresent() || cur < min.get()) {\n                min = Optional.of(cur);\n                minIdx = i;\n            }\n            seen.add(cur);\n        }\n        Optional<Integer> sec = Optional.empty();\n        for (int i = 0; i < lst.size(); i++) {\n            if (i == minIdx) continue;\n            int cur = lst.get(i);\n            if (!sec.isPresent() || cur < sec.get()) {\n                sec = Optional.of(cur);\n            }\n        }\n        return sec;",
        "grade-28": {
            "execution": 0
        },
        "199": "if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\n        Integer smallest = lst.get(0);\n        Integer secondSmallest = null;\n        for (Integer i : lst) {\n            if (i <= smallest) {\n                secondSmallest = smallest;\n                smallest = i;\n            } else if (secondSmallest == null || i < secondSmallest) {\n                secondSmallest = i;\n            }\n        }\n\n        return Optional.ofNullable(secondSmallest);",
        "grade-199": {
            "execution": 0
        },
        "160": "// your code here\n        return Optional.empty();",
        "grade-160": {
            "execution": 0
        },
        "23": "Optional<Integer> nextSmallest = Optional.empty();\n        Optional<Integer> smallest = Optional.empty();\n        for (Integer n : lst) {\n            if (!smallest.isPresent() || n < smallest.get()) {\n                smallest = Optional.of(n);\n            } else if (!nextSmallest.isPresent() || n < nextSmallest.get()) {\n                nextSmallest = Optional.of(n);\n            }\n        }\n        return nextSmallest;",
        "grade-23": {
            "execution": 0
        },
        "174": "if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\n        ArrayList<Integer> sorted = new ArrayList<Integer>(lst);\n        Collections.sort(sorted);\n\n        Integer first = sorted.get(0);\n        for (Integer i : sorted) {\n            if (!i.equals(first)) {\n                return Optional.of(i);\n            }\n        }\n\n        return Optional.empty();",
        "grade-174": {
            "execution": 0
        },
        "124": "if (lst.size() <= 1) {\n            return Optional.empty();\n        }\n        int smallest = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < smallest) {\n                smallest = lst.get(i);\n            }\n        }\n        ArrayList<Integer> smallerThanSmallest = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > smallest) {\n                smallerThanSmallest.add(lst.get(i));\n            }\n        }\n        if (smallerThanSmallest.size() == 0) {\n            return Optional.empty();\n        }\n        int nextSmallest = smallerThanSmallest.get(0);\n        for (int i = 1; i < smallerThanSmallest.size(); i++) {\n            if (smallerThanSmallest.get(i) < nextSmallest) {\n                nextSmallest = smallerThanSmallest.get(i);\n            }\n        }\n        return Optional.of(nextSmallest);",
        "grade-124": {
            "execution": 0
        },
        "8": "// Write the code for this function.\n        if (lst.size() <= 1) {\n            return Optional.empty();\n        }\n        if (lst.size() == 2) {\n            return Optional.of(lst.get(1));\n        }\n        Integer min = lst.get(0);\n        Integer min2 = Integer.MAX_VALUE;\n        for (Integer i : lst) {\n            if (i < min) {\n                min2 = min;\n                min = i;\n            } else if (i < min2) {\n                min2 = i;\n            }\n        }\n        if (min2 != Integer.MAX_VALUE) {\n            return Optional.of(min2);\n        }\n        return Optional.empty();",
        "grade-8": {
            "execution": 0
        },
        "7": "// TODO: Implement nextSmallest here\n        return Optional.empty();",
        "grade-7": {
            "execution": 0
        },
        "24": "if (lst.size() == 0) {\n            return Optional.empty();\n        } else if (lst.size() == 1) {\n            return Optional.empty();\n        } else {\n            int first = lst.get(0);\n            for (int i = 1; i < lst.size(); i++) {\n                if (lst.get(i) < first) {\n                    return Optional.of(first);\n                } else {\n                    first = lst.get(i);\n                }\n            }\n            return Optional.empty();\n        }",
        "grade-24": {
            "execution": 0
        },
        "61": "// TODO\n        // Hint: You can use sorted(lst).\n        if (lst.size() <= 1) {\n            return Optional.empty();\n        } else {\n            Collections.sort(lst);\n            int first = lst.get(0);\n            int second = lst.get(1);\n            int firstNum = 0;\n            int secondNum = 0;\n            for (int i : lst) {\n                if (i == first) {\n                    firstNum += 1;\n                } else if (i == second) {\n                    secondNum += 1;\n                }\n            }\n            if (first == second) {\n                return Optional.empty();\n            } else {\n                return Optional.of(lst.get(firstNum));\n            }\n        }",
        "grade-61": {
            "execution": 0
        },
        "68": "Collections.sort(lst);\n        ArrayList<Integer> unique = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (i == 0 || lst.get(i) != lst.get(i - 1)) {\n                unique.add(lst.get(i));\n            }\n        }\n        if (unique.size() < 2) {\n            return Optional.empty();\n        }\n        return Optional.of(unique.get(1));",
        "grade-68": {
            "execution": 0
        },
        "148": "if (lst.size() < 2) {\n            return Optional.empty();\n        }\n        Collections.sort(lst);\n        if (lst.get(0) == lst.get(1)) {\n            return Optional.empty();\n        }\n        return Optional.of(lst.get(1));",
        "grade-148": {
            "execution": 0
        },
        "177": "if (lst.size() < 2) {\n            return Optional.empty();\n        }\n        Optional<Integer> min = Optional.of(lst.get(0));\n        Optional<Integer> nextMin = Optional.empty();\n        for (int i = 1; i < lst.size(); i++) {\n            int n = lst.get(i);\n            if (n < min.get()) {\n                nextMin = min;\n                min = Optional.of(n);\n            } else if (n < nextMin.orElse(n)) {\n                nextMin = Optional.of(n);\n            }\n        }\n        return nextMin;",
        "grade-177": {
            "execution": 0
        },
        "bleu-187": 0.2591809817830491,
        "bleu-30": 8.291253375752564e-05,
        "bleu-6": 0.018734334704061214,
        "bleu-83": 0.314960821828656,
        "bleu-71": 0.17411729296921422,
        "bleu-64": 0.00045939214785229533,
        "bleu-37": 0.23329888637994908,
        "bleu-28": 0.12516079686127982,
        "bleu-199": 0.2670806426864461,
        "bleu-160": 0.002941107429262473,
        "bleu-23": 0.1775702898982033,
        "bleu-174": 0.44161143215260523,
        "bleu-124": 0.1413376294671305,
        "bleu-8": 0.2198033073085007,
        "bleu-7": 0.00783445672668234,
        "bleu-24": 0.22100207560125365,
        "bleu-61": 0.22038191513674607,
        "bleu-68": 0.35549669841772735,
        "bleu-148": 0.44837137787516596,
        "bleu-177": 0.2229650230348666,
        "codebleu-187": 0.6303050618336485,
        "codebleu-30": 0.0499417421915507,
        "codebleu-6": 0.18642958464052975,
        "codebleu-83": 0.5579412040505254,
        "codebleu-71": 0.6875695953402552,
        "codebleu-64": 0.03738503046766297,
        "codebleu-37": 0.6514299819349216,
        "codebleu-28": 0.6472944325925707,
        "codebleu-199": 0.6563716113785307,
        "codebleu-160": 0.0889150034463744,
        "codebleu-23": 0.6255382700610139,
        "codebleu-174": 0.7114032867241981,
        "codebleu-124": 0.6633828915043447,
        "codebleu-8": 0.654870941818694,
        "codebleu-7": 0.09617049174846205,
        "codebleu-24": 0.6427179474749751,
        "codebleu-61": 0.6310715689047668,
        "codebleu-68": 0.7097765806927,
        "codebleu-148": 0.6046513124136974,
        "codebleu-177": 0.7217998953234491,
        "chrf-187": 0.43210516957624134,
        "chrf-30": 0.05954749904808235,
        "chrf-6": 0.11721450235550292,
        "chrf-83": 0.47838901594673156,
        "chrf-71": 0.5294028951229125,
        "chrf-64": 0.07272177279864048,
        "chrf-37": 0.39111087165102076,
        "chrf-28": 0.41130680519650725,
        "chrf-199": 0.4340076879071366,
        "chrf-160": 0.16857605103243686,
        "chrf-23": 0.3718887406419495,
        "chrf-174": 0.6339394381814857,
        "chrf-124": 0.3977245584520108,
        "chrf-8": 0.44536460947538214,
        "chrf-7": 0.1842191755965171,
        "chrf-24": 0.42319680546863997,
        "chrf-61": 0.4695741343306147,
        "chrf-68": 0.611263187319223,
        "chrf-148": 0.5468528933762689,
        "chrf-177": 0.45117234667918604,
        "rougel-187": 0.4228571428571429,
        "rougel-30": 0.047619047619047616,
        "rougel-6": 0.3232323232323232,
        "rougel-83": 0.4861111111111111,
        "rougel-71": 0.32967032967032966,
        "rougel-64": 0.09302325581395349,
        "rougel-37": 0.38541666666666663,
        "rougel-28": 0.3377483443708609,
        "rougel-199": 0.32142857142857145,
        "rougel-160": 0.16279069767441862,
        "rougel-23": 0.4659090909090909,
        "rougel-174": 0.5276073619631902,
        "rougel-124": 0.3257328990228013,
        "rougel-8": 0.3523809523809524,
        "rougel-7": 0.15730337078651685,
        "rougel-24": 0.42328042328042326,
        "rougel-61": 0.3839285714285714,
        "rougel-68": 0.5425531914893617,
        "rougel-148": 0.5755395683453237,
        "rougel-177": 0.4075829383886256,
        "meteor-187": 0.3941384746411946,
        "meteor-30": 0.014792899408284023,
        "meteor-6": 0.2232952997889942,
        "meteor-83": 0.4037271667214597,
        "meteor-71": 0.5183163148278509,
        "meteor-64": 0.0465523598820059,
        "meteor-37": 0.4349311224489796,
        "meteor-28": 0.3983097191150883,
        "meteor-199": 0.4555889435237459,
        "meteor-160": 0.08443200288965143,
        "meteor-23": 0.3446640625,
        "meteor-174": 0.6223590648156169,
        "meteor-124": 0.4384975246640805,
        "meteor-8": 0.4519765674570969,
        "meteor-7": 0.08406005574035781,
        "meteor-24": 0.48495518565941104,
        "meteor-61": 0.531585083012797,
        "meteor-68": 0.6921400042684229,
        "meteor-148": 0.5583153822482085,
        "meteor-177": 0.4017837287467914,
        "ruby-187": 0.29702970297029707,
        "ruby-30": 0.027027027027026973,
        "ruby-6": 0.20270270270270274,
        "ruby-83": 0.28378378378378377,
        "ruby-71": 0.2068965517241379,
        "ruby-64": 0.05405405405405406,
        "ruby-37": 0.22033898305084743,
        "ruby-28": 0.2149122807017544,
        "ruby-199": 0.15957446808510634,
        "ruby-160": 0.09459459459459463,
        "ruby-23": 0.33333333333333337,
        "ruby-174": 0.3707865168539326,
        "ruby-124": 0.2145922746781116,
        "ruby-8": 0.19852941176470584,
        "ruby-7": 0.09459459459459463,
        "ruby-24": 0.28695652173913044,
        "ruby-61": 0.2666666666666667,
        "ruby-68": 0.3771929824561403,
        "ruby-148": 0.41891891891891897,
        "ruby-177": 0.27007299270072993,
        "codebertscore_f1-187": 0.7741858959197998,
        "codebertscore_f3-187": 0.7664560079574585,
        "codebertscore_f1-30": 0.6025049686431885,
        "codebertscore_f3-30": 0.5870006084442139,
        "codebertscore_f1-6": 0.6716567873954773,
        "codebertscore_f3-6": 0.6541547179222107,
        "codebertscore_f1-83": 0.7969411015510559,
        "codebertscore_f3-83": 0.8140464425086975,
        "codebertscore_f1-71": 0.7375343441963196,
        "codebertscore_f3-71": 0.7964963316917419,
        "codebertscore_f1-64": 0.6168407201766968,
        "codebertscore_f3-64": 0.5988734364509583,
        "codebertscore_f1-37": 0.7200815081596375,
        "codebertscore_f3-37": 0.7365481853485107,
        "codebertscore_f1-28": 0.7303455471992493,
        "codebertscore_f3-28": 0.7728337049484253,
        "codebertscore_f1-199": 0.7365865707397461,
        "codebertscore_f3-199": 0.7494906783103943,
        "codebertscore_f1-160": 0.6470628976821899,
        "codebertscore_f3-160": 0.6201471090316772,
        "codebertscore_f1-23": 0.7400942444801331,
        "codebertscore_f3-23": 0.7420981526374817,
        "codebertscore_f1-174": 0.8347890973091125,
        "codebertscore_f3-174": 0.8410507440567017,
        "codebertscore_f1-124": 0.7064729332923889,
        "codebertscore_f3-124": 0.7563464045524597,
        "codebertscore_f1-8": 0.7554037570953369,
        "codebertscore_f3-8": 0.7733412981033325,
        "codebertscore_f1-7": 0.6500726342201233,
        "codebertscore_f3-7": 0.636368989944458,
        "codebertscore_f1-24": 0.7664744853973389,
        "codebertscore_f3-24": 0.7571252584457397,
        "codebertscore_f1-61": 0.7473258376121521,
        "codebertscore_f3-61": 0.7778368592262268,
        "codebertscore_f1-68": 0.8200885653495789,
        "codebertscore_f3-68": 0.8373615741729736,
        "codebertscore_f1-148": 0.835608959197998,
        "codebertscore_f3-148": 0.8099989891052246,
        "codebertscore_f1-177": 0.7536225318908691,
        "codebertscore_f3-177": 0.7553281188011169,
        "codebertscore_s_f1-187": 0.7958312034606934,
        "codebertscore_s_f3-187": 0.7899671792984009,
        "codebertscore_s_f1-30": 0.6204710602760315,
        "codebertscore_s_f3-30": 0.602169394493103,
        "codebertscore_s_f1-6": 0.7117294073104858,
        "codebertscore_s_f3-6": 0.6862121820449829,
        "codebertscore_s_f1-83": 0.8148777484893799,
        "codebertscore_s_f3-83": 0.832891047000885,
        "codebertscore_s_f1-71": 0.8188694715499878,
        "codebertscore_s_f3-71": 0.8694307208061218,
        "codebertscore_s_f1-64": 0.6108235120773315,
        "codebertscore_s_f3-64": 0.5834463834762573,
        "codebertscore_s_f1-37": 0.7592576146125793,
        "codebertscore_s_f3-37": 0.7789443731307983,
        "codebertscore_s_f1-28": 0.7844527959823608,
        "codebertscore_s_f3-28": 0.8126934766769409,
        "codebertscore_s_f1-199": 0.7589268088340759,
        "codebertscore_s_f3-199": 0.7763279676437378,
        "codebertscore_s_f1-160": 0.6657040119171143,
        "codebertscore_s_f3-160": 0.6421024799346924,
        "codebertscore_s_f1-23": 0.7481560707092285,
        "codebertscore_s_f3-23": 0.7530466914176941,
        "codebertscore_s_f1-174": 0.8501196503639221,
        "codebertscore_s_f3-174": 0.8565694093704224,
        "codebertscore_s_f1-124": 0.7636626958847046,
        "codebertscore_s_f3-124": 0.7892311215400696,
        "codebertscore_s_f1-8": 0.7958789467811584,
        "codebertscore_s_f3-8": 0.8061005473136902,
        "codebertscore_s_f1-7": 0.6676698923110962,
        "codebertscore_s_f3-7": 0.651287853717804,
        "codebertscore_s_f1-24": 0.796911895275116,
        "codebertscore_s_f3-24": 0.7874893546104431,
        "codebertscore_s_f1-61": 0.7959865927696228,
        "codebertscore_s_f3-61": 0.8154622912406921,
        "codebertscore_s_f1-68": 0.8355191946029663,
        "codebertscore_s_f3-68": 0.8522230386734009,
        "codebertscore_s_f1-148": 0.8550983667373657,
        "codebertscore_s_f3-148": 0.8302499055862427,
        "codebertscore_s_f1-177": 0.7778143286705017,
        "codebertscore_s_f3-177": 0.7806626558303833,
        "gpt35_nsnr-187": 4,
        "raw_gpt35_nsnr-187": "4",
        "gpt35_nsnr-30": 0,
        "raw_gpt35_nsnr-30": "0",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-83": 4,
        "raw_gpt35_nsnr-83": "4",
        "gpt35_nsnr-71": 4,
        "raw_gpt35_nsnr-71": "4",
        "gpt35_nsnr-64": 0,
        "raw_gpt35_nsnr-64": "0",
        "gpt35_nsnr-37": 4,
        "raw_gpt35_nsnr-37": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-199": 4,
        "raw_gpt35_nsnr-199": "4",
        "gpt35_nsnr-160": 4,
        "raw_gpt35_nsnr-160": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-174": 4,
        "raw_gpt35_nsnr-174": "4",
        "gpt35_nsnr-124": 4,
        "raw_gpt35_nsnr-124": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-24": 3,
        "raw_gpt35_nsnr-24": "3",
        "gpt35_nsnr-61": 3,
        "raw_gpt35_nsnr-61": "3",
        "gpt35_nsnr-68": 4,
        "raw_gpt35_nsnr-68": "4",
        "gpt35_nsnr-148": 4,
        "raw_gpt35_nsnr-148": "4",
        "gpt35_nsnr-177": 4,
        "raw_gpt35_nsnr-177": "4",
        "gpt35_nswr-187": 3,
        "raw_gpt35_nswr-187": "3",
        "gpt35_nswr-30": 2,
        "raw_gpt35_nswr-30": "2",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-83": 4,
        "raw_gpt35_nswr-83": "4",
        "gpt35_nswr-71": 2,
        "raw_gpt35_nswr-71": "2",
        "gpt35_nswr-64": 0,
        "raw_gpt35_nswr-64": "0",
        "gpt35_nswr-37": 4,
        "raw_gpt35_nswr-37": "4",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-199": 4,
        "raw_gpt35_nswr-199": "4",
        "gpt35_nswr-160": 2,
        "raw_gpt35_nswr-160": "2",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-174": 3,
        "raw_gpt35_nswr-174": "3",
        "gpt35_nswr-124": 3,
        "raw_gpt35_nswr-124": "3",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 2,
        "raw_gpt35_nswr-7": "2",
        "gpt35_nswr-24": 3,
        "raw_gpt35_nswr-24": "3",
        "gpt35_nswr-61": 2,
        "raw_gpt35_nswr-61": "2",
        "gpt35_nswr-68": 4,
        "raw_gpt35_nswr-68": "4",
        "gpt35_nswr-148": 3,
        "raw_gpt35_nswr-148": "3",
        "gpt35_nswr-177": 4,
        "raw_gpt35_nswr-177": "4"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Change numerical base of input number x to base.\n    // return string representation after the conversion.\n    // base numbers are less than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8, 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static String changeBase(int x, int base) {\n",
        "snippet": [
            "        StringBuilder ret = new StringBuilder();\n        while (x > 0) {\n            ret.append(String.valueOf(x % base));\n            x /= base;\n        }\n        return ret.reverse().toString();\n    }\n}"
        ],
        "simplified": "Change numerical base of input number x to base. return string representation after the conversion. base numbers are less than 10.",
        "task_id": "44",
        "135": "String ans = \"\";\n\t    while (x != 0) {\n\t        ans = (x % base) + ans;\n\t        x /= base;\n\t    }\n\t    return ans;",
        "grade-135": {
            "execution": 1
        },
        "20": "StringBuilder answer = new StringBuilder();\n        while (x > 0) {\n            answer.append(x % base);\n            x /= base;\n        }\n        return answer.reverse().toString();",
        "grade-20": {
            "execution": 1
        },
        "5": "return Integer.toString(x, base);",
        "grade-5": {
            "execution": 1
        },
        "151": "StringBuilder ans = new StringBuilder();\n        while (x > 0) {\n            ans.append(x % base);\n            x /= base;\n        }\n        return ans.reverse().toString();",
        "grade-151": {
            "execution": 1
        },
        "51": "String result = \"\";\n        while (x != 0) {\n            result = String.valueOf(x % base) + result;\n            x /= base;\n        }\n        return result;",
        "grade-51": {
            "execution": 1
        },
        "43": "// given a number x and base, convert it to base.\n        //\n        // >>> change_base(8, 3)\n        // '22'\n        // >>> change_base(8, 2)\n        // '1000'\n        // >>> change_base(7, 2)\n        // '111'\n        //\n\n        if (x < 0)\n            return \"\";\n        if (x < base)\n            return \"\" + x;\n        else\n            return changeBase(x / base, base) + (x % base);",
        "grade-43": {
            "execution": 1
        },
        "40": "// write your code here\n        return null;",
        "grade-40": {
            "execution": 0
        },
        "23": "StringBuilder sb = new StringBuilder();\n        while (x != 0) {\n            sb.append(x % base);\n            x /= base;\n        }\n        return sb.reverse().toString();",
        "grade-23": {
            "execution": 1
        },
        "19": "if (x < base) {\n            return Integer.toString(x);\n        }\n        int tail = x % base;\n        int rest = x / base;\n        return changeBase(rest, base) + Integer.toString(tail);",
        "grade-19": {
            "execution": 1
        },
        "141": "String ans = \"\";\n        do {\n            ans = (x % base) + ans;\n            x /= base;\n        } while (x > 0);\n        return ans;",
        "grade-141": {
            "execution": 1
        },
        "191": "if (x == 0) return \"0\";\n        String res = \"\";\n        while (x > 0) {\n            res = x % base + res;\n            x /= base;\n        }\n        return res;",
        "grade-191": {
            "execution": 1
        },
        "113": "int quotient = x;\n        String result = \"\";\n        while (quotient > 0) {\n            int remainder = quotient % base;\n            quotient = quotient / base;\n            result = Integer.toString(remainder) + result;\n        }\n        return result;",
        "grade-113": {
            "execution": 1
        },
        "15": "String result = \"\";\n        while (x > 0) {\n            result = x % base + result;\n            x /= base;\n        }\n        return result;",
        "grade-15": {
            "execution": 1
        },
        "122": "StringBuilder binary = new StringBuilder();\n        do {\n            binary.append(x % base);\n            x /= base;\n        } while (x > 0);\n        return binary.reverse().toString();",
        "grade-122": {
            "execution": 1
        },
        "83": "String ans = \"\";\n        while (x != 0) {\n            int reminder = x % base;\n            ans = ans + Integer.toString(reminder);\n            x = x / base;\n        }\n        return ans;",
        "grade-83": {
            "execution": 0
        },
        "6": "// TODO: Fill in your code here.\n        // hint: use % and /\n        if (x == 0) return \"0\";\n        int tmp = x;\n        StringBuilder builder = new StringBuilder();\n        while (tmp > 0) {\n            builder.append(tmp % base);\n            tmp /= base;\n        }\n        return builder.reverse().toString();",
        "grade-6": {
            "execution": 1
        },
        "39": "if (x < base) return Integer.toString(x);\n        int n = x / base;\n        int k = x % base;\n        return changeBase(n, base) + Integer.toString(k);",
        "grade-39": {
            "execution": 1
        },
        "41": "return new BigInteger(Integer.toString(x)).toString(base);",
        "grade-41": {
            "execution": 1
        },
        "104": "String res = \"\";\n        int i = 0;\n        while (x > 0) {\n            int rem = x % base;\n            x = x / base;\n            res = rem + res;\n        }\n        return res;",
        "grade-104": {
            "execution": 1
        },
        "126": "if (x == 0) return \"0\";\n        String s = \"\";\n        while (x > 0) {\n            s = x % base + s;\n            x /= base;\n        }\n        return s;",
        "grade-126": {
            "execution": 1
        },
        "bleu-135": 0.2448751461330374,
        "bleu-20": 0.6525727772404564,
        "bleu-5": 0.008221303205265196,
        "bleu-151": 0.6525727772404564,
        "bleu-51": 0.3371674334627914,
        "bleu-43": 0.057419554457389665,
        "bleu-40": 0.0005279920079792398,
        "bleu-23": 0.5998249596845254,
        "bleu-19": 0.12564000332184913,
        "bleu-141": 0.2587569388062065,
        "bleu-191": 0.29543231282498467,
        "bleu-113": 0.15310658317118914,
        "bleu-15": 0.24667697944209407,
        "bleu-122": 0.588290022103204,
        "bleu-83": 0.2012913118022281,
        "bleu-6": 0.3494960687076311,
        "bleu-39": 0.11016574875048907,
        "bleu-41": 0.05755630140427598,
        "bleu-104": 0.204038269871353,
        "bleu-126": 0.29543231282498467,
        "codebleu-135": 0.3490049583745241,
        "codebleu-20": 0.6926385806496707,
        "codebleu-5": 0.08181619764135026,
        "codebleu-151": 0.6926385806496707,
        "codebleu-51": 0.40587952454389403,
        "codebleu-43": 0.428747273184432,
        "codebleu-40": 0.05464862060984159,
        "codebleu-23": 0.6499865973082817,
        "codebleu-19": 0.43468468468468463,
        "codebleu-141": 0.36518585105446866,
        "codebleu-191": 0.38320434098641365,
        "codebleu-113": 0.4501628538410432,
        "codebleu-15": 0.338345418985583,
        "codebleu-122": 0.6939022390336164,
        "codebleu-83": 0.3989252760498798,
        "codebleu-6": 0.7261940588124841,
        "codebleu-39": 0.37946502194905024,
        "codebleu-41": 0.16930403970310223,
        "codebleu-104": 0.42353309557350266,
        "codebleu-126": 0.3922133499954226,
        "chrf-135": 0.2786976779283618,
        "chrf-20": 0.7088589219492945,
        "chrf-5": 0.14785814921948395,
        "chrf-151": 0.7113589354649623,
        "chrf-51": 0.4322761070276961,
        "chrf-43": 0.19446652125326772,
        "chrf-40": 0.0735005886900767,
        "chrf-23": 0.6853301221851834,
        "chrf-19": 0.3012174629534041,
        "chrf-141": 0.27133032678439845,
        "chrf-191": 0.33806571267467833,
        "chrf-113": 0.3150039816462145,
        "chrf-15": 0.33574739075213356,
        "chrf-122": 0.6550514273209062,
        "chrf-83": 0.330916004551339,
        "chrf-6": 0.600355684398594,
        "chrf-39": 0.27335222053738917,
        "chrf-41": 0.21736011128744098,
        "chrf-104": 0.280479040672589,
        "chrf-126": 0.29927520341770153,
        "rougel-135": 0.5411764705882354,
        "rougel-20": 0.8541666666666667,
        "rougel-5": 0.22222222222222224,
        "rougel-151": 0.8541666666666667,
        "rougel-51": 0.6067415730337079,
        "rougel-43": 0.2278481012658228,
        "rougel-40": 0.09836065573770493,
        "rougel-23": 0.8247422680412372,
        "rougel-19": 0.48000000000000004,
        "rougel-141": 0.441860465116279,
        "rougel-191": 0.4680851063829788,
        "rougel-113": 0.4444444444444444,
        "rougel-15": 0.5365853658536585,
        "rougel-122": 0.7142857142857143,
        "rougel-83": 0.4421052631578947,
        "rougel-6": 0.5801526717557252,
        "rougel-39": 0.4693877551020408,
        "rougel-41": 0.3888888888888889,
        "rougel-104": 0.45161290322580644,
        "rougel-126": 0.4680851063829788,
        "meteor-135": 0.3954095589539258,
        "meteor-20": 0.7609344791046996,
        "meteor-5": 0.17178277790664706,
        "meteor-151": 0.7609344791046996,
        "meteor-51": 0.45544554455445546,
        "meteor-43": 0.2603681239634266,
        "meteor-40": 0.03144654088050315,
        "meteor-23": 0.7233126218323588,
        "meteor-19": 0.42182848030675923,
        "meteor-141": 0.3397521027003099,
        "meteor-191": 0.4238834422657953,
        "meteor-113": 0.3611650485436893,
        "meteor-15": 0.4059212054830894,
        "meteor-122": 0.7072464740970841,
        "meteor-83": 0.3930105721465046,
        "meteor-6": 0.6992168304820136,
        "meteor-39": 0.36293787662861016,
        "meteor-41": 0.27459816854508196,
        "meteor-104": 0.2930109272759746,
        "meteor-126": 0.4238834422657953,
        "ruby-135": 0.40384615384615385,
        "ruby-20": 0.7884615384615384,
        "ruby-5": 0.13461538461538458,
        "ruby-151": 0.7884615384615384,
        "ruby-51": 0.4807692307692307,
        "ruby-43": 0.12264150943396224,
        "ruby-40": 0.05769230769230771,
        "ruby-23": 0.75,
        "ruby-19": 0.21153846153846156,
        "ruby-141": 0.32692307692307687,
        "ruby-191": 0.2692307692307693,
        "ruby-113": 0.2692307692307693,
        "ruby-15": 0.42307692307692313,
        "ruby-122": 0.5384615384615384,
        "ruby-83": 0.25,
        "ruby-6": 0.379746835443038,
        "ruby-39": 0.21153846153846156,
        "ruby-41": 0.25,
        "ruby-104": 0.3076923076923077,
        "ruby-126": 0.2692307692307693,
        "codebertscore_f1-135": 0.8324394822120667,
        "codebertscore_f3-135": 0.7953994274139404,
        "codebertscore_f1-20": 0.9502821564674377,
        "codebertscore_f3-20": 0.9348951578140259,
        "codebertscore_f1-5": 0.708031415939331,
        "codebertscore_f3-5": 0.6696016788482666,
        "codebertscore_f1-151": 0.948356568813324,
        "codebertscore_f3-151": 0.9329327344894409,
        "codebertscore_f1-51": 0.8829661011695862,
        "codebertscore_f3-51": 0.8605195879936218,
        "codebertscore_f1-43": 0.6821378469467163,
        "codebertscore_f3-43": 0.6794966459274292,
        "codebertscore_f1-40": 0.5856186747550964,
        "codebertscore_f3-40": 0.5789826512336731,
        "codebertscore_f1-23": 0.9351340532302856,
        "codebertscore_f3-23": 0.926677942276001,
        "codebertscore_f1-19": 0.7715513110160828,
        "codebertscore_f3-19": 0.756634533405304,
        "codebertscore_f1-141": 0.8091551065444946,
        "codebertscore_f3-141": 0.7814295291900635,
        "codebertscore_f1-191": 0.8252789974212646,
        "codebertscore_f3-191": 0.8002455830574036,
        "codebertscore_f1-113": 0.7794233560562134,
        "codebertscore_f3-113": 0.7866126298904419,
        "codebertscore_f1-15": 0.846420168876648,
        "codebertscore_f3-15": 0.8086389899253845,
        "codebertscore_f1-122": 0.914831280708313,
        "codebertscore_f3-122": 0.9063966870307922,
        "codebertscore_f1-83": 0.8186336159706116,
        "codebertscore_f3-83": 0.8126518726348877,
        "codebertscore_f1-6": 0.804422914981842,
        "codebertscore_f3-6": 0.8426579833030701,
        "codebertscore_f1-39": 0.7687904238700867,
        "codebertscore_f3-39": 0.7524398565292358,
        "codebertscore_f1-41": 0.7328676581382751,
        "codebertscore_f3-41": 0.7032293677330017,
        "codebertscore_f1-104": 0.8018264770507812,
        "codebertscore_f3-104": 0.7845749258995056,
        "codebertscore_f1-126": 0.8223167061805725,
        "codebertscore_f3-126": 0.7997852563858032,
        "codebertscore_s_f1-135": 0.850852370262146,
        "codebertscore_s_f3-135": 0.8200259208679199,
        "codebertscore_s_f1-20": 0.9558305740356445,
        "codebertscore_s_f3-20": 0.9424065947532654,
        "codebertscore_s_f1-5": 0.7790216207504272,
        "codebertscore_s_f3-5": 0.7385983467102051,
        "codebertscore_s_f1-151": 0.952215313911438,
        "codebertscore_s_f3-151": 0.9389144778251648,
        "codebertscore_s_f1-51": 0.893065869808197,
        "codebertscore_s_f3-51": 0.8714631795883179,
        "codebertscore_s_f1-43": 0.708197832107544,
        "codebertscore_s_f3-43": 0.7055907845497131,
        "codebertscore_s_f1-40": 0.6092037558555603,
        "codebertscore_s_f3-40": 0.6067743301391602,
        "codebertscore_s_f1-23": 0.9406630396842957,
        "codebertscore_s_f3-23": 0.9346665143966675,
        "codebertscore_s_f1-19": 0.7880640029907227,
        "codebertscore_s_f3-19": 0.776242733001709,
        "codebertscore_s_f1-141": 0.8323911428451538,
        "codebertscore_s_f3-141": 0.8091104030609131,
        "codebertscore_s_f1-191": 0.8451350927352905,
        "codebertscore_s_f3-191": 0.8231457471847534,
        "codebertscore_s_f1-113": 0.7965087294578552,
        "codebertscore_s_f3-113": 0.8060922026634216,
        "codebertscore_s_f1-15": 0.8633251786231995,
        "codebertscore_s_f3-15": 0.830634593963623,
        "codebertscore_s_f1-122": 0.9201679825782776,
        "codebertscore_s_f3-122": 0.9134896397590637,
        "codebertscore_s_f1-83": 0.8314637541770935,
        "codebertscore_s_f3-83": 0.8284742832183838,
        "codebertscore_s_f1-6": 0.8243784308433533,
        "codebertscore_s_f3-6": 0.8602427840232849,
        "codebertscore_s_f1-39": 0.7909805774688721,
        "codebertscore_s_f3-39": 0.7777045369148254,
        "codebertscore_s_f1-41": 0.7671437859535217,
        "codebertscore_s_f3-41": 0.7430641055107117,
        "codebertscore_s_f1-104": 0.8246978521347046,
        "codebertscore_s_f3-104": 0.8118405938148499,
        "codebertscore_s_f1-126": 0.842710554599762,
        "codebertscore_s_f3-126": 0.8220717310905457,
        "gpt35_nsnr-135": 4,
        "raw_gpt35_nsnr-135": "4",
        "gpt35_nsnr-20": 4,
        "raw_gpt35_nsnr-20": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-151": 4,
        "raw_gpt35_nsnr-151": "4",
        "gpt35_nsnr-51": 4,
        "raw_gpt35_nsnr-51": "4",
        "gpt35_nsnr-43": 4,
        "raw_gpt35_nsnr-43": "4",
        "gpt35_nsnr-40": 0,
        "raw_gpt35_nsnr-40": "0",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nsnr-141": 4,
        "raw_gpt35_nsnr-141": "4",
        "gpt35_nsnr-191": 4,
        "raw_gpt35_nsnr-191": "4",
        "gpt35_nsnr-113": 4,
        "raw_gpt35_nsnr-113": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-122": 4,
        "raw_gpt35_nsnr-122": "4",
        "gpt35_nsnr-83": 4,
        "raw_gpt35_nsnr-83": "4",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-39": 4,
        "raw_gpt35_nsnr-39": "4",
        "gpt35_nsnr-41": 4,
        "raw_gpt35_nsnr-41": "4",
        "gpt35_nsnr-104": 3,
        "raw_gpt35_nsnr-104": "3",
        "gpt35_nsnr-126": 4,
        "raw_gpt35_nsnr-126": "4",
        "gpt35_nswr-135": 3,
        "raw_gpt35_nswr-135": "3",
        "gpt35_nswr-20": 4,
        "raw_gpt35_nswr-20": "4",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-151": 4,
        "raw_gpt35_nswr-151": "4",
        "gpt35_nswr-51": 4,
        "raw_gpt35_nswr-51": "4",
        "gpt35_nswr-43": 3,
        "raw_gpt35_nswr-43": "3",
        "gpt35_nswr-40": 0,
        "raw_gpt35_nswr-40": "0",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3",
        "gpt35_nswr-141": 3,
        "raw_gpt35_nswr-141": "3",
        "gpt35_nswr-191": 3,
        "raw_gpt35_nswr-191": "3",
        "gpt35_nswr-113": 3,
        "raw_gpt35_nswr-113": "3",
        "gpt35_nswr-15": 4,
        "raw_gpt35_nswr-15": "4",
        "gpt35_nswr-122": 3,
        "raw_gpt35_nswr-122": "3",
        "gpt35_nswr-83": 4,
        "raw_gpt35_nswr-83": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-39": 3,
        "raw_gpt35_nswr-39": "3",
        "gpt35_nswr-41": 2,
        "raw_gpt35_nswr-41": "2",
        "gpt35_nswr-104": 3,
        "raw_gpt35_nswr-104": "3",
        "gpt35_nswr-126": 3,
        "raw_gpt35_nswr-126": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    // 1\n    public static int isBored(String S) {\n",
        "snippet": [
            "        String [] sentences = S.split(\"[.?!]\\s*\");\n        int count = 0;\n        for (String sentence : sentences) {\n            if (sentence.subSequence(0, 2).equals(\"I \")) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n}"
        ],
        "simplified": "You'll be given a string of words, and your task is to count the number of boredoms. A boredom is a sentence that starts with the word \"I\". Sentences are delimited by '.', '?' or '!'.",
        "task_id": "91",
        "169": "int count = 0;\n        int c = 0;\n        for (int i = 0; i < S.length(); i++) {\n            if (S.charAt(i) == 'I') {\n                c++;\n            }\n            if (S.charAt(i) == '.' || S.charAt(i) == '?' || S.charAt(i) == '!') {\n                count += c;\n                c = 0;\n            }\n        }\n        return count;",
        "grade-169": {
            "execution": 0
        },
        "30": "// Split the string into sentences and count the number that start with\n        // 'I'.\n        return (int) Arrays.stream(S.split(\"\\\\.|\\\\?|!\"))\n            .filter(s -> s.trim().startsWith(\"I\"))\n            .count();",
        "grade-30": {
            "execution": 0
        },
        "6": "String[] split = S.split(\"[.?!]\");\n        int count = 0;\n        for (String s : split) {\n            if (s.trim().startsWith(\"I\")) {\n                count++;\n            }\n        }\n        return count;",
        "grade-6": {
            "execution": 0
        },
        "196": "// Split the string by the possible characters used to end a sentence.\n        String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n        int boredoms = 0;\n        for (String sentence : sentences) {\n            // The sentence has a boredom if it starts with the word \"I\".\n            if (sentence.trim().startsWith(\"I\")) {\n                boredoms++;\n            }\n        }\n        return boredoms;",
        "grade-196": {
            "execution": 0
        },
        "72": "int boredoms = 0;\n        Pattern boredomPattern = Pattern.compile(\"^I\\\\s\");\n        String[] sentences = S.split(\"[.?!]\");\n        for (String sentence : sentences) {\n            Matcher matcher = boredomPattern.matcher(sentence);\n            if (matcher.find()) boredoms++;\n        }\n        return boredoms;",
        "grade-72": {
            "execution": 0
        },
        "64": "int n = 0;\n        String[] s = S.split(\"\\\\.|\\\\?|\\\\!\");\n        for (int i = 0; i < s.length; i++) {\n            String[] l = s[i].split(\" \");\n            if (l.length > 0 && l[0].equals(\"I\")) {\n                n++;\n            }\n        }\n        return n;",
        "grade-64": {
            "execution": 0
        },
        "59": "String[] ss = S.split(\"[.!?]\");\n        int count = 0;\n        for (String s : ss) {\n            if (s.trim().startsWith(\"I\")) {\n                count++;\n            }\n        }\n        return count;",
        "grade-59": {
            "execution": 0
        },
        "37": "return (int) Arrays.stream(S.split(\"\\\\.\")).map(String::trim).filter(s -> s.startsWith(\"I\")).count();",
        "grade-37": {
            "execution": 0
        },
        "195": "return (int) Arrays.stream(S.split(\"\\\\.\")).map(i -> i.trim()).filter(i -> i.startsWith(\"I\")).count();",
        "grade-195": {
            "execution": 0
        },
        "28": "int count = 0;\n        String[] arr = S.split(\"[.?!]\");\n        for (String s : arr) {\n            if (s.trim().startsWith(\"I\")) {\n                count++;\n            }\n        }\n        return count;",
        "grade-28": {
            "execution": 0
        },
        "179": "// Your code here.\n        int count = 0;\n        String[] arr = S.split(\"(?<=[!?.])\\\\s*\");\n        for (String s : arr) {\n            if (s.split(\" \")[0].equals(\"I\")) {\n                count++;\n            }\n        }\n        return count;",
        "grade-179": {
            "execution": 1
        },
        "144": "return (int)Stream.of(S.split(\"[.!?]\"))\n            .filter(s -> s.startsWith(\"I\"))\n            .count();",
        "grade-144": {
            "execution": 0
        },
        "24": "int c = 0;\n        for (String s : S.split(\"[.?!]\")) {\n            if (s.trim().startsWith(\"I\")) c++;\n        }\n        return c;",
        "grade-24": {
            "execution": 0
        },
        "156": "return (int)Arrays.stream(S.split(\"[\\\\.\\\\?!]\"))\n                          .filter(x -> x.startsWith(\"I\")).count();",
        "grade-156": {
            "execution": 0
        },
        "112": "char[] d = {'.', '?', '!'};\n        String[] ss = S.split(\"\\\\s+\");\n        int count = 0;\n        for (int i = 0; i < ss.length; i++) {\n            if (ss[i].equals(\"I\")) {\n                while (i < ss.length && !Arrays.asList(d).contains(ss[i].charAt(ss[i].length() - 1))) {\n                    i++;\n                }\n                count++;\n            }\n        }\n        return count;",
        "grade-112": {
            "execution": 0
        },
        "8": "// Write your code here\n        return 0;",
        "grade-8": {
            "execution": 0
        },
        "7": "return 0;",
        "grade-7": {
            "execution": 0
        },
        "25": "return (int)Arrays.stream(S.split(\"[.!?]\"))\n            .filter(w -> w.trim().startsWith(\"I\"))\n            .count();",
        "grade-25": {
            "execution": 0
        },
        "57": "int count = 0;\n        if (S.length() == 0) {\n            return count;\n        }\n        String[] sentences = S.split(\"[.?!]\");\n        for (String sentence : sentences) {\n            if (sentence.split(\" \")[0].equals(\"I\")) {\n                count++;\n            }\n        }\n        return count;",
        "grade-57": {
            "execution": 0
        },
        "61": "int boredoms = 0;\n        S = S.trim();\n        int len = S.length();\n        int i = 0;\n        int previ = 0;\n        while (i < len) {\n            while (i < len && (S.charAt(i) != '.' && S.charAt(i) != '?' && S.charAt(i) != '!')) {\n                i++;\n            }\n            if (i < len) {\n                String sentence = S.substring(previ, i);\n                if (sentence.startsWith(\"I\")) {\n                    boredoms++;\n                }\n                i++;\n                previ = i;\n            }\n        }\n        return boredoms;",
        "grade-61": {
            "execution": 0
        },
        "bleu-169": 0.19706055380843746,
        "bleu-30": 0.15596244484889593,
        "bleu-6": 0.5492395953144155,
        "bleu-196": 0.3504068114711083,
        "bleu-72": 0.3916958631735071,
        "bleu-64": 0.23441643826476596,
        "bleu-59": 0.5094152462915311,
        "bleu-37": 0.15845814142723022,
        "bleu-195": 0.15468397403173811,
        "bleu-28": 0.5047369249091074,
        "bleu-179": 0.4479072247397907,
        "bleu-144": 0.17790565303864916,
        "bleu-24": 0.3449703417395702,
        "bleu-156": 0.18170003511329394,
        "bleu-112": 0.24902146258608343,
        "bleu-8": 0.00018742635165100427,
        "bleu-7": 4.776713747613045e-10,
        "bleu-25": 0.18404333253994243,
        "bleu-57": 0.5974033393860121,
        "bleu-61": 0.11386839617868974,
        "codebleu-169": 0.5693951381589558,
        "codebleu-30": 0.3652598848878117,
        "codebleu-6": 0.6236579691059151,
        "codebleu-196": 0.6302256660547003,
        "codebleu-72": 0.6248502840401615,
        "codebleu-64": 0.6180603417703115,
        "codebleu-59": 0.6236579691059151,
        "codebleu-37": 0.342660093586199,
        "codebleu-195": 0.34205660979509606,
        "codebleu-28": 0.6236579691059151,
        "codebleu-179": 0.6341980111881402,
        "codebleu-144": 0.33414810428833025,
        "codebleu-24": 0.4465750643744009,
        "codebleu-156": 0.30833283061780914,
        "codebleu-112": 0.630926977717318,
        "codebleu-8": 0.05572171576018737,
        "codebleu-7": 0.023809526584681825,
        "codebleu-25": 0.34642427724341024,
        "codebleu-57": 0.6927210455502548,
        "codebleu-61": 0.5583753225447751,
        "chrf-169": 0.29813292925227874,
        "chrf-30": 0.262542616634833,
        "chrf-6": 0.516961915856155,
        "chrf-196": 0.5247440313098164,
        "chrf-72": 0.509876407393413,
        "chrf-64": 0.3430013133364907,
        "chrf-59": 0.5165648268707096,
        "chrf-37": 0.2129509505115252,
        "chrf-195": 0.1809043309746426,
        "chrf-28": 0.4817982510711225,
        "chrf-179": 0.5028944086496818,
        "chrf-144": 0.20540986002014994,
        "chrf-24": 0.3217889223368388,
        "chrf-156": 0.1927899016881776,
        "chrf-112": 0.4439389551797657,
        "chrf-8": 0.05775561012008403,
        "chrf-7": 0.034246309090304496,
        "chrf-25": 0.1995134061607194,
        "chrf-57": 0.7687049902164813,
        "chrf-61": 0.3282716385704655,
        "rougel-169": 0.3542857142857143,
        "rougel-30": 0.36764705882352944,
        "rougel-6": 0.7967479674796748,
        "rougel-196": 0.6037735849056604,
        "rougel-72": 0.5390070921985816,
        "rougel-64": 0.5,
        "rougel-59": 0.7804878048780488,
        "rougel-37": 0.40350877192982465,
        "rougel-195": 0.3728813559322034,
        "rougel-28": 0.7154471544715446,
        "rougel-179": 0.6478873239436619,
        "rougel-144": 0.42592592592592593,
        "rougel-24": 0.5614035087719298,
        "rougel-156": 0.42857142857142855,
        "rougel-112": 0.4285714285714286,
        "rougel-8": 0.05333333333333334,
        "rougel-7": 0.057971014492753624,
        "rougel-25": 0.44642857142857145,
        "rougel-57": 0.6853146853146853,
        "rougel-61": 0.34123222748815163,
        "meteor-169": 0.43921944031385884,
        "meteor-30": 0.33617167632467587,
        "meteor-6": 0.7395975422427036,
        "meteor-196": 0.6491994177583698,
        "meteor-72": 0.659068692103589,
        "meteor-64": 0.5755361310050696,
        "meteor-59": 0.7353364055299539,
        "meteor-37": 0.3236949040787373,
        "meteor-195": 0.2520629217682308,
        "meteor-28": 0.7434715821812595,
        "meteor-179": 0.7057949919822376,
        "meteor-144": 0.31816911250873514,
        "meteor-24": 0.5557632398753894,
        "meteor-156": 0.34875,
        "meteor-112": 0.544842375831548,
        "meteor-8": 0.02487562189054727,
        "meteor-7": 0.02512562814070352,
        "meteor-25": 0.32470645065398335,
        "meteor-57": 0.7983917556099386,
        "meteor-61": 0.4399703268275741,
        "ruby-169": 0.22935779816513757,
        "ruby-30": 0.09999999999999998,
        "ruby-6": 0.7272727272727273,
        "ruby-196": 0.4301075268817204,
        "ruby-72": 0.28,
        "ruby-64": 0.37234042553191493,
        "ruby-59": 0.696969696969697,
        "ruby-37": 0.303030303030303,
        "ruby-195": 0.25757575757575757,
        "ruby-28": 0.5757575757575757,
        "ruby-179": 0.4736842105263158,
        "ruby-144": 0.2727272727272727,
        "ruby-24": 0.3787878787878788,
        "ruby-156": 0.24242424242424243,
        "ruby-112": 0.27692307692307694,
        "ruby-8": 0.030303030303030276,
        "ruby-7": 0.030303030303030276,
        "ruby-25": 0.28787878787878785,
        "ruby-57": 0.4675324675324676,
        "ruby-61": 0.2206896551724138,
        "codebertscore_f1-169": 0.7662515640258789,
        "codebertscore_f3-169": 0.7699916958808899,
        "codebertscore_f1-30": 0.719776451587677,
        "codebertscore_f3-30": 0.7322940230369568,
        "codebertscore_f1-6": 0.8734007477760315,
        "codebertscore_f3-6": 0.8565263152122498,
        "codebertscore_f1-196": 0.7815401554107666,
        "codebertscore_f3-196": 0.8114163875579834,
        "codebertscore_f1-72": 0.7982044219970703,
        "codebertscore_f3-72": 0.8180471062660217,
        "codebertscore_f1-64": 0.820175051689148,
        "codebertscore_f3-64": 0.824047863483429,
        "codebertscore_f1-59": 0.8746238350868225,
        "codebertscore_f3-59": 0.8578692674636841,
        "codebertscore_f1-37": 0.7111465930938721,
        "codebertscore_f3-37": 0.7124981880187988,
        "codebertscore_f1-195": 0.7018866539001465,
        "codebertscore_f3-195": 0.7039017081260681,
        "codebertscore_f1-28": 0.8562925457954407,
        "codebertscore_f3-28": 0.8409779667854309,
        "codebertscore_f1-179": 0.8772150278091431,
        "codebertscore_f3-179": 0.8811630010604858,
        "codebertscore_f1-144": 0.7327086329460144,
        "codebertscore_f3-144": 0.718848705291748,
        "codebertscore_f1-24": 0.8238183259963989,
        "codebertscore_f3-24": 0.8069469332695007,
        "codebertscore_f1-156": 0.7252927422523499,
        "codebertscore_f3-156": 0.7137358784675598,
        "codebertscore_f1-112": 0.797665536403656,
        "codebertscore_f3-112": 0.8284756541252136,
        "codebertscore_f1-8": 0.5964864492416382,
        "codebertscore_f3-8": 0.5820534229278564,
        "codebertscore_f1-7": 0.5653099417686462,
        "codebertscore_f3-7": 0.51668781042099,
        "codebertscore_f1-25": 0.7079453468322754,
        "codebertscore_f3-25": 0.7032747864723206,
        "codebertscore_f1-57": 0.8753931522369385,
        "codebertscore_f3-57": 0.8620460629463196,
        "codebertscore_f1-61": 0.7191081643104553,
        "codebertscore_f3-61": 0.7347620725631714,
        "codebertscore_s_f1-169": 0.7863324284553528,
        "codebertscore_s_f3-169": 0.7867354154586792,
        "codebertscore_s_f1-30": 0.7446651458740234,
        "codebertscore_s_f3-30": 0.7534346580505371,
        "codebertscore_s_f1-6": 0.8752003312110901,
        "codebertscore_s_f3-6": 0.8573041558265686,
        "codebertscore_s_f1-196": 0.7933116555213928,
        "codebertscore_s_f3-196": 0.8230461478233337,
        "codebertscore_s_f1-72": 0.8091752529144287,
        "codebertscore_s_f3-72": 0.8319892883300781,
        "codebertscore_s_f1-64": 0.8298211097717285,
        "codebertscore_s_f3-64": 0.8338953852653503,
        "codebertscore_s_f1-59": 0.8773443102836609,
        "codebertscore_s_f3-59": 0.8599997162818909,
        "codebertscore_s_f1-37": 0.7287163734436035,
        "codebertscore_s_f3-37": 0.7267926335334778,
        "codebertscore_s_f1-195": 0.7161856293678284,
        "codebertscore_s_f3-195": 0.7128366231918335,
        "codebertscore_s_f1-28": 0.8677262663841248,
        "codebertscore_s_f3-28": 0.8512638807296753,
        "codebertscore_s_f1-179": 0.8819745779037476,
        "codebertscore_s_f3-179": 0.8850711584091187,
        "codebertscore_s_f1-144": 0.7520272135734558,
        "codebertscore_s_f3-144": 0.733816921710968,
        "codebertscore_s_f1-24": 0.8398259282112122,
        "codebertscore_s_f3-24": 0.8245930671691895,
        "codebertscore_s_f1-156": 0.7367116212844849,
        "codebertscore_s_f3-156": 0.7207531929016113,
        "codebertscore_s_f1-112": 0.8067764639854431,
        "codebertscore_s_f3-112": 0.83732670545578,
        "codebertscore_s_f1-8": 0.6246306300163269,
        "codebertscore_s_f3-8": 0.6139141321182251,
        "codebertscore_s_f1-7": 0.6680625081062317,
        "codebertscore_s_f3-7": 0.6058831810951233,
        "codebertscore_s_f1-25": 0.7292717099189758,
        "codebertscore_s_f3-25": 0.7202897071838379,
        "codebertscore_s_f1-57": 0.883755624294281,
        "codebertscore_s_f3-57": 0.869403600692749,
        "codebertscore_s_f1-61": 0.7519913911819458,
        "codebertscore_s_f3-61": 0.7699379920959473,
        "gpt35_nsnr-169": 4,
        "raw_gpt35_nsnr-169": "4",
        "gpt35_nsnr-30": 4,
        "raw_gpt35_nsnr-30": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-196": 4,
        "raw_gpt35_nsnr-196": "4",
        "gpt35_nsnr-72": 4,
        "raw_gpt35_nsnr-72": "4",
        "gpt35_nsnr-64": 4,
        "raw_gpt35_nsnr-64": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nsnr-37": 4,
        "raw_gpt35_nsnr-37": "4",
        "gpt35_nsnr-195": 4,
        "raw_gpt35_nsnr-195": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-179": 4,
        "raw_gpt35_nsnr-179": "4",
        "gpt35_nsnr-144": 4,
        "raw_gpt35_nsnr-144": "4",
        "gpt35_nsnr-24": 4,
        "raw_gpt35_nsnr-24": "4",
        "gpt35_nsnr-156": 4,
        "raw_gpt35_nsnr-156": "4",
        "gpt35_nsnr-112": 4,
        "raw_gpt35_nsnr-112": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 2,
        "raw_gpt35_nsnr-7": "2",
        "gpt35_nsnr-25": 4,
        "raw_gpt35_nsnr-25": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-61": 4,
        "raw_gpt35_nsnr-61": "4",
        "gpt35_nswr-169": 3,
        "raw_gpt35_nswr-169": "3",
        "gpt35_nswr-30": 4,
        "raw_gpt35_nswr-30": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-196": 4,
        "raw_gpt35_nswr-196": "4",
        "gpt35_nswr-72": 4,
        "raw_gpt35_nswr-72": "4",
        "gpt35_nswr-64": 3,
        "raw_gpt35_nswr-64": "3",
        "gpt35_nswr-59": 4,
        "raw_gpt35_nswr-59": "4",
        "gpt35_nswr-37": 3,
        "raw_gpt35_nswr-37": "3",
        "gpt35_nswr-195": 3,
        "raw_gpt35_nswr-195": "3",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-179": 4,
        "raw_gpt35_nswr-179": "4",
        "gpt35_nswr-144": 4,
        "raw_gpt35_nswr-144": "4",
        "gpt35_nswr-24": 4,
        "raw_gpt35_nswr-24": "4",
        "gpt35_nswr-156": 4,
        "raw_gpt35_nswr-156": "4",
        "gpt35_nswr-112": 3,
        "raw_gpt35_nswr-112": "3",
        "gpt35_nswr-8": 2,
        "raw_gpt35_nswr-8": "2",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-25": 4,
        "raw_gpt35_nswr-25": "4",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-61": 3,
        "raw_gpt35_nswr-61": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Implement a function that takes an non-negative integer and returns an array of the first n\n    // integers that are prime numbers and less than n.\n    // for example:\n    // count_up_to(5) => [2,3]\n    // count_up_to(11) => [2,3,5,7]\n    // count_up_to(0) => []\n    // count_up_to(20) => [2,3,5,7,11,13,17,19]\n    // count_up_to(1) => []\n    // count_up_to(18) => [2,3,5,7,11,13,17]\n    public static ArrayList<Integer> countUpTo(int n) {\n",
        "snippet": [
            "        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < n; i++) {\n            boolean is_prime = true;\n            for (int j = 2; j < i; j++) {\n                if (i % j == 0) {\n                    is_prime = false;\n                    break;\n                }\n            }\n            if (is_prime) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n}"
        ],
        "simplified": "Implement a function that takes an non-negative integer and returns an array of the first n integers that are prime numbers and less than n. for",
        "task_id": "96",
        "28": "// Just to get you started, here's a basic boolean function to tell you if a number is prime\n        // it's not written very well and is really inefficient, but it works\n        boolean isPrime(int a) {\n            if (a < 2) {\n                return false;\n            }\n            for (int i = 2; i < a; i++) {\n                if (a % i == 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        ArrayList<Integer> list = new ArrayList<Integer>();\n        for (int i = 0; i < n; i++) {\n            if (isPrime(i)) {\n                list.add(i);\n            }\n        }\n        return list;",
        "grade-28": {
            "execution": 0
        },
        "6": "ArrayList<Integer> primes = new ArrayList<Integer>();\n        int limit = n + 1;\n        boolean[] composites = new boolean[limit];\n        for (int i = 2; i < limit; i++) {\n            if (!composites[i]) {\n                primes.add(i);\n                for (int j = i * 2; j < limit; j += i) {\n                    composites[j] = true;\n                }\n            }\n        }\n        return primes;",
        "grade-6": {
            "execution": 0
        },
        "79": "if (n < 2) return new ArrayList<Integer>();\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        boolean[] isPrime = new boolean[n + 1];\n        for (int i = 2; i <= n; i++) isPrime[i] = true;\n        for (int factor = 2; factor * factor <= n; factor++) {\n            if (isPrime[factor]) {\n                for (int j = factor; factor * j <= n; j++) {\n                    isPrime[factor * j] = false;\n                }\n            }\n        }\n        for (int i = 2; i <= n; i++) if (isPrime[i]) result.add(i);\n        return result;",
        "grade-79": {
            "execution": 0
        },
        "71": "int [] p = new int[n];\n        Arrays.fill(p, 1);\n        int count = 0;\n        int i = 2;\n        while (i * i <= n) {\n            if (p[i] == 1) {\n                int k = i * i;\n                while (k <= n) {\n                    p[k] = 0;\n                    k += i;\n                }\n            }\n            i++;\n        }\n        ArrayList<Integer> ret = new ArrayList<>();\n        for (int j = 2; j < n; j++) {\n            if (p[j] == 1) {\n                ret.add(j);\n            }\n        }\n        return ret;",
        "grade-71": {
            "execution": 0
        },
        "64": "ArrayList<Integer> ret = new ArrayList<Integer>();\n        if (n < 2) {\n            return ret;\n        }\n        for (int i = 2; i < n; i++) {\n            boolean isPrime = true;\n            for (int j = 2; j < i; j++) {\n                if (i % j == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                ret.add(i);\n            }\n        }\n        return ret;",
        "grade-64": {
            "execution": 1
        },
        "37": "ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 1; i < n; i++) {\n            if (isPrime(i)) {\n                result.add(i);\n            }\n        }\n        return result;",
        "grade-37": {
            "execution": 0
        },
        "26": "//TODO\n        if (n < 2) {\n            return new ArrayList<Integer>();\n        }\n\n        ArrayList<Integer> primes = new ArrayList<Integer>();\n        primes.add(2);\n\n        for (int i = 3; i < n; i++) {\n            boolean isPrime = true;\n            for (int j = 0; j < primes.size(); j++) {\n                if (i % primes.get(j) == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                primes.add(i);\n            }\n        }\n\n        return primes;",
        "grade-26": {
            "execution": 1
        },
        "167": "int k = (int) Math.sqrt(n);\n        boolean[] isPrime = new boolean[n + 1];\n        isPrime[2] = true;\n        for (int i = 3; i <= k; i += 2) {\n            isPrime[i] = true;\n        }\n        for (int i = 3, s = 2; i <= k; i += s, s = 2) {\n            if (isPrime[i]) {\n                for (int j = i * i; j <= n; j += i) {\n                    isPrime[j] = false;\n                }\n            }\n        }\n        ArrayList<Integer> primes = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime[i]) {\n                primes.add(i);\n            }\n        }\n        return primes;",
        "grade-167": {
            "execution": 0
        },
        "22": "ArrayList<Integer> answer = new ArrayList<Integer>();\n        for (int i = 2; i < n; i++) {\n            boolean isPrime = true;\n            for (int j = 2; j < i; j++) {\n                if (i % j == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) answer.add(i);\n        }\n        return answer;",
        "grade-22": {
            "execution": 1
        },
        "185": "// write your code here\n        return null;",
        "grade-185": {
            "execution": 0
        },
        "125": "// implementation here\n        return null;",
        "grade-125": {
            "execution": 0
        },
        "8": "throw new RuntimeException(\"NOT IMPLEMENTED\");",
        "grade-8": {
            "execution": 0
        },
        "7": "// Your code here\n        return null;",
        "grade-7": {
            "execution": 0
        },
        "23": "ArrayList<Integer> result = new ArrayList<Integer>();\n        int i = 2;\n        while (i < n) {\n            boolean isPrime = true;\n            for (int j = 2; j < i; j++) {\n                if (i % j == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                result.add(i);\n            }\n            i++;\n        }\n        return result;",
        "grade-23": {
            "execution": 1
        },
        "61": "ArrayList<Integer> result = new ArrayList<Integer>();\n        if (n < 2) {\n            return result;\n        }\n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                result.add(i);\n            }\n        }\n        return result;",
        "grade-61": {
            "execution": 0
        },
        "68": "ArrayList<Integer> primes = new ArrayList<Integer>();\n        if (n < 2) {\n            return primes;\n        }\n        primes.add(2);\n        for (int i = 3; i < n; i++) {\n            int j = 0;\n            for (; j < primes.size(); j++) {\n                if (i % primes.get(j) == 0) {\n                    break;\n                }\n            }\n            if (j == primes.size()) {\n                primes.add(i);\n            }\n        }\n        return primes;",
        "grade-68": {
            "execution": 1
        },
        "152": "// Implement your solution here\n        // sieve of eratosthenes\n        if (n <= 1) {\n            return new ArrayList<Integer>();\n        }\n        ArrayList<Integer> primes = new ArrayList<Integer>();\n        ArrayList<Integer> composites = new ArrayList<Integer>();\n        for (int i = 2; i < n; i++) {\n            if (!composites.contains(i)) {\n                primes.add(i);\n                for (int j = i; j < n; j += i) {\n                    composites.add(j);\n                }\n            }\n        }\n        return primes;",
        "grade-152": {
            "execution": 1
        },
        "188": "if (n <= 1) {\n            return new ArrayList<Integer>();\n        }\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                result.add(i);\n            }\n        }\n        return result;",
        "grade-188": {
            "execution": 0
        },
        "171": "ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 2; i < n; i++) {\n            int k = 0;\n            for (int j = 2; j <= i / 2; j++) {\n                if (i % j == 0) {\n                    k = 1;\n                    break;\n                }\n            }\n            if (k == 0)\n                result.add(i);\n        }\n        return result;",
        "grade-171": {
            "execution": 1
        },
        "54": "ArrayList<Integer> primeNumbers = new ArrayList<Integer>();\n        if (n < 2) {\n            return primeNumbers;\n        }\n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                primeNumbers.add(i);\n            }\n        }\n        return primeNumbers;",
        "grade-54": {
            "execution": 0
        },
        "bleu-28": 0.32180344367383695,
        "bleu-6": 0.5109661076045198,
        "bleu-79": 0.282212554356236,
        "bleu-71": 0.3118176356069701,
        "bleu-64": 0.6701890656560106,
        "bleu-37": 0.3269851068504721,
        "bleu-26": 0.5172917484834404,
        "bleu-167": 0.3266604659232627,
        "bleu-22": 0.7605528818708985,
        "bleu-185": 8.738293074223242e-06,
        "bleu-125": 7.366057549660258e-07,
        "bleu-8": 8.1283020241446e-05,
        "bleu-7": 2.981538117480832e-06,
        "bleu-23": 0.6466348774022577,
        "bleu-61": 0.39238085658577787,
        "bleu-68": 0.5264141421451336,
        "bleu-152": 0.4244626272047508,
        "bleu-188": 0.42631147993339896,
        "bleu-171": 0.656728707542424,
        "bleu-54": 0.3998387035275109,
        "codebleu-28": 0.7100309118079927,
        "codebleu-6": 0.6324576840298813,
        "codebleu-79": 0.6680158129841778,
        "codebleu-71": 0.6515092342506777,
        "codebleu-64": 0.8520272118004462,
        "codebleu-37": 0.42558505518847023,
        "codebleu-26": 0.771895489167083,
        "codebleu-167": 0.6732405093828885,
        "codebleu-22": 0.8140832955049331,
        "codebleu-185": 0.03990189795341251,
        "codebleu-125": 0.02849368683805509,
        "codebleu-8": 0.034188304425711344,
        "codebleu-7": 0.03419617599129807,
        "codebleu-23": 0.8027175924277632,
        "codebleu-61": 0.5263761467302206,
        "codebleu-68": 0.719769855645412,
        "codebleu-152": 0.6632656505491282,
        "codebleu-188": 0.5388433796656541,
        "codebleu-171": 0.7376985640418716,
        "codebleu-54": 0.5263761467302206,
        "chrf-28": 0.47264741171533126,
        "chrf-6": 0.564209225830951,
        "chrf-79": 0.4699812315939548,
        "chrf-71": 0.42636043541101015,
        "chrf-64": 0.7387989698794193,
        "chrf-37": 0.40594135103591633,
        "chrf-26": 0.7546787906140043,
        "chrf-167": 0.6173208714971374,
        "chrf-22": 0.7413028084186334,
        "chrf-185": 0.05026503684450333,
        "chrf-125": 0.05588836073694637,
        "chrf-8": 0.03691222718034562,
        "chrf-7": 0.041451906230285725,
        "chrf-23": 0.6747562831046381,
        "chrf-61": 0.4221381263763792,
        "chrf-68": 0.6310090375334787,
        "chrf-152": 0.5154917460228774,
        "chrf-188": 0.43193842958967144,
        "chrf-171": 0.5580047626882683,
        "chrf-54": 0.5111419940243521,
        "rougel-28": 0.4085106382978723,
        "rougel-6": 0.5698924731182796,
        "rougel-79": 0.523809523809524,
        "rougel-71": 0.4405286343612335,
        "rougel-64": 0.8421052631578948,
        "rougel-37": 0.624113475177305,
        "rougel-26": 0.7407407407407406,
        "rougel-167": 0.44609665427509293,
        "rougel-22": 0.8813559322033898,
        "rougel-185": 0.041237113402061855,
        "rougel-125": 0.042105263157894736,
        "rougel-8": 0.0808080808080808,
        "rougel-7": 0.04166666666666667,
        "rougel-23": 0.8268156424581005,
        "rougel-61": 0.6052631578947368,
        "rougel-68": 0.712871287128713,
        "rougel-152": 0.5140186915887851,
        "rougel-188": 0.5625,
        "rougel-171": 0.8333333333333333,
        "rougel-54": 0.5897435897435898,
        "meteor-28": 0.590314755650219,
        "meteor-6": 0.6207567649641746,
        "meteor-79": 0.5687529400113888,
        "meteor-71": 0.5668485499462943,
        "meteor-64": 0.929953310556139,
        "meteor-37": 0.45093096825520124,
        "meteor-26": 0.8516838438089707,
        "meteor-167": 0.6692865304934602,
        "meteor-22": 0.9088851139597811,
        "meteor-185": 0.012484394506866418,
        "meteor-125": 0.01251564455569462,
        "meteor-8": 0.024906600249066005,
        "meteor-7": 0.0125,
        "meteor-23": 0.8662602412008706,
        "meteor-61": 0.5365683169846297,
        "meteor-68": 0.7233090162803533,
        "meteor-152": 0.5803368949235405,
        "meteor-188": 0.5114293981481481,
        "meteor-171": 0.801502262443439,
        "meteor-54": 0.5645994832041344,
        "ruby-28": 0.25850340136054417,
        "ruby-6": 0.3979591836734694,
        "ruby-79": 0.36585365853658536,
        "ruby-71": 0.28776978417266186,
        "ruby-64": 0.7647058823529411,
        "ruby-37": 0.4772727272727273,
        "ruby-26": 0.609375,
        "ruby-167": 0.30939226519337015,
        "ruby-22": 0.8314606741573034,
        "ruby-185": 0.022727272727272707,
        "ruby-125": 0.022727272727272707,
        "ruby-8": 0.045454545454545414,
        "ruby-7": 0.022727272727272707,
        "ruby-23": 0.7362637362637363,
        "ruby-61": 0.4772727272727273,
        "ruby-68": 0.5614035087719298,
        "ruby-152": 0.32539682539682535,
        "ruby-188": 0.375,
        "ruby-171": 0.7717391304347826,
        "ruby-54": 0.44318181818181823,
        "codebertscore_f1-28": 0.7656864523887634,
        "codebertscore_f3-28": 0.8024390339851379,
        "codebertscore_f1-6": 0.8488011956214905,
        "codebertscore_f3-6": 0.8599146604537964,
        "codebertscore_f1-79": 0.8266671895980835,
        "codebertscore_f3-79": 0.8428118228912354,
        "codebertscore_f1-71": 0.7769389152526855,
        "codebertscore_f3-71": 0.7820811867713928,
        "codebertscore_f1-64": 0.9077244997024536,
        "codebertscore_f3-64": 0.9102945327758789,
        "codebertscore_f1-37": 0.8360598683357239,
        "codebertscore_f3-37": 0.8128015398979187,
        "codebertscore_f1-26": 0.870985746383667,
        "codebertscore_f3-26": 0.8900629878044128,
        "codebertscore_f1-167": 0.8275793194770813,
        "codebertscore_f3-167": 0.8424957394599915,
        "codebertscore_f1-22": 0.9508351683616638,
        "codebertscore_f3-22": 0.9469013810157776,
        "codebertscore_f1-185": 0.5361806154251099,
        "codebertscore_f3-185": 0.5231608152389526,
        "codebertscore_f1-125": 0.5535100102424622,
        "codebertscore_f3-125": 0.5311042666435242,
        "codebertscore_f1-8": 0.5574722290039062,
        "codebertscore_f3-8": 0.536997377872467,
        "codebertscore_f1-7": 0.5491050481796265,
        "codebertscore_f3-7": 0.5330853462219238,
        "codebertscore_f1-23": 0.9250958561897278,
        "codebertscore_f3-23": 0.92426997423172,
        "codebertscore_f1-61": 0.836706817150116,
        "codebertscore_f3-61": 0.8224602937698364,
        "codebertscore_f1-68": 0.8651538491249084,
        "codebertscore_f3-68": 0.8640376925468445,
        "codebertscore_f1-152": 0.798090398311615,
        "codebertscore_f3-152": 0.8166515827178955,
        "codebertscore_f1-188": 0.8276787996292114,
        "codebertscore_f3-188": 0.8180935978889465,
        "codebertscore_f1-171": 0.9015952348709106,
        "codebertscore_f3-171": 0.8924640417098999,
        "codebertscore_f1-54": 0.8440728187561035,
        "codebertscore_f3-54": 0.8350442051887512,
        "codebertscore_s_f1-28": 0.7916935682296753,
        "codebertscore_s_f3-28": 0.8235319256782532,
        "codebertscore_s_f1-6": 0.8663548827171326,
        "codebertscore_s_f3-6": 0.8767040371894836,
        "codebertscore_s_f1-79": 0.846449613571167,
        "codebertscore_s_f3-79": 0.8562763333320618,
        "codebertscore_s_f1-71": 0.8047759532928467,
        "codebertscore_s_f3-71": 0.806784987449646,
        "codebertscore_s_f1-64": 0.9114759564399719,
        "codebertscore_s_f3-64": 0.9118984937667847,
        "codebertscore_s_f1-37": 0.8630890250205994,
        "codebertscore_s_f3-37": 0.8348566293716431,
        "codebertscore_s_f1-26": 0.8851625919342041,
        "codebertscore_s_f3-26": 0.9017206430435181,
        "codebertscore_s_f1-167": 0.8557949662208557,
        "codebertscore_s_f3-167": 0.8700757026672363,
        "codebertscore_s_f1-22": 0.9567452073097229,
        "codebertscore_s_f3-22": 0.9522510766983032,
        "codebertscore_s_f1-185": 0.574629008769989,
        "codebertscore_s_f3-185": 0.5672503113746643,
        "codebertscore_s_f1-125": 0.5904115438461304,
        "codebertscore_s_f3-125": 0.5689026713371277,
        "codebertscore_s_f1-8": 0.5674673914909363,
        "codebertscore_s_f3-8": 0.5525602102279663,
        "codebertscore_s_f1-7": 0.5827253460884094,
        "codebertscore_s_f3-7": 0.5684329867362976,
        "codebertscore_s_f1-23": 0.9341250658035278,
        "codebertscore_s_f3-23": 0.9322888255119324,
        "codebertscore_s_f1-61": 0.855776309967041,
        "codebertscore_s_f3-61": 0.8374413251876831,
        "codebertscore_s_f1-68": 0.8808833360671997,
        "codebertscore_s_f3-68": 0.8755476474761963,
        "codebertscore_s_f1-152": 0.8242414593696594,
        "codebertscore_s_f3-152": 0.8456471562385559,
        "codebertscore_s_f1-188": 0.8512066602706909,
        "codebertscore_s_f3-188": 0.8353585004806519,
        "codebertscore_s_f1-171": 0.9093993306159973,
        "codebertscore_s_f3-171": 0.8982282876968384,
        "codebertscore_s_f1-54": 0.8618236184120178,
        "codebertscore_s_f3-54": 0.8506749868392944,
        "gpt35_nsnr-28": 3,
        "raw_gpt35_nsnr-28": "3",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-79": 4,
        "raw_gpt35_nsnr-79": "4",
        "gpt35_nsnr-71": 4,
        "raw_gpt35_nsnr-71": "4",
        "gpt35_nsnr-64": 4,
        "raw_gpt35_nsnr-64": "4",
        "gpt35_nsnr-37": 0,
        "raw_gpt35_nsnr-37": "3 - The code correctly generates an ArrayList of prime numbers up to the input integer n, but it misses the case where n is 1. The loop should start at i = 2 instead of i = 1 to include 2 as a prime number.",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-167": 4,
        "raw_gpt35_nsnr-167": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-185": 0,
        "raw_gpt35_nsnr-185": "0",
        "gpt35_nsnr-125": 0,
        "raw_gpt35_nsnr-125": "0",
        "gpt35_nsnr-8": 0,
        "raw_gpt35_nsnr-8": "0",
        "gpt35_nsnr-7": 0,
        "raw_gpt35_nsnr-7": "0",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-61": 4,
        "raw_gpt35_nsnr-61": "4",
        "gpt35_nsnr-68": 4,
        "raw_gpt35_nsnr-68": "4",
        "gpt35_nsnr-152": 4,
        "raw_gpt35_nsnr-152": "4",
        "gpt35_nsnr-188": 4,
        "raw_gpt35_nsnr-188": "4",
        "gpt35_nsnr-171": 4,
        "raw_gpt35_nsnr-171": "4",
        "gpt35_nsnr-54": 4,
        "raw_gpt35_nsnr-54": "4",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-79": 4,
        "raw_gpt35_nswr-79": "4",
        "gpt35_nswr-71": 4,
        "raw_gpt35_nswr-71": "4",
        "gpt35_nswr-64": 4,
        "raw_gpt35_nswr-64": "4",
        "gpt35_nswr-37": 3,
        "raw_gpt35_nswr-37": "3",
        "gpt35_nswr-26": 4,
        "raw_gpt35_nswr-26": "4",
        "gpt35_nswr-167": 4,
        "raw_gpt35_nswr-167": "4",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-185": 2,
        "raw_gpt35_nswr-185": "2",
        "gpt35_nswr-125": 0,
        "raw_gpt35_nswr-125": "0",
        "gpt35_nswr-8": 0,
        "raw_gpt35_nswr-8": "0",
        "gpt35_nswr-7": 2,
        "raw_gpt35_nswr-7": "2",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-61": 4,
        "raw_gpt35_nswr-61": "4",
        "gpt35_nswr-68": 4,
        "raw_gpt35_nswr-68": "4",
        "gpt35_nswr-152": 4,
        "raw_gpt35_nswr-152": "4",
        "gpt35_nswr-188": 4,
        "raw_gpt35_nswr-188": "4",
        "gpt35_nswr-171": 4,
        "raw_gpt35_nswr-171": "4",
        "gpt35_nswr-54": 4,
        "raw_gpt35_nswr-54": "4"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1, 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    public static ArrayList<Integer> incrList(ArrayList<Integer> l) {\n",
        "snippet": [
            "        return l.stream().map(p -> p + 1).collect(Collectors.toList());\n    }\n}"
        ],
        "simplified": "Return list with elements incremented by 1.",
        "task_id": "42",
        "134": "ArrayList<Integer> res = new ArrayList<Integer>();\n        for (int x : l) {\n            res.add(x + 1);\n        }\n        return res;",
        "grade-134": {
            "execution": 1
        },
        "16": "ArrayList<Integer> output = new ArrayList<Integer>();\n        for (int x : l) {\n            output.add(x + 1);\n        }\n        return output;",
        "grade-16": {
            "execution": 1
        },
        "3": "ArrayList<Integer> temp = new ArrayList<Integer>();\n        for (int i : l)\n            temp.add(i + 1);\n        return temp;",
        "grade-3": {
            "execution": 1
        },
        "164": "ArrayList<Integer> res = new ArrayList<Integer>();\n        for (int v : l) {\n            res.add(v + 1);\n        }\n        return res;",
        "grade-164": {
            "execution": 1
        },
        "50": "ArrayList<Integer> incr = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            incr.add(l.get(i) + 1);\n        }\n        return incr;",
        "grade-50": {
            "execution": 1
        },
        "40": "ArrayList<Integer> result = new ArrayList<Integer>();\n      // TODO: implement this function\n      return result;",
        "grade-40": {
            "execution": 0
        },
        "36": "for (int i = 0; i < l.size(); i++) {\n            l.set(i, l.get(i) + 1);\n        }\n        return l;",
        "grade-36": {
            "execution": 1
        },
        "19": "return l.stream().map(x -> x + 1).collect(Collectors.toCollection(ArrayList::new));",
        "grade-19": {
            "execution": 1
        },
        "15": "ArrayList<Integer> incr = new ArrayList<Integer>();\n        for (int x : l) {\n            incr.add(x + 1);\n        }\n        return incr;",
        "grade-15": {
            "execution": 1
        },
        "143": "ArrayList<Integer> nl = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            nl.add(l.get(i) + 1);\n        }\n        return nl;",
        "grade-143": {
            "execution": 1
        },
        "108": "ArrayList<Integer> m = new ArrayList<Integer>();\n        for (int x : l) {\n            m.add(x + 1);\n        }\n        return m;",
        "grade-108": {
            "execution": 1
        },
        "12": "ArrayList<Integer> ans = new ArrayList<Integer>();\n        for (int x : l) {\n            ans.add(x + 1);\n        }\n        return ans;",
        "grade-12": {
            "execution": 1
        },
        "120": "int n = l.size();\n        for (int i = 0; i < n; i++) {\n            l.set(i, l.get(i) + 1);\n        }\n        return l;",
        "grade-120": {
            "execution": 1
        },
        "81": "ArrayList<Integer> t = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            t.add(l.get(i) + 1);\n        }\n        return t;",
        "grade-81": {
            "execution": 1
        },
        "4": "ArrayList<Integer> out = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            out.add(l.get(i) + 1);\n        }\n        return out;",
        "grade-4": {
            "execution": 1
        },
        "35": "ArrayList<Integer> a = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            a.add(l.get(i) + 1);\n        }\n        return a;",
        "grade-35": {
            "execution": 1
        },
        "38": "ArrayList<Integer> i = new ArrayList<Integer>();\n        for (int t = 0; t < l.size(); t++) {\n            i.add(l.get(t) + 1);\n        }\n        return i;",
        "grade-38": {
            "execution": 1
        },
        "99": "ArrayList<Integer> o = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            o.add(l.get(i) + 1);\n        }\n        return o;",
        "grade-99": {
            "execution": 1
        },
        "127": "throw new RuntimeException(\"NOT IMPLEMENTED\");",
        "grade-127": {
            "execution": 0
        },
        "111": "ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int n : l) {\n            result.add(n + 1);\n        }\n        return result;",
        "grade-111": {
            "execution": 1
        },
        "bleu-134": 0.08293780155900174,
        "bleu-16": 0.08293780155900174,
        "bleu-3": 0.06870475384068053,
        "bleu-164": 0.08293780155900174,
        "bleu-50": 0.0646996785501829,
        "bleu-40": 0.04029014259178441,
        "bleu-36": 0.08582410053834832,
        "bleu-19": 0.5610270450354139,
        "bleu-15": 0.08293780155900174,
        "bleu-143": 0.0646996785501829,
        "bleu-108": 0.08293780155900174,
        "bleu-12": 0.08293780155900174,
        "bleu-120": 0.07595231338123247,
        "bleu-81": 0.0646996785501829,
        "bleu-4": 0.0646996785501829,
        "bleu-35": 0.0646996785501829,
        "bleu-38": 0.0646996785501829,
        "bleu-99": 0.0646996785501829,
        "bleu-127": 0.016149639188721344,
        "bleu-111": 0.08293780155900174,
        "codebleu-134": 0.41715022566086396,
        "codebleu-16": 0.41715022566086396,
        "codebleu-3": 0.3979153234472383,
        "codebleu-164": 0.41715022566086396,
        "codebleu-50": 0.5224586288416075,
        "codebleu-40": 0.24244137593697748,
        "codebleu-36": 0.5032237266279819,
        "codebleu-19": 0.6697793698392831,
        "codebleu-15": 0.41715022566086396,
        "codebleu-143": 0.5224586288416075,
        "codebleu-108": 0.41715022566086396,
        "codebleu-12": 0.41715022566086396,
        "codebleu-120": 0.5032237266279819,
        "codebleu-81": 0.5224586288416075,
        "codebleu-4": 0.5224586288416075,
        "codebleu-35": 0.5224586288416075,
        "codebleu-38": 0.5224586288416075,
        "codebleu-99": 0.5224586288416075,
        "codebleu-127": 0.08620395505499992,
        "codebleu-111": 0.41715022566086396,
        "chrf-134": 0.18099644102170082,
        "chrf-16": 0.18348486290475322,
        "chrf-3": 0.17764427783370923,
        "chrf-164": 0.18099644102170082,
        "chrf-50": 0.1943487785781355,
        "chrf-40": 0.1585984648540311,
        "chrf-36": 0.1975509062169018,
        "chrf-19": 0.7230452180351129,
        "chrf-15": 0.17922277091829156,
        "chrf-143": 0.20280697591512403,
        "chrf-108": 0.18175955380876868,
        "chrf-12": 0.1783676290947157,
        "chrf-120": 0.1956592750046676,
        "chrf-81": 0.19218949636985086,
        "chrf-4": 0.19606369434726265,
        "chrf-35": 0.19218949636985086,
        "chrf-38": 0.19218949636985086,
        "chrf-99": 0.1995859905007947,
        "chrf-127": 0.05894579280984784,
        "chrf-111": 0.18100583107951487,
        "rougel-134": 0.27272727272727276,
        "rougel-16": 0.27272727272727276,
        "rougel-3": 0.25,
        "rougel-164": 0.27272727272727276,
        "rougel-50": 0.3373493975903614,
        "rougel-40": 0.18181818181818185,
        "rougel-36": 0.4057971014492754,
        "rougel-19": 0.7868852459016394,
        "rougel-15": 0.27272727272727276,
        "rougel-143": 0.3373493975903614,
        "rougel-108": 0.27272727272727276,
        "rougel-12": 0.27272727272727276,
        "rougel-120": 0.4054054054054054,
        "rougel-81": 0.3373493975903614,
        "rougel-4": 0.3373493975903614,
        "rougel-35": 0.3373493975903614,
        "rougel-38": 0.3373493975903614,
        "rougel-99": 0.3373493975903614,
        "rougel-127": 0.15,
        "rougel-111": 0.27272727272727276,
        "meteor-134": 0.2987322893363162,
        "meteor-16": 0.2987322893363162,
        "meteor-3": 0.28362865416436844,
        "meteor-164": 0.2987322893363162,
        "meteor-50": 0.3467440531152443,
        "meteor-40": 0.1219512195121951,
        "meteor-36": 0.3707940084378484,
        "meteor-19": 0.8473447098976108,
        "meteor-15": 0.2987322893363162,
        "meteor-143": 0.3467440531152443,
        "meteor-108": 0.2987322893363162,
        "meteor-12": 0.2987322893363162,
        "meteor-120": 0.40041160639573015,
        "meteor-81": 0.3467440531152443,
        "meteor-4": 0.3467440531152443,
        "meteor-35": 0.3467440531152443,
        "meteor-38": 0.3467440531152443,
        "meteor-99": 0.3467440531152443,
        "meteor-127": 0.09395424836601307,
        "meteor-111": 0.2987322893363162,
        "ruby-134": 0.1351351351351351,
        "ruby-16": 0.1351351351351351,
        "ruby-3": 0.11428571428571432,
        "ruby-164": 0.1351351351351351,
        "ruby-50": 0.2222222222222222,
        "ruby-40": 0.06896551724137934,
        "ruby-36": 0.25,
        "ruby-19": 0.6875,
        "ruby-15": 0.1351351351351351,
        "ruby-143": 0.2222222222222222,
        "ruby-108": 0.1351351351351351,
        "ruby-12": 0.1351351351351351,
        "ruby-120": 0.3111111111111111,
        "ruby-81": 0.2222222222222222,
        "ruby-4": 0.2222222222222222,
        "ruby-35": 0.2222222222222222,
        "ruby-38": 0.2222222222222222,
        "ruby-99": 0.2222222222222222,
        "ruby-127": 0.10344827586206895,
        "ruby-111": 0.1351351351351351,
        "codebertscore_f1-134": 0.7254887223243713,
        "codebertscore_f3-134": 0.7191377282142639,
        "codebertscore_f1-16": 0.7267283201217651,
        "codebertscore_f3-16": 0.7208021879196167,
        "codebertscore_f1-3": 0.7286264896392822,
        "codebertscore_f3-3": 0.7227092385292053,
        "codebertscore_f1-164": 0.7247806191444397,
        "codebertscore_f3-164": 0.71846604347229,
        "codebertscore_f1-50": 0.7107849717140198,
        "codebertscore_f3-50": 0.7113667726516724,
        "codebertscore_f1-40": 0.6488146781921387,
        "codebertscore_f3-40": 0.641065776348114,
        "codebertscore_f1-36": 0.7242835760116577,
        "codebertscore_f3-36": 0.7025097608566284,
        "codebertscore_f1-19": 0.9360083937644958,
        "codebertscore_f3-19": 0.9549970626831055,
        "codebertscore_f1-15": 0.7221150398254395,
        "codebertscore_f3-15": 0.7217670679092407,
        "codebertscore_f1-143": 0.7159181237220764,
        "codebertscore_f3-143": 0.7107096314430237,
        "codebertscore_f1-108": 0.7308766841888428,
        "codebertscore_f3-108": 0.722369909286499,
        "codebertscore_f1-12": 0.725979208946228,
        "codebertscore_f3-12": 0.7198463678359985,
        "codebertscore_f1-120": 0.7128342390060425,
        "codebertscore_f3-120": 0.6970053911209106,
        "codebertscore_f1-81": 0.7178934216499329,
        "codebertscore_f3-81": 0.7131212949752808,
        "codebertscore_f1-4": 0.7177931070327759,
        "codebertscore_f3-4": 0.7152761816978455,
        "codebertscore_f1-35": 0.7187211513519287,
        "codebertscore_f3-35": 0.7144211530685425,
        "codebertscore_f1-38": 0.7142552733421326,
        "codebertscore_f3-38": 0.7089864611625671,
        "codebertscore_f1-99": 0.7175935506820679,
        "codebertscore_f3-99": 0.7133243680000305,
        "codebertscore_f1-127": 0.6177132725715637,
        "codebertscore_f3-127": 0.6195225119590759,
        "codebertscore_f1-111": 0.7270337343215942,
        "codebertscore_f3-111": 0.7221307158470154,
        "codebertscore_s_f1-134": 0.7467221021652222,
        "codebertscore_s_f3-134": 0.7406298518180847,
        "codebertscore_s_f1-16": 0.7468125224113464,
        "codebertscore_s_f3-16": 0.7419126033782959,
        "codebertscore_s_f1-3": 0.7455521821975708,
        "codebertscore_s_f3-3": 0.7396289110183716,
        "codebertscore_s_f1-164": 0.7454138398170471,
        "codebertscore_s_f3-164": 0.7392383813858032,
        "codebertscore_s_f1-50": 0.725077211856842,
        "codebertscore_s_f3-50": 0.728676974773407,
        "codebertscore_s_f1-40": 0.6757603287696838,
        "codebertscore_s_f3-40": 0.6688127517700195,
        "codebertscore_s_f1-36": 0.7416384220123291,
        "codebertscore_s_f3-36": 0.721749484539032,
        "codebertscore_s_f1-19": 0.9435824155807495,
        "codebertscore_s_f3-19": 0.9609423279762268,
        "codebertscore_s_f1-15": 0.7389588356018066,
        "codebertscore_s_f3-15": 0.739463210105896,
        "codebertscore_s_f1-143": 0.7314720153808594,
        "codebertscore_s_f3-143": 0.7292820811271667,
        "codebertscore_s_f1-108": 0.7499129772186279,
        "codebertscore_s_f3-108": 0.7424927949905396,
        "codebertscore_s_f1-12": 0.7438669204711914,
        "codebertscore_s_f3-12": 0.7380367517471313,
        "codebertscore_s_f1-120": 0.7330296635627747,
        "codebertscore_s_f3-120": 0.7184564471244812,
        "codebertscore_s_f1-81": 0.7295082807540894,
        "codebertscore_s_f3-81": 0.7265174984931946,
        "codebertscore_s_f1-4": 0.7300132513046265,
        "codebertscore_s_f3-4": 0.7289544939994812,
        "codebertscore_s_f1-35": 0.7293426990509033,
        "codebertscore_s_f3-35": 0.7272014617919922,
        "codebertscore_s_f1-38": 0.7273187041282654,
        "codebertscore_s_f3-38": 0.7243345975875854,
        "codebertscore_s_f1-99": 0.7303142547607422,
        "codebertscore_s_f3-99": 0.7277403473854065,
        "codebertscore_s_f1-127": 0.6026443243026733,
        "codebertscore_s_f3-127": 0.6041181683540344,
        "codebertscore_s_f1-111": 0.7469967603683472,
        "codebertscore_s_f3-111": 0.7418555617332458,
        "gpt35_nsnr-134": 4,
        "raw_gpt35_nsnr-134": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-164": 4,
        "raw_gpt35_nsnr-164": "4",
        "gpt35_nsnr-50": 4,
        "raw_gpt35_nsnr-50": "4",
        "gpt35_nsnr-40": 0,
        "raw_gpt35_nsnr-40": "0",
        "gpt35_nsnr-36": 4,
        "raw_gpt35_nsnr-36": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-143": 4,
        "raw_gpt35_nsnr-143": "4",
        "gpt35_nsnr-108": 4,
        "raw_gpt35_nsnr-108": "4",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-120": 4,
        "raw_gpt35_nsnr-120": "4",
        "gpt35_nsnr-81": 4,
        "raw_gpt35_nsnr-81": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-38": 4,
        "raw_gpt35_nsnr-38": "4",
        "gpt35_nsnr-99": 4,
        "raw_gpt35_nsnr-99": "4",
        "gpt35_nsnr-127": 0,
        "raw_gpt35_nsnr-127": "0",
        "gpt35_nsnr-111": 4,
        "raw_gpt35_nsnr-111": "4",
        "gpt35_nswr-134": 4,
        "raw_gpt35_nswr-134": "4",
        "gpt35_nswr-16": 4,
        "raw_gpt35_nswr-16": "4",
        "gpt35_nswr-3": 4,
        "raw_gpt35_nswr-3": "4",
        "gpt35_nswr-164": 4,
        "raw_gpt35_nswr-164": "4",
        "gpt35_nswr-50": 4,
        "raw_gpt35_nswr-50": "4",
        "gpt35_nswr-40": 2,
        "raw_gpt35_nswr-40": "2",
        "gpt35_nswr-36": 4,
        "raw_gpt35_nswr-36": "4",
        "gpt35_nswr-19": 4,
        "raw_gpt35_nswr-19": "4",
        "gpt35_nswr-15": 4,
        "raw_gpt35_nswr-15": "4",
        "gpt35_nswr-143": 4,
        "raw_gpt35_nswr-143": "4",
        "gpt35_nswr-108": 4,
        "raw_gpt35_nswr-108": "4",
        "gpt35_nswr-12": 4,
        "raw_gpt35_nswr-12": "4",
        "gpt35_nswr-120": 4,
        "raw_gpt35_nswr-120": "4",
        "gpt35_nswr-81": 4,
        "raw_gpt35_nswr-81": "4",
        "gpt35_nswr-4": 4,
        "raw_gpt35_nswr-4": "4",
        "gpt35_nswr-35": 4,
        "raw_gpt35_nswr-35": "4",
        "gpt35_nswr-38": 4,
        "raw_gpt35_nswr-38": "4",
        "gpt35_nswr-99": 4,
        "raw_gpt35_nswr-99": "4",
        "gpt35_nswr-127": 0,
        "raw_gpt35_nswr-127": "0",
        "gpt35_nswr-111": 4,
        "raw_gpt35_nswr-111": "4"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function count_nums which takes an array of integers and returns\n    // the number of elements which has a sum of digits > 0.\n    // If a number is negative, then its first signed digit will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    // >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public static int countNums(ArrayList<Integer> arr) {\n",
        "snippet": [
            "        int count = 0;\n        for (int n: arr) {\n            int neg = 1;\n            if (n < 0) {\n                n = -n;\n                neg = -1;\n            }\n            List<Integer> digits = new ArrayList<>();\n            for (char digit : String.valueOf(n).toCharArray()) {\n                digits.add(digit - '0');\n            }\n            digits.set(0, digits.get(0) * neg);\n            if (digits.stream().reduce(0, Integer::sum) > 0) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n}"
        ],
        "simplified": "Write a function count_nums which takes an array of integers and returns the number of elements which has a sum of digits > 0. If a number is negative, then its first signed digit will be negative: e.g. -123 has signed digits -1, 2, and 3.",
        "task_id": "108",
        "35": "// your code here\n        return arr.stream().filter(x ->  x > 0 || (x < 0 && -x % 10 != x)).collect(Collectors.toList()).size();",
        "grade-35": {
            "execution": 0
        },
        "8": "int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int number = arr.get(i);\n            int digitSum = 0;\n            if (number < 0) {\n                digitSum += number * -1 % 10;\n                number = number * -1 / 10;\n            }\n            while (number > 0) {\n                digitSum += number % 10;\n                number /= 10;\n            }\n            if (digitSum > 0) {\n                count++;\n            }\n        }\n        return count;",
        "grade-8": {
            "execution": 0
        },
        "96": "int sum = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int value = arr.get(i);\n            if (value < 0) {\n                value = value * -1;\n            }\n            sum += getDigitSum(value);\n        }\n        return sum;",
        "grade-96": {
            "execution": 0
        },
        "83": "throw new UnsupportedOperationException(\"Not supported yet.\");",
        "grade-83": {
            "execution": 0
        },
        "76": "return (int)arr.stream().filter(x -> x > 0 ? x % 10 > 0 : x % 10 < 0).count();",
        "grade-76": {
            "execution": 0
        },
        "44": "return (int) arr.stream().filter(x -> IntStream.of(x.toString().chars().map(Character::getNumericValue).toArray()).sum() > 0).count();",
        "grade-44": {
            "execution": 0
        },
        "33": "return (int)arr.stream().filter(x -> {\n                if (x == 0) {\n                    return false;\n                }\n                x = Math.abs(x);\n                int sum = 0;\n                while (x > 0) {\n                    sum += x % 10;\n                    x /= 10;\n                }\n                return sum > 0;\n            }).count();",
        "grade-33": {
            "execution": 0
        },
        "181": "return (int) arr.stream().filter(i -> {\n            int sum = 0;\n            while (i != 0) {\n                sum += Math.abs(i % 10);\n                i /= 10;\n            }\n            return sum > 0;\n        }).count();",
        "grade-181": {
            "execution": 0
        },
        "29": "int ans = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n            int sign = num < 0 ? -1 : 1;\n            num = Math.abs(num);\n            while (num > 0) {\n                ans += sign * (num % 10);\n                num /= 10;\n            }\n        }\n        return ans;",
        "grade-29": {
            "execution": 0
        },
        "142": "int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            count += sumOfDigits(arr.get(i));\n        }\n        return count;",
        "grade-142": {
            "execution": 0
        },
        "13": "int ct = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n            int sum = 0;\n            if (num < 0) {\n                sum += -1;\n                num = -num;\n            }\n            while (num > 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n            if (sum > 0) {\n                ct++;\n            }\n        }\n        return ct;",
        "grade-13": {
            "execution": 0
        },
        "11": "return (int) arr.stream().filter(x -> signedDigitsSum(x) > 0).count();",
        "grade-11": {
            "execution": 0
        },
        "30": "int result = 0;\n        for (int num : arr) {\n            String str = String.valueOf(num);\n            if (str.charAt(0) == '-') {\n                str = str.substring(1);\n            }\n            int sum = 0;\n            for (int i = 0; i < str.length(); i++) {\n                sum += Integer.parseInt(str.substring(i, i + 1));\n            }\n            if (sum > 0) {\n                result++;\n            }\n        }\n        return result;",
        "grade-30": {
            "execution": 0
        },
        "72": "int out0 = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int element = arr.get(i);\n            int s = sumDigits(element);\n            if (s > 0)\n                out0++;\n        }\n        return out0;",
        "grade-72": {
            "execution": 0
        },
        "79": "int count = 0;\n      for (int i = 0; i < arr.size(); i++) {\n        int digitsSum = 0;\n        int num = arr.get(i);\n        if (num < 0) {\n          num = num * -1;\n        }\n        while (num > 0) {\n          digitsSum += num % 10;\n          num = num / 10;\n        }\n        if (digitsSum > 0) {\n          count++;\n        }\n      }\n      return count;",
        "grade-79": {
            "execution": 0
        },
        "170": "int nums = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n            if (num < 0) {\n                num = num * -1;\n            }\n            int sum = 0;\n            while (num > 0) {\n                sum += num % 10;\n                num = num / 10;\n            }\n            if (sum > 0) {\n                nums += 1;\n            }\n        }\n        return nums;",
        "grade-170": {
            "execution": 0
        },
        "187": "//TODO: Implement me!\n        return 0;",
        "grade-187": {
            "execution": 0
        },
        "65": "return (int)arr.stream().filter(i -> i != 0).filter(i -> {\n            if (i < 0) i = -i;\n            int sum = 0;\n            while (i > 0) {\n                sum += i % 10;\n                i /= 10;\n            }\n            return sum > 0;\n        }).count();",
        "grade-65": {
            "execution": 0
        },
        "141": "int acc = 0;\n        for (int num : arr) {\n            boolean cond = true;\n            int digit = num < 0 ? num : Math.abs(num);\n            while (digit > 0) {\n                acc += digit % 10;\n                digit /= 10;\n            }\n        }\n        return acc;",
        "grade-141": {
            "execution": 0
        },
        "75": "// write your code here\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int sum = 0;\n            int x = arr.get(i);\n            if (x < 0) {\n                x = x * -1;\n            }\n            while (x > 0) {\n                sum += x % 10;\n                x = x / 10;\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;",
        "grade-75": {
            "execution": 0
        },
        "bleu-35": 0.0338576876492688,
        "bleu-8": 0.21036913702021345,
        "bleu-96": 0.09855633582216,
        "bleu-83": 3.066564846708494e-05,
        "bleu-76": 0.01515115617976717,
        "bleu-44": 0.06344441221934209,
        "bleu-33": 0.08297484243651411,
        "bleu-181": 0.05108326144327869,
        "bleu-29": 0.1119976489151394,
        "bleu-142": 0.055197465406863114,
        "bleu-13": 0.15955489763031994,
        "bleu-11": 0.008873734869465029,
        "bleu-30": 0.20309125744385095,
        "bleu-72": 0.06639616326029084,
        "bleu-79": 0.22558687961612997,
        "bleu-170": 0.18814372960284978,
        "bleu-187": 5.548449478882036e-07,
        "bleu-65": 0.08380050243855465,
        "bleu-141": 0.07156924343398424,
        "bleu-75": 0.2186851087315614,
        "codebleu-35": 0.18450581143468486,
        "codebleu-8": 0.45806535053847125,
        "codebleu-96": 0.29841379684593333,
        "codebleu-83": 0.03296703387130558,
        "codebleu-76": 0.12956927256665973,
        "codebleu-44": 0.22679614236021625,
        "codebleu-33": 0.3170031327178558,
        "codebleu-181": 0.2319503923391357,
        "codebleu-29": 0.37772405789803687,
        "codebleu-142": 0.1936414725785615,
        "codebleu-13": 0.43944517532724736,
        "codebleu-11": 0.1115769476400977,
        "codebleu-30": 0.5405163212441988,
        "codebleu-72": 0.24985884014094875,
        "codebleu-79": 0.44233968076214086,
        "codebleu-170": 0.4324173862119388,
        "codebleu-187": 0.02197900496877731,
        "codebleu-65": 0.30398695088960587,
        "codebleu-141": 0.24724891723424539,
        "codebleu-75": 0.46291271300887116,
        "chrf-35": 0.12154849332872483,
        "chrf-8": 0.3102878853117933,
        "chrf-96": 0.1722075579109524,
        "chrf-83": 0.0449373908141462,
        "chrf-76": 0.10132051916496763,
        "chrf-44": 0.1988263183455682,
        "chrf-33": 0.16639025814556793,
        "chrf-181": 0.1513121820985904,
        "chrf-29": 0.1840115233160127,
        "chrf-142": 0.20338706324101014,
        "chrf-13": 0.20733923800143553,
        "chrf-11": 0.11825794819608168,
        "chrf-30": 0.2956519713388508,
        "chrf-72": 0.16936003716245585,
        "chrf-79": 0.31333983420760375,
        "chrf-170": 0.20669189716087882,
        "chrf-187": 0.027835707140642943,
        "chrf-65": 0.16681744397358597,
        "chrf-141": 0.1956705016099036,
        "chrf-75": 0.26120923509751276,
        "rougel-35": 0.21857923497267762,
        "rougel-8": 0.4033613445378151,
        "rougel-96": 0.3384615384615384,
        "rougel-83": 0.08275862068965517,
        "rougel-76": 0.20359281437125748,
        "rougel-44": 0.3280423280423281,
        "rougel-33": 0.3024390243902439,
        "rougel-181": 0.27368421052631575,
        "rougel-29": 0.34418604651162793,
        "rougel-142": 0.31999999999999995,
        "rougel-13": 0.3893805309734513,
        "rougel-11": 0.2,
        "rougel-30": 0.43621399176954734,
        "rougel-72": 0.34920634920634924,
        "rougel-79": 0.4070796460176991,
        "rougel-170": 0.41071428571428575,
        "rougel-187": 0.04255319148936171,
        "rougel-65": 0.2912621359223301,
        "rougel-141": 0.3386243386243386,
        "rougel-75": 0.3930131004366813,
        "meteor-35": 0.1377102615319981,
        "meteor-8": 0.38044067879404764,
        "meteor-96": 0.21698133925221536,
        "meteor-83": 0.029337803855825646,
        "meteor-76": 0.10699588477366255,
        "meteor-44": 0.2281698413500404,
        "meteor-33": 0.23122819283306842,
        "meteor-181": 0.20168264501733624,
        "meteor-29": 0.2514569142079399,
        "meteor-142": 0.2308106245460796,
        "meteor-13": 0.305567671028748,
        "meteor-11": 0.1154039735099338,
        "meteor-30": 0.38821635864155624,
        "meteor-72": 0.21180400128276228,
        "meteor-79": 0.358562137570884,
        "meteor-170": 0.34347918048594733,
        "meteor-187": 0.01682085786375105,
        "meteor-65": 0.25436794884194597,
        "meteor-141": 0.2054971705739693,
        "meteor-75": 0.3455300898236758,
        "ruby-35": 0.14503816793893132,
        "ruby-8": 0.2442748091603053,
        "ruby-96": 0.22137404580152675,
        "ruby-83": 0.04580152671755722,
        "ruby-76": 0.12213740458015265,
        "ruby-44": 0.2290076335877863,
        "ruby-33": 0.16793893129770987,
        "ruby-181": 0.16030534351145043,
        "ruby-29": 0.23664122137404575,
        "ruby-142": 0.2137404580152672,
        "ruby-13": 0.25190839694656486,
        "ruby-11": 0.12213740458015265,
        "ruby-30": 0.2595419847328244,
        "ruby-72": 0.2442748091603053,
        "ruby-79": 0.2824427480916031,
        "ruby-170": 0.2748091603053435,
        "ruby-187": 0.022900763358778664,
        "ruby-65": 0.16793893129770987,
        "ruby-141": 0.2290076335877863,
        "ruby-75": 0.2442748091603053,
        "codebertscore_f1-35": 0.6550019979476929,
        "codebertscore_f3-35": 0.6324788928031921,
        "codebertscore_f1-8": 0.7908226251602173,
        "codebertscore_f3-8": 0.776362419128418,
        "codebertscore_f1-96": 0.7656926512718201,
        "codebertscore_f3-96": 0.7342101335525513,
        "codebertscore_f1-83": 0.5275853276252747,
        "codebertscore_f3-83": 0.48878014087677,
        "codebertscore_f1-76": 0.6645538806915283,
        "codebertscore_f3-76": 0.6144456267356873,
        "codebertscore_f1-44": 0.6709069609642029,
        "codebertscore_f3-44": 0.6395914554595947,
        "codebertscore_f1-33": 0.7426033616065979,
        "codebertscore_f3-33": 0.7235715389251709,
        "codebertscore_f1-181": 0.715056300163269,
        "codebertscore_f3-181": 0.6865838766098022,
        "codebertscore_f1-29": 0.759960412979126,
        "codebertscore_f3-29": 0.7312723994255066,
        "codebertscore_f1-142": 0.7126228213310242,
        "codebertscore_f3-142": 0.6710915565490723,
        "codebertscore_f1-13": 0.7848586440086365,
        "codebertscore_f3-13": 0.7591541409492493,
        "codebertscore_f1-11": 0.6513303518295288,
        "codebertscore_f3-11": 0.615696907043457,
        "codebertscore_f1-30": 0.782625675201416,
        "codebertscore_f3-30": 0.7721670269966125,
        "codebertscore_f1-72": 0.7338696122169495,
        "codebertscore_f3-72": 0.6992671489715576,
        "codebertscore_f1-79": 0.7941460609436035,
        "codebertscore_f3-79": 0.7713571786880493,
        "codebertscore_f1-170": 0.7917417287826538,
        "codebertscore_f3-170": 0.7686401605606079,
        "codebertscore_f1-187": 0.5289015173912048,
        "codebertscore_f3-187": 0.5038848519325256,
        "codebertscore_f1-65": 0.7329239845275879,
        "codebertscore_f3-65": 0.7065998315811157,
        "codebertscore_f1-141": 0.7560893297195435,
        "codebertscore_f3-141": 0.7207443118095398,
        "codebertscore_f1-75": 0.7760617136955261,
        "codebertscore_f3-75": 0.759497344493866,
        "codebertscore_s_f1-35": 0.6747854948043823,
        "codebertscore_s_f3-35": 0.6571595072746277,
        "codebertscore_s_f1-8": 0.7975719571113586,
        "codebertscore_s_f3-8": 0.7808315753936768,
        "codebertscore_s_f1-96": 0.7902790307998657,
        "codebertscore_s_f3-96": 0.7595875859260559,
        "codebertscore_s_f1-83": 0.5317627191543579,
        "codebertscore_s_f3-83": 0.5000156760215759,
        "codebertscore_s_f1-76": 0.6894778609275818,
        "codebertscore_s_f3-76": 0.6428390741348267,
        "codebertscore_s_f1-44": 0.6935639977455139,
        "codebertscore_s_f3-44": 0.6658399701118469,
        "codebertscore_s_f1-33": 0.7492166757583618,
        "codebertscore_s_f3-33": 0.72634357213974,
        "codebertscore_s_f1-181": 0.7324385046958923,
        "codebertscore_s_f3-181": 0.7049986720085144,
        "codebertscore_s_f1-29": 0.7762564420700073,
        "codebertscore_s_f3-29": 0.7472699284553528,
        "codebertscore_s_f1-142": 0.7407974600791931,
        "codebertscore_s_f3-142": 0.6994665265083313,
        "codebertscore_s_f1-13": 0.7930430769920349,
        "codebertscore_s_f3-13": 0.764894962310791,
        "codebertscore_s_f1-11": 0.682864248752594,
        "codebertscore_s_f3-11": 0.6479060649871826,
        "codebertscore_s_f1-30": 0.7839346528053284,
        "codebertscore_s_f3-30": 0.7727965712547302,
        "codebertscore_s_f1-72": 0.7569780349731445,
        "codebertscore_s_f3-72": 0.7248121500015259,
        "codebertscore_s_f1-79": 0.8030669689178467,
        "codebertscore_s_f3-79": 0.7774896621704102,
        "codebertscore_s_f1-170": 0.800813615322113,
        "codebertscore_s_f3-170": 0.7749660611152649,
        "codebertscore_s_f1-187": 0.5754690170288086,
        "codebertscore_s_f3-187": 0.5552332401275635,
        "codebertscore_s_f1-65": 0.7482022047042847,
        "codebertscore_s_f3-65": 0.7202064394950867,
        "codebertscore_s_f1-141": 0.7776721119880676,
        "codebertscore_s_f3-141": 0.7408174872398376,
        "codebertscore_s_f1-75": 0.7848324775695801,
        "codebertscore_s_f3-75": 0.7651772499084473,
        "gpt35_nsnr-35": 3,
        "raw_gpt35_nsnr-35": "3",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-96": 3,
        "raw_gpt35_nsnr-96": "3",
        "gpt35_nsnr-83": 4,
        "raw_gpt35_nsnr-83": "4",
        "gpt35_nsnr-76": 3,
        "raw_gpt35_nsnr-76": "3",
        "gpt35_nsnr-44": 4,
        "raw_gpt35_nsnr-44": "4",
        "gpt35_nsnr-33": 4,
        "raw_gpt35_nsnr-33": "4",
        "gpt35_nsnr-181": 4,
        "raw_gpt35_nsnr-181": "4",
        "gpt35_nsnr-29": 4,
        "raw_gpt35_nsnr-29": "4",
        "gpt35_nsnr-142": 3,
        "raw_gpt35_nsnr-142": "3",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-11": 4,
        "raw_gpt35_nsnr-11": "4",
        "gpt35_nsnr-30": 4,
        "raw_gpt35_nsnr-30": "4",
        "gpt35_nsnr-72": 4,
        "raw_gpt35_nsnr-72": "4",
        "gpt35_nsnr-79": 4,
        "raw_gpt35_nsnr-79": "4",
        "gpt35_nsnr-170": 4,
        "raw_gpt35_nsnr-170": "4",
        "gpt35_nsnr-187": 3,
        "raw_gpt35_nsnr-187": "3",
        "gpt35_nsnr-65": 4,
        "raw_gpt35_nsnr-65": "4",
        "gpt35_nsnr-141": 4,
        "raw_gpt35_nsnr-141": "4",
        "gpt35_nsnr-75": 4,
        "raw_gpt35_nsnr-75": "4",
        "gpt35_nswr-35": 2,
        "raw_gpt35_nswr-35": "2",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-96": 2,
        "raw_gpt35_nswr-96": "2",
        "gpt35_nswr-83": 4,
        "raw_gpt35_nswr-83": "4",
        "gpt35_nswr-76": 2,
        "raw_gpt35_nswr-76": "2",
        "gpt35_nswr-44": 3,
        "raw_gpt35_nswr-44": "3",
        "gpt35_nswr-33": 3,
        "raw_gpt35_nswr-33": "3",
        "gpt35_nswr-181": 3,
        "raw_gpt35_nswr-181": "3",
        "gpt35_nswr-29": 3,
        "raw_gpt35_nswr-29": "3",
        "gpt35_nswr-142": 2,
        "raw_gpt35_nswr-142": "2",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-11": 2,
        "raw_gpt35_nswr-11": "2",
        "gpt35_nswr-30": 3,
        "raw_gpt35_nswr-30": "3",
        "gpt35_nswr-72": 3,
        "raw_gpt35_nswr-72": "3",
        "gpt35_nswr-79": 3,
        "raw_gpt35_nswr-79": "3",
        "gpt35_nswr-170": 3,
        "raw_gpt35_nswr-170": "3",
        "gpt35_nswr-187": 3,
        "raw_gpt35_nswr-187": "3",
        "gpt35_nswr-65": 3,
        "raw_gpt35_nswr-65": "3",
        "gpt35_nswr-141": 3,
        "raw_gpt35_nswr-141": "3",
        "gpt35_nswr-75": 3,
        "raw_gpt35_nswr-75": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which sorts the given list of integers\n    // in ascending order according to the sum of their digits.\n    // Note: if there are several items with similar sum of their digits,\n    // order them based on their index in original list.\n    // For example:\n    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([]) == []\n    public static ArrayList<Integer> orderByPoints(ArrayList<Integer> nums) {\n",
        "snippet": [
            "        List<Integer> result = new ArrayList<>(nums);\n        result.sort((o1, o2) -> {\n            int sum1 = 0;\n            int sum2 = 0;\n\n            for (int i = 0; i < String.valueOf(o1).length(); i++) {\n                if (i != 0 || o1 >= 0) {\n                    sum1 += (String.valueOf(o1).charAt(i) - '0' );\n                    if (i == 1 && o1 < 0) {\n                        sum1 = -sum1;\n                    }\n                }\n            }\n            for (int i = 0; i < String.valueOf(o2).length(); i++) {\n                if (i != 0 || o2 >= 0) {\n                    sum2 += (String.valueOf(o2).charAt(i) - '0' );\n                    if (i == 1 && o2 < 0) {\n                        sum2 = -sum2;\n                    }\n                }\n            }\n            return Integer.compare(sum1, sum2);\n        });\n        return result;\n    }\n}"
        ],
        "simplified": "Write a function which sorts the given list of integers in ascending order according to the sum of their digits. Note: if there are several items with similar sum of their digits, order them based on their index in original list.",
        "task_id": "145",
        "31": "// YOUR CODE GOES HERE\n      return null;",
        "grade-31": {
            "execution": 0
        },
        "6": "ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < nums.size(); i++) {\n            result.add(i);\n        }\n        Collections.sort(result, new Comparator<Integer>() {\n            public int compare(Integer o1, Integer o2) {\n                int lhs = Math.abs(nums.get(o1));\n                int rhs = Math.abs(nums.get(o2));\n                return Integer.compare(sumOfDigits(lhs), sumOfDigits(rhs));\n            }\n        });\n        return result;",
        "grade-6": {
            "execution": 0
        },
        "81": "// IMPLEMENT ME\n        return null;",
        "grade-81": {
            "execution": 0
        },
        "72": "HashMap<Integer,ArrayList<Integer>> map = new HashMap<>();\n        for(int i = 0; i < nums.size(); ++i) {\n            int sum = 0;\n            int num = nums.get(i);\n            while(num != 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n            if(!map.containsKey(sum)) {\n                map.put(sum,new ArrayList<>());\n            }\n            map.get(sum).add(nums.get(i));\n        }\n        ArrayList<Integer> out = new ArrayList<>();\n        ArrayList<Integer> keys = new ArrayList<>(map.keySet());\n        Collections.sort(keys);\n        for(int i = 0; i < keys.size(); ++i) {\n            ArrayList<Integer> val = map.get(keys.get(i));\n            for(int j = 0; j < val.size(); ++j) {\n                out.add(val.get(j));\n            }\n        }\n        return out;",
        "grade-72": {
            "execution": 0
        },
        "66": "int min = 100;\n        int max = 0;\n        for (int num : nums) {\n            if (num > 0) {\n                int count = 0;\n                while (num > 0) {\n                    count += num % 10;\n                    num /= 10;\n                }\n                if (count > max) max = count;\n                if (count < min) min = count;\n            } else {\n                int count = 0;\n                while (num < 0) {\n                    count += Math.abs(num % 10);\n                    num /= 10;\n                }\n                if (count > max) max = count;\n                if (count < min) min = count;\n            }\n        }\n        ArrayList<ArrayList<Integer>> arr = new ArrayList<ArrayList<Integer>>();\n        for (int i = 0; i < max - min + 1; i++) {\n            arr.add(new ArrayList<Integer>());\n        }\n        for (int num : nums) {\n            if (num > 0) {\n                int count = 0;\n                while (num > 0) {\n                    count += num % 10;\n                    num /= 10;\n                }\n                arr.get(count - min).add(num);\n            } else {\n                int count = 0;\n                while (num < 0) {\n                    count += Math.abs(num % 10);\n                    num /= 10;\n                }\n                arr.get(count - min).add(num);\n            }\n        }\n        ArrayList<Integer> ret = new ArrayList<Integer>();\n        for (ArrayList<Integer> list : arr) {\n            for (int num : list) {\n                ret.add(num);\n            }\n        }\n        return ret;",
        "grade-66": {
            "execution": 0
        },
        "39": "ArrayList<Integer> ans = new ArrayList<Integer>();\n        //\n        // your code here\n        //\n        return ans;",
        "grade-39": {
            "execution": 0
        },
        "28": "ArrayList<Integer> points = new ArrayList<Integer>();\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < nums.size(); i++) {\n            Integer num = nums.get(i);\n            points.add(num % 10 + num / 10);\n        }\n        for (int i = 0; i < nums.size(); i++) {\n            Integer min = Collections.min(points);\n            for (int j = 0; j < points.size(); j++) {\n                if (points.get(j) == min) {\n                    points.remove(j);\n                    result.add(nums.get(j));\n                    nums.remove(j);\n                    break;\n                }\n            }\n        }\n        return result;",
        "grade-28": {
            "execution": 0
        },
        "172": "ArrayList<Integer> ret = new ArrayList<>();\n        HashMap<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n            int n = nums.get(i);\n            while (n != 0) {\n                sum += n % 10;\n                n /= 10;\n            }\n            map.put(sum, nums.get(i));\n        }\n        TreeMap<Integer, Integer> tm = new TreeMap<>(map);\n        ret.addAll(tm.values());\n        return ret;",
        "grade-172": {
            "execution": 0
        },
        "23": "ArrayList<Pair<Integer, Integer>> pairs = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            int n = nums.get(i);\n            int sum = 0;\n            while (n != 0) {\n                sum += n % 10;\n                n /= 10;\n            }\n            pairs.add(new Pair<>(sum, i));\n        }\n        Collections.sort(pairs, new Comparator<Pair<Integer, Integer>>() {\n            @Override\n            public int compare(Pair<Integer, Integer> p1, Pair<Integer, Integer> p2) {\n                if (p1.getValue0() != p2.getValue0()) {\n                    return p1.getValue0() - p2.getValue0();\n                }\n                return p1.getValue1() - p2.getValue1();\n            }\n        });\n        ArrayList<Integer> res = new ArrayList<>();\n        for (Pair<Integer, Integer> p : pairs) {\n            res.add(nums.get(p.getValue1()));\n        }\n        return res;",
        "grade-23": {
            "execution": 0
        },
        "194": "Map<Integer, Set<Integer>> map = new HashMap<>();\n        for (int i = 0; i < nums.size(); i++) {\n            int sum = nums.get(i) < 0 ? (-1 * nums.get(i)) : nums.get(i);\n            while (sum > 0) {\n                int digit = sum % 10;\n                sum /= 10;\n                if (map.containsKey(digit)) {\n                    map.get(digit).add(i);\n                } else {\n                    Set<Integer> set = new HashSet<>();\n                    set.add(i);\n                    map.put(digit, set);\n                }\n            }\n        }\n        ArrayList<Integer> res = new ArrayList<>(nums.size());\n        for (int i = 0; i < nums.size(); i++) {\n            res.add(0);\n        }\n        ArrayList<Integer> keys = new ArrayList<>(map.keySet());\n        Collections.sort(keys);\n        int index = 0;\n        for (int key : keys) {\n            Set<Integer> set = map.get(key);\n            for (int i : set) {\n                res.set(index, nums.get(i));\n                index++;\n            }\n        }\n        return res;",
        "grade-194": {
            "execution": 0
        },
        "126": "TreeMap<Integer, ArrayList<Integer>> map = new TreeMap<>();\n        for (int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n            int n = nums.get(i);\n            while (n != 0) {\n                sum += n % 10;\n                n /= 10;\n            }\n            ArrayList<Integer> list = map.getOrDefault(sum, new ArrayList<>());\n            list.add(nums.get(i));\n            map.put(sum, list);\n        }\n        ArrayList<Integer> ans = new ArrayList<>();\n        for (Map.Entry<Integer, ArrayList<Integer>> entry : map.entrySet()) {\n            ArrayList<Integer> list = entry.getValue();\n            for (int i = 0; i < list.size(); i++) {\n                ans.add(list.get(i));\n            }\n        }\n        return ans;",
        "grade-126": {
            "execution": 0
        },
        "8": "return null;",
        "grade-8": {
            "execution": 0
        },
        "7": "ArrayList<Integer> result = new ArrayList<Integer>();\n        Integer[] sumOfDigits = new Integer[nums.size()];\n        for (int i = 0; i < nums.size(); i++) {\n            sumOfDigits[i] = sumOfDigits(nums.get(i));\n        }\n        Integer[] sortedSumOfDigits = insertionSort(sumOfDigits);\n        int currentIndex = 0;\n        while (currentIndex < sortedSumOfDigits.length) {\n            for (int i = 0; i < nums.size(); i++) {\n                if (sumOfDigits(nums.get(i)) == sortedSumOfDigits[currentIndex]) {\n                    result.add(nums.get(i));\n                    nums.set(i, null);\n                    currentIndex++;\n                }\n            }\n        }\n        return result;",
        "grade-7": {
            "execution": 0
        },
        "24": "// TODO: Remove pass and write your implementation of orderByPoints\n        pass",
        "grade-24": {
            "execution": 0
        },
        "64": "return new ArrayList<Integer>();",
        "grade-64": {
            "execution": 0
        },
        "69": "// YOUR CODE GOES HERE\n        return nums;",
        "grade-69": {
            "execution": 0
        },
        "159": "ArrayList<Integer> arr = new ArrayList<Integer>();\n        for (int i = 0; i < nums.size(); i++) {\n            Integer num = nums.get(i);\n            Integer sum = num.toString().chars().map(Character::getNumericValue).sum();\n            arr.add(sum);\n        }\n        Map<Integer, Integer> map = new HashMap<Integer, Integer>();\n        for (int i = 0; i < nums.size(); i++) {\n            map.put(arr.get(i), nums.get(i));\n        }\n        Arrays.sort(arr.toArray());\n        ArrayList<Integer> array = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size(); i++) {\n            array.add(map.get(arr.get(i)));\n        }\n        return array;",
        "grade-159": {
            "execution": 0
        },
        "178": "throw new UnsupportedOperationException(\"Method orderByPoints not implemented.\");",
        "grade-178": {
            "execution": 0
        },
        "55": "ArrayList<Pair<Integer, Integer>> l = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            int n = nums.get(i);\n            int s = n >= 0 ? n : -n;\n            int sum = 0;\n            while (s > 0) {\n                sum += s % 10;\n                s /= 10;\n            }\n            l.add(new Pair<>(sum, n));\n        }\n        Collections.sort(l, (a, b) -> {\n            if (a.getValue0() != b.getValue0())\n                return a.getValue0() - b.getValue0();\n            return a.getValue1() - b.getValue1();\n        });\n        ArrayList<Integer> res = new ArrayList<>();\n        for (Pair<Integer, Integer> p : l)\n            res.add(p.getValue1());\n        return res;",
        "grade-55": {
            "execution": 0
        },
        "124": "// write your solution here\n\t\treturn null;",
        "grade-124": {
            "execution": 0
        },
        "bleu-31": 2.6730641286299225e-12,
        "bleu-6": 0.17568893182203116,
        "bleu-81": 3.101385940333191e-15,
        "bleu-72": 0.211607037091133,
        "bleu-66": 0.16652382921271947,
        "bleu-39": 0.0002614800009019033,
        "bleu-28": 0.26313768133960863,
        "bleu-172": 0.1566288454335069,
        "bleu-23": 0.2049864420051963,
        "bleu-194": 0.22937595784066667,
        "bleu-126": 0.25915718506508645,
        "bleu-8": 4.916630600933851e-33,
        "bleu-7": 0.2662620484604782,
        "bleu-24": 0.0,
        "bleu-64": 3.545621711407353e-10,
        "bleu-69": 2.95823174135423e-12,
        "bleu-159": 0.23746254815097018,
        "bleu-178": 5.74711925504842e-07,
        "bleu-55": 0.2137706882829573,
        "bleu-124": 2.6730641286299225e-12,
        "codebleu-31": 0.015350877283579737,
        "codebleu-6": 0.36140115107085996,
        "codebleu-81": 0.010964912282904613,
        "codebleu-72": 0.545716508700513,
        "codebleu-66": 0.5406860100469129,
        "codebleu-39": 0.046070488078352775,
        "codebleu-28": 0.5017317653823159,
        "codebleu-172": 0.348207790564535,
        "codebleu-23": 0.5210313984958055,
        "codebleu-194": 0.5796449488527978,
        "codebleu-126": 0.5239680991815246,
        "codebleu-8": 0.006578947368421052,
        "codebleu-7": 0.4682806693979366,
        "codebleu-24": 0.017543859649122803,
        "codebleu-64": 0.01973684210966888,
        "codebleu-69": 0.015350877298679283,
        "codebleu-159": 0.5226664348974728,
        "codebleu-178": 0.019736842105268725,
        "codebleu-55": 0.516783630013383,
        "codebleu-124": 0.015350877283579737,
        "chrf-31": 0.01651062225553234,
        "chrf-6": 0.34681928700230263,
        "chrf-81": 0.015530687979103468,
        "chrf-72": 0.3050449617567994,
        "chrf-66": 0.2859843012730663,
        "chrf-39": 0.10663249671417555,
        "chrf-28": 0.34063205701435173,
        "chrf-172": 0.2801835633862565,
        "chrf-23": 0.31686138242242884,
        "chrf-194": 0.3237636094199925,
        "chrf-126": 0.30438677243461537,
        "chrf-8": 0.014618828701854119,
        "chrf-7": 0.34735454531205723,
        "chrf-24": 0.03480255351970805,
        "chrf-64": 0.07189811767925336,
        "chrf-69": 0.018579782652568596,
        "chrf-159": 0.2911991431243844,
        "chrf-178": 0.04452017430307817,
        "chrf-55": 0.31565423239312124,
        "chrf-124": 0.029799034476893787,
        "rougel-31": 0.017241379310344827,
        "rougel-6": 0.41833810888252154,
        "rougel-81": 0.017391304347826084,
        "rougel-72": 0.3956989247311828,
        "rougel-66": 0.33691756272401435,
        "rougel-39": 0.11952191235059761,
        "rougel-28": 0.4494949494949495,
        "rougel-172": 0.3955431754874652,
        "rougel-23": 0.37037037037037035,
        "rougel-194": 0.38888888888888895,
        "rougel-126": 0.3853211009174312,
        "rougel-8": 0.017699115044247787,
        "rougel-7": 0.4607843137254902,
        "rougel-24": 0.0,
        "rougel-64": 0.06866952789699571,
        "rougel-69": 0.017241379310344827,
        "rougel-159": 0.42032332563510394,
        "rougel-178": 0.058333333333333334,
        "rougel-55": 0.37875288683602776,
        "rougel-124": 0.017241379310344827,
        "meteor-31": 0.00496031746031746,
        "meteor-6": 0.2882876393446892,
        "meteor-81": 0.00496524329692155,
        "meteor-72": 0.3367256884448095,
        "meteor-66": 0.34304170602481304,
        "meteor-39": 0.057538006756756764,
        "meteor-28": 0.31600658489467065,
        "meteor-172": 0.2516081908994176,
        "meteor-23": 0.3423187388235249,
        "meteor-194": 0.3664777404521757,
        "meteor-126": 0.31624467437959497,
        "meteor-8": 0.004975124378109453,
        "meteor-7": 0.3295178578084142,
        "meteor-24": 0.007418397626112759,
        "meteor-64": 0.03688646504709965,
        "meteor-69": 0.00744047619047619,
        "meteor-159": 0.30651367992889805,
        "meteor-178": 0.017292490118577076,
        "meteor-55": 0.32286076361081195,
        "meteor-124": 0.00496031746031746,
        "ruby-31": 0.008968609865470878,
        "ruby-6": 0.273542600896861,
        "ruby-81": 0.008968609865470878,
        "ruby-72": 0.2024793388429752,
        "ruby-66": 0.21492537313432836,
        "ruby-39": 0.06278026905829592,
        "ruby-28": 0.3183856502242153,
        "ruby-172": 0.29147982062780264,
        "ruby-23": 0.1610169491525424,
        "ruby-194": 0.23487544483985767,
        "ruby-126": 0.16143497757847536,
        "ruby-8": 0.008968609865470878,
        "ruby-7": 0.3004484304932735,
        "ruby-24": 0.0,
        "ruby-64": 0.0358744394618834,
        "ruby-69": 0.008968609865470878,
        "ruby-159": 0.22421524663677128,
        "ruby-178": 0.03139013452914796,
        "ruby-55": 0.17040358744394624,
        "ruby-124": 0.008968609865470878,
        "codebertscore_f1-31": 0.5121418833732605,
        "codebertscore_f3-31": 0.4734044075012207,
        "codebertscore_f1-6": 0.7651281952857971,
        "codebertscore_f3-6": 0.7493900060653687,
        "codebertscore_f1-81": 0.5195665955543518,
        "codebertscore_f3-81": 0.4758647382259369,
        "codebertscore_f1-72": 0.7543905973434448,
        "codebertscore_f3-72": 0.7515279054641724,
        "codebertscore_f1-66": 0.750354528427124,
        "codebertscore_f3-66": 0.7475734949111938,
        "codebertscore_f1-39": 0.6288204789161682,
        "codebertscore_f3-39": 0.5714237093925476,
        "codebertscore_f1-28": 0.7411954402923584,
        "codebertscore_f3-28": 0.723156750202179,
        "codebertscore_f1-172": 0.7499060034751892,
        "codebertscore_f3-172": 0.734783411026001,
        "codebertscore_f1-23": 0.7554872035980225,
        "codebertscore_f3-23": 0.7598270773887634,
        "codebertscore_f1-194": 0.7422511577606201,
        "codebertscore_f3-194": 0.7402597069740295,
        "codebertscore_f1-126": 0.7521313428878784,
        "codebertscore_f3-126": 0.7480678558349609,
        "codebertscore_f1-8": 0.460440993309021,
        "codebertscore_f3-8": 0.4116389751434326,
        "codebertscore_f1-7": 0.7448335886001587,
        "codebertscore_f3-7": 0.7384575605392456,
        "codebertscore_f1-24": 0.5504986643791199,
        "codebertscore_f3-24": 0.5245206356048584,
        "codebertscore_f1-64": 0.6050162315368652,
        "codebertscore_f3-64": 0.5121808648109436,
        "codebertscore_f1-69": 0.5479140281677246,
        "codebertscore_f3-69": 0.5152920484542847,
        "codebertscore_f1-159": 0.7461710572242737,
        "codebertscore_f3-159": 0.7379976511001587,
        "codebertscore_f1-178": 0.5417006015777588,
        "codebertscore_f3-178": 0.5029736161231995,
        "codebertscore_f1-55": 0.7555913925170898,
        "codebertscore_f3-55": 0.7528500556945801,
        "codebertscore_f1-124": 0.5189987421035767,
        "codebertscore_f3-124": 0.4819548428058624,
        "codebertscore_s_f1-31": 0.5727950930595398,
        "codebertscore_s_f3-31": 0.5498563051223755,
        "codebertscore_s_f1-6": 0.7807144522666931,
        "codebertscore_s_f3-6": 0.7718167901039124,
        "codebertscore_s_f1-81": 0.5752843022346497,
        "codebertscore_s_f3-81": 0.5459346771240234,
        "codebertscore_s_f1-72": 0.7775400876998901,
        "codebertscore_s_f3-72": 0.7692895531654358,
        "codebertscore_s_f1-66": 0.758837103843689,
        "codebertscore_s_f3-66": 0.7519463896751404,
        "codebertscore_s_f1-39": 0.684988260269165,
        "codebertscore_s_f3-39": 0.6303936839103699,
        "codebertscore_s_f1-28": 0.7672290205955505,
        "codebertscore_s_f3-28": 0.7493134140968323,
        "codebertscore_s_f1-172": 0.7861243486404419,
        "codebertscore_s_f3-172": 0.7719627618789673,
        "codebertscore_s_f1-23": 0.782376766204834,
        "codebertscore_s_f3-23": 0.7892307043075562,
        "codebertscore_s_f1-194": 0.7666524052619934,
        "codebertscore_s_f3-194": 0.7615121006965637,
        "codebertscore_s_f1-126": 0.7782202363014221,
        "codebertscore_s_f3-126": 0.7684088349342346,
        "codebertscore_s_f1-8": 0.5879679918289185,
        "codebertscore_s_f3-8": 0.5318174362182617,
        "codebertscore_s_f1-7": 0.7670758962631226,
        "codebertscore_s_f3-7": 0.7575666308403015,
        "codebertscore_s_f1-24": 0.5950156450271606,
        "codebertscore_s_f3-24": 0.584344744682312,
        "codebertscore_s_f1-64": 0.7104268670082092,
        "codebertscore_s_f3-64": 0.6142411231994629,
        "codebertscore_s_f1-69": 0.6269497871398926,
        "codebertscore_s_f3-69": 0.6058676242828369,
        "codebertscore_s_f1-159": 0.7701140642166138,
        "codebertscore_s_f3-159": 0.7549453973770142,
        "codebertscore_s_f1-178": 0.6055278778076172,
        "codebertscore_s_f3-178": 0.5798981785774231,
        "codebertscore_s_f1-55": 0.7876836061477661,
        "codebertscore_s_f3-55": 0.7856365442276001,
        "codebertscore_s_f1-124": 0.579641580581665,
        "codebertscore_s_f3-124": 0.5544543266296387,
        "gpt35_nsnr-31": 0,
        "raw_gpt35_nsnr-31": "0",
        "gpt35_nsnr-6": 0,
        "raw_gpt35_nsnr-6": "3 - The code snippet correctly sorts the given list of integers in ascending order according to the sum of their digits. However, it does not handle the case where there are several items with similar sum of their digits and order them based on their index in original list. The code only sorts based on the sum of digits.",
        "gpt35_nsnr-81": 0,
        "raw_gpt35_nsnr-81": "0",
        "gpt35_nsnr-72": 4,
        "raw_gpt35_nsnr-72": "4",
        "gpt35_nsnr-66": 3,
        "raw_gpt35_nsnr-66": "3",
        "gpt35_nsnr-39": 2,
        "raw_gpt35_nsnr-39": "2",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-172": 4,
        "raw_gpt35_nsnr-172": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-194": 3,
        "raw_gpt35_nsnr-194": "3",
        "gpt35_nsnr-126": 4,
        "raw_gpt35_nsnr-126": "4",
        "gpt35_nsnr-8": 0,
        "raw_gpt35_nsnr-8": "0",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-24": 0,
        "raw_gpt35_nsnr-24": "0",
        "gpt35_nsnr-64": 4,
        "raw_gpt35_nsnr-64": "4",
        "gpt35_nsnr-69": 3,
        "raw_gpt35_nsnr-69": "3",
        "gpt35_nsnr-159": 4,
        "raw_gpt35_nsnr-159": "4",
        "gpt35_nsnr-178": 4,
        "raw_gpt35_nsnr-178": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-124": 0,
        "raw_gpt35_nsnr-124": "0",
        "gpt35_nswr-31": 2,
        "raw_gpt35_nswr-31": "2",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-81": 2,
        "raw_gpt35_nswr-81": "2",
        "gpt35_nswr-72": 3,
        "raw_gpt35_nswr-72": "3",
        "gpt35_nswr-66": 2,
        "raw_gpt35_nswr-66": "2",
        "gpt35_nswr-39": 2,
        "raw_gpt35_nswr-39": "2",
        "gpt35_nswr-28": 2,
        "raw_gpt35_nswr-28": "2",
        "gpt35_nswr-172": 3,
        "raw_gpt35_nswr-172": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-194": 3,
        "raw_gpt35_nswr-194": "3",
        "gpt35_nswr-126": 3,
        "raw_gpt35_nswr-126": "3",
        "gpt35_nswr-8": 0,
        "raw_gpt35_nswr-8": "0",
        "gpt35_nswr-7": 2,
        "raw_gpt35_nswr-7": "2",
        "gpt35_nswr-24": 3,
        "raw_gpt35_nswr-24": "3",
        "gpt35_nswr-64": 2,
        "raw_gpt35_nswr-64": "2",
        "gpt35_nswr-69": 2,
        "raw_gpt35_nswr-69": "2",
        "gpt35_nswr-159": 2,
        "raw_gpt35_nswr-159": "2",
        "gpt35_nswr-178": 4,
        "raw_gpt35_nswr-178": "4",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-124": 2,
        "raw_gpt35_nswr-124": "2"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // \"\n    // This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    // multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    // change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    // Examples:\n    // For lst = [1,2,3] the output should be 6\n    // For lst = []  the output should be 0\n    // For lst = [-1,-5,2,-1,-5]  the output should be -126\n    public static int sumSquares(ArrayList<Integer> lst) {\n",
        "snippet": [
            "        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                result.add(lst.get(i) * lst.get(i));\n            } else if (i % 4 == 0) {\n                result.add((int) Math.pow(lst.get(i), 3));\n            } else {\n                result.add(lst.get(i));\n            }\n        }\n        return result.stream().reduce(Integer::sum).orElse(0);\n    }\n}"
        ],
        "simplified": "\" This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.",
        "task_id": "142",
        "36": "for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                lst.set(i, (int) Math.pow(lst.get(i), 2));\n            } else if (i % 4 == 0) {\n                lst.set(i, (int) Math.pow(lst.get(i), 3));\n            }\n        }\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            sum += lst.get(i);\n        }\n        return sum;",
        "grade-36": {
            "execution": 1
        },
        "6": "int total = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int x = lst.get(i);\n            if (i % 3 == 0) {\n                x = x * x;\n            }\n            if (i % 4 == 0 && i % 3 != 0) {\n                x = x * x * x;\n            }\n            total += x;\n        }\n        return total;",
        "grade-6": {
            "execution": 1
        },
        "111": "return lst.stream().mapToInt(i -> {\n            if (i % 3 == 0 && i % 4 == 0) {\n                return i * i * i;\n            } else if (i % 3 == 0) {\n                return i * i;\n            } else if (i % 4 == 0) {\n                return i * i * i;\n            } else {\n                return i;\n            }\n        }).sum();",
        "grade-111": {
            "execution": 0
        },
        "95": "int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0)\n                sum += Math.pow(lst.get(i), 2);\n            else if (i % 4 == 0)\n                sum += Math.pow(lst.get(i), 3);\n            else\n                sum += lst.get(i);\n        }\n        return sum;",
        "grade-95": {
            "execution": 1
        },
        "80": "return lst.stream().map(i -> {\n            int index = lst.indexOf(i);\n            if (index % 3 == 0) {\n                return (int) Math.pow(i, 2);\n            } else if (index % 4 == 0 && index % 3 != 0) {\n                return (int) Math.pow(i, 3);\n            } else {\n                return i;\n            }\n        }).mapToInt(Integer::intValue).sum();",
        "grade-80": {
            "execution": 0
        },
        "43": "int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int num = lst.get(i);\n            if (i % 3 == 0) {\n                sum += num * num;\n            } else if (i % 4 == 0) {\n                sum += num * num * num;\n            } else {\n                sum += num;\n            }\n        }\n        return sum;",
        "grade-43": {
            "execution": 1
        },
        "31": "return null;",
        "grade-31": {
            "execution": 0
        },
        "26": "return lst.stream().mapToInt(num -> {\n                if (num % 3 == 0 && num % 4 == 0) {\n                    return (int)Math.pow(num,3);\n                }\n                else if (num % 3 == 0) {\n                    return (int)Math.pow(num,2);\n                }\n                else if (num % 4 == 0) {\n                    return (int)Math.pow(num,3);\n                }\n                else return num;\n            }).sum();",
        "grade-26": {
            "execution": 0
        },
        "169": "int total = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                total += lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0) {\n                total += lst.get(i) * lst.get(i) * lst.get(i);\n            } else {\n                total += lst.get(i);\n            }\n        }\n        return total;",
        "grade-169": {
            "execution": 1
        },
        "8": "// Write code here",
        "grade-8": {
            "execution": 0
        },
        "7": "return 0;",
        "grade-7": {
            "execution": 0
        },
        "28": "for(int i = 0; i < lst.size(); i++) {\n    \t\tif(i % 3 == 0) {\n    \t\t\tlst.set(i, lst.get(i) * lst.get(i));\n    \t\t}\n    \t\tif(i % 4 == 0 && i % 3 != 0) {\n    \t\t\tlst.set(i, lst.get(i) * lst.get(i) * lst.get(i));\n    \t\t}\n    \t}\n    \tint sum = 0;\n    \tfor(int i : lst) {\n    \t\tsum += i;\n    \t}\n    \treturn sum;",
        "grade-28": {
            "execution": 1
        },
        "77": "int s = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                s += lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0) {\n                s += lst.get(i) * lst.get(i) * lst.get(i);\n            } else {\n                s += lst.get(i);\n            }\n        }\n        return s;",
        "grade-77": {
            "execution": 1
        },
        "82": "int r = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                r += lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0) {\n                r += lst.get(i) * lst.get(i) * lst.get(i);\n            } else {\n                r += lst.get(i);\n            }\n        }\n        return r;",
        "grade-82": {
            "execution": 1
        },
        "199": "System.out.println(\"lst: \" + lst);\n        int result = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                result += lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0) {\n                result += lst.get(i) * lst.get(i) * lst.get(i);\n            } else {\n                result += lst.get(i);\n            }\n        }\n        return result;",
        "grade-199": {
            "execution": 1
        },
        "70": "int total = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int entry = lst.get(i);\n            if (i % 3 == 0) {\n                total += entry * entry;\n            } else if (i % 4 == 0) {\n                total += entry * entry * entry;\n            } else {\n                total += entry;\n            }\n        }\n        return total;",
        "grade-70": {
            "execution": 1
        },
        "168": "int result = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int num = lst.get(i);\n            if (i % 3 == 0) {\n                result += num * num;\n            } else if (i % 4 == 0) {\n                result += num * num * num;\n            } else {\n                result += num;\n            }\n        }\n        return result;",
        "grade-168": {
            "execution": 1
        },
        "79": "int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                lst.set(i, (int) Math.pow(lst.get(i), 2));\n            } else if (i % 4 == 0 && i % 3 != 0) {\n                lst.set(i, (int) Math.pow(lst.get(i), 3));\n            }\n            sum += lst.get(i);\n        }\n        return sum;",
        "grade-79": {
            "execution": 1
        },
        "177": "int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int val = lst.get(i);\n            if (i % 3 == 0) {\n                sum += val * val;\n            } else if (i % 4 == 0) {\n                sum += val * val * val;\n            } else {\n                sum += val;\n            }\n        }\n        return sum;",
        "grade-177": {
            "execution": 1
        },
        "112": "int sum = 0;\n        // Fill in your code here. \n        return sum;",
        "grade-112": {
            "execution": 0
        },
        "bleu-36": 0.5774121871029331,
        "bleu-6": 0.29408695448143224,
        "bleu-111": 0.23319542540493557,
        "bleu-95": 0.4249058272427165,
        "bleu-80": 0.28097327279233536,
        "bleu-43": 0.32692866432944867,
        "bleu-31": 1.3849775310395938e-20,
        "bleu-26": 0.25662685486013226,
        "bleu-169": 0.5037411537522329,
        "bleu-8": 0.0,
        "bleu-7": 2.5166711922618603e-20,
        "bleu-28": 0.5134937798939913,
        "bleu-77": 0.5037411537522329,
        "bleu-82": 0.5037411537522329,
        "bleu-199": 0.5584512701357739,
        "bleu-70": 0.32564404748714765,
        "bleu-168": 0.3549968343421084,
        "bleu-79": 0.5468662378666483,
        "bleu-177": 0.32692866432944867,
        "bleu-112": 6.0443530003065914e-05,
        "codebleu-36": 0.6895789449410997,
        "codebleu-6": 0.37343761397275116,
        "codebleu-111": 0.3504735880885742,
        "codebleu-95": 0.48316795417166153,
        "codebleu-80": 0.44995993783769944,
        "codebleu-43": 0.4087704681596633,
        "codebleu-31": 0.0065681444991790025,
        "codebleu-26": 0.4354722431782091,
        "codebleu-169": 0.5669770535779465,
        "codebleu-8": 0.009852216748768471,
        "codebleu-7": 0.006568144499179005,
        "codebleu-28": 0.6292188134022026,
        "codebleu-77": 0.5833974148258939,
        "codebleu-82": 0.5833974148258939,
        "codebleu-199": 0.6188561459054068,
        "codebleu-70": 0.40799676081013947,
        "codebleu-168": 0.412367982068936,
        "codebleu-79": 0.6090646166453828,
        "codebleu-177": 0.4087704681596633,
        "codebleu-112": 0.04929290583398699,
        "chrf-36": 0.49688778534480954,
        "chrf-6": 0.2805287404875454,
        "chrf-111": 0.2781976556943133,
        "chrf-95": 0.4260089031936979,
        "chrf-80": 0.3475313350141388,
        "chrf-43": 0.3343694319206651,
        "chrf-31": 0.02214492756932185,
        "chrf-26": 0.2953613847773094,
        "chrf-169": 0.4651375201274414,
        "chrf-8": 0.012183399800364847,
        "chrf-7": 0.019762252786328458,
        "chrf-28": 0.4449719823306435,
        "chrf-77": 0.46318200889067657,
        "chrf-82": 0.4783805204255858,
        "chrf-199": 0.5745691323646758,
        "chrf-70": 0.3451862858898905,
        "chrf-168": 0.44269065599742285,
        "chrf-79": 0.48293976522955506,
        "chrf-177": 0.3401533466783158,
        "chrf-112": 0.05328047324416218,
        "rougel-36": 0.6641791044776119,
        "rougel-6": 0.4622222222222222,
        "rougel-111": 0.4405286343612335,
        "rougel-95": 0.6695652173913044,
        "rougel-80": 0.5537190082644627,
        "rougel-43": 0.5022421524663677,
        "rougel-31": 0.02857142857142857,
        "rougel-26": 0.4571428571428571,
        "rougel-169": 0.6913580246913581,
        "rougel-8": 0.0,
        "rougel-7": 0.04285714285714286,
        "rougel-28": 0.640926640926641,
        "rougel-77": 0.6913580246913581,
        "rougel-82": 0.6913580246913581,
        "rougel-199": 0.6926070038910506,
        "rougel-70": 0.4932735426008969,
        "rougel-168": 0.5381165919282512,
        "rougel-79": 0.6980392156862745,
        "rougel-177": 0.5022421524663677,
        "rougel-112": 0.1045751633986928,
        "meteor-36": 0.433615847164622,
        "meteor-6": 0.253419262455053,
        "meteor-111": 0.3256513124644992,
        "meteor-95": 0.37222869745527826,
        "meteor-80": 0.3761272734980524,
        "meteor-43": 0.296807578325993,
        "meteor-31": 0.008090614886731391,
        "meteor-26": 0.3609546291037083,
        "meteor-169": 0.3927965607585465,
        "meteor-8": 0.0,
        "meteor-7": 0.012135922330097087,
        "meteor-28": 0.3651987398780238,
        "meteor-77": 0.37772384527865177,
        "meteor-82": 0.37772384527865177,
        "meteor-199": 0.4492694913905536,
        "meteor-70": 0.296807578325993,
        "meteor-168": 0.3384654936763984,
        "meteor-79": 0.3978791430216301,
        "meteor-177": 0.296807578325993,
        "meteor-112": 0.03602882305844676,
        "ruby-36": 0.5401459854014599,
        "ruby-6": 0.3138686131386861,
        "ruby-111": 0.2846715328467153,
        "ruby-95": 0.5474452554744526,
        "ruby-80": 0.3941605839416058,
        "ruby-43": 0.34306569343065696,
        "ruby-31": 0.014598540145985384,
        "ruby-26": 0.3065693430656934,
        "ruby-169": 0.5620437956204379,
        "ruby-8": 0.0,
        "ruby-7": 0.021897810218978075,
        "ruby-28": 0.5328467153284672,
        "ruby-77": 0.5620437956204379,
        "ruby-82": 0.5620437956204379,
        "ruby-199": 0.5547445255474452,
        "ruby-70": 0.33576642335766427,
        "ruby-168": 0.36496350364963503,
        "ruby-79": 0.5255474452554745,
        "ruby-177": 0.34306569343065696,
        "ruby-112": 0.058394160583941646,
        "codebertscore_f1-36": 0.8609010577201843,
        "codebertscore_f3-36": 0.8429035544395447,
        "codebertscore_f1-6": 0.82745760679245,
        "codebertscore_f3-6": 0.8060820698738098,
        "codebertscore_f1-111": 0.7960222363471985,
        "codebertscore_f3-111": 0.7680527567863464,
        "codebertscore_f1-95": 0.8791859149932861,
        "codebertscore_f3-95": 0.8576498627662659,
        "codebertscore_f1-80": 0.815991222858429,
        "codebertscore_f3-80": 0.8026165962219238,
        "codebertscore_f1-43": 0.8420085906982422,
        "codebertscore_f3-43": 0.8224461078643799,
        "codebertscore_f1-31": 0.4896417558193207,
        "codebertscore_f3-31": 0.4548861086368561,
        "codebertscore_f1-26": 0.7949752807617188,
        "codebertscore_f3-26": 0.7725728750228882,
        "codebertscore_f1-169": 0.8743711709976196,
        "codebertscore_f3-169": 0.847463071346283,
        "codebertscore_f1-8": 0.4877485930919647,
        "codebertscore_f3-8": 0.46653643250465393,
        "codebertscore_f1-7": 0.5233780741691589,
        "codebertscore_f3-7": 0.47864416241645813,
        "codebertscore_f1-28": 0.8367285132408142,
        "codebertscore_f3-28": 0.8082315921783447,
        "codebertscore_f1-77": 0.873134434223175,
        "codebertscore_f3-77": 0.8463629484176636,
        "codebertscore_f1-82": 0.8744204640388489,
        "codebertscore_f3-82": 0.8472301959991455,
        "codebertscore_f1-199": 0.8668110966682434,
        "codebertscore_f3-199": 0.8492771983146667,
        "codebertscore_f1-70": 0.8433579206466675,
        "codebertscore_f3-70": 0.8226471543312073,
        "codebertscore_f1-168": 0.850255012512207,
        "codebertscore_f3-168": 0.8292055726051331,
        "codebertscore_f1-79": 0.8773755431175232,
        "codebertscore_f3-79": 0.8575366735458374,
        "codebertscore_f1-177": 0.840757429599762,
        "codebertscore_f3-177": 0.8216105103492737,
        "codebertscore_f1-112": 0.6190131306648254,
        "codebertscore_f3-112": 0.6062732934951782,
        "codebertscore_s_f1-36": 0.8777987957000732,
        "codebertscore_s_f3-36": 0.8575299978256226,
        "codebertscore_s_f1-6": 0.8396586775779724,
        "codebertscore_s_f3-6": 0.8162950277328491,
        "codebertscore_s_f1-111": 0.8186754584312439,
        "codebertscore_s_f3-111": 0.7881768345832825,
        "codebertscore_s_f1-95": 0.892143964767456,
        "codebertscore_s_f3-95": 0.8690469264984131,
        "codebertscore_s_f1-80": 0.8288326859474182,
        "codebertscore_s_f3-80": 0.8138054609298706,
        "codebertscore_s_f1-43": 0.8593860864639282,
        "codebertscore_s_f3-43": 0.8386949300765991,
        "codebertscore_s_f1-31": 0.5484660863876343,
        "codebertscore_s_f3-31": 0.5090999007225037,
        "codebertscore_s_f1-26": 0.8111652731895447,
        "codebertscore_s_f3-26": 0.788291335105896,
        "codebertscore_s_f1-169": 0.8890303373336792,
        "codebertscore_s_f3-169": 0.8586944937705994,
        "codebertscore_s_f1-8": 0.4993528425693512,
        "codebertscore_s_f3-8": 0.48583725094795227,
        "codebertscore_s_f1-7": 0.6036316752433777,
        "codebertscore_s_f3-7": 0.5503723621368408,
        "codebertscore_s_f1-28": 0.8524686694145203,
        "codebertscore_s_f3-28": 0.8230109810829163,
        "codebertscore_s_f1-77": 0.8899892568588257,
        "codebertscore_s_f3-77": 0.8594191670417786,
        "codebertscore_s_f1-82": 0.8904757499694824,
        "codebertscore_s_f3-82": 0.8596819639205933,
        "codebertscore_s_f1-199": 0.8793017268180847,
        "codebertscore_s_f3-199": 0.8609969019889832,
        "codebertscore_s_f1-70": 0.8594887852668762,
        "codebertscore_s_f3-70": 0.8367534875869751,
        "codebertscore_s_f1-168": 0.8693839907646179,
        "codebertscore_s_f3-168": 0.8467826247215271,
        "codebertscore_s_f1-79": 0.8849968910217285,
        "codebertscore_s_f3-79": 0.8635020852088928,
        "codebertscore_s_f1-177": 0.8589347004890442,
        "codebertscore_s_f3-177": 0.8390268683433533,
        "codebertscore_s_f1-112": 0.6300820708274841,
        "codebertscore_s_f3-112": 0.6160421371459961,
        "gpt35_nsnr-36": 4,
        "raw_gpt35_nsnr-36": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-111": 4,
        "raw_gpt35_nsnr-111": "4",
        "gpt35_nsnr-95": 4,
        "raw_gpt35_nsnr-95": "4",
        "gpt35_nsnr-80": 4,
        "raw_gpt35_nsnr-80": "4",
        "gpt35_nsnr-43": 4,
        "raw_gpt35_nsnr-43": "4",
        "gpt35_nsnr-31": 0,
        "raw_gpt35_nsnr-31": "0",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-169": 4,
        "raw_gpt35_nsnr-169": "4",
        "gpt35_nsnr-8": 0,
        "raw_gpt35_nsnr-8": "3 - The code correctly squares integers at indices that are multiples of 3 and cubes integers at indices that are multiples of 4 and not multiples of 3. It also correctly returns the sum of all entries in the list. However, it does not handle the case where the input list is empty, as it throws a NullPointerException.",
        "gpt35_nsnr-7": 0,
        "raw_gpt35_nsnr-7": "3 - The code snippet does not implement the required functionality yet, but it is a valid starting point. It returns 0, but the function signature and parameter are correct. The implementation of the function logic is missing, but it is possible to add the necessary code to fulfill the requirements of the problem.",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-77": 4,
        "raw_gpt35_nsnr-77": "4",
        "gpt35_nsnr-82": 4,
        "raw_gpt35_nsnr-82": "4",
        "gpt35_nsnr-199": 4,
        "raw_gpt35_nsnr-199": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-168": 4,
        "raw_gpt35_nsnr-168": "4",
        "gpt35_nsnr-79": 4,
        "raw_gpt35_nsnr-79": "4",
        "gpt35_nsnr-177": 4,
        "raw_gpt35_nsnr-177": "4",
        "gpt35_nsnr-112": 2,
        "raw_gpt35_nsnr-112": "2",
        "gpt35_nswr-36": 3,
        "raw_gpt35_nswr-36": "3",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-111": 4,
        "raw_gpt35_nswr-111": "4",
        "gpt35_nswr-95": 3,
        "raw_gpt35_nswr-95": "3",
        "gpt35_nswr-80": 3,
        "raw_gpt35_nswr-80": "3",
        "gpt35_nswr-43": 4,
        "raw_gpt35_nswr-43": "4",
        "gpt35_nswr-31": 0,
        "raw_gpt35_nswr-31": "0",
        "gpt35_nswr-26": 4,
        "raw_gpt35_nswr-26": "4",
        "gpt35_nswr-169": 4,
        "raw_gpt35_nswr-169": "4",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 0,
        "raw_gpt35_nswr-7": "0",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-77": 4,
        "raw_gpt35_nswr-77": "4",
        "gpt35_nswr-82": 4,
        "raw_gpt35_nswr-82": "4",
        "gpt35_nswr-199": 3,
        "raw_gpt35_nswr-199": "3",
        "gpt35_nswr-70": 4,
        "raw_gpt35_nswr-70": "4",
        "gpt35_nswr-168": 4,
        "raw_gpt35_nswr-168": "4",
        "gpt35_nswr-79": 3,
        "raw_gpt35_nswr-79": "3",
        "gpt35_nswr-177": 4,
        "raw_gpt35_nswr-177": "4",
        "gpt35_nswr-112": 0,
        "raw_gpt35_nswr-112": "0"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n    // 'tHKS KS C MGSSCGG'\n    public static String encode(String message) {\n",
        "snippet": [
            "        String vowels = \"aeiouAEIOU\";\n        StringBuilder sb = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            char ch = c;\n            if (Character.isUpperCase(ch)) {\n                ch = Character.toLowerCase(ch);\n                if (vowels.indexOf(ch) != -1) {\n                    ch = (char) ('a' + ((ch - 'a' + 28) % 26));\n                }\n            } else if (Character.isLowerCase(ch)) {\n                ch = Character.toUpperCase(ch);\n                if (vowels.indexOf(ch) != -1) {\n                    ch = (char) ('A' + ((ch - 'A' + 28) % 26));\n                }\n            }\n            sb.append(ch);\n        }\n        return sb.toString();\n    }\n}"
        ],
        "simplified": "Write a function that takes a message, and encodes in such a way that it swaps case of all letters, replaces all vowels in the message with the letter that appears 2 places ahead of that vowel in the english alphabet. Assume only letters.",
        "task_id": "93",
        "29": "String alpha = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        String vowels = \"AEIOU\";\n        String lowercase = \"abcdefghijklmnopqrstuvwxyz\";\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < message.length(); i++) {\n            int index = alpha.indexOf(message.charAt(i));\n            if (index == -1) {\n                index = lowercase.indexOf(message.charAt(i));\n                if (index == -1) {\n                    sb.append(message.charAt(i));\n                } else {\n                    if (vowels.indexOf(lowercase.charAt(index)) == -1) {\n                        sb.append(lowercase.charAt(index - 1));\n                    } else {\n                        sb.append(lowercase.charAt(index - 1));\n                    }\n                }\n            } else {\n                if (vowels.indexOf(alpha.charAt(index)) == -1) {\n                    sb.append(alpha.charAt(index + 1));\n                } else {\n                    sb.append(alpha.charAt(index + 1));\n                }\n            }\n        }\n        return sb.toString();",
        "grade-29": {
            "execution": 0
        },
        "6": "String[] vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        String newMessage = \"\";\n        String lowerCase = message.toLowerCase();\n        String upperCase = message.toUpperCase();\n        for (int i = 0; i < message.length(); i++) {\n            if (!(Character.isLetter(message.charAt(i)))) {\n                newMessage += message.charAt(i);\n            } else if (lowerCase.charAt(i) == message.charAt(i)) {\n                newMessage += upperCase.charAt(i);\n            } else {\n                newMessage += lowerCase.charAt(i);\n            }\n        }\n        for (int i = 0; i < newMessage.length(); i++) {\n            if (vowels.length == 5) {\n                if (newMessage.charAt(i) == 'a') {\n                    newMessage = newMessage.substring(0, i) + \"c\" + newMessage.substring(i + 1);\n                } else if (newMessage.charAt(i) == 'e') {\n                    newMessage = newMessage.substring(0, i) + \"g\" + newMessage.substring(i + 1);\n                } else if (newMessage.charAt(i) == 'i') {\n                    newMessage = newMessage.substring(0, i) + \"k\" + newMessage.substring(i + 1);\n                } else if (newMessage.charAt(i) == 'o') {\n                    newMessage = newMessage.substring(0, i) + \"m\" + newMessage.substring(i + 1);\n                } else if (newMessage.charAt(i) == 'u') {\n                    newMessage = newMessage.substring(0, i) + \"q\" + newMessage.substring(i + 1);\n                }\n            }\n        }\n        return newMessage;",
        "grade-6": {
            "execution": 0
        },
        "82": "StringBuilder encodedMessage = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            char upperC = Character.toUpperCase(c);\n            int index = ((upperC - 'A') + 2) % 26;\n            char encodedChar = (char) ('A' + index);\n            encodedMessage.append(encodedChar);\n        }\n        return encodedMessage.toString();",
        "grade-82": {
            "execution": 0
        },
        "73": "StringBuilder encoded = new StringBuilder();\n        List<Character> vowels = Arrays.asList('a', 'e', 'i', 'o', 'u');\n        for (char c : message.toCharArray()) {\n            int charValue = c;\n            if (vowels.contains(c)) {\n                encoded.append((char) (charValue + 2));\n            } else {\n                encoded.append((char) (charValue));\n            }\n        }\n        return encoded.toString();",
        "grade-73": {
            "execution": 0
        },
        "66": "StringBuilder sb = new StringBuilder();\n        String vowels = \"aeiou\";\n        //loop through each character\n        for (int i = 0; i < message.length(); i++) {\n            char curr = message.charAt(i);\n            //if the current char is a letter, swap case and add to the stringbuilder\n            if (Character.isLetter(curr)) {\n                char c = Character.isUpperCase(curr) ? Character.toLowerCase(curr) : Character.toUpperCase(curr);\n                //if the current char is a vowel, encode it and add to the stringbuilder\n                if (vowels.indexOf(c) != -1) {\n                    //get the index of the current char in the vowels string\n                    int index = vowels.indexOf(c);\n                    //get the next two indices, mod by the length of the string so that we can wrap around\n                    int nextIndex = (index + 2) % vowels.length();\n                    int nextNextIndex = (index + 4) % vowels.length();\n                    //get the character at the next two indices, swap case and add to the stringbuilder\n                    char nextChar = Character.isUpperCase(c) ? Character.toUpperCase(vowels.charAt(nextIndex)) : Character.toLowerCase(vowels.charAt(nextIndex));\n                    char nextNextChar = Character.isUpperCase(c) ? Character.toUpperCase(vowels.charAt(nextNextIndex)) : Character.toLowerCase(vowels.charAt(nextNextIndex));\n                    sb.append(nextChar);\n                    sb.append(nextNextChar);\n                } else {\n                    sb.append(c);\n                }\n            } else {\n                sb.append(curr);\n            }\n        }\n        return sb.toString();",
        "grade-66": {
            "execution": 0
        },
        "38": "int idx = 0;\n        String res = \"\";\n        Map<Character, Character> dict = new HashMap<>();\n        dict.put('A', 'C');\n        dict.put('E', 'G');\n        dict.put('I', 'K');\n        dict.put('O', 'Q');\n        dict.put('U', 'W');\n        dict.put('a', 'c');\n        dict.put('e', 'g');\n        dict.put('i', 'k');\n        dict.put('o', 'q');\n        dict.put('u', 'w');\n        for (char letter : message.toCharArray()) {\n            if (Character.isLetter(letter)) {\n                if (dict.containsKey(letter))\n                    res += dict.get(letter);\n                else {\n                    res += Character.isUpperCase(letter) ? Character.toLowerCase(letter) : Character.toUpperCase(letter);\n                }\n            } else {\n                res += letter;\n            }\n        }\n        return res;",
        "grade-38": {
            "execution": 0
        },
        "27": "char[] charArray = message.toCharArray();\n        for (int i = 0; i < charArray.length; i++) {\n            charArray[i] = swapCase(charArray[i]);\n            charArray[i] = replaceVowel(charArray[i]);\n        }\n        return new String(charArray);",
        "grade-27": {
            "execution": 0
        },
        "176": "// Implement your solution here\n        return \"\";",
        "grade-176": {
            "execution": 0
        },
        "22": "return \"TGST\";",
        "grade-22": {
            "execution": 0
        },
        "193": "throw new UnsupportedOperationException(\"please implement me!\");",
        "grade-193": {
            "execution": 0
        },
        "135": "char[] arr = message.toCharArray();\n        for (int i = 0; i < arr.length; i++) {\n            if (Character.isUpperCase(arr[i])) {\n                arr[i] = Character.toLowerCase(arr[i]);\n            } else {\n                arr[i] = Character.toUpperCase(arr[i]);\n            }\n            if (arr[i] == 'a') {\n                arr[i] = 'c';\n            } else if (arr[i] == 'e') {\n                arr[i] = 'g';\n            } else if (arr[i] == 'i') {\n                arr[i] = 'k';\n            } else if (arr[i] == 'o') {\n                arr[i] = 'q';\n            } else if (arr[i] == 'u') {\n                arr[i] = 'y';\n            }\n        }\n        return new String(arr);",
        "grade-135": {
            "execution": 0
        },
        "8": "return message.chars()\n            .mapToObj(c -> (char) c)\n            .map(c -> getEncodedCharacter(c))\n            .map(c -> c.toString())\n            .collect(Collectors.joining());",
        "grade-8": {
            "execution": 0
        },
        "7": "throw new UnsupportedOperationException(\"Not supported yet.\");",
        "grade-7": {
            "execution": 0
        },
        "23": "return new StringBuilder(message).reverse().toString();",
        "grade-23": {
            "execution": 0
        },
        "62": "// TODO: Implement this\n        return \"\";",
        "grade-62": {
            "execution": 0
        },
        "68": "StringBuilder ret = new StringBuilder();\n        String vowels = \"aeiou\";\n        int vowelslen = vowels.length();\n        for (int i = 0; i < message.length(); i++) {\n            char letter = message.charAt(i);\n            int letteridx = letter - 'a';\n            if (letteridx >= 0 && letteridx < 26) {\n                int newidx = letteridx + 2;\n                if (newidx > 25) {\n                    newidx -= 26;\n                }\n                ret.append((char)(newidx + 'a'));\n            } else {\n                ret.append(letter);\n            }\n        }\n        return ret.toString();",
        "grade-68": {
            "execution": 0
        },
        "162": "char[] letters = message.toCharArray();\n        for (int i = 0; i < letters.length; i++) {\n            if (Character.isUpperCase(letters[i])) {\n                letters[i] = Character.toLowerCase(letters[i]);\n            } else {\n                letters[i] = Character.toUpperCase(letters[i]);\n            }\n            switch (letters[i]) {\n                case 'a': letters[i] = 'c'; break;\n                case 'e': letters[i] = 'g'; break;\n                case 'i': letters[i] = 'k'; break;\n                case 'o': letters[i] = 'q'; break;\n                case 'u': letters[i] = 'y'; break;\n            }\n        }\n        return new String(letters);",
        "grade-162": {
            "execution": 0
        },
        "196": "String encode = \"\";\n\tfor (int i = 0; i < message.length(); i++) {\n\t    char c = message.charAt(i);\n\t    int k = (int) c;\n\t    if (c == ' ') {\n\t\tencode += \" \";\n\t    } else if (c > 'Z') {\n\t\tk = (int) c - 32;\n\t\tif (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\t\t    k += 2;\n\t\t    if (k > 90) {\n\t\t\tk -= 26;\n\t\t    }\n\t\t}\n\t\tencode += (char) k;\n\t    } else {\n\t\tif (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n\t\t    k += 2;\n\t\t    if (k > 90) {\n\t\t\tk -= 26;\n\t\t    }\n\t\t}\n\t\tencode += (char) k;\n\t    }\n\t}\n\treturn encode;",
        "grade-196": {
            "execution": 0
        },
        "180": "char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        char[] encoded = new char[message.length()];\n        char[] current = message.toCharArray();\n        for (int i = 0; i < message.length(); i++) {\n            boolean isVowel = false;\n            for (int j = 0; j < vowels.length; j++) {\n                if (current[i] == vowels[j]) {\n                    int index = vowels[j] + 2 - 'a';\n                    index = index % vowels.length;\n                    encoded[i] = vowels[index];\n                    isVowel = true;\n                    break;\n                }\n            }\n            if (!isVowel) {\n                encoded[i] = Character.isUpperCase(current[i]) ? Character.toLowerCase(current[i]) : Character.toUpperCase(current[i]);\n            }\n        }\n        return new String(encoded);",
        "grade-180": {
            "execution": 0
        },
        "57": "StringBuilder builder = new StringBuilder();\n        List<Character> vowels = Arrays.asList('a', 'e', 'i', 'o', 'u');\n        for (int i = 0; i < message.length(); i++) {\n            char cur = message.charAt(i);\n            if (Character.isLetter(cur)) {\n                if (Character.isUpperCase(cur)) {\n                    cur = Character.toLowerCase(cur);\n                } else {\n                    cur = Character.toUpperCase(cur);\n                }\n                if (vowels.contains(cur)) {\n                    int index = vowels.indexOf(cur);\n                    index = (index + 2) % vowels.size();\n                    cur = vowels.get(index);\n                }\n            }\n            builder.append(cur);\n        }\n        return builder.toString();",
        "grade-57": {
            "execution": 0
        },
        "bleu-29": 0.27837658630595574,
        "bleu-6": 0.09408264625325623,
        "bleu-82": 0.19095216933401368,
        "bleu-73": 0.23327760787039423,
        "bleu-66": 0.2035459762403859,
        "bleu-38": 0.20270994839722437,
        "bleu-27": 0.04868526965580477,
        "bleu-176": 2.26752448580559e-09,
        "bleu-22": 4.82488475756525e-17,
        "bleu-193": 4.2656013172594787e-07,
        "bleu-135": 0.20367011949730884,
        "bleu-8": 0.01505435564806352,
        "bleu-7": 4.2656013172594787e-07,
        "bleu-23": 2.3880768520418895e-05,
        "bleu-62": 2.3976152304386728e-09,
        "bleu-68": 0.19477908721339102,
        "bleu-162": 0.20874399082633896,
        "bleu-196": 0.1034597064278771,
        "bleu-180": 0.1948233622458986,
        "bleu-57": 0.33598807190272234,
        "codebleu-29": 0.623525581644164,
        "codebleu-6": 0.6181805759750308,
        "codebleu-82": 0.2827533015559591,
        "codebleu-73": 0.3615899900928683,
        "codebleu-66": 0.6321489722140671,
        "codebleu-38": 0.5269203024933553,
        "codebleu-27": 0.15523672746176895,
        "codebleu-176": 0.02059202286385691,
        "codebleu-22": 0.010296010296010296,
        "codebleu-193": 0.02574002574067812,
        "codebleu-135": 0.4412306847379711,
        "codebleu-8": 0.14642425039908974,
        "codebleu-7": 0.02574002574067812,
        "codebleu-23": 0.04633233823392332,
        "codebleu-62": 0.02316602581649887,
        "codebleu-68": 0.43213923688901457,
        "codebleu-162": 0.37026698857005524,
        "codebleu-196": 0.467085689247675,
        "codebleu-180": 0.4413341913341913,
        "codebleu-57": 0.5865607286068669,
        "chrf-29": 0.4227395205973081,
        "chrf-6": 0.29993842484647143,
        "chrf-82": 0.40662280057722117,
        "chrf-73": 0.3903401090787942,
        "chrf-66": 0.47681285712937826,
        "chrf-38": 0.3822791622835261,
        "chrf-27": 0.20625089202274124,
        "chrf-176": 0.029759959099039928,
        "chrf-22": 0.01405245635002494,
        "chrf-193": 0.041290116496480206,
        "chrf-135": 0.35360583289750946,
        "chrf-8": 0.13853078772673538,
        "chrf-7": 0.03871809166515998,
        "chrf-23": 0.11083392428159805,
        "chrf-62": 0.022964469472370682,
        "chrf-68": 0.3397209424128808,
        "chrf-162": 0.33650266932993395,
        "chrf-196": 0.20783264719008138,
        "chrf-180": 0.3899996258599476,
        "chrf-57": 0.524325954096331,
        "rougel-29": 0.4766355140186916,
        "rougel-6": 0.33441558441558444,
        "rougel-82": 0.49275362318840576,
        "rougel-73": 0.43478260869565216,
        "rougel-66": 0.3950617283950617,
        "rougel-38": 0.3225806451612903,
        "rougel-27": 0.2538461538461539,
        "rougel-176": 0.030612244897959183,
        "rougel-22": 0.031413612565445025,
        "rougel-193": 0.07,
        "rougel-135": 0.36272040302266995,
        "rougel-8": 0.23236514522821577,
        "rougel-7": 0.07,
        "rougel-23": 0.14778325123152708,
        "rougel-62": 0.040816326530612256,
        "rougel-68": 0.4112149532710281,
        "rougel-162": 0.31607629427792916,
        "rougel-196": 0.33980582524271846,
        "rougel-180": 0.34760705289672544,
        "rougel-57": 0.46486486486486484,
        "meteor-29": 0.47834003067577385,
        "meteor-6": 0.35993159377964673,
        "meteor-82": 0.34133282942806753,
        "meteor-73": 0.35454272104953766,
        "meteor-66": 0.45186774804001084,
        "meteor-38": 0.34959334171580525,
        "meteor-27": 0.15129697950881343,
        "meteor-176": 0.011876484560570073,
        "meteor-22": 0.011911852293031567,
        "meteor-193": 0.028411838669116937,
        "meteor-135": 0.3128696749707536,
        "meteor-8": 0.1368578478513078,
        "meteor-7": 0.028411838669116937,
        "meteor-23": 0.08619853267297457,
        "meteor-62": 0.014845605700712588,
        "meteor-68": 0.3683490825343887,
        "meteor-162": 0.26809382727049963,
        "meteor-196": 0.27558336759868424,
        "meteor-180": 0.3762998277892059,
        "meteor-57": 0.4847484116267586,
        "ruby-29": 0.31404958677685946,
        "ruby-6": 0.22325581395348837,
        "ruby-82": 0.34408602150537637,
        "ruby-73": 0.24731182795698925,
        "ruby-66": 0.2545931758530183,
        "ruby-38": 0.20564516129032262,
        "ruby-27": 0.15591397849462363,
        "ruby-176": 0.016129032258064502,
        "ruby-22": 0.016129032258064502,
        "ruby-193": 0.037634408602150504,
        "ruby-135": 0.19905213270142175,
        "ruby-8": 0.15053763440860213,
        "ruby-7": 0.037634408602150504,
        "ruby-23": 0.08064516129032262,
        "ruby-62": 0.021505376344086002,
        "ruby-68": 0.28494623655913975,
        "ruby-162": 0.15053763440860213,
        "ruby-196": 0.2079646017699115,
        "ruby-180": 0.17061611374407581,
        "ruby-57": 0.26344086021505375,
        "codebertscore_f1-29": 0.7788782119750977,
        "codebertscore_f3-29": 0.7897987961769104,
        "codebertscore_f1-6": 0.7533279657363892,
        "codebertscore_f3-6": 0.7663009762763977,
        "codebertscore_f1-82": 0.7808810472488403,
        "codebertscore_f3-82": 0.7441575527191162,
        "codebertscore_f1-73": 0.782011866569519,
        "codebertscore_f3-73": 0.7542811036109924,
        "codebertscore_f1-66": 0.7926109433174133,
        "codebertscore_f3-66": 0.8199664354324341,
        "codebertscore_f1-38": 0.7422274351119995,
        "codebertscore_f3-38": 0.7413234710693359,
        "codebertscore_f1-27": 0.6938816905021667,
        "codebertscore_f3-27": 0.6604282259941101,
        "codebertscore_f1-176": 0.5097136497497559,
        "codebertscore_f3-176": 0.46515828371047974,
        "codebertscore_f1-22": 0.5181152820587158,
        "codebertscore_f3-22": 0.46211305260658264,
        "codebertscore_f1-193": 0.5304813981056213,
        "codebertscore_f3-193": 0.4882567524909973,
        "codebertscore_f1-135": 0.770285427570343,
        "codebertscore_f3-135": 0.7498784065246582,
        "codebertscore_f1-8": 0.6454746723175049,
        "codebertscore_f3-8": 0.6100754141807556,
        "codebertscore_f1-7": 0.5230709910392761,
        "codebertscore_f3-7": 0.4817872643470764,
        "codebertscore_f1-23": 0.6325278282165527,
        "codebertscore_f3-23": 0.5565404891967773,
        "codebertscore_f1-62": 0.4965772032737732,
        "codebertscore_f3-62": 0.4511050879955292,
        "codebertscore_f1-68": 0.7670478224754333,
        "codebertscore_f3-68": 0.761785626411438,
        "codebertscore_f1-162": 0.7558091878890991,
        "codebertscore_f3-162": 0.7410587072372437,
        "codebertscore_f1-196": 0.7294823527336121,
        "codebertscore_f3-196": 0.7175610661506653,
        "codebertscore_f1-180": 0.7648376822471619,
        "codebertscore_f3-180": 0.7644437551498413,
        "codebertscore_f1-57": 0.8175227046012878,
        "codebertscore_f3-57": 0.8174079656600952,
        "codebertscore_s_f1-29": 0.7886031866073608,
        "codebertscore_s_f3-29": 0.798350989818573,
        "codebertscore_s_f1-6": 0.763590395450592,
        "codebertscore_s_f3-6": 0.7770345211029053,
        "codebertscore_s_f1-82": 0.8104793429374695,
        "codebertscore_s_f3-82": 0.7815724611282349,
        "codebertscore_s_f1-73": 0.7927333116531372,
        "codebertscore_s_f3-73": 0.7687910795211792,
        "codebertscore_s_f1-66": 0.8011764287948608,
        "codebertscore_s_f3-66": 0.8262779116630554,
        "codebertscore_s_f1-38": 0.7561419606208801,
        "codebertscore_s_f3-38": 0.7579860091209412,
        "codebertscore_s_f1-27": 0.7370915412902832,
        "codebertscore_s_f3-27": 0.7108782529830933,
        "codebertscore_s_f1-176": 0.5691642165184021,
        "codebertscore_s_f3-176": 0.5417298078536987,
        "codebertscore_s_f1-22": 0.6102240681648254,
        "codebertscore_s_f3-22": 0.566814124584198,
        "codebertscore_s_f1-193": 0.5688436031341553,
        "codebertscore_s_f3-193": 0.5415025353431702,
        "codebertscore_s_f1-135": 0.7762700915336609,
        "codebertscore_s_f3-135": 0.7580690383911133,
        "codebertscore_s_f1-8": 0.6875788569450378,
        "codebertscore_s_f3-8": 0.6651561260223389,
        "codebertscore_s_f1-7": 0.5694420337677002,
        "codebertscore_s_f3-7": 0.5404900312423706,
        "codebertscore_s_f1-23": 0.716486394405365,
        "codebertscore_s_f3-23": 0.6515132188796997,
        "codebertscore_s_f1-62": 0.5675894618034363,
        "codebertscore_s_f3-62": 0.5384034514427185,
        "codebertscore_s_f1-68": 0.7755753397941589,
        "codebertscore_s_f3-68": 0.7723290324211121,
        "codebertscore_s_f1-162": 0.7686287760734558,
        "codebertscore_s_f3-162": 0.7580605149269104,
        "codebertscore_s_f1-196": 0.7355465888977051,
        "codebertscore_s_f3-196": 0.7246657013893127,
        "codebertscore_s_f1-180": 0.7765085697174072,
        "codebertscore_s_f3-180": 0.7756593227386475,
        "codebertscore_s_f1-57": 0.8252620100975037,
        "codebertscore_s_f3-57": 0.8245722055435181,
        "gpt35_nsnr-29": 4,
        "raw_gpt35_nsnr-29": "4",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-82": 2,
        "raw_gpt35_nsnr-82": "2",
        "gpt35_nsnr-73": 3,
        "raw_gpt35_nsnr-73": "3",
        "gpt35_nsnr-66": 4,
        "raw_gpt35_nsnr-66": "4",
        "gpt35_nsnr-38": 3,
        "raw_gpt35_nsnr-38": "3",
        "gpt35_nsnr-27": 3,
        "raw_gpt35_nsnr-27": "3",
        "gpt35_nsnr-176": 3,
        "raw_gpt35_nsnr-176": "3",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-193": 0,
        "raw_gpt35_nsnr-193": "0",
        "gpt35_nsnr-135": 3,
        "raw_gpt35_nsnr-135": "3",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 2,
        "raw_gpt35_nsnr-23": "2",
        "gpt35_nsnr-62": 3,
        "raw_gpt35_nsnr-62": "3",
        "gpt35_nsnr-68": 3,
        "raw_gpt35_nsnr-68": "3",
        "gpt35_nsnr-162": 3,
        "raw_gpt35_nsnr-162": "3",
        "gpt35_nsnr-196": 4,
        "raw_gpt35_nsnr-196": "4",
        "gpt35_nsnr-180": 4,
        "raw_gpt35_nsnr-180": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nswr-29": 3,
        "raw_gpt35_nswr-29": "3",
        "gpt35_nswr-6": 2,
        "raw_gpt35_nswr-6": "2",
        "gpt35_nswr-82": 2,
        "raw_gpt35_nswr-82": "2",
        "gpt35_nswr-73": 2,
        "raw_gpt35_nswr-73": "2",
        "gpt35_nswr-66": 3,
        "raw_gpt35_nswr-66": "3",
        "gpt35_nswr-38": 2,
        "raw_gpt35_nswr-38": "2",
        "gpt35_nswr-27": 3,
        "raw_gpt35_nswr-27": "3",
        "gpt35_nswr-176": 2,
        "raw_gpt35_nswr-176": "2",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-193": 0,
        "raw_gpt35_nswr-193": "0",
        "gpt35_nswr-135": 2,
        "raw_gpt35_nswr-135": "2",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-23": 2,
        "raw_gpt35_nswr-23": "2",
        "gpt35_nswr-62": 3,
        "raw_gpt35_nswr-62": "3",
        "gpt35_nswr-68": 2,
        "raw_gpt35_nswr-68": "2",
        "gpt35_nswr-162": 2,
        "raw_gpt35_nswr-162": "2",
        "gpt35_nswr-196": 2,
        "raw_gpt35_nswr-196": "2",
        "gpt35_nswr-180": 3,
        "raw_gpt35_nswr-180": "3",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    public static int carRaceCollision(int n) {\n",
        "snippet": [
            "        return n * n;\n    }\n}"
        ],
        "simplified": "Imagine a road that's a perfectly straight infinitely long line. n cars are driving left to right; simultaneously, a different set of n cars are driving right to left. The two sets of cars start out being very far from each other. All cars move in the same speed. Two cars are said to collide when a car that's moving left to right hits a car that's moving right to left. However, the cars are infinitely sturdy and strong; as a result, they continue moving in their trajectory as if they did not collide. This function outputs the number of such collisions.",
        "task_id": "41",
        "198": "int collisionCount = 0;\n        // We need to be sure that if the cars are perfectly symmetric and the starting\n        // position of the cars are identical, then there will be 0 collisions\n        Random random = new Random();\n        int[] posLeft = new int[n];\n        int[] posRight = new int[n];\n        for (int i = 0; i < n; i++) {\n            posLeft[i] = random.nextInt(2*n) + 1;\n            posRight[i] = random.nextInt(2*n) + 1;\n        }\n        Arrays.sort(posLeft);\n        Arrays.sort(posRight);\n        int i = 0;\n        int j = 0;\n        while (i < n && j < n) {\n            if (posLeft[i] == posRight[j]) {\n                collisionCount++;\n                i++;\n                j++;\n            } else if (posLeft[i] < posRight[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return collisionCount;",
        "grade-198": {
            "execution": 0
        },
        "33": "// if n is odd, then the rightmost car collides with the leftmost car.\n        // if n is even, then there is no collision.\n        if (n % 2 == 1) {\n            return 1;\n        } else {\n            return 0;\n        }",
        "grade-33": {
            "execution": 0
        },
        "8": "int[][] cars = new int[n][2];\n        for (int i = 0; i < n; i++) {\n            cars[i][0] = i;\n            cars[i][1] = i + n;\n        }\n        return Helper.mergeSortAndCount(cars, 0, n - 1, 0);",
        "grade-8": {
            "execution": 0
        },
        "84": "// We could sort the cars by x, y and speed and then walk the line of cars\n      // until a collision appears.  This takes O(n log n) time.  However, it is\n      // sufficient to just look at the endpoints of the car distribution, so we\n      // can do better.  The endpoints are the two cars with greatest and smallest speed\n      // going in opposite directions.  These cars determine the smallest time to collision.\n      // Given this smallest time, we can then determine how many other cars collide\n      // with the cars of smallest and largest speed.  For example, say the two cars\n      // of smallest and largest speed collide in t time.  That is, the car of smallest\n      // speed travels x in t time, and the car of largest speed travels y in t time.\n      // Now, to count the number of collisions with these two cars, we need to determine\n      // which cars have speeds between x and y.  By sorting the cars by speed, it is\n      // easy to do this in linear time.\n      // All in all, this approach is O(n log n) time and O(n) space.\n      // In summary, the algorithm is as follows:\n      //\n      // 1. Sort the cars by speed.\n      // 2. Determine the time to collision between the two cars of smallest and largest speed.\n      // 3. Count the number of cars between these two speed ranges that collide.\n      // 4. Output the results.\n      //\n      // We outline this implementation below.\n      //\n      // STEP 1:\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //",
        "grade-84": {
            "execution": 0
        },
        "74": "int result = 0;\n        // The road is a straight line, and we don't need to store all of it.\n        // To store a car, we have to store its position and direction.\n        // We use a list for each direction.\n        // The time complexity of the following code is O(n^2) since\n        // we use 2 nested for loops.\n        ArrayList<Integer> leftToRight = new ArrayList<Integer>();\n        ArrayList<Integer> rightToLeft = new ArrayList<Integer>();\n        for (int i = 0; i < n; i++) {\n            leftToRight.add(0);\n            rightToLeft.add(0);\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                // ith car moving left to right, jth car moving right to left\n                if (leftToRight.get(i) + i == rightToLeft.get(j) + j) {\n                    result++;\n                }\n            }\n        }\n        return result;",
        "grade-74": {
            "execution": 0
        },
        "69": "int result = 0;\n        // Each car has a location and a direction.\n        // Left-to-right cars start out at (-100, -100, 1); right-to-left cars\n        // start out at (100, 100, -1).  Both are very far away from each other, and thus\n        // there are no collisions at the beginning.\n        // At time t, car at (x, y, d) is at position y + d * t.\n        // For any time t, if there's a collision at t, then there's a car from each\n        // group that are at the same location and moving towards each other at t.\n        // This means the left-to-right car is at (-100, -100, 1) + t * (1, 1, 1) and\n        // the right-to-left car is at (100, 100, -1) + t * (-1, -1, -1).\n        // These two points are at (0, 0, 0) + t * (0, 0, 0), which is always\n        // the origin.  So if the vector between the two cars is the origin,\n        // there's a collision.\n        // For example, if the origin is the vector between the two cars,\n        // then the two points lie on two different lines, and their dot product\n        // must be zero.  Because the left-to-right car has speed 1, the left-to-right\n        // car is at (x1, y1, d1) = (-100, -100, 1) + t * (1, 1, 1).\n        // Similarly, the right-to-left car is at (x2, y2, d2) = (100, 100, -1) + t * (-1, -1, -1).\n        // If their dot product is zero, then their difference is zero.\n        // This means (x1 - x2, y1 - y2, d1 - d2) = (200, 200, 2) + t * (2, 2, 2) = 0 + t * (0, 0, 0)\n        // must be zero.  This implies (200, 200, 2) = 0, which is true.\n        // Thus, there is a collision at",
        "grade-69": {
            "execution": 0
        },
        "41": "// Use input n to solve the problem and return the result.\n        // If n is 0, there are no cars.  If n is 1, there are no collisions.\n        // If n is 2, there's 1 collision.  If n is 3, there are 2 collisions.\n        // If n is 4, there are 6 collisions.  And so on.\n        // Now, for the base case.  If n is 1, just return 0.\n        if (n == 1) {\n            return 0;\n        }\n        else {\n            // Now, for the inductive case.  We can solve the problem by solving\n            // the same problem recursively.  Let's say n is 5.  Then, there are\n            // n-1 collisions between the n-1 cars going left to right and the n-1\n            // cars going right to left.  Also, the first car going left to right\n            // and the last car going right to left would collide.  In other words,\n            // there are n-1 + 1 = n collisions.  Let's implement this.\n            return carRaceCollision(n-1) + n;\n        }",
        "grade-41": {
            "execution": 0
        },
        "30": "// Invariant:\n        // no_of_collisions[i] represents the number of collisions before i + 1-th car\n        // moving left to right gets started.  This will be used to compute the\n        // number of collisions before the ith car moving left to right gets started.\n        // Note: no_of_collisions[0] = 0\n        int[] no_of_collisions = new int[n];\n        // Note: There are n cars moving left to right; let's call these cars\n        // car_1, car_2, ..., car_n.  We know that car_1 started first, followed by\n        // car_2 and so on.  So the ith car moving left to right started t_i seconds\n        // after car_1 started, where t_i = i - 1.\n        // Now, suppose car_i collides with car_j moving right to left.  This means\n        // that car_i overtook car_j.  However, car_i started only t_i seconds\n        // after car_1 started, and car_j started only t_j seconds after car_1 started.\n        // Therefore, car_i should have overtaken car_j t_i - t_j = i - j seconds\n        // after car_1 started.  Now, car_i and car_j are infinitely strong, so they\n        // continue moving and hence we say that a collision took place.\n        // (Note: if i < j, then i - j < 0 and so car_i should have overtaken car_j before\n        // car_1 got started.  However, this is impossible.)\n        // Therefore, the total number of collisions between the ith car moving left to right\n        // and the cars moving right to left is equal to the number of j such that 0 < j < i and\n        // i - j = 0.  This is equal to i - 1.\n        for (int i = 1; i < n; i++) {\n            no_of_collisions[i] = no_of_collisions[i - 1] + i - 1;\n        }\n        return no_of_collisions[n - 1];",
        "grade-30": {
            "execution": 0
        },
        "170": "int answer = 0;\n        return answer;",
        "grade-170": {
            "execution": 0
        },
        "26": "long total_collisions = 0;\n        int [] car_1 = new int[n];\n        int [] car_2 = new int[n];\n        for (int i = 0; i < n; i++) {\n            car_1[i] = i;\n            car_2[i] = n - i - 1;\n        }\n        // System.out.println(Arrays.toString(car_1));\n        // System.out.println(Arrays.toString(car_2));\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (car_1[i] == car_2[j]) {\n                    total_collisions++;\n                }\n            }\n        }\n        return (int) total_collisions;",
        "grade-26": {
            "execution": 0
        },
        "183": "return 1;",
        "grade-183": {
            "execution": 0
        },
        "128": "if (n == 0) return 0;\n        int[] left = new int[n];\n        int[] right = new int[n];\n        for (int i = 0; i < n; i++) {\n            left[i] = n - i;\n            right[i] = i + 1;\n        }\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (left[i] == right[j]) count++;\n            }\n        }\n        return count;",
        "grade-128": {
            "execution": 0
        },
        "10": "boolean[] movingL2R = new boolean[n];\n        for (int i = 0; i < n; i++) {\n            movingL2R[i] = true;\n        }\n        boolean[] movingR2L = new boolean[n];\n        for (int i = 0; i < n; i++) {\n            movingR2L[i] = false;\n        }\n        int colls = 0;\n        while (true) {\n            boolean hasL2R = false;\n            boolean hasR2L = false;\n            for (int i = 0; i < n; i++) {\n                if (movingL2R[i]) {\n                    hasL2R = true;\n                }\n                if (movingR2L[i]) {\n                    hasR2L = true;\n                }\n            }\n            if (!hasL2R && !hasR2L) {\n                break;\n            }\n            for (int i = 0; i < n; i++) {\n                if (movingL2R[i]) {\n                    for (int j = 0; j < n; j++) {\n                        if (movingR2L[j]) {\n                            colls++;\n                        }\n                    }\n                }\n            }\n            for (int i = 0; i < n; i++) {\n                if (movingL2R[i]) {\n                    movingL2R[i] = false;\n                }\n                if (movingR2L[i]) {\n                    movingR2L[i] = false;\n                }\n            }\n        }\n        return colls;",
        "grade-10": {
            "execution": 0
        },
        "9": "// Implement me\n        return 0;",
        "grade-9": {
            "execution": 0
        },
        "27": "// Assume that n is even.\n        if (n % 2 != 0)\n            throw new IllegalArgumentException(\"n is not even\");\n        return n * (n - 2);",
        "grade-27": {
            "execution": 0
        },
        "67": "// carPos[i] stores the position of the i'th car.\n        // carLeftToRight[i] is true if the i'th car is moving left to right,\n        // false otherwise.\n        // carPos[i] and carLeftToRight[i] together represent the state of the i'th car.\n        int[] carPos = new int[n];\n        boolean[] carLeftToRight = new boolean[n];\n        int i;\n        int numCollisions = 0;\n        // Returns a random integer in the range [lower, upper].\n        // This function is only used for testing purposes.\n        int rand(int lower, int upper) {\n            return (int)(Math.random() * (upper - lower + 1)) + lower;\n        }\n        // Randomly generates the initial states of the n cars.\n        // This function is only used for testing purposes.\n        void init(int n) {\n            for (i = 0; i < n; i++) {\n                carPos[i] = rand(-n, n);\n                carLeftToRight[i] = Math.random() < 0.5;\n            }\n        }\n        // Returns true if the two cars' states represent a collision,\n        // false otherwise.\n        boolean doCarsCollide(int i, int j) {\n            return carPos[i] == carPos[j] && carLeftToRight[i] != carLeftToRight[j];\n        }\n        // Prints the state of each car.\n        // This function is only used for testing purposes.\n        void printState(int n) {\n            for (i = 0; i < n; i++) {\n                if (carLeftToRight[i]) {\n                    System.out.print(\"(\" + carPos[i] + \") \");\n                } else {\n                    System.out.print(\"[\" + carPos[i] + \"] \");\n                }\n            }\n            System.out.println();\n        }\n        // Generates the initial state of the cars.\n        // Replace the code inside this function with the code for\n        // generating the initial state of the cars.\n        void generateInitialState(int n) {\n            for (i =",
        "grade-67": {
            "execution": 0
        },
        "71": "// Fill in.  Note that this function is pretty easy to solve with pen and paper.\n        int num_collisions = 0;\n        //Create a list of all cars from the left\n        List<Integer> left_cars = new ArrayList<Integer>();\n        for(int i = 0; i < n; i++){\n            left_cars.add(i);\n        }\n        //Create a list of all cars from the right\n        List<Integer> right_cars = new ArrayList<Integer>();\n        for(int i = 0; i < n; i++){\n            right_cars.add(i);\n        }\n        //While there are still cars moving in either direction, the two lists are not completely empty\n        while(!left_cars.isEmpty() && !right_cars.isEmpty()){\n            //Remove the first car from the left, which is the car closest to the origin\n            left_cars.remove(0);\n            //Remove the last car from the right, which is the car closest to the origin\n            right_cars.remove(right_cars.size() - 1);\n            //Increment the number of collisions\n            num_collisions++;\n        }\n        return num_collisions;",
        "grade-71": {
            "execution": 0
        },
        "157": "// TODO: Implement this\n        int result = 0;\n        for (int i = 1; i <= n; i++) {\n            for (int j = 1; j <= n; j++) {\n                if (i > j) {\n                    result++;\n                }\n            }\n        }\n        return result;",
        "grade-157": {
            "execution": 0
        },
        "186": "if (n <= 0) {\n            return 0;\n        }\n        int num = 0;\n        int[] l2r = new int[n];\n        int[] r2l = new int[n];\n        l2r[0] = 1;\n        r2l[0] = -1;\n        // Iterate through different cars.\n        for (int i = 1; i < n; i++) {\n            // Iterate through all cars that are moving left to right.\n            for (int j = 0; j < i; j++) {\n                // Iterate through all cars that are moving right to left.\n                for (int k = 0; k < i; k++) {\n                    if (l2r[j] == 1 && r2l[k] == -1) {\n                        num++;\n                    }\n                }\n            }\n            l2r[i] = 1;\n            r2l[i] = -1;\n        }\n        return num;",
        "grade-186": {
            "execution": 0
        },
        "174": "int collisions = 0;\n        // write your code here\n        return collisions;",
        "grade-174": {
            "execution": 0
        },
        "bleu-198": 0.008693756590039204,
        "bleu-33": 0.01919283019272332,
        "bleu-8": 0.020627953551973693,
        "bleu-84": 0.0009904585769257212,
        "bleu-74": 0.007514408603629519,
        "bleu-69": 0.0008660130226098122,
        "bleu-41": 0.006879575737436587,
        "bleu-30": 0.002830993308530189,
        "bleu-170": 0.06567274736060395,
        "bleu-26": 0.011284017939131783,
        "bleu-183": 0.09138402379955025,
        "bleu-128": 0.013912615688576992,
        "bleu-10": 0.006379615078266034,
        "bleu-9": 0.07809849842300637,
        "bleu-27": 0.03885662010372053,
        "bleu-67": 0.003900559380941766,
        "bleu-71": 0.004759977270997018,
        "bleu-157": 0.028633829242838468,
        "bleu-186": 0.009596033437995309,
        "bleu-174": 0.03377156414337854,
        "codebleu-198": 0.5303030303030302,
        "codebleu-33": 0.4545454545454544,
        "codebleu-8": 0.3787878787878788,
        "codebleu-84": 0.15151515151515152,
        "codebleu-74": 0.515151515151515,
        "codebleu-69": 0.2727272727272727,
        "codebleu-41": 0.515151515151515,
        "codebleu-30": 0.3787878787878788,
        "codebleu-170": 0.3333333333333333,
        "codebleu-26": 0.515151515151515,
        "codebleu-183": 0.164154535097668,
        "codebleu-128": 0.515151515151515,
        "codebleu-10": 0.5757575757575757,
        "codebleu-9": 0.3333333333333333,
        "codebleu-27": 0.4393939393939394,
        "codebleu-67": 0.5303030303030302,
        "codebleu-71": 0.515151515151515,
        "codebleu-157": 0.515151515151515,
        "codebleu-186": 0.515151515151515,
        "codebleu-174": 0.3333333333333333,
        "chrf-198": 0.049588442016531,
        "chrf-33": 0.1352364273504066,
        "chrf-8": 0.1466264811822359,
        "chrf-84": 0.007664271805902307,
        "chrf-74": 0.042555145111209856,
        "chrf-69": 0.009529818407949467,
        "chrf-41": 0.0372144022724716,
        "chrf-30": 0.021560921071027438,
        "chrf-170": 0.3094553255319958,
        "chrf-26": 0.07032935162461937,
        "chrf-183": 0.3931884313539169,
        "chrf-128": 0.10527798116195157,
        "chrf-10": 0.04533315360112329,
        "chrf-9": 0.31789918582949844,
        "chrf-27": 0.22696637236201134,
        "chrf-67": 0.021320038522356043,
        "chrf-71": 0.036811583508414056,
        "chrf-157": 0.16953993859764716,
        "chrf-186": 0.07796088551883688,
        "chrf-174": 0.21813856339795923,
        "rougel-198": 0.051948051948051945,
        "rougel-33": 0.1754385964912281,
        "rougel-8": 0.09876543209876544,
        "rougel-84": 0.009237875288683603,
        "rougel-74": 0.041841004184100423,
        "rougel-69": 0.004048582995951417,
        "rougel-41": 0.05084745762711864,
        "rougel-30": 0.02094240837696335,
        "rougel-170": 0.26666666666666666,
        "rougel-26": 0.0617283950617284,
        "rougel-183": 0.4,
        "rougel-128": 0.09022556390977444,
        "rougel-10": 0.03571428571428571,
        "rougel-9": 0.2857142857142857,
        "rougel-27": 0.2127659574468085,
        "rougel-67": 0.025531914893617023,
        "rougel-71": 0.04149377593360996,
        "rougel-157": 0.14492753623188404,
        "rougel-186": 0.06349206349206349,
        "rougel-174": 0.19047619047619047,
        "meteor-198": 0.16710516959397,
        "meteor-33": 0.26548672566371684,
        "meteor-8": 0.18248175182481755,
        "meteor-84": 0.030674846625766878,
        "meteor-74": 0.1445386064030132,
        "meteor-69": 0.018181818181818184,
        "meteor-41": 0.14602359208523594,
        "meteor-30": 0.05707762557077627,
        "meteor-170": 0.14084507042253522,
        "meteor-26": 0.19559123343527013,
        "meteor-183": 0.15151515151515152,
        "meteor-128": 0.22560258671369782,
        "meteor-10": 0.12690145502645506,
        "meteor-9": 0.14285714285714285,
        "meteor-27": 0.43300970873786415,
        "meteor-67": 0.06653992395437264,
        "meteor-71": 0.10101010101010102,
        "meteor-157": 0.3411111111111111,
        "meteor-186": 0.12244897959183675,
        "meteor-174": 0.12987012987012989,
        "ruby-198": 0.0267857142857143,
        "ruby-33": 0.09999999999999998,
        "ruby-8": 0.05405405405405406,
        "ruby-84": 0.0046948356807511304,
        "ruby-74": 0.02155172413793105,
        "ruby-69": 0.002053388090349051,
        "ruby-41": 0.026200873362445365,
        "ruby-30": 0.010666666666666713,
        "ruby-170": 0.125,
        "ruby-26": 0.032258064516129004,
        "ruby-183": 0.2857142857142857,
        "ruby-128": 0.04761904761904767,
        "ruby-10": 0.01831501831501836,
        "ruby-9": 0.0,
        "ruby-27": 0.09999999999999998,
        "ruby-67": 0.01295896328293733,
        "ruby-71": 0.021367521367521403,
        "ruby-157": 0.08064516129032262,
        "ruby-186": 0.03296703296703296,
        "ruby-174": 0.0714285714285714,
        "codebertscore_f1-198": 0.5986335277557373,
        "codebertscore_f3-198": 0.6769431829452515,
        "codebertscore_f1-33": 0.6662487387657166,
        "codebertscore_f3-33": 0.7090936899185181,
        "codebertscore_f1-8": 0.6742638945579529,
        "codebertscore_f3-8": 0.7195917367935181,
        "codebertscore_f1-84": 0.5524861216545105,
        "codebertscore_f3-84": 0.6463145017623901,
        "codebertscore_f1-74": 0.5722165107727051,
        "codebertscore_f3-74": 0.6412717700004578,
        "codebertscore_f1-69": 0.5666676163673401,
        "codebertscore_f3-69": 0.6645672917366028,
        "codebertscore_f1-41": 0.5803328156471252,
        "codebertscore_f3-41": 0.6711634397506714,
        "codebertscore_f1-30": 0.5446620583534241,
        "codebertscore_f3-30": 0.6286380887031555,
        "codebertscore_f1-170": 0.7423809170722961,
        "codebertscore_f3-170": 0.7379062175750732,
        "codebertscore_f1-26": 0.5921337008476257,
        "codebertscore_f3-26": 0.6606701016426086,
        "codebertscore_f1-183": 0.7496695518493652,
        "codebertscore_f3-183": 0.7233040928840637,
        "codebertscore_f1-128": 0.6399667263031006,
        "codebertscore_f3-128": 0.6951662302017212,
        "codebertscore_f1-10": 0.5726720094680786,
        "codebertscore_f3-10": 0.6579089164733887,
        "codebertscore_f1-9": 0.6684595942497253,
        "codebertscore_f3-9": 0.6764307022094727,
        "codebertscore_f1-27": 0.7403668761253357,
        "codebertscore_f3-27": 0.8142592310905457,
        "codebertscore_f1-67": 0.5643524527549744,
        "codebertscore_f3-67": 0.6526212096214294,
        "codebertscore_f1-71": 0.5614440441131592,
        "codebertscore_f3-71": 0.6415053009986877,
        "codebertscore_f1-157": 0.6594855189323425,
        "codebertscore_f3-157": 0.6923550963401794,
        "codebertscore_f1-186": 0.5900914669036865,
        "codebertscore_f3-186": 0.6741417050361633,
        "codebertscore_f1-174": 0.6526450514793396,
        "codebertscore_f3-174": 0.6725262999534607,
        "codebertscore_s_f1-198": 0.6882607340812683,
        "codebertscore_s_f3-198": 0.7729144096374512,
        "codebertscore_s_f1-33": 0.7030250430107117,
        "codebertscore_s_f3-33": 0.7573531270027161,
        "codebertscore_s_f1-8": 0.7118815779685974,
        "codebertscore_s_f3-8": 0.7743574380874634,
        "codebertscore_s_f1-84": 0.661091148853302,
        "codebertscore_s_f3-84": 0.739687979221344,
        "codebertscore_s_f1-74": 0.6643239259719849,
        "codebertscore_s_f3-74": 0.7253251075744629,
        "codebertscore_s_f1-69": 0.6764959096908569,
        "codebertscore_s_f3-69": 0.7487884163856506,
        "codebertscore_s_f1-41": 0.6891952157020569,
        "codebertscore_s_f3-41": 0.7646605372428894,
        "codebertscore_s_f1-30": 0.6717122793197632,
        "codebertscore_s_f3-30": 0.7376076579093933,
        "codebertscore_s_f1-170": 0.740624725818634,
        "codebertscore_s_f3-170": 0.7392513155937195,
        "codebertscore_s_f1-26": 0.6838061213493347,
        "codebertscore_s_f3-26": 0.7445171475410461,
        "codebertscore_s_f1-183": 0.7873945832252502,
        "codebertscore_s_f3-183": 0.7600656747817993,
        "codebertscore_s_f1-128": 0.7066720724105835,
        "codebertscore_s_f3-128": 0.7633856534957886,
        "codebertscore_s_f1-10": 0.6689640879631042,
        "codebertscore_s_f3-10": 0.7283692359924316,
        "codebertscore_s_f1-9": 0.6928471326828003,
        "codebertscore_s_f3-9": 0.7029420137405396,
        "codebertscore_s_f1-27": 0.775685727596283,
        "codebertscore_s_f3-27": 0.8588512539863586,
        "codebertscore_s_f1-67": 0.6975074410438538,
        "codebertscore_s_f3-67": 0.8125321865081787,
        "codebertscore_s_f1-71": 0.6609960794448853,
        "codebertscore_s_f3-71": 0.7272963523864746,
        "codebertscore_s_f1-157": 0.6844360828399658,
        "codebertscore_s_f3-157": 0.7267372012138367,
        "codebertscore_s_f1-186": 0.6895750761032104,
        "codebertscore_s_f3-186": 0.7620022296905518,
        "codebertscore_s_f1-174": 0.6830565929412842,
        "codebertscore_s_f3-174": 0.7137510776519775,
        "gpt35_nsnr-198": 4,
        "raw_gpt35_nsnr-198": "4",
        "gpt35_nsnr-33": 4,
        "raw_gpt35_nsnr-33": "4",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-84": 4,
        "raw_gpt35_nsnr-84": "4",
        "gpt35_nsnr-74": 3,
        "raw_gpt35_nsnr-74": "3",
        "gpt35_nsnr-69": 4,
        "raw_gpt35_nsnr-69": "4",
        "gpt35_nsnr-41": 4,
        "raw_gpt35_nsnr-41": "4",
        "gpt35_nsnr-30": 4,
        "raw_gpt35_nsnr-30": "4",
        "gpt35_nsnr-170": 2,
        "raw_gpt35_nsnr-170": "2",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-183": 0,
        "raw_gpt35_nsnr-183": "0",
        "gpt35_nsnr-128": 4,
        "raw_gpt35_nsnr-128": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-27": 4,
        "raw_gpt35_nsnr-27": "4",
        "gpt35_nsnr-67": 3,
        "raw_gpt35_nsnr-67": "3",
        "gpt35_nsnr-71": 4,
        "raw_gpt35_nsnr-71": "4",
        "gpt35_nsnr-157": 3,
        "raw_gpt35_nsnr-157": "3",
        "gpt35_nsnr-186": 3,
        "raw_gpt35_nsnr-186": "3",
        "gpt35_nsnr-174": 2,
        "raw_gpt35_nsnr-174": "2",
        "gpt35_nswr-198": 3,
        "raw_gpt35_nswr-198": "3",
        "gpt35_nswr-33": 4,
        "raw_gpt35_nswr-33": "4",
        "gpt35_nswr-8": 1,
        "raw_gpt35_nswr-8": "1",
        "gpt35_nswr-84": 0,
        "raw_gpt35_nswr-84": "0",
        "gpt35_nswr-74": 2,
        "raw_gpt35_nswr-74": "2",
        "gpt35_nswr-69": 4,
        "raw_gpt35_nswr-69": "4",
        "gpt35_nswr-41": 4,
        "raw_gpt35_nswr-41": "4",
        "gpt35_nswr-30": 4,
        "raw_gpt35_nswr-30": "4",
        "gpt35_nswr-170": 4,
        "raw_gpt35_nswr-170": "4",
        "gpt35_nswr-26": 1,
        "raw_gpt35_nswr-26": "1",
        "gpt35_nswr-183": 4,
        "raw_gpt35_nswr-183": "4",
        "gpt35_nswr-128": 4,
        "raw_gpt35_nswr-128": "4",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-9": 4,
        "raw_gpt35_nswr-9": "4",
        "gpt35_nswr-27": 4,
        "raw_gpt35_nswr-27": "4",
        "gpt35_nswr-67": 2,
        "raw_gpt35_nswr-67": "2",
        "gpt35_nswr-71": 2,
        "raw_gpt35_nswr-71": "2",
        "gpt35_nswr-157": 2,
        "raw_gpt35_nswr-157": "2",
        "gpt35_nswr-186": 2,
        "raw_gpt35_nswr-186": "2",
        "gpt35_nswr-174": 4,
        "raw_gpt35_nswr-174": "4"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n    // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    public static boolean isPalindrome(String text) {\n",
        "snippet": [
            "        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) != text.charAt(text.length() - 1 - i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"
        ],
        "simplified": "Checks if given string is a palindrome",
        "task_id": "48",
        "135": "if (text.length() == 0) return true;\n        return text.charAt(0) == text.charAt(text.length() - 1) && isPalindrome(text.substring(1, text.length() - 1));",
        "grade-135": {
            "execution": 0
        },
        "16": "StringBuilder stringBuilder = new StringBuilder(text);\n        String reversed = stringBuilder.reverse().toString();\n        return text.equals(reversed);",
        "grade-16": {
            "execution": 1
        },
        "3": "StringBuilder sb = new StringBuilder(text);\n        return text.equals(sb.reverse().toString());",
        "grade-3": {
            "execution": 1
        },
        "156": "// Write your code here\n        return false;",
        "grade-156": {
            "execution": 0
        },
        "49": "if (text.length() == 0) {\n            return true;\n        }\n        if (text.length() == 1) {\n            return true;\n        }\n        if (text.charAt(0) == text.charAt(text.length() - 1)) {\n            return isPalindrome(text.substring(1, text.length() - 1));\n        }\n        return false;",
        "grade-49": {
            "execution": 1
        },
        "41": "// return false if text is empty\n        if (text.isEmpty()) return false;\n        // base case: text of size 1 is a palindrome\n        if (text.length() == 1) return true;\n        // recursive case: text of size 2\n        if (text.length() == 2) return text.charAt(0) == text.charAt(1);\n        // recursive case: text of size greater than 2\n        if (text.charAt(0) == text.charAt(text.length() - 1))\n            return isPalindrome(text.substring(1, text.length() - 1));\n        return false;",
        "grade-41": {
            "execution": 0
        },
        "36": "throw new RuntimeException(\"Problem has not been solved yet\");",
        "grade-36": {
            "execution": 0
        },
        "21": "String str = text.toLowerCase();\n        StringBuilder builder = new StringBuilder(str);\n        String new_str = builder.reverse().toString();\n        return new_str.equals(str);",
        "grade-21": {
            "execution": 1
        },
        "15": "// YOUR CODE HERE\n        int len = text.length();\n        if (len == 0) return true;\n        for (int i = 0; i < len/2; i++) {\n            if (text.charAt(i) != text.charAt(len-1-i)) {\n                return false;\n            }\n        }\n        return true;",
        "grade-15": {
            "execution": 1
        },
        "142": "return text.length() <= 1 ||\n            text.charAt(0) == text.charAt(text.length() - 1) &&\n            isPalindrome(text.substring(1, text.length() - 1));",
        "grade-142": {
            "execution": 1
        },
        "110": "for (int i = 0; i < text.length() / 2; i++) {\n        if (text.charAt(i) != text.charAt(text.length() - i - 1)) {\n          return false;\n        }\n      }\n      return true;",
        "grade-110": {
            "execution": 1
        },
        "13": "return text.equals(reverse(text));",
        "grade-13": {
            "execution": 0
        },
        "128": "if (text.length() <= 1) {\n            return true;\n        }\n        else {\n            if (text.charAt(0) == text.charAt(text.length() - 1)) {\n                return isPalindrome(text.substring(1, text.length() - 1));\n            }\n            else {\n                return false;\n            }\n        }",
        "grade-128": {
            "execution": 1
        },
        "86": "int left = 0;\n        int right = text.length() - 1;\n        while (left < right) {\n            if (text.charAt(left) != text.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;",
        "grade-86": {
            "execution": 1
        },
        "4": "return new StringBuilder(text).reverse().toString().equals(text);",
        "grade-4": {
            "execution": 1
        },
        "35": "// FIXME\n        return false;",
        "grade-35": {
            "execution": 0
        },
        "37": "if (text.length() == 0) {\n            return true;\n        }\n        return text.charAt(0) == text.charAt(text.length() - 1) && isPalindrome(text.substring(1, text.length() - 1));",
        "grade-37": {
            "execution": 0
        },
        "101": "// Write your code here\n        return true;",
        "grade-101": {
            "execution": 0
        },
        "130": "return Stream.iterate(0, i -> i + 1)\n            .limit(text.length() / 2)\n            .allMatch(i -> text.charAt(i) == text.charAt(text.length() - i - 1));",
        "grade-130": {
            "execution": 1
        },
        "121": "throw new RuntimeException(\"Not implemented yet\");",
        "grade-121": {
            "execution": 0
        },
        "bleu-135": 0.4169689945726851,
        "bleu-16": 0.04064219599036972,
        "bleu-3": 0.024445743008676222,
        "bleu-156": 0.0007667304085361862,
        "bleu-49": 0.35877602868524394,
        "bleu-41": 0.17612759658806443,
        "bleu-36": 0.0033089814221061633,
        "bleu-21": 0.05545299326081753,
        "bleu-15": 0.6345576547792585,
        "bleu-142": 0.3754640465002064,
        "bleu-110": 0.8769444519294161,
        "bleu-13": 0.002152781515742991,
        "bleu-128": 0.4500928973387354,
        "bleu-86": 0.5195028944947242,
        "bleu-4": 0.016642659521446238,
        "bleu-35": 5.2037830079124526e-05,
        "bleu-37": 0.43945515099659715,
        "bleu-101": 0.0007667304085361862,
        "bleu-130": 0.41696899457268527,
        "bleu-121": 0.0016218406925078458,
        "codebleu-135": 0.5162657443196034,
        "codebleu-16": 0.30462821421146347,
        "codebleu-3": 0.2554949413938874,
        "codebleu-156": 0.04796017733759817,
        "codebleu-49": 0.5960855042262926,
        "codebleu-41": 0.5381398304953984,
        "codebleu-36": 0.04763209122807618,
        "codebleu-21": 0.40100880595754973,
        "codebleu-15": 0.6906024068988649,
        "codebleu-142": 0.4553711501882364,
        "codebleu-110": 0.7576235664804799,
        "codebleu-13": 0.09587162185826055,
        "codebleu-128": 0.6075410566489232,
        "codebleu-86": 0.6229285383187867,
        "codebleu-4": 0.1819514447680797,
        "codebleu-35": 0.02387763569312439,
        "codebleu-37": 0.5293379874212509,
        "codebleu-101": 0.04796017733759817,
        "codebleu-130": 0.5308050062896184,
        "codebleu-121": 0.04763209122807618,
        "chrf-135": 0.5786099049877093,
        "chrf-16": 0.1847938687063754,
        "chrf-3": 0.19002594175487386,
        "chrf-156": 0.13166816377867605,
        "chrf-49": 0.6219457409969992,
        "chrf-41": 0.44995428456073894,
        "chrf-36": 0.07424635436256795,
        "chrf-21": 0.176072547610017,
        "chrf-15": 0.7706193958215617,
        "chrf-142": 0.5144524101411467,
        "chrf-110": 0.9140518163738265,
        "chrf-13": 0.13754795591272115,
        "chrf-128": 0.6527038637404349,
        "chrf-86": 0.6127204005594583,
        "chrf-4": 0.17214717481665753,
        "chrf-35": 0.10608438572760029,
        "chrf-37": 0.6093334434801068,
        "chrf-101": 0.12102048980312934,
        "chrf-130": 0.5228068955132911,
        "chrf-121": 0.06878379170230975,
        "rougel-135": 0.5172413793103449,
        "rougel-16": 0.3010752688172043,
        "rougel-3": 0.32558139534883723,
        "rougel-156": 0.08955223880597016,
        "rougel-49": 0.5714285714285714,
        "rougel-41": 0.35820895522388063,
        "rougel-36": 0.0821917808219178,
        "rougel-21": 0.33333333333333337,
        "rougel-15": 0.696969696969697,
        "rougel-142": 0.5,
        "rougel-110": 0.9310344827586207,
        "rougel-13": 0.23188405797101447,
        "rougel-128": 0.6,
        "rougel-86": 0.6495726495726496,
        "rougel-4": 0.32499999999999996,
        "rougel-35": 0.09375,
        "rougel-37": 0.5254237288135593,
        "rougel-101": 0.08955223880597016,
        "rougel-130": 0.5689655172413793,
        "rougel-121": 0.08571428571428572,
        "meteor-135": 0.5582489224137932,
        "meteor-16": 0.19609403362890837,
        "meteor-3": 0.180245360176156,
        "meteor-156": 0.02824858757062147,
        "meteor-49": 0.6220711017208614,
        "meteor-41": 0.5259462455761332,
        "meteor-36": 0.027932960893854743,
        "meteor-21": 0.19434628975265014,
        "meteor-15": 0.8425966631703942,
        "meteor-142": 0.5413985553247151,
        "meteor-110": 0.9641097818437719,
        "meteor-13": 0.10955921525027218,
        "meteor-128": 0.6569966329966329,
        "meteor-86": 0.6479207836637556,
        "meteor-4": 0.13786764705882354,
        "meteor-35": 0.028409090909090908,
        "meteor-37": 0.5901535872080792,
        "meteor-101": 0.05545093115714585,
        "meteor-130": 0.646551724137931,
        "meteor-121": 0.028089887640449437,
        "ruby-135": 0.31034482758620685,
        "ruby-16": 0.2068965517241379,
        "ruby-3": 0.22413793103448276,
        "ruby-156": 0.051724137931034475,
        "ruby-49": 0.426829268292683,
        "ruby-41": 0.21678321678321677,
        "ruby-36": 0.051724137931034475,
        "ruby-21": 0.2068965517241379,
        "ruby-15": 0.5135135135135135,
        "ruby-142": 0.2931034482758621,
        "ruby-110": 0.896551724137931,
        "ruby-13": 0.13793103448275867,
        "ruby-128": 0.41666666666666663,
        "ruby-86": 0.4576271186440678,
        "ruby-4": 0.18965517241379315,
        "ruby-35": 0.051724137931034475,
        "ruby-37": 0.31666666666666665,
        "ruby-101": 0.051724137931034475,
        "ruby-130": 0.3448275862068966,
        "ruby-121": 0.051724137931034475,
        "codebertscore_f1-135": 0.8345117568969727,
        "codebertscore_f3-135": 0.832391619682312,
        "codebertscore_f1-16": 0.6854212880134583,
        "codebertscore_f3-16": 0.6867449879646301,
        "codebertscore_f1-3": 0.6899570822715759,
        "codebertscore_f3-3": 0.685139536857605,
        "codebertscore_f1-156": 0.6136346459388733,
        "codebertscore_f3-156": 0.6016491651535034,
        "codebertscore_f1-49": 0.8230694532394409,
        "codebertscore_f3-49": 0.8211761713027954,
        "codebertscore_f1-41": 0.7692773342132568,
        "codebertscore_f3-41": 0.7918859720230103,
        "codebertscore_f1-36": 0.6364173293113708,
        "codebertscore_f3-36": 0.6310160160064697,
        "codebertscore_f1-21": 0.6891208291053772,
        "codebertscore_f3-21": 0.6969365477561951,
        "codebertscore_f1-15": 0.8853253126144409,
        "codebertscore_f3-15": 0.9146655797958374,
        "codebertscore_f1-142": 0.8163169622421265,
        "codebertscore_f3-142": 0.8089246153831482,
        "codebertscore_f1-110": 0.9700694680213928,
        "codebertscore_f3-110": 0.9773054122924805,
        "codebertscore_f1-13": 0.672849714756012,
        "codebertscore_f3-13": 0.6506195068359375,
        "codebertscore_f1-128": 0.8294572234153748,
        "codebertscore_f3-128": 0.8360880017280579,
        "codebertscore_f1-86": 0.8505526781082153,
        "codebertscore_f3-86": 0.8631141185760498,
        "codebertscore_f1-4": 0.6646955013275146,
        "codebertscore_f3-4": 0.6620915532112122,
        "codebertscore_f1-35": 0.6130688786506653,
        "codebertscore_f3-35": 0.5914295315742493,
        "codebertscore_f1-37": 0.8288977742195129,
        "codebertscore_f3-37": 0.8297694325447083,
        "codebertscore_f1-101": 0.6096811294555664,
        "codebertscore_f3-101": 0.5932443141937256,
        "codebertscore_f1-130": 0.8178102374076843,
        "codebertscore_f3-130": 0.8280207514762878,
        "codebertscore_f1-121": 0.6150290369987488,
        "codebertscore_f3-121": 0.6096526980400085,
        "codebertscore_s_f1-135": 0.8448387384414673,
        "codebertscore_s_f3-135": 0.842559814453125,
        "codebertscore_s_f1-16": 0.7162865996360779,
        "codebertscore_s_f3-16": 0.7139361500740051,
        "codebertscore_s_f1-3": 0.7127376198768616,
        "codebertscore_s_f3-3": 0.7080188989639282,
        "codebertscore_s_f1-156": 0.633094847202301,
        "codebertscore_s_f3-156": 0.630041778087616,
        "codebertscore_s_f1-49": 0.8341683149337769,
        "codebertscore_s_f3-49": 0.8344818353652954,
        "codebertscore_s_f1-41": 0.7920939922332764,
        "codebertscore_s_f3-41": 0.8167718052864075,
        "codebertscore_s_f1-36": 0.6231686472892761,
        "codebertscore_s_f3-36": 0.6219158172607422,
        "codebertscore_s_f1-21": 0.7130157351493835,
        "codebertscore_s_f3-21": 0.7151678800582886,
        "codebertscore_s_f1-15": 0.88896644115448,
        "codebertscore_s_f3-15": 0.9180005192756653,
        "codebertscore_s_f1-142": 0.830159068107605,
        "codebertscore_s_f3-142": 0.8209545016288757,
        "codebertscore_s_f1-110": 0.9758458733558655,
        "codebertscore_s_f3-110": 0.9827585220336914,
        "codebertscore_s_f1-13": 0.6995678544044495,
        "codebertscore_s_f3-13": 0.6793453097343445,
        "codebertscore_s_f1-128": 0.8403298854827881,
        "codebertscore_s_f3-128": 0.8469010591506958,
        "codebertscore_s_f1-86": 0.8676183819770813,
        "codebertscore_s_f3-86": 0.8799782395362854,
        "codebertscore_s_f1-4": 0.6930572986602783,
        "codebertscore_s_f3-4": 0.6894881725311279,
        "codebertscore_s_f1-35": 0.6507989764213562,
        "codebertscore_s_f3-35": 0.6309236288070679,
        "codebertscore_s_f1-37": 0.8476919531822205,
        "codebertscore_s_f3-37": 0.8468411564826965,
        "codebertscore_s_f1-101": 0.6432369947433472,
        "codebertscore_s_f3-101": 0.6371113657951355,
        "codebertscore_s_f1-130": 0.8421919345855713,
        "codebertscore_s_f3-130": 0.8531368970870972,
        "codebertscore_s_f1-121": 0.6075530052185059,
        "codebertscore_s_f3-121": 0.6049637794494629,
        "gpt35_nsnr-135": 3,
        "raw_gpt35_nsnr-135": "3",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-156": 0,
        "raw_gpt35_nsnr-156": "0",
        "gpt35_nsnr-49": 3,
        "raw_gpt35_nsnr-49": "3",
        "gpt35_nsnr-41": 4,
        "raw_gpt35_nsnr-41": "4",
        "gpt35_nsnr-36": 0,
        "raw_gpt35_nsnr-36": "0",
        "gpt35_nsnr-21": 4,
        "raw_gpt35_nsnr-21": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-142": 4,
        "raw_gpt35_nsnr-142": "4",
        "gpt35_nsnr-110": 4,
        "raw_gpt35_nsnr-110": "4",
        "gpt35_nsnr-13": 0,
        "raw_gpt35_nsnr-13": "3 - The code snippet correctly checks if a given string is a palindrome by comparing it to its reverse. However, there are no checks for edge cases such as null input or empty strings.",
        "gpt35_nsnr-128": 4,
        "raw_gpt35_nsnr-128": "4",
        "gpt35_nsnr-86": 4,
        "raw_gpt35_nsnr-86": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-35": 0,
        "raw_gpt35_nsnr-35": "0",
        "gpt35_nsnr-37": 3,
        "raw_gpt35_nsnr-37": "3",
        "gpt35_nsnr-101": 1,
        "raw_gpt35_nsnr-101": "1",
        "gpt35_nsnr-130": 3,
        "raw_gpt35_nsnr-130": "3",
        "gpt35_nsnr-121": 0,
        "raw_gpt35_nsnr-121": "0",
        "gpt35_nswr-135": 3,
        "raw_gpt35_nswr-135": "3",
        "gpt35_nswr-16": 4,
        "raw_gpt35_nswr-16": "4",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-156": 0,
        "raw_gpt35_nswr-156": "0",
        "gpt35_nswr-49": 3,
        "raw_gpt35_nswr-49": "3",
        "gpt35_nswr-41": 4,
        "raw_gpt35_nswr-41": "4",
        "gpt35_nswr-36": 0,
        "raw_gpt35_nswr-36": "0",
        "gpt35_nswr-21": 4,
        "raw_gpt35_nswr-21": "4",
        "gpt35_nswr-15": 4,
        "raw_gpt35_nswr-15": "4",
        "gpt35_nswr-142": 3,
        "raw_gpt35_nswr-142": "3",
        "gpt35_nswr-110": 4,
        "raw_gpt35_nswr-110": "4",
        "gpt35_nswr-13": 3,
        "raw_gpt35_nswr-13": "3",
        "gpt35_nswr-128": 3,
        "raw_gpt35_nswr-128": "3",
        "gpt35_nswr-86": 4,
        "raw_gpt35_nswr-86": "4",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-35": 2,
        "raw_gpt35_nswr-35": "2",
        "gpt35_nswr-37": 3,
        "raw_gpt35_nswr-37": "3",
        "gpt35_nswr-101": 2,
        "raw_gpt35_nswr-101": "2",
        "gpt35_nswr-130": 3,
        "raw_gpt35_nswr-130": "3",
        "gpt35_nswr-121": 0,
        "raw_gpt35_nswr-121": "0"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    public static ArrayList<String> numericalLetterGrade(ArrayList<Float> grades) {\n",
        "snippet": [
            "        List<String> letter_grade = new ArrayList<>();\n        for (double gpa : grades) {\n            if (gpa == 4.0) {\n                letter_grade.add(\"A+\");\n            } else if (gpa > 3.7) {\n                letter_grade.add(\"A\");\n            } else if (gpa > 3.3) {\n                letter_grade.add(\"A-\");\n            } else if (gpa > 3.0) {\n                letter_grade.add(\"B+\");\n            } else if (gpa > 2.7) {\n                letter_grade.add(\"B\");\n            } else if (gpa > 2.3) {\n                letter_grade.add(\"B-\");\n            } else if (gpa > 2.0) {\n                letter_grade.add(\"C+\");\n            } else if (gpa > 1.7) {\n                letter_grade.add(\"C\");\n            } else if (gpa > 1.3) {\n                letter_grade.add(\"C-\");\n            } else if (gpa > 1.0) {\n                letter_grade.add(\"D+\");\n            } else if (gpa > 0.7) {\n                letter_grade.add(\"D\");\n            } else if (gpa > 0.0) {\n                letter_grade.add(\"D-\");\n            } else {\n                letter_grade.add(\"E\");\n            }\n        }\n        return letter_grade;\n    }\n}"
        ],
        "simplified": "It is the last week of the semester and the teacher has to give the grades to students. The teacher has been making her own algorithm for grading. The only problem is, she has lost the code she used for grading. She has given you a list of GPAs for some students and you have to write a function that can output a list of letter grades using the following table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E",
        "task_id": "81",
        "182": "ArrayList<String> letter_grades = new ArrayList<String>();\n        for (Float g : grades) {\n            if (g == 4.0) letter_grades.add(\"A+\");\n            else if (g > 3.7) letter_grades.add(\"A\");\n            else if (g > 3.3) letter_grades.add(\"A-\");\n            else if (g > 3.0) letter_grades.add(\"B+\");\n            else if (g > 2.7) letter_grades.add(\"B\");\n            else if (g > 2.3) letter_grades.add(\"B-\");\n            else if (g > 2.0) letter_grades.add(\"C+\");\n            else if (g > 1.7) letter_grades.add(\"C\");\n            else if (g > 1.3) letter_grades.add(\"C-\");\n            else if (g > 1.0) letter_grades.add(\"D+\");\n            else if (g > 0.7) letter_grades.add(\"D\");\n            else if (g > 0.0) letter_grades.add(\"D-\");\n            else letter_grades.add(\"E\");\n        }\n        return letter_grades;",
        "grade-182": {
            "execution": 0
        },
        "28": "String[] gradesArray = {\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"};\n        int[] correspondingGPAs = {400, 370, 330, 300, 270, 230, 200, 170, 130, 100, 70, 0};\n        int[] gradesPoints = new int[grades.size()];\n        for (int i = 0; i < grades.size(); i++) {\n            float grade = grades.get(i);\n            if (grade < 1) {\n                gradesPoints[i] = 0;\n            } else {\n                gradesPoints[i] = (int) (100 * (grade - 1) + 1);\n            }\n        }\n        ArrayList<String> letterGrades = new ArrayList<String>();\n        for (int i = 0; i < gradesPoints.length; i++) {\n            int grade = gradesPoints[i];\n            if (grade == 400) {\n                letterGrades.add(gradesArray[0]);\n            } else {\n                for (int j = 1; j < correspondingGPAs.length; j++) {\n                    if (grade > correspondingGPAs[j]) {\n                        letterGrades.add(gradesArray[j]);\n                        break;\n                    }\n                }\n            }\n        }\n        return letterGrades;",
        "grade-28": {
            "execution": 0
        },
        "6": "ArrayList<String> letters = new ArrayList<String>();\n        for (Float grade : grades) {\n            if (grade == 4.0) {\n                letters.add(\"A+\");\n            } else if (grade > 3.7) {\n                letters.add(\"A\");\n            } else if (grade > 3.3) {\n                letters.add(\"A-\");\n            } else if (grade > 3.0) {\n                letters.add(\"B+\");\n            } else if (grade > 2.7) {\n                letters.add(\"B\");\n            } else if (grade > 2.3) {\n                letters.add(\"B-\");\n            } else if (grade > 2.0) {\n                letters.add(\"C+\");\n            } else if (grade > 1.7) {\n                letters.add(\"C\");\n            } else if (grade > 1.3) {\n                letters.add(\"C-\");\n            } else if (grade > 1.0) {\n                letters.add(\"D+\");\n            } else if (grade > 0.7) {\n                letters.add(\"D\");\n            } else if (grade > 0.0) {\n                letters.add(\"D-\");\n            } else {\n                letters.add(\"E\");\n            }\n        }\n        return letters;",
        "grade-6": {
            "execution": 0
        },
        "72": "ArrayList<String> gradeString = new ArrayList<String>();\n        for (Float grade : grades) {\n            if (grade > 4.0) {\n                gradeString.add(\"A+\");\n            } else if (grade > 3.7) {\n                gradeString.add(\"A\");\n            } else if (grade > 3.3) {\n                gradeString.add(\"A-\");\n            } else if (grade > 3.0) {\n                gradeString.add(\"B+\");\n            } else if (grade > 2.7) {\n                gradeString.add(\"B\");\n            } else if (grade > 2.3) {\n                gradeString.add(\"B-\");\n            } else if (grade > 2.0) {\n                gradeString.add(\"C+\");\n            } else if (grade > 1.7) {\n                gradeString.add(\"C\");\n            } else if (grade > 1.3) {\n                gradeString.add(\"C-\");\n            } else if (grade > 1.0) {\n                gradeString.add(\"D+\");\n            } else if (grade > 0.7) {\n                gradeString.add(\"D\");\n            } else if (grade > 0.0) {\n                gradeString.add(\"D-\");\n            } else {\n                gradeString.add(\"E\");\n            }\n        }\n        return gradeString;",
        "grade-72": {
            "execution": 0
        },
        "64": "ArrayList<String> letters = new ArrayList<String>();\n        for (float g: grades) {\n            if (g >= 4.0) {\n                letters.add(\"A+\");\n            } else if (g >= 3.7) {\n                letters.add(\"A\");\n            } else if (g >= 3.3) {\n                letters.add(\"A-\");\n            } else if (g >= 3.0) {\n                letters.add(\"B+\");\n            } else if (g >= 2.7) {\n                letters.add(\"B\");\n            } else if (g >= 2.3) {\n                letters.add(\"B-\");\n            } else if (g >= 2.0) {\n                letters.add(\"C+\");\n            } else if (g >= 1.7) {\n                letters.add(\"C\");\n            } else if (g >= 1.3) {\n                letters.add(\"C-\");\n            } else if (g >= 1.0) {\n                letters.add(\"D+\");\n            } else if (g >= 0.7) {\n                letters.add(\"D\");\n            } else if (g >= 0.0) {\n                letters.add(\"D-\");\n            } else {\n                letters.add(\"E\");\n            }\n        }\n        return letters;",
        "grade-64": {
            "execution": 0
        },
        "59": "ArrayList<String> grades_list = new ArrayList<String>();\n        for (float grade : grades) {\n            if (grade == 4.0) {\n                grades_list.add(\"A+\");\n            } else if (grade > 3.7) {\n                grades_list.add(\"A\");\n            } else if (grade > 3.3) {\n                grades_list.add(\"A-\");\n            } else if (grade > 3.0) {\n                grades_list.add(\"B+\");\n            } else if (grade > 2.7) {\n                grades_list.add(\"B\");\n            } else if (grade > 2.3) {\n                grades_list.add(\"B-\");\n            } else if (grade > 2.0) {\n                grades_list.add(\"C+\");\n            } else if (grade > 1.7) {\n                grades_list.add(\"C\");\n            } else if (grade > 1.3) {\n                grades_list.add(\"C-\");\n            } else if (grade > 1.0) {\n                grades_list.add(\"D+\");\n            } else if (grade > 0.7) {\n                grades_list.add(\"D\");\n            } else if (grade > 0.0) {\n                grades_list.add(\"D-\");\n            } else {\n                grades_list.add(\"E\");\n            }\n        }\n        return grades_list;",
        "grade-59": {
            "execution": 0
        },
        "35": "ArrayList<String> letterGrades = new ArrayList<String>();\n        // write your code here\n        grades.forEach(i -> {\n            if (i == 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (i >= 3.7) {\n                letterGrades.add(\"A\");\n            } else if (i >= 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (i >= 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (i >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (i >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (i >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (i >= 1.7) {\n                letterGrades.add(\"C\");\n            } else if (i >= 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (i >= 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (i >= 0.7) {\n                letterGrades.add(\"D\");\n            } else if (i >= 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        });\n        return letterGrades;",
        "grade-35": {
            "execution": 0
        },
        "26": "// Write your code here...\n        return null;",
        "grade-26": {
            "execution": 0
        },
        "195": "ArrayList<String> letterGrades = new ArrayList<String>();\n        for (Float f : grades) {\n            if (f >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (f >= 3.7) {\n                letterGrades.add(\"A\");\n            } else if (f >= 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (f >= 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (f >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (f >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (f >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (f >= 1.7) {\n                letterGrades.add(\"C\");\n            } else if (f >= 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (f >= 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (f >= 0.7) {\n                letterGrades.add(\"D\");\n            } else if (f >= 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;",
        "grade-195": {
            "execution": 0
        },
        "151": "ArrayList<String> letterGrades = new ArrayList<String>();\n        for (float f : grades) {\n            String letterGrade = \"\";\n            if (f >= 4.0) {\n                letterGrade = \"A+\";\n            } else if (f >= 3.7) {\n                letterGrade = \"A\";\n            } else if (f >= 3.3) {\n                letterGrade = \"A-\";\n            } else if (f >= 3.0) {\n                letterGrade = \"B+\";\n            } else if (f >= 2.7) {\n                letterGrade = \"B\";\n            } else if (f >= 2.3) {\n                letterGrade = \"B-\";\n            } else if (f >= 2.0) {\n                letterGrade = \"C+\";\n            } else if (f >= 1.7) {\n                letterGrade = \"C\";\n            } else if (f >= 1.3) {\n                letterGrade = \"C-\";\n            } else if (f >= 1.0) {\n                letterGrade = \"D+\";\n            } else if (f >= 0.7) {\n                letterGrade = \"D\";\n            } else if (f >= 0.0) {\n                letterGrade = \"D-\";\n            } else {\n                letterGrade = \"E\";\n            }\n            letterGrades.add(letterGrade);\n        }\n        return letterGrades;",
        "grade-151": {
            "execution": 0
        },
        "22": "ArrayList<String> al=new ArrayList<String>();\n        for(int i=0;i<grades.size();i++){\n            if(grades.get(i)>=4.0){\n                al.add(\"A+\");\n            }\n            else if(grades.get(i)>=3.7){\n                al.add(\"A\");\n            }\n            else if(grades.get(i)>=3.3){\n                al.add(\"A-\");\n            }\n            else if(grades.get(i)>=3.0){\n                al.add(\"B+\");\n            }\n            else if(grades.get(i)>=2.7){\n                al.add(\"B\");\n            }\n            else if(grades.get(i)>=2.3){\n                al.add(\"B-\");\n            }\n            else if(grades.get(i)>=2.0){\n                al.add(\"C+\");\n            }\n            else if(grades.get(i)>=1.7){\n                al.add(\"C\");\n            }\n            else if(grades.get(i)>=1.3){\n                al.add(\"C-\");\n            }\n            else if(grades.get(i)>=1.0){\n                al.add(\"D+\");\n            }\n            else if(grades.get(i)>=0.7){\n                al.add(\"D\");\n            }\n            else if(grades.get(i)>=0.0){\n                al.add(\"D-\");\n            }\n            else if(grades.get(i)==0.0){\n                al.add(\"E\");\n            }\n        }\n        return al;",
        "grade-22": {
            "execution": 0
        },
        "168": "ArrayList<String> letterGrades = new ArrayList<String>();\n        // Code here!\n        return letterGrades;",
        "grade-168": {
            "execution": 0
        },
        "115": "ArrayList<String> letters = new ArrayList<String>();\n        for (float grade : grades) {\n            letters.add(gradeToLetter(grade));\n        }\n        return letters;",
        "grade-115": {
            "execution": 0
        },
        "8": "// TODO: implement the function\n        return null;",
        "grade-8": {
            "execution": 0
        },
        "7": "ArrayList<String> gradelist = new ArrayList<String>();\n        for (Float grade : grades) {\n            if (grade >= 4.0) {\n                gradelist.add(\"A+\");\n            } else if (grade >= 3.7) {\n                gradelist.add(\"A\");\n            } else if (grade >= 3.3) {\n                gradelist.add(\"A-\");\n            } else if (grade >= 3.0) {\n                gradelist.add(\"B+\");\n            } else if (grade >= 2.7) {\n                gradelist.add(\"B\");\n            } else if (grade >= 2.3) {\n                gradelist.add(\"B-\");\n            } else if (grade >= 2.0) {\n                gradelist.add(\"C+\");\n            } else if (grade >= 1.7) {\n                gradelist.add(\"C\");\n            } else if (grade >= 1.3) {\n                gradelist.add(\"C-\");\n            } else if (grade >= 1.0) {\n                gradelist.add(\"D+\");\n            } else if (grade >= 0.7) {\n                gradelist.add(\"D\");\n            } else if (grade >= 0.0) {\n                gradelist.add(\"D-\");\n            } else {\n                gradelist.add(\"E\");\n            }\n        }\n        return gradelist;",
        "grade-7": {
            "execution": 0
        },
        "23": "ArrayList<String> result = new ArrayList<String>();\n        for (Float grade : grades) {\n            if (grade >= 4.0) {\n                result.add(\"A+\");\n            } else if (grade >= 3.7) {\n                result.add(\"A\");\n            } else if (grade >= 3.3) {\n                result.add(\"A-\");\n            } else if (grade >= 3.0) {\n                result.add(\"B+\");\n            } else if (grade >= 2.7) {\n                result.add(\"B\");\n            } else if (grade >= 2.3) {\n                result.add(\"B-\");\n            } else if (grade >= 2.0) {\n                result.add(\"C+\");\n            } else if (grade >= 1.7) {\n                result.add(\"C\");\n            } else if (grade >= 1.3) {\n                result.add(\"C-\");\n            } else if (grade >= 1.0) {\n                result.add(\"D+\");\n            } else if (grade >= 0.7) {\n                result.add(\"D\");\n            } else if (grade >= 0.0) {\n                result.add(\"D-\");\n            } else {\n                result.add(\"E\");\n            }\n        }\n        return result;",
        "grade-23": {
            "execution": 0
        },
        "57": "float[] thresholds = {4.0f, 3.7f, 3.3f, 3.0f, 2.7f, 2.3f, 2.0f, 1.7f, 1.3f, 1.0f, 0.7f, 0.0f};\n        String[] gradesStr = {\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"};\n        ArrayList<String> result = new ArrayList<String>();\n        for (int i = 0; i < grades.size(); i++) {\n            float grade = grades.get(i);\n            for (int j = 0; j < thresholds.length; j++) {\n                if (grade >= thresholds[j]) {\n                    result.add(gradesStr[j]);\n                    break;\n                }\n            }\n        }\n        return result;",
        "grade-57": {
            "execution": 0
        },
        "61": "if (grades == null) {\n            return null;\n        }\n        ArrayList<String> output = new ArrayList<String>();\n        for (Float grade : grades) {\n            if (grade > 4.0) {\n                output.add(\"A+\");\n            } else if (grade > 3.7) {\n                output.add(\"A\");\n            } else if (grade > 3.3) {\n                output.add(\"A-\");\n            } else if (grade > 3.0) {\n                output.add(\"B+\");\n            } else if (grade > 2.7) {\n                output.add(\"B\");\n            } else if (grade > 2.3) {\n                output.add(\"B-\");\n            } else if (grade > 2.0) {\n                output.add(\"C+\");\n            } else if (grade > 1.7) {\n                output.add(\"C\");\n            } else if (grade > 1.3) {\n                output.add(\"C-\");\n            } else if (grade > 1.0) {\n                output.add(\"D+\");\n            } else if (grade > 0.7) {\n                output.add(\"D\");\n            } else if (grade > 0.0) {\n                output.add(\"D-\");\n            } else {\n                output.add(\"E\");\n            }\n        }\n        return output;",
        "grade-61": {
            "execution": 0
        },
        "141": "ArrayList<String> results = new ArrayList<String>();\n        for (Float grade : grades) {\n            results.add(getLetterGrade(grade));\n        }\n        return results;",
        "grade-141": {
            "execution": 0
        },
        "171": "ArrayList<String> lst = new ArrayList<String>();\n        for (Float g : grades) {\n            if (g == 4.0) {\n                lst.add(\"A+\");\n            } else if (g > 3.7) {\n                lst.add(\"A\");\n            } else if (g > 3.3) {\n                lst.add(\"A-\");\n            } else if (g > 3.0) {\n                lst.add(\"B+\");\n            } else if (g > 2.7) {\n                lst.add(\"B\");\n            } else if (g > 2.3) {\n                lst.add(\"B-\");\n            } else if (g > 2.0) {\n                lst.add(\"C+\");\n            } else if (g > 1.7) {\n                lst.add(\"C\");\n            } else if (g > 1.3) {\n                lst.add(\"C-\");\n            } else if (g > 1.0) {\n                lst.add(\"D+\");\n            } else if (g > 0.7) {\n                lst.add(\"D\");\n            } else if (g > 0.0) {\n                lst.add(\"D-\");\n            } else {\n                lst.add(\"E\");\n            }\n        }\n        return lst;",
        "grade-171": {
            "execution": 0
        },
        "bleu-182": 0.5649866165978706,
        "bleu-28": 0.1773570087470747,
        "bleu-6": 0.7336795252974465,
        "bleu-72": 0.6927592603621335,
        "bleu-64": 0.6736931658742613,
        "bleu-59": 0.7336795252974465,
        "bleu-35": 0.6099819788650069,
        "bleu-26": 5.1966122607949684e-12,
        "bleu-195": 0.6413554695511031,
        "bleu-151": 0.41688257512146676,
        "bleu-22": 0.5162788358985771,
        "bleu-168": 1.3827610163172691e-05,
        "bleu-115": 0.0007993078513171402,
        "bleu-8": 4.663812575931749e-14,
        "bleu-7": 0.6736931658742613,
        "bleu-23": 0.6736931658742613,
        "bleu-57": 0.15751466984673004,
        "bleu-61": 0.7033485933262298,
        "bleu-141": 0.0007993078513171402,
        "bleu-171": 0.7336795252974465,
        "codebleu-182": 0.6056189445241337,
        "codebleu-28": 0.4107866544271034,
        "codebleu-6": 0.7844897463972869,
        "codebleu-72": 0.7737658858074745,
        "codebleu-64": 0.679675832122544,
        "codebleu-59": 0.7844897463972869,
        "codebleu-35": 0.6847378802332194,
        "codebleu-26": 0.012511170689772885,
        "codebleu-195": 0.679675832122544,
        "codebleu-151": 0.47681255523016713,
        "codebleu-22": 0.676418173046617,
        "codebleu-168": 0.03574758542364729,
        "codebleu-115": 0.0716484112913041,
        "codebleu-8": 0.014298480788351359,
        "codebleu-7": 0.679675832122544,
        "codebleu-23": 0.679675832122544,
        "codebleu-57": 0.2924153255413218,
        "codebleu-61": 0.7821941069513754,
        "codebleu-141": 0.0716484112913041,
        "codebleu-171": 0.7844897463972869,
        "chrf-182": 0.6725821972513613,
        "chrf-28": 0.286740653566993,
        "chrf-6": 0.7307437844667397,
        "chrf-72": 0.5853428850915106,
        "chrf-64": 0.6691979476755742,
        "chrf-59": 0.5984245184841899,
        "chrf-35": 0.6545798099383388,
        "chrf-26": 0.016830301408601395,
        "chrf-195": 0.6727511335429316,
        "chrf-151": 0.49831253839258755,
        "chrf-22": 0.559905533808281,
        "chrf-168": 0.09430867989938235,
        "chrf-115": 0.14542385857899423,
        "chrf-8": 0.015045680939365482,
        "chrf-7": 0.5795026823403167,
        "chrf-23": 0.5746973675472887,
        "chrf-57": 0.19896883722358738,
        "chrf-61": 0.588324177613711,
        "chrf-141": 0.11548869874751092,
        "chrf-171": 0.5741041961829834,
        "rougel-182": 0.84,
        "rougel-28": 0.28235294117647064,
        "rougel-6": 0.8923611111111112,
        "rougel-72": 0.864406779661017,
        "rougel-64": 0.8722316865417377,
        "rougel-59": 0.8923611111111112,
        "rougel-35": 0.8314238952536825,
        "rougel-26": 0.03333333333333334,
        "rougel-195": 0.8504983388704319,
        "rougel-151": 0.7046632124352332,
        "rougel-22": 0.7578008915304606,
        "rougel-168": 0.09554140127388534,
        "rougel-115": 0.17682926829268295,
        "rougel-8": 0.020134228187919462,
        "rougel-7": 0.8722316865417377,
        "rougel-23": 0.8722316865417377,
        "rougel-57": 0.2811881188118812,
        "rougel-61": 0.868824531516184,
        "rougel-141": 0.17682926829268295,
        "rougel-171": 0.8923611111111112,
        "meteor-182": 0.8591302835789738,
        "meteor-28": 0.3768470513496142,
        "meteor-6": 0.8872325533568514,
        "meteor-72": 0.8753942651901201,
        "meteor-64": 0.8791921874255605,
        "meteor-59": 0.8872325533568514,
        "meteor-35": 0.8270972171737644,
        "meteor-26": 0.009600614439324117,
        "meteor-195": 0.873821055312154,
        "meteor-151": 0.574206909531876,
        "meteor-22": 0.6225870918578896,
        "meteor-168": 0.05118560208174179,
        "meteor-115": 0.08613009552240965,
        "meteor-8": 0.00576479631053036,
        "meteor-7": 0.8791921874255605,
        "meteor-23": 0.8791921874255605,
        "meteor-57": 0.37249510765270555,
        "meteor-61": 0.8862323869454221,
        "meteor-141": 0.08613009552240965,
        "meteor-171": 0.8872325533568514,
        "ruby-182": 0.7951388888888888,
        "ruby-28": 0.1368078175895765,
        "ruby-6": 0.8854166666666666,
        "ruby-72": 0.8344370860927153,
        "ruby-64": 0.8494983277591973,
        "ruby-59": 0.8854166666666666,
        "ruby-35": 0.7770897832817337,
        "ruby-26": 0.01736111111111116,
        "ruby-195": 0.8089171974522293,
        "ruby-151": 0.6082474226804124,
        "ruby-22": 0.6571428571428571,
        "ruby-168": 0.04166666666666663,
        "ruby-115": 0.09375,
        "ruby-8": 0.01041666666666663,
        "ruby-7": 0.8494983277591973,
        "ruby-23": 0.8494983277591973,
        "ruby-57": 0.17361111111111116,
        "ruby-61": 0.842809364548495,
        "ruby-141": 0.09375,
        "ruby-171": 0.8854166666666666,
        "codebertscore_f1-182": 0.9130395650863647,
        "codebertscore_f3-182": 0.9089453220367432,
        "codebertscore_f1-28": 0.7535554766654968,
        "codebertscore_f3-28": 0.7648146748542786,
        "codebertscore_f1-6": 0.9301031827926636,
        "codebertscore_f3-6": 0.9186447262763977,
        "codebertscore_f1-72": 0.9210472702980042,
        "codebertscore_f3-72": 0.9144522547721863,
        "codebertscore_f1-64": 0.9338414669036865,
        "codebertscore_f3-64": 0.9222893118858337,
        "codebertscore_f1-59": 0.9232068657875061,
        "codebertscore_f3-59": 0.9157071113586426,
        "codebertscore_f1-35": 0.9284183979034424,
        "codebertscore_f3-35": 0.9335559606552124,
        "codebertscore_f1-26": 0.4827634394168854,
        "codebertscore_f3-26": 0.44525930285453796,
        "codebertscore_f1-195": 0.9399542808532715,
        "codebertscore_f3-195": 0.9401757717132568,
        "codebertscore_f1-151": 0.9262632727622986,
        "codebertscore_f3-151": 0.919277548789978,
        "codebertscore_f1-22": 0.8631662130355835,
        "codebertscore_f3-22": 0.8672276735305786,
        "codebertscore_f1-168": 0.6614553332328796,
        "codebertscore_f3-168": 0.5966328978538513,
        "codebertscore_f1-115": 0.6959885358810425,
        "codebertscore_f3-115": 0.6213963627815247,
        "codebertscore_f1-8": 0.5017324686050415,
        "codebertscore_f3-8": 0.4611801207065582,
        "codebertscore_f1-7": 0.9151164293289185,
        "codebertscore_f3-7": 0.9096836447715759,
        "codebertscore_f1-23": 0.9136819243431091,
        "codebertscore_f3-23": 0.9017273187637329,
        "codebertscore_f1-57": 0.7257766723632812,
        "codebertscore_f3-57": 0.7170573472976685,
        "codebertscore_f1-61": 0.9060912728309631,
        "codebertscore_f3-61": 0.8995311856269836,
        "codebertscore_f1-141": 0.6896938681602478,
        "codebertscore_f3-141": 0.6192378997802734,
        "codebertscore_f1-171": 0.9123562574386597,
        "codebertscore_f3-171": 0.9093630313873291,
        "codebertscore_s_f1-182": 0.9206042885780334,
        "codebertscore_s_f3-182": 0.9154695868492126,
        "codebertscore_s_f1-28": 0.7720990777015686,
        "codebertscore_s_f3-28": 0.7868677377700806,
        "codebertscore_s_f1-6": 0.9289777278900146,
        "codebertscore_s_f3-6": 0.9175204634666443,
        "codebertscore_s_f1-72": 0.9247822761535645,
        "codebertscore_s_f3-72": 0.9182894825935364,
        "codebertscore_s_f1-64": 0.9334186315536499,
        "codebertscore_s_f3-64": 0.9204196333885193,
        "codebertscore_s_f1-59": 0.9245014190673828,
        "codebertscore_s_f3-59": 0.9169102311134338,
        "codebertscore_s_f1-35": 0.927370548248291,
        "codebertscore_s_f3-35": 0.9322537183761597,
        "codebertscore_s_f1-26": 0.5370469689369202,
        "codebertscore_s_f3-26": 0.5167993307113647,
        "codebertscore_s_f1-195": 0.9417460560798645,
        "codebertscore_s_f3-195": 0.9421784281730652,
        "codebertscore_s_f1-151": 0.9252725839614868,
        "codebertscore_s_f3-151": 0.9180134534835815,
        "codebertscore_s_f1-22": 0.860223650932312,
        "codebertscore_s_f3-22": 0.8644239902496338,
        "codebertscore_s_f1-168": 0.7173058986663818,
        "codebertscore_s_f3-168": 0.6491672992706299,
        "codebertscore_s_f1-115": 0.7501621842384338,
        "codebertscore_s_f3-115": 0.6862578392028809,
        "codebertscore_s_f1-8": 0.5475797057151794,
        "codebertscore_s_f3-8": 0.515670657157898,
        "codebertscore_s_f1-7": 0.9187620282173157,
        "codebertscore_s_f3-7": 0.9132992625236511,
        "codebertscore_s_f1-23": 0.9107897281646729,
        "codebertscore_s_f3-23": 0.8984148502349854,
        "codebertscore_s_f1-57": 0.7488765120506287,
        "codebertscore_s_f3-57": 0.7406365275382996,
        "codebertscore_s_f1-61": 0.901721179485321,
        "codebertscore_s_f3-61": 0.8950328826904297,
        "codebertscore_s_f1-141": 0.7422201633453369,
        "codebertscore_s_f3-141": 0.6847800016403198,
        "codebertscore_s_f1-171": 0.916452169418335,
        "codebertscore_s_f3-171": 0.9132952690124512,
        "gpt35_nsnr-182": 4,
        "raw_gpt35_nsnr-182": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-72": 4,
        "raw_gpt35_nsnr-72": "4",
        "gpt35_nsnr-64": 4,
        "raw_gpt35_nsnr-64": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-26": 0,
        "raw_gpt35_nsnr-26": "0",
        "gpt35_nsnr-195": 4,
        "raw_gpt35_nsnr-195": "4",
        "gpt35_nsnr-151": 4,
        "raw_gpt35_nsnr-151": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-168": 2,
        "raw_gpt35_nsnr-168": "2",
        "gpt35_nsnr-115": 4,
        "raw_gpt35_nsnr-115": "4",
        "gpt35_nsnr-8": 0,
        "raw_gpt35_nsnr-8": "0",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-61": 4,
        "raw_gpt35_nsnr-61": "4",
        "gpt35_nsnr-141": 4,
        "raw_gpt35_nsnr-141": "4",
        "gpt35_nsnr-171": 4,
        "raw_gpt35_nsnr-171": "4",
        "gpt35_nswr-182": 4,
        "raw_gpt35_nswr-182": "4",
        "gpt35_nswr-28": 2,
        "raw_gpt35_nswr-28": "2",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-72": 4,
        "raw_gpt35_nswr-72": "4",
        "gpt35_nswr-64": 4,
        "raw_gpt35_nswr-64": "4",
        "gpt35_nswr-59": 4,
        "raw_gpt35_nswr-59": "4",
        "gpt35_nswr-35": 4,
        "raw_gpt35_nswr-35": "4",
        "gpt35_nswr-26": 2,
        "raw_gpt35_nswr-26": "2",
        "gpt35_nswr-195": 4,
        "raw_gpt35_nswr-195": "4",
        "gpt35_nswr-151": 4,
        "raw_gpt35_nswr-151": "4",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-168": 3,
        "raw_gpt35_nswr-168": "3",
        "gpt35_nswr-115": 3,
        "raw_gpt35_nswr-115": "3",
        "gpt35_nswr-8": 2,
        "raw_gpt35_nswr-8": "2",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-57": 4,
        "raw_gpt35_nswr-57": "4",
        "gpt35_nswr-61": 4,
        "raw_gpt35_nswr-61": "4",
        "gpt35_nswr-141": 3,
        "raw_gpt35_nswr-141": "3",
        "gpt35_nswr-171": 4,
        "raw_gpt35_nswr-171": "4"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    // the largest of negative integers, and 'b' is the smallest\n    // of positive integers in a list.\n    // If there is no negative or positive integers, return them as None.\n    // Examples:\n    // largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    // largest_smallest_integers([]) == (None, None)\n    // largest_smallest_integers([0]) == (None, None)\n    public static Pair<Optional<Integer>, Optional<Integer>> largestSmallestIntegers(ArrayList<Integer> lst) {\n",
        "snippet": [
            "        List<Integer> smallest = lst.stream().filter(p -> p < 0).toList();\n        List<Integer> largest = lst.stream().filter(p -> p > 0).toList();\n        Optional<Integer> s = Optional.empty();\n        if (smallest.size() > 0) {\n            s = Optional.of(Collections.max(smallest));\n        }\n        Optional<Integer> l = Optional.empty();\n        if (largest.size() > 0) {\n            l = Optional.of(Collections.min(largest));\n        }\n        return Arrays.asList(s, l);\n    }\n}"
        ],
        "simplified": "Create a function that returns a tuple (a, b), where 'a' is the largest of negative integers, and 'b' is the smallest of positive integers in a list. If there is no negative or positive integers, return them as None.",
        "task_id": "136",
        "188": "if (lst.size() < 1) {\n            return new Pair<Optional<Integer>, Optional<Integer>>(Optional.empty(), Optional.empty());\n        }\n\n        var negatives = new ArrayList<Integer>();\n        var positives = new ArrayList<Integer>();\n\n        for (var value : lst) {\n            if (value > 0) {\n                positives.add(value);\n            }\n            else if (value < 0) {\n                negatives.add(value);\n            }\n        }\n\n        var answer = new Pair<Optional<Integer>, Optional<Integer>>(Optional.empty(), Optional.empty());\n\n        if (negatives.size() > 0) {\n            answer.setValue0(Optional.of(Collections.max(negatives)));\n        }\n\n        if (positives.size() > 0) {\n            answer.setValue1(Optional.of(Collections.min(positives)));\n        }\n\n        return answer;",
        "grade-188": {
            "execution": 0
        },
        "30": "Optional<Integer> negative_max = lst.stream().filter(e -> e < 0).max(Integer::compare);\n        Optional<Integer> positive_min = lst.stream().filter(e -> e > 0).min(Integer::compare);\n        return new Pair<Optional<Integer>, Optional<Integer>>(negative_max, positive_min);",
        "grade-30": {
            "execution": 0
        },
        "6": "return null;",
        "grade-6": {
            "execution": 0
        },
        "79": "if (lst.size() < 1) return new Pair<Optional<Integer>, Optional<Integer>>(Optional.empty(), Optional.empty());\n        int min = Integer.MAX_VALUE;\n        int max = Integer.MIN_VALUE;\n        for (int i : lst) {\n            if (i >= 0 && i < min) min = i;\n            if (i < 0 && i > max) max = i;\n        }\n        return new Pair<Optional<Integer>, Optional<Integer>>(max == Integer.MIN_VALUE ? Optional.empty() : Optional.of(max), min == Integer.MAX_VALUE ? Optional.empty() : Optional.of(min));",
        "grade-79": {
            "execution": 0
        },
        "67": "// Write your code here.\n        Optional<Integer> a=Optional.empty();\n        Optional<Integer> b=Optional.empty();\n        for(int i=0;i<lst.size();i++){\n            if(lst.get(i)<0 && (a.isEmpty() || a.get()<lst.get(i))){\n                a=Optional.of(lst.get(i));\n            }\n            if(lst.get(i)>0 && (b.isEmpty() || b.get()>lst.get(i))){\n                b=Optional.of(lst.get(i));\n            }\n        }\n        return new Pair<Optional<Integer>, Optional<Integer>>(a,b);",
        "grade-67": {
            "execution": 0
        },
        "62": "// note the usage of Pair to return a tuple\n        Pair<Optional<Integer>, Optional<Integer>> result = null;\n        // write your code here\n\n        return result;",
        "grade-62": {
            "execution": 0
        },
        "38": "Integer maxNeg = null;\n        Integer minPos = null;\n        for (Integer i : lst) {\n            if (i < 0) {\n                if (maxNeg == null || i > maxNeg) {\n                    maxNeg = i;\n                }\n            } else if (i > 0) {\n                if (minPos == null || i < minPos) {\n                    minPos = i;\n                }\n            }\n        }\n        return new Pair<Optional<Integer>, Optional<Integer>>(\n            maxNeg == null ? Optional.empty() : Optional.of(maxNeg),\n            minPos == null ? Optional.empty() : Optional.of(minPos)\n        );",
        "grade-38": {
            "execution": 0
        },
        "28": "Optional<Integer> maxNeg = Optional.empty();\n        Optional<Integer> minPos = Optional.empty();\n        for (Integer e : lst) {\n            if (e < 0) {\n                if (!maxNeg.isPresent() || e > maxNeg.get()) {\n                    maxNeg = Optional.of(e);\n                }\n            } else if (e > 0) {\n                if (!minPos.isPresent() || e < minPos.get()) {\n                    minPos = Optional.of(e);\n                }\n            }\n        }\n        return Pair.with(maxNeg, minPos);",
        "grade-28": {
            "execution": 0
        },
        "159": "if (lst.size() == 0) {\n            return new Pair<Optional<Integer>, Optional<Integer>>(Optional.empty(), Optional.empty());\n        }\n        Integer[] arr = new Integer[lst.size()];\n        lst.toArray(arr);\n        Optional<Integer> largestNegative = Arrays.stream(arr).filter(x -> x < 0).max(Comparator.naturalOrder());\n        Optional<Integer> smallestPositive = Arrays.stream(arr).filter(x -> x > 0).min(Comparator.naturalOrder());\n        return new Pair<Optional<Integer>, Optional<Integer>>(largestNegative, smallestPositive);",
        "grade-159": {
            "execution": 0
        },
        "24": "// write code here!\n        return null;",
        "grade-24": {
            "execution": 0
        },
        "171": "Optional<Integer> largest = Optional.empty();\n        Optional<Integer> smallest = Optional.empty();\n        int size = lst.size();\n        if (size == 0) {\n            return new Pair<Optional<Integer>, Optional<Integer>>(largest, smallest);\n        }\n        for (int i = 0; i < size; i++) {\n            int val = lst.get(i);\n            if (val < 0) {\n                if (!largest.isPresent()) {\n                    largest = Optional.of(val);\n                } else {\n                    if (val > largest.get()) {\n                        largest = Optional.of(val);\n                    }\n                }\n            } else if (val > 0) {\n                if (!smallest.isPresent()) {\n                    smallest = Optional.of(val);\n                } else {\n                    if (val < smallest.get()) {\n                        smallest = Optional.of(val);\n                    }\n                }\n            }\n        }\n        return new Pair<Optional<Integer>, Optional<Integer>>(largest, smallest);",
        "grade-171": {
            "execution": 0
        },
        "123": "return Pair.with(\n          lst.stream().filter(n -> n < 0).max(Comparator.naturalOrder()),\n          lst.stream().filter(n -> n > 0).min(Comparator.naturalOrder())\n        );",
        "grade-123": {
            "execution": 0
        },
        "8": "// Your code here.\n        // No need to include the class \"Options\" in the import list,\n        // since it's already imported.\n        return null;",
        "grade-8": {
            "execution": 0
        },
        "7": "Optional<Integer> maxNegativeOpt = Optional.empty();\n        Optional<Integer> minPositiveOpt = Optional.empty();\n        for (Integer i : lst) {\n            if (i < 0) {\n                if (!maxNegativeOpt.isPresent() || maxNegativeOpt.get() < i) {\n                    maxNegativeOpt = Optional.of(i);\n                }\n            } else if (i > 0) {\n                if (!minPositiveOpt.isPresent() || minPositiveOpt.get() > i) {\n                    minPositiveOpt = Optional.of(i);\n                }\n            }\n        }\n        return Pair.with(maxNegativeOpt, minPositiveOpt);",
        "grade-7": {
            "execution": 0
        },
        "25": "// Your code here",
        "grade-25": {
            "execution": 0
        },
        "60": "// Insert your code here",
        "grade-60": {
            "execution": 0
        },
        "64": "// show me the code\n        return null;",
        "grade-64": {
            "execution": 0
        },
        "147": "// Write your code here\n        Optional<Integer> smallestPos = Optional.empty();\n        Optional<Integer> largestNeg = Optional.empty();\n        for (Integer i : lst) {\n            if (i < 0) {\n                if (!largestNeg.isPresent() || i > largestNeg.get()) {\n                    largestNeg = Optional.of(i);\n                }\n            } else if (i > 0) {\n                if (!smallestPos.isPresent() || i < smallestPos.get()) {\n                    smallestPos = Optional.of(i);\n                }\n            }\n        }\n        return Pair.with(largestNeg, smallestPos);",
        "grade-147": {
            "execution": 0
        },
        "176": "//write the code here\n        return null;",
        "grade-176": {
            "execution": 0
        },
        "163": "// ...",
        "grade-163": {
            "execution": 0
        },
        "bleu-188": 0.31190335330056046,
        "bleu-30": 0.1945921261477302,
        "bleu-6": 1.8743632643958797e-21,
        "bleu-79": 0.19901453049008197,
        "bleu-67": 0.2628158886211833,
        "bleu-62": 0.007934361417020135,
        "bleu-38": 0.183204068477067,
        "bleu-28": 0.2702312285451668,
        "bleu-159": 0.30081834899761917,
        "bleu-24": 1.9382275957460824e-08,
        "bleu-171": 0.26203623282355565,
        "bleu-123": 0.0976301936258921,
        "bleu-8": 0.0007174743322348244,
        "bleu-7": 0.2720850682511483,
        "bleu-25": 0.0,
        "bleu-60": 0.0,
        "bleu-64": 1.9382275957460824e-08,
        "bleu-147": 0.29030313944486447,
        "bleu-176": 1.9382275957460824e-08,
        "bleu-163": 1.4501479338223127e-13,
        "codebleu-188": 0.6957988597905613,
        "codebleu-30": 0.35172357411220845,
        "codebleu-6": 0.0061728395061728435,
        "codebleu-79": 0.5344934272667727,
        "codebleu-67": 0.6802862859511041,
        "codebleu-62": 0.09230020939579293,
        "codebleu-38": 0.4481568094781932,
        "codebleu-28": 0.5615073855823095,
        "codebleu-159": 0.6438763443616208,
        "codebleu-24": 0.015432212936163058,
        "codebleu-171": 0.6865918876863859,
        "codebleu-123": 0.2796555777275046,
        "codebleu-8": 0.07460098308223623,
        "codebleu-7": 0.543158850333957,
        "codebleu-25": 0.009259259259259259,
        "codebleu-60": 0.012345679012345678,
        "codebleu-64": 0.01851863268924948,
        "codebleu-147": 0.5596111023553583,
        "codebleu-176": 0.01851863268924948,
        "codebleu-163": 0.0,
        "chrf-188": 0.5125142748096271,
        "chrf-30": 0.3726967918051047,
        "chrf-6": 0.015794500214987794,
        "chrf-79": 0.3899329041720827,
        "chrf-67": 0.4360702823558734,
        "chrf-62": 0.15441569332430236,
        "chrf-38": 0.3520251784021998,
        "chrf-28": 0.3833878609624982,
        "chrf-159": 0.5185103108334943,
        "chrf-24": 0.023982423371419634,
        "chrf-171": 0.5179244168927558,
        "chrf-123": 0.20740579776292717,
        "chrf-8": 0.07611251654701603,
        "chrf-7": 0.37757195170622077,
        "chrf-25": 0.007242526457521283,
        "chrf-60": 0.013824127738233912,
        "chrf-64": 0.02220202379240128,
        "chrf-147": 0.47967278624008086,
        "chrf-176": 0.025739586087063695,
        "chrf-163": 0.0021849963583394022,
        "rougel-188": 0.49411764705882355,
        "rougel-30": 0.4932735426008969,
        "rougel-6": 0.027397260273972605,
        "rougel-79": 0.3780068728522336,
        "rougel-67": 0.42902208201892744,
        "rougel-62": 0.1675977653631285,
        "rougel-38": 0.34408602150537637,
        "rougel-28": 0.4322344322344322,
        "rougel-159": 0.4511784511784512,
        "rougel-24": 0.026315789473684213,
        "rougel-171": 0.4289693593314763,
        "rougel-123": 0.36815920398009955,
        "rougel-8": 0.06779661016949153,
        "rougel-7": 0.41696113074204955,
        "rougel-25": 0.0,
        "rougel-60": 0.0,
        "rougel-64": 0.026315789473684213,
        "rougel-147": 0.4372759856630824,
        "rougel-176": 0.026315789473684213,
        "rougel-163": 0.04054054054054055,
        "meteor-188": 0.5589102639034051,
        "meteor-30": 0.27893196781272855,
        "meteor-6": 0.007751937984496125,
        "meteor-79": 0.3594880982806257,
        "meteor-67": 0.45027073249613625,
        "meteor-62": 0.09261220828200563,
        "meteor-38": 0.3438135719811281,
        "meteor-28": 0.4208547143822128,
        "meteor-159": 0.49442717867583563,
        "meteor-24": 0.00771604938271605,
        "meteor-171": 0.4434857795703672,
        "meteor-123": 0.24560614472140044,
        "meteor-8": 0.03406510219530659,
        "meteor-7": 0.41078261638069585,
        "meteor-25": 0.0,
        "meteor-60": 0.0,
        "meteor-64": 0.00771604938271605,
        "meteor-147": 0.434320065127985,
        "meteor-176": 0.00771604938271605,
        "meteor-163": 0.011609907120743035,
        "ruby-188": 0.30456852791878175,
        "ruby-30": 0.3426573426573427,
        "ruby-6": 0.013986013986013957,
        "ruby-79": 0.16216216216216217,
        "ruby-67": 0.3160919540229885,
        "ruby-62": 0.09790209790209792,
        "ruby-38": 0.15384615384615385,
        "ruby-28": 0.2727272727272727,
        "ruby-159": 0.24675324675324672,
        "ruby-24": 0.013986013986013957,
        "ruby-171": 0.27314814814814814,
        "ruby-123": 0.2517482517482518,
        "ruby-8": 0.04195804195804198,
        "ruby-7": 0.2447552447552448,
        "ruby-25": 0.0,
        "ruby-60": 0.0,
        "ruby-64": 0.013986013986013957,
        "ruby-147": 0.2447552447552448,
        "ruby-176": 0.013986013986013957,
        "ruby-163": 0.020979020979020935,
        "codebertscore_f1-188": 0.7561748027801514,
        "codebertscore_f3-188": 0.7636694312095642,
        "codebertscore_f1-30": 0.7957220673561096,
        "codebertscore_f3-30": 0.766937255859375,
        "codebertscore_f1-6": 0.5044856071472168,
        "codebertscore_f3-6": 0.46021702885627747,
        "codebertscore_f1-79": 0.7741467356681824,
        "codebertscore_f3-79": 0.761639416217804,
        "codebertscore_f1-67": 0.760336697101593,
        "codebertscore_f3-67": 0.75776207447052,
        "codebertscore_f1-62": 0.6502546072006226,
        "codebertscore_f3-62": 0.6425296664237976,
        "codebertscore_f1-38": 0.7561131119728088,
        "codebertscore_f3-38": 0.7498489022254944,
        "codebertscore_f1-28": 0.7663760185241699,
        "codebertscore_f3-28": 0.7603692412376404,
        "codebertscore_f1-159": 0.7941701412200928,
        "codebertscore_f3-159": 0.7987076640129089,
        "codebertscore_f1-24": 0.5469884276390076,
        "codebertscore_f3-24": 0.5164254307746887,
        "codebertscore_f1-171": 0.7482872605323792,
        "codebertscore_f3-171": 0.7491742372512817,
        "codebertscore_f1-123": 0.7506765127182007,
        "codebertscore_f3-123": 0.7111539840698242,
        "codebertscore_f1-8": 0.6011261940002441,
        "codebertscore_f3-8": 0.5901768803596497,
        "codebertscore_f1-7": 0.7530156373977661,
        "codebertscore_f3-7": 0.7557452917098999,
        "codebertscore_f1-25": 0.4771524965763092,
        "codebertscore_f3-25": 0.4475097358226776,
        "codebertscore_f1-60": 0.5001682043075562,
        "codebertscore_f3-60": 0.4838356673717499,
        "codebertscore_f1-64": 0.5696530938148499,
        "codebertscore_f3-64": 0.5386237502098083,
        "codebertscore_f1-147": 0.758875846862793,
        "codebertscore_f3-147": 0.7589817047119141,
        "codebertscore_f1-176": 0.5553885102272034,
        "codebertscore_f3-176": 0.5260781049728394,
        "codebertscore_f1-163": 0.4868314564228058,
        "codebertscore_f3-163": 0.4377734363079071,
        "codebertscore_s_f1-188": 0.7867430448532104,
        "codebertscore_s_f3-188": 0.7918263673782349,
        "codebertscore_s_f1-30": 0.805957019329071,
        "codebertscore_s_f3-30": 0.7784174680709839,
        "codebertscore_s_f1-6": 0.5795606374740601,
        "codebertscore_s_f3-6": 0.538837194442749,
        "codebertscore_s_f1-79": 0.7767240405082703,
        "codebertscore_s_f3-79": 0.7641762495040894,
        "codebertscore_s_f1-67": 0.7723413705825806,
        "codebertscore_s_f3-67": 0.7696782350540161,
        "codebertscore_s_f1-62": 0.6535277962684631,
        "codebertscore_s_f3-62": 0.6472129225730896,
        "codebertscore_s_f1-38": 0.7669885158538818,
        "codebertscore_s_f3-38": 0.7607076168060303,
        "codebertscore_s_f1-28": 0.7735044956207275,
        "codebertscore_s_f3-28": 0.766821563243866,
        "codebertscore_s_f1-159": 0.8011524081230164,
        "codebertscore_s_f3-159": 0.8065796494483948,
        "codebertscore_s_f1-24": 0.5780065655708313,
        "codebertscore_s_f3-24": 0.5594598650932312,
        "codebertscore_s_f1-171": 0.773677408695221,
        "codebertscore_s_f3-171": 0.7692920565605164,
        "codebertscore_s_f1-123": 0.7652668356895447,
        "codebertscore_s_f3-123": 0.7269468903541565,
        "codebertscore_s_f1-8": 0.6131511926651001,
        "codebertscore_s_f3-8": 0.6066656708717346,
        "codebertscore_s_f1-7": 0.7579225301742554,
        "codebertscore_s_f3-7": 0.7612186670303345,
        "codebertscore_s_f1-25": 0.5130085349082947,
        "codebertscore_s_f3-25": 0.5016340613365173,
        "codebertscore_s_f1-60": 0.5020650029182434,
        "codebertscore_s_f3-60": 0.49398359656333923,
        "codebertscore_s_f1-64": 0.5805215835571289,
        "codebertscore_s_f3-64": 0.5592020750045776,
        "codebertscore_s_f1-147": 0.7662326693534851,
        "codebertscore_s_f3-147": 0.7652687430381775,
        "codebertscore_s_f1-176": 0.569032609462738,
        "codebertscore_s_f3-176": 0.552523672580719,
        "codebertscore_s_f1-163": 0.5242005586624146,
        "codebertscore_s_f3-163": 0.4847273528575897,
        "gpt35_nsnr-188": 4,
        "raw_gpt35_nsnr-188": "4",
        "gpt35_nsnr-30": 4,
        "raw_gpt35_nsnr-30": "4",
        "gpt35_nsnr-6": 0,
        "raw_gpt35_nsnr-6": "0",
        "gpt35_nsnr-79": 4,
        "raw_gpt35_nsnr-79": "4",
        "gpt35_nsnr-67": 4,
        "raw_gpt35_nsnr-67": "4",
        "gpt35_nsnr-62": 2,
        "raw_gpt35_nsnr-62": "2",
        "gpt35_nsnr-38": 4,
        "raw_gpt35_nsnr-38": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-159": 4,
        "raw_gpt35_nsnr-159": "4",
        "gpt35_nsnr-24": 0,
        "raw_gpt35_nsnr-24": "2 - The code snippet only returns null and does not implement the required functionality of finding the largest negative integer and smallest positive integer in a list. It also does not handle cases where there are no negative or positive integers in the list.",
        "gpt35_nsnr-171": 4,
        "raw_gpt35_nsnr-171": "4",
        "gpt35_nsnr-123": 4,
        "raw_gpt35_nsnr-123": "4",
        "gpt35_nsnr-8": 2,
        "raw_gpt35_nsnr-8": "2",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-25": 0,
        "raw_gpt35_nsnr-25": "3 - The code correctly identifies the largest negative integer and smallest positive integer in the list and returns them as a tuple. However, it does not handle the cases where there are no negative or positive integers correctly. It returns (0, 0) instead of (None, None).",
        "gpt35_nsnr-60": 0,
        "raw_gpt35_nsnr-60": "3 - The code correctly identifies the largest negative integer and smallest positive integer in the list and returns them as a tuple. However, it does not handle the cases where there are no negative or positive integers correctly. It returns (0, 0) instead of (None, None).",
        "gpt35_nsnr-64": 0,
        "raw_gpt35_nsnr-64": "0",
        "gpt35_nsnr-147": 4,
        "raw_gpt35_nsnr-147": "4",
        "gpt35_nsnr-176": 0,
        "raw_gpt35_nsnr-176": "0",
        "gpt35_nsnr-163": 4,
        "raw_gpt35_nsnr-163": "4",
        "gpt35_nswr-188": 4,
        "raw_gpt35_nswr-188": "4",
        "gpt35_nswr-30": 4,
        "raw_gpt35_nswr-30": "4",
        "gpt35_nswr-6": 0,
        "raw_gpt35_nswr-6": "0",
        "gpt35_nswr-79": 4,
        "raw_gpt35_nswr-79": "4",
        "gpt35_nswr-67": 4,
        "raw_gpt35_nswr-67": "4",
        "gpt35_nswr-62": 2,
        "raw_gpt35_nswr-62": "2",
        "gpt35_nswr-38": 4,
        "raw_gpt35_nswr-38": "4",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-159": 4,
        "raw_gpt35_nswr-159": "4",
        "gpt35_nswr-24": 0,
        "raw_gpt35_nswr-24": "0",
        "gpt35_nswr-171": 3,
        "raw_gpt35_nswr-171": "3",
        "gpt35_nswr-123": 4,
        "raw_gpt35_nswr-123": "4",
        "gpt35_nswr-8": 2,
        "raw_gpt35_nswr-8": "2",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-25": 3,
        "raw_gpt35_nswr-25": "3",
        "gpt35_nswr-60": 3,
        "raw_gpt35_nswr-60": "3",
        "gpt35_nswr-64": 0,
        "raw_gpt35_nswr-64": "0",
        "gpt35_nswr-147": 4,
        "raw_gpt35_nswr-147": "4",
        "gpt35_nswr-176": 0,
        "raw_gpt35_nswr-176": "0",
        "gpt35_nswr-163": 3,
        "raw_gpt35_nswr-163": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return n-th Fibonacci number.\n    // >>> fib(10)\n    // 55\n    // >>> fib(1)\n    // 1\n    // >>> fib(8)\n    // 21\n    public static int fib(int n) {\n",
        "snippet": [
            "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        return fib(n - 1) + fib(n - 2);\n    }\n}"
        ],
        "simplified": "Return n-th Fibonacci number.",
        "task_id": "55",
        "133": "int[] a = new int[n + 1];\n        a[0] = 0;\n        a[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            a[i] = a[i - 1] + a[i - 2];\n        }\n        return a[n];",
        "grade-133": {
            "execution": 1
        },
        "18": "if (n == 1) {\n            return 1;\n        }\n        int a = 0;\n        int b = 1;\n        for (int i = 2; i <= n; i++) {\n            int c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;",
        "grade-18": {
            "execution": 1
        },
        "4": "int[] fib = new int[n + 1];\n        fib[0] = 0;\n        fib[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            fib[i] = fib[i - 1] + fib[i - 2];\n        }\n        return fib[n];",
        "grade-4": {
            "execution": 1
        },
        "156": "if (n == 1) {\n\t    return 1;\n\t} else if (n == 2) {\n\t    return 1;\n\t} else {\n\t    return fib(n - 1) + fib(n - 2);\n\t}",
        "grade-156": {
            "execution": 1
        },
        "50": "int prevprev = 0;\n        int prev = 1;\n        for (int i = 0; i < n; i++) {\n            int current = prevprev + prev;\n            prevprev = prev;\n            prev = current;\n        }\n        return prevprev;",
        "grade-50": {
            "execution": 1
        },
        "43": "// Compute the answer in here.\n        // Please do not use recursion.\n        if (n == 1) return 1;\n        if (n == 2) return 1;\n        int fib1 = 1;\n        int fib2 = 1;\n        int fib = 0;\n        for (int i = 3; i <= n; i++) {\n            fib = fib1 + fib2;\n            fib1 = fib2;\n            fib2 = fib;\n        }\n        return fib;",
        "grade-43": {
            "execution": 1
        },
        "39": "int a = 0;\n        int b = 1;\n        if (n <= 1) {\n            return n;\n        }\n        for (int i = 2; i <= n; i++) {\n            int c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;",
        "grade-39": {
            "execution": 1
        },
        "23": "int result = 0;\n        if (n == 1) {\n            result = 1;\n        } else if (n > 1) {\n            result = fib(n - 1) + fib(n - 2);\n        }\n        return result;",
        "grade-23": {
            "execution": 1
        },
        "17": "int[][] T = new int[][]{{1,1},{1,0}};\n        return pow(T, n)[0][0];",
        "grade-17": {
            "execution": 0
        },
        "140": "if (n < 1) {\n            return -1;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        int a = 1;\n        int b = 1;\n        for (int i = 2; i < n; i++) {\n            int c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;",
        "grade-140": {
            "execution": 1
        },
        "192": "int[] fibs = new int[n + 1];\n        fibs[0] = 0;\n        fibs[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            fibs[i] = fibs[i - 1] + fibs[i - 2];\n        }\n        return fibs[n];",
        "grade-192": {
            "execution": 1
        },
        "113": "if (n <= 1) {\n            return n;\n        }\n        int[] f = new int[n + 1];\n        f[0] = 0;\n        f[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            f[i] = f[i - 1] + f[i - 2];\n        }\n        return f[n];",
        "grade-113": {
            "execution": 1
        },
        "14": "int result = 0;\n        int prev = 1;\n        for (int i = 0; i < n; i++) {\n            int tmp = result;\n            result += prev;\n            prev = tmp;\n        }\n        return result;",
        "grade-14": {
            "execution": 1
        },
        "123": "// nth Fibonacci number.\n        int fib = 0;\n        // Write your solution here.\n        if (n == 1) return 1;\n        if (n == 2) return 1;\n        int[] fibArray = new int[n+1];\n        fibArray[1] = 1;\n        fibArray[2] = 1;\n        for (int i = 3; i <= n; i++) {\n            fibArray[i] = fibArray[i-1] + fibArray[i-2];\n        }\n        fib = fibArray[n];\n        return fib;",
        "grade-123": {
            "execution": 1
        },
        "82": "//return (int)DoubleStream.iterate(1, x -> x + 1).limit(n).reduce(0, (x, y) -> x + y);\n        //return (int)IntStream.range(0, n).reduce(0, (x, y) -> x + y);\n        //return (int)IntStream.range(0, n).sum();\n        int a = 0, b = 1;\n        for (int i = 0; i < n; i++) {\n            int c = a + b;\n            a = b;\n            b = c;\n        }\n        return a;",
        "grade-82": {
            "execution": 1
        },
        "5": "int i = 1;\n        int fib = 1;\n        int prev = 1;\n        while (i < n) {\n            int temp = fib;\n            fib += prev;\n            prev = temp;\n            i++;\n        }\n        return fib;",
        "grade-5": {
            "execution": 0
        },
        "38": "//\n        // YOUR CODE HERE\n        //",
        "grade-38": {
            "execution": 0
        },
        "40": "int f0 = 0;\n        int f1 = 1;\n        for (int i = 2; i <= n; i++) {\n            int f2 = f0 + f1;\n            f0 = f1;\n            f1 = f2;\n        }\n        return f1;",
        "grade-40": {
            "execution": 1
        },
        "104": "int[] mem = new int[n + 1];\n        for (int i = 0; i < n + 1; i++) {\n            if (i == 0) {\n                mem[i] = 0;\n            } else if (i == 1) {\n                mem[i] = 1;\n            } else {\n                mem[i] = mem[i - 1] + mem[i - 2];\n            }\n        }\n        return mem[n];",
        "grade-104": {
            "execution": 1
        },
        "126": "int previous = 0;\n        int current = 1;\n        for (int i = 0; i < n; i++) {\n            int tmp = previous;\n            previous = current;\n            current = tmp + current;\n        }\n        return previous;",
        "grade-126": {
            "execution": 1
        },
        "bleu-133": 0.04706772716444919,
        "bleu-18": 0.25218470313752667,
        "bleu-4": 0.07140297313491789,
        "bleu-156": 0.7303420461049419,
        "bleu-50": 0.06386802805250512,
        "bleu-43": 0.172716097315819,
        "bleu-39": 0.13497886862924188,
        "bleu-23": 0.5619143923315566,
        "bleu-17": 0.030578538231636757,
        "bleu-140": 0.2703766102277464,
        "bleu-192": 0.04706772716444919,
        "bleu-113": 0.10259099710357171,
        "bleu-14": 0.06537183436320841,
        "bleu-123": 0.11926274141852977,
        "bleu-82": 0.026056250035271594,
        "bleu-5": 0.0914629367674731,
        "bleu-38": 0.0,
        "bleu-40": 0.0624318741192047,
        "bleu-104": 0.13497243572545675,
        "bleu-126": 0.06386802805250512,
        "codebleu-133": 0.35236480120595437,
        "codebleu-18": 0.4486527228189184,
        "codebleu-4": 0.35782928208027126,
        "codebleu-156": 0.7709175013858607,
        "codebleu-50": 0.2527793480309025,
        "codebleu-43": 0.5071603542491049,
        "codebleu-39": 0.37968720557753904,
        "codebleu-23": 0.6494527194596987,
        "codebleu-17": 0.3102506123987186,
        "codebleu-140": 0.5673638590540795,
        "codebleu-192": 0.35236480120595437,
        "codebleu-113": 0.4738081778782739,
        "codebleu-14": 0.2527793480309025,
        "codebleu-123": 0.54983983418127,
        "codebleu-82": 0.4710759374411155,
        "codebleu-5": 0.2697380817787827,
        "codebleu-38": 0.03448275862068965,
        "codebleu-40": 0.2527793480309025,
        "codebleu-104": 0.5624646693046919,
        "codebleu-126": 0.2527793480309025,
        "chrf-133": 0.18552243715128114,
        "chrf-18": 0.40168250692746205,
        "chrf-4": 0.24236679506900655,
        "chrf-156": 0.7746082451142656,
        "chrf-50": 0.17841507325406605,
        "chrf-43": 0.3666222763704335,
        "chrf-39": 0.3078922623627637,
        "chrf-23": 0.5703893183316935,
        "chrf-17": 0.1286616058619172,
        "chrf-140": 0.4989620783202506,
        "chrf-192": 0.2374818927375575,
        "chrf-113": 0.32272121567765344,
        "chrf-14": 0.18164364619801435,
        "chrf-123": 0.3173048294650013,
        "chrf-82": 0.2084537011019682,
        "chrf-5": 0.23315087312405605,
        "chrf-38": 0.0,
        "chrf-40": 0.20224728032518569,
        "chrf-104": 0.2436906695279891,
        "chrf-126": 0.17642671731301376,
        "rougel-133": 0.2882882882882883,
        "rougel-18": 0.40404040404040403,
        "rougel-4": 0.32432432432432434,
        "rougel-156": 0.8809523809523809,
        "rougel-50": 0.27906976744186046,
        "rougel-43": 0.3937007874015748,
        "rougel-39": 0.3838383838383838,
        "rougel-23": 0.6896551724137931,
        "rougel-17": 0.2682926829268293,
        "rougel-140": 0.4727272727272728,
        "rougel-192": 0.2882882882882883,
        "rougel-113": 0.3739837398373984,
        "rougel-14": 0.28235294117647053,
        "rougel-123": 0.35000000000000003,
        "rougel-82": 0.2122905027932961,
        "rougel-5": 0.28235294117647053,
        "rougel-38": 0.0,
        "rougel-40": 0.27586206896551724,
        "rougel-104": 0.417910447761194,
        "rougel-126": 0.27906976744186046,
        "meteor-133": 0.3361490761832447,
        "meteor-18": 0.36944140348932275,
        "meteor-4": 0.3593427774258333,
        "meteor-156": 0.8992684829088563,
        "meteor-50": 0.22946859903381644,
        "meteor-43": 0.40243107568809966,
        "meteor-39": 0.350003051885262,
        "meteor-23": 0.8293916406366206,
        "meteor-17": 0.24179255633386781,
        "meteor-140": 0.4295983162100457,
        "meteor-192": 0.3593427774258333,
        "meteor-113": 0.4060003091753555,
        "meteor-14": 0.23002421307506055,
        "meteor-123": 0.4062907708888763,
        "meteor-82": 0.31558185404339256,
        "meteor-5": 0.23002421307506055,
        "meteor-38": 0.0,
        "meteor-40": 0.22891566265060243,
        "meteor-104": 0.48315582917659045,
        "meteor-126": 0.22946859903381644,
        "ruby-133": 0.2142857142857143,
        "ruby-18": 0.2931034482758621,
        "ruby-4": 0.24285714285714288,
        "ruby-156": 0.8372093023255813,
        "ruby-50": 0.1333333333333333,
        "ruby-43": 0.2441860465116279,
        "ruby-39": 0.2586206896551724,
        "ruby-23": 0.5652173913043479,
        "ruby-17": 0.09756097560975607,
        "ruby-140": 0.3623188405797102,
        "ruby-192": 0.2142857142857143,
        "ruby-113": 0.2682926829268293,
        "ruby-14": 0.13636363636363635,
        "ruby-123": 0.2100840336134454,
        "ruby-82": 0.13043478260869568,
        "ruby-5": 0.11363636363636365,
        "ruby-38": 0.0,
        "ruby-40": 0.13043478260869568,
        "ruby-104": 0.30107526881720426,
        "ruby-126": 0.11111111111111116,
        "codebertscore_f1-133": 0.8154811859130859,
        "codebertscore_f3-133": 0.8384670615196228,
        "codebertscore_f1-18": 0.7837011814117432,
        "codebertscore_f3-18": 0.8057420253753662,
        "codebertscore_f1-4": 0.8270595669746399,
        "codebertscore_f3-4": 0.8513587713241577,
        "codebertscore_f1-156": 0.912244439125061,
        "codebertscore_f3-156": 0.920019268989563,
        "codebertscore_f1-50": 0.7292497158050537,
        "codebertscore_f3-50": 0.7465885281562805,
        "codebertscore_f1-43": 0.7796075940132141,
        "codebertscore_f3-43": 0.819915771484375,
        "codebertscore_f1-39": 0.778315007686615,
        "codebertscore_f3-39": 0.8005004525184631,
        "codebertscore_f1-23": 0.8876661062240601,
        "codebertscore_f3-23": 0.90206378698349,
        "codebertscore_f1-17": 0.7375234365463257,
        "codebertscore_f3-17": 0.739192008972168,
        "codebertscore_f1-140": 0.793860912322998,
        "codebertscore_f3-140": 0.8236488699913025,
        "codebertscore_f1-192": 0.8181807398796082,
        "codebertscore_f3-192": 0.845619797706604,
        "codebertscore_f1-113": 0.8185728192329407,
        "codebertscore_f3-113": 0.8503485321998596,
        "codebertscore_f1-14": 0.7223974466323853,
        "codebertscore_f3-14": 0.732465922832489,
        "codebertscore_f1-123": 0.7833840250968933,
        "codebertscore_f3-123": 0.8313620090484619,
        "codebertscore_f1-82": 0.7109658718109131,
        "codebertscore_f3-82": 0.7531772255897522,
        "codebertscore_f1-5": 0.7215744853019714,
        "codebertscore_f3-5": 0.7324321269989014,
        "codebertscore_f1-38": 0.5793558955192566,
        "codebertscore_f3-38": 0.5762205123901367,
        "codebertscore_f1-40": 0.7631714344024658,
        "codebertscore_f3-40": 0.7763372659683228,
        "codebertscore_f1-104": 0.7941593527793884,
        "codebertscore_f3-104": 0.8241759538650513,
        "codebertscore_f1-126": 0.7294240593910217,
        "codebertscore_f3-126": 0.7463074326515198,
        "codebertscore_s_f1-133": 0.8345414996147156,
        "codebertscore_s_f3-133": 0.8541781902313232,
        "codebertscore_s_f1-18": 0.8101587295532227,
        "codebertscore_s_f3-18": 0.8373504281044006,
        "codebertscore_s_f1-4": 0.8491566181182861,
        "codebertscore_s_f3-4": 0.8696057200431824,
        "codebertscore_s_f1-156": 0.9240797162055969,
        "codebertscore_s_f3-156": 0.9304734468460083,
        "codebertscore_s_f1-50": 0.7547847032546997,
        "codebertscore_s_f3-50": 0.7763258218765259,
        "codebertscore_s_f1-43": 0.8030466437339783,
        "codebertscore_s_f3-43": 0.8474600315093994,
        "codebertscore_s_f1-39": 0.8071277141571045,
        "codebertscore_s_f3-39": 0.8382627964019775,
        "codebertscore_s_f1-23": 0.9128713011741638,
        "codebertscore_s_f3-23": 0.9274711608886719,
        "codebertscore_s_f1-17": 0.751090407371521,
        "codebertscore_s_f3-17": 0.7544113993644714,
        "codebertscore_s_f1-140": 0.8179145455360413,
        "codebertscore_s_f3-140": 0.8465412855148315,
        "codebertscore_s_f1-192": 0.8384227752685547,
        "codebertscore_s_f3-192": 0.8628740310668945,
        "codebertscore_s_f1-113": 0.8366846442222595,
        "codebertscore_s_f3-113": 0.8690776824951172,
        "codebertscore_s_f1-14": 0.7483430504798889,
        "codebertscore_s_f3-14": 0.7590188980102539,
        "codebertscore_s_f1-123": 0.8265957832336426,
        "codebertscore_s_f3-123": 0.8759492039680481,
        "codebertscore_s_f1-82": 0.7364423871040344,
        "codebertscore_s_f3-82": 0.7771453261375427,
        "codebertscore_s_f1-5": 0.7531241178512573,
        "codebertscore_s_f3-5": 0.7624147534370422,
        "codebertscore_s_f1-38": 0.5823895931243896,
        "codebertscore_s_f3-38": 0.5844919681549072,
        "codebertscore_s_f1-40": 0.7855281233787537,
        "codebertscore_s_f3-40": 0.8008974194526672,
        "codebertscore_s_f1-104": 0.8208971619606018,
        "codebertscore_s_f3-104": 0.8501027226448059,
        "codebertscore_s_f1-126": 0.7568365931510925,
        "codebertscore_s_f3-126": 0.7747231721878052,
        "gpt35_nsnr-133": 4,
        "raw_gpt35_nsnr-133": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-156": 4,
        "raw_gpt35_nsnr-156": "4",
        "gpt35_nsnr-50": 3,
        "raw_gpt35_nsnr-50": "3",
        "gpt35_nsnr-43": 4,
        "raw_gpt35_nsnr-43": "4",
        "gpt35_nsnr-39": 4,
        "raw_gpt35_nsnr-39": "4",
        "gpt35_nsnr-23": 3,
        "raw_gpt35_nsnr-23": "3",
        "gpt35_nsnr-17": 3,
        "raw_gpt35_nsnr-17": "3",
        "gpt35_nsnr-140": 4,
        "raw_gpt35_nsnr-140": "4",
        "gpt35_nsnr-192": 4,
        "raw_gpt35_nsnr-192": "4",
        "gpt35_nsnr-113": 4,
        "raw_gpt35_nsnr-113": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-123": 4,
        "raw_gpt35_nsnr-123": "4",
        "gpt35_nsnr-82": 4,
        "raw_gpt35_nsnr-82": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-38": 3,
        "raw_gpt35_nsnr-38": "3",
        "gpt35_nsnr-40": 4,
        "raw_gpt35_nsnr-40": "4",
        "gpt35_nsnr-104": 4,
        "raw_gpt35_nsnr-104": "4",
        "gpt35_nsnr-126": 3,
        "raw_gpt35_nsnr-126": "3",
        "gpt35_nswr-133": 4,
        "raw_gpt35_nswr-133": "4",
        "gpt35_nswr-18": 4,
        "raw_gpt35_nswr-18": "4",
        "gpt35_nswr-4": 4,
        "raw_gpt35_nswr-4": "4",
        "gpt35_nswr-156": 4,
        "raw_gpt35_nswr-156": "4",
        "gpt35_nswr-50": 4,
        "raw_gpt35_nswr-50": "4",
        "gpt35_nswr-43": 4,
        "raw_gpt35_nswr-43": "4",
        "gpt35_nswr-39": 4,
        "raw_gpt35_nswr-39": "4",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-17": 2,
        "raw_gpt35_nswr-17": "2",
        "gpt35_nswr-140": 3,
        "raw_gpt35_nswr-140": "3",
        "gpt35_nswr-192": 4,
        "raw_gpt35_nswr-192": "4",
        "gpt35_nswr-113": 4,
        "raw_gpt35_nswr-113": "4",
        "gpt35_nswr-14": 4,
        "raw_gpt35_nswr-14": "4",
        "gpt35_nswr-123": 4,
        "raw_gpt35_nswr-123": "4",
        "gpt35_nswr-82": 3,
        "raw_gpt35_nswr-82": "3",
        "gpt35_nswr-5": 4,
        "raw_gpt35_nswr-5": "4",
        "gpt35_nswr-38": 4,
        "raw_gpt35_nswr-38": "4",
        "gpt35_nswr-40": 4,
        "raw_gpt35_nswr-40": "4",
        "gpt35_nswr-104": 4,
        "raw_gpt35_nswr-104": "4",
        "gpt35_nswr-126": 4,
        "raw_gpt35_nswr-126": "4"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    // \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    public static String circularShift(int x, int shift) {\n",
        "snippet": [
            "        String s = String.valueOf(x);\n        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n        } else {\n            return s.substring(s.length() - shift) + s.substring(0, s.length() - shift);\n        }\n    }\n}"
        ],
        "simplified": "Circular shift the digits of the integer x, shift the digits right by shift and return the result as a string. If shift > number of digits, return digits reversed.",
        "task_id": "65",
        "169": "String s = Integer.toString(x);\n        int len = s.length();\n        if (shift > len) {\n            StringBuilder sb = new StringBuilder(s);\n            return sb.reverse().toString();\n        }\n        String first = s.substring(0, len - shift);\n        String second = s.substring(len - shift);\n        return second + first;",
        "grade-169": {
            "execution": 1
        },
        "28": "String ans = Integer.toString(x);\n        if (shift >= ans.length()) {\n            return new StringBuilder(ans).reverse().toString();\n        }\n        return ans.substring(shift) + ans.substring(0, shift);",
        "grade-28": {
            "execution": 0
        },
        "6": "String s = String.valueOf(x);\n        while (shift >= s.length()) shift -= s.length();\n        String result = s.substring(shift) + s.substring(0, shift);\n        return result;",
        "grade-6": {
            "execution": 0
        },
        "196": "char[] digits = Integer.toString(x).toCharArray();\n        int numDigits = digits.length;\n        if (shift > numDigits) {\n            shift = numDigits;\n        }\n        char[] shifted = new char[numDigits];\n        for (int i = 0; i < numDigits; i++) {\n            shifted[i] = digits[(numDigits - shift + i) % numDigits];\n        }\n        return new String(shifted);",
        "grade-196": {
            "execution": 0
        },
        "72": "if (shift == 0) return Integer.toString(x);\n        else if (shift > Integer.toString(x).length()) return new StringBuilder(Integer.toString(x)).reverse().toString();\n        else {\n            StringBuilder str = new StringBuilder(Integer.toString(x));\n            return str.substring(str.length() - shift) + str.substring(0, str.length() - shift);\n        }",
        "grade-72": {
            "execution": 1
        },
        "62": "final String s = String.valueOf(x);\n        final int length = s.length();\n        final StringBuilder sb = new StringBuilder();\n        if (shift > length) {\n            for (int i = 0; i < length; i++) {\n                sb.append(s.charAt(length - i - 1));\n            }\n        } else {\n            sb.append(s.substring(length - shift, length));\n            sb.append(s.substring(0, length - shift));\n        }\n        return sb.toString();",
        "grade-62": {
            "execution": 1
        },
        "57": "String s = \"\" + x;\n        String s_shifted = s.substring(shift, s.length()) + s.substring(0, shift);\n        return s_shifted;",
        "grade-57": {
            "execution": 0
        },
        "35": "String s = Integer.toString(x);\n        StringBuilder sb = new StringBuilder();\n        if (shift <= s.length()) {\n            String res = s.substring(s.length() - shift, s.length()) + s.substring(0, s.length() - shift);\n            sb.append(res);\n        } else {\n            for (int i = s.length() - 1; i >= 0; i--) {\n                sb.append(s.charAt(i));\n            }\n        }\n        return sb.toString();",
        "grade-35": {
            "execution": 1
        },
        "195": "String s = String.valueOf(x);\n        String s1 = s.substring(shift) + s.substring(0, shift);\n        return s1;",
        "grade-195": {
            "execution": 0
        },
        "26": "String str = String.valueOf(x);\n        shift = shift % str.length();\n        if (shift == 0) {\n            return str;\n        }\n        return str.substring(str.length() - shift) + str.substring(0, str.length() - shift);",
        "grade-26": {
            "execution": 0
        },
        "180": "String s = Integer.toString(x);\n        if (shift >= s.length()) {\n            StringBuilder sb = new StringBuilder(s);\n            return sb.reverse().toString();\n        }\n        int i = shift;\n        StringBuilder sb = new StringBuilder();\n        while (i < s.length()) {\n            sb.append(s.charAt(i));\n            i++;\n        }\n        while (i < s.length() + shift) {\n            sb.append(s.charAt(i - s.length()));\n            i++;\n        }\n        return sb.toString();",
        "grade-180": {
            "execution": 0
        },
        "145": "StringBuilder sb = new StringBuilder();\n        String s = Integer.toString(x);\n        if (shift > s.length())\n            shift %= s.length();\n        for (int i = s.length() - shift; i < s.length(); i++)\n            sb.append(s.charAt(i));\n        for (int i = 0; i < s.length() - shift; i++)\n            sb.append(s.charAt(i));\n        return sb.toString();",
        "grade-145": {
            "execution": 0
        },
        "22": "String str = Integer.toString(x);\n        // if shift > number of digits in x, rotate the digits the other way.\n        if (shift > str.length()) {\n            shift = shift % str.length();\n            str = new StringBuilder(str).reverse().toString();\n        }\n        StringBuilder sb = new StringBuilder(str);\n        String sub = sb.substring(0, shift);\n        String end = sb.substring(shift);\n        sb = new StringBuilder(end);\n        sb.append(sub);\n        return sb.toString();",
        "grade-22": {
            "execution": 0
        },
        "157": "int l = (int)Math.floor(Math.log10(x) + 1);\n        int[] arr = new int[l];\n        for (int i = 0; i < l; i++) {\n            arr[i] = x % 10;\n            x /= 10;\n        }\n        int s = shift % l;\n        int[] arr_rev = new int[l];\n        for (int i = 0; i < l; i++) {\n            arr_rev[i] = arr[(i + s) % l];\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < l; i++) {\n            sb.append(arr_rev[i]);\n        }\n        return sb.toString();",
        "grade-157": {
            "execution": 0
        },
        "113": "List<Character> digits = new ArrayList<>();\n        while (x > 0) {\n            digits.add((char)('0' + x % 10));\n            x /= 10;\n        }\n        Collections.reverse(digits);\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < digits.size(); i++) {\n            int index = (shift + i) % digits.size();\n            result.append(digits.get(index));\n        }\n        return result.toString();",
        "grade-113": {
            "execution": 0
        },
        "8": "int length = 0;\n        int x2 = x;\n        String ans = \"\";\n        while (x2 > 0) {\n            length++;\n            x2 /= 10;\n        }\n        if (shift >= length) {\n            ans = new StringBuilder(Integer.toString(x)).reverse().toString();\n        } else {\n            ans = Integer.toString(x);\n            int i = 0;\n            while (i < shift) {\n                ans = ans.substring(1) + ans.charAt(0);\n                i++;\n            }\n        }\n        return ans;",
        "grade-8": {
            "execution": 0
        },
        "7": "if (shift == 0) return Integer.toString(x);\n        char[] digits = Integer.toString(x).toCharArray();\n        for (int i = 0; i < shift; i++) {\n            char last = digits[digits.length - 1];\n            for (int j = digits.length - 1; j > 0; j--) {\n                digits[j] = digits[j - 1];\n            }\n            digits[0] = last;\n        }\n        return new String(digits);",
        "grade-7": {
            "execution": 0
        },
        "23": "String s = Integer.toString(x);\n        if (shift == 0) return s;\n        int l = s.length();\n        if (shift >= l) return new StringBuilder(s).reverse().toString();\n        return s.substring(l - shift) + s.substring(0, l - shift);",
        "grade-23": {
            "execution": 0
        },
        "55": "String string = Integer.toString(x);\n        int len = string.length();\n        StringBuilder sb = new StringBuilder();\n        if (shift > len) {\n            for (int i = len - 1; i >= 0; i--) {\n                sb.append(string.charAt(i));\n            }\n        } else {\n            for (int i = len - shift; i < len; i++) {\n                sb.append(string.charAt(i));\n            }\n            for (int i = 0; i < len - shift; i++) {\n                sb.append(string.charAt(i));\n            }\n        }\n        return sb.toString();",
        "grade-55": {
            "execution": 1
        },
        "59": "int n = 1;\n        int y = x;\n        while (y >= 10) {\n            y /= 10;\n            n++;\n        }\n        if (shift > n)\n            return new StringBuilder(Integer.toString(x)).reverse().toString();\n        int z = x % 10;\n        for (int i = 0; i < shift; i++) {\n            x /= 10;\n            z *= 10;\n        }\n        return Integer.toString(z + x);",
        "grade-59": {
            "execution": 0
        },
        "bleu-169": 0.44763106041939765,
        "bleu-28": 0.463247269733412,
        "bleu-6": 0.4004823237439081,
        "bleu-196": 0.12403555008410212,
        "bleu-72": 0.39266615895536594,
        "bleu-62": 0.34231881295984407,
        "bleu-57": 0.17545442847386625,
        "bleu-35": 0.40217603624209824,
        "bleu-195": 0.19517744556155547,
        "bleu-26": 0.4436774006581299,
        "bleu-180": 0.2878488465807229,
        "bleu-145": 0.30461201559862255,
        "bleu-22": 0.2550021253651959,
        "bleu-157": 0.08370110518723531,
        "bleu-113": 0.11638514432346456,
        "bleu-8": 0.23348604848358423,
        "bleu-7": 0.09877113514462149,
        "bleu-23": 0.5697828386369493,
        "bleu-55": 0.16371956853966282,
        "bleu-59": 0.2077757797332702,
        "codebleu-169": 0.6235772269518851,
        "codebleu-28": 0.5490408471182671,
        "codebleu-6": 0.4479350620405969,
        "codebleu-196": 0.4473024679578148,
        "codebleu-72": 0.6947742288902428,
        "codebleu-62": 0.6719055846669686,
        "codebleu-57": 0.2785905499751331,
        "codebleu-35": 0.7433406342289437,
        "codebleu-195": 0.2892603202756727,
        "codebleu-26": 0.5855120939088652,
        "codebleu-180": 0.6549734341859139,
        "codebleu-145": 0.6641696630060309,
        "codebleu-22": 0.6292350710364429,
        "codebleu-157": 0.48913043478260865,
        "codebleu-113": 0.5450080515297906,
        "codebleu-8": 0.5957601975522112,
        "codebleu-7": 0.49332686126748654,
        "codebleu-23": 0.6161570635329231,
        "codebleu-55": 0.6497630042493238,
        "codebleu-59": 0.49551946515560547,
        "chrf-169": 0.6049507286471673,
        "chrf-28": 0.6681623492198376,
        "chrf-6": 0.5593749587360926,
        "chrf-196": 0.3123266956576265,
        "chrf-72": 0.651764968151264,
        "chrf-62": 0.6025076685653418,
        "chrf-57": 0.38644630645073363,
        "chrf-35": 0.6593099102783414,
        "chrf-195": 0.44053254914528567,
        "chrf-26": 0.5991119152501319,
        "chrf-180": 0.5575992362358468,
        "chrf-145": 0.5402158898849061,
        "chrf-22": 0.532156584982381,
        "chrf-157": 0.28629846796294384,
        "chrf-113": 0.3385042090550747,
        "chrf-8": 0.5215860878741557,
        "chrf-7": 0.34975300444721996,
        "chrf-23": 0.6847402543969869,
        "chrf-55": 0.4425824205761391,
        "chrf-59": 0.4198802827113728,
        "rougel-169": 0.6025641025641024,
        "rougel-28": 0.7424242424242424,
        "rougel-6": 0.6456692913385828,
        "rougel-196": 0.26744186046511625,
        "rougel-72": 0.659217877094972,
        "rougel-62": 0.5208333333333334,
        "rougel-57": 0.4727272727272727,
        "rougel-35": 0.51,
        "rougel-195": 0.5233644859813085,
        "rougel-26": 0.6617647058823529,
        "rougel-180": 0.5523809523809523,
        "rougel-145": 0.4742268041237113,
        "rougel-22": 0.46,
        "rougel-157": 0.2413793103448276,
        "rougel-113": 0.34374999999999994,
        "rougel-8": 0.4631578947368421,
        "rougel-7": 0.3027027027027027,
        "rougel-23": 0.7114093959731544,
        "rougel-55": 0.3818181818181817,
        "rougel-59": 0.36363636363636365,
        "meteor-169": 0.5487351504807612,
        "meteor-28": 0.5002182320441989,
        "meteor-6": 0.43743196140043616,
        "meteor-196": 0.3345083827645719,
        "meteor-72": 0.7285480696199333,
        "meteor-62": 0.7126595124502229,
        "meteor-57": 0.2960286729608965,
        "meteor-35": 0.4899896889499914,
        "meteor-195": 0.3049992052137975,
        "meteor-26": 0.6026233838592371,
        "meteor-180": 0.49174401274919205,
        "meteor-145": 0.46936846197342386,
        "meteor-22": 0.47022964015151525,
        "meteor-157": 0.3457934920256208,
        "meteor-113": 0.3921667951034579,
        "meteor-8": 0.49737318348592807,
        "meteor-7": 0.3264947487169709,
        "meteor-23": 0.5999440772424064,
        "meteor-55": 0.4714746255630466,
        "meteor-59": 0.36435506687242797,
        "ruby-169": 0.4878048780487805,
        "ruby-28": 0.6486486486486487,
        "ruby-6": 0.5405405405405406,
        "ruby-196": 0.173469387755102,
        "ruby-72": 0.5238095238095238,
        "ruby-62": 0.3813559322033898,
        "ruby-57": 0.33783783783783783,
        "ruby-35": 0.3650793650793651,
        "ruby-195": 0.3783783783783784,
        "ruby-26": 0.5945945945945945,
        "ruby-180": 0.4191176470588235,
        "ruby-145": 0.33333333333333337,
        "ruby-22": 0.3571428571428571,
        "ruby-157": 0.14556962025316456,
        "ruby-113": 0.2457627118644068,
        "ruby-8": 0.35344827586206895,
        "ruby-7": 0.18018018018018023,
        "ruby-23": 0.5066666666666666,
        "ruby-55": 0.2534246575342466,
        "ruby-59": 0.2450980392156863,
        "codebertscore_f1-169": 0.8790675401687622,
        "codebertscore_f3-169": 0.8934836387634277,
        "codebertscore_f1-28": 0.9214428067207336,
        "codebertscore_f3-28": 0.9071354269981384,
        "codebertscore_f1-6": 0.8819679021835327,
        "codebertscore_f3-6": 0.8655837178230286,
        "codebertscore_f1-196": 0.7420981526374817,
        "codebertscore_f3-196": 0.7504673004150391,
        "codebertscore_f1-72": 0.8885206580162048,
        "codebertscore_f3-72": 0.9023279547691345,
        "codebertscore_f1-62": 0.828503429889679,
        "codebertscore_f3-62": 0.8577752709388733,
        "codebertscore_f1-57": 0.8337352871894836,
        "codebertscore_f3-57": 0.8156154155731201,
        "codebertscore_f1-35": 0.8619983196258545,
        "codebertscore_f3-35": 0.8949453830718994,
        "codebertscore_f1-195": 0.8559473752975464,
        "codebertscore_f3-195": 0.826779305934906,
        "codebertscore_f1-26": 0.9231094121932983,
        "codebertscore_f3-26": 0.9071452021598816,
        "codebertscore_f1-180": 0.8093280792236328,
        "codebertscore_f3-180": 0.8324208855628967,
        "codebertscore_f1-145": 0.8078365921974182,
        "codebertscore_f3-145": 0.8252148628234863,
        "codebertscore_f1-22": 0.811244547367096,
        "codebertscore_f3-22": 0.8354275822639465,
        "codebertscore_f1-157": 0.686220109462738,
        "codebertscore_f3-157": 0.7013984322547913,
        "codebertscore_f1-113": 0.7146927714347839,
        "codebertscore_f3-113": 0.7238829135894775,
        "codebertscore_f1-8": 0.7592570781707764,
        "codebertscore_f3-8": 0.781635046005249,
        "codebertscore_f1-7": 0.7520161867141724,
        "codebertscore_f3-7": 0.7577137351036072,
        "codebertscore_f1-23": 0.9216852188110352,
        "codebertscore_f3-23": 0.928505003452301,
        "codebertscore_f1-55": 0.7592446804046631,
        "codebertscore_f3-55": 0.7889828681945801,
        "codebertscore_f1-59": 0.7425143122673035,
        "codebertscore_f3-59": 0.7563863396644592,
        "codebertscore_s_f1-169": 0.8894793391227722,
        "codebertscore_s_f3-169": 0.9036200046539307,
        "codebertscore_s_f1-28": 0.9262352585792542,
        "codebertscore_s_f3-28": 0.9129794836044312,
        "codebertscore_s_f1-6": 0.8932611346244812,
        "codebertscore_s_f3-6": 0.8773937821388245,
        "codebertscore_s_f1-196": 0.7613978385925293,
        "codebertscore_s_f3-196": 0.771319568157196,
        "codebertscore_s_f1-72": 0.8991879820823669,
        "codebertscore_s_f3-72": 0.912839949131012,
        "codebertscore_s_f1-62": 0.849381148815155,
        "codebertscore_s_f3-62": 0.8805822730064392,
        "codebertscore_s_f1-57": 0.8572746515274048,
        "codebertscore_s_f3-57": 0.840961217880249,
        "codebertscore_s_f1-35": 0.8772911429405212,
        "codebertscore_s_f3-35": 0.9115037322044373,
        "codebertscore_s_f1-195": 0.8755746483802795,
        "codebertscore_s_f3-195": 0.8472105860710144,
        "codebertscore_s_f1-26": 0.9303783178329468,
        "codebertscore_s_f3-26": 0.9160257577896118,
        "codebertscore_s_f1-180": 0.8234656453132629,
        "codebertscore_s_f3-180": 0.8482815623283386,
        "codebertscore_s_f1-145": 0.827523410320282,
        "codebertscore_s_f3-145": 0.8455971479415894,
        "codebertscore_s_f1-22": 0.8279894590377808,
        "codebertscore_s_f3-22": 0.8517423272132874,
        "codebertscore_s_f1-157": 0.7054650187492371,
        "codebertscore_s_f3-157": 0.7267866730690002,
        "codebertscore_s_f1-113": 0.7358563542366028,
        "codebertscore_s_f3-113": 0.7462859749794006,
        "codebertscore_s_f1-8": 0.781171977519989,
        "codebertscore_s_f3-8": 0.8043926954269409,
        "codebertscore_s_f1-7": 0.7715414762496948,
        "codebertscore_s_f3-7": 0.7809655070304871,
        "codebertscore_s_f1-23": 0.9256159663200378,
        "codebertscore_s_f3-23": 0.9326847195625305,
        "codebertscore_s_f1-55": 0.7759839296340942,
        "codebertscore_s_f3-55": 0.8101655840873718,
        "codebertscore_s_f1-59": 0.7585030794143677,
        "codebertscore_s_f3-59": 0.770968496799469,
        "gpt35_nsnr-169": 4,
        "raw_gpt35_nsnr-169": "4",
        "gpt35_nsnr-28": 3,
        "raw_gpt35_nsnr-28": "3",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-196": 4,
        "raw_gpt35_nsnr-196": "4",
        "gpt35_nsnr-72": 4,
        "raw_gpt35_nsnr-72": "4",
        "gpt35_nsnr-62": 3,
        "raw_gpt35_nsnr-62": "3",
        "gpt35_nsnr-57": 3,
        "raw_gpt35_nsnr-57": "3",
        "gpt35_nsnr-35": 3,
        "raw_gpt35_nsnr-35": "3",
        "gpt35_nsnr-195": 3,
        "raw_gpt35_nsnr-195": "3",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-180": 4,
        "raw_gpt35_nsnr-180": "4",
        "gpt35_nsnr-145": 4,
        "raw_gpt35_nsnr-145": "4",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-157": 4,
        "raw_gpt35_nsnr-157": "4",
        "gpt35_nsnr-113": 3,
        "raw_gpt35_nsnr-113": "3",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-55": 4,
        "raw_gpt35_nsnr-55": "4",
        "gpt35_nsnr-59": 3,
        "raw_gpt35_nsnr-59": "3",
        "gpt35_nswr-169": 4,
        "raw_gpt35_nswr-169": "4",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-196": 3,
        "raw_gpt35_nswr-196": "3",
        "gpt35_nswr-72": 4,
        "raw_gpt35_nswr-72": "4",
        "gpt35_nswr-62": 3,
        "raw_gpt35_nswr-62": "3",
        "gpt35_nswr-57": 3,
        "raw_gpt35_nswr-57": "3",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-195": 3,
        "raw_gpt35_nswr-195": "3",
        "gpt35_nswr-26": 4,
        "raw_gpt35_nswr-26": "4",
        "gpt35_nswr-180": 3,
        "raw_gpt35_nswr-180": "3",
        "gpt35_nswr-145": 3,
        "raw_gpt35_nswr-145": "3",
        "gpt35_nswr-22": 4,
        "raw_gpt35_nswr-22": "4",
        "gpt35_nswr-157": 3,
        "raw_gpt35_nswr-157": "3",
        "gpt35_nswr-113": 3,
        "raw_gpt35_nswr-113": "3",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-55": 3,
        "raw_gpt35_nswr-55": "3",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return maximum element in the list.\n    // >>> max_element([1, 2, 3])\n    // 3\n    // >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    // 123\n    public static int maxElement(ArrayList<Integer> l) {\n",
        "snippet": [
            "        return Collections.max(l);\n    }\n}"
        ],
        "simplified": "Return maximum element in the list.",
        "task_id": "35",
        "139": "int m = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > m) {\n                m = l.get(i);\n            }\n        }\n        return m;",
        "grade-139": {
            "execution": 1
        },
        "19": "// Write your code here\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;",
        "grade-19": {
            "execution": 1
        },
        "4": "int max = Integer.MIN_VALUE;\n        for (int i : l) {\n            if (i > max) {\n                max = i;\n            }\n        }\n        return max;",
        "grade-4": {
            "execution": 1
        },
        "174": "int maximum = 0;\n        for (int i : l) {\n            if (i > maximum)\n                maximum = i;\n        }\n        return maximum;",
        "grade-174": {
            "execution": 1
        },
        "52": "int result = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > result) {\n                result = l.get(i);\n            }\n        }\n        return result;",
        "grade-52": {
            "execution": 1
        },
        "45": "int max = Integer.MIN_VALUE;\n        for (int i = 0; i < l.size(); i++) {\n            max = Math.max(max, l.get(i));\n        }\n        return max;",
        "grade-45": {
            "execution": 1
        },
        "40": "int m = Integer.MIN_VALUE;\n        for (int i = 0; i < l.size(); i++) {\n            m = Math.max(m, l.get(i));\n        }\n        return m;",
        "grade-40": {
            "execution": 1
        },
        "24": "return Collections.max(l);",
        "grade-24": {
            "execution": 1
        },
        "18": "//YOUR CODE GOES HERE\n        int max=-9999;\n        for(int i=0;i<l.size();i++)\n        {\n            if(l.get(i)>max)\n            {\n                max=l.get(i);\n            }\n        }\n        return max;",
        "grade-18": {
            "execution": 1
        },
        "158": "// >>> YOUR CODE HERE <<<",
        "grade-158": {
            "execution": 0
        },
        "122": "// Write your code here.\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            max = Math.max(max, l.get(i));\n        }\n        return max;",
        "grade-122": {
            "execution": 1
        },
        "15": "int max = l.get(0);\n        for (int i : l) {\n            if (i > max) {\n                max = i;\n            }\n        }\n        return max;",
        "grade-15": {
            "execution": 1
        },
        "132": "return -1;",
        "grade-132": {
            "execution": 0
        },
        "95": "int x = 0;\n        for (int i : l) x = Math.max(x, i);\n        return x;",
        "grade-95": {
            "execution": 1
        },
        "5": "// INSERT YOUR CODE HERE\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            max = Math.max(max, l.get(i));\n        }\n        return max;",
        "grade-5": {
            "execution": 1
        },
        "38": "int m = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) > m) {\n                m = l.get(i);\n            }\n        }\n        return m;",
        "grade-38": {
            "execution": 1
        },
        "42": "// Your code here\n        if (l.size()==0) return 0;\n        int max=0;\n        for (int i=0;i<l.size();i++){\n            if (l.get(i)>max) max=l.get(i);\n        }\n        return max;",
        "grade-42": {
            "execution": 1
        },
        "114": "// Replace with your implementation.\n        int result = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            result = Math.max(result, l.get(i));\n        }\n        return result;",
        "grade-114": {
            "execution": 1
        },
        "135": "int m = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            m = Math.max(m, l.get(i));\n        }\n        return m;",
        "grade-135": {
            "execution": 1
        },
        "127": "// Your code here.\n        return 0;",
        "grade-127": {
            "execution": 0
        },
        "bleu-139": 0.05190867065185466,
        "bleu-19": 0.048156168730579714,
        "bleu-4": 0.06502400235712175,
        "bleu-174": 0.043441091034192414,
        "bleu-52": 0.05190867065185466,
        "bleu-45": 0.05228863137997911,
        "bleu-40": 0.05228863137997911,
        "bleu-24": 0.7788007830714052,
        "bleu-18": 0.051566746658906364,
        "bleu-158": 0.0,
        "bleu-122": 0.0428630096082115,
        "bleu-15": 0.06341499959382102,
        "bleu-132": 0.04238556455648295,
        "bleu-95": 0.0790348985795788,
        "bleu-5": 0.043649815071730276,
        "bleu-38": 0.05715452490398436,
        "bleu-42": 0.027992072842037898,
        "bleu-114": 0.0428630096082115,
        "bleu-135": 0.04905250601044088,
        "bleu-127": 0.0561480827173619,
        "codebleu-139": 0.6428571428571429,
        "codebleu-19": 0.6547619047619048,
        "codebleu-4": 0.613095238095238,
        "codebleu-174": 0.4107142857142857,
        "codebleu-52": 0.6428571428571429,
        "codebleu-45": 0.6011904761904762,
        "codebleu-40": 0.6011904761904762,
        "codebleu-24": 0.7565926205999447,
        "codebleu-18": 0.6547619047619048,
        "codebleu-158": 0.125,
        "codebleu-122": 0.6011904761904762,
        "codebleu-15": 0.613095238095238,
        "codebleu-132": 0.10961043627415064,
        "codebleu-95": 0.46428571428571425,
        "codebleu-5": 0.6011904761904762,
        "codebleu-38": 0.6428571428571429,
        "codebleu-42": 0.6011904761904762,
        "codebleu-114": 0.6011904761904762,
        "codebleu-135": 0.6011904761904762,
        "codebleu-127": 0.3333333333333333,
        "chrf-139": 0.20894935509613918,
        "chrf-19": 0.20952429392203736,
        "chrf-4": 0.21879343528573966,
        "chrf-174": 0.19661869431000445,
        "chrf-52": 0.18392812651561966,
        "chrf-45": 0.22158108086024156,
        "chrf-40": 0.2312279429868342,
        "chrf-24": 0.9332791964327363,
        "chrf-18": 0.209649945231042,
        "chrf-158": 0.006510416666666666,
        "chrf-122": 0.22152550422665485,
        "chrf-15": 0.24153983725092062,
        "chrf-132": 0.16926695681999857,
        "chrf-95": 0.26741747098103036,
        "chrf-5": 0.21753711882387367,
        "chrf-38": 0.21743302067983664,
        "chrf-42": 0.18515660830549074,
        "chrf-114": 0.22038102651660219,
        "chrf-135": 0.24774228025939507,
        "chrf-127": 0.18138486638059606,
        "rougel-139": 0.21212121212121213,
        "rougel-19": 0.19444444444444445,
        "rougel-4": 0.3414634146341463,
        "rougel-174": 0.2702702702702703,
        "rougel-52": 0.21212121212121213,
        "rougel-45": 0.24561403508771928,
        "rougel-40": 0.24561403508771928,
        "rougel-24": 0.888888888888889,
        "rougel-18": 0.2058823529411765,
        "rougel-158": 0.0,
        "rougel-122": 0.208955223880597,
        "rougel-15": 0.3181818181818182,
        "rougel-132": 0.28571428571428575,
        "rougel-95": 0.2777777777777778,
        "rougel-5": 0.21212121212121213,
        "rougel-38": 0.2295081967213115,
        "rougel-42": 0.1794871794871795,
        "rougel-114": 0.208955223880597,
        "rougel-135": 0.23333333333333336,
        "rougel-127": 0.2105263157894737,
        "meteor-139": 0.36440496575342474,
        "meteor-19": 0.3841780376868097,
        "meteor-4": 0.4826038159371494,
        "meteor-174": 0.25641025641025644,
        "meteor-52": 0.36440496575342474,
        "meteor-45": 0.29197080291970806,
        "meteor-40": 0.29197080291970806,
        "meteor-24": 0.8155293367346939,
        "meteor-18": 0.39456122789456133,
        "meteor-158": 0.0,
        "meteor-122": 0.272108843537415,
        "meteor-15": 0.47092791716447635,
        "meteor-132": 0.10638297872340426,
        "meteor-95": 0.4934904996481351,
        "meteor-5": 0.27397260273972607,
        "meteor-38": 0.3773271276595745,
        "meteor-42": 0.25316455696202533,
        "meteor-114": 0.272108843537415,
        "meteor-135": 0.2857142857142857,
        "meteor-127": 0.15151515151515152,
        "ruby-139": 0.125,
        "ruby-19": 0.11290322580645162,
        "ruby-4": 0.22580645161290325,
        "ruby-174": 0.18518518518518523,
        "ruby-52": 0.125,
        "ruby-45": 0.14893617021276595,
        "ruby-40": 0.14893617021276595,
        "ruby-24": 0.8,
        "ruby-18": 0.12068965517241381,
        "ruby-158": 0.0,
        "ruby-122": 0.1228070175438597,
        "ruby-15": 0.20588235294117652,
        "ruby-132": 0.19999999999999996,
        "ruby-95": 0.1923076923076923,
        "ruby-5": 0.125,
        "ruby-38": 0.13725490196078427,
        "ruby-42": 0.1029411764705882,
        "ruby-114": 0.1228070175438597,
        "ruby-135": 0.14,
        "ruby-127": 0.0,
        "codebertscore_f1-139": 0.6907323598861694,
        "codebertscore_f3-139": 0.707381010055542,
        "codebertscore_f1-19": 0.6822004914283752,
        "codebertscore_f3-19": 0.7190503478050232,
        "codebertscore_f1-4": 0.693709135055542,
        "codebertscore_f3-4": 0.709174633026123,
        "codebertscore_f1-174": 0.6900796890258789,
        "codebertscore_f3-174": 0.6995794177055359,
        "codebertscore_f1-52": 0.6892160773277283,
        "codebertscore_f3-52": 0.7092069983482361,
        "codebertscore_f1-45": 0.719954788684845,
        "codebertscore_f3-45": 0.7618290185928345,
        "codebertscore_f1-40": 0.7233415842056274,
        "codebertscore_f3-40": 0.7642011642456055,
        "codebertscore_f1-24": 0.9038808345794678,
        "codebertscore_f3-24": 0.9038808345794678,
        "codebertscore_f1-18": 0.6590563058853149,
        "codebertscore_f3-18": 0.7011044025421143,
        "codebertscore_f1-158": 0.6130169630050659,
        "codebertscore_f3-158": 0.6149600148200989,
        "codebertscore_f1-122": 0.7019187211990356,
        "codebertscore_f3-122": 0.7452367544174194,
        "codebertscore_f1-15": 0.7134978175163269,
        "codebertscore_f3-15": 0.7316907048225403,
        "codebertscore_f1-132": 0.731408417224884,
        "codebertscore_f3-132": 0.7183699011802673,
        "codebertscore_f1-95": 0.77390056848526,
        "codebertscore_f3-95": 0.8072592616081238,
        "codebertscore_f1-5": 0.695590078830719,
        "codebertscore_f3-5": 0.7465377449989319,
        "codebertscore_f1-38": 0.6803189516067505,
        "codebertscore_f3-38": 0.6924877762794495,
        "codebertscore_f1-42": 0.6835352182388306,
        "codebertscore_f3-42": 0.7178112268447876,
        "codebertscore_f1-114": 0.7068583369255066,
        "codebertscore_f3-114": 0.7538532018661499,
        "codebertscore_f1-135": 0.7373178005218506,
        "codebertscore_f3-135": 0.775278627872467,
        "codebertscore_f1-127": 0.6759800314903259,
        "codebertscore_f3-127": 0.6830226182937622,
        "codebertscore_s_f1-139": 0.6986664533615112,
        "codebertscore_s_f3-139": 0.726069986820221,
        "codebertscore_s_f1-19": 0.6961675882339478,
        "codebertscore_s_f3-19": 0.7470768690109253,
        "codebertscore_s_f1-4": 0.7245997190475464,
        "codebertscore_s_f3-4": 0.7519713640213013,
        "codebertscore_s_f1-174": 0.7176617980003357,
        "codebertscore_s_f3-174": 0.7427274584770203,
        "codebertscore_s_f1-52": 0.6994608640670776,
        "codebertscore_s_f3-52": 0.7273276448249817,
        "codebertscore_s_f1-45": 0.7356984615325928,
        "codebertscore_s_f3-45": 0.7839025855064392,
        "codebertscore_s_f1-40": 0.7320810556411743,
        "codebertscore_s_f3-40": 0.7868050932884216,
        "codebertscore_s_f1-24": 0.9951894879341125,
        "codebertscore_s_f3-24": 0.9951894879341125,
        "codebertscore_s_f1-18": 0.6763079166412354,
        "codebertscore_s_f3-18": 0.723516583442688,
        "codebertscore_s_f1-158": 0.5525333881378174,
        "codebertscore_s_f3-158": 0.5749130845069885,
        "codebertscore_s_f1-122": 0.7146276235580444,
        "codebertscore_s_f3-122": 0.7768178582191467,
        "codebertscore_s_f1-15": 0.7372029423713684,
        "codebertscore_s_f3-15": 0.7626980543136597,
        "codebertscore_s_f1-132": 0.7114585638046265,
        "codebertscore_s_f3-132": 0.6983240842819214,
        "codebertscore_s_f1-95": 0.7768992185592651,
        "codebertscore_s_f3-95": 0.8294272422790527,
        "codebertscore_s_f1-5": 0.7096922993659973,
        "codebertscore_s_f3-5": 0.7755387425422668,
        "codebertscore_s_f1-38": 0.6852916479110718,
        "codebertscore_s_f3-38": 0.7076472043991089,
        "codebertscore_s_f1-42": 0.6911563873291016,
        "codebertscore_s_f3-42": 0.7336671948432922,
        "codebertscore_s_f1-114": 0.715289831161499,
        "codebertscore_s_f3-114": 0.7806248068809509,
        "codebertscore_s_f1-135": 0.7430043816566467,
        "codebertscore_s_f3-135": 0.7955477237701416,
        "codebertscore_s_f1-127": 0.6471720933914185,
        "codebertscore_s_f3-127": 0.6604098081588745,
        "gpt35_nsnr-139": 4,
        "raw_gpt35_nsnr-139": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-174": 4,
        "raw_gpt35_nsnr-174": "4",
        "gpt35_nsnr-52": 4,
        "raw_gpt35_nsnr-52": "4",
        "gpt35_nsnr-45": 4,
        "raw_gpt35_nsnr-45": "4",
        "gpt35_nsnr-40": 4,
        "raw_gpt35_nsnr-40": "4",
        "gpt35_nsnr-24": 4,
        "raw_gpt35_nsnr-24": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-158": 4,
        "raw_gpt35_nsnr-158": "4",
        "gpt35_nsnr-122": 4,
        "raw_gpt35_nsnr-122": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-132": 0,
        "raw_gpt35_nsnr-132": "0",
        "gpt35_nsnr-95": 4,
        "raw_gpt35_nsnr-95": "4",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-38": 4,
        "raw_gpt35_nsnr-38": "4",
        "gpt35_nsnr-42": 4,
        "raw_gpt35_nsnr-42": "4",
        "gpt35_nsnr-114": 4,
        "raw_gpt35_nsnr-114": "4",
        "gpt35_nsnr-135": 4,
        "raw_gpt35_nsnr-135": "4",
        "gpt35_nsnr-127": 0,
        "raw_gpt35_nsnr-127": "0",
        "gpt35_nswr-139": 4,
        "raw_gpt35_nswr-139": "4",
        "gpt35_nswr-19": 4,
        "raw_gpt35_nswr-19": "4",
        "gpt35_nswr-4": 4,
        "raw_gpt35_nswr-4": "4",
        "gpt35_nswr-174": 3,
        "raw_gpt35_nswr-174": "3",
        "gpt35_nswr-52": 4,
        "raw_gpt35_nswr-52": "4",
        "gpt35_nswr-45": 3,
        "raw_gpt35_nswr-45": "3",
        "gpt35_nswr-40": 4,
        "raw_gpt35_nswr-40": "4",
        "gpt35_nswr-24": 4,
        "raw_gpt35_nswr-24": "4",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-158": 4,
        "raw_gpt35_nswr-158": "4",
        "gpt35_nswr-122": 4,
        "raw_gpt35_nswr-122": "4",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-132": 0,
        "raw_gpt35_nswr-132": "0",
        "gpt35_nswr-95": 4,
        "raw_gpt35_nswr-95": "4",
        "gpt35_nswr-5": 4,
        "raw_gpt35_nswr-5": "4",
        "gpt35_nswr-38": 4,
        "raw_gpt35_nswr-38": "4",
        "gpt35_nswr-42": 4,
        "raw_gpt35_nswr-42": "4",
        "gpt35_nswr-114": 3,
        "raw_gpt35_nswr-114": "3",
        "gpt35_nswr-135": 4,
        "raw_gpt35_nswr-135": "4",
        "gpt35_nswr-127": 2,
        "raw_gpt35_nswr-127": "2"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    // Examples\n    // solution([5, 8, 7, 1]) ==> 12\n    // solution([3, 3, 3, 3, 3]) ==> 9\n    // solution([30, 13, 24, 321]) ==>0\n    public static int solution(ArrayList<Integer> lst) {\n",
        "snippet": [
            "        int sum = 0;\n        for (int i = 0; i < lst.size(); i += 2) {\n            if ((lst.get(i) % 2) == 1) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"
        ],
        "simplified": "Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.",
        "task_id": "121",
        "147": "int i = 0;\n        int sum = 0;\n        while (i < lst.size()) {\n            if (i % 2 == 0 && lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n            i++;\n        }\n        return sum;",
        "grade-147": {
            "execution": 1
        },
        "20": "return 0;",
        "grade-20": {
            "execution": 0
        },
        "3": "int oddSum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 != 0) {\n                oddSum += lst.get(i);\n            }\n        }\n        return oddSum;",
        "grade-3": {
            "execution": 1
        },
        "182": "// Write your code here\n        int result = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 != 0)\n                result += lst.get(i);\n        }\n        return result;",
        "grade-182": {
            "execution": 1
        },
        "55": "return 1;",
        "grade-55": {
            "execution": 0
        },
        "50": "int count = 1;\n        int sum = 0;\n        for (int i : lst) {\n            if (count % 2 == 0 && i % 2 != 0) {\n                sum += i;\n            }\n            count++;\n        }\n        return sum;",
        "grade-50": {
            "execution": 0
        },
        "45": "if (lst.size() == 0) {\n            return 0;\n        }\n        int count = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 != 0) {\n                count += lst.get(i);\n            }\n        }\n        return count;",
        "grade-45": {
            "execution": 1
        },
        "25": "int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 != 0)\n                sum += lst.get(i);\n        }\n        return sum;",
        "grade-25": {
            "execution": 1
        },
        "18": "int sum = 0;\n        int i = 0;\n        while (i < lst.size()) {\n            if (i % 2 == 0 && lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n            i++;\n        }\n        return sum;",
        "grade-18": {
            "execution": 1
        },
        "158": "ArrayList<Integer> results = new ArrayList<Integer>();\n        for (int i = 0; i < lst.size(); i+=2) {\n            if (i % 2 == 0) {\n                results.add(lst.get(i));\n            }\n        }\n        return results.stream().mapToInt(Integer::intValue).sum();",
        "grade-158": {
            "execution": 0
        },
        "127": "int ret = 0;\n        for (int i = 0; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 1) {\n                ret += lst.get(i);\n            }\n        }\n        return ret;",
        "grade-127": {
            "execution": 1
        },
        "15": "int sum = 0;\n        int count = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (count % 2 == 0 && lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n            count++;\n        }\n        return sum;",
        "grade-15": {
            "execution": 1
        },
        "141": "return IntStream.range(0, lst.size())\n                .filter(x -> x % 2 == 0)\n                .filter(x -> lst.get(x) % 2 != 0)\n                .map(x -> lst.get(x))\n                .sum();",
        "grade-141": {
            "execution": 1
        },
        "98": "return lst.stream().filter(a -> a % 2 == 1).filter(a -> lst.indexOf(a) % 2 == 0).mapToInt(Integer::intValue).sum();",
        "grade-98": {
            "execution": 0
        },
        "4": "int sum = 0;\n        for (int i = 0; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;",
        "grade-4": {
            "execution": 1
        },
        "40": "int res = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 != 0)\n                res += lst.get(i);\n        }\n        return res;",
        "grade-40": {
            "execution": 1
        },
        "47": "// Your code here\n        return IntStream.range(0, lst.size())\n                .filter(x -> x % 2 == 0)\n                .filter(x -> lst.get(x) % 2 != 0)\n                .map(lst::get)\n                .sum();",
        "grade-47": {
            "execution": 1
        },
        "115": "if (lst.size() == 0) return 0;\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 != 0) sum += lst.get(i);\n        }\n        return sum;",
        "grade-115": {
            "execution": 1
        },
        "143": "int index = 0;\n        int sum = 0;\n        for (int i : lst) {\n            if (index % 2 == 0 && i % 2 != 0) {\n                sum += i;\n            }\n            index++;\n        }\n        return sum;",
        "grade-143": {
            "execution": 1
        },
        "132": "// Instantiate a new ArrayList\n        ArrayList<Integer> temp = new ArrayList<Integer>();\n        // Iterate through the elements of the original list and add the element if it is in an even position and if it is odd.\n        for (int i = 0; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 != 0) {\n                temp.add(lst.get(i));\n            }\n        }\n        // Return the sum of the elements in the new list.\n        return temp.stream().mapToInt(Integer::intValue).sum();",
        "grade-132": {
            "execution": 1
        },
        "bleu-147": 0.5968702437715839,
        "bleu-20": 3.529540584964605e-09,
        "bleu-3": 0.6175637907926894,
        "bleu-182": 0.5770713650385291,
        "bleu-55": 2.223471239727585e-09,
        "bleu-50": 0.32126674993146637,
        "bleu-45": 0.5374903750943103,
        "bleu-25": 0.7088718072009577,
        "bleu-18": 0.5968702437715839,
        "bleu-158": 0.4343531348037451,
        "bleu-127": 0.7860158846124636,
        "bleu-15": 0.6302866044472115,
        "bleu-141": 0.18949152212556475,
        "bleu-98": 0.10034126729251046,
        "bleu-4": 0.8438753495012236,
        "bleu-40": 0.6352830516627279,
        "bleu-47": 0.16016624579991112,
        "bleu-115": 0.5928485273135639,
        "bleu-143": 0.32474040879161875,
        "bleu-132": 0.2872552490935992,
        "codebleu-147": 0.7326046090543183,
        "codebleu-20": 0.023255826079948857,
        "codebleu-3": 0.7161440356528649,
        "codebleu-182": 0.6917926026440271,
        "codebleu-55": 0.023255826079948857,
        "codebleu-50": 0.44780255720368656,
        "codebleu-45": 0.7388822634415086,
        "codebleu-25": 0.7126210386766365,
        "codebleu-18": 0.7326046090543183,
        "codebleu-158": 0.6843937539123136,
        "codebleu-127": 0.7952795133831755,
        "codebleu-15": 0.7589695591609563,
        "codebleu-141": 0.5095526889810426,
        "codebleu-98": 0.38690291546797184,
        "codebleu-4": 0.7980082928721346,
        "codebleu-40": 0.6986478260240904,
        "codebleu-47": 0.48828522766280436,
        "codebleu-115": 0.7038300841685222,
        "codebleu-143": 0.4471637236239328,
        "codebleu-132": 0.6783038184838975,
        "chrf-147": 0.6713262882229886,
        "chrf-20": 0.05495004866867967,
        "chrf-3": 0.7057747229611517,
        "chrf-182": 0.612795272274009,
        "chrf-55": 0.05267865427222416,
        "chrf-50": 0.4065009641524941,
        "chrf-45": 0.6458005174029082,
        "chrf-25": 0.7685773301616066,
        "chrf-18": 0.6675166386324594,
        "chrf-158": 0.5259137534414722,
        "chrf-127": 0.7510963375591043,
        "chrf-15": 0.7452848555104202,
        "chrf-141": 0.31744748596632794,
        "chrf-98": 0.21832840847458168,
        "chrf-4": 0.8828914610477583,
        "chrf-40": 0.6403178683369208,
        "chrf-47": 0.2860605358415208,
        "chrf-115": 0.7417458817184636,
        "chrf-143": 0.4159719306441335,
        "chrf-132": 0.42969885204154645,
        "rougel-147": 0.7317073170731706,
        "rougel-20": 0.06349206349206349,
        "rougel-3": 0.7777777777777778,
        "rougel-182": 0.7401574803149608,
        "rougel-55": 0.06349206349206349,
        "rougel-50": 0.5454545454545454,
        "rougel-45": 0.7050359712230216,
        "rougel-25": 0.8264462809917356,
        "rougel-18": 0.7642276422764228,
        "rougel-158": 0.6153846153846154,
        "rougel-127": 0.9137931034482758,
        "rougel-15": 0.7878787878787877,
        "rougel-141": 0.4227642276422764,
        "rougel-98": 0.36842105263157887,
        "rougel-4": 0.9310344827586207,
        "rougel-40": 0.7768595041322314,
        "rougel-47": 0.3902439024390244,
        "rougel-115": 0.7407407407407408,
        "rougel-143": 0.5454545454545454,
        "rougel-132": 0.4923076923076923,
        "meteor-147": 0.7495059139563888,
        "meteor-20": 0.027624309392265196,
        "meteor-3": 0.8295420581598977,
        "meteor-182": 0.7157239611934834,
        "meteor-55": 0.027624309392265196,
        "meteor-50": 0.4607862802126166,
        "meteor-45": 0.7845108964425834,
        "meteor-25": 0.8050140483738807,
        "meteor-18": 0.7732604196647616,
        "meteor-158": 0.5642048638483383,
        "meteor-127": 0.8745887499671477,
        "meteor-15": 0.8016339869281045,
        "meteor-141": 0.3204287713559536,
        "meteor-98": 0.3082594940035106,
        "meteor-4": 0.8710361025952624,
        "meteor-40": 0.7228692919208727,
        "meteor-47": 0.3416800296040459,
        "meteor-115": 0.8086734693877552,
        "meteor-143": 0.4517582985116672,
        "meteor-132": 0.5362622567698013,
        "ruby-147": 0.5873015873015873,
        "ruby-20": 0.033333333333333326,
        "ruby-3": 0.6818181818181819,
        "ruby-182": 0.6119402985074627,
        "ruby-55": 0.033333333333333326,
        "ruby-50": 0.4,
        "ruby-45": 0.5696202531645569,
        "ruby-25": 0.7213114754098361,
        "ruby-18": 0.6190476190476191,
        "ruby-158": 0.4337349397590361,
        "ruby-127": 0.8833333333333333,
        "ruby-15": 0.6666666666666667,
        "ruby-141": 0.2698412698412699,
        "ruby-98": 0.18333333333333335,
        "ruby-4": 0.9,
        "ruby-40": 0.6721311475409837,
        "ruby-47": 0.2063492063492064,
        "ruby-115": 0.5866666666666667,
        "ruby-143": 0.41666666666666663,
        "ruby-132": 0.33333333333333337,
        "codebertscore_f1-147": 0.9227715730667114,
        "codebertscore_f3-147": 0.9270150661468506,
        "codebertscore_f1-20": 0.5985386371612549,
        "codebertscore_f3-20": 0.5511881709098816,
        "codebertscore_f1-3": 0.9433552622795105,
        "codebertscore_f3-3": 0.955933690071106,
        "codebertscore_f1-182": 0.9027045369148254,
        "codebertscore_f3-182": 0.9300183057785034,
        "codebertscore_f1-55": 0.6073116064071655,
        "codebertscore_f3-55": 0.5691344141960144,
        "codebertscore_f1-50": 0.8709338903427124,
        "codebertscore_f3-50": 0.8693362474441528,
        "codebertscore_f1-45": 0.8920234441757202,
        "codebertscore_f3-45": 0.9023436903953552,
        "codebertscore_f1-25": 0.9622146487236023,
        "codebertscore_f3-25": 0.9684879183769226,
        "codebertscore_f1-18": 0.9284629225730896,
        "codebertscore_f3-18": 0.9336199760437012,
        "codebertscore_f1-158": 0.8542886972427368,
        "codebertscore_f3-158": 0.8921241760253906,
        "codebertscore_f1-127": 0.9794554114341736,
        "codebertscore_f3-127": 0.9794554114341736,
        "codebertscore_f1-15": 0.9319685101509094,
        "codebertscore_f3-15": 0.9480398297309875,
        "codebertscore_f1-141": 0.7899599671363831,
        "codebertscore_f3-141": 0.7971964478492737,
        "codebertscore_f1-98": 0.7394520044326782,
        "codebertscore_f3-98": 0.7500175833702087,
        "codebertscore_f1-4": 0.9895403981208801,
        "codebertscore_f3-4": 0.9895403981208801,
        "codebertscore_f1-40": 0.9499799609184265,
        "codebertscore_f3-40": 0.9558139443397522,
        "codebertscore_f1-47": 0.7739218473434448,
        "codebertscore_f3-47": 0.7925660014152527,
        "codebertscore_f1-115": 0.9272090792655945,
        "codebertscore_f3-115": 0.9407510757446289,
        "codebertscore_f1-143": 0.8760753870010376,
        "codebertscore_f3-143": 0.8714585304260254,
        "codebertscore_f1-132": 0.7810356616973877,
        "codebertscore_f3-132": 0.8445475697517395,
        "codebertscore_s_f1-147": 0.9345037341117859,
        "codebertscore_s_f3-147": 0.9391955137252808,
        "codebertscore_s_f1-20": 0.6819242835044861,
        "codebertscore_s_f3-20": 0.6111903786659241,
        "codebertscore_s_f1-3": 0.9463739395141602,
        "codebertscore_s_f3-3": 0.9596118927001953,
        "codebertscore_s_f1-182": 0.914473831653595,
        "codebertscore_s_f3-182": 0.9420651197433472,
        "codebertscore_s_f1-55": 0.6888878345489502,
        "codebertscore_s_f3-55": 0.6267523765563965,
        "codebertscore_s_f1-50": 0.8853245377540588,
        "codebertscore_s_f3-50": 0.8883724212646484,
        "codebertscore_s_f1-45": 0.9007256031036377,
        "codebertscore_s_f3-45": 0.9093379974365234,
        "codebertscore_s_f1-25": 0.9649752974510193,
        "codebertscore_s_f3-25": 0.9712561368942261,
        "codebertscore_s_f1-18": 0.9374030232429504,
        "codebertscore_s_f3-18": 0.943282961845398,
        "codebertscore_s_f1-158": 0.8709287643432617,
        "codebertscore_s_f3-158": 0.9071069955825806,
        "codebertscore_s_f1-127": 0.9793981313705444,
        "codebertscore_s_f3-127": 0.9793981909751892,
        "codebertscore_s_f1-15": 0.9406570792198181,
        "codebertscore_s_f3-15": 0.9557544589042664,
        "codebertscore_s_f1-141": 0.8140623569488525,
        "codebertscore_s_f3-141": 0.8226516246795654,
        "codebertscore_s_f1-98": 0.7664223313331604,
        "codebertscore_s_f3-98": 0.7761540412902832,
        "codebertscore_s_f1-4": 0.9913962483406067,
        "codebertscore_s_f3-4": 0.9913963079452515,
        "codebertscore_s_f1-40": 0.9517836570739746,
        "codebertscore_s_f3-40": 0.9575827717781067,
        "codebertscore_s_f1-47": 0.7904611825942993,
        "codebertscore_s_f3-47": 0.8108401894569397,
        "codebertscore_s_f1-115": 0.9381471872329712,
        "codebertscore_s_f3-115": 0.9506004452705383,
        "codebertscore_s_f1-143": 0.8902762532234192,
        "codebertscore_s_f3-143": 0.8890761733055115,
        "codebertscore_s_f1-132": 0.8036762475967407,
        "codebertscore_s_f3-132": 0.8660866618156433,
        "gpt35_nsnr-147": 4,
        "raw_gpt35_nsnr-147": "4",
        "gpt35_nsnr-20": 2,
        "raw_gpt35_nsnr-20": "2",
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-182": 4,
        "raw_gpt35_nsnr-182": "4",
        "gpt35_nsnr-55": 0,
        "raw_gpt35_nsnr-55": "0",
        "gpt35_nsnr-50": 4,
        "raw_gpt35_nsnr-50": "4",
        "gpt35_nsnr-45": 4,
        "raw_gpt35_nsnr-45": "4",
        "gpt35_nsnr-25": 4,
        "raw_gpt35_nsnr-25": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-158": 3,
        "raw_gpt35_nsnr-158": "3",
        "gpt35_nsnr-127": 4,
        "raw_gpt35_nsnr-127": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-141": 4,
        "raw_gpt35_nsnr-141": "4",
        "gpt35_nsnr-98": 3,
        "raw_gpt35_nsnr-98": "3",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-40": 4,
        "raw_gpt35_nsnr-40": "4",
        "gpt35_nsnr-47": 4,
        "raw_gpt35_nsnr-47": "4",
        "gpt35_nsnr-115": 4,
        "raw_gpt35_nsnr-115": "4",
        "gpt35_nsnr-143": 4,
        "raw_gpt35_nsnr-143": "4",
        "gpt35_nsnr-132": 4,
        "raw_gpt35_nsnr-132": "4",
        "gpt35_nswr-147": 4,
        "raw_gpt35_nswr-147": "4",
        "gpt35_nswr-20": 0,
        "raw_gpt35_nswr-20": "0",
        "gpt35_nswr-3": 3,
        "raw_gpt35_nswr-3": "3",
        "gpt35_nswr-182": 3,
        "raw_gpt35_nswr-182": "3",
        "gpt35_nswr-55": 0,
        "raw_gpt35_nswr-55": "0",
        "gpt35_nswr-50": 3,
        "raw_gpt35_nswr-50": "3",
        "gpt35_nswr-45": 3,
        "raw_gpt35_nswr-45": "3",
        "gpt35_nswr-25": 4,
        "raw_gpt35_nswr-25": "4",
        "gpt35_nswr-18": 4,
        "raw_gpt35_nswr-18": "4",
        "gpt35_nswr-158": 3,
        "raw_gpt35_nswr-158": "3",
        "gpt35_nswr-127": 4,
        "raw_gpt35_nswr-127": "4",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-141": 3,
        "raw_gpt35_nswr-141": "3",
        "gpt35_nswr-98": 3,
        "raw_gpt35_nswr-98": "3",
        "gpt35_nswr-4": 4,
        "raw_gpt35_nswr-4": "4",
        "gpt35_nswr-40": 3,
        "raw_gpt35_nswr-40": "3",
        "gpt35_nswr-47": 4,
        "raw_gpt35_nswr-47": "4",
        "gpt35_nswr-115": 3,
        "raw_gpt35_nswr-115": "3",
        "gpt35_nswr-143": 4,
        "raw_gpt35_nswr-143": "4",
        "gpt35_nswr-132": 3,
        "raw_gpt35_nswr-132": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n",
        "snippet": [
            "        List<String> planet_names = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        if (!planet_names.contains(planet1) || !planet_names.contains(planet2) || planet1.equals(planet2)) {\n            return List.of();\n        }\n        int planet1_index = planet_names.indexOf(planet1);\n        int planet2_index = planet_names.indexOf(planet2);\n        if (planet1_index < planet2_index) {\n            return planet_names.subList(planet1_index + 1, planet2_index);\n        } else {\n            return planet_names.subList(planet2_index + 1, planet1_index);\n        }\n    }\n}"
        ],
        "simplified": "There are eight planets in our solar system: the closerst to the Sun is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Write a function that takes two planet names as strings planet1 and planet2. The function should return a tuple containing all planets whose orbits are located between the orbit of planet1 and the orbit of planet2, sorted by the proximity to the sun. The function should return an empty tuple if planet1 or planet2 are not correct planet names.",
        "task_id": "148",
        "0": "ArrayList<String> res = new ArrayList<String>();\n        return res;",
        "grade-0": {
            "execution": 0
        },
        "1": "HashSet<String> set = new HashSet<>();\n        ArrayList<String> res = new ArrayList<>();\n        if (planet1.equals(\"Earth\") || planet1.equals(\"Venus\") || planet1.equals(\"Mars\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")){\n            set.add(planet1);\n        }\n        if (planet2.equals(\"Earth\") || planet2.equals(\"Venus\") || planet2.equals(\"Mars\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")){\n            set.add(planet2);\n        }\n        if (set.contains(\"Mercury\")){\n            res.add(\"Mercury\");\n        }\n        if (set.contains(\"Venus\")){\n            res.add(\"Venus\");\n        }\n        if (set.contains(\"Earth\")){\n            res.add(\"Earth\");\n        }\n        if (set.contains(\"Mars\")){\n            res.add(\"Mars\");\n        }\n        if (set.contains(\"Jupiter\")){\n            res.add(\"Jupiter\");\n        }\n        if (set.contains(\"Saturn\")){\n            res.add(\"Saturn\");\n        }\n        if (set.contains(\"Uranus\")){\n            res.add(\"Uranus\");\n        }\n        if (set.contains(\"Neptune\")){\n            res.add(\"Neptune\");\n        }\n        return res;",
        "grade-1": {
            "execution": 0
        },
        "2": "throw new UnsupportedOperationException(\"You must implement this function.\");",
        "grade-2": {
            "execution": 0
        },
        "3": "ArrayList<String> planets = new ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> temp = new ArrayList<String>();\n        if (planets.contains(planet1) && planets.contains(planet2)) {\n            if (planets.indexOf(planet1) < planets.indexOf(planet2)) {\n                temp = new ArrayList<String>(planets.subList(planets.indexOf(planet1) + 1, planets.indexOf(planet2)));\n            } else {\n                temp = new ArrayList<String>(planets.subList(planets.indexOf(planet2) + 1, planets.indexOf(planet1)));\n            }\n        }\n        return temp;",
        "grade-3": {
            "execution": 0
        },
        "4": "ArrayList<String> res = new ArrayList<String>();\n        ArrayList<String> planets = new ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"Neptune\");\n        boolean b1 = planets.contains(planet1);\n        boolean b2 = planets.contains(planet2);\n        if(b1 && b2) {\n            int p1 = planets.indexOf(planet1);\n            int p2 = planets.indexOf(planet2);\n            if(p1 < p2) {\n                while(p1 < p2) {\n                    res.add(planets.get(p1));\n                    p1++;\n                }\n            }\n            else {\n                while(p2 < p1) {\n                    res.add(planets.get(p2));\n                    p2++;\n                }\n            }\n        }\n        return res;",
        "grade-4": {
            "execution": 0
        },
        "5": "Map<String,Integer> map = new HashMap<>();\n        map.put(\"Mercury\",1);\n        map.put(\"Venus\",2);\n        map.put(\"Earth\",3);\n        map.put(\"Mars\",4);\n        map.put(\"Jupiter\",5);\n        map.put(\"Saturn\",6);\n        map.put(\"Uranus\",7);\n        map.put(\"Neptune\",8);\n        if(!map.containsKey(planet1) || !map.containsKey(planet2)) return new ArrayList<>();\n        ArrayList<String> result = new ArrayList<>();\n        boolean min = map.get(planet1) < map.get(planet2);\n        for(Map.Entry<String,Integer> el: map.entrySet()){\n            if(min && el.getValue() > map.get(planet1) && el.getValue() < map.get(planet2))\n                result.add(el.getKey());\n            if(!min && el.getValue() > map.get(planet2) && el.getValue() < map.get(planet1))\n                result.add(el.getKey());\n        }\n        return result;",
        "grade-5": {
            "execution": 0
        },
        "6": "return new ArrayList<String>();",
        "grade-6": {
            "execution": 0
        },
        "8": "ArrayList<String> planets = new ArrayList<>();\n        ArrayList<String> result = new ArrayList<>();\n        planets.add(\"Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"Neptune\");\n        if(planets.contains(planet1) && planets.contains(planet2)) {\n            int index1 = planets.indexOf(planet1);\n            int index2 = planets.indexOf(planet2);\n            if(index1 > index2) {\n                for(int i = index2 + 1; i < index1; i++) {\n                    result.add(planets.get(i));\n                }\n            }\n            else {\n                for(int i = index1 + 1; i < index2; i++) {\n                    result.add(planets.get(i));\n                }\n            }\n        }\n        return result;",
        "grade-8": {
            "execution": 1
        },
        "9": "ArrayList<String> planets = new ArrayList<>();\n        planets.add(\"Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> planetsBetween = new ArrayList<>();\n        if(!planets.contains(planet1) || !planets.contains(planet2)) {\n            return planetsBetween;\n        }\n        int start = Math.min(planets.indexOf(planet1), planets.indexOf(planet2));\n        int end = Math.max(planets.indexOf(planet1), planets.indexOf(planet2));\n        for(int i = start + 1; i < end; i++) {\n            planetsBetween.add(planets.get(i));\n        }\n        return planetsBetween;",
        "grade-9": {
            "execution": 1
        },
        "10": "ArrayList<String> planetList = new ArrayList<String>();\n        for (Planet planet : Planet.values()) {\n            planetList.add(planet.name());\n        }\n        if (!planetList.contains(planet1) || !planetList.contains(planet2)) {\n            return new ArrayList<String>();\n        }\n        int planet1Order = planetList.indexOf(planet1);\n        int planet2Order = planetList.indexOf(planet2);\n        int planet1OrderIndex = Math.min(planet1Order, planet2Order);\n        int planet2OrderIndex = Math.max(planet1Order, planet2Order);\n        return new ArrayList<String>(planetList.subList(planet1OrderIndex + 1, planet2OrderIndex));",
        "grade-10": {
            "execution": 0
        },
        "11": "ArrayList<String> ret = new ArrayList<String>();\n        String[] planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n        boolean planet1B = false;\n        boolean planet2B = false;\n        int planet1I = 0;\n        int planet2I = 0;\n        for (int i = 0; i < planets.length; i++) {\n            if (planets[i].equals(planet1)) {\n                planet1B = true;\n                planet1I = i;\n            }\n            if (planets[i].equals(planet2)) {\n                planet2B = true;\n                planet2I = i;\n            }\n        }\n        if (planet1B && planet2B) {\n            int start = Math.min(planet1I, planet2I);\n            int end = Math.max(planet1I, planet2I);\n            for (int i = start + 1; i < end; i++) {\n                ret.add(planets[i]);\n            }\n        }\n        return ret;",
        "grade-11": {
            "execution": 1
        },
        "12": "// Write your code here.\n        return null;",
        "grade-12": {
            "execution": 0
        },
        "13": "if (planet1.equals(\"\") || planet2.equals(\"\")) return new ArrayList<String>();\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        if (!planets.contains(planet1) || !planets.contains(planet2)) return new ArrayList<String>();\n        if (planets.indexOf(planet1) > planets.indexOf(planet2)) {\n            return new ArrayList<String>(planets.subList(planets.indexOf(planet2) + 1, planets.indexOf(planet1)));\n        } else {\n            return new ArrayList<String>(planets.subList(planets.indexOf(planet1) + 1, planets.indexOf(planet2)));\n        }",
        "grade-13": {
            "execution": 0
        },
        "14": "ArrayList<String> names = new ArrayList<String>();\n        if (orb.containsKey(planet1) && orb.containsKey(planet2)) {\n            if (orb.get(planet1) < orb.get(planet2)) {\n                for (String name : orb.keySet()) {\n                    if (orb.get(name) > orb.get(planet1) && orb.get(name) < orb.get(planet2)) {\n                        names.add(name);\n                    }\n                }\n            } else {\n                for (String name : orb.keySet()) {\n                    if (orb.get(name) > orb.get(planet2) && orb.get(name) < orb.get(planet1)) {\n                        names.add(name);\n                    }\n                }\n            }\n        }\n        Collections.sort(names, new Comparator<String>() {\n            @Override\n            public int compare(String s1, String s2) {\n                return orb.get(s1) - orb.get(s2);\n            }\n        });\n        return names;",
        "grade-14": {
            "execution": 0
        },
        "15": "Map<String, Integer> map = new HashMap<>();\n        map.put(\"Mercury\", 1);\n        map.put(\"Venus\", 2);\n        map.put(\"Earth\", 3);\n        map.put(\"Mars\", 4);\n        map.put(\"Jupiter\", 5);\n        map.put(\"Saturn\", 6);\n        map.put(\"Uranus\", 7);\n        map.put(\"Neptune\", 8);\n        ArrayList<String> res = new ArrayList<>();\n        if (!map.containsKey(planet1) || !map.containsKey(planet2)) {\n            return res;\n        }\n        if (map.get(planet1) > map.get(planet2)) {\n            String tmp = planet1;\n            planet1 = planet2;\n            planet2 = tmp;\n        }\n        for (String key : map.keySet()) {\n            if (map.get(key) > map.get(planet1) && map.get(key) < map.get(planet2)) {\n                res.add(key);\n            }\n        }\n        return res;",
        "grade-15": {
            "execution": 0
        },
        "16": "ArrayList<String> r = new ArrayList<String>();\n        if (planet1.equals(\"Mercury\")) {\n            if (planet2.equals(\"Venus\")) r.add(\"Venus\");\n            if (planet2.equals(\"Earth\")) r.add(\"Venus\");\n            if (planet2.equals(\"Mars\")) r.add(\"Venus\");\n            if (planet2.equals(\"Jupiter\")) r.add(\"Venus\");\n            if (planet2.equals(\"Saturn\")) r.add(\"Venus\");\n            if (planet2.equals(\"Uranus\")) r.add(\"Venus\");\n            if (planet2.equals(\"Neptune\")) r.add(\"Venus\");\n        }\n        if (planet1.equals(\"Venus\")) {\n            if (planet2.equals(\"Earth\")) r.add(\"Earth\");\n            if (planet2.equals(\"Mars\")) r.add(\"Earth\");\n            if (planet2.equals(\"Jupiter\")) r.add(\"Earth\");\n            if (planet2.equals(\"Saturn\")) r.add(\"Earth\");\n            if (planet2.equals(\"Uranus\")) r.add(\"Earth\");\n            if (planet2.equals(\"Neptune\")) r.add(\"Earth\");\n        }\n        if (planet1.equals(\"Earth\")) {\n            if (planet2.equals(\"Mars\")) r.add(\"Mars\");\n            if (planet2.equals(\"Jupiter\")) r.add(\"Mars\");\n            if (planet2.equals(\"Saturn\")) r.add(\"Mars\");\n            if (planet2.equals(\"Uranus\")) r.add(\"Mars\");\n            if (planet2.equals(\"Neptune\")) r.add(\"Mars\");\n        }\n        if (planet1.equals(\"Mars\")) {\n            if (planet2.equals(\"Jupiter\")) r.add(\"Jupiter\");\n            if (planet2.equals(\"Saturn\")) r.add(\"Jupiter\");\n            if (planet2.equals(\"Uranus\")) r.add(\"Jupiter\");\n            if (planet2.equals(\"Neptune\")) r.add(\"Jupiter\");",
        "grade-16": {
            "execution": 0
        },
        "17": "ArrayList<String> planets = new ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> output = new ArrayList<String>();\n        int p1Index = planets.indexOf(planet1);\n        int p2Index = planets.indexOf(planet2);\n        if(p1Index==-1 || p2Index==-1) {\n            return output;\n        }\n        if(p1Index<p2Index) {\n            for(int i=p1Index+1;i<p2Index;i++) {\n                output.add(planets.get(i));\n            }\n        } else {\n            for(int i=p2Index+1;i<p1Index;i++) {\n                output.add(planets.get(i));\n            }\n        }\n        return output;",
        "grade-17": {
            "execution": 1
        },
        "18": "ArrayList<String> planets = new ArrayList<String>();\n        ArrayList<String> betweenPlanets = new ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"Neptune\");\n        if (!planets.contains(planet1) || !planets.contains(planet2)) {\n            return betweenPlanets;\n        }\n        int j = planets.indexOf(planet1);\n        int k = planets.indexOf(planet2);\n        int start = j < k ? j : k;\n        int end = j < k ? k : j;\n        for (int i = start + 1; i < end; i++) {\n            betweenPlanets.add(planets.get(i));\n        }\n        return betweenPlanets;",
        "grade-18": {
            "execution": 1
        },
        "19": "ArrayList<String> result = new ArrayList<String>();\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        int i1 = planets.indexOf(planet1);\n        int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1) {\n            return result;\n        }\n        int i = i1;\n        if (i2 < i1) {\n            i = i2;\n            i2 = i1;\n            i1 = i;\n        }\n        for (; i <= i2; i++) {\n            if (i == i1) {\n                continue;\n            }\n            result.add(planets.get(i));\n        }\n        return result;",
        "grade-19": {
            "execution": 0
        },
        "bleu-0": 0.00034122563281121056,
        "bleu-1": 0.09967626172347252,
        "bleu-2": 4.848019188095088e-05,
        "bleu-3": 0.23765611240201526,
        "bleu-4": 0.21597507067335417,
        "bleu-5": 0.15314061763729128,
        "bleu-6": 8.033965537832324e-07,
        "bleu-8": 0.23224251386167066,
        "bleu-9": 0.23309923081030004,
        "bleu-10": 0.27690386366938635,
        "bleu-11": 0.2589853728529884,
        "bleu-12": 1.1294577067695569e-07,
        "bleu-13": 0.42804570795939656,
        "bleu-14": 0.10690020245098251,
        "bleu-15": 0.1926774863127312,
        "bleu-16": 0.055984293733294124,
        "bleu-17": 0.18615310505462,
        "bleu-18": 0.2424347228111623,
        "bleu-19": 0.37317727765498404,
        "codebleu-0": 0.058767475869191656,
        "codebleu-1": 0.5407331025661557,
        "codebleu-2": 0.031088083079766644,
        "codebleu-3": 0.5874907373509144,
        "codebleu-4": 0.6026905668717585,
        "codebleu-5": 0.6170510566930721,
        "codebleu-6": 0.03454233652198044,
        "codebleu-8": 0.5895799569878207,
        "codebleu-9": 0.6004416477623221,
        "codebleu-10": 0.5287052402779712,
        "codebleu-11": 0.557588582969369,
        "codebleu-12": 0.03108844843725691,
        "codebleu-13": 0.6578684685268604,
        "codebleu-14": 0.493118868452137,
        "codebleu-15": 0.6410470922755991,
        "codebleu-16": 0.5239447716870489,
        "codebleu-17": 0.6198797236698304,
        "codebleu-18": 0.6106953504848531,
        "codebleu-19": 0.6060651455767392,
        "chrf-0": 0.05932292289735494,
        "chrf-1": 0.39874834877907234,
        "chrf-2": 0.038662846989588016,
        "chrf-3": 0.5355979067604898,
        "chrf-4": 0.4835968262894187,
        "chrf-5": 0.3705285259655187,
        "chrf-6": 0.04446043855140891,
        "chrf-8": 0.5192271889903546,
        "chrf-9": 0.5237448537969648,
        "chrf-10": 0.5049926108220107,
        "chrf-11": 0.49922861210580133,
        "chrf-12": 0.023454792388045473,
        "chrf-13": 0.6657638654906012,
        "chrf-14": 0.31423335422233045,
        "chrf-15": 0.3923976254649062,
        "chrf-16": 0.33700057355167135,
        "chrf-17": 0.4574172720852484,
        "chrf-18": 0.5006701453181034,
        "chrf-19": 0.4245934033349563,
        "rougel-0": 0.15,
        "rougel-1": 0.3098039215686275,
        "rougel-2": 0.06369426751592357,
        "rougel-3": 0.4748603351955307,
        "rougel-4": 0.4636871508379888,
        "rougel-5": 0.4009433962264151,
        "rougel-6": 0.09271523178807949,
        "rougel-8": 0.4722222222222222,
        "rougel-9": 0.4702549575070822,
        "rougel-10": 0.47586206896551725,
        "rougel-11": 0.4534883720930233,
        "rougel-12": 0.039735099337748346,
        "rougel-13": 0.6041055718475073,
        "rougel-14": 0.3258426966292135,
        "rougel-15": 0.44385026737967914,
        "rougel-16": 0.2314814814814815,
        "rougel-17": 0.4132231404958678,
        "rougel-18": 0.4729344729344729,
        "rougel-19": 0.4921135646687697,
        "meteor-0": 0.06123892829578447,
        "meteor-1": 0.354137336934983,
        "meteor-2": 0.03318201469952442,
        "meteor-3": 0.5617655945285247,
        "meteor-4": 0.5271023927983837,
        "meteor-5": 0.5084165592783505,
        "meteor-6": 0.053813260745760094,
        "meteor-8": 0.5283812176331015,
        "meteor-9": 0.5745563226415932,
        "meteor-10": 0.4019627473717301,
        "meteor-11": 0.5551785813305484,
        "meteor-12": 0.011727912431587176,
        "meteor-13": 0.7074680614154528,
        "meteor-14": 0.2716651224168913,
        "meteor-15": 0.5099906239412538,
        "meteor-16": 0.26868705440134016,
        "meteor-17": 0.5053524480214622,
        "meteor-18": 0.555134888438134,
        "meteor-19": 0.5458099981050234,
        "ruby-0": 0.07801418439716312,
        "ruby-1": 0.20054200542005418,
        "ruby-2": 0.03546099290780147,
        "ruby-3": 0.3179723502304147,
        "ruby-4": 0.3317972350230415,
        "ruby-5": 0.2791519434628975,
        "ruby-6": 0.03546099290780147,
        "ruby-8": 0.3013698630136986,
        "ruby-9": 0.33490566037735847,
        "ruby-10": 0.3221476510067114,
        "ruby-11": 0.32512315270935965,
        "ruby-12": 0.021276595744680882,
        "ruby-13": 0.43000000000000005,
        "ruby-14": 0.20465116279069773,
        "ruby-15": 0.3047210300429185,
        "ruby-16": 0.1439842209072978,
        "ruby-17": 0.28828828828828834,
        "ruby-18": 0.3380952380952381,
        "ruby-19": 0.36363636363636365,
        "codebertscore_f1-0": 0.6265674233436584,
        "codebertscore_f3-0": 0.5702108144760132,
        "codebertscore_f1-1": 0.7747822999954224,
        "codebertscore_f3-1": 0.7796155214309692,
        "codebertscore_f1-2": 0.5658226609230042,
        "codebertscore_f3-2": 0.5377741456031799,
        "codebertscore_f1-3": 0.8279294371604919,
        "codebertscore_f3-3": 0.8330397009849548,
        "codebertscore_f1-4": 0.8039459586143494,
        "codebertscore_f3-4": 0.8087190985679626,
        "codebertscore_f1-5": 0.7631413340568542,
        "codebertscore_f3-5": 0.7846588492393494,
        "codebertscore_f1-6": 0.6010680198669434,
        "codebertscore_f3-6": 0.5382024645805359,
        "codebertscore_f1-8": 0.815401017665863,
        "codebertscore_f3-8": 0.825315535068512,
        "codebertscore_f1-9": 0.8152114748954773,
        "codebertscore_f3-9": 0.8253008723258972,
        "codebertscore_f1-10": 0.8508124947547913,
        "codebertscore_f3-10": 0.8503767251968384,
        "codebertscore_f1-11": 0.8045662641525269,
        "codebertscore_f3-11": 0.8137165904045105,
        "codebertscore_f1-12": 0.5213122367858887,
        "codebertscore_f3-12": 0.4900044798851013,
        "codebertscore_f1-13": 0.8740320205688477,
        "codebertscore_f3-13": 0.8814908266067505,
        "codebertscore_f1-14": 0.7542228698730469,
        "codebertscore_f3-14": 0.7587954998016357,
        "codebertscore_f1-15": 0.771848738193512,
        "codebertscore_f3-15": 0.7864350080490112,
        "codebertscore_f1-16": 0.7465180158615112,
        "codebertscore_f3-16": 0.7590669393539429,
        "codebertscore_f1-17": 0.8122978210449219,
        "codebertscore_f3-17": 0.8248415589332581,
        "codebertscore_f1-18": 0.8083387613296509,
        "codebertscore_f3-18": 0.821841835975647,
        "codebertscore_f1-19": 0.8240163922309875,
        "codebertscore_f3-19": 0.8253446817398071,
        "codebertscore_s_f1-0": 0.6695374846458435,
        "codebertscore_s_f3-0": 0.5992096066474915,
        "codebertscore_s_f1-1": 0.7954294085502625,
        "codebertscore_s_f3-1": 0.7970650792121887,
        "codebertscore_s_f1-2": 0.5701483488082886,
        "codebertscore_s_f3-2": 0.5516980290412903,
        "codebertscore_s_f1-3": 0.8280755281448364,
        "codebertscore_s_f3-3": 0.8319849371910095,
        "codebertscore_s_f1-4": 0.805544376373291,
        "codebertscore_s_f3-4": 0.8089953064918518,
        "codebertscore_s_f1-5": 0.7668883800506592,
        "codebertscore_s_f3-5": 0.7868467569351196,
        "codebertscore_s_f1-6": 0.6647917032241821,
        "codebertscore_s_f3-6": 0.5971757173538208,
        "codebertscore_s_f1-8": 0.8159312009811401,
        "codebertscore_s_f3-8": 0.8234031200408936,
        "codebertscore_s_f1-9": 0.8140908479690552,
        "codebertscore_s_f3-9": 0.8240501284599304,
        "codebertscore_s_f1-10": 0.8537227511405945,
        "codebertscore_s_f3-10": 0.8525525331497192,
        "codebertscore_s_f1-11": 0.8114780783653259,
        "codebertscore_s_f3-11": 0.8167094588279724,
        "codebertscore_s_f1-12": 0.549694836139679,
        "codebertscore_s_f3-12": 0.5297682881355286,
        "codebertscore_s_f1-13": 0.8574060201644897,
        "codebertscore_s_f3-13": 0.8632490634918213,
        "codebertscore_s_f1-14": 0.7563968896865845,
        "codebertscore_s_f3-14": 0.7637777328491211,
        "codebertscore_s_f1-15": 0.7772276997566223,
        "codebertscore_s_f3-15": 0.7898207306861877,
        "codebertscore_s_f1-16": 0.7680132985115051,
        "codebertscore_s_f3-16": 0.7768294215202332,
        "codebertscore_s_f1-17": 0.8156239986419678,
        "codebertscore_s_f3-17": 0.8276603817939758,
        "codebertscore_s_f1-18": 0.8038663864135742,
        "codebertscore_s_f3-18": 0.8157628774642944,
        "codebertscore_s_f1-19": 0.8181836009025574,
        "codebertscore_s_f3-19": 0.8212115168571472,
        "gpt35_nsnr-0": 2,
        "raw_gpt35_nsnr-0": "2",
        "gpt35_nsnr-1": 2,
        "raw_gpt35_nsnr-1": "2",
        "gpt35_nsnr-2": 0,
        "raw_gpt35_nsnr-2": "0",
        "gpt35_nsnr-3": 3,
        "raw_gpt35_nsnr-3": "3",
        "gpt35_nsnr-4": 3,
        "raw_gpt35_nsnr-4": "3",
        "gpt35_nsnr-5": 4,
        "raw_gpt35_nsnr-5": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-10": 4,
        "raw_gpt35_nsnr-10": "4",
        "gpt35_nsnr-11": 3,
        "raw_gpt35_nsnr-11": "3",
        "gpt35_nsnr-12": 0,
        "raw_gpt35_nsnr-12": "0",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-14": 4,
        "raw_gpt35_nsnr-14": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-16": 2,
        "raw_gpt35_nsnr-16": "2",
        "gpt35_nsnr-17": 4,
        "raw_gpt35_nsnr-17": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-19": 4,
        "raw_gpt35_nsnr-19": "4",
        "gpt35_nswr-0": 1,
        "raw_gpt35_nswr-0": "1",
        "gpt35_nswr-1": 2,
        "raw_gpt35_nswr-1": "2",
        "gpt35_nswr-2": 0,
        "raw_gpt35_nswr-2": "0",
        "gpt35_nswr-3": 4,
        "raw_gpt35_nswr-3": "4",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-5": 3,
        "raw_gpt35_nswr-5": "3",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-10": 2,
        "raw_gpt35_nswr-10": "2",
        "gpt35_nswr-11": 3,
        "raw_gpt35_nswr-11": "3",
        "gpt35_nswr-12": 0,
        "raw_gpt35_nswr-12": "0",
        "gpt35_nswr-13": 4,
        "raw_gpt35_nswr-13": "4",
        "gpt35_nswr-14": 2,
        "raw_gpt35_nswr-14": "2",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-16": 1,
        "raw_gpt35_nswr-16": "1",
        "gpt35_nswr-17": 3,
        "raw_gpt35_nswr-17": "3",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-19": 3,
        "raw_gpt35_nswr-19": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    // [2, 3, 1, 3]\n    public static ArrayList<Integer> parseNestedParens(String paren_string) {\n",
        "snippet": [
            "        String[] groups = paren_string.split(\" \");\n        List<Integer> result = new ArrayList<>(List.of());\n        for (String group : groups) {\n            if (group.length() > 0) {\n                int depth = 0;\n                int max_depth = 0;\n                for (char c : group.toCharArray()) {\n                    if (c == '(') {\n                        depth += 1;\n                        max_depth = Math.max(depth, max_depth);\n                    } else {\n                        depth -= 1;\n                    }\n                }\n                result.add(max_depth);\n            }\n        }\n        return result;\n    }\n}"
        ],
        "simplified": "Input to this function is a string represented multiple groups for nested parentheses separated by spaces. For each of the group, output the deepest level of nesting of parentheses. E.g. (()()) has maximum two levels of nesting while ((())) has three.",
        "task_id": "6",
        "170": "ArrayList<Integer> maxLevel = new ArrayList<Integer>();\n        int level = 0;\n        int max = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                level++;\n                if (level > max) {\n                    max = level;\n                }\n            } else if (paren_string.charAt(i) == ')') {\n                level--;\n            } else if (paren_string.charAt(i) == ' ') {\n                maxLevel.add(max);\n                max = 0;\n                level = 0;\n            }\n        }\n        maxLevel.add(max);\n        return maxLevel;",
        "grade-170": {
            "execution": 1
        },
        "28": "// Write your code here\n        ArrayList<Integer> ans = new ArrayList<Integer>();\n        int index = 0;\n        String[] parens = paren_string.split(\" \");\n        for (String paren : parens) {\n            int pos = 0;\n            int max = 0;\n            for (int i = 0; i < paren.length(); i++) {\n                if (paren.charAt(i) == '(') {\n                    pos++;\n                    max = Math.max(max, pos);\n                } else {\n                    pos--;\n                }\n            }\n            ans.add(max);\n        }\n        return ans;",
        "grade-28": {
            "execution": 1
        },
        "6": "ArrayList<Integer> ans = new ArrayList<Integer>();\n        int cur_val = 0;\n        int max_val = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                cur_val++;\n                max_val = Math.max(max_val, cur_val);\n            } else if (paren_string.charAt(i) == ')') {\n                cur_val--;\n            } else if (paren_string.charAt(i) == ' ') {\n                ans.add(max_val);\n                max_val = 0;\n                cur_val = 0;\n            }\n        }\n        ans.add(max_val);\n        return ans;",
        "grade-6": {
            "execution": 1
        },
        "199": "ArrayList<Integer> maxDepth = new ArrayList<Integer>();\n        String[] groups = paren_string.split(\" \");\n        for (String group : groups) {\n            int depth = 0;\n            int max = 0;\n            for (int i = 0; i < group.length(); i++) {\n                char c = group.charAt(i);\n                if (c == '(') {\n                    depth++;\n                    if (depth > max) {\n                        max = depth;\n                    }\n                } else if (c == ')') {\n                    depth--;\n                }\n            }\n            maxDepth.add(max);\n        }\n        return maxDepth;",
        "grade-199": {
            "execution": 1
        },
        "71": "String[] groups = paren_string.split(\" \");\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (String g : groups) {\n            int depth = 0;\n            int max_depth = 0;\n            for (int i = 0; i < g.length(); i++) {\n                if (g.charAt(i) == '(') {\n                    depth++;\n                    max_depth = Math.max(max_depth, depth);\n                } else if (g.charAt(i) == ')') {\n                    depth--;\n                }\n            }\n            result.add(max_depth);\n        }\n        return result;",
        "grade-71": {
            "execution": 1
        },
        "63": "ArrayList<Integer> result = new ArrayList<Integer>();\n        // <<< Your code goes here.\n        int max = 0;\n        char[] charArray = paren_string.toCharArray();\n        for (int i = 0; i < charArray.length; i++) {\n            if (charArray[i] == '(') {\n                max++;\n            } else if (charArray[i] == ')') {\n                max--;\n            } else if (charArray[i] == ' ') {\n                result.add(max);\n                max = 0;\n            }\n        }\n        result.add(max);\n        // >>>\n        return result;",
        "grade-63": {
            "execution": 0
        },
        "57": "ArrayList<Integer> result = new ArrayList<Integer>();\n        // >>> parse_nested_parens('(()()) ((())) () ((())()())')\n        // [2, 3, 1, 3]\n        String[] groups = paren_string.split(\" \");\n        for (String group : groups) {\n            int max_level = 0;\n            int level = 0;\n            for (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i) == '(') {\n                    level++;\n                    max_level = Math.max(max_level, level);\n                } else if (group.charAt(i) == ')') {\n                    level--;\n                }\n            }\n            result.add(max_level);\n        }\n        return result;",
        "grade-57": {
            "execution": 1
        },
        "35": "int maxParens = 0;\n        int depth = 0;\n        ArrayList<Integer> parens = new ArrayList<Integer>();\n        int stringLength = paren_string.length();\n        for (int i = 0; i < stringLength; i++) {\n            switch (paren_string.charAt(i)) {\n                case '(':\n                    depth++;\n                    break;\n                case ')':\n                    if (depth > maxParens) {\n                        maxParens = depth;\n                    }\n                    depth--;\n                    break;\n                case ' ':\n                    parens.add(maxParens);\n                    maxParens = 0;\n                    break;\n            }\n        }\n        return parens;",
        "grade-35": {
            "execution": 0
        },
        "198": "// Delete the following line and implement this function.\n        char[] chars = paren_string.toCharArray();\n        int max_len = 0;\n        int count = 0;\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] == '(') {\n                count++;\n                if (max_len < count) {\n                    max_len = count;\n                }\n            } else if (chars[i] == ')') {\n                count--;\n            } else if (chars[i] == ' ') {\n                result.add(max_len);\n                max_len = 0;\n                count = 0;\n            }\n        }\n        result.add(max_len);\n        return result;",
        "grade-198": {
            "execution": 1
        },
        "26": "ArrayList<Integer> depths = new ArrayList<Integer>();\n        ArrayList<Integer> pos_list = new ArrayList<Integer>();\n        ArrayList<Integer> temp_depth = new ArrayList<Integer>();\n        int total_depth = 0;\n        String temp_str = \"\";\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                total_depth++;\n                temp_depth.add(total_depth);\n            } else if (c == ')') {\n                total_depth--;\n                temp_depth.add(total_depth);\n            } else if (c == ' ') {\n                if (pos_list.size() == 0) {\n                    pos_list.add(i);\n                } else {\n                    pos_list.add(i - pos_list.get(pos_list.size() - 1) - 1);\n                }\n                int max_depth = Collections.max(temp_depth);\n                depths.add(max_depth);\n                temp_depth.clear();\n            }\n        }\n        pos_list.add(paren_string.length() - pos_list.get(pos_list.size() - 1) - 1);\n        int max_depth = Collections.max(temp_depth);\n        depths.add(max_depth);\n        return depths;",
        "grade-26": {
            "execution": 0
        },
        "181": "ArrayList<Integer> results = new ArrayList<Integer>();\n        for (String group : paren_string.split(\" \")) {\n            Stack<Character> paren_stack = new Stack<Character>();\n            int level = 0;\n            for (char c : group.toCharArray()) {\n                if (c == '(') {\n                    paren_stack.push(c);\n                    level = Math.max(level, paren_stack.size());\n                } else if (c == ')') {\n                    paren_stack.pop();\n                }\n            }\n            results.add(level);\n        }\n        return results;",
        "grade-181": {
            "execution": 1
        },
        "146": "// YOUR CODE GOES HERE\n        return null;",
        "grade-146": {
            "execution": 0
        },
        "22": "ArrayList<Integer> depths = new ArrayList<Integer>();\n        // Fill this in.\n        // Initialize our stack\n        Stack<Character> stack = new Stack<Character>();\n        // For each parentheses string\n        for (String paren_str : paren_string.split(\" \")) {\n            // For each parentheses character\n            for (int i = 0; i < paren_str.length(); i++) {\n                // Push opening parentheses to the stack\n                if (paren_str.charAt(i) == '(') {\n                    stack.push(paren_str.charAt(i));\n                }\n                // Pop closing parentheses from the stack\n                else if (paren_str.charAt(i) == ')') {\n                    stack.pop();\n                }\n            }\n            // Add maximum depth of nested parentheses to the result\n            depths.add(stack.size());\n            // Clear the stack\n            stack.clear();\n        }\n        return depths;",
        "grade-22": {
            "execution": 0
        },
        "158": "ArrayList<Integer> max_nesting = new ArrayList<Integer>();\n        for (String each: paren_string.split(\" \")) {\n            int max = 0;\n            int curr = 0;\n            for (int i = 0; i < each.length(); i++) {\n                if (each.charAt(i) == '(') {\n                    curr++;\n                    max = Math.max(max, curr);\n                } else {\n                    curr--;\n                }\n            }\n            max_nesting.add(max);\n        }\n        return max_nesting;",
        "grade-158": {
            "execution": 1
        },
        "112": "ArrayList<Integer> depth = new ArrayList<Integer>();\n        ArrayList<Character> opening_parens = new ArrayList<Character>();\n        ArrayList<Character> closing_parens = new ArrayList<Character>();\n        int count = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                opening_parens.add(paren_string.charAt(i));\n                count++;\n            } else if (paren_string.charAt(i) == ')') {\n                closing_parens.add(paren_string.charAt(i));\n                count--;\n            } else if (paren_string.charAt(i) == ' ') {\n                // If at the end of a group, add the depth of parens to the depth arraylist\n                depth.add(count);\n                count = 0;\n            }\n        }\n        depth.add(count);\n        if (opening_parens.size() != closing_parens.size()) {\n            throw new IllegalArgumentException(\"The number of opening and closing parentheses is not the same.\");\n        }\n        return depth;",
        "grade-112": {
            "execution": 0
        },
        "8": "// get rid of spaces\n        paren_string = paren_string.replaceAll(\"\\\\s\", \"\");\n        ArrayList<Integer> depths = new ArrayList<Integer>();\n        int start = 0;\n        while (start < paren_string.length()) {\n            if (paren_string.charAt(start) == '(') {\n                int end = paren_string.indexOf(')', start);\n                depths.add(parseNestedParens(paren_string.substring(start, end + 1)));\n                start = end + 1;\n            } else {\n                start += 1;\n            }\n        }\n        return depths;",
        "grade-8": {
            "execution": 0
        },
        "7": "// TODO: Implement this method\n        return null;",
        "grade-7": {
            "execution": 0
        },
        "23": "// Implement this function.\n        return null;",
        "grade-23": {
            "execution": 0
        },
        "55": "ArrayList<Integer> ans = new ArrayList<Integer>();\n        // Write your code here.\n        return ans;",
        "grade-55": {
            "execution": 0
        },
        "60": "//Write your code here\n        ArrayList<Integer> levels = new ArrayList<Integer>();\n        ArrayList<Character> stack = new ArrayList<Character>();\n        int curr_max = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                curr_max += 1;\n                stack.add('(');\n            } else if (paren_string.charAt(i) == ')') {\n                if (stack.get(stack.size() - 1) == '(') {\n                    stack.remove(stack.size() - 1);\n                    if (stack.size() == 0) {\n                        levels.add(curr_max);\n                        curr_max = 0;\n                    }\n                }\n            }\n        }\n        return levels;",
        "grade-60": {
            "execution": 0
        },
        "bleu-170": 0.22493658868201533,
        "bleu-28": 0.37165058977665844,
        "bleu-6": 0.25691565071629635,
        "bleu-199": 0.462058994704175,
        "bleu-71": 0.5673542313805463,
        "bleu-63": 0.29367971446121005,
        "bleu-57": 0.38635448743978507,
        "bleu-35": 0.2262845051482846,
        "bleu-198": 0.28134210127891546,
        "bleu-26": 0.1741659098300959,
        "bleu-181": 0.47772706377105983,
        "bleu-146": 1.432167243746328e-07,
        "bleu-22": 0.18198374731057285,
        "bleu-158": 0.36009968780326423,
        "bleu-112": 0.15054669310511432,
        "bleu-8": 0.2995420429846106,
        "bleu-7": 5.594240643612562e-07,
        "bleu-23": 1.5849535946411047e-07,
        "bleu-55": 0.006445582603706186,
        "bleu-60": 0.21561072609787468,
        "codebleu-170": 0.5903535174794139,
        "codebleu-28": 0.6264369810441497,
        "codebleu-6": 0.5993735117089591,
        "codebleu-199": 0.6751435880052588,
        "codebleu-71": 0.693801589747506,
        "codebleu-63": 0.5538223564810142,
        "codebleu-57": 0.6900519229732995,
        "codebleu-35": 0.48941376724136726,
        "codebleu-198": 0.5799710282767132,
        "codebleu-26": 0.6377630986335803,
        "codebleu-181": 0.6478877760876819,
        "codebleu-146": 0.02713232896423992,
        "codebleu-22": 0.5937047802281669,
        "codebleu-158": 0.5753284921036265,
        "codebleu-112": 0.6078264176829328,
        "codebleu-8": 0.5411988781709218,
        "codebleu-7": 0.03100917147435188,
        "codebleu-23": 0.031008388959571885,
        "codebleu-55": 0.09361835757182818,
        "codebleu-60": 0.6115197766234461,
        "chrf-170": 0.3442502079178189,
        "chrf-28": 0.4511977172771155,
        "chrf-6": 0.37373278186386083,
        "chrf-199": 0.6078607611077887,
        "chrf-71": 0.7332343371370124,
        "chrf-63": 0.424052136918502,
        "chrf-57": 0.5980021002733031,
        "chrf-35": 0.38511148863101924,
        "chrf-198": 0.44448902254577677,
        "chrf-26": 0.42197576490005334,
        "chrf-181": 0.516954390227875,
        "chrf-146": 0.01989543648394295,
        "chrf-22": 0.36126414950810637,
        "chrf-158": 0.42948211273598036,
        "chrf-112": 0.3414965481399767,
        "chrf-8": 0.36419610483297477,
        "chrf-7": 0.036736015236588,
        "chrf-23": 0.03747257378104753,
        "chrf-55": 0.14027725590691062,
        "chrf-60": 0.3458963304901569,
        "rougel-170": 0.42490842490842495,
        "rougel-28": 0.5511811023622046,
        "rougel-6": 0.46268656716417905,
        "rougel-199": 0.5593869731800767,
        "rougel-71": 0.7054263565891472,
        "rougel-63": 0.42962962962962964,
        "rougel-57": 0.5016501650165016,
        "rougel-35": 0.424,
        "rougel-198": 0.4468085106382979,
        "rougel-26": 0.35233160621761656,
        "rougel-181": 0.6055776892430278,
        "rougel-146": 0.029850746268656712,
        "rougel-22": 0.38125,
        "rougel-158": 0.6016949152542372,
        "rougel-112": 0.34615384615384615,
        "rougel-8": 0.4541832669322709,
        "rougel-7": 0.04444444444444444,
        "rougel-23": 0.04477611940298507,
        "rougel-55": 0.2119205298013245,
        "rougel-60": 0.4133333333333333,
        "meteor-170": 0.44765724655005745,
        "meteor-28": 0.5305654438100939,
        "meteor-6": 0.4453940779641892,
        "meteor-199": 0.5699617148462902,
        "meteor-71": 0.654940916080434,
        "meteor-63": 0.4780052493438321,
        "meteor-57": 0.5927766550138902,
        "meteor-35": 0.4149387269482451,
        "meteor-198": 0.4817024439011587,
        "meteor-26": 0.5027803136646675,
        "meteor-181": 0.5799353868705589,
        "meteor-146": 0.008818342151675486,
        "meteor-22": 0.40341601611684724,
        "meteor-158": 0.5161119847866686,
        "meteor-112": 0.42867155425219944,
        "meteor-8": 0.433613846578894,
        "meteor-7": 0.013215859030837003,
        "meteor-23": 0.013227513227513229,
        "meteor-55": 0.09696698222397254,
        "meteor-60": 0.44786471208375744,
        "ruby-170": 0.22297297297297303,
        "ruby-28": 0.4031007751937985,
        "ruby-6": 0.23776223776223782,
        "ruby-199": 0.36764705882352944,
        "ruby-71": 0.518796992481203,
        "ruby-63": 0.22758620689655173,
        "ruby-57": 0.3370786516853933,
        "ruby-35": 0.23199999999999998,
        "ruby-198": 0.2866242038216561,
        "ruby-26": 0.23371647509578541,
        "ruby-181": 0.40476190476190477,
        "ruby-146": 0.016000000000000014,
        "ruby-22": 0.2205128205128205,
        "ruby-158": 0.44799999999999995,
        "ruby-112": 0.2259414225941423,
        "ruby-8": 0.23809523809523814,
        "ruby-7": 0.02400000000000002,
        "ruby-23": 0.02400000000000002,
        "ruby-55": 0.128,
        "ruby-60": 0.2857142857142857,
        "codebertscore_f1-170": 0.7922287583351135,
        "codebertscore_f3-170": 0.7881284952163696,
        "codebertscore_f1-28": 0.8388414978981018,
        "codebertscore_f3-28": 0.8472675085067749,
        "codebertscore_f1-6": 0.7947799563407898,
        "codebertscore_f3-6": 0.7992042303085327,
        "codebertscore_f1-199": 0.8800223469734192,
        "codebertscore_f3-199": 0.8744909763336182,
        "codebertscore_f1-71": 0.900824785232544,
        "codebertscore_f3-71": 0.9030736684799194,
        "codebertscore_f1-63": 0.80538010597229,
        "codebertscore_f3-63": 0.8119017481803894,
        "codebertscore_f1-57": 0.8550354242324829,
        "codebertscore_f3-57": 0.868523359298706,
        "codebertscore_f1-35": 0.800214409828186,
        "codebertscore_f3-35": 0.809550940990448,
        "codebertscore_f1-198": 0.8064411282539368,
        "codebertscore_f3-198": 0.8197270631790161,
        "codebertscore_f1-26": 0.7961388230323792,
        "codebertscore_f3-26": 0.8189637064933777,
        "codebertscore_f1-181": 0.8479357957839966,
        "codebertscore_f3-181": 0.8510525822639465,
        "codebertscore_f1-146": 0.5270506143569946,
        "codebertscore_f3-146": 0.49410590529441833,
        "codebertscore_f1-22": 0.7486630082130432,
        "codebertscore_f3-22": 0.7709053158760071,
        "codebertscore_f1-158": 0.8206545114517212,
        "codebertscore_f3-158": 0.8191776871681213,
        "codebertscore_f1-112": 0.7548381090164185,
        "codebertscore_f3-112": 0.781183123588562,
        "codebertscore_f1-8": 0.7701282501220703,
        "codebertscore_f3-8": 0.779120683670044,
        "codebertscore_f1-7": 0.5212944149971008,
        "codebertscore_f3-7": 0.49442073702812195,
        "codebertscore_f1-23": 0.5481703281402588,
        "codebertscore_f3-23": 0.5143190026283264,
        "codebertscore_f1-55": 0.639988124370575,
        "codebertscore_f3-55": 0.6018436551094055,
        "codebertscore_f1-60": 0.7760977745056152,
        "codebertscore_f3-60": 0.7871387600898743,
        "codebertscore_s_f1-170": 0.797183096408844,
        "codebertscore_s_f3-170": 0.794758141040802,
        "codebertscore_s_f1-28": 0.8467332124710083,
        "codebertscore_s_f3-28": 0.8528205156326294,
        "codebertscore_s_f1-6": 0.7987040877342224,
        "codebertscore_s_f3-6": 0.8048555850982666,
        "codebertscore_s_f1-199": 0.8810318112373352,
        "codebertscore_s_f3-199": 0.8774648904800415,
        "codebertscore_s_f1-71": 0.8916392922401428,
        "codebertscore_s_f3-71": 0.8951091766357422,
        "codebertscore_s_f1-63": 0.8069524765014648,
        "codebertscore_s_f3-63": 0.8128262162208557,
        "codebertscore_s_f1-57": 0.8683047294616699,
        "codebertscore_s_f3-57": 0.8835213780403137,
        "codebertscore_s_f1-35": 0.8092620968818665,
        "codebertscore_s_f3-35": 0.8129618167877197,
        "codebertscore_s_f1-198": 0.8050838708877563,
        "codebertscore_s_f3-198": 0.8186346888542175,
        "codebertscore_s_f1-26": 0.7967946529388428,
        "codebertscore_s_f3-26": 0.8197408318519592,
        "codebertscore_s_f1-181": 0.8442181348800659,
        "codebertscore_s_f3-181": 0.8437289595603943,
        "codebertscore_s_f1-146": 0.5799959897994995,
        "codebertscore_s_f3-146": 0.5672445893287659,
        "codebertscore_s_f1-22": 0.7641801834106445,
        "codebertscore_s_f3-22": 0.7861878871917725,
        "codebertscore_s_f1-158": 0.8184289336204529,
        "codebertscore_s_f3-158": 0.8181953430175781,
        "codebertscore_s_f1-112": 0.7677956223487854,
        "codebertscore_s_f3-112": 0.785683810710907,
        "codebertscore_s_f1-8": 0.7772715091705322,
        "codebertscore_s_f3-8": 0.7814094424247742,
        "codebertscore_s_f1-7": 0.586360514163971,
        "codebertscore_s_f3-7": 0.5651581287384033,
        "codebertscore_s_f1-23": 0.6103556156158447,
        "codebertscore_s_f3-23": 0.5822806358337402,
        "codebertscore_s_f1-55": 0.7033843398094177,
        "codebertscore_s_f3-55": 0.6632994413375854,
        "codebertscore_s_f1-60": 0.7759253978729248,
        "codebertscore_s_f3-60": 0.7831829786300659,
        "gpt35_nsnr-170": 4,
        "raw_gpt35_nsnr-170": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-199": 4,
        "raw_gpt35_nsnr-199": "4",
        "gpt35_nsnr-71": 4,
        "raw_gpt35_nsnr-71": "4",
        "gpt35_nsnr-63": 4,
        "raw_gpt35_nsnr-63": "4",
        "gpt35_nsnr-57": 4,
        "raw_gpt35_nsnr-57": "4",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-198": 4,
        "raw_gpt35_nsnr-198": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-181": 4,
        "raw_gpt35_nsnr-181": "4",
        "gpt35_nsnr-146": 0,
        "raw_gpt35_nsnr-146": "0",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-158": 4,
        "raw_gpt35_nsnr-158": "4",
        "gpt35_nsnr-112": 4,
        "raw_gpt35_nsnr-112": "4",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 0,
        "raw_gpt35_nsnr-7": "0",
        "gpt35_nsnr-23": 0,
        "raw_gpt35_nsnr-23": "0",
        "gpt35_nsnr-55": 2,
        "raw_gpt35_nsnr-55": "2",
        "gpt35_nsnr-60": 3,
        "raw_gpt35_nsnr-60": "3",
        "gpt35_nswr-170": 3,
        "raw_gpt35_nswr-170": "3",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-199": 4,
        "raw_gpt35_nswr-199": "4",
        "gpt35_nswr-71": 4,
        "raw_gpt35_nswr-71": "4",
        "gpt35_nswr-63": 3,
        "raw_gpt35_nswr-63": "3",
        "gpt35_nswr-57": 4,
        "raw_gpt35_nswr-57": "4",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-198": 3,
        "raw_gpt35_nswr-198": "3",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-181": 3,
        "raw_gpt35_nswr-181": "3",
        "gpt35_nswr-146": 0,
        "raw_gpt35_nswr-146": "0",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-158": 4,
        "raw_gpt35_nswr-158": "4",
        "gpt35_nswr-112": 2,
        "raw_gpt35_nswr-112": "2",
        "gpt35_nswr-8": 2,
        "raw_gpt35_nswr-8": "2",
        "gpt35_nswr-7": 0,
        "raw_gpt35_nswr-7": "0",
        "gpt35_nswr-23": 0,
        "raw_gpt35_nswr-23": "0",
        "gpt35_nswr-55": 0,
        "raw_gpt35_nswr-55": "Score: 0",
        "gpt35_nswr-60": 3,
        "raw_gpt35_nswr-60": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // triples_sum_to_zero takes a list of integers as an input.\n    // it returns True if there are three distinct elements in the list that\n    // sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5, 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n    public static boolean triplesSumToZero(ArrayList<Integer> l) {\n",
        "snippet": [
            "        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}"
        ],
        "simplified": "triples_sum_to_zero takes a list of integers as an input. it returns True if there are three distinct elements in the list that sum to zero, and False otherwise.",
        "task_id": "40",
        "36": "Set<Integer> s = new HashSet<Integer>();\n        for (int i : l) {\n            s.add(i);\n        }\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                int k = 0 - l.get(i) - l.get(j);\n                if (s.contains(k)) {\n                    return true;\n                }\n            }\n        }\n        return false;",
        "grade-36": {
            "execution": 1
        },
        "9": "HashSet<Integer> found = new HashSet<Integer>();\n        for (int a : l) {\n            for (int b : l) {\n                int c = -a - b;\n                if (found.contains(c)) {\n                    return true;\n                }\n                found.add(b);\n            }\n        }\n        return false;",
        "grade-9": {
            "execution": 0
        },
        "95": "throw new UnsupportedOperationException(\"Not implemented\");",
        "grade-95": {
            "execution": 0
        },
        "87": "// BEGIN SOLUTION\n        Collections.sort(l);\n        // NOTE: we only need to test combinations where\n        // a <= b <= c\n        for (int a = 0; a < l.size() - 2; a += 1) {\n            int b = a + 1;\n            int c = l.size() - 1;\n            while (b < c) {\n                int sum = l.get(a) + l.get(b) + l.get(c);\n                if (sum == 0) {\n                    return true;\n                } else if (sum < 0) {\n                    b += 1;\n                } else {\n                    c -= 1;\n                }\n            }\n        }\n        return false;\n        // END SOLUTION",
        "grade-87": {
            "execution": 1
        },
        "78": "// Your code here.",
        "grade-78": {
            "execution": 0
        },
        "44": "// your code here\n        int count = 0;\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        count += 1;\n                    }\n                }\n            }\n        }\n        if (count > 0) {\n            return true;\n        } else {\n            return false;\n        }",
        "grade-44": {
            "execution": 1
        },
        "34": "// TODO: finish this function.\n        return false;",
        "grade-34": {
            "execution": 0
        },
        "194": "boolean sum = false;\n        // your code here\n        return sum;",
        "grade-194": {
            "execution": 0
        },
        "30": "HashSet<Integer> h = new HashSet<Integer>();\n        for (int x : l) {\n            h.add(x);\n        }\n        ArrayList<Integer> a = new ArrayList<Integer>(h);\n        Collections.sort(a);\n        int i, j, k;\n        i = 0;\n        while (i < a.size()-2) {\n            j = i+1;\n            k = a.size()-1;\n            while (j < k) {\n                if (a.get(i) + a.get(j) + a.get(k) == 0) {\n                    return true;\n                } else if (a.get(i) + a.get(j) + a.get(k) < 0) {\n                    j++;\n                } else {\n                    k--;\n                }\n            }\n            i++;\n        }\n        return false;",
        "grade-30": {
            "execution": 0
        },
        "147": "int a, b, c;\n        for (int i = 0; i < l.size(); i++) {\n            a = l.get(i);\n            for (int j = i + 1; j < l.size(); j++) {\n                b = l.get(j);\n                for (int k = j + 1; k < l.size(); k++) {\n                    c = l.get(k);\n                    if (a + b + c == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;",
        "grade-147": {
            "execution": 1
        },
        "11": "// Do not change or delete anything that is printed by this line of code.\n        System.out.println(\"Running triplesSumToZero: \" + l);\n        // Your code goes here.\n        boolean ans = false;\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        ans = true;\n                    }\n                }\n            }\n        }\n        return ans;",
        "grade-11": {
            "execution": 1
        },
        "10": "return false;",
        "grade-10": {
            "execution": 0
        },
        "31": "if (l.size() < 3) {\n            return false;\n        }\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;",
        "grade-31": {
            "execution": 1
        },
        "75": "//*****************************************************\n        //***************** WRITE YOUR CODE HERE **************\n        //*****************************************************\n        //if there are not 3 or more elements in the list, return false\n        if (l.size() < 3) {\n            return false;\n        }\n        // create an array of integers to store the values in\n        int[] array = new int[l.size()];\n        // iterate through the list and add the elements to the array\n        for (int i = 0; i < l.size(); i++) {\n            array[i] = l.get(i);\n        }\n        // sort the array in ascending order\n        Arrays.sort(array);\n        // declare three pointers and set them to the first three elements of the array\n        int i = 0;\n        int j = 1;\n        int k = 2;\n        // iterate through the array\n        for (; i < array.length; i++) {\n            // this condition states that if there are only 2 elements remaining in the array\n            // the first two elements will be checked against the last element to see if\n            // there is a sum of zero\n            if (i == array.length - 2) {\n                if (array[i] + array[i + 1] + array[i + 2] == 0) {\n                    return true;\n                }\n            }\n            // set j and k to a subsequent element after i\n            j = i + 1;\n            k = i + 2;\n            // iterate through the array\n            for (; j < array.length; j++) {\n                // start k at the next subsequent element after j\n                k = j + 1;\n                // iterate through the array\n                for (; k < array.length; k++) {\n                    // if the sum of the three pointers is equal to zero, return true\n                    if (array[i] + array[j] + array[k] == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        // if there is no sum of zero, return false\n        return false;",
        "grade-75": {
            "execution": 0
        },
        "82": "throw new UnsupportedOperationException(\"Problem: triplesSumToZero\");",
        "grade-82": {
            "execution": 0
        },
        "178": "// add code here\n        return false;",
        "grade-178": {
            "execution": 0
        },
        "68": "// your code here\n        if (l.size() < 3) {\n            return false;\n        }\n        for (int i = 0; i < l.size() - 2; i++) {\n            for (int j = i + 1; j < l.size() - 1; j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;",
        "grade-68": {
            "execution": 1
        },
        "146": "return l.size() >= 3 && l.contains(0) && l.stream().filter(e -> e == 0).count() >= 3 || l.size() >= 3 && l.stream().filter(e -> l.contains(-e)).count() >= 2;",
        "grade-146": {
            "execution": 0
        },
        "76": "Collections.sort(l);\n        int n = l.size();\n        for (int i = 0; i < n - 2; i++) {\n            int j = i + 1;\n            int k = n - 1;\n            while (j < k) {\n                int sum = l.get(i) + l.get(j) + l.get(k);\n                if (sum == 0) {\n                    return true;\n                } else if (sum < 0) {\n                    j++;\n                } else {\n                    k--;\n                }\n            }\n        }\n        return false;",
        "grade-76": {
            "execution": 1
        },
        "156": "int n = l.size();\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0)\n                        return true;\n                }\n            }\n        }\n        return false;",
        "grade-156": {
            "execution": 1
        },
        "bleu-36": 0.6165401019173633,
        "bleu-9": 0.1480977850951871,
        "bleu-95": 3.81420372253333e-05,
        "bleu-87": 0.28350016482358653,
        "bleu-78": 7.731882708237301e-09,
        "bleu-44": 0.7885336575426942,
        "bleu-34": 3.4958483210045354e-05,
        "bleu-194": 7.650442897964808e-05,
        "bleu-30": 0.2763472777162415,
        "bleu-147": 0.7364013797897198,
        "bleu-11": 0.648847013806051,
        "bleu-10": 3.338237795365e-15,
        "bleu-31": 0.8777167855603752,
        "bleu-75": 0.13235451782884536,
        "bleu-82": 0.00023548373425887062,
        "bleu-178": 1.4312187614655862e-06,
        "bleu-68": 0.7890385588932421,
        "bleu-146": 0.12348989076905426,
        "bleu-76": 0.5331581701462158,
        "bleu-156": 0.7919638931062137,
        "codebleu-36": 0.7641088736024033,
        "codebleu-9": 0.3469663610896032,
        "codebleu-95": 0.027210909398003084,
        "codebleu-87": 0.6711055906726533,
        "codebleu-78": 0.018140589683380382,
        "codebleu-44": 0.8977387364863186,
        "codebleu-34": 0.04083296264404123,
        "codebleu-194": 0.0544903265773048,
        "codebleu-30": 0.7248289630523672,
        "codebleu-147": 0.8480687862712539,
        "codebleu-11": 0.8664839500081633,
        "codebleu-10": 0.013605442177020416,
        "codebleu-31": 0.9312039955352557,
        "codebleu-75": 0.7440784578695917,
        "codebleu-82": 0.027210909398003084,
        "codebleu-178": 0.02721284162432055,
        "codebleu-68": 0.9108923479482602,
        "codebleu-146": 0.34605009486692284,
        "codebleu-76": 0.7158797500974747,
        "codebleu-156": 0.7962466860676832,
        "chrf-36": 0.6720140088484209,
        "chrf-9": 0.3092364636607523,
        "chrf-95": 0.048908359185681316,
        "chrf-87": 0.427467087194683,
        "chrf-78": 0.0151246064347019,
        "chrf-44": 0.9031785058633703,
        "chrf-34": 0.10058455040851998,
        "chrf-194": 0.08107563188613785,
        "chrf-30": 0.44893079191477736,
        "chrf-147": 0.8351986568917442,
        "chrf-11": 0.7747545570521623,
        "chrf-10": 0.08014842741668202,
        "chrf-31": 0.9588539087368632,
        "chrf-75": 0.28915805360378544,
        "chrf-82": 0.05323030844422294,
        "chrf-178": 0.08652107281587787,
        "chrf-68": 0.9038273827172225,
        "chrf-146": 0.21048103031810586,
        "chrf-76": 0.5868870644115457,
        "chrf-156": 0.7912517697943927,
        "rougel-36": 0.6728971962616822,
        "rougel-9": 0.3905325443786982,
        "rougel-95": 0.052173913043478265,
        "rougel-87": 0.5140562248995983,
        "rougel-78": 0.01834862385321101,
        "rougel-44": 0.8695652173913044,
        "rougel-34": 0.07017543859649122,
        "rougel-194": 0.06896551724137931,
        "rougel-30": 0.47719298245614034,
        "rougel-147": 0.7713004484304932,
        "rougel-11": 0.7857142857142857,
        "rougel-10": 0.05660377358490566,
        "rougel-31": 0.9223744292237444,
        "rougel-75": 0.23052959501557632,
        "rougel-82": 0.05042016806722689,
        "rougel-178": 0.05405405405405406,
        "rougel-68": 0.8859649122807018,
        "rougel-146": 0.3369565217391304,
        "rougel-76": 0.6027397260273972,
        "rougel-156": 0.8442211055276382,
        "meteor-36": 0.7053583569346527,
        "meteor-9": 0.30038783883881387,
        "meteor-95": 0.01597444089456869,
        "meteor-87": 0.5700911416920447,
        "meteor-78": 0.0053590568060021436,
        "meteor-44": 0.8032799654727298,
        "meteor-34": 0.039978678038379525,
        "meteor-194": 0.026595744680851064,
        "meteor-30": 0.6006109839704804,
        "meteor-147": 0.8635415727450358,
        "meteor-11": 0.9274646840148699,
        "meteor-10": 0.031660692951015534,
        "meteor-31": 0.9778906298668962,
        "meteor-75": 0.5324092769440655,
        "meteor-82": 0.021208907741251323,
        "meteor-178": 0.0314913844325609,
        "meteor-68": 0.9692487205125845,
        "meteor-146": 0.22783121721737193,
        "meteor-76": 0.6326616005586922,
        "meteor-156": 0.8614602434623531,
        "ruby-36": 0.5405405405405406,
        "ruby-9": 0.2621359223300971,
        "ruby-95": 0.029126213592232997,
        "ruby-87": 0.3904109589041096,
        "ruby-78": 0.009708737864077666,
        "ruby-44": 0.7874015748031495,
        "ruby-34": 0.03883495145631066,
        "ruby-194": 0.03883495145631066,
        "ruby-30": 0.3296703296703297,
        "ruby-147": 0.65,
        "ruby-11": 0.651006711409396,
        "ruby-10": 0.029126213592232997,
        "ruby-31": 0.853448275862069,
        "ruby-75": 0.12430426716140996,
        "ruby-82": 0.029126213592232997,
        "ruby-178": 0.029126213592232997,
        "ruby-68": 0.792,
        "ruby-146": 0.23300970873786409,
        "ruby-76": 0.4137931034482759,
        "ruby-156": 0.7281553398058253,
        "codebertscore_f1-36": 0.8636074066162109,
        "codebertscore_f3-36": 0.8834174871444702,
        "codebertscore_f1-9": 0.7819775938987732,
        "codebertscore_f3-9": 0.7770834565162659,
        "codebertscore_f1-95": 0.5800077319145203,
        "codebertscore_f3-95": 0.5652205348014832,
        "codebertscore_f1-87": 0.7951992750167847,
        "codebertscore_f3-87": 0.8437290191650391,
        "codebertscore_f1-78": 0.5034366846084595,
        "codebertscore_f3-78": 0.483715295791626,
        "codebertscore_f1-44": 0.9132923483848572,
        "codebertscore_f3-44": 0.9403689503669739,
        "codebertscore_f1-34": 0.595372200012207,
        "codebertscore_f3-34": 0.5840349197387695,
        "codebertscore_f1-194": 0.6158979535102844,
        "codebertscore_f3-194": 0.6113582253456116,
        "codebertscore_f1-30": 0.787318766117096,
        "codebertscore_f3-30": 0.8124057054519653,
        "codebertscore_f1-147": 0.8945212364196777,
        "codebertscore_f3-147": 0.9074349403381348,
        "codebertscore_f1-11": 0.8228618502616882,
        "codebertscore_f3-11": 0.8759000897407532,
        "codebertscore_f1-10": 0.5373890399932861,
        "codebertscore_f3-10": 0.4984918534755707,
        "codebertscore_f1-31": 0.9310457706451416,
        "codebertscore_f3-31": 0.9356117844581604,
        "codebertscore_f1-75": 0.7122076153755188,
        "codebertscore_f3-75": 0.7834891676902771,
        "codebertscore_f1-82": 0.6074503064155579,
        "codebertscore_f3-82": 0.5941563844680786,
        "codebertscore_f1-178": 0.5826621651649475,
        "codebertscore_f3-178": 0.5638413429260254,
        "codebertscore_f1-68": 0.8938796520233154,
        "codebertscore_f3-68": 0.9119450449943542,
        "codebertscore_f1-146": 0.7112050652503967,
        "codebertscore_f3-146": 0.7035291790962219,
        "codebertscore_f1-76": 0.8640574216842651,
        "codebertscore_f3-76": 0.8951604962348938,
        "codebertscore_f1-156": 0.9573437571525574,
        "codebertscore_f3-156": 0.9624744653701782,
        "codebertscore_s_f1-36": 0.8627526760101318,
        "codebertscore_s_f3-36": 0.885534942150116,
        "codebertscore_s_f1-9": 0.7817705273628235,
        "codebertscore_s_f3-9": 0.7761834859848022,
        "codebertscore_s_f1-95": 0.5608940720558167,
        "codebertscore_s_f3-95": 0.5416138172149658,
        "codebertscore_s_f1-87": 0.8044150471687317,
        "codebertscore_s_f3-87": 0.8479586243629456,
        "codebertscore_s_f1-78": 0.5169470906257629,
        "codebertscore_s_f3-78": 0.4997721314430237,
        "codebertscore_s_f1-44": 0.9172093868255615,
        "codebertscore_s_f3-44": 0.9443171620368958,
        "codebertscore_s_f1-34": 0.6084750890731812,
        "codebertscore_s_f3-34": 0.5886877179145813,
        "codebertscore_s_f1-194": 0.6224027872085571,
        "codebertscore_s_f3-194": 0.6021687388420105,
        "codebertscore_s_f1-30": 0.8126561045646667,
        "codebertscore_s_f3-30": 0.8371825218200684,
        "codebertscore_s_f1-147": 0.8949509859085083,
        "codebertscore_s_f3-147": 0.912730872631073,
        "codebertscore_s_f1-11": 0.8159181475639343,
        "codebertscore_s_f3-11": 0.864750862121582,
        "codebertscore_s_f1-10": 0.6857060790061951,
        "codebertscore_s_f3-10": 0.5938371419906616,
        "codebertscore_s_f1-31": 0.9183380603790283,
        "codebertscore_s_f3-31": 0.9296276569366455,
        "codebertscore_s_f1-75": 0.7778193354606628,
        "codebertscore_s_f3-75": 0.8546860814094543,
        "codebertscore_s_f1-82": 0.5810241103172302,
        "codebertscore_s_f3-82": 0.5662789940834045,
        "codebertscore_s_f1-178": 0.6090282201766968,
        "codebertscore_s_f3-178": 0.5861387252807617,
        "codebertscore_s_f1-68": 0.8884426951408386,
        "codebertscore_s_f3-68": 0.9097327589988708,
        "codebertscore_s_f1-146": 0.7131163477897644,
        "codebertscore_s_f3-146": 0.7003875374794006,
        "codebertscore_s_f1-76": 0.8741853833198547,
        "codebertscore_s_f3-76": 0.9046898484230042,
        "codebertscore_s_f1-156": 0.9595497250556946,
        "codebertscore_s_f3-156": 0.9636701941490173,
        "gpt35_nsnr-36": 4,
        "raw_gpt35_nsnr-36": "4",
        "gpt35_nsnr-9": 3,
        "raw_gpt35_nsnr-9": "3",
        "gpt35_nsnr-95": 0,
        "raw_gpt35_nsnr-95": "0",
        "gpt35_nsnr-87": 4,
        "raw_gpt35_nsnr-87": "4",
        "gpt35_nsnr-78": 3,
        "raw_gpt35_nsnr-78": "3",
        "gpt35_nsnr-44": 4,
        "raw_gpt35_nsnr-44": "4",
        "gpt35_nsnr-34": 0,
        "raw_gpt35_nsnr-34": "0",
        "gpt35_nsnr-194": 2,
        "raw_gpt35_nsnr-194": "2",
        "gpt35_nsnr-30": 3,
        "raw_gpt35_nsnr-30": "3",
        "gpt35_nsnr-147": 4,
        "raw_gpt35_nsnr-147": "4",
        "gpt35_nsnr-11": 3,
        "raw_gpt35_nsnr-11": "3",
        "gpt35_nsnr-10": 0,
        "raw_gpt35_nsnr-10": "2 (The code snippet does not contain any logic to check if there are three distinct elements in the list that sum to zero. It simply returns false without any processing. However, the function signature and input parameter are correct.)",
        "gpt35_nsnr-31": 4,
        "raw_gpt35_nsnr-31": "4",
        "gpt35_nsnr-75": 4,
        "raw_gpt35_nsnr-75": "4",
        "gpt35_nsnr-82": 4,
        "raw_gpt35_nsnr-82": "4",
        "gpt35_nsnr-178": 2,
        "raw_gpt35_nsnr-178": "2",
        "gpt35_nsnr-68": 4,
        "raw_gpt35_nsnr-68": "4",
        "gpt35_nsnr-146": 3,
        "raw_gpt35_nsnr-146": "3",
        "gpt35_nsnr-76": 4,
        "raw_gpt35_nsnr-76": "4",
        "gpt35_nsnr-156": 4,
        "raw_gpt35_nsnr-156": "4",
        "gpt35_nswr-36": 3,
        "raw_gpt35_nswr-36": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-95": 0,
        "raw_gpt35_nswr-95": "0",
        "gpt35_nswr-87": 4,
        "raw_gpt35_nswr-87": "4",
        "gpt35_nswr-78": 3,
        "raw_gpt35_nswr-78": "3",
        "gpt35_nswr-44": 4,
        "raw_gpt35_nswr-44": "4",
        "gpt35_nswr-34": 3,
        "raw_gpt35_nswr-34": "3",
        "gpt35_nswr-194": 2,
        "raw_gpt35_nswr-194": "2",
        "gpt35_nswr-30": 3,
        "raw_gpt35_nswr-30": "3",
        "gpt35_nswr-147": 4,
        "raw_gpt35_nswr-147": "4",
        "gpt35_nswr-11": 4,
        "raw_gpt35_nswr-11": "4",
        "gpt35_nswr-10": 3,
        "raw_gpt35_nswr-10": "3",
        "gpt35_nswr-31": 4,
        "raw_gpt35_nswr-31": "4",
        "gpt35_nswr-75": 3,
        "raw_gpt35_nswr-75": "3",
        "gpt35_nswr-82": 0,
        "raw_gpt35_nswr-82": "0",
        "gpt35_nswr-178": 3,
        "raw_gpt35_nswr-178": "3",
        "gpt35_nswr-68": 4,
        "raw_gpt35_nswr-68": "4",
        "gpt35_nswr-146": 2,
        "raw_gpt35_nswr-146": "2",
        "gpt35_nswr-76": 4,
        "raw_gpt35_nswr-76": "4",
        "gpt35_nswr-156": 4,
        "raw_gpt35_nswr-156": "4"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two lists operator, and operand. The first list has basic algebra operations, and \n    // the second list is a list of integers. Use the two given lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator list is equal to the length of operand list minus one.\n    // Operand is a list of of non-negative integers.\n    // Operator list has at least one operator, and operand list has at least two operands.\n    public static int doAlgebra(ArrayList<String> op, ArrayList<Integer> operand) {\n",
        "snippet": [
            "        List<String> ops = new ArrayList<>(operator);\n        List<Integer> nums = new ArrayList<>(operand);\n        for (int i = ops.size() - 1; i >= 0; i--) {\n            if (ops.get(i).equals(\"**\")) {\n                nums.set(i, (int) Math.round(Math.pow(nums.get(i), nums.get(i + 1))));\n                nums.remove(i + 1);\n                ops.remove(i);\n            }\n        }\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops.get(i).equals(\"*\")) {\n                nums.set(i, nums.get(i) * nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            } else if (ops.get(i).equals(\"/\")) {\n                nums.set(i, nums.get(i) / nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            }\n        }\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops.get(i).equals(\"+\")) {\n                nums.set(i, nums.get(i) + nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            } else if (ops.get(i).equals(\"-\")) {\n                nums.set(i, nums.get(i) - nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            }\n        }\n        return nums.get(0);\n    }\n}"
        ],
        "simplified": "Given two lists operator, and operand. The first list has basic algebra operations, and the second list is a list of integers. Use the two given lists to build the algebric expression and return the evaluation of this expression. The basic algebra operations: Addition ( + ) Subtraction ( - ) Multiplication ( * ) Floor division ( // ) Exponentiation ( ** )",
        "task_id": "160",
        "34": "int val = operand.get(0);\n      for (int i = 0; i < op.size(); i++) {\n        switch (op.get(i)) {\n          case \"+\":\n            val += operand.get(i + 1);\n            break;\n          case \"-\":\n            val -= operand.get(i + 1);\n            break;\n          case \"*\":\n            val *= operand.get(i + 1);\n            break;\n          case \"//\":\n            val /= operand.get(i + 1);\n            break;\n          case \"**\":\n            val = (int) Math.pow(val, operand.get(i + 1));\n            break;\n        }\n      }\n      return val;",
        "grade-34": {
            "execution": 0
        },
        "6": "int res = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n            String curOp = op.get(i);\n            if (curOp.equals(\"+\")) {\n                res += operand.get(i + 1);\n            } else if (curOp.equals(\"-\")) {\n                res -= operand.get(i + 1);\n            } else if (curOp.equals(\"*\")) {\n                res *= operand.get(i + 1);\n            } else if (curOp.equals(\"//\")) {\n                res /= operand.get(i + 1);\n            } else if (curOp.equals(\"**\")) {\n                res = (int) Math.pow(res, operand.get(i + 1));\n            }\n        }\n        return res;",
        "grade-6": {
            "execution": 0
        },
        "84": "int a = operand.get(0);\n        int b = operand.get(1);\n        int c = 0;\n        for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n                c = a + b;\n            } else if (op.get(i).equals(\"-\")) {\n                c = a - b;\n            } else if (op.get(i).equals(\"*\")) {\n                c = a * b;\n            } else if (op.get(i).equals(\"//\")) {\n                c = a / b;\n            } else if (op.get(i).equals(\"**\")) {\n                c = (int) Math.pow(a, b);\n            }\n            a = c;\n            b = operand.get(i + 2);\n        }\n        return c;",
        "grade-84": {
            "execution": 0
        },
        "74": "int s = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n                s += operand.get(i + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                s -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n                s *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"//\")) {\n                s /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n                s = (int) Math.pow(s, operand.get(i + 1));\n            }\n        }\n        return s;",
        "grade-74": {
            "execution": 0
        },
        "68": "// FILL IN CODE\n        int result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n                result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"//\")) {\n                result /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"**\")) {\n                result = (int) Math.pow(result, operand.get(i + 1));\n            }\n        }\n        return result;",
        "grade-68": {
            "execution": 0
        },
        "41": "int l = op.size();\n        int r = operand.get(0);\n        for (int i = 0; i < l; i++) {\n            int o = operand.get(i + 1);\n            if (op.get(i).equals(\"+\")) r += o;\n            else if (op.get(i).equals(\"-\")) r -= o;\n            else if (op.get(i).equals(\"*\")) r *= o;\n            else if (op.get(i).equals(\"//\")) r /= o;\n            else if (op.get(i).equals(\"**\")) r = (int)Math.pow(r, o);\n        }\n        return r;",
        "grade-41": {
            "execution": 0
        },
        "30": "int result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n            String operator = op.get(i);\n            Integer operand1 = operand.get(i);\n            Integer operand2 = operand.get(i + 1);\n            if (operator.equals(\"+\")) {\n                result = operand1 + operand2;\n            } else if (operator.equals(\"-\")) {\n                result = operand1 - operand2;\n            } else if (operator.equals(\"*\")) {\n                result = operand1 * operand2;\n            } else if (operator.equals(\"/\")) {\n                result = operand1 / operand2;\n            } else if (operator.equals(\"**\")) {\n                result = (int) Math.pow(operand1, operand2);\n            }\n        }\n        return result;",
        "grade-30": {
            "execution": 0
        },
        "178": "// Write your code here\n        int result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n            String currentOp = op.get(i);\n            int nextOperand = operand.get(i + 1);\n            switch (currentOp) {\n                case \"+\":\n                    result += nextOperand;\n                    break;\n                case \"-\":\n                    result -= nextOperand;\n                    break;\n                case \"*\":\n                    result *= nextOperand;\n                    break;\n                case \"//\":\n                    result /= nextOperand;\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, nextOperand);\n                    break;\n            }\n        }\n        return result;",
        "grade-178": {
            "execution": 0
        },
        "26": "// please write your code here\n        int result = operand.get(0);\n        int j = 0;\n        for(int i = 1; i < operand.size(); i++) {\n            switch(op.get(j)) {\n                case \"+\":\n                    result += operand.get(i);\n                    break;\n                case \"-\":\n                    result -= operand.get(i);\n                    break;\n                case \"*\":\n                    result *= operand.get(i);\n                    break;\n                case \"//\":\n                    result /= operand.get(i);\n                    break;\n                case \"**\":\n                    result = (int)Math.pow(result, operand.get(i));\n                    break;\n            }\n            j++;\n        }\n        return result;",
        "grade-26": {
            "execution": 0
        },
        "192": "String operator = String.join(\"\", op);\n        String operands = String.join(\"\", operand.stream().map(String::valueOf).collect(Collectors.toList()));\n        String expression = operands.substring(0,1);\n        for (int i = 0; i < operator.length(); i++) {\n            expression += operator.substring(i, i+1) + operands.substring(i+1, i+2);\n        }\n        int result = 0;\n        try {\n            ScriptEngineManager mgr = new ScriptEngineManager();\n            ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n            result = (int)engine.eval(expression);\n        } catch (ScriptException e) {\n            e.printStackTrace();\n        }\n        return result;",
        "grade-192": {
            "execution": 0
        },
        "137": "if (op.size() == 0) {\n            return operand.get(0);\n        }\n        if (op.size() == 1) {\n            return operand.get(0) + operand.get(1);\n        }\n        Stack<Integer> stack = new Stack<>();\n        for (int i = op.size() - 1; i >= 0; i--) {\n            switch (op.get(i)) {\n                case \"//\":\n                    stack.push(operand.get(i) / operand.get(i + 1));\n                    break;\n                case \"**\":\n                    stack.push((int) Math.pow(operand.get(i), operand.get(i + 1)));\n                    break;\n                case \"*\":\n                    stack.push(operand.get(i) * operand.get(i + 1));\n                    break;\n                case \"-\":\n                    stack.push(operand.get(i) - operand.get(i + 1));\n                    break;\n                case \"+\":\n                    stack.push(operand.get(i) + operand.get(i + 1));\n                    break;\n            }\n        }\n        int result = 0;\n        while (!stack.isEmpty()) {\n            result += stack.pop();\n        }\n        return result;",
        "grade-137": {
            "execution": 0
        },
        "8": "Integer result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n                result += operand.get(i + 1);\n            } else if (op.get(i).equals(\"-\")) {\n                result -= operand.get(i + 1);\n            } else if (op.get(i).equals(\"*\")) {\n                result *= operand.get(i + 1);\n            } else if (op.get(i).equals(\"/\")) {\n                result /= operand.get(i + 1);\n            } else if (op.get(i).equals(\"^\")) {\n                result = (int) Math.pow(result, operand.get(i + 1));\n            }\n        }\n        return result;",
        "grade-8": {
            "execution": 0
        },
        "7": "if (op.size() == 0 || operand.size() == 0) return 0;\n        ArrayList<Integer> tmpOperand = new ArrayList<Integer>();\n        ArrayList<String> tmpOp = new ArrayList<String>();\n        int ans = 0;\n        for (int i = 0; i < op.size(); i++) {\n            if (op.get(i).equals(\"+\") || op.get(i).equals(\"-\")) {\n                tmpOperand.add(operand.get(i));\n                tmpOp.add(op.get(i));\n            } else if (op.get(i).equals(\"*\")) {\n                int t = operand.get(i)*operand.get(i+1);\n                tmpOperand.add(t);\n                tmpOp.add(op.get(i));\n            } else if (op.get(i).equals(\"//\")) {\n                int t = operand.get(i)/operand.get(i+1);\n                tmpOperand.add(t);\n                tmpOp.add(op.get(i));\n            } else if (op.get(i).equals(\"**\")) {\n                int t = (int)Math.pow(operand.get(i), operand.get(i+1));\n                tmpOperand.add(t);\n                tmpOp.add(op.get(i));\n            }\n        }\n        if (tmpOperand.size() == 1) return tmpOperand.get(0);\n        ans = tmpOperand.get(0);\n        for (int i = 0; i < tmpOp.size(); i++) {\n            if (tmpOp.get(i).equals(\"+\")) {\n                ans += tmpOperand.get(i+1);\n            } else if (tmpOp.get(i).equals(\"-\")) {\n                ans -= tmpOperand.get(i+1);\n            }\n        }\n        return ans;",
        "grade-7": {
            "execution": 0
        },
        "27": "if (op.size() + 1 != operand.size()) {\n            throw new IllegalArgumentException(\"operator size + 1 != operand size\");\n        }\n        for (int i = 1; i < operand.size(); i++) {\n            if (op.get(i - 1).equals(\"+\")) {\n                operand.set(i, operand.get(i - 1) + operand.get(i));\n            } else if (op.get(i - 1).equals(\"-\")) {\n                operand.set(i, operand.get(i - 1) - operand.get(i));\n            } else if (op.get(i - 1).equals(\"*\")) {\n                operand.set(i, operand.get(i - 1) * operand.get(i));\n            } else if (op.get(i - 1).equals(\"//\")) {\n                operand.set(i, operand.get(i - 1) / operand.get(i));\n            } else if (op.get(i - 1).equals(\"**\")) {\n                operand.set(i, (int) Math.pow(operand.get(i - 1), operand.get(i)));\n            } else {\n                throw new IllegalArgumentException(\"unknown operator\");\n            }\n        }\n        return operand.get(operand.size() - 1);",
        "grade-27": {
            "execution": 0
        },
        "66": "// write code here\n        // the first operator\n        int i = 0;\n        int j = 0;\n        int result = 0;\n        int first = operand.get(i);\n        int second = operand.get(i + 1);\n        if(op.get(j).equals(\"+\")) {\n            result = first + second;\n        } else if(op.get(j).equals(\"-\")) {\n            result = first - second;\n        } else if(op.get(j).equals(\"*\")) {\n            result = first * second;\n        } else if(op.get(j).equals(\"//\")) {\n            result = first / second;\n        } else if(op.get(j).equals(\"**\")) {\n            result = (int)Math.pow(first, second);\n        }\n        j++;\n        // the rest operators\n        while(j < op.size()) {\n            int tmp = operand.get(i + 2);\n            if(op.get(j).equals(\"+\")) {\n                result += tmp;\n            } else if(op.get(j).equals(\"-\")) {\n                result -= tmp;\n            } else if(op.get(j).equals(\"*\")) {\n                result *= tmp;\n            } else if(op.get(j).equals(\"//\")) {\n                result /= tmp;\n            } else if(op.get(j).equals(\"**\")) {\n                result = (int)Math.pow(result, tmp);\n            }\n            j++;\n        }\n        return result;",
        "grade-66": {
            "execution": 0
        },
        "71": "// This is a classic problem of converting infix expression to postfix expression and \n        // then evaluating the postfix expression.\n        // 1. Infix to postfix conversion: https://www.geeksforgeeks.org/stack-set-2-infix-to-postfix/\n        // 2. Postfix evaluation: https://www.geeksforgeeks.org/stack-set-4-evaluation-postfix-expression/\n        // Note:\n        // See cpp solution for detailed implementation.\n        // Time complexity: O(N)\n        // Space complexity: O(N)\n        int size = op.size();\n        int len = size + 1;\n        ArrayList<String> postfix = new ArrayList<String>();\n        Stack<String> s = new Stack<String>();\n        for (int i = 0; i < len; i++) {\n            if (i < size) {\n                if (s.isEmpty()) {\n                    s.push(op.get(i));\n                } else {\n                    String op1 = op.get(i);\n                    String op2 = s.peek();\n                    int prec1 = getPrecedence(op1);\n                    int prec2 = getPrecedence(op2);\n                    if (prec1 > prec2) {\n                        s.push(op1);\n                    } else {\n                        while (!s.isEmpty() && prec1 <= prec2) {\n                            postfix.add(s.pop());\n                            if (!s.isEmpty()) {\n                                op2 = s.peek();\n                                prec2 = getPrecedence(op2);\n                            }\n                        }\n                        s.push(op1);\n                    }\n                }\n            } else {\n                postfix.add(String.valueOf(operand.get(i)));\n            }\n        }\n        while (!s.isEmpty()) {\n            postfix.add(s.pop());\n        }\n        Stack<Integer> nums = new Stack<Integer>();\n        for (String p : postfix) {\n            if (isOperator(p)) {\n                int num2 = nums.pop();\n                int num1 = nums",
        "grade-71": {
            "execution": 0
        },
        "164": "// Insert your code here\n        return 0;",
        "grade-164": {
            "execution": 0
        },
        "198": "// Insert your code here\n        int result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n            String opStr = op.get(i);\n            int operand1 = operand.get(i);\n            int operand2 = operand.get(i + 1);\n            result = doOperation(opStr, operand1, operand2);\n        }\n        return result;",
        "grade-198": {
            "execution": 0
        },
        "183": "int result = operand.get(0);\n        for (int i = 0; i < op.size(); i++) {\n            String curOp = op.get(i);\n            int op2 = operand.get(i + 1);\n            if (curOp.equals(\"+\")) result += op2;\n            else if (curOp.equals(\"-\")) result -= op2;\n            else if (curOp.equals(\"*\")) result *= op2;\n            else if (curOp.equals(\"//\")) result /= op2;\n            else if (curOp.equals(\"**\")) result = (int) Math.pow(result, op2);\n        }\n        return result;",
        "grade-183": {
            "execution": 0
        },
        "60": "ArrayList<Integer> opd = new ArrayList<Integer>();\n        ArrayList<String> ops = new ArrayList<String>();\n        String[] operators = {\"**\", \"//\", \"*\", \"-\", \"+\"};\n        for (int i = 0; i < op.size(); i++) {\n            if (ops.size() == 0) {\n                ops.add(op.get(i));\n                continue;\n            }\n            for (int j = 0; j < operators.length; j++) {\n                if (ops.get(ops.size() - 1).equals(operators[j])) {\n                    if (j < operators.length - 1 && operators[j + 1].equals(op.get(i))) {\n                        continue;\n                    }\n                    else {\n                        ops.add(op.get(i));\n                        break;\n                    }\n                }\n                else if (j == operators.length - 1) {\n                    ops.add(op.get(i));\n                    break;\n                }\n            }\n        }\n        System.out.println(ops);\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops.get(i).equals(\"**\")) {\n                int exp = operand.get(i + 1);\n                int base = operand.get(i);\n                int result = 0;\n                for (int j = 0; j < exp; j++) {\n                    result += base;\n                }\n                opd.add(result);\n            }\n            else if (ops.get(i).equals(\"//\")) {\n                int val = operand.get(i);\n                int div = operand.get(i + 1);\n                int quotient = 0;\n                while (val >= div) {\n                    val -= div;\n                    quotient++;\n                }\n                opd.add(quotient);\n            }\n            else {\n                opd.add(operand.get(i));\n            }\n        }\n        System.out.println(opd);\n        int counter = 0;\n        while (counter < ops.size()) {\n            if (ops.get(counter).equals",
        "grade-60": {
            "execution": 0
        },
        "bleu-34": 0.08480289257156065,
        "bleu-6": 0.1804722795907146,
        "bleu-84": 0.18436629068140672,
        "bleu-74": 0.2272654497124493,
        "bleu-68": 0.23350777202977954,
        "bleu-41": 0.1344794003974853,
        "bleu-30": 0.13330537854698737,
        "bleu-178": 0.054349805696741756,
        "bleu-26": 0.07148874841133812,
        "bleu-192": 0.058634118697244934,
        "bleu-137": 0.2741899204401096,
        "bleu-8": 0.2200556879640664,
        "bleu-7": 0.4762285036276959,
        "bleu-27": 0.3681468861503012,
        "bleu-66": 0.2495840260441237,
        "bleu-71": 0.19542366310640613,
        "bleu-164": 1.2626366465969395e-21,
        "bleu-198": 0.00971904319094345,
        "bleu-183": 0.0932654543847985,
        "bleu-60": 0.42481346428658256,
        "codebleu-34": 0.19384602847108054,
        "codebleu-6": 0.2719870665589734,
        "codebleu-84": 0.3099513057874681,
        "codebleu-74": 0.3314236504554018,
        "codebleu-68": 0.3367025469467968,
        "codebleu-41": 0.255578708159202,
        "codebleu-30": 0.2432395247332582,
        "codebleu-178": 0.15375614613446167,
        "codebleu-26": 0.19164961150234702,
        "codebleu-192": 0.21480320091573696,
        "codebleu-137": 0.4351774738505682,
        "codebleu-8": 0.3314236504554018,
        "codebleu-7": 0.7223763629986075,
        "codebleu-27": 0.4934750708766405,
        "codebleu-66": 0.5021781128467263,
        "codebleu-71": 0.5102081349433338,
        "codebleu-164": 0.006451612903225809,
        "codebleu-198": 0.10926604070860295,
        "codebleu-183": 0.19708065057069826,
        "codebleu-60": 0.7046863742140153,
        "chrf-34": 0.19459636938232144,
        "chrf-6": 0.29926395891029595,
        "chrf-84": 0.29804071953868727,
        "chrf-74": 0.3459121712788391,
        "chrf-68": 0.3510370939847014,
        "chrf-41": 0.27884437523256156,
        "chrf-30": 0.2966065777994665,
        "chrf-178": 0.17577499203727434,
        "chrf-26": 0.1809779243763475,
        "chrf-192": 0.17299297602595506,
        "chrf-137": 0.30813807643993496,
        "chrf-8": 0.35235862663374606,
        "chrf-7": 0.4834170762331471,
        "chrf-27": 0.39686255414205474,
        "chrf-66": 0.3200311499013434,
        "chrf-71": 0.28136670507243877,
        "chrf-164": 0.014097384374830442,
        "chrf-198": 0.1425621075146393,
        "chrf-183": 0.2412631318502087,
        "chrf-60": 0.46520688878703514,
        "rougel-34": 0.3205574912891986,
        "rougel-6": 0.40456769983686786,
        "rougel-84": 0.41223832528180354,
        "rougel-74": 0.4694533762057878,
        "rougel-68": 0.46570972886762363,
        "rougel-41": 0.3804713804713805,
        "rougel-30": 0.34840871021775544,
        "rougel-178": 0.24561403508771926,
        "rougel-26": 0.2896551724137931,
        "rougel-192": 0.32666666666666666,
        "rougel-137": 0.4320457796852647,
        "rougel-8": 0.47419354838709676,
        "rougel-7": 0.5583524027459955,
        "rougel-27": 0.5385656292286874,
        "rougel-66": 0.42635658914728686,
        "rougel-71": 0.3400713436385256,
        "rougel-164": 0.023148148148148147,
        "rougel-198": 0.21611001964636542,
        "rougel-183": 0.31724137931034485,
        "rougel-60": 0.5068181818181818,
        "meteor-34": 0.189574823844815,
        "meteor-6": 0.252721430679629,
        "meteor-84": 0.24324103904919564,
        "meteor-74": 0.2819569100641997,
        "meteor-68": 0.2816054304954336,
        "meteor-41": 0.2064797661607814,
        "meteor-30": 0.1881560772656083,
        "meteor-178": 0.13135860395379853,
        "meteor-26": 0.1584054893549486,
        "meteor-192": 0.1542394833186204,
        "meteor-137": 0.30327086365476663,
        "meteor-8": 0.27954514621181287,
        "meteor-7": 0.4708199473114254,
        "meteor-27": 0.41093356113892215,
        "meteor-66": 0.307095573641522,
        "meteor-71": 0.2895577230679746,
        "meteor-164": 0.006551362683438156,
        "meteor-198": 0.1091297953238619,
        "meteor-183": 0.1750679935991975,
        "meteor-60": 0.42202655748847795,
        "ruby-34": 0.21040189125295505,
        "ruby-6": 0.2742316784869976,
        "ruby-84": 0.2907801418439716,
        "ruby-74": 0.3356973995271868,
        "ruby-68": 0.33333333333333337,
        "ruby-41": 0.2600472813238771,
        "ruby-30": 0.23167848699763594,
        "ruby-178": 0.1536643026004728,
        "ruby-26": 0.19148936170212771,
        "ruby-192": 0.21513002364066192,
        "ruby-137": 0.3049645390070922,
        "ruby-8": 0.34042553191489366,
        "ruby-7": 0.34811529933481156,
        "ruby-27": 0.37825059101654845,
        "ruby-66": 0.3073286052009456,
        "ruby-71": 0.14657210401891252,
        "ruby-164": 0.011820330969267157,
        "ruby-198": 0.1300236406619385,
        "ruby-183": 0.20803782505910162,
        "ruby-60": 0.3107221006564551,
        "codebertscore_f1-34": 0.7969474792480469,
        "codebertscore_f3-34": 0.7832235097885132,
        "codebertscore_f1-6": 0.8170105814933777,
        "codebertscore_f3-6": 0.803762674331665,
        "codebertscore_f1-84": 0.8058468103408813,
        "codebertscore_f3-84": 0.7877070903778076,
        "codebertscore_f1-74": 0.8322134613990784,
        "codebertscore_f3-74": 0.8133217096328735,
        "codebertscore_f1-68": 0.8263834118843079,
        "codebertscore_f3-68": 0.8121378421783447,
        "codebertscore_f1-41": 0.8032765984535217,
        "codebertscore_f3-41": 0.7761735320091248,
        "codebertscore_f1-30": 0.7882847189903259,
        "codebertscore_f3-30": 0.7725738286972046,
        "codebertscore_f1-178": 0.7596573829650879,
        "codebertscore_f3-178": 0.7498087882995605,
        "codebertscore_f1-26": 0.7812598943710327,
        "codebertscore_f3-26": 0.7753474712371826,
        "codebertscore_f1-192": 0.7129471898078918,
        "codebertscore_f3-192": 0.7099450826644897,
        "codebertscore_f1-137": 0.8102815747261047,
        "codebertscore_f3-137": 0.8066546320915222,
        "codebertscore_f1-8": 0.8311915397644043,
        "codebertscore_f3-8": 0.811158299446106,
        "codebertscore_f1-7": 0.840583086013794,
        "codebertscore_f3-7": 0.8426181674003601,
        "codebertscore_f1-27": 0.8395907282829285,
        "codebertscore_f3-27": 0.8350242972373962,
        "codebertscore_f1-66": 0.7984534502029419,
        "codebertscore_f3-66": 0.7855011820793152,
        "codebertscore_f1-71": 0.7344737648963928,
        "codebertscore_f3-71": 0.7659337520599365,
        "codebertscore_f1-164": 0.505589485168457,
        "codebertscore_f3-164": 0.461239755153656,
        "codebertscore_f1-198": 0.7363471388816833,
        "codebertscore_f3-198": 0.7151066064834595,
        "codebertscore_f1-183": 0.7787063717842102,
        "codebertscore_f3-183": 0.7542281746864319,
        "codebertscore_f1-60": 0.817714512348175,
        "codebertscore_f3-60": 0.8234585523605347,
        "codebertscore_s_f1-34": 0.819680392742157,
        "codebertscore_s_f3-34": 0.8057751059532166,
        "codebertscore_s_f1-6": 0.8387041687965393,
        "codebertscore_s_f3-6": 0.8254206776618958,
        "codebertscore_s_f1-84": 0.8252512216567993,
        "codebertscore_s_f3-84": 0.8059594631195068,
        "codebertscore_s_f1-74": 0.8586053252220154,
        "codebertscore_s_f3-74": 0.8371150493621826,
        "codebertscore_s_f1-68": 0.8446873426437378,
        "codebertscore_s_f3-68": 0.8286483883857727,
        "codebertscore_s_f1-41": 0.8314300179481506,
        "codebertscore_s_f3-41": 0.8082160949707031,
        "codebertscore_s_f1-30": 0.8173490762710571,
        "codebertscore_s_f3-30": 0.8082749247550964,
        "codebertscore_s_f1-178": 0.781268298625946,
        "codebertscore_s_f3-178": 0.7775752544403076,
        "codebertscore_s_f1-26": 0.7909257411956787,
        "codebertscore_s_f3-26": 0.7826741933822632,
        "codebertscore_s_f1-192": 0.7332640290260315,
        "codebertscore_s_f3-192": 0.7401817440986633,
        "codebertscore_s_f1-137": 0.8196226954460144,
        "codebertscore_s_f3-137": 0.8148731589317322,
        "codebertscore_s_f1-8": 0.8561716675758362,
        "codebertscore_s_f3-8": 0.8344855308532715,
        "codebertscore_s_f1-7": 0.841862678527832,
        "codebertscore_s_f3-7": 0.8440608382225037,
        "codebertscore_s_f1-27": 0.8461810350418091,
        "codebertscore_s_f3-27": 0.8405069708824158,
        "codebertscore_s_f1-66": 0.8179013133049011,
        "codebertscore_s_f3-66": 0.8059952855110168,
        "codebertscore_s_f1-71": 0.7490293979644775,
        "codebertscore_s_f3-71": 0.7772185206413269,
        "codebertscore_s_f1-164": 0.5589338541030884,
        "codebertscore_s_f3-164": 0.5440438985824585,
        "codebertscore_s_f1-198": 0.7726184129714966,
        "codebertscore_s_f3-198": 0.7624326348304749,
        "codebertscore_s_f1-183": 0.8139782547950745,
        "codebertscore_s_f3-183": 0.7987343072891235,
        "codebertscore_s_f1-60": 0.8229566812515259,
        "codebertscore_s_f3-60": 0.8283138871192932,
        "gpt35_nsnr-34": 4,
        "raw_gpt35_nsnr-34": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-84": 3,
        "raw_gpt35_nsnr-84": "3",
        "gpt35_nsnr-74": 4,
        "raw_gpt35_nsnr-74": "4",
        "gpt35_nsnr-68": 4,
        "raw_gpt35_nsnr-68": "4",
        "gpt35_nsnr-41": 4,
        "raw_gpt35_nsnr-41": "4",
        "gpt35_nsnr-30": 3,
        "raw_gpt35_nsnr-30": "3",
        "gpt35_nsnr-178": 4,
        "raw_gpt35_nsnr-178": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-192": 3,
        "raw_gpt35_nsnr-192": "3",
        "gpt35_nsnr-137": 3,
        "raw_gpt35_nsnr-137": "3",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-27": 4,
        "raw_gpt35_nsnr-27": "4",
        "gpt35_nsnr-66": 4,
        "raw_gpt35_nsnr-66": "4",
        "gpt35_nsnr-71": 3,
        "raw_gpt35_nsnr-71": "3",
        "gpt35_nsnr-164": 0,
        "raw_gpt35_nsnr-164": "0",
        "gpt35_nsnr-198": 2,
        "raw_gpt35_nsnr-198": "2",
        "gpt35_nsnr-183": 4,
        "raw_gpt35_nsnr-183": "4",
        "gpt35_nsnr-60": 3,
        "raw_gpt35_nsnr-60": "3",
        "gpt35_nswr-34": 3,
        "raw_gpt35_nswr-34": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-84": 2,
        "raw_gpt35_nswr-84": "2",
        "gpt35_nswr-74": 3,
        "raw_gpt35_nswr-74": "3",
        "gpt35_nswr-68": 3,
        "raw_gpt35_nswr-68": "3",
        "gpt35_nswr-41": 3,
        "raw_gpt35_nswr-41": "3",
        "gpt35_nswr-30": 2,
        "raw_gpt35_nswr-30": "2",
        "gpt35_nswr-178": 3,
        "raw_gpt35_nswr-178": "3",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-192": 3,
        "raw_gpt35_nswr-192": "3",
        "gpt35_nswr-137": 3,
        "raw_gpt35_nswr-137": "3",
        "gpt35_nswr-8": 2,
        "raw_gpt35_nswr-8": "2",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-27": 4,
        "raw_gpt35_nswr-27": "4",
        "gpt35_nswr-66": 3,
        "raw_gpt35_nswr-66": "3",
        "gpt35_nswr-71": 3,
        "raw_gpt35_nswr-71": "3",
        "gpt35_nswr-164": 2,
        "raw_gpt35_nswr-164": "2",
        "gpt35_nswr-198": 2,
        "raw_gpt35_nswr-198": "2",
        "gpt35_nswr-183": 4,
        "raw_gpt35_nswr-183": "4",
        "gpt35_nswr-60": 3,
        "raw_gpt35_nswr-60": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    // >>> fibfib(1)\n    // 0\n    // >>> fibfib(5)\n    // 4\n    // >>> fibfib(8)\n    // 24\n    public static int fibfib(int n) {\n",
        "snippet": [
            "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    }\n}"
        ],
        "simplified": "The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3). Please write a function to efficiently compute the n-th element of the fibfib number sequence.",
        "task_id": "63",
        "35": "int first = 0;\n        int second = 0;\n        int third = 1;\n        int result = 0;\n        for (int i = 3; i <= n; i++) {\n            result = first + second + third;\n            first = second;\n            second = third;\n            third = result;\n        }\n        return result;",
        "grade-35": {
            "execution": 0
        },
        "7": "if (n <= 1) return 0;\n        else if (n == 2) return 1;\n        else return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);",
        "grade-7": {
            "execution": 1
        },
        "88": "if (n < 0) return 0;\n        int x = 0, y = 0, z = 1;\n        for (int i = 2; i <= n; i++) {\n            int t = x;\n            x = y;\n            y = z;\n            z = t + y + z;\n        }\n        return z;",
        "grade-88": {
            "execution": 0
        },
        "78": "if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 1;\n        int a = 0;\n        int b = 0;\n        int c = 1;\n        int ans = 0;\n        for (int i = 3; i <= n; i++) {\n            ans = a + b + c;\n            a = b;\n            b = c;\n            c = ans;\n        }\n        return ans;",
        "grade-78": {
            "execution": 1
        },
        "71": "if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        int f1 = 0;\n        int f2 = 0;\n        int f3 = 1;\n        int current = 3;\n        while (current < n) {\n            int temp = f1 + f2 + f3;\n            f1 = f2;\n            f2 = f3;\n            f3 = temp;\n            current++;\n        }\n        return f1 + f2 + f3;",
        "grade-71": {
            "execution": 1
        },
        "44": "int[] dp = new int[n+1];\n        for (int i = 0; i <= n; i++) {\n            if (i == 0) {\n                dp[i] = 0;\n            } else if (i == 1) {\n                dp[i] = 0;\n            } else if (i == 2) {\n                dp[i] = 1;\n            } else {\n                dp[i] = dp[i-1] + dp[i-2] + dp[i-3];\n            }\n        }\n        return dp[n];",
        "grade-44": {
            "execution": 1
        },
        "33": "if (n < 2) return 0;\n        int f0 = 0, f1 = 0, f2 = 1;\n        for (int i = 3; i <= n; i++) {\n            int f3 = f0 + f1 + f2;\n            f0 = f1;\n            f1 = f2;\n            f2 = f3;\n        }\n        return f2;",
        "grade-33": {
            "execution": 1
        },
        "180": "// TODO: write your code here\n        return -1;",
        "grade-180": {
            "execution": 0
        },
        "28": "// TODO\n        return 0;",
        "grade-28": {
            "execution": 0
        },
        "196": "int i = 0;\n        int a = 0;\n        int b = 0;\n        int c = 1;\n        while (i < n) {\n            int d = a;\n            a = b;\n            b = c;\n            c = d + b + c;\n            i++;\n        }\n        return a;",
        "grade-196": {
            "execution": 0
        },
        "137": "if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        int a = 0;\n        int b = 0;\n        int c = 1;\n        int ans = 0;\n        for (int i = 2; i < n; i++) {\n            ans = a + b + c;\n            a = b;\n            b = c;\n            c = ans;\n        }\n        return ans;",
        "grade-137": {
            "execution": 1
        },
        "9": "if (n <= 1) return 0;\n        if (n == 2) return 1;\n        int[] dp = new int[n+1];\n        dp[0] = 0;\n        dp[1] = 0;\n        dp[2] = 1;\n        for (int i = 3; i <= n; i++) {\n            dp[i] = dp[i-1] + dp[i-2] + dp[i-3];\n        }\n        return dp[n];",
        "grade-9": {
            "execution": 1
        },
        "8": "if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 1;\n        int prev = 0;\n        int prevprev = 0;\n        int prevprevprev = 1;\n        int ans = 1;\n        for (int i = 2; i < n; i++) {\n            ans = prev + prevprev + prevprevprev;\n            prevprevprev = prevprev;\n            prevprev = prev;\n            prev = ans;\n        }\n        return ans;",
        "grade-8": {
            "execution": 0
        },
        "29": "// I haven't checked whether this is efficient. But it's a lot more efficient than a recursive solution!\n        int n1 = 0;\n        int n2 = 0;\n        int n3 = 1;\n        int sum = n1 + n2 + n3;\n        for (int i = 3; i <= n; i++) {\n            n1 = n2;\n            n2 = n3;\n            n3 = sum;\n            sum = n1 + n2 + n3;\n        }\n        return sum;",
        "grade-29": {
            "execution": 0
        },
        "69": "if (n <= 2) {\n            return n-1;\n        } else {\n            int a = 0;\n            int b = 1;\n            int c = 1;\n            for (int i = 3; i <= n; i++) {\n                int s = a + b + c;\n                a = b;\n                b = c;\n                c = s;\n            }\n            return c;\n        }",
        "grade-69": {
            "execution": 0
        },
        "75": "int[] dp = new int[n+1];\n      dp[0] = 0;\n      dp[1] = 0;\n      dp[2] = 1;\n      for(int i = 3; i <= n; i++) {\n        dp[i] = dp[i-1] + dp[i-2] + dp[i-3];\n      }\n      return dp[n];",
        "grade-75": {
            "execution": 0
        },
        "165": "if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 1;\n        int a = 0;\n        int b = 0;\n        int c = 1;\n        int d = 0;\n        for (int i = 0; i < n - 2; i++) {\n            d = c + b + a;\n            a = b;\n            b = c;\n            c = d;\n        }\n        return d;",
        "grade-165": {
            "execution": 1
        },
        "199": "int a = 0;\n        int b = 0;\n        int c = 1;\n        int d = 0;\n        for (int i = 0; i < n; i++) {\n            d = a + b + c;\n            a = b;\n            b = c;\n            c = d;\n        }\n        return d;",
        "grade-199": {
            "execution": 0
        },
        "185": "int[] fibfib = new int[n + 1];\n        fibfib[0] = 0;\n        fibfib[1] = 0;\n        fibfib[2] = 1;\n        for (int i = 3; i <= n; i++) {\n            fibfib[i] = fibfib[i - 1] + fibfib[i - 2] + fibfib[i - 3];\n        }\n        return fibfib[n];",
        "grade-185": {
            "execution": 0
        },
        "62": "// return fibfib(n, new int[n+1]);\n        return fibfibDP(n);",
        "grade-62": {
            "execution": 0
        },
        "bleu-35": 0.05206030212932134,
        "bleu-7": 0.5117768039571117,
        "bleu-88": 0.0758223293148425,
        "bleu-78": 0.2504560182179839,
        "bleu-71": 0.3962634121760346,
        "bleu-44": 0.15491885379646933,
        "bleu-33": 0.07484451415242871,
        "bleu-180": 0.0017543569521687342,
        "bleu-28": 3.728673458601123e-05,
        "bleu-196": 0.05233527940921286,
        "bleu-137": 0.3962634121760346,
        "bleu-9": 0.13528042632971832,
        "bleu-8": 0.2532864789767569,
        "bleu-29": 0.034610833476137304,
        "bleu-69": 0.13178770470130843,
        "bleu-75": 0.04415339520141592,
        "bleu-165": 0.25695034111157367,
        "bleu-199": 0.05236536562676534,
        "bleu-185": 0.06782541449402682,
        "bleu-62": 0.03262309930812849,
        "codebleu-35": 0.24161255411255408,
        "codebleu-7": 0.5553569124129925,
        "codebleu-88": 0.2979797979797979,
        "codebleu-78": 0.49576118326118324,
        "codebleu-71": 0.6242784992784992,
        "codebleu-44": 0.5478896103896104,
        "codebleu-33": 0.29987373737373735,
        "codebleu-180": 0.07218292094929663,
        "codebleu-28": 0.0397284026396519,
        "codebleu-196": 0.2397186147186147,
        "codebleu-137": 0.6163419913419913,
        "codebleu-9": 0.45869408369408365,
        "codebleu-8": 0.49576118326118324,
        "codebleu-29": 0.23178210678210678,
        "codebleu-69": 0.3667929292929293,
        "codebleu-75": 0.338023088023088,
        "codebleu-165": 0.5055916305916306,
        "codebleu-199": 0.2397186147186147,
        "codebleu-185": 0.3437049062049062,
        "codebleu-62": 0.15121823353607325,
        "chrf-35": 0.1638975957761103,
        "chrf-7": 0.6357082914716597,
        "chrf-88": 0.20278874174362552,
        "chrf-78": 0.40791652216685675,
        "chrf-71": 0.5605170016478809,
        "chrf-44": 0.22721732175845977,
        "chrf-33": 0.2261624314885777,
        "chrf-180": 0.07747632781141388,
        "chrf-28": 0.06947851759970383,
        "chrf-196": 0.14415917988627172,
        "chrf-137": 0.5806596480390388,
        "chrf-9": 0.29717138831694095,
        "chrf-8": 0.3524613133982314,
        "chrf-29": 0.15106815600034906,
        "chrf-69": 0.2505449192409814,
        "chrf-75": 0.15127215550696058,
        "chrf-165": 0.42000331774616323,
        "chrf-199": 0.1435381785125716,
        "chrf-185": 0.2744755712517393,
        "chrf-62": 0.24561802127359136,
        "rougel-35": 0.28099173553719003,
        "rougel-7": 0.7884615384615384,
        "rougel-88": 0.3548387096774193,
        "rougel-78": 0.490066225165563,
        "rougel-71": 0.5512820512820513,
        "rougel-44": 0.46590909090909094,
        "rougel-33": 0.3225806451612903,
        "rougel-180": 0.1111111111111111,
        "rougel-28": 0.09090909090909091,
        "rougel-196": 0.29310344827586204,
        "rougel-137": 0.5512820512820513,
        "rougel-9": 0.41463414634146345,
        "rougel-8": 0.4933333333333334,
        "rougel-29": 0.22666666666666666,
        "rougel-69": 0.3582089552238806,
        "rougel-75": 0.3194444444444444,
        "rougel-165": 0.513157894736842,
        "rougel-199": 0.2833333333333333,
        "rougel-185": 0.3611111111111111,
        "rougel-62": 0.2891566265060241,
        "meteor-35": 0.2079866888519135,
        "meteor-7": 0.7009546665797429,
        "meteor-88": 0.272360191317145,
        "meteor-78": 0.4298343281063363,
        "meteor-71": 0.46720628098584016,
        "meteor-44": 0.4608295884905431,
        "meteor-33": 0.30315585999683003,
        "meteor-180": 0.036231884057971016,
        "meteor-28": 0.027472527472527472,
        "meteor-196": 0.20134228187919467,
        "meteor-137": 0.44800917834765974,
        "meteor-9": 0.39109044238813534,
        "meteor-8": 0.3917263911315071,
        "meteor-29": 0.19047619047619052,
        "meteor-69": 0.30875490261251076,
        "meteor-75": 0.3219760992588141,
        "meteor-165": 0.43738249519216976,
        "meteor-199": 0.20000000000000004,
        "meteor-185": 0.34655939298796445,
        "meteor-62": 0.19822380106571932,
        "ruby-35": 0.1311475409836066,
        "ruby-7": 0.6833333333333333,
        "ruby-88": 0.203125,
        "ruby-78": 0.3516483516483516,
        "ruby-71": 0.4375,
        "ruby-44": 0.35344827586206895,
        "ruby-33": 0.1875,
        "ruby-180": 0.06666666666666665,
        "ruby-28": 0.050000000000000044,
        "ruby-196": 0.15000000000000002,
        "ruby-137": 0.44791666666666663,
        "ruby-9": 0.27884615384615385,
        "ruby-8": 0.3555555555555555,
        "ruby-29": 0.11111111111111116,
        "ruby-69": 0.2567567567567568,
        "ruby-75": 0.23809523809523814,
        "ruby-165": 0.3695652173913043,
        "ruby-199": 0.1333333333333333,
        "ruby-185": 0.27380952380952384,
        "ruby-62": 0.19999999999999996,
        "codebertscore_f1-35": 0.7365467548370361,
        "codebertscore_f3-35": 0.7269023060798645,
        "codebertscore_f1-7": 0.8873081803321838,
        "codebertscore_f3-7": 0.8906660676002502,
        "codebertscore_f1-88": 0.7480726838111877,
        "codebertscore_f3-88": 0.7494869232177734,
        "codebertscore_f1-78": 0.7963559031486511,
        "codebertscore_f3-78": 0.798457682132721,
        "codebertscore_f1-71": 0.8049556612968445,
        "codebertscore_f3-71": 0.8353983759880066,
        "codebertscore_f1-44": 0.7822926640510559,
        "codebertscore_f3-44": 0.7968100309371948,
        "codebertscore_f1-33": 0.7674039602279663,
        "codebertscore_f3-33": 0.7739183902740479,
        "codebertscore_f1-180": 0.6133925914764404,
        "codebertscore_f3-180": 0.6029421091079712,
        "codebertscore_f1-28": 0.6290227174758911,
        "codebertscore_f3-28": 0.5896055102348328,
        "codebertscore_f1-196": 0.7322971820831299,
        "codebertscore_f3-196": 0.7298105359077454,
        "codebertscore_f1-137": 0.799551784992218,
        "codebertscore_f3-137": 0.818112313747406,
        "codebertscore_f1-9": 0.8270216584205627,
        "codebertscore_f3-9": 0.8465021252632141,
        "codebertscore_f1-8": 0.7781519293785095,
        "codebertscore_f3-8": 0.796483039855957,
        "codebertscore_f1-29": 0.7342555522918701,
        "codebertscore_f3-29": 0.7506522536277771,
        "codebertscore_f1-69": 0.756242573261261,
        "codebertscore_f3-69": 0.7616060972213745,
        "codebertscore_f1-75": 0.7897250056266785,
        "codebertscore_f3-75": 0.7981511354446411,
        "codebertscore_f1-165": 0.8029956221580505,
        "codebertscore_f3-165": 0.8103551268577576,
        "codebertscore_f1-199": 0.7289390563964844,
        "codebertscore_f3-199": 0.7224541902542114,
        "codebertscore_f1-185": 0.830219030380249,
        "codebertscore_f3-185": 0.8462340235710144,
        "codebertscore_f1-62": 0.7645944356918335,
        "codebertscore_f3-62": 0.7621217370033264,
        "codebertscore_s_f1-35": 0.7490925788879395,
        "codebertscore_s_f3-35": 0.7446125149726868,
        "codebertscore_s_f1-7": 0.92402184009552,
        "codebertscore_s_f3-7": 0.9253393411636353,
        "codebertscore_s_f1-88": 0.7647773623466492,
        "codebertscore_s_f3-88": 0.7647886276245117,
        "codebertscore_s_f1-78": 0.8065612316131592,
        "codebertscore_s_f3-78": 0.811363160610199,
        "codebertscore_s_f1-71": 0.8165555000305176,
        "codebertscore_s_f3-71": 0.8491970896720886,
        "codebertscore_s_f1-44": 0.794929027557373,
        "codebertscore_s_f3-44": 0.8101070523262024,
        "codebertscore_s_f1-33": 0.792188286781311,
        "codebertscore_s_f3-33": 0.8031010031700134,
        "codebertscore_s_f1-180": 0.6382554769515991,
        "codebertscore_s_f3-180": 0.6288318037986755,
        "codebertscore_s_f1-28": 0.6605355739593506,
        "codebertscore_s_f3-28": 0.6144841909408569,
        "codebertscore_s_f1-196": 0.7470207214355469,
        "codebertscore_s_f3-196": 0.7461325526237488,
        "codebertscore_s_f1-137": 0.8156046271324158,
        "codebertscore_s_f3-137": 0.83478182554245,
        "codebertscore_s_f1-9": 0.8321908712387085,
        "codebertscore_s_f3-9": 0.8509200215339661,
        "codebertscore_s_f1-8": 0.7842180132865906,
        "codebertscore_s_f3-8": 0.80521559715271,
        "codebertscore_s_f1-29": 0.7541204690933228,
        "codebertscore_s_f3-29": 0.7695071697235107,
        "codebertscore_s_f1-69": 0.7749642729759216,
        "codebertscore_s_f3-69": 0.7827505469322205,
        "codebertscore_s_f1-75": 0.8043724298477173,
        "codebertscore_s_f3-75": 0.8149378299713135,
        "codebertscore_s_f1-165": 0.8100259900093079,
        "codebertscore_s_f3-165": 0.818757176399231,
        "codebertscore_s_f1-199": 0.7452872395515442,
        "codebertscore_s_f3-199": 0.7449549436569214,
        "codebertscore_s_f1-185": 0.8521701693534851,
        "codebertscore_s_f3-185": 0.8674675822257996,
        "codebertscore_s_f1-62": 0.7853167653083801,
        "codebertscore_s_f3-62": 0.7780704498291016,
        "gpt35_nsnr-35": 3,
        "raw_gpt35_nsnr-35": "3",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-88": 3,
        "raw_gpt35_nsnr-88": "3",
        "gpt35_nsnr-78": 4,
        "raw_gpt35_nsnr-78": "4",
        "gpt35_nsnr-71": 4,
        "raw_gpt35_nsnr-71": "4",
        "gpt35_nsnr-44": 3,
        "raw_gpt35_nsnr-44": "3",
        "gpt35_nsnr-33": 4,
        "raw_gpt35_nsnr-33": "4",
        "gpt35_nsnr-180": 0,
        "raw_gpt35_nsnr-180": "0",
        "gpt35_nsnr-28": 2,
        "raw_gpt35_nsnr-28": "2",
        "gpt35_nsnr-196": 3,
        "raw_gpt35_nsnr-196": "3",
        "gpt35_nsnr-137": 4,
        "raw_gpt35_nsnr-137": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-29": 4,
        "raw_gpt35_nsnr-29": "4",
        "gpt35_nsnr-69": 4,
        "raw_gpt35_nsnr-69": "4",
        "gpt35_nsnr-75": 4,
        "raw_gpt35_nsnr-75": "4",
        "gpt35_nsnr-165": 4,
        "raw_gpt35_nsnr-165": "4",
        "gpt35_nsnr-199": 3,
        "raw_gpt35_nsnr-199": "3",
        "gpt35_nsnr-185": 4,
        "raw_gpt35_nsnr-185": "4",
        "gpt35_nsnr-62": 4,
        "raw_gpt35_nsnr-62": "4",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-88": 3,
        "raw_gpt35_nswr-88": "3",
        "gpt35_nswr-78": 4,
        "raw_gpt35_nswr-78": "4",
        "gpt35_nswr-71": 4,
        "raw_gpt35_nswr-71": "4",
        "gpt35_nswr-44": 3,
        "raw_gpt35_nswr-44": "3",
        "gpt35_nswr-33": 4,
        "raw_gpt35_nswr-33": "4",
        "gpt35_nswr-180": 2,
        "raw_gpt35_nswr-180": "2",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-196": 3,
        "raw_gpt35_nswr-196": "3",
        "gpt35_nswr-137": 3,
        "raw_gpt35_nswr-137": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-29": 4,
        "raw_gpt35_nswr-29": "4",
        "gpt35_nswr-69": 3,
        "raw_gpt35_nswr-69": "3",
        "gpt35_nswr-75": 4,
        "raw_gpt35_nswr-75": "4",
        "gpt35_nswr-165": 4,
        "raw_gpt35_nswr-165": "4",
        "gpt35_nswr-199": 3,
        "raw_gpt35_nswr-199": "3",
        "gpt35_nswr-185": 3,
        "raw_gpt35_nswr-185": "3",
        "gpt35_nswr-62": 3,
        "raw_gpt35_nswr-62": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Concatenate list of strings into a single string\n    // >>> concatenate([])\n    // ''\n    // >>> concatenate(['a', 'b', 'c'])\n    // 'abc'\n    public static String concatenate(ArrayList<String> strings) {\n",
        "snippet": [
            "        return String.join(\"\", strings);\n    }\n}"
        ],
        "simplified": "Concatenate list of strings into a single string",
        "task_id": "28",
        "189": "String ret = \"\";\n        for (String s : strings) {\n            ret += s;\n        }\n        return ret;",
        "grade-189": {
            "execution": 1
        },
        "15": "String result = \"\";\n        for (String s : strings)\n            result += s;\n        return result;",
        "grade-15": {
            "execution": 1
        },
        "3": "return \"\";",
        "grade-3": {
            "execution": 0
        },
        "58": "String joinedString = \"\";\n        for (String str : strings) {\n            joinedString += str;\n        }\n        return joinedString;",
        "grade-58": {
            "execution": 1
        },
        "51": "// TODO: your code here\n        String result = \"\";\n        for (String s : strings) {\n            result += s;\n        }\n        return result;",
        "grade-51": {
            "execution": 1
        },
        "42": "StringBuffer buf = new StringBuffer();\n        for (String s : strings) {\n            buf.append(s);\n        }\n        return buf.toString();",
        "grade-42": {
            "execution": 1
        },
        "18": "String result = \"\";\n        for (String string : strings) {\n            result += string;\n        }\n        return result;",
        "grade-18": {
            "execution": 1
        },
        "14": "// TODO: implement this.\n        return \"\";",
        "grade-14": {
            "execution": 0
        },
        "145": "String result = \"\";\n        for (String word : strings) {\n            result += word;\n        }\n        return result;",
        "grade-145": {
            "execution": 1
        },
        "12": "StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();",
        "grade-12": {
            "execution": 1
        },
        "158": "StringBuffer str = new StringBuffer();\n        for (String s : strings) {\n            str.append(s);\n        }\n        return str.toString();",
        "grade-158": {
            "execution": 1
        },
        "102": "// >>> concatenate([])\n        // ''\n        if (strings.size() == 0) {\n            return \"\";\n        }\n        // >>> concatenate(['a', 'b', 'c'])\n        // 'abc'\n        return strings.stream().collect(Collectors.joining());",
        "grade-102": {
            "execution": 1
        },
        "4": "String result = \"\";\n        for (String s : strings) {\n            result += s;\n        }\n        return result;",
        "grade-4": {
            "execution": 1
        },
        "40": "StringJoiner joiner = new StringJoiner(\"\");\n        strings.forEach(s -> joiner.add(s));\n        return joiner.toString();",
        "grade-40": {
            "execution": 1
        },
        "44": "StringBuffer buffer = new StringBuffer();\n        for (String string : strings) {\n            buffer.append(string);\n        }\n        return buffer.toString();",
        "grade-44": {
            "execution": 1
        },
        "132": "String out = \"\";\n        for (String s : strings) {\n            out += s;\n        }\n        return out;",
        "grade-132": {
            "execution": 1
        },
        "163": "// YOUR CODE HERE\n        //throw new UnsupportedOperationException(\"Not implemented\");\n        String str = \"\";\n        for(String s : strings)\n            str += s;\n        return str;",
        "grade-163": {
            "execution": 1
        },
        "149": "// Your code here\n        return null;",
        "grade-149": {
            "execution": 0
        },
        "37": "String s = new String();\n        for (String string : strings) {\n            s += string;\n        }\n        return s;",
        "grade-37": {
            "execution": 1
        },
        "194": "String out = \"\";\n        for (String string : strings) {\n            out += string;\n        }\n        return out;",
        "grade-194": {
            "execution": 1
        },
        "bleu-189": 0.06312748574267699,
        "bleu-15": 0.06108557268562174,
        "bleu-3": 0.04004304603105518,
        "bleu-58": 0.05538030403862677,
        "bleu-51": 0.04759465490908452,
        "bleu-42": 0.057301920691894166,
        "bleu-18": 0.06312748574267699,
        "bleu-14": 0.07858254245931845,
        "bleu-145": 0.06312748574267699,
        "bleu-12": 0.057301920691894166,
        "bleu-158": 0.057301920691894166,
        "bleu-102": 0.02091652648223707,
        "bleu-4": 0.06312748574267699,
        "bleu-40": 0.05558947744927455,
        "bleu-44": 0.057301920691894166,
        "bleu-132": 0.06312748574267699,
        "bleu-163": 0.0367483224173178,
        "bleu-149": 0.03515208856700362,
        "bleu-37": 0.05422591452069786,
        "bleu-194": 0.06312748574267699,
        "codebleu-189": 0.4411764705882352,
        "codebleu-15": 0.4313725490196078,
        "codebleu-3": 0.17286662105265865,
        "codebleu-58": 0.4411764705882352,
        "codebleu-51": 0.4411764705882352,
        "codebleu-42": 0.41764705882352937,
        "codebleu-18": 0.4411764705882352,
        "codebleu-14": 0.3352941176470588,
        "codebleu-145": 0.4411764705882352,
        "codebleu-12": 0.41764705882352937,
        "codebleu-158": 0.41764705882352937,
        "codebleu-102": 0.584313725490196,
        "codebleu-4": 0.4411764705882352,
        "codebleu-40": 0.49803921568627446,
        "codebleu-44": 0.41764705882352937,
        "codebleu-132": 0.4411764705882352,
        "codebleu-163": 0.4313725490196078,
        "codebleu-149": 0.21571095596520667,
        "codebleu-37": 0.34117647058823525,
        "codebleu-194": 0.4411764705882352,
        "chrf-189": 0.41763823985961435,
        "chrf-15": 0.39221994143044125,
        "chrf-3": 0.16131602874389178,
        "chrf-58": 0.37828816824671163,
        "chrf-51": 0.3590199269039978,
        "chrf-42": 0.34851691478291613,
        "chrf-18": 0.3759791160771884,
        "chrf-14": 0.17541625584968712,
        "chrf-145": 0.3840426120536728,
        "chrf-12": 0.35018165918649546,
        "chrf-158": 0.34851691478291613,
        "chrf-102": 0.2742132770368016,
        "chrf-4": 0.39680915606493433,
        "chrf-40": 0.345415380467424,
        "chrf-44": 0.3122536804946314,
        "chrf-132": 0.41763823985961435,
        "chrf-163": 0.3035393986898653,
        "chrf-149": 0.14853863406630294,
        "chrf-37": 0.3795684878201894,
        "chrf-194": 0.3946226626415969,
        "rougel-189": 0.3888888888888889,
        "rougel-15": 0.35294117647058826,
        "rougel-3": 0.47058823529411764,
        "rougel-58": 0.3589743589743589,
        "rougel-51": 0.32558139534883723,
        "rougel-42": 0.25531914893617025,
        "rougel-18": 0.3888888888888889,
        "rougel-14": 0.33333333333333337,
        "rougel-145": 0.3888888888888889,
        "rougel-12": 0.25531914893617025,
        "rougel-158": 0.25531914893617025,
        "rougel-102": 0.18604651162790695,
        "rougel-4": 0.3888888888888889,
        "rougel-40": 0.28571428571428575,
        "rougel-44": 0.25531914893617025,
        "rougel-132": 0.3888888888888889,
        "rougel-163": 0.22641509433962265,
        "rougel-149": 0.1904761904761905,
        "rougel-37": 0.3157894736842105,
        "rougel-194": 0.3888888888888889,
        "meteor-189": 0.4916225749559082,
        "meteor-15": 0.4574275362318841,
        "meteor-3": 0.26084710743801653,
        "meteor-58": 0.5202797202797202,
        "meteor-51": 0.4682119761484841,
        "meteor-42": 0.3523385761589405,
        "meteor-18": 0.4916225749559082,
        "meteor-14": 0.290625,
        "meteor-145": 0.4916225749559082,
        "meteor-12": 0.3523385761589405,
        "meteor-158": 0.3523385761589405,
        "meteor-102": 0.4983552631578947,
        "meteor-4": 0.4916225749559082,
        "meteor-40": 0.44985072218187694,
        "meteor-44": 0.3523385761589405,
        "meteor-132": 0.4916225749559082,
        "meteor-163": 0.4020700636942675,
        "meteor-149": 0.08,
        "meteor-37": 0.33774073009485484,
        "meteor-194": 0.4916225749559082,
        "ruby-189": 0.21739130434782605,
        "ruby-15": 0.19047619047619047,
        "ruby-3": 0.3076923076923077,
        "ruby-58": 0.23076923076923073,
        "ruby-51": 0.19999999999999996,
        "ruby-42": 0.17647058823529416,
        "ruby-18": 0.21739130434782605,
        "ruby-14": 0.07692307692307687,
        "ruby-145": 0.21739130434782605,
        "ruby-12": 0.17647058823529416,
        "ruby-158": 0.17647058823529416,
        "ruby-102": 0.09589041095890416,
        "ruby-4": 0.21739130434782605,
        "ruby-40": 0.16666666666666663,
        "ruby-44": 0.17647058823529416,
        "ruby-132": 0.21739130434782605,
        "ruby-163": 0.15000000000000002,
        "ruby-149": 0.07692307692307687,
        "ruby-37": 0.24,
        "ruby-194": 0.21739130434782605,
        "codebertscore_f1-189": 0.7239019274711609,
        "codebertscore_f3-189": 0.7481909990310669,
        "codebertscore_f1-15": 0.7377516627311707,
        "codebertscore_f3-15": 0.7586405873298645,
        "codebertscore_f1-3": 0.7259781360626221,
        "codebertscore_f3-3": 0.6754777431488037,
        "codebertscore_f1-58": 0.7331640720367432,
        "codebertscore_f3-58": 0.758873701095581,
        "codebertscore_f1-51": 0.6997290253639221,
        "codebertscore_f3-51": 0.740933358669281,
        "codebertscore_f1-42": 0.7278307676315308,
        "codebertscore_f3-42": 0.7632201313972473,
        "codebertscore_f1-18": 0.7304041981697083,
        "codebertscore_f3-18": 0.7494581341743469,
        "codebertscore_f1-14": 0.6554375290870667,
        "codebertscore_f3-14": 0.687108039855957,
        "codebertscore_f1-145": 0.7224690914154053,
        "codebertscore_f3-145": 0.7479557394981384,
        "codebertscore_f1-12": 0.7235868573188782,
        "codebertscore_f3-12": 0.7604478001594543,
        "codebertscore_f1-158": 0.7336637377738953,
        "codebertscore_f3-158": 0.768027663230896,
        "codebertscore_f1-102": 0.6676585674285889,
        "codebertscore_f3-102": 0.7127628326416016,
        "codebertscore_f1-4": 0.726610541343689,
        "codebertscore_f3-4": 0.7493864893913269,
        "codebertscore_f1-40": 0.7213277816772461,
        "codebertscore_f3-40": 0.7773628830909729,
        "codebertscore_f1-44": 0.7303417325019836,
        "codebertscore_f3-44": 0.7637645602226257,
        "codebertscore_f1-132": 0.7286635041236877,
        "codebertscore_f3-132": 0.7514167428016663,
        "codebertscore_f1-163": 0.6827033758163452,
        "codebertscore_f3-163": 0.7353752851486206,
        "codebertscore_f1-149": 0.6835229396820068,
        "codebertscore_f3-149": 0.6914184093475342,
        "codebertscore_f1-37": 0.7562741041183472,
        "codebertscore_f3-37": 0.782898485660553,
        "codebertscore_f1-194": 0.7326926589012146,
        "codebertscore_f3-194": 0.7519176006317139,
        "codebertscore_s_f1-189": 0.7536872625350952,
        "codebertscore_s_f3-189": 0.7704761028289795,
        "codebertscore_s_f1-15": 0.7613085508346558,
        "codebertscore_s_f3-15": 0.7745112776756287,
        "codebertscore_s_f1-3": 0.7926889657974243,
        "codebertscore_s_f3-3": 0.721584677696228,
        "codebertscore_s_f1-58": 0.7663670182228088,
        "codebertscore_s_f3-58": 0.787623941898346,
        "codebertscore_s_f1-51": 0.714280366897583,
        "codebertscore_s_f3-51": 0.7593203783035278,
        "codebertscore_s_f1-42": 0.7549304962158203,
        "codebertscore_s_f3-42": 0.7826077342033386,
        "codebertscore_s_f1-18": 0.7620385885238647,
        "codebertscore_s_f3-18": 0.7716807723045349,
        "codebertscore_s_f1-14": 0.6704803705215454,
        "codebertscore_s_f3-14": 0.695268988609314,
        "codebertscore_s_f1-145": 0.7511756420135498,
        "codebertscore_s_f3-145": 0.7684842348098755,
        "codebertscore_s_f1-12": 0.752056360244751,
        "codebertscore_s_f3-12": 0.7829294800758362,
        "codebertscore_s_f1-158": 0.762153685092926,
        "codebertscore_s_f3-158": 0.7862784266471863,
        "codebertscore_s_f1-102": 0.6851744055747986,
        "codebertscore_s_f3-102": 0.7382771968841553,
        "codebertscore_s_f1-4": 0.7569935321807861,
        "codebertscore_s_f3-4": 0.7713334560394287,
        "codebertscore_s_f1-40": 0.7520373463630676,
        "codebertscore_s_f3-40": 0.8109774589538574,
        "codebertscore_s_f1-44": 0.7582030296325684,
        "codebertscore_s_f3-44": 0.7831892371177673,
        "codebertscore_s_f1-132": 0.7560072541236877,
        "codebertscore_s_f3-132": 0.7705872058868408,
        "codebertscore_s_f1-163": 0.696515679359436,
        "codebertscore_s_f3-163": 0.7448624968528748,
        "codebertscore_s_f1-149": 0.6656687259674072,
        "codebertscore_s_f3-149": 0.6847184300422668,
        "codebertscore_s_f1-37": 0.783003568649292,
        "codebertscore_s_f3-37": 0.7960703372955322,
        "codebertscore_s_f1-194": 0.7608748078346252,
        "codebertscore_s_f3-194": 0.7711285352706909,
        "gpt35_nsnr-189": 4,
        "raw_gpt35_nsnr-189": "4",
        "gpt35_nsnr-15": 4,
        "raw_gpt35_nsnr-15": "4",
        "gpt35_nsnr-3": 2,
        "raw_gpt35_nsnr-3": "2",
        "gpt35_nsnr-58": 3,
        "raw_gpt35_nsnr-58": "3",
        "gpt35_nsnr-51": 4,
        "raw_gpt35_nsnr-51": "4",
        "gpt35_nsnr-42": 4,
        "raw_gpt35_nsnr-42": "4",
        "gpt35_nsnr-18": 4,
        "raw_gpt35_nsnr-18": "4",
        "gpt35_nsnr-14": 0,
        "raw_gpt35_nsnr-14": "3 - The code snippet correctly defines the method signature for concatenating a list of strings into a single string. However, the method body is incomplete and only returns an empty string. Without the implementation, it is impossible to determine if the method will correctly concatenate the list of strings.",
        "gpt35_nsnr-145": 3,
        "raw_gpt35_nsnr-145": "3",
        "gpt35_nsnr-12": 4,
        "raw_gpt35_nsnr-12": "4",
        "gpt35_nsnr-158": 4,
        "raw_gpt35_nsnr-158": "4",
        "gpt35_nsnr-102": 4,
        "raw_gpt35_nsnr-102": "4",
        "gpt35_nsnr-4": 4,
        "raw_gpt35_nsnr-4": "4",
        "gpt35_nsnr-40": 3,
        "raw_gpt35_nsnr-40": "3",
        "gpt35_nsnr-44": 4,
        "raw_gpt35_nsnr-44": "4",
        "gpt35_nsnr-132": 4,
        "raw_gpt35_nsnr-132": "4",
        "gpt35_nsnr-163": 4,
        "raw_gpt35_nsnr-163": "4",
        "gpt35_nsnr-149": 0,
        "raw_gpt35_nsnr-149": "0",
        "gpt35_nsnr-37": 4,
        "raw_gpt35_nsnr-37": "4",
        "gpt35_nsnr-194": 4,
        "raw_gpt35_nsnr-194": "4",
        "gpt35_nswr-189": 3,
        "raw_gpt35_nswr-189": "3",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-3": 2,
        "raw_gpt35_nswr-3": "2",
        "gpt35_nswr-58": 3,
        "raw_gpt35_nswr-58": "3",
        "gpt35_nswr-51": 3,
        "raw_gpt35_nswr-51": "3",
        "gpt35_nswr-42": 4,
        "raw_gpt35_nswr-42": "4",
        "gpt35_nswr-18": 3,
        "raw_gpt35_nswr-18": "3",
        "gpt35_nswr-14": 2,
        "raw_gpt35_nswr-14": "2",
        "gpt35_nswr-145": 3,
        "raw_gpt35_nswr-145": "3",
        "gpt35_nswr-12": 4,
        "raw_gpt35_nswr-12": "4",
        "gpt35_nswr-158": 4,
        "raw_gpt35_nswr-158": "4",
        "gpt35_nswr-102": 4,
        "raw_gpt35_nswr-102": "4",
        "gpt35_nswr-4": 3,
        "raw_gpt35_nswr-4": "3",
        "gpt35_nswr-40": 3,
        "raw_gpt35_nswr-40": "3",
        "gpt35_nswr-44": 4,
        "raw_gpt35_nswr-44": "4",
        "gpt35_nswr-132": 3,
        "raw_gpt35_nswr-132": "3",
        "gpt35_nswr-163": 3,
        "raw_gpt35_nswr-163": "3",
        "gpt35_nswr-149": 0,
        "raw_gpt35_nswr-149": "0",
        "gpt35_nswr-37": 3,
        "raw_gpt35_nswr-37": "3",
        "gpt35_nswr-194": 3,
        "raw_gpt35_nswr-194": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatest_common_divisor(3, 5)\n    // 1\n    // >>> greatest_common_divisor(25, 15)\n    // 5\n    public static int greatestCommonDivisor(int a, int b) {\n",
        "snippet": [
            "        if (a == 0 || b == 0) {\n            return a + b;\n        }\n        if (a == b) {\n            return a;\n        }\n        if (a > b) {\n            return greatestCommonDivisor(a % b, b);\n        } else {\n            return greatestCommonDivisor(a, b % a);\n        }\n    }\n}"
        ],
        "simplified": "Return a greatest common divisor of two integers a and b",
        "task_id": "13",
        "33": "return a;",
        "grade-33": {
            "execution": 0
        },
        "6": "if (a == 0) {\n            return b;\n        }\n        if (b == 0) {\n            return a;\n        }\n        int c = a % b;\n        return greatestCommonDivisor(b, c);",
        "grade-6": {
            "execution": 1
        },
        "94": "if (a > b) {\n            return greatestCommonDivisor(b, a);\n        } else if (a == 0) {\n            return b;\n        } else {\n            return greatestCommonDivisor(b % a, a);\n        }",
        "grade-94": {
            "execution": 1
        },
        "78": "int c = Math.min(a, b);\n        int d = Math.max(a, b);\n        int e = 0;\n        while (c > 0) {\n            if (d % c == 0) {\n                e = c;\n                break;\n            }\n            c--;\n        }\n        return e;",
        "grade-78": {
            "execution": 0
        },
        "72": "throw new RuntimeException(\"Not Implemented.\");",
        "grade-72": {
            "execution": 0
        },
        "41": "return 1;",
        "grade-41": {
            "execution": 0
        },
        "28": "//\n        return 1;",
        "grade-28": {
            "execution": 0
        },
        "24": "// WRITE YOUR CODE HERE",
        "grade-24": {
            "execution": 0
        },
        "160": "// Your code here\n        return -1;",
        "grade-160": {
            "execution": 0
        },
        "8": "if (a % b == 0) {\n            return b;\n        } else {\n            return greatestCommonDivisor(b, a % b);\n        }",
        "grade-8": {
            "execution": 1
        },
        "7": "int max = Math.max(a, b);\n        int min = Math.min(a, b);\n        int remainder = max % min;\n        int result = 0;\n        if (remainder == 0) {\n            result = min;\n        } else {\n            result = greatestCommonDivisor(min, remainder);\n        }\n        return result;",
        "grade-7": {
            "execution": 1
        },
        "25": "int d = 1;\n        for (int i = 2; i <= a && i <= b; i++) {\n            if (a % i == 0 && b % i == 0) {\n                d = i;\n            }\n        }\n        return d;",
        "grade-25": {
            "execution": 1
        },
        "67": "if (a == 0) return b;\n        if (b == 0) return a;\n        int gcd = 0;\n        while (a % 2 == 0 && b % 2 == 0) {\n            a /= 2;\n            b /= 2;\n            gcd++;\n        }\n        while (a != b) {\n            if (a % 2 == 0) a /= 2;\n            else if (b % 2 == 0) b /= 2;\n            else if (a > b) a = (a - b) / 2;\n            else b = (b - a) / 2;\n        }\n        return a * (int) Math.pow(2, gcd);",
        "grade-67": {
            "execution": 1
        },
        "74": "if (a == 0) {\n            return b;\n        }\n        if (b == 0) {\n            return a;\n        }\n        if (a >= b) {\n            return greatestCommonDivisor(a % b, b);\n        } else {\n            return greatestCommonDivisor(a, b % a);\n        }",
        "grade-74": {
            "execution": 1
        },
        "199": "if (a < b) {\n            int x = a;\n            a = b;\n            b = x;\n        }\n        while (b != 0) {\n            int x = a % b;\n            a = b;\n            b = x;\n        }\n        return a;",
        "grade-199": {
            "execution": 1
        },
        "59": "return (b == 0) ? a : greatestCommonDivisor(b, a % b);",
        "grade-59": {
            "execution": 1
        },
        "159": "throw new RuntimeException(\"Implement me!\");",
        "grade-159": {
            "execution": 0
        },
        "69": "int c = b;\n        while (a % b != 0) {\n            c = a % b;\n            a = b;\n            b = c;\n        }\n        return c;",
        "grade-69": {
            "execution": 1
        },
        "167": "while (a != 0 && b != 0) {\n            if (a > b) {\n                a = a % b;\n            } else {\n                b = b % a;\n            }\n        }\n        return Math.max(a, b);",
        "grade-167": {
            "execution": 1
        },
        "95": "return BigInteger.valueOf(a).gcd(BigInteger.valueOf(b)).intValue();",
        "grade-95": {
            "execution": 1
        },
        "bleu-33": 2.7894680928689257e-10,
        "bleu-6": 0.298889424215305,
        "bleu-94": 0.4426035649271695,
        "bleu-78": 0.16868654273156836,
        "bleu-72": 0.0006484924403016698,
        "bleu-41": 9.670545758160159e-11,
        "bleu-28": 3.507097385147864e-07,
        "bleu-24": 0.0,
        "bleu-160": 7.215567814364041e-05,
        "bleu-8": 0.17850267935650474,
        "bleu-7": 0.2305441534901012,
        "bleu-25": 0.12804060608241494,
        "bleu-67": 0.17234943668859462,
        "bleu-74": 0.7681630524707795,
        "bleu-199": 0.10890347902694789,
        "bleu-59": 0.043455683464002075,
        "bleu-159": 0.0006484924403016698,
        "bleu-69": 0.0730790940910606,
        "bleu-167": 0.28317488871622304,
        "bleu-95": 0.012967209514132499,
        "codebleu-33": 0.02962963064200153,
        "codebleu-6": 0.3341815006488361,
        "codebleu-94": 0.4583166927397801,
        "codebleu-78": 0.4184127718525752,
        "codebleu-72": 0.04444686075753119,
        "codebleu-41": 0.02222222308996957,
        "codebleu-28": 0.02222705484839572,
        "codebleu-24": 0.029629629629629624,
        "codebleu-160": 0.04453010479299019,
        "codebleu-8": 0.29674049492831867,
        "codebleu-7": 0.42929947339304286,
        "codebleu-25": 0.34458684282839525,
        "codebleu-67": 0.5377822986407578,
        "codebleu-74": 0.6628795988515641,
        "codebleu-199": 0.31292519011303577,
        "codebleu-59": 0.1433039165773557,
        "codebleu-159": 0.04444686075753119,
        "codebleu-69": 0.24150495771578023,
        "codebleu-167": 0.4239448116630273,
        "codebleu-95": 0.13690654213165976,
        "chrf-33": 0.05272854906850142,
        "chrf-6": 0.4665592069670003,
        "chrf-94": 0.6788244762547394,
        "chrf-78": 0.16500137951321964,
        "chrf-72": 0.04698751311003358,
        "chrf-41": 0.03501870311501553,
        "chrf-28": 0.03487663434653072,
        "chrf-24": 0.003069367710251688,
        "chrf-160": 0.04928626972228701,
        "chrf-8": 0.41529998392496076,
        "chrf-7": 0.3527768166552561,
        "chrf-25": 0.13356774061954454,
        "chrf-67": 0.2835913119657243,
        "chrf-74": 0.8634947167251945,
        "chrf-199": 0.1434515404150398,
        "chrf-59": 0.25247299244896093,
        "chrf-159": 0.044274179711594856,
        "chrf-69": 0.10056030858649534,
        "chrf-167": 0.21576923428625427,
        "chrf-95": 0.10224654831134002,
        "rougel-33": 0.08333333333333333,
        "rougel-6": 0.6181818181818182,
        "rougel-94": 0.591304347826087,
        "rougel-78": 0.32307692307692315,
        "rougel-72": 0.07407407407407408,
        "rougel-41": 0.05555555555555555,
        "rougel-28": 0.05405405405405405,
        "rougel-24": 0.0,
        "rougel-160": 0.05128205128205128,
        "rougel-8": 0.5306122448979592,
        "rougel-7": 0.4,
        "rougel-25": 0.3064516129032258,
        "rougel-67": 0.4134615384615385,
        "rougel-74": 0.8837209302325583,
        "rougel-199": 0.4444444444444444,
        "rougel-59": 0.3777777777777778,
        "rougel-159": 0.07407407407407408,
        "rougel-69": 0.3725490196078432,
        "rougel-167": 0.5128205128205128,
        "rougel-95": 0.22916666666666666,
        "meteor-33": 0.024038461538461536,
        "meteor-6": 0.4026244654409119,
        "meteor-94": 0.6168212190201195,
        "meteor-78": 0.2907183228647678,
        "meteor-72": 0.04037212568018255,
        "meteor-41": 0.016025641025641028,
        "meteor-28": 0.01597444089456869,
        "meteor-24": 0.0,
        "meteor-160": 0.015873015873015876,
        "meteor-8": 0.37298088356352327,
        "meteor-7": 0.39503329601287823,
        "meteor-25": 0.25588549838526975,
        "meteor-67": 0.3866870585149238,
        "meteor-74": 0.862169603524229,
        "meteor-199": 0.2615844544095665,
        "meteor-59": 0.23675149506821652,
        "meteor-159": 0.04037212568018255,
        "meteor-69": 0.2131620795107034,
        "meteor-167": 0.4143124065769806,
        "meteor-95": 0.11386531207133059,
        "ruby-33": 0.04347826086956519,
        "ruby-6": 0.49275362318840576,
        "ruby-94": 0.42028985507246375,
        "ruby-78": 0.18840579710144922,
        "ruby-72": 0.04347826086956519,
        "ruby-41": 0.02898550724637683,
        "ruby-28": 0.02898550724637683,
        "ruby-24": 0.0,
        "ruby-160": 0.02898550724637683,
        "ruby-8": 0.37681159420289856,
        "ruby-7": 0.21739130434782605,
        "ruby-25": 0.1594202898550725,
        "ruby-67": 0.26618705035971224,
        "ruby-74": 0.8115942028985508,
        "ruby-199": 0.28985507246376807,
        "ruby-59": 0.24637681159420288,
        "ruby-159": 0.04347826086956519,
        "ruby-69": 0.21739130434782605,
        "ruby-167": 0.4057971014492754,
        "ruby-95": 0.1594202898550725,
        "codebertscore_f1-33": 0.6029840707778931,
        "codebertscore_f3-33": 0.5561437010765076,
        "codebertscore_f1-6": 0.8866547346115112,
        "codebertscore_f3-6": 0.8780733346939087,
        "codebertscore_f1-94": 0.8942066431045532,
        "codebertscore_f3-94": 0.8854466676712036,
        "codebertscore_f1-78": 0.7315415740013123,
        "codebertscore_f3-78": 0.7290584444999695,
        "codebertscore_f1-72": 0.5868693590164185,
        "codebertscore_f3-72": 0.5674170851707458,
        "codebertscore_f1-41": 0.5892026424407959,
        "codebertscore_f3-41": 0.5516331791877747,
        "codebertscore_f1-28": 0.6321274042129517,
        "codebertscore_f3-28": 0.6042259335517883,
        "codebertscore_f1-24": 0.5435600280761719,
        "codebertscore_f3-24": 0.5230812430381775,
        "codebertscore_f1-160": 0.6116051077842712,
        "codebertscore_f3-160": 0.5893717408180237,
        "codebertscore_f1-8": 0.8741944432258606,
        "codebertscore_f3-8": 0.8622439503669739,
        "codebertscore_f1-7": 0.8051994442939758,
        "codebertscore_f3-7": 0.8307129144668579,
        "codebertscore_f1-25": 0.7497832775115967,
        "codebertscore_f3-25": 0.7429191470146179,
        "codebertscore_f1-67": 0.7729092240333557,
        "codebertscore_f3-67": 0.7889609336853027,
        "codebertscore_f1-74": 0.9559001922607422,
        "codebertscore_f3-74": 0.9475184082984924,
        "codebertscore_f1-199": 0.7943541407585144,
        "codebertscore_f3-199": 0.7723905444145203,
        "codebertscore_f1-59": 0.8296311497688293,
        "codebertscore_f3-59": 0.8056073188781738,
        "codebertscore_f1-159": 0.584629237651825,
        "codebertscore_f3-159": 0.5672230124473572,
        "codebertscore_f1-69": 0.7561008930206299,
        "codebertscore_f3-69": 0.7323985695838928,
        "codebertscore_f1-167": 0.827695906162262,
        "codebertscore_f3-167": 0.8054025173187256,
        "codebertscore_f1-95": 0.6985852718353271,
        "codebertscore_f3-95": 0.7146841287612915,
        "codebertscore_s_f1-33": 0.7387534379959106,
        "codebertscore_s_f3-33": 0.6632494330406189,
        "codebertscore_s_f1-6": 0.9053407311439514,
        "codebertscore_s_f3-6": 0.8988133668899536,
        "codebertscore_s_f1-94": 0.905263364315033,
        "codebertscore_s_f3-94": 0.8965274691581726,
        "codebertscore_s_f1-78": 0.7507168650627136,
        "codebertscore_s_f3-78": 0.7549235820770264,
        "codebertscore_s_f1-72": 0.584468424320221,
        "codebertscore_s_f3-72": 0.5622764229774475,
        "codebertscore_s_f1-41": 0.689445436000824,
        "codebertscore_s_f3-41": 0.6312762498855591,
        "codebertscore_s_f1-28": 0.683707058429718,
        "codebertscore_s_f3-28": 0.640074610710144,
        "codebertscore_s_f1-24": 0.5345162153244019,
        "codebertscore_s_f3-24": 0.514815092086792,
        "codebertscore_s_f1-160": 0.6377412676811218,
        "codebertscore_s_f3-160": 0.6165413856506348,
        "codebertscore_s_f1-8": 0.8923373818397522,
        "codebertscore_s_f3-8": 0.8807445168495178,
        "codebertscore_s_f1-7": 0.8214393258094788,
        "codebertscore_s_f3-7": 0.856401264667511,
        "codebertscore_s_f1-25": 0.765604555606842,
        "codebertscore_s_f3-25": 0.7601591348648071,
        "codebertscore_s_f1-67": 0.7835919857025146,
        "codebertscore_s_f3-67": 0.8036069869995117,
        "codebertscore_s_f1-74": 0.9569236040115356,
        "codebertscore_s_f3-74": 0.9483436346054077,
        "codebertscore_s_f1-199": 0.801506519317627,
        "codebertscore_s_f3-199": 0.7812265753746033,
        "codebertscore_s_f1-59": 0.8530624508857727,
        "codebertscore_s_f3-59": 0.8274029493331909,
        "codebertscore_s_f1-159": 0.5874547362327576,
        "codebertscore_s_f3-159": 0.5628526210784912,
        "codebertscore_s_f1-69": 0.7767001390457153,
        "codebertscore_s_f3-69": 0.7524638772010803,
        "codebertscore_s_f1-167": 0.8386096954345703,
        "codebertscore_s_f3-167": 0.8156782984733582,
        "codebertscore_s_f1-95": 0.7123992443084717,
        "codebertscore_s_f3-95": 0.7197072505950928,
        "gpt35_nsnr-33": 2,
        "raw_gpt35_nsnr-33": "2",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-94": 3,
        "raw_gpt35_nsnr-94": "3",
        "gpt35_nsnr-78": 4,
        "raw_gpt35_nsnr-78": "4",
        "gpt35_nsnr-72": 3,
        "raw_gpt35_nsnr-72": "3",
        "gpt35_nsnr-41": 4,
        "raw_gpt35_nsnr-41": "4",
        "gpt35_nsnr-28": 3,
        "raw_gpt35_nsnr-28": "3",
        "gpt35_nsnr-24": 0,
        "raw_gpt35_nsnr-24": "3 - The code snippet defines the method signature for finding the greatest common divisor of two integers, but the implementation is missing. The code compiles without errors and the method signature is correct, but it cannot pass any tests since there is no implementation.",
        "gpt35_nsnr-160": 0,
        "raw_gpt35_nsnr-160": "0",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-25": 4,
        "raw_gpt35_nsnr-25": "4",
        "gpt35_nsnr-67": 4,
        "raw_gpt35_nsnr-67": "4",
        "gpt35_nsnr-74": 4,
        "raw_gpt35_nsnr-74": "4",
        "gpt35_nsnr-199": 4,
        "raw_gpt35_nsnr-199": "4",
        "gpt35_nsnr-59": 3,
        "raw_gpt35_nsnr-59": "3",
        "gpt35_nsnr-159": 0,
        "raw_gpt35_nsnr-159": "0",
        "gpt35_nsnr-69": 3,
        "raw_gpt35_nsnr-69": "3",
        "gpt35_nsnr-167": 4,
        "raw_gpt35_nsnr-167": "4",
        "gpt35_nsnr-95": 4,
        "raw_gpt35_nsnr-95": "4",
        "gpt35_nswr-33": 2,
        "raw_gpt35_nswr-33": "2",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-94": 3,
        "raw_gpt35_nswr-94": "3",
        "gpt35_nswr-78": 3,
        "raw_gpt35_nswr-78": "3",
        "gpt35_nswr-72": 4,
        "raw_gpt35_nswr-72": "4",
        "gpt35_nswr-41": 0,
        "raw_gpt35_nswr-41": "0",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-24": 3,
        "raw_gpt35_nswr-24": "3",
        "gpt35_nswr-160": 2,
        "raw_gpt35_nswr-160": "2",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-25": 3,
        "raw_gpt35_nswr-25": "3",
        "gpt35_nswr-67": 3,
        "raw_gpt35_nswr-67": "3",
        "gpt35_nswr-74": 4,
        "raw_gpt35_nswr-74": "4",
        "gpt35_nswr-199": 4,
        "raw_gpt35_nswr-199": "4",
        "gpt35_nswr-59": 3,
        "raw_gpt35_nswr-59": "3",
        "gpt35_nswr-159": 4,
        "raw_gpt35_nswr-159": "4",
        "gpt35_nswr-69": 3,
        "raw_gpt35_nswr-69": "3",
        "gpt35_nswr-167": 4,
        "raw_gpt35_nswr-167": "4",
        "gpt35_nswr-95": 3,
        "raw_gpt35_nswr-95": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flip_case('Hello')\n    // 'hELLO'\n    public static String flipCase(String string) {\n",
        "snippet": [
            "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n            if (Character.isLowerCase(string.charAt(i))) {\n                sb.append(Character.toUpperCase(string.charAt(i)));\n            } else {\n                sb.append(Character.toLowerCase(string.charAt(i)));\n            }\n        }\n        return sb.toString();\n    }\n}"
        ],
        "simplified": "For a given string, flip lowercase characters to uppercase and uppercase to lowercase.",
        "task_id": "27",
        "33": "char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            char c = chars[i];\n            if (Character.isUpperCase(c)) {\n                chars[i] = Character.toLowerCase(c);\n            } else if (Character.isLowerCase(c)) {\n                chars[i] = Character.toUpperCase(c);\n            }\n        }\n        return new String(chars);",
        "grade-33": {
            "execution": 1
        },
        "7": "return null;",
        "grade-7": {
            "execution": 0
        },
        "91": "throw new UnsupportedOperationException(\"Method flipCase is not implemented.\");",
        "grade-91": {
            "execution": 0
        },
        "80": "StringBuilder flipped = new StringBuilder();\n        for (char letter : string.toCharArray()) {\n            if (Character.isUpperCase(letter)) {\n                flipped.append(Character.toLowerCase(letter));\n            } else {\n                flipped.append(Character.toUpperCase(letter));\n            }\n        }\n        return flipped.toString();",
        "grade-80": {
            "execution": 1
        },
        "74": "return new String(\n            string.chars()\n            .map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c))\n            .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)\n            .toString()\n        );",
        "grade-74": {
            "execution": 1
        },
        "42": "String result = \"\";\n        for (char c : string.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                result += Character.toLowerCase(c);\n            } else {\n                result += Character.toUpperCase(c);\n            }\n        }\n        return result;",
        "grade-42": {
            "execution": 1
        },
        "31": "return string.chars()\n                .mapToObj(c -> (char) c)\n                .map(c -> {\n                    if (Character.isUpperCase(c)) {\n                        return Character.toLowerCase(c);\n                    } else {\n                        return Character.toUpperCase(c);\n                    }\n                })\n                .collect(Collectors.joining());",
        "grade-31": {
            "execution": 0
        },
        "183": "return string.chars()\n                .mapToObj(c -> (char) c)\n                .map(Character::toLowerCase)\n                .map(c -> Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c))\n                .collect(StringBuilder::new, StringBuilder::append, StringBuilder::append)\n                .toString();",
        "grade-183": {
            "execution": 0
        },
        "27": "// write your code here\n        return null;",
        "grade-27": {
            "execution": 0
        },
        "199": "return string.chars()\n        .mapToObj(c -> Character.isLetter(c) ? Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c) : String.valueOf((char) c))\n        .collect(Collectors.joining());",
        "grade-199": {
            "execution": 0
        },
        "135": "char[] charArray = string.toCharArray();\n        for (int i = 0; i < charArray.length; i++) {\n            if (Character.isUpperCase(charArray[i])) {\n                charArray[i] = Character.toLowerCase(charArray[i]);\n            } else {\n                charArray[i] = Character.toUpperCase(charArray[i]);\n            }\n        }\n        return new String(charArray);",
        "grade-135": {
            "execution": 1
        },
        "9": "String rv = \"\";\n        char c;\n        for (int i = 0; i < string.length(); i++) {\n            c = string.charAt(i);\n            if (Character.isUpperCase(c))\n                rv += Character.toLowerCase(c);\n            else\n                rv += Character.toUpperCase(c);\n        }\n        return rv;",
        "grade-9": {
            "execution": 1
        },
        "8": "// TODO: Your code here\n        return null;",
        "grade-8": {
            "execution": 0
        },
        "28": "StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n            if (Character.isLowerCase(string.charAt(i))) {\n                sb.append(Character.toUpperCase(string.charAt(i)));\n            } else {\n                sb.append(Character.toLowerCase(string.charAt(i)));\n            }\n        }\n        return sb.toString();",
        "grade-28": {
            "execution": 1
        },
        "71": "StringBuilder builder = new StringBuilder();\n        for (char c : string.toCharArray()) {\n            builder.append(Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c));\n        }\n        return builder.toString();",
        "grade-71": {
            "execution": 1
        },
        "77": "char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            chars[i] = Character.isUpperCase(chars[i]) ? Character.toLowerCase(chars[i]) : Character.toUpperCase(chars[i]);\n        }\n        return new String(chars);",
        "grade-77": {
            "execution": 1
        },
        "168": "StringBuffer newString = new StringBuffer();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (Character.isUpperCase(c)) {\n                newString.append(Character.toLowerCase(c));\n            } else {\n                newString.append(Character.toUpperCase(c));\n            }\n        }\n        return newString.toString();",
        "grade-168": {
            "execution": 1
        },
        "187": "char[] chars = string.toCharArray();\n        int d = 'a' - 'A';\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] >= 'a' && chars[i] <= 'z') {\n                chars[i] -= d;\n            } else if (chars[i] >= 'A' && chars[i] <= 'Z') {\n                chars[i] += d;\n            }\n        }\n        return new String(chars);",
        "grade-187": {
            "execution": 1
        },
        "63": "return string.toLowerCase();",
        "grade-63": {
            "execution": 0
        },
        "134": "String result = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            char character = string.charAt(i);\n            if (Character.isUpperCase(character)) {\n                result += Character.toLowerCase(character);\n            } else {\n                result += Character.toUpperCase(character);\n            }\n        }\n        return result;",
        "grade-134": {
            "execution": 1
        },
        "bleu-33": 0.4192171095081107,
        "bleu-7": 1.1573024059398643e-15,
        "bleu-91": 0.00039745303697629326,
        "bleu-80": 0.4232609374399701,
        "bleu-74": 0.20542437676579614,
        "bleu-42": 0.22845760818776223,
        "bleu-31": 0.22874423131211322,
        "bleu-183": 0.19468896035481734,
        "bleu-27": 1.6504503721652073e-06,
        "bleu-199": 0.13713799717867928,
        "bleu-135": 0.4084158562733438,
        "bleu-9": 0.39785438492499964,
        "bleu-8": 4.5621145903746246e-06,
        "bleu-28": 0.9803927912729113,
        "bleu-71": 0.2745797798237135,
        "bleu-77": 0.2959229021647922,
        "bleu-168": 0.6103593719905688,
        "bleu-187": 0.2075138590409483,
        "bleu-63": 1.8599342789793257e-05,
        "bleu-134": 0.4476588558198719,
        "codebleu-33": 0.5918416229394773,
        "codebleu-7": 0.009324009324154302,
        "codebleu-91": 0.02797206570809693,
        "codebleu-80": 0.5301455676725138,
        "codebleu-74": 0.31222925908576965,
        "codebleu-42": 0.34752928300080616,
        "codebleu-31": 0.4439124551056902,
        "codebleu-183": 0.3807657681799392,
        "codebleu-27": 0.027976165062967587,
        "codebleu-199": 0.35805493641929564,
        "codebleu-135": 0.500261638280293,
        "codebleu-9": 0.48066894533780447,
        "codebleu-8": 0.027980034436541117,
        "codebleu-28": 0.8615441788367024,
        "codebleu-71": 0.38111471616309933,
        "codebleu-77": 0.4120023305678962,
        "codebleu-168": 0.690121269614117,
        "codebleu-187": 0.43885748482618087,
        "codebleu-63": 0.04195813629821436,
        "codebleu-134": 0.504281978017803,
        "chrf-33": 0.5090901793545527,
        "chrf-7": 0.02201989345359229,
        "chrf-91": 0.07293287538617248,
        "chrf-80": 0.5954162354426303,
        "chrf-74": 0.5227467505631997,
        "chrf-42": 0.4114781078806995,
        "chrf-31": 0.4053190580347732,
        "chrf-183": 0.4996645115591697,
        "chrf-27": 0.03894629823019851,
        "chrf-199": 0.3872639883860135,
        "chrf-135": 0.48646127352085633,
        "chrf-9": 0.5153512788144938,
        "chrf-8": 0.033162414401232645,
        "chrf-28": 0.9933908323230427,
        "chrf-71": 0.528049602782714,
        "chrf-77": 0.44569760617433773,
        "chrf-168": 0.709434441154389,
        "chrf-187": 0.2780071942047922,
        "chrf-63": 0.10033314613380076,
        "chrf-134": 0.5425863640998804,
        "rougel-33": 0.5560975609756097,
        "rougel-7": 0.03773584905660377,
        "rougel-91": 0.1,
        "rougel-80": 0.6777777777777777,
        "rougel-74": 0.4228571428571428,
        "rougel-42": 0.5029940119760479,
        "rougel-31": 0.45197740112994345,
        "rougel-183": 0.375,
        "rougel-27": 0.03571428571428571,
        "rougel-199": 0.36994219653179183,
        "rougel-135": 0.6009852216748768,
        "rougel-9": 0.5714285714285714,
        "rougel-8": 0.035398230088495575,
        "rougel-28": 0.9901960784313726,
        "rougel-71": 0.5476190476190477,
        "rougel-77": 0.5355191256830601,
        "rougel-168": 0.7064676616915423,
        "rougel-187": 0.37272727272727274,
        "rougel-63": 0.14285714285714285,
        "rougel-134": 0.5978260869565217,
        "meteor-33": 0.5315196877346225,
        "meteor-7": 0.01075268817204301,
        "meteor-91": 0.050804219993081975,
        "meteor-80": 0.4719264952026216,
        "meteor-74": 0.3990930930930931,
        "meteor-42": 0.344082744702321,
        "meteor-31": 0.38872532426251444,
        "meteor-183": 0.3882538189980716,
        "meteor-27": 0.010683760683760684,
        "meteor-199": 0.2909112125875136,
        "meteor-135": 0.4619210911103047,
        "meteor-9": 0.3539650982990943,
        "meteor-8": 0.010672358591248664,
        "meteor-28": 0.9824306726623658,
        "meteor-71": 0.36540847489979,
        "meteor-77": 0.36843167978726793,
        "meteor-168": 0.5563220262773102,
        "meteor-187": 0.31075613449696093,
        "meteor-63": 0.0879102036509444,
        "meteor-134": 0.3986370752728174,
        "ruby-33": 0.3495145631067961,
        "ruby-7": 0.01941747572815533,
        "ruby-91": 0.058252427184465994,
        "ruby-80": 0.5728155339805825,
        "ruby-74": 0.2621359223300971,
        "ruby-42": 0.38834951456310685,
        "ruby-31": 0.3203883495145631,
        "ruby-183": 0.21359223300970875,
        "ruby-27": 0.01941747572815533,
        "ruby-199": 0.23300970873786409,
        "ruby-135": 0.4854368932038835,
        "ruby-9": 0.4563106796116505,
        "ruby-8": 0.01941747572815533,
        "ruby-28": 0.9805825242718447,
        "ruby-71": 0.4077669902912622,
        "ruby-77": 0.4077669902912622,
        "ruby-168": 0.5631067961165048,
        "ruby-187": 0.23931623931623935,
        "ruby-63": 0.07766990291262132,
        "ruby-134": 0.4563106796116505,
        "codebertscore_f1-33": 0.8634242415428162,
        "codebertscore_f3-33": 0.8528628349304199,
        "codebertscore_f1-7": 0.5145992636680603,
        "codebertscore_f3-7": 0.4845334589481354,
        "codebertscore_f1-91": 0.6186950206756592,
        "codebertscore_f3-91": 0.6037461757659912,
        "codebertscore_f1-80": 0.8705332279205322,
        "codebertscore_f3-80": 0.8525304198265076,
        "codebertscore_f1-74": 0.7869262099266052,
        "codebertscore_f3-74": 0.7762871384620667,
        "codebertscore_f1-42": 0.8433476686477661,
        "codebertscore_f3-42": 0.8212538361549377,
        "codebertscore_f1-31": 0.7731810808181763,
        "codebertscore_f3-31": 0.7664039134979248,
        "codebertscore_f1-183": 0.7811403274536133,
        "codebertscore_f3-183": 0.7737277150154114,
        "codebertscore_f1-27": 0.559603214263916,
        "codebertscore_f3-27": 0.5384229421615601,
        "codebertscore_f1-199": 0.74862140417099,
        "codebertscore_f3-199": 0.7380242347717285,
        "codebertscore_f1-135": 0.8733128309249878,
        "codebertscore_f3-135": 0.8671814203262329,
        "codebertscore_f1-9": 0.8877794146537781,
        "codebertscore_f3-9": 0.8827371001243591,
        "codebertscore_f1-8": 0.5603440403938293,
        "codebertscore_f3-8": 0.5407031178474426,
        "codebertscore_f1-28": 0.9980835318565369,
        "codebertscore_f3-28": 0.9980835318565369,
        "codebertscore_f1-71": 0.8641282320022583,
        "codebertscore_f3-71": 0.84527987241745,
        "codebertscore_f1-77": 0.8429015874862671,
        "codebertscore_f3-77": 0.8288140892982483,
        "codebertscore_f1-168": 0.926164448261261,
        "codebertscore_f3-168": 0.927552342414856,
        "codebertscore_f1-187": 0.7843862771987915,
        "codebertscore_f3-187": 0.7779741883277893,
        "codebertscore_f1-63": 0.6899139285087585,
        "codebertscore_f3-63": 0.6437159180641174,
        "codebertscore_f1-134": 0.8889496326446533,
        "codebertscore_f3-134": 0.8780987858772278,
        "codebertscore_s_f1-33": 0.8721125721931458,
        "codebertscore_s_f3-33": 0.8626154661178589,
        "codebertscore_s_f1-7": 0.5678337216377258,
        "codebertscore_s_f3-7": 0.5250438451766968,
        "codebertscore_s_f1-91": 0.6078487038612366,
        "codebertscore_s_f3-91": 0.5929153561592102,
        "codebertscore_s_f1-80": 0.8812953233718872,
        "codebertscore_s_f3-80": 0.8647749423980713,
        "codebertscore_s_f1-74": 0.8068341016769409,
        "codebertscore_s_f3-74": 0.7978455424308777,
        "codebertscore_s_f1-42": 0.8541497588157654,
        "codebertscore_s_f3-42": 0.8341445326805115,
        "codebertscore_s_f1-31": 0.788251519203186,
        "codebertscore_s_f3-31": 0.7834396958351135,
        "codebertscore_s_f1-183": 0.7972915768623352,
        "codebertscore_s_f3-183": 0.7916848659515381,
        "codebertscore_s_f1-27": 0.5702559947967529,
        "codebertscore_s_f3-27": 0.5509693622589111,
        "codebertscore_s_f1-199": 0.7681611180305481,
        "codebertscore_s_f3-199": 0.7606527209281921,
        "codebertscore_s_f1-135": 0.8828632235527039,
        "codebertscore_s_f3-135": 0.8779894113540649,
        "codebertscore_s_f1-9": 0.8926025629043579,
        "codebertscore_s_f3-9": 0.8894679546356201,
        "codebertscore_s_f1-8": 0.5729841589927673,
        "codebertscore_s_f3-8": 0.55345618724823,
        "codebertscore_s_f1-28": 0.9992290735244751,
        "codebertscore_s_f3-28": 0.9992289543151855,
        "codebertscore_s_f1-71": 0.877066969871521,
        "codebertscore_s_f3-71": 0.8592587113380432,
        "codebertscore_s_f1-77": 0.8572599291801453,
        "codebertscore_s_f3-77": 0.8450301885604858,
        "codebertscore_s_f1-168": 0.9329994916915894,
        "codebertscore_s_f3-168": 0.934499979019165,
        "codebertscore_s_f1-187": 0.7921432852745056,
        "codebertscore_s_f3-187": 0.7879291772842407,
        "codebertscore_s_f1-63": 0.724405825138092,
        "codebertscore_s_f3-63": 0.6683264374732971,
        "codebertscore_s_f1-134": 0.8977217078208923,
        "codebertscore_s_f3-134": 0.8881985545158386,
        "gpt35_nsnr-33": 4,
        "raw_gpt35_nsnr-33": "4",
        "gpt35_nsnr-7": 0,
        "raw_gpt35_nsnr-7": "0",
        "gpt35_nsnr-91": 0,
        "raw_gpt35_nsnr-91": "0",
        "gpt35_nsnr-80": 4,
        "raw_gpt35_nsnr-80": "4",
        "gpt35_nsnr-74": 4,
        "raw_gpt35_nsnr-74": "4",
        "gpt35_nsnr-42": 4,
        "raw_gpt35_nsnr-42": "4",
        "gpt35_nsnr-31": 4,
        "raw_gpt35_nsnr-31": "4",
        "gpt35_nsnr-183": 3,
        "raw_gpt35_nsnr-183": "3",
        "gpt35_nsnr-27": 0,
        "raw_gpt35_nsnr-27": "0",
        "gpt35_nsnr-199": 3,
        "raw_gpt35_nsnr-199": "3",
        "gpt35_nsnr-135": 4,
        "raw_gpt35_nsnr-135": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-8": 0,
        "raw_gpt35_nsnr-8": "0",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-71": 4,
        "raw_gpt35_nsnr-71": "4",
        "gpt35_nsnr-77": 4,
        "raw_gpt35_nsnr-77": "4",
        "gpt35_nsnr-168": 4,
        "raw_gpt35_nsnr-168": "4",
        "gpt35_nsnr-187": 4,
        "raw_gpt35_nsnr-187": "4",
        "gpt35_nsnr-63": 2,
        "raw_gpt35_nsnr-63": "2",
        "gpt35_nsnr-134": 4,
        "raw_gpt35_nsnr-134": "4",
        "gpt35_nswr-33": 3,
        "raw_gpt35_nswr-33": "3",
        "gpt35_nswr-7": 0,
        "raw_gpt35_nswr-7": "0",
        "gpt35_nswr-91": 4,
        "raw_gpt35_nswr-91": "4",
        "gpt35_nswr-80": 4,
        "raw_gpt35_nswr-80": "4",
        "gpt35_nswr-74": 4,
        "raw_gpt35_nswr-74": "4",
        "gpt35_nswr-42": 4,
        "raw_gpt35_nswr-42": "4",
        "gpt35_nswr-31": 3,
        "raw_gpt35_nswr-31": "3",
        "gpt35_nswr-183": 3,
        "raw_gpt35_nswr-183": "3",
        "gpt35_nswr-27": 0,
        "raw_gpt35_nswr-27": "0",
        "gpt35_nswr-199": 3,
        "raw_gpt35_nswr-199": "3",
        "gpt35_nswr-135": 4,
        "raw_gpt35_nswr-135": "4",
        "gpt35_nswr-9": 4,
        "raw_gpt35_nswr-9": "4",
        "gpt35_nswr-8": 2,
        "raw_gpt35_nswr-8": "2",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-71": 4,
        "raw_gpt35_nswr-71": "4",
        "gpt35_nswr-77": 4,
        "raw_gpt35_nswr-77": "4",
        "gpt35_nswr-168": 4,
        "raw_gpt35_nswr-168": "4",
        "gpt35_nswr-187": 4,
        "raw_gpt35_nswr-187": "4",
        "gpt35_nswr-63": 2,
        "raw_gpt35_nswr-63": "2",
        "gpt35_nswr-134": 4,
        "raw_gpt35_nswr-134": "4"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1, 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8, 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3, 1) => false\n    // is_simple_power(5, 3) => false\n    public static boolean isSimplePower(int x, int n) {\n",
        "snippet": [
            "        if (n == 1) {\n            return x == 1;\n        }\n        int power = 1;\n        while (power < x) {\n            power = power * n;\n        }\n        return power == x;\n    }\n}"
        ],
        "simplified": "Your task is to write a function that returns true if a number x is a simple power of n and false in other cases. x is a simple power of n if n**int=x",
        "task_id": "76",
        "195": "if (x<0 || n<0) return false;\n        if (x==1) return true;\n        double current = n;\n        while (current<x) {\n            current*=n;\n        }\n        return current==x;",
        "grade-195": {
            "execution": 1
        },
        "29": "if (x <= 0 || n <= 0) {\n            return false;\n        }\n        double res = Math.log(x) / Math.log(n);\n        return Math.abs(res - Math.floor(res)) < 1e-10;",
        "grade-29": {
            "execution": 0
        },
        "6": "return false;",
        "grade-6": {
            "execution": 0
        },
        "81": "if (n == 1) return false;\n        if (x == 1) return true;\n        double exp = Math.log(x) / Math.log(n);\n        return Math.abs(exp - Math.round(exp)) < 1e-4;",
        "grade-81": {
            "execution": 0
        },
        "71": "return Math.sqrt(x) == n || Math.cbrt(x) == n || x == n;",
        "grade-71": {
            "execution": 0
        },
        "63": "// write your code here\n        return (Math.log(x) / Math.log(n)) % 1 == 0;",
        "grade-63": {
            "execution": 0
        },
        "37": "boolean result = false;\n        double sqrtValue = Math.sqrt(x);\n        if (sqrtValue == Math.floor(sqrtValue)) {\n            result = sqrtValue % n == 0;\n        }\n        return result;",
        "grade-37": {
            "execution": 0
        },
        "26": "// wtite your code here\n        return false;",
        "grade-26": {
            "execution": 0
        },
        "166": "return x == n || (int) Math.log(x) / (int) Math.log(n) == Math.log(x) / Math.log(n);",
        "grade-166": {
            "execution": 0
        },
        "22": "return x == Math.pow(n, (int) (Math.log(x) / Math.log(n)));",
        "grade-22": {
            "execution": 1
        },
        "179": "try {\n            int k = (int) Math.round(Math.log(x) / Math.log(n));\n            return (Math.pow(n, k) == x);\n        } catch (Exception e) {\n            return false;\n        }",
        "grade-179": {
            "execution": 1
        },
        "128": "if (n == 1) return false;\n        for (int i = 0; i < x; i++) {\n            if (Math.pow(n, i) == x) return true;\n        }\n        return false;",
        "grade-128": {
            "execution": 0
        },
        "8": "for (int i = 0; i < x; i++) {\n            if (Math.pow(n, i) == x)\n                return true;\n        }\n        return false;",
        "grade-8": {
            "execution": 1
        },
        "7": "if (n == 1 && x != 1) {\n            return false;\n        }\n        if (x == 1) {\n            return true;\n        }\n        for (int i = 0; i < x; i++) {\n            if (Math.pow(n, i) == x) {\n                return true;\n            }\n        }\n        return false;",
        "grade-7": {
            "execution": 1
        },
        "23": "double y = n;\n        return Math.pow(y, Math.round(Math.log(x) / Math.log(y))) == x;",
        "grade-23": {
            "execution": 1
        },
        "60": "int i = 1;\n        int result = 1;\n        while (true) {\n            if (result == x) {\n                return true;\n            }\n            if (result > x) {\n                return false;\n            }\n            result = n * result;\n            i++;\n        }",
        "grade-60": {
            "execution": 1
        },
        "66": "return new BigInteger(x + \"\").modPow(new BigInteger(n + \"\"), new BigInteger(x + \"\")).intValue() == x;",
        "grade-66": {
            "execution": 0
        },
        "154": "return x == n && x % n == 0;",
        "grade-154": {
            "execution": 0
        },
        "184": "//n**int=x, x**(1/n)=y, x==y**n\n        //if x==y**n and y is integer => y=int**(1/n)\n        double y = Math.pow(x, 1.0/n);\n        return (y%1 == 0);",
        "grade-184": {
            "execution": 0
        },
        "170": "int nn = n;\n        for (int i = 1; nn <= x; i++) {\n            if (nn == x) return true;\n            nn *= n;\n        }\n        return false;",
        "grade-170": {
            "execution": 0
        },
        "bleu-195": 0.2631689479883832,
        "bleu-29": 0.05302455412691848,
        "bleu-6": 7.83612439038299e-07,
        "bleu-81": 0.1738376664946066,
        "bleu-71": 0.06121904000927771,
        "bleu-63": 0.03264750215633705,
        "bleu-37": 0.08279070605814123,
        "bleu-26": 0.0014492855375717348,
        "bleu-166": 0.09194664155364934,
        "bleu-22": 0.07947998624641449,
        "bleu-179": 0.06992338944814948,
        "bleu-128": 0.21873903858901908,
        "bleu-8": 0.09372459741477289,
        "bleu-7": 0.23893215832356807,
        "bleu-23": 0.08257036831039598,
        "bleu-60": 0.18905503679412913,
        "bleu-66": 0.07697823272984979,
        "bleu-154": 0.03804280412354697,
        "bleu-184": 0.03835015714010322,
        "bleu-170": 0.153432037450883,
        "codebleu-195": 0.5323059566888297,
        "codebleu-29": 0.41369227666868313,
        "codebleu-6": 0.03508900984703677,
        "codebleu-81": 0.4516535591853196,
        "codebleu-71": 0.24551674793284864,
        "codebleu-63": 0.24726291359711675,
        "codebleu-37": 0.42271627344222623,
        "codebleu-26": 0.08328660362620353,
        "codebleu-166": 0.2787873146109428,
        "codebleu-22": 0.23941942122204432,
        "codebleu-179": 0.40507158701351076,
        "codebleu-128": 0.4574006856221012,
        "codebleu-8": 0.3931740270215769,
        "codebleu-7": 0.5593869731800766,
        "codebleu-23": 0.28441091552962694,
        "codebleu-60": 0.5446158499697519,
        "codebleu-66": 0.2551596663115663,
        "codebleu-154": 0.10835067938220111,
        "codebleu-184": 0.41369227666868313,
        "codebleu-170": 0.42231296632385557,
        "chrf-195": 0.29599761032715044,
        "chrf-29": 0.19910135582897057,
        "chrf-6": 0.0649744937698201,
        "chrf-81": 0.2398935179073029,
        "chrf-71": 0.11685048640000013,
        "chrf-63": 0.12676084774719093,
        "chrf-37": 0.17697196735303047,
        "chrf-26": 0.10467966027599247,
        "chrf-166": 0.1489514995913889,
        "chrf-22": 0.15235303337431538,
        "chrf-179": 0.20965636715349523,
        "chrf-128": 0.2778203695650039,
        "chrf-8": 0.22731534599666287,
        "chrf-7": 0.3363072117971398,
        "chrf-23": 0.1320773923643925,
        "chrf-60": 0.3048492106298977,
        "chrf-66": 0.152026749988411,
        "chrf-154": 0.12272085907645286,
        "chrf-184": 0.16055796095044322,
        "chrf-170": 0.24882777484141022,
        "rougel-195": 0.6000000000000001,
        "rougel-29": 0.3541666666666667,
        "rougel-6": 0.08888888888888889,
        "rougel-81": 0.42857142857142855,
        "rougel-71": 0.34285714285714286,
        "rougel-63": 0.22857142857142854,
        "rougel-37": 0.32183908045977017,
        "rougel-26": 0.0784313725490196,
        "rougel-166": 0.30952380952380953,
        "rougel-22": 0.2777777777777778,
        "rougel-179": 0.3157894736842105,
        "rougel-128": 0.49438202247191015,
        "rougel-8": 0.3544303797468354,
        "rougel-7": 0.5225225225225225,
        "rougel-23": 0.23376623376623376,
        "rougel-60": 0.39560439560439564,
        "rougel-66": 0.25882352941176473,
        "rougel-154": 0.32142857142857145,
        "rougel-184": 0.2809917355371901,
        "rougel-170": 0.4096385542168674,
        "meteor-195": 0.5959566925361695,
        "meteor-29": 0.24305555555555555,
        "meteor-6": 0.026246719160104987,
        "meteor-81": 0.26497695852534564,
        "meteor-71": 0.30178805802239766,
        "meteor-63": 0.1691568619468306,
        "meteor-37": 0.3401360544217687,
        "meteor-26": 0.025839793281653745,
        "meteor-166": 0.2240048363095238,
        "meteor-22": 0.19332289128669214,
        "meteor-179": 0.33382262417728115,
        "meteor-128": 0.4634551763092069,
        "meteor-8": 0.4109772423025435,
        "meteor-7": 0.6403232433913164,
        "meteor-23": 0.2625471008782613,
        "meteor-60": 0.49928441321883943,
        "meteor-66": 0.23851354200340127,
        "meteor-154": 0.16211734693877547,
        "meteor-184": 0.3160404231351884,
        "meteor-170": 0.38064129814773295,
        "ruby-195": 0.41666666666666663,
        "ruby-29": 0.18518518518518523,
        "ruby-6": 0.04761904761904767,
        "ruby-81": 0.2678571428571429,
        "ruby-71": 0.26190476190476186,
        "ruby-63": 0.19047619047619047,
        "ruby-37": 0.1777777777777778,
        "ruby-26": 0.04761904761904767,
        "ruby-166": 0.04761904761904767,
        "ruby-22": 0.19047619047619047,
        "ruby-179": 0.16981132075471694,
        "ruby-128": 0.3191489361702128,
        "ruby-8": 0.2142857142857143,
        "ruby-7": 0.37681159420289856,
        "ruby-23": 0.19047619047619047,
        "ruby-60": 0.20408163265306123,
        "ruby-66": 0.09302325581395354,
        "ruby-154": 0.2142857142857143,
        "ruby-184": 0.17721518987341767,
        "ruby-170": 0.19047619047619047,
        "codebertscore_f1-195": 0.8454563617706299,
        "codebertscore_f3-195": 0.8559941649436951,
        "codebertscore_f1-29": 0.7498282194137573,
        "codebertscore_f3-29": 0.7779654860496521,
        "codebertscore_f1-6": 0.5824835300445557,
        "codebertscore_f3-6": 0.5521517992019653,
        "codebertscore_f1-81": 0.7791033983230591,
        "codebertscore_f3-81": 0.8102731704711914,
        "codebertscore_f1-71": 0.7229370474815369,
        "codebertscore_f3-71": 0.7263655066490173,
        "codebertscore_f1-63": 0.705945611000061,
        "codebertscore_f3-63": 0.724062442779541,
        "codebertscore_f1-37": 0.7501798272132874,
        "codebertscore_f3-37": 0.7698891162872314,
        "codebertscore_f1-26": 0.6244359016418457,
        "codebertscore_f3-26": 0.6194203495979309,
        "codebertscore_f1-166": 0.7305589914321899,
        "codebertscore_f3-166": 0.7385357618331909,
        "codebertscore_f1-22": 0.7344428300857544,
        "codebertscore_f3-22": 0.7435940504074097,
        "codebertscore_f1-179": 0.7534365057945251,
        "codebertscore_f3-179": 0.7767658233642578,
        "codebertscore_f1-128": 0.7930344343185425,
        "codebertscore_f3-128": 0.8148228526115417,
        "codebertscore_f1-8": 0.7558405995368958,
        "codebertscore_f3-8": 0.767313539981842,
        "codebertscore_f1-7": 0.7864537835121155,
        "codebertscore_f3-7": 0.8095079064369202,
        "codebertscore_f1-23": 0.7294005751609802,
        "codebertscore_f3-23": 0.7468184232711792,
        "codebertscore_f1-60": 0.8077785968780518,
        "codebertscore_f3-60": 0.8315722346305847,
        "codebertscore_f1-66": 0.7249057292938232,
        "codebertscore_f3-66": 0.7440418004989624,
        "codebertscore_f1-154": 0.7458261847496033,
        "codebertscore_f3-154": 0.7264485359191895,
        "codebertscore_f1-184": 0.7554066181182861,
        "codebertscore_f3-184": 0.7755684852600098,
        "codebertscore_f1-170": 0.8023576736450195,
        "codebertscore_f3-170": 0.8151161074638367,
        "codebertscore_s_f1-195": 0.8677464723587036,
        "codebertscore_s_f3-195": 0.8761298656463623,
        "codebertscore_s_f1-29": 0.7606702446937561,
        "codebertscore_s_f3-29": 0.7922918796539307,
        "codebertscore_s_f1-6": 0.6484286189079285,
        "codebertscore_s_f3-6": 0.6081303358078003,
        "codebertscore_s_f1-81": 0.7884844541549683,
        "codebertscore_s_f3-81": 0.8200916051864624,
        "codebertscore_s_f1-71": 0.7472745180130005,
        "codebertscore_s_f3-71": 0.7452614307403564,
        "codebertscore_s_f1-63": 0.7258065342903137,
        "codebertscore_s_f3-63": 0.752760648727417,
        "codebertscore_s_f1-37": 0.7544257044792175,
        "codebertscore_s_f3-37": 0.778359591960907,
        "codebertscore_s_f1-26": 0.6317840814590454,
        "codebertscore_s_f3-26": 0.6247140765190125,
        "codebertscore_s_f1-166": 0.7405663132667542,
        "codebertscore_s_f3-166": 0.7500341534614563,
        "codebertscore_s_f1-22": 0.7412426471710205,
        "codebertscore_s_f3-22": 0.7470573782920837,
        "codebertscore_s_f1-179": 0.7568635940551758,
        "codebertscore_s_f3-179": 0.7809192538261414,
        "codebertscore_s_f1-128": 0.8065128922462463,
        "codebertscore_s_f3-128": 0.827842116355896,
        "codebertscore_s_f1-8": 0.7702252864837646,
        "codebertscore_s_f3-8": 0.7796663641929626,
        "codebertscore_s_f1-7": 0.8095749020576477,
        "codebertscore_s_f3-7": 0.8325439095497131,
        "codebertscore_s_f1-23": 0.7333469986915588,
        "codebertscore_s_f3-23": 0.7526671886444092,
        "codebertscore_s_f1-60": 0.8348695039749146,
        "codebertscore_s_f3-60": 0.8595764636993408,
        "codebertscore_s_f1-66": 0.7311287522315979,
        "codebertscore_s_f3-66": 0.743851900100708,
        "codebertscore_s_f1-154": 0.7903147339820862,
        "codebertscore_s_f3-154": 0.7570075988769531,
        "codebertscore_s_f1-184": 0.7705222368240356,
        "codebertscore_s_f3-184": 0.793860673904419,
        "codebertscore_s_f1-170": 0.8274843096733093,
        "codebertscore_s_f3-170": 0.8390884399414062,
        "gpt35_nsnr-195": 3,
        "raw_gpt35_nsnr-195": "3",
        "gpt35_nsnr-29": 4,
        "raw_gpt35_nsnr-29": "4",
        "gpt35_nsnr-6": 2,
        "raw_gpt35_nsnr-6": "2",
        "gpt35_nsnr-81": 4,
        "raw_gpt35_nsnr-81": "4",
        "gpt35_nsnr-71": 3,
        "raw_gpt35_nsnr-71": "3",
        "gpt35_nsnr-63": 3,
        "raw_gpt35_nsnr-63": "3",
        "gpt35_nsnr-37": 3,
        "raw_gpt35_nsnr-37": "3",
        "gpt35_nsnr-26": 2,
        "raw_gpt35_nsnr-26": "2",
        "gpt35_nsnr-166": 3,
        "raw_gpt35_nsnr-166": "3",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-179": 4,
        "raw_gpt35_nsnr-179": "4",
        "gpt35_nsnr-128": 3,
        "raw_gpt35_nsnr-128": "3",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-23": 3,
        "raw_gpt35_nsnr-23": "3",
        "gpt35_nsnr-60": 3,
        "raw_gpt35_nsnr-60": "3",
        "gpt35_nsnr-66": 3,
        "raw_gpt35_nsnr-66": "3",
        "gpt35_nsnr-154": 3,
        "raw_gpt35_nsnr-154": "3",
        "gpt35_nsnr-184": 4,
        "raw_gpt35_nsnr-184": "4",
        "gpt35_nsnr-170": 4,
        "raw_gpt35_nsnr-170": "4",
        "gpt35_nswr-195": 3,
        "raw_gpt35_nswr-195": "3",
        "gpt35_nswr-29": 3,
        "raw_gpt35_nswr-29": "3",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-81": 3,
        "raw_gpt35_nswr-81": "3",
        "gpt35_nswr-71": 2,
        "raw_gpt35_nswr-71": "2",
        "gpt35_nswr-63": 3,
        "raw_gpt35_nswr-63": "3",
        "gpt35_nswr-37": 3,
        "raw_gpt35_nswr-37": "3",
        "gpt35_nswr-26": 2,
        "raw_gpt35_nswr-26": "2",
        "gpt35_nswr-166": 2,
        "raw_gpt35_nswr-166": "2",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-179": 3,
        "raw_gpt35_nswr-179": "3",
        "gpt35_nswr-128": 3,
        "raw_gpt35_nswr-128": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 2,
        "raw_gpt35_nswr-23": "2",
        "gpt35_nswr-60": 3,
        "raw_gpt35_nswr-60": "3",
        "gpt35_nswr-66": 1,
        "raw_gpt35_nswr-66": "1",
        "gpt35_nswr-154": 2,
        "raw_gpt35_nswr-154": "2",
        "gpt35_nswr-184": 3,
        "raw_gpt35_nswr-184": "3",
        "gpt35_nswr-170": 3,
        "raw_gpt35_nswr-170": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    // each cell of the grid contains a value. Every integer in the range [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n    // You have to find the minimum path of length k in the grid. You can start\n    // from any cell, and in each step you can move to any of the neighbor cells,\n    // in other words, you can go to cells which share an edge with you current\n    // cell.\n    // Please note that a path of length k means visiting exactly k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n    // A path A (of length k) is considered less than a path B (of length k) if\n    // after making the ordered lists of the values on the cells that A and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    // than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is unique.\n    // Return an ordered list of the values on the cells that the minimum path go through.\n    // Examples:\n    // Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n    // Output: [1, 2, 1]\n    // Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n    // Output: [1]\n    public static ArrayList<Integer> minPath(ArrayList<ArrayList<Integer>> grid, int k) {\n",
        "snippet": [
            "        int n = grid.size();\n        int val = n * n + 1;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    List<Integer> temp = new ArrayList<>();\n                    if (i != 0) {\n                        temp.add(grid.get(i - 1).get(j));\n                    }\n                    if (j != 0) {\n                        temp.add(grid.get(i).get(j - 1));\n                    }\n                    if (i != n - 1) {\n                        temp.add(grid.get(i + 1).get(j));\n                    }\n                    if (j != n - 1) {\n                        temp.add(grid.get(i).get(j + 1));\n                    }\n                    val = Collections.min(temp);\n                }\n            }\n        }\n        List<Integer> ans = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            if (i % 2 == 0) {\n                ans.add(1);\n            } else {\n                ans.add(val);\n            }\n        }\n        return ans;\n    }\n}"
        ],
        "simplified": "Given a grid with N rows and N columns (N >= 2) and a positive integer k, each cell of the grid contains a value. Every integer in the range [1, N * N] inclusive appears exactly once on the cells of the grid. You have to find the minimum path of length k in the grid. You can start from any cell, and in each step you can move to any of the neighbor cells, in other words, you can go to cells which share an edge with you current cell. Please note that a path of length k means visiting exactly k cells (not necessarily distinct). You CANNOT go off the grid. A path A (of length k) is considered less than a path B (of length k) if after making the ordered lists of the values on the cells that A and B go through (let's call them lst_A and lst_B), lst_A is lexicographically less than lst_B, in other words, there exist an integer index i (1 <= i <= k) such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have lst_A[j] = lst_B[j]. It is guaranteed that the answer is unique. Return an ordered list of the values on the cells that the minimum path go through.",
        "task_id": "129",
        "29": "int n = grid.size();\n        int[][] tmp = new int[n][n];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                tmp[i][j] = grid.get(i).get(j);\n            }\n        }\n        return minPath(tmp, k);",
        "grade-29": {
            "execution": 0
        },
        "6": "ArrayList<Integer> res = new ArrayList<>();\n        return res;",
        "grade-6": {
            "execution": 0
        },
        "80": "int n = grid.size();\n        ArrayList<Integer> ret = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            ret.add(0);\n        }\n        int state = -1;\n        // BEGIN (write your solution here)\n        int state = -1;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    state = i * n + j;\n                    ret.set(0, 1);\n                    break;\n                }\n            }\n            if (state != -1) {\n                break;\n            }\n        }\n        int dx[] = {-1, 0, 1, 0};\n        int dy[] = {0, 1, 0, -1};\n        for (int i = 1; i < k; i++) {\n            int x = state / n;\n            int y = state % n;\n            int v = 1 << 20;\n            for (int k = 0; k < 4; k++) {\n                int nx = x + dx[k];\n                int ny = y + dy[k];\n                if (nx >= 0 && nx < n && ny >= 0 && ny < n) {\n                    if (grid.get(nx).get(ny) < v) {\n                        v = grid.get(nx).get(ny);\n                        state = nx * n + ny;\n                    }\n                }\n            }\n            ret.set(i, v);\n        }\n        // END\n        return ret;",
        "grade-80": {
            "execution": 0
        },
        "70": "ArrayList<Integer> res = new ArrayList<>();\n        int n = grid.size();\n        int[][] dir = { {0, 1}, {0, -1}, {1, 0}, {-1, 0} };\n        int[][] len = new int[n][n];\n        int[][] val = new int[n][n];\n        int start_r = 0, start_c = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    start_r = i;\n                    start_c = j;\n                }\n            }\n        }\n        int[][] sum = new int[n][n];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                sum[i][j] = grid.get(i).get(j);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == 0 && j == 0) {\n                    sum[i][j] = 0;\n                } else if (i == 0) {\n                    sum[i][j] = sum[i][j - 1] + grid.get(i).get(j);\n                } else if (j == 0) {\n                    sum[i][j] = sum[i - 1][j] + grid.get(i).get(j);\n                } else {\n                    sum[i][j] = Math.min(sum[i - 1][j], sum[i][j - 1]) + grid.get(i).get(j);\n                }\n            }\n        }\n        Queue<Pair<Integer, Integer>> q = new LinkedList<>();\n        q.add(new Pair<>(start_r, start_c));\n        val[start_r][start_c] = 1;\n        len[start_r][start_c] = 0;\n        ArrayList<Integer>",
        "grade-70": {
            "execution": 0
        },
        "64": "// ToDo\n        return null;",
        "grade-64": {
            "execution": 0
        },
        "37": "if (k == 0) {\n            return new ArrayList<Integer>();\n        }\n        int m = grid.size();\n        int n = grid.get(0).size();\n        int[][] dp = new int[m][n];\n        int[][] prev = new int[m][n];\n        // 0 --> up\n        // 1 --> down\n        // 2 --> left\n        // 3 --> right\n        int[] offset_x = {-1, 1, 0, 0};\n        int[] offset_y = {0, 0, -1, 1};\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                dp[i][j] = grid.get(i).get(j);\n                prev[i][j] = -1;\n            }\n        }\n        for (int t = 0; t < k - 1; t++) {\n            int[][] new_dp = new int[m][n];\n            int[][] new_prev = new int[m][n];\n            for (int i = 0; i < m; i++) {\n                for (int j = 0; j < n; j++) {\n                    if (t == 0) {\n                        for (int kk = 0; kk < 4; kk++) {\n                            int dx = offset_x[kk];\n                            int dy = offset_y[kk];\n                            int xx = i + dx;\n                            int yy = j + dy;\n                            if (xx >= 0 && xx < m && yy >= 0 && yy < n) {\n                                new_dp[xx][yy] = grid.get(xx).get(yy);\n                                new_prev[xx][yy] = kk;\n                            }\n                        }\n                    } else {\n                        for (int kk = 0; kk < 4; kk++) {\n                            int dx = offset_x[kk];\n                            int dy = offset_y[kk];\n                            int xx = i + dx;\n                            int yy = j + dy;\n                            if (xx >= 0 && xx < m &&",
        "grade-37": {
            "execution": 0
        },
        "27": "if (k == 0) {\n            return new ArrayList<Integer>();\n        }\n        if (k == 1) {\n            return new ArrayList<Integer>(grid.get(0));\n        }\n        int N = grid.size();\n        for (int row = 0; row < N; row++) {\n            for (int col = 0; col < N; col++) {\n                Pair<Integer, Integer> minimumPath = _minPath(grid, k, row, col);\n                if (minimumPath.getValue0() == row && minimumPath.getValue1() == col) {\n                    System.out.println(\"Minimum path starts at \" +\n                            grid.get(row).get(col));\n                    ArrayList<Integer> result = new ArrayList<Integer>();\n                    for (int i = 0; i < k; i++) {\n                        System.out.println(\"Minimum path goes to \" +\n                                grid.get(minimumPath.getValue2().get(i)).get(minimumPath.getValue3().get(i)));\n                        result.add(grid.get(minimumPath.getValue2().get(i)).get(minimumPath.getValue3().get(i)));\n                    }\n                    return result;\n                }\n            }\n        }\n        return new ArrayList<Integer>();",
        "grade-27": {
            "execution": 0
        },
        "165": "ArrayList<Integer> res = new ArrayList<>();\n        int n = grid.size();\n        Pair<Integer,Integer> ans = null;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                // int ans = minPathForOne(grid, k, i, j);\n                Pair<Integer,Integer> p = minPathForOne(grid, k, i, j);\n                if (ans == null || p.compareTo(ans) < 0) {\n                    ans = p;\n                }\n            }\n        }\n        for (int i : ans.getValue0()) {\n            res.add(i);\n        }\n        return res;",
        "grade-165": {
            "execution": 0
        },
        "22": "// Good luck!\n        int N = grid.size();\n        int M = grid.get(0).size();\n        int[][] gridArr = new int[N][M];\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < M; j++) {\n                gridArr[i][j] = grid.get(i).get(j);\n            }\n        }\n        int[][] memo = new int[N][M];\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < M; j++) {\n                memo[i][j] = -1;\n            }\n        }\n        int min = Integer.MAX_VALUE;\n        int minI = -1;\n        int minJ = -1;\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < M; j++) {\n                int val = dfs(gridArr, i, j, N, M, k, memo);\n                if (val < min) {\n                    min = val;\n                    minI = i;\n                    minJ = j;\n                }\n            }\n        }\n        ArrayList<Integer> path = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            path.add(gridArr[minI][minJ]);\n            if (minI > 0 && dfs(gridArr, minI - 1, minJ, N, M, k - i - 1, memo) == min - gridArr[minI][minJ]) {\n                minI--;\n            } else if (minI < N - 1 && dfs(gridArr, minI + 1, minJ, N, M, k - i - 1, memo) == min - gridArr[minI][minJ]) {\n                minI++;\n            } else if (minJ > 0 && dfs(gridArr, minI, minJ - 1, N, M, k - i - 1, memo) == min - gridArr[minI][minJ]) {\n                minJ--;",
        "grade-22": {
            "execution": 0
        },
        "187": "// TODO: Implement this function\n        return null;",
        "grade-187": {
            "execution": 0
        },
        "124": "int n = grid.size();\n        ArrayList<ArrayList<Integer>> dp = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            dp.add(new ArrayList<>());\n            for (int j = 0; j < n; j++) {\n                dp.get(i).add(0);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == 0 && j == 0) {\n                    dp.get(i).set(j, grid.get(i).get(j));\n                } else if (i == 0) {\n                    dp.get(i).set(j, dp.get(i).get(j - 1) + grid.get(i).get(j));\n                } else if (j == 0) {\n                    dp.get(i).set(j, dp.get(i - 1).get(j) + grid.get(i).get(j));\n                } else {\n                    dp.get(i).set(j, Math.min(dp.get(i - 1).get(j), dp.get(i).get(j - 1)) + grid.get(i).get(j));\n                }\n            }\n        }\n        ArrayList<Integer> ans = new ArrayList<>();\n        int i = 0;\n        int j = 0;\n        int rem = k;\n        while (rem > 0) {\n            int mn = Integer.MAX_VALUE;\n            if (i + 1 < n) {\n                mn = Math.min(mn, dp.get(i + 1).get(j));\n            }\n            if (j + 1 < n) {\n                mn = Math.min(mn, dp.get(i).get(j + 1));\n            }\n            ans.add(grid.get(i).get(j));\n            if (i + 1 < n && mn == dp.get(i + 1).get(j)) {\n                i++;\n            } else {\n                j++;",
        "grade-124": {
            "execution": 0
        },
        "8": "// TODO: Implement your solution here\n        return null;",
        "grade-8": {
            "execution": 0
        },
        "7": "// Assumptions: 1. grid is not null. 2. grid.size() >= 2. 3. k >= 1.\n        // Idea: Use Dijkstra's algorithm, which is a greedy algorithm for solving\n        // the shortest path problem.\n        // We first construct a graph with nodes representing the cells and an edge\n        // between two nodes represents that two cells are neighbors.\n        // Let's start by creating the graph. We use a map graph to represent the graph,\n        // with the key node being the coordinates of the cell, and the value being\n        // the list of the neighboring nodes, represented by their coordinates.\n        Map<Pair<Integer, Integer>, ArrayList<Pair<Integer, Integer>>> graph = new HashMap<>();\n        int N = grid.size();\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < N; j++) {\n                ArrayList<Pair<Integer, Integer>> neighbors = new ArrayList<>();\n                if (i > 0) {\n                    neighbors.add(new Pair<>(i - 1, j));\n                }\n                if (i < N - 1) {\n                    neighbors.add(new Pair<>(i + 1, j));\n                }\n                if (j > 0) {\n                    neighbors.add(new Pair<>(i, j - 1));\n                }\n                if (j < N - 1) {\n                    neighbors.add(new Pair<>(i, j + 1));\n                }\n                graph.put(new Pair<>(i, j), neighbors);\n            }\n        }\n        // Create the min heap based on the current shortest path length.\n        // This is an optimization so that we only need to run the loop k times.\n        Queue<Pair<ArrayList<Integer>, Pair<Integer, Integer>>> minHeap = new PriorityQueue<>(\n                (x, y) -> x.getValue0().size() - y.getValue0().size());\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < N; j++) {\n                ArrayList<Integer> path = new ArrayList<>();\n                path.add(grid.get(i",
        "grade-7": {
            "execution": 0
        },
        "24": "ArrayList<Integer> ret = new ArrayList<>();\n        // build the graph based on grid\n        ArrayList<Integer>[] g = new ArrayList[grid.size() * grid.size() + 1];\n        int[] cost = new int[grid.size() * grid.size() + 1];\n        int[][] dist = new int[grid.size()][grid.size()];\n        int pos = 0;\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.size(); j++) {\n                pos++;\n                g[pos] = new ArrayList<>();\n                cost[pos] = grid.get(i).get(j);\n                dist[i][j] = pos;\n                if (i > 0) {\n                    g[pos].add(dist[i - 1][j]);\n                }\n                if (i < grid.size() - 1) {\n                    g[pos].add(dist[i + 1][j]);\n                }\n                if (j > 0) {\n                    g[pos].add(dist[i][j - 1]);\n                }\n                if (j < grid.size() - 1) {\n                    g[pos].add(dist[i][j + 1]);\n                }\n            }\n        }\n        // dp\n        boolean[] visit = new boolean[g.length];\n        ArrayList<Integer>[] path = new ArrayList[g.length];\n        int[] h = new int[g.length];\n        for (int i = 1; i < g.length; i++) {\n            path[i] = new ArrayList<>();\n            path[i].add(cost[i]);\n            h[i] = cost[i];\n        }\n        int min_h = Integer.MAX_VALUE;\n        int min_p = -1;\n        while (true) {\n            int i = -1;\n            for (int j = 1; j < g.length; j++) {\n                if (!visit[j] && h[j] < min_h) {\n                    min_h = h[j];\n                    i = j;\n                }\n            }",
        "grade-24": {
            "execution": 0
        },
        "61": "// TODO: Write - Your - Code\n        return null;",
        "grade-61": {
            "execution": 0
        },
        "67": "// Assume the grid is not empty\n        // Assume that k is positive\n        int n = grid.size();\n        if (k > n * n) {\n            throw new RuntimeException(\"k is too large.\");\n        }\n        ArrayList<ArrayList<ArrayList<Integer>>> res = new ArrayList<>();\n        ArrayList<Integer> res_min = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                dfs(new ArrayList<>(Arrays.asList(new Pair<>(i, j))), grid, k, n, res);\n            }\n        }\n        int min = Integer.MAX_VALUE;\n        for (ArrayList<ArrayList<Integer>> list: res) {\n            int sum = 0;\n            for (ArrayList<Integer> pair: list) {\n                sum += pair.get(0) * n + pair.get(1);\n            }\n            if (sum < min) {\n                min = sum;\n                res_min = list;\n            }\n        }\n        ArrayList<Integer> ret = new ArrayList<>();\n        for (ArrayList<Integer> pair: res_min) {\n            ret.add(grid.get(pair.get(0)).get(pair.get(1)));\n        }\n        return ret;",
        "grade-67": {
            "execution": 0
        },
        "150": "final int N = grid.size();\n        final int K = k;\n        final int[][] graph = new int[N * N][N * N];\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < N; j++) {\n                final int u = i * N + j;\n                if (i + 1 < N) {\n                    final int v = (i + 1) * N + j;\n                    graph[u][v] = 1;\n                    graph[v][u] = 1;\n                }\n                if (j + 1 < N) {\n                    final int v = i * N + j + 1;\n                    graph[u][v] = 1;\n                    graph[v][u] = 1;\n                }\n            }\n        }\n        final int[][] dp = new int[N * N][K + 1];\n        for (int i = 0; i < N * N; i++) {\n            for (int j = 0; j <= K; j++) {\n                dp[i][j] = Integer.MAX_VALUE;\n            }\n        }\n        for (int i = 0; i < N * N; i++) {\n            dp[i][0] = 0;\n        }\n        for (int i = 0; i < N * N; i++) {\n            for (int j = 0; j < N * N; j++) {\n                if (graph[i][j] == 1) {\n                    for (int kk = 1; kk <= K; kk++) {\n                        dp[j][kk] = Math.min(dp[j][kk], dp[i][kk - 1] + 1);\n                    }\n                }\n            }\n        }\n        int min = Integer.MAX_VALUE;\n        int mi = -1;\n        for (int i = 0; i < N * N; i++) {\n            if (dp[i][K] < min) {\n                min = dp[i][K];\n                mi = i;\n            }\n        }\n        final ArrayList<Integer> ret = new ArrayList<>();\n        final ArrayList<Integer> stack",
        "grade-150": {
            "execution": 0
        },
        "190": "// PUT YOUR CODE HERE\n        return null;",
        "grade-190": {
            "execution": 0
        },
        "171": "// TODO: Write your code here\n        // Base case\n        if (k == 0) {\n            return new ArrayList<>();\n        }\n        int n = grid.size();\n        Pair<Integer, Integer> minPathEnd = null;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                Pair<Integer, Integer> currentMinPathEnd = findMinPathEnd(grid, new Pair<>(i, j), k);\n                if (minPathEnd == null || isSmaller(grid, currentMinPathEnd, minPathEnd, k)) {\n                    minPathEnd = currentMinPathEnd;\n                }\n            }\n        }\n        return constructMinPath(grid, minPathEnd, k);",
        "grade-171": {
            "execution": 0
        },
        "54": "// TODO: Write your code here.\n        int N = grid.size();\n        ArrayList<Integer> result = new ArrayList<>();\n        if (N == 0 || k == 0)\n            return result;\n        int[] dx = {0, 0, 1, -1};\n        int[] dy = {1, -1, 0, 0};\n        ArrayList<Pair<Pair<Integer, Integer>, ArrayList<Integer>>> que = new ArrayList<>();\n        que.add(new Pair<>(new Pair<>(0, 0), new ArrayList<>()));\n        que.get(0).getValue1().add(grid.get(0).get(0));\n        int[][] visited = new int[N][N];\n        visited[0][0] = 1;\n        int minLen = Integer.MAX_VALUE;\n        while (!que.isEmpty()) {\n            ArrayList<Pair<Pair<Integer, Integer>, ArrayList<Integer>>> que2 = new ArrayList<>();\n            while (!que.isEmpty()) {\n                Pair<Pair<Integer, Integer>, ArrayList<Integer>> p = que.remove(0);\n                if (p.getValue1().size() == k) {\n                    if (p.getValue1().size() < minLen) {\n                        minLen = p.getValue1().size();\n                        result = p.getValue1();\n                    } else if (p.getValue1().size() == minLen) {\n                        for (int i = 0; i < minLen; i++) {\n                            if (p.getValue1().get(i) < result.get(i)) {\n                                result = p.getValue1();\n                                break;\n                            } else if (p.getValue1().get(i) > result.get(i)) {\n                                break;\n                            }\n                        }\n                    }\n                    continue;\n                }\n                int currRow = p.getValue0().getValue0();\n                int currCol = p.getValue0().getValue1();\n                for (int i = 0; i < 4; i++) {\n                    int newRow = currRow + dx[",
        "grade-54": {
            "execution": 0
        },
        "bleu-29": 0.07794349481392576,
        "bleu-6": 4.35495847800494e-07,
        "bleu-80": 0.376828450869878,
        "bleu-70": 0.339167226698353,
        "bleu-64": 2.1252513598651814e-18,
        "bleu-37": 0.2351263738644526,
        "bleu-27": 0.37869229767280776,
        "bleu-165": 0.2281034656275918,
        "bleu-22": 0.23085443531043665,
        "bleu-187": 1.708954692998835e-13,
        "bleu-124": 0.39673931192915496,
        "bleu-8": 1.84265894984972e-12,
        "bleu-7": 0.27370833388788907,
        "bleu-24": 0.2621253471182379,
        "bleu-61": 1.5782278613267382e-11,
        "bleu-67": 0.36182422423738514,
        "bleu-150": 0.220356200861522,
        "bleu-190": 9.247137465499297e-15,
        "bleu-171": 0.20775420342963496,
        "bleu-54": 0.23183623605813067,
        "codebleu-29": 0.17166182253656534,
        "codebleu-6": 0.027420899868174475,
        "codebleu-80": 0.6545595966116996,
        "codebleu-70": 0.696119739810433,
        "codebleu-64": 0.005141388174807653,
        "codebleu-37": 0.5813791858476723,
        "codebleu-27": 0.6260765094217052,
        "codebleu-165": 0.3274819333040104,
        "codebleu-22": 0.6034120941943986,
        "codebleu-187": 0.010282776354945533,
        "codebleu-124": 0.783593406741583,
        "codebleu-8": 0.011996572431907609,
        "codebleu-7": 0.5877891671739781,
        "codebleu-24": 0.6800971072395676,
        "codebleu-61": 0.013710368584249196,
        "codebleu-67": 0.5615145713055234,
        "codebleu-150": 0.5411250163470788,
        "codebleu-190": 0.010282776350534888,
        "codebleu-171": 0.28044291229000295,
        "codebleu-54": 0.6625461096182343,
        "chrf-29": 0.23619046649796382,
        "chrf-6": 0.1026514630123822,
        "chrf-80": 0.45973509586146977,
        "chrf-70": 0.5174578158506408,
        "chrf-64": 0.013743114896993735,
        "chrf-37": 0.3680174106420732,
        "chrf-27": 0.42652911021457013,
        "chrf-165": 0.36489680765748084,
        "chrf-22": 0.3928633873093246,
        "chrf-187": 0.02806062780021863,
        "chrf-124": 0.5929451964319002,
        "chrf-8": 0.028452439500623858,
        "chrf-7": 0.3867257632793579,
        "chrf-24": 0.4101526486574082,
        "chrf-61": 0.019705371228855025,
        "chrf-67": 0.40773395246282607,
        "chrf-150": 0.34944111828911206,
        "chrf-190": 0.012717407147320456,
        "chrf-171": 0.3116646431688612,
        "chrf-54": 0.3794750876266255,
        "rougel-29": 0.37569060773480667,
        "rougel-6": 0.1095890410958904,
        "rougel-80": 0.4227642276422764,
        "rougel-70": 0.44740346205059917,
        "rougel-64": 0.014234875444839857,
        "rougel-37": 0.3466299862448418,
        "rougel-27": 0.4507042253521127,
        "rougel-165": 0.4129930394431554,
        "rougel-22": 0.3850267379679145,
        "rougel-187": 0.014084507042253521,
        "rougel-124": 0.5139072847682119,
        "rougel-8": 0.014035087719298246,
        "rougel-7": 0.4183006535947712,
        "rougel-24": 0.4249667994687915,
        "rougel-61": 0.027972027972027972,
        "rougel-67": 0.4191829484902309,
        "rougel-150": 0.3658872077028886,
        "rougel-190": 0.014134275618374558,
        "rougel-171": 0.334841628959276,
        "rougel-54": 0.3686274509803922,
        "meteor-29": 0.18543868236607047,
        "meteor-6": 0.05082528180354268,
        "meteor-80": 0.4016490235737791,
        "meteor-70": 0.465902140672783,
        "meteor-64": 0.004043671653861706,
        "meteor-37": 0.36830059761714434,
        "meteor-27": 0.41088414590256483,
        "meteor-165": 0.2664865029440421,
        "meteor-22": 0.404540805731335,
        "meteor-187": 0.004038772213247173,
        "meteor-124": 0.5180318968442483,
        "meteor-8": 0.004037141703673799,
        "meteor-7": 0.4860042141520586,
        "meteor-24": 0.46644872440874136,
        "meteor-61": 0.008071025020177562,
        "meteor-67": 0.36961495448131054,
        "meteor-150": 0.36437372695324494,
        "meteor-190": 0.00404040404040404,
        "meteor-171": 0.22503824590753102,
        "meteor-54": 0.41194840121423104,
        "ruby-29": 0.21897810218978098,
        "ruby-6": 0.058394160583941646,
        "ruby-80": 0.2785923753665689,
        "ruby-70": 0.29350104821802936,
        "ruby-64": 0.007299270072992692,
        "ruby-37": 0.22516556291390732,
        "ruby-27": 0.19387755102040816,
        "ruby-165": 0.24817518248175185,
        "ruby-22": 0.2616033755274262,
        "ruby-187": 0.007299270072992692,
        "ruby-124": 0.3783783783783784,
        "ruby-8": 0.007299270072992692,
        "ruby-7": 0.2505091649694501,
        "ruby-24": 0.2693110647181628,
        "ruby-61": 0.014598540145985384,
        "ruby-67": 0.23183391003460208,
        "ruby-150": 0.2582781456953642,
        "ruby-190": 0.007299270072992692,
        "ruby-171": 0.15693430656934304,
        "ruby-54": 0.22810590631364558,
        "codebertscore_f1-29": 0.8133581876754761,
        "codebertscore_f3-29": 0.7610158324241638,
        "codebertscore_f1-6": 0.6479831337928772,
        "codebertscore_f3-6": 0.5757931470870972,
        "codebertscore_f1-80": 0.8143088221549988,
        "codebertscore_f3-80": 0.8281793594360352,
        "codebertscore_f1-70": 0.8402930498123169,
        "codebertscore_f3-70": 0.8534123301506042,
        "codebertscore_f1-64": 0.5240300297737122,
        "codebertscore_f3-64": 0.47352951765060425,
        "codebertscore_f1-37": 0.7943392395973206,
        "codebertscore_f3-37": 0.805874764919281,
        "codebertscore_f1-27": 0.8007451295852661,
        "codebertscore_f3-27": 0.8105430603027344,
        "codebertscore_f1-165": 0.8056089878082275,
        "codebertscore_f3-165": 0.8000084161758423,
        "codebertscore_f1-22": 0.8178824782371521,
        "codebertscore_f3-22": 0.8393171429634094,
        "codebertscore_f1-187": 0.5301939249038696,
        "codebertscore_f3-187": 0.4913957715034485,
        "codebertscore_f1-124": 0.8618408441543579,
        "codebertscore_f3-124": 0.8737006783485413,
        "codebertscore_f1-8": 0.5182075500488281,
        "codebertscore_f3-8": 0.4820988178253174,
        "codebertscore_f1-7": 0.7819051742553711,
        "codebertscore_f3-7": 0.8231857419013977,
        "codebertscore_f1-24": 0.8183010816574097,
        "codebertscore_f3-24": 0.8358442187309265,
        "codebertscore_f1-61": 0.5257687568664551,
        "codebertscore_f3-61": 0.4822489023208618,
        "codebertscore_f1-67": 0.7946853637695312,
        "codebertscore_f3-67": 0.8091431260108948,
        "codebertscore_f1-150": 0.8245920538902283,
        "codebertscore_f3-150": 0.8309448957443237,
        "codebertscore_f1-190": 0.5137779116630554,
        "codebertscore_f3-190": 0.47525960206985474,
        "codebertscore_f1-171": 0.7546509504318237,
        "codebertscore_f3-171": 0.7626180052757263,
        "codebertscore_f1-54": 0.7875769138336182,
        "codebertscore_f3-54": 0.8084144592285156,
        "codebertscore_s_f1-29": 0.8411687612533569,
        "codebertscore_s_f3-29": 0.7998433709144592,
        "codebertscore_s_f1-6": 0.7066017985343933,
        "codebertscore_s_f3-6": 0.6327143311500549,
        "codebertscore_s_f1-80": 0.8280938863754272,
        "codebertscore_s_f3-80": 0.8444660305976868,
        "codebertscore_s_f1-70": 0.8476179242134094,
        "codebertscore_s_f3-70": 0.8606350421905518,
        "codebertscore_s_f1-64": 0.5771850347518921,
        "codebertscore_s_f3-64": 0.5430273413658142,
        "codebertscore_s_f1-37": 0.8006296753883362,
        "codebertscore_s_f3-37": 0.8150396943092346,
        "codebertscore_s_f1-27": 0.8041695952415466,
        "codebertscore_s_f3-27": 0.8098906874656677,
        "codebertscore_s_f1-165": 0.813286304473877,
        "codebertscore_s_f3-165": 0.8107895851135254,
        "codebertscore_s_f1-22": 0.8255501985549927,
        "codebertscore_s_f3-22": 0.8463907241821289,
        "codebertscore_s_f1-187": 0.5770081877708435,
        "codebertscore_s_f3-187": 0.5494317412376404,
        "codebertscore_s_f1-124": 0.8635159134864807,
        "codebertscore_s_f3-124": 0.8756728172302246,
        "codebertscore_s_f1-8": 0.5687376260757446,
        "codebertscore_s_f3-8": 0.5475414395332336,
        "codebertscore_s_f1-7": 0.804092526435852,
        "codebertscore_s_f3-7": 0.8500630855560303,
        "codebertscore_s_f1-24": 0.8247601985931396,
        "codebertscore_s_f3-24": 0.8416293859481812,
        "codebertscore_s_f1-61": 0.5697624683380127,
        "codebertscore_s_f3-61": 0.5467686057090759,
        "codebertscore_s_f1-67": 0.8067702651023865,
        "codebertscore_s_f3-67": 0.8214113116264343,
        "codebertscore_s_f1-150": 0.8307949304580688,
        "codebertscore_s_f3-150": 0.8336263298988342,
        "codebertscore_s_f1-190": 0.5597229599952698,
        "codebertscore_s_f3-190": 0.5448603630065918,
        "codebertscore_s_f1-171": 0.7598500847816467,
        "codebertscore_s_f3-171": 0.7691390514373779,
        "codebertscore_s_f1-54": 0.8025054335594177,
        "codebertscore_s_f3-54": 0.8267191052436829,
        "gpt35_nsnr-29": 3,
        "raw_gpt35_nsnr-29": "3",
        "gpt35_nsnr-6": 2,
        "raw_gpt35_nsnr-6": "2",
        "gpt35_nsnr-80": 4,
        "raw_gpt35_nsnr-80": "4",
        "gpt35_nsnr-70": 2,
        "raw_gpt35_nsnr-70": "2",
        "gpt35_nsnr-64": 0,
        "raw_gpt35_nsnr-64": "0",
        "gpt35_nsnr-37": 3,
        "raw_gpt35_nsnr-37": "3",
        "gpt35_nsnr-27": 3,
        "raw_gpt35_nsnr-27": "3",
        "gpt35_nsnr-165": 3,
        "raw_gpt35_nsnr-165": "3",
        "gpt35_nsnr-22": 4,
        "raw_gpt35_nsnr-22": "4",
        "gpt35_nsnr-187": 0,
        "raw_gpt35_nsnr-187": "0",
        "gpt35_nsnr-124": 4,
        "raw_gpt35_nsnr-124": "4",
        "gpt35_nsnr-8": 0,
        "raw_gpt35_nsnr-8": "0",
        "gpt35_nsnr-7": 3,
        "raw_gpt35_nsnr-7": "3",
        "gpt35_nsnr-24": 4,
        "raw_gpt35_nsnr-24": "4",
        "gpt35_nsnr-61": 0,
        "raw_gpt35_nsnr-61": "0",
        "gpt35_nsnr-67": 3,
        "raw_gpt35_nsnr-67": "3",
        "gpt35_nsnr-150": 4,
        "raw_gpt35_nsnr-150": "4",
        "gpt35_nsnr-190": 0,
        "raw_gpt35_nsnr-190": "0",
        "gpt35_nsnr-171": 3,
        "raw_gpt35_nsnr-171": "3",
        "gpt35_nsnr-54": 4,
        "raw_gpt35_nsnr-54": "4",
        "gpt35_nswr-29": 3,
        "raw_gpt35_nswr-29": "3",
        "gpt35_nswr-6": 0,
        "raw_gpt35_nswr-6": "0",
        "gpt35_nswr-80": 3,
        "raw_gpt35_nswr-80": "3",
        "gpt35_nswr-70": 2,
        "raw_gpt35_nswr-70": "2",
        "gpt35_nswr-64": 2,
        "raw_gpt35_nswr-64": "2",
        "gpt35_nswr-37": 3,
        "raw_gpt35_nswr-37": "3",
        "gpt35_nswr-27": 3,
        "raw_gpt35_nswr-27": "3",
        "gpt35_nswr-165": 3,
        "raw_gpt35_nswr-165": "3",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-187": 2,
        "raw_gpt35_nswr-187": "2",
        "gpt35_nswr-124": 4,
        "raw_gpt35_nswr-124": "4",
        "gpt35_nswr-8": 2,
        "raw_gpt35_nswr-8": "2",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-24": 3,
        "raw_gpt35_nswr-24": "3",
        "gpt35_nswr-61": 2,
        "raw_gpt35_nswr-61": "2",
        "gpt35_nswr-67": 2,
        "raw_gpt35_nswr-67": "2",
        "gpt35_nswr-150": 4,
        "raw_gpt35_nswr-150": "4",
        "gpt35_nswr-190": 2,
        "raw_gpt35_nswr-190": "2",
        "gpt35_nswr-171": 3,
        "raw_gpt35_nswr-171": "3",
        "gpt35_nswr-54": 3,
        "raw_gpt35_nswr-54": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // From a list of integers, remove all elements that occur more than once.\n    // Keep order of elements left the same as in the input.\n    // >>> remove_duplicates([1, 2, 3, 2, 4])\n    // [1, 3, 4]\n    public static ArrayList<Integer> removeDuplicates(ArrayList<Integer> numbers) {\n",
        "snippet": [
            "        Map<Integer, Integer> c = new HashMap<>();\n        for (int i : numbers) {\n            c.put(i, c.getOrDefault(i, 0) + 1);\n        }\n        return numbers.stream().filter(i -> c.get(i) == 1).collect(Collectors.toList());\n    }\n}"
        ],
        "simplified": "From a list of integers, remove all elements that occur more than once. Keep order of elements left the same as in the input.",
        "task_id": "26",
        "184": "Set<Integer> nums = new HashSet<Integer>();\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int num : numbers) {\n            if (!nums.contains(num)) {\n                nums.add(num);\n                result.add(num);\n            }\n        }\n        return result;",
        "grade-184": {
            "execution": 0
        },
        "29": "ArrayList<Integer> res = new ArrayList<Integer>();\n        HashSet<Integer> hs = new HashSet<Integer>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (!hs.contains(numbers.get(i))) {\n                hs.add(numbers.get(i));\n                res.add(numbers.get(i));\n            }\n        }\n        return res;",
        "grade-29": {
            "execution": 0
        },
        "6": "HashSet<Integer> uniqueNumbers = new HashSet<>();\n        ArrayList<Integer> result = new ArrayList<>();\n        for (Integer number : numbers) {\n            if (!uniqueNumbers.contains(number)) {\n                uniqueNumbers.add(number);\n                result.add(number);\n            }\n        }\n        return result;",
        "grade-6": {
            "execution": 0
        },
        "77": "ArrayList<Integer> result = new ArrayList<Integer>();\n        HashSet<Integer> set = new HashSet<Integer>();\n        for (int number : numbers) {\n            if (!set.contains(number)) {\n                set.add(number);\n                result.add(number);\n            }\n        }\n        return result;",
        "grade-77": {
            "execution": 0
        },
        "69": "// Fill in your code here\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < numbers.size(); i++) {\n            int count = 0;\n            for (int j = 0; j < numbers.size(); j++) {\n                if (numbers.get(i) == numbers.get(j))\n                    count++;\n            }\n            if (count == 1)\n                result.add(numbers.get(i));\n        }\n        return result;",
        "grade-69": {
            "execution": 1
        },
        "64": "// Fill this in.\n        List<Integer> l2 = new ArrayList<Integer>();\n        l2.addAll(numbers);\n        numbers.removeAll(numbers);\n        Set<Integer> set = new HashSet<Integer>();\n        for(int i = 0; i < l2.size(); i++) {\n            if(!set.contains(l2.get(i))) {\n                set.add(l2.get(i));\n                numbers.add(l2.get(i));\n            }\n        }\n        return numbers;",
        "grade-64": {
            "execution": 0
        },
        "36": "ArrayList<Integer> result = new ArrayList<Integer>();\n        HashSet<Integer> seen = new HashSet<Integer>();\n        for (Integer number : numbers) {\n            if (!seen.contains(number)) {\n                result.add(number);\n                seen.add(number);\n            }\n        }\n        return result;",
        "grade-36": {
            "execution": 0
        },
        "27": "ArrayList<Integer> ans = new ArrayList<Integer>();\n        HashSet<Integer> seen = new HashSet<Integer>();\n        for (int number : numbers) {\n            if (!seen.contains(number)) {\n                ans.add(number);\n                seen.add(number);\n            }\n        }\n        return ans;",
        "grade-27": {
            "execution": 0
        },
        "197": "Set<Integer> seen = new HashSet<>();\n        numbers.removeIf(x -> !seen.add(x));\n        return numbers;",
        "grade-197": {
            "execution": 0
        },
        "156": "// YOUR CODE HERE\n        return numbers;",
        "grade-156": {
            "execution": 0
        },
        "23": "ArrayList<Integer> a = new ArrayList<Integer>();\n        HashSet<Integer> h = new HashSet<Integer>();\n        for (int n : numbers) {\n            if (!h.contains(n)) {\n                h.add(n);\n                a.add(n);\n            }\n        }\n        return a;",
        "grade-23": {
            "execution": 0
        },
        "170": "ArrayList<Integer> newList = new ArrayList<Integer>();\n        HashMap<Integer, Integer> counts = new HashMap<Integer, Integer>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (counts.containsKey(numbers.get(i))) {\n                counts.put(numbers.get(i), counts.get(numbers.get(i)) + 1);\n            } else {\n                counts.put(numbers.get(i), 1);\n            }\n        }\n        for (int i = 0; i < numbers.size(); i++) {\n            if (counts.get(numbers.get(i)) == 1) {\n                newList.add(numbers.get(i));\n            }\n        }\n        return newList;",
        "grade-170": {
            "execution": 1
        },
        "121": "Set<Integer> set = new HashSet<Integer>();\n        ArrayList<Integer> res = new ArrayList<Integer>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (!set.contains(numbers.get(i))) {\n                set.add(numbers.get(i));\n                res.add(numbers.get(i));\n            }\n        }\n        return res;",
        "grade-121": {
            "execution": 0
        },
        "8": "ArrayList<Integer> result = new ArrayList<Integer>();\n        HashSet<Integer> set = new HashSet<Integer>();\n        for (int i = 0; i < numbers.size(); i++) {\n            int current = numbers.get(i);\n            if (!set.contains(current)) {\n                set.add(current);\n                result.add(current);\n            }\n        }\n        return result;",
        "grade-8": {
            "execution": 0
        },
        "7": "HashSet<Integer> set = new HashSet<Integer>();\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (Integer i : numbers) {\n            if (!set.contains(i)) {\n                set.add(i);\n                result.add(i);\n            }\n        }\n        return result;",
        "grade-7": {
            "execution": 0
        },
        "24": "HashSet<Integer> noDuplicates = new HashSet<Integer>();\n        for (Integer number : numbers) {\n            noDuplicates.add(number);\n        }\n        return new ArrayList<Integer>(noDuplicates);",
        "grade-24": {
            "execution": 0
        },
        "60": "ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (!result.contains(numbers.get(i))) {\n                result.add(numbers.get(i));\n            }\n        }\n        return result;",
        "grade-60": {
            "execution": 0
        },
        "66": "ArrayList<Integer> r = new ArrayList<Integer>();\n        Set<Integer> s = new HashSet<Integer>();\n        for (int i : numbers) {\n            if (!s.contains(i)) {\n                s.add(i);\n                r.add(i);\n            }\n        }\n        return r;",
        "grade-66": {
            "execution": 0
        },
        "145": "Set<Integer> set = new HashSet<>();\n        for (int number : numbers) {\n            set.add(number);\n        }\n        ArrayList<Integer> unique = new ArrayList<>(set);\n        return unique;",
        "grade-145": {
            "execution": 0
        },
        "173": "ArrayList<Integer> result = new ArrayList<Integer>();\n        HashSet<Integer> set = new HashSet<Integer>();\n        for (int i = 0; i < numbers.size(); i++) {\n            int cur = numbers.get(i);\n            if (!set.contains(cur)) {\n                result.add(cur);\n                set.add(cur);\n            }\n        }\n        return result;",
        "grade-173": {
            "execution": 0
        },
        "bleu-184": 0.1869953347723386,
        "bleu-29": 0.21863483803213363,
        "bleu-6": 0.18645818481956677,
        "bleu-77": 0.1873421624805538,
        "bleu-69": 0.21374678693275861,
        "bleu-64": 0.18735630497071967,
        "bleu-36": 0.17103417615490046,
        "bleu-27": 0.1873421624805538,
        "bleu-197": 0.059475435250439135,
        "bleu-156": 1.5084473603039585e-05,
        "bleu-23": 0.1873421624805538,
        "bleu-170": 0.20212533342416855,
        "bleu-121": 0.22094875642229014,
        "bleu-8": 0.20966976886893385,
        "bleu-7": 0.20447072073421832,
        "bleu-24": 0.12903558199300336,
        "bleu-60": 0.2433626621290112,
        "bleu-66": 0.25273126865007195,
        "bleu-145": 0.14916244077479068,
        "bleu-173": 0.20966976886893385,
        "codebleu-184": 0.4762119048502951,
        "codebleu-29": 0.5945980992126031,
        "codebleu-6": 0.4623994826306936,
        "codebleu-77": 0.4762119048502951,
        "codebleu-69": 0.6071692200988497,
        "codebleu-64": 0.5927278026616195,
        "codebleu-36": 0.46122395479774936,
        "codebleu-27": 0.4762119048502951,
        "codebleu-197": 0.23154376667414822,
        "codebleu-156": 0.029784837964915788,
        "codebleu-23": 0.4643071429455332,
        "codebleu-170": 0.6753755719410166,
        "codebleu-121": 0.5945980992126031,
        "codebleu-8": 0.5677398097726414,
        "codebleu-7": 0.4739727554361394,
        "codebleu-24": 0.2990179916194974,
        "codebleu-60": 0.5541140513127699,
        "codebleu-66": 0.48390472657384437,
        "codebleu-145": 0.33759111549278087,
        "codebleu-173": 0.5677398097726414,
        "chrf-184": 0.33017364853245906,
        "chrf-29": 0.3721231099594475,
        "chrf-6": 0.33017494087151145,
        "chrf-77": 0.3350698716204495,
        "chrf-69": 0.3716733245018584,
        "chrf-64": 0.3806718752204708,
        "chrf-36": 0.3183653126219062,
        "chrf-27": 0.32753562577154144,
        "chrf-197": 0.25093951270642084,
        "chrf-156": 0.08413568851646032,
        "chrf-23": 0.31891758250825014,
        "chrf-170": 0.4125895669104393,
        "chrf-121": 0.37255637518987966,
        "chrf-8": 0.3591457724016237,
        "chrf-7": 0.32417678924490284,
        "chrf-24": 0.33063972839282696,
        "chrf-60": 0.36870893339143523,
        "chrf-66": 0.3522561337232552,
        "chrf-145": 0.3219521806779648,
        "chrf-173": 0.36581953068105244,
        "rougel-184": 0.4295302013422819,
        "rougel-29": 0.5084745762711864,
        "rougel-6": 0.4105960264900662,
        "rougel-77": 0.44,
        "rougel-69": 0.45595854922279794,
        "rougel-64": 0.4467005076142132,
        "rougel-36": 0.42666666666666664,
        "rougel-27": 0.44,
        "rougel-197": 0.3859649122807018,
        "rougel-156": 0.06818181818181818,
        "rougel-23": 0.44,
        "rougel-170": 0.4862745098039216,
        "rougel-121": 0.5,
        "rougel-8": 0.4534883720930233,
        "rougel-7": 0.45333333333333337,
        "rougel-24": 0.4285714285714286,
        "rougel-60": 0.5100671140939598,
        "rougel-66": 0.4832214765100671,
        "rougel-145": 0.44961240310077516,
        "rougel-173": 0.4534883720930233,
        "meteor-184": 0.3024006391741319,
        "meteor-29": 0.4195685434516525,
        "meteor-6": 0.29527228916025094,
        "meteor-77": 0.3188129682252647,
        "meteor-69": 0.43301504275179453,
        "meteor-64": 0.42543475375016593,
        "meteor-36": 0.295646051551593,
        "meteor-27": 0.3188129682252647,
        "meteor-197": 0.258790450928382,
        "meteor-156": 0.035103785103785104,
        "meteor-23": 0.3188129682252647,
        "meteor-170": 0.5300480006371876,
        "meteor-121": 0.4031998910675382,
        "meteor-8": 0.41356690459434997,
        "meteor-7": 0.30337865291451793,
        "meteor-24": 0.239041957490973,
        "meteor-60": 0.37693896614785477,
        "meteor-66": 0.34490369710168883,
        "meteor-145": 0.21456436931079323,
        "meteor-173": 0.40731791719252536,
        "ruby-184": 0.25,
        "ruby-29": 0.31958762886597936,
        "ruby-6": 0.23750000000000004,
        "ruby-77": 0.22499999999999998,
        "ruby-69": 0.34513274336283184,
        "ruby-64": 0.3076923076923077,
        "ruby-36": 0.22499999999999998,
        "ruby-27": 0.22499999999999998,
        "ruby-197": 0.25,
        "ruby-156": 0.03749999999999998,
        "ruby-23": 0.22499999999999998,
        "ruby-170": 0.34285714285714286,
        "ruby-121": 0.32291666666666663,
        "ruby-8": 0.2717391304347826,
        "ruby-7": 0.25,
        "ruby-24": 0.30000000000000004,
        "ruby-60": 0.36250000000000004,
        "ruby-66": 0.23750000000000004,
        "ruby-145": 0.3375,
        "ruby-173": 0.2717391304347826,
        "codebertscore_f1-184": 0.7656362056732178,
        "codebertscore_f3-184": 0.7465941905975342,
        "codebertscore_f1-29": 0.7626515030860901,
        "codebertscore_f3-29": 0.748633623123169,
        "codebertscore_f1-6": 0.753323495388031,
        "codebertscore_f3-6": 0.7354518175125122,
        "codebertscore_f1-77": 0.7645291090011597,
        "codebertscore_f3-77": 0.7416432499885559,
        "codebertscore_f1-69": 0.7332216501235962,
        "codebertscore_f3-69": 0.7309890985488892,
        "codebertscore_f1-64": 0.7336503863334656,
        "codebertscore_f3-64": 0.7356871962547302,
        "codebertscore_f1-36": 0.7515586614608765,
        "codebertscore_f3-36": 0.7306710481643677,
        "codebertscore_f1-27": 0.7557408213615417,
        "codebertscore_f3-27": 0.734986424446106,
        "codebertscore_f1-197": 0.7739598155021667,
        "codebertscore_f3-197": 0.7407442927360535,
        "codebertscore_f1-156": 0.6195763349533081,
        "codebertscore_f3-156": 0.6002399325370789,
        "codebertscore_f1-23": 0.7690000534057617,
        "codebertscore_f3-23": 0.7451318502426147,
        "codebertscore_f1-170": 0.7690414190292358,
        "codebertscore_f3-170": 0.7813758254051208,
        "codebertscore_f1-121": 0.7753515243530273,
        "codebertscore_f3-121": 0.7632313966751099,
        "codebertscore_f1-8": 0.7678699493408203,
        "codebertscore_f3-8": 0.7530955076217651,
        "codebertscore_f1-7": 0.7751768827438354,
        "codebertscore_f3-7": 0.7554858922958374,
        "codebertscore_f1-24": 0.7675497531890869,
        "codebertscore_f3-24": 0.750578761100769,
        "codebertscore_f1-60": 0.7811755537986755,
        "codebertscore_f3-60": 0.7655927538871765,
        "codebertscore_f1-66": 0.7803874015808105,
        "codebertscore_f3-66": 0.7578370571136475,
        "codebertscore_f1-145": 0.7910970449447632,
        "codebertscore_f3-145": 0.7639787197113037,
        "codebertscore_f1-173": 0.7652854919433594,
        "codebertscore_f3-173": 0.7510876655578613,
        "codebertscore_s_f1-184": 0.7750076651573181,
        "codebertscore_s_f3-184": 0.7542083263397217,
        "codebertscore_s_f1-29": 0.7808393239974976,
        "codebertscore_s_f3-29": 0.7669410109519958,
        "codebertscore_s_f1-6": 0.7640018463134766,
        "codebertscore_s_f3-6": 0.7463971376419067,
        "codebertscore_s_f1-77": 0.7774942517280579,
        "codebertscore_s_f3-77": 0.75602126121521,
        "codebertscore_s_f1-69": 0.75102698802948,
        "codebertscore_s_f3-69": 0.749926745891571,
        "codebertscore_s_f1-64": 0.7587054967880249,
        "codebertscore_s_f3-64": 0.7579864263534546,
        "codebertscore_s_f1-36": 0.760514497756958,
        "codebertscore_s_f3-36": 0.7387880086898804,
        "codebertscore_s_f1-27": 0.7642002105712891,
        "codebertscore_s_f3-27": 0.743119478225708,
        "codebertscore_s_f1-197": 0.7848035097122192,
        "codebertscore_s_f3-197": 0.7529118061065674,
        "codebertscore_s_f1-156": 0.6280715465545654,
        "codebertscore_s_f3-156": 0.6162039041519165,
        "codebertscore_s_f1-23": 0.784765899181366,
        "codebertscore_s_f3-23": 0.7619560360908508,
        "codebertscore_s_f1-170": 0.7872849106788635,
        "codebertscore_s_f3-170": 0.7988319993019104,
        "codebertscore_s_f1-121": 0.789355456829071,
        "codebertscore_s_f3-121": 0.7769677042961121,
        "codebertscore_s_f1-8": 0.7856097221374512,
        "codebertscore_s_f3-8": 0.772124171257019,
        "codebertscore_s_f1-7": 0.7886459231376648,
        "codebertscore_s_f3-7": 0.7695286273956299,
        "codebertscore_s_f1-24": 0.7745614647865295,
        "codebertscore_s_f3-24": 0.7576058506965637,
        "codebertscore_s_f1-60": 0.7896614074707031,
        "codebertscore_s_f3-60": 0.7751954197883606,
        "codebertscore_s_f1-66": 0.7948819994926453,
        "codebertscore_s_f3-66": 0.7734093070030212,
        "codebertscore_s_f1-145": 0.7976244688034058,
        "codebertscore_s_f3-145": 0.7712584733963013,
        "codebertscore_s_f1-173": 0.784465491771698,
        "codebertscore_s_f3-173": 0.7713198661804199,
        "gpt35_nsnr-184": 4,
        "raw_gpt35_nsnr-184": "4",
        "gpt35_nsnr-29": 4,
        "raw_gpt35_nsnr-29": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-77": 4,
        "raw_gpt35_nsnr-77": "4",
        "gpt35_nsnr-69": 4,
        "raw_gpt35_nsnr-69": "4",
        "gpt35_nsnr-64": 4,
        "raw_gpt35_nsnr-64": "4",
        "gpt35_nsnr-36": 4,
        "raw_gpt35_nsnr-36": "4",
        "gpt35_nsnr-27": 4,
        "raw_gpt35_nsnr-27": "4",
        "gpt35_nsnr-197": 4,
        "raw_gpt35_nsnr-197": "4",
        "gpt35_nsnr-156": 0,
        "raw_gpt35_nsnr-156": "3 - The code snippet returns the input ArrayList without removing any duplicates. It is missing the implementation to remove duplicates while keeping the order of elements the same.",
        "gpt35_nsnr-23": 4,
        "raw_gpt35_nsnr-23": "4",
        "gpt35_nsnr-170": 4,
        "raw_gpt35_nsnr-170": "4",
        "gpt35_nsnr-121": 4,
        "raw_gpt35_nsnr-121": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-24": 4,
        "raw_gpt35_nsnr-24": "4",
        "gpt35_nsnr-60": 4,
        "raw_gpt35_nsnr-60": "4",
        "gpt35_nsnr-66": 4,
        "raw_gpt35_nsnr-66": "4",
        "gpt35_nsnr-145": 3,
        "raw_gpt35_nsnr-145": "3",
        "gpt35_nsnr-173": 4,
        "raw_gpt35_nsnr-173": "4",
        "gpt35_nswr-184": 3,
        "raw_gpt35_nswr-184": "3",
        "gpt35_nswr-29": 3,
        "raw_gpt35_nswr-29": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-77": 3,
        "raw_gpt35_nswr-77": "3",
        "gpt35_nswr-69": 3,
        "raw_gpt35_nswr-69": "3",
        "gpt35_nswr-64": 2,
        "raw_gpt35_nswr-64": "2",
        "gpt35_nswr-36": 3,
        "raw_gpt35_nswr-36": "3",
        "gpt35_nswr-27": 3,
        "raw_gpt35_nswr-27": "3",
        "gpt35_nswr-197": 2,
        "raw_gpt35_nswr-197": "2",
        "gpt35_nswr-156": 2,
        "raw_gpt35_nswr-156": "2",
        "gpt35_nswr-23": 4,
        "raw_gpt35_nswr-23": "4",
        "gpt35_nswr-170": 3,
        "raw_gpt35_nswr-170": "3",
        "gpt35_nswr-121": 3,
        "raw_gpt35_nswr-121": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-24": 2,
        "raw_gpt35_nswr-24": "2",
        "gpt35_nswr-60": 3,
        "raw_gpt35_nswr-60": "3",
        "gpt35_nswr-66": 4,
        "raw_gpt35_nswr-66": "4",
        "gpt35_nswr-145": 3,
        "raw_gpt35_nswr-145": "3",
        "gpt35_nswr-173": 3,
        "raw_gpt35_nswr-173": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a list of strings, where each string consists of only digits, return a list.\n    // Each element i of the output should be \"the number of odd elements in the\n    // string i of the input.\" where all the i's should be replaced by the number\n    // of odd digits in the i'th string of the input.\n    // >>> odd_count(['1234567'])\n    // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    // >>> odd_count(['3',\"11111111\"])\n    // [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    // \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    public static ArrayList<String> oddCount(ArrayList<String> lst) {\n",
        "snippet": [
            "        List<String> res = new ArrayList<>();\n        for (String arr : lst) {\n            int n = 0;\n            for (char d : arr.toCharArray()) {\n                if ((d - '0') % 2 == 1) {\n                    n += 1;\n                }\n            }\n            res.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\" );\n        }\n        return res;\n    }\n}"
        ],
        "simplified": "Given a list of strings, where each string consists of only digits, return a list. Each element i of the output should be \"the number of odd elements in the string i of the input.\" where all the i's should be replaced by the number of odd digits in the i'th string of the input.",
        "task_id": "113",
        "182": "ArrayList<String> result = new ArrayList<String>();\n        for (String l : lst) {\n            result.add(numberOfOddChars(l));\n        }\n        return result;",
        "grade-182": {
            "execution": 0
        },
        "32": "ArrayList<String> ret = new ArrayList<String>();\n        for (String s : lst) {\n            int[] ch = new int[10];\n            int odd = 0;\n            for (int i = 0; i < s.length(); i++) {\n                ch[s.charAt(i) - '0']++;\n            }\n            for (int i = 0; i < 10; i++) {\n                if (ch[i] % 2 == 1) {\n                    odd++;\n                }\n            }\n            char[] str = \"the number of odd elements nn the strnng n of the nnput.\".toCharArray();\n            str[31] = (char) ('0' + odd);\n            str[40] = (char) ('0' + odd);\n            str[49] = (char) ('0' + odd);\n            ret.add(new String(str));\n        }\n        return ret;",
        "grade-32": {
            "execution": 0
        },
        "6": "ArrayList<String> res = new ArrayList<String>();\n        String str = \"\";\n        for (int i = 0; i < lst.size(); i++) {\n            str = lst.get(i);\n            int j = 0;\n            for (; j < str.length(); j++) {\n                if (str.charAt(j) % 2 == 1) {\n                    break;\n                }\n            }\n            if (j == str.length()) {\n                continue;\n            }\n            int ans = 0;\n            for (j = 0; j < str.length(); j++) {\n                if (str.charAt(j) % 2 == 1) {\n                    ans++;\n                }\n            }\n            res.add(\"the number of odd elements \" + ans + \"n the str\" + ans + \"ng \" + ans + \" of the \" + ans + \"nput.\");\n        }\n        return res;",
        "grade-6": {
            "execution": 1
        },
        "75": "ArrayList<String> res = new ArrayList<String>();\n        int count = 0;\n        for (String s : lst) {\n            count = 0;\n            for (int i = 0; i < s.length(); i++) {\n                if (Integer.parseInt(s.substring(i, i + 1)) % 2 == 1) {\n                    count++;\n                }\n            }\n            res.add(s.replaceAll(\"[0-9]\", \"n\") +\n                    Integer.toString(count) +\n                    \"n the str\" + Integer.toString(count) +\n                    \"ng \" + Integer.toString(count) +\n                    \" of the \" + Integer.toString(count) + \"nput.\");\n        }\n        return res;",
        "grade-75": {
            "execution": 0
        },
        "66": "ArrayList<String> result = new ArrayList<String>();\n        for (String s : lst) {\n            int n = 0;\n            for (int i = 0; i < s.length(); i++) {\n                if (Character.getNumericValue(s.charAt(i)) % 2 == 1) {\n                    n++;\n                }\n            }\n            String tmp = \"the number of odd elements \" + String.valueOf(n) + \"n the str\" + String.valueOf(n) + \"ng \" + String.valueOf(n) + \" of the \" + String.valueOf(n) + \"nput.\";\n            result.add(tmp);\n        }\n        return result;",
        "grade-66": {
            "execution": 1
        },
        "61": "ArrayList<String> ans = new ArrayList<String>();\n        for (String s : lst) {\n            int count = 0;\n            for (int i = 0; i < s.length(); i++) {\n                if (Integer.parseInt(s.substring(i, i + 1)) % 2 == 1) {\n                    count++;\n                }\n            }\n            String s1 = \"the number of odd elements \" + String.valueOf(count) + \"n the str\" + String.valueOf(count) + \"ng \" + String.valueOf(count) + \" of the \" + String.valueOf(count) + \"nput.\";\n            ans.add(s1);\n        }\n        return ans;",
        "grade-61": {
            "execution": 1
        },
        "39": "ArrayList<String> result = new ArrayList<String>();\n        for (String s : lst) {\n            int num_odds = 0;\n            for (int i = 0; i < s.length(); i++) {\n                int d = Integer.parseInt(s.substring(i, i + 1));\n                if (d % 2 == 1) {\n                    num_odds++;\n                }\n            }\n            String new_s = s.replaceAll(\"\\\\d\", String.valueOf(num_odds));\n            result.add(new_s);\n        }\n        return result;",
        "grade-39": {
            "execution": 0
        },
        "30": "ArrayList<String> rez = new ArrayList<String>();\n        for (String str : lst) {\n            char[] arr = str.toCharArray();\n            int odd_count = 0;\n            for (char c : arr) {\n                if (Character.getNumericValue(c) % 2 == 1) {\n                    odd_count++;\n                }\n            }\n            rez.add(str.replaceAll(\"[0-9]\", \"\") + odd_count + \" of the \" + odd_count + \"nput.\");\n        }\n        return rez;",
        "grade-30": {
            "execution": 0
        },
        "194": "ArrayList<String> ret = new ArrayList<String>();\n        for (String s : lst) {\n            int count = 0;\n            for (int i = 0; i < s.length(); i++) {\n                if (Integer.parseInt(s.substring(i, i + 1)) % 2 == 1)\n                    count++;\n            }\n            if (count == 0) {\n                ret.add(\"the number of odd elements 0n the str0ng 0 of the 0nput.\");\n            } else {\n                ret.add(\"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"nput.\");\n            }\n        }\n        return ret;",
        "grade-194": {
            "execution": 1
        },
        "155": "ArrayList<String> result = new ArrayList<String>();\n        for (String elem : lst) {\n            int count = 0;\n            for (int i = 0; i < elem.length(); i++) {\n                if (Integer.parseInt(elem.substring(i, i + 1)) % 2 == 1) {\n                    count++;\n                }\n            }\n            result.add(replace(elem, count));\n        }\n        return result;",
        "grade-155": {
            "execution": 0
        },
        "26": "ArrayList<String> ans = new ArrayList<String>();\n        int i = 0;\n        for (String s : lst) {\n            int count = 0;\n            for (char c : s.toCharArray()) {\n                if (c % 2 == 1) count++;\n            }\n            String t = \"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"nput.\";\n            ans.add(t);\n            i++;\n        }\n        return ans;",
        "grade-26": {
            "execution": 1
        },
        "169": "ArrayList<String> res = new ArrayList<String>();\n        String temp = \"\";\n        for (int i = 0; i < lst.size(); i++) {\n            int oddCount = 0;\n            temp = lst.get(i);\n            for (int j = 0; j < temp.length(); j++) {\n                int num = Integer.parseInt(temp.substring(j, j + 1));\n                if (num % 2 != 0) {\n                    oddCount++;\n                }\n            }\n            res.add(\"the number of odd elements \" + oddCount + \"n the str\" + oddCount + \"ng \" + oddCount + \" of the \" + oddCount + \"nput.\");\n        }\n        return res;",
        "grade-169": {
            "execution": 1
        },
        "116": "ArrayList<String> res = new ArrayList<String>();\n        for (String s : lst) {\n            int odds = 0;\n            for (int i = 0; i < s.length(); i++) {\n                int digit = s.charAt(i) - '0';\n                if (digit % 2 == 1) {\n                    odds++;\n                }\n            }\n            res.add(makeString(odds, s));\n        }\n        return res;",
        "grade-116": {
            "execution": 0
        },
        "9": "ArrayList<String> ret = new ArrayList<String>();\n        for (String s : lst) {\n            int num_odd = 0;\n            for (int i = 0; i < s.length(); i++) {\n                if (Integer.parseInt(s.substring(i, i + 1)) % 2 == 1) {\n                    num_odd++;\n                }\n            }\n            ret.add(s.replaceAll(\"[0-9]\", \"n\")\n                    .replaceAll(\"[^n]\", \"n\")\n                    .replaceAll(\"n\", num_odd + \"\"));\n        }\n        return ret;",
        "grade-9": {
            "execution": 0
        },
        "7": "ArrayList<String> result = new ArrayList<String>();\n        for (String s : lst) {\n            int n = 0;\n            for (int i = 0; i < s.length(); i++) {\n                if (Integer.parseInt(s.substring(i, i + 1)) % 2 == 1) {\n                    n++;\n                }\n            }\n            result.add(s.replaceAll(\"\\\\d\", \"4\") + \": \" + n);\n        }\n        return result;",
        "grade-7": {
            "execution": 0
        },
        "27": "ArrayList<String> answer = new ArrayList<String>();\n        for (String str : lst) {\n            int count = 0;\n            for (int i = 0; i < str.length(); i++) {\n                int n = Character.getNumericValue(str.charAt(i));\n                if (n % 2 == 1) {\n                    count++;\n                }\n            }\n            String newStr = \"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"nput.\";\n            answer.add(newStr);\n        }\n        return answer;",
        "grade-27": {
            "execution": 1
        },
        "59": "ArrayList<String> result = new ArrayList<String>();\n        for (String s : lst) {\n            int count = 0;\n            for (int i = 0; i < s.length(); i++) {\n                int digit = Character.getNumericValue(s.charAt(i));\n                if (digit % 2 == 1) {\n                    count++;\n                }\n            }\n            StringBuilder sb = new StringBuilder(\"the number of odd elements \");\n            String countString = Integer.toString(count);\n            sb.append(countString);\n            sb.append(\"n the str\");\n            sb.append(countString);\n            sb.append(\"ng \");\n            sb.append(countString);\n            sb.append(\" of the \");\n            sb.append(countString);\n            sb.append(\"nput.\");\n            result.add(sb.toString());\n        }\n        return result;",
        "grade-59": {
            "execution": 1
        },
        "63": "ArrayList<String> out = new ArrayList<String>();\n        for (String str : lst) {\n            int count = 0;\n            for (char c : str.toCharArray()) {\n                if (c % 2 == 1) {\n                    count++;\n                }\n            }\n            out.add(String.format(\"the number of odd elements %dn the str%dng %d of the %dnput.\", count, str.length(), str.length(), str.length()));\n        }\n        return out;",
        "grade-63": {
            "execution": 0
        },
        "144": "int odd_count;\n        ArrayList<String> output = new ArrayList<String>();\n        for (String l : lst) {\n            odd_count = 0;\n            for (int i = 0; i < l.length(); i++) {\n                odd_count += (l.charAt(i) - '0') % 2 == 1 ? 1 : 0;\n            }\n            output.add(String.format(\"the number of odd elements %dn the str%dng %d of the %dnput.\", odd_count, odd_count, odd_count, odd_count));\n        }\n        return output;",
        "grade-144": {
            "execution": 1
        },
        "172": "ArrayList<String> result = new ArrayList<String>();\n        String tmp;\n        int count;\n        for (String i : lst) {\n            count = 0;\n            for (char c : i.toCharArray()) {\n                if (Character.getNumericValue(c) % 2 != 0) {\n                    count++;\n                }\n            }\n            tmp = \"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"nput.\";\n            result.add(tmp);\n        }\n        return result;",
        "grade-172": {
            "execution": 1
        },
        "bleu-182": 0.08064458479406124,
        "bleu-32": 0.23190399342469256,
        "bleu-6": 0.33608215967956134,
        "bleu-75": 0.3677653100108166,
        "bleu-66": 0.40906689418697295,
        "bleu-61": 0.36677021772932406,
        "bleu-39": 0.27386119029699435,
        "bleu-30": 0.4335537040734285,
        "bleu-194": 0.3847182583404523,
        "bleu-155": 0.3038770113149114,
        "bleu-26": 0.502841698093588,
        "bleu-169": 0.35905893671835076,
        "bleu-116": 0.37788039481245095,
        "bleu-9": 0.2757820417165776,
        "bleu-7": 0.38131463890060485,
        "bleu-27": 0.41914118394970196,
        "bleu-59": 0.24705416820449394,
        "bleu-63": 0.4030178371175975,
        "bleu-144": 0.3312629175988963,
        "bleu-172": 0.46981307281390705,
        "codebleu-182": 0.21711958097784684,
        "codebleu-32": 0.6164561552629814,
        "codebleu-6": 0.6685710359137828,
        "codebleu-75": 0.6252067864148723,
        "codebleu-66": 0.6112787823056848,
        "codebleu-61": 0.5993060049563536,
        "codebleu-39": 0.5195656085059268,
        "codebleu-30": 0.5733291126439934,
        "codebleu-194": 0.6748887318791348,
        "codebleu-155": 0.5012189988227268,
        "codebleu-26": 0.6321206553404963,
        "codebleu-169": 0.6503645331913307,
        "codebleu-116": 0.5289857214887204,
        "codebleu-9": 0.6009400109298288,
        "codebleu-7": 0.5695544162885272,
        "codebleu-27": 0.6059506718915513,
        "codebleu-59": 0.5682650612695836,
        "codebleu-63": 0.5035483793722182,
        "codebleu-144": 0.5123136413113563,
        "codebleu-172": 0.6005400464145487,
        "chrf-182": 0.3558330807709734,
        "chrf-32": 0.5162130467789378,
        "chrf-6": 0.5774904321546364,
        "chrf-75": 0.49917591916261683,
        "chrf-66": 0.5912117137146123,
        "chrf-61": 0.5358593345820739,
        "chrf-39": 0.4169303621531048,
        "chrf-30": 0.5241138112612977,
        "chrf-194": 0.5626281614298394,
        "chrf-155": 0.42919979172722156,
        "chrf-26": 0.620605349264402,
        "chrf-169": 0.5549829432289111,
        "chrf-116": 0.4628985593279909,
        "chrf-9": 0.43169066459546807,
        "chrf-7": 0.4626523373743229,
        "chrf-27": 0.5585930962609136,
        "chrf-59": 0.4774592309732119,
        "chrf-63": 0.5661890008902368,
        "chrf-144": 0.47481709145391465,
        "chrf-172": 0.6083347785660286,
        "rougel-182": 0.3815789473684211,
        "rougel-32": 0.45222929936305734,
        "rougel-6": 0.56957928802589,
        "rougel-75": 0.5985401459854014,
        "rougel-66": 0.6692015209125476,
        "rougel-61": 0.6188679245283019,
        "rougel-39": 0.4782608695652174,
        "rougel-30": 0.625,
        "rougel-194": 0.6292134831460674,
        "rougel-155": 0.5217391304347827,
        "rougel-26": 0.7312775330396477,
        "rougel-169": 0.6058394160583941,
        "rougel-116": 0.5576923076923077,
        "rougel-9": 0.5609756097560976,
        "rougel-7": 0.5855855855855856,
        "rougel-27": 0.6585365853658536,
        "rougel-59": 0.4758842443729903,
        "rougel-63": 0.6133333333333333,
        "rougel-144": 0.560344827586207,
        "rougel-172": 0.7272727272727273,
        "meteor-182": 0.20793563579277866,
        "meteor-32": 0.4843794723035646,
        "meteor-6": 0.7442655421634115,
        "meteor-75": 0.6439125512505401,
        "meteor-66": 0.6792115212315378,
        "meteor-61": 0.6215503202537898,
        "meteor-39": 0.36638681438059806,
        "meteor-30": 0.6069368181837634,
        "meteor-194": 0.6914934860350741,
        "meteor-155": 0.38869863013698636,
        "meteor-26": 0.6566475107606902,
        "meteor-169": 0.6928830230987874,
        "meteor-116": 0.4167957694026516,
        "meteor-9": 0.4419641261078035,
        "meteor-7": 0.4604764043822215,
        "meteor-27": 0.6615215224225937,
        "meteor-59": 0.5320387099218702,
        "meteor-63": 0.5156303715097358,
        "meteor-144": 0.4414714285714287,
        "meteor-172": 0.7771927068287747,
        "ruby-182": 0.2432432432432432,
        "ruby-32": 0.32512315270935965,
        "ruby-6": 0.4242424242424242,
        "ruby-75": 0.47239263803680986,
        "ruby-66": 0.5460526315789473,
        "ruby-61": 0.5,
        "ruby-39": 0.31092436974789917,
        "ruby-30": 0.47787610619469023,
        "ruby-194": 0.5192307692307692,
        "ruby-155": 0.33333333333333337,
        "ruby-26": 0.6206896551724138,
        "ruby-169": 0.48466257668711654,
        "ruby-116": 0.36036036036036034,
        "ruby-9": 0.437037037037037,
        "ruby-7": 0.42342342342342343,
        "ruby-27": 0.5629629629629629,
        "ruby-59": 0.35,
        "ruby-63": 0.49122807017543857,
        "ruby-144": 0.39669421487603307,
        "ruby-172": 0.6416666666666666,
        "codebertscore_f1-182": 0.7634201645851135,
        "codebertscore_f3-182": 0.7132129669189453,
        "codebertscore_f1-32": 0.8154117465019226,
        "codebertscore_f3-32": 0.8364001512527466,
        "codebertscore_f1-6": 0.8110623359680176,
        "codebertscore_f3-6": 0.8300503492355347,
        "codebertscore_f1-75": 0.8253694772720337,
        "codebertscore_f3-75": 0.846635639667511,
        "codebertscore_f1-66": 0.8827087879180908,
        "codebertscore_f3-66": 0.9061353206634521,
        "codebertscore_f1-61": 0.8650508522987366,
        "codebertscore_f3-61": 0.8887625932693481,
        "codebertscore_f1-39": 0.7883167266845703,
        "codebertscore_f3-39": 0.784092903137207,
        "codebertscore_f1-30": 0.857275664806366,
        "codebertscore_f3-30": 0.8662589192390442,
        "codebertscore_f1-194": 0.8585754036903381,
        "codebertscore_f3-194": 0.8711653351783752,
        "codebertscore_f1-155": 0.8007854223251343,
        "codebertscore_f3-155": 0.7851124405860901,
        "codebertscore_f1-26": 0.915024995803833,
        "codebertscore_f3-26": 0.9195944666862488,
        "codebertscore_f1-169": 0.8417080044746399,
        "codebertscore_f3-169": 0.8586571216583252,
        "codebertscore_f1-116": 0.8192251920700073,
        "codebertscore_f3-116": 0.7984140515327454,
        "codebertscore_f1-9": 0.7920808792114258,
        "codebertscore_f3-9": 0.7916205525398254,
        "codebertscore_f1-7": 0.8270313143730164,
        "codebertscore_f3-7": 0.8254023790359497,
        "codebertscore_f1-27": 0.8848189115524292,
        "codebertscore_f3-27": 0.8997819423675537,
        "codebertscore_f1-59": 0.7914494276046753,
        "codebertscore_f3-59": 0.8262693881988525,
        "codebertscore_f1-63": 0.8826921582221985,
        "codebertscore_f3-63": 0.8783374428749084,
        "codebertscore_f1-144": 0.8424800038337708,
        "codebertscore_f3-144": 0.8456955552101135,
        "codebertscore_f1-172": 0.9105063676834106,
        "codebertscore_f3-172": 0.9192427396774292,
        "codebertscore_s_f1-182": 0.792080283164978,
        "codebertscore_s_f3-182": 0.7390426397323608,
        "codebertscore_s_f1-32": 0.831333339214325,
        "codebertscore_s_f3-32": 0.8512046933174133,
        "codebertscore_s_f1-6": 0.8282971382141113,
        "codebertscore_s_f3-6": 0.8412178754806519,
        "codebertscore_s_f1-75": 0.830722451210022,
        "codebertscore_s_f3-75": 0.8506565690040588,
        "codebertscore_s_f1-66": 0.8824942111968994,
        "codebertscore_s_f3-66": 0.9044755697250366,
        "codebertscore_s_f1-61": 0.8628861308097839,
        "codebertscore_s_f3-61": 0.8848465085029602,
        "codebertscore_s_f1-39": 0.7968011498451233,
        "codebertscore_s_f3-39": 0.7897943258285522,
        "codebertscore_s_f1-30": 0.8590675592422485,
        "codebertscore_s_f3-30": 0.8671846985816956,
        "codebertscore_s_f1-194": 0.8743884563446045,
        "codebertscore_s_f3-194": 0.8845486640930176,
        "codebertscore_s_f1-155": 0.807917058467865,
        "codebertscore_s_f3-155": 0.7928870320320129,
        "codebertscore_s_f1-26": 0.9238704442977905,
        "codebertscore_s_f3-26": 0.9265320897102356,
        "codebertscore_s_f1-169": 0.8533063530921936,
        "codebertscore_s_f3-169": 0.8688830137252808,
        "codebertscore_s_f1-116": 0.8234342336654663,
        "codebertscore_s_f3-116": 0.8024638891220093,
        "codebertscore_s_f1-9": 0.8032156825065613,
        "codebertscore_s_f3-9": 0.8014683723449707,
        "codebertscore_s_f1-7": 0.8356403112411499,
        "codebertscore_s_f3-7": 0.8332816958427429,
        "codebertscore_s_f1-27": 0.8827885985374451,
        "codebertscore_s_f3-27": 0.896697461605072,
        "codebertscore_s_f1-59": 0.7973144054412842,
        "codebertscore_s_f3-59": 0.823906421661377,
        "codebertscore_s_f1-63": 0.8913604617118835,
        "codebertscore_s_f3-63": 0.8860082626342773,
        "codebertscore_s_f1-144": 0.8448262810707092,
        "codebertscore_s_f3-144": 0.8472245931625366,
        "codebertscore_s_f1-172": 0.905584990978241,
        "codebertscore_s_f3-172": 0.9148131608963013,
        "gpt35_nsnr-182": 0,
        "raw_gpt35_nsnr-182": "3 - The code snippet correctly iterates through the input list and calls the numberOfOddChars method on each string, adding the result to the output list. However, the numberOfOddChars method is not provided and its correctness cannot be evaluated.",
        "gpt35_nsnr-32": 4,
        "raw_gpt35_nsnr-32": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-75": 4,
        "raw_gpt35_nsnr-75": "4",
        "gpt35_nsnr-66": 4,
        "raw_gpt35_nsnr-66": "4",
        "gpt35_nsnr-61": 4,
        "raw_gpt35_nsnr-61": "4",
        "gpt35_nsnr-39": 4,
        "raw_gpt35_nsnr-39": "4",
        "gpt35_nsnr-30": 4,
        "raw_gpt35_nsnr-30": "4",
        "gpt35_nsnr-194": 4,
        "raw_gpt35_nsnr-194": "4",
        "gpt35_nsnr-155": 4,
        "raw_gpt35_nsnr-155": "4",
        "gpt35_nsnr-26": 4,
        "raw_gpt35_nsnr-26": "4",
        "gpt35_nsnr-169": 4,
        "raw_gpt35_nsnr-169": "4",
        "gpt35_nsnr-116": 4,
        "raw_gpt35_nsnr-116": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-27": 4,
        "raw_gpt35_nsnr-27": "4",
        "gpt35_nsnr-59": 4,
        "raw_gpt35_nsnr-59": "4",
        "gpt35_nsnr-63": 4,
        "raw_gpt35_nsnr-63": "4",
        "gpt35_nsnr-144": 4,
        "raw_gpt35_nsnr-144": "4",
        "gpt35_nsnr-172": 4,
        "raw_gpt35_nsnr-172": "4",
        "gpt35_nswr-182": 3,
        "raw_gpt35_nswr-182": "3",
        "gpt35_nswr-32": 3,
        "raw_gpt35_nswr-32": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-75": 3,
        "raw_gpt35_nswr-75": "3",
        "gpt35_nswr-66": 4,
        "raw_gpt35_nswr-66": "4",
        "gpt35_nswr-61": 4,
        "raw_gpt35_nswr-61": "4",
        "gpt35_nswr-39": 3,
        "raw_gpt35_nswr-39": "3",
        "gpt35_nswr-30": 3,
        "raw_gpt35_nswr-30": "3",
        "gpt35_nswr-194": 4,
        "raw_gpt35_nswr-194": "4",
        "gpt35_nswr-155": 4,
        "raw_gpt35_nswr-155": "4",
        "gpt35_nswr-26": 4,
        "raw_gpt35_nswr-26": "4",
        "gpt35_nswr-169": 4,
        "raw_gpt35_nswr-169": "4",
        "gpt35_nswr-116": 4,
        "raw_gpt35_nswr-116": "4",
        "gpt35_nswr-9": 4,
        "raw_gpt35_nswr-9": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-27": 4,
        "raw_gpt35_nswr-27": "4",
        "gpt35_nswr-59": 4,
        "raw_gpt35_nswr-59": "4",
        "gpt35_nswr-63": 4,
        "raw_gpt35_nswr-63": "4",
        "gpt35_nswr-144": 4,
        "raw_gpt35_nswr-144": "4",
        "gpt35_nswr-172": 4,
        "raw_gpt35_nswr-172": "4"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Add two numbers x and y\n    // >>> add(2, 3)\n    // 5\n    // >>> add(5, 7)\n    // 12\n    public static int add(int x, int y) {\n",
        "snippet": [
            "        return x + y;\n    }\n}"
        ],
        "simplified": "Add two numbers x and y",
        "task_id": "53",
        "23": "return 0;",
        "grade-23": {
            "execution": 0
        },
        "3": "return x + y;",
        "grade-3": {
            "execution": 1
        },
        "79": "int res = x ^ y;\n        int carry = (x & y) << 1;\n        if (carry == 0) {\n            return res;\n        }\n        return add(res, carry);",
        "grade-79": {
            "execution": 1
        },
        "72": "//TODO: complete add method\n        return 0;",
        "grade-72": {
            "execution": 0
        },
        "64": "// Your code here.\n        int xor=x^y;\n        int carry=x&y;\n        int result=0;\n        int i=0;\n        while(i<32){\n            if((carry&1)==1){\n                xor=xor^(1<<i);\n            }\n            carry=carry>>1;\n            i++;\n        }\n        return xor;",
        "grade-64": {
            "execution": 0
        },
        "30": "if (y == 0) {\n            return x;\n        }\n        int carry = (x & y) << 1;\n        int sum = x ^ y;\n        return add(sum, carry);",
        "grade-30": {
            "execution": 1
        },
        "113": "return 0;",
        "grade-113": {
            "execution": 0
        },
        "9": "if (y == 0) {\n            return x;\n        }\n        int sum = x ^ y;\n        int carry = (x & y) << 1;\n        return add(sum, carry);",
        "grade-9": {
            "execution": 1
        },
        "101": "int carry, sum;\n        do {\n            sum = x ^ y;\n            carry = (x & y) << 1;\n            x = sum;\n            y = carry;\n        } while (y != 0);\n        return sum;",
        "grade-101": {
            "execution": 1
        },
        "177": "int b1 = (x & y) << 1;\n        int b2 = x ^ y;\n        int result = 0;\n        while (b1 != 0) {\n            result = b1 ^ b2;\n            b1 = (b1 & b2) << 1;\n            b2 = result;\n        }\n        return result;",
        "grade-177": {
            "execution": 0
        },
        "155": "// YOUR CODE HERE\n        return -1;",
        "grade-155": {
            "execution": 0
        },
        "76": "throw new NotImplementedException();",
        "grade-76": {
            "execution": 0
        },
        "5": "int carry = (x & y) << 1;\n        int result = x ^ y;\n        while (carry != 0) {\n            int result1 = result ^ carry;\n            carry = (result & carry) << 1;\n            result = result1;\n        }\n        return result;",
        "grade-5": {
            "execution": 1
        },
        "82": "throw new IllegalStateException(\"Replace this line with your solution\");",
        "grade-82": {
            "execution": 0
        },
        "63": "int i;\n        if(x>0){\n            for(i=0;i<x;i++){\n                y+=1;\n            }\n        }\n        else if(x<0){\n            for(i=0;i>x;i--){\n                y-=1;\n            }\n        }\n        return y;",
        "grade-63": {
            "execution": 1
        },
        "2": "int a, b;\n        a = x ^ y;\n        b = (x & y) << 1;\n        if (b != 0) {\n            return add(a, b);\n        }\n        return a;",
        "grade-2": {
            "execution": 1
        },
        "1": "if (y == 0) {\n            return x;\n        } else {\n            return add(x ^ y, (x & y) << 1);\n        }",
        "grade-1": {
            "execution": 1
        },
        "146": "// replace with your code\n        return 0;",
        "grade-146": {
            "execution": 0
        },
        "22": "throw new UnsupportedOperationException(\"Waiting to be implemented.\");",
        "grade-22": {
            "execution": 0
        },
        "197": "// >>> replace this line with your code\n        return 0;",
        "grade-197": {
            "execution": 0
        },
        "bleu-23": 0.09138402379955025,
        "bleu-3": 0.6703200460356397,
        "bleu-79": 0.028209110765918012,
        "bleu-72": 0.04990049701936832,
        "bleu-64": 0.015440172686952369,
        "bleu-30": 0.031218512855465157,
        "bleu-113": 0.09138402379955025,
        "bleu-9": 0.031218512855465157,
        "bleu-101": 0.024887938988772416,
        "bleu-177": 0.01905560185964576,
        "bleu-155": 0.05669791110976001,
        "bleu-76": 0.05522397783539471,
        "bleu-5": 0.020536321507362905,
        "bleu-82": 0.024455939372403628,
        "bleu-63": 0.028352472140639497,
        "bleu-2": 0.026117888703725424,
        "bleu-1": 0.03630906651274709,
        "bleu-146": 0.05669791110976001,
        "bleu-22": 0.02627961710408444,
        "bleu-197": 0.03377156414337854,
        "codebleu-23": 0.164154535097668,
        "codebleu-3": 0.6468695873345053,
        "codebleu-79": 0.4393939393939394,
        "codebleu-72": 0.3333333333333333,
        "codebleu-64": 0.5909090909090909,
        "codebleu-30": 0.4393939393939394,
        "codebleu-113": 0.164154535097668,
        "codebleu-9": 0.4393939393939394,
        "codebleu-101": 0.4393939393939394,
        "codebleu-177": 0.3787878787878788,
        "codebleu-155": 0.3333333333333333,
        "codebleu-76": 0.19696969696969693,
        "codebleu-5": 0.3787878787878788,
        "codebleu-82": 0.19696969696969693,
        "codebleu-63": 0.5909090909090909,
        "codebleu-2": 0.4393939393939394,
        "codebleu-1": 0.515151515151515,
        "codebleu-146": 0.3333333333333333,
        "codebleu-22": 0.19696969696969693,
        "codebleu-197": 0.3333333333333333,
        "chrf-23": 0.3931884313539169,
        "chrf-3": 0.8178796207124591,
        "chrf-79": 0.19701472125271727,
        "chrf-72": 0.25822712728748937,
        "chrf-64": 0.16447717564085132,
        "chrf-30": 0.24975696074664616,
        "chrf-113": 0.3931884313539169,
        "chrf-9": 0.24975696074664616,
        "chrf-101": 0.20093408939422766,
        "chrf-177": 0.15933411786993562,
        "chrf-155": 0.2958751679510313,
        "chrf-76": 0.06097560975609756,
        "chrf-5": 0.13618465286653933,
        "chrf-82": 0.08181939469590072,
        "chrf-63": 0.21232396485784805,
        "chrf-2": 0.23149217968375063,
        "chrf-1": 0.3069339952526299,
        "chrf-146": 0.28050531200027534,
        "chrf-22": 0.058997050147492625,
        "chrf-197": 0.24153301082349915,
        "rougel-23": 0.4,
        "rougel-3": 0.8333333333333333,
        "rougel-79": 0.17391304347826086,
        "rougel-72": 0.23529411764705882,
        "rougel-64": 0.12048192771084337,
        "rougel-30": 0.17391304347826086,
        "rougel-113": 0.4,
        "rougel-9": 0.17391304347826086,
        "rougel-101": 0.1568627450980392,
        "rougel-177": 0.125,
        "rougel-155": 0.25,
        "rougel-76": 0.13333333333333333,
        "rougel-5": 0.13333333333333333,
        "rougel-82": 0.08695652173913043,
        "rougel-63": 0.16666666666666666,
        "rougel-2": 0.16326530612244897,
        "rougel-1": 0.25641025641025644,
        "rougel-146": 0.25,
        "rougel-22": 0.09090909090909091,
        "rougel-197": 0.19047619047619047,
        "meteor-23": 0.15151515151515152,
        "meteor-3": 0.7323529411764707,
        "meteor-79": 0.2450980392156863,
        "meteor-72": 0.136986301369863,
        "meteor-64": 0.2517985611510792,
        "meteor-30": 0.2450980392156863,
        "meteor-113": 0.15151515151515152,
        "meteor-9": 0.2450980392156863,
        "meteor-101": 0.23364485981308414,
        "meteor-177": 0.20833333333333334,
        "meteor-155": 0.1388888888888889,
        "meteor-76": 0.07042253521126761,
        "meteor-5": 0.21551724137931036,
        "meteor-82": 0.06329113924050632,
        "meteor-63": 0.4472257653061224,
        "meteor-2": 0.2380952380952381,
        "meteor-1": 0.3157894736842105,
        "meteor-146": 0.1388888888888889,
        "meteor-22": 0.06410256410256411,
        "meteor-197": 0.12987012987012989,
        "ruby-23": 0.2857142857142857,
        "ruby-3": 0.7142857142857143,
        "ruby-79": 0.10256410256410253,
        "ruby-72": 0.0,
        "ruby-64": 0.06578947368421051,
        "ruby-30": 0.10256410256410253,
        "ruby-113": 0.2857142857142857,
        "ruby-9": 0.10256410256410253,
        "ruby-101": 0.09090909090909094,
        "ruby-177": 0.07017543859649122,
        "ruby-155": 0.0,
        "ruby-76": 0.0,
        "ruby-5": 0.07547169811320753,
        "ruby-82": 0.0,
        "ruby-63": 0.09230769230769231,
        "ruby-2": 0.09523809523809523,
        "ruby-1": 0.125,
        "ruby-146": 0.0,
        "ruby-22": 0.0,
        "ruby-197": 0.0,
        "codebertscore_f1-23": 0.7296259999275208,
        "codebertscore_f3-23": 0.7066750526428223,
        "codebertscore_f1-3": 0.9450270533561707,
        "codebertscore_f3-3": 0.9450270533561707,
        "codebertscore_f1-79": 0.7459467649459839,
        "codebertscore_f3-79": 0.7788200378417969,
        "codebertscore_f1-72": 0.6850253939628601,
        "codebertscore_f3-72": 0.7243791818618774,
        "codebertscore_f1-64": 0.6735429763793945,
        "codebertscore_f3-64": 0.7259814143180847,
        "codebertscore_f1-30": 0.7434718608856201,
        "codebertscore_f3-30": 0.769361138343811,
        "codebertscore_f1-113": 0.7296259999275208,
        "codebertscore_f3-113": 0.7066750526428223,
        "codebertscore_f1-9": 0.7498381733894348,
        "codebertscore_f3-9": 0.7775978446006775,
        "codebertscore_f1-101": 0.7292449474334717,
        "codebertscore_f3-101": 0.7682368159294128,
        "codebertscore_f1-177": 0.7168974280357361,
        "codebertscore_f3-177": 0.7497634291648865,
        "codebertscore_f1-155": 0.6987143754959106,
        "codebertscore_f3-155": 0.7192209959030151,
        "codebertscore_f1-76": 0.6916270852088928,
        "codebertscore_f3-76": 0.7075745463371277,
        "codebertscore_f1-5": 0.7165259718894958,
        "codebertscore_f3-5": 0.7578854560852051,
        "codebertscore_f1-82": 0.7049466371536255,
        "codebertscore_f3-82": 0.7207392454147339,
        "codebertscore_f1-63": 0.6644381284713745,
        "codebertscore_f3-63": 0.7004236578941345,
        "codebertscore_f1-2": 0.7529301047325134,
        "codebertscore_f3-2": 0.7711566686630249,
        "codebertscore_f1-1": 0.7673523426055908,
        "codebertscore_f3-1": 0.7915345430374146,
        "codebertscore_f1-146": 0.7153176665306091,
        "codebertscore_f3-146": 0.7326597571372986,
        "codebertscore_f1-22": 0.6785302758216858,
        "codebertscore_f3-22": 0.6932491064071655,
        "codebertscore_f1-197": 0.694915235042572,
        "codebertscore_f3-197": 0.7130011320114136,
        "codebertscore_s_f1-23": 0.7597408294677734,
        "codebertscore_s_f3-23": 0.7274922132492065,
        "codebertscore_s_f1-3": 0.9924210906028748,
        "codebertscore_s_f3-3": 0.9924211502075195,
        "codebertscore_s_f1-79": 0.7664433717727661,
        "codebertscore_s_f3-79": 0.8097567558288574,
        "codebertscore_s_f1-72": 0.6837653517723083,
        "codebertscore_s_f3-72": 0.7326197624206543,
        "codebertscore_s_f1-64": 0.7031071186065674,
        "codebertscore_s_f3-64": 0.7694264650344849,
        "codebertscore_s_f1-30": 0.7686101198196411,
        "codebertscore_s_f3-30": 0.8090732097625732,
        "codebertscore_s_f1-113": 0.7597408294677734,
        "codebertscore_s_f3-113": 0.7274922132492065,
        "codebertscore_s_f1-9": 0.772361159324646,
        "codebertscore_s_f3-9": 0.8139628767967224,
        "codebertscore_s_f1-101": 0.7399894595146179,
        "codebertscore_s_f3-101": 0.7846691012382507,
        "codebertscore_s_f1-177": 0.7367153167724609,
        "codebertscore_s_f3-177": 0.7855263352394104,
        "codebertscore_s_f1-155": 0.690951406955719,
        "codebertscore_s_f3-155": 0.7245745062828064,
        "codebertscore_s_f1-76": 0.6402249932289124,
        "codebertscore_s_f3-76": 0.6639779210090637,
        "codebertscore_s_f1-5": 0.7341136932373047,
        "codebertscore_s_f3-5": 0.7871214151382446,
        "codebertscore_s_f1-82": 0.6516196131706238,
        "codebertscore_s_f3-82": 0.6656482219696045,
        "codebertscore_s_f1-63": 0.6864072680473328,
        "codebertscore_s_f3-63": 0.7332906126976013,
        "codebertscore_s_f1-2": 0.7768125534057617,
        "codebertscore_s_f3-2": 0.8025867938995361,
        "codebertscore_s_f1-1": 0.7900654673576355,
        "codebertscore_s_f3-1": 0.8162804245948792,
        "codebertscore_s_f1-146": 0.6969817876815796,
        "codebertscore_s_f3-146": 0.7165005803108215,
        "codebertscore_s_f1-22": 0.6277930736541748,
        "codebertscore_s_f3-22": 0.6426226496696472,
        "codebertscore_s_f1-197": 0.6815740466117859,
        "codebertscore_s_f3-197": 0.7106072306632996,
        "gpt35_nsnr-23": 0,
        "raw_gpt35_nsnr-23": "2 (The code snippet only returns 0 and does not implement the required functionality of adding two numbers. It fails all possible tests.)",
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-79": 3,
        "raw_gpt35_nsnr-79": "3",
        "gpt35_nsnr-72": 0,
        "raw_gpt35_nsnr-72": "0",
        "gpt35_nsnr-64": 3,
        "raw_gpt35_nsnr-64": "3",
        "gpt35_nsnr-30": 3,
        "raw_gpt35_nsnr-30": "3",
        "gpt35_nsnr-113": 0,
        "raw_gpt35_nsnr-113": "2 (The code snippet only returns 0 and does not implement the required functionality of adding two numbers. It fails all possible tests.)",
        "gpt35_nsnr-9": 3,
        "raw_gpt35_nsnr-9": "3",
        "gpt35_nsnr-101": 2,
        "raw_gpt35_nsnr-101": "2",
        "gpt35_nsnr-177": 2,
        "raw_gpt35_nsnr-177": "2",
        "gpt35_nsnr-155": 2,
        "raw_gpt35_nsnr-155": "2",
        "gpt35_nsnr-76": 0,
        "raw_gpt35_nsnr-76": "0",
        "gpt35_nsnr-5": 3,
        "raw_gpt35_nsnr-5": "3",
        "gpt35_nsnr-82": 0,
        "raw_gpt35_nsnr-82": "0",
        "gpt35_nsnr-63": 3,
        "raw_gpt35_nsnr-63": "3",
        "gpt35_nsnr-2": 3,
        "raw_gpt35_nsnr-2": "3",
        "gpt35_nsnr-1": 3,
        "raw_gpt35_nsnr-1": "3",
        "gpt35_nsnr-146": 2,
        "raw_gpt35_nsnr-146": "2",
        "gpt35_nsnr-22": 3,
        "raw_gpt35_nsnr-22": "3",
        "gpt35_nsnr-197": 3,
        "raw_gpt35_nsnr-197": "3",
        "gpt35_nswr-23": 2,
        "raw_gpt35_nswr-23": "2",
        "gpt35_nswr-3": 4,
        "raw_gpt35_nswr-3": "4",
        "gpt35_nswr-79": 4,
        "raw_gpt35_nswr-79": "4",
        "gpt35_nswr-72": 3,
        "raw_gpt35_nswr-72": "3",
        "gpt35_nswr-64": 3,
        "raw_gpt35_nswr-64": "3",
        "gpt35_nswr-30": 3,
        "raw_gpt35_nswr-30": "3",
        "gpt35_nswr-113": 1,
        "raw_gpt35_nswr-113": "1",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-101": 1,
        "raw_gpt35_nswr-101": "1",
        "gpt35_nswr-177": 0,
        "raw_gpt35_nswr-177": "0",
        "gpt35_nswr-155": 2,
        "raw_gpt35_nswr-155": "2",
        "gpt35_nswr-76": 0,
        "raw_gpt35_nswr-76": "0",
        "gpt35_nswr-5": 2,
        "raw_gpt35_nswr-5": "2",
        "gpt35_nswr-82": 0,
        "raw_gpt35_nswr-82": "0",
        "gpt35_nswr-63": 3,
        "raw_gpt35_nswr-63": "3",
        "gpt35_nswr-2": 2,
        "raw_gpt35_nswr-2": "2",
        "gpt35_nswr-1": 2,
        "raw_gpt35_nswr-1": "2",
        "gpt35_nswr-146": 4,
        "raw_gpt35_nswr-146": "4",
        "gpt35_nswr-22": 0,
        "raw_gpt35_nswr-22": "0",
        "gpt35_nswr-197": 4,
        "raw_gpt35_nswr-197": "4"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Find the shortest palindrome that begins with a supplied string.\n    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied string that is a palindrome.\n    // - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    // >>> make_palindrome('')\n    // ''\n    // >>> make_palindrome('cat')\n    // 'catac'\n    // >>> make_palindrome('cata')\n    // 'catac'\n    public static String makePalindrome(String string) {\n",
        "snippet": [
            "        if (string.length() == 0) {\n            return \"\";\n        }\n\n        int beginning_of_suffix = 0;\n\n        while (!isPalindrome(string.substring(beginning_of_suffix))) {\n            beginning_of_suffix++;\n        }\n\n        return string + new StringBuffer(string.substring(0, beginning_of_suffix)).reverse().toString();\n    }\n}"
        ],
        "simplified": "Test if given string is a palindrome",
        "task_id": "10",
        "167": "// >>> make_palindrome('')\n        // ''\n        // >>> make_palindrome('cat')\n        // 'catac'\n        // >>> make_palindrome('cata')\n        // 'catac'\n        StringBuilder prefix = new StringBuilder();\n        StringBuilder suffix = new StringBuilder();\n        // Find the longest postfix of supplied string that is a palindrome.\n        for (int i = 0; i < string.length(); i++) {\n            prefix.append(string.charAt(i));\n            suffix.insert(0, string.charAt(i));\n            if (prefix.toString().equals(suffix.toString())) {\n                break;\n            }\n        }\n        // Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n        return string + prefix.reverse().toString();",
        "grade-167": {
            "execution": 0
        },
        "28": "if (string.isEmpty()) return string;\n        int length = string.length();\n        int suffix = -1;\n        while (suffix < length / 2) {\n            int i = 0;\n            while (2 * suffix + i < length && string.charAt(suffix + i) == string.charAt(length - 1 - i)) i++;\n            if (i > 0) {\n                suffix += i;\n            } else {\n                suffix--;\n            }\n        }\n        return string + new StringBuilder(string.substring(0, length - suffix - 1)).reverse().toString();",
        "grade-28": {
            "execution": 0
        },
        "6": "if (string.length() == 0) return string;\n        int[] indexes = new int[string.length()];\n        int index = 0;\n        int count = 0;\n        while (index < string.length()) {\n            if (string.charAt(index) == string.charAt(0)) {\n                indexes[count] = index;\n                count++;\n            }\n            index++;\n        }\n        if (count == 0) return \"\";\n        for (int i = 0; i < count; i++) {\n            int mirror = indexes[i];\n            boolean isPalindrome = true;\n            for (int j = 0; j < mirror; j++) {\n                if (string.charAt(j) != string.charAt(mirror - j)) {\n                    isPalindrome = false;\n                    break;\n                }\n            }\n            if (isPalindrome) {\n                String reversed = \"\";\n                int length = string.length() - 1;\n                while (length >= mirror) {\n                    reversed += string.charAt(length);\n                    length--;\n                }\n                return string + reversed;\n            }\n        }\n        return \"\";",
        "grade-6": {
            "execution": 0
        },
        "194": "int palindromeSuffixLength = longestPalindromeSuffixLength(string);\n        String prefix = string.substring(0, string.length() - palindromeSuffixLength);\n        StringBuilder sb = new StringBuilder(string);\n        sb.append(new StringBuilder(prefix).reverse());\n        return sb.toString();",
        "grade-194": {
            "execution": 0
        },
        "71": "StringBuilder postfix = new StringBuilder();\n        StringBuilder prefix = new StringBuilder();\n        int n = string.length();\n        while (n > 0) {\n            prefix.append(string.charAt(0));\n            if (string.equals(string.substring(0, n)) && string.equals(string.substring(n))) {\n                postfix.append(string.substring(0, n));\n                break;\n            }\n            n -= 1;\n        }\n        return prefix.toString() + postfix.reverse().toString();",
        "grade-71": {
            "execution": 0
        },
        "63": "String postfix = findLongestPalindromicSuffix(string);\n        String prefix = reverseString(string.substring(0, string.length() - postfix.length()));\n        return prefix + string + postfix;",
        "grade-63": {
            "execution": 0
        },
        "58": "throw new UnsupportedOperationException(\"TODO\");",
        "grade-58": {
            "execution": 0
        },
        "35": "String stringReversed = new StringBuilder(string).reverse().toString();\n        String stringAppended = string + \"$\" + stringReversed;\n        int[] longestPrefix = new int[stringAppended.length()];\n        for (int i = 1; i < stringAppended.length(); i++) {\n            int j = longestPrefix[i - 1];\n            while (j > 0 && stringAppended.charAt(i) != stringAppended.charAt(j))\n                j = longestPrefix[j - 1];\n            if (stringAppended.charAt(i) == stringAppended.charAt(j))\n                j += 1;\n            longestPrefix[i] = j;\n        }\n        return stringReversed.substring(0, string.length() - longestPrefix[stringAppended.length() - 1]) + string;",
        "grade-35": {
            "execution": 0
        },
        "193": "if (string.length() == 0) {\n            return string;\n        }\n\n        // Find the longest palindromic suffix.\n        int max_len = 1;\n        int max_end = 0;\n        for (int end = 1; end < string.length(); end++) {\n            for (int len = 1; len <= end; len++) {\n                // Test whether string[end - len + 1, end] is a palindrome.\n                if (len <= end && string.charAt(end - len) == string.charAt(end)) {\n                    // string[end - len + 1, end] is a palindrome.\n                    if (len > max_len) {\n                        max_len = len;\n                        max_end = end;\n                    }\n                } else {\n                    break;\n                }\n            }\n        }\n\n        // Create the reversed string of string[0, max_end - max_len].\n        int cut_start = max_end - max_len + 1;\n        int cut_end = max_end + 1;\n        String reversed_string = new StringBuilder(string.substring(0, cut_start)).reverse().toString();\n\n        // Return the concatenation of the reversed string and string[cut_end].\n        return string.substring(0, cut_end) + reversed_string;",
        "grade-193": {
            "execution": 0
        },
        "26": "assert string != null;\n        return Stream.of(string.length(), suffixLength(string))\n            .mapToInt(Integer::intValue)\n            .min()\n            .map(n -> new StringBuilder(string.substring(0, n)).reverse().toString())\n            .map(s -> new StringBuilder(string).append(s).toString())\n            .orElse(string);",
        "grade-26": {
            "execution": 0
        },
        "178": "// >>> len(string)\n        // 5\n        int n = string.length();\n        for (int i = n - 1; i >= 0; i--) {\n            // >>> string[:1]\n            // 'a'\n            // >>> string[:2]\n            // 'ca'\n            // >>> string[:3]\n            // 'cat'\n            // >>> string[:4]\n            // 'cata'\n            // >>> string[:5]\n            // 'cata'\n            // >>> string[:6]\n            // 'cata'\n            if (isPalindrome(string.substring(0, i + 1))) {\n                return string + reverse(string.substring(i + 1));\n            }\n        }\n        throw new IllegalArgumentException(\"The supplied string is not a palindrome.\");",
        "grade-178": {
            "execution": 0
        },
        "143": "int k = 0;\n        for (int i = 0; i < string.length(); i++) {\n            String s = string.substring(i);\n            String s_reversed = new StringBuilder(s).reverse().toString();\n            if (s.equals(s_reversed)) {\n                k = i;\n                break;\n            }\n        }\n        String prefix = string.substring(0, k);\n        String prefix_reversed = new StringBuilder(prefix).reverse().toString();\n        return string + prefix_reversed;",
        "grade-143": {
            "execution": 1
        },
        "22": "String revString = new StringBuilder(string).reverse().toString();\n        String palindrome = null;\n        String maxPrefix = null;\n        String maxSuffix = null;\n        int maxLength = 0;\n        int stringLength = string.length();\n        for (int i = 0; i < stringLength; i++) {\n            String prefix = string.substring(0, i);\n            String suffix = revString.substring(stringLength - i);\n            if (prefix.equals(suffix)) {\n                palindrome = prefix;\n                maxLength = i;\n            }\n        }\n        String revPalindrome = new StringBuilder(palindrome).reverse().toString();\n        return string + revPalindrome.substring(maxLength);",
        "grade-22": {
            "execution": 0
        },
        "155": "StringBuilder sb = new StringBuilder(string);\n        // rsb holds the string in reverse order.\n        StringBuilder rsb = new StringBuilder(string).reverse();\n        int n = string.length();\n        int[] p = new int[n];\n        p[0] = 0;\n        int k = 0;\n        for (int i = 1; i < n; i++) {\n            while (k > 0 && string.charAt(k) != string.charAt(i))\n                k = p[k - 1];\n            if (string.charAt(k) == string.charAt(i))\n                k++;\n            p[i] = k;\n        }\n        // Now we know the length of the longest palindromic suffix.\n        int l = p[n - 1];\n        // Append all the characters starting from the character l.\n        sb.append(rsb.substring(l));\n        return sb.toString();",
        "grade-155": {
            "execution": 0
        },
        "112": "int index = -1;\n        for (int i = 0; i < string.length(); i++) {\n            int palindromeLength = i + 1;\n            boolean stringBeginsWithPalindrome = string.startsWith(string.substring(string.length() - palindromeLength));\n            if (stringBeginsWithPalindrome) {\n                index = i;\n            }\n        }\n        String suffix = \"\";\n        if (index > -1) {\n            suffix = string.substring(string.length() - index - 1);\n        }\n        return string + new StringBuilder(suffix).reverse().toString();",
        "grade-112": {
            "execution": 0
        },
        "8": "if (string.length() == 0) {\n            return string;\n        }\n        int longestPalindromePrefix = findLongestPalindromePrefix(string);\n        String prefix = string.substring(0, longestPalindromePrefix);\n        StringBuilder sb = new StringBuilder(string);\n        sb.append(new StringBuilder(prefix).reverse());\n        return sb.toString();",
        "grade-8": {
            "execution": 0
        },
        "7": "String result = string;\n        String reverse = new StringBuilder(string).reverse().toString();\n        for (int i = string.length(); i > 0; i--) {\n            if (string.substring(string.length() - i).equals(reverse.substring(0, i))) {\n                result += reverse.substring(i);\n                break;\n            }\n        }\n        return result;",
        "grade-7": {
            "execution": 1
        },
        "23": "int right = string.length() - 1;\n        while (right >= 0) {\n            if (isPalindrome(string, 0, right)) {\n                StringBuilder sb = new StringBuilder(string.substring(right + 1));\n                String reverse = sb.reverse().toString();\n                string += reverse;\n                break;\n            }\n            right--;\n        }\n        return string;",
        "grade-23": {
            "execution": 0
        },
        "56": "int length = string.length();\n        if (length == 0) {\n            return string;\n        }\n        int l = 0;\n        int r = length - 1;\n        int l_palindrome = -1;\n        int r_palindrome = -1;\n        while (l < r) {\n            if (string.charAt(l) == string.charAt(r)) {\n                l_palindrome = l;\n                r_palindrome = r;\n            }\n            ++l;\n            --r;\n        }\n        if (l_palindrome == -1) {\n            // The whole string is a palindrome.\n            return string;\n        }\n        return string + string.substring(l_palindrome, r_palindrome + 1).chars().mapToObj(i -> (char) i).collect(Collectors.toList()).stream().map(Object::toString).collect(Collectors.joining(\"\")).chars().mapToObj(i -> (char) i).collect(Collectors.toList()).stream().map(Object::toString).collect(Collectors.joining(\"\")).substring(length);",
        "grade-56": {
            "execution": 0
        },
        "60": "String palindrome = \"\";\n        StringBuilder sb = new StringBuilder(string);\n        String rev = sb.reverse().toString();\n        int result = 0;\n        for (int i = 0; i < string.length(); i++) {\n            if (string.substring(0, i).equals(rev.substring(string.length() - i))) {\n                result = i;\n            }\n        }\n        palindrome = string + rev.substring(string.length() - result);\n        return palindrome;",
        "grade-60": {
            "execution": 0
        },
        "bleu-167": 0.1304364098589737,
        "bleu-28": 0.2821790000883102,
        "bleu-6": 0.12753989003719923,
        "bleu-194": 0.28019941822765815,
        "bleu-71": 0.25771979336309864,
        "bleu-63": 0.1706597234746699,
        "bleu-58": 0.00046204720214730973,
        "bleu-35": 0.14614759855571663,
        "bleu-193": 0.154770352800853,
        "bleu-26": 0.24401863537084645,
        "bleu-178": 0.14218700706582804,
        "bleu-143": 0.2617435706004018,
        "bleu-22": 0.1854835747494261,
        "bleu-155": 0.1100650862742246,
        "bleu-112": 0.2674558967248852,
        "bleu-8": 0.37770789993354564,
        "bleu-7": 0.3335474095952925,
        "bleu-23": 0.35274159162443497,
        "bleu-56": 0.11609052924456358,
        "bleu-60": 0.28607526900174757,
        "codebleu-167": 0.5858185006241976,
        "codebleu-28": 0.6015687057804804,
        "codebleu-6": 0.6419884729662925,
        "codebleu-194": 0.4625760509227988,
        "codebleu-71": 0.5955372864081289,
        "codebleu-63": 0.35738299054181893,
        "codebleu-58": 0.05714604782834288,
        "codebleu-35": 0.5801940978087449,
        "codebleu-193": 0.6937855219644419,
        "codebleu-26": 0.4943373016262758,
        "codebleu-178": 0.5460175833083254,
        "codebleu-143": 0.6056079667427591,
        "codebleu-22": 0.6038567667837564,
        "codebleu-155": 0.5728680255500987,
        "codebleu-112": 0.5858856989312348,
        "codebleu-8": 0.586066349797309,
        "codebleu-7": 0.5630888011643047,
        "codebleu-23": 0.5441949589393521,
        "codebleu-56": 0.6592205084445241,
        "codebleu-60": 0.6150924862111561,
        "chrf-167": 0.4076793668155846,
        "chrf-28": 0.5266284491712595,
        "chrf-6": 0.37014526167061346,
        "chrf-194": 0.44450590053235073,
        "chrf-71": 0.4584323200136247,
        "chrf-63": 0.3648841905352198,
        "chrf-58": 0.036533746280277626,
        "chrf-35": 0.3820331234635915,
        "chrf-193": 0.41350972247466883,
        "chrf-26": 0.4190094676837164,
        "chrf-178": 0.41057688706410234,
        "chrf-143": 0.45053191476424603,
        "chrf-22": 0.459141260394306,
        "chrf-155": 0.3881527568023827,
        "chrf-112": 0.514079072311272,
        "chrf-8": 0.4964033389758935,
        "chrf-7": 0.4477716007236643,
        "chrf-23": 0.47387972186357574,
        "chrf-56": 0.36765319005541214,
        "chrf-60": 0.4677559803723696,
        "rougel-167": 0.2801556420233463,
        "rougel-28": 0.5099999999999999,
        "rougel-6": 0.31683168316831684,
        "rougel-194": 0.4202898550724638,
        "rougel-71": 0.418848167539267,
        "rougel-63": 0.3508771929824561,
        "rougel-58": 0.12345679012345678,
        "rougel-35": 0.308300395256917,
        "rougel-193": 0.3525641025641026,
        "rougel-26": 0.39520958083832336,
        "rougel-178": 0.308300395256917,
        "rougel-143": 0.4382022471910112,
        "rougel-22": 0.34703196347031967,
        "rougel-155": 0.29304029304029305,
        "rougel-112": 0.4205128205128206,
        "rougel-8": 0.5675675675675675,
        "rougel-7": 0.41509433962264153,
        "rougel-23": 0.5066666666666667,
        "rougel-56": 0.33003300330033003,
        "rougel-60": 0.3777777777777777,
        "meteor-167": 0.5479117385897478,
        "meteor-28": 0.708396331967523,
        "meteor-6": 0.41848386113328156,
        "meteor-194": 0.457742309787113,
        "meteor-71": 0.5573681372495076,
        "meteor-63": 0.3234734722460646,
        "meteor-58": 0.06651932743976424,
        "meteor-35": 0.42866281660265587,
        "meteor-193": 0.39887977731151497,
        "meteor-26": 0.3802279738121751,
        "meteor-178": 0.4644933799291826,
        "meteor-143": 0.5987466124661247,
        "meteor-22": 0.5266022408000725,
        "meteor-155": 0.4122310081057217,
        "meteor-112": 0.5813342465027446,
        "meteor-8": 0.5592780482083162,
        "meteor-7": 0.4276785674498469,
        "meteor-23": 0.5860288108143341,
        "meteor-56": 0.44778422426595726,
        "meteor-60": 0.5398165329937809,
        "ruby-167": 0.17647058823529416,
        "ruby-28": 0.36923076923076925,
        "ruby-6": 0.20171673819742486,
        "ruby-194": 0.2571428571428571,
        "ruby-71": 0.2975206611570248,
        "ruby-63": 0.19999999999999996,
        "ruby-58": 0.05714285714285716,
        "ruby-35": 0.180327868852459,
        "ruby-193": 0.22314049586776863,
        "ruby-26": 0.2680412371134021,
        "ruby-178": 0.1693989071038251,
        "ruby-143": 0.32407407407407407,
        "ruby-22": 0.22818791946308725,
        "ruby-155": 0.16748768472906406,
        "ruby-112": 0.28800000000000003,
        "ruby-8": 0.4487179487179487,
        "ruby-7": 0.2471910112359551,
        "ruby-23": 0.3125,
        "ruby-56": 0.20171673819742486,
        "ruby-60": 0.2272727272727273,
        "codebertscore_f1-167": 0.7040819525718689,
        "codebertscore_f3-167": 0.7242727279663086,
        "codebertscore_f1-28": 0.7999763488769531,
        "codebertscore_f3-28": 0.8144516944885254,
        "codebertscore_f1-6": 0.7210626006126404,
        "codebertscore_f3-6": 0.7476528286933899,
        "codebertscore_f1-194": 0.7862004041671753,
        "codebertscore_f3-194": 0.7854792475700378,
        "codebertscore_f1-71": 0.7762916684150696,
        "codebertscore_f3-71": 0.7778636813163757,
        "codebertscore_f1-63": 0.7601117491722107,
        "codebertscore_f3-63": 0.751291036605835,
        "codebertscore_f1-58": 0.5860399007797241,
        "codebertscore_f3-58": 0.5654633641242981,
        "codebertscore_f1-35": 0.7447577118873596,
        "codebertscore_f3-35": 0.764420747756958,
        "codebertscore_f1-193": 0.7207650542259216,
        "codebertscore_f3-193": 0.7664117813110352,
        "codebertscore_f1-26": 0.7591644525527954,
        "codebertscore_f3-26": 0.7544878125190735,
        "codebertscore_f1-178": 0.7004510760307312,
        "codebertscore_f3-178": 0.7231629490852356,
        "codebertscore_f1-143": 0.7687634825706482,
        "codebertscore_f3-143": 0.7710614204406738,
        "codebertscore_f1-22": 0.7659888863563538,
        "codebertscore_f3-22": 0.784130871295929,
        "codebertscore_f1-155": 0.7055732011795044,
        "codebertscore_f3-155": 0.7344757914543152,
        "codebertscore_f1-112": 0.7890616655349731,
        "codebertscore_f3-112": 0.8018345832824707,
        "codebertscore_f1-8": 0.8357678651809692,
        "codebertscore_f3-8": 0.8364217877388,
        "codebertscore_f1-7": 0.7956525087356567,
        "codebertscore_f3-7": 0.7859402894973755,
        "codebertscore_f1-23": 0.8064807057380676,
        "codebertscore_f3-23": 0.805696427822113,
        "codebertscore_f1-56": 0.6923031210899353,
        "codebertscore_f3-56": 0.7361990213394165,
        "codebertscore_f1-60": 0.7849968671798706,
        "codebertscore_f3-60": 0.7847904562950134,
        "codebertscore_s_f1-167": 0.7303109169006348,
        "codebertscore_s_f3-167": 0.7436131238937378,
        "codebertscore_s_f1-28": 0.8063358068466187,
        "codebertscore_s_f3-28": 0.8221458792686462,
        "codebertscore_s_f1-6": 0.7710328698158264,
        "codebertscore_s_f3-6": 0.7784680128097534,
        "codebertscore_s_f1-194": 0.7980587482452393,
        "codebertscore_s_f3-194": 0.798117458820343,
        "codebertscore_s_f1-71": 0.7819802165031433,
        "codebertscore_s_f3-71": 0.7838948369026184,
        "codebertscore_s_f1-63": 0.7737346887588501,
        "codebertscore_s_f3-63": 0.7657595872879028,
        "codebertscore_s_f1-58": 0.5795860886573792,
        "codebertscore_s_f3-58": 0.5483648180961609,
        "codebertscore_s_f1-35": 0.760505735874176,
        "codebertscore_s_f3-35": 0.7820414900779724,
        "codebertscore_s_f1-193": 0.7586263418197632,
        "codebertscore_s_f3-193": 0.7937629818916321,
        "codebertscore_s_f1-26": 0.7688755393028259,
        "codebertscore_s_f3-26": 0.7631932497024536,
        "codebertscore_s_f1-178": 0.7515209317207336,
        "codebertscore_s_f3-178": 0.7743332982063293,
        "codebertscore_s_f1-143": 0.7707422375679016,
        "codebertscore_s_f3-143": 0.7763355374336243,
        "codebertscore_s_f1-22": 0.7850870490074158,
        "codebertscore_s_f3-22": 0.7971864342689514,
        "codebertscore_s_f1-155": 0.7475237250328064,
        "codebertscore_s_f3-155": 0.7746037840843201,
        "codebertscore_s_f1-112": 0.7999345064163208,
        "codebertscore_s_f3-112": 0.812583863735199,
        "codebertscore_s_f1-8": 0.8402535319328308,
        "codebertscore_s_f3-8": 0.8415828943252563,
        "codebertscore_s_f1-7": 0.7998014092445374,
        "codebertscore_s_f3-7": 0.7899351716041565,
        "codebertscore_s_f1-23": 0.8098883032798767,
        "codebertscore_s_f3-23": 0.8104475736618042,
        "codebertscore_s_f1-56": 0.7515259981155396,
        "codebertscore_s_f3-56": 0.7783803939819336,
        "codebertscore_s_f1-60": 0.7850385308265686,
        "codebertscore_s_f3-60": 0.7842096090316772,
        "gpt35_nsnr-167": 4,
        "raw_gpt35_nsnr-167": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-194": 4,
        "raw_gpt35_nsnr-194": "4",
        "gpt35_nsnr-71": 3,
        "raw_gpt35_nsnr-71": "3",
        "gpt35_nsnr-63": 3,
        "raw_gpt35_nsnr-63": "3",
        "gpt35_nsnr-58": 0,
        "raw_gpt35_nsnr-58": "0",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-193": 4,
        "raw_gpt35_nsnr-193": "4",
        "gpt35_nsnr-26": 3,
        "raw_gpt35_nsnr-26": "3",
        "gpt35_nsnr-178": 3,
        "raw_gpt35_nsnr-178": "3",
        "gpt35_nsnr-143": 3,
        "raw_gpt35_nsnr-143": "3",
        "gpt35_nsnr-22": 3,
        "raw_gpt35_nsnr-22": "3",
        "gpt35_nsnr-155": 4,
        "raw_gpt35_nsnr-155": "4",
        "gpt35_nsnr-112": 3,
        "raw_gpt35_nsnr-112": "3",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 3,
        "raw_gpt35_nsnr-23": "3",
        "gpt35_nsnr-56": 3,
        "raw_gpt35_nsnr-56": "3",
        "gpt35_nsnr-60": 3,
        "raw_gpt35_nsnr-60": "3",
        "gpt35_nswr-167": 3,
        "raw_gpt35_nswr-167": "3",
        "gpt35_nswr-28": 4,
        "raw_gpt35_nswr-28": "4",
        "gpt35_nswr-6": 2,
        "raw_gpt35_nswr-6": "2",
        "gpt35_nswr-194": 3,
        "raw_gpt35_nswr-194": "3",
        "gpt35_nswr-71": 3,
        "raw_gpt35_nswr-71": "3",
        "gpt35_nswr-63": 3,
        "raw_gpt35_nswr-63": "3",
        "gpt35_nswr-58": 0,
        "raw_gpt35_nswr-58": "0",
        "gpt35_nswr-35": 2,
        "raw_gpt35_nswr-35": "2",
        "gpt35_nswr-193": 3,
        "raw_gpt35_nswr-193": "3",
        "gpt35_nswr-26": 2,
        "raw_gpt35_nswr-26": "2",
        "gpt35_nswr-178": 2,
        "raw_gpt35_nswr-178": "2",
        "gpt35_nswr-143": 3,
        "raw_gpt35_nswr-143": "3",
        "gpt35_nswr-22": 3,
        "raw_gpt35_nswr-22": "3",
        "gpt35_nswr-155": 3,
        "raw_gpt35_nswr-155": "3",
        "gpt35_nswr-112": 3,
        "raw_gpt35_nswr-112": "3",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-56": 3,
        "raw_gpt35_nswr-56": "3",
        "gpt35_nswr-60": 2,
        "raw_gpt35_nswr-60": "2"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a list of numbers, return the sum of squares of the numbers\n    // in the list that are odd. Ignore numbers that are negative or not integers.\n    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    // double_the_difference([-1, -2, 0]) == 0\n    // double_the_difference([9, -2]) == 81\n    // double_the_difference([0]) == 0  \n    // If the input list is empty, return 0.\n    public static int doubleTheDifference(ArrayList<Float> lst) {\n",
        "snippet": [
            "        return lst.stream().filter(i -> i instanceof Integer p && p > 0 && p % 2 != 0).map(i -> (Integer) i * (Integer) i).reduce(Integer::sum).orElse(0);\n    }\n}"
        ],
        "simplified": "Given a list of numbers, return the sum of squares of the numbers in the list that are odd. Ignore numbers that are negative or not integers. If the input list is empty, return 0.",
        "task_id": "151",
        "43": "int result = 0;\n        if (lst == null) return result;\n        for (Float f : lst) {\n            if (f.isNaN() || f.isInfinite() || f < 0) continue;\n            int floor = (int) Math.floor(f);\n            if (floor % 2 == 1) result += floor * floor;\n        }\n        return result;",
        "grade-43": {
            "execution": 1
        },
        "6": "return lst.stream()\n                .filter(i -> (i % 2 == 1 && i > 0))\n                .mapToInt(Float::intValue)\n                .map(x -> x * x)\n                .sum();",
        "grade-6": {
            "execution": 1
        },
        "103": "int res = 0;\n        for (Float f : lst) {\n            if (f > 0 && f % 2 != 0) {\n                res += f * f;\n            }\n        }\n        return res;",
        "grade-103": {
            "execution": 1
        },
        "92": "int total = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            total += Math.pow(lst.get(i), 2);\n        }\n        return total;",
        "grade-92": {
            "execution": 0
        },
        "85": "int squareSum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            float num = lst.get(i);\n            if (num > 0 && num % 2 == 1) {\n                squareSum += Math.pow(num, 2);\n            }\n        }\n        return squareSum;",
        "grade-85": {
            "execution": 1
        },
        "53": "int sum = 0;\n        for (Float f : lst) {\n            if (f > 0 && (int)f == f) {\n                sum += f * f;\n            }\n        }\n        return sum;",
        "grade-53": {
            "execution": 0
        },
        "39": "// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n        // double_the_difference([-1, -2, 0]) == 0\n        // double_the_difference([9, -2]) == 81\n        // double_the_difference([0]) == 0\n        // If the input list is empty, return 0.\n        return 0;",
        "grade-39": {
            "execution": 0
        },
        "199": "//YOUR CODE HERE",
        "grade-199": {
            "execution": 0
        },
        "35": "int squares = 0;\n\t\tfor (float i : lst) {\n\t\t\tif (i >= 0 && i % 2 == 1) {\n\t\t\t\tsquares += i * i;\n\t\t\t}\n\t\t}\n\t\treturn squares;",
        "grade-35": {
            "execution": 1
        },
        "150": "// Your code here!",
        "grade-150": {
            "execution": 0
        },
        "9": "// Your Code Here\n        return 0;",
        "grade-9": {
            "execution": 0
        },
        "8": "int sum = 0;\n        int index = 0;\n        while (index < lst.size()) {\n            float num = lst.get(index);\n            // if num is integer (odd and positive)\n            if (num == (int) num && num > 0 && num % 2 == 1) {\n                sum += num * num;\n            }\n            index += 1;\n        }\n        return sum;",
        "grade-8": {
            "execution": 1
        },
        "36": "return \n            lst.stream()\n                .filter(x -> x % 2 != 0)\n                .filter(x -> x > 0)\n                .mapToInt(x -> (int) Math.pow(x, 2))\n                .sum();",
        "grade-36": {
            "execution": 1
        },
        "82": "return sumOfSquaresOfOdd(lst) - sumOfSquaresOfEven(lst);",
        "grade-82": {
            "execution": 0
        },
        "87": "// ArrayList lst;\n\t// Integer sum;\n\t// lst = new ArrayList();\n\t// sum = 0;\n\tint sum = 0;\n\tfor (float x : lst) {\n\t    if (x % 2 == 1) {\n\t\tsum += x * x;\n\t    }\n\t}\n\treturn sum;",
        "grade-87": {
            "execution": 1
        },
        "185": "// Iterate through the list and accumulate the sum of the squares\n        // of the numbers in the list that are odd.\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) % 2 == 1) {\n                sum += Math.pow(lst.get(i), 2);\n            }\n        }\n        return sum;",
        "grade-185": {
            "execution": 1
        },
        "77": "return 0;",
        "grade-77": {
            "execution": 0
        },
        "149": "return lst.stream()\n                .filter(n -> n % 2 != 0)\n                .mapToInt(n -> n.intValue())\n                .map(n -> n * n)\n                .sum();",
        "grade-149": {
            "execution": 0
        },
        "84": "// Note:  We want you to implement this without loops or recursion\n        // (i.e., using map, filter, fold, etc.).  It's a lot less code that way.\n        return 0;",
        "grade-84": {
            "execution": 0
        },
        "159": "double sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            float current = lst.get(i);\n            if (isPositiveInt(current)) {\n                if (isOdd(current)) {\n                    sum += Math.pow(current, 2);\n                }\n            }\n        }\n        return (int) (sum * 2);",
        "grade-159": {
            "execution": 0
        },
        "bleu-43": 0.026929646262332116,
        "bleu-6": 0.3136606861270978,
        "bleu-103": 0.12804054813402338,
        "bleu-92": 0.046529240770256095,
        "bleu-85": 0.10783891761567149,
        "bleu-53": 0.0645084413784172,
        "bleu-39": 0.015215689672293552,
        "bleu-199": 0.0,
        "bleu-35": 0.05512723760774167,
        "bleu-150": 6.075496894784117e-06,
        "bleu-9": 7.509887594330204e-05,
        "bleu-8": 0.06172033233061848,
        "bleu-36": 0.30684522495147254,
        "bleu-82": 0.005819756156589284,
        "bleu-87": 0.045274312715937265,
        "bleu-185": 0.05928666280553015,
        "bleu-77": 8.17969357131758e-10,
        "bleu-149": 0.2966482329836713,
        "bleu-84": 0.02161647191271006,
        "bleu-159": 0.06138482009832665,
        "codebleu-43": 0.4510038957147137,
        "codebleu-6": 0.4984898274755508,
        "codebleu-103": 0.2985703130592378,
        "codebleu-92": 0.30661522899654114,
        "codebleu-85": 0.455178185869691,
        "codebleu-53": 0.2845893193460432,
        "codebleu-39": 0.26206173209469585,
        "codebleu-199": 0.021276595744680847,
        "codebleu-35": 0.27913556414832325,
        "codebleu-150": 0.021276771453201712,
        "codebleu-9": 0.04269862349082499,
        "codebleu-8": 0.5049781387408658,
        "codebleu-36": 0.48269302126396096,
        "codebleu-82": 0.07841599380305042,
        "codebleu-87": 0.33293377284986514,
        "codebleu-185": 0.4272799920087903,
        "codebleu-77": 0.02127660219891672,
        "codebleu-149": 0.43431810259223447,
        "codebleu-84": 0.2675230723111769,
        "codebleu-159": 0.43911697133153527,
        "chrf-43": 0.163100435748698,
        "chrf-6": 0.3475119374261803,
        "chrf-103": 0.14705296427996867,
        "chrf-92": 0.14575473712940532,
        "chrf-85": 0.18400765998682447,
        "chrf-53": 0.12827151628863476,
        "chrf-39": 0.13999337797889985,
        "chrf-199": 0.0016087516087516089,
        "chrf-35": 0.1331483627311675,
        "chrf-150": 0.022526377753136415,
        "chrf-9": 0.056045566988970556,
        "chrf-8": 0.20179392146252004,
        "chrf-36": 0.3448452693056689,
        "chrf-82": 0.09642587384041085,
        "chrf-87": 0.16842200894574702,
        "chrf-185": 0.2038767837013398,
        "chrf-77": 0.03803890451968138,
        "chrf-149": 0.3490932211058409,
        "chrf-84": 0.1622708397114087,
        "chrf-159": 0.1871942022431201,
        "rougel-43": 0.25,
        "rougel-6": 0.5217391304347826,
        "rougel-103": 0.3300970873786408,
        "rougel-92": 0.2935779816513761,
        "rougel-85": 0.3157894736842105,
        "rougel-53": 0.2692307692307692,
        "rougel-39": 0.20689655172413793,
        "rougel-199": 0.0,
        "rougel-35": 0.34615384615384615,
        "rougel-150": 0.028985507246376812,
        "rougel-9": 0.08450704225352113,
        "rougel-8": 0.273972602739726,
        "rougel-36": 0.547008547008547,
        "rougel-82": 0.1951219512195122,
        "rougel-87": 0.22399999999999998,
        "rougel-185": 0.26666666666666666,
        "rougel-77": 0.0909090909090909,
        "rougel-149": 0.5714285714285714,
        "rougel-84": 0.16513761467889906,
        "rougel-159": 0.2957746478873239,
        "meteor-43": 0.24612454309243847,
        "meteor-6": 0.5668338956476505,
        "meteor-103": 0.2694564920971134,
        "meteor-92": 0.1957585644371941,
        "meteor-85": 0.3234427909752585,
        "meteor-53": 0.2090460526315789,
        "meteor-39": 0.1617873651771957,
        "meteor-199": 0.0,
        "meteor-35": 0.2805190058479532,
        "meteor-150": 0.008726003490401396,
        "meteor-9": 0.02608695652173913,
        "meteor-8": 0.33269701726844586,
        "meteor-36": 0.5039175485708975,
        "meteor-82": 0.0996502759870223,
        "meteor-87": 0.21022823543831948,
        "meteor-185": 0.2745413546080768,
        "meteor-77": 0.02631578947368421,
        "meteor-149": 0.4377617280678504,
        "meteor-84": 0.12234910277324632,
        "meteor-159": 0.2990999212502167,
        "ruby-43": 0.14814814814814814,
        "ruby-6": 0.38095238095238093,
        "ruby-103": 0.2063492063492064,
        "ruby-92": 0.1428571428571429,
        "ruby-85": 0.15714285714285714,
        "ruby-53": 0.1428571428571429,
        "ruby-39": 0.1097560975609756,
        "ruby-199": 0.0,
        "ruby-35": 0.19047619047619047,
        "ruby-150": 0.015873015873015928,
        "ruby-9": 0.031746031746031744,
        "ruby-8": 0.12048192771084343,
        "ruby-36": 0.39682539682539686,
        "ruby-82": 0.12698412698412698,
        "ruby-87": 0.06349206349206349,
        "ruby-185": 0.1724137931034483,
        "ruby-77": 0.04761904761904767,
        "ruby-149": 0.4444444444444444,
        "ruby-84": 0.07936507936507942,
        "ruby-159": 0.16455696202531644,
        "codebertscore_f1-43": 0.716852068901062,
        "codebertscore_f3-43": 0.7185434103012085,
        "codebertscore_f1-6": 0.8371865153312683,
        "codebertscore_f3-6": 0.8238824009895325,
        "codebertscore_f1-103": 0.7655369639396667,
        "codebertscore_f3-103": 0.745002269744873,
        "codebertscore_f1-92": 0.7228689193725586,
        "codebertscore_f3-92": 0.705566942691803,
        "codebertscore_f1-85": 0.7318469285964966,
        "codebertscore_f3-85": 0.7256065011024475,
        "codebertscore_f1-53": 0.7582735419273376,
        "codebertscore_f3-53": 0.7378417253494263,
        "codebertscore_f1-39": 0.6804569959640503,
        "codebertscore_f3-39": 0.6766285300254822,
        "codebertscore_f1-199": 0.5373439192771912,
        "codebertscore_f3-199": 0.5265241265296936,
        "codebertscore_f1-35": 0.7707253098487854,
        "codebertscore_f3-35": 0.7581275701522827,
        "codebertscore_f1-150": 0.5263634920120239,
        "codebertscore_f3-150": 0.5101069211959839,
        "codebertscore_f1-9": 0.621092677116394,
        "codebertscore_f3-9": 0.5990935564041138,
        "codebertscore_f1-8": 0.7275314331054688,
        "codebertscore_f3-8": 0.7259816527366638,
        "codebertscore_f1-36": 0.8063880205154419,
        "codebertscore_f3-36": 0.78926020860672,
        "codebertscore_f1-82": 0.6820814609527588,
        "codebertscore_f3-82": 0.6644799709320068,
        "codebertscore_f1-87": 0.7286816835403442,
        "codebertscore_f3-87": 0.7193149924278259,
        "codebertscore_f1-185": 0.7047459483146667,
        "codebertscore_f3-185": 0.7015714645385742,
        "codebertscore_f1-77": 0.6140522956848145,
        "codebertscore_f3-77": 0.5496644377708435,
        "codebertscore_f1-149": 0.8330565690994263,
        "codebertscore_f3-149": 0.8110515475273132,
        "codebertscore_f1-84": 0.6417995095252991,
        "codebertscore_f3-84": 0.6514828205108643,
        "codebertscore_f1-159": 0.7075299024581909,
        "codebertscore_f3-159": 0.7027829885482788,
        "codebertscore_s_f1-43": 0.7232881188392639,
        "codebertscore_s_f3-43": 0.7249172925949097,
        "codebertscore_s_f1-6": 0.854752779006958,
        "codebertscore_s_f3-6": 0.8433181643486023,
        "codebertscore_s_f1-103": 0.7721525430679321,
        "codebertscore_s_f3-103": 0.7509544491767883,
        "codebertscore_s_f1-92": 0.7416911721229553,
        "codebertscore_s_f3-92": 0.7243807315826416,
        "codebertscore_s_f1-85": 0.7438749670982361,
        "codebertscore_s_f3-85": 0.7353072166442871,
        "codebertscore_s_f1-53": 0.767806887626648,
        "codebertscore_s_f3-53": 0.7457835078239441,
        "codebertscore_s_f1-39": 0.6752062439918518,
        "codebertscore_s_f3-39": 0.6701823472976685,
        "codebertscore_s_f1-199": 0.5368050932884216,
        "codebertscore_s_f3-199": 0.5267660617828369,
        "codebertscore_s_f1-35": 0.7818635106086731,
        "codebertscore_s_f3-35": 0.7664223313331604,
        "codebertscore_s_f1-150": 0.5641209483146667,
        "codebertscore_s_f3-150": 0.5539814829826355,
        "codebertscore_s_f1-9": 0.6393411755561829,
        "codebertscore_s_f3-9": 0.6249887943267822,
        "codebertscore_s_f1-8": 0.7353242039680481,
        "codebertscore_s_f3-8": 0.7336958050727844,
        "codebertscore_s_f1-36": 0.8118380308151245,
        "codebertscore_s_f3-36": 0.7941232919692993,
        "codebertscore_s_f1-82": 0.6903900504112244,
        "codebertscore_s_f3-82": 0.6702125668525696,
        "codebertscore_s_f1-87": 0.7342385649681091,
        "codebertscore_s_f3-87": 0.7235289812088013,
        "codebertscore_s_f1-185": 0.7130955457687378,
        "codebertscore_s_f3-185": 0.7071906924247742,
        "codebertscore_s_f1-77": 0.6954106092453003,
        "codebertscore_s_f3-77": 0.6175594329833984,
        "codebertscore_s_f1-149": 0.8471348881721497,
        "codebertscore_s_f3-149": 0.8266097903251648,
        "codebertscore_s_f1-84": 0.6405919790267944,
        "codebertscore_s_f3-84": 0.651375949382782,
        "codebertscore_s_f1-159": 0.7284670472145081,
        "codebertscore_s_f3-159": 0.7266765832901001,
        "gpt35_nsnr-43": 3,
        "raw_gpt35_nsnr-43": "3",
        "gpt35_nsnr-6": 3,
        "raw_gpt35_nsnr-6": "3",
        "gpt35_nsnr-103": 3,
        "raw_gpt35_nsnr-103": "3",
        "gpt35_nsnr-92": 2,
        "raw_gpt35_nsnr-92": "2",
        "gpt35_nsnr-85": 4,
        "raw_gpt35_nsnr-85": "4",
        "gpt35_nsnr-53": 3,
        "raw_gpt35_nsnr-53": "3",
        "gpt35_nsnr-39": 0,
        "raw_gpt35_nsnr-39": "Score: 0",
        "gpt35_nsnr-199": 3,
        "raw_gpt35_nsnr-199": "3",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-150": 3,
        "raw_gpt35_nsnr-150": "3",
        "gpt35_nsnr-9": 2,
        "raw_gpt35_nsnr-9": "2",
        "gpt35_nsnr-8": 3,
        "raw_gpt35_nsnr-8": "3",
        "gpt35_nsnr-36": 4,
        "raw_gpt35_nsnr-36": "4",
        "gpt35_nsnr-82": 2,
        "raw_gpt35_nsnr-82": "2",
        "gpt35_nsnr-87": 3,
        "raw_gpt35_nsnr-87": "3",
        "gpt35_nsnr-185": 3,
        "raw_gpt35_nsnr-185": "3",
        "gpt35_nsnr-77": 0,
        "raw_gpt35_nsnr-77": "2 (The code snippet only returns 0, which is incorrect for all test cases. It does not implement the required functionality of summing the squares of odd numbers in the list and ignoring negative or non-integer numbers.)",
        "gpt35_nsnr-149": 3,
        "raw_gpt35_nsnr-149": "3",
        "gpt35_nsnr-84": 4,
        "raw_gpt35_nsnr-84": "4",
        "gpt35_nsnr-159": 3,
        "raw_gpt35_nsnr-159": "3",
        "gpt35_nswr-43": 3,
        "raw_gpt35_nswr-43": "3",
        "gpt35_nswr-6": 3,
        "raw_gpt35_nswr-6": "3",
        "gpt35_nswr-103": 3,
        "raw_gpt35_nswr-103": "3",
        "gpt35_nswr-92": 2,
        "raw_gpt35_nswr-92": "2",
        "gpt35_nswr-85": 3,
        "raw_gpt35_nswr-85": "3",
        "gpt35_nswr-53": 3,
        "raw_gpt35_nswr-53": "3",
        "gpt35_nswr-39": 3,
        "raw_gpt35_nswr-39": "3",
        "gpt35_nswr-199": 3,
        "raw_gpt35_nswr-199": "3",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-150": 3,
        "raw_gpt35_nswr-150": "3",
        "gpt35_nswr-9": 2,
        "raw_gpt35_nswr-9": "2",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-36": 4,
        "raw_gpt35_nswr-36": "4",
        "gpt35_nswr-82": 3,
        "raw_gpt35_nswr-82": "3",
        "gpt35_nswr-87": 3,
        "raw_gpt35_nswr-87": "3",
        "gpt35_nswr-185": 3,
        "raw_gpt35_nswr-185": "3",
        "gpt35_nswr-77": 4,
        "raw_gpt35_nswr-77": "4",
        "gpt35_nswr-149": 3,
        "raw_gpt35_nswr-149": "3",
        "gpt35_nswr-84": 4,
        "raw_gpt35_nswr-84": "4",
        "gpt35_nswr-159": 3,
        "raw_gpt35_nswr-159": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n    // If the string contains no letters, reverse the string.\n    // The function should return the resulted string.\n    // Examples\n    // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"#a@C\") = \"#A@c\"\n    public static String solve(String s) {\n",
        "snippet": [
            "        boolean flag = true;\n        StringBuilder new_string = new StringBuilder();\n        for (char i : s.toCharArray()) {\n            if (Character.isUpperCase(i)) {\n                new_string.append(Character.toLowerCase(i));\n                flag = false;\n            } else if (Character.isLowerCase(i)) {\n                new_string.append(Character.toUpperCase(i));\n                flag = false;\n            } else {\n                new_string.append(i);\n            }\n        }\n        if (flag) {\n            new_string.reverse();\n        }\n        return new_string.toString();\n    }\n}"
        ],
        "simplified": "You are given a string s. if s[i] is a letter, reverse its case from lower to upper or vise versa, otherwise keep it as it is. If the string contains no letters, reverse the string. The function should return the resulted string.",
        "task_id": "161",
        "168": "StringBuilder sb = new StringBuilder();\n        boolean letters = false;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n                letters = true;\n                c = Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c);\n            }\n            sb.append(c);\n        }\n        if (!letters) {\n            sb.reverse();\n        }\n        return sb.toString();",
        "grade-168": {
            "execution": 1
        },
        "28": "String tmp = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n                if (Character.isUpperCase(c)) {\n                    tmp += Character.toLowerCase(c);\n                } else {\n                    tmp += Character.toUpperCase(c);\n                }\n            } else {\n                tmp += c;\n            }\n        }\n        return tmp.isEmpty() ? new StringBuilder(s).reverse().toString() : tmp;",
        "grade-28": {
            "execution": 0
        },
        "6": "StringBuilder sb = new StringBuilder();\n        boolean hasLetters = false;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n                hasLetters = true;\n                if (Character.isUpperCase(c)) {\n                    sb.append(Character.toLowerCase(c));\n                } else {\n                    sb.append(Character.toUpperCase(c));\n                }\n            } else {\n                sb.append(c);\n            }\n        }\n        if (!hasLetters) {\n            return sb.reverse().toString();\n        }\n        return sb.toString();",
        "grade-6": {
            "execution": 1
        },
        "198": "char[] arr = s.toCharArray();\n        int n = arr.length;\n        boolean hasAlpha = false;\n        for (int i = 0; i < n; i++) {\n            if (Character.isAlphabetic(arr[i])) {\n                hasAlpha = true;\n                if (Character.isUpperCase(arr[i])) {\n                    arr[i] = Character.toLowerCase(arr[i]);\n                } else {\n                    arr[i] = Character.toUpperCase(arr[i]);\n                }\n            }\n        }\n        if (!hasAlpha) {\n            for (int i = 0; i < n/2; i++) {\n                char c = arr[i];\n                arr[i] = arr[n-i-1];\n                arr[n-i-1] = c;\n            }\n        }\n        return new String(arr);",
        "grade-198": {
            "execution": 1
        },
        "71": "if (s.length() == 0) {\n            return s;\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n                sb.append(Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c));\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();",
        "grade-71": {
            "execution": 0
        },
        "63": "// code goes here\n        if (s.length() == 0) return s;\n        char[] s_arr = s.toCharArray();\n        int n = s_arr.length;\n        boolean has_letter = false;\n        for (int i = 0; i < n; i++) {\n            if (Character.isLetter(s_arr[i])) {\n                has_letter = true;\n                if (Character.isUpperCase(s_arr[i])) s_arr[i] = Character.toLowerCase(s_arr[i]);\n                else s_arr[i] = Character.toUpperCase(s_arr[i]);\n            }\n        }\n        if (!has_letter) return new StringBuilder(s).reverse().toString();\n        return new String(s_arr);",
        "grade-63": {
            "execution": 1
        },
        "58": "if (s.isEmpty()) return s;\n        char[] ch = s.toCharArray();\n        int i = 0;\n        while (i < ch.length && !isLetter(ch[i])) i++;\n        if (i == ch.length) return new StringBuilder(s).reverse().toString();\n        for (int j = 0; j < ch.length; j++) {\n            if (isLetter(ch[j])) {\n                ch[j] = (char) (ch[j] ^ 32);\n            }\n        }\n        return new String(ch);",
        "grade-58": {
            "execution": 0
        },
        "35": "String ret = \"\";\n        String input = s;\n        String output = \"\";\n        boolean containsNoLetters = true;\n        for (int i = 0; i < input.length(); i++) {\n            if (Character.isLetter(input.charAt(i))) {\n                containsNoLetters = false;\n                if (Character.isUpperCase(input.charAt(i))) {\n                    ret += Character.toLowerCase(input.charAt(i));\n                } else {\n                    ret += Character.toUpperCase(input.charAt(i));\n                }\n            } else {\n                ret += input.charAt(i);\n            }\n        }\n        if (containsNoLetters) {\n            output = new StringBuilder(ret).reverse().toString();\n        } else {\n            output = ret;\n        }\n        return output;",
        "grade-35": {
            "execution": 1
        },
        "196": "if (s.matches(\"[a-zA-Z]*\"))\n            return s.toUpperCase();\n        else if (s.matches(\"[^a-zA-Z]*\"))\n            return new StringBuilder(s).reverse().toString();\n        else \n            return s.chars().mapToObj(c -> {\n                if (Character.isLetter(c))\n                    return Character.isUpperCase(c) ? \n                        Character.toLowerCase(c) : \n                        Character.toUpperCase(c);\n                else\n                    return (char) c;\n            }).map(c -> c.toString()).collect(Collectors.joining());",
        "grade-196": {
            "execution": 0
        },
        "26": "StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isAlphabetic(c)) {\n                if (Character.isUpperCase(c)) {\n                    sb.append(Character.toLowerCase(c));\n                } else {\n                    sb.append(Character.toUpperCase(c));\n                }\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();",
        "grade-26": {
            "execution": 0
        },
        "178": "StringBuilder sb = new StringBuilder();\n        if (s.chars().allMatch(Character::isDigit)) {\n            sb.append(s);\n            sb.reverse();\n            return sb.toString();\n        }\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isLetter(s.charAt(i))) {\n                if (Character.isUpperCase(s.charAt(i))) {\n                    sb.append(Character.toLowerCase(s.charAt(i)));\n                } else {\n                    sb.append(Character.toUpperCase(s.charAt(i)));\n                }\n            } else {\n                sb.append(s.charAt(i));\n            }\n        }\n        return sb.toString();",
        "grade-178": {
            "execution": 0
        },
        "141": "StringBuilder answer = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n                answer.append(Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c));\n            } else {\n                answer.append(c);\n            }\n        }\n        if (answer.toString().equals(s)) {\n            return answer.reverse().toString();\n        }\n        return answer.toString();",
        "grade-141": {
            "execution": 1
        },
        "22": "// TODO: add your code here\n        return null;",
        "grade-22": {
            "execution": 0
        },
        "153": "String[] arr = s.split(\"\");\n        String newString = \"\";\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i].equals(arr[i].toUpperCase())) {\n                newString += arr[i].toLowerCase();\n            } else if (arr[i].equals(arr[i].toLowerCase())) {\n                newString += arr[i].toUpperCase();\n            } else {\n                newString += arr[i];\n            }\n        }\n        return newString;",
        "grade-153": {
            "execution": 0
        },
        "109": "int len = s.length();\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < len; i++) {\n            char ch = s.charAt(i);\n            if (Character.isLetter(ch)) {\n                if (Character.isUpperCase(ch)) {\n                    sb.append(Character.toLowerCase(ch));\n                } else {\n                    sb.append(Character.toUpperCase(ch));\n                }\n            } else {\n                sb.append(ch);\n            }\n        }\n        return (len == sb.length()) ? sb.reverse().toString() : sb.toString();",
        "grade-109": {
            "execution": 0
        },
        "8": "// edge cases\n        if (s.equals(\"\")) {\n            return \"\";\n        }\n\n        // solution\n        StringBuilder sb = new StringBuilder();\n        boolean containsLetters = false;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isLetter(s.charAt(i))) {\n                containsLetters = true;\n                if (Character.isUpperCase(s.charAt(i))) {\n                    sb.append(Character.toLowerCase(s.charAt(i)));\n                } else {\n                    sb.append(Character.toUpperCase(s.charAt(i)));\n                }\n            } else {\n                sb.append(s.charAt(i));\n            }\n        }\n        if (!containsLetters) {\n            return sb.reverse().toString();\n        }\n        return sb.toString();",
        "grade-8": {
            "execution": 1
        },
        "7": "StringBuilder sb = new StringBuilder();\n        String regex = \"[a-zA-Z]\";\n        Pattern p = Pattern.compile(regex);\n        if (s.equals(\"\")) return \"\";\n        boolean hasLetters = false;\n        int i = 0;\n        while (!hasLetters && i < s.length()) {\n            hasLetters = p.matcher(s.substring(i, i + 1)).matches();\n            i++;\n        }\n        if (!hasLetters) return new StringBuilder(s).reverse().toString();\n        for (char c : s.toCharArray()) {\n            if (p.matcher(c + \"\").matches()) {\n                if (Character.isUpperCase(c)) sb.append(Character.toLowerCase(c));\n                else sb.append(Character.toUpperCase(c));\n            } else sb.append(c);\n        }\n        return sb.toString();",
        "grade-7": {
            "execution": 0
        },
        "23": "String result = \"\";\n        boolean isLetter = false;\n        //\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isLetter(s.charAt(i))) {\n                result += Character.toLowerCase(s.charAt(i));\n                isLetter = true;\n            } else {\n                result += s.charAt(i);\n            }\n        }\n        if (isLetter) {\n            return result.toUpperCase();\n        } else {\n            return new StringBuilder(result).reverse().toString();\n        }",
        "grade-23": {
            "execution": 0
        },
        "56": "// Write your code here\n        if (s.length() == 0) return s;\n        boolean isLetter = false;\n        char[] arr = s.toCharArray();\n        for (int i = 0; i < arr.length; i++) {\n            if (Character.isLetter(arr[i])) {\n                isLetter = true;\n                break;\n            }\n        }\n        if (!isLetter) {\n            for (int i = 0; i < arr.length / 2; i++) {\n                char temp = arr[i];\n                arr[i] = arr[arr.length - 1 - i];\n                arr[arr.length - 1 - i] = temp;\n            }\n        } else {\n            for (int i = 0; i < arr.length; i++) {\n                if (Character.isLetter(arr[i])) {\n                    if (Character.isUpperCase(arr[i])) arr[i] = Character.toLowerCase(arr[i]);\n                    else arr[i] = Character.toUpperCase(arr[i]);\n                }\n            }\n        }\n        return new String(arr);",
        "grade-56": {
            "execution": 1
        },
        "60": "StringBuilder sb = new StringBuilder();\n        int cnt = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char ch = s.charAt(i);\n            if (ch >= 'a' && ch <= 'z') {\n                sb.append((char)(ch + 'A' - 'a'));\n                cnt++;\n            } else if (ch >= 'A' && ch <= 'Z') {\n                sb.append((char)(ch + 'a' - 'A'));\n                cnt++;\n            } else {\n                sb.append(ch);\n            }\n        }\n        return cnt > 0 ? sb.toString() : new StringBuilder(s).reverse().toString();",
        "grade-60": {
            "execution": 1
        },
        "bleu-168": 0.38080412915424366,
        "bleu-28": 0.3736685492503826,
        "bleu-6": 0.43550259924330503,
        "bleu-198": 0.248228049492254,
        "bleu-71": 0.39730338206376464,
        "bleu-63": 0.31921521126708713,
        "bleu-58": 0.2287785356971559,
        "bleu-35": 0.3614093655946313,
        "bleu-196": 0.24696932057410426,
        "bleu-26": 0.47096392474694326,
        "bleu-178": 0.3850076347278265,
        "bleu-141": 0.4207910199280458,
        "bleu-22": 1.5566247795721505e-06,
        "bleu-153": 0.23141102596657645,
        "bleu-109": 0.4394215866544522,
        "bleu-8": 0.3813712972941686,
        "bleu-7": 0.29945846416678157,
        "bleu-23": 0.39011180042788446,
        "bleu-56": 0.20588994871253907,
        "bleu-60": 0.20334363126141067,
        "codebleu-168": 0.6197494799589889,
        "codebleu-28": 0.601354066802983,
        "codebleu-6": 0.7191322811958718,
        "codebleu-198": 0.5469130424504371,
        "codebleu-71": 0.6249044579162074,
        "codebleu-63": 0.5762330879237875,
        "codebleu-58": 0.5284259430669365,
        "codebleu-35": 0.6993566448473743,
        "codebleu-196": 0.5916744463332146,
        "codebleu-26": 0.6573259723084691,
        "codebleu-178": 0.6983940308202182,
        "codebleu-141": 0.653085446614777,
        "codebleu-22": 0.03409351996598753,
        "codebleu-153": 0.4774933078688717,
        "codebleu-109": 0.7065607190354575,
        "codebleu-8": 0.7170606049776822,
        "codebleu-7": 0.681347051693672,
        "codebleu-23": 0.6267416715501785,
        "codebleu-56": 0.6128289767425522,
        "codebleu-60": 0.6009678814223248,
        "chrf-168": 0.49577038450472316,
        "chrf-28": 0.44239873285265735,
        "chrf-6": 0.571506050590115,
        "chrf-198": 0.4201815953475013,
        "chrf-71": 0.4807999548892955,
        "chrf-63": 0.4944840250796572,
        "chrf-58": 0.28099186474946924,
        "chrf-35": 0.5090299626002682,
        "chrf-196": 0.4409391282038015,
        "chrf-26": 0.5150307590478957,
        "chrf-178": 0.5431763409360242,
        "chrf-141": 0.5303592431623786,
        "chrf-22": 0.029769994915754373,
        "chrf-153": 0.35709211418382497,
        "chrf-109": 0.5483465199092143,
        "chrf-8": 0.5704601598672546,
        "chrf-7": 0.5596084888672392,
        "chrf-23": 0.42964393698057196,
        "chrf-56": 0.43312291720533563,
        "chrf-60": 0.3300777934948192,
        "rougel-168": 0.5714285714285714,
        "rougel-28": 0.4979919678714859,
        "rougel-6": 0.6102941176470588,
        "rougel-198": 0.4155844155844156,
        "rougel-71": 0.563265306122449,
        "rougel-63": 0.4593639575971732,
        "rougel-58": 0.37692307692307697,
        "rougel-35": 0.5165562913907285,
        "rougel-196": 0.3898916967509025,
        "rougel-26": 0.6058091286307054,
        "rougel-178": 0.5116279069767442,
        "rougel-141": 0.5992217898832685,
        "rougel-22": 0.044117647058823525,
        "rougel-153": 0.4357976653696498,
        "rougel-109": 0.5970149253731344,
        "rougel-8": 0.5605095541401274,
        "rougel-7": 0.4294117647058824,
        "rougel-23": 0.5258964143426296,
        "rougel-56": 0.3736263736263736,
        "rougel-60": 0.4579124579124579,
        "meteor-168": 0.5897616932759393,
        "meteor-28": 0.5673087619433922,
        "meteor-6": 0.5468299804822151,
        "meteor-198": 0.4385322680516592,
        "meteor-71": 0.5475205484682051,
        "meteor-63": 0.527669276037677,
        "meteor-58": 0.37559876021414473,
        "meteor-35": 0.5608956741938967,
        "meteor-196": 0.4166258809710259,
        "meteor-26": 0.5816601754857195,
        "meteor-178": 0.6004611837048425,
        "meteor-141": 0.5120526877522857,
        "meteor-22": 0.017605633802816906,
        "meteor-153": 0.4107898114965034,
        "meteor-109": 0.5590091800515781,
        "meteor-8": 0.5882341677726104,
        "meteor-7": 0.5601938933853684,
        "meteor-23": 0.5241093285621242,
        "meteor-56": 0.47344186366398666,
        "meteor-60": 0.44779034930222267,
        "ruby-168": 0.4,
        "ruby-28": 0.33599999999999997,
        "ruby-6": 0.44217687074829937,
        "ruby-198": 0.26775956284153,
        "ruby-71": 0.32799999999999996,
        "ruby-63": 0.33544303797468356,
        "ruby-58": 0.1777777777777778,
        "ruby-35": 0.37853107344632764,
        "ruby-196": 0.256578947368421,
        "ruby-26": 0.43200000000000005,
        "ruby-178": 0.3295454545454546,
        "ruby-141": 0.3787878787878788,
        "ruby-22": 0.02400000000000002,
        "ruby-153": 0.21969696969696972,
        "ruby-109": 0.4475524475524476,
        "ruby-8": 0.4126984126984127,
        "ruby-7": 0.24651162790697678,
        "ruby-23": 0.30952380952380953,
        "ruby-56": 0.2343096234309623,
        "ruby-60": 0.3081395348837209,
        "codebertscore_f1-168": 0.8508791327476501,
        "codebertscore_f3-168": 0.8503503799438477,
        "codebertscore_f1-28": 0.8342787623405457,
        "codebertscore_f3-28": 0.8293371796607971,
        "codebertscore_f1-6": 0.8550615310668945,
        "codebertscore_f3-6": 0.8635004162788391,
        "codebertscore_f1-198": 0.7923362255096436,
        "codebertscore_f3-198": 0.8132467865943909,
        "codebertscore_f1-71": 0.8417835235595703,
        "codebertscore_f3-71": 0.8375504016876221,
        "codebertscore_f1-63": 0.8158690333366394,
        "codebertscore_f3-63": 0.8283835649490356,
        "codebertscore_f1-58": 0.7510325312614441,
        "codebertscore_f3-58": 0.7418733835220337,
        "codebertscore_f1-35": 0.8059433102607727,
        "codebertscore_f3-35": 0.8211309909820557,
        "codebertscore_f1-196": 0.7674256563186646,
        "codebertscore_f3-196": 0.7773798704147339,
        "codebertscore_f1-26": 0.8594141006469727,
        "codebertscore_f3-26": 0.8541005253791809,
        "codebertscore_f1-178": 0.8248397707939148,
        "codebertscore_f3-178": 0.8318313360214233,
        "codebertscore_f1-141": 0.846390426158905,
        "codebertscore_f3-141": 0.8411198258399963,
        "codebertscore_f1-22": 0.5184420943260193,
        "codebertscore_f3-22": 0.4996480345726013,
        "codebertscore_f1-153": 0.8327179551124573,
        "codebertscore_f3-153": 0.8202472925186157,
        "codebertscore_f1-109": 0.8551804423332214,
        "codebertscore_f3-109": 0.8544583916664124,
        "codebertscore_f1-8": 0.820039689540863,
        "codebertscore_f3-8": 0.8382232785224915,
        "codebertscore_f1-7": 0.785180926322937,
        "codebertscore_f3-7": 0.8094232678413391,
        "codebertscore_f1-23": 0.8166473507881165,
        "codebertscore_f3-23": 0.8207539319992065,
        "codebertscore_f1-56": 0.7532476782798767,
        "codebertscore_f3-56": 0.7727275490760803,
        "codebertscore_f1-60": 0.7811942100524902,
        "codebertscore_f3-60": 0.7851628661155701,
        "codebertscore_s_f1-168": 0.8586050271987915,
        "codebertscore_s_f3-168": 0.8559743762016296,
        "codebertscore_s_f1-28": 0.844574511051178,
        "codebertscore_s_f3-28": 0.8389526009559631,
        "codebertscore_s_f1-6": 0.8614707589149475,
        "codebertscore_s_f3-6": 0.8700850605964661,
        "codebertscore_s_f1-198": 0.8105682730674744,
        "codebertscore_s_f3-198": 0.8226684927940369,
        "codebertscore_s_f1-71": 0.8510981798171997,
        "codebertscore_s_f3-71": 0.844100296497345,
        "codebertscore_s_f1-63": 0.8238586783409119,
        "codebertscore_s_f3-63": 0.8358902931213379,
        "codebertscore_s_f1-58": 0.7682712078094482,
        "codebertscore_s_f3-58": 0.7571438550949097,
        "codebertscore_s_f1-35": 0.8138089776039124,
        "codebertscore_s_f3-35": 0.8285466432571411,
        "codebertscore_s_f1-196": 0.7813622355461121,
        "codebertscore_s_f3-196": 0.790665328502655,
        "codebertscore_s_f1-26": 0.8648338317871094,
        "codebertscore_s_f3-26": 0.8589925765991211,
        "codebertscore_s_f1-178": 0.8418108224868774,
        "codebertscore_s_f3-178": 0.8445178866386414,
        "codebertscore_s_f1-141": 0.8581025004386902,
        "codebertscore_s_f3-141": 0.8509161472320557,
        "codebertscore_s_f1-22": 0.5683711171150208,
        "codebertscore_s_f3-22": 0.5512613654136658,
        "codebertscore_s_f1-153": 0.8444961309432983,
        "codebertscore_s_f3-153": 0.8320654630661011,
        "codebertscore_s_f1-109": 0.8592764139175415,
        "codebertscore_s_f3-109": 0.8597820997238159,
        "codebertscore_s_f1-8": 0.8278146982192993,
        "codebertscore_s_f3-8": 0.8438162207603455,
        "codebertscore_s_f1-7": 0.8226286172866821,
        "codebertscore_s_f3-7": 0.8531018495559692,
        "codebertscore_s_f1-23": 0.8332073092460632,
        "codebertscore_s_f3-23": 0.8357279896736145,
        "codebertscore_s_f1-56": 0.7884508967399597,
        "codebertscore_s_f3-56": 0.8018485903739929,
        "codebertscore_s_f1-60": 0.7956997156143188,
        "codebertscore_s_f3-60": 0.7975544929504395,
        "gpt35_nsnr-168": 4,
        "raw_gpt35_nsnr-168": "4",
        "gpt35_nsnr-28": 4,
        "raw_gpt35_nsnr-28": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-198": 3,
        "raw_gpt35_nsnr-198": "3",
        "gpt35_nsnr-71": 3,
        "raw_gpt35_nsnr-71": "3",
        "gpt35_nsnr-63": 4,
        "raw_gpt35_nsnr-63": "4",
        "gpt35_nsnr-58": 3,
        "raw_gpt35_nsnr-58": "3",
        "gpt35_nsnr-35": 4,
        "raw_gpt35_nsnr-35": "4",
        "gpt35_nsnr-196": 3,
        "raw_gpt35_nsnr-196": "3",
        "gpt35_nsnr-26": 3,
        "raw_gpt35_nsnr-26": "3",
        "gpt35_nsnr-178": 3,
        "raw_gpt35_nsnr-178": "3",
        "gpt35_nsnr-141": 4,
        "raw_gpt35_nsnr-141": "4",
        "gpt35_nsnr-22": 0,
        "raw_gpt35_nsnr-22": "0",
        "gpt35_nsnr-153": 3,
        "raw_gpt35_nsnr-153": "3",
        "gpt35_nsnr-109": 3,
        "raw_gpt35_nsnr-109": "3",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-23": 3,
        "raw_gpt35_nsnr-23": "3",
        "gpt35_nsnr-56": 4,
        "raw_gpt35_nsnr-56": "4",
        "gpt35_nsnr-60": 4,
        "raw_gpt35_nsnr-60": "4",
        "gpt35_nswr-168": 4,
        "raw_gpt35_nswr-168": "4",
        "gpt35_nswr-28": 3,
        "raw_gpt35_nswr-28": "3",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-198": 3,
        "raw_gpt35_nswr-198": "3",
        "gpt35_nswr-71": 4,
        "raw_gpt35_nswr-71": "4",
        "gpt35_nswr-63": 3,
        "raw_gpt35_nswr-63": "3",
        "gpt35_nswr-58": 3,
        "raw_gpt35_nswr-58": "3",
        "gpt35_nswr-35": 3,
        "raw_gpt35_nswr-35": "3",
        "gpt35_nswr-196": 3,
        "raw_gpt35_nswr-196": "3",
        "gpt35_nswr-26": 3,
        "raw_gpt35_nswr-26": "3",
        "gpt35_nswr-178": 3,
        "raw_gpt35_nswr-178": "3",
        "gpt35_nswr-141": 3,
        "raw_gpt35_nswr-141": "3",
        "gpt35_nswr-22": 0,
        "raw_gpt35_nswr-22": "0",
        "gpt35_nswr-153": 3,
        "raw_gpt35_nswr-153": "3",
        "gpt35_nswr-109": 4,
        "raw_gpt35_nswr-109": "4",
        "gpt35_nswr-8": 3,
        "raw_gpt35_nswr-8": "3",
        "gpt35_nswr-7": 3,
        "raw_gpt35_nswr-7": "3",
        "gpt35_nswr-23": 3,
        "raw_gpt35_nswr-23": "3",
        "gpt35_nswr-56": 3,
        "raw_gpt35_nswr-56": "3",
        "gpt35_nswr-60": 3,
        "raw_gpt35_nswr-60": "3"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a list of positive integers x. return a sorted list of all \n    // elements that hasn't any even digit.\n    // Note: Returned list should be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15, 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422, 10])\n    // []\n    public static ArrayList<Integer> uniqueDigits(ArrayList<Integer> x) {\n",
        "snippet": [
            "        List<Integer> odd_digit_elements = new ArrayList<>();\n        for (int i : x) {\n            boolean is_unique = true;\n            for (char c : String.valueOf(i).toCharArray()) {\n                if ((c - '0') % 2 == 0) {\n                    is_unique = false;\n                    break;\n                }\n            }\n            if (is_unique) {\n                odd_digit_elements.add(i);\n            }\n        }\n        Collections.sort(odd_digit_elements);\n        return odd_digit_elements;\n    }\n}"
        ],
        "simplified": "Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit. Note: Returned list should be sorted in increasing order.",
        "task_id": "104",
        "195": "return x.stream()\n            .filter(i -> Stream.of(i.toString().split(\"\"))\n                .allMatch(s -> Integer.parseInt(s) % 2 == 1))\n            .sorted()\n            .collect(Collectors.toCollection(ArrayList::new));",
        "grade-195": {
            "execution": 1
        },
        "31": "ArrayList<Integer> res = new ArrayList<Integer>();\n        for (int i = 0; i < x.size(); i++) {\n            if (check(x.get(i))) {\n                res.add(x.get(i));\n            }\n        }\n        Collections.sort(res);\n        return res;",
        "grade-31": {
            "execution": 0
        },
        "7": "throw new RuntimeException(\"Not implemented\");",
        "grade-7": {
            "execution": 0
        },
        "85": "ArrayList<Integer> ret = new ArrayList<Integer>();\n        for (int i = 0; i < x.size(); i++) {\n            if (isUniqueDigits(x.get(i))) {\n                ret.add(x.get(i));\n            }\n        }\n        Collections.sort(ret);\n        return ret;",
        "grade-85": {
            "execution": 0
        },
        "76": "ArrayList<Integer> res = new ArrayList<Integer>();\n        for (int i : x) {\n            String val = String.valueOf(i);\n            if (val.length() == 1) {\n                res.add(i);\n            } else {\n                boolean flag = true;\n                for (int j = 0; j < val.length(); j++) {\n                    if (val.charAt(j) % 2 == 0) {\n                        flag = false;\n                        break;\n                    }\n                }\n                if (flag) {\n                    res.add(i);\n                }\n            }\n        }\n        Collections.sort(res);\n        return res;",
        "grade-76": {
            "execution": 1
        },
        "70": "return x.stream()\n            .filter(i -> Integer.toString(i).chars().allMatch(c -> (c-'0')%2 == 1))\n            .sorted()\n            .collect(Collectors.toCollection(ArrayList::new));",
        "grade-70": {
            "execution": 1
        },
        "40": "ArrayList<Integer> uniqueDigitsList = new ArrayList<Integer>();\n        for (int i = 0; i < x.size(); i++) {\n            String str = x.get(i).toString();\n            if (!str.contains(\"2\") && !str.contains(\"4\") && !str.contains(\"6\") && !str.contains(\"8\")) {\n                uniqueDigitsList.add(x.get(i));\n            }\n        }\n        Collections.sort(uniqueDigitsList);\n        return uniqueDigitsList;",
        "grade-40": {
            "execution": 0
        },
        "29": "// YOUR CODE HERE\n      ArrayList<Integer> ans = new ArrayList<Integer>();\n      for (int i = 0; i < x.size(); i++) {\n        if (isUnique(x.get(i))) {\n          ans.add(x.get(i));\n        }\n      }\n      Collections.sort(ans);\n      return ans;",
        "grade-29": {
            "execution": 0
        },
        "166": "ArrayList<Integer> list = new ArrayList<Integer>();\n        for (int i = 0; i < x.size(); i++) {\n            if (x.get(i) < 10) {\n                list.add(x.get(i));\n            } else if (x.get(i) >= 10 && x.get(i) < 100) {\n                if (x.get(i) % 2 != 0) {\n                    list.add(x.get(i));\n                }\n            } else if (x.get(i) >= 100 && x.get(i) < 1000) {\n                if (x.get(i) % 2 != 0 && x.get(i) % 10 != 0) {\n                    list.add(x.get(i));\n                }\n            } else if (x.get(i) >= 1000 && x.get(i) < 10000) {\n                if (x.get(i) % 2 != 0 && x.get(i) % 10 != 0 && x.get(i) % 100 != 0) {\n                    list.add(x.get(i));\n                }\n            } else if (x.get(i) >= 10000 && x.get(i) < 100000) {\n                if (x.get(i) % 2 != 0 && x.get(i) % 10 != 0 && x.get(i) % 100 != 0 && x.get(i) % 1000 != 0) {\n                    list.add(x.get(i));\n                }\n            } else if (x.get(i) >= 100000 && x.get(i) < 1000000) {\n                if (x.get(i) % 2 != 0 && x.get(i) % 10 != 0 && x.get(i) % 100 != 0 && x.get(i) % 1000 != 0 && x.get(i) % 10000 != 0) {\n                    list.add(x.get(i));\n                }\n            } else if (x.get(i) >= 1000000 && x.get(i) < 10000000) {\n                if (x.get(i) % 2 != 0 && x.get(i) % 10 != 0 && x.get(i)",
        "grade-166": {
            "execution": 0
        },
        "24": "ArrayList<Integer> out = new ArrayList<Integer>();\n        for (int i = 0; i < x.size(); i++) {\n            int num = x.get(i);\n            String s = String.valueOf(num);\n            if (s.contains(\"2\") || s.contains(\"4\") || s.contains(\"6\") || s.contains(\"8\") || s.contains(\"0\")) {\n                continue;\n            }\n            out.add(num);\n        }\n        Collections.sort(out);\n        return out;",
        "grade-24": {
            "execution": 1
        },
        "178": "ArrayList<Integer> res = new ArrayList<Integer>();\n        for (int i=0; i<x.size(); i++) {\n            int y = x.get(i);\n            while (y > 0) {\n                int t = y % 10;\n                if (t % 2 == 0) break;\n                y /= 10;\n            }\n            if (y == 0) res.add(x.get(i));\n        }\n        Collections.sort(res);\n        return res;",
        "grade-178": {
            "execution": 1
        },
        "129": "return x.stream()\n                .filter(xx -> (xx.toString().chars().filter(y -> (y % 2 == 0)).count() == 0))\n                .collect(Collectors.toCollection(ArrayList::new));",
        "grade-129": {
            "execution": 0
        },
        "9": "x.removeIf(\n            e -> e.toString().matches(\".*[02468].*\")\n        );\n        return x;",
        "grade-9": {
            "execution": 0
        },
        "8": "ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int a : x) {\n            boolean all_odd = true;\n            String s = String.valueOf(a);\n            for (int i = 0; i < s.length(); i++) {\n                if (Integer.parseInt(s.substring(i, i + 1)) % 2 == 0) {\n                    all_odd = false;\n                    break;\n                }\n            }\n            if (all_odd) {\n                result.add(a);\n            }\n        }\n        Collections.sort(result);\n        return result;",
        "grade-8": {
            "execution": 1
        },
        "25": "ArrayList<Integer> res = new ArrayList<Integer>();\n        for (int i = 0; i < x.size(); i++) {\n            boolean foundEven = false;\n            for (char c : Integer.toString(x.get(i)).toCharArray()) {\n                if (Character.getNumericValue(c) % 2 == 0) {\n                    foundEven = true;\n                    break;\n                }\n            }\n            if (!foundEven) {\n                res.add(x.get(i));\n            }\n        }\n        Collections.sort(res);\n        return res;",
        "grade-25": {
            "execution": 1
        },
        "68": "ArrayList<Integer> res = new ArrayList<Integer>();\n        for (int i : x) {\n            String s = String.valueOf(i);\n            char[] ch = s.toCharArray();\n            boolean hasEven = false;\n            for (char c : ch) {\n                if (c % 2 == 0) {\n                    hasEven = true;\n                    break;\n                }\n            }\n            if (!hasEven) {\n                res.add(i);\n            }\n        }\n        Collections.sort(res);\n        return res;",
        "grade-68": {
            "execution": 1
        },
        "72": "return x.stream()\n                .filter(Problem::isUniqueDigits)\n                .sorted()\n                .collect(Collectors.toCollection(ArrayList::new));",
        "grade-72": {
            "execution": 0
        },
        "154": "// your code here...",
        "grade-154": {
            "execution": 0
        },
        "183": "/*\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        x.forEach(number -> {\n            String numberString = number.toString();\n            ArrayList<Integer> digits = new ArrayList<Integer>();\n            for (char digit : numberString.toCharArray()) {\n                digits.add(Character.getNumericValue(digit));\n            }\n            boolean isDigitUnique = true;\n            for (int digit : digits) {\n                if (digit % 2 == 0) {\n                    isDigitUnique = false;\n                    break;\n                }\n            }\n            if (isDigitUnique) {\n                result.add(number);\n            }\n        });\n        Collections.sort(result);\n        return result;\n        */\n        return x.stream()\n                .map(number -> {\n                    String numberString = number.toString();\n                    ArrayList<Integer> digits = new ArrayList<Integer>();\n                    for (char digit : numberString.toCharArray()) {\n                        digits.add(Character.getNumericValue(digit));\n                    }\n                    boolean isDigitUnique = true;\n                    for (int digit : digits) {\n                        if (digit % 2 == 0) {\n                            isDigitUnique = false;\n                            break;\n                        }\n                    }\n                    if (isDigitUnique) {\n                        return Optional.of(number);\n                    } else {\n                        return Optional.empty();\n                    }\n                })\n                .filter(optional -> optional.isPresent())\n                .map(optional -> optional.get())\n                .sorted()\n                .collect(Collectors.toCollection(ArrayList::new));",
        "grade-183": {
            "execution": 0
        },
        "170": "ArrayList<Integer> res = new ArrayList<Integer>();\n        for (int i : x) {\n            int y = i;\n            boolean found = false;\n            while (y > 0) {\n                int digit = y % 10;\n                if (digit % 2 == 0) {\n                    found = true;\n                    break;\n                }\n                y /= 10;\n            }\n            if (!found) {\n                res.add(i);\n            }\n        }\n        Collections.sort(res);\n        return res;",
        "grade-170": {
            "execution": 1
        },
        "bleu-195": 0.07827318068197639,
        "bleu-31": 0.28885026312572437,
        "bleu-7": 4.7200684547313e-05,
        "bleu-85": 0.2911235365202491,
        "bleu-76": 0.43175740396552265,
        "bleu-70": 0.16894466522972937,
        "bleu-40": 0.2408553940770574,
        "bleu-29": 0.2947798376564924,
        "bleu-166": 0.056753876507007764,
        "bleu-24": 0.24309305346924046,
        "bleu-178": 0.3015631692609269,
        "bleu-129": 0.08677603413409571,
        "bleu-9": 0.012448187248270738,
        "bleu-8": 0.42263938151806,
        "bleu-25": 0.4400505794225856,
        "bleu-68": 0.5558230924313226,
        "bleu-72": 0.011283796615824212,
        "bleu-154": 1.0712279327581774e-06,
        "bleu-183": 0.14741002154737354,
        "bleu-170": 0.44071197670032786,
        "codebleu-195": 0.36840158892125824,
        "codebleu-31": 0.497362866834366,
        "codebleu-7": 0.04615392736155533,
        "codebleu-85": 0.497362866834366,
        "codebleu-76": 0.6966475086880393,
        "codebleu-70": 0.3738810519918749,
        "codebleu-40": 0.568754480983156,
        "codebleu-29": 0.5130527504067118,
        "codebleu-166": 0.603080509403001,
        "codebleu-24": 0.578571429717024,
        "codebleu-178": 0.5893921358713735,
        "codebleu-129": 0.3110609017710891,
        "codebleu-9": 0.140213657642075,
        "codebleu-8": 0.6773080343274728,
        "codebleu-25": 0.6847668992682407,
        "codebleu-68": 0.6914948368937881,
        "codebleu-72": 0.18135699620405216,
        "codebleu-154": 0.030769230769230767,
        "codebleu-183": 0.6770315403997048,
        "codebleu-170": 0.6083218088066153,
        "chrf-195": 0.21236995060019004,
        "chrf-31": 0.31499006249845735,
        "chrf-7": 0.049386338182507705,
        "chrf-85": 0.32071416554561294,
        "chrf-76": 0.49635250332498126,
        "chrf-70": 0.22929533474944086,
        "chrf-40": 0.36768415835213664,
        "chrf-29": 0.3227343798848457,
        "chrf-166": 0.195834574089996,
        "chrf-24": 0.3533629467552432,
        "chrf-178": 0.3351458638347688,
        "chrf-129": 0.18459888721476184,
        "chrf-9": 0.0713079278894807,
        "chrf-8": 0.4725743592823299,
        "chrf-25": 0.501931273493441,
        "chrf-68": 0.5271261390755245,
        "chrf-72": 0.16978363173348895,
        "chrf-154": 0.015045706810385145,
        "chrf-183": 0.4084728281972864,
        "chrf-170": 0.4363134284531989,
        "rougel-195": 0.33532934131736525,
        "rougel-31": 0.5647058823529412,
        "rougel-7": 0.1111111111111111,
        "rougel-85": 0.5581395348837209,
        "rougel-76": 0.6315789473684211,
        "rougel-70": 0.3975155279503106,
        "rougel-40": 0.48672566371681414,
        "rougel-29": 0.5454545454545454,
        "rougel-166": 0.2127659574468085,
        "rougel-24": 0.4933920704845815,
        "rougel-178": 0.5588235294117647,
        "rougel-129": 0.32499999999999996,
        "rougel-9": 0.23255813953488375,
        "rougel-8": 0.6728971962616823,
        "rougel-25": 0.7149321266968326,
        "rougel-68": 0.7156862745098038,
        "rougel-72": 0.22556390977443613,
        "rougel-154": 0.05714285714285715,
        "rougel-183": 0.3254716981132076,
        "rougel-170": 0.6424870466321243,
        "meteor-195": 0.30632125847885694,
        "meteor-31": 0.4441926187078542,
        "meteor-7": 0.033936651583710405,
        "meteor-85": 0.4374592993843106,
        "meteor-76": 0.7241527643145442,
        "meteor-70": 0.3445969594651429,
        "meteor-40": 0.4627266177703764,
        "meteor-29": 0.4356212351011832,
        "meteor-166": 0.2968155715776631,
        "meteor-24": 0.4783131142903468,
        "meteor-178": 0.5144650642613918,
        "meteor-129": 0.30987016981811005,
        "meteor-9": 0.158980719359567,
        "meteor-8": 0.6841933191877112,
        "meteor-25": 0.682985958892791,
        "meteor-68": 0.780518156102417,
        "meteor-72": 0.1375137513751375,
        "meteor-154": 0.0170261066969353,
        "meteor-183": 0.4929749116949726,
        "meteor-170": 0.5720933247904924,
        "ruby-195": 0.21649484536082475,
        "ruby-31": 0.4329896907216495,
        "ruby-7": 0.05154639175257736,
        "ruby-85": 0.4226804123711341,
        "ruby-76": 0.5038167938931297,
        "ruby-70": 0.28865979381443296,
        "ruby-40": 0.37209302325581395,
        "ruby-29": 0.3711340206185567,
        "ruby-166": 0.1245136186770428,
        "ruby-24": 0.36923076923076925,
        "ruby-178": 0.4112149532710281,
        "ruby-129": 0.23711340206185572,
        "ruby-9": 0.14432989690721654,
        "ruby-8": 0.5726495726495726,
        "ruby-25": 0.5967741935483871,
        "ruby-68": 0.5700934579439252,
        "ruby-72": 0.14432989690721654,
        "ruby-154": 0.030927835051546393,
        "ruby-183": 0.2048929663608563,
        "ruby-170": 0.5257731958762887,
        "codebertscore_f1-195": 0.6691427230834961,
        "codebertscore_f3-195": 0.645893931388855,
        "codebertscore_f1-31": 0.7574549913406372,
        "codebertscore_f3-31": 0.721347451210022,
        "codebertscore_f1-7": 0.5485248565673828,
        "codebertscore_f3-7": 0.5071805715560913,
        "codebertscore_f1-85": 0.7701265215873718,
        "codebertscore_f3-85": 0.7420756816864014,
        "codebertscore_f1-76": 0.8064798712730408,
        "codebertscore_f3-76": 0.7957139611244202,
        "codebertscore_f1-70": 0.676824152469635,
        "codebertscore_f3-70": 0.6535800099372864,
        "codebertscore_f1-40": 0.790030837059021,
        "codebertscore_f3-40": 0.7939221262931824,
        "codebertscore_f1-29": 0.7466344833374023,
        "codebertscore_f3-29": 0.7271816730499268,
        "codebertscore_f1-166": 0.7155469655990601,
        "codebertscore_f3-166": 0.7218837141990662,
        "codebertscore_f1-24": 0.7750200629234314,
        "codebertscore_f3-24": 0.7706460952758789,
        "codebertscore_f1-178": 0.7910770177841187,
        "codebertscore_f3-178": 0.7657710313796997,
        "codebertscore_f1-129": 0.6569039821624756,
        "codebertscore_f3-129": 0.625260591506958,
        "codebertscore_f1-9": 0.6248408555984497,
        "codebertscore_f3-9": 0.593204915523529,
        "codebertscore_f1-8": 0.8335862159729004,
        "codebertscore_f3-8": 0.8300782442092896,
        "codebertscore_f1-25": 0.840825617313385,
        "codebertscore_f3-25": 0.8369067311286926,
        "codebertscore_f1-68": 0.8656272888183594,
        "codebertscore_f3-68": 0.8491182327270508,
        "codebertscore_f1-72": 0.6501368880271912,
        "codebertscore_f3-72": 0.6297431588172913,
        "codebertscore_f1-154": 0.4900684952735901,
        "codebertscore_f3-154": 0.460152268409729,
        "codebertscore_f1-183": 0.7911088466644287,
        "codebertscore_f3-183": 0.8194947242736816,
        "codebertscore_f1-170": 0.8258177042007446,
        "codebertscore_f3-170": 0.8021700382232666,
        "codebertscore_s_f1-195": 0.700083315372467,
        "codebertscore_s_f3-195": 0.6825740337371826,
        "codebertscore_s_f1-31": 0.7817727327346802,
        "codebertscore_s_f3-31": 0.7428556680679321,
        "codebertscore_s_f1-7": 0.5805674195289612,
        "codebertscore_s_f3-7": 0.5590093731880188,
        "codebertscore_s_f1-85": 0.7936837673187256,
        "codebertscore_s_f3-85": 0.7641409039497375,
        "codebertscore_s_f1-76": 0.8104199767112732,
        "codebertscore_s_f3-76": 0.7996209263801575,
        "codebertscore_s_f1-70": 0.7107465267181396,
        "codebertscore_s_f3-70": 0.6936788558959961,
        "codebertscore_s_f1-40": 0.7888922691345215,
        "codebertscore_s_f3-40": 0.7889072299003601,
        "codebertscore_s_f1-29": 0.7730836272239685,
        "codebertscore_s_f3-29": 0.7514702081680298,
        "codebertscore_s_f1-166": 0.7375179529190063,
        "codebertscore_s_f3-166": 0.7394798994064331,
        "codebertscore_s_f1-24": 0.7819833159446716,
        "codebertscore_s_f3-24": 0.773378849029541,
        "codebertscore_s_f1-178": 0.7956142425537109,
        "codebertscore_s_f3-178": 0.7698976397514343,
        "codebertscore_s_f1-129": 0.6982629299163818,
        "codebertscore_s_f3-129": 0.6737458109855652,
        "codebertscore_s_f1-9": 0.6678072810173035,
        "codebertscore_s_f3-9": 0.6443979740142822,
        "codebertscore_s_f1-8": 0.8400671482086182,
        "codebertscore_s_f3-8": 0.8364156484603882,
        "codebertscore_s_f1-25": 0.8500095009803772,
        "codebertscore_s_f3-25": 0.843961775302887,
        "codebertscore_s_f1-68": 0.8729413747787476,
        "codebertscore_s_f3-68": 0.8553023338317871,
        "codebertscore_s_f1-72": 0.6995869874954224,
        "codebertscore_s_f3-72": 0.6859748959541321,
        "codebertscore_s_f1-154": 0.5329934358596802,
        "codebertscore_s_f3-154": 0.5267671942710876,
        "codebertscore_s_f1-183": 0.800284743309021,
        "codebertscore_s_f3-183": 0.8261927962303162,
        "codebertscore_s_f1-170": 0.8317484259605408,
        "codebertscore_s_f3-170": 0.8083615899085999,
        "gpt35_nsnr-195": 4,
        "raw_gpt35_nsnr-195": "4",
        "gpt35_nsnr-31": 3,
        "raw_gpt35_nsnr-31": "3",
        "gpt35_nsnr-7": 0,
        "raw_gpt35_nsnr-7": "0",
        "gpt35_nsnr-85": 3,
        "raw_gpt35_nsnr-85": "3",
        "gpt35_nsnr-76": 4,
        "raw_gpt35_nsnr-76": "4",
        "gpt35_nsnr-70": 4,
        "raw_gpt35_nsnr-70": "4",
        "gpt35_nsnr-40": 4,
        "raw_gpt35_nsnr-40": "4",
        "gpt35_nsnr-29": 3,
        "raw_gpt35_nsnr-29": "3",
        "gpt35_nsnr-166": 3,
        "raw_gpt35_nsnr-166": "3",
        "gpt35_nsnr-24": 4,
        "raw_gpt35_nsnr-24": "4",
        "gpt35_nsnr-178": 4,
        "raw_gpt35_nsnr-178": "4",
        "gpt35_nsnr-129": 4,
        "raw_gpt35_nsnr-129": "4",
        "gpt35_nsnr-9": 4,
        "raw_gpt35_nsnr-9": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-25": 4,
        "raw_gpt35_nsnr-25": "4",
        "gpt35_nsnr-68": 4,
        "raw_gpt35_nsnr-68": "4",
        "gpt35_nsnr-72": 3,
        "raw_gpt35_nsnr-72": "3",
        "gpt35_nsnr-154": 3,
        "raw_gpt35_nsnr-154": "3",
        "gpt35_nsnr-183": 4,
        "raw_gpt35_nsnr-183": "4",
        "gpt35_nsnr-170": 4,
        "raw_gpt35_nsnr-170": "4",
        "gpt35_nswr-195": 3,
        "raw_gpt35_nswr-195": "3",
        "gpt35_nswr-31": 3,
        "raw_gpt35_nswr-31": "3",
        "gpt35_nswr-7": 0,
        "raw_gpt35_nswr-7": "0",
        "gpt35_nswr-85": 3,
        "raw_gpt35_nswr-85": "3",
        "gpt35_nswr-76": 3,
        "raw_gpt35_nswr-76": "3",
        "gpt35_nswr-70": 4,
        "raw_gpt35_nswr-70": "4",
        "gpt35_nswr-40": 3,
        "raw_gpt35_nswr-40": "3",
        "gpt35_nswr-29": 3,
        "raw_gpt35_nswr-29": "3",
        "gpt35_nswr-166": 2,
        "raw_gpt35_nswr-166": "2",
        "gpt35_nswr-24": 3,
        "raw_gpt35_nswr-24": "3",
        "gpt35_nswr-178": 3,
        "raw_gpt35_nswr-178": "3",
        "gpt35_nswr-129": 3,
        "raw_gpt35_nswr-129": "3",
        "gpt35_nswr-9": 3,
        "raw_gpt35_nswr-9": "3",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-25": 4,
        "raw_gpt35_nswr-25": "4",
        "gpt35_nswr-68": 4,
        "raw_gpt35_nswr-68": "4",
        "gpt35_nswr-72": 3,
        "raw_gpt35_nswr-72": "3",
        "gpt35_nswr-154": 3,
        "raw_gpt35_nswr-154": "3",
        "gpt35_nswr-183": 3,
        "raw_gpt35_nswr-183": "3",
        "gpt35_nswr-170": 4,
        "raw_gpt35_nswr-170": "4"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a string representing a space separated lowercase letters, return a dictionary\n    // of the letter with the most repetition and containing the corresponding count.\n    // If several letters have the same occurrence, return all of them.\n    // Example:\n    // histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b': 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer> histogram(String test) {\n",
        "snippet": [
            "        Map<String, Integer> dict1 = new HashMap<>();\n        List<String> list1 = Arrays.asList(test.split(\" \" ));\n        int t = 0;\n        for (String i : list1) {\n            if (Collections.frequency(list1, i) > t && !i.isEmpty()) {\n                t = Collections.frequency(list1, i);\n            }\n        }\n        if (t > 0) {\n            for (String i : list1) {\n                if (Collections.frequency(list1, i) == t) {\n                    dict1.put(i, t);\n                }\n            }\n        }\n        return dict1;\n    }\n}"
        ],
        "simplified": "Given a string representing a space separated lowercase letters, return a dictionary of the letter with the most repetition and containing the corresponding count. If several letters have the same occurrence, return all of them.",
        "task_id": "111",
        "185": "HashMap<String,Integer> result = new HashMap<String,Integer>();\n        if (test.isEmpty()) {\n            return result;\n        }\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (result.containsKey(word)) {\n                result.put(word, result.get(word) + 1);\n            } else {\n                result.put(word, 1);\n            }\n        }\n        return result;",
        "grade-185": {
            "execution": 0
        },
        "29": "HashMap<String,Integer> result = new HashMap<String,Integer>();\n        // parse the input string into a token list\n        String[] tokens = test.split(\"\\\\s+\");\n        // now iterate through the token list\n        for (String token : tokens) {\n            // and add to the result set\n            result.merge(token, 1, Integer::sum);\n        }\n        return result;",
        "grade-29": {
            "execution": 0
        },
        "6": "if (test.length() == 0) return new HashMap<String,Integer>();\n        HashMap<String,Integer> count = new HashMap<String,Integer>();\n        Arrays.stream(test.split(\" \")).forEach(x -> {\n            count.put(x,count.getOrDefault(x,0)+1);\n        });\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n        int max = Collections.max(count.values());\n        for (Map.Entry<String,Integer> e : count.entrySet()) {\n            if (e.getValue() == max) result.put(e.getKey(),e.getValue());\n        }\n        return result;",
        "grade-6": {
            "execution": 1
        },
        "72": "// Implement the solution\n        return null;",
        "grade-72": {
            "execution": 0
        },
        "64": "HashMap<String,Integer> result = new HashMap<String,Integer>();\n        HashMap<String,Integer> occurences = new HashMap<String,Integer>();\n        String[] testArr = test.split(\" \");\n        for (String s : testArr) {\n            Integer count = occurences.get(s);\n            if (count == null) {\n                occurences.put(s, 1);\n            } else {\n                occurences.put(s, count + 1);\n            }\n        }\n        if (occurences.size() == 0) {\n            return result;\n        }\n        Integer max = Collections.max(occurences.values());\n        for (String s : occurences.keySet()) {\n            if (occurences.get(s) == max) {\n                result.put(s, max);\n            }\n        }\n        return result;",
        "grade-64": {
            "execution": 0
        },
        "58": "HashMap<String,Integer> histogram = new HashMap<String,Integer>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            histogram.put(word, histogram.getOrDefault(word, 0) + 1);\n        }\n        int most = histogram.values().stream().max(Integer::compare).get();\n        ArrayList<String> letters = new ArrayList<String>();\n        for (String key : histogram.keySet()) {\n            if (histogram.get(key) == most) {\n                letters.add(key);\n            }\n        }\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n        for (String letter : letters) {\n            result.put(letter, most);\n        }\n        return result;",
        "grade-58": {
            "execution": 0
        },
        "36": "HashMap<String,Integer> map = new HashMap<String,Integer>();\n        String[] parts = test.split(\" \");\n        for (String part : parts) {\n            map.put(part, map.getOrDefault(part, 0) + 1);\n        }\n        return map;",
        "grade-36": {
            "execution": 0
        },
        "27": "String[] letters = test.split(\" \");\n        HashMap<String,Integer> histogram = new HashMap<String,Integer>();\n        for (String letter : letters) {\n            if (histogram.containsKey(letter)) {\n                histogram.put(letter, histogram.get(letter) + 1);\n            } else {\n                histogram.put(letter, 1);\n            }\n        }\n        return histogram;",
        "grade-27": {
            "execution": 0
        },
        "197": "HashMap<String,Integer> freq = new HashMap<String,Integer>();\n        for (String letter : test.split(\" \")) {\n            if (freq.containsKey(letter)) {\n                freq.put(letter, freq.get(letter) + 1);\n            } else {\n                freq.put(letter, 1);\n            }\n        }\n        return freq;",
        "grade-197": {
            "execution": 0
        },
        "155": "return Arrays.stream(test.split(\" \"))\n            .collect(Collectors.groupingBy(s -> s,\n                () -> new HashMap<String,Integer>(),\n                Collectors.reducing(0, e -> 1, Integer::sum)));",
        "grade-155": {
            "execution": 0
        },
        "23": "// Insert your code here...\n        return null;",
        "grade-23": {
            "execution": 0
        },
        "169": "HashMap<String,Integer> result = new HashMap<String,Integer>();\n        for (String word : test.split(\" \")) {\n            if (result.containsKey(word)) {\n                result.put(word,result.get(word)+1);\n            } else {\n                result.put(word,1);\n            }\n        }\n        return result;",
        "grade-169": {
            "execution": 0
        },
        "116": "HashMap<String,Integer> result = new HashMap<String,Integer>();\n        for (String s : test.split(\" \")) {\n            if (result.containsKey(s)) {\n                result.put(s, result.get(s) + 1);\n            } else {\n                result.put(s, 1);\n            }\n        }\n        return result;",
        "grade-116": {
            "execution": 0
        },
        "8": "var split = test.split(\" \");\n        var dict = new HashMap<String,Integer>();\n        for (var i=0; i<split.length; i++) {\n            var c = split[i];\n            if (dict.containsKey(c))\n                dict.put(c, dict.get(c) + 1);\n            else\n                dict.put(c, 1);\n        }\n        var max = Arrays.stream(split).mapToInt(s -> dict.get(s)).max().getAsInt();\n        var filtered = dict.entrySet().stream().filter(e -> e.getValue() == max).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n        return new HashMap<String,Integer>(filtered);",
        "grade-8": {
            "execution": 0
        },
        "7": "HashMap<String,Integer> res = new HashMap<String,Integer>();\n        String[] letters = test.split(\" \");\n        int[] nums = new int[26];\n        for (int i = 0; i < letters.length; i++) {\n            nums[letters[i].charAt(0) - 'a']++;\n        }\n        int max = 0;\n        for (int i = 0; i < nums.length; i++) {\n            if (nums[i] > max) max = nums[i];\n        }\n        for (int i = 0; i < nums.length; i++) {\n            if (nums[i] == max) res.put(String.valueOf((char)(i + 'a')), nums[i]);\n        }\n        return res;",
        "grade-7": {
            "execution": 0
        },
        "24": "HashMap<String,Integer> map = new HashMap<String,Integer>();\n        List<String> list = new ArrayList<String>(Arrays.asList(test.split(\" \")));\n        for (String str : list) {\n            if (map.containsKey(str))\n                map.put(str, map.get(str) + 1);\n            else\n                map.put(str, 1);\n        }\n        return map;",
        "grade-24": {
            "execution": 0
        },
        "56": "HashMap<String,Integer> hist = new HashMap<String,Integer>();\n        String[] testList = test.split(\" \");\n        // Implement algorithm here\n        return hist;",
        "grade-56": {
            "execution": 0
        },
        "60": "String[] tokens = test.split(\" \");\n        HashMap<String,Integer> answer = new HashMap<String,Integer>();\n        for (String token : tokens) {\n            Integer count = answer.get(token);\n            if (count == null) count = 0;\n            answer.put(token, count + 1);\n        }\n        return answer;",
        "grade-60": {
            "execution": 0
        },
        "143": "HashMap<String,Integer> histogram = new HashMap<String,Integer>();\n        String[] letters = test.split(\" \");\n        for (String l : letters) {\n            histogram.put(l, histogram.getOrDefault(l, 0) + 1);\n        }\n        return histogram;",
        "grade-143": {
            "execution": 0
        },
        "172": "HashMap<String,Integer> res = new HashMap<String,Integer>();\n        HashMap<String,Integer> freq = new HashMap<String,Integer>();\n        HashMap<Integer,ArrayList<String>> freq_to_key = new HashMap<Integer,ArrayList<String>>();\n        int max = -1;\n        if (test == null || test.length() == 0) return res;\n        String[] words = test.split(\" \");\n        for (String w : words) {\n            if (freq.containsKey(w)) {\n                freq.put(w, freq.get(w) + 1);\n            } else {\n                freq.put(w, 1);\n            }\n            if (freq.get(w) > max) {\n                max = freq.get(w);\n            }\n        }\n        for (String key : freq.keySet()) {\n            int value = freq.get(key);\n            if (freq_to_key.containsKey(value)) {\n                freq_to_key.get(value).add(key);\n            } else {\n                ArrayList<String> newlist = new ArrayList<String>();\n                newlist.add(key);\n                freq_to_key.put(value, newlist);\n            }\n        }\n        if (freq_to_key.containsKey(max)) {\n            for (String key : freq_to_key.get(max)) {\n                res.put(key, max);\n            }\n        }\n        return res;",
        "grade-172": {
            "execution": 1
        },
        "bleu-185": 0.2603685705320131,
        "bleu-29": 0.13132770504851937,
        "bleu-6": 0.20286820970255082,
        "bleu-72": 1.2184864821212586e-08,
        "bleu-64": 0.23415292922735184,
        "bleu-58": 0.2056873924608043,
        "bleu-36": 0.1291538314226376,
        "bleu-27": 0.19740822583638606,
        "bleu-197": 0.1904499635006194,
        "bleu-155": 0.09935984411464117,
        "bleu-23": 2.299050857253447e-06,
        "bleu-169": 0.1904499635006194,
        "bleu-116": 0.1904499635006194,
        "bleu-8": 0.15009026711792675,
        "bleu-7": 0.18955318142982075,
        "bleu-24": 0.271721375005004,
        "bleu-56": 0.049334343403098634,
        "bleu-60": 0.16213893042595573,
        "bleu-143": 0.1291538314226376,
        "bleu-172": 0.15105323548632674,
        "codebleu-185": 0.4715484623224486,
        "codebleu-29": 0.33071087016940204,
        "codebleu-6": 0.5740900230594472,
        "codebleu-72": 0.021276697584319812,
        "codebleu-64": 0.6312684252248763,
        "codebleu-58": 0.5998299693719022,
        "codebleu-36": 0.28449561268200685,
        "codebleu-27": 0.3925168581281767,
        "codebleu-197": 0.3629084390458304,
        "codebleu-155": 0.2529540664015634,
        "codebleu-23": 0.02482334023088591,
        "codebleu-169": 0.3629084390458304,
        "codebleu-116": 0.3629084390458304,
        "codebleu-8": 0.552714686212468,
        "codebleu-7": 0.5480229889834912,
        "codebleu-24": 0.45379800532311415,
        "codebleu-56": 0.16452213417162753,
        "codebleu-60": 0.34099689572004555,
        "codebleu-143": 0.27740341410044655,
        "codebleu-172": 0.6404151857933416,
        "chrf-185": 0.3467620962748352,
        "chrf-29": 0.28707641763297626,
        "chrf-6": 0.3437855013241331,
        "chrf-72": 0.04247722289506448,
        "chrf-64": 0.3578445843016263,
        "chrf-58": 0.34452396564582977,
        "chrf-36": 0.267877476266548,
        "chrf-27": 0.32120329925131164,
        "chrf-197": 0.30966754129519025,
        "chrf-155": 0.27587787740902314,
        "chrf-23": 0.03625973962794582,
        "chrf-169": 0.2976871915132973,
        "chrf-116": 0.2985331358083137,
        "chrf-8": 0.33305562200931405,
        "chrf-7": 0.3199127906932267,
        "chrf-24": 0.388995571575732,
        "chrf-56": 0.23665659582317372,
        "chrf-60": 0.29569902456183644,
        "chrf-143": 0.2897994204218578,
        "chrf-172": 0.34440698174858947,
        "rougel-185": 0.48484848484848486,
        "rougel-29": 0.3710407239819005,
        "rougel-6": 0.4299674267100977,
        "rougel-72": 0.028571428571428574,
        "rougel-64": 0.5064935064935066,
        "rougel-58": 0.45016077170418006,
        "rougel-36": 0.4467005076142132,
        "rougel-27": 0.43317972350230416,
        "rougel-197": 0.4761904761904762,
        "rougel-155": 0.29166666666666663,
        "rougel-23": 0.06944444444444445,
        "rougel-169": 0.4761904761904762,
        "rougel-116": 0.4761904761904762,
        "rougel-8": 0.3095975232198142,
        "rougel-7": 0.4267515923566879,
        "rougel-24": 0.5438596491228069,
        "rougel-56": 0.31034482758620696,
        "rougel-60": 0.3923444976076555,
        "rougel-143": 0.4467005076142132,
        "rougel-172": 0.37587006960556846,
        "meteor-185": 0.38491866133074615,
        "meteor-29": 0.23673000003899475,
        "meteor-6": 0.3747757476216173,
        "meteor-72": 0.008361204013377926,
        "meteor-64": 0.48460817118453037,
        "meteor-58": 0.4347376659941395,
        "meteor-36": 0.23554580118825927,
        "meteor-27": 0.32614462056332066,
        "meteor-197": 0.31553257062827633,
        "meteor-155": 0.22831236973486507,
        "meteor-23": 0.020833333333333336,
        "meteor-169": 0.31553257062827633,
        "meteor-116": 0.31553257062827633,
        "meteor-8": 0.3569859731849629,
        "meteor-7": 0.3691768093635873,
        "meteor-24": 0.33684277449297473,
        "meteor-56": 0.164516711833785,
        "meteor-60": 0.303299185286763,
        "meteor-143": 0.24537810643344857,
        "meteor-172": 0.4433517148621386,
        "ruby-185": 0.303030303030303,
        "ruby-29": 0.21969696969696972,
        "ruby-6": 0.27428571428571424,
        "ruby-72": 0.015151515151515138,
        "ruby-64": 0.36363636363636365,
        "ruby-58": 0.2793296089385475,
        "ruby-36": 0.2954545454545454,
        "ruby-27": 0.2803030303030303,
        "ruby-197": 0.33333333333333337,
        "ruby-155": 0.19696969696969702,
        "ruby-23": 0.037878787878787845,
        "ruby-169": 0.33333333333333337,
        "ruby-116": 0.33333333333333337,
        "ruby-8": 0.19895287958115182,
        "ruby-7": 0.27472527472527475,
        "ruby-24": 0.3712121212121212,
        "ruby-56": 0.1742424242424242,
        "ruby-60": 0.2272727272727273,
        "ruby-143": 0.2954545454545454,
        "ruby-172": 0.254180602006689,
        "codebertscore_f1-185": 0.774773359298706,
        "codebertscore_f3-185": 0.7564954161643982,
        "codebertscore_f1-29": 0.7388801574707031,
        "codebertscore_f3-29": 0.7342706918716431,
        "codebertscore_f1-6": 0.7695956230163574,
        "codebertscore_f3-6": 0.7717880010604858,
        "codebertscore_f1-72": 0.5649648904800415,
        "codebertscore_f3-72": 0.5343043208122253,
        "codebertscore_f1-64": 0.7787479758262634,
        "codebertscore_f3-64": 0.7835976481437683,
        "codebertscore_f1-58": 0.7637193202972412,
        "codebertscore_f3-58": 0.7652305364608765,
        "codebertscore_f1-36": 0.7582130432128906,
        "codebertscore_f3-36": 0.7265822887420654,
        "codebertscore_f1-27": 0.7575846314430237,
        "codebertscore_f3-27": 0.7407290935516357,
        "codebertscore_f1-197": 0.7605605125427246,
        "codebertscore_f3-197": 0.7421112060546875,
        "codebertscore_f1-155": 0.6957322359085083,
        "codebertscore_f3-155": 0.677760660648346,
        "codebertscore_f1-23": 0.5229096412658691,
        "codebertscore_f3-23": 0.5002479553222656,
        "codebertscore_f1-169": 0.7648216485977173,
        "codebertscore_f3-169": 0.7404226660728455,
        "codebertscore_f1-116": 0.7681795954704285,
        "codebertscore_f3-116": 0.7422576546669006,
        "codebertscore_f1-8": 0.7394912838935852,
        "codebertscore_f3-8": 0.7546658515930176,
        "codebertscore_f1-7": 0.7844069600105286,
        "codebertscore_f3-7": 0.7852460145950317,
        "codebertscore_f1-24": 0.8144909739494324,
        "codebertscore_f3-24": 0.7989499568939209,
        "codebertscore_f1-56": 0.7231718897819519,
        "codebertscore_f3-56": 0.6737082600593567,
        "codebertscore_f1-60": 0.7690150141716003,
        "codebertscore_f3-60": 0.7439494729042053,
        "codebertscore_f1-143": 0.7529207468032837,
        "codebertscore_f3-143": 0.7265061736106873,
        "codebertscore_f1-172": 0.7441176176071167,
        "codebertscore_f3-172": 0.7563466429710388,
        "codebertscore_s_f1-185": 0.7860726118087769,
        "codebertscore_s_f3-185": 0.763416588306427,
        "codebertscore_s_f1-29": 0.7466943860054016,
        "codebertscore_s_f3-29": 0.7395470142364502,
        "codebertscore_s_f1-6": 0.785219669342041,
        "codebertscore_s_f3-6": 0.7809523344039917,
        "codebertscore_s_f1-72": 0.5948618650436401,
        "codebertscore_s_f3-72": 0.5668131709098816,
        "codebertscore_s_f1-64": 0.7900941371917725,
        "codebertscore_s_f3-64": 0.7948572635650635,
        "codebertscore_s_f1-58": 0.7790435552597046,
        "codebertscore_s_f3-58": 0.7715970277786255,
        "codebertscore_s_f1-36": 0.7838598489761353,
        "codebertscore_s_f3-36": 0.7496525645256042,
        "codebertscore_s_f1-27": 0.7745515704154968,
        "codebertscore_s_f3-27": 0.7569287419319153,
        "codebertscore_s_f1-197": 0.7755207419395447,
        "codebertscore_s_f3-197": 0.7582395076751709,
        "codebertscore_s_f1-155": 0.7210461497306824,
        "codebertscore_s_f3-155": 0.7096136808395386,
        "codebertscore_s_f1-23": 0.5701621770858765,
        "codebertscore_s_f3-23": 0.5604376196861267,
        "codebertscore_s_f1-169": 0.7770232558250427,
        "codebertscore_s_f3-169": 0.7518984079360962,
        "codebertscore_s_f1-116": 0.7859111428260803,
        "codebertscore_s_f3-116": 0.7610107660293579,
        "codebertscore_s_f1-8": 0.7580620646476746,
        "codebertscore_s_f3-8": 0.772365391254425,
        "codebertscore_s_f1-7": 0.7905572056770325,
        "codebertscore_s_f3-7": 0.7910921573638916,
        "codebertscore_s_f1-24": 0.8257834315299988,
        "codebertscore_s_f3-24": 0.8085654377937317,
        "codebertscore_s_f1-56": 0.7573321461677551,
        "codebertscore_s_f3-56": 0.7087424993515015,
        "codebertscore_s_f1-60": 0.7831278443336487,
        "codebertscore_s_f3-60": 0.7553418874740601,
        "codebertscore_s_f1-143": 0.7765366435050964,
        "codebertscore_s_f3-143": 0.7480417490005493,
        "codebertscore_s_f1-172": 0.7632432579994202,
        "codebertscore_s_f3-172": 0.7739271521568298,
        "gpt35_nsnr-185": 4,
        "raw_gpt35_nsnr-185": "4",
        "gpt35_nsnr-29": 4,
        "raw_gpt35_nsnr-29": "4",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-72": 0,
        "raw_gpt35_nsnr-72": "0",
        "gpt35_nsnr-64": 4,
        "raw_gpt35_nsnr-64": "4",
        "gpt35_nsnr-58": 4,
        "raw_gpt35_nsnr-58": "4",
        "gpt35_nsnr-36": 4,
        "raw_gpt35_nsnr-36": "4",
        "gpt35_nsnr-27": 4,
        "raw_gpt35_nsnr-27": "4",
        "gpt35_nsnr-197": 4,
        "raw_gpt35_nsnr-197": "4",
        "gpt35_nsnr-155": 4,
        "raw_gpt35_nsnr-155": "4",
        "gpt35_nsnr-23": 0,
        "raw_gpt35_nsnr-23": "0",
        "gpt35_nsnr-169": 4,
        "raw_gpt35_nsnr-169": "4",
        "gpt35_nsnr-116": 4,
        "raw_gpt35_nsnr-116": "4",
        "gpt35_nsnr-8": 4,
        "raw_gpt35_nsnr-8": "4",
        "gpt35_nsnr-7": 4,
        "raw_gpt35_nsnr-7": "4",
        "gpt35_nsnr-24": 4,
        "raw_gpt35_nsnr-24": "4",
        "gpt35_nsnr-56": 2,
        "raw_gpt35_nsnr-56": "2",
        "gpt35_nsnr-60": 4,
        "raw_gpt35_nsnr-60": "4",
        "gpt35_nsnr-143": 4,
        "raw_gpt35_nsnr-143": "4",
        "gpt35_nsnr-172": 4,
        "raw_gpt35_nsnr-172": "4",
        "gpt35_nswr-185": 4,
        "raw_gpt35_nswr-185": "4",
        "gpt35_nswr-29": 4,
        "raw_gpt35_nswr-29": "4",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-72": 0,
        "raw_gpt35_nswr-72": "0",
        "gpt35_nswr-64": 4,
        "raw_gpt35_nswr-64": "4",
        "gpt35_nswr-58": 4,
        "raw_gpt35_nswr-58": "4",
        "gpt35_nswr-36": 4,
        "raw_gpt35_nswr-36": "4",
        "gpt35_nswr-27": 3,
        "raw_gpt35_nswr-27": "3",
        "gpt35_nswr-197": 4,
        "raw_gpt35_nswr-197": "4",
        "gpt35_nswr-155": 3,
        "raw_gpt35_nswr-155": "3",
        "gpt35_nswr-23": 0,
        "raw_gpt35_nswr-23": "0",
        "gpt35_nswr-169": 4,
        "raw_gpt35_nswr-169": "4",
        "gpt35_nswr-116": 3,
        "raw_gpt35_nswr-116": "3",
        "gpt35_nswr-8": 4,
        "raw_gpt35_nswr-8": "4",
        "gpt35_nswr-7": 4,
        "raw_gpt35_nswr-7": "4",
        "gpt35_nswr-24": 4,
        "raw_gpt35_nswr-24": "4",
        "gpt35_nswr-56": 2,
        "raw_gpt35_nswr-56": "2",
        "gpt35_nswr-60": 4,
        "raw_gpt35_nswr-60": "4",
        "gpt35_nswr-143": 4,
        "raw_gpt35_nswr-143": "4",
        "gpt35_nswr-172": 4,
        "raw_gpt35_nswr-172": "4"
    },
    {
        "intent": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Filter an input list of strings only for ones that contain given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    // >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc', 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String> strings, String substring) {\n",
        "snippet": [
            "        List<String> result = new ArrayList<>();\n        for (String x : strings) {\n            if (x.contains(substring)) {\n                result.add(x);\n            }\n        }\n        return result;\n    }\n}"
        ],
        "simplified": "Filter an input list of strings only for ones that contain given substring",
        "task_id": "7",
        "133": "ArrayList<String> arr = new ArrayList<String>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                arr.add(s);\n            }\n        }\n        return arr;",
        "grade-133": {
            "execution": 1
        },
        "16": "ArrayList<String> filteredStrings = new ArrayList<String>();\n        for (String string : strings) {\n            if (string.contains(substring)) {\n                filteredStrings.add(string);\n            }\n        }\n        return filteredStrings;",
        "grade-16": {
            "execution": 1
        },
        "3": "ArrayList<String> results = new ArrayList<String>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                results.add(str);\n            }\n        }\n        return results;",
        "grade-3": {
            "execution": 1
        },
        "156": "// TODO: write your code here\n        ArrayList<String> result = new ArrayList<String>();\n        for (String word : strings) {\n            if (word.contains(substring)) {\n                result.add(word);\n            }\n        }\n        return result;",
        "grade-156": {
            "execution": 1
        },
        "47": "throw new UnsupportedOperationException(\"Not implemented\");",
        "grade-47": {
            "execution": 0
        },
        "37": "// Implement your solution here\n        ArrayList<String> ret = new ArrayList<String>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                ret.add(str);\n            }\n        }\n        return ret;",
        "grade-37": {
            "execution": 1
        },
        "32": "ArrayList<String> res = new ArrayList<String>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                res.add(str);\n            }\n        }\n        return res;",
        "grade-32": {
            "execution": 1
        },
        "20": "ArrayList<String> ret = new ArrayList<String>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                ret.add(s);\n            }\n        }\n        return ret;",
        "grade-20": {
            "execution": 1
        },
        "15": "ArrayList<String> filteredStrings = new ArrayList<String>();\n        // >>>>> Your code here.\n        int index = 0;\n        while (index < strings.size()) {\n            String string = strings.get(index);\n            int stringIndex = 0;\n            while (stringIndex < string.length()) {\n                if (string.charAt(stringIndex) == substring.charAt(0)) {\n                    if (string.contains(substring)) {\n                        filteredStrings.add(string);\n                        break;\n                    }\n                }\n                stringIndex++;\n            }\n            index++;\n        }\n        // <<<<< End of your code.\n        return filteredStrings;",
        "grade-15": {
            "execution": 1
        },
        "140": "//BEGIN_SOLUTION\n        return strings.stream()\n                      .filter(s -> s.contains(substring))\n                      .collect(Collectors.toCollection(ArrayList::new));\n        //END_SOLUTION",
        "grade-140": {
            "execution": 1
        },
        "99": "// Use an arraylist to keep track of the results\n        ArrayList<String> results = new ArrayList<String>();\n        // For each string in strings...\n        for (String str : strings) {\n            // If the string contains substring, add it to results\n            if (str.contains(substring)) {\n                results.add(str);\n            }\n        }\n        // Return the results\n        return results;",
        "grade-99": {
            "execution": 1
        },
        "13": "ArrayList<String> ret = new ArrayList<String>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                ret.add(str);\n            }\n        }\n        return ret;",
        "grade-13": {
            "execution": 1
        },
        "117": "ArrayList<String> arr = new ArrayList<String>();\n        for (String string : strings) {\n            if (string.contains(substring)) {\n                arr.add(string);\n            }\n        }\n        return arr;",
        "grade-117": {
            "execution": 1
        },
        "80": "// SOLUTION\n        return new ArrayList<String>();",
        "grade-80": {
            "execution": 0
        },
        "6": "ArrayList<String> list = new ArrayList<String>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                list.add(s);\n            }\n        }\n        return list;",
        "grade-6": {
            "execution": 1
        },
        "31": "ArrayList<String> output = new ArrayList<String>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                output.add(str);\n            }\n        }\n        return output;",
        "grade-31": {
            "execution": 1
        },
        "33": "ArrayList<String> results = new ArrayList<String>();\n        // TODO: Your code here\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                results.add(s);\n            }\n        }\n        return results;",
        "grade-33": {
            "execution": 1
        },
        "92": "ArrayList<String> out = new ArrayList<String>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                out.add(s);\n            }\n        }\n        return out;",
        "grade-92": {
            "execution": 1
        },
        "120": "// TODO: Finish this function\n        ArrayList<String> filtered = new ArrayList<String>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                filtered.add(s);\n            }\n        }\n        return filtered;",
        "grade-120": {
            "execution": 1
        },
        "107": "return strings;",
        "grade-107": {
            "execution": 0
        },
        "bleu-133": 0.5720912404318329,
        "bleu-16": 0.5359384498282567,
        "bleu-3": 0.5720912404318329,
        "bleu-156": 0.6292084734048881,
        "bleu-47": 0.004737370582132136,
        "bleu-37": 0.50408441048065,
        "bleu-32": 0.5720912404318329,
        "bleu-20": 0.5720912404318329,
        "bleu-15": 0.13688597419103357,
        "bleu-140": 0.15198044921802192,
        "bleu-99": 0.25129908311946725,
        "bleu-13": 0.5720912404318329,
        "bleu-117": 0.5720912404318329,
        "bleu-80": 0.042512971681750625,
        "bleu-6": 0.5720912404318329,
        "bleu-31": 0.5720912404318329,
        "bleu-33": 0.45486362904167194,
        "bleu-92": 0.5720912404318329,
        "bleu-120": 0.4942917012605809,
        "bleu-107": 2.3644988030350712e-07,
        "codebleu-133": 0.7801133780837837,
        "codebleu-16": 0.7801133780837837,
        "codebleu-3": 0.7801133780837837,
        "codebleu-156": 0.7963543249135023,
        "codebleu-47": 0.060705505378510265,
        "codebleu-37": 0.7749882336695769,
        "codebleu-32": 0.7801133780837837,
        "codebleu-20": 0.7801133780837837,
        "codebleu-15": 0.6333700991290553,
        "codebleu-140": 0.4519682714176935,
        "codebleu-99": 0.6791012197007453,
        "codebleu-13": 0.7801133780837837,
        "codebleu-117": 0.7801133780837837,
        "codebleu-80": 0.1206680541205846,
        "codebleu-6": 0.7801133780837837,
        "codebleu-31": 0.7801133780837837,
        "codebleu-33": 0.7742363127003439,
        "codebleu-92": 0.7801133780837837,
        "codebleu-120": 0.7742363127003439,
        "codebleu-107": 0.030303584197126417,
        "chrf-133": 0.6604298278226695,
        "chrf-16": 0.6240560128538236,
        "chrf-3": 0.7863221230223697,
        "chrf-156": 0.8039886034399258,
        "chrf-47": 0.07504681796462871,
        "chrf-37": 0.6941368894596244,
        "chrf-32": 0.7275039794240264,
        "chrf-20": 0.72928450756645,
        "chrf-15": 0.39883682813212695,
        "chrf-140": 0.35928774986183404,
        "chrf-99": 0.5948723236889505,
        "chrf-13": 0.721535013139256,
        "chrf-117": 0.6460161648134711,
        "chrf-80": 0.23576595754715554,
        "chrf-6": 0.6805789762072281,
        "chrf-31": 0.6663485962393386,
        "chrf-33": 0.7489709242606586,
        "chrf-92": 0.684232148589231,
        "chrf-120": 0.6368787576147757,
        "chrf-107": 0.0903627621803698,
        "rougel-133": 0.8260869565217391,
        "rougel-16": 0.8,
        "rougel-3": 0.8260869565217391,
        "rougel-156": 0.8200000000000001,
        "rougel-47": 0.13793103448275862,
        "rougel-37": 0.7755102040816326,
        "rougel-32": 0.8260869565217391,
        "rougel-20": 0.8260869565217391,
        "rougel-15": 0.39361702127659576,
        "rougel-140": 0.29885057471264365,
        "rougel-99": 0.5846153846153845,
        "rougel-13": 0.8260869565217391,
        "rougel-117": 0.8260869565217391,
        "rougel-80": 0.2711864406779661,
        "rougel-6": 0.8260869565217391,
        "rougel-31": 0.8260869565217391,
        "rougel-33": 0.7676767676767677,
        "rougel-92": 0.8260869565217391,
        "rougel-120": 0.7676767676767677,
        "rougel-107": 0.08163265306122448,
        "meteor-133": 0.8130796097795978,
        "meteor-16": 0.795493978210275,
        "meteor-3": 0.8865905387579855,
        "meteor-156": 0.871435144933063,
        "meteor-47": 0.046948356807511735,
        "meteor-37": 0.802610773602178,
        "meteor-32": 0.8130796097795978,
        "meteor-20": 0.8130796097795978,
        "meteor-15": 0.5739950975507683,
        "meteor-140": 0.3018799382435746,
        "meteor-99": 0.7988288669251665,
        "meteor-13": 0.8130796097795978,
        "meteor-117": 0.8095492593038661,
        "meteor-80": 0.19402810304449647,
        "meteor-6": 0.8006819824159942,
        "meteor-31": 0.8130796097795978,
        "meteor-33": 0.8715751177984961,
        "meteor-92": 0.8130796097795978,
        "meteor-120": 0.8008921209820451,
        "meteor-107": 0.03597122302158273,
        "ruby-133": 0.782608695652174,
        "ruby-16": 0.7346938775510203,
        "ruby-3": 0.782608695652174,
        "ruby-156": 0.7222222222222222,
        "ruby-47": 0.08695652173913049,
        "ruby-37": 0.6923076923076923,
        "ruby-32": 0.782608695652174,
        "ruby-20": 0.782608695652174,
        "ruby-15": 0.2605633802816901,
        "ruby-140": 0.17391304347826086,
        "ruby-99": 0.4285714285714286,
        "ruby-13": 0.782608695652174,
        "ruby-117": 0.782608695652174,
        "ruby-80": 0.17391304347826086,
        "ruby-6": 0.782608695652174,
        "ruby-31": 0.782608695652174,
        "ruby-33": 0.679245283018868,
        "ruby-92": 0.782608695652174,
        "ruby-120": 0.679245283018868,
        "ruby-107": 0.04347826086956519,
        "codebertscore_f1-133": 0.9457218647003174,
        "codebertscore_f3-133": 0.9479843378067017,
        "codebertscore_f1-16": 0.9031750559806824,
        "codebertscore_f3-16": 0.9163281917572021,
        "codebertscore_f1-3": 0.9473953247070312,
        "codebertscore_f3-3": 0.9497423768043518,
        "codebertscore_f1-156": 0.89505535364151,
        "codebertscore_f3-156": 0.935330867767334,
        "codebertscore_f1-47": 0.6066392660140991,
        "codebertscore_f3-47": 0.6027587652206421,
        "codebertscore_f1-37": 0.8926315307617188,
        "codebertscore_f3-37": 0.920045793056488,
        "codebertscore_f1-32": 0.9469085335731506,
        "codebertscore_f3-32": 0.9491410255432129,
        "codebertscore_f1-20": 0.9546889662742615,
        "codebertscore_f3-20": 0.9569833874702454,
        "codebertscore_f1-15": 0.7585082650184631,
        "codebertscore_f3-15": 0.8147504329681396,
        "codebertscore_f1-140": 0.7325518727302551,
        "codebertscore_f3-140": 0.7700291872024536,
        "codebertscore_f1-99": 0.8268401622772217,
        "codebertscore_f3-99": 0.8703837394714355,
        "codebertscore_f1-13": 0.9477158188819885,
        "codebertscore_f3-13": 0.9498327970504761,
        "codebertscore_f1-117": 0.937473475933075,
        "codebertscore_f3-117": 0.9395841956138611,
        "codebertscore_f1-80": 0.7245898842811584,
        "codebertscore_f3-80": 0.7053802609443665,
        "codebertscore_f1-6": 0.9465988278388977,
        "codebertscore_f3-6": 0.9488089680671692,
        "codebertscore_f1-31": 0.94572913646698,
        "codebertscore_f3-31": 0.9479087591171265,
        "codebertscore_f1-33": 0.903593122959137,
        "codebertscore_f3-33": 0.938775360584259,
        "codebertscore_f1-92": 0.9512050151824951,
        "codebertscore_f3-92": 0.9535714983940125,
        "codebertscore_f1-120": 0.8856222629547119,
        "codebertscore_f3-120": 0.9169109463691711,
        "codebertscore_f1-107": 0.6580955982208252,
        "codebertscore_f3-107": 0.6066238284111023,
        "codebertscore_s_f1-133": 0.9557960033416748,
        "codebertscore_s_f3-133": 0.9591363668441772,
        "codebertscore_s_f1-16": 0.9129108786582947,
        "codebertscore_s_f3-16": 0.9292658567428589,
        "codebertscore_s_f1-3": 0.9584192633628845,
        "codebertscore_s_f3-3": 0.9618800282478333,
        "codebertscore_s_f1-156": 0.9040613770484924,
        "codebertscore_s_f3-156": 0.9459055662155151,
        "codebertscore_s_f1-47": 0.5942157506942749,
        "codebertscore_s_f3-47": 0.5911957025527954,
        "codebertscore_s_f1-37": 0.9119987487792969,
        "codebertscore_s_f3-37": 0.9421839714050293,
        "codebertscore_s_f1-32": 0.9576366543769836,
        "codebertscore_s_f3-32": 0.9610344171524048,
        "codebertscore_s_f1-20": 0.9634643793106079,
        "codebertscore_s_f3-20": 0.9669833183288574,
        "codebertscore_s_f1-15": 0.7809085845947266,
        "codebertscore_s_f3-15": 0.8403276801109314,
        "codebertscore_s_f1-140": 0.7430458664894104,
        "codebertscore_s_f3-140": 0.785776674747467,
        "codebertscore_s_f1-99": 0.847851037979126,
        "codebertscore_s_f3-99": 0.8949769139289856,
        "codebertscore_s_f1-13": 0.9558513164520264,
        "codebertscore_s_f3-13": 0.9591129422187805,
        "codebertscore_s_f1-117": 0.948966383934021,
        "codebertscore_s_f3-117": 0.9520919919013977,
        "codebertscore_s_f1-80": 0.7502166628837585,
        "codebertscore_s_f3-80": 0.7370792627334595,
        "codebertscore_s_f1-6": 0.9560716152191162,
        "codebertscore_s_f3-6": 0.9594528675079346,
        "codebertscore_s_f1-31": 0.9544814825057983,
        "codebertscore_s_f3-31": 0.9578930735588074,
        "codebertscore_s_f1-33": 0.915815532207489,
        "codebertscore_s_f3-33": 0.9524231553077698,
        "codebertscore_s_f1-92": 0.9620294570922852,
        "codebertscore_s_f3-92": 0.9656355381011963,
        "codebertscore_s_f1-120": 0.8965243101119995,
        "codebertscore_s_f3-120": 0.9299183487892151,
        "codebertscore_s_f1-107": 0.7405486106872559,
        "codebertscore_s_f3-107": 0.6696421504020691,
        "gpt35_nsnr-133": 4,
        "raw_gpt35_nsnr-133": "4",
        "gpt35_nsnr-16": 4,
        "raw_gpt35_nsnr-16": "4",
        "gpt35_nsnr-3": 4,
        "raw_gpt35_nsnr-3": "4",
        "gpt35_nsnr-156": 4,
        "raw_gpt35_nsnr-156": "4",
        "gpt35_nsnr-47": 0,
        "raw_gpt35_nsnr-47": "0",
        "gpt35_nsnr-37": 4,
        "raw_gpt35_nsnr-37": "4",
        "gpt35_nsnr-32": 4,
        "raw_gpt35_nsnr-32": "4",
        "gpt35_nsnr-20": 4,
        "raw_gpt35_nsnr-20": "4",
        "gpt35_nsnr-15": 3,
        "raw_gpt35_nsnr-15": "3",
        "gpt35_nsnr-140": 4,
        "raw_gpt35_nsnr-140": "4",
        "gpt35_nsnr-99": 4,
        "raw_gpt35_nsnr-99": "4",
        "gpt35_nsnr-13": 4,
        "raw_gpt35_nsnr-13": "4",
        "gpt35_nsnr-117": 4,
        "raw_gpt35_nsnr-117": "4",
        "gpt35_nsnr-80": 2,
        "raw_gpt35_nsnr-80": "2",
        "gpt35_nsnr-6": 4,
        "raw_gpt35_nsnr-6": "4",
        "gpt35_nsnr-31": 4,
        "raw_gpt35_nsnr-31": "4",
        "gpt35_nsnr-33": 4,
        "raw_gpt35_nsnr-33": "4",
        "gpt35_nsnr-92": 4,
        "raw_gpt35_nsnr-92": "4",
        "gpt35_nsnr-120": 4,
        "raw_gpt35_nsnr-120": "4",
        "gpt35_nsnr-107": 0,
        "raw_gpt35_nsnr-107": "3 - The code snippet returns the input ArrayList of strings without any filtering based on the given substring. It does not implement the required functionality of filtering the list based on the given substring.",
        "gpt35_nswr-133": 4,
        "raw_gpt35_nswr-133": "4",
        "gpt35_nswr-16": 4,
        "raw_gpt35_nswr-16": "4",
        "gpt35_nswr-3": 4,
        "raw_gpt35_nswr-3": "4",
        "gpt35_nswr-156": 4,
        "raw_gpt35_nswr-156": "4",
        "gpt35_nswr-47": 0,
        "raw_gpt35_nswr-47": "0",
        "gpt35_nswr-37": 4,
        "raw_gpt35_nswr-37": "4",
        "gpt35_nswr-32": 4,
        "raw_gpt35_nswr-32": "4",
        "gpt35_nswr-20": 4,
        "raw_gpt35_nswr-20": "4",
        "gpt35_nswr-15": 3,
        "raw_gpt35_nswr-15": "3",
        "gpt35_nswr-140": 4,
        "raw_gpt35_nswr-140": "4",
        "gpt35_nswr-99": 4,
        "raw_gpt35_nswr-99": "4",
        "gpt35_nswr-13": 4,
        "raw_gpt35_nswr-13": "4",
        "gpt35_nswr-117": 4,
        "raw_gpt35_nswr-117": "4",
        "gpt35_nswr-80": 0,
        "raw_gpt35_nswr-80": "0",
        "gpt35_nswr-6": 4,
        "raw_gpt35_nswr-6": "4",
        "gpt35_nswr-31": 4,
        "raw_gpt35_nswr-31": "4",
        "gpt35_nswr-33": 4,
        "raw_gpt35_nswr-33": "4",
        "gpt35_nswr-92": 4,
        "raw_gpt35_nswr-92": "4",
        "gpt35_nswr-120": 4,
        "raw_gpt35_nswr-120": "4",
        "gpt35_nswr-107": 2,
        "raw_gpt35_nswr-107": "2"
    }
]